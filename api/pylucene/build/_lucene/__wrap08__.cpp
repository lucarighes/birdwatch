#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/util/ArrayUtil.h"
#include "java/util/Comparator.h"
#include "java/lang/Comparable.h"
#include "java/lang/Class.h"
#include "java/lang/NumberFormatException.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {

        ::java::lang::Class *ArrayUtil::class$ = NULL;
        jmethodID *ArrayUtil::mids$ = NULL;
        bool ArrayUtil::live$ = false;
        jint ArrayUtil::MAX_ARRAY_LENGTH = (jint) 0;

        jclass ArrayUtil::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/util/ArrayUtil");

            mids$ = new jmethodID[max_mid];
            mids$[mid_copyOfSubArray_33260d5dc8f14bd0] = env->getStaticMethodID(cls, "copyOfSubArray", "([BII)[B");
            mids$[mid_copyOfSubArray_ca570db90ff6e0f1] = env->getStaticMethodID(cls, "copyOfSubArray", "([CII)[C");
            mids$[mid_copyOfSubArray_6b2f32f5ab793d0c] = env->getStaticMethodID(cls, "copyOfSubArray", "([DII)[D");
            mids$[mid_copyOfSubArray_0d04fdadd79a97ce] = env->getStaticMethodID(cls, "copyOfSubArray", "([FII)[F");
            mids$[mid_copyOfSubArray_af5b45ff63d82992] = env->getStaticMethodID(cls, "copyOfSubArray", "([III)[I");
            mids$[mid_copyOfSubArray_ba7d14c0962577c6] = env->getStaticMethodID(cls, "copyOfSubArray", "([JII)[J");
            mids$[mid_copyOfSubArray_244d7a3a846688e6] = env->getStaticMethodID(cls, "copyOfSubArray", "([Ljava/lang/Object;II)[Ljava/lang/Object;");
            mids$[mid_copyOfSubArray_a5236f77979b84ce] = env->getStaticMethodID(cls, "copyOfSubArray", "([SII)[S");
            mids$[mid_grow_92ad2a6ed04dfa49] = env->getStaticMethodID(cls, "grow", "([B)[B");
            mids$[mid_grow_cf0d16a7ba58e41d] = env->getStaticMethodID(cls, "grow", "([C)[C");
            mids$[mid_grow_b3673d134383c986] = env->getStaticMethodID(cls, "grow", "([D)[D");
            mids$[mid_grow_dec572bcc0a8f7b4] = env->getStaticMethodID(cls, "grow", "([F)[F");
            mids$[mid_grow_e2507885bf307d22] = env->getStaticMethodID(cls, "grow", "([I)[I");
            mids$[mid_grow_2842adfd81a29bfa] = env->getStaticMethodID(cls, "grow", "([J)[J");
            mids$[mid_grow_fba1bfef8eeaaaf3] = env->getStaticMethodID(cls, "grow", "([S)[S");
            mids$[mid_grow_478cfa823c780485] = env->getStaticMethodID(cls, "grow", "([BI)[B");
            mids$[mid_grow_03b7414ad135d405] = env->getStaticMethodID(cls, "grow", "([CI)[C");
            mids$[mid_grow_e3e5bf986725ed31] = env->getStaticMethodID(cls, "grow", "([DI)[D");
            mids$[mid_grow_bb41b4b6c049f550] = env->getStaticMethodID(cls, "grow", "([FI)[F");
            mids$[mid_grow_5d6e0b423e11726d] = env->getStaticMethodID(cls, "grow", "([II)[I");
            mids$[mid_grow_278093e726fd2826] = env->getStaticMethodID(cls, "grow", "([JI)[J");
            mids$[mid_grow_19c42e0f45b1d30d] = env->getStaticMethodID(cls, "grow", "([Ljava/lang/Object;I)[Ljava/lang/Object;");
            mids$[mid_grow_918425fa1c7f2801] = env->getStaticMethodID(cls, "grow", "([SI)[S");
            mids$[mid_growExact_478cfa823c780485] = env->getStaticMethodID(cls, "growExact", "([BI)[B");
            mids$[mid_growExact_03b7414ad135d405] = env->getStaticMethodID(cls, "growExact", "([CI)[C");
            mids$[mid_growExact_e3e5bf986725ed31] = env->getStaticMethodID(cls, "growExact", "([DI)[D");
            mids$[mid_growExact_bb41b4b6c049f550] = env->getStaticMethodID(cls, "growExact", "([FI)[F");
            mids$[mid_growExact_5d6e0b423e11726d] = env->getStaticMethodID(cls, "growExact", "([II)[I");
            mids$[mid_growExact_278093e726fd2826] = env->getStaticMethodID(cls, "growExact", "([JI)[J");
            mids$[mid_growExact_19c42e0f45b1d30d] = env->getStaticMethodID(cls, "growExact", "([Ljava/lang/Object;I)[Ljava/lang/Object;");
            mids$[mid_growExact_918425fa1c7f2801] = env->getStaticMethodID(cls, "growExact", "([SI)[S");
            mids$[mid_hashCode_644fc0bf0aa7fb26] = env->getStaticMethodID(cls, "hashCode", "([CII)I");
            mids$[mid_introSort_f26a4c17dc350da3] = env->getStaticMethodID(cls, "introSort", "([Ljava/lang/Comparable;)V");
            mids$[mid_introSort_f8e3b3d2a8c9889c] = env->getStaticMethodID(cls, "introSort", "([Ljava/lang/Object;Ljava/util/Comparator;)V");
            mids$[mid_introSort_a2389198cde72d32] = env->getStaticMethodID(cls, "introSort", "([Ljava/lang/Comparable;II)V");
            mids$[mid_introSort_fe20a22253bec8d0] = env->getStaticMethodID(cls, "introSort", "([Ljava/lang/Object;IILjava/util/Comparator;)V");
            mids$[mid_oversize_57a58545eba514db] = env->getStaticMethodID(cls, "oversize", "(II)I");
            mids$[mid_parseInt_644fc0bf0aa7fb26] = env->getStaticMethodID(cls, "parseInt", "([CII)I");
            mids$[mid_parseInt_16ffb1617e12e391] = env->getStaticMethodID(cls, "parseInt", "([CIII)I");
            mids$[mid_select_9fdd860c82b36657] = env->getStaticMethodID(cls, "select", "([Ljava/lang/Object;IIILjava/util/Comparator;)V");
            mids$[mid_swap_d4d2b2e959e9eb5a] = env->getStaticMethodID(cls, "swap", "([Ljava/lang/Object;II)V");
            mids$[mid_timSort_f26a4c17dc350da3] = env->getStaticMethodID(cls, "timSort", "([Ljava/lang/Comparable;)V");
            mids$[mid_timSort_f8e3b3d2a8c9889c] = env->getStaticMethodID(cls, "timSort", "([Ljava/lang/Object;Ljava/util/Comparator;)V");
            mids$[mid_timSort_a2389198cde72d32] = env->getStaticMethodID(cls, "timSort", "([Ljava/lang/Comparable;II)V");
            mids$[mid_timSort_fe20a22253bec8d0] = env->getStaticMethodID(cls, "timSort", "([Ljava/lang/Object;IILjava/util/Comparator;)V");

            class$ = new ::java::lang::Class(cls);
            cls = (jclass) class$->this$;

            MAX_ARRAY_LENGTH = env->getStaticIntField(cls, "MAX_ARRAY_LENGTH");
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        JArray< jbyte > ArrayUtil::copyOfSubArray(const JArray< jbyte > & a0, jint a1, jint a2)
        {
          jclass cls = env->getClass(initializeClass);
          return JArray< jbyte >(env->callStaticObjectMethod(cls, mids$[mid_copyOfSubArray_33260d5dc8f14bd0], a0.this$, a1, a2));
        }

        JArray< jchar > ArrayUtil::copyOfSubArray(const JArray< jchar > & a0, jint a1, jint a2)
        {
          jclass cls = env->getClass(initializeClass);
          return JArray< jchar >(env->callStaticObjectMethod(cls, mids$[mid_copyOfSubArray_ca570db90ff6e0f1], a0.this$, a1, a2));
        }

        JArray< jdouble > ArrayUtil::copyOfSubArray(const JArray< jdouble > & a0, jint a1, jint a2)
        {
          jclass cls = env->getClass(initializeClass);
          return JArray< jdouble >(env->callStaticObjectMethod(cls, mids$[mid_copyOfSubArray_6b2f32f5ab793d0c], a0.this$, a1, a2));
        }

        JArray< jfloat > ArrayUtil::copyOfSubArray(const JArray< jfloat > & a0, jint a1, jint a2)
        {
          jclass cls = env->getClass(initializeClass);
          return JArray< jfloat >(env->callStaticObjectMethod(cls, mids$[mid_copyOfSubArray_0d04fdadd79a97ce], a0.this$, a1, a2));
        }

        JArray< jint > ArrayUtil::copyOfSubArray(const JArray< jint > & a0, jint a1, jint a2)
        {
          jclass cls = env->getClass(initializeClass);
          return JArray< jint >(env->callStaticObjectMethod(cls, mids$[mid_copyOfSubArray_af5b45ff63d82992], a0.this$, a1, a2));
        }

        JArray< jlong > ArrayUtil::copyOfSubArray(const JArray< jlong > & a0, jint a1, jint a2)
        {
          jclass cls = env->getClass(initializeClass);
          return JArray< jlong >(env->callStaticObjectMethod(cls, mids$[mid_copyOfSubArray_ba7d14c0962577c6], a0.this$, a1, a2));
        }

        JArray< ::java::lang::Object > ArrayUtil::copyOfSubArray(const JArray< ::java::lang::Object > & a0, jint a1, jint a2)
        {
          jclass cls = env->getClass(initializeClass);
          return JArray< ::java::lang::Object >(env->callStaticObjectMethod(cls, mids$[mid_copyOfSubArray_244d7a3a846688e6], a0.this$, a1, a2));
        }

        JArray< jshort > ArrayUtil::copyOfSubArray(const JArray< jshort > & a0, jint a1, jint a2)
        {
          jclass cls = env->getClass(initializeClass);
          return JArray< jshort >(env->callStaticObjectMethod(cls, mids$[mid_copyOfSubArray_a5236f77979b84ce], a0.this$, a1, a2));
        }

        JArray< jbyte > ArrayUtil::grow(const JArray< jbyte > & a0)
        {
          jclass cls = env->getClass(initializeClass);
          return JArray< jbyte >(env->callStaticObjectMethod(cls, mids$[mid_grow_92ad2a6ed04dfa49], a0.this$));
        }

        JArray< jchar > ArrayUtil::grow(const JArray< jchar > & a0)
        {
          jclass cls = env->getClass(initializeClass);
          return JArray< jchar >(env->callStaticObjectMethod(cls, mids$[mid_grow_cf0d16a7ba58e41d], a0.this$));
        }

        JArray< jdouble > ArrayUtil::grow(const JArray< jdouble > & a0)
        {
          jclass cls = env->getClass(initializeClass);
          return JArray< jdouble >(env->callStaticObjectMethod(cls, mids$[mid_grow_b3673d134383c986], a0.this$));
        }

        JArray< jfloat > ArrayUtil::grow(const JArray< jfloat > & a0)
        {
          jclass cls = env->getClass(initializeClass);
          return JArray< jfloat >(env->callStaticObjectMethod(cls, mids$[mid_grow_dec572bcc0a8f7b4], a0.this$));
        }

        JArray< jint > ArrayUtil::grow(const JArray< jint > & a0)
        {
          jclass cls = env->getClass(initializeClass);
          return JArray< jint >(env->callStaticObjectMethod(cls, mids$[mid_grow_e2507885bf307d22], a0.this$));
        }

        JArray< jlong > ArrayUtil::grow(const JArray< jlong > & a0)
        {
          jclass cls = env->getClass(initializeClass);
          return JArray< jlong >(env->callStaticObjectMethod(cls, mids$[mid_grow_2842adfd81a29bfa], a0.this$));
        }

        JArray< jshort > ArrayUtil::grow(const JArray< jshort > & a0)
        {
          jclass cls = env->getClass(initializeClass);
          return JArray< jshort >(env->callStaticObjectMethod(cls, mids$[mid_grow_fba1bfef8eeaaaf3], a0.this$));
        }

        JArray< jbyte > ArrayUtil::grow(const JArray< jbyte > & a0, jint a1)
        {
          jclass cls = env->getClass(initializeClass);
          return JArray< jbyte >(env->callStaticObjectMethod(cls, mids$[mid_grow_478cfa823c780485], a0.this$, a1));
        }

        JArray< jchar > ArrayUtil::grow(const JArray< jchar > & a0, jint a1)
        {
          jclass cls = env->getClass(initializeClass);
          return JArray< jchar >(env->callStaticObjectMethod(cls, mids$[mid_grow_03b7414ad135d405], a0.this$, a1));
        }

        JArray< jdouble > ArrayUtil::grow(const JArray< jdouble > & a0, jint a1)
        {
          jclass cls = env->getClass(initializeClass);
          return JArray< jdouble >(env->callStaticObjectMethod(cls, mids$[mid_grow_e3e5bf986725ed31], a0.this$, a1));
        }

        JArray< jfloat > ArrayUtil::grow(const JArray< jfloat > & a0, jint a1)
        {
          jclass cls = env->getClass(initializeClass);
          return JArray< jfloat >(env->callStaticObjectMethod(cls, mids$[mid_grow_bb41b4b6c049f550], a0.this$, a1));
        }

        JArray< jint > ArrayUtil::grow(const JArray< jint > & a0, jint a1)
        {
          jclass cls = env->getClass(initializeClass);
          return JArray< jint >(env->callStaticObjectMethod(cls, mids$[mid_grow_5d6e0b423e11726d], a0.this$, a1));
        }

        JArray< jlong > ArrayUtil::grow(const JArray< jlong > & a0, jint a1)
        {
          jclass cls = env->getClass(initializeClass);
          return JArray< jlong >(env->callStaticObjectMethod(cls, mids$[mid_grow_278093e726fd2826], a0.this$, a1));
        }

        JArray< ::java::lang::Object > ArrayUtil::grow(const JArray< ::java::lang::Object > & a0, jint a1)
        {
          jclass cls = env->getClass(initializeClass);
          return JArray< ::java::lang::Object >(env->callStaticObjectMethod(cls, mids$[mid_grow_19c42e0f45b1d30d], a0.this$, a1));
        }

        JArray< jshort > ArrayUtil::grow(const JArray< jshort > & a0, jint a1)
        {
          jclass cls = env->getClass(initializeClass);
          return JArray< jshort >(env->callStaticObjectMethod(cls, mids$[mid_grow_918425fa1c7f2801], a0.this$, a1));
        }

        JArray< jbyte > ArrayUtil::growExact(const JArray< jbyte > & a0, jint a1)
        {
          jclass cls = env->getClass(initializeClass);
          return JArray< jbyte >(env->callStaticObjectMethod(cls, mids$[mid_growExact_478cfa823c780485], a0.this$, a1));
        }

        JArray< jchar > ArrayUtil::growExact(const JArray< jchar > & a0, jint a1)
        {
          jclass cls = env->getClass(initializeClass);
          return JArray< jchar >(env->callStaticObjectMethod(cls, mids$[mid_growExact_03b7414ad135d405], a0.this$, a1));
        }

        JArray< jdouble > ArrayUtil::growExact(const JArray< jdouble > & a0, jint a1)
        {
          jclass cls = env->getClass(initializeClass);
          return JArray< jdouble >(env->callStaticObjectMethod(cls, mids$[mid_growExact_e3e5bf986725ed31], a0.this$, a1));
        }

        JArray< jfloat > ArrayUtil::growExact(const JArray< jfloat > & a0, jint a1)
        {
          jclass cls = env->getClass(initializeClass);
          return JArray< jfloat >(env->callStaticObjectMethod(cls, mids$[mid_growExact_bb41b4b6c049f550], a0.this$, a1));
        }

        JArray< jint > ArrayUtil::growExact(const JArray< jint > & a0, jint a1)
        {
          jclass cls = env->getClass(initializeClass);
          return JArray< jint >(env->callStaticObjectMethod(cls, mids$[mid_growExact_5d6e0b423e11726d], a0.this$, a1));
        }

        JArray< jlong > ArrayUtil::growExact(const JArray< jlong > & a0, jint a1)
        {
          jclass cls = env->getClass(initializeClass);
          return JArray< jlong >(env->callStaticObjectMethod(cls, mids$[mid_growExact_278093e726fd2826], a0.this$, a1));
        }

        JArray< ::java::lang::Object > ArrayUtil::growExact(const JArray< ::java::lang::Object > & a0, jint a1)
        {
          jclass cls = env->getClass(initializeClass);
          return JArray< ::java::lang::Object >(env->callStaticObjectMethod(cls, mids$[mid_growExact_19c42e0f45b1d30d], a0.this$, a1));
        }

        JArray< jshort > ArrayUtil::growExact(const JArray< jshort > & a0, jint a1)
        {
          jclass cls = env->getClass(initializeClass);
          return JArray< jshort >(env->callStaticObjectMethod(cls, mids$[mid_growExact_918425fa1c7f2801], a0.this$, a1));
        }

        jint ArrayUtil::hashCode(const JArray< jchar > & a0, jint a1, jint a2)
        {
          jclass cls = env->getClass(initializeClass);
          return env->callStaticIntMethod(cls, mids$[mid_hashCode_644fc0bf0aa7fb26], a0.this$, a1, a2);
        }

        void ArrayUtil::introSort(const JArray< ::java::lang::Comparable > & a0)
        {
          jclass cls = env->getClass(initializeClass);
          env->callStaticVoidMethod(cls, mids$[mid_introSort_f26a4c17dc350da3], a0.this$);
        }

        void ArrayUtil::introSort(const JArray< ::java::lang::Object > & a0, const ::java::util::Comparator & a1)
        {
          jclass cls = env->getClass(initializeClass);
          env->callStaticVoidMethod(cls, mids$[mid_introSort_f8e3b3d2a8c9889c], a0.this$, a1.this$);
        }

        void ArrayUtil::introSort(const JArray< ::java::lang::Comparable > & a0, jint a1, jint a2)
        {
          jclass cls = env->getClass(initializeClass);
          env->callStaticVoidMethod(cls, mids$[mid_introSort_a2389198cde72d32], a0.this$, a1, a2);
        }

        void ArrayUtil::introSort(const JArray< ::java::lang::Object > & a0, jint a1, jint a2, const ::java::util::Comparator & a3)
        {
          jclass cls = env->getClass(initializeClass);
          env->callStaticVoidMethod(cls, mids$[mid_introSort_fe20a22253bec8d0], a0.this$, a1, a2, a3.this$);
        }

        jint ArrayUtil::oversize(jint a0, jint a1)
        {
          jclass cls = env->getClass(initializeClass);
          return env->callStaticIntMethod(cls, mids$[mid_oversize_57a58545eba514db], a0, a1);
        }

        jint ArrayUtil::parseInt(const JArray< jchar > & a0, jint a1, jint a2)
        {
          jclass cls = env->getClass(initializeClass);
          return env->callStaticIntMethod(cls, mids$[mid_parseInt_644fc0bf0aa7fb26], a0.this$, a1, a2);
        }

        jint ArrayUtil::parseInt(const JArray< jchar > & a0, jint a1, jint a2, jint a3)
        {
          jclass cls = env->getClass(initializeClass);
          return env->callStaticIntMethod(cls, mids$[mid_parseInt_16ffb1617e12e391], a0.this$, a1, a2, a3);
        }

        void ArrayUtil::select(const JArray< ::java::lang::Object > & a0, jint a1, jint a2, jint a3, const ::java::util::Comparator & a4)
        {
          jclass cls = env->getClass(initializeClass);
          env->callStaticVoidMethod(cls, mids$[mid_select_9fdd860c82b36657], a0.this$, a1, a2, a3, a4.this$);
        }

        void ArrayUtil::swap(const JArray< ::java::lang::Object > & a0, jint a1, jint a2)
        {
          jclass cls = env->getClass(initializeClass);
          env->callStaticVoidMethod(cls, mids$[mid_swap_d4d2b2e959e9eb5a], a0.this$, a1, a2);
        }

        void ArrayUtil::timSort(const JArray< ::java::lang::Comparable > & a0)
        {
          jclass cls = env->getClass(initializeClass);
          env->callStaticVoidMethod(cls, mids$[mid_timSort_f26a4c17dc350da3], a0.this$);
        }

        void ArrayUtil::timSort(const JArray< ::java::lang::Object > & a0, const ::java::util::Comparator & a1)
        {
          jclass cls = env->getClass(initializeClass);
          env->callStaticVoidMethod(cls, mids$[mid_timSort_f8e3b3d2a8c9889c], a0.this$, a1.this$);
        }

        void ArrayUtil::timSort(const JArray< ::java::lang::Comparable > & a0, jint a1, jint a2)
        {
          jclass cls = env->getClass(initializeClass);
          env->callStaticVoidMethod(cls, mids$[mid_timSort_a2389198cde72d32], a0.this$, a1, a2);
        }

        void ArrayUtil::timSort(const JArray< ::java::lang::Object > & a0, jint a1, jint a2, const ::java::util::Comparator & a3)
        {
          jclass cls = env->getClass(initializeClass);
          env->callStaticVoidMethod(cls, mids$[mid_timSort_fe20a22253bec8d0], a0.this$, a1, a2, a3.this$);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        static PyObject *t_ArrayUtil_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_ArrayUtil_instance_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_ArrayUtil_copyOfSubArray(PyTypeObject *type, PyObject *args);
        static PyObject *t_ArrayUtil_grow(PyTypeObject *type, PyObject *args);
        static PyObject *t_ArrayUtil_growExact(PyTypeObject *type, PyObject *args);
        static PyObject *t_ArrayUtil_hashCode(PyTypeObject *type, PyObject *args);
        static PyObject *t_ArrayUtil_introSort(PyTypeObject *type, PyObject *args);
        static PyObject *t_ArrayUtil_oversize(PyTypeObject *type, PyObject *args);
        static PyObject *t_ArrayUtil_parseInt(PyTypeObject *type, PyObject *args);
        static PyObject *t_ArrayUtil_select(PyTypeObject *type, PyObject *args);
        static PyObject *t_ArrayUtil_swap(PyTypeObject *type, PyObject *args);
        static PyObject *t_ArrayUtil_timSort(PyTypeObject *type, PyObject *args);

        static PyMethodDef t_ArrayUtil__methods_[] = {
          DECLARE_METHOD(t_ArrayUtil, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_ArrayUtil, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_ArrayUtil, copyOfSubArray, METH_VARARGS | METH_CLASS),
          DECLARE_METHOD(t_ArrayUtil, grow, METH_VARARGS | METH_CLASS),
          DECLARE_METHOD(t_ArrayUtil, growExact, METH_VARARGS | METH_CLASS),
          DECLARE_METHOD(t_ArrayUtil, hashCode, METH_VARARGS | METH_CLASS),
          DECLARE_METHOD(t_ArrayUtil, introSort, METH_VARARGS | METH_CLASS),
          DECLARE_METHOD(t_ArrayUtil, oversize, METH_VARARGS | METH_CLASS),
          DECLARE_METHOD(t_ArrayUtil, parseInt, METH_VARARGS | METH_CLASS),
          DECLARE_METHOD(t_ArrayUtil, select, METH_VARARGS | METH_CLASS),
          DECLARE_METHOD(t_ArrayUtil, swap, METH_VARARGS | METH_CLASS),
          DECLARE_METHOD(t_ArrayUtil, timSort, METH_VARARGS | METH_CLASS),
          { NULL, NULL, 0, NULL }
        };

        static PyType_Slot PY_TYPE_SLOTS(ArrayUtil)[] = {
          { Py_tp_methods, t_ArrayUtil__methods_ },
          { Py_tp_init, (void *) abstract_init },
          { 0, NULL }
        };

        static PyType_Def *PY_TYPE_BASES(ArrayUtil)[] = {
          &PY_TYPE_DEF(::java::lang::Object),
          NULL
        };

        DEFINE_TYPE(ArrayUtil, t_ArrayUtil, ArrayUtil);

        void t_ArrayUtil::install(PyObject *module)
        {
          installType(&PY_TYPE(ArrayUtil), &PY_TYPE_DEF(ArrayUtil), module, "ArrayUtil", 0);
        }

        void t_ArrayUtil::initialize(PyObject *module)
        {
          PyObject_SetAttrString((PyObject *) PY_TYPE(ArrayUtil), "class_", make_descriptor(ArrayUtil::initializeClass, 1));
          PyObject_SetAttrString((PyObject *) PY_TYPE(ArrayUtil), "wrapfn_", make_descriptor(t_ArrayUtil::wrap_jobject));
          PyObject_SetAttrString((PyObject *) PY_TYPE(ArrayUtil), "boxfn_", make_descriptor(boxObject));
          env->getClass(ArrayUtil::initializeClass);
          PyObject_SetAttrString((PyObject *) PY_TYPE(ArrayUtil), "MAX_ARRAY_LENGTH", make_descriptor(ArrayUtil::MAX_ARRAY_LENGTH));
        }

        static PyObject *t_ArrayUtil_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, ArrayUtil::initializeClass, 1)))
            return NULL;
          return t_ArrayUtil::wrap_Object(ArrayUtil(((t_ArrayUtil *) arg)->object.this$));
        }
        static PyObject *t_ArrayUtil_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, ArrayUtil::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static PyObject *t_ArrayUtil_copyOfSubArray(PyTypeObject *type, PyObject *args)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 3:
            {
              JArray< jbyte > a0((jobject) NULL);
              jint a1;
              jint a2;
              JArray< jbyte > result((jobject) NULL);

              if (!parseArgs(args, "[BII", &a0, &a1, &a2))
              {
                OBJ_CALL(result = ::org::apache::lucene::util::ArrayUtil::copyOfSubArray(a0, a1, a2));
                return result.wrap();
              }
            }
            {
              JArray< jchar > a0((jobject) NULL);
              jint a1;
              jint a2;
              JArray< jchar > result((jobject) NULL);

              if (!parseArgs(args, "[CII", &a0, &a1, &a2))
              {
                OBJ_CALL(result = ::org::apache::lucene::util::ArrayUtil::copyOfSubArray(a0, a1, a2));
                return result.wrap();
              }
            }
            {
              JArray< jdouble > a0((jobject) NULL);
              jint a1;
              jint a2;
              JArray< jdouble > result((jobject) NULL);

              if (!parseArgs(args, "[DII", &a0, &a1, &a2))
              {
                OBJ_CALL(result = ::org::apache::lucene::util::ArrayUtil::copyOfSubArray(a0, a1, a2));
                return result.wrap();
              }
            }
            {
              JArray< jfloat > a0((jobject) NULL);
              jint a1;
              jint a2;
              JArray< jfloat > result((jobject) NULL);

              if (!parseArgs(args, "[FII", &a0, &a1, &a2))
              {
                OBJ_CALL(result = ::org::apache::lucene::util::ArrayUtil::copyOfSubArray(a0, a1, a2));
                return result.wrap();
              }
            }
            {
              JArray< jint > a0((jobject) NULL);
              jint a1;
              jint a2;
              JArray< jint > result((jobject) NULL);

              if (!parseArgs(args, "[III", &a0, &a1, &a2))
              {
                OBJ_CALL(result = ::org::apache::lucene::util::ArrayUtil::copyOfSubArray(a0, a1, a2));
                return result.wrap();
              }
            }
            {
              JArray< jlong > a0((jobject) NULL);
              jint a1;
              jint a2;
              JArray< jlong > result((jobject) NULL);

              if (!parseArgs(args, "[JII", &a0, &a1, &a2))
              {
                OBJ_CALL(result = ::org::apache::lucene::util::ArrayUtil::copyOfSubArray(a0, a1, a2));
                return result.wrap();
              }
            }
            {
              JArray< ::java::lang::Object > a0((jobject) NULL);
              jint a1;
              jint a2;
              JArray< ::java::lang::Object > result((jobject) NULL);

              if (!parseArgs(args, "[oII", &a0, &a1, &a2))
              {
                OBJ_CALL(result = ::org::apache::lucene::util::ArrayUtil::copyOfSubArray(a0, a1, a2));
                return JArray<jobject>(result.this$).wrap(::java::lang::t_Object::wrap_jobject);
              }
            }
            {
              JArray< jshort > a0((jobject) NULL);
              jint a1;
              jint a2;
              JArray< jshort > result((jobject) NULL);

              if (!parseArgs(args, "[SII", &a0, &a1, &a2))
              {
                OBJ_CALL(result = ::org::apache::lucene::util::ArrayUtil::copyOfSubArray(a0, a1, a2));
                return result.wrap();
              }
            }
          }

          PyErr_SetArgsError(type, "copyOfSubArray", args);
          return NULL;
        }

        static PyObject *t_ArrayUtil_grow(PyTypeObject *type, PyObject *args)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 1:
            {
              JArray< jbyte > a0((jobject) NULL);
              JArray< jbyte > result((jobject) NULL);

              if (!parseArgs(args, "[B", &a0))
              {
                OBJ_CALL(result = ::org::apache::lucene::util::ArrayUtil::grow(a0));
                return result.wrap();
              }
            }
            {
              JArray< jchar > a0((jobject) NULL);
              JArray< jchar > result((jobject) NULL);

              if (!parseArgs(args, "[C", &a0))
              {
                OBJ_CALL(result = ::org::apache::lucene::util::ArrayUtil::grow(a0));
                return result.wrap();
              }
            }
            {
              JArray< jdouble > a0((jobject) NULL);
              JArray< jdouble > result((jobject) NULL);

              if (!parseArgs(args, "[D", &a0))
              {
                OBJ_CALL(result = ::org::apache::lucene::util::ArrayUtil::grow(a0));
                return result.wrap();
              }
            }
            {
              JArray< jfloat > a0((jobject) NULL);
              JArray< jfloat > result((jobject) NULL);

              if (!parseArgs(args, "[F", &a0))
              {
                OBJ_CALL(result = ::org::apache::lucene::util::ArrayUtil::grow(a0));
                return result.wrap();
              }
            }
            {
              JArray< jint > a0((jobject) NULL);
              JArray< jint > result((jobject) NULL);

              if (!parseArgs(args, "[I", &a0))
              {
                OBJ_CALL(result = ::org::apache::lucene::util::ArrayUtil::grow(a0));
                return result.wrap();
              }
            }
            {
              JArray< jlong > a0((jobject) NULL);
              JArray< jlong > result((jobject) NULL);

              if (!parseArgs(args, "[J", &a0))
              {
                OBJ_CALL(result = ::org::apache::lucene::util::ArrayUtil::grow(a0));
                return result.wrap();
              }
            }
            {
              JArray< jshort > a0((jobject) NULL);
              JArray< jshort > result((jobject) NULL);

              if (!parseArgs(args, "[S", &a0))
              {
                OBJ_CALL(result = ::org::apache::lucene::util::ArrayUtil::grow(a0));
                return result.wrap();
              }
            }
            break;
           case 2:
            {
              JArray< jbyte > a0((jobject) NULL);
              jint a1;
              JArray< jbyte > result((jobject) NULL);

              if (!parseArgs(args, "[BI", &a0, &a1))
              {
                OBJ_CALL(result = ::org::apache::lucene::util::ArrayUtil::grow(a0, a1));
                return result.wrap();
              }
            }
            {
              JArray< jchar > a0((jobject) NULL);
              jint a1;
              JArray< jchar > result((jobject) NULL);

              if (!parseArgs(args, "[CI", &a0, &a1))
              {
                OBJ_CALL(result = ::org::apache::lucene::util::ArrayUtil::grow(a0, a1));
                return result.wrap();
              }
            }
            {
              JArray< jdouble > a0((jobject) NULL);
              jint a1;
              JArray< jdouble > result((jobject) NULL);

              if (!parseArgs(args, "[DI", &a0, &a1))
              {
                OBJ_CALL(result = ::org::apache::lucene::util::ArrayUtil::grow(a0, a1));
                return result.wrap();
              }
            }
            {
              JArray< jfloat > a0((jobject) NULL);
              jint a1;
              JArray< jfloat > result((jobject) NULL);

              if (!parseArgs(args, "[FI", &a0, &a1))
              {
                OBJ_CALL(result = ::org::apache::lucene::util::ArrayUtil::grow(a0, a1));
                return result.wrap();
              }
            }
            {
              JArray< jint > a0((jobject) NULL);
              jint a1;
              JArray< jint > result((jobject) NULL);

              if (!parseArgs(args, "[II", &a0, &a1))
              {
                OBJ_CALL(result = ::org::apache::lucene::util::ArrayUtil::grow(a0, a1));
                return result.wrap();
              }
            }
            {
              JArray< jlong > a0((jobject) NULL);
              jint a1;
              JArray< jlong > result((jobject) NULL);

              if (!parseArgs(args, "[JI", &a0, &a1))
              {
                OBJ_CALL(result = ::org::apache::lucene::util::ArrayUtil::grow(a0, a1));
                return result.wrap();
              }
            }
            {
              JArray< ::java::lang::Object > a0((jobject) NULL);
              jint a1;
              JArray< ::java::lang::Object > result((jobject) NULL);

              if (!parseArgs(args, "[oI", &a0, &a1))
              {
                OBJ_CALL(result = ::org::apache::lucene::util::ArrayUtil::grow(a0, a1));
                return JArray<jobject>(result.this$).wrap(::java::lang::t_Object::wrap_jobject);
              }
            }
            {
              JArray< jshort > a0((jobject) NULL);
              jint a1;
              JArray< jshort > result((jobject) NULL);

              if (!parseArgs(args, "[SI", &a0, &a1))
              {
                OBJ_CALL(result = ::org::apache::lucene::util::ArrayUtil::grow(a0, a1));
                return result.wrap();
              }
            }
          }

          PyErr_SetArgsError(type, "grow", args);
          return NULL;
        }

        static PyObject *t_ArrayUtil_growExact(PyTypeObject *type, PyObject *args)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 2:
            {
              JArray< jbyte > a0((jobject) NULL);
              jint a1;
              JArray< jbyte > result((jobject) NULL);

              if (!parseArgs(args, "[BI", &a0, &a1))
              {
                OBJ_CALL(result = ::org::apache::lucene::util::ArrayUtil::growExact(a0, a1));
                return result.wrap();
              }
            }
            {
              JArray< jchar > a0((jobject) NULL);
              jint a1;
              JArray< jchar > result((jobject) NULL);

              if (!parseArgs(args, "[CI", &a0, &a1))
              {
                OBJ_CALL(result = ::org::apache::lucene::util::ArrayUtil::growExact(a0, a1));
                return result.wrap();
              }
            }
            {
              JArray< jdouble > a0((jobject) NULL);
              jint a1;
              JArray< jdouble > result((jobject) NULL);

              if (!parseArgs(args, "[DI", &a0, &a1))
              {
                OBJ_CALL(result = ::org::apache::lucene::util::ArrayUtil::growExact(a0, a1));
                return result.wrap();
              }
            }
            {
              JArray< jfloat > a0((jobject) NULL);
              jint a1;
              JArray< jfloat > result((jobject) NULL);

              if (!parseArgs(args, "[FI", &a0, &a1))
              {
                OBJ_CALL(result = ::org::apache::lucene::util::ArrayUtil::growExact(a0, a1));
                return result.wrap();
              }
            }
            {
              JArray< jint > a0((jobject) NULL);
              jint a1;
              JArray< jint > result((jobject) NULL);

              if (!parseArgs(args, "[II", &a0, &a1))
              {
                OBJ_CALL(result = ::org::apache::lucene::util::ArrayUtil::growExact(a0, a1));
                return result.wrap();
              }
            }
            {
              JArray< jlong > a0((jobject) NULL);
              jint a1;
              JArray< jlong > result((jobject) NULL);

              if (!parseArgs(args, "[JI", &a0, &a1))
              {
                OBJ_CALL(result = ::org::apache::lucene::util::ArrayUtil::growExact(a0, a1));
                return result.wrap();
              }
            }
            {
              JArray< ::java::lang::Object > a0((jobject) NULL);
              jint a1;
              JArray< ::java::lang::Object > result((jobject) NULL);

              if (!parseArgs(args, "[oI", &a0, &a1))
              {
                OBJ_CALL(result = ::org::apache::lucene::util::ArrayUtil::growExact(a0, a1));
                return JArray<jobject>(result.this$).wrap(::java::lang::t_Object::wrap_jobject);
              }
            }
            {
              JArray< jshort > a0((jobject) NULL);
              jint a1;
              JArray< jshort > result((jobject) NULL);

              if (!parseArgs(args, "[SI", &a0, &a1))
              {
                OBJ_CALL(result = ::org::apache::lucene::util::ArrayUtil::growExact(a0, a1));
                return result.wrap();
              }
            }
          }

          PyErr_SetArgsError(type, "growExact", args);
          return NULL;
        }

        static PyObject *t_ArrayUtil_hashCode(PyTypeObject *type, PyObject *args)
        {
          JArray< jchar > a0((jobject) NULL);
          jint a1;
          jint a2;
          jint result;

          if (!parseArgs(args, "[CII", &a0, &a1, &a2))
          {
            OBJ_CALL(result = ::org::apache::lucene::util::ArrayUtil::hashCode(a0, a1, a2));
            return PyLong_FromLong((long) result);
          }

          return callSuper(type, "hashCode", args, 2);
        }

        static PyObject *t_ArrayUtil_introSort(PyTypeObject *type, PyObject *args)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 1:
            {
              JArray< ::java::lang::Comparable > a0((jobject) NULL);
              PyTypeObject **p0;

              if (!parseArgs(args, "[K", ::java::lang::Comparable::initializeClass, &a0, &p0, ::java::lang::t_Comparable::parameters_))
              {
                OBJ_CALL(::org::apache::lucene::util::ArrayUtil::introSort(a0));
                Py_RETURN_NONE;
              }
            }
            break;
           case 2:
            {
              JArray< ::java::lang::Object > a0((jobject) NULL);
              ::java::util::Comparator a1((jobject) NULL);
              PyTypeObject **p1;

              if (!parseArgs(args, "[oK", ::java::util::Comparator::initializeClass, &a0, &a1, &p1, ::java::util::t_Comparator::parameters_))
              {
                OBJ_CALL(::org::apache::lucene::util::ArrayUtil::introSort(a0, a1));
                Py_RETURN_NONE;
              }
            }
            break;
           case 3:
            {
              JArray< ::java::lang::Comparable > a0((jobject) NULL);
              PyTypeObject **p0;
              jint a1;
              jint a2;

              if (!parseArgs(args, "[KII", ::java::lang::Comparable::initializeClass, &a0, &p0, ::java::lang::t_Comparable::parameters_, &a1, &a2))
              {
                OBJ_CALL(::org::apache::lucene::util::ArrayUtil::introSort(a0, a1, a2));
                Py_RETURN_NONE;
              }
            }
            break;
           case 4:
            {
              JArray< ::java::lang::Object > a0((jobject) NULL);
              jint a1;
              jint a2;
              ::java::util::Comparator a3((jobject) NULL);
              PyTypeObject **p3;

              if (!parseArgs(args, "[oIIK", ::java::util::Comparator::initializeClass, &a0, &a1, &a2, &a3, &p3, ::java::util::t_Comparator::parameters_))
              {
                OBJ_CALL(::org::apache::lucene::util::ArrayUtil::introSort(a0, a1, a2, a3));
                Py_RETURN_NONE;
              }
            }
          }

          PyErr_SetArgsError(type, "introSort", args);
          return NULL;
        }

        static PyObject *t_ArrayUtil_oversize(PyTypeObject *type, PyObject *args)
        {
          jint a0;
          jint a1;
          jint result;

          if (!parseArgs(args, "II", &a0, &a1))
          {
            OBJ_CALL(result = ::org::apache::lucene::util::ArrayUtil::oversize(a0, a1));
            return PyLong_FromLong((long) result);
          }

          PyErr_SetArgsError(type, "oversize", args);
          return NULL;
        }

        static PyObject *t_ArrayUtil_parseInt(PyTypeObject *type, PyObject *args)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 3:
            {
              JArray< jchar > a0((jobject) NULL);
              jint a1;
              jint a2;
              jint result;

              if (!parseArgs(args, "[CII", &a0, &a1, &a2))
              {
                OBJ_CALL(result = ::org::apache::lucene::util::ArrayUtil::parseInt(a0, a1, a2));
                return PyLong_FromLong((long) result);
              }
            }
            break;
           case 4:
            {
              JArray< jchar > a0((jobject) NULL);
              jint a1;
              jint a2;
              jint a3;
              jint result;

              if (!parseArgs(args, "[CIII", &a0, &a1, &a2, &a3))
              {
                OBJ_CALL(result = ::org::apache::lucene::util::ArrayUtil::parseInt(a0, a1, a2, a3));
                return PyLong_FromLong((long) result);
              }
            }
          }

          PyErr_SetArgsError(type, "parseInt", args);
          return NULL;
        }

        static PyObject *t_ArrayUtil_select(PyTypeObject *type, PyObject *args)
        {
          JArray< ::java::lang::Object > a0((jobject) NULL);
          jint a1;
          jint a2;
          jint a3;
          ::java::util::Comparator a4((jobject) NULL);
          PyTypeObject **p4;

          if (!parseArgs(args, "[oIIIK", ::java::util::Comparator::initializeClass, &a0, &a1, &a2, &a3, &a4, &p4, ::java::util::t_Comparator::parameters_))
          {
            OBJ_CALL(::org::apache::lucene::util::ArrayUtil::select(a0, a1, a2, a3, a4));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError(type, "select", args);
          return NULL;
        }

        static PyObject *t_ArrayUtil_swap(PyTypeObject *type, PyObject *args)
        {
          JArray< ::java::lang::Object > a0((jobject) NULL);
          jint a1;
          jint a2;

          if (!parseArgs(args, "[oII", &a0, &a1, &a2))
          {
            OBJ_CALL(::org::apache::lucene::util::ArrayUtil::swap(a0, a1, a2));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError(type, "swap", args);
          return NULL;
        }

        static PyObject *t_ArrayUtil_timSort(PyTypeObject *type, PyObject *args)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 1:
            {
              JArray< ::java::lang::Comparable > a0((jobject) NULL);
              PyTypeObject **p0;

              if (!parseArgs(args, "[K", ::java::lang::Comparable::initializeClass, &a0, &p0, ::java::lang::t_Comparable::parameters_))
              {
                OBJ_CALL(::org::apache::lucene::util::ArrayUtil::timSort(a0));
                Py_RETURN_NONE;
              }
            }
            break;
           case 2:
            {
              JArray< ::java::lang::Object > a0((jobject) NULL);
              ::java::util::Comparator a1((jobject) NULL);
              PyTypeObject **p1;

              if (!parseArgs(args, "[oK", ::java::util::Comparator::initializeClass, &a0, &a1, &p1, ::java::util::t_Comparator::parameters_))
              {
                OBJ_CALL(::org::apache::lucene::util::ArrayUtil::timSort(a0, a1));
                Py_RETURN_NONE;
              }
            }
            break;
           case 3:
            {
              JArray< ::java::lang::Comparable > a0((jobject) NULL);
              PyTypeObject **p0;
              jint a1;
              jint a2;

              if (!parseArgs(args, "[KII", ::java::lang::Comparable::initializeClass, &a0, &p0, ::java::lang::t_Comparable::parameters_, &a1, &a2))
              {
                OBJ_CALL(::org::apache::lucene::util::ArrayUtil::timSort(a0, a1, a2));
                Py_RETURN_NONE;
              }
            }
            break;
           case 4:
            {
              JArray< ::java::lang::Object > a0((jobject) NULL);
              jint a1;
              jint a2;
              ::java::util::Comparator a3((jobject) NULL);
              PyTypeObject **p3;

              if (!parseArgs(args, "[oIIK", ::java::util::Comparator::initializeClass, &a0, &a1, &a2, &a3, &p3, ::java::util::t_Comparator::parameters_))
              {
                OBJ_CALL(::org::apache::lucene::util::ArrayUtil::timSort(a0, a1, a2, a3));
                Py_RETURN_NONE;
              }
            }
          }

          PyErr_SetArgsError(type, "timSort", args);
          return NULL;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/FieldComparator$TermOrdValComparator.h"
#include "org/apache/lucene/index/LeafReaderContext.h"
#include "org/apache/lucene/search/LeafFieldComparator.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/search/Scorable.h"
#include "org/apache/lucene/util/BytesRef.h"
#include "java/lang/String.h"
#include "java/io/IOException.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {

        ::java::lang::Class *FieldComparator$TermOrdValComparator::class$ = NULL;
        jmethodID *FieldComparator$TermOrdValComparator::mids$ = NULL;
        bool FieldComparator$TermOrdValComparator::live$ = false;

        jclass FieldComparator$TermOrdValComparator::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/search/FieldComparator$TermOrdValComparator");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_836a82ec1a65a0bc] = env->getMethodID(cls, "<init>", "(ILjava/lang/String;)V");
            mids$[mid_init$_c668924727dbd3e1] = env->getMethodID(cls, "<init>", "(ILjava/lang/String;Z)V");
            mids$[mid_compare_57a58545eba514db] = env->getMethodID(cls, "compare", "(II)I");
            mids$[mid_compareBottom_1e143afe1894d213] = env->getMethodID(cls, "compareBottom", "(I)I");
            mids$[mid_compareTop_1e143afe1894d213] = env->getMethodID(cls, "compareTop", "(I)I");
            mids$[mid_compareValues_f465493e4f3be174] = env->getMethodID(cls, "compareValues", "(Lorg/apache/lucene/util/BytesRef;Lorg/apache/lucene/util/BytesRef;)I");
            mids$[mid_copy_438c62480c481c65] = env->getMethodID(cls, "copy", "(II)V");
            mids$[mid_getLeafComparator_6183906b7058c4b5] = env->getMethodID(cls, "getLeafComparator", "(Lorg/apache/lucene/index/LeafReaderContext;)Lorg/apache/lucene/search/LeafFieldComparator;");
            mids$[mid_setBottom_040c4cd0390c5aff] = env->getMethodID(cls, "setBottom", "(I)V");
            mids$[mid_setScorer_57a565cc0113e133] = env->getMethodID(cls, "setScorer", "(Lorg/apache/lucene/search/Scorable;)V");
            mids$[mid_setTopValue_0bdfd2603b7490a8] = env->getMethodID(cls, "setTopValue", "(Lorg/apache/lucene/util/BytesRef;)V");
            mids$[mid_value_83238e65a54c68bb] = env->getMethodID(cls, "value", "(I)Lorg/apache/lucene/util/BytesRef;");
            mids$[mid_getSortedDocValues_f74ff9015a5b23ee] = env->getMethodID(cls, "getSortedDocValues", "(Lorg/apache/lucene/index/LeafReaderContext;Ljava/lang/String;)Lorg/apache/lucene/index/SortedDocValues;");

            class$ = new ::java::lang::Class(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        FieldComparator$TermOrdValComparator::FieldComparator$TermOrdValComparator(jint a0, const ::java::lang::String & a1) : ::org::apache::lucene::search::FieldComparator(env->newObject(initializeClass, &mids$, mid_init$_836a82ec1a65a0bc, a0, a1.this$)) {}

        FieldComparator$TermOrdValComparator::FieldComparator$TermOrdValComparator(jint a0, const ::java::lang::String & a1, jboolean a2) : ::org::apache::lucene::search::FieldComparator(env->newObject(initializeClass, &mids$, mid_init$_c668924727dbd3e1, a0, a1.this$, a2)) {}

        jint FieldComparator$TermOrdValComparator::compare(jint a0, jint a1) const
        {
          return env->callIntMethod(this$, mids$[mid_compare_57a58545eba514db], a0, a1);
        }

        jint FieldComparator$TermOrdValComparator::compareBottom(jint a0) const
        {
          return env->callIntMethod(this$, mids$[mid_compareBottom_1e143afe1894d213], a0);
        }

        jint FieldComparator$TermOrdValComparator::compareTop(jint a0) const
        {
          return env->callIntMethod(this$, mids$[mid_compareTop_1e143afe1894d213], a0);
        }

        jint FieldComparator$TermOrdValComparator::compareValues(const ::org::apache::lucene::util::BytesRef & a0, const ::org::apache::lucene::util::BytesRef & a1) const
        {
          return env->callIntMethod(this$, mids$[mid_compareValues_f465493e4f3be174], a0.this$, a1.this$);
        }

        void FieldComparator$TermOrdValComparator::copy(jint a0, jint a1) const
        {
          env->callVoidMethod(this$, mids$[mid_copy_438c62480c481c65], a0, a1);
        }

        ::org::apache::lucene::search::LeafFieldComparator FieldComparator$TermOrdValComparator::getLeafComparator(const ::org::apache::lucene::index::LeafReaderContext & a0) const
        {
          return ::org::apache::lucene::search::LeafFieldComparator(env->callObjectMethod(this$, mids$[mid_getLeafComparator_6183906b7058c4b5], a0.this$));
        }

        void FieldComparator$TermOrdValComparator::setBottom(jint a0) const
        {
          env->callVoidMethod(this$, mids$[mid_setBottom_040c4cd0390c5aff], a0);
        }

        void FieldComparator$TermOrdValComparator::setScorer(const ::org::apache::lucene::search::Scorable & a0) const
        {
          env->callVoidMethod(this$, mids$[mid_setScorer_57a565cc0113e133], a0.this$);
        }

        void FieldComparator$TermOrdValComparator::setTopValue(const ::org::apache::lucene::util::BytesRef & a0) const
        {
          env->callVoidMethod(this$, mids$[mid_setTopValue_0bdfd2603b7490a8], a0.this$);
        }

        ::org::apache::lucene::util::BytesRef FieldComparator$TermOrdValComparator::value(jint a0) const
        {
          return ::org::apache::lucene::util::BytesRef(env->callObjectMethod(this$, mids$[mid_value_83238e65a54c68bb], a0));
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        static PyObject *t_FieldComparator$TermOrdValComparator_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_FieldComparator$TermOrdValComparator_instance_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_FieldComparator$TermOrdValComparator_of_(t_FieldComparator$TermOrdValComparator *self, PyObject *args);
        static int t_FieldComparator$TermOrdValComparator_init_(t_FieldComparator$TermOrdValComparator *self, PyObject *args, PyObject *kwds);
        static PyObject *t_FieldComparator$TermOrdValComparator_compare(t_FieldComparator$TermOrdValComparator *self, PyObject *args);
        static PyObject *t_FieldComparator$TermOrdValComparator_compareBottom(t_FieldComparator$TermOrdValComparator *self, PyObject *arg);
        static PyObject *t_FieldComparator$TermOrdValComparator_compareTop(t_FieldComparator$TermOrdValComparator *self, PyObject *arg);
        static PyObject *t_FieldComparator$TermOrdValComparator_compareValues(t_FieldComparator$TermOrdValComparator *self, PyObject *args);
        static PyObject *t_FieldComparator$TermOrdValComparator_copy(t_FieldComparator$TermOrdValComparator *self, PyObject *args);
        static PyObject *t_FieldComparator$TermOrdValComparator_getLeafComparator(t_FieldComparator$TermOrdValComparator *self, PyObject *args);
        static PyObject *t_FieldComparator$TermOrdValComparator_setBottom(t_FieldComparator$TermOrdValComparator *self, PyObject *arg);
        static PyObject *t_FieldComparator$TermOrdValComparator_setScorer(t_FieldComparator$TermOrdValComparator *self, PyObject *arg);
        static PyObject *t_FieldComparator$TermOrdValComparator_setTopValue(t_FieldComparator$TermOrdValComparator *self, PyObject *args);
        static PyObject *t_FieldComparator$TermOrdValComparator_value(t_FieldComparator$TermOrdValComparator *self, PyObject *args);
        static int t_FieldComparator$TermOrdValComparator_set__bottom(t_FieldComparator$TermOrdValComparator *self, PyObject *arg, void *data);
        static int t_FieldComparator$TermOrdValComparator_set__scorer(t_FieldComparator$TermOrdValComparator *self, PyObject *arg, void *data);
        static int t_FieldComparator$TermOrdValComparator_set__topValue(t_FieldComparator$TermOrdValComparator *self, PyObject *arg, void *data);
        static PyObject *t_FieldComparator$TermOrdValComparator_get__parameters_(t_FieldComparator$TermOrdValComparator *self, void *data);
        static PyGetSetDef t_FieldComparator$TermOrdValComparator__fields_[] = {
          DECLARE_SET_FIELD(t_FieldComparator$TermOrdValComparator, bottom),
          DECLARE_SET_FIELD(t_FieldComparator$TermOrdValComparator, scorer),
          DECLARE_SET_FIELD(t_FieldComparator$TermOrdValComparator, topValue),
          DECLARE_GET_FIELD(t_FieldComparator$TermOrdValComparator, parameters_),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_FieldComparator$TermOrdValComparator__methods_[] = {
          DECLARE_METHOD(t_FieldComparator$TermOrdValComparator, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_FieldComparator$TermOrdValComparator, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_FieldComparator$TermOrdValComparator, of_, METH_VARARGS),
          DECLARE_METHOD(t_FieldComparator$TermOrdValComparator, compare, METH_VARARGS),
          DECLARE_METHOD(t_FieldComparator$TermOrdValComparator, compareBottom, METH_O),
          DECLARE_METHOD(t_FieldComparator$TermOrdValComparator, compareTop, METH_O),
          DECLARE_METHOD(t_FieldComparator$TermOrdValComparator, compareValues, METH_VARARGS),
          DECLARE_METHOD(t_FieldComparator$TermOrdValComparator, copy, METH_VARARGS),
          DECLARE_METHOD(t_FieldComparator$TermOrdValComparator, getLeafComparator, METH_VARARGS),
          DECLARE_METHOD(t_FieldComparator$TermOrdValComparator, setBottom, METH_O),
          DECLARE_METHOD(t_FieldComparator$TermOrdValComparator, setScorer, METH_O),
          DECLARE_METHOD(t_FieldComparator$TermOrdValComparator, setTopValue, METH_VARARGS),
          DECLARE_METHOD(t_FieldComparator$TermOrdValComparator, value, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        static PyType_Slot PY_TYPE_SLOTS(FieldComparator$TermOrdValComparator)[] = {
          { Py_tp_methods, t_FieldComparator$TermOrdValComparator__methods_ },
          { Py_tp_init, (void *) t_FieldComparator$TermOrdValComparator_init_ },
          { Py_tp_getset, t_FieldComparator$TermOrdValComparator__fields_ },
          { 0, NULL }
        };

        static PyType_Def *PY_TYPE_BASES(FieldComparator$TermOrdValComparator)[] = {
          &PY_TYPE_DEF(::org::apache::lucene::search::FieldComparator),
          NULL
        };

        DEFINE_TYPE(FieldComparator$TermOrdValComparator, t_FieldComparator$TermOrdValComparator, FieldComparator$TermOrdValComparator);
        PyObject *t_FieldComparator$TermOrdValComparator::wrap_Object(const FieldComparator$TermOrdValComparator& object, PyTypeObject *p0)
        {
          PyObject *obj = t_FieldComparator$TermOrdValComparator::wrap_Object(object);
          if (obj != NULL && obj != Py_None)
          {
            t_FieldComparator$TermOrdValComparator *self = (t_FieldComparator$TermOrdValComparator *) obj;
            self->parameters[0] = p0;
          }
          return obj;
        }

        PyObject *t_FieldComparator$TermOrdValComparator::wrap_jobject(const jobject& object, PyTypeObject *p0)
        {
          PyObject *obj = t_FieldComparator$TermOrdValComparator::wrap_jobject(object);
          if (obj != NULL && obj != Py_None)
          {
            t_FieldComparator$TermOrdValComparator *self = (t_FieldComparator$TermOrdValComparator *) obj;
            self->parameters[0] = p0;
          }
          return obj;
        }

        void t_FieldComparator$TermOrdValComparator::install(PyObject *module)
        {
          installType(&PY_TYPE(FieldComparator$TermOrdValComparator), &PY_TYPE_DEF(FieldComparator$TermOrdValComparator), module, "FieldComparator$TermOrdValComparator", 0);
        }

        void t_FieldComparator$TermOrdValComparator::initialize(PyObject *module)
        {
          PyObject_SetAttrString((PyObject *) PY_TYPE(FieldComparator$TermOrdValComparator), "class_", make_descriptor(FieldComparator$TermOrdValComparator::initializeClass, 1));
          PyObject_SetAttrString((PyObject *) PY_TYPE(FieldComparator$TermOrdValComparator), "wrapfn_", make_descriptor(t_FieldComparator$TermOrdValComparator::wrap_jobject));
          PyObject_SetAttrString((PyObject *) PY_TYPE(FieldComparator$TermOrdValComparator), "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_FieldComparator$TermOrdValComparator_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, FieldComparator$TermOrdValComparator::initializeClass, 1)))
            return NULL;
          return t_FieldComparator$TermOrdValComparator::wrap_Object(FieldComparator$TermOrdValComparator(((t_FieldComparator$TermOrdValComparator *) arg)->object.this$));
        }
        static PyObject *t_FieldComparator$TermOrdValComparator_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, FieldComparator$TermOrdValComparator::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static PyObject *t_FieldComparator$TermOrdValComparator_of_(t_FieldComparator$TermOrdValComparator *self, PyObject *args)
        {
          if (!parseArg(args, "T", 1, &(self->parameters)))
            Py_RETURN_SELF;
          return PyErr_SetArgsError((PyObject *) self, "of_", args);
        }

        static int t_FieldComparator$TermOrdValComparator_init_(t_FieldComparator$TermOrdValComparator *self, PyObject *args, PyObject *kwds)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 2:
            {
              jint a0;
              ::java::lang::String a1((jobject) NULL);
              FieldComparator$TermOrdValComparator object((jobject) NULL);

              if (!parseArgs(args, "Is", &a0, &a1))
              {
                INT_CALL(object = FieldComparator$TermOrdValComparator(a0, a1));
                self->object = object;
                self->parameters[0] = ::org::apache::lucene::util::PY_TYPE(BytesRef);
                break;
              }
            }
            goto err;
           case 3:
            {
              jint a0;
              ::java::lang::String a1((jobject) NULL);
              jboolean a2;
              FieldComparator$TermOrdValComparator object((jobject) NULL);

              if (!parseArgs(args, "IsZ", &a0, &a1, &a2))
              {
                INT_CALL(object = FieldComparator$TermOrdValComparator(a0, a1, a2));
                self->object = object;
                self->parameters[0] = ::org::apache::lucene::util::PY_TYPE(BytesRef);
                break;
              }
            }
           default:
           err:
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }

        static PyObject *t_FieldComparator$TermOrdValComparator_compare(t_FieldComparator$TermOrdValComparator *self, PyObject *args)
        {
          jint a0;
          jint a1;
          jint result;

          if (!parseArgs(args, "II", &a0, &a1))
          {
            OBJ_CALL(result = self->object.compare(a0, a1));
            return PyLong_FromLong((long) result);
          }

          return callSuper(PY_TYPE(FieldComparator$TermOrdValComparator), (PyObject *) self, "compare", args, 2);
        }

        static PyObject *t_FieldComparator$TermOrdValComparator_compareBottom(t_FieldComparator$TermOrdValComparator *self, PyObject *arg)
        {
          jint a0;
          jint result;

          if (!parseArg(arg, "I", &a0))
          {
            OBJ_CALL(result = self->object.compareBottom(a0));
            return PyLong_FromLong((long) result);
          }

          PyErr_SetArgsError((PyObject *) self, "compareBottom", arg);
          return NULL;
        }

        static PyObject *t_FieldComparator$TermOrdValComparator_compareTop(t_FieldComparator$TermOrdValComparator *self, PyObject *arg)
        {
          jint a0;
          jint result;

          if (!parseArg(arg, "I", &a0))
          {
            OBJ_CALL(result = self->object.compareTop(a0));
            return PyLong_FromLong((long) result);
          }

          PyErr_SetArgsError((PyObject *) self, "compareTop", arg);
          return NULL;
        }

        static PyObject *t_FieldComparator$TermOrdValComparator_compareValues(t_FieldComparator$TermOrdValComparator *self, PyObject *args)
        {
          ::org::apache::lucene::util::BytesRef a0((jobject) NULL);
          ::org::apache::lucene::util::BytesRef a1((jobject) NULL);
          jint result;

          if (!parseArgs(args, "kk", ::org::apache::lucene::util::BytesRef::initializeClass, ::org::apache::lucene::util::BytesRef::initializeClass, &a0, &a1))
          {
            OBJ_CALL(result = self->object.compareValues(a0, a1));
            return PyLong_FromLong((long) result);
          }

          return callSuper(PY_TYPE(FieldComparator$TermOrdValComparator), (PyObject *) self, "compareValues", args, 2);
        }

        static PyObject *t_FieldComparator$TermOrdValComparator_copy(t_FieldComparator$TermOrdValComparator *self, PyObject *args)
        {
          jint a0;
          jint a1;

          if (!parseArgs(args, "II", &a0, &a1))
          {
            OBJ_CALL(self->object.copy(a0, a1));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "copy", args);
          return NULL;
        }

        static PyObject *t_FieldComparator$TermOrdValComparator_getLeafComparator(t_FieldComparator$TermOrdValComparator *self, PyObject *args)
        {
          ::org::apache::lucene::index::LeafReaderContext a0((jobject) NULL);
          ::org::apache::lucene::search::LeafFieldComparator result((jobject) NULL);

          if (!parseArgs(args, "k", ::org::apache::lucene::index::LeafReaderContext::initializeClass, &a0))
          {
            OBJ_CALL(result = self->object.getLeafComparator(a0));
            return ::org::apache::lucene::search::t_LeafFieldComparator::wrap_Object(result);
          }

          return callSuper(PY_TYPE(FieldComparator$TermOrdValComparator), (PyObject *) self, "getLeafComparator", args, 2);
        }

        static PyObject *t_FieldComparator$TermOrdValComparator_setBottom(t_FieldComparator$TermOrdValComparator *self, PyObject *arg)
        {
          jint a0;

          if (!parseArg(arg, "I", &a0))
          {
            OBJ_CALL(self->object.setBottom(a0));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "setBottom", arg);
          return NULL;
        }

        static PyObject *t_FieldComparator$TermOrdValComparator_setScorer(t_FieldComparator$TermOrdValComparator *self, PyObject *arg)
        {
          ::org::apache::lucene::search::Scorable a0((jobject) NULL);

          if (!parseArg(arg, "k", ::org::apache::lucene::search::Scorable::initializeClass, &a0))
          {
            OBJ_CALL(self->object.setScorer(a0));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "setScorer", arg);
          return NULL;
        }

        static PyObject *t_FieldComparator$TermOrdValComparator_setTopValue(t_FieldComparator$TermOrdValComparator *self, PyObject *args)
        {
          ::org::apache::lucene::util::BytesRef a0((jobject) NULL);

          if (!parseArgs(args, "k", ::org::apache::lucene::util::BytesRef::initializeClass, &a0))
          {
            OBJ_CALL(self->object.setTopValue(a0));
            Py_RETURN_NONE;
          }

          return callSuper(PY_TYPE(FieldComparator$TermOrdValComparator), (PyObject *) self, "setTopValue", args, 2);
        }

        static PyObject *t_FieldComparator$TermOrdValComparator_value(t_FieldComparator$TermOrdValComparator *self, PyObject *args)
        {
          jint a0;
          ::org::apache::lucene::util::BytesRef result((jobject) NULL);

          if (!parseArgs(args, "I", &a0))
          {
            OBJ_CALL(result = self->object.value(a0));
            return ::org::apache::lucene::util::t_BytesRef::wrap_Object(result);
          }

          return callSuper(PY_TYPE(FieldComparator$TermOrdValComparator), (PyObject *) self, "value", args, 2);
        }
        static PyObject *t_FieldComparator$TermOrdValComparator_get__parameters_(t_FieldComparator$TermOrdValComparator *self, void *data)
        {
          return typeParameters(self->parameters, sizeof(self->parameters));
        }

        static int t_FieldComparator$TermOrdValComparator_set__bottom(t_FieldComparator$TermOrdValComparator *self, PyObject *arg, void *data)
        {
          {
            jint value;
            if (!parseArg(arg, "I", &value))
            {
              INT_CALL(self->object.setBottom(value));
              return 0;
            }
          }
          PyErr_SetArgsError((PyObject *) self, "bottom", arg);
          return -1;
        }

        static int t_FieldComparator$TermOrdValComparator_set__scorer(t_FieldComparator$TermOrdValComparator *self, PyObject *arg, void *data)
        {
          {
            ::org::apache::lucene::search::Scorable value((jobject) NULL);
            if (!parseArg(arg, "k", ::org::apache::lucene::search::Scorable::initializeClass, &value))
            {
              INT_CALL(self->object.setScorer(value));
              return 0;
            }
          }
          PyErr_SetArgsError((PyObject *) self, "scorer", arg);
          return -1;
        }

        static int t_FieldComparator$TermOrdValComparator_set__topValue(t_FieldComparator$TermOrdValComparator *self, PyObject *arg, void *data)
        {
          {
            ::org::apache::lucene::util::BytesRef value((jobject) NULL);
            if (!parseArg(arg, "k", ::org::apache::lucene::util::BytesRef::initializeClass, &value))
            {
              INT_CALL(self->object.setTopValue(value));
              return 0;
            }
          }
          PyErr_SetArgsError((PyObject *) self, "topValue", arg);
          return -1;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/facet/sortedset/SortedSetDocValuesFacetCounts.h"
#include "org/apache/lucene/facet/FacetResult.h"
#include "java/lang/Number.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/facet/FacetsCollector.h"
#include "java/lang/String.h"
#include "java/io/IOException.h"
#include "java/util/List.h"
#include "org/apache/lucene/facet/sortedset/SortedSetDocValuesReaderState.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace facet {
        namespace sortedset {

          ::java::lang::Class *SortedSetDocValuesFacetCounts::class$ = NULL;
          jmethodID *SortedSetDocValuesFacetCounts::mids$ = NULL;
          bool SortedSetDocValuesFacetCounts::live$ = false;

          jclass SortedSetDocValuesFacetCounts::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/facet/sortedset/SortedSetDocValuesFacetCounts");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_5e5a16fc770e3bd6] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/facet/sortedset/SortedSetDocValuesReaderState;)V");
              mids$[mid_init$_be475b04b92443cf] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/facet/sortedset/SortedSetDocValuesReaderState;Lorg/apache/lucene/facet/FacetsCollector;)V");
              mids$[mid_getAllDims_d82aee015ceb4d93] = env->getMethodID(cls, "getAllDims", "(I)Ljava/util/List;");
              mids$[mid_getSpecificValue_aaf99af6028dc803] = env->getMethodID(cls, "getSpecificValue", "(Ljava/lang/String;[Ljava/lang/String;)Ljava/lang/Number;");
              mids$[mid_getTopChildren_8be156db8a3c742c] = env->getMethodID(cls, "getTopChildren", "(ILjava/lang/String;[Ljava/lang/String;)Lorg/apache/lucene/facet/FacetResult;");

              class$ = new ::java::lang::Class(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          SortedSetDocValuesFacetCounts::SortedSetDocValuesFacetCounts(const ::org::apache::lucene::facet::sortedset::SortedSetDocValuesReaderState & a0) : ::org::apache::lucene::facet::Facets(env->newObject(initializeClass, &mids$, mid_init$_5e5a16fc770e3bd6, a0.this$)) {}

          SortedSetDocValuesFacetCounts::SortedSetDocValuesFacetCounts(const ::org::apache::lucene::facet::sortedset::SortedSetDocValuesReaderState & a0, const ::org::apache::lucene::facet::FacetsCollector & a1) : ::org::apache::lucene::facet::Facets(env->newObject(initializeClass, &mids$, mid_init$_be475b04b92443cf, a0.this$, a1.this$)) {}

          ::java::util::List SortedSetDocValuesFacetCounts::getAllDims(jint a0) const
          {
            return ::java::util::List(env->callObjectMethod(this$, mids$[mid_getAllDims_d82aee015ceb4d93], a0));
          }

          ::java::lang::Number SortedSetDocValuesFacetCounts::getSpecificValue(const ::java::lang::String & a0, const JArray< ::java::lang::String > & a1) const
          {
            return ::java::lang::Number(env->callObjectMethod(this$, mids$[mid_getSpecificValue_aaf99af6028dc803], a0.this$, a1.this$));
          }

          ::org::apache::lucene::facet::FacetResult SortedSetDocValuesFacetCounts::getTopChildren(jint a0, const ::java::lang::String & a1, const JArray< ::java::lang::String > & a2) const
          {
            return ::org::apache::lucene::facet::FacetResult(env->callObjectMethod(this$, mids$[mid_getTopChildren_8be156db8a3c742c], a0, a1.this$, a2.this$));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace facet {
        namespace sortedset {
          static PyObject *t_SortedSetDocValuesFacetCounts_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_SortedSetDocValuesFacetCounts_instance_(PyTypeObject *type, PyObject *arg);
          static int t_SortedSetDocValuesFacetCounts_init_(t_SortedSetDocValuesFacetCounts *self, PyObject *args, PyObject *kwds);
          static PyObject *t_SortedSetDocValuesFacetCounts_getAllDims(t_SortedSetDocValuesFacetCounts *self, PyObject *args);
          static PyObject *t_SortedSetDocValuesFacetCounts_getSpecificValue(t_SortedSetDocValuesFacetCounts *self, PyObject *args);
          static PyObject *t_SortedSetDocValuesFacetCounts_getTopChildren(t_SortedSetDocValuesFacetCounts *self, PyObject *args);

          static PyMethodDef t_SortedSetDocValuesFacetCounts__methods_[] = {
            DECLARE_METHOD(t_SortedSetDocValuesFacetCounts, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_SortedSetDocValuesFacetCounts, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_SortedSetDocValuesFacetCounts, getAllDims, METH_VARARGS),
            DECLARE_METHOD(t_SortedSetDocValuesFacetCounts, getSpecificValue, METH_VARARGS),
            DECLARE_METHOD(t_SortedSetDocValuesFacetCounts, getTopChildren, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          static PyType_Slot PY_TYPE_SLOTS(SortedSetDocValuesFacetCounts)[] = {
            { Py_tp_methods, t_SortedSetDocValuesFacetCounts__methods_ },
            { Py_tp_init, (void *) t_SortedSetDocValuesFacetCounts_init_ },
            { 0, NULL }
          };

          static PyType_Def *PY_TYPE_BASES(SortedSetDocValuesFacetCounts)[] = {
            &PY_TYPE_DEF(::org::apache::lucene::facet::Facets),
            NULL
          };

          DEFINE_TYPE(SortedSetDocValuesFacetCounts, t_SortedSetDocValuesFacetCounts, SortedSetDocValuesFacetCounts);

          void t_SortedSetDocValuesFacetCounts::install(PyObject *module)
          {
            installType(&PY_TYPE(SortedSetDocValuesFacetCounts), &PY_TYPE_DEF(SortedSetDocValuesFacetCounts), module, "SortedSetDocValuesFacetCounts", 0);
          }

          void t_SortedSetDocValuesFacetCounts::initialize(PyObject *module)
          {
            PyObject_SetAttrString((PyObject *) PY_TYPE(SortedSetDocValuesFacetCounts), "class_", make_descriptor(SortedSetDocValuesFacetCounts::initializeClass, 1));
            PyObject_SetAttrString((PyObject *) PY_TYPE(SortedSetDocValuesFacetCounts), "wrapfn_", make_descriptor(t_SortedSetDocValuesFacetCounts::wrap_jobject));
            PyObject_SetAttrString((PyObject *) PY_TYPE(SortedSetDocValuesFacetCounts), "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_SortedSetDocValuesFacetCounts_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, SortedSetDocValuesFacetCounts::initializeClass, 1)))
              return NULL;
            return t_SortedSetDocValuesFacetCounts::wrap_Object(SortedSetDocValuesFacetCounts(((t_SortedSetDocValuesFacetCounts *) arg)->object.this$));
          }
          static PyObject *t_SortedSetDocValuesFacetCounts_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, SortedSetDocValuesFacetCounts::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_SortedSetDocValuesFacetCounts_init_(t_SortedSetDocValuesFacetCounts *self, PyObject *args, PyObject *kwds)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 1:
              {
                ::org::apache::lucene::facet::sortedset::SortedSetDocValuesReaderState a0((jobject) NULL);
                SortedSetDocValuesFacetCounts object((jobject) NULL);

                if (!parseArgs(args, "k", ::org::apache::lucene::facet::sortedset::SortedSetDocValuesReaderState::initializeClass, &a0))
                {
                  INT_CALL(object = SortedSetDocValuesFacetCounts(a0));
                  self->object = object;
                  break;
                }
              }
              goto err;
             case 2:
              {
                ::org::apache::lucene::facet::sortedset::SortedSetDocValuesReaderState a0((jobject) NULL);
                ::org::apache::lucene::facet::FacetsCollector a1((jobject) NULL);
                SortedSetDocValuesFacetCounts object((jobject) NULL);

                if (!parseArgs(args, "kk", ::org::apache::lucene::facet::sortedset::SortedSetDocValuesReaderState::initializeClass, ::org::apache::lucene::facet::FacetsCollector::initializeClass, &a0, &a1))
                {
                  INT_CALL(object = SortedSetDocValuesFacetCounts(a0, a1));
                  self->object = object;
                  break;
                }
              }
             default:
             err:
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_SortedSetDocValuesFacetCounts_getAllDims(t_SortedSetDocValuesFacetCounts *self, PyObject *args)
          {
            jint a0;
            ::java::util::List result((jobject) NULL);

            if (!parseArgs(args, "I", &a0))
            {
              OBJ_CALL(result = self->object.getAllDims(a0));
              return ::java::util::t_List::wrap_Object(result, ::org::apache::lucene::facet::PY_TYPE(FacetResult));
            }

            return callSuper(PY_TYPE(SortedSetDocValuesFacetCounts), (PyObject *) self, "getAllDims", args, 2);
          }

          static PyObject *t_SortedSetDocValuesFacetCounts_getSpecificValue(t_SortedSetDocValuesFacetCounts *self, PyObject *args)
          {
            ::java::lang::String a0((jobject) NULL);
            JArray< ::java::lang::String > a1((jobject) NULL);
            ::java::lang::Number result((jobject) NULL);

            if (!parseArgs(args, "s[s", &a0, &a1))
            {
              OBJ_CALL(result = self->object.getSpecificValue(a0, a1));
              return ::java::lang::t_Number::wrap_Object(result);
            }

            return callSuper(PY_TYPE(SortedSetDocValuesFacetCounts), (PyObject *) self, "getSpecificValue", args, 2);
          }

          static PyObject *t_SortedSetDocValuesFacetCounts_getTopChildren(t_SortedSetDocValuesFacetCounts *self, PyObject *args)
          {
            jint a0;
            ::java::lang::String a1((jobject) NULL);
            JArray< ::java::lang::String > a2((jobject) NULL);
            ::org::apache::lucene::facet::FacetResult result((jobject) NULL);

            if (!parseArgs(args, "Is[s", &a0, &a1, &a2))
            {
              OBJ_CALL(result = self->object.getTopChildren(a0, a1, a2));
              return ::org::apache::lucene::facet::t_FacetResult::wrap_Object(result);
            }

            return callSuper(PY_TYPE(SortedSetDocValuesFacetCounts), (PyObject *) self, "getTopChildren", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/index/StoredFieldVisitor$Status.h"
#include "org/apache/lucene/index/StoredFieldVisitor$Status.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {

        ::java::lang::Class *StoredFieldVisitor$Status::class$ = NULL;
        jmethodID *StoredFieldVisitor$Status::mids$ = NULL;
        bool StoredFieldVisitor$Status::live$ = false;
        StoredFieldVisitor$Status *StoredFieldVisitor$Status::NO = NULL;
        StoredFieldVisitor$Status *StoredFieldVisitor$Status::STOP = NULL;
        StoredFieldVisitor$Status *StoredFieldVisitor$Status::YES = NULL;

        jclass StoredFieldVisitor$Status::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/index/StoredFieldVisitor$Status");

            mids$ = new jmethodID[max_mid];
            mids$[mid_valueOf_58796de23a013d0e] = env->getStaticMethodID(cls, "valueOf", "(Ljava/lang/String;)Lorg/apache/lucene/index/StoredFieldVisitor$Status;");
            mids$[mid_values_fc063977b6f60b71] = env->getStaticMethodID(cls, "values", "()[Lorg/apache/lucene/index/StoredFieldVisitor$Status;");

            class$ = new ::java::lang::Class(cls);
            cls = (jclass) class$->this$;

            NO = new StoredFieldVisitor$Status(env->getStaticObjectField(cls, "NO", "Lorg/apache/lucene/index/StoredFieldVisitor$Status;"));
            STOP = new StoredFieldVisitor$Status(env->getStaticObjectField(cls, "STOP", "Lorg/apache/lucene/index/StoredFieldVisitor$Status;"));
            YES = new StoredFieldVisitor$Status(env->getStaticObjectField(cls, "YES", "Lorg/apache/lucene/index/StoredFieldVisitor$Status;"));
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        StoredFieldVisitor$Status StoredFieldVisitor$Status::valueOf(const ::java::lang::String & a0)
        {
          jclass cls = env->getClass(initializeClass);
          return StoredFieldVisitor$Status(env->callStaticObjectMethod(cls, mids$[mid_valueOf_58796de23a013d0e], a0.this$));
        }

        JArray< StoredFieldVisitor$Status > StoredFieldVisitor$Status::values()
        {
          jclass cls = env->getClass(initializeClass);
          return JArray< StoredFieldVisitor$Status >(env->callStaticObjectMethod(cls, mids$[mid_values_fc063977b6f60b71]));
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {
        static PyObject *t_StoredFieldVisitor$Status_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_StoredFieldVisitor$Status_instance_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_StoredFieldVisitor$Status_of_(t_StoredFieldVisitor$Status *self, PyObject *args);
        static PyObject *t_StoredFieldVisitor$Status_valueOf(PyTypeObject *type, PyObject *args);
        static PyObject *t_StoredFieldVisitor$Status_values(PyTypeObject *type);
        static PyObject *t_StoredFieldVisitor$Status_get__parameters_(t_StoredFieldVisitor$Status *self, void *data);
        static PyGetSetDef t_StoredFieldVisitor$Status__fields_[] = {
          DECLARE_GET_FIELD(t_StoredFieldVisitor$Status, parameters_),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_StoredFieldVisitor$Status__methods_[] = {
          DECLARE_METHOD(t_StoredFieldVisitor$Status, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_StoredFieldVisitor$Status, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_StoredFieldVisitor$Status, of_, METH_VARARGS),
          DECLARE_METHOD(t_StoredFieldVisitor$Status, valueOf, METH_VARARGS | METH_CLASS),
          DECLARE_METHOD(t_StoredFieldVisitor$Status, values, METH_NOARGS | METH_CLASS),
          { NULL, NULL, 0, NULL }
        };

        static PyType_Slot PY_TYPE_SLOTS(StoredFieldVisitor$Status)[] = {
          { Py_tp_methods, t_StoredFieldVisitor$Status__methods_ },
          { Py_tp_init, (void *) abstract_init },
          { Py_tp_getset, t_StoredFieldVisitor$Status__fields_ },
          { 0, NULL }
        };

        static PyType_Def *PY_TYPE_BASES(StoredFieldVisitor$Status)[] = {
          &PY_TYPE_DEF(::java::lang::Enum),
          NULL
        };

        DEFINE_TYPE(StoredFieldVisitor$Status, t_StoredFieldVisitor$Status, StoredFieldVisitor$Status);
        PyObject *t_StoredFieldVisitor$Status::wrap_Object(const StoredFieldVisitor$Status& object, PyTypeObject *p0)
        {
          PyObject *obj = t_StoredFieldVisitor$Status::wrap_Object(object);
          if (obj != NULL && obj != Py_None)
          {
            t_StoredFieldVisitor$Status *self = (t_StoredFieldVisitor$Status *) obj;
            self->parameters[0] = p0;
          }
          return obj;
        }

        PyObject *t_StoredFieldVisitor$Status::wrap_jobject(const jobject& object, PyTypeObject *p0)
        {
          PyObject *obj = t_StoredFieldVisitor$Status::wrap_jobject(object);
          if (obj != NULL && obj != Py_None)
          {
            t_StoredFieldVisitor$Status *self = (t_StoredFieldVisitor$Status *) obj;
            self->parameters[0] = p0;
          }
          return obj;
        }

        void t_StoredFieldVisitor$Status::install(PyObject *module)
        {
          installType(&PY_TYPE(StoredFieldVisitor$Status), &PY_TYPE_DEF(StoredFieldVisitor$Status), module, "StoredFieldVisitor$Status", 0);
        }

        void t_StoredFieldVisitor$Status::initialize(PyObject *module)
        {
          PyObject_SetAttrString((PyObject *) PY_TYPE(StoredFieldVisitor$Status), "class_", make_descriptor(StoredFieldVisitor$Status::initializeClass, 1));
          PyObject_SetAttrString((PyObject *) PY_TYPE(StoredFieldVisitor$Status), "wrapfn_", make_descriptor(t_StoredFieldVisitor$Status::wrap_jobject));
          PyObject_SetAttrString((PyObject *) PY_TYPE(StoredFieldVisitor$Status), "boxfn_", make_descriptor(boxObject));
          env->getClass(StoredFieldVisitor$Status::initializeClass);
          PyObject_SetAttrString((PyObject *) PY_TYPE(StoredFieldVisitor$Status), "NO", make_descriptor(t_StoredFieldVisitor$Status::wrap_Object(*StoredFieldVisitor$Status::NO)));
          PyObject_SetAttrString((PyObject *) PY_TYPE(StoredFieldVisitor$Status), "STOP", make_descriptor(t_StoredFieldVisitor$Status::wrap_Object(*StoredFieldVisitor$Status::STOP)));
          PyObject_SetAttrString((PyObject *) PY_TYPE(StoredFieldVisitor$Status), "YES", make_descriptor(t_StoredFieldVisitor$Status::wrap_Object(*StoredFieldVisitor$Status::YES)));
        }

        static PyObject *t_StoredFieldVisitor$Status_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, StoredFieldVisitor$Status::initializeClass, 1)))
            return NULL;
          return t_StoredFieldVisitor$Status::wrap_Object(StoredFieldVisitor$Status(((t_StoredFieldVisitor$Status *) arg)->object.this$));
        }
        static PyObject *t_StoredFieldVisitor$Status_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, StoredFieldVisitor$Status::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static PyObject *t_StoredFieldVisitor$Status_of_(t_StoredFieldVisitor$Status *self, PyObject *args)
        {
          if (!parseArg(args, "T", 1, &(self->parameters)))
            Py_RETURN_SELF;
          return PyErr_SetArgsError((PyObject *) self, "of_", args);
        }

        static PyObject *t_StoredFieldVisitor$Status_valueOf(PyTypeObject *type, PyObject *args)
        {
          ::java::lang::String a0((jobject) NULL);
          StoredFieldVisitor$Status result((jobject) NULL);

          if (!parseArgs(args, "s", &a0))
          {
            OBJ_CALL(result = ::org::apache::lucene::index::StoredFieldVisitor$Status::valueOf(a0));
            return t_StoredFieldVisitor$Status::wrap_Object(result);
          }

          return callSuper(type, "valueOf", args, 2);
        }

        static PyObject *t_StoredFieldVisitor$Status_values(PyTypeObject *type)
        {
          JArray< StoredFieldVisitor$Status > result((jobject) NULL);
          OBJ_CALL(result = ::org::apache::lucene::index::StoredFieldVisitor$Status::values());
          return JArray<jobject>(result.this$).wrap(t_StoredFieldVisitor$Status::wrap_jobject);
        }
        static PyObject *t_StoredFieldVisitor$Status_get__parameters_(t_StoredFieldVisitor$Status *self, void *data)
        {
          return typeParameters(self->parameters, sizeof(self->parameters));
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/in/IndicNormalizationFilter.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/analysis/TokenStream.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace in {

          ::java::lang::Class *IndicNormalizationFilter::class$ = NULL;
          jmethodID *IndicNormalizationFilter::mids$ = NULL;
          bool IndicNormalizationFilter::live$ = false;

          jclass IndicNormalizationFilter::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/in/IndicNormalizationFilter");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_c26756868a754f4e] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/analysis/TokenStream;)V");
              mids$[mid_incrementToken_8454bd5aa23fd11e] = env->getMethodID(cls, "incrementToken", "()Z");

              class$ = new ::java::lang::Class(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          IndicNormalizationFilter::IndicNormalizationFilter(const ::org::apache::lucene::analysis::TokenStream & a0) : ::org::apache::lucene::analysis::TokenFilter(env->newObject(initializeClass, &mids$, mid_init$_c26756868a754f4e, a0.this$)) {}

          jboolean IndicNormalizationFilter::incrementToken() const
          {
            return env->callBooleanMethod(this$, mids$[mid_incrementToken_8454bd5aa23fd11e]);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace in {
          static PyObject *t_IndicNormalizationFilter_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_IndicNormalizationFilter_instance_(PyTypeObject *type, PyObject *arg);
          static int t_IndicNormalizationFilter_init_(t_IndicNormalizationFilter *self, PyObject *args, PyObject *kwds);
          static PyObject *t_IndicNormalizationFilter_incrementToken(t_IndicNormalizationFilter *self, PyObject *args);

          static PyMethodDef t_IndicNormalizationFilter__methods_[] = {
            DECLARE_METHOD(t_IndicNormalizationFilter, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_IndicNormalizationFilter, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_IndicNormalizationFilter, incrementToken, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          static PyType_Slot PY_TYPE_SLOTS(IndicNormalizationFilter)[] = {
            { Py_tp_methods, t_IndicNormalizationFilter__methods_ },
            { Py_tp_init, (void *) t_IndicNormalizationFilter_init_ },
            { 0, NULL }
          };

          static PyType_Def *PY_TYPE_BASES(IndicNormalizationFilter)[] = {
            &PY_TYPE_DEF(::org::apache::lucene::analysis::TokenFilter),
            NULL
          };

          DEFINE_TYPE(IndicNormalizationFilter, t_IndicNormalizationFilter, IndicNormalizationFilter);

          void t_IndicNormalizationFilter::install(PyObject *module)
          {
            installType(&PY_TYPE(IndicNormalizationFilter), &PY_TYPE_DEF(IndicNormalizationFilter), module, "IndicNormalizationFilter", 0);
          }

          void t_IndicNormalizationFilter::initialize(PyObject *module)
          {
            PyObject_SetAttrString((PyObject *) PY_TYPE(IndicNormalizationFilter), "class_", make_descriptor(IndicNormalizationFilter::initializeClass, 1));
            PyObject_SetAttrString((PyObject *) PY_TYPE(IndicNormalizationFilter), "wrapfn_", make_descriptor(t_IndicNormalizationFilter::wrap_jobject));
            PyObject_SetAttrString((PyObject *) PY_TYPE(IndicNormalizationFilter), "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_IndicNormalizationFilter_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, IndicNormalizationFilter::initializeClass, 1)))
              return NULL;
            return t_IndicNormalizationFilter::wrap_Object(IndicNormalizationFilter(((t_IndicNormalizationFilter *) arg)->object.this$));
          }
          static PyObject *t_IndicNormalizationFilter_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, IndicNormalizationFilter::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_IndicNormalizationFilter_init_(t_IndicNormalizationFilter *self, PyObject *args, PyObject *kwds)
          {
            ::org::apache::lucene::analysis::TokenStream a0((jobject) NULL);
            IndicNormalizationFilter object((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::analysis::TokenStream::initializeClass, &a0))
            {
              INT_CALL(object = IndicNormalizationFilter(a0));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_IndicNormalizationFilter_incrementToken(t_IndicNormalizationFilter *self, PyObject *args)
          {
            jboolean result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.incrementToken());
              Py_RETURN_BOOL(result);
            }

            return callSuper(PY_TYPE(IndicNormalizationFilter), (PyObject *) self, "incrementToken", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/document/DateTools.h"
#include "java/util/Date.h"
#include "org/apache/lucene/document/DateTools$Resolution.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace document {

        ::java::lang::Class *DateTools::class$ = NULL;
        jmethodID *DateTools::mids$ = NULL;
        bool DateTools::live$ = false;

        jclass DateTools::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/document/DateTools");

            mids$ = new jmethodID[max_mid];
            mids$[mid_dateToString_d9abf354de5170cd] = env->getStaticMethodID(cls, "dateToString", "(Ljava/util/Date;Lorg/apache/lucene/document/DateTools$Resolution;)Ljava/lang/String;");
            mids$[mid_round_2b9734252011c856] = env->getStaticMethodID(cls, "round", "(Ljava/util/Date;Lorg/apache/lucene/document/DateTools$Resolution;)Ljava/util/Date;");
            mids$[mid_round_bbccccf97ce8b5be] = env->getStaticMethodID(cls, "round", "(JLorg/apache/lucene/document/DateTools$Resolution;)J");
            mids$[mid_stringToDate_6748e872d0c49761] = env->getStaticMethodID(cls, "stringToDate", "(Ljava/lang/String;)Ljava/util/Date;");
            mids$[mid_stringToTime_b1e05207ec98e246] = env->getStaticMethodID(cls, "stringToTime", "(Ljava/lang/String;)J");
            mids$[mid_timeToString_deee59ae0fe1d781] = env->getStaticMethodID(cls, "timeToString", "(JLorg/apache/lucene/document/DateTools$Resolution;)Ljava/lang/String;");

            class$ = new ::java::lang::Class(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        ::java::lang::String DateTools::dateToString(const ::java::util::Date & a0, const ::org::apache::lucene::document::DateTools$Resolution & a1)
        {
          jclass cls = env->getClass(initializeClass);
          return ::java::lang::String(env->callStaticObjectMethod(cls, mids$[mid_dateToString_d9abf354de5170cd], a0.this$, a1.this$));
        }

        ::java::util::Date DateTools::round(const ::java::util::Date & a0, const ::org::apache::lucene::document::DateTools$Resolution & a1)
        {
          jclass cls = env->getClass(initializeClass);
          return ::java::util::Date(env->callStaticObjectMethod(cls, mids$[mid_round_2b9734252011c856], a0.this$, a1.this$));
        }

        jlong DateTools::round(jlong a0, const ::org::apache::lucene::document::DateTools$Resolution & a1)
        {
          jclass cls = env->getClass(initializeClass);
          return env->callStaticLongMethod(cls, mids$[mid_round_bbccccf97ce8b5be], a0, a1.this$);
        }

        ::java::util::Date DateTools::stringToDate(const ::java::lang::String & a0)
        {
          jclass cls = env->getClass(initializeClass);
          return ::java::util::Date(env->callStaticObjectMethod(cls, mids$[mid_stringToDate_6748e872d0c49761], a0.this$));
        }

        jlong DateTools::stringToTime(const ::java::lang::String & a0)
        {
          jclass cls = env->getClass(initializeClass);
          return env->callStaticLongMethod(cls, mids$[mid_stringToTime_b1e05207ec98e246], a0.this$);
        }

        ::java::lang::String DateTools::timeToString(jlong a0, const ::org::apache::lucene::document::DateTools$Resolution & a1)
        {
          jclass cls = env->getClass(initializeClass);
          return ::java::lang::String(env->callStaticObjectMethod(cls, mids$[mid_timeToString_deee59ae0fe1d781], a0, a1.this$));
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace document {
        static PyObject *t_DateTools_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_DateTools_instance_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_DateTools_dateToString(PyTypeObject *type, PyObject *args);
        static PyObject *t_DateTools_round(PyTypeObject *type, PyObject *args);
        static PyObject *t_DateTools_stringToDate(PyTypeObject *type, PyObject *arg);
        static PyObject *t_DateTools_stringToTime(PyTypeObject *type, PyObject *arg);
        static PyObject *t_DateTools_timeToString(PyTypeObject *type, PyObject *args);

        static PyMethodDef t_DateTools__methods_[] = {
          DECLARE_METHOD(t_DateTools, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_DateTools, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_DateTools, dateToString, METH_VARARGS | METH_CLASS),
          DECLARE_METHOD(t_DateTools, round, METH_VARARGS | METH_CLASS),
          DECLARE_METHOD(t_DateTools, stringToDate, METH_O | METH_CLASS),
          DECLARE_METHOD(t_DateTools, stringToTime, METH_O | METH_CLASS),
          DECLARE_METHOD(t_DateTools, timeToString, METH_VARARGS | METH_CLASS),
          { NULL, NULL, 0, NULL }
        };

        static PyType_Slot PY_TYPE_SLOTS(DateTools)[] = {
          { Py_tp_methods, t_DateTools__methods_ },
          { Py_tp_init, (void *) abstract_init },
          { 0, NULL }
        };

        static PyType_Def *PY_TYPE_BASES(DateTools)[] = {
          &PY_TYPE_DEF(::java::lang::Object),
          NULL
        };

        DEFINE_TYPE(DateTools, t_DateTools, DateTools);

        void t_DateTools::install(PyObject *module)
        {
          installType(&PY_TYPE(DateTools), &PY_TYPE_DEF(DateTools), module, "DateTools", 0);
          PyObject_SetAttrString((PyObject *) PY_TYPE(DateTools), "Resolution", make_descriptor(&PY_TYPE_DEF(DateTools$Resolution)));
        }

        void t_DateTools::initialize(PyObject *module)
        {
          PyObject_SetAttrString((PyObject *) PY_TYPE(DateTools), "class_", make_descriptor(DateTools::initializeClass, 1));
          PyObject_SetAttrString((PyObject *) PY_TYPE(DateTools), "wrapfn_", make_descriptor(t_DateTools::wrap_jobject));
          PyObject_SetAttrString((PyObject *) PY_TYPE(DateTools), "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_DateTools_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, DateTools::initializeClass, 1)))
            return NULL;
          return t_DateTools::wrap_Object(DateTools(((t_DateTools *) arg)->object.this$));
        }
        static PyObject *t_DateTools_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, DateTools::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static PyObject *t_DateTools_dateToString(PyTypeObject *type, PyObject *args)
        {
          ::java::util::Date a0((jobject) NULL);
          ::org::apache::lucene::document::DateTools$Resolution a1((jobject) NULL);
          PyTypeObject **p1;
          ::java::lang::String result((jobject) NULL);

          if (!parseArgs(args, "kK", ::java::util::Date::initializeClass, ::org::apache::lucene::document::DateTools$Resolution::initializeClass, &a0, &a1, &p1, ::org::apache::lucene::document::t_DateTools$Resolution::parameters_))
          {
            OBJ_CALL(result = ::org::apache::lucene::document::DateTools::dateToString(a0, a1));
            return j2p(result);
          }

          PyErr_SetArgsError(type, "dateToString", args);
          return NULL;
        }

        static PyObject *t_DateTools_round(PyTypeObject *type, PyObject *args)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 2:
            {
              ::java::util::Date a0((jobject) NULL);
              ::org::apache::lucene::document::DateTools$Resolution a1((jobject) NULL);
              PyTypeObject **p1;
              ::java::util::Date result((jobject) NULL);

              if (!parseArgs(args, "kK", ::java::util::Date::initializeClass, ::org::apache::lucene::document::DateTools$Resolution::initializeClass, &a0, &a1, &p1, ::org::apache::lucene::document::t_DateTools$Resolution::parameters_))
              {
                OBJ_CALL(result = ::org::apache::lucene::document::DateTools::round(a0, a1));
                return ::java::util::t_Date::wrap_Object(result);
              }
            }
            {
              jlong a0;
              ::org::apache::lucene::document::DateTools$Resolution a1((jobject) NULL);
              PyTypeObject **p1;
              jlong result;

              if (!parseArgs(args, "JK", ::org::apache::lucene::document::DateTools$Resolution::initializeClass, &a0, &a1, &p1, ::org::apache::lucene::document::t_DateTools$Resolution::parameters_))
              {
                OBJ_CALL(result = ::org::apache::lucene::document::DateTools::round(a0, a1));
                return PyLong_FromLongLong((PY_LONG_LONG) result);
              }
            }
          }

          PyErr_SetArgsError(type, "round", args);
          return NULL;
        }

        static PyObject *t_DateTools_stringToDate(PyTypeObject *type, PyObject *arg)
        {
          ::java::lang::String a0((jobject) NULL);
          ::java::util::Date result((jobject) NULL);

          if (!parseArg(arg, "s", &a0))
          {
            OBJ_CALL(result = ::org::apache::lucene::document::DateTools::stringToDate(a0));
            return ::java::util::t_Date::wrap_Object(result);
          }

          PyErr_SetArgsError(type, "stringToDate", arg);
          return NULL;
        }

        static PyObject *t_DateTools_stringToTime(PyTypeObject *type, PyObject *arg)
        {
          ::java::lang::String a0((jobject) NULL);
          jlong result;

          if (!parseArg(arg, "s", &a0))
          {
            OBJ_CALL(result = ::org::apache::lucene::document::DateTools::stringToTime(a0));
            return PyLong_FromLongLong((PY_LONG_LONG) result);
          }

          PyErr_SetArgsError(type, "stringToTime", arg);
          return NULL;
        }

        static PyObject *t_DateTools_timeToString(PyTypeObject *type, PyObject *args)
        {
          jlong a0;
          ::org::apache::lucene::document::DateTools$Resolution a1((jobject) NULL);
          PyTypeObject **p1;
          ::java::lang::String result((jobject) NULL);

          if (!parseArgs(args, "JK", ::org::apache::lucene::document::DateTools$Resolution::initializeClass, &a0, &a1, &p1, ::org::apache::lucene::document::t_DateTools$Resolution::parameters_))
          {
            OBJ_CALL(result = ::org::apache::lucene::document::DateTools::timeToString(a0, a1));
            return j2p(result);
          }

          PyErr_SetArgsError(type, "timeToString", args);
          return NULL;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/suggest/DocumentDictionary.h"
#include "org/apache/lucene/index/IndexReader.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/search/spell/Dictionary.h"
#include "java/lang/String.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/search/suggest/InputIterator.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace suggest {

          ::java::lang::Class *DocumentDictionary::class$ = NULL;
          jmethodID *DocumentDictionary::mids$ = NULL;
          bool DocumentDictionary::live$ = false;

          jclass DocumentDictionary::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/search/suggest/DocumentDictionary");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_58136b8317a280b2] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/index/IndexReader;Ljava/lang/String;Ljava/lang/String;)V");
              mids$[mid_init$_e1f4830c6cae6916] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/index/IndexReader;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)V");
              mids$[mid_init$_f925b5e761f116bd] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/index/IndexReader;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)V");
              mids$[mid_getEntryIterator_58c408dcc07c62ab] = env->getMethodID(cls, "getEntryIterator", "()Lorg/apache/lucene/search/suggest/InputIterator;");

              class$ = new ::java::lang::Class(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          DocumentDictionary::DocumentDictionary(const ::org::apache::lucene::index::IndexReader & a0, const ::java::lang::String & a1, const ::java::lang::String & a2) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_58136b8317a280b2, a0.this$, a1.this$, a2.this$)) {}

          DocumentDictionary::DocumentDictionary(const ::org::apache::lucene::index::IndexReader & a0, const ::java::lang::String & a1, const ::java::lang::String & a2, const ::java::lang::String & a3) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_e1f4830c6cae6916, a0.this$, a1.this$, a2.this$, a3.this$)) {}

          DocumentDictionary::DocumentDictionary(const ::org::apache::lucene::index::IndexReader & a0, const ::java::lang::String & a1, const ::java::lang::String & a2, const ::java::lang::String & a3, const ::java::lang::String & a4) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_f925b5e761f116bd, a0.this$, a1.this$, a2.this$, a3.this$, a4.this$)) {}

          ::org::apache::lucene::search::suggest::InputIterator DocumentDictionary::getEntryIterator() const
          {
            return ::org::apache::lucene::search::suggest::InputIterator(env->callObjectMethod(this$, mids$[mid_getEntryIterator_58c408dcc07c62ab]));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace suggest {
          static PyObject *t_DocumentDictionary_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_DocumentDictionary_instance_(PyTypeObject *type, PyObject *arg);
          static int t_DocumentDictionary_init_(t_DocumentDictionary *self, PyObject *args, PyObject *kwds);
          static PyObject *t_DocumentDictionary_getEntryIterator(t_DocumentDictionary *self);
          static PyObject *t_DocumentDictionary_get__entryIterator(t_DocumentDictionary *self, void *data);
          static PyGetSetDef t_DocumentDictionary__fields_[] = {
            DECLARE_GET_FIELD(t_DocumentDictionary, entryIterator),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_DocumentDictionary__methods_[] = {
            DECLARE_METHOD(t_DocumentDictionary, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_DocumentDictionary, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_DocumentDictionary, getEntryIterator, METH_NOARGS),
            { NULL, NULL, 0, NULL }
          };

          static PyType_Slot PY_TYPE_SLOTS(DocumentDictionary)[] = {
            { Py_tp_methods, t_DocumentDictionary__methods_ },
            { Py_tp_init, (void *) t_DocumentDictionary_init_ },
            { Py_tp_getset, t_DocumentDictionary__fields_ },
            { 0, NULL }
          };

          static PyType_Def *PY_TYPE_BASES(DocumentDictionary)[] = {
            &PY_TYPE_DEF(::java::lang::Object),
            NULL
          };

          DEFINE_TYPE(DocumentDictionary, t_DocumentDictionary, DocumentDictionary);

          void t_DocumentDictionary::install(PyObject *module)
          {
            installType(&PY_TYPE(DocumentDictionary), &PY_TYPE_DEF(DocumentDictionary), module, "DocumentDictionary", 0);
          }

          void t_DocumentDictionary::initialize(PyObject *module)
          {
            PyObject_SetAttrString((PyObject *) PY_TYPE(DocumentDictionary), "class_", make_descriptor(DocumentDictionary::initializeClass, 1));
            PyObject_SetAttrString((PyObject *) PY_TYPE(DocumentDictionary), "wrapfn_", make_descriptor(t_DocumentDictionary::wrap_jobject));
            PyObject_SetAttrString((PyObject *) PY_TYPE(DocumentDictionary), "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_DocumentDictionary_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, DocumentDictionary::initializeClass, 1)))
              return NULL;
            return t_DocumentDictionary::wrap_Object(DocumentDictionary(((t_DocumentDictionary *) arg)->object.this$));
          }
          static PyObject *t_DocumentDictionary_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, DocumentDictionary::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_DocumentDictionary_init_(t_DocumentDictionary *self, PyObject *args, PyObject *kwds)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 3:
              {
                ::org::apache::lucene::index::IndexReader a0((jobject) NULL);
                ::java::lang::String a1((jobject) NULL);
                ::java::lang::String a2((jobject) NULL);
                DocumentDictionary object((jobject) NULL);

                if (!parseArgs(args, "kss", ::org::apache::lucene::index::IndexReader::initializeClass, &a0, &a1, &a2))
                {
                  INT_CALL(object = DocumentDictionary(a0, a1, a2));
                  self->object = object;
                  break;
                }
              }
              goto err;
             case 4:
              {
                ::org::apache::lucene::index::IndexReader a0((jobject) NULL);
                ::java::lang::String a1((jobject) NULL);
                ::java::lang::String a2((jobject) NULL);
                ::java::lang::String a3((jobject) NULL);
                DocumentDictionary object((jobject) NULL);

                if (!parseArgs(args, "ksss", ::org::apache::lucene::index::IndexReader::initializeClass, &a0, &a1, &a2, &a3))
                {
                  INT_CALL(object = DocumentDictionary(a0, a1, a2, a3));
                  self->object = object;
                  break;
                }
              }
              goto err;
             case 5:
              {
                ::org::apache::lucene::index::IndexReader a0((jobject) NULL);
                ::java::lang::String a1((jobject) NULL);
                ::java::lang::String a2((jobject) NULL);
                ::java::lang::String a3((jobject) NULL);
                ::java::lang::String a4((jobject) NULL);
                DocumentDictionary object((jobject) NULL);

                if (!parseArgs(args, "kssss", ::org::apache::lucene::index::IndexReader::initializeClass, &a0, &a1, &a2, &a3, &a4))
                {
                  INT_CALL(object = DocumentDictionary(a0, a1, a2, a3, a4));
                  self->object = object;
                  break;
                }
              }
             default:
             err:
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_DocumentDictionary_getEntryIterator(t_DocumentDictionary *self)
          {
            ::org::apache::lucene::search::suggest::InputIterator result((jobject) NULL);
            OBJ_CALL(result = self->object.getEntryIterator());
            return ::org::apache::lucene::search::suggest::t_InputIterator::wrap_Object(result);
          }

          static PyObject *t_DocumentDictionary_get__entryIterator(t_DocumentDictionary *self, void *data)
          {
            ::org::apache::lucene::search::suggest::InputIterator value((jobject) NULL);
            OBJ_CALL(value = self->object.getEntryIterator());
            return ::org::apache::lucene::search::suggest::t_InputIterator::wrap_Object(value);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/similarities/LMDirichletSimilarity.h"
#include "org/apache/lucene/search/similarities/LMSimilarity$CollectionModel.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace similarities {

          ::java::lang::Class *LMDirichletSimilarity::class$ = NULL;
          jmethodID *LMDirichletSimilarity::mids$ = NULL;
          bool LMDirichletSimilarity::live$ = false;

          jclass LMDirichletSimilarity::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/search/similarities/LMDirichletSimilarity");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_f2cc1bce94666404] = env->getMethodID(cls, "<init>", "()V");
              mids$[mid_init$_8e1d952dd65cdc3a] = env->getMethodID(cls, "<init>", "(F)V");
              mids$[mid_init$_070af2e40388d15d] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/search/similarities/LMSimilarity$CollectionModel;)V");
              mids$[mid_init$_f196124a35795af7] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/search/similarities/LMSimilarity$CollectionModel;F)V");
              mids$[mid_getMu_58aec2b64dff50c8] = env->getMethodID(cls, "getMu", "()F");
              mids$[mid_getName_db9b55ba01e03e4b] = env->getMethodID(cls, "getName", "()Ljava/lang/String;");
              mids$[mid_score_761ab1c432346fd0] = env->getMethodID(cls, "score", "(Lorg/apache/lucene/search/similarities/BasicStats;DD)D");
              mids$[mid_explain_f9756f2482a92b24] = env->getMethodID(cls, "explain", "(Ljava/util/List;Lorg/apache/lucene/search/similarities/BasicStats;DD)V");
              mids$[mid_explain_a84367e35a1ef83b] = env->getMethodID(cls, "explain", "(Lorg/apache/lucene/search/similarities/BasicStats;Lorg/apache/lucene/search/Explanation;D)Lorg/apache/lucene/search/Explanation;");

              class$ = new ::java::lang::Class(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          LMDirichletSimilarity::LMDirichletSimilarity() : ::org::apache::lucene::search::similarities::LMSimilarity(env->newObject(initializeClass, &mids$, mid_init$_f2cc1bce94666404)) {}

          LMDirichletSimilarity::LMDirichletSimilarity(jfloat a0) : ::org::apache::lucene::search::similarities::LMSimilarity(env->newObject(initializeClass, &mids$, mid_init$_8e1d952dd65cdc3a, a0)) {}

          LMDirichletSimilarity::LMDirichletSimilarity(const ::org::apache::lucene::search::similarities::LMSimilarity$CollectionModel & a0) : ::org::apache::lucene::search::similarities::LMSimilarity(env->newObject(initializeClass, &mids$, mid_init$_070af2e40388d15d, a0.this$)) {}

          LMDirichletSimilarity::LMDirichletSimilarity(const ::org::apache::lucene::search::similarities::LMSimilarity$CollectionModel & a0, jfloat a1) : ::org::apache::lucene::search::similarities::LMSimilarity(env->newObject(initializeClass, &mids$, mid_init$_f196124a35795af7, a0.this$, a1)) {}

          jfloat LMDirichletSimilarity::getMu() const
          {
            return env->callFloatMethod(this$, mids$[mid_getMu_58aec2b64dff50c8]);
          }

          ::java::lang::String LMDirichletSimilarity::getName() const
          {
            return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_getName_db9b55ba01e03e4b]));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace similarities {
          static PyObject *t_LMDirichletSimilarity_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_LMDirichletSimilarity_instance_(PyTypeObject *type, PyObject *arg);
          static int t_LMDirichletSimilarity_init_(t_LMDirichletSimilarity *self, PyObject *args, PyObject *kwds);
          static PyObject *t_LMDirichletSimilarity_getMu(t_LMDirichletSimilarity *self);
          static PyObject *t_LMDirichletSimilarity_getName(t_LMDirichletSimilarity *self, PyObject *args);
          static PyObject *t_LMDirichletSimilarity_get__mu(t_LMDirichletSimilarity *self, void *data);
          static PyObject *t_LMDirichletSimilarity_get__name(t_LMDirichletSimilarity *self, void *data);
          static PyGetSetDef t_LMDirichletSimilarity__fields_[] = {
            DECLARE_GET_FIELD(t_LMDirichletSimilarity, mu),
            DECLARE_GET_FIELD(t_LMDirichletSimilarity, name),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_LMDirichletSimilarity__methods_[] = {
            DECLARE_METHOD(t_LMDirichletSimilarity, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_LMDirichletSimilarity, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_LMDirichletSimilarity, getMu, METH_NOARGS),
            DECLARE_METHOD(t_LMDirichletSimilarity, getName, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          static PyType_Slot PY_TYPE_SLOTS(LMDirichletSimilarity)[] = {
            { Py_tp_methods, t_LMDirichletSimilarity__methods_ },
            { Py_tp_init, (void *) t_LMDirichletSimilarity_init_ },
            { Py_tp_getset, t_LMDirichletSimilarity__fields_ },
            { 0, NULL }
          };

          static PyType_Def *PY_TYPE_BASES(LMDirichletSimilarity)[] = {
            &PY_TYPE_DEF(::org::apache::lucene::search::similarities::LMSimilarity),
            NULL
          };

          DEFINE_TYPE(LMDirichletSimilarity, t_LMDirichletSimilarity, LMDirichletSimilarity);

          void t_LMDirichletSimilarity::install(PyObject *module)
          {
            installType(&PY_TYPE(LMDirichletSimilarity), &PY_TYPE_DEF(LMDirichletSimilarity), module, "LMDirichletSimilarity", 0);
          }

          void t_LMDirichletSimilarity::initialize(PyObject *module)
          {
            PyObject_SetAttrString((PyObject *) PY_TYPE(LMDirichletSimilarity), "class_", make_descriptor(LMDirichletSimilarity::initializeClass, 1));
            PyObject_SetAttrString((PyObject *) PY_TYPE(LMDirichletSimilarity), "wrapfn_", make_descriptor(t_LMDirichletSimilarity::wrap_jobject));
            PyObject_SetAttrString((PyObject *) PY_TYPE(LMDirichletSimilarity), "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_LMDirichletSimilarity_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, LMDirichletSimilarity::initializeClass, 1)))
              return NULL;
            return t_LMDirichletSimilarity::wrap_Object(LMDirichletSimilarity(((t_LMDirichletSimilarity *) arg)->object.this$));
          }
          static PyObject *t_LMDirichletSimilarity_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, LMDirichletSimilarity::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_LMDirichletSimilarity_init_(t_LMDirichletSimilarity *self, PyObject *args, PyObject *kwds)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 0:
              {
                LMDirichletSimilarity object((jobject) NULL);

                INT_CALL(object = LMDirichletSimilarity());
                self->object = object;
                break;
              }
             case 1:
              {
                jfloat a0;
                LMDirichletSimilarity object((jobject) NULL);

                if (!parseArgs(args, "F", &a0))
                {
                  INT_CALL(object = LMDirichletSimilarity(a0));
                  self->object = object;
                  break;
                }
              }
              {
                ::org::apache::lucene::search::similarities::LMSimilarity$CollectionModel a0((jobject) NULL);
                LMDirichletSimilarity object((jobject) NULL);

                if (!parseArgs(args, "k", ::org::apache::lucene::search::similarities::LMSimilarity$CollectionModel::initializeClass, &a0))
                {
                  INT_CALL(object = LMDirichletSimilarity(a0));
                  self->object = object;
                  break;
                }
              }
              goto err;
             case 2:
              {
                ::org::apache::lucene::search::similarities::LMSimilarity$CollectionModel a0((jobject) NULL);
                jfloat a1;
                LMDirichletSimilarity object((jobject) NULL);

                if (!parseArgs(args, "kF", ::org::apache::lucene::search::similarities::LMSimilarity$CollectionModel::initializeClass, &a0, &a1))
                {
                  INT_CALL(object = LMDirichletSimilarity(a0, a1));
                  self->object = object;
                  break;
                }
              }
             default:
             err:
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_LMDirichletSimilarity_getMu(t_LMDirichletSimilarity *self)
          {
            jfloat result;
            OBJ_CALL(result = self->object.getMu());
            return PyFloat_FromDouble((double) result);
          }

          static PyObject *t_LMDirichletSimilarity_getName(t_LMDirichletSimilarity *self, PyObject *args)
          {
            ::java::lang::String result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.getName());
              return j2p(result);
            }

            return callSuper(PY_TYPE(LMDirichletSimilarity), (PyObject *) self, "getName", args, 2);
          }

          static PyObject *t_LMDirichletSimilarity_get__mu(t_LMDirichletSimilarity *self, void *data)
          {
            jfloat value;
            OBJ_CALL(value = self->object.getMu());
            return PyFloat_FromDouble((double) value);
          }

          static PyObject *t_LMDirichletSimilarity_get__name(t_LMDirichletSimilarity *self, void *data)
          {
            ::java::lang::String value((jobject) NULL);
            OBJ_CALL(value = self->object.getName());
            return j2p(value);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/util/QueryBuilder.h"
#include "org/apache/lucene/analysis/Analyzer.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/search/BooleanClause$Occur.h"
#include "java/lang/String.h"
#include "org/apache/lucene/search/Query.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {

        ::java::lang::Class *QueryBuilder::class$ = NULL;
        jmethodID *QueryBuilder::mids$ = NULL;
        bool QueryBuilder::live$ = false;

        jclass QueryBuilder::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/util/QueryBuilder");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_651b708fb3f85e6e] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/analysis/Analyzer;)V");
            mids$[mid_createBooleanQuery_e08cfaa30c1cfbe9] = env->getMethodID(cls, "createBooleanQuery", "(Ljava/lang/String;Ljava/lang/String;)Lorg/apache/lucene/search/Query;");
            mids$[mid_createBooleanQuery_32c42696d464a916] = env->getMethodID(cls, "createBooleanQuery", "(Ljava/lang/String;Ljava/lang/String;Lorg/apache/lucene/search/BooleanClause$Occur;)Lorg/apache/lucene/search/Query;");
            mids$[mid_createMinShouldMatchQuery_391b6230ae9c102d] = env->getMethodID(cls, "createMinShouldMatchQuery", "(Ljava/lang/String;Ljava/lang/String;F)Lorg/apache/lucene/search/Query;");
            mids$[mid_createPhraseQuery_e08cfaa30c1cfbe9] = env->getMethodID(cls, "createPhraseQuery", "(Ljava/lang/String;Ljava/lang/String;)Lorg/apache/lucene/search/Query;");
            mids$[mid_createPhraseQuery_3a5baa20d223c529] = env->getMethodID(cls, "createPhraseQuery", "(Ljava/lang/String;Ljava/lang/String;I)Lorg/apache/lucene/search/Query;");
            mids$[mid_getAnalyzer_75a99b097bd64493] = env->getMethodID(cls, "getAnalyzer", "()Lorg/apache/lucene/analysis/Analyzer;");
            mids$[mid_getAutoGenerateMultiTermSynonymsPhraseQuery_8454bd5aa23fd11e] = env->getMethodID(cls, "getAutoGenerateMultiTermSynonymsPhraseQuery", "()Z");
            mids$[mid_getEnableGraphQueries_8454bd5aa23fd11e] = env->getMethodID(cls, "getEnableGraphQueries", "()Z");
            mids$[mid_getEnablePositionIncrements_8454bd5aa23fd11e] = env->getMethodID(cls, "getEnablePositionIncrements", "()Z");
            mids$[mid_setAnalyzer_651b708fb3f85e6e] = env->getMethodID(cls, "setAnalyzer", "(Lorg/apache/lucene/analysis/Analyzer;)V");
            mids$[mid_setAutoGenerateMultiTermSynonymsPhraseQuery_9d72768e8fdce2b7] = env->getMethodID(cls, "setAutoGenerateMultiTermSynonymsPhraseQuery", "(Z)V");
            mids$[mid_setEnableGraphQueries_9d72768e8fdce2b7] = env->getMethodID(cls, "setEnableGraphQueries", "(Z)V");
            mids$[mid_setEnablePositionIncrements_9d72768e8fdce2b7] = env->getMethodID(cls, "setEnablePositionIncrements", "(Z)V");
            mids$[mid_newBooleanQuery_a51b33134513d073] = env->getMethodID(cls, "newBooleanQuery", "()Lorg/apache/lucene/search/BooleanQuery$Builder;");
            mids$[mid_createFieldQuery_e8e6b32bb4ffe546] = env->getMethodID(cls, "createFieldQuery", "(Lorg/apache/lucene/analysis/Analyzer;Lorg/apache/lucene/search/BooleanClause$Occur;Ljava/lang/String;Ljava/lang/String;ZI)Lorg/apache/lucene/search/Query;");
            mids$[mid_createFieldQuery_e3cbfa5968dbd9f3] = env->getMethodID(cls, "createFieldQuery", "(Lorg/apache/lucene/analysis/TokenStream;Lorg/apache/lucene/search/BooleanClause$Occur;Ljava/lang/String;ZI)Lorg/apache/lucene/search/Query;");
            mids$[mid_createSpanQuery_0a0ab63d74e766be] = env->getMethodID(cls, "createSpanQuery", "(Lorg/apache/lucene/analysis/TokenStream;Ljava/lang/String;)Lorg/apache/lucene/search/spans/SpanQuery;");
            mids$[mid_analyzeTerm_34d60f2901f19991] = env->getMethodID(cls, "analyzeTerm", "(Ljava/lang/String;Lorg/apache/lucene/analysis/TokenStream;)Lorg/apache/lucene/search/Query;");
            mids$[mid_analyzeBoolean_34d60f2901f19991] = env->getMethodID(cls, "analyzeBoolean", "(Ljava/lang/String;Lorg/apache/lucene/analysis/TokenStream;)Lorg/apache/lucene/search/Query;");
            mids$[mid_analyzeMultiBoolean_cf0df92099681d2c] = env->getMethodID(cls, "analyzeMultiBoolean", "(Ljava/lang/String;Lorg/apache/lucene/analysis/TokenStream;Lorg/apache/lucene/search/BooleanClause$Occur;)Lorg/apache/lucene/search/Query;");
            mids$[mid_analyzePhrase_3970aa327c879410] = env->getMethodID(cls, "analyzePhrase", "(Ljava/lang/String;Lorg/apache/lucene/analysis/TokenStream;I)Lorg/apache/lucene/search/Query;");
            mids$[mid_analyzeMultiPhrase_3970aa327c879410] = env->getMethodID(cls, "analyzeMultiPhrase", "(Ljava/lang/String;Lorg/apache/lucene/analysis/TokenStream;I)Lorg/apache/lucene/search/Query;");
            mids$[mid_analyzeGraphBoolean_cf0df92099681d2c] = env->getMethodID(cls, "analyzeGraphBoolean", "(Ljava/lang/String;Lorg/apache/lucene/analysis/TokenStream;Lorg/apache/lucene/search/BooleanClause$Occur;)Lorg/apache/lucene/search/Query;");
            mids$[mid_analyzeGraphPhrase_0fd053efdf440b81] = env->getMethodID(cls, "analyzeGraphPhrase", "(Lorg/apache/lucene/analysis/TokenStream;Ljava/lang/String;I)Lorg/apache/lucene/search/Query;");
            mids$[mid_newSynonymQuery_06a7929972d58dd3] = env->getMethodID(cls, "newSynonymQuery", "([Lorg/apache/lucene/util/QueryBuilder$TermAndBoost;)Lorg/apache/lucene/search/Query;");
            mids$[mid_newGraphSynonymQuery_3eb578136a1e2f0d] = env->getMethodID(cls, "newGraphSynonymQuery", "(Ljava/util/Iterator;)Lorg/apache/lucene/search/Query;");
            mids$[mid_newTermQuery_3904569060347954] = env->getMethodID(cls, "newTermQuery", "(Lorg/apache/lucene/index/Term;F)Lorg/apache/lucene/search/Query;");
            mids$[mid_newMultiPhraseQueryBuilder_07b8bd4c2c1ccc6c] = env->getMethodID(cls, "newMultiPhraseQueryBuilder", "()Lorg/apache/lucene/search/MultiPhraseQuery$Builder;");
            mids$[mid_add_a3473b0850a560dc] = env->getMethodID(cls, "add", "(Lorg/apache/lucene/search/BooleanQuery$Builder;Ljava/util/List;Lorg/apache/lucene/search/BooleanClause$Occur;)V");

            class$ = new ::java::lang::Class(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        QueryBuilder::QueryBuilder(const ::org::apache::lucene::analysis::Analyzer & a0) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_651b708fb3f85e6e, a0.this$)) {}

        ::org::apache::lucene::search::Query QueryBuilder::createBooleanQuery(const ::java::lang::String & a0, const ::java::lang::String & a1) const
        {
          return ::org::apache::lucene::search::Query(env->callObjectMethod(this$, mids$[mid_createBooleanQuery_e08cfaa30c1cfbe9], a0.this$, a1.this$));
        }

        ::org::apache::lucene::search::Query QueryBuilder::createBooleanQuery(const ::java::lang::String & a0, const ::java::lang::String & a1, const ::org::apache::lucene::search::BooleanClause$Occur & a2) const
        {
          return ::org::apache::lucene::search::Query(env->callObjectMethod(this$, mids$[mid_createBooleanQuery_32c42696d464a916], a0.this$, a1.this$, a2.this$));
        }

        ::org::apache::lucene::search::Query QueryBuilder::createMinShouldMatchQuery(const ::java::lang::String & a0, const ::java::lang::String & a1, jfloat a2) const
        {
          return ::org::apache::lucene::search::Query(env->callObjectMethod(this$, mids$[mid_createMinShouldMatchQuery_391b6230ae9c102d], a0.this$, a1.this$, a2));
        }

        ::org::apache::lucene::search::Query QueryBuilder::createPhraseQuery(const ::java::lang::String & a0, const ::java::lang::String & a1) const
        {
          return ::org::apache::lucene::search::Query(env->callObjectMethod(this$, mids$[mid_createPhraseQuery_e08cfaa30c1cfbe9], a0.this$, a1.this$));
        }

        ::org::apache::lucene::search::Query QueryBuilder::createPhraseQuery(const ::java::lang::String & a0, const ::java::lang::String & a1, jint a2) const
        {
          return ::org::apache::lucene::search::Query(env->callObjectMethod(this$, mids$[mid_createPhraseQuery_3a5baa20d223c529], a0.this$, a1.this$, a2));
        }

        ::org::apache::lucene::analysis::Analyzer QueryBuilder::getAnalyzer() const
        {
          return ::org::apache::lucene::analysis::Analyzer(env->callObjectMethod(this$, mids$[mid_getAnalyzer_75a99b097bd64493]));
        }

        jboolean QueryBuilder::getAutoGenerateMultiTermSynonymsPhraseQuery() const
        {
          return env->callBooleanMethod(this$, mids$[mid_getAutoGenerateMultiTermSynonymsPhraseQuery_8454bd5aa23fd11e]);
        }

        jboolean QueryBuilder::getEnableGraphQueries() const
        {
          return env->callBooleanMethod(this$, mids$[mid_getEnableGraphQueries_8454bd5aa23fd11e]);
        }

        jboolean QueryBuilder::getEnablePositionIncrements() const
        {
          return env->callBooleanMethod(this$, mids$[mid_getEnablePositionIncrements_8454bd5aa23fd11e]);
        }

        void QueryBuilder::setAnalyzer(const ::org::apache::lucene::analysis::Analyzer & a0) const
        {
          env->callVoidMethod(this$, mids$[mid_setAnalyzer_651b708fb3f85e6e], a0.this$);
        }

        void QueryBuilder::setAutoGenerateMultiTermSynonymsPhraseQuery(jboolean a0) const
        {
          env->callVoidMethod(this$, mids$[mid_setAutoGenerateMultiTermSynonymsPhraseQuery_9d72768e8fdce2b7], a0);
        }

        void QueryBuilder::setEnableGraphQueries(jboolean a0) const
        {
          env->callVoidMethod(this$, mids$[mid_setEnableGraphQueries_9d72768e8fdce2b7], a0);
        }

        void QueryBuilder::setEnablePositionIncrements(jboolean a0) const
        {
          env->callVoidMethod(this$, mids$[mid_setEnablePositionIncrements_9d72768e8fdce2b7], a0);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"
#include "org/apache/lucene/util/QueryBuilder$TermAndBoost.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        static PyObject *t_QueryBuilder_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_QueryBuilder_instance_(PyTypeObject *type, PyObject *arg);
        static int t_QueryBuilder_init_(t_QueryBuilder *self, PyObject *args, PyObject *kwds);
        static PyObject *t_QueryBuilder_createBooleanQuery(t_QueryBuilder *self, PyObject *args);
        static PyObject *t_QueryBuilder_createMinShouldMatchQuery(t_QueryBuilder *self, PyObject *args);
        static PyObject *t_QueryBuilder_createPhraseQuery(t_QueryBuilder *self, PyObject *args);
        static PyObject *t_QueryBuilder_getAnalyzer(t_QueryBuilder *self);
        static PyObject *t_QueryBuilder_getAutoGenerateMultiTermSynonymsPhraseQuery(t_QueryBuilder *self);
        static PyObject *t_QueryBuilder_getEnableGraphQueries(t_QueryBuilder *self);
        static PyObject *t_QueryBuilder_getEnablePositionIncrements(t_QueryBuilder *self);
        static PyObject *t_QueryBuilder_setAnalyzer(t_QueryBuilder *self, PyObject *arg);
        static PyObject *t_QueryBuilder_setAutoGenerateMultiTermSynonymsPhraseQuery(t_QueryBuilder *self, PyObject *arg);
        static PyObject *t_QueryBuilder_setEnableGraphQueries(t_QueryBuilder *self, PyObject *arg);
        static PyObject *t_QueryBuilder_setEnablePositionIncrements(t_QueryBuilder *self, PyObject *arg);
        static PyObject *t_QueryBuilder_get__analyzer(t_QueryBuilder *self, void *data);
        static int t_QueryBuilder_set__analyzer(t_QueryBuilder *self, PyObject *arg, void *data);
        static PyObject *t_QueryBuilder_get__autoGenerateMultiTermSynonymsPhraseQuery(t_QueryBuilder *self, void *data);
        static int t_QueryBuilder_set__autoGenerateMultiTermSynonymsPhraseQuery(t_QueryBuilder *self, PyObject *arg, void *data);
        static PyObject *t_QueryBuilder_get__enableGraphQueries(t_QueryBuilder *self, void *data);
        static int t_QueryBuilder_set__enableGraphQueries(t_QueryBuilder *self, PyObject *arg, void *data);
        static PyObject *t_QueryBuilder_get__enablePositionIncrements(t_QueryBuilder *self, void *data);
        static int t_QueryBuilder_set__enablePositionIncrements(t_QueryBuilder *self, PyObject *arg, void *data);
        static PyGetSetDef t_QueryBuilder__fields_[] = {
          DECLARE_GETSET_FIELD(t_QueryBuilder, analyzer),
          DECLARE_GETSET_FIELD(t_QueryBuilder, autoGenerateMultiTermSynonymsPhraseQuery),
          DECLARE_GETSET_FIELD(t_QueryBuilder, enableGraphQueries),
          DECLARE_GETSET_FIELD(t_QueryBuilder, enablePositionIncrements),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_QueryBuilder__methods_[] = {
          DECLARE_METHOD(t_QueryBuilder, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_QueryBuilder, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_QueryBuilder, createBooleanQuery, METH_VARARGS),
          DECLARE_METHOD(t_QueryBuilder, createMinShouldMatchQuery, METH_VARARGS),
          DECLARE_METHOD(t_QueryBuilder, createPhraseQuery, METH_VARARGS),
          DECLARE_METHOD(t_QueryBuilder, getAnalyzer, METH_NOARGS),
          DECLARE_METHOD(t_QueryBuilder, getAutoGenerateMultiTermSynonymsPhraseQuery, METH_NOARGS),
          DECLARE_METHOD(t_QueryBuilder, getEnableGraphQueries, METH_NOARGS),
          DECLARE_METHOD(t_QueryBuilder, getEnablePositionIncrements, METH_NOARGS),
          DECLARE_METHOD(t_QueryBuilder, setAnalyzer, METH_O),
          DECLARE_METHOD(t_QueryBuilder, setAutoGenerateMultiTermSynonymsPhraseQuery, METH_O),
          DECLARE_METHOD(t_QueryBuilder, setEnableGraphQueries, METH_O),
          DECLARE_METHOD(t_QueryBuilder, setEnablePositionIncrements, METH_O),
          { NULL, NULL, 0, NULL }
        };

        static PyType_Slot PY_TYPE_SLOTS(QueryBuilder)[] = {
          { Py_tp_methods, t_QueryBuilder__methods_ },
          { Py_tp_init, (void *) t_QueryBuilder_init_ },
          { Py_tp_getset, t_QueryBuilder__fields_ },
          { 0, NULL }
        };

        static PyType_Def *PY_TYPE_BASES(QueryBuilder)[] = {
          &PY_TYPE_DEF(::java::lang::Object),
          NULL
        };

        DEFINE_TYPE(QueryBuilder, t_QueryBuilder, QueryBuilder);

        void t_QueryBuilder::install(PyObject *module)
        {
          installType(&PY_TYPE(QueryBuilder), &PY_TYPE_DEF(QueryBuilder), module, "QueryBuilder", 0);
          PyObject_SetAttrString((PyObject *) PY_TYPE(QueryBuilder), "TermAndBoost", make_descriptor(&PY_TYPE_DEF(QueryBuilder$TermAndBoost)));
        }

        void t_QueryBuilder::initialize(PyObject *module)
        {
          PyObject_SetAttrString((PyObject *) PY_TYPE(QueryBuilder), "class_", make_descriptor(QueryBuilder::initializeClass, 1));
          PyObject_SetAttrString((PyObject *) PY_TYPE(QueryBuilder), "wrapfn_", make_descriptor(t_QueryBuilder::wrap_jobject));
          PyObject_SetAttrString((PyObject *) PY_TYPE(QueryBuilder), "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_QueryBuilder_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, QueryBuilder::initializeClass, 1)))
            return NULL;
          return t_QueryBuilder::wrap_Object(QueryBuilder(((t_QueryBuilder *) arg)->object.this$));
        }
        static PyObject *t_QueryBuilder_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, QueryBuilder::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_QueryBuilder_init_(t_QueryBuilder *self, PyObject *args, PyObject *kwds)
        {
          ::org::apache::lucene::analysis::Analyzer a0((jobject) NULL);
          QueryBuilder object((jobject) NULL);

          if (!parseArgs(args, "k", ::org::apache::lucene::analysis::Analyzer::initializeClass, &a0))
          {
            INT_CALL(object = QueryBuilder(a0));
            self->object = object;
          }
          else
          {
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }

        static PyObject *t_QueryBuilder_createBooleanQuery(t_QueryBuilder *self, PyObject *args)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 2:
            {
              ::java::lang::String a0((jobject) NULL);
              ::java::lang::String a1((jobject) NULL);
              ::org::apache::lucene::search::Query result((jobject) NULL);

              if (!parseArgs(args, "ss", &a0, &a1))
              {
                OBJ_CALL(result = self->object.createBooleanQuery(a0, a1));
                return ::org::apache::lucene::search::t_Query::wrap_Object(result);
              }
            }
            break;
           case 3:
            {
              ::java::lang::String a0((jobject) NULL);
              ::java::lang::String a1((jobject) NULL);
              ::org::apache::lucene::search::BooleanClause$Occur a2((jobject) NULL);
              PyTypeObject **p2;
              ::org::apache::lucene::search::Query result((jobject) NULL);

              if (!parseArgs(args, "ssK", ::org::apache::lucene::search::BooleanClause$Occur::initializeClass, &a0, &a1, &a2, &p2, ::org::apache::lucene::search::t_BooleanClause$Occur::parameters_))
              {
                OBJ_CALL(result = self->object.createBooleanQuery(a0, a1, a2));
                return ::org::apache::lucene::search::t_Query::wrap_Object(result);
              }
            }
          }

          PyErr_SetArgsError((PyObject *) self, "createBooleanQuery", args);
          return NULL;
        }

        static PyObject *t_QueryBuilder_createMinShouldMatchQuery(t_QueryBuilder *self, PyObject *args)
        {
          ::java::lang::String a0((jobject) NULL);
          ::java::lang::String a1((jobject) NULL);
          jfloat a2;
          ::org::apache::lucene::search::Query result((jobject) NULL);

          if (!parseArgs(args, "ssF", &a0, &a1, &a2))
          {
            OBJ_CALL(result = self->object.createMinShouldMatchQuery(a0, a1, a2));
            return ::org::apache::lucene::search::t_Query::wrap_Object(result);
          }

          PyErr_SetArgsError((PyObject *) self, "createMinShouldMatchQuery", args);
          return NULL;
        }

        static PyObject *t_QueryBuilder_createPhraseQuery(t_QueryBuilder *self, PyObject *args)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 2:
            {
              ::java::lang::String a0((jobject) NULL);
              ::java::lang::String a1((jobject) NULL);
              ::org::apache::lucene::search::Query result((jobject) NULL);

              if (!parseArgs(args, "ss", &a0, &a1))
              {
                OBJ_CALL(result = self->object.createPhraseQuery(a0, a1));
                return ::org::apache::lucene::search::t_Query::wrap_Object(result);
              }
            }
            break;
           case 3:
            {
              ::java::lang::String a0((jobject) NULL);
              ::java::lang::String a1((jobject) NULL);
              jint a2;
              ::org::apache::lucene::search::Query result((jobject) NULL);

              if (!parseArgs(args, "ssI", &a0, &a1, &a2))
              {
                OBJ_CALL(result = self->object.createPhraseQuery(a0, a1, a2));
                return ::org::apache::lucene::search::t_Query::wrap_Object(result);
              }
            }
          }

          PyErr_SetArgsError((PyObject *) self, "createPhraseQuery", args);
          return NULL;
        }

        static PyObject *t_QueryBuilder_getAnalyzer(t_QueryBuilder *self)
        {
          ::org::apache::lucene::analysis::Analyzer result((jobject) NULL);
          OBJ_CALL(result = self->object.getAnalyzer());
          return ::org::apache::lucene::analysis::t_Analyzer::wrap_Object(result);
        }

        static PyObject *t_QueryBuilder_getAutoGenerateMultiTermSynonymsPhraseQuery(t_QueryBuilder *self)
        {
          jboolean result;
          OBJ_CALL(result = self->object.getAutoGenerateMultiTermSynonymsPhraseQuery());
          Py_RETURN_BOOL(result);
        }

        static PyObject *t_QueryBuilder_getEnableGraphQueries(t_QueryBuilder *self)
        {
          jboolean result;
          OBJ_CALL(result = self->object.getEnableGraphQueries());
          Py_RETURN_BOOL(result);
        }

        static PyObject *t_QueryBuilder_getEnablePositionIncrements(t_QueryBuilder *self)
        {
          jboolean result;
          OBJ_CALL(result = self->object.getEnablePositionIncrements());
          Py_RETURN_BOOL(result);
        }

        static PyObject *t_QueryBuilder_setAnalyzer(t_QueryBuilder *self, PyObject *arg)
        {
          ::org::apache::lucene::analysis::Analyzer a0((jobject) NULL);

          if (!parseArg(arg, "k", ::org::apache::lucene::analysis::Analyzer::initializeClass, &a0))
          {
            OBJ_CALL(self->object.setAnalyzer(a0));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "setAnalyzer", arg);
          return NULL;
        }

        static PyObject *t_QueryBuilder_setAutoGenerateMultiTermSynonymsPhraseQuery(t_QueryBuilder *self, PyObject *arg)
        {
          jboolean a0;

          if (!parseArg(arg, "Z", &a0))
          {
            OBJ_CALL(self->object.setAutoGenerateMultiTermSynonymsPhraseQuery(a0));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "setAutoGenerateMultiTermSynonymsPhraseQuery", arg);
          return NULL;
        }

        static PyObject *t_QueryBuilder_setEnableGraphQueries(t_QueryBuilder *self, PyObject *arg)
        {
          jboolean a0;

          if (!parseArg(arg, "Z", &a0))
          {
            OBJ_CALL(self->object.setEnableGraphQueries(a0));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "setEnableGraphQueries", arg);
          return NULL;
        }

        static PyObject *t_QueryBuilder_setEnablePositionIncrements(t_QueryBuilder *self, PyObject *arg)
        {
          jboolean a0;

          if (!parseArg(arg, "Z", &a0))
          {
            OBJ_CALL(self->object.setEnablePositionIncrements(a0));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "setEnablePositionIncrements", arg);
          return NULL;
        }

        static PyObject *t_QueryBuilder_get__analyzer(t_QueryBuilder *self, void *data)
        {
          ::org::apache::lucene::analysis::Analyzer value((jobject) NULL);
          OBJ_CALL(value = self->object.getAnalyzer());
          return ::org::apache::lucene::analysis::t_Analyzer::wrap_Object(value);
        }
        static int t_QueryBuilder_set__analyzer(t_QueryBuilder *self, PyObject *arg, void *data)
        {
          {
            ::org::apache::lucene::analysis::Analyzer value((jobject) NULL);
            if (!parseArg(arg, "k", ::org::apache::lucene::analysis::Analyzer::initializeClass, &value))
            {
              INT_CALL(self->object.setAnalyzer(value));
              return 0;
            }
          }
          PyErr_SetArgsError((PyObject *) self, "analyzer", arg);
          return -1;
        }

        static PyObject *t_QueryBuilder_get__autoGenerateMultiTermSynonymsPhraseQuery(t_QueryBuilder *self, void *data)
        {
          jboolean value;
          OBJ_CALL(value = self->object.getAutoGenerateMultiTermSynonymsPhraseQuery());
          Py_RETURN_BOOL(value);
        }
        static int t_QueryBuilder_set__autoGenerateMultiTermSynonymsPhraseQuery(t_QueryBuilder *self, PyObject *arg, void *data)
        {
          {
            jboolean value;
            if (!parseArg(arg, "Z", &value))
            {
              INT_CALL(self->object.setAutoGenerateMultiTermSynonymsPhraseQuery(value));
              return 0;
            }
          }
          PyErr_SetArgsError((PyObject *) self, "autoGenerateMultiTermSynonymsPhraseQuery", arg);
          return -1;
        }

        static PyObject *t_QueryBuilder_get__enableGraphQueries(t_QueryBuilder *self, void *data)
        {
          jboolean value;
          OBJ_CALL(value = self->object.getEnableGraphQueries());
          Py_RETURN_BOOL(value);
        }
        static int t_QueryBuilder_set__enableGraphQueries(t_QueryBuilder *self, PyObject *arg, void *data)
        {
          {
            jboolean value;
            if (!parseArg(arg, "Z", &value))
            {
              INT_CALL(self->object.setEnableGraphQueries(value));
              return 0;
            }
          }
          PyErr_SetArgsError((PyObject *) self, "enableGraphQueries", arg);
          return -1;
        }

        static PyObject *t_QueryBuilder_get__enablePositionIncrements(t_QueryBuilder *self, void *data)
        {
          jboolean value;
          OBJ_CALL(value = self->object.getEnablePositionIncrements());
          Py_RETURN_BOOL(value);
        }
        static int t_QueryBuilder_set__enablePositionIncrements(t_QueryBuilder *self, PyObject *arg, void *data)
        {
          {
            jboolean value;
            if (!parseArg(arg, "Z", &value))
            {
              INT_CALL(self->object.setEnablePositionIncrements(value));
              return 0;
            }
          }
          PyErr_SetArgsError((PyObject *) self, "enablePositionIncrements", arg);
          return -1;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "java/lang/Boolean.h"
#include "java/lang/Comparable.h"
#include "java/lang/Class.h"
#include "java/lang/String.h"
#include "java/io/Serializable.h"
#include "java/lang/Boolean.h"
#include "JArray.h"

namespace java {
  namespace lang {

    ::java::lang::Class *Boolean::class$ = NULL;
    jmethodID *Boolean::mids$ = NULL;
    bool Boolean::live$ = false;
    Boolean *Boolean::FALSE = NULL;
    Boolean *Boolean::TRUE = NULL;
    ::java::lang::Class *Boolean::TYPE = NULL;

    jclass Boolean::initializeClass(bool getOnly)
    {
      if (getOnly)
        return (jclass) (live$ ? class$->this$ : NULL);
      if (class$ == NULL)
      {
        jclass cls = (jclass) env->findClass("java/lang/Boolean");

        mids$ = new jmethodID[max_mid];
        mids$[mid_init$_9fd2eb66a64e6f0f] = env->getMethodID(cls, "<init>", "(Ljava/lang/String;)V");
        mids$[mid_init$_9d72768e8fdce2b7] = env->getMethodID(cls, "<init>", "(Z)V");
        mids$[mid_booleanValue_8454bd5aa23fd11e] = env->getMethodID(cls, "booleanValue", "()Z");
        mids$[mid_compare_09b6794702e18123] = env->getStaticMethodID(cls, "compare", "(ZZ)I");
        mids$[mid_compareTo_aa49eaca6154a5ac] = env->getMethodID(cls, "compareTo", "(Ljava/lang/Boolean;)I");
        mids$[mid_equals_8b72f2dcdde6fd1d] = env->getMethodID(cls, "equals", "(Ljava/lang/Object;)Z");
        mids$[mid_getBoolean_145b2d0af0c06b93] = env->getStaticMethodID(cls, "getBoolean", "(Ljava/lang/String;)Z");
        mids$[mid_hashCode_9972fcc56b44e79d] = env->getMethodID(cls, "hashCode", "()I");
        mids$[mid_hashCode_07672f3f11b6ddc5] = env->getStaticMethodID(cls, "hashCode", "(Z)I");
        mids$[mid_logicalAnd_266e12b9cc3795ac] = env->getStaticMethodID(cls, "logicalAnd", "(ZZ)Z");
        mids$[mid_logicalOr_266e12b9cc3795ac] = env->getStaticMethodID(cls, "logicalOr", "(ZZ)Z");
        mids$[mid_logicalXor_266e12b9cc3795ac] = env->getStaticMethodID(cls, "logicalXor", "(ZZ)Z");
        mids$[mid_parseBoolean_145b2d0af0c06b93] = env->getStaticMethodID(cls, "parseBoolean", "(Ljava/lang/String;)Z");
        mids$[mid_toString_db9b55ba01e03e4b] = env->getMethodID(cls, "toString", "()Ljava/lang/String;");
        mids$[mid_toString_46a3600c464a391e] = env->getStaticMethodID(cls, "toString", "(Z)Ljava/lang/String;");
        mids$[mid_valueOf_885d9bf6654676d5] = env->getStaticMethodID(cls, "valueOf", "(Ljava/lang/String;)Ljava/lang/Boolean;");
        mids$[mid_valueOf_7b0eea15bb246228] = env->getStaticMethodID(cls, "valueOf", "(Z)Ljava/lang/Boolean;");

        class$ = new ::java::lang::Class(cls);
        cls = (jclass) class$->this$;

        FALSE = new Boolean(env->getStaticObjectField(cls, "FALSE", "Ljava/lang/Boolean;"));
        TRUE = new Boolean(env->getStaticObjectField(cls, "TRUE", "Ljava/lang/Boolean;"));
        TYPE = new ::java::lang::Class(env->getStaticObjectField(cls, "TYPE", "Ljava/lang/Class;"));
        live$ = true;
      }
      return (jclass) class$->this$;
    }

    Boolean::Boolean(const ::java::lang::String & a0) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_9fd2eb66a64e6f0f, a0.this$)) {}

    Boolean::Boolean(jboolean a0) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_9d72768e8fdce2b7, a0)) {}

    jboolean Boolean::booleanValue() const
    {
      return env->callBooleanMethod(this$, mids$[mid_booleanValue_8454bd5aa23fd11e]);
    }

    jint Boolean::compare(jboolean a0, jboolean a1)
    {
      jclass cls = env->getClass(initializeClass);
      return env->callStaticIntMethod(cls, mids$[mid_compare_09b6794702e18123], a0, a1);
    }

    jint Boolean::compareTo(const Boolean & a0) const
    {
      return env->callIntMethod(this$, mids$[mid_compareTo_aa49eaca6154a5ac], a0.this$);
    }

    jboolean Boolean::equals(const ::java::lang::Object & a0) const
    {
      return env->callBooleanMethod(this$, mids$[mid_equals_8b72f2dcdde6fd1d], a0.this$);
    }

    jboolean Boolean::getBoolean(const ::java::lang::String & a0)
    {
      jclass cls = env->getClass(initializeClass);
      return env->callStaticBooleanMethod(cls, mids$[mid_getBoolean_145b2d0af0c06b93], a0.this$);
    }

    jint Boolean::hashCode() const
    {
      return env->callIntMethod(this$, mids$[mid_hashCode_9972fcc56b44e79d]);
    }

    jint Boolean::hashCode(jboolean a0)
    {
      jclass cls = env->getClass(initializeClass);
      return env->callStaticIntMethod(cls, mids$[mid_hashCode_07672f3f11b6ddc5], a0);
    }

    jboolean Boolean::logicalAnd(jboolean a0, jboolean a1)
    {
      jclass cls = env->getClass(initializeClass);
      return env->callStaticBooleanMethod(cls, mids$[mid_logicalAnd_266e12b9cc3795ac], a0, a1);
    }

    jboolean Boolean::logicalOr(jboolean a0, jboolean a1)
    {
      jclass cls = env->getClass(initializeClass);
      return env->callStaticBooleanMethod(cls, mids$[mid_logicalOr_266e12b9cc3795ac], a0, a1);
    }

    jboolean Boolean::logicalXor(jboolean a0, jboolean a1)
    {
      jclass cls = env->getClass(initializeClass);
      return env->callStaticBooleanMethod(cls, mids$[mid_logicalXor_266e12b9cc3795ac], a0, a1);
    }

    jboolean Boolean::parseBoolean(const ::java::lang::String & a0)
    {
      jclass cls = env->getClass(initializeClass);
      return env->callStaticBooleanMethod(cls, mids$[mid_parseBoolean_145b2d0af0c06b93], a0.this$);
    }

    ::java::lang::String Boolean::toString() const
    {
      return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_db9b55ba01e03e4b]));
    }

    ::java::lang::String Boolean::toString(jboolean a0)
    {
      jclass cls = env->getClass(initializeClass);
      return ::java::lang::String(env->callStaticObjectMethod(cls, mids$[mid_toString_46a3600c464a391e], a0));
    }

    Boolean Boolean::valueOf(const ::java::lang::String & a0)
    {
      jclass cls = env->getClass(initializeClass);
      return Boolean(env->callStaticObjectMethod(cls, mids$[mid_valueOf_885d9bf6654676d5], a0.this$));
    }

    Boolean Boolean::valueOf(jboolean a0)
    {
      jclass cls = env->getClass(initializeClass);
      return Boolean(env->callStaticObjectMethod(cls, mids$[mid_valueOf_7b0eea15bb246228], a0));
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace java {
  namespace lang {
    static PyObject *t_Boolean_cast_(PyTypeObject *type, PyObject *arg);
    static PyObject *t_Boolean_instance_(PyTypeObject *type, PyObject *arg);
    static int t_Boolean_init_(t_Boolean *self, PyObject *args, PyObject *kwds);
    static PyObject *t_Boolean_booleanValue(t_Boolean *self);
    static PyObject *t_Boolean_compare(PyTypeObject *type, PyObject *args);
    static PyObject *t_Boolean_compareTo(t_Boolean *self, PyObject *arg);
    static PyObject *t_Boolean_equals(t_Boolean *self, PyObject *args);
    static PyObject *t_Boolean_getBoolean(PyTypeObject *type, PyObject *arg);
    static PyObject *t_Boolean_hashCode(t_Boolean *self, PyObject *args);
    static PyObject *t_Boolean_hashCode_(PyTypeObject *type, PyObject *args);
    static PyObject *t_Boolean_logicalAnd(PyTypeObject *type, PyObject *args);
    static PyObject *t_Boolean_logicalOr(PyTypeObject *type, PyObject *args);
    static PyObject *t_Boolean_logicalXor(PyTypeObject *type, PyObject *args);
    static PyObject *t_Boolean_parseBoolean(PyTypeObject *type, PyObject *arg);
    static PyObject *t_Boolean_toString(t_Boolean *self, PyObject *args);
    static PyObject *t_Boolean_toString_(PyTypeObject *type, PyObject *args);
    static PyObject *t_Boolean_valueOf(PyTypeObject *type, PyObject *args);

    static PyMethodDef t_Boolean__methods_[] = {
      DECLARE_METHOD(t_Boolean, cast_, METH_O | METH_CLASS),
      DECLARE_METHOD(t_Boolean, instance_, METH_O | METH_CLASS),
      DECLARE_METHOD(t_Boolean, booleanValue, METH_NOARGS),
      DECLARE_METHOD(t_Boolean, compare, METH_VARARGS | METH_CLASS),
      DECLARE_METHOD(t_Boolean, compareTo, METH_O),
      DECLARE_METHOD(t_Boolean, equals, METH_VARARGS),
      DECLARE_METHOD(t_Boolean, getBoolean, METH_O | METH_CLASS),
      DECLARE_METHOD(t_Boolean, hashCode, METH_VARARGS),
      DECLARE_METHOD(t_Boolean, hashCode_, METH_O | METH_CLASS),
      DECLARE_METHOD(t_Boolean, logicalAnd, METH_VARARGS | METH_CLASS),
      DECLARE_METHOD(t_Boolean, logicalOr, METH_VARARGS | METH_CLASS),
      DECLARE_METHOD(t_Boolean, logicalXor, METH_VARARGS | METH_CLASS),
      DECLARE_METHOD(t_Boolean, parseBoolean, METH_O | METH_CLASS),
      DECLARE_METHOD(t_Boolean, toString, METH_VARARGS),
      DECLARE_METHOD(t_Boolean, toString_, METH_O | METH_CLASS),
      DECLARE_METHOD(t_Boolean, valueOf, METH_VARARGS | METH_CLASS),
      { NULL, NULL, 0, NULL }
    };

    static PyType_Slot PY_TYPE_SLOTS(Boolean)[] = {
      { Py_tp_methods, t_Boolean__methods_ },
      { Py_tp_init, (void *) t_Boolean_init_ },
      { 0, NULL }
    };

    static PyType_Def *PY_TYPE_BASES(Boolean)[] = {
      &PY_TYPE_DEF(::java::lang::Object),
      NULL
    };

    DEFINE_TYPE(Boolean, t_Boolean, Boolean);

    void t_Boolean::install(PyObject *module)
    {
      installType(&PY_TYPE(Boolean), &PY_TYPE_DEF(Boolean), module, "Boolean", 0);
    }

    void t_Boolean::initialize(PyObject *module)
    {
      PyObject_SetAttrString((PyObject *) PY_TYPE(Boolean), "class_", make_descriptor(Boolean::initializeClass, 1));
      PyObject_SetAttrString((PyObject *) PY_TYPE(Boolean), "wrapfn_", make_descriptor(unboxBoolean));
      PyObject_SetAttrString((PyObject *) PY_TYPE(Boolean), "boxfn_", make_descriptor(boxBoolean));
      env->getClass(Boolean::initializeClass);
      PyObject_SetAttrString((PyObject *) PY_TYPE(Boolean), "FALSE", make_descriptor(t_Boolean::wrap_Object(*Boolean::FALSE)));
      PyObject_SetAttrString((PyObject *) PY_TYPE(Boolean), "TRUE", make_descriptor(t_Boolean::wrap_Object(*Boolean::TRUE)));
      PyObject_SetAttrString((PyObject *) PY_TYPE(Boolean), "TYPE", make_descriptor(::java::lang::t_Class::wrap_Object(*Boolean::TYPE)));
    }

    static PyObject *t_Boolean_cast_(PyTypeObject *type, PyObject *arg)
    {
      if (!(arg = castCheck(arg, Boolean::initializeClass, 1)))
        return NULL;
      return t_Boolean::wrap_Object(Boolean(((t_Boolean *) arg)->object.this$));
    }
    static PyObject *t_Boolean_instance_(PyTypeObject *type, PyObject *arg)
    {
      if (!castCheck(arg, Boolean::initializeClass, 0))
        Py_RETURN_FALSE;
      Py_RETURN_TRUE;
    }

    static int t_Boolean_init_(t_Boolean *self, PyObject *args, PyObject *kwds)
    {
      switch (PyTuple_GET_SIZE(args)) {
       case 1:
        {
          ::java::lang::String a0((jobject) NULL);
          Boolean object((jobject) NULL);

          if (!parseArgs(args, "s", &a0))
          {
            INT_CALL(object = Boolean(a0));
            self->object = object;
            break;
          }
        }
        {
          jboolean a0;
          Boolean object((jobject) NULL);

          if (!parseArgs(args, "Z", &a0))
          {
            INT_CALL(object = Boolean(a0));
            self->object = object;
            break;
          }
        }
       default:
        PyErr_SetArgsError((PyObject *) self, "__init__", args);
        return -1;
      }

      return 0;
    }

    static PyObject *t_Boolean_booleanValue(t_Boolean *self)
    {
      jboolean result;
      OBJ_CALL(result = self->object.booleanValue());
      Py_RETURN_BOOL(result);
    }

    static PyObject *t_Boolean_compare(PyTypeObject *type, PyObject *args)
    {
      jboolean a0;
      jboolean a1;
      jint result;

      if (!parseArgs(args, "ZZ", &a0, &a1))
      {
        OBJ_CALL(result = ::java::lang::Boolean::compare(a0, a1));
        return PyLong_FromLong((long) result);
      }

      PyErr_SetArgsError(type, "compare", args);
      return NULL;
    }

    static PyObject *t_Boolean_compareTo(t_Boolean *self, PyObject *arg)
    {
      Boolean a0((jobject) NULL);
      jint result;

      if (!parseArg(arg, "O", ::java::lang::PY_TYPE(Boolean), &a0))
      {
        OBJ_CALL(result = self->object.compareTo(a0));
        return PyLong_FromLong((long) result);
      }

      PyErr_SetArgsError((PyObject *) self, "compareTo", arg);
      return NULL;
    }

    static PyObject *t_Boolean_equals(t_Boolean *self, PyObject *args)
    {
      ::java::lang::Object a0((jobject) NULL);
      jboolean result;

      if (!parseArgs(args, "o", &a0))
      {
        OBJ_CALL(result = self->object.equals(a0));
        Py_RETURN_BOOL(result);
      }

      return callSuper(PY_TYPE(Boolean), (PyObject *) self, "equals", args, 2);
    }

    static PyObject *t_Boolean_getBoolean(PyTypeObject *type, PyObject *arg)
    {
      ::java::lang::String a0((jobject) NULL);
      jboolean result;

      if (!parseArg(arg, "s", &a0))
      {
        OBJ_CALL(result = ::java::lang::Boolean::getBoolean(a0));
        Py_RETURN_BOOL(result);
      }

      PyErr_SetArgsError(type, "getBoolean", arg);
      return NULL;
    }

    static PyObject *t_Boolean_hashCode(t_Boolean *self, PyObject *args)
    {
      jint result;

      if (!parseArgs(args, ""))
      {
        OBJ_CALL(result = self->object.hashCode());
        return PyLong_FromLong((long) result);
      }

      return callSuper(PY_TYPE(Boolean), (PyObject *) self, "hashCode", args, 2);
    }

    static PyObject *t_Boolean_hashCode_(PyTypeObject *type, PyObject *args)
    {
      jboolean a0;
      jint result;

      if (!parseArgs(args, "Z", &a0))
      {
        OBJ_CALL(result = ::java::lang::Boolean::hashCode(a0));
        return PyLong_FromLong((long) result);
      }

      PyErr_SetArgsError(type, "hashCode_", args);
      return NULL;
    }

    static PyObject *t_Boolean_logicalAnd(PyTypeObject *type, PyObject *args)
    {
      jboolean a0;
      jboolean a1;
      jboolean result;

      if (!parseArgs(args, "ZZ", &a0, &a1))
      {
        OBJ_CALL(result = ::java::lang::Boolean::logicalAnd(a0, a1));
        Py_RETURN_BOOL(result);
      }

      PyErr_SetArgsError(type, "logicalAnd", args);
      return NULL;
    }

    static PyObject *t_Boolean_logicalOr(PyTypeObject *type, PyObject *args)
    {
      jboolean a0;
      jboolean a1;
      jboolean result;

      if (!parseArgs(args, "ZZ", &a0, &a1))
      {
        OBJ_CALL(result = ::java::lang::Boolean::logicalOr(a0, a1));
        Py_RETURN_BOOL(result);
      }

      PyErr_SetArgsError(type, "logicalOr", args);
      return NULL;
    }

    static PyObject *t_Boolean_logicalXor(PyTypeObject *type, PyObject *args)
    {
      jboolean a0;
      jboolean a1;
      jboolean result;

      if (!parseArgs(args, "ZZ", &a0, &a1))
      {
        OBJ_CALL(result = ::java::lang::Boolean::logicalXor(a0, a1));
        Py_RETURN_BOOL(result);
      }

      PyErr_SetArgsError(type, "logicalXor", args);
      return NULL;
    }

    static PyObject *t_Boolean_parseBoolean(PyTypeObject *type, PyObject *arg)
    {
      ::java::lang::String a0((jobject) NULL);
      jboolean result;

      if (!parseArg(arg, "s", &a0))
      {
        OBJ_CALL(result = ::java::lang::Boolean::parseBoolean(a0));
        Py_RETURN_BOOL(result);
      }

      PyErr_SetArgsError(type, "parseBoolean", arg);
      return NULL;
    }

    static PyObject *t_Boolean_toString(t_Boolean *self, PyObject *args)
    {
      ::java::lang::String result((jobject) NULL);

      if (!parseArgs(args, ""))
      {
        OBJ_CALL(result = self->object.toString());
        return j2p(result);
      }

      return callSuper(PY_TYPE(Boolean), (PyObject *) self, "toString", args, 2);
    }

    static PyObject *t_Boolean_toString_(PyTypeObject *type, PyObject *args)
    {
      jboolean a0;
      ::java::lang::String result((jobject) NULL);

      if (!parseArgs(args, "Z", &a0))
      {
        OBJ_CALL(result = ::java::lang::Boolean::toString(a0));
        return j2p(result);
      }

      PyErr_SetArgsError(type, "toString_", args);
      return NULL;
    }

    static PyObject *t_Boolean_valueOf(PyTypeObject *type, PyObject *args)
    {
      switch (PyTuple_GET_SIZE(args)) {
       case 1:
        {
          ::java::lang::String a0((jobject) NULL);
          Boolean result((jobject) NULL);

          if (!parseArgs(args, "s", &a0))
          {
            OBJ_CALL(result = ::java::lang::Boolean::valueOf(a0));
            return t_Boolean::wrap_Object(result);
          }
        }
        {
          jboolean a0;
          Boolean result((jobject) NULL);

          if (!parseArgs(args, "Z", &a0))
          {
            OBJ_CALL(result = ::java::lang::Boolean::valueOf(a0));
            return t_Boolean::wrap_Object(result);
          }
        }
      }

      PyErr_SetArgsError(type, "valueOf", args);
      return NULL;
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/geo/Point.h"
#include "java/lang/Object.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace geo {

        ::java::lang::Class *Point::class$ = NULL;
        jmethodID *Point::mids$ = NULL;
        bool Point::live$ = false;

        jclass Point::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/geo/Point");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_75a41c58a4d52f7d] = env->getMethodID(cls, "<init>", "(DD)V");
            mids$[mid_equals_8b72f2dcdde6fd1d] = env->getMethodID(cls, "equals", "(Ljava/lang/Object;)Z");
            mids$[mid_getLat_8c74b787998ce4bc] = env->getMethodID(cls, "getLat", "()D");
            mids$[mid_getLon_8c74b787998ce4bc] = env->getMethodID(cls, "getLon", "()D");
            mids$[mid_hashCode_9972fcc56b44e79d] = env->getMethodID(cls, "hashCode", "()I");
            mids$[mid_toString_db9b55ba01e03e4b] = env->getMethodID(cls, "toString", "()Ljava/lang/String;");
            mids$[mid_toComponent2D_6fe8ae19c34b6817] = env->getMethodID(cls, "toComponent2D", "()Lorg/apache/lucene/geo/Component2D;");

            class$ = new ::java::lang::Class(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        Point::Point(jdouble a0, jdouble a1) : ::org::apache::lucene::geo::LatLonGeometry(env->newObject(initializeClass, &mids$, mid_init$_75a41c58a4d52f7d, a0, a1)) {}

        jboolean Point::equals(const ::java::lang::Object & a0) const
        {
          return env->callBooleanMethod(this$, mids$[mid_equals_8b72f2dcdde6fd1d], a0.this$);
        }

        jdouble Point::getLat() const
        {
          return env->callDoubleMethod(this$, mids$[mid_getLat_8c74b787998ce4bc]);
        }

        jdouble Point::getLon() const
        {
          return env->callDoubleMethod(this$, mids$[mid_getLon_8c74b787998ce4bc]);
        }

        jint Point::hashCode() const
        {
          return env->callIntMethod(this$, mids$[mid_hashCode_9972fcc56b44e79d]);
        }

        ::java::lang::String Point::toString() const
        {
          return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_db9b55ba01e03e4b]));
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace geo {
        static PyObject *t_Point_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_Point_instance_(PyTypeObject *type, PyObject *arg);
        static int t_Point_init_(t_Point *self, PyObject *args, PyObject *kwds);
        static PyObject *t_Point_equals(t_Point *self, PyObject *args);
        static PyObject *t_Point_getLat(t_Point *self);
        static PyObject *t_Point_getLon(t_Point *self);
        static PyObject *t_Point_hashCode(t_Point *self, PyObject *args);
        static PyObject *t_Point_toString(t_Point *self, PyObject *args);
        static PyObject *t_Point_get__lat(t_Point *self, void *data);
        static PyObject *t_Point_get__lon(t_Point *self, void *data);
        static PyGetSetDef t_Point__fields_[] = {
          DECLARE_GET_FIELD(t_Point, lat),
          DECLARE_GET_FIELD(t_Point, lon),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_Point__methods_[] = {
          DECLARE_METHOD(t_Point, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_Point, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_Point, equals, METH_VARARGS),
          DECLARE_METHOD(t_Point, getLat, METH_NOARGS),
          DECLARE_METHOD(t_Point, getLon, METH_NOARGS),
          DECLARE_METHOD(t_Point, hashCode, METH_VARARGS),
          DECLARE_METHOD(t_Point, toString, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        static PyType_Slot PY_TYPE_SLOTS(Point)[] = {
          { Py_tp_methods, t_Point__methods_ },
          { Py_tp_init, (void *) t_Point_init_ },
          { Py_tp_getset, t_Point__fields_ },
          { 0, NULL }
        };

        static PyType_Def *PY_TYPE_BASES(Point)[] = {
          &PY_TYPE_DEF(::org::apache::lucene::geo::LatLonGeometry),
          NULL
        };

        DEFINE_TYPE(Point, t_Point, Point);

        void t_Point::install(PyObject *module)
        {
          installType(&PY_TYPE(Point), &PY_TYPE_DEF(Point), module, "Point", 0);
        }

        void t_Point::initialize(PyObject *module)
        {
          PyObject_SetAttrString((PyObject *) PY_TYPE(Point), "class_", make_descriptor(Point::initializeClass, 1));
          PyObject_SetAttrString((PyObject *) PY_TYPE(Point), "wrapfn_", make_descriptor(t_Point::wrap_jobject));
          PyObject_SetAttrString((PyObject *) PY_TYPE(Point), "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_Point_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, Point::initializeClass, 1)))
            return NULL;
          return t_Point::wrap_Object(Point(((t_Point *) arg)->object.this$));
        }
        static PyObject *t_Point_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, Point::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_Point_init_(t_Point *self, PyObject *args, PyObject *kwds)
        {
          jdouble a0;
          jdouble a1;
          Point object((jobject) NULL);

          if (!parseArgs(args, "DD", &a0, &a1))
          {
            INT_CALL(object = Point(a0, a1));
            self->object = object;
          }
          else
          {
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }

        static PyObject *t_Point_equals(t_Point *self, PyObject *args)
        {
          ::java::lang::Object a0((jobject) NULL);
          jboolean result;

          if (!parseArgs(args, "o", &a0))
          {
            OBJ_CALL(result = self->object.equals(a0));
            Py_RETURN_BOOL(result);
          }

          return callSuper(PY_TYPE(Point), (PyObject *) self, "equals", args, 2);
        }

        static PyObject *t_Point_getLat(t_Point *self)
        {
          jdouble result;
          OBJ_CALL(result = self->object.getLat());
          return PyFloat_FromDouble((double) result);
        }

        static PyObject *t_Point_getLon(t_Point *self)
        {
          jdouble result;
          OBJ_CALL(result = self->object.getLon());
          return PyFloat_FromDouble((double) result);
        }

        static PyObject *t_Point_hashCode(t_Point *self, PyObject *args)
        {
          jint result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.hashCode());
            return PyLong_FromLong((long) result);
          }

          return callSuper(PY_TYPE(Point), (PyObject *) self, "hashCode", args, 2);
        }

        static PyObject *t_Point_toString(t_Point *self, PyObject *args)
        {
          ::java::lang::String result((jobject) NULL);

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.toString());
            return j2p(result);
          }

          return callSuper(PY_TYPE(Point), (PyObject *) self, "toString", args, 2);
        }

        static PyObject *t_Point_get__lat(t_Point *self, void *data)
        {
          jdouble value;
          OBJ_CALL(value = self->object.getLat());
          return PyFloat_FromDouble((double) value);
        }

        static PyObject *t_Point_get__lon(t_Point *self, void *data)
        {
          jdouble value;
          OBJ_CALL(value = self->object.getLon());
          return PyFloat_FromDouble((double) value);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/facet/taxonomy/IntAssociationFacetField.h"
#include "org/apache/lucene/util/BytesRef.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace facet {
        namespace taxonomy {

          ::java::lang::Class *IntAssociationFacetField::class$ = NULL;
          jmethodID *IntAssociationFacetField::mids$ = NULL;
          bool IntAssociationFacetField::live$ = false;

          jclass IntAssociationFacetField::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/facet/taxonomy/IntAssociationFacetField");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_0b968c11f9149986] = env->getMethodID(cls, "<init>", "(ILjava/lang/String;[Ljava/lang/String;)V");
              mids$[mid_bytesRefToInt_1c2e5fa34f4312de] = env->getStaticMethodID(cls, "bytesRefToInt", "(Lorg/apache/lucene/util/BytesRef;)I");
              mids$[mid_intToBytesRef_83238e65a54c68bb] = env->getStaticMethodID(cls, "intToBytesRef", "(I)Lorg/apache/lucene/util/BytesRef;");
              mids$[mid_toString_db9b55ba01e03e4b] = env->getMethodID(cls, "toString", "()Ljava/lang/String;");

              class$ = new ::java::lang::Class(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          IntAssociationFacetField::IntAssociationFacetField(jint a0, const ::java::lang::String & a1, const JArray< ::java::lang::String > & a2) : ::org::apache::lucene::facet::taxonomy::AssociationFacetField(env->newObject(initializeClass, &mids$, mid_init$_0b968c11f9149986, a0, a1.this$, a2.this$)) {}

          jint IntAssociationFacetField::bytesRefToInt(const ::org::apache::lucene::util::BytesRef & a0)
          {
            jclass cls = env->getClass(initializeClass);
            return env->callStaticIntMethod(cls, mids$[mid_bytesRefToInt_1c2e5fa34f4312de], a0.this$);
          }

          ::org::apache::lucene::util::BytesRef IntAssociationFacetField::intToBytesRef(jint a0)
          {
            jclass cls = env->getClass(initializeClass);
            return ::org::apache::lucene::util::BytesRef(env->callStaticObjectMethod(cls, mids$[mid_intToBytesRef_83238e65a54c68bb], a0));
          }

          ::java::lang::String IntAssociationFacetField::toString() const
          {
            return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_db9b55ba01e03e4b]));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace facet {
        namespace taxonomy {
          static PyObject *t_IntAssociationFacetField_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_IntAssociationFacetField_instance_(PyTypeObject *type, PyObject *arg);
          static int t_IntAssociationFacetField_init_(t_IntAssociationFacetField *self, PyObject *args, PyObject *kwds);
          static PyObject *t_IntAssociationFacetField_bytesRefToInt(PyTypeObject *type, PyObject *arg);
          static PyObject *t_IntAssociationFacetField_intToBytesRef(PyTypeObject *type, PyObject *arg);
          static PyObject *t_IntAssociationFacetField_toString(t_IntAssociationFacetField *self, PyObject *args);

          static PyMethodDef t_IntAssociationFacetField__methods_[] = {
            DECLARE_METHOD(t_IntAssociationFacetField, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_IntAssociationFacetField, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_IntAssociationFacetField, bytesRefToInt, METH_O | METH_CLASS),
            DECLARE_METHOD(t_IntAssociationFacetField, intToBytesRef, METH_O | METH_CLASS),
            DECLARE_METHOD(t_IntAssociationFacetField, toString, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          static PyType_Slot PY_TYPE_SLOTS(IntAssociationFacetField)[] = {
            { Py_tp_methods, t_IntAssociationFacetField__methods_ },
            { Py_tp_init, (void *) t_IntAssociationFacetField_init_ },
            { 0, NULL }
          };

          static PyType_Def *PY_TYPE_BASES(IntAssociationFacetField)[] = {
            &PY_TYPE_DEF(::org::apache::lucene::facet::taxonomy::AssociationFacetField),
            NULL
          };

          DEFINE_TYPE(IntAssociationFacetField, t_IntAssociationFacetField, IntAssociationFacetField);

          void t_IntAssociationFacetField::install(PyObject *module)
          {
            installType(&PY_TYPE(IntAssociationFacetField), &PY_TYPE_DEF(IntAssociationFacetField), module, "IntAssociationFacetField", 0);
          }

          void t_IntAssociationFacetField::initialize(PyObject *module)
          {
            PyObject_SetAttrString((PyObject *) PY_TYPE(IntAssociationFacetField), "class_", make_descriptor(IntAssociationFacetField::initializeClass, 1));
            PyObject_SetAttrString((PyObject *) PY_TYPE(IntAssociationFacetField), "wrapfn_", make_descriptor(t_IntAssociationFacetField::wrap_jobject));
            PyObject_SetAttrString((PyObject *) PY_TYPE(IntAssociationFacetField), "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_IntAssociationFacetField_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, IntAssociationFacetField::initializeClass, 1)))
              return NULL;
            return t_IntAssociationFacetField::wrap_Object(IntAssociationFacetField(((t_IntAssociationFacetField *) arg)->object.this$));
          }
          static PyObject *t_IntAssociationFacetField_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, IntAssociationFacetField::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_IntAssociationFacetField_init_(t_IntAssociationFacetField *self, PyObject *args, PyObject *kwds)
          {
            jint a0;
            ::java::lang::String a1((jobject) NULL);
            JArray< ::java::lang::String > a2((jobject) NULL);
            IntAssociationFacetField object((jobject) NULL);

            if (!parseArgs(args, "Is[s", &a0, &a1, &a2))
            {
              INT_CALL(object = IntAssociationFacetField(a0, a1, a2));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_IntAssociationFacetField_bytesRefToInt(PyTypeObject *type, PyObject *arg)
          {
            ::org::apache::lucene::util::BytesRef a0((jobject) NULL);
            jint result;

            if (!parseArg(arg, "k", ::org::apache::lucene::util::BytesRef::initializeClass, &a0))
            {
              OBJ_CALL(result = ::org::apache::lucene::facet::taxonomy::IntAssociationFacetField::bytesRefToInt(a0));
              return PyLong_FromLong((long) result);
            }

            PyErr_SetArgsError(type, "bytesRefToInt", arg);
            return NULL;
          }

          static PyObject *t_IntAssociationFacetField_intToBytesRef(PyTypeObject *type, PyObject *arg)
          {
            jint a0;
            ::org::apache::lucene::util::BytesRef result((jobject) NULL);

            if (!parseArg(arg, "I", &a0))
            {
              OBJ_CALL(result = ::org::apache::lucene::facet::taxonomy::IntAssociationFacetField::intToBytesRef(a0));
              return ::org::apache::lucene::util::t_BytesRef::wrap_Object(result);
            }

            PyErr_SetArgsError(type, "intToBytesRef", arg);
            return NULL;
          }

          static PyObject *t_IntAssociationFacetField_toString(t_IntAssociationFacetField *self, PyObject *args)
          {
            ::java::lang::String result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.toString());
              return j2p(result);
            }

            return callSuper(PY_TYPE(IntAssociationFacetField), (PyObject *) self, "toString", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/codecs/compressing/Compressor.h"
#include "java/io/IOException.h"
#include "java/io/Closeable.h"
#include "org/apache/lucene/store/DataOutput.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace codecs {
        namespace compressing {

          ::java::lang::Class *Compressor::class$ = NULL;
          jmethodID *Compressor::mids$ = NULL;
          bool Compressor::live$ = false;

          jclass Compressor::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/codecs/compressing/Compressor");

              mids$ = new jmethodID[max_mid];
              mids$[mid_compress_734992c6e1bace7e] = env->getMethodID(cls, "compress", "([BIILorg/apache/lucene/store/DataOutput;)V");

              class$ = new ::java::lang::Class(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          void Compressor::compress(const JArray< jbyte > & a0, jint a1, jint a2, const ::org::apache::lucene::store::DataOutput & a3) const
          {
            env->callVoidMethod(this$, mids$[mid_compress_734992c6e1bace7e], a0.this$, a1, a2, a3.this$);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace codecs {
        namespace compressing {
          static PyObject *t_Compressor_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_Compressor_instance_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_Compressor_compress(t_Compressor *self, PyObject *args);

          static PyMethodDef t_Compressor__methods_[] = {
            DECLARE_METHOD(t_Compressor, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_Compressor, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_Compressor, compress, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          static PyType_Slot PY_TYPE_SLOTS(Compressor)[] = {
            { Py_tp_methods, t_Compressor__methods_ },
            { Py_tp_init, (void *) abstract_init },
            { 0, NULL }
          };

          static PyType_Def *PY_TYPE_BASES(Compressor)[] = {
            &PY_TYPE_DEF(::java::lang::Object),
            NULL
          };

          DEFINE_TYPE(Compressor, t_Compressor, Compressor);

          void t_Compressor::install(PyObject *module)
          {
            installType(&PY_TYPE(Compressor), &PY_TYPE_DEF(Compressor), module, "Compressor", 0);
          }

          void t_Compressor::initialize(PyObject *module)
          {
            PyObject_SetAttrString((PyObject *) PY_TYPE(Compressor), "class_", make_descriptor(Compressor::initializeClass, 1));
            PyObject_SetAttrString((PyObject *) PY_TYPE(Compressor), "wrapfn_", make_descriptor(t_Compressor::wrap_jobject));
            PyObject_SetAttrString((PyObject *) PY_TYPE(Compressor), "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_Compressor_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, Compressor::initializeClass, 1)))
              return NULL;
            return t_Compressor::wrap_Object(Compressor(((t_Compressor *) arg)->object.this$));
          }
          static PyObject *t_Compressor_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, Compressor::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static PyObject *t_Compressor_compress(t_Compressor *self, PyObject *args)
          {
            JArray< jbyte > a0((jobject) NULL);
            jint a1;
            jint a2;
            ::org::apache::lucene::store::DataOutput a3((jobject) NULL);

            if (!parseArgs(args, "[BIIk", ::org::apache::lucene::store::DataOutput::initializeClass, &a0, &a1, &a2, &a3))
            {
              OBJ_CALL(self->object.compress(a0, a1, a2, a3));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError((PyObject *) self, "compress", args);
            return NULL;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/compound/DictionaryCompoundWordTokenFilter.h"
#include "org/apache/lucene/analysis/CharArraySet.h"
#include "org/apache/lucene/analysis/TokenStream.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace compound {

          ::java::lang::Class *DictionaryCompoundWordTokenFilter::class$ = NULL;
          jmethodID *DictionaryCompoundWordTokenFilter::mids$ = NULL;
          bool DictionaryCompoundWordTokenFilter::live$ = false;

          jclass DictionaryCompoundWordTokenFilter::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/compound/DictionaryCompoundWordTokenFilter");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_85e689f6ceab32ee] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/analysis/TokenStream;Lorg/apache/lucene/analysis/CharArraySet;)V");
              mids$[mid_init$_6f2545eb67a94f28] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/analysis/TokenStream;Lorg/apache/lucene/analysis/CharArraySet;IIIZ)V");
              mids$[mid_decompose_f2cc1bce94666404] = env->getMethodID(cls, "decompose", "()V");

              class$ = new ::java::lang::Class(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          DictionaryCompoundWordTokenFilter::DictionaryCompoundWordTokenFilter(const ::org::apache::lucene::analysis::TokenStream & a0, const ::org::apache::lucene::analysis::CharArraySet & a1) : ::org::apache::lucene::analysis::compound::CompoundWordTokenFilterBase(env->newObject(initializeClass, &mids$, mid_init$_85e689f6ceab32ee, a0.this$, a1.this$)) {}

          DictionaryCompoundWordTokenFilter::DictionaryCompoundWordTokenFilter(const ::org::apache::lucene::analysis::TokenStream & a0, const ::org::apache::lucene::analysis::CharArraySet & a1, jint a2, jint a3, jint a4, jboolean a5) : ::org::apache::lucene::analysis::compound::CompoundWordTokenFilterBase(env->newObject(initializeClass, &mids$, mid_init$_6f2545eb67a94f28, a0.this$, a1.this$, a2, a3, a4, a5)) {}
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace compound {
          static PyObject *t_DictionaryCompoundWordTokenFilter_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_DictionaryCompoundWordTokenFilter_instance_(PyTypeObject *type, PyObject *arg);
          static int t_DictionaryCompoundWordTokenFilter_init_(t_DictionaryCompoundWordTokenFilter *self, PyObject *args, PyObject *kwds);

          static PyMethodDef t_DictionaryCompoundWordTokenFilter__methods_[] = {
            DECLARE_METHOD(t_DictionaryCompoundWordTokenFilter, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_DictionaryCompoundWordTokenFilter, instance_, METH_O | METH_CLASS),
            { NULL, NULL, 0, NULL }
          };

          static PyType_Slot PY_TYPE_SLOTS(DictionaryCompoundWordTokenFilter)[] = {
            { Py_tp_methods, t_DictionaryCompoundWordTokenFilter__methods_ },
            { Py_tp_init, (void *) t_DictionaryCompoundWordTokenFilter_init_ },
            { 0, NULL }
          };

          static PyType_Def *PY_TYPE_BASES(DictionaryCompoundWordTokenFilter)[] = {
            &PY_TYPE_DEF(::org::apache::lucene::analysis::compound::CompoundWordTokenFilterBase),
            NULL
          };

          DEFINE_TYPE(DictionaryCompoundWordTokenFilter, t_DictionaryCompoundWordTokenFilter, DictionaryCompoundWordTokenFilter);

          void t_DictionaryCompoundWordTokenFilter::install(PyObject *module)
          {
            installType(&PY_TYPE(DictionaryCompoundWordTokenFilter), &PY_TYPE_DEF(DictionaryCompoundWordTokenFilter), module, "DictionaryCompoundWordTokenFilter", 0);
          }

          void t_DictionaryCompoundWordTokenFilter::initialize(PyObject *module)
          {
            PyObject_SetAttrString((PyObject *) PY_TYPE(DictionaryCompoundWordTokenFilter), "class_", make_descriptor(DictionaryCompoundWordTokenFilter::initializeClass, 1));
            PyObject_SetAttrString((PyObject *) PY_TYPE(DictionaryCompoundWordTokenFilter), "wrapfn_", make_descriptor(t_DictionaryCompoundWordTokenFilter::wrap_jobject));
            PyObject_SetAttrString((PyObject *) PY_TYPE(DictionaryCompoundWordTokenFilter), "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_DictionaryCompoundWordTokenFilter_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, DictionaryCompoundWordTokenFilter::initializeClass, 1)))
              return NULL;
            return t_DictionaryCompoundWordTokenFilter::wrap_Object(DictionaryCompoundWordTokenFilter(((t_DictionaryCompoundWordTokenFilter *) arg)->object.this$));
          }
          static PyObject *t_DictionaryCompoundWordTokenFilter_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, DictionaryCompoundWordTokenFilter::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_DictionaryCompoundWordTokenFilter_init_(t_DictionaryCompoundWordTokenFilter *self, PyObject *args, PyObject *kwds)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 2:
              {
                ::org::apache::lucene::analysis::TokenStream a0((jobject) NULL);
                ::org::apache::lucene::analysis::CharArraySet a1((jobject) NULL);
                PyTypeObject **p1;
                DictionaryCompoundWordTokenFilter object((jobject) NULL);

                if (!parseArgs(args, "kK", ::org::apache::lucene::analysis::TokenStream::initializeClass, ::org::apache::lucene::analysis::CharArraySet::initializeClass, &a0, &a1, &p1, ::org::apache::lucene::analysis::t_CharArraySet::parameters_))
                {
                  INT_CALL(object = DictionaryCompoundWordTokenFilter(a0, a1));
                  self->object = object;
                  break;
                }
              }
              goto err;
             case 6:
              {
                ::org::apache::lucene::analysis::TokenStream a0((jobject) NULL);
                ::org::apache::lucene::analysis::CharArraySet a1((jobject) NULL);
                PyTypeObject **p1;
                jint a2;
                jint a3;
                jint a4;
                jboolean a5;
                DictionaryCompoundWordTokenFilter object((jobject) NULL);

                if (!parseArgs(args, "kKIIIZ", ::org::apache::lucene::analysis::TokenStream::initializeClass, ::org::apache::lucene::analysis::CharArraySet::initializeClass, &a0, &a1, &p1, ::org::apache::lucene::analysis::t_CharArraySet::parameters_, &a2, &a3, &a4, &a5))
                {
                  INT_CALL(object = DictionaryCompoundWordTokenFilter(a0, a1, a2, a3, a4, a5));
                  self->object = object;
                  break;
                }
              }
             default:
             err:
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/util/NotDocIdSet.h"
#include "org/apache/lucene/util/Bits.h"
#include "java/lang/Class.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/search/DocIdSetIterator.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {

        ::java::lang::Class *NotDocIdSet::class$ = NULL;
        jmethodID *NotDocIdSet::mids$ = NULL;
        bool NotDocIdSet::live$ = false;

        jclass NotDocIdSet::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/util/NotDocIdSet");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_426e44660b12c617] = env->getMethodID(cls, "<init>", "(ILorg/apache/lucene/search/DocIdSet;)V");
            mids$[mid_bits_ad87da2b626b21cf] = env->getMethodID(cls, "bits", "()Lorg/apache/lucene/util/Bits;");
            mids$[mid_iterator_173d81d7b8f93882] = env->getMethodID(cls, "iterator", "()Lorg/apache/lucene/search/DocIdSetIterator;");
            mids$[mid_ramBytesUsed_2e5ae9edcb9b072f] = env->getMethodID(cls, "ramBytesUsed", "()J");

            class$ = new ::java::lang::Class(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        NotDocIdSet::NotDocIdSet(jint a0, const ::org::apache::lucene::search::DocIdSet & a1) : ::org::apache::lucene::search::DocIdSet(env->newObject(initializeClass, &mids$, mid_init$_426e44660b12c617, a0, a1.this$)) {}

        ::org::apache::lucene::util::Bits NotDocIdSet::bits() const
        {
          return ::org::apache::lucene::util::Bits(env->callObjectMethod(this$, mids$[mid_bits_ad87da2b626b21cf]));
        }

        ::org::apache::lucene::search::DocIdSetIterator NotDocIdSet::iterator() const
        {
          return ::org::apache::lucene::search::DocIdSetIterator(env->callObjectMethod(this$, mids$[mid_iterator_173d81d7b8f93882]));
        }

        jlong NotDocIdSet::ramBytesUsed() const
        {
          return env->callLongMethod(this$, mids$[mid_ramBytesUsed_2e5ae9edcb9b072f]);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        static PyObject *t_NotDocIdSet_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_NotDocIdSet_instance_(PyTypeObject *type, PyObject *arg);
        static int t_NotDocIdSet_init_(t_NotDocIdSet *self, PyObject *args, PyObject *kwds);
        static PyObject *t_NotDocIdSet_bits(t_NotDocIdSet *self, PyObject *args);
        static PyObject *t_NotDocIdSet_iterator(t_NotDocIdSet *self, PyObject *args);
        static PyObject *t_NotDocIdSet_ramBytesUsed(t_NotDocIdSet *self, PyObject *args);

        static PyMethodDef t_NotDocIdSet__methods_[] = {
          DECLARE_METHOD(t_NotDocIdSet, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_NotDocIdSet, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_NotDocIdSet, bits, METH_VARARGS),
          DECLARE_METHOD(t_NotDocIdSet, iterator, METH_VARARGS),
          DECLARE_METHOD(t_NotDocIdSet, ramBytesUsed, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        static PyType_Slot PY_TYPE_SLOTS(NotDocIdSet)[] = {
          { Py_tp_methods, t_NotDocIdSet__methods_ },
          { Py_tp_init, (void *) t_NotDocIdSet_init_ },
          { 0, NULL }
        };

        static PyType_Def *PY_TYPE_BASES(NotDocIdSet)[] = {
          &PY_TYPE_DEF(::org::apache::lucene::search::DocIdSet),
          NULL
        };

        DEFINE_TYPE(NotDocIdSet, t_NotDocIdSet, NotDocIdSet);

        void t_NotDocIdSet::install(PyObject *module)
        {
          installType(&PY_TYPE(NotDocIdSet), &PY_TYPE_DEF(NotDocIdSet), module, "NotDocIdSet", 0);
        }

        void t_NotDocIdSet::initialize(PyObject *module)
        {
          PyObject_SetAttrString((PyObject *) PY_TYPE(NotDocIdSet), "class_", make_descriptor(NotDocIdSet::initializeClass, 1));
          PyObject_SetAttrString((PyObject *) PY_TYPE(NotDocIdSet), "wrapfn_", make_descriptor(t_NotDocIdSet::wrap_jobject));
          PyObject_SetAttrString((PyObject *) PY_TYPE(NotDocIdSet), "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_NotDocIdSet_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, NotDocIdSet::initializeClass, 1)))
            return NULL;
          return t_NotDocIdSet::wrap_Object(NotDocIdSet(((t_NotDocIdSet *) arg)->object.this$));
        }
        static PyObject *t_NotDocIdSet_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, NotDocIdSet::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_NotDocIdSet_init_(t_NotDocIdSet *self, PyObject *args, PyObject *kwds)
        {
          jint a0;
          ::org::apache::lucene::search::DocIdSet a1((jobject) NULL);
          NotDocIdSet object((jobject) NULL);

          if (!parseArgs(args, "Ik", ::org::apache::lucene::search::DocIdSet::initializeClass, &a0, &a1))
          {
            INT_CALL(object = NotDocIdSet(a0, a1));
            self->object = object;
          }
          else
          {
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }

        static PyObject *t_NotDocIdSet_bits(t_NotDocIdSet *self, PyObject *args)
        {
          ::org::apache::lucene::util::Bits result((jobject) NULL);

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.bits());
            return ::org::apache::lucene::util::t_Bits::wrap_Object(result);
          }

          return callSuper(PY_TYPE(NotDocIdSet), (PyObject *) self, "bits", args, 2);
        }

        static PyObject *t_NotDocIdSet_iterator(t_NotDocIdSet *self, PyObject *args)
        {
          ::org::apache::lucene::search::DocIdSetIterator result((jobject) NULL);

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.iterator());
            return ::org::apache::lucene::search::t_DocIdSetIterator::wrap_Object(result);
          }

          return callSuper(PY_TYPE(NotDocIdSet), (PyObject *) self, "iterator", args, 2);
        }

        static PyObject *t_NotDocIdSet_ramBytesUsed(t_NotDocIdSet *self, PyObject *args)
        {
          jlong result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.ramBytesUsed());
            return PyLong_FromLongLong((PY_LONG_LONG) result);
          }

          return callSuper(PY_TYPE(NotDocIdSet), (PyObject *) self, "ramBytesUsed", args, 2);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/ckb/SoraniStemmer.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace ckb {

          ::java::lang::Class *SoraniStemmer::class$ = NULL;
          jmethodID *SoraniStemmer::mids$ = NULL;
          bool SoraniStemmer::live$ = false;

          jclass SoraniStemmer::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/ckb/SoraniStemmer");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_f2cc1bce94666404] = env->getMethodID(cls, "<init>", "()V");
              mids$[mid_stem_d4655f2a19359017] = env->getMethodID(cls, "stem", "([CI)I");

              class$ = new ::java::lang::Class(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          SoraniStemmer::SoraniStemmer() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_f2cc1bce94666404)) {}

          jint SoraniStemmer::stem(const JArray< jchar > & a0, jint a1) const
          {
            return env->callIntMethod(this$, mids$[mid_stem_d4655f2a19359017], a0.this$, a1);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace ckb {
          static PyObject *t_SoraniStemmer_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_SoraniStemmer_instance_(PyTypeObject *type, PyObject *arg);
          static int t_SoraniStemmer_init_(t_SoraniStemmer *self, PyObject *args, PyObject *kwds);
          static PyObject *t_SoraniStemmer_stem(t_SoraniStemmer *self, PyObject *args);

          static PyMethodDef t_SoraniStemmer__methods_[] = {
            DECLARE_METHOD(t_SoraniStemmer, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_SoraniStemmer, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_SoraniStemmer, stem, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          static PyType_Slot PY_TYPE_SLOTS(SoraniStemmer)[] = {
            { Py_tp_methods, t_SoraniStemmer__methods_ },
            { Py_tp_init, (void *) t_SoraniStemmer_init_ },
            { 0, NULL }
          };

          static PyType_Def *PY_TYPE_BASES(SoraniStemmer)[] = {
            &PY_TYPE_DEF(::java::lang::Object),
            NULL
          };

          DEFINE_TYPE(SoraniStemmer, t_SoraniStemmer, SoraniStemmer);

          void t_SoraniStemmer::install(PyObject *module)
          {
            installType(&PY_TYPE(SoraniStemmer), &PY_TYPE_DEF(SoraniStemmer), module, "SoraniStemmer", 0);
          }

          void t_SoraniStemmer::initialize(PyObject *module)
          {
            PyObject_SetAttrString((PyObject *) PY_TYPE(SoraniStemmer), "class_", make_descriptor(SoraniStemmer::initializeClass, 1));
            PyObject_SetAttrString((PyObject *) PY_TYPE(SoraniStemmer), "wrapfn_", make_descriptor(t_SoraniStemmer::wrap_jobject));
            PyObject_SetAttrString((PyObject *) PY_TYPE(SoraniStemmer), "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_SoraniStemmer_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, SoraniStemmer::initializeClass, 1)))
              return NULL;
            return t_SoraniStemmer::wrap_Object(SoraniStemmer(((t_SoraniStemmer *) arg)->object.this$));
          }
          static PyObject *t_SoraniStemmer_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, SoraniStemmer::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_SoraniStemmer_init_(t_SoraniStemmer *self, PyObject *args, PyObject *kwds)
          {
            SoraniStemmer object((jobject) NULL);

            INT_CALL(object = SoraniStemmer());
            self->object = object;

            return 0;
          }

          static PyObject *t_SoraniStemmer_stem(t_SoraniStemmer *self, PyObject *args)
          {
            JArray< jchar > a0((jobject) NULL);
            jint a1;
            jint result;

            if (!parseArgs(args, "[CI", &a0, &a1))
            {
              OBJ_CALL(result = self->object.stem(a0, a1));
              return PyLong_FromLong((long) result);
            }

            PyErr_SetArgsError((PyObject *) self, "stem", args);
            return NULL;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/index/NoDeletionPolicy.h"
#include "java/util/List.h"
#include "org/apache/lucene/index/IndexCommit.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {

        ::java::lang::Class *NoDeletionPolicy::class$ = NULL;
        jmethodID *NoDeletionPolicy::mids$ = NULL;
        bool NoDeletionPolicy::live$ = false;
        ::org::apache::lucene::index::IndexDeletionPolicy *NoDeletionPolicy::INSTANCE = NULL;

        jclass NoDeletionPolicy::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/index/NoDeletionPolicy");

            mids$ = new jmethodID[max_mid];
            mids$[mid_onCommit_d03990be0130160d] = env->getMethodID(cls, "onCommit", "(Ljava/util/List;)V");
            mids$[mid_onInit_d03990be0130160d] = env->getMethodID(cls, "onInit", "(Ljava/util/List;)V");

            class$ = new ::java::lang::Class(cls);
            cls = (jclass) class$->this$;

            INSTANCE = new ::org::apache::lucene::index::IndexDeletionPolicy(env->getStaticObjectField(cls, "INSTANCE", "Lorg/apache/lucene/index/IndexDeletionPolicy;"));
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        void NoDeletionPolicy::onCommit(const ::java::util::List & a0) const
        {
          env->callVoidMethod(this$, mids$[mid_onCommit_d03990be0130160d], a0.this$);
        }

        void NoDeletionPolicy::onInit(const ::java::util::List & a0) const
        {
          env->callVoidMethod(this$, mids$[mid_onInit_d03990be0130160d], a0.this$);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {
        static PyObject *t_NoDeletionPolicy_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_NoDeletionPolicy_instance_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_NoDeletionPolicy_onCommit(t_NoDeletionPolicy *self, PyObject *args);
        static PyObject *t_NoDeletionPolicy_onInit(t_NoDeletionPolicy *self, PyObject *args);

        static PyMethodDef t_NoDeletionPolicy__methods_[] = {
          DECLARE_METHOD(t_NoDeletionPolicy, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_NoDeletionPolicy, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_NoDeletionPolicy, onCommit, METH_VARARGS),
          DECLARE_METHOD(t_NoDeletionPolicy, onInit, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        static PyType_Slot PY_TYPE_SLOTS(NoDeletionPolicy)[] = {
          { Py_tp_methods, t_NoDeletionPolicy__methods_ },
          { Py_tp_init, (void *) abstract_init },
          { 0, NULL }
        };

        static PyType_Def *PY_TYPE_BASES(NoDeletionPolicy)[] = {
          &PY_TYPE_DEF(::org::apache::lucene::index::IndexDeletionPolicy),
          NULL
        };

        DEFINE_TYPE(NoDeletionPolicy, t_NoDeletionPolicy, NoDeletionPolicy);

        void t_NoDeletionPolicy::install(PyObject *module)
        {
          installType(&PY_TYPE(NoDeletionPolicy), &PY_TYPE_DEF(NoDeletionPolicy), module, "NoDeletionPolicy", 0);
        }

        void t_NoDeletionPolicy::initialize(PyObject *module)
        {
          PyObject_SetAttrString((PyObject *) PY_TYPE(NoDeletionPolicy), "class_", make_descriptor(NoDeletionPolicy::initializeClass, 1));
          PyObject_SetAttrString((PyObject *) PY_TYPE(NoDeletionPolicy), "wrapfn_", make_descriptor(t_NoDeletionPolicy::wrap_jobject));
          PyObject_SetAttrString((PyObject *) PY_TYPE(NoDeletionPolicy), "boxfn_", make_descriptor(boxObject));
          env->getClass(NoDeletionPolicy::initializeClass);
          PyObject_SetAttrString((PyObject *) PY_TYPE(NoDeletionPolicy), "INSTANCE", make_descriptor(::org::apache::lucene::index::t_IndexDeletionPolicy::wrap_Object(*NoDeletionPolicy::INSTANCE)));
        }

        static PyObject *t_NoDeletionPolicy_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, NoDeletionPolicy::initializeClass, 1)))
            return NULL;
          return t_NoDeletionPolicy::wrap_Object(NoDeletionPolicy(((t_NoDeletionPolicy *) arg)->object.this$));
        }
        static PyObject *t_NoDeletionPolicy_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, NoDeletionPolicy::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static PyObject *t_NoDeletionPolicy_onCommit(t_NoDeletionPolicy *self, PyObject *args)
        {
          ::java::util::List a0((jobject) NULL);
          PyTypeObject **p0;

          if (!parseArgs(args, "K", ::java::util::List::initializeClass, &a0, &p0, ::java::util::t_List::parameters_))
          {
            OBJ_CALL(self->object.onCommit(a0));
            Py_RETURN_NONE;
          }

          return callSuper(PY_TYPE(NoDeletionPolicy), (PyObject *) self, "onCommit", args, 2);
        }

        static PyObject *t_NoDeletionPolicy_onInit(t_NoDeletionPolicy *self, PyObject *args)
        {
          ::java::util::List a0((jobject) NULL);
          PyTypeObject **p0;

          if (!parseArgs(args, "K", ::java::util::List::initializeClass, &a0, &p0, ::java::util::t_List::parameters_))
          {
            OBJ_CALL(self->object.onInit(a0));
            Py_RETURN_NONE;
          }

          return callSuper(PY_TYPE(NoDeletionPolicy), (PyObject *) self, "onInit", args, 2);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/hi/HindiStemmer.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace hi {

          ::java::lang::Class *HindiStemmer::class$ = NULL;
          jmethodID *HindiStemmer::mids$ = NULL;
          bool HindiStemmer::live$ = false;

          jclass HindiStemmer::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/hi/HindiStemmer");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_f2cc1bce94666404] = env->getMethodID(cls, "<init>", "()V");
              mids$[mid_stem_d4655f2a19359017] = env->getMethodID(cls, "stem", "([CI)I");

              class$ = new ::java::lang::Class(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          HindiStemmer::HindiStemmer() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_f2cc1bce94666404)) {}

          jint HindiStemmer::stem(const JArray< jchar > & a0, jint a1) const
          {
            return env->callIntMethod(this$, mids$[mid_stem_d4655f2a19359017], a0.this$, a1);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace hi {
          static PyObject *t_HindiStemmer_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_HindiStemmer_instance_(PyTypeObject *type, PyObject *arg);
          static int t_HindiStemmer_init_(t_HindiStemmer *self, PyObject *args, PyObject *kwds);
          static PyObject *t_HindiStemmer_stem(t_HindiStemmer *self, PyObject *args);

          static PyMethodDef t_HindiStemmer__methods_[] = {
            DECLARE_METHOD(t_HindiStemmer, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_HindiStemmer, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_HindiStemmer, stem, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          static PyType_Slot PY_TYPE_SLOTS(HindiStemmer)[] = {
            { Py_tp_methods, t_HindiStemmer__methods_ },
            { Py_tp_init, (void *) t_HindiStemmer_init_ },
            { 0, NULL }
          };

          static PyType_Def *PY_TYPE_BASES(HindiStemmer)[] = {
            &PY_TYPE_DEF(::java::lang::Object),
            NULL
          };

          DEFINE_TYPE(HindiStemmer, t_HindiStemmer, HindiStemmer);

          void t_HindiStemmer::install(PyObject *module)
          {
            installType(&PY_TYPE(HindiStemmer), &PY_TYPE_DEF(HindiStemmer), module, "HindiStemmer", 0);
          }

          void t_HindiStemmer::initialize(PyObject *module)
          {
            PyObject_SetAttrString((PyObject *) PY_TYPE(HindiStemmer), "class_", make_descriptor(HindiStemmer::initializeClass, 1));
            PyObject_SetAttrString((PyObject *) PY_TYPE(HindiStemmer), "wrapfn_", make_descriptor(t_HindiStemmer::wrap_jobject));
            PyObject_SetAttrString((PyObject *) PY_TYPE(HindiStemmer), "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_HindiStemmer_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, HindiStemmer::initializeClass, 1)))
              return NULL;
            return t_HindiStemmer::wrap_Object(HindiStemmer(((t_HindiStemmer *) arg)->object.this$));
          }
          static PyObject *t_HindiStemmer_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, HindiStemmer::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_HindiStemmer_init_(t_HindiStemmer *self, PyObject *args, PyObject *kwds)
          {
            HindiStemmer object((jobject) NULL);

            INT_CALL(object = HindiStemmer());
            self->object = object;

            return 0;
          }

          static PyObject *t_HindiStemmer_stem(t_HindiStemmer *self, PyObject *args)
          {
            JArray< jchar > a0((jobject) NULL);
            jint a1;
            jint result;

            if (!parseArgs(args, "[CI", &a0, &a1))
            {
              OBJ_CALL(result = self->object.stem(a0, a1));
              return PyLong_FromLong((long) result);
            }

            PyErr_SetArgsError((PyObject *) self, "stem", args);
            return NULL;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/synonym/SynonymMap.h"
#include "org/apache/lucene/util/fst/FST.h"
#include "org/apache/lucene/util/BytesRef.h"
#include "org/apache/lucene/util/BytesRefHash.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace synonym {

          ::java::lang::Class *SynonymMap::class$ = NULL;
          jmethodID *SynonymMap::mids$ = NULL;
          jfieldID *SynonymMap::fids$ = NULL;
          bool SynonymMap::live$ = false;
          jchar SynonymMap::WORD_SEPARATOR = (jchar) 0;

          jclass SynonymMap::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/synonym/SynonymMap");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_b1cacf18f5cd8f9e] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/util/fst/FST;Lorg/apache/lucene/util/BytesRefHash;I)V");

              fids$ = new jfieldID[max_fid];
              fids$[fid_fst] = env->getFieldID(cls, "fst", "Lorg/apache/lucene/util/fst/FST;");
              fids$[fid_maxHorizontalContext] = env->getFieldID(cls, "maxHorizontalContext", "I");
              fids$[fid_words] = env->getFieldID(cls, "words", "Lorg/apache/lucene/util/BytesRefHash;");

              class$ = new ::java::lang::Class(cls);
              cls = (jclass) class$->this$;

              WORD_SEPARATOR = env->getStaticCharField(cls, "WORD_SEPARATOR");
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          SynonymMap::SynonymMap(const ::org::apache::lucene::util::fst::FST & a0, const ::org::apache::lucene::util::BytesRefHash & a1, jint a2) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_b1cacf18f5cd8f9e, a0.this$, a1.this$, a2)) {}

          ::org::apache::lucene::util::fst::FST SynonymMap::_get_fst() const
          {
            return ::org::apache::lucene::util::fst::FST(env->getObjectField(this$, fids$[fid_fst]));
          }

          jint SynonymMap::_get_maxHorizontalContext() const
          {
            return env->getIntField(this$, fids$[fid_maxHorizontalContext]);
          }

          ::org::apache::lucene::util::BytesRefHash SynonymMap::_get_words() const
          {
            return ::org::apache::lucene::util::BytesRefHash(env->getObjectField(this$, fids$[fid_words]));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"
#include "org/apache/lucene/analysis/synonym/SynonymMap$Parser.h"
#include "org/apache/lucene/analysis/synonym/SynonymMap$Builder.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace synonym {
          static PyObject *t_SynonymMap_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_SynonymMap_instance_(PyTypeObject *type, PyObject *arg);
          static int t_SynonymMap_init_(t_SynonymMap *self, PyObject *args, PyObject *kwds);
          static PyObject *t_SynonymMap_get__fst(t_SynonymMap *self, void *data);
          static PyObject *t_SynonymMap_get__maxHorizontalContext(t_SynonymMap *self, void *data);
          static PyObject *t_SynonymMap_get__words(t_SynonymMap *self, void *data);

          static PyGetSetDef t_SynonymMap__fields_[] = {
            DECLARE_GET_FIELD(t_SynonymMap, fst),
            DECLARE_GET_FIELD(t_SynonymMap, maxHorizontalContext),
            DECLARE_GET_FIELD(t_SynonymMap, words),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_SynonymMap__methods_[] = {
            DECLARE_METHOD(t_SynonymMap, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_SynonymMap, instance_, METH_O | METH_CLASS),
            { NULL, NULL, 0, NULL }
          };

          static PyType_Slot PY_TYPE_SLOTS(SynonymMap)[] = {
            { Py_tp_methods, t_SynonymMap__methods_ },
            { Py_tp_init, (void *) t_SynonymMap_init_ },
            { Py_tp_getset, t_SynonymMap__fields_ },
            { 0, NULL }
          };

          static PyType_Def *PY_TYPE_BASES(SynonymMap)[] = {
            &PY_TYPE_DEF(::java::lang::Object),
            NULL
          };

          DEFINE_TYPE(SynonymMap, t_SynonymMap, SynonymMap);

          void t_SynonymMap::install(PyObject *module)
          {
            installType(&PY_TYPE(SynonymMap), &PY_TYPE_DEF(SynonymMap), module, "SynonymMap", 0);
            PyObject_SetAttrString((PyObject *) PY_TYPE(SynonymMap), "Parser", make_descriptor(&PY_TYPE_DEF(SynonymMap$Parser)));
            PyObject_SetAttrString((PyObject *) PY_TYPE(SynonymMap), "Builder", make_descriptor(&PY_TYPE_DEF(SynonymMap$Builder)));
          }

          void t_SynonymMap::initialize(PyObject *module)
          {
            PyObject_SetAttrString((PyObject *) PY_TYPE(SynonymMap), "class_", make_descriptor(SynonymMap::initializeClass, 1));
            PyObject_SetAttrString((PyObject *) PY_TYPE(SynonymMap), "wrapfn_", make_descriptor(t_SynonymMap::wrap_jobject));
            PyObject_SetAttrString((PyObject *) PY_TYPE(SynonymMap), "boxfn_", make_descriptor(boxObject));
            env->getClass(SynonymMap::initializeClass);
            PyObject_SetAttrString((PyObject *) PY_TYPE(SynonymMap), "WORD_SEPARATOR", make_descriptor(SynonymMap::WORD_SEPARATOR));
          }

          static PyObject *t_SynonymMap_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, SynonymMap::initializeClass, 1)))
              return NULL;
            return t_SynonymMap::wrap_Object(SynonymMap(((t_SynonymMap *) arg)->object.this$));
          }
          static PyObject *t_SynonymMap_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, SynonymMap::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_SynonymMap_init_(t_SynonymMap *self, PyObject *args, PyObject *kwds)
          {
            ::org::apache::lucene::util::fst::FST a0((jobject) NULL);
            PyTypeObject **p0;
            ::org::apache::lucene::util::BytesRefHash a1((jobject) NULL);
            jint a2;
            SynonymMap object((jobject) NULL);

            if (!parseArgs(args, "KkI", ::org::apache::lucene::util::fst::FST::initializeClass, ::org::apache::lucene::util::BytesRefHash::initializeClass, &a0, &p0, ::org::apache::lucene::util::fst::t_FST::parameters_, &a1, &a2))
            {
              INT_CALL(object = SynonymMap(a0, a1, a2));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_SynonymMap_get__fst(t_SynonymMap *self, void *data)
          {
            ::org::apache::lucene::util::fst::FST value((jobject) NULL);
            OBJ_CALL(value = self->object._get_fst());
            return ::org::apache::lucene::util::fst::t_FST::wrap_Object(value);
          }

          static PyObject *t_SynonymMap_get__maxHorizontalContext(t_SynonymMap *self, void *data)
          {
            jint value;
            OBJ_CALL(value = self->object._get_maxHorizontalContext());
            return PyLong_FromLong((long) value);
          }

          static PyObject *t_SynonymMap_get__words(t_SynonymMap *self, void *data)
          {
            ::org::apache::lucene::util::BytesRefHash value((jobject) NULL);
            OBJ_CALL(value = self->object._get_words());
            return ::org::apache::lucene::util::t_BytesRefHash::wrap_Object(value);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/store/InputStreamDataInput.h"
#include "java/io/IOException.h"
#include "java/io/InputStream.h"
#include "java/io/Closeable.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace store {

        ::java::lang::Class *InputStreamDataInput::class$ = NULL;
        jmethodID *InputStreamDataInput::mids$ = NULL;
        bool InputStreamDataInput::live$ = false;

        jclass InputStreamDataInput::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/store/InputStreamDataInput");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_a227449bf251faf1] = env->getMethodID(cls, "<init>", "(Ljava/io/InputStream;)V");
            mids$[mid_close_f2cc1bce94666404] = env->getMethodID(cls, "close", "()V");
            mids$[mid_readByte_871cd52a74f26213] = env->getMethodID(cls, "readByte", "()B");
            mids$[mid_readBytes_43fdd39c09bb2fad] = env->getMethodID(cls, "readBytes", "([BII)V");

            class$ = new ::java::lang::Class(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        InputStreamDataInput::InputStreamDataInput(const ::java::io::InputStream & a0) : ::org::apache::lucene::store::DataInput(env->newObject(initializeClass, &mids$, mid_init$_a227449bf251faf1, a0.this$)) {}

        void InputStreamDataInput::close() const
        {
          env->callVoidMethod(this$, mids$[mid_close_f2cc1bce94666404]);
        }

        jbyte InputStreamDataInput::readByte() const
        {
          return env->callByteMethod(this$, mids$[mid_readByte_871cd52a74f26213]);
        }

        void InputStreamDataInput::readBytes(const JArray< jbyte > & a0, jint a1, jint a2) const
        {
          env->callVoidMethod(this$, mids$[mid_readBytes_43fdd39c09bb2fad], a0.this$, a1, a2);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace store {
        static PyObject *t_InputStreamDataInput_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_InputStreamDataInput_instance_(PyTypeObject *type, PyObject *arg);
        static int t_InputStreamDataInput_init_(t_InputStreamDataInput *self, PyObject *args, PyObject *kwds);
        static PyObject *t_InputStreamDataInput_close(t_InputStreamDataInput *self);
        static PyObject *t_InputStreamDataInput_readByte(t_InputStreamDataInput *self, PyObject *args);
        static PyObject *t_InputStreamDataInput_readBytes(t_InputStreamDataInput *self, PyObject *args);

        static PyMethodDef t_InputStreamDataInput__methods_[] = {
          DECLARE_METHOD(t_InputStreamDataInput, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_InputStreamDataInput, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_InputStreamDataInput, close, METH_NOARGS),
          DECLARE_METHOD(t_InputStreamDataInput, readByte, METH_VARARGS),
          DECLARE_METHOD(t_InputStreamDataInput, readBytes, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        static PyType_Slot PY_TYPE_SLOTS(InputStreamDataInput)[] = {
          { Py_tp_methods, t_InputStreamDataInput__methods_ },
          { Py_tp_init, (void *) t_InputStreamDataInput_init_ },
          { 0, NULL }
        };

        static PyType_Def *PY_TYPE_BASES(InputStreamDataInput)[] = {
          &PY_TYPE_DEF(::org::apache::lucene::store::DataInput),
          NULL
        };

        DEFINE_TYPE(InputStreamDataInput, t_InputStreamDataInput, InputStreamDataInput);

        void t_InputStreamDataInput::install(PyObject *module)
        {
          installType(&PY_TYPE(InputStreamDataInput), &PY_TYPE_DEF(InputStreamDataInput), module, "InputStreamDataInput", 0);
        }

        void t_InputStreamDataInput::initialize(PyObject *module)
        {
          PyObject_SetAttrString((PyObject *) PY_TYPE(InputStreamDataInput), "class_", make_descriptor(InputStreamDataInput::initializeClass, 1));
          PyObject_SetAttrString((PyObject *) PY_TYPE(InputStreamDataInput), "wrapfn_", make_descriptor(t_InputStreamDataInput::wrap_jobject));
          PyObject_SetAttrString((PyObject *) PY_TYPE(InputStreamDataInput), "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_InputStreamDataInput_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, InputStreamDataInput::initializeClass, 1)))
            return NULL;
          return t_InputStreamDataInput::wrap_Object(InputStreamDataInput(((t_InputStreamDataInput *) arg)->object.this$));
        }
        static PyObject *t_InputStreamDataInput_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, InputStreamDataInput::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_InputStreamDataInput_init_(t_InputStreamDataInput *self, PyObject *args, PyObject *kwds)
        {
          ::java::io::InputStream a0((jobject) NULL);
          InputStreamDataInput object((jobject) NULL);

          if (!parseArgs(args, "k", ::java::io::InputStream::initializeClass, &a0))
          {
            INT_CALL(object = InputStreamDataInput(a0));
            self->object = object;
          }
          else
          {
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }

        static PyObject *t_InputStreamDataInput_close(t_InputStreamDataInput *self)
        {
          OBJ_CALL(self->object.close());
          Py_RETURN_NONE;
        }

        static PyObject *t_InputStreamDataInput_readByte(t_InputStreamDataInput *self, PyObject *args)
        {
          jbyte result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.readByte());
            return PyLong_FromLong((long) result);
          }

          return callSuper(PY_TYPE(InputStreamDataInput), (PyObject *) self, "readByte", args, 2);
        }

        static PyObject *t_InputStreamDataInput_readBytes(t_InputStreamDataInput *self, PyObject *args)
        {
          JArray< jbyte > a0((jobject) NULL);
          jint a1;
          jint a2;

          if (!parseArgs(args, "[BII", &a0, &a1, &a2))
          {
            OBJ_CALL(self->object.readBytes(a0, a1, a2));
            Py_RETURN_NONE;
          }

          return callSuper(PY_TYPE(InputStreamDataInput), (PyObject *) self, "readBytes", args, 2);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/pylucene/analysis/PythonFilteringTokenFilter.h"
#include "java/lang/Throwable.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/analysis/TokenStream.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace pylucene {
      namespace analysis {

        ::java::lang::Class *PythonFilteringTokenFilter::class$ = NULL;
        jmethodID *PythonFilteringTokenFilter::mids$ = NULL;
        bool PythonFilteringTokenFilter::live$ = false;

        jclass PythonFilteringTokenFilter::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/pylucene/analysis/PythonFilteringTokenFilter");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_c26756868a754f4e] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/analysis/TokenStream;)V");
            mids$[mid_accept_8454bd5aa23fd11e] = env->getMethodID(cls, "accept", "()Z");
            mids$[mid_finalize_f2cc1bce94666404] = env->getMethodID(cls, "finalize", "()V");
            mids$[mid_pythonDecRef_f2cc1bce94666404] = env->getMethodID(cls, "pythonDecRef", "()V");
            mids$[mid_pythonExtension_2e5ae9edcb9b072f] = env->getMethodID(cls, "pythonExtension", "()J");
            mids$[mid_pythonExtension_9c778c9bce6694df] = env->getMethodID(cls, "pythonExtension", "(J)V");

            class$ = new ::java::lang::Class(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        PythonFilteringTokenFilter::PythonFilteringTokenFilter(const ::org::apache::lucene::analysis::TokenStream & a0) : ::org::apache::lucene::analysis::FilteringTokenFilter(env->newObject(initializeClass, &mids$, mid_init$_c26756868a754f4e, a0.this$)) {}

        void PythonFilteringTokenFilter::finalize() const
        {
          env->callVoidMethod(this$, mids$[mid_finalize_f2cc1bce94666404]);
        }

        jlong PythonFilteringTokenFilter::pythonExtension() const
        {
          return env->callLongMethod(this$, mids$[mid_pythonExtension_2e5ae9edcb9b072f]);
        }

        void PythonFilteringTokenFilter::pythonExtension(jlong a0) const
        {
          env->callVoidMethod(this$, mids$[mid_pythonExtension_9c778c9bce6694df], a0);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace pylucene {
      namespace analysis {
        static PyObject *t_PythonFilteringTokenFilter_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_PythonFilteringTokenFilter_instance_(PyTypeObject *type, PyObject *arg);
        static int t_PythonFilteringTokenFilter_init_(t_PythonFilteringTokenFilter *self, PyObject *args, PyObject *kwds);
        static PyObject *t_PythonFilteringTokenFilter_finalize(t_PythonFilteringTokenFilter *self);
        static PyObject *t_PythonFilteringTokenFilter_pythonExtension(t_PythonFilteringTokenFilter *self, PyObject *args);
        static jboolean JNICALL t_PythonFilteringTokenFilter_accept0(JNIEnv *jenv, jobject jobj);
        static void JNICALL t_PythonFilteringTokenFilter_pythonDecRef1(JNIEnv *jenv, jobject jobj);
        static PyObject *t_PythonFilteringTokenFilter_get__self(t_PythonFilteringTokenFilter *self, void *data);
        static PyGetSetDef t_PythonFilteringTokenFilter__fields_[] = {
          DECLARE_GET_FIELD(t_PythonFilteringTokenFilter, self),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_PythonFilteringTokenFilter__methods_[] = {
          DECLARE_METHOD(t_PythonFilteringTokenFilter, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_PythonFilteringTokenFilter, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_PythonFilteringTokenFilter, finalize, METH_NOARGS),
          DECLARE_METHOD(t_PythonFilteringTokenFilter, pythonExtension, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        static PyType_Slot PY_TYPE_SLOTS(PythonFilteringTokenFilter)[] = {
          { Py_tp_methods, t_PythonFilteringTokenFilter__methods_ },
          { Py_tp_init, (void *) t_PythonFilteringTokenFilter_init_ },
          { Py_tp_getset, t_PythonFilteringTokenFilter__fields_ },
          { 0, NULL }
        };

        static PyType_Def *PY_TYPE_BASES(PythonFilteringTokenFilter)[] = {
          &PY_TYPE_DEF(::org::apache::lucene::analysis::FilteringTokenFilter),
          NULL
        };

        DEFINE_TYPE(PythonFilteringTokenFilter, t_PythonFilteringTokenFilter, PythonFilteringTokenFilter);

        void t_PythonFilteringTokenFilter::install(PyObject *module)
        {
          installType(&PY_TYPE(PythonFilteringTokenFilter), &PY_TYPE_DEF(PythonFilteringTokenFilter), module, "PythonFilteringTokenFilter", 1);
        }

        void t_PythonFilteringTokenFilter::initialize(PyObject *module)
        {
          PyObject_SetAttrString((PyObject *) PY_TYPE(PythonFilteringTokenFilter), "class_", make_descriptor(PythonFilteringTokenFilter::initializeClass, 1));
          PyObject_SetAttrString((PyObject *) PY_TYPE(PythonFilteringTokenFilter), "wrapfn_", make_descriptor(t_PythonFilteringTokenFilter::wrap_jobject));
          PyObject_SetAttrString((PyObject *) PY_TYPE(PythonFilteringTokenFilter), "boxfn_", make_descriptor(boxObject));
          jclass cls = env->getClass(PythonFilteringTokenFilter::initializeClass);
          JNINativeMethod methods[] = {
            { "accept", "()Z", (void *) t_PythonFilteringTokenFilter_accept0 },
            { "pythonDecRef", "()V", (void *) t_PythonFilteringTokenFilter_pythonDecRef1 },
          };
          env->registerNatives(cls, methods, 2);
        }

        static PyObject *t_PythonFilteringTokenFilter_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, PythonFilteringTokenFilter::initializeClass, 1)))
            return NULL;
          return t_PythonFilteringTokenFilter::wrap_Object(PythonFilteringTokenFilter(((t_PythonFilteringTokenFilter *) arg)->object.this$));
        }
        static PyObject *t_PythonFilteringTokenFilter_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, PythonFilteringTokenFilter::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_PythonFilteringTokenFilter_init_(t_PythonFilteringTokenFilter *self, PyObject *args, PyObject *kwds)
        {
          ::org::apache::lucene::analysis::TokenStream a0((jobject) NULL);
          PythonFilteringTokenFilter object((jobject) NULL);

          if (!parseArgs(args, "k", ::org::apache::lucene::analysis::TokenStream::initializeClass, &a0))
          {
            INT_CALL(object = PythonFilteringTokenFilter(a0));
            self->object = object;
          }
          else
          {
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          Py_INCREF((PyObject *) self);
          self->object.pythonExtension((jlong) (Py_intptr_t) (void *) self);

          return 0;
        }

        static PyObject *t_PythonFilteringTokenFilter_finalize(t_PythonFilteringTokenFilter *self)
        {
          OBJ_CALL(self->object.finalize());
          Py_RETURN_NONE;
        }

        static PyObject *t_PythonFilteringTokenFilter_pythonExtension(t_PythonFilteringTokenFilter *self, PyObject *args)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 0:
            {
              jlong result;
              OBJ_CALL(result = self->object.pythonExtension());
              return PyLong_FromLongLong((PY_LONG_LONG) result);
            }
            break;
           case 1:
            {
              jlong a0;

              if (!parseArgs(args, "J", &a0))
              {
                OBJ_CALL(self->object.pythonExtension(a0));
                Py_RETURN_NONE;
              }
            }
          }

          PyErr_SetArgsError((PyObject *) self, "pythonExtension", args);
          return NULL;
        }

        static jboolean JNICALL t_PythonFilteringTokenFilter_accept0(JNIEnv *jenv, jobject jobj)
        {
          jlong ptr = jenv->CallLongMethod(jobj, PythonFilteringTokenFilter::mids$[PythonFilteringTokenFilter::mid_pythonExtension_2e5ae9edcb9b072f]);
          PyObject *obj = (PyObject *) (Py_intptr_t) ptr;
          PythonGIL gil(jenv);
          jboolean value;
          PyObject *result = PyObject_CallMethod(obj, "accept", "");
          if (!result)
            throwPythonError();
          else if (parseArg(result, "Z", &value))
          {
            throwTypeError("accept", result);
            Py_DECREF(result);
          }
          else
          {
            Py_DECREF(result);
            return value;
          }

          return (jboolean) 0;
        }

        static void JNICALL t_PythonFilteringTokenFilter_pythonDecRef1(JNIEnv *jenv, jobject jobj)
        {
          jlong ptr = jenv->CallLongMethod(jobj, PythonFilteringTokenFilter::mids$[PythonFilteringTokenFilter::mid_pythonExtension_2e5ae9edcb9b072f]);
          PyObject *obj = (PyObject *) (Py_intptr_t) ptr;

          if (obj != NULL)
          {
            jenv->CallVoidMethod(jobj, PythonFilteringTokenFilter::mids$[PythonFilteringTokenFilter::mid_pythonExtension_9c778c9bce6694df], (jlong) 0);
            env->finalizeObject(jenv, obj);
          }
        }

        static PyObject *t_PythonFilteringTokenFilter_get__self(t_PythonFilteringTokenFilter *self, void *data)
        {
          jlong ptr;
          OBJ_CALL(ptr = self->object.pythonExtension());
          PyObject *obj = (PyObject *) (Py_intptr_t) ptr;

          if (obj != NULL)
          {
            Py_INCREF(obj);
            return obj;
          }
          else
            Py_RETURN_NONE;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/highlight/PositionSpan.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace highlight {

          ::java::lang::Class *PositionSpan::class$ = NULL;
          jmethodID *PositionSpan::mids$ = NULL;
          bool PositionSpan::live$ = false;

          jclass PositionSpan::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/search/highlight/PositionSpan");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_438c62480c481c65] = env->getMethodID(cls, "<init>", "(II)V");

              class$ = new ::java::lang::Class(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          PositionSpan::PositionSpan(jint a0, jint a1) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_438c62480c481c65, a0, a1)) {}
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace highlight {
          static PyObject *t_PositionSpan_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_PositionSpan_instance_(PyTypeObject *type, PyObject *arg);
          static int t_PositionSpan_init_(t_PositionSpan *self, PyObject *args, PyObject *kwds);

          static PyMethodDef t_PositionSpan__methods_[] = {
            DECLARE_METHOD(t_PositionSpan, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_PositionSpan, instance_, METH_O | METH_CLASS),
            { NULL, NULL, 0, NULL }
          };

          static PyType_Slot PY_TYPE_SLOTS(PositionSpan)[] = {
            { Py_tp_methods, t_PositionSpan__methods_ },
            { Py_tp_init, (void *) t_PositionSpan_init_ },
            { 0, NULL }
          };

          static PyType_Def *PY_TYPE_BASES(PositionSpan)[] = {
            &PY_TYPE_DEF(::java::lang::Object),
            NULL
          };

          DEFINE_TYPE(PositionSpan, t_PositionSpan, PositionSpan);

          void t_PositionSpan::install(PyObject *module)
          {
            installType(&PY_TYPE(PositionSpan), &PY_TYPE_DEF(PositionSpan), module, "PositionSpan", 0);
          }

          void t_PositionSpan::initialize(PyObject *module)
          {
            PyObject_SetAttrString((PyObject *) PY_TYPE(PositionSpan), "class_", make_descriptor(PositionSpan::initializeClass, 1));
            PyObject_SetAttrString((PyObject *) PY_TYPE(PositionSpan), "wrapfn_", make_descriptor(t_PositionSpan::wrap_jobject));
            PyObject_SetAttrString((PyObject *) PY_TYPE(PositionSpan), "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_PositionSpan_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, PositionSpan::initializeClass, 1)))
              return NULL;
            return t_PositionSpan::wrap_Object(PositionSpan(((t_PositionSpan *) arg)->object.this$));
          }
          static PyObject *t_PositionSpan_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, PositionSpan::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_PositionSpan_init_(t_PositionSpan *self, PyObject *args, PyObject *kwds)
          {
            jint a0;
            jint a1;
            PositionSpan object((jobject) NULL);

            if (!parseArgs(args, "II", &a0, &a1))
            {
              INT_CALL(object = PositionSpan(a0, a1));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/ja/JapaneseBaseFormFilterFactory.h"
#include "java/util/Map.h"
#include "java/lang/String.h"
#include "org/apache/lucene/analysis/TokenStream.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace ja {

          ::java::lang::Class *JapaneseBaseFormFilterFactory::class$ = NULL;
          jmethodID *JapaneseBaseFormFilterFactory::mids$ = NULL;
          bool JapaneseBaseFormFilterFactory::live$ = false;
          ::java::lang::String *JapaneseBaseFormFilterFactory::NAME = NULL;

          jclass JapaneseBaseFormFilterFactory::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/ja/JapaneseBaseFormFilterFactory");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_408bd889ee3beae5] = env->getMethodID(cls, "<init>", "(Ljava/util/Map;)V");
              mids$[mid_create_6de1e28d9d10cd9e] = env->getMethodID(cls, "create", "(Lorg/apache/lucene/analysis/TokenStream;)Lorg/apache/lucene/analysis/TokenStream;");

              class$ = new ::java::lang::Class(cls);
              cls = (jclass) class$->this$;

              NAME = new ::java::lang::String(env->getStaticObjectField(cls, "NAME", "Ljava/lang/String;"));
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          JapaneseBaseFormFilterFactory::JapaneseBaseFormFilterFactory(const ::java::util::Map & a0) : ::org::apache::lucene::analysis::util::TokenFilterFactory(env->newObject(initializeClass, &mids$, mid_init$_408bd889ee3beae5, a0.this$)) {}

          ::org::apache::lucene::analysis::TokenStream JapaneseBaseFormFilterFactory::create(const ::org::apache::lucene::analysis::TokenStream & a0) const
          {
            return ::org::apache::lucene::analysis::TokenStream(env->callObjectMethod(this$, mids$[mid_create_6de1e28d9d10cd9e], a0.this$));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace ja {
          static PyObject *t_JapaneseBaseFormFilterFactory_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_JapaneseBaseFormFilterFactory_instance_(PyTypeObject *type, PyObject *arg);
          static int t_JapaneseBaseFormFilterFactory_init_(t_JapaneseBaseFormFilterFactory *self, PyObject *args, PyObject *kwds);
          static PyObject *t_JapaneseBaseFormFilterFactory_create(t_JapaneseBaseFormFilterFactory *self, PyObject *args);

          static PyMethodDef t_JapaneseBaseFormFilterFactory__methods_[] = {
            DECLARE_METHOD(t_JapaneseBaseFormFilterFactory, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_JapaneseBaseFormFilterFactory, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_JapaneseBaseFormFilterFactory, create, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          static PyType_Slot PY_TYPE_SLOTS(JapaneseBaseFormFilterFactory)[] = {
            { Py_tp_methods, t_JapaneseBaseFormFilterFactory__methods_ },
            { Py_tp_init, (void *) t_JapaneseBaseFormFilterFactory_init_ },
            { 0, NULL }
          };

          static PyType_Def *PY_TYPE_BASES(JapaneseBaseFormFilterFactory)[] = {
            &PY_TYPE_DEF(::org::apache::lucene::analysis::util::TokenFilterFactory),
            NULL
          };

          DEFINE_TYPE(JapaneseBaseFormFilterFactory, t_JapaneseBaseFormFilterFactory, JapaneseBaseFormFilterFactory);

          void t_JapaneseBaseFormFilterFactory::install(PyObject *module)
          {
            installType(&PY_TYPE(JapaneseBaseFormFilterFactory), &PY_TYPE_DEF(JapaneseBaseFormFilterFactory), module, "JapaneseBaseFormFilterFactory", 0);
          }

          void t_JapaneseBaseFormFilterFactory::initialize(PyObject *module)
          {
            PyObject_SetAttrString((PyObject *) PY_TYPE(JapaneseBaseFormFilterFactory), "class_", make_descriptor(JapaneseBaseFormFilterFactory::initializeClass, 1));
            PyObject_SetAttrString((PyObject *) PY_TYPE(JapaneseBaseFormFilterFactory), "wrapfn_", make_descriptor(t_JapaneseBaseFormFilterFactory::wrap_jobject));
            PyObject_SetAttrString((PyObject *) PY_TYPE(JapaneseBaseFormFilterFactory), "boxfn_", make_descriptor(boxObject));
            env->getClass(JapaneseBaseFormFilterFactory::initializeClass);
            PyObject_SetAttrString((PyObject *) PY_TYPE(JapaneseBaseFormFilterFactory), "NAME", make_descriptor(j2p(*JapaneseBaseFormFilterFactory::NAME)));
          }

          static PyObject *t_JapaneseBaseFormFilterFactory_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, JapaneseBaseFormFilterFactory::initializeClass, 1)))
              return NULL;
            return t_JapaneseBaseFormFilterFactory::wrap_Object(JapaneseBaseFormFilterFactory(((t_JapaneseBaseFormFilterFactory *) arg)->object.this$));
          }
          static PyObject *t_JapaneseBaseFormFilterFactory_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, JapaneseBaseFormFilterFactory::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_JapaneseBaseFormFilterFactory_init_(t_JapaneseBaseFormFilterFactory *self, PyObject *args, PyObject *kwds)
          {
            ::java::util::Map a0((jobject) NULL);
            PyTypeObject **p0;
            JapaneseBaseFormFilterFactory object((jobject) NULL);

            if (!parseArgs(args, "K", ::java::util::Map::initializeClass, &a0, &p0, ::java::util::t_Map::parameters_))
            {
              INT_CALL(object = JapaneseBaseFormFilterFactory(a0));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_JapaneseBaseFormFilterFactory_create(t_JapaneseBaseFormFilterFactory *self, PyObject *args)
          {
            ::org::apache::lucene::analysis::TokenStream a0((jobject) NULL);
            ::org::apache::lucene::analysis::TokenStream result((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::analysis::TokenStream::initializeClass, &a0))
            {
              OBJ_CALL(result = self->object.create(a0));
              return ::org::apache::lucene::analysis::t_TokenStream::wrap_Object(result);
            }

            return callSuper(PY_TYPE(JapaneseBaseFormFilterFactory), (PyObject *) self, "create", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/TotalHitCountCollector.h"
#include "org/apache/lucene/search/ScoreMode.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {

        ::java::lang::Class *TotalHitCountCollector::class$ = NULL;
        jmethodID *TotalHitCountCollector::mids$ = NULL;
        bool TotalHitCountCollector::live$ = false;

        jclass TotalHitCountCollector::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/search/TotalHitCountCollector");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_f2cc1bce94666404] = env->getMethodID(cls, "<init>", "()V");
            mids$[mid_collect_040c4cd0390c5aff] = env->getMethodID(cls, "collect", "(I)V");
            mids$[mid_getTotalHits_9972fcc56b44e79d] = env->getMethodID(cls, "getTotalHits", "()I");
            mids$[mid_scoreMode_8a35254b82ee8276] = env->getMethodID(cls, "scoreMode", "()Lorg/apache/lucene/search/ScoreMode;");

            class$ = new ::java::lang::Class(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        TotalHitCountCollector::TotalHitCountCollector() : ::org::apache::lucene::search::SimpleCollector(env->newObject(initializeClass, &mids$, mid_init$_f2cc1bce94666404)) {}

        void TotalHitCountCollector::collect(jint a0) const
        {
          env->callVoidMethod(this$, mids$[mid_collect_040c4cd0390c5aff], a0);
        }

        jint TotalHitCountCollector::getTotalHits() const
        {
          return env->callIntMethod(this$, mids$[mid_getTotalHits_9972fcc56b44e79d]);
        }

        ::org::apache::lucene::search::ScoreMode TotalHitCountCollector::scoreMode() const
        {
          return ::org::apache::lucene::search::ScoreMode(env->callObjectMethod(this$, mids$[mid_scoreMode_8a35254b82ee8276]));
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        static PyObject *t_TotalHitCountCollector_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_TotalHitCountCollector_instance_(PyTypeObject *type, PyObject *arg);
        static int t_TotalHitCountCollector_init_(t_TotalHitCountCollector *self, PyObject *args, PyObject *kwds);
        static PyObject *t_TotalHitCountCollector_collect(t_TotalHitCountCollector *self, PyObject *args);
        static PyObject *t_TotalHitCountCollector_getTotalHits(t_TotalHitCountCollector *self);
        static PyObject *t_TotalHitCountCollector_scoreMode(t_TotalHitCountCollector *self, PyObject *args);
        static PyObject *t_TotalHitCountCollector_get__totalHits(t_TotalHitCountCollector *self, void *data);
        static PyGetSetDef t_TotalHitCountCollector__fields_[] = {
          DECLARE_GET_FIELD(t_TotalHitCountCollector, totalHits),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_TotalHitCountCollector__methods_[] = {
          DECLARE_METHOD(t_TotalHitCountCollector, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_TotalHitCountCollector, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_TotalHitCountCollector, collect, METH_VARARGS),
          DECLARE_METHOD(t_TotalHitCountCollector, getTotalHits, METH_NOARGS),
          DECLARE_METHOD(t_TotalHitCountCollector, scoreMode, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        static PyType_Slot PY_TYPE_SLOTS(TotalHitCountCollector)[] = {
          { Py_tp_methods, t_TotalHitCountCollector__methods_ },
          { Py_tp_init, (void *) t_TotalHitCountCollector_init_ },
          { Py_tp_getset, t_TotalHitCountCollector__fields_ },
          { 0, NULL }
        };

        static PyType_Def *PY_TYPE_BASES(TotalHitCountCollector)[] = {
          &PY_TYPE_DEF(::org::apache::lucene::search::SimpleCollector),
          NULL
        };

        DEFINE_TYPE(TotalHitCountCollector, t_TotalHitCountCollector, TotalHitCountCollector);

        void t_TotalHitCountCollector::install(PyObject *module)
        {
          installType(&PY_TYPE(TotalHitCountCollector), &PY_TYPE_DEF(TotalHitCountCollector), module, "TotalHitCountCollector", 0);
        }

        void t_TotalHitCountCollector::initialize(PyObject *module)
        {
          PyObject_SetAttrString((PyObject *) PY_TYPE(TotalHitCountCollector), "class_", make_descriptor(TotalHitCountCollector::initializeClass, 1));
          PyObject_SetAttrString((PyObject *) PY_TYPE(TotalHitCountCollector), "wrapfn_", make_descriptor(t_TotalHitCountCollector::wrap_jobject));
          PyObject_SetAttrString((PyObject *) PY_TYPE(TotalHitCountCollector), "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_TotalHitCountCollector_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, TotalHitCountCollector::initializeClass, 1)))
            return NULL;
          return t_TotalHitCountCollector::wrap_Object(TotalHitCountCollector(((t_TotalHitCountCollector *) arg)->object.this$));
        }
        static PyObject *t_TotalHitCountCollector_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, TotalHitCountCollector::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_TotalHitCountCollector_init_(t_TotalHitCountCollector *self, PyObject *args, PyObject *kwds)
        {
          TotalHitCountCollector object((jobject) NULL);

          INT_CALL(object = TotalHitCountCollector());
          self->object = object;

          return 0;
        }

        static PyObject *t_TotalHitCountCollector_collect(t_TotalHitCountCollector *self, PyObject *args)
        {
          jint a0;

          if (!parseArgs(args, "I", &a0))
          {
            OBJ_CALL(self->object.collect(a0));
            Py_RETURN_NONE;
          }

          return callSuper(PY_TYPE(TotalHitCountCollector), (PyObject *) self, "collect", args, 2);
        }

        static PyObject *t_TotalHitCountCollector_getTotalHits(t_TotalHitCountCollector *self)
        {
          jint result;
          OBJ_CALL(result = self->object.getTotalHits());
          return PyLong_FromLong((long) result);
        }

        static PyObject *t_TotalHitCountCollector_scoreMode(t_TotalHitCountCollector *self, PyObject *args)
        {
          ::org::apache::lucene::search::ScoreMode result((jobject) NULL);

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.scoreMode());
            return ::org::apache::lucene::search::t_ScoreMode::wrap_Object(result);
          }

          return callSuper(PY_TYPE(TotalHitCountCollector), (PyObject *) self, "scoreMode", args, 2);
        }

        static PyObject *t_TotalHitCountCollector_get__totalHits(t_TotalHitCountCollector *self, void *data)
        {
          jint value;
          OBJ_CALL(value = self->object.getTotalHits());
          return PyLong_FromLong((long) value);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/util/CommandLineUtil.h"
#include "org/apache/lucene/store/FSDirectory.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/store/Directory.h"
#include "java/lang/String.h"
#include "java/lang/ClassNotFoundException.h"
#include "java/lang/ReflectiveOperationException.h"
#include "java/nio/file/Path.h"
#include "org/apache/lucene/store/LockFactory.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {

        ::java::lang::Class *CommandLineUtil::class$ = NULL;
        jmethodID *CommandLineUtil::mids$ = NULL;
        bool CommandLineUtil::live$ = false;

        jclass CommandLineUtil::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/util/CommandLineUtil");

            mids$ = new jmethodID[max_mid];
            mids$[mid_loadDirectoryClass_337d52b895d55b49] = env->getStaticMethodID(cls, "loadDirectoryClass", "(Ljava/lang/String;)Ljava/lang/Class;");
            mids$[mid_loadFSDirectoryClass_337d52b895d55b49] = env->getStaticMethodID(cls, "loadFSDirectoryClass", "(Ljava/lang/String;)Ljava/lang/Class;");
            mids$[mid_newFSDirectory_86d31b1b0d0a6ca3] = env->getStaticMethodID(cls, "newFSDirectory", "(Ljava/lang/Class;Ljava/nio/file/Path;)Lorg/apache/lucene/store/FSDirectory;");
            mids$[mid_newFSDirectory_311d4663f1c13887] = env->getStaticMethodID(cls, "newFSDirectory", "(Ljava/lang/String;Ljava/nio/file/Path;)Lorg/apache/lucene/store/FSDirectory;");
            mids$[mid_newFSDirectory_beb39a8f08718a2e] = env->getStaticMethodID(cls, "newFSDirectory", "(Ljava/lang/Class;Ljava/nio/file/Path;Lorg/apache/lucene/store/LockFactory;)Lorg/apache/lucene/store/FSDirectory;");
            mids$[mid_newFSDirectory_788f2ff59a70d291] = env->getStaticMethodID(cls, "newFSDirectory", "(Ljava/lang/String;Ljava/nio/file/Path;Lorg/apache/lucene/store/LockFactory;)Lorg/apache/lucene/store/FSDirectory;");

            class$ = new ::java::lang::Class(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        ::java::lang::Class CommandLineUtil::loadDirectoryClass(const ::java::lang::String & a0)
        {
          jclass cls = env->getClass(initializeClass);
          return ::java::lang::Class(env->callStaticObjectMethod(cls, mids$[mid_loadDirectoryClass_337d52b895d55b49], a0.this$));
        }

        ::java::lang::Class CommandLineUtil::loadFSDirectoryClass(const ::java::lang::String & a0)
        {
          jclass cls = env->getClass(initializeClass);
          return ::java::lang::Class(env->callStaticObjectMethod(cls, mids$[mid_loadFSDirectoryClass_337d52b895d55b49], a0.this$));
        }

        ::org::apache::lucene::store::FSDirectory CommandLineUtil::newFSDirectory(const ::java::lang::Class & a0, const ::java::nio::file::Path & a1)
        {
          jclass cls = env->getClass(initializeClass);
          return ::org::apache::lucene::store::FSDirectory(env->callStaticObjectMethod(cls, mids$[mid_newFSDirectory_86d31b1b0d0a6ca3], a0.this$, a1.this$));
        }

        ::org::apache::lucene::store::FSDirectory CommandLineUtil::newFSDirectory(const ::java::lang::String & a0, const ::java::nio::file::Path & a1)
        {
          jclass cls = env->getClass(initializeClass);
          return ::org::apache::lucene::store::FSDirectory(env->callStaticObjectMethod(cls, mids$[mid_newFSDirectory_311d4663f1c13887], a0.this$, a1.this$));
        }

        ::org::apache::lucene::store::FSDirectory CommandLineUtil::newFSDirectory(const ::java::lang::Class & a0, const ::java::nio::file::Path & a1, const ::org::apache::lucene::store::LockFactory & a2)
        {
          jclass cls = env->getClass(initializeClass);
          return ::org::apache::lucene::store::FSDirectory(env->callStaticObjectMethod(cls, mids$[mid_newFSDirectory_beb39a8f08718a2e], a0.this$, a1.this$, a2.this$));
        }

        ::org::apache::lucene::store::FSDirectory CommandLineUtil::newFSDirectory(const ::java::lang::String & a0, const ::java::nio::file::Path & a1, const ::org::apache::lucene::store::LockFactory & a2)
        {
          jclass cls = env->getClass(initializeClass);
          return ::org::apache::lucene::store::FSDirectory(env->callStaticObjectMethod(cls, mids$[mid_newFSDirectory_788f2ff59a70d291], a0.this$, a1.this$, a2.this$));
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        static PyObject *t_CommandLineUtil_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_CommandLineUtil_instance_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_CommandLineUtil_loadDirectoryClass(PyTypeObject *type, PyObject *arg);
        static PyObject *t_CommandLineUtil_loadFSDirectoryClass(PyTypeObject *type, PyObject *arg);
        static PyObject *t_CommandLineUtil_newFSDirectory(PyTypeObject *type, PyObject *args);

        static PyMethodDef t_CommandLineUtil__methods_[] = {
          DECLARE_METHOD(t_CommandLineUtil, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_CommandLineUtil, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_CommandLineUtil, loadDirectoryClass, METH_O | METH_CLASS),
          DECLARE_METHOD(t_CommandLineUtil, loadFSDirectoryClass, METH_O | METH_CLASS),
          DECLARE_METHOD(t_CommandLineUtil, newFSDirectory, METH_VARARGS | METH_CLASS),
          { NULL, NULL, 0, NULL }
        };

        static PyType_Slot PY_TYPE_SLOTS(CommandLineUtil)[] = {
          { Py_tp_methods, t_CommandLineUtil__methods_ },
          { Py_tp_init, (void *) abstract_init },
          { 0, NULL }
        };

        static PyType_Def *PY_TYPE_BASES(CommandLineUtil)[] = {
          &PY_TYPE_DEF(::java::lang::Object),
          NULL
        };

        DEFINE_TYPE(CommandLineUtil, t_CommandLineUtil, CommandLineUtil);

        void t_CommandLineUtil::install(PyObject *module)
        {
          installType(&PY_TYPE(CommandLineUtil), &PY_TYPE_DEF(CommandLineUtil), module, "CommandLineUtil", 0);
        }

        void t_CommandLineUtil::initialize(PyObject *module)
        {
          PyObject_SetAttrString((PyObject *) PY_TYPE(CommandLineUtil), "class_", make_descriptor(CommandLineUtil::initializeClass, 1));
          PyObject_SetAttrString((PyObject *) PY_TYPE(CommandLineUtil), "wrapfn_", make_descriptor(t_CommandLineUtil::wrap_jobject));
          PyObject_SetAttrString((PyObject *) PY_TYPE(CommandLineUtil), "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_CommandLineUtil_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, CommandLineUtil::initializeClass, 1)))
            return NULL;
          return t_CommandLineUtil::wrap_Object(CommandLineUtil(((t_CommandLineUtil *) arg)->object.this$));
        }
        static PyObject *t_CommandLineUtil_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, CommandLineUtil::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static PyObject *t_CommandLineUtil_loadDirectoryClass(PyTypeObject *type, PyObject *arg)
        {
          ::java::lang::String a0((jobject) NULL);
          ::java::lang::Class result((jobject) NULL);

          if (!parseArg(arg, "s", &a0))
          {
            OBJ_CALL(result = ::org::apache::lucene::util::CommandLineUtil::loadDirectoryClass(a0));
            return ::java::lang::t_Class::wrap_Object(result);
          }

          PyErr_SetArgsError(type, "loadDirectoryClass", arg);
          return NULL;
        }

        static PyObject *t_CommandLineUtil_loadFSDirectoryClass(PyTypeObject *type, PyObject *arg)
        {
          ::java::lang::String a0((jobject) NULL);
          ::java::lang::Class result((jobject) NULL);

          if (!parseArg(arg, "s", &a0))
          {
            OBJ_CALL(result = ::org::apache::lucene::util::CommandLineUtil::loadFSDirectoryClass(a0));
            return ::java::lang::t_Class::wrap_Object(result);
          }

          PyErr_SetArgsError(type, "loadFSDirectoryClass", arg);
          return NULL;
        }

        static PyObject *t_CommandLineUtil_newFSDirectory(PyTypeObject *type, PyObject *args)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 2:
            {
              ::java::lang::Class a0((jobject) NULL);
              PyTypeObject **p0;
              ::java::nio::file::Path a1((jobject) NULL);
              ::org::apache::lucene::store::FSDirectory result((jobject) NULL);

              if (!parseArgs(args, "Kk", ::java::lang::Class::initializeClass, ::java::nio::file::Path::initializeClass, &a0, &p0, ::java::lang::t_Class::parameters_, &a1))
              {
                OBJ_CALL(result = ::org::apache::lucene::util::CommandLineUtil::newFSDirectory(a0, a1));
                return ::org::apache::lucene::store::t_FSDirectory::wrap_Object(result);
              }
            }
            {
              ::java::lang::String a0((jobject) NULL);
              ::java::nio::file::Path a1((jobject) NULL);
              ::org::apache::lucene::store::FSDirectory result((jobject) NULL);

              if (!parseArgs(args, "sk", ::java::nio::file::Path::initializeClass, &a0, &a1))
              {
                OBJ_CALL(result = ::org::apache::lucene::util::CommandLineUtil::newFSDirectory(a0, a1));
                return ::org::apache::lucene::store::t_FSDirectory::wrap_Object(result);
              }
            }
            break;
           case 3:
            {
              ::java::lang::Class a0((jobject) NULL);
              PyTypeObject **p0;
              ::java::nio::file::Path a1((jobject) NULL);
              ::org::apache::lucene::store::LockFactory a2((jobject) NULL);
              ::org::apache::lucene::store::FSDirectory result((jobject) NULL);

              if (!parseArgs(args, "Kkk", ::java::lang::Class::initializeClass, ::java::nio::file::Path::initializeClass, ::org::apache::lucene::store::LockFactory::initializeClass, &a0, &p0, ::java::lang::t_Class::parameters_, &a1, &a2))
              {
                OBJ_CALL(result = ::org::apache::lucene::util::CommandLineUtil::newFSDirectory(a0, a1, a2));
                return ::org::apache::lucene::store::t_FSDirectory::wrap_Object(result);
              }
            }
            {
              ::java::lang::String a0((jobject) NULL);
              ::java::nio::file::Path a1((jobject) NULL);
              ::org::apache::lucene::store::LockFactory a2((jobject) NULL);
              ::org::apache::lucene::store::FSDirectory result((jobject) NULL);

              if (!parseArgs(args, "skk", ::java::nio::file::Path::initializeClass, ::org::apache::lucene::store::LockFactory::initializeClass, &a0, &a1, &a2))
              {
                OBJ_CALL(result = ::org::apache::lucene::util::CommandLineUtil::newFSDirectory(a0, a1, a2));
                return ::org::apache::lucene::store::t_FSDirectory::wrap_Object(result);
              }
            }
          }

          PyErr_SetArgsError(type, "newFSDirectory", args);
          return NULL;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/spans/NearSpansOrdered.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/search/spans/Spans.h"
#include "org/apache/lucene/search/spans/SpanCollector.h"
#include "java/io/IOException.h"
#include "java/util/List.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace spans {

          ::java::lang::Class *NearSpansOrdered::class$ = NULL;
          jmethodID *NearSpansOrdered::mids$ = NULL;
          bool NearSpansOrdered::live$ = false;

          jclass NearSpansOrdered::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/search/spans/NearSpansOrdered");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_64683aefa58cdb7d] = env->getMethodID(cls, "<init>", "(ILjava/util/List;)V");
              mids$[mid_collect_810c6539c62abcf6] = env->getMethodID(cls, "collect", "(Lorg/apache/lucene/search/spans/SpanCollector;)V");
              mids$[mid_endPosition_9972fcc56b44e79d] = env->getMethodID(cls, "endPosition", "()I");
              mids$[mid_nextStartPosition_9972fcc56b44e79d] = env->getMethodID(cls, "nextStartPosition", "()I");
              mids$[mid_startPosition_9972fcc56b44e79d] = env->getMethodID(cls, "startPosition", "()I");
              mids$[mid_width_9972fcc56b44e79d] = env->getMethodID(cls, "width", "()I");

              class$ = new ::java::lang::Class(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          NearSpansOrdered::NearSpansOrdered(jint a0, const ::java::util::List & a1) : ::org::apache::lucene::search::spans::ConjunctionSpans(env->newObject(initializeClass, &mids$, mid_init$_64683aefa58cdb7d, a0, a1.this$)) {}

          void NearSpansOrdered::collect(const ::org::apache::lucene::search::spans::SpanCollector & a0) const
          {
            env->callVoidMethod(this$, mids$[mid_collect_810c6539c62abcf6], a0.this$);
          }

          jint NearSpansOrdered::endPosition() const
          {
            return env->callIntMethod(this$, mids$[mid_endPosition_9972fcc56b44e79d]);
          }

          jint NearSpansOrdered::nextStartPosition() const
          {
            return env->callIntMethod(this$, mids$[mid_nextStartPosition_9972fcc56b44e79d]);
          }

          jint NearSpansOrdered::startPosition() const
          {
            return env->callIntMethod(this$, mids$[mid_startPosition_9972fcc56b44e79d]);
          }

          jint NearSpansOrdered::width() const
          {
            return env->callIntMethod(this$, mids$[mid_width_9972fcc56b44e79d]);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace spans {
          static PyObject *t_NearSpansOrdered_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_NearSpansOrdered_instance_(PyTypeObject *type, PyObject *arg);
          static int t_NearSpansOrdered_init_(t_NearSpansOrdered *self, PyObject *args, PyObject *kwds);
          static PyObject *t_NearSpansOrdered_collect(t_NearSpansOrdered *self, PyObject *args);
          static PyObject *t_NearSpansOrdered_endPosition(t_NearSpansOrdered *self, PyObject *args);
          static PyObject *t_NearSpansOrdered_nextStartPosition(t_NearSpansOrdered *self, PyObject *args);
          static PyObject *t_NearSpansOrdered_startPosition(t_NearSpansOrdered *self, PyObject *args);
          static PyObject *t_NearSpansOrdered_width(t_NearSpansOrdered *self, PyObject *args);

          static PyMethodDef t_NearSpansOrdered__methods_[] = {
            DECLARE_METHOD(t_NearSpansOrdered, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_NearSpansOrdered, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_NearSpansOrdered, collect, METH_VARARGS),
            DECLARE_METHOD(t_NearSpansOrdered, endPosition, METH_VARARGS),
            DECLARE_METHOD(t_NearSpansOrdered, nextStartPosition, METH_VARARGS),
            DECLARE_METHOD(t_NearSpansOrdered, startPosition, METH_VARARGS),
            DECLARE_METHOD(t_NearSpansOrdered, width, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          static PyType_Slot PY_TYPE_SLOTS(NearSpansOrdered)[] = {
            { Py_tp_methods, t_NearSpansOrdered__methods_ },
            { Py_tp_init, (void *) t_NearSpansOrdered_init_ },
            { 0, NULL }
          };

          static PyType_Def *PY_TYPE_BASES(NearSpansOrdered)[] = {
            &PY_TYPE_DEF(::org::apache::lucene::search::spans::ConjunctionSpans),
            NULL
          };

          DEFINE_TYPE(NearSpansOrdered, t_NearSpansOrdered, NearSpansOrdered);

          void t_NearSpansOrdered::install(PyObject *module)
          {
            installType(&PY_TYPE(NearSpansOrdered), &PY_TYPE_DEF(NearSpansOrdered), module, "NearSpansOrdered", 0);
          }

          void t_NearSpansOrdered::initialize(PyObject *module)
          {
            PyObject_SetAttrString((PyObject *) PY_TYPE(NearSpansOrdered), "class_", make_descriptor(NearSpansOrdered::initializeClass, 1));
            PyObject_SetAttrString((PyObject *) PY_TYPE(NearSpansOrdered), "wrapfn_", make_descriptor(t_NearSpansOrdered::wrap_jobject));
            PyObject_SetAttrString((PyObject *) PY_TYPE(NearSpansOrdered), "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_NearSpansOrdered_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, NearSpansOrdered::initializeClass, 1)))
              return NULL;
            return t_NearSpansOrdered::wrap_Object(NearSpansOrdered(((t_NearSpansOrdered *) arg)->object.this$));
          }
          static PyObject *t_NearSpansOrdered_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, NearSpansOrdered::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_NearSpansOrdered_init_(t_NearSpansOrdered *self, PyObject *args, PyObject *kwds)
          {
            jint a0;
            ::java::util::List a1((jobject) NULL);
            PyTypeObject **p1;
            NearSpansOrdered object((jobject) NULL);

            if (!parseArgs(args, "IK", ::java::util::List::initializeClass, &a0, &a1, &p1, ::java::util::t_List::parameters_))
            {
              INT_CALL(object = NearSpansOrdered(a0, a1));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_NearSpansOrdered_collect(t_NearSpansOrdered *self, PyObject *args)
          {
            ::org::apache::lucene::search::spans::SpanCollector a0((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::search::spans::SpanCollector::initializeClass, &a0))
            {
              OBJ_CALL(self->object.collect(a0));
              Py_RETURN_NONE;
            }

            return callSuper(PY_TYPE(NearSpansOrdered), (PyObject *) self, "collect", args, 2);
          }

          static PyObject *t_NearSpansOrdered_endPosition(t_NearSpansOrdered *self, PyObject *args)
          {
            jint result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.endPosition());
              return PyLong_FromLong((long) result);
            }

            return callSuper(PY_TYPE(NearSpansOrdered), (PyObject *) self, "endPosition", args, 2);
          }

          static PyObject *t_NearSpansOrdered_nextStartPosition(t_NearSpansOrdered *self, PyObject *args)
          {
            jint result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.nextStartPosition());
              return PyLong_FromLong((long) result);
            }

            return callSuper(PY_TYPE(NearSpansOrdered), (PyObject *) self, "nextStartPosition", args, 2);
          }

          static PyObject *t_NearSpansOrdered_startPosition(t_NearSpansOrdered *self, PyObject *args)
          {
            jint result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.startPosition());
              return PyLong_FromLong((long) result);
            }

            return callSuper(PY_TYPE(NearSpansOrdered), (PyObject *) self, "startPosition", args, 2);
          }

          static PyObject *t_NearSpansOrdered_width(t_NearSpansOrdered *self, PyObject *args)
          {
            jint result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.width());
              return PyLong_FromLong((long) result);
            }

            return callSuper(PY_TYPE(NearSpansOrdered), (PyObject *) self, "width", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/tr/ApostropheFilter.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/analysis/TokenStream.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace tr {

          ::java::lang::Class *ApostropheFilter::class$ = NULL;
          jmethodID *ApostropheFilter::mids$ = NULL;
          bool ApostropheFilter::live$ = false;

          jclass ApostropheFilter::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/tr/ApostropheFilter");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_c26756868a754f4e] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/analysis/TokenStream;)V");
              mids$[mid_incrementToken_8454bd5aa23fd11e] = env->getMethodID(cls, "incrementToken", "()Z");

              class$ = new ::java::lang::Class(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          ApostropheFilter::ApostropheFilter(const ::org::apache::lucene::analysis::TokenStream & a0) : ::org::apache::lucene::analysis::TokenFilter(env->newObject(initializeClass, &mids$, mid_init$_c26756868a754f4e, a0.this$)) {}

          jboolean ApostropheFilter::incrementToken() const
          {
            return env->callBooleanMethod(this$, mids$[mid_incrementToken_8454bd5aa23fd11e]);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace tr {
          static PyObject *t_ApostropheFilter_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_ApostropheFilter_instance_(PyTypeObject *type, PyObject *arg);
          static int t_ApostropheFilter_init_(t_ApostropheFilter *self, PyObject *args, PyObject *kwds);
          static PyObject *t_ApostropheFilter_incrementToken(t_ApostropheFilter *self, PyObject *args);

          static PyMethodDef t_ApostropheFilter__methods_[] = {
            DECLARE_METHOD(t_ApostropheFilter, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_ApostropheFilter, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_ApostropheFilter, incrementToken, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          static PyType_Slot PY_TYPE_SLOTS(ApostropheFilter)[] = {
            { Py_tp_methods, t_ApostropheFilter__methods_ },
            { Py_tp_init, (void *) t_ApostropheFilter_init_ },
            { 0, NULL }
          };

          static PyType_Def *PY_TYPE_BASES(ApostropheFilter)[] = {
            &PY_TYPE_DEF(::org::apache::lucene::analysis::TokenFilter),
            NULL
          };

          DEFINE_TYPE(ApostropheFilter, t_ApostropheFilter, ApostropheFilter);

          void t_ApostropheFilter::install(PyObject *module)
          {
            installType(&PY_TYPE(ApostropheFilter), &PY_TYPE_DEF(ApostropheFilter), module, "ApostropheFilter", 0);
          }

          void t_ApostropheFilter::initialize(PyObject *module)
          {
            PyObject_SetAttrString((PyObject *) PY_TYPE(ApostropheFilter), "class_", make_descriptor(ApostropheFilter::initializeClass, 1));
            PyObject_SetAttrString((PyObject *) PY_TYPE(ApostropheFilter), "wrapfn_", make_descriptor(t_ApostropheFilter::wrap_jobject));
            PyObject_SetAttrString((PyObject *) PY_TYPE(ApostropheFilter), "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_ApostropheFilter_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, ApostropheFilter::initializeClass, 1)))
              return NULL;
            return t_ApostropheFilter::wrap_Object(ApostropheFilter(((t_ApostropheFilter *) arg)->object.this$));
          }
          static PyObject *t_ApostropheFilter_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, ApostropheFilter::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_ApostropheFilter_init_(t_ApostropheFilter *self, PyObject *args, PyObject *kwds)
          {
            ::org::apache::lucene::analysis::TokenStream a0((jobject) NULL);
            ApostropheFilter object((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::analysis::TokenStream::initializeClass, &a0))
            {
              INT_CALL(object = ApostropheFilter(a0));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_ApostropheFilter_incrementToken(t_ApostropheFilter *self, PyObject *args)
          {
            jboolean result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.incrementToken());
              Py_RETURN_BOOL(result);
            }

            return callSuper(PY_TYPE(ApostropheFilter), (PyObject *) self, "incrementToken", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/similarities/LMSimilarity$CollectionModel.h"
#include "org/apache/lucene/search/similarities/BasicStats.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace similarities {

          ::java::lang::Class *LMSimilarity$CollectionModel::class$ = NULL;
          jmethodID *LMSimilarity$CollectionModel::mids$ = NULL;
          bool LMSimilarity$CollectionModel::live$ = false;

          jclass LMSimilarity$CollectionModel::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/search/similarities/LMSimilarity$CollectionModel");

              mids$ = new jmethodID[max_mid];
              mids$[mid_computeProbability_3f1239f1e5e20981] = env->getMethodID(cls, "computeProbability", "(Lorg/apache/lucene/search/similarities/BasicStats;)D");
              mids$[mid_getName_db9b55ba01e03e4b] = env->getMethodID(cls, "getName", "()Ljava/lang/String;");

              class$ = new ::java::lang::Class(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          jdouble LMSimilarity$CollectionModel::computeProbability(const ::org::apache::lucene::search::similarities::BasicStats & a0) const
          {
            return env->callDoubleMethod(this$, mids$[mid_computeProbability_3f1239f1e5e20981], a0.this$);
          }

          ::java::lang::String LMSimilarity$CollectionModel::getName() const
          {
            return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_getName_db9b55ba01e03e4b]));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace similarities {
          static PyObject *t_LMSimilarity$CollectionModel_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_LMSimilarity$CollectionModel_instance_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_LMSimilarity$CollectionModel_computeProbability(t_LMSimilarity$CollectionModel *self, PyObject *arg);
          static PyObject *t_LMSimilarity$CollectionModel_getName(t_LMSimilarity$CollectionModel *self);
          static PyObject *t_LMSimilarity$CollectionModel_get__name(t_LMSimilarity$CollectionModel *self, void *data);
          static PyGetSetDef t_LMSimilarity$CollectionModel__fields_[] = {
            DECLARE_GET_FIELD(t_LMSimilarity$CollectionModel, name),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_LMSimilarity$CollectionModel__methods_[] = {
            DECLARE_METHOD(t_LMSimilarity$CollectionModel, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_LMSimilarity$CollectionModel, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_LMSimilarity$CollectionModel, computeProbability, METH_O),
            DECLARE_METHOD(t_LMSimilarity$CollectionModel, getName, METH_NOARGS),
            { NULL, NULL, 0, NULL }
          };

          static PyType_Slot PY_TYPE_SLOTS(LMSimilarity$CollectionModel)[] = {
            { Py_tp_methods, t_LMSimilarity$CollectionModel__methods_ },
            { Py_tp_init, (void *) abstract_init },
            { Py_tp_getset, t_LMSimilarity$CollectionModel__fields_ },
            { 0, NULL }
          };

          static PyType_Def *PY_TYPE_BASES(LMSimilarity$CollectionModel)[] = {
            &PY_TYPE_DEF(::java::lang::Object),
            NULL
          };

          DEFINE_TYPE(LMSimilarity$CollectionModel, t_LMSimilarity$CollectionModel, LMSimilarity$CollectionModel);

          void t_LMSimilarity$CollectionModel::install(PyObject *module)
          {
            installType(&PY_TYPE(LMSimilarity$CollectionModel), &PY_TYPE_DEF(LMSimilarity$CollectionModel), module, "LMSimilarity$CollectionModel", 0);
          }

          void t_LMSimilarity$CollectionModel::initialize(PyObject *module)
          {
            PyObject_SetAttrString((PyObject *) PY_TYPE(LMSimilarity$CollectionModel), "class_", make_descriptor(LMSimilarity$CollectionModel::initializeClass, 1));
            PyObject_SetAttrString((PyObject *) PY_TYPE(LMSimilarity$CollectionModel), "wrapfn_", make_descriptor(t_LMSimilarity$CollectionModel::wrap_jobject));
            PyObject_SetAttrString((PyObject *) PY_TYPE(LMSimilarity$CollectionModel), "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_LMSimilarity$CollectionModel_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, LMSimilarity$CollectionModel::initializeClass, 1)))
              return NULL;
            return t_LMSimilarity$CollectionModel::wrap_Object(LMSimilarity$CollectionModel(((t_LMSimilarity$CollectionModel *) arg)->object.this$));
          }
          static PyObject *t_LMSimilarity$CollectionModel_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, LMSimilarity$CollectionModel::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static PyObject *t_LMSimilarity$CollectionModel_computeProbability(t_LMSimilarity$CollectionModel *self, PyObject *arg)
          {
            ::org::apache::lucene::search::similarities::BasicStats a0((jobject) NULL);
            jdouble result;

            if (!parseArg(arg, "k", ::org::apache::lucene::search::similarities::BasicStats::initializeClass, &a0))
            {
              OBJ_CALL(result = self->object.computeProbability(a0));
              return PyFloat_FromDouble((double) result);
            }

            PyErr_SetArgsError((PyObject *) self, "computeProbability", arg);
            return NULL;
          }

          static PyObject *t_LMSimilarity$CollectionModel_getName(t_LMSimilarity$CollectionModel *self)
          {
            ::java::lang::String result((jobject) NULL);
            OBJ_CALL(result = self->object.getName());
            return j2p(result);
          }

          static PyObject *t_LMSimilarity$CollectionModel_get__name(t_LMSimilarity$CollectionModel *self, void *data)
          {
            ::java::lang::String value((jobject) NULL);
            OBJ_CALL(value = self->object.getName());
            return j2p(value);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/ja/tokenattributes/InflectionAttributeImpl.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/analysis/ja/tokenattributes/InflectionAttribute.h"
#include "org/apache/lucene/analysis/ja/Token.h"
#include "java/lang/String.h"
#include "org/apache/lucene/util/AttributeReflector.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace ja {
          namespace tokenattributes {

            ::java::lang::Class *InflectionAttributeImpl::class$ = NULL;
            jmethodID *InflectionAttributeImpl::mids$ = NULL;
            bool InflectionAttributeImpl::live$ = false;

            jclass InflectionAttributeImpl::initializeClass(bool getOnly)
            {
              if (getOnly)
                return (jclass) (live$ ? class$->this$ : NULL);
              if (class$ == NULL)
              {
                jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/ja/tokenattributes/InflectionAttributeImpl");

                mids$ = new jmethodID[max_mid];
                mids$[mid_init$_f2cc1bce94666404] = env->getMethodID(cls, "<init>", "()V");
                mids$[mid_clear_f2cc1bce94666404] = env->getMethodID(cls, "clear", "()V");
                mids$[mid_copyTo_26346c38ebc9c090] = env->getMethodID(cls, "copyTo", "(Lorg/apache/lucene/util/AttributeImpl;)V");
                mids$[mid_getInflectionForm_db9b55ba01e03e4b] = env->getMethodID(cls, "getInflectionForm", "()Ljava/lang/String;");
                mids$[mid_getInflectionType_db9b55ba01e03e4b] = env->getMethodID(cls, "getInflectionType", "()Ljava/lang/String;");
                mids$[mid_reflectWith_b880c72ee67200af] = env->getMethodID(cls, "reflectWith", "(Lorg/apache/lucene/util/AttributeReflector;)V");
                mids$[mid_setToken_e7eb8cf5a63e4354] = env->getMethodID(cls, "setToken", "(Lorg/apache/lucene/analysis/ja/Token;)V");

                class$ = new ::java::lang::Class(cls);
                live$ = true;
              }
              return (jclass) class$->this$;
            }

            InflectionAttributeImpl::InflectionAttributeImpl() : ::org::apache::lucene::util::AttributeImpl(env->newObject(initializeClass, &mids$, mid_init$_f2cc1bce94666404)) {}

            void InflectionAttributeImpl::clear() const
            {
              env->callVoidMethod(this$, mids$[mid_clear_f2cc1bce94666404]);
            }

            void InflectionAttributeImpl::copyTo(const ::org::apache::lucene::util::AttributeImpl & a0) const
            {
              env->callVoidMethod(this$, mids$[mid_copyTo_26346c38ebc9c090], a0.this$);
            }

            ::java::lang::String InflectionAttributeImpl::getInflectionForm() const
            {
              return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_getInflectionForm_db9b55ba01e03e4b]));
            }

            ::java::lang::String InflectionAttributeImpl::getInflectionType() const
            {
              return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_getInflectionType_db9b55ba01e03e4b]));
            }

            void InflectionAttributeImpl::reflectWith(const ::org::apache::lucene::util::AttributeReflector & a0) const
            {
              env->callVoidMethod(this$, mids$[mid_reflectWith_b880c72ee67200af], a0.this$);
            }

            void InflectionAttributeImpl::setToken(const ::org::apache::lucene::analysis::ja::Token & a0) const
            {
              env->callVoidMethod(this$, mids$[mid_setToken_e7eb8cf5a63e4354], a0.this$);
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace ja {
          namespace tokenattributes {
            static PyObject *t_InflectionAttributeImpl_cast_(PyTypeObject *type, PyObject *arg);
            static PyObject *t_InflectionAttributeImpl_instance_(PyTypeObject *type, PyObject *arg);
            static int t_InflectionAttributeImpl_init_(t_InflectionAttributeImpl *self, PyObject *args, PyObject *kwds);
            static PyObject *t_InflectionAttributeImpl_clear(t_InflectionAttributeImpl *self, PyObject *args);
            static PyObject *t_InflectionAttributeImpl_copyTo(t_InflectionAttributeImpl *self, PyObject *args);
            static PyObject *t_InflectionAttributeImpl_getInflectionForm(t_InflectionAttributeImpl *self);
            static PyObject *t_InflectionAttributeImpl_getInflectionType(t_InflectionAttributeImpl *self);
            static PyObject *t_InflectionAttributeImpl_reflectWith(t_InflectionAttributeImpl *self, PyObject *args);
            static PyObject *t_InflectionAttributeImpl_setToken(t_InflectionAttributeImpl *self, PyObject *arg);
            static PyObject *t_InflectionAttributeImpl_get__inflectionForm(t_InflectionAttributeImpl *self, void *data);
            static PyObject *t_InflectionAttributeImpl_get__inflectionType(t_InflectionAttributeImpl *self, void *data);
            static int t_InflectionAttributeImpl_set__token(t_InflectionAttributeImpl *self, PyObject *arg, void *data);
            static PyGetSetDef t_InflectionAttributeImpl__fields_[] = {
              DECLARE_GET_FIELD(t_InflectionAttributeImpl, inflectionForm),
              DECLARE_GET_FIELD(t_InflectionAttributeImpl, inflectionType),
              DECLARE_SET_FIELD(t_InflectionAttributeImpl, token),
              { NULL, NULL, NULL, NULL, NULL }
            };

            static PyMethodDef t_InflectionAttributeImpl__methods_[] = {
              DECLARE_METHOD(t_InflectionAttributeImpl, cast_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_InflectionAttributeImpl, instance_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_InflectionAttributeImpl, clear, METH_VARARGS),
              DECLARE_METHOD(t_InflectionAttributeImpl, copyTo, METH_VARARGS),
              DECLARE_METHOD(t_InflectionAttributeImpl, getInflectionForm, METH_NOARGS),
              DECLARE_METHOD(t_InflectionAttributeImpl, getInflectionType, METH_NOARGS),
              DECLARE_METHOD(t_InflectionAttributeImpl, reflectWith, METH_VARARGS),
              DECLARE_METHOD(t_InflectionAttributeImpl, setToken, METH_O),
              { NULL, NULL, 0, NULL }
            };

            static PyType_Slot PY_TYPE_SLOTS(InflectionAttributeImpl)[] = {
              { Py_tp_methods, t_InflectionAttributeImpl__methods_ },
              { Py_tp_init, (void *) t_InflectionAttributeImpl_init_ },
              { Py_tp_getset, t_InflectionAttributeImpl__fields_ },
              { 0, NULL }
            };

            static PyType_Def *PY_TYPE_BASES(InflectionAttributeImpl)[] = {
              &PY_TYPE_DEF(::org::apache::lucene::util::AttributeImpl),
              NULL
            };

            DEFINE_TYPE(InflectionAttributeImpl, t_InflectionAttributeImpl, InflectionAttributeImpl);

            void t_InflectionAttributeImpl::install(PyObject *module)
            {
              installType(&PY_TYPE(InflectionAttributeImpl), &PY_TYPE_DEF(InflectionAttributeImpl), module, "InflectionAttributeImpl", 0);
            }

            void t_InflectionAttributeImpl::initialize(PyObject *module)
            {
              PyObject_SetAttrString((PyObject *) PY_TYPE(InflectionAttributeImpl), "class_", make_descriptor(InflectionAttributeImpl::initializeClass, 1));
              PyObject_SetAttrString((PyObject *) PY_TYPE(InflectionAttributeImpl), "wrapfn_", make_descriptor(t_InflectionAttributeImpl::wrap_jobject));
              PyObject_SetAttrString((PyObject *) PY_TYPE(InflectionAttributeImpl), "boxfn_", make_descriptor(boxObject));
            }

            static PyObject *t_InflectionAttributeImpl_cast_(PyTypeObject *type, PyObject *arg)
            {
              if (!(arg = castCheck(arg, InflectionAttributeImpl::initializeClass, 1)))
                return NULL;
              return t_InflectionAttributeImpl::wrap_Object(InflectionAttributeImpl(((t_InflectionAttributeImpl *) arg)->object.this$));
            }
            static PyObject *t_InflectionAttributeImpl_instance_(PyTypeObject *type, PyObject *arg)
            {
              if (!castCheck(arg, InflectionAttributeImpl::initializeClass, 0))
                Py_RETURN_FALSE;
              Py_RETURN_TRUE;
            }

            static int t_InflectionAttributeImpl_init_(t_InflectionAttributeImpl *self, PyObject *args, PyObject *kwds)
            {
              InflectionAttributeImpl object((jobject) NULL);

              INT_CALL(object = InflectionAttributeImpl());
              self->object = object;

              return 0;
            }

            static PyObject *t_InflectionAttributeImpl_clear(t_InflectionAttributeImpl *self, PyObject *args)
            {

              if (!parseArgs(args, ""))
              {
                OBJ_CALL(self->object.clear());
                Py_RETURN_NONE;
              }

              return callSuper(PY_TYPE(InflectionAttributeImpl), (PyObject *) self, "clear", args, 2);
            }

            static PyObject *t_InflectionAttributeImpl_copyTo(t_InflectionAttributeImpl *self, PyObject *args)
            {
              ::org::apache::lucene::util::AttributeImpl a0((jobject) NULL);

              if (!parseArgs(args, "k", ::org::apache::lucene::util::AttributeImpl::initializeClass, &a0))
              {
                OBJ_CALL(self->object.copyTo(a0));
                Py_RETURN_NONE;
              }

              return callSuper(PY_TYPE(InflectionAttributeImpl), (PyObject *) self, "copyTo", args, 2);
            }

            static PyObject *t_InflectionAttributeImpl_getInflectionForm(t_InflectionAttributeImpl *self)
            {
              ::java::lang::String result((jobject) NULL);
              OBJ_CALL(result = self->object.getInflectionForm());
              return j2p(result);
            }

            static PyObject *t_InflectionAttributeImpl_getInflectionType(t_InflectionAttributeImpl *self)
            {
              ::java::lang::String result((jobject) NULL);
              OBJ_CALL(result = self->object.getInflectionType());
              return j2p(result);
            }

            static PyObject *t_InflectionAttributeImpl_reflectWith(t_InflectionAttributeImpl *self, PyObject *args)
            {
              ::org::apache::lucene::util::AttributeReflector a0((jobject) NULL);

              if (!parseArgs(args, "k", ::org::apache::lucene::util::AttributeReflector::initializeClass, &a0))
              {
                OBJ_CALL(self->object.reflectWith(a0));
                Py_RETURN_NONE;
              }

              return callSuper(PY_TYPE(InflectionAttributeImpl), (PyObject *) self, "reflectWith", args, 2);
            }

            static PyObject *t_InflectionAttributeImpl_setToken(t_InflectionAttributeImpl *self, PyObject *arg)
            {
              ::org::apache::lucene::analysis::ja::Token a0((jobject) NULL);

              if (!parseArg(arg, "k", ::org::apache::lucene::analysis::ja::Token::initializeClass, &a0))
              {
                OBJ_CALL(self->object.setToken(a0));
                Py_RETURN_NONE;
              }

              PyErr_SetArgsError((PyObject *) self, "setToken", arg);
              return NULL;
            }

            static PyObject *t_InflectionAttributeImpl_get__inflectionForm(t_InflectionAttributeImpl *self, void *data)
            {
              ::java::lang::String value((jobject) NULL);
              OBJ_CALL(value = self->object.getInflectionForm());
              return j2p(value);
            }

            static PyObject *t_InflectionAttributeImpl_get__inflectionType(t_InflectionAttributeImpl *self, void *data)
            {
              ::java::lang::String value((jobject) NULL);
              OBJ_CALL(value = self->object.getInflectionType());
              return j2p(value);
            }

            static int t_InflectionAttributeImpl_set__token(t_InflectionAttributeImpl *self, PyObject *arg, void *data)
            {
              {
                ::org::apache::lucene::analysis::ja::Token value((jobject) NULL);
                if (!parseArg(arg, "k", ::org::apache::lucene::analysis::ja::Token::initializeClass, &value))
                {
                  INT_CALL(self->object.setToken(value));
                  return 0;
                }
              }
              PyErr_SetArgsError((PyObject *) self, "token", arg);
              return -1;
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/util/packed/PackedLongValues$Iterator.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        namespace packed {

          ::java::lang::Class *PackedLongValues$Iterator::class$ = NULL;
          jmethodID *PackedLongValues$Iterator::mids$ = NULL;
          bool PackedLongValues$Iterator::live$ = false;

          jclass PackedLongValues$Iterator::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/util/packed/PackedLongValues$Iterator");

              mids$ = new jmethodID[max_mid];
              mids$[mid_hasNext_8454bd5aa23fd11e] = env->getMethodID(cls, "hasNext", "()Z");
              mids$[mid_next_2e5ae9edcb9b072f] = env->getMethodID(cls, "next", "()J");

              class$ = new ::java::lang::Class(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          jboolean PackedLongValues$Iterator::hasNext() const
          {
            return env->callBooleanMethod(this$, mids$[mid_hasNext_8454bd5aa23fd11e]);
          }

          jlong PackedLongValues$Iterator::next() const
          {
            return env->callLongMethod(this$, mids$[mid_next_2e5ae9edcb9b072f]);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        namespace packed {
          static PyObject *t_PackedLongValues$Iterator_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_PackedLongValues$Iterator_instance_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_PackedLongValues$Iterator_hasNext(t_PackedLongValues$Iterator *self);
          static PyObject *t_PackedLongValues$Iterator_next(t_PackedLongValues$Iterator *self);

          static PyMethodDef t_PackedLongValues$Iterator__methods_[] = {
            DECLARE_METHOD(t_PackedLongValues$Iterator, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_PackedLongValues$Iterator, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_PackedLongValues$Iterator, hasNext, METH_NOARGS),
            DECLARE_METHOD(t_PackedLongValues$Iterator, next, METH_NOARGS),
            { NULL, NULL, 0, NULL }
          };

          static PyType_Slot PY_TYPE_SLOTS(PackedLongValues$Iterator)[] = {
            { Py_tp_methods, t_PackedLongValues$Iterator__methods_ },
            { Py_tp_init, (void *) abstract_init },
            { 0, NULL }
          };

          static PyType_Def *PY_TYPE_BASES(PackedLongValues$Iterator)[] = {
            &PY_TYPE_DEF(::java::lang::Object),
            NULL
          };

          DEFINE_TYPE(PackedLongValues$Iterator, t_PackedLongValues$Iterator, PackedLongValues$Iterator);

          void t_PackedLongValues$Iterator::install(PyObject *module)
          {
            installType(&PY_TYPE(PackedLongValues$Iterator), &PY_TYPE_DEF(PackedLongValues$Iterator), module, "PackedLongValues$Iterator", 0);
          }

          void t_PackedLongValues$Iterator::initialize(PyObject *module)
          {
            PyObject_SetAttrString((PyObject *) PY_TYPE(PackedLongValues$Iterator), "class_", make_descriptor(PackedLongValues$Iterator::initializeClass, 1));
            PyObject_SetAttrString((PyObject *) PY_TYPE(PackedLongValues$Iterator), "wrapfn_", make_descriptor(t_PackedLongValues$Iterator::wrap_jobject));
            PyObject_SetAttrString((PyObject *) PY_TYPE(PackedLongValues$Iterator), "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_PackedLongValues$Iterator_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, PackedLongValues$Iterator::initializeClass, 1)))
              return NULL;
            return t_PackedLongValues$Iterator::wrap_Object(PackedLongValues$Iterator(((t_PackedLongValues$Iterator *) arg)->object.this$));
          }
          static PyObject *t_PackedLongValues$Iterator_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, PackedLongValues$Iterator::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static PyObject *t_PackedLongValues$Iterator_hasNext(t_PackedLongValues$Iterator *self)
          {
            jboolean result;
            OBJ_CALL(result = self->object.hasNext());
            Py_RETURN_BOOL(result);
          }

          static PyObject *t_PackedLongValues$Iterator_next(t_PackedLongValues$Iterator *self)
          {
            jlong result;
            OBJ_CALL(result = self->object.next());
            return PyLong_FromLongLong((PY_LONG_LONG) result);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/IndexSearcher$LeafSlice.h"
#include "org/apache/lucene/index/LeafReaderContext.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {

        ::java::lang::Class *IndexSearcher$LeafSlice::class$ = NULL;
        jmethodID *IndexSearcher$LeafSlice::mids$ = NULL;
        jfieldID *IndexSearcher$LeafSlice::fids$ = NULL;
        bool IndexSearcher$LeafSlice::live$ = false;

        jclass IndexSearcher$LeafSlice::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/search/IndexSearcher$LeafSlice");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_cd9bbfc70b85fed0] = env->getMethodID(cls, "<init>", "([Lorg/apache/lucene/index/LeafReaderContext;)V");

            fids$ = new jfieldID[max_fid];
            fids$[fid_leaves] = env->getFieldID(cls, "leaves", "[Lorg/apache/lucene/index/LeafReaderContext;");

            class$ = new ::java::lang::Class(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        IndexSearcher$LeafSlice::IndexSearcher$LeafSlice(const JArray< ::org::apache::lucene::index::LeafReaderContext > & a0) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_cd9bbfc70b85fed0, a0.this$)) {}

        JArray< ::org::apache::lucene::index::LeafReaderContext > IndexSearcher$LeafSlice::_get_leaves() const
        {
          return JArray< ::org::apache::lucene::index::LeafReaderContext >(env->getObjectField(this$, fids$[fid_leaves]));
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        static PyObject *t_IndexSearcher$LeafSlice_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_IndexSearcher$LeafSlice_instance_(PyTypeObject *type, PyObject *arg);
        static int t_IndexSearcher$LeafSlice_init_(t_IndexSearcher$LeafSlice *self, PyObject *args, PyObject *kwds);
        static PyObject *t_IndexSearcher$LeafSlice_get__leaves(t_IndexSearcher$LeafSlice *self, void *data);

        static PyGetSetDef t_IndexSearcher$LeafSlice__fields_[] = {
          DECLARE_GET_FIELD(t_IndexSearcher$LeafSlice, leaves),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_IndexSearcher$LeafSlice__methods_[] = {
          DECLARE_METHOD(t_IndexSearcher$LeafSlice, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_IndexSearcher$LeafSlice, instance_, METH_O | METH_CLASS),
          { NULL, NULL, 0, NULL }
        };

        static PyType_Slot PY_TYPE_SLOTS(IndexSearcher$LeafSlice)[] = {
          { Py_tp_methods, t_IndexSearcher$LeafSlice__methods_ },
          { Py_tp_init, (void *) t_IndexSearcher$LeafSlice_init_ },
          { Py_tp_getset, t_IndexSearcher$LeafSlice__fields_ },
          { 0, NULL }
        };

        static PyType_Def *PY_TYPE_BASES(IndexSearcher$LeafSlice)[] = {
          &PY_TYPE_DEF(::java::lang::Object),
          NULL
        };

        DEFINE_TYPE(IndexSearcher$LeafSlice, t_IndexSearcher$LeafSlice, IndexSearcher$LeafSlice);

        void t_IndexSearcher$LeafSlice::install(PyObject *module)
        {
          installType(&PY_TYPE(IndexSearcher$LeafSlice), &PY_TYPE_DEF(IndexSearcher$LeafSlice), module, "IndexSearcher$LeafSlice", 0);
        }

        void t_IndexSearcher$LeafSlice::initialize(PyObject *module)
        {
          PyObject_SetAttrString((PyObject *) PY_TYPE(IndexSearcher$LeafSlice), "class_", make_descriptor(IndexSearcher$LeafSlice::initializeClass, 1));
          PyObject_SetAttrString((PyObject *) PY_TYPE(IndexSearcher$LeafSlice), "wrapfn_", make_descriptor(t_IndexSearcher$LeafSlice::wrap_jobject));
          PyObject_SetAttrString((PyObject *) PY_TYPE(IndexSearcher$LeafSlice), "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_IndexSearcher$LeafSlice_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, IndexSearcher$LeafSlice::initializeClass, 1)))
            return NULL;
          return t_IndexSearcher$LeafSlice::wrap_Object(IndexSearcher$LeafSlice(((t_IndexSearcher$LeafSlice *) arg)->object.this$));
        }
        static PyObject *t_IndexSearcher$LeafSlice_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, IndexSearcher$LeafSlice::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_IndexSearcher$LeafSlice_init_(t_IndexSearcher$LeafSlice *self, PyObject *args, PyObject *kwds)
        {
          JArray< ::org::apache::lucene::index::LeafReaderContext > a0((jobject) NULL);
          IndexSearcher$LeafSlice object((jobject) NULL);

          if (!parseArgs(args, "[k", ::org::apache::lucene::index::LeafReaderContext::initializeClass, &a0))
          {
            INT_CALL(object = IndexSearcher$LeafSlice(a0));
            self->object = object;
          }
          else
          {
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }

        static PyObject *t_IndexSearcher$LeafSlice_get__leaves(t_IndexSearcher$LeafSlice *self, void *data)
        {
          JArray< ::org::apache::lucene::index::LeafReaderContext > value((jobject) NULL);
          OBJ_CALL(value = self->object._get_leaves());
          return JArray<jobject>(value.this$).wrap(::org::apache::lucene::index::t_LeafReaderContext::wrap_jobject);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/codecs/lucene70/Lucene70Codec.h"
#include "org/apache/lucene/codecs/FieldInfosFormat.h"
#include "org/apache/lucene/codecs/DocValuesFormat.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/codecs/CompoundFormat.h"
#include "org/apache/lucene/codecs/SegmentInfoFormat.h"
#include "org/apache/lucene/codecs/StoredFieldsFormat.h"
#include "org/apache/lucene/codecs/LiveDocsFormat.h"
#include "org/apache/lucene/codecs/NormsFormat.h"
#include "org/apache/lucene/codecs/PointsFormat.h"
#include "org/apache/lucene/codecs/TermVectorsFormat.h"
#include "org/apache/lucene/codecs/PostingsFormat.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace codecs {
        namespace lucene70 {

          ::java::lang::Class *Lucene70Codec::class$ = NULL;
          jmethodID *Lucene70Codec::mids$ = NULL;
          bool Lucene70Codec::live$ = false;

          jclass Lucene70Codec::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/codecs/lucene70/Lucene70Codec");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_f2cc1bce94666404] = env->getMethodID(cls, "<init>", "()V");
              mids$[mid_compoundFormat_1641e3035b5e7063] = env->getMethodID(cls, "compoundFormat", "()Lorg/apache/lucene/codecs/CompoundFormat;");
              mids$[mid_docValuesFormat_a9c08d7c2b76eed3] = env->getMethodID(cls, "docValuesFormat", "()Lorg/apache/lucene/codecs/DocValuesFormat;");
              mids$[mid_fieldInfosFormat_48c0c59677397219] = env->getMethodID(cls, "fieldInfosFormat", "()Lorg/apache/lucene/codecs/FieldInfosFormat;");
              mids$[mid_liveDocsFormat_3c23f7d462a4a754] = env->getMethodID(cls, "liveDocsFormat", "()Lorg/apache/lucene/codecs/LiveDocsFormat;");
              mids$[mid_normsFormat_913a021834acbf93] = env->getMethodID(cls, "normsFormat", "()Lorg/apache/lucene/codecs/NormsFormat;");
              mids$[mid_pointsFormat_b24443532b28970b] = env->getMethodID(cls, "pointsFormat", "()Lorg/apache/lucene/codecs/PointsFormat;");
              mids$[mid_postingsFormat_1a5e16ceada7aa64] = env->getMethodID(cls, "postingsFormat", "()Lorg/apache/lucene/codecs/PostingsFormat;");
              mids$[mid_segmentInfoFormat_579fd0b88c210118] = env->getMethodID(cls, "segmentInfoFormat", "()Lorg/apache/lucene/codecs/SegmentInfoFormat;");
              mids$[mid_storedFieldsFormat_a6cbef21a6c483b7] = env->getMethodID(cls, "storedFieldsFormat", "()Lorg/apache/lucene/codecs/StoredFieldsFormat;");
              mids$[mid_termVectorsFormat_ae08b71ce8366567] = env->getMethodID(cls, "termVectorsFormat", "()Lorg/apache/lucene/codecs/TermVectorsFormat;");

              class$ = new ::java::lang::Class(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          Lucene70Codec::Lucene70Codec() : ::org::apache::lucene::codecs::Codec(env->newObject(initializeClass, &mids$, mid_init$_f2cc1bce94666404)) {}

          ::org::apache::lucene::codecs::CompoundFormat Lucene70Codec::compoundFormat() const
          {
            return ::org::apache::lucene::codecs::CompoundFormat(env->callObjectMethod(this$, mids$[mid_compoundFormat_1641e3035b5e7063]));
          }

          ::org::apache::lucene::codecs::DocValuesFormat Lucene70Codec::docValuesFormat() const
          {
            return ::org::apache::lucene::codecs::DocValuesFormat(env->callObjectMethod(this$, mids$[mid_docValuesFormat_a9c08d7c2b76eed3]));
          }

          ::org::apache::lucene::codecs::FieldInfosFormat Lucene70Codec::fieldInfosFormat() const
          {
            return ::org::apache::lucene::codecs::FieldInfosFormat(env->callObjectMethod(this$, mids$[mid_fieldInfosFormat_48c0c59677397219]));
          }

          ::org::apache::lucene::codecs::LiveDocsFormat Lucene70Codec::liveDocsFormat() const
          {
            return ::org::apache::lucene::codecs::LiveDocsFormat(env->callObjectMethod(this$, mids$[mid_liveDocsFormat_3c23f7d462a4a754]));
          }

          ::org::apache::lucene::codecs::NormsFormat Lucene70Codec::normsFormat() const
          {
            return ::org::apache::lucene::codecs::NormsFormat(env->callObjectMethod(this$, mids$[mid_normsFormat_913a021834acbf93]));
          }

          ::org::apache::lucene::codecs::PointsFormat Lucene70Codec::pointsFormat() const
          {
            return ::org::apache::lucene::codecs::PointsFormat(env->callObjectMethod(this$, mids$[mid_pointsFormat_b24443532b28970b]));
          }

          ::org::apache::lucene::codecs::PostingsFormat Lucene70Codec::postingsFormat() const
          {
            return ::org::apache::lucene::codecs::PostingsFormat(env->callObjectMethod(this$, mids$[mid_postingsFormat_1a5e16ceada7aa64]));
          }

          ::org::apache::lucene::codecs::SegmentInfoFormat Lucene70Codec::segmentInfoFormat() const
          {
            return ::org::apache::lucene::codecs::SegmentInfoFormat(env->callObjectMethod(this$, mids$[mid_segmentInfoFormat_579fd0b88c210118]));
          }

          ::org::apache::lucene::codecs::StoredFieldsFormat Lucene70Codec::storedFieldsFormat() const
          {
            return ::org::apache::lucene::codecs::StoredFieldsFormat(env->callObjectMethod(this$, mids$[mid_storedFieldsFormat_a6cbef21a6c483b7]));
          }

          ::org::apache::lucene::codecs::TermVectorsFormat Lucene70Codec::termVectorsFormat() const
          {
            return ::org::apache::lucene::codecs::TermVectorsFormat(env->callObjectMethod(this$, mids$[mid_termVectorsFormat_ae08b71ce8366567]));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace codecs {
        namespace lucene70 {
          static PyObject *t_Lucene70Codec_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_Lucene70Codec_instance_(PyTypeObject *type, PyObject *arg);
          static int t_Lucene70Codec_init_(t_Lucene70Codec *self, PyObject *args, PyObject *kwds);
          static PyObject *t_Lucene70Codec_compoundFormat(t_Lucene70Codec *self, PyObject *args);
          static PyObject *t_Lucene70Codec_docValuesFormat(t_Lucene70Codec *self, PyObject *args);
          static PyObject *t_Lucene70Codec_fieldInfosFormat(t_Lucene70Codec *self, PyObject *args);
          static PyObject *t_Lucene70Codec_liveDocsFormat(t_Lucene70Codec *self, PyObject *args);
          static PyObject *t_Lucene70Codec_normsFormat(t_Lucene70Codec *self, PyObject *args);
          static PyObject *t_Lucene70Codec_pointsFormat(t_Lucene70Codec *self, PyObject *args);
          static PyObject *t_Lucene70Codec_postingsFormat(t_Lucene70Codec *self, PyObject *args);
          static PyObject *t_Lucene70Codec_segmentInfoFormat(t_Lucene70Codec *self, PyObject *args);
          static PyObject *t_Lucene70Codec_storedFieldsFormat(t_Lucene70Codec *self, PyObject *args);
          static PyObject *t_Lucene70Codec_termVectorsFormat(t_Lucene70Codec *self, PyObject *args);

          static PyMethodDef t_Lucene70Codec__methods_[] = {
            DECLARE_METHOD(t_Lucene70Codec, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_Lucene70Codec, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_Lucene70Codec, compoundFormat, METH_VARARGS),
            DECLARE_METHOD(t_Lucene70Codec, docValuesFormat, METH_VARARGS),
            DECLARE_METHOD(t_Lucene70Codec, fieldInfosFormat, METH_VARARGS),
            DECLARE_METHOD(t_Lucene70Codec, liveDocsFormat, METH_VARARGS),
            DECLARE_METHOD(t_Lucene70Codec, normsFormat, METH_VARARGS),
            DECLARE_METHOD(t_Lucene70Codec, pointsFormat, METH_VARARGS),
            DECLARE_METHOD(t_Lucene70Codec, postingsFormat, METH_VARARGS),
            DECLARE_METHOD(t_Lucene70Codec, segmentInfoFormat, METH_VARARGS),
            DECLARE_METHOD(t_Lucene70Codec, storedFieldsFormat, METH_VARARGS),
            DECLARE_METHOD(t_Lucene70Codec, termVectorsFormat, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          static PyType_Slot PY_TYPE_SLOTS(Lucene70Codec)[] = {
            { Py_tp_methods, t_Lucene70Codec__methods_ },
            { Py_tp_init, (void *) t_Lucene70Codec_init_ },
            { 0, NULL }
          };

          static PyType_Def *PY_TYPE_BASES(Lucene70Codec)[] = {
            &PY_TYPE_DEF(::org::apache::lucene::codecs::Codec),
            NULL
          };

          DEFINE_TYPE(Lucene70Codec, t_Lucene70Codec, Lucene70Codec);

          void t_Lucene70Codec::install(PyObject *module)
          {
            installType(&PY_TYPE(Lucene70Codec), &PY_TYPE_DEF(Lucene70Codec), module, "Lucene70Codec", 0);
          }

          void t_Lucene70Codec::initialize(PyObject *module)
          {
            PyObject_SetAttrString((PyObject *) PY_TYPE(Lucene70Codec), "class_", make_descriptor(Lucene70Codec::initializeClass, 1));
            PyObject_SetAttrString((PyObject *) PY_TYPE(Lucene70Codec), "wrapfn_", make_descriptor(t_Lucene70Codec::wrap_jobject));
            PyObject_SetAttrString((PyObject *) PY_TYPE(Lucene70Codec), "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_Lucene70Codec_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, Lucene70Codec::initializeClass, 1)))
              return NULL;
            return t_Lucene70Codec::wrap_Object(Lucene70Codec(((t_Lucene70Codec *) arg)->object.this$));
          }
          static PyObject *t_Lucene70Codec_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, Lucene70Codec::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_Lucene70Codec_init_(t_Lucene70Codec *self, PyObject *args, PyObject *kwds)
          {
            Lucene70Codec object((jobject) NULL);

            INT_CALL(object = Lucene70Codec());
            self->object = object;

            return 0;
          }

          static PyObject *t_Lucene70Codec_compoundFormat(t_Lucene70Codec *self, PyObject *args)
          {
            ::org::apache::lucene::codecs::CompoundFormat result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.compoundFormat());
              return ::org::apache::lucene::codecs::t_CompoundFormat::wrap_Object(result);
            }

            return callSuper(PY_TYPE(Lucene70Codec), (PyObject *) self, "compoundFormat", args, 2);
          }

          static PyObject *t_Lucene70Codec_docValuesFormat(t_Lucene70Codec *self, PyObject *args)
          {
            ::org::apache::lucene::codecs::DocValuesFormat result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.docValuesFormat());
              return ::org::apache::lucene::codecs::t_DocValuesFormat::wrap_Object(result);
            }

            return callSuper(PY_TYPE(Lucene70Codec), (PyObject *) self, "docValuesFormat", args, 2);
          }

          static PyObject *t_Lucene70Codec_fieldInfosFormat(t_Lucene70Codec *self, PyObject *args)
          {
            ::org::apache::lucene::codecs::FieldInfosFormat result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.fieldInfosFormat());
              return ::org::apache::lucene::codecs::t_FieldInfosFormat::wrap_Object(result);
            }

            return callSuper(PY_TYPE(Lucene70Codec), (PyObject *) self, "fieldInfosFormat", args, 2);
          }

          static PyObject *t_Lucene70Codec_liveDocsFormat(t_Lucene70Codec *self, PyObject *args)
          {
            ::org::apache::lucene::codecs::LiveDocsFormat result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.liveDocsFormat());
              return ::org::apache::lucene::codecs::t_LiveDocsFormat::wrap_Object(result);
            }

            return callSuper(PY_TYPE(Lucene70Codec), (PyObject *) self, "liveDocsFormat", args, 2);
          }

          static PyObject *t_Lucene70Codec_normsFormat(t_Lucene70Codec *self, PyObject *args)
          {
            ::org::apache::lucene::codecs::NormsFormat result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.normsFormat());
              return ::org::apache::lucene::codecs::t_NormsFormat::wrap_Object(result);
            }

            return callSuper(PY_TYPE(Lucene70Codec), (PyObject *) self, "normsFormat", args, 2);
          }

          static PyObject *t_Lucene70Codec_pointsFormat(t_Lucene70Codec *self, PyObject *args)
          {
            ::org::apache::lucene::codecs::PointsFormat result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.pointsFormat());
              return ::org::apache::lucene::codecs::t_PointsFormat::wrap_Object(result);
            }

            return callSuper(PY_TYPE(Lucene70Codec), (PyObject *) self, "pointsFormat", args, 2);
          }

          static PyObject *t_Lucene70Codec_postingsFormat(t_Lucene70Codec *self, PyObject *args)
          {
            ::org::apache::lucene::codecs::PostingsFormat result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.postingsFormat());
              return ::org::apache::lucene::codecs::t_PostingsFormat::wrap_Object(result);
            }

            return callSuper(PY_TYPE(Lucene70Codec), (PyObject *) self, "postingsFormat", args, 2);
          }

          static PyObject *t_Lucene70Codec_segmentInfoFormat(t_Lucene70Codec *self, PyObject *args)
          {
            ::org::apache::lucene::codecs::SegmentInfoFormat result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.segmentInfoFormat());
              return ::org::apache::lucene::codecs::t_SegmentInfoFormat::wrap_Object(result);
            }

            return callSuper(PY_TYPE(Lucene70Codec), (PyObject *) self, "segmentInfoFormat", args, 2);
          }

          static PyObject *t_Lucene70Codec_storedFieldsFormat(t_Lucene70Codec *self, PyObject *args)
          {
            ::org::apache::lucene::codecs::StoredFieldsFormat result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.storedFieldsFormat());
              return ::org::apache::lucene::codecs::t_StoredFieldsFormat::wrap_Object(result);
            }

            return callSuper(PY_TYPE(Lucene70Codec), (PyObject *) self, "storedFieldsFormat", args, 2);
          }

          static PyObject *t_Lucene70Codec_termVectorsFormat(t_Lucene70Codec *self, PyObject *args)
          {
            ::org::apache::lucene::codecs::TermVectorsFormat result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.termVectorsFormat());
              return ::org::apache::lucene::codecs::t_TermVectorsFormat::wrap_Object(result);
            }

            return callSuper(PY_TYPE(Lucene70Codec), (PyObject *) self, "termVectorsFormat", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/DocValuesStats$SortedLongDocValuesStats.h"
#include "java/lang/Long.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {

        ::java::lang::Class *DocValuesStats$SortedLongDocValuesStats::class$ = NULL;
        jmethodID *DocValuesStats$SortedLongDocValuesStats::mids$ = NULL;
        bool DocValuesStats$SortedLongDocValuesStats::live$ = false;

        jclass DocValuesStats$SortedLongDocValuesStats::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/search/DocValuesStats$SortedLongDocValuesStats");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_9fd2eb66a64e6f0f] = env->getMethodID(cls, "<init>", "(Ljava/lang/String;)V");
            mids$[mid_sum_24165e10e82b50a8] = env->getMethodID(cls, "sum", "()Ljava/lang/Long;");
            mids$[mid_doAccumulate_040c4cd0390c5aff] = env->getMethodID(cls, "doAccumulate", "(I)V");

            class$ = new ::java::lang::Class(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        DocValuesStats$SortedLongDocValuesStats::DocValuesStats$SortedLongDocValuesStats(const ::java::lang::String & a0) : ::org::apache::lucene::search::DocValuesStats$SortedNumericDocValuesStats(env->newObject(initializeClass, &mids$, mid_init$_9fd2eb66a64e6f0f, a0.this$)) {}

        ::java::lang::Long DocValuesStats$SortedLongDocValuesStats::sum() const
        {
          return ::java::lang::Long(env->callObjectMethod(this$, mids$[mid_sum_24165e10e82b50a8]));
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        static PyObject *t_DocValuesStats$SortedLongDocValuesStats_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_DocValuesStats$SortedLongDocValuesStats_instance_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_DocValuesStats$SortedLongDocValuesStats_of_(t_DocValuesStats$SortedLongDocValuesStats *self, PyObject *args);
        static int t_DocValuesStats$SortedLongDocValuesStats_init_(t_DocValuesStats$SortedLongDocValuesStats *self, PyObject *args, PyObject *kwds);
        static PyObject *t_DocValuesStats$SortedLongDocValuesStats_sum(t_DocValuesStats$SortedLongDocValuesStats *self, PyObject *args);
        static PyObject *t_DocValuesStats$SortedLongDocValuesStats_get__parameters_(t_DocValuesStats$SortedLongDocValuesStats *self, void *data);
        static PyGetSetDef t_DocValuesStats$SortedLongDocValuesStats__fields_[] = {
          DECLARE_GET_FIELD(t_DocValuesStats$SortedLongDocValuesStats, parameters_),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_DocValuesStats$SortedLongDocValuesStats__methods_[] = {
          DECLARE_METHOD(t_DocValuesStats$SortedLongDocValuesStats, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_DocValuesStats$SortedLongDocValuesStats, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_DocValuesStats$SortedLongDocValuesStats, of_, METH_VARARGS),
          DECLARE_METHOD(t_DocValuesStats$SortedLongDocValuesStats, sum, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        static PyType_Slot PY_TYPE_SLOTS(DocValuesStats$SortedLongDocValuesStats)[] = {
          { Py_tp_methods, t_DocValuesStats$SortedLongDocValuesStats__methods_ },
          { Py_tp_init, (void *) t_DocValuesStats$SortedLongDocValuesStats_init_ },
          { Py_tp_getset, t_DocValuesStats$SortedLongDocValuesStats__fields_ },
          { 0, NULL }
        };

        static PyType_Def *PY_TYPE_BASES(DocValuesStats$SortedLongDocValuesStats)[] = {
          &PY_TYPE_DEF(::org::apache::lucene::search::DocValuesStats$SortedNumericDocValuesStats),
          NULL
        };

        DEFINE_TYPE(DocValuesStats$SortedLongDocValuesStats, t_DocValuesStats$SortedLongDocValuesStats, DocValuesStats$SortedLongDocValuesStats);
        PyObject *t_DocValuesStats$SortedLongDocValuesStats::wrap_Object(const DocValuesStats$SortedLongDocValuesStats& object, PyTypeObject *p0)
        {
          PyObject *obj = t_DocValuesStats$SortedLongDocValuesStats::wrap_Object(object);
          if (obj != NULL && obj != Py_None)
          {
            t_DocValuesStats$SortedLongDocValuesStats *self = (t_DocValuesStats$SortedLongDocValuesStats *) obj;
            self->parameters[0] = p0;
          }
          return obj;
        }

        PyObject *t_DocValuesStats$SortedLongDocValuesStats::wrap_jobject(const jobject& object, PyTypeObject *p0)
        {
          PyObject *obj = t_DocValuesStats$SortedLongDocValuesStats::wrap_jobject(object);
          if (obj != NULL && obj != Py_None)
          {
            t_DocValuesStats$SortedLongDocValuesStats *self = (t_DocValuesStats$SortedLongDocValuesStats *) obj;
            self->parameters[0] = p0;
          }
          return obj;
        }

        void t_DocValuesStats$SortedLongDocValuesStats::install(PyObject *module)
        {
          installType(&PY_TYPE(DocValuesStats$SortedLongDocValuesStats), &PY_TYPE_DEF(DocValuesStats$SortedLongDocValuesStats), module, "DocValuesStats$SortedLongDocValuesStats", 0);
        }

        void t_DocValuesStats$SortedLongDocValuesStats::initialize(PyObject *module)
        {
          PyObject_SetAttrString((PyObject *) PY_TYPE(DocValuesStats$SortedLongDocValuesStats), "class_", make_descriptor(DocValuesStats$SortedLongDocValuesStats::initializeClass, 1));
          PyObject_SetAttrString((PyObject *) PY_TYPE(DocValuesStats$SortedLongDocValuesStats), "wrapfn_", make_descriptor(t_DocValuesStats$SortedLongDocValuesStats::wrap_jobject));
          PyObject_SetAttrString((PyObject *) PY_TYPE(DocValuesStats$SortedLongDocValuesStats), "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_DocValuesStats$SortedLongDocValuesStats_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, DocValuesStats$SortedLongDocValuesStats::initializeClass, 1)))
            return NULL;
          return t_DocValuesStats$SortedLongDocValuesStats::wrap_Object(DocValuesStats$SortedLongDocValuesStats(((t_DocValuesStats$SortedLongDocValuesStats *) arg)->object.this$));
        }
        static PyObject *t_DocValuesStats$SortedLongDocValuesStats_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, DocValuesStats$SortedLongDocValuesStats::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static PyObject *t_DocValuesStats$SortedLongDocValuesStats_of_(t_DocValuesStats$SortedLongDocValuesStats *self, PyObject *args)
        {
          if (!parseArg(args, "T", 1, &(self->parameters)))
            Py_RETURN_SELF;
          return PyErr_SetArgsError((PyObject *) self, "of_", args);
        }

        static int t_DocValuesStats$SortedLongDocValuesStats_init_(t_DocValuesStats$SortedLongDocValuesStats *self, PyObject *args, PyObject *kwds)
        {
          ::java::lang::String a0((jobject) NULL);
          DocValuesStats$SortedLongDocValuesStats object((jobject) NULL);

          if (!parseArgs(args, "s", &a0))
          {
            INT_CALL(object = DocValuesStats$SortedLongDocValuesStats(a0));
            self->object = object;
            self->parameters[0] = ::java::lang::PY_TYPE(Long);
          }
          else
          {
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }

        static PyObject *t_DocValuesStats$SortedLongDocValuesStats_sum(t_DocValuesStats$SortedLongDocValuesStats *self, PyObject *args)
        {
          ::java::lang::Long result((jobject) NULL);

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.sum());
            return ::java::lang::t_Long::wrap_Object(result);
          }

          return callSuper(PY_TYPE(DocValuesStats$SortedLongDocValuesStats), (PyObject *) self, "sum", args, 2);
        }
        static PyObject *t_DocValuesStats$SortedLongDocValuesStats_get__parameters_(t_DocValuesStats$SortedLongDocValuesStats *self, void *data)
        {
          return typeParameters(self->parameters, sizeof(self->parameters));
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/similarities/DistributionSPL.h"
#include "org/apache/lucene/search/similarities/BasicStats.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace similarities {

          ::java::lang::Class *DistributionSPL::class$ = NULL;
          jmethodID *DistributionSPL::mids$ = NULL;
          bool DistributionSPL::live$ = false;

          jclass DistributionSPL::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/search/similarities/DistributionSPL");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_f2cc1bce94666404] = env->getMethodID(cls, "<init>", "()V");
              mids$[mid_score_761ab1c432346fd0] = env->getMethodID(cls, "score", "(Lorg/apache/lucene/search/similarities/BasicStats;DD)D");
              mids$[mid_toString_db9b55ba01e03e4b] = env->getMethodID(cls, "toString", "()Ljava/lang/String;");

              class$ = new ::java::lang::Class(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          DistributionSPL::DistributionSPL() : ::org::apache::lucene::search::similarities::Distribution(env->newObject(initializeClass, &mids$, mid_init$_f2cc1bce94666404)) {}

          jdouble DistributionSPL::score(const ::org::apache::lucene::search::similarities::BasicStats & a0, jdouble a1, jdouble a2) const
          {
            return env->callDoubleMethod(this$, mids$[mid_score_761ab1c432346fd0], a0.this$, a1, a2);
          }

          ::java::lang::String DistributionSPL::toString() const
          {
            return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_db9b55ba01e03e4b]));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace similarities {
          static PyObject *t_DistributionSPL_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_DistributionSPL_instance_(PyTypeObject *type, PyObject *arg);
          static int t_DistributionSPL_init_(t_DistributionSPL *self, PyObject *args, PyObject *kwds);
          static PyObject *t_DistributionSPL_score(t_DistributionSPL *self, PyObject *args);
          static PyObject *t_DistributionSPL_toString(t_DistributionSPL *self, PyObject *args);

          static PyMethodDef t_DistributionSPL__methods_[] = {
            DECLARE_METHOD(t_DistributionSPL, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_DistributionSPL, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_DistributionSPL, score, METH_VARARGS),
            DECLARE_METHOD(t_DistributionSPL, toString, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          static PyType_Slot PY_TYPE_SLOTS(DistributionSPL)[] = {
            { Py_tp_methods, t_DistributionSPL__methods_ },
            { Py_tp_init, (void *) t_DistributionSPL_init_ },
            { 0, NULL }
          };

          static PyType_Def *PY_TYPE_BASES(DistributionSPL)[] = {
            &PY_TYPE_DEF(::org::apache::lucene::search::similarities::Distribution),
            NULL
          };

          DEFINE_TYPE(DistributionSPL, t_DistributionSPL, DistributionSPL);

          void t_DistributionSPL::install(PyObject *module)
          {
            installType(&PY_TYPE(DistributionSPL), &PY_TYPE_DEF(DistributionSPL), module, "DistributionSPL", 0);
          }

          void t_DistributionSPL::initialize(PyObject *module)
          {
            PyObject_SetAttrString((PyObject *) PY_TYPE(DistributionSPL), "class_", make_descriptor(DistributionSPL::initializeClass, 1));
            PyObject_SetAttrString((PyObject *) PY_TYPE(DistributionSPL), "wrapfn_", make_descriptor(t_DistributionSPL::wrap_jobject));
            PyObject_SetAttrString((PyObject *) PY_TYPE(DistributionSPL), "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_DistributionSPL_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, DistributionSPL::initializeClass, 1)))
              return NULL;
            return t_DistributionSPL::wrap_Object(DistributionSPL(((t_DistributionSPL *) arg)->object.this$));
          }
          static PyObject *t_DistributionSPL_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, DistributionSPL::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_DistributionSPL_init_(t_DistributionSPL *self, PyObject *args, PyObject *kwds)
          {
            DistributionSPL object((jobject) NULL);

            INT_CALL(object = DistributionSPL());
            self->object = object;

            return 0;
          }

          static PyObject *t_DistributionSPL_score(t_DistributionSPL *self, PyObject *args)
          {
            ::org::apache::lucene::search::similarities::BasicStats a0((jobject) NULL);
            jdouble a1;
            jdouble a2;
            jdouble result;

            if (!parseArgs(args, "kDD", ::org::apache::lucene::search::similarities::BasicStats::initializeClass, &a0, &a1, &a2))
            {
              OBJ_CALL(result = self->object.score(a0, a1, a2));
              return PyFloat_FromDouble((double) result);
            }

            return callSuper(PY_TYPE(DistributionSPL), (PyObject *) self, "score", args, 2);
          }

          static PyObject *t_DistributionSPL_toString(t_DistributionSPL *self, PyObject *args)
          {
            ::java::lang::String result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.toString());
              return j2p(result);
            }

            return callSuper(PY_TYPE(DistributionSPL), (PyObject *) self, "toString", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/util/CollectionUtil.h"
#include "java/util/List.h"
#include "java/util/Comparator.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {

        ::java::lang::Class *CollectionUtil::class$ = NULL;
        jmethodID *CollectionUtil::mids$ = NULL;
        bool CollectionUtil::live$ = false;

        jclass CollectionUtil::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/util/CollectionUtil");

            mids$ = new jmethodID[max_mid];
            mids$[mid_introSort_d03990be0130160d] = env->getStaticMethodID(cls, "introSort", "(Ljava/util/List;)V");
            mids$[mid_introSort_268544ec58d67b6d] = env->getStaticMethodID(cls, "introSort", "(Ljava/util/List;Ljava/util/Comparator;)V");
            mids$[mid_timSort_d03990be0130160d] = env->getStaticMethodID(cls, "timSort", "(Ljava/util/List;)V");
            mids$[mid_timSort_268544ec58d67b6d] = env->getStaticMethodID(cls, "timSort", "(Ljava/util/List;Ljava/util/Comparator;)V");

            class$ = new ::java::lang::Class(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        void CollectionUtil::introSort(const ::java::util::List & a0)
        {
          jclass cls = env->getClass(initializeClass);
          env->callStaticVoidMethod(cls, mids$[mid_introSort_d03990be0130160d], a0.this$);
        }

        void CollectionUtil::introSort(const ::java::util::List & a0, const ::java::util::Comparator & a1)
        {
          jclass cls = env->getClass(initializeClass);
          env->callStaticVoidMethod(cls, mids$[mid_introSort_268544ec58d67b6d], a0.this$, a1.this$);
        }

        void CollectionUtil::timSort(const ::java::util::List & a0)
        {
          jclass cls = env->getClass(initializeClass);
          env->callStaticVoidMethod(cls, mids$[mid_timSort_d03990be0130160d], a0.this$);
        }

        void CollectionUtil::timSort(const ::java::util::List & a0, const ::java::util::Comparator & a1)
        {
          jclass cls = env->getClass(initializeClass);
          env->callStaticVoidMethod(cls, mids$[mid_timSort_268544ec58d67b6d], a0.this$, a1.this$);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        static PyObject *t_CollectionUtil_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_CollectionUtil_instance_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_CollectionUtil_introSort(PyTypeObject *type, PyObject *args);
        static PyObject *t_CollectionUtil_timSort(PyTypeObject *type, PyObject *args);

        static PyMethodDef t_CollectionUtil__methods_[] = {
          DECLARE_METHOD(t_CollectionUtil, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_CollectionUtil, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_CollectionUtil, introSort, METH_VARARGS | METH_CLASS),
          DECLARE_METHOD(t_CollectionUtil, timSort, METH_VARARGS | METH_CLASS),
          { NULL, NULL, 0, NULL }
        };

        static PyType_Slot PY_TYPE_SLOTS(CollectionUtil)[] = {
          { Py_tp_methods, t_CollectionUtil__methods_ },
          { Py_tp_init, (void *) abstract_init },
          { 0, NULL }
        };

        static PyType_Def *PY_TYPE_BASES(CollectionUtil)[] = {
          &PY_TYPE_DEF(::java::lang::Object),
          NULL
        };

        DEFINE_TYPE(CollectionUtil, t_CollectionUtil, CollectionUtil);

        void t_CollectionUtil::install(PyObject *module)
        {
          installType(&PY_TYPE(CollectionUtil), &PY_TYPE_DEF(CollectionUtil), module, "CollectionUtil", 0);
        }

        void t_CollectionUtil::initialize(PyObject *module)
        {
          PyObject_SetAttrString((PyObject *) PY_TYPE(CollectionUtil), "class_", make_descriptor(CollectionUtil::initializeClass, 1));
          PyObject_SetAttrString((PyObject *) PY_TYPE(CollectionUtil), "wrapfn_", make_descriptor(t_CollectionUtil::wrap_jobject));
          PyObject_SetAttrString((PyObject *) PY_TYPE(CollectionUtil), "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_CollectionUtil_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, CollectionUtil::initializeClass, 1)))
            return NULL;
          return t_CollectionUtil::wrap_Object(CollectionUtil(((t_CollectionUtil *) arg)->object.this$));
        }
        static PyObject *t_CollectionUtil_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, CollectionUtil::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static PyObject *t_CollectionUtil_introSort(PyTypeObject *type, PyObject *args)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 1:
            {
              ::java::util::List a0((jobject) NULL);
              PyTypeObject **p0;

              if (!parseArgs(args, "K", ::java::util::List::initializeClass, &a0, &p0, ::java::util::t_List::parameters_))
              {
                OBJ_CALL(::org::apache::lucene::util::CollectionUtil::introSort(a0));
                Py_RETURN_NONE;
              }
            }
            break;
           case 2:
            {
              ::java::util::List a0((jobject) NULL);
              PyTypeObject **p0;
              ::java::util::Comparator a1((jobject) NULL);
              PyTypeObject **p1;

              if (!parseArgs(args, "KK", ::java::util::List::initializeClass, ::java::util::Comparator::initializeClass, &a0, &p0, ::java::util::t_List::parameters_, &a1, &p1, ::java::util::t_Comparator::parameters_))
              {
                OBJ_CALL(::org::apache::lucene::util::CollectionUtil::introSort(a0, a1));
                Py_RETURN_NONE;
              }
            }
          }

          PyErr_SetArgsError(type, "introSort", args);
          return NULL;
        }

        static PyObject *t_CollectionUtil_timSort(PyTypeObject *type, PyObject *args)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 1:
            {
              ::java::util::List a0((jobject) NULL);
              PyTypeObject **p0;

              if (!parseArgs(args, "K", ::java::util::List::initializeClass, &a0, &p0, ::java::util::t_List::parameters_))
              {
                OBJ_CALL(::org::apache::lucene::util::CollectionUtil::timSort(a0));
                Py_RETURN_NONE;
              }
            }
            break;
           case 2:
            {
              ::java::util::List a0((jobject) NULL);
              PyTypeObject **p0;
              ::java::util::Comparator a1((jobject) NULL);
              PyTypeObject **p1;

              if (!parseArgs(args, "KK", ::java::util::List::initializeClass, ::java::util::Comparator::initializeClass, &a0, &p0, ::java::util::t_List::parameters_, &a1, &p1, ::java::util::t_Comparator::parameters_))
              {
                OBJ_CALL(::org::apache::lucene::util::CollectionUtil::timSort(a0, a1));
                Py_RETURN_NONE;
              }
            }
          }

          PyErr_SetArgsError(type, "timSort", args);
          return NULL;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/tokenattributes/TermFrequencyAttributeImpl.h"
#include "java/lang/Class.h"
#include "java/lang/Object.h"
#include "org/apache/lucene/util/AttributeReflector.h"
#include "org/apache/lucene/analysis/tokenattributes/TermFrequencyAttribute.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace tokenattributes {

          ::java::lang::Class *TermFrequencyAttributeImpl::class$ = NULL;
          jmethodID *TermFrequencyAttributeImpl::mids$ = NULL;
          bool TermFrequencyAttributeImpl::live$ = false;

          jclass TermFrequencyAttributeImpl::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/tokenattributes/TermFrequencyAttributeImpl");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_f2cc1bce94666404] = env->getMethodID(cls, "<init>", "()V");
              mids$[mid_clear_f2cc1bce94666404] = env->getMethodID(cls, "clear", "()V");
              mids$[mid_copyTo_26346c38ebc9c090] = env->getMethodID(cls, "copyTo", "(Lorg/apache/lucene/util/AttributeImpl;)V");
              mids$[mid_end_f2cc1bce94666404] = env->getMethodID(cls, "end", "()V");
              mids$[mid_equals_8b72f2dcdde6fd1d] = env->getMethodID(cls, "equals", "(Ljava/lang/Object;)Z");
              mids$[mid_getTermFrequency_9972fcc56b44e79d] = env->getMethodID(cls, "getTermFrequency", "()I");
              mids$[mid_hashCode_9972fcc56b44e79d] = env->getMethodID(cls, "hashCode", "()I");
              mids$[mid_reflectWith_b880c72ee67200af] = env->getMethodID(cls, "reflectWith", "(Lorg/apache/lucene/util/AttributeReflector;)V");
              mids$[mid_setTermFrequency_040c4cd0390c5aff] = env->getMethodID(cls, "setTermFrequency", "(I)V");

              class$ = new ::java::lang::Class(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          TermFrequencyAttributeImpl::TermFrequencyAttributeImpl() : ::org::apache::lucene::util::AttributeImpl(env->newObject(initializeClass, &mids$, mid_init$_f2cc1bce94666404)) {}

          void TermFrequencyAttributeImpl::clear() const
          {
            env->callVoidMethod(this$, mids$[mid_clear_f2cc1bce94666404]);
          }

          void TermFrequencyAttributeImpl::copyTo(const ::org::apache::lucene::util::AttributeImpl & a0) const
          {
            env->callVoidMethod(this$, mids$[mid_copyTo_26346c38ebc9c090], a0.this$);
          }

          void TermFrequencyAttributeImpl::end() const
          {
            env->callVoidMethod(this$, mids$[mid_end_f2cc1bce94666404]);
          }

          jboolean TermFrequencyAttributeImpl::equals(const ::java::lang::Object & a0) const
          {
            return env->callBooleanMethod(this$, mids$[mid_equals_8b72f2dcdde6fd1d], a0.this$);
          }

          jint TermFrequencyAttributeImpl::getTermFrequency() const
          {
            return env->callIntMethod(this$, mids$[mid_getTermFrequency_9972fcc56b44e79d]);
          }

          jint TermFrequencyAttributeImpl::hashCode() const
          {
            return env->callIntMethod(this$, mids$[mid_hashCode_9972fcc56b44e79d]);
          }

          void TermFrequencyAttributeImpl::reflectWith(const ::org::apache::lucene::util::AttributeReflector & a0) const
          {
            env->callVoidMethod(this$, mids$[mid_reflectWith_b880c72ee67200af], a0.this$);
          }

          void TermFrequencyAttributeImpl::setTermFrequency(jint a0) const
          {
            env->callVoidMethod(this$, mids$[mid_setTermFrequency_040c4cd0390c5aff], a0);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace tokenattributes {
          static PyObject *t_TermFrequencyAttributeImpl_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_TermFrequencyAttributeImpl_instance_(PyTypeObject *type, PyObject *arg);
          static int t_TermFrequencyAttributeImpl_init_(t_TermFrequencyAttributeImpl *self, PyObject *args, PyObject *kwds);
          static PyObject *t_TermFrequencyAttributeImpl_clear(t_TermFrequencyAttributeImpl *self, PyObject *args);
          static PyObject *t_TermFrequencyAttributeImpl_copyTo(t_TermFrequencyAttributeImpl *self, PyObject *args);
          static PyObject *t_TermFrequencyAttributeImpl_end(t_TermFrequencyAttributeImpl *self, PyObject *args);
          static PyObject *t_TermFrequencyAttributeImpl_equals(t_TermFrequencyAttributeImpl *self, PyObject *args);
          static PyObject *t_TermFrequencyAttributeImpl_getTermFrequency(t_TermFrequencyAttributeImpl *self);
          static PyObject *t_TermFrequencyAttributeImpl_hashCode(t_TermFrequencyAttributeImpl *self, PyObject *args);
          static PyObject *t_TermFrequencyAttributeImpl_reflectWith(t_TermFrequencyAttributeImpl *self, PyObject *args);
          static PyObject *t_TermFrequencyAttributeImpl_setTermFrequency(t_TermFrequencyAttributeImpl *self, PyObject *arg);
          static PyObject *t_TermFrequencyAttributeImpl_get__termFrequency(t_TermFrequencyAttributeImpl *self, void *data);
          static int t_TermFrequencyAttributeImpl_set__termFrequency(t_TermFrequencyAttributeImpl *self, PyObject *arg, void *data);
          static PyGetSetDef t_TermFrequencyAttributeImpl__fields_[] = {
            DECLARE_GETSET_FIELD(t_TermFrequencyAttributeImpl, termFrequency),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_TermFrequencyAttributeImpl__methods_[] = {
            DECLARE_METHOD(t_TermFrequencyAttributeImpl, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_TermFrequencyAttributeImpl, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_TermFrequencyAttributeImpl, clear, METH_VARARGS),
            DECLARE_METHOD(t_TermFrequencyAttributeImpl, copyTo, METH_VARARGS),
            DECLARE_METHOD(t_TermFrequencyAttributeImpl, end, METH_VARARGS),
            DECLARE_METHOD(t_TermFrequencyAttributeImpl, equals, METH_VARARGS),
            DECLARE_METHOD(t_TermFrequencyAttributeImpl, getTermFrequency, METH_NOARGS),
            DECLARE_METHOD(t_TermFrequencyAttributeImpl, hashCode, METH_VARARGS),
            DECLARE_METHOD(t_TermFrequencyAttributeImpl, reflectWith, METH_VARARGS),
            DECLARE_METHOD(t_TermFrequencyAttributeImpl, setTermFrequency, METH_O),
            { NULL, NULL, 0, NULL }
          };

          static PyType_Slot PY_TYPE_SLOTS(TermFrequencyAttributeImpl)[] = {
            { Py_tp_methods, t_TermFrequencyAttributeImpl__methods_ },
            { Py_tp_init, (void *) t_TermFrequencyAttributeImpl_init_ },
            { Py_tp_getset, t_TermFrequencyAttributeImpl__fields_ },
            { 0, NULL }
          };

          static PyType_Def *PY_TYPE_BASES(TermFrequencyAttributeImpl)[] = {
            &PY_TYPE_DEF(::org::apache::lucene::util::AttributeImpl),
            NULL
          };

          DEFINE_TYPE(TermFrequencyAttributeImpl, t_TermFrequencyAttributeImpl, TermFrequencyAttributeImpl);

          void t_TermFrequencyAttributeImpl::install(PyObject *module)
          {
            installType(&PY_TYPE(TermFrequencyAttributeImpl), &PY_TYPE_DEF(TermFrequencyAttributeImpl), module, "TermFrequencyAttributeImpl", 0);
          }

          void t_TermFrequencyAttributeImpl::initialize(PyObject *module)
          {
            PyObject_SetAttrString((PyObject *) PY_TYPE(TermFrequencyAttributeImpl), "class_", make_descriptor(TermFrequencyAttributeImpl::initializeClass, 1));
            PyObject_SetAttrString((PyObject *) PY_TYPE(TermFrequencyAttributeImpl), "wrapfn_", make_descriptor(t_TermFrequencyAttributeImpl::wrap_jobject));
            PyObject_SetAttrString((PyObject *) PY_TYPE(TermFrequencyAttributeImpl), "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_TermFrequencyAttributeImpl_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, TermFrequencyAttributeImpl::initializeClass, 1)))
              return NULL;
            return t_TermFrequencyAttributeImpl::wrap_Object(TermFrequencyAttributeImpl(((t_TermFrequencyAttributeImpl *) arg)->object.this$));
          }
          static PyObject *t_TermFrequencyAttributeImpl_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, TermFrequencyAttributeImpl::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_TermFrequencyAttributeImpl_init_(t_TermFrequencyAttributeImpl *self, PyObject *args, PyObject *kwds)
          {
            TermFrequencyAttributeImpl object((jobject) NULL);

            INT_CALL(object = TermFrequencyAttributeImpl());
            self->object = object;

            return 0;
          }

          static PyObject *t_TermFrequencyAttributeImpl_clear(t_TermFrequencyAttributeImpl *self, PyObject *args)
          {

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(self->object.clear());
              Py_RETURN_NONE;
            }

            return callSuper(PY_TYPE(TermFrequencyAttributeImpl), (PyObject *) self, "clear", args, 2);
          }

          static PyObject *t_TermFrequencyAttributeImpl_copyTo(t_TermFrequencyAttributeImpl *self, PyObject *args)
          {
            ::org::apache::lucene::util::AttributeImpl a0((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::util::AttributeImpl::initializeClass, &a0))
            {
              OBJ_CALL(self->object.copyTo(a0));
              Py_RETURN_NONE;
            }

            return callSuper(PY_TYPE(TermFrequencyAttributeImpl), (PyObject *) self, "copyTo", args, 2);
          }

          static PyObject *t_TermFrequencyAttributeImpl_end(t_TermFrequencyAttributeImpl *self, PyObject *args)
          {

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(self->object.end());
              Py_RETURN_NONE;
            }

            return callSuper(PY_TYPE(TermFrequencyAttributeImpl), (PyObject *) self, "end", args, 2);
          }

          static PyObject *t_TermFrequencyAttributeImpl_equals(t_TermFrequencyAttributeImpl *self, PyObject *args)
          {
            ::java::lang::Object a0((jobject) NULL);
            jboolean result;

            if (!parseArgs(args, "o", &a0))
            {
              OBJ_CALL(result = self->object.equals(a0));
              Py_RETURN_BOOL(result);
            }

            return callSuper(PY_TYPE(TermFrequencyAttributeImpl), (PyObject *) self, "equals", args, 2);
          }

          static PyObject *t_TermFrequencyAttributeImpl_getTermFrequency(t_TermFrequencyAttributeImpl *self)
          {
            jint result;
            OBJ_CALL(result = self->object.getTermFrequency());
            return PyLong_FromLong((long) result);
          }

          static PyObject *t_TermFrequencyAttributeImpl_hashCode(t_TermFrequencyAttributeImpl *self, PyObject *args)
          {
            jint result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.hashCode());
              return PyLong_FromLong((long) result);
            }

            return callSuper(PY_TYPE(TermFrequencyAttributeImpl), (PyObject *) self, "hashCode", args, 2);
          }

          static PyObject *t_TermFrequencyAttributeImpl_reflectWith(t_TermFrequencyAttributeImpl *self, PyObject *args)
          {
            ::org::apache::lucene::util::AttributeReflector a0((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::util::AttributeReflector::initializeClass, &a0))
            {
              OBJ_CALL(self->object.reflectWith(a0));
              Py_RETURN_NONE;
            }

            return callSuper(PY_TYPE(TermFrequencyAttributeImpl), (PyObject *) self, "reflectWith", args, 2);
          }

          static PyObject *t_TermFrequencyAttributeImpl_setTermFrequency(t_TermFrequencyAttributeImpl *self, PyObject *arg)
          {
            jint a0;

            if (!parseArg(arg, "I", &a0))
            {
              OBJ_CALL(self->object.setTermFrequency(a0));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError((PyObject *) self, "setTermFrequency", arg);
            return NULL;
          }

          static PyObject *t_TermFrequencyAttributeImpl_get__termFrequency(t_TermFrequencyAttributeImpl *self, void *data)
          {
            jint value;
            OBJ_CALL(value = self->object.getTermFrequency());
            return PyLong_FromLong((long) value);
          }
          static int t_TermFrequencyAttributeImpl_set__termFrequency(t_TermFrequencyAttributeImpl *self, PyObject *arg, void *data)
          {
            {
              jint value;
              if (!parseArg(arg, "I", &value))
              {
                INT_CALL(self->object.setTermFrequency(value));
                return 0;
              }
            }
            PyErr_SetArgsError((PyObject *) self, "termFrequency", arg);
            return -1;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/spatial3d/Geo3DPoint.h"
#include "org/apache/lucene/spatial3d/geom/GeoShape.h"
#include "org/apache/lucene/geo/Polygon.h"
#include "org/apache/lucene/document/FieldType.h"
#include "java/lang/Class.h"
#include "java/lang/String.h"
#include "org/apache/lucene/search/Query.h"
#include "org/apache/lucene/spatial3d/geom/PlanetModel.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace spatial3d {

        ::java::lang::Class *Geo3DPoint::class$ = NULL;
        jmethodID *Geo3DPoint::mids$ = NULL;
        bool Geo3DPoint::live$ = false;
        ::org::apache::lucene::document::FieldType *Geo3DPoint::TYPE = NULL;

        jclass Geo3DPoint::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/spatial3d/Geo3DPoint");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_afcb65cb7af1d628] = env->getMethodID(cls, "<init>", "(Ljava/lang/String;DD)V");
            mids$[mid_init$_17adafe4d08eda14] = env->getMethodID(cls, "<init>", "(Ljava/lang/String;Lorg/apache/lucene/spatial3d/geom/PlanetModel;DD)V");
            mids$[mid_init$_1f63bbbe18d3a11f] = env->getMethodID(cls, "<init>", "(Ljava/lang/String;DDD)V");
            mids$[mid_init$_0e6640dccc90e4ae] = env->getMethodID(cls, "<init>", "(Ljava/lang/String;Lorg/apache/lucene/spatial3d/geom/PlanetModel;DDD)V");
            mids$[mid_decodeDimension_dc9104b34ca053d9] = env->getStaticMethodID(cls, "decodeDimension", "([BILorg/apache/lucene/spatial3d/geom/PlanetModel;)D");
            mids$[mid_encodeDimension_a4367f7fddb149ad] = env->getStaticMethodID(cls, "encodeDimension", "(D[BILorg/apache/lucene/spatial3d/geom/PlanetModel;)V");
            mids$[mid_newBoxQuery_48ebeb2ba1781e3b] = env->getStaticMethodID(cls, "newBoxQuery", "(Ljava/lang/String;Lorg/apache/lucene/spatial3d/geom/PlanetModel;DDDD)Lorg/apache/lucene/search/Query;");
            mids$[mid_newDistanceQuery_31d31bcf9aec3f2f] = env->getStaticMethodID(cls, "newDistanceQuery", "(Ljava/lang/String;Lorg/apache/lucene/spatial3d/geom/PlanetModel;DDD)Lorg/apache/lucene/search/Query;");
            mids$[mid_newLargePolygonQuery_f4fa056de9392315] = env->getStaticMethodID(cls, "newLargePolygonQuery", "(Ljava/lang/String;Lorg/apache/lucene/spatial3d/geom/PlanetModel;[Lorg/apache/lucene/geo/Polygon;)Lorg/apache/lucene/search/Query;");
            mids$[mid_newPathQuery_14c8945f1d8beb70] = env->getStaticMethodID(cls, "newPathQuery", "(Ljava/lang/String;[D[DDLorg/apache/lucene/spatial3d/geom/PlanetModel;)Lorg/apache/lucene/search/Query;");
            mids$[mid_newPolygonQuery_f4fa056de9392315] = env->getStaticMethodID(cls, "newPolygonQuery", "(Ljava/lang/String;Lorg/apache/lucene/spatial3d/geom/PlanetModel;[Lorg/apache/lucene/geo/Polygon;)Lorg/apache/lucene/search/Query;");
            mids$[mid_newShapeQuery_bac55785dfc8930b] = env->getStaticMethodID(cls, "newShapeQuery", "(Ljava/lang/String;Lorg/apache/lucene/spatial3d/geom/GeoShape;)Lorg/apache/lucene/search/Query;");
            mids$[mid_toString_db9b55ba01e03e4b] = env->getMethodID(cls, "toString", "()Ljava/lang/String;");

            class$ = new ::java::lang::Class(cls);
            cls = (jclass) class$->this$;

            TYPE = new ::org::apache::lucene::document::FieldType(env->getStaticObjectField(cls, "TYPE", "Lorg/apache/lucene/document/FieldType;"));
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        Geo3DPoint::Geo3DPoint(const ::java::lang::String & a0, jdouble a1, jdouble a2) : ::org::apache::lucene::document::Field(env->newObject(initializeClass, &mids$, mid_init$_afcb65cb7af1d628, a0.this$, a1, a2)) {}

        Geo3DPoint::Geo3DPoint(const ::java::lang::String & a0, const ::org::apache::lucene::spatial3d::geom::PlanetModel & a1, jdouble a2, jdouble a3) : ::org::apache::lucene::document::Field(env->newObject(initializeClass, &mids$, mid_init$_17adafe4d08eda14, a0.this$, a1.this$, a2, a3)) {}

        Geo3DPoint::Geo3DPoint(const ::java::lang::String & a0, jdouble a1, jdouble a2, jdouble a3) : ::org::apache::lucene::document::Field(env->newObject(initializeClass, &mids$, mid_init$_1f63bbbe18d3a11f, a0.this$, a1, a2, a3)) {}

        Geo3DPoint::Geo3DPoint(const ::java::lang::String & a0, const ::org::apache::lucene::spatial3d::geom::PlanetModel & a1, jdouble a2, jdouble a3, jdouble a4) : ::org::apache::lucene::document::Field(env->newObject(initializeClass, &mids$, mid_init$_0e6640dccc90e4ae, a0.this$, a1.this$, a2, a3, a4)) {}

        jdouble Geo3DPoint::decodeDimension(const JArray< jbyte > & a0, jint a1, const ::org::apache::lucene::spatial3d::geom::PlanetModel & a2)
        {
          jclass cls = env->getClass(initializeClass);
          return env->callStaticDoubleMethod(cls, mids$[mid_decodeDimension_dc9104b34ca053d9], a0.this$, a1, a2.this$);
        }

        void Geo3DPoint::encodeDimension(jdouble a0, const JArray< jbyte > & a1, jint a2, const ::org::apache::lucene::spatial3d::geom::PlanetModel & a3)
        {
          jclass cls = env->getClass(initializeClass);
          env->callStaticVoidMethod(cls, mids$[mid_encodeDimension_a4367f7fddb149ad], a0, a1.this$, a2, a3.this$);
        }

        ::org::apache::lucene::search::Query Geo3DPoint::newBoxQuery(const ::java::lang::String & a0, const ::org::apache::lucene::spatial3d::geom::PlanetModel & a1, jdouble a2, jdouble a3, jdouble a4, jdouble a5)
        {
          jclass cls = env->getClass(initializeClass);
          return ::org::apache::lucene::search::Query(env->callStaticObjectMethod(cls, mids$[mid_newBoxQuery_48ebeb2ba1781e3b], a0.this$, a1.this$, a2, a3, a4, a5));
        }

        ::org::apache::lucene::search::Query Geo3DPoint::newDistanceQuery(const ::java::lang::String & a0, const ::org::apache::lucene::spatial3d::geom::PlanetModel & a1, jdouble a2, jdouble a3, jdouble a4)
        {
          jclass cls = env->getClass(initializeClass);
          return ::org::apache::lucene::search::Query(env->callStaticObjectMethod(cls, mids$[mid_newDistanceQuery_31d31bcf9aec3f2f], a0.this$, a1.this$, a2, a3, a4));
        }

        ::org::apache::lucene::search::Query Geo3DPoint::newLargePolygonQuery(const ::java::lang::String & a0, const ::org::apache::lucene::spatial3d::geom::PlanetModel & a1, const JArray< ::org::apache::lucene::geo::Polygon > & a2)
        {
          jclass cls = env->getClass(initializeClass);
          return ::org::apache::lucene::search::Query(env->callStaticObjectMethod(cls, mids$[mid_newLargePolygonQuery_f4fa056de9392315], a0.this$, a1.this$, a2.this$));
        }

        ::org::apache::lucene::search::Query Geo3DPoint::newPathQuery(const ::java::lang::String & a0, const JArray< jdouble > & a1, const JArray< jdouble > & a2, jdouble a3, const ::org::apache::lucene::spatial3d::geom::PlanetModel & a4)
        {
          jclass cls = env->getClass(initializeClass);
          return ::org::apache::lucene::search::Query(env->callStaticObjectMethod(cls, mids$[mid_newPathQuery_14c8945f1d8beb70], a0.this$, a1.this$, a2.this$, a3, a4.this$));
        }

        ::org::apache::lucene::search::Query Geo3DPoint::newPolygonQuery(const ::java::lang::String & a0, const ::org::apache::lucene::spatial3d::geom::PlanetModel & a1, const JArray< ::org::apache::lucene::geo::Polygon > & a2)
        {
          jclass cls = env->getClass(initializeClass);
          return ::org::apache::lucene::search::Query(env->callStaticObjectMethod(cls, mids$[mid_newPolygonQuery_f4fa056de9392315], a0.this$, a1.this$, a2.this$));
        }

        ::org::apache::lucene::search::Query Geo3DPoint::newShapeQuery(const ::java::lang::String & a0, const ::org::apache::lucene::spatial3d::geom::GeoShape & a1)
        {
          jclass cls = env->getClass(initializeClass);
          return ::org::apache::lucene::search::Query(env->callStaticObjectMethod(cls, mids$[mid_newShapeQuery_bac55785dfc8930b], a0.this$, a1.this$));
        }

        ::java::lang::String Geo3DPoint::toString() const
        {
          return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_db9b55ba01e03e4b]));
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace spatial3d {
        static PyObject *t_Geo3DPoint_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_Geo3DPoint_instance_(PyTypeObject *type, PyObject *arg);
        static int t_Geo3DPoint_init_(t_Geo3DPoint *self, PyObject *args, PyObject *kwds);
        static PyObject *t_Geo3DPoint_decodeDimension(PyTypeObject *type, PyObject *args);
        static PyObject *t_Geo3DPoint_encodeDimension(PyTypeObject *type, PyObject *args);
        static PyObject *t_Geo3DPoint_newBoxQuery(PyTypeObject *type, PyObject *args);
        static PyObject *t_Geo3DPoint_newDistanceQuery(PyTypeObject *type, PyObject *args);
        static PyObject *t_Geo3DPoint_newLargePolygonQuery(PyTypeObject *type, PyObject *args);
        static PyObject *t_Geo3DPoint_newPathQuery(PyTypeObject *type, PyObject *args);
        static PyObject *t_Geo3DPoint_newPolygonQuery(PyTypeObject *type, PyObject *args);
        static PyObject *t_Geo3DPoint_newShapeQuery(PyTypeObject *type, PyObject *args);
        static PyObject *t_Geo3DPoint_toString(t_Geo3DPoint *self, PyObject *args);

        static PyMethodDef t_Geo3DPoint__methods_[] = {
          DECLARE_METHOD(t_Geo3DPoint, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_Geo3DPoint, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_Geo3DPoint, decodeDimension, METH_VARARGS | METH_CLASS),
          DECLARE_METHOD(t_Geo3DPoint, encodeDimension, METH_VARARGS | METH_CLASS),
          DECLARE_METHOD(t_Geo3DPoint, newBoxQuery, METH_VARARGS | METH_CLASS),
          DECLARE_METHOD(t_Geo3DPoint, newDistanceQuery, METH_VARARGS | METH_CLASS),
          DECLARE_METHOD(t_Geo3DPoint, newLargePolygonQuery, METH_VARARGS | METH_CLASS),
          DECLARE_METHOD(t_Geo3DPoint, newPathQuery, METH_VARARGS | METH_CLASS),
          DECLARE_METHOD(t_Geo3DPoint, newPolygonQuery, METH_VARARGS | METH_CLASS),
          DECLARE_METHOD(t_Geo3DPoint, newShapeQuery, METH_VARARGS | METH_CLASS),
          DECLARE_METHOD(t_Geo3DPoint, toString, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        static PyType_Slot PY_TYPE_SLOTS(Geo3DPoint)[] = {
          { Py_tp_methods, t_Geo3DPoint__methods_ },
          { Py_tp_init, (void *) t_Geo3DPoint_init_ },
          { 0, NULL }
        };

        static PyType_Def *PY_TYPE_BASES(Geo3DPoint)[] = {
          &PY_TYPE_DEF(::org::apache::lucene::document::Field),
          NULL
        };

        DEFINE_TYPE(Geo3DPoint, t_Geo3DPoint, Geo3DPoint);

        void t_Geo3DPoint::install(PyObject *module)
        {
          installType(&PY_TYPE(Geo3DPoint), &PY_TYPE_DEF(Geo3DPoint), module, "Geo3DPoint", 0);
        }

        void t_Geo3DPoint::initialize(PyObject *module)
        {
          PyObject_SetAttrString((PyObject *) PY_TYPE(Geo3DPoint), "class_", make_descriptor(Geo3DPoint::initializeClass, 1));
          PyObject_SetAttrString((PyObject *) PY_TYPE(Geo3DPoint), "wrapfn_", make_descriptor(t_Geo3DPoint::wrap_jobject));
          PyObject_SetAttrString((PyObject *) PY_TYPE(Geo3DPoint), "boxfn_", make_descriptor(boxObject));
          env->getClass(Geo3DPoint::initializeClass);
          PyObject_SetAttrString((PyObject *) PY_TYPE(Geo3DPoint), "TYPE", make_descriptor(::org::apache::lucene::document::t_FieldType::wrap_Object(*Geo3DPoint::TYPE)));
        }

        static PyObject *t_Geo3DPoint_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, Geo3DPoint::initializeClass, 1)))
            return NULL;
          return t_Geo3DPoint::wrap_Object(Geo3DPoint(((t_Geo3DPoint *) arg)->object.this$));
        }
        static PyObject *t_Geo3DPoint_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, Geo3DPoint::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_Geo3DPoint_init_(t_Geo3DPoint *self, PyObject *args, PyObject *kwds)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 3:
            {
              ::java::lang::String a0((jobject) NULL);
              jdouble a1;
              jdouble a2;
              Geo3DPoint object((jobject) NULL);

              if (!parseArgs(args, "sDD", &a0, &a1, &a2))
              {
                INT_CALL(object = Geo3DPoint(a0, a1, a2));
                self->object = object;
                break;
              }
            }
            goto err;
           case 4:
            {
              ::java::lang::String a0((jobject) NULL);
              ::org::apache::lucene::spatial3d::geom::PlanetModel a1((jobject) NULL);
              jdouble a2;
              jdouble a3;
              Geo3DPoint object((jobject) NULL);

              if (!parseArgs(args, "skDD", ::org::apache::lucene::spatial3d::geom::PlanetModel::initializeClass, &a0, &a1, &a2, &a3))
              {
                INT_CALL(object = Geo3DPoint(a0, a1, a2, a3));
                self->object = object;
                break;
              }
            }
            {
              ::java::lang::String a0((jobject) NULL);
              jdouble a1;
              jdouble a2;
              jdouble a3;
              Geo3DPoint object((jobject) NULL);

              if (!parseArgs(args, "sDDD", &a0, &a1, &a2, &a3))
              {
                INT_CALL(object = Geo3DPoint(a0, a1, a2, a3));
                self->object = object;
                break;
              }
            }
            goto err;
           case 5:
            {
              ::java::lang::String a0((jobject) NULL);
              ::org::apache::lucene::spatial3d::geom::PlanetModel a1((jobject) NULL);
              jdouble a2;
              jdouble a3;
              jdouble a4;
              Geo3DPoint object((jobject) NULL);

              if (!parseArgs(args, "skDDD", ::org::apache::lucene::spatial3d::geom::PlanetModel::initializeClass, &a0, &a1, &a2, &a3, &a4))
              {
                INT_CALL(object = Geo3DPoint(a0, a1, a2, a3, a4));
                self->object = object;
                break;
              }
            }
           default:
           err:
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }

        static PyObject *t_Geo3DPoint_decodeDimension(PyTypeObject *type, PyObject *args)
        {
          JArray< jbyte > a0((jobject) NULL);
          jint a1;
          ::org::apache::lucene::spatial3d::geom::PlanetModel a2((jobject) NULL);
          jdouble result;

          if (!parseArgs(args, "[BIk", ::org::apache::lucene::spatial3d::geom::PlanetModel::initializeClass, &a0, &a1, &a2))
          {
            OBJ_CALL(result = ::org::apache::lucene::spatial3d::Geo3DPoint::decodeDimension(a0, a1, a2));
            return PyFloat_FromDouble((double) result);
          }

          PyErr_SetArgsError(type, "decodeDimension", args);
          return NULL;
        }

        static PyObject *t_Geo3DPoint_encodeDimension(PyTypeObject *type, PyObject *args)
        {
          jdouble a0;
          JArray< jbyte > a1((jobject) NULL);
          jint a2;
          ::org::apache::lucene::spatial3d::geom::PlanetModel a3((jobject) NULL);

          if (!parseArgs(args, "D[BIk", ::org::apache::lucene::spatial3d::geom::PlanetModel::initializeClass, &a0, &a1, &a2, &a3))
          {
            OBJ_CALL(::org::apache::lucene::spatial3d::Geo3DPoint::encodeDimension(a0, a1, a2, a3));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError(type, "encodeDimension", args);
          return NULL;
        }

        static PyObject *t_Geo3DPoint_newBoxQuery(PyTypeObject *type, PyObject *args)
        {
          ::java::lang::String a0((jobject) NULL);
          ::org::apache::lucene::spatial3d::geom::PlanetModel a1((jobject) NULL);
          jdouble a2;
          jdouble a3;
          jdouble a4;
          jdouble a5;
          ::org::apache::lucene::search::Query result((jobject) NULL);

          if (!parseArgs(args, "skDDDD", ::org::apache::lucene::spatial3d::geom::PlanetModel::initializeClass, &a0, &a1, &a2, &a3, &a4, &a5))
          {
            OBJ_CALL(result = ::org::apache::lucene::spatial3d::Geo3DPoint::newBoxQuery(a0, a1, a2, a3, a4, a5));
            return ::org::apache::lucene::search::t_Query::wrap_Object(result);
          }

          PyErr_SetArgsError(type, "newBoxQuery", args);
          return NULL;
        }

        static PyObject *t_Geo3DPoint_newDistanceQuery(PyTypeObject *type, PyObject *args)
        {
          ::java::lang::String a0((jobject) NULL);
          ::org::apache::lucene::spatial3d::geom::PlanetModel a1((jobject) NULL);
          jdouble a2;
          jdouble a3;
          jdouble a4;
          ::org::apache::lucene::search::Query result((jobject) NULL);

          if (!parseArgs(args, "skDDD", ::org::apache::lucene::spatial3d::geom::PlanetModel::initializeClass, &a0, &a1, &a2, &a3, &a4))
          {
            OBJ_CALL(result = ::org::apache::lucene::spatial3d::Geo3DPoint::newDistanceQuery(a0, a1, a2, a3, a4));
            return ::org::apache::lucene::search::t_Query::wrap_Object(result);
          }

          PyErr_SetArgsError(type, "newDistanceQuery", args);
          return NULL;
        }

        static PyObject *t_Geo3DPoint_newLargePolygonQuery(PyTypeObject *type, PyObject *args)
        {
          ::java::lang::String a0((jobject) NULL);
          ::org::apache::lucene::spatial3d::geom::PlanetModel a1((jobject) NULL);
          JArray< ::org::apache::lucene::geo::Polygon > a2((jobject) NULL);
          ::org::apache::lucene::search::Query result((jobject) NULL);

          if (!parseArgs(args, "sk[k", ::org::apache::lucene::spatial3d::geom::PlanetModel::initializeClass, ::org::apache::lucene::geo::Polygon::initializeClass, &a0, &a1, &a2))
          {
            OBJ_CALL(result = ::org::apache::lucene::spatial3d::Geo3DPoint::newLargePolygonQuery(a0, a1, a2));
            return ::org::apache::lucene::search::t_Query::wrap_Object(result);
          }

          PyErr_SetArgsError(type, "newLargePolygonQuery", args);
          return NULL;
        }

        static PyObject *t_Geo3DPoint_newPathQuery(PyTypeObject *type, PyObject *args)
        {
          ::java::lang::String a0((jobject) NULL);
          JArray< jdouble > a1((jobject) NULL);
          JArray< jdouble > a2((jobject) NULL);
          jdouble a3;
          ::org::apache::lucene::spatial3d::geom::PlanetModel a4((jobject) NULL);
          ::org::apache::lucene::search::Query result((jobject) NULL);

          if (!parseArgs(args, "s[D[DDk", ::org::apache::lucene::spatial3d::geom::PlanetModel::initializeClass, &a0, &a1, &a2, &a3, &a4))
          {
            OBJ_CALL(result = ::org::apache::lucene::spatial3d::Geo3DPoint::newPathQuery(a0, a1, a2, a3, a4));
            return ::org::apache::lucene::search::t_Query::wrap_Object(result);
          }

          PyErr_SetArgsError(type, "newPathQuery", args);
          return NULL;
        }

        static PyObject *t_Geo3DPoint_newPolygonQuery(PyTypeObject *type, PyObject *args)
        {
          ::java::lang::String a0((jobject) NULL);
          ::org::apache::lucene::spatial3d::geom::PlanetModel a1((jobject) NULL);
          JArray< ::org::apache::lucene::geo::Polygon > a2((jobject) NULL);
          ::org::apache::lucene::search::Query result((jobject) NULL);

          if (!parseArgs(args, "sk[k", ::org::apache::lucene::spatial3d::geom::PlanetModel::initializeClass, ::org::apache::lucene::geo::Polygon::initializeClass, &a0, &a1, &a2))
          {
            OBJ_CALL(result = ::org::apache::lucene::spatial3d::Geo3DPoint::newPolygonQuery(a0, a1, a2));
            return ::org::apache::lucene::search::t_Query::wrap_Object(result);
          }

          PyErr_SetArgsError(type, "newPolygonQuery", args);
          return NULL;
        }

        static PyObject *t_Geo3DPoint_newShapeQuery(PyTypeObject *type, PyObject *args)
        {
          ::java::lang::String a0((jobject) NULL);
          ::org::apache::lucene::spatial3d::geom::GeoShape a1((jobject) NULL);
          ::org::apache::lucene::search::Query result((jobject) NULL);

          if (!parseArgs(args, "sk", ::org::apache::lucene::spatial3d::geom::GeoShape::initializeClass, &a0, &a1))
          {
            OBJ_CALL(result = ::org::apache::lucene::spatial3d::Geo3DPoint::newShapeQuery(a0, a1));
            return ::org::apache::lucene::search::t_Query::wrap_Object(result);
          }

          PyErr_SetArgsError(type, "newShapeQuery", args);
          return NULL;
        }

        static PyObject *t_Geo3DPoint_toString(t_Geo3DPoint *self, PyObject *args)
        {
          ::java::lang::String result((jobject) NULL);

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.toString());
            return j2p(result);
          }

          return callSuper(PY_TYPE(Geo3DPoint), (PyObject *) self, "toString", args, 2);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/standard/ClassicFilterFactory.h"
#include "java/util/Map.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/analysis/TokenStream.h"
#include "org/apache/lucene/analysis/TokenFilter.h"
#include "java/lang/String.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace standard {

          ::java::lang::Class *ClassicFilterFactory::class$ = NULL;
          jmethodID *ClassicFilterFactory::mids$ = NULL;
          bool ClassicFilterFactory::live$ = false;
          ::java::lang::String *ClassicFilterFactory::NAME = NULL;

          jclass ClassicFilterFactory::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/standard/ClassicFilterFactory");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_408bd889ee3beae5] = env->getMethodID(cls, "<init>", "(Ljava/util/Map;)V");
              mids$[mid_create_4366615ad7077dae] = env->getMethodID(cls, "create", "(Lorg/apache/lucene/analysis/TokenStream;)Lorg/apache/lucene/analysis/TokenFilter;");

              class$ = new ::java::lang::Class(cls);
              cls = (jclass) class$->this$;

              NAME = new ::java::lang::String(env->getStaticObjectField(cls, "NAME", "Ljava/lang/String;"));
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          ClassicFilterFactory::ClassicFilterFactory(const ::java::util::Map & a0) : ::org::apache::lucene::analysis::util::TokenFilterFactory(env->newObject(initializeClass, &mids$, mid_init$_408bd889ee3beae5, a0.this$)) {}

          ::org::apache::lucene::analysis::TokenFilter ClassicFilterFactory::create(const ::org::apache::lucene::analysis::TokenStream & a0) const
          {
            return ::org::apache::lucene::analysis::TokenFilter(env->callObjectMethod(this$, mids$[mid_create_4366615ad7077dae], a0.this$));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace standard {
          static PyObject *t_ClassicFilterFactory_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_ClassicFilterFactory_instance_(PyTypeObject *type, PyObject *arg);
          static int t_ClassicFilterFactory_init_(t_ClassicFilterFactory *self, PyObject *args, PyObject *kwds);
          static PyObject *t_ClassicFilterFactory_create(t_ClassicFilterFactory *self, PyObject *args);

          static PyMethodDef t_ClassicFilterFactory__methods_[] = {
            DECLARE_METHOD(t_ClassicFilterFactory, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_ClassicFilterFactory, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_ClassicFilterFactory, create, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          static PyType_Slot PY_TYPE_SLOTS(ClassicFilterFactory)[] = {
            { Py_tp_methods, t_ClassicFilterFactory__methods_ },
            { Py_tp_init, (void *) t_ClassicFilterFactory_init_ },
            { 0, NULL }
          };

          static PyType_Def *PY_TYPE_BASES(ClassicFilterFactory)[] = {
            &PY_TYPE_DEF(::org::apache::lucene::analysis::util::TokenFilterFactory),
            NULL
          };

          DEFINE_TYPE(ClassicFilterFactory, t_ClassicFilterFactory, ClassicFilterFactory);

          void t_ClassicFilterFactory::install(PyObject *module)
          {
            installType(&PY_TYPE(ClassicFilterFactory), &PY_TYPE_DEF(ClassicFilterFactory), module, "ClassicFilterFactory", 0);
          }

          void t_ClassicFilterFactory::initialize(PyObject *module)
          {
            PyObject_SetAttrString((PyObject *) PY_TYPE(ClassicFilterFactory), "class_", make_descriptor(ClassicFilterFactory::initializeClass, 1));
            PyObject_SetAttrString((PyObject *) PY_TYPE(ClassicFilterFactory), "wrapfn_", make_descriptor(t_ClassicFilterFactory::wrap_jobject));
            PyObject_SetAttrString((PyObject *) PY_TYPE(ClassicFilterFactory), "boxfn_", make_descriptor(boxObject));
            env->getClass(ClassicFilterFactory::initializeClass);
            PyObject_SetAttrString((PyObject *) PY_TYPE(ClassicFilterFactory), "NAME", make_descriptor(j2p(*ClassicFilterFactory::NAME)));
          }

          static PyObject *t_ClassicFilterFactory_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, ClassicFilterFactory::initializeClass, 1)))
              return NULL;
            return t_ClassicFilterFactory::wrap_Object(ClassicFilterFactory(((t_ClassicFilterFactory *) arg)->object.this$));
          }
          static PyObject *t_ClassicFilterFactory_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, ClassicFilterFactory::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_ClassicFilterFactory_init_(t_ClassicFilterFactory *self, PyObject *args, PyObject *kwds)
          {
            ::java::util::Map a0((jobject) NULL);
            PyTypeObject **p0;
            ClassicFilterFactory object((jobject) NULL);

            if (!parseArgs(args, "K", ::java::util::Map::initializeClass, &a0, &p0, ::java::util::t_Map::parameters_))
            {
              INT_CALL(object = ClassicFilterFactory(a0));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_ClassicFilterFactory_create(t_ClassicFilterFactory *self, PyObject *args)
          {
            ::org::apache::lucene::analysis::TokenStream a0((jobject) NULL);
            ::org::apache::lucene::analysis::TokenFilter result((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::analysis::TokenStream::initializeClass, &a0))
            {
              OBJ_CALL(result = self->object.create(a0));
              return ::org::apache::lucene::analysis::t_TokenFilter::wrap_Object(result);
            }

            return callSuper(PY_TYPE(ClassicFilterFactory), (PyObject *) self, "create", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/index/CompositeReader.h"
#include "java/lang/String.h"
#include "org/apache/lucene/index/CompositeReaderContext.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {

        ::java::lang::Class *CompositeReader::class$ = NULL;
        jmethodID *CompositeReader::mids$ = NULL;
        bool CompositeReader::live$ = false;

        jclass CompositeReader::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/index/CompositeReader");

            mids$ = new jmethodID[max_mid];
            mids$[mid_getContext_f54dd1fbe08ba9c6] = env->getMethodID(cls, "getContext", "()Lorg/apache/lucene/index/CompositeReaderContext;");
            mids$[mid_toString_db9b55ba01e03e4b] = env->getMethodID(cls, "toString", "()Ljava/lang/String;");
            mids$[mid_getSequentialSubReaders_49ec78390f08338a] = env->getMethodID(cls, "getSequentialSubReaders", "()Ljava/util/List;");

            class$ = new ::java::lang::Class(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        ::org::apache::lucene::index::CompositeReaderContext CompositeReader::getContext() const
        {
          return ::org::apache::lucene::index::CompositeReaderContext(env->callObjectMethod(this$, mids$[mid_getContext_f54dd1fbe08ba9c6]));
        }

        ::java::lang::String CompositeReader::toString() const
        {
          return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_db9b55ba01e03e4b]));
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {
        static PyObject *t_CompositeReader_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_CompositeReader_instance_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_CompositeReader_getContext(t_CompositeReader *self, PyObject *args);
        static PyObject *t_CompositeReader_toString(t_CompositeReader *self, PyObject *args);
        static PyObject *t_CompositeReader_get__context(t_CompositeReader *self, void *data);
        static PyGetSetDef t_CompositeReader__fields_[] = {
          DECLARE_GET_FIELD(t_CompositeReader, context),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_CompositeReader__methods_[] = {
          DECLARE_METHOD(t_CompositeReader, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_CompositeReader, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_CompositeReader, getContext, METH_VARARGS),
          DECLARE_METHOD(t_CompositeReader, toString, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        static PyType_Slot PY_TYPE_SLOTS(CompositeReader)[] = {
          { Py_tp_methods, t_CompositeReader__methods_ },
          { Py_tp_init, (void *) abstract_init },
          { Py_tp_getset, t_CompositeReader__fields_ },
          { 0, NULL }
        };

        static PyType_Def *PY_TYPE_BASES(CompositeReader)[] = {
          &PY_TYPE_DEF(::org::apache::lucene::index::IndexReader),
          NULL
        };

        DEFINE_TYPE(CompositeReader, t_CompositeReader, CompositeReader);

        void t_CompositeReader::install(PyObject *module)
        {
          installType(&PY_TYPE(CompositeReader), &PY_TYPE_DEF(CompositeReader), module, "CompositeReader", 0);
        }

        void t_CompositeReader::initialize(PyObject *module)
        {
          PyObject_SetAttrString((PyObject *) PY_TYPE(CompositeReader), "class_", make_descriptor(CompositeReader::initializeClass, 1));
          PyObject_SetAttrString((PyObject *) PY_TYPE(CompositeReader), "wrapfn_", make_descriptor(t_CompositeReader::wrap_jobject));
          PyObject_SetAttrString((PyObject *) PY_TYPE(CompositeReader), "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_CompositeReader_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, CompositeReader::initializeClass, 1)))
            return NULL;
          return t_CompositeReader::wrap_Object(CompositeReader(((t_CompositeReader *) arg)->object.this$));
        }
        static PyObject *t_CompositeReader_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, CompositeReader::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static PyObject *t_CompositeReader_getContext(t_CompositeReader *self, PyObject *args)
        {
          ::org::apache::lucene::index::CompositeReaderContext result((jobject) NULL);

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.getContext());
            return ::org::apache::lucene::index::t_CompositeReaderContext::wrap_Object(result);
          }

          return callSuper(PY_TYPE(CompositeReader), (PyObject *) self, "getContext", args, 2);
        }

        static PyObject *t_CompositeReader_toString(t_CompositeReader *self, PyObject *args)
        {
          ::java::lang::String result((jobject) NULL);

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.toString());
            return j2p(result);
          }

          return callSuper(PY_TYPE(CompositeReader), (PyObject *) self, "toString", args, 2);
        }

        static PyObject *t_CompositeReader_get__context(t_CompositeReader *self, void *data)
        {
          ::org::apache::lucene::index::CompositeReaderContext value((jobject) NULL);
          OBJ_CALL(value = self->object.getContext());
          return ::org::apache::lucene::index::t_CompositeReaderContext::wrap_Object(value);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/SortedNumericSortField$Provider.h"
#include "org/apache/lucene/search/SortField.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/store/DataOutput.h"
#include "java/lang/String.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/store/DataInput.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {

        ::java::lang::Class *SortedNumericSortField$Provider::class$ = NULL;
        jmethodID *SortedNumericSortField$Provider::mids$ = NULL;
        bool SortedNumericSortField$Provider::live$ = false;
        ::java::lang::String *SortedNumericSortField$Provider::NAME = NULL;

        jclass SortedNumericSortField$Provider::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/search/SortedNumericSortField$Provider");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_f2cc1bce94666404] = env->getMethodID(cls, "<init>", "()V");
            mids$[mid_readSortField_f5c813112fa668ab] = env->getMethodID(cls, "readSortField", "(Lorg/apache/lucene/store/DataInput;)Lorg/apache/lucene/search/SortField;");
            mids$[mid_writeSortField_d394f16dc9680504] = env->getMethodID(cls, "writeSortField", "(Lorg/apache/lucene/search/SortField;Lorg/apache/lucene/store/DataOutput;)V");

            class$ = new ::java::lang::Class(cls);
            cls = (jclass) class$->this$;

            NAME = new ::java::lang::String(env->getStaticObjectField(cls, "NAME", "Ljava/lang/String;"));
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        SortedNumericSortField$Provider::SortedNumericSortField$Provider() : ::org::apache::lucene::index::SortFieldProvider(env->newObject(initializeClass, &mids$, mid_init$_f2cc1bce94666404)) {}

        ::org::apache::lucene::search::SortField SortedNumericSortField$Provider::readSortField(const ::org::apache::lucene::store::DataInput & a0) const
        {
          return ::org::apache::lucene::search::SortField(env->callObjectMethod(this$, mids$[mid_readSortField_f5c813112fa668ab], a0.this$));
        }

        void SortedNumericSortField$Provider::writeSortField(const ::org::apache::lucene::search::SortField & a0, const ::org::apache::lucene::store::DataOutput & a1) const
        {
          env->callVoidMethod(this$, mids$[mid_writeSortField_d394f16dc9680504], a0.this$, a1.this$);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        static PyObject *t_SortedNumericSortField$Provider_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_SortedNumericSortField$Provider_instance_(PyTypeObject *type, PyObject *arg);
        static int t_SortedNumericSortField$Provider_init_(t_SortedNumericSortField$Provider *self, PyObject *args, PyObject *kwds);
        static PyObject *t_SortedNumericSortField$Provider_readSortField(t_SortedNumericSortField$Provider *self, PyObject *args);
        static PyObject *t_SortedNumericSortField$Provider_writeSortField(t_SortedNumericSortField$Provider *self, PyObject *args);

        static PyMethodDef t_SortedNumericSortField$Provider__methods_[] = {
          DECLARE_METHOD(t_SortedNumericSortField$Provider, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_SortedNumericSortField$Provider, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_SortedNumericSortField$Provider, readSortField, METH_VARARGS),
          DECLARE_METHOD(t_SortedNumericSortField$Provider, writeSortField, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        static PyType_Slot PY_TYPE_SLOTS(SortedNumericSortField$Provider)[] = {
          { Py_tp_methods, t_SortedNumericSortField$Provider__methods_ },
          { Py_tp_init, (void *) t_SortedNumericSortField$Provider_init_ },
          { 0, NULL }
        };

        static PyType_Def *PY_TYPE_BASES(SortedNumericSortField$Provider)[] = {
          &PY_TYPE_DEF(::org::apache::lucene::index::SortFieldProvider),
          NULL
        };

        DEFINE_TYPE(SortedNumericSortField$Provider, t_SortedNumericSortField$Provider, SortedNumericSortField$Provider);

        void t_SortedNumericSortField$Provider::install(PyObject *module)
        {
          installType(&PY_TYPE(SortedNumericSortField$Provider), &PY_TYPE_DEF(SortedNumericSortField$Provider), module, "SortedNumericSortField$Provider", 0);
        }

        void t_SortedNumericSortField$Provider::initialize(PyObject *module)
        {
          PyObject_SetAttrString((PyObject *) PY_TYPE(SortedNumericSortField$Provider), "class_", make_descriptor(SortedNumericSortField$Provider::initializeClass, 1));
          PyObject_SetAttrString((PyObject *) PY_TYPE(SortedNumericSortField$Provider), "wrapfn_", make_descriptor(t_SortedNumericSortField$Provider::wrap_jobject));
          PyObject_SetAttrString((PyObject *) PY_TYPE(SortedNumericSortField$Provider), "boxfn_", make_descriptor(boxObject));
          env->getClass(SortedNumericSortField$Provider::initializeClass);
          PyObject_SetAttrString((PyObject *) PY_TYPE(SortedNumericSortField$Provider), "NAME", make_descriptor(j2p(*SortedNumericSortField$Provider::NAME)));
        }

        static PyObject *t_SortedNumericSortField$Provider_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, SortedNumericSortField$Provider::initializeClass, 1)))
            return NULL;
          return t_SortedNumericSortField$Provider::wrap_Object(SortedNumericSortField$Provider(((t_SortedNumericSortField$Provider *) arg)->object.this$));
        }
        static PyObject *t_SortedNumericSortField$Provider_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, SortedNumericSortField$Provider::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_SortedNumericSortField$Provider_init_(t_SortedNumericSortField$Provider *self, PyObject *args, PyObject *kwds)
        {
          SortedNumericSortField$Provider object((jobject) NULL);

          INT_CALL(object = SortedNumericSortField$Provider());
          self->object = object;

          return 0;
        }

        static PyObject *t_SortedNumericSortField$Provider_readSortField(t_SortedNumericSortField$Provider *self, PyObject *args)
        {
          ::org::apache::lucene::store::DataInput a0((jobject) NULL);
          ::org::apache::lucene::search::SortField result((jobject) NULL);

          if (!parseArgs(args, "k", ::org::apache::lucene::store::DataInput::initializeClass, &a0))
          {
            OBJ_CALL(result = self->object.readSortField(a0));
            return ::org::apache::lucene::search::t_SortField::wrap_Object(result);
          }

          return callSuper(PY_TYPE(SortedNumericSortField$Provider), (PyObject *) self, "readSortField", args, 2);
        }

        static PyObject *t_SortedNumericSortField$Provider_writeSortField(t_SortedNumericSortField$Provider *self, PyObject *args)
        {
          ::org::apache::lucene::search::SortField a0((jobject) NULL);
          ::org::apache::lucene::store::DataOutput a1((jobject) NULL);

          if (!parseArgs(args, "kk", ::org::apache::lucene::search::SortField::initializeClass, ::org::apache::lucene::store::DataOutput::initializeClass, &a0, &a1))
          {
            OBJ_CALL(self->object.writeSortField(a0, a1));
            Py_RETURN_NONE;
          }

          return callSuper(PY_TYPE(SortedNumericSortField$Provider), (PyObject *) self, "writeSortField", args, 2);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/es/SpanishLightStemmer.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace es {

          ::java::lang::Class *SpanishLightStemmer::class$ = NULL;
          jmethodID *SpanishLightStemmer::mids$ = NULL;
          bool SpanishLightStemmer::live$ = false;

          jclass SpanishLightStemmer::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/es/SpanishLightStemmer");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_f2cc1bce94666404] = env->getMethodID(cls, "<init>", "()V");
              mids$[mid_stem_d4655f2a19359017] = env->getMethodID(cls, "stem", "([CI)I");

              class$ = new ::java::lang::Class(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          SpanishLightStemmer::SpanishLightStemmer() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_f2cc1bce94666404)) {}

          jint SpanishLightStemmer::stem(const JArray< jchar > & a0, jint a1) const
          {
            return env->callIntMethod(this$, mids$[mid_stem_d4655f2a19359017], a0.this$, a1);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace es {
          static PyObject *t_SpanishLightStemmer_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_SpanishLightStemmer_instance_(PyTypeObject *type, PyObject *arg);
          static int t_SpanishLightStemmer_init_(t_SpanishLightStemmer *self, PyObject *args, PyObject *kwds);
          static PyObject *t_SpanishLightStemmer_stem(t_SpanishLightStemmer *self, PyObject *args);

          static PyMethodDef t_SpanishLightStemmer__methods_[] = {
            DECLARE_METHOD(t_SpanishLightStemmer, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_SpanishLightStemmer, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_SpanishLightStemmer, stem, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          static PyType_Slot PY_TYPE_SLOTS(SpanishLightStemmer)[] = {
            { Py_tp_methods, t_SpanishLightStemmer__methods_ },
            { Py_tp_init, (void *) t_SpanishLightStemmer_init_ },
            { 0, NULL }
          };

          static PyType_Def *PY_TYPE_BASES(SpanishLightStemmer)[] = {
            &PY_TYPE_DEF(::java::lang::Object),
            NULL
          };

          DEFINE_TYPE(SpanishLightStemmer, t_SpanishLightStemmer, SpanishLightStemmer);

          void t_SpanishLightStemmer::install(PyObject *module)
          {
            installType(&PY_TYPE(SpanishLightStemmer), &PY_TYPE_DEF(SpanishLightStemmer), module, "SpanishLightStemmer", 0);
          }

          void t_SpanishLightStemmer::initialize(PyObject *module)
          {
            PyObject_SetAttrString((PyObject *) PY_TYPE(SpanishLightStemmer), "class_", make_descriptor(SpanishLightStemmer::initializeClass, 1));
            PyObject_SetAttrString((PyObject *) PY_TYPE(SpanishLightStemmer), "wrapfn_", make_descriptor(t_SpanishLightStemmer::wrap_jobject));
            PyObject_SetAttrString((PyObject *) PY_TYPE(SpanishLightStemmer), "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_SpanishLightStemmer_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, SpanishLightStemmer::initializeClass, 1)))
              return NULL;
            return t_SpanishLightStemmer::wrap_Object(SpanishLightStemmer(((t_SpanishLightStemmer *) arg)->object.this$));
          }
          static PyObject *t_SpanishLightStemmer_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, SpanishLightStemmer::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_SpanishLightStemmer_init_(t_SpanishLightStemmer *self, PyObject *args, PyObject *kwds)
          {
            SpanishLightStemmer object((jobject) NULL);

            INT_CALL(object = SpanishLightStemmer());
            self->object = object;

            return 0;
          }

          static PyObject *t_SpanishLightStemmer_stem(t_SpanishLightStemmer *self, PyObject *args)
          {
            JArray< jchar > a0((jobject) NULL);
            jint a1;
            jint result;

            if (!parseArgs(args, "[CI", &a0, &a1))
            {
              OBJ_CALL(result = self->object.stem(a0, a1));
              return PyLong_FromLong((long) result);
            }

            PyErr_SetArgsError((PyObject *) self, "stem", args);
            return NULL;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/grouping/GroupDocs.h"
#include "org/apache/lucene/search/ScoreDoc.h"
#include "org/apache/lucene/search/TotalHits.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace grouping {

          ::java::lang::Class *GroupDocs::class$ = NULL;
          jmethodID *GroupDocs::mids$ = NULL;
          jfieldID *GroupDocs::fids$ = NULL;
          bool GroupDocs::live$ = false;

          jclass GroupDocs::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/search/grouping/GroupDocs");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_73f972ffc345bf1d] = env->getMethodID(cls, "<init>", "(FFLorg/apache/lucene/search/TotalHits;[Lorg/apache/lucene/search/ScoreDoc;Ljava/lang/Object;[Ljava/lang/Object;)V");

              fids$ = new jfieldID[max_fid];
              fids$[fid_groupSortValues] = env->getFieldID(cls, "groupSortValues", "[Ljava/lang/Object;");
              fids$[fid_groupValue] = env->getFieldID(cls, "groupValue", "Ljava/lang/Object;");
              fids$[fid_maxScore] = env->getFieldID(cls, "maxScore", "F");
              fids$[fid_score] = env->getFieldID(cls, "score", "F");
              fids$[fid_scoreDocs] = env->getFieldID(cls, "scoreDocs", "[Lorg/apache/lucene/search/ScoreDoc;");
              fids$[fid_totalHits] = env->getFieldID(cls, "totalHits", "Lorg/apache/lucene/search/TotalHits;");

              class$ = new ::java::lang::Class(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          GroupDocs::GroupDocs(jfloat a0, jfloat a1, const ::org::apache::lucene::search::TotalHits & a2, const JArray< ::org::apache::lucene::search::ScoreDoc > & a3, const ::java::lang::Object & a4, const JArray< ::java::lang::Object > & a5) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_73f972ffc345bf1d, a0, a1, a2.this$, a3.this$, a4.this$, a5.this$)) {}

          JArray< ::java::lang::Object > GroupDocs::_get_groupSortValues() const
          {
            return JArray< ::java::lang::Object >(env->getObjectField(this$, fids$[fid_groupSortValues]));
          }

          ::java::lang::Object GroupDocs::_get_groupValue() const
          {
            return ::java::lang::Object(env->getObjectField(this$, fids$[fid_groupValue]));
          }

          jfloat GroupDocs::_get_maxScore() const
          {
            return env->getFloatField(this$, fids$[fid_maxScore]);
          }

          jfloat GroupDocs::_get_score() const
          {
            return env->getFloatField(this$, fids$[fid_score]);
          }

          JArray< ::org::apache::lucene::search::ScoreDoc > GroupDocs::_get_scoreDocs() const
          {
            return JArray< ::org::apache::lucene::search::ScoreDoc >(env->getObjectField(this$, fids$[fid_scoreDocs]));
          }

          ::org::apache::lucene::search::TotalHits GroupDocs::_get_totalHits() const
          {
            return ::org::apache::lucene::search::TotalHits(env->getObjectField(this$, fids$[fid_totalHits]));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace grouping {
          static PyObject *t_GroupDocs_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_GroupDocs_instance_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_GroupDocs_of_(t_GroupDocs *self, PyObject *args);
          static int t_GroupDocs_init_(t_GroupDocs *self, PyObject *args, PyObject *kwds);
          static PyObject *t_GroupDocs_get__groupSortValues(t_GroupDocs *self, void *data);
          static PyObject *t_GroupDocs_get__groupValue(t_GroupDocs *self, void *data);
          static PyObject *t_GroupDocs_get__maxScore(t_GroupDocs *self, void *data);
          static PyObject *t_GroupDocs_get__score(t_GroupDocs *self, void *data);
          static PyObject *t_GroupDocs_get__scoreDocs(t_GroupDocs *self, void *data);
          static PyObject *t_GroupDocs_get__totalHits(t_GroupDocs *self, void *data);

          static PyObject *t_GroupDocs_get__parameters_(t_GroupDocs *self, void *data);
          static PyGetSetDef t_GroupDocs__fields_[] = {
            DECLARE_GET_FIELD(t_GroupDocs, groupSortValues),
            DECLARE_GET_FIELD(t_GroupDocs, groupValue),
            DECLARE_GET_FIELD(t_GroupDocs, maxScore),
            DECLARE_GET_FIELD(t_GroupDocs, score),
            DECLARE_GET_FIELD(t_GroupDocs, scoreDocs),
            DECLARE_GET_FIELD(t_GroupDocs, totalHits),
            DECLARE_GET_FIELD(t_GroupDocs, parameters_),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_GroupDocs__methods_[] = {
            DECLARE_METHOD(t_GroupDocs, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_GroupDocs, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_GroupDocs, of_, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          static PyType_Slot PY_TYPE_SLOTS(GroupDocs)[] = {
            { Py_tp_methods, t_GroupDocs__methods_ },
            { Py_tp_init, (void *) t_GroupDocs_init_ },
            { Py_tp_getset, t_GroupDocs__fields_ },
            { 0, NULL }
          };

          static PyType_Def *PY_TYPE_BASES(GroupDocs)[] = {
            &PY_TYPE_DEF(::java::lang::Object),
            NULL
          };

          DEFINE_TYPE(GroupDocs, t_GroupDocs, GroupDocs);
          PyObject *t_GroupDocs::wrap_Object(const GroupDocs& object, PyTypeObject *p0)
          {
            PyObject *obj = t_GroupDocs::wrap_Object(object);
            if (obj != NULL && obj != Py_None)
            {
              t_GroupDocs *self = (t_GroupDocs *) obj;
              self->parameters[0] = p0;
            }
            return obj;
          }

          PyObject *t_GroupDocs::wrap_jobject(const jobject& object, PyTypeObject *p0)
          {
            PyObject *obj = t_GroupDocs::wrap_jobject(object);
            if (obj != NULL && obj != Py_None)
            {
              t_GroupDocs *self = (t_GroupDocs *) obj;
              self->parameters[0] = p0;
            }
            return obj;
          }

          void t_GroupDocs::install(PyObject *module)
          {
            installType(&PY_TYPE(GroupDocs), &PY_TYPE_DEF(GroupDocs), module, "GroupDocs", 0);
          }

          void t_GroupDocs::initialize(PyObject *module)
          {
            PyObject_SetAttrString((PyObject *) PY_TYPE(GroupDocs), "class_", make_descriptor(GroupDocs::initializeClass, 1));
            PyObject_SetAttrString((PyObject *) PY_TYPE(GroupDocs), "wrapfn_", make_descriptor(t_GroupDocs::wrap_jobject));
            PyObject_SetAttrString((PyObject *) PY_TYPE(GroupDocs), "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_GroupDocs_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, GroupDocs::initializeClass, 1)))
              return NULL;
            return t_GroupDocs::wrap_Object(GroupDocs(((t_GroupDocs *) arg)->object.this$));
          }
          static PyObject *t_GroupDocs_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, GroupDocs::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static PyObject *t_GroupDocs_of_(t_GroupDocs *self, PyObject *args)
          {
            if (!parseArg(args, "T", 1, &(self->parameters)))
              Py_RETURN_SELF;
            return PyErr_SetArgsError((PyObject *) self, "of_", args);
          }

          static int t_GroupDocs_init_(t_GroupDocs *self, PyObject *args, PyObject *kwds)
          {
            jfloat a0;
            jfloat a1;
            ::org::apache::lucene::search::TotalHits a2((jobject) NULL);
            JArray< ::org::apache::lucene::search::ScoreDoc > a3((jobject) NULL);
            ::java::lang::Object a4((jobject) NULL);
            JArray< ::java::lang::Object > a5((jobject) NULL);
            GroupDocs object((jobject) NULL);

            if (!parseArgs(args, "FFk[ko[o", ::org::apache::lucene::search::TotalHits::initializeClass, ::org::apache::lucene::search::ScoreDoc::initializeClass, &a0, &a1, &a2, &a3, &a4, &a5))
            {
              INT_CALL(object = GroupDocs(a0, a1, a2, a3, a4, a5));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }
          static PyObject *t_GroupDocs_get__parameters_(t_GroupDocs *self, void *data)
          {
            return typeParameters(self->parameters, sizeof(self->parameters));
          }

          static PyObject *t_GroupDocs_get__groupSortValues(t_GroupDocs *self, void *data)
          {
            JArray< ::java::lang::Object > value((jobject) NULL);
            OBJ_CALL(value = self->object._get_groupSortValues());
            return JArray<jobject>(value.this$).wrap(::java::lang::t_Object::wrap_jobject);
          }

          static PyObject *t_GroupDocs_get__groupValue(t_GroupDocs *self, void *data)
          {
            ::java::lang::Object value((jobject) NULL);
            OBJ_CALL(value = self->object._get_groupValue());
            return ::java::lang::t_Object::wrap_Object(value);
          }

          static PyObject *t_GroupDocs_get__maxScore(t_GroupDocs *self, void *data)
          {
            jfloat value;
            OBJ_CALL(value = self->object._get_maxScore());
            return PyFloat_FromDouble((double) value);
          }

          static PyObject *t_GroupDocs_get__score(t_GroupDocs *self, void *data)
          {
            jfloat value;
            OBJ_CALL(value = self->object._get_score());
            return PyFloat_FromDouble((double) value);
          }

          static PyObject *t_GroupDocs_get__scoreDocs(t_GroupDocs *self, void *data)
          {
            JArray< ::org::apache::lucene::search::ScoreDoc > value((jobject) NULL);
            OBJ_CALL(value = self->object._get_scoreDocs());
            return JArray<jobject>(value.this$).wrap(::org::apache::lucene::search::t_ScoreDoc::wrap_jobject);
          }

          static PyObject *t_GroupDocs_get__totalHits(t_GroupDocs *self, void *data)
          {
            ::org::apache::lucene::search::TotalHits value((jobject) NULL);
            OBJ_CALL(value = self->object._get_totalHits());
            return ::org::apache::lucene::search::t_TotalHits::wrap_Object(value);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queryparser/xml/CorePlusQueriesParser.h"
#include "org/apache/lucene/queryparser/classic/QueryParser.h"
#include "java/lang/String.h"
#include "org/apache/lucene/analysis/Analyzer.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace xml {

          ::java::lang::Class *CorePlusQueriesParser::class$ = NULL;
          jmethodID *CorePlusQueriesParser::mids$ = NULL;
          bool CorePlusQueriesParser::live$ = false;

          jclass CorePlusQueriesParser::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/queryparser/xml/CorePlusQueriesParser");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_d79fd8049d19a29e] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/analysis/Analyzer;Lorg/apache/lucene/queryparser/classic/QueryParser;)V");
              mids$[mid_init$_32cb72731c50a536] = env->getMethodID(cls, "<init>", "(Ljava/lang/String;Lorg/apache/lucene/analysis/Analyzer;)V");

              class$ = new ::java::lang::Class(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          CorePlusQueriesParser::CorePlusQueriesParser(const ::org::apache::lucene::analysis::Analyzer & a0, const ::org::apache::lucene::queryparser::classic::QueryParser & a1) : ::org::apache::lucene::queryparser::xml::CoreParser(env->newObject(initializeClass, &mids$, mid_init$_d79fd8049d19a29e, a0.this$, a1.this$)) {}

          CorePlusQueriesParser::CorePlusQueriesParser(const ::java::lang::String & a0, const ::org::apache::lucene::analysis::Analyzer & a1) : ::org::apache::lucene::queryparser::xml::CoreParser(env->newObject(initializeClass, &mids$, mid_init$_32cb72731c50a536, a0.this$, a1.this$)) {}
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace xml {
          static PyObject *t_CorePlusQueriesParser_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_CorePlusQueriesParser_instance_(PyTypeObject *type, PyObject *arg);
          static int t_CorePlusQueriesParser_init_(t_CorePlusQueriesParser *self, PyObject *args, PyObject *kwds);

          static PyMethodDef t_CorePlusQueriesParser__methods_[] = {
            DECLARE_METHOD(t_CorePlusQueriesParser, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_CorePlusQueriesParser, instance_, METH_O | METH_CLASS),
            { NULL, NULL, 0, NULL }
          };

          static PyType_Slot PY_TYPE_SLOTS(CorePlusQueriesParser)[] = {
            { Py_tp_methods, t_CorePlusQueriesParser__methods_ },
            { Py_tp_init, (void *) t_CorePlusQueriesParser_init_ },
            { 0, NULL }
          };

          static PyType_Def *PY_TYPE_BASES(CorePlusQueriesParser)[] = {
            &PY_TYPE_DEF(::org::apache::lucene::queryparser::xml::CoreParser),
            NULL
          };

          DEFINE_TYPE(CorePlusQueriesParser, t_CorePlusQueriesParser, CorePlusQueriesParser);

          void t_CorePlusQueriesParser::install(PyObject *module)
          {
            installType(&PY_TYPE(CorePlusQueriesParser), &PY_TYPE_DEF(CorePlusQueriesParser), module, "CorePlusQueriesParser", 0);
          }

          void t_CorePlusQueriesParser::initialize(PyObject *module)
          {
            PyObject_SetAttrString((PyObject *) PY_TYPE(CorePlusQueriesParser), "class_", make_descriptor(CorePlusQueriesParser::initializeClass, 1));
            PyObject_SetAttrString((PyObject *) PY_TYPE(CorePlusQueriesParser), "wrapfn_", make_descriptor(t_CorePlusQueriesParser::wrap_jobject));
            PyObject_SetAttrString((PyObject *) PY_TYPE(CorePlusQueriesParser), "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_CorePlusQueriesParser_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, CorePlusQueriesParser::initializeClass, 1)))
              return NULL;
            return t_CorePlusQueriesParser::wrap_Object(CorePlusQueriesParser(((t_CorePlusQueriesParser *) arg)->object.this$));
          }
          static PyObject *t_CorePlusQueriesParser_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, CorePlusQueriesParser::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_CorePlusQueriesParser_init_(t_CorePlusQueriesParser *self, PyObject *args, PyObject *kwds)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 2:
              {
                ::org::apache::lucene::analysis::Analyzer a0((jobject) NULL);
                ::org::apache::lucene::queryparser::classic::QueryParser a1((jobject) NULL);
                CorePlusQueriesParser object((jobject) NULL);

                if (!parseArgs(args, "kk", ::org::apache::lucene::analysis::Analyzer::initializeClass, ::org::apache::lucene::queryparser::classic::QueryParser::initializeClass, &a0, &a1))
                {
                  INT_CALL(object = CorePlusQueriesParser(a0, a1));
                  self->object = object;
                  break;
                }
              }
              {
                ::java::lang::String a0((jobject) NULL);
                ::org::apache::lucene::analysis::Analyzer a1((jobject) NULL);
                CorePlusQueriesParser object((jobject) NULL);

                if (!parseArgs(args, "sk", ::org::apache::lucene::analysis::Analyzer::initializeClass, &a0, &a1))
                {
                  INT_CALL(object = CorePlusQueriesParser(a0, a1));
                  self->object = object;
                  break;
                }
              }
             default:
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/spatial3d/geom/PlanetModel$DocValueEncoder.h"
#include "org/apache/lucene/spatial3d/geom/GeoPoint.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace spatial3d {
        namespace geom {

          ::java::lang::Class *PlanetModel$DocValueEncoder::class$ = NULL;
          jmethodID *PlanetModel$DocValueEncoder::mids$ = NULL;
          bool PlanetModel$DocValueEncoder::live$ = false;

          jclass PlanetModel$DocValueEncoder::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/spatial3d/geom/PlanetModel$DocValueEncoder");

              mids$ = new jmethodID[max_mid];
              mids$[mid_decodePoint_5ff07a836101ac3f] = env->getMethodID(cls, "decodePoint", "(J)Lorg/apache/lucene/spatial3d/geom/GeoPoint;");
              mids$[mid_decodeXValue_d0db46799f607804] = env->getMethodID(cls, "decodeXValue", "(J)D");
              mids$[mid_decodeYValue_d0db46799f607804] = env->getMethodID(cls, "decodeYValue", "(J)D");
              mids$[mid_decodeZValue_d0db46799f607804] = env->getMethodID(cls, "decodeZValue", "(J)D");
              mids$[mid_encodePoint_4657f7f425889d1e] = env->getMethodID(cls, "encodePoint", "(Lorg/apache/lucene/spatial3d/geom/GeoPoint;)J");
              mids$[mid_encodePoint_b74ad9218593d711] = env->getMethodID(cls, "encodePoint", "(DDD)J");
              mids$[mid_roundDownX_d089f34703408a66] = env->getMethodID(cls, "roundDownX", "(D)D");
              mids$[mid_roundDownY_d089f34703408a66] = env->getMethodID(cls, "roundDownY", "(D)D");
              mids$[mid_roundDownZ_d089f34703408a66] = env->getMethodID(cls, "roundDownZ", "(D)D");
              mids$[mid_roundUpX_d089f34703408a66] = env->getMethodID(cls, "roundUpX", "(D)D");
              mids$[mid_roundUpY_d089f34703408a66] = env->getMethodID(cls, "roundUpY", "(D)D");
              mids$[mid_roundUpZ_d089f34703408a66] = env->getMethodID(cls, "roundUpZ", "(D)D");

              class$ = new ::java::lang::Class(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          ::org::apache::lucene::spatial3d::geom::GeoPoint PlanetModel$DocValueEncoder::decodePoint(jlong a0) const
          {
            return ::org::apache::lucene::spatial3d::geom::GeoPoint(env->callObjectMethod(this$, mids$[mid_decodePoint_5ff07a836101ac3f], a0));
          }

          jdouble PlanetModel$DocValueEncoder::decodeXValue(jlong a0) const
          {
            return env->callDoubleMethod(this$, mids$[mid_decodeXValue_d0db46799f607804], a0);
          }

          jdouble PlanetModel$DocValueEncoder::decodeYValue(jlong a0) const
          {
            return env->callDoubleMethod(this$, mids$[mid_decodeYValue_d0db46799f607804], a0);
          }

          jdouble PlanetModel$DocValueEncoder::decodeZValue(jlong a0) const
          {
            return env->callDoubleMethod(this$, mids$[mid_decodeZValue_d0db46799f607804], a0);
          }

          jlong PlanetModel$DocValueEncoder::encodePoint(const ::org::apache::lucene::spatial3d::geom::GeoPoint & a0) const
          {
            return env->callLongMethod(this$, mids$[mid_encodePoint_4657f7f425889d1e], a0.this$);
          }

          jlong PlanetModel$DocValueEncoder::encodePoint(jdouble a0, jdouble a1, jdouble a2) const
          {
            return env->callLongMethod(this$, mids$[mid_encodePoint_b74ad9218593d711], a0, a1, a2);
          }

          jdouble PlanetModel$DocValueEncoder::roundDownX(jdouble a0) const
          {
            return env->callDoubleMethod(this$, mids$[mid_roundDownX_d089f34703408a66], a0);
          }

          jdouble PlanetModel$DocValueEncoder::roundDownY(jdouble a0) const
          {
            return env->callDoubleMethod(this$, mids$[mid_roundDownY_d089f34703408a66], a0);
          }

          jdouble PlanetModel$DocValueEncoder::roundDownZ(jdouble a0) const
          {
            return env->callDoubleMethod(this$, mids$[mid_roundDownZ_d089f34703408a66], a0);
          }

          jdouble PlanetModel$DocValueEncoder::roundUpX(jdouble a0) const
          {
            return env->callDoubleMethod(this$, mids$[mid_roundUpX_d089f34703408a66], a0);
          }

          jdouble PlanetModel$DocValueEncoder::roundUpY(jdouble a0) const
          {
            return env->callDoubleMethod(this$, mids$[mid_roundUpY_d089f34703408a66], a0);
          }

          jdouble PlanetModel$DocValueEncoder::roundUpZ(jdouble a0) const
          {
            return env->callDoubleMethod(this$, mids$[mid_roundUpZ_d089f34703408a66], a0);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace spatial3d {
        namespace geom {
          static PyObject *t_PlanetModel$DocValueEncoder_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_PlanetModel$DocValueEncoder_instance_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_PlanetModel$DocValueEncoder_decodePoint(t_PlanetModel$DocValueEncoder *self, PyObject *arg);
          static PyObject *t_PlanetModel$DocValueEncoder_decodeXValue(t_PlanetModel$DocValueEncoder *self, PyObject *arg);
          static PyObject *t_PlanetModel$DocValueEncoder_decodeYValue(t_PlanetModel$DocValueEncoder *self, PyObject *arg);
          static PyObject *t_PlanetModel$DocValueEncoder_decodeZValue(t_PlanetModel$DocValueEncoder *self, PyObject *arg);
          static PyObject *t_PlanetModel$DocValueEncoder_encodePoint(t_PlanetModel$DocValueEncoder *self, PyObject *args);
          static PyObject *t_PlanetModel$DocValueEncoder_roundDownX(t_PlanetModel$DocValueEncoder *self, PyObject *arg);
          static PyObject *t_PlanetModel$DocValueEncoder_roundDownY(t_PlanetModel$DocValueEncoder *self, PyObject *arg);
          static PyObject *t_PlanetModel$DocValueEncoder_roundDownZ(t_PlanetModel$DocValueEncoder *self, PyObject *arg);
          static PyObject *t_PlanetModel$DocValueEncoder_roundUpX(t_PlanetModel$DocValueEncoder *self, PyObject *arg);
          static PyObject *t_PlanetModel$DocValueEncoder_roundUpY(t_PlanetModel$DocValueEncoder *self, PyObject *arg);
          static PyObject *t_PlanetModel$DocValueEncoder_roundUpZ(t_PlanetModel$DocValueEncoder *self, PyObject *arg);

          static PyMethodDef t_PlanetModel$DocValueEncoder__methods_[] = {
            DECLARE_METHOD(t_PlanetModel$DocValueEncoder, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_PlanetModel$DocValueEncoder, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_PlanetModel$DocValueEncoder, decodePoint, METH_O),
            DECLARE_METHOD(t_PlanetModel$DocValueEncoder, decodeXValue, METH_O),
            DECLARE_METHOD(t_PlanetModel$DocValueEncoder, decodeYValue, METH_O),
            DECLARE_METHOD(t_PlanetModel$DocValueEncoder, decodeZValue, METH_O),
            DECLARE_METHOD(t_PlanetModel$DocValueEncoder, encodePoint, METH_VARARGS),
            DECLARE_METHOD(t_PlanetModel$DocValueEncoder, roundDownX, METH_O),
            DECLARE_METHOD(t_PlanetModel$DocValueEncoder, roundDownY, METH_O),
            DECLARE_METHOD(t_PlanetModel$DocValueEncoder, roundDownZ, METH_O),
            DECLARE_METHOD(t_PlanetModel$DocValueEncoder, roundUpX, METH_O),
            DECLARE_METHOD(t_PlanetModel$DocValueEncoder, roundUpY, METH_O),
            DECLARE_METHOD(t_PlanetModel$DocValueEncoder, roundUpZ, METH_O),
            { NULL, NULL, 0, NULL }
          };

          static PyType_Slot PY_TYPE_SLOTS(PlanetModel$DocValueEncoder)[] = {
            { Py_tp_methods, t_PlanetModel$DocValueEncoder__methods_ },
            { Py_tp_init, (void *) abstract_init },
            { 0, NULL }
          };

          static PyType_Def *PY_TYPE_BASES(PlanetModel$DocValueEncoder)[] = {
            &PY_TYPE_DEF(::java::lang::Object),
            NULL
          };

          DEFINE_TYPE(PlanetModel$DocValueEncoder, t_PlanetModel$DocValueEncoder, PlanetModel$DocValueEncoder);

          void t_PlanetModel$DocValueEncoder::install(PyObject *module)
          {
            installType(&PY_TYPE(PlanetModel$DocValueEncoder), &PY_TYPE_DEF(PlanetModel$DocValueEncoder), module, "PlanetModel$DocValueEncoder", 0);
          }

          void t_PlanetModel$DocValueEncoder::initialize(PyObject *module)
          {
            PyObject_SetAttrString((PyObject *) PY_TYPE(PlanetModel$DocValueEncoder), "class_", make_descriptor(PlanetModel$DocValueEncoder::initializeClass, 1));
            PyObject_SetAttrString((PyObject *) PY_TYPE(PlanetModel$DocValueEncoder), "wrapfn_", make_descriptor(t_PlanetModel$DocValueEncoder::wrap_jobject));
            PyObject_SetAttrString((PyObject *) PY_TYPE(PlanetModel$DocValueEncoder), "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_PlanetModel$DocValueEncoder_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, PlanetModel$DocValueEncoder::initializeClass, 1)))
              return NULL;
            return t_PlanetModel$DocValueEncoder::wrap_Object(PlanetModel$DocValueEncoder(((t_PlanetModel$DocValueEncoder *) arg)->object.this$));
          }
          static PyObject *t_PlanetModel$DocValueEncoder_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, PlanetModel$DocValueEncoder::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static PyObject *t_PlanetModel$DocValueEncoder_decodePoint(t_PlanetModel$DocValueEncoder *self, PyObject *arg)
          {
            jlong a0;
            ::org::apache::lucene::spatial3d::geom::GeoPoint result((jobject) NULL);

            if (!parseArg(arg, "J", &a0))
            {
              OBJ_CALL(result = self->object.decodePoint(a0));
              return ::org::apache::lucene::spatial3d::geom::t_GeoPoint::wrap_Object(result);
            }

            PyErr_SetArgsError((PyObject *) self, "decodePoint", arg);
            return NULL;
          }

          static PyObject *t_PlanetModel$DocValueEncoder_decodeXValue(t_PlanetModel$DocValueEncoder *self, PyObject *arg)
          {
            jlong a0;
            jdouble result;

            if (!parseArg(arg, "J", &a0))
            {
              OBJ_CALL(result = self->object.decodeXValue(a0));
              return PyFloat_FromDouble((double) result);
            }

            PyErr_SetArgsError((PyObject *) self, "decodeXValue", arg);
            return NULL;
          }

          static PyObject *t_PlanetModel$DocValueEncoder_decodeYValue(t_PlanetModel$DocValueEncoder *self, PyObject *arg)
          {
            jlong a0;
            jdouble result;

            if (!parseArg(arg, "J", &a0))
            {
              OBJ_CALL(result = self->object.decodeYValue(a0));
              return PyFloat_FromDouble((double) result);
            }

            PyErr_SetArgsError((PyObject *) self, "decodeYValue", arg);
            return NULL;
          }

          static PyObject *t_PlanetModel$DocValueEncoder_decodeZValue(t_PlanetModel$DocValueEncoder *self, PyObject *arg)
          {
            jlong a0;
            jdouble result;

            if (!parseArg(arg, "J", &a0))
            {
              OBJ_CALL(result = self->object.decodeZValue(a0));
              return PyFloat_FromDouble((double) result);
            }

            PyErr_SetArgsError((PyObject *) self, "decodeZValue", arg);
            return NULL;
          }

          static PyObject *t_PlanetModel$DocValueEncoder_encodePoint(t_PlanetModel$DocValueEncoder *self, PyObject *args)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 1:
              {
                ::org::apache::lucene::spatial3d::geom::GeoPoint a0((jobject) NULL);
                jlong result;

                if (!parseArgs(args, "k", ::org::apache::lucene::spatial3d::geom::GeoPoint::initializeClass, &a0))
                {
                  OBJ_CALL(result = self->object.encodePoint(a0));
                  return PyLong_FromLongLong((PY_LONG_LONG) result);
                }
              }
              break;
             case 3:
              {
                jdouble a0;
                jdouble a1;
                jdouble a2;
                jlong result;

                if (!parseArgs(args, "DDD", &a0, &a1, &a2))
                {
                  OBJ_CALL(result = self->object.encodePoint(a0, a1, a2));
                  return PyLong_FromLongLong((PY_LONG_LONG) result);
                }
              }
            }

            PyErr_SetArgsError((PyObject *) self, "encodePoint", args);
            return NULL;
          }

          static PyObject *t_PlanetModel$DocValueEncoder_roundDownX(t_PlanetModel$DocValueEncoder *self, PyObject *arg)
          {
            jdouble a0;
            jdouble result;

            if (!parseArg(arg, "D", &a0))
            {
              OBJ_CALL(result = self->object.roundDownX(a0));
              return PyFloat_FromDouble((double) result);
            }

            PyErr_SetArgsError((PyObject *) self, "roundDownX", arg);
            return NULL;
          }

          static PyObject *t_PlanetModel$DocValueEncoder_roundDownY(t_PlanetModel$DocValueEncoder *self, PyObject *arg)
          {
            jdouble a0;
            jdouble result;

            if (!parseArg(arg, "D", &a0))
            {
              OBJ_CALL(result = self->object.roundDownY(a0));
              return PyFloat_FromDouble((double) result);
            }

            PyErr_SetArgsError((PyObject *) self, "roundDownY", arg);
            return NULL;
          }

          static PyObject *t_PlanetModel$DocValueEncoder_roundDownZ(t_PlanetModel$DocValueEncoder *self, PyObject *arg)
          {
            jdouble a0;
            jdouble result;

            if (!parseArg(arg, "D", &a0))
            {
              OBJ_CALL(result = self->object.roundDownZ(a0));
              return PyFloat_FromDouble((double) result);
            }

            PyErr_SetArgsError((PyObject *) self, "roundDownZ", arg);
            return NULL;
          }

          static PyObject *t_PlanetModel$DocValueEncoder_roundUpX(t_PlanetModel$DocValueEncoder *self, PyObject *arg)
          {
            jdouble a0;
            jdouble result;

            if (!parseArg(arg, "D", &a0))
            {
              OBJ_CALL(result = self->object.roundUpX(a0));
              return PyFloat_FromDouble((double) result);
            }

            PyErr_SetArgsError((PyObject *) self, "roundUpX", arg);
            return NULL;
          }

          static PyObject *t_PlanetModel$DocValueEncoder_roundUpY(t_PlanetModel$DocValueEncoder *self, PyObject *arg)
          {
            jdouble a0;
            jdouble result;

            if (!parseArg(arg, "D", &a0))
            {
              OBJ_CALL(result = self->object.roundUpY(a0));
              return PyFloat_FromDouble((double) result);
            }

            PyErr_SetArgsError((PyObject *) self, "roundUpY", arg);
            return NULL;
          }

          static PyObject *t_PlanetModel$DocValueEncoder_roundUpZ(t_PlanetModel$DocValueEncoder *self, PyObject *arg)
          {
            jdouble a0;
            jdouble result;

            if (!parseArg(arg, "D", &a0))
            {
              OBJ_CALL(result = self->object.roundUpZ(a0));
              return PyFloat_FromDouble((double) result);
            }

            PyErr_SetArgsError((PyObject *) self, "roundUpZ", arg);
            return NULL;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/suggest/BitsProducer.h"
#include "org/apache/lucene/util/Bits.h"
#include "org/apache/lucene/index/LeafReaderContext.h"
#include "java/io/IOException.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace suggest {

          ::java::lang::Class *BitsProducer::class$ = NULL;
          jmethodID *BitsProducer::mids$ = NULL;
          bool BitsProducer::live$ = false;

          jclass BitsProducer::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/search/suggest/BitsProducer");

              mids$ = new jmethodID[max_mid];
              mids$[mid_getBits_db8655403a5e2516] = env->getMethodID(cls, "getBits", "(Lorg/apache/lucene/index/LeafReaderContext;)Lorg/apache/lucene/util/Bits;");

              class$ = new ::java::lang::Class(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          ::org::apache::lucene::util::Bits BitsProducer::getBits(const ::org::apache::lucene::index::LeafReaderContext & a0) const
          {
            return ::org::apache::lucene::util::Bits(env->callObjectMethod(this$, mids$[mid_getBits_db8655403a5e2516], a0.this$));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace suggest {
          static PyObject *t_BitsProducer_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_BitsProducer_instance_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_BitsProducer_getBits(t_BitsProducer *self, PyObject *arg);

          static PyMethodDef t_BitsProducer__methods_[] = {
            DECLARE_METHOD(t_BitsProducer, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_BitsProducer, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_BitsProducer, getBits, METH_O),
            { NULL, NULL, 0, NULL }
          };

          static PyType_Slot PY_TYPE_SLOTS(BitsProducer)[] = {
            { Py_tp_methods, t_BitsProducer__methods_ },
            { Py_tp_init, (void *) abstract_init },
            { 0, NULL }
          };

          static PyType_Def *PY_TYPE_BASES(BitsProducer)[] = {
            &PY_TYPE_DEF(::java::lang::Object),
            NULL
          };

          DEFINE_TYPE(BitsProducer, t_BitsProducer, BitsProducer);

          void t_BitsProducer::install(PyObject *module)
          {
            installType(&PY_TYPE(BitsProducer), &PY_TYPE_DEF(BitsProducer), module, "BitsProducer", 0);
          }

          void t_BitsProducer::initialize(PyObject *module)
          {
            PyObject_SetAttrString((PyObject *) PY_TYPE(BitsProducer), "class_", make_descriptor(BitsProducer::initializeClass, 1));
            PyObject_SetAttrString((PyObject *) PY_TYPE(BitsProducer), "wrapfn_", make_descriptor(t_BitsProducer::wrap_jobject));
            PyObject_SetAttrString((PyObject *) PY_TYPE(BitsProducer), "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_BitsProducer_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, BitsProducer::initializeClass, 1)))
              return NULL;
            return t_BitsProducer::wrap_Object(BitsProducer(((t_BitsProducer *) arg)->object.this$));
          }
          static PyObject *t_BitsProducer_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, BitsProducer::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static PyObject *t_BitsProducer_getBits(t_BitsProducer *self, PyObject *arg)
          {
            ::org::apache::lucene::index::LeafReaderContext a0((jobject) NULL);
            ::org::apache::lucene::util::Bits result((jobject) NULL);

            if (!parseArg(arg, "k", ::org::apache::lucene::index::LeafReaderContext::initializeClass, &a0))
            {
              OBJ_CALL(result = self->object.getBits(a0));
              return ::org::apache::lucene::util::t_Bits::wrap_Object(result);
            }

            PyErr_SetArgsError((PyObject *) self, "getBits", arg);
            return NULL;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/codecs/uniformsplit/BlockEncoder.h"
#include "org/apache/lucene/codecs/uniformsplit/BlockEncoder$WritableBytes.h"
#include "org/apache/lucene/store/DataInput.h"
#include "java/io/IOException.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace codecs {
        namespace uniformsplit {

          ::java::lang::Class *BlockEncoder::class$ = NULL;
          jmethodID *BlockEncoder::mids$ = NULL;
          bool BlockEncoder::live$ = false;

          jclass BlockEncoder::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/codecs/uniformsplit/BlockEncoder");

              mids$ = new jmethodID[max_mid];
              mids$[mid_encode_f2a8ed046b150187] = env->getMethodID(cls, "encode", "(Lorg/apache/lucene/store/DataInput;J)Lorg/apache/lucene/codecs/uniformsplit/BlockEncoder$WritableBytes;");

              class$ = new ::java::lang::Class(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          ::org::apache::lucene::codecs::uniformsplit::BlockEncoder$WritableBytes BlockEncoder::encode(const ::org::apache::lucene::store::DataInput & a0, jlong a1) const
          {
            return ::org::apache::lucene::codecs::uniformsplit::BlockEncoder$WritableBytes(env->callObjectMethod(this$, mids$[mid_encode_f2a8ed046b150187], a0.this$, a1));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace codecs {
        namespace uniformsplit {
          static PyObject *t_BlockEncoder_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_BlockEncoder_instance_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_BlockEncoder_encode(t_BlockEncoder *self, PyObject *args);

          static PyMethodDef t_BlockEncoder__methods_[] = {
            DECLARE_METHOD(t_BlockEncoder, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_BlockEncoder, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_BlockEncoder, encode, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          static PyType_Slot PY_TYPE_SLOTS(BlockEncoder)[] = {
            { Py_tp_methods, t_BlockEncoder__methods_ },
            { Py_tp_init, (void *) abstract_init },
            { 0, NULL }
          };

          static PyType_Def *PY_TYPE_BASES(BlockEncoder)[] = {
            &PY_TYPE_DEF(::java::lang::Object),
            NULL
          };

          DEFINE_TYPE(BlockEncoder, t_BlockEncoder, BlockEncoder);

          void t_BlockEncoder::install(PyObject *module)
          {
            installType(&PY_TYPE(BlockEncoder), &PY_TYPE_DEF(BlockEncoder), module, "BlockEncoder", 0);
            PyObject_SetAttrString((PyObject *) PY_TYPE(BlockEncoder), "WritableBytes", make_descriptor(&PY_TYPE_DEF(BlockEncoder$WritableBytes)));
          }

          void t_BlockEncoder::initialize(PyObject *module)
          {
            PyObject_SetAttrString((PyObject *) PY_TYPE(BlockEncoder), "class_", make_descriptor(BlockEncoder::initializeClass, 1));
            PyObject_SetAttrString((PyObject *) PY_TYPE(BlockEncoder), "wrapfn_", make_descriptor(t_BlockEncoder::wrap_jobject));
            PyObject_SetAttrString((PyObject *) PY_TYPE(BlockEncoder), "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_BlockEncoder_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, BlockEncoder::initializeClass, 1)))
              return NULL;
            return t_BlockEncoder::wrap_Object(BlockEncoder(((t_BlockEncoder *) arg)->object.this$));
          }
          static PyObject *t_BlockEncoder_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, BlockEncoder::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static PyObject *t_BlockEncoder_encode(t_BlockEncoder *self, PyObject *args)
          {
            ::org::apache::lucene::store::DataInput a0((jobject) NULL);
            jlong a1;
            ::org::apache::lucene::codecs::uniformsplit::BlockEncoder$WritableBytes result((jobject) NULL);

            if (!parseArgs(args, "kJ", ::org::apache::lucene::store::DataInput::initializeClass, &a0, &a1))
            {
              OBJ_CALL(result = self->object.encode(a0, a1));
              return ::org::apache::lucene::codecs::uniformsplit::t_BlockEncoder$WritableBytes::wrap_Object(result);
            }

            PyErr_SetArgsError((PyObject *) self, "encode", args);
            return NULL;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/util/mutable/MutableValueBool.h"
#include "java/lang/Object.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        namespace mutable$ {

          ::java::lang::Class *MutableValueBool::class$ = NULL;
          jmethodID *MutableValueBool::mids$ = NULL;
          jfieldID *MutableValueBool::fids$ = NULL;
          bool MutableValueBool::live$ = false;

          jclass MutableValueBool::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/util/mutable/MutableValueBool");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_f2cc1bce94666404] = env->getMethodID(cls, "<init>", "()V");
              mids$[mid_compareSameType_5a4805a36cf611e7] = env->getMethodID(cls, "compareSameType", "(Ljava/lang/Object;)I");
              mids$[mid_copy_3a4da6d6b1464d7a] = env->getMethodID(cls, "copy", "(Lorg/apache/lucene/util/mutable/MutableValue;)V");
              mids$[mid_duplicate_b6a1db04136f7d9b] = env->getMethodID(cls, "duplicate", "()Lorg/apache/lucene/util/mutable/MutableValue;");
              mids$[mid_equalsSameType_8b72f2dcdde6fd1d] = env->getMethodID(cls, "equalsSameType", "(Ljava/lang/Object;)Z");
              mids$[mid_hashCode_9972fcc56b44e79d] = env->getMethodID(cls, "hashCode", "()I");
              mids$[mid_toObject_d6bcd06f3102c4d9] = env->getMethodID(cls, "toObject", "()Ljava/lang/Object;");

              fids$ = new jfieldID[max_fid];
              fids$[fid_value] = env->getFieldID(cls, "value", "Z");

              class$ = new ::java::lang::Class(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          MutableValueBool::MutableValueBool() : ::org::apache::lucene::util::mutable$::MutableValue(env->newObject(initializeClass, &mids$, mid_init$_f2cc1bce94666404)) {}

          jint MutableValueBool::compareSameType(const ::java::lang::Object & a0) const
          {
            return env->callIntMethod(this$, mids$[mid_compareSameType_5a4805a36cf611e7], a0.this$);
          }

          void MutableValueBool::copy(const ::org::apache::lucene::util::mutable$::MutableValue & a0) const
          {
            env->callVoidMethod(this$, mids$[mid_copy_3a4da6d6b1464d7a], a0.this$);
          }

          ::org::apache::lucene::util::mutable$::MutableValue MutableValueBool::duplicate() const
          {
            return ::org::apache::lucene::util::mutable$::MutableValue(env->callObjectMethod(this$, mids$[mid_duplicate_b6a1db04136f7d9b]));
          }

          jboolean MutableValueBool::equalsSameType(const ::java::lang::Object & a0) const
          {
            return env->callBooleanMethod(this$, mids$[mid_equalsSameType_8b72f2dcdde6fd1d], a0.this$);
          }

          jint MutableValueBool::hashCode() const
          {
            return env->callIntMethod(this$, mids$[mid_hashCode_9972fcc56b44e79d]);
          }

          ::java::lang::Object MutableValueBool::toObject() const
          {
            return ::java::lang::Object(env->callObjectMethod(this$, mids$[mid_toObject_d6bcd06f3102c4d9]));
          }

          jboolean MutableValueBool::_get_value() const
          {
            return env->getBooleanField(this$, fids$[fid_value]);
          }

          void MutableValueBool::_set_value(jboolean a0) const
          {
            env->setBooleanField(this$, fids$[fid_value], a0);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        namespace mutable$ {
          static PyObject *t_MutableValueBool_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_MutableValueBool_instance_(PyTypeObject *type, PyObject *arg);
          static int t_MutableValueBool_init_(t_MutableValueBool *self, PyObject *args, PyObject *kwds);
          static PyObject *t_MutableValueBool_compareSameType(t_MutableValueBool *self, PyObject *args);
          static PyObject *t_MutableValueBool_copy(t_MutableValueBool *self, PyObject *args);
          static PyObject *t_MutableValueBool_duplicate(t_MutableValueBool *self, PyObject *args);
          static PyObject *t_MutableValueBool_equalsSameType(t_MutableValueBool *self, PyObject *args);
          static PyObject *t_MutableValueBool_hashCode(t_MutableValueBool *self, PyObject *args);
          static PyObject *t_MutableValueBool_toObject(t_MutableValueBool *self, PyObject *args);
          static PyObject *t_MutableValueBool_get__value(t_MutableValueBool *self, void *data);
          static int t_MutableValueBool_set__value(t_MutableValueBool *self, PyObject *arg, void *data);

          static PyGetSetDef t_MutableValueBool__fields_[] = {
            DECLARE_GETSET_FIELD(t_MutableValueBool, value),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_MutableValueBool__methods_[] = {
            DECLARE_METHOD(t_MutableValueBool, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_MutableValueBool, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_MutableValueBool, compareSameType, METH_VARARGS),
            DECLARE_METHOD(t_MutableValueBool, copy, METH_VARARGS),
            DECLARE_METHOD(t_MutableValueBool, duplicate, METH_VARARGS),
            DECLARE_METHOD(t_MutableValueBool, equalsSameType, METH_VARARGS),
            DECLARE_METHOD(t_MutableValueBool, hashCode, METH_VARARGS),
            DECLARE_METHOD(t_MutableValueBool, toObject, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          static PyType_Slot PY_TYPE_SLOTS(MutableValueBool)[] = {
            { Py_tp_methods, t_MutableValueBool__methods_ },
            { Py_tp_init, (void *) t_MutableValueBool_init_ },
            { Py_tp_getset, t_MutableValueBool__fields_ },
            { 0, NULL }
          };

          static PyType_Def *PY_TYPE_BASES(MutableValueBool)[] = {
            &PY_TYPE_DEF(::org::apache::lucene::util::mutable$::MutableValue),
            NULL
          };

          DEFINE_TYPE(MutableValueBool, t_MutableValueBool, MutableValueBool);

          void t_MutableValueBool::install(PyObject *module)
          {
            installType(&PY_TYPE(MutableValueBool), &PY_TYPE_DEF(MutableValueBool), module, "MutableValueBool", 0);
          }

          void t_MutableValueBool::initialize(PyObject *module)
          {
            PyObject_SetAttrString((PyObject *) PY_TYPE(MutableValueBool), "class_", make_descriptor(MutableValueBool::initializeClass, 1));
            PyObject_SetAttrString((PyObject *) PY_TYPE(MutableValueBool), "wrapfn_", make_descriptor(t_MutableValueBool::wrap_jobject));
            PyObject_SetAttrString((PyObject *) PY_TYPE(MutableValueBool), "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_MutableValueBool_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, MutableValueBool::initializeClass, 1)))
              return NULL;
            return t_MutableValueBool::wrap_Object(MutableValueBool(((t_MutableValueBool *) arg)->object.this$));
          }
          static PyObject *t_MutableValueBool_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, MutableValueBool::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_MutableValueBool_init_(t_MutableValueBool *self, PyObject *args, PyObject *kwds)
          {
            MutableValueBool object((jobject) NULL);

            INT_CALL(object = MutableValueBool());
            self->object = object;

            return 0;
          }

          static PyObject *t_MutableValueBool_compareSameType(t_MutableValueBool *self, PyObject *args)
          {
            ::java::lang::Object a0((jobject) NULL);
            jint result;

            if (!parseArgs(args, "o", &a0))
            {
              OBJ_CALL(result = self->object.compareSameType(a0));
              return PyLong_FromLong((long) result);
            }

            return callSuper(PY_TYPE(MutableValueBool), (PyObject *) self, "compareSameType", args, 2);
          }

          static PyObject *t_MutableValueBool_copy(t_MutableValueBool *self, PyObject *args)
          {
            ::org::apache::lucene::util::mutable$::MutableValue a0((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::util::mutable$::MutableValue::initializeClass, &a0))
            {
              OBJ_CALL(self->object.copy(a0));
              Py_RETURN_NONE;
            }

            return callSuper(PY_TYPE(MutableValueBool), (PyObject *) self, "copy", args, 2);
          }

          static PyObject *t_MutableValueBool_duplicate(t_MutableValueBool *self, PyObject *args)
          {
            ::org::apache::lucene::util::mutable$::MutableValue result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.duplicate());
              return ::org::apache::lucene::util::mutable$::t_MutableValue::wrap_Object(result);
            }

            return callSuper(PY_TYPE(MutableValueBool), (PyObject *) self, "duplicate", args, 2);
          }

          static PyObject *t_MutableValueBool_equalsSameType(t_MutableValueBool *self, PyObject *args)
          {
            ::java::lang::Object a0((jobject) NULL);
            jboolean result;

            if (!parseArgs(args, "o", &a0))
            {
              OBJ_CALL(result = self->object.equalsSameType(a0));
              Py_RETURN_BOOL(result);
            }

            return callSuper(PY_TYPE(MutableValueBool), (PyObject *) self, "equalsSameType", args, 2);
          }

          static PyObject *t_MutableValueBool_hashCode(t_MutableValueBool *self, PyObject *args)
          {
            jint result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.hashCode());
              return PyLong_FromLong((long) result);
            }

            return callSuper(PY_TYPE(MutableValueBool), (PyObject *) self, "hashCode", args, 2);
          }

          static PyObject *t_MutableValueBool_toObject(t_MutableValueBool *self, PyObject *args)
          {
            ::java::lang::Object result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.toObject());
              return ::java::lang::t_Object::wrap_Object(result);
            }

            return callSuper(PY_TYPE(MutableValueBool), (PyObject *) self, "toObject", args, 2);
          }

          static PyObject *t_MutableValueBool_get__value(t_MutableValueBool *self, void *data)
          {
            jboolean value;
            OBJ_CALL(value = self->object._get_value());
            Py_RETURN_BOOL(value);
          }
          static int t_MutableValueBool_set__value(t_MutableValueBool *self, PyObject *arg, void *data)
          {
            jboolean value;
            if (!parseArg(arg, "Z", &value))
            {
              INT_CALL(self->object._set_value(value));
              return 0;
            }
            PyErr_SetArgsError((PyObject *) self, "value", arg);
            return -1;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/ko/dict/BinaryDictionary$ResourceScheme.h"
#include "java/lang/String.h"
#include "org/apache/lucene/analysis/ko/dict/BinaryDictionary$ResourceScheme.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace ko {
          namespace dict {

            ::java::lang::Class *BinaryDictionary$ResourceScheme::class$ = NULL;
            jmethodID *BinaryDictionary$ResourceScheme::mids$ = NULL;
            bool BinaryDictionary$ResourceScheme::live$ = false;
            BinaryDictionary$ResourceScheme *BinaryDictionary$ResourceScheme::CLASSPATH = NULL;
            BinaryDictionary$ResourceScheme *BinaryDictionary$ResourceScheme::FILE = NULL;

            jclass BinaryDictionary$ResourceScheme::initializeClass(bool getOnly)
            {
              if (getOnly)
                return (jclass) (live$ ? class$->this$ : NULL);
              if (class$ == NULL)
              {
                jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/ko/dict/BinaryDictionary$ResourceScheme");

                mids$ = new jmethodID[max_mid];
                mids$[mid_valueOf_f78105a4a1e3a008] = env->getStaticMethodID(cls, "valueOf", "(Ljava/lang/String;)Lorg/apache/lucene/analysis/ko/dict/BinaryDictionary$ResourceScheme;");
                mids$[mid_values_690b8c63c1f82d27] = env->getStaticMethodID(cls, "values", "()[Lorg/apache/lucene/analysis/ko/dict/BinaryDictionary$ResourceScheme;");

                class$ = new ::java::lang::Class(cls);
                cls = (jclass) class$->this$;

                CLASSPATH = new BinaryDictionary$ResourceScheme(env->getStaticObjectField(cls, "CLASSPATH", "Lorg/apache/lucene/analysis/ko/dict/BinaryDictionary$ResourceScheme;"));
                FILE = new BinaryDictionary$ResourceScheme(env->getStaticObjectField(cls, "FILE", "Lorg/apache/lucene/analysis/ko/dict/BinaryDictionary$ResourceScheme;"));
                live$ = true;
              }
              return (jclass) class$->this$;
            }

            BinaryDictionary$ResourceScheme BinaryDictionary$ResourceScheme::valueOf(const ::java::lang::String & a0)
            {
              jclass cls = env->getClass(initializeClass);
              return BinaryDictionary$ResourceScheme(env->callStaticObjectMethod(cls, mids$[mid_valueOf_f78105a4a1e3a008], a0.this$));
            }

            JArray< BinaryDictionary$ResourceScheme > BinaryDictionary$ResourceScheme::values()
            {
              jclass cls = env->getClass(initializeClass);
              return JArray< BinaryDictionary$ResourceScheme >(env->callStaticObjectMethod(cls, mids$[mid_values_690b8c63c1f82d27]));
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace ko {
          namespace dict {
            static PyObject *t_BinaryDictionary$ResourceScheme_cast_(PyTypeObject *type, PyObject *arg);
            static PyObject *t_BinaryDictionary$ResourceScheme_instance_(PyTypeObject *type, PyObject *arg);
            static PyObject *t_BinaryDictionary$ResourceScheme_of_(t_BinaryDictionary$ResourceScheme *self, PyObject *args);
            static PyObject *t_BinaryDictionary$ResourceScheme_valueOf(PyTypeObject *type, PyObject *args);
            static PyObject *t_BinaryDictionary$ResourceScheme_values(PyTypeObject *type);
            static PyObject *t_BinaryDictionary$ResourceScheme_get__parameters_(t_BinaryDictionary$ResourceScheme *self, void *data);
            static PyGetSetDef t_BinaryDictionary$ResourceScheme__fields_[] = {
              DECLARE_GET_FIELD(t_BinaryDictionary$ResourceScheme, parameters_),
              { NULL, NULL, NULL, NULL, NULL }
            };

            static PyMethodDef t_BinaryDictionary$ResourceScheme__methods_[] = {
              DECLARE_METHOD(t_BinaryDictionary$ResourceScheme, cast_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_BinaryDictionary$ResourceScheme, instance_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_BinaryDictionary$ResourceScheme, of_, METH_VARARGS),
              DECLARE_METHOD(t_BinaryDictionary$ResourceScheme, valueOf, METH_VARARGS | METH_CLASS),
              DECLARE_METHOD(t_BinaryDictionary$ResourceScheme, values, METH_NOARGS | METH_CLASS),
              { NULL, NULL, 0, NULL }
            };

            static PyType_Slot PY_TYPE_SLOTS(BinaryDictionary$ResourceScheme)[] = {
              { Py_tp_methods, t_BinaryDictionary$ResourceScheme__methods_ },
              { Py_tp_init, (void *) abstract_init },
              { Py_tp_getset, t_BinaryDictionary$ResourceScheme__fields_ },
              { 0, NULL }
            };

            static PyType_Def *PY_TYPE_BASES(BinaryDictionary$ResourceScheme)[] = {
              &PY_TYPE_DEF(::java::lang::Enum),
              NULL
            };

            DEFINE_TYPE(BinaryDictionary$ResourceScheme, t_BinaryDictionary$ResourceScheme, BinaryDictionary$ResourceScheme);
            PyObject *t_BinaryDictionary$ResourceScheme::wrap_Object(const BinaryDictionary$ResourceScheme& object, PyTypeObject *p0)
            {
              PyObject *obj = t_BinaryDictionary$ResourceScheme::wrap_Object(object);
              if (obj != NULL && obj != Py_None)
              {
                t_BinaryDictionary$ResourceScheme *self = (t_BinaryDictionary$ResourceScheme *) obj;
                self->parameters[0] = p0;
              }
              return obj;
            }

            PyObject *t_BinaryDictionary$ResourceScheme::wrap_jobject(const jobject& object, PyTypeObject *p0)
            {
              PyObject *obj = t_BinaryDictionary$ResourceScheme::wrap_jobject(object);
              if (obj != NULL && obj != Py_None)
              {
                t_BinaryDictionary$ResourceScheme *self = (t_BinaryDictionary$ResourceScheme *) obj;
                self->parameters[0] = p0;
              }
              return obj;
            }

            void t_BinaryDictionary$ResourceScheme::install(PyObject *module)
            {
              installType(&PY_TYPE(BinaryDictionary$ResourceScheme), &PY_TYPE_DEF(BinaryDictionary$ResourceScheme), module, "BinaryDictionary$ResourceScheme", 0);
            }

            void t_BinaryDictionary$ResourceScheme::initialize(PyObject *module)
            {
              PyObject_SetAttrString((PyObject *) PY_TYPE(BinaryDictionary$ResourceScheme), "class_", make_descriptor(BinaryDictionary$ResourceScheme::initializeClass, 1));
              PyObject_SetAttrString((PyObject *) PY_TYPE(BinaryDictionary$ResourceScheme), "wrapfn_", make_descriptor(t_BinaryDictionary$ResourceScheme::wrap_jobject));
              PyObject_SetAttrString((PyObject *) PY_TYPE(BinaryDictionary$ResourceScheme), "boxfn_", make_descriptor(boxObject));
              env->getClass(BinaryDictionary$ResourceScheme::initializeClass);
              PyObject_SetAttrString((PyObject *) PY_TYPE(BinaryDictionary$ResourceScheme), "CLASSPATH", make_descriptor(t_BinaryDictionary$ResourceScheme::wrap_Object(*BinaryDictionary$ResourceScheme::CLASSPATH)));
              PyObject_SetAttrString((PyObject *) PY_TYPE(BinaryDictionary$ResourceScheme), "FILE", make_descriptor(t_BinaryDictionary$ResourceScheme::wrap_Object(*BinaryDictionary$ResourceScheme::FILE)));
            }

            static PyObject *t_BinaryDictionary$ResourceScheme_cast_(PyTypeObject *type, PyObject *arg)
            {
              if (!(arg = castCheck(arg, BinaryDictionary$ResourceScheme::initializeClass, 1)))
                return NULL;
              return t_BinaryDictionary$ResourceScheme::wrap_Object(BinaryDictionary$ResourceScheme(((t_BinaryDictionary$ResourceScheme *) arg)->object.this$));
            }
            static PyObject *t_BinaryDictionary$ResourceScheme_instance_(PyTypeObject *type, PyObject *arg)
            {
              if (!castCheck(arg, BinaryDictionary$ResourceScheme::initializeClass, 0))
                Py_RETURN_FALSE;
              Py_RETURN_TRUE;
            }

            static PyObject *t_BinaryDictionary$ResourceScheme_of_(t_BinaryDictionary$ResourceScheme *self, PyObject *args)
            {
              if (!parseArg(args, "T", 1, &(self->parameters)))
                Py_RETURN_SELF;
              return PyErr_SetArgsError((PyObject *) self, "of_", args);
            }

            static PyObject *t_BinaryDictionary$ResourceScheme_valueOf(PyTypeObject *type, PyObject *args)
            {
              ::java::lang::String a0((jobject) NULL);
              BinaryDictionary$ResourceScheme result((jobject) NULL);

              if (!parseArgs(args, "s", &a0))
              {
                OBJ_CALL(result = ::org::apache::lucene::analysis::ko::dict::BinaryDictionary$ResourceScheme::valueOf(a0));
                return t_BinaryDictionary$ResourceScheme::wrap_Object(result);
              }

              return callSuper(type, "valueOf", args, 2);
            }

            static PyObject *t_BinaryDictionary$ResourceScheme_values(PyTypeObject *type)
            {
              JArray< BinaryDictionary$ResourceScheme > result((jobject) NULL);
              OBJ_CALL(result = ::org::apache::lucene::analysis::ko::dict::BinaryDictionary$ResourceScheme::values());
              return JArray<jobject>(result.this$).wrap(t_BinaryDictionary$ResourceScheme::wrap_jobject);
            }
            static PyObject *t_BinaryDictionary$ResourceScheme_get__parameters_(t_BinaryDictionary$ResourceScheme *self, void *data)
            {
              return typeParameters(self->parameters, sizeof(self->parameters));
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/store/RandomAccessInput.h"
#include "java/io/IOException.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace store {

        ::java::lang::Class *RandomAccessInput::class$ = NULL;
        jmethodID *RandomAccessInput::mids$ = NULL;
        bool RandomAccessInput::live$ = false;

        jclass RandomAccessInput::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/store/RandomAccessInput");

            mids$ = new jmethodID[max_mid];
            mids$[mid_readByte_70f46e25a8aca047] = env->getMethodID(cls, "readByte", "(J)B");
            mids$[mid_readInt_694afffd0eb7dc3c] = env->getMethodID(cls, "readInt", "(J)I");
            mids$[mid_readLong_d711eecdc469624a] = env->getMethodID(cls, "readLong", "(J)J");
            mids$[mid_readShort_e963ff2cc414b347] = env->getMethodID(cls, "readShort", "(J)S");

            class$ = new ::java::lang::Class(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        jbyte RandomAccessInput::readByte(jlong a0) const
        {
          return env->callByteMethod(this$, mids$[mid_readByte_70f46e25a8aca047], a0);
        }

        jint RandomAccessInput::readInt(jlong a0) const
        {
          return env->callIntMethod(this$, mids$[mid_readInt_694afffd0eb7dc3c], a0);
        }

        jlong RandomAccessInput::readLong(jlong a0) const
        {
          return env->callLongMethod(this$, mids$[mid_readLong_d711eecdc469624a], a0);
        }

        jshort RandomAccessInput::readShort(jlong a0) const
        {
          return env->callShortMethod(this$, mids$[mid_readShort_e963ff2cc414b347], a0);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace store {
        static PyObject *t_RandomAccessInput_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_RandomAccessInput_instance_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_RandomAccessInput_readByte(t_RandomAccessInput *self, PyObject *arg);
        static PyObject *t_RandomAccessInput_readInt(t_RandomAccessInput *self, PyObject *arg);
        static PyObject *t_RandomAccessInput_readLong(t_RandomAccessInput *self, PyObject *arg);
        static PyObject *t_RandomAccessInput_readShort(t_RandomAccessInput *self, PyObject *arg);

        static PyMethodDef t_RandomAccessInput__methods_[] = {
          DECLARE_METHOD(t_RandomAccessInput, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_RandomAccessInput, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_RandomAccessInput, readByte, METH_O),
          DECLARE_METHOD(t_RandomAccessInput, readInt, METH_O),
          DECLARE_METHOD(t_RandomAccessInput, readLong, METH_O),
          DECLARE_METHOD(t_RandomAccessInput, readShort, METH_O),
          { NULL, NULL, 0, NULL }
        };

        static PyType_Slot PY_TYPE_SLOTS(RandomAccessInput)[] = {
          { Py_tp_methods, t_RandomAccessInput__methods_ },
          { Py_tp_init, (void *) abstract_init },
          { 0, NULL }
        };

        static PyType_Def *PY_TYPE_BASES(RandomAccessInput)[] = {
          &PY_TYPE_DEF(::java::lang::Object),
          NULL
        };

        DEFINE_TYPE(RandomAccessInput, t_RandomAccessInput, RandomAccessInput);

        void t_RandomAccessInput::install(PyObject *module)
        {
          installType(&PY_TYPE(RandomAccessInput), &PY_TYPE_DEF(RandomAccessInput), module, "RandomAccessInput", 0);
        }

        void t_RandomAccessInput::initialize(PyObject *module)
        {
          PyObject_SetAttrString((PyObject *) PY_TYPE(RandomAccessInput), "class_", make_descriptor(RandomAccessInput::initializeClass, 1));
          PyObject_SetAttrString((PyObject *) PY_TYPE(RandomAccessInput), "wrapfn_", make_descriptor(t_RandomAccessInput::wrap_jobject));
          PyObject_SetAttrString((PyObject *) PY_TYPE(RandomAccessInput), "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_RandomAccessInput_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, RandomAccessInput::initializeClass, 1)))
            return NULL;
          return t_RandomAccessInput::wrap_Object(RandomAccessInput(((t_RandomAccessInput *) arg)->object.this$));
        }
        static PyObject *t_RandomAccessInput_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, RandomAccessInput::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static PyObject *t_RandomAccessInput_readByte(t_RandomAccessInput *self, PyObject *arg)
        {
          jlong a0;
          jbyte result;

          if (!parseArg(arg, "J", &a0))
          {
            OBJ_CALL(result = self->object.readByte(a0));
            return PyLong_FromLong((long) result);
          }

          PyErr_SetArgsError((PyObject *) self, "readByte", arg);
          return NULL;
        }

        static PyObject *t_RandomAccessInput_readInt(t_RandomAccessInput *self, PyObject *arg)
        {
          jlong a0;
          jint result;

          if (!parseArg(arg, "J", &a0))
          {
            OBJ_CALL(result = self->object.readInt(a0));
            return PyLong_FromLong((long) result);
          }

          PyErr_SetArgsError((PyObject *) self, "readInt", arg);
          return NULL;
        }

        static PyObject *t_RandomAccessInput_readLong(t_RandomAccessInput *self, PyObject *arg)
        {
          jlong a0;
          jlong result;

          if (!parseArg(arg, "J", &a0))
          {
            OBJ_CALL(result = self->object.readLong(a0));
            return PyLong_FromLongLong((PY_LONG_LONG) result);
          }

          PyErr_SetArgsError((PyObject *) self, "readLong", arg);
          return NULL;
        }

        static PyObject *t_RandomAccessInput_readShort(t_RandomAccessInput *self, PyObject *arg)
        {
          jlong a0;
          jshort result;

          if (!parseArg(arg, "J", &a0))
          {
            OBJ_CALL(result = self->object.readShort(a0));
            return PyLong_FromLong((long) result);
          }

          PyErr_SetArgsError((PyObject *) self, "readShort", arg);
          return NULL;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/CollectionStatistics.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {

        ::java::lang::Class *CollectionStatistics::class$ = NULL;
        jmethodID *CollectionStatistics::mids$ = NULL;
        bool CollectionStatistics::live$ = false;

        jclass CollectionStatistics::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/search/CollectionStatistics");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_254c9abd606ca482] = env->getMethodID(cls, "<init>", "(Ljava/lang/String;JJJJ)V");
            mids$[mid_docCount_2e5ae9edcb9b072f] = env->getMethodID(cls, "docCount", "()J");
            mids$[mid_field_db9b55ba01e03e4b] = env->getMethodID(cls, "field", "()Ljava/lang/String;");
            mids$[mid_maxDoc_2e5ae9edcb9b072f] = env->getMethodID(cls, "maxDoc", "()J");
            mids$[mid_sumDocFreq_2e5ae9edcb9b072f] = env->getMethodID(cls, "sumDocFreq", "()J");
            mids$[mid_sumTotalTermFreq_2e5ae9edcb9b072f] = env->getMethodID(cls, "sumTotalTermFreq", "()J");
            mids$[mid_toString_db9b55ba01e03e4b] = env->getMethodID(cls, "toString", "()Ljava/lang/String;");

            class$ = new ::java::lang::Class(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        CollectionStatistics::CollectionStatistics(const ::java::lang::String & a0, jlong a1, jlong a2, jlong a3, jlong a4) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_254c9abd606ca482, a0.this$, a1, a2, a3, a4)) {}

        jlong CollectionStatistics::docCount() const
        {
          return env->callLongMethod(this$, mids$[mid_docCount_2e5ae9edcb9b072f]);
        }

        ::java::lang::String CollectionStatistics::field() const
        {
          return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_field_db9b55ba01e03e4b]));
        }

        jlong CollectionStatistics::maxDoc() const
        {
          return env->callLongMethod(this$, mids$[mid_maxDoc_2e5ae9edcb9b072f]);
        }

        jlong CollectionStatistics::sumDocFreq() const
        {
          return env->callLongMethod(this$, mids$[mid_sumDocFreq_2e5ae9edcb9b072f]);
        }

        jlong CollectionStatistics::sumTotalTermFreq() const
        {
          return env->callLongMethod(this$, mids$[mid_sumTotalTermFreq_2e5ae9edcb9b072f]);
        }

        ::java::lang::String CollectionStatistics::toString() const
        {
          return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_db9b55ba01e03e4b]));
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        static PyObject *t_CollectionStatistics_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_CollectionStatistics_instance_(PyTypeObject *type, PyObject *arg);
        static int t_CollectionStatistics_init_(t_CollectionStatistics *self, PyObject *args, PyObject *kwds);
        static PyObject *t_CollectionStatistics_docCount(t_CollectionStatistics *self);
        static PyObject *t_CollectionStatistics_field(t_CollectionStatistics *self);
        static PyObject *t_CollectionStatistics_maxDoc(t_CollectionStatistics *self);
        static PyObject *t_CollectionStatistics_sumDocFreq(t_CollectionStatistics *self);
        static PyObject *t_CollectionStatistics_sumTotalTermFreq(t_CollectionStatistics *self);
        static PyObject *t_CollectionStatistics_toString(t_CollectionStatistics *self, PyObject *args);

        static PyMethodDef t_CollectionStatistics__methods_[] = {
          DECLARE_METHOD(t_CollectionStatistics, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_CollectionStatistics, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_CollectionStatistics, docCount, METH_NOARGS),
          DECLARE_METHOD(t_CollectionStatistics, field, METH_NOARGS),
          DECLARE_METHOD(t_CollectionStatistics, maxDoc, METH_NOARGS),
          DECLARE_METHOD(t_CollectionStatistics, sumDocFreq, METH_NOARGS),
          DECLARE_METHOD(t_CollectionStatistics, sumTotalTermFreq, METH_NOARGS),
          DECLARE_METHOD(t_CollectionStatistics, toString, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        static PyType_Slot PY_TYPE_SLOTS(CollectionStatistics)[] = {
          { Py_tp_methods, t_CollectionStatistics__methods_ },
          { Py_tp_init, (void *) t_CollectionStatistics_init_ },
          { 0, NULL }
        };

        static PyType_Def *PY_TYPE_BASES(CollectionStatistics)[] = {
          &PY_TYPE_DEF(::java::lang::Object),
          NULL
        };

        DEFINE_TYPE(CollectionStatistics, t_CollectionStatistics, CollectionStatistics);

        void t_CollectionStatistics::install(PyObject *module)
        {
          installType(&PY_TYPE(CollectionStatistics), &PY_TYPE_DEF(CollectionStatistics), module, "CollectionStatistics", 0);
        }

        void t_CollectionStatistics::initialize(PyObject *module)
        {
          PyObject_SetAttrString((PyObject *) PY_TYPE(CollectionStatistics), "class_", make_descriptor(CollectionStatistics::initializeClass, 1));
          PyObject_SetAttrString((PyObject *) PY_TYPE(CollectionStatistics), "wrapfn_", make_descriptor(t_CollectionStatistics::wrap_jobject));
          PyObject_SetAttrString((PyObject *) PY_TYPE(CollectionStatistics), "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_CollectionStatistics_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, CollectionStatistics::initializeClass, 1)))
            return NULL;
          return t_CollectionStatistics::wrap_Object(CollectionStatistics(((t_CollectionStatistics *) arg)->object.this$));
        }
        static PyObject *t_CollectionStatistics_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, CollectionStatistics::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_CollectionStatistics_init_(t_CollectionStatistics *self, PyObject *args, PyObject *kwds)
        {
          ::java::lang::String a0((jobject) NULL);
          jlong a1;
          jlong a2;
          jlong a3;
          jlong a4;
          CollectionStatistics object((jobject) NULL);

          if (!parseArgs(args, "sJJJJ", &a0, &a1, &a2, &a3, &a4))
          {
            INT_CALL(object = CollectionStatistics(a0, a1, a2, a3, a4));
            self->object = object;
          }
          else
          {
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }

        static PyObject *t_CollectionStatistics_docCount(t_CollectionStatistics *self)
        {
          jlong result;
          OBJ_CALL(result = self->object.docCount());
          return PyLong_FromLongLong((PY_LONG_LONG) result);
        }

        static PyObject *t_CollectionStatistics_field(t_CollectionStatistics *self)
        {
          ::java::lang::String result((jobject) NULL);
          OBJ_CALL(result = self->object.field());
          return j2p(result);
        }

        static PyObject *t_CollectionStatistics_maxDoc(t_CollectionStatistics *self)
        {
          jlong result;
          OBJ_CALL(result = self->object.maxDoc());
          return PyLong_FromLongLong((PY_LONG_LONG) result);
        }

        static PyObject *t_CollectionStatistics_sumDocFreq(t_CollectionStatistics *self)
        {
          jlong result;
          OBJ_CALL(result = self->object.sumDocFreq());
          return PyLong_FromLongLong((PY_LONG_LONG) result);
        }

        static PyObject *t_CollectionStatistics_sumTotalTermFreq(t_CollectionStatistics *self)
        {
          jlong result;
          OBJ_CALL(result = self->object.sumTotalTermFreq());
          return PyLong_FromLongLong((PY_LONG_LONG) result);
        }

        static PyObject *t_CollectionStatistics_toString(t_CollectionStatistics *self, PyObject *args)
        {
          ::java::lang::String result((jobject) NULL);

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.toString());
            return j2p(result);
          }

          return callSuper(PY_TYPE(CollectionStatistics), (PyObject *) self, "toString", args, 2);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/index/IndexSorter$NumericDocValuesProvider.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/index/NumericDocValues.h"
#include "org/apache/lucene/index/LeafReader.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {

        ::java::lang::Class *IndexSorter$NumericDocValuesProvider::class$ = NULL;
        jmethodID *IndexSorter$NumericDocValuesProvider::mids$ = NULL;
        bool IndexSorter$NumericDocValuesProvider::live$ = false;

        jclass IndexSorter$NumericDocValuesProvider::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/index/IndexSorter$NumericDocValuesProvider");

            mids$ = new jmethodID[max_mid];
            mids$[mid_get_06213089313ba150] = env->getMethodID(cls, "get", "(Lorg/apache/lucene/index/LeafReader;)Lorg/apache/lucene/index/NumericDocValues;");

            class$ = new ::java::lang::Class(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        ::org::apache::lucene::index::NumericDocValues IndexSorter$NumericDocValuesProvider::get(const ::org::apache::lucene::index::LeafReader & a0) const
        {
          return ::org::apache::lucene::index::NumericDocValues(env->callObjectMethod(this$, mids$[mid_get_06213089313ba150], a0.this$));
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {
        static PyObject *t_IndexSorter$NumericDocValuesProvider_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_IndexSorter$NumericDocValuesProvider_instance_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_IndexSorter$NumericDocValuesProvider_get(t_IndexSorter$NumericDocValuesProvider *self, PyObject *arg);

        static PyMethodDef t_IndexSorter$NumericDocValuesProvider__methods_[] = {
          DECLARE_METHOD(t_IndexSorter$NumericDocValuesProvider, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_IndexSorter$NumericDocValuesProvider, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_IndexSorter$NumericDocValuesProvider, get, METH_O),
          { NULL, NULL, 0, NULL }
        };

        static PyType_Slot PY_TYPE_SLOTS(IndexSorter$NumericDocValuesProvider)[] = {
          { Py_tp_methods, t_IndexSorter$NumericDocValuesProvider__methods_ },
          { Py_tp_init, (void *) abstract_init },
          { 0, NULL }
        };

        static PyType_Def *PY_TYPE_BASES(IndexSorter$NumericDocValuesProvider)[] = {
          &PY_TYPE_DEF(::java::lang::Object),
          NULL
        };

        DEFINE_TYPE(IndexSorter$NumericDocValuesProvider, t_IndexSorter$NumericDocValuesProvider, IndexSorter$NumericDocValuesProvider);

        void t_IndexSorter$NumericDocValuesProvider::install(PyObject *module)
        {
          installType(&PY_TYPE(IndexSorter$NumericDocValuesProvider), &PY_TYPE_DEF(IndexSorter$NumericDocValuesProvider), module, "IndexSorter$NumericDocValuesProvider", 0);
        }

        void t_IndexSorter$NumericDocValuesProvider::initialize(PyObject *module)
        {
          PyObject_SetAttrString((PyObject *) PY_TYPE(IndexSorter$NumericDocValuesProvider), "class_", make_descriptor(IndexSorter$NumericDocValuesProvider::initializeClass, 1));
          PyObject_SetAttrString((PyObject *) PY_TYPE(IndexSorter$NumericDocValuesProvider), "wrapfn_", make_descriptor(t_IndexSorter$NumericDocValuesProvider::wrap_jobject));
          PyObject_SetAttrString((PyObject *) PY_TYPE(IndexSorter$NumericDocValuesProvider), "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_IndexSorter$NumericDocValuesProvider_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, IndexSorter$NumericDocValuesProvider::initializeClass, 1)))
            return NULL;
          return t_IndexSorter$NumericDocValuesProvider::wrap_Object(IndexSorter$NumericDocValuesProvider(((t_IndexSorter$NumericDocValuesProvider *) arg)->object.this$));
        }
        static PyObject *t_IndexSorter$NumericDocValuesProvider_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, IndexSorter$NumericDocValuesProvider::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static PyObject *t_IndexSorter$NumericDocValuesProvider_get(t_IndexSorter$NumericDocValuesProvider *self, PyObject *arg)
        {
          ::org::apache::lucene::index::LeafReader a0((jobject) NULL);
          ::org::apache::lucene::index::NumericDocValues result((jobject) NULL);

          if (!parseArg(arg, "k", ::org::apache::lucene::index::LeafReader::initializeClass, &a0))
          {
            OBJ_CALL(result = self->object.get(a0));
            return ::org::apache::lucene::index::t_NumericDocValues::wrap_Object(result);
          }

          PyErr_SetArgsError((PyObject *) self, "get", arg);
          return NULL;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queryparser/flexible/standard/parser/CharStream.h"
#include "java/lang/String.h"
#include "java/io/IOException.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace standard {
            namespace parser {

              ::java::lang::Class *CharStream::class$ = NULL;
              jmethodID *CharStream::mids$ = NULL;
              bool CharStream::live$ = false;

              jclass CharStream::initializeClass(bool getOnly)
              {
                if (getOnly)
                  return (jclass) (live$ ? class$->this$ : NULL);
                if (class$ == NULL)
                {
                  jclass cls = (jclass) env->findClass("org/apache/lucene/queryparser/flexible/standard/parser/CharStream");

                  mids$ = new jmethodID[max_mid];
                  mids$[mid_BeginToken_8eea1dd85c3239c3] = env->getMethodID(cls, "BeginToken", "()C");
                  mids$[mid_Done_f2cc1bce94666404] = env->getMethodID(cls, "Done", "()V");
                  mids$[mid_GetImage_db9b55ba01e03e4b] = env->getMethodID(cls, "GetImage", "()Ljava/lang/String;");
                  mids$[mid_GetSuffix_4a35a620830b94db] = env->getMethodID(cls, "GetSuffix", "(I)[C");
                  mids$[mid_backup_040c4cd0390c5aff] = env->getMethodID(cls, "backup", "(I)V");
                  mids$[mid_getBeginColumn_9972fcc56b44e79d] = env->getMethodID(cls, "getBeginColumn", "()I");
                  mids$[mid_getBeginLine_9972fcc56b44e79d] = env->getMethodID(cls, "getBeginLine", "()I");
                  mids$[mid_getColumn_9972fcc56b44e79d] = env->getMethodID(cls, "getColumn", "()I");
                  mids$[mid_getEndColumn_9972fcc56b44e79d] = env->getMethodID(cls, "getEndColumn", "()I");
                  mids$[mid_getEndLine_9972fcc56b44e79d] = env->getMethodID(cls, "getEndLine", "()I");
                  mids$[mid_getLine_9972fcc56b44e79d] = env->getMethodID(cls, "getLine", "()I");
                  mids$[mid_readChar_8eea1dd85c3239c3] = env->getMethodID(cls, "readChar", "()C");

                  class$ = new ::java::lang::Class(cls);
                  live$ = true;
                }
                return (jclass) class$->this$;
              }

              jchar CharStream::BeginToken() const
              {
                return env->callCharMethod(this$, mids$[mid_BeginToken_8eea1dd85c3239c3]);
              }

              void CharStream::Done() const
              {
                env->callVoidMethod(this$, mids$[mid_Done_f2cc1bce94666404]);
              }

              ::java::lang::String CharStream::GetImage() const
              {
                return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_GetImage_db9b55ba01e03e4b]));
              }

              JArray< jchar > CharStream::GetSuffix(jint a0) const
              {
                return JArray< jchar >(env->callObjectMethod(this$, mids$[mid_GetSuffix_4a35a620830b94db], a0));
              }

              void CharStream::backup(jint a0) const
              {
                env->callVoidMethod(this$, mids$[mid_backup_040c4cd0390c5aff], a0);
              }

              jint CharStream::getBeginColumn() const
              {
                return env->callIntMethod(this$, mids$[mid_getBeginColumn_9972fcc56b44e79d]);
              }

              jint CharStream::getBeginLine() const
              {
                return env->callIntMethod(this$, mids$[mid_getBeginLine_9972fcc56b44e79d]);
              }

              jint CharStream::getColumn() const
              {
                return env->callIntMethod(this$, mids$[mid_getColumn_9972fcc56b44e79d]);
              }

              jint CharStream::getEndColumn() const
              {
                return env->callIntMethod(this$, mids$[mid_getEndColumn_9972fcc56b44e79d]);
              }

              jint CharStream::getEndLine() const
              {
                return env->callIntMethod(this$, mids$[mid_getEndLine_9972fcc56b44e79d]);
              }

              jint CharStream::getLine() const
              {
                return env->callIntMethod(this$, mids$[mid_getLine_9972fcc56b44e79d]);
              }

              jchar CharStream::readChar() const
              {
                return env->callCharMethod(this$, mids$[mid_readChar_8eea1dd85c3239c3]);
              }
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace standard {
            namespace parser {
              static PyObject *t_CharStream_cast_(PyTypeObject *type, PyObject *arg);
              static PyObject *t_CharStream_instance_(PyTypeObject *type, PyObject *arg);
              static PyObject *t_CharStream_BeginToken(t_CharStream *self);
              static PyObject *t_CharStream_Done(t_CharStream *self);
              static PyObject *t_CharStream_GetImage(t_CharStream *self);
              static PyObject *t_CharStream_GetSuffix(t_CharStream *self, PyObject *arg);
              static PyObject *t_CharStream_backup(t_CharStream *self, PyObject *arg);
              static PyObject *t_CharStream_getBeginColumn(t_CharStream *self);
              static PyObject *t_CharStream_getBeginLine(t_CharStream *self);
              static PyObject *t_CharStream_getColumn(t_CharStream *self);
              static PyObject *t_CharStream_getEndColumn(t_CharStream *self);
              static PyObject *t_CharStream_getEndLine(t_CharStream *self);
              static PyObject *t_CharStream_getLine(t_CharStream *self);
              static PyObject *t_CharStream_readChar(t_CharStream *self);
              static PyObject *t_CharStream_get__beginColumn(t_CharStream *self, void *data);
              static PyObject *t_CharStream_get__beginLine(t_CharStream *self, void *data);
              static PyObject *t_CharStream_get__column(t_CharStream *self, void *data);
              static PyObject *t_CharStream_get__endColumn(t_CharStream *self, void *data);
              static PyObject *t_CharStream_get__endLine(t_CharStream *self, void *data);
              static PyObject *t_CharStream_get__line(t_CharStream *self, void *data);
              static PyGetSetDef t_CharStream__fields_[] = {
                DECLARE_GET_FIELD(t_CharStream, beginColumn),
                DECLARE_GET_FIELD(t_CharStream, beginLine),
                DECLARE_GET_FIELD(t_CharStream, column),
                DECLARE_GET_FIELD(t_CharStream, endColumn),
                DECLARE_GET_FIELD(t_CharStream, endLine),
                DECLARE_GET_FIELD(t_CharStream, line),
                { NULL, NULL, NULL, NULL, NULL }
              };

              static PyMethodDef t_CharStream__methods_[] = {
                DECLARE_METHOD(t_CharStream, cast_, METH_O | METH_CLASS),
                DECLARE_METHOD(t_CharStream, instance_, METH_O | METH_CLASS),
                DECLARE_METHOD(t_CharStream, BeginToken, METH_NOARGS),
                DECLARE_METHOD(t_CharStream, Done, METH_NOARGS),
                DECLARE_METHOD(t_CharStream, GetImage, METH_NOARGS),
                DECLARE_METHOD(t_CharStream, GetSuffix, METH_O),
                DECLARE_METHOD(t_CharStream, backup, METH_O),
                DECLARE_METHOD(t_CharStream, getBeginColumn, METH_NOARGS),
                DECLARE_METHOD(t_CharStream, getBeginLine, METH_NOARGS),
                DECLARE_METHOD(t_CharStream, getColumn, METH_NOARGS),
                DECLARE_METHOD(t_CharStream, getEndColumn, METH_NOARGS),
                DECLARE_METHOD(t_CharStream, getEndLine, METH_NOARGS),
                DECLARE_METHOD(t_CharStream, getLine, METH_NOARGS),
                DECLARE_METHOD(t_CharStream, readChar, METH_NOARGS),
                { NULL, NULL, 0, NULL }
              };

              static PyType_Slot PY_TYPE_SLOTS(CharStream)[] = {
                { Py_tp_methods, t_CharStream__methods_ },
                { Py_tp_init, (void *) abstract_init },
                { Py_tp_getset, t_CharStream__fields_ },
                { 0, NULL }
              };

              static PyType_Def *PY_TYPE_BASES(CharStream)[] = {
                &PY_TYPE_DEF(::java::lang::Object),
                NULL
              };

              DEFINE_TYPE(CharStream, t_CharStream, CharStream);

              void t_CharStream::install(PyObject *module)
              {
                installType(&PY_TYPE(CharStream), &PY_TYPE_DEF(CharStream), module, "CharStream", 0);
              }

              void t_CharStream::initialize(PyObject *module)
              {
                PyObject_SetAttrString((PyObject *) PY_TYPE(CharStream), "class_", make_descriptor(CharStream::initializeClass, 1));
                PyObject_SetAttrString((PyObject *) PY_TYPE(CharStream), "wrapfn_", make_descriptor(t_CharStream::wrap_jobject));
                PyObject_SetAttrString((PyObject *) PY_TYPE(CharStream), "boxfn_", make_descriptor(boxObject));
              }

              static PyObject *t_CharStream_cast_(PyTypeObject *type, PyObject *arg)
              {
                if (!(arg = castCheck(arg, CharStream::initializeClass, 1)))
                  return NULL;
                return t_CharStream::wrap_Object(CharStream(((t_CharStream *) arg)->object.this$));
              }
              static PyObject *t_CharStream_instance_(PyTypeObject *type, PyObject *arg)
              {
                if (!castCheck(arg, CharStream::initializeClass, 0))
                  Py_RETURN_FALSE;
                Py_RETURN_TRUE;
              }

              static PyObject *t_CharStream_BeginToken(t_CharStream *self)
              {
                jchar result;
                OBJ_CALL(result = self->object.BeginToken());
                return c2p(result);
              }

              static PyObject *t_CharStream_Done(t_CharStream *self)
              {
                OBJ_CALL(self->object.Done());
                Py_RETURN_NONE;
              }

              static PyObject *t_CharStream_GetImage(t_CharStream *self)
              {
                ::java::lang::String result((jobject) NULL);
                OBJ_CALL(result = self->object.GetImage());
                return j2p(result);
              }

              static PyObject *t_CharStream_GetSuffix(t_CharStream *self, PyObject *arg)
              {
                jint a0;
                JArray< jchar > result((jobject) NULL);

                if (!parseArg(arg, "I", &a0))
                {
                  OBJ_CALL(result = self->object.GetSuffix(a0));
                  return result.wrap();
                }

                PyErr_SetArgsError((PyObject *) self, "GetSuffix", arg);
                return NULL;
              }

              static PyObject *t_CharStream_backup(t_CharStream *self, PyObject *arg)
              {
                jint a0;

                if (!parseArg(arg, "I", &a0))
                {
                  OBJ_CALL(self->object.backup(a0));
                  Py_RETURN_NONE;
                }

                PyErr_SetArgsError((PyObject *) self, "backup", arg);
                return NULL;
              }

              static PyObject *t_CharStream_getBeginColumn(t_CharStream *self)
              {
                jint result;
                OBJ_CALL(result = self->object.getBeginColumn());
                return PyLong_FromLong((long) result);
              }

              static PyObject *t_CharStream_getBeginLine(t_CharStream *self)
              {
                jint result;
                OBJ_CALL(result = self->object.getBeginLine());
                return PyLong_FromLong((long) result);
              }

              static PyObject *t_CharStream_getColumn(t_CharStream *self)
              {
                jint result;
                OBJ_CALL(result = self->object.getColumn());
                return PyLong_FromLong((long) result);
              }

              static PyObject *t_CharStream_getEndColumn(t_CharStream *self)
              {
                jint result;
                OBJ_CALL(result = self->object.getEndColumn());
                return PyLong_FromLong((long) result);
              }

              static PyObject *t_CharStream_getEndLine(t_CharStream *self)
              {
                jint result;
                OBJ_CALL(result = self->object.getEndLine());
                return PyLong_FromLong((long) result);
              }

              static PyObject *t_CharStream_getLine(t_CharStream *self)
              {
                jint result;
                OBJ_CALL(result = self->object.getLine());
                return PyLong_FromLong((long) result);
              }

              static PyObject *t_CharStream_readChar(t_CharStream *self)
              {
                jchar result;
                OBJ_CALL(result = self->object.readChar());
                return c2p(result);
              }

              static PyObject *t_CharStream_get__beginColumn(t_CharStream *self, void *data)
              {
                jint value;
                OBJ_CALL(value = self->object.getBeginColumn());
                return PyLong_FromLong((long) value);
              }

              static PyObject *t_CharStream_get__beginLine(t_CharStream *self, void *data)
              {
                jint value;
                OBJ_CALL(value = self->object.getBeginLine());
                return PyLong_FromLong((long) value);
              }

              static PyObject *t_CharStream_get__column(t_CharStream *self, void *data)
              {
                jint value;
                OBJ_CALL(value = self->object.getColumn());
                return PyLong_FromLong((long) value);
              }

              static PyObject *t_CharStream_get__endColumn(t_CharStream *self, void *data)
              {
                jint value;
                OBJ_CALL(value = self->object.getEndColumn());
                return PyLong_FromLong((long) value);
              }

              static PyObject *t_CharStream_get__endLine(t_CharStream *self, void *data)
              {
                jint value;
                OBJ_CALL(value = self->object.getEndLine());
                return PyLong_FromLong((long) value);
              }

              static PyObject *t_CharStream_get__line(t_CharStream *self, void *data)
              {
                jint value;
                OBJ_CALL(value = self->object.getLine());
                return PyLong_FromLong((long) value);
              }
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/similarities/Lambda.h"
#include "org/apache/lucene/search/Explanation.h"
#include "org/apache/lucene/search/similarities/BasicStats.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace similarities {

          ::java::lang::Class *Lambda::class$ = NULL;
          jmethodID *Lambda::mids$ = NULL;
          bool Lambda::live$ = false;

          jclass Lambda::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/search/similarities/Lambda");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_f2cc1bce94666404] = env->getMethodID(cls, "<init>", "()V");
              mids$[mid_explain_09b827167a29e9eb] = env->getMethodID(cls, "explain", "(Lorg/apache/lucene/search/similarities/BasicStats;)Lorg/apache/lucene/search/Explanation;");
              mids$[mid_lambda_773a7ae7d4cf3ed2] = env->getMethodID(cls, "lambda", "(Lorg/apache/lucene/search/similarities/BasicStats;)F");
              mids$[mid_toString_db9b55ba01e03e4b] = env->getMethodID(cls, "toString", "()Ljava/lang/String;");

              class$ = new ::java::lang::Class(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          Lambda::Lambda() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_f2cc1bce94666404)) {}

          ::org::apache::lucene::search::Explanation Lambda::explain(const ::org::apache::lucene::search::similarities::BasicStats & a0) const
          {
            return ::org::apache::lucene::search::Explanation(env->callObjectMethod(this$, mids$[mid_explain_09b827167a29e9eb], a0.this$));
          }

          jfloat Lambda::lambda(const ::org::apache::lucene::search::similarities::BasicStats & a0) const
          {
            return env->callFloatMethod(this$, mids$[mid_lambda_773a7ae7d4cf3ed2], a0.this$);
          }

          ::java::lang::String Lambda::toString() const
          {
            return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_db9b55ba01e03e4b]));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace similarities {
          static PyObject *t_Lambda_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_Lambda_instance_(PyTypeObject *type, PyObject *arg);
          static int t_Lambda_init_(t_Lambda *self, PyObject *args, PyObject *kwds);
          static PyObject *t_Lambda_explain(t_Lambda *self, PyObject *arg);
          static PyObject *t_Lambda_lambda(t_Lambda *self, PyObject *arg);
          static PyObject *t_Lambda_toString(t_Lambda *self, PyObject *args);

          static PyMethodDef t_Lambda__methods_[] = {
            DECLARE_METHOD(t_Lambda, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_Lambda, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_Lambda, explain, METH_O),
            DECLARE_METHOD(t_Lambda, lambda, METH_O),
            DECLARE_METHOD(t_Lambda, toString, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          static PyType_Slot PY_TYPE_SLOTS(Lambda)[] = {
            { Py_tp_methods, t_Lambda__methods_ },
            { Py_tp_init, (void *) t_Lambda_init_ },
            { 0, NULL }
          };

          static PyType_Def *PY_TYPE_BASES(Lambda)[] = {
            &PY_TYPE_DEF(::java::lang::Object),
            NULL
          };

          DEFINE_TYPE(Lambda, t_Lambda, Lambda);

          void t_Lambda::install(PyObject *module)
          {
            installType(&PY_TYPE(Lambda), &PY_TYPE_DEF(Lambda), module, "Lambda", 0);
          }

          void t_Lambda::initialize(PyObject *module)
          {
            PyObject_SetAttrString((PyObject *) PY_TYPE(Lambda), "class_", make_descriptor(Lambda::initializeClass, 1));
            PyObject_SetAttrString((PyObject *) PY_TYPE(Lambda), "wrapfn_", make_descriptor(t_Lambda::wrap_jobject));
            PyObject_SetAttrString((PyObject *) PY_TYPE(Lambda), "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_Lambda_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, Lambda::initializeClass, 1)))
              return NULL;
            return t_Lambda::wrap_Object(Lambda(((t_Lambda *) arg)->object.this$));
          }
          static PyObject *t_Lambda_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, Lambda::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_Lambda_init_(t_Lambda *self, PyObject *args, PyObject *kwds)
          {
            Lambda object((jobject) NULL);

            INT_CALL(object = Lambda());
            self->object = object;

            return 0;
          }

          static PyObject *t_Lambda_explain(t_Lambda *self, PyObject *arg)
          {
            ::org::apache::lucene::search::similarities::BasicStats a0((jobject) NULL);
            ::org::apache::lucene::search::Explanation result((jobject) NULL);

            if (!parseArg(arg, "k", ::org::apache::lucene::search::similarities::BasicStats::initializeClass, &a0))
            {
              OBJ_CALL(result = self->object.explain(a0));
              return ::org::apache::lucene::search::t_Explanation::wrap_Object(result);
            }

            PyErr_SetArgsError((PyObject *) self, "explain", arg);
            return NULL;
          }

          static PyObject *t_Lambda_lambda(t_Lambda *self, PyObject *arg)
          {
            ::org::apache::lucene::search::similarities::BasicStats a0((jobject) NULL);
            jfloat result;

            if (!parseArg(arg, "k", ::org::apache::lucene::search::similarities::BasicStats::initializeClass, &a0))
            {
              OBJ_CALL(result = self->object.lambda(a0));
              return PyFloat_FromDouble((double) result);
            }

            PyErr_SetArgsError((PyObject *) self, "lambda", arg);
            return NULL;
          }

          static PyObject *t_Lambda_toString(t_Lambda *self, PyObject *args)
          {
            ::java::lang::String result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.toString());
              return j2p(result);
            }

            return callSuper(PY_TYPE(Lambda), (PyObject *) self, "toString", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/suggest/document/SuggestField.h"
#include "org/apache/lucene/document/FieldType.h"
#include "org/apache/lucene/analysis/Analyzer.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/analysis/TokenStream.h"
#include "java/lang/String.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace suggest {
          namespace document {

            ::java::lang::Class *SuggestField::class$ = NULL;
            jmethodID *SuggestField::mids$ = NULL;
            bool SuggestField::live$ = false;
            ::org::apache::lucene::document::FieldType *SuggestField::FIELD_TYPE = NULL;

            jclass SuggestField::initializeClass(bool getOnly)
            {
              if (getOnly)
                return (jclass) (live$ ? class$->this$ : NULL);
              if (class$ == NULL)
              {
                jclass cls = (jclass) env->findClass("org/apache/lucene/search/suggest/document/SuggestField");

                mids$ = new jmethodID[max_mid];
                mids$[mid_init$_3e72ae33575f66c6] = env->getMethodID(cls, "<init>", "(Ljava/lang/String;Ljava/lang/String;I)V");
                mids$[mid_tokenStream_c1cd9ee6ce43641f] = env->getMethodID(cls, "tokenStream", "(Lorg/apache/lucene/analysis/Analyzer;Lorg/apache/lucene/analysis/TokenStream;)Lorg/apache/lucene/analysis/TokenStream;");
                mids$[mid_wrapTokenStream_6c4ec0190b15759d] = env->getMethodID(cls, "wrapTokenStream", "(Lorg/apache/lucene/analysis/TokenStream;)Lorg/apache/lucene/search/suggest/document/CompletionTokenStream;");
                mids$[mid_type_871cd52a74f26213] = env->getMethodID(cls, "type", "()B");

                class$ = new ::java::lang::Class(cls);
                cls = (jclass) class$->this$;

                FIELD_TYPE = new ::org::apache::lucene::document::FieldType(env->getStaticObjectField(cls, "FIELD_TYPE", "Lorg/apache/lucene/document/FieldType;"));
                live$ = true;
              }
              return (jclass) class$->this$;
            }

            SuggestField::SuggestField(const ::java::lang::String & a0, const ::java::lang::String & a1, jint a2) : ::org::apache::lucene::document::Field(env->newObject(initializeClass, &mids$, mid_init$_3e72ae33575f66c6, a0.this$, a1.this$, a2)) {}

            ::org::apache::lucene::analysis::TokenStream SuggestField::tokenStream(const ::org::apache::lucene::analysis::Analyzer & a0, const ::org::apache::lucene::analysis::TokenStream & a1) const
            {
              return ::org::apache::lucene::analysis::TokenStream(env->callObjectMethod(this$, mids$[mid_tokenStream_c1cd9ee6ce43641f], a0.this$, a1.this$));
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace suggest {
          namespace document {
            static PyObject *t_SuggestField_cast_(PyTypeObject *type, PyObject *arg);
            static PyObject *t_SuggestField_instance_(PyTypeObject *type, PyObject *arg);
            static int t_SuggestField_init_(t_SuggestField *self, PyObject *args, PyObject *kwds);
            static PyObject *t_SuggestField_tokenStream(t_SuggestField *self, PyObject *args);

            static PyMethodDef t_SuggestField__methods_[] = {
              DECLARE_METHOD(t_SuggestField, cast_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_SuggestField, instance_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_SuggestField, tokenStream, METH_VARARGS),
              { NULL, NULL, 0, NULL }
            };

            static PyType_Slot PY_TYPE_SLOTS(SuggestField)[] = {
              { Py_tp_methods, t_SuggestField__methods_ },
              { Py_tp_init, (void *) t_SuggestField_init_ },
              { 0, NULL }
            };

            static PyType_Def *PY_TYPE_BASES(SuggestField)[] = {
              &PY_TYPE_DEF(::org::apache::lucene::document::Field),
              NULL
            };

            DEFINE_TYPE(SuggestField, t_SuggestField, SuggestField);

            void t_SuggestField::install(PyObject *module)
            {
              installType(&PY_TYPE(SuggestField), &PY_TYPE_DEF(SuggestField), module, "SuggestField", 0);
            }

            void t_SuggestField::initialize(PyObject *module)
            {
              PyObject_SetAttrString((PyObject *) PY_TYPE(SuggestField), "class_", make_descriptor(SuggestField::initializeClass, 1));
              PyObject_SetAttrString((PyObject *) PY_TYPE(SuggestField), "wrapfn_", make_descriptor(t_SuggestField::wrap_jobject));
              PyObject_SetAttrString((PyObject *) PY_TYPE(SuggestField), "boxfn_", make_descriptor(boxObject));
              env->getClass(SuggestField::initializeClass);
              PyObject_SetAttrString((PyObject *) PY_TYPE(SuggestField), "FIELD_TYPE", make_descriptor(::org::apache::lucene::document::t_FieldType::wrap_Object(*SuggestField::FIELD_TYPE)));
            }

            static PyObject *t_SuggestField_cast_(PyTypeObject *type, PyObject *arg)
            {
              if (!(arg = castCheck(arg, SuggestField::initializeClass, 1)))
                return NULL;
              return t_SuggestField::wrap_Object(SuggestField(((t_SuggestField *) arg)->object.this$));
            }
            static PyObject *t_SuggestField_instance_(PyTypeObject *type, PyObject *arg)
            {
              if (!castCheck(arg, SuggestField::initializeClass, 0))
                Py_RETURN_FALSE;
              Py_RETURN_TRUE;
            }

            static int t_SuggestField_init_(t_SuggestField *self, PyObject *args, PyObject *kwds)
            {
              ::java::lang::String a0((jobject) NULL);
              ::java::lang::String a1((jobject) NULL);
              jint a2;
              SuggestField object((jobject) NULL);

              if (!parseArgs(args, "ssI", &a0, &a1, &a2))
              {
                INT_CALL(object = SuggestField(a0, a1, a2));
                self->object = object;
              }
              else
              {
                PyErr_SetArgsError((PyObject *) self, "__init__", args);
                return -1;
              }

              return 0;
            }

            static PyObject *t_SuggestField_tokenStream(t_SuggestField *self, PyObject *args)
            {
              ::org::apache::lucene::analysis::Analyzer a0((jobject) NULL);
              ::org::apache::lucene::analysis::TokenStream a1((jobject) NULL);
              ::org::apache::lucene::analysis::TokenStream result((jobject) NULL);

              if (!parseArgs(args, "kk", ::org::apache::lucene::analysis::Analyzer::initializeClass, ::org::apache::lucene::analysis::TokenStream::initializeClass, &a0, &a1))
              {
                OBJ_CALL(result = self->object.tokenStream(a0, a1));
                return ::org::apache::lucene::analysis::t_TokenStream::wrap_Object(result);
              }

              return callSuper(PY_TYPE(SuggestField), (PyObject *) self, "tokenStream", args, 2);
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/spans/FilterSpans.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/search/TwoPhaseIterator.h"
#include "java/lang/String.h"
#include "org/apache/lucene/search/spans/SpanCollector.h"
#include "java/io/IOException.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace spans {

          ::java::lang::Class *FilterSpans::class$ = NULL;
          jmethodID *FilterSpans::mids$ = NULL;
          bool FilterSpans::live$ = false;

          jclass FilterSpans::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/search/spans/FilterSpans");

              mids$ = new jmethodID[max_mid];
              mids$[mid_advance_1e143afe1894d213] = env->getMethodID(cls, "advance", "(I)I");
              mids$[mid_asTwoPhaseIterator_6458a12a224a1c8a] = env->getMethodID(cls, "asTwoPhaseIterator", "()Lorg/apache/lucene/search/TwoPhaseIterator;");
              mids$[mid_collect_810c6539c62abcf6] = env->getMethodID(cls, "collect", "(Lorg/apache/lucene/search/spans/SpanCollector;)V");
              mids$[mid_cost_2e5ae9edcb9b072f] = env->getMethodID(cls, "cost", "()J");
              mids$[mid_docID_9972fcc56b44e79d] = env->getMethodID(cls, "docID", "()I");
              mids$[mid_endPosition_9972fcc56b44e79d] = env->getMethodID(cls, "endPosition", "()I");
              mids$[mid_nextDoc_9972fcc56b44e79d] = env->getMethodID(cls, "nextDoc", "()I");
              mids$[mid_nextStartPosition_9972fcc56b44e79d] = env->getMethodID(cls, "nextStartPosition", "()I");
              mids$[mid_positionsCost_58aec2b64dff50c8] = env->getMethodID(cls, "positionsCost", "()F");
              mids$[mid_startPosition_9972fcc56b44e79d] = env->getMethodID(cls, "startPosition", "()I");
              mids$[mid_toString_db9b55ba01e03e4b] = env->getMethodID(cls, "toString", "()Ljava/lang/String;");
              mids$[mid_width_9972fcc56b44e79d] = env->getMethodID(cls, "width", "()I");
              mids$[mid_accept_ab707424c19ac906] = env->getMethodID(cls, "accept", "(Lorg/apache/lucene/search/spans/Spans;)Lorg/apache/lucene/search/spans/FilterSpans$AcceptStatus;");

              class$ = new ::java::lang::Class(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          jint FilterSpans::advance(jint a0) const
          {
            return env->callIntMethod(this$, mids$[mid_advance_1e143afe1894d213], a0);
          }

          ::org::apache::lucene::search::TwoPhaseIterator FilterSpans::asTwoPhaseIterator() const
          {
            return ::org::apache::lucene::search::TwoPhaseIterator(env->callObjectMethod(this$, mids$[mid_asTwoPhaseIterator_6458a12a224a1c8a]));
          }

          void FilterSpans::collect(const ::org::apache::lucene::search::spans::SpanCollector & a0) const
          {
            env->callVoidMethod(this$, mids$[mid_collect_810c6539c62abcf6], a0.this$);
          }

          jlong FilterSpans::cost() const
          {
            return env->callLongMethod(this$, mids$[mid_cost_2e5ae9edcb9b072f]);
          }

          jint FilterSpans::docID() const
          {
            return env->callIntMethod(this$, mids$[mid_docID_9972fcc56b44e79d]);
          }

          jint FilterSpans::endPosition() const
          {
            return env->callIntMethod(this$, mids$[mid_endPosition_9972fcc56b44e79d]);
          }

          jint FilterSpans::nextDoc() const
          {
            return env->callIntMethod(this$, mids$[mid_nextDoc_9972fcc56b44e79d]);
          }

          jint FilterSpans::nextStartPosition() const
          {
            return env->callIntMethod(this$, mids$[mid_nextStartPosition_9972fcc56b44e79d]);
          }

          jfloat FilterSpans::positionsCost() const
          {
            return env->callFloatMethod(this$, mids$[mid_positionsCost_58aec2b64dff50c8]);
          }

          jint FilterSpans::startPosition() const
          {
            return env->callIntMethod(this$, mids$[mid_startPosition_9972fcc56b44e79d]);
          }

          ::java::lang::String FilterSpans::toString() const
          {
            return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_db9b55ba01e03e4b]));
          }

          jint FilterSpans::width() const
          {
            return env->callIntMethod(this$, mids$[mid_width_9972fcc56b44e79d]);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"
#include "org/apache/lucene/search/spans/FilterSpans$AcceptStatus.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace spans {
          static PyObject *t_FilterSpans_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_FilterSpans_instance_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_FilterSpans_advance(t_FilterSpans *self, PyObject *args);
          static PyObject *t_FilterSpans_asTwoPhaseIterator(t_FilterSpans *self, PyObject *args);
          static PyObject *t_FilterSpans_collect(t_FilterSpans *self, PyObject *args);
          static PyObject *t_FilterSpans_cost(t_FilterSpans *self, PyObject *args);
          static PyObject *t_FilterSpans_docID(t_FilterSpans *self, PyObject *args);
          static PyObject *t_FilterSpans_endPosition(t_FilterSpans *self, PyObject *args);
          static PyObject *t_FilterSpans_nextDoc(t_FilterSpans *self, PyObject *args);
          static PyObject *t_FilterSpans_nextStartPosition(t_FilterSpans *self, PyObject *args);
          static PyObject *t_FilterSpans_positionsCost(t_FilterSpans *self, PyObject *args);
          static PyObject *t_FilterSpans_startPosition(t_FilterSpans *self, PyObject *args);
          static PyObject *t_FilterSpans_toString(t_FilterSpans *self, PyObject *args);
          static PyObject *t_FilterSpans_width(t_FilterSpans *self, PyObject *args);

          static PyMethodDef t_FilterSpans__methods_[] = {
            DECLARE_METHOD(t_FilterSpans, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_FilterSpans, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_FilterSpans, advance, METH_VARARGS),
            DECLARE_METHOD(t_FilterSpans, asTwoPhaseIterator, METH_VARARGS),
            DECLARE_METHOD(t_FilterSpans, collect, METH_VARARGS),
            DECLARE_METHOD(t_FilterSpans, cost, METH_VARARGS),
            DECLARE_METHOD(t_FilterSpans, docID, METH_VARARGS),
            DECLARE_METHOD(t_FilterSpans, endPosition, METH_VARARGS),
            DECLARE_METHOD(t_FilterSpans, nextDoc, METH_VARARGS),
            DECLARE_METHOD(t_FilterSpans, nextStartPosition, METH_VARARGS),
            DECLARE_METHOD(t_FilterSpans, positionsCost, METH_VARARGS),
            DECLARE_METHOD(t_FilterSpans, startPosition, METH_VARARGS),
            DECLARE_METHOD(t_FilterSpans, toString, METH_VARARGS),
            DECLARE_METHOD(t_FilterSpans, width, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          static PyType_Slot PY_TYPE_SLOTS(FilterSpans)[] = {
            { Py_tp_methods, t_FilterSpans__methods_ },
            { Py_tp_init, (void *) abstract_init },
            { 0, NULL }
          };

          static PyType_Def *PY_TYPE_BASES(FilterSpans)[] = {
            &PY_TYPE_DEF(::org::apache::lucene::search::spans::Spans),
            NULL
          };

          DEFINE_TYPE(FilterSpans, t_FilterSpans, FilterSpans);

          void t_FilterSpans::install(PyObject *module)
          {
            installType(&PY_TYPE(FilterSpans), &PY_TYPE_DEF(FilterSpans), module, "FilterSpans", 0);
            PyObject_SetAttrString((PyObject *) PY_TYPE(FilterSpans), "AcceptStatus", make_descriptor(&PY_TYPE_DEF(FilterSpans$AcceptStatus)));
          }

          void t_FilterSpans::initialize(PyObject *module)
          {
            PyObject_SetAttrString((PyObject *) PY_TYPE(FilterSpans), "class_", make_descriptor(FilterSpans::initializeClass, 1));
            PyObject_SetAttrString((PyObject *) PY_TYPE(FilterSpans), "wrapfn_", make_descriptor(t_FilterSpans::wrap_jobject));
            PyObject_SetAttrString((PyObject *) PY_TYPE(FilterSpans), "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_FilterSpans_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, FilterSpans::initializeClass, 1)))
              return NULL;
            return t_FilterSpans::wrap_Object(FilterSpans(((t_FilterSpans *) arg)->object.this$));
          }
          static PyObject *t_FilterSpans_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, FilterSpans::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static PyObject *t_FilterSpans_advance(t_FilterSpans *self, PyObject *args)
          {
            jint a0;
            jint result;

            if (!parseArgs(args, "I", &a0))
            {
              OBJ_CALL(result = self->object.advance(a0));
              return PyLong_FromLong((long) result);
            }

            return callSuper(PY_TYPE(FilterSpans), (PyObject *) self, "advance", args, 2);
          }

          static PyObject *t_FilterSpans_asTwoPhaseIterator(t_FilterSpans *self, PyObject *args)
          {
            ::org::apache::lucene::search::TwoPhaseIterator result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.asTwoPhaseIterator());
              return ::org::apache::lucene::search::t_TwoPhaseIterator::wrap_Object(result);
            }

            return callSuper(PY_TYPE(FilterSpans), (PyObject *) self, "asTwoPhaseIterator", args, 2);
          }

          static PyObject *t_FilterSpans_collect(t_FilterSpans *self, PyObject *args)
          {
            ::org::apache::lucene::search::spans::SpanCollector a0((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::search::spans::SpanCollector::initializeClass, &a0))
            {
              OBJ_CALL(self->object.collect(a0));
              Py_RETURN_NONE;
            }

            return callSuper(PY_TYPE(FilterSpans), (PyObject *) self, "collect", args, 2);
          }

          static PyObject *t_FilterSpans_cost(t_FilterSpans *self, PyObject *args)
          {
            jlong result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.cost());
              return PyLong_FromLongLong((PY_LONG_LONG) result);
            }

            return callSuper(PY_TYPE(FilterSpans), (PyObject *) self, "cost", args, 2);
          }

          static PyObject *t_FilterSpans_docID(t_FilterSpans *self, PyObject *args)
          {
            jint result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.docID());
              return PyLong_FromLong((long) result);
            }

            return callSuper(PY_TYPE(FilterSpans), (PyObject *) self, "docID", args, 2);
          }

          static PyObject *t_FilterSpans_endPosition(t_FilterSpans *self, PyObject *args)
          {
            jint result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.endPosition());
              return PyLong_FromLong((long) result);
            }

            return callSuper(PY_TYPE(FilterSpans), (PyObject *) self, "endPosition", args, 2);
          }

          static PyObject *t_FilterSpans_nextDoc(t_FilterSpans *self, PyObject *args)
          {
            jint result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.nextDoc());
              return PyLong_FromLong((long) result);
            }

            return callSuper(PY_TYPE(FilterSpans), (PyObject *) self, "nextDoc", args, 2);
          }

          static PyObject *t_FilterSpans_nextStartPosition(t_FilterSpans *self, PyObject *args)
          {
            jint result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.nextStartPosition());
              return PyLong_FromLong((long) result);
            }

            return callSuper(PY_TYPE(FilterSpans), (PyObject *) self, "nextStartPosition", args, 2);
          }

          static PyObject *t_FilterSpans_positionsCost(t_FilterSpans *self, PyObject *args)
          {
            jfloat result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.positionsCost());
              return PyFloat_FromDouble((double) result);
            }

            return callSuper(PY_TYPE(FilterSpans), (PyObject *) self, "positionsCost", args, 2);
          }

          static PyObject *t_FilterSpans_startPosition(t_FilterSpans *self, PyObject *args)
          {
            jint result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.startPosition());
              return PyLong_FromLong((long) result);
            }

            return callSuper(PY_TYPE(FilterSpans), (PyObject *) self, "startPosition", args, 2);
          }

          static PyObject *t_FilterSpans_toString(t_FilterSpans *self, PyObject *args)
          {
            ::java::lang::String result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.toString());
              return j2p(result);
            }

            return callSuper(PY_TYPE(FilterSpans), (PyObject *) self, "toString", args, 2);
          }

          static PyObject *t_FilterSpans_width(t_FilterSpans *self, PyObject *args)
          {
            jint result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.width());
              return PyLong_FromLong((long) result);
            }

            return callSuper(PY_TYPE(FilterSpans), (PyObject *) self, "width", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/util/Accountables.h"
#include "java/util/Map.h"
#include "java/util/Collection.h"
#include "org/apache/lucene/util/Accountable.h"
#include "java/lang/Class.h"
#include "java/lang/String.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {

        ::java::lang::Class *Accountables::class$ = NULL;
        jmethodID *Accountables::mids$ = NULL;
        bool Accountables::live$ = false;

        jclass Accountables::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/util/Accountables");

            mids$ = new jmethodID[max_mid];
            mids$[mid_namedAccountable_fcd5bd0bb721941b] = env->getStaticMethodID(cls, "namedAccountable", "(Ljava/lang/String;J)Lorg/apache/lucene/util/Accountable;");
            mids$[mid_namedAccountable_6e495411591cdc0a] = env->getStaticMethodID(cls, "namedAccountable", "(Ljava/lang/String;Lorg/apache/lucene/util/Accountable;)Lorg/apache/lucene/util/Accountable;");
            mids$[mid_namedAccountable_aa54a93ecf69edfa] = env->getStaticMethodID(cls, "namedAccountable", "(Ljava/lang/String;Ljava/util/Collection;J)Lorg/apache/lucene/util/Accountable;");
            mids$[mid_namedAccountables_235fc3314f04b009] = env->getStaticMethodID(cls, "namedAccountables", "(Ljava/lang/String;Ljava/util/Map;)Ljava/util/Collection;");
            mids$[mid_toString_50db6f7103eee49a] = env->getStaticMethodID(cls, "toString", "(Lorg/apache/lucene/util/Accountable;)Ljava/lang/String;");

            class$ = new ::java::lang::Class(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        ::org::apache::lucene::util::Accountable Accountables::namedAccountable(const ::java::lang::String & a0, jlong a1)
        {
          jclass cls = env->getClass(initializeClass);
          return ::org::apache::lucene::util::Accountable(env->callStaticObjectMethod(cls, mids$[mid_namedAccountable_fcd5bd0bb721941b], a0.this$, a1));
        }

        ::org::apache::lucene::util::Accountable Accountables::namedAccountable(const ::java::lang::String & a0, const ::org::apache::lucene::util::Accountable & a1)
        {
          jclass cls = env->getClass(initializeClass);
          return ::org::apache::lucene::util::Accountable(env->callStaticObjectMethod(cls, mids$[mid_namedAccountable_6e495411591cdc0a], a0.this$, a1.this$));
        }

        ::org::apache::lucene::util::Accountable Accountables::namedAccountable(const ::java::lang::String & a0, const ::java::util::Collection & a1, jlong a2)
        {
          jclass cls = env->getClass(initializeClass);
          return ::org::apache::lucene::util::Accountable(env->callStaticObjectMethod(cls, mids$[mid_namedAccountable_aa54a93ecf69edfa], a0.this$, a1.this$, a2));
        }

        ::java::util::Collection Accountables::namedAccountables(const ::java::lang::String & a0, const ::java::util::Map & a1)
        {
          jclass cls = env->getClass(initializeClass);
          return ::java::util::Collection(env->callStaticObjectMethod(cls, mids$[mid_namedAccountables_235fc3314f04b009], a0.this$, a1.this$));
        }

        ::java::lang::String Accountables::toString(const ::org::apache::lucene::util::Accountable & a0)
        {
          jclass cls = env->getClass(initializeClass);
          return ::java::lang::String(env->callStaticObjectMethod(cls, mids$[mid_toString_50db6f7103eee49a], a0.this$));
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        static PyObject *t_Accountables_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_Accountables_instance_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_Accountables_namedAccountable(PyTypeObject *type, PyObject *args);
        static PyObject *t_Accountables_namedAccountables(PyTypeObject *type, PyObject *args);
        static PyObject *t_Accountables_toString(PyTypeObject *type, PyObject *args);

        static PyMethodDef t_Accountables__methods_[] = {
          DECLARE_METHOD(t_Accountables, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_Accountables, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_Accountables, namedAccountable, METH_VARARGS | METH_CLASS),
          DECLARE_METHOD(t_Accountables, namedAccountables, METH_VARARGS | METH_CLASS),
          DECLARE_METHOD(t_Accountables, toString, METH_VARARGS | METH_CLASS),
          { NULL, NULL, 0, NULL }
        };

        static PyType_Slot PY_TYPE_SLOTS(Accountables)[] = {
          { Py_tp_methods, t_Accountables__methods_ },
          { Py_tp_init, (void *) abstract_init },
          { 0, NULL }
        };

        static PyType_Def *PY_TYPE_BASES(Accountables)[] = {
          &PY_TYPE_DEF(::java::lang::Object),
          NULL
        };

        DEFINE_TYPE(Accountables, t_Accountables, Accountables);

        void t_Accountables::install(PyObject *module)
        {
          installType(&PY_TYPE(Accountables), &PY_TYPE_DEF(Accountables), module, "Accountables", 0);
        }

        void t_Accountables::initialize(PyObject *module)
        {
          PyObject_SetAttrString((PyObject *) PY_TYPE(Accountables), "class_", make_descriptor(Accountables::initializeClass, 1));
          PyObject_SetAttrString((PyObject *) PY_TYPE(Accountables), "wrapfn_", make_descriptor(t_Accountables::wrap_jobject));
          PyObject_SetAttrString((PyObject *) PY_TYPE(Accountables), "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_Accountables_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, Accountables::initializeClass, 1)))
            return NULL;
          return t_Accountables::wrap_Object(Accountables(((t_Accountables *) arg)->object.this$));
        }
        static PyObject *t_Accountables_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, Accountables::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static PyObject *t_Accountables_namedAccountable(PyTypeObject *type, PyObject *args)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 2:
            {
              ::java::lang::String a0((jobject) NULL);
              jlong a1;
              ::org::apache::lucene::util::Accountable result((jobject) NULL);

              if (!parseArgs(args, "sJ", &a0, &a1))
              {
                OBJ_CALL(result = ::org::apache::lucene::util::Accountables::namedAccountable(a0, a1));
                return ::org::apache::lucene::util::t_Accountable::wrap_Object(result);
              }
            }
            {
              ::java::lang::String a0((jobject) NULL);
              ::org::apache::lucene::util::Accountable a1((jobject) NULL);
              ::org::apache::lucene::util::Accountable result((jobject) NULL);

              if (!parseArgs(args, "sk", ::org::apache::lucene::util::Accountable::initializeClass, &a0, &a1))
              {
                OBJ_CALL(result = ::org::apache::lucene::util::Accountables::namedAccountable(a0, a1));
                return ::org::apache::lucene::util::t_Accountable::wrap_Object(result);
              }
            }
            break;
           case 3:
            {
              ::java::lang::String a0((jobject) NULL);
              ::java::util::Collection a1((jobject) NULL);
              PyTypeObject **p1;
              jlong a2;
              ::org::apache::lucene::util::Accountable result((jobject) NULL);

              if (!parseArgs(args, "sKJ", ::java::util::Collection::initializeClass, &a0, &a1, &p1, ::java::util::t_Collection::parameters_, &a2))
              {
                OBJ_CALL(result = ::org::apache::lucene::util::Accountables::namedAccountable(a0, a1, a2));
                return ::org::apache::lucene::util::t_Accountable::wrap_Object(result);
              }
            }
          }

          PyErr_SetArgsError(type, "namedAccountable", args);
          return NULL;
        }

        static PyObject *t_Accountables_namedAccountables(PyTypeObject *type, PyObject *args)
        {
          ::java::lang::String a0((jobject) NULL);
          ::java::util::Map a1((jobject) NULL);
          PyTypeObject **p1;
          ::java::util::Collection result((jobject) NULL);

          if (!parseArgs(args, "sK", ::java::util::Map::initializeClass, &a0, &a1, &p1, ::java::util::t_Map::parameters_))
          {
            OBJ_CALL(result = ::org::apache::lucene::util::Accountables::namedAccountables(a0, a1));
            return ::java::util::t_Collection::wrap_Object(result, ::org::apache::lucene::util::PY_TYPE(Accountable));
          }

          PyErr_SetArgsError(type, "namedAccountables", args);
          return NULL;
        }

        static PyObject *t_Accountables_toString(PyTypeObject *type, PyObject *args)
        {
          ::org::apache::lucene::util::Accountable a0((jobject) NULL);
          ::java::lang::String result((jobject) NULL);

          if (!parseArgs(args, "k", ::org::apache::lucene::util::Accountable::initializeClass, &a0))
          {
            OBJ_CALL(result = ::org::apache::lucene::util::Accountables::toString(a0));
            return j2p(result);
          }

          return callSuper(type, "toString", args, 2);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/document/FloatPoint.h"
#include "java/util/Collection.h"
#include "java/lang/Number.h"
#include "java/lang/Float.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/util/BytesRef.h"
#include "java/lang/String.h"
#include "org/apache/lucene/search/Query.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace document {

        ::java::lang::Class *FloatPoint::class$ = NULL;
        jmethodID *FloatPoint::mids$ = NULL;
        bool FloatPoint::live$ = false;

        jclass FloatPoint::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/document/FloatPoint");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_6526db32d123c83c] = env->getMethodID(cls, "<init>", "(Ljava/lang/String;[F)V");
            mids$[mid_decodeDimension_2431569bab1a7ba7] = env->getStaticMethodID(cls, "decodeDimension", "([BI)F");
            mids$[mid_encodeDimension_b1d07bb885aad1fe] = env->getStaticMethodID(cls, "encodeDimension", "(F[BI)V");
            mids$[mid_newExactQuery_bb52d4f3f0fb1360] = env->getStaticMethodID(cls, "newExactQuery", "(Ljava/lang/String;F)Lorg/apache/lucene/search/Query;");
            mids$[mid_newRangeQuery_a56c233be2e586b6] = env->getStaticMethodID(cls, "newRangeQuery", "(Ljava/lang/String;[F[F)Lorg/apache/lucene/search/Query;");
            mids$[mid_newRangeQuery_2072c8e0fc502353] = env->getStaticMethodID(cls, "newRangeQuery", "(Ljava/lang/String;FF)Lorg/apache/lucene/search/Query;");
            mids$[mid_newSetQuery_9d0d4ab95d8653ee] = env->getStaticMethodID(cls, "newSetQuery", "(Ljava/lang/String;[F)Lorg/apache/lucene/search/Query;");
            mids$[mid_newSetQuery_263cb7d6a0b161ae] = env->getStaticMethodID(cls, "newSetQuery", "(Ljava/lang/String;Ljava/util/Collection;)Lorg/apache/lucene/search/Query;");
            mids$[mid_nextDown_8c8518d25218b9c5] = env->getStaticMethodID(cls, "nextDown", "(F)F");
            mids$[mid_nextUp_8c8518d25218b9c5] = env->getStaticMethodID(cls, "nextUp", "(F)F");
            mids$[mid_numericValue_f5813404cc5e3a1e] = env->getMethodID(cls, "numericValue", "()Ljava/lang/Number;");
            mids$[mid_pack_2e087fe19704e1f5] = env->getStaticMethodID(cls, "pack", "([F)Lorg/apache/lucene/util/BytesRef;");
            mids$[mid_setBytesValue_0bdfd2603b7490a8] = env->getMethodID(cls, "setBytesValue", "(Lorg/apache/lucene/util/BytesRef;)V");
            mids$[mid_setFloatValue_8e1d952dd65cdc3a] = env->getMethodID(cls, "setFloatValue", "(F)V");
            mids$[mid_setFloatValues_86d8949a8a13e717] = env->getMethodID(cls, "setFloatValues", "([F)V");
            mids$[mid_toString_db9b55ba01e03e4b] = env->getMethodID(cls, "toString", "()Ljava/lang/String;");

            class$ = new ::java::lang::Class(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        FloatPoint::FloatPoint(const ::java::lang::String & a0, const JArray< jfloat > & a1) : ::org::apache::lucene::document::Field(env->newObject(initializeClass, &mids$, mid_init$_6526db32d123c83c, a0.this$, a1.this$)) {}

        jfloat FloatPoint::decodeDimension(const JArray< jbyte > & a0, jint a1)
        {
          jclass cls = env->getClass(initializeClass);
          return env->callStaticFloatMethod(cls, mids$[mid_decodeDimension_2431569bab1a7ba7], a0.this$, a1);
        }

        void FloatPoint::encodeDimension(jfloat a0, const JArray< jbyte > & a1, jint a2)
        {
          jclass cls = env->getClass(initializeClass);
          env->callStaticVoidMethod(cls, mids$[mid_encodeDimension_b1d07bb885aad1fe], a0, a1.this$, a2);
        }

        ::org::apache::lucene::search::Query FloatPoint::newExactQuery(const ::java::lang::String & a0, jfloat a1)
        {
          jclass cls = env->getClass(initializeClass);
          return ::org::apache::lucene::search::Query(env->callStaticObjectMethod(cls, mids$[mid_newExactQuery_bb52d4f3f0fb1360], a0.this$, a1));
        }

        ::org::apache::lucene::search::Query FloatPoint::newRangeQuery(const ::java::lang::String & a0, const JArray< jfloat > & a1, const JArray< jfloat > & a2)
        {
          jclass cls = env->getClass(initializeClass);
          return ::org::apache::lucene::search::Query(env->callStaticObjectMethod(cls, mids$[mid_newRangeQuery_a56c233be2e586b6], a0.this$, a1.this$, a2.this$));
        }

        ::org::apache::lucene::search::Query FloatPoint::newRangeQuery(const ::java::lang::String & a0, jfloat a1, jfloat a2)
        {
          jclass cls = env->getClass(initializeClass);
          return ::org::apache::lucene::search::Query(env->callStaticObjectMethod(cls, mids$[mid_newRangeQuery_2072c8e0fc502353], a0.this$, a1, a2));
        }

        ::org::apache::lucene::search::Query FloatPoint::newSetQuery(const ::java::lang::String & a0, const JArray< jfloat > & a1)
        {
          jclass cls = env->getClass(initializeClass);
          return ::org::apache::lucene::search::Query(env->callStaticObjectMethod(cls, mids$[mid_newSetQuery_9d0d4ab95d8653ee], a0.this$, a1.this$));
        }

        ::org::apache::lucene::search::Query FloatPoint::newSetQuery(const ::java::lang::String & a0, const ::java::util::Collection & a1)
        {
          jclass cls = env->getClass(initializeClass);
          return ::org::apache::lucene::search::Query(env->callStaticObjectMethod(cls, mids$[mid_newSetQuery_263cb7d6a0b161ae], a0.this$, a1.this$));
        }

        jfloat FloatPoint::nextDown(jfloat a0)
        {
          jclass cls = env->getClass(initializeClass);
          return env->callStaticFloatMethod(cls, mids$[mid_nextDown_8c8518d25218b9c5], a0);
        }

        jfloat FloatPoint::nextUp(jfloat a0)
        {
          jclass cls = env->getClass(initializeClass);
          return env->callStaticFloatMethod(cls, mids$[mid_nextUp_8c8518d25218b9c5], a0);
        }

        ::java::lang::Number FloatPoint::numericValue() const
        {
          return ::java::lang::Number(env->callObjectMethod(this$, mids$[mid_numericValue_f5813404cc5e3a1e]));
        }

        ::org::apache::lucene::util::BytesRef FloatPoint::pack(const JArray< jfloat > & a0)
        {
          jclass cls = env->getClass(initializeClass);
          return ::org::apache::lucene::util::BytesRef(env->callStaticObjectMethod(cls, mids$[mid_pack_2e087fe19704e1f5], a0.this$));
        }

        void FloatPoint::setBytesValue(const ::org::apache::lucene::util::BytesRef & a0) const
        {
          env->callVoidMethod(this$, mids$[mid_setBytesValue_0bdfd2603b7490a8], a0.this$);
        }

        void FloatPoint::setFloatValue(jfloat a0) const
        {
          env->callVoidMethod(this$, mids$[mid_setFloatValue_8e1d952dd65cdc3a], a0);
        }

        void FloatPoint::setFloatValues(const JArray< jfloat > & a0) const
        {
          env->callVoidMethod(this$, mids$[mid_setFloatValues_86d8949a8a13e717], a0.this$);
        }

        ::java::lang::String FloatPoint::toString() const
        {
          return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_db9b55ba01e03e4b]));
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace document {
        static PyObject *t_FloatPoint_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_FloatPoint_instance_(PyTypeObject *type, PyObject *arg);
        static int t_FloatPoint_init_(t_FloatPoint *self, PyObject *args, PyObject *kwds);
        static PyObject *t_FloatPoint_decodeDimension(PyTypeObject *type, PyObject *args);
        static PyObject *t_FloatPoint_encodeDimension(PyTypeObject *type, PyObject *args);
        static PyObject *t_FloatPoint_newExactQuery(PyTypeObject *type, PyObject *args);
        static PyObject *t_FloatPoint_newRangeQuery(PyTypeObject *type, PyObject *args);
        static PyObject *t_FloatPoint_newSetQuery(PyTypeObject *type, PyObject *args);
        static PyObject *t_FloatPoint_nextDown(PyTypeObject *type, PyObject *arg);
        static PyObject *t_FloatPoint_nextUp(PyTypeObject *type, PyObject *arg);
        static PyObject *t_FloatPoint_numericValue(t_FloatPoint *self, PyObject *args);
        static PyObject *t_FloatPoint_pack(PyTypeObject *type, PyObject *arg);
        static PyObject *t_FloatPoint_setBytesValue(t_FloatPoint *self, PyObject *args);
        static PyObject *t_FloatPoint_setFloatValue(t_FloatPoint *self, PyObject *args);
        static PyObject *t_FloatPoint_setFloatValues(t_FloatPoint *self, PyObject *arg);
        static PyObject *t_FloatPoint_toString(t_FloatPoint *self, PyObject *args);
        static int t_FloatPoint_set__bytesValue(t_FloatPoint *self, PyObject *arg, void *data);
        static int t_FloatPoint_set__floatValue(t_FloatPoint *self, PyObject *arg, void *data);
        static int t_FloatPoint_set__floatValues(t_FloatPoint *self, PyObject *arg, void *data);
        static PyGetSetDef t_FloatPoint__fields_[] = {
          DECLARE_SET_FIELD(t_FloatPoint, bytesValue),
          DECLARE_SET_FIELD(t_FloatPoint, floatValue),
          DECLARE_SET_FIELD(t_FloatPoint, floatValues),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_FloatPoint__methods_[] = {
          DECLARE_METHOD(t_FloatPoint, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_FloatPoint, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_FloatPoint, decodeDimension, METH_VARARGS | METH_CLASS),
          DECLARE_METHOD(t_FloatPoint, encodeDimension, METH_VARARGS | METH_CLASS),
          DECLARE_METHOD(t_FloatPoint, newExactQuery, METH_VARARGS | METH_CLASS),
          DECLARE_METHOD(t_FloatPoint, newRangeQuery, METH_VARARGS | METH_CLASS),
          DECLARE_METHOD(t_FloatPoint, newSetQuery, METH_VARARGS | METH_CLASS),
          DECLARE_METHOD(t_FloatPoint, nextDown, METH_O | METH_CLASS),
          DECLARE_METHOD(t_FloatPoint, nextUp, METH_O | METH_CLASS),
          DECLARE_METHOD(t_FloatPoint, numericValue, METH_VARARGS),
          DECLARE_METHOD(t_FloatPoint, pack, METH_O | METH_CLASS),
          DECLARE_METHOD(t_FloatPoint, setBytesValue, METH_VARARGS),
          DECLARE_METHOD(t_FloatPoint, setFloatValue, METH_VARARGS),
          DECLARE_METHOD(t_FloatPoint, setFloatValues, METH_O),
          DECLARE_METHOD(t_FloatPoint, toString, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        static PyType_Slot PY_TYPE_SLOTS(FloatPoint)[] = {
          { Py_tp_methods, t_FloatPoint__methods_ },
          { Py_tp_init, (void *) t_FloatPoint_init_ },
          { Py_tp_getset, t_FloatPoint__fields_ },
          { 0, NULL }
        };

        static PyType_Def *PY_TYPE_BASES(FloatPoint)[] = {
          &PY_TYPE_DEF(::org::apache::lucene::document::Field),
          NULL
        };

        DEFINE_TYPE(FloatPoint, t_FloatPoint, FloatPoint);

        void t_FloatPoint::install(PyObject *module)
        {
          installType(&PY_TYPE(FloatPoint), &PY_TYPE_DEF(FloatPoint), module, "FloatPoint", 0);
        }

        void t_FloatPoint::initialize(PyObject *module)
        {
          PyObject_SetAttrString((PyObject *) PY_TYPE(FloatPoint), "class_", make_descriptor(FloatPoint::initializeClass, 1));
          PyObject_SetAttrString((PyObject *) PY_TYPE(FloatPoint), "wrapfn_", make_descriptor(t_FloatPoint::wrap_jobject));
          PyObject_SetAttrString((PyObject *) PY_TYPE(FloatPoint), "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_FloatPoint_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, FloatPoint::initializeClass, 1)))
            return NULL;
          return t_FloatPoint::wrap_Object(FloatPoint(((t_FloatPoint *) arg)->object.this$));
        }
        static PyObject *t_FloatPoint_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, FloatPoint::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_FloatPoint_init_(t_FloatPoint *self, PyObject *args, PyObject *kwds)
        {
          ::java::lang::String a0((jobject) NULL);
          JArray< jfloat > a1((jobject) NULL);
          FloatPoint object((jobject) NULL);

          if (!parseArgs(args, "s[F", &a0, &a1))
          {
            INT_CALL(object = FloatPoint(a0, a1));
            self->object = object;
          }
          else
          {
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }

        static PyObject *t_FloatPoint_decodeDimension(PyTypeObject *type, PyObject *args)
        {
          JArray< jbyte > a0((jobject) NULL);
          jint a1;
          jfloat result;

          if (!parseArgs(args, "[BI", &a0, &a1))
          {
            OBJ_CALL(result = ::org::apache::lucene::document::FloatPoint::decodeDimension(a0, a1));
            return PyFloat_FromDouble((double) result);
          }

          PyErr_SetArgsError(type, "decodeDimension", args);
          return NULL;
        }

        static PyObject *t_FloatPoint_encodeDimension(PyTypeObject *type, PyObject *args)
        {
          jfloat a0;
          JArray< jbyte > a1((jobject) NULL);
          jint a2;

          if (!parseArgs(args, "F[BI", &a0, &a1, &a2))
          {
            OBJ_CALL(::org::apache::lucene::document::FloatPoint::encodeDimension(a0, a1, a2));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError(type, "encodeDimension", args);
          return NULL;
        }

        static PyObject *t_FloatPoint_newExactQuery(PyTypeObject *type, PyObject *args)
        {
          ::java::lang::String a0((jobject) NULL);
          jfloat a1;
          ::org::apache::lucene::search::Query result((jobject) NULL);

          if (!parseArgs(args, "sF", &a0, &a1))
          {
            OBJ_CALL(result = ::org::apache::lucene::document::FloatPoint::newExactQuery(a0, a1));
            return ::org::apache::lucene::search::t_Query::wrap_Object(result);
          }

          PyErr_SetArgsError(type, "newExactQuery", args);
          return NULL;
        }

        static PyObject *t_FloatPoint_newRangeQuery(PyTypeObject *type, PyObject *args)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 3:
            {
              ::java::lang::String a0((jobject) NULL);
              JArray< jfloat > a1((jobject) NULL);
              JArray< jfloat > a2((jobject) NULL);
              ::org::apache::lucene::search::Query result((jobject) NULL);

              if (!parseArgs(args, "s[F[F", &a0, &a1, &a2))
              {
                OBJ_CALL(result = ::org::apache::lucene::document::FloatPoint::newRangeQuery(a0, a1, a2));
                return ::org::apache::lucene::search::t_Query::wrap_Object(result);
              }
            }
            {
              ::java::lang::String a0((jobject) NULL);
              jfloat a1;
              jfloat a2;
              ::org::apache::lucene::search::Query result((jobject) NULL);

              if (!parseArgs(args, "sFF", &a0, &a1, &a2))
              {
                OBJ_CALL(result = ::org::apache::lucene::document::FloatPoint::newRangeQuery(a0, a1, a2));
                return ::org::apache::lucene::search::t_Query::wrap_Object(result);
              }
            }
          }

          PyErr_SetArgsError(type, "newRangeQuery", args);
          return NULL;
        }

        static PyObject *t_FloatPoint_newSetQuery(PyTypeObject *type, PyObject *args)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 2:
            {
              ::java::lang::String a0((jobject) NULL);
              JArray< jfloat > a1((jobject) NULL);
              ::org::apache::lucene::search::Query result((jobject) NULL);

              if (!parseArgs(args, "s[F", &a0, &a1))
              {
                OBJ_CALL(result = ::org::apache::lucene::document::FloatPoint::newSetQuery(a0, a1));
                return ::org::apache::lucene::search::t_Query::wrap_Object(result);
              }
            }
            {
              ::java::lang::String a0((jobject) NULL);
              ::java::util::Collection a1((jobject) NULL);
              PyTypeObject **p1;
              ::org::apache::lucene::search::Query result((jobject) NULL);

              if (!parseArgs(args, "sK", ::java::util::Collection::initializeClass, &a0, &a1, &p1, ::java::util::t_Collection::parameters_))
              {
                OBJ_CALL(result = ::org::apache::lucene::document::FloatPoint::newSetQuery(a0, a1));
                return ::org::apache::lucene::search::t_Query::wrap_Object(result);
              }
            }
          }

          PyErr_SetArgsError(type, "newSetQuery", args);
          return NULL;
        }

        static PyObject *t_FloatPoint_nextDown(PyTypeObject *type, PyObject *arg)
        {
          jfloat a0;
          jfloat result;

          if (!parseArg(arg, "F", &a0))
          {
            OBJ_CALL(result = ::org::apache::lucene::document::FloatPoint::nextDown(a0));
            return PyFloat_FromDouble((double) result);
          }

          PyErr_SetArgsError(type, "nextDown", arg);
          return NULL;
        }

        static PyObject *t_FloatPoint_nextUp(PyTypeObject *type, PyObject *arg)
        {
          jfloat a0;
          jfloat result;

          if (!parseArg(arg, "F", &a0))
          {
            OBJ_CALL(result = ::org::apache::lucene::document::FloatPoint::nextUp(a0));
            return PyFloat_FromDouble((double) result);
          }

          PyErr_SetArgsError(type, "nextUp", arg);
          return NULL;
        }

        static PyObject *t_FloatPoint_numericValue(t_FloatPoint *self, PyObject *args)
        {
          ::java::lang::Number result((jobject) NULL);

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.numericValue());
            return ::java::lang::t_Number::wrap_Object(result);
          }

          return callSuper(PY_TYPE(FloatPoint), (PyObject *) self, "numericValue", args, 2);
        }

        static PyObject *t_FloatPoint_pack(PyTypeObject *type, PyObject *arg)
        {
          JArray< jfloat > a0((jobject) NULL);
          ::org::apache::lucene::util::BytesRef result((jobject) NULL);

          if (!parseArg(arg, "[F", &a0))
          {
            OBJ_CALL(result = ::org::apache::lucene::document::FloatPoint::pack(a0));
            return ::org::apache::lucene::util::t_BytesRef::wrap_Object(result);
          }

          PyErr_SetArgsError(type, "pack", arg);
          return NULL;
        }

        static PyObject *t_FloatPoint_setBytesValue(t_FloatPoint *self, PyObject *args)
        {
          ::org::apache::lucene::util::BytesRef a0((jobject) NULL);

          if (!parseArgs(args, "k", ::org::apache::lucene::util::BytesRef::initializeClass, &a0))
          {
            OBJ_CALL(self->object.setBytesValue(a0));
            Py_RETURN_NONE;
          }

          return callSuper(PY_TYPE(FloatPoint), (PyObject *) self, "setBytesValue", args, 2);
        }

        static PyObject *t_FloatPoint_setFloatValue(t_FloatPoint *self, PyObject *args)
        {
          jfloat a0;

          if (!parseArgs(args, "F", &a0))
          {
            OBJ_CALL(self->object.setFloatValue(a0));
            Py_RETURN_NONE;
          }

          return callSuper(PY_TYPE(FloatPoint), (PyObject *) self, "setFloatValue", args, 2);
        }

        static PyObject *t_FloatPoint_setFloatValues(t_FloatPoint *self, PyObject *arg)
        {
          JArray< jfloat > a0((jobject) NULL);

          if (!parseArg(arg, "[F", &a0))
          {
            OBJ_CALL(self->object.setFloatValues(a0));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "setFloatValues", arg);
          return NULL;
        }

        static PyObject *t_FloatPoint_toString(t_FloatPoint *self, PyObject *args)
        {
          ::java::lang::String result((jobject) NULL);

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.toString());
            return j2p(result);
          }

          return callSuper(PY_TYPE(FloatPoint), (PyObject *) self, "toString", args, 2);
        }

        static int t_FloatPoint_set__bytesValue(t_FloatPoint *self, PyObject *arg, void *data)
        {
          {
            ::org::apache::lucene::util::BytesRef value((jobject) NULL);
            if (!parseArg(arg, "k", ::org::apache::lucene::util::BytesRef::initializeClass, &value))
            {
              INT_CALL(self->object.setBytesValue(value));
              return 0;
            }
          }
          PyErr_SetArgsError((PyObject *) self, "bytesValue", arg);
          return -1;
        }

        static int t_FloatPoint_set__floatValue(t_FloatPoint *self, PyObject *arg, void *data)
        {
          {
            jfloat value;
            if (!parseArg(arg, "F", &value))
            {
              INT_CALL(self->object.setFloatValue(value));
              return 0;
            }
          }
          PyErr_SetArgsError((PyObject *) self, "floatValue", arg);
          return -1;
        }

        static int t_FloatPoint_set__floatValues(t_FloatPoint *self, PyObject *arg, void *data)
        {
          {
            JArray< jfloat > value((jobject) NULL);
            if (!parseArg(arg, "[F", &value))
            {
              INT_CALL(self->object.setFloatValues(value));
              return 0;
            }
          }
          PyErr_SetArgsError((PyObject *) self, "floatValues", arg);
          return -1;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/codecs/NormsConsumer.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/codecs/NormsProducer.h"
#include "java/io/Closeable.h"
#include "org/apache/lucene/index/FieldInfo.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/index/MergeState.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace codecs {

        ::java::lang::Class *NormsConsumer::class$ = NULL;
        jmethodID *NormsConsumer::mids$ = NULL;
        bool NormsConsumer::live$ = false;

        jclass NormsConsumer::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/codecs/NormsConsumer");

            mids$ = new jmethodID[max_mid];
            mids$[mid_addNormsField_5c2ab8fdd065173d] = env->getMethodID(cls, "addNormsField", "(Lorg/apache/lucene/index/FieldInfo;Lorg/apache/lucene/codecs/NormsProducer;)V");
            mids$[mid_merge_747cb13f783c9b42] = env->getMethodID(cls, "merge", "(Lorg/apache/lucene/index/MergeState;)V");
            mids$[mid_mergeNormsField_b32f9072de285d65] = env->getMethodID(cls, "mergeNormsField", "(Lorg/apache/lucene/index/FieldInfo;Lorg/apache/lucene/index/MergeState;)V");

            class$ = new ::java::lang::Class(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        void NormsConsumer::addNormsField(const ::org::apache::lucene::index::FieldInfo & a0, const ::org::apache::lucene::codecs::NormsProducer & a1) const
        {
          env->callVoidMethod(this$, mids$[mid_addNormsField_5c2ab8fdd065173d], a0.this$, a1.this$);
        }

        void NormsConsumer::merge(const ::org::apache::lucene::index::MergeState & a0) const
        {
          env->callVoidMethod(this$, mids$[mid_merge_747cb13f783c9b42], a0.this$);
        }

        void NormsConsumer::mergeNormsField(const ::org::apache::lucene::index::FieldInfo & a0, const ::org::apache::lucene::index::MergeState & a1) const
        {
          env->callVoidMethod(this$, mids$[mid_mergeNormsField_b32f9072de285d65], a0.this$, a1.this$);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace codecs {
        static PyObject *t_NormsConsumer_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_NormsConsumer_instance_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_NormsConsumer_addNormsField(t_NormsConsumer *self, PyObject *args);
        static PyObject *t_NormsConsumer_merge(t_NormsConsumer *self, PyObject *arg);
        static PyObject *t_NormsConsumer_mergeNormsField(t_NormsConsumer *self, PyObject *args);

        static PyMethodDef t_NormsConsumer__methods_[] = {
          DECLARE_METHOD(t_NormsConsumer, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_NormsConsumer, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_NormsConsumer, addNormsField, METH_VARARGS),
          DECLARE_METHOD(t_NormsConsumer, merge, METH_O),
          DECLARE_METHOD(t_NormsConsumer, mergeNormsField, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        static PyType_Slot PY_TYPE_SLOTS(NormsConsumer)[] = {
          { Py_tp_methods, t_NormsConsumer__methods_ },
          { Py_tp_init, (void *) abstract_init },
          { 0, NULL }
        };

        static PyType_Def *PY_TYPE_BASES(NormsConsumer)[] = {
          &PY_TYPE_DEF(::java::lang::Object),
          NULL
        };

        DEFINE_TYPE(NormsConsumer, t_NormsConsumer, NormsConsumer);

        void t_NormsConsumer::install(PyObject *module)
        {
          installType(&PY_TYPE(NormsConsumer), &PY_TYPE_DEF(NormsConsumer), module, "NormsConsumer", 0);
        }

        void t_NormsConsumer::initialize(PyObject *module)
        {
          PyObject_SetAttrString((PyObject *) PY_TYPE(NormsConsumer), "class_", make_descriptor(NormsConsumer::initializeClass, 1));
          PyObject_SetAttrString((PyObject *) PY_TYPE(NormsConsumer), "wrapfn_", make_descriptor(t_NormsConsumer::wrap_jobject));
          PyObject_SetAttrString((PyObject *) PY_TYPE(NormsConsumer), "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_NormsConsumer_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, NormsConsumer::initializeClass, 1)))
            return NULL;
          return t_NormsConsumer::wrap_Object(NormsConsumer(((t_NormsConsumer *) arg)->object.this$));
        }
        static PyObject *t_NormsConsumer_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, NormsConsumer::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static PyObject *t_NormsConsumer_addNormsField(t_NormsConsumer *self, PyObject *args)
        {
          ::org::apache::lucene::index::FieldInfo a0((jobject) NULL);
          ::org::apache::lucene::codecs::NormsProducer a1((jobject) NULL);

          if (!parseArgs(args, "kk", ::org::apache::lucene::index::FieldInfo::initializeClass, ::org::apache::lucene::codecs::NormsProducer::initializeClass, &a0, &a1))
          {
            OBJ_CALL(self->object.addNormsField(a0, a1));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "addNormsField", args);
          return NULL;
        }

        static PyObject *t_NormsConsumer_merge(t_NormsConsumer *self, PyObject *arg)
        {
          ::org::apache::lucene::index::MergeState a0((jobject) NULL);

          if (!parseArg(arg, "k", ::org::apache::lucene::index::MergeState::initializeClass, &a0))
          {
            OBJ_CALL(self->object.merge(a0));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "merge", arg);
          return NULL;
        }

        static PyObject *t_NormsConsumer_mergeNormsField(t_NormsConsumer *self, PyObject *args)
        {
          ::org::apache::lucene::index::FieldInfo a0((jobject) NULL);
          ::org::apache::lucene::index::MergeState a1((jobject) NULL);

          if (!parseArgs(args, "kk", ::org::apache::lucene::index::FieldInfo::initializeClass, ::org::apache::lucene::index::MergeState::initializeClass, &a0, &a1))
          {
            OBJ_CALL(self->object.mergeNormsField(a0, a1));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "mergeNormsField", args);
          return NULL;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/misc/IndexMergeTool.h"
#include "java/lang/String.h"
#include "java/io/IOException.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace misc {

        ::java::lang::Class *IndexMergeTool::class$ = NULL;
        jmethodID *IndexMergeTool::mids$ = NULL;
        bool IndexMergeTool::live$ = false;

        jclass IndexMergeTool::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/misc/IndexMergeTool");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_f2cc1bce94666404] = env->getMethodID(cls, "<init>", "()V");
            mids$[mid_main_2fc318b999a7aba3] = env->getStaticMethodID(cls, "main", "([Ljava/lang/String;)V");

            class$ = new ::java::lang::Class(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        IndexMergeTool::IndexMergeTool() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_f2cc1bce94666404)) {}

        void IndexMergeTool::main(const JArray< ::java::lang::String > & a0)
        {
          jclass cls = env->getClass(initializeClass);
          env->callStaticVoidMethod(cls, mids$[mid_main_2fc318b999a7aba3], a0.this$);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace misc {
        static PyObject *t_IndexMergeTool_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_IndexMergeTool_instance_(PyTypeObject *type, PyObject *arg);
        static int t_IndexMergeTool_init_(t_IndexMergeTool *self, PyObject *args, PyObject *kwds);
        static PyObject *t_IndexMergeTool_main(PyTypeObject *type, PyObject *arg);

        static PyMethodDef t_IndexMergeTool__methods_[] = {
          DECLARE_METHOD(t_IndexMergeTool, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_IndexMergeTool, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_IndexMergeTool, main, METH_O | METH_CLASS),
          { NULL, NULL, 0, NULL }
        };

        static PyType_Slot PY_TYPE_SLOTS(IndexMergeTool)[] = {
          { Py_tp_methods, t_IndexMergeTool__methods_ },
          { Py_tp_init, (void *) t_IndexMergeTool_init_ },
          { 0, NULL }
        };

        static PyType_Def *PY_TYPE_BASES(IndexMergeTool)[] = {
          &PY_TYPE_DEF(::java::lang::Object),
          NULL
        };

        DEFINE_TYPE(IndexMergeTool, t_IndexMergeTool, IndexMergeTool);

        void t_IndexMergeTool::install(PyObject *module)
        {
          installType(&PY_TYPE(IndexMergeTool), &PY_TYPE_DEF(IndexMergeTool), module, "IndexMergeTool", 0);
        }

        void t_IndexMergeTool::initialize(PyObject *module)
        {
          PyObject_SetAttrString((PyObject *) PY_TYPE(IndexMergeTool), "class_", make_descriptor(IndexMergeTool::initializeClass, 1));
          PyObject_SetAttrString((PyObject *) PY_TYPE(IndexMergeTool), "wrapfn_", make_descriptor(t_IndexMergeTool::wrap_jobject));
          PyObject_SetAttrString((PyObject *) PY_TYPE(IndexMergeTool), "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_IndexMergeTool_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, IndexMergeTool::initializeClass, 1)))
            return NULL;
          return t_IndexMergeTool::wrap_Object(IndexMergeTool(((t_IndexMergeTool *) arg)->object.this$));
        }
        static PyObject *t_IndexMergeTool_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, IndexMergeTool::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_IndexMergeTool_init_(t_IndexMergeTool *self, PyObject *args, PyObject *kwds)
        {
          IndexMergeTool object((jobject) NULL);

          INT_CALL(object = IndexMergeTool());
          self->object = object;

          return 0;
        }

        static PyObject *t_IndexMergeTool_main(PyTypeObject *type, PyObject *arg)
        {
          JArray< ::java::lang::String > a0((jobject) NULL);

          if (!parseArg(arg, "[s", &a0))
          {
            OBJ_CALL(::org::apache::lucene::misc::IndexMergeTool::main(a0));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError(type, "main", arg);
          return NULL;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/DisiPriorityQueue.h"
#include "org/apache/lucene/search/DisiWrapper.h"
#include "java/util/Iterator.h"
#include "java/lang/Iterable.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {

        ::java::lang::Class *DisiPriorityQueue::class$ = NULL;
        jmethodID *DisiPriorityQueue::mids$ = NULL;
        bool DisiPriorityQueue::live$ = false;

        jclass DisiPriorityQueue::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/search/DisiPriorityQueue");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_040c4cd0390c5aff] = env->getMethodID(cls, "<init>", "(I)V");
            mids$[mid_add_6468c0fd1cdc1ee8] = env->getMethodID(cls, "add", "(Lorg/apache/lucene/search/DisiWrapper;)Lorg/apache/lucene/search/DisiWrapper;");
            mids$[mid_iterator_233a192dadb0917d] = env->getMethodID(cls, "iterator", "()Ljava/util/Iterator;");
            mids$[mid_pop_372bd5f47505c967] = env->getMethodID(cls, "pop", "()Lorg/apache/lucene/search/DisiWrapper;");
            mids$[mid_size_9972fcc56b44e79d] = env->getMethodID(cls, "size", "()I");
            mids$[mid_top_372bd5f47505c967] = env->getMethodID(cls, "top", "()Lorg/apache/lucene/search/DisiWrapper;");
            mids$[mid_topList_372bd5f47505c967] = env->getMethodID(cls, "topList", "()Lorg/apache/lucene/search/DisiWrapper;");
            mids$[mid_updateTop_372bd5f47505c967] = env->getMethodID(cls, "updateTop", "()Lorg/apache/lucene/search/DisiWrapper;");

            class$ = new ::java::lang::Class(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        DisiPriorityQueue::DisiPriorityQueue(jint a0) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_040c4cd0390c5aff, a0)) {}

        ::org::apache::lucene::search::DisiWrapper DisiPriorityQueue::add(const ::org::apache::lucene::search::DisiWrapper & a0) const
        {
          return ::org::apache::lucene::search::DisiWrapper(env->callObjectMethod(this$, mids$[mid_add_6468c0fd1cdc1ee8], a0.this$));
        }

        ::java::util::Iterator DisiPriorityQueue::iterator() const
        {
          return ::java::util::Iterator(env->callObjectMethod(this$, mids$[mid_iterator_233a192dadb0917d]));
        }

        ::org::apache::lucene::search::DisiWrapper DisiPriorityQueue::pop() const
        {
          return ::org::apache::lucene::search::DisiWrapper(env->callObjectMethod(this$, mids$[mid_pop_372bd5f47505c967]));
        }

        jint DisiPriorityQueue::size() const
        {
          return env->callIntMethod(this$, mids$[mid_size_9972fcc56b44e79d]);
        }

        ::org::apache::lucene::search::DisiWrapper DisiPriorityQueue::top() const
        {
          return ::org::apache::lucene::search::DisiWrapper(env->callObjectMethod(this$, mids$[mid_top_372bd5f47505c967]));
        }

        ::org::apache::lucene::search::DisiWrapper DisiPriorityQueue::topList() const
        {
          return ::org::apache::lucene::search::DisiWrapper(env->callObjectMethod(this$, mids$[mid_topList_372bd5f47505c967]));
        }

        ::org::apache::lucene::search::DisiWrapper DisiPriorityQueue::updateTop() const
        {
          return ::org::apache::lucene::search::DisiWrapper(env->callObjectMethod(this$, mids$[mid_updateTop_372bd5f47505c967]));
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        static PyObject *t_DisiPriorityQueue_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_DisiPriorityQueue_instance_(PyTypeObject *type, PyObject *arg);
        static int t_DisiPriorityQueue_init_(t_DisiPriorityQueue *self, PyObject *args, PyObject *kwds);
        static PyObject *t_DisiPriorityQueue_add(t_DisiPriorityQueue *self, PyObject *arg);
        static PyObject *t_DisiPriorityQueue_iterator(t_DisiPriorityQueue *self);
        static PyObject *t_DisiPriorityQueue_pop(t_DisiPriorityQueue *self);
        static PyObject *t_DisiPriorityQueue_size(t_DisiPriorityQueue *self);
        static PyObject *t_DisiPriorityQueue_top(t_DisiPriorityQueue *self);
        static PyObject *t_DisiPriorityQueue_topList(t_DisiPriorityQueue *self);
        static PyObject *t_DisiPriorityQueue_updateTop(t_DisiPriorityQueue *self);

        static PyMethodDef t_DisiPriorityQueue__methods_[] = {
          DECLARE_METHOD(t_DisiPriorityQueue, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_DisiPriorityQueue, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_DisiPriorityQueue, add, METH_O),
          DECLARE_METHOD(t_DisiPriorityQueue, iterator, METH_NOARGS),
          DECLARE_METHOD(t_DisiPriorityQueue, pop, METH_NOARGS),
          DECLARE_METHOD(t_DisiPriorityQueue, size, METH_NOARGS),
          DECLARE_METHOD(t_DisiPriorityQueue, top, METH_NOARGS),
          DECLARE_METHOD(t_DisiPriorityQueue, topList, METH_NOARGS),
          DECLARE_METHOD(t_DisiPriorityQueue, updateTop, METH_NOARGS),
          { NULL, NULL, 0, NULL }
        };

        static PyType_Slot PY_TYPE_SLOTS(DisiPriorityQueue)[] = {
          { Py_tp_methods, t_DisiPriorityQueue__methods_ },
          { Py_tp_init, (void *) t_DisiPriorityQueue_init_ },
          { Py_tp_iter, (void *) ((PyObject *(*)(t_DisiPriorityQueue *)) get_iterator< t_DisiPriorityQueue >) },
          { Py_tp_iternext, (void *) 0 },
          { 0, NULL }
        };

        static PyType_Def *PY_TYPE_BASES(DisiPriorityQueue)[] = {
          &PY_TYPE_DEF(::java::lang::Object),
          NULL
        };

        DEFINE_TYPE(DisiPriorityQueue, t_DisiPriorityQueue, DisiPriorityQueue);

        void t_DisiPriorityQueue::install(PyObject *module)
        {
          installType(&PY_TYPE(DisiPriorityQueue), &PY_TYPE_DEF(DisiPriorityQueue), module, "DisiPriorityQueue", 0);
        }

        void t_DisiPriorityQueue::initialize(PyObject *module)
        {
          PyObject_SetAttrString((PyObject *) PY_TYPE(DisiPriorityQueue), "class_", make_descriptor(DisiPriorityQueue::initializeClass, 1));
          PyObject_SetAttrString((PyObject *) PY_TYPE(DisiPriorityQueue), "wrapfn_", make_descriptor(t_DisiPriorityQueue::wrap_jobject));
          PyObject_SetAttrString((PyObject *) PY_TYPE(DisiPriorityQueue), "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_DisiPriorityQueue_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, DisiPriorityQueue::initializeClass, 1)))
            return NULL;
          return t_DisiPriorityQueue::wrap_Object(DisiPriorityQueue(((t_DisiPriorityQueue *) arg)->object.this$));
        }
        static PyObject *t_DisiPriorityQueue_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, DisiPriorityQueue::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_DisiPriorityQueue_init_(t_DisiPriorityQueue *self, PyObject *args, PyObject *kwds)
        {
          jint a0;
          DisiPriorityQueue object((jobject) NULL);

          if (!parseArgs(args, "I", &a0))
          {
            INT_CALL(object = DisiPriorityQueue(a0));
            self->object = object;
          }
          else
          {
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }

        static PyObject *t_DisiPriorityQueue_add(t_DisiPriorityQueue *self, PyObject *arg)
        {
          ::org::apache::lucene::search::DisiWrapper a0((jobject) NULL);
          ::org::apache::lucene::search::DisiWrapper result((jobject) NULL);

          if (!parseArg(arg, "k", ::org::apache::lucene::search::DisiWrapper::initializeClass, &a0))
          {
            OBJ_CALL(result = self->object.add(a0));
            return ::org::apache::lucene::search::t_DisiWrapper::wrap_Object(result);
          }

          PyErr_SetArgsError((PyObject *) self, "add", arg);
          return NULL;
        }

        static PyObject *t_DisiPriorityQueue_iterator(t_DisiPriorityQueue *self)
        {
          ::java::util::Iterator result((jobject) NULL);
          OBJ_CALL(result = self->object.iterator());
          return ::java::util::t_Iterator::wrap_Object(result, ::org::apache::lucene::search::PY_TYPE(DisiWrapper));
        }

        static PyObject *t_DisiPriorityQueue_pop(t_DisiPriorityQueue *self)
        {
          ::org::apache::lucene::search::DisiWrapper result((jobject) NULL);
          OBJ_CALL(result = self->object.pop());
          return ::org::apache::lucene::search::t_DisiWrapper::wrap_Object(result);
        }

        static PyObject *t_DisiPriorityQueue_size(t_DisiPriorityQueue *self)
        {
          jint result;
          OBJ_CALL(result = self->object.size());
          return PyLong_FromLong((long) result);
        }

        static PyObject *t_DisiPriorityQueue_top(t_DisiPriorityQueue *self)
        {
          ::org::apache::lucene::search::DisiWrapper result((jobject) NULL);
          OBJ_CALL(result = self->object.top());
          return ::org::apache::lucene::search::t_DisiWrapper::wrap_Object(result);
        }

        static PyObject *t_DisiPriorityQueue_topList(t_DisiPriorityQueue *self)
        {
          ::org::apache::lucene::search::DisiWrapper result((jobject) NULL);
          OBJ_CALL(result = self->object.topList());
          return ::org::apache::lucene::search::t_DisiWrapper::wrap_Object(result);
        }

        static PyObject *t_DisiPriorityQueue_updateTop(t_DisiPriorityQueue *self)
        {
          ::org::apache::lucene::search::DisiWrapper result((jobject) NULL);
          OBJ_CALL(result = self->object.updateTop());
          return ::org::apache::lucene::search::t_DisiWrapper::wrap_Object(result);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/tartarus/snowball/ext/BasqueStemmer.h"
#include "java/lang/Object.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace tartarus {
    namespace snowball {
      namespace ext {

        ::java::lang::Class *BasqueStemmer::class$ = NULL;
        jmethodID *BasqueStemmer::mids$ = NULL;
        bool BasqueStemmer::live$ = false;

        jclass BasqueStemmer::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/tartarus/snowball/ext/BasqueStemmer");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_f2cc1bce94666404] = env->getMethodID(cls, "<init>", "()V");
            mids$[mid_equals_8b72f2dcdde6fd1d] = env->getMethodID(cls, "equals", "(Ljava/lang/Object;)Z");
            mids$[mid_hashCode_9972fcc56b44e79d] = env->getMethodID(cls, "hashCode", "()I");
            mids$[mid_stem_8454bd5aa23fd11e] = env->getMethodID(cls, "stem", "()Z");

            class$ = new ::java::lang::Class(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        BasqueStemmer::BasqueStemmer() : ::org::tartarus::snowball::SnowballProgram(env->newObject(initializeClass, &mids$, mid_init$_f2cc1bce94666404)) {}

        jboolean BasqueStemmer::equals(const ::java::lang::Object & a0) const
        {
          return env->callBooleanMethod(this$, mids$[mid_equals_8b72f2dcdde6fd1d], a0.this$);
        }

        jint BasqueStemmer::hashCode() const
        {
          return env->callIntMethod(this$, mids$[mid_hashCode_9972fcc56b44e79d]);
        }

        jboolean BasqueStemmer::stem() const
        {
          return env->callBooleanMethod(this$, mids$[mid_stem_8454bd5aa23fd11e]);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace tartarus {
    namespace snowball {
      namespace ext {
        static PyObject *t_BasqueStemmer_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_BasqueStemmer_instance_(PyTypeObject *type, PyObject *arg);
        static int t_BasqueStemmer_init_(t_BasqueStemmer *self, PyObject *args, PyObject *kwds);
        static PyObject *t_BasqueStemmer_equals(t_BasqueStemmer *self, PyObject *args);
        static PyObject *t_BasqueStemmer_hashCode(t_BasqueStemmer *self, PyObject *args);
        static PyObject *t_BasqueStemmer_stem(t_BasqueStemmer *self, PyObject *args);

        static PyMethodDef t_BasqueStemmer__methods_[] = {
          DECLARE_METHOD(t_BasqueStemmer, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_BasqueStemmer, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_BasqueStemmer, equals, METH_VARARGS),
          DECLARE_METHOD(t_BasqueStemmer, hashCode, METH_VARARGS),
          DECLARE_METHOD(t_BasqueStemmer, stem, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        static PyType_Slot PY_TYPE_SLOTS(BasqueStemmer)[] = {
          { Py_tp_methods, t_BasqueStemmer__methods_ },
          { Py_tp_init, (void *) t_BasqueStemmer_init_ },
          { 0, NULL }
        };

        static PyType_Def *PY_TYPE_BASES(BasqueStemmer)[] = {
          &PY_TYPE_DEF(::org::tartarus::snowball::SnowballProgram),
          NULL
        };

        DEFINE_TYPE(BasqueStemmer, t_BasqueStemmer, BasqueStemmer);

        void t_BasqueStemmer::install(PyObject *module)
        {
          installType(&PY_TYPE(BasqueStemmer), &PY_TYPE_DEF(BasqueStemmer), module, "BasqueStemmer", 0);
        }

        void t_BasqueStemmer::initialize(PyObject *module)
        {
          PyObject_SetAttrString((PyObject *) PY_TYPE(BasqueStemmer), "class_", make_descriptor(BasqueStemmer::initializeClass, 1));
          PyObject_SetAttrString((PyObject *) PY_TYPE(BasqueStemmer), "wrapfn_", make_descriptor(t_BasqueStemmer::wrap_jobject));
          PyObject_SetAttrString((PyObject *) PY_TYPE(BasqueStemmer), "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_BasqueStemmer_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, BasqueStemmer::initializeClass, 1)))
            return NULL;
          return t_BasqueStemmer::wrap_Object(BasqueStemmer(((t_BasqueStemmer *) arg)->object.this$));
        }
        static PyObject *t_BasqueStemmer_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, BasqueStemmer::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_BasqueStemmer_init_(t_BasqueStemmer *self, PyObject *args, PyObject *kwds)
        {
          BasqueStemmer object((jobject) NULL);

          INT_CALL(object = BasqueStemmer());
          self->object = object;

          return 0;
        }

        static PyObject *t_BasqueStemmer_equals(t_BasqueStemmer *self, PyObject *args)
        {
          ::java::lang::Object a0((jobject) NULL);
          jboolean result;

          if (!parseArgs(args, "o", &a0))
          {
            OBJ_CALL(result = self->object.equals(a0));
            Py_RETURN_BOOL(result);
          }

          return callSuper(PY_TYPE(BasqueStemmer), (PyObject *) self, "equals", args, 2);
        }

        static PyObject *t_BasqueStemmer_hashCode(t_BasqueStemmer *self, PyObject *args)
        {
          jint result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.hashCode());
            return PyLong_FromLong((long) result);
          }

          return callSuper(PY_TYPE(BasqueStemmer), (PyObject *) self, "hashCode", args, 2);
        }

        static PyObject *t_BasqueStemmer_stem(t_BasqueStemmer *self, PyObject *args)
        {
          jboolean result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.stem());
            Py_RETURN_BOOL(result);
          }

          return callSuper(PY_TYPE(BasqueStemmer), (PyObject *) self, "stem", args, 2);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/suggest/document/CompletionQuery.h"
#include "org/apache/lucene/index/IndexReader.h"
#include "org/apache/lucene/index/Term.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/search/suggest/BitsProducer.h"
#include "java/lang/String.h"
#include "java/io/IOException.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace suggest {
          namespace document {

            ::java::lang::Class *CompletionQuery::class$ = NULL;
            jmethodID *CompletionQuery::mids$ = NULL;
            bool CompletionQuery::live$ = false;

            jclass CompletionQuery::initializeClass(bool getOnly)
            {
              if (getOnly)
                return (jclass) (live$ ? class$->this$ : NULL);
              if (class$ == NULL)
              {
                jclass cls = (jclass) env->findClass("org/apache/lucene/search/suggest/document/CompletionQuery");

                mids$ = new jmethodID[max_mid];
                mids$[mid_getField_db9b55ba01e03e4b] = env->getMethodID(cls, "getField", "()Ljava/lang/String;");
                mids$[mid_getFilter_127f94edcd50df50] = env->getMethodID(cls, "getFilter", "()Lorg/apache/lucene/search/suggest/BitsProducer;");
                mids$[mid_getTerm_5e734526802c58d9] = env->getMethodID(cls, "getTerm", "()Lorg/apache/lucene/index/Term;");
                mids$[mid_rewrite_bb52f19a8254555c] = env->getMethodID(cls, "rewrite", "(Lorg/apache/lucene/index/IndexReader;)Lorg/apache/lucene/search/Query;");
                mids$[mid_toString_9bfa75c9f141b67f] = env->getMethodID(cls, "toString", "(Ljava/lang/String;)Ljava/lang/String;");

                class$ = new ::java::lang::Class(cls);
                live$ = true;
              }
              return (jclass) class$->this$;
            }

            ::java::lang::String CompletionQuery::getField() const
            {
              return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_getField_db9b55ba01e03e4b]));
            }

            ::org::apache::lucene::search::suggest::BitsProducer CompletionQuery::getFilter() const
            {
              return ::org::apache::lucene::search::suggest::BitsProducer(env->callObjectMethod(this$, mids$[mid_getFilter_127f94edcd50df50]));
            }

            ::org::apache::lucene::index::Term CompletionQuery::getTerm() const
            {
              return ::org::apache::lucene::index::Term(env->callObjectMethod(this$, mids$[mid_getTerm_5e734526802c58d9]));
            }

            ::org::apache::lucene::search::Query CompletionQuery::rewrite(const ::org::apache::lucene::index::IndexReader & a0) const
            {
              return ::org::apache::lucene::search::Query(env->callObjectMethod(this$, mids$[mid_rewrite_bb52f19a8254555c], a0.this$));
            }

            ::java::lang::String CompletionQuery::toString(const ::java::lang::String & a0) const
            {
              return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_9bfa75c9f141b67f], a0.this$));
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace suggest {
          namespace document {
            static PyObject *t_CompletionQuery_cast_(PyTypeObject *type, PyObject *arg);
            static PyObject *t_CompletionQuery_instance_(PyTypeObject *type, PyObject *arg);
            static PyObject *t_CompletionQuery_getField(t_CompletionQuery *self);
            static PyObject *t_CompletionQuery_getFilter(t_CompletionQuery *self);
            static PyObject *t_CompletionQuery_getTerm(t_CompletionQuery *self);
            static PyObject *t_CompletionQuery_rewrite(t_CompletionQuery *self, PyObject *args);
            static PyObject *t_CompletionQuery_toString(t_CompletionQuery *self, PyObject *args);
            static PyObject *t_CompletionQuery_get__field(t_CompletionQuery *self, void *data);
            static PyObject *t_CompletionQuery_get__filter(t_CompletionQuery *self, void *data);
            static PyObject *t_CompletionQuery_get__term(t_CompletionQuery *self, void *data);
            static PyGetSetDef t_CompletionQuery__fields_[] = {
              DECLARE_GET_FIELD(t_CompletionQuery, field),
              DECLARE_GET_FIELD(t_CompletionQuery, filter),
              DECLARE_GET_FIELD(t_CompletionQuery, term),
              { NULL, NULL, NULL, NULL, NULL }
            };

            static PyMethodDef t_CompletionQuery__methods_[] = {
              DECLARE_METHOD(t_CompletionQuery, cast_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_CompletionQuery, instance_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_CompletionQuery, getField, METH_NOARGS),
              DECLARE_METHOD(t_CompletionQuery, getFilter, METH_NOARGS),
              DECLARE_METHOD(t_CompletionQuery, getTerm, METH_NOARGS),
              DECLARE_METHOD(t_CompletionQuery, rewrite, METH_VARARGS),
              DECLARE_METHOD(t_CompletionQuery, toString, METH_VARARGS),
              { NULL, NULL, 0, NULL }
            };

            static PyType_Slot PY_TYPE_SLOTS(CompletionQuery)[] = {
              { Py_tp_methods, t_CompletionQuery__methods_ },
              { Py_tp_init, (void *) abstract_init },
              { Py_tp_getset, t_CompletionQuery__fields_ },
              { 0, NULL }
            };

            static PyType_Def *PY_TYPE_BASES(CompletionQuery)[] = {
              &PY_TYPE_DEF(::org::apache::lucene::search::Query),
              NULL
            };

            DEFINE_TYPE(CompletionQuery, t_CompletionQuery, CompletionQuery);

            void t_CompletionQuery::install(PyObject *module)
            {
              installType(&PY_TYPE(CompletionQuery), &PY_TYPE_DEF(CompletionQuery), module, "CompletionQuery", 0);
            }

            void t_CompletionQuery::initialize(PyObject *module)
            {
              PyObject_SetAttrString((PyObject *) PY_TYPE(CompletionQuery), "class_", make_descriptor(CompletionQuery::initializeClass, 1));
              PyObject_SetAttrString((PyObject *) PY_TYPE(CompletionQuery), "wrapfn_", make_descriptor(t_CompletionQuery::wrap_jobject));
              PyObject_SetAttrString((PyObject *) PY_TYPE(CompletionQuery), "boxfn_", make_descriptor(boxObject));
            }

            static PyObject *t_CompletionQuery_cast_(PyTypeObject *type, PyObject *arg)
            {
              if (!(arg = castCheck(arg, CompletionQuery::initializeClass, 1)))
                return NULL;
              return t_CompletionQuery::wrap_Object(CompletionQuery(((t_CompletionQuery *) arg)->object.this$));
            }
            static PyObject *t_CompletionQuery_instance_(PyTypeObject *type, PyObject *arg)
            {
              if (!castCheck(arg, CompletionQuery::initializeClass, 0))
                Py_RETURN_FALSE;
              Py_RETURN_TRUE;
            }

            static PyObject *t_CompletionQuery_getField(t_CompletionQuery *self)
            {
              ::java::lang::String result((jobject) NULL);
              OBJ_CALL(result = self->object.getField());
              return j2p(result);
            }

            static PyObject *t_CompletionQuery_getFilter(t_CompletionQuery *self)
            {
              ::org::apache::lucene::search::suggest::BitsProducer result((jobject) NULL);
              OBJ_CALL(result = self->object.getFilter());
              return ::org::apache::lucene::search::suggest::t_BitsProducer::wrap_Object(result);
            }

            static PyObject *t_CompletionQuery_getTerm(t_CompletionQuery *self)
            {
              ::org::apache::lucene::index::Term result((jobject) NULL);
              OBJ_CALL(result = self->object.getTerm());
              return ::org::apache::lucene::index::t_Term::wrap_Object(result);
            }

            static PyObject *t_CompletionQuery_rewrite(t_CompletionQuery *self, PyObject *args)
            {
              ::org::apache::lucene::index::IndexReader a0((jobject) NULL);
              ::org::apache::lucene::search::Query result((jobject) NULL);

              if (!parseArgs(args, "k", ::org::apache::lucene::index::IndexReader::initializeClass, &a0))
              {
                OBJ_CALL(result = self->object.rewrite(a0));
                return ::org::apache::lucene::search::t_Query::wrap_Object(result);
              }

              return callSuper(PY_TYPE(CompletionQuery), (PyObject *) self, "rewrite", args, 2);
            }

            static PyObject *t_CompletionQuery_toString(t_CompletionQuery *self, PyObject *args)
            {
              ::java::lang::String a0((jobject) NULL);
              ::java::lang::String result((jobject) NULL);

              if (!parseArgs(args, "s", &a0))
              {
                OBJ_CALL(result = self->object.toString(a0));
                return j2p(result);
              }

              return callSuper(PY_TYPE(CompletionQuery), (PyObject *) self, "toString", args, 2);
            }

            static PyObject *t_CompletionQuery_get__field(t_CompletionQuery *self, void *data)
            {
              ::java::lang::String value((jobject) NULL);
              OBJ_CALL(value = self->object.getField());
              return j2p(value);
            }

            static PyObject *t_CompletionQuery_get__filter(t_CompletionQuery *self, void *data)
            {
              ::org::apache::lucene::search::suggest::BitsProducer value((jobject) NULL);
              OBJ_CALL(value = self->object.getFilter());
              return ::org::apache::lucene::search::suggest::t_BitsProducer::wrap_Object(value);
            }

            static PyObject *t_CompletionQuery_get__term(t_CompletionQuery *self, void *data)
            {
              ::org::apache::lucene::index::Term value((jobject) NULL);
              OBJ_CALL(value = self->object.getTerm());
              return ::org::apache::lucene::index::t_Term::wrap_Object(value);
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "java/lang/Number.h"
#include "java/io/Serializable.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace java {
  namespace lang {

    ::java::lang::Class *Number::class$ = NULL;
    jmethodID *Number::mids$ = NULL;
    bool Number::live$ = false;

    jclass Number::initializeClass(bool getOnly)
    {
      if (getOnly)
        return (jclass) (live$ ? class$->this$ : NULL);
      if (class$ == NULL)
      {
        jclass cls = (jclass) env->findClass("java/lang/Number");

        mids$ = new jmethodID[max_mid];
        mids$[mid_init$_f2cc1bce94666404] = env->getMethodID(cls, "<init>", "()V");
        mids$[mid_byteValue_871cd52a74f26213] = env->getMethodID(cls, "byteValue", "()B");
        mids$[mid_doubleValue_8c74b787998ce4bc] = env->getMethodID(cls, "doubleValue", "()D");
        mids$[mid_floatValue_58aec2b64dff50c8] = env->getMethodID(cls, "floatValue", "()F");
        mids$[mid_intValue_9972fcc56b44e79d] = env->getMethodID(cls, "intValue", "()I");
        mids$[mid_longValue_2e5ae9edcb9b072f] = env->getMethodID(cls, "longValue", "()J");
        mids$[mid_shortValue_ec20af88366b851e] = env->getMethodID(cls, "shortValue", "()S");

        class$ = new ::java::lang::Class(cls);
        live$ = true;
      }
      return (jclass) class$->this$;
    }

    Number::Number() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_f2cc1bce94666404)) {}

    jbyte Number::byteValue() const
    {
      return env->callByteMethod(this$, mids$[mid_byteValue_871cd52a74f26213]);
    }

    jdouble Number::doubleValue() const
    {
      return env->callDoubleMethod(this$, mids$[mid_doubleValue_8c74b787998ce4bc]);
    }

    jfloat Number::floatValue() const
    {
      return env->callFloatMethod(this$, mids$[mid_floatValue_58aec2b64dff50c8]);
    }

    jint Number::intValue() const
    {
      return env->callIntMethod(this$, mids$[mid_intValue_9972fcc56b44e79d]);
    }

    jlong Number::longValue() const
    {
      return env->callLongMethod(this$, mids$[mid_longValue_2e5ae9edcb9b072f]);
    }

    jshort Number::shortValue() const
    {
      return env->callShortMethod(this$, mids$[mid_shortValue_ec20af88366b851e]);
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace java {
  namespace lang {
    static PyObject *t_Number_cast_(PyTypeObject *type, PyObject *arg);
    static PyObject *t_Number_instance_(PyTypeObject *type, PyObject *arg);
    static int t_Number_init_(t_Number *self, PyObject *args, PyObject *kwds);
    static PyObject *t_Number_byteValue(t_Number *self);
    static PyObject *t_Number_doubleValue(t_Number *self);
    static PyObject *t_Number_floatValue(t_Number *self);
    static PyObject *t_Number_intValue(t_Number *self);
    static PyObject *t_Number_longValue(t_Number *self);
    static PyObject *t_Number_shortValue(t_Number *self);

    static PyMethodDef t_Number__methods_[] = {
      DECLARE_METHOD(t_Number, cast_, METH_O | METH_CLASS),
      DECLARE_METHOD(t_Number, instance_, METH_O | METH_CLASS),
      DECLARE_METHOD(t_Number, byteValue, METH_NOARGS),
      DECLARE_METHOD(t_Number, doubleValue, METH_NOARGS),
      DECLARE_METHOD(t_Number, floatValue, METH_NOARGS),
      DECLARE_METHOD(t_Number, intValue, METH_NOARGS),
      DECLARE_METHOD(t_Number, longValue, METH_NOARGS),
      DECLARE_METHOD(t_Number, shortValue, METH_NOARGS),
      { NULL, NULL, 0, NULL }
    };

    static PyType_Slot PY_TYPE_SLOTS(Number)[] = {
      { Py_tp_methods, t_Number__methods_ },
      { Py_tp_init, (void *) t_Number_init_ },
      { 0, NULL }
    };

    static PyType_Def *PY_TYPE_BASES(Number)[] = {
      &PY_TYPE_DEF(::java::lang::Object),
      NULL
    };

    DEFINE_TYPE(Number, t_Number, Number);

    void t_Number::install(PyObject *module)
    {
      installType(&PY_TYPE(Number), &PY_TYPE_DEF(Number), module, "Number", 0);
    }

    void t_Number::initialize(PyObject *module)
    {
      PyObject_SetAttrString((PyObject *) PY_TYPE(Number), "class_", make_descriptor(Number::initializeClass, 1));
      PyObject_SetAttrString((PyObject *) PY_TYPE(Number), "wrapfn_", make_descriptor(t_Number::wrap_jobject));
      PyObject_SetAttrString((PyObject *) PY_TYPE(Number), "boxfn_", make_descriptor(boxObject));
    }

    static PyObject *t_Number_cast_(PyTypeObject *type, PyObject *arg)
    {
      if (!(arg = castCheck(arg, Number::initializeClass, 1)))
        return NULL;
      return t_Number::wrap_Object(Number(((t_Number *) arg)->object.this$));
    }
    static PyObject *t_Number_instance_(PyTypeObject *type, PyObject *arg)
    {
      if (!castCheck(arg, Number::initializeClass, 0))
        Py_RETURN_FALSE;
      Py_RETURN_TRUE;
    }

    static int t_Number_init_(t_Number *self, PyObject *args, PyObject *kwds)
    {
      Number object((jobject) NULL);

      INT_CALL(object = Number());
      self->object = object;

      return 0;
    }

    static PyObject *t_Number_byteValue(t_Number *self)
    {
      jbyte result;
      OBJ_CALL(result = self->object.byteValue());
      return PyLong_FromLong((long) result);
    }

    static PyObject *t_Number_doubleValue(t_Number *self)
    {
      jdouble result;
      OBJ_CALL(result = self->object.doubleValue());
      return PyFloat_FromDouble((double) result);
    }

    static PyObject *t_Number_floatValue(t_Number *self)
    {
      jfloat result;
      OBJ_CALL(result = self->object.floatValue());
      return PyFloat_FromDouble((double) result);
    }

    static PyObject *t_Number_intValue(t_Number *self)
    {
      jint result;
      OBJ_CALL(result = self->object.intValue());
      return PyLong_FromLong((long) result);
    }

    static PyObject *t_Number_longValue(t_Number *self)
    {
      jlong result;
      OBJ_CALL(result = self->object.longValue());
      return PyLong_FromLongLong((PY_LONG_LONG) result);
    }

    static PyObject *t_Number_shortValue(t_Number *self)
    {
      jshort result;
      OBJ_CALL(result = self->object.shortValue());
      return PyLong_FromLong((long) result);
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/codecs/bloom/FuzzySet$ContainsResult.h"
#include "java/lang/String.h"
#include "org/apache/lucene/codecs/bloom/FuzzySet$ContainsResult.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace codecs {
        namespace bloom {

          ::java::lang::Class *FuzzySet$ContainsResult::class$ = NULL;
          jmethodID *FuzzySet$ContainsResult::mids$ = NULL;
          bool FuzzySet$ContainsResult::live$ = false;
          FuzzySet$ContainsResult *FuzzySet$ContainsResult::MAYBE = NULL;
          FuzzySet$ContainsResult *FuzzySet$ContainsResult::NO = NULL;

          jclass FuzzySet$ContainsResult::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/codecs/bloom/FuzzySet$ContainsResult");

              mids$ = new jmethodID[max_mid];
              mids$[mid_valueOf_1bfb75237b095bf0] = env->getStaticMethodID(cls, "valueOf", "(Ljava/lang/String;)Lorg/apache/lucene/codecs/bloom/FuzzySet$ContainsResult;");
              mids$[mid_values_e3682583c4d1be18] = env->getStaticMethodID(cls, "values", "()[Lorg/apache/lucene/codecs/bloom/FuzzySet$ContainsResult;");

              class$ = new ::java::lang::Class(cls);
              cls = (jclass) class$->this$;

              MAYBE = new FuzzySet$ContainsResult(env->getStaticObjectField(cls, "MAYBE", "Lorg/apache/lucene/codecs/bloom/FuzzySet$ContainsResult;"));
              NO = new FuzzySet$ContainsResult(env->getStaticObjectField(cls, "NO", "Lorg/apache/lucene/codecs/bloom/FuzzySet$ContainsResult;"));
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          FuzzySet$ContainsResult FuzzySet$ContainsResult::valueOf(const ::java::lang::String & a0)
          {
            jclass cls = env->getClass(initializeClass);
            return FuzzySet$ContainsResult(env->callStaticObjectMethod(cls, mids$[mid_valueOf_1bfb75237b095bf0], a0.this$));
          }

          JArray< FuzzySet$ContainsResult > FuzzySet$ContainsResult::values()
          {
            jclass cls = env->getClass(initializeClass);
            return JArray< FuzzySet$ContainsResult >(env->callStaticObjectMethod(cls, mids$[mid_values_e3682583c4d1be18]));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace codecs {
        namespace bloom {
          static PyObject *t_FuzzySet$ContainsResult_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_FuzzySet$ContainsResult_instance_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_FuzzySet$ContainsResult_of_(t_FuzzySet$ContainsResult *self, PyObject *args);
          static PyObject *t_FuzzySet$ContainsResult_valueOf(PyTypeObject *type, PyObject *args);
          static PyObject *t_FuzzySet$ContainsResult_values(PyTypeObject *type);
          static PyObject *t_FuzzySet$ContainsResult_get__parameters_(t_FuzzySet$ContainsResult *self, void *data);
          static PyGetSetDef t_FuzzySet$ContainsResult__fields_[] = {
            DECLARE_GET_FIELD(t_FuzzySet$ContainsResult, parameters_),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_FuzzySet$ContainsResult__methods_[] = {
            DECLARE_METHOD(t_FuzzySet$ContainsResult, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_FuzzySet$ContainsResult, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_FuzzySet$ContainsResult, of_, METH_VARARGS),
            DECLARE_METHOD(t_FuzzySet$ContainsResult, valueOf, METH_VARARGS | METH_CLASS),
            DECLARE_METHOD(t_FuzzySet$ContainsResult, values, METH_NOARGS | METH_CLASS),
            { NULL, NULL, 0, NULL }
          };

          static PyType_Slot PY_TYPE_SLOTS(FuzzySet$ContainsResult)[] = {
            { Py_tp_methods, t_FuzzySet$ContainsResult__methods_ },
            { Py_tp_init, (void *) abstract_init },
            { Py_tp_getset, t_FuzzySet$ContainsResult__fields_ },
            { 0, NULL }
          };

          static PyType_Def *PY_TYPE_BASES(FuzzySet$ContainsResult)[] = {
            &PY_TYPE_DEF(::java::lang::Enum),
            NULL
          };

          DEFINE_TYPE(FuzzySet$ContainsResult, t_FuzzySet$ContainsResult, FuzzySet$ContainsResult);
          PyObject *t_FuzzySet$ContainsResult::wrap_Object(const FuzzySet$ContainsResult& object, PyTypeObject *p0)
          {
            PyObject *obj = t_FuzzySet$ContainsResult::wrap_Object(object);
            if (obj != NULL && obj != Py_None)
            {
              t_FuzzySet$ContainsResult *self = (t_FuzzySet$ContainsResult *) obj;
              self->parameters[0] = p0;
            }
            return obj;
          }

          PyObject *t_FuzzySet$ContainsResult::wrap_jobject(const jobject& object, PyTypeObject *p0)
          {
            PyObject *obj = t_FuzzySet$ContainsResult::wrap_jobject(object);
            if (obj != NULL && obj != Py_None)
            {
              t_FuzzySet$ContainsResult *self = (t_FuzzySet$ContainsResult *) obj;
              self->parameters[0] = p0;
            }
            return obj;
          }

          void t_FuzzySet$ContainsResult::install(PyObject *module)
          {
            installType(&PY_TYPE(FuzzySet$ContainsResult), &PY_TYPE_DEF(FuzzySet$ContainsResult), module, "FuzzySet$ContainsResult", 0);
          }

          void t_FuzzySet$ContainsResult::initialize(PyObject *module)
          {
            PyObject_SetAttrString((PyObject *) PY_TYPE(FuzzySet$ContainsResult), "class_", make_descriptor(FuzzySet$ContainsResult::initializeClass, 1));
            PyObject_SetAttrString((PyObject *) PY_TYPE(FuzzySet$ContainsResult), "wrapfn_", make_descriptor(t_FuzzySet$ContainsResult::wrap_jobject));
            PyObject_SetAttrString((PyObject *) PY_TYPE(FuzzySet$ContainsResult), "boxfn_", make_descriptor(boxObject));
            env->getClass(FuzzySet$ContainsResult::initializeClass);
            PyObject_SetAttrString((PyObject *) PY_TYPE(FuzzySet$ContainsResult), "MAYBE", make_descriptor(t_FuzzySet$ContainsResult::wrap_Object(*FuzzySet$ContainsResult::MAYBE)));
            PyObject_SetAttrString((PyObject *) PY_TYPE(FuzzySet$ContainsResult), "NO", make_descriptor(t_FuzzySet$ContainsResult::wrap_Object(*FuzzySet$ContainsResult::NO)));
          }

          static PyObject *t_FuzzySet$ContainsResult_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, FuzzySet$ContainsResult::initializeClass, 1)))
              return NULL;
            return t_FuzzySet$ContainsResult::wrap_Object(FuzzySet$ContainsResult(((t_FuzzySet$ContainsResult *) arg)->object.this$));
          }
          static PyObject *t_FuzzySet$ContainsResult_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, FuzzySet$ContainsResult::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static PyObject *t_FuzzySet$ContainsResult_of_(t_FuzzySet$ContainsResult *self, PyObject *args)
          {
            if (!parseArg(args, "T", 1, &(self->parameters)))
              Py_RETURN_SELF;
            return PyErr_SetArgsError((PyObject *) self, "of_", args);
          }

          static PyObject *t_FuzzySet$ContainsResult_valueOf(PyTypeObject *type, PyObject *args)
          {
            ::java::lang::String a0((jobject) NULL);
            FuzzySet$ContainsResult result((jobject) NULL);

            if (!parseArgs(args, "s", &a0))
            {
              OBJ_CALL(result = ::org::apache::lucene::codecs::bloom::FuzzySet$ContainsResult::valueOf(a0));
              return t_FuzzySet$ContainsResult::wrap_Object(result);
            }

            return callSuper(type, "valueOf", args, 2);
          }

          static PyObject *t_FuzzySet$ContainsResult_values(PyTypeObject *type)
          {
            JArray< FuzzySet$ContainsResult > result((jobject) NULL);
            OBJ_CALL(result = ::org::apache::lucene::codecs::bloom::FuzzySet$ContainsResult::values());
            return JArray<jobject>(result.this$).wrap(t_FuzzySet$ContainsResult::wrap_jobject);
          }
          static PyObject *t_FuzzySet$ContainsResult_get__parameters_(t_FuzzySet$ContainsResult *self, void *data)
          {
            return typeParameters(self->parameters, sizeof(self->parameters));
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/util/VirtualMethod.h"
#include "java/lang/String.h"
#include "org/apache/lucene/util/VirtualMethod.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {

        ::java::lang::Class *VirtualMethod::class$ = NULL;
        jmethodID *VirtualMethod::mids$ = NULL;
        bool VirtualMethod::live$ = false;

        jclass VirtualMethod::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/util/VirtualMethod");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_964f65252724d9c3] = env->getMethodID(cls, "<init>", "(Ljava/lang/Class;Ljava/lang/String;[Ljava/lang/Class;)V");
            mids$[mid_compareImplementationDistance_3605bae2696bde80] = env->getStaticMethodID(cls, "compareImplementationDistance", "(Ljava/lang/Class;Lorg/apache/lucene/util/VirtualMethod;Lorg/apache/lucene/util/VirtualMethod;)I");
            mids$[mid_getImplementationDistance_875e194d815181e4] = env->getMethodID(cls, "getImplementationDistance", "(Ljava/lang/Class;)I");
            mids$[mid_isOverriddenAsOf_a895c7f53785ebe6] = env->getMethodID(cls, "isOverriddenAsOf", "(Ljava/lang/Class;)Z");

            class$ = new ::java::lang::Class(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        VirtualMethod::VirtualMethod(const ::java::lang::Class & a0, const ::java::lang::String & a1, const JArray< ::java::lang::Class > & a2) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_964f65252724d9c3, a0.this$, a1.this$, a2.this$)) {}

        jint VirtualMethod::compareImplementationDistance(const ::java::lang::Class & a0, const VirtualMethod & a1, const VirtualMethod & a2)
        {
          jclass cls = env->getClass(initializeClass);
          return env->callStaticIntMethod(cls, mids$[mid_compareImplementationDistance_3605bae2696bde80], a0.this$, a1.this$, a2.this$);
        }

        jint VirtualMethod::getImplementationDistance(const ::java::lang::Class & a0) const
        {
          return env->callIntMethod(this$, mids$[mid_getImplementationDistance_875e194d815181e4], a0.this$);
        }

        jboolean VirtualMethod::isOverriddenAsOf(const ::java::lang::Class & a0) const
        {
          return env->callBooleanMethod(this$, mids$[mid_isOverriddenAsOf_a895c7f53785ebe6], a0.this$);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        static PyObject *t_VirtualMethod_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_VirtualMethod_instance_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_VirtualMethod_of_(t_VirtualMethod *self, PyObject *args);
        static int t_VirtualMethod_init_(t_VirtualMethod *self, PyObject *args, PyObject *kwds);
        static PyObject *t_VirtualMethod_compareImplementationDistance(PyTypeObject *type, PyObject *args);
        static PyObject *t_VirtualMethod_getImplementationDistance(t_VirtualMethod *self, PyObject *arg);
        static PyObject *t_VirtualMethod_isOverriddenAsOf(t_VirtualMethod *self, PyObject *arg);
        static PyObject *t_VirtualMethod_get__parameters_(t_VirtualMethod *self, void *data);
        static PyGetSetDef t_VirtualMethod__fields_[] = {
          DECLARE_GET_FIELD(t_VirtualMethod, parameters_),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_VirtualMethod__methods_[] = {
          DECLARE_METHOD(t_VirtualMethod, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_VirtualMethod, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_VirtualMethod, of_, METH_VARARGS),
          DECLARE_METHOD(t_VirtualMethod, compareImplementationDistance, METH_VARARGS | METH_CLASS),
          DECLARE_METHOD(t_VirtualMethod, getImplementationDistance, METH_O),
          DECLARE_METHOD(t_VirtualMethod, isOverriddenAsOf, METH_O),
          { NULL, NULL, 0, NULL }
        };

        static PyType_Slot PY_TYPE_SLOTS(VirtualMethod)[] = {
          { Py_tp_methods, t_VirtualMethod__methods_ },
          { Py_tp_init, (void *) t_VirtualMethod_init_ },
          { Py_tp_getset, t_VirtualMethod__fields_ },
          { 0, NULL }
        };

        static PyType_Def *PY_TYPE_BASES(VirtualMethod)[] = {
          &PY_TYPE_DEF(::java::lang::Object),
          NULL
        };

        DEFINE_TYPE(VirtualMethod, t_VirtualMethod, VirtualMethod);
        PyObject *t_VirtualMethod::wrap_Object(const VirtualMethod& object, PyTypeObject *p0)
        {
          PyObject *obj = t_VirtualMethod::wrap_Object(object);
          if (obj != NULL && obj != Py_None)
          {
            t_VirtualMethod *self = (t_VirtualMethod *) obj;
            self->parameters[0] = p0;
          }
          return obj;
        }

        PyObject *t_VirtualMethod::wrap_jobject(const jobject& object, PyTypeObject *p0)
        {
          PyObject *obj = t_VirtualMethod::wrap_jobject(object);
          if (obj != NULL && obj != Py_None)
          {
            t_VirtualMethod *self = (t_VirtualMethod *) obj;
            self->parameters[0] = p0;
          }
          return obj;
        }

        void t_VirtualMethod::install(PyObject *module)
        {
          installType(&PY_TYPE(VirtualMethod), &PY_TYPE_DEF(VirtualMethod), module, "VirtualMethod", 0);
        }

        void t_VirtualMethod::initialize(PyObject *module)
        {
          PyObject_SetAttrString((PyObject *) PY_TYPE(VirtualMethod), "class_", make_descriptor(VirtualMethod::initializeClass, 1));
          PyObject_SetAttrString((PyObject *) PY_TYPE(VirtualMethod), "wrapfn_", make_descriptor(t_VirtualMethod::wrap_jobject));
          PyObject_SetAttrString((PyObject *) PY_TYPE(VirtualMethod), "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_VirtualMethod_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, VirtualMethod::initializeClass, 1)))
            return NULL;
          return t_VirtualMethod::wrap_Object(VirtualMethod(((t_VirtualMethod *) arg)->object.this$));
        }
        static PyObject *t_VirtualMethod_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, VirtualMethod::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static PyObject *t_VirtualMethod_of_(t_VirtualMethod *self, PyObject *args)
        {
          if (!parseArg(args, "T", 1, &(self->parameters)))
            Py_RETURN_SELF;
          return PyErr_SetArgsError((PyObject *) self, "of_", args);
        }

        static int t_VirtualMethod_init_(t_VirtualMethod *self, PyObject *args, PyObject *kwds)
        {
          ::java::lang::Class a0((jobject) NULL);
          PyTypeObject **p0;
          ::java::lang::String a1((jobject) NULL);
          JArray< ::java::lang::Class > a2((jobject) NULL);
          PyTypeObject **p2;
          VirtualMethod object((jobject) NULL);

          if (!parseArgs(args, "Ks[K", ::java::lang::Class::initializeClass, ::java::lang::Class::initializeClass, &a0, &p0, ::java::lang::t_Class::parameters_, &a1, &a2, &p2, ::java::lang::t_Class::parameters_))
          {
            INT_CALL(object = VirtualMethod(a0, a1, a2));
            self->object = object;
          }
          else
          {
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }

        static PyObject *t_VirtualMethod_compareImplementationDistance(PyTypeObject *type, PyObject *args)
        {
          ::java::lang::Class a0((jobject) NULL);
          PyTypeObject **p0;
          VirtualMethod a1((jobject) NULL);
          PyTypeObject **p1;
          VirtualMethod a2((jobject) NULL);
          PyTypeObject **p2;
          jint result;

          if (!parseArgs(args, "KKK", ::java::lang::Class::initializeClass, VirtualMethod::initializeClass, VirtualMethod::initializeClass, &a0, &p0, ::java::lang::t_Class::parameters_, &a1, &p1, t_VirtualMethod::parameters_, &a2, &p2, t_VirtualMethod::parameters_))
          {
            OBJ_CALL(result = ::org::apache::lucene::util::VirtualMethod::compareImplementationDistance(a0, a1, a2));
            return PyLong_FromLong((long) result);
          }

          PyErr_SetArgsError(type, "compareImplementationDistance", args);
          return NULL;
        }

        static PyObject *t_VirtualMethod_getImplementationDistance(t_VirtualMethod *self, PyObject *arg)
        {
          ::java::lang::Class a0((jobject) NULL);
          PyTypeObject **p0;
          jint result;

          if (!parseArg(arg, "K", ::java::lang::Class::initializeClass, &a0, &p0, ::java::lang::t_Class::parameters_))
          {
            OBJ_CALL(result = self->object.getImplementationDistance(a0));
            return PyLong_FromLong((long) result);
          }

          PyErr_SetArgsError((PyObject *) self, "getImplementationDistance", arg);
          return NULL;
        }

        static PyObject *t_VirtualMethod_isOverriddenAsOf(t_VirtualMethod *self, PyObject *arg)
        {
          ::java::lang::Class a0((jobject) NULL);
          PyTypeObject **p0;
          jboolean result;

          if (!parseArg(arg, "K", ::java::lang::Class::initializeClass, &a0, &p0, ::java::lang::t_Class::parameters_))
          {
            OBJ_CALL(result = self->object.isOverriddenAsOf(a0));
            Py_RETURN_BOOL(result);
          }

          PyErr_SetArgsError((PyObject *) self, "isOverriddenAsOf", arg);
          return NULL;
        }
        static PyObject *t_VirtualMethod_get__parameters_(t_VirtualMethod *self, void *data)
        {
          return typeParameters(self->parameters, sizeof(self->parameters));
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/pylucene/analysis/PythonTokenFilter.h"
#include "java/io/IOException.h"
#include "java/lang/Throwable.h"
#include "org/apache/lucene/analysis/TokenStream.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace pylucene {
      namespace analysis {

        ::java::lang::Class *PythonTokenFilter::class$ = NULL;
        jmethodID *PythonTokenFilter::mids$ = NULL;
        bool PythonTokenFilter::live$ = false;

        jclass PythonTokenFilter::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/pylucene/analysis/PythonTokenFilter");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_c26756868a754f4e] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/analysis/TokenStream;)V");
            mids$[mid_finalize_f2cc1bce94666404] = env->getMethodID(cls, "finalize", "()V");
            mids$[mid_incrementToken_8454bd5aa23fd11e] = env->getMethodID(cls, "incrementToken", "()Z");
            mids$[mid_pythonDecRef_f2cc1bce94666404] = env->getMethodID(cls, "pythonDecRef", "()V");
            mids$[mid_pythonExtension_2e5ae9edcb9b072f] = env->getMethodID(cls, "pythonExtension", "()J");
            mids$[mid_pythonExtension_9c778c9bce6694df] = env->getMethodID(cls, "pythonExtension", "(J)V");

            class$ = new ::java::lang::Class(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        PythonTokenFilter::PythonTokenFilter(const ::org::apache::lucene::analysis::TokenStream & a0) : ::org::apache::lucene::analysis::TokenFilter(env->newObject(initializeClass, &mids$, mid_init$_c26756868a754f4e, a0.this$)) {}

        void PythonTokenFilter::finalize() const
        {
          env->callVoidMethod(this$, mids$[mid_finalize_f2cc1bce94666404]);
        }

        jlong PythonTokenFilter::pythonExtension() const
        {
          return env->callLongMethod(this$, mids$[mid_pythonExtension_2e5ae9edcb9b072f]);
        }

        void PythonTokenFilter::pythonExtension(jlong a0) const
        {
          env->callVoidMethod(this$, mids$[mid_pythonExtension_9c778c9bce6694df], a0);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace pylucene {
      namespace analysis {
        static PyObject *t_PythonTokenFilter_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_PythonTokenFilter_instance_(PyTypeObject *type, PyObject *arg);
        static int t_PythonTokenFilter_init_(t_PythonTokenFilter *self, PyObject *args, PyObject *kwds);
        static PyObject *t_PythonTokenFilter_finalize(t_PythonTokenFilter *self);
        static PyObject *t_PythonTokenFilter_pythonExtension(t_PythonTokenFilter *self, PyObject *args);
        static jboolean JNICALL t_PythonTokenFilter_incrementToken0(JNIEnv *jenv, jobject jobj);
        static void JNICALL t_PythonTokenFilter_pythonDecRef1(JNIEnv *jenv, jobject jobj);
        static PyObject *t_PythonTokenFilter_get__self(t_PythonTokenFilter *self, void *data);
        static PyGetSetDef t_PythonTokenFilter__fields_[] = {
          DECLARE_GET_FIELD(t_PythonTokenFilter, self),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_PythonTokenFilter__methods_[] = {
          DECLARE_METHOD(t_PythonTokenFilter, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_PythonTokenFilter, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_PythonTokenFilter, finalize, METH_NOARGS),
          DECLARE_METHOD(t_PythonTokenFilter, pythonExtension, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        static PyType_Slot PY_TYPE_SLOTS(PythonTokenFilter)[] = {
          { Py_tp_methods, t_PythonTokenFilter__methods_ },
          { Py_tp_init, (void *) t_PythonTokenFilter_init_ },
          { Py_tp_getset, t_PythonTokenFilter__fields_ },
          { 0, NULL }
        };

        static PyType_Def *PY_TYPE_BASES(PythonTokenFilter)[] = {
          &PY_TYPE_DEF(::org::apache::lucene::analysis::TokenFilter),
          NULL
        };

        DEFINE_TYPE(PythonTokenFilter, t_PythonTokenFilter, PythonTokenFilter);

        void t_PythonTokenFilter::install(PyObject *module)
        {
          installType(&PY_TYPE(PythonTokenFilter), &PY_TYPE_DEF(PythonTokenFilter), module, "PythonTokenFilter", 1);
        }

        void t_PythonTokenFilter::initialize(PyObject *module)
        {
          PyObject_SetAttrString((PyObject *) PY_TYPE(PythonTokenFilter), "class_", make_descriptor(PythonTokenFilter::initializeClass, 1));
          PyObject_SetAttrString((PyObject *) PY_TYPE(PythonTokenFilter), "wrapfn_", make_descriptor(t_PythonTokenFilter::wrap_jobject));
          PyObject_SetAttrString((PyObject *) PY_TYPE(PythonTokenFilter), "boxfn_", make_descriptor(boxObject));
          jclass cls = env->getClass(PythonTokenFilter::initializeClass);
          JNINativeMethod methods[] = {
            { "incrementToken", "()Z", (void *) t_PythonTokenFilter_incrementToken0 },
            { "pythonDecRef", "()V", (void *) t_PythonTokenFilter_pythonDecRef1 },
          };
          env->registerNatives(cls, methods, 2);
        }

        static PyObject *t_PythonTokenFilter_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, PythonTokenFilter::initializeClass, 1)))
            return NULL;
          return t_PythonTokenFilter::wrap_Object(PythonTokenFilter(((t_PythonTokenFilter *) arg)->object.this$));
        }
        static PyObject *t_PythonTokenFilter_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, PythonTokenFilter::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_PythonTokenFilter_init_(t_PythonTokenFilter *self, PyObject *args, PyObject *kwds)
        {
          ::org::apache::lucene::analysis::TokenStream a0((jobject) NULL);
          PythonTokenFilter object((jobject) NULL);

          if (!parseArgs(args, "k", ::org::apache::lucene::analysis::TokenStream::initializeClass, &a0))
          {
            INT_CALL(object = PythonTokenFilter(a0));
            self->object = object;
          }
          else
          {
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          Py_INCREF((PyObject *) self);
          self->object.pythonExtension((jlong) (Py_intptr_t) (void *) self);

          return 0;
        }

        static PyObject *t_PythonTokenFilter_finalize(t_PythonTokenFilter *self)
        {
          OBJ_CALL(self->object.finalize());
          Py_RETURN_NONE;
        }

        static PyObject *t_PythonTokenFilter_pythonExtension(t_PythonTokenFilter *self, PyObject *args)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 0:
            {
              jlong result;
              OBJ_CALL(result = self->object.pythonExtension());
              return PyLong_FromLongLong((PY_LONG_LONG) result);
            }
            break;
           case 1:
            {
              jlong a0;

              if (!parseArgs(args, "J", &a0))
              {
                OBJ_CALL(self->object.pythonExtension(a0));
                Py_RETURN_NONE;
              }
            }
          }

          PyErr_SetArgsError((PyObject *) self, "pythonExtension", args);
          return NULL;
        }

        static jboolean JNICALL t_PythonTokenFilter_incrementToken0(JNIEnv *jenv, jobject jobj)
        {
          jlong ptr = jenv->CallLongMethod(jobj, PythonTokenFilter::mids$[PythonTokenFilter::mid_pythonExtension_2e5ae9edcb9b072f]);
          PyObject *obj = (PyObject *) (Py_intptr_t) ptr;
          PythonGIL gil(jenv);
          jboolean value;
          PyObject *result = PyObject_CallMethod(obj, "incrementToken", "");
          if (!result)
            throwPythonError();
          else if (parseArg(result, "Z", &value))
          {
            throwTypeError("incrementToken", result);
            Py_DECREF(result);
          }
          else
          {
            Py_DECREF(result);
            return value;
          }

          return (jboolean) 0;
        }

        static void JNICALL t_PythonTokenFilter_pythonDecRef1(JNIEnv *jenv, jobject jobj)
        {
          jlong ptr = jenv->CallLongMethod(jobj, PythonTokenFilter::mids$[PythonTokenFilter::mid_pythonExtension_2e5ae9edcb9b072f]);
          PyObject *obj = (PyObject *) (Py_intptr_t) ptr;

          if (obj != NULL)
          {
            jenv->CallVoidMethod(jobj, PythonTokenFilter::mids$[PythonTokenFilter::mid_pythonExtension_9c778c9bce6694df], (jlong) 0);
            env->finalizeObject(jenv, obj);
          }
        }

        static PyObject *t_PythonTokenFilter_get__self(t_PythonTokenFilter *self, void *data)
        {
          jlong ptr;
          OBJ_CALL(ptr = self->object.pythonExtension());
          PyObject *obj = (PyObject *) (Py_intptr_t) ptr;

          if (obj != NULL)
          {
            Py_INCREF(obj);
            return obj;
          }
          else
            Py_RETURN_NONE;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/ja/Token.h"
#include "org/apache/lucene/analysis/ja/dict/Dictionary.h"
#include "java/lang/String.h"
#include "org/apache/lucene/analysis/ja/JapaneseTokenizer$Type.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace ja {

          ::java::lang::Class *Token::class$ = NULL;
          jmethodID *Token::mids$ = NULL;
          bool Token::live$ = false;

          jclass Token::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/ja/Token");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_fbf39a41c44c2038] = env->getMethodID(cls, "<init>", "(I[CIILorg/apache/lucene/analysis/ja/JapaneseTokenizer$Type;ILorg/apache/lucene/analysis/ja/dict/Dictionary;)V");
              mids$[mid_getBaseForm_db9b55ba01e03e4b] = env->getMethodID(cls, "getBaseForm", "()Ljava/lang/String;");
              mids$[mid_getInflectionForm_db9b55ba01e03e4b] = env->getMethodID(cls, "getInflectionForm", "()Ljava/lang/String;");
              mids$[mid_getInflectionType_db9b55ba01e03e4b] = env->getMethodID(cls, "getInflectionType", "()Ljava/lang/String;");
              mids$[mid_getLength_9972fcc56b44e79d] = env->getMethodID(cls, "getLength", "()I");
              mids$[mid_getOffset_9972fcc56b44e79d] = env->getMethodID(cls, "getOffset", "()I");
              mids$[mid_getPartOfSpeech_db9b55ba01e03e4b] = env->getMethodID(cls, "getPartOfSpeech", "()Ljava/lang/String;");
              mids$[mid_getPosition_9972fcc56b44e79d] = env->getMethodID(cls, "getPosition", "()I");
              mids$[mid_getPositionLength_9972fcc56b44e79d] = env->getMethodID(cls, "getPositionLength", "()I");
              mids$[mid_getPronunciation_db9b55ba01e03e4b] = env->getMethodID(cls, "getPronunciation", "()Ljava/lang/String;");
              mids$[mid_getReading_db9b55ba01e03e4b] = env->getMethodID(cls, "getReading", "()Ljava/lang/String;");
              mids$[mid_getSurfaceForm_e11cf13c9a887534] = env->getMethodID(cls, "getSurfaceForm", "()[C");
              mids$[mid_getSurfaceFormString_db9b55ba01e03e4b] = env->getMethodID(cls, "getSurfaceFormString", "()Ljava/lang/String;");
              mids$[mid_getType_8d694c58d9cd8153] = env->getMethodID(cls, "getType", "()Lorg/apache/lucene/analysis/ja/JapaneseTokenizer$Type;");
              mids$[mid_isKnown_8454bd5aa23fd11e] = env->getMethodID(cls, "isKnown", "()Z");
              mids$[mid_isUnknown_8454bd5aa23fd11e] = env->getMethodID(cls, "isUnknown", "()Z");
              mids$[mid_isUser_8454bd5aa23fd11e] = env->getMethodID(cls, "isUser", "()Z");
              mids$[mid_setPositionLength_040c4cd0390c5aff] = env->getMethodID(cls, "setPositionLength", "(I)V");
              mids$[mid_toString_db9b55ba01e03e4b] = env->getMethodID(cls, "toString", "()Ljava/lang/String;");

              class$ = new ::java::lang::Class(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          Token::Token(jint a0, const JArray< jchar > & a1, jint a2, jint a3, const ::org::apache::lucene::analysis::ja::JapaneseTokenizer$Type & a4, jint a5, const ::org::apache::lucene::analysis::ja::dict::Dictionary & a6) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_fbf39a41c44c2038, a0, a1.this$, a2, a3, a4.this$, a5, a6.this$)) {}

          ::java::lang::String Token::getBaseForm() const
          {
            return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_getBaseForm_db9b55ba01e03e4b]));
          }

          ::java::lang::String Token::getInflectionForm() const
          {
            return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_getInflectionForm_db9b55ba01e03e4b]));
          }

          ::java::lang::String Token::getInflectionType() const
          {
            return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_getInflectionType_db9b55ba01e03e4b]));
          }

          jint Token::getLength() const
          {
            return env->callIntMethod(this$, mids$[mid_getLength_9972fcc56b44e79d]);
          }

          jint Token::getOffset() const
          {
            return env->callIntMethod(this$, mids$[mid_getOffset_9972fcc56b44e79d]);
          }

          ::java::lang::String Token::getPartOfSpeech() const
          {
            return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_getPartOfSpeech_db9b55ba01e03e4b]));
          }

          jint Token::getPosition() const
          {
            return env->callIntMethod(this$, mids$[mid_getPosition_9972fcc56b44e79d]);
          }

          jint Token::getPositionLength() const
          {
            return env->callIntMethod(this$, mids$[mid_getPositionLength_9972fcc56b44e79d]);
          }

          ::java::lang::String Token::getPronunciation() const
          {
            return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_getPronunciation_db9b55ba01e03e4b]));
          }

          ::java::lang::String Token::getReading() const
          {
            return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_getReading_db9b55ba01e03e4b]));
          }

          JArray< jchar > Token::getSurfaceForm() const
          {
            return JArray< jchar >(env->callObjectMethod(this$, mids$[mid_getSurfaceForm_e11cf13c9a887534]));
          }

          ::java::lang::String Token::getSurfaceFormString() const
          {
            return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_getSurfaceFormString_db9b55ba01e03e4b]));
          }

          ::org::apache::lucene::analysis::ja::JapaneseTokenizer$Type Token::getType() const
          {
            return ::org::apache::lucene::analysis::ja::JapaneseTokenizer$Type(env->callObjectMethod(this$, mids$[mid_getType_8d694c58d9cd8153]));
          }

          jboolean Token::isKnown() const
          {
            return env->callBooleanMethod(this$, mids$[mid_isKnown_8454bd5aa23fd11e]);
          }

          jboolean Token::isUnknown() const
          {
            return env->callBooleanMethod(this$, mids$[mid_isUnknown_8454bd5aa23fd11e]);
          }

          jboolean Token::isUser() const
          {
            return env->callBooleanMethod(this$, mids$[mid_isUser_8454bd5aa23fd11e]);
          }

          void Token::setPositionLength(jint a0) const
          {
            env->callVoidMethod(this$, mids$[mid_setPositionLength_040c4cd0390c5aff], a0);
          }

          ::java::lang::String Token::toString() const
          {
            return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_db9b55ba01e03e4b]));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace ja {
          static PyObject *t_Token_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_Token_instance_(PyTypeObject *type, PyObject *arg);
          static int t_Token_init_(t_Token *self, PyObject *args, PyObject *kwds);
          static PyObject *t_Token_getBaseForm(t_Token *self);
          static PyObject *t_Token_getInflectionForm(t_Token *self);
          static PyObject *t_Token_getInflectionType(t_Token *self);
          static PyObject *t_Token_getLength(t_Token *self);
          static PyObject *t_Token_getOffset(t_Token *self);
          static PyObject *t_Token_getPartOfSpeech(t_Token *self);
          static PyObject *t_Token_getPosition(t_Token *self);
          static PyObject *t_Token_getPositionLength(t_Token *self);
          static PyObject *t_Token_getPronunciation(t_Token *self);
          static PyObject *t_Token_getReading(t_Token *self);
          static PyObject *t_Token_getSurfaceForm(t_Token *self);
          static PyObject *t_Token_getSurfaceFormString(t_Token *self);
          static PyObject *t_Token_getType(t_Token *self);
          static PyObject *t_Token_isKnown(t_Token *self);
          static PyObject *t_Token_isUnknown(t_Token *self);
          static PyObject *t_Token_isUser(t_Token *self);
          static PyObject *t_Token_setPositionLength(t_Token *self, PyObject *arg);
          static PyObject *t_Token_toString(t_Token *self, PyObject *args);
          static PyObject *t_Token_get__baseForm(t_Token *self, void *data);
          static PyObject *t_Token_get__inflectionForm(t_Token *self, void *data);
          static PyObject *t_Token_get__inflectionType(t_Token *self, void *data);
          static PyObject *t_Token_get__known(t_Token *self, void *data);
          static PyObject *t_Token_get__length(t_Token *self, void *data);
          static PyObject *t_Token_get__offset(t_Token *self, void *data);
          static PyObject *t_Token_get__partOfSpeech(t_Token *self, void *data);
          static PyObject *t_Token_get__position(t_Token *self, void *data);
          static PyObject *t_Token_get__positionLength(t_Token *self, void *data);
          static int t_Token_set__positionLength(t_Token *self, PyObject *arg, void *data);
          static PyObject *t_Token_get__pronunciation(t_Token *self, void *data);
          static PyObject *t_Token_get__reading(t_Token *self, void *data);
          static PyObject *t_Token_get__surfaceForm(t_Token *self, void *data);
          static PyObject *t_Token_get__surfaceFormString(t_Token *self, void *data);
          static PyObject *t_Token_get__type(t_Token *self, void *data);
          static PyObject *t_Token_get__unknown(t_Token *self, void *data);
          static PyObject *t_Token_get__user(t_Token *self, void *data);
          static PyGetSetDef t_Token__fields_[] = {
            DECLARE_GET_FIELD(t_Token, baseForm),
            DECLARE_GET_FIELD(t_Token, inflectionForm),
            DECLARE_GET_FIELD(t_Token, inflectionType),
            DECLARE_GET_FIELD(t_Token, known),
            DECLARE_GET_FIELD(t_Token, length),
            DECLARE_GET_FIELD(t_Token, offset),
            DECLARE_GET_FIELD(t_Token, partOfSpeech),
            DECLARE_GET_FIELD(t_Token, position),
            DECLARE_GETSET_FIELD(t_Token, positionLength),
            DECLARE_GET_FIELD(t_Token, pronunciation),
            DECLARE_GET_FIELD(t_Token, reading),
            DECLARE_GET_FIELD(t_Token, surfaceForm),
            DECLARE_GET_FIELD(t_Token, surfaceFormString),
            DECLARE_GET_FIELD(t_Token, type),
            DECLARE_GET_FIELD(t_Token, unknown),
            DECLARE_GET_FIELD(t_Token, user),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_Token__methods_[] = {
            DECLARE_METHOD(t_Token, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_Token, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_Token, getBaseForm, METH_NOARGS),
            DECLARE_METHOD(t_Token, getInflectionForm, METH_NOARGS),
            DECLARE_METHOD(t_Token, getInflectionType, METH_NOARGS),
            DECLARE_METHOD(t_Token, getLength, METH_NOARGS),
            DECLARE_METHOD(t_Token, getOffset, METH_NOARGS),
            DECLARE_METHOD(t_Token, getPartOfSpeech, METH_NOARGS),
            DECLARE_METHOD(t_Token, getPosition, METH_NOARGS),
            DECLARE_METHOD(t_Token, getPositionLength, METH_NOARGS),
            DECLARE_METHOD(t_Token, getPronunciation, METH_NOARGS),
            DECLARE_METHOD(t_Token, getReading, METH_NOARGS),
            DECLARE_METHOD(t_Token, getSurfaceForm, METH_NOARGS),
            DECLARE_METHOD(t_Token, getSurfaceFormString, METH_NOARGS),
            DECLARE_METHOD(t_Token, getType, METH_NOARGS),
            DECLARE_METHOD(t_Token, isKnown, METH_NOARGS),
            DECLARE_METHOD(t_Token, isUnknown, METH_NOARGS),
            DECLARE_METHOD(t_Token, isUser, METH_NOARGS),
            DECLARE_METHOD(t_Token, setPositionLength, METH_O),
            DECLARE_METHOD(t_Token, toString, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          static PyType_Slot PY_TYPE_SLOTS(Token)[] = {
            { Py_tp_methods, t_Token__methods_ },
            { Py_tp_init, (void *) t_Token_init_ },
            { Py_tp_getset, t_Token__fields_ },
            { 0, NULL }
          };

          static PyType_Def *PY_TYPE_BASES(Token)[] = {
            &PY_TYPE_DEF(::java::lang::Object),
            NULL
          };

          DEFINE_TYPE(Token, t_Token, Token);

          void t_Token::install(PyObject *module)
          {
            installType(&PY_TYPE(Token), &PY_TYPE_DEF(Token), module, "Token", 0);
          }

          void t_Token::initialize(PyObject *module)
          {
            PyObject_SetAttrString((PyObject *) PY_TYPE(Token), "class_", make_descriptor(Token::initializeClass, 1));
            PyObject_SetAttrString((PyObject *) PY_TYPE(Token), "wrapfn_", make_descriptor(t_Token::wrap_jobject));
            PyObject_SetAttrString((PyObject *) PY_TYPE(Token), "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_Token_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, Token::initializeClass, 1)))
              return NULL;
            return t_Token::wrap_Object(Token(((t_Token *) arg)->object.this$));
          }
          static PyObject *t_Token_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, Token::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_Token_init_(t_Token *self, PyObject *args, PyObject *kwds)
          {
            jint a0;
            JArray< jchar > a1((jobject) NULL);
            jint a2;
            jint a3;
            ::org::apache::lucene::analysis::ja::JapaneseTokenizer$Type a4((jobject) NULL);
            PyTypeObject **p4;
            jint a5;
            ::org::apache::lucene::analysis::ja::dict::Dictionary a6((jobject) NULL);
            Token object((jobject) NULL);

            if (!parseArgs(args, "I[CIIKIk", ::org::apache::lucene::analysis::ja::JapaneseTokenizer$Type::initializeClass, ::org::apache::lucene::analysis::ja::dict::Dictionary::initializeClass, &a0, &a1, &a2, &a3, &a4, &p4, ::org::apache::lucene::analysis::ja::t_JapaneseTokenizer$Type::parameters_, &a5, &a6))
            {
              INT_CALL(object = Token(a0, a1, a2, a3, a4, a5, a6));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_Token_getBaseForm(t_Token *self)
          {
            ::java::lang::String result((jobject) NULL);
            OBJ_CALL(result = self->object.getBaseForm());
            return j2p(result);
          }

          static PyObject *t_Token_getInflectionForm(t_Token *self)
          {
            ::java::lang::String result((jobject) NULL);
            OBJ_CALL(result = self->object.getInflectionForm());
            return j2p(result);
          }

          static PyObject *t_Token_getInflectionType(t_Token *self)
          {
            ::java::lang::String result((jobject) NULL);
            OBJ_CALL(result = self->object.getInflectionType());
            return j2p(result);
          }

          static PyObject *t_Token_getLength(t_Token *self)
          {
            jint result;
            OBJ_CALL(result = self->object.getLength());
            return PyLong_FromLong((long) result);
          }

          static PyObject *t_Token_getOffset(t_Token *self)
          {
            jint result;
            OBJ_CALL(result = self->object.getOffset());
            return PyLong_FromLong((long) result);
          }

          static PyObject *t_Token_getPartOfSpeech(t_Token *self)
          {
            ::java::lang::String result((jobject) NULL);
            OBJ_CALL(result = self->object.getPartOfSpeech());
            return j2p(result);
          }

          static PyObject *t_Token_getPosition(t_Token *self)
          {
            jint result;
            OBJ_CALL(result = self->object.getPosition());
            return PyLong_FromLong((long) result);
          }

          static PyObject *t_Token_getPositionLength(t_Token *self)
          {
            jint result;
            OBJ_CALL(result = self->object.getPositionLength());
            return PyLong_FromLong((long) result);
          }

          static PyObject *t_Token_getPronunciation(t_Token *self)
          {
            ::java::lang::String result((jobject) NULL);
            OBJ_CALL(result = self->object.getPronunciation());
            return j2p(result);
          }

          static PyObject *t_Token_getReading(t_Token *self)
          {
            ::java::lang::String result((jobject) NULL);
            OBJ_CALL(result = self->object.getReading());
            return j2p(result);
          }

          static PyObject *t_Token_getSurfaceForm(t_Token *self)
          {
            JArray< jchar > result((jobject) NULL);
            OBJ_CALL(result = self->object.getSurfaceForm());
            return result.wrap();
          }

          static PyObject *t_Token_getSurfaceFormString(t_Token *self)
          {
            ::java::lang::String result((jobject) NULL);
            OBJ_CALL(result = self->object.getSurfaceFormString());
            return j2p(result);
          }

          static PyObject *t_Token_getType(t_Token *self)
          {
            ::org::apache::lucene::analysis::ja::JapaneseTokenizer$Type result((jobject) NULL);
            OBJ_CALL(result = self->object.getType());
            return ::org::apache::lucene::analysis::ja::t_JapaneseTokenizer$Type::wrap_Object(result);
          }

          static PyObject *t_Token_isKnown(t_Token *self)
          {
            jboolean result;
            OBJ_CALL(result = self->object.isKnown());
            Py_RETURN_BOOL(result);
          }

          static PyObject *t_Token_isUnknown(t_Token *self)
          {
            jboolean result;
            OBJ_CALL(result = self->object.isUnknown());
            Py_RETURN_BOOL(result);
          }

          static PyObject *t_Token_isUser(t_Token *self)
          {
            jboolean result;
            OBJ_CALL(result = self->object.isUser());
            Py_RETURN_BOOL(result);
          }

          static PyObject *t_Token_setPositionLength(t_Token *self, PyObject *arg)
          {
            jint a0;

            if (!parseArg(arg, "I", &a0))
            {
              OBJ_CALL(self->object.setPositionLength(a0));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError((PyObject *) self, "setPositionLength", arg);
            return NULL;
          }

          static PyObject *t_Token_toString(t_Token *self, PyObject *args)
          {
            ::java::lang::String result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.toString());
              return j2p(result);
            }

            return callSuper(PY_TYPE(Token), (PyObject *) self, "toString", args, 2);
          }

          static PyObject *t_Token_get__baseForm(t_Token *self, void *data)
          {
            ::java::lang::String value((jobject) NULL);
            OBJ_CALL(value = self->object.getBaseForm());
            return j2p(value);
          }

          static PyObject *t_Token_get__inflectionForm(t_Token *self, void *data)
          {
            ::java::lang::String value((jobject) NULL);
            OBJ_CALL(value = self->object.getInflectionForm());
            return j2p(value);
          }

          static PyObject *t_Token_get__inflectionType(t_Token *self, void *data)
          {
            ::java::lang::String value((jobject) NULL);
            OBJ_CALL(value = self->object.getInflectionType());
            return j2p(value);
          }

          static PyObject *t_Token_get__known(t_Token *self, void *data)
          {
            jboolean value;
            OBJ_CALL(value = self->object.isKnown());
            Py_RETURN_BOOL(value);
          }

          static PyObject *t_Token_get__length(t_Token *self, void *data)
          {
            jint value;
            OBJ_CALL(value = self->object.getLength());
            return PyLong_FromLong((long) value);
          }

          static PyObject *t_Token_get__offset(t_Token *self, void *data)
          {
            jint value;
            OBJ_CALL(value = self->object.getOffset());
            return PyLong_FromLong((long) value);
          }

          static PyObject *t_Token_get__partOfSpeech(t_Token *self, void *data)
          {
            ::java::lang::String value((jobject) NULL);
            OBJ_CALL(value = self->object.getPartOfSpeech());
            return j2p(value);
          }

          static PyObject *t_Token_get__position(t_Token *self, void *data)
          {
            jint value;
            OBJ_CALL(value = self->object.getPosition());
            return PyLong_FromLong((long) value);
          }

          static PyObject *t_Token_get__positionLength(t_Token *self, void *data)
          {
            jint value;
            OBJ_CALL(value = self->object.getPositionLength());
            return PyLong_FromLong((long) value);
          }
          static int t_Token_set__positionLength(t_Token *self, PyObject *arg, void *data)
          {
            {
              jint value;
              if (!parseArg(arg, "I", &value))
              {
                INT_CALL(self->object.setPositionLength(value));
                return 0;
              }
            }
            PyErr_SetArgsError((PyObject *) self, "positionLength", arg);
            return -1;
          }

          static PyObject *t_Token_get__pronunciation(t_Token *self, void *data)
          {
            ::java::lang::String value((jobject) NULL);
            OBJ_CALL(value = self->object.getPronunciation());
            return j2p(value);
          }

          static PyObject *t_Token_get__reading(t_Token *self, void *data)
          {
            ::java::lang::String value((jobject) NULL);
            OBJ_CALL(value = self->object.getReading());
            return j2p(value);
          }

          static PyObject *t_Token_get__surfaceForm(t_Token *self, void *data)
          {
            JArray< jchar > value((jobject) NULL);
            OBJ_CALL(value = self->object.getSurfaceForm());
            return value.wrap();
          }

          static PyObject *t_Token_get__surfaceFormString(t_Token *self, void *data)
          {
            ::java::lang::String value((jobject) NULL);
            OBJ_CALL(value = self->object.getSurfaceFormString());
            return j2p(value);
          }

          static PyObject *t_Token_get__type(t_Token *self, void *data)
          {
            ::org::apache::lucene::analysis::ja::JapaneseTokenizer$Type value((jobject) NULL);
            OBJ_CALL(value = self->object.getType());
            return ::org::apache::lucene::analysis::ja::t_JapaneseTokenizer$Type::wrap_Object(value);
          }

          static PyObject *t_Token_get__unknown(t_Token *self, void *data)
          {
            jboolean value;
            OBJ_CALL(value = self->object.isUnknown());
            Py_RETURN_BOOL(value);
          }

          static PyObject *t_Token_get__user(t_Token *self, void *data)
          {
            jboolean value;
            OBJ_CALL(value = self->object.isUser());
            Py_RETURN_BOOL(value);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/spans/NearSpansUnordered.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/search/spans/Spans.h"
#include "org/apache/lucene/search/spans/SpanCollector.h"
#include "java/io/IOException.h"
#include "java/util/List.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace spans {

          ::java::lang::Class *NearSpansUnordered::class$ = NULL;
          jmethodID *NearSpansUnordered::mids$ = NULL;
          bool NearSpansUnordered::live$ = false;

          jclass NearSpansUnordered::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/search/spans/NearSpansUnordered");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_64683aefa58cdb7d] = env->getMethodID(cls, "<init>", "(ILjava/util/List;)V");
              mids$[mid_collect_810c6539c62abcf6] = env->getMethodID(cls, "collect", "(Lorg/apache/lucene/search/spans/SpanCollector;)V");
              mids$[mid_endPosition_9972fcc56b44e79d] = env->getMethodID(cls, "endPosition", "()I");
              mids$[mid_nextStartPosition_9972fcc56b44e79d] = env->getMethodID(cls, "nextStartPosition", "()I");
              mids$[mid_startPosition_9972fcc56b44e79d] = env->getMethodID(cls, "startPosition", "()I");
              mids$[mid_width_9972fcc56b44e79d] = env->getMethodID(cls, "width", "()I");

              class$ = new ::java::lang::Class(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          NearSpansUnordered::NearSpansUnordered(jint a0, const ::java::util::List & a1) : ::org::apache::lucene::search::spans::ConjunctionSpans(env->newObject(initializeClass, &mids$, mid_init$_64683aefa58cdb7d, a0, a1.this$)) {}

          void NearSpansUnordered::collect(const ::org::apache::lucene::search::spans::SpanCollector & a0) const
          {
            env->callVoidMethod(this$, mids$[mid_collect_810c6539c62abcf6], a0.this$);
          }

          jint NearSpansUnordered::endPosition() const
          {
            return env->callIntMethod(this$, mids$[mid_endPosition_9972fcc56b44e79d]);
          }

          jint NearSpansUnordered::nextStartPosition() const
          {
            return env->callIntMethod(this$, mids$[mid_nextStartPosition_9972fcc56b44e79d]);
          }

          jint NearSpansUnordered::startPosition() const
          {
            return env->callIntMethod(this$, mids$[mid_startPosition_9972fcc56b44e79d]);
          }

          jint NearSpansUnordered::width() const
          {
            return env->callIntMethod(this$, mids$[mid_width_9972fcc56b44e79d]);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace spans {
          static PyObject *t_NearSpansUnordered_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_NearSpansUnordered_instance_(PyTypeObject *type, PyObject *arg);
          static int t_NearSpansUnordered_init_(t_NearSpansUnordered *self, PyObject *args, PyObject *kwds);
          static PyObject *t_NearSpansUnordered_collect(t_NearSpansUnordered *self, PyObject *args);
          static PyObject *t_NearSpansUnordered_endPosition(t_NearSpansUnordered *self, PyObject *args);
          static PyObject *t_NearSpansUnordered_nextStartPosition(t_NearSpansUnordered *self, PyObject *args);
          static PyObject *t_NearSpansUnordered_startPosition(t_NearSpansUnordered *self, PyObject *args);
          static PyObject *t_NearSpansUnordered_width(t_NearSpansUnordered *self, PyObject *args);

          static PyMethodDef t_NearSpansUnordered__methods_[] = {
            DECLARE_METHOD(t_NearSpansUnordered, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_NearSpansUnordered, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_NearSpansUnordered, collect, METH_VARARGS),
            DECLARE_METHOD(t_NearSpansUnordered, endPosition, METH_VARARGS),
            DECLARE_METHOD(t_NearSpansUnordered, nextStartPosition, METH_VARARGS),
            DECLARE_METHOD(t_NearSpansUnordered, startPosition, METH_VARARGS),
            DECLARE_METHOD(t_NearSpansUnordered, width, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          static PyType_Slot PY_TYPE_SLOTS(NearSpansUnordered)[] = {
            { Py_tp_methods, t_NearSpansUnordered__methods_ },
            { Py_tp_init, (void *) t_NearSpansUnordered_init_ },
            { 0, NULL }
          };

          static PyType_Def *PY_TYPE_BASES(NearSpansUnordered)[] = {
            &PY_TYPE_DEF(::org::apache::lucene::search::spans::ConjunctionSpans),
            NULL
          };

          DEFINE_TYPE(NearSpansUnordered, t_NearSpansUnordered, NearSpansUnordered);

          void t_NearSpansUnordered::install(PyObject *module)
          {
            installType(&PY_TYPE(NearSpansUnordered), &PY_TYPE_DEF(NearSpansUnordered), module, "NearSpansUnordered", 0);
          }

          void t_NearSpansUnordered::initialize(PyObject *module)
          {
            PyObject_SetAttrString((PyObject *) PY_TYPE(NearSpansUnordered), "class_", make_descriptor(NearSpansUnordered::initializeClass, 1));
            PyObject_SetAttrString((PyObject *) PY_TYPE(NearSpansUnordered), "wrapfn_", make_descriptor(t_NearSpansUnordered::wrap_jobject));
            PyObject_SetAttrString((PyObject *) PY_TYPE(NearSpansUnordered), "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_NearSpansUnordered_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, NearSpansUnordered::initializeClass, 1)))
              return NULL;
            return t_NearSpansUnordered::wrap_Object(NearSpansUnordered(((t_NearSpansUnordered *) arg)->object.this$));
          }
          static PyObject *t_NearSpansUnordered_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, NearSpansUnordered::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_NearSpansUnordered_init_(t_NearSpansUnordered *self, PyObject *args, PyObject *kwds)
          {
            jint a0;
            ::java::util::List a1((jobject) NULL);
            PyTypeObject **p1;
            NearSpansUnordered object((jobject) NULL);

            if (!parseArgs(args, "IK", ::java::util::List::initializeClass, &a0, &a1, &p1, ::java::util::t_List::parameters_))
            {
              INT_CALL(object = NearSpansUnordered(a0, a1));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_NearSpansUnordered_collect(t_NearSpansUnordered *self, PyObject *args)
          {
            ::org::apache::lucene::search::spans::SpanCollector a0((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::search::spans::SpanCollector::initializeClass, &a0))
            {
              OBJ_CALL(self->object.collect(a0));
              Py_RETURN_NONE;
            }

            return callSuper(PY_TYPE(NearSpansUnordered), (PyObject *) self, "collect", args, 2);
          }

          static PyObject *t_NearSpansUnordered_endPosition(t_NearSpansUnordered *self, PyObject *args)
          {
            jint result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.endPosition());
              return PyLong_FromLong((long) result);
            }

            return callSuper(PY_TYPE(NearSpansUnordered), (PyObject *) self, "endPosition", args, 2);
          }

          static PyObject *t_NearSpansUnordered_nextStartPosition(t_NearSpansUnordered *self, PyObject *args)
          {
            jint result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.nextStartPosition());
              return PyLong_FromLong((long) result);
            }

            return callSuper(PY_TYPE(NearSpansUnordered), (PyObject *) self, "nextStartPosition", args, 2);
          }

          static PyObject *t_NearSpansUnordered_startPosition(t_NearSpansUnordered *self, PyObject *args)
          {
            jint result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.startPosition());
              return PyLong_FromLong((long) result);
            }

            return callSuper(PY_TYPE(NearSpansUnordered), (PyObject *) self, "startPosition", args, 2);
          }

          static PyObject *t_NearSpansUnordered_width(t_NearSpansUnordered *self, PyObject *args)
          {
            jint result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.width());
              return PyLong_FromLong((long) result);
            }

            return callSuper(PY_TYPE(NearSpansUnordered), (PyObject *) self, "width", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "java/lang/Integer.h"
#include "java/lang/Comparable.h"
#include "java/lang/Class.h"
#include "java/lang/Object.h"
#include "java/lang/Integer.h"
#include "java/lang/String.h"
#include "java/lang/NumberFormatException.h"
#include "JArray.h"

namespace java {
  namespace lang {

    ::java::lang::Class *Integer::class$ = NULL;
    jmethodID *Integer::mids$ = NULL;
    bool Integer::live$ = false;
    jint Integer::BYTES = (jint) 0;
    jint Integer::MAX_VALUE = (jint) 0;
    jint Integer::MIN_VALUE = (jint) 0;
    jint Integer::SIZE = (jint) 0;
    ::java::lang::Class *Integer::TYPE = NULL;

    jclass Integer::initializeClass(bool getOnly)
    {
      if (getOnly)
        return (jclass) (live$ ? class$->this$ : NULL);
      if (class$ == NULL)
      {
        jclass cls = (jclass) env->findClass("java/lang/Integer");

        mids$ = new jmethodID[max_mid];
        mids$[mid_init$_9fd2eb66a64e6f0f] = env->getMethodID(cls, "<init>", "(Ljava/lang/String;)V");
        mids$[mid_init$_040c4cd0390c5aff] = env->getMethodID(cls, "<init>", "(I)V");
        mids$[mid_bitCount_1e143afe1894d213] = env->getStaticMethodID(cls, "bitCount", "(I)I");
        mids$[mid_byteValue_871cd52a74f26213] = env->getMethodID(cls, "byteValue", "()B");
        mids$[mid_compare_57a58545eba514db] = env->getStaticMethodID(cls, "compare", "(II)I");
        mids$[mid_compareTo_81f8a3632c9af401] = env->getMethodID(cls, "compareTo", "(Ljava/lang/Integer;)I");
        mids$[mid_compareUnsigned_57a58545eba514db] = env->getStaticMethodID(cls, "compareUnsigned", "(II)I");
        mids$[mid_decode_aacfb994882247d3] = env->getStaticMethodID(cls, "decode", "(Ljava/lang/String;)Ljava/lang/Integer;");
        mids$[mid_divideUnsigned_57a58545eba514db] = env->getStaticMethodID(cls, "divideUnsigned", "(II)I");
        mids$[mid_doubleValue_8c74b787998ce4bc] = env->getMethodID(cls, "doubleValue", "()D");
        mids$[mid_equals_8b72f2dcdde6fd1d] = env->getMethodID(cls, "equals", "(Ljava/lang/Object;)Z");
        mids$[mid_floatValue_58aec2b64dff50c8] = env->getMethodID(cls, "floatValue", "()F");
        mids$[mid_getInteger_aacfb994882247d3] = env->getStaticMethodID(cls, "getInteger", "(Ljava/lang/String;)Ljava/lang/Integer;");
        mids$[mid_getInteger_d0ce74f5dadeca9e] = env->getStaticMethodID(cls, "getInteger", "(Ljava/lang/String;Ljava/lang/Integer;)Ljava/lang/Integer;");
        mids$[mid_getInteger_c7945c5c09453aa4] = env->getStaticMethodID(cls, "getInteger", "(Ljava/lang/String;I)Ljava/lang/Integer;");
        mids$[mid_hashCode_9972fcc56b44e79d] = env->getMethodID(cls, "hashCode", "()I");
        mids$[mid_hashCode_1e143afe1894d213] = env->getStaticMethodID(cls, "hashCode", "(I)I");
        mids$[mid_highestOneBit_1e143afe1894d213] = env->getStaticMethodID(cls, "highestOneBit", "(I)I");
        mids$[mid_intValue_9972fcc56b44e79d] = env->getMethodID(cls, "intValue", "()I");
        mids$[mid_longValue_2e5ae9edcb9b072f] = env->getMethodID(cls, "longValue", "()J");
        mids$[mid_lowestOneBit_1e143afe1894d213] = env->getStaticMethodID(cls, "lowestOneBit", "(I)I");
        mids$[mid_max_57a58545eba514db] = env->getStaticMethodID(cls, "max", "(II)I");
        mids$[mid_min_57a58545eba514db] = env->getStaticMethodID(cls, "min", "(II)I");
        mids$[mid_numberOfLeadingZeros_1e143afe1894d213] = env->getStaticMethodID(cls, "numberOfLeadingZeros", "(I)I");
        mids$[mid_numberOfTrailingZeros_1e143afe1894d213] = env->getStaticMethodID(cls, "numberOfTrailingZeros", "(I)I");
        mids$[mid_parseInt_a5a7d1128e9e2bb7] = env->getStaticMethodID(cls, "parseInt", "(Ljava/lang/String;)I");
        mids$[mid_parseInt_30cd5d5b9318bd5d] = env->getStaticMethodID(cls, "parseInt", "(Ljava/lang/String;I)I");
        mids$[mid_parseUnsignedInt_a5a7d1128e9e2bb7] = env->getStaticMethodID(cls, "parseUnsignedInt", "(Ljava/lang/String;)I");
        mids$[mid_parseUnsignedInt_30cd5d5b9318bd5d] = env->getStaticMethodID(cls, "parseUnsignedInt", "(Ljava/lang/String;I)I");
        mids$[mid_remainderUnsigned_57a58545eba514db] = env->getStaticMethodID(cls, "remainderUnsigned", "(II)I");
        mids$[mid_reverse_1e143afe1894d213] = env->getStaticMethodID(cls, "reverse", "(I)I");
        mids$[mid_reverseBytes_1e143afe1894d213] = env->getStaticMethodID(cls, "reverseBytes", "(I)I");
        mids$[mid_rotateLeft_57a58545eba514db] = env->getStaticMethodID(cls, "rotateLeft", "(II)I");
        mids$[mid_rotateRight_57a58545eba514db] = env->getStaticMethodID(cls, "rotateRight", "(II)I");
        mids$[mid_shortValue_ec20af88366b851e] = env->getMethodID(cls, "shortValue", "()S");
        mids$[mid_signum_1e143afe1894d213] = env->getStaticMethodID(cls, "signum", "(I)I");
        mids$[mid_sum_57a58545eba514db] = env->getStaticMethodID(cls, "sum", "(II)I");
        mids$[mid_toBinaryString_d7593acad64ef635] = env->getStaticMethodID(cls, "toBinaryString", "(I)Ljava/lang/String;");
        mids$[mid_toHexString_d7593acad64ef635] = env->getStaticMethodID(cls, "toHexString", "(I)Ljava/lang/String;");
        mids$[mid_toOctalString_d7593acad64ef635] = env->getStaticMethodID(cls, "toOctalString", "(I)Ljava/lang/String;");
        mids$[mid_toString_db9b55ba01e03e4b] = env->getMethodID(cls, "toString", "()Ljava/lang/String;");
        mids$[mid_toString_d7593acad64ef635] = env->getStaticMethodID(cls, "toString", "(I)Ljava/lang/String;");
        mids$[mid_toString_1f239231430be983] = env->getStaticMethodID(cls, "toString", "(II)Ljava/lang/String;");
        mids$[mid_toUnsignedLong_0f1d64a641e8af53] = env->getStaticMethodID(cls, "toUnsignedLong", "(I)J");
        mids$[mid_toUnsignedString_d7593acad64ef635] = env->getStaticMethodID(cls, "toUnsignedString", "(I)Ljava/lang/String;");
        mids$[mid_toUnsignedString_1f239231430be983] = env->getStaticMethodID(cls, "toUnsignedString", "(II)Ljava/lang/String;");
        mids$[mid_valueOf_aacfb994882247d3] = env->getStaticMethodID(cls, "valueOf", "(Ljava/lang/String;)Ljava/lang/Integer;");
        mids$[mid_valueOf_6469c2cb31e18c67] = env->getStaticMethodID(cls, "valueOf", "(I)Ljava/lang/Integer;");
        mids$[mid_valueOf_c7945c5c09453aa4] = env->getStaticMethodID(cls, "valueOf", "(Ljava/lang/String;I)Ljava/lang/Integer;");

        class$ = new ::java::lang::Class(cls);
        cls = (jclass) class$->this$;

        BYTES = env->getStaticIntField(cls, "BYTES");
        MAX_VALUE = env->getStaticIntField(cls, "MAX_VALUE");
        MIN_VALUE = env->getStaticIntField(cls, "MIN_VALUE");
        SIZE = env->getStaticIntField(cls, "SIZE");
        TYPE = new ::java::lang::Class(env->getStaticObjectField(cls, "TYPE", "Ljava/lang/Class;"));
        live$ = true;
      }
      return (jclass) class$->this$;
    }

    Integer::Integer(const ::java::lang::String & a0) : ::java::lang::Number(env->newObject(initializeClass, &mids$, mid_init$_9fd2eb66a64e6f0f, a0.this$)) {}

    Integer::Integer(jint a0) : ::java::lang::Number(env->newObject(initializeClass, &mids$, mid_init$_040c4cd0390c5aff, a0)) {}

    jint Integer::bitCount(jint a0)
    {
      jclass cls = env->getClass(initializeClass);
      return env->callStaticIntMethod(cls, mids$[mid_bitCount_1e143afe1894d213], a0);
    }

    jbyte Integer::byteValue() const
    {
      return env->callByteMethod(this$, mids$[mid_byteValue_871cd52a74f26213]);
    }

    jint Integer::compare(jint a0, jint a1)
    {
      jclass cls = env->getClass(initializeClass);
      return env->callStaticIntMethod(cls, mids$[mid_compare_57a58545eba514db], a0, a1);
    }

    jint Integer::compareTo(const Integer & a0) const
    {
      return env->callIntMethod(this$, mids$[mid_compareTo_81f8a3632c9af401], a0.this$);
    }

    jint Integer::compareUnsigned(jint a0, jint a1)
    {
      jclass cls = env->getClass(initializeClass);
      return env->callStaticIntMethod(cls, mids$[mid_compareUnsigned_57a58545eba514db], a0, a1);
    }

    Integer Integer::decode(const ::java::lang::String & a0)
    {
      jclass cls = env->getClass(initializeClass);
      return Integer(env->callStaticObjectMethod(cls, mids$[mid_decode_aacfb994882247d3], a0.this$));
    }

    jint Integer::divideUnsigned(jint a0, jint a1)
    {
      jclass cls = env->getClass(initializeClass);
      return env->callStaticIntMethod(cls, mids$[mid_divideUnsigned_57a58545eba514db], a0, a1);
    }

    jdouble Integer::doubleValue() const
    {
      return env->callDoubleMethod(this$, mids$[mid_doubleValue_8c74b787998ce4bc]);
    }

    jboolean Integer::equals(const ::java::lang::Object & a0) const
    {
      return env->callBooleanMethod(this$, mids$[mid_equals_8b72f2dcdde6fd1d], a0.this$);
    }

    jfloat Integer::floatValue() const
    {
      return env->callFloatMethod(this$, mids$[mid_floatValue_58aec2b64dff50c8]);
    }

    Integer Integer::getInteger(const ::java::lang::String & a0)
    {
      jclass cls = env->getClass(initializeClass);
      return Integer(env->callStaticObjectMethod(cls, mids$[mid_getInteger_aacfb994882247d3], a0.this$));
    }

    Integer Integer::getInteger(const ::java::lang::String & a0, const Integer & a1)
    {
      jclass cls = env->getClass(initializeClass);
      return Integer(env->callStaticObjectMethod(cls, mids$[mid_getInteger_d0ce74f5dadeca9e], a0.this$, a1.this$));
    }

    Integer Integer::getInteger(const ::java::lang::String & a0, jint a1)
    {
      jclass cls = env->getClass(initializeClass);
      return Integer(env->callStaticObjectMethod(cls, mids$[mid_getInteger_c7945c5c09453aa4], a0.this$, a1));
    }

    jint Integer::hashCode() const
    {
      return env->callIntMethod(this$, mids$[mid_hashCode_9972fcc56b44e79d]);
    }

    jint Integer::hashCode(jint a0)
    {
      jclass cls = env->getClass(initializeClass);
      return env->callStaticIntMethod(cls, mids$[mid_hashCode_1e143afe1894d213], a0);
    }

    jint Integer::highestOneBit(jint a0)
    {
      jclass cls = env->getClass(initializeClass);
      return env->callStaticIntMethod(cls, mids$[mid_highestOneBit_1e143afe1894d213], a0);
    }

    jint Integer::intValue() const
    {
      return env->callIntMethod(this$, mids$[mid_intValue_9972fcc56b44e79d]);
    }

    jlong Integer::longValue() const
    {
      return env->callLongMethod(this$, mids$[mid_longValue_2e5ae9edcb9b072f]);
    }

    jint Integer::lowestOneBit(jint a0)
    {
      jclass cls = env->getClass(initializeClass);
      return env->callStaticIntMethod(cls, mids$[mid_lowestOneBit_1e143afe1894d213], a0);
    }

    jint Integer::max$(jint a0, jint a1)
    {
      jclass cls = env->getClass(initializeClass);
      return env->callStaticIntMethod(cls, mids$[mid_max_57a58545eba514db], a0, a1);
    }

    jint Integer::min$(jint a0, jint a1)
    {
      jclass cls = env->getClass(initializeClass);
      return env->callStaticIntMethod(cls, mids$[mid_min_57a58545eba514db], a0, a1);
    }

    jint Integer::numberOfLeadingZeros(jint a0)
    {
      jclass cls = env->getClass(initializeClass);
      return env->callStaticIntMethod(cls, mids$[mid_numberOfLeadingZeros_1e143afe1894d213], a0);
    }

    jint Integer::numberOfTrailingZeros(jint a0)
    {
      jclass cls = env->getClass(initializeClass);
      return env->callStaticIntMethod(cls, mids$[mid_numberOfTrailingZeros_1e143afe1894d213], a0);
    }

    jint Integer::parseInt(const ::java::lang::String & a0)
    {
      jclass cls = env->getClass(initializeClass);
      return env->callStaticIntMethod(cls, mids$[mid_parseInt_a5a7d1128e9e2bb7], a0.this$);
    }

    jint Integer::parseInt(const ::java::lang::String & a0, jint a1)
    {
      jclass cls = env->getClass(initializeClass);
      return env->callStaticIntMethod(cls, mids$[mid_parseInt_30cd5d5b9318bd5d], a0.this$, a1);
    }

    jint Integer::parseUnsignedInt(const ::java::lang::String & a0)
    {
      jclass cls = env->getClass(initializeClass);
      return env->callStaticIntMethod(cls, mids$[mid_parseUnsignedInt_a5a7d1128e9e2bb7], a0.this$);
    }

    jint Integer::parseUnsignedInt(const ::java::lang::String & a0, jint a1)
    {
      jclass cls = env->getClass(initializeClass);
      return env->callStaticIntMethod(cls, mids$[mid_parseUnsignedInt_30cd5d5b9318bd5d], a0.this$, a1);
    }

    jint Integer::remainderUnsigned(jint a0, jint a1)
    {
      jclass cls = env->getClass(initializeClass);
      return env->callStaticIntMethod(cls, mids$[mid_remainderUnsigned_57a58545eba514db], a0, a1);
    }

    jint Integer::reverse(jint a0)
    {
      jclass cls = env->getClass(initializeClass);
      return env->callStaticIntMethod(cls, mids$[mid_reverse_1e143afe1894d213], a0);
    }

    jint Integer::reverseBytes(jint a0)
    {
      jclass cls = env->getClass(initializeClass);
      return env->callStaticIntMethod(cls, mids$[mid_reverseBytes_1e143afe1894d213], a0);
    }

    jint Integer::rotateLeft(jint a0, jint a1)
    {
      jclass cls = env->getClass(initializeClass);
      return env->callStaticIntMethod(cls, mids$[mid_rotateLeft_57a58545eba514db], a0, a1);
    }

    jint Integer::rotateRight(jint a0, jint a1)
    {
      jclass cls = env->getClass(initializeClass);
      return env->callStaticIntMethod(cls, mids$[mid_rotateRight_57a58545eba514db], a0, a1);
    }

    jshort Integer::shortValue() const
    {
      return env->callShortMethod(this$, mids$[mid_shortValue_ec20af88366b851e]);
    }

    jint Integer::signum(jint a0)
    {
      jclass cls = env->getClass(initializeClass);
      return env->callStaticIntMethod(cls, mids$[mid_signum_1e143afe1894d213], a0);
    }

    jint Integer::sum(jint a0, jint a1)
    {
      jclass cls = env->getClass(initializeClass);
      return env->callStaticIntMethod(cls, mids$[mid_sum_57a58545eba514db], a0, a1);
    }

    ::java::lang::String Integer::toBinaryString(jint a0)
    {
      jclass cls = env->getClass(initializeClass);
      return ::java::lang::String(env->callStaticObjectMethod(cls, mids$[mid_toBinaryString_d7593acad64ef635], a0));
    }

    ::java::lang::String Integer::toHexString(jint a0)
    {
      jclass cls = env->getClass(initializeClass);
      return ::java::lang::String(env->callStaticObjectMethod(cls, mids$[mid_toHexString_d7593acad64ef635], a0));
    }

    ::java::lang::String Integer::toOctalString(jint a0)
    {
      jclass cls = env->getClass(initializeClass);
      return ::java::lang::String(env->callStaticObjectMethod(cls, mids$[mid_toOctalString_d7593acad64ef635], a0));
    }

    ::java::lang::String Integer::toString() const
    {
      return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_db9b55ba01e03e4b]));
    }

    ::java::lang::String Integer::toString(jint a0)
    {
      jclass cls = env->getClass(initializeClass);
      return ::java::lang::String(env->callStaticObjectMethod(cls, mids$[mid_toString_d7593acad64ef635], a0));
    }

    ::java::lang::String Integer::toString(jint a0, jint a1)
    {
      jclass cls = env->getClass(initializeClass);
      return ::java::lang::String(env->callStaticObjectMethod(cls, mids$[mid_toString_1f239231430be983], a0, a1));
    }

    jlong Integer::toUnsignedLong(jint a0)
    {
      jclass cls = env->getClass(initializeClass);
      return env->callStaticLongMethod(cls, mids$[mid_toUnsignedLong_0f1d64a641e8af53], a0);
    }

    ::java::lang::String Integer::toUnsignedString(jint a0)
    {
      jclass cls = env->getClass(initializeClass);
      return ::java::lang::String(env->callStaticObjectMethod(cls, mids$[mid_toUnsignedString_d7593acad64ef635], a0));
    }

    ::java::lang::String Integer::toUnsignedString(jint a0, jint a1)
    {
      jclass cls = env->getClass(initializeClass);
      return ::java::lang::String(env->callStaticObjectMethod(cls, mids$[mid_toUnsignedString_1f239231430be983], a0, a1));
    }

    Integer Integer::valueOf(const ::java::lang::String & a0)
    {
      jclass cls = env->getClass(initializeClass);
      return Integer(env->callStaticObjectMethod(cls, mids$[mid_valueOf_aacfb994882247d3], a0.this$));
    }

    Integer Integer::valueOf(jint a0)
    {
      jclass cls = env->getClass(initializeClass);
      return Integer(env->callStaticObjectMethod(cls, mids$[mid_valueOf_6469c2cb31e18c67], a0));
    }

    Integer Integer::valueOf(const ::java::lang::String & a0, jint a1)
    {
      jclass cls = env->getClass(initializeClass);
      return Integer(env->callStaticObjectMethod(cls, mids$[mid_valueOf_c7945c5c09453aa4], a0.this$, a1));
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace java {
  namespace lang {
    static PyObject *t_Integer_cast_(PyTypeObject *type, PyObject *arg);
    static PyObject *t_Integer_instance_(PyTypeObject *type, PyObject *arg);
    static int t_Integer_init_(t_Integer *self, PyObject *args, PyObject *kwds);
    static PyObject *t_Integer_bitCount(PyTypeObject *type, PyObject *arg);
    static PyObject *t_Integer_byteValue(t_Integer *self, PyObject *args);
    static PyObject *t_Integer_compare(PyTypeObject *type, PyObject *args);
    static PyObject *t_Integer_compareTo(t_Integer *self, PyObject *arg);
    static PyObject *t_Integer_compareUnsigned(PyTypeObject *type, PyObject *args);
    static PyObject *t_Integer_decode(PyTypeObject *type, PyObject *arg);
    static PyObject *t_Integer_divideUnsigned(PyTypeObject *type, PyObject *args);
    static PyObject *t_Integer_doubleValue(t_Integer *self, PyObject *args);
    static PyObject *t_Integer_equals(t_Integer *self, PyObject *args);
    static PyObject *t_Integer_floatValue(t_Integer *self, PyObject *args);
    static PyObject *t_Integer_getInteger(PyTypeObject *type, PyObject *args);
    static PyObject *t_Integer_hashCode(t_Integer *self, PyObject *args);
    static PyObject *t_Integer_hashCode_(PyTypeObject *type, PyObject *args);
    static PyObject *t_Integer_highestOneBit(PyTypeObject *type, PyObject *arg);
    static PyObject *t_Integer_intValue(t_Integer *self, PyObject *args);
    static PyObject *t_Integer_longValue(t_Integer *self, PyObject *args);
    static PyObject *t_Integer_lowestOneBit(PyTypeObject *type, PyObject *arg);
    static PyObject *t_Integer_max(PyTypeObject *type, PyObject *args);
    static PyObject *t_Integer_min(PyTypeObject *type, PyObject *args);
    static PyObject *t_Integer_numberOfLeadingZeros(PyTypeObject *type, PyObject *arg);
    static PyObject *t_Integer_numberOfTrailingZeros(PyTypeObject *type, PyObject *arg);
    static PyObject *t_Integer_parseInt(PyTypeObject *type, PyObject *args);
    static PyObject *t_Integer_parseUnsignedInt(PyTypeObject *type, PyObject *args);
    static PyObject *t_Integer_remainderUnsigned(PyTypeObject *type, PyObject *args);
    static PyObject *t_Integer_reverse(PyTypeObject *type, PyObject *arg);
    static PyObject *t_Integer_reverseBytes(PyTypeObject *type, PyObject *arg);
    static PyObject *t_Integer_rotateLeft(PyTypeObject *type, PyObject *args);
    static PyObject *t_Integer_rotateRight(PyTypeObject *type, PyObject *args);
    static PyObject *t_Integer_shortValue(t_Integer *self, PyObject *args);
    static PyObject *t_Integer_signum(PyTypeObject *type, PyObject *arg);
    static PyObject *t_Integer_sum(PyTypeObject *type, PyObject *args);
    static PyObject *t_Integer_toBinaryString(PyTypeObject *type, PyObject *arg);
    static PyObject *t_Integer_toHexString(PyTypeObject *type, PyObject *arg);
    static PyObject *t_Integer_toOctalString(PyTypeObject *type, PyObject *arg);
    static PyObject *t_Integer_toString(t_Integer *self, PyObject *args);
    static PyObject *t_Integer_toString_(PyTypeObject *type, PyObject *args);
    static PyObject *t_Integer_toUnsignedLong(PyTypeObject *type, PyObject *arg);
    static PyObject *t_Integer_toUnsignedString(PyTypeObject *type, PyObject *args);
    static PyObject *t_Integer_valueOf(PyTypeObject *type, PyObject *args);

    static PyMethodDef t_Integer__methods_[] = {
      DECLARE_METHOD(t_Integer, cast_, METH_O | METH_CLASS),
      DECLARE_METHOD(t_Integer, instance_, METH_O | METH_CLASS),
      DECLARE_METHOD(t_Integer, bitCount, METH_O | METH_CLASS),
      DECLARE_METHOD(t_Integer, byteValue, METH_VARARGS),
      DECLARE_METHOD(t_Integer, compare, METH_VARARGS | METH_CLASS),
      DECLARE_METHOD(t_Integer, compareTo, METH_O),
      DECLARE_METHOD(t_Integer, compareUnsigned, METH_VARARGS | METH_CLASS),
      DECLARE_METHOD(t_Integer, decode, METH_O | METH_CLASS),
      DECLARE_METHOD(t_Integer, divideUnsigned, METH_VARARGS | METH_CLASS),
      DECLARE_METHOD(t_Integer, doubleValue, METH_VARARGS),
      DECLARE_METHOD(t_Integer, equals, METH_VARARGS),
      DECLARE_METHOD(t_Integer, floatValue, METH_VARARGS),
      DECLARE_METHOD(t_Integer, getInteger, METH_VARARGS | METH_CLASS),
      DECLARE_METHOD(t_Integer, hashCode, METH_VARARGS),
      DECLARE_METHOD(t_Integer, hashCode_, METH_O | METH_CLASS),
      DECLARE_METHOD(t_Integer, highestOneBit, METH_O | METH_CLASS),
      DECLARE_METHOD(t_Integer, intValue, METH_VARARGS),
      DECLARE_METHOD(t_Integer, longValue, METH_VARARGS),
      DECLARE_METHOD(t_Integer, lowestOneBit, METH_O | METH_CLASS),
      DECLARE_METHOD(t_Integer, max, METH_VARARGS | METH_CLASS),
      DECLARE_METHOD(t_Integer, min, METH_VARARGS | METH_CLASS),
      DECLARE_METHOD(t_Integer, numberOfLeadingZeros, METH_O | METH_CLASS),
      DECLARE_METHOD(t_Integer, numberOfTrailingZeros, METH_O | METH_CLASS),
      DECLARE_METHOD(t_Integer, parseInt, METH_VARARGS | METH_CLASS),
      DECLARE_METHOD(t_Integer, parseUnsignedInt, METH_VARARGS | METH_CLASS),
      DECLARE_METHOD(t_Integer, remainderUnsigned, METH_VARARGS | METH_CLASS),
      DECLARE_METHOD(t_Integer, reverse, METH_O | METH_CLASS),
      DECLARE_METHOD(t_Integer, reverseBytes, METH_O | METH_CLASS),
      DECLARE_METHOD(t_Integer, rotateLeft, METH_VARARGS | METH_CLASS),
      DECLARE_METHOD(t_Integer, rotateRight, METH_VARARGS | METH_CLASS),
      DECLARE_METHOD(t_Integer, shortValue, METH_VARARGS),
      DECLARE_METHOD(t_Integer, signum, METH_O | METH_CLASS),
      DECLARE_METHOD(t_Integer, sum, METH_VARARGS | METH_CLASS),
      DECLARE_METHOD(t_Integer, toBinaryString, METH_O | METH_CLASS),
      DECLARE_METHOD(t_Integer, toHexString, METH_O | METH_CLASS),
      DECLARE_METHOD(t_Integer, toOctalString, METH_O | METH_CLASS),
      DECLARE_METHOD(t_Integer, toString, METH_VARARGS),
      DECLARE_METHOD(t_Integer, toString_, METH_VARARGS | METH_CLASS),
      DECLARE_METHOD(t_Integer, toUnsignedLong, METH_O | METH_CLASS),
      DECLARE_METHOD(t_Integer, toUnsignedString, METH_VARARGS | METH_CLASS),
      DECLARE_METHOD(t_Integer, valueOf, METH_VARARGS | METH_CLASS),
      { NULL, NULL, 0, NULL }
    };

    static PyType_Slot PY_TYPE_SLOTS(Integer)[] = {
      { Py_tp_methods, t_Integer__methods_ },
      { Py_tp_init, (void *) t_Integer_init_ },
      { 0, NULL }
    };

    static PyType_Def *PY_TYPE_BASES(Integer)[] = {
      &PY_TYPE_DEF(::java::lang::Number),
      NULL
    };

    DEFINE_TYPE(Integer, t_Integer, Integer);

    void t_Integer::install(PyObject *module)
    {
      installType(&PY_TYPE(Integer), &PY_TYPE_DEF(Integer), module, "Integer", 0);
    }

    void t_Integer::initialize(PyObject *module)
    {
      PyObject_SetAttrString((PyObject *) PY_TYPE(Integer), "class_", make_descriptor(Integer::initializeClass, 1));
      PyObject_SetAttrString((PyObject *) PY_TYPE(Integer), "wrapfn_", make_descriptor(unboxInteger));
      PyObject_SetAttrString((PyObject *) PY_TYPE(Integer), "boxfn_", make_descriptor(boxInteger));
      env->getClass(Integer::initializeClass);
      PyObject_SetAttrString((PyObject *) PY_TYPE(Integer), "BYTES", make_descriptor(Integer::BYTES));
      PyObject_SetAttrString((PyObject *) PY_TYPE(Integer), "MAX_VALUE", make_descriptor(Integer::MAX_VALUE));
      PyObject_SetAttrString((PyObject *) PY_TYPE(Integer), "MIN_VALUE", make_descriptor(Integer::MIN_VALUE));
      PyObject_SetAttrString((PyObject *) PY_TYPE(Integer), "SIZE", make_descriptor(Integer::SIZE));
      PyObject_SetAttrString((PyObject *) PY_TYPE(Integer), "TYPE", make_descriptor(::java::lang::t_Class::wrap_Object(*Integer::TYPE)));
    }

    static PyObject *t_Integer_cast_(PyTypeObject *type, PyObject *arg)
    {
      if (!(arg = castCheck(arg, Integer::initializeClass, 1)))
        return NULL;
      return t_Integer::wrap_Object(Integer(((t_Integer *) arg)->object.this$));
    }
    static PyObject *t_Integer_instance_(PyTypeObject *type, PyObject *arg)
    {
      if (!castCheck(arg, Integer::initializeClass, 0))
        Py_RETURN_FALSE;
      Py_RETURN_TRUE;
    }

    static int t_Integer_init_(t_Integer *self, PyObject *args, PyObject *kwds)
    {
      switch (PyTuple_GET_SIZE(args)) {
       case 1:
        {
          ::java::lang::String a0((jobject) NULL);
          Integer object((jobject) NULL);

          if (!parseArgs(args, "s", &a0))
          {
            INT_CALL(object = Integer(a0));
            self->object = object;
            break;
          }
        }
        {
          jint a0;
          Integer object((jobject) NULL);

          if (!parseArgs(args, "I", &a0))
          {
            INT_CALL(object = Integer(a0));
            self->object = object;
            break;
          }
        }
       default:
        PyErr_SetArgsError((PyObject *) self, "__init__", args);
        return -1;
      }

      return 0;
    }

    static PyObject *t_Integer_bitCount(PyTypeObject *type, PyObject *arg)
    {
      jint a0;
      jint result;

      if (!parseArg(arg, "I", &a0))
      {
        OBJ_CALL(result = ::java::lang::Integer::bitCount(a0));
        return PyLong_FromLong((long) result);
      }

      PyErr_SetArgsError(type, "bitCount", arg);
      return NULL;
    }

    static PyObject *t_Integer_byteValue(t_Integer *self, PyObject *args)
    {
      jbyte result;

      if (!parseArgs(args, ""))
      {
        OBJ_CALL(result = self->object.byteValue());
        return PyLong_FromLong((long) result);
      }

      return callSuper(PY_TYPE(Integer), (PyObject *) self, "byteValue", args, 2);
    }

    static PyObject *t_Integer_compare(PyTypeObject *type, PyObject *args)
    {
      jint a0;
      jint a1;
      jint result;

      if (!parseArgs(args, "II", &a0, &a1))
      {
        OBJ_CALL(result = ::java::lang::Integer::compare(a0, a1));
        return PyLong_FromLong((long) result);
      }

      PyErr_SetArgsError(type, "compare", args);
      return NULL;
    }

    static PyObject *t_Integer_compareTo(t_Integer *self, PyObject *arg)
    {
      Integer a0((jobject) NULL);
      jint result;

      if (!parseArg(arg, "O", ::java::lang::PY_TYPE(Integer), &a0))
      {
        OBJ_CALL(result = self->object.compareTo(a0));
        return PyLong_FromLong((long) result);
      }

      PyErr_SetArgsError((PyObject *) self, "compareTo", arg);
      return NULL;
    }

    static PyObject *t_Integer_compareUnsigned(PyTypeObject *type, PyObject *args)
    {
      jint a0;
      jint a1;
      jint result;

      if (!parseArgs(args, "II", &a0, &a1))
      {
        OBJ_CALL(result = ::java::lang::Integer::compareUnsigned(a0, a1));
        return PyLong_FromLong((long) result);
      }

      PyErr_SetArgsError(type, "compareUnsigned", args);
      return NULL;
    }

    static PyObject *t_Integer_decode(PyTypeObject *type, PyObject *arg)
    {
      ::java::lang::String a0((jobject) NULL);
      Integer result((jobject) NULL);

      if (!parseArg(arg, "s", &a0))
      {
        OBJ_CALL(result = ::java::lang::Integer::decode(a0));
        return t_Integer::wrap_Object(result);
      }

      PyErr_SetArgsError(type, "decode", arg);
      return NULL;
    }

    static PyObject *t_Integer_divideUnsigned(PyTypeObject *type, PyObject *args)
    {
      jint a0;
      jint a1;
      jint result;

      if (!parseArgs(args, "II", &a0, &a1))
      {
        OBJ_CALL(result = ::java::lang::Integer::divideUnsigned(a0, a1));
        return PyLong_FromLong((long) result);
      }

      PyErr_SetArgsError(type, "divideUnsigned", args);
      return NULL;
    }

    static PyObject *t_Integer_doubleValue(t_Integer *self, PyObject *args)
    {
      jdouble result;

      if (!parseArgs(args, ""))
      {
        OBJ_CALL(result = self->object.doubleValue());
        return PyFloat_FromDouble((double) result);
      }

      return callSuper(PY_TYPE(Integer), (PyObject *) self, "doubleValue", args, 2);
    }

    static PyObject *t_Integer_equals(t_Integer *self, PyObject *args)
    {
      ::java::lang::Object a0((jobject) NULL);
      jboolean result;

      if (!parseArgs(args, "o", &a0))
      {
        OBJ_CALL(result = self->object.equals(a0));
        Py_RETURN_BOOL(result);
      }

      return callSuper(PY_TYPE(Integer), (PyObject *) self, "equals", args, 2);
    }

    static PyObject *t_Integer_floatValue(t_Integer *self, PyObject *args)
    {
      jfloat result;

      if (!parseArgs(args, ""))
      {
        OBJ_CALL(result = self->object.floatValue());
        return PyFloat_FromDouble((double) result);
      }

      return callSuper(PY_TYPE(Integer), (PyObject *) self, "floatValue", args, 2);
    }

    static PyObject *t_Integer_getInteger(PyTypeObject *type, PyObject *args)
    {
      switch (PyTuple_GET_SIZE(args)) {
       case 1:
        {
          ::java::lang::String a0((jobject) NULL);
          Integer result((jobject) NULL);

          if (!parseArgs(args, "s", &a0))
          {
            OBJ_CALL(result = ::java::lang::Integer::getInteger(a0));
            return t_Integer::wrap_Object(result);
          }
        }
        break;
       case 2:
        {
          ::java::lang::String a0((jobject) NULL);
          Integer a1((jobject) NULL);
          Integer result((jobject) NULL);

          if (!parseArgs(args, "sO", ::java::lang::PY_TYPE(Integer), &a0, &a1))
          {
            OBJ_CALL(result = ::java::lang::Integer::getInteger(a0, a1));
            return t_Integer::wrap_Object(result);
          }
        }
        {
          ::java::lang::String a0((jobject) NULL);
          jint a1;
          Integer result((jobject) NULL);

          if (!parseArgs(args, "sI", &a0, &a1))
          {
            OBJ_CALL(result = ::java::lang::Integer::getInteger(a0, a1));
            return t_Integer::wrap_Object(result);
          }
        }
      }

      PyErr_SetArgsError(type, "getInteger", args);
      return NULL;
    }

    static PyObject *t_Integer_hashCode(t_Integer *self, PyObject *args)
    {
      jint result;

      if (!parseArgs(args, ""))
      {
        OBJ_CALL(result = self->object.hashCode());
        return PyLong_FromLong((long) result);
      }

      return callSuper(PY_TYPE(Integer), (PyObject *) self, "hashCode", args, 2);
    }

    static PyObject *t_Integer_hashCode_(PyTypeObject *type, PyObject *args)
    {
      jint a0;
      jint result;

      if (!parseArgs(args, "I", &a0))
      {
        OBJ_CALL(result = ::java::lang::Integer::hashCode(a0));
        return PyLong_FromLong((long) result);
      }

      PyErr_SetArgsError(type, "hashCode_", args);
      return NULL;
    }

    static PyObject *t_Integer_highestOneBit(PyTypeObject *type, PyObject *arg)
    {
      jint a0;
      jint result;

      if (!parseArg(arg, "I", &a0))
      {
        OBJ_CALL(result = ::java::lang::Integer::highestOneBit(a0));
        return PyLong_FromLong((long) result);
      }

      PyErr_SetArgsError(type, "highestOneBit", arg);
      return NULL;
    }

    static PyObject *t_Integer_intValue(t_Integer *self, PyObject *args)
    {
      jint result;

      if (!parseArgs(args, ""))
      {
        OBJ_CALL(result = self->object.intValue());
        return PyLong_FromLong((long) result);
      }

      return callSuper(PY_TYPE(Integer), (PyObject *) self, "intValue", args, 2);
    }

    static PyObject *t_Integer_longValue(t_Integer *self, PyObject *args)
    {
      jlong result;

      if (!parseArgs(args, ""))
      {
        OBJ_CALL(result = self->object.longValue());
        return PyLong_FromLongLong((PY_LONG_LONG) result);
      }

      return callSuper(PY_TYPE(Integer), (PyObject *) self, "longValue", args, 2);
    }

    static PyObject *t_Integer_lowestOneBit(PyTypeObject *type, PyObject *arg)
    {
      jint a0;
      jint result;

      if (!parseArg(arg, "I", &a0))
      {
        OBJ_CALL(result = ::java::lang::Integer::lowestOneBit(a0));
        return PyLong_FromLong((long) result);
      }

      PyErr_SetArgsError(type, "lowestOneBit", arg);
      return NULL;
    }

    static PyObject *t_Integer_max(PyTypeObject *type, PyObject *args)
    {
      jint a0;
      jint a1;
      jint result;

      if (!parseArgs(args, "II", &a0, &a1))
      {
        OBJ_CALL(result = ::java::lang::Integer::max$(a0, a1));
        return PyLong_FromLong((long) result);
      }

      PyErr_SetArgsError(type, "max", args);
      return NULL;
    }

    static PyObject *t_Integer_min(PyTypeObject *type, PyObject *args)
    {
      jint a0;
      jint a1;
      jint result;

      if (!parseArgs(args, "II", &a0, &a1))
      {
        OBJ_CALL(result = ::java::lang::Integer::min$(a0, a1));
        return PyLong_FromLong((long) result);
      }

      PyErr_SetArgsError(type, "min", args);
      return NULL;
    }

    static PyObject *t_Integer_numberOfLeadingZeros(PyTypeObject *type, PyObject *arg)
    {
      jint a0;
      jint result;

      if (!parseArg(arg, "I", &a0))
      {
        OBJ_CALL(result = ::java::lang::Integer::numberOfLeadingZeros(a0));
        return PyLong_FromLong((long) result);
      }

      PyErr_SetArgsError(type, "numberOfLeadingZeros", arg);
      return NULL;
    }

    static PyObject *t_Integer_numberOfTrailingZeros(PyTypeObject *type, PyObject *arg)
    {
      jint a0;
      jint result;

      if (!parseArg(arg, "I", &a0))
      {
        OBJ_CALL(result = ::java::lang::Integer::numberOfTrailingZeros(a0));
        return PyLong_FromLong((long) result);
      }

      PyErr_SetArgsError(type, "numberOfTrailingZeros", arg);
      return NULL;
    }

    static PyObject *t_Integer_parseInt(PyTypeObject *type, PyObject *args)
    {
      switch (PyTuple_GET_SIZE(args)) {
       case 1:
        {
          ::java::lang::String a0((jobject) NULL);
          jint result;

          if (!parseArgs(args, "s", &a0))
          {
            OBJ_CALL(result = ::java::lang::Integer::parseInt(a0));
            return PyLong_FromLong((long) result);
          }
        }
        break;
       case 2:
        {
          ::java::lang::String a0((jobject) NULL);
          jint a1;
          jint result;

          if (!parseArgs(args, "sI", &a0, &a1))
          {
            OBJ_CALL(result = ::java::lang::Integer::parseInt(a0, a1));
            return PyLong_FromLong((long) result);
          }
        }
      }

      PyErr_SetArgsError(type, "parseInt", args);
      return NULL;
    }

    static PyObject *t_Integer_parseUnsignedInt(PyTypeObject *type, PyObject *args)
    {
      switch (PyTuple_GET_SIZE(args)) {
       case 1:
        {
          ::java::lang::String a0((jobject) NULL);
          jint result;

          if (!parseArgs(args, "s", &a0))
          {
            OBJ_CALL(result = ::java::lang::Integer::parseUnsignedInt(a0));
            return PyLong_FromLong((long) result);
          }
        }
        break;
       case 2:
        {
          ::java::lang::String a0((jobject) NULL);
          jint a1;
          jint result;

          if (!parseArgs(args, "sI", &a0, &a1))
          {
            OBJ_CALL(result = ::java::lang::Integer::parseUnsignedInt(a0, a1));
            return PyLong_FromLong((long) result);
          }
        }
      }

      PyErr_SetArgsError(type, "parseUnsignedInt", args);
      return NULL;
    }

    static PyObject *t_Integer_remainderUnsigned(PyTypeObject *type, PyObject *args)
    {
      jint a0;
      jint a1;
      jint result;

      if (!parseArgs(args, "II", &a0, &a1))
      {
        OBJ_CALL(result = ::java::lang::Integer::remainderUnsigned(a0, a1));
        return PyLong_FromLong((long) result);
      }

      PyErr_SetArgsError(type, "remainderUnsigned", args);
      return NULL;
    }

    static PyObject *t_Integer_reverse(PyTypeObject *type, PyObject *arg)
    {
      jint a0;
      jint result;

      if (!parseArg(arg, "I", &a0))
      {
        OBJ_CALL(result = ::java::lang::Integer::reverse(a0));
        return PyLong_FromLong((long) result);
      }

      PyErr_SetArgsError(type, "reverse", arg);
      return NULL;
    }

    static PyObject *t_Integer_reverseBytes(PyTypeObject *type, PyObject *arg)
    {
      jint a0;
      jint result;

      if (!parseArg(arg, "I", &a0))
      {
        OBJ_CALL(result = ::java::lang::Integer::reverseBytes(a0));
        return PyLong_FromLong((long) result);
      }

      PyErr_SetArgsError(type, "reverseBytes", arg);
      return NULL;
    }

    static PyObject *t_Integer_rotateLeft(PyTypeObject *type, PyObject *args)
    {
      jint a0;
      jint a1;
      jint result;

      if (!parseArgs(args, "II", &a0, &a1))
      {
        OBJ_CALL(result = ::java::lang::Integer::rotateLeft(a0, a1));
        return PyLong_FromLong((long) result);
      }

      PyErr_SetArgsError(type, "rotateLeft", args);
      return NULL;
    }

    static PyObject *t_Integer_rotateRight(PyTypeObject *type, PyObject *args)
    {
      jint a0;
      jint a1;
      jint result;

      if (!parseArgs(args, "II", &a0, &a1))
      {
        OBJ_CALL(result = ::java::lang::Integer::rotateRight(a0, a1));
        return PyLong_FromLong((long) result);
      }

      PyErr_SetArgsError(type, "rotateRight", args);
      return NULL;
    }

    static PyObject *t_Integer_shortValue(t_Integer *self, PyObject *args)
    {
      jshort result;

      if (!parseArgs(args, ""))
      {
        OBJ_CALL(result = self->object.shortValue());
        return PyLong_FromLong((long) result);
      }

      return callSuper(PY_TYPE(Integer), (PyObject *) self, "shortValue", args, 2);
    }

    static PyObject *t_Integer_signum(PyTypeObject *type, PyObject *arg)
    {
      jint a0;
      jint result;

      if (!parseArg(arg, "I", &a0))
      {
        OBJ_CALL(result = ::java::lang::Integer::signum(a0));
        return PyLong_FromLong((long) result);
      }

      PyErr_SetArgsError(type, "signum", arg);
      return NULL;
    }

    static PyObject *t_Integer_sum(PyTypeObject *type, PyObject *args)
    {
      jint a0;
      jint a1;
      jint result;

      if (!parseArgs(args, "II", &a0, &a1))
      {
        OBJ_CALL(result = ::java::lang::Integer::sum(a0, a1));
        return PyLong_FromLong((long) result);
      }

      PyErr_SetArgsError(type, "sum", args);
      return NULL;
    }

    static PyObject *t_Integer_toBinaryString(PyTypeObject *type, PyObject *arg)
    {
      jint a0;
      ::java::lang::String result((jobject) NULL);

      if (!parseArg(arg, "I", &a0))
      {
        OBJ_CALL(result = ::java::lang::Integer::toBinaryString(a0));
        return j2p(result);
      }

      PyErr_SetArgsError(type, "toBinaryString", arg);
      return NULL;
    }

    static PyObject *t_Integer_toHexString(PyTypeObject *type, PyObject *arg)
    {
      jint a0;
      ::java::lang::String result((jobject) NULL);

      if (!parseArg(arg, "I", &a0))
      {
        OBJ_CALL(result = ::java::lang::Integer::toHexString(a0));
        return j2p(result);
      }

      PyErr_SetArgsError(type, "toHexString", arg);
      return NULL;
    }

    static PyObject *t_Integer_toOctalString(PyTypeObject *type, PyObject *arg)
    {
      jint a0;
      ::java::lang::String result((jobject) NULL);

      if (!parseArg(arg, "I", &a0))
      {
        OBJ_CALL(result = ::java::lang::Integer::toOctalString(a0));
        return j2p(result);
      }

      PyErr_SetArgsError(type, "toOctalString", arg);
      return NULL;
    }

    static PyObject *t_Integer_toString(t_Integer *self, PyObject *args)
    {
      ::java::lang::String result((jobject) NULL);

      if (!parseArgs(args, ""))
      {
        OBJ_CALL(result = self->object.toString());
        return j2p(result);
      }

      return callSuper(PY_TYPE(Integer), (PyObject *) self, "toString", args, 2);
    }

    static PyObject *t_Integer_toString_(PyTypeObject *type, PyObject *args)
    {
      switch (PyTuple_GET_SIZE(args)) {
       case 1:
        {
          jint a0;
          ::java::lang::String result((jobject) NULL);

          if (!parseArgs(args, "I", &a0))
          {
            OBJ_CALL(result = ::java::lang::Integer::toString(a0));
            return j2p(result);
          }
        }
        break;
       case 2:
        {
          jint a0;
          jint a1;
          ::java::lang::String result((jobject) NULL);

          if (!parseArgs(args, "II", &a0, &a1))
          {
            OBJ_CALL(result = ::java::lang::Integer::toString(a0, a1));
            return j2p(result);
          }
        }
      }

      PyErr_SetArgsError(type, "toString_", args);
      return NULL;
    }

    static PyObject *t_Integer_toUnsignedLong(PyTypeObject *type, PyObject *arg)
    {
      jint a0;
      jlong result;

      if (!parseArg(arg, "I", &a0))
      {
        OBJ_CALL(result = ::java::lang::Integer::toUnsignedLong(a0));
        return PyLong_FromLongLong((PY_LONG_LONG) result);
      }

      PyErr_SetArgsError(type, "toUnsignedLong", arg);
      return NULL;
    }

    static PyObject *t_Integer_toUnsignedString(PyTypeObject *type, PyObject *args)
    {
      switch (PyTuple_GET_SIZE(args)) {
       case 1:
        {
          jint a0;
          ::java::lang::String result((jobject) NULL);

          if (!parseArgs(args, "I", &a0))
          {
            OBJ_CALL(result = ::java::lang::Integer::toUnsignedString(a0));
            return j2p(result);
          }
        }
        break;
       case 2:
        {
          jint a0;
          jint a1;
          ::java::lang::String result((jobject) NULL);

          if (!parseArgs(args, "II", &a0, &a1))
          {
            OBJ_CALL(result = ::java::lang::Integer::toUnsignedString(a0, a1));
            return j2p(result);
          }
        }
      }

      PyErr_SetArgsError(type, "toUnsignedString", args);
      return NULL;
    }

    static PyObject *t_Integer_valueOf(PyTypeObject *type, PyObject *args)
    {
      switch (PyTuple_GET_SIZE(args)) {
       case 1:
        {
          ::java::lang::String a0((jobject) NULL);
          Integer result((jobject) NULL);

          if (!parseArgs(args, "s", &a0))
          {
            OBJ_CALL(result = ::java::lang::Integer::valueOf(a0));
            return t_Integer::wrap_Object(result);
          }
        }
        {
          jint a0;
          Integer result((jobject) NULL);

          if (!parseArgs(args, "I", &a0))
          {
            OBJ_CALL(result = ::java::lang::Integer::valueOf(a0));
            return t_Integer::wrap_Object(result);
          }
        }
        break;
       case 2:
        {
          ::java::lang::String a0((jobject) NULL);
          jint a1;
          Integer result((jobject) NULL);

          if (!parseArgs(args, "sI", &a0, &a1))
          {
            OBJ_CALL(result = ::java::lang::Integer::valueOf(a0, a1));
            return t_Integer::wrap_Object(result);
          }
        }
      }

      PyErr_SetArgsError(type, "valueOf", args);
      return NULL;
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/codecs/lucene80/Lucene80NormsFormat.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/index/SegmentReadState.h"
#include "org/apache/lucene/codecs/NormsProducer.h"
#include "org/apache/lucene/codecs/NormsConsumer.h"
#include "org/apache/lucene/index/SegmentWriteState.h"
#include "java/io/IOException.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace codecs {
        namespace lucene80 {

          ::java::lang::Class *Lucene80NormsFormat::class$ = NULL;
          jmethodID *Lucene80NormsFormat::mids$ = NULL;
          bool Lucene80NormsFormat::live$ = false;

          jclass Lucene80NormsFormat::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/codecs/lucene80/Lucene80NormsFormat");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_f2cc1bce94666404] = env->getMethodID(cls, "<init>", "()V");
              mids$[mid_normsConsumer_129866fdd9f40fd4] = env->getMethodID(cls, "normsConsumer", "(Lorg/apache/lucene/index/SegmentWriteState;)Lorg/apache/lucene/codecs/NormsConsumer;");
              mids$[mid_normsProducer_c7aca038fcf2bba1] = env->getMethodID(cls, "normsProducer", "(Lorg/apache/lucene/index/SegmentReadState;)Lorg/apache/lucene/codecs/NormsProducer;");

              class$ = new ::java::lang::Class(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          Lucene80NormsFormat::Lucene80NormsFormat() : ::org::apache::lucene::codecs::NormsFormat(env->newObject(initializeClass, &mids$, mid_init$_f2cc1bce94666404)) {}

          ::org::apache::lucene::codecs::NormsConsumer Lucene80NormsFormat::normsConsumer(const ::org::apache::lucene::index::SegmentWriteState & a0) const
          {
            return ::org::apache::lucene::codecs::NormsConsumer(env->callObjectMethod(this$, mids$[mid_normsConsumer_129866fdd9f40fd4], a0.this$));
          }

          ::org::apache::lucene::codecs::NormsProducer Lucene80NormsFormat::normsProducer(const ::org::apache::lucene::index::SegmentReadState & a0) const
          {
            return ::org::apache::lucene::codecs::NormsProducer(env->callObjectMethod(this$, mids$[mid_normsProducer_c7aca038fcf2bba1], a0.this$));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace codecs {
        namespace lucene80 {
          static PyObject *t_Lucene80NormsFormat_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_Lucene80NormsFormat_instance_(PyTypeObject *type, PyObject *arg);
          static int t_Lucene80NormsFormat_init_(t_Lucene80NormsFormat *self, PyObject *args, PyObject *kwds);
          static PyObject *t_Lucene80NormsFormat_normsConsumer(t_Lucene80NormsFormat *self, PyObject *args);
          static PyObject *t_Lucene80NormsFormat_normsProducer(t_Lucene80NormsFormat *self, PyObject *args);

          static PyMethodDef t_Lucene80NormsFormat__methods_[] = {
            DECLARE_METHOD(t_Lucene80NormsFormat, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_Lucene80NormsFormat, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_Lucene80NormsFormat, normsConsumer, METH_VARARGS),
            DECLARE_METHOD(t_Lucene80NormsFormat, normsProducer, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          static PyType_Slot PY_TYPE_SLOTS(Lucene80NormsFormat)[] = {
            { Py_tp_methods, t_Lucene80NormsFormat__methods_ },
            { Py_tp_init, (void *) t_Lucene80NormsFormat_init_ },
            { 0, NULL }
          };

          static PyType_Def *PY_TYPE_BASES(Lucene80NormsFormat)[] = {
            &PY_TYPE_DEF(::org::apache::lucene::codecs::NormsFormat),
            NULL
          };

          DEFINE_TYPE(Lucene80NormsFormat, t_Lucene80NormsFormat, Lucene80NormsFormat);

          void t_Lucene80NormsFormat::install(PyObject *module)
          {
            installType(&PY_TYPE(Lucene80NormsFormat), &PY_TYPE_DEF(Lucene80NormsFormat), module, "Lucene80NormsFormat", 0);
          }

          void t_Lucene80NormsFormat::initialize(PyObject *module)
          {
            PyObject_SetAttrString((PyObject *) PY_TYPE(Lucene80NormsFormat), "class_", make_descriptor(Lucene80NormsFormat::initializeClass, 1));
            PyObject_SetAttrString((PyObject *) PY_TYPE(Lucene80NormsFormat), "wrapfn_", make_descriptor(t_Lucene80NormsFormat::wrap_jobject));
            PyObject_SetAttrString((PyObject *) PY_TYPE(Lucene80NormsFormat), "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_Lucene80NormsFormat_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, Lucene80NormsFormat::initializeClass, 1)))
              return NULL;
            return t_Lucene80NormsFormat::wrap_Object(Lucene80NormsFormat(((t_Lucene80NormsFormat *) arg)->object.this$));
          }
          static PyObject *t_Lucene80NormsFormat_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, Lucene80NormsFormat::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_Lucene80NormsFormat_init_(t_Lucene80NormsFormat *self, PyObject *args, PyObject *kwds)
          {
            Lucene80NormsFormat object((jobject) NULL);

            INT_CALL(object = Lucene80NormsFormat());
            self->object = object;

            return 0;
          }

          static PyObject *t_Lucene80NormsFormat_normsConsumer(t_Lucene80NormsFormat *self, PyObject *args)
          {
            ::org::apache::lucene::index::SegmentWriteState a0((jobject) NULL);
            ::org::apache::lucene::codecs::NormsConsumer result((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::index::SegmentWriteState::initializeClass, &a0))
            {
              OBJ_CALL(result = self->object.normsConsumer(a0));
              return ::org::apache::lucene::codecs::t_NormsConsumer::wrap_Object(result);
            }

            return callSuper(PY_TYPE(Lucene80NormsFormat), (PyObject *) self, "normsConsumer", args, 2);
          }

          static PyObject *t_Lucene80NormsFormat_normsProducer(t_Lucene80NormsFormat *self, PyObject *args)
          {
            ::org::apache::lucene::index::SegmentReadState a0((jobject) NULL);
            ::org::apache::lucene::codecs::NormsProducer result((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::index::SegmentReadState::initializeClass, &a0))
            {
              OBJ_CALL(result = self->object.normsProducer(a0));
              return ::org::apache::lucene::codecs::t_NormsProducer::wrap_Object(result);
            }

            return callSuper(PY_TYPE(Lucene80NormsFormat), (PyObject *) self, "normsProducer", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/index/ImpactsSource.h"
#include "org/apache/lucene/index/Impacts.h"
#include "java/io/IOException.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {

        ::java::lang::Class *ImpactsSource::class$ = NULL;
        jmethodID *ImpactsSource::mids$ = NULL;
        bool ImpactsSource::live$ = false;

        jclass ImpactsSource::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/index/ImpactsSource");

            mids$ = new jmethodID[max_mid];
            mids$[mid_advanceShallow_040c4cd0390c5aff] = env->getMethodID(cls, "advanceShallow", "(I)V");
            mids$[mid_getImpacts_292e6cb194dff836] = env->getMethodID(cls, "getImpacts", "()Lorg/apache/lucene/index/Impacts;");

            class$ = new ::java::lang::Class(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        void ImpactsSource::advanceShallow(jint a0) const
        {
          env->callVoidMethod(this$, mids$[mid_advanceShallow_040c4cd0390c5aff], a0);
        }

        ::org::apache::lucene::index::Impacts ImpactsSource::getImpacts() const
        {
          return ::org::apache::lucene::index::Impacts(env->callObjectMethod(this$, mids$[mid_getImpacts_292e6cb194dff836]));
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {
        static PyObject *t_ImpactsSource_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_ImpactsSource_instance_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_ImpactsSource_advanceShallow(t_ImpactsSource *self, PyObject *arg);
        static PyObject *t_ImpactsSource_getImpacts(t_ImpactsSource *self);
        static PyObject *t_ImpactsSource_get__impacts(t_ImpactsSource *self, void *data);
        static PyGetSetDef t_ImpactsSource__fields_[] = {
          DECLARE_GET_FIELD(t_ImpactsSource, impacts),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_ImpactsSource__methods_[] = {
          DECLARE_METHOD(t_ImpactsSource, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_ImpactsSource, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_ImpactsSource, advanceShallow, METH_O),
          DECLARE_METHOD(t_ImpactsSource, getImpacts, METH_NOARGS),
          { NULL, NULL, 0, NULL }
        };

        static PyType_Slot PY_TYPE_SLOTS(ImpactsSource)[] = {
          { Py_tp_methods, t_ImpactsSource__methods_ },
          { Py_tp_init, (void *) abstract_init },
          { Py_tp_getset, t_ImpactsSource__fields_ },
          { 0, NULL }
        };

        static PyType_Def *PY_TYPE_BASES(ImpactsSource)[] = {
          &PY_TYPE_DEF(::java::lang::Object),
          NULL
        };

        DEFINE_TYPE(ImpactsSource, t_ImpactsSource, ImpactsSource);

        void t_ImpactsSource::install(PyObject *module)
        {
          installType(&PY_TYPE(ImpactsSource), &PY_TYPE_DEF(ImpactsSource), module, "ImpactsSource", 0);
        }

        void t_ImpactsSource::initialize(PyObject *module)
        {
          PyObject_SetAttrString((PyObject *) PY_TYPE(ImpactsSource), "class_", make_descriptor(ImpactsSource::initializeClass, 1));
          PyObject_SetAttrString((PyObject *) PY_TYPE(ImpactsSource), "wrapfn_", make_descriptor(t_ImpactsSource::wrap_jobject));
          PyObject_SetAttrString((PyObject *) PY_TYPE(ImpactsSource), "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_ImpactsSource_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, ImpactsSource::initializeClass, 1)))
            return NULL;
          return t_ImpactsSource::wrap_Object(ImpactsSource(((t_ImpactsSource *) arg)->object.this$));
        }
        static PyObject *t_ImpactsSource_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, ImpactsSource::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static PyObject *t_ImpactsSource_advanceShallow(t_ImpactsSource *self, PyObject *arg)
        {
          jint a0;

          if (!parseArg(arg, "I", &a0))
          {
            OBJ_CALL(self->object.advanceShallow(a0));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "advanceShallow", arg);
          return NULL;
        }

        static PyObject *t_ImpactsSource_getImpacts(t_ImpactsSource *self)
        {
          ::org::apache::lucene::index::Impacts result((jobject) NULL);
          OBJ_CALL(result = self->object.getImpacts());
          return ::org::apache::lucene::index::t_Impacts::wrap_Object(result);
        }

        static PyObject *t_ImpactsSource_get__impacts(t_ImpactsSource *self, void *data)
        {
          ::org::apache::lucene::index::Impacts value((jobject) NULL);
          OBJ_CALL(value = self->object.getImpacts());
          return ::org::apache::lucene::index::t_Impacts::wrap_Object(value);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/spatial3d/geom/GeoDegenerateVerticalLine.h"
#include "org/apache/lucene/spatial3d/geom/GeoShape.h"
#include "java/io/InputStream.h"
#include "java/lang/Class.h"
#include "java/lang/Object.h"
#include "org/apache/lucene/spatial3d/geom/Plane.h"
#include "org/apache/lucene/spatial3d/geom/GeoPoint.h"
#include "org/apache/lucene/spatial3d/geom/GeoBBox.h"
#include "java/lang/String.h"
#include "java/io/OutputStream.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/spatial3d/geom/PlanetModel.h"
#include "org/apache/lucene/spatial3d/geom/Bounds.h"
#include "org/apache/lucene/spatial3d/geom/Membership.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace spatial3d {
        namespace geom {

          ::java::lang::Class *GeoDegenerateVerticalLine::class$ = NULL;
          jmethodID *GeoDegenerateVerticalLine::mids$ = NULL;
          bool GeoDegenerateVerticalLine::live$ = false;

          jclass GeoDegenerateVerticalLine::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/spatial3d/geom/GeoDegenerateVerticalLine");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_fa69e987247475d8] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/spatial3d/geom/PlanetModel;Ljava/io/InputStream;)V");
              mids$[mid_init$_a96c83f5c340c0ad] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/spatial3d/geom/PlanetModel;DDD)V");
              mids$[mid_equals_8b72f2dcdde6fd1d] = env->getMethodID(cls, "equals", "(Ljava/lang/Object;)Z");
              mids$[mid_expand_ced210f3e52c8970] = env->getMethodID(cls, "expand", "(D)Lorg/apache/lucene/spatial3d/geom/GeoBBox;");
              mids$[mid_getBounds_bbfc0798cb5fe499] = env->getMethodID(cls, "getBounds", "(Lorg/apache/lucene/spatial3d/geom/Bounds;)V");
              mids$[mid_getCenter_9ece33e8c05297a2] = env->getMethodID(cls, "getCenter", "()Lorg/apache/lucene/spatial3d/geom/GeoPoint;");
              mids$[mid_getEdgePoints_e945274bd0921a4a] = env->getMethodID(cls, "getEdgePoints", "()[Lorg/apache/lucene/spatial3d/geom/GeoPoint;");
              mids$[mid_getRadius_8c74b787998ce4bc] = env->getMethodID(cls, "getRadius", "()D");
              mids$[mid_getRelationship_2e0040c09ede6a59] = env->getMethodID(cls, "getRelationship", "(Lorg/apache/lucene/spatial3d/geom/GeoShape;)I");
              mids$[mid_hashCode_9972fcc56b44e79d] = env->getMethodID(cls, "hashCode", "()I");
              mids$[mid_intersects_19eac5b582956b3c] = env->getMethodID(cls, "intersects", "(Lorg/apache/lucene/spatial3d/geom/GeoShape;)Z");
              mids$[mid_intersects_e74435b8d47a8bda] = env->getMethodID(cls, "intersects", "(Lorg/apache/lucene/spatial3d/geom/Plane;[Lorg/apache/lucene/spatial3d/geom/GeoPoint;[Lorg/apache/lucene/spatial3d/geom/Membership;)Z");
              mids$[mid_isWithin_5afbc0f2c6478de6] = env->getMethodID(cls, "isWithin", "(DDD)Z");
              mids$[mid_toString_db9b55ba01e03e4b] = env->getMethodID(cls, "toString", "()Ljava/lang/String;");
              mids$[mid_write_02fcdace254a9894] = env->getMethodID(cls, "write", "(Ljava/io/OutputStream;)V");
              mids$[mid_outsideDistance_2b407c8141eb9589] = env->getMethodID(cls, "outsideDistance", "(Lorg/apache/lucene/spatial3d/geom/DistanceStyle;DDD)D");

              class$ = new ::java::lang::Class(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          GeoDegenerateVerticalLine::GeoDegenerateVerticalLine(const ::org::apache::lucene::spatial3d::geom::PlanetModel & a0, const ::java::io::InputStream & a1) : ::org::apache::lucene::spatial3d::geom::GeoBaseBBox(env->newObject(initializeClass, &mids$, mid_init$_fa69e987247475d8, a0.this$, a1.this$)) {}

          GeoDegenerateVerticalLine::GeoDegenerateVerticalLine(const ::org::apache::lucene::spatial3d::geom::PlanetModel & a0, jdouble a1, jdouble a2, jdouble a3) : ::org::apache::lucene::spatial3d::geom::GeoBaseBBox(env->newObject(initializeClass, &mids$, mid_init$_a96c83f5c340c0ad, a0.this$, a1, a2, a3)) {}

          jboolean GeoDegenerateVerticalLine::equals(const ::java::lang::Object & a0) const
          {
            return env->callBooleanMethod(this$, mids$[mid_equals_8b72f2dcdde6fd1d], a0.this$);
          }

          ::org::apache::lucene::spatial3d::geom::GeoBBox GeoDegenerateVerticalLine::expand(jdouble a0) const
          {
            return ::org::apache::lucene::spatial3d::geom::GeoBBox(env->callObjectMethod(this$, mids$[mid_expand_ced210f3e52c8970], a0));
          }

          void GeoDegenerateVerticalLine::getBounds(const ::org::apache::lucene::spatial3d::geom::Bounds & a0) const
          {
            env->callVoidMethod(this$, mids$[mid_getBounds_bbfc0798cb5fe499], a0.this$);
          }

          ::org::apache::lucene::spatial3d::geom::GeoPoint GeoDegenerateVerticalLine::getCenter() const
          {
            return ::org::apache::lucene::spatial3d::geom::GeoPoint(env->callObjectMethod(this$, mids$[mid_getCenter_9ece33e8c05297a2]));
          }

          JArray< ::org::apache::lucene::spatial3d::geom::GeoPoint > GeoDegenerateVerticalLine::getEdgePoints() const
          {
            return JArray< ::org::apache::lucene::spatial3d::geom::GeoPoint >(env->callObjectMethod(this$, mids$[mid_getEdgePoints_e945274bd0921a4a]));
          }

          jdouble GeoDegenerateVerticalLine::getRadius() const
          {
            return env->callDoubleMethod(this$, mids$[mid_getRadius_8c74b787998ce4bc]);
          }

          jint GeoDegenerateVerticalLine::getRelationship(const ::org::apache::lucene::spatial3d::geom::GeoShape & a0) const
          {
            return env->callIntMethod(this$, mids$[mid_getRelationship_2e0040c09ede6a59], a0.this$);
          }

          jint GeoDegenerateVerticalLine::hashCode() const
          {
            return env->callIntMethod(this$, mids$[mid_hashCode_9972fcc56b44e79d]);
          }

          jboolean GeoDegenerateVerticalLine::intersects(const ::org::apache::lucene::spatial3d::geom::GeoShape & a0) const
          {
            return env->callBooleanMethod(this$, mids$[mid_intersects_19eac5b582956b3c], a0.this$);
          }

          jboolean GeoDegenerateVerticalLine::intersects(const ::org::apache::lucene::spatial3d::geom::Plane & a0, const JArray< ::org::apache::lucene::spatial3d::geom::GeoPoint > & a1, const JArray< ::org::apache::lucene::spatial3d::geom::Membership > & a2) const
          {
            return env->callBooleanMethod(this$, mids$[mid_intersects_e74435b8d47a8bda], a0.this$, a1.this$, a2.this$);
          }

          jboolean GeoDegenerateVerticalLine::isWithin(jdouble a0, jdouble a1, jdouble a2) const
          {
            return env->callBooleanMethod(this$, mids$[mid_isWithin_5afbc0f2c6478de6], a0, a1, a2);
          }

          ::java::lang::String GeoDegenerateVerticalLine::toString() const
          {
            return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_db9b55ba01e03e4b]));
          }

          void GeoDegenerateVerticalLine::write(const ::java::io::OutputStream & a0) const
          {
            env->callVoidMethod(this$, mids$[mid_write_02fcdace254a9894], a0.this$);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace spatial3d {
        namespace geom {
          static PyObject *t_GeoDegenerateVerticalLine_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_GeoDegenerateVerticalLine_instance_(PyTypeObject *type, PyObject *arg);
          static int t_GeoDegenerateVerticalLine_init_(t_GeoDegenerateVerticalLine *self, PyObject *args, PyObject *kwds);
          static PyObject *t_GeoDegenerateVerticalLine_equals(t_GeoDegenerateVerticalLine *self, PyObject *args);
          static PyObject *t_GeoDegenerateVerticalLine_expand(t_GeoDegenerateVerticalLine *self, PyObject *args);
          static PyObject *t_GeoDegenerateVerticalLine_getBounds(t_GeoDegenerateVerticalLine *self, PyObject *args);
          static PyObject *t_GeoDegenerateVerticalLine_getCenter(t_GeoDegenerateVerticalLine *self, PyObject *args);
          static PyObject *t_GeoDegenerateVerticalLine_getEdgePoints(t_GeoDegenerateVerticalLine *self, PyObject *args);
          static PyObject *t_GeoDegenerateVerticalLine_getRadius(t_GeoDegenerateVerticalLine *self, PyObject *args);
          static PyObject *t_GeoDegenerateVerticalLine_getRelationship(t_GeoDegenerateVerticalLine *self, PyObject *args);
          static PyObject *t_GeoDegenerateVerticalLine_hashCode(t_GeoDegenerateVerticalLine *self, PyObject *args);
          static PyObject *t_GeoDegenerateVerticalLine_intersects(t_GeoDegenerateVerticalLine *self, PyObject *args);
          static PyObject *t_GeoDegenerateVerticalLine_isWithin(t_GeoDegenerateVerticalLine *self, PyObject *args);
          static PyObject *t_GeoDegenerateVerticalLine_toString(t_GeoDegenerateVerticalLine *self, PyObject *args);
          static PyObject *t_GeoDegenerateVerticalLine_write(t_GeoDegenerateVerticalLine *self, PyObject *args);
          static PyObject *t_GeoDegenerateVerticalLine_get__center(t_GeoDegenerateVerticalLine *self, void *data);
          static PyObject *t_GeoDegenerateVerticalLine_get__edgePoints(t_GeoDegenerateVerticalLine *self, void *data);
          static PyObject *t_GeoDegenerateVerticalLine_get__radius(t_GeoDegenerateVerticalLine *self, void *data);
          static PyGetSetDef t_GeoDegenerateVerticalLine__fields_[] = {
            DECLARE_GET_FIELD(t_GeoDegenerateVerticalLine, center),
            DECLARE_GET_FIELD(t_GeoDegenerateVerticalLine, edgePoints),
            DECLARE_GET_FIELD(t_GeoDegenerateVerticalLine, radius),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_GeoDegenerateVerticalLine__methods_[] = {
            DECLARE_METHOD(t_GeoDegenerateVerticalLine, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_GeoDegenerateVerticalLine, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_GeoDegenerateVerticalLine, equals, METH_VARARGS),
            DECLARE_METHOD(t_GeoDegenerateVerticalLine, expand, METH_VARARGS),
            DECLARE_METHOD(t_GeoDegenerateVerticalLine, getBounds, METH_VARARGS),
            DECLARE_METHOD(t_GeoDegenerateVerticalLine, getCenter, METH_VARARGS),
            DECLARE_METHOD(t_GeoDegenerateVerticalLine, getEdgePoints, METH_VARARGS),
            DECLARE_METHOD(t_GeoDegenerateVerticalLine, getRadius, METH_VARARGS),
            DECLARE_METHOD(t_GeoDegenerateVerticalLine, getRelationship, METH_VARARGS),
            DECLARE_METHOD(t_GeoDegenerateVerticalLine, hashCode, METH_VARARGS),
            DECLARE_METHOD(t_GeoDegenerateVerticalLine, intersects, METH_VARARGS),
            DECLARE_METHOD(t_GeoDegenerateVerticalLine, isWithin, METH_VARARGS),
            DECLARE_METHOD(t_GeoDegenerateVerticalLine, toString, METH_VARARGS),
            DECLARE_METHOD(t_GeoDegenerateVerticalLine, write, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          static PyType_Slot PY_TYPE_SLOTS(GeoDegenerateVerticalLine)[] = {
            { Py_tp_methods, t_GeoDegenerateVerticalLine__methods_ },
            { Py_tp_init, (void *) t_GeoDegenerateVerticalLine_init_ },
            { Py_tp_getset, t_GeoDegenerateVerticalLine__fields_ },
            { 0, NULL }
          };

          static PyType_Def *PY_TYPE_BASES(GeoDegenerateVerticalLine)[] = {
            &PY_TYPE_DEF(::org::apache::lucene::spatial3d::geom::GeoBaseBBox),
            NULL
          };

          DEFINE_TYPE(GeoDegenerateVerticalLine, t_GeoDegenerateVerticalLine, GeoDegenerateVerticalLine);

          void t_GeoDegenerateVerticalLine::install(PyObject *module)
          {
            installType(&PY_TYPE(GeoDegenerateVerticalLine), &PY_TYPE_DEF(GeoDegenerateVerticalLine), module, "GeoDegenerateVerticalLine", 0);
          }

          void t_GeoDegenerateVerticalLine::initialize(PyObject *module)
          {
            PyObject_SetAttrString((PyObject *) PY_TYPE(GeoDegenerateVerticalLine), "class_", make_descriptor(GeoDegenerateVerticalLine::initializeClass, 1));
            PyObject_SetAttrString((PyObject *) PY_TYPE(GeoDegenerateVerticalLine), "wrapfn_", make_descriptor(t_GeoDegenerateVerticalLine::wrap_jobject));
            PyObject_SetAttrString((PyObject *) PY_TYPE(GeoDegenerateVerticalLine), "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_GeoDegenerateVerticalLine_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, GeoDegenerateVerticalLine::initializeClass, 1)))
              return NULL;
            return t_GeoDegenerateVerticalLine::wrap_Object(GeoDegenerateVerticalLine(((t_GeoDegenerateVerticalLine *) arg)->object.this$));
          }
          static PyObject *t_GeoDegenerateVerticalLine_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, GeoDegenerateVerticalLine::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_GeoDegenerateVerticalLine_init_(t_GeoDegenerateVerticalLine *self, PyObject *args, PyObject *kwds)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 2:
              {
                ::org::apache::lucene::spatial3d::geom::PlanetModel a0((jobject) NULL);
                ::java::io::InputStream a1((jobject) NULL);
                GeoDegenerateVerticalLine object((jobject) NULL);

                if (!parseArgs(args, "kk", ::org::apache::lucene::spatial3d::geom::PlanetModel::initializeClass, ::java::io::InputStream::initializeClass, &a0, &a1))
                {
                  INT_CALL(object = GeoDegenerateVerticalLine(a0, a1));
                  self->object = object;
                  break;
                }
              }
              goto err;
             case 4:
              {
                ::org::apache::lucene::spatial3d::geom::PlanetModel a0((jobject) NULL);
                jdouble a1;
                jdouble a2;
                jdouble a3;
                GeoDegenerateVerticalLine object((jobject) NULL);

                if (!parseArgs(args, "kDDD", ::org::apache::lucene::spatial3d::geom::PlanetModel::initializeClass, &a0, &a1, &a2, &a3))
                {
                  INT_CALL(object = GeoDegenerateVerticalLine(a0, a1, a2, a3));
                  self->object = object;
                  break;
                }
              }
             default:
             err:
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_GeoDegenerateVerticalLine_equals(t_GeoDegenerateVerticalLine *self, PyObject *args)
          {
            ::java::lang::Object a0((jobject) NULL);
            jboolean result;

            if (!parseArgs(args, "o", &a0))
            {
              OBJ_CALL(result = self->object.equals(a0));
              Py_RETURN_BOOL(result);
            }

            return callSuper(PY_TYPE(GeoDegenerateVerticalLine), (PyObject *) self, "equals", args, 2);
          }

          static PyObject *t_GeoDegenerateVerticalLine_expand(t_GeoDegenerateVerticalLine *self, PyObject *args)
          {
            jdouble a0;
            ::org::apache::lucene::spatial3d::geom::GeoBBox result((jobject) NULL);

            if (!parseArgs(args, "D", &a0))
            {
              OBJ_CALL(result = self->object.expand(a0));
              return ::org::apache::lucene::spatial3d::geom::t_GeoBBox::wrap_Object(result);
            }

            return callSuper(PY_TYPE(GeoDegenerateVerticalLine), (PyObject *) self, "expand", args, 2);
          }

          static PyObject *t_GeoDegenerateVerticalLine_getBounds(t_GeoDegenerateVerticalLine *self, PyObject *args)
          {
            ::org::apache::lucene::spatial3d::geom::Bounds a0((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::spatial3d::geom::Bounds::initializeClass, &a0))
            {
              OBJ_CALL(self->object.getBounds(a0));
              Py_RETURN_NONE;
            }

            return callSuper(PY_TYPE(GeoDegenerateVerticalLine), (PyObject *) self, "getBounds", args, 2);
          }

          static PyObject *t_GeoDegenerateVerticalLine_getCenter(t_GeoDegenerateVerticalLine *self, PyObject *args)
          {
            ::org::apache::lucene::spatial3d::geom::GeoPoint result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.getCenter());
              return ::org::apache::lucene::spatial3d::geom::t_GeoPoint::wrap_Object(result);
            }

            return callSuper(PY_TYPE(GeoDegenerateVerticalLine), (PyObject *) self, "getCenter", args, 2);
          }

          static PyObject *t_GeoDegenerateVerticalLine_getEdgePoints(t_GeoDegenerateVerticalLine *self, PyObject *args)
          {
            JArray< ::org::apache::lucene::spatial3d::geom::GeoPoint > result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.getEdgePoints());
              return JArray<jobject>(result.this$).wrap(::org::apache::lucene::spatial3d::geom::t_GeoPoint::wrap_jobject);
            }

            return callSuper(PY_TYPE(GeoDegenerateVerticalLine), (PyObject *) self, "getEdgePoints", args, 2);
          }

          static PyObject *t_GeoDegenerateVerticalLine_getRadius(t_GeoDegenerateVerticalLine *self, PyObject *args)
          {
            jdouble result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.getRadius());
              return PyFloat_FromDouble((double) result);
            }

            return callSuper(PY_TYPE(GeoDegenerateVerticalLine), (PyObject *) self, "getRadius", args, 2);
          }

          static PyObject *t_GeoDegenerateVerticalLine_getRelationship(t_GeoDegenerateVerticalLine *self, PyObject *args)
          {
            ::org::apache::lucene::spatial3d::geom::GeoShape a0((jobject) NULL);
            jint result;

            if (!parseArgs(args, "k", ::org::apache::lucene::spatial3d::geom::GeoShape::initializeClass, &a0))
            {
              OBJ_CALL(result = self->object.getRelationship(a0));
              return PyLong_FromLong((long) result);
            }

            return callSuper(PY_TYPE(GeoDegenerateVerticalLine), (PyObject *) self, "getRelationship", args, 2);
          }

          static PyObject *t_GeoDegenerateVerticalLine_hashCode(t_GeoDegenerateVerticalLine *self, PyObject *args)
          {
            jint result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.hashCode());
              return PyLong_FromLong((long) result);
            }

            return callSuper(PY_TYPE(GeoDegenerateVerticalLine), (PyObject *) self, "hashCode", args, 2);
          }

          static PyObject *t_GeoDegenerateVerticalLine_intersects(t_GeoDegenerateVerticalLine *self, PyObject *args)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 1:
              {
                ::org::apache::lucene::spatial3d::geom::GeoShape a0((jobject) NULL);
                jboolean result;

                if (!parseArgs(args, "k", ::org::apache::lucene::spatial3d::geom::GeoShape::initializeClass, &a0))
                {
                  OBJ_CALL(result = self->object.intersects(a0));
                  Py_RETURN_BOOL(result);
                }
              }
              break;
             case 3:
              {
                ::org::apache::lucene::spatial3d::geom::Plane a0((jobject) NULL);
                JArray< ::org::apache::lucene::spatial3d::geom::GeoPoint > a1((jobject) NULL);
                JArray< ::org::apache::lucene::spatial3d::geom::Membership > a2((jobject) NULL);
                jboolean result;

                if (!parseArgs(args, "k[k[k", ::org::apache::lucene::spatial3d::geom::Plane::initializeClass, ::org::apache::lucene::spatial3d::geom::GeoPoint::initializeClass, ::org::apache::lucene::spatial3d::geom::Membership::initializeClass, &a0, &a1, &a2))
                {
                  OBJ_CALL(result = self->object.intersects(a0, a1, a2));
                  Py_RETURN_BOOL(result);
                }
              }
            }

            return callSuper(PY_TYPE(GeoDegenerateVerticalLine), (PyObject *) self, "intersects", args, 2);
          }

          static PyObject *t_GeoDegenerateVerticalLine_isWithin(t_GeoDegenerateVerticalLine *self, PyObject *args)
          {
            jdouble a0;
            jdouble a1;
            jdouble a2;
            jboolean result;

            if (!parseArgs(args, "DDD", &a0, &a1, &a2))
            {
              OBJ_CALL(result = self->object.isWithin(a0, a1, a2));
              Py_RETURN_BOOL(result);
            }

            return callSuper(PY_TYPE(GeoDegenerateVerticalLine), (PyObject *) self, "isWithin", args, 2);
          }

          static PyObject *t_GeoDegenerateVerticalLine_toString(t_GeoDegenerateVerticalLine *self, PyObject *args)
          {
            ::java::lang::String result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.toString());
              return j2p(result);
            }

            return callSuper(PY_TYPE(GeoDegenerateVerticalLine), (PyObject *) self, "toString", args, 2);
          }

          static PyObject *t_GeoDegenerateVerticalLine_write(t_GeoDegenerateVerticalLine *self, PyObject *args)
          {
            ::java::io::OutputStream a0((jobject) NULL);

            if (!parseArgs(args, "k", ::java::io::OutputStream::initializeClass, &a0))
            {
              OBJ_CALL(self->object.write(a0));
              Py_RETURN_NONE;
            }

            return callSuper(PY_TYPE(GeoDegenerateVerticalLine), (PyObject *) self, "write", args, 2);
          }

          static PyObject *t_GeoDegenerateVerticalLine_get__center(t_GeoDegenerateVerticalLine *self, void *data)
          {
            ::org::apache::lucene::spatial3d::geom::GeoPoint value((jobject) NULL);
            OBJ_CALL(value = self->object.getCenter());
            return ::org::apache::lucene::spatial3d::geom::t_GeoPoint::wrap_Object(value);
          }

          static PyObject *t_GeoDegenerateVerticalLine_get__edgePoints(t_GeoDegenerateVerticalLine *self, void *data)
          {
            JArray< ::org::apache::lucene::spatial3d::geom::GeoPoint > value((jobject) NULL);
            OBJ_CALL(value = self->object.getEdgePoints());
            return JArray<jobject>(value.this$).wrap(::org::apache::lucene::spatial3d::geom::t_GeoPoint::wrap_jobject);
          }

          static PyObject *t_GeoDegenerateVerticalLine_get__radius(t_GeoDegenerateVerticalLine *self, void *data)
          {
            jdouble value;
            OBJ_CALL(value = self->object.getRadius());
            return PyFloat_FromDouble((double) value);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/store/LockFactory.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/store/Directory.h"
#include "org/apache/lucene/store/Lock.h"
#include "java/lang/String.h"
#include "java/io/IOException.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace store {

        ::java::lang::Class *LockFactory::class$ = NULL;
        jmethodID *LockFactory::mids$ = NULL;
        bool LockFactory::live$ = false;

        jclass LockFactory::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/store/LockFactory");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_f2cc1bce94666404] = env->getMethodID(cls, "<init>", "()V");
            mids$[mid_obtainLock_6aee55f49034dd72] = env->getMethodID(cls, "obtainLock", "(Lorg/apache/lucene/store/Directory;Ljava/lang/String;)Lorg/apache/lucene/store/Lock;");

            class$ = new ::java::lang::Class(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        LockFactory::LockFactory() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_f2cc1bce94666404)) {}

        ::org::apache::lucene::store::Lock LockFactory::obtainLock(const ::org::apache::lucene::store::Directory & a0, const ::java::lang::String & a1) const
        {
          return ::org::apache::lucene::store::Lock(env->callObjectMethod(this$, mids$[mid_obtainLock_6aee55f49034dd72], a0.this$, a1.this$));
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace store {
        static PyObject *t_LockFactory_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_LockFactory_instance_(PyTypeObject *type, PyObject *arg);
        static int t_LockFactory_init_(t_LockFactory *self, PyObject *args, PyObject *kwds);
        static PyObject *t_LockFactory_obtainLock(t_LockFactory *self, PyObject *args);

        static PyMethodDef t_LockFactory__methods_[] = {
          DECLARE_METHOD(t_LockFactory, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_LockFactory, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_LockFactory, obtainLock, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        static PyType_Slot PY_TYPE_SLOTS(LockFactory)[] = {
          { Py_tp_methods, t_LockFactory__methods_ },
          { Py_tp_init, (void *) t_LockFactory_init_ },
          { 0, NULL }
        };

        static PyType_Def *PY_TYPE_BASES(LockFactory)[] = {
          &PY_TYPE_DEF(::java::lang::Object),
          NULL
        };

        DEFINE_TYPE(LockFactory, t_LockFactory, LockFactory);

        void t_LockFactory::install(PyObject *module)
        {
          installType(&PY_TYPE(LockFactory), &PY_TYPE_DEF(LockFactory), module, "LockFactory", 0);
        }

        void t_LockFactory::initialize(PyObject *module)
        {
          PyObject_SetAttrString((PyObject *) PY_TYPE(LockFactory), "class_", make_descriptor(LockFactory::initializeClass, 1));
          PyObject_SetAttrString((PyObject *) PY_TYPE(LockFactory), "wrapfn_", make_descriptor(t_LockFactory::wrap_jobject));
          PyObject_SetAttrString((PyObject *) PY_TYPE(LockFactory), "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_LockFactory_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, LockFactory::initializeClass, 1)))
            return NULL;
          return t_LockFactory::wrap_Object(LockFactory(((t_LockFactory *) arg)->object.this$));
        }
        static PyObject *t_LockFactory_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, LockFactory::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_LockFactory_init_(t_LockFactory *self, PyObject *args, PyObject *kwds)
        {
          LockFactory object((jobject) NULL);

          INT_CALL(object = LockFactory());
          self->object = object;

          return 0;
        }

        static PyObject *t_LockFactory_obtainLock(t_LockFactory *self, PyObject *args)
        {
          ::org::apache::lucene::store::Directory a0((jobject) NULL);
          ::java::lang::String a1((jobject) NULL);
          ::org::apache::lucene::store::Lock result((jobject) NULL);

          if (!parseArgs(args, "ks", ::org::apache::lucene::store::Directory::initializeClass, &a0, &a1))
          {
            OBJ_CALL(result = self->object.obtainLock(a0, a1));
            return ::org::apache::lucene::store::t_Lock::wrap_Object(result);
          }

          PyErr_SetArgsError((PyObject *) self, "obtainLock", args);
          return NULL;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/spatial3d/geom/GeoPointShapeFactory.h"
#include "org/apache/lucene/spatial3d/geom/PlanetModel.h"
#include "org/apache/lucene/spatial3d/geom/GeoPointShape.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace spatial3d {
        namespace geom {

          ::java::lang::Class *GeoPointShapeFactory::class$ = NULL;
          jmethodID *GeoPointShapeFactory::mids$ = NULL;
          bool GeoPointShapeFactory::live$ = false;

          jclass GeoPointShapeFactory::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/spatial3d/geom/GeoPointShapeFactory");

              mids$ = new jmethodID[max_mid];
              mids$[mid_makeGeoPointShape_091ec3f872fd9313] = env->getStaticMethodID(cls, "makeGeoPointShape", "(Lorg/apache/lucene/spatial3d/geom/PlanetModel;DD)Lorg/apache/lucene/spatial3d/geom/GeoPointShape;");

              class$ = new ::java::lang::Class(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          ::org::apache::lucene::spatial3d::geom::GeoPointShape GeoPointShapeFactory::makeGeoPointShape(const ::org::apache::lucene::spatial3d::geom::PlanetModel & a0, jdouble a1, jdouble a2)
          {
            jclass cls = env->getClass(initializeClass);
            return ::org::apache::lucene::spatial3d::geom::GeoPointShape(env->callStaticObjectMethod(cls, mids$[mid_makeGeoPointShape_091ec3f872fd9313], a0.this$, a1, a2));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace spatial3d {
        namespace geom {
          static PyObject *t_GeoPointShapeFactory_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_GeoPointShapeFactory_instance_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_GeoPointShapeFactory_makeGeoPointShape(PyTypeObject *type, PyObject *args);

          static PyMethodDef t_GeoPointShapeFactory__methods_[] = {
            DECLARE_METHOD(t_GeoPointShapeFactory, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_GeoPointShapeFactory, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_GeoPointShapeFactory, makeGeoPointShape, METH_VARARGS | METH_CLASS),
            { NULL, NULL, 0, NULL }
          };

          static PyType_Slot PY_TYPE_SLOTS(GeoPointShapeFactory)[] = {
            { Py_tp_methods, t_GeoPointShapeFactory__methods_ },
            { Py_tp_init, (void *) abstract_init },
            { 0, NULL }
          };

          static PyType_Def *PY_TYPE_BASES(GeoPointShapeFactory)[] = {
            &PY_TYPE_DEF(::java::lang::Object),
            NULL
          };

          DEFINE_TYPE(GeoPointShapeFactory, t_GeoPointShapeFactory, GeoPointShapeFactory);

          void t_GeoPointShapeFactory::install(PyObject *module)
          {
            installType(&PY_TYPE(GeoPointShapeFactory), &PY_TYPE_DEF(GeoPointShapeFactory), module, "GeoPointShapeFactory", 0);
          }

          void t_GeoPointShapeFactory::initialize(PyObject *module)
          {
            PyObject_SetAttrString((PyObject *) PY_TYPE(GeoPointShapeFactory), "class_", make_descriptor(GeoPointShapeFactory::initializeClass, 1));
            PyObject_SetAttrString((PyObject *) PY_TYPE(GeoPointShapeFactory), "wrapfn_", make_descriptor(t_GeoPointShapeFactory::wrap_jobject));
            PyObject_SetAttrString((PyObject *) PY_TYPE(GeoPointShapeFactory), "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_GeoPointShapeFactory_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, GeoPointShapeFactory::initializeClass, 1)))
              return NULL;
            return t_GeoPointShapeFactory::wrap_Object(GeoPointShapeFactory(((t_GeoPointShapeFactory *) arg)->object.this$));
          }
          static PyObject *t_GeoPointShapeFactory_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, GeoPointShapeFactory::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static PyObject *t_GeoPointShapeFactory_makeGeoPointShape(PyTypeObject *type, PyObject *args)
          {
            ::org::apache::lucene::spatial3d::geom::PlanetModel a0((jobject) NULL);
            jdouble a1;
            jdouble a2;
            ::org::apache::lucene::spatial3d::geom::GeoPointShape result((jobject) NULL);

            if (!parseArgs(args, "kDD", ::org::apache::lucene::spatial3d::geom::PlanetModel::initializeClass, &a0, &a1, &a2))
            {
              OBJ_CALL(result = ::org::apache::lucene::spatial3d::geom::GeoPointShapeFactory::makeGeoPointShape(a0, a1, a2));
              return ::org::apache::lucene::spatial3d::geom::t_GeoPointShape::wrap_Object(result);
            }

            PyErr_SetArgsError(type, "makeGeoPointShape", args);
            return NULL;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/hu/HungarianLightStemFilterFactory.h"
#include "java/util/Map.h"
#include "java/lang/String.h"
#include "org/apache/lucene/analysis/TokenStream.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace hu {

          ::java::lang::Class *HungarianLightStemFilterFactory::class$ = NULL;
          jmethodID *HungarianLightStemFilterFactory::mids$ = NULL;
          bool HungarianLightStemFilterFactory::live$ = false;
          ::java::lang::String *HungarianLightStemFilterFactory::NAME = NULL;

          jclass HungarianLightStemFilterFactory::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/hu/HungarianLightStemFilterFactory");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_408bd889ee3beae5] = env->getMethodID(cls, "<init>", "(Ljava/util/Map;)V");
              mids$[mid_create_6de1e28d9d10cd9e] = env->getMethodID(cls, "create", "(Lorg/apache/lucene/analysis/TokenStream;)Lorg/apache/lucene/analysis/TokenStream;");

              class$ = new ::java::lang::Class(cls);
              cls = (jclass) class$->this$;

              NAME = new ::java::lang::String(env->getStaticObjectField(cls, "NAME", "Ljava/lang/String;"));
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          HungarianLightStemFilterFactory::HungarianLightStemFilterFactory(const ::java::util::Map & a0) : ::org::apache::lucene::analysis::util::TokenFilterFactory(env->newObject(initializeClass, &mids$, mid_init$_408bd889ee3beae5, a0.this$)) {}

          ::org::apache::lucene::analysis::TokenStream HungarianLightStemFilterFactory::create(const ::org::apache::lucene::analysis::TokenStream & a0) const
          {
            return ::org::apache::lucene::analysis::TokenStream(env->callObjectMethod(this$, mids$[mid_create_6de1e28d9d10cd9e], a0.this$));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace hu {
          static PyObject *t_HungarianLightStemFilterFactory_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_HungarianLightStemFilterFactory_instance_(PyTypeObject *type, PyObject *arg);
          static int t_HungarianLightStemFilterFactory_init_(t_HungarianLightStemFilterFactory *self, PyObject *args, PyObject *kwds);
          static PyObject *t_HungarianLightStemFilterFactory_create(t_HungarianLightStemFilterFactory *self, PyObject *args);

          static PyMethodDef t_HungarianLightStemFilterFactory__methods_[] = {
            DECLARE_METHOD(t_HungarianLightStemFilterFactory, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_HungarianLightStemFilterFactory, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_HungarianLightStemFilterFactory, create, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          static PyType_Slot PY_TYPE_SLOTS(HungarianLightStemFilterFactory)[] = {
            { Py_tp_methods, t_HungarianLightStemFilterFactory__methods_ },
            { Py_tp_init, (void *) t_HungarianLightStemFilterFactory_init_ },
            { 0, NULL }
          };

          static PyType_Def *PY_TYPE_BASES(HungarianLightStemFilterFactory)[] = {
            &PY_TYPE_DEF(::org::apache::lucene::analysis::util::TokenFilterFactory),
            NULL
          };

          DEFINE_TYPE(HungarianLightStemFilterFactory, t_HungarianLightStemFilterFactory, HungarianLightStemFilterFactory);

          void t_HungarianLightStemFilterFactory::install(PyObject *module)
          {
            installType(&PY_TYPE(HungarianLightStemFilterFactory), &PY_TYPE_DEF(HungarianLightStemFilterFactory), module, "HungarianLightStemFilterFactory", 0);
          }

          void t_HungarianLightStemFilterFactory::initialize(PyObject *module)
          {
            PyObject_SetAttrString((PyObject *) PY_TYPE(HungarianLightStemFilterFactory), "class_", make_descriptor(HungarianLightStemFilterFactory::initializeClass, 1));
            PyObject_SetAttrString((PyObject *) PY_TYPE(HungarianLightStemFilterFactory), "wrapfn_", make_descriptor(t_HungarianLightStemFilterFactory::wrap_jobject));
            PyObject_SetAttrString((PyObject *) PY_TYPE(HungarianLightStemFilterFactory), "boxfn_", make_descriptor(boxObject));
            env->getClass(HungarianLightStemFilterFactory::initializeClass);
            PyObject_SetAttrString((PyObject *) PY_TYPE(HungarianLightStemFilterFactory), "NAME", make_descriptor(j2p(*HungarianLightStemFilterFactory::NAME)));
          }

          static PyObject *t_HungarianLightStemFilterFactory_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, HungarianLightStemFilterFactory::initializeClass, 1)))
              return NULL;
            return t_HungarianLightStemFilterFactory::wrap_Object(HungarianLightStemFilterFactory(((t_HungarianLightStemFilterFactory *) arg)->object.this$));
          }
          static PyObject *t_HungarianLightStemFilterFactory_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, HungarianLightStemFilterFactory::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_HungarianLightStemFilterFactory_init_(t_HungarianLightStemFilterFactory *self, PyObject *args, PyObject *kwds)
          {
            ::java::util::Map a0((jobject) NULL);
            PyTypeObject **p0;
            HungarianLightStemFilterFactory object((jobject) NULL);

            if (!parseArgs(args, "K", ::java::util::Map::initializeClass, &a0, &p0, ::java::util::t_Map::parameters_))
            {
              INT_CALL(object = HungarianLightStemFilterFactory(a0));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_HungarianLightStemFilterFactory_create(t_HungarianLightStemFilterFactory *self, PyObject *args)
          {
            ::org::apache::lucene::analysis::TokenStream a0((jobject) NULL);
            ::org::apache::lucene::analysis::TokenStream result((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::analysis::TokenStream::initializeClass, &a0))
            {
              OBJ_CALL(result = self->object.create(a0));
              return ::org::apache::lucene::analysis::t_TokenStream::wrap_Object(result);
            }

            return callSuper(PY_TYPE(HungarianLightStemFilterFactory), (PyObject *) self, "create", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/index/CheckIndex$Status$StoredFieldStatus.h"
#include "java/lang/Throwable.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {

        ::java::lang::Class *CheckIndex$Status$StoredFieldStatus::class$ = NULL;
        jmethodID *CheckIndex$Status$StoredFieldStatus::mids$ = NULL;
        jfieldID *CheckIndex$Status$StoredFieldStatus::fids$ = NULL;
        bool CheckIndex$Status$StoredFieldStatus::live$ = false;

        jclass CheckIndex$Status$StoredFieldStatus::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/index/CheckIndex$Status$StoredFieldStatus");

            fids$ = new jfieldID[max_fid];
            fids$[fid_docCount] = env->getFieldID(cls, "docCount", "I");
            fids$[fid_error] = env->getFieldID(cls, "error", "Ljava/lang/Throwable;");
            fids$[fid_totFields] = env->getFieldID(cls, "totFields", "J");

            class$ = new ::java::lang::Class(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        jint CheckIndex$Status$StoredFieldStatus::_get_docCount() const
        {
          return env->getIntField(this$, fids$[fid_docCount]);
        }

        void CheckIndex$Status$StoredFieldStatus::_set_docCount(jint a0) const
        {
          env->setIntField(this$, fids$[fid_docCount], a0);
        }

        ::java::lang::Throwable CheckIndex$Status$StoredFieldStatus::_get_error() const
        {
          return ::java::lang::Throwable(env->getObjectField(this$, fids$[fid_error]));
        }

        void CheckIndex$Status$StoredFieldStatus::_set_error(const ::java::lang::Throwable & a0) const
        {
          env->setObjectField(this$, fids$[fid_error], a0.this$);
        }

        jlong CheckIndex$Status$StoredFieldStatus::_get_totFields() const
        {
          return env->getLongField(this$, fids$[fid_totFields]);
        }

        void CheckIndex$Status$StoredFieldStatus::_set_totFields(jlong a0) const
        {
          env->setLongField(this$, fids$[fid_totFields], a0);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {
        static PyObject *t_CheckIndex$Status$StoredFieldStatus_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_CheckIndex$Status$StoredFieldStatus_instance_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_CheckIndex$Status$StoredFieldStatus_get__docCount(t_CheckIndex$Status$StoredFieldStatus *self, void *data);
        static int t_CheckIndex$Status$StoredFieldStatus_set__docCount(t_CheckIndex$Status$StoredFieldStatus *self, PyObject *arg, void *data);
        static PyObject *t_CheckIndex$Status$StoredFieldStatus_get__error(t_CheckIndex$Status$StoredFieldStatus *self, void *data);
        static int t_CheckIndex$Status$StoredFieldStatus_set__error(t_CheckIndex$Status$StoredFieldStatus *self, PyObject *arg, void *data);
        static PyObject *t_CheckIndex$Status$StoredFieldStatus_get__totFields(t_CheckIndex$Status$StoredFieldStatus *self, void *data);
        static int t_CheckIndex$Status$StoredFieldStatus_set__totFields(t_CheckIndex$Status$StoredFieldStatus *self, PyObject *arg, void *data);

        static PyGetSetDef t_CheckIndex$Status$StoredFieldStatus__fields_[] = {
          DECLARE_GETSET_FIELD(t_CheckIndex$Status$StoredFieldStatus, docCount),
          DECLARE_GETSET_FIELD(t_CheckIndex$Status$StoredFieldStatus, error),
          DECLARE_GETSET_FIELD(t_CheckIndex$Status$StoredFieldStatus, totFields),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_CheckIndex$Status$StoredFieldStatus__methods_[] = {
          DECLARE_METHOD(t_CheckIndex$Status$StoredFieldStatus, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_CheckIndex$Status$StoredFieldStatus, instance_, METH_O | METH_CLASS),
          { NULL, NULL, 0, NULL }
        };

        static PyType_Slot PY_TYPE_SLOTS(CheckIndex$Status$StoredFieldStatus)[] = {
          { Py_tp_methods, t_CheckIndex$Status$StoredFieldStatus__methods_ },
          { Py_tp_init, (void *) abstract_init },
          { Py_tp_getset, t_CheckIndex$Status$StoredFieldStatus__fields_ },
          { 0, NULL }
        };

        static PyType_Def *PY_TYPE_BASES(CheckIndex$Status$StoredFieldStatus)[] = {
          &PY_TYPE_DEF(::java::lang::Object),
          NULL
        };

        DEFINE_TYPE(CheckIndex$Status$StoredFieldStatus, t_CheckIndex$Status$StoredFieldStatus, CheckIndex$Status$StoredFieldStatus);

        void t_CheckIndex$Status$StoredFieldStatus::install(PyObject *module)
        {
          installType(&PY_TYPE(CheckIndex$Status$StoredFieldStatus), &PY_TYPE_DEF(CheckIndex$Status$StoredFieldStatus), module, "CheckIndex$Status$StoredFieldStatus", 0);
        }

        void t_CheckIndex$Status$StoredFieldStatus::initialize(PyObject *module)
        {
          PyObject_SetAttrString((PyObject *) PY_TYPE(CheckIndex$Status$StoredFieldStatus), "class_", make_descriptor(CheckIndex$Status$StoredFieldStatus::initializeClass, 1));
          PyObject_SetAttrString((PyObject *) PY_TYPE(CheckIndex$Status$StoredFieldStatus), "wrapfn_", make_descriptor(t_CheckIndex$Status$StoredFieldStatus::wrap_jobject));
          PyObject_SetAttrString((PyObject *) PY_TYPE(CheckIndex$Status$StoredFieldStatus), "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_CheckIndex$Status$StoredFieldStatus_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, CheckIndex$Status$StoredFieldStatus::initializeClass, 1)))
            return NULL;
          return t_CheckIndex$Status$StoredFieldStatus::wrap_Object(CheckIndex$Status$StoredFieldStatus(((t_CheckIndex$Status$StoredFieldStatus *) arg)->object.this$));
        }
        static PyObject *t_CheckIndex$Status$StoredFieldStatus_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, CheckIndex$Status$StoredFieldStatus::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static PyObject *t_CheckIndex$Status$StoredFieldStatus_get__docCount(t_CheckIndex$Status$StoredFieldStatus *self, void *data)
        {
          jint value;
          OBJ_CALL(value = self->object._get_docCount());
          return PyLong_FromLong((long) value);
        }
        static int t_CheckIndex$Status$StoredFieldStatus_set__docCount(t_CheckIndex$Status$StoredFieldStatus *self, PyObject *arg, void *data)
        {
          jint value;
          if (!parseArg(arg, "I", &value))
          {
            INT_CALL(self->object._set_docCount(value));
            return 0;
          }
          PyErr_SetArgsError((PyObject *) self, "docCount", arg);
          return -1;
        }

        static PyObject *t_CheckIndex$Status$StoredFieldStatus_get__error(t_CheckIndex$Status$StoredFieldStatus *self, void *data)
        {
          ::java::lang::Throwable value((jobject) NULL);
          OBJ_CALL(value = self->object._get_error());
          return ::java::lang::t_Throwable::wrap_Object(value);
        }
        static int t_CheckIndex$Status$StoredFieldStatus_set__error(t_CheckIndex$Status$StoredFieldStatus *self, PyObject *arg, void *data)
        {
          ::java::lang::Throwable value((jobject) NULL);
          if (!parseArg(arg, "k", ::java::lang::Throwable::initializeClass, &value))
          {
            INT_CALL(self->object._set_error(value));
            return 0;
          }
          PyErr_SetArgsError((PyObject *) self, "error", arg);
          return -1;
        }

        static PyObject *t_CheckIndex$Status$StoredFieldStatus_get__totFields(t_CheckIndex$Status$StoredFieldStatus *self, void *data)
        {
          jlong value;
          OBJ_CALL(value = self->object._get_totFields());
          return PyLong_FromLongLong((PY_LONG_LONG) value);
        }
        static int t_CheckIndex$Status$StoredFieldStatus_set__totFields(t_CheckIndex$Status$StoredFieldStatus *self, PyObject *arg, void *data)
        {
          jlong value;
          if (!parseArg(arg, "J", &value))
          {
            INT_CALL(self->object._set_totFields(value));
            return 0;
          }
          PyErr_SetArgsError((PyObject *) self, "totFields", arg);
          return -1;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/expressions/js/JavascriptParser$BoolcompContext.h"
#include "java/lang/Class.h"
#include "java/lang/Object.h"
#include "java/util/List.h"
#include "org/antlr/v4/runtime/Token.h"
#include "org/antlr/v4/runtime/atn/ParserATNSimulator.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace expressions {
        namespace js {

          ::java::lang::Class *JavascriptParser$BoolcompContext::class$ = NULL;
          jmethodID *JavascriptParser$BoolcompContext::mids$ = NULL;
          bool JavascriptParser$BoolcompContext::live$ = false;

          jclass JavascriptParser$BoolcompContext::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/expressions/js/JavascriptParser$BoolcompContext");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_5b630188893587b5] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/expressions/js/JavascriptParser$ExpressionContext;)V");
              mids$[mid_expression_49ec78390f08338a] = env->getMethodID(cls, "expression", "()Ljava/util/List;");
              mids$[mid_expression_a4fb3fdc55d1c64a] = env->getMethodID(cls, "expression", "(I)Lorg/apache/lucene/expressions/js/JavascriptParser$ExpressionContext;");

              class$ = new ::java::lang::Class(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          JavascriptParser$BoolcompContext::JavascriptParser$BoolcompContext(const ::org::apache::lucene::expressions::js::JavascriptParser$ExpressionContext & a0) : ::org::apache::lucene::expressions::js::JavascriptParser$ExpressionContext(env->newObject(initializeClass, &mids$, mid_init$_5b630188893587b5, a0.this$)) {}

          ::java::util::List JavascriptParser$BoolcompContext::expression() const
          {
            return ::java::util::List(env->callObjectMethod(this$, mids$[mid_expression_49ec78390f08338a]));
          }

          ::org::apache::lucene::expressions::js::JavascriptParser$ExpressionContext JavascriptParser$BoolcompContext::expression(jint a0) const
          {
            return ::org::apache::lucene::expressions::js::JavascriptParser$ExpressionContext(env->callObjectMethod(this$, mids$[mid_expression_a4fb3fdc55d1c64a], a0));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace expressions {
        namespace js {
          static PyObject *t_JavascriptParser$BoolcompContext_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_JavascriptParser$BoolcompContext_instance_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_JavascriptParser$BoolcompContext_of_(t_JavascriptParser$BoolcompContext *self, PyObject *args);
          static int t_JavascriptParser$BoolcompContext_init_(t_JavascriptParser$BoolcompContext *self, PyObject *args, PyObject *kwds);
          static PyObject *t_JavascriptParser$BoolcompContext_expression(t_JavascriptParser$BoolcompContext *self, PyObject *args);
          static PyObject *t_JavascriptParser$BoolcompContext_get__parameters_(t_JavascriptParser$BoolcompContext *self, void *data);
          static PyGetSetDef t_JavascriptParser$BoolcompContext__fields_[] = {
            DECLARE_GET_FIELD(t_JavascriptParser$BoolcompContext, parameters_),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_JavascriptParser$BoolcompContext__methods_[] = {
            DECLARE_METHOD(t_JavascriptParser$BoolcompContext, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_JavascriptParser$BoolcompContext, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_JavascriptParser$BoolcompContext, of_, METH_VARARGS),
            DECLARE_METHOD(t_JavascriptParser$BoolcompContext, expression, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          static PyType_Slot PY_TYPE_SLOTS(JavascriptParser$BoolcompContext)[] = {
            { Py_tp_methods, t_JavascriptParser$BoolcompContext__methods_ },
            { Py_tp_init, (void *) t_JavascriptParser$BoolcompContext_init_ },
            { Py_tp_getset, t_JavascriptParser$BoolcompContext__fields_ },
            { 0, NULL }
          };

          static PyType_Def *PY_TYPE_BASES(JavascriptParser$BoolcompContext)[] = {
            &PY_TYPE_DEF(::org::apache::lucene::expressions::js::JavascriptParser$ExpressionContext),
            NULL
          };

          DEFINE_TYPE(JavascriptParser$BoolcompContext, t_JavascriptParser$BoolcompContext, JavascriptParser$BoolcompContext);
          PyObject *t_JavascriptParser$BoolcompContext::wrap_Object(const JavascriptParser$BoolcompContext& object, PyTypeObject *p0, PyTypeObject *p1)
          {
            PyObject *obj = t_JavascriptParser$BoolcompContext::wrap_Object(object);
            if (obj != NULL && obj != Py_None)
            {
              t_JavascriptParser$BoolcompContext *self = (t_JavascriptParser$BoolcompContext *) obj;
              self->parameters[0] = p0;
              self->parameters[1] = p1;
            }
            return obj;
          }

          PyObject *t_JavascriptParser$BoolcompContext::wrap_jobject(const jobject& object, PyTypeObject *p0, PyTypeObject *p1)
          {
            PyObject *obj = t_JavascriptParser$BoolcompContext::wrap_jobject(object);
            if (obj != NULL && obj != Py_None)
            {
              t_JavascriptParser$BoolcompContext *self = (t_JavascriptParser$BoolcompContext *) obj;
              self->parameters[0] = p0;
              self->parameters[1] = p1;
            }
            return obj;
          }

          void t_JavascriptParser$BoolcompContext::install(PyObject *module)
          {
            installType(&PY_TYPE(JavascriptParser$BoolcompContext), &PY_TYPE_DEF(JavascriptParser$BoolcompContext), module, "JavascriptParser$BoolcompContext", 0);
          }

          void t_JavascriptParser$BoolcompContext::initialize(PyObject *module)
          {
            PyObject_SetAttrString((PyObject *) PY_TYPE(JavascriptParser$BoolcompContext), "class_", make_descriptor(JavascriptParser$BoolcompContext::initializeClass, 1));
            PyObject_SetAttrString((PyObject *) PY_TYPE(JavascriptParser$BoolcompContext), "wrapfn_", make_descriptor(t_JavascriptParser$BoolcompContext::wrap_jobject));
            PyObject_SetAttrString((PyObject *) PY_TYPE(JavascriptParser$BoolcompContext), "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_JavascriptParser$BoolcompContext_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, JavascriptParser$BoolcompContext::initializeClass, 1)))
              return NULL;
            return t_JavascriptParser$BoolcompContext::wrap_Object(JavascriptParser$BoolcompContext(((t_JavascriptParser$BoolcompContext *) arg)->object.this$));
          }
          static PyObject *t_JavascriptParser$BoolcompContext_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, JavascriptParser$BoolcompContext::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static PyObject *t_JavascriptParser$BoolcompContext_of_(t_JavascriptParser$BoolcompContext *self, PyObject *args)
          {
            if (!parseArg(args, "T", 2, &(self->parameters)))
              Py_RETURN_SELF;
            return PyErr_SetArgsError((PyObject *) self, "of_", args);
          }

          static int t_JavascriptParser$BoolcompContext_init_(t_JavascriptParser$BoolcompContext *self, PyObject *args, PyObject *kwds)
          {
            ::org::apache::lucene::expressions::js::JavascriptParser$ExpressionContext a0((jobject) NULL);
            PyTypeObject **p0;
            JavascriptParser$BoolcompContext object((jobject) NULL);

            if (!parseArgs(args, "K", ::org::apache::lucene::expressions::js::JavascriptParser$ExpressionContext::initializeClass, &a0, &p0, ::org::apache::lucene::expressions::js::t_JavascriptParser$ExpressionContext::parameters_))
            {
              INT_CALL(object = JavascriptParser$BoolcompContext(a0));
              self->object = object;
              self->parameters[0] = ::org::antlr::v4::runtime::PY_TYPE(Token);
              self->parameters[1] = ::org::antlr::v4::runtime::atn::PY_TYPE(ParserATNSimulator);
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_JavascriptParser$BoolcompContext_expression(t_JavascriptParser$BoolcompContext *self, PyObject *args)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 0:
              {
                ::java::util::List result((jobject) NULL);
                OBJ_CALL(result = self->object.expression());
                return ::java::util::t_List::wrap_Object(result, ::org::apache::lucene::expressions::js::PY_TYPE(JavascriptParser$ExpressionContext));
              }
              break;
             case 1:
              {
                jint a0;
                ::org::apache::lucene::expressions::js::JavascriptParser$ExpressionContext result((jobject) NULL);

                if (!parseArgs(args, "I", &a0))
                {
                  OBJ_CALL(result = self->object.expression(a0));
                  return ::org::apache::lucene::expressions::js::t_JavascriptParser$ExpressionContext::wrap_Object(result);
                }
              }
            }

            PyErr_SetArgsError((PyObject *) self, "expression", args);
            return NULL;
          }
          static PyObject *t_JavascriptParser$BoolcompContext_get__parameters_(t_JavascriptParser$BoolcompContext *self, void *data)
          {
            return typeParameters(self->parameters, sizeof(self->parameters));
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/codecs/bloom/BloomFilteringPostingsFormat.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/index/SegmentReadState.h"
#include "org/apache/lucene/index/SegmentWriteState.h"
#include "java/lang/String.h"
#include "org/apache/lucene/codecs/FieldsConsumer.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/codecs/FieldsProducer.h"
#include "org/apache/lucene/codecs/bloom/BloomFilterFactory.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace codecs {
        namespace bloom {

          ::java::lang::Class *BloomFilteringPostingsFormat::class$ = NULL;
          jmethodID *BloomFilteringPostingsFormat::mids$ = NULL;
          bool BloomFilteringPostingsFormat::live$ = false;
          ::java::lang::String *BloomFilteringPostingsFormat::BLOOM_CODEC_NAME = NULL;
          jint BloomFilteringPostingsFormat::VERSION_CURRENT = (jint) 0;
          jint BloomFilteringPostingsFormat::VERSION_START = (jint) 0;

          jclass BloomFilteringPostingsFormat::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/codecs/bloom/BloomFilteringPostingsFormat");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_f2cc1bce94666404] = env->getMethodID(cls, "<init>", "()V");
              mids$[mid_init$_1a8e5a4e47d4025e] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/codecs/PostingsFormat;)V");
              mids$[mid_init$_4c9b78eacfcc6d6c] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/codecs/PostingsFormat;Lorg/apache/lucene/codecs/bloom/BloomFilterFactory;)V");
              mids$[mid_fieldsConsumer_876dc181a1f61814] = env->getMethodID(cls, "fieldsConsumer", "(Lorg/apache/lucene/index/SegmentWriteState;)Lorg/apache/lucene/codecs/FieldsConsumer;");
              mids$[mid_fieldsProducer_c39bdf540a53fab9] = env->getMethodID(cls, "fieldsProducer", "(Lorg/apache/lucene/index/SegmentReadState;)Lorg/apache/lucene/codecs/FieldsProducer;");
              mids$[mid_toString_db9b55ba01e03e4b] = env->getMethodID(cls, "toString", "()Ljava/lang/String;");

              class$ = new ::java::lang::Class(cls);
              cls = (jclass) class$->this$;

              BLOOM_CODEC_NAME = new ::java::lang::String(env->getStaticObjectField(cls, "BLOOM_CODEC_NAME", "Ljava/lang/String;"));
              VERSION_CURRENT = env->getStaticIntField(cls, "VERSION_CURRENT");
              VERSION_START = env->getStaticIntField(cls, "VERSION_START");
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          BloomFilteringPostingsFormat::BloomFilteringPostingsFormat() : ::org::apache::lucene::codecs::PostingsFormat(env->newObject(initializeClass, &mids$, mid_init$_f2cc1bce94666404)) {}

          BloomFilteringPostingsFormat::BloomFilteringPostingsFormat(const ::org::apache::lucene::codecs::PostingsFormat & a0) : ::org::apache::lucene::codecs::PostingsFormat(env->newObject(initializeClass, &mids$, mid_init$_1a8e5a4e47d4025e, a0.this$)) {}

          BloomFilteringPostingsFormat::BloomFilteringPostingsFormat(const ::org::apache::lucene::codecs::PostingsFormat & a0, const ::org::apache::lucene::codecs::bloom::BloomFilterFactory & a1) : ::org::apache::lucene::codecs::PostingsFormat(env->newObject(initializeClass, &mids$, mid_init$_4c9b78eacfcc6d6c, a0.this$, a1.this$)) {}

          ::org::apache::lucene::codecs::FieldsConsumer BloomFilteringPostingsFormat::fieldsConsumer(const ::org::apache::lucene::index::SegmentWriteState & a0) const
          {
            return ::org::apache::lucene::codecs::FieldsConsumer(env->callObjectMethod(this$, mids$[mid_fieldsConsumer_876dc181a1f61814], a0.this$));
          }

          ::org::apache::lucene::codecs::FieldsProducer BloomFilteringPostingsFormat::fieldsProducer(const ::org::apache::lucene::index::SegmentReadState & a0) const
          {
            return ::org::apache::lucene::codecs::FieldsProducer(env->callObjectMethod(this$, mids$[mid_fieldsProducer_c39bdf540a53fab9], a0.this$));
          }

          ::java::lang::String BloomFilteringPostingsFormat::toString() const
          {
            return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_db9b55ba01e03e4b]));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace codecs {
        namespace bloom {
          static PyObject *t_BloomFilteringPostingsFormat_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_BloomFilteringPostingsFormat_instance_(PyTypeObject *type, PyObject *arg);
          static int t_BloomFilteringPostingsFormat_init_(t_BloomFilteringPostingsFormat *self, PyObject *args, PyObject *kwds);
          static PyObject *t_BloomFilteringPostingsFormat_fieldsConsumer(t_BloomFilteringPostingsFormat *self, PyObject *args);
          static PyObject *t_BloomFilteringPostingsFormat_fieldsProducer(t_BloomFilteringPostingsFormat *self, PyObject *args);
          static PyObject *t_BloomFilteringPostingsFormat_toString(t_BloomFilteringPostingsFormat *self, PyObject *args);

          static PyMethodDef t_BloomFilteringPostingsFormat__methods_[] = {
            DECLARE_METHOD(t_BloomFilteringPostingsFormat, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_BloomFilteringPostingsFormat, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_BloomFilteringPostingsFormat, fieldsConsumer, METH_VARARGS),
            DECLARE_METHOD(t_BloomFilteringPostingsFormat, fieldsProducer, METH_VARARGS),
            DECLARE_METHOD(t_BloomFilteringPostingsFormat, toString, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          static PyType_Slot PY_TYPE_SLOTS(BloomFilteringPostingsFormat)[] = {
            { Py_tp_methods, t_BloomFilteringPostingsFormat__methods_ },
            { Py_tp_init, (void *) t_BloomFilteringPostingsFormat_init_ },
            { 0, NULL }
          };

          static PyType_Def *PY_TYPE_BASES(BloomFilteringPostingsFormat)[] = {
            &PY_TYPE_DEF(::org::apache::lucene::codecs::PostingsFormat),
            NULL
          };

          DEFINE_TYPE(BloomFilteringPostingsFormat, t_BloomFilteringPostingsFormat, BloomFilteringPostingsFormat);

          void t_BloomFilteringPostingsFormat::install(PyObject *module)
          {
            installType(&PY_TYPE(BloomFilteringPostingsFormat), &PY_TYPE_DEF(BloomFilteringPostingsFormat), module, "BloomFilteringPostingsFormat", 0);
          }

          void t_BloomFilteringPostingsFormat::initialize(PyObject *module)
          {
            PyObject_SetAttrString((PyObject *) PY_TYPE(BloomFilteringPostingsFormat), "class_", make_descriptor(BloomFilteringPostingsFormat::initializeClass, 1));
            PyObject_SetAttrString((PyObject *) PY_TYPE(BloomFilteringPostingsFormat), "wrapfn_", make_descriptor(t_BloomFilteringPostingsFormat::wrap_jobject));
            PyObject_SetAttrString((PyObject *) PY_TYPE(BloomFilteringPostingsFormat), "boxfn_", make_descriptor(boxObject));
            env->getClass(BloomFilteringPostingsFormat::initializeClass);
            PyObject_SetAttrString((PyObject *) PY_TYPE(BloomFilteringPostingsFormat), "BLOOM_CODEC_NAME", make_descriptor(j2p(*BloomFilteringPostingsFormat::BLOOM_CODEC_NAME)));
            PyObject_SetAttrString((PyObject *) PY_TYPE(BloomFilteringPostingsFormat), "VERSION_CURRENT", make_descriptor(BloomFilteringPostingsFormat::VERSION_CURRENT));
            PyObject_SetAttrString((PyObject *) PY_TYPE(BloomFilteringPostingsFormat), "VERSION_START", make_descriptor(BloomFilteringPostingsFormat::VERSION_START));
          }

          static PyObject *t_BloomFilteringPostingsFormat_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, BloomFilteringPostingsFormat::initializeClass, 1)))
              return NULL;
            return t_BloomFilteringPostingsFormat::wrap_Object(BloomFilteringPostingsFormat(((t_BloomFilteringPostingsFormat *) arg)->object.this$));
          }
          static PyObject *t_BloomFilteringPostingsFormat_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, BloomFilteringPostingsFormat::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_BloomFilteringPostingsFormat_init_(t_BloomFilteringPostingsFormat *self, PyObject *args, PyObject *kwds)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 0:
              {
                BloomFilteringPostingsFormat object((jobject) NULL);

                INT_CALL(object = BloomFilteringPostingsFormat());
                self->object = object;
                break;
              }
             case 1:
              {
                ::org::apache::lucene::codecs::PostingsFormat a0((jobject) NULL);
                BloomFilteringPostingsFormat object((jobject) NULL);

                if (!parseArgs(args, "k", ::org::apache::lucene::codecs::PostingsFormat::initializeClass, &a0))
                {
                  INT_CALL(object = BloomFilteringPostingsFormat(a0));
                  self->object = object;
                  break;
                }
              }
              goto err;
             case 2:
              {
                ::org::apache::lucene::codecs::PostingsFormat a0((jobject) NULL);
                ::org::apache::lucene::codecs::bloom::BloomFilterFactory a1((jobject) NULL);
                BloomFilteringPostingsFormat object((jobject) NULL);

                if (!parseArgs(args, "kk", ::org::apache::lucene::codecs::PostingsFormat::initializeClass, ::org::apache::lucene::codecs::bloom::BloomFilterFactory::initializeClass, &a0, &a1))
                {
                  INT_CALL(object = BloomFilteringPostingsFormat(a0, a1));
                  self->object = object;
                  break;
                }
              }
             default:
             err:
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_BloomFilteringPostingsFormat_fieldsConsumer(t_BloomFilteringPostingsFormat *self, PyObject *args)
          {
            ::org::apache::lucene::index::SegmentWriteState a0((jobject) NULL);
            ::org::apache::lucene::codecs::FieldsConsumer result((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::index::SegmentWriteState::initializeClass, &a0))
            {
              OBJ_CALL(result = self->object.fieldsConsumer(a0));
              return ::org::apache::lucene::codecs::t_FieldsConsumer::wrap_Object(result);
            }

            return callSuper(PY_TYPE(BloomFilteringPostingsFormat), (PyObject *) self, "fieldsConsumer", args, 2);
          }

          static PyObject *t_BloomFilteringPostingsFormat_fieldsProducer(t_BloomFilteringPostingsFormat *self, PyObject *args)
          {
            ::org::apache::lucene::index::SegmentReadState a0((jobject) NULL);
            ::org::apache::lucene::codecs::FieldsProducer result((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::index::SegmentReadState::initializeClass, &a0))
            {
              OBJ_CALL(result = self->object.fieldsProducer(a0));
              return ::org::apache::lucene::codecs::t_FieldsProducer::wrap_Object(result);
            }

            return callSuper(PY_TYPE(BloomFilteringPostingsFormat), (PyObject *) self, "fieldsProducer", args, 2);
          }

          static PyObject *t_BloomFilteringPostingsFormat_toString(t_BloomFilteringPostingsFormat *self, PyObject *args)
          {
            ::java::lang::String result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.toString());
              return j2p(result);
            }

            return callSuper(PY_TYPE(BloomFilteringPostingsFormat), (PyObject *) self, "toString", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "java/util/HashMap.h"
#include "java/util/Map.h"
#include "java/util/Collection.h"
#include "java/util/Map$Entry.h"
#include "java/lang/Cloneable.h"
#include "java/util/function/BiConsumer.h"
#include "java/lang/Class.h"
#include "java/lang/Object.h"
#include "java/util/function/Function.h"
#include "java/util/function/BiFunction.h"
#include "java/util/Set.h"
#include "java/io/Serializable.h"
#include "JArray.h"

namespace java {
  namespace util {

    ::java::lang::Class *HashMap::class$ = NULL;
    jmethodID *HashMap::mids$ = NULL;
    bool HashMap::live$ = false;

    jclass HashMap::initializeClass(bool getOnly)
    {
      if (getOnly)
        return (jclass) (live$ ? class$->this$ : NULL);
      if (class$ == NULL)
      {
        jclass cls = (jclass) env->findClass("java/util/HashMap");

        mids$ = new jmethodID[max_mid];
        mids$[mid_init$_f2cc1bce94666404] = env->getMethodID(cls, "<init>", "()V");
        mids$[mid_init$_040c4cd0390c5aff] = env->getMethodID(cls, "<init>", "(I)V");
        mids$[mid_init$_408bd889ee3beae5] = env->getMethodID(cls, "<init>", "(Ljava/util/Map;)V");
        mids$[mid_init$_da161bce5801b190] = env->getMethodID(cls, "<init>", "(IF)V");
        mids$[mid_clear_f2cc1bce94666404] = env->getMethodID(cls, "clear", "()V");
        mids$[mid_clone_d6bcd06f3102c4d9] = env->getMethodID(cls, "clone", "()Ljava/lang/Object;");
        mids$[mid_compute_a077e9e27d3c234f] = env->getMethodID(cls, "compute", "(Ljava/lang/Object;Ljava/util/function/BiFunction;)Ljava/lang/Object;");
        mids$[mid_computeIfAbsent_d6f5a32db425833f] = env->getMethodID(cls, "computeIfAbsent", "(Ljava/lang/Object;Ljava/util/function/Function;)Ljava/lang/Object;");
        mids$[mid_computeIfPresent_a077e9e27d3c234f] = env->getMethodID(cls, "computeIfPresent", "(Ljava/lang/Object;Ljava/util/function/BiFunction;)Ljava/lang/Object;");
        mids$[mid_containsKey_8b72f2dcdde6fd1d] = env->getMethodID(cls, "containsKey", "(Ljava/lang/Object;)Z");
        mids$[mid_containsValue_8b72f2dcdde6fd1d] = env->getMethodID(cls, "containsValue", "(Ljava/lang/Object;)Z");
        mids$[mid_entrySet_7dcf4034c6d1a92a] = env->getMethodID(cls, "entrySet", "()Ljava/util/Set;");
        mids$[mid_forEach_94704ed6ccc48468] = env->getMethodID(cls, "forEach", "(Ljava/util/function/BiConsumer;)V");
        mids$[mid_get_e5ae0f8c04795fa9] = env->getMethodID(cls, "get", "(Ljava/lang/Object;)Ljava/lang/Object;");
        mids$[mid_getOrDefault_128a89bbc17a8b69] = env->getMethodID(cls, "getOrDefault", "(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;");
        mids$[mid_isEmpty_8454bd5aa23fd11e] = env->getMethodID(cls, "isEmpty", "()Z");
        mids$[mid_keySet_7dcf4034c6d1a92a] = env->getMethodID(cls, "keySet", "()Ljava/util/Set;");
        mids$[mid_merge_74daa8a3464479e0] = env->getMethodID(cls, "merge", "(Ljava/lang/Object;Ljava/lang/Object;Ljava/util/function/BiFunction;)Ljava/lang/Object;");
        mids$[mid_put_128a89bbc17a8b69] = env->getMethodID(cls, "put", "(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;");
        mids$[mid_putAll_408bd889ee3beae5] = env->getMethodID(cls, "putAll", "(Ljava/util/Map;)V");
        mids$[mid_putIfAbsent_128a89bbc17a8b69] = env->getMethodID(cls, "putIfAbsent", "(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;");
        mids$[mid_remove_e5ae0f8c04795fa9] = env->getMethodID(cls, "remove", "(Ljava/lang/Object;)Ljava/lang/Object;");
        mids$[mid_remove_b06c7be184b2a9ad] = env->getMethodID(cls, "remove", "(Ljava/lang/Object;Ljava/lang/Object;)Z");
        mids$[mid_replace_128a89bbc17a8b69] = env->getMethodID(cls, "replace", "(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;");
        mids$[mid_replace_fe62c765dba52df0] = env->getMethodID(cls, "replace", "(Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)Z");
        mids$[mid_replaceAll_22221e328874bd4f] = env->getMethodID(cls, "replaceAll", "(Ljava/util/function/BiFunction;)V");
        mids$[mid_size_9972fcc56b44e79d] = env->getMethodID(cls, "size", "()I");
        mids$[mid_values_d4dfbf7a26ff41df] = env->getMethodID(cls, "values", "()Ljava/util/Collection;");

        class$ = new ::java::lang::Class(cls);
        live$ = true;
      }
      return (jclass) class$->this$;
    }

    HashMap::HashMap() : ::java::util::AbstractMap(env->newObject(initializeClass, &mids$, mid_init$_f2cc1bce94666404)) {}

    HashMap::HashMap(jint a0) : ::java::util::AbstractMap(env->newObject(initializeClass, &mids$, mid_init$_040c4cd0390c5aff, a0)) {}

    HashMap::HashMap(const ::java::util::Map & a0) : ::java::util::AbstractMap(env->newObject(initializeClass, &mids$, mid_init$_408bd889ee3beae5, a0.this$)) {}

    HashMap::HashMap(jint a0, jfloat a1) : ::java::util::AbstractMap(env->newObject(initializeClass, &mids$, mid_init$_da161bce5801b190, a0, a1)) {}

    void HashMap::clear() const
    {
      env->callVoidMethod(this$, mids$[mid_clear_f2cc1bce94666404]);
    }

    ::java::lang::Object HashMap::clone() const
    {
      return ::java::lang::Object(env->callObjectMethod(this$, mids$[mid_clone_d6bcd06f3102c4d9]));
    }

    ::java::lang::Object HashMap::compute(const ::java::lang::Object & a0, const ::java::util::function::BiFunction & a1) const
    {
      return ::java::lang::Object(env->callObjectMethod(this$, mids$[mid_compute_a077e9e27d3c234f], a0.this$, a1.this$));
    }

    ::java::lang::Object HashMap::computeIfAbsent(const ::java::lang::Object & a0, const ::java::util::function::Function & a1) const
    {
      return ::java::lang::Object(env->callObjectMethod(this$, mids$[mid_computeIfAbsent_d6f5a32db425833f], a0.this$, a1.this$));
    }

    ::java::lang::Object HashMap::computeIfPresent(const ::java::lang::Object & a0, const ::java::util::function::BiFunction & a1) const
    {
      return ::java::lang::Object(env->callObjectMethod(this$, mids$[mid_computeIfPresent_a077e9e27d3c234f], a0.this$, a1.this$));
    }

    jboolean HashMap::containsKey(const ::java::lang::Object & a0) const
    {
      return env->callBooleanMethod(this$, mids$[mid_containsKey_8b72f2dcdde6fd1d], a0.this$);
    }

    jboolean HashMap::containsValue(const ::java::lang::Object & a0) const
    {
      return env->callBooleanMethod(this$, mids$[mid_containsValue_8b72f2dcdde6fd1d], a0.this$);
    }

    ::java::util::Set HashMap::entrySet() const
    {
      return ::java::util::Set(env->callObjectMethod(this$, mids$[mid_entrySet_7dcf4034c6d1a92a]));
    }

    void HashMap::forEach(const ::java::util::function::BiConsumer & a0) const
    {
      env->callVoidMethod(this$, mids$[mid_forEach_94704ed6ccc48468], a0.this$);
    }

    ::java::lang::Object HashMap::get(const ::java::lang::Object & a0) const
    {
      return ::java::lang::Object(env->callObjectMethod(this$, mids$[mid_get_e5ae0f8c04795fa9], a0.this$));
    }

    ::java::lang::Object HashMap::getOrDefault(const ::java::lang::Object & a0, const ::java::lang::Object & a1) const
    {
      return ::java::lang::Object(env->callObjectMethod(this$, mids$[mid_getOrDefault_128a89bbc17a8b69], a0.this$, a1.this$));
    }

    jboolean HashMap::isEmpty() const
    {
      return env->callBooleanMethod(this$, mids$[mid_isEmpty_8454bd5aa23fd11e]);
    }

    ::java::util::Set HashMap::keySet() const
    {
      return ::java::util::Set(env->callObjectMethod(this$, mids$[mid_keySet_7dcf4034c6d1a92a]));
    }

    ::java::lang::Object HashMap::merge(const ::java::lang::Object & a0, const ::java::lang::Object & a1, const ::java::util::function::BiFunction & a2) const
    {
      return ::java::lang::Object(env->callObjectMethod(this$, mids$[mid_merge_74daa8a3464479e0], a0.this$, a1.this$, a2.this$));
    }

    ::java::lang::Object HashMap::put(const ::java::lang::Object & a0, const ::java::lang::Object & a1) const
    {
      return ::java::lang::Object(env->callObjectMethod(this$, mids$[mid_put_128a89bbc17a8b69], a0.this$, a1.this$));
    }

    void HashMap::putAll(const ::java::util::Map & a0) const
    {
      env->callVoidMethod(this$, mids$[mid_putAll_408bd889ee3beae5], a0.this$);
    }

    ::java::lang::Object HashMap::putIfAbsent(const ::java::lang::Object & a0, const ::java::lang::Object & a1) const
    {
      return ::java::lang::Object(env->callObjectMethod(this$, mids$[mid_putIfAbsent_128a89bbc17a8b69], a0.this$, a1.this$));
    }

    ::java::lang::Object HashMap::remove(const ::java::lang::Object & a0) const
    {
      return ::java::lang::Object(env->callObjectMethod(this$, mids$[mid_remove_e5ae0f8c04795fa9], a0.this$));
    }

    jboolean HashMap::remove(const ::java::lang::Object & a0, const ::java::lang::Object & a1) const
    {
      return env->callBooleanMethod(this$, mids$[mid_remove_b06c7be184b2a9ad], a0.this$, a1.this$);
    }

    ::java::lang::Object HashMap::replace(const ::java::lang::Object & a0, const ::java::lang::Object & a1) const
    {
      return ::java::lang::Object(env->callObjectMethod(this$, mids$[mid_replace_128a89bbc17a8b69], a0.this$, a1.this$));
    }

    jboolean HashMap::replace(const ::java::lang::Object & a0, const ::java::lang::Object & a1, const ::java::lang::Object & a2) const
    {
      return env->callBooleanMethod(this$, mids$[mid_replace_fe62c765dba52df0], a0.this$, a1.this$, a2.this$);
    }

    void HashMap::replaceAll(const ::java::util::function::BiFunction & a0) const
    {
      env->callVoidMethod(this$, mids$[mid_replaceAll_22221e328874bd4f], a0.this$);
    }

    jint HashMap::size() const
    {
      return env->callIntMethod(this$, mids$[mid_size_9972fcc56b44e79d]);
    }

    ::java::util::Collection HashMap::values() const
    {
      return ::java::util::Collection(env->callObjectMethod(this$, mids$[mid_values_d4dfbf7a26ff41df]));
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace java {
  namespace util {
    static PyObject *t_HashMap_cast_(PyTypeObject *type, PyObject *arg);
    static PyObject *t_HashMap_instance_(PyTypeObject *type, PyObject *arg);
    static PyObject *t_HashMap_of_(t_HashMap *self, PyObject *args);
    static int t_HashMap_init_(t_HashMap *self, PyObject *args, PyObject *kwds);
    static PyObject *t_HashMap_clear(t_HashMap *self, PyObject *args);
    static PyObject *t_HashMap_clone(t_HashMap *self);
    static PyObject *t_HashMap_compute(t_HashMap *self, PyObject *args);
    static PyObject *t_HashMap_computeIfAbsent(t_HashMap *self, PyObject *args);
    static PyObject *t_HashMap_computeIfPresent(t_HashMap *self, PyObject *args);
    static PyObject *t_HashMap_containsKey(t_HashMap *self, PyObject *args);
    static PyObject *t_HashMap_containsValue(t_HashMap *self, PyObject *args);
    static PyObject *t_HashMap_entrySet(t_HashMap *self, PyObject *args);
    static PyObject *t_HashMap_forEach(t_HashMap *self, PyObject *args);
    static PyObject *t_HashMap_get(t_HashMap *self, PyObject *args);
    static PyObject *t_HashMap_getOrDefault(t_HashMap *self, PyObject *args);
    static PyObject *t_HashMap_isEmpty(t_HashMap *self, PyObject *args);
    static PyObject *t_HashMap_keySet(t_HashMap *self, PyObject *args);
    static PyObject *t_HashMap_merge(t_HashMap *self, PyObject *args);
    static PyObject *t_HashMap_put(t_HashMap *self, PyObject *args);
    static PyObject *t_HashMap_putAll(t_HashMap *self, PyObject *args);
    static PyObject *t_HashMap_putIfAbsent(t_HashMap *self, PyObject *args);
    static PyObject *t_HashMap_remove(t_HashMap *self, PyObject *args);
    static PyObject *t_HashMap_replace(t_HashMap *self, PyObject *args);
    static PyObject *t_HashMap_replaceAll(t_HashMap *self, PyObject *args);
    static PyObject *t_HashMap_size(t_HashMap *self, PyObject *args);
    static PyObject *t_HashMap_values(t_HashMap *self, PyObject *args);
    static PyObject *t_HashMap_get__empty(t_HashMap *self, void *data);
    static PyObject *t_HashMap_get__parameters_(t_HashMap *self, void *data);
    static PyGetSetDef t_HashMap__fields_[] = {
      DECLARE_GET_FIELD(t_HashMap, empty),
      DECLARE_GET_FIELD(t_HashMap, parameters_),
      { NULL, NULL, NULL, NULL, NULL }
    };

    static PyMethodDef t_HashMap__methods_[] = {
      DECLARE_METHOD(t_HashMap, cast_, METH_O | METH_CLASS),
      DECLARE_METHOD(t_HashMap, instance_, METH_O | METH_CLASS),
      DECLARE_METHOD(t_HashMap, of_, METH_VARARGS),
      DECLARE_METHOD(t_HashMap, clear, METH_VARARGS),
      DECLARE_METHOD(t_HashMap, clone, METH_NOARGS),
      DECLARE_METHOD(t_HashMap, compute, METH_VARARGS),
      DECLARE_METHOD(t_HashMap, computeIfAbsent, METH_VARARGS),
      DECLARE_METHOD(t_HashMap, computeIfPresent, METH_VARARGS),
      DECLARE_METHOD(t_HashMap, containsKey, METH_VARARGS),
      DECLARE_METHOD(t_HashMap, containsValue, METH_VARARGS),
      DECLARE_METHOD(t_HashMap, entrySet, METH_VARARGS),
      DECLARE_METHOD(t_HashMap, forEach, METH_VARARGS),
      DECLARE_METHOD(t_HashMap, get, METH_VARARGS),
      DECLARE_METHOD(t_HashMap, getOrDefault, METH_VARARGS),
      DECLARE_METHOD(t_HashMap, isEmpty, METH_VARARGS),
      DECLARE_METHOD(t_HashMap, keySet, METH_VARARGS),
      DECLARE_METHOD(t_HashMap, merge, METH_VARARGS),
      DECLARE_METHOD(t_HashMap, put, METH_VARARGS),
      DECLARE_METHOD(t_HashMap, putAll, METH_VARARGS),
      DECLARE_METHOD(t_HashMap, putIfAbsent, METH_VARARGS),
      DECLARE_METHOD(t_HashMap, remove, METH_VARARGS),
      DECLARE_METHOD(t_HashMap, replace, METH_VARARGS),
      DECLARE_METHOD(t_HashMap, replaceAll, METH_VARARGS),
      DECLARE_METHOD(t_HashMap, size, METH_VARARGS),
      DECLARE_METHOD(t_HashMap, values, METH_VARARGS),
      { NULL, NULL, 0, NULL }
    };

    static PyType_Slot PY_TYPE_SLOTS(HashMap)[] = {
      { Py_tp_methods, t_HashMap__methods_ },
      { Py_tp_init, (void *) t_HashMap_init_ },
      { Py_tp_getset, t_HashMap__fields_ },
      { 0, NULL }
    };

    static PyType_Def *PY_TYPE_BASES(HashMap)[] = {
      &PY_TYPE_DEF(::java::util::AbstractMap),
      NULL
    };

    DEFINE_TYPE(HashMap, t_HashMap, HashMap);
    PyObject *t_HashMap::wrap_Object(const HashMap& object, PyTypeObject *p0, PyTypeObject *p1)
    {
      PyObject *obj = t_HashMap::wrap_Object(object);
      if (obj != NULL && obj != Py_None)
      {
        t_HashMap *self = (t_HashMap *) obj;
        self->parameters[0] = p0;
        self->parameters[1] = p1;
      }
      return obj;
    }

    PyObject *t_HashMap::wrap_jobject(const jobject& object, PyTypeObject *p0, PyTypeObject *p1)
    {
      PyObject *obj = t_HashMap::wrap_jobject(object);
      if (obj != NULL && obj != Py_None)
      {
        t_HashMap *self = (t_HashMap *) obj;
        self->parameters[0] = p0;
        self->parameters[1] = p1;
      }
      return obj;
    }

    void t_HashMap::install(PyObject *module)
    {
      installType(&PY_TYPE(HashMap), &PY_TYPE_DEF(HashMap), module, "HashMap", 0);
    }

    void t_HashMap::initialize(PyObject *module)
    {
      PyObject_SetAttrString((PyObject *) PY_TYPE(HashMap), "class_", make_descriptor(HashMap::initializeClass, 1));
      PyObject_SetAttrString((PyObject *) PY_TYPE(HashMap), "wrapfn_", make_descriptor(t_HashMap::wrap_jobject));
      PyObject_SetAttrString((PyObject *) PY_TYPE(HashMap), "boxfn_", make_descriptor(boxObject));
    }

    static PyObject *t_HashMap_cast_(PyTypeObject *type, PyObject *arg)
    {
      if (!(arg = castCheck(arg, HashMap::initializeClass, 1)))
        return NULL;
      return t_HashMap::wrap_Object(HashMap(((t_HashMap *) arg)->object.this$));
    }
    static PyObject *t_HashMap_instance_(PyTypeObject *type, PyObject *arg)
    {
      if (!castCheck(arg, HashMap::initializeClass, 0))
        Py_RETURN_FALSE;
      Py_RETURN_TRUE;
    }

    static PyObject *t_HashMap_of_(t_HashMap *self, PyObject *args)
    {
      if (!parseArg(args, "T", 2, &(self->parameters)))
        Py_RETURN_SELF;
      return PyErr_SetArgsError((PyObject *) self, "of_", args);
    }

    static int t_HashMap_init_(t_HashMap *self, PyObject *args, PyObject *kwds)
    {
      switch (PyTuple_GET_SIZE(args)) {
       case 0:
        {
          HashMap object((jobject) NULL);

          INT_CALL(object = HashMap());
          self->object = object;
          break;
        }
       case 1:
        {
          jint a0;
          HashMap object((jobject) NULL);

          if (!parseArgs(args, "I", &a0))
          {
            INT_CALL(object = HashMap(a0));
            self->object = object;
            break;
          }
        }
        {
          ::java::util::Map a0((jobject) NULL);
          PyTypeObject **p0;
          HashMap object((jobject) NULL);

          if (!parseArgs(args, "K", ::java::util::Map::initializeClass, &a0, &p0, ::java::util::t_Map::parameters_))
          {
            INT_CALL(object = HashMap(a0));
            self->object = object;
            break;
          }
        }
        goto err;
       case 2:
        {
          jint a0;
          jfloat a1;
          HashMap object((jobject) NULL);

          if (!parseArgs(args, "IF", &a0, &a1))
          {
            INT_CALL(object = HashMap(a0, a1));
            self->object = object;
            break;
          }
        }
       default:
       err:
        PyErr_SetArgsError((PyObject *) self, "__init__", args);
        return -1;
      }

      return 0;
    }

    static PyObject *t_HashMap_clear(t_HashMap *self, PyObject *args)
    {

      if (!parseArgs(args, ""))
      {
        OBJ_CALL(self->object.clear());
        Py_RETURN_NONE;
      }

      return callSuper(PY_TYPE(HashMap), (PyObject *) self, "clear", args, 2);
    }

    static PyObject *t_HashMap_clone(t_HashMap *self)
    {
      ::java::lang::Object result((jobject) NULL);
      OBJ_CALL(result = self->object.clone());
      return ::java::lang::t_Object::wrap_Object(result);
    }

    static PyObject *t_HashMap_compute(t_HashMap *self, PyObject *args)
    {
      ::java::lang::Object a0((jobject) NULL);
      ::java::util::function::BiFunction a1((jobject) NULL);
      PyTypeObject **p1;
      ::java::lang::Object result((jobject) NULL);

      if (!parseArgs(args, "OK", self->parameters[0], ::java::util::function::BiFunction::initializeClass, &a0, &a1, &p1, ::java::util::function::t_BiFunction::parameters_))
      {
        OBJ_CALL(result = self->object.compute(a0, a1));
        return self->parameters[1] != NULL ? wrapType(self->parameters[1], result.this$) : ::java::lang::t_Object::wrap_Object(result);
      }

      return callSuper(PY_TYPE(HashMap), (PyObject *) self, "compute", args, 2);
    }

    static PyObject *t_HashMap_computeIfAbsent(t_HashMap *self, PyObject *args)
    {
      ::java::lang::Object a0((jobject) NULL);
      ::java::util::function::Function a1((jobject) NULL);
      PyTypeObject **p1;
      ::java::lang::Object result((jobject) NULL);

      if (!parseArgs(args, "OK", self->parameters[0], ::java::util::function::Function::initializeClass, &a0, &a1, &p1, ::java::util::function::t_Function::parameters_))
      {
        OBJ_CALL(result = self->object.computeIfAbsent(a0, a1));
        return self->parameters[1] != NULL ? wrapType(self->parameters[1], result.this$) : ::java::lang::t_Object::wrap_Object(result);
      }

      return callSuper(PY_TYPE(HashMap), (PyObject *) self, "computeIfAbsent", args, 2);
    }

    static PyObject *t_HashMap_computeIfPresent(t_HashMap *self, PyObject *args)
    {
      ::java::lang::Object a0((jobject) NULL);
      ::java::util::function::BiFunction a1((jobject) NULL);
      PyTypeObject **p1;
      ::java::lang::Object result((jobject) NULL);

      if (!parseArgs(args, "OK", self->parameters[0], ::java::util::function::BiFunction::initializeClass, &a0, &a1, &p1, ::java::util::function::t_BiFunction::parameters_))
      {
        OBJ_CALL(result = self->object.computeIfPresent(a0, a1));
        return self->parameters[1] != NULL ? wrapType(self->parameters[1], result.this$) : ::java::lang::t_Object::wrap_Object(result);
      }

      return callSuper(PY_TYPE(HashMap), (PyObject *) self, "computeIfPresent", args, 2);
    }

    static PyObject *t_HashMap_containsKey(t_HashMap *self, PyObject *args)
    {
      ::java::lang::Object a0((jobject) NULL);
      jboolean result;

      if (!parseArgs(args, "o", &a0))
      {
        OBJ_CALL(result = self->object.containsKey(a0));
        Py_RETURN_BOOL(result);
      }

      return callSuper(PY_TYPE(HashMap), (PyObject *) self, "containsKey", args, 2);
    }

    static PyObject *t_HashMap_containsValue(t_HashMap *self, PyObject *args)
    {
      ::java::lang::Object a0((jobject) NULL);
      jboolean result;

      if (!parseArgs(args, "o", &a0))
      {
        OBJ_CALL(result = self->object.containsValue(a0));
        Py_RETURN_BOOL(result);
      }

      return callSuper(PY_TYPE(HashMap), (PyObject *) self, "containsValue", args, 2);
    }

    static PyObject *t_HashMap_entrySet(t_HashMap *self, PyObject *args)
    {
      ::java::util::Set result((jobject) NULL);

      if (!parseArgs(args, ""))
      {
        OBJ_CALL(result = self->object.entrySet());
        return ::java::util::t_Set::wrap_Object(result);
      }

      return callSuper(PY_TYPE(HashMap), (PyObject *) self, "entrySet", args, 2);
    }

    static PyObject *t_HashMap_forEach(t_HashMap *self, PyObject *args)
    {
      ::java::util::function::BiConsumer a0((jobject) NULL);
      PyTypeObject **p0;

      if (!parseArgs(args, "K", ::java::util::function::BiConsumer::initializeClass, &a0, &p0, ::java::util::function::t_BiConsumer::parameters_))
      {
        OBJ_CALL(self->object.forEach(a0));
        Py_RETURN_NONE;
      }

      return callSuper(PY_TYPE(HashMap), (PyObject *) self, "forEach", args, 2);
    }

    static PyObject *t_HashMap_get(t_HashMap *self, PyObject *args)
    {
      ::java::lang::Object a0((jobject) NULL);
      ::java::lang::Object result((jobject) NULL);

      if (!parseArgs(args, "o", &a0))
      {
        OBJ_CALL(result = self->object.get(a0));
        return self->parameters[1] != NULL ? wrapType(self->parameters[1], result.this$) : ::java::lang::t_Object::wrap_Object(result);
      }

      return callSuper(PY_TYPE(HashMap), (PyObject *) self, "get", args, 2);
    }

    static PyObject *t_HashMap_getOrDefault(t_HashMap *self, PyObject *args)
    {
      ::java::lang::Object a0((jobject) NULL);
      ::java::lang::Object a1((jobject) NULL);
      ::java::lang::Object result((jobject) NULL);

      if (!parseArgs(args, "oO", self->parameters[1], &a0, &a1))
      {
        OBJ_CALL(result = self->object.getOrDefault(a0, a1));
        return self->parameters[1] != NULL ? wrapType(self->parameters[1], result.this$) : ::java::lang::t_Object::wrap_Object(result);
      }

      return callSuper(PY_TYPE(HashMap), (PyObject *) self, "getOrDefault", args, 2);
    }

    static PyObject *t_HashMap_isEmpty(t_HashMap *self, PyObject *args)
    {
      jboolean result;

      if (!parseArgs(args, ""))
      {
        OBJ_CALL(result = self->object.isEmpty());
        Py_RETURN_BOOL(result);
      }

      return callSuper(PY_TYPE(HashMap), (PyObject *) self, "isEmpty", args, 2);
    }

    static PyObject *t_HashMap_keySet(t_HashMap *self, PyObject *args)
    {
      ::java::util::Set result((jobject) NULL);

      if (!parseArgs(args, ""))
      {
        OBJ_CALL(result = self->object.keySet());
        return ::java::util::t_Set::wrap_Object(result, self->parameters[0]);
      }

      return callSuper(PY_TYPE(HashMap), (PyObject *) self, "keySet", args, 2);
    }

    static PyObject *t_HashMap_merge(t_HashMap *self, PyObject *args)
    {
      ::java::lang::Object a0((jobject) NULL);
      ::java::lang::Object a1((jobject) NULL);
      ::java::util::function::BiFunction a2((jobject) NULL);
      PyTypeObject **p2;
      ::java::lang::Object result((jobject) NULL);

      if (!parseArgs(args, "OOK", self->parameters[0], self->parameters[1], ::java::util::function::BiFunction::initializeClass, &a0, &a1, &a2, &p2, ::java::util::function::t_BiFunction::parameters_))
      {
        OBJ_CALL(result = self->object.merge(a0, a1, a2));
        return self->parameters[1] != NULL ? wrapType(self->parameters[1], result.this$) : ::java::lang::t_Object::wrap_Object(result);
      }

      return callSuper(PY_TYPE(HashMap), (PyObject *) self, "merge", args, 2);
    }

    static PyObject *t_HashMap_put(t_HashMap *self, PyObject *args)
    {
      ::java::lang::Object a0((jobject) NULL);
      ::java::lang::Object a1((jobject) NULL);
      ::java::lang::Object result((jobject) NULL);

      if (!parseArgs(args, "OO", self->parameters[0], self->parameters[1], &a0, &a1))
      {
        OBJ_CALL(result = self->object.put(a0, a1));
        return self->parameters[1] != NULL ? wrapType(self->parameters[1], result.this$) : ::java::lang::t_Object::wrap_Object(result);
      }

      return callSuper(PY_TYPE(HashMap), (PyObject *) self, "put", args, 2);
    }

    static PyObject *t_HashMap_putAll(t_HashMap *self, PyObject *args)
    {
      ::java::util::Map a0((jobject) NULL);
      PyTypeObject **p0;

      if (!parseArgs(args, "K", ::java::util::Map::initializeClass, &a0, &p0, ::java::util::t_Map::parameters_))
      {
        OBJ_CALL(self->object.putAll(a0));
        Py_RETURN_NONE;
      }

      return callSuper(PY_TYPE(HashMap), (PyObject *) self, "putAll", args, 2);
    }

    static PyObject *t_HashMap_putIfAbsent(t_HashMap *self, PyObject *args)
    {
      ::java::lang::Object a0((jobject) NULL);
      ::java::lang::Object a1((jobject) NULL);
      ::java::lang::Object result((jobject) NULL);

      if (!parseArgs(args, "OO", self->parameters[0], self->parameters[1], &a0, &a1))
      {
        OBJ_CALL(result = self->object.putIfAbsent(a0, a1));
        return self->parameters[1] != NULL ? wrapType(self->parameters[1], result.this$) : ::java::lang::t_Object::wrap_Object(result);
      }

      return callSuper(PY_TYPE(HashMap), (PyObject *) self, "putIfAbsent", args, 2);
    }

    static PyObject *t_HashMap_remove(t_HashMap *self, PyObject *args)
    {
      switch (PyTuple_GET_SIZE(args)) {
       case 1:
        {
          ::java::lang::Object a0((jobject) NULL);
          ::java::lang::Object result((jobject) NULL);

          if (!parseArgs(args, "o", &a0))
          {
            OBJ_CALL(result = self->object.remove(a0));
            return self->parameters[1] != NULL ? wrapType(self->parameters[1], result.this$) : ::java::lang::t_Object::wrap_Object(result);
          }
        }
        break;
       case 2:
        {
          ::java::lang::Object a0((jobject) NULL);
          ::java::lang::Object a1((jobject) NULL);
          jboolean result;

          if (!parseArgs(args, "oo", &a0, &a1))
          {
            OBJ_CALL(result = self->object.remove(a0, a1));
            Py_RETURN_BOOL(result);
          }
        }
      }

      return callSuper(PY_TYPE(HashMap), (PyObject *) self, "remove", args, 2);
    }

    static PyObject *t_HashMap_replace(t_HashMap *self, PyObject *args)
    {
      switch (PyTuple_GET_SIZE(args)) {
       case 2:
        {
          ::java::lang::Object a0((jobject) NULL);
          ::java::lang::Object a1((jobject) NULL);
          ::java::lang::Object result((jobject) NULL);

          if (!parseArgs(args, "OO", self->parameters[0], self->parameters[1], &a0, &a1))
          {
            OBJ_CALL(result = self->object.replace(a0, a1));
            return self->parameters[1] != NULL ? wrapType(self->parameters[1], result.this$) : ::java::lang::t_Object::wrap_Object(result);
          }
        }
        break;
       case 3:
        {
          ::java::lang::Object a0((jobject) NULL);
          ::java::lang::Object a1((jobject) NULL);
          ::java::lang::Object a2((jobject) NULL);
          jboolean result;

          if (!parseArgs(args, "OOO", self->parameters[0], self->parameters[1], self->parameters[1], &a0, &a1, &a2))
          {
            OBJ_CALL(result = self->object.replace(a0, a1, a2));
            Py_RETURN_BOOL(result);
          }
        }
      }

      return callSuper(PY_TYPE(HashMap), (PyObject *) self, "replace", args, 2);
    }

    static PyObject *t_HashMap_replaceAll(t_HashMap *self, PyObject *args)
    {
      ::java::util::function::BiFunction a0((jobject) NULL);
      PyTypeObject **p0;

      if (!parseArgs(args, "K", ::java::util::function::BiFunction::initializeClass, &a0, &p0, ::java::util::function::t_BiFunction::parameters_))
      {
        OBJ_CALL(self->object.replaceAll(a0));
        Py_RETURN_NONE;
      }

      return callSuper(PY_TYPE(HashMap), (PyObject *) self, "replaceAll", args, 2);
    }

    static PyObject *t_HashMap_size(t_HashMap *self, PyObject *args)
    {
      jint result;

      if (!parseArgs(args, ""))
      {
        OBJ_CALL(result = self->object.size());
        return PyLong_FromLong((long) result);
      }

      return callSuper(PY_TYPE(HashMap), (PyObject *) self, "size", args, 2);
    }

    static PyObject *t_HashMap_values(t_HashMap *self, PyObject *args)
    {
      ::java::util::Collection result((jobject) NULL);

      if (!parseArgs(args, ""))
      {
        OBJ_CALL(result = self->object.values());
        return ::java::util::t_Collection::wrap_Object(result, self->parameters[1]);
      }

      return callSuper(PY_TYPE(HashMap), (PyObject *) self, "values", args, 2);
    }
    static PyObject *t_HashMap_get__parameters_(t_HashMap *self, void *data)
    {
      return typeParameters(self->parameters, sizeof(self->parameters));
    }

    static PyObject *t_HashMap_get__empty(t_HashMap *self, void *data)
    {
      jboolean value;
      OBJ_CALL(value = self->object.isEmpty());
      Py_RETURN_BOOL(value);
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/pylucene/store/PythonLock.h"
#include "java/lang/Throwable.h"
#include "java/io/IOException.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace pylucene {
      namespace store {

        ::java::lang::Class *PythonLock::class$ = NULL;
        jmethodID *PythonLock::mids$ = NULL;
        bool PythonLock::live$ = false;

        jclass PythonLock::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/pylucene/store/PythonLock");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_f2cc1bce94666404] = env->getMethodID(cls, "<init>", "()V");
            mids$[mid_close_f2cc1bce94666404] = env->getMethodID(cls, "close", "()V");
            mids$[mid_ensureValid_f2cc1bce94666404] = env->getMethodID(cls, "ensureValid", "()V");
            mids$[mid_finalize_f2cc1bce94666404] = env->getMethodID(cls, "finalize", "()V");
            mids$[mid_pythonDecRef_f2cc1bce94666404] = env->getMethodID(cls, "pythonDecRef", "()V");
            mids$[mid_pythonExtension_2e5ae9edcb9b072f] = env->getMethodID(cls, "pythonExtension", "()J");
            mids$[mid_pythonExtension_9c778c9bce6694df] = env->getMethodID(cls, "pythonExtension", "(J)V");

            class$ = new ::java::lang::Class(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        PythonLock::PythonLock() : ::org::apache::lucene::store::Lock(env->newObject(initializeClass, &mids$, mid_init$_f2cc1bce94666404)) {}

        void PythonLock::finalize() const
        {
          env->callVoidMethod(this$, mids$[mid_finalize_f2cc1bce94666404]);
        }

        jlong PythonLock::pythonExtension() const
        {
          return env->callLongMethod(this$, mids$[mid_pythonExtension_2e5ae9edcb9b072f]);
        }

        void PythonLock::pythonExtension(jlong a0) const
        {
          env->callVoidMethod(this$, mids$[mid_pythonExtension_9c778c9bce6694df], a0);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace pylucene {
      namespace store {
        static PyObject *t_PythonLock_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_PythonLock_instance_(PyTypeObject *type, PyObject *arg);
        static int t_PythonLock_init_(t_PythonLock *self, PyObject *args, PyObject *kwds);
        static PyObject *t_PythonLock_finalize(t_PythonLock *self);
        static PyObject *t_PythonLock_pythonExtension(t_PythonLock *self, PyObject *args);
        static void JNICALL t_PythonLock_close0(JNIEnv *jenv, jobject jobj);
        static void JNICALL t_PythonLock_ensureValid1(JNIEnv *jenv, jobject jobj);
        static void JNICALL t_PythonLock_pythonDecRef2(JNIEnv *jenv, jobject jobj);
        static PyObject *t_PythonLock_get__self(t_PythonLock *self, void *data);
        static PyGetSetDef t_PythonLock__fields_[] = {
          DECLARE_GET_FIELD(t_PythonLock, self),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_PythonLock__methods_[] = {
          DECLARE_METHOD(t_PythonLock, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_PythonLock, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_PythonLock, finalize, METH_NOARGS),
          DECLARE_METHOD(t_PythonLock, pythonExtension, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        static PyType_Slot PY_TYPE_SLOTS(PythonLock)[] = {
          { Py_tp_methods, t_PythonLock__methods_ },
          { Py_tp_init, (void *) t_PythonLock_init_ },
          { Py_tp_getset, t_PythonLock__fields_ },
          { 0, NULL }
        };

        static PyType_Def *PY_TYPE_BASES(PythonLock)[] = {
          &PY_TYPE_DEF(::org::apache::lucene::store::Lock),
          NULL
        };

        DEFINE_TYPE(PythonLock, t_PythonLock, PythonLock);

        void t_PythonLock::install(PyObject *module)
        {
          installType(&PY_TYPE(PythonLock), &PY_TYPE_DEF(PythonLock), module, "PythonLock", 1);
        }

        void t_PythonLock::initialize(PyObject *module)
        {
          PyObject_SetAttrString((PyObject *) PY_TYPE(PythonLock), "class_", make_descriptor(PythonLock::initializeClass, 1));
          PyObject_SetAttrString((PyObject *) PY_TYPE(PythonLock), "wrapfn_", make_descriptor(t_PythonLock::wrap_jobject));
          PyObject_SetAttrString((PyObject *) PY_TYPE(PythonLock), "boxfn_", make_descriptor(boxObject));
          jclass cls = env->getClass(PythonLock::initializeClass);
          JNINativeMethod methods[] = {
            { "close", "()V", (void *) t_PythonLock_close0 },
            { "ensureValid", "()V", (void *) t_PythonLock_ensureValid1 },
            { "pythonDecRef", "()V", (void *) t_PythonLock_pythonDecRef2 },
          };
          env->registerNatives(cls, methods, 3);
        }

        static PyObject *t_PythonLock_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, PythonLock::initializeClass, 1)))
            return NULL;
          return t_PythonLock::wrap_Object(PythonLock(((t_PythonLock *) arg)->object.this$));
        }
        static PyObject *t_PythonLock_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, PythonLock::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_PythonLock_init_(t_PythonLock *self, PyObject *args, PyObject *kwds)
        {
          PythonLock object((jobject) NULL);

          INT_CALL(object = PythonLock());
          self->object = object;

          Py_INCREF((PyObject *) self);
          self->object.pythonExtension((jlong) (Py_intptr_t) (void *) self);

          return 0;
        }

        static PyObject *t_PythonLock_finalize(t_PythonLock *self)
        {
          OBJ_CALL(self->object.finalize());
          Py_RETURN_NONE;
        }

        static PyObject *t_PythonLock_pythonExtension(t_PythonLock *self, PyObject *args)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 0:
            {
              jlong result;
              OBJ_CALL(result = self->object.pythonExtension());
              return PyLong_FromLongLong((PY_LONG_LONG) result);
            }
            break;
           case 1:
            {
              jlong a0;

              if (!parseArgs(args, "J", &a0))
              {
                OBJ_CALL(self->object.pythonExtension(a0));
                Py_RETURN_NONE;
              }
            }
          }

          PyErr_SetArgsError((PyObject *) self, "pythonExtension", args);
          return NULL;
        }

        static void JNICALL t_PythonLock_close0(JNIEnv *jenv, jobject jobj)
        {
          jlong ptr = jenv->CallLongMethod(jobj, PythonLock::mids$[PythonLock::mid_pythonExtension_2e5ae9edcb9b072f]);
          PyObject *obj = (PyObject *) (Py_intptr_t) ptr;
          PythonGIL gil(jenv);
          PyObject *result = PyObject_CallMethod(obj, "close", "");
          if (!result)
            throwPythonError();
          else
            Py_DECREF(result);
        }

        static void JNICALL t_PythonLock_ensureValid1(JNIEnv *jenv, jobject jobj)
        {
          jlong ptr = jenv->CallLongMethod(jobj, PythonLock::mids$[PythonLock::mid_pythonExtension_2e5ae9edcb9b072f]);
          PyObject *obj = (PyObject *) (Py_intptr_t) ptr;
          PythonGIL gil(jenv);
          PyObject *result = PyObject_CallMethod(obj, "ensureValid", "");
          if (!result)
            throwPythonError();
          else
            Py_DECREF(result);
        }

        static void JNICALL t_PythonLock_pythonDecRef2(JNIEnv *jenv, jobject jobj)
        {
          jlong ptr = jenv->CallLongMethod(jobj, PythonLock::mids$[PythonLock::mid_pythonExtension_2e5ae9edcb9b072f]);
          PyObject *obj = (PyObject *) (Py_intptr_t) ptr;

          if (obj != NULL)
          {
            jenv->CallVoidMethod(jobj, PythonLock::mids$[PythonLock::mid_pythonExtension_9c778c9bce6694df], (jlong) 0);
            env->finalizeObject(jenv, obj);
          }
        }

        static PyObject *t_PythonLock_get__self(t_PythonLock *self, void *data)
        {
          jlong ptr;
          OBJ_CALL(ptr = self->object.pythonExtension());
          PyObject *obj = (PyObject *) (Py_intptr_t) ptr;

          if (obj != NULL)
          {
            Py_INCREF(obj);
            return obj;
          }
          else
            Py_RETURN_NONE;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/index/SimpleMergedSegmentWarmer.h"
#include "org/apache/lucene/index/IndexWriter$IndexReaderWarmer.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/index/LeafReader.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/util/InfoStream.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {

        ::java::lang::Class *SimpleMergedSegmentWarmer::class$ = NULL;
        jmethodID *SimpleMergedSegmentWarmer::mids$ = NULL;
        bool SimpleMergedSegmentWarmer::live$ = false;

        jclass SimpleMergedSegmentWarmer::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/index/SimpleMergedSegmentWarmer");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_5c75041b743adb53] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/util/InfoStream;)V");
            mids$[mid_warm_947f3bbc1666c05e] = env->getMethodID(cls, "warm", "(Lorg/apache/lucene/index/LeafReader;)V");

            class$ = new ::java::lang::Class(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        SimpleMergedSegmentWarmer::SimpleMergedSegmentWarmer(const ::org::apache::lucene::util::InfoStream & a0) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_5c75041b743adb53, a0.this$)) {}

        void SimpleMergedSegmentWarmer::warm(const ::org::apache::lucene::index::LeafReader & a0) const
        {
          env->callVoidMethod(this$, mids$[mid_warm_947f3bbc1666c05e], a0.this$);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {
        static PyObject *t_SimpleMergedSegmentWarmer_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_SimpleMergedSegmentWarmer_instance_(PyTypeObject *type, PyObject *arg);
        static int t_SimpleMergedSegmentWarmer_init_(t_SimpleMergedSegmentWarmer *self, PyObject *args, PyObject *kwds);
        static PyObject *t_SimpleMergedSegmentWarmer_warm(t_SimpleMergedSegmentWarmer *self, PyObject *arg);

        static PyMethodDef t_SimpleMergedSegmentWarmer__methods_[] = {
          DECLARE_METHOD(t_SimpleMergedSegmentWarmer, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_SimpleMergedSegmentWarmer, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_SimpleMergedSegmentWarmer, warm, METH_O),
          { NULL, NULL, 0, NULL }
        };

        static PyType_Slot PY_TYPE_SLOTS(SimpleMergedSegmentWarmer)[] = {
          { Py_tp_methods, t_SimpleMergedSegmentWarmer__methods_ },
          { Py_tp_init, (void *) t_SimpleMergedSegmentWarmer_init_ },
          { 0, NULL }
        };

        static PyType_Def *PY_TYPE_BASES(SimpleMergedSegmentWarmer)[] = {
          &PY_TYPE_DEF(::java::lang::Object),
          NULL
        };

        DEFINE_TYPE(SimpleMergedSegmentWarmer, t_SimpleMergedSegmentWarmer, SimpleMergedSegmentWarmer);

        void t_SimpleMergedSegmentWarmer::install(PyObject *module)
        {
          installType(&PY_TYPE(SimpleMergedSegmentWarmer), &PY_TYPE_DEF(SimpleMergedSegmentWarmer), module, "SimpleMergedSegmentWarmer", 0);
        }

        void t_SimpleMergedSegmentWarmer::initialize(PyObject *module)
        {
          PyObject_SetAttrString((PyObject *) PY_TYPE(SimpleMergedSegmentWarmer), "class_", make_descriptor(SimpleMergedSegmentWarmer::initializeClass, 1));
          PyObject_SetAttrString((PyObject *) PY_TYPE(SimpleMergedSegmentWarmer), "wrapfn_", make_descriptor(t_SimpleMergedSegmentWarmer::wrap_jobject));
          PyObject_SetAttrString((PyObject *) PY_TYPE(SimpleMergedSegmentWarmer), "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_SimpleMergedSegmentWarmer_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, SimpleMergedSegmentWarmer::initializeClass, 1)))
            return NULL;
          return t_SimpleMergedSegmentWarmer::wrap_Object(SimpleMergedSegmentWarmer(((t_SimpleMergedSegmentWarmer *) arg)->object.this$));
        }
        static PyObject *t_SimpleMergedSegmentWarmer_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, SimpleMergedSegmentWarmer::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_SimpleMergedSegmentWarmer_init_(t_SimpleMergedSegmentWarmer *self, PyObject *args, PyObject *kwds)
        {
          ::org::apache::lucene::util::InfoStream a0((jobject) NULL);
          SimpleMergedSegmentWarmer object((jobject) NULL);

          if (!parseArgs(args, "k", ::org::apache::lucene::util::InfoStream::initializeClass, &a0))
          {
            INT_CALL(object = SimpleMergedSegmentWarmer(a0));
            self->object = object;
          }
          else
          {
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }

        static PyObject *t_SimpleMergedSegmentWarmer_warm(t_SimpleMergedSegmentWarmer *self, PyObject *arg)
        {
          ::org::apache::lucene::index::LeafReader a0((jobject) NULL);

          if (!parseArg(arg, "k", ::org::apache::lucene::index::LeafReader::initializeClass, &a0))
          {
            OBJ_CALL(self->object.warm(a0));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "warm", arg);
          return NULL;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/codecs/blockterms/TermsIndexWriterBase.h"
#include "java/lang/Class.h"
#include "java/io/Closeable.h"
#include "org/apache/lucene/codecs/blockterms/TermsIndexWriterBase$FieldWriter.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/index/FieldInfo.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace codecs {
        namespace blockterms {

          ::java::lang::Class *TermsIndexWriterBase::class$ = NULL;
          jmethodID *TermsIndexWriterBase::mids$ = NULL;
          bool TermsIndexWriterBase::live$ = false;

          jclass TermsIndexWriterBase::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/codecs/blockterms/TermsIndexWriterBase");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_f2cc1bce94666404] = env->getMethodID(cls, "<init>", "()V");
              mids$[mid_addField_d1b1b077f554cd9d] = env->getMethodID(cls, "addField", "(Lorg/apache/lucene/index/FieldInfo;J)Lorg/apache/lucene/codecs/blockterms/TermsIndexWriterBase$FieldWriter;");

              class$ = new ::java::lang::Class(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          TermsIndexWriterBase::TermsIndexWriterBase() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_f2cc1bce94666404)) {}

          ::org::apache::lucene::codecs::blockterms::TermsIndexWriterBase$FieldWriter TermsIndexWriterBase::addField(const ::org::apache::lucene::index::FieldInfo & a0, jlong a1) const
          {
            return ::org::apache::lucene::codecs::blockterms::TermsIndexWriterBase$FieldWriter(env->callObjectMethod(this$, mids$[mid_addField_d1b1b077f554cd9d], a0.this$, a1));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace codecs {
        namespace blockterms {
          static PyObject *t_TermsIndexWriterBase_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_TermsIndexWriterBase_instance_(PyTypeObject *type, PyObject *arg);
          static int t_TermsIndexWriterBase_init_(t_TermsIndexWriterBase *self, PyObject *args, PyObject *kwds);
          static PyObject *t_TermsIndexWriterBase_addField(t_TermsIndexWriterBase *self, PyObject *args);

          static PyMethodDef t_TermsIndexWriterBase__methods_[] = {
            DECLARE_METHOD(t_TermsIndexWriterBase, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_TermsIndexWriterBase, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_TermsIndexWriterBase, addField, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          static PyType_Slot PY_TYPE_SLOTS(TermsIndexWriterBase)[] = {
            { Py_tp_methods, t_TermsIndexWriterBase__methods_ },
            { Py_tp_init, (void *) t_TermsIndexWriterBase_init_ },
            { 0, NULL }
          };

          static PyType_Def *PY_TYPE_BASES(TermsIndexWriterBase)[] = {
            &PY_TYPE_DEF(::java::lang::Object),
            NULL
          };

          DEFINE_TYPE(TermsIndexWriterBase, t_TermsIndexWriterBase, TermsIndexWriterBase);

          void t_TermsIndexWriterBase::install(PyObject *module)
          {
            installType(&PY_TYPE(TermsIndexWriterBase), &PY_TYPE_DEF(TermsIndexWriterBase), module, "TermsIndexWriterBase", 0);
          }

          void t_TermsIndexWriterBase::initialize(PyObject *module)
          {
            PyObject_SetAttrString((PyObject *) PY_TYPE(TermsIndexWriterBase), "class_", make_descriptor(TermsIndexWriterBase::initializeClass, 1));
            PyObject_SetAttrString((PyObject *) PY_TYPE(TermsIndexWriterBase), "wrapfn_", make_descriptor(t_TermsIndexWriterBase::wrap_jobject));
            PyObject_SetAttrString((PyObject *) PY_TYPE(TermsIndexWriterBase), "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_TermsIndexWriterBase_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, TermsIndexWriterBase::initializeClass, 1)))
              return NULL;
            return t_TermsIndexWriterBase::wrap_Object(TermsIndexWriterBase(((t_TermsIndexWriterBase *) arg)->object.this$));
          }
          static PyObject *t_TermsIndexWriterBase_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, TermsIndexWriterBase::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_TermsIndexWriterBase_init_(t_TermsIndexWriterBase *self, PyObject *args, PyObject *kwds)
          {
            TermsIndexWriterBase object((jobject) NULL);

            INT_CALL(object = TermsIndexWriterBase());
            self->object = object;

            return 0;
          }

          static PyObject *t_TermsIndexWriterBase_addField(t_TermsIndexWriterBase *self, PyObject *args)
          {
            ::org::apache::lucene::index::FieldInfo a0((jobject) NULL);
            jlong a1;
            ::org::apache::lucene::codecs::blockterms::TermsIndexWriterBase$FieldWriter result((jobject) NULL);

            if (!parseArgs(args, "kJ", ::org::apache::lucene::index::FieldInfo::initializeClass, &a0, &a1))
            {
              OBJ_CALL(result = self->object.addField(a0, a1));
              return ::org::apache::lucene::codecs::blockterms::t_TermsIndexWriterBase$FieldWriter::wrap_Object(result);
            }

            PyErr_SetArgsError((PyObject *) self, "addField", args);
            return NULL;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/index/IndexWriterConfig$OpenMode.h"
#include "org/apache/lucene/index/IndexWriterConfig$OpenMode.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {

        ::java::lang::Class *IndexWriterConfig$OpenMode::class$ = NULL;
        jmethodID *IndexWriterConfig$OpenMode::mids$ = NULL;
        bool IndexWriterConfig$OpenMode::live$ = false;
        IndexWriterConfig$OpenMode *IndexWriterConfig$OpenMode::APPEND = NULL;
        IndexWriterConfig$OpenMode *IndexWriterConfig$OpenMode::CREATE = NULL;
        IndexWriterConfig$OpenMode *IndexWriterConfig$OpenMode::CREATE_OR_APPEND = NULL;

        jclass IndexWriterConfig$OpenMode::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/index/IndexWriterConfig$OpenMode");

            mids$ = new jmethodID[max_mid];
            mids$[mid_valueOf_14a80ebc0f2d9fc7] = env->getStaticMethodID(cls, "valueOf", "(Ljava/lang/String;)Lorg/apache/lucene/index/IndexWriterConfig$OpenMode;");
            mids$[mid_values_5f37828b96ed9c46] = env->getStaticMethodID(cls, "values", "()[Lorg/apache/lucene/index/IndexWriterConfig$OpenMode;");

            class$ = new ::java::lang::Class(cls);
            cls = (jclass) class$->this$;

            APPEND = new IndexWriterConfig$OpenMode(env->getStaticObjectField(cls, "APPEND", "Lorg/apache/lucene/index/IndexWriterConfig$OpenMode;"));
            CREATE = new IndexWriterConfig$OpenMode(env->getStaticObjectField(cls, "CREATE", "Lorg/apache/lucene/index/IndexWriterConfig$OpenMode;"));
            CREATE_OR_APPEND = new IndexWriterConfig$OpenMode(env->getStaticObjectField(cls, "CREATE_OR_APPEND", "Lorg/apache/lucene/index/IndexWriterConfig$OpenMode;"));
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        IndexWriterConfig$OpenMode IndexWriterConfig$OpenMode::valueOf(const ::java::lang::String & a0)
        {
          jclass cls = env->getClass(initializeClass);
          return IndexWriterConfig$OpenMode(env->callStaticObjectMethod(cls, mids$[mid_valueOf_14a80ebc0f2d9fc7], a0.this$));
        }

        JArray< IndexWriterConfig$OpenMode > IndexWriterConfig$OpenMode::values()
        {
          jclass cls = env->getClass(initializeClass);
          return JArray< IndexWriterConfig$OpenMode >(env->callStaticObjectMethod(cls, mids$[mid_values_5f37828b96ed9c46]));
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {
        static PyObject *t_IndexWriterConfig$OpenMode_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_IndexWriterConfig$OpenMode_instance_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_IndexWriterConfig$OpenMode_of_(t_IndexWriterConfig$OpenMode *self, PyObject *args);
        static PyObject *t_IndexWriterConfig$OpenMode_valueOf(PyTypeObject *type, PyObject *args);
        static PyObject *t_IndexWriterConfig$OpenMode_values(PyTypeObject *type);
        static PyObject *t_IndexWriterConfig$OpenMode_get__parameters_(t_IndexWriterConfig$OpenMode *self, void *data);
        static PyGetSetDef t_IndexWriterConfig$OpenMode__fields_[] = {
          DECLARE_GET_FIELD(t_IndexWriterConfig$OpenMode, parameters_),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_IndexWriterConfig$OpenMode__methods_[] = {
          DECLARE_METHOD(t_IndexWriterConfig$OpenMode, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_IndexWriterConfig$OpenMode, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_IndexWriterConfig$OpenMode, of_, METH_VARARGS),
          DECLARE_METHOD(t_IndexWriterConfig$OpenMode, valueOf, METH_VARARGS | METH_CLASS),
          DECLARE_METHOD(t_IndexWriterConfig$OpenMode, values, METH_NOARGS | METH_CLASS),
          { NULL, NULL, 0, NULL }
        };

        static PyType_Slot PY_TYPE_SLOTS(IndexWriterConfig$OpenMode)[] = {
          { Py_tp_methods, t_IndexWriterConfig$OpenMode__methods_ },
          { Py_tp_init, (void *) abstract_init },
          { Py_tp_getset, t_IndexWriterConfig$OpenMode__fields_ },
          { 0, NULL }
        };

        static PyType_Def *PY_TYPE_BASES(IndexWriterConfig$OpenMode)[] = {
          &PY_TYPE_DEF(::java::lang::Enum),
          NULL
        };

        DEFINE_TYPE(IndexWriterConfig$OpenMode, t_IndexWriterConfig$OpenMode, IndexWriterConfig$OpenMode);
        PyObject *t_IndexWriterConfig$OpenMode::wrap_Object(const IndexWriterConfig$OpenMode& object, PyTypeObject *p0)
        {
          PyObject *obj = t_IndexWriterConfig$OpenMode::wrap_Object(object);
          if (obj != NULL && obj != Py_None)
          {
            t_IndexWriterConfig$OpenMode *self = (t_IndexWriterConfig$OpenMode *) obj;
            self->parameters[0] = p0;
          }
          return obj;
        }

        PyObject *t_IndexWriterConfig$OpenMode::wrap_jobject(const jobject& object, PyTypeObject *p0)
        {
          PyObject *obj = t_IndexWriterConfig$OpenMode::wrap_jobject(object);
          if (obj != NULL && obj != Py_None)
          {
            t_IndexWriterConfig$OpenMode *self = (t_IndexWriterConfig$OpenMode *) obj;
            self->parameters[0] = p0;
          }
          return obj;
        }

        void t_IndexWriterConfig$OpenMode::install(PyObject *module)
        {
          installType(&PY_TYPE(IndexWriterConfig$OpenMode), &PY_TYPE_DEF(IndexWriterConfig$OpenMode), module, "IndexWriterConfig$OpenMode", 0);
        }

        void t_IndexWriterConfig$OpenMode::initialize(PyObject *module)
        {
          PyObject_SetAttrString((PyObject *) PY_TYPE(IndexWriterConfig$OpenMode), "class_", make_descriptor(IndexWriterConfig$OpenMode::initializeClass, 1));
          PyObject_SetAttrString((PyObject *) PY_TYPE(IndexWriterConfig$OpenMode), "wrapfn_", make_descriptor(t_IndexWriterConfig$OpenMode::wrap_jobject));
          PyObject_SetAttrString((PyObject *) PY_TYPE(IndexWriterConfig$OpenMode), "boxfn_", make_descriptor(boxObject));
          env->getClass(IndexWriterConfig$OpenMode::initializeClass);
          PyObject_SetAttrString((PyObject *) PY_TYPE(IndexWriterConfig$OpenMode), "APPEND", make_descriptor(t_IndexWriterConfig$OpenMode::wrap_Object(*IndexWriterConfig$OpenMode::APPEND)));
          PyObject_SetAttrString((PyObject *) PY_TYPE(IndexWriterConfig$OpenMode), "CREATE", make_descriptor(t_IndexWriterConfig$OpenMode::wrap_Object(*IndexWriterConfig$OpenMode::CREATE)));
          PyObject_SetAttrString((PyObject *) PY_TYPE(IndexWriterConfig$OpenMode), "CREATE_OR_APPEND", make_descriptor(t_IndexWriterConfig$OpenMode::wrap_Object(*IndexWriterConfig$OpenMode::CREATE_OR_APPEND)));
        }

        static PyObject *t_IndexWriterConfig$OpenMode_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, IndexWriterConfig$OpenMode::initializeClass, 1)))
            return NULL;
          return t_IndexWriterConfig$OpenMode::wrap_Object(IndexWriterConfig$OpenMode(((t_IndexWriterConfig$OpenMode *) arg)->object.this$));
        }
        static PyObject *t_IndexWriterConfig$OpenMode_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, IndexWriterConfig$OpenMode::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static PyObject *t_IndexWriterConfig$OpenMode_of_(t_IndexWriterConfig$OpenMode *self, PyObject *args)
        {
          if (!parseArg(args, "T", 1, &(self->parameters)))
            Py_RETURN_SELF;
          return PyErr_SetArgsError((PyObject *) self, "of_", args);
        }

        static PyObject *t_IndexWriterConfig$OpenMode_valueOf(PyTypeObject *type, PyObject *args)
        {
          ::java::lang::String a0((jobject) NULL);
          IndexWriterConfig$OpenMode result((jobject) NULL);

          if (!parseArgs(args, "s", &a0))
          {
            OBJ_CALL(result = ::org::apache::lucene::index::IndexWriterConfig$OpenMode::valueOf(a0));
            return t_IndexWriterConfig$OpenMode::wrap_Object(result);
          }

          return callSuper(type, "valueOf", args, 2);
        }

        static PyObject *t_IndexWriterConfig$OpenMode_values(PyTypeObject *type)
        {
          JArray< IndexWriterConfig$OpenMode > result((jobject) NULL);
          OBJ_CALL(result = ::org::apache::lucene::index::IndexWriterConfig$OpenMode::values());
          return JArray<jobject>(result.this$).wrap(t_IndexWriterConfig$OpenMode::wrap_jobject);
        }
        static PyObject *t_IndexWriterConfig$OpenMode_get__parameters_(t_IndexWriterConfig$OpenMode *self, void *data)
        {
          return typeParameters(self->parameters, sizeof(self->parameters));
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/document/DoubleRange.h"
#include "java/lang/String.h"
#include "org/apache/lucene/search/Query.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace document {

        ::java::lang::Class *DoubleRange::class$ = NULL;
        jmethodID *DoubleRange::mids$ = NULL;
        bool DoubleRange::live$ = false;
        jint DoubleRange::BYTES = (jint) 0;

        jclass DoubleRange::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/document/DoubleRange");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_f874f398fdc79791] = env->getMethodID(cls, "<init>", "(Ljava/lang/String;[D[D)V");
            mids$[mid_getMax_f3ddedc0b6f18620] = env->getMethodID(cls, "getMax", "(I)D");
            mids$[mid_getMin_f3ddedc0b6f18620] = env->getMethodID(cls, "getMin", "(I)D");
            mids$[mid_newContainsQuery_ac4cb7e9a584976e] = env->getStaticMethodID(cls, "newContainsQuery", "(Ljava/lang/String;[D[D)Lorg/apache/lucene/search/Query;");
            mids$[mid_newCrossesQuery_ac4cb7e9a584976e] = env->getStaticMethodID(cls, "newCrossesQuery", "(Ljava/lang/String;[D[D)Lorg/apache/lucene/search/Query;");
            mids$[mid_newIntersectsQuery_ac4cb7e9a584976e] = env->getStaticMethodID(cls, "newIntersectsQuery", "(Ljava/lang/String;[D[D)Lorg/apache/lucene/search/Query;");
            mids$[mid_newWithinQuery_ac4cb7e9a584976e] = env->getStaticMethodID(cls, "newWithinQuery", "(Ljava/lang/String;[D[D)Lorg/apache/lucene/search/Query;");
            mids$[mid_setRangeValues_1d56dd1258093787] = env->getMethodID(cls, "setRangeValues", "([D[D)V");
            mids$[mid_toString_db9b55ba01e03e4b] = env->getMethodID(cls, "toString", "()Ljava/lang/String;");

            class$ = new ::java::lang::Class(cls);
            cls = (jclass) class$->this$;

            BYTES = env->getStaticIntField(cls, "BYTES");
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        DoubleRange::DoubleRange(const ::java::lang::String & a0, const JArray< jdouble > & a1, const JArray< jdouble > & a2) : ::org::apache::lucene::document::Field(env->newObject(initializeClass, &mids$, mid_init$_f874f398fdc79791, a0.this$, a1.this$, a2.this$)) {}

        jdouble DoubleRange::getMax(jint a0) const
        {
          return env->callDoubleMethod(this$, mids$[mid_getMax_f3ddedc0b6f18620], a0);
        }

        jdouble DoubleRange::getMin(jint a0) const
        {
          return env->callDoubleMethod(this$, mids$[mid_getMin_f3ddedc0b6f18620], a0);
        }

        ::org::apache::lucene::search::Query DoubleRange::newContainsQuery(const ::java::lang::String & a0, const JArray< jdouble > & a1, const JArray< jdouble > & a2)
        {
          jclass cls = env->getClass(initializeClass);
          return ::org::apache::lucene::search::Query(env->callStaticObjectMethod(cls, mids$[mid_newContainsQuery_ac4cb7e9a584976e], a0.this$, a1.this$, a2.this$));
        }

        ::org::apache::lucene::search::Query DoubleRange::newCrossesQuery(const ::java::lang::String & a0, const JArray< jdouble > & a1, const JArray< jdouble > & a2)
        {
          jclass cls = env->getClass(initializeClass);
          return ::org::apache::lucene::search::Query(env->callStaticObjectMethod(cls, mids$[mid_newCrossesQuery_ac4cb7e9a584976e], a0.this$, a1.this$, a2.this$));
        }

        ::org::apache::lucene::search::Query DoubleRange::newIntersectsQuery(const ::java::lang::String & a0, const JArray< jdouble > & a1, const JArray< jdouble > & a2)
        {
          jclass cls = env->getClass(initializeClass);
          return ::org::apache::lucene::search::Query(env->callStaticObjectMethod(cls, mids$[mid_newIntersectsQuery_ac4cb7e9a584976e], a0.this$, a1.this$, a2.this$));
        }

        ::org::apache::lucene::search::Query DoubleRange::newWithinQuery(const ::java::lang::String & a0, const JArray< jdouble > & a1, const JArray< jdouble > & a2)
        {
          jclass cls = env->getClass(initializeClass);
          return ::org::apache::lucene::search::Query(env->callStaticObjectMethod(cls, mids$[mid_newWithinQuery_ac4cb7e9a584976e], a0.this$, a1.this$, a2.this$));
        }

        void DoubleRange::setRangeValues(const JArray< jdouble > & a0, const JArray< jdouble > & a1) const
        {
          env->callVoidMethod(this$, mids$[mid_setRangeValues_1d56dd1258093787], a0.this$, a1.this$);
        }

        ::java::lang::String DoubleRange::toString() const
        {
          return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_db9b55ba01e03e4b]));
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace document {
        static PyObject *t_DoubleRange_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_DoubleRange_instance_(PyTypeObject *type, PyObject *arg);
        static int t_DoubleRange_init_(t_DoubleRange *self, PyObject *args, PyObject *kwds);
        static PyObject *t_DoubleRange_getMax(t_DoubleRange *self, PyObject *arg);
        static PyObject *t_DoubleRange_getMin(t_DoubleRange *self, PyObject *arg);
        static PyObject *t_DoubleRange_newContainsQuery(PyTypeObject *type, PyObject *args);
        static PyObject *t_DoubleRange_newCrossesQuery(PyTypeObject *type, PyObject *args);
        static PyObject *t_DoubleRange_newIntersectsQuery(PyTypeObject *type, PyObject *args);
        static PyObject *t_DoubleRange_newWithinQuery(PyTypeObject *type, PyObject *args);
        static PyObject *t_DoubleRange_setRangeValues(t_DoubleRange *self, PyObject *args);
        static PyObject *t_DoubleRange_toString(t_DoubleRange *self, PyObject *args);

        static PyMethodDef t_DoubleRange__methods_[] = {
          DECLARE_METHOD(t_DoubleRange, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_DoubleRange, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_DoubleRange, getMax, METH_O),
          DECLARE_METHOD(t_DoubleRange, getMin, METH_O),
          DECLARE_METHOD(t_DoubleRange, newContainsQuery, METH_VARARGS | METH_CLASS),
          DECLARE_METHOD(t_DoubleRange, newCrossesQuery, METH_VARARGS | METH_CLASS),
          DECLARE_METHOD(t_DoubleRange, newIntersectsQuery, METH_VARARGS | METH_CLASS),
          DECLARE_METHOD(t_DoubleRange, newWithinQuery, METH_VARARGS | METH_CLASS),
          DECLARE_METHOD(t_DoubleRange, setRangeValues, METH_VARARGS),
          DECLARE_METHOD(t_DoubleRange, toString, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        static PyType_Slot PY_TYPE_SLOTS(DoubleRange)[] = {
          { Py_tp_methods, t_DoubleRange__methods_ },
          { Py_tp_init, (void *) t_DoubleRange_init_ },
          { 0, NULL }
        };

        static PyType_Def *PY_TYPE_BASES(DoubleRange)[] = {
          &PY_TYPE_DEF(::org::apache::lucene::document::Field),
          NULL
        };

        DEFINE_TYPE(DoubleRange, t_DoubleRange, DoubleRange);

        void t_DoubleRange::install(PyObject *module)
        {
          installType(&PY_TYPE(DoubleRange), &PY_TYPE_DEF(DoubleRange), module, "DoubleRange", 0);
        }

        void t_DoubleRange::initialize(PyObject *module)
        {
          PyObject_SetAttrString((PyObject *) PY_TYPE(DoubleRange), "class_", make_descriptor(DoubleRange::initializeClass, 1));
          PyObject_SetAttrString((PyObject *) PY_TYPE(DoubleRange), "wrapfn_", make_descriptor(t_DoubleRange::wrap_jobject));
          PyObject_SetAttrString((PyObject *) PY_TYPE(DoubleRange), "boxfn_", make_descriptor(boxObject));
          env->getClass(DoubleRange::initializeClass);
          PyObject_SetAttrString((PyObject *) PY_TYPE(DoubleRange), "BYTES", make_descriptor(DoubleRange::BYTES));
        }

        static PyObject *t_DoubleRange_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, DoubleRange::initializeClass, 1)))
            return NULL;
          return t_DoubleRange::wrap_Object(DoubleRange(((t_DoubleRange *) arg)->object.this$));
        }
        static PyObject *t_DoubleRange_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, DoubleRange::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_DoubleRange_init_(t_DoubleRange *self, PyObject *args, PyObject *kwds)
        {
          ::java::lang::String a0((jobject) NULL);
          JArray< jdouble > a1((jobject) NULL);
          JArray< jdouble > a2((jobject) NULL);
          DoubleRange object((jobject) NULL);

          if (!parseArgs(args, "s[D[D", &a0, &a1, &a2))
          {
            INT_CALL(object = DoubleRange(a0, a1, a2));
            self->object = object;
          }
          else
          {
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }

        static PyObject *t_DoubleRange_getMax(t_DoubleRange *self, PyObject *arg)
        {
          jint a0;
          jdouble result;

          if (!parseArg(arg, "I", &a0))
          {
            OBJ_CALL(result = self->object.getMax(a0));
            return PyFloat_FromDouble((double) result);
          }

          PyErr_SetArgsError((PyObject *) self, "getMax", arg);
          return NULL;
        }

        static PyObject *t_DoubleRange_getMin(t_DoubleRange *self, PyObject *arg)
        {
          jint a0;
          jdouble result;

          if (!parseArg(arg, "I", &a0))
          {
            OBJ_CALL(result = self->object.getMin(a0));
            return PyFloat_FromDouble((double) result);
          }

          PyErr_SetArgsError((PyObject *) self, "getMin", arg);
          return NULL;
        }

        static PyObject *t_DoubleRange_newContainsQuery(PyTypeObject *type, PyObject *args)
        {
          ::java::lang::String a0((jobject) NULL);
          JArray< jdouble > a1((jobject) NULL);
          JArray< jdouble > a2((jobject) NULL);
          ::org::apache::lucene::search::Query result((jobject) NULL);

          if (!parseArgs(args, "s[D[D", &a0, &a1, &a2))
          {
            OBJ_CALL(result = ::org::apache::lucene::document::DoubleRange::newContainsQuery(a0, a1, a2));
            return ::org::apache::lucene::search::t_Query::wrap_Object(result);
          }

          PyErr_SetArgsError(type, "newContainsQuery", args);
          return NULL;
        }

        static PyObject *t_DoubleRange_newCrossesQuery(PyTypeObject *type, PyObject *args)
        {
          ::java::lang::String a0((jobject) NULL);
          JArray< jdouble > a1((jobject) NULL);
          JArray< jdouble > a2((jobject) NULL);
          ::org::apache::lucene::search::Query result((jobject) NULL);

          if (!parseArgs(args, "s[D[D", &a0, &a1, &a2))
          {
            OBJ_CALL(result = ::org::apache::lucene::document::DoubleRange::newCrossesQuery(a0, a1, a2));
            return ::org::apache::lucene::search::t_Query::wrap_Object(result);
          }

          PyErr_SetArgsError(type, "newCrossesQuery", args);
          return NULL;
        }

        static PyObject *t_DoubleRange_newIntersectsQuery(PyTypeObject *type, PyObject *args)
        {
          ::java::lang::String a0((jobject) NULL);
          JArray< jdouble > a1((jobject) NULL);
          JArray< jdouble > a2((jobject) NULL);
          ::org::apache::lucene::search::Query result((jobject) NULL);

          if (!parseArgs(args, "s[D[D", &a0, &a1, &a2))
          {
            OBJ_CALL(result = ::org::apache::lucene::document::DoubleRange::newIntersectsQuery(a0, a1, a2));
            return ::org::apache::lucene::search::t_Query::wrap_Object(result);
          }

          PyErr_SetArgsError(type, "newIntersectsQuery", args);
          return NULL;
        }

        static PyObject *t_DoubleRange_newWithinQuery(PyTypeObject *type, PyObject *args)
        {
          ::java::lang::String a0((jobject) NULL);
          JArray< jdouble > a1((jobject) NULL);
          JArray< jdouble > a2((jobject) NULL);
          ::org::apache::lucene::search::Query result((jobject) NULL);

          if (!parseArgs(args, "s[D[D", &a0, &a1, &a2))
          {
            OBJ_CALL(result = ::org::apache::lucene::document::DoubleRange::newWithinQuery(a0, a1, a2));
            return ::org::apache::lucene::search::t_Query::wrap_Object(result);
          }

          PyErr_SetArgsError(type, "newWithinQuery", args);
          return NULL;
        }

        static PyObject *t_DoubleRange_setRangeValues(t_DoubleRange *self, PyObject *args)
        {
          JArray< jdouble > a0((jobject) NULL);
          JArray< jdouble > a1((jobject) NULL);

          if (!parseArgs(args, "[D[D", &a0, &a1))
          {
            OBJ_CALL(self->object.setRangeValues(a0, a1));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "setRangeValues", args);
          return NULL;
        }

        static PyObject *t_DoubleRange_toString(t_DoubleRange *self, PyObject *args)
        {
          ::java::lang::String result((jobject) NULL);

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.toString());
            return j2p(result);
          }

          return callSuper(PY_TYPE(DoubleRange), (PyObject *) self, "toString", args, 2);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queryparser/xml/builders/UserInputQueryBuilder.h"
#include "org/apache/lucene/queryparser/xml/QueryBuilder.h"
#include "org/apache/lucene/analysis/Analyzer.h"
#include "org/apache/lucene/queryparser/classic/QueryParser.h"
#include "java/lang/Class.h"
#include "java/lang/String.h"
#include "org/apache/lucene/search/Query.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace xml {
          namespace builders {

            ::java::lang::Class *UserInputQueryBuilder::class$ = NULL;
            jmethodID *UserInputQueryBuilder::mids$ = NULL;
            bool UserInputQueryBuilder::live$ = false;

            jclass UserInputQueryBuilder::initializeClass(bool getOnly)
            {
              if (getOnly)
                return (jclass) (live$ ? class$->this$ : NULL);
              if (class$ == NULL)
              {
                jclass cls = (jclass) env->findClass("org/apache/lucene/queryparser/xml/builders/UserInputQueryBuilder");

                mids$ = new jmethodID[max_mid];
                mids$[mid_init$_b3b0ae1117c89300] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/queryparser/classic/QueryParser;)V");
                mids$[mid_init$_32cb72731c50a536] = env->getMethodID(cls, "<init>", "(Ljava/lang/String;Lorg/apache/lucene/analysis/Analyzer;)V");
                mids$[mid_createQueryParser_b7b8281fa696712a] = env->getMethodID(cls, "createQueryParser", "(Ljava/lang/String;Lorg/apache/lucene/analysis/Analyzer;)Lorg/apache/lucene/queryparser/classic/QueryParser;");

                class$ = new ::java::lang::Class(cls);
                live$ = true;
              }
              return (jclass) class$->this$;
            }

            UserInputQueryBuilder::UserInputQueryBuilder(const ::org::apache::lucene::queryparser::classic::QueryParser & a0) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_b3b0ae1117c89300, a0.this$)) {}

            UserInputQueryBuilder::UserInputQueryBuilder(const ::java::lang::String & a0, const ::org::apache::lucene::analysis::Analyzer & a1) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_32cb72731c50a536, a0.this$, a1.this$)) {}
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace xml {
          namespace builders {
            static PyObject *t_UserInputQueryBuilder_cast_(PyTypeObject *type, PyObject *arg);
            static PyObject *t_UserInputQueryBuilder_instance_(PyTypeObject *type, PyObject *arg);
            static int t_UserInputQueryBuilder_init_(t_UserInputQueryBuilder *self, PyObject *args, PyObject *kwds);

            static PyMethodDef t_UserInputQueryBuilder__methods_[] = {
              DECLARE_METHOD(t_UserInputQueryBuilder, cast_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_UserInputQueryBuilder, instance_, METH_O | METH_CLASS),
              { NULL, NULL, 0, NULL }
            };

            static PyType_Slot PY_TYPE_SLOTS(UserInputQueryBuilder)[] = {
              { Py_tp_methods, t_UserInputQueryBuilder__methods_ },
              { Py_tp_init, (void *) t_UserInputQueryBuilder_init_ },
              { 0, NULL }
            };

            static PyType_Def *PY_TYPE_BASES(UserInputQueryBuilder)[] = {
              &PY_TYPE_DEF(::java::lang::Object),
              NULL
            };

            DEFINE_TYPE(UserInputQueryBuilder, t_UserInputQueryBuilder, UserInputQueryBuilder);

            void t_UserInputQueryBuilder::install(PyObject *module)
            {
              installType(&PY_TYPE(UserInputQueryBuilder), &PY_TYPE_DEF(UserInputQueryBuilder), module, "UserInputQueryBuilder", 0);
            }

            void t_UserInputQueryBuilder::initialize(PyObject *module)
            {
              PyObject_SetAttrString((PyObject *) PY_TYPE(UserInputQueryBuilder), "class_", make_descriptor(UserInputQueryBuilder::initializeClass, 1));
              PyObject_SetAttrString((PyObject *) PY_TYPE(UserInputQueryBuilder), "wrapfn_", make_descriptor(t_UserInputQueryBuilder::wrap_jobject));
              PyObject_SetAttrString((PyObject *) PY_TYPE(UserInputQueryBuilder), "boxfn_", make_descriptor(boxObject));
            }

            static PyObject *t_UserInputQueryBuilder_cast_(PyTypeObject *type, PyObject *arg)
            {
              if (!(arg = castCheck(arg, UserInputQueryBuilder::initializeClass, 1)))
                return NULL;
              return t_UserInputQueryBuilder::wrap_Object(UserInputQueryBuilder(((t_UserInputQueryBuilder *) arg)->object.this$));
            }
            static PyObject *t_UserInputQueryBuilder_instance_(PyTypeObject *type, PyObject *arg)
            {
              if (!castCheck(arg, UserInputQueryBuilder::initializeClass, 0))
                Py_RETURN_FALSE;
              Py_RETURN_TRUE;
            }

            static int t_UserInputQueryBuilder_init_(t_UserInputQueryBuilder *self, PyObject *args, PyObject *kwds)
            {
              switch (PyTuple_GET_SIZE(args)) {
               case 1:
                {
                  ::org::apache::lucene::queryparser::classic::QueryParser a0((jobject) NULL);
                  UserInputQueryBuilder object((jobject) NULL);

                  if (!parseArgs(args, "k", ::org::apache::lucene::queryparser::classic::QueryParser::initializeClass, &a0))
                  {
                    INT_CALL(object = UserInputQueryBuilder(a0));
                    self->object = object;
                    break;
                  }
                }
                goto err;
               case 2:
                {
                  ::java::lang::String a0((jobject) NULL);
                  ::org::apache::lucene::analysis::Analyzer a1((jobject) NULL);
                  UserInputQueryBuilder object((jobject) NULL);

                  if (!parseArgs(args, "sk", ::org::apache::lucene::analysis::Analyzer::initializeClass, &a0, &a1))
                  {
                    INT_CALL(object = UserInputQueryBuilder(a0, a1));
                    self->object = object;
                    break;
                  }
                }
               default:
               err:
                PyErr_SetArgsError((PyObject *) self, "__init__", args);
                return -1;
              }

              return 0;
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/tartarus/snowball/ext/ItalianStemmer.h"
#include "java/lang/Object.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace tartarus {
    namespace snowball {
      namespace ext {

        ::java::lang::Class *ItalianStemmer::class$ = NULL;
        jmethodID *ItalianStemmer::mids$ = NULL;
        bool ItalianStemmer::live$ = false;

        jclass ItalianStemmer::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/tartarus/snowball/ext/ItalianStemmer");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_f2cc1bce94666404] = env->getMethodID(cls, "<init>", "()V");
            mids$[mid_equals_8b72f2dcdde6fd1d] = env->getMethodID(cls, "equals", "(Ljava/lang/Object;)Z");
            mids$[mid_hashCode_9972fcc56b44e79d] = env->getMethodID(cls, "hashCode", "()I");
            mids$[mid_stem_8454bd5aa23fd11e] = env->getMethodID(cls, "stem", "()Z");

            class$ = new ::java::lang::Class(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        ItalianStemmer::ItalianStemmer() : ::org::tartarus::snowball::SnowballProgram(env->newObject(initializeClass, &mids$, mid_init$_f2cc1bce94666404)) {}

        jboolean ItalianStemmer::equals(const ::java::lang::Object & a0) const
        {
          return env->callBooleanMethod(this$, mids$[mid_equals_8b72f2dcdde6fd1d], a0.this$);
        }

        jint ItalianStemmer::hashCode() const
        {
          return env->callIntMethod(this$, mids$[mid_hashCode_9972fcc56b44e79d]);
        }

        jboolean ItalianStemmer::stem() const
        {
          return env->callBooleanMethod(this$, mids$[mid_stem_8454bd5aa23fd11e]);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace tartarus {
    namespace snowball {
      namespace ext {
        static PyObject *t_ItalianStemmer_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_ItalianStemmer_instance_(PyTypeObject *type, PyObject *arg);
        static int t_ItalianStemmer_init_(t_ItalianStemmer *self, PyObject *args, PyObject *kwds);
        static PyObject *t_ItalianStemmer_equals(t_ItalianStemmer *self, PyObject *args);
        static PyObject *t_ItalianStemmer_hashCode(t_ItalianStemmer *self, PyObject *args);
        static PyObject *t_ItalianStemmer_stem(t_ItalianStemmer *self, PyObject *args);

        static PyMethodDef t_ItalianStemmer__methods_[] = {
          DECLARE_METHOD(t_ItalianStemmer, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_ItalianStemmer, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_ItalianStemmer, equals, METH_VARARGS),
          DECLARE_METHOD(t_ItalianStemmer, hashCode, METH_VARARGS),
          DECLARE_METHOD(t_ItalianStemmer, stem, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        static PyType_Slot PY_TYPE_SLOTS(ItalianStemmer)[] = {
          { Py_tp_methods, t_ItalianStemmer__methods_ },
          { Py_tp_init, (void *) t_ItalianStemmer_init_ },
          { 0, NULL }
        };

        static PyType_Def *PY_TYPE_BASES(ItalianStemmer)[] = {
          &PY_TYPE_DEF(::org::tartarus::snowball::SnowballProgram),
          NULL
        };

        DEFINE_TYPE(ItalianStemmer, t_ItalianStemmer, ItalianStemmer);

        void t_ItalianStemmer::install(PyObject *module)
        {
          installType(&PY_TYPE(ItalianStemmer), &PY_TYPE_DEF(ItalianStemmer), module, "ItalianStemmer", 0);
        }

        void t_ItalianStemmer::initialize(PyObject *module)
        {
          PyObject_SetAttrString((PyObject *) PY_TYPE(ItalianStemmer), "class_", make_descriptor(ItalianStemmer::initializeClass, 1));
          PyObject_SetAttrString((PyObject *) PY_TYPE(ItalianStemmer), "wrapfn_", make_descriptor(t_ItalianStemmer::wrap_jobject));
          PyObject_SetAttrString((PyObject *) PY_TYPE(ItalianStemmer), "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_ItalianStemmer_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, ItalianStemmer::initializeClass, 1)))
            return NULL;
          return t_ItalianStemmer::wrap_Object(ItalianStemmer(((t_ItalianStemmer *) arg)->object.this$));
        }
        static PyObject *t_ItalianStemmer_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, ItalianStemmer::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_ItalianStemmer_init_(t_ItalianStemmer *self, PyObject *args, PyObject *kwds)
        {
          ItalianStemmer object((jobject) NULL);

          INT_CALL(object = ItalianStemmer());
          self->object = object;

          return 0;
        }

        static PyObject *t_ItalianStemmer_equals(t_ItalianStemmer *self, PyObject *args)
        {
          ::java::lang::Object a0((jobject) NULL);
          jboolean result;

          if (!parseArgs(args, "o", &a0))
          {
            OBJ_CALL(result = self->object.equals(a0));
            Py_RETURN_BOOL(result);
          }

          return callSuper(PY_TYPE(ItalianStemmer), (PyObject *) self, "equals", args, 2);
        }

        static PyObject *t_ItalianStemmer_hashCode(t_ItalianStemmer *self, PyObject *args)
        {
          jint result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.hashCode());
            return PyLong_FromLong((long) result);
          }

          return callSuper(PY_TYPE(ItalianStemmer), (PyObject *) self, "hashCode", args, 2);
        }

        static PyObject *t_ItalianStemmer_stem(t_ItalianStemmer *self, PyObject *args)
        {
          jboolean result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.stem());
            Py_RETURN_BOOL(result);
          }

          return callSuper(PY_TYPE(ItalianStemmer), (PyObject *) self, "stem", args, 2);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/document/StoredField.h"
#include "org/apache/lucene/document/FieldType.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/util/BytesRef.h"
#include "java/lang/String.h"
#include "java/lang/CharSequence.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace document {

        ::java::lang::Class *StoredField::class$ = NULL;
        jmethodID *StoredField::mids$ = NULL;
        bool StoredField::live$ = false;
        ::org::apache::lucene::document::FieldType *StoredField::TYPE = NULL;

        jclass StoredField::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/document/StoredField");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_f9c66fdb7b238fc6] = env->getMethodID(cls, "<init>", "(Ljava/lang/String;[B)V");
            mids$[mid_init$_15b72f6a44ff93f2] = env->getMethodID(cls, "<init>", "(Ljava/lang/String;Ljava/lang/String;)V");
            mids$[mid_init$_63a59e248b245c2c] = env->getMethodID(cls, "<init>", "(Ljava/lang/String;Lorg/apache/lucene/util/BytesRef;)V");
            mids$[mid_init$_b5c6442be7f92276] = env->getMethodID(cls, "<init>", "(Ljava/lang/String;D)V");
            mids$[mid_init$_2cd52353fae0bd4a] = env->getMethodID(cls, "<init>", "(Ljava/lang/String;F)V");
            mids$[mid_init$_3fb1dae8d4037984] = env->getMethodID(cls, "<init>", "(Ljava/lang/String;I)V");
            mids$[mid_init$_0084e2c6585d8c01] = env->getMethodID(cls, "<init>", "(Ljava/lang/String;J)V");
            mids$[mid_init$_0e2fcad016ecc096] = env->getMethodID(cls, "<init>", "(Ljava/lang/String;Ljava/lang/String;Lorg/apache/lucene/document/FieldType;)V");
            mids$[mid_init$_0e3b6f828026d6c9] = env->getMethodID(cls, "<init>", "(Ljava/lang/String;Lorg/apache/lucene/util/BytesRef;Lorg/apache/lucene/document/FieldType;)V");
            mids$[mid_init$_066427170eca178a] = env->getMethodID(cls, "<init>", "(Ljava/lang/String;Ljava/lang/CharSequence;Lorg/apache/lucene/document/FieldType;)V");
            mids$[mid_init$_023d0fa4fd9338e4] = env->getMethodID(cls, "<init>", "(Ljava/lang/String;[BII)V");

            class$ = new ::java::lang::Class(cls);
            cls = (jclass) class$->this$;

            TYPE = new ::org::apache::lucene::document::FieldType(env->getStaticObjectField(cls, "TYPE", "Lorg/apache/lucene/document/FieldType;"));
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        StoredField::StoredField(const ::java::lang::String & a0, const JArray< jbyte > & a1) : ::org::apache::lucene::document::Field(env->newObject(initializeClass, &mids$, mid_init$_f9c66fdb7b238fc6, a0.this$, a1.this$)) {}

        StoredField::StoredField(const ::java::lang::String & a0, const ::java::lang::String & a1) : ::org::apache::lucene::document::Field(env->newObject(initializeClass, &mids$, mid_init$_15b72f6a44ff93f2, a0.this$, a1.this$)) {}

        StoredField::StoredField(const ::java::lang::String & a0, const ::org::apache::lucene::util::BytesRef & a1) : ::org::apache::lucene::document::Field(env->newObject(initializeClass, &mids$, mid_init$_63a59e248b245c2c, a0.this$, a1.this$)) {}

        StoredField::StoredField(const ::java::lang::String & a0, jdouble a1) : ::org::apache::lucene::document::Field(env->newObject(initializeClass, &mids$, mid_init$_b5c6442be7f92276, a0.this$, a1)) {}

        StoredField::StoredField(const ::java::lang::String & a0, jfloat a1) : ::org::apache::lucene::document::Field(env->newObject(initializeClass, &mids$, mid_init$_2cd52353fae0bd4a, a0.this$, a1)) {}

        StoredField::StoredField(const ::java::lang::String & a0, jint a1) : ::org::apache::lucene::document::Field(env->newObject(initializeClass, &mids$, mid_init$_3fb1dae8d4037984, a0.this$, a1)) {}

        StoredField::StoredField(const ::java::lang::String & a0, jlong a1) : ::org::apache::lucene::document::Field(env->newObject(initializeClass, &mids$, mid_init$_0084e2c6585d8c01, a0.this$, a1)) {}

        StoredField::StoredField(const ::java::lang::String & a0, const ::java::lang::String & a1, const ::org::apache::lucene::document::FieldType & a2) : ::org::apache::lucene::document::Field(env->newObject(initializeClass, &mids$, mid_init$_0e2fcad016ecc096, a0.this$, a1.this$, a2.this$)) {}

        StoredField::StoredField(const ::java::lang::String & a0, const ::org::apache::lucene::util::BytesRef & a1, const ::org::apache::lucene::document::FieldType & a2) : ::org::apache::lucene::document::Field(env->newObject(initializeClass, &mids$, mid_init$_0e3b6f828026d6c9, a0.this$, a1.this$, a2.this$)) {}

        StoredField::StoredField(const ::java::lang::String & a0, const ::java::lang::CharSequence & a1, const ::org::apache::lucene::document::FieldType & a2) : ::org::apache::lucene::document::Field(env->newObject(initializeClass, &mids$, mid_init$_066427170eca178a, a0.this$, a1.this$, a2.this$)) {}

        StoredField::StoredField(const ::java::lang::String & a0, const JArray< jbyte > & a1, jint a2, jint a3) : ::org::apache::lucene::document::Field(env->newObject(initializeClass, &mids$, mid_init$_023d0fa4fd9338e4, a0.this$, a1.this$, a2, a3)) {}
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace document {
        static PyObject *t_StoredField_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_StoredField_instance_(PyTypeObject *type, PyObject *arg);
        static int t_StoredField_init_(t_StoredField *self, PyObject *args, PyObject *kwds);

        static PyMethodDef t_StoredField__methods_[] = {
          DECLARE_METHOD(t_StoredField, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_StoredField, instance_, METH_O | METH_CLASS),
          { NULL, NULL, 0, NULL }
        };

        static PyType_Slot PY_TYPE_SLOTS(StoredField)[] = {
          { Py_tp_methods, t_StoredField__methods_ },
          { Py_tp_init, (void *) t_StoredField_init_ },
          { 0, NULL }
        };

        static PyType_Def *PY_TYPE_BASES(StoredField)[] = {
          &PY_TYPE_DEF(::org::apache::lucene::document::Field),
          NULL
        };

        DEFINE_TYPE(StoredField, t_StoredField, StoredField);

        void t_StoredField::install(PyObject *module)
        {
          installType(&PY_TYPE(StoredField), &PY_TYPE_DEF(StoredField), module, "StoredField", 0);
        }

        void t_StoredField::initialize(PyObject *module)
        {
          PyObject_SetAttrString((PyObject *) PY_TYPE(StoredField), "class_", make_descriptor(StoredField::initializeClass, 1));
          PyObject_SetAttrString((PyObject *) PY_TYPE(StoredField), "wrapfn_", make_descriptor(t_StoredField::wrap_jobject));
          PyObject_SetAttrString((PyObject *) PY_TYPE(StoredField), "boxfn_", make_descriptor(boxObject));
          env->getClass(StoredField::initializeClass);
          PyObject_SetAttrString((PyObject *) PY_TYPE(StoredField), "TYPE", make_descriptor(::org::apache::lucene::document::t_FieldType::wrap_Object(*StoredField::TYPE)));
        }

        static PyObject *t_StoredField_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, StoredField::initializeClass, 1)))
            return NULL;
          return t_StoredField::wrap_Object(StoredField(((t_StoredField *) arg)->object.this$));
        }
        static PyObject *t_StoredField_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, StoredField::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_StoredField_init_(t_StoredField *self, PyObject *args, PyObject *kwds)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 2:
            {
              ::java::lang::String a0((jobject) NULL);
              JArray< jbyte > a1((jobject) NULL);
              StoredField object((jobject) NULL);

              if (!parseArgs(args, "s[B", &a0, &a1))
              {
                INT_CALL(object = StoredField(a0, a1));
                self->object = object;
                break;
              }
            }
            {
              ::java::lang::String a0((jobject) NULL);
              ::java::lang::String a1((jobject) NULL);
              StoredField object((jobject) NULL);

              if (!parseArgs(args, "ss", &a0, &a1))
              {
                INT_CALL(object = StoredField(a0, a1));
                self->object = object;
                break;
              }
            }
            {
              ::java::lang::String a0((jobject) NULL);
              ::org::apache::lucene::util::BytesRef a1((jobject) NULL);
              StoredField object((jobject) NULL);

              if (!parseArgs(args, "sk", ::org::apache::lucene::util::BytesRef::initializeClass, &a0, &a1))
              {
                INT_CALL(object = StoredField(a0, a1));
                self->object = object;
                break;
              }
            }
            {
              ::java::lang::String a0((jobject) NULL);
              jdouble a1;
              StoredField object((jobject) NULL);

              if (!parseArgs(args, "sD", &a0, &a1))
              {
                INT_CALL(object = StoredField(a0, a1));
                self->object = object;
                break;
              }
            }
            {
              ::java::lang::String a0((jobject) NULL);
              jfloat a1;
              StoredField object((jobject) NULL);

              if (!parseArgs(args, "sF", &a0, &a1))
              {
                INT_CALL(object = StoredField(a0, a1));
                self->object = object;
                break;
              }
            }
            {
              ::java::lang::String a0((jobject) NULL);
              jint a1;
              StoredField object((jobject) NULL);

              if (!parseArgs(args, "sI", &a0, &a1))
              {
                INT_CALL(object = StoredField(a0, a1));
                self->object = object;
                break;
              }
            }
            {
              ::java::lang::String a0((jobject) NULL);
              jlong a1;
              StoredField object((jobject) NULL);

              if (!parseArgs(args, "sJ", &a0, &a1))
              {
                INT_CALL(object = StoredField(a0, a1));
                self->object = object;
                break;
              }
            }
            goto err;
           case 3:
            {
              ::java::lang::String a0((jobject) NULL);
              ::java::lang::String a1((jobject) NULL);
              ::org::apache::lucene::document::FieldType a2((jobject) NULL);
              StoredField object((jobject) NULL);

              if (!parseArgs(args, "ssk", ::org::apache::lucene::document::FieldType::initializeClass, &a0, &a1, &a2))
              {
                INT_CALL(object = StoredField(a0, a1, a2));
                self->object = object;
                break;
              }
            }
            {
              ::java::lang::String a0((jobject) NULL);
              ::org::apache::lucene::util::BytesRef a1((jobject) NULL);
              ::org::apache::lucene::document::FieldType a2((jobject) NULL);
              StoredField object((jobject) NULL);

              if (!parseArgs(args, "skk", ::org::apache::lucene::util::BytesRef::initializeClass, ::org::apache::lucene::document::FieldType::initializeClass, &a0, &a1, &a2))
              {
                INT_CALL(object = StoredField(a0, a1, a2));
                self->object = object;
                break;
              }
            }
            {
              ::java::lang::String a0((jobject) NULL);
              ::java::lang::CharSequence a1((jobject) NULL);
              ::org::apache::lucene::document::FieldType a2((jobject) NULL);
              StoredField object((jobject) NULL);

              if (!parseArgs(args, "sOk", ::java::lang::PY_TYPE(CharSequence), ::org::apache::lucene::document::FieldType::initializeClass, &a0, &a1, &a2))
              {
                INT_CALL(object = StoredField(a0, a1, a2));
                self->object = object;
                break;
              }
            }
            goto err;
           case 4:
            {
              ::java::lang::String a0((jobject) NULL);
              JArray< jbyte > a1((jobject) NULL);
              jint a2;
              jint a3;
              StoredField object((jobject) NULL);

              if (!parseArgs(args, "s[BII", &a0, &a1, &a2, &a3))
              {
                INT_CALL(object = StoredField(a0, a1, a2, a3));
                self->object = object;
                break;
              }
            }
           default:
           err:
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/document/LatLonDocValuesField.h"
#include "org/apache/lucene/document/ShapeField$QueryRelation.h"
#include "org/apache/lucene/search/SortField.h"
#include "org/apache/lucene/geo/Polygon.h"
#include "org/apache/lucene/document/FieldType.h"
#include "java/lang/Class.h"
#include "java/lang/String.h"
#include "org/apache/lucene/search/Query.h"
#include "org/apache/lucene/geo/LatLonGeometry.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace document {

        ::java::lang::Class *LatLonDocValuesField::class$ = NULL;
        jmethodID *LatLonDocValuesField::mids$ = NULL;
        bool LatLonDocValuesField::live$ = false;
        ::org::apache::lucene::document::FieldType *LatLonDocValuesField::TYPE = NULL;

        jclass LatLonDocValuesField::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/document/LatLonDocValuesField");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_afcb65cb7af1d628] = env->getMethodID(cls, "<init>", "(Ljava/lang/String;DD)V");
            mids$[mid_newDistanceSort_d1d3191139d0b079] = env->getStaticMethodID(cls, "newDistanceSort", "(Ljava/lang/String;DD)Lorg/apache/lucene/search/SortField;");
            mids$[mid_newSlowBoxQuery_a7f4245a62724723] = env->getStaticMethodID(cls, "newSlowBoxQuery", "(Ljava/lang/String;DDDD)Lorg/apache/lucene/search/Query;");
            mids$[mid_newSlowDistanceQuery_42a7446eeb740739] = env->getStaticMethodID(cls, "newSlowDistanceQuery", "(Ljava/lang/String;DDD)Lorg/apache/lucene/search/Query;");
            mids$[mid_newSlowGeometryQuery_5d57fa89ea474605] = env->getStaticMethodID(cls, "newSlowGeometryQuery", "(Ljava/lang/String;Lorg/apache/lucene/document/ShapeField$QueryRelation;[Lorg/apache/lucene/geo/LatLonGeometry;)Lorg/apache/lucene/search/Query;");
            mids$[mid_newSlowPolygonQuery_5f62a5e692542815] = env->getStaticMethodID(cls, "newSlowPolygonQuery", "(Ljava/lang/String;[Lorg/apache/lucene/geo/Polygon;)Lorg/apache/lucene/search/Query;");
            mids$[mid_setLocationValue_75a41c58a4d52f7d] = env->getMethodID(cls, "setLocationValue", "(DD)V");
            mids$[mid_toString_db9b55ba01e03e4b] = env->getMethodID(cls, "toString", "()Ljava/lang/String;");

            class$ = new ::java::lang::Class(cls);
            cls = (jclass) class$->this$;

            TYPE = new ::org::apache::lucene::document::FieldType(env->getStaticObjectField(cls, "TYPE", "Lorg/apache/lucene/document/FieldType;"));
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        LatLonDocValuesField::LatLonDocValuesField(const ::java::lang::String & a0, jdouble a1, jdouble a2) : ::org::apache::lucene::document::Field(env->newObject(initializeClass, &mids$, mid_init$_afcb65cb7af1d628, a0.this$, a1, a2)) {}

        ::org::apache::lucene::search::SortField LatLonDocValuesField::newDistanceSort(const ::java::lang::String & a0, jdouble a1, jdouble a2)
        {
          jclass cls = env->getClass(initializeClass);
          return ::org::apache::lucene::search::SortField(env->callStaticObjectMethod(cls, mids$[mid_newDistanceSort_d1d3191139d0b079], a0.this$, a1, a2));
        }

        ::org::apache::lucene::search::Query LatLonDocValuesField::newSlowBoxQuery(const ::java::lang::String & a0, jdouble a1, jdouble a2, jdouble a3, jdouble a4)
        {
          jclass cls = env->getClass(initializeClass);
          return ::org::apache::lucene::search::Query(env->callStaticObjectMethod(cls, mids$[mid_newSlowBoxQuery_a7f4245a62724723], a0.this$, a1, a2, a3, a4));
        }

        ::org::apache::lucene::search::Query LatLonDocValuesField::newSlowDistanceQuery(const ::java::lang::String & a0, jdouble a1, jdouble a2, jdouble a3)
        {
          jclass cls = env->getClass(initializeClass);
          return ::org::apache::lucene::search::Query(env->callStaticObjectMethod(cls, mids$[mid_newSlowDistanceQuery_42a7446eeb740739], a0.this$, a1, a2, a3));
        }

        ::org::apache::lucene::search::Query LatLonDocValuesField::newSlowGeometryQuery(const ::java::lang::String & a0, const ::org::apache::lucene::document::ShapeField$QueryRelation & a1, const JArray< ::org::apache::lucene::geo::LatLonGeometry > & a2)
        {
          jclass cls = env->getClass(initializeClass);
          return ::org::apache::lucene::search::Query(env->callStaticObjectMethod(cls, mids$[mid_newSlowGeometryQuery_5d57fa89ea474605], a0.this$, a1.this$, a2.this$));
        }

        ::org::apache::lucene::search::Query LatLonDocValuesField::newSlowPolygonQuery(const ::java::lang::String & a0, const JArray< ::org::apache::lucene::geo::Polygon > & a1)
        {
          jclass cls = env->getClass(initializeClass);
          return ::org::apache::lucene::search::Query(env->callStaticObjectMethod(cls, mids$[mid_newSlowPolygonQuery_5f62a5e692542815], a0.this$, a1.this$));
        }

        void LatLonDocValuesField::setLocationValue(jdouble a0, jdouble a1) const
        {
          env->callVoidMethod(this$, mids$[mid_setLocationValue_75a41c58a4d52f7d], a0, a1);
        }

        ::java::lang::String LatLonDocValuesField::toString() const
        {
          return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_db9b55ba01e03e4b]));
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace document {
        static PyObject *t_LatLonDocValuesField_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_LatLonDocValuesField_instance_(PyTypeObject *type, PyObject *arg);
        static int t_LatLonDocValuesField_init_(t_LatLonDocValuesField *self, PyObject *args, PyObject *kwds);
        static PyObject *t_LatLonDocValuesField_newDistanceSort(PyTypeObject *type, PyObject *args);
        static PyObject *t_LatLonDocValuesField_newSlowBoxQuery(PyTypeObject *type, PyObject *args);
        static PyObject *t_LatLonDocValuesField_newSlowDistanceQuery(PyTypeObject *type, PyObject *args);
        static PyObject *t_LatLonDocValuesField_newSlowGeometryQuery(PyTypeObject *type, PyObject *args);
        static PyObject *t_LatLonDocValuesField_newSlowPolygonQuery(PyTypeObject *type, PyObject *args);
        static PyObject *t_LatLonDocValuesField_setLocationValue(t_LatLonDocValuesField *self, PyObject *args);
        static PyObject *t_LatLonDocValuesField_toString(t_LatLonDocValuesField *self, PyObject *args);

        static PyMethodDef t_LatLonDocValuesField__methods_[] = {
          DECLARE_METHOD(t_LatLonDocValuesField, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_LatLonDocValuesField, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_LatLonDocValuesField, newDistanceSort, METH_VARARGS | METH_CLASS),
          DECLARE_METHOD(t_LatLonDocValuesField, newSlowBoxQuery, METH_VARARGS | METH_CLASS),
          DECLARE_METHOD(t_LatLonDocValuesField, newSlowDistanceQuery, METH_VARARGS | METH_CLASS),
          DECLARE_METHOD(t_LatLonDocValuesField, newSlowGeometryQuery, METH_VARARGS | METH_CLASS),
          DECLARE_METHOD(t_LatLonDocValuesField, newSlowPolygonQuery, METH_VARARGS | METH_CLASS),
          DECLARE_METHOD(t_LatLonDocValuesField, setLocationValue, METH_VARARGS),
          DECLARE_METHOD(t_LatLonDocValuesField, toString, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        static PyType_Slot PY_TYPE_SLOTS(LatLonDocValuesField)[] = {
          { Py_tp_methods, t_LatLonDocValuesField__methods_ },
          { Py_tp_init, (void *) t_LatLonDocValuesField_init_ },
          { 0, NULL }
        };

        static PyType_Def *PY_TYPE_BASES(LatLonDocValuesField)[] = {
          &PY_TYPE_DEF(::org::apache::lucene::document::Field),
          NULL
        };

        DEFINE_TYPE(LatLonDocValuesField, t_LatLonDocValuesField, LatLonDocValuesField);

        void t_LatLonDocValuesField::install(PyObject *module)
        {
          installType(&PY_TYPE(LatLonDocValuesField), &PY_TYPE_DEF(LatLonDocValuesField), module, "LatLonDocValuesField", 0);
        }

        void t_LatLonDocValuesField::initialize(PyObject *module)
        {
          PyObject_SetAttrString((PyObject *) PY_TYPE(LatLonDocValuesField), "class_", make_descriptor(LatLonDocValuesField::initializeClass, 1));
          PyObject_SetAttrString((PyObject *) PY_TYPE(LatLonDocValuesField), "wrapfn_", make_descriptor(t_LatLonDocValuesField::wrap_jobject));
          PyObject_SetAttrString((PyObject *) PY_TYPE(LatLonDocValuesField), "boxfn_", make_descriptor(boxObject));
          env->getClass(LatLonDocValuesField::initializeClass);
          PyObject_SetAttrString((PyObject *) PY_TYPE(LatLonDocValuesField), "TYPE", make_descriptor(::org::apache::lucene::document::t_FieldType::wrap_Object(*LatLonDocValuesField::TYPE)));
        }

        static PyObject *t_LatLonDocValuesField_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, LatLonDocValuesField::initializeClass, 1)))
            return NULL;
          return t_LatLonDocValuesField::wrap_Object(LatLonDocValuesField(((t_LatLonDocValuesField *) arg)->object.this$));
        }
        static PyObject *t_LatLonDocValuesField_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, LatLonDocValuesField::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_LatLonDocValuesField_init_(t_LatLonDocValuesField *self, PyObject *args, PyObject *kwds)
        {
          ::java::lang::String a0((jobject) NULL);
          jdouble a1;
          jdouble a2;
          LatLonDocValuesField object((jobject) NULL);

          if (!parseArgs(args, "sDD", &a0, &a1, &a2))
          {
            INT_CALL(object = LatLonDocValuesField(a0, a1, a2));
            self->object = object;
          }
          else
          {
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }

        static PyObject *t_LatLonDocValuesField_newDistanceSort(PyTypeObject *type, PyObject *args)
        {
          ::java::lang::String a0((jobject) NULL);
          jdouble a1;
          jdouble a2;
          ::org::apache::lucene::search::SortField result((jobject) NULL);

          if (!parseArgs(args, "sDD", &a0, &a1, &a2))
          {
            OBJ_CALL(result = ::org::apache::lucene::document::LatLonDocValuesField::newDistanceSort(a0, a1, a2));
            return ::org::apache::lucene::search::t_SortField::wrap_Object(result);
          }

          PyErr_SetArgsError(type, "newDistanceSort", args);
          return NULL;
        }

        static PyObject *t_LatLonDocValuesField_newSlowBoxQuery(PyTypeObject *type, PyObject *args)
        {
          ::java::lang::String a0((jobject) NULL);
          jdouble a1;
          jdouble a2;
          jdouble a3;
          jdouble a4;
          ::org::apache::lucene::search::Query result((jobject) NULL);

          if (!parseArgs(args, "sDDDD", &a0, &a1, &a2, &a3, &a4))
          {
            OBJ_CALL(result = ::org::apache::lucene::document::LatLonDocValuesField::newSlowBoxQuery(a0, a1, a2, a3, a4));
            return ::org::apache::lucene::search::t_Query::wrap_Object(result);
          }

          PyErr_SetArgsError(type, "newSlowBoxQuery", args);
          return NULL;
        }

        static PyObject *t_LatLonDocValuesField_newSlowDistanceQuery(PyTypeObject *type, PyObject *args)
        {
          ::java::lang::String a0((jobject) NULL);
          jdouble a1;
          jdouble a2;
          jdouble a3;
          ::org::apache::lucene::search::Query result((jobject) NULL);

          if (!parseArgs(args, "sDDD", &a0, &a1, &a2, &a3))
          {
            OBJ_CALL(result = ::org::apache::lucene::document::LatLonDocValuesField::newSlowDistanceQuery(a0, a1, a2, a3));
            return ::org::apache::lucene::search::t_Query::wrap_Object(result);
          }

          PyErr_SetArgsError(type, "newSlowDistanceQuery", args);
          return NULL;
        }

        static PyObject *t_LatLonDocValuesField_newSlowGeometryQuery(PyTypeObject *type, PyObject *args)
        {
          ::java::lang::String a0((jobject) NULL);
          ::org::apache::lucene::document::ShapeField$QueryRelation a1((jobject) NULL);
          PyTypeObject **p1;
          JArray< ::org::apache::lucene::geo::LatLonGeometry > a2((jobject) NULL);
          ::org::apache::lucene::search::Query result((jobject) NULL);

          if (!parseArgs(args, "sK[k", ::org::apache::lucene::document::ShapeField$QueryRelation::initializeClass, ::org::apache::lucene::geo::LatLonGeometry::initializeClass, &a0, &a1, &p1, ::org::apache::lucene::document::t_ShapeField$QueryRelation::parameters_, &a2))
          {
            OBJ_CALL(result = ::org::apache::lucene::document::LatLonDocValuesField::newSlowGeometryQuery(a0, a1, a2));
            return ::org::apache::lucene::search::t_Query::wrap_Object(result);
          }

          PyErr_SetArgsError(type, "newSlowGeometryQuery", args);
          return NULL;
        }

        static PyObject *t_LatLonDocValuesField_newSlowPolygonQuery(PyTypeObject *type, PyObject *args)
        {
          ::java::lang::String a0((jobject) NULL);
          JArray< ::org::apache::lucene::geo::Polygon > a1((jobject) NULL);
          ::org::apache::lucene::search::Query result((jobject) NULL);

          if (!parseArgs(args, "s[k", ::org::apache::lucene::geo::Polygon::initializeClass, &a0, &a1))
          {
            OBJ_CALL(result = ::org::apache::lucene::document::LatLonDocValuesField::newSlowPolygonQuery(a0, a1));
            return ::org::apache::lucene::search::t_Query::wrap_Object(result);
          }

          PyErr_SetArgsError(type, "newSlowPolygonQuery", args);
          return NULL;
        }

        static PyObject *t_LatLonDocValuesField_setLocationValue(t_LatLonDocValuesField *self, PyObject *args)
        {
          jdouble a0;
          jdouble a1;

          if (!parseArgs(args, "DD", &a0, &a1))
          {
            OBJ_CALL(self->object.setLocationValue(a0, a1));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "setLocationValue", args);
          return NULL;
        }

        static PyObject *t_LatLonDocValuesField_toString(t_LatLonDocValuesField *self, PyObject *args)
        {
          ::java::lang::String result((jobject) NULL);

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.toString());
            return j2p(result);
          }

          return callSuper(PY_TYPE(LatLonDocValuesField), (PyObject *) self, "toString", args, 2);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/util/UnicodeProps.h"
#include "org/apache/lucene/util/Bits.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace util {

          ::java::lang::Class *UnicodeProps::class$ = NULL;
          jmethodID *UnicodeProps::mids$ = NULL;
          bool UnicodeProps::live$ = false;
          ::java::lang::String *UnicodeProps::UNICODE_VERSION = NULL;
          ::org::apache::lucene::util::Bits *UnicodeProps::WHITESPACE = NULL;

          jclass UnicodeProps::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/util/UnicodeProps");

              class$ = new ::java::lang::Class(cls);
              cls = (jclass) class$->this$;

              UNICODE_VERSION = new ::java::lang::String(env->getStaticObjectField(cls, "UNICODE_VERSION", "Ljava/lang/String;"));
              WHITESPACE = new ::org::apache::lucene::util::Bits(env->getStaticObjectField(cls, "WHITESPACE", "Lorg/apache/lucene/util/Bits;"));
              live$ = true;
            }
            return (jclass) class$->this$;
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace util {
          static PyObject *t_UnicodeProps_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_UnicodeProps_instance_(PyTypeObject *type, PyObject *arg);

          static PyMethodDef t_UnicodeProps__methods_[] = {
            DECLARE_METHOD(t_UnicodeProps, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_UnicodeProps, instance_, METH_O | METH_CLASS),
            { NULL, NULL, 0, NULL }
          };

          static PyType_Slot PY_TYPE_SLOTS(UnicodeProps)[] = {
            { Py_tp_methods, t_UnicodeProps__methods_ },
            { Py_tp_init, (void *) abstract_init },
            { 0, NULL }
          };

          static PyType_Def *PY_TYPE_BASES(UnicodeProps)[] = {
            &PY_TYPE_DEF(::java::lang::Object),
            NULL
          };

          DEFINE_TYPE(UnicodeProps, t_UnicodeProps, UnicodeProps);

          void t_UnicodeProps::install(PyObject *module)
          {
            installType(&PY_TYPE(UnicodeProps), &PY_TYPE_DEF(UnicodeProps), module, "UnicodeProps", 0);
          }

          void t_UnicodeProps::initialize(PyObject *module)
          {
            PyObject_SetAttrString((PyObject *) PY_TYPE(UnicodeProps), "class_", make_descriptor(UnicodeProps::initializeClass, 1));
            PyObject_SetAttrString((PyObject *) PY_TYPE(UnicodeProps), "wrapfn_", make_descriptor(t_UnicodeProps::wrap_jobject));
            PyObject_SetAttrString((PyObject *) PY_TYPE(UnicodeProps), "boxfn_", make_descriptor(boxObject));
            env->getClass(UnicodeProps::initializeClass);
            PyObject_SetAttrString((PyObject *) PY_TYPE(UnicodeProps), "UNICODE_VERSION", make_descriptor(j2p(*UnicodeProps::UNICODE_VERSION)));
            PyObject_SetAttrString((PyObject *) PY_TYPE(UnicodeProps), "WHITESPACE", make_descriptor(::org::apache::lucene::util::t_Bits::wrap_Object(*UnicodeProps::WHITESPACE)));
          }

          static PyObject *t_UnicodeProps_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, UnicodeProps::initializeClass, 1)))
              return NULL;
            return t_UnicodeProps::wrap_Object(UnicodeProps(((t_UnicodeProps *) arg)->object.this$));
          }
          static PyObject *t_UnicodeProps_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, UnicodeProps::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/spatial3d/geom/GeoCompositeAreaShape.h"
#include "java/io/InputStream.h"
#include "java/lang/Class.h"
#include "java/lang/Object.h"
#include "org/apache/lucene/spatial3d/geom/GeoAreaShape.h"
#include "java/lang/String.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/spatial3d/geom/PlanetModel.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace spatial3d {
        namespace geom {

          ::java::lang::Class *GeoCompositeAreaShape::class$ = NULL;
          jmethodID *GeoCompositeAreaShape::mids$ = NULL;
          bool GeoCompositeAreaShape::live$ = false;

          jclass GeoCompositeAreaShape::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/spatial3d/geom/GeoCompositeAreaShape");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_fd580b4e02411290] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/spatial3d/geom/PlanetModel;)V");
              mids$[mid_init$_fa69e987247475d8] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/spatial3d/geom/PlanetModel;Ljava/io/InputStream;)V");
              mids$[mid_equals_8b72f2dcdde6fd1d] = env->getMethodID(cls, "equals", "(Ljava/lang/Object;)Z");
              mids$[mid_toString_db9b55ba01e03e4b] = env->getMethodID(cls, "toString", "()Ljava/lang/String;");

              class$ = new ::java::lang::Class(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          GeoCompositeAreaShape::GeoCompositeAreaShape(const ::org::apache::lucene::spatial3d::geom::PlanetModel & a0) : ::org::apache::lucene::spatial3d::geom::GeoBaseCompositeAreaShape(env->newObject(initializeClass, &mids$, mid_init$_fd580b4e02411290, a0.this$)) {}

          GeoCompositeAreaShape::GeoCompositeAreaShape(const ::org::apache::lucene::spatial3d::geom::PlanetModel & a0, const ::java::io::InputStream & a1) : ::org::apache::lucene::spatial3d::geom::GeoBaseCompositeAreaShape(env->newObject(initializeClass, &mids$, mid_init$_fa69e987247475d8, a0.this$, a1.this$)) {}

          jboolean GeoCompositeAreaShape::equals(const ::java::lang::Object & a0) const
          {
            return env->callBooleanMethod(this$, mids$[mid_equals_8b72f2dcdde6fd1d], a0.this$);
          }

          ::java::lang::String GeoCompositeAreaShape::toString() const
          {
            return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_db9b55ba01e03e4b]));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace spatial3d {
        namespace geom {
          static PyObject *t_GeoCompositeAreaShape_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_GeoCompositeAreaShape_instance_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_GeoCompositeAreaShape_of_(t_GeoCompositeAreaShape *self, PyObject *args);
          static int t_GeoCompositeAreaShape_init_(t_GeoCompositeAreaShape *self, PyObject *args, PyObject *kwds);
          static PyObject *t_GeoCompositeAreaShape_equals(t_GeoCompositeAreaShape *self, PyObject *args);
          static PyObject *t_GeoCompositeAreaShape_toString(t_GeoCompositeAreaShape *self, PyObject *args);
          static PyObject *t_GeoCompositeAreaShape_get__parameters_(t_GeoCompositeAreaShape *self, void *data);
          static PyGetSetDef t_GeoCompositeAreaShape__fields_[] = {
            DECLARE_GET_FIELD(t_GeoCompositeAreaShape, parameters_),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_GeoCompositeAreaShape__methods_[] = {
            DECLARE_METHOD(t_GeoCompositeAreaShape, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_GeoCompositeAreaShape, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_GeoCompositeAreaShape, of_, METH_VARARGS),
            DECLARE_METHOD(t_GeoCompositeAreaShape, equals, METH_VARARGS),
            DECLARE_METHOD(t_GeoCompositeAreaShape, toString, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          static PyType_Slot PY_TYPE_SLOTS(GeoCompositeAreaShape)[] = {
            { Py_tp_methods, t_GeoCompositeAreaShape__methods_ },
            { Py_tp_init, (void *) t_GeoCompositeAreaShape_init_ },
            { Py_tp_getset, t_GeoCompositeAreaShape__fields_ },
            { 0, NULL }
          };

          static PyType_Def *PY_TYPE_BASES(GeoCompositeAreaShape)[] = {
            &PY_TYPE_DEF(::org::apache::lucene::spatial3d::geom::GeoBaseCompositeAreaShape),
            NULL
          };

          DEFINE_TYPE(GeoCompositeAreaShape, t_GeoCompositeAreaShape, GeoCompositeAreaShape);
          PyObject *t_GeoCompositeAreaShape::wrap_Object(const GeoCompositeAreaShape& object, PyTypeObject *p0)
          {
            PyObject *obj = t_GeoCompositeAreaShape::wrap_Object(object);
            if (obj != NULL && obj != Py_None)
            {
              t_GeoCompositeAreaShape *self = (t_GeoCompositeAreaShape *) obj;
              self->parameters[0] = p0;
            }
            return obj;
          }

          PyObject *t_GeoCompositeAreaShape::wrap_jobject(const jobject& object, PyTypeObject *p0)
          {
            PyObject *obj = t_GeoCompositeAreaShape::wrap_jobject(object);
            if (obj != NULL && obj != Py_None)
            {
              t_GeoCompositeAreaShape *self = (t_GeoCompositeAreaShape *) obj;
              self->parameters[0] = p0;
            }
            return obj;
          }

          void t_GeoCompositeAreaShape::install(PyObject *module)
          {
            installType(&PY_TYPE(GeoCompositeAreaShape), &PY_TYPE_DEF(GeoCompositeAreaShape), module, "GeoCompositeAreaShape", 0);
          }

          void t_GeoCompositeAreaShape::initialize(PyObject *module)
          {
            PyObject_SetAttrString((PyObject *) PY_TYPE(GeoCompositeAreaShape), "class_", make_descriptor(GeoCompositeAreaShape::initializeClass, 1));
            PyObject_SetAttrString((PyObject *) PY_TYPE(GeoCompositeAreaShape), "wrapfn_", make_descriptor(t_GeoCompositeAreaShape::wrap_jobject));
            PyObject_SetAttrString((PyObject *) PY_TYPE(GeoCompositeAreaShape), "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_GeoCompositeAreaShape_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, GeoCompositeAreaShape::initializeClass, 1)))
              return NULL;
            return t_GeoCompositeAreaShape::wrap_Object(GeoCompositeAreaShape(((t_GeoCompositeAreaShape *) arg)->object.this$));
          }
          static PyObject *t_GeoCompositeAreaShape_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, GeoCompositeAreaShape::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static PyObject *t_GeoCompositeAreaShape_of_(t_GeoCompositeAreaShape *self, PyObject *args)
          {
            if (!parseArg(args, "T", 1, &(self->parameters)))
              Py_RETURN_SELF;
            return PyErr_SetArgsError((PyObject *) self, "of_", args);
          }

          static int t_GeoCompositeAreaShape_init_(t_GeoCompositeAreaShape *self, PyObject *args, PyObject *kwds)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 1:
              {
                ::org::apache::lucene::spatial3d::geom::PlanetModel a0((jobject) NULL);
                GeoCompositeAreaShape object((jobject) NULL);

                if (!parseArgs(args, "k", ::org::apache::lucene::spatial3d::geom::PlanetModel::initializeClass, &a0))
                {
                  INT_CALL(object = GeoCompositeAreaShape(a0));
                  self->object = object;
                  self->parameters[0] = ::org::apache::lucene::spatial3d::geom::PY_TYPE(GeoAreaShape);
                  break;
                }
              }
              goto err;
             case 2:
              {
                ::org::apache::lucene::spatial3d::geom::PlanetModel a0((jobject) NULL);
                ::java::io::InputStream a1((jobject) NULL);
                GeoCompositeAreaShape object((jobject) NULL);

                if (!parseArgs(args, "kk", ::org::apache::lucene::spatial3d::geom::PlanetModel::initializeClass, ::java::io::InputStream::initializeClass, &a0, &a1))
                {
                  INT_CALL(object = GeoCompositeAreaShape(a0, a1));
                  self->object = object;
                  self->parameters[0] = ::org::apache::lucene::spatial3d::geom::PY_TYPE(GeoAreaShape);
                  break;
                }
              }
             default:
             err:
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_GeoCompositeAreaShape_equals(t_GeoCompositeAreaShape *self, PyObject *args)
          {
            ::java::lang::Object a0((jobject) NULL);
            jboolean result;

            if (!parseArgs(args, "o", &a0))
            {
              OBJ_CALL(result = self->object.equals(a0));
              Py_RETURN_BOOL(result);
            }

            return callSuper(PY_TYPE(GeoCompositeAreaShape), (PyObject *) self, "equals", args, 2);
          }

          static PyObject *t_GeoCompositeAreaShape_toString(t_GeoCompositeAreaShape *self, PyObject *args)
          {
            ::java::lang::String result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.toString());
              return j2p(result);
            }

            return callSuper(PY_TYPE(GeoCompositeAreaShape), (PyObject *) self, "toString", args, 2);
          }
          static PyObject *t_GeoCompositeAreaShape_get__parameters_(t_GeoCompositeAreaShape *self, void *data)
          {
            return typeParameters(self->parameters, sizeof(self->parameters));
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/spell/StringDistance.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace spell {

          ::java::lang::Class *StringDistance::class$ = NULL;
          jmethodID *StringDistance::mids$ = NULL;
          bool StringDistance::live$ = false;

          jclass StringDistance::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/search/spell/StringDistance");

              mids$ = new jmethodID[max_mid];
              mids$[mid_getDistance_31e45f475cca0d26] = env->getMethodID(cls, "getDistance", "(Ljava/lang/String;Ljava/lang/String;)F");

              class$ = new ::java::lang::Class(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          jfloat StringDistance::getDistance(const ::java::lang::String & a0, const ::java::lang::String & a1) const
          {
            return env->callFloatMethod(this$, mids$[mid_getDistance_31e45f475cca0d26], a0.this$, a1.this$);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace spell {
          static PyObject *t_StringDistance_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_StringDistance_instance_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_StringDistance_getDistance(t_StringDistance *self, PyObject *args);

          static PyMethodDef t_StringDistance__methods_[] = {
            DECLARE_METHOD(t_StringDistance, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_StringDistance, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_StringDistance, getDistance, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          static PyType_Slot PY_TYPE_SLOTS(StringDistance)[] = {
            { Py_tp_methods, t_StringDistance__methods_ },
            { Py_tp_init, (void *) abstract_init },
            { 0, NULL }
          };

          static PyType_Def *PY_TYPE_BASES(StringDistance)[] = {
            &PY_TYPE_DEF(::java::lang::Object),
            NULL
          };

          DEFINE_TYPE(StringDistance, t_StringDistance, StringDistance);

          void t_StringDistance::install(PyObject *module)
          {
            installType(&PY_TYPE(StringDistance), &PY_TYPE_DEF(StringDistance), module, "StringDistance", 0);
          }

          void t_StringDistance::initialize(PyObject *module)
          {
            PyObject_SetAttrString((PyObject *) PY_TYPE(StringDistance), "class_", make_descriptor(StringDistance::initializeClass, 1));
            PyObject_SetAttrString((PyObject *) PY_TYPE(StringDistance), "wrapfn_", make_descriptor(t_StringDistance::wrap_jobject));
            PyObject_SetAttrString((PyObject *) PY_TYPE(StringDistance), "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_StringDistance_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, StringDistance::initializeClass, 1)))
              return NULL;
            return t_StringDistance::wrap_Object(StringDistance(((t_StringDistance *) arg)->object.this$));
          }
          static PyObject *t_StringDistance_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, StringDistance::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static PyObject *t_StringDistance_getDistance(t_StringDistance *self, PyObject *args)
          {
            ::java::lang::String a0((jobject) NULL);
            ::java::lang::String a1((jobject) NULL);
            jfloat result;

            if (!parseArgs(args, "ss", &a0, &a1))
            {
              OBJ_CALL(result = self->object.getDistance(a0, a1));
              return PyFloat_FromDouble((double) result);
            }

            PyErr_SetArgsError((PyObject *) self, "getDistance", args);
            return NULL;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/pylucene/search/highlight/PythonFormatter.h"
#include "org/apache/lucene/search/highlight/Formatter.h"
#include "org/apache/lucene/search/highlight/TokenGroup.h"
#include "java/lang/Class.h"
#include "java/lang/String.h"
#include "java/lang/Throwable.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace pylucene {
      namespace search {
        namespace highlight {

          ::java::lang::Class *PythonFormatter::class$ = NULL;
          jmethodID *PythonFormatter::mids$ = NULL;
          bool PythonFormatter::live$ = false;

          jclass PythonFormatter::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/pylucene/search/highlight/PythonFormatter");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_f2cc1bce94666404] = env->getMethodID(cls, "<init>", "()V");
              mids$[mid_finalize_f2cc1bce94666404] = env->getMethodID(cls, "finalize", "()V");
              mids$[mid_highlightTerm_89cd75f77d741eb4] = env->getMethodID(cls, "highlightTerm", "(Ljava/lang/String;Lorg/apache/lucene/search/highlight/TokenGroup;)Ljava/lang/String;");
              mids$[mid_pythonDecRef_f2cc1bce94666404] = env->getMethodID(cls, "pythonDecRef", "()V");
              mids$[mid_pythonExtension_2e5ae9edcb9b072f] = env->getMethodID(cls, "pythonExtension", "()J");
              mids$[mid_pythonExtension_9c778c9bce6694df] = env->getMethodID(cls, "pythonExtension", "(J)V");

              class$ = new ::java::lang::Class(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          PythonFormatter::PythonFormatter() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_f2cc1bce94666404)) {}

          void PythonFormatter::finalize() const
          {
            env->callVoidMethod(this$, mids$[mid_finalize_f2cc1bce94666404]);
          }

          jlong PythonFormatter::pythonExtension() const
          {
            return env->callLongMethod(this$, mids$[mid_pythonExtension_2e5ae9edcb9b072f]);
          }

          void PythonFormatter::pythonExtension(jlong a0) const
          {
            env->callVoidMethod(this$, mids$[mid_pythonExtension_9c778c9bce6694df], a0);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace pylucene {
      namespace search {
        namespace highlight {
          static PyObject *t_PythonFormatter_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_PythonFormatter_instance_(PyTypeObject *type, PyObject *arg);
          static int t_PythonFormatter_init_(t_PythonFormatter *self, PyObject *args, PyObject *kwds);
          static PyObject *t_PythonFormatter_finalize(t_PythonFormatter *self);
          static PyObject *t_PythonFormatter_pythonExtension(t_PythonFormatter *self, PyObject *args);
          static jobject JNICALL t_PythonFormatter_highlightTerm0(JNIEnv *jenv, jobject jobj, jobject a0, jobject a1);
          static void JNICALL t_PythonFormatter_pythonDecRef1(JNIEnv *jenv, jobject jobj);
          static PyObject *t_PythonFormatter_get__self(t_PythonFormatter *self, void *data);
          static PyGetSetDef t_PythonFormatter__fields_[] = {
            DECLARE_GET_FIELD(t_PythonFormatter, self),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_PythonFormatter__methods_[] = {
            DECLARE_METHOD(t_PythonFormatter, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_PythonFormatter, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_PythonFormatter, finalize, METH_NOARGS),
            DECLARE_METHOD(t_PythonFormatter, pythonExtension, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          static PyType_Slot PY_TYPE_SLOTS(PythonFormatter)[] = {
            { Py_tp_methods, t_PythonFormatter__methods_ },
            { Py_tp_init, (void *) t_PythonFormatter_init_ },
            { Py_tp_getset, t_PythonFormatter__fields_ },
            { 0, NULL }
          };

          static PyType_Def *PY_TYPE_BASES(PythonFormatter)[] = {
            &PY_TYPE_DEF(::java::lang::Object),
            NULL
          };

          DEFINE_TYPE(PythonFormatter, t_PythonFormatter, PythonFormatter);

          void t_PythonFormatter::install(PyObject *module)
          {
            installType(&PY_TYPE(PythonFormatter), &PY_TYPE_DEF(PythonFormatter), module, "PythonFormatter", 1);
          }

          void t_PythonFormatter::initialize(PyObject *module)
          {
            PyObject_SetAttrString((PyObject *) PY_TYPE(PythonFormatter), "class_", make_descriptor(PythonFormatter::initializeClass, 1));
            PyObject_SetAttrString((PyObject *) PY_TYPE(PythonFormatter), "wrapfn_", make_descriptor(t_PythonFormatter::wrap_jobject));
            PyObject_SetAttrString((PyObject *) PY_TYPE(PythonFormatter), "boxfn_", make_descriptor(boxObject));
            jclass cls = env->getClass(PythonFormatter::initializeClass);
            JNINativeMethod methods[] = {
              { "highlightTerm", "(Ljava/lang/String;Lorg/apache/lucene/search/highlight/TokenGroup;)Ljava/lang/String;", (void *) t_PythonFormatter_highlightTerm0 },
              { "pythonDecRef", "()V", (void *) t_PythonFormatter_pythonDecRef1 },
            };
            env->registerNatives(cls, methods, 2);
          }

          static PyObject *t_PythonFormatter_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, PythonFormatter::initializeClass, 1)))
              return NULL;
            return t_PythonFormatter::wrap_Object(PythonFormatter(((t_PythonFormatter *) arg)->object.this$));
          }
          static PyObject *t_PythonFormatter_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, PythonFormatter::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_PythonFormatter_init_(t_PythonFormatter *self, PyObject *args, PyObject *kwds)
          {
            PythonFormatter object((jobject) NULL);

            INT_CALL(object = PythonFormatter());
            self->object = object;

            Py_INCREF((PyObject *) self);
            self->object.pythonExtension((jlong) (Py_intptr_t) (void *) self);

            return 0;
          }

          static PyObject *t_PythonFormatter_finalize(t_PythonFormatter *self)
          {
            OBJ_CALL(self->object.finalize());
            Py_RETURN_NONE;
          }

          static PyObject *t_PythonFormatter_pythonExtension(t_PythonFormatter *self, PyObject *args)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 0:
              {
                jlong result;
                OBJ_CALL(result = self->object.pythonExtension());
                return PyLong_FromLongLong((PY_LONG_LONG) result);
              }
              break;
             case 1:
              {
                jlong a0;

                if (!parseArgs(args, "J", &a0))
                {
                  OBJ_CALL(self->object.pythonExtension(a0));
                  Py_RETURN_NONE;
                }
              }
            }

            PyErr_SetArgsError((PyObject *) self, "pythonExtension", args);
            return NULL;
          }

          static jobject JNICALL t_PythonFormatter_highlightTerm0(JNIEnv *jenv, jobject jobj, jobject a0, jobject a1)
          {
            jlong ptr = jenv->CallLongMethod(jobj, PythonFormatter::mids$[PythonFormatter::mid_pythonExtension_2e5ae9edcb9b072f]);
            PyObject *obj = (PyObject *) (Py_intptr_t) ptr;
            PythonGIL gil(jenv);
            ::java::lang::String value((jobject) NULL);
            PyObject *o0 = env->fromJString((jstring) a0, 0);
            PyObject *o1 = ::org::apache::lucene::search::highlight::t_TokenGroup::wrap_Object(::org::apache::lucene::search::highlight::TokenGroup(a1));
            PyObject *result = PyObject_CallMethod(obj, "highlightTerm", "OO", o0, o1);
            Py_DECREF(o0);
            Py_DECREF(o1);
            if (!result)
              throwPythonError();
            else if (parseArg(result, "s", &value))
            {
              throwTypeError("highlightTerm", result);
              Py_DECREF(result);
            }
            else
            {
              jobj = jenv->NewLocalRef(value.this$);
              Py_DECREF(result);
              return jobj;
            }

            return (jobject) NULL;
          }

          static void JNICALL t_PythonFormatter_pythonDecRef1(JNIEnv *jenv, jobject jobj)
          {
            jlong ptr = jenv->CallLongMethod(jobj, PythonFormatter::mids$[PythonFormatter::mid_pythonExtension_2e5ae9edcb9b072f]);
            PyObject *obj = (PyObject *) (Py_intptr_t) ptr;

            if (obj != NULL)
            {
              jenv->CallVoidMethod(jobj, PythonFormatter::mids$[PythonFormatter::mid_pythonExtension_9c778c9bce6694df], (jlong) 0);
              env->finalizeObject(jenv, obj);
            }
          }

          static PyObject *t_PythonFormatter_get__self(t_PythonFormatter *self, void *data)
          {
            jlong ptr;
            OBJ_CALL(ptr = self->object.pythonExtension());
            PyObject *obj = (PyObject *) (Py_intptr_t) ptr;

            if (obj != NULL)
            {
              Py_INCREF(obj);
              return obj;
            }
            else
              Py_RETURN_NONE;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/vectorhighlight/FastVectorHighlighter.h"
#include "org/apache/lucene/index/IndexReader.h"
#include "org/apache/lucene/search/vectorhighlight/FragmentsBuilder.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/search/vectorhighlight/FieldQuery.h"
#include "org/apache/lucene/search/highlight/Encoder.h"
#include "org/apache/lucene/search/vectorhighlight/FragListBuilder.h"
#include "java/lang/String.h"
#include "org/apache/lucene/search/Query.h"
#include "java/util/Set.h"
#include "java/io/IOException.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace vectorhighlight {

          ::java::lang::Class *FastVectorHighlighter::class$ = NULL;
          jmethodID *FastVectorHighlighter::mids$ = NULL;
          bool FastVectorHighlighter::live$ = false;
          jboolean FastVectorHighlighter::DEFAULT_FIELD_MATCH = (jboolean) 0;
          jboolean FastVectorHighlighter::DEFAULT_PHRASE_HIGHLIGHT = (jboolean) 0;

          jclass FastVectorHighlighter::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/search/vectorhighlight/FastVectorHighlighter");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_f2cc1bce94666404] = env->getMethodID(cls, "<init>", "()V");
              mids$[mid_init$_33bb9a5a88dc139c] = env->getMethodID(cls, "<init>", "(ZZ)V");
              mids$[mid_init$_9d85824f544ac283] = env->getMethodID(cls, "<init>", "(ZZLorg/apache/lucene/search/vectorhighlight/FragListBuilder;Lorg/apache/lucene/search/vectorhighlight/FragmentsBuilder;)V");
              mids$[mid_getBestFragment_30df0a0ebbe0fc55] = env->getMethodID(cls, "getBestFragment", "(Lorg/apache/lucene/search/vectorhighlight/FieldQuery;Lorg/apache/lucene/index/IndexReader;ILjava/lang/String;I)Ljava/lang/String;");
              mids$[mid_getBestFragment_42ab1c819ee339a7] = env->getMethodID(cls, "getBestFragment", "(Lorg/apache/lucene/search/vectorhighlight/FieldQuery;Lorg/apache/lucene/index/IndexReader;ILjava/lang/String;ILorg/apache/lucene/search/vectorhighlight/FragListBuilder;Lorg/apache/lucene/search/vectorhighlight/FragmentsBuilder;[Ljava/lang/String;[Ljava/lang/String;Lorg/apache/lucene/search/highlight/Encoder;)Ljava/lang/String;");
              mids$[mid_getBestFragments_4ca2d2f115f03123] = env->getMethodID(cls, "getBestFragments", "(Lorg/apache/lucene/search/vectorhighlight/FieldQuery;Lorg/apache/lucene/index/IndexReader;ILjava/lang/String;II)[Ljava/lang/String;");
              mids$[mid_getBestFragments_e8c124dbd009da1a] = env->getMethodID(cls, "getBestFragments", "(Lorg/apache/lucene/search/vectorhighlight/FieldQuery;Lorg/apache/lucene/index/IndexReader;ILjava/lang/String;IILorg/apache/lucene/search/vectorhighlight/FragListBuilder;Lorg/apache/lucene/search/vectorhighlight/FragmentsBuilder;[Ljava/lang/String;[Ljava/lang/String;Lorg/apache/lucene/search/highlight/Encoder;)[Ljava/lang/String;");
              mids$[mid_getBestFragments_186450ed17104b68] = env->getMethodID(cls, "getBestFragments", "(Lorg/apache/lucene/search/vectorhighlight/FieldQuery;Lorg/apache/lucene/index/IndexReader;ILjava/lang/String;Ljava/util/Set;IILorg/apache/lucene/search/vectorhighlight/FragListBuilder;Lorg/apache/lucene/search/vectorhighlight/FragmentsBuilder;[Ljava/lang/String;[Ljava/lang/String;Lorg/apache/lucene/search/highlight/Encoder;)[Ljava/lang/String;");
              mids$[mid_getFieldQuery_7ca98dc21b4f1d39] = env->getMethodID(cls, "getFieldQuery", "(Lorg/apache/lucene/search/Query;)Lorg/apache/lucene/search/vectorhighlight/FieldQuery;");
              mids$[mid_getFieldQuery_62fcaf9c9d4c2e80] = env->getMethodID(cls, "getFieldQuery", "(Lorg/apache/lucene/search/Query;Lorg/apache/lucene/index/IndexReader;)Lorg/apache/lucene/search/vectorhighlight/FieldQuery;");
              mids$[mid_getPhraseLimit_9972fcc56b44e79d] = env->getMethodID(cls, "getPhraseLimit", "()I");
              mids$[mid_isFieldMatch_8454bd5aa23fd11e] = env->getMethodID(cls, "isFieldMatch", "()Z");
              mids$[mid_isPhraseHighlight_8454bd5aa23fd11e] = env->getMethodID(cls, "isPhraseHighlight", "()Z");
              mids$[mid_setPhraseLimit_040c4cd0390c5aff] = env->getMethodID(cls, "setPhraseLimit", "(I)V");

              class$ = new ::java::lang::Class(cls);
              cls = (jclass) class$->this$;

              DEFAULT_FIELD_MATCH = env->getStaticBooleanField(cls, "DEFAULT_FIELD_MATCH");
              DEFAULT_PHRASE_HIGHLIGHT = env->getStaticBooleanField(cls, "DEFAULT_PHRASE_HIGHLIGHT");
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          FastVectorHighlighter::FastVectorHighlighter() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_f2cc1bce94666404)) {}

          FastVectorHighlighter::FastVectorHighlighter(jboolean a0, jboolean a1) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_33bb9a5a88dc139c, a0, a1)) {}

          FastVectorHighlighter::FastVectorHighlighter(jboolean a0, jboolean a1, const ::org::apache::lucene::search::vectorhighlight::FragListBuilder & a2, const ::org::apache::lucene::search::vectorhighlight::FragmentsBuilder & a3) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_9d85824f544ac283, a0, a1, a2.this$, a3.this$)) {}

          ::java::lang::String FastVectorHighlighter::getBestFragment(const ::org::apache::lucene::search::vectorhighlight::FieldQuery & a0, const ::org::apache::lucene::index::IndexReader & a1, jint a2, const ::java::lang::String & a3, jint a4) const
          {
            return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_getBestFragment_30df0a0ebbe0fc55], a0.this$, a1.this$, a2, a3.this$, a4));
          }

          ::java::lang::String FastVectorHighlighter::getBestFragment(const ::org::apache::lucene::search::vectorhighlight::FieldQuery & a0, const ::org::apache::lucene::index::IndexReader & a1, jint a2, const ::java::lang::String & a3, jint a4, const ::org::apache::lucene::search::vectorhighlight::FragListBuilder & a5, const ::org::apache::lucene::search::vectorhighlight::FragmentsBuilder & a6, const JArray< ::java::lang::String > & a7, const JArray< ::java::lang::String > & a8, const ::org::apache::lucene::search::highlight::Encoder & a9) const
          {
            return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_getBestFragment_42ab1c819ee339a7], a0.this$, a1.this$, a2, a3.this$, a4, a5.this$, a6.this$, a7.this$, a8.this$, a9.this$));
          }

          JArray< ::java::lang::String > FastVectorHighlighter::getBestFragments(const ::org::apache::lucene::search::vectorhighlight::FieldQuery & a0, const ::org::apache::lucene::index::IndexReader & a1, jint a2, const ::java::lang::String & a3, jint a4, jint a5) const
          {
            return JArray< ::java::lang::String >(env->callObjectMethod(this$, mids$[mid_getBestFragments_4ca2d2f115f03123], a0.this$, a1.this$, a2, a3.this$, a4, a5));
          }

          JArray< ::java::lang::String > FastVectorHighlighter::getBestFragments(const ::org::apache::lucene::search::vectorhighlight::FieldQuery & a0, const ::org::apache::lucene::index::IndexReader & a1, jint a2, const ::java::lang::String & a3, jint a4, jint a5, const ::org::apache::lucene::search::vectorhighlight::FragListBuilder & a6, const ::org::apache::lucene::search::vectorhighlight::FragmentsBuilder & a7, const JArray< ::java::lang::String > & a8, const JArray< ::java::lang::String > & a9, const ::org::apache::lucene::search::highlight::Encoder & a10) const
          {
            return JArray< ::java::lang::String >(env->callObjectMethod(this$, mids$[mid_getBestFragments_e8c124dbd009da1a], a0.this$, a1.this$, a2, a3.this$, a4, a5, a6.this$, a7.this$, a8.this$, a9.this$, a10.this$));
          }

          JArray< ::java::lang::String > FastVectorHighlighter::getBestFragments(const ::org::apache::lucene::search::vectorhighlight::FieldQuery & a0, const ::org::apache::lucene::index::IndexReader & a1, jint a2, const ::java::lang::String & a3, const ::java::util::Set & a4, jint a5, jint a6, const ::org::apache::lucene::search::vectorhighlight::FragListBuilder & a7, const ::org::apache::lucene::search::vectorhighlight::FragmentsBuilder & a8, const JArray< ::java::lang::String > & a9, const JArray< ::java::lang::String > & a10, const ::org::apache::lucene::search::highlight::Encoder & a11) const
          {
            return JArray< ::java::lang::String >(env->callObjectMethod(this$, mids$[mid_getBestFragments_186450ed17104b68], a0.this$, a1.this$, a2, a3.this$, a4.this$, a5, a6, a7.this$, a8.this$, a9.this$, a10.this$, a11.this$));
          }

          ::org::apache::lucene::search::vectorhighlight::FieldQuery FastVectorHighlighter::getFieldQuery(const ::org::apache::lucene::search::Query & a0) const
          {
            return ::org::apache::lucene::search::vectorhighlight::FieldQuery(env->callObjectMethod(this$, mids$[mid_getFieldQuery_7ca98dc21b4f1d39], a0.this$));
          }

          ::org::apache::lucene::search::vectorhighlight::FieldQuery FastVectorHighlighter::getFieldQuery(const ::org::apache::lucene::search::Query & a0, const ::org::apache::lucene::index::IndexReader & a1) const
          {
            return ::org::apache::lucene::search::vectorhighlight::FieldQuery(env->callObjectMethod(this$, mids$[mid_getFieldQuery_62fcaf9c9d4c2e80], a0.this$, a1.this$));
          }

          jint FastVectorHighlighter::getPhraseLimit() const
          {
            return env->callIntMethod(this$, mids$[mid_getPhraseLimit_9972fcc56b44e79d]);
          }

          jboolean FastVectorHighlighter::isFieldMatch() const
          {
            return env->callBooleanMethod(this$, mids$[mid_isFieldMatch_8454bd5aa23fd11e]);
          }

          jboolean FastVectorHighlighter::isPhraseHighlight() const
          {
            return env->callBooleanMethod(this$, mids$[mid_isPhraseHighlight_8454bd5aa23fd11e]);
          }

          void FastVectorHighlighter::setPhraseLimit(jint a0) const
          {
            env->callVoidMethod(this$, mids$[mid_setPhraseLimit_040c4cd0390c5aff], a0);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace vectorhighlight {
          static PyObject *t_FastVectorHighlighter_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_FastVectorHighlighter_instance_(PyTypeObject *type, PyObject *arg);
          static int t_FastVectorHighlighter_init_(t_FastVectorHighlighter *self, PyObject *args, PyObject *kwds);
          static PyObject *t_FastVectorHighlighter_getBestFragment(t_FastVectorHighlighter *self, PyObject *args);
          static PyObject *t_FastVectorHighlighter_getBestFragments(t_FastVectorHighlighter *self, PyObject *args);
          static PyObject *t_FastVectorHighlighter_getFieldQuery(t_FastVectorHighlighter *self, PyObject *args);
          static PyObject *t_FastVectorHighlighter_getPhraseLimit(t_FastVectorHighlighter *self);
          static PyObject *t_FastVectorHighlighter_isFieldMatch(t_FastVectorHighlighter *self);
          static PyObject *t_FastVectorHighlighter_isPhraseHighlight(t_FastVectorHighlighter *self);
          static PyObject *t_FastVectorHighlighter_setPhraseLimit(t_FastVectorHighlighter *self, PyObject *arg);
          static PyObject *t_FastVectorHighlighter_get__fieldMatch(t_FastVectorHighlighter *self, void *data);
          static PyObject *t_FastVectorHighlighter_get__phraseHighlight(t_FastVectorHighlighter *self, void *data);
          static PyObject *t_FastVectorHighlighter_get__phraseLimit(t_FastVectorHighlighter *self, void *data);
          static int t_FastVectorHighlighter_set__phraseLimit(t_FastVectorHighlighter *self, PyObject *arg, void *data);
          static PyGetSetDef t_FastVectorHighlighter__fields_[] = {
            DECLARE_GET_FIELD(t_FastVectorHighlighter, fieldMatch),
            DECLARE_GET_FIELD(t_FastVectorHighlighter, phraseHighlight),
            DECLARE_GETSET_FIELD(t_FastVectorHighlighter, phraseLimit),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_FastVectorHighlighter__methods_[] = {
            DECLARE_METHOD(t_FastVectorHighlighter, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_FastVectorHighlighter, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_FastVectorHighlighter, getBestFragment, METH_VARARGS),
            DECLARE_METHOD(t_FastVectorHighlighter, getBestFragments, METH_VARARGS),
            DECLARE_METHOD(t_FastVectorHighlighter, getFieldQuery, METH_VARARGS),
            DECLARE_METHOD(t_FastVectorHighlighter, getPhraseLimit, METH_NOARGS),
            DECLARE_METHOD(t_FastVectorHighlighter, isFieldMatch, METH_NOARGS),
            DECLARE_METHOD(t_FastVectorHighlighter, isPhraseHighlight, METH_NOARGS),
            DECLARE_METHOD(t_FastVectorHighlighter, setPhraseLimit, METH_O),
            { NULL, NULL, 0, NULL }
          };

          static PyType_Slot PY_TYPE_SLOTS(FastVectorHighlighter)[] = {
            { Py_tp_methods, t_FastVectorHighlighter__methods_ },
            { Py_tp_init, (void *) t_FastVectorHighlighter_init_ },
            { Py_tp_getset, t_FastVectorHighlighter__fields_ },
            { 0, NULL }
          };

          static PyType_Def *PY_TYPE_BASES(FastVectorHighlighter)[] = {
            &PY_TYPE_DEF(::java::lang::Object),
            NULL
          };

          DEFINE_TYPE(FastVectorHighlighter, t_FastVectorHighlighter, FastVectorHighlighter);

          void t_FastVectorHighlighter::install(PyObject *module)
          {
            installType(&PY_TYPE(FastVectorHighlighter), &PY_TYPE_DEF(FastVectorHighlighter), module, "FastVectorHighlighter", 0);
          }

          void t_FastVectorHighlighter::initialize(PyObject *module)
          {
            PyObject_SetAttrString((PyObject *) PY_TYPE(FastVectorHighlighter), "class_", make_descriptor(FastVectorHighlighter::initializeClass, 1));
            PyObject_SetAttrString((PyObject *) PY_TYPE(FastVectorHighlighter), "wrapfn_", make_descriptor(t_FastVectorHighlighter::wrap_jobject));
            PyObject_SetAttrString((PyObject *) PY_TYPE(FastVectorHighlighter), "boxfn_", make_descriptor(boxObject));
            env->getClass(FastVectorHighlighter::initializeClass);
            PyObject_SetAttrString((PyObject *) PY_TYPE(FastVectorHighlighter), "DEFAULT_FIELD_MATCH", make_descriptor(FastVectorHighlighter::DEFAULT_FIELD_MATCH));
            PyObject_SetAttrString((PyObject *) PY_TYPE(FastVectorHighlighter), "DEFAULT_PHRASE_HIGHLIGHT", make_descriptor(FastVectorHighlighter::DEFAULT_PHRASE_HIGHLIGHT));
          }

          static PyObject *t_FastVectorHighlighter_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, FastVectorHighlighter::initializeClass, 1)))
              return NULL;
            return t_FastVectorHighlighter::wrap_Object(FastVectorHighlighter(((t_FastVectorHighlighter *) arg)->object.this$));
          }
          static PyObject *t_FastVectorHighlighter_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, FastVectorHighlighter::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_FastVectorHighlighter_init_(t_FastVectorHighlighter *self, PyObject *args, PyObject *kwds)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 0:
              {
                FastVectorHighlighter object((jobject) NULL);

                INT_CALL(object = FastVectorHighlighter());
                self->object = object;
                break;
              }
             case 2:
              {
                jboolean a0;
                jboolean a1;
                FastVectorHighlighter object((jobject) NULL);

                if (!parseArgs(args, "ZZ", &a0, &a1))
                {
                  INT_CALL(object = FastVectorHighlighter(a0, a1));
                  self->object = object;
                  break;
                }
              }
              goto err;
             case 4:
              {
                jboolean a0;
                jboolean a1;
                ::org::apache::lucene::search::vectorhighlight::FragListBuilder a2((jobject) NULL);
                ::org::apache::lucene::search::vectorhighlight::FragmentsBuilder a3((jobject) NULL);
                FastVectorHighlighter object((jobject) NULL);

                if (!parseArgs(args, "ZZkk", ::org::apache::lucene::search::vectorhighlight::FragListBuilder::initializeClass, ::org::apache::lucene::search::vectorhighlight::FragmentsBuilder::initializeClass, &a0, &a1, &a2, &a3))
                {
                  INT_CALL(object = FastVectorHighlighter(a0, a1, a2, a3));
                  self->object = object;
                  break;
                }
              }
             default:
             err:
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_FastVectorHighlighter_getBestFragment(t_FastVectorHighlighter *self, PyObject *args)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 5:
              {
                ::org::apache::lucene::search::vectorhighlight::FieldQuery a0((jobject) NULL);
                ::org::apache::lucene::index::IndexReader a1((jobject) NULL);
                jint a2;
                ::java::lang::String a3((jobject) NULL);
                jint a4;
                ::java::lang::String result((jobject) NULL);

                if (!parseArgs(args, "kkIsI", ::org::apache::lucene::search::vectorhighlight::FieldQuery::initializeClass, ::org::apache::lucene::index::IndexReader::initializeClass, &a0, &a1, &a2, &a3, &a4))
                {
                  OBJ_CALL(result = self->object.getBestFragment(a0, a1, a2, a3, a4));
                  return j2p(result);
                }
              }
              break;
             case 10:
              {
                ::org::apache::lucene::search::vectorhighlight::FieldQuery a0((jobject) NULL);
                ::org::apache::lucene::index::IndexReader a1((jobject) NULL);
                jint a2;
                ::java::lang::String a3((jobject) NULL);
                jint a4;
                ::org::apache::lucene::search::vectorhighlight::FragListBuilder a5((jobject) NULL);
                ::org::apache::lucene::search::vectorhighlight::FragmentsBuilder a6((jobject) NULL);
                JArray< ::java::lang::String > a7((jobject) NULL);
                JArray< ::java::lang::String > a8((jobject) NULL);
                ::org::apache::lucene::search::highlight::Encoder a9((jobject) NULL);
                ::java::lang::String result((jobject) NULL);

                if (!parseArgs(args, "kkIsIkk[s[sk", ::org::apache::lucene::search::vectorhighlight::FieldQuery::initializeClass, ::org::apache::lucene::index::IndexReader::initializeClass, ::org::apache::lucene::search::vectorhighlight::FragListBuilder::initializeClass, ::org::apache::lucene::search::vectorhighlight::FragmentsBuilder::initializeClass, ::org::apache::lucene::search::highlight::Encoder::initializeClass, &a0, &a1, &a2, &a3, &a4, &a5, &a6, &a7, &a8, &a9))
                {
                  OBJ_CALL(result = self->object.getBestFragment(a0, a1, a2, a3, a4, a5, a6, a7, a8, a9));
                  return j2p(result);
                }
              }
            }

            PyErr_SetArgsError((PyObject *) self, "getBestFragment", args);
            return NULL;
          }

          static PyObject *t_FastVectorHighlighter_getBestFragments(t_FastVectorHighlighter *self, PyObject *args)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 6:
              {
                ::org::apache::lucene::search::vectorhighlight::FieldQuery a0((jobject) NULL);
                ::org::apache::lucene::index::IndexReader a1((jobject) NULL);
                jint a2;
                ::java::lang::String a3((jobject) NULL);
                jint a4;
                jint a5;
                JArray< ::java::lang::String > result((jobject) NULL);

                if (!parseArgs(args, "kkIsII", ::org::apache::lucene::search::vectorhighlight::FieldQuery::initializeClass, ::org::apache::lucene::index::IndexReader::initializeClass, &a0, &a1, &a2, &a3, &a4, &a5))
                {
                  OBJ_CALL(result = self->object.getBestFragments(a0, a1, a2, a3, a4, a5));
                  return JArray<jstring>(result.this$).wrap();
                }
              }
              break;
             case 11:
              {
                ::org::apache::lucene::search::vectorhighlight::FieldQuery a0((jobject) NULL);
                ::org::apache::lucene::index::IndexReader a1((jobject) NULL);
                jint a2;
                ::java::lang::String a3((jobject) NULL);
                jint a4;
                jint a5;
                ::org::apache::lucene::search::vectorhighlight::FragListBuilder a6((jobject) NULL);
                ::org::apache::lucene::search::vectorhighlight::FragmentsBuilder a7((jobject) NULL);
                JArray< ::java::lang::String > a8((jobject) NULL);
                JArray< ::java::lang::String > a9((jobject) NULL);
                ::org::apache::lucene::search::highlight::Encoder a10((jobject) NULL);
                JArray< ::java::lang::String > result((jobject) NULL);

                if (!parseArgs(args, "kkIsIIkk[s[sk", ::org::apache::lucene::search::vectorhighlight::FieldQuery::initializeClass, ::org::apache::lucene::index::IndexReader::initializeClass, ::org::apache::lucene::search::vectorhighlight::FragListBuilder::initializeClass, ::org::apache::lucene::search::vectorhighlight::FragmentsBuilder::initializeClass, ::org::apache::lucene::search::highlight::Encoder::initializeClass, &a0, &a1, &a2, &a3, &a4, &a5, &a6, &a7, &a8, &a9, &a10))
                {
                  OBJ_CALL(result = self->object.getBestFragments(a0, a1, a2, a3, a4, a5, a6, a7, a8, a9, a10));
                  return JArray<jstring>(result.this$).wrap();
                }
              }
              break;
             case 12:
              {
                ::org::apache::lucene::search::vectorhighlight::FieldQuery a0((jobject) NULL);
                ::org::apache::lucene::index::IndexReader a1((jobject) NULL);
                jint a2;
                ::java::lang::String a3((jobject) NULL);
                ::java::util::Set a4((jobject) NULL);
                PyTypeObject **p4;
                jint a5;
                jint a6;
                ::org::apache::lucene::search::vectorhighlight::FragListBuilder a7((jobject) NULL);
                ::org::apache::lucene::search::vectorhighlight::FragmentsBuilder a8((jobject) NULL);
                JArray< ::java::lang::String > a9((jobject) NULL);
                JArray< ::java::lang::String > a10((jobject) NULL);
                ::org::apache::lucene::search::highlight::Encoder a11((jobject) NULL);
                JArray< ::java::lang::String > result((jobject) NULL);

                if (!parseArgs(args, "kkIsKIIkk[s[sk", ::org::apache::lucene::search::vectorhighlight::FieldQuery::initializeClass, ::org::apache::lucene::index::IndexReader::initializeClass, ::java::util::Set::initializeClass, ::org::apache::lucene::search::vectorhighlight::FragListBuilder::initializeClass, ::org::apache::lucene::search::vectorhighlight::FragmentsBuilder::initializeClass, ::org::apache::lucene::search::highlight::Encoder::initializeClass, &a0, &a1, &a2, &a3, &a4, &p4, ::java::util::t_Set::parameters_, &a5, &a6, &a7, &a8, &a9, &a10, &a11))
                {
                  OBJ_CALL(result = self->object.getBestFragments(a0, a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11));
                  return JArray<jstring>(result.this$).wrap();
                }
              }
            }

            PyErr_SetArgsError((PyObject *) self, "getBestFragments", args);
            return NULL;
          }

          static PyObject *t_FastVectorHighlighter_getFieldQuery(t_FastVectorHighlighter *self, PyObject *args)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 1:
              {
                ::org::apache::lucene::search::Query a0((jobject) NULL);
                ::org::apache::lucene::search::vectorhighlight::FieldQuery result((jobject) NULL);

                if (!parseArgs(args, "k", ::org::apache::lucene::search::Query::initializeClass, &a0))
                {
                  OBJ_CALL(result = self->object.getFieldQuery(a0));
                  return ::org::apache::lucene::search::vectorhighlight::t_FieldQuery::wrap_Object(result);
                }
              }
              break;
             case 2:
              {
                ::org::apache::lucene::search::Query a0((jobject) NULL);
                ::org::apache::lucene::index::IndexReader a1((jobject) NULL);
                ::org::apache::lucene::search::vectorhighlight::FieldQuery result((jobject) NULL);

                if (!parseArgs(args, "kk", ::org::apache::lucene::search::Query::initializeClass, ::org::apache::lucene::index::IndexReader::initializeClass, &a0, &a1))
                {
                  OBJ_CALL(result = self->object.getFieldQuery(a0, a1));
                  return ::org::apache::lucene::search::vectorhighlight::t_FieldQuery::wrap_Object(result);
                }
              }
            }

            PyErr_SetArgsError((PyObject *) self, "getFieldQuery", args);
            return NULL;
          }

          static PyObject *t_FastVectorHighlighter_getPhraseLimit(t_FastVectorHighlighter *self)
          {
            jint result;
            OBJ_CALL(result = self->object.getPhraseLimit());
            return PyLong_FromLong((long) result);
          }

          static PyObject *t_FastVectorHighlighter_isFieldMatch(t_FastVectorHighlighter *self)
          {
            jboolean result;
            OBJ_CALL(result = self->object.isFieldMatch());
            Py_RETURN_BOOL(result);
          }

          static PyObject *t_FastVectorHighlighter_isPhraseHighlight(t_FastVectorHighlighter *self)
          {
            jboolean result;
            OBJ_CALL(result = self->object.isPhraseHighlight());
            Py_RETURN_BOOL(result);
          }

          static PyObject *t_FastVectorHighlighter_setPhraseLimit(t_FastVectorHighlighter *self, PyObject *arg)
          {
            jint a0;

            if (!parseArg(arg, "I", &a0))
            {
              OBJ_CALL(self->object.setPhraseLimit(a0));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError((PyObject *) self, "setPhraseLimit", arg);
            return NULL;
          }

          static PyObject *t_FastVectorHighlighter_get__fieldMatch(t_FastVectorHighlighter *self, void *data)
          {
            jboolean value;
            OBJ_CALL(value = self->object.isFieldMatch());
            Py_RETURN_BOOL(value);
          }

          static PyObject *t_FastVectorHighlighter_get__phraseHighlight(t_FastVectorHighlighter *self, void *data)
          {
            jboolean value;
            OBJ_CALL(value = self->object.isPhraseHighlight());
            Py_RETURN_BOOL(value);
          }

          static PyObject *t_FastVectorHighlighter_get__phraseLimit(t_FastVectorHighlighter *self, void *data)
          {
            jint value;
            OBJ_CALL(value = self->object.getPhraseLimit());
            return PyLong_FromLong((long) value);
          }
          static int t_FastVectorHighlighter_set__phraseLimit(t_FastVectorHighlighter *self, PyObject *arg, void *data)
          {
            {
              jint value;
              if (!parseArg(arg, "I", &value))
              {
                INT_CALL(self->object.setPhraseLimit(value));
                return 0;
              }
            }
            PyErr_SetArgsError((PyObject *) self, "phraseLimit", arg);
            return -1;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queryparser/flexible/standard/nodes/WildcardQueryNode.h"
#include "org/apache/lucene/queryparser/flexible/core/parser/EscapeQuerySyntax.h"
#include "java/lang/Class.h"
#include "java/lang/String.h"
#include "java/lang/CharSequence.h"
#include "org/apache/lucene/queryparser/flexible/standard/nodes/WildcardQueryNode.h"
#include "java/lang/CloneNotSupportedException.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace standard {
            namespace nodes {

              ::java::lang::Class *WildcardQueryNode::class$ = NULL;
              jmethodID *WildcardQueryNode::mids$ = NULL;
              bool WildcardQueryNode::live$ = false;

              jclass WildcardQueryNode::initializeClass(bool getOnly)
              {
                if (getOnly)
                  return (jclass) (live$ ? class$->this$ : NULL);
                if (class$ == NULL)
                {
                  jclass cls = (jclass) env->findClass("org/apache/lucene/queryparser/flexible/standard/nodes/WildcardQueryNode");

                  mids$ = new jmethodID[max_mid];
                  mids$[mid_init$_67dc800ef31d2ab2] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/queryparser/flexible/core/nodes/FieldQueryNode;)V");
                  mids$[mid_init$_9cb0cd96f3795799] = env->getMethodID(cls, "<init>", "(Ljava/lang/CharSequence;Ljava/lang/CharSequence;II)V");
                  mids$[mid_cloneTree_cb58da9c20b7a21a] = env->getMethodID(cls, "cloneTree", "()Lorg/apache/lucene/queryparser/flexible/standard/nodes/WildcardQueryNode;");
                  mids$[mid_toQueryString_6bb2daa53c506f10] = env->getMethodID(cls, "toQueryString", "(Lorg/apache/lucene/queryparser/flexible/core/parser/EscapeQuerySyntax;)Ljava/lang/CharSequence;");
                  mids$[mid_toString_db9b55ba01e03e4b] = env->getMethodID(cls, "toString", "()Ljava/lang/String;");

                  class$ = new ::java::lang::Class(cls);
                  live$ = true;
                }
                return (jclass) class$->this$;
              }

              WildcardQueryNode::WildcardQueryNode(const ::org::apache::lucene::queryparser::flexible::core::nodes::FieldQueryNode & a0) : ::org::apache::lucene::queryparser::flexible::core::nodes::FieldQueryNode(env->newObject(initializeClass, &mids$, mid_init$_67dc800ef31d2ab2, a0.this$)) {}

              WildcardQueryNode::WildcardQueryNode(const ::java::lang::CharSequence & a0, const ::java::lang::CharSequence & a1, jint a2, jint a3) : ::org::apache::lucene::queryparser::flexible::core::nodes::FieldQueryNode(env->newObject(initializeClass, &mids$, mid_init$_9cb0cd96f3795799, a0.this$, a1.this$, a2, a3)) {}

              WildcardQueryNode WildcardQueryNode::cloneTree() const
              {
                return WildcardQueryNode(env->callObjectMethod(this$, mids$[mid_cloneTree_cb58da9c20b7a21a]));
              }

              ::java::lang::CharSequence WildcardQueryNode::toQueryString(const ::org::apache::lucene::queryparser::flexible::core::parser::EscapeQuerySyntax & a0) const
              {
                return ::java::lang::CharSequence(env->callObjectMethod(this$, mids$[mid_toQueryString_6bb2daa53c506f10], a0.this$));
              }

              ::java::lang::String WildcardQueryNode::toString() const
              {
                return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_db9b55ba01e03e4b]));
              }
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace standard {
            namespace nodes {
              static PyObject *t_WildcardQueryNode_cast_(PyTypeObject *type, PyObject *arg);
              static PyObject *t_WildcardQueryNode_instance_(PyTypeObject *type, PyObject *arg);
              static int t_WildcardQueryNode_init_(t_WildcardQueryNode *self, PyObject *args, PyObject *kwds);
              static PyObject *t_WildcardQueryNode_cloneTree(t_WildcardQueryNode *self, PyObject *args);
              static PyObject *t_WildcardQueryNode_toQueryString(t_WildcardQueryNode *self, PyObject *args);
              static PyObject *t_WildcardQueryNode_toString(t_WildcardQueryNode *self, PyObject *args);

              static PyMethodDef t_WildcardQueryNode__methods_[] = {
                DECLARE_METHOD(t_WildcardQueryNode, cast_, METH_O | METH_CLASS),
                DECLARE_METHOD(t_WildcardQueryNode, instance_, METH_O | METH_CLASS),
                DECLARE_METHOD(t_WildcardQueryNode, cloneTree, METH_VARARGS),
                DECLARE_METHOD(t_WildcardQueryNode, toQueryString, METH_VARARGS),
                DECLARE_METHOD(t_WildcardQueryNode, toString, METH_VARARGS),
                { NULL, NULL, 0, NULL }
              };

              static PyType_Slot PY_TYPE_SLOTS(WildcardQueryNode)[] = {
                { Py_tp_methods, t_WildcardQueryNode__methods_ },
                { Py_tp_init, (void *) t_WildcardQueryNode_init_ },
                { 0, NULL }
              };

              static PyType_Def *PY_TYPE_BASES(WildcardQueryNode)[] = {
                &PY_TYPE_DEF(::org::apache::lucene::queryparser::flexible::core::nodes::FieldQueryNode),
                NULL
              };

              DEFINE_TYPE(WildcardQueryNode, t_WildcardQueryNode, WildcardQueryNode);

              void t_WildcardQueryNode::install(PyObject *module)
              {
                installType(&PY_TYPE(WildcardQueryNode), &PY_TYPE_DEF(WildcardQueryNode), module, "WildcardQueryNode", 0);
              }

              void t_WildcardQueryNode::initialize(PyObject *module)
              {
                PyObject_SetAttrString((PyObject *) PY_TYPE(WildcardQueryNode), "class_", make_descriptor(WildcardQueryNode::initializeClass, 1));
                PyObject_SetAttrString((PyObject *) PY_TYPE(WildcardQueryNode), "wrapfn_", make_descriptor(t_WildcardQueryNode::wrap_jobject));
                PyObject_SetAttrString((PyObject *) PY_TYPE(WildcardQueryNode), "boxfn_", make_descriptor(boxObject));
              }

              static PyObject *t_WildcardQueryNode_cast_(PyTypeObject *type, PyObject *arg)
              {
                if (!(arg = castCheck(arg, WildcardQueryNode::initializeClass, 1)))
                  return NULL;
                return t_WildcardQueryNode::wrap_Object(WildcardQueryNode(((t_WildcardQueryNode *) arg)->object.this$));
              }
              static PyObject *t_WildcardQueryNode_instance_(PyTypeObject *type, PyObject *arg)
              {
                if (!castCheck(arg, WildcardQueryNode::initializeClass, 0))
                  Py_RETURN_FALSE;
                Py_RETURN_TRUE;
              }

              static int t_WildcardQueryNode_init_(t_WildcardQueryNode *self, PyObject *args, PyObject *kwds)
              {
                switch (PyTuple_GET_SIZE(args)) {
                 case 1:
                  {
                    ::org::apache::lucene::queryparser::flexible::core::nodes::FieldQueryNode a0((jobject) NULL);
                    WildcardQueryNode object((jobject) NULL);

                    if (!parseArgs(args, "k", ::org::apache::lucene::queryparser::flexible::core::nodes::FieldQueryNode::initializeClass, &a0))
                    {
                      INT_CALL(object = WildcardQueryNode(a0));
                      self->object = object;
                      break;
                    }
                  }
                  goto err;
                 case 4:
                  {
                    ::java::lang::CharSequence a0((jobject) NULL);
                    ::java::lang::CharSequence a1((jobject) NULL);
                    jint a2;
                    jint a3;
                    WildcardQueryNode object((jobject) NULL);

                    if (!parseArgs(args, "OOII", ::java::lang::PY_TYPE(CharSequence), ::java::lang::PY_TYPE(CharSequence), &a0, &a1, &a2, &a3))
                    {
                      INT_CALL(object = WildcardQueryNode(a0, a1, a2, a3));
                      self->object = object;
                      break;
                    }
                  }
                 default:
                 err:
                  PyErr_SetArgsError((PyObject *) self, "__init__", args);
                  return -1;
                }

                return 0;
              }

              static PyObject *t_WildcardQueryNode_cloneTree(t_WildcardQueryNode *self, PyObject *args)
              {
                WildcardQueryNode result((jobject) NULL);

                if (!parseArgs(args, ""))
                {
                  OBJ_CALL(result = self->object.cloneTree());
                  return t_WildcardQueryNode::wrap_Object(result);
                }

                return callSuper(PY_TYPE(WildcardQueryNode), (PyObject *) self, "cloneTree", args, 2);
              }

              static PyObject *t_WildcardQueryNode_toQueryString(t_WildcardQueryNode *self, PyObject *args)
              {
                ::org::apache::lucene::queryparser::flexible::core::parser::EscapeQuerySyntax a0((jobject) NULL);
                ::java::lang::CharSequence result((jobject) NULL);

                if (!parseArgs(args, "k", ::org::apache::lucene::queryparser::flexible::core::parser::EscapeQuerySyntax::initializeClass, &a0))
                {
                  OBJ_CALL(result = self->object.toQueryString(a0));
                  return ::java::lang::t_CharSequence::wrap_Object(result);
                }

                return callSuper(PY_TYPE(WildcardQueryNode), (PyObject *) self, "toQueryString", args, 2);
              }

              static PyObject *t_WildcardQueryNode_toString(t_WildcardQueryNode *self, PyObject *args)
              {
                ::java::lang::String result((jobject) NULL);

                if (!parseArgs(args, ""))
                {
                  OBJ_CALL(result = self->object.toString());
                  return j2p(result);
                }

                return callSuper(PY_TYPE(WildcardQueryNode), (PyObject *) self, "toString", args, 2);
              }
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/util/OfflineSorter$ByteSequencesReader.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/store/ChecksumIndexInput.h"
#include "java/io/Closeable.h"
#include "org/apache/lucene/util/BytesRefIterator.h"
#include "org/apache/lucene/util/BytesRef.h"
#include "java/lang/String.h"
#include "java/io/IOException.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {

        ::java::lang::Class *OfflineSorter$ByteSequencesReader::class$ = NULL;
        jmethodID *OfflineSorter$ByteSequencesReader::mids$ = NULL;
        bool OfflineSorter$ByteSequencesReader::live$ = false;

        jclass OfflineSorter$ByteSequencesReader::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/util/OfflineSorter$ByteSequencesReader");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_6966ad17494a9578] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/store/ChecksumIndexInput;Ljava/lang/String;)V");
            mids$[mid_close_f2cc1bce94666404] = env->getMethodID(cls, "close", "()V");
            mids$[mid_next_7af2ea2e37ce82b8] = env->getMethodID(cls, "next", "()Lorg/apache/lucene/util/BytesRef;");

            class$ = new ::java::lang::Class(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        OfflineSorter$ByteSequencesReader::OfflineSorter$ByteSequencesReader(const ::org::apache::lucene::store::ChecksumIndexInput & a0, const ::java::lang::String & a1) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_6966ad17494a9578, a0.this$, a1.this$)) {}

        void OfflineSorter$ByteSequencesReader::close() const
        {
          env->callVoidMethod(this$, mids$[mid_close_f2cc1bce94666404]);
        }

        ::org::apache::lucene::util::BytesRef OfflineSorter$ByteSequencesReader::next() const
        {
          return ::org::apache::lucene::util::BytesRef(env->callObjectMethod(this$, mids$[mid_next_7af2ea2e37ce82b8]));
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        static PyObject *t_OfflineSorter$ByteSequencesReader_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_OfflineSorter$ByteSequencesReader_instance_(PyTypeObject *type, PyObject *arg);
        static int t_OfflineSorter$ByteSequencesReader_init_(t_OfflineSorter$ByteSequencesReader *self, PyObject *args, PyObject *kwds);
        static PyObject *t_OfflineSorter$ByteSequencesReader_close(t_OfflineSorter$ByteSequencesReader *self);
        static PyObject *t_OfflineSorter$ByteSequencesReader_next(t_OfflineSorter$ByteSequencesReader *self);

        static PyMethodDef t_OfflineSorter$ByteSequencesReader__methods_[] = {
          DECLARE_METHOD(t_OfflineSorter$ByteSequencesReader, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_OfflineSorter$ByteSequencesReader, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_OfflineSorter$ByteSequencesReader, close, METH_NOARGS),
          DECLARE_METHOD(t_OfflineSorter$ByteSequencesReader, next, METH_NOARGS),
          { NULL, NULL, 0, NULL }
        };

        static PyType_Slot PY_TYPE_SLOTS(OfflineSorter$ByteSequencesReader)[] = {
          { Py_tp_methods, t_OfflineSorter$ByteSequencesReader__methods_ },
          { Py_tp_init, (void *) t_OfflineSorter$ByteSequencesReader_init_ },
          { Py_tp_iter, (void *) PyObject_SelfIter },
          { Py_tp_iternext, (void *) ((PyObject *(*)(t_OfflineSorter$ByteSequencesReader *)) get_next< t_OfflineSorter$ByteSequencesReader,::org::apache::lucene::util::t_BytesRef,::org::apache::lucene::util::BytesRef >) },
          { 0, NULL }
        };

        static PyType_Def *PY_TYPE_BASES(OfflineSorter$ByteSequencesReader)[] = {
          &PY_TYPE_DEF(::java::lang::Object),
          NULL
        };

        DEFINE_TYPE(OfflineSorter$ByteSequencesReader, t_OfflineSorter$ByteSequencesReader, OfflineSorter$ByteSequencesReader);

        void t_OfflineSorter$ByteSequencesReader::install(PyObject *module)
        {
          installType(&PY_TYPE(OfflineSorter$ByteSequencesReader), &PY_TYPE_DEF(OfflineSorter$ByteSequencesReader), module, "OfflineSorter$ByteSequencesReader", 0);
        }

        void t_OfflineSorter$ByteSequencesReader::initialize(PyObject *module)
        {
          PyObject_SetAttrString((PyObject *) PY_TYPE(OfflineSorter$ByteSequencesReader), "class_", make_descriptor(OfflineSorter$ByteSequencesReader::initializeClass, 1));
          PyObject_SetAttrString((PyObject *) PY_TYPE(OfflineSorter$ByteSequencesReader), "wrapfn_", make_descriptor(t_OfflineSorter$ByteSequencesReader::wrap_jobject));
          PyObject_SetAttrString((PyObject *) PY_TYPE(OfflineSorter$ByteSequencesReader), "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_OfflineSorter$ByteSequencesReader_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, OfflineSorter$ByteSequencesReader::initializeClass, 1)))
            return NULL;
          return t_OfflineSorter$ByteSequencesReader::wrap_Object(OfflineSorter$ByteSequencesReader(((t_OfflineSorter$ByteSequencesReader *) arg)->object.this$));
        }
        static PyObject *t_OfflineSorter$ByteSequencesReader_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, OfflineSorter$ByteSequencesReader::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_OfflineSorter$ByteSequencesReader_init_(t_OfflineSorter$ByteSequencesReader *self, PyObject *args, PyObject *kwds)
        {
          ::org::apache::lucene::store::ChecksumIndexInput a0((jobject) NULL);
          ::java::lang::String a1((jobject) NULL);
          OfflineSorter$ByteSequencesReader object((jobject) NULL);

          if (!parseArgs(args, "ks", ::org::apache::lucene::store::ChecksumIndexInput::initializeClass, &a0, &a1))
          {
            INT_CALL(object = OfflineSorter$ByteSequencesReader(a0, a1));
            self->object = object;
          }
          else
          {
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }

        static PyObject *t_OfflineSorter$ByteSequencesReader_close(t_OfflineSorter$ByteSequencesReader *self)
        {
          OBJ_CALL(self->object.close());
          Py_RETURN_NONE;
        }

        static PyObject *t_OfflineSorter$ByteSequencesReader_next(t_OfflineSorter$ByteSequencesReader *self)
        {
          ::org::apache::lucene::util::BytesRef result((jobject) NULL);
          OBJ_CALL(result = self->object.next());
          return ::org::apache::lucene::util::t_BytesRef::wrap_Object(result);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queryparser/flexible/core/nodes/FuzzyQueryNode.h"
#include "org/apache/lucene/queryparser/flexible/core/parser/EscapeQuerySyntax.h"
#include "org/apache/lucene/queryparser/flexible/core/nodes/FuzzyQueryNode.h"
#include "java/lang/Class.h"
#include "java/lang/String.h"
#include "java/lang/CharSequence.h"
#include "java/lang/CloneNotSupportedException.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace core {
            namespace nodes {

              ::java::lang::Class *FuzzyQueryNode::class$ = NULL;
              jmethodID *FuzzyQueryNode::mids$ = NULL;
              bool FuzzyQueryNode::live$ = false;

              jclass FuzzyQueryNode::initializeClass(bool getOnly)
              {
                if (getOnly)
                  return (jclass) (live$ ? class$->this$ : NULL);
                if (class$ == NULL)
                {
                  jclass cls = (jclass) env->findClass("org/apache/lucene/queryparser/flexible/core/nodes/FuzzyQueryNode");

                  mids$ = new jmethodID[max_mid];
                  mids$[mid_init$_e134eb2e8796bd54] = env->getMethodID(cls, "<init>", "(Ljava/lang/CharSequence;Ljava/lang/CharSequence;FII)V");
                  mids$[mid_cloneTree_aab6ccf12cf83d73] = env->getMethodID(cls, "cloneTree", "()Lorg/apache/lucene/queryparser/flexible/core/nodes/FuzzyQueryNode;");
                  mids$[mid_getPrefixLength_9972fcc56b44e79d] = env->getMethodID(cls, "getPrefixLength", "()I");
                  mids$[mid_getSimilarity_58aec2b64dff50c8] = env->getMethodID(cls, "getSimilarity", "()F");
                  mids$[mid_setPrefixLength_040c4cd0390c5aff] = env->getMethodID(cls, "setPrefixLength", "(I)V");
                  mids$[mid_setSimilarity_8e1d952dd65cdc3a] = env->getMethodID(cls, "setSimilarity", "(F)V");
                  mids$[mid_toQueryString_6bb2daa53c506f10] = env->getMethodID(cls, "toQueryString", "(Lorg/apache/lucene/queryparser/flexible/core/parser/EscapeQuerySyntax;)Ljava/lang/CharSequence;");
                  mids$[mid_toString_db9b55ba01e03e4b] = env->getMethodID(cls, "toString", "()Ljava/lang/String;");

                  class$ = new ::java::lang::Class(cls);
                  live$ = true;
                }
                return (jclass) class$->this$;
              }

              FuzzyQueryNode::FuzzyQueryNode(const ::java::lang::CharSequence & a0, const ::java::lang::CharSequence & a1, jfloat a2, jint a3, jint a4) : ::org::apache::lucene::queryparser::flexible::core::nodes::FieldQueryNode(env->newObject(initializeClass, &mids$, mid_init$_e134eb2e8796bd54, a0.this$, a1.this$, a2, a3, a4)) {}

              FuzzyQueryNode FuzzyQueryNode::cloneTree() const
              {
                return FuzzyQueryNode(env->callObjectMethod(this$, mids$[mid_cloneTree_aab6ccf12cf83d73]));
              }

              jint FuzzyQueryNode::getPrefixLength() const
              {
                return env->callIntMethod(this$, mids$[mid_getPrefixLength_9972fcc56b44e79d]);
              }

              jfloat FuzzyQueryNode::getSimilarity() const
              {
                return env->callFloatMethod(this$, mids$[mid_getSimilarity_58aec2b64dff50c8]);
              }

              void FuzzyQueryNode::setPrefixLength(jint a0) const
              {
                env->callVoidMethod(this$, mids$[mid_setPrefixLength_040c4cd0390c5aff], a0);
              }

              void FuzzyQueryNode::setSimilarity(jfloat a0) const
              {
                env->callVoidMethod(this$, mids$[mid_setSimilarity_8e1d952dd65cdc3a], a0);
              }

              ::java::lang::CharSequence FuzzyQueryNode::toQueryString(const ::org::apache::lucene::queryparser::flexible::core::parser::EscapeQuerySyntax & a0) const
              {
                return ::java::lang::CharSequence(env->callObjectMethod(this$, mids$[mid_toQueryString_6bb2daa53c506f10], a0.this$));
              }

              ::java::lang::String FuzzyQueryNode::toString() const
              {
                return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_db9b55ba01e03e4b]));
              }
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace core {
            namespace nodes {
              static PyObject *t_FuzzyQueryNode_cast_(PyTypeObject *type, PyObject *arg);
              static PyObject *t_FuzzyQueryNode_instance_(PyTypeObject *type, PyObject *arg);
              static int t_FuzzyQueryNode_init_(t_FuzzyQueryNode *self, PyObject *args, PyObject *kwds);
              static PyObject *t_FuzzyQueryNode_cloneTree(t_FuzzyQueryNode *self, PyObject *args);
              static PyObject *t_FuzzyQueryNode_getPrefixLength(t_FuzzyQueryNode *self);
              static PyObject *t_FuzzyQueryNode_getSimilarity(t_FuzzyQueryNode *self);
              static PyObject *t_FuzzyQueryNode_setPrefixLength(t_FuzzyQueryNode *self, PyObject *arg);
              static PyObject *t_FuzzyQueryNode_setSimilarity(t_FuzzyQueryNode *self, PyObject *arg);
              static PyObject *t_FuzzyQueryNode_toQueryString(t_FuzzyQueryNode *self, PyObject *args);
              static PyObject *t_FuzzyQueryNode_toString(t_FuzzyQueryNode *self, PyObject *args);
              static PyObject *t_FuzzyQueryNode_get__prefixLength(t_FuzzyQueryNode *self, void *data);
              static int t_FuzzyQueryNode_set__prefixLength(t_FuzzyQueryNode *self, PyObject *arg, void *data);
              static PyObject *t_FuzzyQueryNode_get__similarity(t_FuzzyQueryNode *self, void *data);
              static int t_FuzzyQueryNode_set__similarity(t_FuzzyQueryNode *self, PyObject *arg, void *data);
              static PyGetSetDef t_FuzzyQueryNode__fields_[] = {
                DECLARE_GETSET_FIELD(t_FuzzyQueryNode, prefixLength),
                DECLARE_GETSET_FIELD(t_FuzzyQueryNode, similarity),
                { NULL, NULL, NULL, NULL, NULL }
              };

              static PyMethodDef t_FuzzyQueryNode__methods_[] = {
                DECLARE_METHOD(t_FuzzyQueryNode, cast_, METH_O | METH_CLASS),
                DECLARE_METHOD(t_FuzzyQueryNode, instance_, METH_O | METH_CLASS),
                DECLARE_METHOD(t_FuzzyQueryNode, cloneTree, METH_VARARGS),
                DECLARE_METHOD(t_FuzzyQueryNode, getPrefixLength, METH_NOARGS),
                DECLARE_METHOD(t_FuzzyQueryNode, getSimilarity, METH_NOARGS),
                DECLARE_METHOD(t_FuzzyQueryNode, setPrefixLength, METH_O),
                DECLARE_METHOD(t_FuzzyQueryNode, setSimilarity, METH_O),
                DECLARE_METHOD(t_FuzzyQueryNode, toQueryString, METH_VARARGS),
                DECLARE_METHOD(t_FuzzyQueryNode, toString, METH_VARARGS),
                { NULL, NULL, 0, NULL }
              };

              static PyType_Slot PY_TYPE_SLOTS(FuzzyQueryNode)[] = {
                { Py_tp_methods, t_FuzzyQueryNode__methods_ },
                { Py_tp_init, (void *) t_FuzzyQueryNode_init_ },
                { Py_tp_getset, t_FuzzyQueryNode__fields_ },
                { 0, NULL }
              };

              static PyType_Def *PY_TYPE_BASES(FuzzyQueryNode)[] = {
                &PY_TYPE_DEF(::org::apache::lucene::queryparser::flexible::core::nodes::FieldQueryNode),
                NULL
              };

              DEFINE_TYPE(FuzzyQueryNode, t_FuzzyQueryNode, FuzzyQueryNode);

              void t_FuzzyQueryNode::install(PyObject *module)
              {
                installType(&PY_TYPE(FuzzyQueryNode), &PY_TYPE_DEF(FuzzyQueryNode), module, "FuzzyQueryNode", 0);
              }

              void t_FuzzyQueryNode::initialize(PyObject *module)
              {
                PyObject_SetAttrString((PyObject *) PY_TYPE(FuzzyQueryNode), "class_", make_descriptor(FuzzyQueryNode::initializeClass, 1));
                PyObject_SetAttrString((PyObject *) PY_TYPE(FuzzyQueryNode), "wrapfn_", make_descriptor(t_FuzzyQueryNode::wrap_jobject));
                PyObject_SetAttrString((PyObject *) PY_TYPE(FuzzyQueryNode), "boxfn_", make_descriptor(boxObject));
              }

              static PyObject *t_FuzzyQueryNode_cast_(PyTypeObject *type, PyObject *arg)
              {
                if (!(arg = castCheck(arg, FuzzyQueryNode::initializeClass, 1)))
                  return NULL;
                return t_FuzzyQueryNode::wrap_Object(FuzzyQueryNode(((t_FuzzyQueryNode *) arg)->object.this$));
              }
              static PyObject *t_FuzzyQueryNode_instance_(PyTypeObject *type, PyObject *arg)
              {
                if (!castCheck(arg, FuzzyQueryNode::initializeClass, 0))
                  Py_RETURN_FALSE;
                Py_RETURN_TRUE;
              }

              static int t_FuzzyQueryNode_init_(t_FuzzyQueryNode *self, PyObject *args, PyObject *kwds)
              {
                ::java::lang::CharSequence a0((jobject) NULL);
                ::java::lang::CharSequence a1((jobject) NULL);
                jfloat a2;
                jint a3;
                jint a4;
                FuzzyQueryNode object((jobject) NULL);

                if (!parseArgs(args, "OOFII", ::java::lang::PY_TYPE(CharSequence), ::java::lang::PY_TYPE(CharSequence), &a0, &a1, &a2, &a3, &a4))
                {
                  INT_CALL(object = FuzzyQueryNode(a0, a1, a2, a3, a4));
                  self->object = object;
                }
                else
                {
                  PyErr_SetArgsError((PyObject *) self, "__init__", args);
                  return -1;
                }

                return 0;
              }

              static PyObject *t_FuzzyQueryNode_cloneTree(t_FuzzyQueryNode *self, PyObject *args)
              {
                FuzzyQueryNode result((jobject) NULL);

                if (!parseArgs(args, ""))
                {
                  OBJ_CALL(result = self->object.cloneTree());
                  return t_FuzzyQueryNode::wrap_Object(result);
                }

                return callSuper(PY_TYPE(FuzzyQueryNode), (PyObject *) self, "cloneTree", args, 2);
              }

              static PyObject *t_FuzzyQueryNode_getPrefixLength(t_FuzzyQueryNode *self)
              {
                jint result;
                OBJ_CALL(result = self->object.getPrefixLength());
                return PyLong_FromLong((long) result);
              }

              static PyObject *t_FuzzyQueryNode_getSimilarity(t_FuzzyQueryNode *self)
              {
                jfloat result;
                OBJ_CALL(result = self->object.getSimilarity());
                return PyFloat_FromDouble((double) result);
              }

              static PyObject *t_FuzzyQueryNode_setPrefixLength(t_FuzzyQueryNode *self, PyObject *arg)
              {
                jint a0;

                if (!parseArg(arg, "I", &a0))
                {
                  OBJ_CALL(self->object.setPrefixLength(a0));
                  Py_RETURN_NONE;
                }

                PyErr_SetArgsError((PyObject *) self, "setPrefixLength", arg);
                return NULL;
              }

              static PyObject *t_FuzzyQueryNode_setSimilarity(t_FuzzyQueryNode *self, PyObject *arg)
              {
                jfloat a0;

                if (!parseArg(arg, "F", &a0))
                {
                  OBJ_CALL(self->object.setSimilarity(a0));
                  Py_RETURN_NONE;
                }

                PyErr_SetArgsError((PyObject *) self, "setSimilarity", arg);
                return NULL;
              }

              static PyObject *t_FuzzyQueryNode_toQueryString(t_FuzzyQueryNode *self, PyObject *args)
              {
                ::org::apache::lucene::queryparser::flexible::core::parser::EscapeQuerySyntax a0((jobject) NULL);
                ::java::lang::CharSequence result((jobject) NULL);

                if (!parseArgs(args, "k", ::org::apache::lucene::queryparser::flexible::core::parser::EscapeQuerySyntax::initializeClass, &a0))
                {
                  OBJ_CALL(result = self->object.toQueryString(a0));
                  return ::java::lang::t_CharSequence::wrap_Object(result);
                }

                return callSuper(PY_TYPE(FuzzyQueryNode), (PyObject *) self, "toQueryString", args, 2);
              }

              static PyObject *t_FuzzyQueryNode_toString(t_FuzzyQueryNode *self, PyObject *args)
              {
                ::java::lang::String result((jobject) NULL);

                if (!parseArgs(args, ""))
                {
                  OBJ_CALL(result = self->object.toString());
                  return j2p(result);
                }

                return callSuper(PY_TYPE(FuzzyQueryNode), (PyObject *) self, "toString", args, 2);
              }

              static PyObject *t_FuzzyQueryNode_get__prefixLength(t_FuzzyQueryNode *self, void *data)
              {
                jint value;
                OBJ_CALL(value = self->object.getPrefixLength());
                return PyLong_FromLong((long) value);
              }
              static int t_FuzzyQueryNode_set__prefixLength(t_FuzzyQueryNode *self, PyObject *arg, void *data)
              {
                {
                  jint value;
                  if (!parseArg(arg, "I", &value))
                  {
                    INT_CALL(self->object.setPrefixLength(value));
                    return 0;
                  }
                }
                PyErr_SetArgsError((PyObject *) self, "prefixLength", arg);
                return -1;
              }

              static PyObject *t_FuzzyQueryNode_get__similarity(t_FuzzyQueryNode *self, void *data)
              {
                jfloat value;
                OBJ_CALL(value = self->object.getSimilarity());
                return PyFloat_FromDouble((double) value);
              }
              static int t_FuzzyQueryNode_set__similarity(t_FuzzyQueryNode *self, PyObject *arg, void *data)
              {
                {
                  jfloat value;
                  if (!parseArg(arg, "F", &value))
                  {
                    INT_CALL(self->object.setSimilarity(value));
                    return 0;
                  }
                }
                PyErr_SetArgsError((PyObject *) self, "similarity", arg);
                return -1;
              }
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/facet/taxonomy/AssociationFacetField.h"
#include "org/apache/lucene/util/BytesRef.h"
#include "java/lang/String.h"
#include "org/apache/lucene/document/FieldType.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace facet {
        namespace taxonomy {

          ::java::lang::Class *AssociationFacetField::class$ = NULL;
          jmethodID *AssociationFacetField::mids$ = NULL;
          jfieldID *AssociationFacetField::fids$ = NULL;
          bool AssociationFacetField::live$ = false;
          ::org::apache::lucene::document::FieldType *AssociationFacetField::TYPE = NULL;

          jclass AssociationFacetField::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/facet/taxonomy/AssociationFacetField");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_a2249d31b1afced8] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/util/BytesRef;Ljava/lang/String;[Ljava/lang/String;)V");
              mids$[mid_toString_db9b55ba01e03e4b] = env->getMethodID(cls, "toString", "()Ljava/lang/String;");

              fids$ = new jfieldID[max_fid];
              fids$[fid_assoc] = env->getFieldID(cls, "assoc", "Lorg/apache/lucene/util/BytesRef;");
              fids$[fid_dim] = env->getFieldID(cls, "dim", "Ljava/lang/String;");
              fids$[fid_path] = env->getFieldID(cls, "path", "[Ljava/lang/String;");

              class$ = new ::java::lang::Class(cls);
              cls = (jclass) class$->this$;

              TYPE = new ::org::apache::lucene::document::FieldType(env->getStaticObjectField(cls, "TYPE", "Lorg/apache/lucene/document/FieldType;"));
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          AssociationFacetField::AssociationFacetField(const ::org::apache::lucene::util::BytesRef & a0, const ::java::lang::String & a1, const JArray< ::java::lang::String > & a2) : ::org::apache::lucene::document::Field(env->newObject(initializeClass, &mids$, mid_init$_a2249d31b1afced8, a0.this$, a1.this$, a2.this$)) {}

          ::java::lang::String AssociationFacetField::toString() const
          {
            return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_db9b55ba01e03e4b]));
          }

          ::org::apache::lucene::util::BytesRef AssociationFacetField::_get_assoc() const
          {
            return ::org::apache::lucene::util::BytesRef(env->getObjectField(this$, fids$[fid_assoc]));
          }

          ::java::lang::String AssociationFacetField::_get_dim() const
          {
            return ::java::lang::String(env->getObjectField(this$, fids$[fid_dim]));
          }

          JArray< ::java::lang::String > AssociationFacetField::_get_path() const
          {
            return JArray< ::java::lang::String >(env->getObjectField(this$, fids$[fid_path]));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace facet {
        namespace taxonomy {
          static PyObject *t_AssociationFacetField_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_AssociationFacetField_instance_(PyTypeObject *type, PyObject *arg);
          static int t_AssociationFacetField_init_(t_AssociationFacetField *self, PyObject *args, PyObject *kwds);
          static PyObject *t_AssociationFacetField_toString(t_AssociationFacetField *self, PyObject *args);
          static PyObject *t_AssociationFacetField_get__assoc(t_AssociationFacetField *self, void *data);
          static PyObject *t_AssociationFacetField_get__dim(t_AssociationFacetField *self, void *data);
          static PyObject *t_AssociationFacetField_get__path(t_AssociationFacetField *self, void *data);

          static PyGetSetDef t_AssociationFacetField__fields_[] = {
            DECLARE_GET_FIELD(t_AssociationFacetField, assoc),
            DECLARE_GET_FIELD(t_AssociationFacetField, dim),
            DECLARE_GET_FIELD(t_AssociationFacetField, path),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_AssociationFacetField__methods_[] = {
            DECLARE_METHOD(t_AssociationFacetField, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_AssociationFacetField, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_AssociationFacetField, toString, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          static PyType_Slot PY_TYPE_SLOTS(AssociationFacetField)[] = {
            { Py_tp_methods, t_AssociationFacetField__methods_ },
            { Py_tp_init, (void *) t_AssociationFacetField_init_ },
            { Py_tp_getset, t_AssociationFacetField__fields_ },
            { 0, NULL }
          };

          static PyType_Def *PY_TYPE_BASES(AssociationFacetField)[] = {
            &PY_TYPE_DEF(::org::apache::lucene::document::Field),
            NULL
          };

          DEFINE_TYPE(AssociationFacetField, t_AssociationFacetField, AssociationFacetField);

          void t_AssociationFacetField::install(PyObject *module)
          {
            installType(&PY_TYPE(AssociationFacetField), &PY_TYPE_DEF(AssociationFacetField), module, "AssociationFacetField", 0);
          }

          void t_AssociationFacetField::initialize(PyObject *module)
          {
            PyObject_SetAttrString((PyObject *) PY_TYPE(AssociationFacetField), "class_", make_descriptor(AssociationFacetField::initializeClass, 1));
            PyObject_SetAttrString((PyObject *) PY_TYPE(AssociationFacetField), "wrapfn_", make_descriptor(t_AssociationFacetField::wrap_jobject));
            PyObject_SetAttrString((PyObject *) PY_TYPE(AssociationFacetField), "boxfn_", make_descriptor(boxObject));
            env->getClass(AssociationFacetField::initializeClass);
            PyObject_SetAttrString((PyObject *) PY_TYPE(AssociationFacetField), "TYPE", make_descriptor(::org::apache::lucene::document::t_FieldType::wrap_Object(*AssociationFacetField::TYPE)));
          }

          static PyObject *t_AssociationFacetField_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, AssociationFacetField::initializeClass, 1)))
              return NULL;
            return t_AssociationFacetField::wrap_Object(AssociationFacetField(((t_AssociationFacetField *) arg)->object.this$));
          }
          static PyObject *t_AssociationFacetField_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, AssociationFacetField::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_AssociationFacetField_init_(t_AssociationFacetField *self, PyObject *args, PyObject *kwds)
          {
            ::org::apache::lucene::util::BytesRef a0((jobject) NULL);
            ::java::lang::String a1((jobject) NULL);
            JArray< ::java::lang::String > a2((jobject) NULL);
            AssociationFacetField object((jobject) NULL);

            if (!parseArgs(args, "ks[s", ::org::apache::lucene::util::BytesRef::initializeClass, &a0, &a1, &a2))
            {
              INT_CALL(object = AssociationFacetField(a0, a1, a2));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_AssociationFacetField_toString(t_AssociationFacetField *self, PyObject *args)
          {
            ::java::lang::String result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.toString());
              return j2p(result);
            }

            return callSuper(PY_TYPE(AssociationFacetField), (PyObject *) self, "toString", args, 2);
          }

          static PyObject *t_AssociationFacetField_get__assoc(t_AssociationFacetField *self, void *data)
          {
            ::org::apache::lucene::util::BytesRef value((jobject) NULL);
            OBJ_CALL(value = self->object._get_assoc());
            return ::org::apache::lucene::util::t_BytesRef::wrap_Object(value);
          }

          static PyObject *t_AssociationFacetField_get__dim(t_AssociationFacetField *self, void *data)
          {
            ::java::lang::String value((jobject) NULL);
            OBJ_CALL(value = self->object._get_dim());
            return j2p(value);
          }

          static PyObject *t_AssociationFacetField_get__path(t_AssociationFacetField *self, void *data)
          {
            JArray< ::java::lang::String > value((jobject) NULL);
            OBJ_CALL(value = self->object._get_path());
            return JArray<jstring>(value.this$).wrap();
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/util/mutable/MutableValue.h"
#include "java/lang/Comparable.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/util/mutable/MutableValue.h"
#include "java/lang/String.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        namespace mutable$ {

          ::java::lang::Class *MutableValue::class$ = NULL;
          jmethodID *MutableValue::mids$ = NULL;
          jfieldID *MutableValue::fids$ = NULL;
          bool MutableValue::live$ = false;

          jclass MutableValue::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/util/mutable/MutableValue");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_f2cc1bce94666404] = env->getMethodID(cls, "<init>", "()V");
              mids$[mid_compareSameType_5a4805a36cf611e7] = env->getMethodID(cls, "compareSameType", "(Ljava/lang/Object;)I");
              mids$[mid_compareTo_eb63153a01b398c3] = env->getMethodID(cls, "compareTo", "(Lorg/apache/lucene/util/mutable/MutableValue;)I");
              mids$[mid_copy_3a4da6d6b1464d7a] = env->getMethodID(cls, "copy", "(Lorg/apache/lucene/util/mutable/MutableValue;)V");
              mids$[mid_duplicate_b6a1db04136f7d9b] = env->getMethodID(cls, "duplicate", "()Lorg/apache/lucene/util/mutable/MutableValue;");
              mids$[mid_equals_8b72f2dcdde6fd1d] = env->getMethodID(cls, "equals", "(Ljava/lang/Object;)Z");
              mids$[mid_equalsSameType_8b72f2dcdde6fd1d] = env->getMethodID(cls, "equalsSameType", "(Ljava/lang/Object;)Z");
              mids$[mid_exists_8454bd5aa23fd11e] = env->getMethodID(cls, "exists", "()Z");
              mids$[mid_hashCode_9972fcc56b44e79d] = env->getMethodID(cls, "hashCode", "()I");
              mids$[mid_toObject_d6bcd06f3102c4d9] = env->getMethodID(cls, "toObject", "()Ljava/lang/Object;");
              mids$[mid_toString_db9b55ba01e03e4b] = env->getMethodID(cls, "toString", "()Ljava/lang/String;");

              fids$ = new jfieldID[max_fid];
              fids$[fid_exists] = env->getFieldID(cls, "exists", "Z");

              class$ = new ::java::lang::Class(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          MutableValue::MutableValue() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_f2cc1bce94666404)) {}

          jint MutableValue::compareSameType(const ::java::lang::Object & a0) const
          {
            return env->callIntMethod(this$, mids$[mid_compareSameType_5a4805a36cf611e7], a0.this$);
          }

          jint MutableValue::compareTo(const MutableValue & a0) const
          {
            return env->callIntMethod(this$, mids$[mid_compareTo_eb63153a01b398c3], a0.this$);
          }

          void MutableValue::copy(const MutableValue & a0) const
          {
            env->callVoidMethod(this$, mids$[mid_copy_3a4da6d6b1464d7a], a0.this$);
          }

          MutableValue MutableValue::duplicate() const
          {
            return MutableValue(env->callObjectMethod(this$, mids$[mid_duplicate_b6a1db04136f7d9b]));
          }

          jboolean MutableValue::equals(const ::java::lang::Object & a0) const
          {
            return env->callBooleanMethod(this$, mids$[mid_equals_8b72f2dcdde6fd1d], a0.this$);
          }

          jboolean MutableValue::equalsSameType(const ::java::lang::Object & a0) const
          {
            return env->callBooleanMethod(this$, mids$[mid_equalsSameType_8b72f2dcdde6fd1d], a0.this$);
          }

          jboolean MutableValue::exists() const
          {
            return env->callBooleanMethod(this$, mids$[mid_exists_8454bd5aa23fd11e]);
          }

          jint MutableValue::hashCode() const
          {
            return env->callIntMethod(this$, mids$[mid_hashCode_9972fcc56b44e79d]);
          }

          ::java::lang::Object MutableValue::toObject() const
          {
            return ::java::lang::Object(env->callObjectMethod(this$, mids$[mid_toObject_d6bcd06f3102c4d9]));
          }

          ::java::lang::String MutableValue::toString() const
          {
            return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_db9b55ba01e03e4b]));
          }

          jboolean MutableValue::_get_exists() const
          {
            return env->getBooleanField(this$, fids$[fid_exists]);
          }

          void MutableValue::_set_exists(jboolean a0) const
          {
            env->setBooleanField(this$, fids$[fid_exists], a0);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        namespace mutable$ {
          static PyObject *t_MutableValue_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_MutableValue_instance_(PyTypeObject *type, PyObject *arg);
          static int t_MutableValue_init_(t_MutableValue *self, PyObject *args, PyObject *kwds);
          static PyObject *t_MutableValue_compareSameType(t_MutableValue *self, PyObject *arg);
          static PyObject *t_MutableValue_compareTo(t_MutableValue *self, PyObject *arg);
          static PyObject *t_MutableValue_copy(t_MutableValue *self, PyObject *arg);
          static PyObject *t_MutableValue_duplicate(t_MutableValue *self);
          static PyObject *t_MutableValue_equals(t_MutableValue *self, PyObject *args);
          static PyObject *t_MutableValue_equalsSameType(t_MutableValue *self, PyObject *arg);
          static PyObject *t_MutableValue_exists(t_MutableValue *self);
          static PyObject *t_MutableValue_hashCode(t_MutableValue *self, PyObject *args);
          static PyObject *t_MutableValue_toObject(t_MutableValue *self);
          static PyObject *t_MutableValue_toString(t_MutableValue *self, PyObject *args);
          static PyObject *t_MutableValue_get__exists(t_MutableValue *self, void *data);
          static int t_MutableValue_set__exists(t_MutableValue *self, PyObject *arg, void *data);

          static PyGetSetDef t_MutableValue__fields_[] = {
            DECLARE_GETSET_FIELD(t_MutableValue, exists),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_MutableValue__methods_[] = {
            DECLARE_METHOD(t_MutableValue, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_MutableValue, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_MutableValue, compareSameType, METH_O),
            DECLARE_METHOD(t_MutableValue, compareTo, METH_O),
            DECLARE_METHOD(t_MutableValue, copy, METH_O),
            DECLARE_METHOD(t_MutableValue, duplicate, METH_NOARGS),
            DECLARE_METHOD(t_MutableValue, equals, METH_VARARGS),
            DECLARE_METHOD(t_MutableValue, equalsSameType, METH_O),
            DECLARE_METHOD(t_MutableValue, exists, METH_NOARGS),
            DECLARE_METHOD(t_MutableValue, hashCode, METH_VARARGS),
            DECLARE_METHOD(t_MutableValue, toObject, METH_NOARGS),
            DECLARE_METHOD(t_MutableValue, toString, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          static PyType_Slot PY_TYPE_SLOTS(MutableValue)[] = {
            { Py_tp_methods, t_MutableValue__methods_ },
            { Py_tp_init, (void *) t_MutableValue_init_ },
            { Py_tp_getset, t_MutableValue__fields_ },
            { 0, NULL }
          };

          static PyType_Def *PY_TYPE_BASES(MutableValue)[] = {
            &PY_TYPE_DEF(::java::lang::Object),
            NULL
          };

          DEFINE_TYPE(MutableValue, t_MutableValue, MutableValue);

          void t_MutableValue::install(PyObject *module)
          {
            installType(&PY_TYPE(MutableValue), &PY_TYPE_DEF(MutableValue), module, "MutableValue", 0);
          }

          void t_MutableValue::initialize(PyObject *module)
          {
            PyObject_SetAttrString((PyObject *) PY_TYPE(MutableValue), "class_", make_descriptor(MutableValue::initializeClass, 1));
            PyObject_SetAttrString((PyObject *) PY_TYPE(MutableValue), "wrapfn_", make_descriptor(t_MutableValue::wrap_jobject));
            PyObject_SetAttrString((PyObject *) PY_TYPE(MutableValue), "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_MutableValue_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, MutableValue::initializeClass, 1)))
              return NULL;
            return t_MutableValue::wrap_Object(MutableValue(((t_MutableValue *) arg)->object.this$));
          }
          static PyObject *t_MutableValue_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, MutableValue::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_MutableValue_init_(t_MutableValue *self, PyObject *args, PyObject *kwds)
          {
            MutableValue object((jobject) NULL);

            INT_CALL(object = MutableValue());
            self->object = object;

            return 0;
          }

          static PyObject *t_MutableValue_compareSameType(t_MutableValue *self, PyObject *arg)
          {
            ::java::lang::Object a0((jobject) NULL);
            jint result;

            if (!parseArg(arg, "o", &a0))
            {
              OBJ_CALL(result = self->object.compareSameType(a0));
              return PyLong_FromLong((long) result);
            }

            PyErr_SetArgsError((PyObject *) self, "compareSameType", arg);
            return NULL;
          }

          static PyObject *t_MutableValue_compareTo(t_MutableValue *self, PyObject *arg)
          {
            MutableValue a0((jobject) NULL);
            jint result;

            if (!parseArg(arg, "k", MutableValue::initializeClass, &a0))
            {
              OBJ_CALL(result = self->object.compareTo(a0));
              return PyLong_FromLong((long) result);
            }

            PyErr_SetArgsError((PyObject *) self, "compareTo", arg);
            return NULL;
          }

          static PyObject *t_MutableValue_copy(t_MutableValue *self, PyObject *arg)
          {
            MutableValue a0((jobject) NULL);

            if (!parseArg(arg, "k", MutableValue::initializeClass, &a0))
            {
              OBJ_CALL(self->object.copy(a0));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError((PyObject *) self, "copy", arg);
            return NULL;
          }

          static PyObject *t_MutableValue_duplicate(t_MutableValue *self)
          {
            MutableValue result((jobject) NULL);
            OBJ_CALL(result = self->object.duplicate());
            return t_MutableValue::wrap_Object(result);
          }

          static PyObject *t_MutableValue_equals(t_MutableValue *self, PyObject *args)
          {
            ::java::lang::Object a0((jobject) NULL);
            jboolean result;

            if (!parseArgs(args, "o", &a0))
            {
              OBJ_CALL(result = self->object.equals(a0));
              Py_RETURN_BOOL(result);
            }

            return callSuper(PY_TYPE(MutableValue), (PyObject *) self, "equals", args, 2);
          }

          static PyObject *t_MutableValue_equalsSameType(t_MutableValue *self, PyObject *arg)
          {
            ::java::lang::Object a0((jobject) NULL);
            jboolean result;

            if (!parseArg(arg, "o", &a0))
            {
              OBJ_CALL(result = self->object.equalsSameType(a0));
              Py_RETURN_BOOL(result);
            }

            PyErr_SetArgsError((PyObject *) self, "equalsSameType", arg);
            return NULL;
          }

          static PyObject *t_MutableValue_exists(t_MutableValue *self)
          {
            jboolean result;
            OBJ_CALL(result = self->object.exists());
            Py_RETURN_BOOL(result);
          }

          static PyObject *t_MutableValue_hashCode(t_MutableValue *self, PyObject *args)
          {
            jint result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.hashCode());
              return PyLong_FromLong((long) result);
            }

            return callSuper(PY_TYPE(MutableValue), (PyObject *) self, "hashCode", args, 2);
          }

          static PyObject *t_MutableValue_toObject(t_MutableValue *self)
          {
            ::java::lang::Object result((jobject) NULL);
            OBJ_CALL(result = self->object.toObject());
            return ::java::lang::t_Object::wrap_Object(result);
          }

          static PyObject *t_MutableValue_toString(t_MutableValue *self, PyObject *args)
          {
            ::java::lang::String result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.toString());
              return j2p(result);
            }

            return callSuper(PY_TYPE(MutableValue), (PyObject *) self, "toString", args, 2);
          }

          static PyObject *t_MutableValue_get__exists(t_MutableValue *self, void *data)
          {
            jboolean value;
            OBJ_CALL(value = self->object._get_exists());
            Py_RETURN_BOOL(value);
          }
          static int t_MutableValue_set__exists(t_MutableValue *self, PyObject *arg, void *data)
          {
            jboolean value;
            if (!parseArg(arg, "Z", &value))
            {
              INT_CALL(self->object._set_exists(value));
              return 0;
            }
            PyErr_SetArgsError((PyObject *) self, "exists", arg);
            return -1;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queryparser/flexible/core/util/UnescapedCharSequence.h"
#include "java/lang/CharSequence.h"
#include "java/lang/String.h"
#include "java/util/Locale.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace core {
            namespace util {

              ::java::lang::Class *UnescapedCharSequence::class$ = NULL;
              jmethodID *UnescapedCharSequence::mids$ = NULL;
              bool UnescapedCharSequence::live$ = false;

              jclass UnescapedCharSequence::initializeClass(bool getOnly)
              {
                if (getOnly)
                  return (jclass) (live$ ? class$->this$ : NULL);
                if (class$ == NULL)
                {
                  jclass cls = (jclass) env->findClass("org/apache/lucene/queryparser/flexible/core/util/UnescapedCharSequence");

                  mids$ = new jmethodID[max_mid];
                  mids$[mid_init$_4b7f5e38f806ae55] = env->getMethodID(cls, "<init>", "(Ljava/lang/CharSequence;)V");
                  mids$[mid_init$_76449b3702dee6c0] = env->getMethodID(cls, "<init>", "([C[ZII)V");
                  mids$[mid_charAt_ebc61ec1e57770d1] = env->getMethodID(cls, "charAt", "(I)C");
                  mids$[mid_length_9972fcc56b44e79d] = env->getMethodID(cls, "length", "()I");
                  mids$[mid_subSequence_26d6f5be97bcdc38] = env->getMethodID(cls, "subSequence", "(II)Ljava/lang/CharSequence;");
                  mids$[mid_toLowerCase_fff52ea63ae9cb82] = env->getStaticMethodID(cls, "toLowerCase", "(Ljava/lang/CharSequence;Ljava/util/Locale;)Ljava/lang/CharSequence;");
                  mids$[mid_toString_db9b55ba01e03e4b] = env->getMethodID(cls, "toString", "()Ljava/lang/String;");
                  mids$[mid_toStringEscaped_db9b55ba01e03e4b] = env->getMethodID(cls, "toStringEscaped", "()Ljava/lang/String;");
                  mids$[mid_toStringEscaped_4082f27b3cc7d145] = env->getMethodID(cls, "toStringEscaped", "([C)Ljava/lang/String;");
                  mids$[mid_wasEscaped_a1d30e1ee40c89a2] = env->getMethodID(cls, "wasEscaped", "(I)Z");
                  mids$[mid_wasEscaped_a6da2902d8147ed8] = env->getStaticMethodID(cls, "wasEscaped", "(Ljava/lang/CharSequence;I)Z");

                  class$ = new ::java::lang::Class(cls);
                  live$ = true;
                }
                return (jclass) class$->this$;
              }

              UnescapedCharSequence::UnescapedCharSequence(const ::java::lang::CharSequence & a0) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_4b7f5e38f806ae55, a0.this$)) {}

              UnescapedCharSequence::UnescapedCharSequence(const JArray< jchar > & a0, const JArray< jboolean > & a1, jint a2, jint a3) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_76449b3702dee6c0, a0.this$, a1.this$, a2, a3)) {}

              jchar UnescapedCharSequence::charAt(jint a0) const
              {
                return env->callCharMethod(this$, mids$[mid_charAt_ebc61ec1e57770d1], a0);
              }

              jint UnescapedCharSequence::length() const
              {
                return env->callIntMethod(this$, mids$[mid_length_9972fcc56b44e79d]);
              }

              ::java::lang::CharSequence UnescapedCharSequence::subSequence(jint a0, jint a1) const
              {
                return ::java::lang::CharSequence(env->callObjectMethod(this$, mids$[mid_subSequence_26d6f5be97bcdc38], a0, a1));
              }

              ::java::lang::CharSequence UnescapedCharSequence::toLowerCase(const ::java::lang::CharSequence & a0, const ::java::util::Locale & a1)
              {
                jclass cls = env->getClass(initializeClass);
                return ::java::lang::CharSequence(env->callStaticObjectMethod(cls, mids$[mid_toLowerCase_fff52ea63ae9cb82], a0.this$, a1.this$));
              }

              ::java::lang::String UnescapedCharSequence::toString() const
              {
                return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_db9b55ba01e03e4b]));
              }

              ::java::lang::String UnescapedCharSequence::toStringEscaped() const
              {
                return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toStringEscaped_db9b55ba01e03e4b]));
              }

              ::java::lang::String UnescapedCharSequence::toStringEscaped(const JArray< jchar > & a0) const
              {
                return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toStringEscaped_4082f27b3cc7d145], a0.this$));
              }

              jboolean UnescapedCharSequence::wasEscaped(jint a0) const
              {
                return env->callBooleanMethod(this$, mids$[mid_wasEscaped_a1d30e1ee40c89a2], a0);
              }

              jboolean UnescapedCharSequence::wasEscaped(const ::java::lang::CharSequence & a0, jint a1)
              {
                jclass cls = env->getClass(initializeClass);
                return env->callStaticBooleanMethod(cls, mids$[mid_wasEscaped_a6da2902d8147ed8], a0.this$, a1);
              }
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace core {
            namespace util {
              static PyObject *t_UnescapedCharSequence_cast_(PyTypeObject *type, PyObject *arg);
              static PyObject *t_UnescapedCharSequence_instance_(PyTypeObject *type, PyObject *arg);
              static int t_UnescapedCharSequence_init_(t_UnescapedCharSequence *self, PyObject *args, PyObject *kwds);
              static PyObject *t_UnescapedCharSequence_charAt(t_UnescapedCharSequence *self, PyObject *arg);
              static PyObject *t_UnescapedCharSequence_length(t_UnescapedCharSequence *self);
              static PyObject *t_UnescapedCharSequence_subSequence(t_UnescapedCharSequence *self, PyObject *args);
              static PyObject *t_UnescapedCharSequence_toLowerCase(PyTypeObject *type, PyObject *args);
              static PyObject *t_UnescapedCharSequence_toString(t_UnescapedCharSequence *self, PyObject *args);
              static PyObject *t_UnescapedCharSequence_toStringEscaped(t_UnescapedCharSequence *self, PyObject *args);
              static PyObject *t_UnescapedCharSequence_wasEscaped(t_UnescapedCharSequence *self, PyObject *arg);
              static PyObject *t_UnescapedCharSequence_wasEscaped_(PyTypeObject *type, PyObject *args);

              static PyMethodDef t_UnescapedCharSequence__methods_[] = {
                DECLARE_METHOD(t_UnescapedCharSequence, cast_, METH_O | METH_CLASS),
                DECLARE_METHOD(t_UnescapedCharSequence, instance_, METH_O | METH_CLASS),
                DECLARE_METHOD(t_UnescapedCharSequence, charAt, METH_O),
                DECLARE_METHOD(t_UnescapedCharSequence, length, METH_NOARGS),
                DECLARE_METHOD(t_UnescapedCharSequence, subSequence, METH_VARARGS),
                DECLARE_METHOD(t_UnescapedCharSequence, toLowerCase, METH_VARARGS | METH_CLASS),
                DECLARE_METHOD(t_UnescapedCharSequence, toString, METH_VARARGS),
                DECLARE_METHOD(t_UnescapedCharSequence, toStringEscaped, METH_VARARGS),
                DECLARE_METHOD(t_UnescapedCharSequence, wasEscaped, METH_O),
                DECLARE_METHOD(t_UnescapedCharSequence, wasEscaped_, METH_VARARGS | METH_CLASS),
                { NULL, NULL, 0, NULL }
              };

              static PyType_Slot PY_TYPE_SLOTS(UnescapedCharSequence)[] = {
                { Py_tp_methods, t_UnescapedCharSequence__methods_ },
                { Py_tp_init, (void *) t_UnescapedCharSequence_init_ },
                { 0, NULL }
              };

              static PyType_Def *PY_TYPE_BASES(UnescapedCharSequence)[] = {
                &PY_TYPE_DEF(::java::lang::Object),
                NULL
              };

              DEFINE_TYPE(UnescapedCharSequence, t_UnescapedCharSequence, UnescapedCharSequence);

              void t_UnescapedCharSequence::install(PyObject *module)
              {
                installType(&PY_TYPE(UnescapedCharSequence), &PY_TYPE_DEF(UnescapedCharSequence), module, "UnescapedCharSequence", 0);
              }

              void t_UnescapedCharSequence::initialize(PyObject *module)
              {
                PyObject_SetAttrString((PyObject *) PY_TYPE(UnescapedCharSequence), "class_", make_descriptor(UnescapedCharSequence::initializeClass, 1));
                PyObject_SetAttrString((PyObject *) PY_TYPE(UnescapedCharSequence), "wrapfn_", make_descriptor(t_UnescapedCharSequence::wrap_jobject));
                PyObject_SetAttrString((PyObject *) PY_TYPE(UnescapedCharSequence), "boxfn_", make_descriptor(boxObject));
              }

              static PyObject *t_UnescapedCharSequence_cast_(PyTypeObject *type, PyObject *arg)
              {
                if (!(arg = castCheck(arg, UnescapedCharSequence::initializeClass, 1)))
                  return NULL;
                return t_UnescapedCharSequence::wrap_Object(UnescapedCharSequence(((t_UnescapedCharSequence *) arg)->object.this$));
              }
              static PyObject *t_UnescapedCharSequence_instance_(PyTypeObject *type, PyObject *arg)
              {
                if (!castCheck(arg, UnescapedCharSequence::initializeClass, 0))
                  Py_RETURN_FALSE;
                Py_RETURN_TRUE;
              }

              static int t_UnescapedCharSequence_init_(t_UnescapedCharSequence *self, PyObject *args, PyObject *kwds)
              {
                switch (PyTuple_GET_SIZE(args)) {
                 case 1:
                  {
                    ::java::lang::CharSequence a0((jobject) NULL);
                    UnescapedCharSequence object((jobject) NULL);

                    if (!parseArgs(args, "O", ::java::lang::PY_TYPE(CharSequence), &a0))
                    {
                      INT_CALL(object = UnescapedCharSequence(a0));
                      self->object = object;
                      break;
                    }
                  }
                  goto err;
                 case 4:
                  {
                    JArray< jchar > a0((jobject) NULL);
                    JArray< jboolean > a1((jobject) NULL);
                    jint a2;
                    jint a3;
                    UnescapedCharSequence object((jobject) NULL);

                    if (!parseArgs(args, "[C[ZII", &a0, &a1, &a2, &a3))
                    {
                      INT_CALL(object = UnescapedCharSequence(a0, a1, a2, a3));
                      self->object = object;
                      break;
                    }
                  }
                 default:
                 err:
                  PyErr_SetArgsError((PyObject *) self, "__init__", args);
                  return -1;
                }

                return 0;
              }

              static PyObject *t_UnescapedCharSequence_charAt(t_UnescapedCharSequence *self, PyObject *arg)
              {
                jint a0;
                jchar result;

                if (!parseArg(arg, "I", &a0))
                {
                  OBJ_CALL(result = self->object.charAt(a0));
                  return c2p(result);
                }

                PyErr_SetArgsError((PyObject *) self, "charAt", arg);
                return NULL;
              }

              static PyObject *t_UnescapedCharSequence_length(t_UnescapedCharSequence *self)
              {
                jint result;
                OBJ_CALL(result = self->object.length());
                return PyLong_FromLong((long) result);
              }

              static PyObject *t_UnescapedCharSequence_subSequence(t_UnescapedCharSequence *self, PyObject *args)
              {
                jint a0;
                jint a1;
                ::java::lang::CharSequence result((jobject) NULL);

                if (!parseArgs(args, "II", &a0, &a1))
                {
                  OBJ_CALL(result = self->object.subSequence(a0, a1));
                  return ::java::lang::t_CharSequence::wrap_Object(result);
                }

                PyErr_SetArgsError((PyObject *) self, "subSequence", args);
                return NULL;
              }

              static PyObject *t_UnescapedCharSequence_toLowerCase(PyTypeObject *type, PyObject *args)
              {
                ::java::lang::CharSequence a0((jobject) NULL);
                ::java::util::Locale a1((jobject) NULL);
                ::java::lang::CharSequence result((jobject) NULL);

                if (!parseArgs(args, "Ok", ::java::lang::PY_TYPE(CharSequence), ::java::util::Locale::initializeClass, &a0, &a1))
                {
                  OBJ_CALL(result = ::org::apache::lucene::queryparser::flexible::core::util::UnescapedCharSequence::toLowerCase(a0, a1));
                  return ::java::lang::t_CharSequence::wrap_Object(result);
                }

                PyErr_SetArgsError(type, "toLowerCase", args);
                return NULL;
              }

              static PyObject *t_UnescapedCharSequence_toString(t_UnescapedCharSequence *self, PyObject *args)
              {
                ::java::lang::String result((jobject) NULL);

                if (!parseArgs(args, ""))
                {
                  OBJ_CALL(result = self->object.toString());
                  return j2p(result);
                }

                return callSuper(PY_TYPE(UnescapedCharSequence), (PyObject *) self, "toString", args, 2);
              }

              static PyObject *t_UnescapedCharSequence_toStringEscaped(t_UnescapedCharSequence *self, PyObject *args)
              {
                switch (PyTuple_GET_SIZE(args)) {
                 case 0:
                  {
                    ::java::lang::String result((jobject) NULL);
                    OBJ_CALL(result = self->object.toStringEscaped());
                    return j2p(result);
                  }
                  break;
                 case 1:
                  {
                    JArray< jchar > a0((jobject) NULL);
                    ::java::lang::String result((jobject) NULL);

                    if (!parseArgs(args, "[C", &a0))
                    {
                      OBJ_CALL(result = self->object.toStringEscaped(a0));
                      return j2p(result);
                    }
                  }
                }

                PyErr_SetArgsError((PyObject *) self, "toStringEscaped", args);
                return NULL;
              }

              static PyObject *t_UnescapedCharSequence_wasEscaped(t_UnescapedCharSequence *self, PyObject *arg)
              {
                jint a0;
                jboolean result;

                if (!parseArg(arg, "I", &a0))
                {
                  OBJ_CALL(result = self->object.wasEscaped(a0));
                  Py_RETURN_BOOL(result);
                }

                PyErr_SetArgsError((PyObject *) self, "wasEscaped", arg);
                return NULL;
              }

              static PyObject *t_UnescapedCharSequence_wasEscaped_(PyTypeObject *type, PyObject *args)
              {
                ::java::lang::CharSequence a0((jobject) NULL);
                jint a1;
                jboolean result;

                if (!parseArgs(args, "OI", ::java::lang::PY_TYPE(CharSequence), &a0, &a1))
                {
                  OBJ_CALL(result = ::org::apache::lucene::queryparser::flexible::core::util::UnescapedCharSequence::wasEscaped(a0, a1));
                  Py_RETURN_BOOL(result);
                }

                PyErr_SetArgsError(type, "wasEscaped_", args);
                return NULL;
              }
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/codecs/lucene86/Lucene86PointsWriter.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/codecs/PointsReader.h"
#include "org/apache/lucene/index/SegmentWriteState.h"
#include "org/apache/lucene/index/FieldInfo.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/index/MergeState.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace codecs {
        namespace lucene86 {

          ::java::lang::Class *Lucene86PointsWriter::class$ = NULL;
          jmethodID *Lucene86PointsWriter::mids$ = NULL;
          bool Lucene86PointsWriter::live$ = false;

          jclass Lucene86PointsWriter::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/codecs/lucene86/Lucene86PointsWriter");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_a108448a3f706d50] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/index/SegmentWriteState;)V");
              mids$[mid_init$_1f18935f2c6e61fd] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/index/SegmentWriteState;ID)V");
              mids$[mid_close_f2cc1bce94666404] = env->getMethodID(cls, "close", "()V");
              mids$[mid_finish_f2cc1bce94666404] = env->getMethodID(cls, "finish", "()V");
              mids$[mid_merge_747cb13f783c9b42] = env->getMethodID(cls, "merge", "(Lorg/apache/lucene/index/MergeState;)V");
              mids$[mid_writeField_1dd305600f855cd6] = env->getMethodID(cls, "writeField", "(Lorg/apache/lucene/index/FieldInfo;Lorg/apache/lucene/codecs/PointsReader;)V");

              class$ = new ::java::lang::Class(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          Lucene86PointsWriter::Lucene86PointsWriter(const ::org::apache::lucene::index::SegmentWriteState & a0) : ::org::apache::lucene::codecs::PointsWriter(env->newObject(initializeClass, &mids$, mid_init$_a108448a3f706d50, a0.this$)) {}

          Lucene86PointsWriter::Lucene86PointsWriter(const ::org::apache::lucene::index::SegmentWriteState & a0, jint a1, jdouble a2) : ::org::apache::lucene::codecs::PointsWriter(env->newObject(initializeClass, &mids$, mid_init$_1f18935f2c6e61fd, a0.this$, a1, a2)) {}

          void Lucene86PointsWriter::close() const
          {
            env->callVoidMethod(this$, mids$[mid_close_f2cc1bce94666404]);
          }

          void Lucene86PointsWriter::finish() const
          {
            env->callVoidMethod(this$, mids$[mid_finish_f2cc1bce94666404]);
          }

          void Lucene86PointsWriter::merge(const ::org::apache::lucene::index::MergeState & a0) const
          {
            env->callVoidMethod(this$, mids$[mid_merge_747cb13f783c9b42], a0.this$);
          }

          void Lucene86PointsWriter::writeField(const ::org::apache::lucene::index::FieldInfo & a0, const ::org::apache::lucene::codecs::PointsReader & a1) const
          {
            env->callVoidMethod(this$, mids$[mid_writeField_1dd305600f855cd6], a0.this$, a1.this$);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace codecs {
        namespace lucene86 {
          static PyObject *t_Lucene86PointsWriter_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_Lucene86PointsWriter_instance_(PyTypeObject *type, PyObject *arg);
          static int t_Lucene86PointsWriter_init_(t_Lucene86PointsWriter *self, PyObject *args, PyObject *kwds);
          static PyObject *t_Lucene86PointsWriter_close(t_Lucene86PointsWriter *self, PyObject *args);
          static PyObject *t_Lucene86PointsWriter_finish(t_Lucene86PointsWriter *self, PyObject *args);
          static PyObject *t_Lucene86PointsWriter_merge(t_Lucene86PointsWriter *self, PyObject *args);
          static PyObject *t_Lucene86PointsWriter_writeField(t_Lucene86PointsWriter *self, PyObject *args);

          static PyMethodDef t_Lucene86PointsWriter__methods_[] = {
            DECLARE_METHOD(t_Lucene86PointsWriter, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_Lucene86PointsWriter, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_Lucene86PointsWriter, close, METH_VARARGS),
            DECLARE_METHOD(t_Lucene86PointsWriter, finish, METH_VARARGS),
            DECLARE_METHOD(t_Lucene86PointsWriter, merge, METH_VARARGS),
            DECLARE_METHOD(t_Lucene86PointsWriter, writeField, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          static PyType_Slot PY_TYPE_SLOTS(Lucene86PointsWriter)[] = {
            { Py_tp_methods, t_Lucene86PointsWriter__methods_ },
            { Py_tp_init, (void *) t_Lucene86PointsWriter_init_ },
            { 0, NULL }
          };

          static PyType_Def *PY_TYPE_BASES(Lucene86PointsWriter)[] = {
            &PY_TYPE_DEF(::org::apache::lucene::codecs::PointsWriter),
            NULL
          };

          DEFINE_TYPE(Lucene86PointsWriter, t_Lucene86PointsWriter, Lucene86PointsWriter);

          void t_Lucene86PointsWriter::install(PyObject *module)
          {
            installType(&PY_TYPE(Lucene86PointsWriter), &PY_TYPE_DEF(Lucene86PointsWriter), module, "Lucene86PointsWriter", 0);
          }

          void t_Lucene86PointsWriter::initialize(PyObject *module)
          {
            PyObject_SetAttrString((PyObject *) PY_TYPE(Lucene86PointsWriter), "class_", make_descriptor(Lucene86PointsWriter::initializeClass, 1));
            PyObject_SetAttrString((PyObject *) PY_TYPE(Lucene86PointsWriter), "wrapfn_", make_descriptor(t_Lucene86PointsWriter::wrap_jobject));
            PyObject_SetAttrString((PyObject *) PY_TYPE(Lucene86PointsWriter), "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_Lucene86PointsWriter_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, Lucene86PointsWriter::initializeClass, 1)))
              return NULL;
            return t_Lucene86PointsWriter::wrap_Object(Lucene86PointsWriter(((t_Lucene86PointsWriter *) arg)->object.this$));
          }
          static PyObject *t_Lucene86PointsWriter_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, Lucene86PointsWriter::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_Lucene86PointsWriter_init_(t_Lucene86PointsWriter *self, PyObject *args, PyObject *kwds)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 1:
              {
                ::org::apache::lucene::index::SegmentWriteState a0((jobject) NULL);
                Lucene86PointsWriter object((jobject) NULL);

                if (!parseArgs(args, "k", ::org::apache::lucene::index::SegmentWriteState::initializeClass, &a0))
                {
                  INT_CALL(object = Lucene86PointsWriter(a0));
                  self->object = object;
                  break;
                }
              }
              goto err;
             case 3:
              {
                ::org::apache::lucene::index::SegmentWriteState a0((jobject) NULL);
                jint a1;
                jdouble a2;
                Lucene86PointsWriter object((jobject) NULL);

                if (!parseArgs(args, "kID", ::org::apache::lucene::index::SegmentWriteState::initializeClass, &a0, &a1, &a2))
                {
                  INT_CALL(object = Lucene86PointsWriter(a0, a1, a2));
                  self->object = object;
                  break;
                }
              }
             default:
             err:
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_Lucene86PointsWriter_close(t_Lucene86PointsWriter *self, PyObject *args)
          {

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(self->object.close());
              Py_RETURN_NONE;
            }

            return callSuper(PY_TYPE(Lucene86PointsWriter), (PyObject *) self, "close", args, 2);
          }

          static PyObject *t_Lucene86PointsWriter_finish(t_Lucene86PointsWriter *self, PyObject *args)
          {

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(self->object.finish());
              Py_RETURN_NONE;
            }

            return callSuper(PY_TYPE(Lucene86PointsWriter), (PyObject *) self, "finish", args, 2);
          }

          static PyObject *t_Lucene86PointsWriter_merge(t_Lucene86PointsWriter *self, PyObject *args)
          {
            ::org::apache::lucene::index::MergeState a0((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::index::MergeState::initializeClass, &a0))
            {
              OBJ_CALL(self->object.merge(a0));
              Py_RETURN_NONE;
            }

            return callSuper(PY_TYPE(Lucene86PointsWriter), (PyObject *) self, "merge", args, 2);
          }

          static PyObject *t_Lucene86PointsWriter_writeField(t_Lucene86PointsWriter *self, PyObject *args)
          {
            ::org::apache::lucene::index::FieldInfo a0((jobject) NULL);
            ::org::apache::lucene::codecs::PointsReader a1((jobject) NULL);

            if (!parseArgs(args, "kk", ::org::apache::lucene::index::FieldInfo::initializeClass, ::org::apache::lucene::codecs::PointsReader::initializeClass, &a0, &a1))
            {
              OBJ_CALL(self->object.writeField(a0, a1));
              Py_RETURN_NONE;
            }

            return callSuper(PY_TYPE(Lucene86PointsWriter), (PyObject *) self, "writeField", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/codecs/lucene84/Lucene84Codec.h"
#include "org/apache/lucene/codecs/FieldInfosFormat.h"
#include "org/apache/lucene/codecs/DocValuesFormat.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/codecs/CompoundFormat.h"
#include "org/apache/lucene/codecs/SegmentInfoFormat.h"
#include "org/apache/lucene/codecs/StoredFieldsFormat.h"
#include "org/apache/lucene/codecs/LiveDocsFormat.h"
#include "org/apache/lucene/codecs/NormsFormat.h"
#include "org/apache/lucene/codecs/PointsFormat.h"
#include "org/apache/lucene/codecs/TermVectorsFormat.h"
#include "java/lang/String.h"
#include "org/apache/lucene/codecs/lucene50/Lucene50StoredFieldsFormat$Mode.h"
#include "org/apache/lucene/codecs/PostingsFormat.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace codecs {
        namespace lucene84 {

          ::java::lang::Class *Lucene84Codec::class$ = NULL;
          jmethodID *Lucene84Codec::mids$ = NULL;
          bool Lucene84Codec::live$ = false;

          jclass Lucene84Codec::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/codecs/lucene84/Lucene84Codec");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_f2cc1bce94666404] = env->getMethodID(cls, "<init>", "()V");
              mids$[mid_init$_6fcfbdc0d15e68b8] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/codecs/lucene50/Lucene50StoredFieldsFormat$Mode;)V");
              mids$[mid_compoundFormat_1641e3035b5e7063] = env->getMethodID(cls, "compoundFormat", "()Lorg/apache/lucene/codecs/CompoundFormat;");
              mids$[mid_docValuesFormat_a9c08d7c2b76eed3] = env->getMethodID(cls, "docValuesFormat", "()Lorg/apache/lucene/codecs/DocValuesFormat;");
              mids$[mid_fieldInfosFormat_48c0c59677397219] = env->getMethodID(cls, "fieldInfosFormat", "()Lorg/apache/lucene/codecs/FieldInfosFormat;");
              mids$[mid_getDocValuesFormatForField_6b92af620136a934] = env->getMethodID(cls, "getDocValuesFormatForField", "(Ljava/lang/String;)Lorg/apache/lucene/codecs/DocValuesFormat;");
              mids$[mid_getPostingsFormatForField_62d8049c839a109a] = env->getMethodID(cls, "getPostingsFormatForField", "(Ljava/lang/String;)Lorg/apache/lucene/codecs/PostingsFormat;");
              mids$[mid_liveDocsFormat_3c23f7d462a4a754] = env->getMethodID(cls, "liveDocsFormat", "()Lorg/apache/lucene/codecs/LiveDocsFormat;");
              mids$[mid_normsFormat_913a021834acbf93] = env->getMethodID(cls, "normsFormat", "()Lorg/apache/lucene/codecs/NormsFormat;");
              mids$[mid_pointsFormat_b24443532b28970b] = env->getMethodID(cls, "pointsFormat", "()Lorg/apache/lucene/codecs/PointsFormat;");
              mids$[mid_postingsFormat_1a5e16ceada7aa64] = env->getMethodID(cls, "postingsFormat", "()Lorg/apache/lucene/codecs/PostingsFormat;");
              mids$[mid_segmentInfoFormat_579fd0b88c210118] = env->getMethodID(cls, "segmentInfoFormat", "()Lorg/apache/lucene/codecs/SegmentInfoFormat;");
              mids$[mid_storedFieldsFormat_a6cbef21a6c483b7] = env->getMethodID(cls, "storedFieldsFormat", "()Lorg/apache/lucene/codecs/StoredFieldsFormat;");
              mids$[mid_termVectorsFormat_ae08b71ce8366567] = env->getMethodID(cls, "termVectorsFormat", "()Lorg/apache/lucene/codecs/TermVectorsFormat;");

              class$ = new ::java::lang::Class(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          Lucene84Codec::Lucene84Codec() : ::org::apache::lucene::codecs::Codec(env->newObject(initializeClass, &mids$, mid_init$_f2cc1bce94666404)) {}

          Lucene84Codec::Lucene84Codec(const ::org::apache::lucene::codecs::lucene50::Lucene50StoredFieldsFormat$Mode & a0) : ::org::apache::lucene::codecs::Codec(env->newObject(initializeClass, &mids$, mid_init$_6fcfbdc0d15e68b8, a0.this$)) {}

          ::org::apache::lucene::codecs::CompoundFormat Lucene84Codec::compoundFormat() const
          {
            return ::org::apache::lucene::codecs::CompoundFormat(env->callObjectMethod(this$, mids$[mid_compoundFormat_1641e3035b5e7063]));
          }

          ::org::apache::lucene::codecs::DocValuesFormat Lucene84Codec::docValuesFormat() const
          {
            return ::org::apache::lucene::codecs::DocValuesFormat(env->callObjectMethod(this$, mids$[mid_docValuesFormat_a9c08d7c2b76eed3]));
          }

          ::org::apache::lucene::codecs::FieldInfosFormat Lucene84Codec::fieldInfosFormat() const
          {
            return ::org::apache::lucene::codecs::FieldInfosFormat(env->callObjectMethod(this$, mids$[mid_fieldInfosFormat_48c0c59677397219]));
          }

          ::org::apache::lucene::codecs::DocValuesFormat Lucene84Codec::getDocValuesFormatForField(const ::java::lang::String & a0) const
          {
            return ::org::apache::lucene::codecs::DocValuesFormat(env->callObjectMethod(this$, mids$[mid_getDocValuesFormatForField_6b92af620136a934], a0.this$));
          }

          ::org::apache::lucene::codecs::PostingsFormat Lucene84Codec::getPostingsFormatForField(const ::java::lang::String & a0) const
          {
            return ::org::apache::lucene::codecs::PostingsFormat(env->callObjectMethod(this$, mids$[mid_getPostingsFormatForField_62d8049c839a109a], a0.this$));
          }

          ::org::apache::lucene::codecs::LiveDocsFormat Lucene84Codec::liveDocsFormat() const
          {
            return ::org::apache::lucene::codecs::LiveDocsFormat(env->callObjectMethod(this$, mids$[mid_liveDocsFormat_3c23f7d462a4a754]));
          }

          ::org::apache::lucene::codecs::NormsFormat Lucene84Codec::normsFormat() const
          {
            return ::org::apache::lucene::codecs::NormsFormat(env->callObjectMethod(this$, mids$[mid_normsFormat_913a021834acbf93]));
          }

          ::org::apache::lucene::codecs::PointsFormat Lucene84Codec::pointsFormat() const
          {
            return ::org::apache::lucene::codecs::PointsFormat(env->callObjectMethod(this$, mids$[mid_pointsFormat_b24443532b28970b]));
          }

          ::org::apache::lucene::codecs::PostingsFormat Lucene84Codec::postingsFormat() const
          {
            return ::org::apache::lucene::codecs::PostingsFormat(env->callObjectMethod(this$, mids$[mid_postingsFormat_1a5e16ceada7aa64]));
          }

          ::org::apache::lucene::codecs::SegmentInfoFormat Lucene84Codec::segmentInfoFormat() const
          {
            return ::org::apache::lucene::codecs::SegmentInfoFormat(env->callObjectMethod(this$, mids$[mid_segmentInfoFormat_579fd0b88c210118]));
          }

          ::org::apache::lucene::codecs::StoredFieldsFormat Lucene84Codec::storedFieldsFormat() const
          {
            return ::org::apache::lucene::codecs::StoredFieldsFormat(env->callObjectMethod(this$, mids$[mid_storedFieldsFormat_a6cbef21a6c483b7]));
          }

          ::org::apache::lucene::codecs::TermVectorsFormat Lucene84Codec::termVectorsFormat() const
          {
            return ::org::apache::lucene::codecs::TermVectorsFormat(env->callObjectMethod(this$, mids$[mid_termVectorsFormat_ae08b71ce8366567]));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace codecs {
        namespace lucene84 {
          static PyObject *t_Lucene84Codec_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_Lucene84Codec_instance_(PyTypeObject *type, PyObject *arg);
          static int t_Lucene84Codec_init_(t_Lucene84Codec *self, PyObject *args, PyObject *kwds);
          static PyObject *t_Lucene84Codec_compoundFormat(t_Lucene84Codec *self, PyObject *args);
          static PyObject *t_Lucene84Codec_docValuesFormat(t_Lucene84Codec *self, PyObject *args);
          static PyObject *t_Lucene84Codec_fieldInfosFormat(t_Lucene84Codec *self, PyObject *args);
          static PyObject *t_Lucene84Codec_getDocValuesFormatForField(t_Lucene84Codec *self, PyObject *arg);
          static PyObject *t_Lucene84Codec_getPostingsFormatForField(t_Lucene84Codec *self, PyObject *arg);
          static PyObject *t_Lucene84Codec_liveDocsFormat(t_Lucene84Codec *self, PyObject *args);
          static PyObject *t_Lucene84Codec_normsFormat(t_Lucene84Codec *self, PyObject *args);
          static PyObject *t_Lucene84Codec_pointsFormat(t_Lucene84Codec *self, PyObject *args);
          static PyObject *t_Lucene84Codec_postingsFormat(t_Lucene84Codec *self, PyObject *args);
          static PyObject *t_Lucene84Codec_segmentInfoFormat(t_Lucene84Codec *self, PyObject *args);
          static PyObject *t_Lucene84Codec_storedFieldsFormat(t_Lucene84Codec *self, PyObject *args);
          static PyObject *t_Lucene84Codec_termVectorsFormat(t_Lucene84Codec *self, PyObject *args);

          static PyMethodDef t_Lucene84Codec__methods_[] = {
            DECLARE_METHOD(t_Lucene84Codec, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_Lucene84Codec, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_Lucene84Codec, compoundFormat, METH_VARARGS),
            DECLARE_METHOD(t_Lucene84Codec, docValuesFormat, METH_VARARGS),
            DECLARE_METHOD(t_Lucene84Codec, fieldInfosFormat, METH_VARARGS),
            DECLARE_METHOD(t_Lucene84Codec, getDocValuesFormatForField, METH_O),
            DECLARE_METHOD(t_Lucene84Codec, getPostingsFormatForField, METH_O),
            DECLARE_METHOD(t_Lucene84Codec, liveDocsFormat, METH_VARARGS),
            DECLARE_METHOD(t_Lucene84Codec, normsFormat, METH_VARARGS),
            DECLARE_METHOD(t_Lucene84Codec, pointsFormat, METH_VARARGS),
            DECLARE_METHOD(t_Lucene84Codec, postingsFormat, METH_VARARGS),
            DECLARE_METHOD(t_Lucene84Codec, segmentInfoFormat, METH_VARARGS),
            DECLARE_METHOD(t_Lucene84Codec, storedFieldsFormat, METH_VARARGS),
            DECLARE_METHOD(t_Lucene84Codec, termVectorsFormat, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          static PyType_Slot PY_TYPE_SLOTS(Lucene84Codec)[] = {
            { Py_tp_methods, t_Lucene84Codec__methods_ },
            { Py_tp_init, (void *) t_Lucene84Codec_init_ },
            { 0, NULL }
          };

          static PyType_Def *PY_TYPE_BASES(Lucene84Codec)[] = {
            &PY_TYPE_DEF(::org::apache::lucene::codecs::Codec),
            NULL
          };

          DEFINE_TYPE(Lucene84Codec, t_Lucene84Codec, Lucene84Codec);

          void t_Lucene84Codec::install(PyObject *module)
          {
            installType(&PY_TYPE(Lucene84Codec), &PY_TYPE_DEF(Lucene84Codec), module, "Lucene84Codec", 0);
          }

          void t_Lucene84Codec::initialize(PyObject *module)
          {
            PyObject_SetAttrString((PyObject *) PY_TYPE(Lucene84Codec), "class_", make_descriptor(Lucene84Codec::initializeClass, 1));
            PyObject_SetAttrString((PyObject *) PY_TYPE(Lucene84Codec), "wrapfn_", make_descriptor(t_Lucene84Codec::wrap_jobject));
            PyObject_SetAttrString((PyObject *) PY_TYPE(Lucene84Codec), "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_Lucene84Codec_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, Lucene84Codec::initializeClass, 1)))
              return NULL;
            return t_Lucene84Codec::wrap_Object(Lucene84Codec(((t_Lucene84Codec *) arg)->object.this$));
          }
          static PyObject *t_Lucene84Codec_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, Lucene84Codec::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_Lucene84Codec_init_(t_Lucene84Codec *self, PyObject *args, PyObject *kwds)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 0:
              {
                Lucene84Codec object((jobject) NULL);

                INT_CALL(object = Lucene84Codec());
                self->object = object;
                break;
              }
             case 1:
              {
                ::org::apache::lucene::codecs::lucene50::Lucene50StoredFieldsFormat$Mode a0((jobject) NULL);
                PyTypeObject **p0;
                Lucene84Codec object((jobject) NULL);

                if (!parseArgs(args, "K", ::org::apache::lucene::codecs::lucene50::Lucene50StoredFieldsFormat$Mode::initializeClass, &a0, &p0, ::org::apache::lucene::codecs::lucene50::t_Lucene50StoredFieldsFormat$Mode::parameters_))
                {
                  INT_CALL(object = Lucene84Codec(a0));
                  self->object = object;
                  break;
                }
              }
             default:
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_Lucene84Codec_compoundFormat(t_Lucene84Codec *self, PyObject *args)
          {
            ::org::apache::lucene::codecs::CompoundFormat result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.compoundFormat());
              return ::org::apache::lucene::codecs::t_CompoundFormat::wrap_Object(result);
            }

            return callSuper(PY_TYPE(Lucene84Codec), (PyObject *) self, "compoundFormat", args, 2);
          }

          static PyObject *t_Lucene84Codec_docValuesFormat(t_Lucene84Codec *self, PyObject *args)
          {
            ::org::apache::lucene::codecs::DocValuesFormat result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.docValuesFormat());
              return ::org::apache::lucene::codecs::t_DocValuesFormat::wrap_Object(result);
            }

            return callSuper(PY_TYPE(Lucene84Codec), (PyObject *) self, "docValuesFormat", args, 2);
          }

          static PyObject *t_Lucene84Codec_fieldInfosFormat(t_Lucene84Codec *self, PyObject *args)
          {
            ::org::apache::lucene::codecs::FieldInfosFormat result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.fieldInfosFormat());
              return ::org::apache::lucene::codecs::t_FieldInfosFormat::wrap_Object(result);
            }

            return callSuper(PY_TYPE(Lucene84Codec), (PyObject *) self, "fieldInfosFormat", args, 2);
          }

          static PyObject *t_Lucene84Codec_getDocValuesFormatForField(t_Lucene84Codec *self, PyObject *arg)
          {
            ::java::lang::String a0((jobject) NULL);
            ::org::apache::lucene::codecs::DocValuesFormat result((jobject) NULL);

            if (!parseArg(arg, "s", &a0))
            {
              OBJ_CALL(result = self->object.getDocValuesFormatForField(a0));
              return ::org::apache::lucene::codecs::t_DocValuesFormat::wrap_Object(result);
            }

            PyErr_SetArgsError((PyObject *) self, "getDocValuesFormatForField", arg);
            return NULL;
          }

          static PyObject *t_Lucene84Codec_getPostingsFormatForField(t_Lucene84Codec *self, PyObject *arg)
          {
            ::java::lang::String a0((jobject) NULL);
            ::org::apache::lucene::codecs::PostingsFormat result((jobject) NULL);

            if (!parseArg(arg, "s", &a0))
            {
              OBJ_CALL(result = self->object.getPostingsFormatForField(a0));
              return ::org::apache::lucene::codecs::t_PostingsFormat::wrap_Object(result);
            }

            PyErr_SetArgsError((PyObject *) self, "getPostingsFormatForField", arg);
            return NULL;
          }

          static PyObject *t_Lucene84Codec_liveDocsFormat(t_Lucene84Codec *self, PyObject *args)
          {
            ::org::apache::lucene::codecs::LiveDocsFormat result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.liveDocsFormat());
              return ::org::apache::lucene::codecs::t_LiveDocsFormat::wrap_Object(result);
            }

            return callSuper(PY_TYPE(Lucene84Codec), (PyObject *) self, "liveDocsFormat", args, 2);
          }

          static PyObject *t_Lucene84Codec_normsFormat(t_Lucene84Codec *self, PyObject *args)
          {
            ::org::apache::lucene::codecs::NormsFormat result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.normsFormat());
              return ::org::apache::lucene::codecs::t_NormsFormat::wrap_Object(result);
            }

            return callSuper(PY_TYPE(Lucene84Codec), (PyObject *) self, "normsFormat", args, 2);
          }

          static PyObject *t_Lucene84Codec_pointsFormat(t_Lucene84Codec *self, PyObject *args)
          {
            ::org::apache::lucene::codecs::PointsFormat result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.pointsFormat());
              return ::org::apache::lucene::codecs::t_PointsFormat::wrap_Object(result);
            }

            return callSuper(PY_TYPE(Lucene84Codec), (PyObject *) self, "pointsFormat", args, 2);
          }

          static PyObject *t_Lucene84Codec_postingsFormat(t_Lucene84Codec *self, PyObject *args)
          {
            ::org::apache::lucene::codecs::PostingsFormat result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.postingsFormat());
              return ::org::apache::lucene::codecs::t_PostingsFormat::wrap_Object(result);
            }

            return callSuper(PY_TYPE(Lucene84Codec), (PyObject *) self, "postingsFormat", args, 2);
          }

          static PyObject *t_Lucene84Codec_segmentInfoFormat(t_Lucene84Codec *self, PyObject *args)
          {
            ::org::apache::lucene::codecs::SegmentInfoFormat result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.segmentInfoFormat());
              return ::org::apache::lucene::codecs::t_SegmentInfoFormat::wrap_Object(result);
            }

            return callSuper(PY_TYPE(Lucene84Codec), (PyObject *) self, "segmentInfoFormat", args, 2);
          }

          static PyObject *t_Lucene84Codec_storedFieldsFormat(t_Lucene84Codec *self, PyObject *args)
          {
            ::org::apache::lucene::codecs::StoredFieldsFormat result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.storedFieldsFormat());
              return ::org::apache::lucene::codecs::t_StoredFieldsFormat::wrap_Object(result);
            }

            return callSuper(PY_TYPE(Lucene84Codec), (PyObject *) self, "storedFieldsFormat", args, 2);
          }

          static PyObject *t_Lucene84Codec_termVectorsFormat(t_Lucene84Codec *self, PyObject *args)
          {
            ::org::apache::lucene::codecs::TermVectorsFormat result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.termVectorsFormat());
              return ::org::apache::lucene::codecs::t_TermVectorsFormat::wrap_Object(result);
            }

            return callSuper(PY_TYPE(Lucene84Codec), (PyObject *) self, "termVectorsFormat", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/miscellaneous/StemmerOverrideFilter$Builder.h"
#include "java/lang/CharSequence.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/analysis/miscellaneous/StemmerOverrideFilter$StemmerOverrideMap.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace miscellaneous {

          ::java::lang::Class *StemmerOverrideFilter$Builder::class$ = NULL;
          jmethodID *StemmerOverrideFilter$Builder::mids$ = NULL;
          bool StemmerOverrideFilter$Builder::live$ = false;

          jclass StemmerOverrideFilter$Builder::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/miscellaneous/StemmerOverrideFilter$Builder");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_f2cc1bce94666404] = env->getMethodID(cls, "<init>", "()V");
              mids$[mid_init$_9d72768e8fdce2b7] = env->getMethodID(cls, "<init>", "(Z)V");
              mids$[mid_add_31a4a6a450d9159f] = env->getMethodID(cls, "add", "(Ljava/lang/CharSequence;Ljava/lang/CharSequence;)Z");
              mids$[mid_build_fc7fe5590b2457ce] = env->getMethodID(cls, "build", "()Lorg/apache/lucene/analysis/miscellaneous/StemmerOverrideFilter$StemmerOverrideMap;");

              class$ = new ::java::lang::Class(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          StemmerOverrideFilter$Builder::StemmerOverrideFilter$Builder() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_f2cc1bce94666404)) {}

          StemmerOverrideFilter$Builder::StemmerOverrideFilter$Builder(jboolean a0) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_9d72768e8fdce2b7, a0)) {}

          jboolean StemmerOverrideFilter$Builder::add(const ::java::lang::CharSequence & a0, const ::java::lang::CharSequence & a1) const
          {
            return env->callBooleanMethod(this$, mids$[mid_add_31a4a6a450d9159f], a0.this$, a1.this$);
          }

          ::org::apache::lucene::analysis::miscellaneous::StemmerOverrideFilter$StemmerOverrideMap StemmerOverrideFilter$Builder::build() const
          {
            return ::org::apache::lucene::analysis::miscellaneous::StemmerOverrideFilter$StemmerOverrideMap(env->callObjectMethod(this$, mids$[mid_build_fc7fe5590b2457ce]));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace miscellaneous {
          static PyObject *t_StemmerOverrideFilter$Builder_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_StemmerOverrideFilter$Builder_instance_(PyTypeObject *type, PyObject *arg);
          static int t_StemmerOverrideFilter$Builder_init_(t_StemmerOverrideFilter$Builder *self, PyObject *args, PyObject *kwds);
          static PyObject *t_StemmerOverrideFilter$Builder_add(t_StemmerOverrideFilter$Builder *self, PyObject *args);
          static PyObject *t_StemmerOverrideFilter$Builder_build(t_StemmerOverrideFilter$Builder *self);

          static PyMethodDef t_StemmerOverrideFilter$Builder__methods_[] = {
            DECLARE_METHOD(t_StemmerOverrideFilter$Builder, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_StemmerOverrideFilter$Builder, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_StemmerOverrideFilter$Builder, add, METH_VARARGS),
            DECLARE_METHOD(t_StemmerOverrideFilter$Builder, build, METH_NOARGS),
            { NULL, NULL, 0, NULL }
          };

          static PyType_Slot PY_TYPE_SLOTS(StemmerOverrideFilter$Builder)[] = {
            { Py_tp_methods, t_StemmerOverrideFilter$Builder__methods_ },
            { Py_tp_init, (void *) t_StemmerOverrideFilter$Builder_init_ },
            { 0, NULL }
          };

          static PyType_Def *PY_TYPE_BASES(StemmerOverrideFilter$Builder)[] = {
            &PY_TYPE_DEF(::java::lang::Object),
            NULL
          };

          DEFINE_TYPE(StemmerOverrideFilter$Builder, t_StemmerOverrideFilter$Builder, StemmerOverrideFilter$Builder);

          void t_StemmerOverrideFilter$Builder::install(PyObject *module)
          {
            installType(&PY_TYPE(StemmerOverrideFilter$Builder), &PY_TYPE_DEF(StemmerOverrideFilter$Builder), module, "StemmerOverrideFilter$Builder", 0);
          }

          void t_StemmerOverrideFilter$Builder::initialize(PyObject *module)
          {
            PyObject_SetAttrString((PyObject *) PY_TYPE(StemmerOverrideFilter$Builder), "class_", make_descriptor(StemmerOverrideFilter$Builder::initializeClass, 1));
            PyObject_SetAttrString((PyObject *) PY_TYPE(StemmerOverrideFilter$Builder), "wrapfn_", make_descriptor(t_StemmerOverrideFilter$Builder::wrap_jobject));
            PyObject_SetAttrString((PyObject *) PY_TYPE(StemmerOverrideFilter$Builder), "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_StemmerOverrideFilter$Builder_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, StemmerOverrideFilter$Builder::initializeClass, 1)))
              return NULL;
            return t_StemmerOverrideFilter$Builder::wrap_Object(StemmerOverrideFilter$Builder(((t_StemmerOverrideFilter$Builder *) arg)->object.this$));
          }
          static PyObject *t_StemmerOverrideFilter$Builder_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, StemmerOverrideFilter$Builder::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_StemmerOverrideFilter$Builder_init_(t_StemmerOverrideFilter$Builder *self, PyObject *args, PyObject *kwds)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 0:
              {
                StemmerOverrideFilter$Builder object((jobject) NULL);

                INT_CALL(object = StemmerOverrideFilter$Builder());
                self->object = object;
                break;
              }
             case 1:
              {
                jboolean a0;
                StemmerOverrideFilter$Builder object((jobject) NULL);

                if (!parseArgs(args, "Z", &a0))
                {
                  INT_CALL(object = StemmerOverrideFilter$Builder(a0));
                  self->object = object;
                  break;
                }
              }
             default:
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_StemmerOverrideFilter$Builder_add(t_StemmerOverrideFilter$Builder *self, PyObject *args)
          {
            ::java::lang::CharSequence a0((jobject) NULL);
            ::java::lang::CharSequence a1((jobject) NULL);
            jboolean result;

            if (!parseArgs(args, "OO", ::java::lang::PY_TYPE(CharSequence), ::java::lang::PY_TYPE(CharSequence), &a0, &a1))
            {
              OBJ_CALL(result = self->object.add(a0, a1));
              Py_RETURN_BOOL(result);
            }

            PyErr_SetArgsError((PyObject *) self, "add", args);
            return NULL;
          }

          static PyObject *t_StemmerOverrideFilter$Builder_build(t_StemmerOverrideFilter$Builder *self)
          {
            ::org::apache::lucene::analysis::miscellaneous::StemmerOverrideFilter$StemmerOverrideMap result((jobject) NULL);
            OBJ_CALL(result = self->object.build());
            return ::org::apache::lucene::analysis::miscellaneous::t_StemmerOverrideFilter$StemmerOverrideMap::wrap_Object(result);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/codecs/StoredFieldsFormat.h"
#include "org/apache/lucene/codecs/StoredFieldsReader.h"
#include "org/apache/lucene/store/IOContext.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/codecs/StoredFieldsWriter.h"
#include "org/apache/lucene/store/Directory.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/index/SegmentInfo.h"
#include "org/apache/lucene/index/FieldInfos.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace codecs {

        ::java::lang::Class *StoredFieldsFormat::class$ = NULL;
        jmethodID *StoredFieldsFormat::mids$ = NULL;
        bool StoredFieldsFormat::live$ = false;

        jclass StoredFieldsFormat::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/codecs/StoredFieldsFormat");

            mids$ = new jmethodID[max_mid];
            mids$[mid_fieldsReader_a32861160154ecdb] = env->getMethodID(cls, "fieldsReader", "(Lorg/apache/lucene/store/Directory;Lorg/apache/lucene/index/SegmentInfo;Lorg/apache/lucene/index/FieldInfos;Lorg/apache/lucene/store/IOContext;)Lorg/apache/lucene/codecs/StoredFieldsReader;");
            mids$[mid_fieldsWriter_e1dda5bd7531bf25] = env->getMethodID(cls, "fieldsWriter", "(Lorg/apache/lucene/store/Directory;Lorg/apache/lucene/index/SegmentInfo;Lorg/apache/lucene/store/IOContext;)Lorg/apache/lucene/codecs/StoredFieldsWriter;");

            class$ = new ::java::lang::Class(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        ::org::apache::lucene::codecs::StoredFieldsReader StoredFieldsFormat::fieldsReader(const ::org::apache::lucene::store::Directory & a0, const ::org::apache::lucene::index::SegmentInfo & a1, const ::org::apache::lucene::index::FieldInfos & a2, const ::org::apache::lucene::store::IOContext & a3) const
        {
          return ::org::apache::lucene::codecs::StoredFieldsReader(env->callObjectMethod(this$, mids$[mid_fieldsReader_a32861160154ecdb], a0.this$, a1.this$, a2.this$, a3.this$));
        }

        ::org::apache::lucene::codecs::StoredFieldsWriter StoredFieldsFormat::fieldsWriter(const ::org::apache::lucene::store::Directory & a0, const ::org::apache::lucene::index::SegmentInfo & a1, const ::org::apache::lucene::store::IOContext & a2) const
        {
          return ::org::apache::lucene::codecs::StoredFieldsWriter(env->callObjectMethod(this$, mids$[mid_fieldsWriter_e1dda5bd7531bf25], a0.this$, a1.this$, a2.this$));
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace codecs {
        static PyObject *t_StoredFieldsFormat_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_StoredFieldsFormat_instance_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_StoredFieldsFormat_fieldsReader(t_StoredFieldsFormat *self, PyObject *args);
        static PyObject *t_StoredFieldsFormat_fieldsWriter(t_StoredFieldsFormat *self, PyObject *args);

        static PyMethodDef t_StoredFieldsFormat__methods_[] = {
          DECLARE_METHOD(t_StoredFieldsFormat, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_StoredFieldsFormat, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_StoredFieldsFormat, fieldsReader, METH_VARARGS),
          DECLARE_METHOD(t_StoredFieldsFormat, fieldsWriter, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        static PyType_Slot PY_TYPE_SLOTS(StoredFieldsFormat)[] = {
          { Py_tp_methods, t_StoredFieldsFormat__methods_ },
          { Py_tp_init, (void *) abstract_init },
          { 0, NULL }
        };

        static PyType_Def *PY_TYPE_BASES(StoredFieldsFormat)[] = {
          &PY_TYPE_DEF(::java::lang::Object),
          NULL
        };

        DEFINE_TYPE(StoredFieldsFormat, t_StoredFieldsFormat, StoredFieldsFormat);

        void t_StoredFieldsFormat::install(PyObject *module)
        {
          installType(&PY_TYPE(StoredFieldsFormat), &PY_TYPE_DEF(StoredFieldsFormat), module, "StoredFieldsFormat", 0);
        }

        void t_StoredFieldsFormat::initialize(PyObject *module)
        {
          PyObject_SetAttrString((PyObject *) PY_TYPE(StoredFieldsFormat), "class_", make_descriptor(StoredFieldsFormat::initializeClass, 1));
          PyObject_SetAttrString((PyObject *) PY_TYPE(StoredFieldsFormat), "wrapfn_", make_descriptor(t_StoredFieldsFormat::wrap_jobject));
          PyObject_SetAttrString((PyObject *) PY_TYPE(StoredFieldsFormat), "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_StoredFieldsFormat_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, StoredFieldsFormat::initializeClass, 1)))
            return NULL;
          return t_StoredFieldsFormat::wrap_Object(StoredFieldsFormat(((t_StoredFieldsFormat *) arg)->object.this$));
        }
        static PyObject *t_StoredFieldsFormat_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, StoredFieldsFormat::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static PyObject *t_StoredFieldsFormat_fieldsReader(t_StoredFieldsFormat *self, PyObject *args)
        {
          ::org::apache::lucene::store::Directory a0((jobject) NULL);
          ::org::apache::lucene::index::SegmentInfo a1((jobject) NULL);
          ::org::apache::lucene::index::FieldInfos a2((jobject) NULL);
          ::org::apache::lucene::store::IOContext a3((jobject) NULL);
          ::org::apache::lucene::codecs::StoredFieldsReader result((jobject) NULL);

          if (!parseArgs(args, "kkkk", ::org::apache::lucene::store::Directory::initializeClass, ::org::apache::lucene::index::SegmentInfo::initializeClass, ::org::apache::lucene::index::FieldInfos::initializeClass, ::org::apache::lucene::store::IOContext::initializeClass, &a0, &a1, &a2, &a3))
          {
            OBJ_CALL(result = self->object.fieldsReader(a0, a1, a2, a3));
            return ::org::apache::lucene::codecs::t_StoredFieldsReader::wrap_Object(result);
          }

          PyErr_SetArgsError((PyObject *) self, "fieldsReader", args);
          return NULL;
        }

        static PyObject *t_StoredFieldsFormat_fieldsWriter(t_StoredFieldsFormat *self, PyObject *args)
        {
          ::org::apache::lucene::store::Directory a0((jobject) NULL);
          ::org::apache::lucene::index::SegmentInfo a1((jobject) NULL);
          ::org::apache::lucene::store::IOContext a2((jobject) NULL);
          ::org::apache::lucene::codecs::StoredFieldsWriter result((jobject) NULL);

          if (!parseArgs(args, "kkk", ::org::apache::lucene::store::Directory::initializeClass, ::org::apache::lucene::index::SegmentInfo::initializeClass, ::org::apache::lucene::store::IOContext::initializeClass, &a0, &a1, &a2))
          {
            OBJ_CALL(result = self->object.fieldsWriter(a0, a1, a2));
            return ::org::apache::lucene::codecs::t_StoredFieldsWriter::wrap_Object(result);
          }

          PyErr_SetArgsError((PyObject *) self, "fieldsWriter", args);
          return NULL;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queryparser/flexible/standard/config/FieldDateResolutionFCListener.h"
#include "org/apache/lucene/queryparser/flexible/core/config/FieldConfigListener.h"
#include "org/apache/lucene/queryparser/flexible/core/config/QueryConfigHandler.h"
#include "org/apache/lucene/queryparser/flexible/core/config/FieldConfig.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace standard {
            namespace config {

              ::java::lang::Class *FieldDateResolutionFCListener::class$ = NULL;
              jmethodID *FieldDateResolutionFCListener::mids$ = NULL;
              bool FieldDateResolutionFCListener::live$ = false;

              jclass FieldDateResolutionFCListener::initializeClass(bool getOnly)
              {
                if (getOnly)
                  return (jclass) (live$ ? class$->this$ : NULL);
                if (class$ == NULL)
                {
                  jclass cls = (jclass) env->findClass("org/apache/lucene/queryparser/flexible/standard/config/FieldDateResolutionFCListener");

                  mids$ = new jmethodID[max_mid];
                  mids$[mid_init$_ae2484f2d8820041] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/queryparser/flexible/core/config/QueryConfigHandler;)V");
                  mids$[mid_buildFieldConfig_4a2b3be8fbbde515] = env->getMethodID(cls, "buildFieldConfig", "(Lorg/apache/lucene/queryparser/flexible/core/config/FieldConfig;)V");

                  class$ = new ::java::lang::Class(cls);
                  live$ = true;
                }
                return (jclass) class$->this$;
              }

              FieldDateResolutionFCListener::FieldDateResolutionFCListener(const ::org::apache::lucene::queryparser::flexible::core::config::QueryConfigHandler & a0) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_ae2484f2d8820041, a0.this$)) {}

              void FieldDateResolutionFCListener::buildFieldConfig(const ::org::apache::lucene::queryparser::flexible::core::config::FieldConfig & a0) const
              {
                env->callVoidMethod(this$, mids$[mid_buildFieldConfig_4a2b3be8fbbde515], a0.this$);
              }
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace standard {
            namespace config {
              static PyObject *t_FieldDateResolutionFCListener_cast_(PyTypeObject *type, PyObject *arg);
              static PyObject *t_FieldDateResolutionFCListener_instance_(PyTypeObject *type, PyObject *arg);
              static int t_FieldDateResolutionFCListener_init_(t_FieldDateResolutionFCListener *self, PyObject *args, PyObject *kwds);
              static PyObject *t_FieldDateResolutionFCListener_buildFieldConfig(t_FieldDateResolutionFCListener *self, PyObject *arg);

              static PyMethodDef t_FieldDateResolutionFCListener__methods_[] = {
                DECLARE_METHOD(t_FieldDateResolutionFCListener, cast_, METH_O | METH_CLASS),
                DECLARE_METHOD(t_FieldDateResolutionFCListener, instance_, METH_O | METH_CLASS),
                DECLARE_METHOD(t_FieldDateResolutionFCListener, buildFieldConfig, METH_O),
                { NULL, NULL, 0, NULL }
              };

              static PyType_Slot PY_TYPE_SLOTS(FieldDateResolutionFCListener)[] = {
                { Py_tp_methods, t_FieldDateResolutionFCListener__methods_ },
                { Py_tp_init, (void *) t_FieldDateResolutionFCListener_init_ },
                { 0, NULL }
              };

              static PyType_Def *PY_TYPE_BASES(FieldDateResolutionFCListener)[] = {
                &PY_TYPE_DEF(::java::lang::Object),
                NULL
              };

              DEFINE_TYPE(FieldDateResolutionFCListener, t_FieldDateResolutionFCListener, FieldDateResolutionFCListener);

              void t_FieldDateResolutionFCListener::install(PyObject *module)
              {
                installType(&PY_TYPE(FieldDateResolutionFCListener), &PY_TYPE_DEF(FieldDateResolutionFCListener), module, "FieldDateResolutionFCListener", 0);
              }

              void t_FieldDateResolutionFCListener::initialize(PyObject *module)
              {
                PyObject_SetAttrString((PyObject *) PY_TYPE(FieldDateResolutionFCListener), "class_", make_descriptor(FieldDateResolutionFCListener::initializeClass, 1));
                PyObject_SetAttrString((PyObject *) PY_TYPE(FieldDateResolutionFCListener), "wrapfn_", make_descriptor(t_FieldDateResolutionFCListener::wrap_jobject));
                PyObject_SetAttrString((PyObject *) PY_TYPE(FieldDateResolutionFCListener), "boxfn_", make_descriptor(boxObject));
              }

              static PyObject *t_FieldDateResolutionFCListener_cast_(PyTypeObject *type, PyObject *arg)
              {
                if (!(arg = castCheck(arg, FieldDateResolutionFCListener::initializeClass, 1)))
                  return NULL;
                return t_FieldDateResolutionFCListener::wrap_Object(FieldDateResolutionFCListener(((t_FieldDateResolutionFCListener *) arg)->object.this$));
              }
              static PyObject *t_FieldDateResolutionFCListener_instance_(PyTypeObject *type, PyObject *arg)
              {
                if (!castCheck(arg, FieldDateResolutionFCListener::initializeClass, 0))
                  Py_RETURN_FALSE;
                Py_RETURN_TRUE;
              }

              static int t_FieldDateResolutionFCListener_init_(t_FieldDateResolutionFCListener *self, PyObject *args, PyObject *kwds)
              {
                ::org::apache::lucene::queryparser::flexible::core::config::QueryConfigHandler a0((jobject) NULL);
                FieldDateResolutionFCListener object((jobject) NULL);

                if (!parseArgs(args, "k", ::org::apache::lucene::queryparser::flexible::core::config::QueryConfigHandler::initializeClass, &a0))
                {
                  INT_CALL(object = FieldDateResolutionFCListener(a0));
                  self->object = object;
                }
                else
                {
                  PyErr_SetArgsError((PyObject *) self, "__init__", args);
                  return -1;
                }

                return 0;
              }

              static PyObject *t_FieldDateResolutionFCListener_buildFieldConfig(t_FieldDateResolutionFCListener *self, PyObject *arg)
              {
                ::org::apache::lucene::queryparser::flexible::core::config::FieldConfig a0((jobject) NULL);

                if (!parseArg(arg, "k", ::org::apache::lucene::queryparser::flexible::core::config::FieldConfig::initializeClass, &a0))
                {
                  OBJ_CALL(self->object.buildFieldConfig(a0));
                  Py_RETURN_NONE;
                }

                PyErr_SetArgsError((PyObject *) self, "buildFieldConfig", arg);
                return NULL;
              }
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/index/ParallelLeafReader.h"
#include "org/apache/lucene/util/Bits.h"
#include "org/apache/lucene/index/Terms.h"
#include "org/apache/lucene/index/PointValues.h"
#include "org/apache/lucene/index/Fields.h"
#include "org/apache/lucene/index/BinaryDocValues.h"
#include "org/apache/lucene/index/SortedNumericDocValues.h"
#include "org/apache/lucene/index/SortedSetDocValues.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/index/LeafMetaData.h"
#include "org/apache/lucene/index/NumericDocValues.h"
#include "java/lang/String.h"
#include "org/apache/lucene/index/IndexReader$CacheHelper.h"
#include "org/apache/lucene/index/SortedDocValues.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/index/StoredFieldVisitor.h"
#include "org/apache/lucene/index/FieldInfos.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {

        ::java::lang::Class *ParallelLeafReader::class$ = NULL;
        jmethodID *ParallelLeafReader::mids$ = NULL;
        bool ParallelLeafReader::live$ = false;

        jclass ParallelLeafReader::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/index/ParallelLeafReader");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_cd6ad16685534c71] = env->getMethodID(cls, "<init>", "([Lorg/apache/lucene/index/LeafReader;)V");
            mids$[mid_init$_16b340ef7c1e3f9b] = env->getMethodID(cls, "<init>", "(Z[Lorg/apache/lucene/index/LeafReader;)V");
            mids$[mid_init$_81e7abe70074fc87] = env->getMethodID(cls, "<init>", "(Z[Lorg/apache/lucene/index/LeafReader;[Lorg/apache/lucene/index/LeafReader;)V");
            mids$[mid_checkIntegrity_f2cc1bce94666404] = env->getMethodID(cls, "checkIntegrity", "()V");
            mids$[mid_document_8f45e7464506ed2f] = env->getMethodID(cls, "document", "(ILorg/apache/lucene/index/StoredFieldVisitor;)V");
            mids$[mid_getBinaryDocValues_6cf59c3533d4df22] = env->getMethodID(cls, "getBinaryDocValues", "(Ljava/lang/String;)Lorg/apache/lucene/index/BinaryDocValues;");
            mids$[mid_getCoreCacheHelper_a64c414fea9a8cf6] = env->getMethodID(cls, "getCoreCacheHelper", "()Lorg/apache/lucene/index/IndexReader$CacheHelper;");
            mids$[mid_getFieldInfos_f76601004b1c139b] = env->getMethodID(cls, "getFieldInfos", "()Lorg/apache/lucene/index/FieldInfos;");
            mids$[mid_getLiveDocs_ad87da2b626b21cf] = env->getMethodID(cls, "getLiveDocs", "()Lorg/apache/lucene/util/Bits;");
            mids$[mid_getMetaData_07168aa94cc70619] = env->getMethodID(cls, "getMetaData", "()Lorg/apache/lucene/index/LeafMetaData;");
            mids$[mid_getNormValues_2b2c87c24a70ef49] = env->getMethodID(cls, "getNormValues", "(Ljava/lang/String;)Lorg/apache/lucene/index/NumericDocValues;");
            mids$[mid_getNumericDocValues_2b2c87c24a70ef49] = env->getMethodID(cls, "getNumericDocValues", "(Ljava/lang/String;)Lorg/apache/lucene/index/NumericDocValues;");
            mids$[mid_getParallelReaders_12d01e9ebf6c0e8e] = env->getMethodID(cls, "getParallelReaders", "()[Lorg/apache/lucene/index/LeafReader;");
            mids$[mid_getPointValues_72b990dbae0eea09] = env->getMethodID(cls, "getPointValues", "(Ljava/lang/String;)Lorg/apache/lucene/index/PointValues;");
            mids$[mid_getReaderCacheHelper_a64c414fea9a8cf6] = env->getMethodID(cls, "getReaderCacheHelper", "()Lorg/apache/lucene/index/IndexReader$CacheHelper;");
            mids$[mid_getSortedDocValues_adb16e9c5e3d9604] = env->getMethodID(cls, "getSortedDocValues", "(Ljava/lang/String;)Lorg/apache/lucene/index/SortedDocValues;");
            mids$[mid_getSortedNumericDocValues_25e77b19828c4dfa] = env->getMethodID(cls, "getSortedNumericDocValues", "(Ljava/lang/String;)Lorg/apache/lucene/index/SortedNumericDocValues;");
            mids$[mid_getSortedSetDocValues_379820f082b251eb] = env->getMethodID(cls, "getSortedSetDocValues", "(Ljava/lang/String;)Lorg/apache/lucene/index/SortedSetDocValues;");
            mids$[mid_getTermVectors_9997c94b783ad8be] = env->getMethodID(cls, "getTermVectors", "(I)Lorg/apache/lucene/index/Fields;");
            mids$[mid_maxDoc_9972fcc56b44e79d] = env->getMethodID(cls, "maxDoc", "()I");
            mids$[mid_numDocs_9972fcc56b44e79d] = env->getMethodID(cls, "numDocs", "()I");
            mids$[mid_terms_3976802ad88273cd] = env->getMethodID(cls, "terms", "(Ljava/lang/String;)Lorg/apache/lucene/index/Terms;");
            mids$[mid_toString_db9b55ba01e03e4b] = env->getMethodID(cls, "toString", "()Ljava/lang/String;");
            mids$[mid_doClose_f2cc1bce94666404] = env->getMethodID(cls, "doClose", "()V");

            class$ = new ::java::lang::Class(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        ParallelLeafReader::ParallelLeafReader(const JArray< ::org::apache::lucene::index::LeafReader > & a0) : ::org::apache::lucene::index::LeafReader(env->newObject(initializeClass, &mids$, mid_init$_cd6ad16685534c71, a0.this$)) {}

        ParallelLeafReader::ParallelLeafReader(jboolean a0, const JArray< ::org::apache::lucene::index::LeafReader > & a1) : ::org::apache::lucene::index::LeafReader(env->newObject(initializeClass, &mids$, mid_init$_16b340ef7c1e3f9b, a0, a1.this$)) {}

        ParallelLeafReader::ParallelLeafReader(jboolean a0, const JArray< ::org::apache::lucene::index::LeafReader > & a1, const JArray< ::org::apache::lucene::index::LeafReader > & a2) : ::org::apache::lucene::index::LeafReader(env->newObject(initializeClass, &mids$, mid_init$_81e7abe70074fc87, a0, a1.this$, a2.this$)) {}

        void ParallelLeafReader::checkIntegrity() const
        {
          env->callVoidMethod(this$, mids$[mid_checkIntegrity_f2cc1bce94666404]);
        }

        void ParallelLeafReader::document(jint a0, const ::org::apache::lucene::index::StoredFieldVisitor & a1) const
        {
          env->callVoidMethod(this$, mids$[mid_document_8f45e7464506ed2f], a0, a1.this$);
        }

        ::org::apache::lucene::index::BinaryDocValues ParallelLeafReader::getBinaryDocValues(const ::java::lang::String & a0) const
        {
          return ::org::apache::lucene::index::BinaryDocValues(env->callObjectMethod(this$, mids$[mid_getBinaryDocValues_6cf59c3533d4df22], a0.this$));
        }

        ::org::apache::lucene::index::IndexReader$CacheHelper ParallelLeafReader::getCoreCacheHelper() const
        {
          return ::org::apache::lucene::index::IndexReader$CacheHelper(env->callObjectMethod(this$, mids$[mid_getCoreCacheHelper_a64c414fea9a8cf6]));
        }

        ::org::apache::lucene::index::FieldInfos ParallelLeafReader::getFieldInfos() const
        {
          return ::org::apache::lucene::index::FieldInfos(env->callObjectMethod(this$, mids$[mid_getFieldInfos_f76601004b1c139b]));
        }

        ::org::apache::lucene::util::Bits ParallelLeafReader::getLiveDocs() const
        {
          return ::org::apache::lucene::util::Bits(env->callObjectMethod(this$, mids$[mid_getLiveDocs_ad87da2b626b21cf]));
        }

        ::org::apache::lucene::index::LeafMetaData ParallelLeafReader::getMetaData() const
        {
          return ::org::apache::lucene::index::LeafMetaData(env->callObjectMethod(this$, mids$[mid_getMetaData_07168aa94cc70619]));
        }

        ::org::apache::lucene::index::NumericDocValues ParallelLeafReader::getNormValues(const ::java::lang::String & a0) const
        {
          return ::org::apache::lucene::index::NumericDocValues(env->callObjectMethod(this$, mids$[mid_getNormValues_2b2c87c24a70ef49], a0.this$));
        }

        ::org::apache::lucene::index::NumericDocValues ParallelLeafReader::getNumericDocValues(const ::java::lang::String & a0) const
        {
          return ::org::apache::lucene::index::NumericDocValues(env->callObjectMethod(this$, mids$[mid_getNumericDocValues_2b2c87c24a70ef49], a0.this$));
        }

        JArray< ::org::apache::lucene::index::LeafReader > ParallelLeafReader::getParallelReaders() const
        {
          return JArray< ::org::apache::lucene::index::LeafReader >(env->callObjectMethod(this$, mids$[mid_getParallelReaders_12d01e9ebf6c0e8e]));
        }

        ::org::apache::lucene::index::PointValues ParallelLeafReader::getPointValues(const ::java::lang::String & a0) const
        {
          return ::org::apache::lucene::index::PointValues(env->callObjectMethod(this$, mids$[mid_getPointValues_72b990dbae0eea09], a0.this$));
        }

        ::org::apache::lucene::index::IndexReader$CacheHelper ParallelLeafReader::getReaderCacheHelper() const
        {
          return ::org::apache::lucene::index::IndexReader$CacheHelper(env->callObjectMethod(this$, mids$[mid_getReaderCacheHelper_a64c414fea9a8cf6]));
        }

        ::org::apache::lucene::index::SortedDocValues ParallelLeafReader::getSortedDocValues(const ::java::lang::String & a0) const
        {
          return ::org::apache::lucene::index::SortedDocValues(env->callObjectMethod(this$, mids$[mid_getSortedDocValues_adb16e9c5e3d9604], a0.this$));
        }

        ::org::apache::lucene::index::SortedNumericDocValues ParallelLeafReader::getSortedNumericDocValues(const ::java::lang::String & a0) const
        {
          return ::org::apache::lucene::index::SortedNumericDocValues(env->callObjectMethod(this$, mids$[mid_getSortedNumericDocValues_25e77b19828c4dfa], a0.this$));
        }

        ::org::apache::lucene::index::SortedSetDocValues ParallelLeafReader::getSortedSetDocValues(const ::java::lang::String & a0) const
        {
          return ::org::apache::lucene::index::SortedSetDocValues(env->callObjectMethod(this$, mids$[mid_getSortedSetDocValues_379820f082b251eb], a0.this$));
        }

        ::org::apache::lucene::index::Fields ParallelLeafReader::getTermVectors(jint a0) const
        {
          return ::org::apache::lucene::index::Fields(env->callObjectMethod(this$, mids$[mid_getTermVectors_9997c94b783ad8be], a0));
        }

        jint ParallelLeafReader::maxDoc() const
        {
          return env->callIntMethod(this$, mids$[mid_maxDoc_9972fcc56b44e79d]);
        }

        jint ParallelLeafReader::numDocs() const
        {
          return env->callIntMethod(this$, mids$[mid_numDocs_9972fcc56b44e79d]);
        }

        ::org::apache::lucene::index::Terms ParallelLeafReader::terms(const ::java::lang::String & a0) const
        {
          return ::org::apache::lucene::index::Terms(env->callObjectMethod(this$, mids$[mid_terms_3976802ad88273cd], a0.this$));
        }

        ::java::lang::String ParallelLeafReader::toString() const
        {
          return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_db9b55ba01e03e4b]));
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {
        static PyObject *t_ParallelLeafReader_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_ParallelLeafReader_instance_(PyTypeObject *type, PyObject *arg);
        static int t_ParallelLeafReader_init_(t_ParallelLeafReader *self, PyObject *args, PyObject *kwds);
        static PyObject *t_ParallelLeafReader_checkIntegrity(t_ParallelLeafReader *self, PyObject *args);
        static PyObject *t_ParallelLeafReader_document(t_ParallelLeafReader *self, PyObject *args);
        static PyObject *t_ParallelLeafReader_getBinaryDocValues(t_ParallelLeafReader *self, PyObject *args);
        static PyObject *t_ParallelLeafReader_getCoreCacheHelper(t_ParallelLeafReader *self, PyObject *args);
        static PyObject *t_ParallelLeafReader_getFieldInfos(t_ParallelLeafReader *self, PyObject *args);
        static PyObject *t_ParallelLeafReader_getLiveDocs(t_ParallelLeafReader *self, PyObject *args);
        static PyObject *t_ParallelLeafReader_getMetaData(t_ParallelLeafReader *self, PyObject *args);
        static PyObject *t_ParallelLeafReader_getNormValues(t_ParallelLeafReader *self, PyObject *args);
        static PyObject *t_ParallelLeafReader_getNumericDocValues(t_ParallelLeafReader *self, PyObject *args);
        static PyObject *t_ParallelLeafReader_getParallelReaders(t_ParallelLeafReader *self);
        static PyObject *t_ParallelLeafReader_getPointValues(t_ParallelLeafReader *self, PyObject *args);
        static PyObject *t_ParallelLeafReader_getReaderCacheHelper(t_ParallelLeafReader *self, PyObject *args);
        static PyObject *t_ParallelLeafReader_getSortedDocValues(t_ParallelLeafReader *self, PyObject *args);
        static PyObject *t_ParallelLeafReader_getSortedNumericDocValues(t_ParallelLeafReader *self, PyObject *args);
        static PyObject *t_ParallelLeafReader_getSortedSetDocValues(t_ParallelLeafReader *self, PyObject *args);
        static PyObject *t_ParallelLeafReader_getTermVectors(t_ParallelLeafReader *self, PyObject *args);
        static PyObject *t_ParallelLeafReader_maxDoc(t_ParallelLeafReader *self, PyObject *args);
        static PyObject *t_ParallelLeafReader_numDocs(t_ParallelLeafReader *self, PyObject *args);
        static PyObject *t_ParallelLeafReader_terms(t_ParallelLeafReader *self, PyObject *args);
        static PyObject *t_ParallelLeafReader_toString(t_ParallelLeafReader *self, PyObject *args);
        static PyObject *t_ParallelLeafReader_get__coreCacheHelper(t_ParallelLeafReader *self, void *data);
        static PyObject *t_ParallelLeafReader_get__fieldInfos(t_ParallelLeafReader *self, void *data);
        static PyObject *t_ParallelLeafReader_get__liveDocs(t_ParallelLeafReader *self, void *data);
        static PyObject *t_ParallelLeafReader_get__metaData(t_ParallelLeafReader *self, void *data);
        static PyObject *t_ParallelLeafReader_get__parallelReaders(t_ParallelLeafReader *self, void *data);
        static PyObject *t_ParallelLeafReader_get__readerCacheHelper(t_ParallelLeafReader *self, void *data);
        static PyGetSetDef t_ParallelLeafReader__fields_[] = {
          DECLARE_GET_FIELD(t_ParallelLeafReader, coreCacheHelper),
          DECLARE_GET_FIELD(t_ParallelLeafReader, fieldInfos),
          DECLARE_GET_FIELD(t_ParallelLeafReader, liveDocs),
          DECLARE_GET_FIELD(t_ParallelLeafReader, metaData),
          DECLARE_GET_FIELD(t_ParallelLeafReader, parallelReaders),
          DECLARE_GET_FIELD(t_ParallelLeafReader, readerCacheHelper),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_ParallelLeafReader__methods_[] = {
          DECLARE_METHOD(t_ParallelLeafReader, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_ParallelLeafReader, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_ParallelLeafReader, checkIntegrity, METH_VARARGS),
          DECLARE_METHOD(t_ParallelLeafReader, document, METH_VARARGS),
          DECLARE_METHOD(t_ParallelLeafReader, getBinaryDocValues, METH_VARARGS),
          DECLARE_METHOD(t_ParallelLeafReader, getCoreCacheHelper, METH_VARARGS),
          DECLARE_METHOD(t_ParallelLeafReader, getFieldInfos, METH_VARARGS),
          DECLARE_METHOD(t_ParallelLeafReader, getLiveDocs, METH_VARARGS),
          DECLARE_METHOD(t_ParallelLeafReader, getMetaData, METH_VARARGS),
          DECLARE_METHOD(t_ParallelLeafReader, getNormValues, METH_VARARGS),
          DECLARE_METHOD(t_ParallelLeafReader, getNumericDocValues, METH_VARARGS),
          DECLARE_METHOD(t_ParallelLeafReader, getParallelReaders, METH_NOARGS),
          DECLARE_METHOD(t_ParallelLeafReader, getPointValues, METH_VARARGS),
          DECLARE_METHOD(t_ParallelLeafReader, getReaderCacheHelper, METH_VARARGS),
          DECLARE_METHOD(t_ParallelLeafReader, getSortedDocValues, METH_VARARGS),
          DECLARE_METHOD(t_ParallelLeafReader, getSortedNumericDocValues, METH_VARARGS),
          DECLARE_METHOD(t_ParallelLeafReader, getSortedSetDocValues, METH_VARARGS),
          DECLARE_METHOD(t_ParallelLeafReader, getTermVectors, METH_VARARGS),
          DECLARE_METHOD(t_ParallelLeafReader, maxDoc, METH_VARARGS),
          DECLARE_METHOD(t_ParallelLeafReader, numDocs, METH_VARARGS),
          DECLARE_METHOD(t_ParallelLeafReader, terms, METH_VARARGS),
          DECLARE_METHOD(t_ParallelLeafReader, toString, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        static PyType_Slot PY_TYPE_SLOTS(ParallelLeafReader)[] = {
          { Py_tp_methods, t_ParallelLeafReader__methods_ },
          { Py_tp_init, (void *) t_ParallelLeafReader_init_ },
          { Py_tp_getset, t_ParallelLeafReader__fields_ },
          { 0, NULL }
        };

        static PyType_Def *PY_TYPE_BASES(ParallelLeafReader)[] = {
          &PY_TYPE_DEF(::org::apache::lucene::index::LeafReader),
          NULL
        };

        DEFINE_TYPE(ParallelLeafReader, t_ParallelLeafReader, ParallelLeafReader);

        void t_ParallelLeafReader::install(PyObject *module)
        {
          installType(&PY_TYPE(ParallelLeafReader), &PY_TYPE_DEF(ParallelLeafReader), module, "ParallelLeafReader", 0);
        }

        void t_ParallelLeafReader::initialize(PyObject *module)
        {
          PyObject_SetAttrString((PyObject *) PY_TYPE(ParallelLeafReader), "class_", make_descriptor(ParallelLeafReader::initializeClass, 1));
          PyObject_SetAttrString((PyObject *) PY_TYPE(ParallelLeafReader), "wrapfn_", make_descriptor(t_ParallelLeafReader::wrap_jobject));
          PyObject_SetAttrString((PyObject *) PY_TYPE(ParallelLeafReader), "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_ParallelLeafReader_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, ParallelLeafReader::initializeClass, 1)))
            return NULL;
          return t_ParallelLeafReader::wrap_Object(ParallelLeafReader(((t_ParallelLeafReader *) arg)->object.this$));
        }
        static PyObject *t_ParallelLeafReader_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, ParallelLeafReader::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_ParallelLeafReader_init_(t_ParallelLeafReader *self, PyObject *args, PyObject *kwds)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 1:
            {
              JArray< ::org::apache::lucene::index::LeafReader > a0((jobject) NULL);
              ParallelLeafReader object((jobject) NULL);

              if (!parseArgs(args, "[k", ::org::apache::lucene::index::LeafReader::initializeClass, &a0))
              {
                INT_CALL(object = ParallelLeafReader(a0));
                self->object = object;
                break;
              }
            }
            goto err;
           case 2:
            {
              jboolean a0;
              JArray< ::org::apache::lucene::index::LeafReader > a1((jobject) NULL);
              ParallelLeafReader object((jobject) NULL);

              if (!parseArgs(args, "Z[k", ::org::apache::lucene::index::LeafReader::initializeClass, &a0, &a1))
              {
                INT_CALL(object = ParallelLeafReader(a0, a1));
                self->object = object;
                break;
              }
            }
            goto err;
           case 3:
            {
              jboolean a0;
              JArray< ::org::apache::lucene::index::LeafReader > a1((jobject) NULL);
              JArray< ::org::apache::lucene::index::LeafReader > a2((jobject) NULL);
              ParallelLeafReader object((jobject) NULL);

              if (!parseArgs(args, "Z[k[k", ::org::apache::lucene::index::LeafReader::initializeClass, ::org::apache::lucene::index::LeafReader::initializeClass, &a0, &a1, &a2))
              {
                INT_CALL(object = ParallelLeafReader(a0, a1, a2));
                self->object = object;
                break;
              }
            }
           default:
           err:
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }

        static PyObject *t_ParallelLeafReader_checkIntegrity(t_ParallelLeafReader *self, PyObject *args)
        {

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(self->object.checkIntegrity());
            Py_RETURN_NONE;
          }

          return callSuper(PY_TYPE(ParallelLeafReader), (PyObject *) self, "checkIntegrity", args, 2);
        }

        static PyObject *t_ParallelLeafReader_document(t_ParallelLeafReader *self, PyObject *args)
        {
          jint a0;
          ::org::apache::lucene::index::StoredFieldVisitor a1((jobject) NULL);

          if (!parseArgs(args, "Ik", ::org::apache::lucene::index::StoredFieldVisitor::initializeClass, &a0, &a1))
          {
            OBJ_CALL(self->object.document(a0, a1));
            Py_RETURN_NONE;
          }

          return callSuper(PY_TYPE(ParallelLeafReader), (PyObject *) self, "document", args, 2);
        }

        static PyObject *t_ParallelLeafReader_getBinaryDocValues(t_ParallelLeafReader *self, PyObject *args)
        {
          ::java::lang::String a0((jobject) NULL);
          ::org::apache::lucene::index::BinaryDocValues result((jobject) NULL);

          if (!parseArgs(args, "s", &a0))
          {
            OBJ_CALL(result = self->object.getBinaryDocValues(a0));
            return ::org::apache::lucene::index::t_BinaryDocValues::wrap_Object(result);
          }

          return callSuper(PY_TYPE(ParallelLeafReader), (PyObject *) self, "getBinaryDocValues", args, 2);
        }

        static PyObject *t_ParallelLeafReader_getCoreCacheHelper(t_ParallelLeafReader *self, PyObject *args)
        {
          ::org::apache::lucene::index::IndexReader$CacheHelper result((jobject) NULL);

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.getCoreCacheHelper());
            return ::org::apache::lucene::index::t_IndexReader$CacheHelper::wrap_Object(result);
          }

          return callSuper(PY_TYPE(ParallelLeafReader), (PyObject *) self, "getCoreCacheHelper", args, 2);
        }

        static PyObject *t_ParallelLeafReader_getFieldInfos(t_ParallelLeafReader *self, PyObject *args)
        {
          ::org::apache::lucene::index::FieldInfos result((jobject) NULL);

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.getFieldInfos());
            return ::org::apache::lucene::index::t_FieldInfos::wrap_Object(result);
          }

          return callSuper(PY_TYPE(ParallelLeafReader), (PyObject *) self, "getFieldInfos", args, 2);
        }

        static PyObject *t_ParallelLeafReader_getLiveDocs(t_ParallelLeafReader *self, PyObject *args)
        {
          ::org::apache::lucene::util::Bits result((jobject) NULL);

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.getLiveDocs());
            return ::org::apache::lucene::util::t_Bits::wrap_Object(result);
          }

          return callSuper(PY_TYPE(ParallelLeafReader), (PyObject *) self, "getLiveDocs", args, 2);
        }

        static PyObject *t_ParallelLeafReader_getMetaData(t_ParallelLeafReader *self, PyObject *args)
        {
          ::org::apache::lucene::index::LeafMetaData result((jobject) NULL);

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.getMetaData());
            return ::org::apache::lucene::index::t_LeafMetaData::wrap_Object(result);
          }

          return callSuper(PY_TYPE(ParallelLeafReader), (PyObject *) self, "getMetaData", args, 2);
        }

        static PyObject *t_ParallelLeafReader_getNormValues(t_ParallelLeafReader *self, PyObject *args)
        {
          ::java::lang::String a0((jobject) NULL);
          ::org::apache::lucene::index::NumericDocValues result((jobject) NULL);

          if (!parseArgs(args, "s", &a0))
          {
            OBJ_CALL(result = self->object.getNormValues(a0));
            return ::org::apache::lucene::index::t_NumericDocValues::wrap_Object(result);
          }

          return callSuper(PY_TYPE(ParallelLeafReader), (PyObject *) self, "getNormValues", args, 2);
        }

        static PyObject *t_ParallelLeafReader_getNumericDocValues(t_ParallelLeafReader *self, PyObject *args)
        {
          ::java::lang::String a0((jobject) NULL);
          ::org::apache::lucene::index::NumericDocValues result((jobject) NULL);

          if (!parseArgs(args, "s", &a0))
          {
            OBJ_CALL(result = self->object.getNumericDocValues(a0));
            return ::org::apache::lucene::index::t_NumericDocValues::wrap_Object(result);
          }

          return callSuper(PY_TYPE(ParallelLeafReader), (PyObject *) self, "getNumericDocValues", args, 2);
        }

        static PyObject *t_ParallelLeafReader_getParallelReaders(t_ParallelLeafReader *self)
        {
          JArray< ::org::apache::lucene::index::LeafReader > result((jobject) NULL);
          OBJ_CALL(result = self->object.getParallelReaders());
          return JArray<jobject>(result.this$).wrap(::org::apache::lucene::index::t_LeafReader::wrap_jobject);
        }

        static PyObject *t_ParallelLeafReader_getPointValues(t_ParallelLeafReader *self, PyObject *args)
        {
          ::java::lang::String a0((jobject) NULL);
          ::org::apache::lucene::index::PointValues result((jobject) NULL);

          if (!parseArgs(args, "s", &a0))
          {
            OBJ_CALL(result = self->object.getPointValues(a0));
            return ::org::apache::lucene::index::t_PointValues::wrap_Object(result);
          }

          return callSuper(PY_TYPE(ParallelLeafReader), (PyObject *) self, "getPointValues", args, 2);
        }

        static PyObject *t_ParallelLeafReader_getReaderCacheHelper(t_ParallelLeafReader *self, PyObject *args)
        {
          ::org::apache::lucene::index::IndexReader$CacheHelper result((jobject) NULL);

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.getReaderCacheHelper());
            return ::org::apache::lucene::index::t_IndexReader$CacheHelper::wrap_Object(result);
          }

          return callSuper(PY_TYPE(ParallelLeafReader), (PyObject *) self, "getReaderCacheHelper", args, 2);
        }

        static PyObject *t_ParallelLeafReader_getSortedDocValues(t_ParallelLeafReader *self, PyObject *args)
        {
          ::java::lang::String a0((jobject) NULL);
          ::org::apache::lucene::index::SortedDocValues result((jobject) NULL);

          if (!parseArgs(args, "s", &a0))
          {
            OBJ_CALL(result = self->object.getSortedDocValues(a0));
            return ::org::apache::lucene::index::t_SortedDocValues::wrap_Object(result);
          }

          return callSuper(PY_TYPE(ParallelLeafReader), (PyObject *) self, "getSortedDocValues", args, 2);
        }

        static PyObject *t_ParallelLeafReader_getSortedNumericDocValues(t_ParallelLeafReader *self, PyObject *args)
        {
          ::java::lang::String a0((jobject) NULL);
          ::org::apache::lucene::index::SortedNumericDocValues result((jobject) NULL);

          if (!parseArgs(args, "s", &a0))
          {
            OBJ_CALL(result = self->object.getSortedNumericDocValues(a0));
            return ::org::apache::lucene::index::t_SortedNumericDocValues::wrap_Object(result);
          }

          return callSuper(PY_TYPE(ParallelLeafReader), (PyObject *) self, "getSortedNumericDocValues", args, 2);
        }

        static PyObject *t_ParallelLeafReader_getSortedSetDocValues(t_ParallelLeafReader *self, PyObject *args)
        {
          ::java::lang::String a0((jobject) NULL);
          ::org::apache::lucene::index::SortedSetDocValues result((jobject) NULL);

          if (!parseArgs(args, "s", &a0))
          {
            OBJ_CALL(result = self->object.getSortedSetDocValues(a0));
            return ::org::apache::lucene::index::t_SortedSetDocValues::wrap_Object(result);
          }

          return callSuper(PY_TYPE(ParallelLeafReader), (PyObject *) self, "getSortedSetDocValues", args, 2);
        }

        static PyObject *t_ParallelLeafReader_getTermVectors(t_ParallelLeafReader *self, PyObject *args)
        {
          jint a0;
          ::org::apache::lucene::index::Fields result((jobject) NULL);

          if (!parseArgs(args, "I", &a0))
          {
            OBJ_CALL(result = self->object.getTermVectors(a0));
            return ::org::apache::lucene::index::t_Fields::wrap_Object(result);
          }

          return callSuper(PY_TYPE(ParallelLeafReader), (PyObject *) self, "getTermVectors", args, 2);
        }

        static PyObject *t_ParallelLeafReader_maxDoc(t_ParallelLeafReader *self, PyObject *args)
        {
          jint result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.maxDoc());
            return PyLong_FromLong((long) result);
          }

          return callSuper(PY_TYPE(ParallelLeafReader), (PyObject *) self, "maxDoc", args, 2);
        }

        static PyObject *t_ParallelLeafReader_numDocs(t_ParallelLeafReader *self, PyObject *args)
        {
          jint result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.numDocs());
            return PyLong_FromLong((long) result);
          }

          return callSuper(PY_TYPE(ParallelLeafReader), (PyObject *) self, "numDocs", args, 2);
        }

        static PyObject *t_ParallelLeafReader_terms(t_ParallelLeafReader *self, PyObject *args)
        {
          ::java::lang::String a0((jobject) NULL);
          ::org::apache::lucene::index::Terms result((jobject) NULL);

          if (!parseArgs(args, "s", &a0))
          {
            OBJ_CALL(result = self->object.terms(a0));
            return ::org::apache::lucene::index::t_Terms::wrap_Object(result);
          }

          return callSuper(PY_TYPE(ParallelLeafReader), (PyObject *) self, "terms", args, 2);
        }

        static PyObject *t_ParallelLeafReader_toString(t_ParallelLeafReader *self, PyObject *args)
        {
          ::java::lang::String result((jobject) NULL);

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.toString());
            return j2p(result);
          }

          return callSuper(PY_TYPE(ParallelLeafReader), (PyObject *) self, "toString", args, 2);
        }

        static PyObject *t_ParallelLeafReader_get__coreCacheHelper(t_ParallelLeafReader *self, void *data)
        {
          ::org::apache::lucene::index::IndexReader$CacheHelper value((jobject) NULL);
          OBJ_CALL(value = self->object.getCoreCacheHelper());
          return ::org::apache::lucene::index::t_IndexReader$CacheHelper::wrap_Object(value);
        }

        static PyObject *t_ParallelLeafReader_get__fieldInfos(t_ParallelLeafReader *self, void *data)
        {
          ::org::apache::lucene::index::FieldInfos value((jobject) NULL);
          OBJ_CALL(value = self->object.getFieldInfos());
          return ::org::apache::lucene::index::t_FieldInfos::wrap_Object(value);
        }

        static PyObject *t_ParallelLeafReader_get__liveDocs(t_ParallelLeafReader *self, void *data)
        {
          ::org::apache::lucene::util::Bits value((jobject) NULL);
          OBJ_CALL(value = self->object.getLiveDocs());
          return ::org::apache::lucene::util::t_Bits::wrap_Object(value);
        }

        static PyObject *t_ParallelLeafReader_get__metaData(t_ParallelLeafReader *self, void *data)
        {
          ::org::apache::lucene::index::LeafMetaData value((jobject) NULL);
          OBJ_CALL(value = self->object.getMetaData());
          return ::org::apache::lucene::index::t_LeafMetaData::wrap_Object(value);
        }

        static PyObject *t_ParallelLeafReader_get__parallelReaders(t_ParallelLeafReader *self, void *data)
        {
          JArray< ::org::apache::lucene::index::LeafReader > value((jobject) NULL);
          OBJ_CALL(value = self->object.getParallelReaders());
          return JArray<jobject>(value.this$).wrap(::org::apache::lucene::index::t_LeafReader::wrap_jobject);
        }

        static PyObject *t_ParallelLeafReader_get__readerCacheHelper(t_ParallelLeafReader *self, void *data)
        {
          ::org::apache::lucene::index::IndexReader$CacheHelper value((jobject) NULL);
          OBJ_CALL(value = self->object.getReaderCacheHelper());
          return ::org::apache::lucene::index::t_IndexReader$CacheHelper::wrap_Object(value);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/util/automaton/Automaton$Builder.h"
#include "org/apache/lucene/util/automaton/Automaton.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        namespace automaton {

          ::java::lang::Class *Automaton$Builder::class$ = NULL;
          jmethodID *Automaton$Builder::mids$ = NULL;
          bool Automaton$Builder::live$ = false;

          jclass Automaton$Builder::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/util/automaton/Automaton$Builder");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_f2cc1bce94666404] = env->getMethodID(cls, "<init>", "()V");
              mids$[mid_init$_438c62480c481c65] = env->getMethodID(cls, "<init>", "(II)V");
              mids$[mid_addEpsilon_438c62480c481c65] = env->getMethodID(cls, "addEpsilon", "(II)V");
              mids$[mid_addTransition_db3e97653d3683f3] = env->getMethodID(cls, "addTransition", "(III)V");
              mids$[mid_addTransition_34ab80131650555f] = env->getMethodID(cls, "addTransition", "(IIII)V");
              mids$[mid_copy_06c1b4541f684199] = env->getMethodID(cls, "copy", "(Lorg/apache/lucene/util/automaton/Automaton;)V");
              mids$[mid_copyStates_06c1b4541f684199] = env->getMethodID(cls, "copyStates", "(Lorg/apache/lucene/util/automaton/Automaton;)V");
              mids$[mid_createState_9972fcc56b44e79d] = env->getMethodID(cls, "createState", "()I");
              mids$[mid_finish_d9f5c446a29ec187] = env->getMethodID(cls, "finish", "()Lorg/apache/lucene/util/automaton/Automaton;");
              mids$[mid_getNumStates_9972fcc56b44e79d] = env->getMethodID(cls, "getNumStates", "()I");
              mids$[mid_isAccept_a1d30e1ee40c89a2] = env->getMethodID(cls, "isAccept", "(I)Z");
              mids$[mid_setAccept_b8f283cdbda5c964] = env->getMethodID(cls, "setAccept", "(IZ)V");

              class$ = new ::java::lang::Class(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          Automaton$Builder::Automaton$Builder() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_f2cc1bce94666404)) {}

          Automaton$Builder::Automaton$Builder(jint a0, jint a1) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_438c62480c481c65, a0, a1)) {}

          void Automaton$Builder::addEpsilon(jint a0, jint a1) const
          {
            env->callVoidMethod(this$, mids$[mid_addEpsilon_438c62480c481c65], a0, a1);
          }

          void Automaton$Builder::addTransition(jint a0, jint a1, jint a2) const
          {
            env->callVoidMethod(this$, mids$[mid_addTransition_db3e97653d3683f3], a0, a1, a2);
          }

          void Automaton$Builder::addTransition(jint a0, jint a1, jint a2, jint a3) const
          {
            env->callVoidMethod(this$, mids$[mid_addTransition_34ab80131650555f], a0, a1, a2, a3);
          }

          void Automaton$Builder::copy(const ::org::apache::lucene::util::automaton::Automaton & a0) const
          {
            env->callVoidMethod(this$, mids$[mid_copy_06c1b4541f684199], a0.this$);
          }

          void Automaton$Builder::copyStates(const ::org::apache::lucene::util::automaton::Automaton & a0) const
          {
            env->callVoidMethod(this$, mids$[mid_copyStates_06c1b4541f684199], a0.this$);
          }

          jint Automaton$Builder::createState() const
          {
            return env->callIntMethod(this$, mids$[mid_createState_9972fcc56b44e79d]);
          }

          ::org::apache::lucene::util::automaton::Automaton Automaton$Builder::finish() const
          {
            return ::org::apache::lucene::util::automaton::Automaton(env->callObjectMethod(this$, mids$[mid_finish_d9f5c446a29ec187]));
          }

          jint Automaton$Builder::getNumStates() const
          {
            return env->callIntMethod(this$, mids$[mid_getNumStates_9972fcc56b44e79d]);
          }

          jboolean Automaton$Builder::isAccept(jint a0) const
          {
            return env->callBooleanMethod(this$, mids$[mid_isAccept_a1d30e1ee40c89a2], a0);
          }

          void Automaton$Builder::setAccept(jint a0, jboolean a1) const
          {
            env->callVoidMethod(this$, mids$[mid_setAccept_b8f283cdbda5c964], a0, a1);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        namespace automaton {
          static PyObject *t_Automaton$Builder_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_Automaton$Builder_instance_(PyTypeObject *type, PyObject *arg);
          static int t_Automaton$Builder_init_(t_Automaton$Builder *self, PyObject *args, PyObject *kwds);
          static PyObject *t_Automaton$Builder_addEpsilon(t_Automaton$Builder *self, PyObject *args);
          static PyObject *t_Automaton$Builder_addTransition(t_Automaton$Builder *self, PyObject *args);
          static PyObject *t_Automaton$Builder_copy(t_Automaton$Builder *self, PyObject *arg);
          static PyObject *t_Automaton$Builder_copyStates(t_Automaton$Builder *self, PyObject *arg);
          static PyObject *t_Automaton$Builder_createState(t_Automaton$Builder *self);
          static PyObject *t_Automaton$Builder_finish(t_Automaton$Builder *self);
          static PyObject *t_Automaton$Builder_getNumStates(t_Automaton$Builder *self);
          static PyObject *t_Automaton$Builder_isAccept(t_Automaton$Builder *self, PyObject *arg);
          static PyObject *t_Automaton$Builder_setAccept(t_Automaton$Builder *self, PyObject *args);
          static PyObject *t_Automaton$Builder_get__numStates(t_Automaton$Builder *self, void *data);
          static PyGetSetDef t_Automaton$Builder__fields_[] = {
            DECLARE_GET_FIELD(t_Automaton$Builder, numStates),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_Automaton$Builder__methods_[] = {
            DECLARE_METHOD(t_Automaton$Builder, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_Automaton$Builder, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_Automaton$Builder, addEpsilon, METH_VARARGS),
            DECLARE_METHOD(t_Automaton$Builder, addTransition, METH_VARARGS),
            DECLARE_METHOD(t_Automaton$Builder, copy, METH_O),
            DECLARE_METHOD(t_Automaton$Builder, copyStates, METH_O),
            DECLARE_METHOD(t_Automaton$Builder, createState, METH_NOARGS),
            DECLARE_METHOD(t_Automaton$Builder, finish, METH_NOARGS),
            DECLARE_METHOD(t_Automaton$Builder, getNumStates, METH_NOARGS),
            DECLARE_METHOD(t_Automaton$Builder, isAccept, METH_O),
            DECLARE_METHOD(t_Automaton$Builder, setAccept, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          static PyType_Slot PY_TYPE_SLOTS(Automaton$Builder)[] = {
            { Py_tp_methods, t_Automaton$Builder__methods_ },
            { Py_tp_init, (void *) t_Automaton$Builder_init_ },
            { Py_tp_getset, t_Automaton$Builder__fields_ },
            { 0, NULL }
          };

          static PyType_Def *PY_TYPE_BASES(Automaton$Builder)[] = {
            &PY_TYPE_DEF(::java::lang::Object),
            NULL
          };

          DEFINE_TYPE(Automaton$Builder, t_Automaton$Builder, Automaton$Builder);

          void t_Automaton$Builder::install(PyObject *module)
          {
            installType(&PY_TYPE(Automaton$Builder), &PY_TYPE_DEF(Automaton$Builder), module, "Automaton$Builder", 0);
          }

          void t_Automaton$Builder::initialize(PyObject *module)
          {
            PyObject_SetAttrString((PyObject *) PY_TYPE(Automaton$Builder), "class_", make_descriptor(Automaton$Builder::initializeClass, 1));
            PyObject_SetAttrString((PyObject *) PY_TYPE(Automaton$Builder), "wrapfn_", make_descriptor(t_Automaton$Builder::wrap_jobject));
            PyObject_SetAttrString((PyObject *) PY_TYPE(Automaton$Builder), "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_Automaton$Builder_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, Automaton$Builder::initializeClass, 1)))
              return NULL;
            return t_Automaton$Builder::wrap_Object(Automaton$Builder(((t_Automaton$Builder *) arg)->object.this$));
          }
          static PyObject *t_Automaton$Builder_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, Automaton$Builder::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_Automaton$Builder_init_(t_Automaton$Builder *self, PyObject *args, PyObject *kwds)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 0:
              {
                Automaton$Builder object((jobject) NULL);

                INT_CALL(object = Automaton$Builder());
                self->object = object;
                break;
              }
             case 2:
              {
                jint a0;
                jint a1;
                Automaton$Builder object((jobject) NULL);

                if (!parseArgs(args, "II", &a0, &a1))
                {
                  INT_CALL(object = Automaton$Builder(a0, a1));
                  self->object = object;
                  break;
                }
              }
             default:
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_Automaton$Builder_addEpsilon(t_Automaton$Builder *self, PyObject *args)
          {
            jint a0;
            jint a1;

            if (!parseArgs(args, "II", &a0, &a1))
            {
              OBJ_CALL(self->object.addEpsilon(a0, a1));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError((PyObject *) self, "addEpsilon", args);
            return NULL;
          }

          static PyObject *t_Automaton$Builder_addTransition(t_Automaton$Builder *self, PyObject *args)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 3:
              {
                jint a0;
                jint a1;
                jint a2;

                if (!parseArgs(args, "III", &a0, &a1, &a2))
                {
                  OBJ_CALL(self->object.addTransition(a0, a1, a2));
                  Py_RETURN_NONE;
                }
              }
              break;
             case 4:
              {
                jint a0;
                jint a1;
                jint a2;
                jint a3;

                if (!parseArgs(args, "IIII", &a0, &a1, &a2, &a3))
                {
                  OBJ_CALL(self->object.addTransition(a0, a1, a2, a3));
                  Py_RETURN_NONE;
                }
              }
            }

            PyErr_SetArgsError((PyObject *) self, "addTransition", args);
            return NULL;
          }

          static PyObject *t_Automaton$Builder_copy(t_Automaton$Builder *self, PyObject *arg)
          {
            ::org::apache::lucene::util::automaton::Automaton a0((jobject) NULL);

            if (!parseArg(arg, "k", ::org::apache::lucene::util::automaton::Automaton::initializeClass, &a0))
            {
              OBJ_CALL(self->object.copy(a0));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError((PyObject *) self, "copy", arg);
            return NULL;
          }

          static PyObject *t_Automaton$Builder_copyStates(t_Automaton$Builder *self, PyObject *arg)
          {
            ::org::apache::lucene::util::automaton::Automaton a0((jobject) NULL);

            if (!parseArg(arg, "k", ::org::apache::lucene::util::automaton::Automaton::initializeClass, &a0))
            {
              OBJ_CALL(self->object.copyStates(a0));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError((PyObject *) self, "copyStates", arg);
            return NULL;
          }

          static PyObject *t_Automaton$Builder_createState(t_Automaton$Builder *self)
          {
            jint result;
            OBJ_CALL(result = self->object.createState());
            return PyLong_FromLong((long) result);
          }

          static PyObject *t_Automaton$Builder_finish(t_Automaton$Builder *self)
          {
            ::org::apache::lucene::util::automaton::Automaton result((jobject) NULL);
            OBJ_CALL(result = self->object.finish());
            return ::org::apache::lucene::util::automaton::t_Automaton::wrap_Object(result);
          }

          static PyObject *t_Automaton$Builder_getNumStates(t_Automaton$Builder *self)
          {
            jint result;
            OBJ_CALL(result = self->object.getNumStates());
            return PyLong_FromLong((long) result);
          }

          static PyObject *t_Automaton$Builder_isAccept(t_Automaton$Builder *self, PyObject *arg)
          {
            jint a0;
            jboolean result;

            if (!parseArg(arg, "I", &a0))
            {
              OBJ_CALL(result = self->object.isAccept(a0));
              Py_RETURN_BOOL(result);
            }

            PyErr_SetArgsError((PyObject *) self, "isAccept", arg);
            return NULL;
          }

          static PyObject *t_Automaton$Builder_setAccept(t_Automaton$Builder *self, PyObject *args)
          {
            jint a0;
            jboolean a1;

            if (!parseArgs(args, "IZ", &a0, &a1))
            {
              OBJ_CALL(self->object.setAccept(a0, a1));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError((PyObject *) self, "setAccept", args);
            return NULL;
          }

          static PyObject *t_Automaton$Builder_get__numStates(t_Automaton$Builder *self, void *data)
          {
            jint value;
            OBJ_CALL(value = self->object.getNumStates());
            return PyLong_FromLong((long) value);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/ko/Token.h"
#include "org/apache/lucene/analysis/ko/dict/Dictionary$Morpheme.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/analysis/ko/POS$Type.h"
#include "java/lang/String.h"
#include "org/apache/lucene/analysis/ko/POS$Tag.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace ko {

          ::java::lang::Class *Token::class$ = NULL;
          jmethodID *Token::mids$ = NULL;
          bool Token::live$ = false;

          jclass Token::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/ko/Token");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_c2ec8b2b923491fe] = env->getMethodID(cls, "<init>", "([CIIII)V");
              mids$[mid_getEndOffset_9972fcc56b44e79d] = env->getMethodID(cls, "getEndOffset", "()I");
              mids$[mid_getLeftPOS_6d27d9f5e0d7f31a] = env->getMethodID(cls, "getLeftPOS", "()Lorg/apache/lucene/analysis/ko/POS$Tag;");
              mids$[mid_getLength_9972fcc56b44e79d] = env->getMethodID(cls, "getLength", "()I");
              mids$[mid_getMorphemes_82c5e27eed5fc4af] = env->getMethodID(cls, "getMorphemes", "()[Lorg/apache/lucene/analysis/ko/dict/Dictionary$Morpheme;");
              mids$[mid_getOffset_9972fcc56b44e79d] = env->getMethodID(cls, "getOffset", "()I");
              mids$[mid_getPOSType_6e8b69211f216c5e] = env->getMethodID(cls, "getPOSType", "()Lorg/apache/lucene/analysis/ko/POS$Type;");
              mids$[mid_getPositionIncrement_9972fcc56b44e79d] = env->getMethodID(cls, "getPositionIncrement", "()I");
              mids$[mid_getPositionLength_9972fcc56b44e79d] = env->getMethodID(cls, "getPositionLength", "()I");
              mids$[mid_getReading_db9b55ba01e03e4b] = env->getMethodID(cls, "getReading", "()Ljava/lang/String;");
              mids$[mid_getRightPOS_6d27d9f5e0d7f31a] = env->getMethodID(cls, "getRightPOS", "()Lorg/apache/lucene/analysis/ko/POS$Tag;");
              mids$[mid_getStartOffset_9972fcc56b44e79d] = env->getMethodID(cls, "getStartOffset", "()I");
              mids$[mid_getSurfaceForm_e11cf13c9a887534] = env->getMethodID(cls, "getSurfaceForm", "()[C");
              mids$[mid_getSurfaceFormString_db9b55ba01e03e4b] = env->getMethodID(cls, "getSurfaceFormString", "()Ljava/lang/String;");
              mids$[mid_setPositionIncrement_040c4cd0390c5aff] = env->getMethodID(cls, "setPositionIncrement", "(I)V");
              mids$[mid_setPositionLength_040c4cd0390c5aff] = env->getMethodID(cls, "setPositionLength", "(I)V");

              class$ = new ::java::lang::Class(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          Token::Token(const JArray< jchar > & a0, jint a1, jint a2, jint a3, jint a4) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_c2ec8b2b923491fe, a0.this$, a1, a2, a3, a4)) {}

          jint Token::getEndOffset() const
          {
            return env->callIntMethod(this$, mids$[mid_getEndOffset_9972fcc56b44e79d]);
          }

          ::org::apache::lucene::analysis::ko::POS$Tag Token::getLeftPOS() const
          {
            return ::org::apache::lucene::analysis::ko::POS$Tag(env->callObjectMethod(this$, mids$[mid_getLeftPOS_6d27d9f5e0d7f31a]));
          }

          jint Token::getLength() const
          {
            return env->callIntMethod(this$, mids$[mid_getLength_9972fcc56b44e79d]);
          }

          JArray< ::org::apache::lucene::analysis::ko::dict::Dictionary$Morpheme > Token::getMorphemes() const
          {
            return JArray< ::org::apache::lucene::analysis::ko::dict::Dictionary$Morpheme >(env->callObjectMethod(this$, mids$[mid_getMorphemes_82c5e27eed5fc4af]));
          }

          jint Token::getOffset() const
          {
            return env->callIntMethod(this$, mids$[mid_getOffset_9972fcc56b44e79d]);
          }

          ::org::apache::lucene::analysis::ko::POS$Type Token::getPOSType() const
          {
            return ::org::apache::lucene::analysis::ko::POS$Type(env->callObjectMethod(this$, mids$[mid_getPOSType_6e8b69211f216c5e]));
          }

          jint Token::getPositionIncrement() const
          {
            return env->callIntMethod(this$, mids$[mid_getPositionIncrement_9972fcc56b44e79d]);
          }

          jint Token::getPositionLength() const
          {
            return env->callIntMethod(this$, mids$[mid_getPositionLength_9972fcc56b44e79d]);
          }

          ::java::lang::String Token::getReading() const
          {
            return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_getReading_db9b55ba01e03e4b]));
          }

          ::org::apache::lucene::analysis::ko::POS$Tag Token::getRightPOS() const
          {
            return ::org::apache::lucene::analysis::ko::POS$Tag(env->callObjectMethod(this$, mids$[mid_getRightPOS_6d27d9f5e0d7f31a]));
          }

          jint Token::getStartOffset() const
          {
            return env->callIntMethod(this$, mids$[mid_getStartOffset_9972fcc56b44e79d]);
          }

          JArray< jchar > Token::getSurfaceForm() const
          {
            return JArray< jchar >(env->callObjectMethod(this$, mids$[mid_getSurfaceForm_e11cf13c9a887534]));
          }

          ::java::lang::String Token::getSurfaceFormString() const
          {
            return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_getSurfaceFormString_db9b55ba01e03e4b]));
          }

          void Token::setPositionIncrement(jint a0) const
          {
            env->callVoidMethod(this$, mids$[mid_setPositionIncrement_040c4cd0390c5aff], a0);
          }

          void Token::setPositionLength(jint a0) const
          {
            env->callVoidMethod(this$, mids$[mid_setPositionLength_040c4cd0390c5aff], a0);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace ko {
          static PyObject *t_Token_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_Token_instance_(PyTypeObject *type, PyObject *arg);
          static int t_Token_init_(t_Token *self, PyObject *args, PyObject *kwds);
          static PyObject *t_Token_getEndOffset(t_Token *self);
          static PyObject *t_Token_getLeftPOS(t_Token *self);
          static PyObject *t_Token_getLength(t_Token *self);
          static PyObject *t_Token_getMorphemes(t_Token *self);
          static PyObject *t_Token_getOffset(t_Token *self);
          static PyObject *t_Token_getPOSType(t_Token *self);
          static PyObject *t_Token_getPositionIncrement(t_Token *self);
          static PyObject *t_Token_getPositionLength(t_Token *self);
          static PyObject *t_Token_getReading(t_Token *self);
          static PyObject *t_Token_getRightPOS(t_Token *self);
          static PyObject *t_Token_getStartOffset(t_Token *self);
          static PyObject *t_Token_getSurfaceForm(t_Token *self);
          static PyObject *t_Token_getSurfaceFormString(t_Token *self);
          static PyObject *t_Token_setPositionIncrement(t_Token *self, PyObject *arg);
          static PyObject *t_Token_setPositionLength(t_Token *self, PyObject *arg);
          static PyObject *t_Token_get__endOffset(t_Token *self, void *data);
          static PyObject *t_Token_get__leftPOS(t_Token *self, void *data);
          static PyObject *t_Token_get__length(t_Token *self, void *data);
          static PyObject *t_Token_get__morphemes(t_Token *self, void *data);
          static PyObject *t_Token_get__offset(t_Token *self, void *data);
          static PyObject *t_Token_get__pOSType(t_Token *self, void *data);
          static PyObject *t_Token_get__positionIncrement(t_Token *self, void *data);
          static int t_Token_set__positionIncrement(t_Token *self, PyObject *arg, void *data);
          static PyObject *t_Token_get__positionLength(t_Token *self, void *data);
          static int t_Token_set__positionLength(t_Token *self, PyObject *arg, void *data);
          static PyObject *t_Token_get__reading(t_Token *self, void *data);
          static PyObject *t_Token_get__rightPOS(t_Token *self, void *data);
          static PyObject *t_Token_get__startOffset(t_Token *self, void *data);
          static PyObject *t_Token_get__surfaceForm(t_Token *self, void *data);
          static PyObject *t_Token_get__surfaceFormString(t_Token *self, void *data);
          static PyGetSetDef t_Token__fields_[] = {
            DECLARE_GET_FIELD(t_Token, endOffset),
            DECLARE_GET_FIELD(t_Token, leftPOS),
            DECLARE_GET_FIELD(t_Token, length),
            DECLARE_GET_FIELD(t_Token, morphemes),
            DECLARE_GET_FIELD(t_Token, offset),
            DECLARE_GET_FIELD(t_Token, pOSType),
            DECLARE_GETSET_FIELD(t_Token, positionIncrement),
            DECLARE_GETSET_FIELD(t_Token, positionLength),
            DECLARE_GET_FIELD(t_Token, reading),
            DECLARE_GET_FIELD(t_Token, rightPOS),
            DECLARE_GET_FIELD(t_Token, startOffset),
            DECLARE_GET_FIELD(t_Token, surfaceForm),
            DECLARE_GET_FIELD(t_Token, surfaceFormString),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_Token__methods_[] = {
            DECLARE_METHOD(t_Token, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_Token, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_Token, getEndOffset, METH_NOARGS),
            DECLARE_METHOD(t_Token, getLeftPOS, METH_NOARGS),
            DECLARE_METHOD(t_Token, getLength, METH_NOARGS),
            DECLARE_METHOD(t_Token, getMorphemes, METH_NOARGS),
            DECLARE_METHOD(t_Token, getOffset, METH_NOARGS),
            DECLARE_METHOD(t_Token, getPOSType, METH_NOARGS),
            DECLARE_METHOD(t_Token, getPositionIncrement, METH_NOARGS),
            DECLARE_METHOD(t_Token, getPositionLength, METH_NOARGS),
            DECLARE_METHOD(t_Token, getReading, METH_NOARGS),
            DECLARE_METHOD(t_Token, getRightPOS, METH_NOARGS),
            DECLARE_METHOD(t_Token, getStartOffset, METH_NOARGS),
            DECLARE_METHOD(t_Token, getSurfaceForm, METH_NOARGS),
            DECLARE_METHOD(t_Token, getSurfaceFormString, METH_NOARGS),
            DECLARE_METHOD(t_Token, setPositionIncrement, METH_O),
            DECLARE_METHOD(t_Token, setPositionLength, METH_O),
            { NULL, NULL, 0, NULL }
          };

          static PyType_Slot PY_TYPE_SLOTS(Token)[] = {
            { Py_tp_methods, t_Token__methods_ },
            { Py_tp_init, (void *) t_Token_init_ },
            { Py_tp_getset, t_Token__fields_ },
            { 0, NULL }
          };

          static PyType_Def *PY_TYPE_BASES(Token)[] = {
            &PY_TYPE_DEF(::java::lang::Object),
            NULL
          };

          DEFINE_TYPE(Token, t_Token, Token);

          void t_Token::install(PyObject *module)
          {
            installType(&PY_TYPE(Token), &PY_TYPE_DEF(Token), module, "Token", 0);
          }

          void t_Token::initialize(PyObject *module)
          {
            PyObject_SetAttrString((PyObject *) PY_TYPE(Token), "class_", make_descriptor(Token::initializeClass, 1));
            PyObject_SetAttrString((PyObject *) PY_TYPE(Token), "wrapfn_", make_descriptor(t_Token::wrap_jobject));
            PyObject_SetAttrString((PyObject *) PY_TYPE(Token), "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_Token_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, Token::initializeClass, 1)))
              return NULL;
            return t_Token::wrap_Object(Token(((t_Token *) arg)->object.this$));
          }
          static PyObject *t_Token_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, Token::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_Token_init_(t_Token *self, PyObject *args, PyObject *kwds)
          {
            JArray< jchar > a0((jobject) NULL);
            jint a1;
            jint a2;
            jint a3;
            jint a4;
            Token object((jobject) NULL);

            if (!parseArgs(args, "[CIIII", &a0, &a1, &a2, &a3, &a4))
            {
              INT_CALL(object = Token(a0, a1, a2, a3, a4));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_Token_getEndOffset(t_Token *self)
          {
            jint result;
            OBJ_CALL(result = self->object.getEndOffset());
            return PyLong_FromLong((long) result);
          }

          static PyObject *t_Token_getLeftPOS(t_Token *self)
          {
            ::org::apache::lucene::analysis::ko::POS$Tag result((jobject) NULL);
            OBJ_CALL(result = self->object.getLeftPOS());
            return ::org::apache::lucene::analysis::ko::t_POS$Tag::wrap_Object(result);
          }

          static PyObject *t_Token_getLength(t_Token *self)
          {
            jint result;
            OBJ_CALL(result = self->object.getLength());
            return PyLong_FromLong((long) result);
          }

          static PyObject *t_Token_getMorphemes(t_Token *self)
          {
            JArray< ::org::apache::lucene::analysis::ko::dict::Dictionary$Morpheme > result((jobject) NULL);
            OBJ_CALL(result = self->object.getMorphemes());
            return JArray<jobject>(result.this$).wrap(::org::apache::lucene::analysis::ko::dict::t_Dictionary$Morpheme::wrap_jobject);
          }

          static PyObject *t_Token_getOffset(t_Token *self)
          {
            jint result;
            OBJ_CALL(result = self->object.getOffset());
            return PyLong_FromLong((long) result);
          }

          static PyObject *t_Token_getPOSType(t_Token *self)
          {
            ::org::apache::lucene::analysis::ko::POS$Type result((jobject) NULL);
            OBJ_CALL(result = self->object.getPOSType());
            return ::org::apache::lucene::analysis::ko::t_POS$Type::wrap_Object(result);
          }

          static PyObject *t_Token_getPositionIncrement(t_Token *self)
          {
            jint result;
            OBJ_CALL(result = self->object.getPositionIncrement());
            return PyLong_FromLong((long) result);
          }

          static PyObject *t_Token_getPositionLength(t_Token *self)
          {
            jint result;
            OBJ_CALL(result = self->object.getPositionLength());
            return PyLong_FromLong((long) result);
          }

          static PyObject *t_Token_getReading(t_Token *self)
          {
            ::java::lang::String result((jobject) NULL);
            OBJ_CALL(result = self->object.getReading());
            return j2p(result);
          }

          static PyObject *t_Token_getRightPOS(t_Token *self)
          {
            ::org::apache::lucene::analysis::ko::POS$Tag result((jobject) NULL);
            OBJ_CALL(result = self->object.getRightPOS());
            return ::org::apache::lucene::analysis::ko::t_POS$Tag::wrap_Object(result);
          }

          static PyObject *t_Token_getStartOffset(t_Token *self)
          {
            jint result;
            OBJ_CALL(result = self->object.getStartOffset());
            return PyLong_FromLong((long) result);
          }

          static PyObject *t_Token_getSurfaceForm(t_Token *self)
          {
            JArray< jchar > result((jobject) NULL);
            OBJ_CALL(result = self->object.getSurfaceForm());
            return result.wrap();
          }

          static PyObject *t_Token_getSurfaceFormString(t_Token *self)
          {
            ::java::lang::String result((jobject) NULL);
            OBJ_CALL(result = self->object.getSurfaceFormString());
            return j2p(result);
          }

          static PyObject *t_Token_setPositionIncrement(t_Token *self, PyObject *arg)
          {
            jint a0;

            if (!parseArg(arg, "I", &a0))
            {
              OBJ_CALL(self->object.setPositionIncrement(a0));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError((PyObject *) self, "setPositionIncrement", arg);
            return NULL;
          }

          static PyObject *t_Token_setPositionLength(t_Token *self, PyObject *arg)
          {
            jint a0;

            if (!parseArg(arg, "I", &a0))
            {
              OBJ_CALL(self->object.setPositionLength(a0));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError((PyObject *) self, "setPositionLength", arg);
            return NULL;
          }

          static PyObject *t_Token_get__endOffset(t_Token *self, void *data)
          {
            jint value;
            OBJ_CALL(value = self->object.getEndOffset());
            return PyLong_FromLong((long) value);
          }

          static PyObject *t_Token_get__leftPOS(t_Token *self, void *data)
          {
            ::org::apache::lucene::analysis::ko::POS$Tag value((jobject) NULL);
            OBJ_CALL(value = self->object.getLeftPOS());
            return ::org::apache::lucene::analysis::ko::t_POS$Tag::wrap_Object(value);
          }

          static PyObject *t_Token_get__length(t_Token *self, void *data)
          {
            jint value;
            OBJ_CALL(value = self->object.getLength());
            return PyLong_FromLong((long) value);
          }

          static PyObject *t_Token_get__morphemes(t_Token *self, void *data)
          {
            JArray< ::org::apache::lucene::analysis::ko::dict::Dictionary$Morpheme > value((jobject) NULL);
            OBJ_CALL(value = self->object.getMorphemes());
            return JArray<jobject>(value.this$).wrap(::org::apache::lucene::analysis::ko::dict::t_Dictionary$Morpheme::wrap_jobject);
          }

          static PyObject *t_Token_get__offset(t_Token *self, void *data)
          {
            jint value;
            OBJ_CALL(value = self->object.getOffset());
            return PyLong_FromLong((long) value);
          }

          static PyObject *t_Token_get__pOSType(t_Token *self, void *data)
          {
            ::org::apache::lucene::analysis::ko::POS$Type value((jobject) NULL);
            OBJ_CALL(value = self->object.getPOSType());
            return ::org::apache::lucene::analysis::ko::t_POS$Type::wrap_Object(value);
          }

          static PyObject *t_Token_get__positionIncrement(t_Token *self, void *data)
          {
            jint value;
            OBJ_CALL(value = self->object.getPositionIncrement());
            return PyLong_FromLong((long) value);
          }
          static int t_Token_set__positionIncrement(t_Token *self, PyObject *arg, void *data)
          {
            {
              jint value;
              if (!parseArg(arg, "I", &value))
              {
                INT_CALL(self->object.setPositionIncrement(value));
                return 0;
              }
            }
            PyErr_SetArgsError((PyObject *) self, "positionIncrement", arg);
            return -1;
          }

          static PyObject *t_Token_get__positionLength(t_Token *self, void *data)
          {
            jint value;
            OBJ_CALL(value = self->object.getPositionLength());
            return PyLong_FromLong((long) value);
          }
          static int t_Token_set__positionLength(t_Token *self, PyObject *arg, void *data)
          {
            {
              jint value;
              if (!parseArg(arg, "I", &value))
              {
                INT_CALL(self->object.setPositionLength(value));
                return 0;
              }
            }
            PyErr_SetArgsError((PyObject *) self, "positionLength", arg);
            return -1;
          }

          static PyObject *t_Token_get__reading(t_Token *self, void *data)
          {
            ::java::lang::String value((jobject) NULL);
            OBJ_CALL(value = self->object.getReading());
            return j2p(value);
          }

          static PyObject *t_Token_get__rightPOS(t_Token *self, void *data)
          {
            ::org::apache::lucene::analysis::ko::POS$Tag value((jobject) NULL);
            OBJ_CALL(value = self->object.getRightPOS());
            return ::org::apache::lucene::analysis::ko::t_POS$Tag::wrap_Object(value);
          }

          static PyObject *t_Token_get__startOffset(t_Token *self, void *data)
          {
            jint value;
            OBJ_CALL(value = self->object.getStartOffset());
            return PyLong_FromLong((long) value);
          }

          static PyObject *t_Token_get__surfaceForm(t_Token *self, void *data)
          {
            JArray< jchar > value((jobject) NULL);
            OBJ_CALL(value = self->object.getSurfaceForm());
            return value.wrap();
          }

          static PyObject *t_Token_get__surfaceFormString(t_Token *self, void *data)
          {
            ::java::lang::String value((jobject) NULL);
            OBJ_CALL(value = self->object.getSurfaceFormString());
            return j2p(value);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/ckb/SoraniNormalizer.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace ckb {

          ::java::lang::Class *SoraniNormalizer::class$ = NULL;
          jmethodID *SoraniNormalizer::mids$ = NULL;
          bool SoraniNormalizer::live$ = false;

          jclass SoraniNormalizer::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/ckb/SoraniNormalizer");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_f2cc1bce94666404] = env->getMethodID(cls, "<init>", "()V");
              mids$[mid_normalize_d4655f2a19359017] = env->getMethodID(cls, "normalize", "([CI)I");

              class$ = new ::java::lang::Class(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          SoraniNormalizer::SoraniNormalizer() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_f2cc1bce94666404)) {}

          jint SoraniNormalizer::normalize(const JArray< jchar > & a0, jint a1) const
          {
            return env->callIntMethod(this$, mids$[mid_normalize_d4655f2a19359017], a0.this$, a1);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace ckb {
          static PyObject *t_SoraniNormalizer_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_SoraniNormalizer_instance_(PyTypeObject *type, PyObject *arg);
          static int t_SoraniNormalizer_init_(t_SoraniNormalizer *self, PyObject *args, PyObject *kwds);
          static PyObject *t_SoraniNormalizer_normalize(t_SoraniNormalizer *self, PyObject *args);

          static PyMethodDef t_SoraniNormalizer__methods_[] = {
            DECLARE_METHOD(t_SoraniNormalizer, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_SoraniNormalizer, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_SoraniNormalizer, normalize, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          static PyType_Slot PY_TYPE_SLOTS(SoraniNormalizer)[] = {
            { Py_tp_methods, t_SoraniNormalizer__methods_ },
            { Py_tp_init, (void *) t_SoraniNormalizer_init_ },
            { 0, NULL }
          };

          static PyType_Def *PY_TYPE_BASES(SoraniNormalizer)[] = {
            &PY_TYPE_DEF(::java::lang::Object),
            NULL
          };

          DEFINE_TYPE(SoraniNormalizer, t_SoraniNormalizer, SoraniNormalizer);

          void t_SoraniNormalizer::install(PyObject *module)
          {
            installType(&PY_TYPE(SoraniNormalizer), &PY_TYPE_DEF(SoraniNormalizer), module, "SoraniNormalizer", 0);
          }

          void t_SoraniNormalizer::initialize(PyObject *module)
          {
            PyObject_SetAttrString((PyObject *) PY_TYPE(SoraniNormalizer), "class_", make_descriptor(SoraniNormalizer::initializeClass, 1));
            PyObject_SetAttrString((PyObject *) PY_TYPE(SoraniNormalizer), "wrapfn_", make_descriptor(t_SoraniNormalizer::wrap_jobject));
            PyObject_SetAttrString((PyObject *) PY_TYPE(SoraniNormalizer), "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_SoraniNormalizer_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, SoraniNormalizer::initializeClass, 1)))
              return NULL;
            return t_SoraniNormalizer::wrap_Object(SoraniNormalizer(((t_SoraniNormalizer *) arg)->object.this$));
          }
          static PyObject *t_SoraniNormalizer_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, SoraniNormalizer::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_SoraniNormalizer_init_(t_SoraniNormalizer *self, PyObject *args, PyObject *kwds)
          {
            SoraniNormalizer object((jobject) NULL);

            INT_CALL(object = SoraniNormalizer());
            self->object = object;

            return 0;
          }

          static PyObject *t_SoraniNormalizer_normalize(t_SoraniNormalizer *self, PyObject *args)
          {
            JArray< jchar > a0((jobject) NULL);
            jint a1;
            jint result;

            if (!parseArgs(args, "[CI", &a0, &a1))
            {
              OBJ_CALL(result = self->object.normalize(a0, a1));
              return PyLong_FromLong((long) result);
            }

            PyErr_SetArgsError((PyObject *) self, "normalize", args);
            return NULL;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/sv/SwedishLightStemmer.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace sv {

          ::java::lang::Class *SwedishLightStemmer::class$ = NULL;
          jmethodID *SwedishLightStemmer::mids$ = NULL;
          bool SwedishLightStemmer::live$ = false;

          jclass SwedishLightStemmer::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/sv/SwedishLightStemmer");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_f2cc1bce94666404] = env->getMethodID(cls, "<init>", "()V");
              mids$[mid_stem_d4655f2a19359017] = env->getMethodID(cls, "stem", "([CI)I");

              class$ = new ::java::lang::Class(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          SwedishLightStemmer::SwedishLightStemmer() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_f2cc1bce94666404)) {}

          jint SwedishLightStemmer::stem(const JArray< jchar > & a0, jint a1) const
          {
            return env->callIntMethod(this$, mids$[mid_stem_d4655f2a19359017], a0.this$, a1);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace sv {
          static PyObject *t_SwedishLightStemmer_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_SwedishLightStemmer_instance_(PyTypeObject *type, PyObject *arg);
          static int t_SwedishLightStemmer_init_(t_SwedishLightStemmer *self, PyObject *args, PyObject *kwds);
          static PyObject *t_SwedishLightStemmer_stem(t_SwedishLightStemmer *self, PyObject *args);

          static PyMethodDef t_SwedishLightStemmer__methods_[] = {
            DECLARE_METHOD(t_SwedishLightStemmer, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_SwedishLightStemmer, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_SwedishLightStemmer, stem, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          static PyType_Slot PY_TYPE_SLOTS(SwedishLightStemmer)[] = {
            { Py_tp_methods, t_SwedishLightStemmer__methods_ },
            { Py_tp_init, (void *) t_SwedishLightStemmer_init_ },
            { 0, NULL }
          };

          static PyType_Def *PY_TYPE_BASES(SwedishLightStemmer)[] = {
            &PY_TYPE_DEF(::java::lang::Object),
            NULL
          };

          DEFINE_TYPE(SwedishLightStemmer, t_SwedishLightStemmer, SwedishLightStemmer);

          void t_SwedishLightStemmer::install(PyObject *module)
          {
            installType(&PY_TYPE(SwedishLightStemmer), &PY_TYPE_DEF(SwedishLightStemmer), module, "SwedishLightStemmer", 0);
          }

          void t_SwedishLightStemmer::initialize(PyObject *module)
          {
            PyObject_SetAttrString((PyObject *) PY_TYPE(SwedishLightStemmer), "class_", make_descriptor(SwedishLightStemmer::initializeClass, 1));
            PyObject_SetAttrString((PyObject *) PY_TYPE(SwedishLightStemmer), "wrapfn_", make_descriptor(t_SwedishLightStemmer::wrap_jobject));
            PyObject_SetAttrString((PyObject *) PY_TYPE(SwedishLightStemmer), "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_SwedishLightStemmer_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, SwedishLightStemmer::initializeClass, 1)))
              return NULL;
            return t_SwedishLightStemmer::wrap_Object(SwedishLightStemmer(((t_SwedishLightStemmer *) arg)->object.this$));
          }
          static PyObject *t_SwedishLightStemmer_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, SwedishLightStemmer::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_SwedishLightStemmer_init_(t_SwedishLightStemmer *self, PyObject *args, PyObject *kwds)
          {
            SwedishLightStemmer object((jobject) NULL);

            INT_CALL(object = SwedishLightStemmer());
            self->object = object;

            return 0;
          }

          static PyObject *t_SwedishLightStemmer_stem(t_SwedishLightStemmer *self, PyObject *args)
          {
            JArray< jchar > a0((jobject) NULL);
            jint a1;
            jint result;

            if (!parseArgs(args, "[CI", &a0, &a1))
            {
              OBJ_CALL(result = self->object.stem(a0, a1));
              return PyLong_FromLong((long) result);
            }

            PyErr_SetArgsError((PyObject *) self, "stem", args);
            return NULL;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queryparser/ext/ExtendableQueryParser.h"
#include "java/lang/String.h"
#include "org/apache/lucene/analysis/Analyzer.h"
#include "org/apache/lucene/queryparser/ext/Extensions.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace ext {

          ::java::lang::Class *ExtendableQueryParser::class$ = NULL;
          jmethodID *ExtendableQueryParser::mids$ = NULL;
          bool ExtendableQueryParser::live$ = false;

          jclass ExtendableQueryParser::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/queryparser/ext/ExtendableQueryParser");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_32cb72731c50a536] = env->getMethodID(cls, "<init>", "(Ljava/lang/String;Lorg/apache/lucene/analysis/Analyzer;)V");
              mids$[mid_init$_3ba24dd07c8d506c] = env->getMethodID(cls, "<init>", "(Ljava/lang/String;Lorg/apache/lucene/analysis/Analyzer;Lorg/apache/lucene/queryparser/ext/Extensions;)V");
              mids$[mid_getExtensionFieldDelimiter_8eea1dd85c3239c3] = env->getMethodID(cls, "getExtensionFieldDelimiter", "()C");
              mids$[mid_getFieldQuery_da5a988725940811] = env->getMethodID(cls, "getFieldQuery", "(Ljava/lang/String;Ljava/lang/String;Z)Lorg/apache/lucene/search/Query;");

              class$ = new ::java::lang::Class(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          ExtendableQueryParser::ExtendableQueryParser(const ::java::lang::String & a0, const ::org::apache::lucene::analysis::Analyzer & a1) : ::org::apache::lucene::queryparser::classic::QueryParser(env->newObject(initializeClass, &mids$, mid_init$_32cb72731c50a536, a0.this$, a1.this$)) {}

          ExtendableQueryParser::ExtendableQueryParser(const ::java::lang::String & a0, const ::org::apache::lucene::analysis::Analyzer & a1, const ::org::apache::lucene::queryparser::ext::Extensions & a2) : ::org::apache::lucene::queryparser::classic::QueryParser(env->newObject(initializeClass, &mids$, mid_init$_3ba24dd07c8d506c, a0.this$, a1.this$, a2.this$)) {}

          jchar ExtendableQueryParser::getExtensionFieldDelimiter() const
          {
            return env->callCharMethod(this$, mids$[mid_getExtensionFieldDelimiter_8eea1dd85c3239c3]);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace ext {
          static PyObject *t_ExtendableQueryParser_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_ExtendableQueryParser_instance_(PyTypeObject *type, PyObject *arg);
          static int t_ExtendableQueryParser_init_(t_ExtendableQueryParser *self, PyObject *args, PyObject *kwds);
          static PyObject *t_ExtendableQueryParser_getExtensionFieldDelimiter(t_ExtendableQueryParser *self);
          static PyObject *t_ExtendableQueryParser_get__extensionFieldDelimiter(t_ExtendableQueryParser *self, void *data);
          static PyGetSetDef t_ExtendableQueryParser__fields_[] = {
            DECLARE_GET_FIELD(t_ExtendableQueryParser, extensionFieldDelimiter),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_ExtendableQueryParser__methods_[] = {
            DECLARE_METHOD(t_ExtendableQueryParser, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_ExtendableQueryParser, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_ExtendableQueryParser, getExtensionFieldDelimiter, METH_NOARGS),
            { NULL, NULL, 0, NULL }
          };

          static PyType_Slot PY_TYPE_SLOTS(ExtendableQueryParser)[] = {
            { Py_tp_methods, t_ExtendableQueryParser__methods_ },
            { Py_tp_init, (void *) t_ExtendableQueryParser_init_ },
            { Py_tp_getset, t_ExtendableQueryParser__fields_ },
            { 0, NULL }
          };

          static PyType_Def *PY_TYPE_BASES(ExtendableQueryParser)[] = {
            &PY_TYPE_DEF(::org::apache::lucene::queryparser::classic::QueryParser),
            NULL
          };

          DEFINE_TYPE(ExtendableQueryParser, t_ExtendableQueryParser, ExtendableQueryParser);

          void t_ExtendableQueryParser::install(PyObject *module)
          {
            installType(&PY_TYPE(ExtendableQueryParser), &PY_TYPE_DEF(ExtendableQueryParser), module, "ExtendableQueryParser", 0);
          }

          void t_ExtendableQueryParser::initialize(PyObject *module)
          {
            PyObject_SetAttrString((PyObject *) PY_TYPE(ExtendableQueryParser), "class_", make_descriptor(ExtendableQueryParser::initializeClass, 1));
            PyObject_SetAttrString((PyObject *) PY_TYPE(ExtendableQueryParser), "wrapfn_", make_descriptor(t_ExtendableQueryParser::wrap_jobject));
            PyObject_SetAttrString((PyObject *) PY_TYPE(ExtendableQueryParser), "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_ExtendableQueryParser_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, ExtendableQueryParser::initializeClass, 1)))
              return NULL;
            return t_ExtendableQueryParser::wrap_Object(ExtendableQueryParser(((t_ExtendableQueryParser *) arg)->object.this$));
          }
          static PyObject *t_ExtendableQueryParser_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, ExtendableQueryParser::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_ExtendableQueryParser_init_(t_ExtendableQueryParser *self, PyObject *args, PyObject *kwds)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 2:
              {
                ::java::lang::String a0((jobject) NULL);
                ::org::apache::lucene::analysis::Analyzer a1((jobject) NULL);
                ExtendableQueryParser object((jobject) NULL);

                if (!parseArgs(args, "sk", ::org::apache::lucene::analysis::Analyzer::initializeClass, &a0, &a1))
                {
                  INT_CALL(object = ExtendableQueryParser(a0, a1));
                  self->object = object;
                  break;
                }
              }
              goto err;
             case 3:
              {
                ::java::lang::String a0((jobject) NULL);
                ::org::apache::lucene::analysis::Analyzer a1((jobject) NULL);
                ::org::apache::lucene::queryparser::ext::Extensions a2((jobject) NULL);
                ExtendableQueryParser object((jobject) NULL);

                if (!parseArgs(args, "skk", ::org::apache::lucene::analysis::Analyzer::initializeClass, ::org::apache::lucene::queryparser::ext::Extensions::initializeClass, &a0, &a1, &a2))
                {
                  INT_CALL(object = ExtendableQueryParser(a0, a1, a2));
                  self->object = object;
                  break;
                }
              }
             default:
             err:
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_ExtendableQueryParser_getExtensionFieldDelimiter(t_ExtendableQueryParser *self)
          {
            jchar result;
            OBJ_CALL(result = self->object.getExtensionFieldDelimiter());
            return c2p(result);
          }

          static PyObject *t_ExtendableQueryParser_get__extensionFieldDelimiter(t_ExtendableQueryParser *self, void *data)
          {
            jchar value;
            OBJ_CALL(value = self->object.getExtensionFieldDelimiter());
            return c2p(value);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/codecs/lucene50/Lucene50PostingsFormat.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/index/SegmentReadState.h"
#include "org/apache/lucene/index/SegmentWriteState.h"
#include "java/lang/String.h"
#include "org/apache/lucene/codecs/FieldsConsumer.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/codecs/FieldsProducer.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace codecs {
        namespace lucene50 {

          ::java::lang::Class *Lucene50PostingsFormat::class$ = NULL;
          jmethodID *Lucene50PostingsFormat::mids$ = NULL;
          bool Lucene50PostingsFormat::live$ = false;
          jint Lucene50PostingsFormat::BLOCK_SIZE = (jint) 0;
          ::java::lang::String *Lucene50PostingsFormat::DOC_EXTENSION = NULL;
          ::java::lang::String *Lucene50PostingsFormat::PAY_EXTENSION = NULL;
          ::java::lang::String *Lucene50PostingsFormat::POS_EXTENSION = NULL;

          jclass Lucene50PostingsFormat::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/codecs/lucene50/Lucene50PostingsFormat");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_f2cc1bce94666404] = env->getMethodID(cls, "<init>", "()V");
              mids$[mid_fieldsConsumer_876dc181a1f61814] = env->getMethodID(cls, "fieldsConsumer", "(Lorg/apache/lucene/index/SegmentWriteState;)Lorg/apache/lucene/codecs/FieldsConsumer;");
              mids$[mid_fieldsProducer_c39bdf540a53fab9] = env->getMethodID(cls, "fieldsProducer", "(Lorg/apache/lucene/index/SegmentReadState;)Lorg/apache/lucene/codecs/FieldsProducer;");
              mids$[mid_toString_db9b55ba01e03e4b] = env->getMethodID(cls, "toString", "()Ljava/lang/String;");

              class$ = new ::java::lang::Class(cls);
              cls = (jclass) class$->this$;

              BLOCK_SIZE = env->getStaticIntField(cls, "BLOCK_SIZE");
              DOC_EXTENSION = new ::java::lang::String(env->getStaticObjectField(cls, "DOC_EXTENSION", "Ljava/lang/String;"));
              PAY_EXTENSION = new ::java::lang::String(env->getStaticObjectField(cls, "PAY_EXTENSION", "Ljava/lang/String;"));
              POS_EXTENSION = new ::java::lang::String(env->getStaticObjectField(cls, "POS_EXTENSION", "Ljava/lang/String;"));
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          Lucene50PostingsFormat::Lucene50PostingsFormat() : ::org::apache::lucene::codecs::PostingsFormat(env->newObject(initializeClass, &mids$, mid_init$_f2cc1bce94666404)) {}

          ::org::apache::lucene::codecs::FieldsConsumer Lucene50PostingsFormat::fieldsConsumer(const ::org::apache::lucene::index::SegmentWriteState & a0) const
          {
            return ::org::apache::lucene::codecs::FieldsConsumer(env->callObjectMethod(this$, mids$[mid_fieldsConsumer_876dc181a1f61814], a0.this$));
          }

          ::org::apache::lucene::codecs::FieldsProducer Lucene50PostingsFormat::fieldsProducer(const ::org::apache::lucene::index::SegmentReadState & a0) const
          {
            return ::org::apache::lucene::codecs::FieldsProducer(env->callObjectMethod(this$, mids$[mid_fieldsProducer_c39bdf540a53fab9], a0.this$));
          }

          ::java::lang::String Lucene50PostingsFormat::toString() const
          {
            return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_db9b55ba01e03e4b]));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"
#include "org/apache/lucene/codecs/lucene50/Lucene50PostingsFormat$IntBlockTermState.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace codecs {
        namespace lucene50 {
          static PyObject *t_Lucene50PostingsFormat_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_Lucene50PostingsFormat_instance_(PyTypeObject *type, PyObject *arg);
          static int t_Lucene50PostingsFormat_init_(t_Lucene50PostingsFormat *self, PyObject *args, PyObject *kwds);
          static PyObject *t_Lucene50PostingsFormat_fieldsConsumer(t_Lucene50PostingsFormat *self, PyObject *args);
          static PyObject *t_Lucene50PostingsFormat_fieldsProducer(t_Lucene50PostingsFormat *self, PyObject *args);
          static PyObject *t_Lucene50PostingsFormat_toString(t_Lucene50PostingsFormat *self, PyObject *args);

          static PyMethodDef t_Lucene50PostingsFormat__methods_[] = {
            DECLARE_METHOD(t_Lucene50PostingsFormat, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_Lucene50PostingsFormat, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_Lucene50PostingsFormat, fieldsConsumer, METH_VARARGS),
            DECLARE_METHOD(t_Lucene50PostingsFormat, fieldsProducer, METH_VARARGS),
            DECLARE_METHOD(t_Lucene50PostingsFormat, toString, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          static PyType_Slot PY_TYPE_SLOTS(Lucene50PostingsFormat)[] = {
            { Py_tp_methods, t_Lucene50PostingsFormat__methods_ },
            { Py_tp_init, (void *) t_Lucene50PostingsFormat_init_ },
            { 0, NULL }
          };

          static PyType_Def *PY_TYPE_BASES(Lucene50PostingsFormat)[] = {
            &PY_TYPE_DEF(::org::apache::lucene::codecs::PostingsFormat),
            NULL
          };

          DEFINE_TYPE(Lucene50PostingsFormat, t_Lucene50PostingsFormat, Lucene50PostingsFormat);

          void t_Lucene50PostingsFormat::install(PyObject *module)
          {
            installType(&PY_TYPE(Lucene50PostingsFormat), &PY_TYPE_DEF(Lucene50PostingsFormat), module, "Lucene50PostingsFormat", 0);
            PyObject_SetAttrString((PyObject *) PY_TYPE(Lucene50PostingsFormat), "IntBlockTermState", make_descriptor(&PY_TYPE_DEF(Lucene50PostingsFormat$IntBlockTermState)));
          }

          void t_Lucene50PostingsFormat::initialize(PyObject *module)
          {
            PyObject_SetAttrString((PyObject *) PY_TYPE(Lucene50PostingsFormat), "class_", make_descriptor(Lucene50PostingsFormat::initializeClass, 1));
            PyObject_SetAttrString((PyObject *) PY_TYPE(Lucene50PostingsFormat), "wrapfn_", make_descriptor(t_Lucene50PostingsFormat::wrap_jobject));
            PyObject_SetAttrString((PyObject *) PY_TYPE(Lucene50PostingsFormat), "boxfn_", make_descriptor(boxObject));
            env->getClass(Lucene50PostingsFormat::initializeClass);
            PyObject_SetAttrString((PyObject *) PY_TYPE(Lucene50PostingsFormat), "BLOCK_SIZE", make_descriptor(Lucene50PostingsFormat::BLOCK_SIZE));
            PyObject_SetAttrString((PyObject *) PY_TYPE(Lucene50PostingsFormat), "DOC_EXTENSION", make_descriptor(j2p(*Lucene50PostingsFormat::DOC_EXTENSION)));
            PyObject_SetAttrString((PyObject *) PY_TYPE(Lucene50PostingsFormat), "PAY_EXTENSION", make_descriptor(j2p(*Lucene50PostingsFormat::PAY_EXTENSION)));
            PyObject_SetAttrString((PyObject *) PY_TYPE(Lucene50PostingsFormat), "POS_EXTENSION", make_descriptor(j2p(*Lucene50PostingsFormat::POS_EXTENSION)));
          }

          static PyObject *t_Lucene50PostingsFormat_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, Lucene50PostingsFormat::initializeClass, 1)))
              return NULL;
            return t_Lucene50PostingsFormat::wrap_Object(Lucene50PostingsFormat(((t_Lucene50PostingsFormat *) arg)->object.this$));
          }
          static PyObject *t_Lucene50PostingsFormat_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, Lucene50PostingsFormat::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_Lucene50PostingsFormat_init_(t_Lucene50PostingsFormat *self, PyObject *args, PyObject *kwds)
          {
            Lucene50PostingsFormat object((jobject) NULL);

            INT_CALL(object = Lucene50PostingsFormat());
            self->object = object;

            return 0;
          }

          static PyObject *t_Lucene50PostingsFormat_fieldsConsumer(t_Lucene50PostingsFormat *self, PyObject *args)
          {
            ::org::apache::lucene::index::SegmentWriteState a0((jobject) NULL);
            ::org::apache::lucene::codecs::FieldsConsumer result((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::index::SegmentWriteState::initializeClass, &a0))
            {
              OBJ_CALL(result = self->object.fieldsConsumer(a0));
              return ::org::apache::lucene::codecs::t_FieldsConsumer::wrap_Object(result);
            }

            return callSuper(PY_TYPE(Lucene50PostingsFormat), (PyObject *) self, "fieldsConsumer", args, 2);
          }

          static PyObject *t_Lucene50PostingsFormat_fieldsProducer(t_Lucene50PostingsFormat *self, PyObject *args)
          {
            ::org::apache::lucene::index::SegmentReadState a0((jobject) NULL);
            ::org::apache::lucene::codecs::FieldsProducer result((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::index::SegmentReadState::initializeClass, &a0))
            {
              OBJ_CALL(result = self->object.fieldsProducer(a0));
              return ::org::apache::lucene::codecs::t_FieldsProducer::wrap_Object(result);
            }

            return callSuper(PY_TYPE(Lucene50PostingsFormat), (PyObject *) self, "fieldsProducer", args, 2);
          }

          static PyObject *t_Lucene50PostingsFormat_toString(t_Lucene50PostingsFormat *self, PyObject *args)
          {
            ::java::lang::String result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.toString());
              return j2p(result);
            }

            return callSuper(PY_TYPE(Lucene50PostingsFormat), (PyObject *) self, "toString", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/tokenattributes/BytesTermAttributeImpl.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/analysis/tokenattributes/TermToBytesRefAttribute.h"
#include "java/lang/Object.h"
#include "org/apache/lucene/util/BytesRef.h"
#include "org/apache/lucene/util/AttributeReflector.h"
#include "org/apache/lucene/analysis/tokenattributes/BytesTermAttribute.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace tokenattributes {

          ::java::lang::Class *BytesTermAttributeImpl::class$ = NULL;
          jmethodID *BytesTermAttributeImpl::mids$ = NULL;
          bool BytesTermAttributeImpl::live$ = false;

          jclass BytesTermAttributeImpl::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/tokenattributes/BytesTermAttributeImpl");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_f2cc1bce94666404] = env->getMethodID(cls, "<init>", "()V");
              mids$[mid_clear_f2cc1bce94666404] = env->getMethodID(cls, "clear", "()V");
              mids$[mid_clone_3e3d10fb1bca89d9] = env->getMethodID(cls, "clone", "()Lorg/apache/lucene/util/AttributeImpl;");
              mids$[mid_copyTo_26346c38ebc9c090] = env->getMethodID(cls, "copyTo", "(Lorg/apache/lucene/util/AttributeImpl;)V");
              mids$[mid_equals_8b72f2dcdde6fd1d] = env->getMethodID(cls, "equals", "(Ljava/lang/Object;)Z");
              mids$[mid_getBytesRef_7af2ea2e37ce82b8] = env->getMethodID(cls, "getBytesRef", "()Lorg/apache/lucene/util/BytesRef;");
              mids$[mid_hashCode_9972fcc56b44e79d] = env->getMethodID(cls, "hashCode", "()I");
              mids$[mid_reflectWith_b880c72ee67200af] = env->getMethodID(cls, "reflectWith", "(Lorg/apache/lucene/util/AttributeReflector;)V");
              mids$[mid_setBytesRef_0bdfd2603b7490a8] = env->getMethodID(cls, "setBytesRef", "(Lorg/apache/lucene/util/BytesRef;)V");

              class$ = new ::java::lang::Class(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          BytesTermAttributeImpl::BytesTermAttributeImpl() : ::org::apache::lucene::util::AttributeImpl(env->newObject(initializeClass, &mids$, mid_init$_f2cc1bce94666404)) {}

          void BytesTermAttributeImpl::clear() const
          {
            env->callVoidMethod(this$, mids$[mid_clear_f2cc1bce94666404]);
          }

          ::org::apache::lucene::util::AttributeImpl BytesTermAttributeImpl::clone() const
          {
            return ::org::apache::lucene::util::AttributeImpl(env->callObjectMethod(this$, mids$[mid_clone_3e3d10fb1bca89d9]));
          }

          void BytesTermAttributeImpl::copyTo(const ::org::apache::lucene::util::AttributeImpl & a0) const
          {
            env->callVoidMethod(this$, mids$[mid_copyTo_26346c38ebc9c090], a0.this$);
          }

          jboolean BytesTermAttributeImpl::equals(const ::java::lang::Object & a0) const
          {
            return env->callBooleanMethod(this$, mids$[mid_equals_8b72f2dcdde6fd1d], a0.this$);
          }

          ::org::apache::lucene::util::BytesRef BytesTermAttributeImpl::getBytesRef() const
          {
            return ::org::apache::lucene::util::BytesRef(env->callObjectMethod(this$, mids$[mid_getBytesRef_7af2ea2e37ce82b8]));
          }

          jint BytesTermAttributeImpl::hashCode() const
          {
            return env->callIntMethod(this$, mids$[mid_hashCode_9972fcc56b44e79d]);
          }

          void BytesTermAttributeImpl::reflectWith(const ::org::apache::lucene::util::AttributeReflector & a0) const
          {
            env->callVoidMethod(this$, mids$[mid_reflectWith_b880c72ee67200af], a0.this$);
          }

          void BytesTermAttributeImpl::setBytesRef(const ::org::apache::lucene::util::BytesRef & a0) const
          {
            env->callVoidMethod(this$, mids$[mid_setBytesRef_0bdfd2603b7490a8], a0.this$);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace tokenattributes {
          static PyObject *t_BytesTermAttributeImpl_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_BytesTermAttributeImpl_instance_(PyTypeObject *type, PyObject *arg);
          static int t_BytesTermAttributeImpl_init_(t_BytesTermAttributeImpl *self, PyObject *args, PyObject *kwds);
          static PyObject *t_BytesTermAttributeImpl_clear(t_BytesTermAttributeImpl *self, PyObject *args);
          static PyObject *t_BytesTermAttributeImpl_clone(t_BytesTermAttributeImpl *self, PyObject *args);
          static PyObject *t_BytesTermAttributeImpl_copyTo(t_BytesTermAttributeImpl *self, PyObject *args);
          static PyObject *t_BytesTermAttributeImpl_equals(t_BytesTermAttributeImpl *self, PyObject *args);
          static PyObject *t_BytesTermAttributeImpl_getBytesRef(t_BytesTermAttributeImpl *self);
          static PyObject *t_BytesTermAttributeImpl_hashCode(t_BytesTermAttributeImpl *self, PyObject *args);
          static PyObject *t_BytesTermAttributeImpl_reflectWith(t_BytesTermAttributeImpl *self, PyObject *args);
          static PyObject *t_BytesTermAttributeImpl_setBytesRef(t_BytesTermAttributeImpl *self, PyObject *arg);
          static PyObject *t_BytesTermAttributeImpl_get__bytesRef(t_BytesTermAttributeImpl *self, void *data);
          static int t_BytesTermAttributeImpl_set__bytesRef(t_BytesTermAttributeImpl *self, PyObject *arg, void *data);
          static PyGetSetDef t_BytesTermAttributeImpl__fields_[] = {
            DECLARE_GETSET_FIELD(t_BytesTermAttributeImpl, bytesRef),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_BytesTermAttributeImpl__methods_[] = {
            DECLARE_METHOD(t_BytesTermAttributeImpl, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_BytesTermAttributeImpl, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_BytesTermAttributeImpl, clear, METH_VARARGS),
            DECLARE_METHOD(t_BytesTermAttributeImpl, clone, METH_VARARGS),
            DECLARE_METHOD(t_BytesTermAttributeImpl, copyTo, METH_VARARGS),
            DECLARE_METHOD(t_BytesTermAttributeImpl, equals, METH_VARARGS),
            DECLARE_METHOD(t_BytesTermAttributeImpl, getBytesRef, METH_NOARGS),
            DECLARE_METHOD(t_BytesTermAttributeImpl, hashCode, METH_VARARGS),
            DECLARE_METHOD(t_BytesTermAttributeImpl, reflectWith, METH_VARARGS),
            DECLARE_METHOD(t_BytesTermAttributeImpl, setBytesRef, METH_O),
            { NULL, NULL, 0, NULL }
          };

          static PyType_Slot PY_TYPE_SLOTS(BytesTermAttributeImpl)[] = {
            { Py_tp_methods, t_BytesTermAttributeImpl__methods_ },
            { Py_tp_init, (void *) t_BytesTermAttributeImpl_init_ },
            { Py_tp_getset, t_BytesTermAttributeImpl__fields_ },
            { 0, NULL }
          };

          static PyType_Def *PY_TYPE_BASES(BytesTermAttributeImpl)[] = {
            &PY_TYPE_DEF(::org::apache::lucene::util::AttributeImpl),
            NULL
          };

          DEFINE_TYPE(BytesTermAttributeImpl, t_BytesTermAttributeImpl, BytesTermAttributeImpl);

          void t_BytesTermAttributeImpl::install(PyObject *module)
          {
            installType(&PY_TYPE(BytesTermAttributeImpl), &PY_TYPE_DEF(BytesTermAttributeImpl), module, "BytesTermAttributeImpl", 0);
          }

          void t_BytesTermAttributeImpl::initialize(PyObject *module)
          {
            PyObject_SetAttrString((PyObject *) PY_TYPE(BytesTermAttributeImpl), "class_", make_descriptor(BytesTermAttributeImpl::initializeClass, 1));
            PyObject_SetAttrString((PyObject *) PY_TYPE(BytesTermAttributeImpl), "wrapfn_", make_descriptor(t_BytesTermAttributeImpl::wrap_jobject));
            PyObject_SetAttrString((PyObject *) PY_TYPE(BytesTermAttributeImpl), "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_BytesTermAttributeImpl_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, BytesTermAttributeImpl::initializeClass, 1)))
              return NULL;
            return t_BytesTermAttributeImpl::wrap_Object(BytesTermAttributeImpl(((t_BytesTermAttributeImpl *) arg)->object.this$));
          }
          static PyObject *t_BytesTermAttributeImpl_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, BytesTermAttributeImpl::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_BytesTermAttributeImpl_init_(t_BytesTermAttributeImpl *self, PyObject *args, PyObject *kwds)
          {
            BytesTermAttributeImpl object((jobject) NULL);

            INT_CALL(object = BytesTermAttributeImpl());
            self->object = object;

            return 0;
          }

          static PyObject *t_BytesTermAttributeImpl_clear(t_BytesTermAttributeImpl *self, PyObject *args)
          {

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(self->object.clear());
              Py_RETURN_NONE;
            }

            return callSuper(PY_TYPE(BytesTermAttributeImpl), (PyObject *) self, "clear", args, 2);
          }

          static PyObject *t_BytesTermAttributeImpl_clone(t_BytesTermAttributeImpl *self, PyObject *args)
          {
            ::org::apache::lucene::util::AttributeImpl result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.clone());
              return ::org::apache::lucene::util::t_AttributeImpl::wrap_Object(result);
            }

            return callSuper(PY_TYPE(BytesTermAttributeImpl), (PyObject *) self, "clone", args, 2);
          }

          static PyObject *t_BytesTermAttributeImpl_copyTo(t_BytesTermAttributeImpl *self, PyObject *args)
          {
            ::org::apache::lucene::util::AttributeImpl a0((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::util::AttributeImpl::initializeClass, &a0))
            {
              OBJ_CALL(self->object.copyTo(a0));
              Py_RETURN_NONE;
            }

            return callSuper(PY_TYPE(BytesTermAttributeImpl), (PyObject *) self, "copyTo", args, 2);
          }

          static PyObject *t_BytesTermAttributeImpl_equals(t_BytesTermAttributeImpl *self, PyObject *args)
          {
            ::java::lang::Object a0((jobject) NULL);
            jboolean result;

            if (!parseArgs(args, "o", &a0))
            {
              OBJ_CALL(result = self->object.equals(a0));
              Py_RETURN_BOOL(result);
            }

            return callSuper(PY_TYPE(BytesTermAttributeImpl), (PyObject *) self, "equals", args, 2);
          }

          static PyObject *t_BytesTermAttributeImpl_getBytesRef(t_BytesTermAttributeImpl *self)
          {
            ::org::apache::lucene::util::BytesRef result((jobject) NULL);
            OBJ_CALL(result = self->object.getBytesRef());
            return ::org::apache::lucene::util::t_BytesRef::wrap_Object(result);
          }

          static PyObject *t_BytesTermAttributeImpl_hashCode(t_BytesTermAttributeImpl *self, PyObject *args)
          {
            jint result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.hashCode());
              return PyLong_FromLong((long) result);
            }

            return callSuper(PY_TYPE(BytesTermAttributeImpl), (PyObject *) self, "hashCode", args, 2);
          }

          static PyObject *t_BytesTermAttributeImpl_reflectWith(t_BytesTermAttributeImpl *self, PyObject *args)
          {
            ::org::apache::lucene::util::AttributeReflector a0((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::util::AttributeReflector::initializeClass, &a0))
            {
              OBJ_CALL(self->object.reflectWith(a0));
              Py_RETURN_NONE;
            }

            return callSuper(PY_TYPE(BytesTermAttributeImpl), (PyObject *) self, "reflectWith", args, 2);
          }

          static PyObject *t_BytesTermAttributeImpl_setBytesRef(t_BytesTermAttributeImpl *self, PyObject *arg)
          {
            ::org::apache::lucene::util::BytesRef a0((jobject) NULL);

            if (!parseArg(arg, "k", ::org::apache::lucene::util::BytesRef::initializeClass, &a0))
            {
              OBJ_CALL(self->object.setBytesRef(a0));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError((PyObject *) self, "setBytesRef", arg);
            return NULL;
          }

          static PyObject *t_BytesTermAttributeImpl_get__bytesRef(t_BytesTermAttributeImpl *self, void *data)
          {
            ::org::apache::lucene::util::BytesRef value((jobject) NULL);
            OBJ_CALL(value = self->object.getBytesRef());
            return ::org::apache::lucene::util::t_BytesRef::wrap_Object(value);
          }
          static int t_BytesTermAttributeImpl_set__bytesRef(t_BytesTermAttributeImpl *self, PyObject *arg, void *data)
          {
            {
              ::org::apache::lucene::util::BytesRef value((jobject) NULL);
              if (!parseArg(arg, "k", ::org::apache::lucene::util::BytesRef::initializeClass, &value))
              {
                INT_CALL(self->object.setBytesRef(value));
                return 0;
              }
            }
            PyErr_SetArgsError((PyObject *) self, "bytesRef", arg);
            return -1;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/codecs/uniformsplit/UniformSplitTermsReader.h"
#include "org/apache/lucene/index/Terms.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/index/SegmentReadState.h"
#include "org/apache/lucene/codecs/uniformsplit/BlockDecoder.h"
#include "java/lang/String.h"
#include "java/util/Iterator.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/codecs/PostingsReaderBase.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace codecs {
        namespace uniformsplit {

          ::java::lang::Class *UniformSplitTermsReader::class$ = NULL;
          jmethodID *UniformSplitTermsReader::mids$ = NULL;
          bool UniformSplitTermsReader::live$ = false;

          jclass UniformSplitTermsReader::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/codecs/uniformsplit/UniformSplitTermsReader");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_72f63d35d3099b63] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/codecs/PostingsReaderBase;Lorg/apache/lucene/index/SegmentReadState;Lorg/apache/lucene/codecs/uniformsplit/BlockDecoder;Z)V");
              mids$[mid_checkIntegrity_f2cc1bce94666404] = env->getMethodID(cls, "checkIntegrity", "()V");
              mids$[mid_close_f2cc1bce94666404] = env->getMethodID(cls, "close", "()V");
              mids$[mid_iterator_233a192dadb0917d] = env->getMethodID(cls, "iterator", "()Ljava/util/Iterator;");
              mids$[mid_ramBytesUsed_2e5ae9edcb9b072f] = env->getMethodID(cls, "ramBytesUsed", "()J");
              mids$[mid_size_9972fcc56b44e79d] = env->getMethodID(cls, "size", "()I");
              mids$[mid_terms_3976802ad88273cd] = env->getMethodID(cls, "terms", "(Ljava/lang/String;)Lorg/apache/lucene/index/Terms;");
              mids$[mid_fillFieldMap_e54b52c5e61e05e0] = env->getMethodID(cls, "fillFieldMap", "(Lorg/apache/lucene/codecs/PostingsReaderBase;Lorg/apache/lucene/index/SegmentReadState;Lorg/apache/lucene/codecs/uniformsplit/BlockDecoder;ZLorg/apache/lucene/store/IndexInput;Lorg/apache/lucene/store/IndexInput;Ljava/util/Collection;Lorg/apache/lucene/index/FieldInfos;)V");
              mids$[mid_createDictionaryBrowserSupplier_03b5cc4bd6df9eea] = env->getMethodID(cls, "createDictionaryBrowserSupplier", "(Lorg/apache/lucene/index/SegmentReadState;Lorg/apache/lucene/store/IndexInput;Lorg/apache/lucene/codecs/uniformsplit/FieldMetadata;Lorg/apache/lucene/codecs/uniformsplit/BlockDecoder;Z)Lorg/apache/lucene/codecs/uniformsplit/IndexDictionary$BrowserSupplier;");
              mids$[mid_readFieldsMetadata_88f96fa89297f7a6] = env->getMethodID(cls, "readFieldsMetadata", "(Lorg/apache/lucene/store/IndexInput;Lorg/apache/lucene/codecs/uniformsplit/BlockDecoder;Lorg/apache/lucene/index/FieldInfos;Lorg/apache/lucene/codecs/uniformsplit/FieldMetadata$Serializer;I)Ljava/util/Collection;");
              mids$[mid_readEncodedFieldsMetadata_f8199330988075b8] = env->getMethodID(cls, "readEncodedFieldsMetadata", "(ILorg/apache/lucene/store/DataInput;Lorg/apache/lucene/codecs/uniformsplit/BlockDecoder;Lorg/apache/lucene/index/FieldInfos;Lorg/apache/lucene/codecs/uniformsplit/FieldMetadata$Serializer;I)Ljava/util/Collection;");
              mids$[mid_readUnencodedFieldsMetadata_d288adeb3eb3c324] = env->getMethodID(cls, "readUnencodedFieldsMetadata", "(ILorg/apache/lucene/store/DataInput;Lorg/apache/lucene/index/FieldInfos;Lorg/apache/lucene/codecs/uniformsplit/FieldMetadata$Serializer;I)Ljava/util/Collection;");
              mids$[mid_getTermsRamBytesUsed_2e5ae9edcb9b072f] = env->getMethodID(cls, "getTermsRamBytesUsed", "()J");
              mids$[mid_seekFieldsMetadata_129f336879c18407] = env->getMethodID(cls, "seekFieldsMetadata", "(Lorg/apache/lucene/store/IndexInput;)V");

              class$ = new ::java::lang::Class(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          UniformSplitTermsReader::UniformSplitTermsReader(const ::org::apache::lucene::codecs::PostingsReaderBase & a0, const ::org::apache::lucene::index::SegmentReadState & a1, const ::org::apache::lucene::codecs::uniformsplit::BlockDecoder & a2, jboolean a3) : ::org::apache::lucene::codecs::FieldsProducer(env->newObject(initializeClass, &mids$, mid_init$_72f63d35d3099b63, a0.this$, a1.this$, a2.this$, a3)) {}

          void UniformSplitTermsReader::checkIntegrity() const
          {
            env->callVoidMethod(this$, mids$[mid_checkIntegrity_f2cc1bce94666404]);
          }

          void UniformSplitTermsReader::close() const
          {
            env->callVoidMethod(this$, mids$[mid_close_f2cc1bce94666404]);
          }

          ::java::util::Iterator UniformSplitTermsReader::iterator() const
          {
            return ::java::util::Iterator(env->callObjectMethod(this$, mids$[mid_iterator_233a192dadb0917d]));
          }

          jlong UniformSplitTermsReader::ramBytesUsed() const
          {
            return env->callLongMethod(this$, mids$[mid_ramBytesUsed_2e5ae9edcb9b072f]);
          }

          jint UniformSplitTermsReader::size() const
          {
            return env->callIntMethod(this$, mids$[mid_size_9972fcc56b44e79d]);
          }

          ::org::apache::lucene::index::Terms UniformSplitTermsReader::terms(const ::java::lang::String & a0) const
          {
            return ::org::apache::lucene::index::Terms(env->callObjectMethod(this$, mids$[mid_terms_3976802ad88273cd], a0.this$));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace codecs {
        namespace uniformsplit {
          static PyObject *t_UniformSplitTermsReader_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_UniformSplitTermsReader_instance_(PyTypeObject *type, PyObject *arg);
          static int t_UniformSplitTermsReader_init_(t_UniformSplitTermsReader *self, PyObject *args, PyObject *kwds);
          static PyObject *t_UniformSplitTermsReader_checkIntegrity(t_UniformSplitTermsReader *self, PyObject *args);
          static PyObject *t_UniformSplitTermsReader_close(t_UniformSplitTermsReader *self, PyObject *args);
          static PyObject *t_UniformSplitTermsReader_iterator(t_UniformSplitTermsReader *self, PyObject *args);
          static PyObject *t_UniformSplitTermsReader_ramBytesUsed(t_UniformSplitTermsReader *self, PyObject *args);
          static PyObject *t_UniformSplitTermsReader_size(t_UniformSplitTermsReader *self, PyObject *args);
          static PyObject *t_UniformSplitTermsReader_terms(t_UniformSplitTermsReader *self, PyObject *args);

          static PyMethodDef t_UniformSplitTermsReader__methods_[] = {
            DECLARE_METHOD(t_UniformSplitTermsReader, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_UniformSplitTermsReader, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_UniformSplitTermsReader, checkIntegrity, METH_VARARGS),
            DECLARE_METHOD(t_UniformSplitTermsReader, close, METH_VARARGS),
            DECLARE_METHOD(t_UniformSplitTermsReader, iterator, METH_VARARGS),
            DECLARE_METHOD(t_UniformSplitTermsReader, ramBytesUsed, METH_VARARGS),
            DECLARE_METHOD(t_UniformSplitTermsReader, size, METH_VARARGS),
            DECLARE_METHOD(t_UniformSplitTermsReader, terms, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          static PyType_Slot PY_TYPE_SLOTS(UniformSplitTermsReader)[] = {
            { Py_tp_methods, t_UniformSplitTermsReader__methods_ },
            { Py_tp_init, (void *) t_UniformSplitTermsReader_init_ },
            { Py_tp_iter, (void *) ((PyObject *(*)(t_UniformSplitTermsReader *)) get_iterator< t_UniformSplitTermsReader >) },
            { Py_tp_iternext, (void *) 0 },
            { 0, NULL }
          };

          static PyType_Def *PY_TYPE_BASES(UniformSplitTermsReader)[] = {
            &PY_TYPE_DEF(::org::apache::lucene::codecs::FieldsProducer),
            NULL
          };

          DEFINE_TYPE(UniformSplitTermsReader, t_UniformSplitTermsReader, UniformSplitTermsReader);

          void t_UniformSplitTermsReader::install(PyObject *module)
          {
            installType(&PY_TYPE(UniformSplitTermsReader), &PY_TYPE_DEF(UniformSplitTermsReader), module, "UniformSplitTermsReader", 0);
          }

          void t_UniformSplitTermsReader::initialize(PyObject *module)
          {
            PyObject_SetAttrString((PyObject *) PY_TYPE(UniformSplitTermsReader), "class_", make_descriptor(UniformSplitTermsReader::initializeClass, 1));
            PyObject_SetAttrString((PyObject *) PY_TYPE(UniformSplitTermsReader), "wrapfn_", make_descriptor(t_UniformSplitTermsReader::wrap_jobject));
            PyObject_SetAttrString((PyObject *) PY_TYPE(UniformSplitTermsReader), "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_UniformSplitTermsReader_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, UniformSplitTermsReader::initializeClass, 1)))
              return NULL;
            return t_UniformSplitTermsReader::wrap_Object(UniformSplitTermsReader(((t_UniformSplitTermsReader *) arg)->object.this$));
          }
          static PyObject *t_UniformSplitTermsReader_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, UniformSplitTermsReader::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_UniformSplitTermsReader_init_(t_UniformSplitTermsReader *self, PyObject *args, PyObject *kwds)
          {
            ::org::apache::lucene::codecs::PostingsReaderBase a0((jobject) NULL);
            ::org::apache::lucene::index::SegmentReadState a1((jobject) NULL);
            ::org::apache::lucene::codecs::uniformsplit::BlockDecoder a2((jobject) NULL);
            jboolean a3;
            UniformSplitTermsReader object((jobject) NULL);

            if (!parseArgs(args, "kkkZ", ::org::apache::lucene::codecs::PostingsReaderBase::initializeClass, ::org::apache::lucene::index::SegmentReadState::initializeClass, ::org::apache::lucene::codecs::uniformsplit::BlockDecoder::initializeClass, &a0, &a1, &a2, &a3))
            {
              INT_CALL(object = UniformSplitTermsReader(a0, a1, a2, a3));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_UniformSplitTermsReader_checkIntegrity(t_UniformSplitTermsReader *self, PyObject *args)
          {

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(self->object.checkIntegrity());
              Py_RETURN_NONE;
            }

            return callSuper(PY_TYPE(UniformSplitTermsReader), (PyObject *) self, "checkIntegrity", args, 2);
          }

          static PyObject *t_UniformSplitTermsReader_close(t_UniformSplitTermsReader *self, PyObject *args)
          {

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(self->object.close());
              Py_RETURN_NONE;
            }

            return callSuper(PY_TYPE(UniformSplitTermsReader), (PyObject *) self, "close", args, 2);
          }

          static PyObject *t_UniformSplitTermsReader_iterator(t_UniformSplitTermsReader *self, PyObject *args)
          {
            ::java::util::Iterator result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.iterator());
              return ::java::util::t_Iterator::wrap_Object(result, ::java::lang::PY_TYPE(String));
            }

            return callSuper(PY_TYPE(UniformSplitTermsReader), (PyObject *) self, "iterator", args, 2);
          }

          static PyObject *t_UniformSplitTermsReader_ramBytesUsed(t_UniformSplitTermsReader *self, PyObject *args)
          {
            jlong result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.ramBytesUsed());
              return PyLong_FromLongLong((PY_LONG_LONG) result);
            }

            return callSuper(PY_TYPE(UniformSplitTermsReader), (PyObject *) self, "ramBytesUsed", args, 2);
          }

          static PyObject *t_UniformSplitTermsReader_size(t_UniformSplitTermsReader *self, PyObject *args)
          {
            jint result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.size());
              return PyLong_FromLong((long) result);
            }

            return callSuper(PY_TYPE(UniformSplitTermsReader), (PyObject *) self, "size", args, 2);
          }

          static PyObject *t_UniformSplitTermsReader_terms(t_UniformSplitTermsReader *self, PyObject *args)
          {
            ::java::lang::String a0((jobject) NULL);
            ::org::apache::lucene::index::Terms result((jobject) NULL);

            if (!parseArgs(args, "s", &a0))
            {
              OBJ_CALL(result = self->object.terms(a0));
              return ::org::apache::lucene::index::t_Terms::wrap_Object(result);
            }

            return callSuper(PY_TYPE(UniformSplitTermsReader), (PyObject *) self, "terms", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queryparser/flexible/core/util/StringUtils.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace core {
            namespace util {

              ::java::lang::Class *StringUtils::class$ = NULL;
              jmethodID *StringUtils::mids$ = NULL;
              bool StringUtils::live$ = false;

              jclass StringUtils::initializeClass(bool getOnly)
              {
                if (getOnly)
                  return (jclass) (live$ ? class$->this$ : NULL);
                if (class$ == NULL)
                {
                  jclass cls = (jclass) env->findClass("org/apache/lucene/queryparser/flexible/core/util/StringUtils");

                  mids$ = new jmethodID[max_mid];
                  mids$[mid_init$_f2cc1bce94666404] = env->getMethodID(cls, "<init>", "()V");
                  mids$[mid_toString_8f886c83a83356f0] = env->getStaticMethodID(cls, "toString", "(Ljava/lang/Object;)Ljava/lang/String;");

                  class$ = new ::java::lang::Class(cls);
                  live$ = true;
                }
                return (jclass) class$->this$;
              }

              StringUtils::StringUtils() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_f2cc1bce94666404)) {}

              ::java::lang::String StringUtils::toString(const ::java::lang::Object & a0)
              {
                jclass cls = env->getClass(initializeClass);
                return ::java::lang::String(env->callStaticObjectMethod(cls, mids$[mid_toString_8f886c83a83356f0], a0.this$));
              }
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace core {
            namespace util {
              static PyObject *t_StringUtils_cast_(PyTypeObject *type, PyObject *arg);
              static PyObject *t_StringUtils_instance_(PyTypeObject *type, PyObject *arg);
              static int t_StringUtils_init_(t_StringUtils *self, PyObject *args, PyObject *kwds);
              static PyObject *t_StringUtils_toString(PyTypeObject *type, PyObject *args);

              static PyMethodDef t_StringUtils__methods_[] = {
                DECLARE_METHOD(t_StringUtils, cast_, METH_O | METH_CLASS),
                DECLARE_METHOD(t_StringUtils, instance_, METH_O | METH_CLASS),
                DECLARE_METHOD(t_StringUtils, toString, METH_VARARGS | METH_CLASS),
                { NULL, NULL, 0, NULL }
              };

              static PyType_Slot PY_TYPE_SLOTS(StringUtils)[] = {
                { Py_tp_methods, t_StringUtils__methods_ },
                { Py_tp_init, (void *) t_StringUtils_init_ },
                { 0, NULL }
              };

              static PyType_Def *PY_TYPE_BASES(StringUtils)[] = {
                &PY_TYPE_DEF(::java::lang::Object),
                NULL
              };

              DEFINE_TYPE(StringUtils, t_StringUtils, StringUtils);

              void t_StringUtils::install(PyObject *module)
              {
                installType(&PY_TYPE(StringUtils), &PY_TYPE_DEF(StringUtils), module, "StringUtils", 0);
              }

              void t_StringUtils::initialize(PyObject *module)
              {
                PyObject_SetAttrString((PyObject *) PY_TYPE(StringUtils), "class_", make_descriptor(StringUtils::initializeClass, 1));
                PyObject_SetAttrString((PyObject *) PY_TYPE(StringUtils), "wrapfn_", make_descriptor(t_StringUtils::wrap_jobject));
                PyObject_SetAttrString((PyObject *) PY_TYPE(StringUtils), "boxfn_", make_descriptor(boxObject));
              }

              static PyObject *t_StringUtils_cast_(PyTypeObject *type, PyObject *arg)
              {
                if (!(arg = castCheck(arg, StringUtils::initializeClass, 1)))
                  return NULL;
                return t_StringUtils::wrap_Object(StringUtils(((t_StringUtils *) arg)->object.this$));
              }
              static PyObject *t_StringUtils_instance_(PyTypeObject *type, PyObject *arg)
              {
                if (!castCheck(arg, StringUtils::initializeClass, 0))
                  Py_RETURN_FALSE;
                Py_RETURN_TRUE;
              }

              static int t_StringUtils_init_(t_StringUtils *self, PyObject *args, PyObject *kwds)
              {
                StringUtils object((jobject) NULL);

                INT_CALL(object = StringUtils());
                self->object = object;

                return 0;
              }

              static PyObject *t_StringUtils_toString(PyTypeObject *type, PyObject *args)
              {
                ::java::lang::Object a0((jobject) NULL);
                ::java::lang::String result((jobject) NULL);

                if (!parseArgs(args, "o", &a0))
                {
                  OBJ_CALL(result = ::org::apache::lucene::queryparser::flexible::core::util::StringUtils::toString(a0));
                  return j2p(result);
                }

                return callSuper(type, "toString", args, 2);
              }
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/util/packed/DirectMonotonicReader$Meta.h"
#include "org/apache/lucene/util/Accountable.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        namespace packed {

          ::java::lang::Class *DirectMonotonicReader$Meta::class$ = NULL;
          jmethodID *DirectMonotonicReader$Meta::mids$ = NULL;
          bool DirectMonotonicReader$Meta::live$ = false;

          jclass DirectMonotonicReader$Meta::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/util/packed/DirectMonotonicReader$Meta");

              mids$ = new jmethodID[max_mid];
              mids$[mid_ramBytesUsed_2e5ae9edcb9b072f] = env->getMethodID(cls, "ramBytesUsed", "()J");

              class$ = new ::java::lang::Class(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          jlong DirectMonotonicReader$Meta::ramBytesUsed() const
          {
            return env->callLongMethod(this$, mids$[mid_ramBytesUsed_2e5ae9edcb9b072f]);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        namespace packed {
          static PyObject *t_DirectMonotonicReader$Meta_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_DirectMonotonicReader$Meta_instance_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_DirectMonotonicReader$Meta_ramBytesUsed(t_DirectMonotonicReader$Meta *self);

          static PyMethodDef t_DirectMonotonicReader$Meta__methods_[] = {
            DECLARE_METHOD(t_DirectMonotonicReader$Meta, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_DirectMonotonicReader$Meta, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_DirectMonotonicReader$Meta, ramBytesUsed, METH_NOARGS),
            { NULL, NULL, 0, NULL }
          };

          static PyType_Slot PY_TYPE_SLOTS(DirectMonotonicReader$Meta)[] = {
            { Py_tp_methods, t_DirectMonotonicReader$Meta__methods_ },
            { Py_tp_init, (void *) abstract_init },
            { 0, NULL }
          };

          static PyType_Def *PY_TYPE_BASES(DirectMonotonicReader$Meta)[] = {
            &PY_TYPE_DEF(::java::lang::Object),
            NULL
          };

          DEFINE_TYPE(DirectMonotonicReader$Meta, t_DirectMonotonicReader$Meta, DirectMonotonicReader$Meta);

          void t_DirectMonotonicReader$Meta::install(PyObject *module)
          {
            installType(&PY_TYPE(DirectMonotonicReader$Meta), &PY_TYPE_DEF(DirectMonotonicReader$Meta), module, "DirectMonotonicReader$Meta", 0);
          }

          void t_DirectMonotonicReader$Meta::initialize(PyObject *module)
          {
            PyObject_SetAttrString((PyObject *) PY_TYPE(DirectMonotonicReader$Meta), "class_", make_descriptor(DirectMonotonicReader$Meta::initializeClass, 1));
            PyObject_SetAttrString((PyObject *) PY_TYPE(DirectMonotonicReader$Meta), "wrapfn_", make_descriptor(t_DirectMonotonicReader$Meta::wrap_jobject));
            PyObject_SetAttrString((PyObject *) PY_TYPE(DirectMonotonicReader$Meta), "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_DirectMonotonicReader$Meta_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, DirectMonotonicReader$Meta::initializeClass, 1)))
              return NULL;
            return t_DirectMonotonicReader$Meta::wrap_Object(DirectMonotonicReader$Meta(((t_DirectMonotonicReader$Meta *) arg)->object.this$));
          }
          static PyObject *t_DirectMonotonicReader$Meta_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, DirectMonotonicReader$Meta::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static PyObject *t_DirectMonotonicReader$Meta_ramBytesUsed(t_DirectMonotonicReader$Meta *self)
          {
            jlong result;
            OBJ_CALL(result = self->object.ramBytesUsed());
            return PyLong_FromLongLong((PY_LONG_LONG) result);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/sr/SerbianNormalizationFilter.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/analysis/TokenStream.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace sr {

          ::java::lang::Class *SerbianNormalizationFilter::class$ = NULL;
          jmethodID *SerbianNormalizationFilter::mids$ = NULL;
          bool SerbianNormalizationFilter::live$ = false;

          jclass SerbianNormalizationFilter::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/sr/SerbianNormalizationFilter");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_c26756868a754f4e] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/analysis/TokenStream;)V");
              mids$[mid_incrementToken_8454bd5aa23fd11e] = env->getMethodID(cls, "incrementToken", "()Z");

              class$ = new ::java::lang::Class(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          SerbianNormalizationFilter::SerbianNormalizationFilter(const ::org::apache::lucene::analysis::TokenStream & a0) : ::org::apache::lucene::analysis::TokenFilter(env->newObject(initializeClass, &mids$, mid_init$_c26756868a754f4e, a0.this$)) {}

          jboolean SerbianNormalizationFilter::incrementToken() const
          {
            return env->callBooleanMethod(this$, mids$[mid_incrementToken_8454bd5aa23fd11e]);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace sr {
          static PyObject *t_SerbianNormalizationFilter_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_SerbianNormalizationFilter_instance_(PyTypeObject *type, PyObject *arg);
          static int t_SerbianNormalizationFilter_init_(t_SerbianNormalizationFilter *self, PyObject *args, PyObject *kwds);
          static PyObject *t_SerbianNormalizationFilter_incrementToken(t_SerbianNormalizationFilter *self, PyObject *args);

          static PyMethodDef t_SerbianNormalizationFilter__methods_[] = {
            DECLARE_METHOD(t_SerbianNormalizationFilter, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_SerbianNormalizationFilter, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_SerbianNormalizationFilter, incrementToken, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          static PyType_Slot PY_TYPE_SLOTS(SerbianNormalizationFilter)[] = {
            { Py_tp_methods, t_SerbianNormalizationFilter__methods_ },
            { Py_tp_init, (void *) t_SerbianNormalizationFilter_init_ },
            { 0, NULL }
          };

          static PyType_Def *PY_TYPE_BASES(SerbianNormalizationFilter)[] = {
            &PY_TYPE_DEF(::org::apache::lucene::analysis::TokenFilter),
            NULL
          };

          DEFINE_TYPE(SerbianNormalizationFilter, t_SerbianNormalizationFilter, SerbianNormalizationFilter);

          void t_SerbianNormalizationFilter::install(PyObject *module)
          {
            installType(&PY_TYPE(SerbianNormalizationFilter), &PY_TYPE_DEF(SerbianNormalizationFilter), module, "SerbianNormalizationFilter", 0);
          }

          void t_SerbianNormalizationFilter::initialize(PyObject *module)
          {
            PyObject_SetAttrString((PyObject *) PY_TYPE(SerbianNormalizationFilter), "class_", make_descriptor(SerbianNormalizationFilter::initializeClass, 1));
            PyObject_SetAttrString((PyObject *) PY_TYPE(SerbianNormalizationFilter), "wrapfn_", make_descriptor(t_SerbianNormalizationFilter::wrap_jobject));
            PyObject_SetAttrString((PyObject *) PY_TYPE(SerbianNormalizationFilter), "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_SerbianNormalizationFilter_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, SerbianNormalizationFilter::initializeClass, 1)))
              return NULL;
            return t_SerbianNormalizationFilter::wrap_Object(SerbianNormalizationFilter(((t_SerbianNormalizationFilter *) arg)->object.this$));
          }
          static PyObject *t_SerbianNormalizationFilter_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, SerbianNormalizationFilter::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_SerbianNormalizationFilter_init_(t_SerbianNormalizationFilter *self, PyObject *args, PyObject *kwds)
          {
            ::org::apache::lucene::analysis::TokenStream a0((jobject) NULL);
            SerbianNormalizationFilter object((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::analysis::TokenStream::initializeClass, &a0))
            {
              INT_CALL(object = SerbianNormalizationFilter(a0));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_SerbianNormalizationFilter_incrementToken(t_SerbianNormalizationFilter *self, PyObject *args)
          {
            jboolean result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.incrementToken());
              Py_RETURN_BOOL(result);
            }

            return callSuper(PY_TYPE(SerbianNormalizationFilter), (PyObject *) self, "incrementToken", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/ko/tokenattributes/PartOfSpeechAttributeImpl.h"
#include "org/apache/lucene/analysis/ko/dict/Dictionary$Morpheme.h"
#include "org/apache/lucene/analysis/ko/Token.h"
#include "org/apache/lucene/analysis/ko/tokenattributes/PartOfSpeechAttribute.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/analysis/ko/POS$Type.h"
#include "org/apache/lucene/util/AttributeReflector.h"
#include "org/apache/lucene/analysis/ko/POS$Tag.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace ko {
          namespace tokenattributes {

            ::java::lang::Class *PartOfSpeechAttributeImpl::class$ = NULL;
            jmethodID *PartOfSpeechAttributeImpl::mids$ = NULL;
            bool PartOfSpeechAttributeImpl::live$ = false;

            jclass PartOfSpeechAttributeImpl::initializeClass(bool getOnly)
            {
              if (getOnly)
                return (jclass) (live$ ? class$->this$ : NULL);
              if (class$ == NULL)
              {
                jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/ko/tokenattributes/PartOfSpeechAttributeImpl");

                mids$ = new jmethodID[max_mid];
                mids$[mid_init$_f2cc1bce94666404] = env->getMethodID(cls, "<init>", "()V");
                mids$[mid_clear_f2cc1bce94666404] = env->getMethodID(cls, "clear", "()V");
                mids$[mid_copyTo_26346c38ebc9c090] = env->getMethodID(cls, "copyTo", "(Lorg/apache/lucene/util/AttributeImpl;)V");
                mids$[mid_getLeftPOS_6d27d9f5e0d7f31a] = env->getMethodID(cls, "getLeftPOS", "()Lorg/apache/lucene/analysis/ko/POS$Tag;");
                mids$[mid_getMorphemes_82c5e27eed5fc4af] = env->getMethodID(cls, "getMorphemes", "()[Lorg/apache/lucene/analysis/ko/dict/Dictionary$Morpheme;");
                mids$[mid_getPOSType_6e8b69211f216c5e] = env->getMethodID(cls, "getPOSType", "()Lorg/apache/lucene/analysis/ko/POS$Type;");
                mids$[mid_getRightPOS_6d27d9f5e0d7f31a] = env->getMethodID(cls, "getRightPOS", "()Lorg/apache/lucene/analysis/ko/POS$Tag;");
                mids$[mid_reflectWith_b880c72ee67200af] = env->getMethodID(cls, "reflectWith", "(Lorg/apache/lucene/util/AttributeReflector;)V");
                mids$[mid_setToken_0ac49e59706c84c7] = env->getMethodID(cls, "setToken", "(Lorg/apache/lucene/analysis/ko/Token;)V");

                class$ = new ::java::lang::Class(cls);
                live$ = true;
              }
              return (jclass) class$->this$;
            }

            PartOfSpeechAttributeImpl::PartOfSpeechAttributeImpl() : ::org::apache::lucene::util::AttributeImpl(env->newObject(initializeClass, &mids$, mid_init$_f2cc1bce94666404)) {}

            void PartOfSpeechAttributeImpl::clear() const
            {
              env->callVoidMethod(this$, mids$[mid_clear_f2cc1bce94666404]);
            }

            void PartOfSpeechAttributeImpl::copyTo(const ::org::apache::lucene::util::AttributeImpl & a0) const
            {
              env->callVoidMethod(this$, mids$[mid_copyTo_26346c38ebc9c090], a0.this$);
            }

            ::org::apache::lucene::analysis::ko::POS$Tag PartOfSpeechAttributeImpl::getLeftPOS() const
            {
              return ::org::apache::lucene::analysis::ko::POS$Tag(env->callObjectMethod(this$, mids$[mid_getLeftPOS_6d27d9f5e0d7f31a]));
            }

            JArray< ::org::apache::lucene::analysis::ko::dict::Dictionary$Morpheme > PartOfSpeechAttributeImpl::getMorphemes() const
            {
              return JArray< ::org::apache::lucene::analysis::ko::dict::Dictionary$Morpheme >(env->callObjectMethod(this$, mids$[mid_getMorphemes_82c5e27eed5fc4af]));
            }

            ::org::apache::lucene::analysis::ko::POS$Type PartOfSpeechAttributeImpl::getPOSType() const
            {
              return ::org::apache::lucene::analysis::ko::POS$Type(env->callObjectMethod(this$, mids$[mid_getPOSType_6e8b69211f216c5e]));
            }

            ::org::apache::lucene::analysis::ko::POS$Tag PartOfSpeechAttributeImpl::getRightPOS() const
            {
              return ::org::apache::lucene::analysis::ko::POS$Tag(env->callObjectMethod(this$, mids$[mid_getRightPOS_6d27d9f5e0d7f31a]));
            }

            void PartOfSpeechAttributeImpl::reflectWith(const ::org::apache::lucene::util::AttributeReflector & a0) const
            {
              env->callVoidMethod(this$, mids$[mid_reflectWith_b880c72ee67200af], a0.this$);
            }

            void PartOfSpeechAttributeImpl::setToken(const ::org::apache::lucene::analysis::ko::Token & a0) const
            {
              env->callVoidMethod(this$, mids$[mid_setToken_0ac49e59706c84c7], a0.this$);
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace ko {
          namespace tokenattributes {
            static PyObject *t_PartOfSpeechAttributeImpl_cast_(PyTypeObject *type, PyObject *arg);
            static PyObject *t_PartOfSpeechAttributeImpl_instance_(PyTypeObject *type, PyObject *arg);
            static int t_PartOfSpeechAttributeImpl_init_(t_PartOfSpeechAttributeImpl *self, PyObject *args, PyObject *kwds);
            static PyObject *t_PartOfSpeechAttributeImpl_clear(t_PartOfSpeechAttributeImpl *self, PyObject *args);
            static PyObject *t_PartOfSpeechAttributeImpl_copyTo(t_PartOfSpeechAttributeImpl *self, PyObject *args);
            static PyObject *t_PartOfSpeechAttributeImpl_getLeftPOS(t_PartOfSpeechAttributeImpl *self);
            static PyObject *t_PartOfSpeechAttributeImpl_getMorphemes(t_PartOfSpeechAttributeImpl *self);
            static PyObject *t_PartOfSpeechAttributeImpl_getPOSType(t_PartOfSpeechAttributeImpl *self);
            static PyObject *t_PartOfSpeechAttributeImpl_getRightPOS(t_PartOfSpeechAttributeImpl *self);
            static PyObject *t_PartOfSpeechAttributeImpl_reflectWith(t_PartOfSpeechAttributeImpl *self, PyObject *args);
            static PyObject *t_PartOfSpeechAttributeImpl_setToken(t_PartOfSpeechAttributeImpl *self, PyObject *arg);
            static PyObject *t_PartOfSpeechAttributeImpl_get__leftPOS(t_PartOfSpeechAttributeImpl *self, void *data);
            static PyObject *t_PartOfSpeechAttributeImpl_get__morphemes(t_PartOfSpeechAttributeImpl *self, void *data);
            static PyObject *t_PartOfSpeechAttributeImpl_get__pOSType(t_PartOfSpeechAttributeImpl *self, void *data);
            static PyObject *t_PartOfSpeechAttributeImpl_get__rightPOS(t_PartOfSpeechAttributeImpl *self, void *data);
            static int t_PartOfSpeechAttributeImpl_set__token(t_PartOfSpeechAttributeImpl *self, PyObject *arg, void *data);
            static PyGetSetDef t_PartOfSpeechAttributeImpl__fields_[] = {
              DECLARE_GET_FIELD(t_PartOfSpeechAttributeImpl, leftPOS),
              DECLARE_GET_FIELD(t_PartOfSpeechAttributeImpl, morphemes),
              DECLARE_GET_FIELD(t_PartOfSpeechAttributeImpl, pOSType),
              DECLARE_GET_FIELD(t_PartOfSpeechAttributeImpl, rightPOS),
              DECLARE_SET_FIELD(t_PartOfSpeechAttributeImpl, token),
              { NULL, NULL, NULL, NULL, NULL }
            };

            static PyMethodDef t_PartOfSpeechAttributeImpl__methods_[] = {
              DECLARE_METHOD(t_PartOfSpeechAttributeImpl, cast_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_PartOfSpeechAttributeImpl, instance_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_PartOfSpeechAttributeImpl, clear, METH_VARARGS),
              DECLARE_METHOD(t_PartOfSpeechAttributeImpl, copyTo, METH_VARARGS),
              DECLARE_METHOD(t_PartOfSpeechAttributeImpl, getLeftPOS, METH_NOARGS),
              DECLARE_METHOD(t_PartOfSpeechAttributeImpl, getMorphemes, METH_NOARGS),
              DECLARE_METHOD(t_PartOfSpeechAttributeImpl, getPOSType, METH_NOARGS),
              DECLARE_METHOD(t_PartOfSpeechAttributeImpl, getRightPOS, METH_NOARGS),
              DECLARE_METHOD(t_PartOfSpeechAttributeImpl, reflectWith, METH_VARARGS),
              DECLARE_METHOD(t_PartOfSpeechAttributeImpl, setToken, METH_O),
              { NULL, NULL, 0, NULL }
            };

            static PyType_Slot PY_TYPE_SLOTS(PartOfSpeechAttributeImpl)[] = {
              { Py_tp_methods, t_PartOfSpeechAttributeImpl__methods_ },
              { Py_tp_init, (void *) t_PartOfSpeechAttributeImpl_init_ },
              { Py_tp_getset, t_PartOfSpeechAttributeImpl__fields_ },
              { 0, NULL }
            };

            static PyType_Def *PY_TYPE_BASES(PartOfSpeechAttributeImpl)[] = {
              &PY_TYPE_DEF(::org::apache::lucene::util::AttributeImpl),
              NULL
            };

            DEFINE_TYPE(PartOfSpeechAttributeImpl, t_PartOfSpeechAttributeImpl, PartOfSpeechAttributeImpl);

            void t_PartOfSpeechAttributeImpl::install(PyObject *module)
            {
              installType(&PY_TYPE(PartOfSpeechAttributeImpl), &PY_TYPE_DEF(PartOfSpeechAttributeImpl), module, "PartOfSpeechAttributeImpl", 0);
            }

            void t_PartOfSpeechAttributeImpl::initialize(PyObject *module)
            {
              PyObject_SetAttrString((PyObject *) PY_TYPE(PartOfSpeechAttributeImpl), "class_", make_descriptor(PartOfSpeechAttributeImpl::initializeClass, 1));
              PyObject_SetAttrString((PyObject *) PY_TYPE(PartOfSpeechAttributeImpl), "wrapfn_", make_descriptor(t_PartOfSpeechAttributeImpl::wrap_jobject));
              PyObject_SetAttrString((PyObject *) PY_TYPE(PartOfSpeechAttributeImpl), "boxfn_", make_descriptor(boxObject));
            }

            static PyObject *t_PartOfSpeechAttributeImpl_cast_(PyTypeObject *type, PyObject *arg)
            {
              if (!(arg = castCheck(arg, PartOfSpeechAttributeImpl::initializeClass, 1)))
                return NULL;
              return t_PartOfSpeechAttributeImpl::wrap_Object(PartOfSpeechAttributeImpl(((t_PartOfSpeechAttributeImpl *) arg)->object.this$));
            }
            static PyObject *t_PartOfSpeechAttributeImpl_instance_(PyTypeObject *type, PyObject *arg)
            {
              if (!castCheck(arg, PartOfSpeechAttributeImpl::initializeClass, 0))
                Py_RETURN_FALSE;
              Py_RETURN_TRUE;
            }

            static int t_PartOfSpeechAttributeImpl_init_(t_PartOfSpeechAttributeImpl *self, PyObject *args, PyObject *kwds)
            {
              PartOfSpeechAttributeImpl object((jobject) NULL);

              INT_CALL(object = PartOfSpeechAttributeImpl());
              self->object = object;

              return 0;
            }

            static PyObject *t_PartOfSpeechAttributeImpl_clear(t_PartOfSpeechAttributeImpl *self, PyObject *args)
            {

              if (!parseArgs(args, ""))
              {
                OBJ_CALL(self->object.clear());
                Py_RETURN_NONE;
              }

              return callSuper(PY_TYPE(PartOfSpeechAttributeImpl), (PyObject *) self, "clear", args, 2);
            }

            static PyObject *t_PartOfSpeechAttributeImpl_copyTo(t_PartOfSpeechAttributeImpl *self, PyObject *args)
            {
              ::org::apache::lucene::util::AttributeImpl a0((jobject) NULL);

              if (!parseArgs(args, "k", ::org::apache::lucene::util::AttributeImpl::initializeClass, &a0))
              {
                OBJ_CALL(self->object.copyTo(a0));
                Py_RETURN_NONE;
              }

              return callSuper(PY_TYPE(PartOfSpeechAttributeImpl), (PyObject *) self, "copyTo", args, 2);
            }

            static PyObject *t_PartOfSpeechAttributeImpl_getLeftPOS(t_PartOfSpeechAttributeImpl *self)
            {
              ::org::apache::lucene::analysis::ko::POS$Tag result((jobject) NULL);
              OBJ_CALL(result = self->object.getLeftPOS());
              return ::org::apache::lucene::analysis::ko::t_POS$Tag::wrap_Object(result);
            }

            static PyObject *t_PartOfSpeechAttributeImpl_getMorphemes(t_PartOfSpeechAttributeImpl *self)
            {
              JArray< ::org::apache::lucene::analysis::ko::dict::Dictionary$Morpheme > result((jobject) NULL);
              OBJ_CALL(result = self->object.getMorphemes());
              return JArray<jobject>(result.this$).wrap(::org::apache::lucene::analysis::ko::dict::t_Dictionary$Morpheme::wrap_jobject);
            }

            static PyObject *t_PartOfSpeechAttributeImpl_getPOSType(t_PartOfSpeechAttributeImpl *self)
            {
              ::org::apache::lucene::analysis::ko::POS$Type result((jobject) NULL);
              OBJ_CALL(result = self->object.getPOSType());
              return ::org::apache::lucene::analysis::ko::t_POS$Type::wrap_Object(result);
            }

            static PyObject *t_PartOfSpeechAttributeImpl_getRightPOS(t_PartOfSpeechAttributeImpl *self)
            {
              ::org::apache::lucene::analysis::ko::POS$Tag result((jobject) NULL);
              OBJ_CALL(result = self->object.getRightPOS());
              return ::org::apache::lucene::analysis::ko::t_POS$Tag::wrap_Object(result);
            }

            static PyObject *t_PartOfSpeechAttributeImpl_reflectWith(t_PartOfSpeechAttributeImpl *self, PyObject *args)
            {
              ::org::apache::lucene::util::AttributeReflector a0((jobject) NULL);

              if (!parseArgs(args, "k", ::org::apache::lucene::util::AttributeReflector::initializeClass, &a0))
              {
                OBJ_CALL(self->object.reflectWith(a0));
                Py_RETURN_NONE;
              }

              return callSuper(PY_TYPE(PartOfSpeechAttributeImpl), (PyObject *) self, "reflectWith", args, 2);
            }

            static PyObject *t_PartOfSpeechAttributeImpl_setToken(t_PartOfSpeechAttributeImpl *self, PyObject *arg)
            {
              ::org::apache::lucene::analysis::ko::Token a0((jobject) NULL);

              if (!parseArg(arg, "k", ::org::apache::lucene::analysis::ko::Token::initializeClass, &a0))
              {
                OBJ_CALL(self->object.setToken(a0));
                Py_RETURN_NONE;
              }

              PyErr_SetArgsError((PyObject *) self, "setToken", arg);
              return NULL;
            }

            static PyObject *t_PartOfSpeechAttributeImpl_get__leftPOS(t_PartOfSpeechAttributeImpl *self, void *data)
            {
              ::org::apache::lucene::analysis::ko::POS$Tag value((jobject) NULL);
              OBJ_CALL(value = self->object.getLeftPOS());
              return ::org::apache::lucene::analysis::ko::t_POS$Tag::wrap_Object(value);
            }

            static PyObject *t_PartOfSpeechAttributeImpl_get__morphemes(t_PartOfSpeechAttributeImpl *self, void *data)
            {
              JArray< ::org::apache::lucene::analysis::ko::dict::Dictionary$Morpheme > value((jobject) NULL);
              OBJ_CALL(value = self->object.getMorphemes());
              return JArray<jobject>(value.this$).wrap(::org::apache::lucene::analysis::ko::dict::t_Dictionary$Morpheme::wrap_jobject);
            }

            static PyObject *t_PartOfSpeechAttributeImpl_get__pOSType(t_PartOfSpeechAttributeImpl *self, void *data)
            {
              ::org::apache::lucene::analysis::ko::POS$Type value((jobject) NULL);
              OBJ_CALL(value = self->object.getPOSType());
              return ::org::apache::lucene::analysis::ko::t_POS$Type::wrap_Object(value);
            }

            static PyObject *t_PartOfSpeechAttributeImpl_get__rightPOS(t_PartOfSpeechAttributeImpl *self, void *data)
            {
              ::org::apache::lucene::analysis::ko::POS$Tag value((jobject) NULL);
              OBJ_CALL(value = self->object.getRightPOS());
              return ::org::apache::lucene::analysis::ko::t_POS$Tag::wrap_Object(value);
            }

            static int t_PartOfSpeechAttributeImpl_set__token(t_PartOfSpeechAttributeImpl *self, PyObject *arg, void *data)
            {
              {
                ::org::apache::lucene::analysis::ko::Token value((jobject) NULL);
                if (!parseArg(arg, "k", ::org::apache::lucene::analysis::ko::Token::initializeClass, &value))
                {
                  INT_CALL(self->object.setToken(value));
                  return 0;
                }
              }
              PyErr_SetArgsError((PyObject *) self, "token", arg);
              return -1;
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/cz/CzechStemFilter.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/analysis/TokenStream.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace cz {

          ::java::lang::Class *CzechStemFilter::class$ = NULL;
          jmethodID *CzechStemFilter::mids$ = NULL;
          bool CzechStemFilter::live$ = false;

          jclass CzechStemFilter::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/cz/CzechStemFilter");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_c26756868a754f4e] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/analysis/TokenStream;)V");
              mids$[mid_incrementToken_8454bd5aa23fd11e] = env->getMethodID(cls, "incrementToken", "()Z");

              class$ = new ::java::lang::Class(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          CzechStemFilter::CzechStemFilter(const ::org::apache::lucene::analysis::TokenStream & a0) : ::org::apache::lucene::analysis::TokenFilter(env->newObject(initializeClass, &mids$, mid_init$_c26756868a754f4e, a0.this$)) {}

          jboolean CzechStemFilter::incrementToken() const
          {
            return env->callBooleanMethod(this$, mids$[mid_incrementToken_8454bd5aa23fd11e]);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace cz {
          static PyObject *t_CzechStemFilter_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_CzechStemFilter_instance_(PyTypeObject *type, PyObject *arg);
          static int t_CzechStemFilter_init_(t_CzechStemFilter *self, PyObject *args, PyObject *kwds);
          static PyObject *t_CzechStemFilter_incrementToken(t_CzechStemFilter *self, PyObject *args);

          static PyMethodDef t_CzechStemFilter__methods_[] = {
            DECLARE_METHOD(t_CzechStemFilter, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_CzechStemFilter, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_CzechStemFilter, incrementToken, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          static PyType_Slot PY_TYPE_SLOTS(CzechStemFilter)[] = {
            { Py_tp_methods, t_CzechStemFilter__methods_ },
            { Py_tp_init, (void *) t_CzechStemFilter_init_ },
            { 0, NULL }
          };

          static PyType_Def *PY_TYPE_BASES(CzechStemFilter)[] = {
            &PY_TYPE_DEF(::org::apache::lucene::analysis::TokenFilter),
            NULL
          };

          DEFINE_TYPE(CzechStemFilter, t_CzechStemFilter, CzechStemFilter);

          void t_CzechStemFilter::install(PyObject *module)
          {
            installType(&PY_TYPE(CzechStemFilter), &PY_TYPE_DEF(CzechStemFilter), module, "CzechStemFilter", 0);
          }

          void t_CzechStemFilter::initialize(PyObject *module)
          {
            PyObject_SetAttrString((PyObject *) PY_TYPE(CzechStemFilter), "class_", make_descriptor(CzechStemFilter::initializeClass, 1));
            PyObject_SetAttrString((PyObject *) PY_TYPE(CzechStemFilter), "wrapfn_", make_descriptor(t_CzechStemFilter::wrap_jobject));
            PyObject_SetAttrString((PyObject *) PY_TYPE(CzechStemFilter), "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_CzechStemFilter_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, CzechStemFilter::initializeClass, 1)))
              return NULL;
            return t_CzechStemFilter::wrap_Object(CzechStemFilter(((t_CzechStemFilter *) arg)->object.this$));
          }
          static PyObject *t_CzechStemFilter_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, CzechStemFilter::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_CzechStemFilter_init_(t_CzechStemFilter *self, PyObject *args, PyObject *kwds)
          {
            ::org::apache::lucene::analysis::TokenStream a0((jobject) NULL);
            CzechStemFilter object((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::analysis::TokenStream::initializeClass, &a0))
            {
              INT_CALL(object = CzechStemFilter(a0));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_CzechStemFilter_incrementToken(t_CzechStemFilter *self, PyObject *args)
          {
            jboolean result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.incrementToken());
              Py_RETURN_BOOL(result);
            }

            return callSuper(PY_TYPE(CzechStemFilter), (PyObject *) self, "incrementToken", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/document/LongPointMultiRangeBuilder.h"
#include "java/lang/String.h"
#include "org/apache/lucene/search/MultiRangeQuery.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace document {

        ::java::lang::Class *LongPointMultiRangeBuilder::class$ = NULL;
        jmethodID *LongPointMultiRangeBuilder::mids$ = NULL;
        bool LongPointMultiRangeBuilder::live$ = false;

        jclass LongPointMultiRangeBuilder::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/document/LongPointMultiRangeBuilder");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_3fb1dae8d4037984] = env->getMethodID(cls, "<init>", "(Ljava/lang/String;I)V");
            mids$[mid_add_872c99e98a9fe378] = env->getMethodID(cls, "add", "([J[J)V");
            mids$[mid_build_03a96fdd31aca883] = env->getMethodID(cls, "build", "()Lorg/apache/lucene/search/MultiRangeQuery;");

            class$ = new ::java::lang::Class(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        LongPointMultiRangeBuilder::LongPointMultiRangeBuilder(const ::java::lang::String & a0, jint a1) : ::org::apache::lucene::search::MultiRangeQuery$Builder(env->newObject(initializeClass, &mids$, mid_init$_3fb1dae8d4037984, a0.this$, a1)) {}

        void LongPointMultiRangeBuilder::add(const JArray< jlong > & a0, const JArray< jlong > & a1) const
        {
          env->callVoidMethod(this$, mids$[mid_add_872c99e98a9fe378], a0.this$, a1.this$);
        }

        ::org::apache::lucene::search::MultiRangeQuery LongPointMultiRangeBuilder::build() const
        {
          return ::org::apache::lucene::search::MultiRangeQuery(env->callObjectMethod(this$, mids$[mid_build_03a96fdd31aca883]));
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace document {
        static PyObject *t_LongPointMultiRangeBuilder_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_LongPointMultiRangeBuilder_instance_(PyTypeObject *type, PyObject *arg);
        static int t_LongPointMultiRangeBuilder_init_(t_LongPointMultiRangeBuilder *self, PyObject *args, PyObject *kwds);
        static PyObject *t_LongPointMultiRangeBuilder_add(t_LongPointMultiRangeBuilder *self, PyObject *args);
        static PyObject *t_LongPointMultiRangeBuilder_build(t_LongPointMultiRangeBuilder *self, PyObject *args);

        static PyMethodDef t_LongPointMultiRangeBuilder__methods_[] = {
          DECLARE_METHOD(t_LongPointMultiRangeBuilder, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_LongPointMultiRangeBuilder, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_LongPointMultiRangeBuilder, add, METH_VARARGS),
          DECLARE_METHOD(t_LongPointMultiRangeBuilder, build, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        static PyType_Slot PY_TYPE_SLOTS(LongPointMultiRangeBuilder)[] = {
          { Py_tp_methods, t_LongPointMultiRangeBuilder__methods_ },
          { Py_tp_init, (void *) t_LongPointMultiRangeBuilder_init_ },
          { 0, NULL }
        };

        static PyType_Def *PY_TYPE_BASES(LongPointMultiRangeBuilder)[] = {
          &PY_TYPE_DEF(::org::apache::lucene::search::MultiRangeQuery$Builder),
          NULL
        };

        DEFINE_TYPE(LongPointMultiRangeBuilder, t_LongPointMultiRangeBuilder, LongPointMultiRangeBuilder);

        void t_LongPointMultiRangeBuilder::install(PyObject *module)
        {
          installType(&PY_TYPE(LongPointMultiRangeBuilder), &PY_TYPE_DEF(LongPointMultiRangeBuilder), module, "LongPointMultiRangeBuilder", 0);
        }

        void t_LongPointMultiRangeBuilder::initialize(PyObject *module)
        {
          PyObject_SetAttrString((PyObject *) PY_TYPE(LongPointMultiRangeBuilder), "class_", make_descriptor(LongPointMultiRangeBuilder::initializeClass, 1));
          PyObject_SetAttrString((PyObject *) PY_TYPE(LongPointMultiRangeBuilder), "wrapfn_", make_descriptor(t_LongPointMultiRangeBuilder::wrap_jobject));
          PyObject_SetAttrString((PyObject *) PY_TYPE(LongPointMultiRangeBuilder), "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_LongPointMultiRangeBuilder_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, LongPointMultiRangeBuilder::initializeClass, 1)))
            return NULL;
          return t_LongPointMultiRangeBuilder::wrap_Object(LongPointMultiRangeBuilder(((t_LongPointMultiRangeBuilder *) arg)->object.this$));
        }
        static PyObject *t_LongPointMultiRangeBuilder_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, LongPointMultiRangeBuilder::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_LongPointMultiRangeBuilder_init_(t_LongPointMultiRangeBuilder *self, PyObject *args, PyObject *kwds)
        {
          ::java::lang::String a0((jobject) NULL);
          jint a1;
          LongPointMultiRangeBuilder object((jobject) NULL);

          if (!parseArgs(args, "sI", &a0, &a1))
          {
            INT_CALL(object = LongPointMultiRangeBuilder(a0, a1));
            self->object = object;
          }
          else
          {
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }

        static PyObject *t_LongPointMultiRangeBuilder_add(t_LongPointMultiRangeBuilder *self, PyObject *args)
        {
          JArray< jlong > a0((jobject) NULL);
          JArray< jlong > a1((jobject) NULL);

          if (!parseArgs(args, "[J[J", &a0, &a1))
          {
            OBJ_CALL(self->object.add(a0, a1));
            Py_RETURN_NONE;
          }

          return callSuper(PY_TYPE(LongPointMultiRangeBuilder), (PyObject *) self, "add", args, 2);
        }

        static PyObject *t_LongPointMultiRangeBuilder_build(t_LongPointMultiRangeBuilder *self, PyObject *args)
        {
          ::org::apache::lucene::search::MultiRangeQuery result((jobject) NULL);

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.build());
            return ::org::apache::lucene::search::t_MultiRangeQuery::wrap_Object(result);
          }

          return callSuper(PY_TYPE(LongPointMultiRangeBuilder), (PyObject *) self, "build", args, 2);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/document/BigIntegerPoint.h"
#include "java/lang/Number.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/util/BytesRef.h"
#include "java/lang/String.h"
#include "org/apache/lucene/search/Query.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace document {

        ::java::lang::Class *BigIntegerPoint::class$ = NULL;
        jmethodID *BigIntegerPoint::mids$ = NULL;
        bool BigIntegerPoint::live$ = false;
        jint BigIntegerPoint::BYTES = (jint) 0;

        jclass BigIntegerPoint::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/document/BigIntegerPoint");

            mids$ = new jmethodID[max_mid];
            mids$[mid_numericValue_f5813404cc5e3a1e] = env->getMethodID(cls, "numericValue", "()Ljava/lang/Number;");
            mids$[mid_setBytesValue_0bdfd2603b7490a8] = env->getMethodID(cls, "setBytesValue", "(Lorg/apache/lucene/util/BytesRef;)V");
            mids$[mid_toString_db9b55ba01e03e4b] = env->getMethodID(cls, "toString", "()Ljava/lang/String;");

            class$ = new ::java::lang::Class(cls);
            cls = (jclass) class$->this$;

            BYTES = env->getStaticIntField(cls, "BYTES");
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        ::java::lang::Number BigIntegerPoint::numericValue() const
        {
          return ::java::lang::Number(env->callObjectMethod(this$, mids$[mid_numericValue_f5813404cc5e3a1e]));
        }

        void BigIntegerPoint::setBytesValue(const ::org::apache::lucene::util::BytesRef & a0) const
        {
          env->callVoidMethod(this$, mids$[mid_setBytesValue_0bdfd2603b7490a8], a0.this$);
        }

        ::java::lang::String BigIntegerPoint::toString() const
        {
          return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_db9b55ba01e03e4b]));
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace document {
        static PyObject *t_BigIntegerPoint_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_BigIntegerPoint_instance_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_BigIntegerPoint_numericValue(t_BigIntegerPoint *self, PyObject *args);
        static PyObject *t_BigIntegerPoint_setBytesValue(t_BigIntegerPoint *self, PyObject *args);
        static PyObject *t_BigIntegerPoint_toString(t_BigIntegerPoint *self, PyObject *args);
        static int t_BigIntegerPoint_set__bytesValue(t_BigIntegerPoint *self, PyObject *arg, void *data);
        static PyGetSetDef t_BigIntegerPoint__fields_[] = {
          DECLARE_SET_FIELD(t_BigIntegerPoint, bytesValue),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_BigIntegerPoint__methods_[] = {
          DECLARE_METHOD(t_BigIntegerPoint, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_BigIntegerPoint, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_BigIntegerPoint, numericValue, METH_VARARGS),
          DECLARE_METHOD(t_BigIntegerPoint, setBytesValue, METH_VARARGS),
          DECLARE_METHOD(t_BigIntegerPoint, toString, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        static PyType_Slot PY_TYPE_SLOTS(BigIntegerPoint)[] = {
          { Py_tp_methods, t_BigIntegerPoint__methods_ },
          { Py_tp_init, (void *) abstract_init },
          { Py_tp_getset, t_BigIntegerPoint__fields_ },
          { 0, NULL }
        };

        static PyType_Def *PY_TYPE_BASES(BigIntegerPoint)[] = {
          &PY_TYPE_DEF(::org::apache::lucene::document::Field),
          NULL
        };

        DEFINE_TYPE(BigIntegerPoint, t_BigIntegerPoint, BigIntegerPoint);

        void t_BigIntegerPoint::install(PyObject *module)
        {
          installType(&PY_TYPE(BigIntegerPoint), &PY_TYPE_DEF(BigIntegerPoint), module, "BigIntegerPoint", 0);
        }

        void t_BigIntegerPoint::initialize(PyObject *module)
        {
          PyObject_SetAttrString((PyObject *) PY_TYPE(BigIntegerPoint), "class_", make_descriptor(BigIntegerPoint::initializeClass, 1));
          PyObject_SetAttrString((PyObject *) PY_TYPE(BigIntegerPoint), "wrapfn_", make_descriptor(t_BigIntegerPoint::wrap_jobject));
          PyObject_SetAttrString((PyObject *) PY_TYPE(BigIntegerPoint), "boxfn_", make_descriptor(boxObject));
          env->getClass(BigIntegerPoint::initializeClass);
          PyObject_SetAttrString((PyObject *) PY_TYPE(BigIntegerPoint), "BYTES", make_descriptor(BigIntegerPoint::BYTES));
        }

        static PyObject *t_BigIntegerPoint_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, BigIntegerPoint::initializeClass, 1)))
            return NULL;
          return t_BigIntegerPoint::wrap_Object(BigIntegerPoint(((t_BigIntegerPoint *) arg)->object.this$));
        }
        static PyObject *t_BigIntegerPoint_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, BigIntegerPoint::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static PyObject *t_BigIntegerPoint_numericValue(t_BigIntegerPoint *self, PyObject *args)
        {
          ::java::lang::Number result((jobject) NULL);

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.numericValue());
            return ::java::lang::t_Number::wrap_Object(result);
          }

          return callSuper(PY_TYPE(BigIntegerPoint), (PyObject *) self, "numericValue", args, 2);
        }

        static PyObject *t_BigIntegerPoint_setBytesValue(t_BigIntegerPoint *self, PyObject *args)
        {
          ::org::apache::lucene::util::BytesRef a0((jobject) NULL);

          if (!parseArgs(args, "k", ::org::apache::lucene::util::BytesRef::initializeClass, &a0))
          {
            OBJ_CALL(self->object.setBytesValue(a0));
            Py_RETURN_NONE;
          }

          return callSuper(PY_TYPE(BigIntegerPoint), (PyObject *) self, "setBytesValue", args, 2);
        }

        static PyObject *t_BigIntegerPoint_toString(t_BigIntegerPoint *self, PyObject *args)
        {
          ::java::lang::String result((jobject) NULL);

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.toString());
            return j2p(result);
          }

          return callSuper(PY_TYPE(BigIntegerPoint), (PyObject *) self, "toString", args, 2);
        }

        static int t_BigIntegerPoint_set__bytesValue(t_BigIntegerPoint *self, PyObject *arg, void *data)
        {
          {
            ::org::apache::lucene::util::BytesRef value((jobject) NULL);
            if (!parseArg(arg, "k", ::org::apache::lucene::util::BytesRef::initializeClass, &value))
            {
              INT_CALL(self->object.setBytesValue(value));
              return 0;
            }
          }
          PyErr_SetArgsError((PyObject *) self, "bytesValue", arg);
          return -1;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/hi/HindiStemFilterFactory.h"
#include "java/util/Map.h"
#include "java/lang/String.h"
#include "org/apache/lucene/analysis/TokenStream.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace hi {

          ::java::lang::Class *HindiStemFilterFactory::class$ = NULL;
          jmethodID *HindiStemFilterFactory::mids$ = NULL;
          bool HindiStemFilterFactory::live$ = false;
          ::java::lang::String *HindiStemFilterFactory::NAME = NULL;

          jclass HindiStemFilterFactory::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/hi/HindiStemFilterFactory");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_408bd889ee3beae5] = env->getMethodID(cls, "<init>", "(Ljava/util/Map;)V");
              mids$[mid_create_6de1e28d9d10cd9e] = env->getMethodID(cls, "create", "(Lorg/apache/lucene/analysis/TokenStream;)Lorg/apache/lucene/analysis/TokenStream;");

              class$ = new ::java::lang::Class(cls);
              cls = (jclass) class$->this$;

              NAME = new ::java::lang::String(env->getStaticObjectField(cls, "NAME", "Ljava/lang/String;"));
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          HindiStemFilterFactory::HindiStemFilterFactory(const ::java::util::Map & a0) : ::org::apache::lucene::analysis::util::TokenFilterFactory(env->newObject(initializeClass, &mids$, mid_init$_408bd889ee3beae5, a0.this$)) {}

          ::org::apache::lucene::analysis::TokenStream HindiStemFilterFactory::create(const ::org::apache::lucene::analysis::TokenStream & a0) const
          {
            return ::org::apache::lucene::analysis::TokenStream(env->callObjectMethod(this$, mids$[mid_create_6de1e28d9d10cd9e], a0.this$));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace hi {
          static PyObject *t_HindiStemFilterFactory_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_HindiStemFilterFactory_instance_(PyTypeObject *type, PyObject *arg);
          static int t_HindiStemFilterFactory_init_(t_HindiStemFilterFactory *self, PyObject *args, PyObject *kwds);
          static PyObject *t_HindiStemFilterFactory_create(t_HindiStemFilterFactory *self, PyObject *args);

          static PyMethodDef t_HindiStemFilterFactory__methods_[] = {
            DECLARE_METHOD(t_HindiStemFilterFactory, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_HindiStemFilterFactory, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_HindiStemFilterFactory, create, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          static PyType_Slot PY_TYPE_SLOTS(HindiStemFilterFactory)[] = {
            { Py_tp_methods, t_HindiStemFilterFactory__methods_ },
            { Py_tp_init, (void *) t_HindiStemFilterFactory_init_ },
            { 0, NULL }
          };

          static PyType_Def *PY_TYPE_BASES(HindiStemFilterFactory)[] = {
            &PY_TYPE_DEF(::org::apache::lucene::analysis::util::TokenFilterFactory),
            NULL
          };

          DEFINE_TYPE(HindiStemFilterFactory, t_HindiStemFilterFactory, HindiStemFilterFactory);

          void t_HindiStemFilterFactory::install(PyObject *module)
          {
            installType(&PY_TYPE(HindiStemFilterFactory), &PY_TYPE_DEF(HindiStemFilterFactory), module, "HindiStemFilterFactory", 0);
          }

          void t_HindiStemFilterFactory::initialize(PyObject *module)
          {
            PyObject_SetAttrString((PyObject *) PY_TYPE(HindiStemFilterFactory), "class_", make_descriptor(HindiStemFilterFactory::initializeClass, 1));
            PyObject_SetAttrString((PyObject *) PY_TYPE(HindiStemFilterFactory), "wrapfn_", make_descriptor(t_HindiStemFilterFactory::wrap_jobject));
            PyObject_SetAttrString((PyObject *) PY_TYPE(HindiStemFilterFactory), "boxfn_", make_descriptor(boxObject));
            env->getClass(HindiStemFilterFactory::initializeClass);
            PyObject_SetAttrString((PyObject *) PY_TYPE(HindiStemFilterFactory), "NAME", make_descriptor(j2p(*HindiStemFilterFactory::NAME)));
          }

          static PyObject *t_HindiStemFilterFactory_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, HindiStemFilterFactory::initializeClass, 1)))
              return NULL;
            return t_HindiStemFilterFactory::wrap_Object(HindiStemFilterFactory(((t_HindiStemFilterFactory *) arg)->object.this$));
          }
          static PyObject *t_HindiStemFilterFactory_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, HindiStemFilterFactory::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_HindiStemFilterFactory_init_(t_HindiStemFilterFactory *self, PyObject *args, PyObject *kwds)
          {
            ::java::util::Map a0((jobject) NULL);
            PyTypeObject **p0;
            HindiStemFilterFactory object((jobject) NULL);

            if (!parseArgs(args, "K", ::java::util::Map::initializeClass, &a0, &p0, ::java::util::t_Map::parameters_))
            {
              INT_CALL(object = HindiStemFilterFactory(a0));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_HindiStemFilterFactory_create(t_HindiStemFilterFactory *self, PyObject *args)
          {
            ::org::apache::lucene::analysis::TokenStream a0((jobject) NULL);
            ::org::apache::lucene::analysis::TokenStream result((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::analysis::TokenStream::initializeClass, &a0))
            {
              OBJ_CALL(result = self->object.create(a0));
              return ::org::apache::lucene::analysis::t_TokenStream::wrap_Object(result);
            }

            return callSuper(PY_TYPE(HindiStemFilterFactory), (PyObject *) self, "create", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/document/Field$Store.h"
#include "org/apache/lucene/document/Field$Store.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace document {

        ::java::lang::Class *Field$Store::class$ = NULL;
        jmethodID *Field$Store::mids$ = NULL;
        bool Field$Store::live$ = false;
        Field$Store *Field$Store::NO = NULL;
        Field$Store *Field$Store::YES = NULL;

        jclass Field$Store::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/document/Field$Store");

            mids$ = new jmethodID[max_mid];
            mids$[mid_valueOf_0169f818466777d4] = env->getStaticMethodID(cls, "valueOf", "(Ljava/lang/String;)Lorg/apache/lucene/document/Field$Store;");
            mids$[mid_values_f23917e1b333f907] = env->getStaticMethodID(cls, "values", "()[Lorg/apache/lucene/document/Field$Store;");

            class$ = new ::java::lang::Class(cls);
            cls = (jclass) class$->this$;

            NO = new Field$Store(env->getStaticObjectField(cls, "NO", "Lorg/apache/lucene/document/Field$Store;"));
            YES = new Field$Store(env->getStaticObjectField(cls, "YES", "Lorg/apache/lucene/document/Field$Store;"));
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        Field$Store Field$Store::valueOf(const ::java::lang::String & a0)
        {
          jclass cls = env->getClass(initializeClass);
          return Field$Store(env->callStaticObjectMethod(cls, mids$[mid_valueOf_0169f818466777d4], a0.this$));
        }

        JArray< Field$Store > Field$Store::values()
        {
          jclass cls = env->getClass(initializeClass);
          return JArray< Field$Store >(env->callStaticObjectMethod(cls, mids$[mid_values_f23917e1b333f907]));
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace document {
        static PyObject *t_Field$Store_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_Field$Store_instance_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_Field$Store_of_(t_Field$Store *self, PyObject *args);
        static PyObject *t_Field$Store_valueOf(PyTypeObject *type, PyObject *args);
        static PyObject *t_Field$Store_values(PyTypeObject *type);
        static PyObject *t_Field$Store_get__parameters_(t_Field$Store *self, void *data);
        static PyGetSetDef t_Field$Store__fields_[] = {
          DECLARE_GET_FIELD(t_Field$Store, parameters_),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_Field$Store__methods_[] = {
          DECLARE_METHOD(t_Field$Store, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_Field$Store, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_Field$Store, of_, METH_VARARGS),
          DECLARE_METHOD(t_Field$Store, valueOf, METH_VARARGS | METH_CLASS),
          DECLARE_METHOD(t_Field$Store, values, METH_NOARGS | METH_CLASS),
          { NULL, NULL, 0, NULL }
        };

        static PyType_Slot PY_TYPE_SLOTS(Field$Store)[] = {
          { Py_tp_methods, t_Field$Store__methods_ },
          { Py_tp_init, (void *) abstract_init },
          { Py_tp_getset, t_Field$Store__fields_ },
          { 0, NULL }
        };

        static PyType_Def *PY_TYPE_BASES(Field$Store)[] = {
          &PY_TYPE_DEF(::java::lang::Enum),
          NULL
        };

        DEFINE_TYPE(Field$Store, t_Field$Store, Field$Store);
        PyObject *t_Field$Store::wrap_Object(const Field$Store& object, PyTypeObject *p0)
        {
          PyObject *obj = t_Field$Store::wrap_Object(object);
          if (obj != NULL && obj != Py_None)
          {
            t_Field$Store *self = (t_Field$Store *) obj;
            self->parameters[0] = p0;
          }
          return obj;
        }

        PyObject *t_Field$Store::wrap_jobject(const jobject& object, PyTypeObject *p0)
        {
          PyObject *obj = t_Field$Store::wrap_jobject(object);
          if (obj != NULL && obj != Py_None)
          {
            t_Field$Store *self = (t_Field$Store *) obj;
            self->parameters[0] = p0;
          }
          return obj;
        }

        void t_Field$Store::install(PyObject *module)
        {
          installType(&PY_TYPE(Field$Store), &PY_TYPE_DEF(Field$Store), module, "Field$Store", 0);
        }

        void t_Field$Store::initialize(PyObject *module)
        {
          PyObject_SetAttrString((PyObject *) PY_TYPE(Field$Store), "class_", make_descriptor(Field$Store::initializeClass, 1));
          PyObject_SetAttrString((PyObject *) PY_TYPE(Field$Store), "wrapfn_", make_descriptor(t_Field$Store::wrap_jobject));
          PyObject_SetAttrString((PyObject *) PY_TYPE(Field$Store), "boxfn_", make_descriptor(boxObject));
          env->getClass(Field$Store::initializeClass);
          PyObject_SetAttrString((PyObject *) PY_TYPE(Field$Store), "NO", make_descriptor(t_Field$Store::wrap_Object(*Field$Store::NO)));
          PyObject_SetAttrString((PyObject *) PY_TYPE(Field$Store), "YES", make_descriptor(t_Field$Store::wrap_Object(*Field$Store::YES)));
        }

        static PyObject *t_Field$Store_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, Field$Store::initializeClass, 1)))
            return NULL;
          return t_Field$Store::wrap_Object(Field$Store(((t_Field$Store *) arg)->object.this$));
        }
        static PyObject *t_Field$Store_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, Field$Store::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static PyObject *t_Field$Store_of_(t_Field$Store *self, PyObject *args)
        {
          if (!parseArg(args, "T", 1, &(self->parameters)))
            Py_RETURN_SELF;
          return PyErr_SetArgsError((PyObject *) self, "of_", args);
        }

        static PyObject *t_Field$Store_valueOf(PyTypeObject *type, PyObject *args)
        {
          ::java::lang::String a0((jobject) NULL);
          Field$Store result((jobject) NULL);

          if (!parseArgs(args, "s", &a0))
          {
            OBJ_CALL(result = ::org::apache::lucene::document::Field$Store::valueOf(a0));
            return t_Field$Store::wrap_Object(result);
          }

          return callSuper(type, "valueOf", args, 2);
        }

        static PyObject *t_Field$Store_values(PyTypeObject *type)
        {
          JArray< Field$Store > result((jobject) NULL);
          OBJ_CALL(result = ::org::apache::lucene::document::Field$Store::values());
          return JArray<jobject>(result.this$).wrap(t_Field$Store::wrap_jobject);
        }
        static PyObject *t_Field$Store_get__parameters_(t_Field$Store *self, void *data)
        {
          return typeParameters(self->parameters, sizeof(self->parameters));
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/facet/range/Range.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace facet {
        namespace range {

          ::java::lang::Class *Range::class$ = NULL;
          jmethodID *Range::mids$ = NULL;
          jfieldID *Range::fids$ = NULL;
          bool Range::live$ = false;

          jclass Range::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/facet/range/Range");

              mids$ = new jmethodID[max_mid];
              mids$[mid_failNoMatch_f2cc1bce94666404] = env->getMethodID(cls, "failNoMatch", "()V");

              fids$ = new jfieldID[max_fid];
              fids$[fid_label] = env->getFieldID(cls, "label", "Ljava/lang/String;");

              class$ = new ::java::lang::Class(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          ::java::lang::String Range::_get_label() const
          {
            return ::java::lang::String(env->getObjectField(this$, fids$[fid_label]));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace facet {
        namespace range {
          static PyObject *t_Range_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_Range_instance_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_Range_get__label(t_Range *self, void *data);

          static PyGetSetDef t_Range__fields_[] = {
            DECLARE_GET_FIELD(t_Range, label),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_Range__methods_[] = {
            DECLARE_METHOD(t_Range, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_Range, instance_, METH_O | METH_CLASS),
            { NULL, NULL, 0, NULL }
          };

          static PyType_Slot PY_TYPE_SLOTS(Range)[] = {
            { Py_tp_methods, t_Range__methods_ },
            { Py_tp_init, (void *) abstract_init },
            { Py_tp_getset, t_Range__fields_ },
            { 0, NULL }
          };

          static PyType_Def *PY_TYPE_BASES(Range)[] = {
            &PY_TYPE_DEF(::java::lang::Object),
            NULL
          };

          DEFINE_TYPE(Range, t_Range, Range);

          void t_Range::install(PyObject *module)
          {
            installType(&PY_TYPE(Range), &PY_TYPE_DEF(Range), module, "Range", 0);
          }

          void t_Range::initialize(PyObject *module)
          {
            PyObject_SetAttrString((PyObject *) PY_TYPE(Range), "class_", make_descriptor(Range::initializeClass, 1));
            PyObject_SetAttrString((PyObject *) PY_TYPE(Range), "wrapfn_", make_descriptor(t_Range::wrap_jobject));
            PyObject_SetAttrString((PyObject *) PY_TYPE(Range), "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_Range_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, Range::initializeClass, 1)))
              return NULL;
            return t_Range::wrap_Object(Range(((t_Range *) arg)->object.this$));
          }
          static PyObject *t_Range_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, Range::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static PyObject *t_Range_get__label(t_Range *self, void *data)
          {
            ::java::lang::String value((jobject) NULL);
            OBJ_CALL(value = self->object._get_label());
            return j2p(value);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/similarities/AxiomaticF1EXP.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace similarities {

          ::java::lang::Class *AxiomaticF1EXP::class$ = NULL;
          jmethodID *AxiomaticF1EXP::mids$ = NULL;
          bool AxiomaticF1EXP::live$ = false;

          jclass AxiomaticF1EXP::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/search/similarities/AxiomaticF1EXP");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_f2cc1bce94666404] = env->getMethodID(cls, "<init>", "()V");
              mids$[mid_init$_8e1d952dd65cdc3a] = env->getMethodID(cls, "<init>", "(F)V");
              mids$[mid_init$_5a9245193073da7b] = env->getMethodID(cls, "<init>", "(FF)V");
              mids$[mid_toString_db9b55ba01e03e4b] = env->getMethodID(cls, "toString", "()Ljava/lang/String;");
              mids$[mid_idf_761ab1c432346fd0] = env->getMethodID(cls, "idf", "(Lorg/apache/lucene/search/similarities/BasicStats;DD)D");
              mids$[mid_gamma_761ab1c432346fd0] = env->getMethodID(cls, "gamma", "(Lorg/apache/lucene/search/similarities/BasicStats;DD)D");
              mids$[mid_tf_761ab1c432346fd0] = env->getMethodID(cls, "tf", "(Lorg/apache/lucene/search/similarities/BasicStats;DD)D");
              mids$[mid_idfExplain_77a68ba236144920] = env->getMethodID(cls, "idfExplain", "(Lorg/apache/lucene/search/similarities/BasicStats;DD)Lorg/apache/lucene/search/Explanation;");
              mids$[mid_tfln_761ab1c432346fd0] = env->getMethodID(cls, "tfln", "(Lorg/apache/lucene/search/similarities/BasicStats;DD)D");
              mids$[mid_tflnExplain_77a68ba236144920] = env->getMethodID(cls, "tflnExplain", "(Lorg/apache/lucene/search/similarities/BasicStats;DD)Lorg/apache/lucene/search/Explanation;");
              mids$[mid_ln_761ab1c432346fd0] = env->getMethodID(cls, "ln", "(Lorg/apache/lucene/search/similarities/BasicStats;DD)D");
              mids$[mid_lnExplain_77a68ba236144920] = env->getMethodID(cls, "lnExplain", "(Lorg/apache/lucene/search/similarities/BasicStats;DD)Lorg/apache/lucene/search/Explanation;");
              mids$[mid_tfExplain_77a68ba236144920] = env->getMethodID(cls, "tfExplain", "(Lorg/apache/lucene/search/similarities/BasicStats;DD)Lorg/apache/lucene/search/Explanation;");

              class$ = new ::java::lang::Class(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          AxiomaticF1EXP::AxiomaticF1EXP() : ::org::apache::lucene::search::similarities::Axiomatic(env->newObject(initializeClass, &mids$, mid_init$_f2cc1bce94666404)) {}

          AxiomaticF1EXP::AxiomaticF1EXP(jfloat a0) : ::org::apache::lucene::search::similarities::Axiomatic(env->newObject(initializeClass, &mids$, mid_init$_8e1d952dd65cdc3a, a0)) {}

          AxiomaticF1EXP::AxiomaticF1EXP(jfloat a0, jfloat a1) : ::org::apache::lucene::search::similarities::Axiomatic(env->newObject(initializeClass, &mids$, mid_init$_5a9245193073da7b, a0, a1)) {}

          ::java::lang::String AxiomaticF1EXP::toString() const
          {
            return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_db9b55ba01e03e4b]));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace similarities {
          static PyObject *t_AxiomaticF1EXP_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_AxiomaticF1EXP_instance_(PyTypeObject *type, PyObject *arg);
          static int t_AxiomaticF1EXP_init_(t_AxiomaticF1EXP *self, PyObject *args, PyObject *kwds);
          static PyObject *t_AxiomaticF1EXP_toString(t_AxiomaticF1EXP *self, PyObject *args);

          static PyMethodDef t_AxiomaticF1EXP__methods_[] = {
            DECLARE_METHOD(t_AxiomaticF1EXP, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_AxiomaticF1EXP, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_AxiomaticF1EXP, toString, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          static PyType_Slot PY_TYPE_SLOTS(AxiomaticF1EXP)[] = {
            { Py_tp_methods, t_AxiomaticF1EXP__methods_ },
            { Py_tp_init, (void *) t_AxiomaticF1EXP_init_ },
            { 0, NULL }
          };

          static PyType_Def *PY_TYPE_BASES(AxiomaticF1EXP)[] = {
            &PY_TYPE_DEF(::org::apache::lucene::search::similarities::Axiomatic),
            NULL
          };

          DEFINE_TYPE(AxiomaticF1EXP, t_AxiomaticF1EXP, AxiomaticF1EXP);

          void t_AxiomaticF1EXP::install(PyObject *module)
          {
            installType(&PY_TYPE(AxiomaticF1EXP), &PY_TYPE_DEF(AxiomaticF1EXP), module, "AxiomaticF1EXP", 0);
          }

          void t_AxiomaticF1EXP::initialize(PyObject *module)
          {
            PyObject_SetAttrString((PyObject *) PY_TYPE(AxiomaticF1EXP), "class_", make_descriptor(AxiomaticF1EXP::initializeClass, 1));
            PyObject_SetAttrString((PyObject *) PY_TYPE(AxiomaticF1EXP), "wrapfn_", make_descriptor(t_AxiomaticF1EXP::wrap_jobject));
            PyObject_SetAttrString((PyObject *) PY_TYPE(AxiomaticF1EXP), "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_AxiomaticF1EXP_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, AxiomaticF1EXP::initializeClass, 1)))
              return NULL;
            return t_AxiomaticF1EXP::wrap_Object(AxiomaticF1EXP(((t_AxiomaticF1EXP *) arg)->object.this$));
          }
          static PyObject *t_AxiomaticF1EXP_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, AxiomaticF1EXP::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_AxiomaticF1EXP_init_(t_AxiomaticF1EXP *self, PyObject *args, PyObject *kwds)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 0:
              {
                AxiomaticF1EXP object((jobject) NULL);

                INT_CALL(object = AxiomaticF1EXP());
                self->object = object;
                break;
              }
             case 1:
              {
                jfloat a0;
                AxiomaticF1EXP object((jobject) NULL);

                if (!parseArgs(args, "F", &a0))
                {
                  INT_CALL(object = AxiomaticF1EXP(a0));
                  self->object = object;
                  break;
                }
              }
              goto err;
             case 2:
              {
                jfloat a0;
                jfloat a1;
                AxiomaticF1EXP object((jobject) NULL);

                if (!parseArgs(args, "FF", &a0, &a1))
                {
                  INT_CALL(object = AxiomaticF1EXP(a0, a1));
                  self->object = object;
                  break;
                }
              }
             default:
             err:
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_AxiomaticF1EXP_toString(t_AxiomaticF1EXP *self, PyObject *args)
          {
            ::java::lang::String result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.toString());
              return j2p(result);
            }

            return callSuper(PY_TYPE(AxiomaticF1EXP), (PyObject *) self, "toString", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/hunspell/TimeoutPolicy.h"
#include "java/lang/String.h"
#include "org/apache/lucene/analysis/hunspell/TimeoutPolicy.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace hunspell {

          ::java::lang::Class *TimeoutPolicy::class$ = NULL;
          jmethodID *TimeoutPolicy::mids$ = NULL;
          bool TimeoutPolicy::live$ = false;
          TimeoutPolicy *TimeoutPolicy::NO_TIMEOUT = NULL;
          TimeoutPolicy *TimeoutPolicy::RETURN_PARTIAL_RESULT = NULL;
          TimeoutPolicy *TimeoutPolicy::THROW_EXCEPTION = NULL;

          jclass TimeoutPolicy::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/hunspell/TimeoutPolicy");

              mids$ = new jmethodID[max_mid];
              mids$[mid_valueOf_c4f57937beecf166] = env->getStaticMethodID(cls, "valueOf", "(Ljava/lang/String;)Lorg/apache/lucene/analysis/hunspell/TimeoutPolicy;");
              mids$[mid_values_7ce7043b76dcb00a] = env->getStaticMethodID(cls, "values", "()[Lorg/apache/lucene/analysis/hunspell/TimeoutPolicy;");

              class$ = new ::java::lang::Class(cls);
              cls = (jclass) class$->this$;

              NO_TIMEOUT = new TimeoutPolicy(env->getStaticObjectField(cls, "NO_TIMEOUT", "Lorg/apache/lucene/analysis/hunspell/TimeoutPolicy;"));
              RETURN_PARTIAL_RESULT = new TimeoutPolicy(env->getStaticObjectField(cls, "RETURN_PARTIAL_RESULT", "Lorg/apache/lucene/analysis/hunspell/TimeoutPolicy;"));
              THROW_EXCEPTION = new TimeoutPolicy(env->getStaticObjectField(cls, "THROW_EXCEPTION", "Lorg/apache/lucene/analysis/hunspell/TimeoutPolicy;"));
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          TimeoutPolicy TimeoutPolicy::valueOf(const ::java::lang::String & a0)
          {
            jclass cls = env->getClass(initializeClass);
            return TimeoutPolicy(env->callStaticObjectMethod(cls, mids$[mid_valueOf_c4f57937beecf166], a0.this$));
          }

          JArray< TimeoutPolicy > TimeoutPolicy::values()
          {
            jclass cls = env->getClass(initializeClass);
            return JArray< TimeoutPolicy >(env->callStaticObjectMethod(cls, mids$[mid_values_7ce7043b76dcb00a]));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace hunspell {
          static PyObject *t_TimeoutPolicy_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_TimeoutPolicy_instance_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_TimeoutPolicy_of_(t_TimeoutPolicy *self, PyObject *args);
          static PyObject *t_TimeoutPolicy_valueOf(PyTypeObject *type, PyObject *args);
          static PyObject *t_TimeoutPolicy_values(PyTypeObject *type);
          static PyObject *t_TimeoutPolicy_get__parameters_(t_TimeoutPolicy *self, void *data);
          static PyGetSetDef t_TimeoutPolicy__fields_[] = {
            DECLARE_GET_FIELD(t_TimeoutPolicy, parameters_),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_TimeoutPolicy__methods_[] = {
            DECLARE_METHOD(t_TimeoutPolicy, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_TimeoutPolicy, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_TimeoutPolicy, of_, METH_VARARGS),
            DECLARE_METHOD(t_TimeoutPolicy, valueOf, METH_VARARGS | METH_CLASS),
            DECLARE_METHOD(t_TimeoutPolicy, values, METH_NOARGS | METH_CLASS),
            { NULL, NULL, 0, NULL }
          };

          static PyType_Slot PY_TYPE_SLOTS(TimeoutPolicy)[] = {
            { Py_tp_methods, t_TimeoutPolicy__methods_ },
            { Py_tp_init, (void *) abstract_init },
            { Py_tp_getset, t_TimeoutPolicy__fields_ },
            { 0, NULL }
          };

          static PyType_Def *PY_TYPE_BASES(TimeoutPolicy)[] = {
            &PY_TYPE_DEF(::java::lang::Enum),
            NULL
          };

          DEFINE_TYPE(TimeoutPolicy, t_TimeoutPolicy, TimeoutPolicy);
          PyObject *t_TimeoutPolicy::wrap_Object(const TimeoutPolicy& object, PyTypeObject *p0)
          {
            PyObject *obj = t_TimeoutPolicy::wrap_Object(object);
            if (obj != NULL && obj != Py_None)
            {
              t_TimeoutPolicy *self = (t_TimeoutPolicy *) obj;
              self->parameters[0] = p0;
            }
            return obj;
          }

          PyObject *t_TimeoutPolicy::wrap_jobject(const jobject& object, PyTypeObject *p0)
          {
            PyObject *obj = t_TimeoutPolicy::wrap_jobject(object);
            if (obj != NULL && obj != Py_None)
            {
              t_TimeoutPolicy *self = (t_TimeoutPolicy *) obj;
              self->parameters[0] = p0;
            }
            return obj;
          }

          void t_TimeoutPolicy::install(PyObject *module)
          {
            installType(&PY_TYPE(TimeoutPolicy), &PY_TYPE_DEF(TimeoutPolicy), module, "TimeoutPolicy", 0);
          }

          void t_TimeoutPolicy::initialize(PyObject *module)
          {
            PyObject_SetAttrString((PyObject *) PY_TYPE(TimeoutPolicy), "class_", make_descriptor(TimeoutPolicy::initializeClass, 1));
            PyObject_SetAttrString((PyObject *) PY_TYPE(TimeoutPolicy), "wrapfn_", make_descriptor(t_TimeoutPolicy::wrap_jobject));
            PyObject_SetAttrString((PyObject *) PY_TYPE(TimeoutPolicy), "boxfn_", make_descriptor(boxObject));
            env->getClass(TimeoutPolicy::initializeClass);
            PyObject_SetAttrString((PyObject *) PY_TYPE(TimeoutPolicy), "NO_TIMEOUT", make_descriptor(t_TimeoutPolicy::wrap_Object(*TimeoutPolicy::NO_TIMEOUT)));
            PyObject_SetAttrString((PyObject *) PY_TYPE(TimeoutPolicy), "RETURN_PARTIAL_RESULT", make_descriptor(t_TimeoutPolicy::wrap_Object(*TimeoutPolicy::RETURN_PARTIAL_RESULT)));
            PyObject_SetAttrString((PyObject *) PY_TYPE(TimeoutPolicy), "THROW_EXCEPTION", make_descriptor(t_TimeoutPolicy::wrap_Object(*TimeoutPolicy::THROW_EXCEPTION)));
          }

          static PyObject *t_TimeoutPolicy_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, TimeoutPolicy::initializeClass, 1)))
              return NULL;
            return t_TimeoutPolicy::wrap_Object(TimeoutPolicy(((t_TimeoutPolicy *) arg)->object.this$));
          }
          static PyObject *t_TimeoutPolicy_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, TimeoutPolicy::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static PyObject *t_TimeoutPolicy_of_(t_TimeoutPolicy *self, PyObject *args)
          {
            if (!parseArg(args, "T", 1, &(self->parameters)))
              Py_RETURN_SELF;
            return PyErr_SetArgsError((PyObject *) self, "of_", args);
          }

          static PyObject *t_TimeoutPolicy_valueOf(PyTypeObject *type, PyObject *args)
          {
            ::java::lang::String a0((jobject) NULL);
            TimeoutPolicy result((jobject) NULL);

            if (!parseArgs(args, "s", &a0))
            {
              OBJ_CALL(result = ::org::apache::lucene::analysis::hunspell::TimeoutPolicy::valueOf(a0));
              return t_TimeoutPolicy::wrap_Object(result);
            }

            return callSuper(type, "valueOf", args, 2);
          }

          static PyObject *t_TimeoutPolicy_values(PyTypeObject *type)
          {
            JArray< TimeoutPolicy > result((jobject) NULL);
            OBJ_CALL(result = ::org::apache::lucene::analysis::hunspell::TimeoutPolicy::values());
            return JArray<jobject>(result.this$).wrap(t_TimeoutPolicy::wrap_jobject);
          }
          static PyObject *t_TimeoutPolicy_get__parameters_(t_TimeoutPolicy *self, void *data)
          {
            return typeParameters(self->parameters, sizeof(self->parameters));
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/miscellaneous/DelimitedTermFrequencyTokenFilterFactory.h"
#include "java/util/Map.h"
#include "org/apache/lucene/analysis/miscellaneous/DelimitedTermFrequencyTokenFilter.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/analysis/TokenStream.h"
#include "java/lang/String.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace miscellaneous {

          ::java::lang::Class *DelimitedTermFrequencyTokenFilterFactory::class$ = NULL;
          jmethodID *DelimitedTermFrequencyTokenFilterFactory::mids$ = NULL;
          bool DelimitedTermFrequencyTokenFilterFactory::live$ = false;
          ::java::lang::String *DelimitedTermFrequencyTokenFilterFactory::DELIMITER_ATTR = NULL;
          ::java::lang::String *DelimitedTermFrequencyTokenFilterFactory::NAME = NULL;

          jclass DelimitedTermFrequencyTokenFilterFactory::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/miscellaneous/DelimitedTermFrequencyTokenFilterFactory");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_408bd889ee3beae5] = env->getMethodID(cls, "<init>", "(Ljava/util/Map;)V");
              mids$[mid_create_3dac25e6dd3bddca] = env->getMethodID(cls, "create", "(Lorg/apache/lucene/analysis/TokenStream;)Lorg/apache/lucene/analysis/miscellaneous/DelimitedTermFrequencyTokenFilter;");

              class$ = new ::java::lang::Class(cls);
              cls = (jclass) class$->this$;

              DELIMITER_ATTR = new ::java::lang::String(env->getStaticObjectField(cls, "DELIMITER_ATTR", "Ljava/lang/String;"));
              NAME = new ::java::lang::String(env->getStaticObjectField(cls, "NAME", "Ljava/lang/String;"));
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          DelimitedTermFrequencyTokenFilterFactory::DelimitedTermFrequencyTokenFilterFactory(const ::java::util::Map & a0) : ::org::apache::lucene::analysis::util::TokenFilterFactory(env->newObject(initializeClass, &mids$, mid_init$_408bd889ee3beae5, a0.this$)) {}

          ::org::apache::lucene::analysis::miscellaneous::DelimitedTermFrequencyTokenFilter DelimitedTermFrequencyTokenFilterFactory::create(const ::org::apache::lucene::analysis::TokenStream & a0) const
          {
            return ::org::apache::lucene::analysis::miscellaneous::DelimitedTermFrequencyTokenFilter(env->callObjectMethod(this$, mids$[mid_create_3dac25e6dd3bddca], a0.this$));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace miscellaneous {
          static PyObject *t_DelimitedTermFrequencyTokenFilterFactory_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_DelimitedTermFrequencyTokenFilterFactory_instance_(PyTypeObject *type, PyObject *arg);
          static int t_DelimitedTermFrequencyTokenFilterFactory_init_(t_DelimitedTermFrequencyTokenFilterFactory *self, PyObject *args, PyObject *kwds);
          static PyObject *t_DelimitedTermFrequencyTokenFilterFactory_create(t_DelimitedTermFrequencyTokenFilterFactory *self, PyObject *args);

          static PyMethodDef t_DelimitedTermFrequencyTokenFilterFactory__methods_[] = {
            DECLARE_METHOD(t_DelimitedTermFrequencyTokenFilterFactory, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_DelimitedTermFrequencyTokenFilterFactory, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_DelimitedTermFrequencyTokenFilterFactory, create, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          static PyType_Slot PY_TYPE_SLOTS(DelimitedTermFrequencyTokenFilterFactory)[] = {
            { Py_tp_methods, t_DelimitedTermFrequencyTokenFilterFactory__methods_ },
            { Py_tp_init, (void *) t_DelimitedTermFrequencyTokenFilterFactory_init_ },
            { 0, NULL }
          };

          static PyType_Def *PY_TYPE_BASES(DelimitedTermFrequencyTokenFilterFactory)[] = {
            &PY_TYPE_DEF(::org::apache::lucene::analysis::util::TokenFilterFactory),
            NULL
          };

          DEFINE_TYPE(DelimitedTermFrequencyTokenFilterFactory, t_DelimitedTermFrequencyTokenFilterFactory, DelimitedTermFrequencyTokenFilterFactory);

          void t_DelimitedTermFrequencyTokenFilterFactory::install(PyObject *module)
          {
            installType(&PY_TYPE(DelimitedTermFrequencyTokenFilterFactory), &PY_TYPE_DEF(DelimitedTermFrequencyTokenFilterFactory), module, "DelimitedTermFrequencyTokenFilterFactory", 0);
          }

          void t_DelimitedTermFrequencyTokenFilterFactory::initialize(PyObject *module)
          {
            PyObject_SetAttrString((PyObject *) PY_TYPE(DelimitedTermFrequencyTokenFilterFactory), "class_", make_descriptor(DelimitedTermFrequencyTokenFilterFactory::initializeClass, 1));
            PyObject_SetAttrString((PyObject *) PY_TYPE(DelimitedTermFrequencyTokenFilterFactory), "wrapfn_", make_descriptor(t_DelimitedTermFrequencyTokenFilterFactory::wrap_jobject));
            PyObject_SetAttrString((PyObject *) PY_TYPE(DelimitedTermFrequencyTokenFilterFactory), "boxfn_", make_descriptor(boxObject));
            env->getClass(DelimitedTermFrequencyTokenFilterFactory::initializeClass);
            PyObject_SetAttrString((PyObject *) PY_TYPE(DelimitedTermFrequencyTokenFilterFactory), "DELIMITER_ATTR", make_descriptor(j2p(*DelimitedTermFrequencyTokenFilterFactory::DELIMITER_ATTR)));
            PyObject_SetAttrString((PyObject *) PY_TYPE(DelimitedTermFrequencyTokenFilterFactory), "NAME", make_descriptor(j2p(*DelimitedTermFrequencyTokenFilterFactory::NAME)));
          }

          static PyObject *t_DelimitedTermFrequencyTokenFilterFactory_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, DelimitedTermFrequencyTokenFilterFactory::initializeClass, 1)))
              return NULL;
            return t_DelimitedTermFrequencyTokenFilterFactory::wrap_Object(DelimitedTermFrequencyTokenFilterFactory(((t_DelimitedTermFrequencyTokenFilterFactory *) arg)->object.this$));
          }
          static PyObject *t_DelimitedTermFrequencyTokenFilterFactory_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, DelimitedTermFrequencyTokenFilterFactory::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_DelimitedTermFrequencyTokenFilterFactory_init_(t_DelimitedTermFrequencyTokenFilterFactory *self, PyObject *args, PyObject *kwds)
          {
            ::java::util::Map a0((jobject) NULL);
            PyTypeObject **p0;
            DelimitedTermFrequencyTokenFilterFactory object((jobject) NULL);

            if (!parseArgs(args, "K", ::java::util::Map::initializeClass, &a0, &p0, ::java::util::t_Map::parameters_))
            {
              INT_CALL(object = DelimitedTermFrequencyTokenFilterFactory(a0));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_DelimitedTermFrequencyTokenFilterFactory_create(t_DelimitedTermFrequencyTokenFilterFactory *self, PyObject *args)
          {
            ::org::apache::lucene::analysis::TokenStream a0((jobject) NULL);
            ::org::apache::lucene::analysis::miscellaneous::DelimitedTermFrequencyTokenFilter result((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::analysis::TokenStream::initializeClass, &a0))
            {
              OBJ_CALL(result = self->object.create(a0));
              return ::org::apache::lucene::analysis::miscellaneous::t_DelimitedTermFrequencyTokenFilter::wrap_Object(result);
            }

            return callSuper(PY_TYPE(DelimitedTermFrequencyTokenFilterFactory), (PyObject *) self, "create", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/facet/taxonomy/TaxonomyFacetLabels.h"
#include "org/apache/lucene/index/LeafReaderContext.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/facet/taxonomy/TaxonomyFacetLabels$FacetLabelReader.h"
#include "org/apache/lucene/facet/taxonomy/TaxonomyReader.h"
#include "java/lang/String.h"
#include "java/io/IOException.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace facet {
        namespace taxonomy {

          ::java::lang::Class *TaxonomyFacetLabels::class$ = NULL;
          jmethodID *TaxonomyFacetLabels::mids$ = NULL;
          bool TaxonomyFacetLabels::live$ = false;

          jclass TaxonomyFacetLabels::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/facet/taxonomy/TaxonomyFacetLabels");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_a10153cacfdaf5fc] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/facet/taxonomy/TaxonomyReader;Ljava/lang/String;)V");
              mids$[mid_getFacetLabelReader_c265420422e9e4e1] = env->getMethodID(cls, "getFacetLabelReader", "(Lorg/apache/lucene/index/LeafReaderContext;)Lorg/apache/lucene/facet/taxonomy/TaxonomyFacetLabels$FacetLabelReader;");

              class$ = new ::java::lang::Class(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          TaxonomyFacetLabels::TaxonomyFacetLabels(const ::org::apache::lucene::facet::taxonomy::TaxonomyReader & a0, const ::java::lang::String & a1) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_a10153cacfdaf5fc, a0.this$, a1.this$)) {}

          ::org::apache::lucene::facet::taxonomy::TaxonomyFacetLabels$FacetLabelReader TaxonomyFacetLabels::getFacetLabelReader(const ::org::apache::lucene::index::LeafReaderContext & a0) const
          {
            return ::org::apache::lucene::facet::taxonomy::TaxonomyFacetLabels$FacetLabelReader(env->callObjectMethod(this$, mids$[mid_getFacetLabelReader_c265420422e9e4e1], a0.this$));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace facet {
        namespace taxonomy {
          static PyObject *t_TaxonomyFacetLabels_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_TaxonomyFacetLabels_instance_(PyTypeObject *type, PyObject *arg);
          static int t_TaxonomyFacetLabels_init_(t_TaxonomyFacetLabels *self, PyObject *args, PyObject *kwds);
          static PyObject *t_TaxonomyFacetLabels_getFacetLabelReader(t_TaxonomyFacetLabels *self, PyObject *arg);

          static PyMethodDef t_TaxonomyFacetLabels__methods_[] = {
            DECLARE_METHOD(t_TaxonomyFacetLabels, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_TaxonomyFacetLabels, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_TaxonomyFacetLabels, getFacetLabelReader, METH_O),
            { NULL, NULL, 0, NULL }
          };

          static PyType_Slot PY_TYPE_SLOTS(TaxonomyFacetLabels)[] = {
            { Py_tp_methods, t_TaxonomyFacetLabels__methods_ },
            { Py_tp_init, (void *) t_TaxonomyFacetLabels_init_ },
            { 0, NULL }
          };

          static PyType_Def *PY_TYPE_BASES(TaxonomyFacetLabels)[] = {
            &PY_TYPE_DEF(::java::lang::Object),
            NULL
          };

          DEFINE_TYPE(TaxonomyFacetLabels, t_TaxonomyFacetLabels, TaxonomyFacetLabels);

          void t_TaxonomyFacetLabels::install(PyObject *module)
          {
            installType(&PY_TYPE(TaxonomyFacetLabels), &PY_TYPE_DEF(TaxonomyFacetLabels), module, "TaxonomyFacetLabels", 0);
          }

          void t_TaxonomyFacetLabels::initialize(PyObject *module)
          {
            PyObject_SetAttrString((PyObject *) PY_TYPE(TaxonomyFacetLabels), "class_", make_descriptor(TaxonomyFacetLabels::initializeClass, 1));
            PyObject_SetAttrString((PyObject *) PY_TYPE(TaxonomyFacetLabels), "wrapfn_", make_descriptor(t_TaxonomyFacetLabels::wrap_jobject));
            PyObject_SetAttrString((PyObject *) PY_TYPE(TaxonomyFacetLabels), "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_TaxonomyFacetLabels_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, TaxonomyFacetLabels::initializeClass, 1)))
              return NULL;
            return t_TaxonomyFacetLabels::wrap_Object(TaxonomyFacetLabels(((t_TaxonomyFacetLabels *) arg)->object.this$));
          }
          static PyObject *t_TaxonomyFacetLabels_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, TaxonomyFacetLabels::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_TaxonomyFacetLabels_init_(t_TaxonomyFacetLabels *self, PyObject *args, PyObject *kwds)
          {
            ::org::apache::lucene::facet::taxonomy::TaxonomyReader a0((jobject) NULL);
            ::java::lang::String a1((jobject) NULL);
            TaxonomyFacetLabels object((jobject) NULL);

            if (!parseArgs(args, "ks", ::org::apache::lucene::facet::taxonomy::TaxonomyReader::initializeClass, &a0, &a1))
            {
              INT_CALL(object = TaxonomyFacetLabels(a0, a1));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_TaxonomyFacetLabels_getFacetLabelReader(t_TaxonomyFacetLabels *self, PyObject *arg)
          {
            ::org::apache::lucene::index::LeafReaderContext a0((jobject) NULL);
            ::org::apache::lucene::facet::taxonomy::TaxonomyFacetLabels$FacetLabelReader result((jobject) NULL);

            if (!parseArg(arg, "k", ::org::apache::lucene::index::LeafReaderContext::initializeClass, &a0))
            {
              OBJ_CALL(result = self->object.getFacetLabelReader(a0));
              return ::org::apache::lucene::facet::taxonomy::t_TaxonomyFacetLabels$FacetLabelReader::wrap_Object(result);
            }

            PyErr_SetArgsError((PyObject *) self, "getFacetLabelReader", arg);
            return NULL;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/util/IntBlockPool.h"
#include "org/apache/lucene/util/IntBlockPool$Allocator.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {

        ::java::lang::Class *IntBlockPool::class$ = NULL;
        jmethodID *IntBlockPool::mids$ = NULL;
        jfieldID *IntBlockPool::fids$ = NULL;
        bool IntBlockPool::live$ = false;
        jint IntBlockPool::INT_BLOCK_MASK = (jint) 0;
        jint IntBlockPool::INT_BLOCK_SHIFT = (jint) 0;
        jint IntBlockPool::INT_BLOCK_SIZE = (jint) 0;

        jclass IntBlockPool::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/util/IntBlockPool");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_f2cc1bce94666404] = env->getMethodID(cls, "<init>", "()V");
            mids$[mid_init$_d767ac1a5825a80e] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/util/IntBlockPool$Allocator;)V");
            mids$[mid_nextBuffer_f2cc1bce94666404] = env->getMethodID(cls, "nextBuffer", "()V");
            mids$[mid_reset_f2cc1bce94666404] = env->getMethodID(cls, "reset", "()V");
            mids$[mid_reset_33bb9a5a88dc139c] = env->getMethodID(cls, "reset", "(ZZ)V");

            fids$ = new jfieldID[max_fid];
            fids$[fid_buffer] = env->getFieldID(cls, "buffer", "[I");
            fids$[fid_buffers] = env->getFieldID(cls, "buffers", "[[I");
            fids$[fid_intOffset] = env->getFieldID(cls, "intOffset", "I");
            fids$[fid_intUpto] = env->getFieldID(cls, "intUpto", "I");

            class$ = new ::java::lang::Class(cls);
            cls = (jclass) class$->this$;

            INT_BLOCK_MASK = env->getStaticIntField(cls, "INT_BLOCK_MASK");
            INT_BLOCK_SHIFT = env->getStaticIntField(cls, "INT_BLOCK_SHIFT");
            INT_BLOCK_SIZE = env->getStaticIntField(cls, "INT_BLOCK_SIZE");
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        IntBlockPool::IntBlockPool() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_f2cc1bce94666404)) {}

        IntBlockPool::IntBlockPool(const ::org::apache::lucene::util::IntBlockPool$Allocator & a0) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_d767ac1a5825a80e, a0.this$)) {}

        void IntBlockPool::nextBuffer() const
        {
          env->callVoidMethod(this$, mids$[mid_nextBuffer_f2cc1bce94666404]);
        }

        void IntBlockPool::reset() const
        {
          env->callVoidMethod(this$, mids$[mid_reset_f2cc1bce94666404]);
        }

        void IntBlockPool::reset(jboolean a0, jboolean a1) const
        {
          env->callVoidMethod(this$, mids$[mid_reset_33bb9a5a88dc139c], a0, a1);
        }

        JArray< jint > IntBlockPool::_get_buffer() const
        {
          return JArray< jint >(env->getObjectField(this$, fids$[fid_buffer]));
        }

        void IntBlockPool::_set_buffer(const JArray< jint > & a0) const
        {
          env->setObjectField(this$, fids$[fid_buffer], a0.this$);
        }

        JArray< JArray< jint > > IntBlockPool::_get_buffers() const
        {
          return JArray< JArray< jint > >(env->getObjectField(this$, fids$[fid_buffers]));
        }

        void IntBlockPool::_set_buffers(const JArray< JArray< jint > > & a0) const
        {
          env->setObjectField(this$, fids$[fid_buffers], a0.this$);
        }

        jint IntBlockPool::_get_intOffset() const
        {
          return env->getIntField(this$, fids$[fid_intOffset]);
        }

        void IntBlockPool::_set_intOffset(jint a0) const
        {
          env->setIntField(this$, fids$[fid_intOffset], a0);
        }

        jint IntBlockPool::_get_intUpto() const
        {
          return env->getIntField(this$, fids$[fid_intUpto]);
        }

        void IntBlockPool::_set_intUpto(jint a0) const
        {
          env->setIntField(this$, fids$[fid_intUpto], a0);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"
#include "org/apache/lucene/util/IntBlockPool$SliceReader.h"
#include "org/apache/lucene/util/IntBlockPool$SliceWriter.h"
#include "org/apache/lucene/util/IntBlockPool$DirectAllocator.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        static PyObject *t_IntBlockPool_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_IntBlockPool_instance_(PyTypeObject *type, PyObject *arg);
        static int t_IntBlockPool_init_(t_IntBlockPool *self, PyObject *args, PyObject *kwds);
        static PyObject *t_IntBlockPool_nextBuffer(t_IntBlockPool *self);
        static PyObject *t_IntBlockPool_reset(t_IntBlockPool *self, PyObject *args);
        static PyObject *t_IntBlockPool_get__buffer(t_IntBlockPool *self, void *data);
        static int t_IntBlockPool_set__buffer(t_IntBlockPool *self, PyObject *arg, void *data);
        static PyObject *t_IntBlockPool_get__buffers(t_IntBlockPool *self, void *data);
        static int t_IntBlockPool_set__buffers(t_IntBlockPool *self, PyObject *arg, void *data);
        static PyObject *t_IntBlockPool_get__intOffset(t_IntBlockPool *self, void *data);
        static int t_IntBlockPool_set__intOffset(t_IntBlockPool *self, PyObject *arg, void *data);
        static PyObject *t_IntBlockPool_get__intUpto(t_IntBlockPool *self, void *data);
        static int t_IntBlockPool_set__intUpto(t_IntBlockPool *self, PyObject *arg, void *data);

        static PyGetSetDef t_IntBlockPool__fields_[] = {
          DECLARE_GETSET_FIELD(t_IntBlockPool, buffer),
          DECLARE_GETSET_FIELD(t_IntBlockPool, buffers),
          DECLARE_GETSET_FIELD(t_IntBlockPool, intOffset),
          DECLARE_GETSET_FIELD(t_IntBlockPool, intUpto),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_IntBlockPool__methods_[] = {
          DECLARE_METHOD(t_IntBlockPool, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_IntBlockPool, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_IntBlockPool, nextBuffer, METH_NOARGS),
          DECLARE_METHOD(t_IntBlockPool, reset, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        static PyType_Slot PY_TYPE_SLOTS(IntBlockPool)[] = {
          { Py_tp_methods, t_IntBlockPool__methods_ },
          { Py_tp_init, (void *) t_IntBlockPool_init_ },
          { Py_tp_getset, t_IntBlockPool__fields_ },
          { 0, NULL }
        };

        static PyType_Def *PY_TYPE_BASES(IntBlockPool)[] = {
          &PY_TYPE_DEF(::java::lang::Object),
          NULL
        };

        DEFINE_TYPE(IntBlockPool, t_IntBlockPool, IntBlockPool);

        void t_IntBlockPool::install(PyObject *module)
        {
          installType(&PY_TYPE(IntBlockPool), &PY_TYPE_DEF(IntBlockPool), module, "IntBlockPool", 0);
          PyObject_SetAttrString((PyObject *) PY_TYPE(IntBlockPool), "SliceReader", make_descriptor(&PY_TYPE_DEF(IntBlockPool$SliceReader)));
          PyObject_SetAttrString((PyObject *) PY_TYPE(IntBlockPool), "SliceWriter", make_descriptor(&PY_TYPE_DEF(IntBlockPool$SliceWriter)));
          PyObject_SetAttrString((PyObject *) PY_TYPE(IntBlockPool), "DirectAllocator", make_descriptor(&PY_TYPE_DEF(IntBlockPool$DirectAllocator)));
          PyObject_SetAttrString((PyObject *) PY_TYPE(IntBlockPool), "Allocator", make_descriptor(&PY_TYPE_DEF(IntBlockPool$Allocator)));
        }

        void t_IntBlockPool::initialize(PyObject *module)
        {
          PyObject_SetAttrString((PyObject *) PY_TYPE(IntBlockPool), "class_", make_descriptor(IntBlockPool::initializeClass, 1));
          PyObject_SetAttrString((PyObject *) PY_TYPE(IntBlockPool), "wrapfn_", make_descriptor(t_IntBlockPool::wrap_jobject));
          PyObject_SetAttrString((PyObject *) PY_TYPE(IntBlockPool), "boxfn_", make_descriptor(boxObject));
          env->getClass(IntBlockPool::initializeClass);
          PyObject_SetAttrString((PyObject *) PY_TYPE(IntBlockPool), "INT_BLOCK_MASK", make_descriptor(IntBlockPool::INT_BLOCK_MASK));
          PyObject_SetAttrString((PyObject *) PY_TYPE(IntBlockPool), "INT_BLOCK_SHIFT", make_descriptor(IntBlockPool::INT_BLOCK_SHIFT));
          PyObject_SetAttrString((PyObject *) PY_TYPE(IntBlockPool), "INT_BLOCK_SIZE", make_descriptor(IntBlockPool::INT_BLOCK_SIZE));
        }

        static PyObject *t_IntBlockPool_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, IntBlockPool::initializeClass, 1)))
            return NULL;
          return t_IntBlockPool::wrap_Object(IntBlockPool(((t_IntBlockPool *) arg)->object.this$));
        }
        static PyObject *t_IntBlockPool_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, IntBlockPool::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_IntBlockPool_init_(t_IntBlockPool *self, PyObject *args, PyObject *kwds)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 0:
            {
              IntBlockPool object((jobject) NULL);

              INT_CALL(object = IntBlockPool());
              self->object = object;
              break;
            }
           case 1:
            {
              ::org::apache::lucene::util::IntBlockPool$Allocator a0((jobject) NULL);
              IntBlockPool object((jobject) NULL);

              if (!parseArgs(args, "k", ::org::apache::lucene::util::IntBlockPool$Allocator::initializeClass, &a0))
              {
                INT_CALL(object = IntBlockPool(a0));
                self->object = object;
                break;
              }
            }
           default:
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }

        static PyObject *t_IntBlockPool_nextBuffer(t_IntBlockPool *self)
        {
          OBJ_CALL(self->object.nextBuffer());
          Py_RETURN_NONE;
        }

        static PyObject *t_IntBlockPool_reset(t_IntBlockPool *self, PyObject *args)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 0:
            {
              OBJ_CALL(self->object.reset());
              Py_RETURN_NONE;
            }
            break;
           case 2:
            {
              jboolean a0;
              jboolean a1;

              if (!parseArgs(args, "ZZ", &a0, &a1))
              {
                OBJ_CALL(self->object.reset(a0, a1));
                Py_RETURN_NONE;
              }
            }
          }

          PyErr_SetArgsError((PyObject *) self, "reset", args);
          return NULL;
        }

        static PyObject *t_IntBlockPool_get__buffer(t_IntBlockPool *self, void *data)
        {
          JArray< jint > value((jobject) NULL);
          OBJ_CALL(value = self->object._get_buffer());
          return value.wrap();
        }
        static int t_IntBlockPool_set__buffer(t_IntBlockPool *self, PyObject *arg, void *data)
        {
          JArray< jint > value((jobject) NULL);
          if (!parseArg(arg, "[I", &value))
          {
            INT_CALL(self->object._set_buffer(value));
            return 0;
          }
          PyErr_SetArgsError((PyObject *) self, "buffer", arg);
          return -1;
        }

        static PyObject *t_IntBlockPool_get__buffers(t_IntBlockPool *self, void *data)
        {
          JArray< JArray< jint > > value((jobject) NULL);
          OBJ_CALL(value = self->object._get_buffers());
          return JArray<jobject>(value.this$).wrap(NULL);
        }
        static int t_IntBlockPool_set__buffers(t_IntBlockPool *self, PyObject *arg, void *data)
        {
          JArray< JArray< jint > > value((jobject) NULL);
          if (!parseArg(arg, "[[I", &value))
          {
            INT_CALL(self->object._set_buffers(value));
            return 0;
          }
          PyErr_SetArgsError((PyObject *) self, "buffers", arg);
          return -1;
        }

        static PyObject *t_IntBlockPool_get__intOffset(t_IntBlockPool *self, void *data)
        {
          jint value;
          OBJ_CALL(value = self->object._get_intOffset());
          return PyLong_FromLong((long) value);
        }
        static int t_IntBlockPool_set__intOffset(t_IntBlockPool *self, PyObject *arg, void *data)
        {
          jint value;
          if (!parseArg(arg, "I", &value))
          {
            INT_CALL(self->object._set_intOffset(value));
            return 0;
          }
          PyErr_SetArgsError((PyObject *) self, "intOffset", arg);
          return -1;
        }

        static PyObject *t_IntBlockPool_get__intUpto(t_IntBlockPool *self, void *data)
        {
          jint value;
          OBJ_CALL(value = self->object._get_intUpto());
          return PyLong_FromLong((long) value);
        }
        static int t_IntBlockPool_set__intUpto(t_IntBlockPool *self, PyObject *arg, void *data)
        {
          jint value;
          if (!parseArg(arg, "I", &value))
          {
            INT_CALL(self->object._set_intUpto(value));
            return 0;
          }
          PyErr_SetArgsError((PyObject *) self, "intUpto", arg);
          return -1;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/no/NorwegianMinimalStemmer.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace no {

          ::java::lang::Class *NorwegianMinimalStemmer::class$ = NULL;
          jmethodID *NorwegianMinimalStemmer::mids$ = NULL;
          bool NorwegianMinimalStemmer::live$ = false;

          jclass NorwegianMinimalStemmer::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/no/NorwegianMinimalStemmer");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_040c4cd0390c5aff] = env->getMethodID(cls, "<init>", "(I)V");
              mids$[mid_stem_d4655f2a19359017] = env->getMethodID(cls, "stem", "([CI)I");

              class$ = new ::java::lang::Class(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          NorwegianMinimalStemmer::NorwegianMinimalStemmer(jint a0) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_040c4cd0390c5aff, a0)) {}

          jint NorwegianMinimalStemmer::stem(const JArray< jchar > & a0, jint a1) const
          {
            return env->callIntMethod(this$, mids$[mid_stem_d4655f2a19359017], a0.this$, a1);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace no {
          static PyObject *t_NorwegianMinimalStemmer_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_NorwegianMinimalStemmer_instance_(PyTypeObject *type, PyObject *arg);
          static int t_NorwegianMinimalStemmer_init_(t_NorwegianMinimalStemmer *self, PyObject *args, PyObject *kwds);
          static PyObject *t_NorwegianMinimalStemmer_stem(t_NorwegianMinimalStemmer *self, PyObject *args);

          static PyMethodDef t_NorwegianMinimalStemmer__methods_[] = {
            DECLARE_METHOD(t_NorwegianMinimalStemmer, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_NorwegianMinimalStemmer, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_NorwegianMinimalStemmer, stem, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          static PyType_Slot PY_TYPE_SLOTS(NorwegianMinimalStemmer)[] = {
            { Py_tp_methods, t_NorwegianMinimalStemmer__methods_ },
            { Py_tp_init, (void *) t_NorwegianMinimalStemmer_init_ },
            { 0, NULL }
          };

          static PyType_Def *PY_TYPE_BASES(NorwegianMinimalStemmer)[] = {
            &PY_TYPE_DEF(::java::lang::Object),
            NULL
          };

          DEFINE_TYPE(NorwegianMinimalStemmer, t_NorwegianMinimalStemmer, NorwegianMinimalStemmer);

          void t_NorwegianMinimalStemmer::install(PyObject *module)
          {
            installType(&PY_TYPE(NorwegianMinimalStemmer), &PY_TYPE_DEF(NorwegianMinimalStemmer), module, "NorwegianMinimalStemmer", 0);
          }

          void t_NorwegianMinimalStemmer::initialize(PyObject *module)
          {
            PyObject_SetAttrString((PyObject *) PY_TYPE(NorwegianMinimalStemmer), "class_", make_descriptor(NorwegianMinimalStemmer::initializeClass, 1));
            PyObject_SetAttrString((PyObject *) PY_TYPE(NorwegianMinimalStemmer), "wrapfn_", make_descriptor(t_NorwegianMinimalStemmer::wrap_jobject));
            PyObject_SetAttrString((PyObject *) PY_TYPE(NorwegianMinimalStemmer), "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_NorwegianMinimalStemmer_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, NorwegianMinimalStemmer::initializeClass, 1)))
              return NULL;
            return t_NorwegianMinimalStemmer::wrap_Object(NorwegianMinimalStemmer(((t_NorwegianMinimalStemmer *) arg)->object.this$));
          }
          static PyObject *t_NorwegianMinimalStemmer_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, NorwegianMinimalStemmer::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_NorwegianMinimalStemmer_init_(t_NorwegianMinimalStemmer *self, PyObject *args, PyObject *kwds)
          {
            jint a0;
            NorwegianMinimalStemmer object((jobject) NULL);

            if (!parseArgs(args, "I", &a0))
            {
              INT_CALL(object = NorwegianMinimalStemmer(a0));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_NorwegianMinimalStemmer_stem(t_NorwegianMinimalStemmer *self, PyObject *args)
          {
            JArray< jchar > a0((jobject) NULL);
            jint a1;
            jint result;

            if (!parseArgs(args, "[CI", &a0, &a1))
            {
              OBJ_CALL(result = self->object.stem(a0, a1));
              return PyLong_FromLong((long) result);
            }

            PyErr_SetArgsError((PyObject *) self, "stem", args);
            return NULL;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/index/IndexDeletionPolicy.h"
#include "java/util/List.h"
#include "org/apache/lucene/index/IndexCommit.h"
#include "java/io/IOException.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {

        ::java::lang::Class *IndexDeletionPolicy::class$ = NULL;
        jmethodID *IndexDeletionPolicy::mids$ = NULL;
        bool IndexDeletionPolicy::live$ = false;

        jclass IndexDeletionPolicy::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/index/IndexDeletionPolicy");

            mids$ = new jmethodID[max_mid];
            mids$[mid_onCommit_d03990be0130160d] = env->getMethodID(cls, "onCommit", "(Ljava/util/List;)V");
            mids$[mid_onInit_d03990be0130160d] = env->getMethodID(cls, "onInit", "(Ljava/util/List;)V");

            class$ = new ::java::lang::Class(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        void IndexDeletionPolicy::onCommit(const ::java::util::List & a0) const
        {
          env->callVoidMethod(this$, mids$[mid_onCommit_d03990be0130160d], a0.this$);
        }

        void IndexDeletionPolicy::onInit(const ::java::util::List & a0) const
        {
          env->callVoidMethod(this$, mids$[mid_onInit_d03990be0130160d], a0.this$);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {
        static PyObject *t_IndexDeletionPolicy_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_IndexDeletionPolicy_instance_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_IndexDeletionPolicy_onCommit(t_IndexDeletionPolicy *self, PyObject *arg);
        static PyObject *t_IndexDeletionPolicy_onInit(t_IndexDeletionPolicy *self, PyObject *arg);

        static PyMethodDef t_IndexDeletionPolicy__methods_[] = {
          DECLARE_METHOD(t_IndexDeletionPolicy, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_IndexDeletionPolicy, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_IndexDeletionPolicy, onCommit, METH_O),
          DECLARE_METHOD(t_IndexDeletionPolicy, onInit, METH_O),
          { NULL, NULL, 0, NULL }
        };

        static PyType_Slot PY_TYPE_SLOTS(IndexDeletionPolicy)[] = {
          { Py_tp_methods, t_IndexDeletionPolicy__methods_ },
          { Py_tp_init, (void *) abstract_init },
          { 0, NULL }
        };

        static PyType_Def *PY_TYPE_BASES(IndexDeletionPolicy)[] = {
          &PY_TYPE_DEF(::java::lang::Object),
          NULL
        };

        DEFINE_TYPE(IndexDeletionPolicy, t_IndexDeletionPolicy, IndexDeletionPolicy);

        void t_IndexDeletionPolicy::install(PyObject *module)
        {
          installType(&PY_TYPE(IndexDeletionPolicy), &PY_TYPE_DEF(IndexDeletionPolicy), module, "IndexDeletionPolicy", 0);
        }

        void t_IndexDeletionPolicy::initialize(PyObject *module)
        {
          PyObject_SetAttrString((PyObject *) PY_TYPE(IndexDeletionPolicy), "class_", make_descriptor(IndexDeletionPolicy::initializeClass, 1));
          PyObject_SetAttrString((PyObject *) PY_TYPE(IndexDeletionPolicy), "wrapfn_", make_descriptor(t_IndexDeletionPolicy::wrap_jobject));
          PyObject_SetAttrString((PyObject *) PY_TYPE(IndexDeletionPolicy), "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_IndexDeletionPolicy_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, IndexDeletionPolicy::initializeClass, 1)))
            return NULL;
          return t_IndexDeletionPolicy::wrap_Object(IndexDeletionPolicy(((t_IndexDeletionPolicy *) arg)->object.this$));
        }
        static PyObject *t_IndexDeletionPolicy_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, IndexDeletionPolicy::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static PyObject *t_IndexDeletionPolicy_onCommit(t_IndexDeletionPolicy *self, PyObject *arg)
        {
          ::java::util::List a0((jobject) NULL);
          PyTypeObject **p0;

          if (!parseArg(arg, "K", ::java::util::List::initializeClass, &a0, &p0, ::java::util::t_List::parameters_))
          {
            OBJ_CALL(self->object.onCommit(a0));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "onCommit", arg);
          return NULL;
        }

        static PyObject *t_IndexDeletionPolicy_onInit(t_IndexDeletionPolicy *self, PyObject *arg)
        {
          ::java::util::List a0((jobject) NULL);
          PyTypeObject **p0;

          if (!parseArg(arg, "K", ::java::util::List::initializeClass, &a0, &p0, ::java::util::t_List::parameters_))
          {
            OBJ_CALL(self->object.onInit(a0));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "onInit", arg);
          return NULL;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/util/FilesystemResourceLoader.h"
#include "java/io/InputStream.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/analysis/util/ResourceLoader.h"
#include "java/lang/String.h"
#include "java/io/IOException.h"
#include "java/lang/ClassLoader.h"
#include "java/nio/file/Path.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace util {

          ::java::lang::Class *FilesystemResourceLoader::class$ = NULL;
          jmethodID *FilesystemResourceLoader::mids$ = NULL;
          bool FilesystemResourceLoader::live$ = false;

          jclass FilesystemResourceLoader::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/util/FilesystemResourceLoader");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_636077fee54d306c] = env->getMethodID(cls, "<init>", "(Ljava/nio/file/Path;)V");
              mids$[mid_init$_970ddbc0ddafa930] = env->getMethodID(cls, "<init>", "(Ljava/nio/file/Path;Ljava/lang/ClassLoader;)V");
              mids$[mid_init$_d5e49a1b0138adbe] = env->getMethodID(cls, "<init>", "(Ljava/nio/file/Path;Lorg/apache/lucene/analysis/util/ResourceLoader;)V");
              mids$[mid_findClass_bc8a5b553c7b1ff7] = env->getMethodID(cls, "findClass", "(Ljava/lang/String;Ljava/lang/Class;)Ljava/lang/Class;");
              mids$[mid_newInstance_72d9f700c083286f] = env->getMethodID(cls, "newInstance", "(Ljava/lang/String;Ljava/lang/Class;)Ljava/lang/Object;");
              mids$[mid_openResource_f9a3577e7bead470] = env->getMethodID(cls, "openResource", "(Ljava/lang/String;)Ljava/io/InputStream;");

              class$ = new ::java::lang::Class(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          FilesystemResourceLoader::FilesystemResourceLoader(const ::java::nio::file::Path & a0) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_636077fee54d306c, a0.this$)) {}

          FilesystemResourceLoader::FilesystemResourceLoader(const ::java::nio::file::Path & a0, const ::java::lang::ClassLoader & a1) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_970ddbc0ddafa930, a0.this$, a1.this$)) {}

          FilesystemResourceLoader::FilesystemResourceLoader(const ::java::nio::file::Path & a0, const ::org::apache::lucene::analysis::util::ResourceLoader & a1) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_d5e49a1b0138adbe, a0.this$, a1.this$)) {}

          ::java::lang::Class FilesystemResourceLoader::findClass(const ::java::lang::String & a0, const ::java::lang::Class & a1) const
          {
            return ::java::lang::Class(env->callObjectMethod(this$, mids$[mid_findClass_bc8a5b553c7b1ff7], a0.this$, a1.this$));
          }

          ::java::lang::Object FilesystemResourceLoader::newInstance(const ::java::lang::String & a0, const ::java::lang::Class & a1) const
          {
            return ::java::lang::Object(env->callObjectMethod(this$, mids$[mid_newInstance_72d9f700c083286f], a0.this$, a1.this$));
          }

          ::java::io::InputStream FilesystemResourceLoader::openResource(const ::java::lang::String & a0) const
          {
            return ::java::io::InputStream(env->callObjectMethod(this$, mids$[mid_openResource_f9a3577e7bead470], a0.this$));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace util {
          static PyObject *t_FilesystemResourceLoader_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_FilesystemResourceLoader_instance_(PyTypeObject *type, PyObject *arg);
          static int t_FilesystemResourceLoader_init_(t_FilesystemResourceLoader *self, PyObject *args, PyObject *kwds);
          static PyObject *t_FilesystemResourceLoader_findClass(t_FilesystemResourceLoader *self, PyObject *args);
          static PyObject *t_FilesystemResourceLoader_newInstance(t_FilesystemResourceLoader *self, PyObject *args);
          static PyObject *t_FilesystemResourceLoader_openResource(t_FilesystemResourceLoader *self, PyObject *arg);

          static PyMethodDef t_FilesystemResourceLoader__methods_[] = {
            DECLARE_METHOD(t_FilesystemResourceLoader, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_FilesystemResourceLoader, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_FilesystemResourceLoader, findClass, METH_VARARGS),
            DECLARE_METHOD(t_FilesystemResourceLoader, newInstance, METH_VARARGS),
            DECLARE_METHOD(t_FilesystemResourceLoader, openResource, METH_O),
            { NULL, NULL, 0, NULL }
          };

          static PyType_Slot PY_TYPE_SLOTS(FilesystemResourceLoader)[] = {
            { Py_tp_methods, t_FilesystemResourceLoader__methods_ },
            { Py_tp_init, (void *) t_FilesystemResourceLoader_init_ },
            { 0, NULL }
          };

          static PyType_Def *PY_TYPE_BASES(FilesystemResourceLoader)[] = {
            &PY_TYPE_DEF(::java::lang::Object),
            NULL
          };

          DEFINE_TYPE(FilesystemResourceLoader, t_FilesystemResourceLoader, FilesystemResourceLoader);

          void t_FilesystemResourceLoader::install(PyObject *module)
          {
            installType(&PY_TYPE(FilesystemResourceLoader), &PY_TYPE_DEF(FilesystemResourceLoader), module, "FilesystemResourceLoader", 0);
          }

          void t_FilesystemResourceLoader::initialize(PyObject *module)
          {
            PyObject_SetAttrString((PyObject *) PY_TYPE(FilesystemResourceLoader), "class_", make_descriptor(FilesystemResourceLoader::initializeClass, 1));
            PyObject_SetAttrString((PyObject *) PY_TYPE(FilesystemResourceLoader), "wrapfn_", make_descriptor(t_FilesystemResourceLoader::wrap_jobject));
            PyObject_SetAttrString((PyObject *) PY_TYPE(FilesystemResourceLoader), "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_FilesystemResourceLoader_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, FilesystemResourceLoader::initializeClass, 1)))
              return NULL;
            return t_FilesystemResourceLoader::wrap_Object(FilesystemResourceLoader(((t_FilesystemResourceLoader *) arg)->object.this$));
          }
          static PyObject *t_FilesystemResourceLoader_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, FilesystemResourceLoader::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_FilesystemResourceLoader_init_(t_FilesystemResourceLoader *self, PyObject *args, PyObject *kwds)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 1:
              {
                ::java::nio::file::Path a0((jobject) NULL);
                FilesystemResourceLoader object((jobject) NULL);

                if (!parseArgs(args, "k", ::java::nio::file::Path::initializeClass, &a0))
                {
                  INT_CALL(object = FilesystemResourceLoader(a0));
                  self->object = object;
                  break;
                }
              }
              goto err;
             case 2:
              {
                ::java::nio::file::Path a0((jobject) NULL);
                ::java::lang::ClassLoader a1((jobject) NULL);
                FilesystemResourceLoader object((jobject) NULL);

                if (!parseArgs(args, "kk", ::java::nio::file::Path::initializeClass, ::java::lang::ClassLoader::initializeClass, &a0, &a1))
                {
                  INT_CALL(object = FilesystemResourceLoader(a0, a1));
                  self->object = object;
                  break;
                }
              }
              {
                ::java::nio::file::Path a0((jobject) NULL);
                ::org::apache::lucene::analysis::util::ResourceLoader a1((jobject) NULL);
                FilesystemResourceLoader object((jobject) NULL);

                if (!parseArgs(args, "kk", ::java::nio::file::Path::initializeClass, ::org::apache::lucene::analysis::util::ResourceLoader::initializeClass, &a0, &a1))
                {
                  INT_CALL(object = FilesystemResourceLoader(a0, a1));
                  self->object = object;
                  break;
                }
              }
             default:
             err:
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_FilesystemResourceLoader_findClass(t_FilesystemResourceLoader *self, PyObject *args)
          {
            ::java::lang::String a0((jobject) NULL);
            ::java::lang::Class a1((jobject) NULL);
            PyTypeObject **p1;
            ::java::lang::Class result((jobject) NULL);

            if (!parseArgs(args, "sK", ::java::lang::Class::initializeClass, &a0, &a1, &p1, ::java::lang::t_Class::parameters_))
            {
              OBJ_CALL(result = self->object.findClass(a0, a1));
              return ::java::lang::t_Class::wrap_Object(result);
            }

            PyErr_SetArgsError((PyObject *) self, "findClass", args);
            return NULL;
          }

          static PyObject *t_FilesystemResourceLoader_newInstance(t_FilesystemResourceLoader *self, PyObject *args)
          {
            ::java::lang::String a0((jobject) NULL);
            ::java::lang::Class a1((jobject) NULL);
            PyTypeObject **p1;
            ::java::lang::Object result((jobject) NULL);

            if (!parseArgs(args, "sK", ::java::lang::Class::initializeClass, &a0, &a1, &p1, ::java::lang::t_Class::parameters_))
            {
              OBJ_CALL(result = self->object.newInstance(a0, a1));
              return ::java::lang::t_Object::wrap_Object(result);
            }

            PyErr_SetArgsError((PyObject *) self, "newInstance", args);
            return NULL;
          }

          static PyObject *t_FilesystemResourceLoader_openResource(t_FilesystemResourceLoader *self, PyObject *arg)
          {
            ::java::lang::String a0((jobject) NULL);
            ::java::io::InputStream result((jobject) NULL);

            if (!parseArg(arg, "s", &a0))
            {
              OBJ_CALL(result = self->object.openResource(a0));
              return ::java::io::t_InputStream::wrap_Object(result);
            }

            PyErr_SetArgsError((PyObject *) self, "openResource", arg);
            return NULL;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/grouping/LongRangeGroupSelector.h"
#include "org/apache/lucene/search/LongValuesSource.h"
#include "java/util/Collection.h"
#include "org/apache/lucene/index/LeafReaderContext.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/search/Scorable.h"
#include "org/apache/lucene/search/grouping/SearchGroup.h"
#include "org/apache/lucene/search/grouping/LongRangeFactory.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/search/grouping/LongRange.h"
#include "org/apache/lucene/search/grouping/GroupSelector$State.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace grouping {

          ::java::lang::Class *LongRangeGroupSelector::class$ = NULL;
          jmethodID *LongRangeGroupSelector::mids$ = NULL;
          bool LongRangeGroupSelector::live$ = false;

          jclass LongRangeGroupSelector::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/search/grouping/LongRangeGroupSelector");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_da67515506c269bd] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/search/LongValuesSource;Lorg/apache/lucene/search/grouping/LongRangeFactory;)V");
              mids$[mid_advanceTo_ddaa3f14f8aeda7d] = env->getMethodID(cls, "advanceTo", "(I)Lorg/apache/lucene/search/grouping/GroupSelector$State;");
              mids$[mid_copyValue_f74d7f84353a55c5] = env->getMethodID(cls, "copyValue", "()Lorg/apache/lucene/search/grouping/LongRange;");
              mids$[mid_currentValue_f74d7f84353a55c5] = env->getMethodID(cls, "currentValue", "()Lorg/apache/lucene/search/grouping/LongRange;");
              mids$[mid_setGroups_50bc3ddc62a19f2d] = env->getMethodID(cls, "setGroups", "(Ljava/util/Collection;)V");
              mids$[mid_setNextReader_8747e0e89febf88d] = env->getMethodID(cls, "setNextReader", "(Lorg/apache/lucene/index/LeafReaderContext;)V");
              mids$[mid_setScorer_57a565cc0113e133] = env->getMethodID(cls, "setScorer", "(Lorg/apache/lucene/search/Scorable;)V");

              class$ = new ::java::lang::Class(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          LongRangeGroupSelector::LongRangeGroupSelector(const ::org::apache::lucene::search::LongValuesSource & a0, const ::org::apache::lucene::search::grouping::LongRangeFactory & a1) : ::org::apache::lucene::search::grouping::GroupSelector(env->newObject(initializeClass, &mids$, mid_init$_da67515506c269bd, a0.this$, a1.this$)) {}

          ::org::apache::lucene::search::grouping::GroupSelector$State LongRangeGroupSelector::advanceTo(jint a0) const
          {
            return ::org::apache::lucene::search::grouping::GroupSelector$State(env->callObjectMethod(this$, mids$[mid_advanceTo_ddaa3f14f8aeda7d], a0));
          }

          ::org::apache::lucene::search::grouping::LongRange LongRangeGroupSelector::copyValue() const
          {
            return ::org::apache::lucene::search::grouping::LongRange(env->callObjectMethod(this$, mids$[mid_copyValue_f74d7f84353a55c5]));
          }

          ::org::apache::lucene::search::grouping::LongRange LongRangeGroupSelector::currentValue() const
          {
            return ::org::apache::lucene::search::grouping::LongRange(env->callObjectMethod(this$, mids$[mid_currentValue_f74d7f84353a55c5]));
          }

          void LongRangeGroupSelector::setGroups(const ::java::util::Collection & a0) const
          {
            env->callVoidMethod(this$, mids$[mid_setGroups_50bc3ddc62a19f2d], a0.this$);
          }

          void LongRangeGroupSelector::setNextReader(const ::org::apache::lucene::index::LeafReaderContext & a0) const
          {
            env->callVoidMethod(this$, mids$[mid_setNextReader_8747e0e89febf88d], a0.this$);
          }

          void LongRangeGroupSelector::setScorer(const ::org::apache::lucene::search::Scorable & a0) const
          {
            env->callVoidMethod(this$, mids$[mid_setScorer_57a565cc0113e133], a0.this$);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace grouping {
          static PyObject *t_LongRangeGroupSelector_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_LongRangeGroupSelector_instance_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_LongRangeGroupSelector_of_(t_LongRangeGroupSelector *self, PyObject *args);
          static int t_LongRangeGroupSelector_init_(t_LongRangeGroupSelector *self, PyObject *args, PyObject *kwds);
          static PyObject *t_LongRangeGroupSelector_advanceTo(t_LongRangeGroupSelector *self, PyObject *args);
          static PyObject *t_LongRangeGroupSelector_copyValue(t_LongRangeGroupSelector *self, PyObject *args);
          static PyObject *t_LongRangeGroupSelector_currentValue(t_LongRangeGroupSelector *self, PyObject *args);
          static PyObject *t_LongRangeGroupSelector_setGroups(t_LongRangeGroupSelector *self, PyObject *args);
          static PyObject *t_LongRangeGroupSelector_setNextReader(t_LongRangeGroupSelector *self, PyObject *args);
          static PyObject *t_LongRangeGroupSelector_setScorer(t_LongRangeGroupSelector *self, PyObject *args);
          static int t_LongRangeGroupSelector_set__groups(t_LongRangeGroupSelector *self, PyObject *arg, void *data);
          static int t_LongRangeGroupSelector_set__nextReader(t_LongRangeGroupSelector *self, PyObject *arg, void *data);
          static int t_LongRangeGroupSelector_set__scorer(t_LongRangeGroupSelector *self, PyObject *arg, void *data);
          static PyObject *t_LongRangeGroupSelector_get__parameters_(t_LongRangeGroupSelector *self, void *data);
          static PyGetSetDef t_LongRangeGroupSelector__fields_[] = {
            DECLARE_SET_FIELD(t_LongRangeGroupSelector, groups),
            DECLARE_SET_FIELD(t_LongRangeGroupSelector, nextReader),
            DECLARE_SET_FIELD(t_LongRangeGroupSelector, scorer),
            DECLARE_GET_FIELD(t_LongRangeGroupSelector, parameters_),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_LongRangeGroupSelector__methods_[] = {
            DECLARE_METHOD(t_LongRangeGroupSelector, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_LongRangeGroupSelector, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_LongRangeGroupSelector, of_, METH_VARARGS),
            DECLARE_METHOD(t_LongRangeGroupSelector, advanceTo, METH_VARARGS),
            DECLARE_METHOD(t_LongRangeGroupSelector, copyValue, METH_VARARGS),
            DECLARE_METHOD(t_LongRangeGroupSelector, currentValue, METH_VARARGS),
            DECLARE_METHOD(t_LongRangeGroupSelector, setGroups, METH_VARARGS),
            DECLARE_METHOD(t_LongRangeGroupSelector, setNextReader, METH_VARARGS),
            DECLARE_METHOD(t_LongRangeGroupSelector, setScorer, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          static PyType_Slot PY_TYPE_SLOTS(LongRangeGroupSelector)[] = {
            { Py_tp_methods, t_LongRangeGroupSelector__methods_ },
            { Py_tp_init, (void *) t_LongRangeGroupSelector_init_ },
            { Py_tp_getset, t_LongRangeGroupSelector__fields_ },
            { 0, NULL }
          };

          static PyType_Def *PY_TYPE_BASES(LongRangeGroupSelector)[] = {
            &PY_TYPE_DEF(::org::apache::lucene::search::grouping::GroupSelector),
            NULL
          };

          DEFINE_TYPE(LongRangeGroupSelector, t_LongRangeGroupSelector, LongRangeGroupSelector);
          PyObject *t_LongRangeGroupSelector::wrap_Object(const LongRangeGroupSelector& object, PyTypeObject *p0)
          {
            PyObject *obj = t_LongRangeGroupSelector::wrap_Object(object);
            if (obj != NULL && obj != Py_None)
            {
              t_LongRangeGroupSelector *self = (t_LongRangeGroupSelector *) obj;
              self->parameters[0] = p0;
            }
            return obj;
          }

          PyObject *t_LongRangeGroupSelector::wrap_jobject(const jobject& object, PyTypeObject *p0)
          {
            PyObject *obj = t_LongRangeGroupSelector::wrap_jobject(object);
            if (obj != NULL && obj != Py_None)
            {
              t_LongRangeGroupSelector *self = (t_LongRangeGroupSelector *) obj;
              self->parameters[0] = p0;
            }
            return obj;
          }

          void t_LongRangeGroupSelector::install(PyObject *module)
          {
            installType(&PY_TYPE(LongRangeGroupSelector), &PY_TYPE_DEF(LongRangeGroupSelector), module, "LongRangeGroupSelector", 0);
          }

          void t_LongRangeGroupSelector::initialize(PyObject *module)
          {
            PyObject_SetAttrString((PyObject *) PY_TYPE(LongRangeGroupSelector), "class_", make_descriptor(LongRangeGroupSelector::initializeClass, 1));
            PyObject_SetAttrString((PyObject *) PY_TYPE(LongRangeGroupSelector), "wrapfn_", make_descriptor(t_LongRangeGroupSelector::wrap_jobject));
            PyObject_SetAttrString((PyObject *) PY_TYPE(LongRangeGroupSelector), "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_LongRangeGroupSelector_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, LongRangeGroupSelector::initializeClass, 1)))
              return NULL;
            return t_LongRangeGroupSelector::wrap_Object(LongRangeGroupSelector(((t_LongRangeGroupSelector *) arg)->object.this$));
          }
          static PyObject *t_LongRangeGroupSelector_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, LongRangeGroupSelector::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static PyObject *t_LongRangeGroupSelector_of_(t_LongRangeGroupSelector *self, PyObject *args)
          {
            if (!parseArg(args, "T", 1, &(self->parameters)))
              Py_RETURN_SELF;
            return PyErr_SetArgsError((PyObject *) self, "of_", args);
          }

          static int t_LongRangeGroupSelector_init_(t_LongRangeGroupSelector *self, PyObject *args, PyObject *kwds)
          {
            ::org::apache::lucene::search::LongValuesSource a0((jobject) NULL);
            ::org::apache::lucene::search::grouping::LongRangeFactory a1((jobject) NULL);
            LongRangeGroupSelector object((jobject) NULL);

            if (!parseArgs(args, "kk", ::org::apache::lucene::search::LongValuesSource::initializeClass, ::org::apache::lucene::search::grouping::LongRangeFactory::initializeClass, &a0, &a1))
            {
              INT_CALL(object = LongRangeGroupSelector(a0, a1));
              self->object = object;
              self->parameters[0] = ::org::apache::lucene::search::grouping::PY_TYPE(LongRange);
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_LongRangeGroupSelector_advanceTo(t_LongRangeGroupSelector *self, PyObject *args)
          {
            jint a0;
            ::org::apache::lucene::search::grouping::GroupSelector$State result((jobject) NULL);

            if (!parseArgs(args, "I", &a0))
            {
              OBJ_CALL(result = self->object.advanceTo(a0));
              return ::org::apache::lucene::search::grouping::t_GroupSelector$State::wrap_Object(result);
            }

            return callSuper(PY_TYPE(LongRangeGroupSelector), (PyObject *) self, "advanceTo", args, 2);
          }

          static PyObject *t_LongRangeGroupSelector_copyValue(t_LongRangeGroupSelector *self, PyObject *args)
          {
            ::org::apache::lucene::search::grouping::LongRange result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.copyValue());
              return ::org::apache::lucene::search::grouping::t_LongRange::wrap_Object(result);
            }

            return callSuper(PY_TYPE(LongRangeGroupSelector), (PyObject *) self, "copyValue", args, 2);
          }

          static PyObject *t_LongRangeGroupSelector_currentValue(t_LongRangeGroupSelector *self, PyObject *args)
          {
            ::org::apache::lucene::search::grouping::LongRange result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.currentValue());
              return ::org::apache::lucene::search::grouping::t_LongRange::wrap_Object(result);
            }

            return callSuper(PY_TYPE(LongRangeGroupSelector), (PyObject *) self, "currentValue", args, 2);
          }

          static PyObject *t_LongRangeGroupSelector_setGroups(t_LongRangeGroupSelector *self, PyObject *args)
          {
            ::java::util::Collection a0((jobject) NULL);
            PyTypeObject **p0;

            if (!parseArgs(args, "K", ::java::util::Collection::initializeClass, &a0, &p0, ::java::util::t_Collection::parameters_))
            {
              OBJ_CALL(self->object.setGroups(a0));
              Py_RETURN_NONE;
            }

            return callSuper(PY_TYPE(LongRangeGroupSelector), (PyObject *) self, "setGroups", args, 2);
          }

          static PyObject *t_LongRangeGroupSelector_setNextReader(t_LongRangeGroupSelector *self, PyObject *args)
          {
            ::org::apache::lucene::index::LeafReaderContext a0((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::index::LeafReaderContext::initializeClass, &a0))
            {
              OBJ_CALL(self->object.setNextReader(a0));
              Py_RETURN_NONE;
            }

            return callSuper(PY_TYPE(LongRangeGroupSelector), (PyObject *) self, "setNextReader", args, 2);
          }

          static PyObject *t_LongRangeGroupSelector_setScorer(t_LongRangeGroupSelector *self, PyObject *args)
          {
            ::org::apache::lucene::search::Scorable a0((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::search::Scorable::initializeClass, &a0))
            {
              OBJ_CALL(self->object.setScorer(a0));
              Py_RETURN_NONE;
            }

            return callSuper(PY_TYPE(LongRangeGroupSelector), (PyObject *) self, "setScorer", args, 2);
          }
          static PyObject *t_LongRangeGroupSelector_get__parameters_(t_LongRangeGroupSelector *self, void *data)
          {
            return typeParameters(self->parameters, sizeof(self->parameters));
          }

          static int t_LongRangeGroupSelector_set__groups(t_LongRangeGroupSelector *self, PyObject *arg, void *data)
          {
            {
              ::java::util::Collection value((jobject) NULL);
              if (!parseArg(arg, "k", ::java::util::Collection::initializeClass, &value))
              {
                INT_CALL(self->object.setGroups(value));
                return 0;
              }
            }
            PyErr_SetArgsError((PyObject *) self, "groups", arg);
            return -1;
          }

          static int t_LongRangeGroupSelector_set__nextReader(t_LongRangeGroupSelector *self, PyObject *arg, void *data)
          {
            {
              ::org::apache::lucene::index::LeafReaderContext value((jobject) NULL);
              if (!parseArg(arg, "k", ::org::apache::lucene::index::LeafReaderContext::initializeClass, &value))
              {
                INT_CALL(self->object.setNextReader(value));
                return 0;
              }
            }
            PyErr_SetArgsError((PyObject *) self, "nextReader", arg);
            return -1;
          }

          static int t_LongRangeGroupSelector_set__scorer(t_LongRangeGroupSelector *self, PyObject *arg, void *data)
          {
            {
              ::org::apache::lucene::search::Scorable value((jobject) NULL);
              if (!parseArg(arg, "k", ::org::apache::lucene::search::Scorable::initializeClass, &value))
              {
                INT_CALL(self->object.setScorer(value));
                return 0;
              }
            }
            PyErr_SetArgsError((PyObject *) self, "scorer", arg);
            return -1;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/similarities/NormalizationH1.h"
#include "org/apache/lucene/search/similarities/BasicStats.h"
#include "java/lang/String.h"
#include "org/apache/lucene/search/Explanation.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace similarities {

          ::java::lang::Class *NormalizationH1::class$ = NULL;
          jmethodID *NormalizationH1::mids$ = NULL;
          bool NormalizationH1::live$ = false;

          jclass NormalizationH1::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/search/similarities/NormalizationH1");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_f2cc1bce94666404] = env->getMethodID(cls, "<init>", "()V");
              mids$[mid_init$_8e1d952dd65cdc3a] = env->getMethodID(cls, "<init>", "(F)V");
              mids$[mid_explain_77a68ba236144920] = env->getMethodID(cls, "explain", "(Lorg/apache/lucene/search/similarities/BasicStats;DD)Lorg/apache/lucene/search/Explanation;");
              mids$[mid_getC_58aec2b64dff50c8] = env->getMethodID(cls, "getC", "()F");
              mids$[mid_tfn_761ab1c432346fd0] = env->getMethodID(cls, "tfn", "(Lorg/apache/lucene/search/similarities/BasicStats;DD)D");
              mids$[mid_toString_db9b55ba01e03e4b] = env->getMethodID(cls, "toString", "()Ljava/lang/String;");

              class$ = new ::java::lang::Class(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          NormalizationH1::NormalizationH1() : ::org::apache::lucene::search::similarities::Normalization(env->newObject(initializeClass, &mids$, mid_init$_f2cc1bce94666404)) {}

          NormalizationH1::NormalizationH1(jfloat a0) : ::org::apache::lucene::search::similarities::Normalization(env->newObject(initializeClass, &mids$, mid_init$_8e1d952dd65cdc3a, a0)) {}

          ::org::apache::lucene::search::Explanation NormalizationH1::explain(const ::org::apache::lucene::search::similarities::BasicStats & a0, jdouble a1, jdouble a2) const
          {
            return ::org::apache::lucene::search::Explanation(env->callObjectMethod(this$, mids$[mid_explain_77a68ba236144920], a0.this$, a1, a2));
          }

          jfloat NormalizationH1::getC() const
          {
            return env->callFloatMethod(this$, mids$[mid_getC_58aec2b64dff50c8]);
          }

          jdouble NormalizationH1::tfn(const ::org::apache::lucene::search::similarities::BasicStats & a0, jdouble a1, jdouble a2) const
          {
            return env->callDoubleMethod(this$, mids$[mid_tfn_761ab1c432346fd0], a0.this$, a1, a2);
          }

          ::java::lang::String NormalizationH1::toString() const
          {
            return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_db9b55ba01e03e4b]));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace similarities {
          static PyObject *t_NormalizationH1_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_NormalizationH1_instance_(PyTypeObject *type, PyObject *arg);
          static int t_NormalizationH1_init_(t_NormalizationH1 *self, PyObject *args, PyObject *kwds);
          static PyObject *t_NormalizationH1_explain(t_NormalizationH1 *self, PyObject *args);
          static PyObject *t_NormalizationH1_getC(t_NormalizationH1 *self);
          static PyObject *t_NormalizationH1_tfn(t_NormalizationH1 *self, PyObject *args);
          static PyObject *t_NormalizationH1_toString(t_NormalizationH1 *self, PyObject *args);
          static PyObject *t_NormalizationH1_get__c(t_NormalizationH1 *self, void *data);
          static PyGetSetDef t_NormalizationH1__fields_[] = {
            DECLARE_GET_FIELD(t_NormalizationH1, c),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_NormalizationH1__methods_[] = {
            DECLARE_METHOD(t_NormalizationH1, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_NormalizationH1, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_NormalizationH1, explain, METH_VARARGS),
            DECLARE_METHOD(t_NormalizationH1, getC, METH_NOARGS),
            DECLARE_METHOD(t_NormalizationH1, tfn, METH_VARARGS),
            DECLARE_METHOD(t_NormalizationH1, toString, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          static PyType_Slot PY_TYPE_SLOTS(NormalizationH1)[] = {
            { Py_tp_methods, t_NormalizationH1__methods_ },
            { Py_tp_init, (void *) t_NormalizationH1_init_ },
            { Py_tp_getset, t_NormalizationH1__fields_ },
            { 0, NULL }
          };

          static PyType_Def *PY_TYPE_BASES(NormalizationH1)[] = {
            &PY_TYPE_DEF(::org::apache::lucene::search::similarities::Normalization),
            NULL
          };

          DEFINE_TYPE(NormalizationH1, t_NormalizationH1, NormalizationH1);

          void t_NormalizationH1::install(PyObject *module)
          {
            installType(&PY_TYPE(NormalizationH1), &PY_TYPE_DEF(NormalizationH1), module, "NormalizationH1", 0);
          }

          void t_NormalizationH1::initialize(PyObject *module)
          {
            PyObject_SetAttrString((PyObject *) PY_TYPE(NormalizationH1), "class_", make_descriptor(NormalizationH1::initializeClass, 1));
            PyObject_SetAttrString((PyObject *) PY_TYPE(NormalizationH1), "wrapfn_", make_descriptor(t_NormalizationH1::wrap_jobject));
            PyObject_SetAttrString((PyObject *) PY_TYPE(NormalizationH1), "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_NormalizationH1_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, NormalizationH1::initializeClass, 1)))
              return NULL;
            return t_NormalizationH1::wrap_Object(NormalizationH1(((t_NormalizationH1 *) arg)->object.this$));
          }
          static PyObject *t_NormalizationH1_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, NormalizationH1::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_NormalizationH1_init_(t_NormalizationH1 *self, PyObject *args, PyObject *kwds)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 0:
              {
                NormalizationH1 object((jobject) NULL);

                INT_CALL(object = NormalizationH1());
                self->object = object;
                break;
              }
             case 1:
              {
                jfloat a0;
                NormalizationH1 object((jobject) NULL);

                if (!parseArgs(args, "F", &a0))
                {
                  INT_CALL(object = NormalizationH1(a0));
                  self->object = object;
                  break;
                }
              }
             default:
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_NormalizationH1_explain(t_NormalizationH1 *self, PyObject *args)
          {
            ::org::apache::lucene::search::similarities::BasicStats a0((jobject) NULL);
            jdouble a1;
            jdouble a2;
            ::org::apache::lucene::search::Explanation result((jobject) NULL);

            if (!parseArgs(args, "kDD", ::org::apache::lucene::search::similarities::BasicStats::initializeClass, &a0, &a1, &a2))
            {
              OBJ_CALL(result = self->object.explain(a0, a1, a2));
              return ::org::apache::lucene::search::t_Explanation::wrap_Object(result);
            }

            return callSuper(PY_TYPE(NormalizationH1), (PyObject *) self, "explain", args, 2);
          }

          static PyObject *t_NormalizationH1_getC(t_NormalizationH1 *self)
          {
            jfloat result;
            OBJ_CALL(result = self->object.getC());
            return PyFloat_FromDouble((double) result);
          }

          static PyObject *t_NormalizationH1_tfn(t_NormalizationH1 *self, PyObject *args)
          {
            ::org::apache::lucene::search::similarities::BasicStats a0((jobject) NULL);
            jdouble a1;
            jdouble a2;
            jdouble result;

            if (!parseArgs(args, "kDD", ::org::apache::lucene::search::similarities::BasicStats::initializeClass, &a0, &a1, &a2))
            {
              OBJ_CALL(result = self->object.tfn(a0, a1, a2));
              return PyFloat_FromDouble((double) result);
            }

            return callSuper(PY_TYPE(NormalizationH1), (PyObject *) self, "tfn", args, 2);
          }

          static PyObject *t_NormalizationH1_toString(t_NormalizationH1 *self, PyObject *args)
          {
            ::java::lang::String result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.toString());
              return j2p(result);
            }

            return callSuper(PY_TYPE(NormalizationH1), (PyObject *) self, "toString", args, 2);
          }

          static PyObject *t_NormalizationH1_get__c(t_NormalizationH1 *self, void *data)
          {
            jfloat value;
            OBJ_CALL(value = self->object.getC());
            return PyFloat_FromDouble((double) value);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/ckb/SoraniNormalizationFilterFactory.h"
#include "java/util/Map.h"
#include "java/lang/String.h"
#include "org/apache/lucene/analysis/TokenStream.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace ckb {

          ::java::lang::Class *SoraniNormalizationFilterFactory::class$ = NULL;
          jmethodID *SoraniNormalizationFilterFactory::mids$ = NULL;
          bool SoraniNormalizationFilterFactory::live$ = false;
          ::java::lang::String *SoraniNormalizationFilterFactory::NAME = NULL;

          jclass SoraniNormalizationFilterFactory::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/ckb/SoraniNormalizationFilterFactory");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_408bd889ee3beae5] = env->getMethodID(cls, "<init>", "(Ljava/util/Map;)V");
              mids$[mid_create_6de1e28d9d10cd9e] = env->getMethodID(cls, "create", "(Lorg/apache/lucene/analysis/TokenStream;)Lorg/apache/lucene/analysis/TokenStream;");
              mids$[mid_normalize_6de1e28d9d10cd9e] = env->getMethodID(cls, "normalize", "(Lorg/apache/lucene/analysis/TokenStream;)Lorg/apache/lucene/analysis/TokenStream;");

              class$ = new ::java::lang::Class(cls);
              cls = (jclass) class$->this$;

              NAME = new ::java::lang::String(env->getStaticObjectField(cls, "NAME", "Ljava/lang/String;"));
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          SoraniNormalizationFilterFactory::SoraniNormalizationFilterFactory(const ::java::util::Map & a0) : ::org::apache::lucene::analysis::util::TokenFilterFactory(env->newObject(initializeClass, &mids$, mid_init$_408bd889ee3beae5, a0.this$)) {}

          ::org::apache::lucene::analysis::TokenStream SoraniNormalizationFilterFactory::create(const ::org::apache::lucene::analysis::TokenStream & a0) const
          {
            return ::org::apache::lucene::analysis::TokenStream(env->callObjectMethod(this$, mids$[mid_create_6de1e28d9d10cd9e], a0.this$));
          }

          ::org::apache::lucene::analysis::TokenStream SoraniNormalizationFilterFactory::normalize(const ::org::apache::lucene::analysis::TokenStream & a0) const
          {
            return ::org::apache::lucene::analysis::TokenStream(env->callObjectMethod(this$, mids$[mid_normalize_6de1e28d9d10cd9e], a0.this$));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace ckb {
          static PyObject *t_SoraniNormalizationFilterFactory_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_SoraniNormalizationFilterFactory_instance_(PyTypeObject *type, PyObject *arg);
          static int t_SoraniNormalizationFilterFactory_init_(t_SoraniNormalizationFilterFactory *self, PyObject *args, PyObject *kwds);
          static PyObject *t_SoraniNormalizationFilterFactory_create(t_SoraniNormalizationFilterFactory *self, PyObject *args);
          static PyObject *t_SoraniNormalizationFilterFactory_normalize(t_SoraniNormalizationFilterFactory *self, PyObject *args);

          static PyMethodDef t_SoraniNormalizationFilterFactory__methods_[] = {
            DECLARE_METHOD(t_SoraniNormalizationFilterFactory, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_SoraniNormalizationFilterFactory, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_SoraniNormalizationFilterFactory, create, METH_VARARGS),
            DECLARE_METHOD(t_SoraniNormalizationFilterFactory, normalize, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          static PyType_Slot PY_TYPE_SLOTS(SoraniNormalizationFilterFactory)[] = {
            { Py_tp_methods, t_SoraniNormalizationFilterFactory__methods_ },
            { Py_tp_init, (void *) t_SoraniNormalizationFilterFactory_init_ },
            { 0, NULL }
          };

          static PyType_Def *PY_TYPE_BASES(SoraniNormalizationFilterFactory)[] = {
            &PY_TYPE_DEF(::org::apache::lucene::analysis::util::TokenFilterFactory),
            NULL
          };

          DEFINE_TYPE(SoraniNormalizationFilterFactory, t_SoraniNormalizationFilterFactory, SoraniNormalizationFilterFactory);

          void t_SoraniNormalizationFilterFactory::install(PyObject *module)
          {
            installType(&PY_TYPE(SoraniNormalizationFilterFactory), &PY_TYPE_DEF(SoraniNormalizationFilterFactory), module, "SoraniNormalizationFilterFactory", 0);
          }

          void t_SoraniNormalizationFilterFactory::initialize(PyObject *module)
          {
            PyObject_SetAttrString((PyObject *) PY_TYPE(SoraniNormalizationFilterFactory), "class_", make_descriptor(SoraniNormalizationFilterFactory::initializeClass, 1));
            PyObject_SetAttrString((PyObject *) PY_TYPE(SoraniNormalizationFilterFactory), "wrapfn_", make_descriptor(t_SoraniNormalizationFilterFactory::wrap_jobject));
            PyObject_SetAttrString((PyObject *) PY_TYPE(SoraniNormalizationFilterFactory), "boxfn_", make_descriptor(boxObject));
            env->getClass(SoraniNormalizationFilterFactory::initializeClass);
            PyObject_SetAttrString((PyObject *) PY_TYPE(SoraniNormalizationFilterFactory), "NAME", make_descriptor(j2p(*SoraniNormalizationFilterFactory::NAME)));
          }

          static PyObject *t_SoraniNormalizationFilterFactory_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, SoraniNormalizationFilterFactory::initializeClass, 1)))
              return NULL;
            return t_SoraniNormalizationFilterFactory::wrap_Object(SoraniNormalizationFilterFactory(((t_SoraniNormalizationFilterFactory *) arg)->object.this$));
          }
          static PyObject *t_SoraniNormalizationFilterFactory_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, SoraniNormalizationFilterFactory::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_SoraniNormalizationFilterFactory_init_(t_SoraniNormalizationFilterFactory *self, PyObject *args, PyObject *kwds)
          {
            ::java::util::Map a0((jobject) NULL);
            PyTypeObject **p0;
            SoraniNormalizationFilterFactory object((jobject) NULL);

            if (!parseArgs(args, "K", ::java::util::Map::initializeClass, &a0, &p0, ::java::util::t_Map::parameters_))
            {
              INT_CALL(object = SoraniNormalizationFilterFactory(a0));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_SoraniNormalizationFilterFactory_create(t_SoraniNormalizationFilterFactory *self, PyObject *args)
          {
            ::org::apache::lucene::analysis::TokenStream a0((jobject) NULL);
            ::org::apache::lucene::analysis::TokenStream result((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::analysis::TokenStream::initializeClass, &a0))
            {
              OBJ_CALL(result = self->object.create(a0));
              return ::org::apache::lucene::analysis::t_TokenStream::wrap_Object(result);
            }

            return callSuper(PY_TYPE(SoraniNormalizationFilterFactory), (PyObject *) self, "create", args, 2);
          }

          static PyObject *t_SoraniNormalizationFilterFactory_normalize(t_SoraniNormalizationFilterFactory *self, PyObject *args)
          {
            ::org::apache::lucene::analysis::TokenStream a0((jobject) NULL);
            ::org::apache::lucene::analysis::TokenStream result((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::analysis::TokenStream::initializeClass, &a0))
            {
              OBJ_CALL(result = self->object.normalize(a0));
              return ::org::apache::lucene::analysis::t_TokenStream::wrap_Object(result);
            }

            return callSuper(PY_TYPE(SoraniNormalizationFilterFactory), (PyObject *) self, "normalize", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/store/SimpleFSDirectory.h"
#include "org/apache/lucene/store/IOContext.h"
#include "org/apache/lucene/store/IndexInput.h"
#include "java/lang/Class.h"
#include "java/lang/String.h"
#include "java/io/IOException.h"
#include "java/nio/file/Path.h"
#include "org/apache/lucene/store/LockFactory.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace store {

        ::java::lang::Class *SimpleFSDirectory::class$ = NULL;
        jmethodID *SimpleFSDirectory::mids$ = NULL;
        bool SimpleFSDirectory::live$ = false;

        jclass SimpleFSDirectory::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/store/SimpleFSDirectory");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_636077fee54d306c] = env->getMethodID(cls, "<init>", "(Ljava/nio/file/Path;)V");
            mids$[mid_init$_71c9ab2266463084] = env->getMethodID(cls, "<init>", "(Ljava/nio/file/Path;Lorg/apache/lucene/store/LockFactory;)V");
            mids$[mid_openInput_cc9a9aabe8db93df] = env->getMethodID(cls, "openInput", "(Ljava/lang/String;Lorg/apache/lucene/store/IOContext;)Lorg/apache/lucene/store/IndexInput;");

            class$ = new ::java::lang::Class(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        SimpleFSDirectory::SimpleFSDirectory(const ::java::nio::file::Path & a0) : ::org::apache::lucene::store::FSDirectory(env->newObject(initializeClass, &mids$, mid_init$_636077fee54d306c, a0.this$)) {}

        SimpleFSDirectory::SimpleFSDirectory(const ::java::nio::file::Path & a0, const ::org::apache::lucene::store::LockFactory & a1) : ::org::apache::lucene::store::FSDirectory(env->newObject(initializeClass, &mids$, mid_init$_71c9ab2266463084, a0.this$, a1.this$)) {}

        ::org::apache::lucene::store::IndexInput SimpleFSDirectory::openInput(const ::java::lang::String & a0, const ::org::apache::lucene::store::IOContext & a1) const
        {
          return ::org::apache::lucene::store::IndexInput(env->callObjectMethod(this$, mids$[mid_openInput_cc9a9aabe8db93df], a0.this$, a1.this$));
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace store {
        static PyObject *t_SimpleFSDirectory_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_SimpleFSDirectory_instance_(PyTypeObject *type, PyObject *arg);
        static int t_SimpleFSDirectory_init_(t_SimpleFSDirectory *self, PyObject *args, PyObject *kwds);
        static PyObject *t_SimpleFSDirectory_openInput(t_SimpleFSDirectory *self, PyObject *args);

        static PyMethodDef t_SimpleFSDirectory__methods_[] = {
          DECLARE_METHOD(t_SimpleFSDirectory, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_SimpleFSDirectory, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_SimpleFSDirectory, openInput, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        static PyType_Slot PY_TYPE_SLOTS(SimpleFSDirectory)[] = {
          { Py_tp_methods, t_SimpleFSDirectory__methods_ },
          { Py_tp_init, (void *) t_SimpleFSDirectory_init_ },
          { 0, NULL }
        };

        static PyType_Def *PY_TYPE_BASES(SimpleFSDirectory)[] = {
          &PY_TYPE_DEF(::org::apache::lucene::store::FSDirectory),
          NULL
        };

        DEFINE_TYPE(SimpleFSDirectory, t_SimpleFSDirectory, SimpleFSDirectory);

        void t_SimpleFSDirectory::install(PyObject *module)
        {
          installType(&PY_TYPE(SimpleFSDirectory), &PY_TYPE_DEF(SimpleFSDirectory), module, "SimpleFSDirectory", 0);
        }

        void t_SimpleFSDirectory::initialize(PyObject *module)
        {
          PyObject_SetAttrString((PyObject *) PY_TYPE(SimpleFSDirectory), "class_", make_descriptor(SimpleFSDirectory::initializeClass, 1));
          PyObject_SetAttrString((PyObject *) PY_TYPE(SimpleFSDirectory), "wrapfn_", make_descriptor(t_SimpleFSDirectory::wrap_jobject));
          PyObject_SetAttrString((PyObject *) PY_TYPE(SimpleFSDirectory), "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_SimpleFSDirectory_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, SimpleFSDirectory::initializeClass, 1)))
            return NULL;
          return t_SimpleFSDirectory::wrap_Object(SimpleFSDirectory(((t_SimpleFSDirectory *) arg)->object.this$));
        }
        static PyObject *t_SimpleFSDirectory_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, SimpleFSDirectory::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_SimpleFSDirectory_init_(t_SimpleFSDirectory *self, PyObject *args, PyObject *kwds)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 1:
            {
              ::java::nio::file::Path a0((jobject) NULL);
              SimpleFSDirectory object((jobject) NULL);

              if (!parseArgs(args, "k", ::java::nio::file::Path::initializeClass, &a0))
              {
                INT_CALL(object = SimpleFSDirectory(a0));
                self->object = object;
                break;
              }
            }
            goto err;
           case 2:
            {
              ::java::nio::file::Path a0((jobject) NULL);
              ::org::apache::lucene::store::LockFactory a1((jobject) NULL);
              SimpleFSDirectory object((jobject) NULL);

              if (!parseArgs(args, "kk", ::java::nio::file::Path::initializeClass, ::org::apache::lucene::store::LockFactory::initializeClass, &a0, &a1))
              {
                INT_CALL(object = SimpleFSDirectory(a0, a1));
                self->object = object;
                break;
              }
            }
           default:
           err:
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }

        static PyObject *t_SimpleFSDirectory_openInput(t_SimpleFSDirectory *self, PyObject *args)
        {
          ::java::lang::String a0((jobject) NULL);
          ::org::apache::lucene::store::IOContext a1((jobject) NULL);
          ::org::apache::lucene::store::IndexInput result((jobject) NULL);

          if (!parseArgs(args, "sk", ::org::apache::lucene::store::IOContext::initializeClass, &a0, &a1))
          {
            OBJ_CALL(result = self->object.openInput(a0, a1));
            return ::org::apache::lucene::store::t_IndexInput::wrap_Object(result);
          }

          return callSuper(PY_TYPE(SimpleFSDirectory), (PyObject *) self, "openInput", args, 2);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queryparser/flexible/core/nodes/GroupQueryNode.h"
#include "org/apache/lucene/queryparser/flexible/core/parser/EscapeQuerySyntax.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/queryparser/flexible/core/nodes/QueryNode.h"
#include "java/lang/String.h"
#include "java/lang/CharSequence.h"
#include "java/lang/CloneNotSupportedException.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace core {
            namespace nodes {

              ::java::lang::Class *GroupQueryNode::class$ = NULL;
              jmethodID *GroupQueryNode::mids$ = NULL;
              bool GroupQueryNode::live$ = false;

              jclass GroupQueryNode::initializeClass(bool getOnly)
              {
                if (getOnly)
                  return (jclass) (live$ ? class$->this$ : NULL);
                if (class$ == NULL)
                {
                  jclass cls = (jclass) env->findClass("org/apache/lucene/queryparser/flexible/core/nodes/GroupQueryNode");

                  mids$ = new jmethodID[max_mid];
                  mids$[mid_init$_f80bf4f68564485e] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/queryparser/flexible/core/nodes/QueryNode;)V");
                  mids$[mid_cloneTree_7f4134ae4682ace0] = env->getMethodID(cls, "cloneTree", "()Lorg/apache/lucene/queryparser/flexible/core/nodes/QueryNode;");
                  mids$[mid_getChild_7f4134ae4682ace0] = env->getMethodID(cls, "getChild", "()Lorg/apache/lucene/queryparser/flexible/core/nodes/QueryNode;");
                  mids$[mid_setChild_f80bf4f68564485e] = env->getMethodID(cls, "setChild", "(Lorg/apache/lucene/queryparser/flexible/core/nodes/QueryNode;)V");
                  mids$[mid_toQueryString_6bb2daa53c506f10] = env->getMethodID(cls, "toQueryString", "(Lorg/apache/lucene/queryparser/flexible/core/parser/EscapeQuerySyntax;)Ljava/lang/CharSequence;");
                  mids$[mid_toString_db9b55ba01e03e4b] = env->getMethodID(cls, "toString", "()Ljava/lang/String;");

                  class$ = new ::java::lang::Class(cls);
                  live$ = true;
                }
                return (jclass) class$->this$;
              }

              GroupQueryNode::GroupQueryNode(const ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode & a0) : ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNodeImpl(env->newObject(initializeClass, &mids$, mid_init$_f80bf4f68564485e, a0.this$)) {}

              ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode GroupQueryNode::cloneTree() const
              {
                return ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode(env->callObjectMethod(this$, mids$[mid_cloneTree_7f4134ae4682ace0]));
              }

              ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode GroupQueryNode::getChild() const
              {
                return ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode(env->callObjectMethod(this$, mids$[mid_getChild_7f4134ae4682ace0]));
              }

              void GroupQueryNode::setChild(const ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode & a0) const
              {
                env->callVoidMethod(this$, mids$[mid_setChild_f80bf4f68564485e], a0.this$);
              }

              ::java::lang::CharSequence GroupQueryNode::toQueryString(const ::org::apache::lucene::queryparser::flexible::core::parser::EscapeQuerySyntax & a0) const
              {
                return ::java::lang::CharSequence(env->callObjectMethod(this$, mids$[mid_toQueryString_6bb2daa53c506f10], a0.this$));
              }

              ::java::lang::String GroupQueryNode::toString() const
              {
                return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_db9b55ba01e03e4b]));
              }
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace core {
            namespace nodes {
              static PyObject *t_GroupQueryNode_cast_(PyTypeObject *type, PyObject *arg);
              static PyObject *t_GroupQueryNode_instance_(PyTypeObject *type, PyObject *arg);
              static int t_GroupQueryNode_init_(t_GroupQueryNode *self, PyObject *args, PyObject *kwds);
              static PyObject *t_GroupQueryNode_cloneTree(t_GroupQueryNode *self, PyObject *args);
              static PyObject *t_GroupQueryNode_getChild(t_GroupQueryNode *self);
              static PyObject *t_GroupQueryNode_setChild(t_GroupQueryNode *self, PyObject *arg);
              static PyObject *t_GroupQueryNode_toQueryString(t_GroupQueryNode *self, PyObject *args);
              static PyObject *t_GroupQueryNode_toString(t_GroupQueryNode *self, PyObject *args);
              static PyObject *t_GroupQueryNode_get__child(t_GroupQueryNode *self, void *data);
              static int t_GroupQueryNode_set__child(t_GroupQueryNode *self, PyObject *arg, void *data);
              static PyGetSetDef t_GroupQueryNode__fields_[] = {
                DECLARE_GETSET_FIELD(t_GroupQueryNode, child),
                { NULL, NULL, NULL, NULL, NULL }
              };

              static PyMethodDef t_GroupQueryNode__methods_[] = {
                DECLARE_METHOD(t_GroupQueryNode, cast_, METH_O | METH_CLASS),
                DECLARE_METHOD(t_GroupQueryNode, instance_, METH_O | METH_CLASS),
                DECLARE_METHOD(t_GroupQueryNode, cloneTree, METH_VARARGS),
                DECLARE_METHOD(t_GroupQueryNode, getChild, METH_NOARGS),
                DECLARE_METHOD(t_GroupQueryNode, setChild, METH_O),
                DECLARE_METHOD(t_GroupQueryNode, toQueryString, METH_VARARGS),
                DECLARE_METHOD(t_GroupQueryNode, toString, METH_VARARGS),
                { NULL, NULL, 0, NULL }
              };

              static PyType_Slot PY_TYPE_SLOTS(GroupQueryNode)[] = {
                { Py_tp_methods, t_GroupQueryNode__methods_ },
                { Py_tp_init, (void *) t_GroupQueryNode_init_ },
                { Py_tp_getset, t_GroupQueryNode__fields_ },
                { 0, NULL }
              };

              static PyType_Def *PY_TYPE_BASES(GroupQueryNode)[] = {
                &PY_TYPE_DEF(::org::apache::lucene::queryparser::flexible::core::nodes::QueryNodeImpl),
                NULL
              };

              DEFINE_TYPE(GroupQueryNode, t_GroupQueryNode, GroupQueryNode);

              void t_GroupQueryNode::install(PyObject *module)
              {
                installType(&PY_TYPE(GroupQueryNode), &PY_TYPE_DEF(GroupQueryNode), module, "GroupQueryNode", 0);
              }

              void t_GroupQueryNode::initialize(PyObject *module)
              {
                PyObject_SetAttrString((PyObject *) PY_TYPE(GroupQueryNode), "class_", make_descriptor(GroupQueryNode::initializeClass, 1));
                PyObject_SetAttrString((PyObject *) PY_TYPE(GroupQueryNode), "wrapfn_", make_descriptor(t_GroupQueryNode::wrap_jobject));
                PyObject_SetAttrString((PyObject *) PY_TYPE(GroupQueryNode), "boxfn_", make_descriptor(boxObject));
              }

              static PyObject *t_GroupQueryNode_cast_(PyTypeObject *type, PyObject *arg)
              {
                if (!(arg = castCheck(arg, GroupQueryNode::initializeClass, 1)))
                  return NULL;
                return t_GroupQueryNode::wrap_Object(GroupQueryNode(((t_GroupQueryNode *) arg)->object.this$));
              }
              static PyObject *t_GroupQueryNode_instance_(PyTypeObject *type, PyObject *arg)
              {
                if (!castCheck(arg, GroupQueryNode::initializeClass, 0))
                  Py_RETURN_FALSE;
                Py_RETURN_TRUE;
              }

              static int t_GroupQueryNode_init_(t_GroupQueryNode *self, PyObject *args, PyObject *kwds)
              {
                ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode a0((jobject) NULL);
                GroupQueryNode object((jobject) NULL);

                if (!parseArgs(args, "k", ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode::initializeClass, &a0))
                {
                  INT_CALL(object = GroupQueryNode(a0));
                  self->object = object;
                }
                else
                {
                  PyErr_SetArgsError((PyObject *) self, "__init__", args);
                  return -1;
                }

                return 0;
              }

              static PyObject *t_GroupQueryNode_cloneTree(t_GroupQueryNode *self, PyObject *args)
              {
                ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode result((jobject) NULL);

                if (!parseArgs(args, ""))
                {
                  OBJ_CALL(result = self->object.cloneTree());
                  return ::org::apache::lucene::queryparser::flexible::core::nodes::t_QueryNode::wrap_Object(result);
                }

                return callSuper(PY_TYPE(GroupQueryNode), (PyObject *) self, "cloneTree", args, 2);
              }

              static PyObject *t_GroupQueryNode_getChild(t_GroupQueryNode *self)
              {
                ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode result((jobject) NULL);
                OBJ_CALL(result = self->object.getChild());
                return ::org::apache::lucene::queryparser::flexible::core::nodes::t_QueryNode::wrap_Object(result);
              }

              static PyObject *t_GroupQueryNode_setChild(t_GroupQueryNode *self, PyObject *arg)
              {
                ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode a0((jobject) NULL);

                if (!parseArg(arg, "k", ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode::initializeClass, &a0))
                {
                  OBJ_CALL(self->object.setChild(a0));
                  Py_RETURN_NONE;
                }

                PyErr_SetArgsError((PyObject *) self, "setChild", arg);
                return NULL;
              }

              static PyObject *t_GroupQueryNode_toQueryString(t_GroupQueryNode *self, PyObject *args)
              {
                ::org::apache::lucene::queryparser::flexible::core::parser::EscapeQuerySyntax a0((jobject) NULL);
                ::java::lang::CharSequence result((jobject) NULL);

                if (!parseArgs(args, "k", ::org::apache::lucene::queryparser::flexible::core::parser::EscapeQuerySyntax::initializeClass, &a0))
                {
                  OBJ_CALL(result = self->object.toQueryString(a0));
                  return ::java::lang::t_CharSequence::wrap_Object(result);
                }

                return callSuper(PY_TYPE(GroupQueryNode), (PyObject *) self, "toQueryString", args, 2);
              }

              static PyObject *t_GroupQueryNode_toString(t_GroupQueryNode *self, PyObject *args)
              {
                ::java::lang::String result((jobject) NULL);

                if (!parseArgs(args, ""))
                {
                  OBJ_CALL(result = self->object.toString());
                  return j2p(result);
                }

                return callSuper(PY_TYPE(GroupQueryNode), (PyObject *) self, "toString", args, 2);
              }

              static PyObject *t_GroupQueryNode_get__child(t_GroupQueryNode *self, void *data)
              {
                ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode value((jobject) NULL);
                OBJ_CALL(value = self->object.getChild());
                return ::org::apache::lucene::queryparser::flexible::core::nodes::t_QueryNode::wrap_Object(value);
              }
              static int t_GroupQueryNode_set__child(t_GroupQueryNode *self, PyObject *arg, void *data)
              {
                {
                  ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode value((jobject) NULL);
                  if (!parseArg(arg, "k", ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode::initializeClass, &value))
                  {
                    INT_CALL(self->object.setChild(value));
                    return 0;
                  }
                }
                PyErr_SetArgsError((PyObject *) self, "child", arg);
                return -1;
              }
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/index/SerialMergeScheduler.h"
#include "org/apache/lucene/index/MergeScheduler$MergeSource.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/index/MergeTrigger.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {

        ::java::lang::Class *SerialMergeScheduler::class$ = NULL;
        jmethodID *SerialMergeScheduler::mids$ = NULL;
        bool SerialMergeScheduler::live$ = false;

        jclass SerialMergeScheduler::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/index/SerialMergeScheduler");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_f2cc1bce94666404] = env->getMethodID(cls, "<init>", "()V");
            mids$[mid_close_f2cc1bce94666404] = env->getMethodID(cls, "close", "()V");
            mids$[mid_merge_d538047dffd358b1] = env->getMethodID(cls, "merge", "(Lorg/apache/lucene/index/MergeScheduler$MergeSource;Lorg/apache/lucene/index/MergeTrigger;)V");

            class$ = new ::java::lang::Class(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        SerialMergeScheduler::SerialMergeScheduler() : ::org::apache::lucene::index::MergeScheduler(env->newObject(initializeClass, &mids$, mid_init$_f2cc1bce94666404)) {}

        void SerialMergeScheduler::close() const
        {
          env->callVoidMethod(this$, mids$[mid_close_f2cc1bce94666404]);
        }

        void SerialMergeScheduler::merge(const ::org::apache::lucene::index::MergeScheduler$MergeSource & a0, const ::org::apache::lucene::index::MergeTrigger & a1) const
        {
          env->callVoidMethod(this$, mids$[mid_merge_d538047dffd358b1], a0.this$, a1.this$);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {
        static PyObject *t_SerialMergeScheduler_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_SerialMergeScheduler_instance_(PyTypeObject *type, PyObject *arg);
        static int t_SerialMergeScheduler_init_(t_SerialMergeScheduler *self, PyObject *args, PyObject *kwds);
        static PyObject *t_SerialMergeScheduler_close(t_SerialMergeScheduler *self, PyObject *args);
        static PyObject *t_SerialMergeScheduler_merge(t_SerialMergeScheduler *self, PyObject *args);

        static PyMethodDef t_SerialMergeScheduler__methods_[] = {
          DECLARE_METHOD(t_SerialMergeScheduler, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_SerialMergeScheduler, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_SerialMergeScheduler, close, METH_VARARGS),
          DECLARE_METHOD(t_SerialMergeScheduler, merge, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        static PyType_Slot PY_TYPE_SLOTS(SerialMergeScheduler)[] = {
          { Py_tp_methods, t_SerialMergeScheduler__methods_ },
          { Py_tp_init, (void *) t_SerialMergeScheduler_init_ },
          { 0, NULL }
        };

        static PyType_Def *PY_TYPE_BASES(SerialMergeScheduler)[] = {
          &PY_TYPE_DEF(::org::apache::lucene::index::MergeScheduler),
          NULL
        };

        DEFINE_TYPE(SerialMergeScheduler, t_SerialMergeScheduler, SerialMergeScheduler);

        void t_SerialMergeScheduler::install(PyObject *module)
        {
          installType(&PY_TYPE(SerialMergeScheduler), &PY_TYPE_DEF(SerialMergeScheduler), module, "SerialMergeScheduler", 0);
        }

        void t_SerialMergeScheduler::initialize(PyObject *module)
        {
          PyObject_SetAttrString((PyObject *) PY_TYPE(SerialMergeScheduler), "class_", make_descriptor(SerialMergeScheduler::initializeClass, 1));
          PyObject_SetAttrString((PyObject *) PY_TYPE(SerialMergeScheduler), "wrapfn_", make_descriptor(t_SerialMergeScheduler::wrap_jobject));
          PyObject_SetAttrString((PyObject *) PY_TYPE(SerialMergeScheduler), "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_SerialMergeScheduler_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, SerialMergeScheduler::initializeClass, 1)))
            return NULL;
          return t_SerialMergeScheduler::wrap_Object(SerialMergeScheduler(((t_SerialMergeScheduler *) arg)->object.this$));
        }
        static PyObject *t_SerialMergeScheduler_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, SerialMergeScheduler::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_SerialMergeScheduler_init_(t_SerialMergeScheduler *self, PyObject *args, PyObject *kwds)
        {
          SerialMergeScheduler object((jobject) NULL);

          INT_CALL(object = SerialMergeScheduler());
          self->object = object;

          return 0;
        }

        static PyObject *t_SerialMergeScheduler_close(t_SerialMergeScheduler *self, PyObject *args)
        {

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(self->object.close());
            Py_RETURN_NONE;
          }

          return callSuper(PY_TYPE(SerialMergeScheduler), (PyObject *) self, "close", args, 2);
        }

        static PyObject *t_SerialMergeScheduler_merge(t_SerialMergeScheduler *self, PyObject *args)
        {
          ::org::apache::lucene::index::MergeScheduler$MergeSource a0((jobject) NULL);
          ::org::apache::lucene::index::MergeTrigger a1((jobject) NULL);
          PyTypeObject **p1;

          if (!parseArgs(args, "kK", ::org::apache::lucene::index::MergeScheduler$MergeSource::initializeClass, ::org::apache::lucene::index::MergeTrigger::initializeClass, &a0, &a1, &p1, ::org::apache::lucene::index::t_MergeTrigger::parameters_))
          {
            OBJ_CALL(self->object.merge(a0, a1));
            Py_RETURN_NONE;
          }

          return callSuper(PY_TYPE(SerialMergeScheduler), (PyObject *) self, "merge", args, 2);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/util/BytesRef.h"
#include "java/lang/Cloneable.h"
#include "java/lang/Comparable.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/util/BytesRef.h"
#include "java/lang/String.h"
#include "java/lang/CharSequence.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {

        ::java::lang::Class *BytesRef::class$ = NULL;
        jmethodID *BytesRef::mids$ = NULL;
        jfieldID *BytesRef::fids$ = NULL;
        bool BytesRef::live$ = false;
        JArray< jbyte > *BytesRef::EMPTY_BYTES = NULL;

        jclass BytesRef::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/util/BytesRef");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_f2cc1bce94666404] = env->getMethodID(cls, "<init>", "()V");
            mids$[mid_init$_9ffdf271836656c4] = env->getMethodID(cls, "<init>", "([B)V");
            mids$[mid_init$_040c4cd0390c5aff] = env->getMethodID(cls, "<init>", "(I)V");
            mids$[mid_init$_4b7f5e38f806ae55] = env->getMethodID(cls, "<init>", "(Ljava/lang/CharSequence;)V");
            mids$[mid_init$_43fdd39c09bb2fad] = env->getMethodID(cls, "<init>", "([BII)V");
            mids$[mid_bytesEquals_553d972fe19daaec] = env->getMethodID(cls, "bytesEquals", "(Lorg/apache/lucene/util/BytesRef;)Z");
            mids$[mid_clone_7af2ea2e37ce82b8] = env->getMethodID(cls, "clone", "()Lorg/apache/lucene/util/BytesRef;");
            mids$[mid_compareTo_1c2e5fa34f4312de] = env->getMethodID(cls, "compareTo", "(Lorg/apache/lucene/util/BytesRef;)I");
            mids$[mid_deepCopyOf_858d77d551759ace] = env->getStaticMethodID(cls, "deepCopyOf", "(Lorg/apache/lucene/util/BytesRef;)Lorg/apache/lucene/util/BytesRef;");
            mids$[mid_equals_8b72f2dcdde6fd1d] = env->getMethodID(cls, "equals", "(Ljava/lang/Object;)Z");
            mids$[mid_hashCode_9972fcc56b44e79d] = env->getMethodID(cls, "hashCode", "()I");
            mids$[mid_isValid_8454bd5aa23fd11e] = env->getMethodID(cls, "isValid", "()Z");
            mids$[mid_toString_db9b55ba01e03e4b] = env->getMethodID(cls, "toString", "()Ljava/lang/String;");
            mids$[mid_utf8ToString_db9b55ba01e03e4b] = env->getMethodID(cls, "utf8ToString", "()Ljava/lang/String;");

            fids$ = new jfieldID[max_fid];
            fids$[fid_bytes] = env->getFieldID(cls, "bytes", "[B");
            fids$[fid_length] = env->getFieldID(cls, "length", "I");
            fids$[fid_offset] = env->getFieldID(cls, "offset", "I");

            class$ = new ::java::lang::Class(cls);
            cls = (jclass) class$->this$;

            EMPTY_BYTES = new JArray< jbyte >(env->getStaticObjectField(cls, "EMPTY_BYTES", "[B"));
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        BytesRef::BytesRef() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_f2cc1bce94666404)) {}

        BytesRef::BytesRef(const JArray< jbyte > & a0) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_9ffdf271836656c4, a0.this$)) {}

        BytesRef::BytesRef(jint a0) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_040c4cd0390c5aff, a0)) {}

        BytesRef::BytesRef(const ::java::lang::CharSequence & a0) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_4b7f5e38f806ae55, a0.this$)) {}

        BytesRef::BytesRef(const JArray< jbyte > & a0, jint a1, jint a2) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_43fdd39c09bb2fad, a0.this$, a1, a2)) {}

        jboolean BytesRef::bytesEquals(const BytesRef & a0) const
        {
          return env->callBooleanMethod(this$, mids$[mid_bytesEquals_553d972fe19daaec], a0.this$);
        }

        BytesRef BytesRef::clone() const
        {
          return BytesRef(env->callObjectMethod(this$, mids$[mid_clone_7af2ea2e37ce82b8]));
        }

        jint BytesRef::compareTo(const BytesRef & a0) const
        {
          return env->callIntMethod(this$, mids$[mid_compareTo_1c2e5fa34f4312de], a0.this$);
        }

        BytesRef BytesRef::deepCopyOf(const BytesRef & a0)
        {
          jclass cls = env->getClass(initializeClass);
          return BytesRef(env->callStaticObjectMethod(cls, mids$[mid_deepCopyOf_858d77d551759ace], a0.this$));
        }

        jboolean BytesRef::equals(const ::java::lang::Object & a0) const
        {
          return env->callBooleanMethod(this$, mids$[mid_equals_8b72f2dcdde6fd1d], a0.this$);
        }

        jint BytesRef::hashCode() const
        {
          return env->callIntMethod(this$, mids$[mid_hashCode_9972fcc56b44e79d]);
        }

        jboolean BytesRef::isValid() const
        {
          return env->callBooleanMethod(this$, mids$[mid_isValid_8454bd5aa23fd11e]);
        }

        ::java::lang::String BytesRef::toString() const
        {
          return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_db9b55ba01e03e4b]));
        }

        ::java::lang::String BytesRef::utf8ToString() const
        {
          return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_utf8ToString_db9b55ba01e03e4b]));
        }

        JArray< jbyte > BytesRef::_get_bytes() const
        {
          return JArray< jbyte >(env->getObjectField(this$, fids$[fid_bytes]));
        }

        void BytesRef::_set_bytes(const JArray< jbyte > & a0) const
        {
          env->setObjectField(this$, fids$[fid_bytes], a0.this$);
        }

        jint BytesRef::_get_length() const
        {
          return env->getIntField(this$, fids$[fid_length]);
        }

        void BytesRef::_set_length(jint a0) const
        {
          env->setIntField(this$, fids$[fid_length], a0);
        }

        jint BytesRef::_get_offset() const
        {
          return env->getIntField(this$, fids$[fid_offset]);
        }

        void BytesRef::_set_offset(jint a0) const
        {
          env->setIntField(this$, fids$[fid_offset], a0);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        static PyObject *t_BytesRef_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_BytesRef_instance_(PyTypeObject *type, PyObject *arg);
        static int t_BytesRef_init_(t_BytesRef *self, PyObject *args, PyObject *kwds);
        static PyObject *t_BytesRef_bytesEquals(t_BytesRef *self, PyObject *arg);
        static PyObject *t_BytesRef_clone(t_BytesRef *self);
        static PyObject *t_BytesRef_compareTo(t_BytesRef *self, PyObject *arg);
        static PyObject *t_BytesRef_deepCopyOf(PyTypeObject *type, PyObject *arg);
        static PyObject *t_BytesRef_equals(t_BytesRef *self, PyObject *args);
        static PyObject *t_BytesRef_hashCode(t_BytesRef *self, PyObject *args);
        static PyObject *t_BytesRef_isValid(t_BytesRef *self);
        static PyObject *t_BytesRef_toString(t_BytesRef *self, PyObject *args);
        static PyObject *t_BytesRef_utf8ToString(t_BytesRef *self);
        static PyObject *t_BytesRef_get__bytes(t_BytesRef *self, void *data);
        static int t_BytesRef_set__bytes(t_BytesRef *self, PyObject *arg, void *data);
        static PyObject *t_BytesRef_get__length(t_BytesRef *self, void *data);
        static int t_BytesRef_set__length(t_BytesRef *self, PyObject *arg, void *data);
        static PyObject *t_BytesRef_get__offset(t_BytesRef *self, void *data);
        static int t_BytesRef_set__offset(t_BytesRef *self, PyObject *arg, void *data);

        static PyObject *t_BytesRef_get__valid(t_BytesRef *self, void *data);
        static PyGetSetDef t_BytesRef__fields_[] = {
          DECLARE_GETSET_FIELD(t_BytesRef, bytes),
          DECLARE_GETSET_FIELD(t_BytesRef, length),
          DECLARE_GETSET_FIELD(t_BytesRef, offset),
          DECLARE_GET_FIELD(t_BytesRef, valid),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_BytesRef__methods_[] = {
          DECLARE_METHOD(t_BytesRef, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_BytesRef, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_BytesRef, bytesEquals, METH_O),
          DECLARE_METHOD(t_BytesRef, clone, METH_NOARGS),
          DECLARE_METHOD(t_BytesRef, compareTo, METH_O),
          DECLARE_METHOD(t_BytesRef, deepCopyOf, METH_O | METH_CLASS),
          DECLARE_METHOD(t_BytesRef, equals, METH_VARARGS),
          DECLARE_METHOD(t_BytesRef, hashCode, METH_VARARGS),
          DECLARE_METHOD(t_BytesRef, isValid, METH_NOARGS),
          DECLARE_METHOD(t_BytesRef, toString, METH_VARARGS),
          DECLARE_METHOD(t_BytesRef, utf8ToString, METH_NOARGS),
          { NULL, NULL, 0, NULL }
        };

        static PyType_Slot PY_TYPE_SLOTS(BytesRef)[] = {
          { Py_tp_methods, t_BytesRef__methods_ },
          { Py_tp_init, (void *) t_BytesRef_init_ },
          { Py_tp_getset, t_BytesRef__fields_ },
          { 0, NULL }
        };

        static PyType_Def *PY_TYPE_BASES(BytesRef)[] = {
          &PY_TYPE_DEF(::java::lang::Object),
          NULL
        };

        DEFINE_TYPE(BytesRef, t_BytesRef, BytesRef);

        void t_BytesRef::install(PyObject *module)
        {
          installType(&PY_TYPE(BytesRef), &PY_TYPE_DEF(BytesRef), module, "BytesRef", 0);
        }

        void t_BytesRef::initialize(PyObject *module)
        {
          PyObject_SetAttrString((PyObject *) PY_TYPE(BytesRef), "class_", make_descriptor(BytesRef::initializeClass, 1));
          PyObject_SetAttrString((PyObject *) PY_TYPE(BytesRef), "wrapfn_", make_descriptor(t_BytesRef::wrap_jobject));
          PyObject_SetAttrString((PyObject *) PY_TYPE(BytesRef), "boxfn_", make_descriptor(boxObject));
          env->getClass(BytesRef::initializeClass);
          PyObject_SetAttrString((PyObject *) PY_TYPE(BytesRef), "EMPTY_BYTES", make_descriptor(BytesRef::EMPTY_BYTES->wrap()));
        }

        static PyObject *t_BytesRef_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, BytesRef::initializeClass, 1)))
            return NULL;
          return t_BytesRef::wrap_Object(BytesRef(((t_BytesRef *) arg)->object.this$));
        }
        static PyObject *t_BytesRef_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, BytesRef::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_BytesRef_init_(t_BytesRef *self, PyObject *args, PyObject *kwds)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 0:
            {
              BytesRef object((jobject) NULL);

              INT_CALL(object = BytesRef());
              self->object = object;
              break;
            }
           case 1:
            {
              JArray< jbyte > a0((jobject) NULL);
              BytesRef object((jobject) NULL);

              if (!parseArgs(args, "[B", &a0))
              {
                INT_CALL(object = BytesRef(a0));
                self->object = object;
                break;
              }
            }
            {
              jint a0;
              BytesRef object((jobject) NULL);

              if (!parseArgs(args, "I", &a0))
              {
                INT_CALL(object = BytesRef(a0));
                self->object = object;
                break;
              }
            }
            {
              ::java::lang::CharSequence a0((jobject) NULL);
              BytesRef object((jobject) NULL);

              if (!parseArgs(args, "O", ::java::lang::PY_TYPE(CharSequence), &a0))
              {
                INT_CALL(object = BytesRef(a0));
                self->object = object;
                break;
              }
            }
            goto err;
           case 3:
            {
              JArray< jbyte > a0((jobject) NULL);
              jint a1;
              jint a2;
              BytesRef object((jobject) NULL);

              if (!parseArgs(args, "[BII", &a0, &a1, &a2))
              {
                INT_CALL(object = BytesRef(a0, a1, a2));
                self->object = object;
                break;
              }
            }
           default:
           err:
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }

        static PyObject *t_BytesRef_bytesEquals(t_BytesRef *self, PyObject *arg)
        {
          BytesRef a0((jobject) NULL);
          jboolean result;

          if (!parseArg(arg, "k", BytesRef::initializeClass, &a0))
          {
            OBJ_CALL(result = self->object.bytesEquals(a0));
            Py_RETURN_BOOL(result);
          }

          PyErr_SetArgsError((PyObject *) self, "bytesEquals", arg);
          return NULL;
        }

        static PyObject *t_BytesRef_clone(t_BytesRef *self)
        {
          BytesRef result((jobject) NULL);
          OBJ_CALL(result = self->object.clone());
          return t_BytesRef::wrap_Object(result);
        }

        static PyObject *t_BytesRef_compareTo(t_BytesRef *self, PyObject *arg)
        {
          BytesRef a0((jobject) NULL);
          jint result;

          if (!parseArg(arg, "k", BytesRef::initializeClass, &a0))
          {
            OBJ_CALL(result = self->object.compareTo(a0));
            return PyLong_FromLong((long) result);
          }

          PyErr_SetArgsError((PyObject *) self, "compareTo", arg);
          return NULL;
        }

        static PyObject *t_BytesRef_deepCopyOf(PyTypeObject *type, PyObject *arg)
        {
          BytesRef a0((jobject) NULL);
          BytesRef result((jobject) NULL);

          if (!parseArg(arg, "k", BytesRef::initializeClass, &a0))
          {
            OBJ_CALL(result = ::org::apache::lucene::util::BytesRef::deepCopyOf(a0));
            return t_BytesRef::wrap_Object(result);
          }

          PyErr_SetArgsError(type, "deepCopyOf", arg);
          return NULL;
        }

        static PyObject *t_BytesRef_equals(t_BytesRef *self, PyObject *args)
        {
          ::java::lang::Object a0((jobject) NULL);
          jboolean result;

          if (!parseArgs(args, "o", &a0))
          {
            OBJ_CALL(result = self->object.equals(a0));
            Py_RETURN_BOOL(result);
          }

          return callSuper(PY_TYPE(BytesRef), (PyObject *) self, "equals", args, 2);
        }

        static PyObject *t_BytesRef_hashCode(t_BytesRef *self, PyObject *args)
        {
          jint result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.hashCode());
            return PyLong_FromLong((long) result);
          }

          return callSuper(PY_TYPE(BytesRef), (PyObject *) self, "hashCode", args, 2);
        }

        static PyObject *t_BytesRef_isValid(t_BytesRef *self)
        {
          jboolean result;
          OBJ_CALL(result = self->object.isValid());
          Py_RETURN_BOOL(result);
        }

        static PyObject *t_BytesRef_toString(t_BytesRef *self, PyObject *args)
        {
          ::java::lang::String result((jobject) NULL);

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.toString());
            return j2p(result);
          }

          return callSuper(PY_TYPE(BytesRef), (PyObject *) self, "toString", args, 2);
        }

        static PyObject *t_BytesRef_utf8ToString(t_BytesRef *self)
        {
          ::java::lang::String result((jobject) NULL);
          OBJ_CALL(result = self->object.utf8ToString());
          return j2p(result);
        }

        static PyObject *t_BytesRef_get__bytes(t_BytesRef *self, void *data)
        {
          JArray< jbyte > value((jobject) NULL);
          OBJ_CALL(value = self->object._get_bytes());
          return value.wrap();
        }
        static int t_BytesRef_set__bytes(t_BytesRef *self, PyObject *arg, void *data)
        {
          JArray< jbyte > value((jobject) NULL);
          if (!parseArg(arg, "[B", &value))
          {
            INT_CALL(self->object._set_bytes(value));
            return 0;
          }
          PyErr_SetArgsError((PyObject *) self, "bytes", arg);
          return -1;
        }

        static PyObject *t_BytesRef_get__length(t_BytesRef *self, void *data)
        {
          jint value;
          OBJ_CALL(value = self->object._get_length());
          return PyLong_FromLong((long) value);
        }
        static int t_BytesRef_set__length(t_BytesRef *self, PyObject *arg, void *data)
        {
          jint value;
          if (!parseArg(arg, "I", &value))
          {
            INT_CALL(self->object._set_length(value));
            return 0;
          }
          PyErr_SetArgsError((PyObject *) self, "length", arg);
          return -1;
        }

        static PyObject *t_BytesRef_get__offset(t_BytesRef *self, void *data)
        {
          jint value;
          OBJ_CALL(value = self->object._get_offset());
          return PyLong_FromLong((long) value);
        }
        static int t_BytesRef_set__offset(t_BytesRef *self, PyObject *arg, void *data)
        {
          jint value;
          if (!parseArg(arg, "I", &value))
          {
            INT_CALL(self->object._set_offset(value));
            return 0;
          }
          PyErr_SetArgsError((PyObject *) self, "offset", arg);
          return -1;
        }

        static PyObject *t_BytesRef_get__valid(t_BytesRef *self, void *data)
        {
          jboolean value;
          OBJ_CALL(value = self->object.isValid());
          Py_RETURN_BOOL(value);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/index/MergeScheduler$MergeSource.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/index/MergePolicy$OneMerge.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {

        ::java::lang::Class *MergeScheduler$MergeSource::class$ = NULL;
        jmethodID *MergeScheduler$MergeSource::mids$ = NULL;
        bool MergeScheduler$MergeSource::live$ = false;

        jclass MergeScheduler$MergeSource::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/index/MergeScheduler$MergeSource");

            mids$ = new jmethodID[max_mid];
            mids$[mid_getNextMerge_6a58f574dc79a20a] = env->getMethodID(cls, "getNextMerge", "()Lorg/apache/lucene/index/MergePolicy$OneMerge;");
            mids$[mid_hasPendingMerges_8454bd5aa23fd11e] = env->getMethodID(cls, "hasPendingMerges", "()Z");
            mids$[mid_merge_b4144ef05f017168] = env->getMethodID(cls, "merge", "(Lorg/apache/lucene/index/MergePolicy$OneMerge;)V");
            mids$[mid_onMergeFinished_b4144ef05f017168] = env->getMethodID(cls, "onMergeFinished", "(Lorg/apache/lucene/index/MergePolicy$OneMerge;)V");

            class$ = new ::java::lang::Class(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        ::org::apache::lucene::index::MergePolicy$OneMerge MergeScheduler$MergeSource::getNextMerge() const
        {
          return ::org::apache::lucene::index::MergePolicy$OneMerge(env->callObjectMethod(this$, mids$[mid_getNextMerge_6a58f574dc79a20a]));
        }

        jboolean MergeScheduler$MergeSource::hasPendingMerges() const
        {
          return env->callBooleanMethod(this$, mids$[mid_hasPendingMerges_8454bd5aa23fd11e]);
        }

        void MergeScheduler$MergeSource::merge(const ::org::apache::lucene::index::MergePolicy$OneMerge & a0) const
        {
          env->callVoidMethod(this$, mids$[mid_merge_b4144ef05f017168], a0.this$);
        }

        void MergeScheduler$MergeSource::onMergeFinished(const ::org::apache::lucene::index::MergePolicy$OneMerge & a0) const
        {
          env->callVoidMethod(this$, mids$[mid_onMergeFinished_b4144ef05f017168], a0.this$);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {
        static PyObject *t_MergeScheduler$MergeSource_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_MergeScheduler$MergeSource_instance_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_MergeScheduler$MergeSource_getNextMerge(t_MergeScheduler$MergeSource *self);
        static PyObject *t_MergeScheduler$MergeSource_hasPendingMerges(t_MergeScheduler$MergeSource *self);
        static PyObject *t_MergeScheduler$MergeSource_merge(t_MergeScheduler$MergeSource *self, PyObject *arg);
        static PyObject *t_MergeScheduler$MergeSource_onMergeFinished(t_MergeScheduler$MergeSource *self, PyObject *arg);
        static PyObject *t_MergeScheduler$MergeSource_get__nextMerge(t_MergeScheduler$MergeSource *self, void *data);
        static PyGetSetDef t_MergeScheduler$MergeSource__fields_[] = {
          DECLARE_GET_FIELD(t_MergeScheduler$MergeSource, nextMerge),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_MergeScheduler$MergeSource__methods_[] = {
          DECLARE_METHOD(t_MergeScheduler$MergeSource, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_MergeScheduler$MergeSource, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_MergeScheduler$MergeSource, getNextMerge, METH_NOARGS),
          DECLARE_METHOD(t_MergeScheduler$MergeSource, hasPendingMerges, METH_NOARGS),
          DECLARE_METHOD(t_MergeScheduler$MergeSource, merge, METH_O),
          DECLARE_METHOD(t_MergeScheduler$MergeSource, onMergeFinished, METH_O),
          { NULL, NULL, 0, NULL }
        };

        static PyType_Slot PY_TYPE_SLOTS(MergeScheduler$MergeSource)[] = {
          { Py_tp_methods, t_MergeScheduler$MergeSource__methods_ },
          { Py_tp_init, (void *) abstract_init },
          { Py_tp_getset, t_MergeScheduler$MergeSource__fields_ },
          { 0, NULL }
        };

        static PyType_Def *PY_TYPE_BASES(MergeScheduler$MergeSource)[] = {
          &PY_TYPE_DEF(::java::lang::Object),
          NULL
        };

        DEFINE_TYPE(MergeScheduler$MergeSource, t_MergeScheduler$MergeSource, MergeScheduler$MergeSource);

        void t_MergeScheduler$MergeSource::install(PyObject *module)
        {
          installType(&PY_TYPE(MergeScheduler$MergeSource), &PY_TYPE_DEF(MergeScheduler$MergeSource), module, "MergeScheduler$MergeSource", 0);
        }

        void t_MergeScheduler$MergeSource::initialize(PyObject *module)
        {
          PyObject_SetAttrString((PyObject *) PY_TYPE(MergeScheduler$MergeSource), "class_", make_descriptor(MergeScheduler$MergeSource::initializeClass, 1));
          PyObject_SetAttrString((PyObject *) PY_TYPE(MergeScheduler$MergeSource), "wrapfn_", make_descriptor(t_MergeScheduler$MergeSource::wrap_jobject));
          PyObject_SetAttrString((PyObject *) PY_TYPE(MergeScheduler$MergeSource), "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_MergeScheduler$MergeSource_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, MergeScheduler$MergeSource::initializeClass, 1)))
            return NULL;
          return t_MergeScheduler$MergeSource::wrap_Object(MergeScheduler$MergeSource(((t_MergeScheduler$MergeSource *) arg)->object.this$));
        }
        static PyObject *t_MergeScheduler$MergeSource_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, MergeScheduler$MergeSource::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static PyObject *t_MergeScheduler$MergeSource_getNextMerge(t_MergeScheduler$MergeSource *self)
        {
          ::org::apache::lucene::index::MergePolicy$OneMerge result((jobject) NULL);
          OBJ_CALL(result = self->object.getNextMerge());
          return ::org::apache::lucene::index::t_MergePolicy$OneMerge::wrap_Object(result);
        }

        static PyObject *t_MergeScheduler$MergeSource_hasPendingMerges(t_MergeScheduler$MergeSource *self)
        {
          jboolean result;
          OBJ_CALL(result = self->object.hasPendingMerges());
          Py_RETURN_BOOL(result);
        }

        static PyObject *t_MergeScheduler$MergeSource_merge(t_MergeScheduler$MergeSource *self, PyObject *arg)
        {
          ::org::apache::lucene::index::MergePolicy$OneMerge a0((jobject) NULL);

          if (!parseArg(arg, "k", ::org::apache::lucene::index::MergePolicy$OneMerge::initializeClass, &a0))
          {
            OBJ_CALL(self->object.merge(a0));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "merge", arg);
          return NULL;
        }

        static PyObject *t_MergeScheduler$MergeSource_onMergeFinished(t_MergeScheduler$MergeSource *self, PyObject *arg)
        {
          ::org::apache::lucene::index::MergePolicy$OneMerge a0((jobject) NULL);

          if (!parseArg(arg, "k", ::org::apache::lucene::index::MergePolicy$OneMerge::initializeClass, &a0))
          {
            OBJ_CALL(self->object.onMergeFinished(a0));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "onMergeFinished", arg);
          return NULL;
        }

        static PyObject *t_MergeScheduler$MergeSource_get__nextMerge(t_MergeScheduler$MergeSource *self, void *data)
        {
          ::org::apache::lucene::index::MergePolicy$OneMerge value((jobject) NULL);
          OBJ_CALL(value = self->object.getNextMerge());
          return ::org::apache::lucene::index::t_MergePolicy$OneMerge::wrap_Object(value);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/util/OfflineSorter$SortInfo.h"
#include "org/apache/lucene/util/OfflineSorter.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {

        ::java::lang::Class *OfflineSorter$SortInfo::class$ = NULL;
        jmethodID *OfflineSorter$SortInfo::mids$ = NULL;
        jfieldID *OfflineSorter$SortInfo::fids$ = NULL;
        bool OfflineSorter$SortInfo::live$ = false;

        jclass OfflineSorter$SortInfo::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/util/OfflineSorter$SortInfo");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_d34a8c39d1671d76] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/util/OfflineSorter;)V");
            mids$[mid_toString_db9b55ba01e03e4b] = env->getMethodID(cls, "toString", "()Ljava/lang/String;");

            fids$ = new jfieldID[max_fid];
            fids$[fid_bufferSize] = env->getFieldID(cls, "bufferSize", "J");
            fids$[fid_lineCount] = env->getFieldID(cls, "lineCount", "I");
            fids$[fid_mergeRounds] = env->getFieldID(cls, "mergeRounds", "I");
            fids$[fid_readTimeMS] = env->getFieldID(cls, "readTimeMS", "J");
            fids$[fid_tempMergeFiles] = env->getFieldID(cls, "tempMergeFiles", "I");
            fids$[fid_totalTimeMS] = env->getFieldID(cls, "totalTimeMS", "J");

            class$ = new ::java::lang::Class(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        OfflineSorter$SortInfo::OfflineSorter$SortInfo(const ::org::apache::lucene::util::OfflineSorter & a0) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_d34a8c39d1671d76, a0.this$)) {}

        ::java::lang::String OfflineSorter$SortInfo::toString() const
        {
          return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_db9b55ba01e03e4b]));
        }

        jlong OfflineSorter$SortInfo::_get_bufferSize() const
        {
          return env->getLongField(this$, fids$[fid_bufferSize]);
        }

        jint OfflineSorter$SortInfo::_get_lineCount() const
        {
          return env->getIntField(this$, fids$[fid_lineCount]);
        }

        void OfflineSorter$SortInfo::_set_lineCount(jint a0) const
        {
          env->setIntField(this$, fids$[fid_lineCount], a0);
        }

        jint OfflineSorter$SortInfo::_get_mergeRounds() const
        {
          return env->getIntField(this$, fids$[fid_mergeRounds]);
        }

        void OfflineSorter$SortInfo::_set_mergeRounds(jint a0) const
        {
          env->setIntField(this$, fids$[fid_mergeRounds], a0);
        }

        jlong OfflineSorter$SortInfo::_get_readTimeMS() const
        {
          return env->getLongField(this$, fids$[fid_readTimeMS]);
        }

        void OfflineSorter$SortInfo::_set_readTimeMS(jlong a0) const
        {
          env->setLongField(this$, fids$[fid_readTimeMS], a0);
        }

        jint OfflineSorter$SortInfo::_get_tempMergeFiles() const
        {
          return env->getIntField(this$, fids$[fid_tempMergeFiles]);
        }

        void OfflineSorter$SortInfo::_set_tempMergeFiles(jint a0) const
        {
          env->setIntField(this$, fids$[fid_tempMergeFiles], a0);
        }

        jlong OfflineSorter$SortInfo::_get_totalTimeMS() const
        {
          return env->getLongField(this$, fids$[fid_totalTimeMS]);
        }

        void OfflineSorter$SortInfo::_set_totalTimeMS(jlong a0) const
        {
          env->setLongField(this$, fids$[fid_totalTimeMS], a0);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        static PyObject *t_OfflineSorter$SortInfo_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_OfflineSorter$SortInfo_instance_(PyTypeObject *type, PyObject *arg);
        static int t_OfflineSorter$SortInfo_init_(t_OfflineSorter$SortInfo *self, PyObject *args, PyObject *kwds);
        static PyObject *t_OfflineSorter$SortInfo_toString(t_OfflineSorter$SortInfo *self, PyObject *args);
        static PyObject *t_OfflineSorter$SortInfo_get__bufferSize(t_OfflineSorter$SortInfo *self, void *data);
        static PyObject *t_OfflineSorter$SortInfo_get__lineCount(t_OfflineSorter$SortInfo *self, void *data);
        static int t_OfflineSorter$SortInfo_set__lineCount(t_OfflineSorter$SortInfo *self, PyObject *arg, void *data);
        static PyObject *t_OfflineSorter$SortInfo_get__mergeRounds(t_OfflineSorter$SortInfo *self, void *data);
        static int t_OfflineSorter$SortInfo_set__mergeRounds(t_OfflineSorter$SortInfo *self, PyObject *arg, void *data);
        static PyObject *t_OfflineSorter$SortInfo_get__readTimeMS(t_OfflineSorter$SortInfo *self, void *data);
        static int t_OfflineSorter$SortInfo_set__readTimeMS(t_OfflineSorter$SortInfo *self, PyObject *arg, void *data);
        static PyObject *t_OfflineSorter$SortInfo_get__tempMergeFiles(t_OfflineSorter$SortInfo *self, void *data);
        static int t_OfflineSorter$SortInfo_set__tempMergeFiles(t_OfflineSorter$SortInfo *self, PyObject *arg, void *data);
        static PyObject *t_OfflineSorter$SortInfo_get__totalTimeMS(t_OfflineSorter$SortInfo *self, void *data);
        static int t_OfflineSorter$SortInfo_set__totalTimeMS(t_OfflineSorter$SortInfo *self, PyObject *arg, void *data);

        static PyGetSetDef t_OfflineSorter$SortInfo__fields_[] = {
          DECLARE_GET_FIELD(t_OfflineSorter$SortInfo, bufferSize),
          DECLARE_GETSET_FIELD(t_OfflineSorter$SortInfo, lineCount),
          DECLARE_GETSET_FIELD(t_OfflineSorter$SortInfo, mergeRounds),
          DECLARE_GETSET_FIELD(t_OfflineSorter$SortInfo, readTimeMS),
          DECLARE_GETSET_FIELD(t_OfflineSorter$SortInfo, tempMergeFiles),
          DECLARE_GETSET_FIELD(t_OfflineSorter$SortInfo, totalTimeMS),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_OfflineSorter$SortInfo__methods_[] = {
          DECLARE_METHOD(t_OfflineSorter$SortInfo, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_OfflineSorter$SortInfo, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_OfflineSorter$SortInfo, toString, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        static PyType_Slot PY_TYPE_SLOTS(OfflineSorter$SortInfo)[] = {
          { Py_tp_methods, t_OfflineSorter$SortInfo__methods_ },
          { Py_tp_init, (void *) t_OfflineSorter$SortInfo_init_ },
          { Py_tp_getset, t_OfflineSorter$SortInfo__fields_ },
          { 0, NULL }
        };

        static PyType_Def *PY_TYPE_BASES(OfflineSorter$SortInfo)[] = {
          &PY_TYPE_DEF(::java::lang::Object),
          NULL
        };

        DEFINE_TYPE(OfflineSorter$SortInfo, t_OfflineSorter$SortInfo, OfflineSorter$SortInfo);

        void t_OfflineSorter$SortInfo::install(PyObject *module)
        {
          installType(&PY_TYPE(OfflineSorter$SortInfo), &PY_TYPE_DEF(OfflineSorter$SortInfo), module, "OfflineSorter$SortInfo", 0);
        }

        void t_OfflineSorter$SortInfo::initialize(PyObject *module)
        {
          PyObject_SetAttrString((PyObject *) PY_TYPE(OfflineSorter$SortInfo), "class_", make_descriptor(OfflineSorter$SortInfo::initializeClass, 1));
          PyObject_SetAttrString((PyObject *) PY_TYPE(OfflineSorter$SortInfo), "wrapfn_", make_descriptor(t_OfflineSorter$SortInfo::wrap_jobject));
          PyObject_SetAttrString((PyObject *) PY_TYPE(OfflineSorter$SortInfo), "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_OfflineSorter$SortInfo_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, OfflineSorter$SortInfo::initializeClass, 1)))
            return NULL;
          return t_OfflineSorter$SortInfo::wrap_Object(OfflineSorter$SortInfo(((t_OfflineSorter$SortInfo *) arg)->object.this$));
        }
        static PyObject *t_OfflineSorter$SortInfo_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, OfflineSorter$SortInfo::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_OfflineSorter$SortInfo_init_(t_OfflineSorter$SortInfo *self, PyObject *args, PyObject *kwds)
        {
          ::org::apache::lucene::util::OfflineSorter a0((jobject) NULL);
          OfflineSorter$SortInfo object((jobject) NULL);

          if (!parseArgs(args, "k", ::org::apache::lucene::util::OfflineSorter::initializeClass, &a0))
          {
            INT_CALL(object = OfflineSorter$SortInfo(a0));
            self->object = object;
          }
          else
          {
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }

        static PyObject *t_OfflineSorter$SortInfo_toString(t_OfflineSorter$SortInfo *self, PyObject *args)
        {
          ::java::lang::String result((jobject) NULL);

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.toString());
            return j2p(result);
          }

          return callSuper(PY_TYPE(OfflineSorter$SortInfo), (PyObject *) self, "toString", args, 2);
        }

        static PyObject *t_OfflineSorter$SortInfo_get__bufferSize(t_OfflineSorter$SortInfo *self, void *data)
        {
          jlong value;
          OBJ_CALL(value = self->object._get_bufferSize());
          return PyLong_FromLongLong((PY_LONG_LONG) value);
        }

        static PyObject *t_OfflineSorter$SortInfo_get__lineCount(t_OfflineSorter$SortInfo *self, void *data)
        {
          jint value;
          OBJ_CALL(value = self->object._get_lineCount());
          return PyLong_FromLong((long) value);
        }
        static int t_OfflineSorter$SortInfo_set__lineCount(t_OfflineSorter$SortInfo *self, PyObject *arg, void *data)
        {
          jint value;
          if (!parseArg(arg, "I", &value))
          {
            INT_CALL(self->object._set_lineCount(value));
            return 0;
          }
          PyErr_SetArgsError((PyObject *) self, "lineCount", arg);
          return -1;
        }

        static PyObject *t_OfflineSorter$SortInfo_get__mergeRounds(t_OfflineSorter$SortInfo *self, void *data)
        {
          jint value;
          OBJ_CALL(value = self->object._get_mergeRounds());
          return PyLong_FromLong((long) value);
        }
        static int t_OfflineSorter$SortInfo_set__mergeRounds(t_OfflineSorter$SortInfo *self, PyObject *arg, void *data)
        {
          jint value;
          if (!parseArg(arg, "I", &value))
          {
            INT_CALL(self->object._set_mergeRounds(value));
            return 0;
          }
          PyErr_SetArgsError((PyObject *) self, "mergeRounds", arg);
          return -1;
        }

        static PyObject *t_OfflineSorter$SortInfo_get__readTimeMS(t_OfflineSorter$SortInfo *self, void *data)
        {
          jlong value;
          OBJ_CALL(value = self->object._get_readTimeMS());
          return PyLong_FromLongLong((PY_LONG_LONG) value);
        }
        static int t_OfflineSorter$SortInfo_set__readTimeMS(t_OfflineSorter$SortInfo *self, PyObject *arg, void *data)
        {
          jlong value;
          if (!parseArg(arg, "J", &value))
          {
            INT_CALL(self->object._set_readTimeMS(value));
            return 0;
          }
          PyErr_SetArgsError((PyObject *) self, "readTimeMS", arg);
          return -1;
        }

        static PyObject *t_OfflineSorter$SortInfo_get__tempMergeFiles(t_OfflineSorter$SortInfo *self, void *data)
        {
          jint value;
          OBJ_CALL(value = self->object._get_tempMergeFiles());
          return PyLong_FromLong((long) value);
        }
        static int t_OfflineSorter$SortInfo_set__tempMergeFiles(t_OfflineSorter$SortInfo *self, PyObject *arg, void *data)
        {
          jint value;
          if (!parseArg(arg, "I", &value))
          {
            INT_CALL(self->object._set_tempMergeFiles(value));
            return 0;
          }
          PyErr_SetArgsError((PyObject *) self, "tempMergeFiles", arg);
          return -1;
        }

        static PyObject *t_OfflineSorter$SortInfo_get__totalTimeMS(t_OfflineSorter$SortInfo *self, void *data)
        {
          jlong value;
          OBJ_CALL(value = self->object._get_totalTimeMS());
          return PyLong_FromLongLong((PY_LONG_LONG) value);
        }
        static int t_OfflineSorter$SortInfo_set__totalTimeMS(t_OfflineSorter$SortInfo *self, PyObject *arg, void *data)
        {
          jlong value;
          if (!parseArg(arg, "J", &value))
          {
            INT_CALL(self->object._set_totalTimeMS(value));
            return 0;
          }
          PyErr_SetArgsError((PyObject *) self, "totalTimeMS", arg);
          return -1;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/util/packed/PackedInts$FormatAndBits.h"
#include "java/lang/String.h"
#include "org/apache/lucene/util/packed/PackedInts$Format.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        namespace packed {

          ::java::lang::Class *PackedInts$FormatAndBits::class$ = NULL;
          jmethodID *PackedInts$FormatAndBits::mids$ = NULL;
          jfieldID *PackedInts$FormatAndBits::fids$ = NULL;
          bool PackedInts$FormatAndBits::live$ = false;

          jclass PackedInts$FormatAndBits::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/util/packed/PackedInts$FormatAndBits");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_29ee7cafa1b68892] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/util/packed/PackedInts$Format;I)V");
              mids$[mid_toString_db9b55ba01e03e4b] = env->getMethodID(cls, "toString", "()Ljava/lang/String;");

              fids$ = new jfieldID[max_fid];
              fids$[fid_bitsPerValue] = env->getFieldID(cls, "bitsPerValue", "I");
              fids$[fid_format] = env->getFieldID(cls, "format", "Lorg/apache/lucene/util/packed/PackedInts$Format;");

              class$ = new ::java::lang::Class(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          PackedInts$FormatAndBits::PackedInts$FormatAndBits(const ::org::apache::lucene::util::packed::PackedInts$Format & a0, jint a1) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_29ee7cafa1b68892, a0.this$, a1)) {}

          ::java::lang::String PackedInts$FormatAndBits::toString() const
          {
            return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_db9b55ba01e03e4b]));
          }

          jint PackedInts$FormatAndBits::_get_bitsPerValue() const
          {
            return env->getIntField(this$, fids$[fid_bitsPerValue]);
          }

          ::org::apache::lucene::util::packed::PackedInts$Format PackedInts$FormatAndBits::_get_format() const
          {
            return ::org::apache::lucene::util::packed::PackedInts$Format(env->getObjectField(this$, fids$[fid_format]));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        namespace packed {
          static PyObject *t_PackedInts$FormatAndBits_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_PackedInts$FormatAndBits_instance_(PyTypeObject *type, PyObject *arg);
          static int t_PackedInts$FormatAndBits_init_(t_PackedInts$FormatAndBits *self, PyObject *args, PyObject *kwds);
          static PyObject *t_PackedInts$FormatAndBits_toString(t_PackedInts$FormatAndBits *self, PyObject *args);
          static PyObject *t_PackedInts$FormatAndBits_get__bitsPerValue(t_PackedInts$FormatAndBits *self, void *data);
          static PyObject *t_PackedInts$FormatAndBits_get__format(t_PackedInts$FormatAndBits *self, void *data);

          static PyGetSetDef t_PackedInts$FormatAndBits__fields_[] = {
            DECLARE_GET_FIELD(t_PackedInts$FormatAndBits, bitsPerValue),
            DECLARE_GET_FIELD(t_PackedInts$FormatAndBits, format),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_PackedInts$FormatAndBits__methods_[] = {
            DECLARE_METHOD(t_PackedInts$FormatAndBits, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_PackedInts$FormatAndBits, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_PackedInts$FormatAndBits, toString, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          static PyType_Slot PY_TYPE_SLOTS(PackedInts$FormatAndBits)[] = {
            { Py_tp_methods, t_PackedInts$FormatAndBits__methods_ },
            { Py_tp_init, (void *) t_PackedInts$FormatAndBits_init_ },
            { Py_tp_getset, t_PackedInts$FormatAndBits__fields_ },
            { 0, NULL }
          };

          static PyType_Def *PY_TYPE_BASES(PackedInts$FormatAndBits)[] = {
            &PY_TYPE_DEF(::java::lang::Object),
            NULL
          };

          DEFINE_TYPE(PackedInts$FormatAndBits, t_PackedInts$FormatAndBits, PackedInts$FormatAndBits);

          void t_PackedInts$FormatAndBits::install(PyObject *module)
          {
            installType(&PY_TYPE(PackedInts$FormatAndBits), &PY_TYPE_DEF(PackedInts$FormatAndBits), module, "PackedInts$FormatAndBits", 0);
          }

          void t_PackedInts$FormatAndBits::initialize(PyObject *module)
          {
            PyObject_SetAttrString((PyObject *) PY_TYPE(PackedInts$FormatAndBits), "class_", make_descriptor(PackedInts$FormatAndBits::initializeClass, 1));
            PyObject_SetAttrString((PyObject *) PY_TYPE(PackedInts$FormatAndBits), "wrapfn_", make_descriptor(t_PackedInts$FormatAndBits::wrap_jobject));
            PyObject_SetAttrString((PyObject *) PY_TYPE(PackedInts$FormatAndBits), "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_PackedInts$FormatAndBits_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, PackedInts$FormatAndBits::initializeClass, 1)))
              return NULL;
            return t_PackedInts$FormatAndBits::wrap_Object(PackedInts$FormatAndBits(((t_PackedInts$FormatAndBits *) arg)->object.this$));
          }
          static PyObject *t_PackedInts$FormatAndBits_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, PackedInts$FormatAndBits::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_PackedInts$FormatAndBits_init_(t_PackedInts$FormatAndBits *self, PyObject *args, PyObject *kwds)
          {
            ::org::apache::lucene::util::packed::PackedInts$Format a0((jobject) NULL);
            PyTypeObject **p0;
            jint a1;
            PackedInts$FormatAndBits object((jobject) NULL);

            if (!parseArgs(args, "KI", ::org::apache::lucene::util::packed::PackedInts$Format::initializeClass, &a0, &p0, ::org::apache::lucene::util::packed::t_PackedInts$Format::parameters_, &a1))
            {
              INT_CALL(object = PackedInts$FormatAndBits(a0, a1));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_PackedInts$FormatAndBits_toString(t_PackedInts$FormatAndBits *self, PyObject *args)
          {
            ::java::lang::String result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.toString());
              return j2p(result);
            }

            return callSuper(PY_TYPE(PackedInts$FormatAndBits), (PyObject *) self, "toString", args, 2);
          }

          static PyObject *t_PackedInts$FormatAndBits_get__bitsPerValue(t_PackedInts$FormatAndBits *self, void *data)
          {
            jint value;
            OBJ_CALL(value = self->object._get_bitsPerValue());
            return PyLong_FromLong((long) value);
          }

          static PyObject *t_PackedInts$FormatAndBits_get__format(t_PackedInts$FormatAndBits *self, void *data)
          {
            ::org::apache::lucene::util::packed::PackedInts$Format value((jobject) NULL);
            OBJ_CALL(value = self->object._get_format());
            return ::org::apache::lucene::util::packed::t_PackedInts$Format::wrap_Object(value);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/similarities/IndependenceStandardized.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace similarities {

          ::java::lang::Class *IndependenceStandardized::class$ = NULL;
          jmethodID *IndependenceStandardized::mids$ = NULL;
          bool IndependenceStandardized::live$ = false;

          jclass IndependenceStandardized::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/search/similarities/IndependenceStandardized");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_f2cc1bce94666404] = env->getMethodID(cls, "<init>", "()V");
              mids$[mid_score_990b512583b70d91] = env->getMethodID(cls, "score", "(DD)D");
              mids$[mid_toString_db9b55ba01e03e4b] = env->getMethodID(cls, "toString", "()Ljava/lang/String;");

              class$ = new ::java::lang::Class(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          IndependenceStandardized::IndependenceStandardized() : ::org::apache::lucene::search::similarities::Independence(env->newObject(initializeClass, &mids$, mid_init$_f2cc1bce94666404)) {}

          jdouble IndependenceStandardized::score(jdouble a0, jdouble a1) const
          {
            return env->callDoubleMethod(this$, mids$[mid_score_990b512583b70d91], a0, a1);
          }

          ::java::lang::String IndependenceStandardized::toString() const
          {
            return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_db9b55ba01e03e4b]));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace similarities {
          static PyObject *t_IndependenceStandardized_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_IndependenceStandardized_instance_(PyTypeObject *type, PyObject *arg);
          static int t_IndependenceStandardized_init_(t_IndependenceStandardized *self, PyObject *args, PyObject *kwds);
          static PyObject *t_IndependenceStandardized_score(t_IndependenceStandardized *self, PyObject *args);
          static PyObject *t_IndependenceStandardized_toString(t_IndependenceStandardized *self, PyObject *args);

          static PyMethodDef t_IndependenceStandardized__methods_[] = {
            DECLARE_METHOD(t_IndependenceStandardized, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_IndependenceStandardized, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_IndependenceStandardized, score, METH_VARARGS),
            DECLARE_METHOD(t_IndependenceStandardized, toString, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          static PyType_Slot PY_TYPE_SLOTS(IndependenceStandardized)[] = {
            { Py_tp_methods, t_IndependenceStandardized__methods_ },
            { Py_tp_init, (void *) t_IndependenceStandardized_init_ },
            { 0, NULL }
          };

          static PyType_Def *PY_TYPE_BASES(IndependenceStandardized)[] = {
            &PY_TYPE_DEF(::org::apache::lucene::search::similarities::Independence),
            NULL
          };

          DEFINE_TYPE(IndependenceStandardized, t_IndependenceStandardized, IndependenceStandardized);

          void t_IndependenceStandardized::install(PyObject *module)
          {
            installType(&PY_TYPE(IndependenceStandardized), &PY_TYPE_DEF(IndependenceStandardized), module, "IndependenceStandardized", 0);
          }

          void t_IndependenceStandardized::initialize(PyObject *module)
          {
            PyObject_SetAttrString((PyObject *) PY_TYPE(IndependenceStandardized), "class_", make_descriptor(IndependenceStandardized::initializeClass, 1));
            PyObject_SetAttrString((PyObject *) PY_TYPE(IndependenceStandardized), "wrapfn_", make_descriptor(t_IndependenceStandardized::wrap_jobject));
            PyObject_SetAttrString((PyObject *) PY_TYPE(IndependenceStandardized), "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_IndependenceStandardized_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, IndependenceStandardized::initializeClass, 1)))
              return NULL;
            return t_IndependenceStandardized::wrap_Object(IndependenceStandardized(((t_IndependenceStandardized *) arg)->object.this$));
          }
          static PyObject *t_IndependenceStandardized_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, IndependenceStandardized::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_IndependenceStandardized_init_(t_IndependenceStandardized *self, PyObject *args, PyObject *kwds)
          {
            IndependenceStandardized object((jobject) NULL);

            INT_CALL(object = IndependenceStandardized());
            self->object = object;

            return 0;
          }

          static PyObject *t_IndependenceStandardized_score(t_IndependenceStandardized *self, PyObject *args)
          {
            jdouble a0;
            jdouble a1;
            jdouble result;

            if (!parseArgs(args, "DD", &a0, &a1))
            {
              OBJ_CALL(result = self->object.score(a0, a1));
              return PyFloat_FromDouble((double) result);
            }

            return callSuper(PY_TYPE(IndependenceStandardized), (PyObject *) self, "score", args, 2);
          }

          static PyObject *t_IndependenceStandardized_toString(t_IndependenceStandardized *self, PyObject *args)
          {
            ::java::lang::String result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.toString());
              return j2p(result);
            }

            return callSuper(PY_TYPE(IndependenceStandardized), (PyObject *) self, "toString", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/uhighlight/OffsetsEnum$OfPostings.h"
#include "org/apache/lucene/util/BytesRef.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/index/PostingsEnum.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace uhighlight {

          ::java::lang::Class *OffsetsEnum$OfPostings::class$ = NULL;
          jmethodID *OffsetsEnum$OfPostings::mids$ = NULL;
          bool OffsetsEnum$OfPostings::live$ = false;

          jclass OffsetsEnum$OfPostings::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/search/uhighlight/OffsetsEnum$OfPostings");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_c958065f3752090c] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/util/BytesRef;Lorg/apache/lucene/index/PostingsEnum;)V");
              mids$[mid_init$_8e156756db2d6069] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/util/BytesRef;ILorg/apache/lucene/index/PostingsEnum;)V");
              mids$[mid_endOffset_9972fcc56b44e79d] = env->getMethodID(cls, "endOffset", "()I");
              mids$[mid_freq_9972fcc56b44e79d] = env->getMethodID(cls, "freq", "()I");
              mids$[mid_getPostingsEnum_f6f6440dd886c6cd] = env->getMethodID(cls, "getPostingsEnum", "()Lorg/apache/lucene/index/PostingsEnum;");
              mids$[mid_getTerm_7af2ea2e37ce82b8] = env->getMethodID(cls, "getTerm", "()Lorg/apache/lucene/util/BytesRef;");
              mids$[mid_nextPosition_8454bd5aa23fd11e] = env->getMethodID(cls, "nextPosition", "()Z");
              mids$[mid_startOffset_9972fcc56b44e79d] = env->getMethodID(cls, "startOffset", "()I");

              class$ = new ::java::lang::Class(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          OffsetsEnum$OfPostings::OffsetsEnum$OfPostings(const ::org::apache::lucene::util::BytesRef & a0, const ::org::apache::lucene::index::PostingsEnum & a1) : ::org::apache::lucene::search::uhighlight::OffsetsEnum(env->newObject(initializeClass, &mids$, mid_init$_c958065f3752090c, a0.this$, a1.this$)) {}

          OffsetsEnum$OfPostings::OffsetsEnum$OfPostings(const ::org::apache::lucene::util::BytesRef & a0, jint a1, const ::org::apache::lucene::index::PostingsEnum & a2) : ::org::apache::lucene::search::uhighlight::OffsetsEnum(env->newObject(initializeClass, &mids$, mid_init$_8e156756db2d6069, a0.this$, a1, a2.this$)) {}

          jint OffsetsEnum$OfPostings::endOffset() const
          {
            return env->callIntMethod(this$, mids$[mid_endOffset_9972fcc56b44e79d]);
          }

          jint OffsetsEnum$OfPostings::freq() const
          {
            return env->callIntMethod(this$, mids$[mid_freq_9972fcc56b44e79d]);
          }

          ::org::apache::lucene::index::PostingsEnum OffsetsEnum$OfPostings::getPostingsEnum() const
          {
            return ::org::apache::lucene::index::PostingsEnum(env->callObjectMethod(this$, mids$[mid_getPostingsEnum_f6f6440dd886c6cd]));
          }

          ::org::apache::lucene::util::BytesRef OffsetsEnum$OfPostings::getTerm() const
          {
            return ::org::apache::lucene::util::BytesRef(env->callObjectMethod(this$, mids$[mid_getTerm_7af2ea2e37ce82b8]));
          }

          jboolean OffsetsEnum$OfPostings::nextPosition() const
          {
            return env->callBooleanMethod(this$, mids$[mid_nextPosition_8454bd5aa23fd11e]);
          }

          jint OffsetsEnum$OfPostings::startOffset() const
          {
            return env->callIntMethod(this$, mids$[mid_startOffset_9972fcc56b44e79d]);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace uhighlight {
          static PyObject *t_OffsetsEnum$OfPostings_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_OffsetsEnum$OfPostings_instance_(PyTypeObject *type, PyObject *arg);
          static int t_OffsetsEnum$OfPostings_init_(t_OffsetsEnum$OfPostings *self, PyObject *args, PyObject *kwds);
          static PyObject *t_OffsetsEnum$OfPostings_endOffset(t_OffsetsEnum$OfPostings *self, PyObject *args);
          static PyObject *t_OffsetsEnum$OfPostings_freq(t_OffsetsEnum$OfPostings *self, PyObject *args);
          static PyObject *t_OffsetsEnum$OfPostings_getPostingsEnum(t_OffsetsEnum$OfPostings *self);
          static PyObject *t_OffsetsEnum$OfPostings_getTerm(t_OffsetsEnum$OfPostings *self, PyObject *args);
          static PyObject *t_OffsetsEnum$OfPostings_nextPosition(t_OffsetsEnum$OfPostings *self, PyObject *args);
          static PyObject *t_OffsetsEnum$OfPostings_startOffset(t_OffsetsEnum$OfPostings *self, PyObject *args);
          static PyObject *t_OffsetsEnum$OfPostings_get__postingsEnum(t_OffsetsEnum$OfPostings *self, void *data);
          static PyObject *t_OffsetsEnum$OfPostings_get__term(t_OffsetsEnum$OfPostings *self, void *data);
          static PyGetSetDef t_OffsetsEnum$OfPostings__fields_[] = {
            DECLARE_GET_FIELD(t_OffsetsEnum$OfPostings, postingsEnum),
            DECLARE_GET_FIELD(t_OffsetsEnum$OfPostings, term),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_OffsetsEnum$OfPostings__methods_[] = {
            DECLARE_METHOD(t_OffsetsEnum$OfPostings, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_OffsetsEnum$OfPostings, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_OffsetsEnum$OfPostings, endOffset, METH_VARARGS),
            DECLARE_METHOD(t_OffsetsEnum$OfPostings, freq, METH_VARARGS),
            DECLARE_METHOD(t_OffsetsEnum$OfPostings, getPostingsEnum, METH_NOARGS),
            DECLARE_METHOD(t_OffsetsEnum$OfPostings, getTerm, METH_VARARGS),
            DECLARE_METHOD(t_OffsetsEnum$OfPostings, nextPosition, METH_VARARGS),
            DECLARE_METHOD(t_OffsetsEnum$OfPostings, startOffset, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          static PyType_Slot PY_TYPE_SLOTS(OffsetsEnum$OfPostings)[] = {
            { Py_tp_methods, t_OffsetsEnum$OfPostings__methods_ },
            { Py_tp_init, (void *) t_OffsetsEnum$OfPostings_init_ },
            { Py_tp_getset, t_OffsetsEnum$OfPostings__fields_ },
            { 0, NULL }
          };

          static PyType_Def *PY_TYPE_BASES(OffsetsEnum$OfPostings)[] = {
            &PY_TYPE_DEF(::org::apache::lucene::search::uhighlight::OffsetsEnum),
            NULL
          };

          DEFINE_TYPE(OffsetsEnum$OfPostings, t_OffsetsEnum$OfPostings, OffsetsEnum$OfPostings);

          void t_OffsetsEnum$OfPostings::install(PyObject *module)
          {
            installType(&PY_TYPE(OffsetsEnum$OfPostings), &PY_TYPE_DEF(OffsetsEnum$OfPostings), module, "OffsetsEnum$OfPostings", 0);
          }

          void t_OffsetsEnum$OfPostings::initialize(PyObject *module)
          {
            PyObject_SetAttrString((PyObject *) PY_TYPE(OffsetsEnum$OfPostings), "class_", make_descriptor(OffsetsEnum$OfPostings::initializeClass, 1));
            PyObject_SetAttrString((PyObject *) PY_TYPE(OffsetsEnum$OfPostings), "wrapfn_", make_descriptor(t_OffsetsEnum$OfPostings::wrap_jobject));
            PyObject_SetAttrString((PyObject *) PY_TYPE(OffsetsEnum$OfPostings), "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_OffsetsEnum$OfPostings_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, OffsetsEnum$OfPostings::initializeClass, 1)))
              return NULL;
            return t_OffsetsEnum$OfPostings::wrap_Object(OffsetsEnum$OfPostings(((t_OffsetsEnum$OfPostings *) arg)->object.this$));
          }
          static PyObject *t_OffsetsEnum$OfPostings_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, OffsetsEnum$OfPostings::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_OffsetsEnum$OfPostings_init_(t_OffsetsEnum$OfPostings *self, PyObject *args, PyObject *kwds)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 2:
              {
                ::org::apache::lucene::util::BytesRef a0((jobject) NULL);
                ::org::apache::lucene::index::PostingsEnum a1((jobject) NULL);
                OffsetsEnum$OfPostings object((jobject) NULL);

                if (!parseArgs(args, "kk", ::org::apache::lucene::util::BytesRef::initializeClass, ::org::apache::lucene::index::PostingsEnum::initializeClass, &a0, &a1))
                {
                  INT_CALL(object = OffsetsEnum$OfPostings(a0, a1));
                  self->object = object;
                  break;
                }
              }
              goto err;
             case 3:
              {
                ::org::apache::lucene::util::BytesRef a0((jobject) NULL);
                jint a1;
                ::org::apache::lucene::index::PostingsEnum a2((jobject) NULL);
                OffsetsEnum$OfPostings object((jobject) NULL);

                if (!parseArgs(args, "kIk", ::org::apache::lucene::util::BytesRef::initializeClass, ::org::apache::lucene::index::PostingsEnum::initializeClass, &a0, &a1, &a2))
                {
                  INT_CALL(object = OffsetsEnum$OfPostings(a0, a1, a2));
                  self->object = object;
                  break;
                }
              }
             default:
             err:
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_OffsetsEnum$OfPostings_endOffset(t_OffsetsEnum$OfPostings *self, PyObject *args)
          {
            jint result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.endOffset());
              return PyLong_FromLong((long) result);
            }

            return callSuper(PY_TYPE(OffsetsEnum$OfPostings), (PyObject *) self, "endOffset", args, 2);
          }

          static PyObject *t_OffsetsEnum$OfPostings_freq(t_OffsetsEnum$OfPostings *self, PyObject *args)
          {
            jint result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.freq());
              return PyLong_FromLong((long) result);
            }

            return callSuper(PY_TYPE(OffsetsEnum$OfPostings), (PyObject *) self, "freq", args, 2);
          }

          static PyObject *t_OffsetsEnum$OfPostings_getPostingsEnum(t_OffsetsEnum$OfPostings *self)
          {
            ::org::apache::lucene::index::PostingsEnum result((jobject) NULL);
            OBJ_CALL(result = self->object.getPostingsEnum());
            return ::org::apache::lucene::index::t_PostingsEnum::wrap_Object(result);
          }

          static PyObject *t_OffsetsEnum$OfPostings_getTerm(t_OffsetsEnum$OfPostings *self, PyObject *args)
          {
            ::org::apache::lucene::util::BytesRef result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.getTerm());
              return ::org::apache::lucene::util::t_BytesRef::wrap_Object(result);
            }

            return callSuper(PY_TYPE(OffsetsEnum$OfPostings), (PyObject *) self, "getTerm", args, 2);
          }

          static PyObject *t_OffsetsEnum$OfPostings_nextPosition(t_OffsetsEnum$OfPostings *self, PyObject *args)
          {
            jboolean result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.nextPosition());
              Py_RETURN_BOOL(result);
            }

            return callSuper(PY_TYPE(OffsetsEnum$OfPostings), (PyObject *) self, "nextPosition", args, 2);
          }

          static PyObject *t_OffsetsEnum$OfPostings_startOffset(t_OffsetsEnum$OfPostings *self, PyObject *args)
          {
            jint result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.startOffset());
              return PyLong_FromLong((long) result);
            }

            return callSuper(PY_TYPE(OffsetsEnum$OfPostings), (PyObject *) self, "startOffset", args, 2);
          }

          static PyObject *t_OffsetsEnum$OfPostings_get__postingsEnum(t_OffsetsEnum$OfPostings *self, void *data)
          {
            ::org::apache::lucene::index::PostingsEnum value((jobject) NULL);
            OBJ_CALL(value = self->object.getPostingsEnum());
            return ::org::apache::lucene::index::t_PostingsEnum::wrap_Object(value);
          }

          static PyObject *t_OffsetsEnum$OfPostings_get__term(t_OffsetsEnum$OfPostings *self, void *data)
          {
            ::org::apache::lucene::util::BytesRef value((jobject) NULL);
            OBJ_CALL(value = self->object.getTerm());
            return ::org::apache::lucene::util::t_BytesRef::wrap_Object(value);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/miscellaneous/KeywordRepeatFilterFactory.h"
#include "java/util/Map.h"
#include "java/lang/String.h"
#include "org/apache/lucene/analysis/TokenStream.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace miscellaneous {

          ::java::lang::Class *KeywordRepeatFilterFactory::class$ = NULL;
          jmethodID *KeywordRepeatFilterFactory::mids$ = NULL;
          bool KeywordRepeatFilterFactory::live$ = false;
          ::java::lang::String *KeywordRepeatFilterFactory::NAME = NULL;

          jclass KeywordRepeatFilterFactory::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/miscellaneous/KeywordRepeatFilterFactory");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_408bd889ee3beae5] = env->getMethodID(cls, "<init>", "(Ljava/util/Map;)V");
              mids$[mid_create_6de1e28d9d10cd9e] = env->getMethodID(cls, "create", "(Lorg/apache/lucene/analysis/TokenStream;)Lorg/apache/lucene/analysis/TokenStream;");

              class$ = new ::java::lang::Class(cls);
              cls = (jclass) class$->this$;

              NAME = new ::java::lang::String(env->getStaticObjectField(cls, "NAME", "Ljava/lang/String;"));
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          KeywordRepeatFilterFactory::KeywordRepeatFilterFactory(const ::java::util::Map & a0) : ::org::apache::lucene::analysis::util::TokenFilterFactory(env->newObject(initializeClass, &mids$, mid_init$_408bd889ee3beae5, a0.this$)) {}

          ::org::apache::lucene::analysis::TokenStream KeywordRepeatFilterFactory::create(const ::org::apache::lucene::analysis::TokenStream & a0) const
          {
            return ::org::apache::lucene::analysis::TokenStream(env->callObjectMethod(this$, mids$[mid_create_6de1e28d9d10cd9e], a0.this$));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace miscellaneous {
          static PyObject *t_KeywordRepeatFilterFactory_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_KeywordRepeatFilterFactory_instance_(PyTypeObject *type, PyObject *arg);
          static int t_KeywordRepeatFilterFactory_init_(t_KeywordRepeatFilterFactory *self, PyObject *args, PyObject *kwds);
          static PyObject *t_KeywordRepeatFilterFactory_create(t_KeywordRepeatFilterFactory *self, PyObject *args);

          static PyMethodDef t_KeywordRepeatFilterFactory__methods_[] = {
            DECLARE_METHOD(t_KeywordRepeatFilterFactory, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_KeywordRepeatFilterFactory, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_KeywordRepeatFilterFactory, create, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          static PyType_Slot PY_TYPE_SLOTS(KeywordRepeatFilterFactory)[] = {
            { Py_tp_methods, t_KeywordRepeatFilterFactory__methods_ },
            { Py_tp_init, (void *) t_KeywordRepeatFilterFactory_init_ },
            { 0, NULL }
          };

          static PyType_Def *PY_TYPE_BASES(KeywordRepeatFilterFactory)[] = {
            &PY_TYPE_DEF(::org::apache::lucene::analysis::util::TokenFilterFactory),
            NULL
          };

          DEFINE_TYPE(KeywordRepeatFilterFactory, t_KeywordRepeatFilterFactory, KeywordRepeatFilterFactory);

          void t_KeywordRepeatFilterFactory::install(PyObject *module)
          {
            installType(&PY_TYPE(KeywordRepeatFilterFactory), &PY_TYPE_DEF(KeywordRepeatFilterFactory), module, "KeywordRepeatFilterFactory", 0);
          }

          void t_KeywordRepeatFilterFactory::initialize(PyObject *module)
          {
            PyObject_SetAttrString((PyObject *) PY_TYPE(KeywordRepeatFilterFactory), "class_", make_descriptor(KeywordRepeatFilterFactory::initializeClass, 1));
            PyObject_SetAttrString((PyObject *) PY_TYPE(KeywordRepeatFilterFactory), "wrapfn_", make_descriptor(t_KeywordRepeatFilterFactory::wrap_jobject));
            PyObject_SetAttrString((PyObject *) PY_TYPE(KeywordRepeatFilterFactory), "boxfn_", make_descriptor(boxObject));
            env->getClass(KeywordRepeatFilterFactory::initializeClass);
            PyObject_SetAttrString((PyObject *) PY_TYPE(KeywordRepeatFilterFactory), "NAME", make_descriptor(j2p(*KeywordRepeatFilterFactory::NAME)));
          }

          static PyObject *t_KeywordRepeatFilterFactory_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, KeywordRepeatFilterFactory::initializeClass, 1)))
              return NULL;
            return t_KeywordRepeatFilterFactory::wrap_Object(KeywordRepeatFilterFactory(((t_KeywordRepeatFilterFactory *) arg)->object.this$));
          }
          static PyObject *t_KeywordRepeatFilterFactory_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, KeywordRepeatFilterFactory::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_KeywordRepeatFilterFactory_init_(t_KeywordRepeatFilterFactory *self, PyObject *args, PyObject *kwds)
          {
            ::java::util::Map a0((jobject) NULL);
            PyTypeObject **p0;
            KeywordRepeatFilterFactory object((jobject) NULL);

            if (!parseArgs(args, "K", ::java::util::Map::initializeClass, &a0, &p0, ::java::util::t_Map::parameters_))
            {
              INT_CALL(object = KeywordRepeatFilterFactory(a0));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_KeywordRepeatFilterFactory_create(t_KeywordRepeatFilterFactory *self, PyObject *args)
          {
            ::org::apache::lucene::analysis::TokenStream a0((jobject) NULL);
            ::org::apache::lucene::analysis::TokenStream result((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::analysis::TokenStream::initializeClass, &a0))
            {
              OBJ_CALL(result = self->object.create(a0));
              return ::org::apache::lucene::analysis::t_TokenStream::wrap_Object(result);
            }

            return callSuper(PY_TYPE(KeywordRepeatFilterFactory), (PyObject *) self, "create", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/index/IndexFormatTooNewException.h"
#include "org/apache/lucene/store/DataInput.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {

        ::java::lang::Class *IndexFormatTooNewException::class$ = NULL;
        jmethodID *IndexFormatTooNewException::mids$ = NULL;
        bool IndexFormatTooNewException::live$ = false;

        jclass IndexFormatTooNewException::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/index/IndexFormatTooNewException");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_76b561b3dd9414f1] = env->getMethodID(cls, "<init>", "(Ljava/lang/String;III)V");
            mids$[mid_init$_856da08abc13bb8d] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/store/DataInput;III)V");
            mids$[mid_getMaxVersion_9972fcc56b44e79d] = env->getMethodID(cls, "getMaxVersion", "()I");
            mids$[mid_getMinVersion_9972fcc56b44e79d] = env->getMethodID(cls, "getMinVersion", "()I");
            mids$[mid_getResourceDescription_db9b55ba01e03e4b] = env->getMethodID(cls, "getResourceDescription", "()Ljava/lang/String;");
            mids$[mid_getVersion_9972fcc56b44e79d] = env->getMethodID(cls, "getVersion", "()I");

            class$ = new ::java::lang::Class(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        IndexFormatTooNewException::IndexFormatTooNewException(const ::java::lang::String & a0, jint a1, jint a2, jint a3) : ::java::io::IOException(env->newObject(initializeClass, &mids$, mid_init$_76b561b3dd9414f1, a0.this$, a1, a2, a3)) {}

        IndexFormatTooNewException::IndexFormatTooNewException(const ::org::apache::lucene::store::DataInput & a0, jint a1, jint a2, jint a3) : ::java::io::IOException(env->newObject(initializeClass, &mids$, mid_init$_856da08abc13bb8d, a0.this$, a1, a2, a3)) {}

        jint IndexFormatTooNewException::getMaxVersion() const
        {
          return env->callIntMethod(this$, mids$[mid_getMaxVersion_9972fcc56b44e79d]);
        }

        jint IndexFormatTooNewException::getMinVersion() const
        {
          return env->callIntMethod(this$, mids$[mid_getMinVersion_9972fcc56b44e79d]);
        }

        ::java::lang::String IndexFormatTooNewException::getResourceDescription() const
        {
          return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_getResourceDescription_db9b55ba01e03e4b]));
        }

        jint IndexFormatTooNewException::getVersion() const
        {
          return env->callIntMethod(this$, mids$[mid_getVersion_9972fcc56b44e79d]);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {
        static PyObject *t_IndexFormatTooNewException_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_IndexFormatTooNewException_instance_(PyTypeObject *type, PyObject *arg);
        static int t_IndexFormatTooNewException_init_(t_IndexFormatTooNewException *self, PyObject *args, PyObject *kwds);
        static PyObject *t_IndexFormatTooNewException_getMaxVersion(t_IndexFormatTooNewException *self);
        static PyObject *t_IndexFormatTooNewException_getMinVersion(t_IndexFormatTooNewException *self);
        static PyObject *t_IndexFormatTooNewException_getResourceDescription(t_IndexFormatTooNewException *self);
        static PyObject *t_IndexFormatTooNewException_getVersion(t_IndexFormatTooNewException *self);
        static PyObject *t_IndexFormatTooNewException_get__maxVersion(t_IndexFormatTooNewException *self, void *data);
        static PyObject *t_IndexFormatTooNewException_get__minVersion(t_IndexFormatTooNewException *self, void *data);
        static PyObject *t_IndexFormatTooNewException_get__resourceDescription(t_IndexFormatTooNewException *self, void *data);
        static PyObject *t_IndexFormatTooNewException_get__version(t_IndexFormatTooNewException *self, void *data);
        static PyGetSetDef t_IndexFormatTooNewException__fields_[] = {
          DECLARE_GET_FIELD(t_IndexFormatTooNewException, maxVersion),
          DECLARE_GET_FIELD(t_IndexFormatTooNewException, minVersion),
          DECLARE_GET_FIELD(t_IndexFormatTooNewException, resourceDescription),
          DECLARE_GET_FIELD(t_IndexFormatTooNewException, version),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_IndexFormatTooNewException__methods_[] = {
          DECLARE_METHOD(t_IndexFormatTooNewException, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_IndexFormatTooNewException, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_IndexFormatTooNewException, getMaxVersion, METH_NOARGS),
          DECLARE_METHOD(t_IndexFormatTooNewException, getMinVersion, METH_NOARGS),
          DECLARE_METHOD(t_IndexFormatTooNewException, getResourceDescription, METH_NOARGS),
          DECLARE_METHOD(t_IndexFormatTooNewException, getVersion, METH_NOARGS),
          { NULL, NULL, 0, NULL }
        };

        static PyType_Slot PY_TYPE_SLOTS(IndexFormatTooNewException)[] = {
          { Py_tp_methods, t_IndexFormatTooNewException__methods_ },
          { Py_tp_init, (void *) t_IndexFormatTooNewException_init_ },
          { Py_tp_getset, t_IndexFormatTooNewException__fields_ },
          { 0, NULL }
        };

        static PyType_Def *PY_TYPE_BASES(IndexFormatTooNewException)[] = {
          &PY_TYPE_DEF(::java::io::IOException),
          NULL
        };

        DEFINE_TYPE(IndexFormatTooNewException, t_IndexFormatTooNewException, IndexFormatTooNewException);

        void t_IndexFormatTooNewException::install(PyObject *module)
        {
          installType(&PY_TYPE(IndexFormatTooNewException), &PY_TYPE_DEF(IndexFormatTooNewException), module, "IndexFormatTooNewException", 0);
        }

        void t_IndexFormatTooNewException::initialize(PyObject *module)
        {
          PyObject_SetAttrString((PyObject *) PY_TYPE(IndexFormatTooNewException), "class_", make_descriptor(IndexFormatTooNewException::initializeClass, 1));
          PyObject_SetAttrString((PyObject *) PY_TYPE(IndexFormatTooNewException), "wrapfn_", make_descriptor(t_IndexFormatTooNewException::wrap_jobject));
          PyObject_SetAttrString((PyObject *) PY_TYPE(IndexFormatTooNewException), "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_IndexFormatTooNewException_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, IndexFormatTooNewException::initializeClass, 1)))
            return NULL;
          return t_IndexFormatTooNewException::wrap_Object(IndexFormatTooNewException(((t_IndexFormatTooNewException *) arg)->object.this$));
        }
        static PyObject *t_IndexFormatTooNewException_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, IndexFormatTooNewException::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_IndexFormatTooNewException_init_(t_IndexFormatTooNewException *self, PyObject *args, PyObject *kwds)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 4:
            {
              ::java::lang::String a0((jobject) NULL);
              jint a1;
              jint a2;
              jint a3;
              IndexFormatTooNewException object((jobject) NULL);

              if (!parseArgs(args, "sIII", &a0, &a1, &a2, &a3))
              {
                INT_CALL(object = IndexFormatTooNewException(a0, a1, a2, a3));
                self->object = object;
                break;
              }
            }
            {
              ::org::apache::lucene::store::DataInput a0((jobject) NULL);
              jint a1;
              jint a2;
              jint a3;
              IndexFormatTooNewException object((jobject) NULL);

              if (!parseArgs(args, "kIII", ::org::apache::lucene::store::DataInput::initializeClass, &a0, &a1, &a2, &a3))
              {
                INT_CALL(object = IndexFormatTooNewException(a0, a1, a2, a3));
                self->object = object;
                break;
              }
            }
           default:
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }

        static PyObject *t_IndexFormatTooNewException_getMaxVersion(t_IndexFormatTooNewException *self)
        {
          jint result;
          OBJ_CALL(result = self->object.getMaxVersion());
          return PyLong_FromLong((long) result);
        }

        static PyObject *t_IndexFormatTooNewException_getMinVersion(t_IndexFormatTooNewException *self)
        {
          jint result;
          OBJ_CALL(result = self->object.getMinVersion());
          return PyLong_FromLong((long) result);
        }

        static PyObject *t_IndexFormatTooNewException_getResourceDescription(t_IndexFormatTooNewException *self)
        {
          ::java::lang::String result((jobject) NULL);
          OBJ_CALL(result = self->object.getResourceDescription());
          return j2p(result);
        }

        static PyObject *t_IndexFormatTooNewException_getVersion(t_IndexFormatTooNewException *self)
        {
          jint result;
          OBJ_CALL(result = self->object.getVersion());
          return PyLong_FromLong((long) result);
        }

        static PyObject *t_IndexFormatTooNewException_get__maxVersion(t_IndexFormatTooNewException *self, void *data)
        {
          jint value;
          OBJ_CALL(value = self->object.getMaxVersion());
          return PyLong_FromLong((long) value);
        }

        static PyObject *t_IndexFormatTooNewException_get__minVersion(t_IndexFormatTooNewException *self, void *data)
        {
          jint value;
          OBJ_CALL(value = self->object.getMinVersion());
          return PyLong_FromLong((long) value);
        }

        static PyObject *t_IndexFormatTooNewException_get__resourceDescription(t_IndexFormatTooNewException *self, void *data)
        {
          ::java::lang::String value((jobject) NULL);
          OBJ_CALL(value = self->object.getResourceDescription());
          return j2p(value);
        }

        static PyObject *t_IndexFormatTooNewException_get__version(t_IndexFormatTooNewException *self, void *data)
        {
          jint value;
          OBJ_CALL(value = self->object.getVersion());
          return PyLong_FromLong((long) value);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/codecs/memory/FSTTermsWriter.h"
#include "org/apache/lucene/index/Fields.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/codecs/NormsProducer.h"
#include "org/apache/lucene/codecs/PostingsWriterBase.h"
#include "org/apache/lucene/index/SegmentWriteState.h"
#include "java/io/IOException.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace codecs {
        namespace memory {

          ::java::lang::Class *FSTTermsWriter::class$ = NULL;
          jmethodID *FSTTermsWriter::mids$ = NULL;
          bool FSTTermsWriter::live$ = false;
          jint FSTTermsWriter::TERMS_VERSION_CURRENT = (jint) 0;
          jint FSTTermsWriter::TERMS_VERSION_START = (jint) 0;

          jclass FSTTermsWriter::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/codecs/memory/FSTTermsWriter");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_d277b99d855f98b8] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/index/SegmentWriteState;Lorg/apache/lucene/codecs/PostingsWriterBase;)V");
              mids$[mid_close_f2cc1bce94666404] = env->getMethodID(cls, "close", "()V");
              mids$[mid_write_a02f5612a398fd43] = env->getMethodID(cls, "write", "(Lorg/apache/lucene/index/Fields;Lorg/apache/lucene/codecs/NormsProducer;)V");

              class$ = new ::java::lang::Class(cls);
              cls = (jclass) class$->this$;

              TERMS_VERSION_CURRENT = env->getStaticIntField(cls, "TERMS_VERSION_CURRENT");
              TERMS_VERSION_START = env->getStaticIntField(cls, "TERMS_VERSION_START");
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          FSTTermsWriter::FSTTermsWriter(const ::org::apache::lucene::index::SegmentWriteState & a0, const ::org::apache::lucene::codecs::PostingsWriterBase & a1) : ::org::apache::lucene::codecs::FieldsConsumer(env->newObject(initializeClass, &mids$, mid_init$_d277b99d855f98b8, a0.this$, a1.this$)) {}

          void FSTTermsWriter::close() const
          {
            env->callVoidMethod(this$, mids$[mid_close_f2cc1bce94666404]);
          }

          void FSTTermsWriter::write(const ::org::apache::lucene::index::Fields & a0, const ::org::apache::lucene::codecs::NormsProducer & a1) const
          {
            env->callVoidMethod(this$, mids$[mid_write_a02f5612a398fd43], a0.this$, a1.this$);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace codecs {
        namespace memory {
          static PyObject *t_FSTTermsWriter_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_FSTTermsWriter_instance_(PyTypeObject *type, PyObject *arg);
          static int t_FSTTermsWriter_init_(t_FSTTermsWriter *self, PyObject *args, PyObject *kwds);
          static PyObject *t_FSTTermsWriter_close(t_FSTTermsWriter *self, PyObject *args);
          static PyObject *t_FSTTermsWriter_write(t_FSTTermsWriter *self, PyObject *args);

          static PyMethodDef t_FSTTermsWriter__methods_[] = {
            DECLARE_METHOD(t_FSTTermsWriter, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_FSTTermsWriter, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_FSTTermsWriter, close, METH_VARARGS),
            DECLARE_METHOD(t_FSTTermsWriter, write, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          static PyType_Slot PY_TYPE_SLOTS(FSTTermsWriter)[] = {
            { Py_tp_methods, t_FSTTermsWriter__methods_ },
            { Py_tp_init, (void *) t_FSTTermsWriter_init_ },
            { 0, NULL }
          };

          static PyType_Def *PY_TYPE_BASES(FSTTermsWriter)[] = {
            &PY_TYPE_DEF(::org::apache::lucene::codecs::FieldsConsumer),
            NULL
          };

          DEFINE_TYPE(FSTTermsWriter, t_FSTTermsWriter, FSTTermsWriter);

          void t_FSTTermsWriter::install(PyObject *module)
          {
            installType(&PY_TYPE(FSTTermsWriter), &PY_TYPE_DEF(FSTTermsWriter), module, "FSTTermsWriter", 0);
          }

          void t_FSTTermsWriter::initialize(PyObject *module)
          {
            PyObject_SetAttrString((PyObject *) PY_TYPE(FSTTermsWriter), "class_", make_descriptor(FSTTermsWriter::initializeClass, 1));
            PyObject_SetAttrString((PyObject *) PY_TYPE(FSTTermsWriter), "wrapfn_", make_descriptor(t_FSTTermsWriter::wrap_jobject));
            PyObject_SetAttrString((PyObject *) PY_TYPE(FSTTermsWriter), "boxfn_", make_descriptor(boxObject));
            env->getClass(FSTTermsWriter::initializeClass);
            PyObject_SetAttrString((PyObject *) PY_TYPE(FSTTermsWriter), "TERMS_VERSION_CURRENT", make_descriptor(FSTTermsWriter::TERMS_VERSION_CURRENT));
            PyObject_SetAttrString((PyObject *) PY_TYPE(FSTTermsWriter), "TERMS_VERSION_START", make_descriptor(FSTTermsWriter::TERMS_VERSION_START));
          }

          static PyObject *t_FSTTermsWriter_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, FSTTermsWriter::initializeClass, 1)))
              return NULL;
            return t_FSTTermsWriter::wrap_Object(FSTTermsWriter(((t_FSTTermsWriter *) arg)->object.this$));
          }
          static PyObject *t_FSTTermsWriter_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, FSTTermsWriter::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_FSTTermsWriter_init_(t_FSTTermsWriter *self, PyObject *args, PyObject *kwds)
          {
            ::org::apache::lucene::index::SegmentWriteState a0((jobject) NULL);
            ::org::apache::lucene::codecs::PostingsWriterBase a1((jobject) NULL);
            FSTTermsWriter object((jobject) NULL);

            if (!parseArgs(args, "kk", ::org::apache::lucene::index::SegmentWriteState::initializeClass, ::org::apache::lucene::codecs::PostingsWriterBase::initializeClass, &a0, &a1))
            {
              INT_CALL(object = FSTTermsWriter(a0, a1));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_FSTTermsWriter_close(t_FSTTermsWriter *self, PyObject *args)
          {

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(self->object.close());
              Py_RETURN_NONE;
            }

            return callSuper(PY_TYPE(FSTTermsWriter), (PyObject *) self, "close", args, 2);
          }

          static PyObject *t_FSTTermsWriter_write(t_FSTTermsWriter *self, PyObject *args)
          {
            ::org::apache::lucene::index::Fields a0((jobject) NULL);
            ::org::apache::lucene::codecs::NormsProducer a1((jobject) NULL);

            if (!parseArgs(args, "kk", ::org::apache::lucene::index::Fields::initializeClass, ::org::apache::lucene::codecs::NormsProducer::initializeClass, &a0, &a1))
            {
              OBJ_CALL(self->object.write(a0, a1));
              Py_RETURN_NONE;
            }

            return callSuper(PY_TYPE(FSTTermsWriter), (PyObject *) self, "write", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/codecs/idversion/IDVersionPostingsFormat.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/index/SegmentReadState.h"
#include "org/apache/lucene/util/BytesRef.h"
#include "org/apache/lucene/index/SegmentWriteState.h"
#include "org/apache/lucene/codecs/FieldsConsumer.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/codecs/FieldsProducer.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace codecs {
        namespace idversion {

          ::java::lang::Class *IDVersionPostingsFormat::class$ = NULL;
          jmethodID *IDVersionPostingsFormat::mids$ = NULL;
          bool IDVersionPostingsFormat::live$ = false;
          jlong IDVersionPostingsFormat::MAX_VERSION = (jlong) 0;
          jlong IDVersionPostingsFormat::MIN_VERSION = (jlong) 0;

          jclass IDVersionPostingsFormat::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/codecs/idversion/IDVersionPostingsFormat");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_f2cc1bce94666404] = env->getMethodID(cls, "<init>", "()V");
              mids$[mid_init$_438c62480c481c65] = env->getMethodID(cls, "<init>", "(II)V");
              mids$[mid_bytesToLong_6f6ee5bba7f22d4c] = env->getStaticMethodID(cls, "bytesToLong", "(Lorg/apache/lucene/util/BytesRef;)J");
              mids$[mid_fieldsConsumer_876dc181a1f61814] = env->getMethodID(cls, "fieldsConsumer", "(Lorg/apache/lucene/index/SegmentWriteState;)Lorg/apache/lucene/codecs/FieldsConsumer;");
              mids$[mid_fieldsProducer_c39bdf540a53fab9] = env->getMethodID(cls, "fieldsProducer", "(Lorg/apache/lucene/index/SegmentReadState;)Lorg/apache/lucene/codecs/FieldsProducer;");
              mids$[mid_longToBytes_bb31f0f903c30c55] = env->getStaticMethodID(cls, "longToBytes", "(JLorg/apache/lucene/util/BytesRef;)V");

              class$ = new ::java::lang::Class(cls);
              cls = (jclass) class$->this$;

              MAX_VERSION = env->getStaticLongField(cls, "MAX_VERSION");
              MIN_VERSION = env->getStaticLongField(cls, "MIN_VERSION");
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          IDVersionPostingsFormat::IDVersionPostingsFormat() : ::org::apache::lucene::codecs::PostingsFormat(env->newObject(initializeClass, &mids$, mid_init$_f2cc1bce94666404)) {}

          IDVersionPostingsFormat::IDVersionPostingsFormat(jint a0, jint a1) : ::org::apache::lucene::codecs::PostingsFormat(env->newObject(initializeClass, &mids$, mid_init$_438c62480c481c65, a0, a1)) {}

          jlong IDVersionPostingsFormat::bytesToLong(const ::org::apache::lucene::util::BytesRef & a0)
          {
            jclass cls = env->getClass(initializeClass);
            return env->callStaticLongMethod(cls, mids$[mid_bytesToLong_6f6ee5bba7f22d4c], a0.this$);
          }

          ::org::apache::lucene::codecs::FieldsConsumer IDVersionPostingsFormat::fieldsConsumer(const ::org::apache::lucene::index::SegmentWriteState & a0) const
          {
            return ::org::apache::lucene::codecs::FieldsConsumer(env->callObjectMethod(this$, mids$[mid_fieldsConsumer_876dc181a1f61814], a0.this$));
          }

          ::org::apache::lucene::codecs::FieldsProducer IDVersionPostingsFormat::fieldsProducer(const ::org::apache::lucene::index::SegmentReadState & a0) const
          {
            return ::org::apache::lucene::codecs::FieldsProducer(env->callObjectMethod(this$, mids$[mid_fieldsProducer_c39bdf540a53fab9], a0.this$));
          }

          void IDVersionPostingsFormat::longToBytes(jlong a0, const ::org::apache::lucene::util::BytesRef & a1)
          {
            jclass cls = env->getClass(initializeClass);
            env->callStaticVoidMethod(cls, mids$[mid_longToBytes_bb31f0f903c30c55], a0, a1.this$);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace codecs {
        namespace idversion {
          static PyObject *t_IDVersionPostingsFormat_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_IDVersionPostingsFormat_instance_(PyTypeObject *type, PyObject *arg);
          static int t_IDVersionPostingsFormat_init_(t_IDVersionPostingsFormat *self, PyObject *args, PyObject *kwds);
          static PyObject *t_IDVersionPostingsFormat_bytesToLong(PyTypeObject *type, PyObject *arg);
          static PyObject *t_IDVersionPostingsFormat_fieldsConsumer(t_IDVersionPostingsFormat *self, PyObject *args);
          static PyObject *t_IDVersionPostingsFormat_fieldsProducer(t_IDVersionPostingsFormat *self, PyObject *args);
          static PyObject *t_IDVersionPostingsFormat_longToBytes(PyTypeObject *type, PyObject *args);

          static PyMethodDef t_IDVersionPostingsFormat__methods_[] = {
            DECLARE_METHOD(t_IDVersionPostingsFormat, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_IDVersionPostingsFormat, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_IDVersionPostingsFormat, bytesToLong, METH_O | METH_CLASS),
            DECLARE_METHOD(t_IDVersionPostingsFormat, fieldsConsumer, METH_VARARGS),
            DECLARE_METHOD(t_IDVersionPostingsFormat, fieldsProducer, METH_VARARGS),
            DECLARE_METHOD(t_IDVersionPostingsFormat, longToBytes, METH_VARARGS | METH_CLASS),
            { NULL, NULL, 0, NULL }
          };

          static PyType_Slot PY_TYPE_SLOTS(IDVersionPostingsFormat)[] = {
            { Py_tp_methods, t_IDVersionPostingsFormat__methods_ },
            { Py_tp_init, (void *) t_IDVersionPostingsFormat_init_ },
            { 0, NULL }
          };

          static PyType_Def *PY_TYPE_BASES(IDVersionPostingsFormat)[] = {
            &PY_TYPE_DEF(::org::apache::lucene::codecs::PostingsFormat),
            NULL
          };

          DEFINE_TYPE(IDVersionPostingsFormat, t_IDVersionPostingsFormat, IDVersionPostingsFormat);

          void t_IDVersionPostingsFormat::install(PyObject *module)
          {
            installType(&PY_TYPE(IDVersionPostingsFormat), &PY_TYPE_DEF(IDVersionPostingsFormat), module, "IDVersionPostingsFormat", 0);
          }

          void t_IDVersionPostingsFormat::initialize(PyObject *module)
          {
            PyObject_SetAttrString((PyObject *) PY_TYPE(IDVersionPostingsFormat), "class_", make_descriptor(IDVersionPostingsFormat::initializeClass, 1));
            PyObject_SetAttrString((PyObject *) PY_TYPE(IDVersionPostingsFormat), "wrapfn_", make_descriptor(t_IDVersionPostingsFormat::wrap_jobject));
            PyObject_SetAttrString((PyObject *) PY_TYPE(IDVersionPostingsFormat), "boxfn_", make_descriptor(boxObject));
            env->getClass(IDVersionPostingsFormat::initializeClass);
            PyObject_SetAttrString((PyObject *) PY_TYPE(IDVersionPostingsFormat), "MAX_VERSION", make_descriptor(IDVersionPostingsFormat::MAX_VERSION));
            PyObject_SetAttrString((PyObject *) PY_TYPE(IDVersionPostingsFormat), "MIN_VERSION", make_descriptor(IDVersionPostingsFormat::MIN_VERSION));
          }

          static PyObject *t_IDVersionPostingsFormat_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, IDVersionPostingsFormat::initializeClass, 1)))
              return NULL;
            return t_IDVersionPostingsFormat::wrap_Object(IDVersionPostingsFormat(((t_IDVersionPostingsFormat *) arg)->object.this$));
          }
          static PyObject *t_IDVersionPostingsFormat_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, IDVersionPostingsFormat::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_IDVersionPostingsFormat_init_(t_IDVersionPostingsFormat *self, PyObject *args, PyObject *kwds)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 0:
              {
                IDVersionPostingsFormat object((jobject) NULL);

                INT_CALL(object = IDVersionPostingsFormat());
                self->object = object;
                break;
              }
             case 2:
              {
                jint a0;
                jint a1;
                IDVersionPostingsFormat object((jobject) NULL);

                if (!parseArgs(args, "II", &a0, &a1))
                {
                  INT_CALL(object = IDVersionPostingsFormat(a0, a1));
                  self->object = object;
                  break;
                }
              }
             default:
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_IDVersionPostingsFormat_bytesToLong(PyTypeObject *type, PyObject *arg)
          {
            ::org::apache::lucene::util::BytesRef a0((jobject) NULL);
            jlong result;

            if (!parseArg(arg, "k", ::org::apache::lucene::util::BytesRef::initializeClass, &a0))
            {
              OBJ_CALL(result = ::org::apache::lucene::codecs::idversion::IDVersionPostingsFormat::bytesToLong(a0));
              return PyLong_FromLongLong((PY_LONG_LONG) result);
            }

            PyErr_SetArgsError(type, "bytesToLong", arg);
            return NULL;
          }

          static PyObject *t_IDVersionPostingsFormat_fieldsConsumer(t_IDVersionPostingsFormat *self, PyObject *args)
          {
            ::org::apache::lucene::index::SegmentWriteState a0((jobject) NULL);
            ::org::apache::lucene::codecs::FieldsConsumer result((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::index::SegmentWriteState::initializeClass, &a0))
            {
              OBJ_CALL(result = self->object.fieldsConsumer(a0));
              return ::org::apache::lucene::codecs::t_FieldsConsumer::wrap_Object(result);
            }

            return callSuper(PY_TYPE(IDVersionPostingsFormat), (PyObject *) self, "fieldsConsumer", args, 2);
          }

          static PyObject *t_IDVersionPostingsFormat_fieldsProducer(t_IDVersionPostingsFormat *self, PyObject *args)
          {
            ::org::apache::lucene::index::SegmentReadState a0((jobject) NULL);
            ::org::apache::lucene::codecs::FieldsProducer result((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::index::SegmentReadState::initializeClass, &a0))
            {
              OBJ_CALL(result = self->object.fieldsProducer(a0));
              return ::org::apache::lucene::codecs::t_FieldsProducer::wrap_Object(result);
            }

            return callSuper(PY_TYPE(IDVersionPostingsFormat), (PyObject *) self, "fieldsProducer", args, 2);
          }

          static PyObject *t_IDVersionPostingsFormat_longToBytes(PyTypeObject *type, PyObject *args)
          {
            jlong a0;
            ::org::apache::lucene::util::BytesRef a1((jobject) NULL);

            if (!parseArgs(args, "Jk", ::org::apache::lucene::util::BytesRef::initializeClass, &a0, &a1))
            {
              OBJ_CALL(::org::apache::lucene::codecs::idversion::IDVersionPostingsFormat::longToBytes(a0, a1));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError(type, "longToBytes", args);
            return NULL;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/grouping/AllGroupHeadsCollector$GroupHead.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace grouping {

          ::java::lang::Class *AllGroupHeadsCollector$GroupHead::class$ = NULL;
          jmethodID *AllGroupHeadsCollector$GroupHead::mids$ = NULL;
          jfieldID *AllGroupHeadsCollector$GroupHead::fids$ = NULL;
          bool AllGroupHeadsCollector$GroupHead::live$ = false;

          jclass AllGroupHeadsCollector$GroupHead::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/search/grouping/AllGroupHeadsCollector$GroupHead");

              mids$ = new jmethodID[max_mid];
              mids$[mid_setScorer_57a565cc0113e133] = env->getMethodID(cls, "setScorer", "(Lorg/apache/lucene/search/Scorable;)V");
              mids$[mid_setNextReader_8747e0e89febf88d] = env->getMethodID(cls, "setNextReader", "(Lorg/apache/lucene/index/LeafReaderContext;)V");
              mids$[mid_updateDocHead_040c4cd0390c5aff] = env->getMethodID(cls, "updateDocHead", "(I)V");
              mids$[mid_compare_57a58545eba514db] = env->getMethodID(cls, "compare", "(II)I");

              fids$ = new jfieldID[max_fid];
              fids$[fid_doc] = env->getFieldID(cls, "doc", "I");
              fids$[fid_groupValue] = env->getFieldID(cls, "groupValue", "Ljava/lang/Object;");

              class$ = new ::java::lang::Class(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          jint AllGroupHeadsCollector$GroupHead::_get_doc() const
          {
            return env->getIntField(this$, fids$[fid_doc]);
          }

          void AllGroupHeadsCollector$GroupHead::_set_doc(jint a0) const
          {
            env->setIntField(this$, fids$[fid_doc], a0);
          }

          ::java::lang::Object AllGroupHeadsCollector$GroupHead::_get_groupValue() const
          {
            return ::java::lang::Object(env->getObjectField(this$, fids$[fid_groupValue]));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace grouping {
          static PyObject *t_AllGroupHeadsCollector$GroupHead_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_AllGroupHeadsCollector$GroupHead_instance_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_AllGroupHeadsCollector$GroupHead_of_(t_AllGroupHeadsCollector$GroupHead *self, PyObject *args);
          static PyObject *t_AllGroupHeadsCollector$GroupHead_get__doc(t_AllGroupHeadsCollector$GroupHead *self, void *data);
          static int t_AllGroupHeadsCollector$GroupHead_set__doc(t_AllGroupHeadsCollector$GroupHead *self, PyObject *arg, void *data);
          static PyObject *t_AllGroupHeadsCollector$GroupHead_get__groupValue(t_AllGroupHeadsCollector$GroupHead *self, void *data);

          static PyObject *t_AllGroupHeadsCollector$GroupHead_get__parameters_(t_AllGroupHeadsCollector$GroupHead *self, void *data);
          static PyGetSetDef t_AllGroupHeadsCollector$GroupHead__fields_[] = {
            DECLARE_GETSET_FIELD(t_AllGroupHeadsCollector$GroupHead, doc),
            DECLARE_GET_FIELD(t_AllGroupHeadsCollector$GroupHead, groupValue),
            DECLARE_GET_FIELD(t_AllGroupHeadsCollector$GroupHead, parameters_),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_AllGroupHeadsCollector$GroupHead__methods_[] = {
            DECLARE_METHOD(t_AllGroupHeadsCollector$GroupHead, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_AllGroupHeadsCollector$GroupHead, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_AllGroupHeadsCollector$GroupHead, of_, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          static PyType_Slot PY_TYPE_SLOTS(AllGroupHeadsCollector$GroupHead)[] = {
            { Py_tp_methods, t_AllGroupHeadsCollector$GroupHead__methods_ },
            { Py_tp_init, (void *) abstract_init },
            { Py_tp_getset, t_AllGroupHeadsCollector$GroupHead__fields_ },
            { 0, NULL }
          };

          static PyType_Def *PY_TYPE_BASES(AllGroupHeadsCollector$GroupHead)[] = {
            &PY_TYPE_DEF(::java::lang::Object),
            NULL
          };

          DEFINE_TYPE(AllGroupHeadsCollector$GroupHead, t_AllGroupHeadsCollector$GroupHead, AllGroupHeadsCollector$GroupHead);
          PyObject *t_AllGroupHeadsCollector$GroupHead::wrap_Object(const AllGroupHeadsCollector$GroupHead& object, PyTypeObject *p0)
          {
            PyObject *obj = t_AllGroupHeadsCollector$GroupHead::wrap_Object(object);
            if (obj != NULL && obj != Py_None)
            {
              t_AllGroupHeadsCollector$GroupHead *self = (t_AllGroupHeadsCollector$GroupHead *) obj;
              self->parameters[0] = p0;
            }
            return obj;
          }

          PyObject *t_AllGroupHeadsCollector$GroupHead::wrap_jobject(const jobject& object, PyTypeObject *p0)
          {
            PyObject *obj = t_AllGroupHeadsCollector$GroupHead::wrap_jobject(object);
            if (obj != NULL && obj != Py_None)
            {
              t_AllGroupHeadsCollector$GroupHead *self = (t_AllGroupHeadsCollector$GroupHead *) obj;
              self->parameters[0] = p0;
            }
            return obj;
          }

          void t_AllGroupHeadsCollector$GroupHead::install(PyObject *module)
          {
            installType(&PY_TYPE(AllGroupHeadsCollector$GroupHead), &PY_TYPE_DEF(AllGroupHeadsCollector$GroupHead), module, "AllGroupHeadsCollector$GroupHead", 0);
          }

          void t_AllGroupHeadsCollector$GroupHead::initialize(PyObject *module)
          {
            PyObject_SetAttrString((PyObject *) PY_TYPE(AllGroupHeadsCollector$GroupHead), "class_", make_descriptor(AllGroupHeadsCollector$GroupHead::initializeClass, 1));
            PyObject_SetAttrString((PyObject *) PY_TYPE(AllGroupHeadsCollector$GroupHead), "wrapfn_", make_descriptor(t_AllGroupHeadsCollector$GroupHead::wrap_jobject));
            PyObject_SetAttrString((PyObject *) PY_TYPE(AllGroupHeadsCollector$GroupHead), "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_AllGroupHeadsCollector$GroupHead_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, AllGroupHeadsCollector$GroupHead::initializeClass, 1)))
              return NULL;
            return t_AllGroupHeadsCollector$GroupHead::wrap_Object(AllGroupHeadsCollector$GroupHead(((t_AllGroupHeadsCollector$GroupHead *) arg)->object.this$));
          }
          static PyObject *t_AllGroupHeadsCollector$GroupHead_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, AllGroupHeadsCollector$GroupHead::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static PyObject *t_AllGroupHeadsCollector$GroupHead_of_(t_AllGroupHeadsCollector$GroupHead *self, PyObject *args)
          {
            if (!parseArg(args, "T", 1, &(self->parameters)))
              Py_RETURN_SELF;
            return PyErr_SetArgsError((PyObject *) self, "of_", args);
          }
          static PyObject *t_AllGroupHeadsCollector$GroupHead_get__parameters_(t_AllGroupHeadsCollector$GroupHead *self, void *data)
          {
            return typeParameters(self->parameters, sizeof(self->parameters));
          }

          static PyObject *t_AllGroupHeadsCollector$GroupHead_get__doc(t_AllGroupHeadsCollector$GroupHead *self, void *data)
          {
            jint value;
            OBJ_CALL(value = self->object._get_doc());
            return PyLong_FromLong((long) value);
          }
          static int t_AllGroupHeadsCollector$GroupHead_set__doc(t_AllGroupHeadsCollector$GroupHead *self, PyObject *arg, void *data)
          {
            jint value;
            if (!parseArg(arg, "I", &value))
            {
              INT_CALL(self->object._set_doc(value));
              return 0;
            }
            PyErr_SetArgsError((PyObject *) self, "doc", arg);
            return -1;
          }

          static PyObject *t_AllGroupHeadsCollector$GroupHead_get__groupValue(t_AllGroupHeadsCollector$GroupHead *self, void *data)
          {
            ::java::lang::Object value((jobject) NULL);
            OBJ_CALL(value = self->object._get_groupValue());
            return ::java::lang::t_Object::wrap_Object(value);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/synonym/SynonymMap$Parser.h"
#include "org/apache/lucene/util/CharsRefBuilder.h"
#include "org/apache/lucene/util/CharsRef.h"
#include "org/apache/lucene/analysis/Analyzer.h"
#include "java/lang/Class.h"
#include "java/lang/String.h"
#include "java/io/Reader.h"
#include "java/io/IOException.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace synonym {

          ::java::lang::Class *SynonymMap$Parser::class$ = NULL;
          jmethodID *SynonymMap$Parser::mids$ = NULL;
          bool SynonymMap$Parser::live$ = false;

          jclass SynonymMap$Parser::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/synonym/SynonymMap$Parser");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_b60e4a7482b40cd4] = env->getMethodID(cls, "<init>", "(ZLorg/apache/lucene/analysis/Analyzer;)V");
              mids$[mid_analyze_eae47aeb23d16e64] = env->getMethodID(cls, "analyze", "(Ljava/lang/String;Lorg/apache/lucene/util/CharsRefBuilder;)Lorg/apache/lucene/util/CharsRef;");
              mids$[mid_parse_b2f3c57f5e6eb3f2] = env->getMethodID(cls, "parse", "(Ljava/io/Reader;)V");

              class$ = new ::java::lang::Class(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          SynonymMap$Parser::SynonymMap$Parser(jboolean a0, const ::org::apache::lucene::analysis::Analyzer & a1) : ::org::apache::lucene::analysis::synonym::SynonymMap$Builder(env->newObject(initializeClass, &mids$, mid_init$_b60e4a7482b40cd4, a0, a1.this$)) {}

          ::org::apache::lucene::util::CharsRef SynonymMap$Parser::analyze(const ::java::lang::String & a0, const ::org::apache::lucene::util::CharsRefBuilder & a1) const
          {
            return ::org::apache::lucene::util::CharsRef(env->callObjectMethod(this$, mids$[mid_analyze_eae47aeb23d16e64], a0.this$, a1.this$));
          }

          void SynonymMap$Parser::parse(const ::java::io::Reader & a0) const
          {
            env->callVoidMethod(this$, mids$[mid_parse_b2f3c57f5e6eb3f2], a0.this$);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace synonym {
          static PyObject *t_SynonymMap$Parser_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_SynonymMap$Parser_instance_(PyTypeObject *type, PyObject *arg);
          static int t_SynonymMap$Parser_init_(t_SynonymMap$Parser *self, PyObject *args, PyObject *kwds);
          static PyObject *t_SynonymMap$Parser_analyze(t_SynonymMap$Parser *self, PyObject *args);
          static PyObject *t_SynonymMap$Parser_parse(t_SynonymMap$Parser *self, PyObject *arg);

          static PyMethodDef t_SynonymMap$Parser__methods_[] = {
            DECLARE_METHOD(t_SynonymMap$Parser, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_SynonymMap$Parser, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_SynonymMap$Parser, analyze, METH_VARARGS),
            DECLARE_METHOD(t_SynonymMap$Parser, parse, METH_O),
            { NULL, NULL, 0, NULL }
          };

          static PyType_Slot PY_TYPE_SLOTS(SynonymMap$Parser)[] = {
            { Py_tp_methods, t_SynonymMap$Parser__methods_ },
            { Py_tp_init, (void *) t_SynonymMap$Parser_init_ },
            { 0, NULL }
          };

          static PyType_Def *PY_TYPE_BASES(SynonymMap$Parser)[] = {
            &PY_TYPE_DEF(::org::apache::lucene::analysis::synonym::SynonymMap$Builder),
            NULL
          };

          DEFINE_TYPE(SynonymMap$Parser, t_SynonymMap$Parser, SynonymMap$Parser);

          void t_SynonymMap$Parser::install(PyObject *module)
          {
            installType(&PY_TYPE(SynonymMap$Parser), &PY_TYPE_DEF(SynonymMap$Parser), module, "SynonymMap$Parser", 0);
          }

          void t_SynonymMap$Parser::initialize(PyObject *module)
          {
            PyObject_SetAttrString((PyObject *) PY_TYPE(SynonymMap$Parser), "class_", make_descriptor(SynonymMap$Parser::initializeClass, 1));
            PyObject_SetAttrString((PyObject *) PY_TYPE(SynonymMap$Parser), "wrapfn_", make_descriptor(t_SynonymMap$Parser::wrap_jobject));
            PyObject_SetAttrString((PyObject *) PY_TYPE(SynonymMap$Parser), "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_SynonymMap$Parser_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, SynonymMap$Parser::initializeClass, 1)))
              return NULL;
            return t_SynonymMap$Parser::wrap_Object(SynonymMap$Parser(((t_SynonymMap$Parser *) arg)->object.this$));
          }
          static PyObject *t_SynonymMap$Parser_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, SynonymMap$Parser::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_SynonymMap$Parser_init_(t_SynonymMap$Parser *self, PyObject *args, PyObject *kwds)
          {
            jboolean a0;
            ::org::apache::lucene::analysis::Analyzer a1((jobject) NULL);
            SynonymMap$Parser object((jobject) NULL);

            if (!parseArgs(args, "Zk", ::org::apache::lucene::analysis::Analyzer::initializeClass, &a0, &a1))
            {
              INT_CALL(object = SynonymMap$Parser(a0, a1));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_SynonymMap$Parser_analyze(t_SynonymMap$Parser *self, PyObject *args)
          {
            ::java::lang::String a0((jobject) NULL);
            ::org::apache::lucene::util::CharsRefBuilder a1((jobject) NULL);
            ::org::apache::lucene::util::CharsRef result((jobject) NULL);

            if (!parseArgs(args, "sk", ::org::apache::lucene::util::CharsRefBuilder::initializeClass, &a0, &a1))
            {
              OBJ_CALL(result = self->object.analyze(a0, a1));
              return ::org::apache::lucene::util::t_CharsRef::wrap_Object(result);
            }

            PyErr_SetArgsError((PyObject *) self, "analyze", args);
            return NULL;
          }

          static PyObject *t_SynonymMap$Parser_parse(t_SynonymMap$Parser *self, PyObject *arg)
          {
            ::java::io::Reader a0((jobject) NULL);

            if (!parseArg(arg, "k", ::java::io::Reader::initializeClass, &a0))
            {
              OBJ_CALL(self->object.parse(a0));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError((PyObject *) self, "parse", arg);
            return NULL;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/util/SparseFixedBitSet.h"
#include "java/io/IOException.h"
#include "java/lang/String.h"
#include "org/apache/lucene/search/DocIdSetIterator.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {

        ::java::lang::Class *SparseFixedBitSet::class$ = NULL;
        jmethodID *SparseFixedBitSet::mids$ = NULL;
        bool SparseFixedBitSet::live$ = false;

        jclass SparseFixedBitSet::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/util/SparseFixedBitSet");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_040c4cd0390c5aff] = env->getMethodID(cls, "<init>", "(I)V");
            mids$[mid_approximateCardinality_9972fcc56b44e79d] = env->getMethodID(cls, "approximateCardinality", "()I");
            mids$[mid_cardinality_9972fcc56b44e79d] = env->getMethodID(cls, "cardinality", "()I");
            mids$[mid_clear_040c4cd0390c5aff] = env->getMethodID(cls, "clear", "(I)V");
            mids$[mid_clear_438c62480c481c65] = env->getMethodID(cls, "clear", "(II)V");
            mids$[mid_get_a1d30e1ee40c89a2] = env->getMethodID(cls, "get", "(I)Z");
            mids$[mid_length_9972fcc56b44e79d] = env->getMethodID(cls, "length", "()I");
            mids$[mid_nextSetBit_1e143afe1894d213] = env->getMethodID(cls, "nextSetBit", "(I)I");
            mids$[mid_or_da04cf8efc6499af] = env->getMethodID(cls, "or", "(Lorg/apache/lucene/search/DocIdSetIterator;)V");
            mids$[mid_prevSetBit_1e143afe1894d213] = env->getMethodID(cls, "prevSetBit", "(I)I");
            mids$[mid_ramBytesUsed_2e5ae9edcb9b072f] = env->getMethodID(cls, "ramBytesUsed", "()J");
            mids$[mid_set_040c4cd0390c5aff] = env->getMethodID(cls, "set", "(I)V");
            mids$[mid_toString_db9b55ba01e03e4b] = env->getMethodID(cls, "toString", "()Ljava/lang/String;");

            class$ = new ::java::lang::Class(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        SparseFixedBitSet::SparseFixedBitSet(jint a0) : ::org::apache::lucene::util::BitSet(env->newObject(initializeClass, &mids$, mid_init$_040c4cd0390c5aff, a0)) {}

        jint SparseFixedBitSet::approximateCardinality() const
        {
          return env->callIntMethod(this$, mids$[mid_approximateCardinality_9972fcc56b44e79d]);
        }

        jint SparseFixedBitSet::cardinality() const
        {
          return env->callIntMethod(this$, mids$[mid_cardinality_9972fcc56b44e79d]);
        }

        void SparseFixedBitSet::clear(jint a0) const
        {
          env->callVoidMethod(this$, mids$[mid_clear_040c4cd0390c5aff], a0);
        }

        void SparseFixedBitSet::clear(jint a0, jint a1) const
        {
          env->callVoidMethod(this$, mids$[mid_clear_438c62480c481c65], a0, a1);
        }

        jboolean SparseFixedBitSet::get(jint a0) const
        {
          return env->callBooleanMethod(this$, mids$[mid_get_a1d30e1ee40c89a2], a0);
        }

        jint SparseFixedBitSet::length() const
        {
          return env->callIntMethod(this$, mids$[mid_length_9972fcc56b44e79d]);
        }

        jint SparseFixedBitSet::nextSetBit(jint a0) const
        {
          return env->callIntMethod(this$, mids$[mid_nextSetBit_1e143afe1894d213], a0);
        }

        void SparseFixedBitSet::or$(const ::org::apache::lucene::search::DocIdSetIterator & a0) const
        {
          env->callVoidMethod(this$, mids$[mid_or_da04cf8efc6499af], a0.this$);
        }

        jint SparseFixedBitSet::prevSetBit(jint a0) const
        {
          return env->callIntMethod(this$, mids$[mid_prevSetBit_1e143afe1894d213], a0);
        }

        jlong SparseFixedBitSet::ramBytesUsed() const
        {
          return env->callLongMethod(this$, mids$[mid_ramBytesUsed_2e5ae9edcb9b072f]);
        }

        void SparseFixedBitSet::set(jint a0) const
        {
          env->callVoidMethod(this$, mids$[mid_set_040c4cd0390c5aff], a0);
        }

        ::java::lang::String SparseFixedBitSet::toString() const
        {
          return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_db9b55ba01e03e4b]));
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        static PyObject *t_SparseFixedBitSet_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_SparseFixedBitSet_instance_(PyTypeObject *type, PyObject *arg);
        static int t_SparseFixedBitSet_init_(t_SparseFixedBitSet *self, PyObject *args, PyObject *kwds);
        static PyObject *t_SparseFixedBitSet_approximateCardinality(t_SparseFixedBitSet *self, PyObject *args);
        static PyObject *t_SparseFixedBitSet_cardinality(t_SparseFixedBitSet *self, PyObject *args);
        static PyObject *t_SparseFixedBitSet_clear(t_SparseFixedBitSet *self, PyObject *args);
        static PyObject *t_SparseFixedBitSet_get(t_SparseFixedBitSet *self, PyObject *args);
        static PyObject *t_SparseFixedBitSet_length(t_SparseFixedBitSet *self, PyObject *args);
        static PyObject *t_SparseFixedBitSet_nextSetBit(t_SparseFixedBitSet *self, PyObject *args);
        static PyObject *t_SparseFixedBitSet_or(t_SparseFixedBitSet *self, PyObject *args);
        static PyObject *t_SparseFixedBitSet_prevSetBit(t_SparseFixedBitSet *self, PyObject *args);
        static PyObject *t_SparseFixedBitSet_ramBytesUsed(t_SparseFixedBitSet *self, PyObject *args);
        static PyObject *t_SparseFixedBitSet_set(t_SparseFixedBitSet *self, PyObject *args);
        static PyObject *t_SparseFixedBitSet_toString(t_SparseFixedBitSet *self, PyObject *args);

        static PyMethodDef t_SparseFixedBitSet__methods_[] = {
          DECLARE_METHOD(t_SparseFixedBitSet, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_SparseFixedBitSet, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_SparseFixedBitSet, approximateCardinality, METH_VARARGS),
          DECLARE_METHOD(t_SparseFixedBitSet, cardinality, METH_VARARGS),
          DECLARE_METHOD(t_SparseFixedBitSet, clear, METH_VARARGS),
          DECLARE_METHOD(t_SparseFixedBitSet, get, METH_VARARGS),
          DECLARE_METHOD(t_SparseFixedBitSet, length, METH_VARARGS),
          DECLARE_METHOD(t_SparseFixedBitSet, nextSetBit, METH_VARARGS),
          DECLARE_METHOD(t_SparseFixedBitSet, or, METH_VARARGS),
          DECLARE_METHOD(t_SparseFixedBitSet, prevSetBit, METH_VARARGS),
          DECLARE_METHOD(t_SparseFixedBitSet, ramBytesUsed, METH_VARARGS),
          DECLARE_METHOD(t_SparseFixedBitSet, set, METH_VARARGS),
          DECLARE_METHOD(t_SparseFixedBitSet, toString, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        static PyType_Slot PY_TYPE_SLOTS(SparseFixedBitSet)[] = {
          { Py_tp_methods, t_SparseFixedBitSet__methods_ },
          { Py_tp_init, (void *) t_SparseFixedBitSet_init_ },
          { 0, NULL }
        };

        static PyType_Def *PY_TYPE_BASES(SparseFixedBitSet)[] = {
          &PY_TYPE_DEF(::org::apache::lucene::util::BitSet),
          NULL
        };

        DEFINE_TYPE(SparseFixedBitSet, t_SparseFixedBitSet, SparseFixedBitSet);

        void t_SparseFixedBitSet::install(PyObject *module)
        {
          installType(&PY_TYPE(SparseFixedBitSet), &PY_TYPE_DEF(SparseFixedBitSet), module, "SparseFixedBitSet", 0);
        }

        void t_SparseFixedBitSet::initialize(PyObject *module)
        {
          PyObject_SetAttrString((PyObject *) PY_TYPE(SparseFixedBitSet), "class_", make_descriptor(SparseFixedBitSet::initializeClass, 1));
          PyObject_SetAttrString((PyObject *) PY_TYPE(SparseFixedBitSet), "wrapfn_", make_descriptor(t_SparseFixedBitSet::wrap_jobject));
          PyObject_SetAttrString((PyObject *) PY_TYPE(SparseFixedBitSet), "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_SparseFixedBitSet_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, SparseFixedBitSet::initializeClass, 1)))
            return NULL;
          return t_SparseFixedBitSet::wrap_Object(SparseFixedBitSet(((t_SparseFixedBitSet *) arg)->object.this$));
        }
        static PyObject *t_SparseFixedBitSet_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, SparseFixedBitSet::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_SparseFixedBitSet_init_(t_SparseFixedBitSet *self, PyObject *args, PyObject *kwds)
        {
          jint a0;
          SparseFixedBitSet object((jobject) NULL);

          if (!parseArgs(args, "I", &a0))
          {
            INT_CALL(object = SparseFixedBitSet(a0));
            self->object = object;
          }
          else
          {
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }

        static PyObject *t_SparseFixedBitSet_approximateCardinality(t_SparseFixedBitSet *self, PyObject *args)
        {
          jint result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.approximateCardinality());
            return PyLong_FromLong((long) result);
          }

          return callSuper(PY_TYPE(SparseFixedBitSet), (PyObject *) self, "approximateCardinality", args, 2);
        }

        static PyObject *t_SparseFixedBitSet_cardinality(t_SparseFixedBitSet *self, PyObject *args)
        {
          jint result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.cardinality());
            return PyLong_FromLong((long) result);
          }

          return callSuper(PY_TYPE(SparseFixedBitSet), (PyObject *) self, "cardinality", args, 2);
        }

        static PyObject *t_SparseFixedBitSet_clear(t_SparseFixedBitSet *self, PyObject *args)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 1:
            {
              jint a0;

              if (!parseArgs(args, "I", &a0))
              {
                OBJ_CALL(self->object.clear(a0));
                Py_RETURN_NONE;
              }
            }
            break;
           case 2:
            {
              jint a0;
              jint a1;

              if (!parseArgs(args, "II", &a0, &a1))
              {
                OBJ_CALL(self->object.clear(a0, a1));
                Py_RETURN_NONE;
              }
            }
          }

          return callSuper(PY_TYPE(SparseFixedBitSet), (PyObject *) self, "clear", args, 2);
        }

        static PyObject *t_SparseFixedBitSet_get(t_SparseFixedBitSet *self, PyObject *args)
        {
          jint a0;
          jboolean result;

          if (!parseArgs(args, "I", &a0))
          {
            OBJ_CALL(result = self->object.get(a0));
            Py_RETURN_BOOL(result);
          }

          return callSuper(PY_TYPE(SparseFixedBitSet), (PyObject *) self, "get", args, 2);
        }

        static PyObject *t_SparseFixedBitSet_length(t_SparseFixedBitSet *self, PyObject *args)
        {
          jint result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.length());
            return PyLong_FromLong((long) result);
          }

          return callSuper(PY_TYPE(SparseFixedBitSet), (PyObject *) self, "length", args, 2);
        }

        static PyObject *t_SparseFixedBitSet_nextSetBit(t_SparseFixedBitSet *self, PyObject *args)
        {
          jint a0;
          jint result;

          if (!parseArgs(args, "I", &a0))
          {
            OBJ_CALL(result = self->object.nextSetBit(a0));
            return PyLong_FromLong((long) result);
          }

          return callSuper(PY_TYPE(SparseFixedBitSet), (PyObject *) self, "nextSetBit", args, 2);
        }

        static PyObject *t_SparseFixedBitSet_or(t_SparseFixedBitSet *self, PyObject *args)
        {
          ::org::apache::lucene::search::DocIdSetIterator a0((jobject) NULL);

          if (!parseArgs(args, "k", ::org::apache::lucene::search::DocIdSetIterator::initializeClass, &a0))
          {
            OBJ_CALL(self->object.or$(a0));
            Py_RETURN_NONE;
          }

          return callSuper(PY_TYPE(SparseFixedBitSet), (PyObject *) self, "or", args, 2);
        }

        static PyObject *t_SparseFixedBitSet_prevSetBit(t_SparseFixedBitSet *self, PyObject *args)
        {
          jint a0;
          jint result;

          if (!parseArgs(args, "I", &a0))
          {
            OBJ_CALL(result = self->object.prevSetBit(a0));
            return PyLong_FromLong((long) result);
          }

          return callSuper(PY_TYPE(SparseFixedBitSet), (PyObject *) self, "prevSetBit", args, 2);
        }

        static PyObject *t_SparseFixedBitSet_ramBytesUsed(t_SparseFixedBitSet *self, PyObject *args)
        {
          jlong result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.ramBytesUsed());
            return PyLong_FromLongLong((PY_LONG_LONG) result);
          }

          return callSuper(PY_TYPE(SparseFixedBitSet), (PyObject *) self, "ramBytesUsed", args, 2);
        }

        static PyObject *t_SparseFixedBitSet_set(t_SparseFixedBitSet *self, PyObject *args)
        {
          jint a0;

          if (!parseArgs(args, "I", &a0))
          {
            OBJ_CALL(self->object.set(a0));
            Py_RETURN_NONE;
          }

          return callSuper(PY_TYPE(SparseFixedBitSet), (PyObject *) self, "set", args, 2);
        }

        static PyObject *t_SparseFixedBitSet_toString(t_SparseFixedBitSet *self, PyObject *args)
        {
          ::java::lang::String result((jobject) NULL);

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.toString());
            return j2p(result);
          }

          return callSuper(PY_TYPE(SparseFixedBitSet), (PyObject *) self, "toString", args, 2);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/similarities/IndependenceSaturated.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace similarities {

          ::java::lang::Class *IndependenceSaturated::class$ = NULL;
          jmethodID *IndependenceSaturated::mids$ = NULL;
          bool IndependenceSaturated::live$ = false;

          jclass IndependenceSaturated::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/search/similarities/IndependenceSaturated");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_f2cc1bce94666404] = env->getMethodID(cls, "<init>", "()V");
              mids$[mid_score_990b512583b70d91] = env->getMethodID(cls, "score", "(DD)D");
              mids$[mid_toString_db9b55ba01e03e4b] = env->getMethodID(cls, "toString", "()Ljava/lang/String;");

              class$ = new ::java::lang::Class(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          IndependenceSaturated::IndependenceSaturated() : ::org::apache::lucene::search::similarities::Independence(env->newObject(initializeClass, &mids$, mid_init$_f2cc1bce94666404)) {}

          jdouble IndependenceSaturated::score(jdouble a0, jdouble a1) const
          {
            return env->callDoubleMethod(this$, mids$[mid_score_990b512583b70d91], a0, a1);
          }

          ::java::lang::String IndependenceSaturated::toString() const
          {
            return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_db9b55ba01e03e4b]));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace similarities {
          static PyObject *t_IndependenceSaturated_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_IndependenceSaturated_instance_(PyTypeObject *type, PyObject *arg);
          static int t_IndependenceSaturated_init_(t_IndependenceSaturated *self, PyObject *args, PyObject *kwds);
          static PyObject *t_IndependenceSaturated_score(t_IndependenceSaturated *self, PyObject *args);
          static PyObject *t_IndependenceSaturated_toString(t_IndependenceSaturated *self, PyObject *args);

          static PyMethodDef t_IndependenceSaturated__methods_[] = {
            DECLARE_METHOD(t_IndependenceSaturated, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_IndependenceSaturated, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_IndependenceSaturated, score, METH_VARARGS),
            DECLARE_METHOD(t_IndependenceSaturated, toString, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          static PyType_Slot PY_TYPE_SLOTS(IndependenceSaturated)[] = {
            { Py_tp_methods, t_IndependenceSaturated__methods_ },
            { Py_tp_init, (void *) t_IndependenceSaturated_init_ },
            { 0, NULL }
          };

          static PyType_Def *PY_TYPE_BASES(IndependenceSaturated)[] = {
            &PY_TYPE_DEF(::org::apache::lucene::search::similarities::Independence),
            NULL
          };

          DEFINE_TYPE(IndependenceSaturated, t_IndependenceSaturated, IndependenceSaturated);

          void t_IndependenceSaturated::install(PyObject *module)
          {
            installType(&PY_TYPE(IndependenceSaturated), &PY_TYPE_DEF(IndependenceSaturated), module, "IndependenceSaturated", 0);
          }

          void t_IndependenceSaturated::initialize(PyObject *module)
          {
            PyObject_SetAttrString((PyObject *) PY_TYPE(IndependenceSaturated), "class_", make_descriptor(IndependenceSaturated::initializeClass, 1));
            PyObject_SetAttrString((PyObject *) PY_TYPE(IndependenceSaturated), "wrapfn_", make_descriptor(t_IndependenceSaturated::wrap_jobject));
            PyObject_SetAttrString((PyObject *) PY_TYPE(IndependenceSaturated), "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_IndependenceSaturated_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, IndependenceSaturated::initializeClass, 1)))
              return NULL;
            return t_IndependenceSaturated::wrap_Object(IndependenceSaturated(((t_IndependenceSaturated *) arg)->object.this$));
          }
          static PyObject *t_IndependenceSaturated_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, IndependenceSaturated::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_IndependenceSaturated_init_(t_IndependenceSaturated *self, PyObject *args, PyObject *kwds)
          {
            IndependenceSaturated object((jobject) NULL);

            INT_CALL(object = IndependenceSaturated());
            self->object = object;

            return 0;
          }

          static PyObject *t_IndependenceSaturated_score(t_IndependenceSaturated *self, PyObject *args)
          {
            jdouble a0;
            jdouble a1;
            jdouble result;

            if (!parseArgs(args, "DD", &a0, &a1))
            {
              OBJ_CALL(result = self->object.score(a0, a1));
              return PyFloat_FromDouble((double) result);
            }

            return callSuper(PY_TYPE(IndependenceSaturated), (PyObject *) self, "score", args, 2);
          }

          static PyObject *t_IndependenceSaturated_toString(t_IndependenceSaturated *self, PyObject *args)
          {
            ::java::lang::String result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.toString());
              return j2p(result);
            }

            return callSuper(PY_TYPE(IndependenceSaturated), (PyObject *) self, "toString", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/codecs/uniformsplit/FieldMetadata.h"
#include "org/apache/lucene/util/Accountable.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/util/BytesRef.h"
#include "org/apache/lucene/util/FixedBitSet.h"
#include "org/apache/lucene/index/FieldInfo.h"
#include "org/apache/lucene/codecs/BlockTermState.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace codecs {
        namespace uniformsplit {

          ::java::lang::Class *FieldMetadata::class$ = NULL;
          jmethodID *FieldMetadata::mids$ = NULL;
          bool FieldMetadata::live$ = false;

          jclass FieldMetadata::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/codecs/uniformsplit/FieldMetadata");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_59b56ee38a8bb555] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/index/FieldInfo;I)V");
              mids$[mid_init$_70a4cdf2e758c743] = env->getMethodID(cls, "<init>", "(JJJLorg/apache/lucene/util/BytesRef;)V");
              mids$[mid_getDictionaryStartFP_2e5ae9edcb9b072f] = env->getMethodID(cls, "getDictionaryStartFP", "()J");
              mids$[mid_getDocCount_9972fcc56b44e79d] = env->getMethodID(cls, "getDocCount", "()I");
              mids$[mid_getDocsSeen_db8ef277f046a30b] = env->getMethodID(cls, "getDocsSeen", "()Lorg/apache/lucene/util/FixedBitSet;");
              mids$[mid_getFieldInfo_7437ab0fdba9315f] = env->getMethodID(cls, "getFieldInfo", "()Lorg/apache/lucene/index/FieldInfo;");
              mids$[mid_getFirstBlockStartFP_2e5ae9edcb9b072f] = env->getMethodID(cls, "getFirstBlockStartFP", "()J");
              mids$[mid_getLastBlockStartFP_2e5ae9edcb9b072f] = env->getMethodID(cls, "getLastBlockStartFP", "()J");
              mids$[mid_getLastTerm_7af2ea2e37ce82b8] = env->getMethodID(cls, "getLastTerm", "()Lorg/apache/lucene/util/BytesRef;");
              mids$[mid_getNumTerms_2e5ae9edcb9b072f] = env->getMethodID(cls, "getNumTerms", "()J");
              mids$[mid_getSumDocFreq_2e5ae9edcb9b072f] = env->getMethodID(cls, "getSumDocFreq", "()J");
              mids$[mid_getSumTotalTermFreq_2e5ae9edcb9b072f] = env->getMethodID(cls, "getSumTotalTermFreq", "()J");
              mids$[mid_ramBytesUsed_2e5ae9edcb9b072f] = env->getMethodID(cls, "ramBytesUsed", "()J");
              mids$[mid_setDictionaryStartFP_9c778c9bce6694df] = env->getMethodID(cls, "setDictionaryStartFP", "(J)V");
              mids$[mid_setFirstBlockStartFP_9c778c9bce6694df] = env->getMethodID(cls, "setFirstBlockStartFP", "(J)V");
              mids$[mid_setLastBlockStartFP_9c778c9bce6694df] = env->getMethodID(cls, "setLastBlockStartFP", "(J)V");
              mids$[mid_setLastTerm_0bdfd2603b7490a8] = env->getMethodID(cls, "setLastTerm", "(Lorg/apache/lucene/util/BytesRef;)V");
              mids$[mid_updateStats_e796bc0c61819518] = env->getMethodID(cls, "updateStats", "(Lorg/apache/lucene/codecs/BlockTermState;)V");

              class$ = new ::java::lang::Class(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          FieldMetadata::FieldMetadata(const ::org::apache::lucene::index::FieldInfo & a0, jint a1) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_59b56ee38a8bb555, a0.this$, a1)) {}

          FieldMetadata::FieldMetadata(jlong a0, jlong a1, jlong a2, const ::org::apache::lucene::util::BytesRef & a3) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_70a4cdf2e758c743, a0, a1, a2, a3.this$)) {}

          jlong FieldMetadata::getDictionaryStartFP() const
          {
            return env->callLongMethod(this$, mids$[mid_getDictionaryStartFP_2e5ae9edcb9b072f]);
          }

          jint FieldMetadata::getDocCount() const
          {
            return env->callIntMethod(this$, mids$[mid_getDocCount_9972fcc56b44e79d]);
          }

          ::org::apache::lucene::util::FixedBitSet FieldMetadata::getDocsSeen() const
          {
            return ::org::apache::lucene::util::FixedBitSet(env->callObjectMethod(this$, mids$[mid_getDocsSeen_db8ef277f046a30b]));
          }

          ::org::apache::lucene::index::FieldInfo FieldMetadata::getFieldInfo() const
          {
            return ::org::apache::lucene::index::FieldInfo(env->callObjectMethod(this$, mids$[mid_getFieldInfo_7437ab0fdba9315f]));
          }

          jlong FieldMetadata::getFirstBlockStartFP() const
          {
            return env->callLongMethod(this$, mids$[mid_getFirstBlockStartFP_2e5ae9edcb9b072f]);
          }

          jlong FieldMetadata::getLastBlockStartFP() const
          {
            return env->callLongMethod(this$, mids$[mid_getLastBlockStartFP_2e5ae9edcb9b072f]);
          }

          ::org::apache::lucene::util::BytesRef FieldMetadata::getLastTerm() const
          {
            return ::org::apache::lucene::util::BytesRef(env->callObjectMethod(this$, mids$[mid_getLastTerm_7af2ea2e37ce82b8]));
          }

          jlong FieldMetadata::getNumTerms() const
          {
            return env->callLongMethod(this$, mids$[mid_getNumTerms_2e5ae9edcb9b072f]);
          }

          jlong FieldMetadata::getSumDocFreq() const
          {
            return env->callLongMethod(this$, mids$[mid_getSumDocFreq_2e5ae9edcb9b072f]);
          }

          jlong FieldMetadata::getSumTotalTermFreq() const
          {
            return env->callLongMethod(this$, mids$[mid_getSumTotalTermFreq_2e5ae9edcb9b072f]);
          }

          jlong FieldMetadata::ramBytesUsed() const
          {
            return env->callLongMethod(this$, mids$[mid_ramBytesUsed_2e5ae9edcb9b072f]);
          }

          void FieldMetadata::setDictionaryStartFP(jlong a0) const
          {
            env->callVoidMethod(this$, mids$[mid_setDictionaryStartFP_9c778c9bce6694df], a0);
          }

          void FieldMetadata::setFirstBlockStartFP(jlong a0) const
          {
            env->callVoidMethod(this$, mids$[mid_setFirstBlockStartFP_9c778c9bce6694df], a0);
          }

          void FieldMetadata::setLastBlockStartFP(jlong a0) const
          {
            env->callVoidMethod(this$, mids$[mid_setLastBlockStartFP_9c778c9bce6694df], a0);
          }

          void FieldMetadata::setLastTerm(const ::org::apache::lucene::util::BytesRef & a0) const
          {
            env->callVoidMethod(this$, mids$[mid_setLastTerm_0bdfd2603b7490a8], a0.this$);
          }

          void FieldMetadata::updateStats(const ::org::apache::lucene::codecs::BlockTermState & a0) const
          {
            env->callVoidMethod(this$, mids$[mid_updateStats_e796bc0c61819518], a0.this$);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"
#include "org/apache/lucene/codecs/uniformsplit/FieldMetadata$Serializer.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace codecs {
        namespace uniformsplit {
          static PyObject *t_FieldMetadata_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_FieldMetadata_instance_(PyTypeObject *type, PyObject *arg);
          static int t_FieldMetadata_init_(t_FieldMetadata *self, PyObject *args, PyObject *kwds);
          static PyObject *t_FieldMetadata_getDictionaryStartFP(t_FieldMetadata *self);
          static PyObject *t_FieldMetadata_getDocCount(t_FieldMetadata *self);
          static PyObject *t_FieldMetadata_getDocsSeen(t_FieldMetadata *self);
          static PyObject *t_FieldMetadata_getFieldInfo(t_FieldMetadata *self);
          static PyObject *t_FieldMetadata_getFirstBlockStartFP(t_FieldMetadata *self);
          static PyObject *t_FieldMetadata_getLastBlockStartFP(t_FieldMetadata *self);
          static PyObject *t_FieldMetadata_getLastTerm(t_FieldMetadata *self);
          static PyObject *t_FieldMetadata_getNumTerms(t_FieldMetadata *self);
          static PyObject *t_FieldMetadata_getSumDocFreq(t_FieldMetadata *self);
          static PyObject *t_FieldMetadata_getSumTotalTermFreq(t_FieldMetadata *self);
          static PyObject *t_FieldMetadata_ramBytesUsed(t_FieldMetadata *self);
          static PyObject *t_FieldMetadata_setDictionaryStartFP(t_FieldMetadata *self, PyObject *arg);
          static PyObject *t_FieldMetadata_setFirstBlockStartFP(t_FieldMetadata *self, PyObject *arg);
          static PyObject *t_FieldMetadata_setLastBlockStartFP(t_FieldMetadata *self, PyObject *arg);
          static PyObject *t_FieldMetadata_setLastTerm(t_FieldMetadata *self, PyObject *arg);
          static PyObject *t_FieldMetadata_updateStats(t_FieldMetadata *self, PyObject *arg);
          static PyObject *t_FieldMetadata_get__dictionaryStartFP(t_FieldMetadata *self, void *data);
          static int t_FieldMetadata_set__dictionaryStartFP(t_FieldMetadata *self, PyObject *arg, void *data);
          static PyObject *t_FieldMetadata_get__docCount(t_FieldMetadata *self, void *data);
          static PyObject *t_FieldMetadata_get__docsSeen(t_FieldMetadata *self, void *data);
          static PyObject *t_FieldMetadata_get__fieldInfo(t_FieldMetadata *self, void *data);
          static PyObject *t_FieldMetadata_get__firstBlockStartFP(t_FieldMetadata *self, void *data);
          static int t_FieldMetadata_set__firstBlockStartFP(t_FieldMetadata *self, PyObject *arg, void *data);
          static PyObject *t_FieldMetadata_get__lastBlockStartFP(t_FieldMetadata *self, void *data);
          static int t_FieldMetadata_set__lastBlockStartFP(t_FieldMetadata *self, PyObject *arg, void *data);
          static PyObject *t_FieldMetadata_get__lastTerm(t_FieldMetadata *self, void *data);
          static int t_FieldMetadata_set__lastTerm(t_FieldMetadata *self, PyObject *arg, void *data);
          static PyObject *t_FieldMetadata_get__numTerms(t_FieldMetadata *self, void *data);
          static PyObject *t_FieldMetadata_get__sumDocFreq(t_FieldMetadata *self, void *data);
          static PyObject *t_FieldMetadata_get__sumTotalTermFreq(t_FieldMetadata *self, void *data);
          static PyGetSetDef t_FieldMetadata__fields_[] = {
            DECLARE_GETSET_FIELD(t_FieldMetadata, dictionaryStartFP),
            DECLARE_GET_FIELD(t_FieldMetadata, docCount),
            DECLARE_GET_FIELD(t_FieldMetadata, docsSeen),
            DECLARE_GET_FIELD(t_FieldMetadata, fieldInfo),
            DECLARE_GETSET_FIELD(t_FieldMetadata, firstBlockStartFP),
            DECLARE_GETSET_FIELD(t_FieldMetadata, lastBlockStartFP),
            DECLARE_GETSET_FIELD(t_FieldMetadata, lastTerm),
            DECLARE_GET_FIELD(t_FieldMetadata, numTerms),
            DECLARE_GET_FIELD(t_FieldMetadata, sumDocFreq),
            DECLARE_GET_FIELD(t_FieldMetadata, sumTotalTermFreq),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_FieldMetadata__methods_[] = {
            DECLARE_METHOD(t_FieldMetadata, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_FieldMetadata, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_FieldMetadata, getDictionaryStartFP, METH_NOARGS),
            DECLARE_METHOD(t_FieldMetadata, getDocCount, METH_NOARGS),
            DECLARE_METHOD(t_FieldMetadata, getDocsSeen, METH_NOARGS),
            DECLARE_METHOD(t_FieldMetadata, getFieldInfo, METH_NOARGS),
            DECLARE_METHOD(t_FieldMetadata, getFirstBlockStartFP, METH_NOARGS),
            DECLARE_METHOD(t_FieldMetadata, getLastBlockStartFP, METH_NOARGS),
            DECLARE_METHOD(t_FieldMetadata, getLastTerm, METH_NOARGS),
            DECLARE_METHOD(t_FieldMetadata, getNumTerms, METH_NOARGS),
            DECLARE_METHOD(t_FieldMetadata, getSumDocFreq, METH_NOARGS),
            DECLARE_METHOD(t_FieldMetadata, getSumTotalTermFreq, METH_NOARGS),
            DECLARE_METHOD(t_FieldMetadata, ramBytesUsed, METH_NOARGS),
            DECLARE_METHOD(t_FieldMetadata, setDictionaryStartFP, METH_O),
            DECLARE_METHOD(t_FieldMetadata, setFirstBlockStartFP, METH_O),
            DECLARE_METHOD(t_FieldMetadata, setLastBlockStartFP, METH_O),
            DECLARE_METHOD(t_FieldMetadata, setLastTerm, METH_O),
            DECLARE_METHOD(t_FieldMetadata, updateStats, METH_O),
            { NULL, NULL, 0, NULL }
          };

          static PyType_Slot PY_TYPE_SLOTS(FieldMetadata)[] = {
            { Py_tp_methods, t_FieldMetadata__methods_ },
            { Py_tp_init, (void *) t_FieldMetadata_init_ },
            { Py_tp_getset, t_FieldMetadata__fields_ },
            { 0, NULL }
          };

          static PyType_Def *PY_TYPE_BASES(FieldMetadata)[] = {
            &PY_TYPE_DEF(::java::lang::Object),
            NULL
          };

          DEFINE_TYPE(FieldMetadata, t_FieldMetadata, FieldMetadata);

          void t_FieldMetadata::install(PyObject *module)
          {
            installType(&PY_TYPE(FieldMetadata), &PY_TYPE_DEF(FieldMetadata), module, "FieldMetadata", 0);
            PyObject_SetAttrString((PyObject *) PY_TYPE(FieldMetadata), "Serializer", make_descriptor(&PY_TYPE_DEF(FieldMetadata$Serializer)));
          }

          void t_FieldMetadata::initialize(PyObject *module)
          {
            PyObject_SetAttrString((PyObject *) PY_TYPE(FieldMetadata), "class_", make_descriptor(FieldMetadata::initializeClass, 1));
            PyObject_SetAttrString((PyObject *) PY_TYPE(FieldMetadata), "wrapfn_", make_descriptor(t_FieldMetadata::wrap_jobject));
            PyObject_SetAttrString((PyObject *) PY_TYPE(FieldMetadata), "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_FieldMetadata_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, FieldMetadata::initializeClass, 1)))
              return NULL;
            return t_FieldMetadata::wrap_Object(FieldMetadata(((t_FieldMetadata *) arg)->object.this$));
          }
          static PyObject *t_FieldMetadata_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, FieldMetadata::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_FieldMetadata_init_(t_FieldMetadata *self, PyObject *args, PyObject *kwds)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 2:
              {
                ::org::apache::lucene::index::FieldInfo a0((jobject) NULL);
                jint a1;
                FieldMetadata object((jobject) NULL);

                if (!parseArgs(args, "kI", ::org::apache::lucene::index::FieldInfo::initializeClass, &a0, &a1))
                {
                  INT_CALL(object = FieldMetadata(a0, a1));
                  self->object = object;
                  break;
                }
              }
              goto err;
             case 4:
              {
                jlong a0;
                jlong a1;
                jlong a2;
                ::org::apache::lucene::util::BytesRef a3((jobject) NULL);
                FieldMetadata object((jobject) NULL);

                if (!parseArgs(args, "JJJk", ::org::apache::lucene::util::BytesRef::initializeClass, &a0, &a1, &a2, &a3))
                {
                  INT_CALL(object = FieldMetadata(a0, a1, a2, a3));
                  self->object = object;
                  break;
                }
              }
             default:
             err:
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_FieldMetadata_getDictionaryStartFP(t_FieldMetadata *self)
          {
            jlong result;
            OBJ_CALL(result = self->object.getDictionaryStartFP());
            return PyLong_FromLongLong((PY_LONG_LONG) result);
          }

          static PyObject *t_FieldMetadata_getDocCount(t_FieldMetadata *self)
          {
            jint result;
            OBJ_CALL(result = self->object.getDocCount());
            return PyLong_FromLong((long) result);
          }

          static PyObject *t_FieldMetadata_getDocsSeen(t_FieldMetadata *self)
          {
            ::org::apache::lucene::util::FixedBitSet result((jobject) NULL);
            OBJ_CALL(result = self->object.getDocsSeen());
            return ::org::apache::lucene::util::t_FixedBitSet::wrap_Object(result);
          }

          static PyObject *t_FieldMetadata_getFieldInfo(t_FieldMetadata *self)
          {
            ::org::apache::lucene::index::FieldInfo result((jobject) NULL);
            OBJ_CALL(result = self->object.getFieldInfo());
            return ::org::apache::lucene::index::t_FieldInfo::wrap_Object(result);
          }

          static PyObject *t_FieldMetadata_getFirstBlockStartFP(t_FieldMetadata *self)
          {
            jlong result;
            OBJ_CALL(result = self->object.getFirstBlockStartFP());
            return PyLong_FromLongLong((PY_LONG_LONG) result);
          }

          static PyObject *t_FieldMetadata_getLastBlockStartFP(t_FieldMetadata *self)
          {
            jlong result;
            OBJ_CALL(result = self->object.getLastBlockStartFP());
            return PyLong_FromLongLong((PY_LONG_LONG) result);
          }

          static PyObject *t_FieldMetadata_getLastTerm(t_FieldMetadata *self)
          {
            ::org::apache::lucene::util::BytesRef result((jobject) NULL);
            OBJ_CALL(result = self->object.getLastTerm());
            return ::org::apache::lucene::util::t_BytesRef::wrap_Object(result);
          }

          static PyObject *t_FieldMetadata_getNumTerms(t_FieldMetadata *self)
          {
            jlong result;
            OBJ_CALL(result = self->object.getNumTerms());
            return PyLong_FromLongLong((PY_LONG_LONG) result);
          }

          static PyObject *t_FieldMetadata_getSumDocFreq(t_FieldMetadata *self)
          {
            jlong result;
            OBJ_CALL(result = self->object.getSumDocFreq());
            return PyLong_FromLongLong((PY_LONG_LONG) result);
          }

          static PyObject *t_FieldMetadata_getSumTotalTermFreq(t_FieldMetadata *self)
          {
            jlong result;
            OBJ_CALL(result = self->object.getSumTotalTermFreq());
            return PyLong_FromLongLong((PY_LONG_LONG) result);
          }

          static PyObject *t_FieldMetadata_ramBytesUsed(t_FieldMetadata *self)
          {
            jlong result;
            OBJ_CALL(result = self->object.ramBytesUsed());
            return PyLong_FromLongLong((PY_LONG_LONG) result);
          }

          static PyObject *t_FieldMetadata_setDictionaryStartFP(t_FieldMetadata *self, PyObject *arg)
          {
            jlong a0;

            if (!parseArg(arg, "J", &a0))
            {
              OBJ_CALL(self->object.setDictionaryStartFP(a0));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError((PyObject *) self, "setDictionaryStartFP", arg);
            return NULL;
          }

          static PyObject *t_FieldMetadata_setFirstBlockStartFP(t_FieldMetadata *self, PyObject *arg)
          {
            jlong a0;

            if (!parseArg(arg, "J", &a0))
            {
              OBJ_CALL(self->object.setFirstBlockStartFP(a0));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError((PyObject *) self, "setFirstBlockStartFP", arg);
            return NULL;
          }

          static PyObject *t_FieldMetadata_setLastBlockStartFP(t_FieldMetadata *self, PyObject *arg)
          {
            jlong a0;

            if (!parseArg(arg, "J", &a0))
            {
              OBJ_CALL(self->object.setLastBlockStartFP(a0));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError((PyObject *) self, "setLastBlockStartFP", arg);
            return NULL;
          }

          static PyObject *t_FieldMetadata_setLastTerm(t_FieldMetadata *self, PyObject *arg)
          {
            ::org::apache::lucene::util::BytesRef a0((jobject) NULL);

            if (!parseArg(arg, "k", ::org::apache::lucene::util::BytesRef::initializeClass, &a0))
            {
              OBJ_CALL(self->object.setLastTerm(a0));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError((PyObject *) self, "setLastTerm", arg);
            return NULL;
          }

          static PyObject *t_FieldMetadata_updateStats(t_FieldMetadata *self, PyObject *arg)
          {
            ::org::apache::lucene::codecs::BlockTermState a0((jobject) NULL);

            if (!parseArg(arg, "k", ::org::apache::lucene::codecs::BlockTermState::initializeClass, &a0))
            {
              OBJ_CALL(self->object.updateStats(a0));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError((PyObject *) self, "updateStats", arg);
            return NULL;
          }

          static PyObject *t_FieldMetadata_get__dictionaryStartFP(t_FieldMetadata *self, void *data)
          {
            jlong value;
            OBJ_CALL(value = self->object.getDictionaryStartFP());
            return PyLong_FromLongLong((PY_LONG_LONG) value);
          }
          static int t_FieldMetadata_set__dictionaryStartFP(t_FieldMetadata *self, PyObject *arg, void *data)
          {
            {
              jlong value;
              if (!parseArg(arg, "J", &value))
              {
                INT_CALL(self->object.setDictionaryStartFP(value));
                return 0;
              }
            }
            PyErr_SetArgsError((PyObject *) self, "dictionaryStartFP", arg);
            return -1;
          }

          static PyObject *t_FieldMetadata_get__docCount(t_FieldMetadata *self, void *data)
          {
            jint value;
            OBJ_CALL(value = self->object.getDocCount());
            return PyLong_FromLong((long) value);
          }

          static PyObject *t_FieldMetadata_get__docsSeen(t_FieldMetadata *self, void *data)
          {
            ::org::apache::lucene::util::FixedBitSet value((jobject) NULL);
            OBJ_CALL(value = self->object.getDocsSeen());
            return ::org::apache::lucene::util::t_FixedBitSet::wrap_Object(value);
          }

          static PyObject *t_FieldMetadata_get__fieldInfo(t_FieldMetadata *self, void *data)
          {
            ::org::apache::lucene::index::FieldInfo value((jobject) NULL);
            OBJ_CALL(value = self->object.getFieldInfo());
            return ::org::apache::lucene::index::t_FieldInfo::wrap_Object(value);
          }

          static PyObject *t_FieldMetadata_get__firstBlockStartFP(t_FieldMetadata *self, void *data)
          {
            jlong value;
            OBJ_CALL(value = self->object.getFirstBlockStartFP());
            return PyLong_FromLongLong((PY_LONG_LONG) value);
          }
          static int t_FieldMetadata_set__firstBlockStartFP(t_FieldMetadata *self, PyObject *arg, void *data)
          {
            {
              jlong value;
              if (!parseArg(arg, "J", &value))
              {
                INT_CALL(self->object.setFirstBlockStartFP(value));
                return 0;
              }
            }
            PyErr_SetArgsError((PyObject *) self, "firstBlockStartFP", arg);
            return -1;
          }

          static PyObject *t_FieldMetadata_get__lastBlockStartFP(t_FieldMetadata *self, void *data)
          {
            jlong value;
            OBJ_CALL(value = self->object.getLastBlockStartFP());
            return PyLong_FromLongLong((PY_LONG_LONG) value);
          }
          static int t_FieldMetadata_set__lastBlockStartFP(t_FieldMetadata *self, PyObject *arg, void *data)
          {
            {
              jlong value;
              if (!parseArg(arg, "J", &value))
              {
                INT_CALL(self->object.setLastBlockStartFP(value));
                return 0;
              }
            }
            PyErr_SetArgsError((PyObject *) self, "lastBlockStartFP", arg);
            return -1;
          }

          static PyObject *t_FieldMetadata_get__lastTerm(t_FieldMetadata *self, void *data)
          {
            ::org::apache::lucene::util::BytesRef value((jobject) NULL);
            OBJ_CALL(value = self->object.getLastTerm());
            return ::org::apache::lucene::util::t_BytesRef::wrap_Object(value);
          }
          static int t_FieldMetadata_set__lastTerm(t_FieldMetadata *self, PyObject *arg, void *data)
          {
            {
              ::org::apache::lucene::util::BytesRef value((jobject) NULL);
              if (!parseArg(arg, "k", ::org::apache::lucene::util::BytesRef::initializeClass, &value))
              {
                INT_CALL(self->object.setLastTerm(value));
                return 0;
              }
            }
            PyErr_SetArgsError((PyObject *) self, "lastTerm", arg);
            return -1;
          }

          static PyObject *t_FieldMetadata_get__numTerms(t_FieldMetadata *self, void *data)
          {
            jlong value;
            OBJ_CALL(value = self->object.getNumTerms());
            return PyLong_FromLongLong((PY_LONG_LONG) value);
          }

          static PyObject *t_FieldMetadata_get__sumDocFreq(t_FieldMetadata *self, void *data)
          {
            jlong value;
            OBJ_CALL(value = self->object.getSumDocFreq());
            return PyLong_FromLongLong((PY_LONG_LONG) value);
          }

          static PyObject *t_FieldMetadata_get__sumTotalTermFreq(t_FieldMetadata *self, void *data)
          {
            jlong value;
            OBJ_CALL(value = self->object.getSumTotalTermFreq());
            return PyLong_FromLongLong((PY_LONG_LONG) value);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/util/BytesRefComparator.h"
#include "java/util/Comparator.h"
#include "org/apache/lucene/util/BytesRef.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {

        ::java::lang::Class *BytesRefComparator::class$ = NULL;
        jmethodID *BytesRefComparator::mids$ = NULL;
        bool BytesRefComparator::live$ = false;

        jclass BytesRefComparator::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/util/BytesRefComparator");

            mids$ = new jmethodID[max_mid];
            mids$[mid_compare_f465493e4f3be174] = env->getMethodID(cls, "compare", "(Lorg/apache/lucene/util/BytesRef;Lorg/apache/lucene/util/BytesRef;)I");
            mids$[mid_byteAt_9f7425bab85cd786] = env->getMethodID(cls, "byteAt", "(Lorg/apache/lucene/util/BytesRef;I)I");

            class$ = new ::java::lang::Class(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        jint BytesRefComparator::compare(const ::org::apache::lucene::util::BytesRef & a0, const ::org::apache::lucene::util::BytesRef & a1) const
        {
          return env->callIntMethod(this$, mids$[mid_compare_f465493e4f3be174], a0.this$, a1.this$);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        static PyObject *t_BytesRefComparator_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_BytesRefComparator_instance_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_BytesRefComparator_compare(t_BytesRefComparator *self, PyObject *args);

        static PyMethodDef t_BytesRefComparator__methods_[] = {
          DECLARE_METHOD(t_BytesRefComparator, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_BytesRefComparator, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_BytesRefComparator, compare, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        static PyType_Slot PY_TYPE_SLOTS(BytesRefComparator)[] = {
          { Py_tp_methods, t_BytesRefComparator__methods_ },
          { Py_tp_init, (void *) abstract_init },
          { 0, NULL }
        };

        static PyType_Def *PY_TYPE_BASES(BytesRefComparator)[] = {
          &PY_TYPE_DEF(::java::lang::Object),
          NULL
        };

        DEFINE_TYPE(BytesRefComparator, t_BytesRefComparator, BytesRefComparator);

        void t_BytesRefComparator::install(PyObject *module)
        {
          installType(&PY_TYPE(BytesRefComparator), &PY_TYPE_DEF(BytesRefComparator), module, "BytesRefComparator", 0);
        }

        void t_BytesRefComparator::initialize(PyObject *module)
        {
          PyObject_SetAttrString((PyObject *) PY_TYPE(BytesRefComparator), "class_", make_descriptor(BytesRefComparator::initializeClass, 1));
          PyObject_SetAttrString((PyObject *) PY_TYPE(BytesRefComparator), "wrapfn_", make_descriptor(t_BytesRefComparator::wrap_jobject));
          PyObject_SetAttrString((PyObject *) PY_TYPE(BytesRefComparator), "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_BytesRefComparator_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, BytesRefComparator::initializeClass, 1)))
            return NULL;
          return t_BytesRefComparator::wrap_Object(BytesRefComparator(((t_BytesRefComparator *) arg)->object.this$));
        }
        static PyObject *t_BytesRefComparator_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, BytesRefComparator::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static PyObject *t_BytesRefComparator_compare(t_BytesRefComparator *self, PyObject *args)
        {
          ::org::apache::lucene::util::BytesRef a0((jobject) NULL);
          ::org::apache::lucene::util::BytesRef a1((jobject) NULL);
          jint result;

          if (!parseArgs(args, "kk", ::org::apache::lucene::util::BytesRef::initializeClass, ::org::apache::lucene::util::BytesRef::initializeClass, &a0, &a1))
          {
            OBJ_CALL(result = self->object.compare(a0, a1));
            return PyLong_FromLong((long) result);
          }

          PyErr_SetArgsError((PyObject *) self, "compare", args);
          return NULL;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/highlight/Fragmenter.h"
#include "java/lang/String.h"
#include "org/apache/lucene/analysis/TokenStream.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace highlight {

          ::java::lang::Class *Fragmenter::class$ = NULL;
          jmethodID *Fragmenter::mids$ = NULL;
          bool Fragmenter::live$ = false;

          jclass Fragmenter::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/search/highlight/Fragmenter");

              mids$ = new jmethodID[max_mid];
              mids$[mid_isNewFragment_8454bd5aa23fd11e] = env->getMethodID(cls, "isNewFragment", "()Z");
              mids$[mid_start_c5ab6d211d8d31bc] = env->getMethodID(cls, "start", "(Ljava/lang/String;Lorg/apache/lucene/analysis/TokenStream;)V");

              class$ = new ::java::lang::Class(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          jboolean Fragmenter::isNewFragment() const
          {
            return env->callBooleanMethod(this$, mids$[mid_isNewFragment_8454bd5aa23fd11e]);
          }

          void Fragmenter::start(const ::java::lang::String & a0, const ::org::apache::lucene::analysis::TokenStream & a1) const
          {
            env->callVoidMethod(this$, mids$[mid_start_c5ab6d211d8d31bc], a0.this$, a1.this$);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace highlight {
          static PyObject *t_Fragmenter_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_Fragmenter_instance_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_Fragmenter_isNewFragment(t_Fragmenter *self);
          static PyObject *t_Fragmenter_start(t_Fragmenter *self, PyObject *args);
          static PyObject *t_Fragmenter_get__newFragment(t_Fragmenter *self, void *data);
          static PyGetSetDef t_Fragmenter__fields_[] = {
            DECLARE_GET_FIELD(t_Fragmenter, newFragment),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_Fragmenter__methods_[] = {
            DECLARE_METHOD(t_Fragmenter, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_Fragmenter, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_Fragmenter, isNewFragment, METH_NOARGS),
            DECLARE_METHOD(t_Fragmenter, start, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          static PyType_Slot PY_TYPE_SLOTS(Fragmenter)[] = {
            { Py_tp_methods, t_Fragmenter__methods_ },
            { Py_tp_init, (void *) abstract_init },
            { Py_tp_getset, t_Fragmenter__fields_ },
            { 0, NULL }
          };

          static PyType_Def *PY_TYPE_BASES(Fragmenter)[] = {
            &PY_TYPE_DEF(::java::lang::Object),
            NULL
          };

          DEFINE_TYPE(Fragmenter, t_Fragmenter, Fragmenter);

          void t_Fragmenter::install(PyObject *module)
          {
            installType(&PY_TYPE(Fragmenter), &PY_TYPE_DEF(Fragmenter), module, "Fragmenter", 0);
          }

          void t_Fragmenter::initialize(PyObject *module)
          {
            PyObject_SetAttrString((PyObject *) PY_TYPE(Fragmenter), "class_", make_descriptor(Fragmenter::initializeClass, 1));
            PyObject_SetAttrString((PyObject *) PY_TYPE(Fragmenter), "wrapfn_", make_descriptor(t_Fragmenter::wrap_jobject));
            PyObject_SetAttrString((PyObject *) PY_TYPE(Fragmenter), "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_Fragmenter_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, Fragmenter::initializeClass, 1)))
              return NULL;
            return t_Fragmenter::wrap_Object(Fragmenter(((t_Fragmenter *) arg)->object.this$));
          }
          static PyObject *t_Fragmenter_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, Fragmenter::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static PyObject *t_Fragmenter_isNewFragment(t_Fragmenter *self)
          {
            jboolean result;
            OBJ_CALL(result = self->object.isNewFragment());
            Py_RETURN_BOOL(result);
          }

          static PyObject *t_Fragmenter_start(t_Fragmenter *self, PyObject *args)
          {
            ::java::lang::String a0((jobject) NULL);
            ::org::apache::lucene::analysis::TokenStream a1((jobject) NULL);

            if (!parseArgs(args, "sk", ::org::apache::lucene::analysis::TokenStream::initializeClass, &a0, &a1))
            {
              OBJ_CALL(self->object.start(a0, a1));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError((PyObject *) self, "start", args);
            return NULL;
          }

          static PyObject *t_Fragmenter_get__newFragment(t_Fragmenter *self, void *data)
          {
            jboolean value;
            OBJ_CALL(value = self->object.isNewFragment());
            Py_RETURN_BOOL(value);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/similarities/NormalizationZ.h"
#include "org/apache/lucene/search/similarities/BasicStats.h"
#include "java/lang/String.h"
#include "org/apache/lucene/search/Explanation.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace similarities {

          ::java::lang::Class *NormalizationZ::class$ = NULL;
          jmethodID *NormalizationZ::mids$ = NULL;
          bool NormalizationZ::live$ = false;

          jclass NormalizationZ::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/search/similarities/NormalizationZ");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_f2cc1bce94666404] = env->getMethodID(cls, "<init>", "()V");
              mids$[mid_init$_8e1d952dd65cdc3a] = env->getMethodID(cls, "<init>", "(F)V");
              mids$[mid_explain_77a68ba236144920] = env->getMethodID(cls, "explain", "(Lorg/apache/lucene/search/similarities/BasicStats;DD)Lorg/apache/lucene/search/Explanation;");
              mids$[mid_getZ_58aec2b64dff50c8] = env->getMethodID(cls, "getZ", "()F");
              mids$[mid_tfn_761ab1c432346fd0] = env->getMethodID(cls, "tfn", "(Lorg/apache/lucene/search/similarities/BasicStats;DD)D");
              mids$[mid_toString_db9b55ba01e03e4b] = env->getMethodID(cls, "toString", "()Ljava/lang/String;");

              class$ = new ::java::lang::Class(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          NormalizationZ::NormalizationZ() : ::org::apache::lucene::search::similarities::Normalization(env->newObject(initializeClass, &mids$, mid_init$_f2cc1bce94666404)) {}

          NormalizationZ::NormalizationZ(jfloat a0) : ::org::apache::lucene::search::similarities::Normalization(env->newObject(initializeClass, &mids$, mid_init$_8e1d952dd65cdc3a, a0)) {}

          ::org::apache::lucene::search::Explanation NormalizationZ::explain(const ::org::apache::lucene::search::similarities::BasicStats & a0, jdouble a1, jdouble a2) const
          {
            return ::org::apache::lucene::search::Explanation(env->callObjectMethod(this$, mids$[mid_explain_77a68ba236144920], a0.this$, a1, a2));
          }

          jfloat NormalizationZ::getZ() const
          {
            return env->callFloatMethod(this$, mids$[mid_getZ_58aec2b64dff50c8]);
          }

          jdouble NormalizationZ::tfn(const ::org::apache::lucene::search::similarities::BasicStats & a0, jdouble a1, jdouble a2) const
          {
            return env->callDoubleMethod(this$, mids$[mid_tfn_761ab1c432346fd0], a0.this$, a1, a2);
          }

          ::java::lang::String NormalizationZ::toString() const
          {
            return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_db9b55ba01e03e4b]));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace similarities {
          static PyObject *t_NormalizationZ_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_NormalizationZ_instance_(PyTypeObject *type, PyObject *arg);
          static int t_NormalizationZ_init_(t_NormalizationZ *self, PyObject *args, PyObject *kwds);
          static PyObject *t_NormalizationZ_explain(t_NormalizationZ *self, PyObject *args);
          static PyObject *t_NormalizationZ_getZ(t_NormalizationZ *self);
          static PyObject *t_NormalizationZ_tfn(t_NormalizationZ *self, PyObject *args);
          static PyObject *t_NormalizationZ_toString(t_NormalizationZ *self, PyObject *args);
          static PyObject *t_NormalizationZ_get__z(t_NormalizationZ *self, void *data);
          static PyGetSetDef t_NormalizationZ__fields_[] = {
            DECLARE_GET_FIELD(t_NormalizationZ, z),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_NormalizationZ__methods_[] = {
            DECLARE_METHOD(t_NormalizationZ, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_NormalizationZ, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_NormalizationZ, explain, METH_VARARGS),
            DECLARE_METHOD(t_NormalizationZ, getZ, METH_NOARGS),
            DECLARE_METHOD(t_NormalizationZ, tfn, METH_VARARGS),
            DECLARE_METHOD(t_NormalizationZ, toString, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          static PyType_Slot PY_TYPE_SLOTS(NormalizationZ)[] = {
            { Py_tp_methods, t_NormalizationZ__methods_ },
            { Py_tp_init, (void *) t_NormalizationZ_init_ },
            { Py_tp_getset, t_NormalizationZ__fields_ },
            { 0, NULL }
          };

          static PyType_Def *PY_TYPE_BASES(NormalizationZ)[] = {
            &PY_TYPE_DEF(::org::apache::lucene::search::similarities::Normalization),
            NULL
          };

          DEFINE_TYPE(NormalizationZ, t_NormalizationZ, NormalizationZ);

          void t_NormalizationZ::install(PyObject *module)
          {
            installType(&PY_TYPE(NormalizationZ), &PY_TYPE_DEF(NormalizationZ), module, "NormalizationZ", 0);
          }

          void t_NormalizationZ::initialize(PyObject *module)
          {
            PyObject_SetAttrString((PyObject *) PY_TYPE(NormalizationZ), "class_", make_descriptor(NormalizationZ::initializeClass, 1));
            PyObject_SetAttrString((PyObject *) PY_TYPE(NormalizationZ), "wrapfn_", make_descriptor(t_NormalizationZ::wrap_jobject));
            PyObject_SetAttrString((PyObject *) PY_TYPE(NormalizationZ), "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_NormalizationZ_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, NormalizationZ::initializeClass, 1)))
              return NULL;
            return t_NormalizationZ::wrap_Object(NormalizationZ(((t_NormalizationZ *) arg)->object.this$));
          }
          static PyObject *t_NormalizationZ_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, NormalizationZ::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_NormalizationZ_init_(t_NormalizationZ *self, PyObject *args, PyObject *kwds)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 0:
              {
                NormalizationZ object((jobject) NULL);

                INT_CALL(object = NormalizationZ());
                self->object = object;
                break;
              }
             case 1:
              {
                jfloat a0;
                NormalizationZ object((jobject) NULL);

                if (!parseArgs(args, "F", &a0))
                {
                  INT_CALL(object = NormalizationZ(a0));
                  self->object = object;
                  break;
                }
              }
             default:
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_NormalizationZ_explain(t_NormalizationZ *self, PyObject *args)
          {
            ::org::apache::lucene::search::similarities::BasicStats a0((jobject) NULL);
            jdouble a1;
            jdouble a2;
            ::org::apache::lucene::search::Explanation result((jobject) NULL);

            if (!parseArgs(args, "kDD", ::org::apache::lucene::search::similarities::BasicStats::initializeClass, &a0, &a1, &a2))
            {
              OBJ_CALL(result = self->object.explain(a0, a1, a2));
              return ::org::apache::lucene::search::t_Explanation::wrap_Object(result);
            }

            return callSuper(PY_TYPE(NormalizationZ), (PyObject *) self, "explain", args, 2);
          }

          static PyObject *t_NormalizationZ_getZ(t_NormalizationZ *self)
          {
            jfloat result;
            OBJ_CALL(result = self->object.getZ());
            return PyFloat_FromDouble((double) result);
          }

          static PyObject *t_NormalizationZ_tfn(t_NormalizationZ *self, PyObject *args)
          {
            ::org::apache::lucene::search::similarities::BasicStats a0((jobject) NULL);
            jdouble a1;
            jdouble a2;
            jdouble result;

            if (!parseArgs(args, "kDD", ::org::apache::lucene::search::similarities::BasicStats::initializeClass, &a0, &a1, &a2))
            {
              OBJ_CALL(result = self->object.tfn(a0, a1, a2));
              return PyFloat_FromDouble((double) result);
            }

            return callSuper(PY_TYPE(NormalizationZ), (PyObject *) self, "tfn", args, 2);
          }

          static PyObject *t_NormalizationZ_toString(t_NormalizationZ *self, PyObject *args)
          {
            ::java::lang::String result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.toString());
              return j2p(result);
            }

            return callSuper(PY_TYPE(NormalizationZ), (PyObject *) self, "toString", args, 2);
          }

          static PyObject *t_NormalizationZ_get__z(t_NormalizationZ *self, void *data)
          {
            jfloat value;
            OBJ_CALL(value = self->object.getZ());
            return PyFloat_FromDouble((double) value);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/util/BytesRefBuilder.h"
#include "org/apache/lucene/util/BytesRefBuilder.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/util/BytesRef.h"
#include "java/lang/CharSequence.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {

        ::java::lang::Class *BytesRefBuilder::class$ = NULL;
        jmethodID *BytesRefBuilder::mids$ = NULL;
        bool BytesRefBuilder::live$ = false;

        jclass BytesRefBuilder::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/util/BytesRefBuilder");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_f2cc1bce94666404] = env->getMethodID(cls, "<init>", "()V");
            mids$[mid_append_0bdfd2603b7490a8] = env->getMethodID(cls, "append", "(Lorg/apache/lucene/util/BytesRef;)V");
            mids$[mid_append_ac389a6379111d18] = env->getMethodID(cls, "append", "(Lorg/apache/lucene/util/BytesRefBuilder;)V");
            mids$[mid_append_9c36fec3bac1d0c7] = env->getMethodID(cls, "append", "(B)V");
            mids$[mid_append_43fdd39c09bb2fad] = env->getMethodID(cls, "append", "([BII)V");
            mids$[mid_byteAt_4d5233a30cda5878] = env->getMethodID(cls, "byteAt", "(I)B");
            mids$[mid_bytes_cf386cdb1bbd339f] = env->getMethodID(cls, "bytes", "()[B");
            mids$[mid_clear_f2cc1bce94666404] = env->getMethodID(cls, "clear", "()V");
            mids$[mid_copyBytes_0bdfd2603b7490a8] = env->getMethodID(cls, "copyBytes", "(Lorg/apache/lucene/util/BytesRef;)V");
            mids$[mid_copyBytes_ac389a6379111d18] = env->getMethodID(cls, "copyBytes", "(Lorg/apache/lucene/util/BytesRefBuilder;)V");
            mids$[mid_copyBytes_43fdd39c09bb2fad] = env->getMethodID(cls, "copyBytes", "([BII)V");
            mids$[mid_copyChars_4b7f5e38f806ae55] = env->getMethodID(cls, "copyChars", "(Ljava/lang/CharSequence;)V");
            mids$[mid_copyChars_d5128be76a214037] = env->getMethodID(cls, "copyChars", "([CII)V");
            mids$[mid_copyChars_1a9fff4dae4e12f0] = env->getMethodID(cls, "copyChars", "(Ljava/lang/CharSequence;II)V");
            mids$[mid_equals_8b72f2dcdde6fd1d] = env->getMethodID(cls, "equals", "(Ljava/lang/Object;)Z");
            mids$[mid_get_7af2ea2e37ce82b8] = env->getMethodID(cls, "get", "()Lorg/apache/lucene/util/BytesRef;");
            mids$[mid_grow_040c4cd0390c5aff] = env->getMethodID(cls, "grow", "(I)V");
            mids$[mid_hashCode_9972fcc56b44e79d] = env->getMethodID(cls, "hashCode", "()I");
            mids$[mid_length_9972fcc56b44e79d] = env->getMethodID(cls, "length", "()I");
            mids$[mid_setByteAt_8344e5e168439156] = env->getMethodID(cls, "setByteAt", "(IB)V");
            mids$[mid_setLength_040c4cd0390c5aff] = env->getMethodID(cls, "setLength", "(I)V");
            mids$[mid_toBytesRef_7af2ea2e37ce82b8] = env->getMethodID(cls, "toBytesRef", "()Lorg/apache/lucene/util/BytesRef;");

            class$ = new ::java::lang::Class(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        BytesRefBuilder::BytesRefBuilder() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_f2cc1bce94666404)) {}

        void BytesRefBuilder::append(const ::org::apache::lucene::util::BytesRef & a0) const
        {
          env->callVoidMethod(this$, mids$[mid_append_0bdfd2603b7490a8], a0.this$);
        }

        void BytesRefBuilder::append(const BytesRefBuilder & a0) const
        {
          env->callVoidMethod(this$, mids$[mid_append_ac389a6379111d18], a0.this$);
        }

        void BytesRefBuilder::append(jbyte a0) const
        {
          env->callVoidMethod(this$, mids$[mid_append_9c36fec3bac1d0c7], a0);
        }

        void BytesRefBuilder::append(const JArray< jbyte > & a0, jint a1, jint a2) const
        {
          env->callVoidMethod(this$, mids$[mid_append_43fdd39c09bb2fad], a0.this$, a1, a2);
        }

        jbyte BytesRefBuilder::byteAt(jint a0) const
        {
          return env->callByteMethod(this$, mids$[mid_byteAt_4d5233a30cda5878], a0);
        }

        JArray< jbyte > BytesRefBuilder::bytes() const
        {
          return JArray< jbyte >(env->callObjectMethod(this$, mids$[mid_bytes_cf386cdb1bbd339f]));
        }

        void BytesRefBuilder::clear() const
        {
          env->callVoidMethod(this$, mids$[mid_clear_f2cc1bce94666404]);
        }

        void BytesRefBuilder::copyBytes(const ::org::apache::lucene::util::BytesRef & a0) const
        {
          env->callVoidMethod(this$, mids$[mid_copyBytes_0bdfd2603b7490a8], a0.this$);
        }

        void BytesRefBuilder::copyBytes(const BytesRefBuilder & a0) const
        {
          env->callVoidMethod(this$, mids$[mid_copyBytes_ac389a6379111d18], a0.this$);
        }

        void BytesRefBuilder::copyBytes(const JArray< jbyte > & a0, jint a1, jint a2) const
        {
          env->callVoidMethod(this$, mids$[mid_copyBytes_43fdd39c09bb2fad], a0.this$, a1, a2);
        }

        void BytesRefBuilder::copyChars(const ::java::lang::CharSequence & a0) const
        {
          env->callVoidMethod(this$, mids$[mid_copyChars_4b7f5e38f806ae55], a0.this$);
        }

        void BytesRefBuilder::copyChars(const JArray< jchar > & a0, jint a1, jint a2) const
        {
          env->callVoidMethod(this$, mids$[mid_copyChars_d5128be76a214037], a0.this$, a1, a2);
        }

        void BytesRefBuilder::copyChars(const ::java::lang::CharSequence & a0, jint a1, jint a2) const
        {
          env->callVoidMethod(this$, mids$[mid_copyChars_1a9fff4dae4e12f0], a0.this$, a1, a2);
        }

        jboolean BytesRefBuilder::equals(const ::java::lang::Object & a0) const
        {
          return env->callBooleanMethod(this$, mids$[mid_equals_8b72f2dcdde6fd1d], a0.this$);
        }

        ::org::apache::lucene::util::BytesRef BytesRefBuilder::get() const
        {
          return ::org::apache::lucene::util::BytesRef(env->callObjectMethod(this$, mids$[mid_get_7af2ea2e37ce82b8]));
        }

        void BytesRefBuilder::grow(jint a0) const
        {
          env->callVoidMethod(this$, mids$[mid_grow_040c4cd0390c5aff], a0);
        }

        jint BytesRefBuilder::hashCode() const
        {
          return env->callIntMethod(this$, mids$[mid_hashCode_9972fcc56b44e79d]);
        }

        jint BytesRefBuilder::length() const
        {
          return env->callIntMethod(this$, mids$[mid_length_9972fcc56b44e79d]);
        }

        void BytesRefBuilder::setByteAt(jint a0, jbyte a1) const
        {
          env->callVoidMethod(this$, mids$[mid_setByteAt_8344e5e168439156], a0, a1);
        }

        void BytesRefBuilder::setLength(jint a0) const
        {
          env->callVoidMethod(this$, mids$[mid_setLength_040c4cd0390c5aff], a0);
        }

        ::org::apache::lucene::util::BytesRef BytesRefBuilder::toBytesRef() const
        {
          return ::org::apache::lucene::util::BytesRef(env->callObjectMethod(this$, mids$[mid_toBytesRef_7af2ea2e37ce82b8]));
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        static PyObject *t_BytesRefBuilder_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_BytesRefBuilder_instance_(PyTypeObject *type, PyObject *arg);
        static int t_BytesRefBuilder_init_(t_BytesRefBuilder *self, PyObject *args, PyObject *kwds);
        static PyObject *t_BytesRefBuilder_append(t_BytesRefBuilder *self, PyObject *args);
        static PyObject *t_BytesRefBuilder_byteAt(t_BytesRefBuilder *self, PyObject *arg);
        static PyObject *t_BytesRefBuilder_bytes(t_BytesRefBuilder *self);
        static PyObject *t_BytesRefBuilder_clear(t_BytesRefBuilder *self);
        static PyObject *t_BytesRefBuilder_copyBytes(t_BytesRefBuilder *self, PyObject *args);
        static PyObject *t_BytesRefBuilder_copyChars(t_BytesRefBuilder *self, PyObject *args);
        static PyObject *t_BytesRefBuilder_equals(t_BytesRefBuilder *self, PyObject *args);
        static PyObject *t_BytesRefBuilder_get(t_BytesRefBuilder *self);
        static PyObject *t_BytesRefBuilder_grow(t_BytesRefBuilder *self, PyObject *arg);
        static PyObject *t_BytesRefBuilder_hashCode(t_BytesRefBuilder *self, PyObject *args);
        static PyObject *t_BytesRefBuilder_length(t_BytesRefBuilder *self);
        static PyObject *t_BytesRefBuilder_setByteAt(t_BytesRefBuilder *self, PyObject *args);
        static PyObject *t_BytesRefBuilder_setLength(t_BytesRefBuilder *self, PyObject *arg);
        static PyObject *t_BytesRefBuilder_toBytesRef(t_BytesRefBuilder *self);

        static PyMethodDef t_BytesRefBuilder__methods_[] = {
          DECLARE_METHOD(t_BytesRefBuilder, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_BytesRefBuilder, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_BytesRefBuilder, append, METH_VARARGS),
          DECLARE_METHOD(t_BytesRefBuilder, byteAt, METH_O),
          DECLARE_METHOD(t_BytesRefBuilder, bytes, METH_NOARGS),
          DECLARE_METHOD(t_BytesRefBuilder, clear, METH_NOARGS),
          DECLARE_METHOD(t_BytesRefBuilder, copyBytes, METH_VARARGS),
          DECLARE_METHOD(t_BytesRefBuilder, copyChars, METH_VARARGS),
          DECLARE_METHOD(t_BytesRefBuilder, equals, METH_VARARGS),
          DECLARE_METHOD(t_BytesRefBuilder, get, METH_NOARGS),
          DECLARE_METHOD(t_BytesRefBuilder, grow, METH_O),
          DECLARE_METHOD(t_BytesRefBuilder, hashCode, METH_VARARGS),
          DECLARE_METHOD(t_BytesRefBuilder, length, METH_NOARGS),
          DECLARE_METHOD(t_BytesRefBuilder, setByteAt, METH_VARARGS),
          DECLARE_METHOD(t_BytesRefBuilder, setLength, METH_O),
          DECLARE_METHOD(t_BytesRefBuilder, toBytesRef, METH_NOARGS),
          { NULL, NULL, 0, NULL }
        };

        static PyType_Slot PY_TYPE_SLOTS(BytesRefBuilder)[] = {
          { Py_tp_methods, t_BytesRefBuilder__methods_ },
          { Py_tp_init, (void *) t_BytesRefBuilder_init_ },
          { 0, NULL }
        };

        static PyType_Def *PY_TYPE_BASES(BytesRefBuilder)[] = {
          &PY_TYPE_DEF(::java::lang::Object),
          NULL
        };

        DEFINE_TYPE(BytesRefBuilder, t_BytesRefBuilder, BytesRefBuilder);

        void t_BytesRefBuilder::install(PyObject *module)
        {
          installType(&PY_TYPE(BytesRefBuilder), &PY_TYPE_DEF(BytesRefBuilder), module, "BytesRefBuilder", 0);
        }

        void t_BytesRefBuilder::initialize(PyObject *module)
        {
          PyObject_SetAttrString((PyObject *) PY_TYPE(BytesRefBuilder), "class_", make_descriptor(BytesRefBuilder::initializeClass, 1));
          PyObject_SetAttrString((PyObject *) PY_TYPE(BytesRefBuilder), "wrapfn_", make_descriptor(t_BytesRefBuilder::wrap_jobject));
          PyObject_SetAttrString((PyObject *) PY_TYPE(BytesRefBuilder), "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_BytesRefBuilder_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, BytesRefBuilder::initializeClass, 1)))
            return NULL;
          return t_BytesRefBuilder::wrap_Object(BytesRefBuilder(((t_BytesRefBuilder *) arg)->object.this$));
        }
        static PyObject *t_BytesRefBuilder_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, BytesRefBuilder::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_BytesRefBuilder_init_(t_BytesRefBuilder *self, PyObject *args, PyObject *kwds)
        {
          BytesRefBuilder object((jobject) NULL);

          INT_CALL(object = BytesRefBuilder());
          self->object = object;

          return 0;
        }

        static PyObject *t_BytesRefBuilder_append(t_BytesRefBuilder *self, PyObject *args)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 1:
            {
              ::org::apache::lucene::util::BytesRef a0((jobject) NULL);

              if (!parseArgs(args, "k", ::org::apache::lucene::util::BytesRef::initializeClass, &a0))
              {
                OBJ_CALL(self->object.append(a0));
                Py_RETURN_NONE;
              }
            }
            {
              BytesRefBuilder a0((jobject) NULL);

              if (!parseArgs(args, "k", BytesRefBuilder::initializeClass, &a0))
              {
                OBJ_CALL(self->object.append(a0));
                Py_RETURN_NONE;
              }
            }
            {
              jbyte a0;

              if (!parseArgs(args, "B", &a0))
              {
                OBJ_CALL(self->object.append(a0));
                Py_RETURN_NONE;
              }
            }
            break;
           case 3:
            {
              JArray< jbyte > a0((jobject) NULL);
              jint a1;
              jint a2;

              if (!parseArgs(args, "[BII", &a0, &a1, &a2))
              {
                OBJ_CALL(self->object.append(a0, a1, a2));
                Py_RETURN_NONE;
              }
            }
          }

          PyErr_SetArgsError((PyObject *) self, "append", args);
          return NULL;
        }

        static PyObject *t_BytesRefBuilder_byteAt(t_BytesRefBuilder *self, PyObject *arg)
        {
          jint a0;
          jbyte result;

          if (!parseArg(arg, "I", &a0))
          {
            OBJ_CALL(result = self->object.byteAt(a0));
            return PyLong_FromLong((long) result);
          }

          PyErr_SetArgsError((PyObject *) self, "byteAt", arg);
          return NULL;
        }

        static PyObject *t_BytesRefBuilder_bytes(t_BytesRefBuilder *self)
        {
          JArray< jbyte > result((jobject) NULL);
          OBJ_CALL(result = self->object.bytes());
          return result.wrap();
        }

        static PyObject *t_BytesRefBuilder_clear(t_BytesRefBuilder *self)
        {
          OBJ_CALL(self->object.clear());
          Py_RETURN_NONE;
        }

        static PyObject *t_BytesRefBuilder_copyBytes(t_BytesRefBuilder *self, PyObject *args)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 1:
            {
              ::org::apache::lucene::util::BytesRef a0((jobject) NULL);

              if (!parseArgs(args, "k", ::org::apache::lucene::util::BytesRef::initializeClass, &a0))
              {
                OBJ_CALL(self->object.copyBytes(a0));
                Py_RETURN_NONE;
              }
            }
            {
              BytesRefBuilder a0((jobject) NULL);

              if (!parseArgs(args, "k", BytesRefBuilder::initializeClass, &a0))
              {
                OBJ_CALL(self->object.copyBytes(a0));
                Py_RETURN_NONE;
              }
            }
            break;
           case 3:
            {
              JArray< jbyte > a0((jobject) NULL);
              jint a1;
              jint a2;

              if (!parseArgs(args, "[BII", &a0, &a1, &a2))
              {
                OBJ_CALL(self->object.copyBytes(a0, a1, a2));
                Py_RETURN_NONE;
              }
            }
          }

          PyErr_SetArgsError((PyObject *) self, "copyBytes", args);
          return NULL;
        }

        static PyObject *t_BytesRefBuilder_copyChars(t_BytesRefBuilder *self, PyObject *args)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 1:
            {
              ::java::lang::CharSequence a0((jobject) NULL);

              if (!parseArgs(args, "O", ::java::lang::PY_TYPE(CharSequence), &a0))
              {
                OBJ_CALL(self->object.copyChars(a0));
                Py_RETURN_NONE;
              }
            }
            break;
           case 3:
            {
              JArray< jchar > a0((jobject) NULL);
              jint a1;
              jint a2;

              if (!parseArgs(args, "[CII", &a0, &a1, &a2))
              {
                OBJ_CALL(self->object.copyChars(a0, a1, a2));
                Py_RETURN_NONE;
              }
            }
            {
              ::java::lang::CharSequence a0((jobject) NULL);
              jint a1;
              jint a2;

              if (!parseArgs(args, "OII", ::java::lang::PY_TYPE(CharSequence), &a0, &a1, &a2))
              {
                OBJ_CALL(self->object.copyChars(a0, a1, a2));
                Py_RETURN_NONE;
              }
            }
          }

          PyErr_SetArgsError((PyObject *) self, "copyChars", args);
          return NULL;
        }

        static PyObject *t_BytesRefBuilder_equals(t_BytesRefBuilder *self, PyObject *args)
        {
          ::java::lang::Object a0((jobject) NULL);
          jboolean result;

          if (!parseArgs(args, "o", &a0))
          {
            OBJ_CALL(result = self->object.equals(a0));
            Py_RETURN_BOOL(result);
          }

          return callSuper(PY_TYPE(BytesRefBuilder), (PyObject *) self, "equals", args, 2);
        }

        static PyObject *t_BytesRefBuilder_get(t_BytesRefBuilder *self)
        {
          ::org::apache::lucene::util::BytesRef result((jobject) NULL);
          OBJ_CALL(result = self->object.get());
          return ::org::apache::lucene::util::t_BytesRef::wrap_Object(result);
        }

        static PyObject *t_BytesRefBuilder_grow(t_BytesRefBuilder *self, PyObject *arg)
        {
          jint a0;

          if (!parseArg(arg, "I", &a0))
          {
            OBJ_CALL(self->object.grow(a0));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "grow", arg);
          return NULL;
        }

        static PyObject *t_BytesRefBuilder_hashCode(t_BytesRefBuilder *self, PyObject *args)
        {
          jint result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.hashCode());
            return PyLong_FromLong((long) result);
          }

          return callSuper(PY_TYPE(BytesRefBuilder), (PyObject *) self, "hashCode", args, 2);
        }

        static PyObject *t_BytesRefBuilder_length(t_BytesRefBuilder *self)
        {
          jint result;
          OBJ_CALL(result = self->object.length());
          return PyLong_FromLong((long) result);
        }

        static PyObject *t_BytesRefBuilder_setByteAt(t_BytesRefBuilder *self, PyObject *args)
        {
          jint a0;
          jbyte a1;

          if (!parseArgs(args, "IB", &a0, &a1))
          {
            OBJ_CALL(self->object.setByteAt(a0, a1));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "setByteAt", args);
          return NULL;
        }

        static PyObject *t_BytesRefBuilder_setLength(t_BytesRefBuilder *self, PyObject *arg)
        {
          jint a0;

          if (!parseArg(arg, "I", &a0))
          {
            OBJ_CALL(self->object.setLength(a0));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "setLength", arg);
          return NULL;
        }

        static PyObject *t_BytesRefBuilder_toBytesRef(t_BytesRefBuilder *self)
        {
          ::org::apache::lucene::util::BytesRef result((jobject) NULL);
          OBJ_CALL(result = self->object.toBytesRef());
          return ::org::apache::lucene::util::t_BytesRef::wrap_Object(result);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/th/ThaiTokenizerFactory.h"
#include "org/apache/lucene/util/AttributeFactory.h"
#include "java/util/Map.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/analysis/Tokenizer.h"
#include "java/lang/String.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace th {

          ::java::lang::Class *ThaiTokenizerFactory::class$ = NULL;
          jmethodID *ThaiTokenizerFactory::mids$ = NULL;
          bool ThaiTokenizerFactory::live$ = false;
          ::java::lang::String *ThaiTokenizerFactory::NAME = NULL;

          jclass ThaiTokenizerFactory::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/th/ThaiTokenizerFactory");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_408bd889ee3beae5] = env->getMethodID(cls, "<init>", "(Ljava/util/Map;)V");
              mids$[mid_create_824583f10752bea9] = env->getMethodID(cls, "create", "(Lorg/apache/lucene/util/AttributeFactory;)Lorg/apache/lucene/analysis/Tokenizer;");

              class$ = new ::java::lang::Class(cls);
              cls = (jclass) class$->this$;

              NAME = new ::java::lang::String(env->getStaticObjectField(cls, "NAME", "Ljava/lang/String;"));
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          ThaiTokenizerFactory::ThaiTokenizerFactory(const ::java::util::Map & a0) : ::org::apache::lucene::analysis::util::TokenizerFactory(env->newObject(initializeClass, &mids$, mid_init$_408bd889ee3beae5, a0.this$)) {}

          ::org::apache::lucene::analysis::Tokenizer ThaiTokenizerFactory::create(const ::org::apache::lucene::util::AttributeFactory & a0) const
          {
            return ::org::apache::lucene::analysis::Tokenizer(env->callObjectMethod(this$, mids$[mid_create_824583f10752bea9], a0.this$));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace th {
          static PyObject *t_ThaiTokenizerFactory_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_ThaiTokenizerFactory_instance_(PyTypeObject *type, PyObject *arg);
          static int t_ThaiTokenizerFactory_init_(t_ThaiTokenizerFactory *self, PyObject *args, PyObject *kwds);
          static PyObject *t_ThaiTokenizerFactory_create(t_ThaiTokenizerFactory *self, PyObject *args);

          static PyMethodDef t_ThaiTokenizerFactory__methods_[] = {
            DECLARE_METHOD(t_ThaiTokenizerFactory, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_ThaiTokenizerFactory, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_ThaiTokenizerFactory, create, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          static PyType_Slot PY_TYPE_SLOTS(ThaiTokenizerFactory)[] = {
            { Py_tp_methods, t_ThaiTokenizerFactory__methods_ },
            { Py_tp_init, (void *) t_ThaiTokenizerFactory_init_ },
            { 0, NULL }
          };

          static PyType_Def *PY_TYPE_BASES(ThaiTokenizerFactory)[] = {
            &PY_TYPE_DEF(::org::apache::lucene::analysis::util::TokenizerFactory),
            NULL
          };

          DEFINE_TYPE(ThaiTokenizerFactory, t_ThaiTokenizerFactory, ThaiTokenizerFactory);

          void t_ThaiTokenizerFactory::install(PyObject *module)
          {
            installType(&PY_TYPE(ThaiTokenizerFactory), &PY_TYPE_DEF(ThaiTokenizerFactory), module, "ThaiTokenizerFactory", 0);
          }

          void t_ThaiTokenizerFactory::initialize(PyObject *module)
          {
            PyObject_SetAttrString((PyObject *) PY_TYPE(ThaiTokenizerFactory), "class_", make_descriptor(ThaiTokenizerFactory::initializeClass, 1));
            PyObject_SetAttrString((PyObject *) PY_TYPE(ThaiTokenizerFactory), "wrapfn_", make_descriptor(t_ThaiTokenizerFactory::wrap_jobject));
            PyObject_SetAttrString((PyObject *) PY_TYPE(ThaiTokenizerFactory), "boxfn_", make_descriptor(boxObject));
            env->getClass(ThaiTokenizerFactory::initializeClass);
            PyObject_SetAttrString((PyObject *) PY_TYPE(ThaiTokenizerFactory), "NAME", make_descriptor(j2p(*ThaiTokenizerFactory::NAME)));
          }

          static PyObject *t_ThaiTokenizerFactory_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, ThaiTokenizerFactory::initializeClass, 1)))
              return NULL;
            return t_ThaiTokenizerFactory::wrap_Object(ThaiTokenizerFactory(((t_ThaiTokenizerFactory *) arg)->object.this$));
          }
          static PyObject *t_ThaiTokenizerFactory_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, ThaiTokenizerFactory::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_ThaiTokenizerFactory_init_(t_ThaiTokenizerFactory *self, PyObject *args, PyObject *kwds)
          {
            ::java::util::Map a0((jobject) NULL);
            PyTypeObject **p0;
            ThaiTokenizerFactory object((jobject) NULL);

            if (!parseArgs(args, "K", ::java::util::Map::initializeClass, &a0, &p0, ::java::util::t_Map::parameters_))
            {
              INT_CALL(object = ThaiTokenizerFactory(a0));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_ThaiTokenizerFactory_create(t_ThaiTokenizerFactory *self, PyObject *args)
          {
            ::org::apache::lucene::util::AttributeFactory a0((jobject) NULL);
            ::org::apache::lucene::analysis::Tokenizer result((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::util::AttributeFactory::initializeClass, &a0))
            {
              OBJ_CALL(result = self->object.create(a0));
              return ::org::apache::lucene::analysis::t_Tokenizer::wrap_Object(result);
            }

            return callSuper(PY_TYPE(ThaiTokenizerFactory), (PyObject *) self, "create", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/util/RollingBuffer$Resettable.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {

        ::java::lang::Class *RollingBuffer$Resettable::class$ = NULL;
        jmethodID *RollingBuffer$Resettable::mids$ = NULL;
        bool RollingBuffer$Resettable::live$ = false;

        jclass RollingBuffer$Resettable::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/util/RollingBuffer$Resettable");

            mids$ = new jmethodID[max_mid];
            mids$[mid_reset_f2cc1bce94666404] = env->getMethodID(cls, "reset", "()V");

            class$ = new ::java::lang::Class(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        void RollingBuffer$Resettable::reset() const
        {
          env->callVoidMethod(this$, mids$[mid_reset_f2cc1bce94666404]);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        static PyObject *t_RollingBuffer$Resettable_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_RollingBuffer$Resettable_instance_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_RollingBuffer$Resettable_of_(t_RollingBuffer$Resettable *self, PyObject *args);
        static PyObject *t_RollingBuffer$Resettable_reset(t_RollingBuffer$Resettable *self);
        static PyObject *t_RollingBuffer$Resettable_get__parameters_(t_RollingBuffer$Resettable *self, void *data);
        static PyGetSetDef t_RollingBuffer$Resettable__fields_[] = {
          DECLARE_GET_FIELD(t_RollingBuffer$Resettable, parameters_),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_RollingBuffer$Resettable__methods_[] = {
          DECLARE_METHOD(t_RollingBuffer$Resettable, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_RollingBuffer$Resettable, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_RollingBuffer$Resettable, of_, METH_VARARGS),
          DECLARE_METHOD(t_RollingBuffer$Resettable, reset, METH_NOARGS),
          { NULL, NULL, 0, NULL }
        };

        static PyType_Slot PY_TYPE_SLOTS(RollingBuffer$Resettable)[] = {
          { Py_tp_methods, t_RollingBuffer$Resettable__methods_ },
          { Py_tp_init, (void *) abstract_init },
          { Py_tp_getset, t_RollingBuffer$Resettable__fields_ },
          { 0, NULL }
        };

        static PyType_Def *PY_TYPE_BASES(RollingBuffer$Resettable)[] = {
          &PY_TYPE_DEF(::java::lang::Object),
          NULL
        };

        DEFINE_TYPE(RollingBuffer$Resettable, t_RollingBuffer$Resettable, RollingBuffer$Resettable);
        PyObject *t_RollingBuffer$Resettable::wrap_Object(const RollingBuffer$Resettable& object, PyTypeObject *p0)
        {
          PyObject *obj = t_RollingBuffer$Resettable::wrap_Object(object);
          if (obj != NULL && obj != Py_None)
          {
            t_RollingBuffer$Resettable *self = (t_RollingBuffer$Resettable *) obj;
            self->parameters[0] = p0;
          }
          return obj;
        }

        PyObject *t_RollingBuffer$Resettable::wrap_jobject(const jobject& object, PyTypeObject *p0)
        {
          PyObject *obj = t_RollingBuffer$Resettable::wrap_jobject(object);
          if (obj != NULL && obj != Py_None)
          {
            t_RollingBuffer$Resettable *self = (t_RollingBuffer$Resettable *) obj;
            self->parameters[0] = p0;
          }
          return obj;
        }

        void t_RollingBuffer$Resettable::install(PyObject *module)
        {
          installType(&PY_TYPE(RollingBuffer$Resettable), &PY_TYPE_DEF(RollingBuffer$Resettable), module, "RollingBuffer$Resettable", 0);
        }

        void t_RollingBuffer$Resettable::initialize(PyObject *module)
        {
          PyObject_SetAttrString((PyObject *) PY_TYPE(RollingBuffer$Resettable), "class_", make_descriptor(RollingBuffer$Resettable::initializeClass, 1));
          PyObject_SetAttrString((PyObject *) PY_TYPE(RollingBuffer$Resettable), "wrapfn_", make_descriptor(t_RollingBuffer$Resettable::wrap_jobject));
          PyObject_SetAttrString((PyObject *) PY_TYPE(RollingBuffer$Resettable), "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_RollingBuffer$Resettable_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, RollingBuffer$Resettable::initializeClass, 1)))
            return NULL;
          return t_RollingBuffer$Resettable::wrap_Object(RollingBuffer$Resettable(((t_RollingBuffer$Resettable *) arg)->object.this$));
        }
        static PyObject *t_RollingBuffer$Resettable_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, RollingBuffer$Resettable::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static PyObject *t_RollingBuffer$Resettable_of_(t_RollingBuffer$Resettable *self, PyObject *args)
        {
          if (!parseArg(args, "T", 1, &(self->parameters)))
            Py_RETURN_SELF;
          return PyErr_SetArgsError((PyObject *) self, "of_", args);
        }

        static PyObject *t_RollingBuffer$Resettable_reset(t_RollingBuffer$Resettable *self)
        {
          OBJ_CALL(self->object.reset());
          Py_RETURN_NONE;
        }
        static PyObject *t_RollingBuffer$Resettable_get__parameters_(t_RollingBuffer$Resettable *self, void *data)
        {
          return typeParameters(self->parameters, sizeof(self->parameters));
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/util/fst/CharSequenceOutputs.h"
#include "org/apache/lucene/util/CharsRef.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/util/fst/CharSequenceOutputs.h"
#include "org/apache/lucene/store/DataOutput.h"
#include "java/lang/String.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/store/DataInput.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        namespace fst {

          ::java::lang::Class *CharSequenceOutputs::class$ = NULL;
          jmethodID *CharSequenceOutputs::mids$ = NULL;
          bool CharSequenceOutputs::live$ = false;

          jclass CharSequenceOutputs::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/util/fst/CharSequenceOutputs");

              mids$ = new jmethodID[max_mid];
              mids$[mid_add_4acfefa5305bdebb] = env->getMethodID(cls, "add", "(Lorg/apache/lucene/util/CharsRef;Lorg/apache/lucene/util/CharsRef;)Lorg/apache/lucene/util/CharsRef;");
              mids$[mid_common_4acfefa5305bdebb] = env->getMethodID(cls, "common", "(Lorg/apache/lucene/util/CharsRef;Lorg/apache/lucene/util/CharsRef;)Lorg/apache/lucene/util/CharsRef;");
              mids$[mid_getNoOutput_2361d75e15cf20de] = env->getMethodID(cls, "getNoOutput", "()Lorg/apache/lucene/util/CharsRef;");
              mids$[mid_getSingleton_a25a3882e1ef779b] = env->getStaticMethodID(cls, "getSingleton", "()Lorg/apache/lucene/util/fst/CharSequenceOutputs;");
              mids$[mid_outputToString_230a380e3fdc1ff0] = env->getMethodID(cls, "outputToString", "(Lorg/apache/lucene/util/CharsRef;)Ljava/lang/String;");
              mids$[mid_ramBytesUsed_21dc85b2cceef762] = env->getMethodID(cls, "ramBytesUsed", "(Lorg/apache/lucene/util/CharsRef;)J");
              mids$[mid_read_a169a51ed2202c9b] = env->getMethodID(cls, "read", "(Lorg/apache/lucene/store/DataInput;)Lorg/apache/lucene/util/CharsRef;");
              mids$[mid_skipOutput_be8da68faa81682c] = env->getMethodID(cls, "skipOutput", "(Lorg/apache/lucene/store/DataInput;)V");
              mids$[mid_subtract_4acfefa5305bdebb] = env->getMethodID(cls, "subtract", "(Lorg/apache/lucene/util/CharsRef;Lorg/apache/lucene/util/CharsRef;)Lorg/apache/lucene/util/CharsRef;");
              mids$[mid_write_a09c0505c3a9869c] = env->getMethodID(cls, "write", "(Lorg/apache/lucene/util/CharsRef;Lorg/apache/lucene/store/DataOutput;)V");

              class$ = new ::java::lang::Class(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          ::org::apache::lucene::util::CharsRef CharSequenceOutputs::add(const ::org::apache::lucene::util::CharsRef & a0, const ::org::apache::lucene::util::CharsRef & a1) const
          {
            return ::org::apache::lucene::util::CharsRef(env->callObjectMethod(this$, mids$[mid_add_4acfefa5305bdebb], a0.this$, a1.this$));
          }

          ::org::apache::lucene::util::CharsRef CharSequenceOutputs::common(const ::org::apache::lucene::util::CharsRef & a0, const ::org::apache::lucene::util::CharsRef & a1) const
          {
            return ::org::apache::lucene::util::CharsRef(env->callObjectMethod(this$, mids$[mid_common_4acfefa5305bdebb], a0.this$, a1.this$));
          }

          ::org::apache::lucene::util::CharsRef CharSequenceOutputs::getNoOutput() const
          {
            return ::org::apache::lucene::util::CharsRef(env->callObjectMethod(this$, mids$[mid_getNoOutput_2361d75e15cf20de]));
          }

          CharSequenceOutputs CharSequenceOutputs::getSingleton()
          {
            jclass cls = env->getClass(initializeClass);
            return CharSequenceOutputs(env->callStaticObjectMethod(cls, mids$[mid_getSingleton_a25a3882e1ef779b]));
          }

          ::java::lang::String CharSequenceOutputs::outputToString(const ::org::apache::lucene::util::CharsRef & a0) const
          {
            return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_outputToString_230a380e3fdc1ff0], a0.this$));
          }

          jlong CharSequenceOutputs::ramBytesUsed(const ::org::apache::lucene::util::CharsRef & a0) const
          {
            return env->callLongMethod(this$, mids$[mid_ramBytesUsed_21dc85b2cceef762], a0.this$);
          }

          ::org::apache::lucene::util::CharsRef CharSequenceOutputs::read(const ::org::apache::lucene::store::DataInput & a0) const
          {
            return ::org::apache::lucene::util::CharsRef(env->callObjectMethod(this$, mids$[mid_read_a169a51ed2202c9b], a0.this$));
          }

          void CharSequenceOutputs::skipOutput(const ::org::apache::lucene::store::DataInput & a0) const
          {
            env->callVoidMethod(this$, mids$[mid_skipOutput_be8da68faa81682c], a0.this$);
          }

          ::org::apache::lucene::util::CharsRef CharSequenceOutputs::subtract(const ::org::apache::lucene::util::CharsRef & a0, const ::org::apache::lucene::util::CharsRef & a1) const
          {
            return ::org::apache::lucene::util::CharsRef(env->callObjectMethod(this$, mids$[mid_subtract_4acfefa5305bdebb], a0.this$, a1.this$));
          }

          void CharSequenceOutputs::write(const ::org::apache::lucene::util::CharsRef & a0, const ::org::apache::lucene::store::DataOutput & a1) const
          {
            env->callVoidMethod(this$, mids$[mid_write_a09c0505c3a9869c], a0.this$, a1.this$);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        namespace fst {
          static PyObject *t_CharSequenceOutputs_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_CharSequenceOutputs_instance_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_CharSequenceOutputs_of_(t_CharSequenceOutputs *self, PyObject *args);
          static PyObject *t_CharSequenceOutputs_add(t_CharSequenceOutputs *self, PyObject *args);
          static PyObject *t_CharSequenceOutputs_common(t_CharSequenceOutputs *self, PyObject *args);
          static PyObject *t_CharSequenceOutputs_getNoOutput(t_CharSequenceOutputs *self, PyObject *args);
          static PyObject *t_CharSequenceOutputs_getSingleton(PyTypeObject *type);
          static PyObject *t_CharSequenceOutputs_outputToString(t_CharSequenceOutputs *self, PyObject *args);
          static PyObject *t_CharSequenceOutputs_ramBytesUsed(t_CharSequenceOutputs *self, PyObject *args);
          static PyObject *t_CharSequenceOutputs_read(t_CharSequenceOutputs *self, PyObject *args);
          static PyObject *t_CharSequenceOutputs_skipOutput(t_CharSequenceOutputs *self, PyObject *args);
          static PyObject *t_CharSequenceOutputs_subtract(t_CharSequenceOutputs *self, PyObject *args);
          static PyObject *t_CharSequenceOutputs_write(t_CharSequenceOutputs *self, PyObject *args);
          static PyObject *t_CharSequenceOutputs_get__noOutput(t_CharSequenceOutputs *self, void *data);
          static PyObject *t_CharSequenceOutputs_get__singleton(t_CharSequenceOutputs *self, void *data);
          static PyObject *t_CharSequenceOutputs_get__parameters_(t_CharSequenceOutputs *self, void *data);
          static PyGetSetDef t_CharSequenceOutputs__fields_[] = {
            DECLARE_GET_FIELD(t_CharSequenceOutputs, noOutput),
            DECLARE_GET_FIELD(t_CharSequenceOutputs, singleton),
            DECLARE_GET_FIELD(t_CharSequenceOutputs, parameters_),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_CharSequenceOutputs__methods_[] = {
            DECLARE_METHOD(t_CharSequenceOutputs, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_CharSequenceOutputs, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_CharSequenceOutputs, of_, METH_VARARGS),
            DECLARE_METHOD(t_CharSequenceOutputs, add, METH_VARARGS),
            DECLARE_METHOD(t_CharSequenceOutputs, common, METH_VARARGS),
            DECLARE_METHOD(t_CharSequenceOutputs, getNoOutput, METH_VARARGS),
            DECLARE_METHOD(t_CharSequenceOutputs, getSingleton, METH_NOARGS | METH_CLASS),
            DECLARE_METHOD(t_CharSequenceOutputs, outputToString, METH_VARARGS),
            DECLARE_METHOD(t_CharSequenceOutputs, ramBytesUsed, METH_VARARGS),
            DECLARE_METHOD(t_CharSequenceOutputs, read, METH_VARARGS),
            DECLARE_METHOD(t_CharSequenceOutputs, skipOutput, METH_VARARGS),
            DECLARE_METHOD(t_CharSequenceOutputs, subtract, METH_VARARGS),
            DECLARE_METHOD(t_CharSequenceOutputs, write, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          static PyType_Slot PY_TYPE_SLOTS(CharSequenceOutputs)[] = {
            { Py_tp_methods, t_CharSequenceOutputs__methods_ },
            { Py_tp_init, (void *) abstract_init },
            { Py_tp_getset, t_CharSequenceOutputs__fields_ },
            { 0, NULL }
          };

          static PyType_Def *PY_TYPE_BASES(CharSequenceOutputs)[] = {
            &PY_TYPE_DEF(::org::apache::lucene::util::fst::Outputs),
            NULL
          };

          DEFINE_TYPE(CharSequenceOutputs, t_CharSequenceOutputs, CharSequenceOutputs);
          PyObject *t_CharSequenceOutputs::wrap_Object(const CharSequenceOutputs& object, PyTypeObject *p0)
          {
            PyObject *obj = t_CharSequenceOutputs::wrap_Object(object);
            if (obj != NULL && obj != Py_None)
            {
              t_CharSequenceOutputs *self = (t_CharSequenceOutputs *) obj;
              self->parameters[0] = p0;
            }
            return obj;
          }

          PyObject *t_CharSequenceOutputs::wrap_jobject(const jobject& object, PyTypeObject *p0)
          {
            PyObject *obj = t_CharSequenceOutputs::wrap_jobject(object);
            if (obj != NULL && obj != Py_None)
            {
              t_CharSequenceOutputs *self = (t_CharSequenceOutputs *) obj;
              self->parameters[0] = p0;
            }
            return obj;
          }

          void t_CharSequenceOutputs::install(PyObject *module)
          {
            installType(&PY_TYPE(CharSequenceOutputs), &PY_TYPE_DEF(CharSequenceOutputs), module, "CharSequenceOutputs", 0);
          }

          void t_CharSequenceOutputs::initialize(PyObject *module)
          {
            PyObject_SetAttrString((PyObject *) PY_TYPE(CharSequenceOutputs), "class_", make_descriptor(CharSequenceOutputs::initializeClass, 1));
            PyObject_SetAttrString((PyObject *) PY_TYPE(CharSequenceOutputs), "wrapfn_", make_descriptor(t_CharSequenceOutputs::wrap_jobject));
            PyObject_SetAttrString((PyObject *) PY_TYPE(CharSequenceOutputs), "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_CharSequenceOutputs_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, CharSequenceOutputs::initializeClass, 1)))
              return NULL;
            return t_CharSequenceOutputs::wrap_Object(CharSequenceOutputs(((t_CharSequenceOutputs *) arg)->object.this$));
          }
          static PyObject *t_CharSequenceOutputs_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, CharSequenceOutputs::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static PyObject *t_CharSequenceOutputs_of_(t_CharSequenceOutputs *self, PyObject *args)
          {
            if (!parseArg(args, "T", 1, &(self->parameters)))
              Py_RETURN_SELF;
            return PyErr_SetArgsError((PyObject *) self, "of_", args);
          }

          static PyObject *t_CharSequenceOutputs_add(t_CharSequenceOutputs *self, PyObject *args)
          {
            ::org::apache::lucene::util::CharsRef a0((jobject) NULL);
            ::org::apache::lucene::util::CharsRef a1((jobject) NULL);
            ::org::apache::lucene::util::CharsRef result((jobject) NULL);

            if (!parseArgs(args, "kk", ::org::apache::lucene::util::CharsRef::initializeClass, ::org::apache::lucene::util::CharsRef::initializeClass, &a0, &a1))
            {
              OBJ_CALL(result = self->object.add(a0, a1));
              return ::org::apache::lucene::util::t_CharsRef::wrap_Object(result);
            }

            return callSuper(PY_TYPE(CharSequenceOutputs), (PyObject *) self, "add", args, 2);
          }

          static PyObject *t_CharSequenceOutputs_common(t_CharSequenceOutputs *self, PyObject *args)
          {
            ::org::apache::lucene::util::CharsRef a0((jobject) NULL);
            ::org::apache::lucene::util::CharsRef a1((jobject) NULL);
            ::org::apache::lucene::util::CharsRef result((jobject) NULL);

            if (!parseArgs(args, "kk", ::org::apache::lucene::util::CharsRef::initializeClass, ::org::apache::lucene::util::CharsRef::initializeClass, &a0, &a1))
            {
              OBJ_CALL(result = self->object.common(a0, a1));
              return ::org::apache::lucene::util::t_CharsRef::wrap_Object(result);
            }

            return callSuper(PY_TYPE(CharSequenceOutputs), (PyObject *) self, "common", args, 2);
          }

          static PyObject *t_CharSequenceOutputs_getNoOutput(t_CharSequenceOutputs *self, PyObject *args)
          {
            ::org::apache::lucene::util::CharsRef result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.getNoOutput());
              return ::org::apache::lucene::util::t_CharsRef::wrap_Object(result);
            }

            return callSuper(PY_TYPE(CharSequenceOutputs), (PyObject *) self, "getNoOutput", args, 2);
          }

          static PyObject *t_CharSequenceOutputs_getSingleton(PyTypeObject *type)
          {
            CharSequenceOutputs result((jobject) NULL);
            OBJ_CALL(result = ::org::apache::lucene::util::fst::CharSequenceOutputs::getSingleton());
            return t_CharSequenceOutputs::wrap_Object(result);
          }

          static PyObject *t_CharSequenceOutputs_outputToString(t_CharSequenceOutputs *self, PyObject *args)
          {
            ::org::apache::lucene::util::CharsRef a0((jobject) NULL);
            ::java::lang::String result((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::util::CharsRef::initializeClass, &a0))
            {
              OBJ_CALL(result = self->object.outputToString(a0));
              return j2p(result);
            }

            return callSuper(PY_TYPE(CharSequenceOutputs), (PyObject *) self, "outputToString", args, 2);
          }

          static PyObject *t_CharSequenceOutputs_ramBytesUsed(t_CharSequenceOutputs *self, PyObject *args)
          {
            ::org::apache::lucene::util::CharsRef a0((jobject) NULL);
            jlong result;

            if (!parseArgs(args, "k", ::org::apache::lucene::util::CharsRef::initializeClass, &a0))
            {
              OBJ_CALL(result = self->object.ramBytesUsed(a0));
              return PyLong_FromLongLong((PY_LONG_LONG) result);
            }

            return callSuper(PY_TYPE(CharSequenceOutputs), (PyObject *) self, "ramBytesUsed", args, 2);
          }

          static PyObject *t_CharSequenceOutputs_read(t_CharSequenceOutputs *self, PyObject *args)
          {
            ::org::apache::lucene::store::DataInput a0((jobject) NULL);
            ::org::apache::lucene::util::CharsRef result((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::store::DataInput::initializeClass, &a0))
            {
              OBJ_CALL(result = self->object.read(a0));
              return ::org::apache::lucene::util::t_CharsRef::wrap_Object(result);
            }

            return callSuper(PY_TYPE(CharSequenceOutputs), (PyObject *) self, "read", args, 2);
          }

          static PyObject *t_CharSequenceOutputs_skipOutput(t_CharSequenceOutputs *self, PyObject *args)
          {
            ::org::apache::lucene::store::DataInput a0((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::store::DataInput::initializeClass, &a0))
            {
              OBJ_CALL(self->object.skipOutput(a0));
              Py_RETURN_NONE;
            }

            return callSuper(PY_TYPE(CharSequenceOutputs), (PyObject *) self, "skipOutput", args, 2);
          }

          static PyObject *t_CharSequenceOutputs_subtract(t_CharSequenceOutputs *self, PyObject *args)
          {
            ::org::apache::lucene::util::CharsRef a0((jobject) NULL);
            ::org::apache::lucene::util::CharsRef a1((jobject) NULL);
            ::org::apache::lucene::util::CharsRef result((jobject) NULL);

            if (!parseArgs(args, "kk", ::org::apache::lucene::util::CharsRef::initializeClass, ::org::apache::lucene::util::CharsRef::initializeClass, &a0, &a1))
            {
              OBJ_CALL(result = self->object.subtract(a0, a1));
              return ::org::apache::lucene::util::t_CharsRef::wrap_Object(result);
            }

            return callSuper(PY_TYPE(CharSequenceOutputs), (PyObject *) self, "subtract", args, 2);
          }

          static PyObject *t_CharSequenceOutputs_write(t_CharSequenceOutputs *self, PyObject *args)
          {
            ::org::apache::lucene::util::CharsRef a0((jobject) NULL);
            ::org::apache::lucene::store::DataOutput a1((jobject) NULL);

            if (!parseArgs(args, "kk", ::org::apache::lucene::util::CharsRef::initializeClass, ::org::apache::lucene::store::DataOutput::initializeClass, &a0, &a1))
            {
              OBJ_CALL(self->object.write(a0, a1));
              Py_RETURN_NONE;
            }

            return callSuper(PY_TYPE(CharSequenceOutputs), (PyObject *) self, "write", args, 2);
          }
          static PyObject *t_CharSequenceOutputs_get__parameters_(t_CharSequenceOutputs *self, void *data)
          {
            return typeParameters(self->parameters, sizeof(self->parameters));
          }

          static PyObject *t_CharSequenceOutputs_get__noOutput(t_CharSequenceOutputs *self, void *data)
          {
            ::org::apache::lucene::util::CharsRef value((jobject) NULL);
            OBJ_CALL(value = self->object.getNoOutput());
            return ::org::apache::lucene::util::t_CharsRef::wrap_Object(value);
          }

          static PyObject *t_CharSequenceOutputs_get__singleton(t_CharSequenceOutputs *self, void *data)
          {
            CharSequenceOutputs value((jobject) NULL);
            OBJ_CALL(value = self->object.getSingleton());
            return t_CharSequenceOutputs::wrap_Object(value);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/index/IndexOptions.h"
#include "org/apache/lucene/index/IndexOptions.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {

        ::java::lang::Class *IndexOptions::class$ = NULL;
        jmethodID *IndexOptions::mids$ = NULL;
        bool IndexOptions::live$ = false;
        IndexOptions *IndexOptions::DOCS = NULL;
        IndexOptions *IndexOptions::DOCS_AND_FREQS = NULL;
        IndexOptions *IndexOptions::DOCS_AND_FREQS_AND_POSITIONS = NULL;
        IndexOptions *IndexOptions::DOCS_AND_FREQS_AND_POSITIONS_AND_OFFSETS = NULL;
        IndexOptions *IndexOptions::NONE = NULL;

        jclass IndexOptions::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/index/IndexOptions");

            mids$ = new jmethodID[max_mid];
            mids$[mid_valueOf_7314196abc530909] = env->getStaticMethodID(cls, "valueOf", "(Ljava/lang/String;)Lorg/apache/lucene/index/IndexOptions;");
            mids$[mid_values_02584b44aaf90b3f] = env->getStaticMethodID(cls, "values", "()[Lorg/apache/lucene/index/IndexOptions;");

            class$ = new ::java::lang::Class(cls);
            cls = (jclass) class$->this$;

            DOCS = new IndexOptions(env->getStaticObjectField(cls, "DOCS", "Lorg/apache/lucene/index/IndexOptions;"));
            DOCS_AND_FREQS = new IndexOptions(env->getStaticObjectField(cls, "DOCS_AND_FREQS", "Lorg/apache/lucene/index/IndexOptions;"));
            DOCS_AND_FREQS_AND_POSITIONS = new IndexOptions(env->getStaticObjectField(cls, "DOCS_AND_FREQS_AND_POSITIONS", "Lorg/apache/lucene/index/IndexOptions;"));
            DOCS_AND_FREQS_AND_POSITIONS_AND_OFFSETS = new IndexOptions(env->getStaticObjectField(cls, "DOCS_AND_FREQS_AND_POSITIONS_AND_OFFSETS", "Lorg/apache/lucene/index/IndexOptions;"));
            NONE = new IndexOptions(env->getStaticObjectField(cls, "NONE", "Lorg/apache/lucene/index/IndexOptions;"));
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        IndexOptions IndexOptions::valueOf(const ::java::lang::String & a0)
        {
          jclass cls = env->getClass(initializeClass);
          return IndexOptions(env->callStaticObjectMethod(cls, mids$[mid_valueOf_7314196abc530909], a0.this$));
        }

        JArray< IndexOptions > IndexOptions::values()
        {
          jclass cls = env->getClass(initializeClass);
          return JArray< IndexOptions >(env->callStaticObjectMethod(cls, mids$[mid_values_02584b44aaf90b3f]));
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {
        static PyObject *t_IndexOptions_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_IndexOptions_instance_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_IndexOptions_of_(t_IndexOptions *self, PyObject *args);
        static PyObject *t_IndexOptions_valueOf(PyTypeObject *type, PyObject *args);
        static PyObject *t_IndexOptions_values(PyTypeObject *type);
        static PyObject *t_IndexOptions_get__parameters_(t_IndexOptions *self, void *data);
        static PyGetSetDef t_IndexOptions__fields_[] = {
          DECLARE_GET_FIELD(t_IndexOptions, parameters_),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_IndexOptions__methods_[] = {
          DECLARE_METHOD(t_IndexOptions, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_IndexOptions, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_IndexOptions, of_, METH_VARARGS),
          DECLARE_METHOD(t_IndexOptions, valueOf, METH_VARARGS | METH_CLASS),
          DECLARE_METHOD(t_IndexOptions, values, METH_NOARGS | METH_CLASS),
          { NULL, NULL, 0, NULL }
        };

        static PyType_Slot PY_TYPE_SLOTS(IndexOptions)[] = {
          { Py_tp_methods, t_IndexOptions__methods_ },
          { Py_tp_init, (void *) abstract_init },
          { Py_tp_getset, t_IndexOptions__fields_ },
          { 0, NULL }
        };

        static PyType_Def *PY_TYPE_BASES(IndexOptions)[] = {
          &PY_TYPE_DEF(::java::lang::Enum),
          NULL
        };

        DEFINE_TYPE(IndexOptions, t_IndexOptions, IndexOptions);
        PyObject *t_IndexOptions::wrap_Object(const IndexOptions& object, PyTypeObject *p0)
        {
          PyObject *obj = t_IndexOptions::wrap_Object(object);
          if (obj != NULL && obj != Py_None)
          {
            t_IndexOptions *self = (t_IndexOptions *) obj;
            self->parameters[0] = p0;
          }
          return obj;
        }

        PyObject *t_IndexOptions::wrap_jobject(const jobject& object, PyTypeObject *p0)
        {
          PyObject *obj = t_IndexOptions::wrap_jobject(object);
          if (obj != NULL && obj != Py_None)
          {
            t_IndexOptions *self = (t_IndexOptions *) obj;
            self->parameters[0] = p0;
          }
          return obj;
        }

        void t_IndexOptions::install(PyObject *module)
        {
          installType(&PY_TYPE(IndexOptions), &PY_TYPE_DEF(IndexOptions), module, "IndexOptions", 0);
        }

        void t_IndexOptions::initialize(PyObject *module)
        {
          PyObject_SetAttrString((PyObject *) PY_TYPE(IndexOptions), "class_", make_descriptor(IndexOptions::initializeClass, 1));
          PyObject_SetAttrString((PyObject *) PY_TYPE(IndexOptions), "wrapfn_", make_descriptor(t_IndexOptions::wrap_jobject));
          PyObject_SetAttrString((PyObject *) PY_TYPE(IndexOptions), "boxfn_", make_descriptor(boxObject));
          env->getClass(IndexOptions::initializeClass);
          PyObject_SetAttrString((PyObject *) PY_TYPE(IndexOptions), "DOCS", make_descriptor(t_IndexOptions::wrap_Object(*IndexOptions::DOCS)));
          PyObject_SetAttrString((PyObject *) PY_TYPE(IndexOptions), "DOCS_AND_FREQS", make_descriptor(t_IndexOptions::wrap_Object(*IndexOptions::DOCS_AND_FREQS)));
          PyObject_SetAttrString((PyObject *) PY_TYPE(IndexOptions), "DOCS_AND_FREQS_AND_POSITIONS", make_descriptor(t_IndexOptions::wrap_Object(*IndexOptions::DOCS_AND_FREQS_AND_POSITIONS)));
          PyObject_SetAttrString((PyObject *) PY_TYPE(IndexOptions), "DOCS_AND_FREQS_AND_POSITIONS_AND_OFFSETS", make_descriptor(t_IndexOptions::wrap_Object(*IndexOptions::DOCS_AND_FREQS_AND_POSITIONS_AND_OFFSETS)));
          PyObject_SetAttrString((PyObject *) PY_TYPE(IndexOptions), "NONE", make_descriptor(t_IndexOptions::wrap_Object(*IndexOptions::NONE)));
        }

        static PyObject *t_IndexOptions_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, IndexOptions::initializeClass, 1)))
            return NULL;
          return t_IndexOptions::wrap_Object(IndexOptions(((t_IndexOptions *) arg)->object.this$));
        }
        static PyObject *t_IndexOptions_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, IndexOptions::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static PyObject *t_IndexOptions_of_(t_IndexOptions *self, PyObject *args)
        {
          if (!parseArg(args, "T", 1, &(self->parameters)))
            Py_RETURN_SELF;
          return PyErr_SetArgsError((PyObject *) self, "of_", args);
        }

        static PyObject *t_IndexOptions_valueOf(PyTypeObject *type, PyObject *args)
        {
          ::java::lang::String a0((jobject) NULL);
          IndexOptions result((jobject) NULL);

          if (!parseArgs(args, "s", &a0))
          {
            OBJ_CALL(result = ::org::apache::lucene::index::IndexOptions::valueOf(a0));
            return t_IndexOptions::wrap_Object(result);
          }

          return callSuper(type, "valueOf", args, 2);
        }

        static PyObject *t_IndexOptions_values(PyTypeObject *type)
        {
          JArray< IndexOptions > result((jobject) NULL);
          OBJ_CALL(result = ::org::apache::lucene::index::IndexOptions::values());
          return JArray<jobject>(result.this$).wrap(t_IndexOptions::wrap_jobject);
        }
        static PyObject *t_IndexOptions_get__parameters_(t_IndexOptions *self, void *data)
        {
          return typeParameters(self->parameters, sizeof(self->parameters));
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/util/automaton/Transition.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        namespace automaton {

          ::java::lang::Class *Transition::class$ = NULL;
          jmethodID *Transition::mids$ = NULL;
          jfieldID *Transition::fids$ = NULL;
          bool Transition::live$ = false;

          jclass Transition::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/util/automaton/Transition");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_f2cc1bce94666404] = env->getMethodID(cls, "<init>", "()V");
              mids$[mid_toString_db9b55ba01e03e4b] = env->getMethodID(cls, "toString", "()Ljava/lang/String;");

              fids$ = new jfieldID[max_fid];
              fids$[fid_dest] = env->getFieldID(cls, "dest", "I");
              fids$[fid_max] = env->getFieldID(cls, "max", "I");
              fids$[fid_min] = env->getFieldID(cls, "min", "I");
              fids$[fid_source] = env->getFieldID(cls, "source", "I");

              class$ = new ::java::lang::Class(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          Transition::Transition() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_f2cc1bce94666404)) {}

          ::java::lang::String Transition::toString() const
          {
            return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_db9b55ba01e03e4b]));
          }

          jint Transition::_get_dest() const
          {
            return env->getIntField(this$, fids$[fid_dest]);
          }

          void Transition::_set_dest(jint a0) const
          {
            env->setIntField(this$, fids$[fid_dest], a0);
          }

          jint Transition::_get_max() const
          {
            return env->getIntField(this$, fids$[fid_max]);
          }

          void Transition::_set_max(jint a0) const
          {
            env->setIntField(this$, fids$[fid_max], a0);
          }

          jint Transition::_get_min() const
          {
            return env->getIntField(this$, fids$[fid_min]);
          }

          void Transition::_set_min(jint a0) const
          {
            env->setIntField(this$, fids$[fid_min], a0);
          }

          jint Transition::_get_source() const
          {
            return env->getIntField(this$, fids$[fid_source]);
          }

          void Transition::_set_source(jint a0) const
          {
            env->setIntField(this$, fids$[fid_source], a0);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        namespace automaton {
          static PyObject *t_Transition_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_Transition_instance_(PyTypeObject *type, PyObject *arg);
          static int t_Transition_init_(t_Transition *self, PyObject *args, PyObject *kwds);
          static PyObject *t_Transition_toString(t_Transition *self, PyObject *args);
          static PyObject *t_Transition_get__dest(t_Transition *self, void *data);
          static int t_Transition_set__dest(t_Transition *self, PyObject *arg, void *data);
          static PyObject *t_Transition_get__max(t_Transition *self, void *data);
          static int t_Transition_set__max(t_Transition *self, PyObject *arg, void *data);
          static PyObject *t_Transition_get__min(t_Transition *self, void *data);
          static int t_Transition_set__min(t_Transition *self, PyObject *arg, void *data);
          static PyObject *t_Transition_get__source(t_Transition *self, void *data);
          static int t_Transition_set__source(t_Transition *self, PyObject *arg, void *data);

          static PyGetSetDef t_Transition__fields_[] = {
            DECLARE_GETSET_FIELD(t_Transition, dest),
            DECLARE_GETSET_FIELD(t_Transition, max),
            DECLARE_GETSET_FIELD(t_Transition, min),
            DECLARE_GETSET_FIELD(t_Transition, source),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_Transition__methods_[] = {
            DECLARE_METHOD(t_Transition, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_Transition, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_Transition, toString, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          static PyType_Slot PY_TYPE_SLOTS(Transition)[] = {
            { Py_tp_methods, t_Transition__methods_ },
            { Py_tp_init, (void *) t_Transition_init_ },
            { Py_tp_getset, t_Transition__fields_ },
            { 0, NULL }
          };

          static PyType_Def *PY_TYPE_BASES(Transition)[] = {
            &PY_TYPE_DEF(::java::lang::Object),
            NULL
          };

          DEFINE_TYPE(Transition, t_Transition, Transition);

          void t_Transition::install(PyObject *module)
          {
            installType(&PY_TYPE(Transition), &PY_TYPE_DEF(Transition), module, "Transition", 0);
          }

          void t_Transition::initialize(PyObject *module)
          {
            PyObject_SetAttrString((PyObject *) PY_TYPE(Transition), "class_", make_descriptor(Transition::initializeClass, 1));
            PyObject_SetAttrString((PyObject *) PY_TYPE(Transition), "wrapfn_", make_descriptor(t_Transition::wrap_jobject));
            PyObject_SetAttrString((PyObject *) PY_TYPE(Transition), "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_Transition_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, Transition::initializeClass, 1)))
              return NULL;
            return t_Transition::wrap_Object(Transition(((t_Transition *) arg)->object.this$));
          }
          static PyObject *t_Transition_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, Transition::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_Transition_init_(t_Transition *self, PyObject *args, PyObject *kwds)
          {
            Transition object((jobject) NULL);

            INT_CALL(object = Transition());
            self->object = object;

            return 0;
          }

          static PyObject *t_Transition_toString(t_Transition *self, PyObject *args)
          {
            ::java::lang::String result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.toString());
              return j2p(result);
            }

            return callSuper(PY_TYPE(Transition), (PyObject *) self, "toString", args, 2);
          }

          static PyObject *t_Transition_get__dest(t_Transition *self, void *data)
          {
            jint value;
            OBJ_CALL(value = self->object._get_dest());
            return PyLong_FromLong((long) value);
          }
          static int t_Transition_set__dest(t_Transition *self, PyObject *arg, void *data)
          {
            jint value;
            if (!parseArg(arg, "I", &value))
            {
              INT_CALL(self->object._set_dest(value));
              return 0;
            }
            PyErr_SetArgsError((PyObject *) self, "dest", arg);
            return -1;
          }

          static PyObject *t_Transition_get__max(t_Transition *self, void *data)
          {
            jint value;
            OBJ_CALL(value = self->object._get_max());
            return PyLong_FromLong((long) value);
          }
          static int t_Transition_set__max(t_Transition *self, PyObject *arg, void *data)
          {
            jint value;
            if (!parseArg(arg, "I", &value))
            {
              INT_CALL(self->object._set_max(value));
              return 0;
            }
            PyErr_SetArgsError((PyObject *) self, "max", arg);
            return -1;
          }

          static PyObject *t_Transition_get__min(t_Transition *self, void *data)
          {
            jint value;
            OBJ_CALL(value = self->object._get_min());
            return PyLong_FromLong((long) value);
          }
          static int t_Transition_set__min(t_Transition *self, PyObject *arg, void *data)
          {
            jint value;
            if (!parseArg(arg, "I", &value))
            {
              INT_CALL(self->object._set_min(value));
              return 0;
            }
            PyErr_SetArgsError((PyObject *) self, "min", arg);
            return -1;
          }

          static PyObject *t_Transition_get__source(t_Transition *self, void *data)
          {
            jint value;
            OBJ_CALL(value = self->object._get_source());
            return PyLong_FromLong((long) value);
          }
          static int t_Transition_set__source(t_Transition *self, PyObject *arg, void *data)
          {
            jint value;
            if (!parseArg(arg, "I", &value))
            {
              INT_CALL(self->object._set_source(value));
              return 0;
            }
            PyErr_SetArgsError((PyObject *) self, "source", arg);
            return -1;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queryparser/classic/FastCharStream.h"
#include "java/lang/Class.h"
#include "java/lang/String.h"
#include "java/io/IOException.h"
#include "java/io/Reader.h"
#include "org/apache/lucene/queryparser/classic/CharStream.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace classic {

          ::java::lang::Class *FastCharStream::class$ = NULL;
          jmethodID *FastCharStream::mids$ = NULL;
          bool FastCharStream::live$ = false;

          jclass FastCharStream::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/queryparser/classic/FastCharStream");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_b2f3c57f5e6eb3f2] = env->getMethodID(cls, "<init>", "(Ljava/io/Reader;)V");
              mids$[mid_BeginToken_8eea1dd85c3239c3] = env->getMethodID(cls, "BeginToken", "()C");
              mids$[mid_Done_f2cc1bce94666404] = env->getMethodID(cls, "Done", "()V");
              mids$[mid_GetImage_db9b55ba01e03e4b] = env->getMethodID(cls, "GetImage", "()Ljava/lang/String;");
              mids$[mid_GetSuffix_4a35a620830b94db] = env->getMethodID(cls, "GetSuffix", "(I)[C");
              mids$[mid_backup_040c4cd0390c5aff] = env->getMethodID(cls, "backup", "(I)V");
              mids$[mid_getBeginColumn_9972fcc56b44e79d] = env->getMethodID(cls, "getBeginColumn", "()I");
              mids$[mid_getBeginLine_9972fcc56b44e79d] = env->getMethodID(cls, "getBeginLine", "()I");
              mids$[mid_getColumn_9972fcc56b44e79d] = env->getMethodID(cls, "getColumn", "()I");
              mids$[mid_getEndColumn_9972fcc56b44e79d] = env->getMethodID(cls, "getEndColumn", "()I");
              mids$[mid_getEndLine_9972fcc56b44e79d] = env->getMethodID(cls, "getEndLine", "()I");
              mids$[mid_getLine_9972fcc56b44e79d] = env->getMethodID(cls, "getLine", "()I");
              mids$[mid_readChar_8eea1dd85c3239c3] = env->getMethodID(cls, "readChar", "()C");

              class$ = new ::java::lang::Class(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          FastCharStream::FastCharStream(const ::java::io::Reader & a0) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_b2f3c57f5e6eb3f2, a0.this$)) {}

          jchar FastCharStream::BeginToken() const
          {
            return env->callCharMethod(this$, mids$[mid_BeginToken_8eea1dd85c3239c3]);
          }

          void FastCharStream::Done() const
          {
            env->callVoidMethod(this$, mids$[mid_Done_f2cc1bce94666404]);
          }

          ::java::lang::String FastCharStream::GetImage() const
          {
            return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_GetImage_db9b55ba01e03e4b]));
          }

          JArray< jchar > FastCharStream::GetSuffix(jint a0) const
          {
            return JArray< jchar >(env->callObjectMethod(this$, mids$[mid_GetSuffix_4a35a620830b94db], a0));
          }

          void FastCharStream::backup(jint a0) const
          {
            env->callVoidMethod(this$, mids$[mid_backup_040c4cd0390c5aff], a0);
          }

          jint FastCharStream::getBeginColumn() const
          {
            return env->callIntMethod(this$, mids$[mid_getBeginColumn_9972fcc56b44e79d]);
          }

          jint FastCharStream::getBeginLine() const
          {
            return env->callIntMethod(this$, mids$[mid_getBeginLine_9972fcc56b44e79d]);
          }

          jint FastCharStream::getColumn() const
          {
            return env->callIntMethod(this$, mids$[mid_getColumn_9972fcc56b44e79d]);
          }

          jint FastCharStream::getEndColumn() const
          {
            return env->callIntMethod(this$, mids$[mid_getEndColumn_9972fcc56b44e79d]);
          }

          jint FastCharStream::getEndLine() const
          {
            return env->callIntMethod(this$, mids$[mid_getEndLine_9972fcc56b44e79d]);
          }

          jint FastCharStream::getLine() const
          {
            return env->callIntMethod(this$, mids$[mid_getLine_9972fcc56b44e79d]);
          }

          jchar FastCharStream::readChar() const
          {
            return env->callCharMethod(this$, mids$[mid_readChar_8eea1dd85c3239c3]);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace classic {
          static PyObject *t_FastCharStream_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_FastCharStream_instance_(PyTypeObject *type, PyObject *arg);
          static int t_FastCharStream_init_(t_FastCharStream *self, PyObject *args, PyObject *kwds);
          static PyObject *t_FastCharStream_BeginToken(t_FastCharStream *self);
          static PyObject *t_FastCharStream_Done(t_FastCharStream *self);
          static PyObject *t_FastCharStream_GetImage(t_FastCharStream *self);
          static PyObject *t_FastCharStream_GetSuffix(t_FastCharStream *self, PyObject *arg);
          static PyObject *t_FastCharStream_backup(t_FastCharStream *self, PyObject *arg);
          static PyObject *t_FastCharStream_getBeginColumn(t_FastCharStream *self);
          static PyObject *t_FastCharStream_getBeginLine(t_FastCharStream *self);
          static PyObject *t_FastCharStream_getColumn(t_FastCharStream *self);
          static PyObject *t_FastCharStream_getEndColumn(t_FastCharStream *self);
          static PyObject *t_FastCharStream_getEndLine(t_FastCharStream *self);
          static PyObject *t_FastCharStream_getLine(t_FastCharStream *self);
          static PyObject *t_FastCharStream_readChar(t_FastCharStream *self);
          static PyObject *t_FastCharStream_get__beginColumn(t_FastCharStream *self, void *data);
          static PyObject *t_FastCharStream_get__beginLine(t_FastCharStream *self, void *data);
          static PyObject *t_FastCharStream_get__column(t_FastCharStream *self, void *data);
          static PyObject *t_FastCharStream_get__endColumn(t_FastCharStream *self, void *data);
          static PyObject *t_FastCharStream_get__endLine(t_FastCharStream *self, void *data);
          static PyObject *t_FastCharStream_get__line(t_FastCharStream *self, void *data);
          static PyGetSetDef t_FastCharStream__fields_[] = {
            DECLARE_GET_FIELD(t_FastCharStream, beginColumn),
            DECLARE_GET_FIELD(t_FastCharStream, beginLine),
            DECLARE_GET_FIELD(t_FastCharStream, column),
            DECLARE_GET_FIELD(t_FastCharStream, endColumn),
            DECLARE_GET_FIELD(t_FastCharStream, endLine),
            DECLARE_GET_FIELD(t_FastCharStream, line),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_FastCharStream__methods_[] = {
            DECLARE_METHOD(t_FastCharStream, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_FastCharStream, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_FastCharStream, BeginToken, METH_NOARGS),
            DECLARE_METHOD(t_FastCharStream, Done, METH_NOARGS),
            DECLARE_METHOD(t_FastCharStream, GetImage, METH_NOARGS),
            DECLARE_METHOD(t_FastCharStream, GetSuffix, METH_O),
            DECLARE_METHOD(t_FastCharStream, backup, METH_O),
            DECLARE_METHOD(t_FastCharStream, getBeginColumn, METH_NOARGS),
            DECLARE_METHOD(t_FastCharStream, getBeginLine, METH_NOARGS),
            DECLARE_METHOD(t_FastCharStream, getColumn, METH_NOARGS),
            DECLARE_METHOD(t_FastCharStream, getEndColumn, METH_NOARGS),
            DECLARE_METHOD(t_FastCharStream, getEndLine, METH_NOARGS),
            DECLARE_METHOD(t_FastCharStream, getLine, METH_NOARGS),
            DECLARE_METHOD(t_FastCharStream, readChar, METH_NOARGS),
            { NULL, NULL, 0, NULL }
          };

          static PyType_Slot PY_TYPE_SLOTS(FastCharStream)[] = {
            { Py_tp_methods, t_FastCharStream__methods_ },
            { Py_tp_init, (void *) t_FastCharStream_init_ },
            { Py_tp_getset, t_FastCharStream__fields_ },
            { 0, NULL }
          };

          static PyType_Def *PY_TYPE_BASES(FastCharStream)[] = {
            &PY_TYPE_DEF(::java::lang::Object),
            NULL
          };

          DEFINE_TYPE(FastCharStream, t_FastCharStream, FastCharStream);

          void t_FastCharStream::install(PyObject *module)
          {
            installType(&PY_TYPE(FastCharStream), &PY_TYPE_DEF(FastCharStream), module, "FastCharStream", 0);
          }

          void t_FastCharStream::initialize(PyObject *module)
          {
            PyObject_SetAttrString((PyObject *) PY_TYPE(FastCharStream), "class_", make_descriptor(FastCharStream::initializeClass, 1));
            PyObject_SetAttrString((PyObject *) PY_TYPE(FastCharStream), "wrapfn_", make_descriptor(t_FastCharStream::wrap_jobject));
            PyObject_SetAttrString((PyObject *) PY_TYPE(FastCharStream), "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_FastCharStream_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, FastCharStream::initializeClass, 1)))
              return NULL;
            return t_FastCharStream::wrap_Object(FastCharStream(((t_FastCharStream *) arg)->object.this$));
          }
          static PyObject *t_FastCharStream_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, FastCharStream::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_FastCharStream_init_(t_FastCharStream *self, PyObject *args, PyObject *kwds)
          {
            ::java::io::Reader a0((jobject) NULL);
            FastCharStream object((jobject) NULL);

            if (!parseArgs(args, "k", ::java::io::Reader::initializeClass, &a0))
            {
              INT_CALL(object = FastCharStream(a0));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_FastCharStream_BeginToken(t_FastCharStream *self)
          {
            jchar result;
            OBJ_CALL(result = self->object.BeginToken());
            return c2p(result);
          }

          static PyObject *t_FastCharStream_Done(t_FastCharStream *self)
          {
            OBJ_CALL(self->object.Done());
            Py_RETURN_NONE;
          }

          static PyObject *t_FastCharStream_GetImage(t_FastCharStream *self)
          {
            ::java::lang::String result((jobject) NULL);
            OBJ_CALL(result = self->object.GetImage());
            return j2p(result);
          }

          static PyObject *t_FastCharStream_GetSuffix(t_FastCharStream *self, PyObject *arg)
          {
            jint a0;
            JArray< jchar > result((jobject) NULL);

            if (!parseArg(arg, "I", &a0))
            {
              OBJ_CALL(result = self->object.GetSuffix(a0));
              return result.wrap();
            }

            PyErr_SetArgsError((PyObject *) self, "GetSuffix", arg);
            return NULL;
          }

          static PyObject *t_FastCharStream_backup(t_FastCharStream *self, PyObject *arg)
          {
            jint a0;

            if (!parseArg(arg, "I", &a0))
            {
              OBJ_CALL(self->object.backup(a0));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError((PyObject *) self, "backup", arg);
            return NULL;
          }

          static PyObject *t_FastCharStream_getBeginColumn(t_FastCharStream *self)
          {
            jint result;
            OBJ_CALL(result = self->object.getBeginColumn());
            return PyLong_FromLong((long) result);
          }

          static PyObject *t_FastCharStream_getBeginLine(t_FastCharStream *self)
          {
            jint result;
            OBJ_CALL(result = self->object.getBeginLine());
            return PyLong_FromLong((long) result);
          }

          static PyObject *t_FastCharStream_getColumn(t_FastCharStream *self)
          {
            jint result;
            OBJ_CALL(result = self->object.getColumn());
            return PyLong_FromLong((long) result);
          }

          static PyObject *t_FastCharStream_getEndColumn(t_FastCharStream *self)
          {
            jint result;
            OBJ_CALL(result = self->object.getEndColumn());
            return PyLong_FromLong((long) result);
          }

          static PyObject *t_FastCharStream_getEndLine(t_FastCharStream *self)
          {
            jint result;
            OBJ_CALL(result = self->object.getEndLine());
            return PyLong_FromLong((long) result);
          }

          static PyObject *t_FastCharStream_getLine(t_FastCharStream *self)
          {
            jint result;
            OBJ_CALL(result = self->object.getLine());
            return PyLong_FromLong((long) result);
          }

          static PyObject *t_FastCharStream_readChar(t_FastCharStream *self)
          {
            jchar result;
            OBJ_CALL(result = self->object.readChar());
            return c2p(result);
          }

          static PyObject *t_FastCharStream_get__beginColumn(t_FastCharStream *self, void *data)
          {
            jint value;
            OBJ_CALL(value = self->object.getBeginColumn());
            return PyLong_FromLong((long) value);
          }

          static PyObject *t_FastCharStream_get__beginLine(t_FastCharStream *self, void *data)
          {
            jint value;
            OBJ_CALL(value = self->object.getBeginLine());
            return PyLong_FromLong((long) value);
          }

          static PyObject *t_FastCharStream_get__column(t_FastCharStream *self, void *data)
          {
            jint value;
            OBJ_CALL(value = self->object.getColumn());
            return PyLong_FromLong((long) value);
          }

          static PyObject *t_FastCharStream_get__endColumn(t_FastCharStream *self, void *data)
          {
            jint value;
            OBJ_CALL(value = self->object.getEndColumn());
            return PyLong_FromLong((long) value);
          }

          static PyObject *t_FastCharStream_get__endLine(t_FastCharStream *self, void *data)
          {
            jint value;
            OBJ_CALL(value = self->object.getEndLine());
            return PyLong_FromLong((long) value);
          }

          static PyObject *t_FastCharStream_get__line(t_FastCharStream *self, void *data)
          {
            jint value;
            OBJ_CALL(value = self->object.getLine());
            return PyLong_FromLong((long) value);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "java/io/Writer.h"
#include "java/lang/Class.h"
#include "java/io/Flushable.h"
#include "java/io/Closeable.h"
#include "java/lang/CharSequence.h"
#include "java/lang/String.h"
#include "java/io/IOException.h"
#include "java/lang/Appendable.h"
#include "java/io/Writer.h"
#include "JArray.h"

namespace java {
  namespace io {

    ::java::lang::Class *Writer::class$ = NULL;
    jmethodID *Writer::mids$ = NULL;
    bool Writer::live$ = false;

    jclass Writer::initializeClass(bool getOnly)
    {
      if (getOnly)
        return (jclass) (live$ ? class$->this$ : NULL);
      if (class$ == NULL)
      {
        jclass cls = (jclass) env->findClass("java/io/Writer");

        mids$ = new jmethodID[max_mid];
        mids$[mid_append_71d1072f4440a85a] = env->getMethodID(cls, "append", "(C)Ljava/io/Writer;");
        mids$[mid_append_dfe40db61c173c98] = env->getMethodID(cls, "append", "(Ljava/lang/CharSequence;)Ljava/io/Writer;");
        mids$[mid_append_f5fb2d6ae8419235] = env->getMethodID(cls, "append", "(Ljava/lang/CharSequence;II)Ljava/io/Writer;");
        mids$[mid_close_f2cc1bce94666404] = env->getMethodID(cls, "close", "()V");
        mids$[mid_flush_f2cc1bce94666404] = env->getMethodID(cls, "flush", "()V");
        mids$[mid_write_82dffe1ba55ed767] = env->getMethodID(cls, "write", "([C)V");
        mids$[mid_write_9fd2eb66a64e6f0f] = env->getMethodID(cls, "write", "(Ljava/lang/String;)V");
        mids$[mid_write_040c4cd0390c5aff] = env->getMethodID(cls, "write", "(I)V");
        mids$[mid_write_d5128be76a214037] = env->getMethodID(cls, "write", "([CII)V");
        mids$[mid_write_08af6957f9159d4d] = env->getMethodID(cls, "write", "(Ljava/lang/String;II)V");

        class$ = new ::java::lang::Class(cls);
        live$ = true;
      }
      return (jclass) class$->this$;
    }

    Writer Writer::append(jchar a0) const
    {
      return Writer(env->callObjectMethod(this$, mids$[mid_append_71d1072f4440a85a], a0));
    }

    Writer Writer::append(const ::java::lang::CharSequence & a0) const
    {
      return Writer(env->callObjectMethod(this$, mids$[mid_append_dfe40db61c173c98], a0.this$));
    }

    Writer Writer::append(const ::java::lang::CharSequence & a0, jint a1, jint a2) const
    {
      return Writer(env->callObjectMethod(this$, mids$[mid_append_f5fb2d6ae8419235], a0.this$, a1, a2));
    }

    void Writer::close() const
    {
      env->callVoidMethod(this$, mids$[mid_close_f2cc1bce94666404]);
    }

    void Writer::flush() const
    {
      env->callVoidMethod(this$, mids$[mid_flush_f2cc1bce94666404]);
    }

    void Writer::write(const JArray< jchar > & a0) const
    {
      env->callVoidMethod(this$, mids$[mid_write_82dffe1ba55ed767], a0.this$);
    }

    void Writer::write(const ::java::lang::String & a0) const
    {
      env->callVoidMethod(this$, mids$[mid_write_9fd2eb66a64e6f0f], a0.this$);
    }

    void Writer::write(jint a0) const
    {
      env->callVoidMethod(this$, mids$[mid_write_040c4cd0390c5aff], a0);
    }

    void Writer::write(const JArray< jchar > & a0, jint a1, jint a2) const
    {
      env->callVoidMethod(this$, mids$[mid_write_d5128be76a214037], a0.this$, a1, a2);
    }

    void Writer::write(const ::java::lang::String & a0, jint a1, jint a2) const
    {
      env->callVoidMethod(this$, mids$[mid_write_08af6957f9159d4d], a0.this$, a1, a2);
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace java {
  namespace io {
    static PyObject *t_Writer_cast_(PyTypeObject *type, PyObject *arg);
    static PyObject *t_Writer_instance_(PyTypeObject *type, PyObject *arg);
    static PyObject *t_Writer_append(t_Writer *self, PyObject *args);
    static PyObject *t_Writer_close(t_Writer *self);
    static PyObject *t_Writer_flush(t_Writer *self);
    static PyObject *t_Writer_write(t_Writer *self, PyObject *args);

    static PyMethodDef t_Writer__methods_[] = {
      DECLARE_METHOD(t_Writer, cast_, METH_O | METH_CLASS),
      DECLARE_METHOD(t_Writer, instance_, METH_O | METH_CLASS),
      DECLARE_METHOD(t_Writer, append, METH_VARARGS),
      DECLARE_METHOD(t_Writer, close, METH_NOARGS),
      DECLARE_METHOD(t_Writer, flush, METH_NOARGS),
      DECLARE_METHOD(t_Writer, write, METH_VARARGS),
      { NULL, NULL, 0, NULL }
    };

    static PyType_Slot PY_TYPE_SLOTS(Writer)[] = {
      { Py_tp_methods, t_Writer__methods_ },
      { Py_tp_init, (void *) abstract_init },
      { 0, NULL }
    };

    static PyType_Def *PY_TYPE_BASES(Writer)[] = {
      &PY_TYPE_DEF(::java::lang::Object),
      NULL
    };

    DEFINE_TYPE(Writer, t_Writer, Writer);

    void t_Writer::install(PyObject *module)
    {
      installType(&PY_TYPE(Writer), &PY_TYPE_DEF(Writer), module, "Writer", 0);
    }

    void t_Writer::initialize(PyObject *module)
    {
      PyObject_SetAttrString((PyObject *) PY_TYPE(Writer), "class_", make_descriptor(Writer::initializeClass, 1));
      PyObject_SetAttrString((PyObject *) PY_TYPE(Writer), "wrapfn_", make_descriptor(t_Writer::wrap_jobject));
      PyObject_SetAttrString((PyObject *) PY_TYPE(Writer), "boxfn_", make_descriptor(boxObject));
    }

    static PyObject *t_Writer_cast_(PyTypeObject *type, PyObject *arg)
    {
      if (!(arg = castCheck(arg, Writer::initializeClass, 1)))
        return NULL;
      return t_Writer::wrap_Object(Writer(((t_Writer *) arg)->object.this$));
    }
    static PyObject *t_Writer_instance_(PyTypeObject *type, PyObject *arg)
    {
      if (!castCheck(arg, Writer::initializeClass, 0))
        Py_RETURN_FALSE;
      Py_RETURN_TRUE;
    }

    static PyObject *t_Writer_append(t_Writer *self, PyObject *args)
    {
      switch (PyTuple_GET_SIZE(args)) {
       case 1:
        {
          jchar a0;
          Writer result((jobject) NULL);

          if (!parseArgs(args, "C", &a0))
          {
            OBJ_CALL(result = self->object.append(a0));
            return t_Writer::wrap_Object(result);
          }
        }
        {
          ::java::lang::CharSequence a0((jobject) NULL);
          Writer result((jobject) NULL);

          if (!parseArgs(args, "O", ::java::lang::PY_TYPE(CharSequence), &a0))
          {
            OBJ_CALL(result = self->object.append(a0));
            return t_Writer::wrap_Object(result);
          }
        }
        break;
       case 3:
        {
          ::java::lang::CharSequence a0((jobject) NULL);
          jint a1;
          jint a2;
          Writer result((jobject) NULL);

          if (!parseArgs(args, "OII", ::java::lang::PY_TYPE(CharSequence), &a0, &a1, &a2))
          {
            OBJ_CALL(result = self->object.append(a0, a1, a2));
            return t_Writer::wrap_Object(result);
          }
        }
      }

      PyErr_SetArgsError((PyObject *) self, "append", args);
      return NULL;
    }

    static PyObject *t_Writer_close(t_Writer *self)
    {
      OBJ_CALL(self->object.close());
      Py_RETURN_NONE;
    }

    static PyObject *t_Writer_flush(t_Writer *self)
    {
      OBJ_CALL(self->object.flush());
      Py_RETURN_NONE;
    }

    static PyObject *t_Writer_write(t_Writer *self, PyObject *args)
    {
      switch (PyTuple_GET_SIZE(args)) {
       case 1:
        {
          JArray< jchar > a0((jobject) NULL);

          if (!parseArgs(args, "[C", &a0))
          {
            OBJ_CALL(self->object.write(a0));
            Py_RETURN_NONE;
          }
        }
        {
          ::java::lang::String a0((jobject) NULL);

          if (!parseArgs(args, "s", &a0))
          {
            OBJ_CALL(self->object.write(a0));
            Py_RETURN_NONE;
          }
        }
        {
          jint a0;

          if (!parseArgs(args, "I", &a0))
          {
            OBJ_CALL(self->object.write(a0));
            Py_RETURN_NONE;
          }
        }
        break;
       case 3:
        {
          JArray< jchar > a0((jobject) NULL);
          jint a1;
          jint a2;

          if (!parseArgs(args, "[CII", &a0, &a1, &a2))
          {
            OBJ_CALL(self->object.write(a0, a1, a2));
            Py_RETURN_NONE;
          }
        }
        {
          ::java::lang::String a0((jobject) NULL);
          jint a1;
          jint a2;

          if (!parseArgs(args, "sII", &a0, &a1, &a2))
          {
            OBJ_CALL(self->object.write(a0, a1, a2));
            Py_RETURN_NONE;
          }
        }
      }

      PyErr_SetArgsError((PyObject *) self, "write", args);
      return NULL;
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/util/BytesRefArray.h"
#include "java/util/Comparator.h"
#include "org/apache/lucene/util/BytesRefArray$IndexedBytesRefIterator.h"
#include "org/apache/lucene/util/BytesRefBuilder.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/util/BytesRefArray$SortState.h"
#include "org/apache/lucene/util/BytesRefIterator.h"
#include "org/apache/lucene/util/BytesRef.h"
#include "org/apache/lucene/util/Counter.h"
#include "java/util/function/IntBinaryOperator.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {

        ::java::lang::Class *BytesRefArray::class$ = NULL;
        jmethodID *BytesRefArray::mids$ = NULL;
        bool BytesRefArray::live$ = false;

        jclass BytesRefArray::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/util/BytesRefArray");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_302fe14a8fa069e1] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/util/Counter;)V");
            mids$[mid_append_1c2e5fa34f4312de] = env->getMethodID(cls, "append", "(Lorg/apache/lucene/util/BytesRef;)I");
            mids$[mid_clear_f2cc1bce94666404] = env->getMethodID(cls, "clear", "()V");
            mids$[mid_get_74aaffb57279d3cf] = env->getMethodID(cls, "get", "(Lorg/apache/lucene/util/BytesRefBuilder;I)Lorg/apache/lucene/util/BytesRef;");
            mids$[mid_iterator_5416289139cf0b84] = env->getMethodID(cls, "iterator", "()Lorg/apache/lucene/util/BytesRefIterator;");
            mids$[mid_iterator_6f87a07b02eae45b] = env->getMethodID(cls, "iterator", "(Lorg/apache/lucene/util/BytesRefArray$SortState;)Lorg/apache/lucene/util/BytesRefArray$IndexedBytesRefIterator;");
            mids$[mid_iterator_e90bfd70539a9be0] = env->getMethodID(cls, "iterator", "(Ljava/util/Comparator;)Lorg/apache/lucene/util/BytesRefIterator;");
            mids$[mid_size_9972fcc56b44e79d] = env->getMethodID(cls, "size", "()I");
            mids$[mid_sort_101af92a509ec334] = env->getMethodID(cls, "sort", "(Ljava/util/Comparator;Ljava/util/function/IntBinaryOperator;)Lorg/apache/lucene/util/BytesRefArray$SortState;");

            class$ = new ::java::lang::Class(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        BytesRefArray::BytesRefArray(const ::org::apache::lucene::util::Counter & a0) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_302fe14a8fa069e1, a0.this$)) {}

        jint BytesRefArray::append(const ::org::apache::lucene::util::BytesRef & a0) const
        {
          return env->callIntMethod(this$, mids$[mid_append_1c2e5fa34f4312de], a0.this$);
        }

        void BytesRefArray::clear() const
        {
          env->callVoidMethod(this$, mids$[mid_clear_f2cc1bce94666404]);
        }

        ::org::apache::lucene::util::BytesRef BytesRefArray::get(const ::org::apache::lucene::util::BytesRefBuilder & a0, jint a1) const
        {
          return ::org::apache::lucene::util::BytesRef(env->callObjectMethod(this$, mids$[mid_get_74aaffb57279d3cf], a0.this$, a1));
        }

        ::org::apache::lucene::util::BytesRefIterator BytesRefArray::iterator() const
        {
          return ::org::apache::lucene::util::BytesRefIterator(env->callObjectMethod(this$, mids$[mid_iterator_5416289139cf0b84]));
        }

        ::org::apache::lucene::util::BytesRefArray$IndexedBytesRefIterator BytesRefArray::iterator(const ::org::apache::lucene::util::BytesRefArray$SortState & a0) const
        {
          return ::org::apache::lucene::util::BytesRefArray$IndexedBytesRefIterator(env->callObjectMethod(this$, mids$[mid_iterator_6f87a07b02eae45b], a0.this$));
        }

        ::org::apache::lucene::util::BytesRefIterator BytesRefArray::iterator(const ::java::util::Comparator & a0) const
        {
          return ::org::apache::lucene::util::BytesRefIterator(env->callObjectMethod(this$, mids$[mid_iterator_e90bfd70539a9be0], a0.this$));
        }

        jint BytesRefArray::size() const
        {
          return env->callIntMethod(this$, mids$[mid_size_9972fcc56b44e79d]);
        }

        ::org::apache::lucene::util::BytesRefArray$SortState BytesRefArray::sort(const ::java::util::Comparator & a0, const ::java::util::function::IntBinaryOperator & a1) const
        {
          return ::org::apache::lucene::util::BytesRefArray$SortState(env->callObjectMethod(this$, mids$[mid_sort_101af92a509ec334], a0.this$, a1.this$));
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        static PyObject *t_BytesRefArray_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_BytesRefArray_instance_(PyTypeObject *type, PyObject *arg);
        static int t_BytesRefArray_init_(t_BytesRefArray *self, PyObject *args, PyObject *kwds);
        static PyObject *t_BytesRefArray_append(t_BytesRefArray *self, PyObject *arg);
        static PyObject *t_BytesRefArray_clear(t_BytesRefArray *self);
        static PyObject *t_BytesRefArray_get(t_BytesRefArray *self, PyObject *args);
        static PyObject *t_BytesRefArray_iterator(t_BytesRefArray *self, PyObject *args);
        static PyObject *t_BytesRefArray_size(t_BytesRefArray *self);
        static PyObject *t_BytesRefArray_sort(t_BytesRefArray *self, PyObject *args);

        static PyMethodDef t_BytesRefArray__methods_[] = {
          DECLARE_METHOD(t_BytesRefArray, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_BytesRefArray, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_BytesRefArray, append, METH_O),
          DECLARE_METHOD(t_BytesRefArray, clear, METH_NOARGS),
          DECLARE_METHOD(t_BytesRefArray, get, METH_VARARGS),
          DECLARE_METHOD(t_BytesRefArray, iterator, METH_VARARGS),
          DECLARE_METHOD(t_BytesRefArray, size, METH_NOARGS),
          DECLARE_METHOD(t_BytesRefArray, sort, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        static PyType_Slot PY_TYPE_SLOTS(BytesRefArray)[] = {
          { Py_tp_methods, t_BytesRefArray__methods_ },
          { Py_tp_init, (void *) t_BytesRefArray_init_ },
          { 0, NULL }
        };

        static PyType_Def *PY_TYPE_BASES(BytesRefArray)[] = {
          &PY_TYPE_DEF(::java::lang::Object),
          NULL
        };

        DEFINE_TYPE(BytesRefArray, t_BytesRefArray, BytesRefArray);

        void t_BytesRefArray::install(PyObject *module)
        {
          installType(&PY_TYPE(BytesRefArray), &PY_TYPE_DEF(BytesRefArray), module, "BytesRefArray", 0);
          PyObject_SetAttrString((PyObject *) PY_TYPE(BytesRefArray), "IndexedBytesRefIterator", make_descriptor(&PY_TYPE_DEF(BytesRefArray$IndexedBytesRefIterator)));
          PyObject_SetAttrString((PyObject *) PY_TYPE(BytesRefArray), "SortState", make_descriptor(&PY_TYPE_DEF(BytesRefArray$SortState)));
        }

        void t_BytesRefArray::initialize(PyObject *module)
        {
          PyObject_SetAttrString((PyObject *) PY_TYPE(BytesRefArray), "class_", make_descriptor(BytesRefArray::initializeClass, 1));
          PyObject_SetAttrString((PyObject *) PY_TYPE(BytesRefArray), "wrapfn_", make_descriptor(t_BytesRefArray::wrap_jobject));
          PyObject_SetAttrString((PyObject *) PY_TYPE(BytesRefArray), "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_BytesRefArray_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, BytesRefArray::initializeClass, 1)))
            return NULL;
          return t_BytesRefArray::wrap_Object(BytesRefArray(((t_BytesRefArray *) arg)->object.this$));
        }
        static PyObject *t_BytesRefArray_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, BytesRefArray::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_BytesRefArray_init_(t_BytesRefArray *self, PyObject *args, PyObject *kwds)
        {
          ::org::apache::lucene::util::Counter a0((jobject) NULL);
          BytesRefArray object((jobject) NULL);

          if (!parseArgs(args, "k", ::org::apache::lucene::util::Counter::initializeClass, &a0))
          {
            INT_CALL(object = BytesRefArray(a0));
            self->object = object;
          }
          else
          {
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }

        static PyObject *t_BytesRefArray_append(t_BytesRefArray *self, PyObject *arg)
        {
          ::org::apache::lucene::util::BytesRef a0((jobject) NULL);
          jint result;

          if (!parseArg(arg, "k", ::org::apache::lucene::util::BytesRef::initializeClass, &a0))
          {
            OBJ_CALL(result = self->object.append(a0));
            return PyLong_FromLong((long) result);
          }

          PyErr_SetArgsError((PyObject *) self, "append", arg);
          return NULL;
        }

        static PyObject *t_BytesRefArray_clear(t_BytesRefArray *self)
        {
          OBJ_CALL(self->object.clear());
          Py_RETURN_NONE;
        }

        static PyObject *t_BytesRefArray_get(t_BytesRefArray *self, PyObject *args)
        {
          ::org::apache::lucene::util::BytesRefBuilder a0((jobject) NULL);
          jint a1;
          ::org::apache::lucene::util::BytesRef result((jobject) NULL);

          if (!parseArgs(args, "kI", ::org::apache::lucene::util::BytesRefBuilder::initializeClass, &a0, &a1))
          {
            OBJ_CALL(result = self->object.get(a0, a1));
            return ::org::apache::lucene::util::t_BytesRef::wrap_Object(result);
          }

          PyErr_SetArgsError((PyObject *) self, "get", args);
          return NULL;
        }

        static PyObject *t_BytesRefArray_iterator(t_BytesRefArray *self, PyObject *args)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 0:
            {
              ::org::apache::lucene::util::BytesRefIterator result((jobject) NULL);
              OBJ_CALL(result = self->object.iterator());
              return ::org::apache::lucene::util::t_BytesRefIterator::wrap_Object(result);
            }
            break;
           case 1:
            {
              ::org::apache::lucene::util::BytesRefArray$SortState a0((jobject) NULL);
              ::org::apache::lucene::util::BytesRefArray$IndexedBytesRefIterator result((jobject) NULL);

              if (!parseArgs(args, "k", ::org::apache::lucene::util::BytesRefArray$SortState::initializeClass, &a0))
              {
                OBJ_CALL(result = self->object.iterator(a0));
                return ::org::apache::lucene::util::t_BytesRefArray$IndexedBytesRefIterator::wrap_Object(result);
              }
            }
            {
              ::java::util::Comparator a0((jobject) NULL);
              PyTypeObject **p0;
              ::org::apache::lucene::util::BytesRefIterator result((jobject) NULL);

              if (!parseArgs(args, "K", ::java::util::Comparator::initializeClass, &a0, &p0, ::java::util::t_Comparator::parameters_))
              {
                OBJ_CALL(result = self->object.iterator(a0));
                return ::org::apache::lucene::util::t_BytesRefIterator::wrap_Object(result);
              }
            }
          }

          PyErr_SetArgsError((PyObject *) self, "iterator", args);
          return NULL;
        }

        static PyObject *t_BytesRefArray_size(t_BytesRefArray *self)
        {
          jint result;
          OBJ_CALL(result = self->object.size());
          return PyLong_FromLong((long) result);
        }

        static PyObject *t_BytesRefArray_sort(t_BytesRefArray *self, PyObject *args)
        {
          ::java::util::Comparator a0((jobject) NULL);
          PyTypeObject **p0;
          ::java::util::function::IntBinaryOperator a1((jobject) NULL);
          ::org::apache::lucene::util::BytesRefArray$SortState result((jobject) NULL);

          if (!parseArgs(args, "Kk", ::java::util::Comparator::initializeClass, ::java::util::function::IntBinaryOperator::initializeClass, &a0, &p0, ::java::util::t_Comparator::parameters_, &a1))
          {
            OBJ_CALL(result = self->object.sort(a0, a1));
            return ::org::apache::lucene::util::t_BytesRefArray$SortState::wrap_Object(result);
          }

          PyErr_SetArgsError((PyObject *) self, "sort", args);
          return NULL;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/document/InetAddressRange.h"
#include "java/lang/String.h"
#include "org/apache/lucene/search/Query.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace document {

        ::java::lang::Class *InetAddressRange::class$ = NULL;
        jmethodID *InetAddressRange::mids$ = NULL;
        bool InetAddressRange::live$ = false;
        jint InetAddressRange::BYTES = (jint) 0;

        jclass InetAddressRange::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/document/InetAddressRange");

            class$ = new ::java::lang::Class(cls);
            cls = (jclass) class$->this$;

            BYTES = env->getStaticIntField(cls, "BYTES");
            live$ = true;
          }
          return (jclass) class$->this$;
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace document {
        static PyObject *t_InetAddressRange_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_InetAddressRange_instance_(PyTypeObject *type, PyObject *arg);

        static PyMethodDef t_InetAddressRange__methods_[] = {
          DECLARE_METHOD(t_InetAddressRange, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_InetAddressRange, instance_, METH_O | METH_CLASS),
          { NULL, NULL, 0, NULL }
        };

        static PyType_Slot PY_TYPE_SLOTS(InetAddressRange)[] = {
          { Py_tp_methods, t_InetAddressRange__methods_ },
          { Py_tp_init, (void *) abstract_init },
          { 0, NULL }
        };

        static PyType_Def *PY_TYPE_BASES(InetAddressRange)[] = {
          &PY_TYPE_DEF(::org::apache::lucene::document::Field),
          NULL
        };

        DEFINE_TYPE(InetAddressRange, t_InetAddressRange, InetAddressRange);

        void t_InetAddressRange::install(PyObject *module)
        {
          installType(&PY_TYPE(InetAddressRange), &PY_TYPE_DEF(InetAddressRange), module, "InetAddressRange", 0);
        }

        void t_InetAddressRange::initialize(PyObject *module)
        {
          PyObject_SetAttrString((PyObject *) PY_TYPE(InetAddressRange), "class_", make_descriptor(InetAddressRange::initializeClass, 1));
          PyObject_SetAttrString((PyObject *) PY_TYPE(InetAddressRange), "wrapfn_", make_descriptor(t_InetAddressRange::wrap_jobject));
          PyObject_SetAttrString((PyObject *) PY_TYPE(InetAddressRange), "boxfn_", make_descriptor(boxObject));
          env->getClass(InetAddressRange::initializeClass);
          PyObject_SetAttrString((PyObject *) PY_TYPE(InetAddressRange), "BYTES", make_descriptor(InetAddressRange::BYTES));
        }

        static PyObject *t_InetAddressRange_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, InetAddressRange::initializeClass, 1)))
            return NULL;
          return t_InetAddressRange::wrap_Object(InetAddressRange(((t_InetAddressRange *) arg)->object.this$));
        }
        static PyObject *t_InetAddressRange_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, InetAddressRange::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/store/ByteBuffersDataOutput.h"
#include "java/util/Map.h"
#include "java/util/ArrayList.h"
#include "org/apache/lucene/store/ByteBuffersDataOutput.h"
#include "org/apache/lucene/util/Accountable.h"
#include "java/lang/Class.h"
#include "java/util/function/Consumer.h"
#include "java/util/function/IntFunction.h"
#include "java/lang/String.h"
#include "java/util/Set.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/store/ByteBuffersDataInput.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace store {

        ::java::lang::Class *ByteBuffersDataOutput::class$ = NULL;
        jmethodID *ByteBuffersDataOutput::mids$ = NULL;
        bool ByteBuffersDataOutput::live$ = false;
        jint ByteBuffersDataOutput::DEFAULT_MAX_BITS_PER_BLOCK = (jint) 0;
        jint ByteBuffersDataOutput::DEFAULT_MIN_BITS_PER_BLOCK = (jint) 0;

        jclass ByteBuffersDataOutput::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/store/ByteBuffersDataOutput");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_f2cc1bce94666404] = env->getMethodID(cls, "<init>", "()V");
            mids$[mid_init$_9c778c9bce6694df] = env->getMethodID(cls, "<init>", "(J)V");
            mids$[mid_copyTo_ead2c38342037c59] = env->getMethodID(cls, "copyTo", "(Lorg/apache/lucene/store/DataOutput;)V");
            mids$[mid_newResettableInstance_1829fed7fddcb8b8] = env->getStaticMethodID(cls, "newResettableInstance", "()Lorg/apache/lucene/store/ByteBuffersDataOutput;");
            mids$[mid_ramBytesUsed_2e5ae9edcb9b072f] = env->getMethodID(cls, "ramBytesUsed", "()J");
            mids$[mid_reset_f2cc1bce94666404] = env->getMethodID(cls, "reset", "()V");
            mids$[mid_size_2e5ae9edcb9b072f] = env->getMethodID(cls, "size", "()J");
            mids$[mid_toArrayCopy_cf386cdb1bbd339f] = env->getMethodID(cls, "toArrayCopy", "()[B");
            mids$[mid_toDataInput_bef54df431d4ed45] = env->getMethodID(cls, "toDataInput", "()Lorg/apache/lucene/store/ByteBuffersDataInput;");
            mids$[mid_toString_db9b55ba01e03e4b] = env->getMethodID(cls, "toString", "()Ljava/lang/String;");
            mids$[mid_writeByte_9c36fec3bac1d0c7] = env->getMethodID(cls, "writeByte", "(B)V");
            mids$[mid_writeBytes_9ffdf271836656c4] = env->getMethodID(cls, "writeBytes", "([B)V");
            mids$[mid_writeBytes_2a8b02a5adcbf830] = env->getMethodID(cls, "writeBytes", "([BI)V");
            mids$[mid_writeBytes_43fdd39c09bb2fad] = env->getMethodID(cls, "writeBytes", "([BII)V");
            mids$[mid_writeInt_040c4cd0390c5aff] = env->getMethodID(cls, "writeInt", "(I)V");
            mids$[mid_writeLong_9c778c9bce6694df] = env->getMethodID(cls, "writeLong", "(J)V");
            mids$[mid_writeMapOfStrings_408bd889ee3beae5] = env->getMethodID(cls, "writeMapOfStrings", "(Ljava/util/Map;)V");
            mids$[mid_writeSetOfStrings_d5a4a8d4b806f0ba] = env->getMethodID(cls, "writeSetOfStrings", "(Ljava/util/Set;)V");
            mids$[mid_writeShort_265bc0a0a1840315] = env->getMethodID(cls, "writeShort", "(S)V");
            mids$[mid_writeString_9fd2eb66a64e6f0f] = env->getMethodID(cls, "writeString", "(Ljava/lang/String;)V");

            class$ = new ::java::lang::Class(cls);
            cls = (jclass) class$->this$;

            DEFAULT_MAX_BITS_PER_BLOCK = env->getStaticIntField(cls, "DEFAULT_MAX_BITS_PER_BLOCK");
            DEFAULT_MIN_BITS_PER_BLOCK = env->getStaticIntField(cls, "DEFAULT_MIN_BITS_PER_BLOCK");
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        ByteBuffersDataOutput::ByteBuffersDataOutput() : ::org::apache::lucene::store::DataOutput(env->newObject(initializeClass, &mids$, mid_init$_f2cc1bce94666404)) {}

        ByteBuffersDataOutput::ByteBuffersDataOutput(jlong a0) : ::org::apache::lucene::store::DataOutput(env->newObject(initializeClass, &mids$, mid_init$_9c778c9bce6694df, a0)) {}

        void ByteBuffersDataOutput::copyTo(const ::org::apache::lucene::store::DataOutput & a0) const
        {
          env->callVoidMethod(this$, mids$[mid_copyTo_ead2c38342037c59], a0.this$);
        }

        ByteBuffersDataOutput ByteBuffersDataOutput::newResettableInstance()
        {
          jclass cls = env->getClass(initializeClass);
          return ByteBuffersDataOutput(env->callStaticObjectMethod(cls, mids$[mid_newResettableInstance_1829fed7fddcb8b8]));
        }

        jlong ByteBuffersDataOutput::ramBytesUsed() const
        {
          return env->callLongMethod(this$, mids$[mid_ramBytesUsed_2e5ae9edcb9b072f]);
        }

        void ByteBuffersDataOutput::reset() const
        {
          env->callVoidMethod(this$, mids$[mid_reset_f2cc1bce94666404]);
        }

        jlong ByteBuffersDataOutput::size() const
        {
          return env->callLongMethod(this$, mids$[mid_size_2e5ae9edcb9b072f]);
        }

        JArray< jbyte > ByteBuffersDataOutput::toArrayCopy() const
        {
          return JArray< jbyte >(env->callObjectMethod(this$, mids$[mid_toArrayCopy_cf386cdb1bbd339f]));
        }

        ::org::apache::lucene::store::ByteBuffersDataInput ByteBuffersDataOutput::toDataInput() const
        {
          return ::org::apache::lucene::store::ByteBuffersDataInput(env->callObjectMethod(this$, mids$[mid_toDataInput_bef54df431d4ed45]));
        }

        ::java::lang::String ByteBuffersDataOutput::toString() const
        {
          return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_db9b55ba01e03e4b]));
        }

        void ByteBuffersDataOutput::writeByte(jbyte a0) const
        {
          env->callVoidMethod(this$, mids$[mid_writeByte_9c36fec3bac1d0c7], a0);
        }

        void ByteBuffersDataOutput::writeBytes(const JArray< jbyte > & a0) const
        {
          env->callVoidMethod(this$, mids$[mid_writeBytes_9ffdf271836656c4], a0.this$);
        }

        void ByteBuffersDataOutput::writeBytes(const JArray< jbyte > & a0, jint a1) const
        {
          env->callVoidMethod(this$, mids$[mid_writeBytes_2a8b02a5adcbf830], a0.this$, a1);
        }

        void ByteBuffersDataOutput::writeBytes(const JArray< jbyte > & a0, jint a1, jint a2) const
        {
          env->callVoidMethod(this$, mids$[mid_writeBytes_43fdd39c09bb2fad], a0.this$, a1, a2);
        }

        void ByteBuffersDataOutput::writeInt(jint a0) const
        {
          env->callVoidMethod(this$, mids$[mid_writeInt_040c4cd0390c5aff], a0);
        }

        void ByteBuffersDataOutput::writeLong(jlong a0) const
        {
          env->callVoidMethod(this$, mids$[mid_writeLong_9c778c9bce6694df], a0);
        }

        void ByteBuffersDataOutput::writeMapOfStrings(const ::java::util::Map & a0) const
        {
          env->callVoidMethod(this$, mids$[mid_writeMapOfStrings_408bd889ee3beae5], a0.this$);
        }

        void ByteBuffersDataOutput::writeSetOfStrings(const ::java::util::Set & a0) const
        {
          env->callVoidMethod(this$, mids$[mid_writeSetOfStrings_d5a4a8d4b806f0ba], a0.this$);
        }

        void ByteBuffersDataOutput::writeShort(jshort a0) const
        {
          env->callVoidMethod(this$, mids$[mid_writeShort_265bc0a0a1840315], a0);
        }

        void ByteBuffersDataOutput::writeString(const ::java::lang::String & a0) const
        {
          env->callVoidMethod(this$, mids$[mid_writeString_9fd2eb66a64e6f0f], a0.this$);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"
#include "org/apache/lucene/store/ByteBuffersDataOutput$ByteBufferRecycler.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace store {
        static PyObject *t_ByteBuffersDataOutput_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_ByteBuffersDataOutput_instance_(PyTypeObject *type, PyObject *arg);
        static int t_ByteBuffersDataOutput_init_(t_ByteBuffersDataOutput *self, PyObject *args, PyObject *kwds);
        static PyObject *t_ByteBuffersDataOutput_copyTo(t_ByteBuffersDataOutput *self, PyObject *arg);
        static PyObject *t_ByteBuffersDataOutput_newResettableInstance(PyTypeObject *type);
        static PyObject *t_ByteBuffersDataOutput_ramBytesUsed(t_ByteBuffersDataOutput *self);
        static PyObject *t_ByteBuffersDataOutput_reset(t_ByteBuffersDataOutput *self);
        static PyObject *t_ByteBuffersDataOutput_size(t_ByteBuffersDataOutput *self);
        static PyObject *t_ByteBuffersDataOutput_toArrayCopy(t_ByteBuffersDataOutput *self);
        static PyObject *t_ByteBuffersDataOutput_toDataInput(t_ByteBuffersDataOutput *self);
        static PyObject *t_ByteBuffersDataOutput_toString(t_ByteBuffersDataOutput *self, PyObject *args);
        static PyObject *t_ByteBuffersDataOutput_writeByte(t_ByteBuffersDataOutput *self, PyObject *args);
        static PyObject *t_ByteBuffersDataOutput_writeBytes(t_ByteBuffersDataOutput *self, PyObject *args);
        static PyObject *t_ByteBuffersDataOutput_writeInt(t_ByteBuffersDataOutput *self, PyObject *args);
        static PyObject *t_ByteBuffersDataOutput_writeLong(t_ByteBuffersDataOutput *self, PyObject *args);
        static PyObject *t_ByteBuffersDataOutput_writeMapOfStrings(t_ByteBuffersDataOutput *self, PyObject *args);
        static PyObject *t_ByteBuffersDataOutput_writeSetOfStrings(t_ByteBuffersDataOutput *self, PyObject *args);
        static PyObject *t_ByteBuffersDataOutput_writeShort(t_ByteBuffersDataOutput *self, PyObject *args);
        static PyObject *t_ByteBuffersDataOutput_writeString(t_ByteBuffersDataOutput *self, PyObject *args);

        static PyMethodDef t_ByteBuffersDataOutput__methods_[] = {
          DECLARE_METHOD(t_ByteBuffersDataOutput, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_ByteBuffersDataOutput, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_ByteBuffersDataOutput, copyTo, METH_O),
          DECLARE_METHOD(t_ByteBuffersDataOutput, newResettableInstance, METH_NOARGS | METH_CLASS),
          DECLARE_METHOD(t_ByteBuffersDataOutput, ramBytesUsed, METH_NOARGS),
          DECLARE_METHOD(t_ByteBuffersDataOutput, reset, METH_NOARGS),
          DECLARE_METHOD(t_ByteBuffersDataOutput, size, METH_NOARGS),
          DECLARE_METHOD(t_ByteBuffersDataOutput, toArrayCopy, METH_NOARGS),
          DECLARE_METHOD(t_ByteBuffersDataOutput, toDataInput, METH_NOARGS),
          DECLARE_METHOD(t_ByteBuffersDataOutput, toString, METH_VARARGS),
          DECLARE_METHOD(t_ByteBuffersDataOutput, writeByte, METH_VARARGS),
          DECLARE_METHOD(t_ByteBuffersDataOutput, writeBytes, METH_VARARGS),
          DECLARE_METHOD(t_ByteBuffersDataOutput, writeInt, METH_VARARGS),
          DECLARE_METHOD(t_ByteBuffersDataOutput, writeLong, METH_VARARGS),
          DECLARE_METHOD(t_ByteBuffersDataOutput, writeMapOfStrings, METH_VARARGS),
          DECLARE_METHOD(t_ByteBuffersDataOutput, writeSetOfStrings, METH_VARARGS),
          DECLARE_METHOD(t_ByteBuffersDataOutput, writeShort, METH_VARARGS),
          DECLARE_METHOD(t_ByteBuffersDataOutput, writeString, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        static PyType_Slot PY_TYPE_SLOTS(ByteBuffersDataOutput)[] = {
          { Py_tp_methods, t_ByteBuffersDataOutput__methods_ },
          { Py_tp_init, (void *) t_ByteBuffersDataOutput_init_ },
          { 0, NULL }
        };

        static PyType_Def *PY_TYPE_BASES(ByteBuffersDataOutput)[] = {
          &PY_TYPE_DEF(::org::apache::lucene::store::DataOutput),
          NULL
        };

        DEFINE_TYPE(ByteBuffersDataOutput, t_ByteBuffersDataOutput, ByteBuffersDataOutput);

        void t_ByteBuffersDataOutput::install(PyObject *module)
        {
          installType(&PY_TYPE(ByteBuffersDataOutput), &PY_TYPE_DEF(ByteBuffersDataOutput), module, "ByteBuffersDataOutput", 0);
          PyObject_SetAttrString((PyObject *) PY_TYPE(ByteBuffersDataOutput), "ByteBufferRecycler", make_descriptor(&PY_TYPE_DEF(ByteBuffersDataOutput$ByteBufferRecycler)));
        }

        void t_ByteBuffersDataOutput::initialize(PyObject *module)
        {
          PyObject_SetAttrString((PyObject *) PY_TYPE(ByteBuffersDataOutput), "class_", make_descriptor(ByteBuffersDataOutput::initializeClass, 1));
          PyObject_SetAttrString((PyObject *) PY_TYPE(ByteBuffersDataOutput), "wrapfn_", make_descriptor(t_ByteBuffersDataOutput::wrap_jobject));
          PyObject_SetAttrString((PyObject *) PY_TYPE(ByteBuffersDataOutput), "boxfn_", make_descriptor(boxObject));
          env->getClass(ByteBuffersDataOutput::initializeClass);
          PyObject_SetAttrString((PyObject *) PY_TYPE(ByteBuffersDataOutput), "DEFAULT_MAX_BITS_PER_BLOCK", make_descriptor(ByteBuffersDataOutput::DEFAULT_MAX_BITS_PER_BLOCK));
          PyObject_SetAttrString((PyObject *) PY_TYPE(ByteBuffersDataOutput), "DEFAULT_MIN_BITS_PER_BLOCK", make_descriptor(ByteBuffersDataOutput::DEFAULT_MIN_BITS_PER_BLOCK));
        }

        static PyObject *t_ByteBuffersDataOutput_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, ByteBuffersDataOutput::initializeClass, 1)))
            return NULL;
          return t_ByteBuffersDataOutput::wrap_Object(ByteBuffersDataOutput(((t_ByteBuffersDataOutput *) arg)->object.this$));
        }
        static PyObject *t_ByteBuffersDataOutput_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, ByteBuffersDataOutput::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_ByteBuffersDataOutput_init_(t_ByteBuffersDataOutput *self, PyObject *args, PyObject *kwds)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 0:
            {
              ByteBuffersDataOutput object((jobject) NULL);

              INT_CALL(object = ByteBuffersDataOutput());
              self->object = object;
              break;
            }
           case 1:
            {
              jlong a0;
              ByteBuffersDataOutput object((jobject) NULL);

              if (!parseArgs(args, "J", &a0))
              {
                INT_CALL(object = ByteBuffersDataOutput(a0));
                self->object = object;
                break;
              }
            }
           default:
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }

        static PyObject *t_ByteBuffersDataOutput_copyTo(t_ByteBuffersDataOutput *self, PyObject *arg)
        {
          ::org::apache::lucene::store::DataOutput a0((jobject) NULL);

          if (!parseArg(arg, "k", ::org::apache::lucene::store::DataOutput::initializeClass, &a0))
          {
            OBJ_CALL(self->object.copyTo(a0));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "copyTo", arg);
          return NULL;
        }

        static PyObject *t_ByteBuffersDataOutput_newResettableInstance(PyTypeObject *type)
        {
          ByteBuffersDataOutput result((jobject) NULL);
          OBJ_CALL(result = ::org::apache::lucene::store::ByteBuffersDataOutput::newResettableInstance());
          return t_ByteBuffersDataOutput::wrap_Object(result);
        }

        static PyObject *t_ByteBuffersDataOutput_ramBytesUsed(t_ByteBuffersDataOutput *self)
        {
          jlong result;
          OBJ_CALL(result = self->object.ramBytesUsed());
          return PyLong_FromLongLong((PY_LONG_LONG) result);
        }

        static PyObject *t_ByteBuffersDataOutput_reset(t_ByteBuffersDataOutput *self)
        {
          OBJ_CALL(self->object.reset());
          Py_RETURN_NONE;
        }

        static PyObject *t_ByteBuffersDataOutput_size(t_ByteBuffersDataOutput *self)
        {
          jlong result;
          OBJ_CALL(result = self->object.size());
          return PyLong_FromLongLong((PY_LONG_LONG) result);
        }

        static PyObject *t_ByteBuffersDataOutput_toArrayCopy(t_ByteBuffersDataOutput *self)
        {
          JArray< jbyte > result((jobject) NULL);
          OBJ_CALL(result = self->object.toArrayCopy());
          return result.wrap();
        }

        static PyObject *t_ByteBuffersDataOutput_toDataInput(t_ByteBuffersDataOutput *self)
        {
          ::org::apache::lucene::store::ByteBuffersDataInput result((jobject) NULL);
          OBJ_CALL(result = self->object.toDataInput());
          return ::org::apache::lucene::store::t_ByteBuffersDataInput::wrap_Object(result);
        }

        static PyObject *t_ByteBuffersDataOutput_toString(t_ByteBuffersDataOutput *self, PyObject *args)
        {
          ::java::lang::String result((jobject) NULL);

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.toString());
            return j2p(result);
          }

          return callSuper(PY_TYPE(ByteBuffersDataOutput), (PyObject *) self, "toString", args, 2);
        }

        static PyObject *t_ByteBuffersDataOutput_writeByte(t_ByteBuffersDataOutput *self, PyObject *args)
        {
          jbyte a0;

          if (!parseArgs(args, "B", &a0))
          {
            OBJ_CALL(self->object.writeByte(a0));
            Py_RETURN_NONE;
          }

          return callSuper(PY_TYPE(ByteBuffersDataOutput), (PyObject *) self, "writeByte", args, 2);
        }

        static PyObject *t_ByteBuffersDataOutput_writeBytes(t_ByteBuffersDataOutput *self, PyObject *args)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 1:
            {
              JArray< jbyte > a0((jobject) NULL);

              if (!parseArgs(args, "[B", &a0))
              {
                OBJ_CALL(self->object.writeBytes(a0));
                Py_RETURN_NONE;
              }
            }
            break;
           case 2:
            {
              JArray< jbyte > a0((jobject) NULL);
              jint a1;

              if (!parseArgs(args, "[BI", &a0, &a1))
              {
                OBJ_CALL(self->object.writeBytes(a0, a1));
                Py_RETURN_NONE;
              }
            }
            break;
           case 3:
            {
              JArray< jbyte > a0((jobject) NULL);
              jint a1;
              jint a2;

              if (!parseArgs(args, "[BII", &a0, &a1, &a2))
              {
                OBJ_CALL(self->object.writeBytes(a0, a1, a2));
                Py_RETURN_NONE;
              }
            }
          }

          return callSuper(PY_TYPE(ByteBuffersDataOutput), (PyObject *) self, "writeBytes", args, 2);
        }

        static PyObject *t_ByteBuffersDataOutput_writeInt(t_ByteBuffersDataOutput *self, PyObject *args)
        {
          jint a0;

          if (!parseArgs(args, "I", &a0))
          {
            OBJ_CALL(self->object.writeInt(a0));
            Py_RETURN_NONE;
          }

          return callSuper(PY_TYPE(ByteBuffersDataOutput), (PyObject *) self, "writeInt", args, 2);
        }

        static PyObject *t_ByteBuffersDataOutput_writeLong(t_ByteBuffersDataOutput *self, PyObject *args)
        {
          jlong a0;

          if (!parseArgs(args, "J", &a0))
          {
            OBJ_CALL(self->object.writeLong(a0));
            Py_RETURN_NONE;
          }

          return callSuper(PY_TYPE(ByteBuffersDataOutput), (PyObject *) self, "writeLong", args, 2);
        }

        static PyObject *t_ByteBuffersDataOutput_writeMapOfStrings(t_ByteBuffersDataOutput *self, PyObject *args)
        {
          ::java::util::Map a0((jobject) NULL);
          PyTypeObject **p0;

          if (!parseArgs(args, "K", ::java::util::Map::initializeClass, &a0, &p0, ::java::util::t_Map::parameters_))
          {
            OBJ_CALL(self->object.writeMapOfStrings(a0));
            Py_RETURN_NONE;
          }

          return callSuper(PY_TYPE(ByteBuffersDataOutput), (PyObject *) self, "writeMapOfStrings", args, 2);
        }

        static PyObject *t_ByteBuffersDataOutput_writeSetOfStrings(t_ByteBuffersDataOutput *self, PyObject *args)
        {
          ::java::util::Set a0((jobject) NULL);
          PyTypeObject **p0;

          if (!parseArgs(args, "K", ::java::util::Set::initializeClass, &a0, &p0, ::java::util::t_Set::parameters_))
          {
            OBJ_CALL(self->object.writeSetOfStrings(a0));
            Py_RETURN_NONE;
          }

          return callSuper(PY_TYPE(ByteBuffersDataOutput), (PyObject *) self, "writeSetOfStrings", args, 2);
        }

        static PyObject *t_ByteBuffersDataOutput_writeShort(t_ByteBuffersDataOutput *self, PyObject *args)
        {
          jshort a0;

          if (!parseArgs(args, "S", &a0))
          {
            OBJ_CALL(self->object.writeShort(a0));
            Py_RETURN_NONE;
          }

          return callSuper(PY_TYPE(ByteBuffersDataOutput), (PyObject *) self, "writeShort", args, 2);
        }

        static PyObject *t_ByteBuffersDataOutput_writeString(t_ByteBuffersDataOutput *self, PyObject *args)
        {
          ::java::lang::String a0((jobject) NULL);

          if (!parseArgs(args, "s", &a0))
          {
            OBJ_CALL(self->object.writeString(a0));
            Py_RETURN_NONE;
          }

          return callSuper(PY_TYPE(ByteBuffersDataOutput), (PyObject *) self, "writeString", args, 2);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/index/IndexSorter$DoubleSorter.h"
#include "java/util/List.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/index/LeafReader.h"
#include "java/lang/Double.h"
#include "org/apache/lucene/index/IndexSorter.h"
#include "org/apache/lucene/index/IndexSorter$ComparableProvider.h"
#include "java/lang/String.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/index/IndexSorter$NumericDocValuesProvider.h"
#include "org/apache/lucene/index/IndexSorter$DocComparator.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {

        ::java::lang::Class *IndexSorter$DoubleSorter::class$ = NULL;
        jmethodID *IndexSorter$DoubleSorter::mids$ = NULL;
        bool IndexSorter$DoubleSorter::live$ = false;

        jclass IndexSorter$DoubleSorter::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/index/IndexSorter$DoubleSorter");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_ef32c827db19fb34] = env->getMethodID(cls, "<init>", "(Ljava/lang/String;Ljava/lang/Double;ZLorg/apache/lucene/index/IndexSorter$NumericDocValuesProvider;)V");
            mids$[mid_getComparableProviders_739976833795f559] = env->getMethodID(cls, "getComparableProviders", "(Ljava/util/List;)[Lorg/apache/lucene/index/IndexSorter$ComparableProvider;");
            mids$[mid_getDocComparator_8d0e93a4e9ab83f9] = env->getMethodID(cls, "getDocComparator", "(Lorg/apache/lucene/index/LeafReader;I)Lorg/apache/lucene/index/IndexSorter$DocComparator;");
            mids$[mid_getProviderName_db9b55ba01e03e4b] = env->getMethodID(cls, "getProviderName", "()Ljava/lang/String;");

            class$ = new ::java::lang::Class(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        IndexSorter$DoubleSorter::IndexSorter$DoubleSorter(const ::java::lang::String & a0, const ::java::lang::Double & a1, jboolean a2, const ::org::apache::lucene::index::IndexSorter$NumericDocValuesProvider & a3) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_ef32c827db19fb34, a0.this$, a1.this$, a2, a3.this$)) {}

        JArray< ::org::apache::lucene::index::IndexSorter$ComparableProvider > IndexSorter$DoubleSorter::getComparableProviders(const ::java::util::List & a0) const
        {
          return JArray< ::org::apache::lucene::index::IndexSorter$ComparableProvider >(env->callObjectMethod(this$, mids$[mid_getComparableProviders_739976833795f559], a0.this$));
        }

        ::org::apache::lucene::index::IndexSorter$DocComparator IndexSorter$DoubleSorter::getDocComparator(const ::org::apache::lucene::index::LeafReader & a0, jint a1) const
        {
          return ::org::apache::lucene::index::IndexSorter$DocComparator(env->callObjectMethod(this$, mids$[mid_getDocComparator_8d0e93a4e9ab83f9], a0.this$, a1));
        }

        ::java::lang::String IndexSorter$DoubleSorter::getProviderName() const
        {
          return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_getProviderName_db9b55ba01e03e4b]));
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {
        static PyObject *t_IndexSorter$DoubleSorter_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_IndexSorter$DoubleSorter_instance_(PyTypeObject *type, PyObject *arg);
        static int t_IndexSorter$DoubleSorter_init_(t_IndexSorter$DoubleSorter *self, PyObject *args, PyObject *kwds);
        static PyObject *t_IndexSorter$DoubleSorter_getComparableProviders(t_IndexSorter$DoubleSorter *self, PyObject *arg);
        static PyObject *t_IndexSorter$DoubleSorter_getDocComparator(t_IndexSorter$DoubleSorter *self, PyObject *args);
        static PyObject *t_IndexSorter$DoubleSorter_getProviderName(t_IndexSorter$DoubleSorter *self);
        static PyObject *t_IndexSorter$DoubleSorter_get__providerName(t_IndexSorter$DoubleSorter *self, void *data);
        static PyGetSetDef t_IndexSorter$DoubleSorter__fields_[] = {
          DECLARE_GET_FIELD(t_IndexSorter$DoubleSorter, providerName),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_IndexSorter$DoubleSorter__methods_[] = {
          DECLARE_METHOD(t_IndexSorter$DoubleSorter, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_IndexSorter$DoubleSorter, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_IndexSorter$DoubleSorter, getComparableProviders, METH_O),
          DECLARE_METHOD(t_IndexSorter$DoubleSorter, getDocComparator, METH_VARARGS),
          DECLARE_METHOD(t_IndexSorter$DoubleSorter, getProviderName, METH_NOARGS),
          { NULL, NULL, 0, NULL }
        };

        static PyType_Slot PY_TYPE_SLOTS(IndexSorter$DoubleSorter)[] = {
          { Py_tp_methods, t_IndexSorter$DoubleSorter__methods_ },
          { Py_tp_init, (void *) t_IndexSorter$DoubleSorter_init_ },
          { Py_tp_getset, t_IndexSorter$DoubleSorter__fields_ },
          { 0, NULL }
        };

        static PyType_Def *PY_TYPE_BASES(IndexSorter$DoubleSorter)[] = {
          &PY_TYPE_DEF(::java::lang::Object),
          NULL
        };

        DEFINE_TYPE(IndexSorter$DoubleSorter, t_IndexSorter$DoubleSorter, IndexSorter$DoubleSorter);

        void t_IndexSorter$DoubleSorter::install(PyObject *module)
        {
          installType(&PY_TYPE(IndexSorter$DoubleSorter), &PY_TYPE_DEF(IndexSorter$DoubleSorter), module, "IndexSorter$DoubleSorter", 0);
        }

        void t_IndexSorter$DoubleSorter::initialize(PyObject *module)
        {
          PyObject_SetAttrString((PyObject *) PY_TYPE(IndexSorter$DoubleSorter), "class_", make_descriptor(IndexSorter$DoubleSorter::initializeClass, 1));
          PyObject_SetAttrString((PyObject *) PY_TYPE(IndexSorter$DoubleSorter), "wrapfn_", make_descriptor(t_IndexSorter$DoubleSorter::wrap_jobject));
          PyObject_SetAttrString((PyObject *) PY_TYPE(IndexSorter$DoubleSorter), "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_IndexSorter$DoubleSorter_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, IndexSorter$DoubleSorter::initializeClass, 1)))
            return NULL;
          return t_IndexSorter$DoubleSorter::wrap_Object(IndexSorter$DoubleSorter(((t_IndexSorter$DoubleSorter *) arg)->object.this$));
        }
        static PyObject *t_IndexSorter$DoubleSorter_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, IndexSorter$DoubleSorter::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_IndexSorter$DoubleSorter_init_(t_IndexSorter$DoubleSorter *self, PyObject *args, PyObject *kwds)
        {
          ::java::lang::String a0((jobject) NULL);
          ::java::lang::Double a1((jobject) NULL);
          jboolean a2;
          ::org::apache::lucene::index::IndexSorter$NumericDocValuesProvider a3((jobject) NULL);
          IndexSorter$DoubleSorter object((jobject) NULL);

          if (!parseArgs(args, "sOZk", ::java::lang::PY_TYPE(Double), ::org::apache::lucene::index::IndexSorter$NumericDocValuesProvider::initializeClass, &a0, &a1, &a2, &a3))
          {
            INT_CALL(object = IndexSorter$DoubleSorter(a0, a1, a2, a3));
            self->object = object;
          }
          else
          {
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }

        static PyObject *t_IndexSorter$DoubleSorter_getComparableProviders(t_IndexSorter$DoubleSorter *self, PyObject *arg)
        {
          ::java::util::List a0((jobject) NULL);
          PyTypeObject **p0;
          JArray< ::org::apache::lucene::index::IndexSorter$ComparableProvider > result((jobject) NULL);

          if (!parseArg(arg, "K", ::java::util::List::initializeClass, &a0, &p0, ::java::util::t_List::parameters_))
          {
            OBJ_CALL(result = self->object.getComparableProviders(a0));
            return JArray<jobject>(result.this$).wrap(::org::apache::lucene::index::t_IndexSorter$ComparableProvider::wrap_jobject);
          }

          PyErr_SetArgsError((PyObject *) self, "getComparableProviders", arg);
          return NULL;
        }

        static PyObject *t_IndexSorter$DoubleSorter_getDocComparator(t_IndexSorter$DoubleSorter *self, PyObject *args)
        {
          ::org::apache::lucene::index::LeafReader a0((jobject) NULL);
          jint a1;
          ::org::apache::lucene::index::IndexSorter$DocComparator result((jobject) NULL);

          if (!parseArgs(args, "kI", ::org::apache::lucene::index::LeafReader::initializeClass, &a0, &a1))
          {
            OBJ_CALL(result = self->object.getDocComparator(a0, a1));
            return ::org::apache::lucene::index::t_IndexSorter$DocComparator::wrap_Object(result);
          }

          PyErr_SetArgsError((PyObject *) self, "getDocComparator", args);
          return NULL;
        }

        static PyObject *t_IndexSorter$DoubleSorter_getProviderName(t_IndexSorter$DoubleSorter *self)
        {
          ::java::lang::String result((jobject) NULL);
          OBJ_CALL(result = self->object.getProviderName());
          return j2p(result);
        }

        static PyObject *t_IndexSorter$DoubleSorter_get__providerName(t_IndexSorter$DoubleSorter *self, void *data)
        {
          ::java::lang::String value((jobject) NULL);
          OBJ_CALL(value = self->object.getProviderName());
          return j2p(value);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "java/util/AbstractMap.h"
#include "java/util/Map.h"
#include "java/util/Collection.h"
#include "java/util/Map$Entry.h"
#include "java/lang/Class.h"
#include "java/lang/String.h"
#include "java/util/Set.h"
#include "JArray.h"

namespace java {
  namespace util {

    ::java::lang::Class *AbstractMap::class$ = NULL;
    jmethodID *AbstractMap::mids$ = NULL;
    bool AbstractMap::live$ = false;

    jclass AbstractMap::initializeClass(bool getOnly)
    {
      if (getOnly)
        return (jclass) (live$ ? class$->this$ : NULL);
      if (class$ == NULL)
      {
        jclass cls = (jclass) env->findClass("java/util/AbstractMap");

        mids$ = new jmethodID[max_mid];
        mids$[mid_clear_f2cc1bce94666404] = env->getMethodID(cls, "clear", "()V");
        mids$[mid_containsKey_8b72f2dcdde6fd1d] = env->getMethodID(cls, "containsKey", "(Ljava/lang/Object;)Z");
        mids$[mid_containsValue_8b72f2dcdde6fd1d] = env->getMethodID(cls, "containsValue", "(Ljava/lang/Object;)Z");
        mids$[mid_entrySet_7dcf4034c6d1a92a] = env->getMethodID(cls, "entrySet", "()Ljava/util/Set;");
        mids$[mid_equals_8b72f2dcdde6fd1d] = env->getMethodID(cls, "equals", "(Ljava/lang/Object;)Z");
        mids$[mid_get_e5ae0f8c04795fa9] = env->getMethodID(cls, "get", "(Ljava/lang/Object;)Ljava/lang/Object;");
        mids$[mid_hashCode_9972fcc56b44e79d] = env->getMethodID(cls, "hashCode", "()I");
        mids$[mid_isEmpty_8454bd5aa23fd11e] = env->getMethodID(cls, "isEmpty", "()Z");
        mids$[mid_keySet_7dcf4034c6d1a92a] = env->getMethodID(cls, "keySet", "()Ljava/util/Set;");
        mids$[mid_put_128a89bbc17a8b69] = env->getMethodID(cls, "put", "(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;");
        mids$[mid_putAll_408bd889ee3beae5] = env->getMethodID(cls, "putAll", "(Ljava/util/Map;)V");
        mids$[mid_remove_e5ae0f8c04795fa9] = env->getMethodID(cls, "remove", "(Ljava/lang/Object;)Ljava/lang/Object;");
        mids$[mid_size_9972fcc56b44e79d] = env->getMethodID(cls, "size", "()I");
        mids$[mid_toString_db9b55ba01e03e4b] = env->getMethodID(cls, "toString", "()Ljava/lang/String;");
        mids$[mid_values_d4dfbf7a26ff41df] = env->getMethodID(cls, "values", "()Ljava/util/Collection;");
        mids$[mid_clone_d6bcd06f3102c4d9] = env->getMethodID(cls, "clone", "()Ljava/lang/Object;");

        class$ = new ::java::lang::Class(cls);
        live$ = true;
      }
      return (jclass) class$->this$;
    }

    void AbstractMap::clear() const
    {
      env->callVoidMethod(this$, mids$[mid_clear_f2cc1bce94666404]);
    }

    jboolean AbstractMap::containsKey(const ::java::lang::Object & a0) const
    {
      return env->callBooleanMethod(this$, mids$[mid_containsKey_8b72f2dcdde6fd1d], a0.this$);
    }

    jboolean AbstractMap::containsValue(const ::java::lang::Object & a0) const
    {
      return env->callBooleanMethod(this$, mids$[mid_containsValue_8b72f2dcdde6fd1d], a0.this$);
    }

    ::java::util::Set AbstractMap::entrySet() const
    {
      return ::java::util::Set(env->callObjectMethod(this$, mids$[mid_entrySet_7dcf4034c6d1a92a]));
    }

    jboolean AbstractMap::equals(const ::java::lang::Object & a0) const
    {
      return env->callBooleanMethod(this$, mids$[mid_equals_8b72f2dcdde6fd1d], a0.this$);
    }

    ::java::lang::Object AbstractMap::get(const ::java::lang::Object & a0) const
    {
      return ::java::lang::Object(env->callObjectMethod(this$, mids$[mid_get_e5ae0f8c04795fa9], a0.this$));
    }

    jint AbstractMap::hashCode() const
    {
      return env->callIntMethod(this$, mids$[mid_hashCode_9972fcc56b44e79d]);
    }

    jboolean AbstractMap::isEmpty() const
    {
      return env->callBooleanMethod(this$, mids$[mid_isEmpty_8454bd5aa23fd11e]);
    }

    ::java::util::Set AbstractMap::keySet() const
    {
      return ::java::util::Set(env->callObjectMethod(this$, mids$[mid_keySet_7dcf4034c6d1a92a]));
    }

    ::java::lang::Object AbstractMap::put(const ::java::lang::Object & a0, const ::java::lang::Object & a1) const
    {
      return ::java::lang::Object(env->callObjectMethod(this$, mids$[mid_put_128a89bbc17a8b69], a0.this$, a1.this$));
    }

    void AbstractMap::putAll(const ::java::util::Map & a0) const
    {
      env->callVoidMethod(this$, mids$[mid_putAll_408bd889ee3beae5], a0.this$);
    }

    ::java::lang::Object AbstractMap::remove(const ::java::lang::Object & a0) const
    {
      return ::java::lang::Object(env->callObjectMethod(this$, mids$[mid_remove_e5ae0f8c04795fa9], a0.this$));
    }

    jint AbstractMap::size() const
    {
      return env->callIntMethod(this$, mids$[mid_size_9972fcc56b44e79d]);
    }

    ::java::lang::String AbstractMap::toString() const
    {
      return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_db9b55ba01e03e4b]));
    }

    ::java::util::Collection AbstractMap::values() const
    {
      return ::java::util::Collection(env->callObjectMethod(this$, mids$[mid_values_d4dfbf7a26ff41df]));
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace java {
  namespace util {
    static PyObject *t_AbstractMap_cast_(PyTypeObject *type, PyObject *arg);
    static PyObject *t_AbstractMap_instance_(PyTypeObject *type, PyObject *arg);
    static PyObject *t_AbstractMap_of_(t_AbstractMap *self, PyObject *args);
    static PyObject *t_AbstractMap_clear(t_AbstractMap *self);
    static PyObject *t_AbstractMap_containsKey(t_AbstractMap *self, PyObject *arg);
    static PyObject *t_AbstractMap_containsValue(t_AbstractMap *self, PyObject *arg);
    static PyObject *t_AbstractMap_entrySet(t_AbstractMap *self);
    static PyObject *t_AbstractMap_equals(t_AbstractMap *self, PyObject *args);
    static PyObject *t_AbstractMap_get(t_AbstractMap *self, PyObject *arg);
    static PyObject *t_AbstractMap_hashCode(t_AbstractMap *self, PyObject *args);
    static PyObject *t_AbstractMap_isEmpty(t_AbstractMap *self);
    static PyObject *t_AbstractMap_keySet(t_AbstractMap *self);
    static PyObject *t_AbstractMap_put(t_AbstractMap *self, PyObject *args);
    static PyObject *t_AbstractMap_putAll(t_AbstractMap *self, PyObject *arg);
    static PyObject *t_AbstractMap_remove(t_AbstractMap *self, PyObject *arg);
    static PyObject *t_AbstractMap_size(t_AbstractMap *self);
    static PyObject *t_AbstractMap_toString(t_AbstractMap *self, PyObject *args);
    static PyObject *t_AbstractMap_values(t_AbstractMap *self);
    static PyObject *t_AbstractMap_get__empty(t_AbstractMap *self, void *data);
    static PyObject *t_AbstractMap_get__parameters_(t_AbstractMap *self, void *data);
    static PyGetSetDef t_AbstractMap__fields_[] = {
      DECLARE_GET_FIELD(t_AbstractMap, empty),
      DECLARE_GET_FIELD(t_AbstractMap, parameters_),
      { NULL, NULL, NULL, NULL, NULL }
    };

    static PyMethodDef t_AbstractMap__methods_[] = {
      DECLARE_METHOD(t_AbstractMap, cast_, METH_O | METH_CLASS),
      DECLARE_METHOD(t_AbstractMap, instance_, METH_O | METH_CLASS),
      DECLARE_METHOD(t_AbstractMap, of_, METH_VARARGS),
      DECLARE_METHOD(t_AbstractMap, clear, METH_NOARGS),
      DECLARE_METHOD(t_AbstractMap, containsKey, METH_O),
      DECLARE_METHOD(t_AbstractMap, containsValue, METH_O),
      DECLARE_METHOD(t_AbstractMap, entrySet, METH_NOARGS),
      DECLARE_METHOD(t_AbstractMap, equals, METH_VARARGS),
      DECLARE_METHOD(t_AbstractMap, get, METH_O),
      DECLARE_METHOD(t_AbstractMap, hashCode, METH_VARARGS),
      DECLARE_METHOD(t_AbstractMap, isEmpty, METH_NOARGS),
      DECLARE_METHOD(t_AbstractMap, keySet, METH_NOARGS),
      DECLARE_METHOD(t_AbstractMap, put, METH_VARARGS),
      DECLARE_METHOD(t_AbstractMap, putAll, METH_O),
      DECLARE_METHOD(t_AbstractMap, remove, METH_O),
      DECLARE_METHOD(t_AbstractMap, size, METH_NOARGS),
      DECLARE_METHOD(t_AbstractMap, toString, METH_VARARGS),
      DECLARE_METHOD(t_AbstractMap, values, METH_NOARGS),
      { NULL, NULL, 0, NULL }
    };

    static PyType_Slot PY_TYPE_SLOTS(AbstractMap)[] = {
      { Py_tp_methods, t_AbstractMap__methods_ },
      { Py_tp_init, (void *) abstract_init },
      { Py_tp_getset, t_AbstractMap__fields_ },
      { 0, NULL }
    };

    static PyType_Def *PY_TYPE_BASES(AbstractMap)[] = {
      &PY_TYPE_DEF(::java::lang::Object),
      NULL
    };

    DEFINE_TYPE(AbstractMap, t_AbstractMap, AbstractMap);
    PyObject *t_AbstractMap::wrap_Object(const AbstractMap& object, PyTypeObject *p0, PyTypeObject *p1)
    {
      PyObject *obj = t_AbstractMap::wrap_Object(object);
      if (obj != NULL && obj != Py_None)
      {
        t_AbstractMap *self = (t_AbstractMap *) obj;
        self->parameters[0] = p0;
        self->parameters[1] = p1;
      }
      return obj;
    }

    PyObject *t_AbstractMap::wrap_jobject(const jobject& object, PyTypeObject *p0, PyTypeObject *p1)
    {
      PyObject *obj = t_AbstractMap::wrap_jobject(object);
      if (obj != NULL && obj != Py_None)
      {
        t_AbstractMap *self = (t_AbstractMap *) obj;
        self->parameters[0] = p0;
        self->parameters[1] = p1;
      }
      return obj;
    }

    void t_AbstractMap::install(PyObject *module)
    {
      installType(&PY_TYPE(AbstractMap), &PY_TYPE_DEF(AbstractMap), module, "AbstractMap", 0);
    }

    void t_AbstractMap::initialize(PyObject *module)
    {
      PyObject_SetAttrString((PyObject *) PY_TYPE(AbstractMap), "class_", make_descriptor(AbstractMap::initializeClass, 1));
      PyObject_SetAttrString((PyObject *) PY_TYPE(AbstractMap), "wrapfn_", make_descriptor(t_AbstractMap::wrap_jobject));
      PyObject_SetAttrString((PyObject *) PY_TYPE(AbstractMap), "boxfn_", make_descriptor(boxObject));
    }

    static PyObject *t_AbstractMap_cast_(PyTypeObject *type, PyObject *arg)
    {
      if (!(arg = castCheck(arg, AbstractMap::initializeClass, 1)))
        return NULL;
      return t_AbstractMap::wrap_Object(AbstractMap(((t_AbstractMap *) arg)->object.this$));
    }
    static PyObject *t_AbstractMap_instance_(PyTypeObject *type, PyObject *arg)
    {
      if (!castCheck(arg, AbstractMap::initializeClass, 0))
        Py_RETURN_FALSE;
      Py_RETURN_TRUE;
    }

    static PyObject *t_AbstractMap_of_(t_AbstractMap *self, PyObject *args)
    {
      if (!parseArg(args, "T", 2, &(self->parameters)))
        Py_RETURN_SELF;
      return PyErr_SetArgsError((PyObject *) self, "of_", args);
    }

    static PyObject *t_AbstractMap_clear(t_AbstractMap *self)
    {
      OBJ_CALL(self->object.clear());
      Py_RETURN_NONE;
    }

    static PyObject *t_AbstractMap_containsKey(t_AbstractMap *self, PyObject *arg)
    {
      ::java::lang::Object a0((jobject) NULL);
      jboolean result;

      if (!parseArg(arg, "o", &a0))
      {
        OBJ_CALL(result = self->object.containsKey(a0));
        Py_RETURN_BOOL(result);
      }

      PyErr_SetArgsError((PyObject *) self, "containsKey", arg);
      return NULL;
    }

    static PyObject *t_AbstractMap_containsValue(t_AbstractMap *self, PyObject *arg)
    {
      ::java::lang::Object a0((jobject) NULL);
      jboolean result;

      if (!parseArg(arg, "o", &a0))
      {
        OBJ_CALL(result = self->object.containsValue(a0));
        Py_RETURN_BOOL(result);
      }

      PyErr_SetArgsError((PyObject *) self, "containsValue", arg);
      return NULL;
    }

    static PyObject *t_AbstractMap_entrySet(t_AbstractMap *self)
    {
      ::java::util::Set result((jobject) NULL);
      OBJ_CALL(result = self->object.entrySet());
      return ::java::util::t_Set::wrap_Object(result);
    }

    static PyObject *t_AbstractMap_equals(t_AbstractMap *self, PyObject *args)
    {
      ::java::lang::Object a0((jobject) NULL);
      jboolean result;

      if (!parseArgs(args, "o", &a0))
      {
        OBJ_CALL(result = self->object.equals(a0));
        Py_RETURN_BOOL(result);
      }

      return callSuper(PY_TYPE(AbstractMap), (PyObject *) self, "equals", args, 2);
    }

    static PyObject *t_AbstractMap_get(t_AbstractMap *self, PyObject *arg)
    {
      ::java::lang::Object a0((jobject) NULL);
      ::java::lang::Object result((jobject) NULL);

      if (!parseArg(arg, "o", &a0))
      {
        OBJ_CALL(result = self->object.get(a0));
        return self->parameters[1] != NULL ? wrapType(self->parameters[1], result.this$) : ::java::lang::t_Object::wrap_Object(result);
      }

      PyErr_SetArgsError((PyObject *) self, "get", arg);
      return NULL;
    }

    static PyObject *t_AbstractMap_hashCode(t_AbstractMap *self, PyObject *args)
    {
      jint result;

      if (!parseArgs(args, ""))
      {
        OBJ_CALL(result = self->object.hashCode());
        return PyLong_FromLong((long) result);
      }

      return callSuper(PY_TYPE(AbstractMap), (PyObject *) self, "hashCode", args, 2);
    }

    static PyObject *t_AbstractMap_isEmpty(t_AbstractMap *self)
    {
      jboolean result;
      OBJ_CALL(result = self->object.isEmpty());
      Py_RETURN_BOOL(result);
    }

    static PyObject *t_AbstractMap_keySet(t_AbstractMap *self)
    {
      ::java::util::Set result((jobject) NULL);
      OBJ_CALL(result = self->object.keySet());
      return ::java::util::t_Set::wrap_Object(result, self->parameters[0]);
    }

    static PyObject *t_AbstractMap_put(t_AbstractMap *self, PyObject *args)
    {
      ::java::lang::Object a0((jobject) NULL);
      ::java::lang::Object a1((jobject) NULL);
      ::java::lang::Object result((jobject) NULL);

      if (!parseArgs(args, "OO", self->parameters[0], self->parameters[1], &a0, &a1))
      {
        OBJ_CALL(result = self->object.put(a0, a1));
        return self->parameters[1] != NULL ? wrapType(self->parameters[1], result.this$) : ::java::lang::t_Object::wrap_Object(result);
      }

      PyErr_SetArgsError((PyObject *) self, "put", args);
      return NULL;
    }

    static PyObject *t_AbstractMap_putAll(t_AbstractMap *self, PyObject *arg)
    {
      ::java::util::Map a0((jobject) NULL);
      PyTypeObject **p0;

      if (!parseArg(arg, "K", ::java::util::Map::initializeClass, &a0, &p0, ::java::util::t_Map::parameters_))
      {
        OBJ_CALL(self->object.putAll(a0));
        Py_RETURN_NONE;
      }

      PyErr_SetArgsError((PyObject *) self, "putAll", arg);
      return NULL;
    }

    static PyObject *t_AbstractMap_remove(t_AbstractMap *self, PyObject *arg)
    {
      ::java::lang::Object a0((jobject) NULL);
      ::java::lang::Object result((jobject) NULL);

      if (!parseArg(arg, "o", &a0))
      {
        OBJ_CALL(result = self->object.remove(a0));
        return self->parameters[1] != NULL ? wrapType(self->parameters[1], result.this$) : ::java::lang::t_Object::wrap_Object(result);
      }

      PyErr_SetArgsError((PyObject *) self, "remove", arg);
      return NULL;
    }

    static PyObject *t_AbstractMap_size(t_AbstractMap *self)
    {
      jint result;
      OBJ_CALL(result = self->object.size());
      return PyLong_FromLong((long) result);
    }

    static PyObject *t_AbstractMap_toString(t_AbstractMap *self, PyObject *args)
    {
      ::java::lang::String result((jobject) NULL);

      if (!parseArgs(args, ""))
      {
        OBJ_CALL(result = self->object.toString());
        return j2p(result);
      }

      return callSuper(PY_TYPE(AbstractMap), (PyObject *) self, "toString", args, 2);
    }

    static PyObject *t_AbstractMap_values(t_AbstractMap *self)
    {
      ::java::util::Collection result((jobject) NULL);
      OBJ_CALL(result = self->object.values());
      return ::java::util::t_Collection::wrap_Object(result, self->parameters[1]);
    }
    static PyObject *t_AbstractMap_get__parameters_(t_AbstractMap *self, void *data)
    {
      return typeParameters(self->parameters, sizeof(self->parameters));
    }

    static PyObject *t_AbstractMap_get__empty(t_AbstractMap *self, void *data)
    {
      jboolean value;
      OBJ_CALL(value = self->object.isEmpty());
      Py_RETURN_BOOL(value);
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queryparser/surround/parser/FastCharStream.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/queryparser/surround/parser/CharStream.h"
#include "java/lang/String.h"
#include "java/io/IOException.h"
#include "java/io/Reader.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace surround {
          namespace parser {

            ::java::lang::Class *FastCharStream::class$ = NULL;
            jmethodID *FastCharStream::mids$ = NULL;
            bool FastCharStream::live$ = false;

            jclass FastCharStream::initializeClass(bool getOnly)
            {
              if (getOnly)
                return (jclass) (live$ ? class$->this$ : NULL);
              if (class$ == NULL)
              {
                jclass cls = (jclass) env->findClass("org/apache/lucene/queryparser/surround/parser/FastCharStream");

                mids$ = new jmethodID[max_mid];
                mids$[mid_init$_b2f3c57f5e6eb3f2] = env->getMethodID(cls, "<init>", "(Ljava/io/Reader;)V");
                mids$[mid_BeginToken_8eea1dd85c3239c3] = env->getMethodID(cls, "BeginToken", "()C");
                mids$[mid_Done_f2cc1bce94666404] = env->getMethodID(cls, "Done", "()V");
                mids$[mid_GetImage_db9b55ba01e03e4b] = env->getMethodID(cls, "GetImage", "()Ljava/lang/String;");
                mids$[mid_GetSuffix_4a35a620830b94db] = env->getMethodID(cls, "GetSuffix", "(I)[C");
                mids$[mid_backup_040c4cd0390c5aff] = env->getMethodID(cls, "backup", "(I)V");
                mids$[mid_getBeginColumn_9972fcc56b44e79d] = env->getMethodID(cls, "getBeginColumn", "()I");
                mids$[mid_getBeginLine_9972fcc56b44e79d] = env->getMethodID(cls, "getBeginLine", "()I");
                mids$[mid_getColumn_9972fcc56b44e79d] = env->getMethodID(cls, "getColumn", "()I");
                mids$[mid_getEndColumn_9972fcc56b44e79d] = env->getMethodID(cls, "getEndColumn", "()I");
                mids$[mid_getEndLine_9972fcc56b44e79d] = env->getMethodID(cls, "getEndLine", "()I");
                mids$[mid_getLine_9972fcc56b44e79d] = env->getMethodID(cls, "getLine", "()I");
                mids$[mid_readChar_8eea1dd85c3239c3] = env->getMethodID(cls, "readChar", "()C");

                class$ = new ::java::lang::Class(cls);
                live$ = true;
              }
              return (jclass) class$->this$;
            }

            FastCharStream::FastCharStream(const ::java::io::Reader & a0) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_b2f3c57f5e6eb3f2, a0.this$)) {}

            jchar FastCharStream::BeginToken() const
            {
              return env->callCharMethod(this$, mids$[mid_BeginToken_8eea1dd85c3239c3]);
            }

            void FastCharStream::Done() const
            {
              env->callVoidMethod(this$, mids$[mid_Done_f2cc1bce94666404]);
            }

            ::java::lang::String FastCharStream::GetImage() const
            {
              return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_GetImage_db9b55ba01e03e4b]));
            }

            JArray< jchar > FastCharStream::GetSuffix(jint a0) const
            {
              return JArray< jchar >(env->callObjectMethod(this$, mids$[mid_GetSuffix_4a35a620830b94db], a0));
            }

            void FastCharStream::backup(jint a0) const
            {
              env->callVoidMethod(this$, mids$[mid_backup_040c4cd0390c5aff], a0);
            }

            jint FastCharStream::getBeginColumn() const
            {
              return env->callIntMethod(this$, mids$[mid_getBeginColumn_9972fcc56b44e79d]);
            }

            jint FastCharStream::getBeginLine() const
            {
              return env->callIntMethod(this$, mids$[mid_getBeginLine_9972fcc56b44e79d]);
            }

            jint FastCharStream::getColumn() const
            {
              return env->callIntMethod(this$, mids$[mid_getColumn_9972fcc56b44e79d]);
            }

            jint FastCharStream::getEndColumn() const
            {
              return env->callIntMethod(this$, mids$[mid_getEndColumn_9972fcc56b44e79d]);
            }

            jint FastCharStream::getEndLine() const
            {
              return env->callIntMethod(this$, mids$[mid_getEndLine_9972fcc56b44e79d]);
            }

            jint FastCharStream::getLine() const
            {
              return env->callIntMethod(this$, mids$[mid_getLine_9972fcc56b44e79d]);
            }

            jchar FastCharStream::readChar() const
            {
              return env->callCharMethod(this$, mids$[mid_readChar_8eea1dd85c3239c3]);
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace surround {
          namespace parser {
            static PyObject *t_FastCharStream_cast_(PyTypeObject *type, PyObject *arg);
            static PyObject *t_FastCharStream_instance_(PyTypeObject *type, PyObject *arg);
            static int t_FastCharStream_init_(t_FastCharStream *self, PyObject *args, PyObject *kwds);
            static PyObject *t_FastCharStream_BeginToken(t_FastCharStream *self);
            static PyObject *t_FastCharStream_Done(t_FastCharStream *self);
            static PyObject *t_FastCharStream_GetImage(t_FastCharStream *self);
            static PyObject *t_FastCharStream_GetSuffix(t_FastCharStream *self, PyObject *arg);
            static PyObject *t_FastCharStream_backup(t_FastCharStream *self, PyObject *arg);
            static PyObject *t_FastCharStream_getBeginColumn(t_FastCharStream *self);
            static PyObject *t_FastCharStream_getBeginLine(t_FastCharStream *self);
            static PyObject *t_FastCharStream_getColumn(t_FastCharStream *self);
            static PyObject *t_FastCharStream_getEndColumn(t_FastCharStream *self);
            static PyObject *t_FastCharStream_getEndLine(t_FastCharStream *self);
            static PyObject *t_FastCharStream_getLine(t_FastCharStream *self);
            static PyObject *t_FastCharStream_readChar(t_FastCharStream *self);
            static PyObject *t_FastCharStream_get__beginColumn(t_FastCharStream *self, void *data);
            static PyObject *t_FastCharStream_get__beginLine(t_FastCharStream *self, void *data);
            static PyObject *t_FastCharStream_get__column(t_FastCharStream *self, void *data);
            static PyObject *t_FastCharStream_get__endColumn(t_FastCharStream *self, void *data);
            static PyObject *t_FastCharStream_get__endLine(t_FastCharStream *self, void *data);
            static PyObject *t_FastCharStream_get__line(t_FastCharStream *self, void *data);
            static PyGetSetDef t_FastCharStream__fields_[] = {
              DECLARE_GET_FIELD(t_FastCharStream, beginColumn),
              DECLARE_GET_FIELD(t_FastCharStream, beginLine),
              DECLARE_GET_FIELD(t_FastCharStream, column),
              DECLARE_GET_FIELD(t_FastCharStream, endColumn),
              DECLARE_GET_FIELD(t_FastCharStream, endLine),
              DECLARE_GET_FIELD(t_FastCharStream, line),
              { NULL, NULL, NULL, NULL, NULL }
            };

            static PyMethodDef t_FastCharStream__methods_[] = {
              DECLARE_METHOD(t_FastCharStream, cast_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_FastCharStream, instance_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_FastCharStream, BeginToken, METH_NOARGS),
              DECLARE_METHOD(t_FastCharStream, Done, METH_NOARGS),
              DECLARE_METHOD(t_FastCharStream, GetImage, METH_NOARGS),
              DECLARE_METHOD(t_FastCharStream, GetSuffix, METH_O),
              DECLARE_METHOD(t_FastCharStream, backup, METH_O),
              DECLARE_METHOD(t_FastCharStream, getBeginColumn, METH_NOARGS),
              DECLARE_METHOD(t_FastCharStream, getBeginLine, METH_NOARGS),
              DECLARE_METHOD(t_FastCharStream, getColumn, METH_NOARGS),
              DECLARE_METHOD(t_FastCharStream, getEndColumn, METH_NOARGS),
              DECLARE_METHOD(t_FastCharStream, getEndLine, METH_NOARGS),
              DECLARE_METHOD(t_FastCharStream, getLine, METH_NOARGS),
              DECLARE_METHOD(t_FastCharStream, readChar, METH_NOARGS),
              { NULL, NULL, 0, NULL }
            };

            static PyType_Slot PY_TYPE_SLOTS(FastCharStream)[] = {
              { Py_tp_methods, t_FastCharStream__methods_ },
              { Py_tp_init, (void *) t_FastCharStream_init_ },
              { Py_tp_getset, t_FastCharStream__fields_ },
              { 0, NULL }
            };

            static PyType_Def *PY_TYPE_BASES(FastCharStream)[] = {
              &PY_TYPE_DEF(::java::lang::Object),
              NULL
            };

            DEFINE_TYPE(FastCharStream, t_FastCharStream, FastCharStream);

            void t_FastCharStream::install(PyObject *module)
            {
              installType(&PY_TYPE(FastCharStream), &PY_TYPE_DEF(FastCharStream), module, "FastCharStream", 0);
            }

            void t_FastCharStream::initialize(PyObject *module)
            {
              PyObject_SetAttrString((PyObject *) PY_TYPE(FastCharStream), "class_", make_descriptor(FastCharStream::initializeClass, 1));
              PyObject_SetAttrString((PyObject *) PY_TYPE(FastCharStream), "wrapfn_", make_descriptor(t_FastCharStream::wrap_jobject));
              PyObject_SetAttrString((PyObject *) PY_TYPE(FastCharStream), "boxfn_", make_descriptor(boxObject));
            }

            static PyObject *t_FastCharStream_cast_(PyTypeObject *type, PyObject *arg)
            {
              if (!(arg = castCheck(arg, FastCharStream::initializeClass, 1)))
                return NULL;
              return t_FastCharStream::wrap_Object(FastCharStream(((t_FastCharStream *) arg)->object.this$));
            }
            static PyObject *t_FastCharStream_instance_(PyTypeObject *type, PyObject *arg)
            {
              if (!castCheck(arg, FastCharStream::initializeClass, 0))
                Py_RETURN_FALSE;
              Py_RETURN_TRUE;
            }

            static int t_FastCharStream_init_(t_FastCharStream *self, PyObject *args, PyObject *kwds)
            {
              ::java::io::Reader a0((jobject) NULL);
              FastCharStream object((jobject) NULL);

              if (!parseArgs(args, "k", ::java::io::Reader::initializeClass, &a0))
              {
                INT_CALL(object = FastCharStream(a0));
                self->object = object;
              }
              else
              {
                PyErr_SetArgsError((PyObject *) self, "__init__", args);
                return -1;
              }

              return 0;
            }

            static PyObject *t_FastCharStream_BeginToken(t_FastCharStream *self)
            {
              jchar result;
              OBJ_CALL(result = self->object.BeginToken());
              return c2p(result);
            }

            static PyObject *t_FastCharStream_Done(t_FastCharStream *self)
            {
              OBJ_CALL(self->object.Done());
              Py_RETURN_NONE;
            }

            static PyObject *t_FastCharStream_GetImage(t_FastCharStream *self)
            {
              ::java::lang::String result((jobject) NULL);
              OBJ_CALL(result = self->object.GetImage());
              return j2p(result);
            }

            static PyObject *t_FastCharStream_GetSuffix(t_FastCharStream *self, PyObject *arg)
            {
              jint a0;
              JArray< jchar > result((jobject) NULL);

              if (!parseArg(arg, "I", &a0))
              {
                OBJ_CALL(result = self->object.GetSuffix(a0));
                return result.wrap();
              }

              PyErr_SetArgsError((PyObject *) self, "GetSuffix", arg);
              return NULL;
            }

            static PyObject *t_FastCharStream_backup(t_FastCharStream *self, PyObject *arg)
            {
              jint a0;

              if (!parseArg(arg, "I", &a0))
              {
                OBJ_CALL(self->object.backup(a0));
                Py_RETURN_NONE;
              }

              PyErr_SetArgsError((PyObject *) self, "backup", arg);
              return NULL;
            }

            static PyObject *t_FastCharStream_getBeginColumn(t_FastCharStream *self)
            {
              jint result;
              OBJ_CALL(result = self->object.getBeginColumn());
              return PyLong_FromLong((long) result);
            }

            static PyObject *t_FastCharStream_getBeginLine(t_FastCharStream *self)
            {
              jint result;
              OBJ_CALL(result = self->object.getBeginLine());
              return PyLong_FromLong((long) result);
            }

            static PyObject *t_FastCharStream_getColumn(t_FastCharStream *self)
            {
              jint result;
              OBJ_CALL(result = self->object.getColumn());
              return PyLong_FromLong((long) result);
            }

            static PyObject *t_FastCharStream_getEndColumn(t_FastCharStream *self)
            {
              jint result;
              OBJ_CALL(result = self->object.getEndColumn());
              return PyLong_FromLong((long) result);
            }

            static PyObject *t_FastCharStream_getEndLine(t_FastCharStream *self)
            {
              jint result;
              OBJ_CALL(result = self->object.getEndLine());
              return PyLong_FromLong((long) result);
            }

            static PyObject *t_FastCharStream_getLine(t_FastCharStream *self)
            {
              jint result;
              OBJ_CALL(result = self->object.getLine());
              return PyLong_FromLong((long) result);
            }

            static PyObject *t_FastCharStream_readChar(t_FastCharStream *self)
            {
              jchar result;
              OBJ_CALL(result = self->object.readChar());
              return c2p(result);
            }

            static PyObject *t_FastCharStream_get__beginColumn(t_FastCharStream *self, void *data)
            {
              jint value;
              OBJ_CALL(value = self->object.getBeginColumn());
              return PyLong_FromLong((long) value);
            }

            static PyObject *t_FastCharStream_get__beginLine(t_FastCharStream *self, void *data)
            {
              jint value;
              OBJ_CALL(value = self->object.getBeginLine());
              return PyLong_FromLong((long) value);
            }

            static PyObject *t_FastCharStream_get__column(t_FastCharStream *self, void *data)
            {
              jint value;
              OBJ_CALL(value = self->object.getColumn());
              return PyLong_FromLong((long) value);
            }

            static PyObject *t_FastCharStream_get__endColumn(t_FastCharStream *self, void *data)
            {
              jint value;
              OBJ_CALL(value = self->object.getEndColumn());
              return PyLong_FromLong((long) value);
            }

            static PyObject *t_FastCharStream_get__endLine(t_FastCharStream *self, void *data)
            {
              jint value;
              OBJ_CALL(value = self->object.getEndLine());
              return PyLong_FromLong((long) value);
            }

            static PyObject *t_FastCharStream_get__line(t_FastCharStream *self, void *data)
            {
              jint value;
              OBJ_CALL(value = self->object.getLine());
              return PyLong_FromLong((long) value);
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/spatial3d/geom/GeoBaseCompositeShape.h"
#include "org/apache/lucene/spatial3d/geom/GeoShape.h"
#include "java/io/InputStream.h"
#include "org/apache/lucene/spatial3d/geom/Bounds.h"
#include "java/lang/Class.h"
#include "java/lang/Object.h"
#include "org/apache/lucene/spatial3d/geom/Plane.h"
#include "org/apache/lucene/spatial3d/geom/GeoPoint.h"
#include "java/io/OutputStream.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/spatial3d/geom/PlanetModel.h"
#include "org/apache/lucene/spatial3d/geom/Vector.h"
#include "org/apache/lucene/spatial3d/geom/Membership.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace spatial3d {
        namespace geom {

          ::java::lang::Class *GeoBaseCompositeShape::class$ = NULL;
          jmethodID *GeoBaseCompositeShape::mids$ = NULL;
          bool GeoBaseCompositeShape::live$ = false;

          jclass GeoBaseCompositeShape::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/spatial3d/geom/GeoBaseCompositeShape");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_fd580b4e02411290] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/spatial3d/geom/PlanetModel;)V");
              mids$[mid_init$_5d2a2bec6164dbe8] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/spatial3d/geom/PlanetModel;Ljava/io/InputStream;Ljava/lang/Class;)V");
              mids$[mid_addShape_5d877c12516f50e3] = env->getMethodID(cls, "addShape", "(Lorg/apache/lucene/spatial3d/geom/GeoShape;)V");
              mids$[mid_equals_8b72f2dcdde6fd1d] = env->getMethodID(cls, "equals", "(Ljava/lang/Object;)Z");
              mids$[mid_getBounds_bbfc0798cb5fe499] = env->getMethodID(cls, "getBounds", "(Lorg/apache/lucene/spatial3d/geom/Bounds;)V");
              mids$[mid_getEdgePoints_e945274bd0921a4a] = env->getMethodID(cls, "getEdgePoints", "()[Lorg/apache/lucene/spatial3d/geom/GeoPoint;");
              mids$[mid_getShape_3bec20a70e439f84] = env->getMethodID(cls, "getShape", "(I)Lorg/apache/lucene/spatial3d/geom/GeoShape;");
              mids$[mid_hashCode_9972fcc56b44e79d] = env->getMethodID(cls, "hashCode", "()I");
              mids$[mid_intersects_e74435b8d47a8bda] = env->getMethodID(cls, "intersects", "(Lorg/apache/lucene/spatial3d/geom/Plane;[Lorg/apache/lucene/spatial3d/geom/GeoPoint;[Lorg/apache/lucene/spatial3d/geom/Membership;)Z");
              mids$[mid_isWithin_ac70289ee56608c0] = env->getMethodID(cls, "isWithin", "(Lorg/apache/lucene/spatial3d/geom/Vector;)Z");
              mids$[mid_isWithin_5afbc0f2c6478de6] = env->getMethodID(cls, "isWithin", "(DDD)Z");
              mids$[mid_size_9972fcc56b44e79d] = env->getMethodID(cls, "size", "()I");
              mids$[mid_write_02fcdace254a9894] = env->getMethodID(cls, "write", "(Ljava/io/OutputStream;)V");

              class$ = new ::java::lang::Class(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          GeoBaseCompositeShape::GeoBaseCompositeShape(const ::org::apache::lucene::spatial3d::geom::PlanetModel & a0) : ::org::apache::lucene::spatial3d::geom::BasePlanetObject(env->newObject(initializeClass, &mids$, mid_init$_fd580b4e02411290, a0.this$)) {}

          GeoBaseCompositeShape::GeoBaseCompositeShape(const ::org::apache::lucene::spatial3d::geom::PlanetModel & a0, const ::java::io::InputStream & a1, const ::java::lang::Class & a2) : ::org::apache::lucene::spatial3d::geom::BasePlanetObject(env->newObject(initializeClass, &mids$, mid_init$_5d2a2bec6164dbe8, a0.this$, a1.this$, a2.this$)) {}

          void GeoBaseCompositeShape::addShape(const ::org::apache::lucene::spatial3d::geom::GeoShape & a0) const
          {
            env->callVoidMethod(this$, mids$[mid_addShape_5d877c12516f50e3], a0.this$);
          }

          jboolean GeoBaseCompositeShape::equals(const ::java::lang::Object & a0) const
          {
            return env->callBooleanMethod(this$, mids$[mid_equals_8b72f2dcdde6fd1d], a0.this$);
          }

          void GeoBaseCompositeShape::getBounds(const ::org::apache::lucene::spatial3d::geom::Bounds & a0) const
          {
            env->callVoidMethod(this$, mids$[mid_getBounds_bbfc0798cb5fe499], a0.this$);
          }

          JArray< ::org::apache::lucene::spatial3d::geom::GeoPoint > GeoBaseCompositeShape::getEdgePoints() const
          {
            return JArray< ::org::apache::lucene::spatial3d::geom::GeoPoint >(env->callObjectMethod(this$, mids$[mid_getEdgePoints_e945274bd0921a4a]));
          }

          ::org::apache::lucene::spatial3d::geom::GeoShape GeoBaseCompositeShape::getShape(jint a0) const
          {
            return ::org::apache::lucene::spatial3d::geom::GeoShape(env->callObjectMethod(this$, mids$[mid_getShape_3bec20a70e439f84], a0));
          }

          jint GeoBaseCompositeShape::hashCode() const
          {
            return env->callIntMethod(this$, mids$[mid_hashCode_9972fcc56b44e79d]);
          }

          jboolean GeoBaseCompositeShape::intersects(const ::org::apache::lucene::spatial3d::geom::Plane & a0, const JArray< ::org::apache::lucene::spatial3d::geom::GeoPoint > & a1, const JArray< ::org::apache::lucene::spatial3d::geom::Membership > & a2) const
          {
            return env->callBooleanMethod(this$, mids$[mid_intersects_e74435b8d47a8bda], a0.this$, a1.this$, a2.this$);
          }

          jboolean GeoBaseCompositeShape::isWithin(const ::org::apache::lucene::spatial3d::geom::Vector & a0) const
          {
            return env->callBooleanMethod(this$, mids$[mid_isWithin_ac70289ee56608c0], a0.this$);
          }

          jboolean GeoBaseCompositeShape::isWithin(jdouble a0, jdouble a1, jdouble a2) const
          {
            return env->callBooleanMethod(this$, mids$[mid_isWithin_5afbc0f2c6478de6], a0, a1, a2);
          }

          jint GeoBaseCompositeShape::size() const
          {
            return env->callIntMethod(this$, mids$[mid_size_9972fcc56b44e79d]);
          }

          void GeoBaseCompositeShape::write(const ::java::io::OutputStream & a0) const
          {
            env->callVoidMethod(this$, mids$[mid_write_02fcdace254a9894], a0.this$);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace spatial3d {
        namespace geom {
          static PyObject *t_GeoBaseCompositeShape_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_GeoBaseCompositeShape_instance_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_GeoBaseCompositeShape_of_(t_GeoBaseCompositeShape *self, PyObject *args);
          static int t_GeoBaseCompositeShape_init_(t_GeoBaseCompositeShape *self, PyObject *args, PyObject *kwds);
          static PyObject *t_GeoBaseCompositeShape_addShape(t_GeoBaseCompositeShape *self, PyObject *arg);
          static PyObject *t_GeoBaseCompositeShape_equals(t_GeoBaseCompositeShape *self, PyObject *args);
          static PyObject *t_GeoBaseCompositeShape_getBounds(t_GeoBaseCompositeShape *self, PyObject *arg);
          static PyObject *t_GeoBaseCompositeShape_getEdgePoints(t_GeoBaseCompositeShape *self);
          static PyObject *t_GeoBaseCompositeShape_getShape(t_GeoBaseCompositeShape *self, PyObject *arg);
          static PyObject *t_GeoBaseCompositeShape_hashCode(t_GeoBaseCompositeShape *self, PyObject *args);
          static PyObject *t_GeoBaseCompositeShape_intersects(t_GeoBaseCompositeShape *self, PyObject *args);
          static PyObject *t_GeoBaseCompositeShape_isWithin(t_GeoBaseCompositeShape *self, PyObject *args);
          static PyObject *t_GeoBaseCompositeShape_size(t_GeoBaseCompositeShape *self);
          static PyObject *t_GeoBaseCompositeShape_write(t_GeoBaseCompositeShape *self, PyObject *args);
          static PyObject *t_GeoBaseCompositeShape_get__edgePoints(t_GeoBaseCompositeShape *self, void *data);
          static PyObject *t_GeoBaseCompositeShape_get__parameters_(t_GeoBaseCompositeShape *self, void *data);
          static PyGetSetDef t_GeoBaseCompositeShape__fields_[] = {
            DECLARE_GET_FIELD(t_GeoBaseCompositeShape, edgePoints),
            DECLARE_GET_FIELD(t_GeoBaseCompositeShape, parameters_),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_GeoBaseCompositeShape__methods_[] = {
            DECLARE_METHOD(t_GeoBaseCompositeShape, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_GeoBaseCompositeShape, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_GeoBaseCompositeShape, of_, METH_VARARGS),
            DECLARE_METHOD(t_GeoBaseCompositeShape, addShape, METH_O),
            DECLARE_METHOD(t_GeoBaseCompositeShape, equals, METH_VARARGS),
            DECLARE_METHOD(t_GeoBaseCompositeShape, getBounds, METH_O),
            DECLARE_METHOD(t_GeoBaseCompositeShape, getEdgePoints, METH_NOARGS),
            DECLARE_METHOD(t_GeoBaseCompositeShape, getShape, METH_O),
            DECLARE_METHOD(t_GeoBaseCompositeShape, hashCode, METH_VARARGS),
            DECLARE_METHOD(t_GeoBaseCompositeShape, intersects, METH_VARARGS),
            DECLARE_METHOD(t_GeoBaseCompositeShape, isWithin, METH_VARARGS),
            DECLARE_METHOD(t_GeoBaseCompositeShape, size, METH_NOARGS),
            DECLARE_METHOD(t_GeoBaseCompositeShape, write, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          static PyType_Slot PY_TYPE_SLOTS(GeoBaseCompositeShape)[] = {
            { Py_tp_methods, t_GeoBaseCompositeShape__methods_ },
            { Py_tp_init, (void *) t_GeoBaseCompositeShape_init_ },
            { Py_tp_getset, t_GeoBaseCompositeShape__fields_ },
            { 0, NULL }
          };

          static PyType_Def *PY_TYPE_BASES(GeoBaseCompositeShape)[] = {
            &PY_TYPE_DEF(::org::apache::lucene::spatial3d::geom::BasePlanetObject),
            NULL
          };

          DEFINE_TYPE(GeoBaseCompositeShape, t_GeoBaseCompositeShape, GeoBaseCompositeShape);
          PyObject *t_GeoBaseCompositeShape::wrap_Object(const GeoBaseCompositeShape& object, PyTypeObject *p0)
          {
            PyObject *obj = t_GeoBaseCompositeShape::wrap_Object(object);
            if (obj != NULL && obj != Py_None)
            {
              t_GeoBaseCompositeShape *self = (t_GeoBaseCompositeShape *) obj;
              self->parameters[0] = p0;
            }
            return obj;
          }

          PyObject *t_GeoBaseCompositeShape::wrap_jobject(const jobject& object, PyTypeObject *p0)
          {
            PyObject *obj = t_GeoBaseCompositeShape::wrap_jobject(object);
            if (obj != NULL && obj != Py_None)
            {
              t_GeoBaseCompositeShape *self = (t_GeoBaseCompositeShape *) obj;
              self->parameters[0] = p0;
            }
            return obj;
          }

          void t_GeoBaseCompositeShape::install(PyObject *module)
          {
            installType(&PY_TYPE(GeoBaseCompositeShape), &PY_TYPE_DEF(GeoBaseCompositeShape), module, "GeoBaseCompositeShape", 0);
          }

          void t_GeoBaseCompositeShape::initialize(PyObject *module)
          {
            PyObject_SetAttrString((PyObject *) PY_TYPE(GeoBaseCompositeShape), "class_", make_descriptor(GeoBaseCompositeShape::initializeClass, 1));
            PyObject_SetAttrString((PyObject *) PY_TYPE(GeoBaseCompositeShape), "wrapfn_", make_descriptor(t_GeoBaseCompositeShape::wrap_jobject));
            PyObject_SetAttrString((PyObject *) PY_TYPE(GeoBaseCompositeShape), "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_GeoBaseCompositeShape_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, GeoBaseCompositeShape::initializeClass, 1)))
              return NULL;
            return t_GeoBaseCompositeShape::wrap_Object(GeoBaseCompositeShape(((t_GeoBaseCompositeShape *) arg)->object.this$));
          }
          static PyObject *t_GeoBaseCompositeShape_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, GeoBaseCompositeShape::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static PyObject *t_GeoBaseCompositeShape_of_(t_GeoBaseCompositeShape *self, PyObject *args)
          {
            if (!parseArg(args, "T", 1, &(self->parameters)))
              Py_RETURN_SELF;
            return PyErr_SetArgsError((PyObject *) self, "of_", args);
          }

          static int t_GeoBaseCompositeShape_init_(t_GeoBaseCompositeShape *self, PyObject *args, PyObject *kwds)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 1:
              {
                ::org::apache::lucene::spatial3d::geom::PlanetModel a0((jobject) NULL);
                GeoBaseCompositeShape object((jobject) NULL);

                if (!parseArgs(args, "k", ::org::apache::lucene::spatial3d::geom::PlanetModel::initializeClass, &a0))
                {
                  INT_CALL(object = GeoBaseCompositeShape(a0));
                  self->object = object;
                  break;
                }
              }
              goto err;
             case 3:
              {
                ::org::apache::lucene::spatial3d::geom::PlanetModel a0((jobject) NULL);
                ::java::io::InputStream a1((jobject) NULL);
                ::java::lang::Class a2((jobject) NULL);
                PyTypeObject **p2;
                GeoBaseCompositeShape object((jobject) NULL);

                if (!parseArgs(args, "kkK", ::org::apache::lucene::spatial3d::geom::PlanetModel::initializeClass, ::java::io::InputStream::initializeClass, ::java::lang::Class::initializeClass, &a0, &a1, &a2, &p2, ::java::lang::t_Class::parameters_))
                {
                  INT_CALL(object = GeoBaseCompositeShape(a0, a1, a2));
                  self->object = object;
                  break;
                }
              }
             default:
             err:
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_GeoBaseCompositeShape_addShape(t_GeoBaseCompositeShape *self, PyObject *arg)
          {
            ::org::apache::lucene::spatial3d::geom::GeoShape a0((jobject) NULL);

            if (!parseArg(arg, "k", ::org::apache::lucene::spatial3d::geom::GeoShape::initializeClass, &a0))
            {
              OBJ_CALL(self->object.addShape(a0));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError((PyObject *) self, "addShape", arg);
            return NULL;
          }

          static PyObject *t_GeoBaseCompositeShape_equals(t_GeoBaseCompositeShape *self, PyObject *args)
          {
            ::java::lang::Object a0((jobject) NULL);
            jboolean result;

            if (!parseArgs(args, "o", &a0))
            {
              OBJ_CALL(result = self->object.equals(a0));
              Py_RETURN_BOOL(result);
            }

            return callSuper(PY_TYPE(GeoBaseCompositeShape), (PyObject *) self, "equals", args, 2);
          }

          static PyObject *t_GeoBaseCompositeShape_getBounds(t_GeoBaseCompositeShape *self, PyObject *arg)
          {
            ::org::apache::lucene::spatial3d::geom::Bounds a0((jobject) NULL);

            if (!parseArg(arg, "k", ::org::apache::lucene::spatial3d::geom::Bounds::initializeClass, &a0))
            {
              OBJ_CALL(self->object.getBounds(a0));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError((PyObject *) self, "getBounds", arg);
            return NULL;
          }

          static PyObject *t_GeoBaseCompositeShape_getEdgePoints(t_GeoBaseCompositeShape *self)
          {
            JArray< ::org::apache::lucene::spatial3d::geom::GeoPoint > result((jobject) NULL);
            OBJ_CALL(result = self->object.getEdgePoints());
            return JArray<jobject>(result.this$).wrap(::org::apache::lucene::spatial3d::geom::t_GeoPoint::wrap_jobject);
          }

          static PyObject *t_GeoBaseCompositeShape_getShape(t_GeoBaseCompositeShape *self, PyObject *arg)
          {
            jint a0;
            ::org::apache::lucene::spatial3d::geom::GeoShape result((jobject) NULL);

            if (!parseArg(arg, "I", &a0))
            {
              OBJ_CALL(result = self->object.getShape(a0));
              return self->parameters[0] != NULL ? wrapType(self->parameters[0], result.this$) : ::org::apache::lucene::spatial3d::geom::t_GeoShape::wrap_Object(result);
            }

            PyErr_SetArgsError((PyObject *) self, "getShape", arg);
            return NULL;
          }

          static PyObject *t_GeoBaseCompositeShape_hashCode(t_GeoBaseCompositeShape *self, PyObject *args)
          {
            jint result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.hashCode());
              return PyLong_FromLong((long) result);
            }

            return callSuper(PY_TYPE(GeoBaseCompositeShape), (PyObject *) self, "hashCode", args, 2);
          }

          static PyObject *t_GeoBaseCompositeShape_intersects(t_GeoBaseCompositeShape *self, PyObject *args)
          {
            ::org::apache::lucene::spatial3d::geom::Plane a0((jobject) NULL);
            JArray< ::org::apache::lucene::spatial3d::geom::GeoPoint > a1((jobject) NULL);
            JArray< ::org::apache::lucene::spatial3d::geom::Membership > a2((jobject) NULL);
            jboolean result;

            if (!parseArgs(args, "k[k[k", ::org::apache::lucene::spatial3d::geom::Plane::initializeClass, ::org::apache::lucene::spatial3d::geom::GeoPoint::initializeClass, ::org::apache::lucene::spatial3d::geom::Membership::initializeClass, &a0, &a1, &a2))
            {
              OBJ_CALL(result = self->object.intersects(a0, a1, a2));
              Py_RETURN_BOOL(result);
            }

            PyErr_SetArgsError((PyObject *) self, "intersects", args);
            return NULL;
          }

          static PyObject *t_GeoBaseCompositeShape_isWithin(t_GeoBaseCompositeShape *self, PyObject *args)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 1:
              {
                ::org::apache::lucene::spatial3d::geom::Vector a0((jobject) NULL);
                jboolean result;

                if (!parseArgs(args, "k", ::org::apache::lucene::spatial3d::geom::Vector::initializeClass, &a0))
                {
                  OBJ_CALL(result = self->object.isWithin(a0));
                  Py_RETURN_BOOL(result);
                }
              }
              break;
             case 3:
              {
                jdouble a0;
                jdouble a1;
                jdouble a2;
                jboolean result;

                if (!parseArgs(args, "DDD", &a0, &a1, &a2))
                {
                  OBJ_CALL(result = self->object.isWithin(a0, a1, a2));
                  Py_RETURN_BOOL(result);
                }
              }
            }

            PyErr_SetArgsError((PyObject *) self, "isWithin", args);
            return NULL;
          }

          static PyObject *t_GeoBaseCompositeShape_size(t_GeoBaseCompositeShape *self)
          {
            jint result;
            OBJ_CALL(result = self->object.size());
            return PyLong_FromLong((long) result);
          }

          static PyObject *t_GeoBaseCompositeShape_write(t_GeoBaseCompositeShape *self, PyObject *args)
          {
            ::java::io::OutputStream a0((jobject) NULL);

            if (!parseArgs(args, "k", ::java::io::OutputStream::initializeClass, &a0))
            {
              OBJ_CALL(self->object.write(a0));
              Py_RETURN_NONE;
            }

            return callSuper(PY_TYPE(GeoBaseCompositeShape), (PyObject *) self, "write", args, 2);
          }
          static PyObject *t_GeoBaseCompositeShape_get__parameters_(t_GeoBaseCompositeShape *self, void *data)
          {
            return typeParameters(self->parameters, sizeof(self->parameters));
          }

          static PyObject *t_GeoBaseCompositeShape_get__edgePoints(t_GeoBaseCompositeShape *self, void *data)
          {
            JArray< ::org::apache::lucene::spatial3d::geom::GeoPoint > value((jobject) NULL);
            OBJ_CALL(value = self->object.getEdgePoints());
            return JArray<jobject>(value.this$).wrap(::org::apache::lucene::spatial3d::geom::t_GeoPoint::wrap_jobject);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/codecs/uniformsplit/sharedterms/STUniformSplitPostingsFormat.h"
#include "org/apache/lucene/codecs/uniformsplit/BlockDecoder.h"
#include "java/lang/String.h"
#include "org/apache/lucene/codecs/uniformsplit/BlockEncoder.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace codecs {
        namespace uniformsplit {
          namespace sharedterms {

            ::java::lang::Class *STUniformSplitPostingsFormat::class$ = NULL;
            jmethodID *STUniformSplitPostingsFormat::mids$ = NULL;
            bool STUniformSplitPostingsFormat::live$ = false;
            ::java::lang::String *STUniformSplitPostingsFormat::NAME = NULL;
            ::java::lang::String *STUniformSplitPostingsFormat::TERMS_BLOCKS_EXTENSION = NULL;
            ::java::lang::String *STUniformSplitPostingsFormat::TERMS_DICTIONARY_EXTENSION = NULL;
            jint STUniformSplitPostingsFormat::VERSION_CURRENT = (jint) 0;

            jclass STUniformSplitPostingsFormat::initializeClass(bool getOnly)
            {
              if (getOnly)
                return (jclass) (live$ ? class$->this$ : NULL);
              if (class$ == NULL)
              {
                jclass cls = (jclass) env->findClass("org/apache/lucene/codecs/uniformsplit/sharedterms/STUniformSplitPostingsFormat");

                mids$ = new jmethodID[max_mid];
                mids$[mid_init$_f2cc1bce94666404] = env->getMethodID(cls, "<init>", "()V");
                mids$[mid_init$_d9dbd4ff0c4d75dd] = env->getMethodID(cls, "<init>", "(IILorg/apache/lucene/codecs/uniformsplit/BlockEncoder;Lorg/apache/lucene/codecs/uniformsplit/BlockDecoder;Z)V");
                mids$[mid_createUniformSplitTermsWriter_259ba6d60343a68e] = env->getMethodID(cls, "createUniformSplitTermsWriter", "(Lorg/apache/lucene/codecs/PostingsWriterBase;Lorg/apache/lucene/index/SegmentWriteState;IILorg/apache/lucene/codecs/uniformsplit/BlockEncoder;)Lorg/apache/lucene/codecs/FieldsConsumer;");
                mids$[mid_createUniformSplitTermsReader_1493bdf3736e983b] = env->getMethodID(cls, "createUniformSplitTermsReader", "(Lorg/apache/lucene/codecs/PostingsReaderBase;Lorg/apache/lucene/index/SegmentReadState;Lorg/apache/lucene/codecs/uniformsplit/BlockDecoder;)Lorg/apache/lucene/codecs/FieldsProducer;");

                class$ = new ::java::lang::Class(cls);
                cls = (jclass) class$->this$;

                NAME = new ::java::lang::String(env->getStaticObjectField(cls, "NAME", "Ljava/lang/String;"));
                TERMS_BLOCKS_EXTENSION = new ::java::lang::String(env->getStaticObjectField(cls, "TERMS_BLOCKS_EXTENSION", "Ljava/lang/String;"));
                TERMS_DICTIONARY_EXTENSION = new ::java::lang::String(env->getStaticObjectField(cls, "TERMS_DICTIONARY_EXTENSION", "Ljava/lang/String;"));
                VERSION_CURRENT = env->getStaticIntField(cls, "VERSION_CURRENT");
                live$ = true;
              }
              return (jclass) class$->this$;
            }

            STUniformSplitPostingsFormat::STUniformSplitPostingsFormat() : ::org::apache::lucene::codecs::uniformsplit::UniformSplitPostingsFormat(env->newObject(initializeClass, &mids$, mid_init$_f2cc1bce94666404)) {}

            STUniformSplitPostingsFormat::STUniformSplitPostingsFormat(jint a0, jint a1, const ::org::apache::lucene::codecs::uniformsplit::BlockEncoder & a2, const ::org::apache::lucene::codecs::uniformsplit::BlockDecoder & a3, jboolean a4) : ::org::apache::lucene::codecs::uniformsplit::UniformSplitPostingsFormat(env->newObject(initializeClass, &mids$, mid_init$_d9dbd4ff0c4d75dd, a0, a1, a2.this$, a3.this$, a4)) {}
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace codecs {
        namespace uniformsplit {
          namespace sharedterms {
            static PyObject *t_STUniformSplitPostingsFormat_cast_(PyTypeObject *type, PyObject *arg);
            static PyObject *t_STUniformSplitPostingsFormat_instance_(PyTypeObject *type, PyObject *arg);
            static int t_STUniformSplitPostingsFormat_init_(t_STUniformSplitPostingsFormat *self, PyObject *args, PyObject *kwds);

            static PyMethodDef t_STUniformSplitPostingsFormat__methods_[] = {
              DECLARE_METHOD(t_STUniformSplitPostingsFormat, cast_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_STUniformSplitPostingsFormat, instance_, METH_O | METH_CLASS),
              { NULL, NULL, 0, NULL }
            };

            static PyType_Slot PY_TYPE_SLOTS(STUniformSplitPostingsFormat)[] = {
              { Py_tp_methods, t_STUniformSplitPostingsFormat__methods_ },
              { Py_tp_init, (void *) t_STUniformSplitPostingsFormat_init_ },
              { 0, NULL }
            };

            static PyType_Def *PY_TYPE_BASES(STUniformSplitPostingsFormat)[] = {
              &PY_TYPE_DEF(::org::apache::lucene::codecs::uniformsplit::UniformSplitPostingsFormat),
              NULL
            };

            DEFINE_TYPE(STUniformSplitPostingsFormat, t_STUniformSplitPostingsFormat, STUniformSplitPostingsFormat);

            void t_STUniformSplitPostingsFormat::install(PyObject *module)
            {
              installType(&PY_TYPE(STUniformSplitPostingsFormat), &PY_TYPE_DEF(STUniformSplitPostingsFormat), module, "STUniformSplitPostingsFormat", 0);
            }

            void t_STUniformSplitPostingsFormat::initialize(PyObject *module)
            {
              PyObject_SetAttrString((PyObject *) PY_TYPE(STUniformSplitPostingsFormat), "class_", make_descriptor(STUniformSplitPostingsFormat::initializeClass, 1));
              PyObject_SetAttrString((PyObject *) PY_TYPE(STUniformSplitPostingsFormat), "wrapfn_", make_descriptor(t_STUniformSplitPostingsFormat::wrap_jobject));
              PyObject_SetAttrString((PyObject *) PY_TYPE(STUniformSplitPostingsFormat), "boxfn_", make_descriptor(boxObject));
              env->getClass(STUniformSplitPostingsFormat::initializeClass);
              PyObject_SetAttrString((PyObject *) PY_TYPE(STUniformSplitPostingsFormat), "NAME", make_descriptor(j2p(*STUniformSplitPostingsFormat::NAME)));
              PyObject_SetAttrString((PyObject *) PY_TYPE(STUniformSplitPostingsFormat), "TERMS_BLOCKS_EXTENSION", make_descriptor(j2p(*STUniformSplitPostingsFormat::TERMS_BLOCKS_EXTENSION)));
              PyObject_SetAttrString((PyObject *) PY_TYPE(STUniformSplitPostingsFormat), "TERMS_DICTIONARY_EXTENSION", make_descriptor(j2p(*STUniformSplitPostingsFormat::TERMS_DICTIONARY_EXTENSION)));
              PyObject_SetAttrString((PyObject *) PY_TYPE(STUniformSplitPostingsFormat), "VERSION_CURRENT", make_descriptor(STUniformSplitPostingsFormat::VERSION_CURRENT));
            }

            static PyObject *t_STUniformSplitPostingsFormat_cast_(PyTypeObject *type, PyObject *arg)
            {
              if (!(arg = castCheck(arg, STUniformSplitPostingsFormat::initializeClass, 1)))
                return NULL;
              return t_STUniformSplitPostingsFormat::wrap_Object(STUniformSplitPostingsFormat(((t_STUniformSplitPostingsFormat *) arg)->object.this$));
            }
            static PyObject *t_STUniformSplitPostingsFormat_instance_(PyTypeObject *type, PyObject *arg)
            {
              if (!castCheck(arg, STUniformSplitPostingsFormat::initializeClass, 0))
                Py_RETURN_FALSE;
              Py_RETURN_TRUE;
            }

            static int t_STUniformSplitPostingsFormat_init_(t_STUniformSplitPostingsFormat *self, PyObject *args, PyObject *kwds)
            {
              switch (PyTuple_GET_SIZE(args)) {
               case 0:
                {
                  STUniformSplitPostingsFormat object((jobject) NULL);

                  INT_CALL(object = STUniformSplitPostingsFormat());
                  self->object = object;
                  break;
                }
               case 5:
                {
                  jint a0;
                  jint a1;
                  ::org::apache::lucene::codecs::uniformsplit::BlockEncoder a2((jobject) NULL);
                  ::org::apache::lucene::codecs::uniformsplit::BlockDecoder a3((jobject) NULL);
                  jboolean a4;
                  STUniformSplitPostingsFormat object((jobject) NULL);

                  if (!parseArgs(args, "IIkkZ", ::org::apache::lucene::codecs::uniformsplit::BlockEncoder::initializeClass, ::org::apache::lucene::codecs::uniformsplit::BlockDecoder::initializeClass, &a0, &a1, &a2, &a3, &a4))
                  {
                    INT_CALL(object = STUniformSplitPostingsFormat(a0, a1, a2, a3, a4));
                    self->object = object;
                    break;
                  }
                }
               default:
                PyErr_SetArgsError((PyObject *) self, "__init__", args);
                return -1;
              }

              return 0;
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/codecs/uniformsplit/RamUsageUtil.h"
#include "org/apache/lucene/util/BytesRef.h"
#include "org/apache/lucene/index/TermState.h"
#include "org/apache/lucene/util/BytesRefBuilder.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace codecs {
        namespace uniformsplit {

          ::java::lang::Class *RamUsageUtil::class$ = NULL;
          jmethodID *RamUsageUtil::mids$ = NULL;
          bool RamUsageUtil::live$ = false;

          jclass RamUsageUtil::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/codecs/uniformsplit/RamUsageUtil");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_f2cc1bce94666404] = env->getMethodID(cls, "<init>", "()V");
              mids$[mid_ramBytesUsed_48fe61a8eb679d1f] = env->getStaticMethodID(cls, "ramBytesUsed", "(Lorg/apache/lucene/index/TermState;)J");
              mids$[mid_ramBytesUsed_6f6ee5bba7f22d4c] = env->getStaticMethodID(cls, "ramBytesUsed", "(Lorg/apache/lucene/util/BytesRef;)J");
              mids$[mid_ramBytesUsed_b0acf8af0cd4dbe7] = env->getStaticMethodID(cls, "ramBytesUsed", "(Lorg/apache/lucene/util/BytesRefBuilder;)J");
              mids$[mid_ramBytesUsedByByteArrayOfLength_0f1d64a641e8af53] = env->getStaticMethodID(cls, "ramBytesUsedByByteArrayOfLength", "(I)J");
              mids$[mid_ramBytesUsedByHashMapOfSize_0f1d64a641e8af53] = env->getStaticMethodID(cls, "ramBytesUsedByHashMapOfSize", "(I)J");
              mids$[mid_ramBytesUsedByObjectArrayOfLength_0f1d64a641e8af53] = env->getStaticMethodID(cls, "ramBytesUsedByObjectArrayOfLength", "(I)J");
              mids$[mid_ramBytesUsedByUnmodifiableArrayListOfSize_0f1d64a641e8af53] = env->getStaticMethodID(cls, "ramBytesUsedByUnmodifiableArrayListOfSize", "(I)J");

              class$ = new ::java::lang::Class(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          RamUsageUtil::RamUsageUtil() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_f2cc1bce94666404)) {}

          jlong RamUsageUtil::ramBytesUsed(const ::org::apache::lucene::index::TermState & a0)
          {
            jclass cls = env->getClass(initializeClass);
            return env->callStaticLongMethod(cls, mids$[mid_ramBytesUsed_48fe61a8eb679d1f], a0.this$);
          }

          jlong RamUsageUtil::ramBytesUsed(const ::org::apache::lucene::util::BytesRef & a0)
          {
            jclass cls = env->getClass(initializeClass);
            return env->callStaticLongMethod(cls, mids$[mid_ramBytesUsed_6f6ee5bba7f22d4c], a0.this$);
          }

          jlong RamUsageUtil::ramBytesUsed(const ::org::apache::lucene::util::BytesRefBuilder & a0)
          {
            jclass cls = env->getClass(initializeClass);
            return env->callStaticLongMethod(cls, mids$[mid_ramBytesUsed_b0acf8af0cd4dbe7], a0.this$);
          }

          jlong RamUsageUtil::ramBytesUsedByByteArrayOfLength(jint a0)
          {
            jclass cls = env->getClass(initializeClass);
            return env->callStaticLongMethod(cls, mids$[mid_ramBytesUsedByByteArrayOfLength_0f1d64a641e8af53], a0);
          }

          jlong RamUsageUtil::ramBytesUsedByHashMapOfSize(jint a0)
          {
            jclass cls = env->getClass(initializeClass);
            return env->callStaticLongMethod(cls, mids$[mid_ramBytesUsedByHashMapOfSize_0f1d64a641e8af53], a0);
          }

          jlong RamUsageUtil::ramBytesUsedByObjectArrayOfLength(jint a0)
          {
            jclass cls = env->getClass(initializeClass);
            return env->callStaticLongMethod(cls, mids$[mid_ramBytesUsedByObjectArrayOfLength_0f1d64a641e8af53], a0);
          }

          jlong RamUsageUtil::ramBytesUsedByUnmodifiableArrayListOfSize(jint a0)
          {
            jclass cls = env->getClass(initializeClass);
            return env->callStaticLongMethod(cls, mids$[mid_ramBytesUsedByUnmodifiableArrayListOfSize_0f1d64a641e8af53], a0);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace codecs {
        namespace uniformsplit {
          static PyObject *t_RamUsageUtil_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_RamUsageUtil_instance_(PyTypeObject *type, PyObject *arg);
          static int t_RamUsageUtil_init_(t_RamUsageUtil *self, PyObject *args, PyObject *kwds);
          static PyObject *t_RamUsageUtil_ramBytesUsed(PyTypeObject *type, PyObject *args);
          static PyObject *t_RamUsageUtil_ramBytesUsedByByteArrayOfLength(PyTypeObject *type, PyObject *arg);
          static PyObject *t_RamUsageUtil_ramBytesUsedByHashMapOfSize(PyTypeObject *type, PyObject *arg);
          static PyObject *t_RamUsageUtil_ramBytesUsedByObjectArrayOfLength(PyTypeObject *type, PyObject *arg);
          static PyObject *t_RamUsageUtil_ramBytesUsedByUnmodifiableArrayListOfSize(PyTypeObject *type, PyObject *arg);

          static PyMethodDef t_RamUsageUtil__methods_[] = {
            DECLARE_METHOD(t_RamUsageUtil, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_RamUsageUtil, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_RamUsageUtil, ramBytesUsed, METH_VARARGS | METH_CLASS),
            DECLARE_METHOD(t_RamUsageUtil, ramBytesUsedByByteArrayOfLength, METH_O | METH_CLASS),
            DECLARE_METHOD(t_RamUsageUtil, ramBytesUsedByHashMapOfSize, METH_O | METH_CLASS),
            DECLARE_METHOD(t_RamUsageUtil, ramBytesUsedByObjectArrayOfLength, METH_O | METH_CLASS),
            DECLARE_METHOD(t_RamUsageUtil, ramBytesUsedByUnmodifiableArrayListOfSize, METH_O | METH_CLASS),
            { NULL, NULL, 0, NULL }
          };

          static PyType_Slot PY_TYPE_SLOTS(RamUsageUtil)[] = {
            { Py_tp_methods, t_RamUsageUtil__methods_ },
            { Py_tp_init, (void *) t_RamUsageUtil_init_ },
            { 0, NULL }
          };

          static PyType_Def *PY_TYPE_BASES(RamUsageUtil)[] = {
            &PY_TYPE_DEF(::java::lang::Object),
            NULL
          };

          DEFINE_TYPE(RamUsageUtil, t_RamUsageUtil, RamUsageUtil);

          void t_RamUsageUtil::install(PyObject *module)
          {
            installType(&PY_TYPE(RamUsageUtil), &PY_TYPE_DEF(RamUsageUtil), module, "RamUsageUtil", 0);
          }

          void t_RamUsageUtil::initialize(PyObject *module)
          {
            PyObject_SetAttrString((PyObject *) PY_TYPE(RamUsageUtil), "class_", make_descriptor(RamUsageUtil::initializeClass, 1));
            PyObject_SetAttrString((PyObject *) PY_TYPE(RamUsageUtil), "wrapfn_", make_descriptor(t_RamUsageUtil::wrap_jobject));
            PyObject_SetAttrString((PyObject *) PY_TYPE(RamUsageUtil), "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_RamUsageUtil_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, RamUsageUtil::initializeClass, 1)))
              return NULL;
            return t_RamUsageUtil::wrap_Object(RamUsageUtil(((t_RamUsageUtil *) arg)->object.this$));
          }
          static PyObject *t_RamUsageUtil_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, RamUsageUtil::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_RamUsageUtil_init_(t_RamUsageUtil *self, PyObject *args, PyObject *kwds)
          {
            RamUsageUtil object((jobject) NULL);

            INT_CALL(object = RamUsageUtil());
            self->object = object;

            return 0;
          }

          static PyObject *t_RamUsageUtil_ramBytesUsed(PyTypeObject *type, PyObject *args)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 1:
              {
                ::org::apache::lucene::index::TermState a0((jobject) NULL);
                jlong result;

                if (!parseArgs(args, "k", ::org::apache::lucene::index::TermState::initializeClass, &a0))
                {
                  OBJ_CALL(result = ::org::apache::lucene::codecs::uniformsplit::RamUsageUtil::ramBytesUsed(a0));
                  return PyLong_FromLongLong((PY_LONG_LONG) result);
                }
              }
              {
                ::org::apache::lucene::util::BytesRef a0((jobject) NULL);
                jlong result;

                if (!parseArgs(args, "k", ::org::apache::lucene::util::BytesRef::initializeClass, &a0))
                {
                  OBJ_CALL(result = ::org::apache::lucene::codecs::uniformsplit::RamUsageUtil::ramBytesUsed(a0));
                  return PyLong_FromLongLong((PY_LONG_LONG) result);
                }
              }
              {
                ::org::apache::lucene::util::BytesRefBuilder a0((jobject) NULL);
                jlong result;

                if (!parseArgs(args, "k", ::org::apache::lucene::util::BytesRefBuilder::initializeClass, &a0))
                {
                  OBJ_CALL(result = ::org::apache::lucene::codecs::uniformsplit::RamUsageUtil::ramBytesUsed(a0));
                  return PyLong_FromLongLong((PY_LONG_LONG) result);
                }
              }
            }

            PyErr_SetArgsError(type, "ramBytesUsed", args);
            return NULL;
          }

          static PyObject *t_RamUsageUtil_ramBytesUsedByByteArrayOfLength(PyTypeObject *type, PyObject *arg)
          {
            jint a0;
            jlong result;

            if (!parseArg(arg, "I", &a0))
            {
              OBJ_CALL(result = ::org::apache::lucene::codecs::uniformsplit::RamUsageUtil::ramBytesUsedByByteArrayOfLength(a0));
              return PyLong_FromLongLong((PY_LONG_LONG) result);
            }

            PyErr_SetArgsError(type, "ramBytesUsedByByteArrayOfLength", arg);
            return NULL;
          }

          static PyObject *t_RamUsageUtil_ramBytesUsedByHashMapOfSize(PyTypeObject *type, PyObject *arg)
          {
            jint a0;
            jlong result;

            if (!parseArg(arg, "I", &a0))
            {
              OBJ_CALL(result = ::org::apache::lucene::codecs::uniformsplit::RamUsageUtil::ramBytesUsedByHashMapOfSize(a0));
              return PyLong_FromLongLong((PY_LONG_LONG) result);
            }

            PyErr_SetArgsError(type, "ramBytesUsedByHashMapOfSize", arg);
            return NULL;
          }

          static PyObject *t_RamUsageUtil_ramBytesUsedByObjectArrayOfLength(PyTypeObject *type, PyObject *arg)
          {
            jint a0;
            jlong result;

            if (!parseArg(arg, "I", &a0))
            {
              OBJ_CALL(result = ::org::apache::lucene::codecs::uniformsplit::RamUsageUtil::ramBytesUsedByObjectArrayOfLength(a0));
              return PyLong_FromLongLong((PY_LONG_LONG) result);
            }

            PyErr_SetArgsError(type, "ramBytesUsedByObjectArrayOfLength", arg);
            return NULL;
          }

          static PyObject *t_RamUsageUtil_ramBytesUsedByUnmodifiableArrayListOfSize(PyTypeObject *type, PyObject *arg)
          {
            jint a0;
            jlong result;

            if (!parseArg(arg, "I", &a0))
            {
              OBJ_CALL(result = ::org::apache::lucene::codecs::uniformsplit::RamUsageUtil::ramBytesUsedByUnmodifiableArrayListOfSize(a0));
              return PyLong_FromLongLong((PY_LONG_LONG) result);
            }

            PyErr_SetArgsError(type, "ramBytesUsedByUnmodifiableArrayListOfSize", arg);
            return NULL;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/spatial3d/geom/Vector.h"
#include "java/lang/Class.h"
#include "java/lang/String.h"
#include "org/apache/lucene/spatial3d/geom/Vector.h"
#include "org/apache/lucene/spatial3d/geom/Membership.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace spatial3d {
        namespace geom {

          ::java::lang::Class *Vector::class$ = NULL;
          jmethodID *Vector::mids$ = NULL;
          jfieldID *Vector::fids$ = NULL;
          bool Vector::live$ = false;
          jdouble Vector::MINIMUM_ANGULAR_RESOLUTION = (jdouble) 0;
          jdouble Vector::MINIMUM_RESOLUTION = (jdouble) 0;
          jdouble Vector::MINIMUM_RESOLUTION_CUBED = (jdouble) 0;
          jdouble Vector::MINIMUM_RESOLUTION_SQUARED = (jdouble) 0;

          jclass Vector::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/spatial3d/geom/Vector");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_b51abdbbf62b08b6] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/spatial3d/geom/Vector;Lorg/apache/lucene/spatial3d/geom/Vector;)V");
              mids$[mid_init$_2a4b7af5c9ed138c] = env->getMethodID(cls, "<init>", "(DDD)V");
              mids$[mid_init$_8a692b267f78bb5c] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/spatial3d/geom/Vector;DDD)V");
              mids$[mid_init$_5d062ae8b01cf1b7] = env->getMethodID(cls, "<init>", "(DDDDDD)V");
              mids$[mid_crossProductEvaluateIsZero_f722fcb5e2446aa4] = env->getStaticMethodID(cls, "crossProductEvaluateIsZero", "(Lorg/apache/lucene/spatial3d/geom/Vector;Lorg/apache/lucene/spatial3d/geom/Vector;Lorg/apache/lucene/spatial3d/geom/Vector;)Z");
              mids$[mid_dotProduct_eeff1bdc68694797] = env->getMethodID(cls, "dotProduct", "(Lorg/apache/lucene/spatial3d/geom/Vector;)D");
              mids$[mid_dotProduct_5fe2cd44fc854b0c] = env->getMethodID(cls, "dotProduct", "(DDD)D");
              mids$[mid_equals_8b72f2dcdde6fd1d] = env->getMethodID(cls, "equals", "(Ljava/lang/Object;)Z");
              mids$[mid_hashCode_9972fcc56b44e79d] = env->getMethodID(cls, "hashCode", "()I");
              mids$[mid_isNumericallyIdentical_ac70289ee56608c0] = env->getMethodID(cls, "isNumericallyIdentical", "(Lorg/apache/lucene/spatial3d/geom/Vector;)Z");
              mids$[mid_isNumericallyIdentical_5afbc0f2c6478de6] = env->getMethodID(cls, "isNumericallyIdentical", "(DDD)Z");
              mids$[mid_isParallel_ac70289ee56608c0] = env->getMethodID(cls, "isParallel", "(Lorg/apache/lucene/spatial3d/geom/Vector;)Z");
              mids$[mid_isParallel_5afbc0f2c6478de6] = env->getMethodID(cls, "isParallel", "(DDD)Z");
              mids$[mid_isWithin_201d2a5698c3f8c8] = env->getMethodID(cls, "isWithin", "([Lorg/apache/lucene/spatial3d/geom/Membership;[Lorg/apache/lucene/spatial3d/geom/Membership;)Z");
              mids$[mid_linearDistance_eeff1bdc68694797] = env->getMethodID(cls, "linearDistance", "(Lorg/apache/lucene/spatial3d/geom/Vector;)D");
              mids$[mid_linearDistance_5fe2cd44fc854b0c] = env->getMethodID(cls, "linearDistance", "(DDD)D");
              mids$[mid_linearDistanceSquared_eeff1bdc68694797] = env->getMethodID(cls, "linearDistanceSquared", "(Lorg/apache/lucene/spatial3d/geom/Vector;)D");
              mids$[mid_linearDistanceSquared_5fe2cd44fc854b0c] = env->getMethodID(cls, "linearDistanceSquared", "(DDD)D");
              mids$[mid_magnitude_8c74b787998ce4bc] = env->getMethodID(cls, "magnitude", "()D");
              mids$[mid_magnitude_5fe2cd44fc854b0c] = env->getStaticMethodID(cls, "magnitude", "(DDD)D");
              mids$[mid_normalDistance_eeff1bdc68694797] = env->getMethodID(cls, "normalDistance", "(Lorg/apache/lucene/spatial3d/geom/Vector;)D");
              mids$[mid_normalDistance_5fe2cd44fc854b0c] = env->getMethodID(cls, "normalDistance", "(DDD)D");
              mids$[mid_normalDistanceSquared_eeff1bdc68694797] = env->getMethodID(cls, "normalDistanceSquared", "(Lorg/apache/lucene/spatial3d/geom/Vector;)D");
              mids$[mid_normalDistanceSquared_5fe2cd44fc854b0c] = env->getMethodID(cls, "normalDistanceSquared", "(DDD)D");
              mids$[mid_normalize_2106bddd563d95e8] = env->getMethodID(cls, "normalize", "()Lorg/apache/lucene/spatial3d/geom/Vector;");
              mids$[mid_rotateXY_ab1c84f96fc07d8b] = env->getMethodID(cls, "rotateXY", "(D)Lorg/apache/lucene/spatial3d/geom/Vector;");
              mids$[mid_rotateXY_7cc793041bb6428f] = env->getMethodID(cls, "rotateXY", "(DD)Lorg/apache/lucene/spatial3d/geom/Vector;");
              mids$[mid_rotateXZ_ab1c84f96fc07d8b] = env->getMethodID(cls, "rotateXZ", "(D)Lorg/apache/lucene/spatial3d/geom/Vector;");
              mids$[mid_rotateXZ_7cc793041bb6428f] = env->getMethodID(cls, "rotateXZ", "(DD)Lorg/apache/lucene/spatial3d/geom/Vector;");
              mids$[mid_rotateZY_ab1c84f96fc07d8b] = env->getMethodID(cls, "rotateZY", "(D)Lorg/apache/lucene/spatial3d/geom/Vector;");
              mids$[mid_rotateZY_7cc793041bb6428f] = env->getMethodID(cls, "rotateZY", "(DD)Lorg/apache/lucene/spatial3d/geom/Vector;");
              mids$[mid_toString_db9b55ba01e03e4b] = env->getMethodID(cls, "toString", "()Ljava/lang/String;");
              mids$[mid_translate_c40eadf14e9fd145] = env->getMethodID(cls, "translate", "(DDD)Lorg/apache/lucene/spatial3d/geom/Vector;");

              fids$ = new jfieldID[max_fid];
              fids$[fid_x] = env->getFieldID(cls, "x", "D");
              fids$[fid_y] = env->getFieldID(cls, "y", "D");
              fids$[fid_z] = env->getFieldID(cls, "z", "D");

              class$ = new ::java::lang::Class(cls);
              cls = (jclass) class$->this$;

              MINIMUM_ANGULAR_RESOLUTION = env->getStaticDoubleField(cls, "MINIMUM_ANGULAR_RESOLUTION");
              MINIMUM_RESOLUTION = env->getStaticDoubleField(cls, "MINIMUM_RESOLUTION");
              MINIMUM_RESOLUTION_CUBED = env->getStaticDoubleField(cls, "MINIMUM_RESOLUTION_CUBED");
              MINIMUM_RESOLUTION_SQUARED = env->getStaticDoubleField(cls, "MINIMUM_RESOLUTION_SQUARED");
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          Vector::Vector(const Vector & a0, const Vector & a1) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_b51abdbbf62b08b6, a0.this$, a1.this$)) {}

          Vector::Vector(jdouble a0, jdouble a1, jdouble a2) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_2a4b7af5c9ed138c, a0, a1, a2)) {}

          Vector::Vector(const Vector & a0, jdouble a1, jdouble a2, jdouble a3) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_8a692b267f78bb5c, a0.this$, a1, a2, a3)) {}

          Vector::Vector(jdouble a0, jdouble a1, jdouble a2, jdouble a3, jdouble a4, jdouble a5) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_5d062ae8b01cf1b7, a0, a1, a2, a3, a4, a5)) {}

          jboolean Vector::crossProductEvaluateIsZero(const Vector & a0, const Vector & a1, const Vector & a2)
          {
            jclass cls = env->getClass(initializeClass);
            return env->callStaticBooleanMethod(cls, mids$[mid_crossProductEvaluateIsZero_f722fcb5e2446aa4], a0.this$, a1.this$, a2.this$);
          }

          jdouble Vector::dotProduct(const Vector & a0) const
          {
            return env->callDoubleMethod(this$, mids$[mid_dotProduct_eeff1bdc68694797], a0.this$);
          }

          jdouble Vector::dotProduct(jdouble a0, jdouble a1, jdouble a2) const
          {
            return env->callDoubleMethod(this$, mids$[mid_dotProduct_5fe2cd44fc854b0c], a0, a1, a2);
          }

          jboolean Vector::equals(const ::java::lang::Object & a0) const
          {
            return env->callBooleanMethod(this$, mids$[mid_equals_8b72f2dcdde6fd1d], a0.this$);
          }

          jint Vector::hashCode() const
          {
            return env->callIntMethod(this$, mids$[mid_hashCode_9972fcc56b44e79d]);
          }

          jboolean Vector::isNumericallyIdentical(const Vector & a0) const
          {
            return env->callBooleanMethod(this$, mids$[mid_isNumericallyIdentical_ac70289ee56608c0], a0.this$);
          }

          jboolean Vector::isNumericallyIdentical(jdouble a0, jdouble a1, jdouble a2) const
          {
            return env->callBooleanMethod(this$, mids$[mid_isNumericallyIdentical_5afbc0f2c6478de6], a0, a1, a2);
          }

          jboolean Vector::isParallel(const Vector & a0) const
          {
            return env->callBooleanMethod(this$, mids$[mid_isParallel_ac70289ee56608c0], a0.this$);
          }

          jboolean Vector::isParallel(jdouble a0, jdouble a1, jdouble a2) const
          {
            return env->callBooleanMethod(this$, mids$[mid_isParallel_5afbc0f2c6478de6], a0, a1, a2);
          }

          jboolean Vector::isWithin(const JArray< ::org::apache::lucene::spatial3d::geom::Membership > & a0, const JArray< ::org::apache::lucene::spatial3d::geom::Membership > & a1) const
          {
            return env->callBooleanMethod(this$, mids$[mid_isWithin_201d2a5698c3f8c8], a0.this$, a1.this$);
          }

          jdouble Vector::linearDistance(const Vector & a0) const
          {
            return env->callDoubleMethod(this$, mids$[mid_linearDistance_eeff1bdc68694797], a0.this$);
          }

          jdouble Vector::linearDistance(jdouble a0, jdouble a1, jdouble a2) const
          {
            return env->callDoubleMethod(this$, mids$[mid_linearDistance_5fe2cd44fc854b0c], a0, a1, a2);
          }

          jdouble Vector::linearDistanceSquared(const Vector & a0) const
          {
            return env->callDoubleMethod(this$, mids$[mid_linearDistanceSquared_eeff1bdc68694797], a0.this$);
          }

          jdouble Vector::linearDistanceSquared(jdouble a0, jdouble a1, jdouble a2) const
          {
            return env->callDoubleMethod(this$, mids$[mid_linearDistanceSquared_5fe2cd44fc854b0c], a0, a1, a2);
          }

          jdouble Vector::magnitude() const
          {
            return env->callDoubleMethod(this$, mids$[mid_magnitude_8c74b787998ce4bc]);
          }

          jdouble Vector::magnitude(jdouble a0, jdouble a1, jdouble a2)
          {
            jclass cls = env->getClass(initializeClass);
            return env->callStaticDoubleMethod(cls, mids$[mid_magnitude_5fe2cd44fc854b0c], a0, a1, a2);
          }

          jdouble Vector::normalDistance(const Vector & a0) const
          {
            return env->callDoubleMethod(this$, mids$[mid_normalDistance_eeff1bdc68694797], a0.this$);
          }

          jdouble Vector::normalDistance(jdouble a0, jdouble a1, jdouble a2) const
          {
            return env->callDoubleMethod(this$, mids$[mid_normalDistance_5fe2cd44fc854b0c], a0, a1, a2);
          }

          jdouble Vector::normalDistanceSquared(const Vector & a0) const
          {
            return env->callDoubleMethod(this$, mids$[mid_normalDistanceSquared_eeff1bdc68694797], a0.this$);
          }

          jdouble Vector::normalDistanceSquared(jdouble a0, jdouble a1, jdouble a2) const
          {
            return env->callDoubleMethod(this$, mids$[mid_normalDistanceSquared_5fe2cd44fc854b0c], a0, a1, a2);
          }

          Vector Vector::normalize() const
          {
            return Vector(env->callObjectMethod(this$, mids$[mid_normalize_2106bddd563d95e8]));
          }

          Vector Vector::rotateXY(jdouble a0) const
          {
            return Vector(env->callObjectMethod(this$, mids$[mid_rotateXY_ab1c84f96fc07d8b], a0));
          }

          Vector Vector::rotateXY(jdouble a0, jdouble a1) const
          {
            return Vector(env->callObjectMethod(this$, mids$[mid_rotateXY_7cc793041bb6428f], a0, a1));
          }

          Vector Vector::rotateXZ(jdouble a0) const
          {
            return Vector(env->callObjectMethod(this$, mids$[mid_rotateXZ_ab1c84f96fc07d8b], a0));
          }

          Vector Vector::rotateXZ(jdouble a0, jdouble a1) const
          {
            return Vector(env->callObjectMethod(this$, mids$[mid_rotateXZ_7cc793041bb6428f], a0, a1));
          }

          Vector Vector::rotateZY(jdouble a0) const
          {
            return Vector(env->callObjectMethod(this$, mids$[mid_rotateZY_ab1c84f96fc07d8b], a0));
          }

          Vector Vector::rotateZY(jdouble a0, jdouble a1) const
          {
            return Vector(env->callObjectMethod(this$, mids$[mid_rotateZY_7cc793041bb6428f], a0, a1));
          }

          ::java::lang::String Vector::toString() const
          {
            return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_db9b55ba01e03e4b]));
          }

          Vector Vector::translate(jdouble a0, jdouble a1, jdouble a2) const
          {
            return Vector(env->callObjectMethod(this$, mids$[mid_translate_c40eadf14e9fd145], a0, a1, a2));
          }

          jdouble Vector::_get_x() const
          {
            return env->getDoubleField(this$, fids$[fid_x]);
          }

          jdouble Vector::_get_y() const
          {
            return env->getDoubleField(this$, fids$[fid_y]);
          }

          jdouble Vector::_get_z() const
          {
            return env->getDoubleField(this$, fids$[fid_z]);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace spatial3d {
        namespace geom {
          static PyObject *t_Vector_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_Vector_instance_(PyTypeObject *type, PyObject *arg);
          static int t_Vector_init_(t_Vector *self, PyObject *args, PyObject *kwds);
          static PyObject *t_Vector_crossProductEvaluateIsZero(PyTypeObject *type, PyObject *args);
          static PyObject *t_Vector_dotProduct(t_Vector *self, PyObject *args);
          static PyObject *t_Vector_equals(t_Vector *self, PyObject *args);
          static PyObject *t_Vector_hashCode(t_Vector *self, PyObject *args);
          static PyObject *t_Vector_isNumericallyIdentical(t_Vector *self, PyObject *args);
          static PyObject *t_Vector_isParallel(t_Vector *self, PyObject *args);
          static PyObject *t_Vector_isWithin(t_Vector *self, PyObject *args);
          static PyObject *t_Vector_linearDistance(t_Vector *self, PyObject *args);
          static PyObject *t_Vector_linearDistanceSquared(t_Vector *self, PyObject *args);
          static PyObject *t_Vector_magnitude(t_Vector *self);
          static PyObject *t_Vector_magnitude_(PyTypeObject *type, PyObject *args);
          static PyObject *t_Vector_normalDistance(t_Vector *self, PyObject *args);
          static PyObject *t_Vector_normalDistanceSquared(t_Vector *self, PyObject *args);
          static PyObject *t_Vector_normalize(t_Vector *self);
          static PyObject *t_Vector_rotateXY(t_Vector *self, PyObject *args);
          static PyObject *t_Vector_rotateXZ(t_Vector *self, PyObject *args);
          static PyObject *t_Vector_rotateZY(t_Vector *self, PyObject *args);
          static PyObject *t_Vector_toString(t_Vector *self, PyObject *args);
          static PyObject *t_Vector_translate(t_Vector *self, PyObject *args);
          static PyObject *t_Vector_get__x(t_Vector *self, void *data);
          static PyObject *t_Vector_get__y(t_Vector *self, void *data);
          static PyObject *t_Vector_get__z(t_Vector *self, void *data);

          static PyGetSetDef t_Vector__fields_[] = {
            DECLARE_GET_FIELD(t_Vector, x),
            DECLARE_GET_FIELD(t_Vector, y),
            DECLARE_GET_FIELD(t_Vector, z),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_Vector__methods_[] = {
            DECLARE_METHOD(t_Vector, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_Vector, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_Vector, crossProductEvaluateIsZero, METH_VARARGS | METH_CLASS),
            DECLARE_METHOD(t_Vector, dotProduct, METH_VARARGS),
            DECLARE_METHOD(t_Vector, equals, METH_VARARGS),
            DECLARE_METHOD(t_Vector, hashCode, METH_VARARGS),
            DECLARE_METHOD(t_Vector, isNumericallyIdentical, METH_VARARGS),
            DECLARE_METHOD(t_Vector, isParallel, METH_VARARGS),
            DECLARE_METHOD(t_Vector, isWithin, METH_VARARGS),
            DECLARE_METHOD(t_Vector, linearDistance, METH_VARARGS),
            DECLARE_METHOD(t_Vector, linearDistanceSquared, METH_VARARGS),
            DECLARE_METHOD(t_Vector, magnitude, METH_NOARGS),
            DECLARE_METHOD(t_Vector, magnitude_, METH_VARARGS | METH_CLASS),
            DECLARE_METHOD(t_Vector, normalDistance, METH_VARARGS),
            DECLARE_METHOD(t_Vector, normalDistanceSquared, METH_VARARGS),
            DECLARE_METHOD(t_Vector, normalize, METH_NOARGS),
            DECLARE_METHOD(t_Vector, rotateXY, METH_VARARGS),
            DECLARE_METHOD(t_Vector, rotateXZ, METH_VARARGS),
            DECLARE_METHOD(t_Vector, rotateZY, METH_VARARGS),
            DECLARE_METHOD(t_Vector, toString, METH_VARARGS),
            DECLARE_METHOD(t_Vector, translate, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          static PyType_Slot PY_TYPE_SLOTS(Vector)[] = {
            { Py_tp_methods, t_Vector__methods_ },
            { Py_tp_init, (void *) t_Vector_init_ },
            { Py_tp_getset, t_Vector__fields_ },
            { 0, NULL }
          };

          static PyType_Def *PY_TYPE_BASES(Vector)[] = {
            &PY_TYPE_DEF(::java::lang::Object),
            NULL
          };

          DEFINE_TYPE(Vector, t_Vector, Vector);

          void t_Vector::install(PyObject *module)
          {
            installType(&PY_TYPE(Vector), &PY_TYPE_DEF(Vector), module, "Vector", 0);
          }

          void t_Vector::initialize(PyObject *module)
          {
            PyObject_SetAttrString((PyObject *) PY_TYPE(Vector), "class_", make_descriptor(Vector::initializeClass, 1));
            PyObject_SetAttrString((PyObject *) PY_TYPE(Vector), "wrapfn_", make_descriptor(t_Vector::wrap_jobject));
            PyObject_SetAttrString((PyObject *) PY_TYPE(Vector), "boxfn_", make_descriptor(boxObject));
            env->getClass(Vector::initializeClass);
            PyObject_SetAttrString((PyObject *) PY_TYPE(Vector), "MINIMUM_ANGULAR_RESOLUTION", make_descriptor(Vector::MINIMUM_ANGULAR_RESOLUTION));
            PyObject_SetAttrString((PyObject *) PY_TYPE(Vector), "MINIMUM_RESOLUTION", make_descriptor(Vector::MINIMUM_RESOLUTION));
            PyObject_SetAttrString((PyObject *) PY_TYPE(Vector), "MINIMUM_RESOLUTION_CUBED", make_descriptor(Vector::MINIMUM_RESOLUTION_CUBED));
            PyObject_SetAttrString((PyObject *) PY_TYPE(Vector), "MINIMUM_RESOLUTION_SQUARED", make_descriptor(Vector::MINIMUM_RESOLUTION_SQUARED));
          }

          static PyObject *t_Vector_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, Vector::initializeClass, 1)))
              return NULL;
            return t_Vector::wrap_Object(Vector(((t_Vector *) arg)->object.this$));
          }
          static PyObject *t_Vector_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, Vector::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_Vector_init_(t_Vector *self, PyObject *args, PyObject *kwds)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 2:
              {
                Vector a0((jobject) NULL);
                Vector a1((jobject) NULL);
                Vector object((jobject) NULL);

                if (!parseArgs(args, "kk", Vector::initializeClass, Vector::initializeClass, &a0, &a1))
                {
                  INT_CALL(object = Vector(a0, a1));
                  self->object = object;
                  break;
                }
              }
              goto err;
             case 3:
              {
                jdouble a0;
                jdouble a1;
                jdouble a2;
                Vector object((jobject) NULL);

                if (!parseArgs(args, "DDD", &a0, &a1, &a2))
                {
                  INT_CALL(object = Vector(a0, a1, a2));
                  self->object = object;
                  break;
                }
              }
              goto err;
             case 4:
              {
                Vector a0((jobject) NULL);
                jdouble a1;
                jdouble a2;
                jdouble a3;
                Vector object((jobject) NULL);

                if (!parseArgs(args, "kDDD", Vector::initializeClass, &a0, &a1, &a2, &a3))
                {
                  INT_CALL(object = Vector(a0, a1, a2, a3));
                  self->object = object;
                  break;
                }
              }
              goto err;
             case 6:
              {
                jdouble a0;
                jdouble a1;
                jdouble a2;
                jdouble a3;
                jdouble a4;
                jdouble a5;
                Vector object((jobject) NULL);

                if (!parseArgs(args, "DDDDDD", &a0, &a1, &a2, &a3, &a4, &a5))
                {
                  INT_CALL(object = Vector(a0, a1, a2, a3, a4, a5));
                  self->object = object;
                  break;
                }
              }
             default:
             err:
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_Vector_crossProductEvaluateIsZero(PyTypeObject *type, PyObject *args)
          {
            Vector a0((jobject) NULL);
            Vector a1((jobject) NULL);
            Vector a2((jobject) NULL);
            jboolean result;

            if (!parseArgs(args, "kkk", Vector::initializeClass, Vector::initializeClass, Vector::initializeClass, &a0, &a1, &a2))
            {
              OBJ_CALL(result = ::org::apache::lucene::spatial3d::geom::Vector::crossProductEvaluateIsZero(a0, a1, a2));
              Py_RETURN_BOOL(result);
            }

            PyErr_SetArgsError(type, "crossProductEvaluateIsZero", args);
            return NULL;
          }

          static PyObject *t_Vector_dotProduct(t_Vector *self, PyObject *args)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 1:
              {
                Vector a0((jobject) NULL);
                jdouble result;

                if (!parseArgs(args, "k", Vector::initializeClass, &a0))
                {
                  OBJ_CALL(result = self->object.dotProduct(a0));
                  return PyFloat_FromDouble((double) result);
                }
              }
              break;
             case 3:
              {
                jdouble a0;
                jdouble a1;
                jdouble a2;
                jdouble result;

                if (!parseArgs(args, "DDD", &a0, &a1, &a2))
                {
                  OBJ_CALL(result = self->object.dotProduct(a0, a1, a2));
                  return PyFloat_FromDouble((double) result);
                }
              }
            }

            PyErr_SetArgsError((PyObject *) self, "dotProduct", args);
            return NULL;
          }

          static PyObject *t_Vector_equals(t_Vector *self, PyObject *args)
          {
            ::java::lang::Object a0((jobject) NULL);
            jboolean result;

            if (!parseArgs(args, "o", &a0))
            {
              OBJ_CALL(result = self->object.equals(a0));
              Py_RETURN_BOOL(result);
            }

            return callSuper(PY_TYPE(Vector), (PyObject *) self, "equals", args, 2);
          }

          static PyObject *t_Vector_hashCode(t_Vector *self, PyObject *args)
          {
            jint result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.hashCode());
              return PyLong_FromLong((long) result);
            }

            return callSuper(PY_TYPE(Vector), (PyObject *) self, "hashCode", args, 2);
          }

          static PyObject *t_Vector_isNumericallyIdentical(t_Vector *self, PyObject *args)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 1:
              {
                Vector a0((jobject) NULL);
                jboolean result;

                if (!parseArgs(args, "k", Vector::initializeClass, &a0))
                {
                  OBJ_CALL(result = self->object.isNumericallyIdentical(a0));
                  Py_RETURN_BOOL(result);
                }
              }
              break;
             case 3:
              {
                jdouble a0;
                jdouble a1;
                jdouble a2;
                jboolean result;

                if (!parseArgs(args, "DDD", &a0, &a1, &a2))
                {
                  OBJ_CALL(result = self->object.isNumericallyIdentical(a0, a1, a2));
                  Py_RETURN_BOOL(result);
                }
              }
            }

            PyErr_SetArgsError((PyObject *) self, "isNumericallyIdentical", args);
            return NULL;
          }

          static PyObject *t_Vector_isParallel(t_Vector *self, PyObject *args)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 1:
              {
                Vector a0((jobject) NULL);
                jboolean result;

                if (!parseArgs(args, "k", Vector::initializeClass, &a0))
                {
                  OBJ_CALL(result = self->object.isParallel(a0));
                  Py_RETURN_BOOL(result);
                }
              }
              break;
             case 3:
              {
                jdouble a0;
                jdouble a1;
                jdouble a2;
                jboolean result;

                if (!parseArgs(args, "DDD", &a0, &a1, &a2))
                {
                  OBJ_CALL(result = self->object.isParallel(a0, a1, a2));
                  Py_RETURN_BOOL(result);
                }
              }
            }

            PyErr_SetArgsError((PyObject *) self, "isParallel", args);
            return NULL;
          }

          static PyObject *t_Vector_isWithin(t_Vector *self, PyObject *args)
          {
            JArray< ::org::apache::lucene::spatial3d::geom::Membership > a0((jobject) NULL);
            JArray< ::org::apache::lucene::spatial3d::geom::Membership > a1((jobject) NULL);
            jboolean result;

            if (!parseArgs(args, "[k[k", ::org::apache::lucene::spatial3d::geom::Membership::initializeClass, ::org::apache::lucene::spatial3d::geom::Membership::initializeClass, &a0, &a1))
            {
              OBJ_CALL(result = self->object.isWithin(a0, a1));
              Py_RETURN_BOOL(result);
            }

            PyErr_SetArgsError((PyObject *) self, "isWithin", args);
            return NULL;
          }

          static PyObject *t_Vector_linearDistance(t_Vector *self, PyObject *args)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 1:
              {
                Vector a0((jobject) NULL);
                jdouble result;

                if (!parseArgs(args, "k", Vector::initializeClass, &a0))
                {
                  OBJ_CALL(result = self->object.linearDistance(a0));
                  return PyFloat_FromDouble((double) result);
                }
              }
              break;
             case 3:
              {
                jdouble a0;
                jdouble a1;
                jdouble a2;
                jdouble result;

                if (!parseArgs(args, "DDD", &a0, &a1, &a2))
                {
                  OBJ_CALL(result = self->object.linearDistance(a0, a1, a2));
                  return PyFloat_FromDouble((double) result);
                }
              }
            }

            PyErr_SetArgsError((PyObject *) self, "linearDistance", args);
            return NULL;
          }

          static PyObject *t_Vector_linearDistanceSquared(t_Vector *self, PyObject *args)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 1:
              {
                Vector a0((jobject) NULL);
                jdouble result;

                if (!parseArgs(args, "k", Vector::initializeClass, &a0))
                {
                  OBJ_CALL(result = self->object.linearDistanceSquared(a0));
                  return PyFloat_FromDouble((double) result);
                }
              }
              break;
             case 3:
              {
                jdouble a0;
                jdouble a1;
                jdouble a2;
                jdouble result;

                if (!parseArgs(args, "DDD", &a0, &a1, &a2))
                {
                  OBJ_CALL(result = self->object.linearDistanceSquared(a0, a1, a2));
                  return PyFloat_FromDouble((double) result);
                }
              }
            }

            PyErr_SetArgsError((PyObject *) self, "linearDistanceSquared", args);
            return NULL;
          }

          static PyObject *t_Vector_magnitude(t_Vector *self)
          {
            jdouble result;
            OBJ_CALL(result = self->object.magnitude());
            return PyFloat_FromDouble((double) result);
          }

          static PyObject *t_Vector_magnitude_(PyTypeObject *type, PyObject *args)
          {
            jdouble a0;
            jdouble a1;
            jdouble a2;
            jdouble result;

            if (!parseArgs(args, "DDD", &a0, &a1, &a2))
            {
              OBJ_CALL(result = ::org::apache::lucene::spatial3d::geom::Vector::magnitude(a0, a1, a2));
              return PyFloat_FromDouble((double) result);
            }

            PyErr_SetArgsError(type, "magnitude_", args);
            return NULL;
          }

          static PyObject *t_Vector_normalDistance(t_Vector *self, PyObject *args)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 1:
              {
                Vector a0((jobject) NULL);
                jdouble result;

                if (!parseArgs(args, "k", Vector::initializeClass, &a0))
                {
                  OBJ_CALL(result = self->object.normalDistance(a0));
                  return PyFloat_FromDouble((double) result);
                }
              }
              break;
             case 3:
              {
                jdouble a0;
                jdouble a1;
                jdouble a2;
                jdouble result;

                if (!parseArgs(args, "DDD", &a0, &a1, &a2))
                {
                  OBJ_CALL(result = self->object.normalDistance(a0, a1, a2));
                  return PyFloat_FromDouble((double) result);
                }
              }
            }

            PyErr_SetArgsError((PyObject *) self, "normalDistance", args);
            return NULL;
          }

          static PyObject *t_Vector_normalDistanceSquared(t_Vector *self, PyObject *args)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 1:
              {
                Vector a0((jobject) NULL);
                jdouble result;

                if (!parseArgs(args, "k", Vector::initializeClass, &a0))
                {
                  OBJ_CALL(result = self->object.normalDistanceSquared(a0));
                  return PyFloat_FromDouble((double) result);
                }
              }
              break;
             case 3:
              {
                jdouble a0;
                jdouble a1;
                jdouble a2;
                jdouble result;

                if (!parseArgs(args, "DDD", &a0, &a1, &a2))
                {
                  OBJ_CALL(result = self->object.normalDistanceSquared(a0, a1, a2));
                  return PyFloat_FromDouble((double) result);
                }
              }
            }

            PyErr_SetArgsError((PyObject *) self, "normalDistanceSquared", args);
            return NULL;
          }

          static PyObject *t_Vector_normalize(t_Vector *self)
          {
            Vector result((jobject) NULL);
            OBJ_CALL(result = self->object.normalize());
            return t_Vector::wrap_Object(result);
          }

          static PyObject *t_Vector_rotateXY(t_Vector *self, PyObject *args)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 1:
              {
                jdouble a0;
                Vector result((jobject) NULL);

                if (!parseArgs(args, "D", &a0))
                {
                  OBJ_CALL(result = self->object.rotateXY(a0));
                  return t_Vector::wrap_Object(result);
                }
              }
              break;
             case 2:
              {
                jdouble a0;
                jdouble a1;
                Vector result((jobject) NULL);

                if (!parseArgs(args, "DD", &a0, &a1))
                {
                  OBJ_CALL(result = self->object.rotateXY(a0, a1));
                  return t_Vector::wrap_Object(result);
                }
              }
            }

            PyErr_SetArgsError((PyObject *) self, "rotateXY", args);
            return NULL;
          }

          static PyObject *t_Vector_rotateXZ(t_Vector *self, PyObject *args)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 1:
              {
                jdouble a0;
                Vector result((jobject) NULL);

                if (!parseArgs(args, "D", &a0))
                {
                  OBJ_CALL(result = self->object.rotateXZ(a0));
                  return t_Vector::wrap_Object(result);
                }
              }
              break;
             case 2:
              {
                jdouble a0;
                jdouble a1;
                Vector result((jobject) NULL);

                if (!parseArgs(args, "DD", &a0, &a1))
                {
                  OBJ_CALL(result = self->object.rotateXZ(a0, a1));
                  return t_Vector::wrap_Object(result);
                }
              }
            }

            PyErr_SetArgsError((PyObject *) self, "rotateXZ", args);
            return NULL;
          }

          static PyObject *t_Vector_rotateZY(t_Vector *self, PyObject *args)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 1:
              {
                jdouble a0;
                Vector result((jobject) NULL);

                if (!parseArgs(args, "D", &a0))
                {
                  OBJ_CALL(result = self->object.rotateZY(a0));
                  return t_Vector::wrap_Object(result);
                }
              }
              break;
             case 2:
              {
                jdouble a0;
                jdouble a1;
                Vector result((jobject) NULL);

                if (!parseArgs(args, "DD", &a0, &a1))
                {
                  OBJ_CALL(result = self->object.rotateZY(a0, a1));
                  return t_Vector::wrap_Object(result);
                }
              }
            }

            PyErr_SetArgsError((PyObject *) self, "rotateZY", args);
            return NULL;
          }

          static PyObject *t_Vector_toString(t_Vector *self, PyObject *args)
          {
            ::java::lang::String result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.toString());
              return j2p(result);
            }

            return callSuper(PY_TYPE(Vector), (PyObject *) self, "toString", args, 2);
          }

          static PyObject *t_Vector_translate(t_Vector *self, PyObject *args)
          {
            jdouble a0;
            jdouble a1;
            jdouble a2;
            Vector result((jobject) NULL);

            if (!parseArgs(args, "DDD", &a0, &a1, &a2))
            {
              OBJ_CALL(result = self->object.translate(a0, a1, a2));
              return t_Vector::wrap_Object(result);
            }

            PyErr_SetArgsError((PyObject *) self, "translate", args);
            return NULL;
          }

          static PyObject *t_Vector_get__x(t_Vector *self, void *data)
          {
            jdouble value;
            OBJ_CALL(value = self->object._get_x());
            return PyFloat_FromDouble((double) value);
          }

          static PyObject *t_Vector_get__y(t_Vector *self, void *data)
          {
            jdouble value;
            OBJ_CALL(value = self->object._get_y());
            return PyFloat_FromDouble((double) value);
          }

          static PyObject *t_Vector_get__z(t_Vector *self, void *data)
          {
            jdouble value;
            OBJ_CALL(value = self->object._get_z());
            return PyFloat_FromDouble((double) value);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queryparser/flexible/standard/nodes/BooleanModifierNode.h"
#include "org/apache/lucene/queryparser/flexible/core/nodes/QueryNode.h"
#include "org/apache/lucene/queryparser/flexible/core/nodes/ModifierQueryNode$Modifier.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace standard {
            namespace nodes {

              ::java::lang::Class *BooleanModifierNode::class$ = NULL;
              jmethodID *BooleanModifierNode::mids$ = NULL;
              bool BooleanModifierNode::live$ = false;

              jclass BooleanModifierNode::initializeClass(bool getOnly)
              {
                if (getOnly)
                  return (jclass) (live$ ? class$->this$ : NULL);
                if (class$ == NULL)
                {
                  jclass cls = (jclass) env->findClass("org/apache/lucene/queryparser/flexible/standard/nodes/BooleanModifierNode");

                  mids$ = new jmethodID[max_mid];
                  mids$[mid_init$_3dc2b67c19b336d1] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/queryparser/flexible/core/nodes/QueryNode;Lorg/apache/lucene/queryparser/flexible/core/nodes/ModifierQueryNode$Modifier;)V");

                  class$ = new ::java::lang::Class(cls);
                  live$ = true;
                }
                return (jclass) class$->this$;
              }

              BooleanModifierNode::BooleanModifierNode(const ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode & a0, const ::org::apache::lucene::queryparser::flexible::core::nodes::ModifierQueryNode$Modifier & a1) : ::org::apache::lucene::queryparser::flexible::core::nodes::ModifierQueryNode(env->newObject(initializeClass, &mids$, mid_init$_3dc2b67c19b336d1, a0.this$, a1.this$)) {}
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace standard {
            namespace nodes {
              static PyObject *t_BooleanModifierNode_cast_(PyTypeObject *type, PyObject *arg);
              static PyObject *t_BooleanModifierNode_instance_(PyTypeObject *type, PyObject *arg);
              static int t_BooleanModifierNode_init_(t_BooleanModifierNode *self, PyObject *args, PyObject *kwds);

              static PyMethodDef t_BooleanModifierNode__methods_[] = {
                DECLARE_METHOD(t_BooleanModifierNode, cast_, METH_O | METH_CLASS),
                DECLARE_METHOD(t_BooleanModifierNode, instance_, METH_O | METH_CLASS),
                { NULL, NULL, 0, NULL }
              };

              static PyType_Slot PY_TYPE_SLOTS(BooleanModifierNode)[] = {
                { Py_tp_methods, t_BooleanModifierNode__methods_ },
                { Py_tp_init, (void *) t_BooleanModifierNode_init_ },
                { 0, NULL }
              };

              static PyType_Def *PY_TYPE_BASES(BooleanModifierNode)[] = {
                &PY_TYPE_DEF(::org::apache::lucene::queryparser::flexible::core::nodes::ModifierQueryNode),
                NULL
              };

              DEFINE_TYPE(BooleanModifierNode, t_BooleanModifierNode, BooleanModifierNode);

              void t_BooleanModifierNode::install(PyObject *module)
              {
                installType(&PY_TYPE(BooleanModifierNode), &PY_TYPE_DEF(BooleanModifierNode), module, "BooleanModifierNode", 0);
              }

              void t_BooleanModifierNode::initialize(PyObject *module)
              {
                PyObject_SetAttrString((PyObject *) PY_TYPE(BooleanModifierNode), "class_", make_descriptor(BooleanModifierNode::initializeClass, 1));
                PyObject_SetAttrString((PyObject *) PY_TYPE(BooleanModifierNode), "wrapfn_", make_descriptor(t_BooleanModifierNode::wrap_jobject));
                PyObject_SetAttrString((PyObject *) PY_TYPE(BooleanModifierNode), "boxfn_", make_descriptor(boxObject));
              }

              static PyObject *t_BooleanModifierNode_cast_(PyTypeObject *type, PyObject *arg)
              {
                if (!(arg = castCheck(arg, BooleanModifierNode::initializeClass, 1)))
                  return NULL;
                return t_BooleanModifierNode::wrap_Object(BooleanModifierNode(((t_BooleanModifierNode *) arg)->object.this$));
              }
              static PyObject *t_BooleanModifierNode_instance_(PyTypeObject *type, PyObject *arg)
              {
                if (!castCheck(arg, BooleanModifierNode::initializeClass, 0))
                  Py_RETURN_FALSE;
                Py_RETURN_TRUE;
              }

              static int t_BooleanModifierNode_init_(t_BooleanModifierNode *self, PyObject *args, PyObject *kwds)
              {
                ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode a0((jobject) NULL);
                ::org::apache::lucene::queryparser::flexible::core::nodes::ModifierQueryNode$Modifier a1((jobject) NULL);
                PyTypeObject **p1;
                BooleanModifierNode object((jobject) NULL);

                if (!parseArgs(args, "kK", ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode::initializeClass, ::org::apache::lucene::queryparser::flexible::core::nodes::ModifierQueryNode$Modifier::initializeClass, &a0, &a1, &p1, ::org::apache::lucene::queryparser::flexible::core::nodes::t_ModifierQueryNode$Modifier::parameters_))
                {
                  INT_CALL(object = BooleanModifierNode(a0, a1));
                  self->object = object;
                }
                else
                {
                  PyErr_SetArgsError((PyObject *) self, "__init__", args);
                  return -1;
                }

                return 0;
              }
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/codecs/uniformsplit/IndexDictionary$Builder.h"
#include "org/apache/lucene/codecs/uniformsplit/IndexDictionary.h"
#include "org/apache/lucene/util/BytesRef.h"
#include "java/io/IOException.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace codecs {
        namespace uniformsplit {

          ::java::lang::Class *IndexDictionary$Builder::class$ = NULL;
          jmethodID *IndexDictionary$Builder::mids$ = NULL;
          bool IndexDictionary$Builder::live$ = false;

          jclass IndexDictionary$Builder::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/codecs/uniformsplit/IndexDictionary$Builder");

              mids$ = new jmethodID[max_mid];
              mids$[mid_add_c61df66683b6c9c2] = env->getMethodID(cls, "add", "(Lorg/apache/lucene/util/BytesRef;J)V");
              mids$[mid_build_68ffce283434968a] = env->getMethodID(cls, "build", "()Lorg/apache/lucene/codecs/uniformsplit/IndexDictionary;");

              class$ = new ::java::lang::Class(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          void IndexDictionary$Builder::add(const ::org::apache::lucene::util::BytesRef & a0, jlong a1) const
          {
            env->callVoidMethod(this$, mids$[mid_add_c61df66683b6c9c2], a0.this$, a1);
          }

          ::org::apache::lucene::codecs::uniformsplit::IndexDictionary IndexDictionary$Builder::build() const
          {
            return ::org::apache::lucene::codecs::uniformsplit::IndexDictionary(env->callObjectMethod(this$, mids$[mid_build_68ffce283434968a]));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace codecs {
        namespace uniformsplit {
          static PyObject *t_IndexDictionary$Builder_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_IndexDictionary$Builder_instance_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_IndexDictionary$Builder_add(t_IndexDictionary$Builder *self, PyObject *args);
          static PyObject *t_IndexDictionary$Builder_build(t_IndexDictionary$Builder *self);

          static PyMethodDef t_IndexDictionary$Builder__methods_[] = {
            DECLARE_METHOD(t_IndexDictionary$Builder, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_IndexDictionary$Builder, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_IndexDictionary$Builder, add, METH_VARARGS),
            DECLARE_METHOD(t_IndexDictionary$Builder, build, METH_NOARGS),
            { NULL, NULL, 0, NULL }
          };

          static PyType_Slot PY_TYPE_SLOTS(IndexDictionary$Builder)[] = {
            { Py_tp_methods, t_IndexDictionary$Builder__methods_ },
            { Py_tp_init, (void *) abstract_init },
            { 0, NULL }
          };

          static PyType_Def *PY_TYPE_BASES(IndexDictionary$Builder)[] = {
            &PY_TYPE_DEF(::java::lang::Object),
            NULL
          };

          DEFINE_TYPE(IndexDictionary$Builder, t_IndexDictionary$Builder, IndexDictionary$Builder);

          void t_IndexDictionary$Builder::install(PyObject *module)
          {
            installType(&PY_TYPE(IndexDictionary$Builder), &PY_TYPE_DEF(IndexDictionary$Builder), module, "IndexDictionary$Builder", 0);
          }

          void t_IndexDictionary$Builder::initialize(PyObject *module)
          {
            PyObject_SetAttrString((PyObject *) PY_TYPE(IndexDictionary$Builder), "class_", make_descriptor(IndexDictionary$Builder::initializeClass, 1));
            PyObject_SetAttrString((PyObject *) PY_TYPE(IndexDictionary$Builder), "wrapfn_", make_descriptor(t_IndexDictionary$Builder::wrap_jobject));
            PyObject_SetAttrString((PyObject *) PY_TYPE(IndexDictionary$Builder), "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_IndexDictionary$Builder_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, IndexDictionary$Builder::initializeClass, 1)))
              return NULL;
            return t_IndexDictionary$Builder::wrap_Object(IndexDictionary$Builder(((t_IndexDictionary$Builder *) arg)->object.this$));
          }
          static PyObject *t_IndexDictionary$Builder_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, IndexDictionary$Builder::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static PyObject *t_IndexDictionary$Builder_add(t_IndexDictionary$Builder *self, PyObject *args)
          {
            ::org::apache::lucene::util::BytesRef a0((jobject) NULL);
            jlong a1;

            if (!parseArgs(args, "kJ", ::org::apache::lucene::util::BytesRef::initializeClass, &a0, &a1))
            {
              OBJ_CALL(self->object.add(a0, a1));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError((PyObject *) self, "add", args);
            return NULL;
          }

          static PyObject *t_IndexDictionary$Builder_build(t_IndexDictionary$Builder *self)
          {
            ::org::apache::lucene::codecs::uniformsplit::IndexDictionary result((jobject) NULL);
            OBJ_CALL(result = self->object.build());
            return ::org::apache::lucene::codecs::uniformsplit::t_IndexDictionary::wrap_Object(result);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/egothor/stemmer/Optimizer.h"
#include "org/egothor/stemmer/Trie.h"
#include "org/egothor/stemmer/Row.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace egothor {
    namespace stemmer {

      ::java::lang::Class *Optimizer::class$ = NULL;
      jmethodID *Optimizer::mids$ = NULL;
      bool Optimizer::live$ = false;

      jclass Optimizer::initializeClass(bool getOnly)
      {
        if (getOnly)
          return (jclass) (live$ ? class$->this$ : NULL);
        if (class$ == NULL)
        {
          jclass cls = (jclass) env->findClass("org/egothor/stemmer/Optimizer");

          mids$ = new jmethodID[max_mid];
          mids$[mid_init$_f2cc1bce94666404] = env->getMethodID(cls, "<init>", "()V");
          mids$[mid_merge_b0f643284764771f] = env->getMethodID(cls, "merge", "(Lorg/egothor/stemmer/Row;Lorg/egothor/stemmer/Row;)Lorg/egothor/stemmer/Row;");
          mids$[mid_optimize_76214b7d9a62d571] = env->getMethodID(cls, "optimize", "(Lorg/egothor/stemmer/Trie;)Lorg/egothor/stemmer/Trie;");

          class$ = new ::java::lang::Class(cls);
          live$ = true;
        }
        return (jclass) class$->this$;
      }

      Optimizer::Optimizer() : ::org::egothor::stemmer::Reduce(env->newObject(initializeClass, &mids$, mid_init$_f2cc1bce94666404)) {}

      ::org::egothor::stemmer::Row Optimizer::merge(const ::org::egothor::stemmer::Row & a0, const ::org::egothor::stemmer::Row & a1) const
      {
        return ::org::egothor::stemmer::Row(env->callObjectMethod(this$, mids$[mid_merge_b0f643284764771f], a0.this$, a1.this$));
      }

      ::org::egothor::stemmer::Trie Optimizer::optimize(const ::org::egothor::stemmer::Trie & a0) const
      {
        return ::org::egothor::stemmer::Trie(env->callObjectMethod(this$, mids$[mid_optimize_76214b7d9a62d571], a0.this$));
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace egothor {
    namespace stemmer {
      static PyObject *t_Optimizer_cast_(PyTypeObject *type, PyObject *arg);
      static PyObject *t_Optimizer_instance_(PyTypeObject *type, PyObject *arg);
      static int t_Optimizer_init_(t_Optimizer *self, PyObject *args, PyObject *kwds);
      static PyObject *t_Optimizer_merge(t_Optimizer *self, PyObject *args);
      static PyObject *t_Optimizer_optimize(t_Optimizer *self, PyObject *args);

      static PyMethodDef t_Optimizer__methods_[] = {
        DECLARE_METHOD(t_Optimizer, cast_, METH_O | METH_CLASS),
        DECLARE_METHOD(t_Optimizer, instance_, METH_O | METH_CLASS),
        DECLARE_METHOD(t_Optimizer, merge, METH_VARARGS),
        DECLARE_METHOD(t_Optimizer, optimize, METH_VARARGS),
        { NULL, NULL, 0, NULL }
      };

      static PyType_Slot PY_TYPE_SLOTS(Optimizer)[] = {
        { Py_tp_methods, t_Optimizer__methods_ },
        { Py_tp_init, (void *) t_Optimizer_init_ },
        { 0, NULL }
      };

      static PyType_Def *PY_TYPE_BASES(Optimizer)[] = {
        &PY_TYPE_DEF(::org::egothor::stemmer::Reduce),
        NULL
      };

      DEFINE_TYPE(Optimizer, t_Optimizer, Optimizer);

      void t_Optimizer::install(PyObject *module)
      {
        installType(&PY_TYPE(Optimizer), &PY_TYPE_DEF(Optimizer), module, "Optimizer", 0);
      }

      void t_Optimizer::initialize(PyObject *module)
      {
        PyObject_SetAttrString((PyObject *) PY_TYPE(Optimizer), "class_", make_descriptor(Optimizer::initializeClass, 1));
        PyObject_SetAttrString((PyObject *) PY_TYPE(Optimizer), "wrapfn_", make_descriptor(t_Optimizer::wrap_jobject));
        PyObject_SetAttrString((PyObject *) PY_TYPE(Optimizer), "boxfn_", make_descriptor(boxObject));
      }

      static PyObject *t_Optimizer_cast_(PyTypeObject *type, PyObject *arg)
      {
        if (!(arg = castCheck(arg, Optimizer::initializeClass, 1)))
          return NULL;
        return t_Optimizer::wrap_Object(Optimizer(((t_Optimizer *) arg)->object.this$));
      }
      static PyObject *t_Optimizer_instance_(PyTypeObject *type, PyObject *arg)
      {
        if (!castCheck(arg, Optimizer::initializeClass, 0))
          Py_RETURN_FALSE;
        Py_RETURN_TRUE;
      }

      static int t_Optimizer_init_(t_Optimizer *self, PyObject *args, PyObject *kwds)
      {
        Optimizer object((jobject) NULL);

        INT_CALL(object = Optimizer());
        self->object = object;

        return 0;
      }

      static PyObject *t_Optimizer_merge(t_Optimizer *self, PyObject *args)
      {
        ::org::egothor::stemmer::Row a0((jobject) NULL);
        ::org::egothor::stemmer::Row a1((jobject) NULL);
        ::org::egothor::stemmer::Row result((jobject) NULL);

        if (!parseArgs(args, "kk", ::org::egothor::stemmer::Row::initializeClass, ::org::egothor::stemmer::Row::initializeClass, &a0, &a1))
        {
          OBJ_CALL(result = self->object.merge(a0, a1));
          return ::org::egothor::stemmer::t_Row::wrap_Object(result);
        }

        PyErr_SetArgsError((PyObject *) self, "merge", args);
        return NULL;
      }

      static PyObject *t_Optimizer_optimize(t_Optimizer *self, PyObject *args)
      {
        ::org::egothor::stemmer::Trie a0((jobject) NULL);
        ::org::egothor::stemmer::Trie result((jobject) NULL);

        if (!parseArgs(args, "k", ::org::egothor::stemmer::Trie::initializeClass, &a0))
        {
          OBJ_CALL(result = self->object.optimize(a0));
          return ::org::egothor::stemmer::t_Trie::wrap_Object(result);
        }

        return callSuper(PY_TYPE(Optimizer), (PyObject *) self, "optimize", args, 2);
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/lv/LatvianStemFilter.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/analysis/TokenStream.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace lv {

          ::java::lang::Class *LatvianStemFilter::class$ = NULL;
          jmethodID *LatvianStemFilter::mids$ = NULL;
          bool LatvianStemFilter::live$ = false;

          jclass LatvianStemFilter::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/lv/LatvianStemFilter");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_c26756868a754f4e] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/analysis/TokenStream;)V");
              mids$[mid_incrementToken_8454bd5aa23fd11e] = env->getMethodID(cls, "incrementToken", "()Z");

              class$ = new ::java::lang::Class(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          LatvianStemFilter::LatvianStemFilter(const ::org::apache::lucene::analysis::TokenStream & a0) : ::org::apache::lucene::analysis::TokenFilter(env->newObject(initializeClass, &mids$, mid_init$_c26756868a754f4e, a0.this$)) {}

          jboolean LatvianStemFilter::incrementToken() const
          {
            return env->callBooleanMethod(this$, mids$[mid_incrementToken_8454bd5aa23fd11e]);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace lv {
          static PyObject *t_LatvianStemFilter_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_LatvianStemFilter_instance_(PyTypeObject *type, PyObject *arg);
          static int t_LatvianStemFilter_init_(t_LatvianStemFilter *self, PyObject *args, PyObject *kwds);
          static PyObject *t_LatvianStemFilter_incrementToken(t_LatvianStemFilter *self, PyObject *args);

          static PyMethodDef t_LatvianStemFilter__methods_[] = {
            DECLARE_METHOD(t_LatvianStemFilter, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_LatvianStemFilter, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_LatvianStemFilter, incrementToken, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          static PyType_Slot PY_TYPE_SLOTS(LatvianStemFilter)[] = {
            { Py_tp_methods, t_LatvianStemFilter__methods_ },
            { Py_tp_init, (void *) t_LatvianStemFilter_init_ },
            { 0, NULL }
          };

          static PyType_Def *PY_TYPE_BASES(LatvianStemFilter)[] = {
            &PY_TYPE_DEF(::org::apache::lucene::analysis::TokenFilter),
            NULL
          };

          DEFINE_TYPE(LatvianStemFilter, t_LatvianStemFilter, LatvianStemFilter);

          void t_LatvianStemFilter::install(PyObject *module)
          {
            installType(&PY_TYPE(LatvianStemFilter), &PY_TYPE_DEF(LatvianStemFilter), module, "LatvianStemFilter", 0);
          }

          void t_LatvianStemFilter::initialize(PyObject *module)
          {
            PyObject_SetAttrString((PyObject *) PY_TYPE(LatvianStemFilter), "class_", make_descriptor(LatvianStemFilter::initializeClass, 1));
            PyObject_SetAttrString((PyObject *) PY_TYPE(LatvianStemFilter), "wrapfn_", make_descriptor(t_LatvianStemFilter::wrap_jobject));
            PyObject_SetAttrString((PyObject *) PY_TYPE(LatvianStemFilter), "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_LatvianStemFilter_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, LatvianStemFilter::initializeClass, 1)))
              return NULL;
            return t_LatvianStemFilter::wrap_Object(LatvianStemFilter(((t_LatvianStemFilter *) arg)->object.this$));
          }
          static PyObject *t_LatvianStemFilter_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, LatvianStemFilter::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_LatvianStemFilter_init_(t_LatvianStemFilter *self, PyObject *args, PyObject *kwds)
          {
            ::org::apache::lucene::analysis::TokenStream a0((jobject) NULL);
            LatvianStemFilter object((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::analysis::TokenStream::initializeClass, &a0))
            {
              INT_CALL(object = LatvianStemFilter(a0));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_LatvianStemFilter_incrementToken(t_LatvianStemFilter *self, PyObject *args)
          {
            jboolean result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.incrementToken());
              Py_RETURN_BOOL(result);
            }

            return callSuper(PY_TYPE(LatvianStemFilter), (PyObject *) self, "incrementToken", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/index/LogByteSizeMergePolicy.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {

        ::java::lang::Class *LogByteSizeMergePolicy::class$ = NULL;
        jmethodID *LogByteSizeMergePolicy::mids$ = NULL;
        bool LogByteSizeMergePolicy::live$ = false;
        jdouble LogByteSizeMergePolicy::DEFAULT_MAX_MERGE_MB = (jdouble) 0;
        jdouble LogByteSizeMergePolicy::DEFAULT_MAX_MERGE_MB_FOR_FORCED_MERGE = (jdouble) 0;
        jdouble LogByteSizeMergePolicy::DEFAULT_MIN_MERGE_MB = (jdouble) 0;

        jclass LogByteSizeMergePolicy::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/index/LogByteSizeMergePolicy");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_f2cc1bce94666404] = env->getMethodID(cls, "<init>", "()V");
            mids$[mid_getMaxMergeMB_8c74b787998ce4bc] = env->getMethodID(cls, "getMaxMergeMB", "()D");
            mids$[mid_getMaxMergeMBForForcedMerge_8c74b787998ce4bc] = env->getMethodID(cls, "getMaxMergeMBForForcedMerge", "()D");
            mids$[mid_getMinMergeMB_8c74b787998ce4bc] = env->getMethodID(cls, "getMinMergeMB", "()D");
            mids$[mid_setMaxMergeMB_3c435f10a3b1e038] = env->getMethodID(cls, "setMaxMergeMB", "(D)V");
            mids$[mid_setMaxMergeMBForForcedMerge_3c435f10a3b1e038] = env->getMethodID(cls, "setMaxMergeMBForForcedMerge", "(D)V");
            mids$[mid_setMinMergeMB_3c435f10a3b1e038] = env->getMethodID(cls, "setMinMergeMB", "(D)V");
            mids$[mid_size_ad7dad42a292eb83] = env->getMethodID(cls, "size", "(Lorg/apache/lucene/index/SegmentCommitInfo;Lorg/apache/lucene/index/MergePolicy$MergeContext;)J");

            class$ = new ::java::lang::Class(cls);
            cls = (jclass) class$->this$;

            DEFAULT_MAX_MERGE_MB = env->getStaticDoubleField(cls, "DEFAULT_MAX_MERGE_MB");
            DEFAULT_MAX_MERGE_MB_FOR_FORCED_MERGE = env->getStaticDoubleField(cls, "DEFAULT_MAX_MERGE_MB_FOR_FORCED_MERGE");
            DEFAULT_MIN_MERGE_MB = env->getStaticDoubleField(cls, "DEFAULT_MIN_MERGE_MB");
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        LogByteSizeMergePolicy::LogByteSizeMergePolicy() : ::org::apache::lucene::index::LogMergePolicy(env->newObject(initializeClass, &mids$, mid_init$_f2cc1bce94666404)) {}

        jdouble LogByteSizeMergePolicy::getMaxMergeMB() const
        {
          return env->callDoubleMethod(this$, mids$[mid_getMaxMergeMB_8c74b787998ce4bc]);
        }

        jdouble LogByteSizeMergePolicy::getMaxMergeMBForForcedMerge() const
        {
          return env->callDoubleMethod(this$, mids$[mid_getMaxMergeMBForForcedMerge_8c74b787998ce4bc]);
        }

        jdouble LogByteSizeMergePolicy::getMinMergeMB() const
        {
          return env->callDoubleMethod(this$, mids$[mid_getMinMergeMB_8c74b787998ce4bc]);
        }

        void LogByteSizeMergePolicy::setMaxMergeMB(jdouble a0) const
        {
          env->callVoidMethod(this$, mids$[mid_setMaxMergeMB_3c435f10a3b1e038], a0);
        }

        void LogByteSizeMergePolicy::setMaxMergeMBForForcedMerge(jdouble a0) const
        {
          env->callVoidMethod(this$, mids$[mid_setMaxMergeMBForForcedMerge_3c435f10a3b1e038], a0);
        }

        void LogByteSizeMergePolicy::setMinMergeMB(jdouble a0) const
        {
          env->callVoidMethod(this$, mids$[mid_setMinMergeMB_3c435f10a3b1e038], a0);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {
        static PyObject *t_LogByteSizeMergePolicy_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_LogByteSizeMergePolicy_instance_(PyTypeObject *type, PyObject *arg);
        static int t_LogByteSizeMergePolicy_init_(t_LogByteSizeMergePolicy *self, PyObject *args, PyObject *kwds);
        static PyObject *t_LogByteSizeMergePolicy_getMaxMergeMB(t_LogByteSizeMergePolicy *self);
        static PyObject *t_LogByteSizeMergePolicy_getMaxMergeMBForForcedMerge(t_LogByteSizeMergePolicy *self);
        static PyObject *t_LogByteSizeMergePolicy_getMinMergeMB(t_LogByteSizeMergePolicy *self);
        static PyObject *t_LogByteSizeMergePolicy_setMaxMergeMB(t_LogByteSizeMergePolicy *self, PyObject *arg);
        static PyObject *t_LogByteSizeMergePolicy_setMaxMergeMBForForcedMerge(t_LogByteSizeMergePolicy *self, PyObject *arg);
        static PyObject *t_LogByteSizeMergePolicy_setMinMergeMB(t_LogByteSizeMergePolicy *self, PyObject *arg);
        static PyObject *t_LogByteSizeMergePolicy_get__maxMergeMB(t_LogByteSizeMergePolicy *self, void *data);
        static int t_LogByteSizeMergePolicy_set__maxMergeMB(t_LogByteSizeMergePolicy *self, PyObject *arg, void *data);
        static PyObject *t_LogByteSizeMergePolicy_get__maxMergeMBForForcedMerge(t_LogByteSizeMergePolicy *self, void *data);
        static int t_LogByteSizeMergePolicy_set__maxMergeMBForForcedMerge(t_LogByteSizeMergePolicy *self, PyObject *arg, void *data);
        static PyObject *t_LogByteSizeMergePolicy_get__minMergeMB(t_LogByteSizeMergePolicy *self, void *data);
        static int t_LogByteSizeMergePolicy_set__minMergeMB(t_LogByteSizeMergePolicy *self, PyObject *arg, void *data);
        static PyGetSetDef t_LogByteSizeMergePolicy__fields_[] = {
          DECLARE_GETSET_FIELD(t_LogByteSizeMergePolicy, maxMergeMB),
          DECLARE_GETSET_FIELD(t_LogByteSizeMergePolicy, maxMergeMBForForcedMerge),
          DECLARE_GETSET_FIELD(t_LogByteSizeMergePolicy, minMergeMB),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_LogByteSizeMergePolicy__methods_[] = {
          DECLARE_METHOD(t_LogByteSizeMergePolicy, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_LogByteSizeMergePolicy, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_LogByteSizeMergePolicy, getMaxMergeMB, METH_NOARGS),
          DECLARE_METHOD(t_LogByteSizeMergePolicy, getMaxMergeMBForForcedMerge, METH_NOARGS),
          DECLARE_METHOD(t_LogByteSizeMergePolicy, getMinMergeMB, METH_NOARGS),
          DECLARE_METHOD(t_LogByteSizeMergePolicy, setMaxMergeMB, METH_O),
          DECLARE_METHOD(t_LogByteSizeMergePolicy, setMaxMergeMBForForcedMerge, METH_O),
          DECLARE_METHOD(t_LogByteSizeMergePolicy, setMinMergeMB, METH_O),
          { NULL, NULL, 0, NULL }
        };

        static PyType_Slot PY_TYPE_SLOTS(LogByteSizeMergePolicy)[] = {
          { Py_tp_methods, t_LogByteSizeMergePolicy__methods_ },
          { Py_tp_init, (void *) t_LogByteSizeMergePolicy_init_ },
          { Py_tp_getset, t_LogByteSizeMergePolicy__fields_ },
          { 0, NULL }
        };

        static PyType_Def *PY_TYPE_BASES(LogByteSizeMergePolicy)[] = {
          &PY_TYPE_DEF(::org::apache::lucene::index::LogMergePolicy),
          NULL
        };

        DEFINE_TYPE(LogByteSizeMergePolicy, t_LogByteSizeMergePolicy, LogByteSizeMergePolicy);

        void t_LogByteSizeMergePolicy::install(PyObject *module)
        {
          installType(&PY_TYPE(LogByteSizeMergePolicy), &PY_TYPE_DEF(LogByteSizeMergePolicy), module, "LogByteSizeMergePolicy", 0);
        }

        void t_LogByteSizeMergePolicy::initialize(PyObject *module)
        {
          PyObject_SetAttrString((PyObject *) PY_TYPE(LogByteSizeMergePolicy), "class_", make_descriptor(LogByteSizeMergePolicy::initializeClass, 1));
          PyObject_SetAttrString((PyObject *) PY_TYPE(LogByteSizeMergePolicy), "wrapfn_", make_descriptor(t_LogByteSizeMergePolicy::wrap_jobject));
          PyObject_SetAttrString((PyObject *) PY_TYPE(LogByteSizeMergePolicy), "boxfn_", make_descriptor(boxObject));
          env->getClass(LogByteSizeMergePolicy::initializeClass);
          PyObject_SetAttrString((PyObject *) PY_TYPE(LogByteSizeMergePolicy), "DEFAULT_MAX_MERGE_MB", make_descriptor(LogByteSizeMergePolicy::DEFAULT_MAX_MERGE_MB));
          PyObject_SetAttrString((PyObject *) PY_TYPE(LogByteSizeMergePolicy), "DEFAULT_MAX_MERGE_MB_FOR_FORCED_MERGE", make_descriptor(LogByteSizeMergePolicy::DEFAULT_MAX_MERGE_MB_FOR_FORCED_MERGE));
          PyObject_SetAttrString((PyObject *) PY_TYPE(LogByteSizeMergePolicy), "DEFAULT_MIN_MERGE_MB", make_descriptor(LogByteSizeMergePolicy::DEFAULT_MIN_MERGE_MB));
        }

        static PyObject *t_LogByteSizeMergePolicy_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, LogByteSizeMergePolicy::initializeClass, 1)))
            return NULL;
          return t_LogByteSizeMergePolicy::wrap_Object(LogByteSizeMergePolicy(((t_LogByteSizeMergePolicy *) arg)->object.this$));
        }
        static PyObject *t_LogByteSizeMergePolicy_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, LogByteSizeMergePolicy::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_LogByteSizeMergePolicy_init_(t_LogByteSizeMergePolicy *self, PyObject *args, PyObject *kwds)
        {
          LogByteSizeMergePolicy object((jobject) NULL);

          INT_CALL(object = LogByteSizeMergePolicy());
          self->object = object;

          return 0;
        }

        static PyObject *t_LogByteSizeMergePolicy_getMaxMergeMB(t_LogByteSizeMergePolicy *self)
        {
          jdouble result;
          OBJ_CALL(result = self->object.getMaxMergeMB());
          return PyFloat_FromDouble((double) result);
        }

        static PyObject *t_LogByteSizeMergePolicy_getMaxMergeMBForForcedMerge(t_LogByteSizeMergePolicy *self)
        {
          jdouble result;
          OBJ_CALL(result = self->object.getMaxMergeMBForForcedMerge());
          return PyFloat_FromDouble((double) result);
        }

        static PyObject *t_LogByteSizeMergePolicy_getMinMergeMB(t_LogByteSizeMergePolicy *self)
        {
          jdouble result;
          OBJ_CALL(result = self->object.getMinMergeMB());
          return PyFloat_FromDouble((double) result);
        }

        static PyObject *t_LogByteSizeMergePolicy_setMaxMergeMB(t_LogByteSizeMergePolicy *self, PyObject *arg)
        {
          jdouble a0;

          if (!parseArg(arg, "D", &a0))
          {
            OBJ_CALL(self->object.setMaxMergeMB(a0));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "setMaxMergeMB", arg);
          return NULL;
        }

        static PyObject *t_LogByteSizeMergePolicy_setMaxMergeMBForForcedMerge(t_LogByteSizeMergePolicy *self, PyObject *arg)
        {
          jdouble a0;

          if (!parseArg(arg, "D", &a0))
          {
            OBJ_CALL(self->object.setMaxMergeMBForForcedMerge(a0));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "setMaxMergeMBForForcedMerge", arg);
          return NULL;
        }

        static PyObject *t_LogByteSizeMergePolicy_setMinMergeMB(t_LogByteSizeMergePolicy *self, PyObject *arg)
        {
          jdouble a0;

          if (!parseArg(arg, "D", &a0))
          {
            OBJ_CALL(self->object.setMinMergeMB(a0));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "setMinMergeMB", arg);
          return NULL;
        }

        static PyObject *t_LogByteSizeMergePolicy_get__maxMergeMB(t_LogByteSizeMergePolicy *self, void *data)
        {
          jdouble value;
          OBJ_CALL(value = self->object.getMaxMergeMB());
          return PyFloat_FromDouble((double) value);
        }
        static int t_LogByteSizeMergePolicy_set__maxMergeMB(t_LogByteSizeMergePolicy *self, PyObject *arg, void *data)
        {
          {
            jdouble value;
            if (!parseArg(arg, "D", &value))
            {
              INT_CALL(self->object.setMaxMergeMB(value));
              return 0;
            }
          }
          PyErr_SetArgsError((PyObject *) self, "maxMergeMB", arg);
          return -1;
        }

        static PyObject *t_LogByteSizeMergePolicy_get__maxMergeMBForForcedMerge(t_LogByteSizeMergePolicy *self, void *data)
        {
          jdouble value;
          OBJ_CALL(value = self->object.getMaxMergeMBForForcedMerge());
          return PyFloat_FromDouble((double) value);
        }
        static int t_LogByteSizeMergePolicy_set__maxMergeMBForForcedMerge(t_LogByteSizeMergePolicy *self, PyObject *arg, void *data)
        {
          {
            jdouble value;
            if (!parseArg(arg, "D", &value))
            {
              INT_CALL(self->object.setMaxMergeMBForForcedMerge(value));
              return 0;
            }
          }
          PyErr_SetArgsError((PyObject *) self, "maxMergeMBForForcedMerge", arg);
          return -1;
        }

        static PyObject *t_LogByteSizeMergePolicy_get__minMergeMB(t_LogByteSizeMergePolicy *self, void *data)
        {
          jdouble value;
          OBJ_CALL(value = self->object.getMinMergeMB());
          return PyFloat_FromDouble((double) value);
        }
        static int t_LogByteSizeMergePolicy_set__minMergeMB(t_LogByteSizeMergePolicy *self, PyObject *arg, void *data)
        {
          {
            jdouble value;
            if (!parseArg(arg, "D", &value))
            {
              INT_CALL(self->object.setMinMergeMB(value));
              return 0;
            }
          }
          PyErr_SetArgsError((PyObject *) self, "minMergeMB", arg);
          return -1;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/index/IndexFileNames.h"
#include "java/util/regex/Pattern.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {

        ::java::lang::Class *IndexFileNames::class$ = NULL;
        jmethodID *IndexFileNames::mids$ = NULL;
        bool IndexFileNames::live$ = false;
        ::java::util::regex::Pattern *IndexFileNames::CODEC_FILE_PATTERN = NULL;
        ::java::lang::String *IndexFileNames::OLD_SEGMENTS_GEN = NULL;
        ::java::lang::String *IndexFileNames::PENDING_SEGMENTS = NULL;
        ::java::lang::String *IndexFileNames::SEGMENTS = NULL;

        jclass IndexFileNames::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/index/IndexFileNames");

            mids$ = new jmethodID[max_mid];
            mids$[mid_fileNameFromGeneration_1ccae75d8ea483b8] = env->getStaticMethodID(cls, "fileNameFromGeneration", "(Ljava/lang/String;Ljava/lang/String;J)Ljava/lang/String;");
            mids$[mid_getExtension_9bfa75c9f141b67f] = env->getStaticMethodID(cls, "getExtension", "(Ljava/lang/String;)Ljava/lang/String;");
            mids$[mid_matchesExtension_11e80e7a1d57e4b9] = env->getStaticMethodID(cls, "matchesExtension", "(Ljava/lang/String;Ljava/lang/String;)Z");
            mids$[mid_parseGeneration_b1e05207ec98e246] = env->getStaticMethodID(cls, "parseGeneration", "(Ljava/lang/String;)J");
            mids$[mid_parseSegmentName_9bfa75c9f141b67f] = env->getStaticMethodID(cls, "parseSegmentName", "(Ljava/lang/String;)Ljava/lang/String;");
            mids$[mid_segmentFileName_e0ba5c0ee7c471ff] = env->getStaticMethodID(cls, "segmentFileName", "(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String;");
            mids$[mid_stripExtension_9bfa75c9f141b67f] = env->getStaticMethodID(cls, "stripExtension", "(Ljava/lang/String;)Ljava/lang/String;");
            mids$[mid_stripSegmentName_9bfa75c9f141b67f] = env->getStaticMethodID(cls, "stripSegmentName", "(Ljava/lang/String;)Ljava/lang/String;");

            class$ = new ::java::lang::Class(cls);
            cls = (jclass) class$->this$;

            CODEC_FILE_PATTERN = new ::java::util::regex::Pattern(env->getStaticObjectField(cls, "CODEC_FILE_PATTERN", "Ljava/util/regex/Pattern;"));
            OLD_SEGMENTS_GEN = new ::java::lang::String(env->getStaticObjectField(cls, "OLD_SEGMENTS_GEN", "Ljava/lang/String;"));
            PENDING_SEGMENTS = new ::java::lang::String(env->getStaticObjectField(cls, "PENDING_SEGMENTS", "Ljava/lang/String;"));
            SEGMENTS = new ::java::lang::String(env->getStaticObjectField(cls, "SEGMENTS", "Ljava/lang/String;"));
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        ::java::lang::String IndexFileNames::fileNameFromGeneration(const ::java::lang::String & a0, const ::java::lang::String & a1, jlong a2)
        {
          jclass cls = env->getClass(initializeClass);
          return ::java::lang::String(env->callStaticObjectMethod(cls, mids$[mid_fileNameFromGeneration_1ccae75d8ea483b8], a0.this$, a1.this$, a2));
        }

        ::java::lang::String IndexFileNames::getExtension(const ::java::lang::String & a0)
        {
          jclass cls = env->getClass(initializeClass);
          return ::java::lang::String(env->callStaticObjectMethod(cls, mids$[mid_getExtension_9bfa75c9f141b67f], a0.this$));
        }

        jboolean IndexFileNames::matchesExtension(const ::java::lang::String & a0, const ::java::lang::String & a1)
        {
          jclass cls = env->getClass(initializeClass);
          return env->callStaticBooleanMethod(cls, mids$[mid_matchesExtension_11e80e7a1d57e4b9], a0.this$, a1.this$);
        }

        jlong IndexFileNames::parseGeneration(const ::java::lang::String & a0)
        {
          jclass cls = env->getClass(initializeClass);
          return env->callStaticLongMethod(cls, mids$[mid_parseGeneration_b1e05207ec98e246], a0.this$);
        }

        ::java::lang::String IndexFileNames::parseSegmentName(const ::java::lang::String & a0)
        {
          jclass cls = env->getClass(initializeClass);
          return ::java::lang::String(env->callStaticObjectMethod(cls, mids$[mid_parseSegmentName_9bfa75c9f141b67f], a0.this$));
        }

        ::java::lang::String IndexFileNames::segmentFileName(const ::java::lang::String & a0, const ::java::lang::String & a1, const ::java::lang::String & a2)
        {
          jclass cls = env->getClass(initializeClass);
          return ::java::lang::String(env->callStaticObjectMethod(cls, mids$[mid_segmentFileName_e0ba5c0ee7c471ff], a0.this$, a1.this$, a2.this$));
        }

        ::java::lang::String IndexFileNames::stripExtension(const ::java::lang::String & a0)
        {
          jclass cls = env->getClass(initializeClass);
          return ::java::lang::String(env->callStaticObjectMethod(cls, mids$[mid_stripExtension_9bfa75c9f141b67f], a0.this$));
        }

        ::java::lang::String IndexFileNames::stripSegmentName(const ::java::lang::String & a0)
        {
          jclass cls = env->getClass(initializeClass);
          return ::java::lang::String(env->callStaticObjectMethod(cls, mids$[mid_stripSegmentName_9bfa75c9f141b67f], a0.this$));
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {
        static PyObject *t_IndexFileNames_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_IndexFileNames_instance_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_IndexFileNames_fileNameFromGeneration(PyTypeObject *type, PyObject *args);
        static PyObject *t_IndexFileNames_getExtension(PyTypeObject *type, PyObject *arg);
        static PyObject *t_IndexFileNames_matchesExtension(PyTypeObject *type, PyObject *args);
        static PyObject *t_IndexFileNames_parseGeneration(PyTypeObject *type, PyObject *arg);
        static PyObject *t_IndexFileNames_parseSegmentName(PyTypeObject *type, PyObject *arg);
        static PyObject *t_IndexFileNames_segmentFileName(PyTypeObject *type, PyObject *args);
        static PyObject *t_IndexFileNames_stripExtension(PyTypeObject *type, PyObject *arg);
        static PyObject *t_IndexFileNames_stripSegmentName(PyTypeObject *type, PyObject *arg);

        static PyMethodDef t_IndexFileNames__methods_[] = {
          DECLARE_METHOD(t_IndexFileNames, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_IndexFileNames, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_IndexFileNames, fileNameFromGeneration, METH_VARARGS | METH_CLASS),
          DECLARE_METHOD(t_IndexFileNames, getExtension, METH_O | METH_CLASS),
          DECLARE_METHOD(t_IndexFileNames, matchesExtension, METH_VARARGS | METH_CLASS),
          DECLARE_METHOD(t_IndexFileNames, parseGeneration, METH_O | METH_CLASS),
          DECLARE_METHOD(t_IndexFileNames, parseSegmentName, METH_O | METH_CLASS),
          DECLARE_METHOD(t_IndexFileNames, segmentFileName, METH_VARARGS | METH_CLASS),
          DECLARE_METHOD(t_IndexFileNames, stripExtension, METH_O | METH_CLASS),
          DECLARE_METHOD(t_IndexFileNames, stripSegmentName, METH_O | METH_CLASS),
          { NULL, NULL, 0, NULL }
        };

        static PyType_Slot PY_TYPE_SLOTS(IndexFileNames)[] = {
          { Py_tp_methods, t_IndexFileNames__methods_ },
          { Py_tp_init, (void *) abstract_init },
          { 0, NULL }
        };

        static PyType_Def *PY_TYPE_BASES(IndexFileNames)[] = {
          &PY_TYPE_DEF(::java::lang::Object),
          NULL
        };

        DEFINE_TYPE(IndexFileNames, t_IndexFileNames, IndexFileNames);

        void t_IndexFileNames::install(PyObject *module)
        {
          installType(&PY_TYPE(IndexFileNames), &PY_TYPE_DEF(IndexFileNames), module, "IndexFileNames", 0);
        }

        void t_IndexFileNames::initialize(PyObject *module)
        {
          PyObject_SetAttrString((PyObject *) PY_TYPE(IndexFileNames), "class_", make_descriptor(IndexFileNames::initializeClass, 1));
          PyObject_SetAttrString((PyObject *) PY_TYPE(IndexFileNames), "wrapfn_", make_descriptor(t_IndexFileNames::wrap_jobject));
          PyObject_SetAttrString((PyObject *) PY_TYPE(IndexFileNames), "boxfn_", make_descriptor(boxObject));
          env->getClass(IndexFileNames::initializeClass);
          PyObject_SetAttrString((PyObject *) PY_TYPE(IndexFileNames), "CODEC_FILE_PATTERN", make_descriptor(::java::util::regex::t_Pattern::wrap_Object(*IndexFileNames::CODEC_FILE_PATTERN)));
          PyObject_SetAttrString((PyObject *) PY_TYPE(IndexFileNames), "OLD_SEGMENTS_GEN", make_descriptor(j2p(*IndexFileNames::OLD_SEGMENTS_GEN)));
          PyObject_SetAttrString((PyObject *) PY_TYPE(IndexFileNames), "PENDING_SEGMENTS", make_descriptor(j2p(*IndexFileNames::PENDING_SEGMENTS)));
          PyObject_SetAttrString((PyObject *) PY_TYPE(IndexFileNames), "SEGMENTS", make_descriptor(j2p(*IndexFileNames::SEGMENTS)));
        }

        static PyObject *t_IndexFileNames_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, IndexFileNames::initializeClass, 1)))
            return NULL;
          return t_IndexFileNames::wrap_Object(IndexFileNames(((t_IndexFileNames *) arg)->object.this$));
        }
        static PyObject *t_IndexFileNames_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, IndexFileNames::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static PyObject *t_IndexFileNames_fileNameFromGeneration(PyTypeObject *type, PyObject *args)
        {
          ::java::lang::String a0((jobject) NULL);
          ::java::lang::String a1((jobject) NULL);
          jlong a2;
          ::java::lang::String result((jobject) NULL);

          if (!parseArgs(args, "ssJ", &a0, &a1, &a2))
          {
            OBJ_CALL(result = ::org::apache::lucene::index::IndexFileNames::fileNameFromGeneration(a0, a1, a2));
            return j2p(result);
          }

          PyErr_SetArgsError(type, "fileNameFromGeneration", args);
          return NULL;
        }

        static PyObject *t_IndexFileNames_getExtension(PyTypeObject *type, PyObject *arg)
        {
          ::java::lang::String a0((jobject) NULL);
          ::java::lang::String result((jobject) NULL);

          if (!parseArg(arg, "s", &a0))
          {
            OBJ_CALL(result = ::org::apache::lucene::index::IndexFileNames::getExtension(a0));
            return j2p(result);
          }

          PyErr_SetArgsError(type, "getExtension", arg);
          return NULL;
        }

        static PyObject *t_IndexFileNames_matchesExtension(PyTypeObject *type, PyObject *args)
        {
          ::java::lang::String a0((jobject) NULL);
          ::java::lang::String a1((jobject) NULL);
          jboolean result;

          if (!parseArgs(args, "ss", &a0, &a1))
          {
            OBJ_CALL(result = ::org::apache::lucene::index::IndexFileNames::matchesExtension(a0, a1));
            Py_RETURN_BOOL(result);
          }

          PyErr_SetArgsError(type, "matchesExtension", args);
          return NULL;
        }

        static PyObject *t_IndexFileNames_parseGeneration(PyTypeObject *type, PyObject *arg)
        {
          ::java::lang::String a0((jobject) NULL);
          jlong result;

          if (!parseArg(arg, "s", &a0))
          {
            OBJ_CALL(result = ::org::apache::lucene::index::IndexFileNames::parseGeneration(a0));
            return PyLong_FromLongLong((PY_LONG_LONG) result);
          }

          PyErr_SetArgsError(type, "parseGeneration", arg);
          return NULL;
        }

        static PyObject *t_IndexFileNames_parseSegmentName(PyTypeObject *type, PyObject *arg)
        {
          ::java::lang::String a0((jobject) NULL);
          ::java::lang::String result((jobject) NULL);

          if (!parseArg(arg, "s", &a0))
          {
            OBJ_CALL(result = ::org::apache::lucene::index::IndexFileNames::parseSegmentName(a0));
            return j2p(result);
          }

          PyErr_SetArgsError(type, "parseSegmentName", arg);
          return NULL;
        }

        static PyObject *t_IndexFileNames_segmentFileName(PyTypeObject *type, PyObject *args)
        {
          ::java::lang::String a0((jobject) NULL);
          ::java::lang::String a1((jobject) NULL);
          ::java::lang::String a2((jobject) NULL);
          ::java::lang::String result((jobject) NULL);

          if (!parseArgs(args, "sss", &a0, &a1, &a2))
          {
            OBJ_CALL(result = ::org::apache::lucene::index::IndexFileNames::segmentFileName(a0, a1, a2));
            return j2p(result);
          }

          PyErr_SetArgsError(type, "segmentFileName", args);
          return NULL;
        }

        static PyObject *t_IndexFileNames_stripExtension(PyTypeObject *type, PyObject *arg)
        {
          ::java::lang::String a0((jobject) NULL);
          ::java::lang::String result((jobject) NULL);

          if (!parseArg(arg, "s", &a0))
          {
            OBJ_CALL(result = ::org::apache::lucene::index::IndexFileNames::stripExtension(a0));
            return j2p(result);
          }

          PyErr_SetArgsError(type, "stripExtension", arg);
          return NULL;
        }

        static PyObject *t_IndexFileNames_stripSegmentName(PyTypeObject *type, PyObject *arg)
        {
          ::java::lang::String a0((jobject) NULL);
          ::java::lang::String result((jobject) NULL);

          if (!parseArg(arg, "s", &a0))
          {
            OBJ_CALL(result = ::org::apache::lucene::index::IndexFileNames::stripSegmentName(a0));
            return j2p(result);
          }

          PyErr_SetArgsError(type, "stripSegmentName", arg);
          return NULL;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/util/automaton/SortedIntSet$FrozenIntSet.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        namespace automaton {

          ::java::lang::Class *SortedIntSet$FrozenIntSet::class$ = NULL;
          jmethodID *SortedIntSet$FrozenIntSet::mids$ = NULL;
          bool SortedIntSet$FrozenIntSet::live$ = false;

          jclass SortedIntSet$FrozenIntSet::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/util/automaton/SortedIntSet$FrozenIntSet");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_438c62480c481c65] = env->getMethodID(cls, "<init>", "(II)V");
              mids$[mid_init$_11b52125bd016996] = env->getMethodID(cls, "<init>", "([III)V");
              mids$[mid_equals_8b72f2dcdde6fd1d] = env->getMethodID(cls, "equals", "(Ljava/lang/Object;)Z");
              mids$[mid_hashCode_9972fcc56b44e79d] = env->getMethodID(cls, "hashCode", "()I");
              mids$[mid_toString_db9b55ba01e03e4b] = env->getMethodID(cls, "toString", "()Ljava/lang/String;");

              class$ = new ::java::lang::Class(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          SortedIntSet$FrozenIntSet::SortedIntSet$FrozenIntSet(jint a0, jint a1) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_438c62480c481c65, a0, a1)) {}

          SortedIntSet$FrozenIntSet::SortedIntSet$FrozenIntSet(const JArray< jint > & a0, jint a1, jint a2) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_11b52125bd016996, a0.this$, a1, a2)) {}

          jboolean SortedIntSet$FrozenIntSet::equals(const ::java::lang::Object & a0) const
          {
            return env->callBooleanMethod(this$, mids$[mid_equals_8b72f2dcdde6fd1d], a0.this$);
          }

          jint SortedIntSet$FrozenIntSet::hashCode() const
          {
            return env->callIntMethod(this$, mids$[mid_hashCode_9972fcc56b44e79d]);
          }

          ::java::lang::String SortedIntSet$FrozenIntSet::toString() const
          {
            return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_db9b55ba01e03e4b]));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        namespace automaton {
          static PyObject *t_SortedIntSet$FrozenIntSet_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_SortedIntSet$FrozenIntSet_instance_(PyTypeObject *type, PyObject *arg);
          static int t_SortedIntSet$FrozenIntSet_init_(t_SortedIntSet$FrozenIntSet *self, PyObject *args, PyObject *kwds);
          static PyObject *t_SortedIntSet$FrozenIntSet_equals(t_SortedIntSet$FrozenIntSet *self, PyObject *args);
          static PyObject *t_SortedIntSet$FrozenIntSet_hashCode(t_SortedIntSet$FrozenIntSet *self, PyObject *args);
          static PyObject *t_SortedIntSet$FrozenIntSet_toString(t_SortedIntSet$FrozenIntSet *self, PyObject *args);

          static PyMethodDef t_SortedIntSet$FrozenIntSet__methods_[] = {
            DECLARE_METHOD(t_SortedIntSet$FrozenIntSet, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_SortedIntSet$FrozenIntSet, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_SortedIntSet$FrozenIntSet, equals, METH_VARARGS),
            DECLARE_METHOD(t_SortedIntSet$FrozenIntSet, hashCode, METH_VARARGS),
            DECLARE_METHOD(t_SortedIntSet$FrozenIntSet, toString, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          static PyType_Slot PY_TYPE_SLOTS(SortedIntSet$FrozenIntSet)[] = {
            { Py_tp_methods, t_SortedIntSet$FrozenIntSet__methods_ },
            { Py_tp_init, (void *) t_SortedIntSet$FrozenIntSet_init_ },
            { 0, NULL }
          };

          static PyType_Def *PY_TYPE_BASES(SortedIntSet$FrozenIntSet)[] = {
            &PY_TYPE_DEF(::java::lang::Object),
            NULL
          };

          DEFINE_TYPE(SortedIntSet$FrozenIntSet, t_SortedIntSet$FrozenIntSet, SortedIntSet$FrozenIntSet);

          void t_SortedIntSet$FrozenIntSet::install(PyObject *module)
          {
            installType(&PY_TYPE(SortedIntSet$FrozenIntSet), &PY_TYPE_DEF(SortedIntSet$FrozenIntSet), module, "SortedIntSet$FrozenIntSet", 0);
          }

          void t_SortedIntSet$FrozenIntSet::initialize(PyObject *module)
          {
            PyObject_SetAttrString((PyObject *) PY_TYPE(SortedIntSet$FrozenIntSet), "class_", make_descriptor(SortedIntSet$FrozenIntSet::initializeClass, 1));
            PyObject_SetAttrString((PyObject *) PY_TYPE(SortedIntSet$FrozenIntSet), "wrapfn_", make_descriptor(t_SortedIntSet$FrozenIntSet::wrap_jobject));
            PyObject_SetAttrString((PyObject *) PY_TYPE(SortedIntSet$FrozenIntSet), "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_SortedIntSet$FrozenIntSet_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, SortedIntSet$FrozenIntSet::initializeClass, 1)))
              return NULL;
            return t_SortedIntSet$FrozenIntSet::wrap_Object(SortedIntSet$FrozenIntSet(((t_SortedIntSet$FrozenIntSet *) arg)->object.this$));
          }
          static PyObject *t_SortedIntSet$FrozenIntSet_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, SortedIntSet$FrozenIntSet::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_SortedIntSet$FrozenIntSet_init_(t_SortedIntSet$FrozenIntSet *self, PyObject *args, PyObject *kwds)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 2:
              {
                jint a0;
                jint a1;
                SortedIntSet$FrozenIntSet object((jobject) NULL);

                if (!parseArgs(args, "II", &a0, &a1))
                {
                  INT_CALL(object = SortedIntSet$FrozenIntSet(a0, a1));
                  self->object = object;
                  break;
                }
              }
              goto err;
             case 3:
              {
                JArray< jint > a0((jobject) NULL);
                jint a1;
                jint a2;
                SortedIntSet$FrozenIntSet object((jobject) NULL);

                if (!parseArgs(args, "[III", &a0, &a1, &a2))
                {
                  INT_CALL(object = SortedIntSet$FrozenIntSet(a0, a1, a2));
                  self->object = object;
                  break;
                }
              }
             default:
             err:
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_SortedIntSet$FrozenIntSet_equals(t_SortedIntSet$FrozenIntSet *self, PyObject *args)
          {
            ::java::lang::Object a0((jobject) NULL);
            jboolean result;

            if (!parseArgs(args, "o", &a0))
            {
              OBJ_CALL(result = self->object.equals(a0));
              Py_RETURN_BOOL(result);
            }

            return callSuper(PY_TYPE(SortedIntSet$FrozenIntSet), (PyObject *) self, "equals", args, 2);
          }

          static PyObject *t_SortedIntSet$FrozenIntSet_hashCode(t_SortedIntSet$FrozenIntSet *self, PyObject *args)
          {
            jint result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.hashCode());
              return PyLong_FromLong((long) result);
            }

            return callSuper(PY_TYPE(SortedIntSet$FrozenIntSet), (PyObject *) self, "hashCode", args, 2);
          }

          static PyObject *t_SortedIntSet$FrozenIntSet_toString(t_SortedIntSet$FrozenIntSet *self, PyObject *args)
          {
            ::java::lang::String result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.toString());
              return j2p(result);
            }

            return callSuper(PY_TYPE(SortedIntSet$FrozenIntSet), (PyObject *) self, "toString", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/geo/LatLonGeometry.h"
#include "org/apache/lucene/geo/LatLonGeometry.h"
#include "org/apache/lucene/geo/Component2D.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace geo {

        ::java::lang::Class *LatLonGeometry::class$ = NULL;
        jmethodID *LatLonGeometry::mids$ = NULL;
        bool LatLonGeometry::live$ = false;

        jclass LatLonGeometry::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/geo/LatLonGeometry");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_f2cc1bce94666404] = env->getMethodID(cls, "<init>", "()V");
            mids$[mid_create_f043f2dadf50f8a4] = env->getStaticMethodID(cls, "create", "([Lorg/apache/lucene/geo/LatLonGeometry;)Lorg/apache/lucene/geo/Component2D;");
            mids$[mid_toComponent2D_6fe8ae19c34b6817] = env->getMethodID(cls, "toComponent2D", "()Lorg/apache/lucene/geo/Component2D;");

            class$ = new ::java::lang::Class(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        LatLonGeometry::LatLonGeometry() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_f2cc1bce94666404)) {}

        ::org::apache::lucene::geo::Component2D LatLonGeometry::create(const JArray< LatLonGeometry > & a0)
        {
          jclass cls = env->getClass(initializeClass);
          return ::org::apache::lucene::geo::Component2D(env->callStaticObjectMethod(cls, mids$[mid_create_f043f2dadf50f8a4], a0.this$));
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace geo {
        static PyObject *t_LatLonGeometry_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_LatLonGeometry_instance_(PyTypeObject *type, PyObject *arg);
        static int t_LatLonGeometry_init_(t_LatLonGeometry *self, PyObject *args, PyObject *kwds);
        static PyObject *t_LatLonGeometry_create(PyTypeObject *type, PyObject *arg);

        static PyMethodDef t_LatLonGeometry__methods_[] = {
          DECLARE_METHOD(t_LatLonGeometry, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_LatLonGeometry, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_LatLonGeometry, create, METH_O | METH_CLASS),
          { NULL, NULL, 0, NULL }
        };

        static PyType_Slot PY_TYPE_SLOTS(LatLonGeometry)[] = {
          { Py_tp_methods, t_LatLonGeometry__methods_ },
          { Py_tp_init, (void *) t_LatLonGeometry_init_ },
          { 0, NULL }
        };

        static PyType_Def *PY_TYPE_BASES(LatLonGeometry)[] = {
          &PY_TYPE_DEF(::java::lang::Object),
          NULL
        };

        DEFINE_TYPE(LatLonGeometry, t_LatLonGeometry, LatLonGeometry);

        void t_LatLonGeometry::install(PyObject *module)
        {
          installType(&PY_TYPE(LatLonGeometry), &PY_TYPE_DEF(LatLonGeometry), module, "LatLonGeometry", 0);
        }

        void t_LatLonGeometry::initialize(PyObject *module)
        {
          PyObject_SetAttrString((PyObject *) PY_TYPE(LatLonGeometry), "class_", make_descriptor(LatLonGeometry::initializeClass, 1));
          PyObject_SetAttrString((PyObject *) PY_TYPE(LatLonGeometry), "wrapfn_", make_descriptor(t_LatLonGeometry::wrap_jobject));
          PyObject_SetAttrString((PyObject *) PY_TYPE(LatLonGeometry), "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_LatLonGeometry_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, LatLonGeometry::initializeClass, 1)))
            return NULL;
          return t_LatLonGeometry::wrap_Object(LatLonGeometry(((t_LatLonGeometry *) arg)->object.this$));
        }
        static PyObject *t_LatLonGeometry_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, LatLonGeometry::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_LatLonGeometry_init_(t_LatLonGeometry *self, PyObject *args, PyObject *kwds)
        {
          LatLonGeometry object((jobject) NULL);

          INT_CALL(object = LatLonGeometry());
          self->object = object;

          return 0;
        }

        static PyObject *t_LatLonGeometry_create(PyTypeObject *type, PyObject *arg)
        {
          JArray< LatLonGeometry > a0((jobject) NULL);
          ::org::apache::lucene::geo::Component2D result((jobject) NULL);

          if (!parseArg(arg, "[k", LatLonGeometry::initializeClass, &a0))
          {
            OBJ_CALL(result = ::org::apache::lucene::geo::LatLonGeometry::create(a0));
            return ::org::apache::lucene::geo::t_Component2D::wrap_Object(result);
          }

          PyErr_SetArgsError(type, "create", arg);
          return NULL;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/uhighlight/PassageScorer.h"
#include "org/apache/lucene/search/uhighlight/Passage.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace uhighlight {

          ::java::lang::Class *PassageScorer::class$ = NULL;
          jmethodID *PassageScorer::mids$ = NULL;
          bool PassageScorer::live$ = false;

          jclass PassageScorer::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/search/uhighlight/PassageScorer");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_f2cc1bce94666404] = env->getMethodID(cls, "<init>", "()V");
              mids$[mid_init$_cf4403e82386af32] = env->getMethodID(cls, "<init>", "(FFF)V");
              mids$[mid_norm_384f078ef4b8f931] = env->getMethodID(cls, "norm", "(I)F");
              mids$[mid_score_b1e84377834e6270] = env->getMethodID(cls, "score", "(Lorg/apache/lucene/search/uhighlight/Passage;I)F");
              mids$[mid_tf_e11f7abd45d5cdd3] = env->getMethodID(cls, "tf", "(II)F");
              mids$[mid_weight_e11f7abd45d5cdd3] = env->getMethodID(cls, "weight", "(II)F");

              class$ = new ::java::lang::Class(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          PassageScorer::PassageScorer() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_f2cc1bce94666404)) {}

          PassageScorer::PassageScorer(jfloat a0, jfloat a1, jfloat a2) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_cf4403e82386af32, a0, a1, a2)) {}

          jfloat PassageScorer::norm(jint a0) const
          {
            return env->callFloatMethod(this$, mids$[mid_norm_384f078ef4b8f931], a0);
          }

          jfloat PassageScorer::score(const ::org::apache::lucene::search::uhighlight::Passage & a0, jint a1) const
          {
            return env->callFloatMethod(this$, mids$[mid_score_b1e84377834e6270], a0.this$, a1);
          }

          jfloat PassageScorer::tf(jint a0, jint a1) const
          {
            return env->callFloatMethod(this$, mids$[mid_tf_e11f7abd45d5cdd3], a0, a1);
          }

          jfloat PassageScorer::weight(jint a0, jint a1) const
          {
            return env->callFloatMethod(this$, mids$[mid_weight_e11f7abd45d5cdd3], a0, a1);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace uhighlight {
          static PyObject *t_PassageScorer_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_PassageScorer_instance_(PyTypeObject *type, PyObject *arg);
          static int t_PassageScorer_init_(t_PassageScorer *self, PyObject *args, PyObject *kwds);
          static PyObject *t_PassageScorer_norm(t_PassageScorer *self, PyObject *arg);
          static PyObject *t_PassageScorer_score(t_PassageScorer *self, PyObject *args);
          static PyObject *t_PassageScorer_tf(t_PassageScorer *self, PyObject *args);
          static PyObject *t_PassageScorer_weight(t_PassageScorer *self, PyObject *args);

          static PyMethodDef t_PassageScorer__methods_[] = {
            DECLARE_METHOD(t_PassageScorer, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_PassageScorer, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_PassageScorer, norm, METH_O),
            DECLARE_METHOD(t_PassageScorer, score, METH_VARARGS),
            DECLARE_METHOD(t_PassageScorer, tf, METH_VARARGS),
            DECLARE_METHOD(t_PassageScorer, weight, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          static PyType_Slot PY_TYPE_SLOTS(PassageScorer)[] = {
            { Py_tp_methods, t_PassageScorer__methods_ },
            { Py_tp_init, (void *) t_PassageScorer_init_ },
            { 0, NULL }
          };

          static PyType_Def *PY_TYPE_BASES(PassageScorer)[] = {
            &PY_TYPE_DEF(::java::lang::Object),
            NULL
          };

          DEFINE_TYPE(PassageScorer, t_PassageScorer, PassageScorer);

          void t_PassageScorer::install(PyObject *module)
          {
            installType(&PY_TYPE(PassageScorer), &PY_TYPE_DEF(PassageScorer), module, "PassageScorer", 0);
          }

          void t_PassageScorer::initialize(PyObject *module)
          {
            PyObject_SetAttrString((PyObject *) PY_TYPE(PassageScorer), "class_", make_descriptor(PassageScorer::initializeClass, 1));
            PyObject_SetAttrString((PyObject *) PY_TYPE(PassageScorer), "wrapfn_", make_descriptor(t_PassageScorer::wrap_jobject));
            PyObject_SetAttrString((PyObject *) PY_TYPE(PassageScorer), "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_PassageScorer_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, PassageScorer::initializeClass, 1)))
              return NULL;
            return t_PassageScorer::wrap_Object(PassageScorer(((t_PassageScorer *) arg)->object.this$));
          }
          static PyObject *t_PassageScorer_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, PassageScorer::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_PassageScorer_init_(t_PassageScorer *self, PyObject *args, PyObject *kwds)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 0:
              {
                PassageScorer object((jobject) NULL);

                INT_CALL(object = PassageScorer());
                self->object = object;
                break;
              }
             case 3:
              {
                jfloat a0;
                jfloat a1;
                jfloat a2;
                PassageScorer object((jobject) NULL);

                if (!parseArgs(args, "FFF", &a0, &a1, &a2))
                {
                  INT_CALL(object = PassageScorer(a0, a1, a2));
                  self->object = object;
                  break;
                }
              }
             default:
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_PassageScorer_norm(t_PassageScorer *self, PyObject *arg)
          {
            jint a0;
            jfloat result;

            if (!parseArg(arg, "I", &a0))
            {
              OBJ_CALL(result = self->object.norm(a0));
              return PyFloat_FromDouble((double) result);
            }

            PyErr_SetArgsError((PyObject *) self, "norm", arg);
            return NULL;
          }

          static PyObject *t_PassageScorer_score(t_PassageScorer *self, PyObject *args)
          {
            ::org::apache::lucene::search::uhighlight::Passage a0((jobject) NULL);
            jint a1;
            jfloat result;

            if (!parseArgs(args, "kI", ::org::apache::lucene::search::uhighlight::Passage::initializeClass, &a0, &a1))
            {
              OBJ_CALL(result = self->object.score(a0, a1));
              return PyFloat_FromDouble((double) result);
            }

            PyErr_SetArgsError((PyObject *) self, "score", args);
            return NULL;
          }

          static PyObject *t_PassageScorer_tf(t_PassageScorer *self, PyObject *args)
          {
            jint a0;
            jint a1;
            jfloat result;

            if (!parseArgs(args, "II", &a0, &a1))
            {
              OBJ_CALL(result = self->object.tf(a0, a1));
              return PyFloat_FromDouble((double) result);
            }

            PyErr_SetArgsError((PyObject *) self, "tf", args);
            return NULL;
          }

          static PyObject *t_PassageScorer_weight(t_PassageScorer *self, PyObject *args)
          {
            jint a0;
            jint a1;
            jfloat result;

            if (!parseArgs(args, "II", &a0, &a1))
            {
              OBJ_CALL(result = self->object.weight(a0, a1));
              return PyFloat_FromDouble((double) result);
            }

            PyErr_SetArgsError((PyObject *) self, "weight", args);
            return NULL;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/no/NorwegianAnalyzer.h"
#include "java/lang/String.h"
#include "org/apache/lucene/analysis/CharArraySet.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace no {

          ::java::lang::Class *NorwegianAnalyzer::class$ = NULL;
          jmethodID *NorwegianAnalyzer::mids$ = NULL;
          bool NorwegianAnalyzer::live$ = false;
          ::java::lang::String *NorwegianAnalyzer::DEFAULT_STOPWORD_FILE = NULL;

          jclass NorwegianAnalyzer::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/no/NorwegianAnalyzer");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_f2cc1bce94666404] = env->getMethodID(cls, "<init>", "()V");
              mids$[mid_init$_09c0eb6a436581d3] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/analysis/CharArraySet;)V");
              mids$[mid_init$_b66a15b6e54e4218] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/analysis/CharArraySet;Lorg/apache/lucene/analysis/CharArraySet;)V");
              mids$[mid_getDefaultStopSet_7aec8e69a9807ca1] = env->getStaticMethodID(cls, "getDefaultStopSet", "()Lorg/apache/lucene/analysis/CharArraySet;");
              mids$[mid_createComponents_c22fd244b0553c1e] = env->getMethodID(cls, "createComponents", "(Ljava/lang/String;)Lorg/apache/lucene/analysis/Analyzer$TokenStreamComponents;");
              mids$[mid_normalize_e597989422f66fcd] = env->getMethodID(cls, "normalize", "(Ljava/lang/String;Lorg/apache/lucene/analysis/TokenStream;)Lorg/apache/lucene/analysis/TokenStream;");

              class$ = new ::java::lang::Class(cls);
              cls = (jclass) class$->this$;

              DEFAULT_STOPWORD_FILE = new ::java::lang::String(env->getStaticObjectField(cls, "DEFAULT_STOPWORD_FILE", "Ljava/lang/String;"));
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          NorwegianAnalyzer::NorwegianAnalyzer() : ::org::apache::lucene::analysis::StopwordAnalyzerBase(env->newObject(initializeClass, &mids$, mid_init$_f2cc1bce94666404)) {}

          NorwegianAnalyzer::NorwegianAnalyzer(const ::org::apache::lucene::analysis::CharArraySet & a0) : ::org::apache::lucene::analysis::StopwordAnalyzerBase(env->newObject(initializeClass, &mids$, mid_init$_09c0eb6a436581d3, a0.this$)) {}

          NorwegianAnalyzer::NorwegianAnalyzer(const ::org::apache::lucene::analysis::CharArraySet & a0, const ::org::apache::lucene::analysis::CharArraySet & a1) : ::org::apache::lucene::analysis::StopwordAnalyzerBase(env->newObject(initializeClass, &mids$, mid_init$_b66a15b6e54e4218, a0.this$, a1.this$)) {}

          ::org::apache::lucene::analysis::CharArraySet NorwegianAnalyzer::getDefaultStopSet()
          {
            jclass cls = env->getClass(initializeClass);
            return ::org::apache::lucene::analysis::CharArraySet(env->callStaticObjectMethod(cls, mids$[mid_getDefaultStopSet_7aec8e69a9807ca1]));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace no {
          static PyObject *t_NorwegianAnalyzer_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_NorwegianAnalyzer_instance_(PyTypeObject *type, PyObject *arg);
          static int t_NorwegianAnalyzer_init_(t_NorwegianAnalyzer *self, PyObject *args, PyObject *kwds);
          static PyObject *t_NorwegianAnalyzer_getDefaultStopSet(PyTypeObject *type);
          static PyObject *t_NorwegianAnalyzer_get__defaultStopSet(t_NorwegianAnalyzer *self, void *data);
          static PyGetSetDef t_NorwegianAnalyzer__fields_[] = {
            DECLARE_GET_FIELD(t_NorwegianAnalyzer, defaultStopSet),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_NorwegianAnalyzer__methods_[] = {
            DECLARE_METHOD(t_NorwegianAnalyzer, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_NorwegianAnalyzer, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_NorwegianAnalyzer, getDefaultStopSet, METH_NOARGS | METH_CLASS),
            { NULL, NULL, 0, NULL }
          };

          static PyType_Slot PY_TYPE_SLOTS(NorwegianAnalyzer)[] = {
            { Py_tp_methods, t_NorwegianAnalyzer__methods_ },
            { Py_tp_init, (void *) t_NorwegianAnalyzer_init_ },
            { Py_tp_getset, t_NorwegianAnalyzer__fields_ },
            { 0, NULL }
          };

          static PyType_Def *PY_TYPE_BASES(NorwegianAnalyzer)[] = {
            &PY_TYPE_DEF(::org::apache::lucene::analysis::StopwordAnalyzerBase),
            NULL
          };

          DEFINE_TYPE(NorwegianAnalyzer, t_NorwegianAnalyzer, NorwegianAnalyzer);

          void t_NorwegianAnalyzer::install(PyObject *module)
          {
            installType(&PY_TYPE(NorwegianAnalyzer), &PY_TYPE_DEF(NorwegianAnalyzer), module, "NorwegianAnalyzer", 0);
          }

          void t_NorwegianAnalyzer::initialize(PyObject *module)
          {
            PyObject_SetAttrString((PyObject *) PY_TYPE(NorwegianAnalyzer), "class_", make_descriptor(NorwegianAnalyzer::initializeClass, 1));
            PyObject_SetAttrString((PyObject *) PY_TYPE(NorwegianAnalyzer), "wrapfn_", make_descriptor(t_NorwegianAnalyzer::wrap_jobject));
            PyObject_SetAttrString((PyObject *) PY_TYPE(NorwegianAnalyzer), "boxfn_", make_descriptor(boxObject));
            env->getClass(NorwegianAnalyzer::initializeClass);
            PyObject_SetAttrString((PyObject *) PY_TYPE(NorwegianAnalyzer), "DEFAULT_STOPWORD_FILE", make_descriptor(j2p(*NorwegianAnalyzer::DEFAULT_STOPWORD_FILE)));
          }

          static PyObject *t_NorwegianAnalyzer_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, NorwegianAnalyzer::initializeClass, 1)))
              return NULL;
            return t_NorwegianAnalyzer::wrap_Object(NorwegianAnalyzer(((t_NorwegianAnalyzer *) arg)->object.this$));
          }
          static PyObject *t_NorwegianAnalyzer_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, NorwegianAnalyzer::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_NorwegianAnalyzer_init_(t_NorwegianAnalyzer *self, PyObject *args, PyObject *kwds)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 0:
              {
                NorwegianAnalyzer object((jobject) NULL);

                INT_CALL(object = NorwegianAnalyzer());
                self->object = object;
                break;
              }
             case 1:
              {
                ::org::apache::lucene::analysis::CharArraySet a0((jobject) NULL);
                PyTypeObject **p0;
                NorwegianAnalyzer object((jobject) NULL);

                if (!parseArgs(args, "K", ::org::apache::lucene::analysis::CharArraySet::initializeClass, &a0, &p0, ::org::apache::lucene::analysis::t_CharArraySet::parameters_))
                {
                  INT_CALL(object = NorwegianAnalyzer(a0));
                  self->object = object;
                  break;
                }
              }
              goto err;
             case 2:
              {
                ::org::apache::lucene::analysis::CharArraySet a0((jobject) NULL);
                PyTypeObject **p0;
                ::org::apache::lucene::analysis::CharArraySet a1((jobject) NULL);
                PyTypeObject **p1;
                NorwegianAnalyzer object((jobject) NULL);

                if (!parseArgs(args, "KK", ::org::apache::lucene::analysis::CharArraySet::initializeClass, ::org::apache::lucene::analysis::CharArraySet::initializeClass, &a0, &p0, ::org::apache::lucene::analysis::t_CharArraySet::parameters_, &a1, &p1, ::org::apache::lucene::analysis::t_CharArraySet::parameters_))
                {
                  INT_CALL(object = NorwegianAnalyzer(a0, a1));
                  self->object = object;
                  break;
                }
              }
             default:
             err:
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_NorwegianAnalyzer_getDefaultStopSet(PyTypeObject *type)
          {
            ::org::apache::lucene::analysis::CharArraySet result((jobject) NULL);
            OBJ_CALL(result = ::org::apache::lucene::analysis::no::NorwegianAnalyzer::getDefaultStopSet());
            return ::org::apache::lucene::analysis::t_CharArraySet::wrap_Object(result);
          }

          static PyObject *t_NorwegianAnalyzer_get__defaultStopSet(t_NorwegianAnalyzer *self, void *data)
          {
            ::org::apache::lucene::analysis::CharArraySet value((jobject) NULL);
            OBJ_CALL(value = self->object.getDefaultStopSet());
            return ::org::apache::lucene::analysis::t_CharArraySet::wrap_Object(value);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/store/BaseDirectory.h"
#include "org/apache/lucene/store/Lock.h"
#include "java/lang/String.h"
#include "java/io/IOException.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace store {

        ::java::lang::Class *BaseDirectory::class$ = NULL;
        jmethodID *BaseDirectory::mids$ = NULL;
        bool BaseDirectory::live$ = false;

        jclass BaseDirectory::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/store/BaseDirectory");

            mids$ = new jmethodID[max_mid];
            mids$[mid_obtainLock_f265149b22017c5b] = env->getMethodID(cls, "obtainLock", "(Ljava/lang/String;)Lorg/apache/lucene/store/Lock;");
            mids$[mid_toString_db9b55ba01e03e4b] = env->getMethodID(cls, "toString", "()Ljava/lang/String;");
            mids$[mid_ensureOpen_f2cc1bce94666404] = env->getMethodID(cls, "ensureOpen", "()V");

            class$ = new ::java::lang::Class(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        ::org::apache::lucene::store::Lock BaseDirectory::obtainLock(const ::java::lang::String & a0) const
        {
          return ::org::apache::lucene::store::Lock(env->callObjectMethod(this$, mids$[mid_obtainLock_f265149b22017c5b], a0.this$));
        }

        ::java::lang::String BaseDirectory::toString() const
        {
          return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_db9b55ba01e03e4b]));
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace store {
        static PyObject *t_BaseDirectory_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_BaseDirectory_instance_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_BaseDirectory_obtainLock(t_BaseDirectory *self, PyObject *args);
        static PyObject *t_BaseDirectory_toString(t_BaseDirectory *self, PyObject *args);

        static PyMethodDef t_BaseDirectory__methods_[] = {
          DECLARE_METHOD(t_BaseDirectory, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_BaseDirectory, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_BaseDirectory, obtainLock, METH_VARARGS),
          DECLARE_METHOD(t_BaseDirectory, toString, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        static PyType_Slot PY_TYPE_SLOTS(BaseDirectory)[] = {
          { Py_tp_methods, t_BaseDirectory__methods_ },
          { Py_tp_init, (void *) abstract_init },
          { 0, NULL }
        };

        static PyType_Def *PY_TYPE_BASES(BaseDirectory)[] = {
          &PY_TYPE_DEF(::org::apache::lucene::store::Directory),
          NULL
        };

        DEFINE_TYPE(BaseDirectory, t_BaseDirectory, BaseDirectory);

        void t_BaseDirectory::install(PyObject *module)
        {
          installType(&PY_TYPE(BaseDirectory), &PY_TYPE_DEF(BaseDirectory), module, "BaseDirectory", 0);
        }

        void t_BaseDirectory::initialize(PyObject *module)
        {
          PyObject_SetAttrString((PyObject *) PY_TYPE(BaseDirectory), "class_", make_descriptor(BaseDirectory::initializeClass, 1));
          PyObject_SetAttrString((PyObject *) PY_TYPE(BaseDirectory), "wrapfn_", make_descriptor(t_BaseDirectory::wrap_jobject));
          PyObject_SetAttrString((PyObject *) PY_TYPE(BaseDirectory), "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_BaseDirectory_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, BaseDirectory::initializeClass, 1)))
            return NULL;
          return t_BaseDirectory::wrap_Object(BaseDirectory(((t_BaseDirectory *) arg)->object.this$));
        }
        static PyObject *t_BaseDirectory_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, BaseDirectory::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static PyObject *t_BaseDirectory_obtainLock(t_BaseDirectory *self, PyObject *args)
        {
          ::java::lang::String a0((jobject) NULL);
          ::org::apache::lucene::store::Lock result((jobject) NULL);

          if (!parseArgs(args, "s", &a0))
          {
            OBJ_CALL(result = self->object.obtainLock(a0));
            return ::org::apache::lucene::store::t_Lock::wrap_Object(result);
          }

          return callSuper(PY_TYPE(BaseDirectory), (PyObject *) self, "obtainLock", args, 2);
        }

        static PyObject *t_BaseDirectory_toString(t_BaseDirectory *self, PyObject *args)
        {
          ::java::lang::String result((jobject) NULL);

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.toString());
            return j2p(result);
          }

          return callSuper(PY_TYPE(BaseDirectory), (PyObject *) self, "toString", args, 2);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queryparser/flexible/standard/processors/PhraseSlopQueryNodeProcessor.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace standard {
            namespace processors {

              ::java::lang::Class *PhraseSlopQueryNodeProcessor::class$ = NULL;
              jmethodID *PhraseSlopQueryNodeProcessor::mids$ = NULL;
              bool PhraseSlopQueryNodeProcessor::live$ = false;

              jclass PhraseSlopQueryNodeProcessor::initializeClass(bool getOnly)
              {
                if (getOnly)
                  return (jclass) (live$ ? class$->this$ : NULL);
                if (class$ == NULL)
                {
                  jclass cls = (jclass) env->findClass("org/apache/lucene/queryparser/flexible/standard/processors/PhraseSlopQueryNodeProcessor");

                  mids$ = new jmethodID[max_mid];
                  mids$[mid_init$_f2cc1bce94666404] = env->getMethodID(cls, "<init>", "()V");
                  mids$[mid_preProcessNode_9b07be8595532de7] = env->getMethodID(cls, "preProcessNode", "(Lorg/apache/lucene/queryparser/flexible/core/nodes/QueryNode;)Lorg/apache/lucene/queryparser/flexible/core/nodes/QueryNode;");
                  mids$[mid_postProcessNode_9b07be8595532de7] = env->getMethodID(cls, "postProcessNode", "(Lorg/apache/lucene/queryparser/flexible/core/nodes/QueryNode;)Lorg/apache/lucene/queryparser/flexible/core/nodes/QueryNode;");
                  mids$[mid_setChildrenOrder_e420eeaadf0bcd20] = env->getMethodID(cls, "setChildrenOrder", "(Ljava/util/List;)Ljava/util/List;");

                  class$ = new ::java::lang::Class(cls);
                  live$ = true;
                }
                return (jclass) class$->this$;
              }

              PhraseSlopQueryNodeProcessor::PhraseSlopQueryNodeProcessor() : ::org::apache::lucene::queryparser::flexible::core::processors::QueryNodeProcessorImpl(env->newObject(initializeClass, &mids$, mid_init$_f2cc1bce94666404)) {}
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace standard {
            namespace processors {
              static PyObject *t_PhraseSlopQueryNodeProcessor_cast_(PyTypeObject *type, PyObject *arg);
              static PyObject *t_PhraseSlopQueryNodeProcessor_instance_(PyTypeObject *type, PyObject *arg);
              static int t_PhraseSlopQueryNodeProcessor_init_(t_PhraseSlopQueryNodeProcessor *self, PyObject *args, PyObject *kwds);

              static PyMethodDef t_PhraseSlopQueryNodeProcessor__methods_[] = {
                DECLARE_METHOD(t_PhraseSlopQueryNodeProcessor, cast_, METH_O | METH_CLASS),
                DECLARE_METHOD(t_PhraseSlopQueryNodeProcessor, instance_, METH_O | METH_CLASS),
                { NULL, NULL, 0, NULL }
              };

              static PyType_Slot PY_TYPE_SLOTS(PhraseSlopQueryNodeProcessor)[] = {
                { Py_tp_methods, t_PhraseSlopQueryNodeProcessor__methods_ },
                { Py_tp_init, (void *) t_PhraseSlopQueryNodeProcessor_init_ },
                { 0, NULL }
              };

              static PyType_Def *PY_TYPE_BASES(PhraseSlopQueryNodeProcessor)[] = {
                &PY_TYPE_DEF(::org::apache::lucene::queryparser::flexible::core::processors::QueryNodeProcessorImpl),
                NULL
              };

              DEFINE_TYPE(PhraseSlopQueryNodeProcessor, t_PhraseSlopQueryNodeProcessor, PhraseSlopQueryNodeProcessor);

              void t_PhraseSlopQueryNodeProcessor::install(PyObject *module)
              {
                installType(&PY_TYPE(PhraseSlopQueryNodeProcessor), &PY_TYPE_DEF(PhraseSlopQueryNodeProcessor), module, "PhraseSlopQueryNodeProcessor", 0);
              }

              void t_PhraseSlopQueryNodeProcessor::initialize(PyObject *module)
              {
                PyObject_SetAttrString((PyObject *) PY_TYPE(PhraseSlopQueryNodeProcessor), "class_", make_descriptor(PhraseSlopQueryNodeProcessor::initializeClass, 1));
                PyObject_SetAttrString((PyObject *) PY_TYPE(PhraseSlopQueryNodeProcessor), "wrapfn_", make_descriptor(t_PhraseSlopQueryNodeProcessor::wrap_jobject));
                PyObject_SetAttrString((PyObject *) PY_TYPE(PhraseSlopQueryNodeProcessor), "boxfn_", make_descriptor(boxObject));
              }

              static PyObject *t_PhraseSlopQueryNodeProcessor_cast_(PyTypeObject *type, PyObject *arg)
              {
                if (!(arg = castCheck(arg, PhraseSlopQueryNodeProcessor::initializeClass, 1)))
                  return NULL;
                return t_PhraseSlopQueryNodeProcessor::wrap_Object(PhraseSlopQueryNodeProcessor(((t_PhraseSlopQueryNodeProcessor *) arg)->object.this$));
              }
              static PyObject *t_PhraseSlopQueryNodeProcessor_instance_(PyTypeObject *type, PyObject *arg)
              {
                if (!castCheck(arg, PhraseSlopQueryNodeProcessor::initializeClass, 0))
                  Py_RETURN_FALSE;
                Py_RETURN_TRUE;
              }

              static int t_PhraseSlopQueryNodeProcessor_init_(t_PhraseSlopQueryNodeProcessor *self, PyObject *args, PyObject *kwds)
              {
                PhraseSlopQueryNodeProcessor object((jobject) NULL);

                INT_CALL(object = PhraseSlopQueryNodeProcessor());
                self->object = object;

                return 0;
              }
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/util/ByteBlockPool$DirectTrackingAllocator.h"
#include "org/apache/lucene/util/Counter.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {

        ::java::lang::Class *ByteBlockPool$DirectTrackingAllocator::class$ = NULL;
        jmethodID *ByteBlockPool$DirectTrackingAllocator::mids$ = NULL;
        bool ByteBlockPool$DirectTrackingAllocator::live$ = false;

        jclass ByteBlockPool$DirectTrackingAllocator::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/util/ByteBlockPool$DirectTrackingAllocator");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_302fe14a8fa069e1] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/util/Counter;)V");
            mids$[mid_init$_43c228f693b84817] = env->getMethodID(cls, "<init>", "(ILorg/apache/lucene/util/Counter;)V");
            mids$[mid_getByteBlock_cf386cdb1bbd339f] = env->getMethodID(cls, "getByteBlock", "()[B");
            mids$[mid_recycleByteBlocks_06d20f962341558f] = env->getMethodID(cls, "recycleByteBlocks", "([[BII)V");

            class$ = new ::java::lang::Class(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        ByteBlockPool$DirectTrackingAllocator::ByteBlockPool$DirectTrackingAllocator(const ::org::apache::lucene::util::Counter & a0) : ::org::apache::lucene::util::ByteBlockPool$Allocator(env->newObject(initializeClass, &mids$, mid_init$_302fe14a8fa069e1, a0.this$)) {}

        ByteBlockPool$DirectTrackingAllocator::ByteBlockPool$DirectTrackingAllocator(jint a0, const ::org::apache::lucene::util::Counter & a1) : ::org::apache::lucene::util::ByteBlockPool$Allocator(env->newObject(initializeClass, &mids$, mid_init$_43c228f693b84817, a0, a1.this$)) {}

        JArray< jbyte > ByteBlockPool$DirectTrackingAllocator::getByteBlock() const
        {
          return JArray< jbyte >(env->callObjectMethod(this$, mids$[mid_getByteBlock_cf386cdb1bbd339f]));
        }

        void ByteBlockPool$DirectTrackingAllocator::recycleByteBlocks(const JArray< JArray< jbyte > > & a0, jint a1, jint a2) const
        {
          env->callVoidMethod(this$, mids$[mid_recycleByteBlocks_06d20f962341558f], a0.this$, a1, a2);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        static PyObject *t_ByteBlockPool$DirectTrackingAllocator_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_ByteBlockPool$DirectTrackingAllocator_instance_(PyTypeObject *type, PyObject *arg);
        static int t_ByteBlockPool$DirectTrackingAllocator_init_(t_ByteBlockPool$DirectTrackingAllocator *self, PyObject *args, PyObject *kwds);
        static PyObject *t_ByteBlockPool$DirectTrackingAllocator_getByteBlock(t_ByteBlockPool$DirectTrackingAllocator *self, PyObject *args);
        static PyObject *t_ByteBlockPool$DirectTrackingAllocator_recycleByteBlocks(t_ByteBlockPool$DirectTrackingAllocator *self, PyObject *args);
        static PyObject *t_ByteBlockPool$DirectTrackingAllocator_get__byteBlock(t_ByteBlockPool$DirectTrackingAllocator *self, void *data);
        static PyGetSetDef t_ByteBlockPool$DirectTrackingAllocator__fields_[] = {
          DECLARE_GET_FIELD(t_ByteBlockPool$DirectTrackingAllocator, byteBlock),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_ByteBlockPool$DirectTrackingAllocator__methods_[] = {
          DECLARE_METHOD(t_ByteBlockPool$DirectTrackingAllocator, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_ByteBlockPool$DirectTrackingAllocator, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_ByteBlockPool$DirectTrackingAllocator, getByteBlock, METH_VARARGS),
          DECLARE_METHOD(t_ByteBlockPool$DirectTrackingAllocator, recycleByteBlocks, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        static PyType_Slot PY_TYPE_SLOTS(ByteBlockPool$DirectTrackingAllocator)[] = {
          { Py_tp_methods, t_ByteBlockPool$DirectTrackingAllocator__methods_ },
          { Py_tp_init, (void *) t_ByteBlockPool$DirectTrackingAllocator_init_ },
          { Py_tp_getset, t_ByteBlockPool$DirectTrackingAllocator__fields_ },
          { 0, NULL }
        };

        static PyType_Def *PY_TYPE_BASES(ByteBlockPool$DirectTrackingAllocator)[] = {
          &PY_TYPE_DEF(::org::apache::lucene::util::ByteBlockPool$Allocator),
          NULL
        };

        DEFINE_TYPE(ByteBlockPool$DirectTrackingAllocator, t_ByteBlockPool$DirectTrackingAllocator, ByteBlockPool$DirectTrackingAllocator);

        void t_ByteBlockPool$DirectTrackingAllocator::install(PyObject *module)
        {
          installType(&PY_TYPE(ByteBlockPool$DirectTrackingAllocator), &PY_TYPE_DEF(ByteBlockPool$DirectTrackingAllocator), module, "ByteBlockPool$DirectTrackingAllocator", 0);
        }

        void t_ByteBlockPool$DirectTrackingAllocator::initialize(PyObject *module)
        {
          PyObject_SetAttrString((PyObject *) PY_TYPE(ByteBlockPool$DirectTrackingAllocator), "class_", make_descriptor(ByteBlockPool$DirectTrackingAllocator::initializeClass, 1));
          PyObject_SetAttrString((PyObject *) PY_TYPE(ByteBlockPool$DirectTrackingAllocator), "wrapfn_", make_descriptor(t_ByteBlockPool$DirectTrackingAllocator::wrap_jobject));
          PyObject_SetAttrString((PyObject *) PY_TYPE(ByteBlockPool$DirectTrackingAllocator), "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_ByteBlockPool$DirectTrackingAllocator_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, ByteBlockPool$DirectTrackingAllocator::initializeClass, 1)))
            return NULL;
          return t_ByteBlockPool$DirectTrackingAllocator::wrap_Object(ByteBlockPool$DirectTrackingAllocator(((t_ByteBlockPool$DirectTrackingAllocator *) arg)->object.this$));
        }
        static PyObject *t_ByteBlockPool$DirectTrackingAllocator_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, ByteBlockPool$DirectTrackingAllocator::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_ByteBlockPool$DirectTrackingAllocator_init_(t_ByteBlockPool$DirectTrackingAllocator *self, PyObject *args, PyObject *kwds)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 1:
            {
              ::org::apache::lucene::util::Counter a0((jobject) NULL);
              ByteBlockPool$DirectTrackingAllocator object((jobject) NULL);

              if (!parseArgs(args, "k", ::org::apache::lucene::util::Counter::initializeClass, &a0))
              {
                INT_CALL(object = ByteBlockPool$DirectTrackingAllocator(a0));
                self->object = object;
                break;
              }
            }
            goto err;
           case 2:
            {
              jint a0;
              ::org::apache::lucene::util::Counter a1((jobject) NULL);
              ByteBlockPool$DirectTrackingAllocator object((jobject) NULL);

              if (!parseArgs(args, "Ik", ::org::apache::lucene::util::Counter::initializeClass, &a0, &a1))
              {
                INT_CALL(object = ByteBlockPool$DirectTrackingAllocator(a0, a1));
                self->object = object;
                break;
              }
            }
           default:
           err:
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }

        static PyObject *t_ByteBlockPool$DirectTrackingAllocator_getByteBlock(t_ByteBlockPool$DirectTrackingAllocator *self, PyObject *args)
        {
          JArray< jbyte > result((jobject) NULL);

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.getByteBlock());
            return result.wrap();
          }

          return callSuper(PY_TYPE(ByteBlockPool$DirectTrackingAllocator), (PyObject *) self, "getByteBlock", args, 2);
        }

        static PyObject *t_ByteBlockPool$DirectTrackingAllocator_recycleByteBlocks(t_ByteBlockPool$DirectTrackingAllocator *self, PyObject *args)
        {
          JArray< JArray< jbyte > > a0((jobject) NULL);
          jint a1;
          jint a2;

          if (!parseArgs(args, "[[BII", &a0, &a1, &a2))
          {
            OBJ_CALL(self->object.recycleByteBlocks(a0, a1, a2));
            Py_RETURN_NONE;
          }

          return callSuper(PY_TYPE(ByteBlockPool$DirectTrackingAllocator), (PyObject *) self, "recycleByteBlocks", args, 2);
        }

        static PyObject *t_ByteBlockPool$DirectTrackingAllocator_get__byteBlock(t_ByteBlockPool$DirectTrackingAllocator *self, void *data)
        {
          JArray< jbyte > value((jobject) NULL);
          OBJ_CALL(value = self->object.getByteBlock());
          return value.wrap();
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/miscellaneous/WordDelimiterFilterFactory.h"
#include "java/util/Map.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/analysis/TokenStream.h"
#include "org/apache/lucene/analysis/util/ResourceLoader.h"
#include "org/apache/lucene/analysis/TokenFilter.h"
#include "java/lang/String.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/analysis/util/ResourceLoaderAware.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace miscellaneous {

          ::java::lang::Class *WordDelimiterFilterFactory::class$ = NULL;
          jmethodID *WordDelimiterFilterFactory::mids$ = NULL;
          bool WordDelimiterFilterFactory::live$ = false;
          ::java::lang::String *WordDelimiterFilterFactory::NAME = NULL;
          ::java::lang::String *WordDelimiterFilterFactory::PROTECTED_TOKENS = NULL;
          ::java::lang::String *WordDelimiterFilterFactory::TYPES = NULL;

          jclass WordDelimiterFilterFactory::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/miscellaneous/WordDelimiterFilterFactory");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_408bd889ee3beae5] = env->getMethodID(cls, "<init>", "(Ljava/util/Map;)V");
              mids$[mid_create_4366615ad7077dae] = env->getMethodID(cls, "create", "(Lorg/apache/lucene/analysis/TokenStream;)Lorg/apache/lucene/analysis/TokenFilter;");
              mids$[mid_inform_b4ee53c41a5f629f] = env->getMethodID(cls, "inform", "(Lorg/apache/lucene/analysis/util/ResourceLoader;)V");

              class$ = new ::java::lang::Class(cls);
              cls = (jclass) class$->this$;

              NAME = new ::java::lang::String(env->getStaticObjectField(cls, "NAME", "Ljava/lang/String;"));
              PROTECTED_TOKENS = new ::java::lang::String(env->getStaticObjectField(cls, "PROTECTED_TOKENS", "Ljava/lang/String;"));
              TYPES = new ::java::lang::String(env->getStaticObjectField(cls, "TYPES", "Ljava/lang/String;"));
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          WordDelimiterFilterFactory::WordDelimiterFilterFactory(const ::java::util::Map & a0) : ::org::apache::lucene::analysis::util::TokenFilterFactory(env->newObject(initializeClass, &mids$, mid_init$_408bd889ee3beae5, a0.this$)) {}

          ::org::apache::lucene::analysis::TokenFilter WordDelimiterFilterFactory::create(const ::org::apache::lucene::analysis::TokenStream & a0) const
          {
            return ::org::apache::lucene::analysis::TokenFilter(env->callObjectMethod(this$, mids$[mid_create_4366615ad7077dae], a0.this$));
          }

          void WordDelimiterFilterFactory::inform(const ::org::apache::lucene::analysis::util::ResourceLoader & a0) const
          {
            env->callVoidMethod(this$, mids$[mid_inform_b4ee53c41a5f629f], a0.this$);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace miscellaneous {
          static PyObject *t_WordDelimiterFilterFactory_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_WordDelimiterFilterFactory_instance_(PyTypeObject *type, PyObject *arg);
          static int t_WordDelimiterFilterFactory_init_(t_WordDelimiterFilterFactory *self, PyObject *args, PyObject *kwds);
          static PyObject *t_WordDelimiterFilterFactory_create(t_WordDelimiterFilterFactory *self, PyObject *args);
          static PyObject *t_WordDelimiterFilterFactory_inform(t_WordDelimiterFilterFactory *self, PyObject *arg);

          static PyMethodDef t_WordDelimiterFilterFactory__methods_[] = {
            DECLARE_METHOD(t_WordDelimiterFilterFactory, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_WordDelimiterFilterFactory, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_WordDelimiterFilterFactory, create, METH_VARARGS),
            DECLARE_METHOD(t_WordDelimiterFilterFactory, inform, METH_O),
            { NULL, NULL, 0, NULL }
          };

          static PyType_Slot PY_TYPE_SLOTS(WordDelimiterFilterFactory)[] = {
            { Py_tp_methods, t_WordDelimiterFilterFactory__methods_ },
            { Py_tp_init, (void *) t_WordDelimiterFilterFactory_init_ },
            { 0, NULL }
          };

          static PyType_Def *PY_TYPE_BASES(WordDelimiterFilterFactory)[] = {
            &PY_TYPE_DEF(::org::apache::lucene::analysis::util::TokenFilterFactory),
            NULL
          };

          DEFINE_TYPE(WordDelimiterFilterFactory, t_WordDelimiterFilterFactory, WordDelimiterFilterFactory);

          void t_WordDelimiterFilterFactory::install(PyObject *module)
          {
            installType(&PY_TYPE(WordDelimiterFilterFactory), &PY_TYPE_DEF(WordDelimiterFilterFactory), module, "WordDelimiterFilterFactory", 0);
          }

          void t_WordDelimiterFilterFactory::initialize(PyObject *module)
          {
            PyObject_SetAttrString((PyObject *) PY_TYPE(WordDelimiterFilterFactory), "class_", make_descriptor(WordDelimiterFilterFactory::initializeClass, 1));
            PyObject_SetAttrString((PyObject *) PY_TYPE(WordDelimiterFilterFactory), "wrapfn_", make_descriptor(t_WordDelimiterFilterFactory::wrap_jobject));
            PyObject_SetAttrString((PyObject *) PY_TYPE(WordDelimiterFilterFactory), "boxfn_", make_descriptor(boxObject));
            env->getClass(WordDelimiterFilterFactory::initializeClass);
            PyObject_SetAttrString((PyObject *) PY_TYPE(WordDelimiterFilterFactory), "NAME", make_descriptor(j2p(*WordDelimiterFilterFactory::NAME)));
            PyObject_SetAttrString((PyObject *) PY_TYPE(WordDelimiterFilterFactory), "PROTECTED_TOKENS", make_descriptor(j2p(*WordDelimiterFilterFactory::PROTECTED_TOKENS)));
            PyObject_SetAttrString((PyObject *) PY_TYPE(WordDelimiterFilterFactory), "TYPES", make_descriptor(j2p(*WordDelimiterFilterFactory::TYPES)));
          }

          static PyObject *t_WordDelimiterFilterFactory_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, WordDelimiterFilterFactory::initializeClass, 1)))
              return NULL;
            return t_WordDelimiterFilterFactory::wrap_Object(WordDelimiterFilterFactory(((t_WordDelimiterFilterFactory *) arg)->object.this$));
          }
          static PyObject *t_WordDelimiterFilterFactory_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, WordDelimiterFilterFactory::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_WordDelimiterFilterFactory_init_(t_WordDelimiterFilterFactory *self, PyObject *args, PyObject *kwds)
          {
            ::java::util::Map a0((jobject) NULL);
            PyTypeObject **p0;
            WordDelimiterFilterFactory object((jobject) NULL);

            if (!parseArgs(args, "K", ::java::util::Map::initializeClass, &a0, &p0, ::java::util::t_Map::parameters_))
            {
              INT_CALL(object = WordDelimiterFilterFactory(a0));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_WordDelimiterFilterFactory_create(t_WordDelimiterFilterFactory *self, PyObject *args)
          {
            ::org::apache::lucene::analysis::TokenStream a0((jobject) NULL);
            ::org::apache::lucene::analysis::TokenFilter result((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::analysis::TokenStream::initializeClass, &a0))
            {
              OBJ_CALL(result = self->object.create(a0));
              return ::org::apache::lucene::analysis::t_TokenFilter::wrap_Object(result);
            }

            return callSuper(PY_TYPE(WordDelimiterFilterFactory), (PyObject *) self, "create", args, 2);
          }

          static PyObject *t_WordDelimiterFilterFactory_inform(t_WordDelimiterFilterFactory *self, PyObject *arg)
          {
            ::org::apache::lucene::analysis::util::ResourceLoader a0((jobject) NULL);

            if (!parseArg(arg, "k", ::org::apache::lucene::analysis::util::ResourceLoader::initializeClass, &a0))
            {
              OBJ_CALL(self->object.inform(a0));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError((PyObject *) self, "inform", arg);
            return NULL;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/util/FutureArrays.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {

        ::java::lang::Class *FutureArrays::class$ = NULL;
        jmethodID *FutureArrays::mids$ = NULL;
        bool FutureArrays::live$ = false;

        jclass FutureArrays::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/util/FutureArrays");

            mids$ = new jmethodID[max_mid];
            mids$[mid_compare_80aa093542ccf7ef] = env->getStaticMethodID(cls, "compare", "([CII[CII)I");
            mids$[mid_compare_3841801940b74ab3] = env->getStaticMethodID(cls, "compare", "([III[III)I");
            mids$[mid_compare_06db55456201788a] = env->getStaticMethodID(cls, "compare", "([JII[JII)I");
            mids$[mid_compareUnsigned_10f28692d4a3a83a] = env->getStaticMethodID(cls, "compareUnsigned", "([BII[BII)I");
            mids$[mid_equals_0ec6efb3454d9289] = env->getStaticMethodID(cls, "equals", "([BII[BII)Z");
            mids$[mid_equals_a24e1b13eae1d37f] = env->getStaticMethodID(cls, "equals", "([CII[CII)Z");
            mids$[mid_equals_6c66f5791a306487] = env->getStaticMethodID(cls, "equals", "([III[III)Z");
            mids$[mid_equals_3a1a2748416996de] = env->getStaticMethodID(cls, "equals", "([JII[JII)Z");
            mids$[mid_mismatch_10f28692d4a3a83a] = env->getStaticMethodID(cls, "mismatch", "([BII[BII)I");
            mids$[mid_mismatch_80aa093542ccf7ef] = env->getStaticMethodID(cls, "mismatch", "([CII[CII)I");

            class$ = new ::java::lang::Class(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        jint FutureArrays::compare(const JArray< jchar > & a0, jint a1, jint a2, const JArray< jchar > & a3, jint a4, jint a5)
        {
          jclass cls = env->getClass(initializeClass);
          return env->callStaticIntMethod(cls, mids$[mid_compare_80aa093542ccf7ef], a0.this$, a1, a2, a3.this$, a4, a5);
        }

        jint FutureArrays::compare(const JArray< jint > & a0, jint a1, jint a2, const JArray< jint > & a3, jint a4, jint a5)
        {
          jclass cls = env->getClass(initializeClass);
          return env->callStaticIntMethod(cls, mids$[mid_compare_3841801940b74ab3], a0.this$, a1, a2, a3.this$, a4, a5);
        }

        jint FutureArrays::compare(const JArray< jlong > & a0, jint a1, jint a2, const JArray< jlong > & a3, jint a4, jint a5)
        {
          jclass cls = env->getClass(initializeClass);
          return env->callStaticIntMethod(cls, mids$[mid_compare_06db55456201788a], a0.this$, a1, a2, a3.this$, a4, a5);
        }

        jint FutureArrays::compareUnsigned(const JArray< jbyte > & a0, jint a1, jint a2, const JArray< jbyte > & a3, jint a4, jint a5)
        {
          jclass cls = env->getClass(initializeClass);
          return env->callStaticIntMethod(cls, mids$[mid_compareUnsigned_10f28692d4a3a83a], a0.this$, a1, a2, a3.this$, a4, a5);
        }

        jboolean FutureArrays::equals(const JArray< jbyte > & a0, jint a1, jint a2, const JArray< jbyte > & a3, jint a4, jint a5)
        {
          jclass cls = env->getClass(initializeClass);
          return env->callStaticBooleanMethod(cls, mids$[mid_equals_0ec6efb3454d9289], a0.this$, a1, a2, a3.this$, a4, a5);
        }

        jboolean FutureArrays::equals(const JArray< jchar > & a0, jint a1, jint a2, const JArray< jchar > & a3, jint a4, jint a5)
        {
          jclass cls = env->getClass(initializeClass);
          return env->callStaticBooleanMethod(cls, mids$[mid_equals_a24e1b13eae1d37f], a0.this$, a1, a2, a3.this$, a4, a5);
        }

        jboolean FutureArrays::equals(const JArray< jint > & a0, jint a1, jint a2, const JArray< jint > & a3, jint a4, jint a5)
        {
          jclass cls = env->getClass(initializeClass);
          return env->callStaticBooleanMethod(cls, mids$[mid_equals_6c66f5791a306487], a0.this$, a1, a2, a3.this$, a4, a5);
        }

        jboolean FutureArrays::equals(const JArray< jlong > & a0, jint a1, jint a2, const JArray< jlong > & a3, jint a4, jint a5)
        {
          jclass cls = env->getClass(initializeClass);
          return env->callStaticBooleanMethod(cls, mids$[mid_equals_3a1a2748416996de], a0.this$, a1, a2, a3.this$, a4, a5);
        }

        jint FutureArrays::mismatch(const JArray< jbyte > & a0, jint a1, jint a2, const JArray< jbyte > & a3, jint a4, jint a5)
        {
          jclass cls = env->getClass(initializeClass);
          return env->callStaticIntMethod(cls, mids$[mid_mismatch_10f28692d4a3a83a], a0.this$, a1, a2, a3.this$, a4, a5);
        }

        jint FutureArrays::mismatch(const JArray< jchar > & a0, jint a1, jint a2, const JArray< jchar > & a3, jint a4, jint a5)
        {
          jclass cls = env->getClass(initializeClass);
          return env->callStaticIntMethod(cls, mids$[mid_mismatch_80aa093542ccf7ef], a0.this$, a1, a2, a3.this$, a4, a5);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        static PyObject *t_FutureArrays_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_FutureArrays_instance_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_FutureArrays_compare(PyTypeObject *type, PyObject *args);
        static PyObject *t_FutureArrays_compareUnsigned(PyTypeObject *type, PyObject *args);
        static PyObject *t_FutureArrays_equals(PyTypeObject *type, PyObject *args);
        static PyObject *t_FutureArrays_mismatch(PyTypeObject *type, PyObject *args);

        static PyMethodDef t_FutureArrays__methods_[] = {
          DECLARE_METHOD(t_FutureArrays, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_FutureArrays, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_FutureArrays, compare, METH_VARARGS | METH_CLASS),
          DECLARE_METHOD(t_FutureArrays, compareUnsigned, METH_VARARGS | METH_CLASS),
          DECLARE_METHOD(t_FutureArrays, equals, METH_VARARGS | METH_CLASS),
          DECLARE_METHOD(t_FutureArrays, mismatch, METH_VARARGS | METH_CLASS),
          { NULL, NULL, 0, NULL }
        };

        static PyType_Slot PY_TYPE_SLOTS(FutureArrays)[] = {
          { Py_tp_methods, t_FutureArrays__methods_ },
          { Py_tp_init, (void *) abstract_init },
          { 0, NULL }
        };

        static PyType_Def *PY_TYPE_BASES(FutureArrays)[] = {
          &PY_TYPE_DEF(::java::lang::Object),
          NULL
        };

        DEFINE_TYPE(FutureArrays, t_FutureArrays, FutureArrays);

        void t_FutureArrays::install(PyObject *module)
        {
          installType(&PY_TYPE(FutureArrays), &PY_TYPE_DEF(FutureArrays), module, "FutureArrays", 0);
        }

        void t_FutureArrays::initialize(PyObject *module)
        {
          PyObject_SetAttrString((PyObject *) PY_TYPE(FutureArrays), "class_", make_descriptor(FutureArrays::initializeClass, 1));
          PyObject_SetAttrString((PyObject *) PY_TYPE(FutureArrays), "wrapfn_", make_descriptor(t_FutureArrays::wrap_jobject));
          PyObject_SetAttrString((PyObject *) PY_TYPE(FutureArrays), "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_FutureArrays_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, FutureArrays::initializeClass, 1)))
            return NULL;
          return t_FutureArrays::wrap_Object(FutureArrays(((t_FutureArrays *) arg)->object.this$));
        }
        static PyObject *t_FutureArrays_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, FutureArrays::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static PyObject *t_FutureArrays_compare(PyTypeObject *type, PyObject *args)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 6:
            {
              JArray< jchar > a0((jobject) NULL);
              jint a1;
              jint a2;
              JArray< jchar > a3((jobject) NULL);
              jint a4;
              jint a5;
              jint result;

              if (!parseArgs(args, "[CII[CII", &a0, &a1, &a2, &a3, &a4, &a5))
              {
                OBJ_CALL(result = ::org::apache::lucene::util::FutureArrays::compare(a0, a1, a2, a3, a4, a5));
                return PyLong_FromLong((long) result);
              }
            }
            {
              JArray< jint > a0((jobject) NULL);
              jint a1;
              jint a2;
              JArray< jint > a3((jobject) NULL);
              jint a4;
              jint a5;
              jint result;

              if (!parseArgs(args, "[III[III", &a0, &a1, &a2, &a3, &a4, &a5))
              {
                OBJ_CALL(result = ::org::apache::lucene::util::FutureArrays::compare(a0, a1, a2, a3, a4, a5));
                return PyLong_FromLong((long) result);
              }
            }
            {
              JArray< jlong > a0((jobject) NULL);
              jint a1;
              jint a2;
              JArray< jlong > a3((jobject) NULL);
              jint a4;
              jint a5;
              jint result;

              if (!parseArgs(args, "[JII[JII", &a0, &a1, &a2, &a3, &a4, &a5))
              {
                OBJ_CALL(result = ::org::apache::lucene::util::FutureArrays::compare(a0, a1, a2, a3, a4, a5));
                return PyLong_FromLong((long) result);
              }
            }
          }

          PyErr_SetArgsError(type, "compare", args);
          return NULL;
        }

        static PyObject *t_FutureArrays_compareUnsigned(PyTypeObject *type, PyObject *args)
        {
          JArray< jbyte > a0((jobject) NULL);
          jint a1;
          jint a2;
          JArray< jbyte > a3((jobject) NULL);
          jint a4;
          jint a5;
          jint result;

          if (!parseArgs(args, "[BII[BII", &a0, &a1, &a2, &a3, &a4, &a5))
          {
            OBJ_CALL(result = ::org::apache::lucene::util::FutureArrays::compareUnsigned(a0, a1, a2, a3, a4, a5));
            return PyLong_FromLong((long) result);
          }

          PyErr_SetArgsError(type, "compareUnsigned", args);
          return NULL;
        }

        static PyObject *t_FutureArrays_equals(PyTypeObject *type, PyObject *args)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 6:
            {
              JArray< jbyte > a0((jobject) NULL);
              jint a1;
              jint a2;
              JArray< jbyte > a3((jobject) NULL);
              jint a4;
              jint a5;
              jboolean result;

              if (!parseArgs(args, "[BII[BII", &a0, &a1, &a2, &a3, &a4, &a5))
              {
                OBJ_CALL(result = ::org::apache::lucene::util::FutureArrays::equals(a0, a1, a2, a3, a4, a5));
                Py_RETURN_BOOL(result);
              }
            }
            {
              JArray< jchar > a0((jobject) NULL);
              jint a1;
              jint a2;
              JArray< jchar > a3((jobject) NULL);
              jint a4;
              jint a5;
              jboolean result;

              if (!parseArgs(args, "[CII[CII", &a0, &a1, &a2, &a3, &a4, &a5))
              {
                OBJ_CALL(result = ::org::apache::lucene::util::FutureArrays::equals(a0, a1, a2, a3, a4, a5));
                Py_RETURN_BOOL(result);
              }
            }
            {
              JArray< jint > a0((jobject) NULL);
              jint a1;
              jint a2;
              JArray< jint > a3((jobject) NULL);
              jint a4;
              jint a5;
              jboolean result;

              if (!parseArgs(args, "[III[III", &a0, &a1, &a2, &a3, &a4, &a5))
              {
                OBJ_CALL(result = ::org::apache::lucene::util::FutureArrays::equals(a0, a1, a2, a3, a4, a5));
                Py_RETURN_BOOL(result);
              }
            }
            {
              JArray< jlong > a0((jobject) NULL);
              jint a1;
              jint a2;
              JArray< jlong > a3((jobject) NULL);
              jint a4;
              jint a5;
              jboolean result;

              if (!parseArgs(args, "[JII[JII", &a0, &a1, &a2, &a3, &a4, &a5))
              {
                OBJ_CALL(result = ::org::apache::lucene::util::FutureArrays::equals(a0, a1, a2, a3, a4, a5));
                Py_RETURN_BOOL(result);
              }
            }
          }

          return callSuper(type, "equals", args, 2);
        }

        static PyObject *t_FutureArrays_mismatch(PyTypeObject *type, PyObject *args)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 6:
            {
              JArray< jbyte > a0((jobject) NULL);
              jint a1;
              jint a2;
              JArray< jbyte > a3((jobject) NULL);
              jint a4;
              jint a5;
              jint result;

              if (!parseArgs(args, "[BII[BII", &a0, &a1, &a2, &a3, &a4, &a5))
              {
                OBJ_CALL(result = ::org::apache::lucene::util::FutureArrays::mismatch(a0, a1, a2, a3, a4, a5));
                return PyLong_FromLong((long) result);
              }
            }
            {
              JArray< jchar > a0((jobject) NULL);
              jint a1;
              jint a2;
              JArray< jchar > a3((jobject) NULL);
              jint a4;
              jint a5;
              jint result;

              if (!parseArgs(args, "[CII[CII", &a0, &a1, &a2, &a3, &a4, &a5))
              {
                OBJ_CALL(result = ::org::apache::lucene::util::FutureArrays::mismatch(a0, a1, a2, a3, a4, a5));
                return PyLong_FromLong((long) result);
              }
            }
          }

          PyErr_SetArgsError(type, "mismatch", args);
          return NULL;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/core/FlattenGraphFilterFactory.h"
#include "java/util/Map.h"
#include "java/lang/String.h"
#include "org/apache/lucene/analysis/TokenStream.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace core {

          ::java::lang::Class *FlattenGraphFilterFactory::class$ = NULL;
          jmethodID *FlattenGraphFilterFactory::mids$ = NULL;
          bool FlattenGraphFilterFactory::live$ = false;
          ::java::lang::String *FlattenGraphFilterFactory::NAME = NULL;

          jclass FlattenGraphFilterFactory::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/core/FlattenGraphFilterFactory");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_408bd889ee3beae5] = env->getMethodID(cls, "<init>", "(Ljava/util/Map;)V");
              mids$[mid_create_6de1e28d9d10cd9e] = env->getMethodID(cls, "create", "(Lorg/apache/lucene/analysis/TokenStream;)Lorg/apache/lucene/analysis/TokenStream;");

              class$ = new ::java::lang::Class(cls);
              cls = (jclass) class$->this$;

              NAME = new ::java::lang::String(env->getStaticObjectField(cls, "NAME", "Ljava/lang/String;"));
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          FlattenGraphFilterFactory::FlattenGraphFilterFactory(const ::java::util::Map & a0) : ::org::apache::lucene::analysis::util::TokenFilterFactory(env->newObject(initializeClass, &mids$, mid_init$_408bd889ee3beae5, a0.this$)) {}

          ::org::apache::lucene::analysis::TokenStream FlattenGraphFilterFactory::create(const ::org::apache::lucene::analysis::TokenStream & a0) const
          {
            return ::org::apache::lucene::analysis::TokenStream(env->callObjectMethod(this$, mids$[mid_create_6de1e28d9d10cd9e], a0.this$));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace core {
          static PyObject *t_FlattenGraphFilterFactory_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_FlattenGraphFilterFactory_instance_(PyTypeObject *type, PyObject *arg);
          static int t_FlattenGraphFilterFactory_init_(t_FlattenGraphFilterFactory *self, PyObject *args, PyObject *kwds);
          static PyObject *t_FlattenGraphFilterFactory_create(t_FlattenGraphFilterFactory *self, PyObject *args);

          static PyMethodDef t_FlattenGraphFilterFactory__methods_[] = {
            DECLARE_METHOD(t_FlattenGraphFilterFactory, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_FlattenGraphFilterFactory, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_FlattenGraphFilterFactory, create, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          static PyType_Slot PY_TYPE_SLOTS(FlattenGraphFilterFactory)[] = {
            { Py_tp_methods, t_FlattenGraphFilterFactory__methods_ },
            { Py_tp_init, (void *) t_FlattenGraphFilterFactory_init_ },
            { 0, NULL }
          };

          static PyType_Def *PY_TYPE_BASES(FlattenGraphFilterFactory)[] = {
            &PY_TYPE_DEF(::org::apache::lucene::analysis::util::TokenFilterFactory),
            NULL
          };

          DEFINE_TYPE(FlattenGraphFilterFactory, t_FlattenGraphFilterFactory, FlattenGraphFilterFactory);

          void t_FlattenGraphFilterFactory::install(PyObject *module)
          {
            installType(&PY_TYPE(FlattenGraphFilterFactory), &PY_TYPE_DEF(FlattenGraphFilterFactory), module, "FlattenGraphFilterFactory", 0);
          }

          void t_FlattenGraphFilterFactory::initialize(PyObject *module)
          {
            PyObject_SetAttrString((PyObject *) PY_TYPE(FlattenGraphFilterFactory), "class_", make_descriptor(FlattenGraphFilterFactory::initializeClass, 1));
            PyObject_SetAttrString((PyObject *) PY_TYPE(FlattenGraphFilterFactory), "wrapfn_", make_descriptor(t_FlattenGraphFilterFactory::wrap_jobject));
            PyObject_SetAttrString((PyObject *) PY_TYPE(FlattenGraphFilterFactory), "boxfn_", make_descriptor(boxObject));
            env->getClass(FlattenGraphFilterFactory::initializeClass);
            PyObject_SetAttrString((PyObject *) PY_TYPE(FlattenGraphFilterFactory), "NAME", make_descriptor(j2p(*FlattenGraphFilterFactory::NAME)));
          }

          static PyObject *t_FlattenGraphFilterFactory_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, FlattenGraphFilterFactory::initializeClass, 1)))
              return NULL;
            return t_FlattenGraphFilterFactory::wrap_Object(FlattenGraphFilterFactory(((t_FlattenGraphFilterFactory *) arg)->object.this$));
          }
          static PyObject *t_FlattenGraphFilterFactory_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, FlattenGraphFilterFactory::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_FlattenGraphFilterFactory_init_(t_FlattenGraphFilterFactory *self, PyObject *args, PyObject *kwds)
          {
            ::java::util::Map a0((jobject) NULL);
            PyTypeObject **p0;
            FlattenGraphFilterFactory object((jobject) NULL);

            if (!parseArgs(args, "K", ::java::util::Map::initializeClass, &a0, &p0, ::java::util::t_Map::parameters_))
            {
              INT_CALL(object = FlattenGraphFilterFactory(a0));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_FlattenGraphFilterFactory_create(t_FlattenGraphFilterFactory *self, PyObject *args)
          {
            ::org::apache::lucene::analysis::TokenStream a0((jobject) NULL);
            ::org::apache::lucene::analysis::TokenStream result((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::analysis::TokenStream::initializeClass, &a0))
            {
              OBJ_CALL(result = self->object.create(a0));
              return ::org::apache::lucene::analysis::t_TokenStream::wrap_Object(result);
            }

            return callSuper(PY_TYPE(FlattenGraphFilterFactory), (PyObject *) self, "create", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/geo/GeoEncodingUtils$DistancePredicate.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace geo {

        ::java::lang::Class *GeoEncodingUtils$DistancePredicate::class$ = NULL;
        jmethodID *GeoEncodingUtils$DistancePredicate::mids$ = NULL;
        bool GeoEncodingUtils$DistancePredicate::live$ = false;

        jclass GeoEncodingUtils$DistancePredicate::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/geo/GeoEncodingUtils$DistancePredicate");

            mids$ = new jmethodID[max_mid];
            mids$[mid_test_fd32c163183a36f2] = env->getMethodID(cls, "test", "(II)Z");

            class$ = new ::java::lang::Class(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        jboolean GeoEncodingUtils$DistancePredicate::test(jint a0, jint a1) const
        {
          return env->callBooleanMethod(this$, mids$[mid_test_fd32c163183a36f2], a0, a1);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace geo {
        static PyObject *t_GeoEncodingUtils$DistancePredicate_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_GeoEncodingUtils$DistancePredicate_instance_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_GeoEncodingUtils$DistancePredicate_test(t_GeoEncodingUtils$DistancePredicate *self, PyObject *args);

        static PyMethodDef t_GeoEncodingUtils$DistancePredicate__methods_[] = {
          DECLARE_METHOD(t_GeoEncodingUtils$DistancePredicate, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_GeoEncodingUtils$DistancePredicate, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_GeoEncodingUtils$DistancePredicate, test, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        static PyType_Slot PY_TYPE_SLOTS(GeoEncodingUtils$DistancePredicate)[] = {
          { Py_tp_methods, t_GeoEncodingUtils$DistancePredicate__methods_ },
          { Py_tp_init, (void *) abstract_init },
          { 0, NULL }
        };

        static PyType_Def *PY_TYPE_BASES(GeoEncodingUtils$DistancePredicate)[] = {
          &PY_TYPE_DEF(::org::apache::lucene::geo::GeoEncodingUtils$Grid),
          NULL
        };

        DEFINE_TYPE(GeoEncodingUtils$DistancePredicate, t_GeoEncodingUtils$DistancePredicate, GeoEncodingUtils$DistancePredicate);

        void t_GeoEncodingUtils$DistancePredicate::install(PyObject *module)
        {
          installType(&PY_TYPE(GeoEncodingUtils$DistancePredicate), &PY_TYPE_DEF(GeoEncodingUtils$DistancePredicate), module, "GeoEncodingUtils$DistancePredicate", 0);
        }

        void t_GeoEncodingUtils$DistancePredicate::initialize(PyObject *module)
        {
          PyObject_SetAttrString((PyObject *) PY_TYPE(GeoEncodingUtils$DistancePredicate), "class_", make_descriptor(GeoEncodingUtils$DistancePredicate::initializeClass, 1));
          PyObject_SetAttrString((PyObject *) PY_TYPE(GeoEncodingUtils$DistancePredicate), "wrapfn_", make_descriptor(t_GeoEncodingUtils$DistancePredicate::wrap_jobject));
          PyObject_SetAttrString((PyObject *) PY_TYPE(GeoEncodingUtils$DistancePredicate), "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_GeoEncodingUtils$DistancePredicate_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, GeoEncodingUtils$DistancePredicate::initializeClass, 1)))
            return NULL;
          return t_GeoEncodingUtils$DistancePredicate::wrap_Object(GeoEncodingUtils$DistancePredicate(((t_GeoEncodingUtils$DistancePredicate *) arg)->object.this$));
        }
        static PyObject *t_GeoEncodingUtils$DistancePredicate_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, GeoEncodingUtils$DistancePredicate::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static PyObject *t_GeoEncodingUtils$DistancePredicate_test(t_GeoEncodingUtils$DistancePredicate *self, PyObject *args)
        {
          jint a0;
          jint a1;
          jboolean result;

          if (!parseArgs(args, "II", &a0, &a1))
          {
            OBJ_CALL(result = self->object.test(a0, a1));
            Py_RETURN_BOOL(result);
          }

          PyErr_SetArgsError((PyObject *) self, "test", args);
          return NULL;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/LowerCaseFilter.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/analysis/TokenStream.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {

        ::java::lang::Class *LowerCaseFilter::class$ = NULL;
        jmethodID *LowerCaseFilter::mids$ = NULL;
        bool LowerCaseFilter::live$ = false;

        jclass LowerCaseFilter::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/LowerCaseFilter");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_c26756868a754f4e] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/analysis/TokenStream;)V");
            mids$[mid_incrementToken_8454bd5aa23fd11e] = env->getMethodID(cls, "incrementToken", "()Z");

            class$ = new ::java::lang::Class(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        LowerCaseFilter::LowerCaseFilter(const ::org::apache::lucene::analysis::TokenStream & a0) : ::org::apache::lucene::analysis::TokenFilter(env->newObject(initializeClass, &mids$, mid_init$_c26756868a754f4e, a0.this$)) {}

        jboolean LowerCaseFilter::incrementToken() const
        {
          return env->callBooleanMethod(this$, mids$[mid_incrementToken_8454bd5aa23fd11e]);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        static PyObject *t_LowerCaseFilter_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_LowerCaseFilter_instance_(PyTypeObject *type, PyObject *arg);
        static int t_LowerCaseFilter_init_(t_LowerCaseFilter *self, PyObject *args, PyObject *kwds);
        static PyObject *t_LowerCaseFilter_incrementToken(t_LowerCaseFilter *self, PyObject *args);

        static PyMethodDef t_LowerCaseFilter__methods_[] = {
          DECLARE_METHOD(t_LowerCaseFilter, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_LowerCaseFilter, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_LowerCaseFilter, incrementToken, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        static PyType_Slot PY_TYPE_SLOTS(LowerCaseFilter)[] = {
          { Py_tp_methods, t_LowerCaseFilter__methods_ },
          { Py_tp_init, (void *) t_LowerCaseFilter_init_ },
          { 0, NULL }
        };

        static PyType_Def *PY_TYPE_BASES(LowerCaseFilter)[] = {
          &PY_TYPE_DEF(::org::apache::lucene::analysis::TokenFilter),
          NULL
        };

        DEFINE_TYPE(LowerCaseFilter, t_LowerCaseFilter, LowerCaseFilter);

        void t_LowerCaseFilter::install(PyObject *module)
        {
          installType(&PY_TYPE(LowerCaseFilter), &PY_TYPE_DEF(LowerCaseFilter), module, "LowerCaseFilter", 0);
        }

        void t_LowerCaseFilter::initialize(PyObject *module)
        {
          PyObject_SetAttrString((PyObject *) PY_TYPE(LowerCaseFilter), "class_", make_descriptor(LowerCaseFilter::initializeClass, 1));
          PyObject_SetAttrString((PyObject *) PY_TYPE(LowerCaseFilter), "wrapfn_", make_descriptor(t_LowerCaseFilter::wrap_jobject));
          PyObject_SetAttrString((PyObject *) PY_TYPE(LowerCaseFilter), "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_LowerCaseFilter_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, LowerCaseFilter::initializeClass, 1)))
            return NULL;
          return t_LowerCaseFilter::wrap_Object(LowerCaseFilter(((t_LowerCaseFilter *) arg)->object.this$));
        }
        static PyObject *t_LowerCaseFilter_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, LowerCaseFilter::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_LowerCaseFilter_init_(t_LowerCaseFilter *self, PyObject *args, PyObject *kwds)
        {
          ::org::apache::lucene::analysis::TokenStream a0((jobject) NULL);
          LowerCaseFilter object((jobject) NULL);

          if (!parseArgs(args, "k", ::org::apache::lucene::analysis::TokenStream::initializeClass, &a0))
          {
            INT_CALL(object = LowerCaseFilter(a0));
            self->object = object;
          }
          else
          {
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }

        static PyObject *t_LowerCaseFilter_incrementToken(t_LowerCaseFilter *self, PyObject *args)
        {
          jboolean result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.incrementToken());
            Py_RETURN_BOOL(result);
          }

          return callSuper(PY_TYPE(LowerCaseFilter), (PyObject *) self, "incrementToken", args, 2);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/classification/document/KNearestNeighborDocumentClassifier.h"
#include "org/apache/lucene/index/IndexReader.h"
#include "org/apache/lucene/search/similarities/Similarity.h"
#include "java/util/Map.h"
#include "org/apache/lucene/classification/ClassificationResult.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/analysis/Analyzer.h"
#include "org/apache/lucene/classification/document/DocumentClassifier.h"
#include "org/apache/lucene/util/BytesRef.h"
#include "java/lang/String.h"
#include "org/apache/lucene/search/Query.h"
#include "org/apache/lucene/document/Document.h"
#include "java/io/IOException.h"
#include "java/util/List.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace classification {
        namespace document {

          ::java::lang::Class *KNearestNeighborDocumentClassifier::class$ = NULL;
          jmethodID *KNearestNeighborDocumentClassifier::mids$ = NULL;
          bool KNearestNeighborDocumentClassifier::live$ = false;

          jclass KNearestNeighborDocumentClassifier::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/classification/document/KNearestNeighborDocumentClassifier");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_b0396577b895c46c] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/index/IndexReader;Lorg/apache/lucene/search/similarities/Similarity;Lorg/apache/lucene/search/Query;IIILjava/lang/String;Ljava/util/Map;[Ljava/lang/String;)V");
              mids$[mid_assignClass_7ffc5762e9e5efc8] = env->getMethodID(cls, "assignClass", "(Lorg/apache/lucene/document/Document;)Lorg/apache/lucene/classification/ClassificationResult;");
              mids$[mid_getClasses_f88498c88ae02b70] = env->getMethodID(cls, "getClasses", "(Lorg/apache/lucene/document/Document;)Ljava/util/List;");
              mids$[mid_getClasses_3c35cce6258f355e] = env->getMethodID(cls, "getClasses", "(Lorg/apache/lucene/document/Document;I)Ljava/util/List;");

              class$ = new ::java::lang::Class(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          KNearestNeighborDocumentClassifier::KNearestNeighborDocumentClassifier(const ::org::apache::lucene::index::IndexReader & a0, const ::org::apache::lucene::search::similarities::Similarity & a1, const ::org::apache::lucene::search::Query & a2, jint a3, jint a4, jint a5, const ::java::lang::String & a6, const ::java::util::Map & a7, const JArray< ::java::lang::String > & a8) : ::org::apache::lucene::classification::KNearestNeighborClassifier(env->newObject(initializeClass, &mids$, mid_init$_b0396577b895c46c, a0.this$, a1.this$, a2.this$, a3, a4, a5, a6.this$, a7.this$, a8.this$)) {}

          ::org::apache::lucene::classification::ClassificationResult KNearestNeighborDocumentClassifier::assignClass(const ::org::apache::lucene::document::Document & a0) const
          {
            return ::org::apache::lucene::classification::ClassificationResult(env->callObjectMethod(this$, mids$[mid_assignClass_7ffc5762e9e5efc8], a0.this$));
          }

          ::java::util::List KNearestNeighborDocumentClassifier::getClasses(const ::org::apache::lucene::document::Document & a0) const
          {
            return ::java::util::List(env->callObjectMethod(this$, mids$[mid_getClasses_f88498c88ae02b70], a0.this$));
          }

          ::java::util::List KNearestNeighborDocumentClassifier::getClasses(const ::org::apache::lucene::document::Document & a0, jint a1) const
          {
            return ::java::util::List(env->callObjectMethod(this$, mids$[mid_getClasses_3c35cce6258f355e], a0.this$, a1));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace classification {
        namespace document {
          static PyObject *t_KNearestNeighborDocumentClassifier_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_KNearestNeighborDocumentClassifier_instance_(PyTypeObject *type, PyObject *arg);
          static int t_KNearestNeighborDocumentClassifier_init_(t_KNearestNeighborDocumentClassifier *self, PyObject *args, PyObject *kwds);
          static PyObject *t_KNearestNeighborDocumentClassifier_assignClass(t_KNearestNeighborDocumentClassifier *self, PyObject *args);
          static PyObject *t_KNearestNeighborDocumentClassifier_getClasses(t_KNearestNeighborDocumentClassifier *self, PyObject *args);

          static PyMethodDef t_KNearestNeighborDocumentClassifier__methods_[] = {
            DECLARE_METHOD(t_KNearestNeighborDocumentClassifier, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_KNearestNeighborDocumentClassifier, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_KNearestNeighborDocumentClassifier, assignClass, METH_VARARGS),
            DECLARE_METHOD(t_KNearestNeighborDocumentClassifier, getClasses, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          static PyType_Slot PY_TYPE_SLOTS(KNearestNeighborDocumentClassifier)[] = {
            { Py_tp_methods, t_KNearestNeighborDocumentClassifier__methods_ },
            { Py_tp_init, (void *) t_KNearestNeighborDocumentClassifier_init_ },
            { 0, NULL }
          };

          static PyType_Def *PY_TYPE_BASES(KNearestNeighborDocumentClassifier)[] = {
            &PY_TYPE_DEF(::org::apache::lucene::classification::KNearestNeighborClassifier),
            NULL
          };

          DEFINE_TYPE(KNearestNeighborDocumentClassifier, t_KNearestNeighborDocumentClassifier, KNearestNeighborDocumentClassifier);

          void t_KNearestNeighborDocumentClassifier::install(PyObject *module)
          {
            installType(&PY_TYPE(KNearestNeighborDocumentClassifier), &PY_TYPE_DEF(KNearestNeighborDocumentClassifier), module, "KNearestNeighborDocumentClassifier", 0);
          }

          void t_KNearestNeighborDocumentClassifier::initialize(PyObject *module)
          {
            PyObject_SetAttrString((PyObject *) PY_TYPE(KNearestNeighborDocumentClassifier), "class_", make_descriptor(KNearestNeighborDocumentClassifier::initializeClass, 1));
            PyObject_SetAttrString((PyObject *) PY_TYPE(KNearestNeighborDocumentClassifier), "wrapfn_", make_descriptor(t_KNearestNeighborDocumentClassifier::wrap_jobject));
            PyObject_SetAttrString((PyObject *) PY_TYPE(KNearestNeighborDocumentClassifier), "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_KNearestNeighborDocumentClassifier_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, KNearestNeighborDocumentClassifier::initializeClass, 1)))
              return NULL;
            return t_KNearestNeighborDocumentClassifier::wrap_Object(KNearestNeighborDocumentClassifier(((t_KNearestNeighborDocumentClassifier *) arg)->object.this$));
          }
          static PyObject *t_KNearestNeighborDocumentClassifier_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, KNearestNeighborDocumentClassifier::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_KNearestNeighborDocumentClassifier_init_(t_KNearestNeighborDocumentClassifier *self, PyObject *args, PyObject *kwds)
          {
            ::org::apache::lucene::index::IndexReader a0((jobject) NULL);
            ::org::apache::lucene::search::similarities::Similarity a1((jobject) NULL);
            ::org::apache::lucene::search::Query a2((jobject) NULL);
            jint a3;
            jint a4;
            jint a5;
            ::java::lang::String a6((jobject) NULL);
            ::java::util::Map a7((jobject) NULL);
            PyTypeObject **p7;
            JArray< ::java::lang::String > a8((jobject) NULL);
            KNearestNeighborDocumentClassifier object((jobject) NULL);

            if (!parseArgs(args, "kkkIIIsK[s", ::org::apache::lucene::index::IndexReader::initializeClass, ::org::apache::lucene::search::similarities::Similarity::initializeClass, ::org::apache::lucene::search::Query::initializeClass, ::java::util::Map::initializeClass, &a0, &a1, &a2, &a3, &a4, &a5, &a6, &a7, &p7, ::java::util::t_Map::parameters_, &a8))
            {
              INT_CALL(object = KNearestNeighborDocumentClassifier(a0, a1, a2, a3, a4, a5, a6, a7, a8));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_KNearestNeighborDocumentClassifier_assignClass(t_KNearestNeighborDocumentClassifier *self, PyObject *args)
          {
            ::org::apache::lucene::document::Document a0((jobject) NULL);
            ::org::apache::lucene::classification::ClassificationResult result((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::document::Document::initializeClass, &a0))
            {
              OBJ_CALL(result = self->object.assignClass(a0));
              return ::org::apache::lucene::classification::t_ClassificationResult::wrap_Object(result, ::org::apache::lucene::util::PY_TYPE(BytesRef));
            }

            return callSuper(PY_TYPE(KNearestNeighborDocumentClassifier), (PyObject *) self, "assignClass", args, 2);
          }

          static PyObject *t_KNearestNeighborDocumentClassifier_getClasses(t_KNearestNeighborDocumentClassifier *self, PyObject *args)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 1:
              {
                ::org::apache::lucene::document::Document a0((jobject) NULL);
                ::java::util::List result((jobject) NULL);

                if (!parseArgs(args, "k", ::org::apache::lucene::document::Document::initializeClass, &a0))
                {
                  OBJ_CALL(result = self->object.getClasses(a0));
                  return ::java::util::t_List::wrap_Object(result);
                }
              }
              break;
             case 2:
              {
                ::org::apache::lucene::document::Document a0((jobject) NULL);
                jint a1;
                ::java::util::List result((jobject) NULL);

                if (!parseArgs(args, "kI", ::org::apache::lucene::document::Document::initializeClass, &a0, &a1))
                {
                  OBJ_CALL(result = self->object.getClasses(a0, a1));
                  return ::java::util::t_List::wrap_Object(result);
                }
              }
            }

            return callSuper(PY_TYPE(KNearestNeighborDocumentClassifier), (PyObject *) self, "getClasses", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/TotalHits.h"
#include "java/lang/String.h"
#include "org/apache/lucene/search/TotalHits$Relation.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {

        ::java::lang::Class *TotalHits::class$ = NULL;
        jmethodID *TotalHits::mids$ = NULL;
        jfieldID *TotalHits::fids$ = NULL;
        bool TotalHits::live$ = false;

        jclass TotalHits::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/search/TotalHits");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_aa53f41817784edd] = env->getMethodID(cls, "<init>", "(JLorg/apache/lucene/search/TotalHits$Relation;)V");
            mids$[mid_equals_8b72f2dcdde6fd1d] = env->getMethodID(cls, "equals", "(Ljava/lang/Object;)Z");
            mids$[mid_hashCode_9972fcc56b44e79d] = env->getMethodID(cls, "hashCode", "()I");
            mids$[mid_toString_db9b55ba01e03e4b] = env->getMethodID(cls, "toString", "()Ljava/lang/String;");

            fids$ = new jfieldID[max_fid];
            fids$[fid_relation] = env->getFieldID(cls, "relation", "Lorg/apache/lucene/search/TotalHits$Relation;");
            fids$[fid_value] = env->getFieldID(cls, "value", "J");

            class$ = new ::java::lang::Class(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        TotalHits::TotalHits(jlong a0, const ::org::apache::lucene::search::TotalHits$Relation & a1) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_aa53f41817784edd, a0, a1.this$)) {}

        jboolean TotalHits::equals(const ::java::lang::Object & a0) const
        {
          return env->callBooleanMethod(this$, mids$[mid_equals_8b72f2dcdde6fd1d], a0.this$);
        }

        jint TotalHits::hashCode() const
        {
          return env->callIntMethod(this$, mids$[mid_hashCode_9972fcc56b44e79d]);
        }

        ::java::lang::String TotalHits::toString() const
        {
          return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_db9b55ba01e03e4b]));
        }

        ::org::apache::lucene::search::TotalHits$Relation TotalHits::_get_relation() const
        {
          return ::org::apache::lucene::search::TotalHits$Relation(env->getObjectField(this$, fids$[fid_relation]));
        }

        jlong TotalHits::_get_value() const
        {
          return env->getLongField(this$, fids$[fid_value]);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        static PyObject *t_TotalHits_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_TotalHits_instance_(PyTypeObject *type, PyObject *arg);
        static int t_TotalHits_init_(t_TotalHits *self, PyObject *args, PyObject *kwds);
        static PyObject *t_TotalHits_equals(t_TotalHits *self, PyObject *args);
        static PyObject *t_TotalHits_hashCode(t_TotalHits *self, PyObject *args);
        static PyObject *t_TotalHits_toString(t_TotalHits *self, PyObject *args);
        static PyObject *t_TotalHits_get__relation(t_TotalHits *self, void *data);
        static PyObject *t_TotalHits_get__value(t_TotalHits *self, void *data);

        static PyGetSetDef t_TotalHits__fields_[] = {
          DECLARE_GET_FIELD(t_TotalHits, relation),
          DECLARE_GET_FIELD(t_TotalHits, value),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_TotalHits__methods_[] = {
          DECLARE_METHOD(t_TotalHits, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_TotalHits, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_TotalHits, equals, METH_VARARGS),
          DECLARE_METHOD(t_TotalHits, hashCode, METH_VARARGS),
          DECLARE_METHOD(t_TotalHits, toString, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        static PyType_Slot PY_TYPE_SLOTS(TotalHits)[] = {
          { Py_tp_methods, t_TotalHits__methods_ },
          { Py_tp_init, (void *) t_TotalHits_init_ },
          { Py_tp_getset, t_TotalHits__fields_ },
          { 0, NULL }
        };

        static PyType_Def *PY_TYPE_BASES(TotalHits)[] = {
          &PY_TYPE_DEF(::java::lang::Object),
          NULL
        };

        DEFINE_TYPE(TotalHits, t_TotalHits, TotalHits);

        void t_TotalHits::install(PyObject *module)
        {
          installType(&PY_TYPE(TotalHits), &PY_TYPE_DEF(TotalHits), module, "TotalHits", 0);
          PyObject_SetAttrString((PyObject *) PY_TYPE(TotalHits), "Relation", make_descriptor(&PY_TYPE_DEF(TotalHits$Relation)));
        }

        void t_TotalHits::initialize(PyObject *module)
        {
          PyObject_SetAttrString((PyObject *) PY_TYPE(TotalHits), "class_", make_descriptor(TotalHits::initializeClass, 1));
          PyObject_SetAttrString((PyObject *) PY_TYPE(TotalHits), "wrapfn_", make_descriptor(t_TotalHits::wrap_jobject));
          PyObject_SetAttrString((PyObject *) PY_TYPE(TotalHits), "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_TotalHits_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, TotalHits::initializeClass, 1)))
            return NULL;
          return t_TotalHits::wrap_Object(TotalHits(((t_TotalHits *) arg)->object.this$));
        }
        static PyObject *t_TotalHits_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, TotalHits::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_TotalHits_init_(t_TotalHits *self, PyObject *args, PyObject *kwds)
        {
          jlong a0;
          ::org::apache::lucene::search::TotalHits$Relation a1((jobject) NULL);
          PyTypeObject **p1;
          TotalHits object((jobject) NULL);

          if (!parseArgs(args, "JK", ::org::apache::lucene::search::TotalHits$Relation::initializeClass, &a0, &a1, &p1, ::org::apache::lucene::search::t_TotalHits$Relation::parameters_))
          {
            INT_CALL(object = TotalHits(a0, a1));
            self->object = object;
          }
          else
          {
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }

        static PyObject *t_TotalHits_equals(t_TotalHits *self, PyObject *args)
        {
          ::java::lang::Object a0((jobject) NULL);
          jboolean result;

          if (!parseArgs(args, "o", &a0))
          {
            OBJ_CALL(result = self->object.equals(a0));
            Py_RETURN_BOOL(result);
          }

          return callSuper(PY_TYPE(TotalHits), (PyObject *) self, "equals", args, 2);
        }

        static PyObject *t_TotalHits_hashCode(t_TotalHits *self, PyObject *args)
        {
          jint result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.hashCode());
            return PyLong_FromLong((long) result);
          }

          return callSuper(PY_TYPE(TotalHits), (PyObject *) self, "hashCode", args, 2);
        }

        static PyObject *t_TotalHits_toString(t_TotalHits *self, PyObject *args)
        {
          ::java::lang::String result((jobject) NULL);

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.toString());
            return j2p(result);
          }

          return callSuper(PY_TYPE(TotalHits), (PyObject *) self, "toString", args, 2);
        }

        static PyObject *t_TotalHits_get__relation(t_TotalHits *self, void *data)
        {
          ::org::apache::lucene::search::TotalHits$Relation value((jobject) NULL);
          OBJ_CALL(value = self->object._get_relation());
          return ::org::apache::lucene::search::t_TotalHits$Relation::wrap_Object(value);
        }

        static PyObject *t_TotalHits_get__value(t_TotalHits *self, void *data)
        {
          jlong value;
          OBJ_CALL(value = self->object._get_value());
          return PyLong_FromLongLong((PY_LONG_LONG) value);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/ko/dict/UserDictionary.h"
#include "org/apache/lucene/analysis/ko/dict/Dictionary$Morpheme.h"
#include "org/apache/lucene/analysis/ko/dict/TokenInfoFST.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/analysis/ko/dict/Dictionary.h"
#include "org/apache/lucene/analysis/ko/POS$Type.h"
#include "java/lang/Integer.h"
#include "java/lang/String.h"
#include "org/apache/lucene/analysis/ko/POS$Tag.h"
#include "org/apache/lucene/analysis/ko/dict/UserDictionary.h"
#include "java/io/Reader.h"
#include "java/util/List.h"
#include "java/io/IOException.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace ko {
          namespace dict {

            ::java::lang::Class *UserDictionary::class$ = NULL;
            jmethodID *UserDictionary::mids$ = NULL;
            bool UserDictionary::live$ = false;

            jclass UserDictionary::initializeClass(bool getOnly)
            {
              if (getOnly)
                return (jclass) (live$ ? class$->this$ : NULL);
              if (class$ == NULL)
              {
                jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/ko/dict/UserDictionary");

                mids$ = new jmethodID[max_mid];
                mids$[mid_getFST_40646bf76a22e5f0] = env->getMethodID(cls, "getFST", "()Lorg/apache/lucene/analysis/ko/dict/TokenInfoFST;");
                mids$[mid_getLeftId_1e143afe1894d213] = env->getMethodID(cls, "getLeftId", "(I)I");
                mids$[mid_getLeftPOS_b8b0dfb882948f38] = env->getMethodID(cls, "getLeftPOS", "(I)Lorg/apache/lucene/analysis/ko/POS$Tag;");
                mids$[mid_getMorphemes_ec2d69830563855a] = env->getMethodID(cls, "getMorphemes", "(I[CII)[Lorg/apache/lucene/analysis/ko/dict/Dictionary$Morpheme;");
                mids$[mid_getPOSType_b7cb9401295fad9c] = env->getMethodID(cls, "getPOSType", "(I)Lorg/apache/lucene/analysis/ko/POS$Type;");
                mids$[mid_getReading_d7593acad64ef635] = env->getMethodID(cls, "getReading", "(I)Ljava/lang/String;");
                mids$[mid_getRightId_1e143afe1894d213] = env->getMethodID(cls, "getRightId", "(I)I");
                mids$[mid_getRightPOS_b8b0dfb882948f38] = env->getMethodID(cls, "getRightPOS", "(I)Lorg/apache/lucene/analysis/ko/POS$Tag;");
                mids$[mid_getWordCost_1e143afe1894d213] = env->getMethodID(cls, "getWordCost", "(I)I");
                mids$[mid_lookup_2fcadad0696183d0] = env->getMethodID(cls, "lookup", "([CII)Ljava/util/List;");
                mids$[mid_open_6f6db531fefa97de] = env->getStaticMethodID(cls, "open", "(Ljava/io/Reader;)Lorg/apache/lucene/analysis/ko/dict/UserDictionary;");

                class$ = new ::java::lang::Class(cls);
                live$ = true;
              }
              return (jclass) class$->this$;
            }

            ::org::apache::lucene::analysis::ko::dict::TokenInfoFST UserDictionary::getFST() const
            {
              return ::org::apache::lucene::analysis::ko::dict::TokenInfoFST(env->callObjectMethod(this$, mids$[mid_getFST_40646bf76a22e5f0]));
            }

            jint UserDictionary::getLeftId(jint a0) const
            {
              return env->callIntMethod(this$, mids$[mid_getLeftId_1e143afe1894d213], a0);
            }

            ::org::apache::lucene::analysis::ko::POS$Tag UserDictionary::getLeftPOS(jint a0) const
            {
              return ::org::apache::lucene::analysis::ko::POS$Tag(env->callObjectMethod(this$, mids$[mid_getLeftPOS_b8b0dfb882948f38], a0));
            }

            JArray< ::org::apache::lucene::analysis::ko::dict::Dictionary$Morpheme > UserDictionary::getMorphemes(jint a0, const JArray< jchar > & a1, jint a2, jint a3) const
            {
              return JArray< ::org::apache::lucene::analysis::ko::dict::Dictionary$Morpheme >(env->callObjectMethod(this$, mids$[mid_getMorphemes_ec2d69830563855a], a0, a1.this$, a2, a3));
            }

            ::org::apache::lucene::analysis::ko::POS$Type UserDictionary::getPOSType(jint a0) const
            {
              return ::org::apache::lucene::analysis::ko::POS$Type(env->callObjectMethod(this$, mids$[mid_getPOSType_b7cb9401295fad9c], a0));
            }

            ::java::lang::String UserDictionary::getReading(jint a0) const
            {
              return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_getReading_d7593acad64ef635], a0));
            }

            jint UserDictionary::getRightId(jint a0) const
            {
              return env->callIntMethod(this$, mids$[mid_getRightId_1e143afe1894d213], a0);
            }

            ::org::apache::lucene::analysis::ko::POS$Tag UserDictionary::getRightPOS(jint a0) const
            {
              return ::org::apache::lucene::analysis::ko::POS$Tag(env->callObjectMethod(this$, mids$[mid_getRightPOS_b8b0dfb882948f38], a0));
            }

            jint UserDictionary::getWordCost(jint a0) const
            {
              return env->callIntMethod(this$, mids$[mid_getWordCost_1e143afe1894d213], a0);
            }

            ::java::util::List UserDictionary::lookup(const JArray< jchar > & a0, jint a1, jint a2) const
            {
              return ::java::util::List(env->callObjectMethod(this$, mids$[mid_lookup_2fcadad0696183d0], a0.this$, a1, a2));
            }

            UserDictionary UserDictionary::open(const ::java::io::Reader & a0)
            {
              jclass cls = env->getClass(initializeClass);
              return UserDictionary(env->callStaticObjectMethod(cls, mids$[mid_open_6f6db531fefa97de], a0.this$));
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace ko {
          namespace dict {
            static PyObject *t_UserDictionary_cast_(PyTypeObject *type, PyObject *arg);
            static PyObject *t_UserDictionary_instance_(PyTypeObject *type, PyObject *arg);
            static PyObject *t_UserDictionary_getFST(t_UserDictionary *self);
            static PyObject *t_UserDictionary_getLeftId(t_UserDictionary *self, PyObject *arg);
            static PyObject *t_UserDictionary_getLeftPOS(t_UserDictionary *self, PyObject *arg);
            static PyObject *t_UserDictionary_getMorphemes(t_UserDictionary *self, PyObject *args);
            static PyObject *t_UserDictionary_getPOSType(t_UserDictionary *self, PyObject *arg);
            static PyObject *t_UserDictionary_getReading(t_UserDictionary *self, PyObject *arg);
            static PyObject *t_UserDictionary_getRightId(t_UserDictionary *self, PyObject *arg);
            static PyObject *t_UserDictionary_getRightPOS(t_UserDictionary *self, PyObject *arg);
            static PyObject *t_UserDictionary_getWordCost(t_UserDictionary *self, PyObject *arg);
            static PyObject *t_UserDictionary_lookup(t_UserDictionary *self, PyObject *args);
            static PyObject *t_UserDictionary_open(PyTypeObject *type, PyObject *arg);
            static PyObject *t_UserDictionary_get__fST(t_UserDictionary *self, void *data);
            static PyGetSetDef t_UserDictionary__fields_[] = {
              DECLARE_GET_FIELD(t_UserDictionary, fST),
              { NULL, NULL, NULL, NULL, NULL }
            };

            static PyMethodDef t_UserDictionary__methods_[] = {
              DECLARE_METHOD(t_UserDictionary, cast_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_UserDictionary, instance_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_UserDictionary, getFST, METH_NOARGS),
              DECLARE_METHOD(t_UserDictionary, getLeftId, METH_O),
              DECLARE_METHOD(t_UserDictionary, getLeftPOS, METH_O),
              DECLARE_METHOD(t_UserDictionary, getMorphemes, METH_VARARGS),
              DECLARE_METHOD(t_UserDictionary, getPOSType, METH_O),
              DECLARE_METHOD(t_UserDictionary, getReading, METH_O),
              DECLARE_METHOD(t_UserDictionary, getRightId, METH_O),
              DECLARE_METHOD(t_UserDictionary, getRightPOS, METH_O),
              DECLARE_METHOD(t_UserDictionary, getWordCost, METH_O),
              DECLARE_METHOD(t_UserDictionary, lookup, METH_VARARGS),
              DECLARE_METHOD(t_UserDictionary, open, METH_O | METH_CLASS),
              { NULL, NULL, 0, NULL }
            };

            static PyType_Slot PY_TYPE_SLOTS(UserDictionary)[] = {
              { Py_tp_methods, t_UserDictionary__methods_ },
              { Py_tp_init, (void *) abstract_init },
              { Py_tp_getset, t_UserDictionary__fields_ },
              { 0, NULL }
            };

            static PyType_Def *PY_TYPE_BASES(UserDictionary)[] = {
              &PY_TYPE_DEF(::java::lang::Object),
              NULL
            };

            DEFINE_TYPE(UserDictionary, t_UserDictionary, UserDictionary);

            void t_UserDictionary::install(PyObject *module)
            {
              installType(&PY_TYPE(UserDictionary), &PY_TYPE_DEF(UserDictionary), module, "UserDictionary", 0);
            }

            void t_UserDictionary::initialize(PyObject *module)
            {
              PyObject_SetAttrString((PyObject *) PY_TYPE(UserDictionary), "class_", make_descriptor(UserDictionary::initializeClass, 1));
              PyObject_SetAttrString((PyObject *) PY_TYPE(UserDictionary), "wrapfn_", make_descriptor(t_UserDictionary::wrap_jobject));
              PyObject_SetAttrString((PyObject *) PY_TYPE(UserDictionary), "boxfn_", make_descriptor(boxObject));
            }

            static PyObject *t_UserDictionary_cast_(PyTypeObject *type, PyObject *arg)
            {
              if (!(arg = castCheck(arg, UserDictionary::initializeClass, 1)))
                return NULL;
              return t_UserDictionary::wrap_Object(UserDictionary(((t_UserDictionary *) arg)->object.this$));
            }
            static PyObject *t_UserDictionary_instance_(PyTypeObject *type, PyObject *arg)
            {
              if (!castCheck(arg, UserDictionary::initializeClass, 0))
                Py_RETURN_FALSE;
              Py_RETURN_TRUE;
            }

            static PyObject *t_UserDictionary_getFST(t_UserDictionary *self)
            {
              ::org::apache::lucene::analysis::ko::dict::TokenInfoFST result((jobject) NULL);
              OBJ_CALL(result = self->object.getFST());
              return ::org::apache::lucene::analysis::ko::dict::t_TokenInfoFST::wrap_Object(result);
            }

            static PyObject *t_UserDictionary_getLeftId(t_UserDictionary *self, PyObject *arg)
            {
              jint a0;
              jint result;

              if (!parseArg(arg, "I", &a0))
              {
                OBJ_CALL(result = self->object.getLeftId(a0));
                return PyLong_FromLong((long) result);
              }

              PyErr_SetArgsError((PyObject *) self, "getLeftId", arg);
              return NULL;
            }

            static PyObject *t_UserDictionary_getLeftPOS(t_UserDictionary *self, PyObject *arg)
            {
              jint a0;
              ::org::apache::lucene::analysis::ko::POS$Tag result((jobject) NULL);

              if (!parseArg(arg, "I", &a0))
              {
                OBJ_CALL(result = self->object.getLeftPOS(a0));
                return ::org::apache::lucene::analysis::ko::t_POS$Tag::wrap_Object(result);
              }

              PyErr_SetArgsError((PyObject *) self, "getLeftPOS", arg);
              return NULL;
            }

            static PyObject *t_UserDictionary_getMorphemes(t_UserDictionary *self, PyObject *args)
            {
              jint a0;
              JArray< jchar > a1((jobject) NULL);
              jint a2;
              jint a3;
              JArray< ::org::apache::lucene::analysis::ko::dict::Dictionary$Morpheme > result((jobject) NULL);

              if (!parseArgs(args, "I[CII", &a0, &a1, &a2, &a3))
              {
                OBJ_CALL(result = self->object.getMorphemes(a0, a1, a2, a3));
                return JArray<jobject>(result.this$).wrap(::org::apache::lucene::analysis::ko::dict::t_Dictionary$Morpheme::wrap_jobject);
              }

              PyErr_SetArgsError((PyObject *) self, "getMorphemes", args);
              return NULL;
            }

            static PyObject *t_UserDictionary_getPOSType(t_UserDictionary *self, PyObject *arg)
            {
              jint a0;
              ::org::apache::lucene::analysis::ko::POS$Type result((jobject) NULL);

              if (!parseArg(arg, "I", &a0))
              {
                OBJ_CALL(result = self->object.getPOSType(a0));
                return ::org::apache::lucene::analysis::ko::t_POS$Type::wrap_Object(result);
              }

              PyErr_SetArgsError((PyObject *) self, "getPOSType", arg);
              return NULL;
            }

            static PyObject *t_UserDictionary_getReading(t_UserDictionary *self, PyObject *arg)
            {
              jint a0;
              ::java::lang::String result((jobject) NULL);

              if (!parseArg(arg, "I", &a0))
              {
                OBJ_CALL(result = self->object.getReading(a0));
                return j2p(result);
              }

              PyErr_SetArgsError((PyObject *) self, "getReading", arg);
              return NULL;
            }

            static PyObject *t_UserDictionary_getRightId(t_UserDictionary *self, PyObject *arg)
            {
              jint a0;
              jint result;

              if (!parseArg(arg, "I", &a0))
              {
                OBJ_CALL(result = self->object.getRightId(a0));
                return PyLong_FromLong((long) result);
              }

              PyErr_SetArgsError((PyObject *) self, "getRightId", arg);
              return NULL;
            }

            static PyObject *t_UserDictionary_getRightPOS(t_UserDictionary *self, PyObject *arg)
            {
              jint a0;
              ::org::apache::lucene::analysis::ko::POS$Tag result((jobject) NULL);

              if (!parseArg(arg, "I", &a0))
              {
                OBJ_CALL(result = self->object.getRightPOS(a0));
                return ::org::apache::lucene::analysis::ko::t_POS$Tag::wrap_Object(result);
              }

              PyErr_SetArgsError((PyObject *) self, "getRightPOS", arg);
              return NULL;
            }

            static PyObject *t_UserDictionary_getWordCost(t_UserDictionary *self, PyObject *arg)
            {
              jint a0;
              jint result;

              if (!parseArg(arg, "I", &a0))
              {
                OBJ_CALL(result = self->object.getWordCost(a0));
                return PyLong_FromLong((long) result);
              }

              PyErr_SetArgsError((PyObject *) self, "getWordCost", arg);
              return NULL;
            }

            static PyObject *t_UserDictionary_lookup(t_UserDictionary *self, PyObject *args)
            {
              JArray< jchar > a0((jobject) NULL);
              jint a1;
              jint a2;
              ::java::util::List result((jobject) NULL);

              if (!parseArgs(args, "[CII", &a0, &a1, &a2))
              {
                OBJ_CALL(result = self->object.lookup(a0, a1, a2));
                return ::java::util::t_List::wrap_Object(result, ::java::lang::PY_TYPE(Integer));
              }

              PyErr_SetArgsError((PyObject *) self, "lookup", args);
              return NULL;
            }

            static PyObject *t_UserDictionary_open(PyTypeObject *type, PyObject *arg)
            {
              ::java::io::Reader a0((jobject) NULL);
              UserDictionary result((jobject) NULL);

              if (!parseArg(arg, "k", ::java::io::Reader::initializeClass, &a0))
              {
                OBJ_CALL(result = ::org::apache::lucene::analysis::ko::dict::UserDictionary::open(a0));
                return t_UserDictionary::wrap_Object(result);
              }

              PyErr_SetArgsError(type, "open", arg);
              return NULL;
            }

            static PyObject *t_UserDictionary_get__fST(t_UserDictionary *self, void *data)
            {
              ::org::apache::lucene::analysis::ko::dict::TokenInfoFST value((jobject) NULL);
              OBJ_CALL(value = self->object.getFST());
              return ::org::apache::lucene::analysis::ko::dict::t_TokenInfoFST::wrap_Object(value);
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/spans/SpanBoostQuery.h"
#include "org/apache/lucene/index/IndexReader.h"
#include "org/apache/lucene/search/IndexSearcher.h"
#include "java/lang/Class.h"
#include "java/lang/Object.h"
#include "org/apache/lucene/search/spans/SpanWeight.h"
#include "java/lang/String.h"
#include "org/apache/lucene/search/Query.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/search/QueryVisitor.h"
#include "org/apache/lucene/search/ScoreMode.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace spans {

          ::java::lang::Class *SpanBoostQuery::class$ = NULL;
          jmethodID *SpanBoostQuery::mids$ = NULL;
          bool SpanBoostQuery::live$ = false;

          jclass SpanBoostQuery::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/search/spans/SpanBoostQuery");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_d187e1529c821aa4] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/search/spans/SpanQuery;F)V");
              mids$[mid_createWeight_5baab4cc5ccc46b6] = env->getMethodID(cls, "createWeight", "(Lorg/apache/lucene/search/IndexSearcher;Lorg/apache/lucene/search/ScoreMode;F)Lorg/apache/lucene/search/spans/SpanWeight;");
              mids$[mid_equals_8b72f2dcdde6fd1d] = env->getMethodID(cls, "equals", "(Ljava/lang/Object;)Z");
              mids$[mid_getBoost_58aec2b64dff50c8] = env->getMethodID(cls, "getBoost", "()F");
              mids$[mid_getField_db9b55ba01e03e4b] = env->getMethodID(cls, "getField", "()Ljava/lang/String;");
              mids$[mid_getQuery_5a8903ceec80d1b9] = env->getMethodID(cls, "getQuery", "()Lorg/apache/lucene/search/spans/SpanQuery;");
              mids$[mid_hashCode_9972fcc56b44e79d] = env->getMethodID(cls, "hashCode", "()I");
              mids$[mid_rewrite_bb52f19a8254555c] = env->getMethodID(cls, "rewrite", "(Lorg/apache/lucene/index/IndexReader;)Lorg/apache/lucene/search/Query;");
              mids$[mid_toString_9bfa75c9f141b67f] = env->getMethodID(cls, "toString", "(Ljava/lang/String;)Ljava/lang/String;");
              mids$[mid_visit_f9e6207006c5b6c1] = env->getMethodID(cls, "visit", "(Lorg/apache/lucene/search/QueryVisitor;)V");

              class$ = new ::java::lang::Class(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          SpanBoostQuery::SpanBoostQuery(const ::org::apache::lucene::search::spans::SpanQuery & a0, jfloat a1) : ::org::apache::lucene::search::spans::SpanQuery(env->newObject(initializeClass, &mids$, mid_init$_d187e1529c821aa4, a0.this$, a1)) {}

          ::org::apache::lucene::search::spans::SpanWeight SpanBoostQuery::createWeight(const ::org::apache::lucene::search::IndexSearcher & a0, const ::org::apache::lucene::search::ScoreMode & a1, jfloat a2) const
          {
            return ::org::apache::lucene::search::spans::SpanWeight(env->callObjectMethod(this$, mids$[mid_createWeight_5baab4cc5ccc46b6], a0.this$, a1.this$, a2));
          }

          jboolean SpanBoostQuery::equals(const ::java::lang::Object & a0) const
          {
            return env->callBooleanMethod(this$, mids$[mid_equals_8b72f2dcdde6fd1d], a0.this$);
          }

          jfloat SpanBoostQuery::getBoost() const
          {
            return env->callFloatMethod(this$, mids$[mid_getBoost_58aec2b64dff50c8]);
          }

          ::java::lang::String SpanBoostQuery::getField() const
          {
            return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_getField_db9b55ba01e03e4b]));
          }

          ::org::apache::lucene::search::spans::SpanQuery SpanBoostQuery::getQuery() const
          {
            return ::org::apache::lucene::search::spans::SpanQuery(env->callObjectMethod(this$, mids$[mid_getQuery_5a8903ceec80d1b9]));
          }

          jint SpanBoostQuery::hashCode() const
          {
            return env->callIntMethod(this$, mids$[mid_hashCode_9972fcc56b44e79d]);
          }

          ::org::apache::lucene::search::Query SpanBoostQuery::rewrite(const ::org::apache::lucene::index::IndexReader & a0) const
          {
            return ::org::apache::lucene::search::Query(env->callObjectMethod(this$, mids$[mid_rewrite_bb52f19a8254555c], a0.this$));
          }

          ::java::lang::String SpanBoostQuery::toString(const ::java::lang::String & a0) const
          {
            return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_9bfa75c9f141b67f], a0.this$));
          }

          void SpanBoostQuery::visit(const ::org::apache::lucene::search::QueryVisitor & a0) const
          {
            env->callVoidMethod(this$, mids$[mid_visit_f9e6207006c5b6c1], a0.this$);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace spans {
          static PyObject *t_SpanBoostQuery_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_SpanBoostQuery_instance_(PyTypeObject *type, PyObject *arg);
          static int t_SpanBoostQuery_init_(t_SpanBoostQuery *self, PyObject *args, PyObject *kwds);
          static PyObject *t_SpanBoostQuery_createWeight(t_SpanBoostQuery *self, PyObject *args);
          static PyObject *t_SpanBoostQuery_equals(t_SpanBoostQuery *self, PyObject *args);
          static PyObject *t_SpanBoostQuery_getBoost(t_SpanBoostQuery *self);
          static PyObject *t_SpanBoostQuery_getField(t_SpanBoostQuery *self, PyObject *args);
          static PyObject *t_SpanBoostQuery_getQuery(t_SpanBoostQuery *self);
          static PyObject *t_SpanBoostQuery_hashCode(t_SpanBoostQuery *self, PyObject *args);
          static PyObject *t_SpanBoostQuery_rewrite(t_SpanBoostQuery *self, PyObject *args);
          static PyObject *t_SpanBoostQuery_toString(t_SpanBoostQuery *self, PyObject *args);
          static PyObject *t_SpanBoostQuery_visit(t_SpanBoostQuery *self, PyObject *args);
          static PyObject *t_SpanBoostQuery_get__boost(t_SpanBoostQuery *self, void *data);
          static PyObject *t_SpanBoostQuery_get__field(t_SpanBoostQuery *self, void *data);
          static PyObject *t_SpanBoostQuery_get__query(t_SpanBoostQuery *self, void *data);
          static PyGetSetDef t_SpanBoostQuery__fields_[] = {
            DECLARE_GET_FIELD(t_SpanBoostQuery, boost),
            DECLARE_GET_FIELD(t_SpanBoostQuery, field),
            DECLARE_GET_FIELD(t_SpanBoostQuery, query),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_SpanBoostQuery__methods_[] = {
            DECLARE_METHOD(t_SpanBoostQuery, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_SpanBoostQuery, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_SpanBoostQuery, createWeight, METH_VARARGS),
            DECLARE_METHOD(t_SpanBoostQuery, equals, METH_VARARGS),
            DECLARE_METHOD(t_SpanBoostQuery, getBoost, METH_NOARGS),
            DECLARE_METHOD(t_SpanBoostQuery, getField, METH_VARARGS),
            DECLARE_METHOD(t_SpanBoostQuery, getQuery, METH_NOARGS),
            DECLARE_METHOD(t_SpanBoostQuery, hashCode, METH_VARARGS),
            DECLARE_METHOD(t_SpanBoostQuery, rewrite, METH_VARARGS),
            DECLARE_METHOD(t_SpanBoostQuery, toString, METH_VARARGS),
            DECLARE_METHOD(t_SpanBoostQuery, visit, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          static PyType_Slot PY_TYPE_SLOTS(SpanBoostQuery)[] = {
            { Py_tp_methods, t_SpanBoostQuery__methods_ },
            { Py_tp_init, (void *) t_SpanBoostQuery_init_ },
            { Py_tp_getset, t_SpanBoostQuery__fields_ },
            { 0, NULL }
          };

          static PyType_Def *PY_TYPE_BASES(SpanBoostQuery)[] = {
            &PY_TYPE_DEF(::org::apache::lucene::search::spans::SpanQuery),
            NULL
          };

          DEFINE_TYPE(SpanBoostQuery, t_SpanBoostQuery, SpanBoostQuery);

          void t_SpanBoostQuery::install(PyObject *module)
          {
            installType(&PY_TYPE(SpanBoostQuery), &PY_TYPE_DEF(SpanBoostQuery), module, "SpanBoostQuery", 0);
          }

          void t_SpanBoostQuery::initialize(PyObject *module)
          {
            PyObject_SetAttrString((PyObject *) PY_TYPE(SpanBoostQuery), "class_", make_descriptor(SpanBoostQuery::initializeClass, 1));
            PyObject_SetAttrString((PyObject *) PY_TYPE(SpanBoostQuery), "wrapfn_", make_descriptor(t_SpanBoostQuery::wrap_jobject));
            PyObject_SetAttrString((PyObject *) PY_TYPE(SpanBoostQuery), "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_SpanBoostQuery_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, SpanBoostQuery::initializeClass, 1)))
              return NULL;
            return t_SpanBoostQuery::wrap_Object(SpanBoostQuery(((t_SpanBoostQuery *) arg)->object.this$));
          }
          static PyObject *t_SpanBoostQuery_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, SpanBoostQuery::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_SpanBoostQuery_init_(t_SpanBoostQuery *self, PyObject *args, PyObject *kwds)
          {
            ::org::apache::lucene::search::spans::SpanQuery a0((jobject) NULL);
            jfloat a1;
            SpanBoostQuery object((jobject) NULL);

            if (!parseArgs(args, "kF", ::org::apache::lucene::search::spans::SpanQuery::initializeClass, &a0, &a1))
            {
              INT_CALL(object = SpanBoostQuery(a0, a1));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_SpanBoostQuery_createWeight(t_SpanBoostQuery *self, PyObject *args)
          {
            ::org::apache::lucene::search::IndexSearcher a0((jobject) NULL);
            ::org::apache::lucene::search::ScoreMode a1((jobject) NULL);
            PyTypeObject **p1;
            jfloat a2;
            ::org::apache::lucene::search::spans::SpanWeight result((jobject) NULL);

            if (!parseArgs(args, "kKF", ::org::apache::lucene::search::IndexSearcher::initializeClass, ::org::apache::lucene::search::ScoreMode::initializeClass, &a0, &a1, &p1, ::org::apache::lucene::search::t_ScoreMode::parameters_, &a2))
            {
              OBJ_CALL(result = self->object.createWeight(a0, a1, a2));
              return ::org::apache::lucene::search::spans::t_SpanWeight::wrap_Object(result);
            }

            return callSuper(PY_TYPE(SpanBoostQuery), (PyObject *) self, "createWeight", args, 2);
          }

          static PyObject *t_SpanBoostQuery_equals(t_SpanBoostQuery *self, PyObject *args)
          {
            ::java::lang::Object a0((jobject) NULL);
            jboolean result;

            if (!parseArgs(args, "o", &a0))
            {
              OBJ_CALL(result = self->object.equals(a0));
              Py_RETURN_BOOL(result);
            }

            return callSuper(PY_TYPE(SpanBoostQuery), (PyObject *) self, "equals", args, 2);
          }

          static PyObject *t_SpanBoostQuery_getBoost(t_SpanBoostQuery *self)
          {
            jfloat result;
            OBJ_CALL(result = self->object.getBoost());
            return PyFloat_FromDouble((double) result);
          }

          static PyObject *t_SpanBoostQuery_getField(t_SpanBoostQuery *self, PyObject *args)
          {
            ::java::lang::String result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.getField());
              return j2p(result);
            }

            return callSuper(PY_TYPE(SpanBoostQuery), (PyObject *) self, "getField", args, 2);
          }

          static PyObject *t_SpanBoostQuery_getQuery(t_SpanBoostQuery *self)
          {
            ::org::apache::lucene::search::spans::SpanQuery result((jobject) NULL);
            OBJ_CALL(result = self->object.getQuery());
            return ::org::apache::lucene::search::spans::t_SpanQuery::wrap_Object(result);
          }

          static PyObject *t_SpanBoostQuery_hashCode(t_SpanBoostQuery *self, PyObject *args)
          {
            jint result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.hashCode());
              return PyLong_FromLong((long) result);
            }

            return callSuper(PY_TYPE(SpanBoostQuery), (PyObject *) self, "hashCode", args, 2);
          }

          static PyObject *t_SpanBoostQuery_rewrite(t_SpanBoostQuery *self, PyObject *args)
          {
            ::org::apache::lucene::index::IndexReader a0((jobject) NULL);
            ::org::apache::lucene::search::Query result((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::index::IndexReader::initializeClass, &a0))
            {
              OBJ_CALL(result = self->object.rewrite(a0));
              return ::org::apache::lucene::search::t_Query::wrap_Object(result);
            }

            return callSuper(PY_TYPE(SpanBoostQuery), (PyObject *) self, "rewrite", args, 2);
          }

          static PyObject *t_SpanBoostQuery_toString(t_SpanBoostQuery *self, PyObject *args)
          {
            ::java::lang::String a0((jobject) NULL);
            ::java::lang::String result((jobject) NULL);

            if (!parseArgs(args, "s", &a0))
            {
              OBJ_CALL(result = self->object.toString(a0));
              return j2p(result);
            }

            return callSuper(PY_TYPE(SpanBoostQuery), (PyObject *) self, "toString", args, 2);
          }

          static PyObject *t_SpanBoostQuery_visit(t_SpanBoostQuery *self, PyObject *args)
          {
            ::org::apache::lucene::search::QueryVisitor a0((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::search::QueryVisitor::initializeClass, &a0))
            {
              OBJ_CALL(self->object.visit(a0));
              Py_RETURN_NONE;
            }

            return callSuper(PY_TYPE(SpanBoostQuery), (PyObject *) self, "visit", args, 2);
          }

          static PyObject *t_SpanBoostQuery_get__boost(t_SpanBoostQuery *self, void *data)
          {
            jfloat value;
            OBJ_CALL(value = self->object.getBoost());
            return PyFloat_FromDouble((double) value);
          }

          static PyObject *t_SpanBoostQuery_get__field(t_SpanBoostQuery *self, void *data)
          {
            ::java::lang::String value((jobject) NULL);
            OBJ_CALL(value = self->object.getField());
            return j2p(value);
          }

          static PyObject *t_SpanBoostQuery_get__query(t_SpanBoostQuery *self, void *data)
          {
            ::org::apache::lucene::search::spans::SpanQuery value((jobject) NULL);
            OBJ_CALL(value = self->object.getQuery());
            return ::org::apache::lucene::search::spans::t_SpanQuery::wrap_Object(value);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queries/function/valuesource/ReciprocalFloatFunction.h"
#include "java/util/Map.h"
#include "org/apache/lucene/index/LeafReaderContext.h"
#include "org/apache/lucene/search/IndexSearcher.h"
#include "org/apache/lucene/queries/function/FunctionValues.h"
#include "java/lang/Class.h"
#include "java/lang/Object.h"
#include "java/lang/String.h"
#include "java/io/IOException.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queries {
        namespace function {
          namespace valuesource {

            ::java::lang::Class *ReciprocalFloatFunction::class$ = NULL;
            jmethodID *ReciprocalFloatFunction::mids$ = NULL;
            bool ReciprocalFloatFunction::live$ = false;

            jclass ReciprocalFloatFunction::initializeClass(bool getOnly)
            {
              if (getOnly)
                return (jclass) (live$ ? class$->this$ : NULL);
              if (class$ == NULL)
              {
                jclass cls = (jclass) env->findClass("org/apache/lucene/queries/function/valuesource/ReciprocalFloatFunction");

                mids$ = new jmethodID[max_mid];
                mids$[mid_init$_913f2e49a713876e] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/queries/function/ValueSource;FFF)V");
                mids$[mid_createWeight_69d322032c5ae159] = env->getMethodID(cls, "createWeight", "(Ljava/util/Map;Lorg/apache/lucene/search/IndexSearcher;)V");
                mids$[mid_description_db9b55ba01e03e4b] = env->getMethodID(cls, "description", "()Ljava/lang/String;");
                mids$[mid_equals_8b72f2dcdde6fd1d] = env->getMethodID(cls, "equals", "(Ljava/lang/Object;)Z");
                mids$[mid_getValues_ede8eccd3e97f32c] = env->getMethodID(cls, "getValues", "(Ljava/util/Map;Lorg/apache/lucene/index/LeafReaderContext;)Lorg/apache/lucene/queries/function/FunctionValues;");
                mids$[mid_hashCode_9972fcc56b44e79d] = env->getMethodID(cls, "hashCode", "()I");

                class$ = new ::java::lang::Class(cls);
                live$ = true;
              }
              return (jclass) class$->this$;
            }

            ReciprocalFloatFunction::ReciprocalFloatFunction(const ::org::apache::lucene::queries::function::ValueSource & a0, jfloat a1, jfloat a2, jfloat a3) : ::org::apache::lucene::queries::function::ValueSource(env->newObject(initializeClass, &mids$, mid_init$_913f2e49a713876e, a0.this$, a1, a2, a3)) {}

            void ReciprocalFloatFunction::createWeight(const ::java::util::Map & a0, const ::org::apache::lucene::search::IndexSearcher & a1) const
            {
              env->callVoidMethod(this$, mids$[mid_createWeight_69d322032c5ae159], a0.this$, a1.this$);
            }

            ::java::lang::String ReciprocalFloatFunction::description() const
            {
              return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_description_db9b55ba01e03e4b]));
            }

            jboolean ReciprocalFloatFunction::equals(const ::java::lang::Object & a0) const
            {
              return env->callBooleanMethod(this$, mids$[mid_equals_8b72f2dcdde6fd1d], a0.this$);
            }

            ::org::apache::lucene::queries::function::FunctionValues ReciprocalFloatFunction::getValues(const ::java::util::Map & a0, const ::org::apache::lucene::index::LeafReaderContext & a1) const
            {
              return ::org::apache::lucene::queries::function::FunctionValues(env->callObjectMethod(this$, mids$[mid_getValues_ede8eccd3e97f32c], a0.this$, a1.this$));
            }

            jint ReciprocalFloatFunction::hashCode() const
            {
              return env->callIntMethod(this$, mids$[mid_hashCode_9972fcc56b44e79d]);
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queries {
        namespace function {
          namespace valuesource {
            static PyObject *t_ReciprocalFloatFunction_cast_(PyTypeObject *type, PyObject *arg);
            static PyObject *t_ReciprocalFloatFunction_instance_(PyTypeObject *type, PyObject *arg);
            static int t_ReciprocalFloatFunction_init_(t_ReciprocalFloatFunction *self, PyObject *args, PyObject *kwds);
            static PyObject *t_ReciprocalFloatFunction_createWeight(t_ReciprocalFloatFunction *self, PyObject *args);
            static PyObject *t_ReciprocalFloatFunction_description(t_ReciprocalFloatFunction *self, PyObject *args);
            static PyObject *t_ReciprocalFloatFunction_equals(t_ReciprocalFloatFunction *self, PyObject *args);
            static PyObject *t_ReciprocalFloatFunction_getValues(t_ReciprocalFloatFunction *self, PyObject *args);
            static PyObject *t_ReciprocalFloatFunction_hashCode(t_ReciprocalFloatFunction *self, PyObject *args);

            static PyMethodDef t_ReciprocalFloatFunction__methods_[] = {
              DECLARE_METHOD(t_ReciprocalFloatFunction, cast_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_ReciprocalFloatFunction, instance_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_ReciprocalFloatFunction, createWeight, METH_VARARGS),
              DECLARE_METHOD(t_ReciprocalFloatFunction, description, METH_VARARGS),
              DECLARE_METHOD(t_ReciprocalFloatFunction, equals, METH_VARARGS),
              DECLARE_METHOD(t_ReciprocalFloatFunction, getValues, METH_VARARGS),
              DECLARE_METHOD(t_ReciprocalFloatFunction, hashCode, METH_VARARGS),
              { NULL, NULL, 0, NULL }
            };

            static PyType_Slot PY_TYPE_SLOTS(ReciprocalFloatFunction)[] = {
              { Py_tp_methods, t_ReciprocalFloatFunction__methods_ },
              { Py_tp_init, (void *) t_ReciprocalFloatFunction_init_ },
              { 0, NULL }
            };

            static PyType_Def *PY_TYPE_BASES(ReciprocalFloatFunction)[] = {
              &PY_TYPE_DEF(::org::apache::lucene::queries::function::ValueSource),
              NULL
            };

            DEFINE_TYPE(ReciprocalFloatFunction, t_ReciprocalFloatFunction, ReciprocalFloatFunction);

            void t_ReciprocalFloatFunction::install(PyObject *module)
            {
              installType(&PY_TYPE(ReciprocalFloatFunction), &PY_TYPE_DEF(ReciprocalFloatFunction), module, "ReciprocalFloatFunction", 0);
            }

            void t_ReciprocalFloatFunction::initialize(PyObject *module)
            {
              PyObject_SetAttrString((PyObject *) PY_TYPE(ReciprocalFloatFunction), "class_", make_descriptor(ReciprocalFloatFunction::initializeClass, 1));
              PyObject_SetAttrString((PyObject *) PY_TYPE(ReciprocalFloatFunction), "wrapfn_", make_descriptor(t_ReciprocalFloatFunction::wrap_jobject));
              PyObject_SetAttrString((PyObject *) PY_TYPE(ReciprocalFloatFunction), "boxfn_", make_descriptor(boxObject));
            }

            static PyObject *t_ReciprocalFloatFunction_cast_(PyTypeObject *type, PyObject *arg)
            {
              if (!(arg = castCheck(arg, ReciprocalFloatFunction::initializeClass, 1)))
                return NULL;
              return t_ReciprocalFloatFunction::wrap_Object(ReciprocalFloatFunction(((t_ReciprocalFloatFunction *) arg)->object.this$));
            }
            static PyObject *t_ReciprocalFloatFunction_instance_(PyTypeObject *type, PyObject *arg)
            {
              if (!castCheck(arg, ReciprocalFloatFunction::initializeClass, 0))
                Py_RETURN_FALSE;
              Py_RETURN_TRUE;
            }

            static int t_ReciprocalFloatFunction_init_(t_ReciprocalFloatFunction *self, PyObject *args, PyObject *kwds)
            {
              ::org::apache::lucene::queries::function::ValueSource a0((jobject) NULL);
              jfloat a1;
              jfloat a2;
              jfloat a3;
              ReciprocalFloatFunction object((jobject) NULL);

              if (!parseArgs(args, "kFFF", ::org::apache::lucene::queries::function::ValueSource::initializeClass, &a0, &a1, &a2, &a3))
              {
                INT_CALL(object = ReciprocalFloatFunction(a0, a1, a2, a3));
                self->object = object;
              }
              else
              {
                PyErr_SetArgsError((PyObject *) self, "__init__", args);
                return -1;
              }

              return 0;
            }

            static PyObject *t_ReciprocalFloatFunction_createWeight(t_ReciprocalFloatFunction *self, PyObject *args)
            {
              ::java::util::Map a0((jobject) NULL);
              PyTypeObject **p0;
              ::org::apache::lucene::search::IndexSearcher a1((jobject) NULL);

              if (!parseArgs(args, "Kk", ::java::util::Map::initializeClass, ::org::apache::lucene::search::IndexSearcher::initializeClass, &a0, &p0, ::java::util::t_Map::parameters_, &a1))
              {
                OBJ_CALL(self->object.createWeight(a0, a1));
                Py_RETURN_NONE;
              }

              return callSuper(PY_TYPE(ReciprocalFloatFunction), (PyObject *) self, "createWeight", args, 2);
            }

            static PyObject *t_ReciprocalFloatFunction_description(t_ReciprocalFloatFunction *self, PyObject *args)
            {
              ::java::lang::String result((jobject) NULL);

              if (!parseArgs(args, ""))
              {
                OBJ_CALL(result = self->object.description());
                return j2p(result);
              }

              return callSuper(PY_TYPE(ReciprocalFloatFunction), (PyObject *) self, "description", args, 2);
            }

            static PyObject *t_ReciprocalFloatFunction_equals(t_ReciprocalFloatFunction *self, PyObject *args)
            {
              ::java::lang::Object a0((jobject) NULL);
              jboolean result;

              if (!parseArgs(args, "o", &a0))
              {
                OBJ_CALL(result = self->object.equals(a0));
                Py_RETURN_BOOL(result);
              }

              return callSuper(PY_TYPE(ReciprocalFloatFunction), (PyObject *) self, "equals", args, 2);
            }

            static PyObject *t_ReciprocalFloatFunction_getValues(t_ReciprocalFloatFunction *self, PyObject *args)
            {
              ::java::util::Map a0((jobject) NULL);
              PyTypeObject **p0;
              ::org::apache::lucene::index::LeafReaderContext a1((jobject) NULL);
              ::org::apache::lucene::queries::function::FunctionValues result((jobject) NULL);

              if (!parseArgs(args, "Kk", ::java::util::Map::initializeClass, ::org::apache::lucene::index::LeafReaderContext::initializeClass, &a0, &p0, ::java::util::t_Map::parameters_, &a1))
              {
                OBJ_CALL(result = self->object.getValues(a0, a1));
                return ::org::apache::lucene::queries::function::t_FunctionValues::wrap_Object(result);
              }

              return callSuper(PY_TYPE(ReciprocalFloatFunction), (PyObject *) self, "getValues", args, 2);
            }

            static PyObject *t_ReciprocalFloatFunction_hashCode(t_ReciprocalFloatFunction *self, PyObject *args)
            {
              jint result;

              if (!parseArgs(args, ""))
              {
                OBJ_CALL(result = self->object.hashCode());
                return PyLong_FromLong((long) result);
              }

              return callSuper(PY_TYPE(ReciprocalFloatFunction), (PyObject *) self, "hashCode", args, 2);
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/codecs/StoredFieldsWriter.h"
#include "org/apache/lucene/index/IndexableField.h"
#include "org/apache/lucene/util/Accountable.h"
#include "java/lang/Class.h"
#include "java/io/Closeable.h"
#include "org/apache/lucene/index/FieldInfo.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/index/MergeState.h"
#include "org/apache/lucene/index/FieldInfos.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace codecs {

        ::java::lang::Class *StoredFieldsWriter::class$ = NULL;
        jmethodID *StoredFieldsWriter::mids$ = NULL;
        bool StoredFieldsWriter::live$ = false;

        jclass StoredFieldsWriter::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/codecs/StoredFieldsWriter");

            mids$ = new jmethodID[max_mid];
            mids$[mid_close_f2cc1bce94666404] = env->getMethodID(cls, "close", "()V");
            mids$[mid_finish_8a63e70a8b43ee48] = env->getMethodID(cls, "finish", "(Lorg/apache/lucene/index/FieldInfos;I)V");
            mids$[mid_finishDocument_f2cc1bce94666404] = env->getMethodID(cls, "finishDocument", "()V");
            mids$[mid_merge_6926471512b57791] = env->getMethodID(cls, "merge", "(Lorg/apache/lucene/index/MergeState;)I");
            mids$[mid_startDocument_f2cc1bce94666404] = env->getMethodID(cls, "startDocument", "()V");
            mids$[mid_writeField_c717cea83051791d] = env->getMethodID(cls, "writeField", "(Lorg/apache/lucene/index/FieldInfo;Lorg/apache/lucene/index/IndexableField;)V");

            class$ = new ::java::lang::Class(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        void StoredFieldsWriter::close() const
        {
          env->callVoidMethod(this$, mids$[mid_close_f2cc1bce94666404]);
        }

        void StoredFieldsWriter::finish(const ::org::apache::lucene::index::FieldInfos & a0, jint a1) const
        {
          env->callVoidMethod(this$, mids$[mid_finish_8a63e70a8b43ee48], a0.this$, a1);
        }

        void StoredFieldsWriter::finishDocument() const
        {
          env->callVoidMethod(this$, mids$[mid_finishDocument_f2cc1bce94666404]);
        }

        jint StoredFieldsWriter::merge(const ::org::apache::lucene::index::MergeState & a0) const
        {
          return env->callIntMethod(this$, mids$[mid_merge_6926471512b57791], a0.this$);
        }

        void StoredFieldsWriter::startDocument() const
        {
          env->callVoidMethod(this$, mids$[mid_startDocument_f2cc1bce94666404]);
        }

        void StoredFieldsWriter::writeField(const ::org::apache::lucene::index::FieldInfo & a0, const ::org::apache::lucene::index::IndexableField & a1) const
        {
          env->callVoidMethod(this$, mids$[mid_writeField_c717cea83051791d], a0.this$, a1.this$);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace codecs {
        static PyObject *t_StoredFieldsWriter_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_StoredFieldsWriter_instance_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_StoredFieldsWriter_close(t_StoredFieldsWriter *self);
        static PyObject *t_StoredFieldsWriter_finish(t_StoredFieldsWriter *self, PyObject *args);
        static PyObject *t_StoredFieldsWriter_finishDocument(t_StoredFieldsWriter *self);
        static PyObject *t_StoredFieldsWriter_merge(t_StoredFieldsWriter *self, PyObject *arg);
        static PyObject *t_StoredFieldsWriter_startDocument(t_StoredFieldsWriter *self);
        static PyObject *t_StoredFieldsWriter_writeField(t_StoredFieldsWriter *self, PyObject *args);

        static PyMethodDef t_StoredFieldsWriter__methods_[] = {
          DECLARE_METHOD(t_StoredFieldsWriter, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_StoredFieldsWriter, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_StoredFieldsWriter, close, METH_NOARGS),
          DECLARE_METHOD(t_StoredFieldsWriter, finish, METH_VARARGS),
          DECLARE_METHOD(t_StoredFieldsWriter, finishDocument, METH_NOARGS),
          DECLARE_METHOD(t_StoredFieldsWriter, merge, METH_O),
          DECLARE_METHOD(t_StoredFieldsWriter, startDocument, METH_NOARGS),
          DECLARE_METHOD(t_StoredFieldsWriter, writeField, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        static PyType_Slot PY_TYPE_SLOTS(StoredFieldsWriter)[] = {
          { Py_tp_methods, t_StoredFieldsWriter__methods_ },
          { Py_tp_init, (void *) abstract_init },
          { 0, NULL }
        };

        static PyType_Def *PY_TYPE_BASES(StoredFieldsWriter)[] = {
          &PY_TYPE_DEF(::java::lang::Object),
          NULL
        };

        DEFINE_TYPE(StoredFieldsWriter, t_StoredFieldsWriter, StoredFieldsWriter);

        void t_StoredFieldsWriter::install(PyObject *module)
        {
          installType(&PY_TYPE(StoredFieldsWriter), &PY_TYPE_DEF(StoredFieldsWriter), module, "StoredFieldsWriter", 0);
        }

        void t_StoredFieldsWriter::initialize(PyObject *module)
        {
          PyObject_SetAttrString((PyObject *) PY_TYPE(StoredFieldsWriter), "class_", make_descriptor(StoredFieldsWriter::initializeClass, 1));
          PyObject_SetAttrString((PyObject *) PY_TYPE(StoredFieldsWriter), "wrapfn_", make_descriptor(t_StoredFieldsWriter::wrap_jobject));
          PyObject_SetAttrString((PyObject *) PY_TYPE(StoredFieldsWriter), "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_StoredFieldsWriter_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, StoredFieldsWriter::initializeClass, 1)))
            return NULL;
          return t_StoredFieldsWriter::wrap_Object(StoredFieldsWriter(((t_StoredFieldsWriter *) arg)->object.this$));
        }
        static PyObject *t_StoredFieldsWriter_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, StoredFieldsWriter::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static PyObject *t_StoredFieldsWriter_close(t_StoredFieldsWriter *self)
        {
          OBJ_CALL(self->object.close());
          Py_RETURN_NONE;
        }

        static PyObject *t_StoredFieldsWriter_finish(t_StoredFieldsWriter *self, PyObject *args)
        {
          ::org::apache::lucene::index::FieldInfos a0((jobject) NULL);
          jint a1;

          if (!parseArgs(args, "kI", ::org::apache::lucene::index::FieldInfos::initializeClass, &a0, &a1))
          {
            OBJ_CALL(self->object.finish(a0, a1));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "finish", args);
          return NULL;
        }

        static PyObject *t_StoredFieldsWriter_finishDocument(t_StoredFieldsWriter *self)
        {
          OBJ_CALL(self->object.finishDocument());
          Py_RETURN_NONE;
        }

        static PyObject *t_StoredFieldsWriter_merge(t_StoredFieldsWriter *self, PyObject *arg)
        {
          ::org::apache::lucene::index::MergeState a0((jobject) NULL);
          jint result;

          if (!parseArg(arg, "k", ::org::apache::lucene::index::MergeState::initializeClass, &a0))
          {
            OBJ_CALL(result = self->object.merge(a0));
            return PyLong_FromLong((long) result);
          }

          PyErr_SetArgsError((PyObject *) self, "merge", arg);
          return NULL;
        }

        static PyObject *t_StoredFieldsWriter_startDocument(t_StoredFieldsWriter *self)
        {
          OBJ_CALL(self->object.startDocument());
          Py_RETURN_NONE;
        }

        static PyObject *t_StoredFieldsWriter_writeField(t_StoredFieldsWriter *self, PyObject *args)
        {
          ::org::apache::lucene::index::FieldInfo a0((jobject) NULL);
          ::org::apache::lucene::index::IndexableField a1((jobject) NULL);

          if (!parseArgs(args, "kk", ::org::apache::lucene::index::FieldInfo::initializeClass, ::org::apache::lucene::index::IndexableField::initializeClass, &a0, &a1))
          {
            OBJ_CALL(self->object.writeField(a0, a1));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "writeField", args);
          return NULL;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/et/EstonianAnalyzer.h"
#include "java/lang/String.h"
#include "org/apache/lucene/analysis/CharArraySet.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace et {

          ::java::lang::Class *EstonianAnalyzer::class$ = NULL;
          jmethodID *EstonianAnalyzer::mids$ = NULL;
          bool EstonianAnalyzer::live$ = false;
          ::java::lang::String *EstonianAnalyzer::DEFAULT_STOPWORD_FILE = NULL;

          jclass EstonianAnalyzer::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/et/EstonianAnalyzer");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_f2cc1bce94666404] = env->getMethodID(cls, "<init>", "()V");
              mids$[mid_init$_09c0eb6a436581d3] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/analysis/CharArraySet;)V");
              mids$[mid_init$_b66a15b6e54e4218] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/analysis/CharArraySet;Lorg/apache/lucene/analysis/CharArraySet;)V");
              mids$[mid_getDefaultStopSet_7aec8e69a9807ca1] = env->getStaticMethodID(cls, "getDefaultStopSet", "()Lorg/apache/lucene/analysis/CharArraySet;");
              mids$[mid_createComponents_c22fd244b0553c1e] = env->getMethodID(cls, "createComponents", "(Ljava/lang/String;)Lorg/apache/lucene/analysis/Analyzer$TokenStreamComponents;");
              mids$[mid_normalize_e597989422f66fcd] = env->getMethodID(cls, "normalize", "(Ljava/lang/String;Lorg/apache/lucene/analysis/TokenStream;)Lorg/apache/lucene/analysis/TokenStream;");

              class$ = new ::java::lang::Class(cls);
              cls = (jclass) class$->this$;

              DEFAULT_STOPWORD_FILE = new ::java::lang::String(env->getStaticObjectField(cls, "DEFAULT_STOPWORD_FILE", "Ljava/lang/String;"));
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          EstonianAnalyzer::EstonianAnalyzer() : ::org::apache::lucene::analysis::StopwordAnalyzerBase(env->newObject(initializeClass, &mids$, mid_init$_f2cc1bce94666404)) {}

          EstonianAnalyzer::EstonianAnalyzer(const ::org::apache::lucene::analysis::CharArraySet & a0) : ::org::apache::lucene::analysis::StopwordAnalyzerBase(env->newObject(initializeClass, &mids$, mid_init$_09c0eb6a436581d3, a0.this$)) {}

          EstonianAnalyzer::EstonianAnalyzer(const ::org::apache::lucene::analysis::CharArraySet & a0, const ::org::apache::lucene::analysis::CharArraySet & a1) : ::org::apache::lucene::analysis::StopwordAnalyzerBase(env->newObject(initializeClass, &mids$, mid_init$_b66a15b6e54e4218, a0.this$, a1.this$)) {}

          ::org::apache::lucene::analysis::CharArraySet EstonianAnalyzer::getDefaultStopSet()
          {
            jclass cls = env->getClass(initializeClass);
            return ::org::apache::lucene::analysis::CharArraySet(env->callStaticObjectMethod(cls, mids$[mid_getDefaultStopSet_7aec8e69a9807ca1]));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace et {
          static PyObject *t_EstonianAnalyzer_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_EstonianAnalyzer_instance_(PyTypeObject *type, PyObject *arg);
          static int t_EstonianAnalyzer_init_(t_EstonianAnalyzer *self, PyObject *args, PyObject *kwds);
          static PyObject *t_EstonianAnalyzer_getDefaultStopSet(PyTypeObject *type);
          static PyObject *t_EstonianAnalyzer_get__defaultStopSet(t_EstonianAnalyzer *self, void *data);
          static PyGetSetDef t_EstonianAnalyzer__fields_[] = {
            DECLARE_GET_FIELD(t_EstonianAnalyzer, defaultStopSet),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_EstonianAnalyzer__methods_[] = {
            DECLARE_METHOD(t_EstonianAnalyzer, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_EstonianAnalyzer, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_EstonianAnalyzer, getDefaultStopSet, METH_NOARGS | METH_CLASS),
            { NULL, NULL, 0, NULL }
          };

          static PyType_Slot PY_TYPE_SLOTS(EstonianAnalyzer)[] = {
            { Py_tp_methods, t_EstonianAnalyzer__methods_ },
            { Py_tp_init, (void *) t_EstonianAnalyzer_init_ },
            { Py_tp_getset, t_EstonianAnalyzer__fields_ },
            { 0, NULL }
          };

          static PyType_Def *PY_TYPE_BASES(EstonianAnalyzer)[] = {
            &PY_TYPE_DEF(::org::apache::lucene::analysis::StopwordAnalyzerBase),
            NULL
          };

          DEFINE_TYPE(EstonianAnalyzer, t_EstonianAnalyzer, EstonianAnalyzer);

          void t_EstonianAnalyzer::install(PyObject *module)
          {
            installType(&PY_TYPE(EstonianAnalyzer), &PY_TYPE_DEF(EstonianAnalyzer), module, "EstonianAnalyzer", 0);
          }

          void t_EstonianAnalyzer::initialize(PyObject *module)
          {
            PyObject_SetAttrString((PyObject *) PY_TYPE(EstonianAnalyzer), "class_", make_descriptor(EstonianAnalyzer::initializeClass, 1));
            PyObject_SetAttrString((PyObject *) PY_TYPE(EstonianAnalyzer), "wrapfn_", make_descriptor(t_EstonianAnalyzer::wrap_jobject));
            PyObject_SetAttrString((PyObject *) PY_TYPE(EstonianAnalyzer), "boxfn_", make_descriptor(boxObject));
            env->getClass(EstonianAnalyzer::initializeClass);
            PyObject_SetAttrString((PyObject *) PY_TYPE(EstonianAnalyzer), "DEFAULT_STOPWORD_FILE", make_descriptor(j2p(*EstonianAnalyzer::DEFAULT_STOPWORD_FILE)));
          }

          static PyObject *t_EstonianAnalyzer_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, EstonianAnalyzer::initializeClass, 1)))
              return NULL;
            return t_EstonianAnalyzer::wrap_Object(EstonianAnalyzer(((t_EstonianAnalyzer *) arg)->object.this$));
          }
          static PyObject *t_EstonianAnalyzer_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, EstonianAnalyzer::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_EstonianAnalyzer_init_(t_EstonianAnalyzer *self, PyObject *args, PyObject *kwds)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 0:
              {
                EstonianAnalyzer object((jobject) NULL);

                INT_CALL(object = EstonianAnalyzer());
                self->object = object;
                break;
              }
             case 1:
              {
                ::org::apache::lucene::analysis::CharArraySet a0((jobject) NULL);
                PyTypeObject **p0;
                EstonianAnalyzer object((jobject) NULL);

                if (!parseArgs(args, "K", ::org::apache::lucene::analysis::CharArraySet::initializeClass, &a0, &p0, ::org::apache::lucene::analysis::t_CharArraySet::parameters_))
                {
                  INT_CALL(object = EstonianAnalyzer(a0));
                  self->object = object;
                  break;
                }
              }
              goto err;
             case 2:
              {
                ::org::apache::lucene::analysis::CharArraySet a0((jobject) NULL);
                PyTypeObject **p0;
                ::org::apache::lucene::analysis::CharArraySet a1((jobject) NULL);
                PyTypeObject **p1;
                EstonianAnalyzer object((jobject) NULL);

                if (!parseArgs(args, "KK", ::org::apache::lucene::analysis::CharArraySet::initializeClass, ::org::apache::lucene::analysis::CharArraySet::initializeClass, &a0, &p0, ::org::apache::lucene::analysis::t_CharArraySet::parameters_, &a1, &p1, ::org::apache::lucene::analysis::t_CharArraySet::parameters_))
                {
                  INT_CALL(object = EstonianAnalyzer(a0, a1));
                  self->object = object;
                  break;
                }
              }
             default:
             err:
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_EstonianAnalyzer_getDefaultStopSet(PyTypeObject *type)
          {
            ::org::apache::lucene::analysis::CharArraySet result((jobject) NULL);
            OBJ_CALL(result = ::org::apache::lucene::analysis::et::EstonianAnalyzer::getDefaultStopSet());
            return ::org::apache::lucene::analysis::t_CharArraySet::wrap_Object(result);
          }

          static PyObject *t_EstonianAnalyzer_get__defaultStopSet(t_EstonianAnalyzer *self, void *data)
          {
            ::org::apache::lucene::analysis::CharArraySet value((jobject) NULL);
            OBJ_CALL(value = self->object.getDefaultStopSet());
            return ::org::apache::lucene::analysis::t_CharArraySet::wrap_Object(value);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/ko/util/DictionaryBuilder.h"
#include "java/nio/file/Path.h"
#include "java/lang/String.h"
#include "java/io/IOException.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace ko {
          namespace util {

            ::java::lang::Class *DictionaryBuilder::class$ = NULL;
            jmethodID *DictionaryBuilder::mids$ = NULL;
            bool DictionaryBuilder::live$ = false;

            jclass DictionaryBuilder::initializeClass(bool getOnly)
            {
              if (getOnly)
                return (jclass) (live$ ? class$->this$ : NULL);
              if (class$ == NULL)
              {
                jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/ko/util/DictionaryBuilder");

                mids$ = new jmethodID[max_mid];
                mids$[mid_build_c9b1818cce154756] = env->getStaticMethodID(cls, "build", "(Ljava/nio/file/Path;Ljava/nio/file/Path;Ljava/lang/String;Z)V");
                mids$[mid_main_2fc318b999a7aba3] = env->getStaticMethodID(cls, "main", "([Ljava/lang/String;)V");

                class$ = new ::java::lang::Class(cls);
                live$ = true;
              }
              return (jclass) class$->this$;
            }

            void DictionaryBuilder::build(const ::java::nio::file::Path & a0, const ::java::nio::file::Path & a1, const ::java::lang::String & a2, jboolean a3)
            {
              jclass cls = env->getClass(initializeClass);
              env->callStaticVoidMethod(cls, mids$[mid_build_c9b1818cce154756], a0.this$, a1.this$, a2.this$, a3);
            }

            void DictionaryBuilder::main(const JArray< ::java::lang::String > & a0)
            {
              jclass cls = env->getClass(initializeClass);
              env->callStaticVoidMethod(cls, mids$[mid_main_2fc318b999a7aba3], a0.this$);
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace ko {
          namespace util {
            static PyObject *t_DictionaryBuilder_cast_(PyTypeObject *type, PyObject *arg);
            static PyObject *t_DictionaryBuilder_instance_(PyTypeObject *type, PyObject *arg);
            static PyObject *t_DictionaryBuilder_build(PyTypeObject *type, PyObject *args);
            static PyObject *t_DictionaryBuilder_main(PyTypeObject *type, PyObject *arg);

            static PyMethodDef t_DictionaryBuilder__methods_[] = {
              DECLARE_METHOD(t_DictionaryBuilder, cast_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_DictionaryBuilder, instance_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_DictionaryBuilder, build, METH_VARARGS | METH_CLASS),
              DECLARE_METHOD(t_DictionaryBuilder, main, METH_O | METH_CLASS),
              { NULL, NULL, 0, NULL }
            };

            static PyType_Slot PY_TYPE_SLOTS(DictionaryBuilder)[] = {
              { Py_tp_methods, t_DictionaryBuilder__methods_ },
              { Py_tp_init, (void *) abstract_init },
              { 0, NULL }
            };

            static PyType_Def *PY_TYPE_BASES(DictionaryBuilder)[] = {
              &PY_TYPE_DEF(::java::lang::Object),
              NULL
            };

            DEFINE_TYPE(DictionaryBuilder, t_DictionaryBuilder, DictionaryBuilder);

            void t_DictionaryBuilder::install(PyObject *module)
            {
              installType(&PY_TYPE(DictionaryBuilder), &PY_TYPE_DEF(DictionaryBuilder), module, "DictionaryBuilder", 0);
            }

            void t_DictionaryBuilder::initialize(PyObject *module)
            {
              PyObject_SetAttrString((PyObject *) PY_TYPE(DictionaryBuilder), "class_", make_descriptor(DictionaryBuilder::initializeClass, 1));
              PyObject_SetAttrString((PyObject *) PY_TYPE(DictionaryBuilder), "wrapfn_", make_descriptor(t_DictionaryBuilder::wrap_jobject));
              PyObject_SetAttrString((PyObject *) PY_TYPE(DictionaryBuilder), "boxfn_", make_descriptor(boxObject));
            }

            static PyObject *t_DictionaryBuilder_cast_(PyTypeObject *type, PyObject *arg)
            {
              if (!(arg = castCheck(arg, DictionaryBuilder::initializeClass, 1)))
                return NULL;
              return t_DictionaryBuilder::wrap_Object(DictionaryBuilder(((t_DictionaryBuilder *) arg)->object.this$));
            }
            static PyObject *t_DictionaryBuilder_instance_(PyTypeObject *type, PyObject *arg)
            {
              if (!castCheck(arg, DictionaryBuilder::initializeClass, 0))
                Py_RETURN_FALSE;
              Py_RETURN_TRUE;
            }

            static PyObject *t_DictionaryBuilder_build(PyTypeObject *type, PyObject *args)
            {
              ::java::nio::file::Path a0((jobject) NULL);
              ::java::nio::file::Path a1((jobject) NULL);
              ::java::lang::String a2((jobject) NULL);
              jboolean a3;

              if (!parseArgs(args, "kksZ", ::java::nio::file::Path::initializeClass, ::java::nio::file::Path::initializeClass, &a0, &a1, &a2, &a3))
              {
                OBJ_CALL(::org::apache::lucene::analysis::ko::util::DictionaryBuilder::build(a0, a1, a2, a3));
                Py_RETURN_NONE;
              }

              PyErr_SetArgsError(type, "build", args);
              return NULL;
            }

            static PyObject *t_DictionaryBuilder_main(PyTypeObject *type, PyObject *arg)
            {
              JArray< ::java::lang::String > a0((jobject) NULL);

              if (!parseArg(arg, "[s", &a0))
              {
                OBJ_CALL(::org::apache::lucene::analysis::ko::util::DictionaryBuilder::main(a0));
                Py_RETURN_NONE;
              }

              PyErr_SetArgsError(type, "main", arg);
              return NULL;
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queries/CommonTermsQuery.h"
#include "org/apache/lucene/index/IndexReader.h"
#include "org/apache/lucene/index/LeafReaderContext.h"
#include "org/apache/lucene/index/Term.h"
#include "java/lang/Class.h"
#include "java/lang/Object.h"
#include "org/apache/lucene/index/TermStates.h"
#include "org/apache/lucene/search/BooleanClause$Occur.h"
#include "java/lang/String.h"
#include "java/io/IOException.h"
#include "java/util/List.h"
#include "org/apache/lucene/search/QueryVisitor.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queries {

        ::java::lang::Class *CommonTermsQuery::class$ = NULL;
        jmethodID *CommonTermsQuery::mids$ = NULL;
        bool CommonTermsQuery::live$ = false;

        jclass CommonTermsQuery::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/queries/CommonTermsQuery");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_fccc27bacc7b11b8] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/search/BooleanClause$Occur;Lorg/apache/lucene/search/BooleanClause$Occur;F)V");
            mids$[mid_add_32784f9c0ee449e6] = env->getMethodID(cls, "add", "(Lorg/apache/lucene/index/Term;)V");
            mids$[mid_collectTermStates_ec447f5073f01972] = env->getMethodID(cls, "collectTermStates", "(Lorg/apache/lucene/index/IndexReader;Ljava/util/List;[Lorg/apache/lucene/index/TermStates;[Lorg/apache/lucene/index/Term;)V");
            mids$[mid_equals_8b72f2dcdde6fd1d] = env->getMethodID(cls, "equals", "(Ljava/lang/Object;)Z");
            mids$[mid_getHighFreqBoost_58aec2b64dff50c8] = env->getMethodID(cls, "getHighFreqBoost", "()F");
            mids$[mid_getHighFreqMinimumNumberShouldMatch_58aec2b64dff50c8] = env->getMethodID(cls, "getHighFreqMinimumNumberShouldMatch", "()F");
            mids$[mid_getHighFreqOccur_d2a892ed3bcf0bb6] = env->getMethodID(cls, "getHighFreqOccur", "()Lorg/apache/lucene/search/BooleanClause$Occur;");
            mids$[mid_getLowFreqBoost_58aec2b64dff50c8] = env->getMethodID(cls, "getLowFreqBoost", "()F");
            mids$[mid_getLowFreqMinimumNumberShouldMatch_58aec2b64dff50c8] = env->getMethodID(cls, "getLowFreqMinimumNumberShouldMatch", "()F");
            mids$[mid_getLowFreqOccur_d2a892ed3bcf0bb6] = env->getMethodID(cls, "getLowFreqOccur", "()Lorg/apache/lucene/search/BooleanClause$Occur;");
            mids$[mid_getMaxTermFrequency_58aec2b64dff50c8] = env->getMethodID(cls, "getMaxTermFrequency", "()F");
            mids$[mid_getTerms_49ec78390f08338a] = env->getMethodID(cls, "getTerms", "()Ljava/util/List;");
            mids$[mid_hashCode_9972fcc56b44e79d] = env->getMethodID(cls, "hashCode", "()I");
            mids$[mid_rewrite_bb52f19a8254555c] = env->getMethodID(cls, "rewrite", "(Lorg/apache/lucene/index/IndexReader;)Lorg/apache/lucene/search/Query;");
            mids$[mid_setHighFreqMinimumNumberShouldMatch_8e1d952dd65cdc3a] = env->getMethodID(cls, "setHighFreqMinimumNumberShouldMatch", "(F)V");
            mids$[mid_setLowFreqMinimumNumberShouldMatch_8e1d952dd65cdc3a] = env->getMethodID(cls, "setLowFreqMinimumNumberShouldMatch", "(F)V");
            mids$[mid_toString_9bfa75c9f141b67f] = env->getMethodID(cls, "toString", "(Ljava/lang/String;)Ljava/lang/String;");
            mids$[mid_visit_f9e6207006c5b6c1] = env->getMethodID(cls, "visit", "(Lorg/apache/lucene/search/QueryVisitor;)V");
            mids$[mid_newTermQuery_00ce07860d4082e8] = env->getMethodID(cls, "newTermQuery", "(Lorg/apache/lucene/index/Term;Lorg/apache/lucene/index/TermStates;)Lorg/apache/lucene/search/Query;");
            mids$[mid_calcLowFreqMinimumNumberShouldMatch_1e143afe1894d213] = env->getMethodID(cls, "calcLowFreqMinimumNumberShouldMatch", "(I)I");
            mids$[mid_calcHighFreqMinimumNumberShouldMatch_1e143afe1894d213] = env->getMethodID(cls, "calcHighFreqMinimumNumberShouldMatch", "(I)I");
            mids$[mid_buildQuery_304dc2bfaab1873b] = env->getMethodID(cls, "buildQuery", "(I[Lorg/apache/lucene/index/TermStates;[Lorg/apache/lucene/index/Term;)Lorg/apache/lucene/search/Query;");

            class$ = new ::java::lang::Class(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        CommonTermsQuery::CommonTermsQuery(const ::org::apache::lucene::search::BooleanClause$Occur & a0, const ::org::apache::lucene::search::BooleanClause$Occur & a1, jfloat a2) : ::org::apache::lucene::search::Query(env->newObject(initializeClass, &mids$, mid_init$_fccc27bacc7b11b8, a0.this$, a1.this$, a2)) {}

        void CommonTermsQuery::add(const ::org::apache::lucene::index::Term & a0) const
        {
          env->callVoidMethod(this$, mids$[mid_add_32784f9c0ee449e6], a0.this$);
        }

        void CommonTermsQuery::collectTermStates(const ::org::apache::lucene::index::IndexReader & a0, const ::java::util::List & a1, const JArray< ::org::apache::lucene::index::TermStates > & a2, const JArray< ::org::apache::lucene::index::Term > & a3) const
        {
          env->callVoidMethod(this$, mids$[mid_collectTermStates_ec447f5073f01972], a0.this$, a1.this$, a2.this$, a3.this$);
        }

        jboolean CommonTermsQuery::equals(const ::java::lang::Object & a0) const
        {
          return env->callBooleanMethod(this$, mids$[mid_equals_8b72f2dcdde6fd1d], a0.this$);
        }

        jfloat CommonTermsQuery::getHighFreqBoost() const
        {
          return env->callFloatMethod(this$, mids$[mid_getHighFreqBoost_58aec2b64dff50c8]);
        }

        jfloat CommonTermsQuery::getHighFreqMinimumNumberShouldMatch() const
        {
          return env->callFloatMethod(this$, mids$[mid_getHighFreqMinimumNumberShouldMatch_58aec2b64dff50c8]);
        }

        ::org::apache::lucene::search::BooleanClause$Occur CommonTermsQuery::getHighFreqOccur() const
        {
          return ::org::apache::lucene::search::BooleanClause$Occur(env->callObjectMethod(this$, mids$[mid_getHighFreqOccur_d2a892ed3bcf0bb6]));
        }

        jfloat CommonTermsQuery::getLowFreqBoost() const
        {
          return env->callFloatMethod(this$, mids$[mid_getLowFreqBoost_58aec2b64dff50c8]);
        }

        jfloat CommonTermsQuery::getLowFreqMinimumNumberShouldMatch() const
        {
          return env->callFloatMethod(this$, mids$[mid_getLowFreqMinimumNumberShouldMatch_58aec2b64dff50c8]);
        }

        ::org::apache::lucene::search::BooleanClause$Occur CommonTermsQuery::getLowFreqOccur() const
        {
          return ::org::apache::lucene::search::BooleanClause$Occur(env->callObjectMethod(this$, mids$[mid_getLowFreqOccur_d2a892ed3bcf0bb6]));
        }

        jfloat CommonTermsQuery::getMaxTermFrequency() const
        {
          return env->callFloatMethod(this$, mids$[mid_getMaxTermFrequency_58aec2b64dff50c8]);
        }

        ::java::util::List CommonTermsQuery::getTerms() const
        {
          return ::java::util::List(env->callObjectMethod(this$, mids$[mid_getTerms_49ec78390f08338a]));
        }

        jint CommonTermsQuery::hashCode() const
        {
          return env->callIntMethod(this$, mids$[mid_hashCode_9972fcc56b44e79d]);
        }

        ::org::apache::lucene::search::Query CommonTermsQuery::rewrite(const ::org::apache::lucene::index::IndexReader & a0) const
        {
          return ::org::apache::lucene::search::Query(env->callObjectMethod(this$, mids$[mid_rewrite_bb52f19a8254555c], a0.this$));
        }

        void CommonTermsQuery::setHighFreqMinimumNumberShouldMatch(jfloat a0) const
        {
          env->callVoidMethod(this$, mids$[mid_setHighFreqMinimumNumberShouldMatch_8e1d952dd65cdc3a], a0);
        }

        void CommonTermsQuery::setLowFreqMinimumNumberShouldMatch(jfloat a0) const
        {
          env->callVoidMethod(this$, mids$[mid_setLowFreqMinimumNumberShouldMatch_8e1d952dd65cdc3a], a0);
        }

        ::java::lang::String CommonTermsQuery::toString(const ::java::lang::String & a0) const
        {
          return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_9bfa75c9f141b67f], a0.this$));
        }

        void CommonTermsQuery::visit(const ::org::apache::lucene::search::QueryVisitor & a0) const
        {
          env->callVoidMethod(this$, mids$[mid_visit_f9e6207006c5b6c1], a0.this$);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queries {
        static PyObject *t_CommonTermsQuery_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_CommonTermsQuery_instance_(PyTypeObject *type, PyObject *arg);
        static int t_CommonTermsQuery_init_(t_CommonTermsQuery *self, PyObject *args, PyObject *kwds);
        static PyObject *t_CommonTermsQuery_add(t_CommonTermsQuery *self, PyObject *arg);
        static PyObject *t_CommonTermsQuery_collectTermStates(t_CommonTermsQuery *self, PyObject *args);
        static PyObject *t_CommonTermsQuery_equals(t_CommonTermsQuery *self, PyObject *args);
        static PyObject *t_CommonTermsQuery_getHighFreqBoost(t_CommonTermsQuery *self);
        static PyObject *t_CommonTermsQuery_getHighFreqMinimumNumberShouldMatch(t_CommonTermsQuery *self);
        static PyObject *t_CommonTermsQuery_getHighFreqOccur(t_CommonTermsQuery *self);
        static PyObject *t_CommonTermsQuery_getLowFreqBoost(t_CommonTermsQuery *self);
        static PyObject *t_CommonTermsQuery_getLowFreqMinimumNumberShouldMatch(t_CommonTermsQuery *self);
        static PyObject *t_CommonTermsQuery_getLowFreqOccur(t_CommonTermsQuery *self);
        static PyObject *t_CommonTermsQuery_getMaxTermFrequency(t_CommonTermsQuery *self);
        static PyObject *t_CommonTermsQuery_getTerms(t_CommonTermsQuery *self);
        static PyObject *t_CommonTermsQuery_hashCode(t_CommonTermsQuery *self, PyObject *args);
        static PyObject *t_CommonTermsQuery_rewrite(t_CommonTermsQuery *self, PyObject *args);
        static PyObject *t_CommonTermsQuery_setHighFreqMinimumNumberShouldMatch(t_CommonTermsQuery *self, PyObject *arg);
        static PyObject *t_CommonTermsQuery_setLowFreqMinimumNumberShouldMatch(t_CommonTermsQuery *self, PyObject *arg);
        static PyObject *t_CommonTermsQuery_toString(t_CommonTermsQuery *self, PyObject *args);
        static PyObject *t_CommonTermsQuery_visit(t_CommonTermsQuery *self, PyObject *args);
        static PyObject *t_CommonTermsQuery_get__highFreqBoost(t_CommonTermsQuery *self, void *data);
        static PyObject *t_CommonTermsQuery_get__highFreqMinimumNumberShouldMatch(t_CommonTermsQuery *self, void *data);
        static int t_CommonTermsQuery_set__highFreqMinimumNumberShouldMatch(t_CommonTermsQuery *self, PyObject *arg, void *data);
        static PyObject *t_CommonTermsQuery_get__highFreqOccur(t_CommonTermsQuery *self, void *data);
        static PyObject *t_CommonTermsQuery_get__lowFreqBoost(t_CommonTermsQuery *self, void *data);
        static PyObject *t_CommonTermsQuery_get__lowFreqMinimumNumberShouldMatch(t_CommonTermsQuery *self, void *data);
        static int t_CommonTermsQuery_set__lowFreqMinimumNumberShouldMatch(t_CommonTermsQuery *self, PyObject *arg, void *data);
        static PyObject *t_CommonTermsQuery_get__lowFreqOccur(t_CommonTermsQuery *self, void *data);
        static PyObject *t_CommonTermsQuery_get__maxTermFrequency(t_CommonTermsQuery *self, void *data);
        static PyObject *t_CommonTermsQuery_get__terms(t_CommonTermsQuery *self, void *data);
        static PyGetSetDef t_CommonTermsQuery__fields_[] = {
          DECLARE_GET_FIELD(t_CommonTermsQuery, highFreqBoost),
          DECLARE_GETSET_FIELD(t_CommonTermsQuery, highFreqMinimumNumberShouldMatch),
          DECLARE_GET_FIELD(t_CommonTermsQuery, highFreqOccur),
          DECLARE_GET_FIELD(t_CommonTermsQuery, lowFreqBoost),
          DECLARE_GETSET_FIELD(t_CommonTermsQuery, lowFreqMinimumNumberShouldMatch),
          DECLARE_GET_FIELD(t_CommonTermsQuery, lowFreqOccur),
          DECLARE_GET_FIELD(t_CommonTermsQuery, maxTermFrequency),
          DECLARE_GET_FIELD(t_CommonTermsQuery, terms),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_CommonTermsQuery__methods_[] = {
          DECLARE_METHOD(t_CommonTermsQuery, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_CommonTermsQuery, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_CommonTermsQuery, add, METH_O),
          DECLARE_METHOD(t_CommonTermsQuery, collectTermStates, METH_VARARGS),
          DECLARE_METHOD(t_CommonTermsQuery, equals, METH_VARARGS),
          DECLARE_METHOD(t_CommonTermsQuery, getHighFreqBoost, METH_NOARGS),
          DECLARE_METHOD(t_CommonTermsQuery, getHighFreqMinimumNumberShouldMatch, METH_NOARGS),
          DECLARE_METHOD(t_CommonTermsQuery, getHighFreqOccur, METH_NOARGS),
          DECLARE_METHOD(t_CommonTermsQuery, getLowFreqBoost, METH_NOARGS),
          DECLARE_METHOD(t_CommonTermsQuery, getLowFreqMinimumNumberShouldMatch, METH_NOARGS),
          DECLARE_METHOD(t_CommonTermsQuery, getLowFreqOccur, METH_NOARGS),
          DECLARE_METHOD(t_CommonTermsQuery, getMaxTermFrequency, METH_NOARGS),
          DECLARE_METHOD(t_CommonTermsQuery, getTerms, METH_NOARGS),
          DECLARE_METHOD(t_CommonTermsQuery, hashCode, METH_VARARGS),
          DECLARE_METHOD(t_CommonTermsQuery, rewrite, METH_VARARGS),
          DECLARE_METHOD(t_CommonTermsQuery, setHighFreqMinimumNumberShouldMatch, METH_O),
          DECLARE_METHOD(t_CommonTermsQuery, setLowFreqMinimumNumberShouldMatch, METH_O),
          DECLARE_METHOD(t_CommonTermsQuery, toString, METH_VARARGS),
          DECLARE_METHOD(t_CommonTermsQuery, visit, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        static PyType_Slot PY_TYPE_SLOTS(CommonTermsQuery)[] = {
          { Py_tp_methods, t_CommonTermsQuery__methods_ },
          { Py_tp_init, (void *) t_CommonTermsQuery_init_ },
          { Py_tp_getset, t_CommonTermsQuery__fields_ },
          { 0, NULL }
        };

        static PyType_Def *PY_TYPE_BASES(CommonTermsQuery)[] = {
          &PY_TYPE_DEF(::org::apache::lucene::search::Query),
          NULL
        };

        DEFINE_TYPE(CommonTermsQuery, t_CommonTermsQuery, CommonTermsQuery);

        void t_CommonTermsQuery::install(PyObject *module)
        {
          installType(&PY_TYPE(CommonTermsQuery), &PY_TYPE_DEF(CommonTermsQuery), module, "CommonTermsQuery", 0);
        }

        void t_CommonTermsQuery::initialize(PyObject *module)
        {
          PyObject_SetAttrString((PyObject *) PY_TYPE(CommonTermsQuery), "class_", make_descriptor(CommonTermsQuery::initializeClass, 1));
          PyObject_SetAttrString((PyObject *) PY_TYPE(CommonTermsQuery), "wrapfn_", make_descriptor(t_CommonTermsQuery::wrap_jobject));
          PyObject_SetAttrString((PyObject *) PY_TYPE(CommonTermsQuery), "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_CommonTermsQuery_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, CommonTermsQuery::initializeClass, 1)))
            return NULL;
          return t_CommonTermsQuery::wrap_Object(CommonTermsQuery(((t_CommonTermsQuery *) arg)->object.this$));
        }
        static PyObject *t_CommonTermsQuery_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, CommonTermsQuery::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_CommonTermsQuery_init_(t_CommonTermsQuery *self, PyObject *args, PyObject *kwds)
        {
          ::org::apache::lucene::search::BooleanClause$Occur a0((jobject) NULL);
          PyTypeObject **p0;
          ::org::apache::lucene::search::BooleanClause$Occur a1((jobject) NULL);
          PyTypeObject **p1;
          jfloat a2;
          CommonTermsQuery object((jobject) NULL);

          if (!parseArgs(args, "KKF", ::org::apache::lucene::search::BooleanClause$Occur::initializeClass, ::org::apache::lucene::search::BooleanClause$Occur::initializeClass, &a0, &p0, ::org::apache::lucene::search::t_BooleanClause$Occur::parameters_, &a1, &p1, ::org::apache::lucene::search::t_BooleanClause$Occur::parameters_, &a2))
          {
            INT_CALL(object = CommonTermsQuery(a0, a1, a2));
            self->object = object;
          }
          else
          {
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }

        static PyObject *t_CommonTermsQuery_add(t_CommonTermsQuery *self, PyObject *arg)
        {
          ::org::apache::lucene::index::Term a0((jobject) NULL);

          if (!parseArg(arg, "k", ::org::apache::lucene::index::Term::initializeClass, &a0))
          {
            OBJ_CALL(self->object.add(a0));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "add", arg);
          return NULL;
        }

        static PyObject *t_CommonTermsQuery_collectTermStates(t_CommonTermsQuery *self, PyObject *args)
        {
          ::org::apache::lucene::index::IndexReader a0((jobject) NULL);
          ::java::util::List a1((jobject) NULL);
          PyTypeObject **p1;
          JArray< ::org::apache::lucene::index::TermStates > a2((jobject) NULL);
          JArray< ::org::apache::lucene::index::Term > a3((jobject) NULL);

          if (!parseArgs(args, "kK[k[k", ::org::apache::lucene::index::IndexReader::initializeClass, ::java::util::List::initializeClass, ::org::apache::lucene::index::TermStates::initializeClass, ::org::apache::lucene::index::Term::initializeClass, &a0, &a1, &p1, ::java::util::t_List::parameters_, &a2, &a3))
          {
            OBJ_CALL(self->object.collectTermStates(a0, a1, a2, a3));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "collectTermStates", args);
          return NULL;
        }

        static PyObject *t_CommonTermsQuery_equals(t_CommonTermsQuery *self, PyObject *args)
        {
          ::java::lang::Object a0((jobject) NULL);
          jboolean result;

          if (!parseArgs(args, "o", &a0))
          {
            OBJ_CALL(result = self->object.equals(a0));
            Py_RETURN_BOOL(result);
          }

          return callSuper(PY_TYPE(CommonTermsQuery), (PyObject *) self, "equals", args, 2);
        }

        static PyObject *t_CommonTermsQuery_getHighFreqBoost(t_CommonTermsQuery *self)
        {
          jfloat result;
          OBJ_CALL(result = self->object.getHighFreqBoost());
          return PyFloat_FromDouble((double) result);
        }

        static PyObject *t_CommonTermsQuery_getHighFreqMinimumNumberShouldMatch(t_CommonTermsQuery *self)
        {
          jfloat result;
          OBJ_CALL(result = self->object.getHighFreqMinimumNumberShouldMatch());
          return PyFloat_FromDouble((double) result);
        }

        static PyObject *t_CommonTermsQuery_getHighFreqOccur(t_CommonTermsQuery *self)
        {
          ::org::apache::lucene::search::BooleanClause$Occur result((jobject) NULL);
          OBJ_CALL(result = self->object.getHighFreqOccur());
          return ::org::apache::lucene::search::t_BooleanClause$Occur::wrap_Object(result);
        }

        static PyObject *t_CommonTermsQuery_getLowFreqBoost(t_CommonTermsQuery *self)
        {
          jfloat result;
          OBJ_CALL(result = self->object.getLowFreqBoost());
          return PyFloat_FromDouble((double) result);
        }

        static PyObject *t_CommonTermsQuery_getLowFreqMinimumNumberShouldMatch(t_CommonTermsQuery *self)
        {
          jfloat result;
          OBJ_CALL(result = self->object.getLowFreqMinimumNumberShouldMatch());
          return PyFloat_FromDouble((double) result);
        }

        static PyObject *t_CommonTermsQuery_getLowFreqOccur(t_CommonTermsQuery *self)
        {
          ::org::apache::lucene::search::BooleanClause$Occur result((jobject) NULL);
          OBJ_CALL(result = self->object.getLowFreqOccur());
          return ::org::apache::lucene::search::t_BooleanClause$Occur::wrap_Object(result);
        }

        static PyObject *t_CommonTermsQuery_getMaxTermFrequency(t_CommonTermsQuery *self)
        {
          jfloat result;
          OBJ_CALL(result = self->object.getMaxTermFrequency());
          return PyFloat_FromDouble((double) result);
        }

        static PyObject *t_CommonTermsQuery_getTerms(t_CommonTermsQuery *self)
        {
          ::java::util::List result((jobject) NULL);
          OBJ_CALL(result = self->object.getTerms());
          return ::java::util::t_List::wrap_Object(result, ::org::apache::lucene::index::PY_TYPE(Term));
        }

        static PyObject *t_CommonTermsQuery_hashCode(t_CommonTermsQuery *self, PyObject *args)
        {
          jint result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.hashCode());
            return PyLong_FromLong((long) result);
          }

          return callSuper(PY_TYPE(CommonTermsQuery), (PyObject *) self, "hashCode", args, 2);
        }

        static PyObject *t_CommonTermsQuery_rewrite(t_CommonTermsQuery *self, PyObject *args)
        {
          ::org::apache::lucene::index::IndexReader a0((jobject) NULL);
          ::org::apache::lucene::search::Query result((jobject) NULL);

          if (!parseArgs(args, "k", ::org::apache::lucene::index::IndexReader::initializeClass, &a0))
          {
            OBJ_CALL(result = self->object.rewrite(a0));
            return ::org::apache::lucene::search::t_Query::wrap_Object(result);
          }

          return callSuper(PY_TYPE(CommonTermsQuery), (PyObject *) self, "rewrite", args, 2);
        }

        static PyObject *t_CommonTermsQuery_setHighFreqMinimumNumberShouldMatch(t_CommonTermsQuery *self, PyObject *arg)
        {
          jfloat a0;

          if (!parseArg(arg, "F", &a0))
          {
            OBJ_CALL(self->object.setHighFreqMinimumNumberShouldMatch(a0));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "setHighFreqMinimumNumberShouldMatch", arg);
          return NULL;
        }

        static PyObject *t_CommonTermsQuery_setLowFreqMinimumNumberShouldMatch(t_CommonTermsQuery *self, PyObject *arg)
        {
          jfloat a0;

          if (!parseArg(arg, "F", &a0))
          {
            OBJ_CALL(self->object.setLowFreqMinimumNumberShouldMatch(a0));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "setLowFreqMinimumNumberShouldMatch", arg);
          return NULL;
        }

        static PyObject *t_CommonTermsQuery_toString(t_CommonTermsQuery *self, PyObject *args)
        {
          ::java::lang::String a0((jobject) NULL);
          ::java::lang::String result((jobject) NULL);

          if (!parseArgs(args, "s", &a0))
          {
            OBJ_CALL(result = self->object.toString(a0));
            return j2p(result);
          }

          return callSuper(PY_TYPE(CommonTermsQuery), (PyObject *) self, "toString", args, 2);
        }

        static PyObject *t_CommonTermsQuery_visit(t_CommonTermsQuery *self, PyObject *args)
        {
          ::org::apache::lucene::search::QueryVisitor a0((jobject) NULL);

          if (!parseArgs(args, "k", ::org::apache::lucene::search::QueryVisitor::initializeClass, &a0))
          {
            OBJ_CALL(self->object.visit(a0));
            Py_RETURN_NONE;
          }

          return callSuper(PY_TYPE(CommonTermsQuery), (PyObject *) self, "visit", args, 2);
        }

        static PyObject *t_CommonTermsQuery_get__highFreqBoost(t_CommonTermsQuery *self, void *data)
        {
          jfloat value;
          OBJ_CALL(value = self->object.getHighFreqBoost());
          return PyFloat_FromDouble((double) value);
        }

        static PyObject *t_CommonTermsQuery_get__highFreqMinimumNumberShouldMatch(t_CommonTermsQuery *self, void *data)
        {
          jfloat value;
          OBJ_CALL(value = self->object.getHighFreqMinimumNumberShouldMatch());
          return PyFloat_FromDouble((double) value);
        }
        static int t_CommonTermsQuery_set__highFreqMinimumNumberShouldMatch(t_CommonTermsQuery *self, PyObject *arg, void *data)
        {
          {
            jfloat value;
            if (!parseArg(arg, "F", &value))
            {
              INT_CALL(self->object.setHighFreqMinimumNumberShouldMatch(value));
              return 0;
            }
          }
          PyErr_SetArgsError((PyObject *) self, "highFreqMinimumNumberShouldMatch", arg);
          return -1;
        }

        static PyObject *t_CommonTermsQuery_get__highFreqOccur(t_CommonTermsQuery *self, void *data)
        {
          ::org::apache::lucene::search::BooleanClause$Occur value((jobject) NULL);
          OBJ_CALL(value = self->object.getHighFreqOccur());
          return ::org::apache::lucene::search::t_BooleanClause$Occur::wrap_Object(value);
        }

        static PyObject *t_CommonTermsQuery_get__lowFreqBoost(t_CommonTermsQuery *self, void *data)
        {
          jfloat value;
          OBJ_CALL(value = self->object.getLowFreqBoost());
          return PyFloat_FromDouble((double) value);
        }

        static PyObject *t_CommonTermsQuery_get__lowFreqMinimumNumberShouldMatch(t_CommonTermsQuery *self, void *data)
        {
          jfloat value;
          OBJ_CALL(value = self->object.getLowFreqMinimumNumberShouldMatch());
          return PyFloat_FromDouble((double) value);
        }
        static int t_CommonTermsQuery_set__lowFreqMinimumNumberShouldMatch(t_CommonTermsQuery *self, PyObject *arg, void *data)
        {
          {
            jfloat value;
            if (!parseArg(arg, "F", &value))
            {
              INT_CALL(self->object.setLowFreqMinimumNumberShouldMatch(value));
              return 0;
            }
          }
          PyErr_SetArgsError((PyObject *) self, "lowFreqMinimumNumberShouldMatch", arg);
          return -1;
        }

        static PyObject *t_CommonTermsQuery_get__lowFreqOccur(t_CommonTermsQuery *self, void *data)
        {
          ::org::apache::lucene::search::BooleanClause$Occur value((jobject) NULL);
          OBJ_CALL(value = self->object.getLowFreqOccur());
          return ::org::apache::lucene::search::t_BooleanClause$Occur::wrap_Object(value);
        }

        static PyObject *t_CommonTermsQuery_get__maxTermFrequency(t_CommonTermsQuery *self, void *data)
        {
          jfloat value;
          OBJ_CALL(value = self->object.getMaxTermFrequency());
          return PyFloat_FromDouble((double) value);
        }

        static PyObject *t_CommonTermsQuery_get__terms(t_CommonTermsQuery *self, void *data)
        {
          ::java::util::List value((jobject) NULL);
          OBJ_CALL(value = self->object.getTerms());
          return ::java::util::t_List::wrap_Object(value);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/codecs/CompoundDirectory.h"
#include "org/apache/lucene/store/IndexOutput.h"
#include "org/apache/lucene/store/IOContext.h"
#include "java/util/Collection.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/store/Lock.h"
#include "java/lang/String.h"
#include "java/io/IOException.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace codecs {

        ::java::lang::Class *CompoundDirectory::class$ = NULL;
        jmethodID *CompoundDirectory::mids$ = NULL;
        bool CompoundDirectory::live$ = false;

        jclass CompoundDirectory::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/codecs/CompoundDirectory");

            mids$ = new jmethodID[max_mid];
            mids$[mid_checkIntegrity_f2cc1bce94666404] = env->getMethodID(cls, "checkIntegrity", "()V");
            mids$[mid_createOutput_40e6d6dcc3f676b9] = env->getMethodID(cls, "createOutput", "(Ljava/lang/String;Lorg/apache/lucene/store/IOContext;)Lorg/apache/lucene/store/IndexOutput;");
            mids$[mid_createTempOutput_918504249dfbe513] = env->getMethodID(cls, "createTempOutput", "(Ljava/lang/String;Ljava/lang/String;Lorg/apache/lucene/store/IOContext;)Lorg/apache/lucene/store/IndexOutput;");
            mids$[mid_deleteFile_9fd2eb66a64e6f0f] = env->getMethodID(cls, "deleteFile", "(Ljava/lang/String;)V");
            mids$[mid_obtainLock_f265149b22017c5b] = env->getMethodID(cls, "obtainLock", "(Ljava/lang/String;)Lorg/apache/lucene/store/Lock;");
            mids$[mid_rename_15b72f6a44ff93f2] = env->getMethodID(cls, "rename", "(Ljava/lang/String;Ljava/lang/String;)V");
            mids$[mid_sync_50bc3ddc62a19f2d] = env->getMethodID(cls, "sync", "(Ljava/util/Collection;)V");
            mids$[mid_syncMetaData_f2cc1bce94666404] = env->getMethodID(cls, "syncMetaData", "()V");

            class$ = new ::java::lang::Class(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        void CompoundDirectory::checkIntegrity() const
        {
          env->callVoidMethod(this$, mids$[mid_checkIntegrity_f2cc1bce94666404]);
        }

        ::org::apache::lucene::store::IndexOutput CompoundDirectory::createOutput(const ::java::lang::String & a0, const ::org::apache::lucene::store::IOContext & a1) const
        {
          return ::org::apache::lucene::store::IndexOutput(env->callObjectMethod(this$, mids$[mid_createOutput_40e6d6dcc3f676b9], a0.this$, a1.this$));
        }

        ::org::apache::lucene::store::IndexOutput CompoundDirectory::createTempOutput(const ::java::lang::String & a0, const ::java::lang::String & a1, const ::org::apache::lucene::store::IOContext & a2) const
        {
          return ::org::apache::lucene::store::IndexOutput(env->callObjectMethod(this$, mids$[mid_createTempOutput_918504249dfbe513], a0.this$, a1.this$, a2.this$));
        }

        void CompoundDirectory::deleteFile(const ::java::lang::String & a0) const
        {
          env->callVoidMethod(this$, mids$[mid_deleteFile_9fd2eb66a64e6f0f], a0.this$);
        }

        ::org::apache::lucene::store::Lock CompoundDirectory::obtainLock(const ::java::lang::String & a0) const
        {
          return ::org::apache::lucene::store::Lock(env->callObjectMethod(this$, mids$[mid_obtainLock_f265149b22017c5b], a0.this$));
        }

        void CompoundDirectory::rename(const ::java::lang::String & a0, const ::java::lang::String & a1) const
        {
          env->callVoidMethod(this$, mids$[mid_rename_15b72f6a44ff93f2], a0.this$, a1.this$);
        }

        void CompoundDirectory::sync(const ::java::util::Collection & a0) const
        {
          env->callVoidMethod(this$, mids$[mid_sync_50bc3ddc62a19f2d], a0.this$);
        }

        void CompoundDirectory::syncMetaData() const
        {
          env->callVoidMethod(this$, mids$[mid_syncMetaData_f2cc1bce94666404]);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace codecs {
        static PyObject *t_CompoundDirectory_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_CompoundDirectory_instance_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_CompoundDirectory_checkIntegrity(t_CompoundDirectory *self);
        static PyObject *t_CompoundDirectory_createOutput(t_CompoundDirectory *self, PyObject *args);
        static PyObject *t_CompoundDirectory_createTempOutput(t_CompoundDirectory *self, PyObject *args);
        static PyObject *t_CompoundDirectory_deleteFile(t_CompoundDirectory *self, PyObject *args);
        static PyObject *t_CompoundDirectory_obtainLock(t_CompoundDirectory *self, PyObject *args);
        static PyObject *t_CompoundDirectory_rename(t_CompoundDirectory *self, PyObject *args);
        static PyObject *t_CompoundDirectory_sync(t_CompoundDirectory *self, PyObject *args);
        static PyObject *t_CompoundDirectory_syncMetaData(t_CompoundDirectory *self, PyObject *args);

        static PyMethodDef t_CompoundDirectory__methods_[] = {
          DECLARE_METHOD(t_CompoundDirectory, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_CompoundDirectory, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_CompoundDirectory, checkIntegrity, METH_NOARGS),
          DECLARE_METHOD(t_CompoundDirectory, createOutput, METH_VARARGS),
          DECLARE_METHOD(t_CompoundDirectory, createTempOutput, METH_VARARGS),
          DECLARE_METHOD(t_CompoundDirectory, deleteFile, METH_VARARGS),
          DECLARE_METHOD(t_CompoundDirectory, obtainLock, METH_VARARGS),
          DECLARE_METHOD(t_CompoundDirectory, rename, METH_VARARGS),
          DECLARE_METHOD(t_CompoundDirectory, sync, METH_VARARGS),
          DECLARE_METHOD(t_CompoundDirectory, syncMetaData, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        static PyType_Slot PY_TYPE_SLOTS(CompoundDirectory)[] = {
          { Py_tp_methods, t_CompoundDirectory__methods_ },
          { Py_tp_init, (void *) abstract_init },
          { 0, NULL }
        };

        static PyType_Def *PY_TYPE_BASES(CompoundDirectory)[] = {
          &PY_TYPE_DEF(::org::apache::lucene::store::Directory),
          NULL
        };

        DEFINE_TYPE(CompoundDirectory, t_CompoundDirectory, CompoundDirectory);

        void t_CompoundDirectory::install(PyObject *module)
        {
          installType(&PY_TYPE(CompoundDirectory), &PY_TYPE_DEF(CompoundDirectory), module, "CompoundDirectory", 0);
        }

        void t_CompoundDirectory::initialize(PyObject *module)
        {
          PyObject_SetAttrString((PyObject *) PY_TYPE(CompoundDirectory), "class_", make_descriptor(CompoundDirectory::initializeClass, 1));
          PyObject_SetAttrString((PyObject *) PY_TYPE(CompoundDirectory), "wrapfn_", make_descriptor(t_CompoundDirectory::wrap_jobject));
          PyObject_SetAttrString((PyObject *) PY_TYPE(CompoundDirectory), "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_CompoundDirectory_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, CompoundDirectory::initializeClass, 1)))
            return NULL;
          return t_CompoundDirectory::wrap_Object(CompoundDirectory(((t_CompoundDirectory *) arg)->object.this$));
        }
        static PyObject *t_CompoundDirectory_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, CompoundDirectory::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static PyObject *t_CompoundDirectory_checkIntegrity(t_CompoundDirectory *self)
        {
          OBJ_CALL(self->object.checkIntegrity());
          Py_RETURN_NONE;
        }

        static PyObject *t_CompoundDirectory_createOutput(t_CompoundDirectory *self, PyObject *args)
        {
          ::java::lang::String a0((jobject) NULL);
          ::org::apache::lucene::store::IOContext a1((jobject) NULL);
          ::org::apache::lucene::store::IndexOutput result((jobject) NULL);

          if (!parseArgs(args, "sk", ::org::apache::lucene::store::IOContext::initializeClass, &a0, &a1))
          {
            OBJ_CALL(result = self->object.createOutput(a0, a1));
            return ::org::apache::lucene::store::t_IndexOutput::wrap_Object(result);
          }

          return callSuper(PY_TYPE(CompoundDirectory), (PyObject *) self, "createOutput", args, 2);
        }

        static PyObject *t_CompoundDirectory_createTempOutput(t_CompoundDirectory *self, PyObject *args)
        {
          ::java::lang::String a0((jobject) NULL);
          ::java::lang::String a1((jobject) NULL);
          ::org::apache::lucene::store::IOContext a2((jobject) NULL);
          ::org::apache::lucene::store::IndexOutput result((jobject) NULL);

          if (!parseArgs(args, "ssk", ::org::apache::lucene::store::IOContext::initializeClass, &a0, &a1, &a2))
          {
            OBJ_CALL(result = self->object.createTempOutput(a0, a1, a2));
            return ::org::apache::lucene::store::t_IndexOutput::wrap_Object(result);
          }

          return callSuper(PY_TYPE(CompoundDirectory), (PyObject *) self, "createTempOutput", args, 2);
        }

        static PyObject *t_CompoundDirectory_deleteFile(t_CompoundDirectory *self, PyObject *args)
        {
          ::java::lang::String a0((jobject) NULL);

          if (!parseArgs(args, "s", &a0))
          {
            OBJ_CALL(self->object.deleteFile(a0));
            Py_RETURN_NONE;
          }

          return callSuper(PY_TYPE(CompoundDirectory), (PyObject *) self, "deleteFile", args, 2);
        }

        static PyObject *t_CompoundDirectory_obtainLock(t_CompoundDirectory *self, PyObject *args)
        {
          ::java::lang::String a0((jobject) NULL);
          ::org::apache::lucene::store::Lock result((jobject) NULL);

          if (!parseArgs(args, "s", &a0))
          {
            OBJ_CALL(result = self->object.obtainLock(a0));
            return ::org::apache::lucene::store::t_Lock::wrap_Object(result);
          }

          return callSuper(PY_TYPE(CompoundDirectory), (PyObject *) self, "obtainLock", args, 2);
        }

        static PyObject *t_CompoundDirectory_rename(t_CompoundDirectory *self, PyObject *args)
        {
          ::java::lang::String a0((jobject) NULL);
          ::java::lang::String a1((jobject) NULL);

          if (!parseArgs(args, "ss", &a0, &a1))
          {
            OBJ_CALL(self->object.rename(a0, a1));
            Py_RETURN_NONE;
          }

          return callSuper(PY_TYPE(CompoundDirectory), (PyObject *) self, "rename", args, 2);
        }

        static PyObject *t_CompoundDirectory_sync(t_CompoundDirectory *self, PyObject *args)
        {
          ::java::util::Collection a0((jobject) NULL);
          PyTypeObject **p0;

          if (!parseArgs(args, "K", ::java::util::Collection::initializeClass, &a0, &p0, ::java::util::t_Collection::parameters_))
          {
            OBJ_CALL(self->object.sync(a0));
            Py_RETURN_NONE;
          }

          return callSuper(PY_TYPE(CompoundDirectory), (PyObject *) self, "sync", args, 2);
        }

        static PyObject *t_CompoundDirectory_syncMetaData(t_CompoundDirectory *self, PyObject *args)
        {

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(self->object.syncMetaData());
            Py_RETURN_NONE;
          }

          return callSuper(PY_TYPE(CompoundDirectory), (PyObject *) self, "syncMetaData", args, 2);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/standard/ClassicFilter.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/analysis/TokenStream.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace standard {

          ::java::lang::Class *ClassicFilter::class$ = NULL;
          jmethodID *ClassicFilter::mids$ = NULL;
          bool ClassicFilter::live$ = false;

          jclass ClassicFilter::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/standard/ClassicFilter");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_c26756868a754f4e] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/analysis/TokenStream;)V");
              mids$[mid_incrementToken_8454bd5aa23fd11e] = env->getMethodID(cls, "incrementToken", "()Z");

              class$ = new ::java::lang::Class(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          ClassicFilter::ClassicFilter(const ::org::apache::lucene::analysis::TokenStream & a0) : ::org::apache::lucene::analysis::TokenFilter(env->newObject(initializeClass, &mids$, mid_init$_c26756868a754f4e, a0.this$)) {}

          jboolean ClassicFilter::incrementToken() const
          {
            return env->callBooleanMethod(this$, mids$[mid_incrementToken_8454bd5aa23fd11e]);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace standard {
          static PyObject *t_ClassicFilter_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_ClassicFilter_instance_(PyTypeObject *type, PyObject *arg);
          static int t_ClassicFilter_init_(t_ClassicFilter *self, PyObject *args, PyObject *kwds);
          static PyObject *t_ClassicFilter_incrementToken(t_ClassicFilter *self, PyObject *args);

          static PyMethodDef t_ClassicFilter__methods_[] = {
            DECLARE_METHOD(t_ClassicFilter, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_ClassicFilter, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_ClassicFilter, incrementToken, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          static PyType_Slot PY_TYPE_SLOTS(ClassicFilter)[] = {
            { Py_tp_methods, t_ClassicFilter__methods_ },
            { Py_tp_init, (void *) t_ClassicFilter_init_ },
            { 0, NULL }
          };

          static PyType_Def *PY_TYPE_BASES(ClassicFilter)[] = {
            &PY_TYPE_DEF(::org::apache::lucene::analysis::TokenFilter),
            NULL
          };

          DEFINE_TYPE(ClassicFilter, t_ClassicFilter, ClassicFilter);

          void t_ClassicFilter::install(PyObject *module)
          {
            installType(&PY_TYPE(ClassicFilter), &PY_TYPE_DEF(ClassicFilter), module, "ClassicFilter", 0);
          }

          void t_ClassicFilter::initialize(PyObject *module)
          {
            PyObject_SetAttrString((PyObject *) PY_TYPE(ClassicFilter), "class_", make_descriptor(ClassicFilter::initializeClass, 1));
            PyObject_SetAttrString((PyObject *) PY_TYPE(ClassicFilter), "wrapfn_", make_descriptor(t_ClassicFilter::wrap_jobject));
            PyObject_SetAttrString((PyObject *) PY_TYPE(ClassicFilter), "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_ClassicFilter_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, ClassicFilter::initializeClass, 1)))
              return NULL;
            return t_ClassicFilter::wrap_Object(ClassicFilter(((t_ClassicFilter *) arg)->object.this$));
          }
          static PyObject *t_ClassicFilter_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, ClassicFilter::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_ClassicFilter_init_(t_ClassicFilter *self, PyObject *args, PyObject *kwds)
          {
            ::org::apache::lucene::analysis::TokenStream a0((jobject) NULL);
            ClassicFilter object((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::analysis::TokenStream::initializeClass, &a0))
            {
              INT_CALL(object = ClassicFilter(a0));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_ClassicFilter_incrementToken(t_ClassicFilter *self, PyObject *args)
          {
            jboolean result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.incrementToken());
              Py_RETURN_BOOL(result);
            }

            return callSuper(PY_TYPE(ClassicFilter), (PyObject *) self, "incrementToken", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/suggest/analyzing/FreeTextSuggester.h"
#include "java/util/Collection.h"
#include "org/apache/lucene/store/DataInput.h"
#include "org/apache/lucene/util/Accountable.h"
#include "org/apache/lucene/analysis/Analyzer.h"
#include "java/lang/Class.h"
#include "java/lang/Object.h"
#include "org/apache/lucene/store/DataOutput.h"
#include "org/apache/lucene/util/BytesRef.h"
#include "java/lang/String.h"
#include "org/apache/lucene/search/suggest/Lookup$LookupResult.h"
#include "java/util/Set.h"
#include "java/lang/CharSequence.h"
#include "java/util/List.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/search/suggest/InputIterator.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace suggest {
          namespace analyzing {

            ::java::lang::Class *FreeTextSuggester::class$ = NULL;
            jmethodID *FreeTextSuggester::mids$ = NULL;
            bool FreeTextSuggester::live$ = false;
            jdouble FreeTextSuggester::ALPHA = (jdouble) 0;
            ::java::lang::String *FreeTextSuggester::CODEC_NAME = NULL;
            jint FreeTextSuggester::DEFAULT_GRAMS = (jint) 0;
            jbyte FreeTextSuggester::DEFAULT_SEPARATOR = (jbyte) 0;
            jint FreeTextSuggester::VERSION_CURRENT = (jint) 0;
            jint FreeTextSuggester::VERSION_START = (jint) 0;

            jclass FreeTextSuggester::initializeClass(bool getOnly)
            {
              if (getOnly)
                return (jclass) (live$ ? class$->this$ : NULL);
              if (class$ == NULL)
              {
                jclass cls = (jclass) env->findClass("org/apache/lucene/search/suggest/analyzing/FreeTextSuggester");

                mids$ = new jmethodID[max_mid];
                mids$[mid_init$_651b708fb3f85e6e] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/analysis/Analyzer;)V");
                mids$[mid_init$_d11940d5eb406acf] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/analysis/Analyzer;Lorg/apache/lucene/analysis/Analyzer;)V");
                mids$[mid_init$_81369a72b59154b3] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/analysis/Analyzer;Lorg/apache/lucene/analysis/Analyzer;I)V");
                mids$[mid_init$_738f394037f9c730] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/analysis/Analyzer;Lorg/apache/lucene/analysis/Analyzer;IB)V");
                mids$[mid_build_bf225d6cde09eeb7] = env->getMethodID(cls, "build", "(Lorg/apache/lucene/search/suggest/InputIterator;)V");
                mids$[mid_build_2038cc777ee05573] = env->getMethodID(cls, "build", "(Lorg/apache/lucene/search/suggest/InputIterator;D)V");
                mids$[mid_get_02b63332574637fb] = env->getMethodID(cls, "get", "(Ljava/lang/CharSequence;)Ljava/lang/Object;");
                mids$[mid_getChildResources_d4dfbf7a26ff41df] = env->getMethodID(cls, "getChildResources", "()Ljava/util/Collection;");
                mids$[mid_getCount_2e5ae9edcb9b072f] = env->getMethodID(cls, "getCount", "()J");
                mids$[mid_load_8d76187aa69e280c] = env->getMethodID(cls, "load", "(Lorg/apache/lucene/store/DataInput;)Z");
                mids$[mid_lookup_32d21569108f6276] = env->getMethodID(cls, "lookup", "(Ljava/lang/CharSequence;I)Ljava/util/List;");
                mids$[mid_lookup_615e71ef0df182df] = env->getMethodID(cls, "lookup", "(Ljava/lang/CharSequence;ZI)Ljava/util/List;");
                mids$[mid_lookup_d9d9bcb887ddf88e] = env->getMethodID(cls, "lookup", "(Ljava/lang/CharSequence;Ljava/util/Set;I)Ljava/util/List;");
                mids$[mid_lookup_b158b62b42de2509] = env->getMethodID(cls, "lookup", "(Ljava/lang/CharSequence;Ljava/util/Set;ZI)Ljava/util/List;");
                mids$[mid_ramBytesUsed_2e5ae9edcb9b072f] = env->getMethodID(cls, "ramBytesUsed", "()J");
                mids$[mid_store_a9f4986a27ef0adc] = env->getMethodID(cls, "store", "(Lorg/apache/lucene/store/DataOutput;)Z");

                class$ = new ::java::lang::Class(cls);
                cls = (jclass) class$->this$;

                ALPHA = env->getStaticDoubleField(cls, "ALPHA");
                CODEC_NAME = new ::java::lang::String(env->getStaticObjectField(cls, "CODEC_NAME", "Ljava/lang/String;"));
                DEFAULT_GRAMS = env->getStaticIntField(cls, "DEFAULT_GRAMS");
                DEFAULT_SEPARATOR = env->getStaticByteField(cls, "DEFAULT_SEPARATOR");
                VERSION_CURRENT = env->getStaticIntField(cls, "VERSION_CURRENT");
                VERSION_START = env->getStaticIntField(cls, "VERSION_START");
                live$ = true;
              }
              return (jclass) class$->this$;
            }

            FreeTextSuggester::FreeTextSuggester(const ::org::apache::lucene::analysis::Analyzer & a0) : ::org::apache::lucene::search::suggest::Lookup(env->newObject(initializeClass, &mids$, mid_init$_651b708fb3f85e6e, a0.this$)) {}

            FreeTextSuggester::FreeTextSuggester(const ::org::apache::lucene::analysis::Analyzer & a0, const ::org::apache::lucene::analysis::Analyzer & a1) : ::org::apache::lucene::search::suggest::Lookup(env->newObject(initializeClass, &mids$, mid_init$_d11940d5eb406acf, a0.this$, a1.this$)) {}

            FreeTextSuggester::FreeTextSuggester(const ::org::apache::lucene::analysis::Analyzer & a0, const ::org::apache::lucene::analysis::Analyzer & a1, jint a2) : ::org::apache::lucene::search::suggest::Lookup(env->newObject(initializeClass, &mids$, mid_init$_81369a72b59154b3, a0.this$, a1.this$, a2)) {}

            FreeTextSuggester::FreeTextSuggester(const ::org::apache::lucene::analysis::Analyzer & a0, const ::org::apache::lucene::analysis::Analyzer & a1, jint a2, jbyte a3) : ::org::apache::lucene::search::suggest::Lookup(env->newObject(initializeClass, &mids$, mid_init$_738f394037f9c730, a0.this$, a1.this$, a2, a3)) {}

            void FreeTextSuggester::build(const ::org::apache::lucene::search::suggest::InputIterator & a0) const
            {
              env->callVoidMethod(this$, mids$[mid_build_bf225d6cde09eeb7], a0.this$);
            }

            void FreeTextSuggester::build(const ::org::apache::lucene::search::suggest::InputIterator & a0, jdouble a1) const
            {
              env->callVoidMethod(this$, mids$[mid_build_2038cc777ee05573], a0.this$, a1);
            }

            ::java::lang::Object FreeTextSuggester::get(const ::java::lang::CharSequence & a0) const
            {
              return ::java::lang::Object(env->callObjectMethod(this$, mids$[mid_get_02b63332574637fb], a0.this$));
            }

            ::java::util::Collection FreeTextSuggester::getChildResources() const
            {
              return ::java::util::Collection(env->callObjectMethod(this$, mids$[mid_getChildResources_d4dfbf7a26ff41df]));
            }

            jlong FreeTextSuggester::getCount() const
            {
              return env->callLongMethod(this$, mids$[mid_getCount_2e5ae9edcb9b072f]);
            }

            jboolean FreeTextSuggester::load(const ::org::apache::lucene::store::DataInput & a0) const
            {
              return env->callBooleanMethod(this$, mids$[mid_load_8d76187aa69e280c], a0.this$);
            }

            ::java::util::List FreeTextSuggester::lookup(const ::java::lang::CharSequence & a0, jint a1) const
            {
              return ::java::util::List(env->callObjectMethod(this$, mids$[mid_lookup_32d21569108f6276], a0.this$, a1));
            }

            ::java::util::List FreeTextSuggester::lookup(const ::java::lang::CharSequence & a0, jboolean a1, jint a2) const
            {
              return ::java::util::List(env->callObjectMethod(this$, mids$[mid_lookup_615e71ef0df182df], a0.this$, a1, a2));
            }

            ::java::util::List FreeTextSuggester::lookup(const ::java::lang::CharSequence & a0, const ::java::util::Set & a1, jint a2) const
            {
              return ::java::util::List(env->callObjectMethod(this$, mids$[mid_lookup_d9d9bcb887ddf88e], a0.this$, a1.this$, a2));
            }

            ::java::util::List FreeTextSuggester::lookup(const ::java::lang::CharSequence & a0, const ::java::util::Set & a1, jboolean a2, jint a3) const
            {
              return ::java::util::List(env->callObjectMethod(this$, mids$[mid_lookup_b158b62b42de2509], a0.this$, a1.this$, a2, a3));
            }

            jlong FreeTextSuggester::ramBytesUsed() const
            {
              return env->callLongMethod(this$, mids$[mid_ramBytesUsed_2e5ae9edcb9b072f]);
            }

            jboolean FreeTextSuggester::store(const ::org::apache::lucene::store::DataOutput & a0) const
            {
              return env->callBooleanMethod(this$, mids$[mid_store_a9f4986a27ef0adc], a0.this$);
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace suggest {
          namespace analyzing {
            static PyObject *t_FreeTextSuggester_cast_(PyTypeObject *type, PyObject *arg);
            static PyObject *t_FreeTextSuggester_instance_(PyTypeObject *type, PyObject *arg);
            static int t_FreeTextSuggester_init_(t_FreeTextSuggester *self, PyObject *args, PyObject *kwds);
            static PyObject *t_FreeTextSuggester_build(t_FreeTextSuggester *self, PyObject *args);
            static PyObject *t_FreeTextSuggester_get(t_FreeTextSuggester *self, PyObject *arg);
            static PyObject *t_FreeTextSuggester_getChildResources(t_FreeTextSuggester *self, PyObject *args);
            static PyObject *t_FreeTextSuggester_getCount(t_FreeTextSuggester *self, PyObject *args);
            static PyObject *t_FreeTextSuggester_load(t_FreeTextSuggester *self, PyObject *args);
            static PyObject *t_FreeTextSuggester_lookup(t_FreeTextSuggester *self, PyObject *args);
            static PyObject *t_FreeTextSuggester_ramBytesUsed(t_FreeTextSuggester *self, PyObject *args);
            static PyObject *t_FreeTextSuggester_store(t_FreeTextSuggester *self, PyObject *args);
            static PyObject *t_FreeTextSuggester_get__childResources(t_FreeTextSuggester *self, void *data);
            static PyObject *t_FreeTextSuggester_get__count(t_FreeTextSuggester *self, void *data);
            static PyGetSetDef t_FreeTextSuggester__fields_[] = {
              DECLARE_GET_FIELD(t_FreeTextSuggester, childResources),
              DECLARE_GET_FIELD(t_FreeTextSuggester, count),
              { NULL, NULL, NULL, NULL, NULL }
            };

            static PyMethodDef t_FreeTextSuggester__methods_[] = {
              DECLARE_METHOD(t_FreeTextSuggester, cast_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_FreeTextSuggester, instance_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_FreeTextSuggester, build, METH_VARARGS),
              DECLARE_METHOD(t_FreeTextSuggester, get, METH_O),
              DECLARE_METHOD(t_FreeTextSuggester, getChildResources, METH_VARARGS),
              DECLARE_METHOD(t_FreeTextSuggester, getCount, METH_VARARGS),
              DECLARE_METHOD(t_FreeTextSuggester, load, METH_VARARGS),
              DECLARE_METHOD(t_FreeTextSuggester, lookup, METH_VARARGS),
              DECLARE_METHOD(t_FreeTextSuggester, ramBytesUsed, METH_VARARGS),
              DECLARE_METHOD(t_FreeTextSuggester, store, METH_VARARGS),
              { NULL, NULL, 0, NULL }
            };

            static PyType_Slot PY_TYPE_SLOTS(FreeTextSuggester)[] = {
              { Py_tp_methods, t_FreeTextSuggester__methods_ },
              { Py_tp_init, (void *) t_FreeTextSuggester_init_ },
              { Py_tp_getset, t_FreeTextSuggester__fields_ },
              { 0, NULL }
            };

            static PyType_Def *PY_TYPE_BASES(FreeTextSuggester)[] = {
              &PY_TYPE_DEF(::org::apache::lucene::search::suggest::Lookup),
              NULL
            };

            DEFINE_TYPE(FreeTextSuggester, t_FreeTextSuggester, FreeTextSuggester);

            void t_FreeTextSuggester::install(PyObject *module)
            {
              installType(&PY_TYPE(FreeTextSuggester), &PY_TYPE_DEF(FreeTextSuggester), module, "FreeTextSuggester", 0);
            }

            void t_FreeTextSuggester::initialize(PyObject *module)
            {
              PyObject_SetAttrString((PyObject *) PY_TYPE(FreeTextSuggester), "class_", make_descriptor(FreeTextSuggester::initializeClass, 1));
              PyObject_SetAttrString((PyObject *) PY_TYPE(FreeTextSuggester), "wrapfn_", make_descriptor(t_FreeTextSuggester::wrap_jobject));
              PyObject_SetAttrString((PyObject *) PY_TYPE(FreeTextSuggester), "boxfn_", make_descriptor(boxObject));
              env->getClass(FreeTextSuggester::initializeClass);
              PyObject_SetAttrString((PyObject *) PY_TYPE(FreeTextSuggester), "ALPHA", make_descriptor(FreeTextSuggester::ALPHA));
              PyObject_SetAttrString((PyObject *) PY_TYPE(FreeTextSuggester), "CODEC_NAME", make_descriptor(j2p(*FreeTextSuggester::CODEC_NAME)));
              PyObject_SetAttrString((PyObject *) PY_TYPE(FreeTextSuggester), "DEFAULT_GRAMS", make_descriptor(FreeTextSuggester::DEFAULT_GRAMS));
              PyObject_SetAttrString((PyObject *) PY_TYPE(FreeTextSuggester), "DEFAULT_SEPARATOR", make_descriptor(FreeTextSuggester::DEFAULT_SEPARATOR));
              PyObject_SetAttrString((PyObject *) PY_TYPE(FreeTextSuggester), "VERSION_CURRENT", make_descriptor(FreeTextSuggester::VERSION_CURRENT));
              PyObject_SetAttrString((PyObject *) PY_TYPE(FreeTextSuggester), "VERSION_START", make_descriptor(FreeTextSuggester::VERSION_START));
            }

            static PyObject *t_FreeTextSuggester_cast_(PyTypeObject *type, PyObject *arg)
            {
              if (!(arg = castCheck(arg, FreeTextSuggester::initializeClass, 1)))
                return NULL;
              return t_FreeTextSuggester::wrap_Object(FreeTextSuggester(((t_FreeTextSuggester *) arg)->object.this$));
            }
            static PyObject *t_FreeTextSuggester_instance_(PyTypeObject *type, PyObject *arg)
            {
              if (!castCheck(arg, FreeTextSuggester::initializeClass, 0))
                Py_RETURN_FALSE;
              Py_RETURN_TRUE;
            }

            static int t_FreeTextSuggester_init_(t_FreeTextSuggester *self, PyObject *args, PyObject *kwds)
            {
              switch (PyTuple_GET_SIZE(args)) {
               case 1:
                {
                  ::org::apache::lucene::analysis::Analyzer a0((jobject) NULL);
                  FreeTextSuggester object((jobject) NULL);

                  if (!parseArgs(args, "k", ::org::apache::lucene::analysis::Analyzer::initializeClass, &a0))
                  {
                    INT_CALL(object = FreeTextSuggester(a0));
                    self->object = object;
                    break;
                  }
                }
                goto err;
               case 2:
                {
                  ::org::apache::lucene::analysis::Analyzer a0((jobject) NULL);
                  ::org::apache::lucene::analysis::Analyzer a1((jobject) NULL);
                  FreeTextSuggester object((jobject) NULL);

                  if (!parseArgs(args, "kk", ::org::apache::lucene::analysis::Analyzer::initializeClass, ::org::apache::lucene::analysis::Analyzer::initializeClass, &a0, &a1))
                  {
                    INT_CALL(object = FreeTextSuggester(a0, a1));
                    self->object = object;
                    break;
                  }
                }
                goto err;
               case 3:
                {
                  ::org::apache::lucene::analysis::Analyzer a0((jobject) NULL);
                  ::org::apache::lucene::analysis::Analyzer a1((jobject) NULL);
                  jint a2;
                  FreeTextSuggester object((jobject) NULL);

                  if (!parseArgs(args, "kkI", ::org::apache::lucene::analysis::Analyzer::initializeClass, ::org::apache::lucene::analysis::Analyzer::initializeClass, &a0, &a1, &a2))
                  {
                    INT_CALL(object = FreeTextSuggester(a0, a1, a2));
                    self->object = object;
                    break;
                  }
                }
                goto err;
               case 4:
                {
                  ::org::apache::lucene::analysis::Analyzer a0((jobject) NULL);
                  ::org::apache::lucene::analysis::Analyzer a1((jobject) NULL);
                  jint a2;
                  jbyte a3;
                  FreeTextSuggester object((jobject) NULL);

                  if (!parseArgs(args, "kkIB", ::org::apache::lucene::analysis::Analyzer::initializeClass, ::org::apache::lucene::analysis::Analyzer::initializeClass, &a0, &a1, &a2, &a3))
                  {
                    INT_CALL(object = FreeTextSuggester(a0, a1, a2, a3));
                    self->object = object;
                    break;
                  }
                }
               default:
               err:
                PyErr_SetArgsError((PyObject *) self, "__init__", args);
                return -1;
              }

              return 0;
            }

            static PyObject *t_FreeTextSuggester_build(t_FreeTextSuggester *self, PyObject *args)
            {
              switch (PyTuple_GET_SIZE(args)) {
               case 1:
                {
                  ::org::apache::lucene::search::suggest::InputIterator a0((jobject) NULL);

                  if (!parseArgs(args, "k", ::org::apache::lucene::search::suggest::InputIterator::initializeClass, &a0))
                  {
                    OBJ_CALL(self->object.build(a0));
                    Py_RETURN_NONE;
                  }
                }
                break;
               case 2:
                {
                  ::org::apache::lucene::search::suggest::InputIterator a0((jobject) NULL);
                  jdouble a1;

                  if (!parseArgs(args, "kD", ::org::apache::lucene::search::suggest::InputIterator::initializeClass, &a0, &a1))
                  {
                    OBJ_CALL(self->object.build(a0, a1));
                    Py_RETURN_NONE;
                  }
                }
              }

              return callSuper(PY_TYPE(FreeTextSuggester), (PyObject *) self, "build", args, 2);
            }

            static PyObject *t_FreeTextSuggester_get(t_FreeTextSuggester *self, PyObject *arg)
            {
              ::java::lang::CharSequence a0((jobject) NULL);
              ::java::lang::Object result((jobject) NULL);

              if (!parseArg(arg, "O", ::java::lang::PY_TYPE(CharSequence), &a0))
              {
                OBJ_CALL(result = self->object.get(a0));
                return ::java::lang::t_Object::wrap_Object(result);
              }

              PyErr_SetArgsError((PyObject *) self, "get", arg);
              return NULL;
            }

            static PyObject *t_FreeTextSuggester_getChildResources(t_FreeTextSuggester *self, PyObject *args)
            {
              ::java::util::Collection result((jobject) NULL);

              if (!parseArgs(args, ""))
              {
                OBJ_CALL(result = self->object.getChildResources());
                return ::java::util::t_Collection::wrap_Object(result, ::org::apache::lucene::util::PY_TYPE(Accountable));
              }

              return callSuper(PY_TYPE(FreeTextSuggester), (PyObject *) self, "getChildResources", args, 2);
            }

            static PyObject *t_FreeTextSuggester_getCount(t_FreeTextSuggester *self, PyObject *args)
            {
              jlong result;

              if (!parseArgs(args, ""))
              {
                OBJ_CALL(result = self->object.getCount());
                return PyLong_FromLongLong((PY_LONG_LONG) result);
              }

              return callSuper(PY_TYPE(FreeTextSuggester), (PyObject *) self, "getCount", args, 2);
            }

            static PyObject *t_FreeTextSuggester_load(t_FreeTextSuggester *self, PyObject *args)
            {
              ::org::apache::lucene::store::DataInput a0((jobject) NULL);
              jboolean result;

              if (!parseArgs(args, "k", ::org::apache::lucene::store::DataInput::initializeClass, &a0))
              {
                OBJ_CALL(result = self->object.load(a0));
                Py_RETURN_BOOL(result);
              }

              return callSuper(PY_TYPE(FreeTextSuggester), (PyObject *) self, "load", args, 2);
            }

            static PyObject *t_FreeTextSuggester_lookup(t_FreeTextSuggester *self, PyObject *args)
            {
              switch (PyTuple_GET_SIZE(args)) {
               case 2:
                {
                  ::java::lang::CharSequence a0((jobject) NULL);
                  jint a1;
                  ::java::util::List result((jobject) NULL);

                  if (!parseArgs(args, "OI", ::java::lang::PY_TYPE(CharSequence), &a0, &a1))
                  {
                    OBJ_CALL(result = self->object.lookup(a0, a1));
                    return ::java::util::t_List::wrap_Object(result, ::org::apache::lucene::search::suggest::PY_TYPE(Lookup$LookupResult));
                  }
                }
                break;
               case 3:
                {
                  ::java::lang::CharSequence a0((jobject) NULL);
                  jboolean a1;
                  jint a2;
                  ::java::util::List result((jobject) NULL);

                  if (!parseArgs(args, "OZI", ::java::lang::PY_TYPE(CharSequence), &a0, &a1, &a2))
                  {
                    OBJ_CALL(result = self->object.lookup(a0, a1, a2));
                    return ::java::util::t_List::wrap_Object(result, ::org::apache::lucene::search::suggest::PY_TYPE(Lookup$LookupResult));
                  }
                }
                {
                  ::java::lang::CharSequence a0((jobject) NULL);
                  ::java::util::Set a1((jobject) NULL);
                  PyTypeObject **p1;
                  jint a2;
                  ::java::util::List result((jobject) NULL);

                  if (!parseArgs(args, "OKI", ::java::lang::PY_TYPE(CharSequence), ::java::util::Set::initializeClass, &a0, &a1, &p1, ::java::util::t_Set::parameters_, &a2))
                  {
                    OBJ_CALL(result = self->object.lookup(a0, a1, a2));
                    return ::java::util::t_List::wrap_Object(result, ::org::apache::lucene::search::suggest::PY_TYPE(Lookup$LookupResult));
                  }
                }
                break;
               case 4:
                {
                  ::java::lang::CharSequence a0((jobject) NULL);
                  ::java::util::Set a1((jobject) NULL);
                  PyTypeObject **p1;
                  jboolean a2;
                  jint a3;
                  ::java::util::List result((jobject) NULL);

                  if (!parseArgs(args, "OKZI", ::java::lang::PY_TYPE(CharSequence), ::java::util::Set::initializeClass, &a0, &a1, &p1, ::java::util::t_Set::parameters_, &a2, &a3))
                  {
                    OBJ_CALL(result = self->object.lookup(a0, a1, a2, a3));
                    return ::java::util::t_List::wrap_Object(result, ::org::apache::lucene::search::suggest::PY_TYPE(Lookup$LookupResult));
                  }
                }
              }

              return callSuper(PY_TYPE(FreeTextSuggester), (PyObject *) self, "lookup", args, 2);
            }

            static PyObject *t_FreeTextSuggester_ramBytesUsed(t_FreeTextSuggester *self, PyObject *args)
            {
              jlong result;

              if (!parseArgs(args, ""))
              {
                OBJ_CALL(result = self->object.ramBytesUsed());
                return PyLong_FromLongLong((PY_LONG_LONG) result);
              }

              return callSuper(PY_TYPE(FreeTextSuggester), (PyObject *) self, "ramBytesUsed", args, 2);
            }

            static PyObject *t_FreeTextSuggester_store(t_FreeTextSuggester *self, PyObject *args)
            {
              ::org::apache::lucene::store::DataOutput a0((jobject) NULL);
              jboolean result;

              if (!parseArgs(args, "k", ::org::apache::lucene::store::DataOutput::initializeClass, &a0))
              {
                OBJ_CALL(result = self->object.store(a0));
                Py_RETURN_BOOL(result);
              }

              return callSuper(PY_TYPE(FreeTextSuggester), (PyObject *) self, "store", args, 2);
            }

            static PyObject *t_FreeTextSuggester_get__childResources(t_FreeTextSuggester *self, void *data)
            {
              ::java::util::Collection value((jobject) NULL);
              OBJ_CALL(value = self->object.getChildResources());
              return ::java::util::t_Collection::wrap_Object(value);
            }

            static PyObject *t_FreeTextSuggester_get__count(t_FreeTextSuggester *self, void *data)
            {
              jlong value;
              OBJ_CALL(value = self->object.getCount());
              return PyLong_FromLongLong((PY_LONG_LONG) value);
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/codecs/lucene50/Lucene50LiveDocsFormat.h"
#include "org/apache/lucene/util/Bits.h"
#include "org/apache/lucene/store/IOContext.h"
#include "java/util/Collection.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/store/Directory.h"
#include "org/apache/lucene/index/SegmentCommitInfo.h"
#include "java/lang/String.h"
#include "java/io/IOException.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace codecs {
        namespace lucene50 {

          ::java::lang::Class *Lucene50LiveDocsFormat::class$ = NULL;
          jmethodID *Lucene50LiveDocsFormat::mids$ = NULL;
          bool Lucene50LiveDocsFormat::live$ = false;

          jclass Lucene50LiveDocsFormat::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/codecs/lucene50/Lucene50LiveDocsFormat");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_f2cc1bce94666404] = env->getMethodID(cls, "<init>", "()V");
              mids$[mid_files_b2e301d4a4757fdf] = env->getMethodID(cls, "files", "(Lorg/apache/lucene/index/SegmentCommitInfo;Ljava/util/Collection;)V");
              mids$[mid_readLiveDocs_f118005014dfdc32] = env->getMethodID(cls, "readLiveDocs", "(Lorg/apache/lucene/store/Directory;Lorg/apache/lucene/index/SegmentCommitInfo;Lorg/apache/lucene/store/IOContext;)Lorg/apache/lucene/util/Bits;");
              mids$[mid_writeLiveDocs_d90adf8fed5738cb] = env->getMethodID(cls, "writeLiveDocs", "(Lorg/apache/lucene/util/Bits;Lorg/apache/lucene/store/Directory;Lorg/apache/lucene/index/SegmentCommitInfo;ILorg/apache/lucene/store/IOContext;)V");

              class$ = new ::java::lang::Class(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          Lucene50LiveDocsFormat::Lucene50LiveDocsFormat() : ::org::apache::lucene::codecs::LiveDocsFormat(env->newObject(initializeClass, &mids$, mid_init$_f2cc1bce94666404)) {}

          void Lucene50LiveDocsFormat::files(const ::org::apache::lucene::index::SegmentCommitInfo & a0, const ::java::util::Collection & a1) const
          {
            env->callVoidMethod(this$, mids$[mid_files_b2e301d4a4757fdf], a0.this$, a1.this$);
          }

          ::org::apache::lucene::util::Bits Lucene50LiveDocsFormat::readLiveDocs(const ::org::apache::lucene::store::Directory & a0, const ::org::apache::lucene::index::SegmentCommitInfo & a1, const ::org::apache::lucene::store::IOContext & a2) const
          {
            return ::org::apache::lucene::util::Bits(env->callObjectMethod(this$, mids$[mid_readLiveDocs_f118005014dfdc32], a0.this$, a1.this$, a2.this$));
          }

          void Lucene50LiveDocsFormat::writeLiveDocs(const ::org::apache::lucene::util::Bits & a0, const ::org::apache::lucene::store::Directory & a1, const ::org::apache::lucene::index::SegmentCommitInfo & a2, jint a3, const ::org::apache::lucene::store::IOContext & a4) const
          {
            env->callVoidMethod(this$, mids$[mid_writeLiveDocs_d90adf8fed5738cb], a0.this$, a1.this$, a2.this$, a3, a4.this$);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace codecs {
        namespace lucene50 {
          static PyObject *t_Lucene50LiveDocsFormat_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_Lucene50LiveDocsFormat_instance_(PyTypeObject *type, PyObject *arg);
          static int t_Lucene50LiveDocsFormat_init_(t_Lucene50LiveDocsFormat *self, PyObject *args, PyObject *kwds);
          static PyObject *t_Lucene50LiveDocsFormat_files(t_Lucene50LiveDocsFormat *self, PyObject *args);
          static PyObject *t_Lucene50LiveDocsFormat_readLiveDocs(t_Lucene50LiveDocsFormat *self, PyObject *args);
          static PyObject *t_Lucene50LiveDocsFormat_writeLiveDocs(t_Lucene50LiveDocsFormat *self, PyObject *args);

          static PyMethodDef t_Lucene50LiveDocsFormat__methods_[] = {
            DECLARE_METHOD(t_Lucene50LiveDocsFormat, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_Lucene50LiveDocsFormat, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_Lucene50LiveDocsFormat, files, METH_VARARGS),
            DECLARE_METHOD(t_Lucene50LiveDocsFormat, readLiveDocs, METH_VARARGS),
            DECLARE_METHOD(t_Lucene50LiveDocsFormat, writeLiveDocs, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          static PyType_Slot PY_TYPE_SLOTS(Lucene50LiveDocsFormat)[] = {
            { Py_tp_methods, t_Lucene50LiveDocsFormat__methods_ },
            { Py_tp_init, (void *) t_Lucene50LiveDocsFormat_init_ },
            { 0, NULL }
          };

          static PyType_Def *PY_TYPE_BASES(Lucene50LiveDocsFormat)[] = {
            &PY_TYPE_DEF(::org::apache::lucene::codecs::LiveDocsFormat),
            NULL
          };

          DEFINE_TYPE(Lucene50LiveDocsFormat, t_Lucene50LiveDocsFormat, Lucene50LiveDocsFormat);

          void t_Lucene50LiveDocsFormat::install(PyObject *module)
          {
            installType(&PY_TYPE(Lucene50LiveDocsFormat), &PY_TYPE_DEF(Lucene50LiveDocsFormat), module, "Lucene50LiveDocsFormat", 0);
          }

          void t_Lucene50LiveDocsFormat::initialize(PyObject *module)
          {
            PyObject_SetAttrString((PyObject *) PY_TYPE(Lucene50LiveDocsFormat), "class_", make_descriptor(Lucene50LiveDocsFormat::initializeClass, 1));
            PyObject_SetAttrString((PyObject *) PY_TYPE(Lucene50LiveDocsFormat), "wrapfn_", make_descriptor(t_Lucene50LiveDocsFormat::wrap_jobject));
            PyObject_SetAttrString((PyObject *) PY_TYPE(Lucene50LiveDocsFormat), "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_Lucene50LiveDocsFormat_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, Lucene50LiveDocsFormat::initializeClass, 1)))
              return NULL;
            return t_Lucene50LiveDocsFormat::wrap_Object(Lucene50LiveDocsFormat(((t_Lucene50LiveDocsFormat *) arg)->object.this$));
          }
          static PyObject *t_Lucene50LiveDocsFormat_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, Lucene50LiveDocsFormat::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_Lucene50LiveDocsFormat_init_(t_Lucene50LiveDocsFormat *self, PyObject *args, PyObject *kwds)
          {
            Lucene50LiveDocsFormat object((jobject) NULL);

            INT_CALL(object = Lucene50LiveDocsFormat());
            self->object = object;

            return 0;
          }

          static PyObject *t_Lucene50LiveDocsFormat_files(t_Lucene50LiveDocsFormat *self, PyObject *args)
          {
            ::org::apache::lucene::index::SegmentCommitInfo a0((jobject) NULL);
            ::java::util::Collection a1((jobject) NULL);
            PyTypeObject **p1;

            if (!parseArgs(args, "kK", ::org::apache::lucene::index::SegmentCommitInfo::initializeClass, ::java::util::Collection::initializeClass, &a0, &a1, &p1, ::java::util::t_Collection::parameters_))
            {
              OBJ_CALL(self->object.files(a0, a1));
              Py_RETURN_NONE;
            }

            return callSuper(PY_TYPE(Lucene50LiveDocsFormat), (PyObject *) self, "files", args, 2);
          }

          static PyObject *t_Lucene50LiveDocsFormat_readLiveDocs(t_Lucene50LiveDocsFormat *self, PyObject *args)
          {
            ::org::apache::lucene::store::Directory a0((jobject) NULL);
            ::org::apache::lucene::index::SegmentCommitInfo a1((jobject) NULL);
            ::org::apache::lucene::store::IOContext a2((jobject) NULL);
            ::org::apache::lucene::util::Bits result((jobject) NULL);

            if (!parseArgs(args, "kkk", ::org::apache::lucene::store::Directory::initializeClass, ::org::apache::lucene::index::SegmentCommitInfo::initializeClass, ::org::apache::lucene::store::IOContext::initializeClass, &a0, &a1, &a2))
            {
              OBJ_CALL(result = self->object.readLiveDocs(a0, a1, a2));
              return ::org::apache::lucene::util::t_Bits::wrap_Object(result);
            }

            return callSuper(PY_TYPE(Lucene50LiveDocsFormat), (PyObject *) self, "readLiveDocs", args, 2);
          }

          static PyObject *t_Lucene50LiveDocsFormat_writeLiveDocs(t_Lucene50LiveDocsFormat *self, PyObject *args)
          {
            ::org::apache::lucene::util::Bits a0((jobject) NULL);
            ::org::apache::lucene::store::Directory a1((jobject) NULL);
            ::org::apache::lucene::index::SegmentCommitInfo a2((jobject) NULL);
            jint a3;
            ::org::apache::lucene::store::IOContext a4((jobject) NULL);

            if (!parseArgs(args, "kkkIk", ::org::apache::lucene::util::Bits::initializeClass, ::org::apache::lucene::store::Directory::initializeClass, ::org::apache::lucene::index::SegmentCommitInfo::initializeClass, ::org::apache::lucene::store::IOContext::initializeClass, &a0, &a1, &a2, &a3, &a4))
            {
              OBJ_CALL(self->object.writeLiveDocs(a0, a1, a2, a3, a4));
              Py_RETURN_NONE;
            }

            return callSuper(PY_TYPE(Lucene50LiveDocsFormat), (PyObject *) self, "writeLiveDocs", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/PhraseWildcardQuery$Builder.h"
#include "org/apache/lucene/index/Term.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/util/BytesRef.h"
#include "java/lang/String.h"
#include "org/apache/lucene/search/MultiTermQuery.h"
#include "org/apache/lucene/search/PhraseWildcardQuery.h"
#include "org/apache/lucene/search/PhraseWildcardQuery$Builder.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {

        ::java::lang::Class *PhraseWildcardQuery$Builder::class$ = NULL;
        jmethodID *PhraseWildcardQuery$Builder::mids$ = NULL;
        bool PhraseWildcardQuery$Builder::live$ = false;

        jclass PhraseWildcardQuery$Builder::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/search/PhraseWildcardQuery$Builder");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_3fb1dae8d4037984] = env->getMethodID(cls, "<init>", "(Ljava/lang/String;I)V");
            mids$[mid_init$_e2b47882c0ff8413] = env->getMethodID(cls, "<init>", "(Ljava/lang/String;IZ)V");
            mids$[mid_addMultiTerm_8555fae175a1171b] = env->getMethodID(cls, "addMultiTerm", "(Lorg/apache/lucene/search/MultiTermQuery;)Lorg/apache/lucene/search/PhraseWildcardQuery$Builder;");
            mids$[mid_addTerm_538d8af4dd39f681] = env->getMethodID(cls, "addTerm", "(Lorg/apache/lucene/index/Term;)Lorg/apache/lucene/search/PhraseWildcardQuery$Builder;");
            mids$[mid_addTerm_644db9081d89f716] = env->getMethodID(cls, "addTerm", "(Lorg/apache/lucene/util/BytesRef;)Lorg/apache/lucene/search/PhraseWildcardQuery$Builder;");
            mids$[mid_build_128c75b489092074] = env->getMethodID(cls, "build", "()Lorg/apache/lucene/search/PhraseWildcardQuery;");
            mids$[mid_setSlop_5aa3043c0cd67fd3] = env->getMethodID(cls, "setSlop", "(I)Lorg/apache/lucene/search/PhraseWildcardQuery$Builder;");

            class$ = new ::java::lang::Class(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        PhraseWildcardQuery$Builder::PhraseWildcardQuery$Builder(const ::java::lang::String & a0, jint a1) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_3fb1dae8d4037984, a0.this$, a1)) {}

        PhraseWildcardQuery$Builder::PhraseWildcardQuery$Builder(const ::java::lang::String & a0, jint a1, jboolean a2) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_e2b47882c0ff8413, a0.this$, a1, a2)) {}

        PhraseWildcardQuery$Builder PhraseWildcardQuery$Builder::addMultiTerm(const ::org::apache::lucene::search::MultiTermQuery & a0) const
        {
          return PhraseWildcardQuery$Builder(env->callObjectMethod(this$, mids$[mid_addMultiTerm_8555fae175a1171b], a0.this$));
        }

        PhraseWildcardQuery$Builder PhraseWildcardQuery$Builder::addTerm(const ::org::apache::lucene::index::Term & a0) const
        {
          return PhraseWildcardQuery$Builder(env->callObjectMethod(this$, mids$[mid_addTerm_538d8af4dd39f681], a0.this$));
        }

        PhraseWildcardQuery$Builder PhraseWildcardQuery$Builder::addTerm(const ::org::apache::lucene::util::BytesRef & a0) const
        {
          return PhraseWildcardQuery$Builder(env->callObjectMethod(this$, mids$[mid_addTerm_644db9081d89f716], a0.this$));
        }

        ::org::apache::lucene::search::PhraseWildcardQuery PhraseWildcardQuery$Builder::build() const
        {
          return ::org::apache::lucene::search::PhraseWildcardQuery(env->callObjectMethod(this$, mids$[mid_build_128c75b489092074]));
        }

        PhraseWildcardQuery$Builder PhraseWildcardQuery$Builder::setSlop(jint a0) const
        {
          return PhraseWildcardQuery$Builder(env->callObjectMethod(this$, mids$[mid_setSlop_5aa3043c0cd67fd3], a0));
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        static PyObject *t_PhraseWildcardQuery$Builder_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_PhraseWildcardQuery$Builder_instance_(PyTypeObject *type, PyObject *arg);
        static int t_PhraseWildcardQuery$Builder_init_(t_PhraseWildcardQuery$Builder *self, PyObject *args, PyObject *kwds);
        static PyObject *t_PhraseWildcardQuery$Builder_addMultiTerm(t_PhraseWildcardQuery$Builder *self, PyObject *arg);
        static PyObject *t_PhraseWildcardQuery$Builder_addTerm(t_PhraseWildcardQuery$Builder *self, PyObject *args);
        static PyObject *t_PhraseWildcardQuery$Builder_build(t_PhraseWildcardQuery$Builder *self);
        static PyObject *t_PhraseWildcardQuery$Builder_setSlop(t_PhraseWildcardQuery$Builder *self, PyObject *arg);
        static int t_PhraseWildcardQuery$Builder_set__slop(t_PhraseWildcardQuery$Builder *self, PyObject *arg, void *data);
        static PyGetSetDef t_PhraseWildcardQuery$Builder__fields_[] = {
          DECLARE_SET_FIELD(t_PhraseWildcardQuery$Builder, slop),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_PhraseWildcardQuery$Builder__methods_[] = {
          DECLARE_METHOD(t_PhraseWildcardQuery$Builder, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_PhraseWildcardQuery$Builder, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_PhraseWildcardQuery$Builder, addMultiTerm, METH_O),
          DECLARE_METHOD(t_PhraseWildcardQuery$Builder, addTerm, METH_VARARGS),
          DECLARE_METHOD(t_PhraseWildcardQuery$Builder, build, METH_NOARGS),
          DECLARE_METHOD(t_PhraseWildcardQuery$Builder, setSlop, METH_O),
          { NULL, NULL, 0, NULL }
        };

        static PyType_Slot PY_TYPE_SLOTS(PhraseWildcardQuery$Builder)[] = {
          { Py_tp_methods, t_PhraseWildcardQuery$Builder__methods_ },
          { Py_tp_init, (void *) t_PhraseWildcardQuery$Builder_init_ },
          { Py_tp_getset, t_PhraseWildcardQuery$Builder__fields_ },
          { 0, NULL }
        };

        static PyType_Def *PY_TYPE_BASES(PhraseWildcardQuery$Builder)[] = {
          &PY_TYPE_DEF(::java::lang::Object),
          NULL
        };

        DEFINE_TYPE(PhraseWildcardQuery$Builder, t_PhraseWildcardQuery$Builder, PhraseWildcardQuery$Builder);

        void t_PhraseWildcardQuery$Builder::install(PyObject *module)
        {
          installType(&PY_TYPE(PhraseWildcardQuery$Builder), &PY_TYPE_DEF(PhraseWildcardQuery$Builder), module, "PhraseWildcardQuery$Builder", 0);
        }

        void t_PhraseWildcardQuery$Builder::initialize(PyObject *module)
        {
          PyObject_SetAttrString((PyObject *) PY_TYPE(PhraseWildcardQuery$Builder), "class_", make_descriptor(PhraseWildcardQuery$Builder::initializeClass, 1));
          PyObject_SetAttrString((PyObject *) PY_TYPE(PhraseWildcardQuery$Builder), "wrapfn_", make_descriptor(t_PhraseWildcardQuery$Builder::wrap_jobject));
          PyObject_SetAttrString((PyObject *) PY_TYPE(PhraseWildcardQuery$Builder), "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_PhraseWildcardQuery$Builder_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, PhraseWildcardQuery$Builder::initializeClass, 1)))
            return NULL;
          return t_PhraseWildcardQuery$Builder::wrap_Object(PhraseWildcardQuery$Builder(((t_PhraseWildcardQuery$Builder *) arg)->object.this$));
        }
        static PyObject *t_PhraseWildcardQuery$Builder_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, PhraseWildcardQuery$Builder::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_PhraseWildcardQuery$Builder_init_(t_PhraseWildcardQuery$Builder *self, PyObject *args, PyObject *kwds)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 2:
            {
              ::java::lang::String a0((jobject) NULL);
              jint a1;
              PhraseWildcardQuery$Builder object((jobject) NULL);

              if (!parseArgs(args, "sI", &a0, &a1))
              {
                INT_CALL(object = PhraseWildcardQuery$Builder(a0, a1));
                self->object = object;
                break;
              }
            }
            goto err;
           case 3:
            {
              ::java::lang::String a0((jobject) NULL);
              jint a1;
              jboolean a2;
              PhraseWildcardQuery$Builder object((jobject) NULL);

              if (!parseArgs(args, "sIZ", &a0, &a1, &a2))
              {
                INT_CALL(object = PhraseWildcardQuery$Builder(a0, a1, a2));
                self->object = object;
                break;
              }
            }
           default:
           err:
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }

        static PyObject *t_PhraseWildcardQuery$Builder_addMultiTerm(t_PhraseWildcardQuery$Builder *self, PyObject *arg)
        {
          ::org::apache::lucene::search::MultiTermQuery a0((jobject) NULL);
          PhraseWildcardQuery$Builder result((jobject) NULL);

          if (!parseArg(arg, "k", ::org::apache::lucene::search::MultiTermQuery::initializeClass, &a0))
          {
            OBJ_CALL(result = self->object.addMultiTerm(a0));
            return t_PhraseWildcardQuery$Builder::wrap_Object(result);
          }

          PyErr_SetArgsError((PyObject *) self, "addMultiTerm", arg);
          return NULL;
        }

        static PyObject *t_PhraseWildcardQuery$Builder_addTerm(t_PhraseWildcardQuery$Builder *self, PyObject *args)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 1:
            {
              ::org::apache::lucene::index::Term a0((jobject) NULL);
              PhraseWildcardQuery$Builder result((jobject) NULL);

              if (!parseArgs(args, "k", ::org::apache::lucene::index::Term::initializeClass, &a0))
              {
                OBJ_CALL(result = self->object.addTerm(a0));
                return t_PhraseWildcardQuery$Builder::wrap_Object(result);
              }
            }
            {
              ::org::apache::lucene::util::BytesRef a0((jobject) NULL);
              PhraseWildcardQuery$Builder result((jobject) NULL);

              if (!parseArgs(args, "k", ::org::apache::lucene::util::BytesRef::initializeClass, &a0))
              {
                OBJ_CALL(result = self->object.addTerm(a0));
                return t_PhraseWildcardQuery$Builder::wrap_Object(result);
              }
            }
          }

          PyErr_SetArgsError((PyObject *) self, "addTerm", args);
          return NULL;
        }

        static PyObject *t_PhraseWildcardQuery$Builder_build(t_PhraseWildcardQuery$Builder *self)
        {
          ::org::apache::lucene::search::PhraseWildcardQuery result((jobject) NULL);
          OBJ_CALL(result = self->object.build());
          return ::org::apache::lucene::search::t_PhraseWildcardQuery::wrap_Object(result);
        }

        static PyObject *t_PhraseWildcardQuery$Builder_setSlop(t_PhraseWildcardQuery$Builder *self, PyObject *arg)
        {
          jint a0;
          PhraseWildcardQuery$Builder result((jobject) NULL);

          if (!parseArg(arg, "I", &a0))
          {
            OBJ_CALL(result = self->object.setSlop(a0));
            return t_PhraseWildcardQuery$Builder::wrap_Object(result);
          }

          PyErr_SetArgsError((PyObject *) self, "setSlop", arg);
          return NULL;
        }

        static int t_PhraseWildcardQuery$Builder_set__slop(t_PhraseWildcardQuery$Builder *self, PyObject *arg, void *data)
        {
          {
            jint value;
            if (!parseArg(arg, "I", &value))
            {
              INT_CALL(self->object.setSlop(value));
              return 0;
            }
          }
          PyErr_SetArgsError((PyObject *) self, "slop", arg);
          return -1;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/codecs/MutablePointValues.h"
#include "org/apache/lucene/util/BytesRef.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace codecs {

        ::java::lang::Class *MutablePointValues::class$ = NULL;
        jmethodID *MutablePointValues::mids$ = NULL;
        bool MutablePointValues::live$ = false;

        jclass MutablePointValues::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/codecs/MutablePointValues");

            mids$ = new jmethodID[max_mid];
            mids$[mid_getByteAt_ec8084fc09951020] = env->getMethodID(cls, "getByteAt", "(II)B");
            mids$[mid_getDocID_1e143afe1894d213] = env->getMethodID(cls, "getDocID", "(I)I");
            mids$[mid_getValue_2986347cf15d1696] = env->getMethodID(cls, "getValue", "(ILorg/apache/lucene/util/BytesRef;)V");
            mids$[mid_restore_438c62480c481c65] = env->getMethodID(cls, "restore", "(II)V");
            mids$[mid_save_438c62480c481c65] = env->getMethodID(cls, "save", "(II)V");
            mids$[mid_swap_438c62480c481c65] = env->getMethodID(cls, "swap", "(II)V");

            class$ = new ::java::lang::Class(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        jbyte MutablePointValues::getByteAt(jint a0, jint a1) const
        {
          return env->callByteMethod(this$, mids$[mid_getByteAt_ec8084fc09951020], a0, a1);
        }

        jint MutablePointValues::getDocID(jint a0) const
        {
          return env->callIntMethod(this$, mids$[mid_getDocID_1e143afe1894d213], a0);
        }

        void MutablePointValues::getValue(jint a0, const ::org::apache::lucene::util::BytesRef & a1) const
        {
          env->callVoidMethod(this$, mids$[mid_getValue_2986347cf15d1696], a0, a1.this$);
        }

        void MutablePointValues::restore(jint a0, jint a1) const
        {
          env->callVoidMethod(this$, mids$[mid_restore_438c62480c481c65], a0, a1);
        }

        void MutablePointValues::save(jint a0, jint a1) const
        {
          env->callVoidMethod(this$, mids$[mid_save_438c62480c481c65], a0, a1);
        }

        void MutablePointValues::swap(jint a0, jint a1) const
        {
          env->callVoidMethod(this$, mids$[mid_swap_438c62480c481c65], a0, a1);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace codecs {
        static PyObject *t_MutablePointValues_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_MutablePointValues_instance_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_MutablePointValues_getByteAt(t_MutablePointValues *self, PyObject *args);
        static PyObject *t_MutablePointValues_getDocID(t_MutablePointValues *self, PyObject *arg);
        static PyObject *t_MutablePointValues_getValue(t_MutablePointValues *self, PyObject *args);
        static PyObject *t_MutablePointValues_restore(t_MutablePointValues *self, PyObject *args);
        static PyObject *t_MutablePointValues_save(t_MutablePointValues *self, PyObject *args);
        static PyObject *t_MutablePointValues_swap(t_MutablePointValues *self, PyObject *args);

        static PyMethodDef t_MutablePointValues__methods_[] = {
          DECLARE_METHOD(t_MutablePointValues, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_MutablePointValues, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_MutablePointValues, getByteAt, METH_VARARGS),
          DECLARE_METHOD(t_MutablePointValues, getDocID, METH_O),
          DECLARE_METHOD(t_MutablePointValues, getValue, METH_VARARGS),
          DECLARE_METHOD(t_MutablePointValues, restore, METH_VARARGS),
          DECLARE_METHOD(t_MutablePointValues, save, METH_VARARGS),
          DECLARE_METHOD(t_MutablePointValues, swap, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        static PyType_Slot PY_TYPE_SLOTS(MutablePointValues)[] = {
          { Py_tp_methods, t_MutablePointValues__methods_ },
          { Py_tp_init, (void *) abstract_init },
          { 0, NULL }
        };

        static PyType_Def *PY_TYPE_BASES(MutablePointValues)[] = {
          &PY_TYPE_DEF(::org::apache::lucene::index::PointValues),
          NULL
        };

        DEFINE_TYPE(MutablePointValues, t_MutablePointValues, MutablePointValues);

        void t_MutablePointValues::install(PyObject *module)
        {
          installType(&PY_TYPE(MutablePointValues), &PY_TYPE_DEF(MutablePointValues), module, "MutablePointValues", 0);
        }

        void t_MutablePointValues::initialize(PyObject *module)
        {
          PyObject_SetAttrString((PyObject *) PY_TYPE(MutablePointValues), "class_", make_descriptor(MutablePointValues::initializeClass, 1));
          PyObject_SetAttrString((PyObject *) PY_TYPE(MutablePointValues), "wrapfn_", make_descriptor(t_MutablePointValues::wrap_jobject));
          PyObject_SetAttrString((PyObject *) PY_TYPE(MutablePointValues), "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_MutablePointValues_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, MutablePointValues::initializeClass, 1)))
            return NULL;
          return t_MutablePointValues::wrap_Object(MutablePointValues(((t_MutablePointValues *) arg)->object.this$));
        }
        static PyObject *t_MutablePointValues_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, MutablePointValues::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static PyObject *t_MutablePointValues_getByteAt(t_MutablePointValues *self, PyObject *args)
        {
          jint a0;
          jint a1;
          jbyte result;

          if (!parseArgs(args, "II", &a0, &a1))
          {
            OBJ_CALL(result = self->object.getByteAt(a0, a1));
            return PyLong_FromLong((long) result);
          }

          PyErr_SetArgsError((PyObject *) self, "getByteAt", args);
          return NULL;
        }

        static PyObject *t_MutablePointValues_getDocID(t_MutablePointValues *self, PyObject *arg)
        {
          jint a0;
          jint result;

          if (!parseArg(arg, "I", &a0))
          {
            OBJ_CALL(result = self->object.getDocID(a0));
            return PyLong_FromLong((long) result);
          }

          PyErr_SetArgsError((PyObject *) self, "getDocID", arg);
          return NULL;
        }

        static PyObject *t_MutablePointValues_getValue(t_MutablePointValues *self, PyObject *args)
        {
          jint a0;
          ::org::apache::lucene::util::BytesRef a1((jobject) NULL);

          if (!parseArgs(args, "Ik", ::org::apache::lucene::util::BytesRef::initializeClass, &a0, &a1))
          {
            OBJ_CALL(self->object.getValue(a0, a1));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "getValue", args);
          return NULL;
        }

        static PyObject *t_MutablePointValues_restore(t_MutablePointValues *self, PyObject *args)
        {
          jint a0;
          jint a1;

          if (!parseArgs(args, "II", &a0, &a1))
          {
            OBJ_CALL(self->object.restore(a0, a1));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "restore", args);
          return NULL;
        }

        static PyObject *t_MutablePointValues_save(t_MutablePointValues *self, PyObject *args)
        {
          jint a0;
          jint a1;

          if (!parseArgs(args, "II", &a0, &a1))
          {
            OBJ_CALL(self->object.save(a0, a1));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "save", args);
          return NULL;
        }

        static PyObject *t_MutablePointValues_swap(t_MutablePointValues *self, PyObject *args)
        {
          jint a0;
          jint a1;

          if (!parseArgs(args, "II", &a0, &a1))
          {
            OBJ_CALL(self->object.swap(a0, a1));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "swap", args);
          return NULL;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/tartarus/snowball/ext/LithuanianStemmer.h"
#include "java/lang/Object.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace tartarus {
    namespace snowball {
      namespace ext {

        ::java::lang::Class *LithuanianStemmer::class$ = NULL;
        jmethodID *LithuanianStemmer::mids$ = NULL;
        bool LithuanianStemmer::live$ = false;

        jclass LithuanianStemmer::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/tartarus/snowball/ext/LithuanianStemmer");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_f2cc1bce94666404] = env->getMethodID(cls, "<init>", "()V");
            mids$[mid_equals_8b72f2dcdde6fd1d] = env->getMethodID(cls, "equals", "(Ljava/lang/Object;)Z");
            mids$[mid_hashCode_9972fcc56b44e79d] = env->getMethodID(cls, "hashCode", "()I");
            mids$[mid_stem_8454bd5aa23fd11e] = env->getMethodID(cls, "stem", "()Z");

            class$ = new ::java::lang::Class(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        LithuanianStemmer::LithuanianStemmer() : ::org::tartarus::snowball::SnowballProgram(env->newObject(initializeClass, &mids$, mid_init$_f2cc1bce94666404)) {}

        jboolean LithuanianStemmer::equals(const ::java::lang::Object & a0) const
        {
          return env->callBooleanMethod(this$, mids$[mid_equals_8b72f2dcdde6fd1d], a0.this$);
        }

        jint LithuanianStemmer::hashCode() const
        {
          return env->callIntMethod(this$, mids$[mid_hashCode_9972fcc56b44e79d]);
        }

        jboolean LithuanianStemmer::stem() const
        {
          return env->callBooleanMethod(this$, mids$[mid_stem_8454bd5aa23fd11e]);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace tartarus {
    namespace snowball {
      namespace ext {
        static PyObject *t_LithuanianStemmer_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_LithuanianStemmer_instance_(PyTypeObject *type, PyObject *arg);
        static int t_LithuanianStemmer_init_(t_LithuanianStemmer *self, PyObject *args, PyObject *kwds);
        static PyObject *t_LithuanianStemmer_equals(t_LithuanianStemmer *self, PyObject *args);
        static PyObject *t_LithuanianStemmer_hashCode(t_LithuanianStemmer *self, PyObject *args);
        static PyObject *t_LithuanianStemmer_stem(t_LithuanianStemmer *self, PyObject *args);

        static PyMethodDef t_LithuanianStemmer__methods_[] = {
          DECLARE_METHOD(t_LithuanianStemmer, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_LithuanianStemmer, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_LithuanianStemmer, equals, METH_VARARGS),
          DECLARE_METHOD(t_LithuanianStemmer, hashCode, METH_VARARGS),
          DECLARE_METHOD(t_LithuanianStemmer, stem, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        static PyType_Slot PY_TYPE_SLOTS(LithuanianStemmer)[] = {
          { Py_tp_methods, t_LithuanianStemmer__methods_ },
          { Py_tp_init, (void *) t_LithuanianStemmer_init_ },
          { 0, NULL }
        };

        static PyType_Def *PY_TYPE_BASES(LithuanianStemmer)[] = {
          &PY_TYPE_DEF(::org::tartarus::snowball::SnowballProgram),
          NULL
        };

        DEFINE_TYPE(LithuanianStemmer, t_LithuanianStemmer, LithuanianStemmer);

        void t_LithuanianStemmer::install(PyObject *module)
        {
          installType(&PY_TYPE(LithuanianStemmer), &PY_TYPE_DEF(LithuanianStemmer), module, "LithuanianStemmer", 0);
        }

        void t_LithuanianStemmer::initialize(PyObject *module)
        {
          PyObject_SetAttrString((PyObject *) PY_TYPE(LithuanianStemmer), "class_", make_descriptor(LithuanianStemmer::initializeClass, 1));
          PyObject_SetAttrString((PyObject *) PY_TYPE(LithuanianStemmer), "wrapfn_", make_descriptor(t_LithuanianStemmer::wrap_jobject));
          PyObject_SetAttrString((PyObject *) PY_TYPE(LithuanianStemmer), "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_LithuanianStemmer_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, LithuanianStemmer::initializeClass, 1)))
            return NULL;
          return t_LithuanianStemmer::wrap_Object(LithuanianStemmer(((t_LithuanianStemmer *) arg)->object.this$));
        }
        static PyObject *t_LithuanianStemmer_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, LithuanianStemmer::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_LithuanianStemmer_init_(t_LithuanianStemmer *self, PyObject *args, PyObject *kwds)
        {
          LithuanianStemmer object((jobject) NULL);

          INT_CALL(object = LithuanianStemmer());
          self->object = object;

          return 0;
        }

        static PyObject *t_LithuanianStemmer_equals(t_LithuanianStemmer *self, PyObject *args)
        {
          ::java::lang::Object a0((jobject) NULL);
          jboolean result;

          if (!parseArgs(args, "o", &a0))
          {
            OBJ_CALL(result = self->object.equals(a0));
            Py_RETURN_BOOL(result);
          }

          return callSuper(PY_TYPE(LithuanianStemmer), (PyObject *) self, "equals", args, 2);
        }

        static PyObject *t_LithuanianStemmer_hashCode(t_LithuanianStemmer *self, PyObject *args)
        {
          jint result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.hashCode());
            return PyLong_FromLong((long) result);
          }

          return callSuper(PY_TYPE(LithuanianStemmer), (PyObject *) self, "hashCode", args, 2);
        }

        static PyObject *t_LithuanianStemmer_stem(t_LithuanianStemmer *self, PyObject *args)
        {
          jboolean result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.stem());
            Py_RETURN_BOOL(result);
          }

          return callSuper(PY_TYPE(LithuanianStemmer), (PyObject *) self, "stem", args, 2);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/util/packed/PackedInts$ReaderIterator.h"
#include "org/apache/lucene/util/LongsRef.h"
#include "java/io/IOException.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        namespace packed {

          ::java::lang::Class *PackedInts$ReaderIterator::class$ = NULL;
          jmethodID *PackedInts$ReaderIterator::mids$ = NULL;
          bool PackedInts$ReaderIterator::live$ = false;

          jclass PackedInts$ReaderIterator::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/util/packed/PackedInts$ReaderIterator");

              mids$ = new jmethodID[max_mid];
              mids$[mid_getBitsPerValue_9972fcc56b44e79d] = env->getMethodID(cls, "getBitsPerValue", "()I");
              mids$[mid_next_2e5ae9edcb9b072f] = env->getMethodID(cls, "next", "()J");
              mids$[mid_next_3d317fe777ddb931] = env->getMethodID(cls, "next", "(I)Lorg/apache/lucene/util/LongsRef;");
              mids$[mid_ord_9972fcc56b44e79d] = env->getMethodID(cls, "ord", "()I");
              mids$[mid_size_9972fcc56b44e79d] = env->getMethodID(cls, "size", "()I");

              class$ = new ::java::lang::Class(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          jint PackedInts$ReaderIterator::getBitsPerValue() const
          {
            return env->callIntMethod(this$, mids$[mid_getBitsPerValue_9972fcc56b44e79d]);
          }

          jlong PackedInts$ReaderIterator::next() const
          {
            return env->callLongMethod(this$, mids$[mid_next_2e5ae9edcb9b072f]);
          }

          ::org::apache::lucene::util::LongsRef PackedInts$ReaderIterator::next(jint a0) const
          {
            return ::org::apache::lucene::util::LongsRef(env->callObjectMethod(this$, mids$[mid_next_3d317fe777ddb931], a0));
          }

          jint PackedInts$ReaderIterator::ord() const
          {
            return env->callIntMethod(this$, mids$[mid_ord_9972fcc56b44e79d]);
          }

          jint PackedInts$ReaderIterator::size() const
          {
            return env->callIntMethod(this$, mids$[mid_size_9972fcc56b44e79d]);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        namespace packed {
          static PyObject *t_PackedInts$ReaderIterator_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_PackedInts$ReaderIterator_instance_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_PackedInts$ReaderIterator_getBitsPerValue(t_PackedInts$ReaderIterator *self);
          static PyObject *t_PackedInts$ReaderIterator_next(t_PackedInts$ReaderIterator *self, PyObject *args);
          static PyObject *t_PackedInts$ReaderIterator_ord(t_PackedInts$ReaderIterator *self);
          static PyObject *t_PackedInts$ReaderIterator_size(t_PackedInts$ReaderIterator *self);
          static PyObject *t_PackedInts$ReaderIterator_get__bitsPerValue(t_PackedInts$ReaderIterator *self, void *data);
          static PyGetSetDef t_PackedInts$ReaderIterator__fields_[] = {
            DECLARE_GET_FIELD(t_PackedInts$ReaderIterator, bitsPerValue),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_PackedInts$ReaderIterator__methods_[] = {
            DECLARE_METHOD(t_PackedInts$ReaderIterator, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_PackedInts$ReaderIterator, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_PackedInts$ReaderIterator, getBitsPerValue, METH_NOARGS),
            DECLARE_METHOD(t_PackedInts$ReaderIterator, next, METH_VARARGS),
            DECLARE_METHOD(t_PackedInts$ReaderIterator, ord, METH_NOARGS),
            DECLARE_METHOD(t_PackedInts$ReaderIterator, size, METH_NOARGS),
            { NULL, NULL, 0, NULL }
          };

          static PyType_Slot PY_TYPE_SLOTS(PackedInts$ReaderIterator)[] = {
            { Py_tp_methods, t_PackedInts$ReaderIterator__methods_ },
            { Py_tp_init, (void *) abstract_init },
            { Py_tp_getset, t_PackedInts$ReaderIterator__fields_ },
            { 0, NULL }
          };

          static PyType_Def *PY_TYPE_BASES(PackedInts$ReaderIterator)[] = {
            &PY_TYPE_DEF(::java::lang::Object),
            NULL
          };

          DEFINE_TYPE(PackedInts$ReaderIterator, t_PackedInts$ReaderIterator, PackedInts$ReaderIterator);

          void t_PackedInts$ReaderIterator::install(PyObject *module)
          {
            installType(&PY_TYPE(PackedInts$ReaderIterator), &PY_TYPE_DEF(PackedInts$ReaderIterator), module, "PackedInts$ReaderIterator", 0);
          }

          void t_PackedInts$ReaderIterator::initialize(PyObject *module)
          {
            PyObject_SetAttrString((PyObject *) PY_TYPE(PackedInts$ReaderIterator), "class_", make_descriptor(PackedInts$ReaderIterator::initializeClass, 1));
            PyObject_SetAttrString((PyObject *) PY_TYPE(PackedInts$ReaderIterator), "wrapfn_", make_descriptor(t_PackedInts$ReaderIterator::wrap_jobject));
            PyObject_SetAttrString((PyObject *) PY_TYPE(PackedInts$ReaderIterator), "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_PackedInts$ReaderIterator_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, PackedInts$ReaderIterator::initializeClass, 1)))
              return NULL;
            return t_PackedInts$ReaderIterator::wrap_Object(PackedInts$ReaderIterator(((t_PackedInts$ReaderIterator *) arg)->object.this$));
          }
          static PyObject *t_PackedInts$ReaderIterator_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, PackedInts$ReaderIterator::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static PyObject *t_PackedInts$ReaderIterator_getBitsPerValue(t_PackedInts$ReaderIterator *self)
          {
            jint result;
            OBJ_CALL(result = self->object.getBitsPerValue());
            return PyLong_FromLong((long) result);
          }

          static PyObject *t_PackedInts$ReaderIterator_next(t_PackedInts$ReaderIterator *self, PyObject *args)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 0:
              {
                jlong result;
                OBJ_CALL(result = self->object.next());
                return PyLong_FromLongLong((PY_LONG_LONG) result);
              }
              break;
             case 1:
              {
                jint a0;
                ::org::apache::lucene::util::LongsRef result((jobject) NULL);

                if (!parseArgs(args, "I", &a0))
                {
                  OBJ_CALL(result = self->object.next(a0));
                  return ::org::apache::lucene::util::t_LongsRef::wrap_Object(result);
                }
              }
            }

            PyErr_SetArgsError((PyObject *) self, "next", args);
            return NULL;
          }

          static PyObject *t_PackedInts$ReaderIterator_ord(t_PackedInts$ReaderIterator *self)
          {
            jint result;
            OBJ_CALL(result = self->object.ord());
            return PyLong_FromLong((long) result);
          }

          static PyObject *t_PackedInts$ReaderIterator_size(t_PackedInts$ReaderIterator *self)
          {
            jint result;
            OBJ_CALL(result = self->object.size());
            return PyLong_FromLong((long) result);
          }

          static PyObject *t_PackedInts$ReaderIterator_get__bitsPerValue(t_PackedInts$ReaderIterator *self, void *data)
          {
            jint value;
            OBJ_CALL(value = self->object.getBitsPerValue());
            return PyLong_FromLong((long) value);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queryparser/flexible/standard/processors/PointQueryNodeProcessor.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace standard {
            namespace processors {

              ::java::lang::Class *PointQueryNodeProcessor::class$ = NULL;
              jmethodID *PointQueryNodeProcessor::mids$ = NULL;
              bool PointQueryNodeProcessor::live$ = false;

              jclass PointQueryNodeProcessor::initializeClass(bool getOnly)
              {
                if (getOnly)
                  return (jclass) (live$ ? class$->this$ : NULL);
                if (class$ == NULL)
                {
                  jclass cls = (jclass) env->findClass("org/apache/lucene/queryparser/flexible/standard/processors/PointQueryNodeProcessor");

                  mids$ = new jmethodID[max_mid];
                  mids$[mid_init$_f2cc1bce94666404] = env->getMethodID(cls, "<init>", "()V");
                  mids$[mid_preProcessNode_9b07be8595532de7] = env->getMethodID(cls, "preProcessNode", "(Lorg/apache/lucene/queryparser/flexible/core/nodes/QueryNode;)Lorg/apache/lucene/queryparser/flexible/core/nodes/QueryNode;");
                  mids$[mid_postProcessNode_9b07be8595532de7] = env->getMethodID(cls, "postProcessNode", "(Lorg/apache/lucene/queryparser/flexible/core/nodes/QueryNode;)Lorg/apache/lucene/queryparser/flexible/core/nodes/QueryNode;");
                  mids$[mid_setChildrenOrder_e420eeaadf0bcd20] = env->getMethodID(cls, "setChildrenOrder", "(Ljava/util/List;)Ljava/util/List;");

                  class$ = new ::java::lang::Class(cls);
                  live$ = true;
                }
                return (jclass) class$->this$;
              }

              PointQueryNodeProcessor::PointQueryNodeProcessor() : ::org::apache::lucene::queryparser::flexible::core::processors::QueryNodeProcessorImpl(env->newObject(initializeClass, &mids$, mid_init$_f2cc1bce94666404)) {}
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace standard {
            namespace processors {
              static PyObject *t_PointQueryNodeProcessor_cast_(PyTypeObject *type, PyObject *arg);
              static PyObject *t_PointQueryNodeProcessor_instance_(PyTypeObject *type, PyObject *arg);
              static int t_PointQueryNodeProcessor_init_(t_PointQueryNodeProcessor *self, PyObject *args, PyObject *kwds);

              static PyMethodDef t_PointQueryNodeProcessor__methods_[] = {
                DECLARE_METHOD(t_PointQueryNodeProcessor, cast_, METH_O | METH_CLASS),
                DECLARE_METHOD(t_PointQueryNodeProcessor, instance_, METH_O | METH_CLASS),
                { NULL, NULL, 0, NULL }
              };

              static PyType_Slot PY_TYPE_SLOTS(PointQueryNodeProcessor)[] = {
                { Py_tp_methods, t_PointQueryNodeProcessor__methods_ },
                { Py_tp_init, (void *) t_PointQueryNodeProcessor_init_ },
                { 0, NULL }
              };

              static PyType_Def *PY_TYPE_BASES(PointQueryNodeProcessor)[] = {
                &PY_TYPE_DEF(::org::apache::lucene::queryparser::flexible::core::processors::QueryNodeProcessorImpl),
                NULL
              };

              DEFINE_TYPE(PointQueryNodeProcessor, t_PointQueryNodeProcessor, PointQueryNodeProcessor);

              void t_PointQueryNodeProcessor::install(PyObject *module)
              {
                installType(&PY_TYPE(PointQueryNodeProcessor), &PY_TYPE_DEF(PointQueryNodeProcessor), module, "PointQueryNodeProcessor", 0);
              }

              void t_PointQueryNodeProcessor::initialize(PyObject *module)
              {
                PyObject_SetAttrString((PyObject *) PY_TYPE(PointQueryNodeProcessor), "class_", make_descriptor(PointQueryNodeProcessor::initializeClass, 1));
                PyObject_SetAttrString((PyObject *) PY_TYPE(PointQueryNodeProcessor), "wrapfn_", make_descriptor(t_PointQueryNodeProcessor::wrap_jobject));
                PyObject_SetAttrString((PyObject *) PY_TYPE(PointQueryNodeProcessor), "boxfn_", make_descriptor(boxObject));
              }

              static PyObject *t_PointQueryNodeProcessor_cast_(PyTypeObject *type, PyObject *arg)
              {
                if (!(arg = castCheck(arg, PointQueryNodeProcessor::initializeClass, 1)))
                  return NULL;
                return t_PointQueryNodeProcessor::wrap_Object(PointQueryNodeProcessor(((t_PointQueryNodeProcessor *) arg)->object.this$));
              }
              static PyObject *t_PointQueryNodeProcessor_instance_(PyTypeObject *type, PyObject *arg)
              {
                if (!castCheck(arg, PointQueryNodeProcessor::initializeClass, 0))
                  Py_RETURN_FALSE;
                Py_RETURN_TRUE;
              }

              static int t_PointQueryNodeProcessor_init_(t_PointQueryNodeProcessor *self, PyObject *args, PyObject *kwds)
              {
                PointQueryNodeProcessor object((jobject) NULL);

                INT_CALL(object = PointQueryNodeProcessor());
                self->object = object;

                return 0;
              }
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queries/mlt/MoreLikeThis.h"
#include "org/apache/lucene/index/IndexReader.h"
#include "java/util/Map.h"
#include "java/util/Collection.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/analysis/Analyzer.h"
#include "org/apache/lucene/search/similarities/TFIDFSimilarity.h"
#include "java/lang/String.h"
#include "org/apache/lucene/search/Query.h"
#include "java/util/Set.h"
#include "java/io/Reader.h"
#include "java/io/IOException.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queries {
        namespace mlt {

          ::java::lang::Class *MoreLikeThis::class$ = NULL;
          jmethodID *MoreLikeThis::mids$ = NULL;
          bool MoreLikeThis::live$ = false;
          jboolean MoreLikeThis::DEFAULT_BOOST = (jboolean) 0;
          JArray< ::java::lang::String > *MoreLikeThis::DEFAULT_FIELD_NAMES = NULL;
          jint MoreLikeThis::DEFAULT_MAX_DOC_FREQ = (jint) 0;
          jint MoreLikeThis::DEFAULT_MAX_NUM_TOKENS_PARSED = (jint) 0;
          jint MoreLikeThis::DEFAULT_MAX_QUERY_TERMS = (jint) 0;
          jint MoreLikeThis::DEFAULT_MAX_WORD_LENGTH = (jint) 0;
          jint MoreLikeThis::DEFAULT_MIN_DOC_FREQ = (jint) 0;
          jint MoreLikeThis::DEFAULT_MIN_TERM_FREQ = (jint) 0;
          jint MoreLikeThis::DEFAULT_MIN_WORD_LENGTH = (jint) 0;
          ::java::util::Set *MoreLikeThis::DEFAULT_STOP_WORDS = NULL;

          jclass MoreLikeThis::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/queries/mlt/MoreLikeThis");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_9c5103ca988341a1] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/index/IndexReader;)V");
              mids$[mid_init$_bd9ddaa4712d0bea] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/index/IndexReader;Lorg/apache/lucene/search/similarities/TFIDFSimilarity;)V");
              mids$[mid_describeParams_db9b55ba01e03e4b] = env->getMethodID(cls, "describeParams", "()Ljava/lang/String;");
              mids$[mid_getAnalyzer_75a99b097bd64493] = env->getMethodID(cls, "getAnalyzer", "()Lorg/apache/lucene/analysis/Analyzer;");
              mids$[mid_getBoostFactor_58aec2b64dff50c8] = env->getMethodID(cls, "getBoostFactor", "()F");
              mids$[mid_getFieldNames_9865da0b5ee490bc] = env->getMethodID(cls, "getFieldNames", "()[Ljava/lang/String;");
              mids$[mid_getMaxDocFreq_9972fcc56b44e79d] = env->getMethodID(cls, "getMaxDocFreq", "()I");
              mids$[mid_getMaxNumTokensParsed_9972fcc56b44e79d] = env->getMethodID(cls, "getMaxNumTokensParsed", "()I");
              mids$[mid_getMaxQueryTerms_9972fcc56b44e79d] = env->getMethodID(cls, "getMaxQueryTerms", "()I");
              mids$[mid_getMaxWordLen_9972fcc56b44e79d] = env->getMethodID(cls, "getMaxWordLen", "()I");
              mids$[mid_getMinDocFreq_9972fcc56b44e79d] = env->getMethodID(cls, "getMinDocFreq", "()I");
              mids$[mid_getMinTermFreq_9972fcc56b44e79d] = env->getMethodID(cls, "getMinTermFreq", "()I");
              mids$[mid_getMinWordLen_9972fcc56b44e79d] = env->getMethodID(cls, "getMinWordLen", "()I");
              mids$[mid_getSimilarity_023cdf2739df6bf9] = env->getMethodID(cls, "getSimilarity", "()Lorg/apache/lucene/search/similarities/TFIDFSimilarity;");
              mids$[mid_getStopWords_7dcf4034c6d1a92a] = env->getMethodID(cls, "getStopWords", "()Ljava/util/Set;");
              mids$[mid_isBoost_8454bd5aa23fd11e] = env->getMethodID(cls, "isBoost", "()Z");
              mids$[mid_like_969d015037caecac] = env->getMethodID(cls, "like", "(I)Lorg/apache/lucene/search/Query;");
              mids$[mid_like_83066fc446ef78b6] = env->getMethodID(cls, "like", "(Ljava/util/Map;)Lorg/apache/lucene/search/Query;");
              mids$[mid_like_5853f582e0e50664] = env->getMethodID(cls, "like", "(Ljava/lang/String;[Ljava/io/Reader;)Lorg/apache/lucene/search/Query;");
              mids$[mid_retrieveInterestingTerms_77baa612666bd4dc] = env->getMethodID(cls, "retrieveInterestingTerms", "(I)[Ljava/lang/String;");
              mids$[mid_retrieveInterestingTerms_cd71343449839d8c] = env->getMethodID(cls, "retrieveInterestingTerms", "(Ljava/io/Reader;Ljava/lang/String;)[Ljava/lang/String;");
              mids$[mid_setAnalyzer_651b708fb3f85e6e] = env->getMethodID(cls, "setAnalyzer", "(Lorg/apache/lucene/analysis/Analyzer;)V");
              mids$[mid_setBoost_9d72768e8fdce2b7] = env->getMethodID(cls, "setBoost", "(Z)V");
              mids$[mid_setBoostFactor_8e1d952dd65cdc3a] = env->getMethodID(cls, "setBoostFactor", "(F)V");
              mids$[mid_setFieldNames_2fc318b999a7aba3] = env->getMethodID(cls, "setFieldNames", "([Ljava/lang/String;)V");
              mids$[mid_setMaxDocFreq_040c4cd0390c5aff] = env->getMethodID(cls, "setMaxDocFreq", "(I)V");
              mids$[mid_setMaxDocFreqPct_040c4cd0390c5aff] = env->getMethodID(cls, "setMaxDocFreqPct", "(I)V");
              mids$[mid_setMaxNumTokensParsed_040c4cd0390c5aff] = env->getMethodID(cls, "setMaxNumTokensParsed", "(I)V");
              mids$[mid_setMaxQueryTerms_040c4cd0390c5aff] = env->getMethodID(cls, "setMaxQueryTerms", "(I)V");
              mids$[mid_setMaxWordLen_040c4cd0390c5aff] = env->getMethodID(cls, "setMaxWordLen", "(I)V");
              mids$[mid_setMinDocFreq_040c4cd0390c5aff] = env->getMethodID(cls, "setMinDocFreq", "(I)V");
              mids$[mid_setMinTermFreq_040c4cd0390c5aff] = env->getMethodID(cls, "setMinTermFreq", "(I)V");
              mids$[mid_setMinWordLen_040c4cd0390c5aff] = env->getMethodID(cls, "setMinWordLen", "(I)V");
              mids$[mid_setSimilarity_ab7a0bb0ad5a9ec3] = env->getMethodID(cls, "setSimilarity", "(Lorg/apache/lucene/search/similarities/TFIDFSimilarity;)V");
              mids$[mid_setStopWords_d5a4a8d4b806f0ba] = env->getMethodID(cls, "setStopWords", "(Ljava/util/Set;)V");

              class$ = new ::java::lang::Class(cls);
              cls = (jclass) class$->this$;

              DEFAULT_BOOST = env->getStaticBooleanField(cls, "DEFAULT_BOOST");
              DEFAULT_FIELD_NAMES = new JArray< ::java::lang::String >(env->getStaticObjectField(cls, "DEFAULT_FIELD_NAMES", "[Ljava/lang/String;"));
              DEFAULT_MAX_DOC_FREQ = env->getStaticIntField(cls, "DEFAULT_MAX_DOC_FREQ");
              DEFAULT_MAX_NUM_TOKENS_PARSED = env->getStaticIntField(cls, "DEFAULT_MAX_NUM_TOKENS_PARSED");
              DEFAULT_MAX_QUERY_TERMS = env->getStaticIntField(cls, "DEFAULT_MAX_QUERY_TERMS");
              DEFAULT_MAX_WORD_LENGTH = env->getStaticIntField(cls, "DEFAULT_MAX_WORD_LENGTH");
              DEFAULT_MIN_DOC_FREQ = env->getStaticIntField(cls, "DEFAULT_MIN_DOC_FREQ");
              DEFAULT_MIN_TERM_FREQ = env->getStaticIntField(cls, "DEFAULT_MIN_TERM_FREQ");
              DEFAULT_MIN_WORD_LENGTH = env->getStaticIntField(cls, "DEFAULT_MIN_WORD_LENGTH");
              DEFAULT_STOP_WORDS = new ::java::util::Set(env->getStaticObjectField(cls, "DEFAULT_STOP_WORDS", "Ljava/util/Set;"));
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          MoreLikeThis::MoreLikeThis(const ::org::apache::lucene::index::IndexReader & a0) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_9c5103ca988341a1, a0.this$)) {}

          MoreLikeThis::MoreLikeThis(const ::org::apache::lucene::index::IndexReader & a0, const ::org::apache::lucene::search::similarities::TFIDFSimilarity & a1) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_bd9ddaa4712d0bea, a0.this$, a1.this$)) {}

          ::java::lang::String MoreLikeThis::describeParams() const
          {
            return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_describeParams_db9b55ba01e03e4b]));
          }

          ::org::apache::lucene::analysis::Analyzer MoreLikeThis::getAnalyzer() const
          {
            return ::org::apache::lucene::analysis::Analyzer(env->callObjectMethod(this$, mids$[mid_getAnalyzer_75a99b097bd64493]));
          }

          jfloat MoreLikeThis::getBoostFactor() const
          {
            return env->callFloatMethod(this$, mids$[mid_getBoostFactor_58aec2b64dff50c8]);
          }

          JArray< ::java::lang::String > MoreLikeThis::getFieldNames() const
          {
            return JArray< ::java::lang::String >(env->callObjectMethod(this$, mids$[mid_getFieldNames_9865da0b5ee490bc]));
          }

          jint MoreLikeThis::getMaxDocFreq() const
          {
            return env->callIntMethod(this$, mids$[mid_getMaxDocFreq_9972fcc56b44e79d]);
          }

          jint MoreLikeThis::getMaxNumTokensParsed() const
          {
            return env->callIntMethod(this$, mids$[mid_getMaxNumTokensParsed_9972fcc56b44e79d]);
          }

          jint MoreLikeThis::getMaxQueryTerms() const
          {
            return env->callIntMethod(this$, mids$[mid_getMaxQueryTerms_9972fcc56b44e79d]);
          }

          jint MoreLikeThis::getMaxWordLen() const
          {
            return env->callIntMethod(this$, mids$[mid_getMaxWordLen_9972fcc56b44e79d]);
          }

          jint MoreLikeThis::getMinDocFreq() const
          {
            return env->callIntMethod(this$, mids$[mid_getMinDocFreq_9972fcc56b44e79d]);
          }

          jint MoreLikeThis::getMinTermFreq() const
          {
            return env->callIntMethod(this$, mids$[mid_getMinTermFreq_9972fcc56b44e79d]);
          }

          jint MoreLikeThis::getMinWordLen() const
          {
            return env->callIntMethod(this$, mids$[mid_getMinWordLen_9972fcc56b44e79d]);
          }

          ::org::apache::lucene::search::similarities::TFIDFSimilarity MoreLikeThis::getSimilarity() const
          {
            return ::org::apache::lucene::search::similarities::TFIDFSimilarity(env->callObjectMethod(this$, mids$[mid_getSimilarity_023cdf2739df6bf9]));
          }

          ::java::util::Set MoreLikeThis::getStopWords() const
          {
            return ::java::util::Set(env->callObjectMethod(this$, mids$[mid_getStopWords_7dcf4034c6d1a92a]));
          }

          jboolean MoreLikeThis::isBoost() const
          {
            return env->callBooleanMethod(this$, mids$[mid_isBoost_8454bd5aa23fd11e]);
          }

          ::org::apache::lucene::search::Query MoreLikeThis::like(jint a0) const
          {
            return ::org::apache::lucene::search::Query(env->callObjectMethod(this$, mids$[mid_like_969d015037caecac], a0));
          }

          ::org::apache::lucene::search::Query MoreLikeThis::like(const ::java::util::Map & a0) const
          {
            return ::org::apache::lucene::search::Query(env->callObjectMethod(this$, mids$[mid_like_83066fc446ef78b6], a0.this$));
          }

          ::org::apache::lucene::search::Query MoreLikeThis::like(const ::java::lang::String & a0, const JArray< ::java::io::Reader > & a1) const
          {
            return ::org::apache::lucene::search::Query(env->callObjectMethod(this$, mids$[mid_like_5853f582e0e50664], a0.this$, a1.this$));
          }

          JArray< ::java::lang::String > MoreLikeThis::retrieveInterestingTerms(jint a0) const
          {
            return JArray< ::java::lang::String >(env->callObjectMethod(this$, mids$[mid_retrieveInterestingTerms_77baa612666bd4dc], a0));
          }

          JArray< ::java::lang::String > MoreLikeThis::retrieveInterestingTerms(const ::java::io::Reader & a0, const ::java::lang::String & a1) const
          {
            return JArray< ::java::lang::String >(env->callObjectMethod(this$, mids$[mid_retrieveInterestingTerms_cd71343449839d8c], a0.this$, a1.this$));
          }

          void MoreLikeThis::setAnalyzer(const ::org::apache::lucene::analysis::Analyzer & a0) const
          {
            env->callVoidMethod(this$, mids$[mid_setAnalyzer_651b708fb3f85e6e], a0.this$);
          }

          void MoreLikeThis::setBoost(jboolean a0) const
          {
            env->callVoidMethod(this$, mids$[mid_setBoost_9d72768e8fdce2b7], a0);
          }

          void MoreLikeThis::setBoostFactor(jfloat a0) const
          {
            env->callVoidMethod(this$, mids$[mid_setBoostFactor_8e1d952dd65cdc3a], a0);
          }

          void MoreLikeThis::setFieldNames(const JArray< ::java::lang::String > & a0) const
          {
            env->callVoidMethod(this$, mids$[mid_setFieldNames_2fc318b999a7aba3], a0.this$);
          }

          void MoreLikeThis::setMaxDocFreq(jint a0) const
          {
            env->callVoidMethod(this$, mids$[mid_setMaxDocFreq_040c4cd0390c5aff], a0);
          }

          void MoreLikeThis::setMaxDocFreqPct(jint a0) const
          {
            env->callVoidMethod(this$, mids$[mid_setMaxDocFreqPct_040c4cd0390c5aff], a0);
          }

          void MoreLikeThis::setMaxNumTokensParsed(jint a0) const
          {
            env->callVoidMethod(this$, mids$[mid_setMaxNumTokensParsed_040c4cd0390c5aff], a0);
          }

          void MoreLikeThis::setMaxQueryTerms(jint a0) const
          {
            env->callVoidMethod(this$, mids$[mid_setMaxQueryTerms_040c4cd0390c5aff], a0);
          }

          void MoreLikeThis::setMaxWordLen(jint a0) const
          {
            env->callVoidMethod(this$, mids$[mid_setMaxWordLen_040c4cd0390c5aff], a0);
          }

          void MoreLikeThis::setMinDocFreq(jint a0) const
          {
            env->callVoidMethod(this$, mids$[mid_setMinDocFreq_040c4cd0390c5aff], a0);
          }

          void MoreLikeThis::setMinTermFreq(jint a0) const
          {
            env->callVoidMethod(this$, mids$[mid_setMinTermFreq_040c4cd0390c5aff], a0);
          }

          void MoreLikeThis::setMinWordLen(jint a0) const
          {
            env->callVoidMethod(this$, mids$[mid_setMinWordLen_040c4cd0390c5aff], a0);
          }

          void MoreLikeThis::setSimilarity(const ::org::apache::lucene::search::similarities::TFIDFSimilarity & a0) const
          {
            env->callVoidMethod(this$, mids$[mid_setSimilarity_ab7a0bb0ad5a9ec3], a0.this$);
          }

          void MoreLikeThis::setStopWords(const ::java::util::Set & a0) const
          {
            env->callVoidMethod(this$, mids$[mid_setStopWords_d5a4a8d4b806f0ba], a0.this$);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queries {
        namespace mlt {
          static PyObject *t_MoreLikeThis_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_MoreLikeThis_instance_(PyTypeObject *type, PyObject *arg);
          static int t_MoreLikeThis_init_(t_MoreLikeThis *self, PyObject *args, PyObject *kwds);
          static PyObject *t_MoreLikeThis_describeParams(t_MoreLikeThis *self);
          static PyObject *t_MoreLikeThis_getAnalyzer(t_MoreLikeThis *self);
          static PyObject *t_MoreLikeThis_getBoostFactor(t_MoreLikeThis *self);
          static PyObject *t_MoreLikeThis_getFieldNames(t_MoreLikeThis *self);
          static PyObject *t_MoreLikeThis_getMaxDocFreq(t_MoreLikeThis *self);
          static PyObject *t_MoreLikeThis_getMaxNumTokensParsed(t_MoreLikeThis *self);
          static PyObject *t_MoreLikeThis_getMaxQueryTerms(t_MoreLikeThis *self);
          static PyObject *t_MoreLikeThis_getMaxWordLen(t_MoreLikeThis *self);
          static PyObject *t_MoreLikeThis_getMinDocFreq(t_MoreLikeThis *self);
          static PyObject *t_MoreLikeThis_getMinTermFreq(t_MoreLikeThis *self);
          static PyObject *t_MoreLikeThis_getMinWordLen(t_MoreLikeThis *self);
          static PyObject *t_MoreLikeThis_getSimilarity(t_MoreLikeThis *self);
          static PyObject *t_MoreLikeThis_getStopWords(t_MoreLikeThis *self);
          static PyObject *t_MoreLikeThis_isBoost(t_MoreLikeThis *self);
          static PyObject *t_MoreLikeThis_like(t_MoreLikeThis *self, PyObject *args);
          static PyObject *t_MoreLikeThis_retrieveInterestingTerms(t_MoreLikeThis *self, PyObject *args);
          static PyObject *t_MoreLikeThis_setAnalyzer(t_MoreLikeThis *self, PyObject *arg);
          static PyObject *t_MoreLikeThis_setBoost(t_MoreLikeThis *self, PyObject *arg);
          static PyObject *t_MoreLikeThis_setBoostFactor(t_MoreLikeThis *self, PyObject *arg);
          static PyObject *t_MoreLikeThis_setFieldNames(t_MoreLikeThis *self, PyObject *arg);
          static PyObject *t_MoreLikeThis_setMaxDocFreq(t_MoreLikeThis *self, PyObject *arg);
          static PyObject *t_MoreLikeThis_setMaxDocFreqPct(t_MoreLikeThis *self, PyObject *arg);
          static PyObject *t_MoreLikeThis_setMaxNumTokensParsed(t_MoreLikeThis *self, PyObject *arg);
          static PyObject *t_MoreLikeThis_setMaxQueryTerms(t_MoreLikeThis *self, PyObject *arg);
          static PyObject *t_MoreLikeThis_setMaxWordLen(t_MoreLikeThis *self, PyObject *arg);
          static PyObject *t_MoreLikeThis_setMinDocFreq(t_MoreLikeThis *self, PyObject *arg);
          static PyObject *t_MoreLikeThis_setMinTermFreq(t_MoreLikeThis *self, PyObject *arg);
          static PyObject *t_MoreLikeThis_setMinWordLen(t_MoreLikeThis *self, PyObject *arg);
          static PyObject *t_MoreLikeThis_setSimilarity(t_MoreLikeThis *self, PyObject *arg);
          static PyObject *t_MoreLikeThis_setStopWords(t_MoreLikeThis *self, PyObject *arg);
          static PyObject *t_MoreLikeThis_get__analyzer(t_MoreLikeThis *self, void *data);
          static int t_MoreLikeThis_set__analyzer(t_MoreLikeThis *self, PyObject *arg, void *data);
          static PyObject *t_MoreLikeThis_get__boost(t_MoreLikeThis *self, void *data);
          static int t_MoreLikeThis_set__boost(t_MoreLikeThis *self, PyObject *arg, void *data);
          static PyObject *t_MoreLikeThis_get__boostFactor(t_MoreLikeThis *self, void *data);
          static int t_MoreLikeThis_set__boostFactor(t_MoreLikeThis *self, PyObject *arg, void *data);
          static PyObject *t_MoreLikeThis_get__fieldNames(t_MoreLikeThis *self, void *data);
          static int t_MoreLikeThis_set__fieldNames(t_MoreLikeThis *self, PyObject *arg, void *data);
          static PyObject *t_MoreLikeThis_get__maxDocFreq(t_MoreLikeThis *self, void *data);
          static int t_MoreLikeThis_set__maxDocFreq(t_MoreLikeThis *self, PyObject *arg, void *data);
          static int t_MoreLikeThis_set__maxDocFreqPct(t_MoreLikeThis *self, PyObject *arg, void *data);
          static PyObject *t_MoreLikeThis_get__maxNumTokensParsed(t_MoreLikeThis *self, void *data);
          static int t_MoreLikeThis_set__maxNumTokensParsed(t_MoreLikeThis *self, PyObject *arg, void *data);
          static PyObject *t_MoreLikeThis_get__maxQueryTerms(t_MoreLikeThis *self, void *data);
          static int t_MoreLikeThis_set__maxQueryTerms(t_MoreLikeThis *self, PyObject *arg, void *data);
          static PyObject *t_MoreLikeThis_get__maxWordLen(t_MoreLikeThis *self, void *data);
          static int t_MoreLikeThis_set__maxWordLen(t_MoreLikeThis *self, PyObject *arg, void *data);
          static PyObject *t_MoreLikeThis_get__minDocFreq(t_MoreLikeThis *self, void *data);
          static int t_MoreLikeThis_set__minDocFreq(t_MoreLikeThis *self, PyObject *arg, void *data);
          static PyObject *t_MoreLikeThis_get__minTermFreq(t_MoreLikeThis *self, void *data);
          static int t_MoreLikeThis_set__minTermFreq(t_MoreLikeThis *self, PyObject *arg, void *data);
          static PyObject *t_MoreLikeThis_get__minWordLen(t_MoreLikeThis *self, void *data);
          static int t_MoreLikeThis_set__minWordLen(t_MoreLikeThis *self, PyObject *arg, void *data);
          static PyObject *t_MoreLikeThis_get__similarity(t_MoreLikeThis *self, void *data);
          static int t_MoreLikeThis_set__similarity(t_MoreLikeThis *self, PyObject *arg, void *data);
          static PyObject *t_MoreLikeThis_get__stopWords(t_MoreLikeThis *self, void *data);
          static int t_MoreLikeThis_set__stopWords(t_MoreLikeThis *self, PyObject *arg, void *data);
          static PyGetSetDef t_MoreLikeThis__fields_[] = {
            DECLARE_GETSET_FIELD(t_MoreLikeThis, analyzer),
            DECLARE_GETSET_FIELD(t_MoreLikeThis, boost),
            DECLARE_GETSET_FIELD(t_MoreLikeThis, boostFactor),
            DECLARE_GETSET_FIELD(t_MoreLikeThis, fieldNames),
            DECLARE_GETSET_FIELD(t_MoreLikeThis, maxDocFreq),
            DECLARE_SET_FIELD(t_MoreLikeThis, maxDocFreqPct),
            DECLARE_GETSET_FIELD(t_MoreLikeThis, maxNumTokensParsed),
            DECLARE_GETSET_FIELD(t_MoreLikeThis, maxQueryTerms),
            DECLARE_GETSET_FIELD(t_MoreLikeThis, maxWordLen),
            DECLARE_GETSET_FIELD(t_MoreLikeThis, minDocFreq),
            DECLARE_GETSET_FIELD(t_MoreLikeThis, minTermFreq),
            DECLARE_GETSET_FIELD(t_MoreLikeThis, minWordLen),
            DECLARE_GETSET_FIELD(t_MoreLikeThis, similarity),
            DECLARE_GETSET_FIELD(t_MoreLikeThis, stopWords),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_MoreLikeThis__methods_[] = {
            DECLARE_METHOD(t_MoreLikeThis, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_MoreLikeThis, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_MoreLikeThis, describeParams, METH_NOARGS),
            DECLARE_METHOD(t_MoreLikeThis, getAnalyzer, METH_NOARGS),
            DECLARE_METHOD(t_MoreLikeThis, getBoostFactor, METH_NOARGS),
            DECLARE_METHOD(t_MoreLikeThis, getFieldNames, METH_NOARGS),
            DECLARE_METHOD(t_MoreLikeThis, getMaxDocFreq, METH_NOARGS),
            DECLARE_METHOD(t_MoreLikeThis, getMaxNumTokensParsed, METH_NOARGS),
            DECLARE_METHOD(t_MoreLikeThis, getMaxQueryTerms, METH_NOARGS),
            DECLARE_METHOD(t_MoreLikeThis, getMaxWordLen, METH_NOARGS),
            DECLARE_METHOD(t_MoreLikeThis, getMinDocFreq, METH_NOARGS),
            DECLARE_METHOD(t_MoreLikeThis, getMinTermFreq, METH_NOARGS),
            DECLARE_METHOD(t_MoreLikeThis, getMinWordLen, METH_NOARGS),
            DECLARE_METHOD(t_MoreLikeThis, getSimilarity, METH_NOARGS),
            DECLARE_METHOD(t_MoreLikeThis, getStopWords, METH_NOARGS),
            DECLARE_METHOD(t_MoreLikeThis, isBoost, METH_NOARGS),
            DECLARE_METHOD(t_MoreLikeThis, like, METH_VARARGS),
            DECLARE_METHOD(t_MoreLikeThis, retrieveInterestingTerms, METH_VARARGS),
            DECLARE_METHOD(t_MoreLikeThis, setAnalyzer, METH_O),
            DECLARE_METHOD(t_MoreLikeThis, setBoost, METH_O),
            DECLARE_METHOD(t_MoreLikeThis, setBoostFactor, METH_O),
            DECLARE_METHOD(t_MoreLikeThis, setFieldNames, METH_O),
            DECLARE_METHOD(t_MoreLikeThis, setMaxDocFreq, METH_O),
            DECLARE_METHOD(t_MoreLikeThis, setMaxDocFreqPct, METH_O),
            DECLARE_METHOD(t_MoreLikeThis, setMaxNumTokensParsed, METH_O),
            DECLARE_METHOD(t_MoreLikeThis, setMaxQueryTerms, METH_O),
            DECLARE_METHOD(t_MoreLikeThis, setMaxWordLen, METH_O),
            DECLARE_METHOD(t_MoreLikeThis, setMinDocFreq, METH_O),
            DECLARE_METHOD(t_MoreLikeThis, setMinTermFreq, METH_O),
            DECLARE_METHOD(t_MoreLikeThis, setMinWordLen, METH_O),
            DECLARE_METHOD(t_MoreLikeThis, setSimilarity, METH_O),
            DECLARE_METHOD(t_MoreLikeThis, setStopWords, METH_O),
            { NULL, NULL, 0, NULL }
          };

          static PyType_Slot PY_TYPE_SLOTS(MoreLikeThis)[] = {
            { Py_tp_methods, t_MoreLikeThis__methods_ },
            { Py_tp_init, (void *) t_MoreLikeThis_init_ },
            { Py_tp_getset, t_MoreLikeThis__fields_ },
            { 0, NULL }
          };

          static PyType_Def *PY_TYPE_BASES(MoreLikeThis)[] = {
            &PY_TYPE_DEF(::java::lang::Object),
            NULL
          };

          DEFINE_TYPE(MoreLikeThis, t_MoreLikeThis, MoreLikeThis);

          void t_MoreLikeThis::install(PyObject *module)
          {
            installType(&PY_TYPE(MoreLikeThis), &PY_TYPE_DEF(MoreLikeThis), module, "MoreLikeThis", 0);
          }

          void t_MoreLikeThis::initialize(PyObject *module)
          {
            PyObject_SetAttrString((PyObject *) PY_TYPE(MoreLikeThis), "class_", make_descriptor(MoreLikeThis::initializeClass, 1));
            PyObject_SetAttrString((PyObject *) PY_TYPE(MoreLikeThis), "wrapfn_", make_descriptor(t_MoreLikeThis::wrap_jobject));
            PyObject_SetAttrString((PyObject *) PY_TYPE(MoreLikeThis), "boxfn_", make_descriptor(boxObject));
            env->getClass(MoreLikeThis::initializeClass);
            PyObject_SetAttrString((PyObject *) PY_TYPE(MoreLikeThis), "DEFAULT_BOOST", make_descriptor(MoreLikeThis::DEFAULT_BOOST));
            PyObject_SetAttrString((PyObject *) PY_TYPE(MoreLikeThis), "DEFAULT_FIELD_NAMES", make_descriptor(JArray<jstring>(MoreLikeThis::DEFAULT_FIELD_NAMES->this$).wrap()));
            PyObject_SetAttrString((PyObject *) PY_TYPE(MoreLikeThis), "DEFAULT_MAX_DOC_FREQ", make_descriptor(MoreLikeThis::DEFAULT_MAX_DOC_FREQ));
            PyObject_SetAttrString((PyObject *) PY_TYPE(MoreLikeThis), "DEFAULT_MAX_NUM_TOKENS_PARSED", make_descriptor(MoreLikeThis::DEFAULT_MAX_NUM_TOKENS_PARSED));
            PyObject_SetAttrString((PyObject *) PY_TYPE(MoreLikeThis), "DEFAULT_MAX_QUERY_TERMS", make_descriptor(MoreLikeThis::DEFAULT_MAX_QUERY_TERMS));
            PyObject_SetAttrString((PyObject *) PY_TYPE(MoreLikeThis), "DEFAULT_MAX_WORD_LENGTH", make_descriptor(MoreLikeThis::DEFAULT_MAX_WORD_LENGTH));
            PyObject_SetAttrString((PyObject *) PY_TYPE(MoreLikeThis), "DEFAULT_MIN_DOC_FREQ", make_descriptor(MoreLikeThis::DEFAULT_MIN_DOC_FREQ));
            PyObject_SetAttrString((PyObject *) PY_TYPE(MoreLikeThis), "DEFAULT_MIN_TERM_FREQ", make_descriptor(MoreLikeThis::DEFAULT_MIN_TERM_FREQ));
            PyObject_SetAttrString((PyObject *) PY_TYPE(MoreLikeThis), "DEFAULT_MIN_WORD_LENGTH", make_descriptor(MoreLikeThis::DEFAULT_MIN_WORD_LENGTH));
            PyObject_SetAttrString((PyObject *) PY_TYPE(MoreLikeThis), "DEFAULT_STOP_WORDS", make_descriptor(::java::util::t_Set::wrap_Object(*MoreLikeThis::DEFAULT_STOP_WORDS)));
          }

          static PyObject *t_MoreLikeThis_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, MoreLikeThis::initializeClass, 1)))
              return NULL;
            return t_MoreLikeThis::wrap_Object(MoreLikeThis(((t_MoreLikeThis *) arg)->object.this$));
          }
          static PyObject *t_MoreLikeThis_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, MoreLikeThis::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_MoreLikeThis_init_(t_MoreLikeThis *self, PyObject *args, PyObject *kwds)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 1:
              {
                ::org::apache::lucene::index::IndexReader a0((jobject) NULL);
                MoreLikeThis object((jobject) NULL);

                if (!parseArgs(args, "k", ::org::apache::lucene::index::IndexReader::initializeClass, &a0))
                {
                  INT_CALL(object = MoreLikeThis(a0));
                  self->object = object;
                  break;
                }
              }
              goto err;
             case 2:
              {
                ::org::apache::lucene::index::IndexReader a0((jobject) NULL);
                ::org::apache::lucene::search::similarities::TFIDFSimilarity a1((jobject) NULL);
                MoreLikeThis object((jobject) NULL);

                if (!parseArgs(args, "kk", ::org::apache::lucene::index::IndexReader::initializeClass, ::org::apache::lucene::search::similarities::TFIDFSimilarity::initializeClass, &a0, &a1))
                {
                  INT_CALL(object = MoreLikeThis(a0, a1));
                  self->object = object;
                  break;
                }
              }
             default:
             err:
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_MoreLikeThis_describeParams(t_MoreLikeThis *self)
          {
            ::java::lang::String result((jobject) NULL);
            OBJ_CALL(result = self->object.describeParams());
            return j2p(result);
          }

          static PyObject *t_MoreLikeThis_getAnalyzer(t_MoreLikeThis *self)
          {
            ::org::apache::lucene::analysis::Analyzer result((jobject) NULL);
            OBJ_CALL(result = self->object.getAnalyzer());
            return ::org::apache::lucene::analysis::t_Analyzer::wrap_Object(result);
          }

          static PyObject *t_MoreLikeThis_getBoostFactor(t_MoreLikeThis *self)
          {
            jfloat result;
            OBJ_CALL(result = self->object.getBoostFactor());
            return PyFloat_FromDouble((double) result);
          }

          static PyObject *t_MoreLikeThis_getFieldNames(t_MoreLikeThis *self)
          {
            JArray< ::java::lang::String > result((jobject) NULL);
            OBJ_CALL(result = self->object.getFieldNames());
            return JArray<jstring>(result.this$).wrap();
          }

          static PyObject *t_MoreLikeThis_getMaxDocFreq(t_MoreLikeThis *self)
          {
            jint result;
            OBJ_CALL(result = self->object.getMaxDocFreq());
            return PyLong_FromLong((long) result);
          }

          static PyObject *t_MoreLikeThis_getMaxNumTokensParsed(t_MoreLikeThis *self)
          {
            jint result;
            OBJ_CALL(result = self->object.getMaxNumTokensParsed());
            return PyLong_FromLong((long) result);
          }

          static PyObject *t_MoreLikeThis_getMaxQueryTerms(t_MoreLikeThis *self)
          {
            jint result;
            OBJ_CALL(result = self->object.getMaxQueryTerms());
            return PyLong_FromLong((long) result);
          }

          static PyObject *t_MoreLikeThis_getMaxWordLen(t_MoreLikeThis *self)
          {
            jint result;
            OBJ_CALL(result = self->object.getMaxWordLen());
            return PyLong_FromLong((long) result);
          }

          static PyObject *t_MoreLikeThis_getMinDocFreq(t_MoreLikeThis *self)
          {
            jint result;
            OBJ_CALL(result = self->object.getMinDocFreq());
            return PyLong_FromLong((long) result);
          }

          static PyObject *t_MoreLikeThis_getMinTermFreq(t_MoreLikeThis *self)
          {
            jint result;
            OBJ_CALL(result = self->object.getMinTermFreq());
            return PyLong_FromLong((long) result);
          }

          static PyObject *t_MoreLikeThis_getMinWordLen(t_MoreLikeThis *self)
          {
            jint result;
            OBJ_CALL(result = self->object.getMinWordLen());
            return PyLong_FromLong((long) result);
          }

          static PyObject *t_MoreLikeThis_getSimilarity(t_MoreLikeThis *self)
          {
            ::org::apache::lucene::search::similarities::TFIDFSimilarity result((jobject) NULL);
            OBJ_CALL(result = self->object.getSimilarity());
            return ::org::apache::lucene::search::similarities::t_TFIDFSimilarity::wrap_Object(result);
          }

          static PyObject *t_MoreLikeThis_getStopWords(t_MoreLikeThis *self)
          {
            ::java::util::Set result((jobject) NULL);
            OBJ_CALL(result = self->object.getStopWords());
            return ::java::util::t_Set::wrap_Object(result);
          }

          static PyObject *t_MoreLikeThis_isBoost(t_MoreLikeThis *self)
          {
            jboolean result;
            OBJ_CALL(result = self->object.isBoost());
            Py_RETURN_BOOL(result);
          }

          static PyObject *t_MoreLikeThis_like(t_MoreLikeThis *self, PyObject *args)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 1:
              {
                jint a0;
                ::org::apache::lucene::search::Query result((jobject) NULL);

                if (!parseArgs(args, "I", &a0))
                {
                  OBJ_CALL(result = self->object.like(a0));
                  return ::org::apache::lucene::search::t_Query::wrap_Object(result);
                }
              }
              {
                ::java::util::Map a0((jobject) NULL);
                PyTypeObject **p0;
                ::org::apache::lucene::search::Query result((jobject) NULL);

                if (!parseArgs(args, "K", ::java::util::Map::initializeClass, &a0, &p0, ::java::util::t_Map::parameters_))
                {
                  OBJ_CALL(result = self->object.like(a0));
                  return ::org::apache::lucene::search::t_Query::wrap_Object(result);
                }
              }
              break;
             case 2:
              {
                ::java::lang::String a0((jobject) NULL);
                JArray< ::java::io::Reader > a1((jobject) NULL);
                ::org::apache::lucene::search::Query result((jobject) NULL);

                if (!parseArgs(args, "s[k", ::java::io::Reader::initializeClass, &a0, &a1))
                {
                  OBJ_CALL(result = self->object.like(a0, a1));
                  return ::org::apache::lucene::search::t_Query::wrap_Object(result);
                }
              }
            }

            PyErr_SetArgsError((PyObject *) self, "like", args);
            return NULL;
          }

          static PyObject *t_MoreLikeThis_retrieveInterestingTerms(t_MoreLikeThis *self, PyObject *args)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 1:
              {
                jint a0;
                JArray< ::java::lang::String > result((jobject) NULL);

                if (!parseArgs(args, "I", &a0))
                {
                  OBJ_CALL(result = self->object.retrieveInterestingTerms(a0));
                  return JArray<jstring>(result.this$).wrap();
                }
              }
              break;
             case 2:
              {
                ::java::io::Reader a0((jobject) NULL);
                ::java::lang::String a1((jobject) NULL);
                JArray< ::java::lang::String > result((jobject) NULL);

                if (!parseArgs(args, "ks", ::java::io::Reader::initializeClass, &a0, &a1))
                {
                  OBJ_CALL(result = self->object.retrieveInterestingTerms(a0, a1));
                  return JArray<jstring>(result.this$).wrap();
                }
              }
            }

            PyErr_SetArgsError((PyObject *) self, "retrieveInterestingTerms", args);
            return NULL;
          }

          static PyObject *t_MoreLikeThis_setAnalyzer(t_MoreLikeThis *self, PyObject *arg)
          {
            ::org::apache::lucene::analysis::Analyzer a0((jobject) NULL);

            if (!parseArg(arg, "k", ::org::apache::lucene::analysis::Analyzer::initializeClass, &a0))
            {
              OBJ_CALL(self->object.setAnalyzer(a0));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError((PyObject *) self, "setAnalyzer", arg);
            return NULL;
          }

          static PyObject *t_MoreLikeThis_setBoost(t_MoreLikeThis *self, PyObject *arg)
          {
            jboolean a0;

            if (!parseArg(arg, "Z", &a0))
            {
              OBJ_CALL(self->object.setBoost(a0));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError((PyObject *) self, "setBoost", arg);
            return NULL;
          }

          static PyObject *t_MoreLikeThis_setBoostFactor(t_MoreLikeThis *self, PyObject *arg)
          {
            jfloat a0;

            if (!parseArg(arg, "F", &a0))
            {
              OBJ_CALL(self->object.setBoostFactor(a0));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError((PyObject *) self, "setBoostFactor", arg);
            return NULL;
          }

          static PyObject *t_MoreLikeThis_setFieldNames(t_MoreLikeThis *self, PyObject *arg)
          {
            JArray< ::java::lang::String > a0((jobject) NULL);

            if (!parseArg(arg, "[s", &a0))
            {
              OBJ_CALL(self->object.setFieldNames(a0));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError((PyObject *) self, "setFieldNames", arg);
            return NULL;
          }

          static PyObject *t_MoreLikeThis_setMaxDocFreq(t_MoreLikeThis *self, PyObject *arg)
          {
            jint a0;

            if (!parseArg(arg, "I", &a0))
            {
              OBJ_CALL(self->object.setMaxDocFreq(a0));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError((PyObject *) self, "setMaxDocFreq", arg);
            return NULL;
          }

          static PyObject *t_MoreLikeThis_setMaxDocFreqPct(t_MoreLikeThis *self, PyObject *arg)
          {
            jint a0;

            if (!parseArg(arg, "I", &a0))
            {
              OBJ_CALL(self->object.setMaxDocFreqPct(a0));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError((PyObject *) self, "setMaxDocFreqPct", arg);
            return NULL;
          }

          static PyObject *t_MoreLikeThis_setMaxNumTokensParsed(t_MoreLikeThis *self, PyObject *arg)
          {
            jint a0;

            if (!parseArg(arg, "I", &a0))
            {
              OBJ_CALL(self->object.setMaxNumTokensParsed(a0));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError((PyObject *) self, "setMaxNumTokensParsed", arg);
            return NULL;
          }

          static PyObject *t_MoreLikeThis_setMaxQueryTerms(t_MoreLikeThis *self, PyObject *arg)
          {
            jint a0;

            if (!parseArg(arg, "I", &a0))
            {
              OBJ_CALL(self->object.setMaxQueryTerms(a0));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError((PyObject *) self, "setMaxQueryTerms", arg);
            return NULL;
          }

          static PyObject *t_MoreLikeThis_setMaxWordLen(t_MoreLikeThis *self, PyObject *arg)
          {
            jint a0;

            if (!parseArg(arg, "I", &a0))
            {
              OBJ_CALL(self->object.setMaxWordLen(a0));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError((PyObject *) self, "setMaxWordLen", arg);
            return NULL;
          }

          static PyObject *t_MoreLikeThis_setMinDocFreq(t_MoreLikeThis *self, PyObject *arg)
          {
            jint a0;

            if (!parseArg(arg, "I", &a0))
            {
              OBJ_CALL(self->object.setMinDocFreq(a0));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError((PyObject *) self, "setMinDocFreq", arg);
            return NULL;
          }

          static PyObject *t_MoreLikeThis_setMinTermFreq(t_MoreLikeThis *self, PyObject *arg)
          {
            jint a0;

            if (!parseArg(arg, "I", &a0))
            {
              OBJ_CALL(self->object.setMinTermFreq(a0));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError((PyObject *) self, "setMinTermFreq", arg);
            return NULL;
          }

          static PyObject *t_MoreLikeThis_setMinWordLen(t_MoreLikeThis *self, PyObject *arg)
          {
            jint a0;

            if (!parseArg(arg, "I", &a0))
            {
              OBJ_CALL(self->object.setMinWordLen(a0));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError((PyObject *) self, "setMinWordLen", arg);
            return NULL;
          }

          static PyObject *t_MoreLikeThis_setSimilarity(t_MoreLikeThis *self, PyObject *arg)
          {
            ::org::apache::lucene::search::similarities::TFIDFSimilarity a0((jobject) NULL);

            if (!parseArg(arg, "k", ::org::apache::lucene::search::similarities::TFIDFSimilarity::initializeClass, &a0))
            {
              OBJ_CALL(self->object.setSimilarity(a0));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError((PyObject *) self, "setSimilarity", arg);
            return NULL;
          }

          static PyObject *t_MoreLikeThis_setStopWords(t_MoreLikeThis *self, PyObject *arg)
          {
            ::java::util::Set a0((jobject) NULL);
            PyTypeObject **p0;

            if (!parseArg(arg, "K", ::java::util::Set::initializeClass, &a0, &p0, ::java::util::t_Set::parameters_))
            {
              OBJ_CALL(self->object.setStopWords(a0));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError((PyObject *) self, "setStopWords", arg);
            return NULL;
          }

          static PyObject *t_MoreLikeThis_get__analyzer(t_MoreLikeThis *self, void *data)
          {
            ::org::apache::lucene::analysis::Analyzer value((jobject) NULL);
            OBJ_CALL(value = self->object.getAnalyzer());
            return ::org::apache::lucene::analysis::t_Analyzer::wrap_Object(value);
          }
          static int t_MoreLikeThis_set__analyzer(t_MoreLikeThis *self, PyObject *arg, void *data)
          {
            {
              ::org::apache::lucene::analysis::Analyzer value((jobject) NULL);
              if (!parseArg(arg, "k", ::org::apache::lucene::analysis::Analyzer::initializeClass, &value))
              {
                INT_CALL(self->object.setAnalyzer(value));
                return 0;
              }
            }
            PyErr_SetArgsError((PyObject *) self, "analyzer", arg);
            return -1;
          }

          static PyObject *t_MoreLikeThis_get__boost(t_MoreLikeThis *self, void *data)
          {
            jboolean value;
            OBJ_CALL(value = self->object.isBoost());
            Py_RETURN_BOOL(value);
          }
          static int t_MoreLikeThis_set__boost(t_MoreLikeThis *self, PyObject *arg, void *data)
          {
            {
              jboolean value;
              if (!parseArg(arg, "Z", &value))
              {
                INT_CALL(self->object.setBoost(value));
                return 0;
              }
            }
            PyErr_SetArgsError((PyObject *) self, "boost", arg);
            return -1;
          }

          static PyObject *t_MoreLikeThis_get__boostFactor(t_MoreLikeThis *self, void *data)
          {
            jfloat value;
            OBJ_CALL(value = self->object.getBoostFactor());
            return PyFloat_FromDouble((double) value);
          }
          static int t_MoreLikeThis_set__boostFactor(t_MoreLikeThis *self, PyObject *arg, void *data)
          {
            {
              jfloat value;
              if (!parseArg(arg, "F", &value))
              {
                INT_CALL(self->object.setBoostFactor(value));
                return 0;
              }
            }
            PyErr_SetArgsError((PyObject *) self, "boostFactor", arg);
            return -1;
          }

          static PyObject *t_MoreLikeThis_get__fieldNames(t_MoreLikeThis *self, void *data)
          {
            JArray< ::java::lang::String > value((jobject) NULL);
            OBJ_CALL(value = self->object.getFieldNames());
            return JArray<jstring>(value.this$).wrap();
          }
          static int t_MoreLikeThis_set__fieldNames(t_MoreLikeThis *self, PyObject *arg, void *data)
          {
            {
              JArray< ::java::lang::String > value((jobject) NULL);
              if (!parseArg(arg, "[s", &value))
              {
                INT_CALL(self->object.setFieldNames(value));
                return 0;
              }
            }
            PyErr_SetArgsError((PyObject *) self, "fieldNames", arg);
            return -1;
          }

          static PyObject *t_MoreLikeThis_get__maxDocFreq(t_MoreLikeThis *self, void *data)
          {
            jint value;
            OBJ_CALL(value = self->object.getMaxDocFreq());
            return PyLong_FromLong((long) value);
          }
          static int t_MoreLikeThis_set__maxDocFreq(t_MoreLikeThis *self, PyObject *arg, void *data)
          {
            {
              jint value;
              if (!parseArg(arg, "I", &value))
              {
                INT_CALL(self->object.setMaxDocFreq(value));
                return 0;
              }
            }
            PyErr_SetArgsError((PyObject *) self, "maxDocFreq", arg);
            return -1;
          }

          static int t_MoreLikeThis_set__maxDocFreqPct(t_MoreLikeThis *self, PyObject *arg, void *data)
          {
            {
              jint value;
              if (!parseArg(arg, "I", &value))
              {
                INT_CALL(self->object.setMaxDocFreqPct(value));
                return 0;
              }
            }
            PyErr_SetArgsError((PyObject *) self, "maxDocFreqPct", arg);
            return -1;
          }

          static PyObject *t_MoreLikeThis_get__maxNumTokensParsed(t_MoreLikeThis *self, void *data)
          {
            jint value;
            OBJ_CALL(value = self->object.getMaxNumTokensParsed());
            return PyLong_FromLong((long) value);
          }
          static int t_MoreLikeThis_set__maxNumTokensParsed(t_MoreLikeThis *self, PyObject *arg, void *data)
          {
            {
              jint value;
              if (!parseArg(arg, "I", &value))
              {
                INT_CALL(self->object.setMaxNumTokensParsed(value));
                return 0;
              }
            }
            PyErr_SetArgsError((PyObject *) self, "maxNumTokensParsed", arg);
            return -1;
          }

          static PyObject *t_MoreLikeThis_get__maxQueryTerms(t_MoreLikeThis *self, void *data)
          {
            jint value;
            OBJ_CALL(value = self->object.getMaxQueryTerms());
            return PyLong_FromLong((long) value);
          }
          static int t_MoreLikeThis_set__maxQueryTerms(t_MoreLikeThis *self, PyObject *arg, void *data)
          {
            {
              jint value;
              if (!parseArg(arg, "I", &value))
              {
                INT_CALL(self->object.setMaxQueryTerms(value));
                return 0;
              }
            }
            PyErr_SetArgsError((PyObject *) self, "maxQueryTerms", arg);
            return -1;
          }

          static PyObject *t_MoreLikeThis_get__maxWordLen(t_MoreLikeThis *self, void *data)
          {
            jint value;
            OBJ_CALL(value = self->object.getMaxWordLen());
            return PyLong_FromLong((long) value);
          }
          static int t_MoreLikeThis_set__maxWordLen(t_MoreLikeThis *self, PyObject *arg, void *data)
          {
            {
              jint value;
              if (!parseArg(arg, "I", &value))
              {
                INT_CALL(self->object.setMaxWordLen(value));
                return 0;
              }
            }
            PyErr_SetArgsError((PyObject *) self, "maxWordLen", arg);
            return -1;
          }

          static PyObject *t_MoreLikeThis_get__minDocFreq(t_MoreLikeThis *self, void *data)
          {
            jint value;
            OBJ_CALL(value = self->object.getMinDocFreq());
            return PyLong_FromLong((long) value);
          }
          static int t_MoreLikeThis_set__minDocFreq(t_MoreLikeThis *self, PyObject *arg, void *data)
          {
            {
              jint value;
              if (!parseArg(arg, "I", &value))
              {
                INT_CALL(self->object.setMinDocFreq(value));
                return 0;
              }
            }
            PyErr_SetArgsError((PyObject *) self, "minDocFreq", arg);
            return -1;
          }

          static PyObject *t_MoreLikeThis_get__minTermFreq(t_MoreLikeThis *self, void *data)
          {
            jint value;
            OBJ_CALL(value = self->object.getMinTermFreq());
            return PyLong_FromLong((long) value);
          }
          static int t_MoreLikeThis_set__minTermFreq(t_MoreLikeThis *self, PyObject *arg, void *data)
          {
            {
              jint value;
              if (!parseArg(arg, "I", &value))
              {
                INT_CALL(self->object.setMinTermFreq(value));
                return 0;
              }
            }
            PyErr_SetArgsError((PyObject *) self, "minTermFreq", arg);
            return -1;
          }

          static PyObject *t_MoreLikeThis_get__minWordLen(t_MoreLikeThis *self, void *data)
          {
            jint value;
            OBJ_CALL(value = self->object.getMinWordLen());
            return PyLong_FromLong((long) value);
          }
          static int t_MoreLikeThis_set__minWordLen(t_MoreLikeThis *self, PyObject *arg, void *data)
          {
            {
              jint value;
              if (!parseArg(arg, "I", &value))
              {
                INT_CALL(self->object.setMinWordLen(value));
                return 0;
              }
            }
            PyErr_SetArgsError((PyObject *) self, "minWordLen", arg);
            return -1;
          }

          static PyObject *t_MoreLikeThis_get__similarity(t_MoreLikeThis *self, void *data)
          {
            ::org::apache::lucene::search::similarities::TFIDFSimilarity value((jobject) NULL);
            OBJ_CALL(value = self->object.getSimilarity());
            return ::org::apache::lucene::search::similarities::t_TFIDFSimilarity::wrap_Object(value);
          }
          static int t_MoreLikeThis_set__similarity(t_MoreLikeThis *self, PyObject *arg, void *data)
          {
            {
              ::org::apache::lucene::search::similarities::TFIDFSimilarity value((jobject) NULL);
              if (!parseArg(arg, "k", ::org::apache::lucene::search::similarities::TFIDFSimilarity::initializeClass, &value))
              {
                INT_CALL(self->object.setSimilarity(value));
                return 0;
              }
            }
            PyErr_SetArgsError((PyObject *) self, "similarity", arg);
            return -1;
          }

          static PyObject *t_MoreLikeThis_get__stopWords(t_MoreLikeThis *self, void *data)
          {
            ::java::util::Set value((jobject) NULL);
            OBJ_CALL(value = self->object.getStopWords());
            return ::java::util::t_Set::wrap_Object(value);
          }
          static int t_MoreLikeThis_set__stopWords(t_MoreLikeThis *self, PyObject *arg, void *data)
          {
            {
              ::java::util::Set value((jobject) NULL);
              if (!parseArg(arg, "k", ::java::util::Set::initializeClass, &value))
              {
                INT_CALL(self->object.setStopWords(value));
                return 0;
              }
            }
            PyErr_SetArgsError((PyObject *) self, "stopWords", arg);
            return -1;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/index/FieldInvertState.h"
#include "org/apache/lucene/index/IndexOptions.h"
#include "java/lang/String.h"
#include "org/apache/lucene/util/AttributeSource.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {

        ::java::lang::Class *FieldInvertState::class$ = NULL;
        jmethodID *FieldInvertState::mids$ = NULL;
        bool FieldInvertState::live$ = false;

        jclass FieldInvertState::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/index/FieldInvertState");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_fee80ae991552074] = env->getMethodID(cls, "<init>", "(ILjava/lang/String;Lorg/apache/lucene/index/IndexOptions;)V");
            mids$[mid_init$_f51a33d28e843f25] = env->getMethodID(cls, "<init>", "(ILjava/lang/String;Lorg/apache/lucene/index/IndexOptions;IIIIII)V");
            mids$[mid_getAttributeSource_8fce18d62d0e145e] = env->getMethodID(cls, "getAttributeSource", "()Lorg/apache/lucene/util/AttributeSource;");
            mids$[mid_getIndexCreatedVersionMajor_9972fcc56b44e79d] = env->getMethodID(cls, "getIndexCreatedVersionMajor", "()I");
            mids$[mid_getIndexOptions_0d28536417711dd9] = env->getMethodID(cls, "getIndexOptions", "()Lorg/apache/lucene/index/IndexOptions;");
            mids$[mid_getLength_9972fcc56b44e79d] = env->getMethodID(cls, "getLength", "()I");
            mids$[mid_getMaxTermFrequency_9972fcc56b44e79d] = env->getMethodID(cls, "getMaxTermFrequency", "()I");
            mids$[mid_getName_db9b55ba01e03e4b] = env->getMethodID(cls, "getName", "()Ljava/lang/String;");
            mids$[mid_getNumOverlap_9972fcc56b44e79d] = env->getMethodID(cls, "getNumOverlap", "()I");
            mids$[mid_getOffset_9972fcc56b44e79d] = env->getMethodID(cls, "getOffset", "()I");
            mids$[mid_getPosition_9972fcc56b44e79d] = env->getMethodID(cls, "getPosition", "()I");
            mids$[mid_getUniqueTermCount_9972fcc56b44e79d] = env->getMethodID(cls, "getUniqueTermCount", "()I");
            mids$[mid_setLength_040c4cd0390c5aff] = env->getMethodID(cls, "setLength", "(I)V");
            mids$[mid_setNumOverlap_040c4cd0390c5aff] = env->getMethodID(cls, "setNumOverlap", "(I)V");

            class$ = new ::java::lang::Class(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        FieldInvertState::FieldInvertState(jint a0, const ::java::lang::String & a1, const ::org::apache::lucene::index::IndexOptions & a2) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_fee80ae991552074, a0, a1.this$, a2.this$)) {}

        FieldInvertState::FieldInvertState(jint a0, const ::java::lang::String & a1, const ::org::apache::lucene::index::IndexOptions & a2, jint a3, jint a4, jint a5, jint a6, jint a7, jint a8) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_f51a33d28e843f25, a0, a1.this$, a2.this$, a3, a4, a5, a6, a7, a8)) {}

        ::org::apache::lucene::util::AttributeSource FieldInvertState::getAttributeSource() const
        {
          return ::org::apache::lucene::util::AttributeSource(env->callObjectMethod(this$, mids$[mid_getAttributeSource_8fce18d62d0e145e]));
        }

        jint FieldInvertState::getIndexCreatedVersionMajor() const
        {
          return env->callIntMethod(this$, mids$[mid_getIndexCreatedVersionMajor_9972fcc56b44e79d]);
        }

        ::org::apache::lucene::index::IndexOptions FieldInvertState::getIndexOptions() const
        {
          return ::org::apache::lucene::index::IndexOptions(env->callObjectMethod(this$, mids$[mid_getIndexOptions_0d28536417711dd9]));
        }

        jint FieldInvertState::getLength() const
        {
          return env->callIntMethod(this$, mids$[mid_getLength_9972fcc56b44e79d]);
        }

        jint FieldInvertState::getMaxTermFrequency() const
        {
          return env->callIntMethod(this$, mids$[mid_getMaxTermFrequency_9972fcc56b44e79d]);
        }

        ::java::lang::String FieldInvertState::getName() const
        {
          return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_getName_db9b55ba01e03e4b]));
        }

        jint FieldInvertState::getNumOverlap() const
        {
          return env->callIntMethod(this$, mids$[mid_getNumOverlap_9972fcc56b44e79d]);
        }

        jint FieldInvertState::getOffset() const
        {
          return env->callIntMethod(this$, mids$[mid_getOffset_9972fcc56b44e79d]);
        }

        jint FieldInvertState::getPosition() const
        {
          return env->callIntMethod(this$, mids$[mid_getPosition_9972fcc56b44e79d]);
        }

        jint FieldInvertState::getUniqueTermCount() const
        {
          return env->callIntMethod(this$, mids$[mid_getUniqueTermCount_9972fcc56b44e79d]);
        }

        void FieldInvertState::setLength(jint a0) const
        {
          env->callVoidMethod(this$, mids$[mid_setLength_040c4cd0390c5aff], a0);
        }

        void FieldInvertState::setNumOverlap(jint a0) const
        {
          env->callVoidMethod(this$, mids$[mid_setNumOverlap_040c4cd0390c5aff], a0);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {
        static PyObject *t_FieldInvertState_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_FieldInvertState_instance_(PyTypeObject *type, PyObject *arg);
        static int t_FieldInvertState_init_(t_FieldInvertState *self, PyObject *args, PyObject *kwds);
        static PyObject *t_FieldInvertState_getAttributeSource(t_FieldInvertState *self);
        static PyObject *t_FieldInvertState_getIndexCreatedVersionMajor(t_FieldInvertState *self);
        static PyObject *t_FieldInvertState_getIndexOptions(t_FieldInvertState *self);
        static PyObject *t_FieldInvertState_getLength(t_FieldInvertState *self);
        static PyObject *t_FieldInvertState_getMaxTermFrequency(t_FieldInvertState *self);
        static PyObject *t_FieldInvertState_getName(t_FieldInvertState *self);
        static PyObject *t_FieldInvertState_getNumOverlap(t_FieldInvertState *self);
        static PyObject *t_FieldInvertState_getOffset(t_FieldInvertState *self);
        static PyObject *t_FieldInvertState_getPosition(t_FieldInvertState *self);
        static PyObject *t_FieldInvertState_getUniqueTermCount(t_FieldInvertState *self);
        static PyObject *t_FieldInvertState_setLength(t_FieldInvertState *self, PyObject *arg);
        static PyObject *t_FieldInvertState_setNumOverlap(t_FieldInvertState *self, PyObject *arg);
        static PyObject *t_FieldInvertState_get__attributeSource(t_FieldInvertState *self, void *data);
        static PyObject *t_FieldInvertState_get__indexCreatedVersionMajor(t_FieldInvertState *self, void *data);
        static PyObject *t_FieldInvertState_get__indexOptions(t_FieldInvertState *self, void *data);
        static PyObject *t_FieldInvertState_get__length(t_FieldInvertState *self, void *data);
        static int t_FieldInvertState_set__length(t_FieldInvertState *self, PyObject *arg, void *data);
        static PyObject *t_FieldInvertState_get__maxTermFrequency(t_FieldInvertState *self, void *data);
        static PyObject *t_FieldInvertState_get__name(t_FieldInvertState *self, void *data);
        static PyObject *t_FieldInvertState_get__numOverlap(t_FieldInvertState *self, void *data);
        static int t_FieldInvertState_set__numOverlap(t_FieldInvertState *self, PyObject *arg, void *data);
        static PyObject *t_FieldInvertState_get__offset(t_FieldInvertState *self, void *data);
        static PyObject *t_FieldInvertState_get__position(t_FieldInvertState *self, void *data);
        static PyObject *t_FieldInvertState_get__uniqueTermCount(t_FieldInvertState *self, void *data);
        static PyGetSetDef t_FieldInvertState__fields_[] = {
          DECLARE_GET_FIELD(t_FieldInvertState, attributeSource),
          DECLARE_GET_FIELD(t_FieldInvertState, indexCreatedVersionMajor),
          DECLARE_GET_FIELD(t_FieldInvertState, indexOptions),
          DECLARE_GETSET_FIELD(t_FieldInvertState, length),
          DECLARE_GET_FIELD(t_FieldInvertState, maxTermFrequency),
          DECLARE_GET_FIELD(t_FieldInvertState, name),
          DECLARE_GETSET_FIELD(t_FieldInvertState, numOverlap),
          DECLARE_GET_FIELD(t_FieldInvertState, offset),
          DECLARE_GET_FIELD(t_FieldInvertState, position),
          DECLARE_GET_FIELD(t_FieldInvertState, uniqueTermCount),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_FieldInvertState__methods_[] = {
          DECLARE_METHOD(t_FieldInvertState, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_FieldInvertState, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_FieldInvertState, getAttributeSource, METH_NOARGS),
          DECLARE_METHOD(t_FieldInvertState, getIndexCreatedVersionMajor, METH_NOARGS),
          DECLARE_METHOD(t_FieldInvertState, getIndexOptions, METH_NOARGS),
          DECLARE_METHOD(t_FieldInvertState, getLength, METH_NOARGS),
          DECLARE_METHOD(t_FieldInvertState, getMaxTermFrequency, METH_NOARGS),
          DECLARE_METHOD(t_FieldInvertState, getName, METH_NOARGS),
          DECLARE_METHOD(t_FieldInvertState, getNumOverlap, METH_NOARGS),
          DECLARE_METHOD(t_FieldInvertState, getOffset, METH_NOARGS),
          DECLARE_METHOD(t_FieldInvertState, getPosition, METH_NOARGS),
          DECLARE_METHOD(t_FieldInvertState, getUniqueTermCount, METH_NOARGS),
          DECLARE_METHOD(t_FieldInvertState, setLength, METH_O),
          DECLARE_METHOD(t_FieldInvertState, setNumOverlap, METH_O),
          { NULL, NULL, 0, NULL }
        };

        static PyType_Slot PY_TYPE_SLOTS(FieldInvertState)[] = {
          { Py_tp_methods, t_FieldInvertState__methods_ },
          { Py_tp_init, (void *) t_FieldInvertState_init_ },
          { Py_tp_getset, t_FieldInvertState__fields_ },
          { 0, NULL }
        };

        static PyType_Def *PY_TYPE_BASES(FieldInvertState)[] = {
          &PY_TYPE_DEF(::java::lang::Object),
          NULL
        };

        DEFINE_TYPE(FieldInvertState, t_FieldInvertState, FieldInvertState);

        void t_FieldInvertState::install(PyObject *module)
        {
          installType(&PY_TYPE(FieldInvertState), &PY_TYPE_DEF(FieldInvertState), module, "FieldInvertState", 0);
        }

        void t_FieldInvertState::initialize(PyObject *module)
        {
          PyObject_SetAttrString((PyObject *) PY_TYPE(FieldInvertState), "class_", make_descriptor(FieldInvertState::initializeClass, 1));
          PyObject_SetAttrString((PyObject *) PY_TYPE(FieldInvertState), "wrapfn_", make_descriptor(t_FieldInvertState::wrap_jobject));
          PyObject_SetAttrString((PyObject *) PY_TYPE(FieldInvertState), "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_FieldInvertState_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, FieldInvertState::initializeClass, 1)))
            return NULL;
          return t_FieldInvertState::wrap_Object(FieldInvertState(((t_FieldInvertState *) arg)->object.this$));
        }
        static PyObject *t_FieldInvertState_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, FieldInvertState::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_FieldInvertState_init_(t_FieldInvertState *self, PyObject *args, PyObject *kwds)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 3:
            {
              jint a0;
              ::java::lang::String a1((jobject) NULL);
              ::org::apache::lucene::index::IndexOptions a2((jobject) NULL);
              PyTypeObject **p2;
              FieldInvertState object((jobject) NULL);

              if (!parseArgs(args, "IsK", ::org::apache::lucene::index::IndexOptions::initializeClass, &a0, &a1, &a2, &p2, ::org::apache::lucene::index::t_IndexOptions::parameters_))
              {
                INT_CALL(object = FieldInvertState(a0, a1, a2));
                self->object = object;
                break;
              }
            }
            goto err;
           case 9:
            {
              jint a0;
              ::java::lang::String a1((jobject) NULL);
              ::org::apache::lucene::index::IndexOptions a2((jobject) NULL);
              PyTypeObject **p2;
              jint a3;
              jint a4;
              jint a5;
              jint a6;
              jint a7;
              jint a8;
              FieldInvertState object((jobject) NULL);

              if (!parseArgs(args, "IsKIIIIII", ::org::apache::lucene::index::IndexOptions::initializeClass, &a0, &a1, &a2, &p2, ::org::apache::lucene::index::t_IndexOptions::parameters_, &a3, &a4, &a5, &a6, &a7, &a8))
              {
                INT_CALL(object = FieldInvertState(a0, a1, a2, a3, a4, a5, a6, a7, a8));
                self->object = object;
                break;
              }
            }
           default:
           err:
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }

        static PyObject *t_FieldInvertState_getAttributeSource(t_FieldInvertState *self)
        {
          ::org::apache::lucene::util::AttributeSource result((jobject) NULL);
          OBJ_CALL(result = self->object.getAttributeSource());
          return ::org::apache::lucene::util::t_AttributeSource::wrap_Object(result);
        }

        static PyObject *t_FieldInvertState_getIndexCreatedVersionMajor(t_FieldInvertState *self)
        {
          jint result;
          OBJ_CALL(result = self->object.getIndexCreatedVersionMajor());
          return PyLong_FromLong((long) result);
        }

        static PyObject *t_FieldInvertState_getIndexOptions(t_FieldInvertState *self)
        {
          ::org::apache::lucene::index::IndexOptions result((jobject) NULL);
          OBJ_CALL(result = self->object.getIndexOptions());
          return ::org::apache::lucene::index::t_IndexOptions::wrap_Object(result);
        }

        static PyObject *t_FieldInvertState_getLength(t_FieldInvertState *self)
        {
          jint result;
          OBJ_CALL(result = self->object.getLength());
          return PyLong_FromLong((long) result);
        }

        static PyObject *t_FieldInvertState_getMaxTermFrequency(t_FieldInvertState *self)
        {
          jint result;
          OBJ_CALL(result = self->object.getMaxTermFrequency());
          return PyLong_FromLong((long) result);
        }

        static PyObject *t_FieldInvertState_getName(t_FieldInvertState *self)
        {
          ::java::lang::String result((jobject) NULL);
          OBJ_CALL(result = self->object.getName());
          return j2p(result);
        }

        static PyObject *t_FieldInvertState_getNumOverlap(t_FieldInvertState *self)
        {
          jint result;
          OBJ_CALL(result = self->object.getNumOverlap());
          return PyLong_FromLong((long) result);
        }

        static PyObject *t_FieldInvertState_getOffset(t_FieldInvertState *self)
        {
          jint result;
          OBJ_CALL(result = self->object.getOffset());
          return PyLong_FromLong((long) result);
        }

        static PyObject *t_FieldInvertState_getPosition(t_FieldInvertState *self)
        {
          jint result;
          OBJ_CALL(result = self->object.getPosition());
          return PyLong_FromLong((long) result);
        }

        static PyObject *t_FieldInvertState_getUniqueTermCount(t_FieldInvertState *self)
        {
          jint result;
          OBJ_CALL(result = self->object.getUniqueTermCount());
          return PyLong_FromLong((long) result);
        }

        static PyObject *t_FieldInvertState_setLength(t_FieldInvertState *self, PyObject *arg)
        {
          jint a0;

          if (!parseArg(arg, "I", &a0))
          {
            OBJ_CALL(self->object.setLength(a0));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "setLength", arg);
          return NULL;
        }

        static PyObject *t_FieldInvertState_setNumOverlap(t_FieldInvertState *self, PyObject *arg)
        {
          jint a0;

          if (!parseArg(arg, "I", &a0))
          {
            OBJ_CALL(self->object.setNumOverlap(a0));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "setNumOverlap", arg);
          return NULL;
        }

        static PyObject *t_FieldInvertState_get__attributeSource(t_FieldInvertState *self, void *data)
        {
          ::org::apache::lucene::util::AttributeSource value((jobject) NULL);
          OBJ_CALL(value = self->object.getAttributeSource());
          return ::org::apache::lucene::util::t_AttributeSource::wrap_Object(value);
        }

        static PyObject *t_FieldInvertState_get__indexCreatedVersionMajor(t_FieldInvertState *self, void *data)
        {
          jint value;
          OBJ_CALL(value = self->object.getIndexCreatedVersionMajor());
          return PyLong_FromLong((long) value);
        }

        static PyObject *t_FieldInvertState_get__indexOptions(t_FieldInvertState *self, void *data)
        {
          ::org::apache::lucene::index::IndexOptions value((jobject) NULL);
          OBJ_CALL(value = self->object.getIndexOptions());
          return ::org::apache::lucene::index::t_IndexOptions::wrap_Object(value);
        }

        static PyObject *t_FieldInvertState_get__length(t_FieldInvertState *self, void *data)
        {
          jint value;
          OBJ_CALL(value = self->object.getLength());
          return PyLong_FromLong((long) value);
        }
        static int t_FieldInvertState_set__length(t_FieldInvertState *self, PyObject *arg, void *data)
        {
          {
            jint value;
            if (!parseArg(arg, "I", &value))
            {
              INT_CALL(self->object.setLength(value));
              return 0;
            }
          }
          PyErr_SetArgsError((PyObject *) self, "length", arg);
          return -1;
        }

        static PyObject *t_FieldInvertState_get__maxTermFrequency(t_FieldInvertState *self, void *data)
        {
          jint value;
          OBJ_CALL(value = self->object.getMaxTermFrequency());
          return PyLong_FromLong((long) value);
        }

        static PyObject *t_FieldInvertState_get__name(t_FieldInvertState *self, void *data)
        {
          ::java::lang::String value((jobject) NULL);
          OBJ_CALL(value = self->object.getName());
          return j2p(value);
        }

        static PyObject *t_FieldInvertState_get__numOverlap(t_FieldInvertState *self, void *data)
        {
          jint value;
          OBJ_CALL(value = self->object.getNumOverlap());
          return PyLong_FromLong((long) value);
        }
        static int t_FieldInvertState_set__numOverlap(t_FieldInvertState *self, PyObject *arg, void *data)
        {
          {
            jint value;
            if (!parseArg(arg, "I", &value))
            {
              INT_CALL(self->object.setNumOverlap(value));
              return 0;
            }
          }
          PyErr_SetArgsError((PyObject *) self, "numOverlap", arg);
          return -1;
        }

        static PyObject *t_FieldInvertState_get__offset(t_FieldInvertState *self, void *data)
        {
          jint value;
          OBJ_CALL(value = self->object.getOffset());
          return PyLong_FromLong((long) value);
        }

        static PyObject *t_FieldInvertState_get__position(t_FieldInvertState *self, void *data)
        {
          jint value;
          OBJ_CALL(value = self->object.getPosition());
          return PyLong_FromLong((long) value);
        }

        static PyObject *t_FieldInvertState_get__uniqueTermCount(t_FieldInvertState *self, void *data)
        {
          jint value;
          OBJ_CALL(value = self->object.getUniqueTermCount());
          return PyLong_FromLong((long) value);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/util/OfflineSorter$ByteSequencesWriter.h"
#include "org/apache/lucene/store/IndexOutput.h"
#include "java/lang/Class.h"
#include "java/io/Closeable.h"
#include "org/apache/lucene/util/BytesRef.h"
#include "java/io/IOException.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {

        ::java::lang::Class *OfflineSorter$ByteSequencesWriter::class$ = NULL;
        jmethodID *OfflineSorter$ByteSequencesWriter::mids$ = NULL;
        bool OfflineSorter$ByteSequencesWriter::live$ = false;

        jclass OfflineSorter$ByteSequencesWriter::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/util/OfflineSorter$ByteSequencesWriter");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_c832dc158b3caad3] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/store/IndexOutput;)V");
            mids$[mid_close_f2cc1bce94666404] = env->getMethodID(cls, "close", "()V");
            mids$[mid_write_9ffdf271836656c4] = env->getMethodID(cls, "write", "([B)V");
            mids$[mid_write_0bdfd2603b7490a8] = env->getMethodID(cls, "write", "(Lorg/apache/lucene/util/BytesRef;)V");
            mids$[mid_write_43fdd39c09bb2fad] = env->getMethodID(cls, "write", "([BII)V");

            class$ = new ::java::lang::Class(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        OfflineSorter$ByteSequencesWriter::OfflineSorter$ByteSequencesWriter(const ::org::apache::lucene::store::IndexOutput & a0) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_c832dc158b3caad3, a0.this$)) {}

        void OfflineSorter$ByteSequencesWriter::close() const
        {
          env->callVoidMethod(this$, mids$[mid_close_f2cc1bce94666404]);
        }

        void OfflineSorter$ByteSequencesWriter::write(const JArray< jbyte > & a0) const
        {
          env->callVoidMethod(this$, mids$[mid_write_9ffdf271836656c4], a0.this$);
        }

        void OfflineSorter$ByteSequencesWriter::write(const ::org::apache::lucene::util::BytesRef & a0) const
        {
          env->callVoidMethod(this$, mids$[mid_write_0bdfd2603b7490a8], a0.this$);
        }

        void OfflineSorter$ByteSequencesWriter::write(const JArray< jbyte > & a0, jint a1, jint a2) const
        {
          env->callVoidMethod(this$, mids$[mid_write_43fdd39c09bb2fad], a0.this$, a1, a2);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        static PyObject *t_OfflineSorter$ByteSequencesWriter_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_OfflineSorter$ByteSequencesWriter_instance_(PyTypeObject *type, PyObject *arg);
        static int t_OfflineSorter$ByteSequencesWriter_init_(t_OfflineSorter$ByteSequencesWriter *self, PyObject *args, PyObject *kwds);
        static PyObject *t_OfflineSorter$ByteSequencesWriter_close(t_OfflineSorter$ByteSequencesWriter *self);
        static PyObject *t_OfflineSorter$ByteSequencesWriter_write(t_OfflineSorter$ByteSequencesWriter *self, PyObject *args);

        static PyMethodDef t_OfflineSorter$ByteSequencesWriter__methods_[] = {
          DECLARE_METHOD(t_OfflineSorter$ByteSequencesWriter, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_OfflineSorter$ByteSequencesWriter, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_OfflineSorter$ByteSequencesWriter, close, METH_NOARGS),
          DECLARE_METHOD(t_OfflineSorter$ByteSequencesWriter, write, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        static PyType_Slot PY_TYPE_SLOTS(OfflineSorter$ByteSequencesWriter)[] = {
          { Py_tp_methods, t_OfflineSorter$ByteSequencesWriter__methods_ },
          { Py_tp_init, (void *) t_OfflineSorter$ByteSequencesWriter_init_ },
          { 0, NULL }
        };

        static PyType_Def *PY_TYPE_BASES(OfflineSorter$ByteSequencesWriter)[] = {
          &PY_TYPE_DEF(::java::lang::Object),
          NULL
        };

        DEFINE_TYPE(OfflineSorter$ByteSequencesWriter, t_OfflineSorter$ByteSequencesWriter, OfflineSorter$ByteSequencesWriter);

        void t_OfflineSorter$ByteSequencesWriter::install(PyObject *module)
        {
          installType(&PY_TYPE(OfflineSorter$ByteSequencesWriter), &PY_TYPE_DEF(OfflineSorter$ByteSequencesWriter), module, "OfflineSorter$ByteSequencesWriter", 0);
        }

        void t_OfflineSorter$ByteSequencesWriter::initialize(PyObject *module)
        {
          PyObject_SetAttrString((PyObject *) PY_TYPE(OfflineSorter$ByteSequencesWriter), "class_", make_descriptor(OfflineSorter$ByteSequencesWriter::initializeClass, 1));
          PyObject_SetAttrString((PyObject *) PY_TYPE(OfflineSorter$ByteSequencesWriter), "wrapfn_", make_descriptor(t_OfflineSorter$ByteSequencesWriter::wrap_jobject));
          PyObject_SetAttrString((PyObject *) PY_TYPE(OfflineSorter$ByteSequencesWriter), "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_OfflineSorter$ByteSequencesWriter_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, OfflineSorter$ByteSequencesWriter::initializeClass, 1)))
            return NULL;
          return t_OfflineSorter$ByteSequencesWriter::wrap_Object(OfflineSorter$ByteSequencesWriter(((t_OfflineSorter$ByteSequencesWriter *) arg)->object.this$));
        }
        static PyObject *t_OfflineSorter$ByteSequencesWriter_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, OfflineSorter$ByteSequencesWriter::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_OfflineSorter$ByteSequencesWriter_init_(t_OfflineSorter$ByteSequencesWriter *self, PyObject *args, PyObject *kwds)
        {
          ::org::apache::lucene::store::IndexOutput a0((jobject) NULL);
          OfflineSorter$ByteSequencesWriter object((jobject) NULL);

          if (!parseArgs(args, "k", ::org::apache::lucene::store::IndexOutput::initializeClass, &a0))
          {
            INT_CALL(object = OfflineSorter$ByteSequencesWriter(a0));
            self->object = object;
          }
          else
          {
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }

        static PyObject *t_OfflineSorter$ByteSequencesWriter_close(t_OfflineSorter$ByteSequencesWriter *self)
        {
          OBJ_CALL(self->object.close());
          Py_RETURN_NONE;
        }

        static PyObject *t_OfflineSorter$ByteSequencesWriter_write(t_OfflineSorter$ByteSequencesWriter *self, PyObject *args)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 1:
            {
              JArray< jbyte > a0((jobject) NULL);

              if (!parseArgs(args, "[B", &a0))
              {
                OBJ_CALL(self->object.write(a0));
                Py_RETURN_NONE;
              }
            }
            {
              ::org::apache::lucene::util::BytesRef a0((jobject) NULL);

              if (!parseArgs(args, "k", ::org::apache::lucene::util::BytesRef::initializeClass, &a0))
              {
                OBJ_CALL(self->object.write(a0));
                Py_RETURN_NONE;
              }
            }
            break;
           case 3:
            {
              JArray< jbyte > a0((jobject) NULL);
              jint a1;
              jint a2;

              if (!parseArgs(args, "[BII", &a0, &a1, &a2))
              {
                OBJ_CALL(self->object.write(a0, a1, a2));
                Py_RETURN_NONE;
              }
            }
          }

          PyErr_SetArgsError((PyObject *) self, "write", args);
          return NULL;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queries/function/valuesource/VectorValueSource.h"
#include "java/util/Map.h"
#include "org/apache/lucene/index/LeafReaderContext.h"
#include "org/apache/lucene/search/IndexSearcher.h"
#include "org/apache/lucene/queries/function/ValueSource.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/queries/function/FunctionValues.h"
#include "java/lang/Object.h"
#include "java/lang/String.h"
#include "java/io/IOException.h"
#include "java/util/List.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queries {
        namespace function {
          namespace valuesource {

            ::java::lang::Class *VectorValueSource::class$ = NULL;
            jmethodID *VectorValueSource::mids$ = NULL;
            bool VectorValueSource::live$ = false;

            jclass VectorValueSource::initializeClass(bool getOnly)
            {
              if (getOnly)
                return (jclass) (live$ ? class$->this$ : NULL);
              if (class$ == NULL)
              {
                jclass cls = (jclass) env->findClass("org/apache/lucene/queries/function/valuesource/VectorValueSource");

                mids$ = new jmethodID[max_mid];
                mids$[mid_init$_d03990be0130160d] = env->getMethodID(cls, "<init>", "(Ljava/util/List;)V");
                mids$[mid_createWeight_69d322032c5ae159] = env->getMethodID(cls, "createWeight", "(Ljava/util/Map;Lorg/apache/lucene/search/IndexSearcher;)V");
                mids$[mid_description_db9b55ba01e03e4b] = env->getMethodID(cls, "description", "()Ljava/lang/String;");
                mids$[mid_dimension_9972fcc56b44e79d] = env->getMethodID(cls, "dimension", "()I");
                mids$[mid_equals_8b72f2dcdde6fd1d] = env->getMethodID(cls, "equals", "(Ljava/lang/Object;)Z");
                mids$[mid_getSources_49ec78390f08338a] = env->getMethodID(cls, "getSources", "()Ljava/util/List;");
                mids$[mid_getValues_ede8eccd3e97f32c] = env->getMethodID(cls, "getValues", "(Ljava/util/Map;Lorg/apache/lucene/index/LeafReaderContext;)Lorg/apache/lucene/queries/function/FunctionValues;");
                mids$[mid_hashCode_9972fcc56b44e79d] = env->getMethodID(cls, "hashCode", "()I");
                mids$[mid_name_db9b55ba01e03e4b] = env->getMethodID(cls, "name", "()Ljava/lang/String;");

                class$ = new ::java::lang::Class(cls);
                live$ = true;
              }
              return (jclass) class$->this$;
            }

            VectorValueSource::VectorValueSource(const ::java::util::List & a0) : ::org::apache::lucene::queries::function::valuesource::MultiValueSource(env->newObject(initializeClass, &mids$, mid_init$_d03990be0130160d, a0.this$)) {}

            void VectorValueSource::createWeight(const ::java::util::Map & a0, const ::org::apache::lucene::search::IndexSearcher & a1) const
            {
              env->callVoidMethod(this$, mids$[mid_createWeight_69d322032c5ae159], a0.this$, a1.this$);
            }

            ::java::lang::String VectorValueSource::description() const
            {
              return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_description_db9b55ba01e03e4b]));
            }

            jint VectorValueSource::dimension() const
            {
              return env->callIntMethod(this$, mids$[mid_dimension_9972fcc56b44e79d]);
            }

            jboolean VectorValueSource::equals(const ::java::lang::Object & a0) const
            {
              return env->callBooleanMethod(this$, mids$[mid_equals_8b72f2dcdde6fd1d], a0.this$);
            }

            ::java::util::List VectorValueSource::getSources() const
            {
              return ::java::util::List(env->callObjectMethod(this$, mids$[mid_getSources_49ec78390f08338a]));
            }

            ::org::apache::lucene::queries::function::FunctionValues VectorValueSource::getValues(const ::java::util::Map & a0, const ::org::apache::lucene::index::LeafReaderContext & a1) const
            {
              return ::org::apache::lucene::queries::function::FunctionValues(env->callObjectMethod(this$, mids$[mid_getValues_ede8eccd3e97f32c], a0.this$, a1.this$));
            }

            jint VectorValueSource::hashCode() const
            {
              return env->callIntMethod(this$, mids$[mid_hashCode_9972fcc56b44e79d]);
            }

            ::java::lang::String VectorValueSource::name() const
            {
              return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_name_db9b55ba01e03e4b]));
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queries {
        namespace function {
          namespace valuesource {
            static PyObject *t_VectorValueSource_cast_(PyTypeObject *type, PyObject *arg);
            static PyObject *t_VectorValueSource_instance_(PyTypeObject *type, PyObject *arg);
            static int t_VectorValueSource_init_(t_VectorValueSource *self, PyObject *args, PyObject *kwds);
            static PyObject *t_VectorValueSource_createWeight(t_VectorValueSource *self, PyObject *args);
            static PyObject *t_VectorValueSource_description(t_VectorValueSource *self, PyObject *args);
            static PyObject *t_VectorValueSource_dimension(t_VectorValueSource *self, PyObject *args);
            static PyObject *t_VectorValueSource_equals(t_VectorValueSource *self, PyObject *args);
            static PyObject *t_VectorValueSource_getSources(t_VectorValueSource *self);
            static PyObject *t_VectorValueSource_getValues(t_VectorValueSource *self, PyObject *args);
            static PyObject *t_VectorValueSource_hashCode(t_VectorValueSource *self, PyObject *args);
            static PyObject *t_VectorValueSource_name(t_VectorValueSource *self);
            static PyObject *t_VectorValueSource_get__sources(t_VectorValueSource *self, void *data);
            static PyGetSetDef t_VectorValueSource__fields_[] = {
              DECLARE_GET_FIELD(t_VectorValueSource, sources),
              { NULL, NULL, NULL, NULL, NULL }
            };

            static PyMethodDef t_VectorValueSource__methods_[] = {
              DECLARE_METHOD(t_VectorValueSource, cast_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_VectorValueSource, instance_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_VectorValueSource, createWeight, METH_VARARGS),
              DECLARE_METHOD(t_VectorValueSource, description, METH_VARARGS),
              DECLARE_METHOD(t_VectorValueSource, dimension, METH_VARARGS),
              DECLARE_METHOD(t_VectorValueSource, equals, METH_VARARGS),
              DECLARE_METHOD(t_VectorValueSource, getSources, METH_NOARGS),
              DECLARE_METHOD(t_VectorValueSource, getValues, METH_VARARGS),
              DECLARE_METHOD(t_VectorValueSource, hashCode, METH_VARARGS),
              DECLARE_METHOD(t_VectorValueSource, name, METH_NOARGS),
              { NULL, NULL, 0, NULL }
            };

            static PyType_Slot PY_TYPE_SLOTS(VectorValueSource)[] = {
              { Py_tp_methods, t_VectorValueSource__methods_ },
              { Py_tp_init, (void *) t_VectorValueSource_init_ },
              { Py_tp_getset, t_VectorValueSource__fields_ },
              { 0, NULL }
            };

            static PyType_Def *PY_TYPE_BASES(VectorValueSource)[] = {
              &PY_TYPE_DEF(::org::apache::lucene::queries::function::valuesource::MultiValueSource),
              NULL
            };

            DEFINE_TYPE(VectorValueSource, t_VectorValueSource, VectorValueSource);

            void t_VectorValueSource::install(PyObject *module)
            {
              installType(&PY_TYPE(VectorValueSource), &PY_TYPE_DEF(VectorValueSource), module, "VectorValueSource", 0);
            }

            void t_VectorValueSource::initialize(PyObject *module)
            {
              PyObject_SetAttrString((PyObject *) PY_TYPE(VectorValueSource), "class_", make_descriptor(VectorValueSource::initializeClass, 1));
              PyObject_SetAttrString((PyObject *) PY_TYPE(VectorValueSource), "wrapfn_", make_descriptor(t_VectorValueSource::wrap_jobject));
              PyObject_SetAttrString((PyObject *) PY_TYPE(VectorValueSource), "boxfn_", make_descriptor(boxObject));
            }

            static PyObject *t_VectorValueSource_cast_(PyTypeObject *type, PyObject *arg)
            {
              if (!(arg = castCheck(arg, VectorValueSource::initializeClass, 1)))
                return NULL;
              return t_VectorValueSource::wrap_Object(VectorValueSource(((t_VectorValueSource *) arg)->object.this$));
            }
            static PyObject *t_VectorValueSource_instance_(PyTypeObject *type, PyObject *arg)
            {
              if (!castCheck(arg, VectorValueSource::initializeClass, 0))
                Py_RETURN_FALSE;
              Py_RETURN_TRUE;
            }

            static int t_VectorValueSource_init_(t_VectorValueSource *self, PyObject *args, PyObject *kwds)
            {
              ::java::util::List a0((jobject) NULL);
              PyTypeObject **p0;
              VectorValueSource object((jobject) NULL);

              if (!parseArgs(args, "K", ::java::util::List::initializeClass, &a0, &p0, ::java::util::t_List::parameters_))
              {
                INT_CALL(object = VectorValueSource(a0));
                self->object = object;
              }
              else
              {
                PyErr_SetArgsError((PyObject *) self, "__init__", args);
                return -1;
              }

              return 0;
            }

            static PyObject *t_VectorValueSource_createWeight(t_VectorValueSource *self, PyObject *args)
            {
              ::java::util::Map a0((jobject) NULL);
              PyTypeObject **p0;
              ::org::apache::lucene::search::IndexSearcher a1((jobject) NULL);

              if (!parseArgs(args, "Kk", ::java::util::Map::initializeClass, ::org::apache::lucene::search::IndexSearcher::initializeClass, &a0, &p0, ::java::util::t_Map::parameters_, &a1))
              {
                OBJ_CALL(self->object.createWeight(a0, a1));
                Py_RETURN_NONE;
              }

              return callSuper(PY_TYPE(VectorValueSource), (PyObject *) self, "createWeight", args, 2);
            }

            static PyObject *t_VectorValueSource_description(t_VectorValueSource *self, PyObject *args)
            {
              ::java::lang::String result((jobject) NULL);

              if (!parseArgs(args, ""))
              {
                OBJ_CALL(result = self->object.description());
                return j2p(result);
              }

              return callSuper(PY_TYPE(VectorValueSource), (PyObject *) self, "description", args, 2);
            }

            static PyObject *t_VectorValueSource_dimension(t_VectorValueSource *self, PyObject *args)
            {
              jint result;

              if (!parseArgs(args, ""))
              {
                OBJ_CALL(result = self->object.dimension());
                return PyLong_FromLong((long) result);
              }

              return callSuper(PY_TYPE(VectorValueSource), (PyObject *) self, "dimension", args, 2);
            }

            static PyObject *t_VectorValueSource_equals(t_VectorValueSource *self, PyObject *args)
            {
              ::java::lang::Object a0((jobject) NULL);
              jboolean result;

              if (!parseArgs(args, "o", &a0))
              {
                OBJ_CALL(result = self->object.equals(a0));
                Py_RETURN_BOOL(result);
              }

              return callSuper(PY_TYPE(VectorValueSource), (PyObject *) self, "equals", args, 2);
            }

            static PyObject *t_VectorValueSource_getSources(t_VectorValueSource *self)
            {
              ::java::util::List result((jobject) NULL);
              OBJ_CALL(result = self->object.getSources());
              return ::java::util::t_List::wrap_Object(result, ::org::apache::lucene::queries::function::PY_TYPE(ValueSource));
            }

            static PyObject *t_VectorValueSource_getValues(t_VectorValueSource *self, PyObject *args)
            {
              ::java::util::Map a0((jobject) NULL);
              PyTypeObject **p0;
              ::org::apache::lucene::index::LeafReaderContext a1((jobject) NULL);
              ::org::apache::lucene::queries::function::FunctionValues result((jobject) NULL);

              if (!parseArgs(args, "Kk", ::java::util::Map::initializeClass, ::org::apache::lucene::index::LeafReaderContext::initializeClass, &a0, &p0, ::java::util::t_Map::parameters_, &a1))
              {
                OBJ_CALL(result = self->object.getValues(a0, a1));
                return ::org::apache::lucene::queries::function::t_FunctionValues::wrap_Object(result);
              }

              return callSuper(PY_TYPE(VectorValueSource), (PyObject *) self, "getValues", args, 2);
            }

            static PyObject *t_VectorValueSource_hashCode(t_VectorValueSource *self, PyObject *args)
            {
              jint result;

              if (!parseArgs(args, ""))
              {
                OBJ_CALL(result = self->object.hashCode());
                return PyLong_FromLong((long) result);
              }

              return callSuper(PY_TYPE(VectorValueSource), (PyObject *) self, "hashCode", args, 2);
            }

            static PyObject *t_VectorValueSource_name(t_VectorValueSource *self)
            {
              ::java::lang::String result((jobject) NULL);
              OBJ_CALL(result = self->object.name());
              return j2p(result);
            }

            static PyObject *t_VectorValueSource_get__sources(t_VectorValueSource *self, void *data)
            {
              ::java::util::List value((jobject) NULL);
              OBJ_CALL(value = self->object.getSources());
              return ::java::util::t_List::wrap_Object(value);
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/vectorhighlight/BreakIteratorBoundaryScanner.h"
#include "org/apache/lucene/search/vectorhighlight/BoundaryScanner.h"
#include "java/text/BreakIterator.h"
#include "java/lang/StringBuilder.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace vectorhighlight {

          ::java::lang::Class *BreakIteratorBoundaryScanner::class$ = NULL;
          jmethodID *BreakIteratorBoundaryScanner::mids$ = NULL;
          bool BreakIteratorBoundaryScanner::live$ = false;

          jclass BreakIteratorBoundaryScanner::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/search/vectorhighlight/BreakIteratorBoundaryScanner");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_a55d72120f228769] = env->getMethodID(cls, "<init>", "(Ljava/text/BreakIterator;)V");
              mids$[mid_findEndOffset_5c64028204964247] = env->getMethodID(cls, "findEndOffset", "(Ljava/lang/StringBuilder;I)I");
              mids$[mid_findStartOffset_5c64028204964247] = env->getMethodID(cls, "findStartOffset", "(Ljava/lang/StringBuilder;I)I");

              class$ = new ::java::lang::Class(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          BreakIteratorBoundaryScanner::BreakIteratorBoundaryScanner(const ::java::text::BreakIterator & a0) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_a55d72120f228769, a0.this$)) {}

          jint BreakIteratorBoundaryScanner::findEndOffset(const ::java::lang::StringBuilder & a0, jint a1) const
          {
            return env->callIntMethod(this$, mids$[mid_findEndOffset_5c64028204964247], a0.this$, a1);
          }

          jint BreakIteratorBoundaryScanner::findStartOffset(const ::java::lang::StringBuilder & a0, jint a1) const
          {
            return env->callIntMethod(this$, mids$[mid_findStartOffset_5c64028204964247], a0.this$, a1);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace vectorhighlight {
          static PyObject *t_BreakIteratorBoundaryScanner_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_BreakIteratorBoundaryScanner_instance_(PyTypeObject *type, PyObject *arg);
          static int t_BreakIteratorBoundaryScanner_init_(t_BreakIteratorBoundaryScanner *self, PyObject *args, PyObject *kwds);
          static PyObject *t_BreakIteratorBoundaryScanner_findEndOffset(t_BreakIteratorBoundaryScanner *self, PyObject *args);
          static PyObject *t_BreakIteratorBoundaryScanner_findStartOffset(t_BreakIteratorBoundaryScanner *self, PyObject *args);

          static PyMethodDef t_BreakIteratorBoundaryScanner__methods_[] = {
            DECLARE_METHOD(t_BreakIteratorBoundaryScanner, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_BreakIteratorBoundaryScanner, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_BreakIteratorBoundaryScanner, findEndOffset, METH_VARARGS),
            DECLARE_METHOD(t_BreakIteratorBoundaryScanner, findStartOffset, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          static PyType_Slot PY_TYPE_SLOTS(BreakIteratorBoundaryScanner)[] = {
            { Py_tp_methods, t_BreakIteratorBoundaryScanner__methods_ },
            { Py_tp_init, (void *) t_BreakIteratorBoundaryScanner_init_ },
            { 0, NULL }
          };

          static PyType_Def *PY_TYPE_BASES(BreakIteratorBoundaryScanner)[] = {
            &PY_TYPE_DEF(::java::lang::Object),
            NULL
          };

          DEFINE_TYPE(BreakIteratorBoundaryScanner, t_BreakIteratorBoundaryScanner, BreakIteratorBoundaryScanner);

          void t_BreakIteratorBoundaryScanner::install(PyObject *module)
          {
            installType(&PY_TYPE(BreakIteratorBoundaryScanner), &PY_TYPE_DEF(BreakIteratorBoundaryScanner), module, "BreakIteratorBoundaryScanner", 0);
          }

          void t_BreakIteratorBoundaryScanner::initialize(PyObject *module)
          {
            PyObject_SetAttrString((PyObject *) PY_TYPE(BreakIteratorBoundaryScanner), "class_", make_descriptor(BreakIteratorBoundaryScanner::initializeClass, 1));
            PyObject_SetAttrString((PyObject *) PY_TYPE(BreakIteratorBoundaryScanner), "wrapfn_", make_descriptor(t_BreakIteratorBoundaryScanner::wrap_jobject));
            PyObject_SetAttrString((PyObject *) PY_TYPE(BreakIteratorBoundaryScanner), "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_BreakIteratorBoundaryScanner_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, BreakIteratorBoundaryScanner::initializeClass, 1)))
              return NULL;
            return t_BreakIteratorBoundaryScanner::wrap_Object(BreakIteratorBoundaryScanner(((t_BreakIteratorBoundaryScanner *) arg)->object.this$));
          }
          static PyObject *t_BreakIteratorBoundaryScanner_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, BreakIteratorBoundaryScanner::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_BreakIteratorBoundaryScanner_init_(t_BreakIteratorBoundaryScanner *self, PyObject *args, PyObject *kwds)
          {
            ::java::text::BreakIterator a0((jobject) NULL);
            BreakIteratorBoundaryScanner object((jobject) NULL);

            if (!parseArgs(args, "k", ::java::text::BreakIterator::initializeClass, &a0))
            {
              INT_CALL(object = BreakIteratorBoundaryScanner(a0));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_BreakIteratorBoundaryScanner_findEndOffset(t_BreakIteratorBoundaryScanner *self, PyObject *args)
          {
            ::java::lang::StringBuilder a0((jobject) NULL);
            jint a1;
            jint result;

            if (!parseArgs(args, "kI", ::java::lang::StringBuilder::initializeClass, &a0, &a1))
            {
              OBJ_CALL(result = self->object.findEndOffset(a0, a1));
              return PyLong_FromLong((long) result);
            }

            PyErr_SetArgsError((PyObject *) self, "findEndOffset", args);
            return NULL;
          }

          static PyObject *t_BreakIteratorBoundaryScanner_findStartOffset(t_BreakIteratorBoundaryScanner *self, PyObject *args)
          {
            ::java::lang::StringBuilder a0((jobject) NULL);
            jint a1;
            jint result;

            if (!parseArgs(args, "kI", ::java::lang::StringBuilder::initializeClass, &a0, &a1))
            {
              OBJ_CALL(result = self->object.findStartOffset(a0, a1));
              return PyLong_FromLong((long) result);
            }

            PyErr_SetArgsError((PyObject *) self, "findStartOffset", args);
            return NULL;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/util/PagedBytes$PagedBytesDataInput.h"
#include "org/apache/lucene/util/PagedBytes$PagedBytesDataInput.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {

        ::java::lang::Class *PagedBytes$PagedBytesDataInput::class$ = NULL;
        jmethodID *PagedBytes$PagedBytesDataInput::mids$ = NULL;
        bool PagedBytes$PagedBytesDataInput::live$ = false;

        jclass PagedBytes$PagedBytesDataInput::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/util/PagedBytes$PagedBytesDataInput");

            mids$ = new jmethodID[max_mid];
            mids$[mid_clone_e168c75ab4d0482b] = env->getMethodID(cls, "clone", "()Lorg/apache/lucene/util/PagedBytes$PagedBytesDataInput;");
            mids$[mid_getPosition_2e5ae9edcb9b072f] = env->getMethodID(cls, "getPosition", "()J");
            mids$[mid_readByte_871cd52a74f26213] = env->getMethodID(cls, "readByte", "()B");
            mids$[mid_readBytes_43fdd39c09bb2fad] = env->getMethodID(cls, "readBytes", "([BII)V");
            mids$[mid_setPosition_9c778c9bce6694df] = env->getMethodID(cls, "setPosition", "(J)V");

            class$ = new ::java::lang::Class(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        PagedBytes$PagedBytesDataInput PagedBytes$PagedBytesDataInput::clone() const
        {
          return PagedBytes$PagedBytesDataInput(env->callObjectMethod(this$, mids$[mid_clone_e168c75ab4d0482b]));
        }

        jlong PagedBytes$PagedBytesDataInput::getPosition() const
        {
          return env->callLongMethod(this$, mids$[mid_getPosition_2e5ae9edcb9b072f]);
        }

        jbyte PagedBytes$PagedBytesDataInput::readByte() const
        {
          return env->callByteMethod(this$, mids$[mid_readByte_871cd52a74f26213]);
        }

        void PagedBytes$PagedBytesDataInput::readBytes(const JArray< jbyte > & a0, jint a1, jint a2) const
        {
          env->callVoidMethod(this$, mids$[mid_readBytes_43fdd39c09bb2fad], a0.this$, a1, a2);
        }

        void PagedBytes$PagedBytesDataInput::setPosition(jlong a0) const
        {
          env->callVoidMethod(this$, mids$[mid_setPosition_9c778c9bce6694df], a0);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        static PyObject *t_PagedBytes$PagedBytesDataInput_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_PagedBytes$PagedBytesDataInput_instance_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_PagedBytes$PagedBytesDataInput_clone(t_PagedBytes$PagedBytesDataInput *self, PyObject *args);
        static PyObject *t_PagedBytes$PagedBytesDataInput_getPosition(t_PagedBytes$PagedBytesDataInput *self);
        static PyObject *t_PagedBytes$PagedBytesDataInput_readByte(t_PagedBytes$PagedBytesDataInput *self, PyObject *args);
        static PyObject *t_PagedBytes$PagedBytesDataInput_readBytes(t_PagedBytes$PagedBytesDataInput *self, PyObject *args);
        static PyObject *t_PagedBytes$PagedBytesDataInput_setPosition(t_PagedBytes$PagedBytesDataInput *self, PyObject *arg);
        static PyObject *t_PagedBytes$PagedBytesDataInput_get__position(t_PagedBytes$PagedBytesDataInput *self, void *data);
        static int t_PagedBytes$PagedBytesDataInput_set__position(t_PagedBytes$PagedBytesDataInput *self, PyObject *arg, void *data);
        static PyGetSetDef t_PagedBytes$PagedBytesDataInput__fields_[] = {
          DECLARE_GETSET_FIELD(t_PagedBytes$PagedBytesDataInput, position),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_PagedBytes$PagedBytesDataInput__methods_[] = {
          DECLARE_METHOD(t_PagedBytes$PagedBytesDataInput, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_PagedBytes$PagedBytesDataInput, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_PagedBytes$PagedBytesDataInput, clone, METH_VARARGS),
          DECLARE_METHOD(t_PagedBytes$PagedBytesDataInput, getPosition, METH_NOARGS),
          DECLARE_METHOD(t_PagedBytes$PagedBytesDataInput, readByte, METH_VARARGS),
          DECLARE_METHOD(t_PagedBytes$PagedBytesDataInput, readBytes, METH_VARARGS),
          DECLARE_METHOD(t_PagedBytes$PagedBytesDataInput, setPosition, METH_O),
          { NULL, NULL, 0, NULL }
        };

        static PyType_Slot PY_TYPE_SLOTS(PagedBytes$PagedBytesDataInput)[] = {
          { Py_tp_methods, t_PagedBytes$PagedBytesDataInput__methods_ },
          { Py_tp_init, (void *) abstract_init },
          { Py_tp_getset, t_PagedBytes$PagedBytesDataInput__fields_ },
          { 0, NULL }
        };

        static PyType_Def *PY_TYPE_BASES(PagedBytes$PagedBytesDataInput)[] = {
          &PY_TYPE_DEF(::org::apache::lucene::store::DataInput),
          NULL
        };

        DEFINE_TYPE(PagedBytes$PagedBytesDataInput, t_PagedBytes$PagedBytesDataInput, PagedBytes$PagedBytesDataInput);

        void t_PagedBytes$PagedBytesDataInput::install(PyObject *module)
        {
          installType(&PY_TYPE(PagedBytes$PagedBytesDataInput), &PY_TYPE_DEF(PagedBytes$PagedBytesDataInput), module, "PagedBytes$PagedBytesDataInput", 0);
        }

        void t_PagedBytes$PagedBytesDataInput::initialize(PyObject *module)
        {
          PyObject_SetAttrString((PyObject *) PY_TYPE(PagedBytes$PagedBytesDataInput), "class_", make_descriptor(PagedBytes$PagedBytesDataInput::initializeClass, 1));
          PyObject_SetAttrString((PyObject *) PY_TYPE(PagedBytes$PagedBytesDataInput), "wrapfn_", make_descriptor(t_PagedBytes$PagedBytesDataInput::wrap_jobject));
          PyObject_SetAttrString((PyObject *) PY_TYPE(PagedBytes$PagedBytesDataInput), "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_PagedBytes$PagedBytesDataInput_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, PagedBytes$PagedBytesDataInput::initializeClass, 1)))
            return NULL;
          return t_PagedBytes$PagedBytesDataInput::wrap_Object(PagedBytes$PagedBytesDataInput(((t_PagedBytes$PagedBytesDataInput *) arg)->object.this$));
        }
        static PyObject *t_PagedBytes$PagedBytesDataInput_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, PagedBytes$PagedBytesDataInput::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static PyObject *t_PagedBytes$PagedBytesDataInput_clone(t_PagedBytes$PagedBytesDataInput *self, PyObject *args)
        {
          PagedBytes$PagedBytesDataInput result((jobject) NULL);

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.clone());
            return t_PagedBytes$PagedBytesDataInput::wrap_Object(result);
          }

          return callSuper(PY_TYPE(PagedBytes$PagedBytesDataInput), (PyObject *) self, "clone", args, 2);
        }

        static PyObject *t_PagedBytes$PagedBytesDataInput_getPosition(t_PagedBytes$PagedBytesDataInput *self)
        {
          jlong result;
          OBJ_CALL(result = self->object.getPosition());
          return PyLong_FromLongLong((PY_LONG_LONG) result);
        }

        static PyObject *t_PagedBytes$PagedBytesDataInput_readByte(t_PagedBytes$PagedBytesDataInput *self, PyObject *args)
        {
          jbyte result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.readByte());
            return PyLong_FromLong((long) result);
          }

          return callSuper(PY_TYPE(PagedBytes$PagedBytesDataInput), (PyObject *) self, "readByte", args, 2);
        }

        static PyObject *t_PagedBytes$PagedBytesDataInput_readBytes(t_PagedBytes$PagedBytesDataInput *self, PyObject *args)
        {
          JArray< jbyte > a0((jobject) NULL);
          jint a1;
          jint a2;

          if (!parseArgs(args, "[BII", &a0, &a1, &a2))
          {
            OBJ_CALL(self->object.readBytes(a0, a1, a2));
            Py_RETURN_NONE;
          }

          return callSuper(PY_TYPE(PagedBytes$PagedBytesDataInput), (PyObject *) self, "readBytes", args, 2);
        }

        static PyObject *t_PagedBytes$PagedBytesDataInput_setPosition(t_PagedBytes$PagedBytesDataInput *self, PyObject *arg)
        {
          jlong a0;

          if (!parseArg(arg, "J", &a0))
          {
            OBJ_CALL(self->object.setPosition(a0));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "setPosition", arg);
          return NULL;
        }

        static PyObject *t_PagedBytes$PagedBytesDataInput_get__position(t_PagedBytes$PagedBytesDataInput *self, void *data)
        {
          jlong value;
          OBJ_CALL(value = self->object.getPosition());
          return PyLong_FromLongLong((PY_LONG_LONG) value);
        }
        static int t_PagedBytes$PagedBytesDataInput_set__position(t_PagedBytes$PagedBytesDataInput *self, PyObject *arg, void *data)
        {
          {
            jlong value;
            if (!parseArg(arg, "J", &value))
            {
              INT_CALL(self->object.setPosition(value));
              return 0;
            }
          }
          PyErr_SetArgsError((PyObject *) self, "position", arg);
          return -1;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/store/FSDirectory.h"
#include "org/apache/lucene/store/IndexOutput.h"
#include "org/apache/lucene/store/FSDirectory.h"
#include "org/apache/lucene/store/IOContext.h"
#include "java/util/Collection.h"
#include "java/lang/Class.h"
#include "java/lang/String.h"
#include "java/util/Set.h"
#include "java/io/IOException.h"
#include "java/nio/file/Path.h"
#include "org/apache/lucene/store/LockFactory.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace store {

        ::java::lang::Class *FSDirectory::class$ = NULL;
        jmethodID *FSDirectory::mids$ = NULL;
        bool FSDirectory::live$ = false;

        jclass FSDirectory::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/store/FSDirectory");

            mids$ = new jmethodID[max_mid];
            mids$[mid_close_f2cc1bce94666404] = env->getMethodID(cls, "close", "()V");
            mids$[mid_createOutput_40e6d6dcc3f676b9] = env->getMethodID(cls, "createOutput", "(Ljava/lang/String;Lorg/apache/lucene/store/IOContext;)Lorg/apache/lucene/store/IndexOutput;");
            mids$[mid_createTempOutput_918504249dfbe513] = env->getMethodID(cls, "createTempOutput", "(Ljava/lang/String;Ljava/lang/String;Lorg/apache/lucene/store/IOContext;)Lorg/apache/lucene/store/IndexOutput;");
            mids$[mid_deleteFile_9fd2eb66a64e6f0f] = env->getMethodID(cls, "deleteFile", "(Ljava/lang/String;)V");
            mids$[mid_deletePendingFiles_f2cc1bce94666404] = env->getMethodID(cls, "deletePendingFiles", "()V");
            mids$[mid_fileLength_b1e05207ec98e246] = env->getMethodID(cls, "fileLength", "(Ljava/lang/String;)J");
            mids$[mid_getDirectory_7f94726bf5834528] = env->getMethodID(cls, "getDirectory", "()Ljava/nio/file/Path;");
            mids$[mid_getPendingDeletions_7dcf4034c6d1a92a] = env->getMethodID(cls, "getPendingDeletions", "()Ljava/util/Set;");
            mids$[mid_listAll_9865da0b5ee490bc] = env->getMethodID(cls, "listAll", "()[Ljava/lang/String;");
            mids$[mid_listAll_64c05ce96d6e63cc] = env->getStaticMethodID(cls, "listAll", "(Ljava/nio/file/Path;)[Ljava/lang/String;");
            mids$[mid_open_f2e573d00340f656] = env->getStaticMethodID(cls, "open", "(Ljava/nio/file/Path;)Lorg/apache/lucene/store/FSDirectory;");
            mids$[mid_open_79a7024ef94d560e] = env->getStaticMethodID(cls, "open", "(Ljava/nio/file/Path;Lorg/apache/lucene/store/LockFactory;)Lorg/apache/lucene/store/FSDirectory;");
            mids$[mid_rename_15b72f6a44ff93f2] = env->getMethodID(cls, "rename", "(Ljava/lang/String;Ljava/lang/String;)V");
            mids$[mid_sync_50bc3ddc62a19f2d] = env->getMethodID(cls, "sync", "(Ljava/util/Collection;)V");
            mids$[mid_syncMetaData_f2cc1bce94666404] = env->getMethodID(cls, "syncMetaData", "()V");
            mids$[mid_toString_db9b55ba01e03e4b] = env->getMethodID(cls, "toString", "()Ljava/lang/String;");
            mids$[mid_fsync_9fd2eb66a64e6f0f] = env->getMethodID(cls, "fsync", "(Ljava/lang/String;)V");
            mids$[mid_ensureCanRead_9fd2eb66a64e6f0f] = env->getMethodID(cls, "ensureCanRead", "(Ljava/lang/String;)V");

            class$ = new ::java::lang::Class(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        void FSDirectory::close() const
        {
          env->callVoidMethod(this$, mids$[mid_close_f2cc1bce94666404]);
        }

        ::org::apache::lucene::store::IndexOutput FSDirectory::createOutput(const ::java::lang::String & a0, const ::org::apache::lucene::store::IOContext & a1) const
        {
          return ::org::apache::lucene::store::IndexOutput(env->callObjectMethod(this$, mids$[mid_createOutput_40e6d6dcc3f676b9], a0.this$, a1.this$));
        }

        ::org::apache::lucene::store::IndexOutput FSDirectory::createTempOutput(const ::java::lang::String & a0, const ::java::lang::String & a1, const ::org::apache::lucene::store::IOContext & a2) const
        {
          return ::org::apache::lucene::store::IndexOutput(env->callObjectMethod(this$, mids$[mid_createTempOutput_918504249dfbe513], a0.this$, a1.this$, a2.this$));
        }

        void FSDirectory::deleteFile(const ::java::lang::String & a0) const
        {
          env->callVoidMethod(this$, mids$[mid_deleteFile_9fd2eb66a64e6f0f], a0.this$);
        }

        void FSDirectory::deletePendingFiles() const
        {
          env->callVoidMethod(this$, mids$[mid_deletePendingFiles_f2cc1bce94666404]);
        }

        jlong FSDirectory::fileLength(const ::java::lang::String & a0) const
        {
          return env->callLongMethod(this$, mids$[mid_fileLength_b1e05207ec98e246], a0.this$);
        }

        ::java::nio::file::Path FSDirectory::getDirectory() const
        {
          return ::java::nio::file::Path(env->callObjectMethod(this$, mids$[mid_getDirectory_7f94726bf5834528]));
        }

        ::java::util::Set FSDirectory::getPendingDeletions() const
        {
          return ::java::util::Set(env->callObjectMethod(this$, mids$[mid_getPendingDeletions_7dcf4034c6d1a92a]));
        }

        JArray< ::java::lang::String > FSDirectory::listAll() const
        {
          return JArray< ::java::lang::String >(env->callObjectMethod(this$, mids$[mid_listAll_9865da0b5ee490bc]));
        }

        JArray< ::java::lang::String > FSDirectory::listAll(const ::java::nio::file::Path & a0)
        {
          jclass cls = env->getClass(initializeClass);
          return JArray< ::java::lang::String >(env->callStaticObjectMethod(cls, mids$[mid_listAll_64c05ce96d6e63cc], a0.this$));
        }

        FSDirectory FSDirectory::open(const ::java::nio::file::Path & a0)
        {
          jclass cls = env->getClass(initializeClass);
          return FSDirectory(env->callStaticObjectMethod(cls, mids$[mid_open_f2e573d00340f656], a0.this$));
        }

        FSDirectory FSDirectory::open(const ::java::nio::file::Path & a0, const ::org::apache::lucene::store::LockFactory & a1)
        {
          jclass cls = env->getClass(initializeClass);
          return FSDirectory(env->callStaticObjectMethod(cls, mids$[mid_open_79a7024ef94d560e], a0.this$, a1.this$));
        }

        void FSDirectory::rename(const ::java::lang::String & a0, const ::java::lang::String & a1) const
        {
          env->callVoidMethod(this$, mids$[mid_rename_15b72f6a44ff93f2], a0.this$, a1.this$);
        }

        void FSDirectory::sync(const ::java::util::Collection & a0) const
        {
          env->callVoidMethod(this$, mids$[mid_sync_50bc3ddc62a19f2d], a0.this$);
        }

        void FSDirectory::syncMetaData() const
        {
          env->callVoidMethod(this$, mids$[mid_syncMetaData_f2cc1bce94666404]);
        }

        ::java::lang::String FSDirectory::toString() const
        {
          return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_db9b55ba01e03e4b]));
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace store {
        static PyObject *t_FSDirectory_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_FSDirectory_instance_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_FSDirectory_close(t_FSDirectory *self, PyObject *args);
        static PyObject *t_FSDirectory_createOutput(t_FSDirectory *self, PyObject *args);
        static PyObject *t_FSDirectory_createTempOutput(t_FSDirectory *self, PyObject *args);
        static PyObject *t_FSDirectory_deleteFile(t_FSDirectory *self, PyObject *args);
        static PyObject *t_FSDirectory_deletePendingFiles(t_FSDirectory *self);
        static PyObject *t_FSDirectory_fileLength(t_FSDirectory *self, PyObject *args);
        static PyObject *t_FSDirectory_getDirectory(t_FSDirectory *self);
        static PyObject *t_FSDirectory_getPendingDeletions(t_FSDirectory *self, PyObject *args);
        static PyObject *t_FSDirectory_listAll(t_FSDirectory *self, PyObject *args);
        static PyObject *t_FSDirectory_listAll_(PyTypeObject *type, PyObject *args);
        static PyObject *t_FSDirectory_open(PyTypeObject *type, PyObject *args);
        static PyObject *t_FSDirectory_rename(t_FSDirectory *self, PyObject *args);
        static PyObject *t_FSDirectory_sync(t_FSDirectory *self, PyObject *args);
        static PyObject *t_FSDirectory_syncMetaData(t_FSDirectory *self, PyObject *args);
        static PyObject *t_FSDirectory_toString(t_FSDirectory *self, PyObject *args);
        static PyObject *t_FSDirectory_get__directory(t_FSDirectory *self, void *data);
        static PyObject *t_FSDirectory_get__pendingDeletions(t_FSDirectory *self, void *data);
        static PyGetSetDef t_FSDirectory__fields_[] = {
          DECLARE_GET_FIELD(t_FSDirectory, directory),
          DECLARE_GET_FIELD(t_FSDirectory, pendingDeletions),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_FSDirectory__methods_[] = {
          DECLARE_METHOD(t_FSDirectory, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_FSDirectory, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_FSDirectory, close, METH_VARARGS),
          DECLARE_METHOD(t_FSDirectory, createOutput, METH_VARARGS),
          DECLARE_METHOD(t_FSDirectory, createTempOutput, METH_VARARGS),
          DECLARE_METHOD(t_FSDirectory, deleteFile, METH_VARARGS),
          DECLARE_METHOD(t_FSDirectory, deletePendingFiles, METH_NOARGS),
          DECLARE_METHOD(t_FSDirectory, fileLength, METH_VARARGS),
          DECLARE_METHOD(t_FSDirectory, getDirectory, METH_NOARGS),
          DECLARE_METHOD(t_FSDirectory, getPendingDeletions, METH_VARARGS),
          DECLARE_METHOD(t_FSDirectory, listAll, METH_VARARGS),
          DECLARE_METHOD(t_FSDirectory, listAll_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_FSDirectory, open, METH_VARARGS | METH_CLASS),
          DECLARE_METHOD(t_FSDirectory, rename, METH_VARARGS),
          DECLARE_METHOD(t_FSDirectory, sync, METH_VARARGS),
          DECLARE_METHOD(t_FSDirectory, syncMetaData, METH_VARARGS),
          DECLARE_METHOD(t_FSDirectory, toString, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        static PyType_Slot PY_TYPE_SLOTS(FSDirectory)[] = {
          { Py_tp_methods, t_FSDirectory__methods_ },
          { Py_tp_init, (void *) abstract_init },
          { Py_tp_getset, t_FSDirectory__fields_ },
          { 0, NULL }
        };

        static PyType_Def *PY_TYPE_BASES(FSDirectory)[] = {
          &PY_TYPE_DEF(::org::apache::lucene::store::BaseDirectory),
          NULL
        };

        DEFINE_TYPE(FSDirectory, t_FSDirectory, FSDirectory);

        void t_FSDirectory::install(PyObject *module)
        {
          installType(&PY_TYPE(FSDirectory), &PY_TYPE_DEF(FSDirectory), module, "FSDirectory", 0);
        }

        void t_FSDirectory::initialize(PyObject *module)
        {
          PyObject_SetAttrString((PyObject *) PY_TYPE(FSDirectory), "class_", make_descriptor(FSDirectory::initializeClass, 1));
          PyObject_SetAttrString((PyObject *) PY_TYPE(FSDirectory), "wrapfn_", make_descriptor(t_FSDirectory::wrap_jobject));
          PyObject_SetAttrString((PyObject *) PY_TYPE(FSDirectory), "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_FSDirectory_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, FSDirectory::initializeClass, 1)))
            return NULL;
          return t_FSDirectory::wrap_Object(FSDirectory(((t_FSDirectory *) arg)->object.this$));
        }
        static PyObject *t_FSDirectory_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, FSDirectory::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static PyObject *t_FSDirectory_close(t_FSDirectory *self, PyObject *args)
        {

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(self->object.close());
            Py_RETURN_NONE;
          }

          return callSuper(PY_TYPE(FSDirectory), (PyObject *) self, "close", args, 2);
        }

        static PyObject *t_FSDirectory_createOutput(t_FSDirectory *self, PyObject *args)
        {
          ::java::lang::String a0((jobject) NULL);
          ::org::apache::lucene::store::IOContext a1((jobject) NULL);
          ::org::apache::lucene::store::IndexOutput result((jobject) NULL);

          if (!parseArgs(args, "sk", ::org::apache::lucene::store::IOContext::initializeClass, &a0, &a1))
          {
            OBJ_CALL(result = self->object.createOutput(a0, a1));
            return ::org::apache::lucene::store::t_IndexOutput::wrap_Object(result);
          }

          return callSuper(PY_TYPE(FSDirectory), (PyObject *) self, "createOutput", args, 2);
        }

        static PyObject *t_FSDirectory_createTempOutput(t_FSDirectory *self, PyObject *args)
        {
          ::java::lang::String a0((jobject) NULL);
          ::java::lang::String a1((jobject) NULL);
          ::org::apache::lucene::store::IOContext a2((jobject) NULL);
          ::org::apache::lucene::store::IndexOutput result((jobject) NULL);

          if (!parseArgs(args, "ssk", ::org::apache::lucene::store::IOContext::initializeClass, &a0, &a1, &a2))
          {
            OBJ_CALL(result = self->object.createTempOutput(a0, a1, a2));
            return ::org::apache::lucene::store::t_IndexOutput::wrap_Object(result);
          }

          return callSuper(PY_TYPE(FSDirectory), (PyObject *) self, "createTempOutput", args, 2);
        }

        static PyObject *t_FSDirectory_deleteFile(t_FSDirectory *self, PyObject *args)
        {
          ::java::lang::String a0((jobject) NULL);

          if (!parseArgs(args, "s", &a0))
          {
            OBJ_CALL(self->object.deleteFile(a0));
            Py_RETURN_NONE;
          }

          return callSuper(PY_TYPE(FSDirectory), (PyObject *) self, "deleteFile", args, 2);
        }

        static PyObject *t_FSDirectory_deletePendingFiles(t_FSDirectory *self)
        {
          OBJ_CALL(self->object.deletePendingFiles());
          Py_RETURN_NONE;
        }

        static PyObject *t_FSDirectory_fileLength(t_FSDirectory *self, PyObject *args)
        {
          ::java::lang::String a0((jobject) NULL);
          jlong result;

          if (!parseArgs(args, "s", &a0))
          {
            OBJ_CALL(result = self->object.fileLength(a0));
            return PyLong_FromLongLong((PY_LONG_LONG) result);
          }

          return callSuper(PY_TYPE(FSDirectory), (PyObject *) self, "fileLength", args, 2);
        }

        static PyObject *t_FSDirectory_getDirectory(t_FSDirectory *self)
        {
          ::java::nio::file::Path result((jobject) NULL);
          OBJ_CALL(result = self->object.getDirectory());
          return ::java::nio::file::t_Path::wrap_Object(result);
        }

        static PyObject *t_FSDirectory_getPendingDeletions(t_FSDirectory *self, PyObject *args)
        {
          ::java::util::Set result((jobject) NULL);

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.getPendingDeletions());
            return ::java::util::t_Set::wrap_Object(result, ::java::lang::PY_TYPE(String));
          }

          return callSuper(PY_TYPE(FSDirectory), (PyObject *) self, "getPendingDeletions", args, 2);
        }

        static PyObject *t_FSDirectory_listAll(t_FSDirectory *self, PyObject *args)
        {
          JArray< ::java::lang::String > result((jobject) NULL);

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.listAll());
            return JArray<jstring>(result.this$).wrap();
          }

          return callSuper(PY_TYPE(FSDirectory), (PyObject *) self, "listAll", args, 2);
        }

        static PyObject *t_FSDirectory_listAll_(PyTypeObject *type, PyObject *args)
        {
          ::java::nio::file::Path a0((jobject) NULL);
          JArray< ::java::lang::String > result((jobject) NULL);

          if (!parseArgs(args, "k", ::java::nio::file::Path::initializeClass, &a0))
          {
            OBJ_CALL(result = ::org::apache::lucene::store::FSDirectory::listAll(a0));
            return JArray<jstring>(result.this$).wrap();
          }

          PyErr_SetArgsError(type, "listAll_", args);
          return NULL;
        }

        static PyObject *t_FSDirectory_open(PyTypeObject *type, PyObject *args)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 1:
            {
              ::java::nio::file::Path a0((jobject) NULL);
              FSDirectory result((jobject) NULL);

              if (!parseArgs(args, "k", ::java::nio::file::Path::initializeClass, &a0))
              {
                OBJ_CALL(result = ::org::apache::lucene::store::FSDirectory::open(a0));
                return t_FSDirectory::wrap_Object(result);
              }
            }
            break;
           case 2:
            {
              ::java::nio::file::Path a0((jobject) NULL);
              ::org::apache::lucene::store::LockFactory a1((jobject) NULL);
              FSDirectory result((jobject) NULL);

              if (!parseArgs(args, "kk", ::java::nio::file::Path::initializeClass, ::org::apache::lucene::store::LockFactory::initializeClass, &a0, &a1))
              {
                OBJ_CALL(result = ::org::apache::lucene::store::FSDirectory::open(a0, a1));
                return t_FSDirectory::wrap_Object(result);
              }
            }
          }

          PyErr_SetArgsError(type, "open", args);
          return NULL;
        }

        static PyObject *t_FSDirectory_rename(t_FSDirectory *self, PyObject *args)
        {
          ::java::lang::String a0((jobject) NULL);
          ::java::lang::String a1((jobject) NULL);

          if (!parseArgs(args, "ss", &a0, &a1))
          {
            OBJ_CALL(self->object.rename(a0, a1));
            Py_RETURN_NONE;
          }

          return callSuper(PY_TYPE(FSDirectory), (PyObject *) self, "rename", args, 2);
        }

        static PyObject *t_FSDirectory_sync(t_FSDirectory *self, PyObject *args)
        {
          ::java::util::Collection a0((jobject) NULL);
          PyTypeObject **p0;

          if (!parseArgs(args, "K", ::java::util::Collection::initializeClass, &a0, &p0, ::java::util::t_Collection::parameters_))
          {
            OBJ_CALL(self->object.sync(a0));
            Py_RETURN_NONE;
          }

          return callSuper(PY_TYPE(FSDirectory), (PyObject *) self, "sync", args, 2);
        }

        static PyObject *t_FSDirectory_syncMetaData(t_FSDirectory *self, PyObject *args)
        {

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(self->object.syncMetaData());
            Py_RETURN_NONE;
          }

          return callSuper(PY_TYPE(FSDirectory), (PyObject *) self, "syncMetaData", args, 2);
        }

        static PyObject *t_FSDirectory_toString(t_FSDirectory *self, PyObject *args)
        {
          ::java::lang::String result((jobject) NULL);

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.toString());
            return j2p(result);
          }

          return callSuper(PY_TYPE(FSDirectory), (PyObject *) self, "toString", args, 2);
        }

        static PyObject *t_FSDirectory_get__directory(t_FSDirectory *self, void *data)
        {
          ::java::nio::file::Path value((jobject) NULL);
          OBJ_CALL(value = self->object.getDirectory());
          return ::java::nio::file::t_Path::wrap_Object(value);
        }

        static PyObject *t_FSDirectory_get__pendingDeletions(t_FSDirectory *self, void *data)
        {
          ::java::util::Set value((jobject) NULL);
          OBJ_CALL(value = self->object.getPendingDeletions());
          return ::java::util::t_Set::wrap_Object(value);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/tartarus/snowball/ext/PortugueseStemmer.h"
#include "java/lang/Object.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace tartarus {
    namespace snowball {
      namespace ext {

        ::java::lang::Class *PortugueseStemmer::class$ = NULL;
        jmethodID *PortugueseStemmer::mids$ = NULL;
        bool PortugueseStemmer::live$ = false;

        jclass PortugueseStemmer::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/tartarus/snowball/ext/PortugueseStemmer");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_f2cc1bce94666404] = env->getMethodID(cls, "<init>", "()V");
            mids$[mid_equals_8b72f2dcdde6fd1d] = env->getMethodID(cls, "equals", "(Ljava/lang/Object;)Z");
            mids$[mid_hashCode_9972fcc56b44e79d] = env->getMethodID(cls, "hashCode", "()I");
            mids$[mid_stem_8454bd5aa23fd11e] = env->getMethodID(cls, "stem", "()Z");

            class$ = new ::java::lang::Class(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        PortugueseStemmer::PortugueseStemmer() : ::org::tartarus::snowball::SnowballProgram(env->newObject(initializeClass, &mids$, mid_init$_f2cc1bce94666404)) {}

        jboolean PortugueseStemmer::equals(const ::java::lang::Object & a0) const
        {
          return env->callBooleanMethod(this$, mids$[mid_equals_8b72f2dcdde6fd1d], a0.this$);
        }

        jint PortugueseStemmer::hashCode() const
        {
          return env->callIntMethod(this$, mids$[mid_hashCode_9972fcc56b44e79d]);
        }

        jboolean PortugueseStemmer::stem() const
        {
          return env->callBooleanMethod(this$, mids$[mid_stem_8454bd5aa23fd11e]);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace tartarus {
    namespace snowball {
      namespace ext {
        static PyObject *t_PortugueseStemmer_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_PortugueseStemmer_instance_(PyTypeObject *type, PyObject *arg);
        static int t_PortugueseStemmer_init_(t_PortugueseStemmer *self, PyObject *args, PyObject *kwds);
        static PyObject *t_PortugueseStemmer_equals(t_PortugueseStemmer *self, PyObject *args);
        static PyObject *t_PortugueseStemmer_hashCode(t_PortugueseStemmer *self, PyObject *args);
        static PyObject *t_PortugueseStemmer_stem(t_PortugueseStemmer *self, PyObject *args);

        static PyMethodDef t_PortugueseStemmer__methods_[] = {
          DECLARE_METHOD(t_PortugueseStemmer, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_PortugueseStemmer, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_PortugueseStemmer, equals, METH_VARARGS),
          DECLARE_METHOD(t_PortugueseStemmer, hashCode, METH_VARARGS),
          DECLARE_METHOD(t_PortugueseStemmer, stem, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        static PyType_Slot PY_TYPE_SLOTS(PortugueseStemmer)[] = {
          { Py_tp_methods, t_PortugueseStemmer__methods_ },
          { Py_tp_init, (void *) t_PortugueseStemmer_init_ },
          { 0, NULL }
        };

        static PyType_Def *PY_TYPE_BASES(PortugueseStemmer)[] = {
          &PY_TYPE_DEF(::org::tartarus::snowball::SnowballProgram),
          NULL
        };

        DEFINE_TYPE(PortugueseStemmer, t_PortugueseStemmer, PortugueseStemmer);

        void t_PortugueseStemmer::install(PyObject *module)
        {
          installType(&PY_TYPE(PortugueseStemmer), &PY_TYPE_DEF(PortugueseStemmer), module, "PortugueseStemmer", 0);
        }

        void t_PortugueseStemmer::initialize(PyObject *module)
        {
          PyObject_SetAttrString((PyObject *) PY_TYPE(PortugueseStemmer), "class_", make_descriptor(PortugueseStemmer::initializeClass, 1));
          PyObject_SetAttrString((PyObject *) PY_TYPE(PortugueseStemmer), "wrapfn_", make_descriptor(t_PortugueseStemmer::wrap_jobject));
          PyObject_SetAttrString((PyObject *) PY_TYPE(PortugueseStemmer), "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_PortugueseStemmer_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, PortugueseStemmer::initializeClass, 1)))
            return NULL;
          return t_PortugueseStemmer::wrap_Object(PortugueseStemmer(((t_PortugueseStemmer *) arg)->object.this$));
        }
        static PyObject *t_PortugueseStemmer_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, PortugueseStemmer::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_PortugueseStemmer_init_(t_PortugueseStemmer *self, PyObject *args, PyObject *kwds)
        {
          PortugueseStemmer object((jobject) NULL);

          INT_CALL(object = PortugueseStemmer());
          self->object = object;

          return 0;
        }

        static PyObject *t_PortugueseStemmer_equals(t_PortugueseStemmer *self, PyObject *args)
        {
          ::java::lang::Object a0((jobject) NULL);
          jboolean result;

          if (!parseArgs(args, "o", &a0))
          {
            OBJ_CALL(result = self->object.equals(a0));
            Py_RETURN_BOOL(result);
          }

          return callSuper(PY_TYPE(PortugueseStemmer), (PyObject *) self, "equals", args, 2);
        }

        static PyObject *t_PortugueseStemmer_hashCode(t_PortugueseStemmer *self, PyObject *args)
        {
          jint result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.hashCode());
            return PyLong_FromLong((long) result);
          }

          return callSuper(PY_TYPE(PortugueseStemmer), (PyObject *) self, "hashCode", args, 2);
        }

        static PyObject *t_PortugueseStemmer_stem(t_PortugueseStemmer *self, PyObject *args)
        {
          jboolean result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.stem());
            Py_RETURN_BOOL(result);
          }

          return callSuper(PY_TYPE(PortugueseStemmer), (PyObject *) self, "stem", args, 2);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queryparser/flexible/standard/processors/MultiTermRewriteMethodProcessor.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace standard {
            namespace processors {

              ::java::lang::Class *MultiTermRewriteMethodProcessor::class$ = NULL;
              jmethodID *MultiTermRewriteMethodProcessor::mids$ = NULL;
              bool MultiTermRewriteMethodProcessor::live$ = false;
              ::java::lang::String *MultiTermRewriteMethodProcessor::TAG_ID = NULL;

              jclass MultiTermRewriteMethodProcessor::initializeClass(bool getOnly)
              {
                if (getOnly)
                  return (jclass) (live$ ? class$->this$ : NULL);
                if (class$ == NULL)
                {
                  jclass cls = (jclass) env->findClass("org/apache/lucene/queryparser/flexible/standard/processors/MultiTermRewriteMethodProcessor");

                  mids$ = new jmethodID[max_mid];
                  mids$[mid_init$_f2cc1bce94666404] = env->getMethodID(cls, "<init>", "()V");
                  mids$[mid_preProcessNode_9b07be8595532de7] = env->getMethodID(cls, "preProcessNode", "(Lorg/apache/lucene/queryparser/flexible/core/nodes/QueryNode;)Lorg/apache/lucene/queryparser/flexible/core/nodes/QueryNode;");
                  mids$[mid_postProcessNode_9b07be8595532de7] = env->getMethodID(cls, "postProcessNode", "(Lorg/apache/lucene/queryparser/flexible/core/nodes/QueryNode;)Lorg/apache/lucene/queryparser/flexible/core/nodes/QueryNode;");
                  mids$[mid_setChildrenOrder_e420eeaadf0bcd20] = env->getMethodID(cls, "setChildrenOrder", "(Ljava/util/List;)Ljava/util/List;");

                  class$ = new ::java::lang::Class(cls);
                  cls = (jclass) class$->this$;

                  TAG_ID = new ::java::lang::String(env->getStaticObjectField(cls, "TAG_ID", "Ljava/lang/String;"));
                  live$ = true;
                }
                return (jclass) class$->this$;
              }

              MultiTermRewriteMethodProcessor::MultiTermRewriteMethodProcessor() : ::org::apache::lucene::queryparser::flexible::core::processors::QueryNodeProcessorImpl(env->newObject(initializeClass, &mids$, mid_init$_f2cc1bce94666404)) {}
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace standard {
            namespace processors {
              static PyObject *t_MultiTermRewriteMethodProcessor_cast_(PyTypeObject *type, PyObject *arg);
              static PyObject *t_MultiTermRewriteMethodProcessor_instance_(PyTypeObject *type, PyObject *arg);
              static int t_MultiTermRewriteMethodProcessor_init_(t_MultiTermRewriteMethodProcessor *self, PyObject *args, PyObject *kwds);

              static PyMethodDef t_MultiTermRewriteMethodProcessor__methods_[] = {
                DECLARE_METHOD(t_MultiTermRewriteMethodProcessor, cast_, METH_O | METH_CLASS),
                DECLARE_METHOD(t_MultiTermRewriteMethodProcessor, instance_, METH_O | METH_CLASS),
                { NULL, NULL, 0, NULL }
              };

              static PyType_Slot PY_TYPE_SLOTS(MultiTermRewriteMethodProcessor)[] = {
                { Py_tp_methods, t_MultiTermRewriteMethodProcessor__methods_ },
                { Py_tp_init, (void *) t_MultiTermRewriteMethodProcessor_init_ },
                { 0, NULL }
              };

              static PyType_Def *PY_TYPE_BASES(MultiTermRewriteMethodProcessor)[] = {
                &PY_TYPE_DEF(::org::apache::lucene::queryparser::flexible::core::processors::QueryNodeProcessorImpl),
                NULL
              };

              DEFINE_TYPE(MultiTermRewriteMethodProcessor, t_MultiTermRewriteMethodProcessor, MultiTermRewriteMethodProcessor);

              void t_MultiTermRewriteMethodProcessor::install(PyObject *module)
              {
                installType(&PY_TYPE(MultiTermRewriteMethodProcessor), &PY_TYPE_DEF(MultiTermRewriteMethodProcessor), module, "MultiTermRewriteMethodProcessor", 0);
              }

              void t_MultiTermRewriteMethodProcessor::initialize(PyObject *module)
              {
                PyObject_SetAttrString((PyObject *) PY_TYPE(MultiTermRewriteMethodProcessor), "class_", make_descriptor(MultiTermRewriteMethodProcessor::initializeClass, 1));
                PyObject_SetAttrString((PyObject *) PY_TYPE(MultiTermRewriteMethodProcessor), "wrapfn_", make_descriptor(t_MultiTermRewriteMethodProcessor::wrap_jobject));
                PyObject_SetAttrString((PyObject *) PY_TYPE(MultiTermRewriteMethodProcessor), "boxfn_", make_descriptor(boxObject));
                env->getClass(MultiTermRewriteMethodProcessor::initializeClass);
                PyObject_SetAttrString((PyObject *) PY_TYPE(MultiTermRewriteMethodProcessor), "TAG_ID", make_descriptor(j2p(*MultiTermRewriteMethodProcessor::TAG_ID)));
              }

              static PyObject *t_MultiTermRewriteMethodProcessor_cast_(PyTypeObject *type, PyObject *arg)
              {
                if (!(arg = castCheck(arg, MultiTermRewriteMethodProcessor::initializeClass, 1)))
                  return NULL;
                return t_MultiTermRewriteMethodProcessor::wrap_Object(MultiTermRewriteMethodProcessor(((t_MultiTermRewriteMethodProcessor *) arg)->object.this$));
              }
              static PyObject *t_MultiTermRewriteMethodProcessor_instance_(PyTypeObject *type, PyObject *arg)
              {
                if (!castCheck(arg, MultiTermRewriteMethodProcessor::initializeClass, 0))
                  Py_RETURN_FALSE;
                Py_RETURN_TRUE;
              }

              static int t_MultiTermRewriteMethodProcessor_init_(t_MultiTermRewriteMethodProcessor *self, PyObject *args, PyObject *kwds)
              {
                MultiTermRewriteMethodProcessor object((jobject) NULL);

                INT_CALL(object = MultiTermRewriteMethodProcessor());
                self->object = object;

                return 0;
              }
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/index/Fields.h"
#include "org/apache/lucene/index/Terms.h"
#include "org/apache/lucene/index/Fields.h"
#include "java/lang/Class.h"
#include "java/lang/Iterable.h"
#include "java/util/Iterator.h"
#include "java/lang/String.h"
#include "java/io/IOException.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {

        ::java::lang::Class *Fields::class$ = NULL;
        jmethodID *Fields::mids$ = NULL;
        bool Fields::live$ = false;
        JArray< Fields > *Fields::EMPTY_ARRAY = NULL;

        jclass Fields::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/index/Fields");

            mids$ = new jmethodID[max_mid];
            mids$[mid_iterator_233a192dadb0917d] = env->getMethodID(cls, "iterator", "()Ljava/util/Iterator;");
            mids$[mid_size_9972fcc56b44e79d] = env->getMethodID(cls, "size", "()I");
            mids$[mid_terms_3976802ad88273cd] = env->getMethodID(cls, "terms", "(Ljava/lang/String;)Lorg/apache/lucene/index/Terms;");

            class$ = new ::java::lang::Class(cls);
            cls = (jclass) class$->this$;

            EMPTY_ARRAY = new JArray< Fields >(env->getStaticObjectField(cls, "EMPTY_ARRAY", "[Lorg/apache/lucene/index/Fields;"));
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        ::java::util::Iterator Fields::iterator() const
        {
          return ::java::util::Iterator(env->callObjectMethod(this$, mids$[mid_iterator_233a192dadb0917d]));
        }

        jint Fields::size() const
        {
          return env->callIntMethod(this$, mids$[mid_size_9972fcc56b44e79d]);
        }

        ::org::apache::lucene::index::Terms Fields::terms(const ::java::lang::String & a0) const
        {
          return ::org::apache::lucene::index::Terms(env->callObjectMethod(this$, mids$[mid_terms_3976802ad88273cd], a0.this$));
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {
        static PyObject *t_Fields_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_Fields_instance_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_Fields_iterator(t_Fields *self);
        static PyObject *t_Fields_size(t_Fields *self);
        static PyObject *t_Fields_terms(t_Fields *self, PyObject *arg);

        static PyMethodDef t_Fields__methods_[] = {
          DECLARE_METHOD(t_Fields, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_Fields, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_Fields, iterator, METH_NOARGS),
          DECLARE_METHOD(t_Fields, size, METH_NOARGS),
          DECLARE_METHOD(t_Fields, terms, METH_O),
          { NULL, NULL, 0, NULL }
        };

        static PyType_Slot PY_TYPE_SLOTS(Fields)[] = {
          { Py_tp_methods, t_Fields__methods_ },
          { Py_tp_init, (void *) abstract_init },
          { Py_tp_iter, (void *) ((PyObject *(*)(t_Fields *)) get_iterator< t_Fields >) },
          { Py_tp_iternext, (void *) 0 },
          { 0, NULL }
        };

        static PyType_Def *PY_TYPE_BASES(Fields)[] = {
          &PY_TYPE_DEF(::java::lang::Object),
          NULL
        };

        DEFINE_TYPE(Fields, t_Fields, Fields);

        void t_Fields::install(PyObject *module)
        {
          installType(&PY_TYPE(Fields), &PY_TYPE_DEF(Fields), module, "Fields", 0);
        }

        void t_Fields::initialize(PyObject *module)
        {
          PyObject_SetAttrString((PyObject *) PY_TYPE(Fields), "class_", make_descriptor(Fields::initializeClass, 1));
          PyObject_SetAttrString((PyObject *) PY_TYPE(Fields), "wrapfn_", make_descriptor(t_Fields::wrap_jobject));
          PyObject_SetAttrString((PyObject *) PY_TYPE(Fields), "boxfn_", make_descriptor(boxObject));
          env->getClass(Fields::initializeClass);
          PyObject_SetAttrString((PyObject *) PY_TYPE(Fields), "EMPTY_ARRAY", make_descriptor(JArray<jobject>(Fields::EMPTY_ARRAY->this$).wrap(t_Fields::wrap_jobject)));
        }

        static PyObject *t_Fields_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, Fields::initializeClass, 1)))
            return NULL;
          return t_Fields::wrap_Object(Fields(((t_Fields *) arg)->object.this$));
        }
        static PyObject *t_Fields_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, Fields::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static PyObject *t_Fields_iterator(t_Fields *self)
        {
          ::java::util::Iterator result((jobject) NULL);
          OBJ_CALL(result = self->object.iterator());
          return ::java::util::t_Iterator::wrap_Object(result, ::java::lang::PY_TYPE(String));
        }

        static PyObject *t_Fields_size(t_Fields *self)
        {
          jint result;
          OBJ_CALL(result = self->object.size());
          return PyLong_FromLong((long) result);
        }

        static PyObject *t_Fields_terms(t_Fields *self, PyObject *arg)
        {
          ::java::lang::String a0((jobject) NULL);
          ::org::apache::lucene::index::Terms result((jobject) NULL);

          if (!parseArg(arg, "s", &a0))
          {
            OBJ_CALL(result = self->object.terms(a0));
            return ::org::apache::lucene::index::t_Terms::wrap_Object(result);
          }

          PyErr_SetArgsError((PyObject *) self, "terms", arg);
          return NULL;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/util/FilterIterator.h"
#include "java/util/Iterator.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {

        ::java::lang::Class *FilterIterator::class$ = NULL;
        jmethodID *FilterIterator::mids$ = NULL;
        bool FilterIterator::live$ = false;

        jclass FilterIterator::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/util/FilterIterator");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_6a7e5049637ef964] = env->getMethodID(cls, "<init>", "(Ljava/util/Iterator;)V");
            mids$[mid_hasNext_8454bd5aa23fd11e] = env->getMethodID(cls, "hasNext", "()Z");
            mids$[mid_next_d6bcd06f3102c4d9] = env->getMethodID(cls, "next", "()Ljava/lang/Object;");
            mids$[mid_remove_f2cc1bce94666404] = env->getMethodID(cls, "remove", "()V");
            mids$[mid_predicateFunction_8b72f2dcdde6fd1d] = env->getMethodID(cls, "predicateFunction", "(Ljava/lang/Object;)Z");

            class$ = new ::java::lang::Class(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        FilterIterator::FilterIterator(const ::java::util::Iterator & a0) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_6a7e5049637ef964, a0.this$)) {}

        jboolean FilterIterator::hasNext() const
        {
          return env->callBooleanMethod(this$, mids$[mid_hasNext_8454bd5aa23fd11e]);
        }

        ::java::lang::Object FilterIterator::next() const
        {
          return ::java::lang::Object(env->callObjectMethod(this$, mids$[mid_next_d6bcd06f3102c4d9]));
        }

        void FilterIterator::remove() const
        {
          env->callVoidMethod(this$, mids$[mid_remove_f2cc1bce94666404]);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        static PyObject *t_FilterIterator_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_FilterIterator_instance_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_FilterIterator_of_(t_FilterIterator *self, PyObject *args);
        static int t_FilterIterator_init_(t_FilterIterator *self, PyObject *args, PyObject *kwds);
        static PyObject *t_FilterIterator_hasNext(t_FilterIterator *self);
        static PyObject *t_FilterIterator_next(t_FilterIterator *self);
        static PyObject *t_FilterIterator_remove(t_FilterIterator *self);
        static PyObject *t_FilterIterator_get__parameters_(t_FilterIterator *self, void *data);
        static PyGetSetDef t_FilterIterator__fields_[] = {
          DECLARE_GET_FIELD(t_FilterIterator, parameters_),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_FilterIterator__methods_[] = {
          DECLARE_METHOD(t_FilterIterator, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_FilterIterator, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_FilterIterator, of_, METH_VARARGS),
          DECLARE_METHOD(t_FilterIterator, hasNext, METH_NOARGS),
          DECLARE_METHOD(t_FilterIterator, next, METH_NOARGS),
          DECLARE_METHOD(t_FilterIterator, remove, METH_NOARGS),
          { NULL, NULL, 0, NULL }
        };

        static PyType_Slot PY_TYPE_SLOTS(FilterIterator)[] = {
          { Py_tp_methods, t_FilterIterator__methods_ },
          { Py_tp_init, (void *) t_FilterIterator_init_ },
          { Py_tp_getset, t_FilterIterator__fields_ },
          { Py_tp_iter, (void *) PyObject_SelfIter },
          { Py_tp_iternext, (void *) ((PyObject *(*)(::java::util::t_Iterator *)) get_generic_iterator_next< ::java::util::t_Iterator,::java::lang::t_Object >) },
          { 0, NULL }
        };

        static PyType_Def *PY_TYPE_BASES(FilterIterator)[] = {
          &PY_TYPE_DEF(::java::lang::Object),
          NULL
        };

        DEFINE_TYPE(FilterIterator, t_FilterIterator, FilterIterator);
        PyObject *t_FilterIterator::wrap_Object(const FilterIterator& object, PyTypeObject *p0, PyTypeObject *p1)
        {
          PyObject *obj = t_FilterIterator::wrap_Object(object);
          if (obj != NULL && obj != Py_None)
          {
            t_FilterIterator *self = (t_FilterIterator *) obj;
            self->parameters[0] = p0;
            self->parameters[1] = p1;
          }
          return obj;
        }

        PyObject *t_FilterIterator::wrap_jobject(const jobject& object, PyTypeObject *p0, PyTypeObject *p1)
        {
          PyObject *obj = t_FilterIterator::wrap_jobject(object);
          if (obj != NULL && obj != Py_None)
          {
            t_FilterIterator *self = (t_FilterIterator *) obj;
            self->parameters[0] = p0;
            self->parameters[1] = p1;
          }
          return obj;
        }

        void t_FilterIterator::install(PyObject *module)
        {
          installType(&PY_TYPE(FilterIterator), &PY_TYPE_DEF(FilterIterator), module, "FilterIterator", 0);
        }

        void t_FilterIterator::initialize(PyObject *module)
        {
          PyObject_SetAttrString((PyObject *) PY_TYPE(FilterIterator), "class_", make_descriptor(FilterIterator::initializeClass, 1));
          PyObject_SetAttrString((PyObject *) PY_TYPE(FilterIterator), "wrapfn_", make_descriptor(t_FilterIterator::wrap_jobject));
          PyObject_SetAttrString((PyObject *) PY_TYPE(FilterIterator), "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_FilterIterator_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, FilterIterator::initializeClass, 1)))
            return NULL;
          return t_FilterIterator::wrap_Object(FilterIterator(((t_FilterIterator *) arg)->object.this$));
        }
        static PyObject *t_FilterIterator_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, FilterIterator::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static PyObject *t_FilterIterator_of_(t_FilterIterator *self, PyObject *args)
        {
          if (!parseArg(args, "T", 2, &(self->parameters)))
            Py_RETURN_SELF;
          return PyErr_SetArgsError((PyObject *) self, "of_", args);
        }

        static int t_FilterIterator_init_(t_FilterIterator *self, PyObject *args, PyObject *kwds)
        {
          ::java::util::Iterator a0((jobject) NULL);
          PyTypeObject **p0;
          FilterIterator object((jobject) NULL);

          if (!parseArgs(args, "K", ::java::util::Iterator::initializeClass, &a0, &p0, ::java::util::t_Iterator::parameters_))
          {
            INT_CALL(object = FilterIterator(a0));
            self->object = object;
          }
          else
          {
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }

        static PyObject *t_FilterIterator_hasNext(t_FilterIterator *self)
        {
          jboolean result;
          OBJ_CALL(result = self->object.hasNext());
          Py_RETURN_BOOL(result);
        }

        static PyObject *t_FilterIterator_next(t_FilterIterator *self)
        {
          ::java::lang::Object result((jobject) NULL);
          OBJ_CALL(result = self->object.next());
          return self->parameters[0] != NULL ? wrapType(self->parameters[0], result.this$) : ::java::lang::t_Object::wrap_Object(result);
        }

        static PyObject *t_FilterIterator_remove(t_FilterIterator *self)
        {
          OBJ_CALL(self->object.remove());
          Py_RETURN_NONE;
        }
        static PyObject *t_FilterIterator_get__parameters_(t_FilterIterator *self, void *data)
        {
          return typeParameters(self->parameters, sizeof(self->parameters));
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/core/SimpleAnalyzer.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace core {

          ::java::lang::Class *SimpleAnalyzer::class$ = NULL;
          jmethodID *SimpleAnalyzer::mids$ = NULL;
          bool SimpleAnalyzer::live$ = false;

          jclass SimpleAnalyzer::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/core/SimpleAnalyzer");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_f2cc1bce94666404] = env->getMethodID(cls, "<init>", "()V");
              mids$[mid_createComponents_c22fd244b0553c1e] = env->getMethodID(cls, "createComponents", "(Ljava/lang/String;)Lorg/apache/lucene/analysis/Analyzer$TokenStreamComponents;");
              mids$[mid_normalize_e597989422f66fcd] = env->getMethodID(cls, "normalize", "(Ljava/lang/String;Lorg/apache/lucene/analysis/TokenStream;)Lorg/apache/lucene/analysis/TokenStream;");

              class$ = new ::java::lang::Class(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          SimpleAnalyzer::SimpleAnalyzer() : ::org::apache::lucene::analysis::Analyzer(env->newObject(initializeClass, &mids$, mid_init$_f2cc1bce94666404)) {}
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace core {
          static PyObject *t_SimpleAnalyzer_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_SimpleAnalyzer_instance_(PyTypeObject *type, PyObject *arg);
          static int t_SimpleAnalyzer_init_(t_SimpleAnalyzer *self, PyObject *args, PyObject *kwds);

          static PyMethodDef t_SimpleAnalyzer__methods_[] = {
            DECLARE_METHOD(t_SimpleAnalyzer, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_SimpleAnalyzer, instance_, METH_O | METH_CLASS),
            { NULL, NULL, 0, NULL }
          };

          static PyType_Slot PY_TYPE_SLOTS(SimpleAnalyzer)[] = {
            { Py_tp_methods, t_SimpleAnalyzer__methods_ },
            { Py_tp_init, (void *) t_SimpleAnalyzer_init_ },
            { 0, NULL }
          };

          static PyType_Def *PY_TYPE_BASES(SimpleAnalyzer)[] = {
            &PY_TYPE_DEF(::org::apache::lucene::analysis::Analyzer),
            NULL
          };

          DEFINE_TYPE(SimpleAnalyzer, t_SimpleAnalyzer, SimpleAnalyzer);

          void t_SimpleAnalyzer::install(PyObject *module)
          {
            installType(&PY_TYPE(SimpleAnalyzer), &PY_TYPE_DEF(SimpleAnalyzer), module, "SimpleAnalyzer", 0);
          }

          void t_SimpleAnalyzer::initialize(PyObject *module)
          {
            PyObject_SetAttrString((PyObject *) PY_TYPE(SimpleAnalyzer), "class_", make_descriptor(SimpleAnalyzer::initializeClass, 1));
            PyObject_SetAttrString((PyObject *) PY_TYPE(SimpleAnalyzer), "wrapfn_", make_descriptor(t_SimpleAnalyzer::wrap_jobject));
            PyObject_SetAttrString((PyObject *) PY_TYPE(SimpleAnalyzer), "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_SimpleAnalyzer_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, SimpleAnalyzer::initializeClass, 1)))
              return NULL;
            return t_SimpleAnalyzer::wrap_Object(SimpleAnalyzer(((t_SimpleAnalyzer *) arg)->object.this$));
          }
          static PyObject *t_SimpleAnalyzer_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, SimpleAnalyzer::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_SimpleAnalyzer_init_(t_SimpleAnalyzer *self, PyObject *args, PyObject *kwds)
          {
            SimpleAnalyzer object((jobject) NULL);

            INT_CALL(object = SimpleAnalyzer());
            self->object = object;

            return 0;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/uhighlight/OffsetsEnum.h"
#include "java/lang/Comparable.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/search/uhighlight/OffsetsEnum.h"
#include "java/io/Closeable.h"
#include "org/apache/lucene/util/BytesRef.h"
#include "java/lang/String.h"
#include "java/io/IOException.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace uhighlight {

          ::java::lang::Class *OffsetsEnum::class$ = NULL;
          jmethodID *OffsetsEnum::mids$ = NULL;
          bool OffsetsEnum::live$ = false;
          OffsetsEnum *OffsetsEnum::EMPTY = NULL;

          jclass OffsetsEnum::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/search/uhighlight/OffsetsEnum");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_f2cc1bce94666404] = env->getMethodID(cls, "<init>", "()V");
              mids$[mid_close_f2cc1bce94666404] = env->getMethodID(cls, "close", "()V");
              mids$[mid_compareTo_48fee69b089cc592] = env->getMethodID(cls, "compareTo", "(Lorg/apache/lucene/search/uhighlight/OffsetsEnum;)I");
              mids$[mid_endOffset_9972fcc56b44e79d] = env->getMethodID(cls, "endOffset", "()I");
              mids$[mid_freq_9972fcc56b44e79d] = env->getMethodID(cls, "freq", "()I");
              mids$[mid_getTerm_7af2ea2e37ce82b8] = env->getMethodID(cls, "getTerm", "()Lorg/apache/lucene/util/BytesRef;");
              mids$[mid_nextPosition_8454bd5aa23fd11e] = env->getMethodID(cls, "nextPosition", "()Z");
              mids$[mid_startOffset_9972fcc56b44e79d] = env->getMethodID(cls, "startOffset", "()I");
              mids$[mid_toString_db9b55ba01e03e4b] = env->getMethodID(cls, "toString", "()Ljava/lang/String;");

              class$ = new ::java::lang::Class(cls);
              cls = (jclass) class$->this$;

              EMPTY = new OffsetsEnum(env->getStaticObjectField(cls, "EMPTY", "Lorg/apache/lucene/search/uhighlight/OffsetsEnum;"));
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          OffsetsEnum::OffsetsEnum() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_f2cc1bce94666404)) {}

          void OffsetsEnum::close() const
          {
            env->callVoidMethod(this$, mids$[mid_close_f2cc1bce94666404]);
          }

          jint OffsetsEnum::compareTo(const OffsetsEnum & a0) const
          {
            return env->callIntMethod(this$, mids$[mid_compareTo_48fee69b089cc592], a0.this$);
          }

          jint OffsetsEnum::endOffset() const
          {
            return env->callIntMethod(this$, mids$[mid_endOffset_9972fcc56b44e79d]);
          }

          jint OffsetsEnum::freq() const
          {
            return env->callIntMethod(this$, mids$[mid_freq_9972fcc56b44e79d]);
          }

          ::org::apache::lucene::util::BytesRef OffsetsEnum::getTerm() const
          {
            return ::org::apache::lucene::util::BytesRef(env->callObjectMethod(this$, mids$[mid_getTerm_7af2ea2e37ce82b8]));
          }

          jboolean OffsetsEnum::nextPosition() const
          {
            return env->callBooleanMethod(this$, mids$[mid_nextPosition_8454bd5aa23fd11e]);
          }

          jint OffsetsEnum::startOffset() const
          {
            return env->callIntMethod(this$, mids$[mid_startOffset_9972fcc56b44e79d]);
          }

          ::java::lang::String OffsetsEnum::toString() const
          {
            return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_db9b55ba01e03e4b]));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"
#include "org/apache/lucene/search/uhighlight/OffsetsEnum$MultiOffsetsEnum.h"
#include "org/apache/lucene/search/uhighlight/OffsetsEnum$OfMatchesIterator.h"
#include "org/apache/lucene/search/uhighlight/OffsetsEnum$OfMatchesIteratorWithSubs.h"
#include "org/apache/lucene/search/uhighlight/OffsetsEnum$OfPostings.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace uhighlight {
          static PyObject *t_OffsetsEnum_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_OffsetsEnum_instance_(PyTypeObject *type, PyObject *arg);
          static int t_OffsetsEnum_init_(t_OffsetsEnum *self, PyObject *args, PyObject *kwds);
          static PyObject *t_OffsetsEnum_close(t_OffsetsEnum *self);
          static PyObject *t_OffsetsEnum_compareTo(t_OffsetsEnum *self, PyObject *arg);
          static PyObject *t_OffsetsEnum_endOffset(t_OffsetsEnum *self);
          static PyObject *t_OffsetsEnum_freq(t_OffsetsEnum *self);
          static PyObject *t_OffsetsEnum_getTerm(t_OffsetsEnum *self);
          static PyObject *t_OffsetsEnum_nextPosition(t_OffsetsEnum *self);
          static PyObject *t_OffsetsEnum_startOffset(t_OffsetsEnum *self);
          static PyObject *t_OffsetsEnum_toString(t_OffsetsEnum *self, PyObject *args);
          static PyObject *t_OffsetsEnum_get__term(t_OffsetsEnum *self, void *data);
          static PyGetSetDef t_OffsetsEnum__fields_[] = {
            DECLARE_GET_FIELD(t_OffsetsEnum, term),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_OffsetsEnum__methods_[] = {
            DECLARE_METHOD(t_OffsetsEnum, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_OffsetsEnum, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_OffsetsEnum, close, METH_NOARGS),
            DECLARE_METHOD(t_OffsetsEnum, compareTo, METH_O),
            DECLARE_METHOD(t_OffsetsEnum, endOffset, METH_NOARGS),
            DECLARE_METHOD(t_OffsetsEnum, freq, METH_NOARGS),
            DECLARE_METHOD(t_OffsetsEnum, getTerm, METH_NOARGS),
            DECLARE_METHOD(t_OffsetsEnum, nextPosition, METH_NOARGS),
            DECLARE_METHOD(t_OffsetsEnum, startOffset, METH_NOARGS),
            DECLARE_METHOD(t_OffsetsEnum, toString, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          static PyType_Slot PY_TYPE_SLOTS(OffsetsEnum)[] = {
            { Py_tp_methods, t_OffsetsEnum__methods_ },
            { Py_tp_init, (void *) t_OffsetsEnum_init_ },
            { Py_tp_getset, t_OffsetsEnum__fields_ },
            { 0, NULL }
          };

          static PyType_Def *PY_TYPE_BASES(OffsetsEnum)[] = {
            &PY_TYPE_DEF(::java::lang::Object),
            NULL
          };

          DEFINE_TYPE(OffsetsEnum, t_OffsetsEnum, OffsetsEnum);

          void t_OffsetsEnum::install(PyObject *module)
          {
            installType(&PY_TYPE(OffsetsEnum), &PY_TYPE_DEF(OffsetsEnum), module, "OffsetsEnum", 0);
            PyObject_SetAttrString((PyObject *) PY_TYPE(OffsetsEnum), "MultiOffsetsEnum", make_descriptor(&PY_TYPE_DEF(OffsetsEnum$MultiOffsetsEnum)));
            PyObject_SetAttrString((PyObject *) PY_TYPE(OffsetsEnum), "OfMatchesIterator", make_descriptor(&PY_TYPE_DEF(OffsetsEnum$OfMatchesIterator)));
            PyObject_SetAttrString((PyObject *) PY_TYPE(OffsetsEnum), "OfMatchesIteratorWithSubs", make_descriptor(&PY_TYPE_DEF(OffsetsEnum$OfMatchesIteratorWithSubs)));
            PyObject_SetAttrString((PyObject *) PY_TYPE(OffsetsEnum), "OfPostings", make_descriptor(&PY_TYPE_DEF(OffsetsEnum$OfPostings)));
          }

          void t_OffsetsEnum::initialize(PyObject *module)
          {
            PyObject_SetAttrString((PyObject *) PY_TYPE(OffsetsEnum), "class_", make_descriptor(OffsetsEnum::initializeClass, 1));
            PyObject_SetAttrString((PyObject *) PY_TYPE(OffsetsEnum), "wrapfn_", make_descriptor(t_OffsetsEnum::wrap_jobject));
            PyObject_SetAttrString((PyObject *) PY_TYPE(OffsetsEnum), "boxfn_", make_descriptor(boxObject));
            env->getClass(OffsetsEnum::initializeClass);
            PyObject_SetAttrString((PyObject *) PY_TYPE(OffsetsEnum), "EMPTY", make_descriptor(t_OffsetsEnum::wrap_Object(*OffsetsEnum::EMPTY)));
          }

          static PyObject *t_OffsetsEnum_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, OffsetsEnum::initializeClass, 1)))
              return NULL;
            return t_OffsetsEnum::wrap_Object(OffsetsEnum(((t_OffsetsEnum *) arg)->object.this$));
          }
          static PyObject *t_OffsetsEnum_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, OffsetsEnum::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_OffsetsEnum_init_(t_OffsetsEnum *self, PyObject *args, PyObject *kwds)
          {
            OffsetsEnum object((jobject) NULL);

            INT_CALL(object = OffsetsEnum());
            self->object = object;

            return 0;
          }

          static PyObject *t_OffsetsEnum_close(t_OffsetsEnum *self)
          {
            OBJ_CALL(self->object.close());
            Py_RETURN_NONE;
          }

          static PyObject *t_OffsetsEnum_compareTo(t_OffsetsEnum *self, PyObject *arg)
          {
            OffsetsEnum a0((jobject) NULL);
            jint result;

            if (!parseArg(arg, "k", OffsetsEnum::initializeClass, &a0))
            {
              OBJ_CALL(result = self->object.compareTo(a0));
              return PyLong_FromLong((long) result);
            }

            PyErr_SetArgsError((PyObject *) self, "compareTo", arg);
            return NULL;
          }

          static PyObject *t_OffsetsEnum_endOffset(t_OffsetsEnum *self)
          {
            jint result;
            OBJ_CALL(result = self->object.endOffset());
            return PyLong_FromLong((long) result);
          }

          static PyObject *t_OffsetsEnum_freq(t_OffsetsEnum *self)
          {
            jint result;
            OBJ_CALL(result = self->object.freq());
            return PyLong_FromLong((long) result);
          }

          static PyObject *t_OffsetsEnum_getTerm(t_OffsetsEnum *self)
          {
            ::org::apache::lucene::util::BytesRef result((jobject) NULL);
            OBJ_CALL(result = self->object.getTerm());
            return ::org::apache::lucene::util::t_BytesRef::wrap_Object(result);
          }

          static PyObject *t_OffsetsEnum_nextPosition(t_OffsetsEnum *self)
          {
            jboolean result;
            OBJ_CALL(result = self->object.nextPosition());
            Py_RETURN_BOOL(result);
          }

          static PyObject *t_OffsetsEnum_startOffset(t_OffsetsEnum *self)
          {
            jint result;
            OBJ_CALL(result = self->object.startOffset());
            return PyLong_FromLong((long) result);
          }

          static PyObject *t_OffsetsEnum_toString(t_OffsetsEnum *self, PyObject *args)
          {
            ::java::lang::String result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.toString());
              return j2p(result);
            }

            return callSuper(PY_TYPE(OffsetsEnum), (PyObject *) self, "toString", args, 2);
          }

          static PyObject *t_OffsetsEnum_get__term(t_OffsetsEnum *self, void *data)
          {
            ::org::apache::lucene::util::BytesRef value((jobject) NULL);
            OBJ_CALL(value = self->object.getTerm());
            return ::org::apache::lucene::util::t_BytesRef::wrap_Object(value);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/util/Constants.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {

        ::java::lang::Class *Constants::class$ = NULL;
        jmethodID *Constants::mids$ = NULL;
        bool Constants::live$ = false;
        jboolean Constants::FREE_BSD = (jboolean) 0;
        ::java::lang::String *Constants::JAVA_VENDOR = NULL;
        ::java::lang::String *Constants::JAVA_VERSION = NULL;
        jboolean Constants::JRE_IS_64BIT = (jboolean) 0;
        jboolean Constants::JRE_IS_MINIMUM_JAVA11 = (jboolean) 0;
        jboolean Constants::JRE_IS_MINIMUM_JAVA8 = (jboolean) 0;
        jboolean Constants::JRE_IS_MINIMUM_JAVA9 = (jboolean) 0;
        ::java::lang::String *Constants::JVM_NAME = NULL;
        ::java::lang::String *Constants::JVM_SPEC_VERSION = NULL;
        ::java::lang::String *Constants::JVM_VENDOR = NULL;
        ::java::lang::String *Constants::JVM_VERSION = NULL;
        jboolean Constants::LINUX = (jboolean) 0;
        ::java::lang::String *Constants::LUCENE_MAIN_VERSION = NULL;
        ::java::lang::String *Constants::LUCENE_VERSION = NULL;
        jboolean Constants::MAC_OS_X = (jboolean) 0;
        ::java::lang::String *Constants::OS_ARCH = NULL;
        ::java::lang::String *Constants::OS_NAME = NULL;
        ::java::lang::String *Constants::OS_VERSION = NULL;
        jboolean Constants::SUN_OS = (jboolean) 0;
        jboolean Constants::WINDOWS = (jboolean) 0;

        jclass Constants::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/util/Constants");

            class$ = new ::java::lang::Class(cls);
            cls = (jclass) class$->this$;

            FREE_BSD = env->getStaticBooleanField(cls, "FREE_BSD");
            JAVA_VENDOR = new ::java::lang::String(env->getStaticObjectField(cls, "JAVA_VENDOR", "Ljava/lang/String;"));
            JAVA_VERSION = new ::java::lang::String(env->getStaticObjectField(cls, "JAVA_VERSION", "Ljava/lang/String;"));
            JRE_IS_64BIT = env->getStaticBooleanField(cls, "JRE_IS_64BIT");
            JRE_IS_MINIMUM_JAVA11 = env->getStaticBooleanField(cls, "JRE_IS_MINIMUM_JAVA11");
            JRE_IS_MINIMUM_JAVA8 = env->getStaticBooleanField(cls, "JRE_IS_MINIMUM_JAVA8");
            JRE_IS_MINIMUM_JAVA9 = env->getStaticBooleanField(cls, "JRE_IS_MINIMUM_JAVA9");
            JVM_NAME = new ::java::lang::String(env->getStaticObjectField(cls, "JVM_NAME", "Ljava/lang/String;"));
            JVM_SPEC_VERSION = new ::java::lang::String(env->getStaticObjectField(cls, "JVM_SPEC_VERSION", "Ljava/lang/String;"));
            JVM_VENDOR = new ::java::lang::String(env->getStaticObjectField(cls, "JVM_VENDOR", "Ljava/lang/String;"));
            JVM_VERSION = new ::java::lang::String(env->getStaticObjectField(cls, "JVM_VERSION", "Ljava/lang/String;"));
            LINUX = env->getStaticBooleanField(cls, "LINUX");
            LUCENE_MAIN_VERSION = new ::java::lang::String(env->getStaticObjectField(cls, "LUCENE_MAIN_VERSION", "Ljava/lang/String;"));
            LUCENE_VERSION = new ::java::lang::String(env->getStaticObjectField(cls, "LUCENE_VERSION", "Ljava/lang/String;"));
            MAC_OS_X = env->getStaticBooleanField(cls, "MAC_OS_X");
            OS_ARCH = new ::java::lang::String(env->getStaticObjectField(cls, "OS_ARCH", "Ljava/lang/String;"));
            OS_NAME = new ::java::lang::String(env->getStaticObjectField(cls, "OS_NAME", "Ljava/lang/String;"));
            OS_VERSION = new ::java::lang::String(env->getStaticObjectField(cls, "OS_VERSION", "Ljava/lang/String;"));
            SUN_OS = env->getStaticBooleanField(cls, "SUN_OS");
            WINDOWS = env->getStaticBooleanField(cls, "WINDOWS");
            live$ = true;
          }
          return (jclass) class$->this$;
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        static PyObject *t_Constants_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_Constants_instance_(PyTypeObject *type, PyObject *arg);

        static PyMethodDef t_Constants__methods_[] = {
          DECLARE_METHOD(t_Constants, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_Constants, instance_, METH_O | METH_CLASS),
          { NULL, NULL, 0, NULL }
        };

        static PyType_Slot PY_TYPE_SLOTS(Constants)[] = {
          { Py_tp_methods, t_Constants__methods_ },
          { Py_tp_init, (void *) abstract_init },
          { 0, NULL }
        };

        static PyType_Def *PY_TYPE_BASES(Constants)[] = {
          &PY_TYPE_DEF(::java::lang::Object),
          NULL
        };

        DEFINE_TYPE(Constants, t_Constants, Constants);

        void t_Constants::install(PyObject *module)
        {
          installType(&PY_TYPE(Constants), &PY_TYPE_DEF(Constants), module, "Constants", 0);
        }

        void t_Constants::initialize(PyObject *module)
        {
          PyObject_SetAttrString((PyObject *) PY_TYPE(Constants), "class_", make_descriptor(Constants::initializeClass, 1));
          PyObject_SetAttrString((PyObject *) PY_TYPE(Constants), "wrapfn_", make_descriptor(t_Constants::wrap_jobject));
          PyObject_SetAttrString((PyObject *) PY_TYPE(Constants), "boxfn_", make_descriptor(boxObject));
          env->getClass(Constants::initializeClass);
          PyObject_SetAttrString((PyObject *) PY_TYPE(Constants), "FREE_BSD", make_descriptor(Constants::FREE_BSD));
          PyObject_SetAttrString((PyObject *) PY_TYPE(Constants), "JAVA_VENDOR", make_descriptor(j2p(*Constants::JAVA_VENDOR)));
          PyObject_SetAttrString((PyObject *) PY_TYPE(Constants), "JAVA_VERSION", make_descriptor(j2p(*Constants::JAVA_VERSION)));
          PyObject_SetAttrString((PyObject *) PY_TYPE(Constants), "JRE_IS_64BIT", make_descriptor(Constants::JRE_IS_64BIT));
          PyObject_SetAttrString((PyObject *) PY_TYPE(Constants), "JRE_IS_MINIMUM_JAVA11", make_descriptor(Constants::JRE_IS_MINIMUM_JAVA11));
          PyObject_SetAttrString((PyObject *) PY_TYPE(Constants), "JRE_IS_MINIMUM_JAVA8", make_descriptor(Constants::JRE_IS_MINIMUM_JAVA8));
          PyObject_SetAttrString((PyObject *) PY_TYPE(Constants), "JRE_IS_MINIMUM_JAVA9", make_descriptor(Constants::JRE_IS_MINIMUM_JAVA9));
          PyObject_SetAttrString((PyObject *) PY_TYPE(Constants), "JVM_NAME", make_descriptor(j2p(*Constants::JVM_NAME)));
          PyObject_SetAttrString((PyObject *) PY_TYPE(Constants), "JVM_SPEC_VERSION", make_descriptor(j2p(*Constants::JVM_SPEC_VERSION)));
          PyObject_SetAttrString((PyObject *) PY_TYPE(Constants), "JVM_VENDOR", make_descriptor(j2p(*Constants::JVM_VENDOR)));
          PyObject_SetAttrString((PyObject *) PY_TYPE(Constants), "JVM_VERSION", make_descriptor(j2p(*Constants::JVM_VERSION)));
          PyObject_SetAttrString((PyObject *) PY_TYPE(Constants), "LINUX", make_descriptor(Constants::LINUX));
          PyObject_SetAttrString((PyObject *) PY_TYPE(Constants), "LUCENE_MAIN_VERSION", make_descriptor(j2p(*Constants::LUCENE_MAIN_VERSION)));
          PyObject_SetAttrString((PyObject *) PY_TYPE(Constants), "LUCENE_VERSION", make_descriptor(j2p(*Constants::LUCENE_VERSION)));
          PyObject_SetAttrString((PyObject *) PY_TYPE(Constants), "MAC_OS_X", make_descriptor(Constants::MAC_OS_X));
          PyObject_SetAttrString((PyObject *) PY_TYPE(Constants), "OS_ARCH", make_descriptor(j2p(*Constants::OS_ARCH)));
          PyObject_SetAttrString((PyObject *) PY_TYPE(Constants), "OS_NAME", make_descriptor(j2p(*Constants::OS_NAME)));
          PyObject_SetAttrString((PyObject *) PY_TYPE(Constants), "OS_VERSION", make_descriptor(j2p(*Constants::OS_VERSION)));
          PyObject_SetAttrString((PyObject *) PY_TYPE(Constants), "SUN_OS", make_descriptor(Constants::SUN_OS));
          PyObject_SetAttrString((PyObject *) PY_TYPE(Constants), "WINDOWS", make_descriptor(Constants::WINDOWS));
        }

        static PyObject *t_Constants_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, Constants::initializeClass, 1)))
            return NULL;
          return t_Constants::wrap_Object(Constants(((t_Constants *) arg)->object.this$));
        }
        static PyObject *t_Constants_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, Constants::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queryparser/flexible/standard/parser/TokenMgrError.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace standard {
            namespace parser {

              ::java::lang::Class *TokenMgrError::class$ = NULL;
              jmethodID *TokenMgrError::mids$ = NULL;
              bool TokenMgrError::live$ = false;

              jclass TokenMgrError::initializeClass(bool getOnly)
              {
                if (getOnly)
                  return (jclass) (live$ ? class$->this$ : NULL);
                if (class$ == NULL)
                {
                  jclass cls = (jclass) env->findClass("org/apache/lucene/queryparser/flexible/standard/parser/TokenMgrError");

                  mids$ = new jmethodID[max_mid];
                  mids$[mid_init$_f2cc1bce94666404] = env->getMethodID(cls, "<init>", "()V");
                  mids$[mid_init$_3fb1dae8d4037984] = env->getMethodID(cls, "<init>", "(Ljava/lang/String;I)V");
                  mids$[mid_init$_995f32485faba072] = env->getMethodID(cls, "<init>", "(ZIIILjava/lang/String;CI)V");
                  mids$[mid_getMessage_db9b55ba01e03e4b] = env->getMethodID(cls, "getMessage", "()Ljava/lang/String;");
                  mids$[mid_addEscapes_9bfa75c9f141b67f] = env->getStaticMethodID(cls, "addEscapes", "(Ljava/lang/String;)Ljava/lang/String;");
                  mids$[mid_LexicalError_22e55ea20d3997c4] = env->getStaticMethodID(cls, "LexicalError", "(ZIIILjava/lang/String;C)Ljava/lang/String;");

                  class$ = new ::java::lang::Class(cls);
                  live$ = true;
                }
                return (jclass) class$->this$;
              }

              TokenMgrError::TokenMgrError() : ::java::lang::Error(env->newObject(initializeClass, &mids$, mid_init$_f2cc1bce94666404)) {}

              TokenMgrError::TokenMgrError(const ::java::lang::String & a0, jint a1) : ::java::lang::Error(env->newObject(initializeClass, &mids$, mid_init$_3fb1dae8d4037984, a0.this$, a1)) {}

              TokenMgrError::TokenMgrError(jboolean a0, jint a1, jint a2, jint a3, const ::java::lang::String & a4, jchar a5, jint a6) : ::java::lang::Error(env->newObject(initializeClass, &mids$, mid_init$_995f32485faba072, a0, a1, a2, a3, a4.this$, a5, a6)) {}

              ::java::lang::String TokenMgrError::getMessage() const
              {
                return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_getMessage_db9b55ba01e03e4b]));
              }
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace standard {
            namespace parser {
              static PyObject *t_TokenMgrError_cast_(PyTypeObject *type, PyObject *arg);
              static PyObject *t_TokenMgrError_instance_(PyTypeObject *type, PyObject *arg);
              static int t_TokenMgrError_init_(t_TokenMgrError *self, PyObject *args, PyObject *kwds);
              static PyObject *t_TokenMgrError_getMessage(t_TokenMgrError *self, PyObject *args);
              static PyObject *t_TokenMgrError_get__message(t_TokenMgrError *self, void *data);
              static PyGetSetDef t_TokenMgrError__fields_[] = {
                DECLARE_GET_FIELD(t_TokenMgrError, message),
                { NULL, NULL, NULL, NULL, NULL }
              };

              static PyMethodDef t_TokenMgrError__methods_[] = {
                DECLARE_METHOD(t_TokenMgrError, cast_, METH_O | METH_CLASS),
                DECLARE_METHOD(t_TokenMgrError, instance_, METH_O | METH_CLASS),
                DECLARE_METHOD(t_TokenMgrError, getMessage, METH_VARARGS),
                { NULL, NULL, 0, NULL }
              };

              static PyType_Slot PY_TYPE_SLOTS(TokenMgrError)[] = {
                { Py_tp_methods, t_TokenMgrError__methods_ },
                { Py_tp_init, (void *) t_TokenMgrError_init_ },
                { Py_tp_getset, t_TokenMgrError__fields_ },
                { 0, NULL }
              };

              static PyType_Def *PY_TYPE_BASES(TokenMgrError)[] = {
                &PY_TYPE_DEF(::java::lang::Error),
                NULL
              };

              DEFINE_TYPE(TokenMgrError, t_TokenMgrError, TokenMgrError);

              void t_TokenMgrError::install(PyObject *module)
              {
                installType(&PY_TYPE(TokenMgrError), &PY_TYPE_DEF(TokenMgrError), module, "TokenMgrError", 0);
              }

              void t_TokenMgrError::initialize(PyObject *module)
              {
                PyObject_SetAttrString((PyObject *) PY_TYPE(TokenMgrError), "class_", make_descriptor(TokenMgrError::initializeClass, 1));
                PyObject_SetAttrString((PyObject *) PY_TYPE(TokenMgrError), "wrapfn_", make_descriptor(t_TokenMgrError::wrap_jobject));
                PyObject_SetAttrString((PyObject *) PY_TYPE(TokenMgrError), "boxfn_", make_descriptor(boxObject));
              }

              static PyObject *t_TokenMgrError_cast_(PyTypeObject *type, PyObject *arg)
              {
                if (!(arg = castCheck(arg, TokenMgrError::initializeClass, 1)))
                  return NULL;
                return t_TokenMgrError::wrap_Object(TokenMgrError(((t_TokenMgrError *) arg)->object.this$));
              }
              static PyObject *t_TokenMgrError_instance_(PyTypeObject *type, PyObject *arg)
              {
                if (!castCheck(arg, TokenMgrError::initializeClass, 0))
                  Py_RETURN_FALSE;
                Py_RETURN_TRUE;
              }

              static int t_TokenMgrError_init_(t_TokenMgrError *self, PyObject *args, PyObject *kwds)
              {
                switch (PyTuple_GET_SIZE(args)) {
                 case 0:
                  {
                    TokenMgrError object((jobject) NULL);

                    INT_CALL(object = TokenMgrError());
                    self->object = object;
                    break;
                  }
                 case 2:
                  {
                    ::java::lang::String a0((jobject) NULL);
                    jint a1;
                    TokenMgrError object((jobject) NULL);

                    if (!parseArgs(args, "sI", &a0, &a1))
                    {
                      INT_CALL(object = TokenMgrError(a0, a1));
                      self->object = object;
                      break;
                    }
                  }
                  goto err;
                 case 7:
                  {
                    jboolean a0;
                    jint a1;
                    jint a2;
                    jint a3;
                    ::java::lang::String a4((jobject) NULL);
                    jchar a5;
                    jint a6;
                    TokenMgrError object((jobject) NULL);

                    if (!parseArgs(args, "ZIIIsCI", &a0, &a1, &a2, &a3, &a4, &a5, &a6))
                    {
                      INT_CALL(object = TokenMgrError(a0, a1, a2, a3, a4, a5, a6));
                      self->object = object;
                      break;
                    }
                  }
                 default:
                 err:
                  PyErr_SetArgsError((PyObject *) self, "__init__", args);
                  return -1;
                }

                return 0;
              }

              static PyObject *t_TokenMgrError_getMessage(t_TokenMgrError *self, PyObject *args)
              {
                ::java::lang::String result((jobject) NULL);

                if (!parseArgs(args, ""))
                {
                  OBJ_CALL(result = self->object.getMessage());
                  return j2p(result);
                }

                return callSuper(PY_TYPE(TokenMgrError), (PyObject *) self, "getMessage", args, 2);
              }

              static PyObject *t_TokenMgrError_get__message(t_TokenMgrError *self, void *data)
              {
                ::java::lang::String value((jobject) NULL);
                OBJ_CALL(value = self->object.getMessage());
                return j2p(value);
              }
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/geo/SimpleWKTShapeParser$ShapeType.h"
#include "org/apache/lucene/geo/SimpleWKTShapeParser$ShapeType.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace geo {

        ::java::lang::Class *SimpleWKTShapeParser$ShapeType::class$ = NULL;
        jmethodID *SimpleWKTShapeParser$ShapeType::mids$ = NULL;
        bool SimpleWKTShapeParser$ShapeType::live$ = false;
        SimpleWKTShapeParser$ShapeType *SimpleWKTShapeParser$ShapeType::ENVELOPE = NULL;
        SimpleWKTShapeParser$ShapeType *SimpleWKTShapeParser$ShapeType::GEOMETRYCOLLECTION = NULL;
        SimpleWKTShapeParser$ShapeType *SimpleWKTShapeParser$ShapeType::LINESTRING = NULL;
        SimpleWKTShapeParser$ShapeType *SimpleWKTShapeParser$ShapeType::MULTILINESTRING = NULL;
        SimpleWKTShapeParser$ShapeType *SimpleWKTShapeParser$ShapeType::MULTIPOINT = NULL;
        SimpleWKTShapeParser$ShapeType *SimpleWKTShapeParser$ShapeType::MULTIPOLYGON = NULL;
        SimpleWKTShapeParser$ShapeType *SimpleWKTShapeParser$ShapeType::POINT = NULL;
        SimpleWKTShapeParser$ShapeType *SimpleWKTShapeParser$ShapeType::POLYGON = NULL;

        jclass SimpleWKTShapeParser$ShapeType::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/geo/SimpleWKTShapeParser$ShapeType");

            mids$ = new jmethodID[max_mid];
            mids$[mid_forName_7a451c652215bc4b] = env->getStaticMethodID(cls, "forName", "(Ljava/lang/String;)Lorg/apache/lucene/geo/SimpleWKTShapeParser$ShapeType;");
            mids$[mid_valueOf_7a451c652215bc4b] = env->getStaticMethodID(cls, "valueOf", "(Ljava/lang/String;)Lorg/apache/lucene/geo/SimpleWKTShapeParser$ShapeType;");
            mids$[mid_values_f0efee1493daf2bf] = env->getStaticMethodID(cls, "values", "()[Lorg/apache/lucene/geo/SimpleWKTShapeParser$ShapeType;");
            mids$[mid_wktName_db9b55ba01e03e4b] = env->getMethodID(cls, "wktName", "()Ljava/lang/String;");
            mids$[mid_typename_db9b55ba01e03e4b] = env->getMethodID(cls, "typename", "()Ljava/lang/String;");

            class$ = new ::java::lang::Class(cls);
            cls = (jclass) class$->this$;

            ENVELOPE = new SimpleWKTShapeParser$ShapeType(env->getStaticObjectField(cls, "ENVELOPE", "Lorg/apache/lucene/geo/SimpleWKTShapeParser$ShapeType;"));
            GEOMETRYCOLLECTION = new SimpleWKTShapeParser$ShapeType(env->getStaticObjectField(cls, "GEOMETRYCOLLECTION", "Lorg/apache/lucene/geo/SimpleWKTShapeParser$ShapeType;"));
            LINESTRING = new SimpleWKTShapeParser$ShapeType(env->getStaticObjectField(cls, "LINESTRING", "Lorg/apache/lucene/geo/SimpleWKTShapeParser$ShapeType;"));
            MULTILINESTRING = new SimpleWKTShapeParser$ShapeType(env->getStaticObjectField(cls, "MULTILINESTRING", "Lorg/apache/lucene/geo/SimpleWKTShapeParser$ShapeType;"));
            MULTIPOINT = new SimpleWKTShapeParser$ShapeType(env->getStaticObjectField(cls, "MULTIPOINT", "Lorg/apache/lucene/geo/SimpleWKTShapeParser$ShapeType;"));
            MULTIPOLYGON = new SimpleWKTShapeParser$ShapeType(env->getStaticObjectField(cls, "MULTIPOLYGON", "Lorg/apache/lucene/geo/SimpleWKTShapeParser$ShapeType;"));
            POINT = new SimpleWKTShapeParser$ShapeType(env->getStaticObjectField(cls, "POINT", "Lorg/apache/lucene/geo/SimpleWKTShapeParser$ShapeType;"));
            POLYGON = new SimpleWKTShapeParser$ShapeType(env->getStaticObjectField(cls, "POLYGON", "Lorg/apache/lucene/geo/SimpleWKTShapeParser$ShapeType;"));
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        SimpleWKTShapeParser$ShapeType SimpleWKTShapeParser$ShapeType::forName(const ::java::lang::String & a0)
        {
          jclass cls = env->getClass(initializeClass);
          return SimpleWKTShapeParser$ShapeType(env->callStaticObjectMethod(cls, mids$[mid_forName_7a451c652215bc4b], a0.this$));
        }

        SimpleWKTShapeParser$ShapeType SimpleWKTShapeParser$ShapeType::valueOf(const ::java::lang::String & a0)
        {
          jclass cls = env->getClass(initializeClass);
          return SimpleWKTShapeParser$ShapeType(env->callStaticObjectMethod(cls, mids$[mid_valueOf_7a451c652215bc4b], a0.this$));
        }

        JArray< SimpleWKTShapeParser$ShapeType > SimpleWKTShapeParser$ShapeType::values()
        {
          jclass cls = env->getClass(initializeClass);
          return JArray< SimpleWKTShapeParser$ShapeType >(env->callStaticObjectMethod(cls, mids$[mid_values_f0efee1493daf2bf]));
        }

        ::java::lang::String SimpleWKTShapeParser$ShapeType::wktName() const
        {
          return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_wktName_db9b55ba01e03e4b]));
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace geo {
        static PyObject *t_SimpleWKTShapeParser$ShapeType_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_SimpleWKTShapeParser$ShapeType_instance_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_SimpleWKTShapeParser$ShapeType_of_(t_SimpleWKTShapeParser$ShapeType *self, PyObject *args);
        static PyObject *t_SimpleWKTShapeParser$ShapeType_forName(PyTypeObject *type, PyObject *arg);
        static PyObject *t_SimpleWKTShapeParser$ShapeType_valueOf(PyTypeObject *type, PyObject *args);
        static PyObject *t_SimpleWKTShapeParser$ShapeType_values(PyTypeObject *type);
        static PyObject *t_SimpleWKTShapeParser$ShapeType_wktName(t_SimpleWKTShapeParser$ShapeType *self);
        static PyObject *t_SimpleWKTShapeParser$ShapeType_get__parameters_(t_SimpleWKTShapeParser$ShapeType *self, void *data);
        static PyGetSetDef t_SimpleWKTShapeParser$ShapeType__fields_[] = {
          DECLARE_GET_FIELD(t_SimpleWKTShapeParser$ShapeType, parameters_),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_SimpleWKTShapeParser$ShapeType__methods_[] = {
          DECLARE_METHOD(t_SimpleWKTShapeParser$ShapeType, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_SimpleWKTShapeParser$ShapeType, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_SimpleWKTShapeParser$ShapeType, of_, METH_VARARGS),
          DECLARE_METHOD(t_SimpleWKTShapeParser$ShapeType, forName, METH_O | METH_CLASS),
          DECLARE_METHOD(t_SimpleWKTShapeParser$ShapeType, valueOf, METH_VARARGS | METH_CLASS),
          DECLARE_METHOD(t_SimpleWKTShapeParser$ShapeType, values, METH_NOARGS | METH_CLASS),
          DECLARE_METHOD(t_SimpleWKTShapeParser$ShapeType, wktName, METH_NOARGS),
          { NULL, NULL, 0, NULL }
        };

        static PyType_Slot PY_TYPE_SLOTS(SimpleWKTShapeParser$ShapeType)[] = {
          { Py_tp_methods, t_SimpleWKTShapeParser$ShapeType__methods_ },
          { Py_tp_init, (void *) abstract_init },
          { Py_tp_getset, t_SimpleWKTShapeParser$ShapeType__fields_ },
          { 0, NULL }
        };

        static PyType_Def *PY_TYPE_BASES(SimpleWKTShapeParser$ShapeType)[] = {
          &PY_TYPE_DEF(::java::lang::Enum),
          NULL
        };

        DEFINE_TYPE(SimpleWKTShapeParser$ShapeType, t_SimpleWKTShapeParser$ShapeType, SimpleWKTShapeParser$ShapeType);
        PyObject *t_SimpleWKTShapeParser$ShapeType::wrap_Object(const SimpleWKTShapeParser$ShapeType& object, PyTypeObject *p0)
        {
          PyObject *obj = t_SimpleWKTShapeParser$ShapeType::wrap_Object(object);
          if (obj != NULL && obj != Py_None)
          {
            t_SimpleWKTShapeParser$ShapeType *self = (t_SimpleWKTShapeParser$ShapeType *) obj;
            self->parameters[0] = p0;
          }
          return obj;
        }

        PyObject *t_SimpleWKTShapeParser$ShapeType::wrap_jobject(const jobject& object, PyTypeObject *p0)
        {
          PyObject *obj = t_SimpleWKTShapeParser$ShapeType::wrap_jobject(object);
          if (obj != NULL && obj != Py_None)
          {
            t_SimpleWKTShapeParser$ShapeType *self = (t_SimpleWKTShapeParser$ShapeType *) obj;
            self->parameters[0] = p0;
          }
          return obj;
        }

        void t_SimpleWKTShapeParser$ShapeType::install(PyObject *module)
        {
          installType(&PY_TYPE(SimpleWKTShapeParser$ShapeType), &PY_TYPE_DEF(SimpleWKTShapeParser$ShapeType), module, "SimpleWKTShapeParser$ShapeType", 0);
        }

        void t_SimpleWKTShapeParser$ShapeType::initialize(PyObject *module)
        {
          PyObject_SetAttrString((PyObject *) PY_TYPE(SimpleWKTShapeParser$ShapeType), "class_", make_descriptor(SimpleWKTShapeParser$ShapeType::initializeClass, 1));
          PyObject_SetAttrString((PyObject *) PY_TYPE(SimpleWKTShapeParser$ShapeType), "wrapfn_", make_descriptor(t_SimpleWKTShapeParser$ShapeType::wrap_jobject));
          PyObject_SetAttrString((PyObject *) PY_TYPE(SimpleWKTShapeParser$ShapeType), "boxfn_", make_descriptor(boxObject));
          env->getClass(SimpleWKTShapeParser$ShapeType::initializeClass);
          PyObject_SetAttrString((PyObject *) PY_TYPE(SimpleWKTShapeParser$ShapeType), "ENVELOPE", make_descriptor(t_SimpleWKTShapeParser$ShapeType::wrap_Object(*SimpleWKTShapeParser$ShapeType::ENVELOPE)));
          PyObject_SetAttrString((PyObject *) PY_TYPE(SimpleWKTShapeParser$ShapeType), "GEOMETRYCOLLECTION", make_descriptor(t_SimpleWKTShapeParser$ShapeType::wrap_Object(*SimpleWKTShapeParser$ShapeType::GEOMETRYCOLLECTION)));
          PyObject_SetAttrString((PyObject *) PY_TYPE(SimpleWKTShapeParser$ShapeType), "LINESTRING", make_descriptor(t_SimpleWKTShapeParser$ShapeType::wrap_Object(*SimpleWKTShapeParser$ShapeType::LINESTRING)));
          PyObject_SetAttrString((PyObject *) PY_TYPE(SimpleWKTShapeParser$ShapeType), "MULTILINESTRING", make_descriptor(t_SimpleWKTShapeParser$ShapeType::wrap_Object(*SimpleWKTShapeParser$ShapeType::MULTILINESTRING)));
          PyObject_SetAttrString((PyObject *) PY_TYPE(SimpleWKTShapeParser$ShapeType), "MULTIPOINT", make_descriptor(t_SimpleWKTShapeParser$ShapeType::wrap_Object(*SimpleWKTShapeParser$ShapeType::MULTIPOINT)));
          PyObject_SetAttrString((PyObject *) PY_TYPE(SimpleWKTShapeParser$ShapeType), "MULTIPOLYGON", make_descriptor(t_SimpleWKTShapeParser$ShapeType::wrap_Object(*SimpleWKTShapeParser$ShapeType::MULTIPOLYGON)));
          PyObject_SetAttrString((PyObject *) PY_TYPE(SimpleWKTShapeParser$ShapeType), "POINT", make_descriptor(t_SimpleWKTShapeParser$ShapeType::wrap_Object(*SimpleWKTShapeParser$ShapeType::POINT)));
          PyObject_SetAttrString((PyObject *) PY_TYPE(SimpleWKTShapeParser$ShapeType), "POLYGON", make_descriptor(t_SimpleWKTShapeParser$ShapeType::wrap_Object(*SimpleWKTShapeParser$ShapeType::POLYGON)));
        }

        static PyObject *t_SimpleWKTShapeParser$ShapeType_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, SimpleWKTShapeParser$ShapeType::initializeClass, 1)))
            return NULL;
          return t_SimpleWKTShapeParser$ShapeType::wrap_Object(SimpleWKTShapeParser$ShapeType(((t_SimpleWKTShapeParser$ShapeType *) arg)->object.this$));
        }
        static PyObject *t_SimpleWKTShapeParser$ShapeType_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, SimpleWKTShapeParser$ShapeType::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static PyObject *t_SimpleWKTShapeParser$ShapeType_of_(t_SimpleWKTShapeParser$ShapeType *self, PyObject *args)
        {
          if (!parseArg(args, "T", 1, &(self->parameters)))
            Py_RETURN_SELF;
          return PyErr_SetArgsError((PyObject *) self, "of_", args);
        }

        static PyObject *t_SimpleWKTShapeParser$ShapeType_forName(PyTypeObject *type, PyObject *arg)
        {
          ::java::lang::String a0((jobject) NULL);
          SimpleWKTShapeParser$ShapeType result((jobject) NULL);

          if (!parseArg(arg, "s", &a0))
          {
            OBJ_CALL(result = ::org::apache::lucene::geo::SimpleWKTShapeParser$ShapeType::forName(a0));
            return t_SimpleWKTShapeParser$ShapeType::wrap_Object(result);
          }

          PyErr_SetArgsError(type, "forName", arg);
          return NULL;
        }

        static PyObject *t_SimpleWKTShapeParser$ShapeType_valueOf(PyTypeObject *type, PyObject *args)
        {
          ::java::lang::String a0((jobject) NULL);
          SimpleWKTShapeParser$ShapeType result((jobject) NULL);

          if (!parseArgs(args, "s", &a0))
          {
            OBJ_CALL(result = ::org::apache::lucene::geo::SimpleWKTShapeParser$ShapeType::valueOf(a0));
            return t_SimpleWKTShapeParser$ShapeType::wrap_Object(result);
          }

          return callSuper(type, "valueOf", args, 2);
        }

        static PyObject *t_SimpleWKTShapeParser$ShapeType_values(PyTypeObject *type)
        {
          JArray< SimpleWKTShapeParser$ShapeType > result((jobject) NULL);
          OBJ_CALL(result = ::org::apache::lucene::geo::SimpleWKTShapeParser$ShapeType::values());
          return JArray<jobject>(result.this$).wrap(t_SimpleWKTShapeParser$ShapeType::wrap_jobject);
        }

        static PyObject *t_SimpleWKTShapeParser$ShapeType_wktName(t_SimpleWKTShapeParser$ShapeType *self)
        {
          ::java::lang::String result((jobject) NULL);
          OBJ_CALL(result = self->object.wktName());
          return j2p(result);
        }
        static PyObject *t_SimpleWKTShapeParser$ShapeType_get__parameters_(t_SimpleWKTShapeParser$ShapeType *self, void *data)
        {
          return typeParameters(self->parameters, sizeof(self->parameters));
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/util/fst/Builder$Arc.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        namespace fst {

          ::java::lang::Class *Builder$Arc::class$ = NULL;
          jmethodID *Builder$Arc::mids$ = NULL;
          jfieldID *Builder$Arc::fids$ = NULL;
          bool Builder$Arc::live$ = false;

          jclass Builder$Arc::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/util/fst/Builder$Arc");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_f2cc1bce94666404] = env->getMethodID(cls, "<init>", "()V");

              fids$ = new jfieldID[max_fid];
              fids$[fid_isFinal] = env->getFieldID(cls, "isFinal", "Z");
              fids$[fid_label] = env->getFieldID(cls, "label", "I");
              fids$[fid_nextFinalOutput] = env->getFieldID(cls, "nextFinalOutput", "Ljava/lang/Object;");
              fids$[fid_output] = env->getFieldID(cls, "output", "Ljava/lang/Object;");

              class$ = new ::java::lang::Class(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          Builder$Arc::Builder$Arc() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_f2cc1bce94666404)) {}

          jboolean Builder$Arc::_get_isFinal() const
          {
            return env->getBooleanField(this$, fids$[fid_isFinal]);
          }

          void Builder$Arc::_set_isFinal(jboolean a0) const
          {
            env->setBooleanField(this$, fids$[fid_isFinal], a0);
          }

          jint Builder$Arc::_get_label() const
          {
            return env->getIntField(this$, fids$[fid_label]);
          }

          void Builder$Arc::_set_label(jint a0) const
          {
            env->setIntField(this$, fids$[fid_label], a0);
          }

          ::java::lang::Object Builder$Arc::_get_nextFinalOutput() const
          {
            return ::java::lang::Object(env->getObjectField(this$, fids$[fid_nextFinalOutput]));
          }

          void Builder$Arc::_set_nextFinalOutput(const ::java::lang::Object & a0) const
          {
            env->setObjectField(this$, fids$[fid_nextFinalOutput], a0.this$);
          }

          ::java::lang::Object Builder$Arc::_get_output() const
          {
            return ::java::lang::Object(env->getObjectField(this$, fids$[fid_output]));
          }

          void Builder$Arc::_set_output(const ::java::lang::Object & a0) const
          {
            env->setObjectField(this$, fids$[fid_output], a0.this$);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        namespace fst {
          static PyObject *t_Builder$Arc_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_Builder$Arc_instance_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_Builder$Arc_of_(t_Builder$Arc *self, PyObject *args);
          static int t_Builder$Arc_init_(t_Builder$Arc *self, PyObject *args, PyObject *kwds);
          static PyObject *t_Builder$Arc_get__isFinal(t_Builder$Arc *self, void *data);
          static int t_Builder$Arc_set__isFinal(t_Builder$Arc *self, PyObject *arg, void *data);
          static PyObject *t_Builder$Arc_get__label(t_Builder$Arc *self, void *data);
          static int t_Builder$Arc_set__label(t_Builder$Arc *self, PyObject *arg, void *data);
          static PyObject *t_Builder$Arc_get__nextFinalOutput(t_Builder$Arc *self, void *data);
          static int t_Builder$Arc_set__nextFinalOutput(t_Builder$Arc *self, PyObject *arg, void *data);
          static PyObject *t_Builder$Arc_get__output(t_Builder$Arc *self, void *data);
          static int t_Builder$Arc_set__output(t_Builder$Arc *self, PyObject *arg, void *data);

          static PyObject *t_Builder$Arc_get__parameters_(t_Builder$Arc *self, void *data);
          static PyGetSetDef t_Builder$Arc__fields_[] = {
            DECLARE_GETSET_FIELD(t_Builder$Arc, isFinal),
            DECLARE_GETSET_FIELD(t_Builder$Arc, label),
            DECLARE_GETSET_FIELD(t_Builder$Arc, nextFinalOutput),
            DECLARE_GETSET_FIELD(t_Builder$Arc, output),
            DECLARE_GET_FIELD(t_Builder$Arc, parameters_),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_Builder$Arc__methods_[] = {
            DECLARE_METHOD(t_Builder$Arc, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_Builder$Arc, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_Builder$Arc, of_, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          static PyType_Slot PY_TYPE_SLOTS(Builder$Arc)[] = {
            { Py_tp_methods, t_Builder$Arc__methods_ },
            { Py_tp_init, (void *) t_Builder$Arc_init_ },
            { Py_tp_getset, t_Builder$Arc__fields_ },
            { 0, NULL }
          };

          static PyType_Def *PY_TYPE_BASES(Builder$Arc)[] = {
            &PY_TYPE_DEF(::java::lang::Object),
            NULL
          };

          DEFINE_TYPE(Builder$Arc, t_Builder$Arc, Builder$Arc);
          PyObject *t_Builder$Arc::wrap_Object(const Builder$Arc& object, PyTypeObject *p0)
          {
            PyObject *obj = t_Builder$Arc::wrap_Object(object);
            if (obj != NULL && obj != Py_None)
            {
              t_Builder$Arc *self = (t_Builder$Arc *) obj;
              self->parameters[0] = p0;
            }
            return obj;
          }

          PyObject *t_Builder$Arc::wrap_jobject(const jobject& object, PyTypeObject *p0)
          {
            PyObject *obj = t_Builder$Arc::wrap_jobject(object);
            if (obj != NULL && obj != Py_None)
            {
              t_Builder$Arc *self = (t_Builder$Arc *) obj;
              self->parameters[0] = p0;
            }
            return obj;
          }

          void t_Builder$Arc::install(PyObject *module)
          {
            installType(&PY_TYPE(Builder$Arc), &PY_TYPE_DEF(Builder$Arc), module, "Builder$Arc", 0);
          }

          void t_Builder$Arc::initialize(PyObject *module)
          {
            PyObject_SetAttrString((PyObject *) PY_TYPE(Builder$Arc), "class_", make_descriptor(Builder$Arc::initializeClass, 1));
            PyObject_SetAttrString((PyObject *) PY_TYPE(Builder$Arc), "wrapfn_", make_descriptor(t_Builder$Arc::wrap_jobject));
            PyObject_SetAttrString((PyObject *) PY_TYPE(Builder$Arc), "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_Builder$Arc_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, Builder$Arc::initializeClass, 1)))
              return NULL;
            return t_Builder$Arc::wrap_Object(Builder$Arc(((t_Builder$Arc *) arg)->object.this$));
          }
          static PyObject *t_Builder$Arc_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, Builder$Arc::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static PyObject *t_Builder$Arc_of_(t_Builder$Arc *self, PyObject *args)
          {
            if (!parseArg(args, "T", 1, &(self->parameters)))
              Py_RETURN_SELF;
            return PyErr_SetArgsError((PyObject *) self, "of_", args);
          }

          static int t_Builder$Arc_init_(t_Builder$Arc *self, PyObject *args, PyObject *kwds)
          {
            Builder$Arc object((jobject) NULL);

            INT_CALL(object = Builder$Arc());
            self->object = object;

            return 0;
          }
          static PyObject *t_Builder$Arc_get__parameters_(t_Builder$Arc *self, void *data)
          {
            return typeParameters(self->parameters, sizeof(self->parameters));
          }

          static PyObject *t_Builder$Arc_get__isFinal(t_Builder$Arc *self, void *data)
          {
            jboolean value;
            OBJ_CALL(value = self->object._get_isFinal());
            Py_RETURN_BOOL(value);
          }
          static int t_Builder$Arc_set__isFinal(t_Builder$Arc *self, PyObject *arg, void *data)
          {
            jboolean value;
            if (!parseArg(arg, "Z", &value))
            {
              INT_CALL(self->object._set_isFinal(value));
              return 0;
            }
            PyErr_SetArgsError((PyObject *) self, "isFinal", arg);
            return -1;
          }

          static PyObject *t_Builder$Arc_get__label(t_Builder$Arc *self, void *data)
          {
            jint value;
            OBJ_CALL(value = self->object._get_label());
            return PyLong_FromLong((long) value);
          }
          static int t_Builder$Arc_set__label(t_Builder$Arc *self, PyObject *arg, void *data)
          {
            jint value;
            if (!parseArg(arg, "I", &value))
            {
              INT_CALL(self->object._set_label(value));
              return 0;
            }
            PyErr_SetArgsError((PyObject *) self, "label", arg);
            return -1;
          }

          static PyObject *t_Builder$Arc_get__nextFinalOutput(t_Builder$Arc *self, void *data)
          {
            ::java::lang::Object value((jobject) NULL);
            OBJ_CALL(value = self->object._get_nextFinalOutput());
            return ::java::lang::t_Object::wrap_Object(value);
          }
          static int t_Builder$Arc_set__nextFinalOutput(t_Builder$Arc *self, PyObject *arg, void *data)
          {
            ::java::lang::Object value((jobject) NULL);
            if (!parseArg(arg, "o", &value))
            {
              INT_CALL(self->object._set_nextFinalOutput(value));
              return 0;
            }
            PyErr_SetArgsError((PyObject *) self, "nextFinalOutput", arg);
            return -1;
          }

          static PyObject *t_Builder$Arc_get__output(t_Builder$Arc *self, void *data)
          {
            ::java::lang::Object value((jobject) NULL);
            OBJ_CALL(value = self->object._get_output());
            return ::java::lang::t_Object::wrap_Object(value);
          }
          static int t_Builder$Arc_set__output(t_Builder$Arc *self, PyObject *arg, void *data)
          {
            ::java::lang::Object value((jobject) NULL);
            if (!parseArg(arg, "o", &value))
            {
              INT_CALL(self->object._set_output(value));
              return 0;
            }
            PyErr_SetArgsError((PyObject *) self, "output", arg);
            return -1;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/util/NamedSPILoader.h"
#include "java/lang/Class.h"
#include "java/lang/Iterable.h"
#include "java/lang/String.h"
#include "java/util/Iterator.h"
#include "java/util/Set.h"
#include "java/lang/ClassLoader.h"
#include "org/apache/lucene/util/NamedSPILoader$NamedSPI.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {

        ::java::lang::Class *NamedSPILoader::class$ = NULL;
        jmethodID *NamedSPILoader::mids$ = NULL;
        bool NamedSPILoader::live$ = false;

        jclass NamedSPILoader::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/util/NamedSPILoader");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_67ec072891501dcc] = env->getMethodID(cls, "<init>", "(Ljava/lang/Class;)V");
            mids$[mid_init$_b125dde523e94597] = env->getMethodID(cls, "<init>", "(Ljava/lang/Class;Ljava/lang/ClassLoader;)V");
            mids$[mid_availableServices_7dcf4034c6d1a92a] = env->getMethodID(cls, "availableServices", "()Ljava/util/Set;");
            mids$[mid_checkServiceName_9fd2eb66a64e6f0f] = env->getStaticMethodID(cls, "checkServiceName", "(Ljava/lang/String;)V");
            mids$[mid_iterator_233a192dadb0917d] = env->getMethodID(cls, "iterator", "()Ljava/util/Iterator;");
            mids$[mid_lookup_fbf73fb8c8677042] = env->getMethodID(cls, "lookup", "(Ljava/lang/String;)Lorg/apache/lucene/util/NamedSPILoader$NamedSPI;");
            mids$[mid_reload_98a876e82795b112] = env->getMethodID(cls, "reload", "(Ljava/lang/ClassLoader;)V");

            class$ = new ::java::lang::Class(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        NamedSPILoader::NamedSPILoader(const ::java::lang::Class & a0) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_67ec072891501dcc, a0.this$)) {}

        NamedSPILoader::NamedSPILoader(const ::java::lang::Class & a0, const ::java::lang::ClassLoader & a1) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_b125dde523e94597, a0.this$, a1.this$)) {}

        ::java::util::Set NamedSPILoader::availableServices() const
        {
          return ::java::util::Set(env->callObjectMethod(this$, mids$[mid_availableServices_7dcf4034c6d1a92a]));
        }

        void NamedSPILoader::checkServiceName(const ::java::lang::String & a0)
        {
          jclass cls = env->getClass(initializeClass);
          env->callStaticVoidMethod(cls, mids$[mid_checkServiceName_9fd2eb66a64e6f0f], a0.this$);
        }

        ::java::util::Iterator NamedSPILoader::iterator() const
        {
          return ::java::util::Iterator(env->callObjectMethod(this$, mids$[mid_iterator_233a192dadb0917d]));
        }

        ::org::apache::lucene::util::NamedSPILoader$NamedSPI NamedSPILoader::lookup(const ::java::lang::String & a0) const
        {
          return ::org::apache::lucene::util::NamedSPILoader$NamedSPI(env->callObjectMethod(this$, mids$[mid_lookup_fbf73fb8c8677042], a0.this$));
        }

        void NamedSPILoader::reload(const ::java::lang::ClassLoader & a0) const
        {
          env->callVoidMethod(this$, mids$[mid_reload_98a876e82795b112], a0.this$);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        static PyObject *t_NamedSPILoader_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_NamedSPILoader_instance_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_NamedSPILoader_of_(t_NamedSPILoader *self, PyObject *args);
        static int t_NamedSPILoader_init_(t_NamedSPILoader *self, PyObject *args, PyObject *kwds);
        static PyObject *t_NamedSPILoader_availableServices(t_NamedSPILoader *self);
        static PyObject *t_NamedSPILoader_checkServiceName(PyTypeObject *type, PyObject *arg);
        static PyObject *t_NamedSPILoader_iterator(t_NamedSPILoader *self);
        static PyObject *t_NamedSPILoader_lookup(t_NamedSPILoader *self, PyObject *arg);
        static PyObject *t_NamedSPILoader_reload(t_NamedSPILoader *self, PyObject *arg);
        static PyObject *t_NamedSPILoader_get__parameters_(t_NamedSPILoader *self, void *data);
        static PyGetSetDef t_NamedSPILoader__fields_[] = {
          DECLARE_GET_FIELD(t_NamedSPILoader, parameters_),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_NamedSPILoader__methods_[] = {
          DECLARE_METHOD(t_NamedSPILoader, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_NamedSPILoader, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_NamedSPILoader, of_, METH_VARARGS),
          DECLARE_METHOD(t_NamedSPILoader, availableServices, METH_NOARGS),
          DECLARE_METHOD(t_NamedSPILoader, checkServiceName, METH_O | METH_CLASS),
          DECLARE_METHOD(t_NamedSPILoader, iterator, METH_NOARGS),
          DECLARE_METHOD(t_NamedSPILoader, lookup, METH_O),
          DECLARE_METHOD(t_NamedSPILoader, reload, METH_O),
          { NULL, NULL, 0, NULL }
        };

        static PyType_Slot PY_TYPE_SLOTS(NamedSPILoader)[] = {
          { Py_tp_methods, t_NamedSPILoader__methods_ },
          { Py_tp_init, (void *) t_NamedSPILoader_init_ },
          { Py_tp_getset, t_NamedSPILoader__fields_ },
          { Py_tp_iter, (void *) ((PyObject *(*)(t_NamedSPILoader *)) get_generic_iterator< t_NamedSPILoader >) },
          { Py_tp_iternext, (void *) 0 },
          { 0, NULL }
        };

        static PyType_Def *PY_TYPE_BASES(NamedSPILoader)[] = {
          &PY_TYPE_DEF(::java::lang::Object),
          NULL
        };

        DEFINE_TYPE(NamedSPILoader, t_NamedSPILoader, NamedSPILoader);
        PyObject *t_NamedSPILoader::wrap_Object(const NamedSPILoader& object, PyTypeObject *p0)
        {
          PyObject *obj = t_NamedSPILoader::wrap_Object(object);
          if (obj != NULL && obj != Py_None)
          {
            t_NamedSPILoader *self = (t_NamedSPILoader *) obj;
            self->parameters[0] = p0;
          }
          return obj;
        }

        PyObject *t_NamedSPILoader::wrap_jobject(const jobject& object, PyTypeObject *p0)
        {
          PyObject *obj = t_NamedSPILoader::wrap_jobject(object);
          if (obj != NULL && obj != Py_None)
          {
            t_NamedSPILoader *self = (t_NamedSPILoader *) obj;
            self->parameters[0] = p0;
          }
          return obj;
        }

        void t_NamedSPILoader::install(PyObject *module)
        {
          installType(&PY_TYPE(NamedSPILoader), &PY_TYPE_DEF(NamedSPILoader), module, "NamedSPILoader", 0);
          PyObject_SetAttrString((PyObject *) PY_TYPE(NamedSPILoader), "NamedSPI", make_descriptor(&PY_TYPE_DEF(NamedSPILoader$NamedSPI)));
        }

        void t_NamedSPILoader::initialize(PyObject *module)
        {
          PyObject_SetAttrString((PyObject *) PY_TYPE(NamedSPILoader), "class_", make_descriptor(NamedSPILoader::initializeClass, 1));
          PyObject_SetAttrString((PyObject *) PY_TYPE(NamedSPILoader), "wrapfn_", make_descriptor(t_NamedSPILoader::wrap_jobject));
          PyObject_SetAttrString((PyObject *) PY_TYPE(NamedSPILoader), "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_NamedSPILoader_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, NamedSPILoader::initializeClass, 1)))
            return NULL;
          return t_NamedSPILoader::wrap_Object(NamedSPILoader(((t_NamedSPILoader *) arg)->object.this$));
        }
        static PyObject *t_NamedSPILoader_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, NamedSPILoader::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static PyObject *t_NamedSPILoader_of_(t_NamedSPILoader *self, PyObject *args)
        {
          if (!parseArg(args, "T", 1, &(self->parameters)))
            Py_RETURN_SELF;
          return PyErr_SetArgsError((PyObject *) self, "of_", args);
        }

        static int t_NamedSPILoader_init_(t_NamedSPILoader *self, PyObject *args, PyObject *kwds)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 1:
            {
              ::java::lang::Class a0((jobject) NULL);
              PyTypeObject **p0;
              NamedSPILoader object((jobject) NULL);

              if (!parseArgs(args, "K", ::java::lang::Class::initializeClass, &a0, &p0, ::java::lang::t_Class::parameters_))
              {
                INT_CALL(object = NamedSPILoader(a0));
                self->object = object;
                break;
              }
            }
            goto err;
           case 2:
            {
              ::java::lang::Class a0((jobject) NULL);
              PyTypeObject **p0;
              ::java::lang::ClassLoader a1((jobject) NULL);
              NamedSPILoader object((jobject) NULL);

              if (!parseArgs(args, "Kk", ::java::lang::Class::initializeClass, ::java::lang::ClassLoader::initializeClass, &a0, &p0, ::java::lang::t_Class::parameters_, &a1))
              {
                INT_CALL(object = NamedSPILoader(a0, a1));
                self->object = object;
                break;
              }
            }
           default:
           err:
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }

        static PyObject *t_NamedSPILoader_availableServices(t_NamedSPILoader *self)
        {
          ::java::util::Set result((jobject) NULL);
          OBJ_CALL(result = self->object.availableServices());
          return ::java::util::t_Set::wrap_Object(result, ::java::lang::PY_TYPE(String));
        }

        static PyObject *t_NamedSPILoader_checkServiceName(PyTypeObject *type, PyObject *arg)
        {
          ::java::lang::String a0((jobject) NULL);

          if (!parseArg(arg, "s", &a0))
          {
            OBJ_CALL(::org::apache::lucene::util::NamedSPILoader::checkServiceName(a0));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError(type, "checkServiceName", arg);
          return NULL;
        }

        static PyObject *t_NamedSPILoader_iterator(t_NamedSPILoader *self)
        {
          ::java::util::Iterator result((jobject) NULL);
          OBJ_CALL(result = self->object.iterator());
          return ::java::util::t_Iterator::wrap_Object(result, self->parameters[0]);
        }

        static PyObject *t_NamedSPILoader_lookup(t_NamedSPILoader *self, PyObject *arg)
        {
          ::java::lang::String a0((jobject) NULL);
          ::org::apache::lucene::util::NamedSPILoader$NamedSPI result((jobject) NULL);

          if (!parseArg(arg, "s", &a0))
          {
            OBJ_CALL(result = self->object.lookup(a0));
            return self->parameters[0] != NULL ? wrapType(self->parameters[0], result.this$) : ::org::apache::lucene::util::t_NamedSPILoader$NamedSPI::wrap_Object(result);
          }

          PyErr_SetArgsError((PyObject *) self, "lookup", arg);
          return NULL;
        }

        static PyObject *t_NamedSPILoader_reload(t_NamedSPILoader *self, PyObject *arg)
        {
          ::java::lang::ClassLoader a0((jobject) NULL);

          if (!parseArg(arg, "k", ::java::lang::ClassLoader::initializeClass, &a0))
          {
            OBJ_CALL(self->object.reload(a0));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "reload", arg);
          return NULL;
        }
        static PyObject *t_NamedSPILoader_get__parameters_(t_NamedSPILoader *self, void *data)
        {
          return typeParameters(self->parameters, sizeof(self->parameters));
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/highlight/OffsetLimitTokenFilter.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/analysis/TokenStream.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace highlight {

          ::java::lang::Class *OffsetLimitTokenFilter::class$ = NULL;
          jmethodID *OffsetLimitTokenFilter::mids$ = NULL;
          bool OffsetLimitTokenFilter::live$ = false;

          jclass OffsetLimitTokenFilter::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/search/highlight/OffsetLimitTokenFilter");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_ec84dcad1ccbb797] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/analysis/TokenStream;I)V");
              mids$[mid_incrementToken_8454bd5aa23fd11e] = env->getMethodID(cls, "incrementToken", "()Z");
              mids$[mid_reset_f2cc1bce94666404] = env->getMethodID(cls, "reset", "()V");

              class$ = new ::java::lang::Class(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          OffsetLimitTokenFilter::OffsetLimitTokenFilter(const ::org::apache::lucene::analysis::TokenStream & a0, jint a1) : ::org::apache::lucene::analysis::TokenFilter(env->newObject(initializeClass, &mids$, mid_init$_ec84dcad1ccbb797, a0.this$, a1)) {}

          jboolean OffsetLimitTokenFilter::incrementToken() const
          {
            return env->callBooleanMethod(this$, mids$[mid_incrementToken_8454bd5aa23fd11e]);
          }

          void OffsetLimitTokenFilter::reset() const
          {
            env->callVoidMethod(this$, mids$[mid_reset_f2cc1bce94666404]);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace highlight {
          static PyObject *t_OffsetLimitTokenFilter_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_OffsetLimitTokenFilter_instance_(PyTypeObject *type, PyObject *arg);
          static int t_OffsetLimitTokenFilter_init_(t_OffsetLimitTokenFilter *self, PyObject *args, PyObject *kwds);
          static PyObject *t_OffsetLimitTokenFilter_incrementToken(t_OffsetLimitTokenFilter *self, PyObject *args);
          static PyObject *t_OffsetLimitTokenFilter_reset(t_OffsetLimitTokenFilter *self, PyObject *args);

          static PyMethodDef t_OffsetLimitTokenFilter__methods_[] = {
            DECLARE_METHOD(t_OffsetLimitTokenFilter, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_OffsetLimitTokenFilter, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_OffsetLimitTokenFilter, incrementToken, METH_VARARGS),
            DECLARE_METHOD(t_OffsetLimitTokenFilter, reset, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          static PyType_Slot PY_TYPE_SLOTS(OffsetLimitTokenFilter)[] = {
            { Py_tp_methods, t_OffsetLimitTokenFilter__methods_ },
            { Py_tp_init, (void *) t_OffsetLimitTokenFilter_init_ },
            { 0, NULL }
          };

          static PyType_Def *PY_TYPE_BASES(OffsetLimitTokenFilter)[] = {
            &PY_TYPE_DEF(::org::apache::lucene::analysis::TokenFilter),
            NULL
          };

          DEFINE_TYPE(OffsetLimitTokenFilter, t_OffsetLimitTokenFilter, OffsetLimitTokenFilter);

          void t_OffsetLimitTokenFilter::install(PyObject *module)
          {
            installType(&PY_TYPE(OffsetLimitTokenFilter), &PY_TYPE_DEF(OffsetLimitTokenFilter), module, "OffsetLimitTokenFilter", 0);
          }

          void t_OffsetLimitTokenFilter::initialize(PyObject *module)
          {
            PyObject_SetAttrString((PyObject *) PY_TYPE(OffsetLimitTokenFilter), "class_", make_descriptor(OffsetLimitTokenFilter::initializeClass, 1));
            PyObject_SetAttrString((PyObject *) PY_TYPE(OffsetLimitTokenFilter), "wrapfn_", make_descriptor(t_OffsetLimitTokenFilter::wrap_jobject));
            PyObject_SetAttrString((PyObject *) PY_TYPE(OffsetLimitTokenFilter), "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_OffsetLimitTokenFilter_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, OffsetLimitTokenFilter::initializeClass, 1)))
              return NULL;
            return t_OffsetLimitTokenFilter::wrap_Object(OffsetLimitTokenFilter(((t_OffsetLimitTokenFilter *) arg)->object.this$));
          }
          static PyObject *t_OffsetLimitTokenFilter_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, OffsetLimitTokenFilter::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_OffsetLimitTokenFilter_init_(t_OffsetLimitTokenFilter *self, PyObject *args, PyObject *kwds)
          {
            ::org::apache::lucene::analysis::TokenStream a0((jobject) NULL);
            jint a1;
            OffsetLimitTokenFilter object((jobject) NULL);

            if (!parseArgs(args, "kI", ::org::apache::lucene::analysis::TokenStream::initializeClass, &a0, &a1))
            {
              INT_CALL(object = OffsetLimitTokenFilter(a0, a1));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_OffsetLimitTokenFilter_incrementToken(t_OffsetLimitTokenFilter *self, PyObject *args)
          {
            jboolean result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.incrementToken());
              Py_RETURN_BOOL(result);
            }

            return callSuper(PY_TYPE(OffsetLimitTokenFilter), (PyObject *) self, "incrementToken", args, 2);
          }

          static PyObject *t_OffsetLimitTokenFilter_reset(t_OffsetLimitTokenFilter *self, PyObject *args)
          {

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(self->object.reset());
              Py_RETURN_NONE;
            }

            return callSuper(PY_TYPE(OffsetLimitTokenFilter), (PyObject *) self, "reset", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/FilterScorer.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/search/TwoPhaseIterator.h"
#include "org/apache/lucene/search/DocIdSetIterator.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/search/Weight.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {

        ::java::lang::Class *FilterScorer::class$ = NULL;
        jmethodID *FilterScorer::mids$ = NULL;
        bool FilterScorer::live$ = false;

        jclass FilterScorer::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/search/FilterScorer");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_85e03ccf00a30406] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/search/Scorer;)V");
            mids$[mid_init$_5af3f0166e4b059a] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/search/Scorer;Lorg/apache/lucene/search/Weight;)V");
            mids$[mid_docID_9972fcc56b44e79d] = env->getMethodID(cls, "docID", "()I");
            mids$[mid_iterator_173d81d7b8f93882] = env->getMethodID(cls, "iterator", "()Lorg/apache/lucene/search/DocIdSetIterator;");
            mids$[mid_score_58aec2b64dff50c8] = env->getMethodID(cls, "score", "()F");
            mids$[mid_twoPhaseIterator_6458a12a224a1c8a] = env->getMethodID(cls, "twoPhaseIterator", "()Lorg/apache/lucene/search/TwoPhaseIterator;");

            class$ = new ::java::lang::Class(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        FilterScorer::FilterScorer(const ::org::apache::lucene::search::Scorer & a0) : ::org::apache::lucene::search::Scorer(env->newObject(initializeClass, &mids$, mid_init$_85e03ccf00a30406, a0.this$)) {}

        FilterScorer::FilterScorer(const ::org::apache::lucene::search::Scorer & a0, const ::org::apache::lucene::search::Weight & a1) : ::org::apache::lucene::search::Scorer(env->newObject(initializeClass, &mids$, mid_init$_5af3f0166e4b059a, a0.this$, a1.this$)) {}

        jint FilterScorer::docID() const
        {
          return env->callIntMethod(this$, mids$[mid_docID_9972fcc56b44e79d]);
        }

        ::org::apache::lucene::search::DocIdSetIterator FilterScorer::iterator() const
        {
          return ::org::apache::lucene::search::DocIdSetIterator(env->callObjectMethod(this$, mids$[mid_iterator_173d81d7b8f93882]));
        }

        jfloat FilterScorer::score() const
        {
          return env->callFloatMethod(this$, mids$[mid_score_58aec2b64dff50c8]);
        }

        ::org::apache::lucene::search::TwoPhaseIterator FilterScorer::twoPhaseIterator() const
        {
          return ::org::apache::lucene::search::TwoPhaseIterator(env->callObjectMethod(this$, mids$[mid_twoPhaseIterator_6458a12a224a1c8a]));
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        static PyObject *t_FilterScorer_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_FilterScorer_instance_(PyTypeObject *type, PyObject *arg);
        static int t_FilterScorer_init_(t_FilterScorer *self, PyObject *args, PyObject *kwds);
        static PyObject *t_FilterScorer_docID(t_FilterScorer *self, PyObject *args);
        static PyObject *t_FilterScorer_iterator(t_FilterScorer *self, PyObject *args);
        static PyObject *t_FilterScorer_score(t_FilterScorer *self, PyObject *args);
        static PyObject *t_FilterScorer_twoPhaseIterator(t_FilterScorer *self, PyObject *args);

        static PyMethodDef t_FilterScorer__methods_[] = {
          DECLARE_METHOD(t_FilterScorer, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_FilterScorer, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_FilterScorer, docID, METH_VARARGS),
          DECLARE_METHOD(t_FilterScorer, iterator, METH_VARARGS),
          DECLARE_METHOD(t_FilterScorer, score, METH_VARARGS),
          DECLARE_METHOD(t_FilterScorer, twoPhaseIterator, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        static PyType_Slot PY_TYPE_SLOTS(FilterScorer)[] = {
          { Py_tp_methods, t_FilterScorer__methods_ },
          { Py_tp_init, (void *) t_FilterScorer_init_ },
          { 0, NULL }
        };

        static PyType_Def *PY_TYPE_BASES(FilterScorer)[] = {
          &PY_TYPE_DEF(::org::apache::lucene::search::Scorer),
          NULL
        };

        DEFINE_TYPE(FilterScorer, t_FilterScorer, FilterScorer);

        void t_FilterScorer::install(PyObject *module)
        {
          installType(&PY_TYPE(FilterScorer), &PY_TYPE_DEF(FilterScorer), module, "FilterScorer", 0);
        }

        void t_FilterScorer::initialize(PyObject *module)
        {
          PyObject_SetAttrString((PyObject *) PY_TYPE(FilterScorer), "class_", make_descriptor(FilterScorer::initializeClass, 1));
          PyObject_SetAttrString((PyObject *) PY_TYPE(FilterScorer), "wrapfn_", make_descriptor(t_FilterScorer::wrap_jobject));
          PyObject_SetAttrString((PyObject *) PY_TYPE(FilterScorer), "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_FilterScorer_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, FilterScorer::initializeClass, 1)))
            return NULL;
          return t_FilterScorer::wrap_Object(FilterScorer(((t_FilterScorer *) arg)->object.this$));
        }
        static PyObject *t_FilterScorer_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, FilterScorer::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_FilterScorer_init_(t_FilterScorer *self, PyObject *args, PyObject *kwds)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 1:
            {
              ::org::apache::lucene::search::Scorer a0((jobject) NULL);
              FilterScorer object((jobject) NULL);

              if (!parseArgs(args, "k", ::org::apache::lucene::search::Scorer::initializeClass, &a0))
              {
                INT_CALL(object = FilterScorer(a0));
                self->object = object;
                break;
              }
            }
            goto err;
           case 2:
            {
              ::org::apache::lucene::search::Scorer a0((jobject) NULL);
              ::org::apache::lucene::search::Weight a1((jobject) NULL);
              FilterScorer object((jobject) NULL);

              if (!parseArgs(args, "kk", ::org::apache::lucene::search::Scorer::initializeClass, ::org::apache::lucene::search::Weight::initializeClass, &a0, &a1))
              {
                INT_CALL(object = FilterScorer(a0, a1));
                self->object = object;
                break;
              }
            }
           default:
           err:
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }

        static PyObject *t_FilterScorer_docID(t_FilterScorer *self, PyObject *args)
        {
          jint result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.docID());
            return PyLong_FromLong((long) result);
          }

          return callSuper(PY_TYPE(FilterScorer), (PyObject *) self, "docID", args, 2);
        }

        static PyObject *t_FilterScorer_iterator(t_FilterScorer *self, PyObject *args)
        {
          ::org::apache::lucene::search::DocIdSetIterator result((jobject) NULL);

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.iterator());
            return ::org::apache::lucene::search::t_DocIdSetIterator::wrap_Object(result);
          }

          return callSuper(PY_TYPE(FilterScorer), (PyObject *) self, "iterator", args, 2);
        }

        static PyObject *t_FilterScorer_score(t_FilterScorer *self, PyObject *args)
        {
          jfloat result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.score());
            return PyFloat_FromDouble((double) result);
          }

          return callSuper(PY_TYPE(FilterScorer), (PyObject *) self, "score", args, 2);
        }

        static PyObject *t_FilterScorer_twoPhaseIterator(t_FilterScorer *self, PyObject *args)
        {
          ::org::apache::lucene::search::TwoPhaseIterator result((jobject) NULL);

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.twoPhaseIterator());
            return ::org::apache::lucene::search::t_TwoPhaseIterator::wrap_Object(result);
          }

          return callSuper(PY_TYPE(FilterScorer), (PyObject *) self, "twoPhaseIterator", args, 2);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "java/util/Iterator.h"
#include "java/util/function/Consumer.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace java {
  namespace util {

    ::java::lang::Class *Iterator::class$ = NULL;
    jmethodID *Iterator::mids$ = NULL;
    bool Iterator::live$ = false;

    jclass Iterator::initializeClass(bool getOnly)
    {
      if (getOnly)
        return (jclass) (live$ ? class$->this$ : NULL);
      if (class$ == NULL)
      {
        jclass cls = (jclass) env->findClass("java/util/Iterator");

        mids$ = new jmethodID[max_mid];
        mids$[mid_forEachRemaining_39fdd8ee24bf1a00] = env->getMethodID(cls, "forEachRemaining", "(Ljava/util/function/Consumer;)V");
        mids$[mid_hasNext_8454bd5aa23fd11e] = env->getMethodID(cls, "hasNext", "()Z");
        mids$[mid_next_d6bcd06f3102c4d9] = env->getMethodID(cls, "next", "()Ljava/lang/Object;");
        mids$[mid_remove_f2cc1bce94666404] = env->getMethodID(cls, "remove", "()V");

        class$ = new ::java::lang::Class(cls);
        live$ = true;
      }
      return (jclass) class$->this$;
    }

    void Iterator::forEachRemaining(const ::java::util::function::Consumer & a0) const
    {
      env->callVoidMethod(this$, mids$[mid_forEachRemaining_39fdd8ee24bf1a00], a0.this$);
    }

    jboolean Iterator::hasNext() const
    {
      return env->callBooleanMethod(this$, mids$[mid_hasNext_8454bd5aa23fd11e]);
    }

    ::java::lang::Object Iterator::next() const
    {
      return ::java::lang::Object(env->callObjectMethod(this$, mids$[mid_next_d6bcd06f3102c4d9]));
    }

    void Iterator::remove() const
    {
      env->callVoidMethod(this$, mids$[mid_remove_f2cc1bce94666404]);
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace java {
  namespace util {
    static PyObject *t_Iterator_cast_(PyTypeObject *type, PyObject *arg);
    static PyObject *t_Iterator_instance_(PyTypeObject *type, PyObject *arg);
    static PyObject *t_Iterator_of_(t_Iterator *self, PyObject *args);
    static PyObject *t_Iterator_forEachRemaining(t_Iterator *self, PyObject *arg);
    static PyObject *t_Iterator_hasNext(t_Iterator *self);
    static PyObject *t_Iterator_next(t_Iterator *self);
    static PyObject *t_Iterator_remove(t_Iterator *self);
    static PyObject *t_Iterator_get__parameters_(t_Iterator *self, void *data);
    static PyGetSetDef t_Iterator__fields_[] = {
      DECLARE_GET_FIELD(t_Iterator, parameters_),
      { NULL, NULL, NULL, NULL, NULL }
    };

    static PyMethodDef t_Iterator__methods_[] = {
      DECLARE_METHOD(t_Iterator, cast_, METH_O | METH_CLASS),
      DECLARE_METHOD(t_Iterator, instance_, METH_O | METH_CLASS),
      DECLARE_METHOD(t_Iterator, of_, METH_VARARGS),
      DECLARE_METHOD(t_Iterator, forEachRemaining, METH_O),
      DECLARE_METHOD(t_Iterator, hasNext, METH_NOARGS),
      DECLARE_METHOD(t_Iterator, next, METH_NOARGS),
      DECLARE_METHOD(t_Iterator, remove, METH_NOARGS),
      { NULL, NULL, 0, NULL }
    };

    static PyType_Slot PY_TYPE_SLOTS(Iterator)[] = {
      { Py_tp_methods, t_Iterator__methods_ },
      { Py_tp_init, (void *) abstract_init },
      { Py_tp_getset, t_Iterator__fields_ },
      { Py_tp_iter, (void *) PyObject_SelfIter },
      { Py_tp_iternext, (void *) ((PyObject *(*)(::java::util::t_Iterator *)) get_generic_iterator_next< ::java::util::t_Iterator,::java::lang::t_Object >) },
      { 0, NULL }
    };

    static PyType_Def *PY_TYPE_BASES(Iterator)[] = {
      &PY_TYPE_DEF(::java::lang::Object),
      NULL
    };

    DEFINE_TYPE(Iterator, t_Iterator, Iterator);
    PyObject *t_Iterator::wrap_Object(const Iterator& object, PyTypeObject *p0)
    {
      PyObject *obj = t_Iterator::wrap_Object(object);
      if (obj != NULL && obj != Py_None)
      {
        t_Iterator *self = (t_Iterator *) obj;
        self->parameters[0] = p0;
      }
      return obj;
    }

    PyObject *t_Iterator::wrap_jobject(const jobject& object, PyTypeObject *p0)
    {
      PyObject *obj = t_Iterator::wrap_jobject(object);
      if (obj != NULL && obj != Py_None)
      {
        t_Iterator *self = (t_Iterator *) obj;
        self->parameters[0] = p0;
      }
      return obj;
    }

    void t_Iterator::install(PyObject *module)
    {
      installType(&PY_TYPE(Iterator), &PY_TYPE_DEF(Iterator), module, "Iterator", 0);
    }

    void t_Iterator::initialize(PyObject *module)
    {
      PyObject_SetAttrString((PyObject *) PY_TYPE(Iterator), "class_", make_descriptor(Iterator::initializeClass, 1));
      PyObject_SetAttrString((PyObject *) PY_TYPE(Iterator), "wrapfn_", make_descriptor(t_Iterator::wrap_jobject));
      PyObject_SetAttrString((PyObject *) PY_TYPE(Iterator), "boxfn_", make_descriptor(boxObject));
    }

    static PyObject *t_Iterator_cast_(PyTypeObject *type, PyObject *arg)
    {
      if (!(arg = castCheck(arg, Iterator::initializeClass, 1)))
        return NULL;
      return t_Iterator::wrap_Object(Iterator(((t_Iterator *) arg)->object.this$));
    }
    static PyObject *t_Iterator_instance_(PyTypeObject *type, PyObject *arg)
    {
      if (!castCheck(arg, Iterator::initializeClass, 0))
        Py_RETURN_FALSE;
      Py_RETURN_TRUE;
    }

    static PyObject *t_Iterator_of_(t_Iterator *self, PyObject *args)
    {
      if (!parseArg(args, "T", 1, &(self->parameters)))
        Py_RETURN_SELF;
      return PyErr_SetArgsError((PyObject *) self, "of_", args);
    }

    static PyObject *t_Iterator_forEachRemaining(t_Iterator *self, PyObject *arg)
    {
      ::java::util::function::Consumer a0((jobject) NULL);
      PyTypeObject **p0;

      if (!parseArg(arg, "K", ::java::util::function::Consumer::initializeClass, &a0, &p0, ::java::util::function::t_Consumer::parameters_))
      {
        OBJ_CALL(self->object.forEachRemaining(a0));
        Py_RETURN_NONE;
      }

      PyErr_SetArgsError((PyObject *) self, "forEachRemaining", arg);
      return NULL;
    }

    static PyObject *t_Iterator_hasNext(t_Iterator *self)
    {
      jboolean result;
      OBJ_CALL(result = self->object.hasNext());
      Py_RETURN_BOOL(result);
    }

    static PyObject *t_Iterator_next(t_Iterator *self)
    {
      ::java::lang::Object result((jobject) NULL);
      OBJ_CALL(result = self->object.next());
      return self->parameters[0] != NULL ? wrapType(self->parameters[0], result.this$) : ::java::lang::t_Object::wrap_Object(result);
    }

    static PyObject *t_Iterator_remove(t_Iterator *self)
    {
      OBJ_CALL(self->object.remove());
      Py_RETURN_NONE;
    }
    static PyObject *t_Iterator_get__parameters_(t_Iterator *self, void *data)
    {
      return typeParameters(self->parameters, sizeof(self->parameters));
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/SimpleFieldComparator.h"
#include "org/apache/lucene/index/LeafReaderContext.h"
#include "org/apache/lucene/search/LeafFieldComparator.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/search/Scorable.h"
#include "java/io/IOException.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {

        ::java::lang::Class *SimpleFieldComparator::class$ = NULL;
        jmethodID *SimpleFieldComparator::mids$ = NULL;
        bool SimpleFieldComparator::live$ = false;

        jclass SimpleFieldComparator::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/search/SimpleFieldComparator");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_f2cc1bce94666404] = env->getMethodID(cls, "<init>", "()V");
            mids$[mid_getLeafComparator_6183906b7058c4b5] = env->getMethodID(cls, "getLeafComparator", "(Lorg/apache/lucene/index/LeafReaderContext;)Lorg/apache/lucene/search/LeafFieldComparator;");
            mids$[mid_setScorer_57a565cc0113e133] = env->getMethodID(cls, "setScorer", "(Lorg/apache/lucene/search/Scorable;)V");
            mids$[mid_doSetNextReader_8747e0e89febf88d] = env->getMethodID(cls, "doSetNextReader", "(Lorg/apache/lucene/index/LeafReaderContext;)V");

            class$ = new ::java::lang::Class(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        SimpleFieldComparator::SimpleFieldComparator() : ::org::apache::lucene::search::FieldComparator(env->newObject(initializeClass, &mids$, mid_init$_f2cc1bce94666404)) {}

        ::org::apache::lucene::search::LeafFieldComparator SimpleFieldComparator::getLeafComparator(const ::org::apache::lucene::index::LeafReaderContext & a0) const
        {
          return ::org::apache::lucene::search::LeafFieldComparator(env->callObjectMethod(this$, mids$[mid_getLeafComparator_6183906b7058c4b5], a0.this$));
        }

        void SimpleFieldComparator::setScorer(const ::org::apache::lucene::search::Scorable & a0) const
        {
          env->callVoidMethod(this$, mids$[mid_setScorer_57a565cc0113e133], a0.this$);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        static PyObject *t_SimpleFieldComparator_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_SimpleFieldComparator_instance_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_SimpleFieldComparator_of_(t_SimpleFieldComparator *self, PyObject *args);
        static int t_SimpleFieldComparator_init_(t_SimpleFieldComparator *self, PyObject *args, PyObject *kwds);
        static PyObject *t_SimpleFieldComparator_getLeafComparator(t_SimpleFieldComparator *self, PyObject *args);
        static PyObject *t_SimpleFieldComparator_setScorer(t_SimpleFieldComparator *self, PyObject *arg);
        static int t_SimpleFieldComparator_set__scorer(t_SimpleFieldComparator *self, PyObject *arg, void *data);
        static PyObject *t_SimpleFieldComparator_get__parameters_(t_SimpleFieldComparator *self, void *data);
        static PyGetSetDef t_SimpleFieldComparator__fields_[] = {
          DECLARE_SET_FIELD(t_SimpleFieldComparator, scorer),
          DECLARE_GET_FIELD(t_SimpleFieldComparator, parameters_),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_SimpleFieldComparator__methods_[] = {
          DECLARE_METHOD(t_SimpleFieldComparator, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_SimpleFieldComparator, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_SimpleFieldComparator, of_, METH_VARARGS),
          DECLARE_METHOD(t_SimpleFieldComparator, getLeafComparator, METH_VARARGS),
          DECLARE_METHOD(t_SimpleFieldComparator, setScorer, METH_O),
          { NULL, NULL, 0, NULL }
        };

        static PyType_Slot PY_TYPE_SLOTS(SimpleFieldComparator)[] = {
          { Py_tp_methods, t_SimpleFieldComparator__methods_ },
          { Py_tp_init, (void *) t_SimpleFieldComparator_init_ },
          { Py_tp_getset, t_SimpleFieldComparator__fields_ },
          { 0, NULL }
        };

        static PyType_Def *PY_TYPE_BASES(SimpleFieldComparator)[] = {
          &PY_TYPE_DEF(::org::apache::lucene::search::FieldComparator),
          NULL
        };

        DEFINE_TYPE(SimpleFieldComparator, t_SimpleFieldComparator, SimpleFieldComparator);
        PyObject *t_SimpleFieldComparator::wrap_Object(const SimpleFieldComparator& object, PyTypeObject *p0)
        {
          PyObject *obj = t_SimpleFieldComparator::wrap_Object(object);
          if (obj != NULL && obj != Py_None)
          {
            t_SimpleFieldComparator *self = (t_SimpleFieldComparator *) obj;
            self->parameters[0] = p0;
          }
          return obj;
        }

        PyObject *t_SimpleFieldComparator::wrap_jobject(const jobject& object, PyTypeObject *p0)
        {
          PyObject *obj = t_SimpleFieldComparator::wrap_jobject(object);
          if (obj != NULL && obj != Py_None)
          {
            t_SimpleFieldComparator *self = (t_SimpleFieldComparator *) obj;
            self->parameters[0] = p0;
          }
          return obj;
        }

        void t_SimpleFieldComparator::install(PyObject *module)
        {
          installType(&PY_TYPE(SimpleFieldComparator), &PY_TYPE_DEF(SimpleFieldComparator), module, "SimpleFieldComparator", 0);
        }

        void t_SimpleFieldComparator::initialize(PyObject *module)
        {
          PyObject_SetAttrString((PyObject *) PY_TYPE(SimpleFieldComparator), "class_", make_descriptor(SimpleFieldComparator::initializeClass, 1));
          PyObject_SetAttrString((PyObject *) PY_TYPE(SimpleFieldComparator), "wrapfn_", make_descriptor(t_SimpleFieldComparator::wrap_jobject));
          PyObject_SetAttrString((PyObject *) PY_TYPE(SimpleFieldComparator), "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_SimpleFieldComparator_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, SimpleFieldComparator::initializeClass, 1)))
            return NULL;
          return t_SimpleFieldComparator::wrap_Object(SimpleFieldComparator(((t_SimpleFieldComparator *) arg)->object.this$));
        }
        static PyObject *t_SimpleFieldComparator_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, SimpleFieldComparator::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static PyObject *t_SimpleFieldComparator_of_(t_SimpleFieldComparator *self, PyObject *args)
        {
          if (!parseArg(args, "T", 1, &(self->parameters)))
            Py_RETURN_SELF;
          return PyErr_SetArgsError((PyObject *) self, "of_", args);
        }

        static int t_SimpleFieldComparator_init_(t_SimpleFieldComparator *self, PyObject *args, PyObject *kwds)
        {
          SimpleFieldComparator object((jobject) NULL);

          INT_CALL(object = SimpleFieldComparator());
          self->object = object;

          return 0;
        }

        static PyObject *t_SimpleFieldComparator_getLeafComparator(t_SimpleFieldComparator *self, PyObject *args)
        {
          ::org::apache::lucene::index::LeafReaderContext a0((jobject) NULL);
          ::org::apache::lucene::search::LeafFieldComparator result((jobject) NULL);

          if (!parseArgs(args, "k", ::org::apache::lucene::index::LeafReaderContext::initializeClass, &a0))
          {
            OBJ_CALL(result = self->object.getLeafComparator(a0));
            return ::org::apache::lucene::search::t_LeafFieldComparator::wrap_Object(result);
          }

          return callSuper(PY_TYPE(SimpleFieldComparator), (PyObject *) self, "getLeafComparator", args, 2);
        }

        static PyObject *t_SimpleFieldComparator_setScorer(t_SimpleFieldComparator *self, PyObject *arg)
        {
          ::org::apache::lucene::search::Scorable a0((jobject) NULL);

          if (!parseArg(arg, "k", ::org::apache::lucene::search::Scorable::initializeClass, &a0))
          {
            OBJ_CALL(self->object.setScorer(a0));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "setScorer", arg);
          return NULL;
        }
        static PyObject *t_SimpleFieldComparator_get__parameters_(t_SimpleFieldComparator *self, void *data)
        {
          return typeParameters(self->parameters, sizeof(self->parameters));
        }

        static int t_SimpleFieldComparator_set__scorer(t_SimpleFieldComparator *self, PyObject *arg, void *data)
        {
          {
            ::org::apache::lucene::search::Scorable value((jobject) NULL);
            if (!parseArg(arg, "k", ::org::apache::lucene::search::Scorable::initializeClass, &value))
            {
              INT_CALL(self->object.setScorer(value));
              return 0;
            }
          }
          PyErr_SetArgsError((PyObject *) self, "scorer", arg);
          return -1;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queryparser/xml/ParserException.h"
#include "java/lang/String.h"
#include "java/lang/Throwable.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace xml {

          ::java::lang::Class *ParserException::class$ = NULL;
          jmethodID *ParserException::mids$ = NULL;
          bool ParserException::live$ = false;

          jclass ParserException::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/queryparser/xml/ParserException");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_f2cc1bce94666404] = env->getMethodID(cls, "<init>", "()V");
              mids$[mid_init$_9fd2eb66a64e6f0f] = env->getMethodID(cls, "<init>", "(Ljava/lang/String;)V");
              mids$[mid_init$_471cfbdb800444a7] = env->getMethodID(cls, "<init>", "(Ljava/lang/Throwable;)V");
              mids$[mid_init$_2e9d196dc293ffe6] = env->getMethodID(cls, "<init>", "(Ljava/lang/String;Ljava/lang/Throwable;)V");

              class$ = new ::java::lang::Class(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          ParserException::ParserException() : ::java::lang::Exception(env->newObject(initializeClass, &mids$, mid_init$_f2cc1bce94666404)) {}

          ParserException::ParserException(const ::java::lang::String & a0) : ::java::lang::Exception(env->newObject(initializeClass, &mids$, mid_init$_9fd2eb66a64e6f0f, a0.this$)) {}

          ParserException::ParserException(const ::java::lang::Throwable & a0) : ::java::lang::Exception(env->newObject(initializeClass, &mids$, mid_init$_471cfbdb800444a7, a0.this$)) {}

          ParserException::ParserException(const ::java::lang::String & a0, const ::java::lang::Throwable & a1) : ::java::lang::Exception(env->newObject(initializeClass, &mids$, mid_init$_2e9d196dc293ffe6, a0.this$, a1.this$)) {}
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace xml {
          static PyObject *t_ParserException_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_ParserException_instance_(PyTypeObject *type, PyObject *arg);
          static int t_ParserException_init_(t_ParserException *self, PyObject *args, PyObject *kwds);

          static PyMethodDef t_ParserException__methods_[] = {
            DECLARE_METHOD(t_ParserException, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_ParserException, instance_, METH_O | METH_CLASS),
            { NULL, NULL, 0, NULL }
          };

          static PyType_Slot PY_TYPE_SLOTS(ParserException)[] = {
            { Py_tp_methods, t_ParserException__methods_ },
            { Py_tp_init, (void *) t_ParserException_init_ },
            { 0, NULL }
          };

          static PyType_Def *PY_TYPE_BASES(ParserException)[] = {
            &PY_TYPE_DEF(::java::lang::Exception),
            NULL
          };

          DEFINE_TYPE(ParserException, t_ParserException, ParserException);

          void t_ParserException::install(PyObject *module)
          {
            installType(&PY_TYPE(ParserException), &PY_TYPE_DEF(ParserException), module, "ParserException", 0);
          }

          void t_ParserException::initialize(PyObject *module)
          {
            PyObject_SetAttrString((PyObject *) PY_TYPE(ParserException), "class_", make_descriptor(ParserException::initializeClass, 1));
            PyObject_SetAttrString((PyObject *) PY_TYPE(ParserException), "wrapfn_", make_descriptor(t_ParserException::wrap_jobject));
            PyObject_SetAttrString((PyObject *) PY_TYPE(ParserException), "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_ParserException_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, ParserException::initializeClass, 1)))
              return NULL;
            return t_ParserException::wrap_Object(ParserException(((t_ParserException *) arg)->object.this$));
          }
          static PyObject *t_ParserException_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, ParserException::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_ParserException_init_(t_ParserException *self, PyObject *args, PyObject *kwds)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 0:
              {
                ParserException object((jobject) NULL);

                INT_CALL(object = ParserException());
                self->object = object;
                break;
              }
             case 1:
              {
                ::java::lang::String a0((jobject) NULL);
                ParserException object((jobject) NULL);

                if (!parseArgs(args, "s", &a0))
                {
                  INT_CALL(object = ParserException(a0));
                  self->object = object;
                  break;
                }
              }
              {
                ::java::lang::Throwable a0((jobject) NULL);
                ParserException object((jobject) NULL);

                if (!parseArgs(args, "k", ::java::lang::Throwable::initializeClass, &a0))
                {
                  INT_CALL(object = ParserException(a0));
                  self->object = object;
                  break;
                }
              }
              goto err;
             case 2:
              {
                ::java::lang::String a0((jobject) NULL);
                ::java::lang::Throwable a1((jobject) NULL);
                ParserException object((jobject) NULL);

                if (!parseArgs(args, "sk", ::java::lang::Throwable::initializeClass, &a0, &a1))
                {
                  INT_CALL(object = ParserException(a0, a1));
                  self->object = object;
                  break;
                }
              }
             default:
             err:
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/vectorhighlight/FieldFragList$WeightedFragInfo.h"
#include "java/util/List.h"
#include "java/lang/String.h"
#include "org/apache/lucene/search/vectorhighlight/FieldFragList$WeightedFragInfo$SubInfo.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace vectorhighlight {

          ::java::lang::Class *FieldFragList$WeightedFragInfo::class$ = NULL;
          jmethodID *FieldFragList$WeightedFragInfo::mids$ = NULL;
          bool FieldFragList$WeightedFragInfo::live$ = false;

          jclass FieldFragList$WeightedFragInfo::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/search/vectorhighlight/FieldFragList$WeightedFragInfo");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_4ce11ad52eb3b594] = env->getMethodID(cls, "<init>", "(IILjava/util/List;F)V");
              mids$[mid_getEndOffset_9972fcc56b44e79d] = env->getMethodID(cls, "getEndOffset", "()I");
              mids$[mid_getStartOffset_9972fcc56b44e79d] = env->getMethodID(cls, "getStartOffset", "()I");
              mids$[mid_getSubInfos_49ec78390f08338a] = env->getMethodID(cls, "getSubInfos", "()Ljava/util/List;");
              mids$[mid_getTotalBoost_58aec2b64dff50c8] = env->getMethodID(cls, "getTotalBoost", "()F");
              mids$[mid_toString_db9b55ba01e03e4b] = env->getMethodID(cls, "toString", "()Ljava/lang/String;");

              class$ = new ::java::lang::Class(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          FieldFragList$WeightedFragInfo::FieldFragList$WeightedFragInfo(jint a0, jint a1, const ::java::util::List & a2, jfloat a3) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_4ce11ad52eb3b594, a0, a1, a2.this$, a3)) {}

          jint FieldFragList$WeightedFragInfo::getEndOffset() const
          {
            return env->callIntMethod(this$, mids$[mid_getEndOffset_9972fcc56b44e79d]);
          }

          jint FieldFragList$WeightedFragInfo::getStartOffset() const
          {
            return env->callIntMethod(this$, mids$[mid_getStartOffset_9972fcc56b44e79d]);
          }

          ::java::util::List FieldFragList$WeightedFragInfo::getSubInfos() const
          {
            return ::java::util::List(env->callObjectMethod(this$, mids$[mid_getSubInfos_49ec78390f08338a]));
          }

          jfloat FieldFragList$WeightedFragInfo::getTotalBoost() const
          {
            return env->callFloatMethod(this$, mids$[mid_getTotalBoost_58aec2b64dff50c8]);
          }

          ::java::lang::String FieldFragList$WeightedFragInfo::toString() const
          {
            return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_db9b55ba01e03e4b]));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace vectorhighlight {
          static PyObject *t_FieldFragList$WeightedFragInfo_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_FieldFragList$WeightedFragInfo_instance_(PyTypeObject *type, PyObject *arg);
          static int t_FieldFragList$WeightedFragInfo_init_(t_FieldFragList$WeightedFragInfo *self, PyObject *args, PyObject *kwds);
          static PyObject *t_FieldFragList$WeightedFragInfo_getEndOffset(t_FieldFragList$WeightedFragInfo *self);
          static PyObject *t_FieldFragList$WeightedFragInfo_getStartOffset(t_FieldFragList$WeightedFragInfo *self);
          static PyObject *t_FieldFragList$WeightedFragInfo_getSubInfos(t_FieldFragList$WeightedFragInfo *self);
          static PyObject *t_FieldFragList$WeightedFragInfo_getTotalBoost(t_FieldFragList$WeightedFragInfo *self);
          static PyObject *t_FieldFragList$WeightedFragInfo_toString(t_FieldFragList$WeightedFragInfo *self, PyObject *args);
          static PyObject *t_FieldFragList$WeightedFragInfo_get__endOffset(t_FieldFragList$WeightedFragInfo *self, void *data);
          static PyObject *t_FieldFragList$WeightedFragInfo_get__startOffset(t_FieldFragList$WeightedFragInfo *self, void *data);
          static PyObject *t_FieldFragList$WeightedFragInfo_get__subInfos(t_FieldFragList$WeightedFragInfo *self, void *data);
          static PyObject *t_FieldFragList$WeightedFragInfo_get__totalBoost(t_FieldFragList$WeightedFragInfo *self, void *data);
          static PyGetSetDef t_FieldFragList$WeightedFragInfo__fields_[] = {
            DECLARE_GET_FIELD(t_FieldFragList$WeightedFragInfo, endOffset),
            DECLARE_GET_FIELD(t_FieldFragList$WeightedFragInfo, startOffset),
            DECLARE_GET_FIELD(t_FieldFragList$WeightedFragInfo, subInfos),
            DECLARE_GET_FIELD(t_FieldFragList$WeightedFragInfo, totalBoost),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_FieldFragList$WeightedFragInfo__methods_[] = {
            DECLARE_METHOD(t_FieldFragList$WeightedFragInfo, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_FieldFragList$WeightedFragInfo, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_FieldFragList$WeightedFragInfo, getEndOffset, METH_NOARGS),
            DECLARE_METHOD(t_FieldFragList$WeightedFragInfo, getStartOffset, METH_NOARGS),
            DECLARE_METHOD(t_FieldFragList$WeightedFragInfo, getSubInfos, METH_NOARGS),
            DECLARE_METHOD(t_FieldFragList$WeightedFragInfo, getTotalBoost, METH_NOARGS),
            DECLARE_METHOD(t_FieldFragList$WeightedFragInfo, toString, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          static PyType_Slot PY_TYPE_SLOTS(FieldFragList$WeightedFragInfo)[] = {
            { Py_tp_methods, t_FieldFragList$WeightedFragInfo__methods_ },
            { Py_tp_init, (void *) t_FieldFragList$WeightedFragInfo_init_ },
            { Py_tp_getset, t_FieldFragList$WeightedFragInfo__fields_ },
            { 0, NULL }
          };

          static PyType_Def *PY_TYPE_BASES(FieldFragList$WeightedFragInfo)[] = {
            &PY_TYPE_DEF(::java::lang::Object),
            NULL
          };

          DEFINE_TYPE(FieldFragList$WeightedFragInfo, t_FieldFragList$WeightedFragInfo, FieldFragList$WeightedFragInfo);

          void t_FieldFragList$WeightedFragInfo::install(PyObject *module)
          {
            installType(&PY_TYPE(FieldFragList$WeightedFragInfo), &PY_TYPE_DEF(FieldFragList$WeightedFragInfo), module, "FieldFragList$WeightedFragInfo", 0);
            PyObject_SetAttrString((PyObject *) PY_TYPE(FieldFragList$WeightedFragInfo), "SubInfo", make_descriptor(&PY_TYPE_DEF(FieldFragList$WeightedFragInfo$SubInfo)));
          }

          void t_FieldFragList$WeightedFragInfo::initialize(PyObject *module)
          {
            PyObject_SetAttrString((PyObject *) PY_TYPE(FieldFragList$WeightedFragInfo), "class_", make_descriptor(FieldFragList$WeightedFragInfo::initializeClass, 1));
            PyObject_SetAttrString((PyObject *) PY_TYPE(FieldFragList$WeightedFragInfo), "wrapfn_", make_descriptor(t_FieldFragList$WeightedFragInfo::wrap_jobject));
            PyObject_SetAttrString((PyObject *) PY_TYPE(FieldFragList$WeightedFragInfo), "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_FieldFragList$WeightedFragInfo_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, FieldFragList$WeightedFragInfo::initializeClass, 1)))
              return NULL;
            return t_FieldFragList$WeightedFragInfo::wrap_Object(FieldFragList$WeightedFragInfo(((t_FieldFragList$WeightedFragInfo *) arg)->object.this$));
          }
          static PyObject *t_FieldFragList$WeightedFragInfo_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, FieldFragList$WeightedFragInfo::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_FieldFragList$WeightedFragInfo_init_(t_FieldFragList$WeightedFragInfo *self, PyObject *args, PyObject *kwds)
          {
            jint a0;
            jint a1;
            ::java::util::List a2((jobject) NULL);
            PyTypeObject **p2;
            jfloat a3;
            FieldFragList$WeightedFragInfo object((jobject) NULL);

            if (!parseArgs(args, "IIKF", ::java::util::List::initializeClass, &a0, &a1, &a2, &p2, ::java::util::t_List::parameters_, &a3))
            {
              INT_CALL(object = FieldFragList$WeightedFragInfo(a0, a1, a2, a3));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_FieldFragList$WeightedFragInfo_getEndOffset(t_FieldFragList$WeightedFragInfo *self)
          {
            jint result;
            OBJ_CALL(result = self->object.getEndOffset());
            return PyLong_FromLong((long) result);
          }

          static PyObject *t_FieldFragList$WeightedFragInfo_getStartOffset(t_FieldFragList$WeightedFragInfo *self)
          {
            jint result;
            OBJ_CALL(result = self->object.getStartOffset());
            return PyLong_FromLong((long) result);
          }

          static PyObject *t_FieldFragList$WeightedFragInfo_getSubInfos(t_FieldFragList$WeightedFragInfo *self)
          {
            ::java::util::List result((jobject) NULL);
            OBJ_CALL(result = self->object.getSubInfos());
            return ::java::util::t_List::wrap_Object(result, ::org::apache::lucene::search::vectorhighlight::PY_TYPE(FieldFragList$WeightedFragInfo$SubInfo));
          }

          static PyObject *t_FieldFragList$WeightedFragInfo_getTotalBoost(t_FieldFragList$WeightedFragInfo *self)
          {
            jfloat result;
            OBJ_CALL(result = self->object.getTotalBoost());
            return PyFloat_FromDouble((double) result);
          }

          static PyObject *t_FieldFragList$WeightedFragInfo_toString(t_FieldFragList$WeightedFragInfo *self, PyObject *args)
          {
            ::java::lang::String result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.toString());
              return j2p(result);
            }

            return callSuper(PY_TYPE(FieldFragList$WeightedFragInfo), (PyObject *) self, "toString", args, 2);
          }

          static PyObject *t_FieldFragList$WeightedFragInfo_get__endOffset(t_FieldFragList$WeightedFragInfo *self, void *data)
          {
            jint value;
            OBJ_CALL(value = self->object.getEndOffset());
            return PyLong_FromLong((long) value);
          }

          static PyObject *t_FieldFragList$WeightedFragInfo_get__startOffset(t_FieldFragList$WeightedFragInfo *self, void *data)
          {
            jint value;
            OBJ_CALL(value = self->object.getStartOffset());
            return PyLong_FromLong((long) value);
          }

          static PyObject *t_FieldFragList$WeightedFragInfo_get__subInfos(t_FieldFragList$WeightedFragInfo *self, void *data)
          {
            ::java::util::List value((jobject) NULL);
            OBJ_CALL(value = self->object.getSubInfos());
            return ::java::util::t_List::wrap_Object(value);
          }

          static PyObject *t_FieldFragList$WeightedFragInfo_get__totalBoost(t_FieldFragList$WeightedFragInfo *self, void *data)
          {
            jfloat value;
            OBJ_CALL(value = self->object.getTotalBoost());
            return PyFloat_FromDouble((double) value);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queryparser/flexible/core/config/FieldConfigListener.h"
#include "org/apache/lucene/queryparser/flexible/core/config/FieldConfig.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace core {
            namespace config {

              ::java::lang::Class *FieldConfigListener::class$ = NULL;
              jmethodID *FieldConfigListener::mids$ = NULL;
              bool FieldConfigListener::live$ = false;

              jclass FieldConfigListener::initializeClass(bool getOnly)
              {
                if (getOnly)
                  return (jclass) (live$ ? class$->this$ : NULL);
                if (class$ == NULL)
                {
                  jclass cls = (jclass) env->findClass("org/apache/lucene/queryparser/flexible/core/config/FieldConfigListener");

                  mids$ = new jmethodID[max_mid];
                  mids$[mid_buildFieldConfig_4a2b3be8fbbde515] = env->getMethodID(cls, "buildFieldConfig", "(Lorg/apache/lucene/queryparser/flexible/core/config/FieldConfig;)V");

                  class$ = new ::java::lang::Class(cls);
                  live$ = true;
                }
                return (jclass) class$->this$;
              }

              void FieldConfigListener::buildFieldConfig(const ::org::apache::lucene::queryparser::flexible::core::config::FieldConfig & a0) const
              {
                env->callVoidMethod(this$, mids$[mid_buildFieldConfig_4a2b3be8fbbde515], a0.this$);
              }
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace core {
            namespace config {
              static PyObject *t_FieldConfigListener_cast_(PyTypeObject *type, PyObject *arg);
              static PyObject *t_FieldConfigListener_instance_(PyTypeObject *type, PyObject *arg);
              static PyObject *t_FieldConfigListener_buildFieldConfig(t_FieldConfigListener *self, PyObject *arg);

              static PyMethodDef t_FieldConfigListener__methods_[] = {
                DECLARE_METHOD(t_FieldConfigListener, cast_, METH_O | METH_CLASS),
                DECLARE_METHOD(t_FieldConfigListener, instance_, METH_O | METH_CLASS),
                DECLARE_METHOD(t_FieldConfigListener, buildFieldConfig, METH_O),
                { NULL, NULL, 0, NULL }
              };

              static PyType_Slot PY_TYPE_SLOTS(FieldConfigListener)[] = {
                { Py_tp_methods, t_FieldConfigListener__methods_ },
                { Py_tp_init, (void *) abstract_init },
                { 0, NULL }
              };

              static PyType_Def *PY_TYPE_BASES(FieldConfigListener)[] = {
                &PY_TYPE_DEF(::java::lang::Object),
                NULL
              };

              DEFINE_TYPE(FieldConfigListener, t_FieldConfigListener, FieldConfigListener);

              void t_FieldConfigListener::install(PyObject *module)
              {
                installType(&PY_TYPE(FieldConfigListener), &PY_TYPE_DEF(FieldConfigListener), module, "FieldConfigListener", 0);
              }

              void t_FieldConfigListener::initialize(PyObject *module)
              {
                PyObject_SetAttrString((PyObject *) PY_TYPE(FieldConfigListener), "class_", make_descriptor(FieldConfigListener::initializeClass, 1));
                PyObject_SetAttrString((PyObject *) PY_TYPE(FieldConfigListener), "wrapfn_", make_descriptor(t_FieldConfigListener::wrap_jobject));
                PyObject_SetAttrString((PyObject *) PY_TYPE(FieldConfigListener), "boxfn_", make_descriptor(boxObject));
              }

              static PyObject *t_FieldConfigListener_cast_(PyTypeObject *type, PyObject *arg)
              {
                if (!(arg = castCheck(arg, FieldConfigListener::initializeClass, 1)))
                  return NULL;
                return t_FieldConfigListener::wrap_Object(FieldConfigListener(((t_FieldConfigListener *) arg)->object.this$));
              }
              static PyObject *t_FieldConfigListener_instance_(PyTypeObject *type, PyObject *arg)
              {
                if (!castCheck(arg, FieldConfigListener::initializeClass, 0))
                  Py_RETURN_FALSE;
                Py_RETURN_TRUE;
              }

              static PyObject *t_FieldConfigListener_buildFieldConfig(t_FieldConfigListener *self, PyObject *arg)
              {
                ::org::apache::lucene::queryparser::flexible::core::config::FieldConfig a0((jobject) NULL);

                if (!parseArg(arg, "k", ::org::apache::lucene::queryparser::flexible::core::config::FieldConfig::initializeClass, &a0))
                {
                  OBJ_CALL(self->object.buildFieldConfig(a0));
                  Py_RETURN_NONE;
                }

                PyErr_SetArgsError((PyObject *) self, "buildFieldConfig", arg);
                return NULL;
              }
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queryparser/flexible/standard/processors/DefaultPhraseSlopQueryNodeProcessor.h"
#include "org/apache/lucene/queryparser/flexible/core/QueryNodeException.h"
#include "org/apache/lucene/queryparser/flexible/core/nodes/QueryNode.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace standard {
            namespace processors {

              ::java::lang::Class *DefaultPhraseSlopQueryNodeProcessor::class$ = NULL;
              jmethodID *DefaultPhraseSlopQueryNodeProcessor::mids$ = NULL;
              bool DefaultPhraseSlopQueryNodeProcessor::live$ = false;

              jclass DefaultPhraseSlopQueryNodeProcessor::initializeClass(bool getOnly)
              {
                if (getOnly)
                  return (jclass) (live$ ? class$->this$ : NULL);
                if (class$ == NULL)
                {
                  jclass cls = (jclass) env->findClass("org/apache/lucene/queryparser/flexible/standard/processors/DefaultPhraseSlopQueryNodeProcessor");

                  mids$ = new jmethodID[max_mid];
                  mids$[mid_init$_f2cc1bce94666404] = env->getMethodID(cls, "<init>", "()V");
                  mids$[mid_process_9b07be8595532de7] = env->getMethodID(cls, "process", "(Lorg/apache/lucene/queryparser/flexible/core/nodes/QueryNode;)Lorg/apache/lucene/queryparser/flexible/core/nodes/QueryNode;");
                  mids$[mid_processChildren_f80bf4f68564485e] = env->getMethodID(cls, "processChildren", "(Lorg/apache/lucene/queryparser/flexible/core/nodes/QueryNode;)V");
                  mids$[mid_preProcessNode_9b07be8595532de7] = env->getMethodID(cls, "preProcessNode", "(Lorg/apache/lucene/queryparser/flexible/core/nodes/QueryNode;)Lorg/apache/lucene/queryparser/flexible/core/nodes/QueryNode;");
                  mids$[mid_postProcessNode_9b07be8595532de7] = env->getMethodID(cls, "postProcessNode", "(Lorg/apache/lucene/queryparser/flexible/core/nodes/QueryNode;)Lorg/apache/lucene/queryparser/flexible/core/nodes/QueryNode;");
                  mids$[mid_setChildrenOrder_e420eeaadf0bcd20] = env->getMethodID(cls, "setChildrenOrder", "(Ljava/util/List;)Ljava/util/List;");

                  class$ = new ::java::lang::Class(cls);
                  live$ = true;
                }
                return (jclass) class$->this$;
              }

              DefaultPhraseSlopQueryNodeProcessor::DefaultPhraseSlopQueryNodeProcessor() : ::org::apache::lucene::queryparser::flexible::core::processors::QueryNodeProcessorImpl(env->newObject(initializeClass, &mids$, mid_init$_f2cc1bce94666404)) {}

              ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode DefaultPhraseSlopQueryNodeProcessor::process(const ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode & a0) const
              {
                return ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode(env->callObjectMethod(this$, mids$[mid_process_9b07be8595532de7], a0.this$));
              }
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace standard {
            namespace processors {
              static PyObject *t_DefaultPhraseSlopQueryNodeProcessor_cast_(PyTypeObject *type, PyObject *arg);
              static PyObject *t_DefaultPhraseSlopQueryNodeProcessor_instance_(PyTypeObject *type, PyObject *arg);
              static int t_DefaultPhraseSlopQueryNodeProcessor_init_(t_DefaultPhraseSlopQueryNodeProcessor *self, PyObject *args, PyObject *kwds);
              static PyObject *t_DefaultPhraseSlopQueryNodeProcessor_process(t_DefaultPhraseSlopQueryNodeProcessor *self, PyObject *args);

              static PyMethodDef t_DefaultPhraseSlopQueryNodeProcessor__methods_[] = {
                DECLARE_METHOD(t_DefaultPhraseSlopQueryNodeProcessor, cast_, METH_O | METH_CLASS),
                DECLARE_METHOD(t_DefaultPhraseSlopQueryNodeProcessor, instance_, METH_O | METH_CLASS),
                DECLARE_METHOD(t_DefaultPhraseSlopQueryNodeProcessor, process, METH_VARARGS),
                { NULL, NULL, 0, NULL }
              };

              static PyType_Slot PY_TYPE_SLOTS(DefaultPhraseSlopQueryNodeProcessor)[] = {
                { Py_tp_methods, t_DefaultPhraseSlopQueryNodeProcessor__methods_ },
                { Py_tp_init, (void *) t_DefaultPhraseSlopQueryNodeProcessor_init_ },
                { 0, NULL }
              };

              static PyType_Def *PY_TYPE_BASES(DefaultPhraseSlopQueryNodeProcessor)[] = {
                &PY_TYPE_DEF(::org::apache::lucene::queryparser::flexible::core::processors::QueryNodeProcessorImpl),
                NULL
              };

              DEFINE_TYPE(DefaultPhraseSlopQueryNodeProcessor, t_DefaultPhraseSlopQueryNodeProcessor, DefaultPhraseSlopQueryNodeProcessor);

              void t_DefaultPhraseSlopQueryNodeProcessor::install(PyObject *module)
              {
                installType(&PY_TYPE(DefaultPhraseSlopQueryNodeProcessor), &PY_TYPE_DEF(DefaultPhraseSlopQueryNodeProcessor), module, "DefaultPhraseSlopQueryNodeProcessor", 0);
              }

              void t_DefaultPhraseSlopQueryNodeProcessor::initialize(PyObject *module)
              {
                PyObject_SetAttrString((PyObject *) PY_TYPE(DefaultPhraseSlopQueryNodeProcessor), "class_", make_descriptor(DefaultPhraseSlopQueryNodeProcessor::initializeClass, 1));
                PyObject_SetAttrString((PyObject *) PY_TYPE(DefaultPhraseSlopQueryNodeProcessor), "wrapfn_", make_descriptor(t_DefaultPhraseSlopQueryNodeProcessor::wrap_jobject));
                PyObject_SetAttrString((PyObject *) PY_TYPE(DefaultPhraseSlopQueryNodeProcessor), "boxfn_", make_descriptor(boxObject));
              }

              static PyObject *t_DefaultPhraseSlopQueryNodeProcessor_cast_(PyTypeObject *type, PyObject *arg)
              {
                if (!(arg = castCheck(arg, DefaultPhraseSlopQueryNodeProcessor::initializeClass, 1)))
                  return NULL;
                return t_DefaultPhraseSlopQueryNodeProcessor::wrap_Object(DefaultPhraseSlopQueryNodeProcessor(((t_DefaultPhraseSlopQueryNodeProcessor *) arg)->object.this$));
              }
              static PyObject *t_DefaultPhraseSlopQueryNodeProcessor_instance_(PyTypeObject *type, PyObject *arg)
              {
                if (!castCheck(arg, DefaultPhraseSlopQueryNodeProcessor::initializeClass, 0))
                  Py_RETURN_FALSE;
                Py_RETURN_TRUE;
              }

              static int t_DefaultPhraseSlopQueryNodeProcessor_init_(t_DefaultPhraseSlopQueryNodeProcessor *self, PyObject *args, PyObject *kwds)
              {
                DefaultPhraseSlopQueryNodeProcessor object((jobject) NULL);

                INT_CALL(object = DefaultPhraseSlopQueryNodeProcessor());
                self->object = object;

                return 0;
              }

              static PyObject *t_DefaultPhraseSlopQueryNodeProcessor_process(t_DefaultPhraseSlopQueryNodeProcessor *self, PyObject *args)
              {
                ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode a0((jobject) NULL);
                ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode result((jobject) NULL);

                if (!parseArgs(args, "k", ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode::initializeClass, &a0))
                {
                  OBJ_CALL(result = self->object.process(a0));
                  return ::org::apache::lucene::queryparser::flexible::core::nodes::t_QueryNode::wrap_Object(result);
                }

                return callSuper(PY_TYPE(DefaultPhraseSlopQueryNodeProcessor), (PyObject *) self, "process", args, 2);
              }
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/facet/Facets.h"
#include "org/apache/lucene/facet/FacetResult.h"
#include "java/lang/Number.h"
#include "java/lang/Class.h"
#include "java/lang/String.h"
#include "java/io/IOException.h"
#include "java/util/List.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace facet {

        ::java::lang::Class *Facets::class$ = NULL;
        jmethodID *Facets::mids$ = NULL;
        bool Facets::live$ = false;

        jclass Facets::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/facet/Facets");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_f2cc1bce94666404] = env->getMethodID(cls, "<init>", "()V");
            mids$[mid_getAllDims_d82aee015ceb4d93] = env->getMethodID(cls, "getAllDims", "(I)Ljava/util/List;");
            mids$[mid_getSpecificValue_aaf99af6028dc803] = env->getMethodID(cls, "getSpecificValue", "(Ljava/lang/String;[Ljava/lang/String;)Ljava/lang/Number;");
            mids$[mid_getTopChildren_8be156db8a3c742c] = env->getMethodID(cls, "getTopChildren", "(ILjava/lang/String;[Ljava/lang/String;)Lorg/apache/lucene/facet/FacetResult;");

            class$ = new ::java::lang::Class(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        Facets::Facets() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_f2cc1bce94666404)) {}

        ::java::util::List Facets::getAllDims(jint a0) const
        {
          return ::java::util::List(env->callObjectMethod(this$, mids$[mid_getAllDims_d82aee015ceb4d93], a0));
        }

        ::java::lang::Number Facets::getSpecificValue(const ::java::lang::String & a0, const JArray< ::java::lang::String > & a1) const
        {
          return ::java::lang::Number(env->callObjectMethod(this$, mids$[mid_getSpecificValue_aaf99af6028dc803], a0.this$, a1.this$));
        }

        ::org::apache::lucene::facet::FacetResult Facets::getTopChildren(jint a0, const ::java::lang::String & a1, const JArray< ::java::lang::String > & a2) const
        {
          return ::org::apache::lucene::facet::FacetResult(env->callObjectMethod(this$, mids$[mid_getTopChildren_8be156db8a3c742c], a0, a1.this$, a2.this$));
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace facet {
        static PyObject *t_Facets_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_Facets_instance_(PyTypeObject *type, PyObject *arg);
        static int t_Facets_init_(t_Facets *self, PyObject *args, PyObject *kwds);
        static PyObject *t_Facets_getAllDims(t_Facets *self, PyObject *arg);
        static PyObject *t_Facets_getSpecificValue(t_Facets *self, PyObject *args);
        static PyObject *t_Facets_getTopChildren(t_Facets *self, PyObject *args);

        static PyMethodDef t_Facets__methods_[] = {
          DECLARE_METHOD(t_Facets, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_Facets, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_Facets, getAllDims, METH_O),
          DECLARE_METHOD(t_Facets, getSpecificValue, METH_VARARGS),
          DECLARE_METHOD(t_Facets, getTopChildren, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        static PyType_Slot PY_TYPE_SLOTS(Facets)[] = {
          { Py_tp_methods, t_Facets__methods_ },
          { Py_tp_init, (void *) t_Facets_init_ },
          { 0, NULL }
        };

        static PyType_Def *PY_TYPE_BASES(Facets)[] = {
          &PY_TYPE_DEF(::java::lang::Object),
          NULL
        };

        DEFINE_TYPE(Facets, t_Facets, Facets);

        void t_Facets::install(PyObject *module)
        {
          installType(&PY_TYPE(Facets), &PY_TYPE_DEF(Facets), module, "Facets", 0);
        }

        void t_Facets::initialize(PyObject *module)
        {
          PyObject_SetAttrString((PyObject *) PY_TYPE(Facets), "class_", make_descriptor(Facets::initializeClass, 1));
          PyObject_SetAttrString((PyObject *) PY_TYPE(Facets), "wrapfn_", make_descriptor(t_Facets::wrap_jobject));
          PyObject_SetAttrString((PyObject *) PY_TYPE(Facets), "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_Facets_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, Facets::initializeClass, 1)))
            return NULL;
          return t_Facets::wrap_Object(Facets(((t_Facets *) arg)->object.this$));
        }
        static PyObject *t_Facets_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, Facets::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_Facets_init_(t_Facets *self, PyObject *args, PyObject *kwds)
        {
          Facets object((jobject) NULL);

          INT_CALL(object = Facets());
          self->object = object;

          return 0;
        }

        static PyObject *t_Facets_getAllDims(t_Facets *self, PyObject *arg)
        {
          jint a0;
          ::java::util::List result((jobject) NULL);

          if (!parseArg(arg, "I", &a0))
          {
            OBJ_CALL(result = self->object.getAllDims(a0));
            return ::java::util::t_List::wrap_Object(result, ::org::apache::lucene::facet::PY_TYPE(FacetResult));
          }

          PyErr_SetArgsError((PyObject *) self, "getAllDims", arg);
          return NULL;
        }

        static PyObject *t_Facets_getSpecificValue(t_Facets *self, PyObject *args)
        {
          ::java::lang::String a0((jobject) NULL);
          JArray< ::java::lang::String > a1((jobject) NULL);
          ::java::lang::Number result((jobject) NULL);

          if (!parseArgs(args, "s[s", &a0, &a1))
          {
            OBJ_CALL(result = self->object.getSpecificValue(a0, a1));
            return ::java::lang::t_Number::wrap_Object(result);
          }

          PyErr_SetArgsError((PyObject *) self, "getSpecificValue", args);
          return NULL;
        }

        static PyObject *t_Facets_getTopChildren(t_Facets *self, PyObject *args)
        {
          jint a0;
          ::java::lang::String a1((jobject) NULL);
          JArray< ::java::lang::String > a2((jobject) NULL);
          ::org::apache::lucene::facet::FacetResult result((jobject) NULL);

          if (!parseArgs(args, "Is[s", &a0, &a1, &a2))
          {
            OBJ_CALL(result = self->object.getTopChildren(a0, a1, a2));
            return ::org::apache::lucene::facet::t_FacetResult::wrap_Object(result);
          }

          PyErr_SetArgsError((PyObject *) self, "getTopChildren", args);
          return NULL;
        }
      }
    }
  }
}
