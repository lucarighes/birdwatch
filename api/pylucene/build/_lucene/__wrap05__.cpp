#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/ConjunctionDISI.h"
#include "java/util/Collection.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/search/Scorer.h"
#include "org/apache/lucene/search/spans/Spans.h"
#include "java/io/IOException.h"
#include "java/util/List.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {

        ::java::lang::Class *ConjunctionDISI::class$ = NULL;
        jmethodID *ConjunctionDISI::mids$ = NULL;
        bool ConjunctionDISI::live$ = false;

        jclass ConjunctionDISI::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/search/ConjunctionDISI");

            mids$ = new jmethodID[max_mid];
            mids$[mid_advance_1e143afe1894d213] = env->getMethodID(cls, "advance", "(I)I");
            mids$[mid_cost_2e5ae9edcb9b072f] = env->getMethodID(cls, "cost", "()J");
            mids$[mid_docID_9972fcc56b44e79d] = env->getMethodID(cls, "docID", "()I");
            mids$[mid_intersectIterators_b5cd02c6ae5f349e] = env->getStaticMethodID(cls, "intersectIterators", "(Ljava/util/List;)Lorg/apache/lucene/search/DocIdSetIterator;");
            mids$[mid_intersectScorers_0c9625fbb0af5641] = env->getStaticMethodID(cls, "intersectScorers", "(Ljava/util/Collection;)Lorg/apache/lucene/search/DocIdSetIterator;");
            mids$[mid_intersectSpans_b5cd02c6ae5f349e] = env->getStaticMethodID(cls, "intersectSpans", "(Ljava/util/List;)Lorg/apache/lucene/search/DocIdSetIterator;");
            mids$[mid_nextDoc_9972fcc56b44e79d] = env->getMethodID(cls, "nextDoc", "()I");

            class$ = new ::java::lang::Class(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        jint ConjunctionDISI::advance(jint a0) const
        {
          return env->callIntMethod(this$, mids$[mid_advance_1e143afe1894d213], a0);
        }

        jlong ConjunctionDISI::cost() const
        {
          return env->callLongMethod(this$, mids$[mid_cost_2e5ae9edcb9b072f]);
        }

        jint ConjunctionDISI::docID() const
        {
          return env->callIntMethod(this$, mids$[mid_docID_9972fcc56b44e79d]);
        }

        ::org::apache::lucene::search::DocIdSetIterator ConjunctionDISI::intersectIterators(const ::java::util::List & a0)
        {
          jclass cls = env->getClass(initializeClass);
          return ::org::apache::lucene::search::DocIdSetIterator(env->callStaticObjectMethod(cls, mids$[mid_intersectIterators_b5cd02c6ae5f349e], a0.this$));
        }

        ::org::apache::lucene::search::DocIdSetIterator ConjunctionDISI::intersectScorers(const ::java::util::Collection & a0)
        {
          jclass cls = env->getClass(initializeClass);
          return ::org::apache::lucene::search::DocIdSetIterator(env->callStaticObjectMethod(cls, mids$[mid_intersectScorers_0c9625fbb0af5641], a0.this$));
        }

        ::org::apache::lucene::search::DocIdSetIterator ConjunctionDISI::intersectSpans(const ::java::util::List & a0)
        {
          jclass cls = env->getClass(initializeClass);
          return ::org::apache::lucene::search::DocIdSetIterator(env->callStaticObjectMethod(cls, mids$[mid_intersectSpans_b5cd02c6ae5f349e], a0.this$));
        }

        jint ConjunctionDISI::nextDoc() const
        {
          return env->callIntMethod(this$, mids$[mid_nextDoc_9972fcc56b44e79d]);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        static PyObject *t_ConjunctionDISI_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_ConjunctionDISI_instance_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_ConjunctionDISI_advance(t_ConjunctionDISI *self, PyObject *args);
        static PyObject *t_ConjunctionDISI_cost(t_ConjunctionDISI *self, PyObject *args);
        static PyObject *t_ConjunctionDISI_docID(t_ConjunctionDISI *self, PyObject *args);
        static PyObject *t_ConjunctionDISI_intersectIterators(PyTypeObject *type, PyObject *arg);
        static PyObject *t_ConjunctionDISI_intersectScorers(PyTypeObject *type, PyObject *arg);
        static PyObject *t_ConjunctionDISI_intersectSpans(PyTypeObject *type, PyObject *arg);
        static PyObject *t_ConjunctionDISI_nextDoc(t_ConjunctionDISI *self, PyObject *args);

        static PyMethodDef t_ConjunctionDISI__methods_[] = {
          DECLARE_METHOD(t_ConjunctionDISI, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_ConjunctionDISI, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_ConjunctionDISI, advance, METH_VARARGS),
          DECLARE_METHOD(t_ConjunctionDISI, cost, METH_VARARGS),
          DECLARE_METHOD(t_ConjunctionDISI, docID, METH_VARARGS),
          DECLARE_METHOD(t_ConjunctionDISI, intersectIterators, METH_O | METH_CLASS),
          DECLARE_METHOD(t_ConjunctionDISI, intersectScorers, METH_O | METH_CLASS),
          DECLARE_METHOD(t_ConjunctionDISI, intersectSpans, METH_O | METH_CLASS),
          DECLARE_METHOD(t_ConjunctionDISI, nextDoc, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        static PyType_Slot PY_TYPE_SLOTS(ConjunctionDISI)[] = {
          { Py_tp_methods, t_ConjunctionDISI__methods_ },
          { Py_tp_init, (void *) abstract_init },
          { 0, NULL }
        };

        static PyType_Def *PY_TYPE_BASES(ConjunctionDISI)[] = {
          &PY_TYPE_DEF(::org::apache::lucene::search::DocIdSetIterator),
          NULL
        };

        DEFINE_TYPE(ConjunctionDISI, t_ConjunctionDISI, ConjunctionDISI);

        void t_ConjunctionDISI::install(PyObject *module)
        {
          installType(&PY_TYPE(ConjunctionDISI), &PY_TYPE_DEF(ConjunctionDISI), module, "ConjunctionDISI", 0);
        }

        void t_ConjunctionDISI::initialize(PyObject *module)
        {
          PyObject_SetAttrString((PyObject *) PY_TYPE(ConjunctionDISI), "class_", make_descriptor(ConjunctionDISI::initializeClass, 1));
          PyObject_SetAttrString((PyObject *) PY_TYPE(ConjunctionDISI), "wrapfn_", make_descriptor(t_ConjunctionDISI::wrap_jobject));
          PyObject_SetAttrString((PyObject *) PY_TYPE(ConjunctionDISI), "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_ConjunctionDISI_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, ConjunctionDISI::initializeClass, 1)))
            return NULL;
          return t_ConjunctionDISI::wrap_Object(ConjunctionDISI(((t_ConjunctionDISI *) arg)->object.this$));
        }
        static PyObject *t_ConjunctionDISI_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, ConjunctionDISI::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static PyObject *t_ConjunctionDISI_advance(t_ConjunctionDISI *self, PyObject *args)
        {
          jint a0;
          jint result;

          if (!parseArgs(args, "I", &a0))
          {
            OBJ_CALL(result = self->object.advance(a0));
            return PyLong_FromLong((long) result);
          }

          return callSuper(PY_TYPE(ConjunctionDISI), (PyObject *) self, "advance", args, 2);
        }

        static PyObject *t_ConjunctionDISI_cost(t_ConjunctionDISI *self, PyObject *args)
        {
          jlong result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.cost());
            return PyLong_FromLongLong((PY_LONG_LONG) result);
          }

          return callSuper(PY_TYPE(ConjunctionDISI), (PyObject *) self, "cost", args, 2);
        }

        static PyObject *t_ConjunctionDISI_docID(t_ConjunctionDISI *self, PyObject *args)
        {
          jint result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.docID());
            return PyLong_FromLong((long) result);
          }

          return callSuper(PY_TYPE(ConjunctionDISI), (PyObject *) self, "docID", args, 2);
        }

        static PyObject *t_ConjunctionDISI_intersectIterators(PyTypeObject *type, PyObject *arg)
        {
          ::java::util::List a0((jobject) NULL);
          PyTypeObject **p0;
          ::org::apache::lucene::search::DocIdSetIterator result((jobject) NULL);

          if (!parseArg(arg, "K", ::java::util::List::initializeClass, &a0, &p0, ::java::util::t_List::parameters_))
          {
            OBJ_CALL(result = ::org::apache::lucene::search::ConjunctionDISI::intersectIterators(a0));
            return ::org::apache::lucene::search::t_DocIdSetIterator::wrap_Object(result);
          }

          PyErr_SetArgsError(type, "intersectIterators", arg);
          return NULL;
        }

        static PyObject *t_ConjunctionDISI_intersectScorers(PyTypeObject *type, PyObject *arg)
        {
          ::java::util::Collection a0((jobject) NULL);
          PyTypeObject **p0;
          ::org::apache::lucene::search::DocIdSetIterator result((jobject) NULL);

          if (!parseArg(arg, "K", ::java::util::Collection::initializeClass, &a0, &p0, ::java::util::t_Collection::parameters_))
          {
            OBJ_CALL(result = ::org::apache::lucene::search::ConjunctionDISI::intersectScorers(a0));
            return ::org::apache::lucene::search::t_DocIdSetIterator::wrap_Object(result);
          }

          PyErr_SetArgsError(type, "intersectScorers", arg);
          return NULL;
        }

        static PyObject *t_ConjunctionDISI_intersectSpans(PyTypeObject *type, PyObject *arg)
        {
          ::java::util::List a0((jobject) NULL);
          PyTypeObject **p0;
          ::org::apache::lucene::search::DocIdSetIterator result((jobject) NULL);

          if (!parseArg(arg, "K", ::java::util::List::initializeClass, &a0, &p0, ::java::util::t_List::parameters_))
          {
            OBJ_CALL(result = ::org::apache::lucene::search::ConjunctionDISI::intersectSpans(a0));
            return ::org::apache::lucene::search::t_DocIdSetIterator::wrap_Object(result);
          }

          PyErr_SetArgsError(type, "intersectSpans", arg);
          return NULL;
        }

        static PyObject *t_ConjunctionDISI_nextDoc(t_ConjunctionDISI *self, PyObject *args)
        {
          jint result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.nextDoc());
            return PyLong_FromLong((long) result);
          }

          return callSuper(PY_TYPE(ConjunctionDISI), (PyObject *) self, "nextDoc", args, 2);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/miscellaneous/ConditionalTokenFilter.h"
#include "java/io/IOException.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace miscellaneous {

          ::java::lang::Class *ConditionalTokenFilter::class$ = NULL;
          jmethodID *ConditionalTokenFilter::mids$ = NULL;
          bool ConditionalTokenFilter::live$ = false;

          jclass ConditionalTokenFilter::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/miscellaneous/ConditionalTokenFilter");

              mids$ = new jmethodID[max_mid];
              mids$[mid_close_f2cc1bce94666404] = env->getMethodID(cls, "close", "()V");
              mids$[mid_end_f2cc1bce94666404] = env->getMethodID(cls, "end", "()V");
              mids$[mid_incrementToken_8454bd5aa23fd11e] = env->getMethodID(cls, "incrementToken", "()Z");
              mids$[mid_reset_f2cc1bce94666404] = env->getMethodID(cls, "reset", "()V");
              mids$[mid_shouldFilter_8454bd5aa23fd11e] = env->getMethodID(cls, "shouldFilter", "()Z");

              class$ = new ::java::lang::Class(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          void ConditionalTokenFilter::close() const
          {
            env->callVoidMethod(this$, mids$[mid_close_f2cc1bce94666404]);
          }

          void ConditionalTokenFilter::end() const
          {
            env->callVoidMethod(this$, mids$[mid_end_f2cc1bce94666404]);
          }

          jboolean ConditionalTokenFilter::incrementToken() const
          {
            return env->callBooleanMethod(this$, mids$[mid_incrementToken_8454bd5aa23fd11e]);
          }

          void ConditionalTokenFilter::reset() const
          {
            env->callVoidMethod(this$, mids$[mid_reset_f2cc1bce94666404]);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace miscellaneous {
          static PyObject *t_ConditionalTokenFilter_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_ConditionalTokenFilter_instance_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_ConditionalTokenFilter_close(t_ConditionalTokenFilter *self, PyObject *args);
          static PyObject *t_ConditionalTokenFilter_end(t_ConditionalTokenFilter *self, PyObject *args);
          static PyObject *t_ConditionalTokenFilter_incrementToken(t_ConditionalTokenFilter *self, PyObject *args);
          static PyObject *t_ConditionalTokenFilter_reset(t_ConditionalTokenFilter *self, PyObject *args);

          static PyMethodDef t_ConditionalTokenFilter__methods_[] = {
            DECLARE_METHOD(t_ConditionalTokenFilter, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_ConditionalTokenFilter, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_ConditionalTokenFilter, close, METH_VARARGS),
            DECLARE_METHOD(t_ConditionalTokenFilter, end, METH_VARARGS),
            DECLARE_METHOD(t_ConditionalTokenFilter, incrementToken, METH_VARARGS),
            DECLARE_METHOD(t_ConditionalTokenFilter, reset, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          static PyType_Slot PY_TYPE_SLOTS(ConditionalTokenFilter)[] = {
            { Py_tp_methods, t_ConditionalTokenFilter__methods_ },
            { Py_tp_init, (void *) abstract_init },
            { 0, NULL }
          };

          static PyType_Def *PY_TYPE_BASES(ConditionalTokenFilter)[] = {
            &PY_TYPE_DEF(::org::apache::lucene::analysis::TokenFilter),
            NULL
          };

          DEFINE_TYPE(ConditionalTokenFilter, t_ConditionalTokenFilter, ConditionalTokenFilter);

          void t_ConditionalTokenFilter::install(PyObject *module)
          {
            installType(&PY_TYPE(ConditionalTokenFilter), &PY_TYPE_DEF(ConditionalTokenFilter), module, "ConditionalTokenFilter", 0);
          }

          void t_ConditionalTokenFilter::initialize(PyObject *module)
          {
            PyObject_SetAttrString((PyObject *) PY_TYPE(ConditionalTokenFilter), "class_", make_descriptor(ConditionalTokenFilter::initializeClass, 1));
            PyObject_SetAttrString((PyObject *) PY_TYPE(ConditionalTokenFilter), "wrapfn_", make_descriptor(t_ConditionalTokenFilter::wrap_jobject));
            PyObject_SetAttrString((PyObject *) PY_TYPE(ConditionalTokenFilter), "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_ConditionalTokenFilter_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, ConditionalTokenFilter::initializeClass, 1)))
              return NULL;
            return t_ConditionalTokenFilter::wrap_Object(ConditionalTokenFilter(((t_ConditionalTokenFilter *) arg)->object.this$));
          }
          static PyObject *t_ConditionalTokenFilter_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, ConditionalTokenFilter::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static PyObject *t_ConditionalTokenFilter_close(t_ConditionalTokenFilter *self, PyObject *args)
          {

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(self->object.close());
              Py_RETURN_NONE;
            }

            return callSuper(PY_TYPE(ConditionalTokenFilter), (PyObject *) self, "close", args, 2);
          }

          static PyObject *t_ConditionalTokenFilter_end(t_ConditionalTokenFilter *self, PyObject *args)
          {

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(self->object.end());
              Py_RETURN_NONE;
            }

            return callSuper(PY_TYPE(ConditionalTokenFilter), (PyObject *) self, "end", args, 2);
          }

          static PyObject *t_ConditionalTokenFilter_incrementToken(t_ConditionalTokenFilter *self, PyObject *args)
          {
            jboolean result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.incrementToken());
              Py_RETURN_BOOL(result);
            }

            return callSuper(PY_TYPE(ConditionalTokenFilter), (PyObject *) self, "incrementToken", args, 2);
          }

          static PyObject *t_ConditionalTokenFilter_reset(t_ConditionalTokenFilter *self, PyObject *args)
          {

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(self->object.reset());
              Py_RETURN_NONE;
            }

            return callSuper(PY_TYPE(ConditionalTokenFilter), (PyObject *) self, "reset", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/store/LockStressTest.h"
#include "java/lang/String.h"
#include "java/lang/Exception.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace store {

        ::java::lang::Class *LockStressTest::class$ = NULL;
        jmethodID *LockStressTest::mids$ = NULL;
        bool LockStressTest::live$ = false;

        jclass LockStressTest::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/store/LockStressTest");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_f2cc1bce94666404] = env->getMethodID(cls, "<init>", "()V");
            mids$[mid_main_2fc318b999a7aba3] = env->getStaticMethodID(cls, "main", "([Ljava/lang/String;)V");

            class$ = new ::java::lang::Class(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        LockStressTest::LockStressTest() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_f2cc1bce94666404)) {}

        void LockStressTest::main(const JArray< ::java::lang::String > & a0)
        {
          jclass cls = env->getClass(initializeClass);
          env->callStaticVoidMethod(cls, mids$[mid_main_2fc318b999a7aba3], a0.this$);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace store {
        static PyObject *t_LockStressTest_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_LockStressTest_instance_(PyTypeObject *type, PyObject *arg);
        static int t_LockStressTest_init_(t_LockStressTest *self, PyObject *args, PyObject *kwds);
        static PyObject *t_LockStressTest_main(PyTypeObject *type, PyObject *arg);

        static PyMethodDef t_LockStressTest__methods_[] = {
          DECLARE_METHOD(t_LockStressTest, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_LockStressTest, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_LockStressTest, main, METH_O | METH_CLASS),
          { NULL, NULL, 0, NULL }
        };

        static PyType_Slot PY_TYPE_SLOTS(LockStressTest)[] = {
          { Py_tp_methods, t_LockStressTest__methods_ },
          { Py_tp_init, (void *) t_LockStressTest_init_ },
          { 0, NULL }
        };

        static PyType_Def *PY_TYPE_BASES(LockStressTest)[] = {
          &PY_TYPE_DEF(::java::lang::Object),
          NULL
        };

        DEFINE_TYPE(LockStressTest, t_LockStressTest, LockStressTest);

        void t_LockStressTest::install(PyObject *module)
        {
          installType(&PY_TYPE(LockStressTest), &PY_TYPE_DEF(LockStressTest), module, "LockStressTest", 0);
        }

        void t_LockStressTest::initialize(PyObject *module)
        {
          PyObject_SetAttrString((PyObject *) PY_TYPE(LockStressTest), "class_", make_descriptor(LockStressTest::initializeClass, 1));
          PyObject_SetAttrString((PyObject *) PY_TYPE(LockStressTest), "wrapfn_", make_descriptor(t_LockStressTest::wrap_jobject));
          PyObject_SetAttrString((PyObject *) PY_TYPE(LockStressTest), "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_LockStressTest_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, LockStressTest::initializeClass, 1)))
            return NULL;
          return t_LockStressTest::wrap_Object(LockStressTest(((t_LockStressTest *) arg)->object.this$));
        }
        static PyObject *t_LockStressTest_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, LockStressTest::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_LockStressTest_init_(t_LockStressTest *self, PyObject *args, PyObject *kwds)
        {
          LockStressTest object((jobject) NULL);

          INT_CALL(object = LockStressTest());
          self->object = object;

          return 0;
        }

        static PyObject *t_LockStressTest_main(PyTypeObject *type, PyObject *arg)
        {
          JArray< ::java::lang::String > a0((jobject) NULL);

          if (!parseArg(arg, "[s", &a0))
          {
            OBJ_CALL(::org::apache::lucene::store::LockStressTest::main(a0));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError(type, "main", arg);
          return NULL;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/suggest/document/CompletionWeight.h"
#include "org/apache/lucene/index/LeafReaderContext.h"
#include "org/apache/lucene/index/Term.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/search/Explanation.h"
#include "org/apache/lucene/search/Scorer.h"
#include "org/apache/lucene/search/BulkScorer.h"
#include "java/util/Set.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/util/automaton/Automaton.h"
#include "org/apache/lucene/search/suggest/document/CompletionQuery.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace suggest {
          namespace document {

            ::java::lang::Class *CompletionWeight::class$ = NULL;
            jmethodID *CompletionWeight::mids$ = NULL;
            bool CompletionWeight::live$ = false;

            jclass CompletionWeight::initializeClass(bool getOnly)
            {
              if (getOnly)
                return (jclass) (live$ ? class$->this$ : NULL);
              if (class$ == NULL)
              {
                jclass cls = (jclass) env->findClass("org/apache/lucene/search/suggest/document/CompletionWeight");

                mids$ = new jmethodID[max_mid];
                mids$[mid_init$_ff95c74ceb8467d1] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/search/suggest/document/CompletionQuery;Lorg/apache/lucene/util/automaton/Automaton;)V");
                mids$[mid_bulkScorer_67bb05f0d672560c] = env->getMethodID(cls, "bulkScorer", "(Lorg/apache/lucene/index/LeafReaderContext;)Lorg/apache/lucene/search/BulkScorer;");
                mids$[mid_explain_4cf8bab0b7954f4a] = env->getMethodID(cls, "explain", "(Lorg/apache/lucene/index/LeafReaderContext;I)Lorg/apache/lucene/search/Explanation;");
                mids$[mid_extractTerms_d5a4a8d4b806f0ba] = env->getMethodID(cls, "extractTerms", "(Ljava/util/Set;)V");
                mids$[mid_getAutomaton_d9f5c446a29ec187] = env->getMethodID(cls, "getAutomaton", "()Lorg/apache/lucene/util/automaton/Automaton;");
                mids$[mid_isCacheable_07cae694a8cf1c6d] = env->getMethodID(cls, "isCacheable", "(Lorg/apache/lucene/index/LeafReaderContext;)Z");
                mids$[mid_scorer_4046a1267922adae] = env->getMethodID(cls, "scorer", "(Lorg/apache/lucene/index/LeafReaderContext;)Lorg/apache/lucene/search/Scorer;");
                mids$[mid_boost_58aec2b64dff50c8] = env->getMethodID(cls, "boost", "()F");
                mids$[mid_setNextMatch_0be76783572fca9c] = env->getMethodID(cls, "setNextMatch", "(Lorg/apache/lucene/util/IntsRef;)V");
                mids$[mid_context_ba44900ab7d793b9] = env->getMethodID(cls, "context", "()Ljava/lang/CharSequence;");

                class$ = new ::java::lang::Class(cls);
                live$ = true;
              }
              return (jclass) class$->this$;
            }

            CompletionWeight::CompletionWeight(const ::org::apache::lucene::search::suggest::document::CompletionQuery & a0, const ::org::apache::lucene::util::automaton::Automaton & a1) : ::org::apache::lucene::search::Weight(env->newObject(initializeClass, &mids$, mid_init$_ff95c74ceb8467d1, a0.this$, a1.this$)) {}

            ::org::apache::lucene::search::BulkScorer CompletionWeight::bulkScorer(const ::org::apache::lucene::index::LeafReaderContext & a0) const
            {
              return ::org::apache::lucene::search::BulkScorer(env->callObjectMethod(this$, mids$[mid_bulkScorer_67bb05f0d672560c], a0.this$));
            }

            ::org::apache::lucene::search::Explanation CompletionWeight::explain(const ::org::apache::lucene::index::LeafReaderContext & a0, jint a1) const
            {
              return ::org::apache::lucene::search::Explanation(env->callObjectMethod(this$, mids$[mid_explain_4cf8bab0b7954f4a], a0.this$, a1));
            }

            void CompletionWeight::extractTerms(const ::java::util::Set & a0) const
            {
              env->callVoidMethod(this$, mids$[mid_extractTerms_d5a4a8d4b806f0ba], a0.this$);
            }

            ::org::apache::lucene::util::automaton::Automaton CompletionWeight::getAutomaton() const
            {
              return ::org::apache::lucene::util::automaton::Automaton(env->callObjectMethod(this$, mids$[mid_getAutomaton_d9f5c446a29ec187]));
            }

            jboolean CompletionWeight::isCacheable(const ::org::apache::lucene::index::LeafReaderContext & a0) const
            {
              return env->callBooleanMethod(this$, mids$[mid_isCacheable_07cae694a8cf1c6d], a0.this$);
            }

            ::org::apache::lucene::search::Scorer CompletionWeight::scorer(const ::org::apache::lucene::index::LeafReaderContext & a0) const
            {
              return ::org::apache::lucene::search::Scorer(env->callObjectMethod(this$, mids$[mid_scorer_4046a1267922adae], a0.this$));
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace suggest {
          namespace document {
            static PyObject *t_CompletionWeight_cast_(PyTypeObject *type, PyObject *arg);
            static PyObject *t_CompletionWeight_instance_(PyTypeObject *type, PyObject *arg);
            static int t_CompletionWeight_init_(t_CompletionWeight *self, PyObject *args, PyObject *kwds);
            static PyObject *t_CompletionWeight_bulkScorer(t_CompletionWeight *self, PyObject *args);
            static PyObject *t_CompletionWeight_explain(t_CompletionWeight *self, PyObject *args);
            static PyObject *t_CompletionWeight_extractTerms(t_CompletionWeight *self, PyObject *args);
            static PyObject *t_CompletionWeight_getAutomaton(t_CompletionWeight *self);
            static PyObject *t_CompletionWeight_isCacheable(t_CompletionWeight *self, PyObject *args);
            static PyObject *t_CompletionWeight_scorer(t_CompletionWeight *self, PyObject *args);
            static PyObject *t_CompletionWeight_get__automaton(t_CompletionWeight *self, void *data);
            static PyGetSetDef t_CompletionWeight__fields_[] = {
              DECLARE_GET_FIELD(t_CompletionWeight, automaton),
              { NULL, NULL, NULL, NULL, NULL }
            };

            static PyMethodDef t_CompletionWeight__methods_[] = {
              DECLARE_METHOD(t_CompletionWeight, cast_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_CompletionWeight, instance_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_CompletionWeight, bulkScorer, METH_VARARGS),
              DECLARE_METHOD(t_CompletionWeight, explain, METH_VARARGS),
              DECLARE_METHOD(t_CompletionWeight, extractTerms, METH_VARARGS),
              DECLARE_METHOD(t_CompletionWeight, getAutomaton, METH_NOARGS),
              DECLARE_METHOD(t_CompletionWeight, isCacheable, METH_VARARGS),
              DECLARE_METHOD(t_CompletionWeight, scorer, METH_VARARGS),
              { NULL, NULL, 0, NULL }
            };

            static PyType_Slot PY_TYPE_SLOTS(CompletionWeight)[] = {
              { Py_tp_methods, t_CompletionWeight__methods_ },
              { Py_tp_init, (void *) t_CompletionWeight_init_ },
              { Py_tp_getset, t_CompletionWeight__fields_ },
              { 0, NULL }
            };

            static PyType_Def *PY_TYPE_BASES(CompletionWeight)[] = {
              &PY_TYPE_DEF(::org::apache::lucene::search::Weight),
              NULL
            };

            DEFINE_TYPE(CompletionWeight, t_CompletionWeight, CompletionWeight);

            void t_CompletionWeight::install(PyObject *module)
            {
              installType(&PY_TYPE(CompletionWeight), &PY_TYPE_DEF(CompletionWeight), module, "CompletionWeight", 0);
            }

            void t_CompletionWeight::initialize(PyObject *module)
            {
              PyObject_SetAttrString((PyObject *) PY_TYPE(CompletionWeight), "class_", make_descriptor(CompletionWeight::initializeClass, 1));
              PyObject_SetAttrString((PyObject *) PY_TYPE(CompletionWeight), "wrapfn_", make_descriptor(t_CompletionWeight::wrap_jobject));
              PyObject_SetAttrString((PyObject *) PY_TYPE(CompletionWeight), "boxfn_", make_descriptor(boxObject));
            }

            static PyObject *t_CompletionWeight_cast_(PyTypeObject *type, PyObject *arg)
            {
              if (!(arg = castCheck(arg, CompletionWeight::initializeClass, 1)))
                return NULL;
              return t_CompletionWeight::wrap_Object(CompletionWeight(((t_CompletionWeight *) arg)->object.this$));
            }
            static PyObject *t_CompletionWeight_instance_(PyTypeObject *type, PyObject *arg)
            {
              if (!castCheck(arg, CompletionWeight::initializeClass, 0))
                Py_RETURN_FALSE;
              Py_RETURN_TRUE;
            }

            static int t_CompletionWeight_init_(t_CompletionWeight *self, PyObject *args, PyObject *kwds)
            {
              ::org::apache::lucene::search::suggest::document::CompletionQuery a0((jobject) NULL);
              ::org::apache::lucene::util::automaton::Automaton a1((jobject) NULL);
              CompletionWeight object((jobject) NULL);

              if (!parseArgs(args, "kk", ::org::apache::lucene::search::suggest::document::CompletionQuery::initializeClass, ::org::apache::lucene::util::automaton::Automaton::initializeClass, &a0, &a1))
              {
                INT_CALL(object = CompletionWeight(a0, a1));
                self->object = object;
              }
              else
              {
                PyErr_SetArgsError((PyObject *) self, "__init__", args);
                return -1;
              }

              return 0;
            }

            static PyObject *t_CompletionWeight_bulkScorer(t_CompletionWeight *self, PyObject *args)
            {
              ::org::apache::lucene::index::LeafReaderContext a0((jobject) NULL);
              ::org::apache::lucene::search::BulkScorer result((jobject) NULL);

              if (!parseArgs(args, "k", ::org::apache::lucene::index::LeafReaderContext::initializeClass, &a0))
              {
                OBJ_CALL(result = self->object.bulkScorer(a0));
                return ::org::apache::lucene::search::t_BulkScorer::wrap_Object(result);
              }

              return callSuper(PY_TYPE(CompletionWeight), (PyObject *) self, "bulkScorer", args, 2);
            }

            static PyObject *t_CompletionWeight_explain(t_CompletionWeight *self, PyObject *args)
            {
              ::org::apache::lucene::index::LeafReaderContext a0((jobject) NULL);
              jint a1;
              ::org::apache::lucene::search::Explanation result((jobject) NULL);

              if (!parseArgs(args, "kI", ::org::apache::lucene::index::LeafReaderContext::initializeClass, &a0, &a1))
              {
                OBJ_CALL(result = self->object.explain(a0, a1));
                return ::org::apache::lucene::search::t_Explanation::wrap_Object(result);
              }

              return callSuper(PY_TYPE(CompletionWeight), (PyObject *) self, "explain", args, 2);
            }

            static PyObject *t_CompletionWeight_extractTerms(t_CompletionWeight *self, PyObject *args)
            {
              ::java::util::Set a0((jobject) NULL);
              PyTypeObject **p0;

              if (!parseArgs(args, "K", ::java::util::Set::initializeClass, &a0, &p0, ::java::util::t_Set::parameters_))
              {
                OBJ_CALL(self->object.extractTerms(a0));
                Py_RETURN_NONE;
              }

              return callSuper(PY_TYPE(CompletionWeight), (PyObject *) self, "extractTerms", args, 2);
            }

            static PyObject *t_CompletionWeight_getAutomaton(t_CompletionWeight *self)
            {
              ::org::apache::lucene::util::automaton::Automaton result((jobject) NULL);
              OBJ_CALL(result = self->object.getAutomaton());
              return ::org::apache::lucene::util::automaton::t_Automaton::wrap_Object(result);
            }

            static PyObject *t_CompletionWeight_isCacheable(t_CompletionWeight *self, PyObject *args)
            {
              ::org::apache::lucene::index::LeafReaderContext a0((jobject) NULL);
              jboolean result;

              if (!parseArgs(args, "k", ::org::apache::lucene::index::LeafReaderContext::initializeClass, &a0))
              {
                OBJ_CALL(result = self->object.isCacheable(a0));
                Py_RETURN_BOOL(result);
              }

              return callSuper(PY_TYPE(CompletionWeight), (PyObject *) self, "isCacheable", args, 2);
            }

            static PyObject *t_CompletionWeight_scorer(t_CompletionWeight *self, PyObject *args)
            {
              ::org::apache::lucene::index::LeafReaderContext a0((jobject) NULL);
              ::org::apache::lucene::search::Scorer result((jobject) NULL);

              if (!parseArgs(args, "k", ::org::apache::lucene::index::LeafReaderContext::initializeClass, &a0))
              {
                OBJ_CALL(result = self->object.scorer(a0));
                return ::org::apache::lucene::search::t_Scorer::wrap_Object(result);
              }

              return callSuper(PY_TYPE(CompletionWeight), (PyObject *) self, "scorer", args, 2);
            }

            static PyObject *t_CompletionWeight_get__automaton(t_CompletionWeight *self, void *data)
            {
              ::org::apache::lucene::util::automaton::Automaton value((jobject) NULL);
              OBJ_CALL(value = self->object.getAutomaton());
              return ::org::apache::lucene::util::automaton::t_Automaton::wrap_Object(value);
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/suggest/document/TopSuggestDocs.h"
#include "org/apache/lucene/search/suggest/document/TopSuggestDocs.h"
#include "org/apache/lucene/search/suggest/document/TopSuggestDocs$SuggestScoreDoc.h"
#include "org/apache/lucene/search/TotalHits.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace suggest {
          namespace document {

            ::java::lang::Class *TopSuggestDocs::class$ = NULL;
            jmethodID *TopSuggestDocs::mids$ = NULL;
            bool TopSuggestDocs::live$ = false;
            TopSuggestDocs *TopSuggestDocs::EMPTY = NULL;

            jclass TopSuggestDocs::initializeClass(bool getOnly)
            {
              if (getOnly)
                return (jclass) (live$ ? class$->this$ : NULL);
              if (class$ == NULL)
              {
                jclass cls = (jclass) env->findClass("org/apache/lucene/search/suggest/document/TopSuggestDocs");

                mids$ = new jmethodID[max_mid];
                mids$[mid_init$_4fae4a868e762419] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/search/TotalHits;[Lorg/apache/lucene/search/suggest/document/TopSuggestDocs$SuggestScoreDoc;)V");
                mids$[mid_merge_384cf7e1a941d57e] = env->getStaticMethodID(cls, "merge", "(I[Lorg/apache/lucene/search/suggest/document/TopSuggestDocs;)Lorg/apache/lucene/search/suggest/document/TopSuggestDocs;");
                mids$[mid_scoreLookupDocs_669d4cb092f36908] = env->getMethodID(cls, "scoreLookupDocs", "()[Lorg/apache/lucene/search/suggest/document/TopSuggestDocs$SuggestScoreDoc;");

                class$ = new ::java::lang::Class(cls);
                cls = (jclass) class$->this$;

                EMPTY = new TopSuggestDocs(env->getStaticObjectField(cls, "EMPTY", "Lorg/apache/lucene/search/suggest/document/TopSuggestDocs;"));
                live$ = true;
              }
              return (jclass) class$->this$;
            }

            TopSuggestDocs::TopSuggestDocs(const ::org::apache::lucene::search::TotalHits & a0, const JArray< ::org::apache::lucene::search::suggest::document::TopSuggestDocs$SuggestScoreDoc > & a1) : ::org::apache::lucene::search::TopDocs(env->newObject(initializeClass, &mids$, mid_init$_4fae4a868e762419, a0.this$, a1.this$)) {}

            TopSuggestDocs TopSuggestDocs::merge(jint a0, const JArray< TopSuggestDocs > & a1)
            {
              jclass cls = env->getClass(initializeClass);
              return TopSuggestDocs(env->callStaticObjectMethod(cls, mids$[mid_merge_384cf7e1a941d57e], a0, a1.this$));
            }

            JArray< ::org::apache::lucene::search::suggest::document::TopSuggestDocs$SuggestScoreDoc > TopSuggestDocs::scoreLookupDocs() const
            {
              return JArray< ::org::apache::lucene::search::suggest::document::TopSuggestDocs$SuggestScoreDoc >(env->callObjectMethod(this$, mids$[mid_scoreLookupDocs_669d4cb092f36908]));
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace suggest {
          namespace document {
            static PyObject *t_TopSuggestDocs_cast_(PyTypeObject *type, PyObject *arg);
            static PyObject *t_TopSuggestDocs_instance_(PyTypeObject *type, PyObject *arg);
            static int t_TopSuggestDocs_init_(t_TopSuggestDocs *self, PyObject *args, PyObject *kwds);
            static PyObject *t_TopSuggestDocs_merge(PyTypeObject *type, PyObject *args);
            static PyObject *t_TopSuggestDocs_scoreLookupDocs(t_TopSuggestDocs *self);

            static PyMethodDef t_TopSuggestDocs__methods_[] = {
              DECLARE_METHOD(t_TopSuggestDocs, cast_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_TopSuggestDocs, instance_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_TopSuggestDocs, merge, METH_VARARGS | METH_CLASS),
              DECLARE_METHOD(t_TopSuggestDocs, scoreLookupDocs, METH_NOARGS),
              { NULL, NULL, 0, NULL }
            };

            static PyType_Slot PY_TYPE_SLOTS(TopSuggestDocs)[] = {
              { Py_tp_methods, t_TopSuggestDocs__methods_ },
              { Py_tp_init, (void *) t_TopSuggestDocs_init_ },
              { 0, NULL }
            };

            static PyType_Def *PY_TYPE_BASES(TopSuggestDocs)[] = {
              &PY_TYPE_DEF(::org::apache::lucene::search::TopDocs),
              NULL
            };

            DEFINE_TYPE(TopSuggestDocs, t_TopSuggestDocs, TopSuggestDocs);

            void t_TopSuggestDocs::install(PyObject *module)
            {
              installType(&PY_TYPE(TopSuggestDocs), &PY_TYPE_DEF(TopSuggestDocs), module, "TopSuggestDocs", 0);
              PyObject_SetAttrString((PyObject *) PY_TYPE(TopSuggestDocs), "SuggestScoreDoc", make_descriptor(&PY_TYPE_DEF(TopSuggestDocs$SuggestScoreDoc)));
            }

            void t_TopSuggestDocs::initialize(PyObject *module)
            {
              PyObject_SetAttrString((PyObject *) PY_TYPE(TopSuggestDocs), "class_", make_descriptor(TopSuggestDocs::initializeClass, 1));
              PyObject_SetAttrString((PyObject *) PY_TYPE(TopSuggestDocs), "wrapfn_", make_descriptor(t_TopSuggestDocs::wrap_jobject));
              PyObject_SetAttrString((PyObject *) PY_TYPE(TopSuggestDocs), "boxfn_", make_descriptor(boxObject));
              env->getClass(TopSuggestDocs::initializeClass);
              PyObject_SetAttrString((PyObject *) PY_TYPE(TopSuggestDocs), "EMPTY", make_descriptor(t_TopSuggestDocs::wrap_Object(*TopSuggestDocs::EMPTY)));
            }

            static PyObject *t_TopSuggestDocs_cast_(PyTypeObject *type, PyObject *arg)
            {
              if (!(arg = castCheck(arg, TopSuggestDocs::initializeClass, 1)))
                return NULL;
              return t_TopSuggestDocs::wrap_Object(TopSuggestDocs(((t_TopSuggestDocs *) arg)->object.this$));
            }
            static PyObject *t_TopSuggestDocs_instance_(PyTypeObject *type, PyObject *arg)
            {
              if (!castCheck(arg, TopSuggestDocs::initializeClass, 0))
                Py_RETURN_FALSE;
              Py_RETURN_TRUE;
            }

            static int t_TopSuggestDocs_init_(t_TopSuggestDocs *self, PyObject *args, PyObject *kwds)
            {
              ::org::apache::lucene::search::TotalHits a0((jobject) NULL);
              JArray< ::org::apache::lucene::search::suggest::document::TopSuggestDocs$SuggestScoreDoc > a1((jobject) NULL);
              TopSuggestDocs object((jobject) NULL);

              if (!parseArgs(args, "k[k", ::org::apache::lucene::search::TotalHits::initializeClass, ::org::apache::lucene::search::suggest::document::TopSuggestDocs$SuggestScoreDoc::initializeClass, &a0, &a1))
              {
                INT_CALL(object = TopSuggestDocs(a0, a1));
                self->object = object;
              }
              else
              {
                PyErr_SetArgsError((PyObject *) self, "__init__", args);
                return -1;
              }

              return 0;
            }

            static PyObject *t_TopSuggestDocs_merge(PyTypeObject *type, PyObject *args)
            {
              jint a0;
              JArray< TopSuggestDocs > a1((jobject) NULL);
              TopSuggestDocs result((jobject) NULL);

              if (!parseArgs(args, "I[k", TopSuggestDocs::initializeClass, &a0, &a1))
              {
                OBJ_CALL(result = ::org::apache::lucene::search::suggest::document::TopSuggestDocs::merge(a0, a1));
                return t_TopSuggestDocs::wrap_Object(result);
              }

              return callSuper(type, "merge", args, 2);
            }

            static PyObject *t_TopSuggestDocs_scoreLookupDocs(t_TopSuggestDocs *self)
            {
              JArray< ::org::apache::lucene::search::suggest::document::TopSuggestDocs$SuggestScoreDoc > result((jobject) NULL);
              OBJ_CALL(result = self->object.scoreLookupDocs());
              return JArray<jobject>(result.this$).wrap(::org::apache::lucene::search::suggest::document::t_TopSuggestDocs$SuggestScoreDoc::wrap_jobject);
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/shingle/FixedShingleFilterFactory.h"
#include "java/util/Map.h"
#include "java/lang/String.h"
#include "org/apache/lucene/analysis/TokenStream.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace shingle {

          ::java::lang::Class *FixedShingleFilterFactory::class$ = NULL;
          jmethodID *FixedShingleFilterFactory::mids$ = NULL;
          bool FixedShingleFilterFactory::live$ = false;
          ::java::lang::String *FixedShingleFilterFactory::NAME = NULL;

          jclass FixedShingleFilterFactory::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/shingle/FixedShingleFilterFactory");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_408bd889ee3beae5] = env->getMethodID(cls, "<init>", "(Ljava/util/Map;)V");
              mids$[mid_create_6de1e28d9d10cd9e] = env->getMethodID(cls, "create", "(Lorg/apache/lucene/analysis/TokenStream;)Lorg/apache/lucene/analysis/TokenStream;");

              class$ = new ::java::lang::Class(cls);
              cls = (jclass) class$->this$;

              NAME = new ::java::lang::String(env->getStaticObjectField(cls, "NAME", "Ljava/lang/String;"));
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          FixedShingleFilterFactory::FixedShingleFilterFactory(const ::java::util::Map & a0) : ::org::apache::lucene::analysis::util::TokenFilterFactory(env->newObject(initializeClass, &mids$, mid_init$_408bd889ee3beae5, a0.this$)) {}

          ::org::apache::lucene::analysis::TokenStream FixedShingleFilterFactory::create(const ::org::apache::lucene::analysis::TokenStream & a0) const
          {
            return ::org::apache::lucene::analysis::TokenStream(env->callObjectMethod(this$, mids$[mid_create_6de1e28d9d10cd9e], a0.this$));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace shingle {
          static PyObject *t_FixedShingleFilterFactory_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_FixedShingleFilterFactory_instance_(PyTypeObject *type, PyObject *arg);
          static int t_FixedShingleFilterFactory_init_(t_FixedShingleFilterFactory *self, PyObject *args, PyObject *kwds);
          static PyObject *t_FixedShingleFilterFactory_create(t_FixedShingleFilterFactory *self, PyObject *args);

          static PyMethodDef t_FixedShingleFilterFactory__methods_[] = {
            DECLARE_METHOD(t_FixedShingleFilterFactory, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_FixedShingleFilterFactory, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_FixedShingleFilterFactory, create, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          static PyType_Slot PY_TYPE_SLOTS(FixedShingleFilterFactory)[] = {
            { Py_tp_methods, t_FixedShingleFilterFactory__methods_ },
            { Py_tp_init, (void *) t_FixedShingleFilterFactory_init_ },
            { 0, NULL }
          };

          static PyType_Def *PY_TYPE_BASES(FixedShingleFilterFactory)[] = {
            &PY_TYPE_DEF(::org::apache::lucene::analysis::util::TokenFilterFactory),
            NULL
          };

          DEFINE_TYPE(FixedShingleFilterFactory, t_FixedShingleFilterFactory, FixedShingleFilterFactory);

          void t_FixedShingleFilterFactory::install(PyObject *module)
          {
            installType(&PY_TYPE(FixedShingleFilterFactory), &PY_TYPE_DEF(FixedShingleFilterFactory), module, "FixedShingleFilterFactory", 0);
          }

          void t_FixedShingleFilterFactory::initialize(PyObject *module)
          {
            PyObject_SetAttrString((PyObject *) PY_TYPE(FixedShingleFilterFactory), "class_", make_descriptor(FixedShingleFilterFactory::initializeClass, 1));
            PyObject_SetAttrString((PyObject *) PY_TYPE(FixedShingleFilterFactory), "wrapfn_", make_descriptor(t_FixedShingleFilterFactory::wrap_jobject));
            PyObject_SetAttrString((PyObject *) PY_TYPE(FixedShingleFilterFactory), "boxfn_", make_descriptor(boxObject));
            env->getClass(FixedShingleFilterFactory::initializeClass);
            PyObject_SetAttrString((PyObject *) PY_TYPE(FixedShingleFilterFactory), "NAME", make_descriptor(j2p(*FixedShingleFilterFactory::NAME)));
          }

          static PyObject *t_FixedShingleFilterFactory_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, FixedShingleFilterFactory::initializeClass, 1)))
              return NULL;
            return t_FixedShingleFilterFactory::wrap_Object(FixedShingleFilterFactory(((t_FixedShingleFilterFactory *) arg)->object.this$));
          }
          static PyObject *t_FixedShingleFilterFactory_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, FixedShingleFilterFactory::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_FixedShingleFilterFactory_init_(t_FixedShingleFilterFactory *self, PyObject *args, PyObject *kwds)
          {
            ::java::util::Map a0((jobject) NULL);
            PyTypeObject **p0;
            FixedShingleFilterFactory object((jobject) NULL);

            if (!parseArgs(args, "K", ::java::util::Map::initializeClass, &a0, &p0, ::java::util::t_Map::parameters_))
            {
              INT_CALL(object = FixedShingleFilterFactory(a0));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_FixedShingleFilterFactory_create(t_FixedShingleFilterFactory *self, PyObject *args)
          {
            ::org::apache::lucene::analysis::TokenStream a0((jobject) NULL);
            ::org::apache::lucene::analysis::TokenStream result((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::analysis::TokenStream::initializeClass, &a0))
            {
              OBJ_CALL(result = self->object.create(a0));
              return ::org::apache::lucene::analysis::t_TokenStream::wrap_Object(result);
            }

            return callSuper(PY_TYPE(FixedShingleFilterFactory), (PyObject *) self, "create", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/codecs/FieldsProducer.h"
#include "org/apache/lucene/util/Accountable.h"
#include "java/lang/Class.h"
#include "java/io/Closeable.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/codecs/FieldsProducer.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace codecs {

        ::java::lang::Class *FieldsProducer::class$ = NULL;
        jmethodID *FieldsProducer::mids$ = NULL;
        bool FieldsProducer::live$ = false;

        jclass FieldsProducer::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/codecs/FieldsProducer");

            mids$ = new jmethodID[max_mid];
            mids$[mid_checkIntegrity_f2cc1bce94666404] = env->getMethodID(cls, "checkIntegrity", "()V");
            mids$[mid_close_f2cc1bce94666404] = env->getMethodID(cls, "close", "()V");
            mids$[mid_getMergeInstance_573c1a94549f7937] = env->getMethodID(cls, "getMergeInstance", "()Lorg/apache/lucene/codecs/FieldsProducer;");

            class$ = new ::java::lang::Class(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        void FieldsProducer::checkIntegrity() const
        {
          env->callVoidMethod(this$, mids$[mid_checkIntegrity_f2cc1bce94666404]);
        }

        void FieldsProducer::close() const
        {
          env->callVoidMethod(this$, mids$[mid_close_f2cc1bce94666404]);
        }

        FieldsProducer FieldsProducer::getMergeInstance() const
        {
          return FieldsProducer(env->callObjectMethod(this$, mids$[mid_getMergeInstance_573c1a94549f7937]));
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace codecs {
        static PyObject *t_FieldsProducer_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_FieldsProducer_instance_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_FieldsProducer_checkIntegrity(t_FieldsProducer *self);
        static PyObject *t_FieldsProducer_close(t_FieldsProducer *self);
        static PyObject *t_FieldsProducer_getMergeInstance(t_FieldsProducer *self);
        static PyObject *t_FieldsProducer_get__mergeInstance(t_FieldsProducer *self, void *data);
        static PyGetSetDef t_FieldsProducer__fields_[] = {
          DECLARE_GET_FIELD(t_FieldsProducer, mergeInstance),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_FieldsProducer__methods_[] = {
          DECLARE_METHOD(t_FieldsProducer, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_FieldsProducer, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_FieldsProducer, checkIntegrity, METH_NOARGS),
          DECLARE_METHOD(t_FieldsProducer, close, METH_NOARGS),
          DECLARE_METHOD(t_FieldsProducer, getMergeInstance, METH_NOARGS),
          { NULL, NULL, 0, NULL }
        };

        static PyType_Slot PY_TYPE_SLOTS(FieldsProducer)[] = {
          { Py_tp_methods, t_FieldsProducer__methods_ },
          { Py_tp_init, (void *) abstract_init },
          { Py_tp_getset, t_FieldsProducer__fields_ },
          { 0, NULL }
        };

        static PyType_Def *PY_TYPE_BASES(FieldsProducer)[] = {
          &PY_TYPE_DEF(::org::apache::lucene::index::Fields),
          NULL
        };

        DEFINE_TYPE(FieldsProducer, t_FieldsProducer, FieldsProducer);

        void t_FieldsProducer::install(PyObject *module)
        {
          installType(&PY_TYPE(FieldsProducer), &PY_TYPE_DEF(FieldsProducer), module, "FieldsProducer", 0);
        }

        void t_FieldsProducer::initialize(PyObject *module)
        {
          PyObject_SetAttrString((PyObject *) PY_TYPE(FieldsProducer), "class_", make_descriptor(FieldsProducer::initializeClass, 1));
          PyObject_SetAttrString((PyObject *) PY_TYPE(FieldsProducer), "wrapfn_", make_descriptor(t_FieldsProducer::wrap_jobject));
          PyObject_SetAttrString((PyObject *) PY_TYPE(FieldsProducer), "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_FieldsProducer_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, FieldsProducer::initializeClass, 1)))
            return NULL;
          return t_FieldsProducer::wrap_Object(FieldsProducer(((t_FieldsProducer *) arg)->object.this$));
        }
        static PyObject *t_FieldsProducer_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, FieldsProducer::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static PyObject *t_FieldsProducer_checkIntegrity(t_FieldsProducer *self)
        {
          OBJ_CALL(self->object.checkIntegrity());
          Py_RETURN_NONE;
        }

        static PyObject *t_FieldsProducer_close(t_FieldsProducer *self)
        {
          OBJ_CALL(self->object.close());
          Py_RETURN_NONE;
        }

        static PyObject *t_FieldsProducer_getMergeInstance(t_FieldsProducer *self)
        {
          FieldsProducer result((jobject) NULL);
          OBJ_CALL(result = self->object.getMergeInstance());
          return t_FieldsProducer::wrap_Object(result);
        }

        static PyObject *t_FieldsProducer_get__mergeInstance(t_FieldsProducer *self, void *data)
        {
          FieldsProducer value((jobject) NULL);
          OBJ_CALL(value = self->object.getMergeInstance());
          return t_FieldsProducer::wrap_Object(value);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/hi/HindiStemFilter.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/analysis/TokenStream.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace hi {

          ::java::lang::Class *HindiStemFilter::class$ = NULL;
          jmethodID *HindiStemFilter::mids$ = NULL;
          bool HindiStemFilter::live$ = false;

          jclass HindiStemFilter::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/hi/HindiStemFilter");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_c26756868a754f4e] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/analysis/TokenStream;)V");
              mids$[mid_incrementToken_8454bd5aa23fd11e] = env->getMethodID(cls, "incrementToken", "()Z");

              class$ = new ::java::lang::Class(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          HindiStemFilter::HindiStemFilter(const ::org::apache::lucene::analysis::TokenStream & a0) : ::org::apache::lucene::analysis::TokenFilter(env->newObject(initializeClass, &mids$, mid_init$_c26756868a754f4e, a0.this$)) {}

          jboolean HindiStemFilter::incrementToken() const
          {
            return env->callBooleanMethod(this$, mids$[mid_incrementToken_8454bd5aa23fd11e]);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace hi {
          static PyObject *t_HindiStemFilter_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_HindiStemFilter_instance_(PyTypeObject *type, PyObject *arg);
          static int t_HindiStemFilter_init_(t_HindiStemFilter *self, PyObject *args, PyObject *kwds);
          static PyObject *t_HindiStemFilter_incrementToken(t_HindiStemFilter *self, PyObject *args);

          static PyMethodDef t_HindiStemFilter__methods_[] = {
            DECLARE_METHOD(t_HindiStemFilter, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_HindiStemFilter, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_HindiStemFilter, incrementToken, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          static PyType_Slot PY_TYPE_SLOTS(HindiStemFilter)[] = {
            { Py_tp_methods, t_HindiStemFilter__methods_ },
            { Py_tp_init, (void *) t_HindiStemFilter_init_ },
            { 0, NULL }
          };

          static PyType_Def *PY_TYPE_BASES(HindiStemFilter)[] = {
            &PY_TYPE_DEF(::org::apache::lucene::analysis::TokenFilter),
            NULL
          };

          DEFINE_TYPE(HindiStemFilter, t_HindiStemFilter, HindiStemFilter);

          void t_HindiStemFilter::install(PyObject *module)
          {
            installType(&PY_TYPE(HindiStemFilter), &PY_TYPE_DEF(HindiStemFilter), module, "HindiStemFilter", 0);
          }

          void t_HindiStemFilter::initialize(PyObject *module)
          {
            PyObject_SetAttrString((PyObject *) PY_TYPE(HindiStemFilter), "class_", make_descriptor(HindiStemFilter::initializeClass, 1));
            PyObject_SetAttrString((PyObject *) PY_TYPE(HindiStemFilter), "wrapfn_", make_descriptor(t_HindiStemFilter::wrap_jobject));
            PyObject_SetAttrString((PyObject *) PY_TYPE(HindiStemFilter), "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_HindiStemFilter_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, HindiStemFilter::initializeClass, 1)))
              return NULL;
            return t_HindiStemFilter::wrap_Object(HindiStemFilter(((t_HindiStemFilter *) arg)->object.this$));
          }
          static PyObject *t_HindiStemFilter_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, HindiStemFilter::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_HindiStemFilter_init_(t_HindiStemFilter *self, PyObject *args, PyObject *kwds)
          {
            ::org::apache::lucene::analysis::TokenStream a0((jobject) NULL);
            HindiStemFilter object((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::analysis::TokenStream::initializeClass, &a0))
            {
              INT_CALL(object = HindiStemFilter(a0));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_HindiStemFilter_incrementToken(t_HindiStemFilter *self, PyObject *args)
          {
            jboolean result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.incrementToken());
              Py_RETURN_BOOL(result);
            }

            return callSuper(PY_TYPE(HindiStemFilter), (PyObject *) self, "incrementToken", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/util/fst/Outputs.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/store/DataOutput.h"
#include "java/lang/String.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/store/DataInput.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        namespace fst {

          ::java::lang::Class *Outputs::class$ = NULL;
          jmethodID *Outputs::mids$ = NULL;
          bool Outputs::live$ = false;

          jclass Outputs::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/util/fst/Outputs");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_f2cc1bce94666404] = env->getMethodID(cls, "<init>", "()V");
              mids$[mid_add_128a89bbc17a8b69] = env->getMethodID(cls, "add", "(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;");
              mids$[mid_common_128a89bbc17a8b69] = env->getMethodID(cls, "common", "(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;");
              mids$[mid_getNoOutput_d6bcd06f3102c4d9] = env->getMethodID(cls, "getNoOutput", "()Ljava/lang/Object;");
              mids$[mid_merge_128a89bbc17a8b69] = env->getMethodID(cls, "merge", "(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;");
              mids$[mid_outputToString_8f886c83a83356f0] = env->getMethodID(cls, "outputToString", "(Ljava/lang/Object;)Ljava/lang/String;");
              mids$[mid_ramBytesUsed_c602cc71de3e942a] = env->getMethodID(cls, "ramBytesUsed", "(Ljava/lang/Object;)J");
              mids$[mid_read_bd77d49f2c2d164c] = env->getMethodID(cls, "read", "(Lorg/apache/lucene/store/DataInput;)Ljava/lang/Object;");
              mids$[mid_readFinalOutput_bd77d49f2c2d164c] = env->getMethodID(cls, "readFinalOutput", "(Lorg/apache/lucene/store/DataInput;)Ljava/lang/Object;");
              mids$[mid_skipFinalOutput_be8da68faa81682c] = env->getMethodID(cls, "skipFinalOutput", "(Lorg/apache/lucene/store/DataInput;)V");
              mids$[mid_skipOutput_be8da68faa81682c] = env->getMethodID(cls, "skipOutput", "(Lorg/apache/lucene/store/DataInput;)V");
              mids$[mid_subtract_128a89bbc17a8b69] = env->getMethodID(cls, "subtract", "(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;");
              mids$[mid_write_9939db8d7cac4f68] = env->getMethodID(cls, "write", "(Ljava/lang/Object;Lorg/apache/lucene/store/DataOutput;)V");
              mids$[mid_writeFinalOutput_9939db8d7cac4f68] = env->getMethodID(cls, "writeFinalOutput", "(Ljava/lang/Object;Lorg/apache/lucene/store/DataOutput;)V");

              class$ = new ::java::lang::Class(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          Outputs::Outputs() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_f2cc1bce94666404)) {}

          ::java::lang::Object Outputs::add(const ::java::lang::Object & a0, const ::java::lang::Object & a1) const
          {
            return ::java::lang::Object(env->callObjectMethod(this$, mids$[mid_add_128a89bbc17a8b69], a0.this$, a1.this$));
          }

          ::java::lang::Object Outputs::common(const ::java::lang::Object & a0, const ::java::lang::Object & a1) const
          {
            return ::java::lang::Object(env->callObjectMethod(this$, mids$[mid_common_128a89bbc17a8b69], a0.this$, a1.this$));
          }

          ::java::lang::Object Outputs::getNoOutput() const
          {
            return ::java::lang::Object(env->callObjectMethod(this$, mids$[mid_getNoOutput_d6bcd06f3102c4d9]));
          }

          ::java::lang::Object Outputs::merge(const ::java::lang::Object & a0, const ::java::lang::Object & a1) const
          {
            return ::java::lang::Object(env->callObjectMethod(this$, mids$[mid_merge_128a89bbc17a8b69], a0.this$, a1.this$));
          }

          ::java::lang::String Outputs::outputToString(const ::java::lang::Object & a0) const
          {
            return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_outputToString_8f886c83a83356f0], a0.this$));
          }

          jlong Outputs::ramBytesUsed(const ::java::lang::Object & a0) const
          {
            return env->callLongMethod(this$, mids$[mid_ramBytesUsed_c602cc71de3e942a], a0.this$);
          }

          ::java::lang::Object Outputs::read(const ::org::apache::lucene::store::DataInput & a0) const
          {
            return ::java::lang::Object(env->callObjectMethod(this$, mids$[mid_read_bd77d49f2c2d164c], a0.this$));
          }

          ::java::lang::Object Outputs::readFinalOutput(const ::org::apache::lucene::store::DataInput & a0) const
          {
            return ::java::lang::Object(env->callObjectMethod(this$, mids$[mid_readFinalOutput_bd77d49f2c2d164c], a0.this$));
          }

          void Outputs::skipFinalOutput(const ::org::apache::lucene::store::DataInput & a0) const
          {
            env->callVoidMethod(this$, mids$[mid_skipFinalOutput_be8da68faa81682c], a0.this$);
          }

          void Outputs::skipOutput(const ::org::apache::lucene::store::DataInput & a0) const
          {
            env->callVoidMethod(this$, mids$[mid_skipOutput_be8da68faa81682c], a0.this$);
          }

          ::java::lang::Object Outputs::subtract(const ::java::lang::Object & a0, const ::java::lang::Object & a1) const
          {
            return ::java::lang::Object(env->callObjectMethod(this$, mids$[mid_subtract_128a89bbc17a8b69], a0.this$, a1.this$));
          }

          void Outputs::write(const ::java::lang::Object & a0, const ::org::apache::lucene::store::DataOutput & a1) const
          {
            env->callVoidMethod(this$, mids$[mid_write_9939db8d7cac4f68], a0.this$, a1.this$);
          }

          void Outputs::writeFinalOutput(const ::java::lang::Object & a0, const ::org::apache::lucene::store::DataOutput & a1) const
          {
            env->callVoidMethod(this$, mids$[mid_writeFinalOutput_9939db8d7cac4f68], a0.this$, a1.this$);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        namespace fst {
          static PyObject *t_Outputs_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_Outputs_instance_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_Outputs_of_(t_Outputs *self, PyObject *args);
          static int t_Outputs_init_(t_Outputs *self, PyObject *args, PyObject *kwds);
          static PyObject *t_Outputs_add(t_Outputs *self, PyObject *args);
          static PyObject *t_Outputs_common(t_Outputs *self, PyObject *args);
          static PyObject *t_Outputs_getNoOutput(t_Outputs *self);
          static PyObject *t_Outputs_merge(t_Outputs *self, PyObject *args);
          static PyObject *t_Outputs_outputToString(t_Outputs *self, PyObject *arg);
          static PyObject *t_Outputs_ramBytesUsed(t_Outputs *self, PyObject *arg);
          static PyObject *t_Outputs_read(t_Outputs *self, PyObject *arg);
          static PyObject *t_Outputs_readFinalOutput(t_Outputs *self, PyObject *arg);
          static PyObject *t_Outputs_skipFinalOutput(t_Outputs *self, PyObject *arg);
          static PyObject *t_Outputs_skipOutput(t_Outputs *self, PyObject *arg);
          static PyObject *t_Outputs_subtract(t_Outputs *self, PyObject *args);
          static PyObject *t_Outputs_write(t_Outputs *self, PyObject *args);
          static PyObject *t_Outputs_writeFinalOutput(t_Outputs *self, PyObject *args);
          static PyObject *t_Outputs_get__noOutput(t_Outputs *self, void *data);
          static PyObject *t_Outputs_get__parameters_(t_Outputs *self, void *data);
          static PyGetSetDef t_Outputs__fields_[] = {
            DECLARE_GET_FIELD(t_Outputs, noOutput),
            DECLARE_GET_FIELD(t_Outputs, parameters_),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_Outputs__methods_[] = {
            DECLARE_METHOD(t_Outputs, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_Outputs, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_Outputs, of_, METH_VARARGS),
            DECLARE_METHOD(t_Outputs, add, METH_VARARGS),
            DECLARE_METHOD(t_Outputs, common, METH_VARARGS),
            DECLARE_METHOD(t_Outputs, getNoOutput, METH_NOARGS),
            DECLARE_METHOD(t_Outputs, merge, METH_VARARGS),
            DECLARE_METHOD(t_Outputs, outputToString, METH_O),
            DECLARE_METHOD(t_Outputs, ramBytesUsed, METH_O),
            DECLARE_METHOD(t_Outputs, read, METH_O),
            DECLARE_METHOD(t_Outputs, readFinalOutput, METH_O),
            DECLARE_METHOD(t_Outputs, skipFinalOutput, METH_O),
            DECLARE_METHOD(t_Outputs, skipOutput, METH_O),
            DECLARE_METHOD(t_Outputs, subtract, METH_VARARGS),
            DECLARE_METHOD(t_Outputs, write, METH_VARARGS),
            DECLARE_METHOD(t_Outputs, writeFinalOutput, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          static PyType_Slot PY_TYPE_SLOTS(Outputs)[] = {
            { Py_tp_methods, t_Outputs__methods_ },
            { Py_tp_init, (void *) t_Outputs_init_ },
            { Py_tp_getset, t_Outputs__fields_ },
            { 0, NULL }
          };

          static PyType_Def *PY_TYPE_BASES(Outputs)[] = {
            &PY_TYPE_DEF(::java::lang::Object),
            NULL
          };

          DEFINE_TYPE(Outputs, t_Outputs, Outputs);
          PyObject *t_Outputs::wrap_Object(const Outputs& object, PyTypeObject *p0)
          {
            PyObject *obj = t_Outputs::wrap_Object(object);
            if (obj != NULL && obj != Py_None)
            {
              t_Outputs *self = (t_Outputs *) obj;
              self->parameters[0] = p0;
            }
            return obj;
          }

          PyObject *t_Outputs::wrap_jobject(const jobject& object, PyTypeObject *p0)
          {
            PyObject *obj = t_Outputs::wrap_jobject(object);
            if (obj != NULL && obj != Py_None)
            {
              t_Outputs *self = (t_Outputs *) obj;
              self->parameters[0] = p0;
            }
            return obj;
          }

          void t_Outputs::install(PyObject *module)
          {
            installType(&PY_TYPE(Outputs), &PY_TYPE_DEF(Outputs), module, "Outputs", 0);
          }

          void t_Outputs::initialize(PyObject *module)
          {
            PyObject_SetAttrString((PyObject *) PY_TYPE(Outputs), "class_", make_descriptor(Outputs::initializeClass, 1));
            PyObject_SetAttrString((PyObject *) PY_TYPE(Outputs), "wrapfn_", make_descriptor(t_Outputs::wrap_jobject));
            PyObject_SetAttrString((PyObject *) PY_TYPE(Outputs), "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_Outputs_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, Outputs::initializeClass, 1)))
              return NULL;
            return t_Outputs::wrap_Object(Outputs(((t_Outputs *) arg)->object.this$));
          }
          static PyObject *t_Outputs_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, Outputs::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static PyObject *t_Outputs_of_(t_Outputs *self, PyObject *args)
          {
            if (!parseArg(args, "T", 1, &(self->parameters)))
              Py_RETURN_SELF;
            return PyErr_SetArgsError((PyObject *) self, "of_", args);
          }

          static int t_Outputs_init_(t_Outputs *self, PyObject *args, PyObject *kwds)
          {
            Outputs object((jobject) NULL);

            INT_CALL(object = Outputs());
            self->object = object;

            return 0;
          }

          static PyObject *t_Outputs_add(t_Outputs *self, PyObject *args)
          {
            ::java::lang::Object a0((jobject) NULL);
            ::java::lang::Object a1((jobject) NULL);
            ::java::lang::Object result((jobject) NULL);

            if (!parseArgs(args, "OO", self->parameters[0], self->parameters[0], &a0, &a1))
            {
              OBJ_CALL(result = self->object.add(a0, a1));
              return self->parameters[0] != NULL ? wrapType(self->parameters[0], result.this$) : ::java::lang::t_Object::wrap_Object(result);
            }

            PyErr_SetArgsError((PyObject *) self, "add", args);
            return NULL;
          }

          static PyObject *t_Outputs_common(t_Outputs *self, PyObject *args)
          {
            ::java::lang::Object a0((jobject) NULL);
            ::java::lang::Object a1((jobject) NULL);
            ::java::lang::Object result((jobject) NULL);

            if (!parseArgs(args, "OO", self->parameters[0], self->parameters[0], &a0, &a1))
            {
              OBJ_CALL(result = self->object.common(a0, a1));
              return self->parameters[0] != NULL ? wrapType(self->parameters[0], result.this$) : ::java::lang::t_Object::wrap_Object(result);
            }

            PyErr_SetArgsError((PyObject *) self, "common", args);
            return NULL;
          }

          static PyObject *t_Outputs_getNoOutput(t_Outputs *self)
          {
            ::java::lang::Object result((jobject) NULL);
            OBJ_CALL(result = self->object.getNoOutput());
            return self->parameters[0] != NULL ? wrapType(self->parameters[0], result.this$) : ::java::lang::t_Object::wrap_Object(result);
          }

          static PyObject *t_Outputs_merge(t_Outputs *self, PyObject *args)
          {
            ::java::lang::Object a0((jobject) NULL);
            ::java::lang::Object a1((jobject) NULL);
            ::java::lang::Object result((jobject) NULL);

            if (!parseArgs(args, "OO", self->parameters[0], self->parameters[0], &a0, &a1))
            {
              OBJ_CALL(result = self->object.merge(a0, a1));
              return self->parameters[0] != NULL ? wrapType(self->parameters[0], result.this$) : ::java::lang::t_Object::wrap_Object(result);
            }

            PyErr_SetArgsError((PyObject *) self, "merge", args);
            return NULL;
          }

          static PyObject *t_Outputs_outputToString(t_Outputs *self, PyObject *arg)
          {
            ::java::lang::Object a0((jobject) NULL);
            ::java::lang::String result((jobject) NULL);

            if (!parseArg(arg, "O", self->parameters[0], &a0))
            {
              OBJ_CALL(result = self->object.outputToString(a0));
              return j2p(result);
            }

            PyErr_SetArgsError((PyObject *) self, "outputToString", arg);
            return NULL;
          }

          static PyObject *t_Outputs_ramBytesUsed(t_Outputs *self, PyObject *arg)
          {
            ::java::lang::Object a0((jobject) NULL);
            jlong result;

            if (!parseArg(arg, "O", self->parameters[0], &a0))
            {
              OBJ_CALL(result = self->object.ramBytesUsed(a0));
              return PyLong_FromLongLong((PY_LONG_LONG) result);
            }

            PyErr_SetArgsError((PyObject *) self, "ramBytesUsed", arg);
            return NULL;
          }

          static PyObject *t_Outputs_read(t_Outputs *self, PyObject *arg)
          {
            ::org::apache::lucene::store::DataInput a0((jobject) NULL);
            ::java::lang::Object result((jobject) NULL);

            if (!parseArg(arg, "k", ::org::apache::lucene::store::DataInput::initializeClass, &a0))
            {
              OBJ_CALL(result = self->object.read(a0));
              return self->parameters[0] != NULL ? wrapType(self->parameters[0], result.this$) : ::java::lang::t_Object::wrap_Object(result);
            }

            PyErr_SetArgsError((PyObject *) self, "read", arg);
            return NULL;
          }

          static PyObject *t_Outputs_readFinalOutput(t_Outputs *self, PyObject *arg)
          {
            ::org::apache::lucene::store::DataInput a0((jobject) NULL);
            ::java::lang::Object result((jobject) NULL);

            if (!parseArg(arg, "k", ::org::apache::lucene::store::DataInput::initializeClass, &a0))
            {
              OBJ_CALL(result = self->object.readFinalOutput(a0));
              return self->parameters[0] != NULL ? wrapType(self->parameters[0], result.this$) : ::java::lang::t_Object::wrap_Object(result);
            }

            PyErr_SetArgsError((PyObject *) self, "readFinalOutput", arg);
            return NULL;
          }

          static PyObject *t_Outputs_skipFinalOutput(t_Outputs *self, PyObject *arg)
          {
            ::org::apache::lucene::store::DataInput a0((jobject) NULL);

            if (!parseArg(arg, "k", ::org::apache::lucene::store::DataInput::initializeClass, &a0))
            {
              OBJ_CALL(self->object.skipFinalOutput(a0));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError((PyObject *) self, "skipFinalOutput", arg);
            return NULL;
          }

          static PyObject *t_Outputs_skipOutput(t_Outputs *self, PyObject *arg)
          {
            ::org::apache::lucene::store::DataInput a0((jobject) NULL);

            if (!parseArg(arg, "k", ::org::apache::lucene::store::DataInput::initializeClass, &a0))
            {
              OBJ_CALL(self->object.skipOutput(a0));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError((PyObject *) self, "skipOutput", arg);
            return NULL;
          }

          static PyObject *t_Outputs_subtract(t_Outputs *self, PyObject *args)
          {
            ::java::lang::Object a0((jobject) NULL);
            ::java::lang::Object a1((jobject) NULL);
            ::java::lang::Object result((jobject) NULL);

            if (!parseArgs(args, "OO", self->parameters[0], self->parameters[0], &a0, &a1))
            {
              OBJ_CALL(result = self->object.subtract(a0, a1));
              return self->parameters[0] != NULL ? wrapType(self->parameters[0], result.this$) : ::java::lang::t_Object::wrap_Object(result);
            }

            PyErr_SetArgsError((PyObject *) self, "subtract", args);
            return NULL;
          }

          static PyObject *t_Outputs_write(t_Outputs *self, PyObject *args)
          {
            ::java::lang::Object a0((jobject) NULL);
            ::org::apache::lucene::store::DataOutput a1((jobject) NULL);

            if (!parseArgs(args, "Ok", self->parameters[0], ::org::apache::lucene::store::DataOutput::initializeClass, &a0, &a1))
            {
              OBJ_CALL(self->object.write(a0, a1));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError((PyObject *) self, "write", args);
            return NULL;
          }

          static PyObject *t_Outputs_writeFinalOutput(t_Outputs *self, PyObject *args)
          {
            ::java::lang::Object a0((jobject) NULL);
            ::org::apache::lucene::store::DataOutput a1((jobject) NULL);

            if (!parseArgs(args, "Ok", self->parameters[0], ::org::apache::lucene::store::DataOutput::initializeClass, &a0, &a1))
            {
              OBJ_CALL(self->object.writeFinalOutput(a0, a1));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError((PyObject *) self, "writeFinalOutput", args);
            return NULL;
          }
          static PyObject *t_Outputs_get__parameters_(t_Outputs *self, void *data)
          {
            return typeParameters(self->parameters, sizeof(self->parameters));
          }

          static PyObject *t_Outputs_get__noOutput(t_Outputs *self, void *data)
          {
            ::java::lang::Object value((jobject) NULL);
            OBJ_CALL(value = self->object.getNoOutput());
            return ::java::lang::t_Object::wrap_Object(value);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/similarities/BasicModelIn.h"
#include "org/apache/lucene/search/similarities/BasicStats.h"
#include "java/lang/String.h"
#include "org/apache/lucene/search/Explanation.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace similarities {

          ::java::lang::Class *BasicModelIn::class$ = NULL;
          jmethodID *BasicModelIn::mids$ = NULL;
          bool BasicModelIn::live$ = false;

          jclass BasicModelIn::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/search/similarities/BasicModelIn");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_f2cc1bce94666404] = env->getMethodID(cls, "<init>", "()V");
              mids$[mid_explain_77a68ba236144920] = env->getMethodID(cls, "explain", "(Lorg/apache/lucene/search/similarities/BasicStats;DD)Lorg/apache/lucene/search/Explanation;");
              mids$[mid_score_761ab1c432346fd0] = env->getMethodID(cls, "score", "(Lorg/apache/lucene/search/similarities/BasicStats;DD)D");
              mids$[mid_toString_db9b55ba01e03e4b] = env->getMethodID(cls, "toString", "()Ljava/lang/String;");

              class$ = new ::java::lang::Class(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          BasicModelIn::BasicModelIn() : ::org::apache::lucene::search::similarities::BasicModel(env->newObject(initializeClass, &mids$, mid_init$_f2cc1bce94666404)) {}

          ::org::apache::lucene::search::Explanation BasicModelIn::explain(const ::org::apache::lucene::search::similarities::BasicStats & a0, jdouble a1, jdouble a2) const
          {
            return ::org::apache::lucene::search::Explanation(env->callObjectMethod(this$, mids$[mid_explain_77a68ba236144920], a0.this$, a1, a2));
          }

          jdouble BasicModelIn::score(const ::org::apache::lucene::search::similarities::BasicStats & a0, jdouble a1, jdouble a2) const
          {
            return env->callDoubleMethod(this$, mids$[mid_score_761ab1c432346fd0], a0.this$, a1, a2);
          }

          ::java::lang::String BasicModelIn::toString() const
          {
            return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_db9b55ba01e03e4b]));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace similarities {
          static PyObject *t_BasicModelIn_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_BasicModelIn_instance_(PyTypeObject *type, PyObject *arg);
          static int t_BasicModelIn_init_(t_BasicModelIn *self, PyObject *args, PyObject *kwds);
          static PyObject *t_BasicModelIn_explain(t_BasicModelIn *self, PyObject *args);
          static PyObject *t_BasicModelIn_score(t_BasicModelIn *self, PyObject *args);
          static PyObject *t_BasicModelIn_toString(t_BasicModelIn *self, PyObject *args);

          static PyMethodDef t_BasicModelIn__methods_[] = {
            DECLARE_METHOD(t_BasicModelIn, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_BasicModelIn, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_BasicModelIn, explain, METH_VARARGS),
            DECLARE_METHOD(t_BasicModelIn, score, METH_VARARGS),
            DECLARE_METHOD(t_BasicModelIn, toString, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          static PyType_Slot PY_TYPE_SLOTS(BasicModelIn)[] = {
            { Py_tp_methods, t_BasicModelIn__methods_ },
            { Py_tp_init, (void *) t_BasicModelIn_init_ },
            { 0, NULL }
          };

          static PyType_Def *PY_TYPE_BASES(BasicModelIn)[] = {
            &PY_TYPE_DEF(::org::apache::lucene::search::similarities::BasicModel),
            NULL
          };

          DEFINE_TYPE(BasicModelIn, t_BasicModelIn, BasicModelIn);

          void t_BasicModelIn::install(PyObject *module)
          {
            installType(&PY_TYPE(BasicModelIn), &PY_TYPE_DEF(BasicModelIn), module, "BasicModelIn", 0);
          }

          void t_BasicModelIn::initialize(PyObject *module)
          {
            PyObject_SetAttrString((PyObject *) PY_TYPE(BasicModelIn), "class_", make_descriptor(BasicModelIn::initializeClass, 1));
            PyObject_SetAttrString((PyObject *) PY_TYPE(BasicModelIn), "wrapfn_", make_descriptor(t_BasicModelIn::wrap_jobject));
            PyObject_SetAttrString((PyObject *) PY_TYPE(BasicModelIn), "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_BasicModelIn_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, BasicModelIn::initializeClass, 1)))
              return NULL;
            return t_BasicModelIn::wrap_Object(BasicModelIn(((t_BasicModelIn *) arg)->object.this$));
          }
          static PyObject *t_BasicModelIn_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, BasicModelIn::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_BasicModelIn_init_(t_BasicModelIn *self, PyObject *args, PyObject *kwds)
          {
            BasicModelIn object((jobject) NULL);

            INT_CALL(object = BasicModelIn());
            self->object = object;

            return 0;
          }

          static PyObject *t_BasicModelIn_explain(t_BasicModelIn *self, PyObject *args)
          {
            ::org::apache::lucene::search::similarities::BasicStats a0((jobject) NULL);
            jdouble a1;
            jdouble a2;
            ::org::apache::lucene::search::Explanation result((jobject) NULL);

            if (!parseArgs(args, "kDD", ::org::apache::lucene::search::similarities::BasicStats::initializeClass, &a0, &a1, &a2))
            {
              OBJ_CALL(result = self->object.explain(a0, a1, a2));
              return ::org::apache::lucene::search::t_Explanation::wrap_Object(result);
            }

            return callSuper(PY_TYPE(BasicModelIn), (PyObject *) self, "explain", args, 2);
          }

          static PyObject *t_BasicModelIn_score(t_BasicModelIn *self, PyObject *args)
          {
            ::org::apache::lucene::search::similarities::BasicStats a0((jobject) NULL);
            jdouble a1;
            jdouble a2;
            jdouble result;

            if (!parseArgs(args, "kDD", ::org::apache::lucene::search::similarities::BasicStats::initializeClass, &a0, &a1, &a2))
            {
              OBJ_CALL(result = self->object.score(a0, a1, a2));
              return PyFloat_FromDouble((double) result);
            }

            return callSuper(PY_TYPE(BasicModelIn), (PyObject *) self, "score", args, 2);
          }

          static PyObject *t_BasicModelIn_toString(t_BasicModelIn *self, PyObject *args)
          {
            ::java::lang::String result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.toString());
              return j2p(result);
            }

            return callSuper(PY_TYPE(BasicModelIn), (PyObject *) self, "toString", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/miscellaneous/ProtectedTermFilter.h"
#include "org/apache/lucene/analysis/TokenStream.h"
#include "java/util/function/Function.h"
#include "org/apache/lucene/analysis/CharArraySet.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace miscellaneous {

          ::java::lang::Class *ProtectedTermFilter::class$ = NULL;
          jmethodID *ProtectedTermFilter::mids$ = NULL;
          bool ProtectedTermFilter::live$ = false;

          jclass ProtectedTermFilter::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/miscellaneous/ProtectedTermFilter");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_8c78294b4d3043d5] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/analysis/CharArraySet;Lorg/apache/lucene/analysis/TokenStream;Ljava/util/function/Function;)V");
              mids$[mid_shouldFilter_8454bd5aa23fd11e] = env->getMethodID(cls, "shouldFilter", "()Z");

              class$ = new ::java::lang::Class(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          ProtectedTermFilter::ProtectedTermFilter(const ::org::apache::lucene::analysis::CharArraySet & a0, const ::org::apache::lucene::analysis::TokenStream & a1, const ::java::util::function::Function & a2) : ::org::apache::lucene::analysis::miscellaneous::ConditionalTokenFilter(env->newObject(initializeClass, &mids$, mid_init$_8c78294b4d3043d5, a0.this$, a1.this$, a2.this$)) {}
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace miscellaneous {
          static PyObject *t_ProtectedTermFilter_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_ProtectedTermFilter_instance_(PyTypeObject *type, PyObject *arg);
          static int t_ProtectedTermFilter_init_(t_ProtectedTermFilter *self, PyObject *args, PyObject *kwds);

          static PyMethodDef t_ProtectedTermFilter__methods_[] = {
            DECLARE_METHOD(t_ProtectedTermFilter, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_ProtectedTermFilter, instance_, METH_O | METH_CLASS),
            { NULL, NULL, 0, NULL }
          };

          static PyType_Slot PY_TYPE_SLOTS(ProtectedTermFilter)[] = {
            { Py_tp_methods, t_ProtectedTermFilter__methods_ },
            { Py_tp_init, (void *) t_ProtectedTermFilter_init_ },
            { 0, NULL }
          };

          static PyType_Def *PY_TYPE_BASES(ProtectedTermFilter)[] = {
            &PY_TYPE_DEF(::org::apache::lucene::analysis::miscellaneous::ConditionalTokenFilter),
            NULL
          };

          DEFINE_TYPE(ProtectedTermFilter, t_ProtectedTermFilter, ProtectedTermFilter);

          void t_ProtectedTermFilter::install(PyObject *module)
          {
            installType(&PY_TYPE(ProtectedTermFilter), &PY_TYPE_DEF(ProtectedTermFilter), module, "ProtectedTermFilter", 0);
          }

          void t_ProtectedTermFilter::initialize(PyObject *module)
          {
            PyObject_SetAttrString((PyObject *) PY_TYPE(ProtectedTermFilter), "class_", make_descriptor(ProtectedTermFilter::initializeClass, 1));
            PyObject_SetAttrString((PyObject *) PY_TYPE(ProtectedTermFilter), "wrapfn_", make_descriptor(t_ProtectedTermFilter::wrap_jobject));
            PyObject_SetAttrString((PyObject *) PY_TYPE(ProtectedTermFilter), "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_ProtectedTermFilter_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, ProtectedTermFilter::initializeClass, 1)))
              return NULL;
            return t_ProtectedTermFilter::wrap_Object(ProtectedTermFilter(((t_ProtectedTermFilter *) arg)->object.this$));
          }
          static PyObject *t_ProtectedTermFilter_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, ProtectedTermFilter::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_ProtectedTermFilter_init_(t_ProtectedTermFilter *self, PyObject *args, PyObject *kwds)
          {
            ::org::apache::lucene::analysis::CharArraySet a0((jobject) NULL);
            PyTypeObject **p0;
            ::org::apache::lucene::analysis::TokenStream a1((jobject) NULL);
            ::java::util::function::Function a2((jobject) NULL);
            PyTypeObject **p2;
            ProtectedTermFilter object((jobject) NULL);

            if (!parseArgs(args, "KkK", ::org::apache::lucene::analysis::CharArraySet::initializeClass, ::org::apache::lucene::analysis::TokenStream::initializeClass, ::java::util::function::Function::initializeClass, &a0, &p0, ::org::apache::lucene::analysis::t_CharArraySet::parameters_, &a1, &a2, &p2, ::java::util::function::t_Function::parameters_))
            {
              INT_CALL(object = ProtectedTermFilter(a0, a1, a2));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/antlr/v4/runtime/ParserRuleContext.h"
#include "java/lang/Class.h"
#include "org/antlr/v4/runtime/ParserRuleContext.h"
#include "org/antlr/v4/runtime/RecognitionException.h"
#include "java/lang/String.h"
#include "org/antlr/v4/runtime/Parser.h"
#include "java/util/List.h"
#include "org/antlr/v4/runtime/Token.h"
#include "JArray.h"

namespace org {
  namespace antlr {
    namespace v4 {
      namespace runtime {

        ::java::lang::Class *ParserRuleContext::class$ = NULL;
        jmethodID *ParserRuleContext::mids$ = NULL;
        jfieldID *ParserRuleContext::fids$ = NULL;
        bool ParserRuleContext::live$ = false;

        jclass ParserRuleContext::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/antlr/v4/runtime/ParserRuleContext");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_f2cc1bce94666404] = env->getMethodID(cls, "<init>", "()V");
            mids$[mid_init$_0c6ee6fa39ffeab1] = env->getMethodID(cls, "<init>", "(Lorg/antlr/v4/runtime/ParserRuleContext;I)V");
            mids$[mid_addChild_47835dac55075eaf] = env->getMethodID(cls, "addChild", "(Lorg/antlr/v4/runtime/RuleContext;)Lorg/antlr/v4/runtime/RuleContext;");
            mids$[mid_copyFrom_a659ccb039b5e018] = env->getMethodID(cls, "copyFrom", "(Lorg/antlr/v4/runtime/ParserRuleContext;)V");
            mids$[mid_getChildCount_9972fcc56b44e79d] = env->getMethodID(cls, "getChildCount", "()I");
            mids$[mid_getParent_fcd99d1d10d04c76] = env->getMethodID(cls, "getParent", "()Lorg/antlr/v4/runtime/ParserRuleContext;");
            mids$[mid_getRuleContext_95e35e2601d3b5aa] = env->getMethodID(cls, "getRuleContext", "(Ljava/lang/Class;I)Lorg/antlr/v4/runtime/ParserRuleContext;");
            mids$[mid_getRuleContexts_24e20bcae77dbfdf] = env->getMethodID(cls, "getRuleContexts", "(Ljava/lang/Class;)Ljava/util/List;");
            mids$[mid_getStart_ed548981de5895c4] = env->getMethodID(cls, "getStart", "()Lorg/antlr/v4/runtime/Token;");
            mids$[mid_getStop_ed548981de5895c4] = env->getMethodID(cls, "getStop", "()Lorg/antlr/v4/runtime/Token;");
            mids$[mid_removeLastChild_f2cc1bce94666404] = env->getMethodID(cls, "removeLastChild", "()V");
            mids$[mid_toInfoString_80762e53fce54437] = env->getMethodID(cls, "toInfoString", "(Lorg/antlr/v4/runtime/Parser;)Ljava/lang/String;");

            fids$ = new jfieldID[max_fid];
            fids$[fid_exception] = env->getFieldID(cls, "exception", "Lorg/antlr/v4/runtime/RecognitionException;");
            fids$[fid_start] = env->getFieldID(cls, "start", "Lorg/antlr/v4/runtime/Token;");
            fids$[fid_stop] = env->getFieldID(cls, "stop", "Lorg/antlr/v4/runtime/Token;");

            class$ = new ::java::lang::Class(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        ParserRuleContext::ParserRuleContext() : ::org::antlr::v4::runtime::RuleContext(env->newObject(initializeClass, &mids$, mid_init$_f2cc1bce94666404)) {}

        ParserRuleContext::ParserRuleContext(const ParserRuleContext & a0, jint a1) : ::org::antlr::v4::runtime::RuleContext(env->newObject(initializeClass, &mids$, mid_init$_0c6ee6fa39ffeab1, a0.this$, a1)) {}

        ::org::antlr::v4::runtime::RuleContext ParserRuleContext::addChild(const ::org::antlr::v4::runtime::RuleContext & a0) const
        {
          return ::org::antlr::v4::runtime::RuleContext(env->callObjectMethod(this$, mids$[mid_addChild_47835dac55075eaf], a0.this$));
        }

        void ParserRuleContext::copyFrom(const ParserRuleContext & a0) const
        {
          env->callVoidMethod(this$, mids$[mid_copyFrom_a659ccb039b5e018], a0.this$);
        }

        jint ParserRuleContext::getChildCount() const
        {
          return env->callIntMethod(this$, mids$[mid_getChildCount_9972fcc56b44e79d]);
        }

        ParserRuleContext ParserRuleContext::getParent() const
        {
          return ParserRuleContext(env->callObjectMethod(this$, mids$[mid_getParent_fcd99d1d10d04c76]));
        }

        ParserRuleContext ParserRuleContext::getRuleContext(const ::java::lang::Class & a0, jint a1) const
        {
          return ParserRuleContext(env->callObjectMethod(this$, mids$[mid_getRuleContext_95e35e2601d3b5aa], a0.this$, a1));
        }

        ::java::util::List ParserRuleContext::getRuleContexts(const ::java::lang::Class & a0) const
        {
          return ::java::util::List(env->callObjectMethod(this$, mids$[mid_getRuleContexts_24e20bcae77dbfdf], a0.this$));
        }

        ::org::antlr::v4::runtime::Token ParserRuleContext::getStart() const
        {
          return ::org::antlr::v4::runtime::Token(env->callObjectMethod(this$, mids$[mid_getStart_ed548981de5895c4]));
        }

        ::org::antlr::v4::runtime::Token ParserRuleContext::getStop() const
        {
          return ::org::antlr::v4::runtime::Token(env->callObjectMethod(this$, mids$[mid_getStop_ed548981de5895c4]));
        }

        void ParserRuleContext::removeLastChild() const
        {
          env->callVoidMethod(this$, mids$[mid_removeLastChild_f2cc1bce94666404]);
        }

        ::java::lang::String ParserRuleContext::toInfoString(const ::org::antlr::v4::runtime::Parser & a0) const
        {
          return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toInfoString_80762e53fce54437], a0.this$));
        }

        ::org::antlr::v4::runtime::RecognitionException ParserRuleContext::_get_exception() const
        {
          return ::org::antlr::v4::runtime::RecognitionException(env->getObjectField(this$, fids$[fid_exception]));
        }

        void ParserRuleContext::_set_exception(const ::org::antlr::v4::runtime::RecognitionException & a0) const
        {
          env->setObjectField(this$, fids$[fid_exception], a0.this$);
        }

        ::org::antlr::v4::runtime::Token ParserRuleContext::_get_start() const
        {
          return ::org::antlr::v4::runtime::Token(env->getObjectField(this$, fids$[fid_start]));
        }

        void ParserRuleContext::_set_start(const ::org::antlr::v4::runtime::Token & a0) const
        {
          env->setObjectField(this$, fids$[fid_start], a0.this$);
        }

        ::org::antlr::v4::runtime::Token ParserRuleContext::_get_stop() const
        {
          return ::org::antlr::v4::runtime::Token(env->getObjectField(this$, fids$[fid_stop]));
        }

        void ParserRuleContext::_set_stop(const ::org::antlr::v4::runtime::Token & a0) const
        {
          env->setObjectField(this$, fids$[fid_stop], a0.this$);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace antlr {
    namespace v4 {
      namespace runtime {
        static PyObject *t_ParserRuleContext_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_ParserRuleContext_instance_(PyTypeObject *type, PyObject *arg);
        static int t_ParserRuleContext_init_(t_ParserRuleContext *self, PyObject *args, PyObject *kwds);
        static PyObject *t_ParserRuleContext_addChild(t_ParserRuleContext *self, PyObject *arg);
        static PyObject *t_ParserRuleContext_copyFrom(t_ParserRuleContext *self, PyObject *arg);
        static PyObject *t_ParserRuleContext_getChildCount(t_ParserRuleContext *self, PyObject *args);
        static PyObject *t_ParserRuleContext_getParent(t_ParserRuleContext *self, PyObject *args);
        static PyObject *t_ParserRuleContext_getRuleContext(t_ParserRuleContext *self, PyObject *args);
        static PyObject *t_ParserRuleContext_getRuleContexts(t_ParserRuleContext *self, PyObject *arg);
        static PyObject *t_ParserRuleContext_getStart(t_ParserRuleContext *self);
        static PyObject *t_ParserRuleContext_getStop(t_ParserRuleContext *self);
        static PyObject *t_ParserRuleContext_removeLastChild(t_ParserRuleContext *self);
        static PyObject *t_ParserRuleContext_toInfoString(t_ParserRuleContext *self, PyObject *arg);
        static PyObject *t_ParserRuleContext_get__exception(t_ParserRuleContext *self, void *data);
        static int t_ParserRuleContext_set__exception(t_ParserRuleContext *self, PyObject *arg, void *data);

        static PyObject *t_ParserRuleContext_get__childCount(t_ParserRuleContext *self, void *data);
        static PyObject *t_ParserRuleContext_get__parent(t_ParserRuleContext *self, void *data);
        static PyObject *t_ParserRuleContext_get__start(t_ParserRuleContext *self, void *data);
        static PyObject *t_ParserRuleContext_get__stop(t_ParserRuleContext *self, void *data);
        static PyGetSetDef t_ParserRuleContext__fields_[] = {
          DECLARE_GETSET_FIELD(t_ParserRuleContext, exception),
          DECLARE_GET_FIELD(t_ParserRuleContext, childCount),
          DECLARE_GET_FIELD(t_ParserRuleContext, parent),
          DECLARE_GET_FIELD(t_ParserRuleContext, start),
          DECLARE_GET_FIELD(t_ParserRuleContext, stop),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_ParserRuleContext__methods_[] = {
          DECLARE_METHOD(t_ParserRuleContext, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_ParserRuleContext, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_ParserRuleContext, addChild, METH_O),
          DECLARE_METHOD(t_ParserRuleContext, copyFrom, METH_O),
          DECLARE_METHOD(t_ParserRuleContext, getChildCount, METH_VARARGS),
          DECLARE_METHOD(t_ParserRuleContext, getParent, METH_VARARGS),
          DECLARE_METHOD(t_ParserRuleContext, getRuleContext, METH_VARARGS),
          DECLARE_METHOD(t_ParserRuleContext, getRuleContexts, METH_O),
          DECLARE_METHOD(t_ParserRuleContext, getStart, METH_NOARGS),
          DECLARE_METHOD(t_ParserRuleContext, getStop, METH_NOARGS),
          DECLARE_METHOD(t_ParserRuleContext, removeLastChild, METH_NOARGS),
          DECLARE_METHOD(t_ParserRuleContext, toInfoString, METH_O),
          { NULL, NULL, 0, NULL }
        };

        static PyType_Slot PY_TYPE_SLOTS(ParserRuleContext)[] = {
          { Py_tp_methods, t_ParserRuleContext__methods_ },
          { Py_tp_init, (void *) t_ParserRuleContext_init_ },
          { Py_tp_getset, t_ParserRuleContext__fields_ },
          { 0, NULL }
        };

        static PyType_Def *PY_TYPE_BASES(ParserRuleContext)[] = {
          &PY_TYPE_DEF(::org::antlr::v4::runtime::RuleContext),
          NULL
        };

        DEFINE_TYPE(ParserRuleContext, t_ParserRuleContext, ParserRuleContext);

        void t_ParserRuleContext::install(PyObject *module)
        {
          installType(&PY_TYPE(ParserRuleContext), &PY_TYPE_DEF(ParserRuleContext), module, "ParserRuleContext", 0);
        }

        void t_ParserRuleContext::initialize(PyObject *module)
        {
          PyObject_SetAttrString((PyObject *) PY_TYPE(ParserRuleContext), "class_", make_descriptor(ParserRuleContext::initializeClass, 1));
          PyObject_SetAttrString((PyObject *) PY_TYPE(ParserRuleContext), "wrapfn_", make_descriptor(t_ParserRuleContext::wrap_jobject));
          PyObject_SetAttrString((PyObject *) PY_TYPE(ParserRuleContext), "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_ParserRuleContext_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, ParserRuleContext::initializeClass, 1)))
            return NULL;
          return t_ParserRuleContext::wrap_Object(ParserRuleContext(((t_ParserRuleContext *) arg)->object.this$));
        }
        static PyObject *t_ParserRuleContext_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, ParserRuleContext::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_ParserRuleContext_init_(t_ParserRuleContext *self, PyObject *args, PyObject *kwds)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 0:
            {
              ParserRuleContext object((jobject) NULL);

              INT_CALL(object = ParserRuleContext());
              self->object = object;
              break;
            }
           case 2:
            {
              ParserRuleContext a0((jobject) NULL);
              jint a1;
              ParserRuleContext object((jobject) NULL);

              if (!parseArgs(args, "kI", ParserRuleContext::initializeClass, &a0, &a1))
              {
                INT_CALL(object = ParserRuleContext(a0, a1));
                self->object = object;
                break;
              }
            }
           default:
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }

        static PyObject *t_ParserRuleContext_addChild(t_ParserRuleContext *self, PyObject *arg)
        {
          ::org::antlr::v4::runtime::RuleContext a0((jobject) NULL);
          ::org::antlr::v4::runtime::RuleContext result((jobject) NULL);

          if (!parseArg(arg, "k", ::org::antlr::v4::runtime::RuleContext::initializeClass, &a0))
          {
            OBJ_CALL(result = self->object.addChild(a0));
            return ::org::antlr::v4::runtime::t_RuleContext::wrap_Object(result);
          }

          PyErr_SetArgsError((PyObject *) self, "addChild", arg);
          return NULL;
        }

        static PyObject *t_ParserRuleContext_copyFrom(t_ParserRuleContext *self, PyObject *arg)
        {
          ParserRuleContext a0((jobject) NULL);

          if (!parseArg(arg, "k", ParserRuleContext::initializeClass, &a0))
          {
            OBJ_CALL(self->object.copyFrom(a0));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "copyFrom", arg);
          return NULL;
        }

        static PyObject *t_ParserRuleContext_getChildCount(t_ParserRuleContext *self, PyObject *args)
        {
          jint result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.getChildCount());
            return PyLong_FromLong((long) result);
          }

          return callSuper(PY_TYPE(ParserRuleContext), (PyObject *) self, "getChildCount", args, 2);
        }

        static PyObject *t_ParserRuleContext_getParent(t_ParserRuleContext *self, PyObject *args)
        {
          ParserRuleContext result((jobject) NULL);

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.getParent());
            return t_ParserRuleContext::wrap_Object(result);
          }

          return callSuper(PY_TYPE(ParserRuleContext), (PyObject *) self, "getParent", args, 2);
        }

        static PyObject *t_ParserRuleContext_getRuleContext(t_ParserRuleContext *self, PyObject *args)
        {
          ::java::lang::Class a0((jobject) NULL);
          PyTypeObject **p0;
          jint a1;
          ParserRuleContext result((jobject) NULL);

          if (!parseArgs(args, "KI", ::java::lang::Class::initializeClass, &a0, &p0, ::java::lang::t_Class::parameters_, &a1))
          {
            OBJ_CALL(result = self->object.getRuleContext(a0, a1));
            return p0 != NULL && p0[0] != NULL ? wrapType(p0[0], result.this$) : t_ParserRuleContext::wrap_Object(result);
          }

          return callSuper(PY_TYPE(ParserRuleContext), (PyObject *) self, "getRuleContext", args, 2);
        }

        static PyObject *t_ParserRuleContext_getRuleContexts(t_ParserRuleContext *self, PyObject *arg)
        {
          ::java::lang::Class a0((jobject) NULL);
          PyTypeObject **p0;
          ::java::util::List result((jobject) NULL);

          if (!parseArg(arg, "K", ::java::lang::Class::initializeClass, &a0, &p0, ::java::lang::t_Class::parameters_))
          {
            OBJ_CALL(result = self->object.getRuleContexts(a0));
            return ::java::util::t_List::wrap_Object(result);
          }

          PyErr_SetArgsError((PyObject *) self, "getRuleContexts", arg);
          return NULL;
        }

        static PyObject *t_ParserRuleContext_getStart(t_ParserRuleContext *self)
        {
          ::org::antlr::v4::runtime::Token result((jobject) NULL);
          OBJ_CALL(result = self->object.getStart());
          return ::org::antlr::v4::runtime::t_Token::wrap_Object(result);
        }

        static PyObject *t_ParserRuleContext_getStop(t_ParserRuleContext *self)
        {
          ::org::antlr::v4::runtime::Token result((jobject) NULL);
          OBJ_CALL(result = self->object.getStop());
          return ::org::antlr::v4::runtime::t_Token::wrap_Object(result);
        }

        static PyObject *t_ParserRuleContext_removeLastChild(t_ParserRuleContext *self)
        {
          OBJ_CALL(self->object.removeLastChild());
          Py_RETURN_NONE;
        }

        static PyObject *t_ParserRuleContext_toInfoString(t_ParserRuleContext *self, PyObject *arg)
        {
          ::org::antlr::v4::runtime::Parser a0((jobject) NULL);
          PyTypeObject **p0;
          ::java::lang::String result((jobject) NULL);

          if (!parseArg(arg, "K", ::org::antlr::v4::runtime::Parser::initializeClass, &a0, &p0, ::org::antlr::v4::runtime::t_Parser::parameters_))
          {
            OBJ_CALL(result = self->object.toInfoString(a0));
            return j2p(result);
          }

          PyErr_SetArgsError((PyObject *) self, "toInfoString", arg);
          return NULL;
        }

        static PyObject *t_ParserRuleContext_get__exception(t_ParserRuleContext *self, void *data)
        {
          ::org::antlr::v4::runtime::RecognitionException value((jobject) NULL);
          OBJ_CALL(value = self->object._get_exception());
          return ::org::antlr::v4::runtime::t_RecognitionException::wrap_Object(value);
        }
        static int t_ParserRuleContext_set__exception(t_ParserRuleContext *self, PyObject *arg, void *data)
        {
          ::org::antlr::v4::runtime::RecognitionException value((jobject) NULL);
          if (!parseArg(arg, "k", ::org::antlr::v4::runtime::RecognitionException::initializeClass, &value))
          {
            INT_CALL(self->object._set_exception(value));
            return 0;
          }
          PyErr_SetArgsError((PyObject *) self, "exception", arg);
          return -1;
        }

        static PyObject *t_ParserRuleContext_get__childCount(t_ParserRuleContext *self, void *data)
        {
          jint value;
          OBJ_CALL(value = self->object.getChildCount());
          return PyLong_FromLong((long) value);
        }

        static PyObject *t_ParserRuleContext_get__parent(t_ParserRuleContext *self, void *data)
        {
          ParserRuleContext value((jobject) NULL);
          OBJ_CALL(value = self->object.getParent());
          return t_ParserRuleContext::wrap_Object(value);
        }

        static PyObject *t_ParserRuleContext_get__start(t_ParserRuleContext *self, void *data)
        {
          ::org::antlr::v4::runtime::Token value((jobject) NULL);
          OBJ_CALL(value = self->object.getStart());
          return ::org::antlr::v4::runtime::t_Token::wrap_Object(value);
        }

        static PyObject *t_ParserRuleContext_get__stop(t_ParserRuleContext *self, void *data)
        {
          ::org::antlr::v4::runtime::Token value((jobject) NULL);
          OBJ_CALL(value = self->object.getStop());
          return ::org::antlr::v4::runtime::t_Token::wrap_Object(value);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/util/packed/PackedLongValues.h"
#include "org/apache/lucene/util/packed/PackedLongValues$Builder.h"
#include "org/apache/lucene/util/packed/PackedLongValues$Iterator.h"
#include "org/apache/lucene/util/Accountable.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        namespace packed {

          ::java::lang::Class *PackedLongValues::class$ = NULL;
          jmethodID *PackedLongValues::mids$ = NULL;
          bool PackedLongValues::live$ = false;

          jclass PackedLongValues::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/util/packed/PackedLongValues");

              mids$ = new jmethodID[max_mid];
              mids$[mid_deltaPackedBuilder_afde0be6d85ad6a8] = env->getStaticMethodID(cls, "deltaPackedBuilder", "(F)Lorg/apache/lucene/util/packed/PackedLongValues$Builder;");
              mids$[mid_deltaPackedBuilder_df740e9b64bcc1f9] = env->getStaticMethodID(cls, "deltaPackedBuilder", "(IF)Lorg/apache/lucene/util/packed/PackedLongValues$Builder;");
              mids$[mid_get_d711eecdc469624a] = env->getMethodID(cls, "get", "(J)J");
              mids$[mid_iterator_43993335cba3a7d8] = env->getMethodID(cls, "iterator", "()Lorg/apache/lucene/util/packed/PackedLongValues$Iterator;");
              mids$[mid_monotonicBuilder_afde0be6d85ad6a8] = env->getStaticMethodID(cls, "monotonicBuilder", "(F)Lorg/apache/lucene/util/packed/PackedLongValues$Builder;");
              mids$[mid_monotonicBuilder_df740e9b64bcc1f9] = env->getStaticMethodID(cls, "monotonicBuilder", "(IF)Lorg/apache/lucene/util/packed/PackedLongValues$Builder;");
              mids$[mid_packedBuilder_afde0be6d85ad6a8] = env->getStaticMethodID(cls, "packedBuilder", "(F)Lorg/apache/lucene/util/packed/PackedLongValues$Builder;");
              mids$[mid_packedBuilder_df740e9b64bcc1f9] = env->getStaticMethodID(cls, "packedBuilder", "(IF)Lorg/apache/lucene/util/packed/PackedLongValues$Builder;");
              mids$[mid_ramBytesUsed_2e5ae9edcb9b072f] = env->getMethodID(cls, "ramBytesUsed", "()J");
              mids$[mid_size_2e5ae9edcb9b072f] = env->getMethodID(cls, "size", "()J");

              class$ = new ::java::lang::Class(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          ::org::apache::lucene::util::packed::PackedLongValues$Builder PackedLongValues::deltaPackedBuilder(jfloat a0)
          {
            jclass cls = env->getClass(initializeClass);
            return ::org::apache::lucene::util::packed::PackedLongValues$Builder(env->callStaticObjectMethod(cls, mids$[mid_deltaPackedBuilder_afde0be6d85ad6a8], a0));
          }

          ::org::apache::lucene::util::packed::PackedLongValues$Builder PackedLongValues::deltaPackedBuilder(jint a0, jfloat a1)
          {
            jclass cls = env->getClass(initializeClass);
            return ::org::apache::lucene::util::packed::PackedLongValues$Builder(env->callStaticObjectMethod(cls, mids$[mid_deltaPackedBuilder_df740e9b64bcc1f9], a0, a1));
          }

          jlong PackedLongValues::get(jlong a0) const
          {
            return env->callLongMethod(this$, mids$[mid_get_d711eecdc469624a], a0);
          }

          ::org::apache::lucene::util::packed::PackedLongValues$Iterator PackedLongValues::iterator() const
          {
            return ::org::apache::lucene::util::packed::PackedLongValues$Iterator(env->callObjectMethod(this$, mids$[mid_iterator_43993335cba3a7d8]));
          }

          ::org::apache::lucene::util::packed::PackedLongValues$Builder PackedLongValues::monotonicBuilder(jfloat a0)
          {
            jclass cls = env->getClass(initializeClass);
            return ::org::apache::lucene::util::packed::PackedLongValues$Builder(env->callStaticObjectMethod(cls, mids$[mid_monotonicBuilder_afde0be6d85ad6a8], a0));
          }

          ::org::apache::lucene::util::packed::PackedLongValues$Builder PackedLongValues::monotonicBuilder(jint a0, jfloat a1)
          {
            jclass cls = env->getClass(initializeClass);
            return ::org::apache::lucene::util::packed::PackedLongValues$Builder(env->callStaticObjectMethod(cls, mids$[mid_monotonicBuilder_df740e9b64bcc1f9], a0, a1));
          }

          ::org::apache::lucene::util::packed::PackedLongValues$Builder PackedLongValues::packedBuilder(jfloat a0)
          {
            jclass cls = env->getClass(initializeClass);
            return ::org::apache::lucene::util::packed::PackedLongValues$Builder(env->callStaticObjectMethod(cls, mids$[mid_packedBuilder_afde0be6d85ad6a8], a0));
          }

          ::org::apache::lucene::util::packed::PackedLongValues$Builder PackedLongValues::packedBuilder(jint a0, jfloat a1)
          {
            jclass cls = env->getClass(initializeClass);
            return ::org::apache::lucene::util::packed::PackedLongValues$Builder(env->callStaticObjectMethod(cls, mids$[mid_packedBuilder_df740e9b64bcc1f9], a0, a1));
          }

          jlong PackedLongValues::ramBytesUsed() const
          {
            return env->callLongMethod(this$, mids$[mid_ramBytesUsed_2e5ae9edcb9b072f]);
          }

          jlong PackedLongValues::size() const
          {
            return env->callLongMethod(this$, mids$[mid_size_2e5ae9edcb9b072f]);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        namespace packed {
          static PyObject *t_PackedLongValues_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_PackedLongValues_instance_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_PackedLongValues_deltaPackedBuilder(PyTypeObject *type, PyObject *args);
          static PyObject *t_PackedLongValues_get(t_PackedLongValues *self, PyObject *args);
          static PyObject *t_PackedLongValues_iterator(t_PackedLongValues *self);
          static PyObject *t_PackedLongValues_monotonicBuilder(PyTypeObject *type, PyObject *args);
          static PyObject *t_PackedLongValues_packedBuilder(PyTypeObject *type, PyObject *args);
          static PyObject *t_PackedLongValues_ramBytesUsed(t_PackedLongValues *self);
          static PyObject *t_PackedLongValues_size(t_PackedLongValues *self);

          static PyMethodDef t_PackedLongValues__methods_[] = {
            DECLARE_METHOD(t_PackedLongValues, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_PackedLongValues, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_PackedLongValues, deltaPackedBuilder, METH_VARARGS | METH_CLASS),
            DECLARE_METHOD(t_PackedLongValues, get, METH_VARARGS),
            DECLARE_METHOD(t_PackedLongValues, iterator, METH_NOARGS),
            DECLARE_METHOD(t_PackedLongValues, monotonicBuilder, METH_VARARGS | METH_CLASS),
            DECLARE_METHOD(t_PackedLongValues, packedBuilder, METH_VARARGS | METH_CLASS),
            DECLARE_METHOD(t_PackedLongValues, ramBytesUsed, METH_NOARGS),
            DECLARE_METHOD(t_PackedLongValues, size, METH_NOARGS),
            { NULL, NULL, 0, NULL }
          };

          static PyType_Slot PY_TYPE_SLOTS(PackedLongValues)[] = {
            { Py_tp_methods, t_PackedLongValues__methods_ },
            { Py_tp_init, (void *) abstract_init },
            { 0, NULL }
          };

          static PyType_Def *PY_TYPE_BASES(PackedLongValues)[] = {
            &PY_TYPE_DEF(::org::apache::lucene::util::LongValues),
            NULL
          };

          DEFINE_TYPE(PackedLongValues, t_PackedLongValues, PackedLongValues);

          void t_PackedLongValues::install(PyObject *module)
          {
            installType(&PY_TYPE(PackedLongValues), &PY_TYPE_DEF(PackedLongValues), module, "PackedLongValues", 0);
            PyObject_SetAttrString((PyObject *) PY_TYPE(PackedLongValues), "Builder", make_descriptor(&PY_TYPE_DEF(PackedLongValues$Builder)));
          }

          void t_PackedLongValues::initialize(PyObject *module)
          {
            PyObject_SetAttrString((PyObject *) PY_TYPE(PackedLongValues), "class_", make_descriptor(PackedLongValues::initializeClass, 1));
            PyObject_SetAttrString((PyObject *) PY_TYPE(PackedLongValues), "wrapfn_", make_descriptor(t_PackedLongValues::wrap_jobject));
            PyObject_SetAttrString((PyObject *) PY_TYPE(PackedLongValues), "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_PackedLongValues_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, PackedLongValues::initializeClass, 1)))
              return NULL;
            return t_PackedLongValues::wrap_Object(PackedLongValues(((t_PackedLongValues *) arg)->object.this$));
          }
          static PyObject *t_PackedLongValues_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, PackedLongValues::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static PyObject *t_PackedLongValues_deltaPackedBuilder(PyTypeObject *type, PyObject *args)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 1:
              {
                jfloat a0;
                ::org::apache::lucene::util::packed::PackedLongValues$Builder result((jobject) NULL);

                if (!parseArgs(args, "F", &a0))
                {
                  OBJ_CALL(result = ::org::apache::lucene::util::packed::PackedLongValues::deltaPackedBuilder(a0));
                  return ::org::apache::lucene::util::packed::t_PackedLongValues$Builder::wrap_Object(result);
                }
              }
              break;
             case 2:
              {
                jint a0;
                jfloat a1;
                ::org::apache::lucene::util::packed::PackedLongValues$Builder result((jobject) NULL);

                if (!parseArgs(args, "IF", &a0, &a1))
                {
                  OBJ_CALL(result = ::org::apache::lucene::util::packed::PackedLongValues::deltaPackedBuilder(a0, a1));
                  return ::org::apache::lucene::util::packed::t_PackedLongValues$Builder::wrap_Object(result);
                }
              }
            }

            PyErr_SetArgsError(type, "deltaPackedBuilder", args);
            return NULL;
          }

          static PyObject *t_PackedLongValues_get(t_PackedLongValues *self, PyObject *args)
          {
            jlong a0;
            jlong result;

            if (!parseArgs(args, "J", &a0))
            {
              OBJ_CALL(result = self->object.get(a0));
              return PyLong_FromLongLong((PY_LONG_LONG) result);
            }

            return callSuper(PY_TYPE(PackedLongValues), (PyObject *) self, "get", args, 2);
          }

          static PyObject *t_PackedLongValues_iterator(t_PackedLongValues *self)
          {
            ::org::apache::lucene::util::packed::PackedLongValues$Iterator result((jobject) NULL);
            OBJ_CALL(result = self->object.iterator());
            return ::org::apache::lucene::util::packed::t_PackedLongValues$Iterator::wrap_Object(result);
          }

          static PyObject *t_PackedLongValues_monotonicBuilder(PyTypeObject *type, PyObject *args)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 1:
              {
                jfloat a0;
                ::org::apache::lucene::util::packed::PackedLongValues$Builder result((jobject) NULL);

                if (!parseArgs(args, "F", &a0))
                {
                  OBJ_CALL(result = ::org::apache::lucene::util::packed::PackedLongValues::monotonicBuilder(a0));
                  return ::org::apache::lucene::util::packed::t_PackedLongValues$Builder::wrap_Object(result);
                }
              }
              break;
             case 2:
              {
                jint a0;
                jfloat a1;
                ::org::apache::lucene::util::packed::PackedLongValues$Builder result((jobject) NULL);

                if (!parseArgs(args, "IF", &a0, &a1))
                {
                  OBJ_CALL(result = ::org::apache::lucene::util::packed::PackedLongValues::monotonicBuilder(a0, a1));
                  return ::org::apache::lucene::util::packed::t_PackedLongValues$Builder::wrap_Object(result);
                }
              }
            }

            PyErr_SetArgsError(type, "monotonicBuilder", args);
            return NULL;
          }

          static PyObject *t_PackedLongValues_packedBuilder(PyTypeObject *type, PyObject *args)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 1:
              {
                jfloat a0;
                ::org::apache::lucene::util::packed::PackedLongValues$Builder result((jobject) NULL);

                if (!parseArgs(args, "F", &a0))
                {
                  OBJ_CALL(result = ::org::apache::lucene::util::packed::PackedLongValues::packedBuilder(a0));
                  return ::org::apache::lucene::util::packed::t_PackedLongValues$Builder::wrap_Object(result);
                }
              }
              break;
             case 2:
              {
                jint a0;
                jfloat a1;
                ::org::apache::lucene::util::packed::PackedLongValues$Builder result((jobject) NULL);

                if (!parseArgs(args, "IF", &a0, &a1))
                {
                  OBJ_CALL(result = ::org::apache::lucene::util::packed::PackedLongValues::packedBuilder(a0, a1));
                  return ::org::apache::lucene::util::packed::t_PackedLongValues$Builder::wrap_Object(result);
                }
              }
            }

            PyErr_SetArgsError(type, "packedBuilder", args);
            return NULL;
          }

          static PyObject *t_PackedLongValues_ramBytesUsed(t_PackedLongValues *self)
          {
            jlong result;
            OBJ_CALL(result = self->object.ramBytesUsed());
            return PyLong_FromLongLong((PY_LONG_LONG) result);
          }

          static PyObject *t_PackedLongValues_size(t_PackedLongValues *self)
          {
            jlong result;
            OBJ_CALL(result = self->object.size());
            return PyLong_FromLongLong((PY_LONG_LONG) result);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/store/ByteBuffersDataInput.h"
#include "org/apache/lucene/util/Accountable.h"
#include "java/lang/Class.h"
#include "java/io/EOFException.h"
#include "java/lang/String.h"
#include "org/apache/lucene/store/RandomAccessInput.h"
#include "java/util/List.h"
#include "org/apache/lucene/store/ByteBuffersDataInput.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace store {

        ::java::lang::Class *ByteBuffersDataInput::class$ = NULL;
        jmethodID *ByteBuffersDataInput::mids$ = NULL;
        bool ByteBuffersDataInput::live$ = false;

        jclass ByteBuffersDataInput::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/store/ByteBuffersDataInput");

            mids$ = new jmethodID[max_mid];
            mids$[mid_position_2e5ae9edcb9b072f] = env->getMethodID(cls, "position", "()J");
            mids$[mid_ramBytesUsed_2e5ae9edcb9b072f] = env->getMethodID(cls, "ramBytesUsed", "()J");
            mids$[mid_readByte_871cd52a74f26213] = env->getMethodID(cls, "readByte", "()B");
            mids$[mid_readByte_70f46e25a8aca047] = env->getMethodID(cls, "readByte", "(J)B");
            mids$[mid_readBytes_43fdd39c09bb2fad] = env->getMethodID(cls, "readBytes", "([BII)V");
            mids$[mid_readInt_694afffd0eb7dc3c] = env->getMethodID(cls, "readInt", "(J)I");
            mids$[mid_readLong_d711eecdc469624a] = env->getMethodID(cls, "readLong", "(J)J");
            mids$[mid_readShort_e963ff2cc414b347] = env->getMethodID(cls, "readShort", "(J)S");
            mids$[mid_seek_9c778c9bce6694df] = env->getMethodID(cls, "seek", "(J)V");
            mids$[mid_size_2e5ae9edcb9b072f] = env->getMethodID(cls, "size", "()J");
            mids$[mid_slice_0b770bd4d9848e43] = env->getMethodID(cls, "slice", "(JJ)Lorg/apache/lucene/store/ByteBuffersDataInput;");
            mids$[mid_toString_db9b55ba01e03e4b] = env->getMethodID(cls, "toString", "()Ljava/lang/String;");

            class$ = new ::java::lang::Class(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        jlong ByteBuffersDataInput::position() const
        {
          return env->callLongMethod(this$, mids$[mid_position_2e5ae9edcb9b072f]);
        }

        jlong ByteBuffersDataInput::ramBytesUsed() const
        {
          return env->callLongMethod(this$, mids$[mid_ramBytesUsed_2e5ae9edcb9b072f]);
        }

        jbyte ByteBuffersDataInput::readByte() const
        {
          return env->callByteMethod(this$, mids$[mid_readByte_871cd52a74f26213]);
        }

        jbyte ByteBuffersDataInput::readByte(jlong a0) const
        {
          return env->callByteMethod(this$, mids$[mid_readByte_70f46e25a8aca047], a0);
        }

        void ByteBuffersDataInput::readBytes(const JArray< jbyte > & a0, jint a1, jint a2) const
        {
          env->callVoidMethod(this$, mids$[mid_readBytes_43fdd39c09bb2fad], a0.this$, a1, a2);
        }

        jint ByteBuffersDataInput::readInt(jlong a0) const
        {
          return env->callIntMethod(this$, mids$[mid_readInt_694afffd0eb7dc3c], a0);
        }

        jlong ByteBuffersDataInput::readLong(jlong a0) const
        {
          return env->callLongMethod(this$, mids$[mid_readLong_d711eecdc469624a], a0);
        }

        jshort ByteBuffersDataInput::readShort(jlong a0) const
        {
          return env->callShortMethod(this$, mids$[mid_readShort_e963ff2cc414b347], a0);
        }

        void ByteBuffersDataInput::seek(jlong a0) const
        {
          env->callVoidMethod(this$, mids$[mid_seek_9c778c9bce6694df], a0);
        }

        jlong ByteBuffersDataInput::size() const
        {
          return env->callLongMethod(this$, mids$[mid_size_2e5ae9edcb9b072f]);
        }

        ByteBuffersDataInput ByteBuffersDataInput::slice(jlong a0, jlong a1) const
        {
          return ByteBuffersDataInput(env->callObjectMethod(this$, mids$[mid_slice_0b770bd4d9848e43], a0, a1));
        }

        ::java::lang::String ByteBuffersDataInput::toString() const
        {
          return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_db9b55ba01e03e4b]));
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace store {
        static PyObject *t_ByteBuffersDataInput_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_ByteBuffersDataInput_instance_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_ByteBuffersDataInput_position(t_ByteBuffersDataInput *self);
        static PyObject *t_ByteBuffersDataInput_ramBytesUsed(t_ByteBuffersDataInput *self);
        static PyObject *t_ByteBuffersDataInput_readByte(t_ByteBuffersDataInput *self, PyObject *args);
        static PyObject *t_ByteBuffersDataInput_readBytes(t_ByteBuffersDataInput *self, PyObject *args);
        static PyObject *t_ByteBuffersDataInput_readInt(t_ByteBuffersDataInput *self, PyObject *args);
        static PyObject *t_ByteBuffersDataInput_readLong(t_ByteBuffersDataInput *self, PyObject *args);
        static PyObject *t_ByteBuffersDataInput_readShort(t_ByteBuffersDataInput *self, PyObject *args);
        static PyObject *t_ByteBuffersDataInput_seek(t_ByteBuffersDataInput *self, PyObject *arg);
        static PyObject *t_ByteBuffersDataInput_size(t_ByteBuffersDataInput *self);
        static PyObject *t_ByteBuffersDataInput_slice(t_ByteBuffersDataInput *self, PyObject *args);
        static PyObject *t_ByteBuffersDataInput_toString(t_ByteBuffersDataInput *self, PyObject *args);

        static PyMethodDef t_ByteBuffersDataInput__methods_[] = {
          DECLARE_METHOD(t_ByteBuffersDataInput, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_ByteBuffersDataInput, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_ByteBuffersDataInput, position, METH_NOARGS),
          DECLARE_METHOD(t_ByteBuffersDataInput, ramBytesUsed, METH_NOARGS),
          DECLARE_METHOD(t_ByteBuffersDataInput, readByte, METH_VARARGS),
          DECLARE_METHOD(t_ByteBuffersDataInput, readBytes, METH_VARARGS),
          DECLARE_METHOD(t_ByteBuffersDataInput, readInt, METH_VARARGS),
          DECLARE_METHOD(t_ByteBuffersDataInput, readLong, METH_VARARGS),
          DECLARE_METHOD(t_ByteBuffersDataInput, readShort, METH_VARARGS),
          DECLARE_METHOD(t_ByteBuffersDataInput, seek, METH_O),
          DECLARE_METHOD(t_ByteBuffersDataInput, size, METH_NOARGS),
          DECLARE_METHOD(t_ByteBuffersDataInput, slice, METH_VARARGS),
          DECLARE_METHOD(t_ByteBuffersDataInput, toString, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        static PyType_Slot PY_TYPE_SLOTS(ByteBuffersDataInput)[] = {
          { Py_tp_methods, t_ByteBuffersDataInput__methods_ },
          { Py_tp_init, (void *) abstract_init },
          { 0, NULL }
        };

        static PyType_Def *PY_TYPE_BASES(ByteBuffersDataInput)[] = {
          &PY_TYPE_DEF(::org::apache::lucene::store::DataInput),
          NULL
        };

        DEFINE_TYPE(ByteBuffersDataInput, t_ByteBuffersDataInput, ByteBuffersDataInput);

        void t_ByteBuffersDataInput::install(PyObject *module)
        {
          installType(&PY_TYPE(ByteBuffersDataInput), &PY_TYPE_DEF(ByteBuffersDataInput), module, "ByteBuffersDataInput", 0);
        }

        void t_ByteBuffersDataInput::initialize(PyObject *module)
        {
          PyObject_SetAttrString((PyObject *) PY_TYPE(ByteBuffersDataInput), "class_", make_descriptor(ByteBuffersDataInput::initializeClass, 1));
          PyObject_SetAttrString((PyObject *) PY_TYPE(ByteBuffersDataInput), "wrapfn_", make_descriptor(t_ByteBuffersDataInput::wrap_jobject));
          PyObject_SetAttrString((PyObject *) PY_TYPE(ByteBuffersDataInput), "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_ByteBuffersDataInput_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, ByteBuffersDataInput::initializeClass, 1)))
            return NULL;
          return t_ByteBuffersDataInput::wrap_Object(ByteBuffersDataInput(((t_ByteBuffersDataInput *) arg)->object.this$));
        }
        static PyObject *t_ByteBuffersDataInput_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, ByteBuffersDataInput::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static PyObject *t_ByteBuffersDataInput_position(t_ByteBuffersDataInput *self)
        {
          jlong result;
          OBJ_CALL(result = self->object.position());
          return PyLong_FromLongLong((PY_LONG_LONG) result);
        }

        static PyObject *t_ByteBuffersDataInput_ramBytesUsed(t_ByteBuffersDataInput *self)
        {
          jlong result;
          OBJ_CALL(result = self->object.ramBytesUsed());
          return PyLong_FromLongLong((PY_LONG_LONG) result);
        }

        static PyObject *t_ByteBuffersDataInput_readByte(t_ByteBuffersDataInput *self, PyObject *args)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 0:
            {
              jbyte result;
              OBJ_CALL(result = self->object.readByte());
              return PyLong_FromLong((long) result);
            }
            break;
           case 1:
            {
              jlong a0;
              jbyte result;

              if (!parseArgs(args, "J", &a0))
              {
                OBJ_CALL(result = self->object.readByte(a0));
                return PyLong_FromLong((long) result);
              }
            }
          }

          return callSuper(PY_TYPE(ByteBuffersDataInput), (PyObject *) self, "readByte", args, 2);
        }

        static PyObject *t_ByteBuffersDataInput_readBytes(t_ByteBuffersDataInput *self, PyObject *args)
        {
          JArray< jbyte > a0((jobject) NULL);
          jint a1;
          jint a2;

          if (!parseArgs(args, "[BII", &a0, &a1, &a2))
          {
            OBJ_CALL(self->object.readBytes(a0, a1, a2));
            Py_RETURN_NONE;
          }

          return callSuper(PY_TYPE(ByteBuffersDataInput), (PyObject *) self, "readBytes", args, 2);
        }

        static PyObject *t_ByteBuffersDataInput_readInt(t_ByteBuffersDataInput *self, PyObject *args)
        {
          jlong a0;
          jint result;

          if (!parseArgs(args, "J", &a0))
          {
            OBJ_CALL(result = self->object.readInt(a0));
            return PyLong_FromLong((long) result);
          }

          return callSuper(PY_TYPE(ByteBuffersDataInput), (PyObject *) self, "readInt", args, 2);
        }

        static PyObject *t_ByteBuffersDataInput_readLong(t_ByteBuffersDataInput *self, PyObject *args)
        {
          jlong a0;
          jlong result;

          if (!parseArgs(args, "J", &a0))
          {
            OBJ_CALL(result = self->object.readLong(a0));
            return PyLong_FromLongLong((PY_LONG_LONG) result);
          }

          return callSuper(PY_TYPE(ByteBuffersDataInput), (PyObject *) self, "readLong", args, 2);
        }

        static PyObject *t_ByteBuffersDataInput_readShort(t_ByteBuffersDataInput *self, PyObject *args)
        {
          jlong a0;
          jshort result;

          if (!parseArgs(args, "J", &a0))
          {
            OBJ_CALL(result = self->object.readShort(a0));
            return PyLong_FromLong((long) result);
          }

          return callSuper(PY_TYPE(ByteBuffersDataInput), (PyObject *) self, "readShort", args, 2);
        }

        static PyObject *t_ByteBuffersDataInput_seek(t_ByteBuffersDataInput *self, PyObject *arg)
        {
          jlong a0;

          if (!parseArg(arg, "J", &a0))
          {
            OBJ_CALL(self->object.seek(a0));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "seek", arg);
          return NULL;
        }

        static PyObject *t_ByteBuffersDataInput_size(t_ByteBuffersDataInput *self)
        {
          jlong result;
          OBJ_CALL(result = self->object.size());
          return PyLong_FromLongLong((PY_LONG_LONG) result);
        }

        static PyObject *t_ByteBuffersDataInput_slice(t_ByteBuffersDataInput *self, PyObject *args)
        {
          jlong a0;
          jlong a1;
          ByteBuffersDataInput result((jobject) NULL);

          if (!parseArgs(args, "JJ", &a0, &a1))
          {
            OBJ_CALL(result = self->object.slice(a0, a1));
            return t_ByteBuffersDataInput::wrap_Object(result);
          }

          PyErr_SetArgsError((PyObject *) self, "slice", args);
          return NULL;
        }

        static PyObject *t_ByteBuffersDataInput_toString(t_ByteBuffersDataInput *self, PyObject *args)
        {
          ::java::lang::String result((jobject) NULL);

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.toString());
            return j2p(result);
          }

          return callSuper(PY_TYPE(ByteBuffersDataInput), (PyObject *) self, "toString", args, 2);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/pattern/PatternTokenizerFactory.h"
#include "org/apache/lucene/util/AttributeFactory.h"
#include "java/util/Map.h"
#include "java/lang/Class.h"
#include "java/lang/String.h"
#include "org/apache/lucene/analysis/pattern/PatternTokenizer.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace pattern {

          ::java::lang::Class *PatternTokenizerFactory::class$ = NULL;
          jmethodID *PatternTokenizerFactory::mids$ = NULL;
          bool PatternTokenizerFactory::live$ = false;
          ::java::lang::String *PatternTokenizerFactory::GROUP = NULL;
          ::java::lang::String *PatternTokenizerFactory::NAME = NULL;
          ::java::lang::String *PatternTokenizerFactory::PATTERN = NULL;

          jclass PatternTokenizerFactory::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/pattern/PatternTokenizerFactory");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_408bd889ee3beae5] = env->getMethodID(cls, "<init>", "(Ljava/util/Map;)V");
              mids$[mid_create_a38396ea782d9f85] = env->getMethodID(cls, "create", "(Lorg/apache/lucene/util/AttributeFactory;)Lorg/apache/lucene/analysis/pattern/PatternTokenizer;");

              class$ = new ::java::lang::Class(cls);
              cls = (jclass) class$->this$;

              GROUP = new ::java::lang::String(env->getStaticObjectField(cls, "GROUP", "Ljava/lang/String;"));
              NAME = new ::java::lang::String(env->getStaticObjectField(cls, "NAME", "Ljava/lang/String;"));
              PATTERN = new ::java::lang::String(env->getStaticObjectField(cls, "PATTERN", "Ljava/lang/String;"));
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          PatternTokenizerFactory::PatternTokenizerFactory(const ::java::util::Map & a0) : ::org::apache::lucene::analysis::util::TokenizerFactory(env->newObject(initializeClass, &mids$, mid_init$_408bd889ee3beae5, a0.this$)) {}

          ::org::apache::lucene::analysis::pattern::PatternTokenizer PatternTokenizerFactory::create(const ::org::apache::lucene::util::AttributeFactory & a0) const
          {
            return ::org::apache::lucene::analysis::pattern::PatternTokenizer(env->callObjectMethod(this$, mids$[mid_create_a38396ea782d9f85], a0.this$));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace pattern {
          static PyObject *t_PatternTokenizerFactory_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_PatternTokenizerFactory_instance_(PyTypeObject *type, PyObject *arg);
          static int t_PatternTokenizerFactory_init_(t_PatternTokenizerFactory *self, PyObject *args, PyObject *kwds);
          static PyObject *t_PatternTokenizerFactory_create(t_PatternTokenizerFactory *self, PyObject *args);

          static PyMethodDef t_PatternTokenizerFactory__methods_[] = {
            DECLARE_METHOD(t_PatternTokenizerFactory, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_PatternTokenizerFactory, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_PatternTokenizerFactory, create, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          static PyType_Slot PY_TYPE_SLOTS(PatternTokenizerFactory)[] = {
            { Py_tp_methods, t_PatternTokenizerFactory__methods_ },
            { Py_tp_init, (void *) t_PatternTokenizerFactory_init_ },
            { 0, NULL }
          };

          static PyType_Def *PY_TYPE_BASES(PatternTokenizerFactory)[] = {
            &PY_TYPE_DEF(::org::apache::lucene::analysis::util::TokenizerFactory),
            NULL
          };

          DEFINE_TYPE(PatternTokenizerFactory, t_PatternTokenizerFactory, PatternTokenizerFactory);

          void t_PatternTokenizerFactory::install(PyObject *module)
          {
            installType(&PY_TYPE(PatternTokenizerFactory), &PY_TYPE_DEF(PatternTokenizerFactory), module, "PatternTokenizerFactory", 0);
          }

          void t_PatternTokenizerFactory::initialize(PyObject *module)
          {
            PyObject_SetAttrString((PyObject *) PY_TYPE(PatternTokenizerFactory), "class_", make_descriptor(PatternTokenizerFactory::initializeClass, 1));
            PyObject_SetAttrString((PyObject *) PY_TYPE(PatternTokenizerFactory), "wrapfn_", make_descriptor(t_PatternTokenizerFactory::wrap_jobject));
            PyObject_SetAttrString((PyObject *) PY_TYPE(PatternTokenizerFactory), "boxfn_", make_descriptor(boxObject));
            env->getClass(PatternTokenizerFactory::initializeClass);
            PyObject_SetAttrString((PyObject *) PY_TYPE(PatternTokenizerFactory), "GROUP", make_descriptor(j2p(*PatternTokenizerFactory::GROUP)));
            PyObject_SetAttrString((PyObject *) PY_TYPE(PatternTokenizerFactory), "NAME", make_descriptor(j2p(*PatternTokenizerFactory::NAME)));
            PyObject_SetAttrString((PyObject *) PY_TYPE(PatternTokenizerFactory), "PATTERN", make_descriptor(j2p(*PatternTokenizerFactory::PATTERN)));
          }

          static PyObject *t_PatternTokenizerFactory_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, PatternTokenizerFactory::initializeClass, 1)))
              return NULL;
            return t_PatternTokenizerFactory::wrap_Object(PatternTokenizerFactory(((t_PatternTokenizerFactory *) arg)->object.this$));
          }
          static PyObject *t_PatternTokenizerFactory_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, PatternTokenizerFactory::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_PatternTokenizerFactory_init_(t_PatternTokenizerFactory *self, PyObject *args, PyObject *kwds)
          {
            ::java::util::Map a0((jobject) NULL);
            PyTypeObject **p0;
            PatternTokenizerFactory object((jobject) NULL);

            if (!parseArgs(args, "K", ::java::util::Map::initializeClass, &a0, &p0, ::java::util::t_Map::parameters_))
            {
              INT_CALL(object = PatternTokenizerFactory(a0));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_PatternTokenizerFactory_create(t_PatternTokenizerFactory *self, PyObject *args)
          {
            ::org::apache::lucene::util::AttributeFactory a0((jobject) NULL);
            ::org::apache::lucene::analysis::pattern::PatternTokenizer result((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::util::AttributeFactory::initializeClass, &a0))
            {
              OBJ_CALL(result = self->object.create(a0));
              return ::org::apache::lucene::analysis::pattern::t_PatternTokenizer::wrap_Object(result);
            }

            return callSuper(PY_TYPE(PatternTokenizerFactory), (PyObject *) self, "create", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/index/DocIDMerger.h"
#include "java/lang/Class.h"
#include "java/io/IOException.h"
#include "java/util/List.h"
#include "org/apache/lucene/index/DocIDMerger.h"
#include "org/apache/lucene/index/DocIDMerger$Sub.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {

        ::java::lang::Class *DocIDMerger::class$ = NULL;
        jmethodID *DocIDMerger::mids$ = NULL;
        bool DocIDMerger::live$ = false;

        jclass DocIDMerger::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/index/DocIDMerger");

            mids$ = new jmethodID[max_mid];
            mids$[mid_next_17d01572d36c839a] = env->getMethodID(cls, "next", "()Lorg/apache/lucene/index/DocIDMerger$Sub;");
            mids$[mid_of_3f719c74820527ae] = env->getStaticMethodID(cls, "of", "(Ljava/util/List;Z)Lorg/apache/lucene/index/DocIDMerger;");
            mids$[mid_of_32a73ee09f3f9c50] = env->getStaticMethodID(cls, "of", "(Ljava/util/List;IZ)Lorg/apache/lucene/index/DocIDMerger;");
            mids$[mid_reset_f2cc1bce94666404] = env->getMethodID(cls, "reset", "()V");

            class$ = new ::java::lang::Class(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        ::org::apache::lucene::index::DocIDMerger$Sub DocIDMerger::next() const
        {
          return ::org::apache::lucene::index::DocIDMerger$Sub(env->callObjectMethod(this$, mids$[mid_next_17d01572d36c839a]));
        }

        DocIDMerger DocIDMerger::of(const ::java::util::List & a0, jboolean a1)
        {
          jclass cls = env->getClass(initializeClass);
          return DocIDMerger(env->callStaticObjectMethod(cls, mids$[mid_of_3f719c74820527ae], a0.this$, a1));
        }

        DocIDMerger DocIDMerger::of(const ::java::util::List & a0, jint a1, jboolean a2)
        {
          jclass cls = env->getClass(initializeClass);
          return DocIDMerger(env->callStaticObjectMethod(cls, mids$[mid_of_32a73ee09f3f9c50], a0.this$, a1, a2));
        }

        void DocIDMerger::reset() const
        {
          env->callVoidMethod(this$, mids$[mid_reset_f2cc1bce94666404]);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {
        static PyObject *t_DocIDMerger_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_DocIDMerger_instance_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_DocIDMerger_of_(t_DocIDMerger *self, PyObject *args);
        static PyObject *t_DocIDMerger_next(t_DocIDMerger *self);
        static PyObject *t_DocIDMerger_of(PyTypeObject *type, PyObject *args);
        static PyObject *t_DocIDMerger_reset(t_DocIDMerger *self);
        static PyObject *t_DocIDMerger_get__parameters_(t_DocIDMerger *self, void *data);
        static PyGetSetDef t_DocIDMerger__fields_[] = {
          DECLARE_GET_FIELD(t_DocIDMerger, parameters_),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_DocIDMerger__methods_[] = {
          DECLARE_METHOD(t_DocIDMerger, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_DocIDMerger, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_DocIDMerger, of_, METH_VARARGS),
          DECLARE_METHOD(t_DocIDMerger, next, METH_NOARGS),
          DECLARE_METHOD(t_DocIDMerger, of, METH_VARARGS | METH_CLASS),
          DECLARE_METHOD(t_DocIDMerger, reset, METH_NOARGS),
          { NULL, NULL, 0, NULL }
        };

        static PyType_Slot PY_TYPE_SLOTS(DocIDMerger)[] = {
          { Py_tp_methods, t_DocIDMerger__methods_ },
          { Py_tp_init, (void *) abstract_init },
          { Py_tp_getset, t_DocIDMerger__fields_ },
          { Py_tp_iter, (void *) PyObject_SelfIter },
          { Py_tp_iternext, (void *) ((PyObject *(*)(t_DocIDMerger *)) get_generic_next< t_DocIDMerger,::org::apache::lucene::index::t_DocIDMerger$Sub,::org::apache::lucene::index::DocIDMerger$Sub >) },
          { 0, NULL }
        };

        static PyType_Def *PY_TYPE_BASES(DocIDMerger)[] = {
          &PY_TYPE_DEF(::java::lang::Object),
          NULL
        };

        DEFINE_TYPE(DocIDMerger, t_DocIDMerger, DocIDMerger);
        PyObject *t_DocIDMerger::wrap_Object(const DocIDMerger& object, PyTypeObject *p0)
        {
          PyObject *obj = t_DocIDMerger::wrap_Object(object);
          if (obj != NULL && obj != Py_None)
          {
            t_DocIDMerger *self = (t_DocIDMerger *) obj;
            self->parameters[0] = p0;
          }
          return obj;
        }

        PyObject *t_DocIDMerger::wrap_jobject(const jobject& object, PyTypeObject *p0)
        {
          PyObject *obj = t_DocIDMerger::wrap_jobject(object);
          if (obj != NULL && obj != Py_None)
          {
            t_DocIDMerger *self = (t_DocIDMerger *) obj;
            self->parameters[0] = p0;
          }
          return obj;
        }

        void t_DocIDMerger::install(PyObject *module)
        {
          installType(&PY_TYPE(DocIDMerger), &PY_TYPE_DEF(DocIDMerger), module, "DocIDMerger", 0);
          PyObject_SetAttrString((PyObject *) PY_TYPE(DocIDMerger), "Sub", make_descriptor(&PY_TYPE_DEF(DocIDMerger$Sub)));
        }

        void t_DocIDMerger::initialize(PyObject *module)
        {
          PyObject_SetAttrString((PyObject *) PY_TYPE(DocIDMerger), "class_", make_descriptor(DocIDMerger::initializeClass, 1));
          PyObject_SetAttrString((PyObject *) PY_TYPE(DocIDMerger), "wrapfn_", make_descriptor(t_DocIDMerger::wrap_jobject));
          PyObject_SetAttrString((PyObject *) PY_TYPE(DocIDMerger), "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_DocIDMerger_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, DocIDMerger::initializeClass, 1)))
            return NULL;
          return t_DocIDMerger::wrap_Object(DocIDMerger(((t_DocIDMerger *) arg)->object.this$));
        }
        static PyObject *t_DocIDMerger_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, DocIDMerger::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static PyObject *t_DocIDMerger_of_(t_DocIDMerger *self, PyObject *args)
        {
          if (!parseArg(args, "T", 1, &(self->parameters)))
            Py_RETURN_SELF;
          return PyErr_SetArgsError((PyObject *) self, "of_", args);
        }

        static PyObject *t_DocIDMerger_next(t_DocIDMerger *self)
        {
          ::org::apache::lucene::index::DocIDMerger$Sub result((jobject) NULL);
          OBJ_CALL(result = self->object.next());
          return self->parameters[0] != NULL ? wrapType(self->parameters[0], result.this$) : ::org::apache::lucene::index::t_DocIDMerger$Sub::wrap_Object(result);
        }

        static PyObject *t_DocIDMerger_of(PyTypeObject *type, PyObject *args)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 2:
            {
              ::java::util::List a0((jobject) NULL);
              PyTypeObject **p0;
              jboolean a1;
              DocIDMerger result((jobject) NULL);

              if (!parseArgs(args, "KZ", ::java::util::List::initializeClass, &a0, &p0, ::java::util::t_List::parameters_, &a1))
              {
                OBJ_CALL(result = ::org::apache::lucene::index::DocIDMerger::of(a0, a1));
                return t_DocIDMerger::wrap_Object(result);
              }
            }
            break;
           case 3:
            {
              ::java::util::List a0((jobject) NULL);
              PyTypeObject **p0;
              jint a1;
              jboolean a2;
              DocIDMerger result((jobject) NULL);

              if (!parseArgs(args, "KIZ", ::java::util::List::initializeClass, &a0, &p0, ::java::util::t_List::parameters_, &a1, &a2))
              {
                OBJ_CALL(result = ::org::apache::lucene::index::DocIDMerger::of(a0, a1, a2));
                return t_DocIDMerger::wrap_Object(result);
              }
            }
          }

          PyErr_SetArgsError(type, "of", args);
          return NULL;
        }

        static PyObject *t_DocIDMerger_reset(t_DocIDMerger *self)
        {
          OBJ_CALL(self->object.reset());
          Py_RETURN_NONE;
        }
        static PyObject *t_DocIDMerger_get__parameters_(t_DocIDMerger *self, void *data)
        {
          return typeParameters(self->parameters, sizeof(self->parameters));
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/MultiTermQuery$TopTermsBlendedFreqScoringRewrite.h"
#include "org/apache/lucene/search/BlendedTermQuery$Builder.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {

        ::java::lang::Class *MultiTermQuery$TopTermsBlendedFreqScoringRewrite::class$ = NULL;
        jmethodID *MultiTermQuery$TopTermsBlendedFreqScoringRewrite::mids$ = NULL;
        bool MultiTermQuery$TopTermsBlendedFreqScoringRewrite::live$ = false;

        jclass MultiTermQuery$TopTermsBlendedFreqScoringRewrite::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/search/MultiTermQuery$TopTermsBlendedFreqScoringRewrite");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_040c4cd0390c5aff] = env->getMethodID(cls, "<init>", "(I)V");
            mids$[mid_build_859d636a62fa4035] = env->getMethodID(cls, "build", "(Lorg/apache/lucene/search/BlendedTermQuery$Builder;)Lorg/apache/lucene/search/Query;");
            mids$[mid_addClause_e43adb8557864c19] = env->getMethodID(cls, "addClause", "(Lorg/apache/lucene/search/BlendedTermQuery$Builder;Lorg/apache/lucene/index/Term;IFLorg/apache/lucene/index/TermStates;)V");
            mids$[mid_getTopLevelBuilder_90fefd3f8cd70fab] = env->getMethodID(cls, "getTopLevelBuilder", "()Lorg/apache/lucene/search/BlendedTermQuery$Builder;");
            mids$[mid_getMaxSize_9972fcc56b44e79d] = env->getMethodID(cls, "getMaxSize", "()I");

            class$ = new ::java::lang::Class(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        MultiTermQuery$TopTermsBlendedFreqScoringRewrite::MultiTermQuery$TopTermsBlendedFreqScoringRewrite(jint a0) : ::org::apache::lucene::search::TopTermsRewrite(env->newObject(initializeClass, &mids$, mid_init$_040c4cd0390c5aff, a0)) {}
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        static PyObject *t_MultiTermQuery$TopTermsBlendedFreqScoringRewrite_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_MultiTermQuery$TopTermsBlendedFreqScoringRewrite_instance_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_MultiTermQuery$TopTermsBlendedFreqScoringRewrite_of_(t_MultiTermQuery$TopTermsBlendedFreqScoringRewrite *self, PyObject *args);
        static int t_MultiTermQuery$TopTermsBlendedFreqScoringRewrite_init_(t_MultiTermQuery$TopTermsBlendedFreqScoringRewrite *self, PyObject *args, PyObject *kwds);
        static PyObject *t_MultiTermQuery$TopTermsBlendedFreqScoringRewrite_get__parameters_(t_MultiTermQuery$TopTermsBlendedFreqScoringRewrite *self, void *data);
        static PyGetSetDef t_MultiTermQuery$TopTermsBlendedFreqScoringRewrite__fields_[] = {
          DECLARE_GET_FIELD(t_MultiTermQuery$TopTermsBlendedFreqScoringRewrite, parameters_),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_MultiTermQuery$TopTermsBlendedFreqScoringRewrite__methods_[] = {
          DECLARE_METHOD(t_MultiTermQuery$TopTermsBlendedFreqScoringRewrite, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_MultiTermQuery$TopTermsBlendedFreqScoringRewrite, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_MultiTermQuery$TopTermsBlendedFreqScoringRewrite, of_, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        static PyType_Slot PY_TYPE_SLOTS(MultiTermQuery$TopTermsBlendedFreqScoringRewrite)[] = {
          { Py_tp_methods, t_MultiTermQuery$TopTermsBlendedFreqScoringRewrite__methods_ },
          { Py_tp_init, (void *) t_MultiTermQuery$TopTermsBlendedFreqScoringRewrite_init_ },
          { Py_tp_getset, t_MultiTermQuery$TopTermsBlendedFreqScoringRewrite__fields_ },
          { 0, NULL }
        };

        static PyType_Def *PY_TYPE_BASES(MultiTermQuery$TopTermsBlendedFreqScoringRewrite)[] = {
          &PY_TYPE_DEF(::org::apache::lucene::search::TopTermsRewrite),
          NULL
        };

        DEFINE_TYPE(MultiTermQuery$TopTermsBlendedFreqScoringRewrite, t_MultiTermQuery$TopTermsBlendedFreqScoringRewrite, MultiTermQuery$TopTermsBlendedFreqScoringRewrite);
        PyObject *t_MultiTermQuery$TopTermsBlendedFreqScoringRewrite::wrap_Object(const MultiTermQuery$TopTermsBlendedFreqScoringRewrite& object, PyTypeObject *p0)
        {
          PyObject *obj = t_MultiTermQuery$TopTermsBlendedFreqScoringRewrite::wrap_Object(object);
          if (obj != NULL && obj != Py_None)
          {
            t_MultiTermQuery$TopTermsBlendedFreqScoringRewrite *self = (t_MultiTermQuery$TopTermsBlendedFreqScoringRewrite *) obj;
            self->parameters[0] = p0;
          }
          return obj;
        }

        PyObject *t_MultiTermQuery$TopTermsBlendedFreqScoringRewrite::wrap_jobject(const jobject& object, PyTypeObject *p0)
        {
          PyObject *obj = t_MultiTermQuery$TopTermsBlendedFreqScoringRewrite::wrap_jobject(object);
          if (obj != NULL && obj != Py_None)
          {
            t_MultiTermQuery$TopTermsBlendedFreqScoringRewrite *self = (t_MultiTermQuery$TopTermsBlendedFreqScoringRewrite *) obj;
            self->parameters[0] = p0;
          }
          return obj;
        }

        void t_MultiTermQuery$TopTermsBlendedFreqScoringRewrite::install(PyObject *module)
        {
          installType(&PY_TYPE(MultiTermQuery$TopTermsBlendedFreqScoringRewrite), &PY_TYPE_DEF(MultiTermQuery$TopTermsBlendedFreqScoringRewrite), module, "MultiTermQuery$TopTermsBlendedFreqScoringRewrite", 0);
        }

        void t_MultiTermQuery$TopTermsBlendedFreqScoringRewrite::initialize(PyObject *module)
        {
          PyObject_SetAttrString((PyObject *) PY_TYPE(MultiTermQuery$TopTermsBlendedFreqScoringRewrite), "class_", make_descriptor(MultiTermQuery$TopTermsBlendedFreqScoringRewrite::initializeClass, 1));
          PyObject_SetAttrString((PyObject *) PY_TYPE(MultiTermQuery$TopTermsBlendedFreqScoringRewrite), "wrapfn_", make_descriptor(t_MultiTermQuery$TopTermsBlendedFreqScoringRewrite::wrap_jobject));
          PyObject_SetAttrString((PyObject *) PY_TYPE(MultiTermQuery$TopTermsBlendedFreqScoringRewrite), "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_MultiTermQuery$TopTermsBlendedFreqScoringRewrite_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, MultiTermQuery$TopTermsBlendedFreqScoringRewrite::initializeClass, 1)))
            return NULL;
          return t_MultiTermQuery$TopTermsBlendedFreqScoringRewrite::wrap_Object(MultiTermQuery$TopTermsBlendedFreqScoringRewrite(((t_MultiTermQuery$TopTermsBlendedFreqScoringRewrite *) arg)->object.this$));
        }
        static PyObject *t_MultiTermQuery$TopTermsBlendedFreqScoringRewrite_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, MultiTermQuery$TopTermsBlendedFreqScoringRewrite::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static PyObject *t_MultiTermQuery$TopTermsBlendedFreqScoringRewrite_of_(t_MultiTermQuery$TopTermsBlendedFreqScoringRewrite *self, PyObject *args)
        {
          if (!parseArg(args, "T", 1, &(self->parameters)))
            Py_RETURN_SELF;
          return PyErr_SetArgsError((PyObject *) self, "of_", args);
        }

        static int t_MultiTermQuery$TopTermsBlendedFreqScoringRewrite_init_(t_MultiTermQuery$TopTermsBlendedFreqScoringRewrite *self, PyObject *args, PyObject *kwds)
        {
          jint a0;
          MultiTermQuery$TopTermsBlendedFreqScoringRewrite object((jobject) NULL);

          if (!parseArgs(args, "I", &a0))
          {
            INT_CALL(object = MultiTermQuery$TopTermsBlendedFreqScoringRewrite(a0));
            self->object = object;
            self->parameters[0] = ::org::apache::lucene::search::PY_TYPE(BlendedTermQuery$Builder);
          }
          else
          {
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }
        static PyObject *t_MultiTermQuery$TopTermsBlendedFreqScoringRewrite_get__parameters_(t_MultiTermQuery$TopTermsBlendedFreqScoringRewrite *self, void *data)
        {
          return typeParameters(self->parameters, sizeof(self->parameters));
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/join/BlockJoinSelector.h"
#include "org/apache/lucene/util/Bits.h"
#include "org/apache/lucene/index/SortedNumericDocValues.h"
#include "org/apache/lucene/search/join/BlockJoinSelector$Type.h"
#include "org/apache/lucene/index/SortedSetDocValues.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/index/NumericDocValues.h"
#include "org/apache/lucene/search/DocIdSetIterator.h"
#include "org/apache/lucene/index/SortedDocValues.h"
#include "org/apache/lucene/util/BitSet.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace join {

          ::java::lang::Class *BlockJoinSelector::class$ = NULL;
          jmethodID *BlockJoinSelector::mids$ = NULL;
          bool BlockJoinSelector::live$ = false;

          jclass BlockJoinSelector::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/search/join/BlockJoinSelector");

              mids$ = new jmethodID[max_mid];
              mids$[mid_wrap_80a84ea23f5b643b] = env->getStaticMethodID(cls, "wrap", "(Lorg/apache/lucene/util/Bits;Lorg/apache/lucene/util/BitSet;Lorg/apache/lucene/util/BitSet;)Lorg/apache/lucene/util/Bits;");
              mids$[mid_wrap_97ceeea0bdfbad65] = env->getStaticMethodID(cls, "wrap", "(Lorg/apache/lucene/index/SortedDocValues;Lorg/apache/lucene/search/join/BlockJoinSelector$Type;Lorg/apache/lucene/util/BitSet;Lorg/apache/lucene/search/DocIdSetIterator;)Lorg/apache/lucene/index/SortedDocValues;");
              mids$[mid_wrap_e31706942d80a284] = env->getStaticMethodID(cls, "wrap", "(Lorg/apache/lucene/index/SortedDocValues;Lorg/apache/lucene/search/join/BlockJoinSelector$Type;Lorg/apache/lucene/util/BitSet;Lorg/apache/lucene/util/BitSet;)Lorg/apache/lucene/index/SortedDocValues;");
              mids$[mid_wrap_10af5e7cc2f8875f] = env->getStaticMethodID(cls, "wrap", "(Lorg/apache/lucene/index/NumericDocValues;Lorg/apache/lucene/search/join/BlockJoinSelector$Type;Lorg/apache/lucene/util/BitSet;Lorg/apache/lucene/search/DocIdSetIterator;)Lorg/apache/lucene/index/NumericDocValues;");
              mids$[mid_wrap_e62f33900bcfd49a] = env->getStaticMethodID(cls, "wrap", "(Lorg/apache/lucene/index/NumericDocValues;Lorg/apache/lucene/search/join/BlockJoinSelector$Type;Lorg/apache/lucene/util/BitSet;Lorg/apache/lucene/util/BitSet;)Lorg/apache/lucene/index/NumericDocValues;");
              mids$[mid_wrap_cf248e9965d7ec7e] = env->getStaticMethodID(cls, "wrap", "(Lorg/apache/lucene/index/SortedNumericDocValues;Lorg/apache/lucene/search/join/BlockJoinSelector$Type;Lorg/apache/lucene/util/BitSet;Lorg/apache/lucene/search/DocIdSetIterator;)Lorg/apache/lucene/index/NumericDocValues;");
              mids$[mid_wrap_8e746cb12ec50299] = env->getStaticMethodID(cls, "wrap", "(Lorg/apache/lucene/index/SortedSetDocValues;Lorg/apache/lucene/search/join/BlockJoinSelector$Type;Lorg/apache/lucene/util/BitSet;Lorg/apache/lucene/search/DocIdSetIterator;)Lorg/apache/lucene/index/SortedDocValues;");
              mids$[mid_wrap_2e36d38c7309b376] = env->getStaticMethodID(cls, "wrap", "(Lorg/apache/lucene/index/SortedNumericDocValues;Lorg/apache/lucene/search/join/BlockJoinSelector$Type;Lorg/apache/lucene/util/BitSet;Lorg/apache/lucene/util/BitSet;)Lorg/apache/lucene/index/NumericDocValues;");
              mids$[mid_wrap_727a56c301cfc5ad] = env->getStaticMethodID(cls, "wrap", "(Lorg/apache/lucene/index/SortedSetDocValues;Lorg/apache/lucene/search/join/BlockJoinSelector$Type;Lorg/apache/lucene/util/BitSet;Lorg/apache/lucene/util/BitSet;)Lorg/apache/lucene/index/SortedDocValues;");
              mids$[mid_toIter_77bd3be32b4acc21] = env->getStaticMethodID(cls, "toIter", "(Lorg/apache/lucene/util/BitSet;)Lorg/apache/lucene/util/BitSetIterator;");

              class$ = new ::java::lang::Class(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          ::org::apache::lucene::util::Bits BlockJoinSelector::wrap(const ::org::apache::lucene::util::Bits & a0, const ::org::apache::lucene::util::BitSet & a1, const ::org::apache::lucene::util::BitSet & a2)
          {
            jclass cls = env->getClass(initializeClass);
            return ::org::apache::lucene::util::Bits(env->callStaticObjectMethod(cls, mids$[mid_wrap_80a84ea23f5b643b], a0.this$, a1.this$, a2.this$));
          }

          ::org::apache::lucene::index::SortedDocValues BlockJoinSelector::wrap(const ::org::apache::lucene::index::SortedDocValues & a0, const ::org::apache::lucene::search::join::BlockJoinSelector$Type & a1, const ::org::apache::lucene::util::BitSet & a2, const ::org::apache::lucene::search::DocIdSetIterator & a3)
          {
            jclass cls = env->getClass(initializeClass);
            return ::org::apache::lucene::index::SortedDocValues(env->callStaticObjectMethod(cls, mids$[mid_wrap_97ceeea0bdfbad65], a0.this$, a1.this$, a2.this$, a3.this$));
          }

          ::org::apache::lucene::index::SortedDocValues BlockJoinSelector::wrap(const ::org::apache::lucene::index::SortedDocValues & a0, const ::org::apache::lucene::search::join::BlockJoinSelector$Type & a1, const ::org::apache::lucene::util::BitSet & a2, const ::org::apache::lucene::util::BitSet & a3)
          {
            jclass cls = env->getClass(initializeClass);
            return ::org::apache::lucene::index::SortedDocValues(env->callStaticObjectMethod(cls, mids$[mid_wrap_e31706942d80a284], a0.this$, a1.this$, a2.this$, a3.this$));
          }

          ::org::apache::lucene::index::NumericDocValues BlockJoinSelector::wrap(const ::org::apache::lucene::index::NumericDocValues & a0, const ::org::apache::lucene::search::join::BlockJoinSelector$Type & a1, const ::org::apache::lucene::util::BitSet & a2, const ::org::apache::lucene::search::DocIdSetIterator & a3)
          {
            jclass cls = env->getClass(initializeClass);
            return ::org::apache::lucene::index::NumericDocValues(env->callStaticObjectMethod(cls, mids$[mid_wrap_10af5e7cc2f8875f], a0.this$, a1.this$, a2.this$, a3.this$));
          }

          ::org::apache::lucene::index::NumericDocValues BlockJoinSelector::wrap(const ::org::apache::lucene::index::NumericDocValues & a0, const ::org::apache::lucene::search::join::BlockJoinSelector$Type & a1, const ::org::apache::lucene::util::BitSet & a2, const ::org::apache::lucene::util::BitSet & a3)
          {
            jclass cls = env->getClass(initializeClass);
            return ::org::apache::lucene::index::NumericDocValues(env->callStaticObjectMethod(cls, mids$[mid_wrap_e62f33900bcfd49a], a0.this$, a1.this$, a2.this$, a3.this$));
          }

          ::org::apache::lucene::index::NumericDocValues BlockJoinSelector::wrap(const ::org::apache::lucene::index::SortedNumericDocValues & a0, const ::org::apache::lucene::search::join::BlockJoinSelector$Type & a1, const ::org::apache::lucene::util::BitSet & a2, const ::org::apache::lucene::search::DocIdSetIterator & a3)
          {
            jclass cls = env->getClass(initializeClass);
            return ::org::apache::lucene::index::NumericDocValues(env->callStaticObjectMethod(cls, mids$[mid_wrap_cf248e9965d7ec7e], a0.this$, a1.this$, a2.this$, a3.this$));
          }

          ::org::apache::lucene::index::SortedDocValues BlockJoinSelector::wrap(const ::org::apache::lucene::index::SortedSetDocValues & a0, const ::org::apache::lucene::search::join::BlockJoinSelector$Type & a1, const ::org::apache::lucene::util::BitSet & a2, const ::org::apache::lucene::search::DocIdSetIterator & a3)
          {
            jclass cls = env->getClass(initializeClass);
            return ::org::apache::lucene::index::SortedDocValues(env->callStaticObjectMethod(cls, mids$[mid_wrap_8e746cb12ec50299], a0.this$, a1.this$, a2.this$, a3.this$));
          }

          ::org::apache::lucene::index::NumericDocValues BlockJoinSelector::wrap(const ::org::apache::lucene::index::SortedNumericDocValues & a0, const ::org::apache::lucene::search::join::BlockJoinSelector$Type & a1, const ::org::apache::lucene::util::BitSet & a2, const ::org::apache::lucene::util::BitSet & a3)
          {
            jclass cls = env->getClass(initializeClass);
            return ::org::apache::lucene::index::NumericDocValues(env->callStaticObjectMethod(cls, mids$[mid_wrap_2e36d38c7309b376], a0.this$, a1.this$, a2.this$, a3.this$));
          }

          ::org::apache::lucene::index::SortedDocValues BlockJoinSelector::wrap(const ::org::apache::lucene::index::SortedSetDocValues & a0, const ::org::apache::lucene::search::join::BlockJoinSelector$Type & a1, const ::org::apache::lucene::util::BitSet & a2, const ::org::apache::lucene::util::BitSet & a3)
          {
            jclass cls = env->getClass(initializeClass);
            return ::org::apache::lucene::index::SortedDocValues(env->callStaticObjectMethod(cls, mids$[mid_wrap_727a56c301cfc5ad], a0.this$, a1.this$, a2.this$, a3.this$));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace join {
          static PyObject *t_BlockJoinSelector_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_BlockJoinSelector_instance_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_BlockJoinSelector_wrap(PyTypeObject *type, PyObject *args);

          static PyMethodDef t_BlockJoinSelector__methods_[] = {
            DECLARE_METHOD(t_BlockJoinSelector, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_BlockJoinSelector, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_BlockJoinSelector, wrap, METH_VARARGS | METH_CLASS),
            { NULL, NULL, 0, NULL }
          };

          static PyType_Slot PY_TYPE_SLOTS(BlockJoinSelector)[] = {
            { Py_tp_methods, t_BlockJoinSelector__methods_ },
            { Py_tp_init, (void *) abstract_init },
            { 0, NULL }
          };

          static PyType_Def *PY_TYPE_BASES(BlockJoinSelector)[] = {
            &PY_TYPE_DEF(::java::lang::Object),
            NULL
          };

          DEFINE_TYPE(BlockJoinSelector, t_BlockJoinSelector, BlockJoinSelector);

          void t_BlockJoinSelector::install(PyObject *module)
          {
            installType(&PY_TYPE(BlockJoinSelector), &PY_TYPE_DEF(BlockJoinSelector), module, "BlockJoinSelector", 0);
            PyObject_SetAttrString((PyObject *) PY_TYPE(BlockJoinSelector), "Type", make_descriptor(&PY_TYPE_DEF(BlockJoinSelector$Type)));
          }

          void t_BlockJoinSelector::initialize(PyObject *module)
          {
            PyObject_SetAttrString((PyObject *) PY_TYPE(BlockJoinSelector), "class_", make_descriptor(BlockJoinSelector::initializeClass, 1));
            PyObject_SetAttrString((PyObject *) PY_TYPE(BlockJoinSelector), "wrapfn_", make_descriptor(t_BlockJoinSelector::wrap_jobject));
            PyObject_SetAttrString((PyObject *) PY_TYPE(BlockJoinSelector), "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_BlockJoinSelector_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, BlockJoinSelector::initializeClass, 1)))
              return NULL;
            return t_BlockJoinSelector::wrap_Object(BlockJoinSelector(((t_BlockJoinSelector *) arg)->object.this$));
          }
          static PyObject *t_BlockJoinSelector_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, BlockJoinSelector::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static PyObject *t_BlockJoinSelector_wrap(PyTypeObject *type, PyObject *args)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 3:
              {
                ::org::apache::lucene::util::Bits a0((jobject) NULL);
                ::org::apache::lucene::util::BitSet a1((jobject) NULL);
                ::org::apache::lucene::util::BitSet a2((jobject) NULL);
                ::org::apache::lucene::util::Bits result((jobject) NULL);

                if (!parseArgs(args, "kkk", ::org::apache::lucene::util::Bits::initializeClass, ::org::apache::lucene::util::BitSet::initializeClass, ::org::apache::lucene::util::BitSet::initializeClass, &a0, &a1, &a2))
                {
                  OBJ_CALL(result = ::org::apache::lucene::search::join::BlockJoinSelector::wrap(a0, a1, a2));
                  return ::org::apache::lucene::util::t_Bits::wrap_Object(result);
                }
              }
              break;
             case 4:
              {
                ::org::apache::lucene::index::SortedDocValues a0((jobject) NULL);
                ::org::apache::lucene::search::join::BlockJoinSelector$Type a1((jobject) NULL);
                PyTypeObject **p1;
                ::org::apache::lucene::util::BitSet a2((jobject) NULL);
                ::org::apache::lucene::search::DocIdSetIterator a3((jobject) NULL);
                ::org::apache::lucene::index::SortedDocValues result((jobject) NULL);

                if (!parseArgs(args, "kKkk", ::org::apache::lucene::index::SortedDocValues::initializeClass, ::org::apache::lucene::search::join::BlockJoinSelector$Type::initializeClass, ::org::apache::lucene::util::BitSet::initializeClass, ::org::apache::lucene::search::DocIdSetIterator::initializeClass, &a0, &a1, &p1, ::org::apache::lucene::search::join::t_BlockJoinSelector$Type::parameters_, &a2, &a3))
                {
                  OBJ_CALL(result = ::org::apache::lucene::search::join::BlockJoinSelector::wrap(a0, a1, a2, a3));
                  return ::org::apache::lucene::index::t_SortedDocValues::wrap_Object(result);
                }
              }
              {
                ::org::apache::lucene::index::SortedDocValues a0((jobject) NULL);
                ::org::apache::lucene::search::join::BlockJoinSelector$Type a1((jobject) NULL);
                PyTypeObject **p1;
                ::org::apache::lucene::util::BitSet a2((jobject) NULL);
                ::org::apache::lucene::util::BitSet a3((jobject) NULL);
                ::org::apache::lucene::index::SortedDocValues result((jobject) NULL);

                if (!parseArgs(args, "kKkk", ::org::apache::lucene::index::SortedDocValues::initializeClass, ::org::apache::lucene::search::join::BlockJoinSelector$Type::initializeClass, ::org::apache::lucene::util::BitSet::initializeClass, ::org::apache::lucene::util::BitSet::initializeClass, &a0, &a1, &p1, ::org::apache::lucene::search::join::t_BlockJoinSelector$Type::parameters_, &a2, &a3))
                {
                  OBJ_CALL(result = ::org::apache::lucene::search::join::BlockJoinSelector::wrap(a0, a1, a2, a3));
                  return ::org::apache::lucene::index::t_SortedDocValues::wrap_Object(result);
                }
              }
              {
                ::org::apache::lucene::index::NumericDocValues a0((jobject) NULL);
                ::org::apache::lucene::search::join::BlockJoinSelector$Type a1((jobject) NULL);
                PyTypeObject **p1;
                ::org::apache::lucene::util::BitSet a2((jobject) NULL);
                ::org::apache::lucene::search::DocIdSetIterator a3((jobject) NULL);
                ::org::apache::lucene::index::NumericDocValues result((jobject) NULL);

                if (!parseArgs(args, "kKkk", ::org::apache::lucene::index::NumericDocValues::initializeClass, ::org::apache::lucene::search::join::BlockJoinSelector$Type::initializeClass, ::org::apache::lucene::util::BitSet::initializeClass, ::org::apache::lucene::search::DocIdSetIterator::initializeClass, &a0, &a1, &p1, ::org::apache::lucene::search::join::t_BlockJoinSelector$Type::parameters_, &a2, &a3))
                {
                  OBJ_CALL(result = ::org::apache::lucene::search::join::BlockJoinSelector::wrap(a0, a1, a2, a3));
                  return ::org::apache::lucene::index::t_NumericDocValues::wrap_Object(result);
                }
              }
              {
                ::org::apache::lucene::index::SortedNumericDocValues a0((jobject) NULL);
                ::org::apache::lucene::search::join::BlockJoinSelector$Type a1((jobject) NULL);
                PyTypeObject **p1;
                ::org::apache::lucene::util::BitSet a2((jobject) NULL);
                ::org::apache::lucene::search::DocIdSetIterator a3((jobject) NULL);
                ::org::apache::lucene::index::NumericDocValues result((jobject) NULL);

                if (!parseArgs(args, "kKkk", ::org::apache::lucene::index::SortedNumericDocValues::initializeClass, ::org::apache::lucene::search::join::BlockJoinSelector$Type::initializeClass, ::org::apache::lucene::util::BitSet::initializeClass, ::org::apache::lucene::search::DocIdSetIterator::initializeClass, &a0, &a1, &p1, ::org::apache::lucene::search::join::t_BlockJoinSelector$Type::parameters_, &a2, &a3))
                {
                  OBJ_CALL(result = ::org::apache::lucene::search::join::BlockJoinSelector::wrap(a0, a1, a2, a3));
                  return ::org::apache::lucene::index::t_NumericDocValues::wrap_Object(result);
                }
              }
              {
                ::org::apache::lucene::index::SortedNumericDocValues a0((jobject) NULL);
                ::org::apache::lucene::search::join::BlockJoinSelector$Type a1((jobject) NULL);
                PyTypeObject **p1;
                ::org::apache::lucene::util::BitSet a2((jobject) NULL);
                ::org::apache::lucene::util::BitSet a3((jobject) NULL);
                ::org::apache::lucene::index::NumericDocValues result((jobject) NULL);

                if (!parseArgs(args, "kKkk", ::org::apache::lucene::index::SortedNumericDocValues::initializeClass, ::org::apache::lucene::search::join::BlockJoinSelector$Type::initializeClass, ::org::apache::lucene::util::BitSet::initializeClass, ::org::apache::lucene::util::BitSet::initializeClass, &a0, &a1, &p1, ::org::apache::lucene::search::join::t_BlockJoinSelector$Type::parameters_, &a2, &a3))
                {
                  OBJ_CALL(result = ::org::apache::lucene::search::join::BlockJoinSelector::wrap(a0, a1, a2, a3));
                  return ::org::apache::lucene::index::t_NumericDocValues::wrap_Object(result);
                }
              }
              {
                ::org::apache::lucene::index::SortedSetDocValues a0((jobject) NULL);
                ::org::apache::lucene::search::join::BlockJoinSelector$Type a1((jobject) NULL);
                PyTypeObject **p1;
                ::org::apache::lucene::util::BitSet a2((jobject) NULL);
                ::org::apache::lucene::search::DocIdSetIterator a3((jobject) NULL);
                ::org::apache::lucene::index::SortedDocValues result((jobject) NULL);

                if (!parseArgs(args, "kKkk", ::org::apache::lucene::index::SortedSetDocValues::initializeClass, ::org::apache::lucene::search::join::BlockJoinSelector$Type::initializeClass, ::org::apache::lucene::util::BitSet::initializeClass, ::org::apache::lucene::search::DocIdSetIterator::initializeClass, &a0, &a1, &p1, ::org::apache::lucene::search::join::t_BlockJoinSelector$Type::parameters_, &a2, &a3))
                {
                  OBJ_CALL(result = ::org::apache::lucene::search::join::BlockJoinSelector::wrap(a0, a1, a2, a3));
                  return ::org::apache::lucene::index::t_SortedDocValues::wrap_Object(result);
                }
              }
              {
                ::org::apache::lucene::index::NumericDocValues a0((jobject) NULL);
                ::org::apache::lucene::search::join::BlockJoinSelector$Type a1((jobject) NULL);
                PyTypeObject **p1;
                ::org::apache::lucene::util::BitSet a2((jobject) NULL);
                ::org::apache::lucene::util::BitSet a3((jobject) NULL);
                ::org::apache::lucene::index::NumericDocValues result((jobject) NULL);

                if (!parseArgs(args, "kKkk", ::org::apache::lucene::index::NumericDocValues::initializeClass, ::org::apache::lucene::search::join::BlockJoinSelector$Type::initializeClass, ::org::apache::lucene::util::BitSet::initializeClass, ::org::apache::lucene::util::BitSet::initializeClass, &a0, &a1, &p1, ::org::apache::lucene::search::join::t_BlockJoinSelector$Type::parameters_, &a2, &a3))
                {
                  OBJ_CALL(result = ::org::apache::lucene::search::join::BlockJoinSelector::wrap(a0, a1, a2, a3));
                  return ::org::apache::lucene::index::t_NumericDocValues::wrap_Object(result);
                }
              }
              {
                ::org::apache::lucene::index::SortedSetDocValues a0((jobject) NULL);
                ::org::apache::lucene::search::join::BlockJoinSelector$Type a1((jobject) NULL);
                PyTypeObject **p1;
                ::org::apache::lucene::util::BitSet a2((jobject) NULL);
                ::org::apache::lucene::util::BitSet a3((jobject) NULL);
                ::org::apache::lucene::index::SortedDocValues result((jobject) NULL);

                if (!parseArgs(args, "kKkk", ::org::apache::lucene::index::SortedSetDocValues::initializeClass, ::org::apache::lucene::search::join::BlockJoinSelector$Type::initializeClass, ::org::apache::lucene::util::BitSet::initializeClass, ::org::apache::lucene::util::BitSet::initializeClass, &a0, &a1, &p1, ::org::apache::lucene::search::join::t_BlockJoinSelector$Type::parameters_, &a2, &a3))
                {
                  OBJ_CALL(result = ::org::apache::lucene::search::join::BlockJoinSelector::wrap(a0, a1, a2, a3));
                  return ::org::apache::lucene::index::t_SortedDocValues::wrap_Object(result);
                }
              }
            }

            PyErr_SetArgsError(type, "wrap", args);
            return NULL;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/pt/PortugueseMinimalStemFilterFactory.h"
#include "java/util/Map.h"
#include "java/lang/String.h"
#include "org/apache/lucene/analysis/TokenStream.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace pt {

          ::java::lang::Class *PortugueseMinimalStemFilterFactory::class$ = NULL;
          jmethodID *PortugueseMinimalStemFilterFactory::mids$ = NULL;
          bool PortugueseMinimalStemFilterFactory::live$ = false;
          ::java::lang::String *PortugueseMinimalStemFilterFactory::NAME = NULL;

          jclass PortugueseMinimalStemFilterFactory::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/pt/PortugueseMinimalStemFilterFactory");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_408bd889ee3beae5] = env->getMethodID(cls, "<init>", "(Ljava/util/Map;)V");
              mids$[mid_create_6de1e28d9d10cd9e] = env->getMethodID(cls, "create", "(Lorg/apache/lucene/analysis/TokenStream;)Lorg/apache/lucene/analysis/TokenStream;");

              class$ = new ::java::lang::Class(cls);
              cls = (jclass) class$->this$;

              NAME = new ::java::lang::String(env->getStaticObjectField(cls, "NAME", "Ljava/lang/String;"));
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          PortugueseMinimalStemFilterFactory::PortugueseMinimalStemFilterFactory(const ::java::util::Map & a0) : ::org::apache::lucene::analysis::util::TokenFilterFactory(env->newObject(initializeClass, &mids$, mid_init$_408bd889ee3beae5, a0.this$)) {}

          ::org::apache::lucene::analysis::TokenStream PortugueseMinimalStemFilterFactory::create(const ::org::apache::lucene::analysis::TokenStream & a0) const
          {
            return ::org::apache::lucene::analysis::TokenStream(env->callObjectMethod(this$, mids$[mid_create_6de1e28d9d10cd9e], a0.this$));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace pt {
          static PyObject *t_PortugueseMinimalStemFilterFactory_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_PortugueseMinimalStemFilterFactory_instance_(PyTypeObject *type, PyObject *arg);
          static int t_PortugueseMinimalStemFilterFactory_init_(t_PortugueseMinimalStemFilterFactory *self, PyObject *args, PyObject *kwds);
          static PyObject *t_PortugueseMinimalStemFilterFactory_create(t_PortugueseMinimalStemFilterFactory *self, PyObject *args);

          static PyMethodDef t_PortugueseMinimalStemFilterFactory__methods_[] = {
            DECLARE_METHOD(t_PortugueseMinimalStemFilterFactory, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_PortugueseMinimalStemFilterFactory, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_PortugueseMinimalStemFilterFactory, create, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          static PyType_Slot PY_TYPE_SLOTS(PortugueseMinimalStemFilterFactory)[] = {
            { Py_tp_methods, t_PortugueseMinimalStemFilterFactory__methods_ },
            { Py_tp_init, (void *) t_PortugueseMinimalStemFilterFactory_init_ },
            { 0, NULL }
          };

          static PyType_Def *PY_TYPE_BASES(PortugueseMinimalStemFilterFactory)[] = {
            &PY_TYPE_DEF(::org::apache::lucene::analysis::util::TokenFilterFactory),
            NULL
          };

          DEFINE_TYPE(PortugueseMinimalStemFilterFactory, t_PortugueseMinimalStemFilterFactory, PortugueseMinimalStemFilterFactory);

          void t_PortugueseMinimalStemFilterFactory::install(PyObject *module)
          {
            installType(&PY_TYPE(PortugueseMinimalStemFilterFactory), &PY_TYPE_DEF(PortugueseMinimalStemFilterFactory), module, "PortugueseMinimalStemFilterFactory", 0);
          }

          void t_PortugueseMinimalStemFilterFactory::initialize(PyObject *module)
          {
            PyObject_SetAttrString((PyObject *) PY_TYPE(PortugueseMinimalStemFilterFactory), "class_", make_descriptor(PortugueseMinimalStemFilterFactory::initializeClass, 1));
            PyObject_SetAttrString((PyObject *) PY_TYPE(PortugueseMinimalStemFilterFactory), "wrapfn_", make_descriptor(t_PortugueseMinimalStemFilterFactory::wrap_jobject));
            PyObject_SetAttrString((PyObject *) PY_TYPE(PortugueseMinimalStemFilterFactory), "boxfn_", make_descriptor(boxObject));
            env->getClass(PortugueseMinimalStemFilterFactory::initializeClass);
            PyObject_SetAttrString((PyObject *) PY_TYPE(PortugueseMinimalStemFilterFactory), "NAME", make_descriptor(j2p(*PortugueseMinimalStemFilterFactory::NAME)));
          }

          static PyObject *t_PortugueseMinimalStemFilterFactory_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, PortugueseMinimalStemFilterFactory::initializeClass, 1)))
              return NULL;
            return t_PortugueseMinimalStemFilterFactory::wrap_Object(PortugueseMinimalStemFilterFactory(((t_PortugueseMinimalStemFilterFactory *) arg)->object.this$));
          }
          static PyObject *t_PortugueseMinimalStemFilterFactory_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, PortugueseMinimalStemFilterFactory::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_PortugueseMinimalStemFilterFactory_init_(t_PortugueseMinimalStemFilterFactory *self, PyObject *args, PyObject *kwds)
          {
            ::java::util::Map a0((jobject) NULL);
            PyTypeObject **p0;
            PortugueseMinimalStemFilterFactory object((jobject) NULL);

            if (!parseArgs(args, "K", ::java::util::Map::initializeClass, &a0, &p0, ::java::util::t_Map::parameters_))
            {
              INT_CALL(object = PortugueseMinimalStemFilterFactory(a0));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_PortugueseMinimalStemFilterFactory_create(t_PortugueseMinimalStemFilterFactory *self, PyObject *args)
          {
            ::org::apache::lucene::analysis::TokenStream a0((jobject) NULL);
            ::org::apache::lucene::analysis::TokenStream result((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::analysis::TokenStream::initializeClass, &a0))
            {
              OBJ_CALL(result = self->object.create(a0));
              return ::org::apache::lucene::analysis::t_TokenStream::wrap_Object(result);
            }

            return callSuper(PY_TYPE(PortugueseMinimalStemFilterFactory), (PyObject *) self, "create", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/SortRescorer.h"
#include "org/apache/lucene/search/IndexSearcher.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/search/Sort.h"
#include "org/apache/lucene/search/Explanation.h"
#include "org/apache/lucene/search/TopDocs.h"
#include "java/io/IOException.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {

        ::java::lang::Class *SortRescorer::class$ = NULL;
        jmethodID *SortRescorer::mids$ = NULL;
        bool SortRescorer::live$ = false;

        jclass SortRescorer::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/search/SortRescorer");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_ce1258575690f7d5] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/search/Sort;)V");
            mids$[mid_explain_57f4be869b47d9c5] = env->getMethodID(cls, "explain", "(Lorg/apache/lucene/search/IndexSearcher;Lorg/apache/lucene/search/Explanation;I)Lorg/apache/lucene/search/Explanation;");
            mids$[mid_rescore_41c4bd8204dbae81] = env->getMethodID(cls, "rescore", "(Lorg/apache/lucene/search/IndexSearcher;Lorg/apache/lucene/search/TopDocs;I)Lorg/apache/lucene/search/TopDocs;");

            class$ = new ::java::lang::Class(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        SortRescorer::SortRescorer(const ::org::apache::lucene::search::Sort & a0) : ::org::apache::lucene::search::Rescorer(env->newObject(initializeClass, &mids$, mid_init$_ce1258575690f7d5, a0.this$)) {}

        ::org::apache::lucene::search::Explanation SortRescorer::explain(const ::org::apache::lucene::search::IndexSearcher & a0, const ::org::apache::lucene::search::Explanation & a1, jint a2) const
        {
          return ::org::apache::lucene::search::Explanation(env->callObjectMethod(this$, mids$[mid_explain_57f4be869b47d9c5], a0.this$, a1.this$, a2));
        }

        ::org::apache::lucene::search::TopDocs SortRescorer::rescore(const ::org::apache::lucene::search::IndexSearcher & a0, const ::org::apache::lucene::search::TopDocs & a1, jint a2) const
        {
          return ::org::apache::lucene::search::TopDocs(env->callObjectMethod(this$, mids$[mid_rescore_41c4bd8204dbae81], a0.this$, a1.this$, a2));
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        static PyObject *t_SortRescorer_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_SortRescorer_instance_(PyTypeObject *type, PyObject *arg);
        static int t_SortRescorer_init_(t_SortRescorer *self, PyObject *args, PyObject *kwds);
        static PyObject *t_SortRescorer_explain(t_SortRescorer *self, PyObject *args);
        static PyObject *t_SortRescorer_rescore(t_SortRescorer *self, PyObject *args);

        static PyMethodDef t_SortRescorer__methods_[] = {
          DECLARE_METHOD(t_SortRescorer, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_SortRescorer, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_SortRescorer, explain, METH_VARARGS),
          DECLARE_METHOD(t_SortRescorer, rescore, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        static PyType_Slot PY_TYPE_SLOTS(SortRescorer)[] = {
          { Py_tp_methods, t_SortRescorer__methods_ },
          { Py_tp_init, (void *) t_SortRescorer_init_ },
          { 0, NULL }
        };

        static PyType_Def *PY_TYPE_BASES(SortRescorer)[] = {
          &PY_TYPE_DEF(::org::apache::lucene::search::Rescorer),
          NULL
        };

        DEFINE_TYPE(SortRescorer, t_SortRescorer, SortRescorer);

        void t_SortRescorer::install(PyObject *module)
        {
          installType(&PY_TYPE(SortRescorer), &PY_TYPE_DEF(SortRescorer), module, "SortRescorer", 0);
        }

        void t_SortRescorer::initialize(PyObject *module)
        {
          PyObject_SetAttrString((PyObject *) PY_TYPE(SortRescorer), "class_", make_descriptor(SortRescorer::initializeClass, 1));
          PyObject_SetAttrString((PyObject *) PY_TYPE(SortRescorer), "wrapfn_", make_descriptor(t_SortRescorer::wrap_jobject));
          PyObject_SetAttrString((PyObject *) PY_TYPE(SortRescorer), "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_SortRescorer_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, SortRescorer::initializeClass, 1)))
            return NULL;
          return t_SortRescorer::wrap_Object(SortRescorer(((t_SortRescorer *) arg)->object.this$));
        }
        static PyObject *t_SortRescorer_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, SortRescorer::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_SortRescorer_init_(t_SortRescorer *self, PyObject *args, PyObject *kwds)
        {
          ::org::apache::lucene::search::Sort a0((jobject) NULL);
          SortRescorer object((jobject) NULL);

          if (!parseArgs(args, "k", ::org::apache::lucene::search::Sort::initializeClass, &a0))
          {
            INT_CALL(object = SortRescorer(a0));
            self->object = object;
          }
          else
          {
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }

        static PyObject *t_SortRescorer_explain(t_SortRescorer *self, PyObject *args)
        {
          ::org::apache::lucene::search::IndexSearcher a0((jobject) NULL);
          ::org::apache::lucene::search::Explanation a1((jobject) NULL);
          jint a2;
          ::org::apache::lucene::search::Explanation result((jobject) NULL);

          if (!parseArgs(args, "kkI", ::org::apache::lucene::search::IndexSearcher::initializeClass, ::org::apache::lucene::search::Explanation::initializeClass, &a0, &a1, &a2))
          {
            OBJ_CALL(result = self->object.explain(a0, a1, a2));
            return ::org::apache::lucene::search::t_Explanation::wrap_Object(result);
          }

          return callSuper(PY_TYPE(SortRescorer), (PyObject *) self, "explain", args, 2);
        }

        static PyObject *t_SortRescorer_rescore(t_SortRescorer *self, PyObject *args)
        {
          ::org::apache::lucene::search::IndexSearcher a0((jobject) NULL);
          ::org::apache::lucene::search::TopDocs a1((jobject) NULL);
          jint a2;
          ::org::apache::lucene::search::TopDocs result((jobject) NULL);

          if (!parseArgs(args, "kkI", ::org::apache::lucene::search::IndexSearcher::initializeClass, ::org::apache::lucene::search::TopDocs::initializeClass, &a0, &a1, &a2))
          {
            OBJ_CALL(result = self->object.rescore(a0, a1, a2));
            return ::org::apache::lucene::search::t_TopDocs::wrap_Object(result);
          }

          return callSuper(PY_TYPE(SortRescorer), (PyObject *) self, "rescore", args, 2);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/index/MultiPassIndexSplitter.h"
#include "org/apache/lucene/index/IndexReader.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/store/Directory.h"
#include "java/lang/String.h"
#include "java/lang/Exception.h"
#include "java/io/IOException.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {

        ::java::lang::Class *MultiPassIndexSplitter::class$ = NULL;
        jmethodID *MultiPassIndexSplitter::mids$ = NULL;
        bool MultiPassIndexSplitter::live$ = false;

        jclass MultiPassIndexSplitter::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/index/MultiPassIndexSplitter");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_f2cc1bce94666404] = env->getMethodID(cls, "<init>", "()V");
            mids$[mid_main_2fc318b999a7aba3] = env->getStaticMethodID(cls, "main", "([Ljava/lang/String;)V");
            mids$[mid_split_be06c44450d8ace9] = env->getMethodID(cls, "split", "(Lorg/apache/lucene/index/IndexReader;[Lorg/apache/lucene/store/Directory;Z)V");

            class$ = new ::java::lang::Class(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        MultiPassIndexSplitter::MultiPassIndexSplitter() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_f2cc1bce94666404)) {}

        void MultiPassIndexSplitter::main(const JArray< ::java::lang::String > & a0)
        {
          jclass cls = env->getClass(initializeClass);
          env->callStaticVoidMethod(cls, mids$[mid_main_2fc318b999a7aba3], a0.this$);
        }

        void MultiPassIndexSplitter::split(const ::org::apache::lucene::index::IndexReader & a0, const JArray< ::org::apache::lucene::store::Directory > & a1, jboolean a2) const
        {
          env->callVoidMethod(this$, mids$[mid_split_be06c44450d8ace9], a0.this$, a1.this$, a2);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {
        static PyObject *t_MultiPassIndexSplitter_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_MultiPassIndexSplitter_instance_(PyTypeObject *type, PyObject *arg);
        static int t_MultiPassIndexSplitter_init_(t_MultiPassIndexSplitter *self, PyObject *args, PyObject *kwds);
        static PyObject *t_MultiPassIndexSplitter_main(PyTypeObject *type, PyObject *arg);
        static PyObject *t_MultiPassIndexSplitter_split(t_MultiPassIndexSplitter *self, PyObject *args);

        static PyMethodDef t_MultiPassIndexSplitter__methods_[] = {
          DECLARE_METHOD(t_MultiPassIndexSplitter, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_MultiPassIndexSplitter, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_MultiPassIndexSplitter, main, METH_O | METH_CLASS),
          DECLARE_METHOD(t_MultiPassIndexSplitter, split, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        static PyType_Slot PY_TYPE_SLOTS(MultiPassIndexSplitter)[] = {
          { Py_tp_methods, t_MultiPassIndexSplitter__methods_ },
          { Py_tp_init, (void *) t_MultiPassIndexSplitter_init_ },
          { 0, NULL }
        };

        static PyType_Def *PY_TYPE_BASES(MultiPassIndexSplitter)[] = {
          &PY_TYPE_DEF(::java::lang::Object),
          NULL
        };

        DEFINE_TYPE(MultiPassIndexSplitter, t_MultiPassIndexSplitter, MultiPassIndexSplitter);

        void t_MultiPassIndexSplitter::install(PyObject *module)
        {
          installType(&PY_TYPE(MultiPassIndexSplitter), &PY_TYPE_DEF(MultiPassIndexSplitter), module, "MultiPassIndexSplitter", 0);
        }

        void t_MultiPassIndexSplitter::initialize(PyObject *module)
        {
          PyObject_SetAttrString((PyObject *) PY_TYPE(MultiPassIndexSplitter), "class_", make_descriptor(MultiPassIndexSplitter::initializeClass, 1));
          PyObject_SetAttrString((PyObject *) PY_TYPE(MultiPassIndexSplitter), "wrapfn_", make_descriptor(t_MultiPassIndexSplitter::wrap_jobject));
          PyObject_SetAttrString((PyObject *) PY_TYPE(MultiPassIndexSplitter), "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_MultiPassIndexSplitter_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, MultiPassIndexSplitter::initializeClass, 1)))
            return NULL;
          return t_MultiPassIndexSplitter::wrap_Object(MultiPassIndexSplitter(((t_MultiPassIndexSplitter *) arg)->object.this$));
        }
        static PyObject *t_MultiPassIndexSplitter_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, MultiPassIndexSplitter::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_MultiPassIndexSplitter_init_(t_MultiPassIndexSplitter *self, PyObject *args, PyObject *kwds)
        {
          MultiPassIndexSplitter object((jobject) NULL);

          INT_CALL(object = MultiPassIndexSplitter());
          self->object = object;

          return 0;
        }

        static PyObject *t_MultiPassIndexSplitter_main(PyTypeObject *type, PyObject *arg)
        {
          JArray< ::java::lang::String > a0((jobject) NULL);

          if (!parseArg(arg, "[s", &a0))
          {
            OBJ_CALL(::org::apache::lucene::index::MultiPassIndexSplitter::main(a0));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError(type, "main", arg);
          return NULL;
        }

        static PyObject *t_MultiPassIndexSplitter_split(t_MultiPassIndexSplitter *self, PyObject *args)
        {
          ::org::apache::lucene::index::IndexReader a0((jobject) NULL);
          JArray< ::org::apache::lucene::store::Directory > a1((jobject) NULL);
          jboolean a2;

          if (!parseArgs(args, "k[kZ", ::org::apache::lucene::index::IndexReader::initializeClass, ::org::apache::lucene::store::Directory::initializeClass, &a0, &a1, &a2))
          {
            OBJ_CALL(self->object.split(a0, a1, a2));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "split", args);
          return NULL;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/tartarus/snowball/Among.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace tartarus {
    namespace snowball {

      ::java::lang::Class *Among::class$ = NULL;
      jmethodID *Among::mids$ = NULL;
      bool Among::live$ = false;

      jclass Among::initializeClass(bool getOnly)
      {
        if (getOnly)
          return (jclass) (live$ ? class$->this$ : NULL);
        if (class$ == NULL)
        {
          jclass cls = (jclass) env->findClass("org/tartarus/snowball/Among");

          class$ = new ::java::lang::Class(cls);
          live$ = true;
        }
        return (jclass) class$->this$;
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace tartarus {
    namespace snowball {
      static PyObject *t_Among_cast_(PyTypeObject *type, PyObject *arg);
      static PyObject *t_Among_instance_(PyTypeObject *type, PyObject *arg);

      static PyMethodDef t_Among__methods_[] = {
        DECLARE_METHOD(t_Among, cast_, METH_O | METH_CLASS),
        DECLARE_METHOD(t_Among, instance_, METH_O | METH_CLASS),
        { NULL, NULL, 0, NULL }
      };

      static PyType_Slot PY_TYPE_SLOTS(Among)[] = {
        { Py_tp_methods, t_Among__methods_ },
        { Py_tp_init, (void *) abstract_init },
        { 0, NULL }
      };

      static PyType_Def *PY_TYPE_BASES(Among)[] = {
        &PY_TYPE_DEF(::java::lang::Object),
        NULL
      };

      DEFINE_TYPE(Among, t_Among, Among);

      void t_Among::install(PyObject *module)
      {
        installType(&PY_TYPE(Among), &PY_TYPE_DEF(Among), module, "Among", 0);
      }

      void t_Among::initialize(PyObject *module)
      {
        PyObject_SetAttrString((PyObject *) PY_TYPE(Among), "class_", make_descriptor(Among::initializeClass, 1));
        PyObject_SetAttrString((PyObject *) PY_TYPE(Among), "wrapfn_", make_descriptor(t_Among::wrap_jobject));
        PyObject_SetAttrString((PyObject *) PY_TYPE(Among), "boxfn_", make_descriptor(boxObject));
      }

      static PyObject *t_Among_cast_(PyTypeObject *type, PyObject *arg)
      {
        if (!(arg = castCheck(arg, Among::initializeClass, 1)))
          return NULL;
        return t_Among::wrap_Object(Among(((t_Among *) arg)->object.this$));
      }
      static PyObject *t_Among_instance_(PyTypeObject *type, PyObject *arg)
      {
        if (!castCheck(arg, Among::initializeClass, 0))
          Py_RETURN_FALSE;
        Py_RETURN_TRUE;
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/pattern/PatternTypingFilterFactory.h"
#include "java/util/Map.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/analysis/TokenStream.h"
#include "org/apache/lucene/analysis/util/ResourceLoader.h"
#include "java/lang/String.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/analysis/util/ResourceLoaderAware.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace pattern {

          ::java::lang::Class *PatternTypingFilterFactory::class$ = NULL;
          jmethodID *PatternTypingFilterFactory::mids$ = NULL;
          bool PatternTypingFilterFactory::live$ = false;
          ::java::lang::String *PatternTypingFilterFactory::NAME = NULL;

          jclass PatternTypingFilterFactory::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/pattern/PatternTypingFilterFactory");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_408bd889ee3beae5] = env->getMethodID(cls, "<init>", "(Ljava/util/Map;)V");
              mids$[mid_create_6de1e28d9d10cd9e] = env->getMethodID(cls, "create", "(Lorg/apache/lucene/analysis/TokenStream;)Lorg/apache/lucene/analysis/TokenStream;");
              mids$[mid_inform_b4ee53c41a5f629f] = env->getMethodID(cls, "inform", "(Lorg/apache/lucene/analysis/util/ResourceLoader;)V");

              class$ = new ::java::lang::Class(cls);
              cls = (jclass) class$->this$;

              NAME = new ::java::lang::String(env->getStaticObjectField(cls, "NAME", "Ljava/lang/String;"));
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          PatternTypingFilterFactory::PatternTypingFilterFactory(const ::java::util::Map & a0) : ::org::apache::lucene::analysis::util::TokenFilterFactory(env->newObject(initializeClass, &mids$, mid_init$_408bd889ee3beae5, a0.this$)) {}

          ::org::apache::lucene::analysis::TokenStream PatternTypingFilterFactory::create(const ::org::apache::lucene::analysis::TokenStream & a0) const
          {
            return ::org::apache::lucene::analysis::TokenStream(env->callObjectMethod(this$, mids$[mid_create_6de1e28d9d10cd9e], a0.this$));
          }

          void PatternTypingFilterFactory::inform(const ::org::apache::lucene::analysis::util::ResourceLoader & a0) const
          {
            env->callVoidMethod(this$, mids$[mid_inform_b4ee53c41a5f629f], a0.this$);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace pattern {
          static PyObject *t_PatternTypingFilterFactory_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_PatternTypingFilterFactory_instance_(PyTypeObject *type, PyObject *arg);
          static int t_PatternTypingFilterFactory_init_(t_PatternTypingFilterFactory *self, PyObject *args, PyObject *kwds);
          static PyObject *t_PatternTypingFilterFactory_create(t_PatternTypingFilterFactory *self, PyObject *args);
          static PyObject *t_PatternTypingFilterFactory_inform(t_PatternTypingFilterFactory *self, PyObject *arg);

          static PyMethodDef t_PatternTypingFilterFactory__methods_[] = {
            DECLARE_METHOD(t_PatternTypingFilterFactory, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_PatternTypingFilterFactory, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_PatternTypingFilterFactory, create, METH_VARARGS),
            DECLARE_METHOD(t_PatternTypingFilterFactory, inform, METH_O),
            { NULL, NULL, 0, NULL }
          };

          static PyType_Slot PY_TYPE_SLOTS(PatternTypingFilterFactory)[] = {
            { Py_tp_methods, t_PatternTypingFilterFactory__methods_ },
            { Py_tp_init, (void *) t_PatternTypingFilterFactory_init_ },
            { 0, NULL }
          };

          static PyType_Def *PY_TYPE_BASES(PatternTypingFilterFactory)[] = {
            &PY_TYPE_DEF(::org::apache::lucene::analysis::util::TokenFilterFactory),
            NULL
          };

          DEFINE_TYPE(PatternTypingFilterFactory, t_PatternTypingFilterFactory, PatternTypingFilterFactory);

          void t_PatternTypingFilterFactory::install(PyObject *module)
          {
            installType(&PY_TYPE(PatternTypingFilterFactory), &PY_TYPE_DEF(PatternTypingFilterFactory), module, "PatternTypingFilterFactory", 0);
          }

          void t_PatternTypingFilterFactory::initialize(PyObject *module)
          {
            PyObject_SetAttrString((PyObject *) PY_TYPE(PatternTypingFilterFactory), "class_", make_descriptor(PatternTypingFilterFactory::initializeClass, 1));
            PyObject_SetAttrString((PyObject *) PY_TYPE(PatternTypingFilterFactory), "wrapfn_", make_descriptor(t_PatternTypingFilterFactory::wrap_jobject));
            PyObject_SetAttrString((PyObject *) PY_TYPE(PatternTypingFilterFactory), "boxfn_", make_descriptor(boxObject));
            env->getClass(PatternTypingFilterFactory::initializeClass);
            PyObject_SetAttrString((PyObject *) PY_TYPE(PatternTypingFilterFactory), "NAME", make_descriptor(j2p(*PatternTypingFilterFactory::NAME)));
          }

          static PyObject *t_PatternTypingFilterFactory_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, PatternTypingFilterFactory::initializeClass, 1)))
              return NULL;
            return t_PatternTypingFilterFactory::wrap_Object(PatternTypingFilterFactory(((t_PatternTypingFilterFactory *) arg)->object.this$));
          }
          static PyObject *t_PatternTypingFilterFactory_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, PatternTypingFilterFactory::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_PatternTypingFilterFactory_init_(t_PatternTypingFilterFactory *self, PyObject *args, PyObject *kwds)
          {
            ::java::util::Map a0((jobject) NULL);
            PyTypeObject **p0;
            PatternTypingFilterFactory object((jobject) NULL);

            if (!parseArgs(args, "K", ::java::util::Map::initializeClass, &a0, &p0, ::java::util::t_Map::parameters_))
            {
              INT_CALL(object = PatternTypingFilterFactory(a0));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_PatternTypingFilterFactory_create(t_PatternTypingFilterFactory *self, PyObject *args)
          {
            ::org::apache::lucene::analysis::TokenStream a0((jobject) NULL);
            ::org::apache::lucene::analysis::TokenStream result((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::analysis::TokenStream::initializeClass, &a0))
            {
              OBJ_CALL(result = self->object.create(a0));
              return ::org::apache::lucene::analysis::t_TokenStream::wrap_Object(result);
            }

            return callSuper(PY_TYPE(PatternTypingFilterFactory), (PyObject *) self, "create", args, 2);
          }

          static PyObject *t_PatternTypingFilterFactory_inform(t_PatternTypingFilterFactory *self, PyObject *arg)
          {
            ::org::apache::lucene::analysis::util::ResourceLoader a0((jobject) NULL);

            if (!parseArg(arg, "k", ::org::apache::lucene::analysis::util::ResourceLoader::initializeClass, &a0))
            {
              OBJ_CALL(self->object.inform(a0));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError((PyObject *) self, "inform", arg);
            return NULL;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/codecs/TermStats.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace codecs {

        ::java::lang::Class *TermStats::class$ = NULL;
        jmethodID *TermStats::mids$ = NULL;
        jfieldID *TermStats::fids$ = NULL;
        bool TermStats::live$ = false;

        jclass TermStats::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/codecs/TermStats");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_7b2f5b9ddfcb9416] = env->getMethodID(cls, "<init>", "(IJ)V");

            fids$ = new jfieldID[max_fid];
            fids$[fid_docFreq] = env->getFieldID(cls, "docFreq", "I");
            fids$[fid_totalTermFreq] = env->getFieldID(cls, "totalTermFreq", "J");

            class$ = new ::java::lang::Class(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        TermStats::TermStats(jint a0, jlong a1) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_7b2f5b9ddfcb9416, a0, a1)) {}

        jint TermStats::_get_docFreq() const
        {
          return env->getIntField(this$, fids$[fid_docFreq]);
        }

        jlong TermStats::_get_totalTermFreq() const
        {
          return env->getLongField(this$, fids$[fid_totalTermFreq]);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace codecs {
        static PyObject *t_TermStats_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_TermStats_instance_(PyTypeObject *type, PyObject *arg);
        static int t_TermStats_init_(t_TermStats *self, PyObject *args, PyObject *kwds);
        static PyObject *t_TermStats_get__docFreq(t_TermStats *self, void *data);
        static PyObject *t_TermStats_get__totalTermFreq(t_TermStats *self, void *data);

        static PyGetSetDef t_TermStats__fields_[] = {
          DECLARE_GET_FIELD(t_TermStats, docFreq),
          DECLARE_GET_FIELD(t_TermStats, totalTermFreq),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_TermStats__methods_[] = {
          DECLARE_METHOD(t_TermStats, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_TermStats, instance_, METH_O | METH_CLASS),
          { NULL, NULL, 0, NULL }
        };

        static PyType_Slot PY_TYPE_SLOTS(TermStats)[] = {
          { Py_tp_methods, t_TermStats__methods_ },
          { Py_tp_init, (void *) t_TermStats_init_ },
          { Py_tp_getset, t_TermStats__fields_ },
          { 0, NULL }
        };

        static PyType_Def *PY_TYPE_BASES(TermStats)[] = {
          &PY_TYPE_DEF(::java::lang::Object),
          NULL
        };

        DEFINE_TYPE(TermStats, t_TermStats, TermStats);

        void t_TermStats::install(PyObject *module)
        {
          installType(&PY_TYPE(TermStats), &PY_TYPE_DEF(TermStats), module, "TermStats", 0);
        }

        void t_TermStats::initialize(PyObject *module)
        {
          PyObject_SetAttrString((PyObject *) PY_TYPE(TermStats), "class_", make_descriptor(TermStats::initializeClass, 1));
          PyObject_SetAttrString((PyObject *) PY_TYPE(TermStats), "wrapfn_", make_descriptor(t_TermStats::wrap_jobject));
          PyObject_SetAttrString((PyObject *) PY_TYPE(TermStats), "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_TermStats_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, TermStats::initializeClass, 1)))
            return NULL;
          return t_TermStats::wrap_Object(TermStats(((t_TermStats *) arg)->object.this$));
        }
        static PyObject *t_TermStats_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, TermStats::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_TermStats_init_(t_TermStats *self, PyObject *args, PyObject *kwds)
        {
          jint a0;
          jlong a1;
          TermStats object((jobject) NULL);

          if (!parseArgs(args, "IJ", &a0, &a1))
          {
            INT_CALL(object = TermStats(a0, a1));
            self->object = object;
          }
          else
          {
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }

        static PyObject *t_TermStats_get__docFreq(t_TermStats *self, void *data)
        {
          jint value;
          OBJ_CALL(value = self->object._get_docFreq());
          return PyLong_FromLong((long) value);
        }

        static PyObject *t_TermStats_get__totalTermFreq(t_TermStats *self, void *data)
        {
          jlong value;
          OBJ_CALL(value = self->object._get_totalTermFreq());
          return PyLong_FromLongLong((PY_LONG_LONG) value);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/spans/SpanFirstQuery.h"
#include "java/lang/String.h"
#include "org/apache/lucene/search/spans/SpanQuery.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace spans {

          ::java::lang::Class *SpanFirstQuery::class$ = NULL;
          jmethodID *SpanFirstQuery::mids$ = NULL;
          bool SpanFirstQuery::live$ = false;

          jclass SpanFirstQuery::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/search/spans/SpanFirstQuery");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_2435e8f872de61fa] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/search/spans/SpanQuery;I)V");
              mids$[mid_toString_9bfa75c9f141b67f] = env->getMethodID(cls, "toString", "(Ljava/lang/String;)Ljava/lang/String;");
              mids$[mid_acceptPosition_ab707424c19ac906] = env->getMethodID(cls, "acceptPosition", "(Lorg/apache/lucene/search/spans/Spans;)Lorg/apache/lucene/search/spans/FilterSpans$AcceptStatus;");

              class$ = new ::java::lang::Class(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          SpanFirstQuery::SpanFirstQuery(const ::org::apache::lucene::search::spans::SpanQuery & a0, jint a1) : ::org::apache::lucene::search::spans::SpanPositionRangeQuery(env->newObject(initializeClass, &mids$, mid_init$_2435e8f872de61fa, a0.this$, a1)) {}

          ::java::lang::String SpanFirstQuery::toString(const ::java::lang::String & a0) const
          {
            return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_9bfa75c9f141b67f], a0.this$));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace spans {
          static PyObject *t_SpanFirstQuery_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_SpanFirstQuery_instance_(PyTypeObject *type, PyObject *arg);
          static int t_SpanFirstQuery_init_(t_SpanFirstQuery *self, PyObject *args, PyObject *kwds);
          static PyObject *t_SpanFirstQuery_toString(t_SpanFirstQuery *self, PyObject *args);

          static PyMethodDef t_SpanFirstQuery__methods_[] = {
            DECLARE_METHOD(t_SpanFirstQuery, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_SpanFirstQuery, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_SpanFirstQuery, toString, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          static PyType_Slot PY_TYPE_SLOTS(SpanFirstQuery)[] = {
            { Py_tp_methods, t_SpanFirstQuery__methods_ },
            { Py_tp_init, (void *) t_SpanFirstQuery_init_ },
            { 0, NULL }
          };

          static PyType_Def *PY_TYPE_BASES(SpanFirstQuery)[] = {
            &PY_TYPE_DEF(::org::apache::lucene::search::spans::SpanPositionRangeQuery),
            NULL
          };

          DEFINE_TYPE(SpanFirstQuery, t_SpanFirstQuery, SpanFirstQuery);

          void t_SpanFirstQuery::install(PyObject *module)
          {
            installType(&PY_TYPE(SpanFirstQuery), &PY_TYPE_DEF(SpanFirstQuery), module, "SpanFirstQuery", 0);
          }

          void t_SpanFirstQuery::initialize(PyObject *module)
          {
            PyObject_SetAttrString((PyObject *) PY_TYPE(SpanFirstQuery), "class_", make_descriptor(SpanFirstQuery::initializeClass, 1));
            PyObject_SetAttrString((PyObject *) PY_TYPE(SpanFirstQuery), "wrapfn_", make_descriptor(t_SpanFirstQuery::wrap_jobject));
            PyObject_SetAttrString((PyObject *) PY_TYPE(SpanFirstQuery), "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_SpanFirstQuery_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, SpanFirstQuery::initializeClass, 1)))
              return NULL;
            return t_SpanFirstQuery::wrap_Object(SpanFirstQuery(((t_SpanFirstQuery *) arg)->object.this$));
          }
          static PyObject *t_SpanFirstQuery_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, SpanFirstQuery::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_SpanFirstQuery_init_(t_SpanFirstQuery *self, PyObject *args, PyObject *kwds)
          {
            ::org::apache::lucene::search::spans::SpanQuery a0((jobject) NULL);
            jint a1;
            SpanFirstQuery object((jobject) NULL);

            if (!parseArgs(args, "kI", ::org::apache::lucene::search::spans::SpanQuery::initializeClass, &a0, &a1))
            {
              INT_CALL(object = SpanFirstQuery(a0, a1));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_SpanFirstQuery_toString(t_SpanFirstQuery *self, PyObject *args)
          {
            ::java::lang::String a0((jobject) NULL);
            ::java::lang::String result((jobject) NULL);

            if (!parseArgs(args, "s", &a0))
            {
              OBJ_CALL(result = self->object.toString(a0));
              return j2p(result);
            }

            return callSuper(PY_TYPE(SpanFirstQuery), (PyObject *) self, "toString", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/index/CheckIndex$Status$PointsStatus.h"
#include "java/lang/Throwable.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {

        ::java::lang::Class *CheckIndex$Status$PointsStatus::class$ = NULL;
        jmethodID *CheckIndex$Status$PointsStatus::mids$ = NULL;
        jfieldID *CheckIndex$Status$PointsStatus::fids$ = NULL;
        bool CheckIndex$Status$PointsStatus::live$ = false;

        jclass CheckIndex$Status$PointsStatus::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/index/CheckIndex$Status$PointsStatus");

            fids$ = new jfieldID[max_fid];
            fids$[fid_error] = env->getFieldID(cls, "error", "Ljava/lang/Throwable;");
            fids$[fid_totalValueFields] = env->getFieldID(cls, "totalValueFields", "I");
            fids$[fid_totalValuePoints] = env->getFieldID(cls, "totalValuePoints", "J");

            class$ = new ::java::lang::Class(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        ::java::lang::Throwable CheckIndex$Status$PointsStatus::_get_error() const
        {
          return ::java::lang::Throwable(env->getObjectField(this$, fids$[fid_error]));
        }

        void CheckIndex$Status$PointsStatus::_set_error(const ::java::lang::Throwable & a0) const
        {
          env->setObjectField(this$, fids$[fid_error], a0.this$);
        }

        jint CheckIndex$Status$PointsStatus::_get_totalValueFields() const
        {
          return env->getIntField(this$, fids$[fid_totalValueFields]);
        }

        void CheckIndex$Status$PointsStatus::_set_totalValueFields(jint a0) const
        {
          env->setIntField(this$, fids$[fid_totalValueFields], a0);
        }

        jlong CheckIndex$Status$PointsStatus::_get_totalValuePoints() const
        {
          return env->getLongField(this$, fids$[fid_totalValuePoints]);
        }

        void CheckIndex$Status$PointsStatus::_set_totalValuePoints(jlong a0) const
        {
          env->setLongField(this$, fids$[fid_totalValuePoints], a0);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {
        static PyObject *t_CheckIndex$Status$PointsStatus_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_CheckIndex$Status$PointsStatus_instance_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_CheckIndex$Status$PointsStatus_get__error(t_CheckIndex$Status$PointsStatus *self, void *data);
        static int t_CheckIndex$Status$PointsStatus_set__error(t_CheckIndex$Status$PointsStatus *self, PyObject *arg, void *data);
        static PyObject *t_CheckIndex$Status$PointsStatus_get__totalValueFields(t_CheckIndex$Status$PointsStatus *self, void *data);
        static int t_CheckIndex$Status$PointsStatus_set__totalValueFields(t_CheckIndex$Status$PointsStatus *self, PyObject *arg, void *data);
        static PyObject *t_CheckIndex$Status$PointsStatus_get__totalValuePoints(t_CheckIndex$Status$PointsStatus *self, void *data);
        static int t_CheckIndex$Status$PointsStatus_set__totalValuePoints(t_CheckIndex$Status$PointsStatus *self, PyObject *arg, void *data);

        static PyGetSetDef t_CheckIndex$Status$PointsStatus__fields_[] = {
          DECLARE_GETSET_FIELD(t_CheckIndex$Status$PointsStatus, error),
          DECLARE_GETSET_FIELD(t_CheckIndex$Status$PointsStatus, totalValueFields),
          DECLARE_GETSET_FIELD(t_CheckIndex$Status$PointsStatus, totalValuePoints),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_CheckIndex$Status$PointsStatus__methods_[] = {
          DECLARE_METHOD(t_CheckIndex$Status$PointsStatus, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_CheckIndex$Status$PointsStatus, instance_, METH_O | METH_CLASS),
          { NULL, NULL, 0, NULL }
        };

        static PyType_Slot PY_TYPE_SLOTS(CheckIndex$Status$PointsStatus)[] = {
          { Py_tp_methods, t_CheckIndex$Status$PointsStatus__methods_ },
          { Py_tp_init, (void *) abstract_init },
          { Py_tp_getset, t_CheckIndex$Status$PointsStatus__fields_ },
          { 0, NULL }
        };

        static PyType_Def *PY_TYPE_BASES(CheckIndex$Status$PointsStatus)[] = {
          &PY_TYPE_DEF(::java::lang::Object),
          NULL
        };

        DEFINE_TYPE(CheckIndex$Status$PointsStatus, t_CheckIndex$Status$PointsStatus, CheckIndex$Status$PointsStatus);

        void t_CheckIndex$Status$PointsStatus::install(PyObject *module)
        {
          installType(&PY_TYPE(CheckIndex$Status$PointsStatus), &PY_TYPE_DEF(CheckIndex$Status$PointsStatus), module, "CheckIndex$Status$PointsStatus", 0);
        }

        void t_CheckIndex$Status$PointsStatus::initialize(PyObject *module)
        {
          PyObject_SetAttrString((PyObject *) PY_TYPE(CheckIndex$Status$PointsStatus), "class_", make_descriptor(CheckIndex$Status$PointsStatus::initializeClass, 1));
          PyObject_SetAttrString((PyObject *) PY_TYPE(CheckIndex$Status$PointsStatus), "wrapfn_", make_descriptor(t_CheckIndex$Status$PointsStatus::wrap_jobject));
          PyObject_SetAttrString((PyObject *) PY_TYPE(CheckIndex$Status$PointsStatus), "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_CheckIndex$Status$PointsStatus_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, CheckIndex$Status$PointsStatus::initializeClass, 1)))
            return NULL;
          return t_CheckIndex$Status$PointsStatus::wrap_Object(CheckIndex$Status$PointsStatus(((t_CheckIndex$Status$PointsStatus *) arg)->object.this$));
        }
        static PyObject *t_CheckIndex$Status$PointsStatus_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, CheckIndex$Status$PointsStatus::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static PyObject *t_CheckIndex$Status$PointsStatus_get__error(t_CheckIndex$Status$PointsStatus *self, void *data)
        {
          ::java::lang::Throwable value((jobject) NULL);
          OBJ_CALL(value = self->object._get_error());
          return ::java::lang::t_Throwable::wrap_Object(value);
        }
        static int t_CheckIndex$Status$PointsStatus_set__error(t_CheckIndex$Status$PointsStatus *self, PyObject *arg, void *data)
        {
          ::java::lang::Throwable value((jobject) NULL);
          if (!parseArg(arg, "k", ::java::lang::Throwable::initializeClass, &value))
          {
            INT_CALL(self->object._set_error(value));
            return 0;
          }
          PyErr_SetArgsError((PyObject *) self, "error", arg);
          return -1;
        }

        static PyObject *t_CheckIndex$Status$PointsStatus_get__totalValueFields(t_CheckIndex$Status$PointsStatus *self, void *data)
        {
          jint value;
          OBJ_CALL(value = self->object._get_totalValueFields());
          return PyLong_FromLong((long) value);
        }
        static int t_CheckIndex$Status$PointsStatus_set__totalValueFields(t_CheckIndex$Status$PointsStatus *self, PyObject *arg, void *data)
        {
          jint value;
          if (!parseArg(arg, "I", &value))
          {
            INT_CALL(self->object._set_totalValueFields(value));
            return 0;
          }
          PyErr_SetArgsError((PyObject *) self, "totalValueFields", arg);
          return -1;
        }

        static PyObject *t_CheckIndex$Status$PointsStatus_get__totalValuePoints(t_CheckIndex$Status$PointsStatus *self, void *data)
        {
          jlong value;
          OBJ_CALL(value = self->object._get_totalValuePoints());
          return PyLong_FromLongLong((PY_LONG_LONG) value);
        }
        static int t_CheckIndex$Status$PointsStatus_set__totalValuePoints(t_CheckIndex$Status$PointsStatus *self, PyObject *arg, void *data)
        {
          jlong value;
          if (!parseArg(arg, "J", &value))
          {
            INT_CALL(self->object._set_totalValuePoints(value));
            return 0;
          }
          PyErr_SetArgsError((PyObject *) self, "totalValuePoints", arg);
          return -1;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/suggest/fst/FSTCompletionLookup.h"
#include "org/apache/lucene/search/suggest/fst/FSTCompletion.h"
#include "java/util/Collection.h"
#include "org/apache/lucene/store/DataInput.h"
#include "org/apache/lucene/util/Accountable.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/store/Directory.h"
#include "java/lang/Object.h"
#include "org/apache/lucene/store/DataOutput.h"
#include "org/apache/lucene/util/BytesRef.h"
#include "java/lang/String.h"
#include "org/apache/lucene/search/suggest/Lookup$LookupResult.h"
#include "java/util/Set.h"
#include "java/lang/CharSequence.h"
#include "java/util/List.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/search/suggest/InputIterator.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace suggest {
          namespace fst {

            ::java::lang::Class *FSTCompletionLookup::class$ = NULL;
            jmethodID *FSTCompletionLookup::mids$ = NULL;
            bool FSTCompletionLookup::live$ = false;

            jclass FSTCompletionLookup::initializeClass(bool getOnly)
            {
              if (getOnly)
                return (jclass) (live$ ? class$->this$ : NULL);
              if (class$ == NULL)
              {
                jclass cls = (jclass) env->findClass("org/apache/lucene/search/suggest/fst/FSTCompletionLookup");

                mids$ = new jmethodID[max_mid];
                mids$[mid_init$_f2cc1bce94666404] = env->getMethodID(cls, "<init>", "()V");
                mids$[mid_init$_a9516587cd7033fe] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/store/Directory;Ljava/lang/String;)V");
                mids$[mid_init$_dd9b15f70d7eaa43] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/store/Directory;Ljava/lang/String;Lorg/apache/lucene/search/suggest/fst/FSTCompletion;Z)V");
                mids$[mid_init$_6ef167e25741671b] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/store/Directory;Ljava/lang/String;IZ)V");
                mids$[mid_build_bf225d6cde09eeb7] = env->getMethodID(cls, "build", "(Lorg/apache/lucene/search/suggest/InputIterator;)V");
                mids$[mid_get_02b63332574637fb] = env->getMethodID(cls, "get", "(Ljava/lang/CharSequence;)Ljava/lang/Object;");
                mids$[mid_getChildResources_d4dfbf7a26ff41df] = env->getMethodID(cls, "getChildResources", "()Ljava/util/Collection;");
                mids$[mid_getCount_2e5ae9edcb9b072f] = env->getMethodID(cls, "getCount", "()J");
                mids$[mid_load_8d76187aa69e280c] = env->getMethodID(cls, "load", "(Lorg/apache/lucene/store/DataInput;)Z");
                mids$[mid_lookup_b158b62b42de2509] = env->getMethodID(cls, "lookup", "(Ljava/lang/CharSequence;Ljava/util/Set;ZI)Ljava/util/List;");
                mids$[mid_ramBytesUsed_2e5ae9edcb9b072f] = env->getMethodID(cls, "ramBytesUsed", "()J");
                mids$[mid_store_a9f4986a27ef0adc] = env->getMethodID(cls, "store", "(Lorg/apache/lucene/store/DataOutput;)Z");

                class$ = new ::java::lang::Class(cls);
                live$ = true;
              }
              return (jclass) class$->this$;
            }

            FSTCompletionLookup::FSTCompletionLookup() : ::org::apache::lucene::search::suggest::Lookup(env->newObject(initializeClass, &mids$, mid_init$_f2cc1bce94666404)) {}

            FSTCompletionLookup::FSTCompletionLookup(const ::org::apache::lucene::store::Directory & a0, const ::java::lang::String & a1) : ::org::apache::lucene::search::suggest::Lookup(env->newObject(initializeClass, &mids$, mid_init$_a9516587cd7033fe, a0.this$, a1.this$)) {}

            FSTCompletionLookup::FSTCompletionLookup(const ::org::apache::lucene::store::Directory & a0, const ::java::lang::String & a1, const ::org::apache::lucene::search::suggest::fst::FSTCompletion & a2, jboolean a3) : ::org::apache::lucene::search::suggest::Lookup(env->newObject(initializeClass, &mids$, mid_init$_dd9b15f70d7eaa43, a0.this$, a1.this$, a2.this$, a3)) {}

            FSTCompletionLookup::FSTCompletionLookup(const ::org::apache::lucene::store::Directory & a0, const ::java::lang::String & a1, jint a2, jboolean a3) : ::org::apache::lucene::search::suggest::Lookup(env->newObject(initializeClass, &mids$, mid_init$_6ef167e25741671b, a0.this$, a1.this$, a2, a3)) {}

            void FSTCompletionLookup::build(const ::org::apache::lucene::search::suggest::InputIterator & a0) const
            {
              env->callVoidMethod(this$, mids$[mid_build_bf225d6cde09eeb7], a0.this$);
            }

            ::java::lang::Object FSTCompletionLookup::get(const ::java::lang::CharSequence & a0) const
            {
              return ::java::lang::Object(env->callObjectMethod(this$, mids$[mid_get_02b63332574637fb], a0.this$));
            }

            ::java::util::Collection FSTCompletionLookup::getChildResources() const
            {
              return ::java::util::Collection(env->callObjectMethod(this$, mids$[mid_getChildResources_d4dfbf7a26ff41df]));
            }

            jlong FSTCompletionLookup::getCount() const
            {
              return env->callLongMethod(this$, mids$[mid_getCount_2e5ae9edcb9b072f]);
            }

            jboolean FSTCompletionLookup::load(const ::org::apache::lucene::store::DataInput & a0) const
            {
              return env->callBooleanMethod(this$, mids$[mid_load_8d76187aa69e280c], a0.this$);
            }

            ::java::util::List FSTCompletionLookup::lookup(const ::java::lang::CharSequence & a0, const ::java::util::Set & a1, jboolean a2, jint a3) const
            {
              return ::java::util::List(env->callObjectMethod(this$, mids$[mid_lookup_b158b62b42de2509], a0.this$, a1.this$, a2, a3));
            }

            jlong FSTCompletionLookup::ramBytesUsed() const
            {
              return env->callLongMethod(this$, mids$[mid_ramBytesUsed_2e5ae9edcb9b072f]);
            }

            jboolean FSTCompletionLookup::store(const ::org::apache::lucene::store::DataOutput & a0) const
            {
              return env->callBooleanMethod(this$, mids$[mid_store_a9f4986a27ef0adc], a0.this$);
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace suggest {
          namespace fst {
            static PyObject *t_FSTCompletionLookup_cast_(PyTypeObject *type, PyObject *arg);
            static PyObject *t_FSTCompletionLookup_instance_(PyTypeObject *type, PyObject *arg);
            static int t_FSTCompletionLookup_init_(t_FSTCompletionLookup *self, PyObject *args, PyObject *kwds);
            static PyObject *t_FSTCompletionLookup_build(t_FSTCompletionLookup *self, PyObject *args);
            static PyObject *t_FSTCompletionLookup_get(t_FSTCompletionLookup *self, PyObject *arg);
            static PyObject *t_FSTCompletionLookup_getChildResources(t_FSTCompletionLookup *self, PyObject *args);
            static PyObject *t_FSTCompletionLookup_getCount(t_FSTCompletionLookup *self, PyObject *args);
            static PyObject *t_FSTCompletionLookup_load(t_FSTCompletionLookup *self, PyObject *args);
            static PyObject *t_FSTCompletionLookup_lookup(t_FSTCompletionLookup *self, PyObject *args);
            static PyObject *t_FSTCompletionLookup_ramBytesUsed(t_FSTCompletionLookup *self, PyObject *args);
            static PyObject *t_FSTCompletionLookup_store(t_FSTCompletionLookup *self, PyObject *args);
            static PyObject *t_FSTCompletionLookup_get__childResources(t_FSTCompletionLookup *self, void *data);
            static PyObject *t_FSTCompletionLookup_get__count(t_FSTCompletionLookup *self, void *data);
            static PyGetSetDef t_FSTCompletionLookup__fields_[] = {
              DECLARE_GET_FIELD(t_FSTCompletionLookup, childResources),
              DECLARE_GET_FIELD(t_FSTCompletionLookup, count),
              { NULL, NULL, NULL, NULL, NULL }
            };

            static PyMethodDef t_FSTCompletionLookup__methods_[] = {
              DECLARE_METHOD(t_FSTCompletionLookup, cast_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_FSTCompletionLookup, instance_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_FSTCompletionLookup, build, METH_VARARGS),
              DECLARE_METHOD(t_FSTCompletionLookup, get, METH_O),
              DECLARE_METHOD(t_FSTCompletionLookup, getChildResources, METH_VARARGS),
              DECLARE_METHOD(t_FSTCompletionLookup, getCount, METH_VARARGS),
              DECLARE_METHOD(t_FSTCompletionLookup, load, METH_VARARGS),
              DECLARE_METHOD(t_FSTCompletionLookup, lookup, METH_VARARGS),
              DECLARE_METHOD(t_FSTCompletionLookup, ramBytesUsed, METH_VARARGS),
              DECLARE_METHOD(t_FSTCompletionLookup, store, METH_VARARGS),
              { NULL, NULL, 0, NULL }
            };

            static PyType_Slot PY_TYPE_SLOTS(FSTCompletionLookup)[] = {
              { Py_tp_methods, t_FSTCompletionLookup__methods_ },
              { Py_tp_init, (void *) t_FSTCompletionLookup_init_ },
              { Py_tp_getset, t_FSTCompletionLookup__fields_ },
              { 0, NULL }
            };

            static PyType_Def *PY_TYPE_BASES(FSTCompletionLookup)[] = {
              &PY_TYPE_DEF(::org::apache::lucene::search::suggest::Lookup),
              NULL
            };

            DEFINE_TYPE(FSTCompletionLookup, t_FSTCompletionLookup, FSTCompletionLookup);

            void t_FSTCompletionLookup::install(PyObject *module)
            {
              installType(&PY_TYPE(FSTCompletionLookup), &PY_TYPE_DEF(FSTCompletionLookup), module, "FSTCompletionLookup", 0);
            }

            void t_FSTCompletionLookup::initialize(PyObject *module)
            {
              PyObject_SetAttrString((PyObject *) PY_TYPE(FSTCompletionLookup), "class_", make_descriptor(FSTCompletionLookup::initializeClass, 1));
              PyObject_SetAttrString((PyObject *) PY_TYPE(FSTCompletionLookup), "wrapfn_", make_descriptor(t_FSTCompletionLookup::wrap_jobject));
              PyObject_SetAttrString((PyObject *) PY_TYPE(FSTCompletionLookup), "boxfn_", make_descriptor(boxObject));
            }

            static PyObject *t_FSTCompletionLookup_cast_(PyTypeObject *type, PyObject *arg)
            {
              if (!(arg = castCheck(arg, FSTCompletionLookup::initializeClass, 1)))
                return NULL;
              return t_FSTCompletionLookup::wrap_Object(FSTCompletionLookup(((t_FSTCompletionLookup *) arg)->object.this$));
            }
            static PyObject *t_FSTCompletionLookup_instance_(PyTypeObject *type, PyObject *arg)
            {
              if (!castCheck(arg, FSTCompletionLookup::initializeClass, 0))
                Py_RETURN_FALSE;
              Py_RETURN_TRUE;
            }

            static int t_FSTCompletionLookup_init_(t_FSTCompletionLookup *self, PyObject *args, PyObject *kwds)
            {
              switch (PyTuple_GET_SIZE(args)) {
               case 0:
                {
                  FSTCompletionLookup object((jobject) NULL);

                  INT_CALL(object = FSTCompletionLookup());
                  self->object = object;
                  break;
                }
               case 2:
                {
                  ::org::apache::lucene::store::Directory a0((jobject) NULL);
                  ::java::lang::String a1((jobject) NULL);
                  FSTCompletionLookup object((jobject) NULL);

                  if (!parseArgs(args, "ks", ::org::apache::lucene::store::Directory::initializeClass, &a0, &a1))
                  {
                    INT_CALL(object = FSTCompletionLookup(a0, a1));
                    self->object = object;
                    break;
                  }
                }
                goto err;
               case 4:
                {
                  ::org::apache::lucene::store::Directory a0((jobject) NULL);
                  ::java::lang::String a1((jobject) NULL);
                  ::org::apache::lucene::search::suggest::fst::FSTCompletion a2((jobject) NULL);
                  jboolean a3;
                  FSTCompletionLookup object((jobject) NULL);

                  if (!parseArgs(args, "kskZ", ::org::apache::lucene::store::Directory::initializeClass, ::org::apache::lucene::search::suggest::fst::FSTCompletion::initializeClass, &a0, &a1, &a2, &a3))
                  {
                    INT_CALL(object = FSTCompletionLookup(a0, a1, a2, a3));
                    self->object = object;
                    break;
                  }
                }
                {
                  ::org::apache::lucene::store::Directory a0((jobject) NULL);
                  ::java::lang::String a1((jobject) NULL);
                  jint a2;
                  jboolean a3;
                  FSTCompletionLookup object((jobject) NULL);

                  if (!parseArgs(args, "ksIZ", ::org::apache::lucene::store::Directory::initializeClass, &a0, &a1, &a2, &a3))
                  {
                    INT_CALL(object = FSTCompletionLookup(a0, a1, a2, a3));
                    self->object = object;
                    break;
                  }
                }
               default:
               err:
                PyErr_SetArgsError((PyObject *) self, "__init__", args);
                return -1;
              }

              return 0;
            }

            static PyObject *t_FSTCompletionLookup_build(t_FSTCompletionLookup *self, PyObject *args)
            {
              ::org::apache::lucene::search::suggest::InputIterator a0((jobject) NULL);

              if (!parseArgs(args, "k", ::org::apache::lucene::search::suggest::InputIterator::initializeClass, &a0))
              {
                OBJ_CALL(self->object.build(a0));
                Py_RETURN_NONE;
              }

              return callSuper(PY_TYPE(FSTCompletionLookup), (PyObject *) self, "build", args, 2);
            }

            static PyObject *t_FSTCompletionLookup_get(t_FSTCompletionLookup *self, PyObject *arg)
            {
              ::java::lang::CharSequence a0((jobject) NULL);
              ::java::lang::Object result((jobject) NULL);

              if (!parseArg(arg, "O", ::java::lang::PY_TYPE(CharSequence), &a0))
              {
                OBJ_CALL(result = self->object.get(a0));
                return ::java::lang::t_Object::wrap_Object(result);
              }

              PyErr_SetArgsError((PyObject *) self, "get", arg);
              return NULL;
            }

            static PyObject *t_FSTCompletionLookup_getChildResources(t_FSTCompletionLookup *self, PyObject *args)
            {
              ::java::util::Collection result((jobject) NULL);

              if (!parseArgs(args, ""))
              {
                OBJ_CALL(result = self->object.getChildResources());
                return ::java::util::t_Collection::wrap_Object(result, ::org::apache::lucene::util::PY_TYPE(Accountable));
              }

              return callSuper(PY_TYPE(FSTCompletionLookup), (PyObject *) self, "getChildResources", args, 2);
            }

            static PyObject *t_FSTCompletionLookup_getCount(t_FSTCompletionLookup *self, PyObject *args)
            {
              jlong result;

              if (!parseArgs(args, ""))
              {
                OBJ_CALL(result = self->object.getCount());
                return PyLong_FromLongLong((PY_LONG_LONG) result);
              }

              return callSuper(PY_TYPE(FSTCompletionLookup), (PyObject *) self, "getCount", args, 2);
            }

            static PyObject *t_FSTCompletionLookup_load(t_FSTCompletionLookup *self, PyObject *args)
            {
              ::org::apache::lucene::store::DataInput a0((jobject) NULL);
              jboolean result;

              if (!parseArgs(args, "k", ::org::apache::lucene::store::DataInput::initializeClass, &a0))
              {
                OBJ_CALL(result = self->object.load(a0));
                Py_RETURN_BOOL(result);
              }

              return callSuper(PY_TYPE(FSTCompletionLookup), (PyObject *) self, "load", args, 2);
            }

            static PyObject *t_FSTCompletionLookup_lookup(t_FSTCompletionLookup *self, PyObject *args)
            {
              ::java::lang::CharSequence a0((jobject) NULL);
              ::java::util::Set a1((jobject) NULL);
              PyTypeObject **p1;
              jboolean a2;
              jint a3;
              ::java::util::List result((jobject) NULL);

              if (!parseArgs(args, "OKZI", ::java::lang::PY_TYPE(CharSequence), ::java::util::Set::initializeClass, &a0, &a1, &p1, ::java::util::t_Set::parameters_, &a2, &a3))
              {
                OBJ_CALL(result = self->object.lookup(a0, a1, a2, a3));
                return ::java::util::t_List::wrap_Object(result, ::org::apache::lucene::search::suggest::PY_TYPE(Lookup$LookupResult));
              }

              return callSuper(PY_TYPE(FSTCompletionLookup), (PyObject *) self, "lookup", args, 2);
            }

            static PyObject *t_FSTCompletionLookup_ramBytesUsed(t_FSTCompletionLookup *self, PyObject *args)
            {
              jlong result;

              if (!parseArgs(args, ""))
              {
                OBJ_CALL(result = self->object.ramBytesUsed());
                return PyLong_FromLongLong((PY_LONG_LONG) result);
              }

              return callSuper(PY_TYPE(FSTCompletionLookup), (PyObject *) self, "ramBytesUsed", args, 2);
            }

            static PyObject *t_FSTCompletionLookup_store(t_FSTCompletionLookup *self, PyObject *args)
            {
              ::org::apache::lucene::store::DataOutput a0((jobject) NULL);
              jboolean result;

              if (!parseArgs(args, "k", ::org::apache::lucene::store::DataOutput::initializeClass, &a0))
              {
                OBJ_CALL(result = self->object.store(a0));
                Py_RETURN_BOOL(result);
              }

              return callSuper(PY_TYPE(FSTCompletionLookup), (PyObject *) self, "store", args, 2);
            }

            static PyObject *t_FSTCompletionLookup_get__childResources(t_FSTCompletionLookup *self, void *data)
            {
              ::java::util::Collection value((jobject) NULL);
              OBJ_CALL(value = self->object.getChildResources());
              return ::java::util::t_Collection::wrap_Object(value);
            }

            static PyObject *t_FSTCompletionLookup_get__count(t_FSTCompletionLookup *self, void *data)
            {
              jlong value;
              OBJ_CALL(value = self->object.getCount());
              return PyLong_FromLongLong((PY_LONG_LONG) value);
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/pylucene/util/PythonListIterator.h"
#include "java/util/ListIterator.h"
#include "java/lang/Object.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace pylucene {
      namespace util {

        ::java::lang::Class *PythonListIterator::class$ = NULL;
        jmethodID *PythonListIterator::mids$ = NULL;
        bool PythonListIterator::live$ = false;

        jclass PythonListIterator::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/pylucene/util/PythonListIterator");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_f2cc1bce94666404] = env->getMethodID(cls, "<init>", "()V");
            mids$[mid_add_d20f626183f72f7d] = env->getMethodID(cls, "add", "(Ljava/lang/Object;)V");
            mids$[mid_hasPrevious_8454bd5aa23fd11e] = env->getMethodID(cls, "hasPrevious", "()Z");
            mids$[mid_nextIndex_9972fcc56b44e79d] = env->getMethodID(cls, "nextIndex", "()I");
            mids$[mid_previous_d6bcd06f3102c4d9] = env->getMethodID(cls, "previous", "()Ljava/lang/Object;");
            mids$[mid_previousIndex_9972fcc56b44e79d] = env->getMethodID(cls, "previousIndex", "()I");
            mids$[mid_remove_f2cc1bce94666404] = env->getMethodID(cls, "remove", "()V");
            mids$[mid_set_d20f626183f72f7d] = env->getMethodID(cls, "set", "(Ljava/lang/Object;)V");

            class$ = new ::java::lang::Class(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        PythonListIterator::PythonListIterator() : ::org::apache::pylucene::util::PythonIterator(env->newObject(initializeClass, &mids$, mid_init$_f2cc1bce94666404)) {}

        void PythonListIterator::add(const ::java::lang::Object & a0) const
        {
          env->callVoidMethod(this$, mids$[mid_add_d20f626183f72f7d], a0.this$);
        }

        jboolean PythonListIterator::hasPrevious() const
        {
          return env->callBooleanMethod(this$, mids$[mid_hasPrevious_8454bd5aa23fd11e]);
        }

        jint PythonListIterator::nextIndex() const
        {
          return env->callIntMethod(this$, mids$[mid_nextIndex_9972fcc56b44e79d]);
        }

        ::java::lang::Object PythonListIterator::previous() const
        {
          return ::java::lang::Object(env->callObjectMethod(this$, mids$[mid_previous_d6bcd06f3102c4d9]));
        }

        jint PythonListIterator::previousIndex() const
        {
          return env->callIntMethod(this$, mids$[mid_previousIndex_9972fcc56b44e79d]);
        }

        void PythonListIterator::remove() const
        {
          env->callVoidMethod(this$, mids$[mid_remove_f2cc1bce94666404]);
        }

        void PythonListIterator::set(const ::java::lang::Object & a0) const
        {
          env->callVoidMethod(this$, mids$[mid_set_d20f626183f72f7d], a0.this$);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace pylucene {
      namespace util {
        static PyObject *t_PythonListIterator_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_PythonListIterator_instance_(PyTypeObject *type, PyObject *arg);
        static int t_PythonListIterator_init_(t_PythonListIterator *self, PyObject *args, PyObject *kwds);
        static PyObject *t_PythonListIterator_add(t_PythonListIterator *self, PyObject *arg);
        static PyObject *t_PythonListIterator_hasPrevious(t_PythonListIterator *self);
        static PyObject *t_PythonListIterator_nextIndex(t_PythonListIterator *self);
        static PyObject *t_PythonListIterator_previous(t_PythonListIterator *self);
        static PyObject *t_PythonListIterator_previousIndex(t_PythonListIterator *self);
        static PyObject *t_PythonListIterator_remove(t_PythonListIterator *self, PyObject *args);
        static PyObject *t_PythonListIterator_set(t_PythonListIterator *self, PyObject *arg);

        static PyMethodDef t_PythonListIterator__methods_[] = {
          DECLARE_METHOD(t_PythonListIterator, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_PythonListIterator, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_PythonListIterator, add, METH_O),
          DECLARE_METHOD(t_PythonListIterator, hasPrevious, METH_NOARGS),
          DECLARE_METHOD(t_PythonListIterator, nextIndex, METH_NOARGS),
          DECLARE_METHOD(t_PythonListIterator, previous, METH_NOARGS),
          DECLARE_METHOD(t_PythonListIterator, previousIndex, METH_NOARGS),
          DECLARE_METHOD(t_PythonListIterator, remove, METH_VARARGS),
          DECLARE_METHOD(t_PythonListIterator, set, METH_O),
          { NULL, NULL, 0, NULL }
        };

        static PyType_Slot PY_TYPE_SLOTS(PythonListIterator)[] = {
          { Py_tp_methods, t_PythonListIterator__methods_ },
          { Py_tp_init, (void *) t_PythonListIterator_init_ },
          { 0, NULL }
        };

        static PyType_Def *PY_TYPE_BASES(PythonListIterator)[] = {
          &PY_TYPE_DEF(::org::apache::pylucene::util::PythonIterator),
          NULL
        };

        DEFINE_TYPE(PythonListIterator, t_PythonListIterator, PythonListIterator);

        void t_PythonListIterator::install(PyObject *module)
        {
          installType(&PY_TYPE(PythonListIterator), &PY_TYPE_DEF(PythonListIterator), module, "PythonListIterator", 0);
        }

        void t_PythonListIterator::initialize(PyObject *module)
        {
          PyObject_SetAttrString((PyObject *) PY_TYPE(PythonListIterator), "class_", make_descriptor(PythonListIterator::initializeClass, 1));
          PyObject_SetAttrString((PyObject *) PY_TYPE(PythonListIterator), "wrapfn_", make_descriptor(t_PythonListIterator::wrap_jobject));
          PyObject_SetAttrString((PyObject *) PY_TYPE(PythonListIterator), "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_PythonListIterator_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, PythonListIterator::initializeClass, 1)))
            return NULL;
          return t_PythonListIterator::wrap_Object(PythonListIterator(((t_PythonListIterator *) arg)->object.this$));
        }
        static PyObject *t_PythonListIterator_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, PythonListIterator::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_PythonListIterator_init_(t_PythonListIterator *self, PyObject *args, PyObject *kwds)
        {
          PythonListIterator object((jobject) NULL);

          INT_CALL(object = PythonListIterator());
          self->object = object;

          return 0;
        }

        static PyObject *t_PythonListIterator_add(t_PythonListIterator *self, PyObject *arg)
        {
          ::java::lang::Object a0((jobject) NULL);

          if (!parseArg(arg, "o", &a0))
          {
            OBJ_CALL(self->object.add(a0));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "add", arg);
          return NULL;
        }

        static PyObject *t_PythonListIterator_hasPrevious(t_PythonListIterator *self)
        {
          jboolean result;
          OBJ_CALL(result = self->object.hasPrevious());
          Py_RETURN_BOOL(result);
        }

        static PyObject *t_PythonListIterator_nextIndex(t_PythonListIterator *self)
        {
          jint result;
          OBJ_CALL(result = self->object.nextIndex());
          return PyLong_FromLong((long) result);
        }

        static PyObject *t_PythonListIterator_previous(t_PythonListIterator *self)
        {
          ::java::lang::Object result((jobject) NULL);
          OBJ_CALL(result = self->object.previous());
          return ::java::lang::t_Object::wrap_Object(result);
        }

        static PyObject *t_PythonListIterator_previousIndex(t_PythonListIterator *self)
        {
          jint result;
          OBJ_CALL(result = self->object.previousIndex());
          return PyLong_FromLong((long) result);
        }

        static PyObject *t_PythonListIterator_remove(t_PythonListIterator *self, PyObject *args)
        {

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(self->object.remove());
            Py_RETURN_NONE;
          }

          return callSuper(PY_TYPE(PythonListIterator), (PyObject *) self, "remove", args, 2);
        }

        static PyObject *t_PythonListIterator_set(t_PythonListIterator *self, PyObject *arg)
        {
          ::java::lang::Object a0((jobject) NULL);

          if (!parseArg(arg, "o", &a0))
          {
            OBJ_CALL(self->object.set(a0));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "set", arg);
          return NULL;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/index/IndexSorter$ComparableProvider.h"
#include "java/io/IOException.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {

        ::java::lang::Class *IndexSorter$ComparableProvider::class$ = NULL;
        jmethodID *IndexSorter$ComparableProvider::mids$ = NULL;
        bool IndexSorter$ComparableProvider::live$ = false;

        jclass IndexSorter$ComparableProvider::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/index/IndexSorter$ComparableProvider");

            mids$ = new jmethodID[max_mid];
            mids$[mid_getAsComparableLong_0f1d64a641e8af53] = env->getMethodID(cls, "getAsComparableLong", "(I)J");

            class$ = new ::java::lang::Class(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        jlong IndexSorter$ComparableProvider::getAsComparableLong(jint a0) const
        {
          return env->callLongMethod(this$, mids$[mid_getAsComparableLong_0f1d64a641e8af53], a0);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {
        static PyObject *t_IndexSorter$ComparableProvider_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_IndexSorter$ComparableProvider_instance_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_IndexSorter$ComparableProvider_getAsComparableLong(t_IndexSorter$ComparableProvider *self, PyObject *arg);

        static PyMethodDef t_IndexSorter$ComparableProvider__methods_[] = {
          DECLARE_METHOD(t_IndexSorter$ComparableProvider, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_IndexSorter$ComparableProvider, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_IndexSorter$ComparableProvider, getAsComparableLong, METH_O),
          { NULL, NULL, 0, NULL }
        };

        static PyType_Slot PY_TYPE_SLOTS(IndexSorter$ComparableProvider)[] = {
          { Py_tp_methods, t_IndexSorter$ComparableProvider__methods_ },
          { Py_tp_init, (void *) abstract_init },
          { 0, NULL }
        };

        static PyType_Def *PY_TYPE_BASES(IndexSorter$ComparableProvider)[] = {
          &PY_TYPE_DEF(::java::lang::Object),
          NULL
        };

        DEFINE_TYPE(IndexSorter$ComparableProvider, t_IndexSorter$ComparableProvider, IndexSorter$ComparableProvider);

        void t_IndexSorter$ComparableProvider::install(PyObject *module)
        {
          installType(&PY_TYPE(IndexSorter$ComparableProvider), &PY_TYPE_DEF(IndexSorter$ComparableProvider), module, "IndexSorter$ComparableProvider", 0);
        }

        void t_IndexSorter$ComparableProvider::initialize(PyObject *module)
        {
          PyObject_SetAttrString((PyObject *) PY_TYPE(IndexSorter$ComparableProvider), "class_", make_descriptor(IndexSorter$ComparableProvider::initializeClass, 1));
          PyObject_SetAttrString((PyObject *) PY_TYPE(IndexSorter$ComparableProvider), "wrapfn_", make_descriptor(t_IndexSorter$ComparableProvider::wrap_jobject));
          PyObject_SetAttrString((PyObject *) PY_TYPE(IndexSorter$ComparableProvider), "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_IndexSorter$ComparableProvider_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, IndexSorter$ComparableProvider::initializeClass, 1)))
            return NULL;
          return t_IndexSorter$ComparableProvider::wrap_Object(IndexSorter$ComparableProvider(((t_IndexSorter$ComparableProvider *) arg)->object.this$));
        }
        static PyObject *t_IndexSorter$ComparableProvider_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, IndexSorter$ComparableProvider::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static PyObject *t_IndexSorter$ComparableProvider_getAsComparableLong(t_IndexSorter$ComparableProvider *self, PyObject *arg)
        {
          jint a0;
          jlong result;

          if (!parseArg(arg, "I", &a0))
          {
            OBJ_CALL(result = self->object.getAsComparableLong(a0));
            return PyLong_FromLongLong((PY_LONG_LONG) result);
          }

          PyErr_SetArgsError((PyObject *) self, "getAsComparableLong", arg);
          return NULL;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/facet/taxonomy/writercache/UTF8TaxonomyWriterCache.h"
#include "org/apache/lucene/facet/taxonomy/FacetLabel.h"
#include "org/apache/lucene/facet/taxonomy/writercache/TaxonomyWriterCache.h"
#include "org/apache/lucene/util/Accountable.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace facet {
        namespace taxonomy {
          namespace writercache {

            ::java::lang::Class *UTF8TaxonomyWriterCache::class$ = NULL;
            jmethodID *UTF8TaxonomyWriterCache::mids$ = NULL;
            bool UTF8TaxonomyWriterCache::live$ = false;

            jclass UTF8TaxonomyWriterCache::initializeClass(bool getOnly)
            {
              if (getOnly)
                return (jclass) (live$ ? class$->this$ : NULL);
              if (class$ == NULL)
              {
                jclass cls = (jclass) env->findClass("org/apache/lucene/facet/taxonomy/writercache/UTF8TaxonomyWriterCache");

                mids$ = new jmethodID[max_mid];
                mids$[mid_init$_f2cc1bce94666404] = env->getMethodID(cls, "<init>", "()V");
                mids$[mid_clear_f2cc1bce94666404] = env->getMethodID(cls, "clear", "()V");
                mids$[mid_close_f2cc1bce94666404] = env->getMethodID(cls, "close", "()V");
                mids$[mid_get_1e6795f28098d13d] = env->getMethodID(cls, "get", "(Lorg/apache/lucene/facet/taxonomy/FacetLabel;)I");
                mids$[mid_isFull_8454bd5aa23fd11e] = env->getMethodID(cls, "isFull", "()Z");
                mids$[mid_put_94a843fa7d322607] = env->getMethodID(cls, "put", "(Lorg/apache/lucene/facet/taxonomy/FacetLabel;I)Z");
                mids$[mid_ramBytesUsed_2e5ae9edcb9b072f] = env->getMethodID(cls, "ramBytesUsed", "()J");
                mids$[mid_size_9972fcc56b44e79d] = env->getMethodID(cls, "size", "()I");

                class$ = new ::java::lang::Class(cls);
                live$ = true;
              }
              return (jclass) class$->this$;
            }

            UTF8TaxonomyWriterCache::UTF8TaxonomyWriterCache() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_f2cc1bce94666404)) {}

            void UTF8TaxonomyWriterCache::clear() const
            {
              env->callVoidMethod(this$, mids$[mid_clear_f2cc1bce94666404]);
            }

            void UTF8TaxonomyWriterCache::close() const
            {
              env->callVoidMethod(this$, mids$[mid_close_f2cc1bce94666404]);
            }

            jint UTF8TaxonomyWriterCache::get(const ::org::apache::lucene::facet::taxonomy::FacetLabel & a0) const
            {
              return env->callIntMethod(this$, mids$[mid_get_1e6795f28098d13d], a0.this$);
            }

            jboolean UTF8TaxonomyWriterCache::isFull() const
            {
              return env->callBooleanMethod(this$, mids$[mid_isFull_8454bd5aa23fd11e]);
            }

            jboolean UTF8TaxonomyWriterCache::put(const ::org::apache::lucene::facet::taxonomy::FacetLabel & a0, jint a1) const
            {
              return env->callBooleanMethod(this$, mids$[mid_put_94a843fa7d322607], a0.this$, a1);
            }

            jlong UTF8TaxonomyWriterCache::ramBytesUsed() const
            {
              return env->callLongMethod(this$, mids$[mid_ramBytesUsed_2e5ae9edcb9b072f]);
            }

            jint UTF8TaxonomyWriterCache::size() const
            {
              return env->callIntMethod(this$, mids$[mid_size_9972fcc56b44e79d]);
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace facet {
        namespace taxonomy {
          namespace writercache {
            static PyObject *t_UTF8TaxonomyWriterCache_cast_(PyTypeObject *type, PyObject *arg);
            static PyObject *t_UTF8TaxonomyWriterCache_instance_(PyTypeObject *type, PyObject *arg);
            static int t_UTF8TaxonomyWriterCache_init_(t_UTF8TaxonomyWriterCache *self, PyObject *args, PyObject *kwds);
            static PyObject *t_UTF8TaxonomyWriterCache_clear(t_UTF8TaxonomyWriterCache *self);
            static PyObject *t_UTF8TaxonomyWriterCache_close(t_UTF8TaxonomyWriterCache *self);
            static PyObject *t_UTF8TaxonomyWriterCache_get(t_UTF8TaxonomyWriterCache *self, PyObject *arg);
            static PyObject *t_UTF8TaxonomyWriterCache_isFull(t_UTF8TaxonomyWriterCache *self);
            static PyObject *t_UTF8TaxonomyWriterCache_put(t_UTF8TaxonomyWriterCache *self, PyObject *args);
            static PyObject *t_UTF8TaxonomyWriterCache_ramBytesUsed(t_UTF8TaxonomyWriterCache *self);
            static PyObject *t_UTF8TaxonomyWriterCache_size(t_UTF8TaxonomyWriterCache *self);
            static PyObject *t_UTF8TaxonomyWriterCache_get__full(t_UTF8TaxonomyWriterCache *self, void *data);
            static PyGetSetDef t_UTF8TaxonomyWriterCache__fields_[] = {
              DECLARE_GET_FIELD(t_UTF8TaxonomyWriterCache, full),
              { NULL, NULL, NULL, NULL, NULL }
            };

            static PyMethodDef t_UTF8TaxonomyWriterCache__methods_[] = {
              DECLARE_METHOD(t_UTF8TaxonomyWriterCache, cast_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_UTF8TaxonomyWriterCache, instance_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_UTF8TaxonomyWriterCache, clear, METH_NOARGS),
              DECLARE_METHOD(t_UTF8TaxonomyWriterCache, close, METH_NOARGS),
              DECLARE_METHOD(t_UTF8TaxonomyWriterCache, get, METH_O),
              DECLARE_METHOD(t_UTF8TaxonomyWriterCache, isFull, METH_NOARGS),
              DECLARE_METHOD(t_UTF8TaxonomyWriterCache, put, METH_VARARGS),
              DECLARE_METHOD(t_UTF8TaxonomyWriterCache, ramBytesUsed, METH_NOARGS),
              DECLARE_METHOD(t_UTF8TaxonomyWriterCache, size, METH_NOARGS),
              { NULL, NULL, 0, NULL }
            };

            static PyType_Slot PY_TYPE_SLOTS(UTF8TaxonomyWriterCache)[] = {
              { Py_tp_methods, t_UTF8TaxonomyWriterCache__methods_ },
              { Py_tp_init, (void *) t_UTF8TaxonomyWriterCache_init_ },
              { Py_tp_getset, t_UTF8TaxonomyWriterCache__fields_ },
              { 0, NULL }
            };

            static PyType_Def *PY_TYPE_BASES(UTF8TaxonomyWriterCache)[] = {
              &PY_TYPE_DEF(::java::lang::Object),
              NULL
            };

            DEFINE_TYPE(UTF8TaxonomyWriterCache, t_UTF8TaxonomyWriterCache, UTF8TaxonomyWriterCache);

            void t_UTF8TaxonomyWriterCache::install(PyObject *module)
            {
              installType(&PY_TYPE(UTF8TaxonomyWriterCache), &PY_TYPE_DEF(UTF8TaxonomyWriterCache), module, "UTF8TaxonomyWriterCache", 0);
            }

            void t_UTF8TaxonomyWriterCache::initialize(PyObject *module)
            {
              PyObject_SetAttrString((PyObject *) PY_TYPE(UTF8TaxonomyWriterCache), "class_", make_descriptor(UTF8TaxonomyWriterCache::initializeClass, 1));
              PyObject_SetAttrString((PyObject *) PY_TYPE(UTF8TaxonomyWriterCache), "wrapfn_", make_descriptor(t_UTF8TaxonomyWriterCache::wrap_jobject));
              PyObject_SetAttrString((PyObject *) PY_TYPE(UTF8TaxonomyWriterCache), "boxfn_", make_descriptor(boxObject));
            }

            static PyObject *t_UTF8TaxonomyWriterCache_cast_(PyTypeObject *type, PyObject *arg)
            {
              if (!(arg = castCheck(arg, UTF8TaxonomyWriterCache::initializeClass, 1)))
                return NULL;
              return t_UTF8TaxonomyWriterCache::wrap_Object(UTF8TaxonomyWriterCache(((t_UTF8TaxonomyWriterCache *) arg)->object.this$));
            }
            static PyObject *t_UTF8TaxonomyWriterCache_instance_(PyTypeObject *type, PyObject *arg)
            {
              if (!castCheck(arg, UTF8TaxonomyWriterCache::initializeClass, 0))
                Py_RETURN_FALSE;
              Py_RETURN_TRUE;
            }

            static int t_UTF8TaxonomyWriterCache_init_(t_UTF8TaxonomyWriterCache *self, PyObject *args, PyObject *kwds)
            {
              UTF8TaxonomyWriterCache object((jobject) NULL);

              INT_CALL(object = UTF8TaxonomyWriterCache());
              self->object = object;

              return 0;
            }

            static PyObject *t_UTF8TaxonomyWriterCache_clear(t_UTF8TaxonomyWriterCache *self)
            {
              OBJ_CALL(self->object.clear());
              Py_RETURN_NONE;
            }

            static PyObject *t_UTF8TaxonomyWriterCache_close(t_UTF8TaxonomyWriterCache *self)
            {
              OBJ_CALL(self->object.close());
              Py_RETURN_NONE;
            }

            static PyObject *t_UTF8TaxonomyWriterCache_get(t_UTF8TaxonomyWriterCache *self, PyObject *arg)
            {
              ::org::apache::lucene::facet::taxonomy::FacetLabel a0((jobject) NULL);
              jint result;

              if (!parseArg(arg, "k", ::org::apache::lucene::facet::taxonomy::FacetLabel::initializeClass, &a0))
              {
                OBJ_CALL(result = self->object.get(a0));
                return PyLong_FromLong((long) result);
              }

              PyErr_SetArgsError((PyObject *) self, "get", arg);
              return NULL;
            }

            static PyObject *t_UTF8TaxonomyWriterCache_isFull(t_UTF8TaxonomyWriterCache *self)
            {
              jboolean result;
              OBJ_CALL(result = self->object.isFull());
              Py_RETURN_BOOL(result);
            }

            static PyObject *t_UTF8TaxonomyWriterCache_put(t_UTF8TaxonomyWriterCache *self, PyObject *args)
            {
              ::org::apache::lucene::facet::taxonomy::FacetLabel a0((jobject) NULL);
              jint a1;
              jboolean result;

              if (!parseArgs(args, "kI", ::org::apache::lucene::facet::taxonomy::FacetLabel::initializeClass, &a0, &a1))
              {
                OBJ_CALL(result = self->object.put(a0, a1));
                Py_RETURN_BOOL(result);
              }

              PyErr_SetArgsError((PyObject *) self, "put", args);
              return NULL;
            }

            static PyObject *t_UTF8TaxonomyWriterCache_ramBytesUsed(t_UTF8TaxonomyWriterCache *self)
            {
              jlong result;
              OBJ_CALL(result = self->object.ramBytesUsed());
              return PyLong_FromLongLong((PY_LONG_LONG) result);
            }

            static PyObject *t_UTF8TaxonomyWriterCache_size(t_UTF8TaxonomyWriterCache *self)
            {
              jint result;
              OBJ_CALL(result = self->object.size());
              return PyLong_FromLong((long) result);
            }

            static PyObject *t_UTF8TaxonomyWriterCache_get__full(t_UTF8TaxonomyWriterCache *self, void *data)
            {
              jboolean value;
              OBJ_CALL(value = self->object.isFull());
              Py_RETURN_BOOL(value);
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "java/text/NumberFormat.h"
#include "java/lang/Number.h"
#include "java/util/Currency.h"
#include "java/lang/Class.h"
#include "java/lang/Object.h"
#include "java/util/Locale.h"
#include "java/lang/String.h"
#include "java/lang/StringBuffer.h"
#include "java/text/NumberFormat.h"
#include "JArray.h"

namespace java {
  namespace text {

    ::java::lang::Class *NumberFormat::class$ = NULL;
    jmethodID *NumberFormat::mids$ = NULL;
    bool NumberFormat::live$ = false;
    jint NumberFormat::FRACTION_FIELD = (jint) 0;
    jint NumberFormat::INTEGER_FIELD = (jint) 0;

    jclass NumberFormat::initializeClass(bool getOnly)
    {
      if (getOnly)
        return (jclass) (live$ ? class$->this$ : NULL);
      if (class$ == NULL)
      {
        jclass cls = (jclass) env->findClass("java/text/NumberFormat");

        mids$ = new jmethodID[max_mid];
        mids$[mid_clone_d6bcd06f3102c4d9] = env->getMethodID(cls, "clone", "()Ljava/lang/Object;");
        mids$[mid_equals_8b72f2dcdde6fd1d] = env->getMethodID(cls, "equals", "(Ljava/lang/Object;)Z");
        mids$[mid_format_f4d984402e3bd258] = env->getMethodID(cls, "format", "(D)Ljava/lang/String;");
        mids$[mid_format_55e776ffac018431] = env->getMethodID(cls, "format", "(J)Ljava/lang/String;");
        mids$[mid_getAvailableLocales_9de0c9f607235a40] = env->getStaticMethodID(cls, "getAvailableLocales", "()[Ljava/util/Locale;");
        mids$[mid_getCurrency_34cd83b8be53b24a] = env->getMethodID(cls, "getCurrency", "()Ljava/util/Currency;");
        mids$[mid_getCurrencyInstance_a56386c4cfd9cbe9] = env->getStaticMethodID(cls, "getCurrencyInstance", "()Ljava/text/NumberFormat;");
        mids$[mid_getCurrencyInstance_81eed739c1c73bfe] = env->getStaticMethodID(cls, "getCurrencyInstance", "(Ljava/util/Locale;)Ljava/text/NumberFormat;");
        mids$[mid_getInstance_a56386c4cfd9cbe9] = env->getStaticMethodID(cls, "getInstance", "()Ljava/text/NumberFormat;");
        mids$[mid_getInstance_81eed739c1c73bfe] = env->getStaticMethodID(cls, "getInstance", "(Ljava/util/Locale;)Ljava/text/NumberFormat;");
        mids$[mid_getIntegerInstance_a56386c4cfd9cbe9] = env->getStaticMethodID(cls, "getIntegerInstance", "()Ljava/text/NumberFormat;");
        mids$[mid_getIntegerInstance_81eed739c1c73bfe] = env->getStaticMethodID(cls, "getIntegerInstance", "(Ljava/util/Locale;)Ljava/text/NumberFormat;");
        mids$[mid_getMaximumFractionDigits_9972fcc56b44e79d] = env->getMethodID(cls, "getMaximumFractionDigits", "()I");
        mids$[mid_getMaximumIntegerDigits_9972fcc56b44e79d] = env->getMethodID(cls, "getMaximumIntegerDigits", "()I");
        mids$[mid_getMinimumFractionDigits_9972fcc56b44e79d] = env->getMethodID(cls, "getMinimumFractionDigits", "()I");
        mids$[mid_getMinimumIntegerDigits_9972fcc56b44e79d] = env->getMethodID(cls, "getMinimumIntegerDigits", "()I");
        mids$[mid_getNumberInstance_a56386c4cfd9cbe9] = env->getStaticMethodID(cls, "getNumberInstance", "()Ljava/text/NumberFormat;");
        mids$[mid_getNumberInstance_81eed739c1c73bfe] = env->getStaticMethodID(cls, "getNumberInstance", "(Ljava/util/Locale;)Ljava/text/NumberFormat;");
        mids$[mid_getPercentInstance_a56386c4cfd9cbe9] = env->getStaticMethodID(cls, "getPercentInstance", "()Ljava/text/NumberFormat;");
        mids$[mid_getPercentInstance_81eed739c1c73bfe] = env->getStaticMethodID(cls, "getPercentInstance", "(Ljava/util/Locale;)Ljava/text/NumberFormat;");
        mids$[mid_hashCode_9972fcc56b44e79d] = env->getMethodID(cls, "hashCode", "()I");
        mids$[mid_isGroupingUsed_8454bd5aa23fd11e] = env->getMethodID(cls, "isGroupingUsed", "()Z");
        mids$[mid_isParseIntegerOnly_8454bd5aa23fd11e] = env->getMethodID(cls, "isParseIntegerOnly", "()Z");
        mids$[mid_parse_a54d76fb1b57fe08] = env->getMethodID(cls, "parse", "(Ljava/lang/String;)Ljava/lang/Number;");
        mids$[mid_setCurrency_ad6cd0db6835c0e2] = env->getMethodID(cls, "setCurrency", "(Ljava/util/Currency;)V");
        mids$[mid_setGroupingUsed_9d72768e8fdce2b7] = env->getMethodID(cls, "setGroupingUsed", "(Z)V");
        mids$[mid_setMaximumFractionDigits_040c4cd0390c5aff] = env->getMethodID(cls, "setMaximumFractionDigits", "(I)V");
        mids$[mid_setMaximumIntegerDigits_040c4cd0390c5aff] = env->getMethodID(cls, "setMaximumIntegerDigits", "(I)V");
        mids$[mid_setMinimumFractionDigits_040c4cd0390c5aff] = env->getMethodID(cls, "setMinimumFractionDigits", "(I)V");
        mids$[mid_setMinimumIntegerDigits_040c4cd0390c5aff] = env->getMethodID(cls, "setMinimumIntegerDigits", "(I)V");
        mids$[mid_setParseIntegerOnly_9d72768e8fdce2b7] = env->getMethodID(cls, "setParseIntegerOnly", "(Z)V");

        class$ = new ::java::lang::Class(cls);
        cls = (jclass) class$->this$;

        FRACTION_FIELD = env->getStaticIntField(cls, "FRACTION_FIELD");
        INTEGER_FIELD = env->getStaticIntField(cls, "INTEGER_FIELD");
        live$ = true;
      }
      return (jclass) class$->this$;
    }

    ::java::lang::Object NumberFormat::clone() const
    {
      return ::java::lang::Object(env->callObjectMethod(this$, mids$[mid_clone_d6bcd06f3102c4d9]));
    }

    jboolean NumberFormat::equals(const ::java::lang::Object & a0) const
    {
      return env->callBooleanMethod(this$, mids$[mid_equals_8b72f2dcdde6fd1d], a0.this$);
    }

    ::java::lang::String NumberFormat::format(jdouble a0) const
    {
      return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_format_f4d984402e3bd258], a0));
    }

    ::java::lang::String NumberFormat::format(jlong a0) const
    {
      return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_format_55e776ffac018431], a0));
    }

    JArray< ::java::util::Locale > NumberFormat::getAvailableLocales()
    {
      jclass cls = env->getClass(initializeClass);
      return JArray< ::java::util::Locale >(env->callStaticObjectMethod(cls, mids$[mid_getAvailableLocales_9de0c9f607235a40]));
    }

    ::java::util::Currency NumberFormat::getCurrency() const
    {
      return ::java::util::Currency(env->callObjectMethod(this$, mids$[mid_getCurrency_34cd83b8be53b24a]));
    }

    NumberFormat NumberFormat::getCurrencyInstance()
    {
      jclass cls = env->getClass(initializeClass);
      return NumberFormat(env->callStaticObjectMethod(cls, mids$[mid_getCurrencyInstance_a56386c4cfd9cbe9]));
    }

    NumberFormat NumberFormat::getCurrencyInstance(const ::java::util::Locale & a0)
    {
      jclass cls = env->getClass(initializeClass);
      return NumberFormat(env->callStaticObjectMethod(cls, mids$[mid_getCurrencyInstance_81eed739c1c73bfe], a0.this$));
    }

    NumberFormat NumberFormat::getInstance()
    {
      jclass cls = env->getClass(initializeClass);
      return NumberFormat(env->callStaticObjectMethod(cls, mids$[mid_getInstance_a56386c4cfd9cbe9]));
    }

    NumberFormat NumberFormat::getInstance(const ::java::util::Locale & a0)
    {
      jclass cls = env->getClass(initializeClass);
      return NumberFormat(env->callStaticObjectMethod(cls, mids$[mid_getInstance_81eed739c1c73bfe], a0.this$));
    }

    NumberFormat NumberFormat::getIntegerInstance()
    {
      jclass cls = env->getClass(initializeClass);
      return NumberFormat(env->callStaticObjectMethod(cls, mids$[mid_getIntegerInstance_a56386c4cfd9cbe9]));
    }

    NumberFormat NumberFormat::getIntegerInstance(const ::java::util::Locale & a0)
    {
      jclass cls = env->getClass(initializeClass);
      return NumberFormat(env->callStaticObjectMethod(cls, mids$[mid_getIntegerInstance_81eed739c1c73bfe], a0.this$));
    }

    jint NumberFormat::getMaximumFractionDigits() const
    {
      return env->callIntMethod(this$, mids$[mid_getMaximumFractionDigits_9972fcc56b44e79d]);
    }

    jint NumberFormat::getMaximumIntegerDigits() const
    {
      return env->callIntMethod(this$, mids$[mid_getMaximumIntegerDigits_9972fcc56b44e79d]);
    }

    jint NumberFormat::getMinimumFractionDigits() const
    {
      return env->callIntMethod(this$, mids$[mid_getMinimumFractionDigits_9972fcc56b44e79d]);
    }

    jint NumberFormat::getMinimumIntegerDigits() const
    {
      return env->callIntMethod(this$, mids$[mid_getMinimumIntegerDigits_9972fcc56b44e79d]);
    }

    NumberFormat NumberFormat::getNumberInstance()
    {
      jclass cls = env->getClass(initializeClass);
      return NumberFormat(env->callStaticObjectMethod(cls, mids$[mid_getNumberInstance_a56386c4cfd9cbe9]));
    }

    NumberFormat NumberFormat::getNumberInstance(const ::java::util::Locale & a0)
    {
      jclass cls = env->getClass(initializeClass);
      return NumberFormat(env->callStaticObjectMethod(cls, mids$[mid_getNumberInstance_81eed739c1c73bfe], a0.this$));
    }

    NumberFormat NumberFormat::getPercentInstance()
    {
      jclass cls = env->getClass(initializeClass);
      return NumberFormat(env->callStaticObjectMethod(cls, mids$[mid_getPercentInstance_a56386c4cfd9cbe9]));
    }

    NumberFormat NumberFormat::getPercentInstance(const ::java::util::Locale & a0)
    {
      jclass cls = env->getClass(initializeClass);
      return NumberFormat(env->callStaticObjectMethod(cls, mids$[mid_getPercentInstance_81eed739c1c73bfe], a0.this$));
    }

    jint NumberFormat::hashCode() const
    {
      return env->callIntMethod(this$, mids$[mid_hashCode_9972fcc56b44e79d]);
    }

    jboolean NumberFormat::isGroupingUsed() const
    {
      return env->callBooleanMethod(this$, mids$[mid_isGroupingUsed_8454bd5aa23fd11e]);
    }

    jboolean NumberFormat::isParseIntegerOnly() const
    {
      return env->callBooleanMethod(this$, mids$[mid_isParseIntegerOnly_8454bd5aa23fd11e]);
    }

    ::java::lang::Number NumberFormat::parse(const ::java::lang::String & a0) const
    {
      return ::java::lang::Number(env->callObjectMethod(this$, mids$[mid_parse_a54d76fb1b57fe08], a0.this$));
    }

    void NumberFormat::setCurrency(const ::java::util::Currency & a0) const
    {
      env->callVoidMethod(this$, mids$[mid_setCurrency_ad6cd0db6835c0e2], a0.this$);
    }

    void NumberFormat::setGroupingUsed(jboolean a0) const
    {
      env->callVoidMethod(this$, mids$[mid_setGroupingUsed_9d72768e8fdce2b7], a0);
    }

    void NumberFormat::setMaximumFractionDigits(jint a0) const
    {
      env->callVoidMethod(this$, mids$[mid_setMaximumFractionDigits_040c4cd0390c5aff], a0);
    }

    void NumberFormat::setMaximumIntegerDigits(jint a0) const
    {
      env->callVoidMethod(this$, mids$[mid_setMaximumIntegerDigits_040c4cd0390c5aff], a0);
    }

    void NumberFormat::setMinimumFractionDigits(jint a0) const
    {
      env->callVoidMethod(this$, mids$[mid_setMinimumFractionDigits_040c4cd0390c5aff], a0);
    }

    void NumberFormat::setMinimumIntegerDigits(jint a0) const
    {
      env->callVoidMethod(this$, mids$[mid_setMinimumIntegerDigits_040c4cd0390c5aff], a0);
    }

    void NumberFormat::setParseIntegerOnly(jboolean a0) const
    {
      env->callVoidMethod(this$, mids$[mid_setParseIntegerOnly_9d72768e8fdce2b7], a0);
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace java {
  namespace text {
    static PyObject *t_NumberFormat_cast_(PyTypeObject *type, PyObject *arg);
    static PyObject *t_NumberFormat_instance_(PyTypeObject *type, PyObject *arg);
    static PyObject *t_NumberFormat_clone(t_NumberFormat *self, PyObject *args);
    static PyObject *t_NumberFormat_equals(t_NumberFormat *self, PyObject *args);
    static PyObject *t_NumberFormat_format(t_NumberFormat *self, PyObject *args);
    static PyObject *t_NumberFormat_getAvailableLocales(PyTypeObject *type);
    static PyObject *t_NumberFormat_getCurrency(t_NumberFormat *self);
    static PyObject *t_NumberFormat_getCurrencyInstance(PyTypeObject *type, PyObject *args);
    static PyObject *t_NumberFormat_getInstance(PyTypeObject *type, PyObject *args);
    static PyObject *t_NumberFormat_getIntegerInstance(PyTypeObject *type, PyObject *args);
    static PyObject *t_NumberFormat_getMaximumFractionDigits(t_NumberFormat *self);
    static PyObject *t_NumberFormat_getMaximumIntegerDigits(t_NumberFormat *self);
    static PyObject *t_NumberFormat_getMinimumFractionDigits(t_NumberFormat *self);
    static PyObject *t_NumberFormat_getMinimumIntegerDigits(t_NumberFormat *self);
    static PyObject *t_NumberFormat_getNumberInstance(PyTypeObject *type, PyObject *args);
    static PyObject *t_NumberFormat_getPercentInstance(PyTypeObject *type, PyObject *args);
    static PyObject *t_NumberFormat_hashCode(t_NumberFormat *self, PyObject *args);
    static PyObject *t_NumberFormat_isGroupingUsed(t_NumberFormat *self);
    static PyObject *t_NumberFormat_isParseIntegerOnly(t_NumberFormat *self);
    static PyObject *t_NumberFormat_parse(t_NumberFormat *self, PyObject *arg);
    static PyObject *t_NumberFormat_setCurrency(t_NumberFormat *self, PyObject *arg);
    static PyObject *t_NumberFormat_setGroupingUsed(t_NumberFormat *self, PyObject *arg);
    static PyObject *t_NumberFormat_setMaximumFractionDigits(t_NumberFormat *self, PyObject *arg);
    static PyObject *t_NumberFormat_setMaximumIntegerDigits(t_NumberFormat *self, PyObject *arg);
    static PyObject *t_NumberFormat_setMinimumFractionDigits(t_NumberFormat *self, PyObject *arg);
    static PyObject *t_NumberFormat_setMinimumIntegerDigits(t_NumberFormat *self, PyObject *arg);
    static PyObject *t_NumberFormat_setParseIntegerOnly(t_NumberFormat *self, PyObject *arg);
    static PyObject *t_NumberFormat_get__availableLocales(t_NumberFormat *self, void *data);
    static PyObject *t_NumberFormat_get__currency(t_NumberFormat *self, void *data);
    static int t_NumberFormat_set__currency(t_NumberFormat *self, PyObject *arg, void *data);
    static PyObject *t_NumberFormat_get__currencyInstance(t_NumberFormat *self, void *data);
    static PyObject *t_NumberFormat_get__groupingUsed(t_NumberFormat *self, void *data);
    static int t_NumberFormat_set__groupingUsed(t_NumberFormat *self, PyObject *arg, void *data);
    static PyObject *t_NumberFormat_get__instance(t_NumberFormat *self, void *data);
    static PyObject *t_NumberFormat_get__integerInstance(t_NumberFormat *self, void *data);
    static PyObject *t_NumberFormat_get__maximumFractionDigits(t_NumberFormat *self, void *data);
    static int t_NumberFormat_set__maximumFractionDigits(t_NumberFormat *self, PyObject *arg, void *data);
    static PyObject *t_NumberFormat_get__maximumIntegerDigits(t_NumberFormat *self, void *data);
    static int t_NumberFormat_set__maximumIntegerDigits(t_NumberFormat *self, PyObject *arg, void *data);
    static PyObject *t_NumberFormat_get__minimumFractionDigits(t_NumberFormat *self, void *data);
    static int t_NumberFormat_set__minimumFractionDigits(t_NumberFormat *self, PyObject *arg, void *data);
    static PyObject *t_NumberFormat_get__minimumIntegerDigits(t_NumberFormat *self, void *data);
    static int t_NumberFormat_set__minimumIntegerDigits(t_NumberFormat *self, PyObject *arg, void *data);
    static PyObject *t_NumberFormat_get__numberInstance(t_NumberFormat *self, void *data);
    static PyObject *t_NumberFormat_get__parseIntegerOnly(t_NumberFormat *self, void *data);
    static int t_NumberFormat_set__parseIntegerOnly(t_NumberFormat *self, PyObject *arg, void *data);
    static PyObject *t_NumberFormat_get__percentInstance(t_NumberFormat *self, void *data);
    static PyGetSetDef t_NumberFormat__fields_[] = {
      DECLARE_GET_FIELD(t_NumberFormat, availableLocales),
      DECLARE_GETSET_FIELD(t_NumberFormat, currency),
      DECLARE_GET_FIELD(t_NumberFormat, currencyInstance),
      DECLARE_GETSET_FIELD(t_NumberFormat, groupingUsed),
      DECLARE_GET_FIELD(t_NumberFormat, instance),
      DECLARE_GET_FIELD(t_NumberFormat, integerInstance),
      DECLARE_GETSET_FIELD(t_NumberFormat, maximumFractionDigits),
      DECLARE_GETSET_FIELD(t_NumberFormat, maximumIntegerDigits),
      DECLARE_GETSET_FIELD(t_NumberFormat, minimumFractionDigits),
      DECLARE_GETSET_FIELD(t_NumberFormat, minimumIntegerDigits),
      DECLARE_GET_FIELD(t_NumberFormat, numberInstance),
      DECLARE_GETSET_FIELD(t_NumberFormat, parseIntegerOnly),
      DECLARE_GET_FIELD(t_NumberFormat, percentInstance),
      { NULL, NULL, NULL, NULL, NULL }
    };

    static PyMethodDef t_NumberFormat__methods_[] = {
      DECLARE_METHOD(t_NumberFormat, cast_, METH_O | METH_CLASS),
      DECLARE_METHOD(t_NumberFormat, instance_, METH_O | METH_CLASS),
      DECLARE_METHOD(t_NumberFormat, clone, METH_VARARGS),
      DECLARE_METHOD(t_NumberFormat, equals, METH_VARARGS),
      DECLARE_METHOD(t_NumberFormat, format, METH_VARARGS),
      DECLARE_METHOD(t_NumberFormat, getAvailableLocales, METH_NOARGS | METH_CLASS),
      DECLARE_METHOD(t_NumberFormat, getCurrency, METH_NOARGS),
      DECLARE_METHOD(t_NumberFormat, getCurrencyInstance, METH_VARARGS | METH_CLASS),
      DECLARE_METHOD(t_NumberFormat, getInstance, METH_VARARGS | METH_CLASS),
      DECLARE_METHOD(t_NumberFormat, getIntegerInstance, METH_VARARGS | METH_CLASS),
      DECLARE_METHOD(t_NumberFormat, getMaximumFractionDigits, METH_NOARGS),
      DECLARE_METHOD(t_NumberFormat, getMaximumIntegerDigits, METH_NOARGS),
      DECLARE_METHOD(t_NumberFormat, getMinimumFractionDigits, METH_NOARGS),
      DECLARE_METHOD(t_NumberFormat, getMinimumIntegerDigits, METH_NOARGS),
      DECLARE_METHOD(t_NumberFormat, getNumberInstance, METH_VARARGS | METH_CLASS),
      DECLARE_METHOD(t_NumberFormat, getPercentInstance, METH_VARARGS | METH_CLASS),
      DECLARE_METHOD(t_NumberFormat, hashCode, METH_VARARGS),
      DECLARE_METHOD(t_NumberFormat, isGroupingUsed, METH_NOARGS),
      DECLARE_METHOD(t_NumberFormat, isParseIntegerOnly, METH_NOARGS),
      DECLARE_METHOD(t_NumberFormat, parse, METH_O),
      DECLARE_METHOD(t_NumberFormat, setCurrency, METH_O),
      DECLARE_METHOD(t_NumberFormat, setGroupingUsed, METH_O),
      DECLARE_METHOD(t_NumberFormat, setMaximumFractionDigits, METH_O),
      DECLARE_METHOD(t_NumberFormat, setMaximumIntegerDigits, METH_O),
      DECLARE_METHOD(t_NumberFormat, setMinimumFractionDigits, METH_O),
      DECLARE_METHOD(t_NumberFormat, setMinimumIntegerDigits, METH_O),
      DECLARE_METHOD(t_NumberFormat, setParseIntegerOnly, METH_O),
      { NULL, NULL, 0, NULL }
    };

    static PyType_Slot PY_TYPE_SLOTS(NumberFormat)[] = {
      { Py_tp_methods, t_NumberFormat__methods_ },
      { Py_tp_init, (void *) abstract_init },
      { Py_tp_getset, t_NumberFormat__fields_ },
      { 0, NULL }
    };

    static PyType_Def *PY_TYPE_BASES(NumberFormat)[] = {
      &PY_TYPE_DEF(::java::text::Format),
      NULL
    };

    DEFINE_TYPE(NumberFormat, t_NumberFormat, NumberFormat);

    void t_NumberFormat::install(PyObject *module)
    {
      installType(&PY_TYPE(NumberFormat), &PY_TYPE_DEF(NumberFormat), module, "NumberFormat", 0);
    }

    void t_NumberFormat::initialize(PyObject *module)
    {
      PyObject_SetAttrString((PyObject *) PY_TYPE(NumberFormat), "class_", make_descriptor(NumberFormat::initializeClass, 1));
      PyObject_SetAttrString((PyObject *) PY_TYPE(NumberFormat), "wrapfn_", make_descriptor(t_NumberFormat::wrap_jobject));
      PyObject_SetAttrString((PyObject *) PY_TYPE(NumberFormat), "boxfn_", make_descriptor(boxObject));
      env->getClass(NumberFormat::initializeClass);
      PyObject_SetAttrString((PyObject *) PY_TYPE(NumberFormat), "FRACTION_FIELD", make_descriptor(NumberFormat::FRACTION_FIELD));
      PyObject_SetAttrString((PyObject *) PY_TYPE(NumberFormat), "INTEGER_FIELD", make_descriptor(NumberFormat::INTEGER_FIELD));
    }

    static PyObject *t_NumberFormat_cast_(PyTypeObject *type, PyObject *arg)
    {
      if (!(arg = castCheck(arg, NumberFormat::initializeClass, 1)))
        return NULL;
      return t_NumberFormat::wrap_Object(NumberFormat(((t_NumberFormat *) arg)->object.this$));
    }
    static PyObject *t_NumberFormat_instance_(PyTypeObject *type, PyObject *arg)
    {
      if (!castCheck(arg, NumberFormat::initializeClass, 0))
        Py_RETURN_FALSE;
      Py_RETURN_TRUE;
    }

    static PyObject *t_NumberFormat_clone(t_NumberFormat *self, PyObject *args)
    {
      ::java::lang::Object result((jobject) NULL);

      if (!parseArgs(args, ""))
      {
        OBJ_CALL(result = self->object.clone());
        return ::java::lang::t_Object::wrap_Object(result);
      }

      return callSuper(PY_TYPE(NumberFormat), (PyObject *) self, "clone", args, 2);
    }

    static PyObject *t_NumberFormat_equals(t_NumberFormat *self, PyObject *args)
    {
      ::java::lang::Object a0((jobject) NULL);
      jboolean result;

      if (!parseArgs(args, "o", &a0))
      {
        OBJ_CALL(result = self->object.equals(a0));
        Py_RETURN_BOOL(result);
      }

      return callSuper(PY_TYPE(NumberFormat), (PyObject *) self, "equals", args, 2);
    }

    static PyObject *t_NumberFormat_format(t_NumberFormat *self, PyObject *args)
    {
      switch (PyTuple_GET_SIZE(args)) {
       case 1:
        {
          jdouble a0;
          ::java::lang::String result((jobject) NULL);

          if (!parseArgs(args, "D", &a0))
          {
            OBJ_CALL(result = self->object.format(a0));
            return j2p(result);
          }
        }
        {
          jlong a0;
          ::java::lang::String result((jobject) NULL);

          if (!parseArgs(args, "J", &a0))
          {
            OBJ_CALL(result = self->object.format(a0));
            return j2p(result);
          }
        }
      }

      return callSuper(PY_TYPE(NumberFormat), (PyObject *) self, "format", args, 2);
    }

    static PyObject *t_NumberFormat_getAvailableLocales(PyTypeObject *type)
    {
      JArray< ::java::util::Locale > result((jobject) NULL);
      OBJ_CALL(result = ::java::text::NumberFormat::getAvailableLocales());
      return JArray<jobject>(result.this$).wrap(::java::util::t_Locale::wrap_jobject);
    }

    static PyObject *t_NumberFormat_getCurrency(t_NumberFormat *self)
    {
      ::java::util::Currency result((jobject) NULL);
      OBJ_CALL(result = self->object.getCurrency());
      return ::java::util::t_Currency::wrap_Object(result);
    }

    static PyObject *t_NumberFormat_getCurrencyInstance(PyTypeObject *type, PyObject *args)
    {
      switch (PyTuple_GET_SIZE(args)) {
       case 0:
        {
          NumberFormat result((jobject) NULL);
          OBJ_CALL(result = ::java::text::NumberFormat::getCurrencyInstance());
          return t_NumberFormat::wrap_Object(result);
        }
        break;
       case 1:
        {
          ::java::util::Locale a0((jobject) NULL);
          NumberFormat result((jobject) NULL);

          if (!parseArgs(args, "k", ::java::util::Locale::initializeClass, &a0))
          {
            OBJ_CALL(result = ::java::text::NumberFormat::getCurrencyInstance(a0));
            return t_NumberFormat::wrap_Object(result);
          }
        }
      }

      PyErr_SetArgsError(type, "getCurrencyInstance", args);
      return NULL;
    }

    static PyObject *t_NumberFormat_getInstance(PyTypeObject *type, PyObject *args)
    {
      switch (PyTuple_GET_SIZE(args)) {
       case 0:
        {
          NumberFormat result((jobject) NULL);
          OBJ_CALL(result = ::java::text::NumberFormat::getInstance());
          return t_NumberFormat::wrap_Object(result);
        }
        break;
       case 1:
        {
          ::java::util::Locale a0((jobject) NULL);
          NumberFormat result((jobject) NULL);

          if (!parseArgs(args, "k", ::java::util::Locale::initializeClass, &a0))
          {
            OBJ_CALL(result = ::java::text::NumberFormat::getInstance(a0));
            return t_NumberFormat::wrap_Object(result);
          }
        }
      }

      PyErr_SetArgsError(type, "getInstance", args);
      return NULL;
    }

    static PyObject *t_NumberFormat_getIntegerInstance(PyTypeObject *type, PyObject *args)
    {
      switch (PyTuple_GET_SIZE(args)) {
       case 0:
        {
          NumberFormat result((jobject) NULL);
          OBJ_CALL(result = ::java::text::NumberFormat::getIntegerInstance());
          return t_NumberFormat::wrap_Object(result);
        }
        break;
       case 1:
        {
          ::java::util::Locale a0((jobject) NULL);
          NumberFormat result((jobject) NULL);

          if (!parseArgs(args, "k", ::java::util::Locale::initializeClass, &a0))
          {
            OBJ_CALL(result = ::java::text::NumberFormat::getIntegerInstance(a0));
            return t_NumberFormat::wrap_Object(result);
          }
        }
      }

      PyErr_SetArgsError(type, "getIntegerInstance", args);
      return NULL;
    }

    static PyObject *t_NumberFormat_getMaximumFractionDigits(t_NumberFormat *self)
    {
      jint result;
      OBJ_CALL(result = self->object.getMaximumFractionDigits());
      return PyLong_FromLong((long) result);
    }

    static PyObject *t_NumberFormat_getMaximumIntegerDigits(t_NumberFormat *self)
    {
      jint result;
      OBJ_CALL(result = self->object.getMaximumIntegerDigits());
      return PyLong_FromLong((long) result);
    }

    static PyObject *t_NumberFormat_getMinimumFractionDigits(t_NumberFormat *self)
    {
      jint result;
      OBJ_CALL(result = self->object.getMinimumFractionDigits());
      return PyLong_FromLong((long) result);
    }

    static PyObject *t_NumberFormat_getMinimumIntegerDigits(t_NumberFormat *self)
    {
      jint result;
      OBJ_CALL(result = self->object.getMinimumIntegerDigits());
      return PyLong_FromLong((long) result);
    }

    static PyObject *t_NumberFormat_getNumberInstance(PyTypeObject *type, PyObject *args)
    {
      switch (PyTuple_GET_SIZE(args)) {
       case 0:
        {
          NumberFormat result((jobject) NULL);
          OBJ_CALL(result = ::java::text::NumberFormat::getNumberInstance());
          return t_NumberFormat::wrap_Object(result);
        }
        break;
       case 1:
        {
          ::java::util::Locale a0((jobject) NULL);
          NumberFormat result((jobject) NULL);

          if (!parseArgs(args, "k", ::java::util::Locale::initializeClass, &a0))
          {
            OBJ_CALL(result = ::java::text::NumberFormat::getNumberInstance(a0));
            return t_NumberFormat::wrap_Object(result);
          }
        }
      }

      PyErr_SetArgsError(type, "getNumberInstance", args);
      return NULL;
    }

    static PyObject *t_NumberFormat_getPercentInstance(PyTypeObject *type, PyObject *args)
    {
      switch (PyTuple_GET_SIZE(args)) {
       case 0:
        {
          NumberFormat result((jobject) NULL);
          OBJ_CALL(result = ::java::text::NumberFormat::getPercentInstance());
          return t_NumberFormat::wrap_Object(result);
        }
        break;
       case 1:
        {
          ::java::util::Locale a0((jobject) NULL);
          NumberFormat result((jobject) NULL);

          if (!parseArgs(args, "k", ::java::util::Locale::initializeClass, &a0))
          {
            OBJ_CALL(result = ::java::text::NumberFormat::getPercentInstance(a0));
            return t_NumberFormat::wrap_Object(result);
          }
        }
      }

      PyErr_SetArgsError(type, "getPercentInstance", args);
      return NULL;
    }

    static PyObject *t_NumberFormat_hashCode(t_NumberFormat *self, PyObject *args)
    {
      jint result;

      if (!parseArgs(args, ""))
      {
        OBJ_CALL(result = self->object.hashCode());
        return PyLong_FromLong((long) result);
      }

      return callSuper(PY_TYPE(NumberFormat), (PyObject *) self, "hashCode", args, 2);
    }

    static PyObject *t_NumberFormat_isGroupingUsed(t_NumberFormat *self)
    {
      jboolean result;
      OBJ_CALL(result = self->object.isGroupingUsed());
      Py_RETURN_BOOL(result);
    }

    static PyObject *t_NumberFormat_isParseIntegerOnly(t_NumberFormat *self)
    {
      jboolean result;
      OBJ_CALL(result = self->object.isParseIntegerOnly());
      Py_RETURN_BOOL(result);
    }

    static PyObject *t_NumberFormat_parse(t_NumberFormat *self, PyObject *arg)
    {
      ::java::lang::String a0((jobject) NULL);
      ::java::lang::Number result((jobject) NULL);

      if (!parseArg(arg, "s", &a0))
      {
        OBJ_CALL(result = self->object.parse(a0));
        return ::java::lang::t_Number::wrap_Object(result);
      }

      PyErr_SetArgsError((PyObject *) self, "parse", arg);
      return NULL;
    }

    static PyObject *t_NumberFormat_setCurrency(t_NumberFormat *self, PyObject *arg)
    {
      ::java::util::Currency a0((jobject) NULL);

      if (!parseArg(arg, "k", ::java::util::Currency::initializeClass, &a0))
      {
        OBJ_CALL(self->object.setCurrency(a0));
        Py_RETURN_NONE;
      }

      PyErr_SetArgsError((PyObject *) self, "setCurrency", arg);
      return NULL;
    }

    static PyObject *t_NumberFormat_setGroupingUsed(t_NumberFormat *self, PyObject *arg)
    {
      jboolean a0;

      if (!parseArg(arg, "Z", &a0))
      {
        OBJ_CALL(self->object.setGroupingUsed(a0));
        Py_RETURN_NONE;
      }

      PyErr_SetArgsError((PyObject *) self, "setGroupingUsed", arg);
      return NULL;
    }

    static PyObject *t_NumberFormat_setMaximumFractionDigits(t_NumberFormat *self, PyObject *arg)
    {
      jint a0;

      if (!parseArg(arg, "I", &a0))
      {
        OBJ_CALL(self->object.setMaximumFractionDigits(a0));
        Py_RETURN_NONE;
      }

      PyErr_SetArgsError((PyObject *) self, "setMaximumFractionDigits", arg);
      return NULL;
    }

    static PyObject *t_NumberFormat_setMaximumIntegerDigits(t_NumberFormat *self, PyObject *arg)
    {
      jint a0;

      if (!parseArg(arg, "I", &a0))
      {
        OBJ_CALL(self->object.setMaximumIntegerDigits(a0));
        Py_RETURN_NONE;
      }

      PyErr_SetArgsError((PyObject *) self, "setMaximumIntegerDigits", arg);
      return NULL;
    }

    static PyObject *t_NumberFormat_setMinimumFractionDigits(t_NumberFormat *self, PyObject *arg)
    {
      jint a0;

      if (!parseArg(arg, "I", &a0))
      {
        OBJ_CALL(self->object.setMinimumFractionDigits(a0));
        Py_RETURN_NONE;
      }

      PyErr_SetArgsError((PyObject *) self, "setMinimumFractionDigits", arg);
      return NULL;
    }

    static PyObject *t_NumberFormat_setMinimumIntegerDigits(t_NumberFormat *self, PyObject *arg)
    {
      jint a0;

      if (!parseArg(arg, "I", &a0))
      {
        OBJ_CALL(self->object.setMinimumIntegerDigits(a0));
        Py_RETURN_NONE;
      }

      PyErr_SetArgsError((PyObject *) self, "setMinimumIntegerDigits", arg);
      return NULL;
    }

    static PyObject *t_NumberFormat_setParseIntegerOnly(t_NumberFormat *self, PyObject *arg)
    {
      jboolean a0;

      if (!parseArg(arg, "Z", &a0))
      {
        OBJ_CALL(self->object.setParseIntegerOnly(a0));
        Py_RETURN_NONE;
      }

      PyErr_SetArgsError((PyObject *) self, "setParseIntegerOnly", arg);
      return NULL;
    }

    static PyObject *t_NumberFormat_get__availableLocales(t_NumberFormat *self, void *data)
    {
      JArray< ::java::util::Locale > value((jobject) NULL);
      OBJ_CALL(value = self->object.getAvailableLocales());
      return JArray<jobject>(value.this$).wrap(::java::util::t_Locale::wrap_jobject);
    }

    static PyObject *t_NumberFormat_get__currency(t_NumberFormat *self, void *data)
    {
      ::java::util::Currency value((jobject) NULL);
      OBJ_CALL(value = self->object.getCurrency());
      return ::java::util::t_Currency::wrap_Object(value);
    }
    static int t_NumberFormat_set__currency(t_NumberFormat *self, PyObject *arg, void *data)
    {
      {
        ::java::util::Currency value((jobject) NULL);
        if (!parseArg(arg, "k", ::java::util::Currency::initializeClass, &value))
        {
          INT_CALL(self->object.setCurrency(value));
          return 0;
        }
      }
      PyErr_SetArgsError((PyObject *) self, "currency", arg);
      return -1;
    }

    static PyObject *t_NumberFormat_get__currencyInstance(t_NumberFormat *self, void *data)
    {
      NumberFormat value((jobject) NULL);
      OBJ_CALL(value = self->object.getCurrencyInstance());
      return t_NumberFormat::wrap_Object(value);
    }

    static PyObject *t_NumberFormat_get__groupingUsed(t_NumberFormat *self, void *data)
    {
      jboolean value;
      OBJ_CALL(value = self->object.isGroupingUsed());
      Py_RETURN_BOOL(value);
    }
    static int t_NumberFormat_set__groupingUsed(t_NumberFormat *self, PyObject *arg, void *data)
    {
      {
        jboolean value;
        if (!parseArg(arg, "Z", &value))
        {
          INT_CALL(self->object.setGroupingUsed(value));
          return 0;
        }
      }
      PyErr_SetArgsError((PyObject *) self, "groupingUsed", arg);
      return -1;
    }

    static PyObject *t_NumberFormat_get__instance(t_NumberFormat *self, void *data)
    {
      NumberFormat value((jobject) NULL);
      OBJ_CALL(value = self->object.getInstance());
      return t_NumberFormat::wrap_Object(value);
    }

    static PyObject *t_NumberFormat_get__integerInstance(t_NumberFormat *self, void *data)
    {
      NumberFormat value((jobject) NULL);
      OBJ_CALL(value = self->object.getIntegerInstance());
      return t_NumberFormat::wrap_Object(value);
    }

    static PyObject *t_NumberFormat_get__maximumFractionDigits(t_NumberFormat *self, void *data)
    {
      jint value;
      OBJ_CALL(value = self->object.getMaximumFractionDigits());
      return PyLong_FromLong((long) value);
    }
    static int t_NumberFormat_set__maximumFractionDigits(t_NumberFormat *self, PyObject *arg, void *data)
    {
      {
        jint value;
        if (!parseArg(arg, "I", &value))
        {
          INT_CALL(self->object.setMaximumFractionDigits(value));
          return 0;
        }
      }
      PyErr_SetArgsError((PyObject *) self, "maximumFractionDigits", arg);
      return -1;
    }

    static PyObject *t_NumberFormat_get__maximumIntegerDigits(t_NumberFormat *self, void *data)
    {
      jint value;
      OBJ_CALL(value = self->object.getMaximumIntegerDigits());
      return PyLong_FromLong((long) value);
    }
    static int t_NumberFormat_set__maximumIntegerDigits(t_NumberFormat *self, PyObject *arg, void *data)
    {
      {
        jint value;
        if (!parseArg(arg, "I", &value))
        {
          INT_CALL(self->object.setMaximumIntegerDigits(value));
          return 0;
        }
      }
      PyErr_SetArgsError((PyObject *) self, "maximumIntegerDigits", arg);
      return -1;
    }

    static PyObject *t_NumberFormat_get__minimumFractionDigits(t_NumberFormat *self, void *data)
    {
      jint value;
      OBJ_CALL(value = self->object.getMinimumFractionDigits());
      return PyLong_FromLong((long) value);
    }
    static int t_NumberFormat_set__minimumFractionDigits(t_NumberFormat *self, PyObject *arg, void *data)
    {
      {
        jint value;
        if (!parseArg(arg, "I", &value))
        {
          INT_CALL(self->object.setMinimumFractionDigits(value));
          return 0;
        }
      }
      PyErr_SetArgsError((PyObject *) self, "minimumFractionDigits", arg);
      return -1;
    }

    static PyObject *t_NumberFormat_get__minimumIntegerDigits(t_NumberFormat *self, void *data)
    {
      jint value;
      OBJ_CALL(value = self->object.getMinimumIntegerDigits());
      return PyLong_FromLong((long) value);
    }
    static int t_NumberFormat_set__minimumIntegerDigits(t_NumberFormat *self, PyObject *arg, void *data)
    {
      {
        jint value;
        if (!parseArg(arg, "I", &value))
        {
          INT_CALL(self->object.setMinimumIntegerDigits(value));
          return 0;
        }
      }
      PyErr_SetArgsError((PyObject *) self, "minimumIntegerDigits", arg);
      return -1;
    }

    static PyObject *t_NumberFormat_get__numberInstance(t_NumberFormat *self, void *data)
    {
      NumberFormat value((jobject) NULL);
      OBJ_CALL(value = self->object.getNumberInstance());
      return t_NumberFormat::wrap_Object(value);
    }

    static PyObject *t_NumberFormat_get__parseIntegerOnly(t_NumberFormat *self, void *data)
    {
      jboolean value;
      OBJ_CALL(value = self->object.isParseIntegerOnly());
      Py_RETURN_BOOL(value);
    }
    static int t_NumberFormat_set__parseIntegerOnly(t_NumberFormat *self, PyObject *arg, void *data)
    {
      {
        jboolean value;
        if (!parseArg(arg, "Z", &value))
        {
          INT_CALL(self->object.setParseIntegerOnly(value));
          return 0;
        }
      }
      PyErr_SetArgsError((PyObject *) self, "parseIntegerOnly", arg);
      return -1;
    }

    static PyObject *t_NumberFormat_get__percentInstance(t_NumberFormat *self, void *data)
    {
      NumberFormat value((jobject) NULL);
      OBJ_CALL(value = self->object.getPercentInstance());
      return t_NumberFormat::wrap_Object(value);
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/es/SpanishMinimalStemmer.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace es {

          ::java::lang::Class *SpanishMinimalStemmer::class$ = NULL;
          jmethodID *SpanishMinimalStemmer::mids$ = NULL;
          bool SpanishMinimalStemmer::live$ = false;

          jclass SpanishMinimalStemmer::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/es/SpanishMinimalStemmer");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_f2cc1bce94666404] = env->getMethodID(cls, "<init>", "()V");
              mids$[mid_stem_d4655f2a19359017] = env->getMethodID(cls, "stem", "([CI)I");

              class$ = new ::java::lang::Class(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          SpanishMinimalStemmer::SpanishMinimalStemmer() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_f2cc1bce94666404)) {}

          jint SpanishMinimalStemmer::stem(const JArray< jchar > & a0, jint a1) const
          {
            return env->callIntMethod(this$, mids$[mid_stem_d4655f2a19359017], a0.this$, a1);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace es {
          static PyObject *t_SpanishMinimalStemmer_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_SpanishMinimalStemmer_instance_(PyTypeObject *type, PyObject *arg);
          static int t_SpanishMinimalStemmer_init_(t_SpanishMinimalStemmer *self, PyObject *args, PyObject *kwds);
          static PyObject *t_SpanishMinimalStemmer_stem(t_SpanishMinimalStemmer *self, PyObject *args);

          static PyMethodDef t_SpanishMinimalStemmer__methods_[] = {
            DECLARE_METHOD(t_SpanishMinimalStemmer, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_SpanishMinimalStemmer, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_SpanishMinimalStemmer, stem, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          static PyType_Slot PY_TYPE_SLOTS(SpanishMinimalStemmer)[] = {
            { Py_tp_methods, t_SpanishMinimalStemmer__methods_ },
            { Py_tp_init, (void *) t_SpanishMinimalStemmer_init_ },
            { 0, NULL }
          };

          static PyType_Def *PY_TYPE_BASES(SpanishMinimalStemmer)[] = {
            &PY_TYPE_DEF(::java::lang::Object),
            NULL
          };

          DEFINE_TYPE(SpanishMinimalStemmer, t_SpanishMinimalStemmer, SpanishMinimalStemmer);

          void t_SpanishMinimalStemmer::install(PyObject *module)
          {
            installType(&PY_TYPE(SpanishMinimalStemmer), &PY_TYPE_DEF(SpanishMinimalStemmer), module, "SpanishMinimalStemmer", 0);
          }

          void t_SpanishMinimalStemmer::initialize(PyObject *module)
          {
            PyObject_SetAttrString((PyObject *) PY_TYPE(SpanishMinimalStemmer), "class_", make_descriptor(SpanishMinimalStemmer::initializeClass, 1));
            PyObject_SetAttrString((PyObject *) PY_TYPE(SpanishMinimalStemmer), "wrapfn_", make_descriptor(t_SpanishMinimalStemmer::wrap_jobject));
            PyObject_SetAttrString((PyObject *) PY_TYPE(SpanishMinimalStemmer), "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_SpanishMinimalStemmer_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, SpanishMinimalStemmer::initializeClass, 1)))
              return NULL;
            return t_SpanishMinimalStemmer::wrap_Object(SpanishMinimalStemmer(((t_SpanishMinimalStemmer *) arg)->object.this$));
          }
          static PyObject *t_SpanishMinimalStemmer_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, SpanishMinimalStemmer::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_SpanishMinimalStemmer_init_(t_SpanishMinimalStemmer *self, PyObject *args, PyObject *kwds)
          {
            SpanishMinimalStemmer object((jobject) NULL);

            INT_CALL(object = SpanishMinimalStemmer());
            self->object = object;

            return 0;
          }

          static PyObject *t_SpanishMinimalStemmer_stem(t_SpanishMinimalStemmer *self, PyObject *args)
          {
            JArray< jchar > a0((jobject) NULL);
            jint a1;
            jint result;

            if (!parseArgs(args, "[CI", &a0, &a1))
            {
              OBJ_CALL(result = self->object.stem(a0, a1));
              return PyLong_FromLong((long) result);
            }

            PyErr_SetArgsError((PyObject *) self, "stem", args);
            return NULL;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/synonym/SynonymFilter.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/analysis/TokenStream.h"
#include "java/lang/String.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/analysis/synonym/SynonymMap.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace synonym {

          ::java::lang::Class *SynonymFilter::class$ = NULL;
          jmethodID *SynonymFilter::mids$ = NULL;
          bool SynonymFilter::live$ = false;
          ::java::lang::String *SynonymFilter::TYPE_SYNONYM = NULL;

          jclass SynonymFilter::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/synonym/SynonymFilter");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_e2bb65681e534f99] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/analysis/TokenStream;Lorg/apache/lucene/analysis/synonym/SynonymMap;Z)V");
              mids$[mid_incrementToken_8454bd5aa23fd11e] = env->getMethodID(cls, "incrementToken", "()Z");
              mids$[mid_reset_f2cc1bce94666404] = env->getMethodID(cls, "reset", "()V");

              class$ = new ::java::lang::Class(cls);
              cls = (jclass) class$->this$;

              TYPE_SYNONYM = new ::java::lang::String(env->getStaticObjectField(cls, "TYPE_SYNONYM", "Ljava/lang/String;"));
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          SynonymFilter::SynonymFilter(const ::org::apache::lucene::analysis::TokenStream & a0, const ::org::apache::lucene::analysis::synonym::SynonymMap & a1, jboolean a2) : ::org::apache::lucene::analysis::TokenFilter(env->newObject(initializeClass, &mids$, mid_init$_e2bb65681e534f99, a0.this$, a1.this$, a2)) {}

          jboolean SynonymFilter::incrementToken() const
          {
            return env->callBooleanMethod(this$, mids$[mid_incrementToken_8454bd5aa23fd11e]);
          }

          void SynonymFilter::reset() const
          {
            env->callVoidMethod(this$, mids$[mid_reset_f2cc1bce94666404]);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace synonym {
          static PyObject *t_SynonymFilter_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_SynonymFilter_instance_(PyTypeObject *type, PyObject *arg);
          static int t_SynonymFilter_init_(t_SynonymFilter *self, PyObject *args, PyObject *kwds);
          static PyObject *t_SynonymFilter_incrementToken(t_SynonymFilter *self, PyObject *args);
          static PyObject *t_SynonymFilter_reset(t_SynonymFilter *self, PyObject *args);

          static PyMethodDef t_SynonymFilter__methods_[] = {
            DECLARE_METHOD(t_SynonymFilter, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_SynonymFilter, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_SynonymFilter, incrementToken, METH_VARARGS),
            DECLARE_METHOD(t_SynonymFilter, reset, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          static PyType_Slot PY_TYPE_SLOTS(SynonymFilter)[] = {
            { Py_tp_methods, t_SynonymFilter__methods_ },
            { Py_tp_init, (void *) t_SynonymFilter_init_ },
            { 0, NULL }
          };

          static PyType_Def *PY_TYPE_BASES(SynonymFilter)[] = {
            &PY_TYPE_DEF(::org::apache::lucene::analysis::TokenFilter),
            NULL
          };

          DEFINE_TYPE(SynonymFilter, t_SynonymFilter, SynonymFilter);

          void t_SynonymFilter::install(PyObject *module)
          {
            installType(&PY_TYPE(SynonymFilter), &PY_TYPE_DEF(SynonymFilter), module, "SynonymFilter", 0);
          }

          void t_SynonymFilter::initialize(PyObject *module)
          {
            PyObject_SetAttrString((PyObject *) PY_TYPE(SynonymFilter), "class_", make_descriptor(SynonymFilter::initializeClass, 1));
            PyObject_SetAttrString((PyObject *) PY_TYPE(SynonymFilter), "wrapfn_", make_descriptor(t_SynonymFilter::wrap_jobject));
            PyObject_SetAttrString((PyObject *) PY_TYPE(SynonymFilter), "boxfn_", make_descriptor(boxObject));
            env->getClass(SynonymFilter::initializeClass);
            PyObject_SetAttrString((PyObject *) PY_TYPE(SynonymFilter), "TYPE_SYNONYM", make_descriptor(j2p(*SynonymFilter::TYPE_SYNONYM)));
          }

          static PyObject *t_SynonymFilter_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, SynonymFilter::initializeClass, 1)))
              return NULL;
            return t_SynonymFilter::wrap_Object(SynonymFilter(((t_SynonymFilter *) arg)->object.this$));
          }
          static PyObject *t_SynonymFilter_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, SynonymFilter::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_SynonymFilter_init_(t_SynonymFilter *self, PyObject *args, PyObject *kwds)
          {
            ::org::apache::lucene::analysis::TokenStream a0((jobject) NULL);
            ::org::apache::lucene::analysis::synonym::SynonymMap a1((jobject) NULL);
            jboolean a2;
            SynonymFilter object((jobject) NULL);

            if (!parseArgs(args, "kkZ", ::org::apache::lucene::analysis::TokenStream::initializeClass, ::org::apache::lucene::analysis::synonym::SynonymMap::initializeClass, &a0, &a1, &a2))
            {
              INT_CALL(object = SynonymFilter(a0, a1, a2));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_SynonymFilter_incrementToken(t_SynonymFilter *self, PyObject *args)
          {
            jboolean result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.incrementToken());
              Py_RETURN_BOOL(result);
            }

            return callSuper(PY_TYPE(SynonymFilter), (PyObject *) self, "incrementToken", args, 2);
          }

          static PyObject *t_SynonymFilter_reset(t_SynonymFilter *self, PyObject *args)
          {

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(self->object.reset());
              Py_RETURN_NONE;
            }

            return callSuper(PY_TYPE(SynonymFilter), (PyObject *) self, "reset", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/spans/SpanWeight.h"
#include "java/util/Map.h"
#include "org/apache/lucene/index/LeafReaderContext.h"
#include "org/apache/lucene/search/spans/SpanQuery.h"
#include "org/apache/lucene/index/Term.h"
#include "org/apache/lucene/search/IndexSearcher.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/search/spans/SpanWeight$Postings.h"
#include "org/apache/lucene/index/TermStates.h"
#include "org/apache/lucene/search/Explanation.h"
#include "org/apache/lucene/search/spans/Spans.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/search/spans/SpanScorer.h"
#include "org/apache/lucene/search/LeafSimScorer.h"
#include "org/apache/lucene/search/Matches.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace spans {

          ::java::lang::Class *SpanWeight::class$ = NULL;
          jmethodID *SpanWeight::mids$ = NULL;
          bool SpanWeight::live$ = false;

          jclass SpanWeight::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/search/spans/SpanWeight");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_bc4ce9437bbc9edf] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/search/spans/SpanQuery;Lorg/apache/lucene/search/IndexSearcher;Ljava/util/Map;F)V");
              mids$[mid_explain_4cf8bab0b7954f4a] = env->getMethodID(cls, "explain", "(Lorg/apache/lucene/index/LeafReaderContext;I)Lorg/apache/lucene/search/Explanation;");
              mids$[mid_extractTermStates_408bd889ee3beae5] = env->getMethodID(cls, "extractTermStates", "(Ljava/util/Map;)V");
              mids$[mid_getSimScorer_b7b613d5394933ba] = env->getMethodID(cls, "getSimScorer", "(Lorg/apache/lucene/index/LeafReaderContext;)Lorg/apache/lucene/search/LeafSimScorer;");
              mids$[mid_getSpans_219c078c64a446fd] = env->getMethodID(cls, "getSpans", "(Lorg/apache/lucene/index/LeafReaderContext;Lorg/apache/lucene/search/spans/SpanWeight$Postings;)Lorg/apache/lucene/search/spans/Spans;");
              mids$[mid_matches_a177ac6f01316d86] = env->getMethodID(cls, "matches", "(Lorg/apache/lucene/index/LeafReaderContext;I)Lorg/apache/lucene/search/Matches;");
              mids$[mid_scorer_bf17eef266ac3994] = env->getMethodID(cls, "scorer", "(Lorg/apache/lucene/index/LeafReaderContext;)Lorg/apache/lucene/search/spans/SpanScorer;");

              class$ = new ::java::lang::Class(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          SpanWeight::SpanWeight(const ::org::apache::lucene::search::spans::SpanQuery & a0, const ::org::apache::lucene::search::IndexSearcher & a1, const ::java::util::Map & a2, jfloat a3) : ::org::apache::lucene::search::Weight(env->newObject(initializeClass, &mids$, mid_init$_bc4ce9437bbc9edf, a0.this$, a1.this$, a2.this$, a3)) {}

          ::org::apache::lucene::search::Explanation SpanWeight::explain(const ::org::apache::lucene::index::LeafReaderContext & a0, jint a1) const
          {
            return ::org::apache::lucene::search::Explanation(env->callObjectMethod(this$, mids$[mid_explain_4cf8bab0b7954f4a], a0.this$, a1));
          }

          void SpanWeight::extractTermStates(const ::java::util::Map & a0) const
          {
            env->callVoidMethod(this$, mids$[mid_extractTermStates_408bd889ee3beae5], a0.this$);
          }

          ::org::apache::lucene::search::LeafSimScorer SpanWeight::getSimScorer(const ::org::apache::lucene::index::LeafReaderContext & a0) const
          {
            return ::org::apache::lucene::search::LeafSimScorer(env->callObjectMethod(this$, mids$[mid_getSimScorer_b7b613d5394933ba], a0.this$));
          }

          ::org::apache::lucene::search::spans::Spans SpanWeight::getSpans(const ::org::apache::lucene::index::LeafReaderContext & a0, const ::org::apache::lucene::search::spans::SpanWeight$Postings & a1) const
          {
            return ::org::apache::lucene::search::spans::Spans(env->callObjectMethod(this$, mids$[mid_getSpans_219c078c64a446fd], a0.this$, a1.this$));
          }

          ::org::apache::lucene::search::Matches SpanWeight::matches(const ::org::apache::lucene::index::LeafReaderContext & a0, jint a1) const
          {
            return ::org::apache::lucene::search::Matches(env->callObjectMethod(this$, mids$[mid_matches_a177ac6f01316d86], a0.this$, a1));
          }

          ::org::apache::lucene::search::spans::SpanScorer SpanWeight::scorer(const ::org::apache::lucene::index::LeafReaderContext & a0) const
          {
            return ::org::apache::lucene::search::spans::SpanScorer(env->callObjectMethod(this$, mids$[mid_scorer_bf17eef266ac3994], a0.this$));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace spans {
          static PyObject *t_SpanWeight_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_SpanWeight_instance_(PyTypeObject *type, PyObject *arg);
          static int t_SpanWeight_init_(t_SpanWeight *self, PyObject *args, PyObject *kwds);
          static PyObject *t_SpanWeight_explain(t_SpanWeight *self, PyObject *args);
          static PyObject *t_SpanWeight_extractTermStates(t_SpanWeight *self, PyObject *arg);
          static PyObject *t_SpanWeight_getSimScorer(t_SpanWeight *self, PyObject *arg);
          static PyObject *t_SpanWeight_getSpans(t_SpanWeight *self, PyObject *args);
          static PyObject *t_SpanWeight_matches(t_SpanWeight *self, PyObject *args);
          static PyObject *t_SpanWeight_scorer(t_SpanWeight *self, PyObject *args);

          static PyMethodDef t_SpanWeight__methods_[] = {
            DECLARE_METHOD(t_SpanWeight, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_SpanWeight, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_SpanWeight, explain, METH_VARARGS),
            DECLARE_METHOD(t_SpanWeight, extractTermStates, METH_O),
            DECLARE_METHOD(t_SpanWeight, getSimScorer, METH_O),
            DECLARE_METHOD(t_SpanWeight, getSpans, METH_VARARGS),
            DECLARE_METHOD(t_SpanWeight, matches, METH_VARARGS),
            DECLARE_METHOD(t_SpanWeight, scorer, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          static PyType_Slot PY_TYPE_SLOTS(SpanWeight)[] = {
            { Py_tp_methods, t_SpanWeight__methods_ },
            { Py_tp_init, (void *) t_SpanWeight_init_ },
            { 0, NULL }
          };

          static PyType_Def *PY_TYPE_BASES(SpanWeight)[] = {
            &PY_TYPE_DEF(::org::apache::lucene::search::Weight),
            NULL
          };

          DEFINE_TYPE(SpanWeight, t_SpanWeight, SpanWeight);

          void t_SpanWeight::install(PyObject *module)
          {
            installType(&PY_TYPE(SpanWeight), &PY_TYPE_DEF(SpanWeight), module, "SpanWeight", 0);
            PyObject_SetAttrString((PyObject *) PY_TYPE(SpanWeight), "Postings", make_descriptor(&PY_TYPE_DEF(SpanWeight$Postings)));
          }

          void t_SpanWeight::initialize(PyObject *module)
          {
            PyObject_SetAttrString((PyObject *) PY_TYPE(SpanWeight), "class_", make_descriptor(SpanWeight::initializeClass, 1));
            PyObject_SetAttrString((PyObject *) PY_TYPE(SpanWeight), "wrapfn_", make_descriptor(t_SpanWeight::wrap_jobject));
            PyObject_SetAttrString((PyObject *) PY_TYPE(SpanWeight), "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_SpanWeight_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, SpanWeight::initializeClass, 1)))
              return NULL;
            return t_SpanWeight::wrap_Object(SpanWeight(((t_SpanWeight *) arg)->object.this$));
          }
          static PyObject *t_SpanWeight_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, SpanWeight::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_SpanWeight_init_(t_SpanWeight *self, PyObject *args, PyObject *kwds)
          {
            ::org::apache::lucene::search::spans::SpanQuery a0((jobject) NULL);
            ::org::apache::lucene::search::IndexSearcher a1((jobject) NULL);
            ::java::util::Map a2((jobject) NULL);
            PyTypeObject **p2;
            jfloat a3;
            SpanWeight object((jobject) NULL);

            if (!parseArgs(args, "kkKF", ::org::apache::lucene::search::spans::SpanQuery::initializeClass, ::org::apache::lucene::search::IndexSearcher::initializeClass, ::java::util::Map::initializeClass, &a0, &a1, &a2, &p2, ::java::util::t_Map::parameters_, &a3))
            {
              INT_CALL(object = SpanWeight(a0, a1, a2, a3));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_SpanWeight_explain(t_SpanWeight *self, PyObject *args)
          {
            ::org::apache::lucene::index::LeafReaderContext a0((jobject) NULL);
            jint a1;
            ::org::apache::lucene::search::Explanation result((jobject) NULL);

            if (!parseArgs(args, "kI", ::org::apache::lucene::index::LeafReaderContext::initializeClass, &a0, &a1))
            {
              OBJ_CALL(result = self->object.explain(a0, a1));
              return ::org::apache::lucene::search::t_Explanation::wrap_Object(result);
            }

            return callSuper(PY_TYPE(SpanWeight), (PyObject *) self, "explain", args, 2);
          }

          static PyObject *t_SpanWeight_extractTermStates(t_SpanWeight *self, PyObject *arg)
          {
            ::java::util::Map a0((jobject) NULL);
            PyTypeObject **p0;

            if (!parseArg(arg, "K", ::java::util::Map::initializeClass, &a0, &p0, ::java::util::t_Map::parameters_))
            {
              OBJ_CALL(self->object.extractTermStates(a0));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError((PyObject *) self, "extractTermStates", arg);
            return NULL;
          }

          static PyObject *t_SpanWeight_getSimScorer(t_SpanWeight *self, PyObject *arg)
          {
            ::org::apache::lucene::index::LeafReaderContext a0((jobject) NULL);
            ::org::apache::lucene::search::LeafSimScorer result((jobject) NULL);

            if (!parseArg(arg, "k", ::org::apache::lucene::index::LeafReaderContext::initializeClass, &a0))
            {
              OBJ_CALL(result = self->object.getSimScorer(a0));
              return ::org::apache::lucene::search::t_LeafSimScorer::wrap_Object(result);
            }

            PyErr_SetArgsError((PyObject *) self, "getSimScorer", arg);
            return NULL;
          }

          static PyObject *t_SpanWeight_getSpans(t_SpanWeight *self, PyObject *args)
          {
            ::org::apache::lucene::index::LeafReaderContext a0((jobject) NULL);
            ::org::apache::lucene::search::spans::SpanWeight$Postings a1((jobject) NULL);
            PyTypeObject **p1;
            ::org::apache::lucene::search::spans::Spans result((jobject) NULL);

            if (!parseArgs(args, "kK", ::org::apache::lucene::index::LeafReaderContext::initializeClass, ::org::apache::lucene::search::spans::SpanWeight$Postings::initializeClass, &a0, &a1, &p1, ::org::apache::lucene::search::spans::t_SpanWeight$Postings::parameters_))
            {
              OBJ_CALL(result = self->object.getSpans(a0, a1));
              return ::org::apache::lucene::search::spans::t_Spans::wrap_Object(result);
            }

            PyErr_SetArgsError((PyObject *) self, "getSpans", args);
            return NULL;
          }

          static PyObject *t_SpanWeight_matches(t_SpanWeight *self, PyObject *args)
          {
            ::org::apache::lucene::index::LeafReaderContext a0((jobject) NULL);
            jint a1;
            ::org::apache::lucene::search::Matches result((jobject) NULL);

            if (!parseArgs(args, "kI", ::org::apache::lucene::index::LeafReaderContext::initializeClass, &a0, &a1))
            {
              OBJ_CALL(result = self->object.matches(a0, a1));
              return ::org::apache::lucene::search::t_Matches::wrap_Object(result);
            }

            return callSuper(PY_TYPE(SpanWeight), (PyObject *) self, "matches", args, 2);
          }

          static PyObject *t_SpanWeight_scorer(t_SpanWeight *self, PyObject *args)
          {
            ::org::apache::lucene::index::LeafReaderContext a0((jobject) NULL);
            ::org::apache::lucene::search::spans::SpanScorer result((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::index::LeafReaderContext::initializeClass, &a0))
            {
              OBJ_CALL(result = self->object.scorer(a0));
              return ::org::apache::lucene::search::spans::t_SpanScorer::wrap_Object(result);
            }

            return callSuper(PY_TYPE(SpanWeight), (PyObject *) self, "scorer", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/uhighlight/UHComponents.h"
#include "java/util/function/Predicate.h"
#include "org/apache/lucene/search/uhighlight/UnifiedHighlighter$HighlightFlag.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/search/uhighlight/LabelledCharArrayMatcher.h"
#include "org/apache/lucene/util/BytesRef.h"
#include "java/lang/String.h"
#include "org/apache/lucene/search/Query.h"
#include "org/apache/lucene/search/uhighlight/PhraseHelper.h"
#include "java/util/Set.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace uhighlight {

          ::java::lang::Class *UHComponents::class$ = NULL;
          jmethodID *UHComponents::mids$ = NULL;
          bool UHComponents::live$ = false;

          jclass UHComponents::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/search/uhighlight/UHComponents");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_8bb65025098846e0] = env->getMethodID(cls, "<init>", "(Ljava/lang/String;Ljava/util/function/Predicate;Lorg/apache/lucene/search/Query;[Lorg/apache/lucene/util/BytesRef;Lorg/apache/lucene/search/uhighlight/PhraseHelper;[Lorg/apache/lucene/search/uhighlight/LabelledCharArrayMatcher;ZLjava/util/Set;)V");
              mids$[mid_getAutomata_2453e0754c0b617b] = env->getMethodID(cls, "getAutomata", "()[Lorg/apache/lucene/search/uhighlight/LabelledCharArrayMatcher;");
              mids$[mid_getField_db9b55ba01e03e4b] = env->getMethodID(cls, "getField", "()Ljava/lang/String;");
              mids$[mid_getFieldMatcher_9642992f11d82349] = env->getMethodID(cls, "getFieldMatcher", "()Ljava/util/function/Predicate;");
              mids$[mid_getHighlightFlags_7dcf4034c6d1a92a] = env->getMethodID(cls, "getHighlightFlags", "()Ljava/util/Set;");
              mids$[mid_getPhraseHelper_5c4612f30cc01bc9] = env->getMethodID(cls, "getPhraseHelper", "()Lorg/apache/lucene/search/uhighlight/PhraseHelper;");
              mids$[mid_getQuery_cbf839a480265450] = env->getMethodID(cls, "getQuery", "()Lorg/apache/lucene/search/Query;");
              mids$[mid_getTerms_af55d198d80d9d7e] = env->getMethodID(cls, "getTerms", "()[Lorg/apache/lucene/util/BytesRef;");
              mids$[mid_hasUnrecognizedQueryPart_8454bd5aa23fd11e] = env->getMethodID(cls, "hasUnrecognizedQueryPart", "()Z");

              class$ = new ::java::lang::Class(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          UHComponents::UHComponents(const ::java::lang::String & a0, const ::java::util::function::Predicate & a1, const ::org::apache::lucene::search::Query & a2, const JArray< ::org::apache::lucene::util::BytesRef > & a3, const ::org::apache::lucene::search::uhighlight::PhraseHelper & a4, const JArray< ::org::apache::lucene::search::uhighlight::LabelledCharArrayMatcher > & a5, jboolean a6, const ::java::util::Set & a7) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_8bb65025098846e0, a0.this$, a1.this$, a2.this$, a3.this$, a4.this$, a5.this$, a6, a7.this$)) {}

          JArray< ::org::apache::lucene::search::uhighlight::LabelledCharArrayMatcher > UHComponents::getAutomata() const
          {
            return JArray< ::org::apache::lucene::search::uhighlight::LabelledCharArrayMatcher >(env->callObjectMethod(this$, mids$[mid_getAutomata_2453e0754c0b617b]));
          }

          ::java::lang::String UHComponents::getField() const
          {
            return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_getField_db9b55ba01e03e4b]));
          }

          ::java::util::function::Predicate UHComponents::getFieldMatcher() const
          {
            return ::java::util::function::Predicate(env->callObjectMethod(this$, mids$[mid_getFieldMatcher_9642992f11d82349]));
          }

          ::java::util::Set UHComponents::getHighlightFlags() const
          {
            return ::java::util::Set(env->callObjectMethod(this$, mids$[mid_getHighlightFlags_7dcf4034c6d1a92a]));
          }

          ::org::apache::lucene::search::uhighlight::PhraseHelper UHComponents::getPhraseHelper() const
          {
            return ::org::apache::lucene::search::uhighlight::PhraseHelper(env->callObjectMethod(this$, mids$[mid_getPhraseHelper_5c4612f30cc01bc9]));
          }

          ::org::apache::lucene::search::Query UHComponents::getQuery() const
          {
            return ::org::apache::lucene::search::Query(env->callObjectMethod(this$, mids$[mid_getQuery_cbf839a480265450]));
          }

          JArray< ::org::apache::lucene::util::BytesRef > UHComponents::getTerms() const
          {
            return JArray< ::org::apache::lucene::util::BytesRef >(env->callObjectMethod(this$, mids$[mid_getTerms_af55d198d80d9d7e]));
          }

          jboolean UHComponents::hasUnrecognizedQueryPart() const
          {
            return env->callBooleanMethod(this$, mids$[mid_hasUnrecognizedQueryPart_8454bd5aa23fd11e]);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace uhighlight {
          static PyObject *t_UHComponents_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_UHComponents_instance_(PyTypeObject *type, PyObject *arg);
          static int t_UHComponents_init_(t_UHComponents *self, PyObject *args, PyObject *kwds);
          static PyObject *t_UHComponents_getAutomata(t_UHComponents *self);
          static PyObject *t_UHComponents_getField(t_UHComponents *self);
          static PyObject *t_UHComponents_getFieldMatcher(t_UHComponents *self);
          static PyObject *t_UHComponents_getHighlightFlags(t_UHComponents *self);
          static PyObject *t_UHComponents_getPhraseHelper(t_UHComponents *self);
          static PyObject *t_UHComponents_getQuery(t_UHComponents *self);
          static PyObject *t_UHComponents_getTerms(t_UHComponents *self);
          static PyObject *t_UHComponents_hasUnrecognizedQueryPart(t_UHComponents *self);
          static PyObject *t_UHComponents_get__automata(t_UHComponents *self, void *data);
          static PyObject *t_UHComponents_get__field(t_UHComponents *self, void *data);
          static PyObject *t_UHComponents_get__fieldMatcher(t_UHComponents *self, void *data);
          static PyObject *t_UHComponents_get__highlightFlags(t_UHComponents *self, void *data);
          static PyObject *t_UHComponents_get__phraseHelper(t_UHComponents *self, void *data);
          static PyObject *t_UHComponents_get__query(t_UHComponents *self, void *data);
          static PyObject *t_UHComponents_get__terms(t_UHComponents *self, void *data);
          static PyGetSetDef t_UHComponents__fields_[] = {
            DECLARE_GET_FIELD(t_UHComponents, automata),
            DECLARE_GET_FIELD(t_UHComponents, field),
            DECLARE_GET_FIELD(t_UHComponents, fieldMatcher),
            DECLARE_GET_FIELD(t_UHComponents, highlightFlags),
            DECLARE_GET_FIELD(t_UHComponents, phraseHelper),
            DECLARE_GET_FIELD(t_UHComponents, query),
            DECLARE_GET_FIELD(t_UHComponents, terms),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_UHComponents__methods_[] = {
            DECLARE_METHOD(t_UHComponents, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_UHComponents, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_UHComponents, getAutomata, METH_NOARGS),
            DECLARE_METHOD(t_UHComponents, getField, METH_NOARGS),
            DECLARE_METHOD(t_UHComponents, getFieldMatcher, METH_NOARGS),
            DECLARE_METHOD(t_UHComponents, getHighlightFlags, METH_NOARGS),
            DECLARE_METHOD(t_UHComponents, getPhraseHelper, METH_NOARGS),
            DECLARE_METHOD(t_UHComponents, getQuery, METH_NOARGS),
            DECLARE_METHOD(t_UHComponents, getTerms, METH_NOARGS),
            DECLARE_METHOD(t_UHComponents, hasUnrecognizedQueryPart, METH_NOARGS),
            { NULL, NULL, 0, NULL }
          };

          static PyType_Slot PY_TYPE_SLOTS(UHComponents)[] = {
            { Py_tp_methods, t_UHComponents__methods_ },
            { Py_tp_init, (void *) t_UHComponents_init_ },
            { Py_tp_getset, t_UHComponents__fields_ },
            { 0, NULL }
          };

          static PyType_Def *PY_TYPE_BASES(UHComponents)[] = {
            &PY_TYPE_DEF(::java::lang::Object),
            NULL
          };

          DEFINE_TYPE(UHComponents, t_UHComponents, UHComponents);

          void t_UHComponents::install(PyObject *module)
          {
            installType(&PY_TYPE(UHComponents), &PY_TYPE_DEF(UHComponents), module, "UHComponents", 0);
          }

          void t_UHComponents::initialize(PyObject *module)
          {
            PyObject_SetAttrString((PyObject *) PY_TYPE(UHComponents), "class_", make_descriptor(UHComponents::initializeClass, 1));
            PyObject_SetAttrString((PyObject *) PY_TYPE(UHComponents), "wrapfn_", make_descriptor(t_UHComponents::wrap_jobject));
            PyObject_SetAttrString((PyObject *) PY_TYPE(UHComponents), "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_UHComponents_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, UHComponents::initializeClass, 1)))
              return NULL;
            return t_UHComponents::wrap_Object(UHComponents(((t_UHComponents *) arg)->object.this$));
          }
          static PyObject *t_UHComponents_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, UHComponents::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_UHComponents_init_(t_UHComponents *self, PyObject *args, PyObject *kwds)
          {
            ::java::lang::String a0((jobject) NULL);
            ::java::util::function::Predicate a1((jobject) NULL);
            PyTypeObject **p1;
            ::org::apache::lucene::search::Query a2((jobject) NULL);
            JArray< ::org::apache::lucene::util::BytesRef > a3((jobject) NULL);
            ::org::apache::lucene::search::uhighlight::PhraseHelper a4((jobject) NULL);
            JArray< ::org::apache::lucene::search::uhighlight::LabelledCharArrayMatcher > a5((jobject) NULL);
            jboolean a6;
            ::java::util::Set a7((jobject) NULL);
            PyTypeObject **p7;
            UHComponents object((jobject) NULL);

            if (!parseArgs(args, "sKk[kk[kZK", ::java::util::function::Predicate::initializeClass, ::org::apache::lucene::search::Query::initializeClass, ::org::apache::lucene::util::BytesRef::initializeClass, ::org::apache::lucene::search::uhighlight::PhraseHelper::initializeClass, ::org::apache::lucene::search::uhighlight::LabelledCharArrayMatcher::initializeClass, ::java::util::Set::initializeClass, &a0, &a1, &p1, ::java::util::function::t_Predicate::parameters_, &a2, &a3, &a4, &a5, &a6, &a7, &p7, ::java::util::t_Set::parameters_))
            {
              INT_CALL(object = UHComponents(a0, a1, a2, a3, a4, a5, a6, a7));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_UHComponents_getAutomata(t_UHComponents *self)
          {
            JArray< ::org::apache::lucene::search::uhighlight::LabelledCharArrayMatcher > result((jobject) NULL);
            OBJ_CALL(result = self->object.getAutomata());
            return JArray<jobject>(result.this$).wrap(::org::apache::lucene::search::uhighlight::t_LabelledCharArrayMatcher::wrap_jobject);
          }

          static PyObject *t_UHComponents_getField(t_UHComponents *self)
          {
            ::java::lang::String result((jobject) NULL);
            OBJ_CALL(result = self->object.getField());
            return j2p(result);
          }

          static PyObject *t_UHComponents_getFieldMatcher(t_UHComponents *self)
          {
            ::java::util::function::Predicate result((jobject) NULL);
            OBJ_CALL(result = self->object.getFieldMatcher());
            return ::java::util::function::t_Predicate::wrap_Object(result, ::java::lang::PY_TYPE(String));
          }

          static PyObject *t_UHComponents_getHighlightFlags(t_UHComponents *self)
          {
            ::java::util::Set result((jobject) NULL);
            OBJ_CALL(result = self->object.getHighlightFlags());
            return ::java::util::t_Set::wrap_Object(result, ::org::apache::lucene::search::uhighlight::PY_TYPE(UnifiedHighlighter$HighlightFlag));
          }

          static PyObject *t_UHComponents_getPhraseHelper(t_UHComponents *self)
          {
            ::org::apache::lucene::search::uhighlight::PhraseHelper result((jobject) NULL);
            OBJ_CALL(result = self->object.getPhraseHelper());
            return ::org::apache::lucene::search::uhighlight::t_PhraseHelper::wrap_Object(result);
          }

          static PyObject *t_UHComponents_getQuery(t_UHComponents *self)
          {
            ::org::apache::lucene::search::Query result((jobject) NULL);
            OBJ_CALL(result = self->object.getQuery());
            return ::org::apache::lucene::search::t_Query::wrap_Object(result);
          }

          static PyObject *t_UHComponents_getTerms(t_UHComponents *self)
          {
            JArray< ::org::apache::lucene::util::BytesRef > result((jobject) NULL);
            OBJ_CALL(result = self->object.getTerms());
            return JArray<jobject>(result.this$).wrap(::org::apache::lucene::util::t_BytesRef::wrap_jobject);
          }

          static PyObject *t_UHComponents_hasUnrecognizedQueryPart(t_UHComponents *self)
          {
            jboolean result;
            OBJ_CALL(result = self->object.hasUnrecognizedQueryPart());
            Py_RETURN_BOOL(result);
          }

          static PyObject *t_UHComponents_get__automata(t_UHComponents *self, void *data)
          {
            JArray< ::org::apache::lucene::search::uhighlight::LabelledCharArrayMatcher > value((jobject) NULL);
            OBJ_CALL(value = self->object.getAutomata());
            return JArray<jobject>(value.this$).wrap(::org::apache::lucene::search::uhighlight::t_LabelledCharArrayMatcher::wrap_jobject);
          }

          static PyObject *t_UHComponents_get__field(t_UHComponents *self, void *data)
          {
            ::java::lang::String value((jobject) NULL);
            OBJ_CALL(value = self->object.getField());
            return j2p(value);
          }

          static PyObject *t_UHComponents_get__fieldMatcher(t_UHComponents *self, void *data)
          {
            ::java::util::function::Predicate value((jobject) NULL);
            OBJ_CALL(value = self->object.getFieldMatcher());
            return ::java::util::function::t_Predicate::wrap_Object(value);
          }

          static PyObject *t_UHComponents_get__highlightFlags(t_UHComponents *self, void *data)
          {
            ::java::util::Set value((jobject) NULL);
            OBJ_CALL(value = self->object.getHighlightFlags());
            return ::java::util::t_Set::wrap_Object(value);
          }

          static PyObject *t_UHComponents_get__phraseHelper(t_UHComponents *self, void *data)
          {
            ::org::apache::lucene::search::uhighlight::PhraseHelper value((jobject) NULL);
            OBJ_CALL(value = self->object.getPhraseHelper());
            return ::org::apache::lucene::search::uhighlight::t_PhraseHelper::wrap_Object(value);
          }

          static PyObject *t_UHComponents_get__query(t_UHComponents *self, void *data)
          {
            ::org::apache::lucene::search::Query value((jobject) NULL);
            OBJ_CALL(value = self->object.getQuery());
            return ::org::apache::lucene::search::t_Query::wrap_Object(value);
          }

          static PyObject *t_UHComponents_get__terms(t_UHComponents *self, void *data)
          {
            JArray< ::org::apache::lucene::util::BytesRef > value((jobject) NULL);
            OBJ_CALL(value = self->object.getTerms());
            return JArray<jobject>(value.this$).wrap(::org::apache::lucene::util::t_BytesRef::wrap_jobject);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/util/ResourceLoaderAware.h"
#include "org/apache/lucene/analysis/util/ResourceLoader.h"
#include "java/io/IOException.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace util {

          ::java::lang::Class *ResourceLoaderAware::class$ = NULL;
          jmethodID *ResourceLoaderAware::mids$ = NULL;
          bool ResourceLoaderAware::live$ = false;

          jclass ResourceLoaderAware::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/util/ResourceLoaderAware");

              mids$ = new jmethodID[max_mid];
              mids$[mid_inform_b4ee53c41a5f629f] = env->getMethodID(cls, "inform", "(Lorg/apache/lucene/analysis/util/ResourceLoader;)V");

              class$ = new ::java::lang::Class(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          void ResourceLoaderAware::inform(const ::org::apache::lucene::analysis::util::ResourceLoader & a0) const
          {
            env->callVoidMethod(this$, mids$[mid_inform_b4ee53c41a5f629f], a0.this$);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace util {
          static PyObject *t_ResourceLoaderAware_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_ResourceLoaderAware_instance_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_ResourceLoaderAware_inform(t_ResourceLoaderAware *self, PyObject *arg);

          static PyMethodDef t_ResourceLoaderAware__methods_[] = {
            DECLARE_METHOD(t_ResourceLoaderAware, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_ResourceLoaderAware, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_ResourceLoaderAware, inform, METH_O),
            { NULL, NULL, 0, NULL }
          };

          static PyType_Slot PY_TYPE_SLOTS(ResourceLoaderAware)[] = {
            { Py_tp_methods, t_ResourceLoaderAware__methods_ },
            { Py_tp_init, (void *) abstract_init },
            { 0, NULL }
          };

          static PyType_Def *PY_TYPE_BASES(ResourceLoaderAware)[] = {
            &PY_TYPE_DEF(::java::lang::Object),
            NULL
          };

          DEFINE_TYPE(ResourceLoaderAware, t_ResourceLoaderAware, ResourceLoaderAware);

          void t_ResourceLoaderAware::install(PyObject *module)
          {
            installType(&PY_TYPE(ResourceLoaderAware), &PY_TYPE_DEF(ResourceLoaderAware), module, "ResourceLoaderAware", 0);
          }

          void t_ResourceLoaderAware::initialize(PyObject *module)
          {
            PyObject_SetAttrString((PyObject *) PY_TYPE(ResourceLoaderAware), "class_", make_descriptor(ResourceLoaderAware::initializeClass, 1));
            PyObject_SetAttrString((PyObject *) PY_TYPE(ResourceLoaderAware), "wrapfn_", make_descriptor(t_ResourceLoaderAware::wrap_jobject));
            PyObject_SetAttrString((PyObject *) PY_TYPE(ResourceLoaderAware), "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_ResourceLoaderAware_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, ResourceLoaderAware::initializeClass, 1)))
              return NULL;
            return t_ResourceLoaderAware::wrap_Object(ResourceLoaderAware(((t_ResourceLoaderAware *) arg)->object.this$));
          }
          static PyObject *t_ResourceLoaderAware_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, ResourceLoaderAware::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static PyObject *t_ResourceLoaderAware_inform(t_ResourceLoaderAware *self, PyObject *arg)
          {
            ::org::apache::lucene::analysis::util::ResourceLoader a0((jobject) NULL);

            if (!parseArg(arg, "k", ::org::apache::lucene::analysis::util::ResourceLoader::initializeClass, &a0))
            {
              OBJ_CALL(self->object.inform(a0));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError((PyObject *) self, "inform", arg);
            return NULL;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/index/PrefixCodedTerms.h"
#include "org/apache/lucene/index/PrefixCodedTerms$TermIterator.h"
#include "org/apache/lucene/util/Accountable.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {

        ::java::lang::Class *PrefixCodedTerms::class$ = NULL;
        jmethodID *PrefixCodedTerms::mids$ = NULL;
        bool PrefixCodedTerms::live$ = false;

        jclass PrefixCodedTerms::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/index/PrefixCodedTerms");

            mids$ = new jmethodID[max_mid];
            mids$[mid_equals_8b72f2dcdde6fd1d] = env->getMethodID(cls, "equals", "(Ljava/lang/Object;)Z");
            mids$[mid_hashCode_9972fcc56b44e79d] = env->getMethodID(cls, "hashCode", "()I");
            mids$[mid_iterator_529a050a847d8669] = env->getMethodID(cls, "iterator", "()Lorg/apache/lucene/index/PrefixCodedTerms$TermIterator;");
            mids$[mid_ramBytesUsed_2e5ae9edcb9b072f] = env->getMethodID(cls, "ramBytesUsed", "()J");
            mids$[mid_setDelGen_9c778c9bce6694df] = env->getMethodID(cls, "setDelGen", "(J)V");
            mids$[mid_size_2e5ae9edcb9b072f] = env->getMethodID(cls, "size", "()J");

            class$ = new ::java::lang::Class(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        jboolean PrefixCodedTerms::equals(const ::java::lang::Object & a0) const
        {
          return env->callBooleanMethod(this$, mids$[mid_equals_8b72f2dcdde6fd1d], a0.this$);
        }

        jint PrefixCodedTerms::hashCode() const
        {
          return env->callIntMethod(this$, mids$[mid_hashCode_9972fcc56b44e79d]);
        }

        ::org::apache::lucene::index::PrefixCodedTerms$TermIterator PrefixCodedTerms::iterator() const
        {
          return ::org::apache::lucene::index::PrefixCodedTerms$TermIterator(env->callObjectMethod(this$, mids$[mid_iterator_529a050a847d8669]));
        }

        jlong PrefixCodedTerms::ramBytesUsed() const
        {
          return env->callLongMethod(this$, mids$[mid_ramBytesUsed_2e5ae9edcb9b072f]);
        }

        void PrefixCodedTerms::setDelGen(jlong a0) const
        {
          env->callVoidMethod(this$, mids$[mid_setDelGen_9c778c9bce6694df], a0);
        }

        jlong PrefixCodedTerms::size() const
        {
          return env->callLongMethod(this$, mids$[mid_size_2e5ae9edcb9b072f]);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"
#include "org/apache/lucene/index/PrefixCodedTerms$Builder.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {
        static PyObject *t_PrefixCodedTerms_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_PrefixCodedTerms_instance_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_PrefixCodedTerms_equals(t_PrefixCodedTerms *self, PyObject *args);
        static PyObject *t_PrefixCodedTerms_hashCode(t_PrefixCodedTerms *self, PyObject *args);
        static PyObject *t_PrefixCodedTerms_iterator(t_PrefixCodedTerms *self);
        static PyObject *t_PrefixCodedTerms_ramBytesUsed(t_PrefixCodedTerms *self);
        static PyObject *t_PrefixCodedTerms_setDelGen(t_PrefixCodedTerms *self, PyObject *arg);
        static PyObject *t_PrefixCodedTerms_size(t_PrefixCodedTerms *self);
        static int t_PrefixCodedTerms_set__delGen(t_PrefixCodedTerms *self, PyObject *arg, void *data);
        static PyGetSetDef t_PrefixCodedTerms__fields_[] = {
          DECLARE_SET_FIELD(t_PrefixCodedTerms, delGen),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_PrefixCodedTerms__methods_[] = {
          DECLARE_METHOD(t_PrefixCodedTerms, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_PrefixCodedTerms, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_PrefixCodedTerms, equals, METH_VARARGS),
          DECLARE_METHOD(t_PrefixCodedTerms, hashCode, METH_VARARGS),
          DECLARE_METHOD(t_PrefixCodedTerms, iterator, METH_NOARGS),
          DECLARE_METHOD(t_PrefixCodedTerms, ramBytesUsed, METH_NOARGS),
          DECLARE_METHOD(t_PrefixCodedTerms, setDelGen, METH_O),
          DECLARE_METHOD(t_PrefixCodedTerms, size, METH_NOARGS),
          { NULL, NULL, 0, NULL }
        };

        static PyType_Slot PY_TYPE_SLOTS(PrefixCodedTerms)[] = {
          { Py_tp_methods, t_PrefixCodedTerms__methods_ },
          { Py_tp_init, (void *) abstract_init },
          { Py_tp_getset, t_PrefixCodedTerms__fields_ },
          { 0, NULL }
        };

        static PyType_Def *PY_TYPE_BASES(PrefixCodedTerms)[] = {
          &PY_TYPE_DEF(::java::lang::Object),
          NULL
        };

        DEFINE_TYPE(PrefixCodedTerms, t_PrefixCodedTerms, PrefixCodedTerms);

        void t_PrefixCodedTerms::install(PyObject *module)
        {
          installType(&PY_TYPE(PrefixCodedTerms), &PY_TYPE_DEF(PrefixCodedTerms), module, "PrefixCodedTerms", 0);
          PyObject_SetAttrString((PyObject *) PY_TYPE(PrefixCodedTerms), "TermIterator", make_descriptor(&PY_TYPE_DEF(PrefixCodedTerms$TermIterator)));
          PyObject_SetAttrString((PyObject *) PY_TYPE(PrefixCodedTerms), "Builder", make_descriptor(&PY_TYPE_DEF(PrefixCodedTerms$Builder)));
        }

        void t_PrefixCodedTerms::initialize(PyObject *module)
        {
          PyObject_SetAttrString((PyObject *) PY_TYPE(PrefixCodedTerms), "class_", make_descriptor(PrefixCodedTerms::initializeClass, 1));
          PyObject_SetAttrString((PyObject *) PY_TYPE(PrefixCodedTerms), "wrapfn_", make_descriptor(t_PrefixCodedTerms::wrap_jobject));
          PyObject_SetAttrString((PyObject *) PY_TYPE(PrefixCodedTerms), "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_PrefixCodedTerms_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, PrefixCodedTerms::initializeClass, 1)))
            return NULL;
          return t_PrefixCodedTerms::wrap_Object(PrefixCodedTerms(((t_PrefixCodedTerms *) arg)->object.this$));
        }
        static PyObject *t_PrefixCodedTerms_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, PrefixCodedTerms::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static PyObject *t_PrefixCodedTerms_equals(t_PrefixCodedTerms *self, PyObject *args)
        {
          ::java::lang::Object a0((jobject) NULL);
          jboolean result;

          if (!parseArgs(args, "o", &a0))
          {
            OBJ_CALL(result = self->object.equals(a0));
            Py_RETURN_BOOL(result);
          }

          return callSuper(PY_TYPE(PrefixCodedTerms), (PyObject *) self, "equals", args, 2);
        }

        static PyObject *t_PrefixCodedTerms_hashCode(t_PrefixCodedTerms *self, PyObject *args)
        {
          jint result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.hashCode());
            return PyLong_FromLong((long) result);
          }

          return callSuper(PY_TYPE(PrefixCodedTerms), (PyObject *) self, "hashCode", args, 2);
        }

        static PyObject *t_PrefixCodedTerms_iterator(t_PrefixCodedTerms *self)
        {
          ::org::apache::lucene::index::PrefixCodedTerms$TermIterator result((jobject) NULL);
          OBJ_CALL(result = self->object.iterator());
          return ::org::apache::lucene::index::t_PrefixCodedTerms$TermIterator::wrap_Object(result);
        }

        static PyObject *t_PrefixCodedTerms_ramBytesUsed(t_PrefixCodedTerms *self)
        {
          jlong result;
          OBJ_CALL(result = self->object.ramBytesUsed());
          return PyLong_FromLongLong((PY_LONG_LONG) result);
        }

        static PyObject *t_PrefixCodedTerms_setDelGen(t_PrefixCodedTerms *self, PyObject *arg)
        {
          jlong a0;

          if (!parseArg(arg, "J", &a0))
          {
            OBJ_CALL(self->object.setDelGen(a0));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "setDelGen", arg);
          return NULL;
        }

        static PyObject *t_PrefixCodedTerms_size(t_PrefixCodedTerms *self)
        {
          jlong result;
          OBJ_CALL(result = self->object.size());
          return PyLong_FromLongLong((PY_LONG_LONG) result);
        }

        static int t_PrefixCodedTerms_set__delGen(t_PrefixCodedTerms *self, PyObject *arg, void *data)
        {
          {
            jlong value;
            if (!parseArg(arg, "J", &value))
            {
              INT_CALL(self->object.setDelGen(value));
              return 0;
            }
          }
          PyErr_SetArgsError((PyObject *) self, "delGen", arg);
          return -1;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/codecs/uniformsplit/FSTDictionary$BrowserSupplier.h"
#include "org/apache/lucene/store/IndexInput.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/codecs/uniformsplit/IndexDictionary$Browser.h"
#include "org/apache/lucene/codecs/uniformsplit/BlockDecoder.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/codecs/uniformsplit/IndexDictionary$BrowserSupplier.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace codecs {
        namespace uniformsplit {

          ::java::lang::Class *FSTDictionary$BrowserSupplier::class$ = NULL;
          jmethodID *FSTDictionary$BrowserSupplier::mids$ = NULL;
          bool FSTDictionary$BrowserSupplier::live$ = false;

          jclass FSTDictionary$BrowserSupplier::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/codecs/uniformsplit/FSTDictionary$BrowserSupplier");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_225b02013f5e3107] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/store/IndexInput;JLorg/apache/lucene/codecs/uniformsplit/BlockDecoder;Z)V");
              mids$[mid_get_f36d038b8a827a9e] = env->getMethodID(cls, "get", "()Lorg/apache/lucene/codecs/uniformsplit/IndexDictionary$Browser;");
              mids$[mid_ramBytesUsed_2e5ae9edcb9b072f] = env->getMethodID(cls, "ramBytesUsed", "()J");

              class$ = new ::java::lang::Class(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          FSTDictionary$BrowserSupplier::FSTDictionary$BrowserSupplier(const ::org::apache::lucene::store::IndexInput & a0, jlong a1, const ::org::apache::lucene::codecs::uniformsplit::BlockDecoder & a2, jboolean a3) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_225b02013f5e3107, a0.this$, a1, a2.this$, a3)) {}

          ::org::apache::lucene::codecs::uniformsplit::IndexDictionary$Browser FSTDictionary$BrowserSupplier::get() const
          {
            return ::org::apache::lucene::codecs::uniformsplit::IndexDictionary$Browser(env->callObjectMethod(this$, mids$[mid_get_f36d038b8a827a9e]));
          }

          jlong FSTDictionary$BrowserSupplier::ramBytesUsed() const
          {
            return env->callLongMethod(this$, mids$[mid_ramBytesUsed_2e5ae9edcb9b072f]);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace codecs {
        namespace uniformsplit {
          static PyObject *t_FSTDictionary$BrowserSupplier_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_FSTDictionary$BrowserSupplier_instance_(PyTypeObject *type, PyObject *arg);
          static int t_FSTDictionary$BrowserSupplier_init_(t_FSTDictionary$BrowserSupplier *self, PyObject *args, PyObject *kwds);
          static PyObject *t_FSTDictionary$BrowserSupplier_get(t_FSTDictionary$BrowserSupplier *self);
          static PyObject *t_FSTDictionary$BrowserSupplier_ramBytesUsed(t_FSTDictionary$BrowserSupplier *self);

          static PyMethodDef t_FSTDictionary$BrowserSupplier__methods_[] = {
            DECLARE_METHOD(t_FSTDictionary$BrowserSupplier, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_FSTDictionary$BrowserSupplier, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_FSTDictionary$BrowserSupplier, get, METH_NOARGS),
            DECLARE_METHOD(t_FSTDictionary$BrowserSupplier, ramBytesUsed, METH_NOARGS),
            { NULL, NULL, 0, NULL }
          };

          static PyType_Slot PY_TYPE_SLOTS(FSTDictionary$BrowserSupplier)[] = {
            { Py_tp_methods, t_FSTDictionary$BrowserSupplier__methods_ },
            { Py_tp_init, (void *) t_FSTDictionary$BrowserSupplier_init_ },
            { 0, NULL }
          };

          static PyType_Def *PY_TYPE_BASES(FSTDictionary$BrowserSupplier)[] = {
            &PY_TYPE_DEF(::java::lang::Object),
            NULL
          };

          DEFINE_TYPE(FSTDictionary$BrowserSupplier, t_FSTDictionary$BrowserSupplier, FSTDictionary$BrowserSupplier);

          void t_FSTDictionary$BrowserSupplier::install(PyObject *module)
          {
            installType(&PY_TYPE(FSTDictionary$BrowserSupplier), &PY_TYPE_DEF(FSTDictionary$BrowserSupplier), module, "FSTDictionary$BrowserSupplier", 0);
          }

          void t_FSTDictionary$BrowserSupplier::initialize(PyObject *module)
          {
            PyObject_SetAttrString((PyObject *) PY_TYPE(FSTDictionary$BrowserSupplier), "class_", make_descriptor(FSTDictionary$BrowserSupplier::initializeClass, 1));
            PyObject_SetAttrString((PyObject *) PY_TYPE(FSTDictionary$BrowserSupplier), "wrapfn_", make_descriptor(t_FSTDictionary$BrowserSupplier::wrap_jobject));
            PyObject_SetAttrString((PyObject *) PY_TYPE(FSTDictionary$BrowserSupplier), "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_FSTDictionary$BrowserSupplier_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, FSTDictionary$BrowserSupplier::initializeClass, 1)))
              return NULL;
            return t_FSTDictionary$BrowserSupplier::wrap_Object(FSTDictionary$BrowserSupplier(((t_FSTDictionary$BrowserSupplier *) arg)->object.this$));
          }
          static PyObject *t_FSTDictionary$BrowserSupplier_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, FSTDictionary$BrowserSupplier::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_FSTDictionary$BrowserSupplier_init_(t_FSTDictionary$BrowserSupplier *self, PyObject *args, PyObject *kwds)
          {
            ::org::apache::lucene::store::IndexInput a0((jobject) NULL);
            jlong a1;
            ::org::apache::lucene::codecs::uniformsplit::BlockDecoder a2((jobject) NULL);
            jboolean a3;
            FSTDictionary$BrowserSupplier object((jobject) NULL);

            if (!parseArgs(args, "kJkZ", ::org::apache::lucene::store::IndexInput::initializeClass, ::org::apache::lucene::codecs::uniformsplit::BlockDecoder::initializeClass, &a0, &a1, &a2, &a3))
            {
              INT_CALL(object = FSTDictionary$BrowserSupplier(a0, a1, a2, a3));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_FSTDictionary$BrowserSupplier_get(t_FSTDictionary$BrowserSupplier *self)
          {
            ::org::apache::lucene::codecs::uniformsplit::IndexDictionary$Browser result((jobject) NULL);
            OBJ_CALL(result = self->object.get());
            return ::org::apache::lucene::codecs::uniformsplit::t_IndexDictionary$Browser::wrap_Object(result);
          }

          static PyObject *t_FSTDictionary$BrowserSupplier_ramBytesUsed(t_FSTDictionary$BrowserSupplier *self)
          {
            jlong result;
            OBJ_CALL(result = self->object.ramBytesUsed());
            return PyLong_FromLongLong((PY_LONG_LONG) result);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/ja/tokenattributes/BaseFormAttribute.h"
#include "java/lang/String.h"
#include "org/apache/lucene/analysis/ja/Token.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace ja {
          namespace tokenattributes {

            ::java::lang::Class *BaseFormAttribute::class$ = NULL;
            jmethodID *BaseFormAttribute::mids$ = NULL;
            bool BaseFormAttribute::live$ = false;

            jclass BaseFormAttribute::initializeClass(bool getOnly)
            {
              if (getOnly)
                return (jclass) (live$ ? class$->this$ : NULL);
              if (class$ == NULL)
              {
                jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/ja/tokenattributes/BaseFormAttribute");

                mids$ = new jmethodID[max_mid];
                mids$[mid_getBaseForm_db9b55ba01e03e4b] = env->getMethodID(cls, "getBaseForm", "()Ljava/lang/String;");
                mids$[mid_setToken_e7eb8cf5a63e4354] = env->getMethodID(cls, "setToken", "(Lorg/apache/lucene/analysis/ja/Token;)V");

                class$ = new ::java::lang::Class(cls);
                live$ = true;
              }
              return (jclass) class$->this$;
            }

            ::java::lang::String BaseFormAttribute::getBaseForm() const
            {
              return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_getBaseForm_db9b55ba01e03e4b]));
            }

            void BaseFormAttribute::setToken(const ::org::apache::lucene::analysis::ja::Token & a0) const
            {
              env->callVoidMethod(this$, mids$[mid_setToken_e7eb8cf5a63e4354], a0.this$);
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace ja {
          namespace tokenattributes {
            static PyObject *t_BaseFormAttribute_cast_(PyTypeObject *type, PyObject *arg);
            static PyObject *t_BaseFormAttribute_instance_(PyTypeObject *type, PyObject *arg);
            static PyObject *t_BaseFormAttribute_getBaseForm(t_BaseFormAttribute *self);
            static PyObject *t_BaseFormAttribute_setToken(t_BaseFormAttribute *self, PyObject *arg);
            static PyObject *t_BaseFormAttribute_get__baseForm(t_BaseFormAttribute *self, void *data);
            static int t_BaseFormAttribute_set__token(t_BaseFormAttribute *self, PyObject *arg, void *data);
            static PyGetSetDef t_BaseFormAttribute__fields_[] = {
              DECLARE_GET_FIELD(t_BaseFormAttribute, baseForm),
              DECLARE_SET_FIELD(t_BaseFormAttribute, token),
              { NULL, NULL, NULL, NULL, NULL }
            };

            static PyMethodDef t_BaseFormAttribute__methods_[] = {
              DECLARE_METHOD(t_BaseFormAttribute, cast_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_BaseFormAttribute, instance_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_BaseFormAttribute, getBaseForm, METH_NOARGS),
              DECLARE_METHOD(t_BaseFormAttribute, setToken, METH_O),
              { NULL, NULL, 0, NULL }
            };

            static PyType_Slot PY_TYPE_SLOTS(BaseFormAttribute)[] = {
              { Py_tp_methods, t_BaseFormAttribute__methods_ },
              { Py_tp_init, (void *) abstract_init },
              { Py_tp_getset, t_BaseFormAttribute__fields_ },
              { 0, NULL }
            };

            static PyType_Def *PY_TYPE_BASES(BaseFormAttribute)[] = {
              &PY_TYPE_DEF(::org::apache::lucene::util::Attribute),
              NULL
            };

            DEFINE_TYPE(BaseFormAttribute, t_BaseFormAttribute, BaseFormAttribute);

            void t_BaseFormAttribute::install(PyObject *module)
            {
              installType(&PY_TYPE(BaseFormAttribute), &PY_TYPE_DEF(BaseFormAttribute), module, "BaseFormAttribute", 0);
            }

            void t_BaseFormAttribute::initialize(PyObject *module)
            {
              PyObject_SetAttrString((PyObject *) PY_TYPE(BaseFormAttribute), "class_", make_descriptor(BaseFormAttribute::initializeClass, 1));
              PyObject_SetAttrString((PyObject *) PY_TYPE(BaseFormAttribute), "wrapfn_", make_descriptor(t_BaseFormAttribute::wrap_jobject));
              PyObject_SetAttrString((PyObject *) PY_TYPE(BaseFormAttribute), "boxfn_", make_descriptor(boxObject));
            }

            static PyObject *t_BaseFormAttribute_cast_(PyTypeObject *type, PyObject *arg)
            {
              if (!(arg = castCheck(arg, BaseFormAttribute::initializeClass, 1)))
                return NULL;
              return t_BaseFormAttribute::wrap_Object(BaseFormAttribute(((t_BaseFormAttribute *) arg)->object.this$));
            }
            static PyObject *t_BaseFormAttribute_instance_(PyTypeObject *type, PyObject *arg)
            {
              if (!castCheck(arg, BaseFormAttribute::initializeClass, 0))
                Py_RETURN_FALSE;
              Py_RETURN_TRUE;
            }

            static PyObject *t_BaseFormAttribute_getBaseForm(t_BaseFormAttribute *self)
            {
              ::java::lang::String result((jobject) NULL);
              OBJ_CALL(result = self->object.getBaseForm());
              return j2p(result);
            }

            static PyObject *t_BaseFormAttribute_setToken(t_BaseFormAttribute *self, PyObject *arg)
            {
              ::org::apache::lucene::analysis::ja::Token a0((jobject) NULL);

              if (!parseArg(arg, "k", ::org::apache::lucene::analysis::ja::Token::initializeClass, &a0))
              {
                OBJ_CALL(self->object.setToken(a0));
                Py_RETURN_NONE;
              }

              PyErr_SetArgsError((PyObject *) self, "setToken", arg);
              return NULL;
            }

            static PyObject *t_BaseFormAttribute_get__baseForm(t_BaseFormAttribute *self, void *data)
            {
              ::java::lang::String value((jobject) NULL);
              OBJ_CALL(value = self->object.getBaseForm());
              return j2p(value);
            }

            static int t_BaseFormAttribute_set__token(t_BaseFormAttribute *self, PyObject *arg, void *data)
            {
              {
                ::org::apache::lucene::analysis::ja::Token value((jobject) NULL);
                if (!parseArg(arg, "k", ::org::apache::lucene::analysis::ja::Token::initializeClass, &value))
                {
                  INT_CALL(self->object.setToken(value));
                  return 0;
                }
              }
              PyErr_SetArgsError((PyObject *) self, "token", arg);
              return -1;
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/similarities/BooleanSimilarity.h"
#include "org/apache/lucene/search/similarities/Similarity$SimScorer.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/search/TermStatistics.h"
#include "org/apache/lucene/index/FieldInvertState.h"
#include "org/apache/lucene/search/CollectionStatistics.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace similarities {

          ::java::lang::Class *BooleanSimilarity::class$ = NULL;
          jmethodID *BooleanSimilarity::mids$ = NULL;
          bool BooleanSimilarity::live$ = false;

          jclass BooleanSimilarity::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/search/similarities/BooleanSimilarity");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_f2cc1bce94666404] = env->getMethodID(cls, "<init>", "()V");
              mids$[mid_computeNorm_6ec3269102920d7a] = env->getMethodID(cls, "computeNorm", "(Lorg/apache/lucene/index/FieldInvertState;)J");
              mids$[mid_scorer_a010a2835e08a10c] = env->getMethodID(cls, "scorer", "(FLorg/apache/lucene/search/CollectionStatistics;[Lorg/apache/lucene/search/TermStatistics;)Lorg/apache/lucene/search/similarities/Similarity$SimScorer;");

              class$ = new ::java::lang::Class(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          BooleanSimilarity::BooleanSimilarity() : ::org::apache::lucene::search::similarities::Similarity(env->newObject(initializeClass, &mids$, mid_init$_f2cc1bce94666404)) {}

          jlong BooleanSimilarity::computeNorm(const ::org::apache::lucene::index::FieldInvertState & a0) const
          {
            return env->callLongMethod(this$, mids$[mid_computeNorm_6ec3269102920d7a], a0.this$);
          }

          ::org::apache::lucene::search::similarities::Similarity$SimScorer BooleanSimilarity::scorer(jfloat a0, const ::org::apache::lucene::search::CollectionStatistics & a1, const JArray< ::org::apache::lucene::search::TermStatistics > & a2) const
          {
            return ::org::apache::lucene::search::similarities::Similarity$SimScorer(env->callObjectMethod(this$, mids$[mid_scorer_a010a2835e08a10c], a0, a1.this$, a2.this$));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace similarities {
          static PyObject *t_BooleanSimilarity_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_BooleanSimilarity_instance_(PyTypeObject *type, PyObject *arg);
          static int t_BooleanSimilarity_init_(t_BooleanSimilarity *self, PyObject *args, PyObject *kwds);
          static PyObject *t_BooleanSimilarity_computeNorm(t_BooleanSimilarity *self, PyObject *args);
          static PyObject *t_BooleanSimilarity_scorer(t_BooleanSimilarity *self, PyObject *args);

          static PyMethodDef t_BooleanSimilarity__methods_[] = {
            DECLARE_METHOD(t_BooleanSimilarity, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_BooleanSimilarity, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_BooleanSimilarity, computeNorm, METH_VARARGS),
            DECLARE_METHOD(t_BooleanSimilarity, scorer, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          static PyType_Slot PY_TYPE_SLOTS(BooleanSimilarity)[] = {
            { Py_tp_methods, t_BooleanSimilarity__methods_ },
            { Py_tp_init, (void *) t_BooleanSimilarity_init_ },
            { 0, NULL }
          };

          static PyType_Def *PY_TYPE_BASES(BooleanSimilarity)[] = {
            &PY_TYPE_DEF(::org::apache::lucene::search::similarities::Similarity),
            NULL
          };

          DEFINE_TYPE(BooleanSimilarity, t_BooleanSimilarity, BooleanSimilarity);

          void t_BooleanSimilarity::install(PyObject *module)
          {
            installType(&PY_TYPE(BooleanSimilarity), &PY_TYPE_DEF(BooleanSimilarity), module, "BooleanSimilarity", 0);
          }

          void t_BooleanSimilarity::initialize(PyObject *module)
          {
            PyObject_SetAttrString((PyObject *) PY_TYPE(BooleanSimilarity), "class_", make_descriptor(BooleanSimilarity::initializeClass, 1));
            PyObject_SetAttrString((PyObject *) PY_TYPE(BooleanSimilarity), "wrapfn_", make_descriptor(t_BooleanSimilarity::wrap_jobject));
            PyObject_SetAttrString((PyObject *) PY_TYPE(BooleanSimilarity), "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_BooleanSimilarity_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, BooleanSimilarity::initializeClass, 1)))
              return NULL;
            return t_BooleanSimilarity::wrap_Object(BooleanSimilarity(((t_BooleanSimilarity *) arg)->object.this$));
          }
          static PyObject *t_BooleanSimilarity_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, BooleanSimilarity::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_BooleanSimilarity_init_(t_BooleanSimilarity *self, PyObject *args, PyObject *kwds)
          {
            BooleanSimilarity object((jobject) NULL);

            INT_CALL(object = BooleanSimilarity());
            self->object = object;

            return 0;
          }

          static PyObject *t_BooleanSimilarity_computeNorm(t_BooleanSimilarity *self, PyObject *args)
          {
            ::org::apache::lucene::index::FieldInvertState a0((jobject) NULL);
            jlong result;

            if (!parseArgs(args, "k", ::org::apache::lucene::index::FieldInvertState::initializeClass, &a0))
            {
              OBJ_CALL(result = self->object.computeNorm(a0));
              return PyLong_FromLongLong((PY_LONG_LONG) result);
            }

            return callSuper(PY_TYPE(BooleanSimilarity), (PyObject *) self, "computeNorm", args, 2);
          }

          static PyObject *t_BooleanSimilarity_scorer(t_BooleanSimilarity *self, PyObject *args)
          {
            jfloat a0;
            ::org::apache::lucene::search::CollectionStatistics a1((jobject) NULL);
            JArray< ::org::apache::lucene::search::TermStatistics > a2((jobject) NULL);
            ::org::apache::lucene::search::similarities::Similarity$SimScorer result((jobject) NULL);

            if (!parseArgs(args, "Fk[k", ::org::apache::lucene::search::CollectionStatistics::initializeClass, ::org::apache::lucene::search::TermStatistics::initializeClass, &a0, &a1, &a2))
            {
              OBJ_CALL(result = self->object.scorer(a0, a1, a2));
              return ::org::apache::lucene::search::similarities::t_Similarity$SimScorer::wrap_Object(result);
            }

            return callSuper(PY_TYPE(BooleanSimilarity), (PyObject *) self, "scorer", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/tokenattributes/BytesTermAttribute.h"
#include "org/apache/lucene/util/BytesRef.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace tokenattributes {

          ::java::lang::Class *BytesTermAttribute::class$ = NULL;
          jmethodID *BytesTermAttribute::mids$ = NULL;
          bool BytesTermAttribute::live$ = false;

          jclass BytesTermAttribute::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/tokenattributes/BytesTermAttribute");

              mids$ = new jmethodID[max_mid];
              mids$[mid_setBytesRef_0bdfd2603b7490a8] = env->getMethodID(cls, "setBytesRef", "(Lorg/apache/lucene/util/BytesRef;)V");

              class$ = new ::java::lang::Class(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          void BytesTermAttribute::setBytesRef(const ::org::apache::lucene::util::BytesRef & a0) const
          {
            env->callVoidMethod(this$, mids$[mid_setBytesRef_0bdfd2603b7490a8], a0.this$);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace tokenattributes {
          static PyObject *t_BytesTermAttribute_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_BytesTermAttribute_instance_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_BytesTermAttribute_setBytesRef(t_BytesTermAttribute *self, PyObject *arg);
          static int t_BytesTermAttribute_set__bytesRef(t_BytesTermAttribute *self, PyObject *arg, void *data);
          static PyGetSetDef t_BytesTermAttribute__fields_[] = {
            DECLARE_SET_FIELD(t_BytesTermAttribute, bytesRef),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_BytesTermAttribute__methods_[] = {
            DECLARE_METHOD(t_BytesTermAttribute, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_BytesTermAttribute, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_BytesTermAttribute, setBytesRef, METH_O),
            { NULL, NULL, 0, NULL }
          };

          static PyType_Slot PY_TYPE_SLOTS(BytesTermAttribute)[] = {
            { Py_tp_methods, t_BytesTermAttribute__methods_ },
            { Py_tp_init, (void *) abstract_init },
            { Py_tp_getset, t_BytesTermAttribute__fields_ },
            { 0, NULL }
          };

          static PyType_Def *PY_TYPE_BASES(BytesTermAttribute)[] = {
            &PY_TYPE_DEF(::org::apache::lucene::analysis::tokenattributes::TermToBytesRefAttribute),
            NULL
          };

          DEFINE_TYPE(BytesTermAttribute, t_BytesTermAttribute, BytesTermAttribute);

          void t_BytesTermAttribute::install(PyObject *module)
          {
            installType(&PY_TYPE(BytesTermAttribute), &PY_TYPE_DEF(BytesTermAttribute), module, "BytesTermAttribute", 0);
          }

          void t_BytesTermAttribute::initialize(PyObject *module)
          {
            PyObject_SetAttrString((PyObject *) PY_TYPE(BytesTermAttribute), "class_", make_descriptor(BytesTermAttribute::initializeClass, 1));
            PyObject_SetAttrString((PyObject *) PY_TYPE(BytesTermAttribute), "wrapfn_", make_descriptor(t_BytesTermAttribute::wrap_jobject));
            PyObject_SetAttrString((PyObject *) PY_TYPE(BytesTermAttribute), "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_BytesTermAttribute_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, BytesTermAttribute::initializeClass, 1)))
              return NULL;
            return t_BytesTermAttribute::wrap_Object(BytesTermAttribute(((t_BytesTermAttribute *) arg)->object.this$));
          }
          static PyObject *t_BytesTermAttribute_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, BytesTermAttribute::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static PyObject *t_BytesTermAttribute_setBytesRef(t_BytesTermAttribute *self, PyObject *arg)
          {
            ::org::apache::lucene::util::BytesRef a0((jobject) NULL);

            if (!parseArg(arg, "k", ::org::apache::lucene::util::BytesRef::initializeClass, &a0))
            {
              OBJ_CALL(self->object.setBytesRef(a0));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError((PyObject *) self, "setBytesRef", arg);
            return NULL;
          }

          static int t_BytesTermAttribute_set__bytesRef(t_BytesTermAttribute *self, PyObject *arg, void *data)
          {
            {
              ::org::apache::lucene::util::BytesRef value((jobject) NULL);
              if (!parseArg(arg, "k", ::org::apache::lucene::util::BytesRef::initializeClass, &value))
              {
                INT_CALL(self->object.setBytesRef(value));
                return 0;
              }
            }
            PyErr_SetArgsError((PyObject *) self, "bytesRef", arg);
            return -1;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/classification/BooleanPerceptronClassifier.h"
#include "org/apache/lucene/index/IndexReader.h"
#include "org/apache/lucene/classification/Classifier.h"
#include "org/apache/lucene/classification/ClassificationResult.h"
#include "org/apache/lucene/analysis/Analyzer.h"
#include "java/lang/Class.h"
#include "java/lang/Double.h"
#include "java/lang/Integer.h"
#include "java/lang/String.h"
#include "org/apache/lucene/search/Query.h"
#include "java/io/IOException.h"
#include "java/util/List.h"
#include "java/lang/Boolean.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace classification {

        ::java::lang::Class *BooleanPerceptronClassifier::class$ = NULL;
        jmethodID *BooleanPerceptronClassifier::mids$ = NULL;
        bool BooleanPerceptronClassifier::live$ = false;

        jclass BooleanPerceptronClassifier::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/classification/BooleanPerceptronClassifier");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_fef2a87409ea0603] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/index/IndexReader;Lorg/apache/lucene/analysis/Analyzer;Lorg/apache/lucene/search/Query;Ljava/lang/Integer;Ljava/lang/Double;Ljava/lang/String;Ljava/lang/String;)V");
            mids$[mid_assignClass_5edc036bda71a93d] = env->getMethodID(cls, "assignClass", "(Ljava/lang/String;)Lorg/apache/lucene/classification/ClassificationResult;");
            mids$[mid_getClasses_25278b4b3ab80e37] = env->getMethodID(cls, "getClasses", "(Ljava/lang/String;)Ljava/util/List;");
            mids$[mid_getClasses_a5d57c41d0cd0867] = env->getMethodID(cls, "getClasses", "(Ljava/lang/String;I)Ljava/util/List;");

            class$ = new ::java::lang::Class(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        BooleanPerceptronClassifier::BooleanPerceptronClassifier(const ::org::apache::lucene::index::IndexReader & a0, const ::org::apache::lucene::analysis::Analyzer & a1, const ::org::apache::lucene::search::Query & a2, const ::java::lang::Integer & a3, const ::java::lang::Double & a4, const ::java::lang::String & a5, const ::java::lang::String & a6) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_fef2a87409ea0603, a0.this$, a1.this$, a2.this$, a3.this$, a4.this$, a5.this$, a6.this$)) {}

        ::org::apache::lucene::classification::ClassificationResult BooleanPerceptronClassifier::assignClass(const ::java::lang::String & a0) const
        {
          return ::org::apache::lucene::classification::ClassificationResult(env->callObjectMethod(this$, mids$[mid_assignClass_5edc036bda71a93d], a0.this$));
        }

        ::java::util::List BooleanPerceptronClassifier::getClasses(const ::java::lang::String & a0) const
        {
          return ::java::util::List(env->callObjectMethod(this$, mids$[mid_getClasses_25278b4b3ab80e37], a0.this$));
        }

        ::java::util::List BooleanPerceptronClassifier::getClasses(const ::java::lang::String & a0, jint a1) const
        {
          return ::java::util::List(env->callObjectMethod(this$, mids$[mid_getClasses_a5d57c41d0cd0867], a0.this$, a1));
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace classification {
        static PyObject *t_BooleanPerceptronClassifier_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_BooleanPerceptronClassifier_instance_(PyTypeObject *type, PyObject *arg);
        static int t_BooleanPerceptronClassifier_init_(t_BooleanPerceptronClassifier *self, PyObject *args, PyObject *kwds);
        static PyObject *t_BooleanPerceptronClassifier_assignClass(t_BooleanPerceptronClassifier *self, PyObject *arg);
        static PyObject *t_BooleanPerceptronClassifier_getClasses(t_BooleanPerceptronClassifier *self, PyObject *args);

        static PyMethodDef t_BooleanPerceptronClassifier__methods_[] = {
          DECLARE_METHOD(t_BooleanPerceptronClassifier, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_BooleanPerceptronClassifier, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_BooleanPerceptronClassifier, assignClass, METH_O),
          DECLARE_METHOD(t_BooleanPerceptronClassifier, getClasses, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        static PyType_Slot PY_TYPE_SLOTS(BooleanPerceptronClassifier)[] = {
          { Py_tp_methods, t_BooleanPerceptronClassifier__methods_ },
          { Py_tp_init, (void *) t_BooleanPerceptronClassifier_init_ },
          { 0, NULL }
        };

        static PyType_Def *PY_TYPE_BASES(BooleanPerceptronClassifier)[] = {
          &PY_TYPE_DEF(::java::lang::Object),
          NULL
        };

        DEFINE_TYPE(BooleanPerceptronClassifier, t_BooleanPerceptronClassifier, BooleanPerceptronClassifier);

        void t_BooleanPerceptronClassifier::install(PyObject *module)
        {
          installType(&PY_TYPE(BooleanPerceptronClassifier), &PY_TYPE_DEF(BooleanPerceptronClassifier), module, "BooleanPerceptronClassifier", 0);
        }

        void t_BooleanPerceptronClassifier::initialize(PyObject *module)
        {
          PyObject_SetAttrString((PyObject *) PY_TYPE(BooleanPerceptronClassifier), "class_", make_descriptor(BooleanPerceptronClassifier::initializeClass, 1));
          PyObject_SetAttrString((PyObject *) PY_TYPE(BooleanPerceptronClassifier), "wrapfn_", make_descriptor(t_BooleanPerceptronClassifier::wrap_jobject));
          PyObject_SetAttrString((PyObject *) PY_TYPE(BooleanPerceptronClassifier), "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_BooleanPerceptronClassifier_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, BooleanPerceptronClassifier::initializeClass, 1)))
            return NULL;
          return t_BooleanPerceptronClassifier::wrap_Object(BooleanPerceptronClassifier(((t_BooleanPerceptronClassifier *) arg)->object.this$));
        }
        static PyObject *t_BooleanPerceptronClassifier_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, BooleanPerceptronClassifier::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_BooleanPerceptronClassifier_init_(t_BooleanPerceptronClassifier *self, PyObject *args, PyObject *kwds)
        {
          ::org::apache::lucene::index::IndexReader a0((jobject) NULL);
          ::org::apache::lucene::analysis::Analyzer a1((jobject) NULL);
          ::org::apache::lucene::search::Query a2((jobject) NULL);
          ::java::lang::Integer a3((jobject) NULL);
          ::java::lang::Double a4((jobject) NULL);
          ::java::lang::String a5((jobject) NULL);
          ::java::lang::String a6((jobject) NULL);
          BooleanPerceptronClassifier object((jobject) NULL);

          if (!parseArgs(args, "kkkOOss", ::org::apache::lucene::index::IndexReader::initializeClass, ::org::apache::lucene::analysis::Analyzer::initializeClass, ::org::apache::lucene::search::Query::initializeClass, ::java::lang::PY_TYPE(Integer), ::java::lang::PY_TYPE(Double), &a0, &a1, &a2, &a3, &a4, &a5, &a6))
          {
            INT_CALL(object = BooleanPerceptronClassifier(a0, a1, a2, a3, a4, a5, a6));
            self->object = object;
          }
          else
          {
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }

        static PyObject *t_BooleanPerceptronClassifier_assignClass(t_BooleanPerceptronClassifier *self, PyObject *arg)
        {
          ::java::lang::String a0((jobject) NULL);
          ::org::apache::lucene::classification::ClassificationResult result((jobject) NULL);

          if (!parseArg(arg, "s", &a0))
          {
            OBJ_CALL(result = self->object.assignClass(a0));
            return ::org::apache::lucene::classification::t_ClassificationResult::wrap_Object(result, ::java::lang::PY_TYPE(Boolean));
          }

          PyErr_SetArgsError((PyObject *) self, "assignClass", arg);
          return NULL;
        }

        static PyObject *t_BooleanPerceptronClassifier_getClasses(t_BooleanPerceptronClassifier *self, PyObject *args)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 1:
            {
              ::java::lang::String a0((jobject) NULL);
              ::java::util::List result((jobject) NULL);

              if (!parseArgs(args, "s", &a0))
              {
                OBJ_CALL(result = self->object.getClasses(a0));
                return ::java::util::t_List::wrap_Object(result);
              }
            }
            break;
           case 2:
            {
              ::java::lang::String a0((jobject) NULL);
              jint a1;
              ::java::util::List result((jobject) NULL);

              if (!parseArgs(args, "sI", &a0, &a1))
              {
                OBJ_CALL(result = self->object.getClasses(a0, a1));
                return ::java::util::t_List::wrap_Object(result);
              }
            }
          }

          PyErr_SetArgsError((PyObject *) self, "getClasses", args);
          return NULL;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/similarities/AxiomaticF3EXP.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace similarities {

          ::java::lang::Class *AxiomaticF3EXP::class$ = NULL;
          jmethodID *AxiomaticF3EXP::mids$ = NULL;
          bool AxiomaticF3EXP::live$ = false;

          jclass AxiomaticF3EXP::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/search/similarities/AxiomaticF3EXP");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_3cf0b46cc9375aa7] = env->getMethodID(cls, "<init>", "(FI)V");
              mids$[mid_init$_6d2f7945f0f05cec] = env->getMethodID(cls, "<init>", "(FIF)V");
              mids$[mid_toString_db9b55ba01e03e4b] = env->getMethodID(cls, "toString", "()Ljava/lang/String;");
              mids$[mid_idf_761ab1c432346fd0] = env->getMethodID(cls, "idf", "(Lorg/apache/lucene/search/similarities/BasicStats;DD)D");
              mids$[mid_gamma_761ab1c432346fd0] = env->getMethodID(cls, "gamma", "(Lorg/apache/lucene/search/similarities/BasicStats;DD)D");
              mids$[mid_tf_761ab1c432346fd0] = env->getMethodID(cls, "tf", "(Lorg/apache/lucene/search/similarities/BasicStats;DD)D");
              mids$[mid_idfExplain_77a68ba236144920] = env->getMethodID(cls, "idfExplain", "(Lorg/apache/lucene/search/similarities/BasicStats;DD)Lorg/apache/lucene/search/Explanation;");
              mids$[mid_tfln_761ab1c432346fd0] = env->getMethodID(cls, "tfln", "(Lorg/apache/lucene/search/similarities/BasicStats;DD)D");
              mids$[mid_tflnExplain_77a68ba236144920] = env->getMethodID(cls, "tflnExplain", "(Lorg/apache/lucene/search/similarities/BasicStats;DD)Lorg/apache/lucene/search/Explanation;");
              mids$[mid_ln_761ab1c432346fd0] = env->getMethodID(cls, "ln", "(Lorg/apache/lucene/search/similarities/BasicStats;DD)D");
              mids$[mid_lnExplain_77a68ba236144920] = env->getMethodID(cls, "lnExplain", "(Lorg/apache/lucene/search/similarities/BasicStats;DD)Lorg/apache/lucene/search/Explanation;");
              mids$[mid_tfExplain_77a68ba236144920] = env->getMethodID(cls, "tfExplain", "(Lorg/apache/lucene/search/similarities/BasicStats;DD)Lorg/apache/lucene/search/Explanation;");

              class$ = new ::java::lang::Class(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          AxiomaticF3EXP::AxiomaticF3EXP(jfloat a0, jint a1) : ::org::apache::lucene::search::similarities::Axiomatic(env->newObject(initializeClass, &mids$, mid_init$_3cf0b46cc9375aa7, a0, a1)) {}

          AxiomaticF3EXP::AxiomaticF3EXP(jfloat a0, jint a1, jfloat a2) : ::org::apache::lucene::search::similarities::Axiomatic(env->newObject(initializeClass, &mids$, mid_init$_6d2f7945f0f05cec, a0, a1, a2)) {}

          ::java::lang::String AxiomaticF3EXP::toString() const
          {
            return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_db9b55ba01e03e4b]));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace similarities {
          static PyObject *t_AxiomaticF3EXP_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_AxiomaticF3EXP_instance_(PyTypeObject *type, PyObject *arg);
          static int t_AxiomaticF3EXP_init_(t_AxiomaticF3EXP *self, PyObject *args, PyObject *kwds);
          static PyObject *t_AxiomaticF3EXP_toString(t_AxiomaticF3EXP *self, PyObject *args);

          static PyMethodDef t_AxiomaticF3EXP__methods_[] = {
            DECLARE_METHOD(t_AxiomaticF3EXP, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_AxiomaticF3EXP, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_AxiomaticF3EXP, toString, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          static PyType_Slot PY_TYPE_SLOTS(AxiomaticF3EXP)[] = {
            { Py_tp_methods, t_AxiomaticF3EXP__methods_ },
            { Py_tp_init, (void *) t_AxiomaticF3EXP_init_ },
            { 0, NULL }
          };

          static PyType_Def *PY_TYPE_BASES(AxiomaticF3EXP)[] = {
            &PY_TYPE_DEF(::org::apache::lucene::search::similarities::Axiomatic),
            NULL
          };

          DEFINE_TYPE(AxiomaticF3EXP, t_AxiomaticF3EXP, AxiomaticF3EXP);

          void t_AxiomaticF3EXP::install(PyObject *module)
          {
            installType(&PY_TYPE(AxiomaticF3EXP), &PY_TYPE_DEF(AxiomaticF3EXP), module, "AxiomaticF3EXP", 0);
          }

          void t_AxiomaticF3EXP::initialize(PyObject *module)
          {
            PyObject_SetAttrString((PyObject *) PY_TYPE(AxiomaticF3EXP), "class_", make_descriptor(AxiomaticF3EXP::initializeClass, 1));
            PyObject_SetAttrString((PyObject *) PY_TYPE(AxiomaticF3EXP), "wrapfn_", make_descriptor(t_AxiomaticF3EXP::wrap_jobject));
            PyObject_SetAttrString((PyObject *) PY_TYPE(AxiomaticF3EXP), "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_AxiomaticF3EXP_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, AxiomaticF3EXP::initializeClass, 1)))
              return NULL;
            return t_AxiomaticF3EXP::wrap_Object(AxiomaticF3EXP(((t_AxiomaticF3EXP *) arg)->object.this$));
          }
          static PyObject *t_AxiomaticF3EXP_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, AxiomaticF3EXP::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_AxiomaticF3EXP_init_(t_AxiomaticF3EXP *self, PyObject *args, PyObject *kwds)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 2:
              {
                jfloat a0;
                jint a1;
                AxiomaticF3EXP object((jobject) NULL);

                if (!parseArgs(args, "FI", &a0, &a1))
                {
                  INT_CALL(object = AxiomaticF3EXP(a0, a1));
                  self->object = object;
                  break;
                }
              }
              goto err;
             case 3:
              {
                jfloat a0;
                jint a1;
                jfloat a2;
                AxiomaticF3EXP object((jobject) NULL);

                if (!parseArgs(args, "FIF", &a0, &a1, &a2))
                {
                  INT_CALL(object = AxiomaticF3EXP(a0, a1, a2));
                  self->object = object;
                  break;
                }
              }
             default:
             err:
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_AxiomaticF3EXP_toString(t_AxiomaticF3EXP *self, PyObject *args)
          {
            ::java::lang::String result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.toString());
              return j2p(result);
            }

            return callSuper(PY_TYPE(AxiomaticF3EXP), (PyObject *) self, "toString", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queryparser/surround/query/SrndPrefixQuery.h"
#include "org/apache/lucene/index/IndexReader.h"
#include "org/apache/lucene/index/Term.h"
#include "java/lang/Class.h"
#include "java/lang/String.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/queryparser/surround/query/SimpleTerm$MatchingTermVisitor.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace surround {
          namespace query {

            ::java::lang::Class *SrndPrefixQuery::class$ = NULL;
            jmethodID *SrndPrefixQuery::mids$ = NULL;
            bool SrndPrefixQuery::live$ = false;

            jclass SrndPrefixQuery::initializeClass(bool getOnly)
            {
              if (getOnly)
                return (jclass) (live$ ? class$->this$ : NULL);
              if (class$ == NULL)
              {
                jclass cls = (jclass) env->findClass("org/apache/lucene/queryparser/surround/query/SrndPrefixQuery");

                mids$ = new jmethodID[max_mid];
                mids$[mid_init$_d34cb0333a2b441e] = env->getMethodID(cls, "<init>", "(Ljava/lang/String;ZC)V");
                mids$[mid_getLucenePrefixTerm_2f9dcfe885c5ffa0] = env->getMethodID(cls, "getLucenePrefixTerm", "(Ljava/lang/String;)Lorg/apache/lucene/index/Term;");
                mids$[mid_getPrefix_db9b55ba01e03e4b] = env->getMethodID(cls, "getPrefix", "()Ljava/lang/String;");
                mids$[mid_getSuffixOperator_8eea1dd85c3239c3] = env->getMethodID(cls, "getSuffixOperator", "()C");
                mids$[mid_toStringUnquoted_db9b55ba01e03e4b] = env->getMethodID(cls, "toStringUnquoted", "()Ljava/lang/String;");
                mids$[mid_visitMatchingTerms_dbcd50bd393e5e56] = env->getMethodID(cls, "visitMatchingTerms", "(Lorg/apache/lucene/index/IndexReader;Ljava/lang/String;Lorg/apache/lucene/queryparser/surround/query/SimpleTerm$MatchingTermVisitor;)V");
                mids$[mid_suffixToString_90aa63c10985f260] = env->getMethodID(cls, "suffixToString", "(Ljava/lang/StringBuilder;)V");

                class$ = new ::java::lang::Class(cls);
                live$ = true;
              }
              return (jclass) class$->this$;
            }

            SrndPrefixQuery::SrndPrefixQuery(const ::java::lang::String & a0, jboolean a1, jchar a2) : ::org::apache::lucene::queryparser::surround::query::SimpleTerm(env->newObject(initializeClass, &mids$, mid_init$_d34cb0333a2b441e, a0.this$, a1, a2)) {}

            ::org::apache::lucene::index::Term SrndPrefixQuery::getLucenePrefixTerm(const ::java::lang::String & a0) const
            {
              return ::org::apache::lucene::index::Term(env->callObjectMethod(this$, mids$[mid_getLucenePrefixTerm_2f9dcfe885c5ffa0], a0.this$));
            }

            ::java::lang::String SrndPrefixQuery::getPrefix() const
            {
              return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_getPrefix_db9b55ba01e03e4b]));
            }

            jchar SrndPrefixQuery::getSuffixOperator() const
            {
              return env->callCharMethod(this$, mids$[mid_getSuffixOperator_8eea1dd85c3239c3]);
            }

            ::java::lang::String SrndPrefixQuery::toStringUnquoted() const
            {
              return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toStringUnquoted_db9b55ba01e03e4b]));
            }

            void SrndPrefixQuery::visitMatchingTerms(const ::org::apache::lucene::index::IndexReader & a0, const ::java::lang::String & a1, const ::org::apache::lucene::queryparser::surround::query::SimpleTerm$MatchingTermVisitor & a2) const
            {
              env->callVoidMethod(this$, mids$[mid_visitMatchingTerms_dbcd50bd393e5e56], a0.this$, a1.this$, a2.this$);
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace surround {
          namespace query {
            static PyObject *t_SrndPrefixQuery_cast_(PyTypeObject *type, PyObject *arg);
            static PyObject *t_SrndPrefixQuery_instance_(PyTypeObject *type, PyObject *arg);
            static int t_SrndPrefixQuery_init_(t_SrndPrefixQuery *self, PyObject *args, PyObject *kwds);
            static PyObject *t_SrndPrefixQuery_getLucenePrefixTerm(t_SrndPrefixQuery *self, PyObject *arg);
            static PyObject *t_SrndPrefixQuery_getPrefix(t_SrndPrefixQuery *self);
            static PyObject *t_SrndPrefixQuery_getSuffixOperator(t_SrndPrefixQuery *self);
            static PyObject *t_SrndPrefixQuery_toStringUnquoted(t_SrndPrefixQuery *self, PyObject *args);
            static PyObject *t_SrndPrefixQuery_visitMatchingTerms(t_SrndPrefixQuery *self, PyObject *args);
            static PyObject *t_SrndPrefixQuery_get__prefix(t_SrndPrefixQuery *self, void *data);
            static PyObject *t_SrndPrefixQuery_get__suffixOperator(t_SrndPrefixQuery *self, void *data);
            static PyGetSetDef t_SrndPrefixQuery__fields_[] = {
              DECLARE_GET_FIELD(t_SrndPrefixQuery, prefix),
              DECLARE_GET_FIELD(t_SrndPrefixQuery, suffixOperator),
              { NULL, NULL, NULL, NULL, NULL }
            };

            static PyMethodDef t_SrndPrefixQuery__methods_[] = {
              DECLARE_METHOD(t_SrndPrefixQuery, cast_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_SrndPrefixQuery, instance_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_SrndPrefixQuery, getLucenePrefixTerm, METH_O),
              DECLARE_METHOD(t_SrndPrefixQuery, getPrefix, METH_NOARGS),
              DECLARE_METHOD(t_SrndPrefixQuery, getSuffixOperator, METH_NOARGS),
              DECLARE_METHOD(t_SrndPrefixQuery, toStringUnquoted, METH_VARARGS),
              DECLARE_METHOD(t_SrndPrefixQuery, visitMatchingTerms, METH_VARARGS),
              { NULL, NULL, 0, NULL }
            };

            static PyType_Slot PY_TYPE_SLOTS(SrndPrefixQuery)[] = {
              { Py_tp_methods, t_SrndPrefixQuery__methods_ },
              { Py_tp_init, (void *) t_SrndPrefixQuery_init_ },
              { Py_tp_getset, t_SrndPrefixQuery__fields_ },
              { 0, NULL }
            };

            static PyType_Def *PY_TYPE_BASES(SrndPrefixQuery)[] = {
              &PY_TYPE_DEF(::org::apache::lucene::queryparser::surround::query::SimpleTerm),
              NULL
            };

            DEFINE_TYPE(SrndPrefixQuery, t_SrndPrefixQuery, SrndPrefixQuery);

            void t_SrndPrefixQuery::install(PyObject *module)
            {
              installType(&PY_TYPE(SrndPrefixQuery), &PY_TYPE_DEF(SrndPrefixQuery), module, "SrndPrefixQuery", 0);
            }

            void t_SrndPrefixQuery::initialize(PyObject *module)
            {
              PyObject_SetAttrString((PyObject *) PY_TYPE(SrndPrefixQuery), "class_", make_descriptor(SrndPrefixQuery::initializeClass, 1));
              PyObject_SetAttrString((PyObject *) PY_TYPE(SrndPrefixQuery), "wrapfn_", make_descriptor(t_SrndPrefixQuery::wrap_jobject));
              PyObject_SetAttrString((PyObject *) PY_TYPE(SrndPrefixQuery), "boxfn_", make_descriptor(boxObject));
            }

            static PyObject *t_SrndPrefixQuery_cast_(PyTypeObject *type, PyObject *arg)
            {
              if (!(arg = castCheck(arg, SrndPrefixQuery::initializeClass, 1)))
                return NULL;
              return t_SrndPrefixQuery::wrap_Object(SrndPrefixQuery(((t_SrndPrefixQuery *) arg)->object.this$));
            }
            static PyObject *t_SrndPrefixQuery_instance_(PyTypeObject *type, PyObject *arg)
            {
              if (!castCheck(arg, SrndPrefixQuery::initializeClass, 0))
                Py_RETURN_FALSE;
              Py_RETURN_TRUE;
            }

            static int t_SrndPrefixQuery_init_(t_SrndPrefixQuery *self, PyObject *args, PyObject *kwds)
            {
              ::java::lang::String a0((jobject) NULL);
              jboolean a1;
              jchar a2;
              SrndPrefixQuery object((jobject) NULL);

              if (!parseArgs(args, "sZC", &a0, &a1, &a2))
              {
                INT_CALL(object = SrndPrefixQuery(a0, a1, a2));
                self->object = object;
              }
              else
              {
                PyErr_SetArgsError((PyObject *) self, "__init__", args);
                return -1;
              }

              return 0;
            }

            static PyObject *t_SrndPrefixQuery_getLucenePrefixTerm(t_SrndPrefixQuery *self, PyObject *arg)
            {
              ::java::lang::String a0((jobject) NULL);
              ::org::apache::lucene::index::Term result((jobject) NULL);

              if (!parseArg(arg, "s", &a0))
              {
                OBJ_CALL(result = self->object.getLucenePrefixTerm(a0));
                return ::org::apache::lucene::index::t_Term::wrap_Object(result);
              }

              PyErr_SetArgsError((PyObject *) self, "getLucenePrefixTerm", arg);
              return NULL;
            }

            static PyObject *t_SrndPrefixQuery_getPrefix(t_SrndPrefixQuery *self)
            {
              ::java::lang::String result((jobject) NULL);
              OBJ_CALL(result = self->object.getPrefix());
              return j2p(result);
            }

            static PyObject *t_SrndPrefixQuery_getSuffixOperator(t_SrndPrefixQuery *self)
            {
              jchar result;
              OBJ_CALL(result = self->object.getSuffixOperator());
              return c2p(result);
            }

            static PyObject *t_SrndPrefixQuery_toStringUnquoted(t_SrndPrefixQuery *self, PyObject *args)
            {
              ::java::lang::String result((jobject) NULL);

              if (!parseArgs(args, ""))
              {
                OBJ_CALL(result = self->object.toStringUnquoted());
                return j2p(result);
              }

              return callSuper(PY_TYPE(SrndPrefixQuery), (PyObject *) self, "toStringUnquoted", args, 2);
            }

            static PyObject *t_SrndPrefixQuery_visitMatchingTerms(t_SrndPrefixQuery *self, PyObject *args)
            {
              ::org::apache::lucene::index::IndexReader a0((jobject) NULL);
              ::java::lang::String a1((jobject) NULL);
              ::org::apache::lucene::queryparser::surround::query::SimpleTerm$MatchingTermVisitor a2((jobject) NULL);

              if (!parseArgs(args, "ksk", ::org::apache::lucene::index::IndexReader::initializeClass, ::org::apache::lucene::queryparser::surround::query::SimpleTerm$MatchingTermVisitor::initializeClass, &a0, &a1, &a2))
              {
                OBJ_CALL(self->object.visitMatchingTerms(a0, a1, a2));
                Py_RETURN_NONE;
              }

              return callSuper(PY_TYPE(SrndPrefixQuery), (PyObject *) self, "visitMatchingTerms", args, 2);
            }

            static PyObject *t_SrndPrefixQuery_get__prefix(t_SrndPrefixQuery *self, void *data)
            {
              ::java::lang::String value((jobject) NULL);
              OBJ_CALL(value = self->object.getPrefix());
              return j2p(value);
            }

            static PyObject *t_SrndPrefixQuery_get__suffixOperator(t_SrndPrefixQuery *self, void *data)
            {
              jchar value;
              OBJ_CALL(value = self->object.getSuffixOperator());
              return c2p(value);
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/index/SoftDeletesRetentionMergePolicy.h"
#include "java/lang/Class.h"
#include "java/util/function/Supplier.h"
#include "org/apache/lucene/index/MergePolicy.h"
#include "org/apache/lucene/index/CodecReader.h"
#include "org/apache/lucene/index/SegmentCommitInfo.h"
#include "java/lang/String.h"
#include "org/apache/lucene/search/Query.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/util/IOSupplier.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {

        ::java::lang::Class *SoftDeletesRetentionMergePolicy::class$ = NULL;
        jmethodID *SoftDeletesRetentionMergePolicy::mids$ = NULL;
        bool SoftDeletesRetentionMergePolicy::live$ = false;

        jclass SoftDeletesRetentionMergePolicy::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/index/SoftDeletesRetentionMergePolicy");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_1bc2b0b4412b8eed] = env->getMethodID(cls, "<init>", "(Ljava/lang/String;Ljava/util/function/Supplier;Lorg/apache/lucene/index/MergePolicy;)V");
            mids$[mid_keepFullyDeletedSegment_df61ce79f6884854] = env->getMethodID(cls, "keepFullyDeletedSegment", "(Lorg/apache/lucene/util/IOSupplier;)Z");
            mids$[mid_numDeletesToMerge_38410daa12d7ee1e] = env->getMethodID(cls, "numDeletesToMerge", "(Lorg/apache/lucene/index/SegmentCommitInfo;ILorg/apache/lucene/util/IOSupplier;)I");

            class$ = new ::java::lang::Class(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        SoftDeletesRetentionMergePolicy::SoftDeletesRetentionMergePolicy(const ::java::lang::String & a0, const ::java::util::function::Supplier & a1, const ::org::apache::lucene::index::MergePolicy & a2) : ::org::apache::lucene::index::OneMergeWrappingMergePolicy(env->newObject(initializeClass, &mids$, mid_init$_1bc2b0b4412b8eed, a0.this$, a1.this$, a2.this$)) {}

        jboolean SoftDeletesRetentionMergePolicy::keepFullyDeletedSegment(const ::org::apache::lucene::util::IOSupplier & a0) const
        {
          return env->callBooleanMethod(this$, mids$[mid_keepFullyDeletedSegment_df61ce79f6884854], a0.this$);
        }

        jint SoftDeletesRetentionMergePolicy::numDeletesToMerge(const ::org::apache::lucene::index::SegmentCommitInfo & a0, jint a1, const ::org::apache::lucene::util::IOSupplier & a2) const
        {
          return env->callIntMethod(this$, mids$[mid_numDeletesToMerge_38410daa12d7ee1e], a0.this$, a1, a2.this$);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {
        static PyObject *t_SoftDeletesRetentionMergePolicy_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_SoftDeletesRetentionMergePolicy_instance_(PyTypeObject *type, PyObject *arg);
        static int t_SoftDeletesRetentionMergePolicy_init_(t_SoftDeletesRetentionMergePolicy *self, PyObject *args, PyObject *kwds);
        static PyObject *t_SoftDeletesRetentionMergePolicy_keepFullyDeletedSegment(t_SoftDeletesRetentionMergePolicy *self, PyObject *args);
        static PyObject *t_SoftDeletesRetentionMergePolicy_numDeletesToMerge(t_SoftDeletesRetentionMergePolicy *self, PyObject *args);

        static PyMethodDef t_SoftDeletesRetentionMergePolicy__methods_[] = {
          DECLARE_METHOD(t_SoftDeletesRetentionMergePolicy, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_SoftDeletesRetentionMergePolicy, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_SoftDeletesRetentionMergePolicy, keepFullyDeletedSegment, METH_VARARGS),
          DECLARE_METHOD(t_SoftDeletesRetentionMergePolicy, numDeletesToMerge, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        static PyType_Slot PY_TYPE_SLOTS(SoftDeletesRetentionMergePolicy)[] = {
          { Py_tp_methods, t_SoftDeletesRetentionMergePolicy__methods_ },
          { Py_tp_init, (void *) t_SoftDeletesRetentionMergePolicy_init_ },
          { 0, NULL }
        };

        static PyType_Def *PY_TYPE_BASES(SoftDeletesRetentionMergePolicy)[] = {
          &PY_TYPE_DEF(::org::apache::lucene::index::OneMergeWrappingMergePolicy),
          NULL
        };

        DEFINE_TYPE(SoftDeletesRetentionMergePolicy, t_SoftDeletesRetentionMergePolicy, SoftDeletesRetentionMergePolicy);

        void t_SoftDeletesRetentionMergePolicy::install(PyObject *module)
        {
          installType(&PY_TYPE(SoftDeletesRetentionMergePolicy), &PY_TYPE_DEF(SoftDeletesRetentionMergePolicy), module, "SoftDeletesRetentionMergePolicy", 0);
        }

        void t_SoftDeletesRetentionMergePolicy::initialize(PyObject *module)
        {
          PyObject_SetAttrString((PyObject *) PY_TYPE(SoftDeletesRetentionMergePolicy), "class_", make_descriptor(SoftDeletesRetentionMergePolicy::initializeClass, 1));
          PyObject_SetAttrString((PyObject *) PY_TYPE(SoftDeletesRetentionMergePolicy), "wrapfn_", make_descriptor(t_SoftDeletesRetentionMergePolicy::wrap_jobject));
          PyObject_SetAttrString((PyObject *) PY_TYPE(SoftDeletesRetentionMergePolicy), "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_SoftDeletesRetentionMergePolicy_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, SoftDeletesRetentionMergePolicy::initializeClass, 1)))
            return NULL;
          return t_SoftDeletesRetentionMergePolicy::wrap_Object(SoftDeletesRetentionMergePolicy(((t_SoftDeletesRetentionMergePolicy *) arg)->object.this$));
        }
        static PyObject *t_SoftDeletesRetentionMergePolicy_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, SoftDeletesRetentionMergePolicy::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_SoftDeletesRetentionMergePolicy_init_(t_SoftDeletesRetentionMergePolicy *self, PyObject *args, PyObject *kwds)
        {
          ::java::lang::String a0((jobject) NULL);
          ::java::util::function::Supplier a1((jobject) NULL);
          PyTypeObject **p1;
          ::org::apache::lucene::index::MergePolicy a2((jobject) NULL);
          SoftDeletesRetentionMergePolicy object((jobject) NULL);

          if (!parseArgs(args, "sKk", ::java::util::function::Supplier::initializeClass, ::org::apache::lucene::index::MergePolicy::initializeClass, &a0, &a1, &p1, ::java::util::function::t_Supplier::parameters_, &a2))
          {
            INT_CALL(object = SoftDeletesRetentionMergePolicy(a0, a1, a2));
            self->object = object;
          }
          else
          {
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }

        static PyObject *t_SoftDeletesRetentionMergePolicy_keepFullyDeletedSegment(t_SoftDeletesRetentionMergePolicy *self, PyObject *args)
        {
          ::org::apache::lucene::util::IOSupplier a0((jobject) NULL);
          PyTypeObject **p0;
          jboolean result;

          if (!parseArgs(args, "K", ::org::apache::lucene::util::IOSupplier::initializeClass, &a0, &p0, ::org::apache::lucene::util::t_IOSupplier::parameters_))
          {
            OBJ_CALL(result = self->object.keepFullyDeletedSegment(a0));
            Py_RETURN_BOOL(result);
          }

          return callSuper(PY_TYPE(SoftDeletesRetentionMergePolicy), (PyObject *) self, "keepFullyDeletedSegment", args, 2);
        }

        static PyObject *t_SoftDeletesRetentionMergePolicy_numDeletesToMerge(t_SoftDeletesRetentionMergePolicy *self, PyObject *args)
        {
          ::org::apache::lucene::index::SegmentCommitInfo a0((jobject) NULL);
          jint a1;
          ::org::apache::lucene::util::IOSupplier a2((jobject) NULL);
          PyTypeObject **p2;
          jint result;

          if (!parseArgs(args, "kIK", ::org::apache::lucene::index::SegmentCommitInfo::initializeClass, ::org::apache::lucene::util::IOSupplier::initializeClass, &a0, &a1, &a2, &p2, ::org::apache::lucene::util::t_IOSupplier::parameters_))
          {
            OBJ_CALL(result = self->object.numDeletesToMerge(a0, a1, a2));
            return PyLong_FromLong((long) result);
          }

          return callSuper(PY_TYPE(SoftDeletesRetentionMergePolicy), (PyObject *) self, "numDeletesToMerge", args, 2);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/SortedSetSelector$Type.h"
#include "org/apache/lucene/search/SortedSetSelector$Type.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {

        ::java::lang::Class *SortedSetSelector$Type::class$ = NULL;
        jmethodID *SortedSetSelector$Type::mids$ = NULL;
        bool SortedSetSelector$Type::live$ = false;
        SortedSetSelector$Type *SortedSetSelector$Type::MAX = NULL;
        SortedSetSelector$Type *SortedSetSelector$Type::MIDDLE_MAX = NULL;
        SortedSetSelector$Type *SortedSetSelector$Type::MIDDLE_MIN = NULL;
        SortedSetSelector$Type *SortedSetSelector$Type::MIN = NULL;

        jclass SortedSetSelector$Type::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/search/SortedSetSelector$Type");

            mids$ = new jmethodID[max_mid];
            mids$[mid_valueOf_fc1d123e60aef9c1] = env->getStaticMethodID(cls, "valueOf", "(Ljava/lang/String;)Lorg/apache/lucene/search/SortedSetSelector$Type;");
            mids$[mid_values_693c03f1625a4576] = env->getStaticMethodID(cls, "values", "()[Lorg/apache/lucene/search/SortedSetSelector$Type;");

            class$ = new ::java::lang::Class(cls);
            cls = (jclass) class$->this$;

            MAX = new SortedSetSelector$Type(env->getStaticObjectField(cls, "MAX", "Lorg/apache/lucene/search/SortedSetSelector$Type;"));
            MIDDLE_MAX = new SortedSetSelector$Type(env->getStaticObjectField(cls, "MIDDLE_MAX", "Lorg/apache/lucene/search/SortedSetSelector$Type;"));
            MIDDLE_MIN = new SortedSetSelector$Type(env->getStaticObjectField(cls, "MIDDLE_MIN", "Lorg/apache/lucene/search/SortedSetSelector$Type;"));
            MIN = new SortedSetSelector$Type(env->getStaticObjectField(cls, "MIN", "Lorg/apache/lucene/search/SortedSetSelector$Type;"));
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        SortedSetSelector$Type SortedSetSelector$Type::valueOf(const ::java::lang::String & a0)
        {
          jclass cls = env->getClass(initializeClass);
          return SortedSetSelector$Type(env->callStaticObjectMethod(cls, mids$[mid_valueOf_fc1d123e60aef9c1], a0.this$));
        }

        JArray< SortedSetSelector$Type > SortedSetSelector$Type::values()
        {
          jclass cls = env->getClass(initializeClass);
          return JArray< SortedSetSelector$Type >(env->callStaticObjectMethod(cls, mids$[mid_values_693c03f1625a4576]));
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        static PyObject *t_SortedSetSelector$Type_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_SortedSetSelector$Type_instance_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_SortedSetSelector$Type_of_(t_SortedSetSelector$Type *self, PyObject *args);
        static PyObject *t_SortedSetSelector$Type_valueOf(PyTypeObject *type, PyObject *args);
        static PyObject *t_SortedSetSelector$Type_values(PyTypeObject *type);
        static PyObject *t_SortedSetSelector$Type_get__parameters_(t_SortedSetSelector$Type *self, void *data);
        static PyGetSetDef t_SortedSetSelector$Type__fields_[] = {
          DECLARE_GET_FIELD(t_SortedSetSelector$Type, parameters_),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_SortedSetSelector$Type__methods_[] = {
          DECLARE_METHOD(t_SortedSetSelector$Type, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_SortedSetSelector$Type, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_SortedSetSelector$Type, of_, METH_VARARGS),
          DECLARE_METHOD(t_SortedSetSelector$Type, valueOf, METH_VARARGS | METH_CLASS),
          DECLARE_METHOD(t_SortedSetSelector$Type, values, METH_NOARGS | METH_CLASS),
          { NULL, NULL, 0, NULL }
        };

        static PyType_Slot PY_TYPE_SLOTS(SortedSetSelector$Type)[] = {
          { Py_tp_methods, t_SortedSetSelector$Type__methods_ },
          { Py_tp_init, (void *) abstract_init },
          { Py_tp_getset, t_SortedSetSelector$Type__fields_ },
          { 0, NULL }
        };

        static PyType_Def *PY_TYPE_BASES(SortedSetSelector$Type)[] = {
          &PY_TYPE_DEF(::java::lang::Enum),
          NULL
        };

        DEFINE_TYPE(SortedSetSelector$Type, t_SortedSetSelector$Type, SortedSetSelector$Type);
        PyObject *t_SortedSetSelector$Type::wrap_Object(const SortedSetSelector$Type& object, PyTypeObject *p0)
        {
          PyObject *obj = t_SortedSetSelector$Type::wrap_Object(object);
          if (obj != NULL && obj != Py_None)
          {
            t_SortedSetSelector$Type *self = (t_SortedSetSelector$Type *) obj;
            self->parameters[0] = p0;
          }
          return obj;
        }

        PyObject *t_SortedSetSelector$Type::wrap_jobject(const jobject& object, PyTypeObject *p0)
        {
          PyObject *obj = t_SortedSetSelector$Type::wrap_jobject(object);
          if (obj != NULL && obj != Py_None)
          {
            t_SortedSetSelector$Type *self = (t_SortedSetSelector$Type *) obj;
            self->parameters[0] = p0;
          }
          return obj;
        }

        void t_SortedSetSelector$Type::install(PyObject *module)
        {
          installType(&PY_TYPE(SortedSetSelector$Type), &PY_TYPE_DEF(SortedSetSelector$Type), module, "SortedSetSelector$Type", 0);
        }

        void t_SortedSetSelector$Type::initialize(PyObject *module)
        {
          PyObject_SetAttrString((PyObject *) PY_TYPE(SortedSetSelector$Type), "class_", make_descriptor(SortedSetSelector$Type::initializeClass, 1));
          PyObject_SetAttrString((PyObject *) PY_TYPE(SortedSetSelector$Type), "wrapfn_", make_descriptor(t_SortedSetSelector$Type::wrap_jobject));
          PyObject_SetAttrString((PyObject *) PY_TYPE(SortedSetSelector$Type), "boxfn_", make_descriptor(boxObject));
          env->getClass(SortedSetSelector$Type::initializeClass);
          PyObject_SetAttrString((PyObject *) PY_TYPE(SortedSetSelector$Type), "MAX", make_descriptor(t_SortedSetSelector$Type::wrap_Object(*SortedSetSelector$Type::MAX)));
          PyObject_SetAttrString((PyObject *) PY_TYPE(SortedSetSelector$Type), "MIDDLE_MAX", make_descriptor(t_SortedSetSelector$Type::wrap_Object(*SortedSetSelector$Type::MIDDLE_MAX)));
          PyObject_SetAttrString((PyObject *) PY_TYPE(SortedSetSelector$Type), "MIDDLE_MIN", make_descriptor(t_SortedSetSelector$Type::wrap_Object(*SortedSetSelector$Type::MIDDLE_MIN)));
          PyObject_SetAttrString((PyObject *) PY_TYPE(SortedSetSelector$Type), "MIN", make_descriptor(t_SortedSetSelector$Type::wrap_Object(*SortedSetSelector$Type::MIN)));
        }

        static PyObject *t_SortedSetSelector$Type_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, SortedSetSelector$Type::initializeClass, 1)))
            return NULL;
          return t_SortedSetSelector$Type::wrap_Object(SortedSetSelector$Type(((t_SortedSetSelector$Type *) arg)->object.this$));
        }
        static PyObject *t_SortedSetSelector$Type_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, SortedSetSelector$Type::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static PyObject *t_SortedSetSelector$Type_of_(t_SortedSetSelector$Type *self, PyObject *args)
        {
          if (!parseArg(args, "T", 1, &(self->parameters)))
            Py_RETURN_SELF;
          return PyErr_SetArgsError((PyObject *) self, "of_", args);
        }

        static PyObject *t_SortedSetSelector$Type_valueOf(PyTypeObject *type, PyObject *args)
        {
          ::java::lang::String a0((jobject) NULL);
          SortedSetSelector$Type result((jobject) NULL);

          if (!parseArgs(args, "s", &a0))
          {
            OBJ_CALL(result = ::org::apache::lucene::search::SortedSetSelector$Type::valueOf(a0));
            return t_SortedSetSelector$Type::wrap_Object(result);
          }

          return callSuper(type, "valueOf", args, 2);
        }

        static PyObject *t_SortedSetSelector$Type_values(PyTypeObject *type)
        {
          JArray< SortedSetSelector$Type > result((jobject) NULL);
          OBJ_CALL(result = ::org::apache::lucene::search::SortedSetSelector$Type::values());
          return JArray<jobject>(result.this$).wrap(t_SortedSetSelector$Type::wrap_jobject);
        }
        static PyObject *t_SortedSetSelector$Type_get__parameters_(t_SortedSetSelector$Type *self, void *data)
        {
          return typeParameters(self->parameters, sizeof(self->parameters));
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/compound/hyphenation/TernaryTree$Iterator.h"
#include "org/apache/lucene/analysis/compound/hyphenation/TernaryTree.h"
#include "java/util/Enumeration.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace compound {
          namespace hyphenation {

            ::java::lang::Class *TernaryTree$Iterator::class$ = NULL;
            jmethodID *TernaryTree$Iterator::mids$ = NULL;
            bool TernaryTree$Iterator::live$ = false;

            jclass TernaryTree$Iterator::initializeClass(bool getOnly)
            {
              if (getOnly)
                return (jclass) (live$ ? class$->this$ : NULL);
              if (class$ == NULL)
              {
                jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/compound/hyphenation/TernaryTree$Iterator");

                mids$ = new jmethodID[max_mid];
                mids$[mid_init$_a5b788efaf414555] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/analysis/compound/hyphenation/TernaryTree;)V");
                mids$[mid_getValue_8eea1dd85c3239c3] = env->getMethodID(cls, "getValue", "()C");
                mids$[mid_hasMoreElements_8454bd5aa23fd11e] = env->getMethodID(cls, "hasMoreElements", "()Z");
                mids$[mid_nextElement_db9b55ba01e03e4b] = env->getMethodID(cls, "nextElement", "()Ljava/lang/String;");
                mids$[mid_rewind_f2cc1bce94666404] = env->getMethodID(cls, "rewind", "()V");

                class$ = new ::java::lang::Class(cls);
                live$ = true;
              }
              return (jclass) class$->this$;
            }

            TernaryTree$Iterator::TernaryTree$Iterator(const ::org::apache::lucene::analysis::compound::hyphenation::TernaryTree & a0) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_a5b788efaf414555, a0.this$)) {}

            jchar TernaryTree$Iterator::getValue() const
            {
              return env->callCharMethod(this$, mids$[mid_getValue_8eea1dd85c3239c3]);
            }

            jboolean TernaryTree$Iterator::hasMoreElements() const
            {
              return env->callBooleanMethod(this$, mids$[mid_hasMoreElements_8454bd5aa23fd11e]);
            }

            ::java::lang::String TernaryTree$Iterator::nextElement() const
            {
              return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_nextElement_db9b55ba01e03e4b]));
            }

            void TernaryTree$Iterator::rewind() const
            {
              env->callVoidMethod(this$, mids$[mid_rewind_f2cc1bce94666404]);
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace compound {
          namespace hyphenation {
            static PyObject *t_TernaryTree$Iterator_cast_(PyTypeObject *type, PyObject *arg);
            static PyObject *t_TernaryTree$Iterator_instance_(PyTypeObject *type, PyObject *arg);
            static int t_TernaryTree$Iterator_init_(t_TernaryTree$Iterator *self, PyObject *args, PyObject *kwds);
            static PyObject *t_TernaryTree$Iterator_getValue(t_TernaryTree$Iterator *self);
            static PyObject *t_TernaryTree$Iterator_hasMoreElements(t_TernaryTree$Iterator *self);
            static PyObject *t_TernaryTree$Iterator_nextElement(t_TernaryTree$Iterator *self);
            static PyObject *t_TernaryTree$Iterator_rewind(t_TernaryTree$Iterator *self);
            static PyObject *t_TernaryTree$Iterator_get__value(t_TernaryTree$Iterator *self, void *data);
            static PyGetSetDef t_TernaryTree$Iterator__fields_[] = {
              DECLARE_GET_FIELD(t_TernaryTree$Iterator, value),
              { NULL, NULL, NULL, NULL, NULL }
            };

            static PyMethodDef t_TernaryTree$Iterator__methods_[] = {
              DECLARE_METHOD(t_TernaryTree$Iterator, cast_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_TernaryTree$Iterator, instance_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_TernaryTree$Iterator, getValue, METH_NOARGS),
              DECLARE_METHOD(t_TernaryTree$Iterator, hasMoreElements, METH_NOARGS),
              DECLARE_METHOD(t_TernaryTree$Iterator, nextElement, METH_NOARGS),
              DECLARE_METHOD(t_TernaryTree$Iterator, rewind, METH_NOARGS),
              { NULL, NULL, 0, NULL }
            };

            static PyType_Slot PY_TYPE_SLOTS(TernaryTree$Iterator)[] = {
              { Py_tp_methods, t_TernaryTree$Iterator__methods_ },
              { Py_tp_init, (void *) t_TernaryTree$Iterator_init_ },
              { Py_tp_getset, t_TernaryTree$Iterator__fields_ },
              { Py_tp_iter, (void *) PyObject_SelfIter },
              { Py_tp_iternext, (void *) ((PyObject *(*)(::java::util::t_Enumeration *)) get_enumeration_next< ::java::util::t_Enumeration,::java::lang::t_String >) },
              { 0, NULL }
            };

            static PyType_Def *PY_TYPE_BASES(TernaryTree$Iterator)[] = {
              &PY_TYPE_DEF(::java::lang::Object),
              NULL
            };

            DEFINE_TYPE(TernaryTree$Iterator, t_TernaryTree$Iterator, TernaryTree$Iterator);

            void t_TernaryTree$Iterator::install(PyObject *module)
            {
              installType(&PY_TYPE(TernaryTree$Iterator), &PY_TYPE_DEF(TernaryTree$Iterator), module, "TernaryTree$Iterator", 0);
            }

            void t_TernaryTree$Iterator::initialize(PyObject *module)
            {
              PyObject_SetAttrString((PyObject *) PY_TYPE(TernaryTree$Iterator), "class_", make_descriptor(TernaryTree$Iterator::initializeClass, 1));
              PyObject_SetAttrString((PyObject *) PY_TYPE(TernaryTree$Iterator), "wrapfn_", make_descriptor(t_TernaryTree$Iterator::wrap_jobject));
              PyObject_SetAttrString((PyObject *) PY_TYPE(TernaryTree$Iterator), "boxfn_", make_descriptor(boxObject));
            }

            static PyObject *t_TernaryTree$Iterator_cast_(PyTypeObject *type, PyObject *arg)
            {
              if (!(arg = castCheck(arg, TernaryTree$Iterator::initializeClass, 1)))
                return NULL;
              return t_TernaryTree$Iterator::wrap_Object(TernaryTree$Iterator(((t_TernaryTree$Iterator *) arg)->object.this$));
            }
            static PyObject *t_TernaryTree$Iterator_instance_(PyTypeObject *type, PyObject *arg)
            {
              if (!castCheck(arg, TernaryTree$Iterator::initializeClass, 0))
                Py_RETURN_FALSE;
              Py_RETURN_TRUE;
            }

            static int t_TernaryTree$Iterator_init_(t_TernaryTree$Iterator *self, PyObject *args, PyObject *kwds)
            {
              ::org::apache::lucene::analysis::compound::hyphenation::TernaryTree a0((jobject) NULL);
              TernaryTree$Iterator object((jobject) NULL);

              if (!parseArgs(args, "k", ::org::apache::lucene::analysis::compound::hyphenation::TernaryTree::initializeClass, &a0))
              {
                INT_CALL(object = TernaryTree$Iterator(a0));
                self->object = object;
              }
              else
              {
                PyErr_SetArgsError((PyObject *) self, "__init__", args);
                return -1;
              }

              return 0;
            }

            static PyObject *t_TernaryTree$Iterator_getValue(t_TernaryTree$Iterator *self)
            {
              jchar result;
              OBJ_CALL(result = self->object.getValue());
              return c2p(result);
            }

            static PyObject *t_TernaryTree$Iterator_hasMoreElements(t_TernaryTree$Iterator *self)
            {
              jboolean result;
              OBJ_CALL(result = self->object.hasMoreElements());
              Py_RETURN_BOOL(result);
            }

            static PyObject *t_TernaryTree$Iterator_nextElement(t_TernaryTree$Iterator *self)
            {
              ::java::lang::String result((jobject) NULL);
              OBJ_CALL(result = self->object.nextElement());
              return j2p(result);
            }

            static PyObject *t_TernaryTree$Iterator_rewind(t_TernaryTree$Iterator *self)
            {
              OBJ_CALL(self->object.rewind());
              Py_RETURN_NONE;
            }

            static PyObject *t_TernaryTree$Iterator_get__value(t_TernaryTree$Iterator *self, void *data)
            {
              jchar value;
              OBJ_CALL(value = self->object.getValue());
              return c2p(value);
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/document/ShapeField$Triangle.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace document {

        ::java::lang::Class *ShapeField$Triangle::class$ = NULL;
        jmethodID *ShapeField$Triangle::mids$ = NULL;
        bool ShapeField$Triangle::live$ = false;

        jclass ShapeField$Triangle::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/document/ShapeField$Triangle");

            mids$ = new jmethodID[max_mid];
            mids$[mid_setTriangleValue_1a4929c52b052708] = env->getMethodID(cls, "setTriangleValue", "(IIZIIZIIZ)V");

            class$ = new ::java::lang::Class(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace document {
        static PyObject *t_ShapeField$Triangle_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_ShapeField$Triangle_instance_(PyTypeObject *type, PyObject *arg);

        static PyMethodDef t_ShapeField$Triangle__methods_[] = {
          DECLARE_METHOD(t_ShapeField$Triangle, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_ShapeField$Triangle, instance_, METH_O | METH_CLASS),
          { NULL, NULL, 0, NULL }
        };

        static PyType_Slot PY_TYPE_SLOTS(ShapeField$Triangle)[] = {
          { Py_tp_methods, t_ShapeField$Triangle__methods_ },
          { Py_tp_init, (void *) abstract_init },
          { 0, NULL }
        };

        static PyType_Def *PY_TYPE_BASES(ShapeField$Triangle)[] = {
          &PY_TYPE_DEF(::org::apache::lucene::document::Field),
          NULL
        };

        DEFINE_TYPE(ShapeField$Triangle, t_ShapeField$Triangle, ShapeField$Triangle);

        void t_ShapeField$Triangle::install(PyObject *module)
        {
          installType(&PY_TYPE(ShapeField$Triangle), &PY_TYPE_DEF(ShapeField$Triangle), module, "ShapeField$Triangle", 0);
        }

        void t_ShapeField$Triangle::initialize(PyObject *module)
        {
          PyObject_SetAttrString((PyObject *) PY_TYPE(ShapeField$Triangle), "class_", make_descriptor(ShapeField$Triangle::initializeClass, 1));
          PyObject_SetAttrString((PyObject *) PY_TYPE(ShapeField$Triangle), "wrapfn_", make_descriptor(t_ShapeField$Triangle::wrap_jobject));
          PyObject_SetAttrString((PyObject *) PY_TYPE(ShapeField$Triangle), "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_ShapeField$Triangle_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, ShapeField$Triangle::initializeClass, 1)))
            return NULL;
          return t_ShapeField$Triangle::wrap_Object(ShapeField$Triangle(((t_ShapeField$Triangle *) arg)->object.this$));
        }
        static PyObject *t_ShapeField$Triangle_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, ShapeField$Triangle::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/misc/TermStats.h"
#include "org/apache/lucene/util/BytesRef.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace misc {

        ::java::lang::Class *TermStats::class$ = NULL;
        jmethodID *TermStats::mids$ = NULL;
        jfieldID *TermStats::fids$ = NULL;
        bool TermStats::live$ = false;

        jclass TermStats::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/misc/TermStats");

            mids$ = new jmethodID[max_mid];
            mids$[mid_toString_db9b55ba01e03e4b] = env->getMethodID(cls, "toString", "()Ljava/lang/String;");

            fids$ = new jfieldID[max_fid];
            fids$[fid_docFreq] = env->getFieldID(cls, "docFreq", "I");
            fids$[fid_field] = env->getFieldID(cls, "field", "Ljava/lang/String;");
            fids$[fid_termtext] = env->getFieldID(cls, "termtext", "Lorg/apache/lucene/util/BytesRef;");
            fids$[fid_totalTermFreq] = env->getFieldID(cls, "totalTermFreq", "J");

            class$ = new ::java::lang::Class(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        ::java::lang::String TermStats::toString() const
        {
          return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_db9b55ba01e03e4b]));
        }

        jint TermStats::_get_docFreq() const
        {
          return env->getIntField(this$, fids$[fid_docFreq]);
        }

        void TermStats::_set_docFreq(jint a0) const
        {
          env->setIntField(this$, fids$[fid_docFreq], a0);
        }

        ::java::lang::String TermStats::_get_field() const
        {
          return ::java::lang::String(env->getObjectField(this$, fids$[fid_field]));
        }

        void TermStats::_set_field(const ::java::lang::String & a0) const
        {
          env->setObjectField(this$, fids$[fid_field], a0.this$);
        }

        ::org::apache::lucene::util::BytesRef TermStats::_get_termtext() const
        {
          return ::org::apache::lucene::util::BytesRef(env->getObjectField(this$, fids$[fid_termtext]));
        }

        void TermStats::_set_termtext(const ::org::apache::lucene::util::BytesRef & a0) const
        {
          env->setObjectField(this$, fids$[fid_termtext], a0.this$);
        }

        jlong TermStats::_get_totalTermFreq() const
        {
          return env->getLongField(this$, fids$[fid_totalTermFreq]);
        }

        void TermStats::_set_totalTermFreq(jlong a0) const
        {
          env->setLongField(this$, fids$[fid_totalTermFreq], a0);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace misc {
        static PyObject *t_TermStats_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_TermStats_instance_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_TermStats_toString(t_TermStats *self, PyObject *args);
        static PyObject *t_TermStats_get__docFreq(t_TermStats *self, void *data);
        static int t_TermStats_set__docFreq(t_TermStats *self, PyObject *arg, void *data);
        static PyObject *t_TermStats_get__field(t_TermStats *self, void *data);
        static int t_TermStats_set__field(t_TermStats *self, PyObject *arg, void *data);
        static PyObject *t_TermStats_get__termtext(t_TermStats *self, void *data);
        static int t_TermStats_set__termtext(t_TermStats *self, PyObject *arg, void *data);
        static PyObject *t_TermStats_get__totalTermFreq(t_TermStats *self, void *data);
        static int t_TermStats_set__totalTermFreq(t_TermStats *self, PyObject *arg, void *data);

        static PyGetSetDef t_TermStats__fields_[] = {
          DECLARE_GETSET_FIELD(t_TermStats, docFreq),
          DECLARE_GETSET_FIELD(t_TermStats, field),
          DECLARE_GETSET_FIELD(t_TermStats, termtext),
          DECLARE_GETSET_FIELD(t_TermStats, totalTermFreq),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_TermStats__methods_[] = {
          DECLARE_METHOD(t_TermStats, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_TermStats, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_TermStats, toString, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        static PyType_Slot PY_TYPE_SLOTS(TermStats)[] = {
          { Py_tp_methods, t_TermStats__methods_ },
          { Py_tp_init, (void *) abstract_init },
          { Py_tp_getset, t_TermStats__fields_ },
          { 0, NULL }
        };

        static PyType_Def *PY_TYPE_BASES(TermStats)[] = {
          &PY_TYPE_DEF(::java::lang::Object),
          NULL
        };

        DEFINE_TYPE(TermStats, t_TermStats, TermStats);

        void t_TermStats::install(PyObject *module)
        {
          installType(&PY_TYPE(TermStats), &PY_TYPE_DEF(TermStats), module, "TermStats", 0);
        }

        void t_TermStats::initialize(PyObject *module)
        {
          PyObject_SetAttrString((PyObject *) PY_TYPE(TermStats), "class_", make_descriptor(TermStats::initializeClass, 1));
          PyObject_SetAttrString((PyObject *) PY_TYPE(TermStats), "wrapfn_", make_descriptor(t_TermStats::wrap_jobject));
          PyObject_SetAttrString((PyObject *) PY_TYPE(TermStats), "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_TermStats_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, TermStats::initializeClass, 1)))
            return NULL;
          return t_TermStats::wrap_Object(TermStats(((t_TermStats *) arg)->object.this$));
        }
        static PyObject *t_TermStats_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, TermStats::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static PyObject *t_TermStats_toString(t_TermStats *self, PyObject *args)
        {
          ::java::lang::String result((jobject) NULL);

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.toString());
            return j2p(result);
          }

          return callSuper(PY_TYPE(TermStats), (PyObject *) self, "toString", args, 2);
        }

        static PyObject *t_TermStats_get__docFreq(t_TermStats *self, void *data)
        {
          jint value;
          OBJ_CALL(value = self->object._get_docFreq());
          return PyLong_FromLong((long) value);
        }
        static int t_TermStats_set__docFreq(t_TermStats *self, PyObject *arg, void *data)
        {
          jint value;
          if (!parseArg(arg, "I", &value))
          {
            INT_CALL(self->object._set_docFreq(value));
            return 0;
          }
          PyErr_SetArgsError((PyObject *) self, "docFreq", arg);
          return -1;
        }

        static PyObject *t_TermStats_get__field(t_TermStats *self, void *data)
        {
          ::java::lang::String value((jobject) NULL);
          OBJ_CALL(value = self->object._get_field());
          return j2p(value);
        }
        static int t_TermStats_set__field(t_TermStats *self, PyObject *arg, void *data)
        {
          ::java::lang::String value((jobject) NULL);
          if (!parseArg(arg, "s", &value))
          {
            INT_CALL(self->object._set_field(value));
            return 0;
          }
          PyErr_SetArgsError((PyObject *) self, "field", arg);
          return -1;
        }

        static PyObject *t_TermStats_get__termtext(t_TermStats *self, void *data)
        {
          ::org::apache::lucene::util::BytesRef value((jobject) NULL);
          OBJ_CALL(value = self->object._get_termtext());
          return ::org::apache::lucene::util::t_BytesRef::wrap_Object(value);
        }
        static int t_TermStats_set__termtext(t_TermStats *self, PyObject *arg, void *data)
        {
          ::org::apache::lucene::util::BytesRef value((jobject) NULL);
          if (!parseArg(arg, "k", ::org::apache::lucene::util::BytesRef::initializeClass, &value))
          {
            INT_CALL(self->object._set_termtext(value));
            return 0;
          }
          PyErr_SetArgsError((PyObject *) self, "termtext", arg);
          return -1;
        }

        static PyObject *t_TermStats_get__totalTermFreq(t_TermStats *self, void *data)
        {
          jlong value;
          OBJ_CALL(value = self->object._get_totalTermFreq());
          return PyLong_FromLongLong((PY_LONG_LONG) value);
        }
        static int t_TermStats_set__totalTermFreq(t_TermStats *self, PyObject *arg, void *data)
        {
          jlong value;
          if (!parseArg(arg, "J", &value))
          {
            INT_CALL(self->object._set_totalTermFreq(value));
            return 0;
          }
          PyErr_SetArgsError((PyObject *) self, "totalTermFreq", arg);
          return -1;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/core/UnicodeWhitespaceTokenizer.h"
#include "org/apache/lucene/util/AttributeFactory.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace core {

          ::java::lang::Class *UnicodeWhitespaceTokenizer::class$ = NULL;
          jmethodID *UnicodeWhitespaceTokenizer::mids$ = NULL;
          bool UnicodeWhitespaceTokenizer::live$ = false;

          jclass UnicodeWhitespaceTokenizer::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/core/UnicodeWhitespaceTokenizer");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_f2cc1bce94666404] = env->getMethodID(cls, "<init>", "()V");
              mids$[mid_init$_a55a4d78167a7843] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/util/AttributeFactory;)V");
              mids$[mid_init$_541d20dfedf4268e] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/util/AttributeFactory;I)V");
              mids$[mid_isTokenChar_a1d30e1ee40c89a2] = env->getMethodID(cls, "isTokenChar", "(I)Z");

              class$ = new ::java::lang::Class(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          UnicodeWhitespaceTokenizer::UnicodeWhitespaceTokenizer() : ::org::apache::lucene::analysis::util::CharTokenizer(env->newObject(initializeClass, &mids$, mid_init$_f2cc1bce94666404)) {}

          UnicodeWhitespaceTokenizer::UnicodeWhitespaceTokenizer(const ::org::apache::lucene::util::AttributeFactory & a0) : ::org::apache::lucene::analysis::util::CharTokenizer(env->newObject(initializeClass, &mids$, mid_init$_a55a4d78167a7843, a0.this$)) {}

          UnicodeWhitespaceTokenizer::UnicodeWhitespaceTokenizer(const ::org::apache::lucene::util::AttributeFactory & a0, jint a1) : ::org::apache::lucene::analysis::util::CharTokenizer(env->newObject(initializeClass, &mids$, mid_init$_541d20dfedf4268e, a0.this$, a1)) {}
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace core {
          static PyObject *t_UnicodeWhitespaceTokenizer_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_UnicodeWhitespaceTokenizer_instance_(PyTypeObject *type, PyObject *arg);
          static int t_UnicodeWhitespaceTokenizer_init_(t_UnicodeWhitespaceTokenizer *self, PyObject *args, PyObject *kwds);

          static PyMethodDef t_UnicodeWhitespaceTokenizer__methods_[] = {
            DECLARE_METHOD(t_UnicodeWhitespaceTokenizer, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_UnicodeWhitespaceTokenizer, instance_, METH_O | METH_CLASS),
            { NULL, NULL, 0, NULL }
          };

          static PyType_Slot PY_TYPE_SLOTS(UnicodeWhitespaceTokenizer)[] = {
            { Py_tp_methods, t_UnicodeWhitespaceTokenizer__methods_ },
            { Py_tp_init, (void *) t_UnicodeWhitespaceTokenizer_init_ },
            { 0, NULL }
          };

          static PyType_Def *PY_TYPE_BASES(UnicodeWhitespaceTokenizer)[] = {
            &PY_TYPE_DEF(::org::apache::lucene::analysis::util::CharTokenizer),
            NULL
          };

          DEFINE_TYPE(UnicodeWhitespaceTokenizer, t_UnicodeWhitespaceTokenizer, UnicodeWhitespaceTokenizer);

          void t_UnicodeWhitespaceTokenizer::install(PyObject *module)
          {
            installType(&PY_TYPE(UnicodeWhitespaceTokenizer), &PY_TYPE_DEF(UnicodeWhitespaceTokenizer), module, "UnicodeWhitespaceTokenizer", 0);
          }

          void t_UnicodeWhitespaceTokenizer::initialize(PyObject *module)
          {
            PyObject_SetAttrString((PyObject *) PY_TYPE(UnicodeWhitespaceTokenizer), "class_", make_descriptor(UnicodeWhitespaceTokenizer::initializeClass, 1));
            PyObject_SetAttrString((PyObject *) PY_TYPE(UnicodeWhitespaceTokenizer), "wrapfn_", make_descriptor(t_UnicodeWhitespaceTokenizer::wrap_jobject));
            PyObject_SetAttrString((PyObject *) PY_TYPE(UnicodeWhitespaceTokenizer), "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_UnicodeWhitespaceTokenizer_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, UnicodeWhitespaceTokenizer::initializeClass, 1)))
              return NULL;
            return t_UnicodeWhitespaceTokenizer::wrap_Object(UnicodeWhitespaceTokenizer(((t_UnicodeWhitespaceTokenizer *) arg)->object.this$));
          }
          static PyObject *t_UnicodeWhitespaceTokenizer_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, UnicodeWhitespaceTokenizer::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_UnicodeWhitespaceTokenizer_init_(t_UnicodeWhitespaceTokenizer *self, PyObject *args, PyObject *kwds)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 0:
              {
                UnicodeWhitespaceTokenizer object((jobject) NULL);

                INT_CALL(object = UnicodeWhitespaceTokenizer());
                self->object = object;
                break;
              }
             case 1:
              {
                ::org::apache::lucene::util::AttributeFactory a0((jobject) NULL);
                UnicodeWhitespaceTokenizer object((jobject) NULL);

                if (!parseArgs(args, "k", ::org::apache::lucene::util::AttributeFactory::initializeClass, &a0))
                {
                  INT_CALL(object = UnicodeWhitespaceTokenizer(a0));
                  self->object = object;
                  break;
                }
              }
              goto err;
             case 2:
              {
                ::org::apache::lucene::util::AttributeFactory a0((jobject) NULL);
                jint a1;
                UnicodeWhitespaceTokenizer object((jobject) NULL);

                if (!parseArgs(args, "kI", ::org::apache::lucene::util::AttributeFactory::initializeClass, &a0, &a1))
                {
                  INT_CALL(object = UnicodeWhitespaceTokenizer(a0, a1));
                  self->object = object;
                  break;
                }
              }
             default:
             err:
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queries/payloads/SpanPayloadCheckQuery.h"
#include "org/apache/lucene/index/IndexReader.h"
#include "org/apache/lucene/search/IndexSearcher.h"
#include "java/lang/Class.h"
#include "java/lang/Object.h"
#include "org/apache/lucene/search/spans/SpanWeight.h"
#include "org/apache/lucene/util/BytesRef.h"
#include "java/lang/String.h"
#include "org/apache/lucene/search/Query.h"
#include "java/io/IOException.h"
#include "java/util/List.h"
#include "org/apache/lucene/search/QueryVisitor.h"
#include "org/apache/lucene/search/ScoreMode.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queries {
        namespace payloads {

          ::java::lang::Class *SpanPayloadCheckQuery::class$ = NULL;
          jmethodID *SpanPayloadCheckQuery::mids$ = NULL;
          bool SpanPayloadCheckQuery::live$ = false;

          jclass SpanPayloadCheckQuery::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/queries/payloads/SpanPayloadCheckQuery");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_25080c68ea468fbd] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/search/spans/SpanQuery;Ljava/util/List;)V");
              mids$[mid_createWeight_5baab4cc5ccc46b6] = env->getMethodID(cls, "createWeight", "(Lorg/apache/lucene/search/IndexSearcher;Lorg/apache/lucene/search/ScoreMode;F)Lorg/apache/lucene/search/spans/SpanWeight;");
              mids$[mid_equals_8b72f2dcdde6fd1d] = env->getMethodID(cls, "equals", "(Ljava/lang/Object;)Z");
              mids$[mid_getField_db9b55ba01e03e4b] = env->getMethodID(cls, "getField", "()Ljava/lang/String;");
              mids$[mid_hashCode_9972fcc56b44e79d] = env->getMethodID(cls, "hashCode", "()I");
              mids$[mid_rewrite_bb52f19a8254555c] = env->getMethodID(cls, "rewrite", "(Lorg/apache/lucene/index/IndexReader;)Lorg/apache/lucene/search/Query;");
              mids$[mid_toString_9bfa75c9f141b67f] = env->getMethodID(cls, "toString", "(Ljava/lang/String;)Ljava/lang/String;");
              mids$[mid_visit_f9e6207006c5b6c1] = env->getMethodID(cls, "visit", "(Lorg/apache/lucene/search/QueryVisitor;)V");

              class$ = new ::java::lang::Class(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          SpanPayloadCheckQuery::SpanPayloadCheckQuery(const ::org::apache::lucene::search::spans::SpanQuery & a0, const ::java::util::List & a1) : ::org::apache::lucene::search::spans::SpanQuery(env->newObject(initializeClass, &mids$, mid_init$_25080c68ea468fbd, a0.this$, a1.this$)) {}

          ::org::apache::lucene::search::spans::SpanWeight SpanPayloadCheckQuery::createWeight(const ::org::apache::lucene::search::IndexSearcher & a0, const ::org::apache::lucene::search::ScoreMode & a1, jfloat a2) const
          {
            return ::org::apache::lucene::search::spans::SpanWeight(env->callObjectMethod(this$, mids$[mid_createWeight_5baab4cc5ccc46b6], a0.this$, a1.this$, a2));
          }

          jboolean SpanPayloadCheckQuery::equals(const ::java::lang::Object & a0) const
          {
            return env->callBooleanMethod(this$, mids$[mid_equals_8b72f2dcdde6fd1d], a0.this$);
          }

          ::java::lang::String SpanPayloadCheckQuery::getField() const
          {
            return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_getField_db9b55ba01e03e4b]));
          }

          jint SpanPayloadCheckQuery::hashCode() const
          {
            return env->callIntMethod(this$, mids$[mid_hashCode_9972fcc56b44e79d]);
          }

          ::org::apache::lucene::search::Query SpanPayloadCheckQuery::rewrite(const ::org::apache::lucene::index::IndexReader & a0) const
          {
            return ::org::apache::lucene::search::Query(env->callObjectMethod(this$, mids$[mid_rewrite_bb52f19a8254555c], a0.this$));
          }

          ::java::lang::String SpanPayloadCheckQuery::toString(const ::java::lang::String & a0) const
          {
            return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_9bfa75c9f141b67f], a0.this$));
          }

          void SpanPayloadCheckQuery::visit(const ::org::apache::lucene::search::QueryVisitor & a0) const
          {
            env->callVoidMethod(this$, mids$[mid_visit_f9e6207006c5b6c1], a0.this$);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queries {
        namespace payloads {
          static PyObject *t_SpanPayloadCheckQuery_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_SpanPayloadCheckQuery_instance_(PyTypeObject *type, PyObject *arg);
          static int t_SpanPayloadCheckQuery_init_(t_SpanPayloadCheckQuery *self, PyObject *args, PyObject *kwds);
          static PyObject *t_SpanPayloadCheckQuery_createWeight(t_SpanPayloadCheckQuery *self, PyObject *args);
          static PyObject *t_SpanPayloadCheckQuery_equals(t_SpanPayloadCheckQuery *self, PyObject *args);
          static PyObject *t_SpanPayloadCheckQuery_getField(t_SpanPayloadCheckQuery *self, PyObject *args);
          static PyObject *t_SpanPayloadCheckQuery_hashCode(t_SpanPayloadCheckQuery *self, PyObject *args);
          static PyObject *t_SpanPayloadCheckQuery_rewrite(t_SpanPayloadCheckQuery *self, PyObject *args);
          static PyObject *t_SpanPayloadCheckQuery_toString(t_SpanPayloadCheckQuery *self, PyObject *args);
          static PyObject *t_SpanPayloadCheckQuery_visit(t_SpanPayloadCheckQuery *self, PyObject *args);
          static PyObject *t_SpanPayloadCheckQuery_get__field(t_SpanPayloadCheckQuery *self, void *data);
          static PyGetSetDef t_SpanPayloadCheckQuery__fields_[] = {
            DECLARE_GET_FIELD(t_SpanPayloadCheckQuery, field),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_SpanPayloadCheckQuery__methods_[] = {
            DECLARE_METHOD(t_SpanPayloadCheckQuery, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_SpanPayloadCheckQuery, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_SpanPayloadCheckQuery, createWeight, METH_VARARGS),
            DECLARE_METHOD(t_SpanPayloadCheckQuery, equals, METH_VARARGS),
            DECLARE_METHOD(t_SpanPayloadCheckQuery, getField, METH_VARARGS),
            DECLARE_METHOD(t_SpanPayloadCheckQuery, hashCode, METH_VARARGS),
            DECLARE_METHOD(t_SpanPayloadCheckQuery, rewrite, METH_VARARGS),
            DECLARE_METHOD(t_SpanPayloadCheckQuery, toString, METH_VARARGS),
            DECLARE_METHOD(t_SpanPayloadCheckQuery, visit, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          static PyType_Slot PY_TYPE_SLOTS(SpanPayloadCheckQuery)[] = {
            { Py_tp_methods, t_SpanPayloadCheckQuery__methods_ },
            { Py_tp_init, (void *) t_SpanPayloadCheckQuery_init_ },
            { Py_tp_getset, t_SpanPayloadCheckQuery__fields_ },
            { 0, NULL }
          };

          static PyType_Def *PY_TYPE_BASES(SpanPayloadCheckQuery)[] = {
            &PY_TYPE_DEF(::org::apache::lucene::search::spans::SpanQuery),
            NULL
          };

          DEFINE_TYPE(SpanPayloadCheckQuery, t_SpanPayloadCheckQuery, SpanPayloadCheckQuery);

          void t_SpanPayloadCheckQuery::install(PyObject *module)
          {
            installType(&PY_TYPE(SpanPayloadCheckQuery), &PY_TYPE_DEF(SpanPayloadCheckQuery), module, "SpanPayloadCheckQuery", 0);
          }

          void t_SpanPayloadCheckQuery::initialize(PyObject *module)
          {
            PyObject_SetAttrString((PyObject *) PY_TYPE(SpanPayloadCheckQuery), "class_", make_descriptor(SpanPayloadCheckQuery::initializeClass, 1));
            PyObject_SetAttrString((PyObject *) PY_TYPE(SpanPayloadCheckQuery), "wrapfn_", make_descriptor(t_SpanPayloadCheckQuery::wrap_jobject));
            PyObject_SetAttrString((PyObject *) PY_TYPE(SpanPayloadCheckQuery), "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_SpanPayloadCheckQuery_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, SpanPayloadCheckQuery::initializeClass, 1)))
              return NULL;
            return t_SpanPayloadCheckQuery::wrap_Object(SpanPayloadCheckQuery(((t_SpanPayloadCheckQuery *) arg)->object.this$));
          }
          static PyObject *t_SpanPayloadCheckQuery_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, SpanPayloadCheckQuery::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_SpanPayloadCheckQuery_init_(t_SpanPayloadCheckQuery *self, PyObject *args, PyObject *kwds)
          {
            ::org::apache::lucene::search::spans::SpanQuery a0((jobject) NULL);
            ::java::util::List a1((jobject) NULL);
            PyTypeObject **p1;
            SpanPayloadCheckQuery object((jobject) NULL);

            if (!parseArgs(args, "kK", ::org::apache::lucene::search::spans::SpanQuery::initializeClass, ::java::util::List::initializeClass, &a0, &a1, &p1, ::java::util::t_List::parameters_))
            {
              INT_CALL(object = SpanPayloadCheckQuery(a0, a1));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_SpanPayloadCheckQuery_createWeight(t_SpanPayloadCheckQuery *self, PyObject *args)
          {
            ::org::apache::lucene::search::IndexSearcher a0((jobject) NULL);
            ::org::apache::lucene::search::ScoreMode a1((jobject) NULL);
            PyTypeObject **p1;
            jfloat a2;
            ::org::apache::lucene::search::spans::SpanWeight result((jobject) NULL);

            if (!parseArgs(args, "kKF", ::org::apache::lucene::search::IndexSearcher::initializeClass, ::org::apache::lucene::search::ScoreMode::initializeClass, &a0, &a1, &p1, ::org::apache::lucene::search::t_ScoreMode::parameters_, &a2))
            {
              OBJ_CALL(result = self->object.createWeight(a0, a1, a2));
              return ::org::apache::lucene::search::spans::t_SpanWeight::wrap_Object(result);
            }

            return callSuper(PY_TYPE(SpanPayloadCheckQuery), (PyObject *) self, "createWeight", args, 2);
          }

          static PyObject *t_SpanPayloadCheckQuery_equals(t_SpanPayloadCheckQuery *self, PyObject *args)
          {
            ::java::lang::Object a0((jobject) NULL);
            jboolean result;

            if (!parseArgs(args, "o", &a0))
            {
              OBJ_CALL(result = self->object.equals(a0));
              Py_RETURN_BOOL(result);
            }

            return callSuper(PY_TYPE(SpanPayloadCheckQuery), (PyObject *) self, "equals", args, 2);
          }

          static PyObject *t_SpanPayloadCheckQuery_getField(t_SpanPayloadCheckQuery *self, PyObject *args)
          {
            ::java::lang::String result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.getField());
              return j2p(result);
            }

            return callSuper(PY_TYPE(SpanPayloadCheckQuery), (PyObject *) self, "getField", args, 2);
          }

          static PyObject *t_SpanPayloadCheckQuery_hashCode(t_SpanPayloadCheckQuery *self, PyObject *args)
          {
            jint result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.hashCode());
              return PyLong_FromLong((long) result);
            }

            return callSuper(PY_TYPE(SpanPayloadCheckQuery), (PyObject *) self, "hashCode", args, 2);
          }

          static PyObject *t_SpanPayloadCheckQuery_rewrite(t_SpanPayloadCheckQuery *self, PyObject *args)
          {
            ::org::apache::lucene::index::IndexReader a0((jobject) NULL);
            ::org::apache::lucene::search::Query result((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::index::IndexReader::initializeClass, &a0))
            {
              OBJ_CALL(result = self->object.rewrite(a0));
              return ::org::apache::lucene::search::t_Query::wrap_Object(result);
            }

            return callSuper(PY_TYPE(SpanPayloadCheckQuery), (PyObject *) self, "rewrite", args, 2);
          }

          static PyObject *t_SpanPayloadCheckQuery_toString(t_SpanPayloadCheckQuery *self, PyObject *args)
          {
            ::java::lang::String a0((jobject) NULL);
            ::java::lang::String result((jobject) NULL);

            if (!parseArgs(args, "s", &a0))
            {
              OBJ_CALL(result = self->object.toString(a0));
              return j2p(result);
            }

            return callSuper(PY_TYPE(SpanPayloadCheckQuery), (PyObject *) self, "toString", args, 2);
          }

          static PyObject *t_SpanPayloadCheckQuery_visit(t_SpanPayloadCheckQuery *self, PyObject *args)
          {
            ::org::apache::lucene::search::QueryVisitor a0((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::search::QueryVisitor::initializeClass, &a0))
            {
              OBJ_CALL(self->object.visit(a0));
              Py_RETURN_NONE;
            }

            return callSuper(PY_TYPE(SpanPayloadCheckQuery), (PyObject *) self, "visit", args, 2);
          }

          static PyObject *t_SpanPayloadCheckQuery_get__field(t_SpanPayloadCheckQuery *self, void *data)
          {
            ::java::lang::String value((jobject) NULL);
            OBJ_CALL(value = self->object.getField());
            return j2p(value);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/suggest/analyzing/AnalyzingSuggester.h"
#include "java/util/Collection.h"
#include "org/apache/lucene/store/DataInput.h"
#include "org/apache/lucene/util/Accountable.h"
#include "org/apache/lucene/analysis/Analyzer.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/store/Directory.h"
#include "java/lang/Object.h"
#include "org/apache/lucene/store/DataOutput.h"
#include "org/apache/lucene/util/BytesRef.h"
#include "java/lang/String.h"
#include "org/apache/lucene/search/suggest/Lookup$LookupResult.h"
#include "java/util/Set.h"
#include "java/lang/CharSequence.h"
#include "java/util/List.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/search/suggest/InputIterator.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace suggest {
          namespace analyzing {

            ::java::lang::Class *AnalyzingSuggester::class$ = NULL;
            jmethodID *AnalyzingSuggester::mids$ = NULL;
            bool AnalyzingSuggester::live$ = false;
            jint AnalyzingSuggester::EXACT_FIRST = (jint) 0;
            jint AnalyzingSuggester::PRESERVE_SEP = (jint) 0;

            jclass AnalyzingSuggester::initializeClass(bool getOnly)
            {
              if (getOnly)
                return (jclass) (live$ ? class$->this$ : NULL);
              if (class$ == NULL)
              {
                jclass cls = (jclass) env->findClass("org/apache/lucene/search/suggest/analyzing/AnalyzingSuggester");

                mids$ = new jmethodID[max_mid];
                mids$[mid_init$_b735cd38a317930e] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/store/Directory;Ljava/lang/String;Lorg/apache/lucene/analysis/Analyzer;)V");
                mids$[mid_init$_60532e6811eab0d3] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/store/Directory;Ljava/lang/String;Lorg/apache/lucene/analysis/Analyzer;Lorg/apache/lucene/analysis/Analyzer;)V");
                mids$[mid_init$_db56c8470b33f627] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/store/Directory;Ljava/lang/String;Lorg/apache/lucene/analysis/Analyzer;Lorg/apache/lucene/analysis/Analyzer;IIIZ)V");
                mids$[mid_build_bf225d6cde09eeb7] = env->getMethodID(cls, "build", "(Lorg/apache/lucene/search/suggest/InputIterator;)V");
                mids$[mid_get_02b63332574637fb] = env->getMethodID(cls, "get", "(Ljava/lang/CharSequence;)Ljava/lang/Object;");
                mids$[mid_getChildResources_d4dfbf7a26ff41df] = env->getMethodID(cls, "getChildResources", "()Ljava/util/Collection;");
                mids$[mid_getCount_2e5ae9edcb9b072f] = env->getMethodID(cls, "getCount", "()J");
                mids$[mid_load_8d76187aa69e280c] = env->getMethodID(cls, "load", "(Lorg/apache/lucene/store/DataInput;)Z");
                mids$[mid_lookup_b158b62b42de2509] = env->getMethodID(cls, "lookup", "(Ljava/lang/CharSequence;Ljava/util/Set;ZI)Ljava/util/List;");
                mids$[mid_ramBytesUsed_2e5ae9edcb9b072f] = env->getMethodID(cls, "ramBytesUsed", "()J");
                mids$[mid_store_a9f4986a27ef0adc] = env->getMethodID(cls, "store", "(Lorg/apache/lucene/store/DataOutput;)Z");
                mids$[mid_convertAutomaton_cb3855ae955106b8] = env->getMethodID(cls, "convertAutomaton", "(Lorg/apache/lucene/util/automaton/Automaton;)Lorg/apache/lucene/util/automaton/Automaton;");
                mids$[mid_getFullPrefixPaths_c28373d5650ad826] = env->getMethodID(cls, "getFullPrefixPaths", "(Ljava/util/List;Lorg/apache/lucene/util/automaton/Automaton;Lorg/apache/lucene/util/fst/FST;)Ljava/util/List;");

                class$ = new ::java::lang::Class(cls);
                cls = (jclass) class$->this$;

                EXACT_FIRST = env->getStaticIntField(cls, "EXACT_FIRST");
                PRESERVE_SEP = env->getStaticIntField(cls, "PRESERVE_SEP");
                live$ = true;
              }
              return (jclass) class$->this$;
            }

            AnalyzingSuggester::AnalyzingSuggester(const ::org::apache::lucene::store::Directory & a0, const ::java::lang::String & a1, const ::org::apache::lucene::analysis::Analyzer & a2) : ::org::apache::lucene::search::suggest::Lookup(env->newObject(initializeClass, &mids$, mid_init$_b735cd38a317930e, a0.this$, a1.this$, a2.this$)) {}

            AnalyzingSuggester::AnalyzingSuggester(const ::org::apache::lucene::store::Directory & a0, const ::java::lang::String & a1, const ::org::apache::lucene::analysis::Analyzer & a2, const ::org::apache::lucene::analysis::Analyzer & a3) : ::org::apache::lucene::search::suggest::Lookup(env->newObject(initializeClass, &mids$, mid_init$_60532e6811eab0d3, a0.this$, a1.this$, a2.this$, a3.this$)) {}

            AnalyzingSuggester::AnalyzingSuggester(const ::org::apache::lucene::store::Directory & a0, const ::java::lang::String & a1, const ::org::apache::lucene::analysis::Analyzer & a2, const ::org::apache::lucene::analysis::Analyzer & a3, jint a4, jint a5, jint a6, jboolean a7) : ::org::apache::lucene::search::suggest::Lookup(env->newObject(initializeClass, &mids$, mid_init$_db56c8470b33f627, a0.this$, a1.this$, a2.this$, a3.this$, a4, a5, a6, a7)) {}

            void AnalyzingSuggester::build(const ::org::apache::lucene::search::suggest::InputIterator & a0) const
            {
              env->callVoidMethod(this$, mids$[mid_build_bf225d6cde09eeb7], a0.this$);
            }

            ::java::lang::Object AnalyzingSuggester::get(const ::java::lang::CharSequence & a0) const
            {
              return ::java::lang::Object(env->callObjectMethod(this$, mids$[mid_get_02b63332574637fb], a0.this$));
            }

            ::java::util::Collection AnalyzingSuggester::getChildResources() const
            {
              return ::java::util::Collection(env->callObjectMethod(this$, mids$[mid_getChildResources_d4dfbf7a26ff41df]));
            }

            jlong AnalyzingSuggester::getCount() const
            {
              return env->callLongMethod(this$, mids$[mid_getCount_2e5ae9edcb9b072f]);
            }

            jboolean AnalyzingSuggester::load(const ::org::apache::lucene::store::DataInput & a0) const
            {
              return env->callBooleanMethod(this$, mids$[mid_load_8d76187aa69e280c], a0.this$);
            }

            ::java::util::List AnalyzingSuggester::lookup(const ::java::lang::CharSequence & a0, const ::java::util::Set & a1, jboolean a2, jint a3) const
            {
              return ::java::util::List(env->callObjectMethod(this$, mids$[mid_lookup_b158b62b42de2509], a0.this$, a1.this$, a2, a3));
            }

            jlong AnalyzingSuggester::ramBytesUsed() const
            {
              return env->callLongMethod(this$, mids$[mid_ramBytesUsed_2e5ae9edcb9b072f]);
            }

            jboolean AnalyzingSuggester::store(const ::org::apache::lucene::store::DataOutput & a0) const
            {
              return env->callBooleanMethod(this$, mids$[mid_store_a9f4986a27ef0adc], a0.this$);
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace suggest {
          namespace analyzing {
            static PyObject *t_AnalyzingSuggester_cast_(PyTypeObject *type, PyObject *arg);
            static PyObject *t_AnalyzingSuggester_instance_(PyTypeObject *type, PyObject *arg);
            static int t_AnalyzingSuggester_init_(t_AnalyzingSuggester *self, PyObject *args, PyObject *kwds);
            static PyObject *t_AnalyzingSuggester_build(t_AnalyzingSuggester *self, PyObject *args);
            static PyObject *t_AnalyzingSuggester_get(t_AnalyzingSuggester *self, PyObject *arg);
            static PyObject *t_AnalyzingSuggester_getChildResources(t_AnalyzingSuggester *self, PyObject *args);
            static PyObject *t_AnalyzingSuggester_getCount(t_AnalyzingSuggester *self, PyObject *args);
            static PyObject *t_AnalyzingSuggester_load(t_AnalyzingSuggester *self, PyObject *args);
            static PyObject *t_AnalyzingSuggester_lookup(t_AnalyzingSuggester *self, PyObject *args);
            static PyObject *t_AnalyzingSuggester_ramBytesUsed(t_AnalyzingSuggester *self, PyObject *args);
            static PyObject *t_AnalyzingSuggester_store(t_AnalyzingSuggester *self, PyObject *args);
            static PyObject *t_AnalyzingSuggester_get__childResources(t_AnalyzingSuggester *self, void *data);
            static PyObject *t_AnalyzingSuggester_get__count(t_AnalyzingSuggester *self, void *data);
            static PyGetSetDef t_AnalyzingSuggester__fields_[] = {
              DECLARE_GET_FIELD(t_AnalyzingSuggester, childResources),
              DECLARE_GET_FIELD(t_AnalyzingSuggester, count),
              { NULL, NULL, NULL, NULL, NULL }
            };

            static PyMethodDef t_AnalyzingSuggester__methods_[] = {
              DECLARE_METHOD(t_AnalyzingSuggester, cast_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_AnalyzingSuggester, instance_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_AnalyzingSuggester, build, METH_VARARGS),
              DECLARE_METHOD(t_AnalyzingSuggester, get, METH_O),
              DECLARE_METHOD(t_AnalyzingSuggester, getChildResources, METH_VARARGS),
              DECLARE_METHOD(t_AnalyzingSuggester, getCount, METH_VARARGS),
              DECLARE_METHOD(t_AnalyzingSuggester, load, METH_VARARGS),
              DECLARE_METHOD(t_AnalyzingSuggester, lookup, METH_VARARGS),
              DECLARE_METHOD(t_AnalyzingSuggester, ramBytesUsed, METH_VARARGS),
              DECLARE_METHOD(t_AnalyzingSuggester, store, METH_VARARGS),
              { NULL, NULL, 0, NULL }
            };

            static PyType_Slot PY_TYPE_SLOTS(AnalyzingSuggester)[] = {
              { Py_tp_methods, t_AnalyzingSuggester__methods_ },
              { Py_tp_init, (void *) t_AnalyzingSuggester_init_ },
              { Py_tp_getset, t_AnalyzingSuggester__fields_ },
              { 0, NULL }
            };

            static PyType_Def *PY_TYPE_BASES(AnalyzingSuggester)[] = {
              &PY_TYPE_DEF(::org::apache::lucene::search::suggest::Lookup),
              NULL
            };

            DEFINE_TYPE(AnalyzingSuggester, t_AnalyzingSuggester, AnalyzingSuggester);

            void t_AnalyzingSuggester::install(PyObject *module)
            {
              installType(&PY_TYPE(AnalyzingSuggester), &PY_TYPE_DEF(AnalyzingSuggester), module, "AnalyzingSuggester", 0);
            }

            void t_AnalyzingSuggester::initialize(PyObject *module)
            {
              PyObject_SetAttrString((PyObject *) PY_TYPE(AnalyzingSuggester), "class_", make_descriptor(AnalyzingSuggester::initializeClass, 1));
              PyObject_SetAttrString((PyObject *) PY_TYPE(AnalyzingSuggester), "wrapfn_", make_descriptor(t_AnalyzingSuggester::wrap_jobject));
              PyObject_SetAttrString((PyObject *) PY_TYPE(AnalyzingSuggester), "boxfn_", make_descriptor(boxObject));
              env->getClass(AnalyzingSuggester::initializeClass);
              PyObject_SetAttrString((PyObject *) PY_TYPE(AnalyzingSuggester), "EXACT_FIRST", make_descriptor(AnalyzingSuggester::EXACT_FIRST));
              PyObject_SetAttrString((PyObject *) PY_TYPE(AnalyzingSuggester), "PRESERVE_SEP", make_descriptor(AnalyzingSuggester::PRESERVE_SEP));
            }

            static PyObject *t_AnalyzingSuggester_cast_(PyTypeObject *type, PyObject *arg)
            {
              if (!(arg = castCheck(arg, AnalyzingSuggester::initializeClass, 1)))
                return NULL;
              return t_AnalyzingSuggester::wrap_Object(AnalyzingSuggester(((t_AnalyzingSuggester *) arg)->object.this$));
            }
            static PyObject *t_AnalyzingSuggester_instance_(PyTypeObject *type, PyObject *arg)
            {
              if (!castCheck(arg, AnalyzingSuggester::initializeClass, 0))
                Py_RETURN_FALSE;
              Py_RETURN_TRUE;
            }

            static int t_AnalyzingSuggester_init_(t_AnalyzingSuggester *self, PyObject *args, PyObject *kwds)
            {
              switch (PyTuple_GET_SIZE(args)) {
               case 3:
                {
                  ::org::apache::lucene::store::Directory a0((jobject) NULL);
                  ::java::lang::String a1((jobject) NULL);
                  ::org::apache::lucene::analysis::Analyzer a2((jobject) NULL);
                  AnalyzingSuggester object((jobject) NULL);

                  if (!parseArgs(args, "ksk", ::org::apache::lucene::store::Directory::initializeClass, ::org::apache::lucene::analysis::Analyzer::initializeClass, &a0, &a1, &a2))
                  {
                    INT_CALL(object = AnalyzingSuggester(a0, a1, a2));
                    self->object = object;
                    break;
                  }
                }
                goto err;
               case 4:
                {
                  ::org::apache::lucene::store::Directory a0((jobject) NULL);
                  ::java::lang::String a1((jobject) NULL);
                  ::org::apache::lucene::analysis::Analyzer a2((jobject) NULL);
                  ::org::apache::lucene::analysis::Analyzer a3((jobject) NULL);
                  AnalyzingSuggester object((jobject) NULL);

                  if (!parseArgs(args, "kskk", ::org::apache::lucene::store::Directory::initializeClass, ::org::apache::lucene::analysis::Analyzer::initializeClass, ::org::apache::lucene::analysis::Analyzer::initializeClass, &a0, &a1, &a2, &a3))
                  {
                    INT_CALL(object = AnalyzingSuggester(a0, a1, a2, a3));
                    self->object = object;
                    break;
                  }
                }
                goto err;
               case 8:
                {
                  ::org::apache::lucene::store::Directory a0((jobject) NULL);
                  ::java::lang::String a1((jobject) NULL);
                  ::org::apache::lucene::analysis::Analyzer a2((jobject) NULL);
                  ::org::apache::lucene::analysis::Analyzer a3((jobject) NULL);
                  jint a4;
                  jint a5;
                  jint a6;
                  jboolean a7;
                  AnalyzingSuggester object((jobject) NULL);

                  if (!parseArgs(args, "kskkIIIZ", ::org::apache::lucene::store::Directory::initializeClass, ::org::apache::lucene::analysis::Analyzer::initializeClass, ::org::apache::lucene::analysis::Analyzer::initializeClass, &a0, &a1, &a2, &a3, &a4, &a5, &a6, &a7))
                  {
                    INT_CALL(object = AnalyzingSuggester(a0, a1, a2, a3, a4, a5, a6, a7));
                    self->object = object;
                    break;
                  }
                }
               default:
               err:
                PyErr_SetArgsError((PyObject *) self, "__init__", args);
                return -1;
              }

              return 0;
            }

            static PyObject *t_AnalyzingSuggester_build(t_AnalyzingSuggester *self, PyObject *args)
            {
              ::org::apache::lucene::search::suggest::InputIterator a0((jobject) NULL);

              if (!parseArgs(args, "k", ::org::apache::lucene::search::suggest::InputIterator::initializeClass, &a0))
              {
                OBJ_CALL(self->object.build(a0));
                Py_RETURN_NONE;
              }

              return callSuper(PY_TYPE(AnalyzingSuggester), (PyObject *) self, "build", args, 2);
            }

            static PyObject *t_AnalyzingSuggester_get(t_AnalyzingSuggester *self, PyObject *arg)
            {
              ::java::lang::CharSequence a0((jobject) NULL);
              ::java::lang::Object result((jobject) NULL);

              if (!parseArg(arg, "O", ::java::lang::PY_TYPE(CharSequence), &a0))
              {
                OBJ_CALL(result = self->object.get(a0));
                return ::java::lang::t_Object::wrap_Object(result);
              }

              PyErr_SetArgsError((PyObject *) self, "get", arg);
              return NULL;
            }

            static PyObject *t_AnalyzingSuggester_getChildResources(t_AnalyzingSuggester *self, PyObject *args)
            {
              ::java::util::Collection result((jobject) NULL);

              if (!parseArgs(args, ""))
              {
                OBJ_CALL(result = self->object.getChildResources());
                return ::java::util::t_Collection::wrap_Object(result, ::org::apache::lucene::util::PY_TYPE(Accountable));
              }

              return callSuper(PY_TYPE(AnalyzingSuggester), (PyObject *) self, "getChildResources", args, 2);
            }

            static PyObject *t_AnalyzingSuggester_getCount(t_AnalyzingSuggester *self, PyObject *args)
            {
              jlong result;

              if (!parseArgs(args, ""))
              {
                OBJ_CALL(result = self->object.getCount());
                return PyLong_FromLongLong((PY_LONG_LONG) result);
              }

              return callSuper(PY_TYPE(AnalyzingSuggester), (PyObject *) self, "getCount", args, 2);
            }

            static PyObject *t_AnalyzingSuggester_load(t_AnalyzingSuggester *self, PyObject *args)
            {
              ::org::apache::lucene::store::DataInput a0((jobject) NULL);
              jboolean result;

              if (!parseArgs(args, "k", ::org::apache::lucene::store::DataInput::initializeClass, &a0))
              {
                OBJ_CALL(result = self->object.load(a0));
                Py_RETURN_BOOL(result);
              }

              return callSuper(PY_TYPE(AnalyzingSuggester), (PyObject *) self, "load", args, 2);
            }

            static PyObject *t_AnalyzingSuggester_lookup(t_AnalyzingSuggester *self, PyObject *args)
            {
              ::java::lang::CharSequence a0((jobject) NULL);
              ::java::util::Set a1((jobject) NULL);
              PyTypeObject **p1;
              jboolean a2;
              jint a3;
              ::java::util::List result((jobject) NULL);

              if (!parseArgs(args, "OKZI", ::java::lang::PY_TYPE(CharSequence), ::java::util::Set::initializeClass, &a0, &a1, &p1, ::java::util::t_Set::parameters_, &a2, &a3))
              {
                OBJ_CALL(result = self->object.lookup(a0, a1, a2, a3));
                return ::java::util::t_List::wrap_Object(result, ::org::apache::lucene::search::suggest::PY_TYPE(Lookup$LookupResult));
              }

              return callSuper(PY_TYPE(AnalyzingSuggester), (PyObject *) self, "lookup", args, 2);
            }

            static PyObject *t_AnalyzingSuggester_ramBytesUsed(t_AnalyzingSuggester *self, PyObject *args)
            {
              jlong result;

              if (!parseArgs(args, ""))
              {
                OBJ_CALL(result = self->object.ramBytesUsed());
                return PyLong_FromLongLong((PY_LONG_LONG) result);
              }

              return callSuper(PY_TYPE(AnalyzingSuggester), (PyObject *) self, "ramBytesUsed", args, 2);
            }

            static PyObject *t_AnalyzingSuggester_store(t_AnalyzingSuggester *self, PyObject *args)
            {
              ::org::apache::lucene::store::DataOutput a0((jobject) NULL);
              jboolean result;

              if (!parseArgs(args, "k", ::org::apache::lucene::store::DataOutput::initializeClass, &a0))
              {
                OBJ_CALL(result = self->object.store(a0));
                Py_RETURN_BOOL(result);
              }

              return callSuper(PY_TYPE(AnalyzingSuggester), (PyObject *) self, "store", args, 2);
            }

            static PyObject *t_AnalyzingSuggester_get__childResources(t_AnalyzingSuggester *self, void *data)
            {
              ::java::util::Collection value((jobject) NULL);
              OBJ_CALL(value = self->object.getChildResources());
              return ::java::util::t_Collection::wrap_Object(value);
            }

            static PyObject *t_AnalyzingSuggester_get__count(t_AnalyzingSuggester *self, void *data)
            {
              jlong value;
              OBJ_CALL(value = self->object.getCount());
              return PyLong_FromLongLong((PY_LONG_LONG) value);
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/index/PointValues$Relation.h"
#include "org/apache/lucene/index/PointValues$Relation.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {

        ::java::lang::Class *PointValues$Relation::class$ = NULL;
        jmethodID *PointValues$Relation::mids$ = NULL;
        bool PointValues$Relation::live$ = false;
        PointValues$Relation *PointValues$Relation::CELL_CROSSES_QUERY = NULL;
        PointValues$Relation *PointValues$Relation::CELL_INSIDE_QUERY = NULL;
        PointValues$Relation *PointValues$Relation::CELL_OUTSIDE_QUERY = NULL;

        jclass PointValues$Relation::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/index/PointValues$Relation");

            mids$ = new jmethodID[max_mid];
            mids$[mid_valueOf_9a9f8eb9186f710b] = env->getStaticMethodID(cls, "valueOf", "(Ljava/lang/String;)Lorg/apache/lucene/index/PointValues$Relation;");
            mids$[mid_values_6728c7863da2a220] = env->getStaticMethodID(cls, "values", "()[Lorg/apache/lucene/index/PointValues$Relation;");

            class$ = new ::java::lang::Class(cls);
            cls = (jclass) class$->this$;

            CELL_CROSSES_QUERY = new PointValues$Relation(env->getStaticObjectField(cls, "CELL_CROSSES_QUERY", "Lorg/apache/lucene/index/PointValues$Relation;"));
            CELL_INSIDE_QUERY = new PointValues$Relation(env->getStaticObjectField(cls, "CELL_INSIDE_QUERY", "Lorg/apache/lucene/index/PointValues$Relation;"));
            CELL_OUTSIDE_QUERY = new PointValues$Relation(env->getStaticObjectField(cls, "CELL_OUTSIDE_QUERY", "Lorg/apache/lucene/index/PointValues$Relation;"));
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        PointValues$Relation PointValues$Relation::valueOf(const ::java::lang::String & a0)
        {
          jclass cls = env->getClass(initializeClass);
          return PointValues$Relation(env->callStaticObjectMethod(cls, mids$[mid_valueOf_9a9f8eb9186f710b], a0.this$));
        }

        JArray< PointValues$Relation > PointValues$Relation::values()
        {
          jclass cls = env->getClass(initializeClass);
          return JArray< PointValues$Relation >(env->callStaticObjectMethod(cls, mids$[mid_values_6728c7863da2a220]));
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {
        static PyObject *t_PointValues$Relation_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_PointValues$Relation_instance_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_PointValues$Relation_of_(t_PointValues$Relation *self, PyObject *args);
        static PyObject *t_PointValues$Relation_valueOf(PyTypeObject *type, PyObject *args);
        static PyObject *t_PointValues$Relation_values(PyTypeObject *type);
        static PyObject *t_PointValues$Relation_get__parameters_(t_PointValues$Relation *self, void *data);
        static PyGetSetDef t_PointValues$Relation__fields_[] = {
          DECLARE_GET_FIELD(t_PointValues$Relation, parameters_),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_PointValues$Relation__methods_[] = {
          DECLARE_METHOD(t_PointValues$Relation, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_PointValues$Relation, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_PointValues$Relation, of_, METH_VARARGS),
          DECLARE_METHOD(t_PointValues$Relation, valueOf, METH_VARARGS | METH_CLASS),
          DECLARE_METHOD(t_PointValues$Relation, values, METH_NOARGS | METH_CLASS),
          { NULL, NULL, 0, NULL }
        };

        static PyType_Slot PY_TYPE_SLOTS(PointValues$Relation)[] = {
          { Py_tp_methods, t_PointValues$Relation__methods_ },
          { Py_tp_init, (void *) abstract_init },
          { Py_tp_getset, t_PointValues$Relation__fields_ },
          { 0, NULL }
        };

        static PyType_Def *PY_TYPE_BASES(PointValues$Relation)[] = {
          &PY_TYPE_DEF(::java::lang::Enum),
          NULL
        };

        DEFINE_TYPE(PointValues$Relation, t_PointValues$Relation, PointValues$Relation);
        PyObject *t_PointValues$Relation::wrap_Object(const PointValues$Relation& object, PyTypeObject *p0)
        {
          PyObject *obj = t_PointValues$Relation::wrap_Object(object);
          if (obj != NULL && obj != Py_None)
          {
            t_PointValues$Relation *self = (t_PointValues$Relation *) obj;
            self->parameters[0] = p0;
          }
          return obj;
        }

        PyObject *t_PointValues$Relation::wrap_jobject(const jobject& object, PyTypeObject *p0)
        {
          PyObject *obj = t_PointValues$Relation::wrap_jobject(object);
          if (obj != NULL && obj != Py_None)
          {
            t_PointValues$Relation *self = (t_PointValues$Relation *) obj;
            self->parameters[0] = p0;
          }
          return obj;
        }

        void t_PointValues$Relation::install(PyObject *module)
        {
          installType(&PY_TYPE(PointValues$Relation), &PY_TYPE_DEF(PointValues$Relation), module, "PointValues$Relation", 0);
        }

        void t_PointValues$Relation::initialize(PyObject *module)
        {
          PyObject_SetAttrString((PyObject *) PY_TYPE(PointValues$Relation), "class_", make_descriptor(PointValues$Relation::initializeClass, 1));
          PyObject_SetAttrString((PyObject *) PY_TYPE(PointValues$Relation), "wrapfn_", make_descriptor(t_PointValues$Relation::wrap_jobject));
          PyObject_SetAttrString((PyObject *) PY_TYPE(PointValues$Relation), "boxfn_", make_descriptor(boxObject));
          env->getClass(PointValues$Relation::initializeClass);
          PyObject_SetAttrString((PyObject *) PY_TYPE(PointValues$Relation), "CELL_CROSSES_QUERY", make_descriptor(t_PointValues$Relation::wrap_Object(*PointValues$Relation::CELL_CROSSES_QUERY)));
          PyObject_SetAttrString((PyObject *) PY_TYPE(PointValues$Relation), "CELL_INSIDE_QUERY", make_descriptor(t_PointValues$Relation::wrap_Object(*PointValues$Relation::CELL_INSIDE_QUERY)));
          PyObject_SetAttrString((PyObject *) PY_TYPE(PointValues$Relation), "CELL_OUTSIDE_QUERY", make_descriptor(t_PointValues$Relation::wrap_Object(*PointValues$Relation::CELL_OUTSIDE_QUERY)));
        }

        static PyObject *t_PointValues$Relation_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, PointValues$Relation::initializeClass, 1)))
            return NULL;
          return t_PointValues$Relation::wrap_Object(PointValues$Relation(((t_PointValues$Relation *) arg)->object.this$));
        }
        static PyObject *t_PointValues$Relation_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, PointValues$Relation::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static PyObject *t_PointValues$Relation_of_(t_PointValues$Relation *self, PyObject *args)
        {
          if (!parseArg(args, "T", 1, &(self->parameters)))
            Py_RETURN_SELF;
          return PyErr_SetArgsError((PyObject *) self, "of_", args);
        }

        static PyObject *t_PointValues$Relation_valueOf(PyTypeObject *type, PyObject *args)
        {
          ::java::lang::String a0((jobject) NULL);
          PointValues$Relation result((jobject) NULL);

          if (!parseArgs(args, "s", &a0))
          {
            OBJ_CALL(result = ::org::apache::lucene::index::PointValues$Relation::valueOf(a0));
            return t_PointValues$Relation::wrap_Object(result);
          }

          return callSuper(type, "valueOf", args, 2);
        }

        static PyObject *t_PointValues$Relation_values(PyTypeObject *type)
        {
          JArray< PointValues$Relation > result((jobject) NULL);
          OBJ_CALL(result = ::org::apache::lucene::index::PointValues$Relation::values());
          return JArray<jobject>(result.this$).wrap(t_PointValues$Relation::wrap_jobject);
        }
        static PyObject *t_PointValues$Relation_get__parameters_(t_PointValues$Relation *self, void *data)
        {
          return typeParameters(self->parameters, sizeof(self->parameters));
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queryparser/flexible/standard/builders/ModifierQueryNodeBuilder.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/queryparser/flexible/core/QueryNodeException.h"
#include "org/apache/lucene/queryparser/flexible/standard/builders/StandardQueryBuilder.h"
#include "org/apache/lucene/queryparser/flexible/core/nodes/QueryNode.h"
#include "org/apache/lucene/search/Query.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace standard {
            namespace builders {

              ::java::lang::Class *ModifierQueryNodeBuilder::class$ = NULL;
              jmethodID *ModifierQueryNodeBuilder::mids$ = NULL;
              bool ModifierQueryNodeBuilder::live$ = false;

              jclass ModifierQueryNodeBuilder::initializeClass(bool getOnly)
              {
                if (getOnly)
                  return (jclass) (live$ ? class$->this$ : NULL);
                if (class$ == NULL)
                {
                  jclass cls = (jclass) env->findClass("org/apache/lucene/queryparser/flexible/standard/builders/ModifierQueryNodeBuilder");

                  mids$ = new jmethodID[max_mid];
                  mids$[mid_init$_f2cc1bce94666404] = env->getMethodID(cls, "<init>", "()V");
                  mids$[mid_build_266d6dc3b958f456] = env->getMethodID(cls, "build", "(Lorg/apache/lucene/queryparser/flexible/core/nodes/QueryNode;)Lorg/apache/lucene/search/Query;");

                  class$ = new ::java::lang::Class(cls);
                  live$ = true;
                }
                return (jclass) class$->this$;
              }

              ModifierQueryNodeBuilder::ModifierQueryNodeBuilder() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_f2cc1bce94666404)) {}

              ::org::apache::lucene::search::Query ModifierQueryNodeBuilder::build(const ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode & a0) const
              {
                return ::org::apache::lucene::search::Query(env->callObjectMethod(this$, mids$[mid_build_266d6dc3b958f456], a0.this$));
              }
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace standard {
            namespace builders {
              static PyObject *t_ModifierQueryNodeBuilder_cast_(PyTypeObject *type, PyObject *arg);
              static PyObject *t_ModifierQueryNodeBuilder_instance_(PyTypeObject *type, PyObject *arg);
              static int t_ModifierQueryNodeBuilder_init_(t_ModifierQueryNodeBuilder *self, PyObject *args, PyObject *kwds);
              static PyObject *t_ModifierQueryNodeBuilder_build(t_ModifierQueryNodeBuilder *self, PyObject *arg);

              static PyMethodDef t_ModifierQueryNodeBuilder__methods_[] = {
                DECLARE_METHOD(t_ModifierQueryNodeBuilder, cast_, METH_O | METH_CLASS),
                DECLARE_METHOD(t_ModifierQueryNodeBuilder, instance_, METH_O | METH_CLASS),
                DECLARE_METHOD(t_ModifierQueryNodeBuilder, build, METH_O),
                { NULL, NULL, 0, NULL }
              };

              static PyType_Slot PY_TYPE_SLOTS(ModifierQueryNodeBuilder)[] = {
                { Py_tp_methods, t_ModifierQueryNodeBuilder__methods_ },
                { Py_tp_init, (void *) t_ModifierQueryNodeBuilder_init_ },
                { 0, NULL }
              };

              static PyType_Def *PY_TYPE_BASES(ModifierQueryNodeBuilder)[] = {
                &PY_TYPE_DEF(::java::lang::Object),
                NULL
              };

              DEFINE_TYPE(ModifierQueryNodeBuilder, t_ModifierQueryNodeBuilder, ModifierQueryNodeBuilder);

              void t_ModifierQueryNodeBuilder::install(PyObject *module)
              {
                installType(&PY_TYPE(ModifierQueryNodeBuilder), &PY_TYPE_DEF(ModifierQueryNodeBuilder), module, "ModifierQueryNodeBuilder", 0);
              }

              void t_ModifierQueryNodeBuilder::initialize(PyObject *module)
              {
                PyObject_SetAttrString((PyObject *) PY_TYPE(ModifierQueryNodeBuilder), "class_", make_descriptor(ModifierQueryNodeBuilder::initializeClass, 1));
                PyObject_SetAttrString((PyObject *) PY_TYPE(ModifierQueryNodeBuilder), "wrapfn_", make_descriptor(t_ModifierQueryNodeBuilder::wrap_jobject));
                PyObject_SetAttrString((PyObject *) PY_TYPE(ModifierQueryNodeBuilder), "boxfn_", make_descriptor(boxObject));
              }

              static PyObject *t_ModifierQueryNodeBuilder_cast_(PyTypeObject *type, PyObject *arg)
              {
                if (!(arg = castCheck(arg, ModifierQueryNodeBuilder::initializeClass, 1)))
                  return NULL;
                return t_ModifierQueryNodeBuilder::wrap_Object(ModifierQueryNodeBuilder(((t_ModifierQueryNodeBuilder *) arg)->object.this$));
              }
              static PyObject *t_ModifierQueryNodeBuilder_instance_(PyTypeObject *type, PyObject *arg)
              {
                if (!castCheck(arg, ModifierQueryNodeBuilder::initializeClass, 0))
                  Py_RETURN_FALSE;
                Py_RETURN_TRUE;
              }

              static int t_ModifierQueryNodeBuilder_init_(t_ModifierQueryNodeBuilder *self, PyObject *args, PyObject *kwds)
              {
                ModifierQueryNodeBuilder object((jobject) NULL);

                INT_CALL(object = ModifierQueryNodeBuilder());
                self->object = object;

                return 0;
              }

              static PyObject *t_ModifierQueryNodeBuilder_build(t_ModifierQueryNodeBuilder *self, PyObject *arg)
              {
                ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode a0((jobject) NULL);
                ::org::apache::lucene::search::Query result((jobject) NULL);

                if (!parseArg(arg, "k", ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode::initializeClass, &a0))
                {
                  OBJ_CALL(result = self->object.build(a0));
                  return ::org::apache::lucene::search::t_Query::wrap_Object(result);
                }

                PyErr_SetArgsError((PyObject *) self, "build", arg);
                return NULL;
              }
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queries/function/valuesource/MultiFloatFunction.h"
#include "java/util/Map.h"
#include "org/apache/lucene/index/LeafReaderContext.h"
#include "org/apache/lucene/search/IndexSearcher.h"
#include "org/apache/lucene/queries/function/FunctionValues.h"
#include "java/lang/Class.h"
#include "java/lang/Object.h"
#include "java/lang/String.h"
#include "java/io/IOException.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queries {
        namespace function {
          namespace valuesource {

            ::java::lang::Class *MultiFloatFunction::class$ = NULL;
            jmethodID *MultiFloatFunction::mids$ = NULL;
            bool MultiFloatFunction::live$ = false;

            jclass MultiFloatFunction::initializeClass(bool getOnly)
            {
              if (getOnly)
                return (jclass) (live$ ? class$->this$ : NULL);
              if (class$ == NULL)
              {
                jclass cls = (jclass) env->findClass("org/apache/lucene/queries/function/valuesource/MultiFloatFunction");

                mids$ = new jmethodID[max_mid];
                mids$[mid_init$_103f1bad010d62d9] = env->getMethodID(cls, "<init>", "([Lorg/apache/lucene/queries/function/ValueSource;)V");
                mids$[mid_createWeight_69d322032c5ae159] = env->getMethodID(cls, "createWeight", "(Ljava/util/Map;Lorg/apache/lucene/search/IndexSearcher;)V");
                mids$[mid_description_db9b55ba01e03e4b] = env->getMethodID(cls, "description", "()Ljava/lang/String;");
                mids$[mid_equals_8b72f2dcdde6fd1d] = env->getMethodID(cls, "equals", "(Ljava/lang/Object;)Z");
                mids$[mid_getValues_ede8eccd3e97f32c] = env->getMethodID(cls, "getValues", "(Ljava/util/Map;Lorg/apache/lucene/index/LeafReaderContext;)Lorg/apache/lucene/queries/function/FunctionValues;");
                mids$[mid_hashCode_9972fcc56b44e79d] = env->getMethodID(cls, "hashCode", "()I");
                mids$[mid_func_e36b2f77f3be25c3] = env->getMethodID(cls, "func", "(I[Lorg/apache/lucene/queries/function/FunctionValues;)F");
                mids$[mid_name_db9b55ba01e03e4b] = env->getMethodID(cls, "name", "()Ljava/lang/String;");
                mids$[mid_exists_79d91b981374bcba] = env->getMethodID(cls, "exists", "(I[Lorg/apache/lucene/queries/function/FunctionValues;)Z");

                class$ = new ::java::lang::Class(cls);
                live$ = true;
              }
              return (jclass) class$->this$;
            }

            MultiFloatFunction::MultiFloatFunction(const JArray< ::org::apache::lucene::queries::function::ValueSource > & a0) : ::org::apache::lucene::queries::function::ValueSource(env->newObject(initializeClass, &mids$, mid_init$_103f1bad010d62d9, a0.this$)) {}

            void MultiFloatFunction::createWeight(const ::java::util::Map & a0, const ::org::apache::lucene::search::IndexSearcher & a1) const
            {
              env->callVoidMethod(this$, mids$[mid_createWeight_69d322032c5ae159], a0.this$, a1.this$);
            }

            ::java::lang::String MultiFloatFunction::description() const
            {
              return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_description_db9b55ba01e03e4b]));
            }

            jboolean MultiFloatFunction::equals(const ::java::lang::Object & a0) const
            {
              return env->callBooleanMethod(this$, mids$[mid_equals_8b72f2dcdde6fd1d], a0.this$);
            }

            ::org::apache::lucene::queries::function::FunctionValues MultiFloatFunction::getValues(const ::java::util::Map & a0, const ::org::apache::lucene::index::LeafReaderContext & a1) const
            {
              return ::org::apache::lucene::queries::function::FunctionValues(env->callObjectMethod(this$, mids$[mid_getValues_ede8eccd3e97f32c], a0.this$, a1.this$));
            }

            jint MultiFloatFunction::hashCode() const
            {
              return env->callIntMethod(this$, mids$[mid_hashCode_9972fcc56b44e79d]);
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queries {
        namespace function {
          namespace valuesource {
            static PyObject *t_MultiFloatFunction_cast_(PyTypeObject *type, PyObject *arg);
            static PyObject *t_MultiFloatFunction_instance_(PyTypeObject *type, PyObject *arg);
            static int t_MultiFloatFunction_init_(t_MultiFloatFunction *self, PyObject *args, PyObject *kwds);
            static PyObject *t_MultiFloatFunction_createWeight(t_MultiFloatFunction *self, PyObject *args);
            static PyObject *t_MultiFloatFunction_description(t_MultiFloatFunction *self, PyObject *args);
            static PyObject *t_MultiFloatFunction_equals(t_MultiFloatFunction *self, PyObject *args);
            static PyObject *t_MultiFloatFunction_getValues(t_MultiFloatFunction *self, PyObject *args);
            static PyObject *t_MultiFloatFunction_hashCode(t_MultiFloatFunction *self, PyObject *args);

            static PyMethodDef t_MultiFloatFunction__methods_[] = {
              DECLARE_METHOD(t_MultiFloatFunction, cast_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_MultiFloatFunction, instance_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_MultiFloatFunction, createWeight, METH_VARARGS),
              DECLARE_METHOD(t_MultiFloatFunction, description, METH_VARARGS),
              DECLARE_METHOD(t_MultiFloatFunction, equals, METH_VARARGS),
              DECLARE_METHOD(t_MultiFloatFunction, getValues, METH_VARARGS),
              DECLARE_METHOD(t_MultiFloatFunction, hashCode, METH_VARARGS),
              { NULL, NULL, 0, NULL }
            };

            static PyType_Slot PY_TYPE_SLOTS(MultiFloatFunction)[] = {
              { Py_tp_methods, t_MultiFloatFunction__methods_ },
              { Py_tp_init, (void *) t_MultiFloatFunction_init_ },
              { 0, NULL }
            };

            static PyType_Def *PY_TYPE_BASES(MultiFloatFunction)[] = {
              &PY_TYPE_DEF(::org::apache::lucene::queries::function::ValueSource),
              NULL
            };

            DEFINE_TYPE(MultiFloatFunction, t_MultiFloatFunction, MultiFloatFunction);

            void t_MultiFloatFunction::install(PyObject *module)
            {
              installType(&PY_TYPE(MultiFloatFunction), &PY_TYPE_DEF(MultiFloatFunction), module, "MultiFloatFunction", 0);
            }

            void t_MultiFloatFunction::initialize(PyObject *module)
            {
              PyObject_SetAttrString((PyObject *) PY_TYPE(MultiFloatFunction), "class_", make_descriptor(MultiFloatFunction::initializeClass, 1));
              PyObject_SetAttrString((PyObject *) PY_TYPE(MultiFloatFunction), "wrapfn_", make_descriptor(t_MultiFloatFunction::wrap_jobject));
              PyObject_SetAttrString((PyObject *) PY_TYPE(MultiFloatFunction), "boxfn_", make_descriptor(boxObject));
            }

            static PyObject *t_MultiFloatFunction_cast_(PyTypeObject *type, PyObject *arg)
            {
              if (!(arg = castCheck(arg, MultiFloatFunction::initializeClass, 1)))
                return NULL;
              return t_MultiFloatFunction::wrap_Object(MultiFloatFunction(((t_MultiFloatFunction *) arg)->object.this$));
            }
            static PyObject *t_MultiFloatFunction_instance_(PyTypeObject *type, PyObject *arg)
            {
              if (!castCheck(arg, MultiFloatFunction::initializeClass, 0))
                Py_RETURN_FALSE;
              Py_RETURN_TRUE;
            }

            static int t_MultiFloatFunction_init_(t_MultiFloatFunction *self, PyObject *args, PyObject *kwds)
            {
              JArray< ::org::apache::lucene::queries::function::ValueSource > a0((jobject) NULL);
              MultiFloatFunction object((jobject) NULL);

              if (!parseArgs(args, "[k", ::org::apache::lucene::queries::function::ValueSource::initializeClass, &a0))
              {
                INT_CALL(object = MultiFloatFunction(a0));
                self->object = object;
              }
              else
              {
                PyErr_SetArgsError((PyObject *) self, "__init__", args);
                return -1;
              }

              return 0;
            }

            static PyObject *t_MultiFloatFunction_createWeight(t_MultiFloatFunction *self, PyObject *args)
            {
              ::java::util::Map a0((jobject) NULL);
              PyTypeObject **p0;
              ::org::apache::lucene::search::IndexSearcher a1((jobject) NULL);

              if (!parseArgs(args, "Kk", ::java::util::Map::initializeClass, ::org::apache::lucene::search::IndexSearcher::initializeClass, &a0, &p0, ::java::util::t_Map::parameters_, &a1))
              {
                OBJ_CALL(self->object.createWeight(a0, a1));
                Py_RETURN_NONE;
              }

              return callSuper(PY_TYPE(MultiFloatFunction), (PyObject *) self, "createWeight", args, 2);
            }

            static PyObject *t_MultiFloatFunction_description(t_MultiFloatFunction *self, PyObject *args)
            {
              ::java::lang::String result((jobject) NULL);

              if (!parseArgs(args, ""))
              {
                OBJ_CALL(result = self->object.description());
                return j2p(result);
              }

              return callSuper(PY_TYPE(MultiFloatFunction), (PyObject *) self, "description", args, 2);
            }

            static PyObject *t_MultiFloatFunction_equals(t_MultiFloatFunction *self, PyObject *args)
            {
              ::java::lang::Object a0((jobject) NULL);
              jboolean result;

              if (!parseArgs(args, "o", &a0))
              {
                OBJ_CALL(result = self->object.equals(a0));
                Py_RETURN_BOOL(result);
              }

              return callSuper(PY_TYPE(MultiFloatFunction), (PyObject *) self, "equals", args, 2);
            }

            static PyObject *t_MultiFloatFunction_getValues(t_MultiFloatFunction *self, PyObject *args)
            {
              ::java::util::Map a0((jobject) NULL);
              PyTypeObject **p0;
              ::org::apache::lucene::index::LeafReaderContext a1((jobject) NULL);
              ::org::apache::lucene::queries::function::FunctionValues result((jobject) NULL);

              if (!parseArgs(args, "Kk", ::java::util::Map::initializeClass, ::org::apache::lucene::index::LeafReaderContext::initializeClass, &a0, &p0, ::java::util::t_Map::parameters_, &a1))
              {
                OBJ_CALL(result = self->object.getValues(a0, a1));
                return ::org::apache::lucene::queries::function::t_FunctionValues::wrap_Object(result);
              }

              return callSuper(PY_TYPE(MultiFloatFunction), (PyObject *) self, "getValues", args, 2);
            }

            static PyObject *t_MultiFloatFunction_hashCode(t_MultiFloatFunction *self, PyObject *args)
            {
              jint result;

              if (!parseArgs(args, ""))
              {
                OBJ_CALL(result = self->object.hashCode());
                return PyLong_FromLong((long) result);
              }

              return callSuper(PY_TYPE(MultiFloatFunction), (PyObject *) self, "hashCode", args, 2);
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/WildcardQuery.h"
#include "org/apache/lucene/util/automaton/Automaton.h"
#include "java/lang/String.h"
#include "org/apache/lucene/index/Term.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {

        ::java::lang::Class *WildcardQuery::class$ = NULL;
        jmethodID *WildcardQuery::mids$ = NULL;
        bool WildcardQuery::live$ = false;
        jchar WildcardQuery::WILDCARD_CHAR = (jchar) 0;
        jchar WildcardQuery::WILDCARD_ESCAPE = (jchar) 0;
        jchar WildcardQuery::WILDCARD_STRING = (jchar) 0;

        jclass WildcardQuery::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/search/WildcardQuery");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_32784f9c0ee449e6] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/index/Term;)V");
            mids$[mid_init$_d948bda7346ba4b9] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/index/Term;I)V");
            mids$[mid_getTerm_5e734526802c58d9] = env->getMethodID(cls, "getTerm", "()Lorg/apache/lucene/index/Term;");
            mids$[mid_toAutomaton_f5ec750578712f85] = env->getStaticMethodID(cls, "toAutomaton", "(Lorg/apache/lucene/index/Term;)Lorg/apache/lucene/util/automaton/Automaton;");
            mids$[mid_toString_9bfa75c9f141b67f] = env->getMethodID(cls, "toString", "(Ljava/lang/String;)Ljava/lang/String;");

            class$ = new ::java::lang::Class(cls);
            cls = (jclass) class$->this$;

            WILDCARD_CHAR = env->getStaticCharField(cls, "WILDCARD_CHAR");
            WILDCARD_ESCAPE = env->getStaticCharField(cls, "WILDCARD_ESCAPE");
            WILDCARD_STRING = env->getStaticCharField(cls, "WILDCARD_STRING");
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        WildcardQuery::WildcardQuery(const ::org::apache::lucene::index::Term & a0) : ::org::apache::lucene::search::AutomatonQuery(env->newObject(initializeClass, &mids$, mid_init$_32784f9c0ee449e6, a0.this$)) {}

        WildcardQuery::WildcardQuery(const ::org::apache::lucene::index::Term & a0, jint a1) : ::org::apache::lucene::search::AutomatonQuery(env->newObject(initializeClass, &mids$, mid_init$_d948bda7346ba4b9, a0.this$, a1)) {}

        ::org::apache::lucene::index::Term WildcardQuery::getTerm() const
        {
          return ::org::apache::lucene::index::Term(env->callObjectMethod(this$, mids$[mid_getTerm_5e734526802c58d9]));
        }

        ::org::apache::lucene::util::automaton::Automaton WildcardQuery::toAutomaton(const ::org::apache::lucene::index::Term & a0)
        {
          jclass cls = env->getClass(initializeClass);
          return ::org::apache::lucene::util::automaton::Automaton(env->callStaticObjectMethod(cls, mids$[mid_toAutomaton_f5ec750578712f85], a0.this$));
        }

        ::java::lang::String WildcardQuery::toString(const ::java::lang::String & a0) const
        {
          return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_9bfa75c9f141b67f], a0.this$));
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        static PyObject *t_WildcardQuery_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_WildcardQuery_instance_(PyTypeObject *type, PyObject *arg);
        static int t_WildcardQuery_init_(t_WildcardQuery *self, PyObject *args, PyObject *kwds);
        static PyObject *t_WildcardQuery_getTerm(t_WildcardQuery *self);
        static PyObject *t_WildcardQuery_toAutomaton(PyTypeObject *type, PyObject *arg);
        static PyObject *t_WildcardQuery_toString(t_WildcardQuery *self, PyObject *args);
        static PyObject *t_WildcardQuery_get__term(t_WildcardQuery *self, void *data);
        static PyGetSetDef t_WildcardQuery__fields_[] = {
          DECLARE_GET_FIELD(t_WildcardQuery, term),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_WildcardQuery__methods_[] = {
          DECLARE_METHOD(t_WildcardQuery, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_WildcardQuery, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_WildcardQuery, getTerm, METH_NOARGS),
          DECLARE_METHOD(t_WildcardQuery, toAutomaton, METH_O | METH_CLASS),
          DECLARE_METHOD(t_WildcardQuery, toString, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        static PyType_Slot PY_TYPE_SLOTS(WildcardQuery)[] = {
          { Py_tp_methods, t_WildcardQuery__methods_ },
          { Py_tp_init, (void *) t_WildcardQuery_init_ },
          { Py_tp_getset, t_WildcardQuery__fields_ },
          { 0, NULL }
        };

        static PyType_Def *PY_TYPE_BASES(WildcardQuery)[] = {
          &PY_TYPE_DEF(::org::apache::lucene::search::AutomatonQuery),
          NULL
        };

        DEFINE_TYPE(WildcardQuery, t_WildcardQuery, WildcardQuery);

        void t_WildcardQuery::install(PyObject *module)
        {
          installType(&PY_TYPE(WildcardQuery), &PY_TYPE_DEF(WildcardQuery), module, "WildcardQuery", 0);
        }

        void t_WildcardQuery::initialize(PyObject *module)
        {
          PyObject_SetAttrString((PyObject *) PY_TYPE(WildcardQuery), "class_", make_descriptor(WildcardQuery::initializeClass, 1));
          PyObject_SetAttrString((PyObject *) PY_TYPE(WildcardQuery), "wrapfn_", make_descriptor(t_WildcardQuery::wrap_jobject));
          PyObject_SetAttrString((PyObject *) PY_TYPE(WildcardQuery), "boxfn_", make_descriptor(boxObject));
          env->getClass(WildcardQuery::initializeClass);
          PyObject_SetAttrString((PyObject *) PY_TYPE(WildcardQuery), "WILDCARD_CHAR", make_descriptor(WildcardQuery::WILDCARD_CHAR));
          PyObject_SetAttrString((PyObject *) PY_TYPE(WildcardQuery), "WILDCARD_ESCAPE", make_descriptor(WildcardQuery::WILDCARD_ESCAPE));
          PyObject_SetAttrString((PyObject *) PY_TYPE(WildcardQuery), "WILDCARD_STRING", make_descriptor(WildcardQuery::WILDCARD_STRING));
        }

        static PyObject *t_WildcardQuery_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, WildcardQuery::initializeClass, 1)))
            return NULL;
          return t_WildcardQuery::wrap_Object(WildcardQuery(((t_WildcardQuery *) arg)->object.this$));
        }
        static PyObject *t_WildcardQuery_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, WildcardQuery::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_WildcardQuery_init_(t_WildcardQuery *self, PyObject *args, PyObject *kwds)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 1:
            {
              ::org::apache::lucene::index::Term a0((jobject) NULL);
              WildcardQuery object((jobject) NULL);

              if (!parseArgs(args, "k", ::org::apache::lucene::index::Term::initializeClass, &a0))
              {
                INT_CALL(object = WildcardQuery(a0));
                self->object = object;
                break;
              }
            }
            goto err;
           case 2:
            {
              ::org::apache::lucene::index::Term a0((jobject) NULL);
              jint a1;
              WildcardQuery object((jobject) NULL);

              if (!parseArgs(args, "kI", ::org::apache::lucene::index::Term::initializeClass, &a0, &a1))
              {
                INT_CALL(object = WildcardQuery(a0, a1));
                self->object = object;
                break;
              }
            }
           default:
           err:
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }

        static PyObject *t_WildcardQuery_getTerm(t_WildcardQuery *self)
        {
          ::org::apache::lucene::index::Term result((jobject) NULL);
          OBJ_CALL(result = self->object.getTerm());
          return ::org::apache::lucene::index::t_Term::wrap_Object(result);
        }

        static PyObject *t_WildcardQuery_toAutomaton(PyTypeObject *type, PyObject *arg)
        {
          ::org::apache::lucene::index::Term a0((jobject) NULL);
          ::org::apache::lucene::util::automaton::Automaton result((jobject) NULL);

          if (!parseArg(arg, "k", ::org::apache::lucene::index::Term::initializeClass, &a0))
          {
            OBJ_CALL(result = ::org::apache::lucene::search::WildcardQuery::toAutomaton(a0));
            return ::org::apache::lucene::util::automaton::t_Automaton::wrap_Object(result);
          }

          PyErr_SetArgsError(type, "toAutomaton", arg);
          return NULL;
        }

        static PyObject *t_WildcardQuery_toString(t_WildcardQuery *self, PyObject *args)
        {
          ::java::lang::String a0((jobject) NULL);
          ::java::lang::String result((jobject) NULL);

          if (!parseArgs(args, "s", &a0))
          {
            OBJ_CALL(result = self->object.toString(a0));
            return j2p(result);
          }

          return callSuper(PY_TYPE(WildcardQuery), (PyObject *) self, "toString", args, 2);
        }

        static PyObject *t_WildcardQuery_get__term(t_WildcardQuery *self, void *data)
        {
          ::org::apache::lucene::index::Term value((jobject) NULL);
          OBJ_CALL(value = self->object.getTerm());
          return ::org::apache::lucene::index::t_Term::wrap_Object(value);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/facet/taxonomy/writercache/LruTaxonomyWriterCache.h"
#include "org/apache/lucene/facet/taxonomy/writercache/LruTaxonomyWriterCache$LRUType.h"
#include "org/apache/lucene/facet/taxonomy/writercache/TaxonomyWriterCache.h"
#include "org/apache/lucene/facet/taxonomy/FacetLabel.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace facet {
        namespace taxonomy {
          namespace writercache {

            ::java::lang::Class *LruTaxonomyWriterCache::class$ = NULL;
            jmethodID *LruTaxonomyWriterCache::mids$ = NULL;
            bool LruTaxonomyWriterCache::live$ = false;

            jclass LruTaxonomyWriterCache::initializeClass(bool getOnly)
            {
              if (getOnly)
                return (jclass) (live$ ? class$->this$ : NULL);
              if (class$ == NULL)
              {
                jclass cls = (jclass) env->findClass("org/apache/lucene/facet/taxonomy/writercache/LruTaxonomyWriterCache");

                mids$ = new jmethodID[max_mid];
                mids$[mid_init$_040c4cd0390c5aff] = env->getMethodID(cls, "<init>", "(I)V");
                mids$[mid_init$_8cba9aa7fe541ac2] = env->getMethodID(cls, "<init>", "(ILorg/apache/lucene/facet/taxonomy/writercache/LruTaxonomyWriterCache$LRUType;)V");
                mids$[mid_clear_f2cc1bce94666404] = env->getMethodID(cls, "clear", "()V");
                mids$[mid_close_f2cc1bce94666404] = env->getMethodID(cls, "close", "()V");
                mids$[mid_get_1e6795f28098d13d] = env->getMethodID(cls, "get", "(Lorg/apache/lucene/facet/taxonomy/FacetLabel;)I");
                mids$[mid_isFull_8454bd5aa23fd11e] = env->getMethodID(cls, "isFull", "()Z");
                mids$[mid_put_94a843fa7d322607] = env->getMethodID(cls, "put", "(Lorg/apache/lucene/facet/taxonomy/FacetLabel;I)Z");
                mids$[mid_size_9972fcc56b44e79d] = env->getMethodID(cls, "size", "()I");

                class$ = new ::java::lang::Class(cls);
                live$ = true;
              }
              return (jclass) class$->this$;
            }

            LruTaxonomyWriterCache::LruTaxonomyWriterCache(jint a0) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_040c4cd0390c5aff, a0)) {}

            LruTaxonomyWriterCache::LruTaxonomyWriterCache(jint a0, const ::org::apache::lucene::facet::taxonomy::writercache::LruTaxonomyWriterCache$LRUType & a1) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_8cba9aa7fe541ac2, a0, a1.this$)) {}

            void LruTaxonomyWriterCache::clear() const
            {
              env->callVoidMethod(this$, mids$[mid_clear_f2cc1bce94666404]);
            }

            void LruTaxonomyWriterCache::close() const
            {
              env->callVoidMethod(this$, mids$[mid_close_f2cc1bce94666404]);
            }

            jint LruTaxonomyWriterCache::get(const ::org::apache::lucene::facet::taxonomy::FacetLabel & a0) const
            {
              return env->callIntMethod(this$, mids$[mid_get_1e6795f28098d13d], a0.this$);
            }

            jboolean LruTaxonomyWriterCache::isFull() const
            {
              return env->callBooleanMethod(this$, mids$[mid_isFull_8454bd5aa23fd11e]);
            }

            jboolean LruTaxonomyWriterCache::put(const ::org::apache::lucene::facet::taxonomy::FacetLabel & a0, jint a1) const
            {
              return env->callBooleanMethod(this$, mids$[mid_put_94a843fa7d322607], a0.this$, a1);
            }

            jint LruTaxonomyWriterCache::size() const
            {
              return env->callIntMethod(this$, mids$[mid_size_9972fcc56b44e79d]);
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace facet {
        namespace taxonomy {
          namespace writercache {
            static PyObject *t_LruTaxonomyWriterCache_cast_(PyTypeObject *type, PyObject *arg);
            static PyObject *t_LruTaxonomyWriterCache_instance_(PyTypeObject *type, PyObject *arg);
            static int t_LruTaxonomyWriterCache_init_(t_LruTaxonomyWriterCache *self, PyObject *args, PyObject *kwds);
            static PyObject *t_LruTaxonomyWriterCache_clear(t_LruTaxonomyWriterCache *self);
            static PyObject *t_LruTaxonomyWriterCache_close(t_LruTaxonomyWriterCache *self);
            static PyObject *t_LruTaxonomyWriterCache_get(t_LruTaxonomyWriterCache *self, PyObject *arg);
            static PyObject *t_LruTaxonomyWriterCache_isFull(t_LruTaxonomyWriterCache *self);
            static PyObject *t_LruTaxonomyWriterCache_put(t_LruTaxonomyWriterCache *self, PyObject *args);
            static PyObject *t_LruTaxonomyWriterCache_size(t_LruTaxonomyWriterCache *self);
            static PyObject *t_LruTaxonomyWriterCache_get__full(t_LruTaxonomyWriterCache *self, void *data);
            static PyGetSetDef t_LruTaxonomyWriterCache__fields_[] = {
              DECLARE_GET_FIELD(t_LruTaxonomyWriterCache, full),
              { NULL, NULL, NULL, NULL, NULL }
            };

            static PyMethodDef t_LruTaxonomyWriterCache__methods_[] = {
              DECLARE_METHOD(t_LruTaxonomyWriterCache, cast_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_LruTaxonomyWriterCache, instance_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_LruTaxonomyWriterCache, clear, METH_NOARGS),
              DECLARE_METHOD(t_LruTaxonomyWriterCache, close, METH_NOARGS),
              DECLARE_METHOD(t_LruTaxonomyWriterCache, get, METH_O),
              DECLARE_METHOD(t_LruTaxonomyWriterCache, isFull, METH_NOARGS),
              DECLARE_METHOD(t_LruTaxonomyWriterCache, put, METH_VARARGS),
              DECLARE_METHOD(t_LruTaxonomyWriterCache, size, METH_NOARGS),
              { NULL, NULL, 0, NULL }
            };

            static PyType_Slot PY_TYPE_SLOTS(LruTaxonomyWriterCache)[] = {
              { Py_tp_methods, t_LruTaxonomyWriterCache__methods_ },
              { Py_tp_init, (void *) t_LruTaxonomyWriterCache_init_ },
              { Py_tp_getset, t_LruTaxonomyWriterCache__fields_ },
              { 0, NULL }
            };

            static PyType_Def *PY_TYPE_BASES(LruTaxonomyWriterCache)[] = {
              &PY_TYPE_DEF(::java::lang::Object),
              NULL
            };

            DEFINE_TYPE(LruTaxonomyWriterCache, t_LruTaxonomyWriterCache, LruTaxonomyWriterCache);

            void t_LruTaxonomyWriterCache::install(PyObject *module)
            {
              installType(&PY_TYPE(LruTaxonomyWriterCache), &PY_TYPE_DEF(LruTaxonomyWriterCache), module, "LruTaxonomyWriterCache", 0);
              PyObject_SetAttrString((PyObject *) PY_TYPE(LruTaxonomyWriterCache), "LRUType", make_descriptor(&PY_TYPE_DEF(LruTaxonomyWriterCache$LRUType)));
            }

            void t_LruTaxonomyWriterCache::initialize(PyObject *module)
            {
              PyObject_SetAttrString((PyObject *) PY_TYPE(LruTaxonomyWriterCache), "class_", make_descriptor(LruTaxonomyWriterCache::initializeClass, 1));
              PyObject_SetAttrString((PyObject *) PY_TYPE(LruTaxonomyWriterCache), "wrapfn_", make_descriptor(t_LruTaxonomyWriterCache::wrap_jobject));
              PyObject_SetAttrString((PyObject *) PY_TYPE(LruTaxonomyWriterCache), "boxfn_", make_descriptor(boxObject));
            }

            static PyObject *t_LruTaxonomyWriterCache_cast_(PyTypeObject *type, PyObject *arg)
            {
              if (!(arg = castCheck(arg, LruTaxonomyWriterCache::initializeClass, 1)))
                return NULL;
              return t_LruTaxonomyWriterCache::wrap_Object(LruTaxonomyWriterCache(((t_LruTaxonomyWriterCache *) arg)->object.this$));
            }
            static PyObject *t_LruTaxonomyWriterCache_instance_(PyTypeObject *type, PyObject *arg)
            {
              if (!castCheck(arg, LruTaxonomyWriterCache::initializeClass, 0))
                Py_RETURN_FALSE;
              Py_RETURN_TRUE;
            }

            static int t_LruTaxonomyWriterCache_init_(t_LruTaxonomyWriterCache *self, PyObject *args, PyObject *kwds)
            {
              switch (PyTuple_GET_SIZE(args)) {
               case 1:
                {
                  jint a0;
                  LruTaxonomyWriterCache object((jobject) NULL);

                  if (!parseArgs(args, "I", &a0))
                  {
                    INT_CALL(object = LruTaxonomyWriterCache(a0));
                    self->object = object;
                    break;
                  }
                }
                goto err;
               case 2:
                {
                  jint a0;
                  ::org::apache::lucene::facet::taxonomy::writercache::LruTaxonomyWriterCache$LRUType a1((jobject) NULL);
                  PyTypeObject **p1;
                  LruTaxonomyWriterCache object((jobject) NULL);

                  if (!parseArgs(args, "IK", ::org::apache::lucene::facet::taxonomy::writercache::LruTaxonomyWriterCache$LRUType::initializeClass, &a0, &a1, &p1, ::org::apache::lucene::facet::taxonomy::writercache::t_LruTaxonomyWriterCache$LRUType::parameters_))
                  {
                    INT_CALL(object = LruTaxonomyWriterCache(a0, a1));
                    self->object = object;
                    break;
                  }
                }
               default:
               err:
                PyErr_SetArgsError((PyObject *) self, "__init__", args);
                return -1;
              }

              return 0;
            }

            static PyObject *t_LruTaxonomyWriterCache_clear(t_LruTaxonomyWriterCache *self)
            {
              OBJ_CALL(self->object.clear());
              Py_RETURN_NONE;
            }

            static PyObject *t_LruTaxonomyWriterCache_close(t_LruTaxonomyWriterCache *self)
            {
              OBJ_CALL(self->object.close());
              Py_RETURN_NONE;
            }

            static PyObject *t_LruTaxonomyWriterCache_get(t_LruTaxonomyWriterCache *self, PyObject *arg)
            {
              ::org::apache::lucene::facet::taxonomy::FacetLabel a0((jobject) NULL);
              jint result;

              if (!parseArg(arg, "k", ::org::apache::lucene::facet::taxonomy::FacetLabel::initializeClass, &a0))
              {
                OBJ_CALL(result = self->object.get(a0));
                return PyLong_FromLong((long) result);
              }

              PyErr_SetArgsError((PyObject *) self, "get", arg);
              return NULL;
            }

            static PyObject *t_LruTaxonomyWriterCache_isFull(t_LruTaxonomyWriterCache *self)
            {
              jboolean result;
              OBJ_CALL(result = self->object.isFull());
              Py_RETURN_BOOL(result);
            }

            static PyObject *t_LruTaxonomyWriterCache_put(t_LruTaxonomyWriterCache *self, PyObject *args)
            {
              ::org::apache::lucene::facet::taxonomy::FacetLabel a0((jobject) NULL);
              jint a1;
              jboolean result;

              if (!parseArgs(args, "kI", ::org::apache::lucene::facet::taxonomy::FacetLabel::initializeClass, &a0, &a1))
              {
                OBJ_CALL(result = self->object.put(a0, a1));
                Py_RETURN_BOOL(result);
              }

              PyErr_SetArgsError((PyObject *) self, "put", args);
              return NULL;
            }

            static PyObject *t_LruTaxonomyWriterCache_size(t_LruTaxonomyWriterCache *self)
            {
              jint result;
              OBJ_CALL(result = self->object.size());
              return PyLong_FromLong((long) result);
            }

            static PyObject *t_LruTaxonomyWriterCache_get__full(t_LruTaxonomyWriterCache *self, void *data)
            {
              jboolean value;
              OBJ_CALL(value = self->object.isFull());
              Py_RETURN_BOOL(value);
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/index/CheckIndex$Status$DocValuesStatus.h"
#include "java/lang/Throwable.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {

        ::java::lang::Class *CheckIndex$Status$DocValuesStatus::class$ = NULL;
        jmethodID *CheckIndex$Status$DocValuesStatus::mids$ = NULL;
        jfieldID *CheckIndex$Status$DocValuesStatus::fids$ = NULL;
        bool CheckIndex$Status$DocValuesStatus::live$ = false;

        jclass CheckIndex$Status$DocValuesStatus::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/index/CheckIndex$Status$DocValuesStatus");

            fids$ = new jfieldID[max_fid];
            fids$[fid_error] = env->getFieldID(cls, "error", "Ljava/lang/Throwable;");
            fids$[fid_totalBinaryFields] = env->getFieldID(cls, "totalBinaryFields", "J");
            fids$[fid_totalNumericFields] = env->getFieldID(cls, "totalNumericFields", "J");
            fids$[fid_totalSortedFields] = env->getFieldID(cls, "totalSortedFields", "J");
            fids$[fid_totalSortedNumericFields] = env->getFieldID(cls, "totalSortedNumericFields", "J");
            fids$[fid_totalSortedSetFields] = env->getFieldID(cls, "totalSortedSetFields", "J");
            fids$[fid_totalValueFields] = env->getFieldID(cls, "totalValueFields", "J");

            class$ = new ::java::lang::Class(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        ::java::lang::Throwable CheckIndex$Status$DocValuesStatus::_get_error() const
        {
          return ::java::lang::Throwable(env->getObjectField(this$, fids$[fid_error]));
        }

        void CheckIndex$Status$DocValuesStatus::_set_error(const ::java::lang::Throwable & a0) const
        {
          env->setObjectField(this$, fids$[fid_error], a0.this$);
        }

        jlong CheckIndex$Status$DocValuesStatus::_get_totalBinaryFields() const
        {
          return env->getLongField(this$, fids$[fid_totalBinaryFields]);
        }

        void CheckIndex$Status$DocValuesStatus::_set_totalBinaryFields(jlong a0) const
        {
          env->setLongField(this$, fids$[fid_totalBinaryFields], a0);
        }

        jlong CheckIndex$Status$DocValuesStatus::_get_totalNumericFields() const
        {
          return env->getLongField(this$, fids$[fid_totalNumericFields]);
        }

        void CheckIndex$Status$DocValuesStatus::_set_totalNumericFields(jlong a0) const
        {
          env->setLongField(this$, fids$[fid_totalNumericFields], a0);
        }

        jlong CheckIndex$Status$DocValuesStatus::_get_totalSortedFields() const
        {
          return env->getLongField(this$, fids$[fid_totalSortedFields]);
        }

        void CheckIndex$Status$DocValuesStatus::_set_totalSortedFields(jlong a0) const
        {
          env->setLongField(this$, fids$[fid_totalSortedFields], a0);
        }

        jlong CheckIndex$Status$DocValuesStatus::_get_totalSortedNumericFields() const
        {
          return env->getLongField(this$, fids$[fid_totalSortedNumericFields]);
        }

        void CheckIndex$Status$DocValuesStatus::_set_totalSortedNumericFields(jlong a0) const
        {
          env->setLongField(this$, fids$[fid_totalSortedNumericFields], a0);
        }

        jlong CheckIndex$Status$DocValuesStatus::_get_totalSortedSetFields() const
        {
          return env->getLongField(this$, fids$[fid_totalSortedSetFields]);
        }

        void CheckIndex$Status$DocValuesStatus::_set_totalSortedSetFields(jlong a0) const
        {
          env->setLongField(this$, fids$[fid_totalSortedSetFields], a0);
        }

        jlong CheckIndex$Status$DocValuesStatus::_get_totalValueFields() const
        {
          return env->getLongField(this$, fids$[fid_totalValueFields]);
        }

        void CheckIndex$Status$DocValuesStatus::_set_totalValueFields(jlong a0) const
        {
          env->setLongField(this$, fids$[fid_totalValueFields], a0);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {
        static PyObject *t_CheckIndex$Status$DocValuesStatus_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_CheckIndex$Status$DocValuesStatus_instance_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_CheckIndex$Status$DocValuesStatus_get__error(t_CheckIndex$Status$DocValuesStatus *self, void *data);
        static int t_CheckIndex$Status$DocValuesStatus_set__error(t_CheckIndex$Status$DocValuesStatus *self, PyObject *arg, void *data);
        static PyObject *t_CheckIndex$Status$DocValuesStatus_get__totalBinaryFields(t_CheckIndex$Status$DocValuesStatus *self, void *data);
        static int t_CheckIndex$Status$DocValuesStatus_set__totalBinaryFields(t_CheckIndex$Status$DocValuesStatus *self, PyObject *arg, void *data);
        static PyObject *t_CheckIndex$Status$DocValuesStatus_get__totalNumericFields(t_CheckIndex$Status$DocValuesStatus *self, void *data);
        static int t_CheckIndex$Status$DocValuesStatus_set__totalNumericFields(t_CheckIndex$Status$DocValuesStatus *self, PyObject *arg, void *data);
        static PyObject *t_CheckIndex$Status$DocValuesStatus_get__totalSortedFields(t_CheckIndex$Status$DocValuesStatus *self, void *data);
        static int t_CheckIndex$Status$DocValuesStatus_set__totalSortedFields(t_CheckIndex$Status$DocValuesStatus *self, PyObject *arg, void *data);
        static PyObject *t_CheckIndex$Status$DocValuesStatus_get__totalSortedNumericFields(t_CheckIndex$Status$DocValuesStatus *self, void *data);
        static int t_CheckIndex$Status$DocValuesStatus_set__totalSortedNumericFields(t_CheckIndex$Status$DocValuesStatus *self, PyObject *arg, void *data);
        static PyObject *t_CheckIndex$Status$DocValuesStatus_get__totalSortedSetFields(t_CheckIndex$Status$DocValuesStatus *self, void *data);
        static int t_CheckIndex$Status$DocValuesStatus_set__totalSortedSetFields(t_CheckIndex$Status$DocValuesStatus *self, PyObject *arg, void *data);
        static PyObject *t_CheckIndex$Status$DocValuesStatus_get__totalValueFields(t_CheckIndex$Status$DocValuesStatus *self, void *data);
        static int t_CheckIndex$Status$DocValuesStatus_set__totalValueFields(t_CheckIndex$Status$DocValuesStatus *self, PyObject *arg, void *data);

        static PyGetSetDef t_CheckIndex$Status$DocValuesStatus__fields_[] = {
          DECLARE_GETSET_FIELD(t_CheckIndex$Status$DocValuesStatus, error),
          DECLARE_GETSET_FIELD(t_CheckIndex$Status$DocValuesStatus, totalBinaryFields),
          DECLARE_GETSET_FIELD(t_CheckIndex$Status$DocValuesStatus, totalNumericFields),
          DECLARE_GETSET_FIELD(t_CheckIndex$Status$DocValuesStatus, totalSortedFields),
          DECLARE_GETSET_FIELD(t_CheckIndex$Status$DocValuesStatus, totalSortedNumericFields),
          DECLARE_GETSET_FIELD(t_CheckIndex$Status$DocValuesStatus, totalSortedSetFields),
          DECLARE_GETSET_FIELD(t_CheckIndex$Status$DocValuesStatus, totalValueFields),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_CheckIndex$Status$DocValuesStatus__methods_[] = {
          DECLARE_METHOD(t_CheckIndex$Status$DocValuesStatus, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_CheckIndex$Status$DocValuesStatus, instance_, METH_O | METH_CLASS),
          { NULL, NULL, 0, NULL }
        };

        static PyType_Slot PY_TYPE_SLOTS(CheckIndex$Status$DocValuesStatus)[] = {
          { Py_tp_methods, t_CheckIndex$Status$DocValuesStatus__methods_ },
          { Py_tp_init, (void *) abstract_init },
          { Py_tp_getset, t_CheckIndex$Status$DocValuesStatus__fields_ },
          { 0, NULL }
        };

        static PyType_Def *PY_TYPE_BASES(CheckIndex$Status$DocValuesStatus)[] = {
          &PY_TYPE_DEF(::java::lang::Object),
          NULL
        };

        DEFINE_TYPE(CheckIndex$Status$DocValuesStatus, t_CheckIndex$Status$DocValuesStatus, CheckIndex$Status$DocValuesStatus);

        void t_CheckIndex$Status$DocValuesStatus::install(PyObject *module)
        {
          installType(&PY_TYPE(CheckIndex$Status$DocValuesStatus), &PY_TYPE_DEF(CheckIndex$Status$DocValuesStatus), module, "CheckIndex$Status$DocValuesStatus", 0);
        }

        void t_CheckIndex$Status$DocValuesStatus::initialize(PyObject *module)
        {
          PyObject_SetAttrString((PyObject *) PY_TYPE(CheckIndex$Status$DocValuesStatus), "class_", make_descriptor(CheckIndex$Status$DocValuesStatus::initializeClass, 1));
          PyObject_SetAttrString((PyObject *) PY_TYPE(CheckIndex$Status$DocValuesStatus), "wrapfn_", make_descriptor(t_CheckIndex$Status$DocValuesStatus::wrap_jobject));
          PyObject_SetAttrString((PyObject *) PY_TYPE(CheckIndex$Status$DocValuesStatus), "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_CheckIndex$Status$DocValuesStatus_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, CheckIndex$Status$DocValuesStatus::initializeClass, 1)))
            return NULL;
          return t_CheckIndex$Status$DocValuesStatus::wrap_Object(CheckIndex$Status$DocValuesStatus(((t_CheckIndex$Status$DocValuesStatus *) arg)->object.this$));
        }
        static PyObject *t_CheckIndex$Status$DocValuesStatus_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, CheckIndex$Status$DocValuesStatus::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static PyObject *t_CheckIndex$Status$DocValuesStatus_get__error(t_CheckIndex$Status$DocValuesStatus *self, void *data)
        {
          ::java::lang::Throwable value((jobject) NULL);
          OBJ_CALL(value = self->object._get_error());
          return ::java::lang::t_Throwable::wrap_Object(value);
        }
        static int t_CheckIndex$Status$DocValuesStatus_set__error(t_CheckIndex$Status$DocValuesStatus *self, PyObject *arg, void *data)
        {
          ::java::lang::Throwable value((jobject) NULL);
          if (!parseArg(arg, "k", ::java::lang::Throwable::initializeClass, &value))
          {
            INT_CALL(self->object._set_error(value));
            return 0;
          }
          PyErr_SetArgsError((PyObject *) self, "error", arg);
          return -1;
        }

        static PyObject *t_CheckIndex$Status$DocValuesStatus_get__totalBinaryFields(t_CheckIndex$Status$DocValuesStatus *self, void *data)
        {
          jlong value;
          OBJ_CALL(value = self->object._get_totalBinaryFields());
          return PyLong_FromLongLong((PY_LONG_LONG) value);
        }
        static int t_CheckIndex$Status$DocValuesStatus_set__totalBinaryFields(t_CheckIndex$Status$DocValuesStatus *self, PyObject *arg, void *data)
        {
          jlong value;
          if (!parseArg(arg, "J", &value))
          {
            INT_CALL(self->object._set_totalBinaryFields(value));
            return 0;
          }
          PyErr_SetArgsError((PyObject *) self, "totalBinaryFields", arg);
          return -1;
        }

        static PyObject *t_CheckIndex$Status$DocValuesStatus_get__totalNumericFields(t_CheckIndex$Status$DocValuesStatus *self, void *data)
        {
          jlong value;
          OBJ_CALL(value = self->object._get_totalNumericFields());
          return PyLong_FromLongLong((PY_LONG_LONG) value);
        }
        static int t_CheckIndex$Status$DocValuesStatus_set__totalNumericFields(t_CheckIndex$Status$DocValuesStatus *self, PyObject *arg, void *data)
        {
          jlong value;
          if (!parseArg(arg, "J", &value))
          {
            INT_CALL(self->object._set_totalNumericFields(value));
            return 0;
          }
          PyErr_SetArgsError((PyObject *) self, "totalNumericFields", arg);
          return -1;
        }

        static PyObject *t_CheckIndex$Status$DocValuesStatus_get__totalSortedFields(t_CheckIndex$Status$DocValuesStatus *self, void *data)
        {
          jlong value;
          OBJ_CALL(value = self->object._get_totalSortedFields());
          return PyLong_FromLongLong((PY_LONG_LONG) value);
        }
        static int t_CheckIndex$Status$DocValuesStatus_set__totalSortedFields(t_CheckIndex$Status$DocValuesStatus *self, PyObject *arg, void *data)
        {
          jlong value;
          if (!parseArg(arg, "J", &value))
          {
            INT_CALL(self->object._set_totalSortedFields(value));
            return 0;
          }
          PyErr_SetArgsError((PyObject *) self, "totalSortedFields", arg);
          return -1;
        }

        static PyObject *t_CheckIndex$Status$DocValuesStatus_get__totalSortedNumericFields(t_CheckIndex$Status$DocValuesStatus *self, void *data)
        {
          jlong value;
          OBJ_CALL(value = self->object._get_totalSortedNumericFields());
          return PyLong_FromLongLong((PY_LONG_LONG) value);
        }
        static int t_CheckIndex$Status$DocValuesStatus_set__totalSortedNumericFields(t_CheckIndex$Status$DocValuesStatus *self, PyObject *arg, void *data)
        {
          jlong value;
          if (!parseArg(arg, "J", &value))
          {
            INT_CALL(self->object._set_totalSortedNumericFields(value));
            return 0;
          }
          PyErr_SetArgsError((PyObject *) self, "totalSortedNumericFields", arg);
          return -1;
        }

        static PyObject *t_CheckIndex$Status$DocValuesStatus_get__totalSortedSetFields(t_CheckIndex$Status$DocValuesStatus *self, void *data)
        {
          jlong value;
          OBJ_CALL(value = self->object._get_totalSortedSetFields());
          return PyLong_FromLongLong((PY_LONG_LONG) value);
        }
        static int t_CheckIndex$Status$DocValuesStatus_set__totalSortedSetFields(t_CheckIndex$Status$DocValuesStatus *self, PyObject *arg, void *data)
        {
          jlong value;
          if (!parseArg(arg, "J", &value))
          {
            INT_CALL(self->object._set_totalSortedSetFields(value));
            return 0;
          }
          PyErr_SetArgsError((PyObject *) self, "totalSortedSetFields", arg);
          return -1;
        }

        static PyObject *t_CheckIndex$Status$DocValuesStatus_get__totalValueFields(t_CheckIndex$Status$DocValuesStatus *self, void *data)
        {
          jlong value;
          OBJ_CALL(value = self->object._get_totalValueFields());
          return PyLong_FromLongLong((PY_LONG_LONG) value);
        }
        static int t_CheckIndex$Status$DocValuesStatus_set__totalValueFields(t_CheckIndex$Status$DocValuesStatus *self, PyObject *arg, void *data)
        {
          jlong value;
          if (!parseArg(arg, "J", &value))
          {
            INT_CALL(self->object._set_totalValueFields(value));
            return 0;
          }
          PyErr_SetArgsError((PyObject *) self, "totalValueFields", arg);
          return -1;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/index/ParallelCompositeReader.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/index/LeafReader.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/index/IndexReader$CacheHelper.h"
#include "org/apache/lucene/index/CompositeReader.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {

        ::java::lang::Class *ParallelCompositeReader::class$ = NULL;
        jmethodID *ParallelCompositeReader::mids$ = NULL;
        bool ParallelCompositeReader::live$ = false;

        jclass ParallelCompositeReader::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/index/ParallelCompositeReader");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_1b3bfe3fbd844e34] = env->getMethodID(cls, "<init>", "([Lorg/apache/lucene/index/CompositeReader;)V");
            mids$[mid_init$_43d4317ce0fca9b0] = env->getMethodID(cls, "<init>", "(Z[Lorg/apache/lucene/index/CompositeReader;)V");
            mids$[mid_init$_2645e843ec7713c1] = env->getMethodID(cls, "<init>", "(Z[Lorg/apache/lucene/index/CompositeReader;[Lorg/apache/lucene/index/CompositeReader;)V");
            mids$[mid_getReaderCacheHelper_a64c414fea9a8cf6] = env->getMethodID(cls, "getReaderCacheHelper", "()Lorg/apache/lucene/index/IndexReader$CacheHelper;");
            mids$[mid_doClose_f2cc1bce94666404] = env->getMethodID(cls, "doClose", "()V");

            class$ = new ::java::lang::Class(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        ParallelCompositeReader::ParallelCompositeReader(const JArray< ::org::apache::lucene::index::CompositeReader > & a0) : ::org::apache::lucene::index::BaseCompositeReader(env->newObject(initializeClass, &mids$, mid_init$_1b3bfe3fbd844e34, a0.this$)) {}

        ParallelCompositeReader::ParallelCompositeReader(jboolean a0, const JArray< ::org::apache::lucene::index::CompositeReader > & a1) : ::org::apache::lucene::index::BaseCompositeReader(env->newObject(initializeClass, &mids$, mid_init$_43d4317ce0fca9b0, a0, a1.this$)) {}

        ParallelCompositeReader::ParallelCompositeReader(jboolean a0, const JArray< ::org::apache::lucene::index::CompositeReader > & a1, const JArray< ::org::apache::lucene::index::CompositeReader > & a2) : ::org::apache::lucene::index::BaseCompositeReader(env->newObject(initializeClass, &mids$, mid_init$_2645e843ec7713c1, a0, a1.this$, a2.this$)) {}

        ::org::apache::lucene::index::IndexReader$CacheHelper ParallelCompositeReader::getReaderCacheHelper() const
        {
          return ::org::apache::lucene::index::IndexReader$CacheHelper(env->callObjectMethod(this$, mids$[mid_getReaderCacheHelper_a64c414fea9a8cf6]));
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {
        static PyObject *t_ParallelCompositeReader_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_ParallelCompositeReader_instance_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_ParallelCompositeReader_of_(t_ParallelCompositeReader *self, PyObject *args);
        static int t_ParallelCompositeReader_init_(t_ParallelCompositeReader *self, PyObject *args, PyObject *kwds);
        static PyObject *t_ParallelCompositeReader_getReaderCacheHelper(t_ParallelCompositeReader *self, PyObject *args);
        static PyObject *t_ParallelCompositeReader_get__readerCacheHelper(t_ParallelCompositeReader *self, void *data);
        static PyObject *t_ParallelCompositeReader_get__parameters_(t_ParallelCompositeReader *self, void *data);
        static PyGetSetDef t_ParallelCompositeReader__fields_[] = {
          DECLARE_GET_FIELD(t_ParallelCompositeReader, readerCacheHelper),
          DECLARE_GET_FIELD(t_ParallelCompositeReader, parameters_),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_ParallelCompositeReader__methods_[] = {
          DECLARE_METHOD(t_ParallelCompositeReader, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_ParallelCompositeReader, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_ParallelCompositeReader, of_, METH_VARARGS),
          DECLARE_METHOD(t_ParallelCompositeReader, getReaderCacheHelper, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        static PyType_Slot PY_TYPE_SLOTS(ParallelCompositeReader)[] = {
          { Py_tp_methods, t_ParallelCompositeReader__methods_ },
          { Py_tp_init, (void *) t_ParallelCompositeReader_init_ },
          { Py_tp_getset, t_ParallelCompositeReader__fields_ },
          { 0, NULL }
        };

        static PyType_Def *PY_TYPE_BASES(ParallelCompositeReader)[] = {
          &PY_TYPE_DEF(::org::apache::lucene::index::BaseCompositeReader),
          NULL
        };

        DEFINE_TYPE(ParallelCompositeReader, t_ParallelCompositeReader, ParallelCompositeReader);
        PyObject *t_ParallelCompositeReader::wrap_Object(const ParallelCompositeReader& object, PyTypeObject *p0)
        {
          PyObject *obj = t_ParallelCompositeReader::wrap_Object(object);
          if (obj != NULL && obj != Py_None)
          {
            t_ParallelCompositeReader *self = (t_ParallelCompositeReader *) obj;
            self->parameters[0] = p0;
          }
          return obj;
        }

        PyObject *t_ParallelCompositeReader::wrap_jobject(const jobject& object, PyTypeObject *p0)
        {
          PyObject *obj = t_ParallelCompositeReader::wrap_jobject(object);
          if (obj != NULL && obj != Py_None)
          {
            t_ParallelCompositeReader *self = (t_ParallelCompositeReader *) obj;
            self->parameters[0] = p0;
          }
          return obj;
        }

        void t_ParallelCompositeReader::install(PyObject *module)
        {
          installType(&PY_TYPE(ParallelCompositeReader), &PY_TYPE_DEF(ParallelCompositeReader), module, "ParallelCompositeReader", 0);
        }

        void t_ParallelCompositeReader::initialize(PyObject *module)
        {
          PyObject_SetAttrString((PyObject *) PY_TYPE(ParallelCompositeReader), "class_", make_descriptor(ParallelCompositeReader::initializeClass, 1));
          PyObject_SetAttrString((PyObject *) PY_TYPE(ParallelCompositeReader), "wrapfn_", make_descriptor(t_ParallelCompositeReader::wrap_jobject));
          PyObject_SetAttrString((PyObject *) PY_TYPE(ParallelCompositeReader), "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_ParallelCompositeReader_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, ParallelCompositeReader::initializeClass, 1)))
            return NULL;
          return t_ParallelCompositeReader::wrap_Object(ParallelCompositeReader(((t_ParallelCompositeReader *) arg)->object.this$));
        }
        static PyObject *t_ParallelCompositeReader_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, ParallelCompositeReader::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static PyObject *t_ParallelCompositeReader_of_(t_ParallelCompositeReader *self, PyObject *args)
        {
          if (!parseArg(args, "T", 1, &(self->parameters)))
            Py_RETURN_SELF;
          return PyErr_SetArgsError((PyObject *) self, "of_", args);
        }

        static int t_ParallelCompositeReader_init_(t_ParallelCompositeReader *self, PyObject *args, PyObject *kwds)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 1:
            {
              JArray< ::org::apache::lucene::index::CompositeReader > a0((jobject) NULL);
              ParallelCompositeReader object((jobject) NULL);

              if (!parseArgs(args, "[k", ::org::apache::lucene::index::CompositeReader::initializeClass, &a0))
              {
                INT_CALL(object = ParallelCompositeReader(a0));
                self->object = object;
                self->parameters[0] = ::org::apache::lucene::index::PY_TYPE(LeafReader);
                break;
              }
            }
            goto err;
           case 2:
            {
              jboolean a0;
              JArray< ::org::apache::lucene::index::CompositeReader > a1((jobject) NULL);
              ParallelCompositeReader object((jobject) NULL);

              if (!parseArgs(args, "Z[k", ::org::apache::lucene::index::CompositeReader::initializeClass, &a0, &a1))
              {
                INT_CALL(object = ParallelCompositeReader(a0, a1));
                self->object = object;
                self->parameters[0] = ::org::apache::lucene::index::PY_TYPE(LeafReader);
                break;
              }
            }
            goto err;
           case 3:
            {
              jboolean a0;
              JArray< ::org::apache::lucene::index::CompositeReader > a1((jobject) NULL);
              JArray< ::org::apache::lucene::index::CompositeReader > a2((jobject) NULL);
              ParallelCompositeReader object((jobject) NULL);

              if (!parseArgs(args, "Z[k[k", ::org::apache::lucene::index::CompositeReader::initializeClass, ::org::apache::lucene::index::CompositeReader::initializeClass, &a0, &a1, &a2))
              {
                INT_CALL(object = ParallelCompositeReader(a0, a1, a2));
                self->object = object;
                self->parameters[0] = ::org::apache::lucene::index::PY_TYPE(LeafReader);
                break;
              }
            }
           default:
           err:
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }

        static PyObject *t_ParallelCompositeReader_getReaderCacheHelper(t_ParallelCompositeReader *self, PyObject *args)
        {
          ::org::apache::lucene::index::IndexReader$CacheHelper result((jobject) NULL);

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.getReaderCacheHelper());
            return ::org::apache::lucene::index::t_IndexReader$CacheHelper::wrap_Object(result);
          }

          return callSuper(PY_TYPE(ParallelCompositeReader), (PyObject *) self, "getReaderCacheHelper", args, 2);
        }
        static PyObject *t_ParallelCompositeReader_get__parameters_(t_ParallelCompositeReader *self, void *data)
        {
          return typeParameters(self->parameters, sizeof(self->parameters));
        }

        static PyObject *t_ParallelCompositeReader_get__readerCacheHelper(t_ParallelCompositeReader *self, void *data)
        {
          ::org::apache::lucene::index::IndexReader$CacheHelper value((jobject) NULL);
          OBJ_CALL(value = self->object.getReaderCacheHelper());
          return ::org::apache::lucene::index::t_IndexReader$CacheHelper::wrap_Object(value);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/spans/SpanContainQuery$SpanContainWeight.h"
#include "org/apache/lucene/search/spans/SpanContainQuery.h"
#include "java/util/Map.h"
#include "org/apache/lucene/index/Term.h"
#include "org/apache/lucene/search/IndexSearcher.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/index/TermStates.h"
#include "java/util/Set.h"
#include "java/io/IOException.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace spans {

          ::java::lang::Class *SpanContainQuery$SpanContainWeight::class$ = NULL;
          jmethodID *SpanContainQuery$SpanContainWeight::mids$ = NULL;
          bool SpanContainQuery$SpanContainWeight::live$ = false;

          jclass SpanContainQuery$SpanContainWeight::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/search/spans/SpanContainQuery$SpanContainWeight");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_46ad6f4c51e52670] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/search/spans/SpanContainQuery;Lorg/apache/lucene/search/IndexSearcher;Ljava/util/Map;Lorg/apache/lucene/search/spans/SpanWeight;Lorg/apache/lucene/search/spans/SpanWeight;F)V");
              mids$[mid_extractTermStates_408bd889ee3beae5] = env->getMethodID(cls, "extractTermStates", "(Ljava/util/Map;)V");
              mids$[mid_extractTerms_d5a4a8d4b806f0ba] = env->getMethodID(cls, "extractTerms", "(Ljava/util/Set;)V");

              class$ = new ::java::lang::Class(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          SpanContainQuery$SpanContainWeight::SpanContainQuery$SpanContainWeight(const ::org::apache::lucene::search::spans::SpanContainQuery & a0, const ::org::apache::lucene::search::IndexSearcher & a1, const ::java::util::Map & a2, const ::org::apache::lucene::search::spans::SpanWeight & a3, const ::org::apache::lucene::search::spans::SpanWeight & a4, jfloat a5) : ::org::apache::lucene::search::spans::SpanWeight(env->newObject(initializeClass, &mids$, mid_init$_46ad6f4c51e52670, a0.this$, a1.this$, a2.this$, a3.this$, a4.this$, a5)) {}

          void SpanContainQuery$SpanContainWeight::extractTermStates(const ::java::util::Map & a0) const
          {
            env->callVoidMethod(this$, mids$[mid_extractTermStates_408bd889ee3beae5], a0.this$);
          }

          void SpanContainQuery$SpanContainWeight::extractTerms(const ::java::util::Set & a0) const
          {
            env->callVoidMethod(this$, mids$[mid_extractTerms_d5a4a8d4b806f0ba], a0.this$);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace spans {
          static PyObject *t_SpanContainQuery$SpanContainWeight_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_SpanContainQuery$SpanContainWeight_instance_(PyTypeObject *type, PyObject *arg);
          static int t_SpanContainQuery$SpanContainWeight_init_(t_SpanContainQuery$SpanContainWeight *self, PyObject *args, PyObject *kwds);
          static PyObject *t_SpanContainQuery$SpanContainWeight_extractTermStates(t_SpanContainQuery$SpanContainWeight *self, PyObject *args);
          static PyObject *t_SpanContainQuery$SpanContainWeight_extractTerms(t_SpanContainQuery$SpanContainWeight *self, PyObject *args);

          static PyMethodDef t_SpanContainQuery$SpanContainWeight__methods_[] = {
            DECLARE_METHOD(t_SpanContainQuery$SpanContainWeight, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_SpanContainQuery$SpanContainWeight, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_SpanContainQuery$SpanContainWeight, extractTermStates, METH_VARARGS),
            DECLARE_METHOD(t_SpanContainQuery$SpanContainWeight, extractTerms, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          static PyType_Slot PY_TYPE_SLOTS(SpanContainQuery$SpanContainWeight)[] = {
            { Py_tp_methods, t_SpanContainQuery$SpanContainWeight__methods_ },
            { Py_tp_init, (void *) t_SpanContainQuery$SpanContainWeight_init_ },
            { 0, NULL }
          };

          static PyType_Def *PY_TYPE_BASES(SpanContainQuery$SpanContainWeight)[] = {
            &PY_TYPE_DEF(::org::apache::lucene::search::spans::SpanWeight),
            NULL
          };

          DEFINE_TYPE(SpanContainQuery$SpanContainWeight, t_SpanContainQuery$SpanContainWeight, SpanContainQuery$SpanContainWeight);

          void t_SpanContainQuery$SpanContainWeight::install(PyObject *module)
          {
            installType(&PY_TYPE(SpanContainQuery$SpanContainWeight), &PY_TYPE_DEF(SpanContainQuery$SpanContainWeight), module, "SpanContainQuery$SpanContainWeight", 0);
          }

          void t_SpanContainQuery$SpanContainWeight::initialize(PyObject *module)
          {
            PyObject_SetAttrString((PyObject *) PY_TYPE(SpanContainQuery$SpanContainWeight), "class_", make_descriptor(SpanContainQuery$SpanContainWeight::initializeClass, 1));
            PyObject_SetAttrString((PyObject *) PY_TYPE(SpanContainQuery$SpanContainWeight), "wrapfn_", make_descriptor(t_SpanContainQuery$SpanContainWeight::wrap_jobject));
            PyObject_SetAttrString((PyObject *) PY_TYPE(SpanContainQuery$SpanContainWeight), "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_SpanContainQuery$SpanContainWeight_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, SpanContainQuery$SpanContainWeight::initializeClass, 1)))
              return NULL;
            return t_SpanContainQuery$SpanContainWeight::wrap_Object(SpanContainQuery$SpanContainWeight(((t_SpanContainQuery$SpanContainWeight *) arg)->object.this$));
          }
          static PyObject *t_SpanContainQuery$SpanContainWeight_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, SpanContainQuery$SpanContainWeight::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_SpanContainQuery$SpanContainWeight_init_(t_SpanContainQuery$SpanContainWeight *self, PyObject *args, PyObject *kwds)
          {
            ::org::apache::lucene::search::spans::SpanContainQuery a0((jobject) NULL);
            ::org::apache::lucene::search::IndexSearcher a1((jobject) NULL);
            ::java::util::Map a2((jobject) NULL);
            PyTypeObject **p2;
            ::org::apache::lucene::search::spans::SpanWeight a3((jobject) NULL);
            ::org::apache::lucene::search::spans::SpanWeight a4((jobject) NULL);
            jfloat a5;
            SpanContainQuery$SpanContainWeight object((jobject) NULL);

            if (!parseArgs(args, "kkKkkF", ::org::apache::lucene::search::spans::SpanContainQuery::initializeClass, ::org::apache::lucene::search::IndexSearcher::initializeClass, ::java::util::Map::initializeClass, ::org::apache::lucene::search::spans::SpanWeight::initializeClass, ::org::apache::lucene::search::spans::SpanWeight::initializeClass, &a0, &a1, &a2, &p2, ::java::util::t_Map::parameters_, &a3, &a4, &a5))
            {
              INT_CALL(object = SpanContainQuery$SpanContainWeight(a0, a1, a2, a3, a4, a5));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_SpanContainQuery$SpanContainWeight_extractTermStates(t_SpanContainQuery$SpanContainWeight *self, PyObject *args)
          {
            ::java::util::Map a0((jobject) NULL);
            PyTypeObject **p0;

            if (!parseArgs(args, "K", ::java::util::Map::initializeClass, &a0, &p0, ::java::util::t_Map::parameters_))
            {
              OBJ_CALL(self->object.extractTermStates(a0));
              Py_RETURN_NONE;
            }

            return callSuper(PY_TYPE(SpanContainQuery$SpanContainWeight), (PyObject *) self, "extractTermStates", args, 2);
          }

          static PyObject *t_SpanContainQuery$SpanContainWeight_extractTerms(t_SpanContainQuery$SpanContainWeight *self, PyObject *args)
          {
            ::java::util::Set a0((jobject) NULL);
            PyTypeObject **p0;

            if (!parseArgs(args, "K", ::java::util::Set::initializeClass, &a0, &p0, ::java::util::t_Set::parameters_))
            {
              OBJ_CALL(self->object.extractTerms(a0));
              Py_RETURN_NONE;
            }

            return callSuper(PY_TYPE(SpanContainQuery$SpanContainWeight), (PyObject *) self, "extractTerms", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/tokenattributes/TermFrequencyAttribute.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace tokenattributes {

          ::java::lang::Class *TermFrequencyAttribute::class$ = NULL;
          jmethodID *TermFrequencyAttribute::mids$ = NULL;
          bool TermFrequencyAttribute::live$ = false;

          jclass TermFrequencyAttribute::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/tokenattributes/TermFrequencyAttribute");

              mids$ = new jmethodID[max_mid];
              mids$[mid_getTermFrequency_9972fcc56b44e79d] = env->getMethodID(cls, "getTermFrequency", "()I");
              mids$[mid_setTermFrequency_040c4cd0390c5aff] = env->getMethodID(cls, "setTermFrequency", "(I)V");

              class$ = new ::java::lang::Class(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          jint TermFrequencyAttribute::getTermFrequency() const
          {
            return env->callIntMethod(this$, mids$[mid_getTermFrequency_9972fcc56b44e79d]);
          }

          void TermFrequencyAttribute::setTermFrequency(jint a0) const
          {
            env->callVoidMethod(this$, mids$[mid_setTermFrequency_040c4cd0390c5aff], a0);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace tokenattributes {
          static PyObject *t_TermFrequencyAttribute_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_TermFrequencyAttribute_instance_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_TermFrequencyAttribute_getTermFrequency(t_TermFrequencyAttribute *self);
          static PyObject *t_TermFrequencyAttribute_setTermFrequency(t_TermFrequencyAttribute *self, PyObject *arg);
          static PyObject *t_TermFrequencyAttribute_get__termFrequency(t_TermFrequencyAttribute *self, void *data);
          static int t_TermFrequencyAttribute_set__termFrequency(t_TermFrequencyAttribute *self, PyObject *arg, void *data);
          static PyGetSetDef t_TermFrequencyAttribute__fields_[] = {
            DECLARE_GETSET_FIELD(t_TermFrequencyAttribute, termFrequency),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_TermFrequencyAttribute__methods_[] = {
            DECLARE_METHOD(t_TermFrequencyAttribute, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_TermFrequencyAttribute, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_TermFrequencyAttribute, getTermFrequency, METH_NOARGS),
            DECLARE_METHOD(t_TermFrequencyAttribute, setTermFrequency, METH_O),
            { NULL, NULL, 0, NULL }
          };

          static PyType_Slot PY_TYPE_SLOTS(TermFrequencyAttribute)[] = {
            { Py_tp_methods, t_TermFrequencyAttribute__methods_ },
            { Py_tp_init, (void *) abstract_init },
            { Py_tp_getset, t_TermFrequencyAttribute__fields_ },
            { 0, NULL }
          };

          static PyType_Def *PY_TYPE_BASES(TermFrequencyAttribute)[] = {
            &PY_TYPE_DEF(::org::apache::lucene::util::Attribute),
            NULL
          };

          DEFINE_TYPE(TermFrequencyAttribute, t_TermFrequencyAttribute, TermFrequencyAttribute);

          void t_TermFrequencyAttribute::install(PyObject *module)
          {
            installType(&PY_TYPE(TermFrequencyAttribute), &PY_TYPE_DEF(TermFrequencyAttribute), module, "TermFrequencyAttribute", 0);
          }

          void t_TermFrequencyAttribute::initialize(PyObject *module)
          {
            PyObject_SetAttrString((PyObject *) PY_TYPE(TermFrequencyAttribute), "class_", make_descriptor(TermFrequencyAttribute::initializeClass, 1));
            PyObject_SetAttrString((PyObject *) PY_TYPE(TermFrequencyAttribute), "wrapfn_", make_descriptor(t_TermFrequencyAttribute::wrap_jobject));
            PyObject_SetAttrString((PyObject *) PY_TYPE(TermFrequencyAttribute), "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_TermFrequencyAttribute_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, TermFrequencyAttribute::initializeClass, 1)))
              return NULL;
            return t_TermFrequencyAttribute::wrap_Object(TermFrequencyAttribute(((t_TermFrequencyAttribute *) arg)->object.this$));
          }
          static PyObject *t_TermFrequencyAttribute_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, TermFrequencyAttribute::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static PyObject *t_TermFrequencyAttribute_getTermFrequency(t_TermFrequencyAttribute *self)
          {
            jint result;
            OBJ_CALL(result = self->object.getTermFrequency());
            return PyLong_FromLong((long) result);
          }

          static PyObject *t_TermFrequencyAttribute_setTermFrequency(t_TermFrequencyAttribute *self, PyObject *arg)
          {
            jint a0;

            if (!parseArg(arg, "I", &a0))
            {
              OBJ_CALL(self->object.setTermFrequency(a0));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError((PyObject *) self, "setTermFrequency", arg);
            return NULL;
          }

          static PyObject *t_TermFrequencyAttribute_get__termFrequency(t_TermFrequencyAttribute *self, void *data)
          {
            jint value;
            OBJ_CALL(value = self->object.getTermFrequency());
            return PyLong_FromLong((long) value);
          }
          static int t_TermFrequencyAttribute_set__termFrequency(t_TermFrequencyAttribute *self, PyObject *arg, void *data)
          {
            {
              jint value;
              if (!parseArg(arg, "I", &value))
              {
                INT_CALL(self->object.setTermFrequency(value));
                return 0;
              }
            }
            PyErr_SetArgsError((PyObject *) self, "termFrequency", arg);
            return -1;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/compound/HyphenationCompoundWordTokenFilterFactory.h"
#include "java/util/Map.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/analysis/TokenStream.h"
#include "org/apache/lucene/analysis/util/ResourceLoader.h"
#include "org/apache/lucene/analysis/TokenFilter.h"
#include "java/lang/String.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/analysis/util/ResourceLoaderAware.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace compound {

          ::java::lang::Class *HyphenationCompoundWordTokenFilterFactory::class$ = NULL;
          jmethodID *HyphenationCompoundWordTokenFilterFactory::mids$ = NULL;
          bool HyphenationCompoundWordTokenFilterFactory::live$ = false;
          ::java::lang::String *HyphenationCompoundWordTokenFilterFactory::NAME = NULL;

          jclass HyphenationCompoundWordTokenFilterFactory::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/compound/HyphenationCompoundWordTokenFilterFactory");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_408bd889ee3beae5] = env->getMethodID(cls, "<init>", "(Ljava/util/Map;)V");
              mids$[mid_create_4366615ad7077dae] = env->getMethodID(cls, "create", "(Lorg/apache/lucene/analysis/TokenStream;)Lorg/apache/lucene/analysis/TokenFilter;");
              mids$[mid_inform_b4ee53c41a5f629f] = env->getMethodID(cls, "inform", "(Lorg/apache/lucene/analysis/util/ResourceLoader;)V");

              class$ = new ::java::lang::Class(cls);
              cls = (jclass) class$->this$;

              NAME = new ::java::lang::String(env->getStaticObjectField(cls, "NAME", "Ljava/lang/String;"));
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          HyphenationCompoundWordTokenFilterFactory::HyphenationCompoundWordTokenFilterFactory(const ::java::util::Map & a0) : ::org::apache::lucene::analysis::util::TokenFilterFactory(env->newObject(initializeClass, &mids$, mid_init$_408bd889ee3beae5, a0.this$)) {}

          ::org::apache::lucene::analysis::TokenFilter HyphenationCompoundWordTokenFilterFactory::create(const ::org::apache::lucene::analysis::TokenStream & a0) const
          {
            return ::org::apache::lucene::analysis::TokenFilter(env->callObjectMethod(this$, mids$[mid_create_4366615ad7077dae], a0.this$));
          }

          void HyphenationCompoundWordTokenFilterFactory::inform(const ::org::apache::lucene::analysis::util::ResourceLoader & a0) const
          {
            env->callVoidMethod(this$, mids$[mid_inform_b4ee53c41a5f629f], a0.this$);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace compound {
          static PyObject *t_HyphenationCompoundWordTokenFilterFactory_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_HyphenationCompoundWordTokenFilterFactory_instance_(PyTypeObject *type, PyObject *arg);
          static int t_HyphenationCompoundWordTokenFilterFactory_init_(t_HyphenationCompoundWordTokenFilterFactory *self, PyObject *args, PyObject *kwds);
          static PyObject *t_HyphenationCompoundWordTokenFilterFactory_create(t_HyphenationCompoundWordTokenFilterFactory *self, PyObject *args);
          static PyObject *t_HyphenationCompoundWordTokenFilterFactory_inform(t_HyphenationCompoundWordTokenFilterFactory *self, PyObject *arg);

          static PyMethodDef t_HyphenationCompoundWordTokenFilterFactory__methods_[] = {
            DECLARE_METHOD(t_HyphenationCompoundWordTokenFilterFactory, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_HyphenationCompoundWordTokenFilterFactory, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_HyphenationCompoundWordTokenFilterFactory, create, METH_VARARGS),
            DECLARE_METHOD(t_HyphenationCompoundWordTokenFilterFactory, inform, METH_O),
            { NULL, NULL, 0, NULL }
          };

          static PyType_Slot PY_TYPE_SLOTS(HyphenationCompoundWordTokenFilterFactory)[] = {
            { Py_tp_methods, t_HyphenationCompoundWordTokenFilterFactory__methods_ },
            { Py_tp_init, (void *) t_HyphenationCompoundWordTokenFilterFactory_init_ },
            { 0, NULL }
          };

          static PyType_Def *PY_TYPE_BASES(HyphenationCompoundWordTokenFilterFactory)[] = {
            &PY_TYPE_DEF(::org::apache::lucene::analysis::util::TokenFilterFactory),
            NULL
          };

          DEFINE_TYPE(HyphenationCompoundWordTokenFilterFactory, t_HyphenationCompoundWordTokenFilterFactory, HyphenationCompoundWordTokenFilterFactory);

          void t_HyphenationCompoundWordTokenFilterFactory::install(PyObject *module)
          {
            installType(&PY_TYPE(HyphenationCompoundWordTokenFilterFactory), &PY_TYPE_DEF(HyphenationCompoundWordTokenFilterFactory), module, "HyphenationCompoundWordTokenFilterFactory", 0);
          }

          void t_HyphenationCompoundWordTokenFilterFactory::initialize(PyObject *module)
          {
            PyObject_SetAttrString((PyObject *) PY_TYPE(HyphenationCompoundWordTokenFilterFactory), "class_", make_descriptor(HyphenationCompoundWordTokenFilterFactory::initializeClass, 1));
            PyObject_SetAttrString((PyObject *) PY_TYPE(HyphenationCompoundWordTokenFilterFactory), "wrapfn_", make_descriptor(t_HyphenationCompoundWordTokenFilterFactory::wrap_jobject));
            PyObject_SetAttrString((PyObject *) PY_TYPE(HyphenationCompoundWordTokenFilterFactory), "boxfn_", make_descriptor(boxObject));
            env->getClass(HyphenationCompoundWordTokenFilterFactory::initializeClass);
            PyObject_SetAttrString((PyObject *) PY_TYPE(HyphenationCompoundWordTokenFilterFactory), "NAME", make_descriptor(j2p(*HyphenationCompoundWordTokenFilterFactory::NAME)));
          }

          static PyObject *t_HyphenationCompoundWordTokenFilterFactory_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, HyphenationCompoundWordTokenFilterFactory::initializeClass, 1)))
              return NULL;
            return t_HyphenationCompoundWordTokenFilterFactory::wrap_Object(HyphenationCompoundWordTokenFilterFactory(((t_HyphenationCompoundWordTokenFilterFactory *) arg)->object.this$));
          }
          static PyObject *t_HyphenationCompoundWordTokenFilterFactory_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, HyphenationCompoundWordTokenFilterFactory::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_HyphenationCompoundWordTokenFilterFactory_init_(t_HyphenationCompoundWordTokenFilterFactory *self, PyObject *args, PyObject *kwds)
          {
            ::java::util::Map a0((jobject) NULL);
            PyTypeObject **p0;
            HyphenationCompoundWordTokenFilterFactory object((jobject) NULL);

            if (!parseArgs(args, "K", ::java::util::Map::initializeClass, &a0, &p0, ::java::util::t_Map::parameters_))
            {
              INT_CALL(object = HyphenationCompoundWordTokenFilterFactory(a0));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_HyphenationCompoundWordTokenFilterFactory_create(t_HyphenationCompoundWordTokenFilterFactory *self, PyObject *args)
          {
            ::org::apache::lucene::analysis::TokenStream a0((jobject) NULL);
            ::org::apache::lucene::analysis::TokenFilter result((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::analysis::TokenStream::initializeClass, &a0))
            {
              OBJ_CALL(result = self->object.create(a0));
              return ::org::apache::lucene::analysis::t_TokenFilter::wrap_Object(result);
            }

            return callSuper(PY_TYPE(HyphenationCompoundWordTokenFilterFactory), (PyObject *) self, "create", args, 2);
          }

          static PyObject *t_HyphenationCompoundWordTokenFilterFactory_inform(t_HyphenationCompoundWordTokenFilterFactory *self, PyObject *arg)
          {
            ::org::apache::lucene::analysis::util::ResourceLoader a0((jobject) NULL);

            if (!parseArg(arg, "k", ::org::apache::lucene::analysis::util::ResourceLoader::initializeClass, &a0))
            {
              OBJ_CALL(self->object.inform(a0));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError((PyObject *) self, "inform", arg);
            return NULL;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/miscellaneous/KeepWordFilter.h"
#include "org/apache/lucene/analysis/CharArraySet.h"
#include "org/apache/lucene/analysis/TokenStream.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace miscellaneous {

          ::java::lang::Class *KeepWordFilter::class$ = NULL;
          jmethodID *KeepWordFilter::mids$ = NULL;
          bool KeepWordFilter::live$ = false;

          jclass KeepWordFilter::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/miscellaneous/KeepWordFilter");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_85e689f6ceab32ee] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/analysis/TokenStream;Lorg/apache/lucene/analysis/CharArraySet;)V");
              mids$[mid_accept_8454bd5aa23fd11e] = env->getMethodID(cls, "accept", "()Z");

              class$ = new ::java::lang::Class(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          KeepWordFilter::KeepWordFilter(const ::org::apache::lucene::analysis::TokenStream & a0, const ::org::apache::lucene::analysis::CharArraySet & a1) : ::org::apache::lucene::analysis::FilteringTokenFilter(env->newObject(initializeClass, &mids$, mid_init$_85e689f6ceab32ee, a0.this$, a1.this$)) {}

          jboolean KeepWordFilter::accept() const
          {
            return env->callBooleanMethod(this$, mids$[mid_accept_8454bd5aa23fd11e]);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace miscellaneous {
          static PyObject *t_KeepWordFilter_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_KeepWordFilter_instance_(PyTypeObject *type, PyObject *arg);
          static int t_KeepWordFilter_init_(t_KeepWordFilter *self, PyObject *args, PyObject *kwds);
          static PyObject *t_KeepWordFilter_accept(t_KeepWordFilter *self);

          static PyMethodDef t_KeepWordFilter__methods_[] = {
            DECLARE_METHOD(t_KeepWordFilter, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_KeepWordFilter, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_KeepWordFilter, accept, METH_NOARGS),
            { NULL, NULL, 0, NULL }
          };

          static PyType_Slot PY_TYPE_SLOTS(KeepWordFilter)[] = {
            { Py_tp_methods, t_KeepWordFilter__methods_ },
            { Py_tp_init, (void *) t_KeepWordFilter_init_ },
            { 0, NULL }
          };

          static PyType_Def *PY_TYPE_BASES(KeepWordFilter)[] = {
            &PY_TYPE_DEF(::org::apache::lucene::analysis::FilteringTokenFilter),
            NULL
          };

          DEFINE_TYPE(KeepWordFilter, t_KeepWordFilter, KeepWordFilter);

          void t_KeepWordFilter::install(PyObject *module)
          {
            installType(&PY_TYPE(KeepWordFilter), &PY_TYPE_DEF(KeepWordFilter), module, "KeepWordFilter", 0);
          }

          void t_KeepWordFilter::initialize(PyObject *module)
          {
            PyObject_SetAttrString((PyObject *) PY_TYPE(KeepWordFilter), "class_", make_descriptor(KeepWordFilter::initializeClass, 1));
            PyObject_SetAttrString((PyObject *) PY_TYPE(KeepWordFilter), "wrapfn_", make_descriptor(t_KeepWordFilter::wrap_jobject));
            PyObject_SetAttrString((PyObject *) PY_TYPE(KeepWordFilter), "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_KeepWordFilter_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, KeepWordFilter::initializeClass, 1)))
              return NULL;
            return t_KeepWordFilter::wrap_Object(KeepWordFilter(((t_KeepWordFilter *) arg)->object.this$));
          }
          static PyObject *t_KeepWordFilter_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, KeepWordFilter::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_KeepWordFilter_init_(t_KeepWordFilter *self, PyObject *args, PyObject *kwds)
          {
            ::org::apache::lucene::analysis::TokenStream a0((jobject) NULL);
            ::org::apache::lucene::analysis::CharArraySet a1((jobject) NULL);
            PyTypeObject **p1;
            KeepWordFilter object((jobject) NULL);

            if (!parseArgs(args, "kK", ::org::apache::lucene::analysis::TokenStream::initializeClass, ::org::apache::lucene::analysis::CharArraySet::initializeClass, &a0, &a1, &p1, ::org::apache::lucene::analysis::t_CharArraySet::parameters_))
            {
              INT_CALL(object = KeepWordFilter(a0, a1));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_KeepWordFilter_accept(t_KeepWordFilter *self)
          {
            jboolean result;
            OBJ_CALL(result = self->object.accept());
            Py_RETURN_BOOL(result);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/grouping/TopGroups$ScoreMergeMode.h"
#include "org/apache/lucene/search/grouping/TopGroups$ScoreMergeMode.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace grouping {

          ::java::lang::Class *TopGroups$ScoreMergeMode::class$ = NULL;
          jmethodID *TopGroups$ScoreMergeMode::mids$ = NULL;
          bool TopGroups$ScoreMergeMode::live$ = false;
          TopGroups$ScoreMergeMode *TopGroups$ScoreMergeMode::Avg = NULL;
          TopGroups$ScoreMergeMode *TopGroups$ScoreMergeMode::None = NULL;
          TopGroups$ScoreMergeMode *TopGroups$ScoreMergeMode::Total = NULL;

          jclass TopGroups$ScoreMergeMode::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/search/grouping/TopGroups$ScoreMergeMode");

              mids$ = new jmethodID[max_mid];
              mids$[mid_valueOf_c1a50261759a1fc3] = env->getStaticMethodID(cls, "valueOf", "(Ljava/lang/String;)Lorg/apache/lucene/search/grouping/TopGroups$ScoreMergeMode;");
              mids$[mid_values_50bc6d6301d470ca] = env->getStaticMethodID(cls, "values", "()[Lorg/apache/lucene/search/grouping/TopGroups$ScoreMergeMode;");

              class$ = new ::java::lang::Class(cls);
              cls = (jclass) class$->this$;

              Avg = new TopGroups$ScoreMergeMode(env->getStaticObjectField(cls, "Avg", "Lorg/apache/lucene/search/grouping/TopGroups$ScoreMergeMode;"));
              None = new TopGroups$ScoreMergeMode(env->getStaticObjectField(cls, "None", "Lorg/apache/lucene/search/grouping/TopGroups$ScoreMergeMode;"));
              Total = new TopGroups$ScoreMergeMode(env->getStaticObjectField(cls, "Total", "Lorg/apache/lucene/search/grouping/TopGroups$ScoreMergeMode;"));
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          TopGroups$ScoreMergeMode TopGroups$ScoreMergeMode::valueOf(const ::java::lang::String & a0)
          {
            jclass cls = env->getClass(initializeClass);
            return TopGroups$ScoreMergeMode(env->callStaticObjectMethod(cls, mids$[mid_valueOf_c1a50261759a1fc3], a0.this$));
          }

          JArray< TopGroups$ScoreMergeMode > TopGroups$ScoreMergeMode::values()
          {
            jclass cls = env->getClass(initializeClass);
            return JArray< TopGroups$ScoreMergeMode >(env->callStaticObjectMethod(cls, mids$[mid_values_50bc6d6301d470ca]));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace grouping {
          static PyObject *t_TopGroups$ScoreMergeMode_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_TopGroups$ScoreMergeMode_instance_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_TopGroups$ScoreMergeMode_of_(t_TopGroups$ScoreMergeMode *self, PyObject *args);
          static PyObject *t_TopGroups$ScoreMergeMode_valueOf(PyTypeObject *type, PyObject *args);
          static PyObject *t_TopGroups$ScoreMergeMode_values(PyTypeObject *type);
          static PyObject *t_TopGroups$ScoreMergeMode_get__parameters_(t_TopGroups$ScoreMergeMode *self, void *data);
          static PyGetSetDef t_TopGroups$ScoreMergeMode__fields_[] = {
            DECLARE_GET_FIELD(t_TopGroups$ScoreMergeMode, parameters_),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_TopGroups$ScoreMergeMode__methods_[] = {
            DECLARE_METHOD(t_TopGroups$ScoreMergeMode, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_TopGroups$ScoreMergeMode, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_TopGroups$ScoreMergeMode, of_, METH_VARARGS),
            DECLARE_METHOD(t_TopGroups$ScoreMergeMode, valueOf, METH_VARARGS | METH_CLASS),
            DECLARE_METHOD(t_TopGroups$ScoreMergeMode, values, METH_NOARGS | METH_CLASS),
            { NULL, NULL, 0, NULL }
          };

          static PyType_Slot PY_TYPE_SLOTS(TopGroups$ScoreMergeMode)[] = {
            { Py_tp_methods, t_TopGroups$ScoreMergeMode__methods_ },
            { Py_tp_init, (void *) abstract_init },
            { Py_tp_getset, t_TopGroups$ScoreMergeMode__fields_ },
            { 0, NULL }
          };

          static PyType_Def *PY_TYPE_BASES(TopGroups$ScoreMergeMode)[] = {
            &PY_TYPE_DEF(::java::lang::Enum),
            NULL
          };

          DEFINE_TYPE(TopGroups$ScoreMergeMode, t_TopGroups$ScoreMergeMode, TopGroups$ScoreMergeMode);
          PyObject *t_TopGroups$ScoreMergeMode::wrap_Object(const TopGroups$ScoreMergeMode& object, PyTypeObject *p0)
          {
            PyObject *obj = t_TopGroups$ScoreMergeMode::wrap_Object(object);
            if (obj != NULL && obj != Py_None)
            {
              t_TopGroups$ScoreMergeMode *self = (t_TopGroups$ScoreMergeMode *) obj;
              self->parameters[0] = p0;
            }
            return obj;
          }

          PyObject *t_TopGroups$ScoreMergeMode::wrap_jobject(const jobject& object, PyTypeObject *p0)
          {
            PyObject *obj = t_TopGroups$ScoreMergeMode::wrap_jobject(object);
            if (obj != NULL && obj != Py_None)
            {
              t_TopGroups$ScoreMergeMode *self = (t_TopGroups$ScoreMergeMode *) obj;
              self->parameters[0] = p0;
            }
            return obj;
          }

          void t_TopGroups$ScoreMergeMode::install(PyObject *module)
          {
            installType(&PY_TYPE(TopGroups$ScoreMergeMode), &PY_TYPE_DEF(TopGroups$ScoreMergeMode), module, "TopGroups$ScoreMergeMode", 0);
          }

          void t_TopGroups$ScoreMergeMode::initialize(PyObject *module)
          {
            PyObject_SetAttrString((PyObject *) PY_TYPE(TopGroups$ScoreMergeMode), "class_", make_descriptor(TopGroups$ScoreMergeMode::initializeClass, 1));
            PyObject_SetAttrString((PyObject *) PY_TYPE(TopGroups$ScoreMergeMode), "wrapfn_", make_descriptor(t_TopGroups$ScoreMergeMode::wrap_jobject));
            PyObject_SetAttrString((PyObject *) PY_TYPE(TopGroups$ScoreMergeMode), "boxfn_", make_descriptor(boxObject));
            env->getClass(TopGroups$ScoreMergeMode::initializeClass);
            PyObject_SetAttrString((PyObject *) PY_TYPE(TopGroups$ScoreMergeMode), "Avg", make_descriptor(t_TopGroups$ScoreMergeMode::wrap_Object(*TopGroups$ScoreMergeMode::Avg)));
            PyObject_SetAttrString((PyObject *) PY_TYPE(TopGroups$ScoreMergeMode), "None", make_descriptor(t_TopGroups$ScoreMergeMode::wrap_Object(*TopGroups$ScoreMergeMode::None)));
            PyObject_SetAttrString((PyObject *) PY_TYPE(TopGroups$ScoreMergeMode), "Total", make_descriptor(t_TopGroups$ScoreMergeMode::wrap_Object(*TopGroups$ScoreMergeMode::Total)));
          }

          static PyObject *t_TopGroups$ScoreMergeMode_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, TopGroups$ScoreMergeMode::initializeClass, 1)))
              return NULL;
            return t_TopGroups$ScoreMergeMode::wrap_Object(TopGroups$ScoreMergeMode(((t_TopGroups$ScoreMergeMode *) arg)->object.this$));
          }
          static PyObject *t_TopGroups$ScoreMergeMode_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, TopGroups$ScoreMergeMode::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static PyObject *t_TopGroups$ScoreMergeMode_of_(t_TopGroups$ScoreMergeMode *self, PyObject *args)
          {
            if (!parseArg(args, "T", 1, &(self->parameters)))
              Py_RETURN_SELF;
            return PyErr_SetArgsError((PyObject *) self, "of_", args);
          }

          static PyObject *t_TopGroups$ScoreMergeMode_valueOf(PyTypeObject *type, PyObject *args)
          {
            ::java::lang::String a0((jobject) NULL);
            TopGroups$ScoreMergeMode result((jobject) NULL);

            if (!parseArgs(args, "s", &a0))
            {
              OBJ_CALL(result = ::org::apache::lucene::search::grouping::TopGroups$ScoreMergeMode::valueOf(a0));
              return t_TopGroups$ScoreMergeMode::wrap_Object(result);
            }

            return callSuper(type, "valueOf", args, 2);
          }

          static PyObject *t_TopGroups$ScoreMergeMode_values(PyTypeObject *type)
          {
            JArray< TopGroups$ScoreMergeMode > result((jobject) NULL);
            OBJ_CALL(result = ::org::apache::lucene::search::grouping::TopGroups$ScoreMergeMode::values());
            return JArray<jobject>(result.this$).wrap(t_TopGroups$ScoreMergeMode::wrap_jobject);
          }
          static PyObject *t_TopGroups$ScoreMergeMode_get__parameters_(t_TopGroups$ScoreMergeMode *self, void *data)
          {
            return typeParameters(self->parameters, sizeof(self->parameters));
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/pattern/PatternReplaceFilterFactory.h"
#include "java/util/Map.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/analysis/TokenStream.h"
#include "org/apache/lucene/analysis/pattern/PatternReplaceFilter.h"
#include "java/lang/String.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace pattern {

          ::java::lang::Class *PatternReplaceFilterFactory::class$ = NULL;
          jmethodID *PatternReplaceFilterFactory::mids$ = NULL;
          bool PatternReplaceFilterFactory::live$ = false;
          ::java::lang::String *PatternReplaceFilterFactory::NAME = NULL;

          jclass PatternReplaceFilterFactory::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/pattern/PatternReplaceFilterFactory");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_408bd889ee3beae5] = env->getMethodID(cls, "<init>", "(Ljava/util/Map;)V");
              mids$[mid_create_a1853562e3997fa6] = env->getMethodID(cls, "create", "(Lorg/apache/lucene/analysis/TokenStream;)Lorg/apache/lucene/analysis/pattern/PatternReplaceFilter;");

              class$ = new ::java::lang::Class(cls);
              cls = (jclass) class$->this$;

              NAME = new ::java::lang::String(env->getStaticObjectField(cls, "NAME", "Ljava/lang/String;"));
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          PatternReplaceFilterFactory::PatternReplaceFilterFactory(const ::java::util::Map & a0) : ::org::apache::lucene::analysis::util::TokenFilterFactory(env->newObject(initializeClass, &mids$, mid_init$_408bd889ee3beae5, a0.this$)) {}

          ::org::apache::lucene::analysis::pattern::PatternReplaceFilter PatternReplaceFilterFactory::create(const ::org::apache::lucene::analysis::TokenStream & a0) const
          {
            return ::org::apache::lucene::analysis::pattern::PatternReplaceFilter(env->callObjectMethod(this$, mids$[mid_create_a1853562e3997fa6], a0.this$));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace pattern {
          static PyObject *t_PatternReplaceFilterFactory_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_PatternReplaceFilterFactory_instance_(PyTypeObject *type, PyObject *arg);
          static int t_PatternReplaceFilterFactory_init_(t_PatternReplaceFilterFactory *self, PyObject *args, PyObject *kwds);
          static PyObject *t_PatternReplaceFilterFactory_create(t_PatternReplaceFilterFactory *self, PyObject *args);

          static PyMethodDef t_PatternReplaceFilterFactory__methods_[] = {
            DECLARE_METHOD(t_PatternReplaceFilterFactory, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_PatternReplaceFilterFactory, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_PatternReplaceFilterFactory, create, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          static PyType_Slot PY_TYPE_SLOTS(PatternReplaceFilterFactory)[] = {
            { Py_tp_methods, t_PatternReplaceFilterFactory__methods_ },
            { Py_tp_init, (void *) t_PatternReplaceFilterFactory_init_ },
            { 0, NULL }
          };

          static PyType_Def *PY_TYPE_BASES(PatternReplaceFilterFactory)[] = {
            &PY_TYPE_DEF(::org::apache::lucene::analysis::util::TokenFilterFactory),
            NULL
          };

          DEFINE_TYPE(PatternReplaceFilterFactory, t_PatternReplaceFilterFactory, PatternReplaceFilterFactory);

          void t_PatternReplaceFilterFactory::install(PyObject *module)
          {
            installType(&PY_TYPE(PatternReplaceFilterFactory), &PY_TYPE_DEF(PatternReplaceFilterFactory), module, "PatternReplaceFilterFactory", 0);
          }

          void t_PatternReplaceFilterFactory::initialize(PyObject *module)
          {
            PyObject_SetAttrString((PyObject *) PY_TYPE(PatternReplaceFilterFactory), "class_", make_descriptor(PatternReplaceFilterFactory::initializeClass, 1));
            PyObject_SetAttrString((PyObject *) PY_TYPE(PatternReplaceFilterFactory), "wrapfn_", make_descriptor(t_PatternReplaceFilterFactory::wrap_jobject));
            PyObject_SetAttrString((PyObject *) PY_TYPE(PatternReplaceFilterFactory), "boxfn_", make_descriptor(boxObject));
            env->getClass(PatternReplaceFilterFactory::initializeClass);
            PyObject_SetAttrString((PyObject *) PY_TYPE(PatternReplaceFilterFactory), "NAME", make_descriptor(j2p(*PatternReplaceFilterFactory::NAME)));
          }

          static PyObject *t_PatternReplaceFilterFactory_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, PatternReplaceFilterFactory::initializeClass, 1)))
              return NULL;
            return t_PatternReplaceFilterFactory::wrap_Object(PatternReplaceFilterFactory(((t_PatternReplaceFilterFactory *) arg)->object.this$));
          }
          static PyObject *t_PatternReplaceFilterFactory_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, PatternReplaceFilterFactory::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_PatternReplaceFilterFactory_init_(t_PatternReplaceFilterFactory *self, PyObject *args, PyObject *kwds)
          {
            ::java::util::Map a0((jobject) NULL);
            PyTypeObject **p0;
            PatternReplaceFilterFactory object((jobject) NULL);

            if (!parseArgs(args, "K", ::java::util::Map::initializeClass, &a0, &p0, ::java::util::t_Map::parameters_))
            {
              INT_CALL(object = PatternReplaceFilterFactory(a0));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_PatternReplaceFilterFactory_create(t_PatternReplaceFilterFactory *self, PyObject *args)
          {
            ::org::apache::lucene::analysis::TokenStream a0((jobject) NULL);
            ::org::apache::lucene::analysis::pattern::PatternReplaceFilter result((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::analysis::TokenStream::initializeClass, &a0))
            {
              OBJ_CALL(result = self->object.create(a0));
              return ::org::apache::lucene::analysis::pattern::t_PatternReplaceFilter::wrap_Object(result);
            }

            return callSuper(PY_TYPE(PatternReplaceFilterFactory), (PyObject *) self, "create", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/suggest/fst/FSTCompletion.h"
#include "java/util/List.h"
#include "java/lang/Class.h"
#include "java/lang/CharSequence.h"
#include "org/apache/lucene/util/fst/FST.h"
#include "org/apache/lucene/search/suggest/fst/FSTCompletion$Completion.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace suggest {
          namespace fst {

            ::java::lang::Class *FSTCompletion::class$ = NULL;
            jmethodID *FSTCompletion::mids$ = NULL;
            bool FSTCompletion::live$ = false;
            jint FSTCompletion::DEFAULT_BUCKETS = (jint) 0;

            jclass FSTCompletion::initializeClass(bool getOnly)
            {
              if (getOnly)
                return (jclass) (live$ ? class$->this$ : NULL);
              if (class$ == NULL)
              {
                jclass cls = (jclass) env->findClass("org/apache/lucene/search/suggest/fst/FSTCompletion");

                mids$ = new jmethodID[max_mid];
                mids$[mid_init$_1ee434f3c8d3152a] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/util/fst/FST;)V");
                mids$[mid_init$_65136e186a9c47ae] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/util/fst/FST;ZZ)V");
                mids$[mid_getBucket_21b5a8d4320d08c7] = env->getMethodID(cls, "getBucket", "(Ljava/lang/CharSequence;)I");
                mids$[mid_getBucketCount_9972fcc56b44e79d] = env->getMethodID(cls, "getBucketCount", "()I");
                mids$[mid_getFST_a74bf1c7da47b631] = env->getMethodID(cls, "getFST", "()Lorg/apache/lucene/util/fst/FST;");
                mids$[mid_lookup_32d21569108f6276] = env->getMethodID(cls, "lookup", "(Ljava/lang/CharSequence;I)Ljava/util/List;");

                class$ = new ::java::lang::Class(cls);
                cls = (jclass) class$->this$;

                DEFAULT_BUCKETS = env->getStaticIntField(cls, "DEFAULT_BUCKETS");
                live$ = true;
              }
              return (jclass) class$->this$;
            }

            FSTCompletion::FSTCompletion(const ::org::apache::lucene::util::fst::FST & a0) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_1ee434f3c8d3152a, a0.this$)) {}

            FSTCompletion::FSTCompletion(const ::org::apache::lucene::util::fst::FST & a0, jboolean a1, jboolean a2) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_65136e186a9c47ae, a0.this$, a1, a2)) {}

            jint FSTCompletion::getBucket(const ::java::lang::CharSequence & a0) const
            {
              return env->callIntMethod(this$, mids$[mid_getBucket_21b5a8d4320d08c7], a0.this$);
            }

            jint FSTCompletion::getBucketCount() const
            {
              return env->callIntMethod(this$, mids$[mid_getBucketCount_9972fcc56b44e79d]);
            }

            ::org::apache::lucene::util::fst::FST FSTCompletion::getFST() const
            {
              return ::org::apache::lucene::util::fst::FST(env->callObjectMethod(this$, mids$[mid_getFST_a74bf1c7da47b631]));
            }

            ::java::util::List FSTCompletion::lookup(const ::java::lang::CharSequence & a0, jint a1) const
            {
              return ::java::util::List(env->callObjectMethod(this$, mids$[mid_lookup_32d21569108f6276], a0.this$, a1));
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace suggest {
          namespace fst {
            static PyObject *t_FSTCompletion_cast_(PyTypeObject *type, PyObject *arg);
            static PyObject *t_FSTCompletion_instance_(PyTypeObject *type, PyObject *arg);
            static int t_FSTCompletion_init_(t_FSTCompletion *self, PyObject *args, PyObject *kwds);
            static PyObject *t_FSTCompletion_getBucket(t_FSTCompletion *self, PyObject *arg);
            static PyObject *t_FSTCompletion_getBucketCount(t_FSTCompletion *self);
            static PyObject *t_FSTCompletion_getFST(t_FSTCompletion *self);
            static PyObject *t_FSTCompletion_lookup(t_FSTCompletion *self, PyObject *args);
            static PyObject *t_FSTCompletion_get__bucketCount(t_FSTCompletion *self, void *data);
            static PyObject *t_FSTCompletion_get__fST(t_FSTCompletion *self, void *data);
            static PyGetSetDef t_FSTCompletion__fields_[] = {
              DECLARE_GET_FIELD(t_FSTCompletion, bucketCount),
              DECLARE_GET_FIELD(t_FSTCompletion, fST),
              { NULL, NULL, NULL, NULL, NULL }
            };

            static PyMethodDef t_FSTCompletion__methods_[] = {
              DECLARE_METHOD(t_FSTCompletion, cast_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_FSTCompletion, instance_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_FSTCompletion, getBucket, METH_O),
              DECLARE_METHOD(t_FSTCompletion, getBucketCount, METH_NOARGS),
              DECLARE_METHOD(t_FSTCompletion, getFST, METH_NOARGS),
              DECLARE_METHOD(t_FSTCompletion, lookup, METH_VARARGS),
              { NULL, NULL, 0, NULL }
            };

            static PyType_Slot PY_TYPE_SLOTS(FSTCompletion)[] = {
              { Py_tp_methods, t_FSTCompletion__methods_ },
              { Py_tp_init, (void *) t_FSTCompletion_init_ },
              { Py_tp_getset, t_FSTCompletion__fields_ },
              { 0, NULL }
            };

            static PyType_Def *PY_TYPE_BASES(FSTCompletion)[] = {
              &PY_TYPE_DEF(::java::lang::Object),
              NULL
            };

            DEFINE_TYPE(FSTCompletion, t_FSTCompletion, FSTCompletion);

            void t_FSTCompletion::install(PyObject *module)
            {
              installType(&PY_TYPE(FSTCompletion), &PY_TYPE_DEF(FSTCompletion), module, "FSTCompletion", 0);
              PyObject_SetAttrString((PyObject *) PY_TYPE(FSTCompletion), "Completion", make_descriptor(&PY_TYPE_DEF(FSTCompletion$Completion)));
            }

            void t_FSTCompletion::initialize(PyObject *module)
            {
              PyObject_SetAttrString((PyObject *) PY_TYPE(FSTCompletion), "class_", make_descriptor(FSTCompletion::initializeClass, 1));
              PyObject_SetAttrString((PyObject *) PY_TYPE(FSTCompletion), "wrapfn_", make_descriptor(t_FSTCompletion::wrap_jobject));
              PyObject_SetAttrString((PyObject *) PY_TYPE(FSTCompletion), "boxfn_", make_descriptor(boxObject));
              env->getClass(FSTCompletion::initializeClass);
              PyObject_SetAttrString((PyObject *) PY_TYPE(FSTCompletion), "DEFAULT_BUCKETS", make_descriptor(FSTCompletion::DEFAULT_BUCKETS));
            }

            static PyObject *t_FSTCompletion_cast_(PyTypeObject *type, PyObject *arg)
            {
              if (!(arg = castCheck(arg, FSTCompletion::initializeClass, 1)))
                return NULL;
              return t_FSTCompletion::wrap_Object(FSTCompletion(((t_FSTCompletion *) arg)->object.this$));
            }
            static PyObject *t_FSTCompletion_instance_(PyTypeObject *type, PyObject *arg)
            {
              if (!castCheck(arg, FSTCompletion::initializeClass, 0))
                Py_RETURN_FALSE;
              Py_RETURN_TRUE;
            }

            static int t_FSTCompletion_init_(t_FSTCompletion *self, PyObject *args, PyObject *kwds)
            {
              switch (PyTuple_GET_SIZE(args)) {
               case 1:
                {
                  ::org::apache::lucene::util::fst::FST a0((jobject) NULL);
                  PyTypeObject **p0;
                  FSTCompletion object((jobject) NULL);

                  if (!parseArgs(args, "K", ::org::apache::lucene::util::fst::FST::initializeClass, &a0, &p0, ::org::apache::lucene::util::fst::t_FST::parameters_))
                  {
                    INT_CALL(object = FSTCompletion(a0));
                    self->object = object;
                    break;
                  }
                }
                goto err;
               case 3:
                {
                  ::org::apache::lucene::util::fst::FST a0((jobject) NULL);
                  PyTypeObject **p0;
                  jboolean a1;
                  jboolean a2;
                  FSTCompletion object((jobject) NULL);

                  if (!parseArgs(args, "KZZ", ::org::apache::lucene::util::fst::FST::initializeClass, &a0, &p0, ::org::apache::lucene::util::fst::t_FST::parameters_, &a1, &a2))
                  {
                    INT_CALL(object = FSTCompletion(a0, a1, a2));
                    self->object = object;
                    break;
                  }
                }
               default:
               err:
                PyErr_SetArgsError((PyObject *) self, "__init__", args);
                return -1;
              }

              return 0;
            }

            static PyObject *t_FSTCompletion_getBucket(t_FSTCompletion *self, PyObject *arg)
            {
              ::java::lang::CharSequence a0((jobject) NULL);
              jint result;

              if (!parseArg(arg, "O", ::java::lang::PY_TYPE(CharSequence), &a0))
              {
                OBJ_CALL(result = self->object.getBucket(a0));
                return PyLong_FromLong((long) result);
              }

              PyErr_SetArgsError((PyObject *) self, "getBucket", arg);
              return NULL;
            }

            static PyObject *t_FSTCompletion_getBucketCount(t_FSTCompletion *self)
            {
              jint result;
              OBJ_CALL(result = self->object.getBucketCount());
              return PyLong_FromLong((long) result);
            }

            static PyObject *t_FSTCompletion_getFST(t_FSTCompletion *self)
            {
              ::org::apache::lucene::util::fst::FST result((jobject) NULL);
              OBJ_CALL(result = self->object.getFST());
              return ::org::apache::lucene::util::fst::t_FST::wrap_Object(result, ::java::lang::PY_TYPE(Object));
            }

            static PyObject *t_FSTCompletion_lookup(t_FSTCompletion *self, PyObject *args)
            {
              ::java::lang::CharSequence a0((jobject) NULL);
              jint a1;
              ::java::util::List result((jobject) NULL);

              if (!parseArgs(args, "OI", ::java::lang::PY_TYPE(CharSequence), &a0, &a1))
              {
                OBJ_CALL(result = self->object.lookup(a0, a1));
                return ::java::util::t_List::wrap_Object(result, ::org::apache::lucene::search::suggest::fst::PY_TYPE(FSTCompletion$Completion));
              }

              PyErr_SetArgsError((PyObject *) self, "lookup", args);
              return NULL;
            }

            static PyObject *t_FSTCompletion_get__bucketCount(t_FSTCompletion *self, void *data)
            {
              jint value;
              OBJ_CALL(value = self->object.getBucketCount());
              return PyLong_FromLong((long) value);
            }

            static PyObject *t_FSTCompletion_get__fST(t_FSTCompletion *self, void *data)
            {
              ::org::apache::lucene::util::fst::FST value((jobject) NULL);
              OBJ_CALL(value = self->object.getFST());
              return ::org::apache::lucene::util::fst::t_FST::wrap_Object(value);
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/join/ParentChildrenBlockJoinQuery.h"
#include "org/apache/lucene/index/IndexReader.h"
#include "org/apache/lucene/search/join/BitSetProducer.h"
#include "org/apache/lucene/search/IndexSearcher.h"
#include "java/lang/Class.h"
#include "java/lang/Object.h"
#include "java/lang/String.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/search/QueryVisitor.h"
#include "org/apache/lucene/search/ScoreMode.h"
#include "org/apache/lucene/search/Weight.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace join {

          ::java::lang::Class *ParentChildrenBlockJoinQuery::class$ = NULL;
          jmethodID *ParentChildrenBlockJoinQuery::mids$ = NULL;
          bool ParentChildrenBlockJoinQuery::live$ = false;

          jclass ParentChildrenBlockJoinQuery::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/search/join/ParentChildrenBlockJoinQuery");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_54d5ec3721970a75] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/search/join/BitSetProducer;Lorg/apache/lucene/search/Query;I)V");
              mids$[mid_createWeight_f0ef0b5ea369ac06] = env->getMethodID(cls, "createWeight", "(Lorg/apache/lucene/search/IndexSearcher;Lorg/apache/lucene/search/ScoreMode;F)Lorg/apache/lucene/search/Weight;");
              mids$[mid_equals_8b72f2dcdde6fd1d] = env->getMethodID(cls, "equals", "(Ljava/lang/Object;)Z");
              mids$[mid_hashCode_9972fcc56b44e79d] = env->getMethodID(cls, "hashCode", "()I");
              mids$[mid_rewrite_bb52f19a8254555c] = env->getMethodID(cls, "rewrite", "(Lorg/apache/lucene/index/IndexReader;)Lorg/apache/lucene/search/Query;");
              mids$[mid_toString_9bfa75c9f141b67f] = env->getMethodID(cls, "toString", "(Ljava/lang/String;)Ljava/lang/String;");
              mids$[mid_visit_f9e6207006c5b6c1] = env->getMethodID(cls, "visit", "(Lorg/apache/lucene/search/QueryVisitor;)V");

              class$ = new ::java::lang::Class(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          ParentChildrenBlockJoinQuery::ParentChildrenBlockJoinQuery(const ::org::apache::lucene::search::join::BitSetProducer & a0, const ::org::apache::lucene::search::Query & a1, jint a2) : ::org::apache::lucene::search::Query(env->newObject(initializeClass, &mids$, mid_init$_54d5ec3721970a75, a0.this$, a1.this$, a2)) {}

          ::org::apache::lucene::search::Weight ParentChildrenBlockJoinQuery::createWeight(const ::org::apache::lucene::search::IndexSearcher & a0, const ::org::apache::lucene::search::ScoreMode & a1, jfloat a2) const
          {
            return ::org::apache::lucene::search::Weight(env->callObjectMethod(this$, mids$[mid_createWeight_f0ef0b5ea369ac06], a0.this$, a1.this$, a2));
          }

          jboolean ParentChildrenBlockJoinQuery::equals(const ::java::lang::Object & a0) const
          {
            return env->callBooleanMethod(this$, mids$[mid_equals_8b72f2dcdde6fd1d], a0.this$);
          }

          jint ParentChildrenBlockJoinQuery::hashCode() const
          {
            return env->callIntMethod(this$, mids$[mid_hashCode_9972fcc56b44e79d]);
          }

          ::org::apache::lucene::search::Query ParentChildrenBlockJoinQuery::rewrite(const ::org::apache::lucene::index::IndexReader & a0) const
          {
            return ::org::apache::lucene::search::Query(env->callObjectMethod(this$, mids$[mid_rewrite_bb52f19a8254555c], a0.this$));
          }

          ::java::lang::String ParentChildrenBlockJoinQuery::toString(const ::java::lang::String & a0) const
          {
            return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_9bfa75c9f141b67f], a0.this$));
          }

          void ParentChildrenBlockJoinQuery::visit(const ::org::apache::lucene::search::QueryVisitor & a0) const
          {
            env->callVoidMethod(this$, mids$[mid_visit_f9e6207006c5b6c1], a0.this$);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace join {
          static PyObject *t_ParentChildrenBlockJoinQuery_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_ParentChildrenBlockJoinQuery_instance_(PyTypeObject *type, PyObject *arg);
          static int t_ParentChildrenBlockJoinQuery_init_(t_ParentChildrenBlockJoinQuery *self, PyObject *args, PyObject *kwds);
          static PyObject *t_ParentChildrenBlockJoinQuery_createWeight(t_ParentChildrenBlockJoinQuery *self, PyObject *args);
          static PyObject *t_ParentChildrenBlockJoinQuery_equals(t_ParentChildrenBlockJoinQuery *self, PyObject *args);
          static PyObject *t_ParentChildrenBlockJoinQuery_hashCode(t_ParentChildrenBlockJoinQuery *self, PyObject *args);
          static PyObject *t_ParentChildrenBlockJoinQuery_rewrite(t_ParentChildrenBlockJoinQuery *self, PyObject *args);
          static PyObject *t_ParentChildrenBlockJoinQuery_toString(t_ParentChildrenBlockJoinQuery *self, PyObject *args);
          static PyObject *t_ParentChildrenBlockJoinQuery_visit(t_ParentChildrenBlockJoinQuery *self, PyObject *args);

          static PyMethodDef t_ParentChildrenBlockJoinQuery__methods_[] = {
            DECLARE_METHOD(t_ParentChildrenBlockJoinQuery, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_ParentChildrenBlockJoinQuery, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_ParentChildrenBlockJoinQuery, createWeight, METH_VARARGS),
            DECLARE_METHOD(t_ParentChildrenBlockJoinQuery, equals, METH_VARARGS),
            DECLARE_METHOD(t_ParentChildrenBlockJoinQuery, hashCode, METH_VARARGS),
            DECLARE_METHOD(t_ParentChildrenBlockJoinQuery, rewrite, METH_VARARGS),
            DECLARE_METHOD(t_ParentChildrenBlockJoinQuery, toString, METH_VARARGS),
            DECLARE_METHOD(t_ParentChildrenBlockJoinQuery, visit, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          static PyType_Slot PY_TYPE_SLOTS(ParentChildrenBlockJoinQuery)[] = {
            { Py_tp_methods, t_ParentChildrenBlockJoinQuery__methods_ },
            { Py_tp_init, (void *) t_ParentChildrenBlockJoinQuery_init_ },
            { 0, NULL }
          };

          static PyType_Def *PY_TYPE_BASES(ParentChildrenBlockJoinQuery)[] = {
            &PY_TYPE_DEF(::org::apache::lucene::search::Query),
            NULL
          };

          DEFINE_TYPE(ParentChildrenBlockJoinQuery, t_ParentChildrenBlockJoinQuery, ParentChildrenBlockJoinQuery);

          void t_ParentChildrenBlockJoinQuery::install(PyObject *module)
          {
            installType(&PY_TYPE(ParentChildrenBlockJoinQuery), &PY_TYPE_DEF(ParentChildrenBlockJoinQuery), module, "ParentChildrenBlockJoinQuery", 0);
          }

          void t_ParentChildrenBlockJoinQuery::initialize(PyObject *module)
          {
            PyObject_SetAttrString((PyObject *) PY_TYPE(ParentChildrenBlockJoinQuery), "class_", make_descriptor(ParentChildrenBlockJoinQuery::initializeClass, 1));
            PyObject_SetAttrString((PyObject *) PY_TYPE(ParentChildrenBlockJoinQuery), "wrapfn_", make_descriptor(t_ParentChildrenBlockJoinQuery::wrap_jobject));
            PyObject_SetAttrString((PyObject *) PY_TYPE(ParentChildrenBlockJoinQuery), "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_ParentChildrenBlockJoinQuery_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, ParentChildrenBlockJoinQuery::initializeClass, 1)))
              return NULL;
            return t_ParentChildrenBlockJoinQuery::wrap_Object(ParentChildrenBlockJoinQuery(((t_ParentChildrenBlockJoinQuery *) arg)->object.this$));
          }
          static PyObject *t_ParentChildrenBlockJoinQuery_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, ParentChildrenBlockJoinQuery::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_ParentChildrenBlockJoinQuery_init_(t_ParentChildrenBlockJoinQuery *self, PyObject *args, PyObject *kwds)
          {
            ::org::apache::lucene::search::join::BitSetProducer a0((jobject) NULL);
            ::org::apache::lucene::search::Query a1((jobject) NULL);
            jint a2;
            ParentChildrenBlockJoinQuery object((jobject) NULL);

            if (!parseArgs(args, "kkI", ::org::apache::lucene::search::join::BitSetProducer::initializeClass, ::org::apache::lucene::search::Query::initializeClass, &a0, &a1, &a2))
            {
              INT_CALL(object = ParentChildrenBlockJoinQuery(a0, a1, a2));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_ParentChildrenBlockJoinQuery_createWeight(t_ParentChildrenBlockJoinQuery *self, PyObject *args)
          {
            ::org::apache::lucene::search::IndexSearcher a0((jobject) NULL);
            ::org::apache::lucene::search::ScoreMode a1((jobject) NULL);
            PyTypeObject **p1;
            jfloat a2;
            ::org::apache::lucene::search::Weight result((jobject) NULL);

            if (!parseArgs(args, "kKF", ::org::apache::lucene::search::IndexSearcher::initializeClass, ::org::apache::lucene::search::ScoreMode::initializeClass, &a0, &a1, &p1, ::org::apache::lucene::search::t_ScoreMode::parameters_, &a2))
            {
              OBJ_CALL(result = self->object.createWeight(a0, a1, a2));
              return ::org::apache::lucene::search::t_Weight::wrap_Object(result);
            }

            return callSuper(PY_TYPE(ParentChildrenBlockJoinQuery), (PyObject *) self, "createWeight", args, 2);
          }

          static PyObject *t_ParentChildrenBlockJoinQuery_equals(t_ParentChildrenBlockJoinQuery *self, PyObject *args)
          {
            ::java::lang::Object a0((jobject) NULL);
            jboolean result;

            if (!parseArgs(args, "o", &a0))
            {
              OBJ_CALL(result = self->object.equals(a0));
              Py_RETURN_BOOL(result);
            }

            return callSuper(PY_TYPE(ParentChildrenBlockJoinQuery), (PyObject *) self, "equals", args, 2);
          }

          static PyObject *t_ParentChildrenBlockJoinQuery_hashCode(t_ParentChildrenBlockJoinQuery *self, PyObject *args)
          {
            jint result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.hashCode());
              return PyLong_FromLong((long) result);
            }

            return callSuper(PY_TYPE(ParentChildrenBlockJoinQuery), (PyObject *) self, "hashCode", args, 2);
          }

          static PyObject *t_ParentChildrenBlockJoinQuery_rewrite(t_ParentChildrenBlockJoinQuery *self, PyObject *args)
          {
            ::org::apache::lucene::index::IndexReader a0((jobject) NULL);
            ::org::apache::lucene::search::Query result((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::index::IndexReader::initializeClass, &a0))
            {
              OBJ_CALL(result = self->object.rewrite(a0));
              return ::org::apache::lucene::search::t_Query::wrap_Object(result);
            }

            return callSuper(PY_TYPE(ParentChildrenBlockJoinQuery), (PyObject *) self, "rewrite", args, 2);
          }

          static PyObject *t_ParentChildrenBlockJoinQuery_toString(t_ParentChildrenBlockJoinQuery *self, PyObject *args)
          {
            ::java::lang::String a0((jobject) NULL);
            ::java::lang::String result((jobject) NULL);

            if (!parseArgs(args, "s", &a0))
            {
              OBJ_CALL(result = self->object.toString(a0));
              return j2p(result);
            }

            return callSuper(PY_TYPE(ParentChildrenBlockJoinQuery), (PyObject *) self, "toString", args, 2);
          }

          static PyObject *t_ParentChildrenBlockJoinQuery_visit(t_ParentChildrenBlockJoinQuery *self, PyObject *args)
          {
            ::org::apache::lucene::search::QueryVisitor a0((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::search::QueryVisitor::initializeClass, &a0))
            {
              OBJ_CALL(self->object.visit(a0));
              Py_RETURN_NONE;
            }

            return callSuper(PY_TYPE(ParentChildrenBlockJoinQuery), (PyObject *) self, "visit", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/comparators/IntComparator.h"
#include "org/apache/lucene/index/LeafReaderContext.h"
#include "org/apache/lucene/search/LeafFieldComparator.h"
#include "java/lang/Class.h"
#include "java/lang/Integer.h"
#include "java/lang/String.h"
#include "java/io/IOException.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace comparators {

          ::java::lang::Class *IntComparator::class$ = NULL;
          jmethodID *IntComparator::mids$ = NULL;
          bool IntComparator::live$ = false;

          jclass IntComparator::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/search/comparators/IntComparator");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_9e7832edcc6a2db0] = env->getMethodID(cls, "<init>", "(ILjava/lang/String;Ljava/lang/Integer;ZI)V");
              mids$[mid_compare_57a58545eba514db] = env->getMethodID(cls, "compare", "(II)I");
              mids$[mid_getLeafComparator_6183906b7058c4b5] = env->getMethodID(cls, "getLeafComparator", "(Lorg/apache/lucene/index/LeafReaderContext;)Lorg/apache/lucene/search/LeafFieldComparator;");
              mids$[mid_setTopValue_dbbc1cc0063b348c] = env->getMethodID(cls, "setTopValue", "(Ljava/lang/Integer;)V");
              mids$[mid_value_6469c2cb31e18c67] = env->getMethodID(cls, "value", "(I)Ljava/lang/Integer;");

              class$ = new ::java::lang::Class(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          IntComparator::IntComparator(jint a0, const ::java::lang::String & a1, const ::java::lang::Integer & a2, jboolean a3, jint a4) : ::org::apache::lucene::search::comparators::NumericComparator(env->newObject(initializeClass, &mids$, mid_init$_9e7832edcc6a2db0, a0, a1.this$, a2.this$, a3, a4)) {}

          jint IntComparator::compare(jint a0, jint a1) const
          {
            return env->callIntMethod(this$, mids$[mid_compare_57a58545eba514db], a0, a1);
          }

          ::org::apache::lucene::search::LeafFieldComparator IntComparator::getLeafComparator(const ::org::apache::lucene::index::LeafReaderContext & a0) const
          {
            return ::org::apache::lucene::search::LeafFieldComparator(env->callObjectMethod(this$, mids$[mid_getLeafComparator_6183906b7058c4b5], a0.this$));
          }

          void IntComparator::setTopValue(const ::java::lang::Integer & a0) const
          {
            env->callVoidMethod(this$, mids$[mid_setTopValue_dbbc1cc0063b348c], a0.this$);
          }

          ::java::lang::Integer IntComparator::value(jint a0) const
          {
            return ::java::lang::Integer(env->callObjectMethod(this$, mids$[mid_value_6469c2cb31e18c67], a0));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace comparators {
          static PyObject *t_IntComparator_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_IntComparator_instance_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_IntComparator_of_(t_IntComparator *self, PyObject *args);
          static int t_IntComparator_init_(t_IntComparator *self, PyObject *args, PyObject *kwds);
          static PyObject *t_IntComparator_compare(t_IntComparator *self, PyObject *args);
          static PyObject *t_IntComparator_getLeafComparator(t_IntComparator *self, PyObject *args);
          static PyObject *t_IntComparator_setTopValue(t_IntComparator *self, PyObject *args);
          static PyObject *t_IntComparator_value(t_IntComparator *self, PyObject *args);
          static int t_IntComparator_set__topValue(t_IntComparator *self, PyObject *arg, void *data);
          static PyObject *t_IntComparator_get__parameters_(t_IntComparator *self, void *data);
          static PyGetSetDef t_IntComparator__fields_[] = {
            DECLARE_SET_FIELD(t_IntComparator, topValue),
            DECLARE_GET_FIELD(t_IntComparator, parameters_),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_IntComparator__methods_[] = {
            DECLARE_METHOD(t_IntComparator, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_IntComparator, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_IntComparator, of_, METH_VARARGS),
            DECLARE_METHOD(t_IntComparator, compare, METH_VARARGS),
            DECLARE_METHOD(t_IntComparator, getLeafComparator, METH_VARARGS),
            DECLARE_METHOD(t_IntComparator, setTopValue, METH_VARARGS),
            DECLARE_METHOD(t_IntComparator, value, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          static PyType_Slot PY_TYPE_SLOTS(IntComparator)[] = {
            { Py_tp_methods, t_IntComparator__methods_ },
            { Py_tp_init, (void *) t_IntComparator_init_ },
            { Py_tp_getset, t_IntComparator__fields_ },
            { 0, NULL }
          };

          static PyType_Def *PY_TYPE_BASES(IntComparator)[] = {
            &PY_TYPE_DEF(::org::apache::lucene::search::comparators::NumericComparator),
            NULL
          };

          DEFINE_TYPE(IntComparator, t_IntComparator, IntComparator);
          PyObject *t_IntComparator::wrap_Object(const IntComparator& object, PyTypeObject *p0)
          {
            PyObject *obj = t_IntComparator::wrap_Object(object);
            if (obj != NULL && obj != Py_None)
            {
              t_IntComparator *self = (t_IntComparator *) obj;
              self->parameters[0] = p0;
            }
            return obj;
          }

          PyObject *t_IntComparator::wrap_jobject(const jobject& object, PyTypeObject *p0)
          {
            PyObject *obj = t_IntComparator::wrap_jobject(object);
            if (obj != NULL && obj != Py_None)
            {
              t_IntComparator *self = (t_IntComparator *) obj;
              self->parameters[0] = p0;
            }
            return obj;
          }

          void t_IntComparator::install(PyObject *module)
          {
            installType(&PY_TYPE(IntComparator), &PY_TYPE_DEF(IntComparator), module, "IntComparator", 0);
          }

          void t_IntComparator::initialize(PyObject *module)
          {
            PyObject_SetAttrString((PyObject *) PY_TYPE(IntComparator), "class_", make_descriptor(IntComparator::initializeClass, 1));
            PyObject_SetAttrString((PyObject *) PY_TYPE(IntComparator), "wrapfn_", make_descriptor(t_IntComparator::wrap_jobject));
            PyObject_SetAttrString((PyObject *) PY_TYPE(IntComparator), "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_IntComparator_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, IntComparator::initializeClass, 1)))
              return NULL;
            return t_IntComparator::wrap_Object(IntComparator(((t_IntComparator *) arg)->object.this$));
          }
          static PyObject *t_IntComparator_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, IntComparator::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static PyObject *t_IntComparator_of_(t_IntComparator *self, PyObject *args)
          {
            if (!parseArg(args, "T", 1, &(self->parameters)))
              Py_RETURN_SELF;
            return PyErr_SetArgsError((PyObject *) self, "of_", args);
          }

          static int t_IntComparator_init_(t_IntComparator *self, PyObject *args, PyObject *kwds)
          {
            jint a0;
            ::java::lang::String a1((jobject) NULL);
            ::java::lang::Integer a2((jobject) NULL);
            jboolean a3;
            jint a4;
            IntComparator object((jobject) NULL);

            if (!parseArgs(args, "IsOZI", ::java::lang::PY_TYPE(Integer), &a0, &a1, &a2, &a3, &a4))
            {
              INT_CALL(object = IntComparator(a0, a1, a2, a3, a4));
              self->object = object;
              self->parameters[0] = ::java::lang::PY_TYPE(Integer);
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_IntComparator_compare(t_IntComparator *self, PyObject *args)
          {
            jint a0;
            jint a1;
            jint result;

            if (!parseArgs(args, "II", &a0, &a1))
            {
              OBJ_CALL(result = self->object.compare(a0, a1));
              return PyLong_FromLong((long) result);
            }

            return callSuper(PY_TYPE(IntComparator), (PyObject *) self, "compare", args, 2);
          }

          static PyObject *t_IntComparator_getLeafComparator(t_IntComparator *self, PyObject *args)
          {
            ::org::apache::lucene::index::LeafReaderContext a0((jobject) NULL);
            ::org::apache::lucene::search::LeafFieldComparator result((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::index::LeafReaderContext::initializeClass, &a0))
            {
              OBJ_CALL(result = self->object.getLeafComparator(a0));
              return ::org::apache::lucene::search::t_LeafFieldComparator::wrap_Object(result);
            }

            return callSuper(PY_TYPE(IntComparator), (PyObject *) self, "getLeafComparator", args, 2);
          }

          static PyObject *t_IntComparator_setTopValue(t_IntComparator *self, PyObject *args)
          {
            ::java::lang::Integer a0((jobject) NULL);

            if (!parseArgs(args, "O", ::java::lang::PY_TYPE(Integer), &a0))
            {
              OBJ_CALL(self->object.setTopValue(a0));
              Py_RETURN_NONE;
            }

            return callSuper(PY_TYPE(IntComparator), (PyObject *) self, "setTopValue", args, 2);
          }

          static PyObject *t_IntComparator_value(t_IntComparator *self, PyObject *args)
          {
            jint a0;
            ::java::lang::Integer result((jobject) NULL);

            if (!parseArgs(args, "I", &a0))
            {
              OBJ_CALL(result = self->object.value(a0));
              return ::java::lang::t_Integer::wrap_Object(result);
            }

            return callSuper(PY_TYPE(IntComparator), (PyObject *) self, "value", args, 2);
          }
          static PyObject *t_IntComparator_get__parameters_(t_IntComparator *self, void *data)
          {
            return typeParameters(self->parameters, sizeof(self->parameters));
          }

          static int t_IntComparator_set__topValue(t_IntComparator *self, PyObject *arg, void *data)
          {
            {
              ::java::lang::Integer value((jobject) NULL);
              if (!parseArg(arg, "O", ::java::lang::PY_TYPE(Integer), &value))
              {
                INT_CALL(self->object.setTopValue(value));
                return 0;
              }
            }
            PyErr_SetArgsError((PyObject *) self, "topValue", arg);
            return -1;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/fr/FrenchLightStemFilter.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/analysis/TokenStream.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace fr {

          ::java::lang::Class *FrenchLightStemFilter::class$ = NULL;
          jmethodID *FrenchLightStemFilter::mids$ = NULL;
          bool FrenchLightStemFilter::live$ = false;

          jclass FrenchLightStemFilter::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/fr/FrenchLightStemFilter");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_c26756868a754f4e] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/analysis/TokenStream;)V");
              mids$[mid_incrementToken_8454bd5aa23fd11e] = env->getMethodID(cls, "incrementToken", "()Z");

              class$ = new ::java::lang::Class(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          FrenchLightStemFilter::FrenchLightStemFilter(const ::org::apache::lucene::analysis::TokenStream & a0) : ::org::apache::lucene::analysis::TokenFilter(env->newObject(initializeClass, &mids$, mid_init$_c26756868a754f4e, a0.this$)) {}

          jboolean FrenchLightStemFilter::incrementToken() const
          {
            return env->callBooleanMethod(this$, mids$[mid_incrementToken_8454bd5aa23fd11e]);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace fr {
          static PyObject *t_FrenchLightStemFilter_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_FrenchLightStemFilter_instance_(PyTypeObject *type, PyObject *arg);
          static int t_FrenchLightStemFilter_init_(t_FrenchLightStemFilter *self, PyObject *args, PyObject *kwds);
          static PyObject *t_FrenchLightStemFilter_incrementToken(t_FrenchLightStemFilter *self, PyObject *args);

          static PyMethodDef t_FrenchLightStemFilter__methods_[] = {
            DECLARE_METHOD(t_FrenchLightStemFilter, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_FrenchLightStemFilter, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_FrenchLightStemFilter, incrementToken, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          static PyType_Slot PY_TYPE_SLOTS(FrenchLightStemFilter)[] = {
            { Py_tp_methods, t_FrenchLightStemFilter__methods_ },
            { Py_tp_init, (void *) t_FrenchLightStemFilter_init_ },
            { 0, NULL }
          };

          static PyType_Def *PY_TYPE_BASES(FrenchLightStemFilter)[] = {
            &PY_TYPE_DEF(::org::apache::lucene::analysis::TokenFilter),
            NULL
          };

          DEFINE_TYPE(FrenchLightStemFilter, t_FrenchLightStemFilter, FrenchLightStemFilter);

          void t_FrenchLightStemFilter::install(PyObject *module)
          {
            installType(&PY_TYPE(FrenchLightStemFilter), &PY_TYPE_DEF(FrenchLightStemFilter), module, "FrenchLightStemFilter", 0);
          }

          void t_FrenchLightStemFilter::initialize(PyObject *module)
          {
            PyObject_SetAttrString((PyObject *) PY_TYPE(FrenchLightStemFilter), "class_", make_descriptor(FrenchLightStemFilter::initializeClass, 1));
            PyObject_SetAttrString((PyObject *) PY_TYPE(FrenchLightStemFilter), "wrapfn_", make_descriptor(t_FrenchLightStemFilter::wrap_jobject));
            PyObject_SetAttrString((PyObject *) PY_TYPE(FrenchLightStemFilter), "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_FrenchLightStemFilter_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, FrenchLightStemFilter::initializeClass, 1)))
              return NULL;
            return t_FrenchLightStemFilter::wrap_Object(FrenchLightStemFilter(((t_FrenchLightStemFilter *) arg)->object.this$));
          }
          static PyObject *t_FrenchLightStemFilter_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, FrenchLightStemFilter::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_FrenchLightStemFilter_init_(t_FrenchLightStemFilter *self, PyObject *args, PyObject *kwds)
          {
            ::org::apache::lucene::analysis::TokenStream a0((jobject) NULL);
            FrenchLightStemFilter object((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::analysis::TokenStream::initializeClass, &a0))
            {
              INT_CALL(object = FrenchLightStemFilter(a0));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_FrenchLightStemFilter_incrementToken(t_FrenchLightStemFilter *self, PyObject *args)
          {
            jboolean result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.incrementToken());
              Py_RETURN_BOOL(result);
            }

            return callSuper(PY_TYPE(FrenchLightStemFilter), (PyObject *) self, "incrementToken", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/util/packed/DirectMonotonicReader.h"
#include "org/apache/lucene/util/packed/DirectMonotonicReader$Meta.h"
#include "org/apache/lucene/store/IndexInput.h"
#include "org/apache/lucene/util/packed/DirectMonotonicReader.h"
#include "org/apache/lucene/util/Accountable.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/store/RandomAccessInput.h"
#include "java/io/IOException.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        namespace packed {

          ::java::lang::Class *DirectMonotonicReader::class$ = NULL;
          jmethodID *DirectMonotonicReader::mids$ = NULL;
          bool DirectMonotonicReader::live$ = false;

          jclass DirectMonotonicReader::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/util/packed/DirectMonotonicReader");

              mids$ = new jmethodID[max_mid];
              mids$[mid_binarySearch_4ffe5f948304ec00] = env->getMethodID(cls, "binarySearch", "(JJJ)J");
              mids$[mid_get_d711eecdc469624a] = env->getMethodID(cls, "get", "(J)J");
              mids$[mid_getInstance_f2bc5ef27a52e341] = env->getStaticMethodID(cls, "getInstance", "(Lorg/apache/lucene/util/packed/DirectMonotonicReader$Meta;Lorg/apache/lucene/store/RandomAccessInput;)Lorg/apache/lucene/util/packed/DirectMonotonicReader;");
              mids$[mid_loadMeta_6ebb00c4301b0598] = env->getStaticMethodID(cls, "loadMeta", "(Lorg/apache/lucene/store/IndexInput;JI)Lorg/apache/lucene/util/packed/DirectMonotonicReader$Meta;");
              mids$[mid_ramBytesUsed_2e5ae9edcb9b072f] = env->getMethodID(cls, "ramBytesUsed", "()J");

              class$ = new ::java::lang::Class(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          jlong DirectMonotonicReader::binarySearch(jlong a0, jlong a1, jlong a2) const
          {
            return env->callLongMethod(this$, mids$[mid_binarySearch_4ffe5f948304ec00], a0, a1, a2);
          }

          jlong DirectMonotonicReader::get(jlong a0) const
          {
            return env->callLongMethod(this$, mids$[mid_get_d711eecdc469624a], a0);
          }

          DirectMonotonicReader DirectMonotonicReader::getInstance(const ::org::apache::lucene::util::packed::DirectMonotonicReader$Meta & a0, const ::org::apache::lucene::store::RandomAccessInput & a1)
          {
            jclass cls = env->getClass(initializeClass);
            return DirectMonotonicReader(env->callStaticObjectMethod(cls, mids$[mid_getInstance_f2bc5ef27a52e341], a0.this$, a1.this$));
          }

          ::org::apache::lucene::util::packed::DirectMonotonicReader$Meta DirectMonotonicReader::loadMeta(const ::org::apache::lucene::store::IndexInput & a0, jlong a1, jint a2)
          {
            jclass cls = env->getClass(initializeClass);
            return ::org::apache::lucene::util::packed::DirectMonotonicReader$Meta(env->callStaticObjectMethod(cls, mids$[mid_loadMeta_6ebb00c4301b0598], a0.this$, a1, a2));
          }

          jlong DirectMonotonicReader::ramBytesUsed() const
          {
            return env->callLongMethod(this$, mids$[mid_ramBytesUsed_2e5ae9edcb9b072f]);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        namespace packed {
          static PyObject *t_DirectMonotonicReader_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_DirectMonotonicReader_instance_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_DirectMonotonicReader_binarySearch(t_DirectMonotonicReader *self, PyObject *args);
          static PyObject *t_DirectMonotonicReader_get(t_DirectMonotonicReader *self, PyObject *args);
          static PyObject *t_DirectMonotonicReader_getInstance(PyTypeObject *type, PyObject *args);
          static PyObject *t_DirectMonotonicReader_loadMeta(PyTypeObject *type, PyObject *args);
          static PyObject *t_DirectMonotonicReader_ramBytesUsed(t_DirectMonotonicReader *self);

          static PyMethodDef t_DirectMonotonicReader__methods_[] = {
            DECLARE_METHOD(t_DirectMonotonicReader, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_DirectMonotonicReader, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_DirectMonotonicReader, binarySearch, METH_VARARGS),
            DECLARE_METHOD(t_DirectMonotonicReader, get, METH_VARARGS),
            DECLARE_METHOD(t_DirectMonotonicReader, getInstance, METH_VARARGS | METH_CLASS),
            DECLARE_METHOD(t_DirectMonotonicReader, loadMeta, METH_VARARGS | METH_CLASS),
            DECLARE_METHOD(t_DirectMonotonicReader, ramBytesUsed, METH_NOARGS),
            { NULL, NULL, 0, NULL }
          };

          static PyType_Slot PY_TYPE_SLOTS(DirectMonotonicReader)[] = {
            { Py_tp_methods, t_DirectMonotonicReader__methods_ },
            { Py_tp_init, (void *) abstract_init },
            { 0, NULL }
          };

          static PyType_Def *PY_TYPE_BASES(DirectMonotonicReader)[] = {
            &PY_TYPE_DEF(::org::apache::lucene::util::LongValues),
            NULL
          };

          DEFINE_TYPE(DirectMonotonicReader, t_DirectMonotonicReader, DirectMonotonicReader);

          void t_DirectMonotonicReader::install(PyObject *module)
          {
            installType(&PY_TYPE(DirectMonotonicReader), &PY_TYPE_DEF(DirectMonotonicReader), module, "DirectMonotonicReader", 0);
            PyObject_SetAttrString((PyObject *) PY_TYPE(DirectMonotonicReader), "Meta", make_descriptor(&PY_TYPE_DEF(DirectMonotonicReader$Meta)));
          }

          void t_DirectMonotonicReader::initialize(PyObject *module)
          {
            PyObject_SetAttrString((PyObject *) PY_TYPE(DirectMonotonicReader), "class_", make_descriptor(DirectMonotonicReader::initializeClass, 1));
            PyObject_SetAttrString((PyObject *) PY_TYPE(DirectMonotonicReader), "wrapfn_", make_descriptor(t_DirectMonotonicReader::wrap_jobject));
            PyObject_SetAttrString((PyObject *) PY_TYPE(DirectMonotonicReader), "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_DirectMonotonicReader_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, DirectMonotonicReader::initializeClass, 1)))
              return NULL;
            return t_DirectMonotonicReader::wrap_Object(DirectMonotonicReader(((t_DirectMonotonicReader *) arg)->object.this$));
          }
          static PyObject *t_DirectMonotonicReader_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, DirectMonotonicReader::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static PyObject *t_DirectMonotonicReader_binarySearch(t_DirectMonotonicReader *self, PyObject *args)
          {
            jlong a0;
            jlong a1;
            jlong a2;
            jlong result;

            if (!parseArgs(args, "JJJ", &a0, &a1, &a2))
            {
              OBJ_CALL(result = self->object.binarySearch(a0, a1, a2));
              return PyLong_FromLongLong((PY_LONG_LONG) result);
            }

            PyErr_SetArgsError((PyObject *) self, "binarySearch", args);
            return NULL;
          }

          static PyObject *t_DirectMonotonicReader_get(t_DirectMonotonicReader *self, PyObject *args)
          {
            jlong a0;
            jlong result;

            if (!parseArgs(args, "J", &a0))
            {
              OBJ_CALL(result = self->object.get(a0));
              return PyLong_FromLongLong((PY_LONG_LONG) result);
            }

            return callSuper(PY_TYPE(DirectMonotonicReader), (PyObject *) self, "get", args, 2);
          }

          static PyObject *t_DirectMonotonicReader_getInstance(PyTypeObject *type, PyObject *args)
          {
            ::org::apache::lucene::util::packed::DirectMonotonicReader$Meta a0((jobject) NULL);
            ::org::apache::lucene::store::RandomAccessInput a1((jobject) NULL);
            DirectMonotonicReader result((jobject) NULL);

            if (!parseArgs(args, "kk", ::org::apache::lucene::util::packed::DirectMonotonicReader$Meta::initializeClass, ::org::apache::lucene::store::RandomAccessInput::initializeClass, &a0, &a1))
            {
              OBJ_CALL(result = ::org::apache::lucene::util::packed::DirectMonotonicReader::getInstance(a0, a1));
              return t_DirectMonotonicReader::wrap_Object(result);
            }

            PyErr_SetArgsError(type, "getInstance", args);
            return NULL;
          }

          static PyObject *t_DirectMonotonicReader_loadMeta(PyTypeObject *type, PyObject *args)
          {
            ::org::apache::lucene::store::IndexInput a0((jobject) NULL);
            jlong a1;
            jint a2;
            ::org::apache::lucene::util::packed::DirectMonotonicReader$Meta result((jobject) NULL);

            if (!parseArgs(args, "kJI", ::org::apache::lucene::store::IndexInput::initializeClass, &a0, &a1, &a2))
            {
              OBJ_CALL(result = ::org::apache::lucene::util::packed::DirectMonotonicReader::loadMeta(a0, a1, a2));
              return ::org::apache::lucene::util::packed::t_DirectMonotonicReader$Meta::wrap_Object(result);
            }

            PyErr_SetArgsError(type, "loadMeta", args);
            return NULL;
          }

          static PyObject *t_DirectMonotonicReader_ramBytesUsed(t_DirectMonotonicReader *self)
          {
            jlong result;
            OBJ_CALL(result = self->object.ramBytesUsed());
            return PyLong_FromLongLong((PY_LONG_LONG) result);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/store/ByteArrayDataInput.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace store {

        ::java::lang::Class *ByteArrayDataInput::class$ = NULL;
        jmethodID *ByteArrayDataInput::mids$ = NULL;
        bool ByteArrayDataInput::live$ = false;

        jclass ByteArrayDataInput::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/store/ByteArrayDataInput");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_f2cc1bce94666404] = env->getMethodID(cls, "<init>", "()V");
            mids$[mid_init$_9ffdf271836656c4] = env->getMethodID(cls, "<init>", "([B)V");
            mids$[mid_init$_43fdd39c09bb2fad] = env->getMethodID(cls, "<init>", "([BII)V");
            mids$[mid_eof_8454bd5aa23fd11e] = env->getMethodID(cls, "eof", "()Z");
            mids$[mid_getPosition_9972fcc56b44e79d] = env->getMethodID(cls, "getPosition", "()I");
            mids$[mid_length_9972fcc56b44e79d] = env->getMethodID(cls, "length", "()I");
            mids$[mid_readByte_871cd52a74f26213] = env->getMethodID(cls, "readByte", "()B");
            mids$[mid_readBytes_43fdd39c09bb2fad] = env->getMethodID(cls, "readBytes", "([BII)V");
            mids$[mid_readInt_9972fcc56b44e79d] = env->getMethodID(cls, "readInt", "()I");
            mids$[mid_readLong_2e5ae9edcb9b072f] = env->getMethodID(cls, "readLong", "()J");
            mids$[mid_readShort_ec20af88366b851e] = env->getMethodID(cls, "readShort", "()S");
            mids$[mid_readVInt_9972fcc56b44e79d] = env->getMethodID(cls, "readVInt", "()I");
            mids$[mid_readVLong_2e5ae9edcb9b072f] = env->getMethodID(cls, "readVLong", "()J");
            mids$[mid_reset_9ffdf271836656c4] = env->getMethodID(cls, "reset", "([B)V");
            mids$[mid_reset_43fdd39c09bb2fad] = env->getMethodID(cls, "reset", "([BII)V");
            mids$[mid_rewind_f2cc1bce94666404] = env->getMethodID(cls, "rewind", "()V");
            mids$[mid_setPosition_040c4cd0390c5aff] = env->getMethodID(cls, "setPosition", "(I)V");
            mids$[mid_skipBytes_9c778c9bce6694df] = env->getMethodID(cls, "skipBytes", "(J)V");

            class$ = new ::java::lang::Class(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        ByteArrayDataInput::ByteArrayDataInput() : ::org::apache::lucene::store::DataInput(env->newObject(initializeClass, &mids$, mid_init$_f2cc1bce94666404)) {}

        ByteArrayDataInput::ByteArrayDataInput(const JArray< jbyte > & a0) : ::org::apache::lucene::store::DataInput(env->newObject(initializeClass, &mids$, mid_init$_9ffdf271836656c4, a0.this$)) {}

        ByteArrayDataInput::ByteArrayDataInput(const JArray< jbyte > & a0, jint a1, jint a2) : ::org::apache::lucene::store::DataInput(env->newObject(initializeClass, &mids$, mid_init$_43fdd39c09bb2fad, a0.this$, a1, a2)) {}

        jboolean ByteArrayDataInput::eof() const
        {
          return env->callBooleanMethod(this$, mids$[mid_eof_8454bd5aa23fd11e]);
        }

        jint ByteArrayDataInput::getPosition() const
        {
          return env->callIntMethod(this$, mids$[mid_getPosition_9972fcc56b44e79d]);
        }

        jint ByteArrayDataInput::length() const
        {
          return env->callIntMethod(this$, mids$[mid_length_9972fcc56b44e79d]);
        }

        jbyte ByteArrayDataInput::readByte() const
        {
          return env->callByteMethod(this$, mids$[mid_readByte_871cd52a74f26213]);
        }

        void ByteArrayDataInput::readBytes(const JArray< jbyte > & a0, jint a1, jint a2) const
        {
          env->callVoidMethod(this$, mids$[mid_readBytes_43fdd39c09bb2fad], a0.this$, a1, a2);
        }

        jint ByteArrayDataInput::readInt() const
        {
          return env->callIntMethod(this$, mids$[mid_readInt_9972fcc56b44e79d]);
        }

        jlong ByteArrayDataInput::readLong() const
        {
          return env->callLongMethod(this$, mids$[mid_readLong_2e5ae9edcb9b072f]);
        }

        jshort ByteArrayDataInput::readShort() const
        {
          return env->callShortMethod(this$, mids$[mid_readShort_ec20af88366b851e]);
        }

        jint ByteArrayDataInput::readVInt() const
        {
          return env->callIntMethod(this$, mids$[mid_readVInt_9972fcc56b44e79d]);
        }

        jlong ByteArrayDataInput::readVLong() const
        {
          return env->callLongMethod(this$, mids$[mid_readVLong_2e5ae9edcb9b072f]);
        }

        void ByteArrayDataInput::reset(const JArray< jbyte > & a0) const
        {
          env->callVoidMethod(this$, mids$[mid_reset_9ffdf271836656c4], a0.this$);
        }

        void ByteArrayDataInput::reset(const JArray< jbyte > & a0, jint a1, jint a2) const
        {
          env->callVoidMethod(this$, mids$[mid_reset_43fdd39c09bb2fad], a0.this$, a1, a2);
        }

        void ByteArrayDataInput::rewind() const
        {
          env->callVoidMethod(this$, mids$[mid_rewind_f2cc1bce94666404]);
        }

        void ByteArrayDataInput::setPosition(jint a0) const
        {
          env->callVoidMethod(this$, mids$[mid_setPosition_040c4cd0390c5aff], a0);
        }

        void ByteArrayDataInput::skipBytes(jlong a0) const
        {
          env->callVoidMethod(this$, mids$[mid_skipBytes_9c778c9bce6694df], a0);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace store {
        static PyObject *t_ByteArrayDataInput_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_ByteArrayDataInput_instance_(PyTypeObject *type, PyObject *arg);
        static int t_ByteArrayDataInput_init_(t_ByteArrayDataInput *self, PyObject *args, PyObject *kwds);
        static PyObject *t_ByteArrayDataInput_eof(t_ByteArrayDataInput *self);
        static PyObject *t_ByteArrayDataInput_getPosition(t_ByteArrayDataInput *self);
        static PyObject *t_ByteArrayDataInput_length(t_ByteArrayDataInput *self);
        static PyObject *t_ByteArrayDataInput_readByte(t_ByteArrayDataInput *self, PyObject *args);
        static PyObject *t_ByteArrayDataInput_readBytes(t_ByteArrayDataInput *self, PyObject *args);
        static PyObject *t_ByteArrayDataInput_readInt(t_ByteArrayDataInput *self, PyObject *args);
        static PyObject *t_ByteArrayDataInput_readLong(t_ByteArrayDataInput *self, PyObject *args);
        static PyObject *t_ByteArrayDataInput_readShort(t_ByteArrayDataInput *self, PyObject *args);
        static PyObject *t_ByteArrayDataInput_readVInt(t_ByteArrayDataInput *self, PyObject *args);
        static PyObject *t_ByteArrayDataInput_readVLong(t_ByteArrayDataInput *self, PyObject *args);
        static PyObject *t_ByteArrayDataInput_reset(t_ByteArrayDataInput *self, PyObject *args);
        static PyObject *t_ByteArrayDataInput_rewind(t_ByteArrayDataInput *self);
        static PyObject *t_ByteArrayDataInput_setPosition(t_ByteArrayDataInput *self, PyObject *arg);
        static PyObject *t_ByteArrayDataInput_skipBytes(t_ByteArrayDataInput *self, PyObject *args);
        static PyObject *t_ByteArrayDataInput_get__position(t_ByteArrayDataInput *self, void *data);
        static int t_ByteArrayDataInput_set__position(t_ByteArrayDataInput *self, PyObject *arg, void *data);
        static PyGetSetDef t_ByteArrayDataInput__fields_[] = {
          DECLARE_GETSET_FIELD(t_ByteArrayDataInput, position),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_ByteArrayDataInput__methods_[] = {
          DECLARE_METHOD(t_ByteArrayDataInput, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_ByteArrayDataInput, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_ByteArrayDataInput, eof, METH_NOARGS),
          DECLARE_METHOD(t_ByteArrayDataInput, getPosition, METH_NOARGS),
          DECLARE_METHOD(t_ByteArrayDataInput, length, METH_NOARGS),
          DECLARE_METHOD(t_ByteArrayDataInput, readByte, METH_VARARGS),
          DECLARE_METHOD(t_ByteArrayDataInput, readBytes, METH_VARARGS),
          DECLARE_METHOD(t_ByteArrayDataInput, readInt, METH_VARARGS),
          DECLARE_METHOD(t_ByteArrayDataInput, readLong, METH_VARARGS),
          DECLARE_METHOD(t_ByteArrayDataInput, readShort, METH_VARARGS),
          DECLARE_METHOD(t_ByteArrayDataInput, readVInt, METH_VARARGS),
          DECLARE_METHOD(t_ByteArrayDataInput, readVLong, METH_VARARGS),
          DECLARE_METHOD(t_ByteArrayDataInput, reset, METH_VARARGS),
          DECLARE_METHOD(t_ByteArrayDataInput, rewind, METH_NOARGS),
          DECLARE_METHOD(t_ByteArrayDataInput, setPosition, METH_O),
          DECLARE_METHOD(t_ByteArrayDataInput, skipBytes, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        static PyType_Slot PY_TYPE_SLOTS(ByteArrayDataInput)[] = {
          { Py_tp_methods, t_ByteArrayDataInput__methods_ },
          { Py_tp_init, (void *) t_ByteArrayDataInput_init_ },
          { Py_tp_getset, t_ByteArrayDataInput__fields_ },
          { 0, NULL }
        };

        static PyType_Def *PY_TYPE_BASES(ByteArrayDataInput)[] = {
          &PY_TYPE_DEF(::org::apache::lucene::store::DataInput),
          NULL
        };

        DEFINE_TYPE(ByteArrayDataInput, t_ByteArrayDataInput, ByteArrayDataInput);

        void t_ByteArrayDataInput::install(PyObject *module)
        {
          installType(&PY_TYPE(ByteArrayDataInput), &PY_TYPE_DEF(ByteArrayDataInput), module, "ByteArrayDataInput", 0);
        }

        void t_ByteArrayDataInput::initialize(PyObject *module)
        {
          PyObject_SetAttrString((PyObject *) PY_TYPE(ByteArrayDataInput), "class_", make_descriptor(ByteArrayDataInput::initializeClass, 1));
          PyObject_SetAttrString((PyObject *) PY_TYPE(ByteArrayDataInput), "wrapfn_", make_descriptor(t_ByteArrayDataInput::wrap_jobject));
          PyObject_SetAttrString((PyObject *) PY_TYPE(ByteArrayDataInput), "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_ByteArrayDataInput_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, ByteArrayDataInput::initializeClass, 1)))
            return NULL;
          return t_ByteArrayDataInput::wrap_Object(ByteArrayDataInput(((t_ByteArrayDataInput *) arg)->object.this$));
        }
        static PyObject *t_ByteArrayDataInput_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, ByteArrayDataInput::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_ByteArrayDataInput_init_(t_ByteArrayDataInput *self, PyObject *args, PyObject *kwds)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 0:
            {
              ByteArrayDataInput object((jobject) NULL);

              INT_CALL(object = ByteArrayDataInput());
              self->object = object;
              break;
            }
           case 1:
            {
              JArray< jbyte > a0((jobject) NULL);
              ByteArrayDataInput object((jobject) NULL);

              if (!parseArgs(args, "[B", &a0))
              {
                INT_CALL(object = ByteArrayDataInput(a0));
                self->object = object;
                break;
              }
            }
            goto err;
           case 3:
            {
              JArray< jbyte > a0((jobject) NULL);
              jint a1;
              jint a2;
              ByteArrayDataInput object((jobject) NULL);

              if (!parseArgs(args, "[BII", &a0, &a1, &a2))
              {
                INT_CALL(object = ByteArrayDataInput(a0, a1, a2));
                self->object = object;
                break;
              }
            }
           default:
           err:
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }

        static PyObject *t_ByteArrayDataInput_eof(t_ByteArrayDataInput *self)
        {
          jboolean result;
          OBJ_CALL(result = self->object.eof());
          Py_RETURN_BOOL(result);
        }

        static PyObject *t_ByteArrayDataInput_getPosition(t_ByteArrayDataInput *self)
        {
          jint result;
          OBJ_CALL(result = self->object.getPosition());
          return PyLong_FromLong((long) result);
        }

        static PyObject *t_ByteArrayDataInput_length(t_ByteArrayDataInput *self)
        {
          jint result;
          OBJ_CALL(result = self->object.length());
          return PyLong_FromLong((long) result);
        }

        static PyObject *t_ByteArrayDataInput_readByte(t_ByteArrayDataInput *self, PyObject *args)
        {
          jbyte result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.readByte());
            return PyLong_FromLong((long) result);
          }

          return callSuper(PY_TYPE(ByteArrayDataInput), (PyObject *) self, "readByte", args, 2);
        }

        static PyObject *t_ByteArrayDataInput_readBytes(t_ByteArrayDataInput *self, PyObject *args)
        {
          JArray< jbyte > a0((jobject) NULL);
          jint a1;
          jint a2;

          if (!parseArgs(args, "[BII", &a0, &a1, &a2))
          {
            OBJ_CALL(self->object.readBytes(a0, a1, a2));
            Py_RETURN_NONE;
          }

          return callSuper(PY_TYPE(ByteArrayDataInput), (PyObject *) self, "readBytes", args, 2);
        }

        static PyObject *t_ByteArrayDataInput_readInt(t_ByteArrayDataInput *self, PyObject *args)
        {
          jint result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.readInt());
            return PyLong_FromLong((long) result);
          }

          return callSuper(PY_TYPE(ByteArrayDataInput), (PyObject *) self, "readInt", args, 2);
        }

        static PyObject *t_ByteArrayDataInput_readLong(t_ByteArrayDataInput *self, PyObject *args)
        {
          jlong result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.readLong());
            return PyLong_FromLongLong((PY_LONG_LONG) result);
          }

          return callSuper(PY_TYPE(ByteArrayDataInput), (PyObject *) self, "readLong", args, 2);
        }

        static PyObject *t_ByteArrayDataInput_readShort(t_ByteArrayDataInput *self, PyObject *args)
        {
          jshort result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.readShort());
            return PyLong_FromLong((long) result);
          }

          return callSuper(PY_TYPE(ByteArrayDataInput), (PyObject *) self, "readShort", args, 2);
        }

        static PyObject *t_ByteArrayDataInput_readVInt(t_ByteArrayDataInput *self, PyObject *args)
        {
          jint result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.readVInt());
            return PyLong_FromLong((long) result);
          }

          return callSuper(PY_TYPE(ByteArrayDataInput), (PyObject *) self, "readVInt", args, 2);
        }

        static PyObject *t_ByteArrayDataInput_readVLong(t_ByteArrayDataInput *self, PyObject *args)
        {
          jlong result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.readVLong());
            return PyLong_FromLongLong((PY_LONG_LONG) result);
          }

          return callSuper(PY_TYPE(ByteArrayDataInput), (PyObject *) self, "readVLong", args, 2);
        }

        static PyObject *t_ByteArrayDataInput_reset(t_ByteArrayDataInput *self, PyObject *args)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 1:
            {
              JArray< jbyte > a0((jobject) NULL);

              if (!parseArgs(args, "[B", &a0))
              {
                OBJ_CALL(self->object.reset(a0));
                Py_RETURN_NONE;
              }
            }
            break;
           case 3:
            {
              JArray< jbyte > a0((jobject) NULL);
              jint a1;
              jint a2;

              if (!parseArgs(args, "[BII", &a0, &a1, &a2))
              {
                OBJ_CALL(self->object.reset(a0, a1, a2));
                Py_RETURN_NONE;
              }
            }
          }

          PyErr_SetArgsError((PyObject *) self, "reset", args);
          return NULL;
        }

        static PyObject *t_ByteArrayDataInput_rewind(t_ByteArrayDataInput *self)
        {
          OBJ_CALL(self->object.rewind());
          Py_RETURN_NONE;
        }

        static PyObject *t_ByteArrayDataInput_setPosition(t_ByteArrayDataInput *self, PyObject *arg)
        {
          jint a0;

          if (!parseArg(arg, "I", &a0))
          {
            OBJ_CALL(self->object.setPosition(a0));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "setPosition", arg);
          return NULL;
        }

        static PyObject *t_ByteArrayDataInput_skipBytes(t_ByteArrayDataInput *self, PyObject *args)
        {
          jlong a0;

          if (!parseArgs(args, "J", &a0))
          {
            OBJ_CALL(self->object.skipBytes(a0));
            Py_RETURN_NONE;
          }

          return callSuper(PY_TYPE(ByteArrayDataInput), (PyObject *) self, "skipBytes", args, 2);
        }

        static PyObject *t_ByteArrayDataInput_get__position(t_ByteArrayDataInput *self, void *data)
        {
          jint value;
          OBJ_CALL(value = self->object.getPosition());
          return PyLong_FromLong((long) value);
        }
        static int t_ByteArrayDataInput_set__position(t_ByteArrayDataInput *self, PyObject *arg, void *data)
        {
          {
            jint value;
            if (!parseArg(arg, "I", &value))
            {
              INT_CALL(self->object.setPosition(value));
              return 0;
            }
          }
          PyErr_SetArgsError((PyObject *) self, "position", arg);
          return -1;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/util/packed/PackedInts$Decoder.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        namespace packed {

          ::java::lang::Class *PackedInts$Decoder::class$ = NULL;
          jmethodID *PackedInts$Decoder::mids$ = NULL;
          bool PackedInts$Decoder::live$ = false;

          jclass PackedInts$Decoder::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/util/packed/PackedInts$Decoder");

              mids$ = new jmethodID[max_mid];
              mids$[mid_byteBlockCount_9972fcc56b44e79d] = env->getMethodID(cls, "byteBlockCount", "()I");
              mids$[mid_byteValueCount_9972fcc56b44e79d] = env->getMethodID(cls, "byteValueCount", "()I");
              mids$[mid_decode_e55bf307c8169fdd] = env->getMethodID(cls, "decode", "([BI[III)V");
              mids$[mid_decode_183e8ac12ca59534] = env->getMethodID(cls, "decode", "([BI[JII)V");
              mids$[mid_decode_eb4e50a87fbb3426] = env->getMethodID(cls, "decode", "([JI[III)V");
              mids$[mid_decode_0309f1a5ccc713cf] = env->getMethodID(cls, "decode", "([JI[JII)V");
              mids$[mid_longBlockCount_9972fcc56b44e79d] = env->getMethodID(cls, "longBlockCount", "()I");
              mids$[mid_longValueCount_9972fcc56b44e79d] = env->getMethodID(cls, "longValueCount", "()I");

              class$ = new ::java::lang::Class(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          jint PackedInts$Decoder::byteBlockCount() const
          {
            return env->callIntMethod(this$, mids$[mid_byteBlockCount_9972fcc56b44e79d]);
          }

          jint PackedInts$Decoder::byteValueCount() const
          {
            return env->callIntMethod(this$, mids$[mid_byteValueCount_9972fcc56b44e79d]);
          }

          void PackedInts$Decoder::decode(const JArray< jbyte > & a0, jint a1, const JArray< jint > & a2, jint a3, jint a4) const
          {
            env->callVoidMethod(this$, mids$[mid_decode_e55bf307c8169fdd], a0.this$, a1, a2.this$, a3, a4);
          }

          void PackedInts$Decoder::decode(const JArray< jbyte > & a0, jint a1, const JArray< jlong > & a2, jint a3, jint a4) const
          {
            env->callVoidMethod(this$, mids$[mid_decode_183e8ac12ca59534], a0.this$, a1, a2.this$, a3, a4);
          }

          void PackedInts$Decoder::decode(const JArray< jlong > & a0, jint a1, const JArray< jint > & a2, jint a3, jint a4) const
          {
            env->callVoidMethod(this$, mids$[mid_decode_eb4e50a87fbb3426], a0.this$, a1, a2.this$, a3, a4);
          }

          void PackedInts$Decoder::decode(const JArray< jlong > & a0, jint a1, const JArray< jlong > & a2, jint a3, jint a4) const
          {
            env->callVoidMethod(this$, mids$[mid_decode_0309f1a5ccc713cf], a0.this$, a1, a2.this$, a3, a4);
          }

          jint PackedInts$Decoder::longBlockCount() const
          {
            return env->callIntMethod(this$, mids$[mid_longBlockCount_9972fcc56b44e79d]);
          }

          jint PackedInts$Decoder::longValueCount() const
          {
            return env->callIntMethod(this$, mids$[mid_longValueCount_9972fcc56b44e79d]);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        namespace packed {
          static PyObject *t_PackedInts$Decoder_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_PackedInts$Decoder_instance_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_PackedInts$Decoder_byteBlockCount(t_PackedInts$Decoder *self);
          static PyObject *t_PackedInts$Decoder_byteValueCount(t_PackedInts$Decoder *self);
          static PyObject *t_PackedInts$Decoder_decode(t_PackedInts$Decoder *self, PyObject *args);
          static PyObject *t_PackedInts$Decoder_longBlockCount(t_PackedInts$Decoder *self);
          static PyObject *t_PackedInts$Decoder_longValueCount(t_PackedInts$Decoder *self);

          static PyMethodDef t_PackedInts$Decoder__methods_[] = {
            DECLARE_METHOD(t_PackedInts$Decoder, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_PackedInts$Decoder, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_PackedInts$Decoder, byteBlockCount, METH_NOARGS),
            DECLARE_METHOD(t_PackedInts$Decoder, byteValueCount, METH_NOARGS),
            DECLARE_METHOD(t_PackedInts$Decoder, decode, METH_VARARGS),
            DECLARE_METHOD(t_PackedInts$Decoder, longBlockCount, METH_NOARGS),
            DECLARE_METHOD(t_PackedInts$Decoder, longValueCount, METH_NOARGS),
            { NULL, NULL, 0, NULL }
          };

          static PyType_Slot PY_TYPE_SLOTS(PackedInts$Decoder)[] = {
            { Py_tp_methods, t_PackedInts$Decoder__methods_ },
            { Py_tp_init, (void *) abstract_init },
            { 0, NULL }
          };

          static PyType_Def *PY_TYPE_BASES(PackedInts$Decoder)[] = {
            &PY_TYPE_DEF(::java::lang::Object),
            NULL
          };

          DEFINE_TYPE(PackedInts$Decoder, t_PackedInts$Decoder, PackedInts$Decoder);

          void t_PackedInts$Decoder::install(PyObject *module)
          {
            installType(&PY_TYPE(PackedInts$Decoder), &PY_TYPE_DEF(PackedInts$Decoder), module, "PackedInts$Decoder", 0);
          }

          void t_PackedInts$Decoder::initialize(PyObject *module)
          {
            PyObject_SetAttrString((PyObject *) PY_TYPE(PackedInts$Decoder), "class_", make_descriptor(PackedInts$Decoder::initializeClass, 1));
            PyObject_SetAttrString((PyObject *) PY_TYPE(PackedInts$Decoder), "wrapfn_", make_descriptor(t_PackedInts$Decoder::wrap_jobject));
            PyObject_SetAttrString((PyObject *) PY_TYPE(PackedInts$Decoder), "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_PackedInts$Decoder_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, PackedInts$Decoder::initializeClass, 1)))
              return NULL;
            return t_PackedInts$Decoder::wrap_Object(PackedInts$Decoder(((t_PackedInts$Decoder *) arg)->object.this$));
          }
          static PyObject *t_PackedInts$Decoder_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, PackedInts$Decoder::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static PyObject *t_PackedInts$Decoder_byteBlockCount(t_PackedInts$Decoder *self)
          {
            jint result;
            OBJ_CALL(result = self->object.byteBlockCount());
            return PyLong_FromLong((long) result);
          }

          static PyObject *t_PackedInts$Decoder_byteValueCount(t_PackedInts$Decoder *self)
          {
            jint result;
            OBJ_CALL(result = self->object.byteValueCount());
            return PyLong_FromLong((long) result);
          }

          static PyObject *t_PackedInts$Decoder_decode(t_PackedInts$Decoder *self, PyObject *args)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 5:
              {
                JArray< jbyte > a0((jobject) NULL);
                jint a1;
                JArray< jint > a2((jobject) NULL);
                jint a3;
                jint a4;

                if (!parseArgs(args, "[BI[III", &a0, &a1, &a2, &a3, &a4))
                {
                  OBJ_CALL(self->object.decode(a0, a1, a2, a3, a4));
                  Py_RETURN_NONE;
                }
              }
              {
                JArray< jlong > a0((jobject) NULL);
                jint a1;
                JArray< jint > a2((jobject) NULL);
                jint a3;
                jint a4;

                if (!parseArgs(args, "[JI[III", &a0, &a1, &a2, &a3, &a4))
                {
                  OBJ_CALL(self->object.decode(a0, a1, a2, a3, a4));
                  Py_RETURN_NONE;
                }
              }
              {
                JArray< jbyte > a0((jobject) NULL);
                jint a1;
                JArray< jlong > a2((jobject) NULL);
                jint a3;
                jint a4;

                if (!parseArgs(args, "[BI[JII", &a0, &a1, &a2, &a3, &a4))
                {
                  OBJ_CALL(self->object.decode(a0, a1, a2, a3, a4));
                  Py_RETURN_NONE;
                }
              }
              {
                JArray< jlong > a0((jobject) NULL);
                jint a1;
                JArray< jlong > a2((jobject) NULL);
                jint a3;
                jint a4;

                if (!parseArgs(args, "[JI[JII", &a0, &a1, &a2, &a3, &a4))
                {
                  OBJ_CALL(self->object.decode(a0, a1, a2, a3, a4));
                  Py_RETURN_NONE;
                }
              }
            }

            PyErr_SetArgsError((PyObject *) self, "decode", args);
            return NULL;
          }

          static PyObject *t_PackedInts$Decoder_longBlockCount(t_PackedInts$Decoder *self)
          {
            jint result;
            OBJ_CALL(result = self->object.longBlockCount());
            return PyLong_FromLong((long) result);
          }

          static PyObject *t_PackedInts$Decoder_longValueCount(t_PackedInts$Decoder *self)
          {
            jint result;
            OBJ_CALL(result = self->object.longValueCount());
            return PyLong_FromLong((long) result);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/geo/SimpleWKTShapeParser.h"
#include "java/lang/Class.h"
#include "java/lang/String.h"
#include "org/apache/lucene/geo/SimpleWKTShapeParser$ShapeType.h"
#include "java/io/IOException.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace geo {

        ::java::lang::Class *SimpleWKTShapeParser::class$ = NULL;
        jmethodID *SimpleWKTShapeParser::mids$ = NULL;
        bool SimpleWKTShapeParser::live$ = false;
        ::java::lang::String *SimpleWKTShapeParser::COMMA = NULL;
        ::java::lang::String *SimpleWKTShapeParser::EMPTY = NULL;
        ::java::lang::String *SimpleWKTShapeParser::LPAREN = NULL;
        ::java::lang::String *SimpleWKTShapeParser::NAN$ = NULL;
        ::java::lang::String *SimpleWKTShapeParser::RPAREN = NULL;
        ::java::lang::String *SimpleWKTShapeParser::SPACE = NULL;

        jclass SimpleWKTShapeParser::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/geo/SimpleWKTShapeParser");

            mids$ = new jmethodID[max_mid];
            mids$[mid_parse_c0a3c3394484d296] = env->getStaticMethodID(cls, "parse", "(Ljava/lang/String;)Ljava/lang/Object;");
            mids$[mid_parseExpectedType_f05287299b13a83e] = env->getStaticMethodID(cls, "parseExpectedType", "(Ljava/lang/String;Lorg/apache/lucene/geo/SimpleWKTShapeParser$ShapeType;)Ljava/lang/Object;");

            class$ = new ::java::lang::Class(cls);
            cls = (jclass) class$->this$;

            COMMA = new ::java::lang::String(env->getStaticObjectField(cls, "COMMA", "Ljava/lang/String;"));
            EMPTY = new ::java::lang::String(env->getStaticObjectField(cls, "EMPTY", "Ljava/lang/String;"));
            LPAREN = new ::java::lang::String(env->getStaticObjectField(cls, "LPAREN", "Ljava/lang/String;"));
            NAN$ = new ::java::lang::String(env->getStaticObjectField(cls, "NAN", "Ljava/lang/String;"));
            RPAREN = new ::java::lang::String(env->getStaticObjectField(cls, "RPAREN", "Ljava/lang/String;"));
            SPACE = new ::java::lang::String(env->getStaticObjectField(cls, "SPACE", "Ljava/lang/String;"));
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        ::java::lang::Object SimpleWKTShapeParser::parse(const ::java::lang::String & a0)
        {
          jclass cls = env->getClass(initializeClass);
          return ::java::lang::Object(env->callStaticObjectMethod(cls, mids$[mid_parse_c0a3c3394484d296], a0.this$));
        }

        ::java::lang::Object SimpleWKTShapeParser::parseExpectedType(const ::java::lang::String & a0, const ::org::apache::lucene::geo::SimpleWKTShapeParser$ShapeType & a1)
        {
          jclass cls = env->getClass(initializeClass);
          return ::java::lang::Object(env->callStaticObjectMethod(cls, mids$[mid_parseExpectedType_f05287299b13a83e], a0.this$, a1.this$));
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace geo {
        static PyObject *t_SimpleWKTShapeParser_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_SimpleWKTShapeParser_instance_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_SimpleWKTShapeParser_parse(PyTypeObject *type, PyObject *arg);
        static PyObject *t_SimpleWKTShapeParser_parseExpectedType(PyTypeObject *type, PyObject *args);

        static PyMethodDef t_SimpleWKTShapeParser__methods_[] = {
          DECLARE_METHOD(t_SimpleWKTShapeParser, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_SimpleWKTShapeParser, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_SimpleWKTShapeParser, parse, METH_O | METH_CLASS),
          DECLARE_METHOD(t_SimpleWKTShapeParser, parseExpectedType, METH_VARARGS | METH_CLASS),
          { NULL, NULL, 0, NULL }
        };

        static PyType_Slot PY_TYPE_SLOTS(SimpleWKTShapeParser)[] = {
          { Py_tp_methods, t_SimpleWKTShapeParser__methods_ },
          { Py_tp_init, (void *) abstract_init },
          { 0, NULL }
        };

        static PyType_Def *PY_TYPE_BASES(SimpleWKTShapeParser)[] = {
          &PY_TYPE_DEF(::java::lang::Object),
          NULL
        };

        DEFINE_TYPE(SimpleWKTShapeParser, t_SimpleWKTShapeParser, SimpleWKTShapeParser);

        void t_SimpleWKTShapeParser::install(PyObject *module)
        {
          installType(&PY_TYPE(SimpleWKTShapeParser), &PY_TYPE_DEF(SimpleWKTShapeParser), module, "SimpleWKTShapeParser", 0);
          PyObject_SetAttrString((PyObject *) PY_TYPE(SimpleWKTShapeParser), "ShapeType", make_descriptor(&PY_TYPE_DEF(SimpleWKTShapeParser$ShapeType)));
        }

        void t_SimpleWKTShapeParser::initialize(PyObject *module)
        {
          PyObject_SetAttrString((PyObject *) PY_TYPE(SimpleWKTShapeParser), "class_", make_descriptor(SimpleWKTShapeParser::initializeClass, 1));
          PyObject_SetAttrString((PyObject *) PY_TYPE(SimpleWKTShapeParser), "wrapfn_", make_descriptor(t_SimpleWKTShapeParser::wrap_jobject));
          PyObject_SetAttrString((PyObject *) PY_TYPE(SimpleWKTShapeParser), "boxfn_", make_descriptor(boxObject));
          env->getClass(SimpleWKTShapeParser::initializeClass);
          PyObject_SetAttrString((PyObject *) PY_TYPE(SimpleWKTShapeParser), "COMMA", make_descriptor(j2p(*SimpleWKTShapeParser::COMMA)));
          PyObject_SetAttrString((PyObject *) PY_TYPE(SimpleWKTShapeParser), "EMPTY", make_descriptor(j2p(*SimpleWKTShapeParser::EMPTY)));
          PyObject_SetAttrString((PyObject *) PY_TYPE(SimpleWKTShapeParser), "LPAREN", make_descriptor(j2p(*SimpleWKTShapeParser::LPAREN)));
          PyObject_SetAttrString((PyObject *) PY_TYPE(SimpleWKTShapeParser), "NAN", make_descriptor(j2p(*SimpleWKTShapeParser::NAN$)));
          PyObject_SetAttrString((PyObject *) PY_TYPE(SimpleWKTShapeParser), "RPAREN", make_descriptor(j2p(*SimpleWKTShapeParser::RPAREN)));
          PyObject_SetAttrString((PyObject *) PY_TYPE(SimpleWKTShapeParser), "SPACE", make_descriptor(j2p(*SimpleWKTShapeParser::SPACE)));
        }

        static PyObject *t_SimpleWKTShapeParser_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, SimpleWKTShapeParser::initializeClass, 1)))
            return NULL;
          return t_SimpleWKTShapeParser::wrap_Object(SimpleWKTShapeParser(((t_SimpleWKTShapeParser *) arg)->object.this$));
        }
        static PyObject *t_SimpleWKTShapeParser_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, SimpleWKTShapeParser::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static PyObject *t_SimpleWKTShapeParser_parse(PyTypeObject *type, PyObject *arg)
        {
          ::java::lang::String a0((jobject) NULL);
          ::java::lang::Object result((jobject) NULL);

          if (!parseArg(arg, "s", &a0))
          {
            OBJ_CALL(result = ::org::apache::lucene::geo::SimpleWKTShapeParser::parse(a0));
            return ::java::lang::t_Object::wrap_Object(result);
          }

          PyErr_SetArgsError(type, "parse", arg);
          return NULL;
        }

        static PyObject *t_SimpleWKTShapeParser_parseExpectedType(PyTypeObject *type, PyObject *args)
        {
          ::java::lang::String a0((jobject) NULL);
          ::org::apache::lucene::geo::SimpleWKTShapeParser$ShapeType a1((jobject) NULL);
          PyTypeObject **p1;
          ::java::lang::Object result((jobject) NULL);

          if (!parseArgs(args, "sK", ::org::apache::lucene::geo::SimpleWKTShapeParser$ShapeType::initializeClass, &a0, &a1, &p1, ::org::apache::lucene::geo::t_SimpleWKTShapeParser$ShapeType::parameters_))
          {
            OBJ_CALL(result = ::org::apache::lucene::geo::SimpleWKTShapeParser::parseExpectedType(a0, a1));
            return ::java::lang::t_Object::wrap_Object(result);
          }

          PyErr_SetArgsError(type, "parseExpectedType", args);
          return NULL;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/sr/SerbianNormalizationRegularFilter.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/analysis/TokenStream.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace sr {

          ::java::lang::Class *SerbianNormalizationRegularFilter::class$ = NULL;
          jmethodID *SerbianNormalizationRegularFilter::mids$ = NULL;
          bool SerbianNormalizationRegularFilter::live$ = false;

          jclass SerbianNormalizationRegularFilter::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/sr/SerbianNormalizationRegularFilter");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_c26756868a754f4e] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/analysis/TokenStream;)V");
              mids$[mid_incrementToken_8454bd5aa23fd11e] = env->getMethodID(cls, "incrementToken", "()Z");

              class$ = new ::java::lang::Class(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          SerbianNormalizationRegularFilter::SerbianNormalizationRegularFilter(const ::org::apache::lucene::analysis::TokenStream & a0) : ::org::apache::lucene::analysis::TokenFilter(env->newObject(initializeClass, &mids$, mid_init$_c26756868a754f4e, a0.this$)) {}

          jboolean SerbianNormalizationRegularFilter::incrementToken() const
          {
            return env->callBooleanMethod(this$, mids$[mid_incrementToken_8454bd5aa23fd11e]);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace sr {
          static PyObject *t_SerbianNormalizationRegularFilter_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_SerbianNormalizationRegularFilter_instance_(PyTypeObject *type, PyObject *arg);
          static int t_SerbianNormalizationRegularFilter_init_(t_SerbianNormalizationRegularFilter *self, PyObject *args, PyObject *kwds);
          static PyObject *t_SerbianNormalizationRegularFilter_incrementToken(t_SerbianNormalizationRegularFilter *self, PyObject *args);

          static PyMethodDef t_SerbianNormalizationRegularFilter__methods_[] = {
            DECLARE_METHOD(t_SerbianNormalizationRegularFilter, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_SerbianNormalizationRegularFilter, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_SerbianNormalizationRegularFilter, incrementToken, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          static PyType_Slot PY_TYPE_SLOTS(SerbianNormalizationRegularFilter)[] = {
            { Py_tp_methods, t_SerbianNormalizationRegularFilter__methods_ },
            { Py_tp_init, (void *) t_SerbianNormalizationRegularFilter_init_ },
            { 0, NULL }
          };

          static PyType_Def *PY_TYPE_BASES(SerbianNormalizationRegularFilter)[] = {
            &PY_TYPE_DEF(::org::apache::lucene::analysis::TokenFilter),
            NULL
          };

          DEFINE_TYPE(SerbianNormalizationRegularFilter, t_SerbianNormalizationRegularFilter, SerbianNormalizationRegularFilter);

          void t_SerbianNormalizationRegularFilter::install(PyObject *module)
          {
            installType(&PY_TYPE(SerbianNormalizationRegularFilter), &PY_TYPE_DEF(SerbianNormalizationRegularFilter), module, "SerbianNormalizationRegularFilter", 0);
          }

          void t_SerbianNormalizationRegularFilter::initialize(PyObject *module)
          {
            PyObject_SetAttrString((PyObject *) PY_TYPE(SerbianNormalizationRegularFilter), "class_", make_descriptor(SerbianNormalizationRegularFilter::initializeClass, 1));
            PyObject_SetAttrString((PyObject *) PY_TYPE(SerbianNormalizationRegularFilter), "wrapfn_", make_descriptor(t_SerbianNormalizationRegularFilter::wrap_jobject));
            PyObject_SetAttrString((PyObject *) PY_TYPE(SerbianNormalizationRegularFilter), "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_SerbianNormalizationRegularFilter_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, SerbianNormalizationRegularFilter::initializeClass, 1)))
              return NULL;
            return t_SerbianNormalizationRegularFilter::wrap_Object(SerbianNormalizationRegularFilter(((t_SerbianNormalizationRegularFilter *) arg)->object.this$));
          }
          static PyObject *t_SerbianNormalizationRegularFilter_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, SerbianNormalizationRegularFilter::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_SerbianNormalizationRegularFilter_init_(t_SerbianNormalizationRegularFilter *self, PyObject *args, PyObject *kwds)
          {
            ::org::apache::lucene::analysis::TokenStream a0((jobject) NULL);
            SerbianNormalizationRegularFilter object((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::analysis::TokenStream::initializeClass, &a0))
            {
              INT_CALL(object = SerbianNormalizationRegularFilter(a0));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_SerbianNormalizationRegularFilter_incrementToken(t_SerbianNormalizationRegularFilter *self, PyObject *args)
          {
            jboolean result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.incrementToken());
              Py_RETURN_BOOL(result);
            }

            return callSuper(PY_TYPE(SerbianNormalizationRegularFilter), (PyObject *) self, "incrementToken", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/miscellaneous/ScandinavianNormalizationFilter.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/analysis/TokenStream.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace miscellaneous {

          ::java::lang::Class *ScandinavianNormalizationFilter::class$ = NULL;
          jmethodID *ScandinavianNormalizationFilter::mids$ = NULL;
          bool ScandinavianNormalizationFilter::live$ = false;

          jclass ScandinavianNormalizationFilter::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/miscellaneous/ScandinavianNormalizationFilter");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_c26756868a754f4e] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/analysis/TokenStream;)V");
              mids$[mid_incrementToken_8454bd5aa23fd11e] = env->getMethodID(cls, "incrementToken", "()Z");

              class$ = new ::java::lang::Class(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          ScandinavianNormalizationFilter::ScandinavianNormalizationFilter(const ::org::apache::lucene::analysis::TokenStream & a0) : ::org::apache::lucene::analysis::TokenFilter(env->newObject(initializeClass, &mids$, mid_init$_c26756868a754f4e, a0.this$)) {}

          jboolean ScandinavianNormalizationFilter::incrementToken() const
          {
            return env->callBooleanMethod(this$, mids$[mid_incrementToken_8454bd5aa23fd11e]);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace miscellaneous {
          static PyObject *t_ScandinavianNormalizationFilter_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_ScandinavianNormalizationFilter_instance_(PyTypeObject *type, PyObject *arg);
          static int t_ScandinavianNormalizationFilter_init_(t_ScandinavianNormalizationFilter *self, PyObject *args, PyObject *kwds);
          static PyObject *t_ScandinavianNormalizationFilter_incrementToken(t_ScandinavianNormalizationFilter *self, PyObject *args);

          static PyMethodDef t_ScandinavianNormalizationFilter__methods_[] = {
            DECLARE_METHOD(t_ScandinavianNormalizationFilter, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_ScandinavianNormalizationFilter, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_ScandinavianNormalizationFilter, incrementToken, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          static PyType_Slot PY_TYPE_SLOTS(ScandinavianNormalizationFilter)[] = {
            { Py_tp_methods, t_ScandinavianNormalizationFilter__methods_ },
            { Py_tp_init, (void *) t_ScandinavianNormalizationFilter_init_ },
            { 0, NULL }
          };

          static PyType_Def *PY_TYPE_BASES(ScandinavianNormalizationFilter)[] = {
            &PY_TYPE_DEF(::org::apache::lucene::analysis::TokenFilter),
            NULL
          };

          DEFINE_TYPE(ScandinavianNormalizationFilter, t_ScandinavianNormalizationFilter, ScandinavianNormalizationFilter);

          void t_ScandinavianNormalizationFilter::install(PyObject *module)
          {
            installType(&PY_TYPE(ScandinavianNormalizationFilter), &PY_TYPE_DEF(ScandinavianNormalizationFilter), module, "ScandinavianNormalizationFilter", 0);
          }

          void t_ScandinavianNormalizationFilter::initialize(PyObject *module)
          {
            PyObject_SetAttrString((PyObject *) PY_TYPE(ScandinavianNormalizationFilter), "class_", make_descriptor(ScandinavianNormalizationFilter::initializeClass, 1));
            PyObject_SetAttrString((PyObject *) PY_TYPE(ScandinavianNormalizationFilter), "wrapfn_", make_descriptor(t_ScandinavianNormalizationFilter::wrap_jobject));
            PyObject_SetAttrString((PyObject *) PY_TYPE(ScandinavianNormalizationFilter), "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_ScandinavianNormalizationFilter_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, ScandinavianNormalizationFilter::initializeClass, 1)))
              return NULL;
            return t_ScandinavianNormalizationFilter::wrap_Object(ScandinavianNormalizationFilter(((t_ScandinavianNormalizationFilter *) arg)->object.this$));
          }
          static PyObject *t_ScandinavianNormalizationFilter_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, ScandinavianNormalizationFilter::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_ScandinavianNormalizationFilter_init_(t_ScandinavianNormalizationFilter *self, PyObject *args, PyObject *kwds)
          {
            ::org::apache::lucene::analysis::TokenStream a0((jobject) NULL);
            ScandinavianNormalizationFilter object((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::analysis::TokenStream::initializeClass, &a0))
            {
              INT_CALL(object = ScandinavianNormalizationFilter(a0));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_ScandinavianNormalizationFilter_incrementToken(t_ScandinavianNormalizationFilter *self, PyObject *args)
          {
            jboolean result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.incrementToken());
              Py_RETURN_BOOL(result);
            }

            return callSuper(PY_TYPE(ScandinavianNormalizationFilter), (PyObject *) self, "incrementToken", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/WordlistLoader.h"
#include "java/io/InputStream.h"
#include "java/lang/Class.h"
#include "java/lang/String.h"
#include "java/io/Reader.h"
#include "org/apache/lucene/analysis/CharArraySet.h"
#include "org/apache/lucene/analysis/CharArrayMap.h"
#include "java/util/List.h"
#include "java/io/IOException.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {

        ::java::lang::Class *WordlistLoader::class$ = NULL;
        jmethodID *WordlistLoader::mids$ = NULL;
        bool WordlistLoader::live$ = false;

        jclass WordlistLoader::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/WordlistLoader");

            mids$ = new jmethodID[max_mid];
            mids$[mid_getSnowballWordSet_54423cfebc4b36d2] = env->getStaticMethodID(cls, "getSnowballWordSet", "(Ljava/io/Reader;)Lorg/apache/lucene/analysis/CharArraySet;");
            mids$[mid_getSnowballWordSet_7ccc50ae969b7582] = env->getStaticMethodID(cls, "getSnowballWordSet", "(Ljava/io/Reader;Lorg/apache/lucene/analysis/CharArraySet;)Lorg/apache/lucene/analysis/CharArraySet;");
            mids$[mid_getStemDict_e4b1965d7f92b380] = env->getStaticMethodID(cls, "getStemDict", "(Ljava/io/Reader;Lorg/apache/lucene/analysis/CharArrayMap;)Lorg/apache/lucene/analysis/CharArrayMap;");
            mids$[mid_getWordSet_54423cfebc4b36d2] = env->getStaticMethodID(cls, "getWordSet", "(Ljava/io/Reader;)Lorg/apache/lucene/analysis/CharArraySet;");
            mids$[mid_getWordSet_7ccc50ae969b7582] = env->getStaticMethodID(cls, "getWordSet", "(Ljava/io/Reader;Lorg/apache/lucene/analysis/CharArraySet;)Lorg/apache/lucene/analysis/CharArraySet;");
            mids$[mid_getWordSet_fa00ae6680a30b94] = env->getStaticMethodID(cls, "getWordSet", "(Ljava/io/Reader;Ljava/lang/String;)Lorg/apache/lucene/analysis/CharArraySet;");
            mids$[mid_getWordSet_e6247d90d96b0c24] = env->getStaticMethodID(cls, "getWordSet", "(Ljava/io/Reader;Ljava/lang/String;Lorg/apache/lucene/analysis/CharArraySet;)Lorg/apache/lucene/analysis/CharArraySet;");

            class$ = new ::java::lang::Class(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        ::org::apache::lucene::analysis::CharArraySet WordlistLoader::getSnowballWordSet(const ::java::io::Reader & a0)
        {
          jclass cls = env->getClass(initializeClass);
          return ::org::apache::lucene::analysis::CharArraySet(env->callStaticObjectMethod(cls, mids$[mid_getSnowballWordSet_54423cfebc4b36d2], a0.this$));
        }

        ::org::apache::lucene::analysis::CharArraySet WordlistLoader::getSnowballWordSet(const ::java::io::Reader & a0, const ::org::apache::lucene::analysis::CharArraySet & a1)
        {
          jclass cls = env->getClass(initializeClass);
          return ::org::apache::lucene::analysis::CharArraySet(env->callStaticObjectMethod(cls, mids$[mid_getSnowballWordSet_7ccc50ae969b7582], a0.this$, a1.this$));
        }

        ::org::apache::lucene::analysis::CharArrayMap WordlistLoader::getStemDict(const ::java::io::Reader & a0, const ::org::apache::lucene::analysis::CharArrayMap & a1)
        {
          jclass cls = env->getClass(initializeClass);
          return ::org::apache::lucene::analysis::CharArrayMap(env->callStaticObjectMethod(cls, mids$[mid_getStemDict_e4b1965d7f92b380], a0.this$, a1.this$));
        }

        ::org::apache::lucene::analysis::CharArraySet WordlistLoader::getWordSet(const ::java::io::Reader & a0)
        {
          jclass cls = env->getClass(initializeClass);
          return ::org::apache::lucene::analysis::CharArraySet(env->callStaticObjectMethod(cls, mids$[mid_getWordSet_54423cfebc4b36d2], a0.this$));
        }

        ::org::apache::lucene::analysis::CharArraySet WordlistLoader::getWordSet(const ::java::io::Reader & a0, const ::org::apache::lucene::analysis::CharArraySet & a1)
        {
          jclass cls = env->getClass(initializeClass);
          return ::org::apache::lucene::analysis::CharArraySet(env->callStaticObjectMethod(cls, mids$[mid_getWordSet_7ccc50ae969b7582], a0.this$, a1.this$));
        }

        ::org::apache::lucene::analysis::CharArraySet WordlistLoader::getWordSet(const ::java::io::Reader & a0, const ::java::lang::String & a1)
        {
          jclass cls = env->getClass(initializeClass);
          return ::org::apache::lucene::analysis::CharArraySet(env->callStaticObjectMethod(cls, mids$[mid_getWordSet_fa00ae6680a30b94], a0.this$, a1.this$));
        }

        ::org::apache::lucene::analysis::CharArraySet WordlistLoader::getWordSet(const ::java::io::Reader & a0, const ::java::lang::String & a1, const ::org::apache::lucene::analysis::CharArraySet & a2)
        {
          jclass cls = env->getClass(initializeClass);
          return ::org::apache::lucene::analysis::CharArraySet(env->callStaticObjectMethod(cls, mids$[mid_getWordSet_e6247d90d96b0c24], a0.this$, a1.this$, a2.this$));
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        static PyObject *t_WordlistLoader_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_WordlistLoader_instance_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_WordlistLoader_getSnowballWordSet(PyTypeObject *type, PyObject *args);
        static PyObject *t_WordlistLoader_getStemDict(PyTypeObject *type, PyObject *args);
        static PyObject *t_WordlistLoader_getWordSet(PyTypeObject *type, PyObject *args);

        static PyMethodDef t_WordlistLoader__methods_[] = {
          DECLARE_METHOD(t_WordlistLoader, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_WordlistLoader, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_WordlistLoader, getSnowballWordSet, METH_VARARGS | METH_CLASS),
          DECLARE_METHOD(t_WordlistLoader, getStemDict, METH_VARARGS | METH_CLASS),
          DECLARE_METHOD(t_WordlistLoader, getWordSet, METH_VARARGS | METH_CLASS),
          { NULL, NULL, 0, NULL }
        };

        static PyType_Slot PY_TYPE_SLOTS(WordlistLoader)[] = {
          { Py_tp_methods, t_WordlistLoader__methods_ },
          { Py_tp_init, (void *) abstract_init },
          { 0, NULL }
        };

        static PyType_Def *PY_TYPE_BASES(WordlistLoader)[] = {
          &PY_TYPE_DEF(::java::lang::Object),
          NULL
        };

        DEFINE_TYPE(WordlistLoader, t_WordlistLoader, WordlistLoader);

        void t_WordlistLoader::install(PyObject *module)
        {
          installType(&PY_TYPE(WordlistLoader), &PY_TYPE_DEF(WordlistLoader), module, "WordlistLoader", 0);
        }

        void t_WordlistLoader::initialize(PyObject *module)
        {
          PyObject_SetAttrString((PyObject *) PY_TYPE(WordlistLoader), "class_", make_descriptor(WordlistLoader::initializeClass, 1));
          PyObject_SetAttrString((PyObject *) PY_TYPE(WordlistLoader), "wrapfn_", make_descriptor(t_WordlistLoader::wrap_jobject));
          PyObject_SetAttrString((PyObject *) PY_TYPE(WordlistLoader), "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_WordlistLoader_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, WordlistLoader::initializeClass, 1)))
            return NULL;
          return t_WordlistLoader::wrap_Object(WordlistLoader(((t_WordlistLoader *) arg)->object.this$));
        }
        static PyObject *t_WordlistLoader_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, WordlistLoader::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static PyObject *t_WordlistLoader_getSnowballWordSet(PyTypeObject *type, PyObject *args)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 1:
            {
              ::java::io::Reader a0((jobject) NULL);
              ::org::apache::lucene::analysis::CharArraySet result((jobject) NULL);

              if (!parseArgs(args, "k", ::java::io::Reader::initializeClass, &a0))
              {
                OBJ_CALL(result = ::org::apache::lucene::analysis::WordlistLoader::getSnowballWordSet(a0));
                return ::org::apache::lucene::analysis::t_CharArraySet::wrap_Object(result);
              }
            }
            break;
           case 2:
            {
              ::java::io::Reader a0((jobject) NULL);
              ::org::apache::lucene::analysis::CharArraySet a1((jobject) NULL);
              PyTypeObject **p1;
              ::org::apache::lucene::analysis::CharArraySet result((jobject) NULL);

              if (!parseArgs(args, "kK", ::java::io::Reader::initializeClass, ::org::apache::lucene::analysis::CharArraySet::initializeClass, &a0, &a1, &p1, ::org::apache::lucene::analysis::t_CharArraySet::parameters_))
              {
                OBJ_CALL(result = ::org::apache::lucene::analysis::WordlistLoader::getSnowballWordSet(a0, a1));
                return ::org::apache::lucene::analysis::t_CharArraySet::wrap_Object(result);
              }
            }
          }

          PyErr_SetArgsError(type, "getSnowballWordSet", args);
          return NULL;
        }

        static PyObject *t_WordlistLoader_getStemDict(PyTypeObject *type, PyObject *args)
        {
          ::java::io::Reader a0((jobject) NULL);
          ::org::apache::lucene::analysis::CharArrayMap a1((jobject) NULL);
          PyTypeObject **p1;
          ::org::apache::lucene::analysis::CharArrayMap result((jobject) NULL);

          if (!parseArgs(args, "kK", ::java::io::Reader::initializeClass, ::org::apache::lucene::analysis::CharArrayMap::initializeClass, &a0, &a1, &p1, ::org::apache::lucene::analysis::t_CharArrayMap::parameters_))
          {
            OBJ_CALL(result = ::org::apache::lucene::analysis::WordlistLoader::getStemDict(a0, a1));
            return ::org::apache::lucene::analysis::t_CharArrayMap::wrap_Object(result, ::java::lang::PY_TYPE(String));
          }

          PyErr_SetArgsError(type, "getStemDict", args);
          return NULL;
        }

        static PyObject *t_WordlistLoader_getWordSet(PyTypeObject *type, PyObject *args)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 1:
            {
              ::java::io::Reader a0((jobject) NULL);
              ::org::apache::lucene::analysis::CharArraySet result((jobject) NULL);

              if (!parseArgs(args, "k", ::java::io::Reader::initializeClass, &a0))
              {
                OBJ_CALL(result = ::org::apache::lucene::analysis::WordlistLoader::getWordSet(a0));
                return ::org::apache::lucene::analysis::t_CharArraySet::wrap_Object(result);
              }
            }
            break;
           case 2:
            {
              ::java::io::Reader a0((jobject) NULL);
              ::org::apache::lucene::analysis::CharArraySet a1((jobject) NULL);
              PyTypeObject **p1;
              ::org::apache::lucene::analysis::CharArraySet result((jobject) NULL);

              if (!parseArgs(args, "kK", ::java::io::Reader::initializeClass, ::org::apache::lucene::analysis::CharArraySet::initializeClass, &a0, &a1, &p1, ::org::apache::lucene::analysis::t_CharArraySet::parameters_))
              {
                OBJ_CALL(result = ::org::apache::lucene::analysis::WordlistLoader::getWordSet(a0, a1));
                return ::org::apache::lucene::analysis::t_CharArraySet::wrap_Object(result);
              }
            }
            {
              ::java::io::Reader a0((jobject) NULL);
              ::java::lang::String a1((jobject) NULL);
              ::org::apache::lucene::analysis::CharArraySet result((jobject) NULL);

              if (!parseArgs(args, "ks", ::java::io::Reader::initializeClass, &a0, &a1))
              {
                OBJ_CALL(result = ::org::apache::lucene::analysis::WordlistLoader::getWordSet(a0, a1));
                return ::org::apache::lucene::analysis::t_CharArraySet::wrap_Object(result);
              }
            }
            break;
           case 3:
            {
              ::java::io::Reader a0((jobject) NULL);
              ::java::lang::String a1((jobject) NULL);
              ::org::apache::lucene::analysis::CharArraySet a2((jobject) NULL);
              PyTypeObject **p2;
              ::org::apache::lucene::analysis::CharArraySet result((jobject) NULL);

              if (!parseArgs(args, "ksK", ::java::io::Reader::initializeClass, ::org::apache::lucene::analysis::CharArraySet::initializeClass, &a0, &a1, &a2, &p2, ::org::apache::lucene::analysis::t_CharArraySet::parameters_))
              {
                OBJ_CALL(result = ::org::apache::lucene::analysis::WordlistLoader::getWordSet(a0, a1, a2));
                return ::org::apache::lucene::analysis::t_CharArraySet::wrap_Object(result);
              }
            }
          }

          PyErr_SetArgsError(type, "getWordSet", args);
          return NULL;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/codecs/lucene86/Lucene86PointsFormat.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/codecs/PointsWriter.h"
#include "org/apache/lucene/index/SegmentReadState.h"
#include "org/apache/lucene/codecs/PointsReader.h"
#include "org/apache/lucene/index/SegmentWriteState.h"
#include "java/lang/String.h"
#include "java/io/IOException.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace codecs {
        namespace lucene86 {

          ::java::lang::Class *Lucene86PointsFormat::class$ = NULL;
          jmethodID *Lucene86PointsFormat::mids$ = NULL;
          bool Lucene86PointsFormat::live$ = false;
          ::java::lang::String *Lucene86PointsFormat::DATA_EXTENSION = NULL;
          ::java::lang::String *Lucene86PointsFormat::INDEX_EXTENSION = NULL;
          ::java::lang::String *Lucene86PointsFormat::META_EXTENSION = NULL;

          jclass Lucene86PointsFormat::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/codecs/lucene86/Lucene86PointsFormat");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_f2cc1bce94666404] = env->getMethodID(cls, "<init>", "()V");
              mids$[mid_fieldsReader_8abb687068409d66] = env->getMethodID(cls, "fieldsReader", "(Lorg/apache/lucene/index/SegmentReadState;)Lorg/apache/lucene/codecs/PointsReader;");
              mids$[mid_fieldsWriter_e285a7edd004a5e4] = env->getMethodID(cls, "fieldsWriter", "(Lorg/apache/lucene/index/SegmentWriteState;)Lorg/apache/lucene/codecs/PointsWriter;");

              class$ = new ::java::lang::Class(cls);
              cls = (jclass) class$->this$;

              DATA_EXTENSION = new ::java::lang::String(env->getStaticObjectField(cls, "DATA_EXTENSION", "Ljava/lang/String;"));
              INDEX_EXTENSION = new ::java::lang::String(env->getStaticObjectField(cls, "INDEX_EXTENSION", "Ljava/lang/String;"));
              META_EXTENSION = new ::java::lang::String(env->getStaticObjectField(cls, "META_EXTENSION", "Ljava/lang/String;"));
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          Lucene86PointsFormat::Lucene86PointsFormat() : ::org::apache::lucene::codecs::PointsFormat(env->newObject(initializeClass, &mids$, mid_init$_f2cc1bce94666404)) {}

          ::org::apache::lucene::codecs::PointsReader Lucene86PointsFormat::fieldsReader(const ::org::apache::lucene::index::SegmentReadState & a0) const
          {
            return ::org::apache::lucene::codecs::PointsReader(env->callObjectMethod(this$, mids$[mid_fieldsReader_8abb687068409d66], a0.this$));
          }

          ::org::apache::lucene::codecs::PointsWriter Lucene86PointsFormat::fieldsWriter(const ::org::apache::lucene::index::SegmentWriteState & a0) const
          {
            return ::org::apache::lucene::codecs::PointsWriter(env->callObjectMethod(this$, mids$[mid_fieldsWriter_e285a7edd004a5e4], a0.this$));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace codecs {
        namespace lucene86 {
          static PyObject *t_Lucene86PointsFormat_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_Lucene86PointsFormat_instance_(PyTypeObject *type, PyObject *arg);
          static int t_Lucene86PointsFormat_init_(t_Lucene86PointsFormat *self, PyObject *args, PyObject *kwds);
          static PyObject *t_Lucene86PointsFormat_fieldsReader(t_Lucene86PointsFormat *self, PyObject *args);
          static PyObject *t_Lucene86PointsFormat_fieldsWriter(t_Lucene86PointsFormat *self, PyObject *args);

          static PyMethodDef t_Lucene86PointsFormat__methods_[] = {
            DECLARE_METHOD(t_Lucene86PointsFormat, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_Lucene86PointsFormat, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_Lucene86PointsFormat, fieldsReader, METH_VARARGS),
            DECLARE_METHOD(t_Lucene86PointsFormat, fieldsWriter, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          static PyType_Slot PY_TYPE_SLOTS(Lucene86PointsFormat)[] = {
            { Py_tp_methods, t_Lucene86PointsFormat__methods_ },
            { Py_tp_init, (void *) t_Lucene86PointsFormat_init_ },
            { 0, NULL }
          };

          static PyType_Def *PY_TYPE_BASES(Lucene86PointsFormat)[] = {
            &PY_TYPE_DEF(::org::apache::lucene::codecs::PointsFormat),
            NULL
          };

          DEFINE_TYPE(Lucene86PointsFormat, t_Lucene86PointsFormat, Lucene86PointsFormat);

          void t_Lucene86PointsFormat::install(PyObject *module)
          {
            installType(&PY_TYPE(Lucene86PointsFormat), &PY_TYPE_DEF(Lucene86PointsFormat), module, "Lucene86PointsFormat", 0);
          }

          void t_Lucene86PointsFormat::initialize(PyObject *module)
          {
            PyObject_SetAttrString((PyObject *) PY_TYPE(Lucene86PointsFormat), "class_", make_descriptor(Lucene86PointsFormat::initializeClass, 1));
            PyObject_SetAttrString((PyObject *) PY_TYPE(Lucene86PointsFormat), "wrapfn_", make_descriptor(t_Lucene86PointsFormat::wrap_jobject));
            PyObject_SetAttrString((PyObject *) PY_TYPE(Lucene86PointsFormat), "boxfn_", make_descriptor(boxObject));
            env->getClass(Lucene86PointsFormat::initializeClass);
            PyObject_SetAttrString((PyObject *) PY_TYPE(Lucene86PointsFormat), "DATA_EXTENSION", make_descriptor(j2p(*Lucene86PointsFormat::DATA_EXTENSION)));
            PyObject_SetAttrString((PyObject *) PY_TYPE(Lucene86PointsFormat), "INDEX_EXTENSION", make_descriptor(j2p(*Lucene86PointsFormat::INDEX_EXTENSION)));
            PyObject_SetAttrString((PyObject *) PY_TYPE(Lucene86PointsFormat), "META_EXTENSION", make_descriptor(j2p(*Lucene86PointsFormat::META_EXTENSION)));
          }

          static PyObject *t_Lucene86PointsFormat_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, Lucene86PointsFormat::initializeClass, 1)))
              return NULL;
            return t_Lucene86PointsFormat::wrap_Object(Lucene86PointsFormat(((t_Lucene86PointsFormat *) arg)->object.this$));
          }
          static PyObject *t_Lucene86PointsFormat_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, Lucene86PointsFormat::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_Lucene86PointsFormat_init_(t_Lucene86PointsFormat *self, PyObject *args, PyObject *kwds)
          {
            Lucene86PointsFormat object((jobject) NULL);

            INT_CALL(object = Lucene86PointsFormat());
            self->object = object;

            return 0;
          }

          static PyObject *t_Lucene86PointsFormat_fieldsReader(t_Lucene86PointsFormat *self, PyObject *args)
          {
            ::org::apache::lucene::index::SegmentReadState a0((jobject) NULL);
            ::org::apache::lucene::codecs::PointsReader result((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::index::SegmentReadState::initializeClass, &a0))
            {
              OBJ_CALL(result = self->object.fieldsReader(a0));
              return ::org::apache::lucene::codecs::t_PointsReader::wrap_Object(result);
            }

            return callSuper(PY_TYPE(Lucene86PointsFormat), (PyObject *) self, "fieldsReader", args, 2);
          }

          static PyObject *t_Lucene86PointsFormat_fieldsWriter(t_Lucene86PointsFormat *self, PyObject *args)
          {
            ::org::apache::lucene::index::SegmentWriteState a0((jobject) NULL);
            ::org::apache::lucene::codecs::PointsWriter result((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::index::SegmentWriteState::initializeClass, &a0))
            {
              OBJ_CALL(result = self->object.fieldsWriter(a0));
              return ::org::apache::lucene::codecs::t_PointsWriter::wrap_Object(result);
            }

            return callSuper(PY_TYPE(Lucene86PointsFormat), (PyObject *) self, "fieldsWriter", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/geo/Tessellator.h"
#include "org/apache/lucene/geo/Polygon.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/geo/XYPolygon.h"
#include "java/util/List.h"
#include "org/apache/lucene/geo/Tessellator$Triangle.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace geo {

        ::java::lang::Class *Tessellator::class$ = NULL;
        jmethodID *Tessellator::mids$ = NULL;
        bool Tessellator::live$ = false;

        jclass Tessellator::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/geo/Tessellator");

            mids$ = new jmethodID[max_mid];
            mids$[mid_linesIntersect_d68abb61fe1c2fa4] = env->getStaticMethodID(cls, "linesIntersect", "(DDDDDDDD)Z");
            mids$[mid_pointInPolygon_975740391924ad03] = env->getStaticMethodID(cls, "pointInPolygon", "(Ljava/util/List;DD)Z");
            mids$[mid_pointInTriangle_d68abb61fe1c2fa4] = env->getStaticMethodID(cls, "pointInTriangle", "(DDDDDDDD)Z");
            mids$[mid_tessellate_6a7b8041a03944fd] = env->getStaticMethodID(cls, "tessellate", "(Lorg/apache/lucene/geo/Polygon;)Ljava/util/List;");
            mids$[mid_tessellate_7a8691b197f14a20] = env->getStaticMethodID(cls, "tessellate", "(Lorg/apache/lucene/geo/XYPolygon;)Ljava/util/List;");

            class$ = new ::java::lang::Class(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        jboolean Tessellator::linesIntersect(jdouble a0, jdouble a1, jdouble a2, jdouble a3, jdouble a4, jdouble a5, jdouble a6, jdouble a7)
        {
          jclass cls = env->getClass(initializeClass);
          return env->callStaticBooleanMethod(cls, mids$[mid_linesIntersect_d68abb61fe1c2fa4], a0, a1, a2, a3, a4, a5, a6, a7);
        }

        jboolean Tessellator::pointInPolygon(const ::java::util::List & a0, jdouble a1, jdouble a2)
        {
          jclass cls = env->getClass(initializeClass);
          return env->callStaticBooleanMethod(cls, mids$[mid_pointInPolygon_975740391924ad03], a0.this$, a1, a2);
        }

        jboolean Tessellator::pointInTriangle(jdouble a0, jdouble a1, jdouble a2, jdouble a3, jdouble a4, jdouble a5, jdouble a6, jdouble a7)
        {
          jclass cls = env->getClass(initializeClass);
          return env->callStaticBooleanMethod(cls, mids$[mid_pointInTriangle_d68abb61fe1c2fa4], a0, a1, a2, a3, a4, a5, a6, a7);
        }

        ::java::util::List Tessellator::tessellate(const ::org::apache::lucene::geo::Polygon & a0)
        {
          jclass cls = env->getClass(initializeClass);
          return ::java::util::List(env->callStaticObjectMethod(cls, mids$[mid_tessellate_6a7b8041a03944fd], a0.this$));
        }

        ::java::util::List Tessellator::tessellate(const ::org::apache::lucene::geo::XYPolygon & a0)
        {
          jclass cls = env->getClass(initializeClass);
          return ::java::util::List(env->callStaticObjectMethod(cls, mids$[mid_tessellate_7a8691b197f14a20], a0.this$));
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace geo {
        static PyObject *t_Tessellator_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_Tessellator_instance_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_Tessellator_linesIntersect(PyTypeObject *type, PyObject *args);
        static PyObject *t_Tessellator_pointInPolygon(PyTypeObject *type, PyObject *args);
        static PyObject *t_Tessellator_pointInTriangle(PyTypeObject *type, PyObject *args);
        static PyObject *t_Tessellator_tessellate(PyTypeObject *type, PyObject *args);

        static PyMethodDef t_Tessellator__methods_[] = {
          DECLARE_METHOD(t_Tessellator, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_Tessellator, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_Tessellator, linesIntersect, METH_VARARGS | METH_CLASS),
          DECLARE_METHOD(t_Tessellator, pointInPolygon, METH_VARARGS | METH_CLASS),
          DECLARE_METHOD(t_Tessellator, pointInTriangle, METH_VARARGS | METH_CLASS),
          DECLARE_METHOD(t_Tessellator, tessellate, METH_VARARGS | METH_CLASS),
          { NULL, NULL, 0, NULL }
        };

        static PyType_Slot PY_TYPE_SLOTS(Tessellator)[] = {
          { Py_tp_methods, t_Tessellator__methods_ },
          { Py_tp_init, (void *) abstract_init },
          { 0, NULL }
        };

        static PyType_Def *PY_TYPE_BASES(Tessellator)[] = {
          &PY_TYPE_DEF(::java::lang::Object),
          NULL
        };

        DEFINE_TYPE(Tessellator, t_Tessellator, Tessellator);

        void t_Tessellator::install(PyObject *module)
        {
          installType(&PY_TYPE(Tessellator), &PY_TYPE_DEF(Tessellator), module, "Tessellator", 0);
          PyObject_SetAttrString((PyObject *) PY_TYPE(Tessellator), "Triangle", make_descriptor(&PY_TYPE_DEF(Tessellator$Triangle)));
        }

        void t_Tessellator::initialize(PyObject *module)
        {
          PyObject_SetAttrString((PyObject *) PY_TYPE(Tessellator), "class_", make_descriptor(Tessellator::initializeClass, 1));
          PyObject_SetAttrString((PyObject *) PY_TYPE(Tessellator), "wrapfn_", make_descriptor(t_Tessellator::wrap_jobject));
          PyObject_SetAttrString((PyObject *) PY_TYPE(Tessellator), "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_Tessellator_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, Tessellator::initializeClass, 1)))
            return NULL;
          return t_Tessellator::wrap_Object(Tessellator(((t_Tessellator *) arg)->object.this$));
        }
        static PyObject *t_Tessellator_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, Tessellator::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static PyObject *t_Tessellator_linesIntersect(PyTypeObject *type, PyObject *args)
        {
          jdouble a0;
          jdouble a1;
          jdouble a2;
          jdouble a3;
          jdouble a4;
          jdouble a5;
          jdouble a6;
          jdouble a7;
          jboolean result;

          if (!parseArgs(args, "DDDDDDDD", &a0, &a1, &a2, &a3, &a4, &a5, &a6, &a7))
          {
            OBJ_CALL(result = ::org::apache::lucene::geo::Tessellator::linesIntersect(a0, a1, a2, a3, a4, a5, a6, a7));
            Py_RETURN_BOOL(result);
          }

          PyErr_SetArgsError(type, "linesIntersect", args);
          return NULL;
        }

        static PyObject *t_Tessellator_pointInPolygon(PyTypeObject *type, PyObject *args)
        {
          ::java::util::List a0((jobject) NULL);
          PyTypeObject **p0;
          jdouble a1;
          jdouble a2;
          jboolean result;

          if (!parseArgs(args, "KDD", ::java::util::List::initializeClass, &a0, &p0, ::java::util::t_List::parameters_, &a1, &a2))
          {
            OBJ_CALL(result = ::org::apache::lucene::geo::Tessellator::pointInPolygon(a0, a1, a2));
            Py_RETURN_BOOL(result);
          }

          PyErr_SetArgsError(type, "pointInPolygon", args);
          return NULL;
        }

        static PyObject *t_Tessellator_pointInTriangle(PyTypeObject *type, PyObject *args)
        {
          jdouble a0;
          jdouble a1;
          jdouble a2;
          jdouble a3;
          jdouble a4;
          jdouble a5;
          jdouble a6;
          jdouble a7;
          jboolean result;

          if (!parseArgs(args, "DDDDDDDD", &a0, &a1, &a2, &a3, &a4, &a5, &a6, &a7))
          {
            OBJ_CALL(result = ::org::apache::lucene::geo::Tessellator::pointInTriangle(a0, a1, a2, a3, a4, a5, a6, a7));
            Py_RETURN_BOOL(result);
          }

          PyErr_SetArgsError(type, "pointInTriangle", args);
          return NULL;
        }

        static PyObject *t_Tessellator_tessellate(PyTypeObject *type, PyObject *args)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 1:
            {
              ::org::apache::lucene::geo::Polygon a0((jobject) NULL);
              ::java::util::List result((jobject) NULL);

              if (!parseArgs(args, "k", ::org::apache::lucene::geo::Polygon::initializeClass, &a0))
              {
                OBJ_CALL(result = ::org::apache::lucene::geo::Tessellator::tessellate(a0));
                return ::java::util::t_List::wrap_Object(result, ::org::apache::lucene::geo::PY_TYPE(Tessellator$Triangle));
              }
            }
            {
              ::org::apache::lucene::geo::XYPolygon a0((jobject) NULL);
              ::java::util::List result((jobject) NULL);

              if (!parseArgs(args, "k", ::org::apache::lucene::geo::XYPolygon::initializeClass, &a0))
              {
                OBJ_CALL(result = ::org::apache::lucene::geo::Tessellator::tessellate(a0));
                return ::java::util::t_List::wrap_Object(result, ::org::apache::lucene::geo::PY_TYPE(Tessellator$Triangle));
              }
            }
          }

          PyErr_SetArgsError(type, "tessellate", args);
          return NULL;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/BoostAttributeImpl.h"
#include "org/apache/lucene/search/BoostAttribute.h"
#include "org/apache/lucene/util/AttributeReflector.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {

        ::java::lang::Class *BoostAttributeImpl::class$ = NULL;
        jmethodID *BoostAttributeImpl::mids$ = NULL;
        bool BoostAttributeImpl::live$ = false;

        jclass BoostAttributeImpl::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/search/BoostAttributeImpl");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_f2cc1bce94666404] = env->getMethodID(cls, "<init>", "()V");
            mids$[mid_clear_f2cc1bce94666404] = env->getMethodID(cls, "clear", "()V");
            mids$[mid_copyTo_26346c38ebc9c090] = env->getMethodID(cls, "copyTo", "(Lorg/apache/lucene/util/AttributeImpl;)V");
            mids$[mid_getBoost_58aec2b64dff50c8] = env->getMethodID(cls, "getBoost", "()F");
            mids$[mid_reflectWith_b880c72ee67200af] = env->getMethodID(cls, "reflectWith", "(Lorg/apache/lucene/util/AttributeReflector;)V");
            mids$[mid_setBoost_8e1d952dd65cdc3a] = env->getMethodID(cls, "setBoost", "(F)V");

            class$ = new ::java::lang::Class(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        BoostAttributeImpl::BoostAttributeImpl() : ::org::apache::lucene::util::AttributeImpl(env->newObject(initializeClass, &mids$, mid_init$_f2cc1bce94666404)) {}

        void BoostAttributeImpl::clear() const
        {
          env->callVoidMethod(this$, mids$[mid_clear_f2cc1bce94666404]);
        }

        void BoostAttributeImpl::copyTo(const ::org::apache::lucene::util::AttributeImpl & a0) const
        {
          env->callVoidMethod(this$, mids$[mid_copyTo_26346c38ebc9c090], a0.this$);
        }

        jfloat BoostAttributeImpl::getBoost() const
        {
          return env->callFloatMethod(this$, mids$[mid_getBoost_58aec2b64dff50c8]);
        }

        void BoostAttributeImpl::reflectWith(const ::org::apache::lucene::util::AttributeReflector & a0) const
        {
          env->callVoidMethod(this$, mids$[mid_reflectWith_b880c72ee67200af], a0.this$);
        }

        void BoostAttributeImpl::setBoost(jfloat a0) const
        {
          env->callVoidMethod(this$, mids$[mid_setBoost_8e1d952dd65cdc3a], a0);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        static PyObject *t_BoostAttributeImpl_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_BoostAttributeImpl_instance_(PyTypeObject *type, PyObject *arg);
        static int t_BoostAttributeImpl_init_(t_BoostAttributeImpl *self, PyObject *args, PyObject *kwds);
        static PyObject *t_BoostAttributeImpl_clear(t_BoostAttributeImpl *self, PyObject *args);
        static PyObject *t_BoostAttributeImpl_copyTo(t_BoostAttributeImpl *self, PyObject *args);
        static PyObject *t_BoostAttributeImpl_getBoost(t_BoostAttributeImpl *self);
        static PyObject *t_BoostAttributeImpl_reflectWith(t_BoostAttributeImpl *self, PyObject *args);
        static PyObject *t_BoostAttributeImpl_setBoost(t_BoostAttributeImpl *self, PyObject *arg);
        static PyObject *t_BoostAttributeImpl_get__boost(t_BoostAttributeImpl *self, void *data);
        static int t_BoostAttributeImpl_set__boost(t_BoostAttributeImpl *self, PyObject *arg, void *data);
        static PyGetSetDef t_BoostAttributeImpl__fields_[] = {
          DECLARE_GETSET_FIELD(t_BoostAttributeImpl, boost),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_BoostAttributeImpl__methods_[] = {
          DECLARE_METHOD(t_BoostAttributeImpl, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_BoostAttributeImpl, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_BoostAttributeImpl, clear, METH_VARARGS),
          DECLARE_METHOD(t_BoostAttributeImpl, copyTo, METH_VARARGS),
          DECLARE_METHOD(t_BoostAttributeImpl, getBoost, METH_NOARGS),
          DECLARE_METHOD(t_BoostAttributeImpl, reflectWith, METH_VARARGS),
          DECLARE_METHOD(t_BoostAttributeImpl, setBoost, METH_O),
          { NULL, NULL, 0, NULL }
        };

        static PyType_Slot PY_TYPE_SLOTS(BoostAttributeImpl)[] = {
          { Py_tp_methods, t_BoostAttributeImpl__methods_ },
          { Py_tp_init, (void *) t_BoostAttributeImpl_init_ },
          { Py_tp_getset, t_BoostAttributeImpl__fields_ },
          { 0, NULL }
        };

        static PyType_Def *PY_TYPE_BASES(BoostAttributeImpl)[] = {
          &PY_TYPE_DEF(::org::apache::lucene::util::AttributeImpl),
          NULL
        };

        DEFINE_TYPE(BoostAttributeImpl, t_BoostAttributeImpl, BoostAttributeImpl);

        void t_BoostAttributeImpl::install(PyObject *module)
        {
          installType(&PY_TYPE(BoostAttributeImpl), &PY_TYPE_DEF(BoostAttributeImpl), module, "BoostAttributeImpl", 0);
        }

        void t_BoostAttributeImpl::initialize(PyObject *module)
        {
          PyObject_SetAttrString((PyObject *) PY_TYPE(BoostAttributeImpl), "class_", make_descriptor(BoostAttributeImpl::initializeClass, 1));
          PyObject_SetAttrString((PyObject *) PY_TYPE(BoostAttributeImpl), "wrapfn_", make_descriptor(t_BoostAttributeImpl::wrap_jobject));
          PyObject_SetAttrString((PyObject *) PY_TYPE(BoostAttributeImpl), "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_BoostAttributeImpl_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, BoostAttributeImpl::initializeClass, 1)))
            return NULL;
          return t_BoostAttributeImpl::wrap_Object(BoostAttributeImpl(((t_BoostAttributeImpl *) arg)->object.this$));
        }
        static PyObject *t_BoostAttributeImpl_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, BoostAttributeImpl::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_BoostAttributeImpl_init_(t_BoostAttributeImpl *self, PyObject *args, PyObject *kwds)
        {
          BoostAttributeImpl object((jobject) NULL);

          INT_CALL(object = BoostAttributeImpl());
          self->object = object;

          return 0;
        }

        static PyObject *t_BoostAttributeImpl_clear(t_BoostAttributeImpl *self, PyObject *args)
        {

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(self->object.clear());
            Py_RETURN_NONE;
          }

          return callSuper(PY_TYPE(BoostAttributeImpl), (PyObject *) self, "clear", args, 2);
        }

        static PyObject *t_BoostAttributeImpl_copyTo(t_BoostAttributeImpl *self, PyObject *args)
        {
          ::org::apache::lucene::util::AttributeImpl a0((jobject) NULL);

          if (!parseArgs(args, "k", ::org::apache::lucene::util::AttributeImpl::initializeClass, &a0))
          {
            OBJ_CALL(self->object.copyTo(a0));
            Py_RETURN_NONE;
          }

          return callSuper(PY_TYPE(BoostAttributeImpl), (PyObject *) self, "copyTo", args, 2);
        }

        static PyObject *t_BoostAttributeImpl_getBoost(t_BoostAttributeImpl *self)
        {
          jfloat result;
          OBJ_CALL(result = self->object.getBoost());
          return PyFloat_FromDouble((double) result);
        }

        static PyObject *t_BoostAttributeImpl_reflectWith(t_BoostAttributeImpl *self, PyObject *args)
        {
          ::org::apache::lucene::util::AttributeReflector a0((jobject) NULL);

          if (!parseArgs(args, "k", ::org::apache::lucene::util::AttributeReflector::initializeClass, &a0))
          {
            OBJ_CALL(self->object.reflectWith(a0));
            Py_RETURN_NONE;
          }

          return callSuper(PY_TYPE(BoostAttributeImpl), (PyObject *) self, "reflectWith", args, 2);
        }

        static PyObject *t_BoostAttributeImpl_setBoost(t_BoostAttributeImpl *self, PyObject *arg)
        {
          jfloat a0;

          if (!parseArg(arg, "F", &a0))
          {
            OBJ_CALL(self->object.setBoost(a0));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "setBoost", arg);
          return NULL;
        }

        static PyObject *t_BoostAttributeImpl_get__boost(t_BoostAttributeImpl *self, void *data)
        {
          jfloat value;
          OBJ_CALL(value = self->object.getBoost());
          return PyFloat_FromDouble((double) value);
        }
        static int t_BoostAttributeImpl_set__boost(t_BoostAttributeImpl *self, PyObject *arg, void *data)
        {
          {
            jfloat value;
            if (!parseArg(arg, "F", &value))
            {
              INT_CALL(self->object.setBoost(value));
              return 0;
            }
          }
          PyErr_SetArgsError((PyObject *) self, "boost", arg);
          return -1;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/TokenFilter.h"
#include "java/io/IOException.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {

        ::java::lang::Class *TokenFilter::class$ = NULL;
        jmethodID *TokenFilter::mids$ = NULL;
        bool TokenFilter::live$ = false;

        jclass TokenFilter::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/TokenFilter");

            mids$ = new jmethodID[max_mid];
            mids$[mid_close_f2cc1bce94666404] = env->getMethodID(cls, "close", "()V");
            mids$[mid_end_f2cc1bce94666404] = env->getMethodID(cls, "end", "()V");
            mids$[mid_reset_f2cc1bce94666404] = env->getMethodID(cls, "reset", "()V");

            class$ = new ::java::lang::Class(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        void TokenFilter::close() const
        {
          env->callVoidMethod(this$, mids$[mid_close_f2cc1bce94666404]);
        }

        void TokenFilter::end() const
        {
          env->callVoidMethod(this$, mids$[mid_end_f2cc1bce94666404]);
        }

        void TokenFilter::reset() const
        {
          env->callVoidMethod(this$, mids$[mid_reset_f2cc1bce94666404]);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        static PyObject *t_TokenFilter_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_TokenFilter_instance_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_TokenFilter_close(t_TokenFilter *self, PyObject *args);
        static PyObject *t_TokenFilter_end(t_TokenFilter *self, PyObject *args);
        static PyObject *t_TokenFilter_reset(t_TokenFilter *self, PyObject *args);

        static PyMethodDef t_TokenFilter__methods_[] = {
          DECLARE_METHOD(t_TokenFilter, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_TokenFilter, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_TokenFilter, close, METH_VARARGS),
          DECLARE_METHOD(t_TokenFilter, end, METH_VARARGS),
          DECLARE_METHOD(t_TokenFilter, reset, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        static PyType_Slot PY_TYPE_SLOTS(TokenFilter)[] = {
          { Py_tp_methods, t_TokenFilter__methods_ },
          { Py_tp_init, (void *) abstract_init },
          { 0, NULL }
        };

        static PyType_Def *PY_TYPE_BASES(TokenFilter)[] = {
          &PY_TYPE_DEF(::org::apache::lucene::analysis::TokenStream),
          NULL
        };

        DEFINE_TYPE(TokenFilter, t_TokenFilter, TokenFilter);

        void t_TokenFilter::install(PyObject *module)
        {
          installType(&PY_TYPE(TokenFilter), &PY_TYPE_DEF(TokenFilter), module, "TokenFilter", 0);
        }

        void t_TokenFilter::initialize(PyObject *module)
        {
          PyObject_SetAttrString((PyObject *) PY_TYPE(TokenFilter), "class_", make_descriptor(TokenFilter::initializeClass, 1));
          PyObject_SetAttrString((PyObject *) PY_TYPE(TokenFilter), "wrapfn_", make_descriptor(t_TokenFilter::wrap_jobject));
          PyObject_SetAttrString((PyObject *) PY_TYPE(TokenFilter), "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_TokenFilter_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, TokenFilter::initializeClass, 1)))
            return NULL;
          return t_TokenFilter::wrap_Object(TokenFilter(((t_TokenFilter *) arg)->object.this$));
        }
        static PyObject *t_TokenFilter_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, TokenFilter::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static PyObject *t_TokenFilter_close(t_TokenFilter *self, PyObject *args)
        {

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(self->object.close());
            Py_RETURN_NONE;
          }

          return callSuper(PY_TYPE(TokenFilter), (PyObject *) self, "close", args, 2);
        }

        static PyObject *t_TokenFilter_end(t_TokenFilter *self, PyObject *args)
        {

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(self->object.end());
            Py_RETURN_NONE;
          }

          return callSuper(PY_TYPE(TokenFilter), (PyObject *) self, "end", args, 2);
        }

        static PyObject *t_TokenFilter_reset(t_TokenFilter *self, PyObject *args)
        {

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(self->object.reset());
            Py_RETURN_NONE;
          }

          return callSuper(PY_TYPE(TokenFilter), (PyObject *) self, "reset", args, 2);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "java/lang/String.h"
#include "java/util/Comparator.h"
#include "java/lang/Comparable.h"
#include "java/lang/Class.h"
#include "java/lang/Iterable.h"
#include "java/util/Locale.h"
#include "java/lang/String.h"
#include "java/io/UnsupportedEncodingException.h"
#include "java/lang/CharSequence.h"
#include "java/lang/StringBuilder.h"
#include "java/lang/StringBuffer.h"
#include "java/io/Serializable.h"
#include "JArray.h"

namespace java {
  namespace lang {

    ::java::lang::Class *String::class$ = NULL;
    jmethodID *String::mids$ = NULL;
    bool String::live$ = false;
    ::java::util::Comparator *String::CASE_INSENSITIVE_ORDER = NULL;

    jclass String::initializeClass(bool getOnly)
    {
      if (getOnly)
        return (jclass) (live$ ? class$->this$ : NULL);
      if (class$ == NULL)
      {
        jclass cls = (jclass) env->findClass("java/lang/String");

        mids$ = new jmethodID[max_mid];
        mids$[mid_init$_f2cc1bce94666404] = env->getMethodID(cls, "<init>", "()V");
        mids$[mid_init$_73d03497e1253f84] = env->getMethodID(cls, "<init>", "(Ljava/lang/StringBuffer;)V");
        mids$[mid_init$_90aa63c10985f260] = env->getMethodID(cls, "<init>", "(Ljava/lang/StringBuilder;)V");
        mids$[mid_init$_9ffdf271836656c4] = env->getMethodID(cls, "<init>", "([B)V");
        mids$[mid_init$_82dffe1ba55ed767] = env->getMethodID(cls, "<init>", "([C)V");
        mids$[mid_init$_1d4be63d325e4000] = env->getMethodID(cls, "<init>", "([BLjava/lang/String;)V");
        mids$[mid_init$_2a8b02a5adcbf830] = env->getMethodID(cls, "<init>", "([BI)V");
        mids$[mid_init$_43fdd39c09bb2fad] = env->getMethodID(cls, "<init>", "([BII)V");
        mids$[mid_init$_d5128be76a214037] = env->getMethodID(cls, "<init>", "([CII)V");
        mids$[mid_init$_11b52125bd016996] = env->getMethodID(cls, "<init>", "([III)V");
        mids$[mid_init$_730e4cb49ed5c948] = env->getMethodID(cls, "<init>", "([BIILjava/lang/String;)V");
        mids$[mid_init$_446ec7a446604ee5] = env->getMethodID(cls, "<init>", "([BIII)V");
        mids$[mid_charAt_ebc61ec1e57770d1] = env->getMethodID(cls, "charAt", "(I)C");
        mids$[mid_codePointAt_1e143afe1894d213] = env->getMethodID(cls, "codePointAt", "(I)I");
        mids$[mid_codePointBefore_1e143afe1894d213] = env->getMethodID(cls, "codePointBefore", "(I)I");
        mids$[mid_codePointCount_57a58545eba514db] = env->getMethodID(cls, "codePointCount", "(II)I");
        mids$[mid_compareTo_a5a7d1128e9e2bb7] = env->getMethodID(cls, "compareTo", "(Ljava/lang/String;)I");
        mids$[mid_compareToIgnoreCase_a5a7d1128e9e2bb7] = env->getMethodID(cls, "compareToIgnoreCase", "(Ljava/lang/String;)I");
        mids$[mid_concat_9bfa75c9f141b67f] = env->getMethodID(cls, "concat", "(Ljava/lang/String;)Ljava/lang/String;");
        mids$[mid_contains_2cd6b83cb18fe093] = env->getMethodID(cls, "contains", "(Ljava/lang/CharSequence;)Z");
        mids$[mid_contentEquals_ef97e45e583aa4af] = env->getMethodID(cls, "contentEquals", "(Ljava/lang/StringBuffer;)Z");
        mids$[mid_contentEquals_2cd6b83cb18fe093] = env->getMethodID(cls, "contentEquals", "(Ljava/lang/CharSequence;)Z");
        mids$[mid_copyValueOf_4082f27b3cc7d145] = env->getStaticMethodID(cls, "copyValueOf", "([C)Ljava/lang/String;");
        mids$[mid_copyValueOf_6b3a5ce786df0548] = env->getStaticMethodID(cls, "copyValueOf", "([CII)Ljava/lang/String;");
        mids$[mid_endsWith_145b2d0af0c06b93] = env->getMethodID(cls, "endsWith", "(Ljava/lang/String;)Z");
        mids$[mid_equals_8b72f2dcdde6fd1d] = env->getMethodID(cls, "equals", "(Ljava/lang/Object;)Z");
        mids$[mid_equalsIgnoreCase_145b2d0af0c06b93] = env->getMethodID(cls, "equalsIgnoreCase", "(Ljava/lang/String;)Z");
        mids$[mid_format_8fd1aa183c04cdf5] = env->getStaticMethodID(cls, "format", "(Ljava/lang/String;[Ljava/lang/Object;)Ljava/lang/String;");
        mids$[mid_format_9a87db196ad423fc] = env->getStaticMethodID(cls, "format", "(Ljava/util/Locale;Ljava/lang/String;[Ljava/lang/Object;)Ljava/lang/String;");
        mids$[mid_getBytes_cf386cdb1bbd339f] = env->getMethodID(cls, "getBytes", "()[B");
        mids$[mid_getBytes_36cc1b2b800ddc03] = env->getMethodID(cls, "getBytes", "(Ljava/lang/String;)[B");
        mids$[mid_getBytes_ae4e663cfbcfb07a] = env->getMethodID(cls, "getBytes", "(II[BI)V");
        mids$[mid_getChars_520fb522c03f2e69] = env->getMethodID(cls, "getChars", "(II[CI)V");
        mids$[mid_hashCode_9972fcc56b44e79d] = env->getMethodID(cls, "hashCode", "()I");
        mids$[mid_indexOf_a5a7d1128e9e2bb7] = env->getMethodID(cls, "indexOf", "(Ljava/lang/String;)I");
        mids$[mid_indexOf_1e143afe1894d213] = env->getMethodID(cls, "indexOf", "(I)I");
        mids$[mid_indexOf_30cd5d5b9318bd5d] = env->getMethodID(cls, "indexOf", "(Ljava/lang/String;I)I");
        mids$[mid_indexOf_57a58545eba514db] = env->getMethodID(cls, "indexOf", "(II)I");
        mids$[mid_intern_db9b55ba01e03e4b] = env->getMethodID(cls, "intern", "()Ljava/lang/String;");
        mids$[mid_isEmpty_8454bd5aa23fd11e] = env->getMethodID(cls, "isEmpty", "()Z");
        mids$[mid_join_0e086e6fece48086] = env->getStaticMethodID(cls, "join", "(Ljava/lang/CharSequence;[Ljava/lang/CharSequence;)Ljava/lang/String;");
        mids$[mid_join_9a837158c1ddc583] = env->getStaticMethodID(cls, "join", "(Ljava/lang/CharSequence;Ljava/lang/Iterable;)Ljava/lang/String;");
        mids$[mid_lastIndexOf_a5a7d1128e9e2bb7] = env->getMethodID(cls, "lastIndexOf", "(Ljava/lang/String;)I");
        mids$[mid_lastIndexOf_1e143afe1894d213] = env->getMethodID(cls, "lastIndexOf", "(I)I");
        mids$[mid_lastIndexOf_30cd5d5b9318bd5d] = env->getMethodID(cls, "lastIndexOf", "(Ljava/lang/String;I)I");
        mids$[mid_lastIndexOf_57a58545eba514db] = env->getMethodID(cls, "lastIndexOf", "(II)I");
        mids$[mid_length_9972fcc56b44e79d] = env->getMethodID(cls, "length", "()I");
        mids$[mid_matches_145b2d0af0c06b93] = env->getMethodID(cls, "matches", "(Ljava/lang/String;)Z");
        mids$[mid_offsetByCodePoints_57a58545eba514db] = env->getMethodID(cls, "offsetByCodePoints", "(II)I");
        mids$[mid_regionMatches_756680c988d43b84] = env->getMethodID(cls, "regionMatches", "(ILjava/lang/String;II)Z");
        mids$[mid_regionMatches_4d0019bde6416ba2] = env->getMethodID(cls, "regionMatches", "(ZILjava/lang/String;II)Z");
        mids$[mid_replace_00f27d05f236ffc6] = env->getMethodID(cls, "replace", "(CC)Ljava/lang/String;");
        mids$[mid_replace_d281ed8abce24432] = env->getMethodID(cls, "replace", "(Ljava/lang/CharSequence;Ljava/lang/CharSequence;)Ljava/lang/String;");
        mids$[mid_replaceAll_04b762e0ad33dcc5] = env->getMethodID(cls, "replaceAll", "(Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String;");
        mids$[mid_replaceFirst_04b762e0ad33dcc5] = env->getMethodID(cls, "replaceFirst", "(Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String;");
        mids$[mid_split_1606e23a23a4a8e5] = env->getMethodID(cls, "split", "(Ljava/lang/String;)[Ljava/lang/String;");
        mids$[mid_split_5ba731fecfe18cb8] = env->getMethodID(cls, "split", "(Ljava/lang/String;I)[Ljava/lang/String;");
        mids$[mid_startsWith_145b2d0af0c06b93] = env->getMethodID(cls, "startsWith", "(Ljava/lang/String;)Z");
        mids$[mid_startsWith_828dfe4df2792df0] = env->getMethodID(cls, "startsWith", "(Ljava/lang/String;I)Z");
        mids$[mid_subSequence_26d6f5be97bcdc38] = env->getMethodID(cls, "subSequence", "(II)Ljava/lang/CharSequence;");
        mids$[mid_substring_d7593acad64ef635] = env->getMethodID(cls, "substring", "(I)Ljava/lang/String;");
        mids$[mid_substring_1f239231430be983] = env->getMethodID(cls, "substring", "(II)Ljava/lang/String;");
        mids$[mid_toCharArray_e11cf13c9a887534] = env->getMethodID(cls, "toCharArray", "()[C");
        mids$[mid_toLowerCase_db9b55ba01e03e4b] = env->getMethodID(cls, "toLowerCase", "()Ljava/lang/String;");
        mids$[mid_toLowerCase_8cbdae2bb55ad99c] = env->getMethodID(cls, "toLowerCase", "(Ljava/util/Locale;)Ljava/lang/String;");
        mids$[mid_toString_db9b55ba01e03e4b] = env->getMethodID(cls, "toString", "()Ljava/lang/String;");
        mids$[mid_toUpperCase_db9b55ba01e03e4b] = env->getMethodID(cls, "toUpperCase", "()Ljava/lang/String;");
        mids$[mid_toUpperCase_8cbdae2bb55ad99c] = env->getMethodID(cls, "toUpperCase", "(Ljava/util/Locale;)Ljava/lang/String;");
        mids$[mid_trim_db9b55ba01e03e4b] = env->getMethodID(cls, "trim", "()Ljava/lang/String;");
        mids$[mid_valueOf_4082f27b3cc7d145] = env->getStaticMethodID(cls, "valueOf", "([C)Ljava/lang/String;");
        mids$[mid_valueOf_46a3600c464a391e] = env->getStaticMethodID(cls, "valueOf", "(Z)Ljava/lang/String;");
        mids$[mid_valueOf_4bb5e6191c541c0d] = env->getStaticMethodID(cls, "valueOf", "(C)Ljava/lang/String;");
        mids$[mid_valueOf_f4d984402e3bd258] = env->getStaticMethodID(cls, "valueOf", "(D)Ljava/lang/String;");
        mids$[mid_valueOf_64158b2ec62ced09] = env->getStaticMethodID(cls, "valueOf", "(F)Ljava/lang/String;");
        mids$[mid_valueOf_d7593acad64ef635] = env->getStaticMethodID(cls, "valueOf", "(I)Ljava/lang/String;");
        mids$[mid_valueOf_8f886c83a83356f0] = env->getStaticMethodID(cls, "valueOf", "(Ljava/lang/Object;)Ljava/lang/String;");
        mids$[mid_valueOf_55e776ffac018431] = env->getStaticMethodID(cls, "valueOf", "(J)Ljava/lang/String;");
        mids$[mid_valueOf_6b3a5ce786df0548] = env->getStaticMethodID(cls, "valueOf", "([CII)Ljava/lang/String;");

        class$ = new ::java::lang::Class(cls);
        cls = (jclass) class$->this$;

        CASE_INSENSITIVE_ORDER = new ::java::util::Comparator(env->getStaticObjectField(cls, "CASE_INSENSITIVE_ORDER", "Ljava/util/Comparator;"));
        live$ = true;
      }
      return (jclass) class$->this$;
    }

    String::String() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_f2cc1bce94666404)) {}

    String::String(const ::java::lang::StringBuffer & a0) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_73d03497e1253f84, a0.this$)) {}

    String::String(const ::java::lang::StringBuilder & a0) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_90aa63c10985f260, a0.this$)) {}

    String::String(const JArray< jbyte > & a0) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_9ffdf271836656c4, a0.this$)) {}

    String::String(const JArray< jchar > & a0) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_82dffe1ba55ed767, a0.this$)) {}

    String::String(const JArray< jbyte > & a0, const String & a1) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_1d4be63d325e4000, a0.this$, a1.this$)) {}

    String::String(const JArray< jbyte > & a0, jint a1) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_2a8b02a5adcbf830, a0.this$, a1)) {}

    String::String(const JArray< jbyte > & a0, jint a1, jint a2) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_43fdd39c09bb2fad, a0.this$, a1, a2)) {}

    String::String(const JArray< jchar > & a0, jint a1, jint a2) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_d5128be76a214037, a0.this$, a1, a2)) {}

    String::String(const JArray< jint > & a0, jint a1, jint a2) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_11b52125bd016996, a0.this$, a1, a2)) {}

    String::String(const JArray< jbyte > & a0, jint a1, jint a2, const String & a3) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_730e4cb49ed5c948, a0.this$, a1, a2, a3.this$)) {}

    String::String(const JArray< jbyte > & a0, jint a1, jint a2, jint a3) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_446ec7a446604ee5, a0.this$, a1, a2, a3)) {}

    jchar String::charAt(jint a0) const
    {
      return env->callCharMethod(this$, mids$[mid_charAt_ebc61ec1e57770d1], a0);
    }

    jint String::codePointAt(jint a0) const
    {
      return env->callIntMethod(this$, mids$[mid_codePointAt_1e143afe1894d213], a0);
    }

    jint String::codePointBefore(jint a0) const
    {
      return env->callIntMethod(this$, mids$[mid_codePointBefore_1e143afe1894d213], a0);
    }

    jint String::codePointCount(jint a0, jint a1) const
    {
      return env->callIntMethod(this$, mids$[mid_codePointCount_57a58545eba514db], a0, a1);
    }

    jint String::compareTo(const String & a0) const
    {
      return env->callIntMethod(this$, mids$[mid_compareTo_a5a7d1128e9e2bb7], a0.this$);
    }

    jint String::compareToIgnoreCase(const String & a0) const
    {
      return env->callIntMethod(this$, mids$[mid_compareToIgnoreCase_a5a7d1128e9e2bb7], a0.this$);
    }

    String String::concat(const String & a0) const
    {
      return String(env->callObjectMethod(this$, mids$[mid_concat_9bfa75c9f141b67f], a0.this$));
    }

    jboolean String::contains(const ::java::lang::CharSequence & a0) const
    {
      return env->callBooleanMethod(this$, mids$[mid_contains_2cd6b83cb18fe093], a0.this$);
    }

    jboolean String::contentEquals(const ::java::lang::StringBuffer & a0) const
    {
      return env->callBooleanMethod(this$, mids$[mid_contentEquals_ef97e45e583aa4af], a0.this$);
    }

    jboolean String::contentEquals(const ::java::lang::CharSequence & a0) const
    {
      return env->callBooleanMethod(this$, mids$[mid_contentEquals_2cd6b83cb18fe093], a0.this$);
    }

    String String::copyValueOf(const JArray< jchar > & a0)
    {
      jclass cls = env->getClass(initializeClass);
      return String(env->callStaticObjectMethod(cls, mids$[mid_copyValueOf_4082f27b3cc7d145], a0.this$));
    }

    String String::copyValueOf(const JArray< jchar > & a0, jint a1, jint a2)
    {
      jclass cls = env->getClass(initializeClass);
      return String(env->callStaticObjectMethod(cls, mids$[mid_copyValueOf_6b3a5ce786df0548], a0.this$, a1, a2));
    }

    jboolean String::endsWith(const String & a0) const
    {
      return env->callBooleanMethod(this$, mids$[mid_endsWith_145b2d0af0c06b93], a0.this$);
    }

    jboolean String::equals(const ::java::lang::Object & a0) const
    {
      return env->callBooleanMethod(this$, mids$[mid_equals_8b72f2dcdde6fd1d], a0.this$);
    }

    jboolean String::equalsIgnoreCase(const String & a0) const
    {
      return env->callBooleanMethod(this$, mids$[mid_equalsIgnoreCase_145b2d0af0c06b93], a0.this$);
    }

    String String::format(const String & a0, const JArray< ::java::lang::Object > & a1)
    {
      jclass cls = env->getClass(initializeClass);
      return String(env->callStaticObjectMethod(cls, mids$[mid_format_8fd1aa183c04cdf5], a0.this$, a1.this$));
    }

    String String::format(const ::java::util::Locale & a0, const String & a1, const JArray< ::java::lang::Object > & a2)
    {
      jclass cls = env->getClass(initializeClass);
      return String(env->callStaticObjectMethod(cls, mids$[mid_format_9a87db196ad423fc], a0.this$, a1.this$, a2.this$));
    }

    JArray< jbyte > String::getBytes() const
    {
      return JArray< jbyte >(env->callObjectMethod(this$, mids$[mid_getBytes_cf386cdb1bbd339f]));
    }

    JArray< jbyte > String::getBytes(const String & a0) const
    {
      return JArray< jbyte >(env->callObjectMethod(this$, mids$[mid_getBytes_36cc1b2b800ddc03], a0.this$));
    }

    void String::getBytes(jint a0, jint a1, const JArray< jbyte > & a2, jint a3) const
    {
      env->callVoidMethod(this$, mids$[mid_getBytes_ae4e663cfbcfb07a], a0, a1, a2.this$, a3);
    }

    void String::getChars(jint a0, jint a1, const JArray< jchar > & a2, jint a3) const
    {
      env->callVoidMethod(this$, mids$[mid_getChars_520fb522c03f2e69], a0, a1, a2.this$, a3);
    }

    jint String::hashCode() const
    {
      return env->callIntMethod(this$, mids$[mid_hashCode_9972fcc56b44e79d]);
    }

    jint String::indexOf(const String & a0) const
    {
      return env->callIntMethod(this$, mids$[mid_indexOf_a5a7d1128e9e2bb7], a0.this$);
    }

    jint String::indexOf(jint a0) const
    {
      return env->callIntMethod(this$, mids$[mid_indexOf_1e143afe1894d213], a0);
    }

    jint String::indexOf(const String & a0, jint a1) const
    {
      return env->callIntMethod(this$, mids$[mid_indexOf_30cd5d5b9318bd5d], a0.this$, a1);
    }

    jint String::indexOf(jint a0, jint a1) const
    {
      return env->callIntMethod(this$, mids$[mid_indexOf_57a58545eba514db], a0, a1);
    }

    String String::intern() const
    {
      return String(env->callObjectMethod(this$, mids$[mid_intern_db9b55ba01e03e4b]));
    }

    jboolean String::isEmpty() const
    {
      return env->callBooleanMethod(this$, mids$[mid_isEmpty_8454bd5aa23fd11e]);
    }

    String String::join(const ::java::lang::CharSequence & a0, const JArray< ::java::lang::CharSequence > & a1)
    {
      jclass cls = env->getClass(initializeClass);
      return String(env->callStaticObjectMethod(cls, mids$[mid_join_0e086e6fece48086], a0.this$, a1.this$));
    }

    String String::join(const ::java::lang::CharSequence & a0, const ::java::lang::Iterable & a1)
    {
      jclass cls = env->getClass(initializeClass);
      return String(env->callStaticObjectMethod(cls, mids$[mid_join_9a837158c1ddc583], a0.this$, a1.this$));
    }

    jint String::lastIndexOf(const String & a0) const
    {
      return env->callIntMethod(this$, mids$[mid_lastIndexOf_a5a7d1128e9e2bb7], a0.this$);
    }

    jint String::lastIndexOf(jint a0) const
    {
      return env->callIntMethod(this$, mids$[mid_lastIndexOf_1e143afe1894d213], a0);
    }

    jint String::lastIndexOf(const String & a0, jint a1) const
    {
      return env->callIntMethod(this$, mids$[mid_lastIndexOf_30cd5d5b9318bd5d], a0.this$, a1);
    }

    jint String::lastIndexOf(jint a0, jint a1) const
    {
      return env->callIntMethod(this$, mids$[mid_lastIndexOf_57a58545eba514db], a0, a1);
    }

    jint String::length() const
    {
      return env->callIntMethod(this$, mids$[mid_length_9972fcc56b44e79d]);
    }

    jboolean String::matches(const String & a0) const
    {
      return env->callBooleanMethod(this$, mids$[mid_matches_145b2d0af0c06b93], a0.this$);
    }

    jint String::offsetByCodePoints(jint a0, jint a1) const
    {
      return env->callIntMethod(this$, mids$[mid_offsetByCodePoints_57a58545eba514db], a0, a1);
    }

    jboolean String::regionMatches(jint a0, const String & a1, jint a2, jint a3) const
    {
      return env->callBooleanMethod(this$, mids$[mid_regionMatches_756680c988d43b84], a0, a1.this$, a2, a3);
    }

    jboolean String::regionMatches(jboolean a0, jint a1, const String & a2, jint a3, jint a4) const
    {
      return env->callBooleanMethod(this$, mids$[mid_regionMatches_4d0019bde6416ba2], a0, a1, a2.this$, a3, a4);
    }

    String String::replace(jchar a0, jchar a1) const
    {
      return String(env->callObjectMethod(this$, mids$[mid_replace_00f27d05f236ffc6], a0, a1));
    }

    String String::replace(const ::java::lang::CharSequence & a0, const ::java::lang::CharSequence & a1) const
    {
      return String(env->callObjectMethod(this$, mids$[mid_replace_d281ed8abce24432], a0.this$, a1.this$));
    }

    String String::replaceAll(const String & a0, const String & a1) const
    {
      return String(env->callObjectMethod(this$, mids$[mid_replaceAll_04b762e0ad33dcc5], a0.this$, a1.this$));
    }

    String String::replaceFirst(const String & a0, const String & a1) const
    {
      return String(env->callObjectMethod(this$, mids$[mid_replaceFirst_04b762e0ad33dcc5], a0.this$, a1.this$));
    }

    JArray< String > String::split(const String & a0) const
    {
      return JArray< String >(env->callObjectMethod(this$, mids$[mid_split_1606e23a23a4a8e5], a0.this$));
    }

    JArray< String > String::split(const String & a0, jint a1) const
    {
      return JArray< String >(env->callObjectMethod(this$, mids$[mid_split_5ba731fecfe18cb8], a0.this$, a1));
    }

    jboolean String::startsWith(const String & a0) const
    {
      return env->callBooleanMethod(this$, mids$[mid_startsWith_145b2d0af0c06b93], a0.this$);
    }

    jboolean String::startsWith(const String & a0, jint a1) const
    {
      return env->callBooleanMethod(this$, mids$[mid_startsWith_828dfe4df2792df0], a0.this$, a1);
    }

    ::java::lang::CharSequence String::subSequence(jint a0, jint a1) const
    {
      return ::java::lang::CharSequence(env->callObjectMethod(this$, mids$[mid_subSequence_26d6f5be97bcdc38], a0, a1));
    }

    String String::substring(jint a0) const
    {
      return String(env->callObjectMethod(this$, mids$[mid_substring_d7593acad64ef635], a0));
    }

    String String::substring(jint a0, jint a1) const
    {
      return String(env->callObjectMethod(this$, mids$[mid_substring_1f239231430be983], a0, a1));
    }

    JArray< jchar > String::toCharArray() const
    {
      return JArray< jchar >(env->callObjectMethod(this$, mids$[mid_toCharArray_e11cf13c9a887534]));
    }

    String String::toLowerCase() const
    {
      return String(env->callObjectMethod(this$, mids$[mid_toLowerCase_db9b55ba01e03e4b]));
    }

    String String::toLowerCase(const ::java::util::Locale & a0) const
    {
      return String(env->callObjectMethod(this$, mids$[mid_toLowerCase_8cbdae2bb55ad99c], a0.this$));
    }

    String String::toString() const
    {
      return String(env->callObjectMethod(this$, mids$[mid_toString_db9b55ba01e03e4b]));
    }

    String String::toUpperCase() const
    {
      return String(env->callObjectMethod(this$, mids$[mid_toUpperCase_db9b55ba01e03e4b]));
    }

    String String::toUpperCase(const ::java::util::Locale & a0) const
    {
      return String(env->callObjectMethod(this$, mids$[mid_toUpperCase_8cbdae2bb55ad99c], a0.this$));
    }

    String String::trim() const
    {
      return String(env->callObjectMethod(this$, mids$[mid_trim_db9b55ba01e03e4b]));
    }

    String String::valueOf(const JArray< jchar > & a0)
    {
      jclass cls = env->getClass(initializeClass);
      return String(env->callStaticObjectMethod(cls, mids$[mid_valueOf_4082f27b3cc7d145], a0.this$));
    }

    String String::valueOf(jboolean a0)
    {
      jclass cls = env->getClass(initializeClass);
      return String(env->callStaticObjectMethod(cls, mids$[mid_valueOf_46a3600c464a391e], a0));
    }

    String String::valueOf(jchar a0)
    {
      jclass cls = env->getClass(initializeClass);
      return String(env->callStaticObjectMethod(cls, mids$[mid_valueOf_4bb5e6191c541c0d], a0));
    }

    String String::valueOf(jdouble a0)
    {
      jclass cls = env->getClass(initializeClass);
      return String(env->callStaticObjectMethod(cls, mids$[mid_valueOf_f4d984402e3bd258], a0));
    }

    String String::valueOf(jfloat a0)
    {
      jclass cls = env->getClass(initializeClass);
      return String(env->callStaticObjectMethod(cls, mids$[mid_valueOf_64158b2ec62ced09], a0));
    }

    String String::valueOf(jint a0)
    {
      jclass cls = env->getClass(initializeClass);
      return String(env->callStaticObjectMethod(cls, mids$[mid_valueOf_d7593acad64ef635], a0));
    }

    String String::valueOf(const ::java::lang::Object & a0)
    {
      jclass cls = env->getClass(initializeClass);
      return String(env->callStaticObjectMethod(cls, mids$[mid_valueOf_8f886c83a83356f0], a0.this$));
    }

    String String::valueOf(jlong a0)
    {
      jclass cls = env->getClass(initializeClass);
      return String(env->callStaticObjectMethod(cls, mids$[mid_valueOf_55e776ffac018431], a0));
    }

    String String::valueOf(const JArray< jchar > & a0, jint a1, jint a2)
    {
      jclass cls = env->getClass(initializeClass);
      return String(env->callStaticObjectMethod(cls, mids$[mid_valueOf_6b3a5ce786df0548], a0.this$, a1, a2));
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace java {
  namespace lang {
    static PyObject *t_String_cast_(PyTypeObject *type, PyObject *arg);
    static PyObject *t_String_instance_(PyTypeObject *type, PyObject *arg);
    static int t_String_init_(t_String *self, PyObject *args, PyObject *kwds);
    static PyObject *t_String_charAt(t_String *self, PyObject *arg);
    static PyObject *t_String_codePointAt(t_String *self, PyObject *arg);
    static PyObject *t_String_codePointBefore(t_String *self, PyObject *arg);
    static PyObject *t_String_codePointCount(t_String *self, PyObject *args);
    static PyObject *t_String_compareTo(t_String *self, PyObject *arg);
    static PyObject *t_String_compareToIgnoreCase(t_String *self, PyObject *arg);
    static PyObject *t_String_concat(t_String *self, PyObject *arg);
    static PyObject *t_String_contains(t_String *self, PyObject *arg);
    static PyObject *t_String_contentEquals(t_String *self, PyObject *args);
    static PyObject *t_String_copyValueOf(PyTypeObject *type, PyObject *args);
    static PyObject *t_String_endsWith(t_String *self, PyObject *arg);
    static PyObject *t_String_equals(t_String *self, PyObject *args);
    static PyObject *t_String_equalsIgnoreCase(t_String *self, PyObject *arg);
    static PyObject *t_String_format(PyTypeObject *type, PyObject *args);
    static PyObject *t_String_getBytes(t_String *self, PyObject *args);
    static PyObject *t_String_getChars(t_String *self, PyObject *args);
    static PyObject *t_String_hashCode(t_String *self, PyObject *args);
    static PyObject *t_String_indexOf(t_String *self, PyObject *args);
    static PyObject *t_String_intern(t_String *self);
    static PyObject *t_String_isEmpty(t_String *self);
    static PyObject *t_String_join(PyTypeObject *type, PyObject *args);
    static PyObject *t_String_lastIndexOf(t_String *self, PyObject *args);
    static PyObject *t_String_length(t_String *self);
    static PyObject *t_String_matches(t_String *self, PyObject *arg);
    static PyObject *t_String_offsetByCodePoints(t_String *self, PyObject *args);
    static PyObject *t_String_regionMatches(t_String *self, PyObject *args);
    static PyObject *t_String_replace(t_String *self, PyObject *args);
    static PyObject *t_String_replaceAll(t_String *self, PyObject *args);
    static PyObject *t_String_replaceFirst(t_String *self, PyObject *args);
    static PyObject *t_String_split(t_String *self, PyObject *args);
    static PyObject *t_String_startsWith(t_String *self, PyObject *args);
    static PyObject *t_String_subSequence(t_String *self, PyObject *args);
    static PyObject *t_String_substring(t_String *self, PyObject *args);
    static PyObject *t_String_toCharArray(t_String *self);
    static PyObject *t_String_toLowerCase(t_String *self, PyObject *args);
    static PyObject *t_String_toString(t_String *self, PyObject *args);
    static PyObject *t_String_toUpperCase(t_String *self, PyObject *args);
    static PyObject *t_String_trim(t_String *self);
    static PyObject *t_String_valueOf(PyTypeObject *type, PyObject *args);
    static PyObject *t_String_get__bytes(t_String *self, void *data);
    static PyObject *t_String_get__empty(t_String *self, void *data);
    static PyGetSetDef t_String__fields_[] = {
      DECLARE_GET_FIELD(t_String, bytes),
      DECLARE_GET_FIELD(t_String, empty),
      { NULL, NULL, NULL, NULL, NULL }
    };

    static PyMethodDef t_String__methods_[] = {
      DECLARE_METHOD(t_String, cast_, METH_O | METH_CLASS),
      DECLARE_METHOD(t_String, instance_, METH_O | METH_CLASS),
      DECLARE_METHOD(t_String, charAt, METH_O),
      DECLARE_METHOD(t_String, codePointAt, METH_O),
      DECLARE_METHOD(t_String, codePointBefore, METH_O),
      DECLARE_METHOD(t_String, codePointCount, METH_VARARGS),
      DECLARE_METHOD(t_String, compareTo, METH_O),
      DECLARE_METHOD(t_String, compareToIgnoreCase, METH_O),
      DECLARE_METHOD(t_String, concat, METH_O),
      DECLARE_METHOD(t_String, contains, METH_O),
      DECLARE_METHOD(t_String, contentEquals, METH_VARARGS),
      DECLARE_METHOD(t_String, copyValueOf, METH_VARARGS | METH_CLASS),
      DECLARE_METHOD(t_String, endsWith, METH_O),
      DECLARE_METHOD(t_String, equals, METH_VARARGS),
      DECLARE_METHOD(t_String, equalsIgnoreCase, METH_O),
      DECLARE_METHOD(t_String, format, METH_VARARGS | METH_CLASS),
      DECLARE_METHOD(t_String, getBytes, METH_VARARGS),
      DECLARE_METHOD(t_String, getChars, METH_VARARGS),
      DECLARE_METHOD(t_String, hashCode, METH_VARARGS),
      DECLARE_METHOD(t_String, indexOf, METH_VARARGS),
      DECLARE_METHOD(t_String, intern, METH_NOARGS),
      DECLARE_METHOD(t_String, isEmpty, METH_NOARGS),
      DECLARE_METHOD(t_String, join, METH_VARARGS | METH_CLASS),
      DECLARE_METHOD(t_String, lastIndexOf, METH_VARARGS),
      DECLARE_METHOD(t_String, length, METH_NOARGS),
      DECLARE_METHOD(t_String, matches, METH_O),
      DECLARE_METHOD(t_String, offsetByCodePoints, METH_VARARGS),
      DECLARE_METHOD(t_String, regionMatches, METH_VARARGS),
      DECLARE_METHOD(t_String, replace, METH_VARARGS),
      DECLARE_METHOD(t_String, replaceAll, METH_VARARGS),
      DECLARE_METHOD(t_String, replaceFirst, METH_VARARGS),
      DECLARE_METHOD(t_String, split, METH_VARARGS),
      DECLARE_METHOD(t_String, startsWith, METH_VARARGS),
      DECLARE_METHOD(t_String, subSequence, METH_VARARGS),
      DECLARE_METHOD(t_String, substring, METH_VARARGS),
      DECLARE_METHOD(t_String, toCharArray, METH_NOARGS),
      DECLARE_METHOD(t_String, toLowerCase, METH_VARARGS),
      DECLARE_METHOD(t_String, toString, METH_VARARGS),
      DECLARE_METHOD(t_String, toUpperCase, METH_VARARGS),
      DECLARE_METHOD(t_String, trim, METH_NOARGS),
      DECLARE_METHOD(t_String, valueOf, METH_VARARGS | METH_CLASS),
      { NULL, NULL, 0, NULL }
    };

    static PyType_Slot PY_TYPE_SLOTS(String)[] = {
      { Py_tp_methods, t_String__methods_ },
      { Py_tp_init, (void *) t_String_init_ },
      { Py_tp_getset, t_String__fields_ },
      { 0, NULL }
    };

    static PyType_Def *PY_TYPE_BASES(String)[] = {
      &PY_TYPE_DEF(::java::lang::Object),
      NULL
    };

    DEFINE_TYPE(String, t_String, String);

    void t_String::install(PyObject *module)
    {
      installType(&PY_TYPE(String), &PY_TYPE_DEF(String), module, "String", 0);
    }

    void t_String::initialize(PyObject *module)
    {
      PyObject_SetAttrString((PyObject *) PY_TYPE(String), "class_", make_descriptor(String::initializeClass, 1));
      PyObject_SetAttrString((PyObject *) PY_TYPE(String), "wrapfn_", make_descriptor(unboxString));
      PyObject_SetAttrString((PyObject *) PY_TYPE(String), "boxfn_", make_descriptor(boxString));
      env->getClass(String::initializeClass);
      PyObject_SetAttrString((PyObject *) PY_TYPE(String), "CASE_INSENSITIVE_ORDER", make_descriptor(::java::util::t_Comparator::wrap_Object(*String::CASE_INSENSITIVE_ORDER)));
    }

    static PyObject *t_String_cast_(PyTypeObject *type, PyObject *arg)
    {
      if (!(arg = castCheck(arg, String::initializeClass, 1)))
        return NULL;
      return t_String::wrap_Object(String(((t_String *) arg)->object.this$));
    }
    static PyObject *t_String_instance_(PyTypeObject *type, PyObject *arg)
    {
      if (!castCheck(arg, String::initializeClass, 0))
        Py_RETURN_FALSE;
      Py_RETURN_TRUE;
    }

    static int t_String_init_(t_String *self, PyObject *args, PyObject *kwds)
    {
      switch (PyTuple_GET_SIZE(args)) {
       case 0:
        {
          String object((jobject) NULL);

          INT_CALL(object = String());
          self->object = object;
          break;
        }
       case 1:
        {
          ::java::lang::StringBuffer a0((jobject) NULL);
          String object((jobject) NULL);

          if (!parseArgs(args, "k", ::java::lang::StringBuffer::initializeClass, &a0))
          {
            INT_CALL(object = String(a0));
            self->object = object;
            break;
          }
        }
        {
          ::java::lang::StringBuilder a0((jobject) NULL);
          String object((jobject) NULL);

          if (!parseArgs(args, "k", ::java::lang::StringBuilder::initializeClass, &a0))
          {
            INT_CALL(object = String(a0));
            self->object = object;
            break;
          }
        }
        {
          JArray< jbyte > a0((jobject) NULL);
          String object((jobject) NULL);

          if (!parseArgs(args, "[B", &a0))
          {
            INT_CALL(object = String(a0));
            self->object = object;
            break;
          }
        }
        {
          JArray< jchar > a0((jobject) NULL);
          String object((jobject) NULL);

          if (!parseArgs(args, "[C", &a0))
          {
            INT_CALL(object = String(a0));
            self->object = object;
            break;
          }
        }
        goto err;
       case 2:
        {
          JArray< jbyte > a0((jobject) NULL);
          String a1((jobject) NULL);
          String object((jobject) NULL);

          if (!parseArgs(args, "[Bs", &a0, &a1))
          {
            INT_CALL(object = String(a0, a1));
            self->object = object;
            break;
          }
        }
        {
          JArray< jbyte > a0((jobject) NULL);
          jint a1;
          String object((jobject) NULL);

          if (!parseArgs(args, "[BI", &a0, &a1))
          {
            INT_CALL(object = String(a0, a1));
            self->object = object;
            break;
          }
        }
        goto err;
       case 3:
        {
          JArray< jbyte > a0((jobject) NULL);
          jint a1;
          jint a2;
          String object((jobject) NULL);

          if (!parseArgs(args, "[BII", &a0, &a1, &a2))
          {
            INT_CALL(object = String(a0, a1, a2));
            self->object = object;
            break;
          }
        }
        {
          JArray< jchar > a0((jobject) NULL);
          jint a1;
          jint a2;
          String object((jobject) NULL);

          if (!parseArgs(args, "[CII", &a0, &a1, &a2))
          {
            INT_CALL(object = String(a0, a1, a2));
            self->object = object;
            break;
          }
        }
        {
          JArray< jint > a0((jobject) NULL);
          jint a1;
          jint a2;
          String object((jobject) NULL);

          if (!parseArgs(args, "[III", &a0, &a1, &a2))
          {
            INT_CALL(object = String(a0, a1, a2));
            self->object = object;
            break;
          }
        }
        goto err;
       case 4:
        {
          JArray< jbyte > a0((jobject) NULL);
          jint a1;
          jint a2;
          String a3((jobject) NULL);
          String object((jobject) NULL);

          if (!parseArgs(args, "[BIIs", &a0, &a1, &a2, &a3))
          {
            INT_CALL(object = String(a0, a1, a2, a3));
            self->object = object;
            break;
          }
        }
        {
          JArray< jbyte > a0((jobject) NULL);
          jint a1;
          jint a2;
          jint a3;
          String object((jobject) NULL);

          if (!parseArgs(args, "[BIII", &a0, &a1, &a2, &a3))
          {
            INT_CALL(object = String(a0, a1, a2, a3));
            self->object = object;
            break;
          }
        }
       default:
       err:
        PyErr_SetArgsError((PyObject *) self, "__init__", args);
        return -1;
      }

      return 0;
    }

    static PyObject *t_String_charAt(t_String *self, PyObject *arg)
    {
      jint a0;
      jchar result;

      if (!parseArg(arg, "I", &a0))
      {
        OBJ_CALL(result = self->object.charAt(a0));
        return c2p(result);
      }

      PyErr_SetArgsError((PyObject *) self, "charAt", arg);
      return NULL;
    }

    static PyObject *t_String_codePointAt(t_String *self, PyObject *arg)
    {
      jint a0;
      jint result;

      if (!parseArg(arg, "I", &a0))
      {
        OBJ_CALL(result = self->object.codePointAt(a0));
        return PyLong_FromLong((long) result);
      }

      PyErr_SetArgsError((PyObject *) self, "codePointAt", arg);
      return NULL;
    }

    static PyObject *t_String_codePointBefore(t_String *self, PyObject *arg)
    {
      jint a0;
      jint result;

      if (!parseArg(arg, "I", &a0))
      {
        OBJ_CALL(result = self->object.codePointBefore(a0));
        return PyLong_FromLong((long) result);
      }

      PyErr_SetArgsError((PyObject *) self, "codePointBefore", arg);
      return NULL;
    }

    static PyObject *t_String_codePointCount(t_String *self, PyObject *args)
    {
      jint a0;
      jint a1;
      jint result;

      if (!parseArgs(args, "II", &a0, &a1))
      {
        OBJ_CALL(result = self->object.codePointCount(a0, a1));
        return PyLong_FromLong((long) result);
      }

      PyErr_SetArgsError((PyObject *) self, "codePointCount", args);
      return NULL;
    }

    static PyObject *t_String_compareTo(t_String *self, PyObject *arg)
    {
      String a0((jobject) NULL);
      jint result;

      if (!parseArg(arg, "s", &a0))
      {
        OBJ_CALL(result = self->object.compareTo(a0));
        return PyLong_FromLong((long) result);
      }

      PyErr_SetArgsError((PyObject *) self, "compareTo", arg);
      return NULL;
    }

    static PyObject *t_String_compareToIgnoreCase(t_String *self, PyObject *arg)
    {
      String a0((jobject) NULL);
      jint result;

      if (!parseArg(arg, "s", &a0))
      {
        OBJ_CALL(result = self->object.compareToIgnoreCase(a0));
        return PyLong_FromLong((long) result);
      }

      PyErr_SetArgsError((PyObject *) self, "compareToIgnoreCase", arg);
      return NULL;
    }

    static PyObject *t_String_concat(t_String *self, PyObject *arg)
    {
      String a0((jobject) NULL);
      String result((jobject) NULL);

      if (!parseArg(arg, "s", &a0))
      {
        OBJ_CALL(result = self->object.concat(a0));
        return j2p(result);
      }

      PyErr_SetArgsError((PyObject *) self, "concat", arg);
      return NULL;
    }

    static PyObject *t_String_contains(t_String *self, PyObject *arg)
    {
      ::java::lang::CharSequence a0((jobject) NULL);
      jboolean result;

      if (!parseArg(arg, "O", ::java::lang::PY_TYPE(CharSequence), &a0))
      {
        OBJ_CALL(result = self->object.contains(a0));
        Py_RETURN_BOOL(result);
      }

      PyErr_SetArgsError((PyObject *) self, "contains", arg);
      return NULL;
    }

    static PyObject *t_String_contentEquals(t_String *self, PyObject *args)
    {
      switch (PyTuple_GET_SIZE(args)) {
       case 1:
        {
          ::java::lang::StringBuffer a0((jobject) NULL);
          jboolean result;

          if (!parseArgs(args, "k", ::java::lang::StringBuffer::initializeClass, &a0))
          {
            OBJ_CALL(result = self->object.contentEquals(a0));
            Py_RETURN_BOOL(result);
          }
        }
        {
          ::java::lang::CharSequence a0((jobject) NULL);
          jboolean result;

          if (!parseArgs(args, "O", ::java::lang::PY_TYPE(CharSequence), &a0))
          {
            OBJ_CALL(result = self->object.contentEquals(a0));
            Py_RETURN_BOOL(result);
          }
        }
      }

      PyErr_SetArgsError((PyObject *) self, "contentEquals", args);
      return NULL;
    }

    static PyObject *t_String_copyValueOf(PyTypeObject *type, PyObject *args)
    {
      switch (PyTuple_GET_SIZE(args)) {
       case 1:
        {
          JArray< jchar > a0((jobject) NULL);
          String result((jobject) NULL);

          if (!parseArgs(args, "[C", &a0))
          {
            OBJ_CALL(result = ::java::lang::String::copyValueOf(a0));
            return j2p(result);
          }
        }
        break;
       case 3:
        {
          JArray< jchar > a0((jobject) NULL);
          jint a1;
          jint a2;
          String result((jobject) NULL);

          if (!parseArgs(args, "[CII", &a0, &a1, &a2))
          {
            OBJ_CALL(result = ::java::lang::String::copyValueOf(a0, a1, a2));
            return j2p(result);
          }
        }
      }

      PyErr_SetArgsError(type, "copyValueOf", args);
      return NULL;
    }

    static PyObject *t_String_endsWith(t_String *self, PyObject *arg)
    {
      String a0((jobject) NULL);
      jboolean result;

      if (!parseArg(arg, "s", &a0))
      {
        OBJ_CALL(result = self->object.endsWith(a0));
        Py_RETURN_BOOL(result);
      }

      PyErr_SetArgsError((PyObject *) self, "endsWith", arg);
      return NULL;
    }

    static PyObject *t_String_equals(t_String *self, PyObject *args)
    {
      ::java::lang::Object a0((jobject) NULL);
      jboolean result;

      if (!parseArgs(args, "o", &a0))
      {
        OBJ_CALL(result = self->object.equals(a0));
        Py_RETURN_BOOL(result);
      }

      return callSuper(PY_TYPE(String), (PyObject *) self, "equals", args, 2);
    }

    static PyObject *t_String_equalsIgnoreCase(t_String *self, PyObject *arg)
    {
      String a0((jobject) NULL);
      jboolean result;

      if (!parseArg(arg, "s", &a0))
      {
        OBJ_CALL(result = self->object.equalsIgnoreCase(a0));
        Py_RETURN_BOOL(result);
      }

      PyErr_SetArgsError((PyObject *) self, "equalsIgnoreCase", arg);
      return NULL;
    }

    static PyObject *t_String_format(PyTypeObject *type, PyObject *args)
    {
      switch (PyTuple_GET_SIZE(args)) {
       case 2:
        {
          String a0((jobject) NULL);
          JArray< ::java::lang::Object > a1((jobject) NULL);
          String result((jobject) NULL);

          if (!parseArgs(args, "s[o", &a0, &a1))
          {
            OBJ_CALL(result = ::java::lang::String::format(a0, a1));
            return j2p(result);
          }
        }
        break;
       case 3:
        {
          ::java::util::Locale a0((jobject) NULL);
          String a1((jobject) NULL);
          JArray< ::java::lang::Object > a2((jobject) NULL);
          String result((jobject) NULL);

          if (!parseArgs(args, "ks[o", ::java::util::Locale::initializeClass, &a0, &a1, &a2))
          {
            OBJ_CALL(result = ::java::lang::String::format(a0, a1, a2));
            return j2p(result);
          }
        }
      }

      PyErr_SetArgsError(type, "format", args);
      return NULL;
    }

    static PyObject *t_String_getBytes(t_String *self, PyObject *args)
    {
      switch (PyTuple_GET_SIZE(args)) {
       case 0:
        {
          JArray< jbyte > result((jobject) NULL);
          OBJ_CALL(result = self->object.getBytes());
          return result.wrap();
        }
        break;
       case 1:
        {
          String a0((jobject) NULL);
          JArray< jbyte > result((jobject) NULL);

          if (!parseArgs(args, "s", &a0))
          {
            OBJ_CALL(result = self->object.getBytes(a0));
            return result.wrap();
          }
        }
        break;
       case 4:
        {
          jint a0;
          jint a1;
          JArray< jbyte > a2((jobject) NULL);
          jint a3;

          if (!parseArgs(args, "II[BI", &a0, &a1, &a2, &a3))
          {
            OBJ_CALL(self->object.getBytes(a0, a1, a2, a3));
            Py_RETURN_NONE;
          }
        }
      }

      PyErr_SetArgsError((PyObject *) self, "getBytes", args);
      return NULL;
    }

    static PyObject *t_String_getChars(t_String *self, PyObject *args)
    {
      jint a0;
      jint a1;
      JArray< jchar > a2((jobject) NULL);
      jint a3;

      if (!parseArgs(args, "II[CI", &a0, &a1, &a2, &a3))
      {
        OBJ_CALL(self->object.getChars(a0, a1, a2, a3));
        Py_RETURN_NONE;
      }

      PyErr_SetArgsError((PyObject *) self, "getChars", args);
      return NULL;
    }

    static PyObject *t_String_hashCode(t_String *self, PyObject *args)
    {
      jint result;

      if (!parseArgs(args, ""))
      {
        OBJ_CALL(result = self->object.hashCode());
        return PyLong_FromLong((long) result);
      }

      return callSuper(PY_TYPE(String), (PyObject *) self, "hashCode", args, 2);
    }

    static PyObject *t_String_indexOf(t_String *self, PyObject *args)
    {
      switch (PyTuple_GET_SIZE(args)) {
       case 1:
        {
          String a0((jobject) NULL);
          jint result;

          if (!parseArgs(args, "s", &a0))
          {
            OBJ_CALL(result = self->object.indexOf(a0));
            return PyLong_FromLong((long) result);
          }
        }
        {
          jint a0;
          jint result;

          if (!parseArgs(args, "I", &a0))
          {
            OBJ_CALL(result = self->object.indexOf(a0));
            return PyLong_FromLong((long) result);
          }
        }
        break;
       case 2:
        {
          String a0((jobject) NULL);
          jint a1;
          jint result;

          if (!parseArgs(args, "sI", &a0, &a1))
          {
            OBJ_CALL(result = self->object.indexOf(a0, a1));
            return PyLong_FromLong((long) result);
          }
        }
        {
          jint a0;
          jint a1;
          jint result;

          if (!parseArgs(args, "II", &a0, &a1))
          {
            OBJ_CALL(result = self->object.indexOf(a0, a1));
            return PyLong_FromLong((long) result);
          }
        }
      }

      PyErr_SetArgsError((PyObject *) self, "indexOf", args);
      return NULL;
    }

    static PyObject *t_String_intern(t_String *self)
    {
      String result((jobject) NULL);
      OBJ_CALL(result = self->object.intern());
      return j2p(result);
    }

    static PyObject *t_String_isEmpty(t_String *self)
    {
      jboolean result;
      OBJ_CALL(result = self->object.isEmpty());
      Py_RETURN_BOOL(result);
    }

    static PyObject *t_String_join(PyTypeObject *type, PyObject *args)
    {
      switch (PyTuple_GET_SIZE(args)) {
       case 2:
        {
          ::java::lang::CharSequence a0((jobject) NULL);
          JArray< ::java::lang::CharSequence > a1((jobject) NULL);
          String result((jobject) NULL);

          if (!parseArgs(args, "O[O", ::java::lang::PY_TYPE(CharSequence), ::java::lang::PY_TYPE(CharSequence), &a0, &a1))
          {
            OBJ_CALL(result = ::java::lang::String::join(a0, a1));
            return j2p(result);
          }
        }
        {
          ::java::lang::CharSequence a0((jobject) NULL);
          ::java::lang::Iterable a1((jobject) NULL);
          PyTypeObject **p1;
          String result((jobject) NULL);

          if (!parseArgs(args, "OK", ::java::lang::PY_TYPE(CharSequence), ::java::lang::Iterable::initializeClass, &a0, &a1, &p1, ::java::lang::t_Iterable::parameters_))
          {
            OBJ_CALL(result = ::java::lang::String::join(a0, a1));
            return j2p(result);
          }
        }
      }

      PyErr_SetArgsError(type, "join", args);
      return NULL;
    }

    static PyObject *t_String_lastIndexOf(t_String *self, PyObject *args)
    {
      switch (PyTuple_GET_SIZE(args)) {
       case 1:
        {
          String a0((jobject) NULL);
          jint result;

          if (!parseArgs(args, "s", &a0))
          {
            OBJ_CALL(result = self->object.lastIndexOf(a0));
            return PyLong_FromLong((long) result);
          }
        }
        {
          jint a0;
          jint result;

          if (!parseArgs(args, "I", &a0))
          {
            OBJ_CALL(result = self->object.lastIndexOf(a0));
            return PyLong_FromLong((long) result);
          }
        }
        break;
       case 2:
        {
          String a0((jobject) NULL);
          jint a1;
          jint result;

          if (!parseArgs(args, "sI", &a0, &a1))
          {
            OBJ_CALL(result = self->object.lastIndexOf(a0, a1));
            return PyLong_FromLong((long) result);
          }
        }
        {
          jint a0;
          jint a1;
          jint result;

          if (!parseArgs(args, "II", &a0, &a1))
          {
            OBJ_CALL(result = self->object.lastIndexOf(a0, a1));
            return PyLong_FromLong((long) result);
          }
        }
      }

      PyErr_SetArgsError((PyObject *) self, "lastIndexOf", args);
      return NULL;
    }

    static PyObject *t_String_length(t_String *self)
    {
      jint result;
      OBJ_CALL(result = self->object.length());
      return PyLong_FromLong((long) result);
    }

    static PyObject *t_String_matches(t_String *self, PyObject *arg)
    {
      String a0((jobject) NULL);
      jboolean result;

      if (!parseArg(arg, "s", &a0))
      {
        OBJ_CALL(result = self->object.matches(a0));
        Py_RETURN_BOOL(result);
      }

      PyErr_SetArgsError((PyObject *) self, "matches", arg);
      return NULL;
    }

    static PyObject *t_String_offsetByCodePoints(t_String *self, PyObject *args)
    {
      jint a0;
      jint a1;
      jint result;

      if (!parseArgs(args, "II", &a0, &a1))
      {
        OBJ_CALL(result = self->object.offsetByCodePoints(a0, a1));
        return PyLong_FromLong((long) result);
      }

      PyErr_SetArgsError((PyObject *) self, "offsetByCodePoints", args);
      return NULL;
    }

    static PyObject *t_String_regionMatches(t_String *self, PyObject *args)
    {
      switch (PyTuple_GET_SIZE(args)) {
       case 4:
        {
          jint a0;
          String a1((jobject) NULL);
          jint a2;
          jint a3;
          jboolean result;

          if (!parseArgs(args, "IsII", &a0, &a1, &a2, &a3))
          {
            OBJ_CALL(result = self->object.regionMatches(a0, a1, a2, a3));
            Py_RETURN_BOOL(result);
          }
        }
        break;
       case 5:
        {
          jboolean a0;
          jint a1;
          String a2((jobject) NULL);
          jint a3;
          jint a4;
          jboolean result;

          if (!parseArgs(args, "ZIsII", &a0, &a1, &a2, &a3, &a4))
          {
            OBJ_CALL(result = self->object.regionMatches(a0, a1, a2, a3, a4));
            Py_RETURN_BOOL(result);
          }
        }
      }

      PyErr_SetArgsError((PyObject *) self, "regionMatches", args);
      return NULL;
    }

    static PyObject *t_String_replace(t_String *self, PyObject *args)
    {
      switch (PyTuple_GET_SIZE(args)) {
       case 2:
        {
          jchar a0;
          jchar a1;
          String result((jobject) NULL);

          if (!parseArgs(args, "CC", &a0, &a1))
          {
            OBJ_CALL(result = self->object.replace(a0, a1));
            return j2p(result);
          }
        }
        {
          ::java::lang::CharSequence a0((jobject) NULL);
          ::java::lang::CharSequence a1((jobject) NULL);
          String result((jobject) NULL);

          if (!parseArgs(args, "OO", ::java::lang::PY_TYPE(CharSequence), ::java::lang::PY_TYPE(CharSequence), &a0, &a1))
          {
            OBJ_CALL(result = self->object.replace(a0, a1));
            return j2p(result);
          }
        }
      }

      PyErr_SetArgsError((PyObject *) self, "replace", args);
      return NULL;
    }

    static PyObject *t_String_replaceAll(t_String *self, PyObject *args)
    {
      String a0((jobject) NULL);
      String a1((jobject) NULL);
      String result((jobject) NULL);

      if (!parseArgs(args, "ss", &a0, &a1))
      {
        OBJ_CALL(result = self->object.replaceAll(a0, a1));
        return j2p(result);
      }

      PyErr_SetArgsError((PyObject *) self, "replaceAll", args);
      return NULL;
    }

    static PyObject *t_String_replaceFirst(t_String *self, PyObject *args)
    {
      String a0((jobject) NULL);
      String a1((jobject) NULL);
      String result((jobject) NULL);

      if (!parseArgs(args, "ss", &a0, &a1))
      {
        OBJ_CALL(result = self->object.replaceFirst(a0, a1));
        return j2p(result);
      }

      PyErr_SetArgsError((PyObject *) self, "replaceFirst", args);
      return NULL;
    }

    static PyObject *t_String_split(t_String *self, PyObject *args)
    {
      switch (PyTuple_GET_SIZE(args)) {
       case 1:
        {
          String a0((jobject) NULL);
          JArray< String > result((jobject) NULL);

          if (!parseArgs(args, "s", &a0))
          {
            OBJ_CALL(result = self->object.split(a0));
            return JArray<jstring>(result.this$).wrap();
          }
        }
        break;
       case 2:
        {
          String a0((jobject) NULL);
          jint a1;
          JArray< String > result((jobject) NULL);

          if (!parseArgs(args, "sI", &a0, &a1))
          {
            OBJ_CALL(result = self->object.split(a0, a1));
            return JArray<jstring>(result.this$).wrap();
          }
        }
      }

      PyErr_SetArgsError((PyObject *) self, "split", args);
      return NULL;
    }

    static PyObject *t_String_startsWith(t_String *self, PyObject *args)
    {
      switch (PyTuple_GET_SIZE(args)) {
       case 1:
        {
          String a0((jobject) NULL);
          jboolean result;

          if (!parseArgs(args, "s", &a0))
          {
            OBJ_CALL(result = self->object.startsWith(a0));
            Py_RETURN_BOOL(result);
          }
        }
        break;
       case 2:
        {
          String a0((jobject) NULL);
          jint a1;
          jboolean result;

          if (!parseArgs(args, "sI", &a0, &a1))
          {
            OBJ_CALL(result = self->object.startsWith(a0, a1));
            Py_RETURN_BOOL(result);
          }
        }
      }

      PyErr_SetArgsError((PyObject *) self, "startsWith", args);
      return NULL;
    }

    static PyObject *t_String_subSequence(t_String *self, PyObject *args)
    {
      jint a0;
      jint a1;
      ::java::lang::CharSequence result((jobject) NULL);

      if (!parseArgs(args, "II", &a0, &a1))
      {
        OBJ_CALL(result = self->object.subSequence(a0, a1));
        return ::java::lang::t_CharSequence::wrap_Object(result);
      }

      PyErr_SetArgsError((PyObject *) self, "subSequence", args);
      return NULL;
    }

    static PyObject *t_String_substring(t_String *self, PyObject *args)
    {
      switch (PyTuple_GET_SIZE(args)) {
       case 1:
        {
          jint a0;
          String result((jobject) NULL);

          if (!parseArgs(args, "I", &a0))
          {
            OBJ_CALL(result = self->object.substring(a0));
            return j2p(result);
          }
        }
        break;
       case 2:
        {
          jint a0;
          jint a1;
          String result((jobject) NULL);

          if (!parseArgs(args, "II", &a0, &a1))
          {
            OBJ_CALL(result = self->object.substring(a0, a1));
            return j2p(result);
          }
        }
      }

      PyErr_SetArgsError((PyObject *) self, "substring", args);
      return NULL;
    }

    static PyObject *t_String_toCharArray(t_String *self)
    {
      JArray< jchar > result((jobject) NULL);
      OBJ_CALL(result = self->object.toCharArray());
      return result.wrap();
    }

    static PyObject *t_String_toLowerCase(t_String *self, PyObject *args)
    {
      switch (PyTuple_GET_SIZE(args)) {
       case 0:
        {
          String result((jobject) NULL);
          OBJ_CALL(result = self->object.toLowerCase());
          return j2p(result);
        }
        break;
       case 1:
        {
          ::java::util::Locale a0((jobject) NULL);
          String result((jobject) NULL);

          if (!parseArgs(args, "k", ::java::util::Locale::initializeClass, &a0))
          {
            OBJ_CALL(result = self->object.toLowerCase(a0));
            return j2p(result);
          }
        }
      }

      PyErr_SetArgsError((PyObject *) self, "toLowerCase", args);
      return NULL;
    }

    static PyObject *t_String_toString(t_String *self, PyObject *args)
    {
      String result((jobject) NULL);

      if (!parseArgs(args, ""))
      {
        OBJ_CALL(result = self->object.toString());
        return j2p(result);
      }

      return callSuper(PY_TYPE(String), (PyObject *) self, "toString", args, 2);
    }

    static PyObject *t_String_toUpperCase(t_String *self, PyObject *args)
    {
      switch (PyTuple_GET_SIZE(args)) {
       case 0:
        {
          String result((jobject) NULL);
          OBJ_CALL(result = self->object.toUpperCase());
          return j2p(result);
        }
        break;
       case 1:
        {
          ::java::util::Locale a0((jobject) NULL);
          String result((jobject) NULL);

          if (!parseArgs(args, "k", ::java::util::Locale::initializeClass, &a0))
          {
            OBJ_CALL(result = self->object.toUpperCase(a0));
            return j2p(result);
          }
        }
      }

      PyErr_SetArgsError((PyObject *) self, "toUpperCase", args);
      return NULL;
    }

    static PyObject *t_String_trim(t_String *self)
    {
      String result((jobject) NULL);
      OBJ_CALL(result = self->object.trim());
      return j2p(result);
    }

    static PyObject *t_String_valueOf(PyTypeObject *type, PyObject *args)
    {
      switch (PyTuple_GET_SIZE(args)) {
       case 1:
        {
          JArray< jchar > a0((jobject) NULL);
          String result((jobject) NULL);

          if (!parseArgs(args, "[C", &a0))
          {
            OBJ_CALL(result = ::java::lang::String::valueOf(a0));
            return j2p(result);
          }
        }
        {
          jboolean a0;
          String result((jobject) NULL);

          if (!parseArgs(args, "Z", &a0))
          {
            OBJ_CALL(result = ::java::lang::String::valueOf(a0));
            return j2p(result);
          }
        }
        {
          jchar a0;
          String result((jobject) NULL);

          if (!parseArgs(args, "C", &a0))
          {
            OBJ_CALL(result = ::java::lang::String::valueOf(a0));
            return j2p(result);
          }
        }
        {
          jdouble a0;
          String result((jobject) NULL);

          if (!parseArgs(args, "D", &a0))
          {
            OBJ_CALL(result = ::java::lang::String::valueOf(a0));
            return j2p(result);
          }
        }
        {
          jfloat a0;
          String result((jobject) NULL);

          if (!parseArgs(args, "F", &a0))
          {
            OBJ_CALL(result = ::java::lang::String::valueOf(a0));
            return j2p(result);
          }
        }
        {
          jint a0;
          String result((jobject) NULL);

          if (!parseArgs(args, "I", &a0))
          {
            OBJ_CALL(result = ::java::lang::String::valueOf(a0));
            return j2p(result);
          }
        }
        {
          ::java::lang::Object a0((jobject) NULL);
          String result((jobject) NULL);

          if (!parseArgs(args, "o", &a0))
          {
            OBJ_CALL(result = ::java::lang::String::valueOf(a0));
            return j2p(result);
          }
        }
        {
          jlong a0;
          String result((jobject) NULL);

          if (!parseArgs(args, "J", &a0))
          {
            OBJ_CALL(result = ::java::lang::String::valueOf(a0));
            return j2p(result);
          }
        }
        break;
       case 3:
        {
          JArray< jchar > a0((jobject) NULL);
          jint a1;
          jint a2;
          String result((jobject) NULL);

          if (!parseArgs(args, "[CII", &a0, &a1, &a2))
          {
            OBJ_CALL(result = ::java::lang::String::valueOf(a0, a1, a2));
            return j2p(result);
          }
        }
      }

      PyErr_SetArgsError(type, "valueOf", args);
      return NULL;
    }

    static PyObject *t_String_get__bytes(t_String *self, void *data)
    {
      JArray< jbyte > value((jobject) NULL);
      OBJ_CALL(value = self->object.getBytes());
      return value.wrap();
    }

    static PyObject *t_String_get__empty(t_String *self, void *data)
    {
      jboolean value;
      OBJ_CALL(value = self->object.isEmpty());
      Py_RETURN_BOOL(value);
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/ConstantScoreQuery.h"
#include "org/apache/lucene/index/IndexReader.h"
#include "org/apache/lucene/search/IndexSearcher.h"
#include "java/lang/Class.h"
#include "java/lang/Object.h"
#include "java/lang/String.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/search/QueryVisitor.h"
#include "org/apache/lucene/search/ScoreMode.h"
#include "org/apache/lucene/search/Weight.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {

        ::java::lang::Class *ConstantScoreQuery::class$ = NULL;
        jmethodID *ConstantScoreQuery::mids$ = NULL;
        bool ConstantScoreQuery::live$ = false;

        jclass ConstantScoreQuery::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/search/ConstantScoreQuery");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_ede25bb9d48237ac] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/search/Query;)V");
            mids$[mid_createWeight_f0ef0b5ea369ac06] = env->getMethodID(cls, "createWeight", "(Lorg/apache/lucene/search/IndexSearcher;Lorg/apache/lucene/search/ScoreMode;F)Lorg/apache/lucene/search/Weight;");
            mids$[mid_equals_8b72f2dcdde6fd1d] = env->getMethodID(cls, "equals", "(Ljava/lang/Object;)Z");
            mids$[mid_getQuery_cbf839a480265450] = env->getMethodID(cls, "getQuery", "()Lorg/apache/lucene/search/Query;");
            mids$[mid_hashCode_9972fcc56b44e79d] = env->getMethodID(cls, "hashCode", "()I");
            mids$[mid_rewrite_bb52f19a8254555c] = env->getMethodID(cls, "rewrite", "(Lorg/apache/lucene/index/IndexReader;)Lorg/apache/lucene/search/Query;");
            mids$[mid_toString_9bfa75c9f141b67f] = env->getMethodID(cls, "toString", "(Ljava/lang/String;)Ljava/lang/String;");
            mids$[mid_visit_f9e6207006c5b6c1] = env->getMethodID(cls, "visit", "(Lorg/apache/lucene/search/QueryVisitor;)V");

            class$ = new ::java::lang::Class(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        ConstantScoreQuery::ConstantScoreQuery(const ::org::apache::lucene::search::Query & a0) : ::org::apache::lucene::search::Query(env->newObject(initializeClass, &mids$, mid_init$_ede25bb9d48237ac, a0.this$)) {}

        ::org::apache::lucene::search::Weight ConstantScoreQuery::createWeight(const ::org::apache::lucene::search::IndexSearcher & a0, const ::org::apache::lucene::search::ScoreMode & a1, jfloat a2) const
        {
          return ::org::apache::lucene::search::Weight(env->callObjectMethod(this$, mids$[mid_createWeight_f0ef0b5ea369ac06], a0.this$, a1.this$, a2));
        }

        jboolean ConstantScoreQuery::equals(const ::java::lang::Object & a0) const
        {
          return env->callBooleanMethod(this$, mids$[mid_equals_8b72f2dcdde6fd1d], a0.this$);
        }

        ::org::apache::lucene::search::Query ConstantScoreQuery::getQuery() const
        {
          return ::org::apache::lucene::search::Query(env->callObjectMethod(this$, mids$[mid_getQuery_cbf839a480265450]));
        }

        jint ConstantScoreQuery::hashCode() const
        {
          return env->callIntMethod(this$, mids$[mid_hashCode_9972fcc56b44e79d]);
        }

        ::org::apache::lucene::search::Query ConstantScoreQuery::rewrite(const ::org::apache::lucene::index::IndexReader & a0) const
        {
          return ::org::apache::lucene::search::Query(env->callObjectMethod(this$, mids$[mid_rewrite_bb52f19a8254555c], a0.this$));
        }

        ::java::lang::String ConstantScoreQuery::toString(const ::java::lang::String & a0) const
        {
          return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_9bfa75c9f141b67f], a0.this$));
        }

        void ConstantScoreQuery::visit(const ::org::apache::lucene::search::QueryVisitor & a0) const
        {
          env->callVoidMethod(this$, mids$[mid_visit_f9e6207006c5b6c1], a0.this$);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        static PyObject *t_ConstantScoreQuery_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_ConstantScoreQuery_instance_(PyTypeObject *type, PyObject *arg);
        static int t_ConstantScoreQuery_init_(t_ConstantScoreQuery *self, PyObject *args, PyObject *kwds);
        static PyObject *t_ConstantScoreQuery_createWeight(t_ConstantScoreQuery *self, PyObject *args);
        static PyObject *t_ConstantScoreQuery_equals(t_ConstantScoreQuery *self, PyObject *args);
        static PyObject *t_ConstantScoreQuery_getQuery(t_ConstantScoreQuery *self);
        static PyObject *t_ConstantScoreQuery_hashCode(t_ConstantScoreQuery *self, PyObject *args);
        static PyObject *t_ConstantScoreQuery_rewrite(t_ConstantScoreQuery *self, PyObject *args);
        static PyObject *t_ConstantScoreQuery_toString(t_ConstantScoreQuery *self, PyObject *args);
        static PyObject *t_ConstantScoreQuery_visit(t_ConstantScoreQuery *self, PyObject *args);
        static PyObject *t_ConstantScoreQuery_get__query(t_ConstantScoreQuery *self, void *data);
        static PyGetSetDef t_ConstantScoreQuery__fields_[] = {
          DECLARE_GET_FIELD(t_ConstantScoreQuery, query),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_ConstantScoreQuery__methods_[] = {
          DECLARE_METHOD(t_ConstantScoreQuery, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_ConstantScoreQuery, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_ConstantScoreQuery, createWeight, METH_VARARGS),
          DECLARE_METHOD(t_ConstantScoreQuery, equals, METH_VARARGS),
          DECLARE_METHOD(t_ConstantScoreQuery, getQuery, METH_NOARGS),
          DECLARE_METHOD(t_ConstantScoreQuery, hashCode, METH_VARARGS),
          DECLARE_METHOD(t_ConstantScoreQuery, rewrite, METH_VARARGS),
          DECLARE_METHOD(t_ConstantScoreQuery, toString, METH_VARARGS),
          DECLARE_METHOD(t_ConstantScoreQuery, visit, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        static PyType_Slot PY_TYPE_SLOTS(ConstantScoreQuery)[] = {
          { Py_tp_methods, t_ConstantScoreQuery__methods_ },
          { Py_tp_init, (void *) t_ConstantScoreQuery_init_ },
          { Py_tp_getset, t_ConstantScoreQuery__fields_ },
          { 0, NULL }
        };

        static PyType_Def *PY_TYPE_BASES(ConstantScoreQuery)[] = {
          &PY_TYPE_DEF(::org::apache::lucene::search::Query),
          NULL
        };

        DEFINE_TYPE(ConstantScoreQuery, t_ConstantScoreQuery, ConstantScoreQuery);

        void t_ConstantScoreQuery::install(PyObject *module)
        {
          installType(&PY_TYPE(ConstantScoreQuery), &PY_TYPE_DEF(ConstantScoreQuery), module, "ConstantScoreQuery", 0);
        }

        void t_ConstantScoreQuery::initialize(PyObject *module)
        {
          PyObject_SetAttrString((PyObject *) PY_TYPE(ConstantScoreQuery), "class_", make_descriptor(ConstantScoreQuery::initializeClass, 1));
          PyObject_SetAttrString((PyObject *) PY_TYPE(ConstantScoreQuery), "wrapfn_", make_descriptor(t_ConstantScoreQuery::wrap_jobject));
          PyObject_SetAttrString((PyObject *) PY_TYPE(ConstantScoreQuery), "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_ConstantScoreQuery_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, ConstantScoreQuery::initializeClass, 1)))
            return NULL;
          return t_ConstantScoreQuery::wrap_Object(ConstantScoreQuery(((t_ConstantScoreQuery *) arg)->object.this$));
        }
        static PyObject *t_ConstantScoreQuery_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, ConstantScoreQuery::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_ConstantScoreQuery_init_(t_ConstantScoreQuery *self, PyObject *args, PyObject *kwds)
        {
          ::org::apache::lucene::search::Query a0((jobject) NULL);
          ConstantScoreQuery object((jobject) NULL);

          if (!parseArgs(args, "k", ::org::apache::lucene::search::Query::initializeClass, &a0))
          {
            INT_CALL(object = ConstantScoreQuery(a0));
            self->object = object;
          }
          else
          {
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }

        static PyObject *t_ConstantScoreQuery_createWeight(t_ConstantScoreQuery *self, PyObject *args)
        {
          ::org::apache::lucene::search::IndexSearcher a0((jobject) NULL);
          ::org::apache::lucene::search::ScoreMode a1((jobject) NULL);
          PyTypeObject **p1;
          jfloat a2;
          ::org::apache::lucene::search::Weight result((jobject) NULL);

          if (!parseArgs(args, "kKF", ::org::apache::lucene::search::IndexSearcher::initializeClass, ::org::apache::lucene::search::ScoreMode::initializeClass, &a0, &a1, &p1, ::org::apache::lucene::search::t_ScoreMode::parameters_, &a2))
          {
            OBJ_CALL(result = self->object.createWeight(a0, a1, a2));
            return ::org::apache::lucene::search::t_Weight::wrap_Object(result);
          }

          return callSuper(PY_TYPE(ConstantScoreQuery), (PyObject *) self, "createWeight", args, 2);
        }

        static PyObject *t_ConstantScoreQuery_equals(t_ConstantScoreQuery *self, PyObject *args)
        {
          ::java::lang::Object a0((jobject) NULL);
          jboolean result;

          if (!parseArgs(args, "o", &a0))
          {
            OBJ_CALL(result = self->object.equals(a0));
            Py_RETURN_BOOL(result);
          }

          return callSuper(PY_TYPE(ConstantScoreQuery), (PyObject *) self, "equals", args, 2);
        }

        static PyObject *t_ConstantScoreQuery_getQuery(t_ConstantScoreQuery *self)
        {
          ::org::apache::lucene::search::Query result((jobject) NULL);
          OBJ_CALL(result = self->object.getQuery());
          return ::org::apache::lucene::search::t_Query::wrap_Object(result);
        }

        static PyObject *t_ConstantScoreQuery_hashCode(t_ConstantScoreQuery *self, PyObject *args)
        {
          jint result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.hashCode());
            return PyLong_FromLong((long) result);
          }

          return callSuper(PY_TYPE(ConstantScoreQuery), (PyObject *) self, "hashCode", args, 2);
        }

        static PyObject *t_ConstantScoreQuery_rewrite(t_ConstantScoreQuery *self, PyObject *args)
        {
          ::org::apache::lucene::index::IndexReader a0((jobject) NULL);
          ::org::apache::lucene::search::Query result((jobject) NULL);

          if (!parseArgs(args, "k", ::org::apache::lucene::index::IndexReader::initializeClass, &a0))
          {
            OBJ_CALL(result = self->object.rewrite(a0));
            return ::org::apache::lucene::search::t_Query::wrap_Object(result);
          }

          return callSuper(PY_TYPE(ConstantScoreQuery), (PyObject *) self, "rewrite", args, 2);
        }

        static PyObject *t_ConstantScoreQuery_toString(t_ConstantScoreQuery *self, PyObject *args)
        {
          ::java::lang::String a0((jobject) NULL);
          ::java::lang::String result((jobject) NULL);

          if (!parseArgs(args, "s", &a0))
          {
            OBJ_CALL(result = self->object.toString(a0));
            return j2p(result);
          }

          return callSuper(PY_TYPE(ConstantScoreQuery), (PyObject *) self, "toString", args, 2);
        }

        static PyObject *t_ConstantScoreQuery_visit(t_ConstantScoreQuery *self, PyObject *args)
        {
          ::org::apache::lucene::search::QueryVisitor a0((jobject) NULL);

          if (!parseArgs(args, "k", ::org::apache::lucene::search::QueryVisitor::initializeClass, &a0))
          {
            OBJ_CALL(self->object.visit(a0));
            Py_RETURN_NONE;
          }

          return callSuper(PY_TYPE(ConstantScoreQuery), (PyObject *) self, "visit", args, 2);
        }

        static PyObject *t_ConstantScoreQuery_get__query(t_ConstantScoreQuery *self, void *data)
        {
          ::org::apache::lucene::search::Query value((jobject) NULL);
          OBJ_CALL(value = self->object.getQuery());
          return ::org::apache::lucene::search::t_Query::wrap_Object(value);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queryparser/flexible/core/parser/EscapeQuerySyntax$Type.h"
#include "org/apache/lucene/queryparser/flexible/core/parser/EscapeQuerySyntax$Type.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace core {
            namespace parser {

              ::java::lang::Class *EscapeQuerySyntax$Type::class$ = NULL;
              jmethodID *EscapeQuerySyntax$Type::mids$ = NULL;
              bool EscapeQuerySyntax$Type::live$ = false;
              EscapeQuerySyntax$Type *EscapeQuerySyntax$Type::NORMAL = NULL;
              EscapeQuerySyntax$Type *EscapeQuerySyntax$Type::STRING = NULL;

              jclass EscapeQuerySyntax$Type::initializeClass(bool getOnly)
              {
                if (getOnly)
                  return (jclass) (live$ ? class$->this$ : NULL);
                if (class$ == NULL)
                {
                  jclass cls = (jclass) env->findClass("org/apache/lucene/queryparser/flexible/core/parser/EscapeQuerySyntax$Type");

                  mids$ = new jmethodID[max_mid];
                  mids$[mid_valueOf_9fc06218c73360ce] = env->getStaticMethodID(cls, "valueOf", "(Ljava/lang/String;)Lorg/apache/lucene/queryparser/flexible/core/parser/EscapeQuerySyntax$Type;");
                  mids$[mid_values_e4d89f35305a1ec5] = env->getStaticMethodID(cls, "values", "()[Lorg/apache/lucene/queryparser/flexible/core/parser/EscapeQuerySyntax$Type;");

                  class$ = new ::java::lang::Class(cls);
                  cls = (jclass) class$->this$;

                  NORMAL = new EscapeQuerySyntax$Type(env->getStaticObjectField(cls, "NORMAL", "Lorg/apache/lucene/queryparser/flexible/core/parser/EscapeQuerySyntax$Type;"));
                  STRING = new EscapeQuerySyntax$Type(env->getStaticObjectField(cls, "STRING", "Lorg/apache/lucene/queryparser/flexible/core/parser/EscapeQuerySyntax$Type;"));
                  live$ = true;
                }
                return (jclass) class$->this$;
              }

              EscapeQuerySyntax$Type EscapeQuerySyntax$Type::valueOf(const ::java::lang::String & a0)
              {
                jclass cls = env->getClass(initializeClass);
                return EscapeQuerySyntax$Type(env->callStaticObjectMethod(cls, mids$[mid_valueOf_9fc06218c73360ce], a0.this$));
              }

              JArray< EscapeQuerySyntax$Type > EscapeQuerySyntax$Type::values()
              {
                jclass cls = env->getClass(initializeClass);
                return JArray< EscapeQuerySyntax$Type >(env->callStaticObjectMethod(cls, mids$[mid_values_e4d89f35305a1ec5]));
              }
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace core {
            namespace parser {
              static PyObject *t_EscapeQuerySyntax$Type_cast_(PyTypeObject *type, PyObject *arg);
              static PyObject *t_EscapeQuerySyntax$Type_instance_(PyTypeObject *type, PyObject *arg);
              static PyObject *t_EscapeQuerySyntax$Type_of_(t_EscapeQuerySyntax$Type *self, PyObject *args);
              static PyObject *t_EscapeQuerySyntax$Type_valueOf(PyTypeObject *type, PyObject *args);
              static PyObject *t_EscapeQuerySyntax$Type_values(PyTypeObject *type);
              static PyObject *t_EscapeQuerySyntax$Type_get__parameters_(t_EscapeQuerySyntax$Type *self, void *data);
              static PyGetSetDef t_EscapeQuerySyntax$Type__fields_[] = {
                DECLARE_GET_FIELD(t_EscapeQuerySyntax$Type, parameters_),
                { NULL, NULL, NULL, NULL, NULL }
              };

              static PyMethodDef t_EscapeQuerySyntax$Type__methods_[] = {
                DECLARE_METHOD(t_EscapeQuerySyntax$Type, cast_, METH_O | METH_CLASS),
                DECLARE_METHOD(t_EscapeQuerySyntax$Type, instance_, METH_O | METH_CLASS),
                DECLARE_METHOD(t_EscapeQuerySyntax$Type, of_, METH_VARARGS),
                DECLARE_METHOD(t_EscapeQuerySyntax$Type, valueOf, METH_VARARGS | METH_CLASS),
                DECLARE_METHOD(t_EscapeQuerySyntax$Type, values, METH_NOARGS | METH_CLASS),
                { NULL, NULL, 0, NULL }
              };

              static PyType_Slot PY_TYPE_SLOTS(EscapeQuerySyntax$Type)[] = {
                { Py_tp_methods, t_EscapeQuerySyntax$Type__methods_ },
                { Py_tp_init, (void *) abstract_init },
                { Py_tp_getset, t_EscapeQuerySyntax$Type__fields_ },
                { 0, NULL }
              };

              static PyType_Def *PY_TYPE_BASES(EscapeQuerySyntax$Type)[] = {
                &PY_TYPE_DEF(::java::lang::Enum),
                NULL
              };

              DEFINE_TYPE(EscapeQuerySyntax$Type, t_EscapeQuerySyntax$Type, EscapeQuerySyntax$Type);
              PyObject *t_EscapeQuerySyntax$Type::wrap_Object(const EscapeQuerySyntax$Type& object, PyTypeObject *p0)
              {
                PyObject *obj = t_EscapeQuerySyntax$Type::wrap_Object(object);
                if (obj != NULL && obj != Py_None)
                {
                  t_EscapeQuerySyntax$Type *self = (t_EscapeQuerySyntax$Type *) obj;
                  self->parameters[0] = p0;
                }
                return obj;
              }

              PyObject *t_EscapeQuerySyntax$Type::wrap_jobject(const jobject& object, PyTypeObject *p0)
              {
                PyObject *obj = t_EscapeQuerySyntax$Type::wrap_jobject(object);
                if (obj != NULL && obj != Py_None)
                {
                  t_EscapeQuerySyntax$Type *self = (t_EscapeQuerySyntax$Type *) obj;
                  self->parameters[0] = p0;
                }
                return obj;
              }

              void t_EscapeQuerySyntax$Type::install(PyObject *module)
              {
                installType(&PY_TYPE(EscapeQuerySyntax$Type), &PY_TYPE_DEF(EscapeQuerySyntax$Type), module, "EscapeQuerySyntax$Type", 0);
              }

              void t_EscapeQuerySyntax$Type::initialize(PyObject *module)
              {
                PyObject_SetAttrString((PyObject *) PY_TYPE(EscapeQuerySyntax$Type), "class_", make_descriptor(EscapeQuerySyntax$Type::initializeClass, 1));
                PyObject_SetAttrString((PyObject *) PY_TYPE(EscapeQuerySyntax$Type), "wrapfn_", make_descriptor(t_EscapeQuerySyntax$Type::wrap_jobject));
                PyObject_SetAttrString((PyObject *) PY_TYPE(EscapeQuerySyntax$Type), "boxfn_", make_descriptor(boxObject));
                env->getClass(EscapeQuerySyntax$Type::initializeClass);
                PyObject_SetAttrString((PyObject *) PY_TYPE(EscapeQuerySyntax$Type), "NORMAL", make_descriptor(t_EscapeQuerySyntax$Type::wrap_Object(*EscapeQuerySyntax$Type::NORMAL)));
                PyObject_SetAttrString((PyObject *) PY_TYPE(EscapeQuerySyntax$Type), "STRING", make_descriptor(t_EscapeQuerySyntax$Type::wrap_Object(*EscapeQuerySyntax$Type::STRING)));
              }

              static PyObject *t_EscapeQuerySyntax$Type_cast_(PyTypeObject *type, PyObject *arg)
              {
                if (!(arg = castCheck(arg, EscapeQuerySyntax$Type::initializeClass, 1)))
                  return NULL;
                return t_EscapeQuerySyntax$Type::wrap_Object(EscapeQuerySyntax$Type(((t_EscapeQuerySyntax$Type *) arg)->object.this$));
              }
              static PyObject *t_EscapeQuerySyntax$Type_instance_(PyTypeObject *type, PyObject *arg)
              {
                if (!castCheck(arg, EscapeQuerySyntax$Type::initializeClass, 0))
                  Py_RETURN_FALSE;
                Py_RETURN_TRUE;
              }

              static PyObject *t_EscapeQuerySyntax$Type_of_(t_EscapeQuerySyntax$Type *self, PyObject *args)
              {
                if (!parseArg(args, "T", 1, &(self->parameters)))
                  Py_RETURN_SELF;
                return PyErr_SetArgsError((PyObject *) self, "of_", args);
              }

              static PyObject *t_EscapeQuerySyntax$Type_valueOf(PyTypeObject *type, PyObject *args)
              {
                ::java::lang::String a0((jobject) NULL);
                EscapeQuerySyntax$Type result((jobject) NULL);

                if (!parseArgs(args, "s", &a0))
                {
                  OBJ_CALL(result = ::org::apache::lucene::queryparser::flexible::core::parser::EscapeQuerySyntax$Type::valueOf(a0));
                  return t_EscapeQuerySyntax$Type::wrap_Object(result);
                }

                return callSuper(type, "valueOf", args, 2);
              }

              static PyObject *t_EscapeQuerySyntax$Type_values(PyTypeObject *type)
              {
                JArray< EscapeQuerySyntax$Type > result((jobject) NULL);
                OBJ_CALL(result = ::org::apache::lucene::queryparser::flexible::core::parser::EscapeQuerySyntax$Type::values());
                return JArray<jobject>(result.this$).wrap(t_EscapeQuerySyntax$Type::wrap_jobject);
              }
              static PyObject *t_EscapeQuerySyntax$Type_get__parameters_(t_EscapeQuerySyntax$Type *self, void *data)
              {
                return typeParameters(self->parameters, sizeof(self->parameters));
              }
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/index/MultiFields.h"
#include "org/apache/lucene/index/Terms.h"
#include "java/lang/Class.h"
#include "java/lang/String.h"
#include "java/util/Iterator.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/index/ReaderSlice.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {

        ::java::lang::Class *MultiFields::class$ = NULL;
        jmethodID *MultiFields::mids$ = NULL;
        bool MultiFields::live$ = false;

        jclass MultiFields::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/index/MultiFields");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_a210d123b2a46a50] = env->getMethodID(cls, "<init>", "([Lorg/apache/lucene/index/Fields;[Lorg/apache/lucene/index/ReaderSlice;)V");
            mids$[mid_iterator_233a192dadb0917d] = env->getMethodID(cls, "iterator", "()Ljava/util/Iterator;");
            mids$[mid_size_9972fcc56b44e79d] = env->getMethodID(cls, "size", "()I");
            mids$[mid_terms_3976802ad88273cd] = env->getMethodID(cls, "terms", "(Ljava/lang/String;)Lorg/apache/lucene/index/Terms;");

            class$ = new ::java::lang::Class(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        MultiFields::MultiFields(const JArray< ::org::apache::lucene::index::Fields > & a0, const JArray< ::org::apache::lucene::index::ReaderSlice > & a1) : ::org::apache::lucene::index::Fields(env->newObject(initializeClass, &mids$, mid_init$_a210d123b2a46a50, a0.this$, a1.this$)) {}

        ::java::util::Iterator MultiFields::iterator() const
        {
          return ::java::util::Iterator(env->callObjectMethod(this$, mids$[mid_iterator_233a192dadb0917d]));
        }

        jint MultiFields::size() const
        {
          return env->callIntMethod(this$, mids$[mid_size_9972fcc56b44e79d]);
        }

        ::org::apache::lucene::index::Terms MultiFields::terms(const ::java::lang::String & a0) const
        {
          return ::org::apache::lucene::index::Terms(env->callObjectMethod(this$, mids$[mid_terms_3976802ad88273cd], a0.this$));
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {
        static PyObject *t_MultiFields_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_MultiFields_instance_(PyTypeObject *type, PyObject *arg);
        static int t_MultiFields_init_(t_MultiFields *self, PyObject *args, PyObject *kwds);
        static PyObject *t_MultiFields_iterator(t_MultiFields *self, PyObject *args);
        static PyObject *t_MultiFields_size(t_MultiFields *self, PyObject *args);
        static PyObject *t_MultiFields_terms(t_MultiFields *self, PyObject *args);

        static PyMethodDef t_MultiFields__methods_[] = {
          DECLARE_METHOD(t_MultiFields, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_MultiFields, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_MultiFields, iterator, METH_VARARGS),
          DECLARE_METHOD(t_MultiFields, size, METH_VARARGS),
          DECLARE_METHOD(t_MultiFields, terms, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        static PyType_Slot PY_TYPE_SLOTS(MultiFields)[] = {
          { Py_tp_methods, t_MultiFields__methods_ },
          { Py_tp_init, (void *) t_MultiFields_init_ },
          { Py_tp_iter, (void *) ((PyObject *(*)(t_MultiFields *)) get_iterator< t_MultiFields >) },
          { Py_tp_iternext, (void *) 0 },
          { 0, NULL }
        };

        static PyType_Def *PY_TYPE_BASES(MultiFields)[] = {
          &PY_TYPE_DEF(::org::apache::lucene::index::Fields),
          NULL
        };

        DEFINE_TYPE(MultiFields, t_MultiFields, MultiFields);

        void t_MultiFields::install(PyObject *module)
        {
          installType(&PY_TYPE(MultiFields), &PY_TYPE_DEF(MultiFields), module, "MultiFields", 0);
        }

        void t_MultiFields::initialize(PyObject *module)
        {
          PyObject_SetAttrString((PyObject *) PY_TYPE(MultiFields), "class_", make_descriptor(MultiFields::initializeClass, 1));
          PyObject_SetAttrString((PyObject *) PY_TYPE(MultiFields), "wrapfn_", make_descriptor(t_MultiFields::wrap_jobject));
          PyObject_SetAttrString((PyObject *) PY_TYPE(MultiFields), "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_MultiFields_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, MultiFields::initializeClass, 1)))
            return NULL;
          return t_MultiFields::wrap_Object(MultiFields(((t_MultiFields *) arg)->object.this$));
        }
        static PyObject *t_MultiFields_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, MultiFields::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_MultiFields_init_(t_MultiFields *self, PyObject *args, PyObject *kwds)
        {
          JArray< ::org::apache::lucene::index::Fields > a0((jobject) NULL);
          JArray< ::org::apache::lucene::index::ReaderSlice > a1((jobject) NULL);
          MultiFields object((jobject) NULL);

          if (!parseArgs(args, "[k[k", ::org::apache::lucene::index::Fields::initializeClass, ::org::apache::lucene::index::ReaderSlice::initializeClass, &a0, &a1))
          {
            INT_CALL(object = MultiFields(a0, a1));
            self->object = object;
          }
          else
          {
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }

        static PyObject *t_MultiFields_iterator(t_MultiFields *self, PyObject *args)
        {
          ::java::util::Iterator result((jobject) NULL);

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.iterator());
            return ::java::util::t_Iterator::wrap_Object(result, ::java::lang::PY_TYPE(String));
          }

          return callSuper(PY_TYPE(MultiFields), (PyObject *) self, "iterator", args, 2);
        }

        static PyObject *t_MultiFields_size(t_MultiFields *self, PyObject *args)
        {
          jint result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.size());
            return PyLong_FromLong((long) result);
          }

          return callSuper(PY_TYPE(MultiFields), (PyObject *) self, "size", args, 2);
        }

        static PyObject *t_MultiFields_terms(t_MultiFields *self, PyObject *args)
        {
          ::java::lang::String a0((jobject) NULL);
          ::org::apache::lucene::index::Terms result((jobject) NULL);

          if (!parseArgs(args, "s", &a0))
          {
            OBJ_CALL(result = self->object.terms(a0));
            return ::org::apache::lucene::index::t_Terms::wrap_Object(result);
          }

          return callSuper(PY_TYPE(MultiFields), (PyObject *) self, "terms", args, 2);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/tokenattributes/PositionLengthAttribute.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace tokenattributes {

          ::java::lang::Class *PositionLengthAttribute::class$ = NULL;
          jmethodID *PositionLengthAttribute::mids$ = NULL;
          bool PositionLengthAttribute::live$ = false;

          jclass PositionLengthAttribute::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/tokenattributes/PositionLengthAttribute");

              mids$ = new jmethodID[max_mid];
              mids$[mid_getPositionLength_9972fcc56b44e79d] = env->getMethodID(cls, "getPositionLength", "()I");
              mids$[mid_setPositionLength_040c4cd0390c5aff] = env->getMethodID(cls, "setPositionLength", "(I)V");

              class$ = new ::java::lang::Class(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          jint PositionLengthAttribute::getPositionLength() const
          {
            return env->callIntMethod(this$, mids$[mid_getPositionLength_9972fcc56b44e79d]);
          }

          void PositionLengthAttribute::setPositionLength(jint a0) const
          {
            env->callVoidMethod(this$, mids$[mid_setPositionLength_040c4cd0390c5aff], a0);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace tokenattributes {
          static PyObject *t_PositionLengthAttribute_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_PositionLengthAttribute_instance_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_PositionLengthAttribute_getPositionLength(t_PositionLengthAttribute *self);
          static PyObject *t_PositionLengthAttribute_setPositionLength(t_PositionLengthAttribute *self, PyObject *arg);
          static PyObject *t_PositionLengthAttribute_get__positionLength(t_PositionLengthAttribute *self, void *data);
          static int t_PositionLengthAttribute_set__positionLength(t_PositionLengthAttribute *self, PyObject *arg, void *data);
          static PyGetSetDef t_PositionLengthAttribute__fields_[] = {
            DECLARE_GETSET_FIELD(t_PositionLengthAttribute, positionLength),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_PositionLengthAttribute__methods_[] = {
            DECLARE_METHOD(t_PositionLengthAttribute, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_PositionLengthAttribute, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_PositionLengthAttribute, getPositionLength, METH_NOARGS),
            DECLARE_METHOD(t_PositionLengthAttribute, setPositionLength, METH_O),
            { NULL, NULL, 0, NULL }
          };

          static PyType_Slot PY_TYPE_SLOTS(PositionLengthAttribute)[] = {
            { Py_tp_methods, t_PositionLengthAttribute__methods_ },
            { Py_tp_init, (void *) abstract_init },
            { Py_tp_getset, t_PositionLengthAttribute__fields_ },
            { 0, NULL }
          };

          static PyType_Def *PY_TYPE_BASES(PositionLengthAttribute)[] = {
            &PY_TYPE_DEF(::org::apache::lucene::util::Attribute),
            NULL
          };

          DEFINE_TYPE(PositionLengthAttribute, t_PositionLengthAttribute, PositionLengthAttribute);

          void t_PositionLengthAttribute::install(PyObject *module)
          {
            installType(&PY_TYPE(PositionLengthAttribute), &PY_TYPE_DEF(PositionLengthAttribute), module, "PositionLengthAttribute", 0);
          }

          void t_PositionLengthAttribute::initialize(PyObject *module)
          {
            PyObject_SetAttrString((PyObject *) PY_TYPE(PositionLengthAttribute), "class_", make_descriptor(PositionLengthAttribute::initializeClass, 1));
            PyObject_SetAttrString((PyObject *) PY_TYPE(PositionLengthAttribute), "wrapfn_", make_descriptor(t_PositionLengthAttribute::wrap_jobject));
            PyObject_SetAttrString((PyObject *) PY_TYPE(PositionLengthAttribute), "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_PositionLengthAttribute_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, PositionLengthAttribute::initializeClass, 1)))
              return NULL;
            return t_PositionLengthAttribute::wrap_Object(PositionLengthAttribute(((t_PositionLengthAttribute *) arg)->object.this$));
          }
          static PyObject *t_PositionLengthAttribute_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, PositionLengthAttribute::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static PyObject *t_PositionLengthAttribute_getPositionLength(t_PositionLengthAttribute *self)
          {
            jint result;
            OBJ_CALL(result = self->object.getPositionLength());
            return PyLong_FromLong((long) result);
          }

          static PyObject *t_PositionLengthAttribute_setPositionLength(t_PositionLengthAttribute *self, PyObject *arg)
          {
            jint a0;

            if (!parseArg(arg, "I", &a0))
            {
              OBJ_CALL(self->object.setPositionLength(a0));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError((PyObject *) self, "setPositionLength", arg);
            return NULL;
          }

          static PyObject *t_PositionLengthAttribute_get__positionLength(t_PositionLengthAttribute *self, void *data)
          {
            jint value;
            OBJ_CALL(value = self->object.getPositionLength());
            return PyLong_FromLong((long) value);
          }
          static int t_PositionLengthAttribute_set__positionLength(t_PositionLengthAttribute *self, PyObject *arg, void *data)
          {
            {
              jint value;
              if (!parseArg(arg, "I", &value))
              {
                INT_CALL(self->object.setPositionLength(value));
                return 0;
              }
            }
            PyErr_SetArgsError((PyObject *) self, "positionLength", arg);
            return -1;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/util/bkd/OfflinePointWriter.h"
#include "org/apache/lucene/store/IndexOutput.h"
#include "org/apache/lucene/util/bkd/PointWriter.h"
#include "org/apache/lucene/util/bkd/PointValue.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/store/Directory.h"
#include "org/apache/lucene/util/bkd/BKDConfig.h"
#include "java/lang/String.h"
#include "org/apache/lucene/util/bkd/PointReader.h"
#include "java/io/IOException.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        namespace bkd {

          ::java::lang::Class *OfflinePointWriter::class$ = NULL;
          jmethodID *OfflinePointWriter::mids$ = NULL;
          jfieldID *OfflinePointWriter::fids$ = NULL;
          bool OfflinePointWriter::live$ = false;

          jclass OfflinePointWriter::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/util/bkd/OfflinePointWriter");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_438d38762348dc27] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/util/bkd/BKDConfig;Lorg/apache/lucene/store/Directory;Ljava/lang/String;Ljava/lang/String;J)V");
              mids$[mid_append_c20445b6b5276287] = env->getMethodID(cls, "append", "(Lorg/apache/lucene/util/bkd/PointValue;)V");
              mids$[mid_append_2a8b02a5adcbf830] = env->getMethodID(cls, "append", "([BI)V");
              mids$[mid_close_f2cc1bce94666404] = env->getMethodID(cls, "close", "()V");
              mids$[mid_count_2e5ae9edcb9b072f] = env->getMethodID(cls, "count", "()J");
              mids$[mid_destroy_f2cc1bce94666404] = env->getMethodID(cls, "destroy", "()V");
              mids$[mid_getReader_d2caf9396a104071] = env->getMethodID(cls, "getReader", "(JJ)Lorg/apache/lucene/util/bkd/PointReader;");
              mids$[mid_toString_db9b55ba01e03e4b] = env->getMethodID(cls, "toString", "()Ljava/lang/String;");
              mids$[mid_getReader_20c0ebf323d9f672] = env->getMethodID(cls, "getReader", "(JJ[B)Lorg/apache/lucene/util/bkd/OfflinePointReader;");

              fids$ = new jfieldID[max_fid];
              fids$[fid_name] = env->getFieldID(cls, "name", "Ljava/lang/String;");
              fids$[fid_out] = env->getFieldID(cls, "out", "Lorg/apache/lucene/store/IndexOutput;");

              class$ = new ::java::lang::Class(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          OfflinePointWriter::OfflinePointWriter(const ::org::apache::lucene::util::bkd::BKDConfig & a0, const ::org::apache::lucene::store::Directory & a1, const ::java::lang::String & a2, const ::java::lang::String & a3, jlong a4) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_438d38762348dc27, a0.this$, a1.this$, a2.this$, a3.this$, a4)) {}

          void OfflinePointWriter::append(const ::org::apache::lucene::util::bkd::PointValue & a0) const
          {
            env->callVoidMethod(this$, mids$[mid_append_c20445b6b5276287], a0.this$);
          }

          void OfflinePointWriter::append(const JArray< jbyte > & a0, jint a1) const
          {
            env->callVoidMethod(this$, mids$[mid_append_2a8b02a5adcbf830], a0.this$, a1);
          }

          void OfflinePointWriter::close() const
          {
            env->callVoidMethod(this$, mids$[mid_close_f2cc1bce94666404]);
          }

          jlong OfflinePointWriter::count() const
          {
            return env->callLongMethod(this$, mids$[mid_count_2e5ae9edcb9b072f]);
          }

          void OfflinePointWriter::destroy() const
          {
            env->callVoidMethod(this$, mids$[mid_destroy_f2cc1bce94666404]);
          }

          ::org::apache::lucene::util::bkd::PointReader OfflinePointWriter::getReader(jlong a0, jlong a1) const
          {
            return ::org::apache::lucene::util::bkd::PointReader(env->callObjectMethod(this$, mids$[mid_getReader_d2caf9396a104071], a0, a1));
          }

          ::java::lang::String OfflinePointWriter::toString() const
          {
            return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_db9b55ba01e03e4b]));
          }

          ::java::lang::String OfflinePointWriter::_get_name() const
          {
            return ::java::lang::String(env->getObjectField(this$, fids$[fid_name]));
          }

          ::org::apache::lucene::store::IndexOutput OfflinePointWriter::_get_out() const
          {
            return ::org::apache::lucene::store::IndexOutput(env->getObjectField(this$, fids$[fid_out]));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        namespace bkd {
          static PyObject *t_OfflinePointWriter_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_OfflinePointWriter_instance_(PyTypeObject *type, PyObject *arg);
          static int t_OfflinePointWriter_init_(t_OfflinePointWriter *self, PyObject *args, PyObject *kwds);
          static PyObject *t_OfflinePointWriter_append(t_OfflinePointWriter *self, PyObject *args);
          static PyObject *t_OfflinePointWriter_close(t_OfflinePointWriter *self);
          static PyObject *t_OfflinePointWriter_count(t_OfflinePointWriter *self);
          static PyObject *t_OfflinePointWriter_destroy(t_OfflinePointWriter *self);
          static PyObject *t_OfflinePointWriter_getReader(t_OfflinePointWriter *self, PyObject *args);
          static PyObject *t_OfflinePointWriter_toString(t_OfflinePointWriter *self, PyObject *args);
          static PyObject *t_OfflinePointWriter_get__name(t_OfflinePointWriter *self, void *data);
          static PyObject *t_OfflinePointWriter_get__out(t_OfflinePointWriter *self, void *data);

          static PyGetSetDef t_OfflinePointWriter__fields_[] = {
            DECLARE_GET_FIELD(t_OfflinePointWriter, name),
            DECLARE_GET_FIELD(t_OfflinePointWriter, out),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_OfflinePointWriter__methods_[] = {
            DECLARE_METHOD(t_OfflinePointWriter, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_OfflinePointWriter, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_OfflinePointWriter, append, METH_VARARGS),
            DECLARE_METHOD(t_OfflinePointWriter, close, METH_NOARGS),
            DECLARE_METHOD(t_OfflinePointWriter, count, METH_NOARGS),
            DECLARE_METHOD(t_OfflinePointWriter, destroy, METH_NOARGS),
            DECLARE_METHOD(t_OfflinePointWriter, getReader, METH_VARARGS),
            DECLARE_METHOD(t_OfflinePointWriter, toString, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          static PyType_Slot PY_TYPE_SLOTS(OfflinePointWriter)[] = {
            { Py_tp_methods, t_OfflinePointWriter__methods_ },
            { Py_tp_init, (void *) t_OfflinePointWriter_init_ },
            { Py_tp_getset, t_OfflinePointWriter__fields_ },
            { 0, NULL }
          };

          static PyType_Def *PY_TYPE_BASES(OfflinePointWriter)[] = {
            &PY_TYPE_DEF(::java::lang::Object),
            NULL
          };

          DEFINE_TYPE(OfflinePointWriter, t_OfflinePointWriter, OfflinePointWriter);

          void t_OfflinePointWriter::install(PyObject *module)
          {
            installType(&PY_TYPE(OfflinePointWriter), &PY_TYPE_DEF(OfflinePointWriter), module, "OfflinePointWriter", 0);
          }

          void t_OfflinePointWriter::initialize(PyObject *module)
          {
            PyObject_SetAttrString((PyObject *) PY_TYPE(OfflinePointWriter), "class_", make_descriptor(OfflinePointWriter::initializeClass, 1));
            PyObject_SetAttrString((PyObject *) PY_TYPE(OfflinePointWriter), "wrapfn_", make_descriptor(t_OfflinePointWriter::wrap_jobject));
            PyObject_SetAttrString((PyObject *) PY_TYPE(OfflinePointWriter), "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_OfflinePointWriter_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, OfflinePointWriter::initializeClass, 1)))
              return NULL;
            return t_OfflinePointWriter::wrap_Object(OfflinePointWriter(((t_OfflinePointWriter *) arg)->object.this$));
          }
          static PyObject *t_OfflinePointWriter_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, OfflinePointWriter::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_OfflinePointWriter_init_(t_OfflinePointWriter *self, PyObject *args, PyObject *kwds)
          {
            ::org::apache::lucene::util::bkd::BKDConfig a0((jobject) NULL);
            ::org::apache::lucene::store::Directory a1((jobject) NULL);
            ::java::lang::String a2((jobject) NULL);
            ::java::lang::String a3((jobject) NULL);
            jlong a4;
            OfflinePointWriter object((jobject) NULL);

            if (!parseArgs(args, "kkssJ", ::org::apache::lucene::util::bkd::BKDConfig::initializeClass, ::org::apache::lucene::store::Directory::initializeClass, &a0, &a1, &a2, &a3, &a4))
            {
              INT_CALL(object = OfflinePointWriter(a0, a1, a2, a3, a4));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_OfflinePointWriter_append(t_OfflinePointWriter *self, PyObject *args)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 1:
              {
                ::org::apache::lucene::util::bkd::PointValue a0((jobject) NULL);

                if (!parseArgs(args, "k", ::org::apache::lucene::util::bkd::PointValue::initializeClass, &a0))
                {
                  OBJ_CALL(self->object.append(a0));
                  Py_RETURN_NONE;
                }
              }
              break;
             case 2:
              {
                JArray< jbyte > a0((jobject) NULL);
                jint a1;

                if (!parseArgs(args, "[BI", &a0, &a1))
                {
                  OBJ_CALL(self->object.append(a0, a1));
                  Py_RETURN_NONE;
                }
              }
            }

            PyErr_SetArgsError((PyObject *) self, "append", args);
            return NULL;
          }

          static PyObject *t_OfflinePointWriter_close(t_OfflinePointWriter *self)
          {
            OBJ_CALL(self->object.close());
            Py_RETURN_NONE;
          }

          static PyObject *t_OfflinePointWriter_count(t_OfflinePointWriter *self)
          {
            jlong result;
            OBJ_CALL(result = self->object.count());
            return PyLong_FromLongLong((PY_LONG_LONG) result);
          }

          static PyObject *t_OfflinePointWriter_destroy(t_OfflinePointWriter *self)
          {
            OBJ_CALL(self->object.destroy());
            Py_RETURN_NONE;
          }

          static PyObject *t_OfflinePointWriter_getReader(t_OfflinePointWriter *self, PyObject *args)
          {
            jlong a0;
            jlong a1;
            ::org::apache::lucene::util::bkd::PointReader result((jobject) NULL);

            if (!parseArgs(args, "JJ", &a0, &a1))
            {
              OBJ_CALL(result = self->object.getReader(a0, a1));
              return ::org::apache::lucene::util::bkd::t_PointReader::wrap_Object(result);
            }

            PyErr_SetArgsError((PyObject *) self, "getReader", args);
            return NULL;
          }

          static PyObject *t_OfflinePointWriter_toString(t_OfflinePointWriter *self, PyObject *args)
          {
            ::java::lang::String result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.toString());
              return j2p(result);
            }

            return callSuper(PY_TYPE(OfflinePointWriter), (PyObject *) self, "toString", args, 2);
          }

          static PyObject *t_OfflinePointWriter_get__name(t_OfflinePointWriter *self, void *data)
          {
            ::java::lang::String value((jobject) NULL);
            OBJ_CALL(value = self->object._get_name());
            return j2p(value);
          }

          static PyObject *t_OfflinePointWriter_get__out(t_OfflinePointWriter *self, void *data)
          {
            ::org::apache::lucene::store::IndexOutput value((jobject) NULL);
            OBJ_CALL(value = self->object._get_out());
            return ::org::apache::lucene::store::t_IndexOutput::wrap_Object(value);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/FilteredDocIdSetIterator.h"
#include "java/io/IOException.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {

        ::java::lang::Class *FilteredDocIdSetIterator::class$ = NULL;
        jmethodID *FilteredDocIdSetIterator::mids$ = NULL;
        bool FilteredDocIdSetIterator::live$ = false;

        jclass FilteredDocIdSetIterator::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/search/FilteredDocIdSetIterator");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_da04cf8efc6499af] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/search/DocIdSetIterator;)V");
            mids$[mid_advance_1e143afe1894d213] = env->getMethodID(cls, "advance", "(I)I");
            mids$[mid_cost_2e5ae9edcb9b072f] = env->getMethodID(cls, "cost", "()J");
            mids$[mid_docID_9972fcc56b44e79d] = env->getMethodID(cls, "docID", "()I");
            mids$[mid_getDelegate_173d81d7b8f93882] = env->getMethodID(cls, "getDelegate", "()Lorg/apache/lucene/search/DocIdSetIterator;");
            mids$[mid_nextDoc_9972fcc56b44e79d] = env->getMethodID(cls, "nextDoc", "()I");
            mids$[mid_match_a1d30e1ee40c89a2] = env->getMethodID(cls, "match", "(I)Z");

            class$ = new ::java::lang::Class(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        FilteredDocIdSetIterator::FilteredDocIdSetIterator(const ::org::apache::lucene::search::DocIdSetIterator & a0) : ::org::apache::lucene::search::DocIdSetIterator(env->newObject(initializeClass, &mids$, mid_init$_da04cf8efc6499af, a0.this$)) {}

        jint FilteredDocIdSetIterator::advance(jint a0) const
        {
          return env->callIntMethod(this$, mids$[mid_advance_1e143afe1894d213], a0);
        }

        jlong FilteredDocIdSetIterator::cost() const
        {
          return env->callLongMethod(this$, mids$[mid_cost_2e5ae9edcb9b072f]);
        }

        jint FilteredDocIdSetIterator::docID() const
        {
          return env->callIntMethod(this$, mids$[mid_docID_9972fcc56b44e79d]);
        }

        ::org::apache::lucene::search::DocIdSetIterator FilteredDocIdSetIterator::getDelegate() const
        {
          return ::org::apache::lucene::search::DocIdSetIterator(env->callObjectMethod(this$, mids$[mid_getDelegate_173d81d7b8f93882]));
        }

        jint FilteredDocIdSetIterator::nextDoc() const
        {
          return env->callIntMethod(this$, mids$[mid_nextDoc_9972fcc56b44e79d]);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        static PyObject *t_FilteredDocIdSetIterator_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_FilteredDocIdSetIterator_instance_(PyTypeObject *type, PyObject *arg);
        static int t_FilteredDocIdSetIterator_init_(t_FilteredDocIdSetIterator *self, PyObject *args, PyObject *kwds);
        static PyObject *t_FilteredDocIdSetIterator_advance(t_FilteredDocIdSetIterator *self, PyObject *args);
        static PyObject *t_FilteredDocIdSetIterator_cost(t_FilteredDocIdSetIterator *self, PyObject *args);
        static PyObject *t_FilteredDocIdSetIterator_docID(t_FilteredDocIdSetIterator *self, PyObject *args);
        static PyObject *t_FilteredDocIdSetIterator_getDelegate(t_FilteredDocIdSetIterator *self);
        static PyObject *t_FilteredDocIdSetIterator_nextDoc(t_FilteredDocIdSetIterator *self, PyObject *args);
        static PyObject *t_FilteredDocIdSetIterator_get__delegate(t_FilteredDocIdSetIterator *self, void *data);
        static PyGetSetDef t_FilteredDocIdSetIterator__fields_[] = {
          DECLARE_GET_FIELD(t_FilteredDocIdSetIterator, delegate),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_FilteredDocIdSetIterator__methods_[] = {
          DECLARE_METHOD(t_FilteredDocIdSetIterator, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_FilteredDocIdSetIterator, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_FilteredDocIdSetIterator, advance, METH_VARARGS),
          DECLARE_METHOD(t_FilteredDocIdSetIterator, cost, METH_VARARGS),
          DECLARE_METHOD(t_FilteredDocIdSetIterator, docID, METH_VARARGS),
          DECLARE_METHOD(t_FilteredDocIdSetIterator, getDelegate, METH_NOARGS),
          DECLARE_METHOD(t_FilteredDocIdSetIterator, nextDoc, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        static PyType_Slot PY_TYPE_SLOTS(FilteredDocIdSetIterator)[] = {
          { Py_tp_methods, t_FilteredDocIdSetIterator__methods_ },
          { Py_tp_init, (void *) t_FilteredDocIdSetIterator_init_ },
          { Py_tp_getset, t_FilteredDocIdSetIterator__fields_ },
          { 0, NULL }
        };

        static PyType_Def *PY_TYPE_BASES(FilteredDocIdSetIterator)[] = {
          &PY_TYPE_DEF(::org::apache::lucene::search::DocIdSetIterator),
          NULL
        };

        DEFINE_TYPE(FilteredDocIdSetIterator, t_FilteredDocIdSetIterator, FilteredDocIdSetIterator);

        void t_FilteredDocIdSetIterator::install(PyObject *module)
        {
          installType(&PY_TYPE(FilteredDocIdSetIterator), &PY_TYPE_DEF(FilteredDocIdSetIterator), module, "FilteredDocIdSetIterator", 0);
        }

        void t_FilteredDocIdSetIterator::initialize(PyObject *module)
        {
          PyObject_SetAttrString((PyObject *) PY_TYPE(FilteredDocIdSetIterator), "class_", make_descriptor(FilteredDocIdSetIterator::initializeClass, 1));
          PyObject_SetAttrString((PyObject *) PY_TYPE(FilteredDocIdSetIterator), "wrapfn_", make_descriptor(t_FilteredDocIdSetIterator::wrap_jobject));
          PyObject_SetAttrString((PyObject *) PY_TYPE(FilteredDocIdSetIterator), "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_FilteredDocIdSetIterator_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, FilteredDocIdSetIterator::initializeClass, 1)))
            return NULL;
          return t_FilteredDocIdSetIterator::wrap_Object(FilteredDocIdSetIterator(((t_FilteredDocIdSetIterator *) arg)->object.this$));
        }
        static PyObject *t_FilteredDocIdSetIterator_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, FilteredDocIdSetIterator::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_FilteredDocIdSetIterator_init_(t_FilteredDocIdSetIterator *self, PyObject *args, PyObject *kwds)
        {
          ::org::apache::lucene::search::DocIdSetIterator a0((jobject) NULL);
          FilteredDocIdSetIterator object((jobject) NULL);

          if (!parseArgs(args, "k", ::org::apache::lucene::search::DocIdSetIterator::initializeClass, &a0))
          {
            INT_CALL(object = FilteredDocIdSetIterator(a0));
            self->object = object;
          }
          else
          {
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }

        static PyObject *t_FilteredDocIdSetIterator_advance(t_FilteredDocIdSetIterator *self, PyObject *args)
        {
          jint a0;
          jint result;

          if (!parseArgs(args, "I", &a0))
          {
            OBJ_CALL(result = self->object.advance(a0));
            return PyLong_FromLong((long) result);
          }

          return callSuper(PY_TYPE(FilteredDocIdSetIterator), (PyObject *) self, "advance", args, 2);
        }

        static PyObject *t_FilteredDocIdSetIterator_cost(t_FilteredDocIdSetIterator *self, PyObject *args)
        {
          jlong result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.cost());
            return PyLong_FromLongLong((PY_LONG_LONG) result);
          }

          return callSuper(PY_TYPE(FilteredDocIdSetIterator), (PyObject *) self, "cost", args, 2);
        }

        static PyObject *t_FilteredDocIdSetIterator_docID(t_FilteredDocIdSetIterator *self, PyObject *args)
        {
          jint result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.docID());
            return PyLong_FromLong((long) result);
          }

          return callSuper(PY_TYPE(FilteredDocIdSetIterator), (PyObject *) self, "docID", args, 2);
        }

        static PyObject *t_FilteredDocIdSetIterator_getDelegate(t_FilteredDocIdSetIterator *self)
        {
          ::org::apache::lucene::search::DocIdSetIterator result((jobject) NULL);
          OBJ_CALL(result = self->object.getDelegate());
          return ::org::apache::lucene::search::t_DocIdSetIterator::wrap_Object(result);
        }

        static PyObject *t_FilteredDocIdSetIterator_nextDoc(t_FilteredDocIdSetIterator *self, PyObject *args)
        {
          jint result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.nextDoc());
            return PyLong_FromLong((long) result);
          }

          return callSuper(PY_TYPE(FilteredDocIdSetIterator), (PyObject *) self, "nextDoc", args, 2);
        }

        static PyObject *t_FilteredDocIdSetIterator_get__delegate(t_FilteredDocIdSetIterator *self, void *data)
        {
          ::org::apache::lucene::search::DocIdSetIterator value((jobject) NULL);
          OBJ_CALL(value = self->object.getDelegate());
          return ::org::apache::lucene::search::t_DocIdSetIterator::wrap_Object(value);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queryparser/flexible/standard/parser/StandardSyntaxParserTokenManager.h"
#include "org/apache/lucene/queryparser/flexible/standard/parser/StandardSyntaxParserConstants.h"
#include "java/lang/Class.h"
#include "java/lang/String.h"
#include "org/apache/lucene/queryparser/flexible/standard/parser/CharStream.h"
#include "org/apache/lucene/queryparser/flexible/standard/parser/Token.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace standard {
            namespace parser {

              ::java::lang::Class *StandardSyntaxParserTokenManager::class$ = NULL;
              jmethodID *StandardSyntaxParserTokenManager::mids$ = NULL;
              bool StandardSyntaxParserTokenManager::live$ = false;
              JArray< jint > *StandardSyntaxParserTokenManager::jjnewLexState = NULL;
              JArray< ::java::lang::String > *StandardSyntaxParserTokenManager::jjstrLiteralImages = NULL;
              JArray< ::java::lang::String > *StandardSyntaxParserTokenManager::lexStateNames = NULL;

              jclass StandardSyntaxParserTokenManager::initializeClass(bool getOnly)
              {
                if (getOnly)
                  return (jclass) (live$ ? class$->this$ : NULL);
                if (class$ == NULL)
                {
                  jclass cls = (jclass) env->findClass("org/apache/lucene/queryparser/flexible/standard/parser/StandardSyntaxParserTokenManager");

                  mids$ = new jmethodID[max_mid];
                  mids$[mid_init$_3c61baa8e1690ea8] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/queryparser/flexible/standard/parser/CharStream;)V");
                  mids$[mid_init$_cae808849efc478a] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/queryparser/flexible/standard/parser/CharStream;I)V");
                  mids$[mid_ReInit_3c61baa8e1690ea8] = env->getMethodID(cls, "ReInit", "(Lorg/apache/lucene/queryparser/flexible/standard/parser/CharStream;)V");
                  mids$[mid_ReInit_cae808849efc478a] = env->getMethodID(cls, "ReInit", "(Lorg/apache/lucene/queryparser/flexible/standard/parser/CharStream;I)V");
                  mids$[mid_SwitchTo_040c4cd0390c5aff] = env->getMethodID(cls, "SwitchTo", "(I)V");
                  mids$[mid_getNextToken_f5892a36f0431afa] = env->getMethodID(cls, "getNextToken", "()Lorg/apache/lucene/queryparser/flexible/standard/parser/Token;");
                  mids$[mid_jjFillToken_f5892a36f0431afa] = env->getMethodID(cls, "jjFillToken", "()Lorg/apache/lucene/queryparser/flexible/standard/parser/Token;");

                  class$ = new ::java::lang::Class(cls);
                  cls = (jclass) class$->this$;

                  jjnewLexState = new JArray< jint >(env->getStaticObjectField(cls, "jjnewLexState", "[I"));
                  jjstrLiteralImages = new JArray< ::java::lang::String >(env->getStaticObjectField(cls, "jjstrLiteralImages", "[Ljava/lang/String;"));
                  lexStateNames = new JArray< ::java::lang::String >(env->getStaticObjectField(cls, "lexStateNames", "[Ljava/lang/String;"));
                  live$ = true;
                }
                return (jclass) class$->this$;
              }

              StandardSyntaxParserTokenManager::StandardSyntaxParserTokenManager(const ::org::apache::lucene::queryparser::flexible::standard::parser::CharStream & a0) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_3c61baa8e1690ea8, a0.this$)) {}

              StandardSyntaxParserTokenManager::StandardSyntaxParserTokenManager(const ::org::apache::lucene::queryparser::flexible::standard::parser::CharStream & a0, jint a1) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_cae808849efc478a, a0.this$, a1)) {}

              void StandardSyntaxParserTokenManager::ReInit(const ::org::apache::lucene::queryparser::flexible::standard::parser::CharStream & a0) const
              {
                env->callVoidMethod(this$, mids$[mid_ReInit_3c61baa8e1690ea8], a0.this$);
              }

              void StandardSyntaxParserTokenManager::ReInit(const ::org::apache::lucene::queryparser::flexible::standard::parser::CharStream & a0, jint a1) const
              {
                env->callVoidMethod(this$, mids$[mid_ReInit_cae808849efc478a], a0.this$, a1);
              }

              void StandardSyntaxParserTokenManager::SwitchTo(jint a0) const
              {
                env->callVoidMethod(this$, mids$[mid_SwitchTo_040c4cd0390c5aff], a0);
              }

              ::org::apache::lucene::queryparser::flexible::standard::parser::Token StandardSyntaxParserTokenManager::getNextToken() const
              {
                return ::org::apache::lucene::queryparser::flexible::standard::parser::Token(env->callObjectMethod(this$, mids$[mid_getNextToken_f5892a36f0431afa]));
              }
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace standard {
            namespace parser {
              static PyObject *t_StandardSyntaxParserTokenManager_cast_(PyTypeObject *type, PyObject *arg);
              static PyObject *t_StandardSyntaxParserTokenManager_instance_(PyTypeObject *type, PyObject *arg);
              static int t_StandardSyntaxParserTokenManager_init_(t_StandardSyntaxParserTokenManager *self, PyObject *args, PyObject *kwds);
              static PyObject *t_StandardSyntaxParserTokenManager_ReInit(t_StandardSyntaxParserTokenManager *self, PyObject *args);
              static PyObject *t_StandardSyntaxParserTokenManager_SwitchTo(t_StandardSyntaxParserTokenManager *self, PyObject *arg);
              static PyObject *t_StandardSyntaxParserTokenManager_getNextToken(t_StandardSyntaxParserTokenManager *self);
              static PyObject *t_StandardSyntaxParserTokenManager_get__nextToken(t_StandardSyntaxParserTokenManager *self, void *data);
              static PyGetSetDef t_StandardSyntaxParserTokenManager__fields_[] = {
                DECLARE_GET_FIELD(t_StandardSyntaxParserTokenManager, nextToken),
                { NULL, NULL, NULL, NULL, NULL }
              };

              static PyMethodDef t_StandardSyntaxParserTokenManager__methods_[] = {
                DECLARE_METHOD(t_StandardSyntaxParserTokenManager, cast_, METH_O | METH_CLASS),
                DECLARE_METHOD(t_StandardSyntaxParserTokenManager, instance_, METH_O | METH_CLASS),
                DECLARE_METHOD(t_StandardSyntaxParserTokenManager, ReInit, METH_VARARGS),
                DECLARE_METHOD(t_StandardSyntaxParserTokenManager, SwitchTo, METH_O),
                DECLARE_METHOD(t_StandardSyntaxParserTokenManager, getNextToken, METH_NOARGS),
                { NULL, NULL, 0, NULL }
              };

              static PyType_Slot PY_TYPE_SLOTS(StandardSyntaxParserTokenManager)[] = {
                { Py_tp_methods, t_StandardSyntaxParserTokenManager__methods_ },
                { Py_tp_init, (void *) t_StandardSyntaxParserTokenManager_init_ },
                { Py_tp_getset, t_StandardSyntaxParserTokenManager__fields_ },
                { 0, NULL }
              };

              static PyType_Def *PY_TYPE_BASES(StandardSyntaxParserTokenManager)[] = {
                &PY_TYPE_DEF(::java::lang::Object),
                NULL
              };

              DEFINE_TYPE(StandardSyntaxParserTokenManager, t_StandardSyntaxParserTokenManager, StandardSyntaxParserTokenManager);

              void t_StandardSyntaxParserTokenManager::install(PyObject *module)
              {
                installType(&PY_TYPE(StandardSyntaxParserTokenManager), &PY_TYPE_DEF(StandardSyntaxParserTokenManager), module, "StandardSyntaxParserTokenManager", 0);
              }

              void t_StandardSyntaxParserTokenManager::initialize(PyObject *module)
              {
                PyObject_SetAttrString((PyObject *) PY_TYPE(StandardSyntaxParserTokenManager), "class_", make_descriptor(StandardSyntaxParserTokenManager::initializeClass, 1));
                PyObject_SetAttrString((PyObject *) PY_TYPE(StandardSyntaxParserTokenManager), "wrapfn_", make_descriptor(t_StandardSyntaxParserTokenManager::wrap_jobject));
                PyObject_SetAttrString((PyObject *) PY_TYPE(StandardSyntaxParserTokenManager), "boxfn_", make_descriptor(boxObject));
                env->getClass(StandardSyntaxParserTokenManager::initializeClass);
                PyObject_SetAttrString((PyObject *) PY_TYPE(StandardSyntaxParserTokenManager), "jjnewLexState", make_descriptor(StandardSyntaxParserTokenManager::jjnewLexState->wrap()));
                PyObject_SetAttrString((PyObject *) PY_TYPE(StandardSyntaxParserTokenManager), "jjstrLiteralImages", make_descriptor(JArray<jstring>(StandardSyntaxParserTokenManager::jjstrLiteralImages->this$).wrap()));
                PyObject_SetAttrString((PyObject *) PY_TYPE(StandardSyntaxParserTokenManager), "lexStateNames", make_descriptor(JArray<jstring>(StandardSyntaxParserTokenManager::lexStateNames->this$).wrap()));
              }

              static PyObject *t_StandardSyntaxParserTokenManager_cast_(PyTypeObject *type, PyObject *arg)
              {
                if (!(arg = castCheck(arg, StandardSyntaxParserTokenManager::initializeClass, 1)))
                  return NULL;
                return t_StandardSyntaxParserTokenManager::wrap_Object(StandardSyntaxParserTokenManager(((t_StandardSyntaxParserTokenManager *) arg)->object.this$));
              }
              static PyObject *t_StandardSyntaxParserTokenManager_instance_(PyTypeObject *type, PyObject *arg)
              {
                if (!castCheck(arg, StandardSyntaxParserTokenManager::initializeClass, 0))
                  Py_RETURN_FALSE;
                Py_RETURN_TRUE;
              }

              static int t_StandardSyntaxParserTokenManager_init_(t_StandardSyntaxParserTokenManager *self, PyObject *args, PyObject *kwds)
              {
                switch (PyTuple_GET_SIZE(args)) {
                 case 1:
                  {
                    ::org::apache::lucene::queryparser::flexible::standard::parser::CharStream a0((jobject) NULL);
                    StandardSyntaxParserTokenManager object((jobject) NULL);

                    if (!parseArgs(args, "k", ::org::apache::lucene::queryparser::flexible::standard::parser::CharStream::initializeClass, &a0))
                    {
                      INT_CALL(object = StandardSyntaxParserTokenManager(a0));
                      self->object = object;
                      break;
                    }
                  }
                  goto err;
                 case 2:
                  {
                    ::org::apache::lucene::queryparser::flexible::standard::parser::CharStream a0((jobject) NULL);
                    jint a1;
                    StandardSyntaxParserTokenManager object((jobject) NULL);

                    if (!parseArgs(args, "kI", ::org::apache::lucene::queryparser::flexible::standard::parser::CharStream::initializeClass, &a0, &a1))
                    {
                      INT_CALL(object = StandardSyntaxParserTokenManager(a0, a1));
                      self->object = object;
                      break;
                    }
                  }
                 default:
                 err:
                  PyErr_SetArgsError((PyObject *) self, "__init__", args);
                  return -1;
                }

                return 0;
              }

              static PyObject *t_StandardSyntaxParserTokenManager_ReInit(t_StandardSyntaxParserTokenManager *self, PyObject *args)
              {
                switch (PyTuple_GET_SIZE(args)) {
                 case 1:
                  {
                    ::org::apache::lucene::queryparser::flexible::standard::parser::CharStream a0((jobject) NULL);

                    if (!parseArgs(args, "k", ::org::apache::lucene::queryparser::flexible::standard::parser::CharStream::initializeClass, &a0))
                    {
                      OBJ_CALL(self->object.ReInit(a0));
                      Py_RETURN_NONE;
                    }
                  }
                  break;
                 case 2:
                  {
                    ::org::apache::lucene::queryparser::flexible::standard::parser::CharStream a0((jobject) NULL);
                    jint a1;

                    if (!parseArgs(args, "kI", ::org::apache::lucene::queryparser::flexible::standard::parser::CharStream::initializeClass, &a0, &a1))
                    {
                      OBJ_CALL(self->object.ReInit(a0, a1));
                      Py_RETURN_NONE;
                    }
                  }
                }

                PyErr_SetArgsError((PyObject *) self, "ReInit", args);
                return NULL;
              }

              static PyObject *t_StandardSyntaxParserTokenManager_SwitchTo(t_StandardSyntaxParserTokenManager *self, PyObject *arg)
              {
                jint a0;

                if (!parseArg(arg, "I", &a0))
                {
                  OBJ_CALL(self->object.SwitchTo(a0));
                  Py_RETURN_NONE;
                }

                PyErr_SetArgsError((PyObject *) self, "SwitchTo", arg);
                return NULL;
              }

              static PyObject *t_StandardSyntaxParserTokenManager_getNextToken(t_StandardSyntaxParserTokenManager *self)
              {
                ::org::apache::lucene::queryparser::flexible::standard::parser::Token result((jobject) NULL);
                OBJ_CALL(result = self->object.getNextToken());
                return ::org::apache::lucene::queryparser::flexible::standard::parser::t_Token::wrap_Object(result);
              }

              static PyObject *t_StandardSyntaxParserTokenManager_get__nextToken(t_StandardSyntaxParserTokenManager *self, void *data)
              {
                ::org::apache::lucene::queryparser::flexible::standard::parser::Token value((jobject) NULL);
                OBJ_CALL(value = self->object.getNextToken());
                return ::org::apache::lucene::queryparser::flexible::standard::parser::t_Token::wrap_Object(value);
              }
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/document/XYShape.h"
#include "org/apache/lucene/geo/XYLine.h"
#include "org/apache/lucene/document/ShapeField$QueryRelation.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/geo/XYCircle.h"
#include "java/lang/String.h"
#include "org/apache/lucene/search/Query.h"
#include "org/apache/lucene/document/Field.h"
#include "org/apache/lucene/geo/XYGeometry.h"
#include "org/apache/lucene/geo/XYPolygon.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace document {

        ::java::lang::Class *XYShape::class$ = NULL;
        jmethodID *XYShape::mids$ = NULL;
        bool XYShape::live$ = false;

        jclass XYShape::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/document/XYShape");

            mids$ = new jmethodID[max_mid];
            mids$[mid_createIndexableFields_30ac98905778e3c3] = env->getStaticMethodID(cls, "createIndexableFields", "(Ljava/lang/String;Lorg/apache/lucene/geo/XYLine;)[Lorg/apache/lucene/document/Field;");
            mids$[mid_createIndexableFields_52eecb754284607b] = env->getStaticMethodID(cls, "createIndexableFields", "(Ljava/lang/String;Lorg/apache/lucene/geo/XYPolygon;)[Lorg/apache/lucene/document/Field;");
            mids$[mid_createIndexableFields_b48f0644f19df5aa] = env->getStaticMethodID(cls, "createIndexableFields", "(Ljava/lang/String;FF)[Lorg/apache/lucene/document/Field;");
            mids$[mid_newBoxQuery_122268601498eb0a] = env->getStaticMethodID(cls, "newBoxQuery", "(Ljava/lang/String;Lorg/apache/lucene/document/ShapeField$QueryRelation;FFFF)Lorg/apache/lucene/search/Query;");
            mids$[mid_newDistanceQuery_9996115ae66598ac] = env->getStaticMethodID(cls, "newDistanceQuery", "(Ljava/lang/String;Lorg/apache/lucene/document/ShapeField$QueryRelation;[Lorg/apache/lucene/geo/XYCircle;)Lorg/apache/lucene/search/Query;");
            mids$[mid_newGeometryQuery_05fc42701ff9dcda] = env->getStaticMethodID(cls, "newGeometryQuery", "(Ljava/lang/String;Lorg/apache/lucene/document/ShapeField$QueryRelation;[Lorg/apache/lucene/geo/XYGeometry;)Lorg/apache/lucene/search/Query;");
            mids$[mid_newLineQuery_f2e9471f5b230e29] = env->getStaticMethodID(cls, "newLineQuery", "(Ljava/lang/String;Lorg/apache/lucene/document/ShapeField$QueryRelation;[Lorg/apache/lucene/geo/XYLine;)Lorg/apache/lucene/search/Query;");
            mids$[mid_newPointQuery_6c273a6ac90c80fa] = env->getStaticMethodID(cls, "newPointQuery", "(Ljava/lang/String;Lorg/apache/lucene/document/ShapeField$QueryRelation;[[F)Lorg/apache/lucene/search/Query;");
            mids$[mid_newPolygonQuery_3b493efcfc5fba8a] = env->getStaticMethodID(cls, "newPolygonQuery", "(Ljava/lang/String;Lorg/apache/lucene/document/ShapeField$QueryRelation;[Lorg/apache/lucene/geo/XYPolygon;)Lorg/apache/lucene/search/Query;");

            class$ = new ::java::lang::Class(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        JArray< ::org::apache::lucene::document::Field > XYShape::createIndexableFields(const ::java::lang::String & a0, const ::org::apache::lucene::geo::XYLine & a1)
        {
          jclass cls = env->getClass(initializeClass);
          return JArray< ::org::apache::lucene::document::Field >(env->callStaticObjectMethod(cls, mids$[mid_createIndexableFields_30ac98905778e3c3], a0.this$, a1.this$));
        }

        JArray< ::org::apache::lucene::document::Field > XYShape::createIndexableFields(const ::java::lang::String & a0, const ::org::apache::lucene::geo::XYPolygon & a1)
        {
          jclass cls = env->getClass(initializeClass);
          return JArray< ::org::apache::lucene::document::Field >(env->callStaticObjectMethod(cls, mids$[mid_createIndexableFields_52eecb754284607b], a0.this$, a1.this$));
        }

        JArray< ::org::apache::lucene::document::Field > XYShape::createIndexableFields(const ::java::lang::String & a0, jfloat a1, jfloat a2)
        {
          jclass cls = env->getClass(initializeClass);
          return JArray< ::org::apache::lucene::document::Field >(env->callStaticObjectMethod(cls, mids$[mid_createIndexableFields_b48f0644f19df5aa], a0.this$, a1, a2));
        }

        ::org::apache::lucene::search::Query XYShape::newBoxQuery(const ::java::lang::String & a0, const ::org::apache::lucene::document::ShapeField$QueryRelation & a1, jfloat a2, jfloat a3, jfloat a4, jfloat a5)
        {
          jclass cls = env->getClass(initializeClass);
          return ::org::apache::lucene::search::Query(env->callStaticObjectMethod(cls, mids$[mid_newBoxQuery_122268601498eb0a], a0.this$, a1.this$, a2, a3, a4, a5));
        }

        ::org::apache::lucene::search::Query XYShape::newDistanceQuery(const ::java::lang::String & a0, const ::org::apache::lucene::document::ShapeField$QueryRelation & a1, const JArray< ::org::apache::lucene::geo::XYCircle > & a2)
        {
          jclass cls = env->getClass(initializeClass);
          return ::org::apache::lucene::search::Query(env->callStaticObjectMethod(cls, mids$[mid_newDistanceQuery_9996115ae66598ac], a0.this$, a1.this$, a2.this$));
        }

        ::org::apache::lucene::search::Query XYShape::newGeometryQuery(const ::java::lang::String & a0, const ::org::apache::lucene::document::ShapeField$QueryRelation & a1, const JArray< ::org::apache::lucene::geo::XYGeometry > & a2)
        {
          jclass cls = env->getClass(initializeClass);
          return ::org::apache::lucene::search::Query(env->callStaticObjectMethod(cls, mids$[mid_newGeometryQuery_05fc42701ff9dcda], a0.this$, a1.this$, a2.this$));
        }

        ::org::apache::lucene::search::Query XYShape::newLineQuery(const ::java::lang::String & a0, const ::org::apache::lucene::document::ShapeField$QueryRelation & a1, const JArray< ::org::apache::lucene::geo::XYLine > & a2)
        {
          jclass cls = env->getClass(initializeClass);
          return ::org::apache::lucene::search::Query(env->callStaticObjectMethod(cls, mids$[mid_newLineQuery_f2e9471f5b230e29], a0.this$, a1.this$, a2.this$));
        }

        ::org::apache::lucene::search::Query XYShape::newPointQuery(const ::java::lang::String & a0, const ::org::apache::lucene::document::ShapeField$QueryRelation & a1, const JArray< JArray< jfloat > > & a2)
        {
          jclass cls = env->getClass(initializeClass);
          return ::org::apache::lucene::search::Query(env->callStaticObjectMethod(cls, mids$[mid_newPointQuery_6c273a6ac90c80fa], a0.this$, a1.this$, a2.this$));
        }

        ::org::apache::lucene::search::Query XYShape::newPolygonQuery(const ::java::lang::String & a0, const ::org::apache::lucene::document::ShapeField$QueryRelation & a1, const JArray< ::org::apache::lucene::geo::XYPolygon > & a2)
        {
          jclass cls = env->getClass(initializeClass);
          return ::org::apache::lucene::search::Query(env->callStaticObjectMethod(cls, mids$[mid_newPolygonQuery_3b493efcfc5fba8a], a0.this$, a1.this$, a2.this$));
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace document {
        static PyObject *t_XYShape_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_XYShape_instance_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_XYShape_createIndexableFields(PyTypeObject *type, PyObject *args);
        static PyObject *t_XYShape_newBoxQuery(PyTypeObject *type, PyObject *args);
        static PyObject *t_XYShape_newDistanceQuery(PyTypeObject *type, PyObject *args);
        static PyObject *t_XYShape_newGeometryQuery(PyTypeObject *type, PyObject *args);
        static PyObject *t_XYShape_newLineQuery(PyTypeObject *type, PyObject *args);
        static PyObject *t_XYShape_newPointQuery(PyTypeObject *type, PyObject *args);
        static PyObject *t_XYShape_newPolygonQuery(PyTypeObject *type, PyObject *args);

        static PyMethodDef t_XYShape__methods_[] = {
          DECLARE_METHOD(t_XYShape, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_XYShape, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_XYShape, createIndexableFields, METH_VARARGS | METH_CLASS),
          DECLARE_METHOD(t_XYShape, newBoxQuery, METH_VARARGS | METH_CLASS),
          DECLARE_METHOD(t_XYShape, newDistanceQuery, METH_VARARGS | METH_CLASS),
          DECLARE_METHOD(t_XYShape, newGeometryQuery, METH_VARARGS | METH_CLASS),
          DECLARE_METHOD(t_XYShape, newLineQuery, METH_VARARGS | METH_CLASS),
          DECLARE_METHOD(t_XYShape, newPointQuery, METH_VARARGS | METH_CLASS),
          DECLARE_METHOD(t_XYShape, newPolygonQuery, METH_VARARGS | METH_CLASS),
          { NULL, NULL, 0, NULL }
        };

        static PyType_Slot PY_TYPE_SLOTS(XYShape)[] = {
          { Py_tp_methods, t_XYShape__methods_ },
          { Py_tp_init, (void *) abstract_init },
          { 0, NULL }
        };

        static PyType_Def *PY_TYPE_BASES(XYShape)[] = {
          &PY_TYPE_DEF(::java::lang::Object),
          NULL
        };

        DEFINE_TYPE(XYShape, t_XYShape, XYShape);

        void t_XYShape::install(PyObject *module)
        {
          installType(&PY_TYPE(XYShape), &PY_TYPE_DEF(XYShape), module, "XYShape", 0);
        }

        void t_XYShape::initialize(PyObject *module)
        {
          PyObject_SetAttrString((PyObject *) PY_TYPE(XYShape), "class_", make_descriptor(XYShape::initializeClass, 1));
          PyObject_SetAttrString((PyObject *) PY_TYPE(XYShape), "wrapfn_", make_descriptor(t_XYShape::wrap_jobject));
          PyObject_SetAttrString((PyObject *) PY_TYPE(XYShape), "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_XYShape_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, XYShape::initializeClass, 1)))
            return NULL;
          return t_XYShape::wrap_Object(XYShape(((t_XYShape *) arg)->object.this$));
        }
        static PyObject *t_XYShape_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, XYShape::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static PyObject *t_XYShape_createIndexableFields(PyTypeObject *type, PyObject *args)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 2:
            {
              ::java::lang::String a0((jobject) NULL);
              ::org::apache::lucene::geo::XYLine a1((jobject) NULL);
              JArray< ::org::apache::lucene::document::Field > result((jobject) NULL);

              if (!parseArgs(args, "sk", ::org::apache::lucene::geo::XYLine::initializeClass, &a0, &a1))
              {
                OBJ_CALL(result = ::org::apache::lucene::document::XYShape::createIndexableFields(a0, a1));
                return JArray<jobject>(result.this$).wrap(::org::apache::lucene::document::t_Field::wrap_jobject);
              }
            }
            {
              ::java::lang::String a0((jobject) NULL);
              ::org::apache::lucene::geo::XYPolygon a1((jobject) NULL);
              JArray< ::org::apache::lucene::document::Field > result((jobject) NULL);

              if (!parseArgs(args, "sk", ::org::apache::lucene::geo::XYPolygon::initializeClass, &a0, &a1))
              {
                OBJ_CALL(result = ::org::apache::lucene::document::XYShape::createIndexableFields(a0, a1));
                return JArray<jobject>(result.this$).wrap(::org::apache::lucene::document::t_Field::wrap_jobject);
              }
            }
            break;
           case 3:
            {
              ::java::lang::String a0((jobject) NULL);
              jfloat a1;
              jfloat a2;
              JArray< ::org::apache::lucene::document::Field > result((jobject) NULL);

              if (!parseArgs(args, "sFF", &a0, &a1, &a2))
              {
                OBJ_CALL(result = ::org::apache::lucene::document::XYShape::createIndexableFields(a0, a1, a2));
                return JArray<jobject>(result.this$).wrap(::org::apache::lucene::document::t_Field::wrap_jobject);
              }
            }
          }

          PyErr_SetArgsError(type, "createIndexableFields", args);
          return NULL;
        }

        static PyObject *t_XYShape_newBoxQuery(PyTypeObject *type, PyObject *args)
        {
          ::java::lang::String a0((jobject) NULL);
          ::org::apache::lucene::document::ShapeField$QueryRelation a1((jobject) NULL);
          PyTypeObject **p1;
          jfloat a2;
          jfloat a3;
          jfloat a4;
          jfloat a5;
          ::org::apache::lucene::search::Query result((jobject) NULL);

          if (!parseArgs(args, "sKFFFF", ::org::apache::lucene::document::ShapeField$QueryRelation::initializeClass, &a0, &a1, &p1, ::org::apache::lucene::document::t_ShapeField$QueryRelation::parameters_, &a2, &a3, &a4, &a5))
          {
            OBJ_CALL(result = ::org::apache::lucene::document::XYShape::newBoxQuery(a0, a1, a2, a3, a4, a5));
            return ::org::apache::lucene::search::t_Query::wrap_Object(result);
          }

          PyErr_SetArgsError(type, "newBoxQuery", args);
          return NULL;
        }

        static PyObject *t_XYShape_newDistanceQuery(PyTypeObject *type, PyObject *args)
        {
          ::java::lang::String a0((jobject) NULL);
          ::org::apache::lucene::document::ShapeField$QueryRelation a1((jobject) NULL);
          PyTypeObject **p1;
          JArray< ::org::apache::lucene::geo::XYCircle > a2((jobject) NULL);
          ::org::apache::lucene::search::Query result((jobject) NULL);

          if (!parseArgs(args, "sK[k", ::org::apache::lucene::document::ShapeField$QueryRelation::initializeClass, ::org::apache::lucene::geo::XYCircle::initializeClass, &a0, &a1, &p1, ::org::apache::lucene::document::t_ShapeField$QueryRelation::parameters_, &a2))
          {
            OBJ_CALL(result = ::org::apache::lucene::document::XYShape::newDistanceQuery(a0, a1, a2));
            return ::org::apache::lucene::search::t_Query::wrap_Object(result);
          }

          PyErr_SetArgsError(type, "newDistanceQuery", args);
          return NULL;
        }

        static PyObject *t_XYShape_newGeometryQuery(PyTypeObject *type, PyObject *args)
        {
          ::java::lang::String a0((jobject) NULL);
          ::org::apache::lucene::document::ShapeField$QueryRelation a1((jobject) NULL);
          PyTypeObject **p1;
          JArray< ::org::apache::lucene::geo::XYGeometry > a2((jobject) NULL);
          ::org::apache::lucene::search::Query result((jobject) NULL);

          if (!parseArgs(args, "sK[k", ::org::apache::lucene::document::ShapeField$QueryRelation::initializeClass, ::org::apache::lucene::geo::XYGeometry::initializeClass, &a0, &a1, &p1, ::org::apache::lucene::document::t_ShapeField$QueryRelation::parameters_, &a2))
          {
            OBJ_CALL(result = ::org::apache::lucene::document::XYShape::newGeometryQuery(a0, a1, a2));
            return ::org::apache::lucene::search::t_Query::wrap_Object(result);
          }

          PyErr_SetArgsError(type, "newGeometryQuery", args);
          return NULL;
        }

        static PyObject *t_XYShape_newLineQuery(PyTypeObject *type, PyObject *args)
        {
          ::java::lang::String a0((jobject) NULL);
          ::org::apache::lucene::document::ShapeField$QueryRelation a1((jobject) NULL);
          PyTypeObject **p1;
          JArray< ::org::apache::lucene::geo::XYLine > a2((jobject) NULL);
          ::org::apache::lucene::search::Query result((jobject) NULL);

          if (!parseArgs(args, "sK[k", ::org::apache::lucene::document::ShapeField$QueryRelation::initializeClass, ::org::apache::lucene::geo::XYLine::initializeClass, &a0, &a1, &p1, ::org::apache::lucene::document::t_ShapeField$QueryRelation::parameters_, &a2))
          {
            OBJ_CALL(result = ::org::apache::lucene::document::XYShape::newLineQuery(a0, a1, a2));
            return ::org::apache::lucene::search::t_Query::wrap_Object(result);
          }

          PyErr_SetArgsError(type, "newLineQuery", args);
          return NULL;
        }

        static PyObject *t_XYShape_newPointQuery(PyTypeObject *type, PyObject *args)
        {
          ::java::lang::String a0((jobject) NULL);
          ::org::apache::lucene::document::ShapeField$QueryRelation a1((jobject) NULL);
          PyTypeObject **p1;
          JArray< JArray< jfloat > > a2((jobject) NULL);
          ::org::apache::lucene::search::Query result((jobject) NULL);

          if (!parseArgs(args, "sK[[F", ::org::apache::lucene::document::ShapeField$QueryRelation::initializeClass, &a0, &a1, &p1, ::org::apache::lucene::document::t_ShapeField$QueryRelation::parameters_, &a2))
          {
            OBJ_CALL(result = ::org::apache::lucene::document::XYShape::newPointQuery(a0, a1, a2));
            return ::org::apache::lucene::search::t_Query::wrap_Object(result);
          }

          PyErr_SetArgsError(type, "newPointQuery", args);
          return NULL;
        }

        static PyObject *t_XYShape_newPolygonQuery(PyTypeObject *type, PyObject *args)
        {
          ::java::lang::String a0((jobject) NULL);
          ::org::apache::lucene::document::ShapeField$QueryRelation a1((jobject) NULL);
          PyTypeObject **p1;
          JArray< ::org::apache::lucene::geo::XYPolygon > a2((jobject) NULL);
          ::org::apache::lucene::search::Query result((jobject) NULL);

          if (!parseArgs(args, "sK[k", ::org::apache::lucene::document::ShapeField$QueryRelation::initializeClass, ::org::apache::lucene::geo::XYPolygon::initializeClass, &a0, &a1, &p1, ::org::apache::lucene::document::t_ShapeField$QueryRelation::parameters_, &a2))
          {
            OBJ_CALL(result = ::org::apache::lucene::document::XYShape::newPolygonQuery(a0, a1, a2));
            return ::org::apache::lucene::search::t_Query::wrap_Object(result);
          }

          PyErr_SetArgsError(type, "newPolygonQuery", args);
          return NULL;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/util/packed/PackedInts$Reader.h"
#include "org/apache/lucene/util/Accountable.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        namespace packed {

          ::java::lang::Class *PackedInts$Reader::class$ = NULL;
          jmethodID *PackedInts$Reader::mids$ = NULL;
          bool PackedInts$Reader::live$ = false;

          jclass PackedInts$Reader::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/util/packed/PackedInts$Reader");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_f2cc1bce94666404] = env->getMethodID(cls, "<init>", "()V");
              mids$[mid_get_0f1d64a641e8af53] = env->getMethodID(cls, "get", "(I)J");
              mids$[mid_get_4c642cf3a1fd0041] = env->getMethodID(cls, "get", "(I[JII)I");
              mids$[mid_size_9972fcc56b44e79d] = env->getMethodID(cls, "size", "()I");

              class$ = new ::java::lang::Class(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          PackedInts$Reader::PackedInts$Reader() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_f2cc1bce94666404)) {}

          jlong PackedInts$Reader::get(jint a0) const
          {
            return env->callLongMethod(this$, mids$[mid_get_0f1d64a641e8af53], a0);
          }

          jint PackedInts$Reader::get(jint a0, const JArray< jlong > & a1, jint a2, jint a3) const
          {
            return env->callIntMethod(this$, mids$[mid_get_4c642cf3a1fd0041], a0, a1.this$, a2, a3);
          }

          jint PackedInts$Reader::size() const
          {
            return env->callIntMethod(this$, mids$[mid_size_9972fcc56b44e79d]);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        namespace packed {
          static PyObject *t_PackedInts$Reader_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_PackedInts$Reader_instance_(PyTypeObject *type, PyObject *arg);
          static int t_PackedInts$Reader_init_(t_PackedInts$Reader *self, PyObject *args, PyObject *kwds);
          static PyObject *t_PackedInts$Reader_get(t_PackedInts$Reader *self, PyObject *args);
          static PyObject *t_PackedInts$Reader_size(t_PackedInts$Reader *self);

          static PyMethodDef t_PackedInts$Reader__methods_[] = {
            DECLARE_METHOD(t_PackedInts$Reader, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_PackedInts$Reader, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_PackedInts$Reader, get, METH_VARARGS),
            DECLARE_METHOD(t_PackedInts$Reader, size, METH_NOARGS),
            { NULL, NULL, 0, NULL }
          };

          static PyType_Slot PY_TYPE_SLOTS(PackedInts$Reader)[] = {
            { Py_tp_methods, t_PackedInts$Reader__methods_ },
            { Py_tp_init, (void *) t_PackedInts$Reader_init_ },
            { 0, NULL }
          };

          static PyType_Def *PY_TYPE_BASES(PackedInts$Reader)[] = {
            &PY_TYPE_DEF(::java::lang::Object),
            NULL
          };

          DEFINE_TYPE(PackedInts$Reader, t_PackedInts$Reader, PackedInts$Reader);

          void t_PackedInts$Reader::install(PyObject *module)
          {
            installType(&PY_TYPE(PackedInts$Reader), &PY_TYPE_DEF(PackedInts$Reader), module, "PackedInts$Reader", 0);
          }

          void t_PackedInts$Reader::initialize(PyObject *module)
          {
            PyObject_SetAttrString((PyObject *) PY_TYPE(PackedInts$Reader), "class_", make_descriptor(PackedInts$Reader::initializeClass, 1));
            PyObject_SetAttrString((PyObject *) PY_TYPE(PackedInts$Reader), "wrapfn_", make_descriptor(t_PackedInts$Reader::wrap_jobject));
            PyObject_SetAttrString((PyObject *) PY_TYPE(PackedInts$Reader), "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_PackedInts$Reader_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, PackedInts$Reader::initializeClass, 1)))
              return NULL;
            return t_PackedInts$Reader::wrap_Object(PackedInts$Reader(((t_PackedInts$Reader *) arg)->object.this$));
          }
          static PyObject *t_PackedInts$Reader_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, PackedInts$Reader::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_PackedInts$Reader_init_(t_PackedInts$Reader *self, PyObject *args, PyObject *kwds)
          {
            PackedInts$Reader object((jobject) NULL);

            INT_CALL(object = PackedInts$Reader());
            self->object = object;

            return 0;
          }

          static PyObject *t_PackedInts$Reader_get(t_PackedInts$Reader *self, PyObject *args)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 1:
              {
                jint a0;
                jlong result;

                if (!parseArgs(args, "I", &a0))
                {
                  OBJ_CALL(result = self->object.get(a0));
                  return PyLong_FromLongLong((PY_LONG_LONG) result);
                }
              }
              break;
             case 4:
              {
                jint a0;
                JArray< jlong > a1((jobject) NULL);
                jint a2;
                jint a3;
                jint result;

                if (!parseArgs(args, "I[JII", &a0, &a1, &a2, &a3))
                {
                  OBJ_CALL(result = self->object.get(a0, a1, a2, a3));
                  return PyLong_FromLong((long) result);
                }
              }
            }

            PyErr_SetArgsError((PyObject *) self, "get", args);
            return NULL;
          }

          static PyObject *t_PackedInts$Reader_size(t_PackedInts$Reader *self)
          {
            jint result;
            OBJ_CALL(result = self->object.size());
            return PyLong_FromLong((long) result);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/payloads/TokenOffsetPayloadTokenFilter.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/analysis/TokenStream.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace payloads {

          ::java::lang::Class *TokenOffsetPayloadTokenFilter::class$ = NULL;
          jmethodID *TokenOffsetPayloadTokenFilter::mids$ = NULL;
          bool TokenOffsetPayloadTokenFilter::live$ = false;

          jclass TokenOffsetPayloadTokenFilter::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/payloads/TokenOffsetPayloadTokenFilter");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_c26756868a754f4e] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/analysis/TokenStream;)V");
              mids$[mid_incrementToken_8454bd5aa23fd11e] = env->getMethodID(cls, "incrementToken", "()Z");

              class$ = new ::java::lang::Class(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          TokenOffsetPayloadTokenFilter::TokenOffsetPayloadTokenFilter(const ::org::apache::lucene::analysis::TokenStream & a0) : ::org::apache::lucene::analysis::TokenFilter(env->newObject(initializeClass, &mids$, mid_init$_c26756868a754f4e, a0.this$)) {}

          jboolean TokenOffsetPayloadTokenFilter::incrementToken() const
          {
            return env->callBooleanMethod(this$, mids$[mid_incrementToken_8454bd5aa23fd11e]);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace payloads {
          static PyObject *t_TokenOffsetPayloadTokenFilter_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_TokenOffsetPayloadTokenFilter_instance_(PyTypeObject *type, PyObject *arg);
          static int t_TokenOffsetPayloadTokenFilter_init_(t_TokenOffsetPayloadTokenFilter *self, PyObject *args, PyObject *kwds);
          static PyObject *t_TokenOffsetPayloadTokenFilter_incrementToken(t_TokenOffsetPayloadTokenFilter *self, PyObject *args);

          static PyMethodDef t_TokenOffsetPayloadTokenFilter__methods_[] = {
            DECLARE_METHOD(t_TokenOffsetPayloadTokenFilter, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_TokenOffsetPayloadTokenFilter, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_TokenOffsetPayloadTokenFilter, incrementToken, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          static PyType_Slot PY_TYPE_SLOTS(TokenOffsetPayloadTokenFilter)[] = {
            { Py_tp_methods, t_TokenOffsetPayloadTokenFilter__methods_ },
            { Py_tp_init, (void *) t_TokenOffsetPayloadTokenFilter_init_ },
            { 0, NULL }
          };

          static PyType_Def *PY_TYPE_BASES(TokenOffsetPayloadTokenFilter)[] = {
            &PY_TYPE_DEF(::org::apache::lucene::analysis::TokenFilter),
            NULL
          };

          DEFINE_TYPE(TokenOffsetPayloadTokenFilter, t_TokenOffsetPayloadTokenFilter, TokenOffsetPayloadTokenFilter);

          void t_TokenOffsetPayloadTokenFilter::install(PyObject *module)
          {
            installType(&PY_TYPE(TokenOffsetPayloadTokenFilter), &PY_TYPE_DEF(TokenOffsetPayloadTokenFilter), module, "TokenOffsetPayloadTokenFilter", 0);
          }

          void t_TokenOffsetPayloadTokenFilter::initialize(PyObject *module)
          {
            PyObject_SetAttrString((PyObject *) PY_TYPE(TokenOffsetPayloadTokenFilter), "class_", make_descriptor(TokenOffsetPayloadTokenFilter::initializeClass, 1));
            PyObject_SetAttrString((PyObject *) PY_TYPE(TokenOffsetPayloadTokenFilter), "wrapfn_", make_descriptor(t_TokenOffsetPayloadTokenFilter::wrap_jobject));
            PyObject_SetAttrString((PyObject *) PY_TYPE(TokenOffsetPayloadTokenFilter), "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_TokenOffsetPayloadTokenFilter_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, TokenOffsetPayloadTokenFilter::initializeClass, 1)))
              return NULL;
            return t_TokenOffsetPayloadTokenFilter::wrap_Object(TokenOffsetPayloadTokenFilter(((t_TokenOffsetPayloadTokenFilter *) arg)->object.this$));
          }
          static PyObject *t_TokenOffsetPayloadTokenFilter_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, TokenOffsetPayloadTokenFilter::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_TokenOffsetPayloadTokenFilter_init_(t_TokenOffsetPayloadTokenFilter *self, PyObject *args, PyObject *kwds)
          {
            ::org::apache::lucene::analysis::TokenStream a0((jobject) NULL);
            TokenOffsetPayloadTokenFilter object((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::analysis::TokenStream::initializeClass, &a0))
            {
              INT_CALL(object = TokenOffsetPayloadTokenFilter(a0));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_TokenOffsetPayloadTokenFilter_incrementToken(t_TokenOffsetPayloadTokenFilter *self, PyObject *args)
          {
            jboolean result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.incrementToken());
              Py_RETURN_BOOL(result);
            }

            return callSuper(PY_TYPE(TokenOffsetPayloadTokenFilter), (PyObject *) self, "incrementToken", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/PositiveScoresOnlyCollector.h"
#include "org/apache/lucene/index/LeafReaderContext.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/search/LeafCollector.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/search/Collector.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {

        ::java::lang::Class *PositiveScoresOnlyCollector::class$ = NULL;
        jmethodID *PositiveScoresOnlyCollector::mids$ = NULL;
        bool PositiveScoresOnlyCollector::live$ = false;

        jclass PositiveScoresOnlyCollector::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/search/PositiveScoresOnlyCollector");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_a816cd51c84fa652] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/search/Collector;)V");
            mids$[mid_getLeafCollector_d5dbc8c30b21e920] = env->getMethodID(cls, "getLeafCollector", "(Lorg/apache/lucene/index/LeafReaderContext;)Lorg/apache/lucene/search/LeafCollector;");

            class$ = new ::java::lang::Class(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        PositiveScoresOnlyCollector::PositiveScoresOnlyCollector(const ::org::apache::lucene::search::Collector & a0) : ::org::apache::lucene::search::FilterCollector(env->newObject(initializeClass, &mids$, mid_init$_a816cd51c84fa652, a0.this$)) {}

        ::org::apache::lucene::search::LeafCollector PositiveScoresOnlyCollector::getLeafCollector(const ::org::apache::lucene::index::LeafReaderContext & a0) const
        {
          return ::org::apache::lucene::search::LeafCollector(env->callObjectMethod(this$, mids$[mid_getLeafCollector_d5dbc8c30b21e920], a0.this$));
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        static PyObject *t_PositiveScoresOnlyCollector_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_PositiveScoresOnlyCollector_instance_(PyTypeObject *type, PyObject *arg);
        static int t_PositiveScoresOnlyCollector_init_(t_PositiveScoresOnlyCollector *self, PyObject *args, PyObject *kwds);
        static PyObject *t_PositiveScoresOnlyCollector_getLeafCollector(t_PositiveScoresOnlyCollector *self, PyObject *args);

        static PyMethodDef t_PositiveScoresOnlyCollector__methods_[] = {
          DECLARE_METHOD(t_PositiveScoresOnlyCollector, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_PositiveScoresOnlyCollector, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_PositiveScoresOnlyCollector, getLeafCollector, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        static PyType_Slot PY_TYPE_SLOTS(PositiveScoresOnlyCollector)[] = {
          { Py_tp_methods, t_PositiveScoresOnlyCollector__methods_ },
          { Py_tp_init, (void *) t_PositiveScoresOnlyCollector_init_ },
          { 0, NULL }
        };

        static PyType_Def *PY_TYPE_BASES(PositiveScoresOnlyCollector)[] = {
          &PY_TYPE_DEF(::org::apache::lucene::search::FilterCollector),
          NULL
        };

        DEFINE_TYPE(PositiveScoresOnlyCollector, t_PositiveScoresOnlyCollector, PositiveScoresOnlyCollector);

        void t_PositiveScoresOnlyCollector::install(PyObject *module)
        {
          installType(&PY_TYPE(PositiveScoresOnlyCollector), &PY_TYPE_DEF(PositiveScoresOnlyCollector), module, "PositiveScoresOnlyCollector", 0);
        }

        void t_PositiveScoresOnlyCollector::initialize(PyObject *module)
        {
          PyObject_SetAttrString((PyObject *) PY_TYPE(PositiveScoresOnlyCollector), "class_", make_descriptor(PositiveScoresOnlyCollector::initializeClass, 1));
          PyObject_SetAttrString((PyObject *) PY_TYPE(PositiveScoresOnlyCollector), "wrapfn_", make_descriptor(t_PositiveScoresOnlyCollector::wrap_jobject));
          PyObject_SetAttrString((PyObject *) PY_TYPE(PositiveScoresOnlyCollector), "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_PositiveScoresOnlyCollector_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, PositiveScoresOnlyCollector::initializeClass, 1)))
            return NULL;
          return t_PositiveScoresOnlyCollector::wrap_Object(PositiveScoresOnlyCollector(((t_PositiveScoresOnlyCollector *) arg)->object.this$));
        }
        static PyObject *t_PositiveScoresOnlyCollector_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, PositiveScoresOnlyCollector::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_PositiveScoresOnlyCollector_init_(t_PositiveScoresOnlyCollector *self, PyObject *args, PyObject *kwds)
        {
          ::org::apache::lucene::search::Collector a0((jobject) NULL);
          PositiveScoresOnlyCollector object((jobject) NULL);

          if (!parseArgs(args, "k", ::org::apache::lucene::search::Collector::initializeClass, &a0))
          {
            INT_CALL(object = PositiveScoresOnlyCollector(a0));
            self->object = object;
          }
          else
          {
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }

        static PyObject *t_PositiveScoresOnlyCollector_getLeafCollector(t_PositiveScoresOnlyCollector *self, PyObject *args)
        {
          ::org::apache::lucene::index::LeafReaderContext a0((jobject) NULL);
          ::org::apache::lucene::search::LeafCollector result((jobject) NULL);

          if (!parseArgs(args, "k", ::org::apache::lucene::index::LeafReaderContext::initializeClass, &a0))
          {
            OBJ_CALL(result = self->object.getLeafCollector(a0));
            return ::org::apache::lucene::search::t_LeafCollector::wrap_Object(result);
          }

          return callSuper(PY_TYPE(PositiveScoresOnlyCollector), (PyObject *) self, "getLeafCollector", args, 2);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/core/WhitespaceTokenizerFactory.h"
#include "org/apache/lucene/util/AttributeFactory.h"
#include "java/util/Map.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/analysis/Tokenizer.h"
#include "java/lang/String.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace core {

          ::java::lang::Class *WhitespaceTokenizerFactory::class$ = NULL;
          jmethodID *WhitespaceTokenizerFactory::mids$ = NULL;
          bool WhitespaceTokenizerFactory::live$ = false;
          ::java::lang::String *WhitespaceTokenizerFactory::NAME = NULL;
          ::java::lang::String *WhitespaceTokenizerFactory::RULE_JAVA = NULL;
          ::java::lang::String *WhitespaceTokenizerFactory::RULE_UNICODE = NULL;

          jclass WhitespaceTokenizerFactory::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/core/WhitespaceTokenizerFactory");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_408bd889ee3beae5] = env->getMethodID(cls, "<init>", "(Ljava/util/Map;)V");
              mids$[mid_create_824583f10752bea9] = env->getMethodID(cls, "create", "(Lorg/apache/lucene/util/AttributeFactory;)Lorg/apache/lucene/analysis/Tokenizer;");

              class$ = new ::java::lang::Class(cls);
              cls = (jclass) class$->this$;

              NAME = new ::java::lang::String(env->getStaticObjectField(cls, "NAME", "Ljava/lang/String;"));
              RULE_JAVA = new ::java::lang::String(env->getStaticObjectField(cls, "RULE_JAVA", "Ljava/lang/String;"));
              RULE_UNICODE = new ::java::lang::String(env->getStaticObjectField(cls, "RULE_UNICODE", "Ljava/lang/String;"));
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          WhitespaceTokenizerFactory::WhitespaceTokenizerFactory(const ::java::util::Map & a0) : ::org::apache::lucene::analysis::util::TokenizerFactory(env->newObject(initializeClass, &mids$, mid_init$_408bd889ee3beae5, a0.this$)) {}

          ::org::apache::lucene::analysis::Tokenizer WhitespaceTokenizerFactory::create(const ::org::apache::lucene::util::AttributeFactory & a0) const
          {
            return ::org::apache::lucene::analysis::Tokenizer(env->callObjectMethod(this$, mids$[mid_create_824583f10752bea9], a0.this$));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace core {
          static PyObject *t_WhitespaceTokenizerFactory_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_WhitespaceTokenizerFactory_instance_(PyTypeObject *type, PyObject *arg);
          static int t_WhitespaceTokenizerFactory_init_(t_WhitespaceTokenizerFactory *self, PyObject *args, PyObject *kwds);
          static PyObject *t_WhitespaceTokenizerFactory_create(t_WhitespaceTokenizerFactory *self, PyObject *args);

          static PyMethodDef t_WhitespaceTokenizerFactory__methods_[] = {
            DECLARE_METHOD(t_WhitespaceTokenizerFactory, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_WhitespaceTokenizerFactory, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_WhitespaceTokenizerFactory, create, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          static PyType_Slot PY_TYPE_SLOTS(WhitespaceTokenizerFactory)[] = {
            { Py_tp_methods, t_WhitespaceTokenizerFactory__methods_ },
            { Py_tp_init, (void *) t_WhitespaceTokenizerFactory_init_ },
            { 0, NULL }
          };

          static PyType_Def *PY_TYPE_BASES(WhitespaceTokenizerFactory)[] = {
            &PY_TYPE_DEF(::org::apache::lucene::analysis::util::TokenizerFactory),
            NULL
          };

          DEFINE_TYPE(WhitespaceTokenizerFactory, t_WhitespaceTokenizerFactory, WhitespaceTokenizerFactory);

          void t_WhitespaceTokenizerFactory::install(PyObject *module)
          {
            installType(&PY_TYPE(WhitespaceTokenizerFactory), &PY_TYPE_DEF(WhitespaceTokenizerFactory), module, "WhitespaceTokenizerFactory", 0);
          }

          void t_WhitespaceTokenizerFactory::initialize(PyObject *module)
          {
            PyObject_SetAttrString((PyObject *) PY_TYPE(WhitespaceTokenizerFactory), "class_", make_descriptor(WhitespaceTokenizerFactory::initializeClass, 1));
            PyObject_SetAttrString((PyObject *) PY_TYPE(WhitespaceTokenizerFactory), "wrapfn_", make_descriptor(t_WhitespaceTokenizerFactory::wrap_jobject));
            PyObject_SetAttrString((PyObject *) PY_TYPE(WhitespaceTokenizerFactory), "boxfn_", make_descriptor(boxObject));
            env->getClass(WhitespaceTokenizerFactory::initializeClass);
            PyObject_SetAttrString((PyObject *) PY_TYPE(WhitespaceTokenizerFactory), "NAME", make_descriptor(j2p(*WhitespaceTokenizerFactory::NAME)));
            PyObject_SetAttrString((PyObject *) PY_TYPE(WhitespaceTokenizerFactory), "RULE_JAVA", make_descriptor(j2p(*WhitespaceTokenizerFactory::RULE_JAVA)));
            PyObject_SetAttrString((PyObject *) PY_TYPE(WhitespaceTokenizerFactory), "RULE_UNICODE", make_descriptor(j2p(*WhitespaceTokenizerFactory::RULE_UNICODE)));
          }

          static PyObject *t_WhitespaceTokenizerFactory_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, WhitespaceTokenizerFactory::initializeClass, 1)))
              return NULL;
            return t_WhitespaceTokenizerFactory::wrap_Object(WhitespaceTokenizerFactory(((t_WhitespaceTokenizerFactory *) arg)->object.this$));
          }
          static PyObject *t_WhitespaceTokenizerFactory_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, WhitespaceTokenizerFactory::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_WhitespaceTokenizerFactory_init_(t_WhitespaceTokenizerFactory *self, PyObject *args, PyObject *kwds)
          {
            ::java::util::Map a0((jobject) NULL);
            PyTypeObject **p0;
            WhitespaceTokenizerFactory object((jobject) NULL);

            if (!parseArgs(args, "K", ::java::util::Map::initializeClass, &a0, &p0, ::java::util::t_Map::parameters_))
            {
              INT_CALL(object = WhitespaceTokenizerFactory(a0));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_WhitespaceTokenizerFactory_create(t_WhitespaceTokenizerFactory *self, PyObject *args)
          {
            ::org::apache::lucene::util::AttributeFactory a0((jobject) NULL);
            ::org::apache::lucene::analysis::Tokenizer result((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::util::AttributeFactory::initializeClass, &a0))
            {
              OBJ_CALL(result = self->object.create(a0));
              return ::org::apache::lucene::analysis::t_Tokenizer::wrap_Object(result);
            }

            return callSuper(PY_TYPE(WhitespaceTokenizerFactory), (PyObject *) self, "create", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/ngram/EdgeNGramTokenizerFactory.h"
#include "org/apache/lucene/util/AttributeFactory.h"
#include "java/util/Map.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/analysis/Tokenizer.h"
#include "java/lang/String.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace ngram {

          ::java::lang::Class *EdgeNGramTokenizerFactory::class$ = NULL;
          jmethodID *EdgeNGramTokenizerFactory::mids$ = NULL;
          bool EdgeNGramTokenizerFactory::live$ = false;
          ::java::lang::String *EdgeNGramTokenizerFactory::NAME = NULL;

          jclass EdgeNGramTokenizerFactory::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/ngram/EdgeNGramTokenizerFactory");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_408bd889ee3beae5] = env->getMethodID(cls, "<init>", "(Ljava/util/Map;)V");
              mids$[mid_create_824583f10752bea9] = env->getMethodID(cls, "create", "(Lorg/apache/lucene/util/AttributeFactory;)Lorg/apache/lucene/analysis/Tokenizer;");

              class$ = new ::java::lang::Class(cls);
              cls = (jclass) class$->this$;

              NAME = new ::java::lang::String(env->getStaticObjectField(cls, "NAME", "Ljava/lang/String;"));
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          EdgeNGramTokenizerFactory::EdgeNGramTokenizerFactory(const ::java::util::Map & a0) : ::org::apache::lucene::analysis::util::TokenizerFactory(env->newObject(initializeClass, &mids$, mid_init$_408bd889ee3beae5, a0.this$)) {}

          ::org::apache::lucene::analysis::Tokenizer EdgeNGramTokenizerFactory::create(const ::org::apache::lucene::util::AttributeFactory & a0) const
          {
            return ::org::apache::lucene::analysis::Tokenizer(env->callObjectMethod(this$, mids$[mid_create_824583f10752bea9], a0.this$));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace ngram {
          static PyObject *t_EdgeNGramTokenizerFactory_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_EdgeNGramTokenizerFactory_instance_(PyTypeObject *type, PyObject *arg);
          static int t_EdgeNGramTokenizerFactory_init_(t_EdgeNGramTokenizerFactory *self, PyObject *args, PyObject *kwds);
          static PyObject *t_EdgeNGramTokenizerFactory_create(t_EdgeNGramTokenizerFactory *self, PyObject *args);

          static PyMethodDef t_EdgeNGramTokenizerFactory__methods_[] = {
            DECLARE_METHOD(t_EdgeNGramTokenizerFactory, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_EdgeNGramTokenizerFactory, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_EdgeNGramTokenizerFactory, create, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          static PyType_Slot PY_TYPE_SLOTS(EdgeNGramTokenizerFactory)[] = {
            { Py_tp_methods, t_EdgeNGramTokenizerFactory__methods_ },
            { Py_tp_init, (void *) t_EdgeNGramTokenizerFactory_init_ },
            { 0, NULL }
          };

          static PyType_Def *PY_TYPE_BASES(EdgeNGramTokenizerFactory)[] = {
            &PY_TYPE_DEF(::org::apache::lucene::analysis::util::TokenizerFactory),
            NULL
          };

          DEFINE_TYPE(EdgeNGramTokenizerFactory, t_EdgeNGramTokenizerFactory, EdgeNGramTokenizerFactory);

          void t_EdgeNGramTokenizerFactory::install(PyObject *module)
          {
            installType(&PY_TYPE(EdgeNGramTokenizerFactory), &PY_TYPE_DEF(EdgeNGramTokenizerFactory), module, "EdgeNGramTokenizerFactory", 0);
          }

          void t_EdgeNGramTokenizerFactory::initialize(PyObject *module)
          {
            PyObject_SetAttrString((PyObject *) PY_TYPE(EdgeNGramTokenizerFactory), "class_", make_descriptor(EdgeNGramTokenizerFactory::initializeClass, 1));
            PyObject_SetAttrString((PyObject *) PY_TYPE(EdgeNGramTokenizerFactory), "wrapfn_", make_descriptor(t_EdgeNGramTokenizerFactory::wrap_jobject));
            PyObject_SetAttrString((PyObject *) PY_TYPE(EdgeNGramTokenizerFactory), "boxfn_", make_descriptor(boxObject));
            env->getClass(EdgeNGramTokenizerFactory::initializeClass);
            PyObject_SetAttrString((PyObject *) PY_TYPE(EdgeNGramTokenizerFactory), "NAME", make_descriptor(j2p(*EdgeNGramTokenizerFactory::NAME)));
          }

          static PyObject *t_EdgeNGramTokenizerFactory_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, EdgeNGramTokenizerFactory::initializeClass, 1)))
              return NULL;
            return t_EdgeNGramTokenizerFactory::wrap_Object(EdgeNGramTokenizerFactory(((t_EdgeNGramTokenizerFactory *) arg)->object.this$));
          }
          static PyObject *t_EdgeNGramTokenizerFactory_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, EdgeNGramTokenizerFactory::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_EdgeNGramTokenizerFactory_init_(t_EdgeNGramTokenizerFactory *self, PyObject *args, PyObject *kwds)
          {
            ::java::util::Map a0((jobject) NULL);
            PyTypeObject **p0;
            EdgeNGramTokenizerFactory object((jobject) NULL);

            if (!parseArgs(args, "K", ::java::util::Map::initializeClass, &a0, &p0, ::java::util::t_Map::parameters_))
            {
              INT_CALL(object = EdgeNGramTokenizerFactory(a0));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_EdgeNGramTokenizerFactory_create(t_EdgeNGramTokenizerFactory *self, PyObject *args)
          {
            ::org::apache::lucene::util::AttributeFactory a0((jobject) NULL);
            ::org::apache::lucene::analysis::Tokenizer result((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::util::AttributeFactory::initializeClass, &a0))
            {
              OBJ_CALL(result = self->object.create(a0));
              return ::org::apache::lucene::analysis::t_Tokenizer::wrap_Object(result);
            }

            return callSuper(PY_TYPE(EdgeNGramTokenizerFactory), (PyObject *) self, "create", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/pattern/PatternCaptureGroupFilterFactory.h"
#include "java/util/Map.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/analysis/pattern/PatternCaptureGroupTokenFilter.h"
#include "org/apache/lucene/analysis/TokenStream.h"
#include "java/lang/String.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace pattern {

          ::java::lang::Class *PatternCaptureGroupFilterFactory::class$ = NULL;
          jmethodID *PatternCaptureGroupFilterFactory::mids$ = NULL;
          bool PatternCaptureGroupFilterFactory::live$ = false;
          ::java::lang::String *PatternCaptureGroupFilterFactory::NAME = NULL;

          jclass PatternCaptureGroupFilterFactory::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/pattern/PatternCaptureGroupFilterFactory");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_408bd889ee3beae5] = env->getMethodID(cls, "<init>", "(Ljava/util/Map;)V");
              mids$[mid_create_57d29e721f280a9d] = env->getMethodID(cls, "create", "(Lorg/apache/lucene/analysis/TokenStream;)Lorg/apache/lucene/analysis/pattern/PatternCaptureGroupTokenFilter;");

              class$ = new ::java::lang::Class(cls);
              cls = (jclass) class$->this$;

              NAME = new ::java::lang::String(env->getStaticObjectField(cls, "NAME", "Ljava/lang/String;"));
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          PatternCaptureGroupFilterFactory::PatternCaptureGroupFilterFactory(const ::java::util::Map & a0) : ::org::apache::lucene::analysis::util::TokenFilterFactory(env->newObject(initializeClass, &mids$, mid_init$_408bd889ee3beae5, a0.this$)) {}

          ::org::apache::lucene::analysis::pattern::PatternCaptureGroupTokenFilter PatternCaptureGroupFilterFactory::create(const ::org::apache::lucene::analysis::TokenStream & a0) const
          {
            return ::org::apache::lucene::analysis::pattern::PatternCaptureGroupTokenFilter(env->callObjectMethod(this$, mids$[mid_create_57d29e721f280a9d], a0.this$));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace pattern {
          static PyObject *t_PatternCaptureGroupFilterFactory_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_PatternCaptureGroupFilterFactory_instance_(PyTypeObject *type, PyObject *arg);
          static int t_PatternCaptureGroupFilterFactory_init_(t_PatternCaptureGroupFilterFactory *self, PyObject *args, PyObject *kwds);
          static PyObject *t_PatternCaptureGroupFilterFactory_create(t_PatternCaptureGroupFilterFactory *self, PyObject *args);

          static PyMethodDef t_PatternCaptureGroupFilterFactory__methods_[] = {
            DECLARE_METHOD(t_PatternCaptureGroupFilterFactory, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_PatternCaptureGroupFilterFactory, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_PatternCaptureGroupFilterFactory, create, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          static PyType_Slot PY_TYPE_SLOTS(PatternCaptureGroupFilterFactory)[] = {
            { Py_tp_methods, t_PatternCaptureGroupFilterFactory__methods_ },
            { Py_tp_init, (void *) t_PatternCaptureGroupFilterFactory_init_ },
            { 0, NULL }
          };

          static PyType_Def *PY_TYPE_BASES(PatternCaptureGroupFilterFactory)[] = {
            &PY_TYPE_DEF(::org::apache::lucene::analysis::util::TokenFilterFactory),
            NULL
          };

          DEFINE_TYPE(PatternCaptureGroupFilterFactory, t_PatternCaptureGroupFilterFactory, PatternCaptureGroupFilterFactory);

          void t_PatternCaptureGroupFilterFactory::install(PyObject *module)
          {
            installType(&PY_TYPE(PatternCaptureGroupFilterFactory), &PY_TYPE_DEF(PatternCaptureGroupFilterFactory), module, "PatternCaptureGroupFilterFactory", 0);
          }

          void t_PatternCaptureGroupFilterFactory::initialize(PyObject *module)
          {
            PyObject_SetAttrString((PyObject *) PY_TYPE(PatternCaptureGroupFilterFactory), "class_", make_descriptor(PatternCaptureGroupFilterFactory::initializeClass, 1));
            PyObject_SetAttrString((PyObject *) PY_TYPE(PatternCaptureGroupFilterFactory), "wrapfn_", make_descriptor(t_PatternCaptureGroupFilterFactory::wrap_jobject));
            PyObject_SetAttrString((PyObject *) PY_TYPE(PatternCaptureGroupFilterFactory), "boxfn_", make_descriptor(boxObject));
            env->getClass(PatternCaptureGroupFilterFactory::initializeClass);
            PyObject_SetAttrString((PyObject *) PY_TYPE(PatternCaptureGroupFilterFactory), "NAME", make_descriptor(j2p(*PatternCaptureGroupFilterFactory::NAME)));
          }

          static PyObject *t_PatternCaptureGroupFilterFactory_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, PatternCaptureGroupFilterFactory::initializeClass, 1)))
              return NULL;
            return t_PatternCaptureGroupFilterFactory::wrap_Object(PatternCaptureGroupFilterFactory(((t_PatternCaptureGroupFilterFactory *) arg)->object.this$));
          }
          static PyObject *t_PatternCaptureGroupFilterFactory_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, PatternCaptureGroupFilterFactory::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_PatternCaptureGroupFilterFactory_init_(t_PatternCaptureGroupFilterFactory *self, PyObject *args, PyObject *kwds)
          {
            ::java::util::Map a0((jobject) NULL);
            PyTypeObject **p0;
            PatternCaptureGroupFilterFactory object((jobject) NULL);

            if (!parseArgs(args, "K", ::java::util::Map::initializeClass, &a0, &p0, ::java::util::t_Map::parameters_))
            {
              INT_CALL(object = PatternCaptureGroupFilterFactory(a0));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_PatternCaptureGroupFilterFactory_create(t_PatternCaptureGroupFilterFactory *self, PyObject *args)
          {
            ::org::apache::lucene::analysis::TokenStream a0((jobject) NULL);
            ::org::apache::lucene::analysis::pattern::PatternCaptureGroupTokenFilter result((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::analysis::TokenStream::initializeClass, &a0))
            {
              OBJ_CALL(result = self->object.create(a0));
              return ::org::apache::lucene::analysis::pattern::t_PatternCaptureGroupTokenFilter::wrap_Object(result);
            }

            return callSuper(PY_TYPE(PatternCaptureGroupFilterFactory), (PyObject *) self, "create", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/DocValuesStats$SortedDocValuesStats.h"
#include "org/apache/lucene/util/BytesRef.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {

        ::java::lang::Class *DocValuesStats$SortedDocValuesStats::class$ = NULL;
        jmethodID *DocValuesStats$SortedDocValuesStats::mids$ = NULL;
        bool DocValuesStats$SortedDocValuesStats::live$ = false;

        jclass DocValuesStats$SortedDocValuesStats::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/search/DocValuesStats$SortedDocValuesStats");

            mids$ = new jmethodID[max_mid];
            mids$[mid_hasValue_a1d30e1ee40c89a2] = env->getMethodID(cls, "hasValue", "(I)Z");
            mids$[mid_doAccumulate_040c4cd0390c5aff] = env->getMethodID(cls, "doAccumulate", "(I)V");
            mids$[mid_init_07cae694a8cf1c6d] = env->getMethodID(cls, "init", "(Lorg/apache/lucene/index/LeafReaderContext;)Z");

            class$ = new ::java::lang::Class(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        static PyObject *t_DocValuesStats$SortedDocValuesStats_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_DocValuesStats$SortedDocValuesStats_instance_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_DocValuesStats$SortedDocValuesStats_of_(t_DocValuesStats$SortedDocValuesStats *self, PyObject *args);
        static PyObject *t_DocValuesStats$SortedDocValuesStats_get__parameters_(t_DocValuesStats$SortedDocValuesStats *self, void *data);
        static PyGetSetDef t_DocValuesStats$SortedDocValuesStats__fields_[] = {
          DECLARE_GET_FIELD(t_DocValuesStats$SortedDocValuesStats, parameters_),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_DocValuesStats$SortedDocValuesStats__methods_[] = {
          DECLARE_METHOD(t_DocValuesStats$SortedDocValuesStats, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_DocValuesStats$SortedDocValuesStats, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_DocValuesStats$SortedDocValuesStats, of_, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        static PyType_Slot PY_TYPE_SLOTS(DocValuesStats$SortedDocValuesStats)[] = {
          { Py_tp_methods, t_DocValuesStats$SortedDocValuesStats__methods_ },
          { Py_tp_init, (void *) abstract_init },
          { Py_tp_getset, t_DocValuesStats$SortedDocValuesStats__fields_ },
          { 0, NULL }
        };

        static PyType_Def *PY_TYPE_BASES(DocValuesStats$SortedDocValuesStats)[] = {
          &PY_TYPE_DEF(::org::apache::lucene::search::DocValuesStats),
          NULL
        };

        DEFINE_TYPE(DocValuesStats$SortedDocValuesStats, t_DocValuesStats$SortedDocValuesStats, DocValuesStats$SortedDocValuesStats);
        PyObject *t_DocValuesStats$SortedDocValuesStats::wrap_Object(const DocValuesStats$SortedDocValuesStats& object, PyTypeObject *p0)
        {
          PyObject *obj = t_DocValuesStats$SortedDocValuesStats::wrap_Object(object);
          if (obj != NULL && obj != Py_None)
          {
            t_DocValuesStats$SortedDocValuesStats *self = (t_DocValuesStats$SortedDocValuesStats *) obj;
            self->parameters[0] = p0;
          }
          return obj;
        }

        PyObject *t_DocValuesStats$SortedDocValuesStats::wrap_jobject(const jobject& object, PyTypeObject *p0)
        {
          PyObject *obj = t_DocValuesStats$SortedDocValuesStats::wrap_jobject(object);
          if (obj != NULL && obj != Py_None)
          {
            t_DocValuesStats$SortedDocValuesStats *self = (t_DocValuesStats$SortedDocValuesStats *) obj;
            self->parameters[0] = p0;
          }
          return obj;
        }

        void t_DocValuesStats$SortedDocValuesStats::install(PyObject *module)
        {
          installType(&PY_TYPE(DocValuesStats$SortedDocValuesStats), &PY_TYPE_DEF(DocValuesStats$SortedDocValuesStats), module, "DocValuesStats$SortedDocValuesStats", 0);
        }

        void t_DocValuesStats$SortedDocValuesStats::initialize(PyObject *module)
        {
          PyObject_SetAttrString((PyObject *) PY_TYPE(DocValuesStats$SortedDocValuesStats), "class_", make_descriptor(DocValuesStats$SortedDocValuesStats::initializeClass, 1));
          PyObject_SetAttrString((PyObject *) PY_TYPE(DocValuesStats$SortedDocValuesStats), "wrapfn_", make_descriptor(t_DocValuesStats$SortedDocValuesStats::wrap_jobject));
          PyObject_SetAttrString((PyObject *) PY_TYPE(DocValuesStats$SortedDocValuesStats), "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_DocValuesStats$SortedDocValuesStats_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, DocValuesStats$SortedDocValuesStats::initializeClass, 1)))
            return NULL;
          return t_DocValuesStats$SortedDocValuesStats::wrap_Object(DocValuesStats$SortedDocValuesStats(((t_DocValuesStats$SortedDocValuesStats *) arg)->object.this$));
        }
        static PyObject *t_DocValuesStats$SortedDocValuesStats_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, DocValuesStats$SortedDocValuesStats::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static PyObject *t_DocValuesStats$SortedDocValuesStats_of_(t_DocValuesStats$SortedDocValuesStats *self, PyObject *args)
        {
          if (!parseArg(args, "T", 1, &(self->parameters)))
            Py_RETURN_SELF;
          return PyErr_SetArgsError((PyObject *) self, "of_", args);
        }
        static PyObject *t_DocValuesStats$SortedDocValuesStats_get__parameters_(t_DocValuesStats$SortedDocValuesStats *self, void *data)
        {
          return typeParameters(self->parameters, sizeof(self->parameters));
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/codecs/PointsWriter.h"
#include "java/lang/Class.h"
#include "java/io/Closeable.h"
#include "org/apache/lucene/codecs/PointsReader.h"
#include "org/apache/lucene/index/FieldInfo.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/index/MergeState.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace codecs {

        ::java::lang::Class *PointsWriter::class$ = NULL;
        jmethodID *PointsWriter::mids$ = NULL;
        bool PointsWriter::live$ = false;

        jclass PointsWriter::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/codecs/PointsWriter");

            mids$ = new jmethodID[max_mid];
            mids$[mid_finish_f2cc1bce94666404] = env->getMethodID(cls, "finish", "()V");
            mids$[mid_merge_747cb13f783c9b42] = env->getMethodID(cls, "merge", "(Lorg/apache/lucene/index/MergeState;)V");
            mids$[mid_writeField_1dd305600f855cd6] = env->getMethodID(cls, "writeField", "(Lorg/apache/lucene/index/FieldInfo;Lorg/apache/lucene/codecs/PointsReader;)V");
            mids$[mid_mergeOneField_33d0b405e09d70b7] = env->getMethodID(cls, "mergeOneField", "(Lorg/apache/lucene/index/MergeState;Lorg/apache/lucene/index/FieldInfo;)V");

            class$ = new ::java::lang::Class(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        void PointsWriter::finish() const
        {
          env->callVoidMethod(this$, mids$[mid_finish_f2cc1bce94666404]);
        }

        void PointsWriter::merge(const ::org::apache::lucene::index::MergeState & a0) const
        {
          env->callVoidMethod(this$, mids$[mid_merge_747cb13f783c9b42], a0.this$);
        }

        void PointsWriter::writeField(const ::org::apache::lucene::index::FieldInfo & a0, const ::org::apache::lucene::codecs::PointsReader & a1) const
        {
          env->callVoidMethod(this$, mids$[mid_writeField_1dd305600f855cd6], a0.this$, a1.this$);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace codecs {
        static PyObject *t_PointsWriter_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_PointsWriter_instance_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_PointsWriter_finish(t_PointsWriter *self);
        static PyObject *t_PointsWriter_merge(t_PointsWriter *self, PyObject *arg);
        static PyObject *t_PointsWriter_writeField(t_PointsWriter *self, PyObject *args);

        static PyMethodDef t_PointsWriter__methods_[] = {
          DECLARE_METHOD(t_PointsWriter, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_PointsWriter, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_PointsWriter, finish, METH_NOARGS),
          DECLARE_METHOD(t_PointsWriter, merge, METH_O),
          DECLARE_METHOD(t_PointsWriter, writeField, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        static PyType_Slot PY_TYPE_SLOTS(PointsWriter)[] = {
          { Py_tp_methods, t_PointsWriter__methods_ },
          { Py_tp_init, (void *) abstract_init },
          { 0, NULL }
        };

        static PyType_Def *PY_TYPE_BASES(PointsWriter)[] = {
          &PY_TYPE_DEF(::java::lang::Object),
          NULL
        };

        DEFINE_TYPE(PointsWriter, t_PointsWriter, PointsWriter);

        void t_PointsWriter::install(PyObject *module)
        {
          installType(&PY_TYPE(PointsWriter), &PY_TYPE_DEF(PointsWriter), module, "PointsWriter", 0);
        }

        void t_PointsWriter::initialize(PyObject *module)
        {
          PyObject_SetAttrString((PyObject *) PY_TYPE(PointsWriter), "class_", make_descriptor(PointsWriter::initializeClass, 1));
          PyObject_SetAttrString((PyObject *) PY_TYPE(PointsWriter), "wrapfn_", make_descriptor(t_PointsWriter::wrap_jobject));
          PyObject_SetAttrString((PyObject *) PY_TYPE(PointsWriter), "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_PointsWriter_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, PointsWriter::initializeClass, 1)))
            return NULL;
          return t_PointsWriter::wrap_Object(PointsWriter(((t_PointsWriter *) arg)->object.this$));
        }
        static PyObject *t_PointsWriter_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, PointsWriter::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static PyObject *t_PointsWriter_finish(t_PointsWriter *self)
        {
          OBJ_CALL(self->object.finish());
          Py_RETURN_NONE;
        }

        static PyObject *t_PointsWriter_merge(t_PointsWriter *self, PyObject *arg)
        {
          ::org::apache::lucene::index::MergeState a0((jobject) NULL);

          if (!parseArg(arg, "k", ::org::apache::lucene::index::MergeState::initializeClass, &a0))
          {
            OBJ_CALL(self->object.merge(a0));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "merge", arg);
          return NULL;
        }

        static PyObject *t_PointsWriter_writeField(t_PointsWriter *self, PyObject *args)
        {
          ::org::apache::lucene::index::FieldInfo a0((jobject) NULL);
          ::org::apache::lucene::codecs::PointsReader a1((jobject) NULL);

          if (!parseArgs(args, "kk", ::org::apache::lucene::index::FieldInfo::initializeClass, ::org::apache::lucene::codecs::PointsReader::initializeClass, &a0, &a1))
          {
            OBJ_CALL(self->object.writeField(a0, a1));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "writeField", args);
          return NULL;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/uhighlight/PostingsOffsetStrategy.h"
#include "org/apache/lucene/search/uhighlight/UnifiedHighlighter$OffsetSource.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/index/LeafReader.h"
#include "org/apache/lucene/search/uhighlight/OffsetsEnum.h"
#include "java/lang/String.h"
#include "org/apache/lucene/search/uhighlight/UHComponents.h"
#include "java/io/IOException.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace uhighlight {

          ::java::lang::Class *PostingsOffsetStrategy::class$ = NULL;
          jmethodID *PostingsOffsetStrategy::mids$ = NULL;
          bool PostingsOffsetStrategy::live$ = false;

          jclass PostingsOffsetStrategy::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/search/uhighlight/PostingsOffsetStrategy");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_8858451d37bfc18c] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/search/uhighlight/UHComponents;)V");
              mids$[mid_getOffsetSource_d592a7a3fc9567b1] = env->getMethodID(cls, "getOffsetSource", "()Lorg/apache/lucene/search/uhighlight/UnifiedHighlighter$OffsetSource;");
              mids$[mid_getOffsetsEnum_55596ccb3f6b81ab] = env->getMethodID(cls, "getOffsetsEnum", "(Lorg/apache/lucene/index/LeafReader;ILjava/lang/String;)Lorg/apache/lucene/search/uhighlight/OffsetsEnum;");

              class$ = new ::java::lang::Class(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          PostingsOffsetStrategy::PostingsOffsetStrategy(const ::org::apache::lucene::search::uhighlight::UHComponents & a0) : ::org::apache::lucene::search::uhighlight::FieldOffsetStrategy(env->newObject(initializeClass, &mids$, mid_init$_8858451d37bfc18c, a0.this$)) {}

          ::org::apache::lucene::search::uhighlight::UnifiedHighlighter$OffsetSource PostingsOffsetStrategy::getOffsetSource() const
          {
            return ::org::apache::lucene::search::uhighlight::UnifiedHighlighter$OffsetSource(env->callObjectMethod(this$, mids$[mid_getOffsetSource_d592a7a3fc9567b1]));
          }

          ::org::apache::lucene::search::uhighlight::OffsetsEnum PostingsOffsetStrategy::getOffsetsEnum(const ::org::apache::lucene::index::LeafReader & a0, jint a1, const ::java::lang::String & a2) const
          {
            return ::org::apache::lucene::search::uhighlight::OffsetsEnum(env->callObjectMethod(this$, mids$[mid_getOffsetsEnum_55596ccb3f6b81ab], a0.this$, a1, a2.this$));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace uhighlight {
          static PyObject *t_PostingsOffsetStrategy_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_PostingsOffsetStrategy_instance_(PyTypeObject *type, PyObject *arg);
          static int t_PostingsOffsetStrategy_init_(t_PostingsOffsetStrategy *self, PyObject *args, PyObject *kwds);
          static PyObject *t_PostingsOffsetStrategy_getOffsetSource(t_PostingsOffsetStrategy *self, PyObject *args);
          static PyObject *t_PostingsOffsetStrategy_getOffsetsEnum(t_PostingsOffsetStrategy *self, PyObject *args);
          static PyObject *t_PostingsOffsetStrategy_get__offsetSource(t_PostingsOffsetStrategy *self, void *data);
          static PyGetSetDef t_PostingsOffsetStrategy__fields_[] = {
            DECLARE_GET_FIELD(t_PostingsOffsetStrategy, offsetSource),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_PostingsOffsetStrategy__methods_[] = {
            DECLARE_METHOD(t_PostingsOffsetStrategy, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_PostingsOffsetStrategy, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_PostingsOffsetStrategy, getOffsetSource, METH_VARARGS),
            DECLARE_METHOD(t_PostingsOffsetStrategy, getOffsetsEnum, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          static PyType_Slot PY_TYPE_SLOTS(PostingsOffsetStrategy)[] = {
            { Py_tp_methods, t_PostingsOffsetStrategy__methods_ },
            { Py_tp_init, (void *) t_PostingsOffsetStrategy_init_ },
            { Py_tp_getset, t_PostingsOffsetStrategy__fields_ },
            { 0, NULL }
          };

          static PyType_Def *PY_TYPE_BASES(PostingsOffsetStrategy)[] = {
            &PY_TYPE_DEF(::org::apache::lucene::search::uhighlight::FieldOffsetStrategy),
            NULL
          };

          DEFINE_TYPE(PostingsOffsetStrategy, t_PostingsOffsetStrategy, PostingsOffsetStrategy);

          void t_PostingsOffsetStrategy::install(PyObject *module)
          {
            installType(&PY_TYPE(PostingsOffsetStrategy), &PY_TYPE_DEF(PostingsOffsetStrategy), module, "PostingsOffsetStrategy", 0);
          }

          void t_PostingsOffsetStrategy::initialize(PyObject *module)
          {
            PyObject_SetAttrString((PyObject *) PY_TYPE(PostingsOffsetStrategy), "class_", make_descriptor(PostingsOffsetStrategy::initializeClass, 1));
            PyObject_SetAttrString((PyObject *) PY_TYPE(PostingsOffsetStrategy), "wrapfn_", make_descriptor(t_PostingsOffsetStrategy::wrap_jobject));
            PyObject_SetAttrString((PyObject *) PY_TYPE(PostingsOffsetStrategy), "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_PostingsOffsetStrategy_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, PostingsOffsetStrategy::initializeClass, 1)))
              return NULL;
            return t_PostingsOffsetStrategy::wrap_Object(PostingsOffsetStrategy(((t_PostingsOffsetStrategy *) arg)->object.this$));
          }
          static PyObject *t_PostingsOffsetStrategy_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, PostingsOffsetStrategy::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_PostingsOffsetStrategy_init_(t_PostingsOffsetStrategy *self, PyObject *args, PyObject *kwds)
          {
            ::org::apache::lucene::search::uhighlight::UHComponents a0((jobject) NULL);
            PostingsOffsetStrategy object((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::search::uhighlight::UHComponents::initializeClass, &a0))
            {
              INT_CALL(object = PostingsOffsetStrategy(a0));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_PostingsOffsetStrategy_getOffsetSource(t_PostingsOffsetStrategy *self, PyObject *args)
          {
            ::org::apache::lucene::search::uhighlight::UnifiedHighlighter$OffsetSource result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.getOffsetSource());
              return ::org::apache::lucene::search::uhighlight::t_UnifiedHighlighter$OffsetSource::wrap_Object(result);
            }

            return callSuper(PY_TYPE(PostingsOffsetStrategy), (PyObject *) self, "getOffsetSource", args, 2);
          }

          static PyObject *t_PostingsOffsetStrategy_getOffsetsEnum(t_PostingsOffsetStrategy *self, PyObject *args)
          {
            ::org::apache::lucene::index::LeafReader a0((jobject) NULL);
            jint a1;
            ::java::lang::String a2((jobject) NULL);
            ::org::apache::lucene::search::uhighlight::OffsetsEnum result((jobject) NULL);

            if (!parseArgs(args, "kIs", ::org::apache::lucene::index::LeafReader::initializeClass, &a0, &a1, &a2))
            {
              OBJ_CALL(result = self->object.getOffsetsEnum(a0, a1, a2));
              return ::org::apache::lucene::search::uhighlight::t_OffsetsEnum::wrap_Object(result);
            }

            return callSuper(PY_TYPE(PostingsOffsetStrategy), (PyObject *) self, "getOffsetsEnum", args, 2);
          }

          static PyObject *t_PostingsOffsetStrategy_get__offsetSource(t_PostingsOffsetStrategy *self, void *data)
          {
            ::org::apache::lucene::search::uhighlight::UnifiedHighlighter$OffsetSource value((jobject) NULL);
            OBJ_CALL(value = self->object.getOffsetSource());
            return ::org::apache::lucene::search::uhighlight::t_UnifiedHighlighter$OffsetSource::wrap_Object(value);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queryparser/flexible/standard/processors/StandardQueryNodeProcessorPipeline.h"
#include "org/apache/lucene/queryparser/flexible/core/config/QueryConfigHandler.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace standard {
            namespace processors {

              ::java::lang::Class *StandardQueryNodeProcessorPipeline::class$ = NULL;
              jmethodID *StandardQueryNodeProcessorPipeline::mids$ = NULL;
              bool StandardQueryNodeProcessorPipeline::live$ = false;

              jclass StandardQueryNodeProcessorPipeline::initializeClass(bool getOnly)
              {
                if (getOnly)
                  return (jclass) (live$ ? class$->this$ : NULL);
                if (class$ == NULL)
                {
                  jclass cls = (jclass) env->findClass("org/apache/lucene/queryparser/flexible/standard/processors/StandardQueryNodeProcessorPipeline");

                  mids$ = new jmethodID[max_mid];
                  mids$[mid_init$_ae2484f2d8820041] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/queryparser/flexible/core/config/QueryConfigHandler;)V");

                  class$ = new ::java::lang::Class(cls);
                  live$ = true;
                }
                return (jclass) class$->this$;
              }

              StandardQueryNodeProcessorPipeline::StandardQueryNodeProcessorPipeline(const ::org::apache::lucene::queryparser::flexible::core::config::QueryConfigHandler & a0) : ::org::apache::lucene::queryparser::flexible::core::processors::QueryNodeProcessorPipeline(env->newObject(initializeClass, &mids$, mid_init$_ae2484f2d8820041, a0.this$)) {}
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace standard {
            namespace processors {
              static PyObject *t_StandardQueryNodeProcessorPipeline_cast_(PyTypeObject *type, PyObject *arg);
              static PyObject *t_StandardQueryNodeProcessorPipeline_instance_(PyTypeObject *type, PyObject *arg);
              static int t_StandardQueryNodeProcessorPipeline_init_(t_StandardQueryNodeProcessorPipeline *self, PyObject *args, PyObject *kwds);

              static PyMethodDef t_StandardQueryNodeProcessorPipeline__methods_[] = {
                DECLARE_METHOD(t_StandardQueryNodeProcessorPipeline, cast_, METH_O | METH_CLASS),
                DECLARE_METHOD(t_StandardQueryNodeProcessorPipeline, instance_, METH_O | METH_CLASS),
                { NULL, NULL, 0, NULL }
              };

              static PyType_Slot PY_TYPE_SLOTS(StandardQueryNodeProcessorPipeline)[] = {
                { Py_tp_methods, t_StandardQueryNodeProcessorPipeline__methods_ },
                { Py_tp_init, (void *) t_StandardQueryNodeProcessorPipeline_init_ },
                { 0, NULL }
              };

              static PyType_Def *PY_TYPE_BASES(StandardQueryNodeProcessorPipeline)[] = {
                &PY_TYPE_DEF(::org::apache::lucene::queryparser::flexible::core::processors::QueryNodeProcessorPipeline),
                NULL
              };

              DEFINE_TYPE(StandardQueryNodeProcessorPipeline, t_StandardQueryNodeProcessorPipeline, StandardQueryNodeProcessorPipeline);

              void t_StandardQueryNodeProcessorPipeline::install(PyObject *module)
              {
                installType(&PY_TYPE(StandardQueryNodeProcessorPipeline), &PY_TYPE_DEF(StandardQueryNodeProcessorPipeline), module, "StandardQueryNodeProcessorPipeline", 0);
              }

              void t_StandardQueryNodeProcessorPipeline::initialize(PyObject *module)
              {
                PyObject_SetAttrString((PyObject *) PY_TYPE(StandardQueryNodeProcessorPipeline), "class_", make_descriptor(StandardQueryNodeProcessorPipeline::initializeClass, 1));
                PyObject_SetAttrString((PyObject *) PY_TYPE(StandardQueryNodeProcessorPipeline), "wrapfn_", make_descriptor(t_StandardQueryNodeProcessorPipeline::wrap_jobject));
                PyObject_SetAttrString((PyObject *) PY_TYPE(StandardQueryNodeProcessorPipeline), "boxfn_", make_descriptor(boxObject));
              }

              static PyObject *t_StandardQueryNodeProcessorPipeline_cast_(PyTypeObject *type, PyObject *arg)
              {
                if (!(arg = castCheck(arg, StandardQueryNodeProcessorPipeline::initializeClass, 1)))
                  return NULL;
                return t_StandardQueryNodeProcessorPipeline::wrap_Object(StandardQueryNodeProcessorPipeline(((t_StandardQueryNodeProcessorPipeline *) arg)->object.this$));
              }
              static PyObject *t_StandardQueryNodeProcessorPipeline_instance_(PyTypeObject *type, PyObject *arg)
              {
                if (!castCheck(arg, StandardQueryNodeProcessorPipeline::initializeClass, 0))
                  Py_RETURN_FALSE;
                Py_RETURN_TRUE;
              }

              static int t_StandardQueryNodeProcessorPipeline_init_(t_StandardQueryNodeProcessorPipeline *self, PyObject *args, PyObject *kwds)
              {
                ::org::apache::lucene::queryparser::flexible::core::config::QueryConfigHandler a0((jobject) NULL);
                StandardQueryNodeProcessorPipeline object((jobject) NULL);

                if (!parseArgs(args, "k", ::org::apache::lucene::queryparser::flexible::core::config::QueryConfigHandler::initializeClass, &a0))
                {
                  INT_CALL(object = StandardQueryNodeProcessorPipeline(a0));
                  self->object = object;
                }
                else
                {
                  PyErr_SetArgsError((PyObject *) self, "__init__", args);
                  return -1;
                }

                return 0;
              }
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/facet/taxonomy/CachedOrdinalsReader$CachedOrds.h"
#include "org/apache/lucene/facet/taxonomy/OrdinalsReader$OrdinalsSegmentReader.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/util/Accountable.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace facet {
        namespace taxonomy {

          ::java::lang::Class *CachedOrdinalsReader$CachedOrds::class$ = NULL;
          jmethodID *CachedOrdinalsReader$CachedOrds::mids$ = NULL;
          jfieldID *CachedOrdinalsReader$CachedOrds::fids$ = NULL;
          bool CachedOrdinalsReader$CachedOrds::live$ = false;

          jclass CachedOrdinalsReader$CachedOrds::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/facet/taxonomy/CachedOrdinalsReader$CachedOrds");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_902fd720a2367c23] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/facet/taxonomy/OrdinalsReader$OrdinalsSegmentReader;I)V");
              mids$[mid_ramBytesUsed_2e5ae9edcb9b072f] = env->getMethodID(cls, "ramBytesUsed", "()J");

              fids$ = new jfieldID[max_fid];
              fids$[fid_offsets] = env->getFieldID(cls, "offsets", "[I");
              fids$[fid_ordinals] = env->getFieldID(cls, "ordinals", "[I");

              class$ = new ::java::lang::Class(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          CachedOrdinalsReader$CachedOrds::CachedOrdinalsReader$CachedOrds(const ::org::apache::lucene::facet::taxonomy::OrdinalsReader$OrdinalsSegmentReader & a0, jint a1) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_902fd720a2367c23, a0.this$, a1)) {}

          jlong CachedOrdinalsReader$CachedOrds::ramBytesUsed() const
          {
            return env->callLongMethod(this$, mids$[mid_ramBytesUsed_2e5ae9edcb9b072f]);
          }

          JArray< jint > CachedOrdinalsReader$CachedOrds::_get_offsets() const
          {
            return JArray< jint >(env->getObjectField(this$, fids$[fid_offsets]));
          }

          JArray< jint > CachedOrdinalsReader$CachedOrds::_get_ordinals() const
          {
            return JArray< jint >(env->getObjectField(this$, fids$[fid_ordinals]));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace facet {
        namespace taxonomy {
          static PyObject *t_CachedOrdinalsReader$CachedOrds_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_CachedOrdinalsReader$CachedOrds_instance_(PyTypeObject *type, PyObject *arg);
          static int t_CachedOrdinalsReader$CachedOrds_init_(t_CachedOrdinalsReader$CachedOrds *self, PyObject *args, PyObject *kwds);
          static PyObject *t_CachedOrdinalsReader$CachedOrds_ramBytesUsed(t_CachedOrdinalsReader$CachedOrds *self);
          static PyObject *t_CachedOrdinalsReader$CachedOrds_get__offsets(t_CachedOrdinalsReader$CachedOrds *self, void *data);
          static PyObject *t_CachedOrdinalsReader$CachedOrds_get__ordinals(t_CachedOrdinalsReader$CachedOrds *self, void *data);

          static PyGetSetDef t_CachedOrdinalsReader$CachedOrds__fields_[] = {
            DECLARE_GET_FIELD(t_CachedOrdinalsReader$CachedOrds, offsets),
            DECLARE_GET_FIELD(t_CachedOrdinalsReader$CachedOrds, ordinals),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_CachedOrdinalsReader$CachedOrds__methods_[] = {
            DECLARE_METHOD(t_CachedOrdinalsReader$CachedOrds, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_CachedOrdinalsReader$CachedOrds, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_CachedOrdinalsReader$CachedOrds, ramBytesUsed, METH_NOARGS),
            { NULL, NULL, 0, NULL }
          };

          static PyType_Slot PY_TYPE_SLOTS(CachedOrdinalsReader$CachedOrds)[] = {
            { Py_tp_methods, t_CachedOrdinalsReader$CachedOrds__methods_ },
            { Py_tp_init, (void *) t_CachedOrdinalsReader$CachedOrds_init_ },
            { Py_tp_getset, t_CachedOrdinalsReader$CachedOrds__fields_ },
            { 0, NULL }
          };

          static PyType_Def *PY_TYPE_BASES(CachedOrdinalsReader$CachedOrds)[] = {
            &PY_TYPE_DEF(::java::lang::Object),
            NULL
          };

          DEFINE_TYPE(CachedOrdinalsReader$CachedOrds, t_CachedOrdinalsReader$CachedOrds, CachedOrdinalsReader$CachedOrds);

          void t_CachedOrdinalsReader$CachedOrds::install(PyObject *module)
          {
            installType(&PY_TYPE(CachedOrdinalsReader$CachedOrds), &PY_TYPE_DEF(CachedOrdinalsReader$CachedOrds), module, "CachedOrdinalsReader$CachedOrds", 0);
          }

          void t_CachedOrdinalsReader$CachedOrds::initialize(PyObject *module)
          {
            PyObject_SetAttrString((PyObject *) PY_TYPE(CachedOrdinalsReader$CachedOrds), "class_", make_descriptor(CachedOrdinalsReader$CachedOrds::initializeClass, 1));
            PyObject_SetAttrString((PyObject *) PY_TYPE(CachedOrdinalsReader$CachedOrds), "wrapfn_", make_descriptor(t_CachedOrdinalsReader$CachedOrds::wrap_jobject));
            PyObject_SetAttrString((PyObject *) PY_TYPE(CachedOrdinalsReader$CachedOrds), "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_CachedOrdinalsReader$CachedOrds_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, CachedOrdinalsReader$CachedOrds::initializeClass, 1)))
              return NULL;
            return t_CachedOrdinalsReader$CachedOrds::wrap_Object(CachedOrdinalsReader$CachedOrds(((t_CachedOrdinalsReader$CachedOrds *) arg)->object.this$));
          }
          static PyObject *t_CachedOrdinalsReader$CachedOrds_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, CachedOrdinalsReader$CachedOrds::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_CachedOrdinalsReader$CachedOrds_init_(t_CachedOrdinalsReader$CachedOrds *self, PyObject *args, PyObject *kwds)
          {
            ::org::apache::lucene::facet::taxonomy::OrdinalsReader$OrdinalsSegmentReader a0((jobject) NULL);
            jint a1;
            CachedOrdinalsReader$CachedOrds object((jobject) NULL);

            if (!parseArgs(args, "kI", ::org::apache::lucene::facet::taxonomy::OrdinalsReader$OrdinalsSegmentReader::initializeClass, &a0, &a1))
            {
              INT_CALL(object = CachedOrdinalsReader$CachedOrds(a0, a1));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_CachedOrdinalsReader$CachedOrds_ramBytesUsed(t_CachedOrdinalsReader$CachedOrds *self)
          {
            jlong result;
            OBJ_CALL(result = self->object.ramBytesUsed());
            return PyLong_FromLongLong((PY_LONG_LONG) result);
          }

          static PyObject *t_CachedOrdinalsReader$CachedOrds_get__offsets(t_CachedOrdinalsReader$CachedOrds *self, void *data)
          {
            JArray< jint > value((jobject) NULL);
            OBJ_CALL(value = self->object._get_offsets());
            return value.wrap();
          }

          static PyObject *t_CachedOrdinalsReader$CachedOrds_get__ordinals(t_CachedOrdinalsReader$CachedOrds *self, void *data)
          {
            JArray< jint > value((jobject) NULL);
            OBJ_CALL(value = self->object._get_ordinals());
            return value.wrap();
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/ja/JapaneseTokenizer$Mode.h"
#include "java/lang/String.h"
#include "org/apache/lucene/analysis/ja/JapaneseTokenizer$Mode.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace ja {

          ::java::lang::Class *JapaneseTokenizer$Mode::class$ = NULL;
          jmethodID *JapaneseTokenizer$Mode::mids$ = NULL;
          bool JapaneseTokenizer$Mode::live$ = false;
          JapaneseTokenizer$Mode *JapaneseTokenizer$Mode::EXTENDED = NULL;
          JapaneseTokenizer$Mode *JapaneseTokenizer$Mode::NORMAL = NULL;
          JapaneseTokenizer$Mode *JapaneseTokenizer$Mode::SEARCH = NULL;

          jclass JapaneseTokenizer$Mode::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/ja/JapaneseTokenizer$Mode");

              mids$ = new jmethodID[max_mid];
              mids$[mid_valueOf_b957995e57a3da75] = env->getStaticMethodID(cls, "valueOf", "(Ljava/lang/String;)Lorg/apache/lucene/analysis/ja/JapaneseTokenizer$Mode;");
              mids$[mid_values_92a9327a61a3f948] = env->getStaticMethodID(cls, "values", "()[Lorg/apache/lucene/analysis/ja/JapaneseTokenizer$Mode;");

              class$ = new ::java::lang::Class(cls);
              cls = (jclass) class$->this$;

              EXTENDED = new JapaneseTokenizer$Mode(env->getStaticObjectField(cls, "EXTENDED", "Lorg/apache/lucene/analysis/ja/JapaneseTokenizer$Mode;"));
              NORMAL = new JapaneseTokenizer$Mode(env->getStaticObjectField(cls, "NORMAL", "Lorg/apache/lucene/analysis/ja/JapaneseTokenizer$Mode;"));
              SEARCH = new JapaneseTokenizer$Mode(env->getStaticObjectField(cls, "SEARCH", "Lorg/apache/lucene/analysis/ja/JapaneseTokenizer$Mode;"));
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          JapaneseTokenizer$Mode JapaneseTokenizer$Mode::valueOf(const ::java::lang::String & a0)
          {
            jclass cls = env->getClass(initializeClass);
            return JapaneseTokenizer$Mode(env->callStaticObjectMethod(cls, mids$[mid_valueOf_b957995e57a3da75], a0.this$));
          }

          JArray< JapaneseTokenizer$Mode > JapaneseTokenizer$Mode::values()
          {
            jclass cls = env->getClass(initializeClass);
            return JArray< JapaneseTokenizer$Mode >(env->callStaticObjectMethod(cls, mids$[mid_values_92a9327a61a3f948]));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace ja {
          static PyObject *t_JapaneseTokenizer$Mode_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_JapaneseTokenizer$Mode_instance_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_JapaneseTokenizer$Mode_of_(t_JapaneseTokenizer$Mode *self, PyObject *args);
          static PyObject *t_JapaneseTokenizer$Mode_valueOf(PyTypeObject *type, PyObject *args);
          static PyObject *t_JapaneseTokenizer$Mode_values(PyTypeObject *type);
          static PyObject *t_JapaneseTokenizer$Mode_get__parameters_(t_JapaneseTokenizer$Mode *self, void *data);
          static PyGetSetDef t_JapaneseTokenizer$Mode__fields_[] = {
            DECLARE_GET_FIELD(t_JapaneseTokenizer$Mode, parameters_),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_JapaneseTokenizer$Mode__methods_[] = {
            DECLARE_METHOD(t_JapaneseTokenizer$Mode, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_JapaneseTokenizer$Mode, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_JapaneseTokenizer$Mode, of_, METH_VARARGS),
            DECLARE_METHOD(t_JapaneseTokenizer$Mode, valueOf, METH_VARARGS | METH_CLASS),
            DECLARE_METHOD(t_JapaneseTokenizer$Mode, values, METH_NOARGS | METH_CLASS),
            { NULL, NULL, 0, NULL }
          };

          static PyType_Slot PY_TYPE_SLOTS(JapaneseTokenizer$Mode)[] = {
            { Py_tp_methods, t_JapaneseTokenizer$Mode__methods_ },
            { Py_tp_init, (void *) abstract_init },
            { Py_tp_getset, t_JapaneseTokenizer$Mode__fields_ },
            { 0, NULL }
          };

          static PyType_Def *PY_TYPE_BASES(JapaneseTokenizer$Mode)[] = {
            &PY_TYPE_DEF(::java::lang::Enum),
            NULL
          };

          DEFINE_TYPE(JapaneseTokenizer$Mode, t_JapaneseTokenizer$Mode, JapaneseTokenizer$Mode);
          PyObject *t_JapaneseTokenizer$Mode::wrap_Object(const JapaneseTokenizer$Mode& object, PyTypeObject *p0)
          {
            PyObject *obj = t_JapaneseTokenizer$Mode::wrap_Object(object);
            if (obj != NULL && obj != Py_None)
            {
              t_JapaneseTokenizer$Mode *self = (t_JapaneseTokenizer$Mode *) obj;
              self->parameters[0] = p0;
            }
            return obj;
          }

          PyObject *t_JapaneseTokenizer$Mode::wrap_jobject(const jobject& object, PyTypeObject *p0)
          {
            PyObject *obj = t_JapaneseTokenizer$Mode::wrap_jobject(object);
            if (obj != NULL && obj != Py_None)
            {
              t_JapaneseTokenizer$Mode *self = (t_JapaneseTokenizer$Mode *) obj;
              self->parameters[0] = p0;
            }
            return obj;
          }

          void t_JapaneseTokenizer$Mode::install(PyObject *module)
          {
            installType(&PY_TYPE(JapaneseTokenizer$Mode), &PY_TYPE_DEF(JapaneseTokenizer$Mode), module, "JapaneseTokenizer$Mode", 0);
          }

          void t_JapaneseTokenizer$Mode::initialize(PyObject *module)
          {
            PyObject_SetAttrString((PyObject *) PY_TYPE(JapaneseTokenizer$Mode), "class_", make_descriptor(JapaneseTokenizer$Mode::initializeClass, 1));
            PyObject_SetAttrString((PyObject *) PY_TYPE(JapaneseTokenizer$Mode), "wrapfn_", make_descriptor(t_JapaneseTokenizer$Mode::wrap_jobject));
            PyObject_SetAttrString((PyObject *) PY_TYPE(JapaneseTokenizer$Mode), "boxfn_", make_descriptor(boxObject));
            env->getClass(JapaneseTokenizer$Mode::initializeClass);
            PyObject_SetAttrString((PyObject *) PY_TYPE(JapaneseTokenizer$Mode), "EXTENDED", make_descriptor(t_JapaneseTokenizer$Mode::wrap_Object(*JapaneseTokenizer$Mode::EXTENDED)));
            PyObject_SetAttrString((PyObject *) PY_TYPE(JapaneseTokenizer$Mode), "NORMAL", make_descriptor(t_JapaneseTokenizer$Mode::wrap_Object(*JapaneseTokenizer$Mode::NORMAL)));
            PyObject_SetAttrString((PyObject *) PY_TYPE(JapaneseTokenizer$Mode), "SEARCH", make_descriptor(t_JapaneseTokenizer$Mode::wrap_Object(*JapaneseTokenizer$Mode::SEARCH)));
          }

          static PyObject *t_JapaneseTokenizer$Mode_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, JapaneseTokenizer$Mode::initializeClass, 1)))
              return NULL;
            return t_JapaneseTokenizer$Mode::wrap_Object(JapaneseTokenizer$Mode(((t_JapaneseTokenizer$Mode *) arg)->object.this$));
          }
          static PyObject *t_JapaneseTokenizer$Mode_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, JapaneseTokenizer$Mode::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static PyObject *t_JapaneseTokenizer$Mode_of_(t_JapaneseTokenizer$Mode *self, PyObject *args)
          {
            if (!parseArg(args, "T", 1, &(self->parameters)))
              Py_RETURN_SELF;
            return PyErr_SetArgsError((PyObject *) self, "of_", args);
          }

          static PyObject *t_JapaneseTokenizer$Mode_valueOf(PyTypeObject *type, PyObject *args)
          {
            ::java::lang::String a0((jobject) NULL);
            JapaneseTokenizer$Mode result((jobject) NULL);

            if (!parseArgs(args, "s", &a0))
            {
              OBJ_CALL(result = ::org::apache::lucene::analysis::ja::JapaneseTokenizer$Mode::valueOf(a0));
              return t_JapaneseTokenizer$Mode::wrap_Object(result);
            }

            return callSuper(type, "valueOf", args, 2);
          }

          static PyObject *t_JapaneseTokenizer$Mode_values(PyTypeObject *type)
          {
            JArray< JapaneseTokenizer$Mode > result((jobject) NULL);
            OBJ_CALL(result = ::org::apache::lucene::analysis::ja::JapaneseTokenizer$Mode::values());
            return JArray<jobject>(result.this$).wrap(t_JapaneseTokenizer$Mode::wrap_jobject);
          }
          static PyObject *t_JapaneseTokenizer$Mode_get__parameters_(t_JapaneseTokenizer$Mode *self, void *data)
          {
            return typeParameters(self->parameters, sizeof(self->parameters));
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/suggest/document/FuzzyCompletionQuery.h"
#include "org/apache/lucene/index/Term.h"
#include "org/apache/lucene/search/IndexSearcher.h"
#include "org/apache/lucene/analysis/Analyzer.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/search/suggest/BitsProducer.h"
#include "java/lang/String.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/search/ScoreMode.h"
#include "org/apache/lucene/search/Weight.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace suggest {
          namespace document {

            ::java::lang::Class *FuzzyCompletionQuery::class$ = NULL;
            jmethodID *FuzzyCompletionQuery::mids$ = NULL;
            bool FuzzyCompletionQuery::live$ = false;
            jint FuzzyCompletionQuery::DEFAULT_MAX_EDITS = (jint) 0;
            jint FuzzyCompletionQuery::DEFAULT_MIN_FUZZY_LENGTH = (jint) 0;
            jint FuzzyCompletionQuery::DEFAULT_NON_FUZZY_PREFIX = (jint) 0;
            jboolean FuzzyCompletionQuery::DEFAULT_TRANSPOSITIONS = (jboolean) 0;
            jboolean FuzzyCompletionQuery::DEFAULT_UNICODE_AWARE = (jboolean) 0;

            jclass FuzzyCompletionQuery::initializeClass(bool getOnly)
            {
              if (getOnly)
                return (jclass) (live$ ? class$->this$ : NULL);
              if (class$ == NULL)
              {
                jclass cls = (jclass) env->findClass("org/apache/lucene/search/suggest/document/FuzzyCompletionQuery");

                mids$ = new jmethodID[max_mid];
                mids$[mid_init$_e0bfd30c84c4b36c] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/analysis/Analyzer;Lorg/apache/lucene/index/Term;)V");
                mids$[mid_init$_b4f66d1e72f337e4] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/analysis/Analyzer;Lorg/apache/lucene/index/Term;Lorg/apache/lucene/search/suggest/BitsProducer;)V");
                mids$[mid_init$_0598b1f653bd0658] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/analysis/Analyzer;Lorg/apache/lucene/index/Term;Lorg/apache/lucene/search/suggest/BitsProducer;IZIIZI)V");
                mids$[mid_createWeight_f0ef0b5ea369ac06] = env->getMethodID(cls, "createWeight", "(Lorg/apache/lucene/search/IndexSearcher;Lorg/apache/lucene/search/ScoreMode;F)Lorg/apache/lucene/search/Weight;");
                mids$[mid_getMaxDeterminizedStates_9972fcc56b44e79d] = env->getMethodID(cls, "getMaxDeterminizedStates", "()I");
                mids$[mid_getMaxEdits_9972fcc56b44e79d] = env->getMethodID(cls, "getMaxEdits", "()I");
                mids$[mid_getMinFuzzyLength_9972fcc56b44e79d] = env->getMethodID(cls, "getMinFuzzyLength", "()I");
                mids$[mid_getNonFuzzyPrefix_9972fcc56b44e79d] = env->getMethodID(cls, "getNonFuzzyPrefix", "()I");
                mids$[mid_isTranspositions_8454bd5aa23fd11e] = env->getMethodID(cls, "isTranspositions", "()Z");
                mids$[mid_isUnicodeAware_8454bd5aa23fd11e] = env->getMethodID(cls, "isUnicodeAware", "()Z");
                mids$[mid_toString_9bfa75c9f141b67f] = env->getMethodID(cls, "toString", "(Ljava/lang/String;)Ljava/lang/String;");

                class$ = new ::java::lang::Class(cls);
                cls = (jclass) class$->this$;

                DEFAULT_MAX_EDITS = env->getStaticIntField(cls, "DEFAULT_MAX_EDITS");
                DEFAULT_MIN_FUZZY_LENGTH = env->getStaticIntField(cls, "DEFAULT_MIN_FUZZY_LENGTH");
                DEFAULT_NON_FUZZY_PREFIX = env->getStaticIntField(cls, "DEFAULT_NON_FUZZY_PREFIX");
                DEFAULT_TRANSPOSITIONS = env->getStaticBooleanField(cls, "DEFAULT_TRANSPOSITIONS");
                DEFAULT_UNICODE_AWARE = env->getStaticBooleanField(cls, "DEFAULT_UNICODE_AWARE");
                live$ = true;
              }
              return (jclass) class$->this$;
            }

            FuzzyCompletionQuery::FuzzyCompletionQuery(const ::org::apache::lucene::analysis::Analyzer & a0, const ::org::apache::lucene::index::Term & a1) : ::org::apache::lucene::search::suggest::document::PrefixCompletionQuery(env->newObject(initializeClass, &mids$, mid_init$_e0bfd30c84c4b36c, a0.this$, a1.this$)) {}

            FuzzyCompletionQuery::FuzzyCompletionQuery(const ::org::apache::lucene::analysis::Analyzer & a0, const ::org::apache::lucene::index::Term & a1, const ::org::apache::lucene::search::suggest::BitsProducer & a2) : ::org::apache::lucene::search::suggest::document::PrefixCompletionQuery(env->newObject(initializeClass, &mids$, mid_init$_b4f66d1e72f337e4, a0.this$, a1.this$, a2.this$)) {}

            FuzzyCompletionQuery::FuzzyCompletionQuery(const ::org::apache::lucene::analysis::Analyzer & a0, const ::org::apache::lucene::index::Term & a1, const ::org::apache::lucene::search::suggest::BitsProducer & a2, jint a3, jboolean a4, jint a5, jint a6, jboolean a7, jint a8) : ::org::apache::lucene::search::suggest::document::PrefixCompletionQuery(env->newObject(initializeClass, &mids$, mid_init$_0598b1f653bd0658, a0.this$, a1.this$, a2.this$, a3, a4, a5, a6, a7, a8)) {}

            ::org::apache::lucene::search::Weight FuzzyCompletionQuery::createWeight(const ::org::apache::lucene::search::IndexSearcher & a0, const ::org::apache::lucene::search::ScoreMode & a1, jfloat a2) const
            {
              return ::org::apache::lucene::search::Weight(env->callObjectMethod(this$, mids$[mid_createWeight_f0ef0b5ea369ac06], a0.this$, a1.this$, a2));
            }

            jint FuzzyCompletionQuery::getMaxDeterminizedStates() const
            {
              return env->callIntMethod(this$, mids$[mid_getMaxDeterminizedStates_9972fcc56b44e79d]);
            }

            jint FuzzyCompletionQuery::getMaxEdits() const
            {
              return env->callIntMethod(this$, mids$[mid_getMaxEdits_9972fcc56b44e79d]);
            }

            jint FuzzyCompletionQuery::getMinFuzzyLength() const
            {
              return env->callIntMethod(this$, mids$[mid_getMinFuzzyLength_9972fcc56b44e79d]);
            }

            jint FuzzyCompletionQuery::getNonFuzzyPrefix() const
            {
              return env->callIntMethod(this$, mids$[mid_getNonFuzzyPrefix_9972fcc56b44e79d]);
            }

            jboolean FuzzyCompletionQuery::isTranspositions() const
            {
              return env->callBooleanMethod(this$, mids$[mid_isTranspositions_8454bd5aa23fd11e]);
            }

            jboolean FuzzyCompletionQuery::isUnicodeAware() const
            {
              return env->callBooleanMethod(this$, mids$[mid_isUnicodeAware_8454bd5aa23fd11e]);
            }

            ::java::lang::String FuzzyCompletionQuery::toString(const ::java::lang::String & a0) const
            {
              return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_9bfa75c9f141b67f], a0.this$));
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace suggest {
          namespace document {
            static PyObject *t_FuzzyCompletionQuery_cast_(PyTypeObject *type, PyObject *arg);
            static PyObject *t_FuzzyCompletionQuery_instance_(PyTypeObject *type, PyObject *arg);
            static int t_FuzzyCompletionQuery_init_(t_FuzzyCompletionQuery *self, PyObject *args, PyObject *kwds);
            static PyObject *t_FuzzyCompletionQuery_createWeight(t_FuzzyCompletionQuery *self, PyObject *args);
            static PyObject *t_FuzzyCompletionQuery_getMaxDeterminizedStates(t_FuzzyCompletionQuery *self);
            static PyObject *t_FuzzyCompletionQuery_getMaxEdits(t_FuzzyCompletionQuery *self);
            static PyObject *t_FuzzyCompletionQuery_getMinFuzzyLength(t_FuzzyCompletionQuery *self);
            static PyObject *t_FuzzyCompletionQuery_getNonFuzzyPrefix(t_FuzzyCompletionQuery *self);
            static PyObject *t_FuzzyCompletionQuery_isTranspositions(t_FuzzyCompletionQuery *self);
            static PyObject *t_FuzzyCompletionQuery_isUnicodeAware(t_FuzzyCompletionQuery *self);
            static PyObject *t_FuzzyCompletionQuery_toString(t_FuzzyCompletionQuery *self, PyObject *args);
            static PyObject *t_FuzzyCompletionQuery_get__maxDeterminizedStates(t_FuzzyCompletionQuery *self, void *data);
            static PyObject *t_FuzzyCompletionQuery_get__maxEdits(t_FuzzyCompletionQuery *self, void *data);
            static PyObject *t_FuzzyCompletionQuery_get__minFuzzyLength(t_FuzzyCompletionQuery *self, void *data);
            static PyObject *t_FuzzyCompletionQuery_get__nonFuzzyPrefix(t_FuzzyCompletionQuery *self, void *data);
            static PyObject *t_FuzzyCompletionQuery_get__transpositions(t_FuzzyCompletionQuery *self, void *data);
            static PyObject *t_FuzzyCompletionQuery_get__unicodeAware(t_FuzzyCompletionQuery *self, void *data);
            static PyGetSetDef t_FuzzyCompletionQuery__fields_[] = {
              DECLARE_GET_FIELD(t_FuzzyCompletionQuery, maxDeterminizedStates),
              DECLARE_GET_FIELD(t_FuzzyCompletionQuery, maxEdits),
              DECLARE_GET_FIELD(t_FuzzyCompletionQuery, minFuzzyLength),
              DECLARE_GET_FIELD(t_FuzzyCompletionQuery, nonFuzzyPrefix),
              DECLARE_GET_FIELD(t_FuzzyCompletionQuery, transpositions),
              DECLARE_GET_FIELD(t_FuzzyCompletionQuery, unicodeAware),
              { NULL, NULL, NULL, NULL, NULL }
            };

            static PyMethodDef t_FuzzyCompletionQuery__methods_[] = {
              DECLARE_METHOD(t_FuzzyCompletionQuery, cast_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_FuzzyCompletionQuery, instance_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_FuzzyCompletionQuery, createWeight, METH_VARARGS),
              DECLARE_METHOD(t_FuzzyCompletionQuery, getMaxDeterminizedStates, METH_NOARGS),
              DECLARE_METHOD(t_FuzzyCompletionQuery, getMaxEdits, METH_NOARGS),
              DECLARE_METHOD(t_FuzzyCompletionQuery, getMinFuzzyLength, METH_NOARGS),
              DECLARE_METHOD(t_FuzzyCompletionQuery, getNonFuzzyPrefix, METH_NOARGS),
              DECLARE_METHOD(t_FuzzyCompletionQuery, isTranspositions, METH_NOARGS),
              DECLARE_METHOD(t_FuzzyCompletionQuery, isUnicodeAware, METH_NOARGS),
              DECLARE_METHOD(t_FuzzyCompletionQuery, toString, METH_VARARGS),
              { NULL, NULL, 0, NULL }
            };

            static PyType_Slot PY_TYPE_SLOTS(FuzzyCompletionQuery)[] = {
              { Py_tp_methods, t_FuzzyCompletionQuery__methods_ },
              { Py_tp_init, (void *) t_FuzzyCompletionQuery_init_ },
              { Py_tp_getset, t_FuzzyCompletionQuery__fields_ },
              { 0, NULL }
            };

            static PyType_Def *PY_TYPE_BASES(FuzzyCompletionQuery)[] = {
              &PY_TYPE_DEF(::org::apache::lucene::search::suggest::document::PrefixCompletionQuery),
              NULL
            };

            DEFINE_TYPE(FuzzyCompletionQuery, t_FuzzyCompletionQuery, FuzzyCompletionQuery);

            void t_FuzzyCompletionQuery::install(PyObject *module)
            {
              installType(&PY_TYPE(FuzzyCompletionQuery), &PY_TYPE_DEF(FuzzyCompletionQuery), module, "FuzzyCompletionQuery", 0);
            }

            void t_FuzzyCompletionQuery::initialize(PyObject *module)
            {
              PyObject_SetAttrString((PyObject *) PY_TYPE(FuzzyCompletionQuery), "class_", make_descriptor(FuzzyCompletionQuery::initializeClass, 1));
              PyObject_SetAttrString((PyObject *) PY_TYPE(FuzzyCompletionQuery), "wrapfn_", make_descriptor(t_FuzzyCompletionQuery::wrap_jobject));
              PyObject_SetAttrString((PyObject *) PY_TYPE(FuzzyCompletionQuery), "boxfn_", make_descriptor(boxObject));
              env->getClass(FuzzyCompletionQuery::initializeClass);
              PyObject_SetAttrString((PyObject *) PY_TYPE(FuzzyCompletionQuery), "DEFAULT_MAX_EDITS", make_descriptor(FuzzyCompletionQuery::DEFAULT_MAX_EDITS));
              PyObject_SetAttrString((PyObject *) PY_TYPE(FuzzyCompletionQuery), "DEFAULT_MIN_FUZZY_LENGTH", make_descriptor(FuzzyCompletionQuery::DEFAULT_MIN_FUZZY_LENGTH));
              PyObject_SetAttrString((PyObject *) PY_TYPE(FuzzyCompletionQuery), "DEFAULT_NON_FUZZY_PREFIX", make_descriptor(FuzzyCompletionQuery::DEFAULT_NON_FUZZY_PREFIX));
              PyObject_SetAttrString((PyObject *) PY_TYPE(FuzzyCompletionQuery), "DEFAULT_TRANSPOSITIONS", make_descriptor(FuzzyCompletionQuery::DEFAULT_TRANSPOSITIONS));
              PyObject_SetAttrString((PyObject *) PY_TYPE(FuzzyCompletionQuery), "DEFAULT_UNICODE_AWARE", make_descriptor(FuzzyCompletionQuery::DEFAULT_UNICODE_AWARE));
            }

            static PyObject *t_FuzzyCompletionQuery_cast_(PyTypeObject *type, PyObject *arg)
            {
              if (!(arg = castCheck(arg, FuzzyCompletionQuery::initializeClass, 1)))
                return NULL;
              return t_FuzzyCompletionQuery::wrap_Object(FuzzyCompletionQuery(((t_FuzzyCompletionQuery *) arg)->object.this$));
            }
            static PyObject *t_FuzzyCompletionQuery_instance_(PyTypeObject *type, PyObject *arg)
            {
              if (!castCheck(arg, FuzzyCompletionQuery::initializeClass, 0))
                Py_RETURN_FALSE;
              Py_RETURN_TRUE;
            }

            static int t_FuzzyCompletionQuery_init_(t_FuzzyCompletionQuery *self, PyObject *args, PyObject *kwds)
            {
              switch (PyTuple_GET_SIZE(args)) {
               case 2:
                {
                  ::org::apache::lucene::analysis::Analyzer a0((jobject) NULL);
                  ::org::apache::lucene::index::Term a1((jobject) NULL);
                  FuzzyCompletionQuery object((jobject) NULL);

                  if (!parseArgs(args, "kk", ::org::apache::lucene::analysis::Analyzer::initializeClass, ::org::apache::lucene::index::Term::initializeClass, &a0, &a1))
                  {
                    INT_CALL(object = FuzzyCompletionQuery(a0, a1));
                    self->object = object;
                    break;
                  }
                }
                goto err;
               case 3:
                {
                  ::org::apache::lucene::analysis::Analyzer a0((jobject) NULL);
                  ::org::apache::lucene::index::Term a1((jobject) NULL);
                  ::org::apache::lucene::search::suggest::BitsProducer a2((jobject) NULL);
                  FuzzyCompletionQuery object((jobject) NULL);

                  if (!parseArgs(args, "kkk", ::org::apache::lucene::analysis::Analyzer::initializeClass, ::org::apache::lucene::index::Term::initializeClass, ::org::apache::lucene::search::suggest::BitsProducer::initializeClass, &a0, &a1, &a2))
                  {
                    INT_CALL(object = FuzzyCompletionQuery(a0, a1, a2));
                    self->object = object;
                    break;
                  }
                }
                goto err;
               case 9:
                {
                  ::org::apache::lucene::analysis::Analyzer a0((jobject) NULL);
                  ::org::apache::lucene::index::Term a1((jobject) NULL);
                  ::org::apache::lucene::search::suggest::BitsProducer a2((jobject) NULL);
                  jint a3;
                  jboolean a4;
                  jint a5;
                  jint a6;
                  jboolean a7;
                  jint a8;
                  FuzzyCompletionQuery object((jobject) NULL);

                  if (!parseArgs(args, "kkkIZIIZI", ::org::apache::lucene::analysis::Analyzer::initializeClass, ::org::apache::lucene::index::Term::initializeClass, ::org::apache::lucene::search::suggest::BitsProducer::initializeClass, &a0, &a1, &a2, &a3, &a4, &a5, &a6, &a7, &a8))
                  {
                    INT_CALL(object = FuzzyCompletionQuery(a0, a1, a2, a3, a4, a5, a6, a7, a8));
                    self->object = object;
                    break;
                  }
                }
               default:
               err:
                PyErr_SetArgsError((PyObject *) self, "__init__", args);
                return -1;
              }

              return 0;
            }

            static PyObject *t_FuzzyCompletionQuery_createWeight(t_FuzzyCompletionQuery *self, PyObject *args)
            {
              ::org::apache::lucene::search::IndexSearcher a0((jobject) NULL);
              ::org::apache::lucene::search::ScoreMode a1((jobject) NULL);
              PyTypeObject **p1;
              jfloat a2;
              ::org::apache::lucene::search::Weight result((jobject) NULL);

              if (!parseArgs(args, "kKF", ::org::apache::lucene::search::IndexSearcher::initializeClass, ::org::apache::lucene::search::ScoreMode::initializeClass, &a0, &a1, &p1, ::org::apache::lucene::search::t_ScoreMode::parameters_, &a2))
              {
                OBJ_CALL(result = self->object.createWeight(a0, a1, a2));
                return ::org::apache::lucene::search::t_Weight::wrap_Object(result);
              }

              return callSuper(PY_TYPE(FuzzyCompletionQuery), (PyObject *) self, "createWeight", args, 2);
            }

            static PyObject *t_FuzzyCompletionQuery_getMaxDeterminizedStates(t_FuzzyCompletionQuery *self)
            {
              jint result;
              OBJ_CALL(result = self->object.getMaxDeterminizedStates());
              return PyLong_FromLong((long) result);
            }

            static PyObject *t_FuzzyCompletionQuery_getMaxEdits(t_FuzzyCompletionQuery *self)
            {
              jint result;
              OBJ_CALL(result = self->object.getMaxEdits());
              return PyLong_FromLong((long) result);
            }

            static PyObject *t_FuzzyCompletionQuery_getMinFuzzyLength(t_FuzzyCompletionQuery *self)
            {
              jint result;
              OBJ_CALL(result = self->object.getMinFuzzyLength());
              return PyLong_FromLong((long) result);
            }

            static PyObject *t_FuzzyCompletionQuery_getNonFuzzyPrefix(t_FuzzyCompletionQuery *self)
            {
              jint result;
              OBJ_CALL(result = self->object.getNonFuzzyPrefix());
              return PyLong_FromLong((long) result);
            }

            static PyObject *t_FuzzyCompletionQuery_isTranspositions(t_FuzzyCompletionQuery *self)
            {
              jboolean result;
              OBJ_CALL(result = self->object.isTranspositions());
              Py_RETURN_BOOL(result);
            }

            static PyObject *t_FuzzyCompletionQuery_isUnicodeAware(t_FuzzyCompletionQuery *self)
            {
              jboolean result;
              OBJ_CALL(result = self->object.isUnicodeAware());
              Py_RETURN_BOOL(result);
            }

            static PyObject *t_FuzzyCompletionQuery_toString(t_FuzzyCompletionQuery *self, PyObject *args)
            {
              ::java::lang::String a0((jobject) NULL);
              ::java::lang::String result((jobject) NULL);

              if (!parseArgs(args, "s", &a0))
              {
                OBJ_CALL(result = self->object.toString(a0));
                return j2p(result);
              }

              return callSuper(PY_TYPE(FuzzyCompletionQuery), (PyObject *) self, "toString", args, 2);
            }

            static PyObject *t_FuzzyCompletionQuery_get__maxDeterminizedStates(t_FuzzyCompletionQuery *self, void *data)
            {
              jint value;
              OBJ_CALL(value = self->object.getMaxDeterminizedStates());
              return PyLong_FromLong((long) value);
            }

            static PyObject *t_FuzzyCompletionQuery_get__maxEdits(t_FuzzyCompletionQuery *self, void *data)
            {
              jint value;
              OBJ_CALL(value = self->object.getMaxEdits());
              return PyLong_FromLong((long) value);
            }

            static PyObject *t_FuzzyCompletionQuery_get__minFuzzyLength(t_FuzzyCompletionQuery *self, void *data)
            {
              jint value;
              OBJ_CALL(value = self->object.getMinFuzzyLength());
              return PyLong_FromLong((long) value);
            }

            static PyObject *t_FuzzyCompletionQuery_get__nonFuzzyPrefix(t_FuzzyCompletionQuery *self, void *data)
            {
              jint value;
              OBJ_CALL(value = self->object.getNonFuzzyPrefix());
              return PyLong_FromLong((long) value);
            }

            static PyObject *t_FuzzyCompletionQuery_get__transpositions(t_FuzzyCompletionQuery *self, void *data)
            {
              jboolean value;
              OBJ_CALL(value = self->object.isTranspositions());
              Py_RETURN_BOOL(value);
            }

            static PyObject *t_FuzzyCompletionQuery_get__unicodeAware(t_FuzzyCompletionQuery *self, void *data)
            {
              jboolean value;
              OBJ_CALL(value = self->object.isUnicodeAware());
              Py_RETURN_BOOL(value);
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/util/fst/FST$INPUT_TYPE.h"
#include "java/lang/String.h"
#include "org/apache/lucene/util/fst/FST$INPUT_TYPE.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        namespace fst {

          ::java::lang::Class *FST$INPUT_TYPE::class$ = NULL;
          jmethodID *FST$INPUT_TYPE::mids$ = NULL;
          bool FST$INPUT_TYPE::live$ = false;
          FST$INPUT_TYPE *FST$INPUT_TYPE::BYTE1 = NULL;
          FST$INPUT_TYPE *FST$INPUT_TYPE::BYTE2 = NULL;
          FST$INPUT_TYPE *FST$INPUT_TYPE::BYTE4 = NULL;

          jclass FST$INPUT_TYPE::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/util/fst/FST$INPUT_TYPE");

              mids$ = new jmethodID[max_mid];
              mids$[mid_valueOf_7d5430741f46dbdf] = env->getStaticMethodID(cls, "valueOf", "(Ljava/lang/String;)Lorg/apache/lucene/util/fst/FST$INPUT_TYPE;");
              mids$[mid_values_f59a751cf5f89e20] = env->getStaticMethodID(cls, "values", "()[Lorg/apache/lucene/util/fst/FST$INPUT_TYPE;");

              class$ = new ::java::lang::Class(cls);
              cls = (jclass) class$->this$;

              BYTE1 = new FST$INPUT_TYPE(env->getStaticObjectField(cls, "BYTE1", "Lorg/apache/lucene/util/fst/FST$INPUT_TYPE;"));
              BYTE2 = new FST$INPUT_TYPE(env->getStaticObjectField(cls, "BYTE2", "Lorg/apache/lucene/util/fst/FST$INPUT_TYPE;"));
              BYTE4 = new FST$INPUT_TYPE(env->getStaticObjectField(cls, "BYTE4", "Lorg/apache/lucene/util/fst/FST$INPUT_TYPE;"));
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          FST$INPUT_TYPE FST$INPUT_TYPE::valueOf(const ::java::lang::String & a0)
          {
            jclass cls = env->getClass(initializeClass);
            return FST$INPUT_TYPE(env->callStaticObjectMethod(cls, mids$[mid_valueOf_7d5430741f46dbdf], a0.this$));
          }

          JArray< FST$INPUT_TYPE > FST$INPUT_TYPE::values()
          {
            jclass cls = env->getClass(initializeClass);
            return JArray< FST$INPUT_TYPE >(env->callStaticObjectMethod(cls, mids$[mid_values_f59a751cf5f89e20]));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        namespace fst {
          static PyObject *t_FST$INPUT_TYPE_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_FST$INPUT_TYPE_instance_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_FST$INPUT_TYPE_of_(t_FST$INPUT_TYPE *self, PyObject *args);
          static PyObject *t_FST$INPUT_TYPE_valueOf(PyTypeObject *type, PyObject *args);
          static PyObject *t_FST$INPUT_TYPE_values(PyTypeObject *type);
          static PyObject *t_FST$INPUT_TYPE_get__parameters_(t_FST$INPUT_TYPE *self, void *data);
          static PyGetSetDef t_FST$INPUT_TYPE__fields_[] = {
            DECLARE_GET_FIELD(t_FST$INPUT_TYPE, parameters_),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_FST$INPUT_TYPE__methods_[] = {
            DECLARE_METHOD(t_FST$INPUT_TYPE, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_FST$INPUT_TYPE, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_FST$INPUT_TYPE, of_, METH_VARARGS),
            DECLARE_METHOD(t_FST$INPUT_TYPE, valueOf, METH_VARARGS | METH_CLASS),
            DECLARE_METHOD(t_FST$INPUT_TYPE, values, METH_NOARGS | METH_CLASS),
            { NULL, NULL, 0, NULL }
          };

          static PyType_Slot PY_TYPE_SLOTS(FST$INPUT_TYPE)[] = {
            { Py_tp_methods, t_FST$INPUT_TYPE__methods_ },
            { Py_tp_init, (void *) abstract_init },
            { Py_tp_getset, t_FST$INPUT_TYPE__fields_ },
            { 0, NULL }
          };

          static PyType_Def *PY_TYPE_BASES(FST$INPUT_TYPE)[] = {
            &PY_TYPE_DEF(::java::lang::Enum),
            NULL
          };

          DEFINE_TYPE(FST$INPUT_TYPE, t_FST$INPUT_TYPE, FST$INPUT_TYPE);
          PyObject *t_FST$INPUT_TYPE::wrap_Object(const FST$INPUT_TYPE& object, PyTypeObject *p0)
          {
            PyObject *obj = t_FST$INPUT_TYPE::wrap_Object(object);
            if (obj != NULL && obj != Py_None)
            {
              t_FST$INPUT_TYPE *self = (t_FST$INPUT_TYPE *) obj;
              self->parameters[0] = p0;
            }
            return obj;
          }

          PyObject *t_FST$INPUT_TYPE::wrap_jobject(const jobject& object, PyTypeObject *p0)
          {
            PyObject *obj = t_FST$INPUT_TYPE::wrap_jobject(object);
            if (obj != NULL && obj != Py_None)
            {
              t_FST$INPUT_TYPE *self = (t_FST$INPUT_TYPE *) obj;
              self->parameters[0] = p0;
            }
            return obj;
          }

          void t_FST$INPUT_TYPE::install(PyObject *module)
          {
            installType(&PY_TYPE(FST$INPUT_TYPE), &PY_TYPE_DEF(FST$INPUT_TYPE), module, "FST$INPUT_TYPE", 0);
          }

          void t_FST$INPUT_TYPE::initialize(PyObject *module)
          {
            PyObject_SetAttrString((PyObject *) PY_TYPE(FST$INPUT_TYPE), "class_", make_descriptor(FST$INPUT_TYPE::initializeClass, 1));
            PyObject_SetAttrString((PyObject *) PY_TYPE(FST$INPUT_TYPE), "wrapfn_", make_descriptor(t_FST$INPUT_TYPE::wrap_jobject));
            PyObject_SetAttrString((PyObject *) PY_TYPE(FST$INPUT_TYPE), "boxfn_", make_descriptor(boxObject));
            env->getClass(FST$INPUT_TYPE::initializeClass);
            PyObject_SetAttrString((PyObject *) PY_TYPE(FST$INPUT_TYPE), "BYTE1", make_descriptor(t_FST$INPUT_TYPE::wrap_Object(*FST$INPUT_TYPE::BYTE1)));
            PyObject_SetAttrString((PyObject *) PY_TYPE(FST$INPUT_TYPE), "BYTE2", make_descriptor(t_FST$INPUT_TYPE::wrap_Object(*FST$INPUT_TYPE::BYTE2)));
            PyObject_SetAttrString((PyObject *) PY_TYPE(FST$INPUT_TYPE), "BYTE4", make_descriptor(t_FST$INPUT_TYPE::wrap_Object(*FST$INPUT_TYPE::BYTE4)));
          }

          static PyObject *t_FST$INPUT_TYPE_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, FST$INPUT_TYPE::initializeClass, 1)))
              return NULL;
            return t_FST$INPUT_TYPE::wrap_Object(FST$INPUT_TYPE(((t_FST$INPUT_TYPE *) arg)->object.this$));
          }
          static PyObject *t_FST$INPUT_TYPE_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, FST$INPUT_TYPE::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static PyObject *t_FST$INPUT_TYPE_of_(t_FST$INPUT_TYPE *self, PyObject *args)
          {
            if (!parseArg(args, "T", 1, &(self->parameters)))
              Py_RETURN_SELF;
            return PyErr_SetArgsError((PyObject *) self, "of_", args);
          }

          static PyObject *t_FST$INPUT_TYPE_valueOf(PyTypeObject *type, PyObject *args)
          {
            ::java::lang::String a0((jobject) NULL);
            FST$INPUT_TYPE result((jobject) NULL);

            if (!parseArgs(args, "s", &a0))
            {
              OBJ_CALL(result = ::org::apache::lucene::util::fst::FST$INPUT_TYPE::valueOf(a0));
              return t_FST$INPUT_TYPE::wrap_Object(result);
            }

            return callSuper(type, "valueOf", args, 2);
          }

          static PyObject *t_FST$INPUT_TYPE_values(PyTypeObject *type)
          {
            JArray< FST$INPUT_TYPE > result((jobject) NULL);
            OBJ_CALL(result = ::org::apache::lucene::util::fst::FST$INPUT_TYPE::values());
            return JArray<jobject>(result.this$).wrap(t_FST$INPUT_TYPE::wrap_jobject);
          }
          static PyObject *t_FST$INPUT_TYPE_get__parameters_(t_FST$INPUT_TYPE *self, void *data)
          {
            return typeParameters(self->parameters, sizeof(self->parameters));
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/store/IndexOutput.h"
#include "java/io/IOException.h"
#include "java/lang/String.h"
#include "java/io/Closeable.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace store {

        ::java::lang::Class *IndexOutput::class$ = NULL;
        jmethodID *IndexOutput::mids$ = NULL;
        bool IndexOutput::live$ = false;

        jclass IndexOutput::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/store/IndexOutput");

            mids$ = new jmethodID[max_mid];
            mids$[mid_close_f2cc1bce94666404] = env->getMethodID(cls, "close", "()V");
            mids$[mid_getChecksum_2e5ae9edcb9b072f] = env->getMethodID(cls, "getChecksum", "()J");
            mids$[mid_getFilePointer_2e5ae9edcb9b072f] = env->getMethodID(cls, "getFilePointer", "()J");
            mids$[mid_getName_db9b55ba01e03e4b] = env->getMethodID(cls, "getName", "()Ljava/lang/String;");
            mids$[mid_toString_db9b55ba01e03e4b] = env->getMethodID(cls, "toString", "()Ljava/lang/String;");

            class$ = new ::java::lang::Class(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        void IndexOutput::close() const
        {
          env->callVoidMethod(this$, mids$[mid_close_f2cc1bce94666404]);
        }

        jlong IndexOutput::getChecksum() const
        {
          return env->callLongMethod(this$, mids$[mid_getChecksum_2e5ae9edcb9b072f]);
        }

        jlong IndexOutput::getFilePointer() const
        {
          return env->callLongMethod(this$, mids$[mid_getFilePointer_2e5ae9edcb9b072f]);
        }

        ::java::lang::String IndexOutput::getName() const
        {
          return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_getName_db9b55ba01e03e4b]));
        }

        ::java::lang::String IndexOutput::toString() const
        {
          return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_db9b55ba01e03e4b]));
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace store {
        static PyObject *t_IndexOutput_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_IndexOutput_instance_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_IndexOutput_close(t_IndexOutput *self);
        static PyObject *t_IndexOutput_getChecksum(t_IndexOutput *self);
        static PyObject *t_IndexOutput_getFilePointer(t_IndexOutput *self);
        static PyObject *t_IndexOutput_getName(t_IndexOutput *self);
        static PyObject *t_IndexOutput_toString(t_IndexOutput *self, PyObject *args);
        static PyObject *t_IndexOutput_get__checksum(t_IndexOutput *self, void *data);
        static PyObject *t_IndexOutput_get__filePointer(t_IndexOutput *self, void *data);
        static PyObject *t_IndexOutput_get__name(t_IndexOutput *self, void *data);
        static PyGetSetDef t_IndexOutput__fields_[] = {
          DECLARE_GET_FIELD(t_IndexOutput, checksum),
          DECLARE_GET_FIELD(t_IndexOutput, filePointer),
          DECLARE_GET_FIELD(t_IndexOutput, name),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_IndexOutput__methods_[] = {
          DECLARE_METHOD(t_IndexOutput, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_IndexOutput, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_IndexOutput, close, METH_NOARGS),
          DECLARE_METHOD(t_IndexOutput, getChecksum, METH_NOARGS),
          DECLARE_METHOD(t_IndexOutput, getFilePointer, METH_NOARGS),
          DECLARE_METHOD(t_IndexOutput, getName, METH_NOARGS),
          DECLARE_METHOD(t_IndexOutput, toString, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        static PyType_Slot PY_TYPE_SLOTS(IndexOutput)[] = {
          { Py_tp_methods, t_IndexOutput__methods_ },
          { Py_tp_init, (void *) abstract_init },
          { Py_tp_getset, t_IndexOutput__fields_ },
          { 0, NULL }
        };

        static PyType_Def *PY_TYPE_BASES(IndexOutput)[] = {
          &PY_TYPE_DEF(::org::apache::lucene::store::DataOutput),
          NULL
        };

        DEFINE_TYPE(IndexOutput, t_IndexOutput, IndexOutput);

        void t_IndexOutput::install(PyObject *module)
        {
          installType(&PY_TYPE(IndexOutput), &PY_TYPE_DEF(IndexOutput), module, "IndexOutput", 0);
        }

        void t_IndexOutput::initialize(PyObject *module)
        {
          PyObject_SetAttrString((PyObject *) PY_TYPE(IndexOutput), "class_", make_descriptor(IndexOutput::initializeClass, 1));
          PyObject_SetAttrString((PyObject *) PY_TYPE(IndexOutput), "wrapfn_", make_descriptor(t_IndexOutput::wrap_jobject));
          PyObject_SetAttrString((PyObject *) PY_TYPE(IndexOutput), "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_IndexOutput_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, IndexOutput::initializeClass, 1)))
            return NULL;
          return t_IndexOutput::wrap_Object(IndexOutput(((t_IndexOutput *) arg)->object.this$));
        }
        static PyObject *t_IndexOutput_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, IndexOutput::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static PyObject *t_IndexOutput_close(t_IndexOutput *self)
        {
          OBJ_CALL(self->object.close());
          Py_RETURN_NONE;
        }

        static PyObject *t_IndexOutput_getChecksum(t_IndexOutput *self)
        {
          jlong result;
          OBJ_CALL(result = self->object.getChecksum());
          return PyLong_FromLongLong((PY_LONG_LONG) result);
        }

        static PyObject *t_IndexOutput_getFilePointer(t_IndexOutput *self)
        {
          jlong result;
          OBJ_CALL(result = self->object.getFilePointer());
          return PyLong_FromLongLong((PY_LONG_LONG) result);
        }

        static PyObject *t_IndexOutput_getName(t_IndexOutput *self)
        {
          ::java::lang::String result((jobject) NULL);
          OBJ_CALL(result = self->object.getName());
          return j2p(result);
        }

        static PyObject *t_IndexOutput_toString(t_IndexOutput *self, PyObject *args)
        {
          ::java::lang::String result((jobject) NULL);

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.toString());
            return j2p(result);
          }

          return callSuper(PY_TYPE(IndexOutput), (PyObject *) self, "toString", args, 2);
        }

        static PyObject *t_IndexOutput_get__checksum(t_IndexOutput *self, void *data)
        {
          jlong value;
          OBJ_CALL(value = self->object.getChecksum());
          return PyLong_FromLongLong((PY_LONG_LONG) value);
        }

        static PyObject *t_IndexOutput_get__filePointer(t_IndexOutput *self, void *data)
        {
          jlong value;
          OBJ_CALL(value = self->object.getFilePointer());
          return PyLong_FromLongLong((PY_LONG_LONG) value);
        }

        static PyObject *t_IndexOutput_get__name(t_IndexOutput *self, void *data)
        {
          ::java::lang::String value((jobject) NULL);
          OBJ_CALL(value = self->object.getName());
          return j2p(value);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/core/TypeTokenFilter.h"
#include "java/lang/String.h"
#include "java/util/Set.h"
#include "org/apache/lucene/analysis/TokenStream.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace core {

          ::java::lang::Class *TypeTokenFilter::class$ = NULL;
          jmethodID *TypeTokenFilter::mids$ = NULL;
          bool TypeTokenFilter::live$ = false;

          jclass TypeTokenFilter::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/core/TypeTokenFilter");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_59f4cbc95aff88bf] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/analysis/TokenStream;Ljava/util/Set;)V");
              mids$[mid_init$_8ea4d6997e169d68] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/analysis/TokenStream;Ljava/util/Set;Z)V");
              mids$[mid_accept_8454bd5aa23fd11e] = env->getMethodID(cls, "accept", "()Z");

              class$ = new ::java::lang::Class(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          TypeTokenFilter::TypeTokenFilter(const ::org::apache::lucene::analysis::TokenStream & a0, const ::java::util::Set & a1) : ::org::apache::lucene::analysis::FilteringTokenFilter(env->newObject(initializeClass, &mids$, mid_init$_59f4cbc95aff88bf, a0.this$, a1.this$)) {}

          TypeTokenFilter::TypeTokenFilter(const ::org::apache::lucene::analysis::TokenStream & a0, const ::java::util::Set & a1, jboolean a2) : ::org::apache::lucene::analysis::FilteringTokenFilter(env->newObject(initializeClass, &mids$, mid_init$_8ea4d6997e169d68, a0.this$, a1.this$, a2)) {}
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace core {
          static PyObject *t_TypeTokenFilter_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_TypeTokenFilter_instance_(PyTypeObject *type, PyObject *arg);
          static int t_TypeTokenFilter_init_(t_TypeTokenFilter *self, PyObject *args, PyObject *kwds);

          static PyMethodDef t_TypeTokenFilter__methods_[] = {
            DECLARE_METHOD(t_TypeTokenFilter, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_TypeTokenFilter, instance_, METH_O | METH_CLASS),
            { NULL, NULL, 0, NULL }
          };

          static PyType_Slot PY_TYPE_SLOTS(TypeTokenFilter)[] = {
            { Py_tp_methods, t_TypeTokenFilter__methods_ },
            { Py_tp_init, (void *) t_TypeTokenFilter_init_ },
            { 0, NULL }
          };

          static PyType_Def *PY_TYPE_BASES(TypeTokenFilter)[] = {
            &PY_TYPE_DEF(::org::apache::lucene::analysis::FilteringTokenFilter),
            NULL
          };

          DEFINE_TYPE(TypeTokenFilter, t_TypeTokenFilter, TypeTokenFilter);

          void t_TypeTokenFilter::install(PyObject *module)
          {
            installType(&PY_TYPE(TypeTokenFilter), &PY_TYPE_DEF(TypeTokenFilter), module, "TypeTokenFilter", 0);
          }

          void t_TypeTokenFilter::initialize(PyObject *module)
          {
            PyObject_SetAttrString((PyObject *) PY_TYPE(TypeTokenFilter), "class_", make_descriptor(TypeTokenFilter::initializeClass, 1));
            PyObject_SetAttrString((PyObject *) PY_TYPE(TypeTokenFilter), "wrapfn_", make_descriptor(t_TypeTokenFilter::wrap_jobject));
            PyObject_SetAttrString((PyObject *) PY_TYPE(TypeTokenFilter), "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_TypeTokenFilter_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, TypeTokenFilter::initializeClass, 1)))
              return NULL;
            return t_TypeTokenFilter::wrap_Object(TypeTokenFilter(((t_TypeTokenFilter *) arg)->object.this$));
          }
          static PyObject *t_TypeTokenFilter_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, TypeTokenFilter::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_TypeTokenFilter_init_(t_TypeTokenFilter *self, PyObject *args, PyObject *kwds)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 2:
              {
                ::org::apache::lucene::analysis::TokenStream a0((jobject) NULL);
                ::java::util::Set a1((jobject) NULL);
                PyTypeObject **p1;
                TypeTokenFilter object((jobject) NULL);

                if (!parseArgs(args, "kK", ::org::apache::lucene::analysis::TokenStream::initializeClass, ::java::util::Set::initializeClass, &a0, &a1, &p1, ::java::util::t_Set::parameters_))
                {
                  INT_CALL(object = TypeTokenFilter(a0, a1));
                  self->object = object;
                  break;
                }
              }
              goto err;
             case 3:
              {
                ::org::apache::lucene::analysis::TokenStream a0((jobject) NULL);
                ::java::util::Set a1((jobject) NULL);
                PyTypeObject **p1;
                jboolean a2;
                TypeTokenFilter object((jobject) NULL);

                if (!parseArgs(args, "kKZ", ::org::apache::lucene::analysis::TokenStream::initializeClass, ::java::util::Set::initializeClass, &a0, &a1, &p1, ::java::util::t_Set::parameters_, &a2))
                {
                  INT_CALL(object = TypeTokenFilter(a0, a1, a2));
                  self->object = object;
                  break;
                }
              }
             default:
             err:
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/index/IndexWriter$IndexReaderWarmer.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/index/LeafReader.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {

        ::java::lang::Class *IndexWriter$IndexReaderWarmer::class$ = NULL;
        jmethodID *IndexWriter$IndexReaderWarmer::mids$ = NULL;
        bool IndexWriter$IndexReaderWarmer::live$ = false;

        jclass IndexWriter$IndexReaderWarmer::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/index/IndexWriter$IndexReaderWarmer");

            mids$ = new jmethodID[max_mid];
            mids$[mid_warm_947f3bbc1666c05e] = env->getMethodID(cls, "warm", "(Lorg/apache/lucene/index/LeafReader;)V");

            class$ = new ::java::lang::Class(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        void IndexWriter$IndexReaderWarmer::warm(const ::org::apache::lucene::index::LeafReader & a0) const
        {
          env->callVoidMethod(this$, mids$[mid_warm_947f3bbc1666c05e], a0.this$);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {
        static PyObject *t_IndexWriter$IndexReaderWarmer_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_IndexWriter$IndexReaderWarmer_instance_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_IndexWriter$IndexReaderWarmer_warm(t_IndexWriter$IndexReaderWarmer *self, PyObject *arg);

        static PyMethodDef t_IndexWriter$IndexReaderWarmer__methods_[] = {
          DECLARE_METHOD(t_IndexWriter$IndexReaderWarmer, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_IndexWriter$IndexReaderWarmer, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_IndexWriter$IndexReaderWarmer, warm, METH_O),
          { NULL, NULL, 0, NULL }
        };

        static PyType_Slot PY_TYPE_SLOTS(IndexWriter$IndexReaderWarmer)[] = {
          { Py_tp_methods, t_IndexWriter$IndexReaderWarmer__methods_ },
          { Py_tp_init, (void *) abstract_init },
          { 0, NULL }
        };

        static PyType_Def *PY_TYPE_BASES(IndexWriter$IndexReaderWarmer)[] = {
          &PY_TYPE_DEF(::java::lang::Object),
          NULL
        };

        DEFINE_TYPE(IndexWriter$IndexReaderWarmer, t_IndexWriter$IndexReaderWarmer, IndexWriter$IndexReaderWarmer);

        void t_IndexWriter$IndexReaderWarmer::install(PyObject *module)
        {
          installType(&PY_TYPE(IndexWriter$IndexReaderWarmer), &PY_TYPE_DEF(IndexWriter$IndexReaderWarmer), module, "IndexWriter$IndexReaderWarmer", 0);
        }

        void t_IndexWriter$IndexReaderWarmer::initialize(PyObject *module)
        {
          PyObject_SetAttrString((PyObject *) PY_TYPE(IndexWriter$IndexReaderWarmer), "class_", make_descriptor(IndexWriter$IndexReaderWarmer::initializeClass, 1));
          PyObject_SetAttrString((PyObject *) PY_TYPE(IndexWriter$IndexReaderWarmer), "wrapfn_", make_descriptor(t_IndexWriter$IndexReaderWarmer::wrap_jobject));
          PyObject_SetAttrString((PyObject *) PY_TYPE(IndexWriter$IndexReaderWarmer), "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_IndexWriter$IndexReaderWarmer_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, IndexWriter$IndexReaderWarmer::initializeClass, 1)))
            return NULL;
          return t_IndexWriter$IndexReaderWarmer::wrap_Object(IndexWriter$IndexReaderWarmer(((t_IndexWriter$IndexReaderWarmer *) arg)->object.this$));
        }
        static PyObject *t_IndexWriter$IndexReaderWarmer_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, IndexWriter$IndexReaderWarmer::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static PyObject *t_IndexWriter$IndexReaderWarmer_warm(t_IndexWriter$IndexReaderWarmer *self, PyObject *arg)
        {
          ::org::apache::lucene::index::LeafReader a0((jobject) NULL);

          if (!parseArg(arg, "k", ::org::apache::lucene::index::LeafReader::initializeClass, &a0))
          {
            OBJ_CALL(self->object.warm(a0));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "warm", arg);
          return NULL;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/util/AnalysisSPILoader.h"
#include "java/util/Map.h"
#include "org/apache/lucene/analysis/util/AbstractAnalysisFactory.h"
#include "java/lang/Class.h"
#include "java/lang/String.h"
#include "java/util/Set.h"
#include "java/lang/ClassLoader.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace util {

          ::java::lang::Class *AnalysisSPILoader::class$ = NULL;
          jmethodID *AnalysisSPILoader::mids$ = NULL;
          bool AnalysisSPILoader::live$ = false;

          jclass AnalysisSPILoader::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/util/AnalysisSPILoader");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_67ec072891501dcc] = env->getMethodID(cls, "<init>", "(Ljava/lang/Class;)V");
              mids$[mid_init$_64d17552adaf626e] = env->getMethodID(cls, "<init>", "(Ljava/lang/Class;[Ljava/lang/String;)V");
              mids$[mid_init$_618fea55b5be1e12] = env->getMethodID(cls, "<init>", "(Ljava/lang/Class;[Ljava/lang/String;Ljava/lang/ClassLoader;)V");
              mids$[mid_availableServices_7dcf4034c6d1a92a] = env->getMethodID(cls, "availableServices", "()Ljava/util/Set;");
              mids$[mid_lookupClass_337d52b895d55b49] = env->getMethodID(cls, "lookupClass", "(Ljava/lang/String;)Ljava/lang/Class;");
              mids$[mid_newFactoryClassInstance_963f1a166b8683c2] = env->getStaticMethodID(cls, "newFactoryClassInstance", "(Ljava/lang/Class;Ljava/util/Map;)Lorg/apache/lucene/analysis/util/AbstractAnalysisFactory;");
              mids$[mid_newInstance_a20ba46eadc0fa80] = env->getMethodID(cls, "newInstance", "(Ljava/lang/String;Ljava/util/Map;)Lorg/apache/lucene/analysis/util/AbstractAnalysisFactory;");
              mids$[mid_reload_98a876e82795b112] = env->getMethodID(cls, "reload", "(Ljava/lang/ClassLoader;)V");

              class$ = new ::java::lang::Class(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          AnalysisSPILoader::AnalysisSPILoader(const ::java::lang::Class & a0) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_67ec072891501dcc, a0.this$)) {}

          AnalysisSPILoader::AnalysisSPILoader(const ::java::lang::Class & a0, const JArray< ::java::lang::String > & a1) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_64d17552adaf626e, a0.this$, a1.this$)) {}

          AnalysisSPILoader::AnalysisSPILoader(const ::java::lang::Class & a0, const JArray< ::java::lang::String > & a1, const ::java::lang::ClassLoader & a2) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_618fea55b5be1e12, a0.this$, a1.this$, a2.this$)) {}

          ::java::util::Set AnalysisSPILoader::availableServices() const
          {
            return ::java::util::Set(env->callObjectMethod(this$, mids$[mid_availableServices_7dcf4034c6d1a92a]));
          }

          ::java::lang::Class AnalysisSPILoader::lookupClass(const ::java::lang::String & a0) const
          {
            return ::java::lang::Class(env->callObjectMethod(this$, mids$[mid_lookupClass_337d52b895d55b49], a0.this$));
          }

          ::org::apache::lucene::analysis::util::AbstractAnalysisFactory AnalysisSPILoader::newFactoryClassInstance(const ::java::lang::Class & a0, const ::java::util::Map & a1)
          {
            jclass cls = env->getClass(initializeClass);
            return ::org::apache::lucene::analysis::util::AbstractAnalysisFactory(env->callStaticObjectMethod(cls, mids$[mid_newFactoryClassInstance_963f1a166b8683c2], a0.this$, a1.this$));
          }

          ::org::apache::lucene::analysis::util::AbstractAnalysisFactory AnalysisSPILoader::newInstance(const ::java::lang::String & a0, const ::java::util::Map & a1) const
          {
            return ::org::apache::lucene::analysis::util::AbstractAnalysisFactory(env->callObjectMethod(this$, mids$[mid_newInstance_a20ba46eadc0fa80], a0.this$, a1.this$));
          }

          void AnalysisSPILoader::reload(const ::java::lang::ClassLoader & a0) const
          {
            env->callVoidMethod(this$, mids$[mid_reload_98a876e82795b112], a0.this$);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace util {
          static PyObject *t_AnalysisSPILoader_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_AnalysisSPILoader_instance_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_AnalysisSPILoader_of_(t_AnalysisSPILoader *self, PyObject *args);
          static int t_AnalysisSPILoader_init_(t_AnalysisSPILoader *self, PyObject *args, PyObject *kwds);
          static PyObject *t_AnalysisSPILoader_availableServices(t_AnalysisSPILoader *self);
          static PyObject *t_AnalysisSPILoader_lookupClass(t_AnalysisSPILoader *self, PyObject *arg);
          static PyObject *t_AnalysisSPILoader_newFactoryClassInstance(PyTypeObject *type, PyObject *args);
          static PyObject *t_AnalysisSPILoader_newInstance(t_AnalysisSPILoader *self, PyObject *args);
          static PyObject *t_AnalysisSPILoader_reload(t_AnalysisSPILoader *self, PyObject *arg);
          static PyObject *t_AnalysisSPILoader_get__parameters_(t_AnalysisSPILoader *self, void *data);
          static PyGetSetDef t_AnalysisSPILoader__fields_[] = {
            DECLARE_GET_FIELD(t_AnalysisSPILoader, parameters_),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_AnalysisSPILoader__methods_[] = {
            DECLARE_METHOD(t_AnalysisSPILoader, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_AnalysisSPILoader, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_AnalysisSPILoader, of_, METH_VARARGS),
            DECLARE_METHOD(t_AnalysisSPILoader, availableServices, METH_NOARGS),
            DECLARE_METHOD(t_AnalysisSPILoader, lookupClass, METH_O),
            DECLARE_METHOD(t_AnalysisSPILoader, newFactoryClassInstance, METH_VARARGS | METH_CLASS),
            DECLARE_METHOD(t_AnalysisSPILoader, newInstance, METH_VARARGS),
            DECLARE_METHOD(t_AnalysisSPILoader, reload, METH_O),
            { NULL, NULL, 0, NULL }
          };

          static PyType_Slot PY_TYPE_SLOTS(AnalysisSPILoader)[] = {
            { Py_tp_methods, t_AnalysisSPILoader__methods_ },
            { Py_tp_init, (void *) t_AnalysisSPILoader_init_ },
            { Py_tp_getset, t_AnalysisSPILoader__fields_ },
            { 0, NULL }
          };

          static PyType_Def *PY_TYPE_BASES(AnalysisSPILoader)[] = {
            &PY_TYPE_DEF(::java::lang::Object),
            NULL
          };

          DEFINE_TYPE(AnalysisSPILoader, t_AnalysisSPILoader, AnalysisSPILoader);
          PyObject *t_AnalysisSPILoader::wrap_Object(const AnalysisSPILoader& object, PyTypeObject *p0)
          {
            PyObject *obj = t_AnalysisSPILoader::wrap_Object(object);
            if (obj != NULL && obj != Py_None)
            {
              t_AnalysisSPILoader *self = (t_AnalysisSPILoader *) obj;
              self->parameters[0] = p0;
            }
            return obj;
          }

          PyObject *t_AnalysisSPILoader::wrap_jobject(const jobject& object, PyTypeObject *p0)
          {
            PyObject *obj = t_AnalysisSPILoader::wrap_jobject(object);
            if (obj != NULL && obj != Py_None)
            {
              t_AnalysisSPILoader *self = (t_AnalysisSPILoader *) obj;
              self->parameters[0] = p0;
            }
            return obj;
          }

          void t_AnalysisSPILoader::install(PyObject *module)
          {
            installType(&PY_TYPE(AnalysisSPILoader), &PY_TYPE_DEF(AnalysisSPILoader), module, "AnalysisSPILoader", 0);
          }

          void t_AnalysisSPILoader::initialize(PyObject *module)
          {
            PyObject_SetAttrString((PyObject *) PY_TYPE(AnalysisSPILoader), "class_", make_descriptor(AnalysisSPILoader::initializeClass, 1));
            PyObject_SetAttrString((PyObject *) PY_TYPE(AnalysisSPILoader), "wrapfn_", make_descriptor(t_AnalysisSPILoader::wrap_jobject));
            PyObject_SetAttrString((PyObject *) PY_TYPE(AnalysisSPILoader), "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_AnalysisSPILoader_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, AnalysisSPILoader::initializeClass, 1)))
              return NULL;
            return t_AnalysisSPILoader::wrap_Object(AnalysisSPILoader(((t_AnalysisSPILoader *) arg)->object.this$));
          }
          static PyObject *t_AnalysisSPILoader_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, AnalysisSPILoader::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static PyObject *t_AnalysisSPILoader_of_(t_AnalysisSPILoader *self, PyObject *args)
          {
            if (!parseArg(args, "T", 1, &(self->parameters)))
              Py_RETURN_SELF;
            return PyErr_SetArgsError((PyObject *) self, "of_", args);
          }

          static int t_AnalysisSPILoader_init_(t_AnalysisSPILoader *self, PyObject *args, PyObject *kwds)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 1:
              {
                ::java::lang::Class a0((jobject) NULL);
                PyTypeObject **p0;
                AnalysisSPILoader object((jobject) NULL);

                if (!parseArgs(args, "K", ::java::lang::Class::initializeClass, &a0, &p0, ::java::lang::t_Class::parameters_))
                {
                  INT_CALL(object = AnalysisSPILoader(a0));
                  self->object = object;
                  break;
                }
              }
              goto err;
             case 2:
              {
                ::java::lang::Class a0((jobject) NULL);
                PyTypeObject **p0;
                JArray< ::java::lang::String > a1((jobject) NULL);
                AnalysisSPILoader object((jobject) NULL);

                if (!parseArgs(args, "K[s", ::java::lang::Class::initializeClass, &a0, &p0, ::java::lang::t_Class::parameters_, &a1))
                {
                  INT_CALL(object = AnalysisSPILoader(a0, a1));
                  self->object = object;
                  break;
                }
              }
              goto err;
             case 3:
              {
                ::java::lang::Class a0((jobject) NULL);
                PyTypeObject **p0;
                JArray< ::java::lang::String > a1((jobject) NULL);
                ::java::lang::ClassLoader a2((jobject) NULL);
                AnalysisSPILoader object((jobject) NULL);

                if (!parseArgs(args, "K[sk", ::java::lang::Class::initializeClass, ::java::lang::ClassLoader::initializeClass, &a0, &p0, ::java::lang::t_Class::parameters_, &a1, &a2))
                {
                  INT_CALL(object = AnalysisSPILoader(a0, a1, a2));
                  self->object = object;
                  break;
                }
              }
             default:
             err:
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_AnalysisSPILoader_availableServices(t_AnalysisSPILoader *self)
          {
            ::java::util::Set result((jobject) NULL);
            OBJ_CALL(result = self->object.availableServices());
            return ::java::util::t_Set::wrap_Object(result, ::java::lang::PY_TYPE(String));
          }

          static PyObject *t_AnalysisSPILoader_lookupClass(t_AnalysisSPILoader *self, PyObject *arg)
          {
            ::java::lang::String a0((jobject) NULL);
            ::java::lang::Class result((jobject) NULL);

            if (!parseArg(arg, "s", &a0))
            {
              OBJ_CALL(result = self->object.lookupClass(a0));
              return ::java::lang::t_Class::wrap_Object(result);
            }

            PyErr_SetArgsError((PyObject *) self, "lookupClass", arg);
            return NULL;
          }

          static PyObject *t_AnalysisSPILoader_newFactoryClassInstance(PyTypeObject *type, PyObject *args)
          {
            ::java::lang::Class a0((jobject) NULL);
            PyTypeObject **p0;
            ::java::util::Map a1((jobject) NULL);
            PyTypeObject **p1;
            ::org::apache::lucene::analysis::util::AbstractAnalysisFactory result((jobject) NULL);

            if (!parseArgs(args, "KK", ::java::lang::Class::initializeClass, ::java::util::Map::initializeClass, &a0, &p0, ::java::lang::t_Class::parameters_, &a1, &p1, ::java::util::t_Map::parameters_))
            {
              OBJ_CALL(result = ::org::apache::lucene::analysis::util::AnalysisSPILoader::newFactoryClassInstance(a0, a1));
              return p0 != NULL && p0[0] != NULL ? wrapType(p0[0], result.this$) : ::org::apache::lucene::analysis::util::t_AbstractAnalysisFactory::wrap_Object(result);
            }

            PyErr_SetArgsError(type, "newFactoryClassInstance", args);
            return NULL;
          }

          static PyObject *t_AnalysisSPILoader_newInstance(t_AnalysisSPILoader *self, PyObject *args)
          {
            ::java::lang::String a0((jobject) NULL);
            ::java::util::Map a1((jobject) NULL);
            PyTypeObject **p1;
            ::org::apache::lucene::analysis::util::AbstractAnalysisFactory result((jobject) NULL);

            if (!parseArgs(args, "sK", ::java::util::Map::initializeClass, &a0, &a1, &p1, ::java::util::t_Map::parameters_))
            {
              OBJ_CALL(result = self->object.newInstance(a0, a1));
              return self->parameters[0] != NULL ? wrapType(self->parameters[0], result.this$) : ::org::apache::lucene::analysis::util::t_AbstractAnalysisFactory::wrap_Object(result);
            }

            PyErr_SetArgsError((PyObject *) self, "newInstance", args);
            return NULL;
          }

          static PyObject *t_AnalysisSPILoader_reload(t_AnalysisSPILoader *self, PyObject *arg)
          {
            ::java::lang::ClassLoader a0((jobject) NULL);

            if (!parseArg(arg, "k", ::java::lang::ClassLoader::initializeClass, &a0))
            {
              OBJ_CALL(self->object.reload(a0));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError((PyObject *) self, "reload", arg);
            return NULL;
          }
          static PyObject *t_AnalysisSPILoader_get__parameters_(t_AnalysisSPILoader *self, void *data)
          {
            return typeParameters(self->parameters, sizeof(self->parameters));
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/pattern/PatternCaptureGroupTokenFilter.h"
#include "java/util/regex/Pattern.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/analysis/TokenStream.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace pattern {

          ::java::lang::Class *PatternCaptureGroupTokenFilter::class$ = NULL;
          jmethodID *PatternCaptureGroupTokenFilter::mids$ = NULL;
          bool PatternCaptureGroupTokenFilter::live$ = false;

          jclass PatternCaptureGroupTokenFilter::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/pattern/PatternCaptureGroupTokenFilter");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_d781802a8b7243dd] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/analysis/TokenStream;Z[Ljava/util/regex/Pattern;)V");
              mids$[mid_incrementToken_8454bd5aa23fd11e] = env->getMethodID(cls, "incrementToken", "()Z");
              mids$[mid_reset_f2cc1bce94666404] = env->getMethodID(cls, "reset", "()V");

              class$ = new ::java::lang::Class(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          PatternCaptureGroupTokenFilter::PatternCaptureGroupTokenFilter(const ::org::apache::lucene::analysis::TokenStream & a0, jboolean a1, const JArray< ::java::util::regex::Pattern > & a2) : ::org::apache::lucene::analysis::TokenFilter(env->newObject(initializeClass, &mids$, mid_init$_d781802a8b7243dd, a0.this$, a1, a2.this$)) {}

          jboolean PatternCaptureGroupTokenFilter::incrementToken() const
          {
            return env->callBooleanMethod(this$, mids$[mid_incrementToken_8454bd5aa23fd11e]);
          }

          void PatternCaptureGroupTokenFilter::reset() const
          {
            env->callVoidMethod(this$, mids$[mid_reset_f2cc1bce94666404]);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace pattern {
          static PyObject *t_PatternCaptureGroupTokenFilter_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_PatternCaptureGroupTokenFilter_instance_(PyTypeObject *type, PyObject *arg);
          static int t_PatternCaptureGroupTokenFilter_init_(t_PatternCaptureGroupTokenFilter *self, PyObject *args, PyObject *kwds);
          static PyObject *t_PatternCaptureGroupTokenFilter_incrementToken(t_PatternCaptureGroupTokenFilter *self, PyObject *args);
          static PyObject *t_PatternCaptureGroupTokenFilter_reset(t_PatternCaptureGroupTokenFilter *self, PyObject *args);

          static PyMethodDef t_PatternCaptureGroupTokenFilter__methods_[] = {
            DECLARE_METHOD(t_PatternCaptureGroupTokenFilter, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_PatternCaptureGroupTokenFilter, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_PatternCaptureGroupTokenFilter, incrementToken, METH_VARARGS),
            DECLARE_METHOD(t_PatternCaptureGroupTokenFilter, reset, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          static PyType_Slot PY_TYPE_SLOTS(PatternCaptureGroupTokenFilter)[] = {
            { Py_tp_methods, t_PatternCaptureGroupTokenFilter__methods_ },
            { Py_tp_init, (void *) t_PatternCaptureGroupTokenFilter_init_ },
            { 0, NULL }
          };

          static PyType_Def *PY_TYPE_BASES(PatternCaptureGroupTokenFilter)[] = {
            &PY_TYPE_DEF(::org::apache::lucene::analysis::TokenFilter),
            NULL
          };

          DEFINE_TYPE(PatternCaptureGroupTokenFilter, t_PatternCaptureGroupTokenFilter, PatternCaptureGroupTokenFilter);

          void t_PatternCaptureGroupTokenFilter::install(PyObject *module)
          {
            installType(&PY_TYPE(PatternCaptureGroupTokenFilter), &PY_TYPE_DEF(PatternCaptureGroupTokenFilter), module, "PatternCaptureGroupTokenFilter", 0);
          }

          void t_PatternCaptureGroupTokenFilter::initialize(PyObject *module)
          {
            PyObject_SetAttrString((PyObject *) PY_TYPE(PatternCaptureGroupTokenFilter), "class_", make_descriptor(PatternCaptureGroupTokenFilter::initializeClass, 1));
            PyObject_SetAttrString((PyObject *) PY_TYPE(PatternCaptureGroupTokenFilter), "wrapfn_", make_descriptor(t_PatternCaptureGroupTokenFilter::wrap_jobject));
            PyObject_SetAttrString((PyObject *) PY_TYPE(PatternCaptureGroupTokenFilter), "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_PatternCaptureGroupTokenFilter_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, PatternCaptureGroupTokenFilter::initializeClass, 1)))
              return NULL;
            return t_PatternCaptureGroupTokenFilter::wrap_Object(PatternCaptureGroupTokenFilter(((t_PatternCaptureGroupTokenFilter *) arg)->object.this$));
          }
          static PyObject *t_PatternCaptureGroupTokenFilter_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, PatternCaptureGroupTokenFilter::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_PatternCaptureGroupTokenFilter_init_(t_PatternCaptureGroupTokenFilter *self, PyObject *args, PyObject *kwds)
          {
            ::org::apache::lucene::analysis::TokenStream a0((jobject) NULL);
            jboolean a1;
            JArray< ::java::util::regex::Pattern > a2((jobject) NULL);
            PatternCaptureGroupTokenFilter object((jobject) NULL);

            if (!parseArgs(args, "kZ[k", ::org::apache::lucene::analysis::TokenStream::initializeClass, ::java::util::regex::Pattern::initializeClass, &a0, &a1, &a2))
            {
              INT_CALL(object = PatternCaptureGroupTokenFilter(a0, a1, a2));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_PatternCaptureGroupTokenFilter_incrementToken(t_PatternCaptureGroupTokenFilter *self, PyObject *args)
          {
            jboolean result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.incrementToken());
              Py_RETURN_BOOL(result);
            }

            return callSuper(PY_TYPE(PatternCaptureGroupTokenFilter), (PyObject *) self, "incrementToken", args, 2);
          }

          static PyObject *t_PatternCaptureGroupTokenFilter_reset(t_PatternCaptureGroupTokenFilter *self, PyObject *args)
          {

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(self->object.reset());
              Py_RETURN_NONE;
            }

            return callSuper(PY_TYPE(PatternCaptureGroupTokenFilter), (PyObject *) self, "reset", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/suggest/analyzing/FSTUtil.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/util/fst/FST.h"
#include "java/io/IOException.h"
#include "java/util/List.h"
#include "org/apache/lucene/util/automaton/Automaton.h"
#include "org/apache/lucene/search/suggest/analyzing/FSTUtil$Path.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace suggest {
          namespace analyzing {

            ::java::lang::Class *FSTUtil::class$ = NULL;
            jmethodID *FSTUtil::mids$ = NULL;
            bool FSTUtil::live$ = false;

            jclass FSTUtil::initializeClass(bool getOnly)
            {
              if (getOnly)
                return (jclass) (live$ ? class$->this$ : NULL);
              if (class$ == NULL)
              {
                jclass cls = (jclass) env->findClass("org/apache/lucene/search/suggest/analyzing/FSTUtil");

                mids$ = new jmethodID[max_mid];
                mids$[mid_intersectPrefixPaths_820f1c4a604223f2] = env->getStaticMethodID(cls, "intersectPrefixPaths", "(Lorg/apache/lucene/util/automaton/Automaton;Lorg/apache/lucene/util/fst/FST;)Ljava/util/List;");

                class$ = new ::java::lang::Class(cls);
                live$ = true;
              }
              return (jclass) class$->this$;
            }

            ::java::util::List FSTUtil::intersectPrefixPaths(const ::org::apache::lucene::util::automaton::Automaton & a0, const ::org::apache::lucene::util::fst::FST & a1)
            {
              jclass cls = env->getClass(initializeClass);
              return ::java::util::List(env->callStaticObjectMethod(cls, mids$[mid_intersectPrefixPaths_820f1c4a604223f2], a0.this$, a1.this$));
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace suggest {
          namespace analyzing {
            static PyObject *t_FSTUtil_cast_(PyTypeObject *type, PyObject *arg);
            static PyObject *t_FSTUtil_instance_(PyTypeObject *type, PyObject *arg);
            static PyObject *t_FSTUtil_intersectPrefixPaths(PyTypeObject *type, PyObject *args);

            static PyMethodDef t_FSTUtil__methods_[] = {
              DECLARE_METHOD(t_FSTUtil, cast_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_FSTUtil, instance_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_FSTUtil, intersectPrefixPaths, METH_VARARGS | METH_CLASS),
              { NULL, NULL, 0, NULL }
            };

            static PyType_Slot PY_TYPE_SLOTS(FSTUtil)[] = {
              { Py_tp_methods, t_FSTUtil__methods_ },
              { Py_tp_init, (void *) abstract_init },
              { 0, NULL }
            };

            static PyType_Def *PY_TYPE_BASES(FSTUtil)[] = {
              &PY_TYPE_DEF(::java::lang::Object),
              NULL
            };

            DEFINE_TYPE(FSTUtil, t_FSTUtil, FSTUtil);

            void t_FSTUtil::install(PyObject *module)
            {
              installType(&PY_TYPE(FSTUtil), &PY_TYPE_DEF(FSTUtil), module, "FSTUtil", 0);
              PyObject_SetAttrString((PyObject *) PY_TYPE(FSTUtil), "Path", make_descriptor(&PY_TYPE_DEF(FSTUtil$Path)));
            }

            void t_FSTUtil::initialize(PyObject *module)
            {
              PyObject_SetAttrString((PyObject *) PY_TYPE(FSTUtil), "class_", make_descriptor(FSTUtil::initializeClass, 1));
              PyObject_SetAttrString((PyObject *) PY_TYPE(FSTUtil), "wrapfn_", make_descriptor(t_FSTUtil::wrap_jobject));
              PyObject_SetAttrString((PyObject *) PY_TYPE(FSTUtil), "boxfn_", make_descriptor(boxObject));
            }

            static PyObject *t_FSTUtil_cast_(PyTypeObject *type, PyObject *arg)
            {
              if (!(arg = castCheck(arg, FSTUtil::initializeClass, 1)))
                return NULL;
              return t_FSTUtil::wrap_Object(FSTUtil(((t_FSTUtil *) arg)->object.this$));
            }
            static PyObject *t_FSTUtil_instance_(PyTypeObject *type, PyObject *arg)
            {
              if (!castCheck(arg, FSTUtil::initializeClass, 0))
                Py_RETURN_FALSE;
              Py_RETURN_TRUE;
            }

            static PyObject *t_FSTUtil_intersectPrefixPaths(PyTypeObject *type, PyObject *args)
            {
              ::org::apache::lucene::util::automaton::Automaton a0((jobject) NULL);
              ::org::apache::lucene::util::fst::FST a1((jobject) NULL);
              PyTypeObject **p1;
              ::java::util::List result((jobject) NULL);

              if (!parseArgs(args, "kK", ::org::apache::lucene::util::automaton::Automaton::initializeClass, ::org::apache::lucene::util::fst::FST::initializeClass, &a0, &a1, &p1, ::org::apache::lucene::util::fst::t_FST::parameters_))
              {
                OBJ_CALL(result = ::org::apache::lucene::search::suggest::analyzing::FSTUtil::intersectPrefixPaths(a0, a1));
                return ::java::util::t_List::wrap_Object(result);
              }

              PyErr_SetArgsError(type, "intersectPrefixPaths", args);
              return NULL;
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/SortedSetSelector.h"
#include "org/apache/lucene/search/SortedSetSelector$Type.h"
#include "org/apache/lucene/index/SortedSetDocValues.h"
#include "org/apache/lucene/index/SortedDocValues.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {

        ::java::lang::Class *SortedSetSelector::class$ = NULL;
        jmethodID *SortedSetSelector::mids$ = NULL;
        bool SortedSetSelector::live$ = false;

        jclass SortedSetSelector::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/search/SortedSetSelector");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_f2cc1bce94666404] = env->getMethodID(cls, "<init>", "()V");
            mids$[mid_wrap_6a102894f8d8f693] = env->getStaticMethodID(cls, "wrap", "(Lorg/apache/lucene/index/SortedSetDocValues;Lorg/apache/lucene/search/SortedSetSelector$Type;)Lorg/apache/lucene/index/SortedDocValues;");

            class$ = new ::java::lang::Class(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        SortedSetSelector::SortedSetSelector() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_f2cc1bce94666404)) {}

        ::org::apache::lucene::index::SortedDocValues SortedSetSelector::wrap(const ::org::apache::lucene::index::SortedSetDocValues & a0, const ::org::apache::lucene::search::SortedSetSelector$Type & a1)
        {
          jclass cls = env->getClass(initializeClass);
          return ::org::apache::lucene::index::SortedDocValues(env->callStaticObjectMethod(cls, mids$[mid_wrap_6a102894f8d8f693], a0.this$, a1.this$));
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        static PyObject *t_SortedSetSelector_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_SortedSetSelector_instance_(PyTypeObject *type, PyObject *arg);
        static int t_SortedSetSelector_init_(t_SortedSetSelector *self, PyObject *args, PyObject *kwds);
        static PyObject *t_SortedSetSelector_wrap(PyTypeObject *type, PyObject *args);

        static PyMethodDef t_SortedSetSelector__methods_[] = {
          DECLARE_METHOD(t_SortedSetSelector, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_SortedSetSelector, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_SortedSetSelector, wrap, METH_VARARGS | METH_CLASS),
          { NULL, NULL, 0, NULL }
        };

        static PyType_Slot PY_TYPE_SLOTS(SortedSetSelector)[] = {
          { Py_tp_methods, t_SortedSetSelector__methods_ },
          { Py_tp_init, (void *) t_SortedSetSelector_init_ },
          { 0, NULL }
        };

        static PyType_Def *PY_TYPE_BASES(SortedSetSelector)[] = {
          &PY_TYPE_DEF(::java::lang::Object),
          NULL
        };

        DEFINE_TYPE(SortedSetSelector, t_SortedSetSelector, SortedSetSelector);

        void t_SortedSetSelector::install(PyObject *module)
        {
          installType(&PY_TYPE(SortedSetSelector), &PY_TYPE_DEF(SortedSetSelector), module, "SortedSetSelector", 0);
          PyObject_SetAttrString((PyObject *) PY_TYPE(SortedSetSelector), "Type", make_descriptor(&PY_TYPE_DEF(SortedSetSelector$Type)));
        }

        void t_SortedSetSelector::initialize(PyObject *module)
        {
          PyObject_SetAttrString((PyObject *) PY_TYPE(SortedSetSelector), "class_", make_descriptor(SortedSetSelector::initializeClass, 1));
          PyObject_SetAttrString((PyObject *) PY_TYPE(SortedSetSelector), "wrapfn_", make_descriptor(t_SortedSetSelector::wrap_jobject));
          PyObject_SetAttrString((PyObject *) PY_TYPE(SortedSetSelector), "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_SortedSetSelector_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, SortedSetSelector::initializeClass, 1)))
            return NULL;
          return t_SortedSetSelector::wrap_Object(SortedSetSelector(((t_SortedSetSelector *) arg)->object.this$));
        }
        static PyObject *t_SortedSetSelector_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, SortedSetSelector::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_SortedSetSelector_init_(t_SortedSetSelector *self, PyObject *args, PyObject *kwds)
        {
          SortedSetSelector object((jobject) NULL);

          INT_CALL(object = SortedSetSelector());
          self->object = object;

          return 0;
        }

        static PyObject *t_SortedSetSelector_wrap(PyTypeObject *type, PyObject *args)
        {
          ::org::apache::lucene::index::SortedSetDocValues a0((jobject) NULL);
          ::org::apache::lucene::search::SortedSetSelector$Type a1((jobject) NULL);
          PyTypeObject **p1;
          ::org::apache::lucene::index::SortedDocValues result((jobject) NULL);

          if (!parseArgs(args, "kK", ::org::apache::lucene::index::SortedSetDocValues::initializeClass, ::org::apache::lucene::search::SortedSetSelector$Type::initializeClass, &a0, &a1, &p1, ::org::apache::lucene::search::t_SortedSetSelector$Type::parameters_))
          {
            OBJ_CALL(result = ::org::apache::lucene::search::SortedSetSelector::wrap(a0, a1));
            return ::org::apache::lucene::index::t_SortedDocValues::wrap_Object(result);
          }

          PyErr_SetArgsError(type, "wrap", args);
          return NULL;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/facet/RandomSamplingFacetsCollector.h"
#include "org/apache/lucene/facet/FacetResult.h"
#include "org/apache/lucene/search/IndexSearcher.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/facet/FacetsConfig.h"
#include "java/io/IOException.h"
#include "java/util/List.h"
#include "org/apache/lucene/facet/FacetsCollector$MatchingDocs.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace facet {

        ::java::lang::Class *RandomSamplingFacetsCollector::class$ = NULL;
        jmethodID *RandomSamplingFacetsCollector::mids$ = NULL;
        bool RandomSamplingFacetsCollector::live$ = false;

        jclass RandomSamplingFacetsCollector::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/facet/RandomSamplingFacetsCollector");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_040c4cd0390c5aff] = env->getMethodID(cls, "<init>", "(I)V");
            mids$[mid_init$_7b2f5b9ddfcb9416] = env->getMethodID(cls, "<init>", "(IJ)V");
            mids$[mid_amortizeFacetCounts_cd94c830d122bbb4] = env->getMethodID(cls, "amortizeFacetCounts", "(Lorg/apache/lucene/facet/FacetResult;Lorg/apache/lucene/facet/FacetsConfig;Lorg/apache/lucene/search/IndexSearcher;)Lorg/apache/lucene/facet/FacetResult;");
            mids$[mid_getMatchingDocs_49ec78390f08338a] = env->getMethodID(cls, "getMatchingDocs", "()Ljava/util/List;");
            mids$[mid_getOriginalMatchingDocs_49ec78390f08338a] = env->getMethodID(cls, "getOriginalMatchingDocs", "()Ljava/util/List;");
            mids$[mid_getSamplingRate_8c74b787998ce4bc] = env->getMethodID(cls, "getSamplingRate", "()D");

            class$ = new ::java::lang::Class(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        RandomSamplingFacetsCollector::RandomSamplingFacetsCollector(jint a0) : ::org::apache::lucene::facet::FacetsCollector(env->newObject(initializeClass, &mids$, mid_init$_040c4cd0390c5aff, a0)) {}

        RandomSamplingFacetsCollector::RandomSamplingFacetsCollector(jint a0, jlong a1) : ::org::apache::lucene::facet::FacetsCollector(env->newObject(initializeClass, &mids$, mid_init$_7b2f5b9ddfcb9416, a0, a1)) {}

        ::org::apache::lucene::facet::FacetResult RandomSamplingFacetsCollector::amortizeFacetCounts(const ::org::apache::lucene::facet::FacetResult & a0, const ::org::apache::lucene::facet::FacetsConfig & a1, const ::org::apache::lucene::search::IndexSearcher & a2) const
        {
          return ::org::apache::lucene::facet::FacetResult(env->callObjectMethod(this$, mids$[mid_amortizeFacetCounts_cd94c830d122bbb4], a0.this$, a1.this$, a2.this$));
        }

        ::java::util::List RandomSamplingFacetsCollector::getMatchingDocs() const
        {
          return ::java::util::List(env->callObjectMethod(this$, mids$[mid_getMatchingDocs_49ec78390f08338a]));
        }

        ::java::util::List RandomSamplingFacetsCollector::getOriginalMatchingDocs() const
        {
          return ::java::util::List(env->callObjectMethod(this$, mids$[mid_getOriginalMatchingDocs_49ec78390f08338a]));
        }

        jdouble RandomSamplingFacetsCollector::getSamplingRate() const
        {
          return env->callDoubleMethod(this$, mids$[mid_getSamplingRate_8c74b787998ce4bc]);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace facet {
        static PyObject *t_RandomSamplingFacetsCollector_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_RandomSamplingFacetsCollector_instance_(PyTypeObject *type, PyObject *arg);
        static int t_RandomSamplingFacetsCollector_init_(t_RandomSamplingFacetsCollector *self, PyObject *args, PyObject *kwds);
        static PyObject *t_RandomSamplingFacetsCollector_amortizeFacetCounts(t_RandomSamplingFacetsCollector *self, PyObject *args);
        static PyObject *t_RandomSamplingFacetsCollector_getMatchingDocs(t_RandomSamplingFacetsCollector *self, PyObject *args);
        static PyObject *t_RandomSamplingFacetsCollector_getOriginalMatchingDocs(t_RandomSamplingFacetsCollector *self);
        static PyObject *t_RandomSamplingFacetsCollector_getSamplingRate(t_RandomSamplingFacetsCollector *self);
        static PyObject *t_RandomSamplingFacetsCollector_get__matchingDocs(t_RandomSamplingFacetsCollector *self, void *data);
        static PyObject *t_RandomSamplingFacetsCollector_get__originalMatchingDocs(t_RandomSamplingFacetsCollector *self, void *data);
        static PyObject *t_RandomSamplingFacetsCollector_get__samplingRate(t_RandomSamplingFacetsCollector *self, void *data);
        static PyGetSetDef t_RandomSamplingFacetsCollector__fields_[] = {
          DECLARE_GET_FIELD(t_RandomSamplingFacetsCollector, matchingDocs),
          DECLARE_GET_FIELD(t_RandomSamplingFacetsCollector, originalMatchingDocs),
          DECLARE_GET_FIELD(t_RandomSamplingFacetsCollector, samplingRate),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_RandomSamplingFacetsCollector__methods_[] = {
          DECLARE_METHOD(t_RandomSamplingFacetsCollector, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_RandomSamplingFacetsCollector, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_RandomSamplingFacetsCollector, amortizeFacetCounts, METH_VARARGS),
          DECLARE_METHOD(t_RandomSamplingFacetsCollector, getMatchingDocs, METH_VARARGS),
          DECLARE_METHOD(t_RandomSamplingFacetsCollector, getOriginalMatchingDocs, METH_NOARGS),
          DECLARE_METHOD(t_RandomSamplingFacetsCollector, getSamplingRate, METH_NOARGS),
          { NULL, NULL, 0, NULL }
        };

        static PyType_Slot PY_TYPE_SLOTS(RandomSamplingFacetsCollector)[] = {
          { Py_tp_methods, t_RandomSamplingFacetsCollector__methods_ },
          { Py_tp_init, (void *) t_RandomSamplingFacetsCollector_init_ },
          { Py_tp_getset, t_RandomSamplingFacetsCollector__fields_ },
          { 0, NULL }
        };

        static PyType_Def *PY_TYPE_BASES(RandomSamplingFacetsCollector)[] = {
          &PY_TYPE_DEF(::org::apache::lucene::facet::FacetsCollector),
          NULL
        };

        DEFINE_TYPE(RandomSamplingFacetsCollector, t_RandomSamplingFacetsCollector, RandomSamplingFacetsCollector);

        void t_RandomSamplingFacetsCollector::install(PyObject *module)
        {
          installType(&PY_TYPE(RandomSamplingFacetsCollector), &PY_TYPE_DEF(RandomSamplingFacetsCollector), module, "RandomSamplingFacetsCollector", 0);
        }

        void t_RandomSamplingFacetsCollector::initialize(PyObject *module)
        {
          PyObject_SetAttrString((PyObject *) PY_TYPE(RandomSamplingFacetsCollector), "class_", make_descriptor(RandomSamplingFacetsCollector::initializeClass, 1));
          PyObject_SetAttrString((PyObject *) PY_TYPE(RandomSamplingFacetsCollector), "wrapfn_", make_descriptor(t_RandomSamplingFacetsCollector::wrap_jobject));
          PyObject_SetAttrString((PyObject *) PY_TYPE(RandomSamplingFacetsCollector), "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_RandomSamplingFacetsCollector_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, RandomSamplingFacetsCollector::initializeClass, 1)))
            return NULL;
          return t_RandomSamplingFacetsCollector::wrap_Object(RandomSamplingFacetsCollector(((t_RandomSamplingFacetsCollector *) arg)->object.this$));
        }
        static PyObject *t_RandomSamplingFacetsCollector_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, RandomSamplingFacetsCollector::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_RandomSamplingFacetsCollector_init_(t_RandomSamplingFacetsCollector *self, PyObject *args, PyObject *kwds)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 1:
            {
              jint a0;
              RandomSamplingFacetsCollector object((jobject) NULL);

              if (!parseArgs(args, "I", &a0))
              {
                INT_CALL(object = RandomSamplingFacetsCollector(a0));
                self->object = object;
                break;
              }
            }
            goto err;
           case 2:
            {
              jint a0;
              jlong a1;
              RandomSamplingFacetsCollector object((jobject) NULL);

              if (!parseArgs(args, "IJ", &a0, &a1))
              {
                INT_CALL(object = RandomSamplingFacetsCollector(a0, a1));
                self->object = object;
                break;
              }
            }
           default:
           err:
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }

        static PyObject *t_RandomSamplingFacetsCollector_amortizeFacetCounts(t_RandomSamplingFacetsCollector *self, PyObject *args)
        {
          ::org::apache::lucene::facet::FacetResult a0((jobject) NULL);
          ::org::apache::lucene::facet::FacetsConfig a1((jobject) NULL);
          ::org::apache::lucene::search::IndexSearcher a2((jobject) NULL);
          ::org::apache::lucene::facet::FacetResult result((jobject) NULL);

          if (!parseArgs(args, "kkk", ::org::apache::lucene::facet::FacetResult::initializeClass, ::org::apache::lucene::facet::FacetsConfig::initializeClass, ::org::apache::lucene::search::IndexSearcher::initializeClass, &a0, &a1, &a2))
          {
            OBJ_CALL(result = self->object.amortizeFacetCounts(a0, a1, a2));
            return ::org::apache::lucene::facet::t_FacetResult::wrap_Object(result);
          }

          PyErr_SetArgsError((PyObject *) self, "amortizeFacetCounts", args);
          return NULL;
        }

        static PyObject *t_RandomSamplingFacetsCollector_getMatchingDocs(t_RandomSamplingFacetsCollector *self, PyObject *args)
        {
          ::java::util::List result((jobject) NULL);

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.getMatchingDocs());
            return ::java::util::t_List::wrap_Object(result, ::org::apache::lucene::facet::PY_TYPE(FacetsCollector$MatchingDocs));
          }

          return callSuper(PY_TYPE(RandomSamplingFacetsCollector), (PyObject *) self, "getMatchingDocs", args, 2);
        }

        static PyObject *t_RandomSamplingFacetsCollector_getOriginalMatchingDocs(t_RandomSamplingFacetsCollector *self)
        {
          ::java::util::List result((jobject) NULL);
          OBJ_CALL(result = self->object.getOriginalMatchingDocs());
          return ::java::util::t_List::wrap_Object(result, ::org::apache::lucene::facet::PY_TYPE(FacetsCollector$MatchingDocs));
        }

        static PyObject *t_RandomSamplingFacetsCollector_getSamplingRate(t_RandomSamplingFacetsCollector *self)
        {
          jdouble result;
          OBJ_CALL(result = self->object.getSamplingRate());
          return PyFloat_FromDouble((double) result);
        }

        static PyObject *t_RandomSamplingFacetsCollector_get__matchingDocs(t_RandomSamplingFacetsCollector *self, void *data)
        {
          ::java::util::List value((jobject) NULL);
          OBJ_CALL(value = self->object.getMatchingDocs());
          return ::java::util::t_List::wrap_Object(value);
        }

        static PyObject *t_RandomSamplingFacetsCollector_get__originalMatchingDocs(t_RandomSamplingFacetsCollector *self, void *data)
        {
          ::java::util::List value((jobject) NULL);
          OBJ_CALL(value = self->object.getOriginalMatchingDocs());
          return ::java::util::t_List::wrap_Object(value);
        }

        static PyObject *t_RandomSamplingFacetsCollector_get__samplingRate(t_RandomSamplingFacetsCollector *self, void *data)
        {
          jdouble value;
          OBJ_CALL(value = self->object.getSamplingRate());
          return PyFloat_FromDouble((double) value);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/util/IOUtils.h"
#include "org/apache/lucene/util/IOUtils$IOConsumer.h"
#include "java/util/Collection.h"
#include "java/io/InputStream.h"
#include "java/lang/RuntimeException.h"
#include "java/lang/Error.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/store/Directory.h"
#include "java/lang/Iterable.h"
#include "java/io/Closeable.h"
#include "java/lang/String.h"
#include "java/io/Reader.h"
#include "java/io/IOException.h"
#include "java/nio/file/Path.h"
#include "java/lang/Throwable.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {

        ::java::lang::Class *IOUtils::class$ = NULL;
        jmethodID *IOUtils::mids$ = NULL;
        bool IOUtils::live$ = false;
        ::java::lang::String *IOUtils::UTF_8 = NULL;

        jclass IOUtils::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/util/IOUtils");

            mids$ = new jmethodID[max_mid];
            mids$[mid_applyToAll_a3344025c13ee64b] = env->getStaticMethodID(cls, "applyToAll", "(Ljava/util/Collection;Lorg/apache/lucene/util/IOUtils$IOConsumer;)V");
            mids$[mid_close_3048febe8f7127cb] = env->getStaticMethodID(cls, "close", "([Ljava/io/Closeable;)V");
            mids$[mid_close_870d7079aa6e0153] = env->getStaticMethodID(cls, "close", "(Ljava/lang/Iterable;)V");
            mids$[mid_closeWhileHandlingException_3048febe8f7127cb] = env->getStaticMethodID(cls, "closeWhileHandlingException", "([Ljava/io/Closeable;)V");
            mids$[mid_closeWhileHandlingException_870d7079aa6e0153] = env->getStaticMethodID(cls, "closeWhileHandlingException", "(Ljava/lang/Iterable;)V");
            mids$[mid_deleteFiles_14ec9b100e8ac4e0] = env->getStaticMethodID(cls, "deleteFiles", "(Lorg/apache/lucene/store/Directory;Ljava/util/Collection;)V");
            mids$[mid_deleteFilesIfExist_4db5a2d07e173b79] = env->getStaticMethodID(cls, "deleteFilesIfExist", "([Ljava/nio/file/Path;)V");
            mids$[mid_deleteFilesIfExist_50bc3ddc62a19f2d] = env->getStaticMethodID(cls, "deleteFilesIfExist", "(Ljava/util/Collection;)V");
            mids$[mid_deleteFilesIgnoringExceptions_4db5a2d07e173b79] = env->getStaticMethodID(cls, "deleteFilesIgnoringExceptions", "([Ljava/nio/file/Path;)V");
            mids$[mid_deleteFilesIgnoringExceptions_50bc3ddc62a19f2d] = env->getStaticMethodID(cls, "deleteFilesIgnoringExceptions", "(Ljava/util/Collection;)V");
            mids$[mid_deleteFilesIgnoringExceptions_efc0d6c34cd5cf40] = env->getStaticMethodID(cls, "deleteFilesIgnoringExceptions", "(Lorg/apache/lucene/store/Directory;[Ljava/lang/String;)V");
            mids$[mid_deleteFilesIgnoringExceptions_14ec9b100e8ac4e0] = env->getStaticMethodID(cls, "deleteFilesIgnoringExceptions", "(Lorg/apache/lucene/store/Directory;Ljava/util/Collection;)V");
            mids$[mid_fsync_a06445184861073e] = env->getStaticMethodID(cls, "fsync", "(Ljava/nio/file/Path;Z)V");
            mids$[mid_reThrow_471cfbdb800444a7] = env->getStaticMethodID(cls, "reThrow", "(Ljava/lang/Throwable;)V");
            mids$[mid_reThrowUnchecked_471cfbdb800444a7] = env->getStaticMethodID(cls, "reThrowUnchecked", "(Ljava/lang/Throwable;)V");
            mids$[mid_rethrowAlways_3e4061c09a843c89] = env->getStaticMethodID(cls, "rethrowAlways", "(Ljava/lang/Throwable;)Ljava/lang/Error;");
            mids$[mid_rm_4db5a2d07e173b79] = env->getStaticMethodID(cls, "rm", "([Ljava/nio/file/Path;)V");
            mids$[mid_spins_1524023b507b00a9] = env->getStaticMethodID(cls, "spins", "(Lorg/apache/lucene/store/Directory;)Z");
            mids$[mid_spins_64eb4236a3fd11dc] = env->getStaticMethodID(cls, "spins", "(Ljava/nio/file/Path;)Z");
            mids$[mid_useOrSuppress_b5c7b48107b7c674] = env->getStaticMethodID(cls, "useOrSuppress", "(Ljava/lang/Throwable;Ljava/lang/Throwable;)Ljava/lang/Throwable;");

            class$ = new ::java::lang::Class(cls);
            cls = (jclass) class$->this$;

            UTF_8 = new ::java::lang::String(env->getStaticObjectField(cls, "UTF_8", "Ljava/lang/String;"));
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        void IOUtils::applyToAll(const ::java::util::Collection & a0, const ::org::apache::lucene::util::IOUtils$IOConsumer & a1)
        {
          jclass cls = env->getClass(initializeClass);
          env->callStaticVoidMethod(cls, mids$[mid_applyToAll_a3344025c13ee64b], a0.this$, a1.this$);
        }

        void IOUtils::close(const JArray< ::java::io::Closeable > & a0)
        {
          jclass cls = env->getClass(initializeClass);
          env->callStaticVoidMethod(cls, mids$[mid_close_3048febe8f7127cb], a0.this$);
        }

        void IOUtils::close(const ::java::lang::Iterable & a0)
        {
          jclass cls = env->getClass(initializeClass);
          env->callStaticVoidMethod(cls, mids$[mid_close_870d7079aa6e0153], a0.this$);
        }

        void IOUtils::closeWhileHandlingException(const JArray< ::java::io::Closeable > & a0)
        {
          jclass cls = env->getClass(initializeClass);
          env->callStaticVoidMethod(cls, mids$[mid_closeWhileHandlingException_3048febe8f7127cb], a0.this$);
        }

        void IOUtils::closeWhileHandlingException(const ::java::lang::Iterable & a0)
        {
          jclass cls = env->getClass(initializeClass);
          env->callStaticVoidMethod(cls, mids$[mid_closeWhileHandlingException_870d7079aa6e0153], a0.this$);
        }

        void IOUtils::deleteFiles(const ::org::apache::lucene::store::Directory & a0, const ::java::util::Collection & a1)
        {
          jclass cls = env->getClass(initializeClass);
          env->callStaticVoidMethod(cls, mids$[mid_deleteFiles_14ec9b100e8ac4e0], a0.this$, a1.this$);
        }

        void IOUtils::deleteFilesIfExist(const JArray< ::java::nio::file::Path > & a0)
        {
          jclass cls = env->getClass(initializeClass);
          env->callStaticVoidMethod(cls, mids$[mid_deleteFilesIfExist_4db5a2d07e173b79], a0.this$);
        }

        void IOUtils::deleteFilesIfExist(const ::java::util::Collection & a0)
        {
          jclass cls = env->getClass(initializeClass);
          env->callStaticVoidMethod(cls, mids$[mid_deleteFilesIfExist_50bc3ddc62a19f2d], a0.this$);
        }

        void IOUtils::deleteFilesIgnoringExceptions(const JArray< ::java::nio::file::Path > & a0)
        {
          jclass cls = env->getClass(initializeClass);
          env->callStaticVoidMethod(cls, mids$[mid_deleteFilesIgnoringExceptions_4db5a2d07e173b79], a0.this$);
        }

        void IOUtils::deleteFilesIgnoringExceptions(const ::java::util::Collection & a0)
        {
          jclass cls = env->getClass(initializeClass);
          env->callStaticVoidMethod(cls, mids$[mid_deleteFilesIgnoringExceptions_50bc3ddc62a19f2d], a0.this$);
        }

        void IOUtils::deleteFilesIgnoringExceptions(const ::org::apache::lucene::store::Directory & a0, const JArray< ::java::lang::String > & a1)
        {
          jclass cls = env->getClass(initializeClass);
          env->callStaticVoidMethod(cls, mids$[mid_deleteFilesIgnoringExceptions_efc0d6c34cd5cf40], a0.this$, a1.this$);
        }

        void IOUtils::deleteFilesIgnoringExceptions(const ::org::apache::lucene::store::Directory & a0, const ::java::util::Collection & a1)
        {
          jclass cls = env->getClass(initializeClass);
          env->callStaticVoidMethod(cls, mids$[mid_deleteFilesIgnoringExceptions_14ec9b100e8ac4e0], a0.this$, a1.this$);
        }

        void IOUtils::fsync(const ::java::nio::file::Path & a0, jboolean a1)
        {
          jclass cls = env->getClass(initializeClass);
          env->callStaticVoidMethod(cls, mids$[mid_fsync_a06445184861073e], a0.this$, a1);
        }

        void IOUtils::reThrow(const ::java::lang::Throwable & a0)
        {
          jclass cls = env->getClass(initializeClass);
          env->callStaticVoidMethod(cls, mids$[mid_reThrow_471cfbdb800444a7], a0.this$);
        }

        void IOUtils::reThrowUnchecked(const ::java::lang::Throwable & a0)
        {
          jclass cls = env->getClass(initializeClass);
          env->callStaticVoidMethod(cls, mids$[mid_reThrowUnchecked_471cfbdb800444a7], a0.this$);
        }

        ::java::lang::Error IOUtils::rethrowAlways(const ::java::lang::Throwable & a0)
        {
          jclass cls = env->getClass(initializeClass);
          return ::java::lang::Error(env->callStaticObjectMethod(cls, mids$[mid_rethrowAlways_3e4061c09a843c89], a0.this$));
        }

        void IOUtils::rm(const JArray< ::java::nio::file::Path > & a0)
        {
          jclass cls = env->getClass(initializeClass);
          env->callStaticVoidMethod(cls, mids$[mid_rm_4db5a2d07e173b79], a0.this$);
        }

        jboolean IOUtils::spins(const ::org::apache::lucene::store::Directory & a0)
        {
          jclass cls = env->getClass(initializeClass);
          return env->callStaticBooleanMethod(cls, mids$[mid_spins_1524023b507b00a9], a0.this$);
        }

        jboolean IOUtils::spins(const ::java::nio::file::Path & a0)
        {
          jclass cls = env->getClass(initializeClass);
          return env->callStaticBooleanMethod(cls, mids$[mid_spins_64eb4236a3fd11dc], a0.this$);
        }

        ::java::lang::Throwable IOUtils::useOrSuppress(const ::java::lang::Throwable & a0, const ::java::lang::Throwable & a1)
        {
          jclass cls = env->getClass(initializeClass);
          return ::java::lang::Throwable(env->callStaticObjectMethod(cls, mids$[mid_useOrSuppress_b5c7b48107b7c674], a0.this$, a1.this$));
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"
#include "org/apache/lucene/util/IOUtils$IOFunction.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        static PyObject *t_IOUtils_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_IOUtils_instance_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_IOUtils_applyToAll(PyTypeObject *type, PyObject *args);
        static PyObject *t_IOUtils_close(PyTypeObject *type, PyObject *args);
        static PyObject *t_IOUtils_closeWhileHandlingException(PyTypeObject *type, PyObject *args);
        static PyObject *t_IOUtils_deleteFiles(PyTypeObject *type, PyObject *args);
        static PyObject *t_IOUtils_deleteFilesIfExist(PyTypeObject *type, PyObject *args);
        static PyObject *t_IOUtils_deleteFilesIgnoringExceptions(PyTypeObject *type, PyObject *args);
        static PyObject *t_IOUtils_fsync(PyTypeObject *type, PyObject *args);
        static PyObject *t_IOUtils_reThrow(PyTypeObject *type, PyObject *arg);
        static PyObject *t_IOUtils_reThrowUnchecked(PyTypeObject *type, PyObject *arg);
        static PyObject *t_IOUtils_rethrowAlways(PyTypeObject *type, PyObject *arg);
        static PyObject *t_IOUtils_rm(PyTypeObject *type, PyObject *arg);
        static PyObject *t_IOUtils_spins(PyTypeObject *type, PyObject *args);
        static PyObject *t_IOUtils_useOrSuppress(PyTypeObject *type, PyObject *args);

        static PyMethodDef t_IOUtils__methods_[] = {
          DECLARE_METHOD(t_IOUtils, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_IOUtils, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_IOUtils, applyToAll, METH_VARARGS | METH_CLASS),
          DECLARE_METHOD(t_IOUtils, close, METH_VARARGS | METH_CLASS),
          DECLARE_METHOD(t_IOUtils, closeWhileHandlingException, METH_VARARGS | METH_CLASS),
          DECLARE_METHOD(t_IOUtils, deleteFiles, METH_VARARGS | METH_CLASS),
          DECLARE_METHOD(t_IOUtils, deleteFilesIfExist, METH_VARARGS | METH_CLASS),
          DECLARE_METHOD(t_IOUtils, deleteFilesIgnoringExceptions, METH_VARARGS | METH_CLASS),
          DECLARE_METHOD(t_IOUtils, fsync, METH_VARARGS | METH_CLASS),
          DECLARE_METHOD(t_IOUtils, reThrow, METH_O | METH_CLASS),
          DECLARE_METHOD(t_IOUtils, reThrowUnchecked, METH_O | METH_CLASS),
          DECLARE_METHOD(t_IOUtils, rethrowAlways, METH_O | METH_CLASS),
          DECLARE_METHOD(t_IOUtils, rm, METH_O | METH_CLASS),
          DECLARE_METHOD(t_IOUtils, spins, METH_VARARGS | METH_CLASS),
          DECLARE_METHOD(t_IOUtils, useOrSuppress, METH_VARARGS | METH_CLASS),
          { NULL, NULL, 0, NULL }
        };

        static PyType_Slot PY_TYPE_SLOTS(IOUtils)[] = {
          { Py_tp_methods, t_IOUtils__methods_ },
          { Py_tp_init, (void *) abstract_init },
          { 0, NULL }
        };

        static PyType_Def *PY_TYPE_BASES(IOUtils)[] = {
          &PY_TYPE_DEF(::java::lang::Object),
          NULL
        };

        DEFINE_TYPE(IOUtils, t_IOUtils, IOUtils);

        void t_IOUtils::install(PyObject *module)
        {
          installType(&PY_TYPE(IOUtils), &PY_TYPE_DEF(IOUtils), module, "IOUtils", 0);
          PyObject_SetAttrString((PyObject *) PY_TYPE(IOUtils), "IOFunction", make_descriptor(&PY_TYPE_DEF(IOUtils$IOFunction)));
          PyObject_SetAttrString((PyObject *) PY_TYPE(IOUtils), "IOConsumer", make_descriptor(&PY_TYPE_DEF(IOUtils$IOConsumer)));
        }

        void t_IOUtils::initialize(PyObject *module)
        {
          PyObject_SetAttrString((PyObject *) PY_TYPE(IOUtils), "class_", make_descriptor(IOUtils::initializeClass, 1));
          PyObject_SetAttrString((PyObject *) PY_TYPE(IOUtils), "wrapfn_", make_descriptor(t_IOUtils::wrap_jobject));
          PyObject_SetAttrString((PyObject *) PY_TYPE(IOUtils), "boxfn_", make_descriptor(boxObject));
          env->getClass(IOUtils::initializeClass);
          PyObject_SetAttrString((PyObject *) PY_TYPE(IOUtils), "UTF_8", make_descriptor(j2p(*IOUtils::UTF_8)));
        }

        static PyObject *t_IOUtils_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, IOUtils::initializeClass, 1)))
            return NULL;
          return t_IOUtils::wrap_Object(IOUtils(((t_IOUtils *) arg)->object.this$));
        }
        static PyObject *t_IOUtils_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, IOUtils::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static PyObject *t_IOUtils_applyToAll(PyTypeObject *type, PyObject *args)
        {
          ::java::util::Collection a0((jobject) NULL);
          PyTypeObject **p0;
          ::org::apache::lucene::util::IOUtils$IOConsumer a1((jobject) NULL);
          PyTypeObject **p1;

          if (!parseArgs(args, "KK", ::java::util::Collection::initializeClass, ::org::apache::lucene::util::IOUtils$IOConsumer::initializeClass, &a0, &p0, ::java::util::t_Collection::parameters_, &a1, &p1, ::org::apache::lucene::util::t_IOUtils$IOConsumer::parameters_))
          {
            OBJ_CALL(::org::apache::lucene::util::IOUtils::applyToAll(a0, a1));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError(type, "applyToAll", args);
          return NULL;
        }

        static PyObject *t_IOUtils_close(PyTypeObject *type, PyObject *args)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 1:
            {
              JArray< ::java::io::Closeable > a0((jobject) NULL);

              if (!parseArgs(args, "[k", ::java::io::Closeable::initializeClass, &a0))
              {
                OBJ_CALL(::org::apache::lucene::util::IOUtils::close(a0));
                Py_RETURN_NONE;
              }
            }
            {
              ::java::lang::Iterable a0((jobject) NULL);
              PyTypeObject **p0;

              if (!parseArgs(args, "K", ::java::lang::Iterable::initializeClass, &a0, &p0, ::java::lang::t_Iterable::parameters_))
              {
                OBJ_CALL(::org::apache::lucene::util::IOUtils::close(a0));
                Py_RETURN_NONE;
              }
            }
          }

          PyErr_SetArgsError(type, "close", args);
          return NULL;
        }

        static PyObject *t_IOUtils_closeWhileHandlingException(PyTypeObject *type, PyObject *args)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 1:
            {
              JArray< ::java::io::Closeable > a0((jobject) NULL);

              if (!parseArgs(args, "[k", ::java::io::Closeable::initializeClass, &a0))
              {
                OBJ_CALL(::org::apache::lucene::util::IOUtils::closeWhileHandlingException(a0));
                Py_RETURN_NONE;
              }
            }
            {
              ::java::lang::Iterable a0((jobject) NULL);
              PyTypeObject **p0;

              if (!parseArgs(args, "K", ::java::lang::Iterable::initializeClass, &a0, &p0, ::java::lang::t_Iterable::parameters_))
              {
                OBJ_CALL(::org::apache::lucene::util::IOUtils::closeWhileHandlingException(a0));
                Py_RETURN_NONE;
              }
            }
          }

          PyErr_SetArgsError(type, "closeWhileHandlingException", args);
          return NULL;
        }

        static PyObject *t_IOUtils_deleteFiles(PyTypeObject *type, PyObject *args)
        {
          ::org::apache::lucene::store::Directory a0((jobject) NULL);
          ::java::util::Collection a1((jobject) NULL);
          PyTypeObject **p1;

          if (!parseArgs(args, "kK", ::org::apache::lucene::store::Directory::initializeClass, ::java::util::Collection::initializeClass, &a0, &a1, &p1, ::java::util::t_Collection::parameters_))
          {
            OBJ_CALL(::org::apache::lucene::util::IOUtils::deleteFiles(a0, a1));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError(type, "deleteFiles", args);
          return NULL;
        }

        static PyObject *t_IOUtils_deleteFilesIfExist(PyTypeObject *type, PyObject *args)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 1:
            {
              JArray< ::java::nio::file::Path > a0((jobject) NULL);

              if (!parseArgs(args, "[k", ::java::nio::file::Path::initializeClass, &a0))
              {
                OBJ_CALL(::org::apache::lucene::util::IOUtils::deleteFilesIfExist(a0));
                Py_RETURN_NONE;
              }
            }
            {
              ::java::util::Collection a0((jobject) NULL);
              PyTypeObject **p0;

              if (!parseArgs(args, "K", ::java::util::Collection::initializeClass, &a0, &p0, ::java::util::t_Collection::parameters_))
              {
                OBJ_CALL(::org::apache::lucene::util::IOUtils::deleteFilesIfExist(a0));
                Py_RETURN_NONE;
              }
            }
          }

          PyErr_SetArgsError(type, "deleteFilesIfExist", args);
          return NULL;
        }

        static PyObject *t_IOUtils_deleteFilesIgnoringExceptions(PyTypeObject *type, PyObject *args)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 1:
            {
              JArray< ::java::nio::file::Path > a0((jobject) NULL);

              if (!parseArgs(args, "[k", ::java::nio::file::Path::initializeClass, &a0))
              {
                OBJ_CALL(::org::apache::lucene::util::IOUtils::deleteFilesIgnoringExceptions(a0));
                Py_RETURN_NONE;
              }
            }
            {
              ::java::util::Collection a0((jobject) NULL);
              PyTypeObject **p0;

              if (!parseArgs(args, "K", ::java::util::Collection::initializeClass, &a0, &p0, ::java::util::t_Collection::parameters_))
              {
                OBJ_CALL(::org::apache::lucene::util::IOUtils::deleteFilesIgnoringExceptions(a0));
                Py_RETURN_NONE;
              }
            }
            break;
           case 2:
            {
              ::org::apache::lucene::store::Directory a0((jobject) NULL);
              JArray< ::java::lang::String > a1((jobject) NULL);

              if (!parseArgs(args, "k[s", ::org::apache::lucene::store::Directory::initializeClass, &a0, &a1))
              {
                OBJ_CALL(::org::apache::lucene::util::IOUtils::deleteFilesIgnoringExceptions(a0, a1));
                Py_RETURN_NONE;
              }
            }
            {
              ::org::apache::lucene::store::Directory a0((jobject) NULL);
              ::java::util::Collection a1((jobject) NULL);
              PyTypeObject **p1;

              if (!parseArgs(args, "kK", ::org::apache::lucene::store::Directory::initializeClass, ::java::util::Collection::initializeClass, &a0, &a1, &p1, ::java::util::t_Collection::parameters_))
              {
                OBJ_CALL(::org::apache::lucene::util::IOUtils::deleteFilesIgnoringExceptions(a0, a1));
                Py_RETURN_NONE;
              }
            }
          }

          PyErr_SetArgsError(type, "deleteFilesIgnoringExceptions", args);
          return NULL;
        }

        static PyObject *t_IOUtils_fsync(PyTypeObject *type, PyObject *args)
        {
          ::java::nio::file::Path a0((jobject) NULL);
          jboolean a1;

          if (!parseArgs(args, "kZ", ::java::nio::file::Path::initializeClass, &a0, &a1))
          {
            OBJ_CALL(::org::apache::lucene::util::IOUtils::fsync(a0, a1));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError(type, "fsync", args);
          return NULL;
        }

        static PyObject *t_IOUtils_reThrow(PyTypeObject *type, PyObject *arg)
        {
          ::java::lang::Throwable a0((jobject) NULL);

          if (!parseArg(arg, "k", ::java::lang::Throwable::initializeClass, &a0))
          {
            OBJ_CALL(::org::apache::lucene::util::IOUtils::reThrow(a0));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError(type, "reThrow", arg);
          return NULL;
        }

        static PyObject *t_IOUtils_reThrowUnchecked(PyTypeObject *type, PyObject *arg)
        {
          ::java::lang::Throwable a0((jobject) NULL);

          if (!parseArg(arg, "k", ::java::lang::Throwable::initializeClass, &a0))
          {
            OBJ_CALL(::org::apache::lucene::util::IOUtils::reThrowUnchecked(a0));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError(type, "reThrowUnchecked", arg);
          return NULL;
        }

        static PyObject *t_IOUtils_rethrowAlways(PyTypeObject *type, PyObject *arg)
        {
          ::java::lang::Throwable a0((jobject) NULL);
          ::java::lang::Error result((jobject) NULL);

          if (!parseArg(arg, "k", ::java::lang::Throwable::initializeClass, &a0))
          {
            OBJ_CALL(result = ::org::apache::lucene::util::IOUtils::rethrowAlways(a0));
            return ::java::lang::t_Error::wrap_Object(result);
          }

          PyErr_SetArgsError(type, "rethrowAlways", arg);
          return NULL;
        }

        static PyObject *t_IOUtils_rm(PyTypeObject *type, PyObject *arg)
        {
          JArray< ::java::nio::file::Path > a0((jobject) NULL);

          if (!parseArg(arg, "[k", ::java::nio::file::Path::initializeClass, &a0))
          {
            OBJ_CALL(::org::apache::lucene::util::IOUtils::rm(a0));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError(type, "rm", arg);
          return NULL;
        }

        static PyObject *t_IOUtils_spins(PyTypeObject *type, PyObject *args)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 1:
            {
              ::org::apache::lucene::store::Directory a0((jobject) NULL);
              jboolean result;

              if (!parseArgs(args, "k", ::org::apache::lucene::store::Directory::initializeClass, &a0))
              {
                OBJ_CALL(result = ::org::apache::lucene::util::IOUtils::spins(a0));
                Py_RETURN_BOOL(result);
              }
            }
            {
              ::java::nio::file::Path a0((jobject) NULL);
              jboolean result;

              if (!parseArgs(args, "k", ::java::nio::file::Path::initializeClass, &a0))
              {
                OBJ_CALL(result = ::org::apache::lucene::util::IOUtils::spins(a0));
                Py_RETURN_BOOL(result);
              }
            }
          }

          PyErr_SetArgsError(type, "spins", args);
          return NULL;
        }

        static PyObject *t_IOUtils_useOrSuppress(PyTypeObject *type, PyObject *args)
        {
          ::java::lang::Throwable a0((jobject) NULL);
          ::java::lang::Throwable a1((jobject) NULL);
          ::java::lang::Throwable result((jobject) NULL);

          if (!parseArgs(args, "kk", ::java::lang::Throwable::initializeClass, ::java::lang::Throwable::initializeClass, &a0, &a1))
          {
            OBJ_CALL(result = ::org::apache::lucene::util::IOUtils::useOrSuppress(a0, a1));
            return ::java::lang::t_Throwable::wrap_Object(result);
          }

          PyErr_SetArgsError(type, "useOrSuppress", args);
          return NULL;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queryparser/flexible/core/nodes/FieldValuePairQueryNode.h"
#include "org/apache/lucene/queryparser/flexible/core/nodes/ValueQueryNode.h"
#include "java/lang/Object.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace core {
            namespace nodes {

              ::java::lang::Class *FieldValuePairQueryNode::class$ = NULL;
              jmethodID *FieldValuePairQueryNode::mids$ = NULL;
              bool FieldValuePairQueryNode::live$ = false;

              jclass FieldValuePairQueryNode::initializeClass(bool getOnly)
              {
                if (getOnly)
                  return (jclass) (live$ ? class$->this$ : NULL);
                if (class$ == NULL)
                {
                  jclass cls = (jclass) env->findClass("org/apache/lucene/queryparser/flexible/core/nodes/FieldValuePairQueryNode");

                  class$ = new ::java::lang::Class(cls);
                  live$ = true;
                }
                return (jclass) class$->this$;
              }
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace core {
            namespace nodes {
              static PyObject *t_FieldValuePairQueryNode_cast_(PyTypeObject *type, PyObject *arg);
              static PyObject *t_FieldValuePairQueryNode_instance_(PyTypeObject *type, PyObject *arg);
              static PyObject *t_FieldValuePairQueryNode_of_(t_FieldValuePairQueryNode *self, PyObject *args);
              static PyObject *t_FieldValuePairQueryNode_get__parameters_(t_FieldValuePairQueryNode *self, void *data);
              static PyGetSetDef t_FieldValuePairQueryNode__fields_[] = {
                DECLARE_GET_FIELD(t_FieldValuePairQueryNode, parameters_),
                { NULL, NULL, NULL, NULL, NULL }
              };

              static PyMethodDef t_FieldValuePairQueryNode__methods_[] = {
                DECLARE_METHOD(t_FieldValuePairQueryNode, cast_, METH_O | METH_CLASS),
                DECLARE_METHOD(t_FieldValuePairQueryNode, instance_, METH_O | METH_CLASS),
                DECLARE_METHOD(t_FieldValuePairQueryNode, of_, METH_VARARGS),
                { NULL, NULL, 0, NULL }
              };

              static PyType_Slot PY_TYPE_SLOTS(FieldValuePairQueryNode)[] = {
                { Py_tp_methods, t_FieldValuePairQueryNode__methods_ },
                { Py_tp_init, (void *) abstract_init },
                { Py_tp_getset, t_FieldValuePairQueryNode__fields_ },
                { 0, NULL }
              };

              static PyType_Def *PY_TYPE_BASES(FieldValuePairQueryNode)[] = {
                &PY_TYPE_DEF(::org::apache::lucene::queryparser::flexible::core::nodes::FieldableNode),
                NULL
              };

              DEFINE_TYPE(FieldValuePairQueryNode, t_FieldValuePairQueryNode, FieldValuePairQueryNode);
              PyObject *t_FieldValuePairQueryNode::wrap_Object(const FieldValuePairQueryNode& object, PyTypeObject *p0)
              {
                PyObject *obj = t_FieldValuePairQueryNode::wrap_Object(object);
                if (obj != NULL && obj != Py_None)
                {
                  t_FieldValuePairQueryNode *self = (t_FieldValuePairQueryNode *) obj;
                  self->parameters[0] = p0;
                }
                return obj;
              }

              PyObject *t_FieldValuePairQueryNode::wrap_jobject(const jobject& object, PyTypeObject *p0)
              {
                PyObject *obj = t_FieldValuePairQueryNode::wrap_jobject(object);
                if (obj != NULL && obj != Py_None)
                {
                  t_FieldValuePairQueryNode *self = (t_FieldValuePairQueryNode *) obj;
                  self->parameters[0] = p0;
                }
                return obj;
              }

              void t_FieldValuePairQueryNode::install(PyObject *module)
              {
                installType(&PY_TYPE(FieldValuePairQueryNode), &PY_TYPE_DEF(FieldValuePairQueryNode), module, "FieldValuePairQueryNode", 0);
              }

              void t_FieldValuePairQueryNode::initialize(PyObject *module)
              {
                PyObject_SetAttrString((PyObject *) PY_TYPE(FieldValuePairQueryNode), "class_", make_descriptor(FieldValuePairQueryNode::initializeClass, 1));
                PyObject_SetAttrString((PyObject *) PY_TYPE(FieldValuePairQueryNode), "wrapfn_", make_descriptor(t_FieldValuePairQueryNode::wrap_jobject));
                PyObject_SetAttrString((PyObject *) PY_TYPE(FieldValuePairQueryNode), "boxfn_", make_descriptor(boxObject));
              }

              static PyObject *t_FieldValuePairQueryNode_cast_(PyTypeObject *type, PyObject *arg)
              {
                if (!(arg = castCheck(arg, FieldValuePairQueryNode::initializeClass, 1)))
                  return NULL;
                return t_FieldValuePairQueryNode::wrap_Object(FieldValuePairQueryNode(((t_FieldValuePairQueryNode *) arg)->object.this$));
              }
              static PyObject *t_FieldValuePairQueryNode_instance_(PyTypeObject *type, PyObject *arg)
              {
                if (!castCheck(arg, FieldValuePairQueryNode::initializeClass, 0))
                  Py_RETURN_FALSE;
                Py_RETURN_TRUE;
              }

              static PyObject *t_FieldValuePairQueryNode_of_(t_FieldValuePairQueryNode *self, PyObject *args)
              {
                if (!parseArg(args, "T", 1, &(self->parameters)))
                  Py_RETURN_SELF;
                return PyErr_SetArgsError((PyObject *) self, "of_", args);
              }
              static PyObject *t_FieldValuePairQueryNode_get__parameters_(t_FieldValuePairQueryNode *self, void *data)
              {
                return typeParameters(self->parameters, sizeof(self->parameters));
              }
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/document/SortedNumericDocValuesField.h"
#include "java/lang/String.h"
#include "org/apache/lucene/search/Query.h"
#include "org/apache/lucene/document/FieldType.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace document {

        ::java::lang::Class *SortedNumericDocValuesField::class$ = NULL;
        jmethodID *SortedNumericDocValuesField::mids$ = NULL;
        bool SortedNumericDocValuesField::live$ = false;
        ::org::apache::lucene::document::FieldType *SortedNumericDocValuesField::TYPE = NULL;

        jclass SortedNumericDocValuesField::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/document/SortedNumericDocValuesField");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_0084e2c6585d8c01] = env->getMethodID(cls, "<init>", "(Ljava/lang/String;J)V");
            mids$[mid_newSlowExactQuery_e80322a2f14dee9e] = env->getStaticMethodID(cls, "newSlowExactQuery", "(Ljava/lang/String;J)Lorg/apache/lucene/search/Query;");
            mids$[mid_newSlowRangeQuery_fea81632216932e2] = env->getStaticMethodID(cls, "newSlowRangeQuery", "(Ljava/lang/String;JJ)Lorg/apache/lucene/search/Query;");

            class$ = new ::java::lang::Class(cls);
            cls = (jclass) class$->this$;

            TYPE = new ::org::apache::lucene::document::FieldType(env->getStaticObjectField(cls, "TYPE", "Lorg/apache/lucene/document/FieldType;"));
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        SortedNumericDocValuesField::SortedNumericDocValuesField(const ::java::lang::String & a0, jlong a1) : ::org::apache::lucene::document::Field(env->newObject(initializeClass, &mids$, mid_init$_0084e2c6585d8c01, a0.this$, a1)) {}

        ::org::apache::lucene::search::Query SortedNumericDocValuesField::newSlowExactQuery(const ::java::lang::String & a0, jlong a1)
        {
          jclass cls = env->getClass(initializeClass);
          return ::org::apache::lucene::search::Query(env->callStaticObjectMethod(cls, mids$[mid_newSlowExactQuery_e80322a2f14dee9e], a0.this$, a1));
        }

        ::org::apache::lucene::search::Query SortedNumericDocValuesField::newSlowRangeQuery(const ::java::lang::String & a0, jlong a1, jlong a2)
        {
          jclass cls = env->getClass(initializeClass);
          return ::org::apache::lucene::search::Query(env->callStaticObjectMethod(cls, mids$[mid_newSlowRangeQuery_fea81632216932e2], a0.this$, a1, a2));
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace document {
        static PyObject *t_SortedNumericDocValuesField_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_SortedNumericDocValuesField_instance_(PyTypeObject *type, PyObject *arg);
        static int t_SortedNumericDocValuesField_init_(t_SortedNumericDocValuesField *self, PyObject *args, PyObject *kwds);
        static PyObject *t_SortedNumericDocValuesField_newSlowExactQuery(PyTypeObject *type, PyObject *args);
        static PyObject *t_SortedNumericDocValuesField_newSlowRangeQuery(PyTypeObject *type, PyObject *args);

        static PyMethodDef t_SortedNumericDocValuesField__methods_[] = {
          DECLARE_METHOD(t_SortedNumericDocValuesField, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_SortedNumericDocValuesField, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_SortedNumericDocValuesField, newSlowExactQuery, METH_VARARGS | METH_CLASS),
          DECLARE_METHOD(t_SortedNumericDocValuesField, newSlowRangeQuery, METH_VARARGS | METH_CLASS),
          { NULL, NULL, 0, NULL }
        };

        static PyType_Slot PY_TYPE_SLOTS(SortedNumericDocValuesField)[] = {
          { Py_tp_methods, t_SortedNumericDocValuesField__methods_ },
          { Py_tp_init, (void *) t_SortedNumericDocValuesField_init_ },
          { 0, NULL }
        };

        static PyType_Def *PY_TYPE_BASES(SortedNumericDocValuesField)[] = {
          &PY_TYPE_DEF(::org::apache::lucene::document::Field),
          NULL
        };

        DEFINE_TYPE(SortedNumericDocValuesField, t_SortedNumericDocValuesField, SortedNumericDocValuesField);

        void t_SortedNumericDocValuesField::install(PyObject *module)
        {
          installType(&PY_TYPE(SortedNumericDocValuesField), &PY_TYPE_DEF(SortedNumericDocValuesField), module, "SortedNumericDocValuesField", 0);
        }

        void t_SortedNumericDocValuesField::initialize(PyObject *module)
        {
          PyObject_SetAttrString((PyObject *) PY_TYPE(SortedNumericDocValuesField), "class_", make_descriptor(SortedNumericDocValuesField::initializeClass, 1));
          PyObject_SetAttrString((PyObject *) PY_TYPE(SortedNumericDocValuesField), "wrapfn_", make_descriptor(t_SortedNumericDocValuesField::wrap_jobject));
          PyObject_SetAttrString((PyObject *) PY_TYPE(SortedNumericDocValuesField), "boxfn_", make_descriptor(boxObject));
          env->getClass(SortedNumericDocValuesField::initializeClass);
          PyObject_SetAttrString((PyObject *) PY_TYPE(SortedNumericDocValuesField), "TYPE", make_descriptor(::org::apache::lucene::document::t_FieldType::wrap_Object(*SortedNumericDocValuesField::TYPE)));
        }

        static PyObject *t_SortedNumericDocValuesField_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, SortedNumericDocValuesField::initializeClass, 1)))
            return NULL;
          return t_SortedNumericDocValuesField::wrap_Object(SortedNumericDocValuesField(((t_SortedNumericDocValuesField *) arg)->object.this$));
        }
        static PyObject *t_SortedNumericDocValuesField_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, SortedNumericDocValuesField::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_SortedNumericDocValuesField_init_(t_SortedNumericDocValuesField *self, PyObject *args, PyObject *kwds)
        {
          ::java::lang::String a0((jobject) NULL);
          jlong a1;
          SortedNumericDocValuesField object((jobject) NULL);

          if (!parseArgs(args, "sJ", &a0, &a1))
          {
            INT_CALL(object = SortedNumericDocValuesField(a0, a1));
            self->object = object;
          }
          else
          {
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }

        static PyObject *t_SortedNumericDocValuesField_newSlowExactQuery(PyTypeObject *type, PyObject *args)
        {
          ::java::lang::String a0((jobject) NULL);
          jlong a1;
          ::org::apache::lucene::search::Query result((jobject) NULL);

          if (!parseArgs(args, "sJ", &a0, &a1))
          {
            OBJ_CALL(result = ::org::apache::lucene::document::SortedNumericDocValuesField::newSlowExactQuery(a0, a1));
            return ::org::apache::lucene::search::t_Query::wrap_Object(result);
          }

          PyErr_SetArgsError(type, "newSlowExactQuery", args);
          return NULL;
        }

        static PyObject *t_SortedNumericDocValuesField_newSlowRangeQuery(PyTypeObject *type, PyObject *args)
        {
          ::java::lang::String a0((jobject) NULL);
          jlong a1;
          jlong a2;
          ::org::apache::lucene::search::Query result((jobject) NULL);

          if (!parseArgs(args, "sJJ", &a0, &a1, &a2))
          {
            OBJ_CALL(result = ::org::apache::lucene::document::SortedNumericDocValuesField::newSlowRangeQuery(a0, a1, a2));
            return ::org::apache::lucene::search::t_Query::wrap_Object(result);
          }

          PyErr_SetArgsError(type, "newSlowRangeQuery", args);
          return NULL;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/MemoryAccountingBitsetCollector.h"
#include "org/apache/lucene/misc/CollectorMemoryTracker.h"
#include "org/apache/lucene/search/ScoreMode.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {

        ::java::lang::Class *MemoryAccountingBitsetCollector::class$ = NULL;
        jmethodID *MemoryAccountingBitsetCollector::mids$ = NULL;
        bool MemoryAccountingBitsetCollector::live$ = false;

        jclass MemoryAccountingBitsetCollector::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/search/MemoryAccountingBitsetCollector");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_f902b8b44fc310e5] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/misc/CollectorMemoryTracker;)V");
            mids$[mid_collect_040c4cd0390c5aff] = env->getMethodID(cls, "collect", "(I)V");
            mids$[mid_scoreMode_8a35254b82ee8276] = env->getMethodID(cls, "scoreMode", "()Lorg/apache/lucene/search/ScoreMode;");
            mids$[mid_doSetNextReader_8747e0e89febf88d] = env->getMethodID(cls, "doSetNextReader", "(Lorg/apache/lucene/index/LeafReaderContext;)V");

            class$ = new ::java::lang::Class(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        MemoryAccountingBitsetCollector::MemoryAccountingBitsetCollector(const ::org::apache::lucene::misc::CollectorMemoryTracker & a0) : ::org::apache::lucene::search::SimpleCollector(env->newObject(initializeClass, &mids$, mid_init$_f902b8b44fc310e5, a0.this$)) {}

        void MemoryAccountingBitsetCollector::collect(jint a0) const
        {
          env->callVoidMethod(this$, mids$[mid_collect_040c4cd0390c5aff], a0);
        }

        ::org::apache::lucene::search::ScoreMode MemoryAccountingBitsetCollector::scoreMode() const
        {
          return ::org::apache::lucene::search::ScoreMode(env->callObjectMethod(this$, mids$[mid_scoreMode_8a35254b82ee8276]));
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        static PyObject *t_MemoryAccountingBitsetCollector_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_MemoryAccountingBitsetCollector_instance_(PyTypeObject *type, PyObject *arg);
        static int t_MemoryAccountingBitsetCollector_init_(t_MemoryAccountingBitsetCollector *self, PyObject *args, PyObject *kwds);
        static PyObject *t_MemoryAccountingBitsetCollector_collect(t_MemoryAccountingBitsetCollector *self, PyObject *args);
        static PyObject *t_MemoryAccountingBitsetCollector_scoreMode(t_MemoryAccountingBitsetCollector *self, PyObject *args);

        static PyMethodDef t_MemoryAccountingBitsetCollector__methods_[] = {
          DECLARE_METHOD(t_MemoryAccountingBitsetCollector, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_MemoryAccountingBitsetCollector, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_MemoryAccountingBitsetCollector, collect, METH_VARARGS),
          DECLARE_METHOD(t_MemoryAccountingBitsetCollector, scoreMode, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        static PyType_Slot PY_TYPE_SLOTS(MemoryAccountingBitsetCollector)[] = {
          { Py_tp_methods, t_MemoryAccountingBitsetCollector__methods_ },
          { Py_tp_init, (void *) t_MemoryAccountingBitsetCollector_init_ },
          { 0, NULL }
        };

        static PyType_Def *PY_TYPE_BASES(MemoryAccountingBitsetCollector)[] = {
          &PY_TYPE_DEF(::org::apache::lucene::search::SimpleCollector),
          NULL
        };

        DEFINE_TYPE(MemoryAccountingBitsetCollector, t_MemoryAccountingBitsetCollector, MemoryAccountingBitsetCollector);

        void t_MemoryAccountingBitsetCollector::install(PyObject *module)
        {
          installType(&PY_TYPE(MemoryAccountingBitsetCollector), &PY_TYPE_DEF(MemoryAccountingBitsetCollector), module, "MemoryAccountingBitsetCollector", 0);
        }

        void t_MemoryAccountingBitsetCollector::initialize(PyObject *module)
        {
          PyObject_SetAttrString((PyObject *) PY_TYPE(MemoryAccountingBitsetCollector), "class_", make_descriptor(MemoryAccountingBitsetCollector::initializeClass, 1));
          PyObject_SetAttrString((PyObject *) PY_TYPE(MemoryAccountingBitsetCollector), "wrapfn_", make_descriptor(t_MemoryAccountingBitsetCollector::wrap_jobject));
          PyObject_SetAttrString((PyObject *) PY_TYPE(MemoryAccountingBitsetCollector), "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_MemoryAccountingBitsetCollector_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, MemoryAccountingBitsetCollector::initializeClass, 1)))
            return NULL;
          return t_MemoryAccountingBitsetCollector::wrap_Object(MemoryAccountingBitsetCollector(((t_MemoryAccountingBitsetCollector *) arg)->object.this$));
        }
        static PyObject *t_MemoryAccountingBitsetCollector_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, MemoryAccountingBitsetCollector::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_MemoryAccountingBitsetCollector_init_(t_MemoryAccountingBitsetCollector *self, PyObject *args, PyObject *kwds)
        {
          ::org::apache::lucene::misc::CollectorMemoryTracker a0((jobject) NULL);
          MemoryAccountingBitsetCollector object((jobject) NULL);

          if (!parseArgs(args, "k", ::org::apache::lucene::misc::CollectorMemoryTracker::initializeClass, &a0))
          {
            INT_CALL(object = MemoryAccountingBitsetCollector(a0));
            self->object = object;
          }
          else
          {
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }

        static PyObject *t_MemoryAccountingBitsetCollector_collect(t_MemoryAccountingBitsetCollector *self, PyObject *args)
        {
          jint a0;

          if (!parseArgs(args, "I", &a0))
          {
            OBJ_CALL(self->object.collect(a0));
            Py_RETURN_NONE;
          }

          return callSuper(PY_TYPE(MemoryAccountingBitsetCollector), (PyObject *) self, "collect", args, 2);
        }

        static PyObject *t_MemoryAccountingBitsetCollector_scoreMode(t_MemoryAccountingBitsetCollector *self, PyObject *args)
        {
          ::org::apache::lucene::search::ScoreMode result((jobject) NULL);

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.scoreMode());
            return ::org::apache::lucene::search::t_ScoreMode::wrap_Object(result);
          }

          return callSuper(PY_TYPE(MemoryAccountingBitsetCollector), (PyObject *) self, "scoreMode", args, 2);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/miscellaneous/KeywordMarkerFilterFactory.h"
#include "java/util/Map.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/analysis/TokenStream.h"
#include "org/apache/lucene/analysis/util/ResourceLoader.h"
#include "java/lang/String.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/analysis/util/ResourceLoaderAware.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace miscellaneous {

          ::java::lang::Class *KeywordMarkerFilterFactory::class$ = NULL;
          jmethodID *KeywordMarkerFilterFactory::mids$ = NULL;
          bool KeywordMarkerFilterFactory::live$ = false;
          ::java::lang::String *KeywordMarkerFilterFactory::NAME = NULL;
          ::java::lang::String *KeywordMarkerFilterFactory::PATTERN = NULL;
          ::java::lang::String *KeywordMarkerFilterFactory::PROTECTED_TOKENS = NULL;

          jclass KeywordMarkerFilterFactory::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/miscellaneous/KeywordMarkerFilterFactory");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_408bd889ee3beae5] = env->getMethodID(cls, "<init>", "(Ljava/util/Map;)V");
              mids$[mid_create_6de1e28d9d10cd9e] = env->getMethodID(cls, "create", "(Lorg/apache/lucene/analysis/TokenStream;)Lorg/apache/lucene/analysis/TokenStream;");
              mids$[mid_inform_b4ee53c41a5f629f] = env->getMethodID(cls, "inform", "(Lorg/apache/lucene/analysis/util/ResourceLoader;)V");
              mids$[mid_isIgnoreCase_8454bd5aa23fd11e] = env->getMethodID(cls, "isIgnoreCase", "()Z");

              class$ = new ::java::lang::Class(cls);
              cls = (jclass) class$->this$;

              NAME = new ::java::lang::String(env->getStaticObjectField(cls, "NAME", "Ljava/lang/String;"));
              PATTERN = new ::java::lang::String(env->getStaticObjectField(cls, "PATTERN", "Ljava/lang/String;"));
              PROTECTED_TOKENS = new ::java::lang::String(env->getStaticObjectField(cls, "PROTECTED_TOKENS", "Ljava/lang/String;"));
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          KeywordMarkerFilterFactory::KeywordMarkerFilterFactory(const ::java::util::Map & a0) : ::org::apache::lucene::analysis::util::TokenFilterFactory(env->newObject(initializeClass, &mids$, mid_init$_408bd889ee3beae5, a0.this$)) {}

          ::org::apache::lucene::analysis::TokenStream KeywordMarkerFilterFactory::create(const ::org::apache::lucene::analysis::TokenStream & a0) const
          {
            return ::org::apache::lucene::analysis::TokenStream(env->callObjectMethod(this$, mids$[mid_create_6de1e28d9d10cd9e], a0.this$));
          }

          void KeywordMarkerFilterFactory::inform(const ::org::apache::lucene::analysis::util::ResourceLoader & a0) const
          {
            env->callVoidMethod(this$, mids$[mid_inform_b4ee53c41a5f629f], a0.this$);
          }

          jboolean KeywordMarkerFilterFactory::isIgnoreCase() const
          {
            return env->callBooleanMethod(this$, mids$[mid_isIgnoreCase_8454bd5aa23fd11e]);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace miscellaneous {
          static PyObject *t_KeywordMarkerFilterFactory_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_KeywordMarkerFilterFactory_instance_(PyTypeObject *type, PyObject *arg);
          static int t_KeywordMarkerFilterFactory_init_(t_KeywordMarkerFilterFactory *self, PyObject *args, PyObject *kwds);
          static PyObject *t_KeywordMarkerFilterFactory_create(t_KeywordMarkerFilterFactory *self, PyObject *args);
          static PyObject *t_KeywordMarkerFilterFactory_inform(t_KeywordMarkerFilterFactory *self, PyObject *arg);
          static PyObject *t_KeywordMarkerFilterFactory_isIgnoreCase(t_KeywordMarkerFilterFactory *self);
          static PyObject *t_KeywordMarkerFilterFactory_get__ignoreCase(t_KeywordMarkerFilterFactory *self, void *data);
          static PyGetSetDef t_KeywordMarkerFilterFactory__fields_[] = {
            DECLARE_GET_FIELD(t_KeywordMarkerFilterFactory, ignoreCase),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_KeywordMarkerFilterFactory__methods_[] = {
            DECLARE_METHOD(t_KeywordMarkerFilterFactory, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_KeywordMarkerFilterFactory, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_KeywordMarkerFilterFactory, create, METH_VARARGS),
            DECLARE_METHOD(t_KeywordMarkerFilterFactory, inform, METH_O),
            DECLARE_METHOD(t_KeywordMarkerFilterFactory, isIgnoreCase, METH_NOARGS),
            { NULL, NULL, 0, NULL }
          };

          static PyType_Slot PY_TYPE_SLOTS(KeywordMarkerFilterFactory)[] = {
            { Py_tp_methods, t_KeywordMarkerFilterFactory__methods_ },
            { Py_tp_init, (void *) t_KeywordMarkerFilterFactory_init_ },
            { Py_tp_getset, t_KeywordMarkerFilterFactory__fields_ },
            { 0, NULL }
          };

          static PyType_Def *PY_TYPE_BASES(KeywordMarkerFilterFactory)[] = {
            &PY_TYPE_DEF(::org::apache::lucene::analysis::util::TokenFilterFactory),
            NULL
          };

          DEFINE_TYPE(KeywordMarkerFilterFactory, t_KeywordMarkerFilterFactory, KeywordMarkerFilterFactory);

          void t_KeywordMarkerFilterFactory::install(PyObject *module)
          {
            installType(&PY_TYPE(KeywordMarkerFilterFactory), &PY_TYPE_DEF(KeywordMarkerFilterFactory), module, "KeywordMarkerFilterFactory", 0);
          }

          void t_KeywordMarkerFilterFactory::initialize(PyObject *module)
          {
            PyObject_SetAttrString((PyObject *) PY_TYPE(KeywordMarkerFilterFactory), "class_", make_descriptor(KeywordMarkerFilterFactory::initializeClass, 1));
            PyObject_SetAttrString((PyObject *) PY_TYPE(KeywordMarkerFilterFactory), "wrapfn_", make_descriptor(t_KeywordMarkerFilterFactory::wrap_jobject));
            PyObject_SetAttrString((PyObject *) PY_TYPE(KeywordMarkerFilterFactory), "boxfn_", make_descriptor(boxObject));
            env->getClass(KeywordMarkerFilterFactory::initializeClass);
            PyObject_SetAttrString((PyObject *) PY_TYPE(KeywordMarkerFilterFactory), "NAME", make_descriptor(j2p(*KeywordMarkerFilterFactory::NAME)));
            PyObject_SetAttrString((PyObject *) PY_TYPE(KeywordMarkerFilterFactory), "PATTERN", make_descriptor(j2p(*KeywordMarkerFilterFactory::PATTERN)));
            PyObject_SetAttrString((PyObject *) PY_TYPE(KeywordMarkerFilterFactory), "PROTECTED_TOKENS", make_descriptor(j2p(*KeywordMarkerFilterFactory::PROTECTED_TOKENS)));
          }

          static PyObject *t_KeywordMarkerFilterFactory_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, KeywordMarkerFilterFactory::initializeClass, 1)))
              return NULL;
            return t_KeywordMarkerFilterFactory::wrap_Object(KeywordMarkerFilterFactory(((t_KeywordMarkerFilterFactory *) arg)->object.this$));
          }
          static PyObject *t_KeywordMarkerFilterFactory_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, KeywordMarkerFilterFactory::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_KeywordMarkerFilterFactory_init_(t_KeywordMarkerFilterFactory *self, PyObject *args, PyObject *kwds)
          {
            ::java::util::Map a0((jobject) NULL);
            PyTypeObject **p0;
            KeywordMarkerFilterFactory object((jobject) NULL);

            if (!parseArgs(args, "K", ::java::util::Map::initializeClass, &a0, &p0, ::java::util::t_Map::parameters_))
            {
              INT_CALL(object = KeywordMarkerFilterFactory(a0));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_KeywordMarkerFilterFactory_create(t_KeywordMarkerFilterFactory *self, PyObject *args)
          {
            ::org::apache::lucene::analysis::TokenStream a0((jobject) NULL);
            ::org::apache::lucene::analysis::TokenStream result((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::analysis::TokenStream::initializeClass, &a0))
            {
              OBJ_CALL(result = self->object.create(a0));
              return ::org::apache::lucene::analysis::t_TokenStream::wrap_Object(result);
            }

            return callSuper(PY_TYPE(KeywordMarkerFilterFactory), (PyObject *) self, "create", args, 2);
          }

          static PyObject *t_KeywordMarkerFilterFactory_inform(t_KeywordMarkerFilterFactory *self, PyObject *arg)
          {
            ::org::apache::lucene::analysis::util::ResourceLoader a0((jobject) NULL);

            if (!parseArg(arg, "k", ::org::apache::lucene::analysis::util::ResourceLoader::initializeClass, &a0))
            {
              OBJ_CALL(self->object.inform(a0));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError((PyObject *) self, "inform", arg);
            return NULL;
          }

          static PyObject *t_KeywordMarkerFilterFactory_isIgnoreCase(t_KeywordMarkerFilterFactory *self)
          {
            jboolean result;
            OBJ_CALL(result = self->object.isIgnoreCase());
            Py_RETURN_BOOL(result);
          }

          static PyObject *t_KeywordMarkerFilterFactory_get__ignoreCase(t_KeywordMarkerFilterFactory *self, void *data)
          {
            jboolean value;
            OBJ_CALL(value = self->object.isIgnoreCase());
            Py_RETURN_BOOL(value);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/grouping/DistinctValuesCollector.h"
#include "java/util/Collection.h"
#include "org/apache/lucene/search/grouping/GroupSelector.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/search/grouping/SearchGroup.h"
#include "org/apache/lucene/search/grouping/DistinctValuesCollector$GroupCount.h"
#include "java/util/List.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace grouping {

          ::java::lang::Class *DistinctValuesCollector::class$ = NULL;
          jmethodID *DistinctValuesCollector::mids$ = NULL;
          bool DistinctValuesCollector::live$ = false;

          jclass DistinctValuesCollector::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/search/grouping/DistinctValuesCollector");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_f2e4dcf0f4c38f04] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/search/grouping/GroupSelector;Ljava/util/Collection;Lorg/apache/lucene/search/grouping/GroupSelector;)V");
              mids$[mid_getGroups_49ec78390f08338a] = env->getMethodID(cls, "getGroups", "()Ljava/util/List;");

              class$ = new ::java::lang::Class(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          DistinctValuesCollector::DistinctValuesCollector(const ::org::apache::lucene::search::grouping::GroupSelector & a0, const ::java::util::Collection & a1, const ::org::apache::lucene::search::grouping::GroupSelector & a2) : ::org::apache::lucene::search::grouping::SecondPassGroupingCollector(env->newObject(initializeClass, &mids$, mid_init$_f2e4dcf0f4c38f04, a0.this$, a1.this$, a2.this$)) {}

          ::java::util::List DistinctValuesCollector::getGroups() const
          {
            return ::java::util::List(env->callObjectMethod(this$, mids$[mid_getGroups_49ec78390f08338a]));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace grouping {
          static PyObject *t_DistinctValuesCollector_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_DistinctValuesCollector_instance_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_DistinctValuesCollector_of_(t_DistinctValuesCollector *self, PyObject *args);
          static int t_DistinctValuesCollector_init_(t_DistinctValuesCollector *self, PyObject *args, PyObject *kwds);
          static PyObject *t_DistinctValuesCollector_getGroups(t_DistinctValuesCollector *self);
          static PyObject *t_DistinctValuesCollector_get__groups(t_DistinctValuesCollector *self, void *data);
          static PyObject *t_DistinctValuesCollector_get__parameters_(t_DistinctValuesCollector *self, void *data);
          static PyGetSetDef t_DistinctValuesCollector__fields_[] = {
            DECLARE_GET_FIELD(t_DistinctValuesCollector, groups),
            DECLARE_GET_FIELD(t_DistinctValuesCollector, parameters_),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_DistinctValuesCollector__methods_[] = {
            DECLARE_METHOD(t_DistinctValuesCollector, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_DistinctValuesCollector, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_DistinctValuesCollector, of_, METH_VARARGS),
            DECLARE_METHOD(t_DistinctValuesCollector, getGroups, METH_NOARGS),
            { NULL, NULL, 0, NULL }
          };

          static PyType_Slot PY_TYPE_SLOTS(DistinctValuesCollector)[] = {
            { Py_tp_methods, t_DistinctValuesCollector__methods_ },
            { Py_tp_init, (void *) t_DistinctValuesCollector_init_ },
            { Py_tp_getset, t_DistinctValuesCollector__fields_ },
            { 0, NULL }
          };

          static PyType_Def *PY_TYPE_BASES(DistinctValuesCollector)[] = {
            &PY_TYPE_DEF(::org::apache::lucene::search::grouping::SecondPassGroupingCollector),
            NULL
          };

          DEFINE_TYPE(DistinctValuesCollector, t_DistinctValuesCollector, DistinctValuesCollector);
          PyObject *t_DistinctValuesCollector::wrap_Object(const DistinctValuesCollector& object, PyTypeObject *p0, PyTypeObject *p1)
          {
            PyObject *obj = t_DistinctValuesCollector::wrap_Object(object);
            if (obj != NULL && obj != Py_None)
            {
              t_DistinctValuesCollector *self = (t_DistinctValuesCollector *) obj;
              self->parameters[0] = p0;
              self->parameters[1] = p1;
            }
            return obj;
          }

          PyObject *t_DistinctValuesCollector::wrap_jobject(const jobject& object, PyTypeObject *p0, PyTypeObject *p1)
          {
            PyObject *obj = t_DistinctValuesCollector::wrap_jobject(object);
            if (obj != NULL && obj != Py_None)
            {
              t_DistinctValuesCollector *self = (t_DistinctValuesCollector *) obj;
              self->parameters[0] = p0;
              self->parameters[1] = p1;
            }
            return obj;
          }

          void t_DistinctValuesCollector::install(PyObject *module)
          {
            installType(&PY_TYPE(DistinctValuesCollector), &PY_TYPE_DEF(DistinctValuesCollector), module, "DistinctValuesCollector", 0);
            PyObject_SetAttrString((PyObject *) PY_TYPE(DistinctValuesCollector), "GroupCount", make_descriptor(&PY_TYPE_DEF(DistinctValuesCollector$GroupCount)));
          }

          void t_DistinctValuesCollector::initialize(PyObject *module)
          {
            PyObject_SetAttrString((PyObject *) PY_TYPE(DistinctValuesCollector), "class_", make_descriptor(DistinctValuesCollector::initializeClass, 1));
            PyObject_SetAttrString((PyObject *) PY_TYPE(DistinctValuesCollector), "wrapfn_", make_descriptor(t_DistinctValuesCollector::wrap_jobject));
            PyObject_SetAttrString((PyObject *) PY_TYPE(DistinctValuesCollector), "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_DistinctValuesCollector_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, DistinctValuesCollector::initializeClass, 1)))
              return NULL;
            return t_DistinctValuesCollector::wrap_Object(DistinctValuesCollector(((t_DistinctValuesCollector *) arg)->object.this$));
          }
          static PyObject *t_DistinctValuesCollector_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, DistinctValuesCollector::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static PyObject *t_DistinctValuesCollector_of_(t_DistinctValuesCollector *self, PyObject *args)
          {
            if (!parseArg(args, "T", 2, &(self->parameters)))
              Py_RETURN_SELF;
            return PyErr_SetArgsError((PyObject *) self, "of_", args);
          }

          static int t_DistinctValuesCollector_init_(t_DistinctValuesCollector *self, PyObject *args, PyObject *kwds)
          {
            ::org::apache::lucene::search::grouping::GroupSelector a0((jobject) NULL);
            PyTypeObject **p0;
            ::java::util::Collection a1((jobject) NULL);
            PyTypeObject **p1;
            ::org::apache::lucene::search::grouping::GroupSelector a2((jobject) NULL);
            PyTypeObject **p2;
            DistinctValuesCollector object((jobject) NULL);

            if (!parseArgs(args, "KKK", ::org::apache::lucene::search::grouping::GroupSelector::initializeClass, ::java::util::Collection::initializeClass, ::org::apache::lucene::search::grouping::GroupSelector::initializeClass, &a0, &p0, ::org::apache::lucene::search::grouping::t_GroupSelector::parameters_, &a1, &p1, ::java::util::t_Collection::parameters_, &a2, &p2, ::org::apache::lucene::search::grouping::t_GroupSelector::parameters_))
            {
              INT_CALL(object = DistinctValuesCollector(a0, a1, a2));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_DistinctValuesCollector_getGroups(t_DistinctValuesCollector *self)
          {
            ::java::util::List result((jobject) NULL);
            OBJ_CALL(result = self->object.getGroups());
            return ::java::util::t_List::wrap_Object(result);
          }
          static PyObject *t_DistinctValuesCollector_get__parameters_(t_DistinctValuesCollector *self, void *data)
          {
            return typeParameters(self->parameters, sizeof(self->parameters));
          }

          static PyObject *t_DistinctValuesCollector_get__groups(t_DistinctValuesCollector *self, void *data)
          {
            ::java::util::List value((jobject) NULL);
            OBJ_CALL(value = self->object.getGroups());
            return ::java::util::t_List::wrap_Object(value);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/index/IndexSorter$LongSorter.h"
#include "java/lang/Long.h"
#include "java/util/List.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/index/LeafReader.h"
#include "org/apache/lucene/index/IndexSorter.h"
#include "org/apache/lucene/index/IndexSorter$ComparableProvider.h"
#include "java/lang/String.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/index/IndexSorter$NumericDocValuesProvider.h"
#include "org/apache/lucene/index/IndexSorter$DocComparator.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {

        ::java::lang::Class *IndexSorter$LongSorter::class$ = NULL;
        jmethodID *IndexSorter$LongSorter::mids$ = NULL;
        bool IndexSorter$LongSorter::live$ = false;

        jclass IndexSorter$LongSorter::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/index/IndexSorter$LongSorter");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_14aabb5e3b9bf087] = env->getMethodID(cls, "<init>", "(Ljava/lang/String;Ljava/lang/Long;ZLorg/apache/lucene/index/IndexSorter$NumericDocValuesProvider;)V");
            mids$[mid_getComparableProviders_739976833795f559] = env->getMethodID(cls, "getComparableProviders", "(Ljava/util/List;)[Lorg/apache/lucene/index/IndexSorter$ComparableProvider;");
            mids$[mid_getDocComparator_8d0e93a4e9ab83f9] = env->getMethodID(cls, "getDocComparator", "(Lorg/apache/lucene/index/LeafReader;I)Lorg/apache/lucene/index/IndexSorter$DocComparator;");
            mids$[mid_getProviderName_db9b55ba01e03e4b] = env->getMethodID(cls, "getProviderName", "()Ljava/lang/String;");

            class$ = new ::java::lang::Class(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        IndexSorter$LongSorter::IndexSorter$LongSorter(const ::java::lang::String & a0, const ::java::lang::Long & a1, jboolean a2, const ::org::apache::lucene::index::IndexSorter$NumericDocValuesProvider & a3) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_14aabb5e3b9bf087, a0.this$, a1.this$, a2, a3.this$)) {}

        JArray< ::org::apache::lucene::index::IndexSorter$ComparableProvider > IndexSorter$LongSorter::getComparableProviders(const ::java::util::List & a0) const
        {
          return JArray< ::org::apache::lucene::index::IndexSorter$ComparableProvider >(env->callObjectMethod(this$, mids$[mid_getComparableProviders_739976833795f559], a0.this$));
        }

        ::org::apache::lucene::index::IndexSorter$DocComparator IndexSorter$LongSorter::getDocComparator(const ::org::apache::lucene::index::LeafReader & a0, jint a1) const
        {
          return ::org::apache::lucene::index::IndexSorter$DocComparator(env->callObjectMethod(this$, mids$[mid_getDocComparator_8d0e93a4e9ab83f9], a0.this$, a1));
        }

        ::java::lang::String IndexSorter$LongSorter::getProviderName() const
        {
          return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_getProviderName_db9b55ba01e03e4b]));
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {
        static PyObject *t_IndexSorter$LongSorter_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_IndexSorter$LongSorter_instance_(PyTypeObject *type, PyObject *arg);
        static int t_IndexSorter$LongSorter_init_(t_IndexSorter$LongSorter *self, PyObject *args, PyObject *kwds);
        static PyObject *t_IndexSorter$LongSorter_getComparableProviders(t_IndexSorter$LongSorter *self, PyObject *arg);
        static PyObject *t_IndexSorter$LongSorter_getDocComparator(t_IndexSorter$LongSorter *self, PyObject *args);
        static PyObject *t_IndexSorter$LongSorter_getProviderName(t_IndexSorter$LongSorter *self);
        static PyObject *t_IndexSorter$LongSorter_get__providerName(t_IndexSorter$LongSorter *self, void *data);
        static PyGetSetDef t_IndexSorter$LongSorter__fields_[] = {
          DECLARE_GET_FIELD(t_IndexSorter$LongSorter, providerName),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_IndexSorter$LongSorter__methods_[] = {
          DECLARE_METHOD(t_IndexSorter$LongSorter, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_IndexSorter$LongSorter, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_IndexSorter$LongSorter, getComparableProviders, METH_O),
          DECLARE_METHOD(t_IndexSorter$LongSorter, getDocComparator, METH_VARARGS),
          DECLARE_METHOD(t_IndexSorter$LongSorter, getProviderName, METH_NOARGS),
          { NULL, NULL, 0, NULL }
        };

        static PyType_Slot PY_TYPE_SLOTS(IndexSorter$LongSorter)[] = {
          { Py_tp_methods, t_IndexSorter$LongSorter__methods_ },
          { Py_tp_init, (void *) t_IndexSorter$LongSorter_init_ },
          { Py_tp_getset, t_IndexSorter$LongSorter__fields_ },
          { 0, NULL }
        };

        static PyType_Def *PY_TYPE_BASES(IndexSorter$LongSorter)[] = {
          &PY_TYPE_DEF(::java::lang::Object),
          NULL
        };

        DEFINE_TYPE(IndexSorter$LongSorter, t_IndexSorter$LongSorter, IndexSorter$LongSorter);

        void t_IndexSorter$LongSorter::install(PyObject *module)
        {
          installType(&PY_TYPE(IndexSorter$LongSorter), &PY_TYPE_DEF(IndexSorter$LongSorter), module, "IndexSorter$LongSorter", 0);
        }

        void t_IndexSorter$LongSorter::initialize(PyObject *module)
        {
          PyObject_SetAttrString((PyObject *) PY_TYPE(IndexSorter$LongSorter), "class_", make_descriptor(IndexSorter$LongSorter::initializeClass, 1));
          PyObject_SetAttrString((PyObject *) PY_TYPE(IndexSorter$LongSorter), "wrapfn_", make_descriptor(t_IndexSorter$LongSorter::wrap_jobject));
          PyObject_SetAttrString((PyObject *) PY_TYPE(IndexSorter$LongSorter), "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_IndexSorter$LongSorter_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, IndexSorter$LongSorter::initializeClass, 1)))
            return NULL;
          return t_IndexSorter$LongSorter::wrap_Object(IndexSorter$LongSorter(((t_IndexSorter$LongSorter *) arg)->object.this$));
        }
        static PyObject *t_IndexSorter$LongSorter_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, IndexSorter$LongSorter::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_IndexSorter$LongSorter_init_(t_IndexSorter$LongSorter *self, PyObject *args, PyObject *kwds)
        {
          ::java::lang::String a0((jobject) NULL);
          ::java::lang::Long a1((jobject) NULL);
          jboolean a2;
          ::org::apache::lucene::index::IndexSorter$NumericDocValuesProvider a3((jobject) NULL);
          IndexSorter$LongSorter object((jobject) NULL);

          if (!parseArgs(args, "sOZk", ::java::lang::PY_TYPE(Long), ::org::apache::lucene::index::IndexSorter$NumericDocValuesProvider::initializeClass, &a0, &a1, &a2, &a3))
          {
            INT_CALL(object = IndexSorter$LongSorter(a0, a1, a2, a3));
            self->object = object;
          }
          else
          {
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }

        static PyObject *t_IndexSorter$LongSorter_getComparableProviders(t_IndexSorter$LongSorter *self, PyObject *arg)
        {
          ::java::util::List a0((jobject) NULL);
          PyTypeObject **p0;
          JArray< ::org::apache::lucene::index::IndexSorter$ComparableProvider > result((jobject) NULL);

          if (!parseArg(arg, "K", ::java::util::List::initializeClass, &a0, &p0, ::java::util::t_List::parameters_))
          {
            OBJ_CALL(result = self->object.getComparableProviders(a0));
            return JArray<jobject>(result.this$).wrap(::org::apache::lucene::index::t_IndexSorter$ComparableProvider::wrap_jobject);
          }

          PyErr_SetArgsError((PyObject *) self, "getComparableProviders", arg);
          return NULL;
        }

        static PyObject *t_IndexSorter$LongSorter_getDocComparator(t_IndexSorter$LongSorter *self, PyObject *args)
        {
          ::org::apache::lucene::index::LeafReader a0((jobject) NULL);
          jint a1;
          ::org::apache::lucene::index::IndexSorter$DocComparator result((jobject) NULL);

          if (!parseArgs(args, "kI", ::org::apache::lucene::index::LeafReader::initializeClass, &a0, &a1))
          {
            OBJ_CALL(result = self->object.getDocComparator(a0, a1));
            return ::org::apache::lucene::index::t_IndexSorter$DocComparator::wrap_Object(result);
          }

          PyErr_SetArgsError((PyObject *) self, "getDocComparator", args);
          return NULL;
        }

        static PyObject *t_IndexSorter$LongSorter_getProviderName(t_IndexSorter$LongSorter *self)
        {
          ::java::lang::String result((jobject) NULL);
          OBJ_CALL(result = self->object.getProviderName());
          return j2p(result);
        }

        static PyObject *t_IndexSorter$LongSorter_get__providerName(t_IndexSorter$LongSorter *self, void *data)
        {
          ::java::lang::String value((jobject) NULL);
          OBJ_CALL(value = self->object.getProviderName());
          return j2p(value);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/similarities/Normalization.h"
#include "org/apache/lucene/search/similarities/BasicStats.h"
#include "java/lang/String.h"
#include "org/apache/lucene/search/Explanation.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace similarities {

          ::java::lang::Class *Normalization::class$ = NULL;
          jmethodID *Normalization::mids$ = NULL;
          bool Normalization::live$ = false;

          jclass Normalization::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/search/similarities/Normalization");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_f2cc1bce94666404] = env->getMethodID(cls, "<init>", "()V");
              mids$[mid_explain_77a68ba236144920] = env->getMethodID(cls, "explain", "(Lorg/apache/lucene/search/similarities/BasicStats;DD)Lorg/apache/lucene/search/Explanation;");
              mids$[mid_tfn_761ab1c432346fd0] = env->getMethodID(cls, "tfn", "(Lorg/apache/lucene/search/similarities/BasicStats;DD)D");
              mids$[mid_toString_db9b55ba01e03e4b] = env->getMethodID(cls, "toString", "()Ljava/lang/String;");

              class$ = new ::java::lang::Class(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          Normalization::Normalization() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_f2cc1bce94666404)) {}

          ::org::apache::lucene::search::Explanation Normalization::explain(const ::org::apache::lucene::search::similarities::BasicStats & a0, jdouble a1, jdouble a2) const
          {
            return ::org::apache::lucene::search::Explanation(env->callObjectMethod(this$, mids$[mid_explain_77a68ba236144920], a0.this$, a1, a2));
          }

          jdouble Normalization::tfn(const ::org::apache::lucene::search::similarities::BasicStats & a0, jdouble a1, jdouble a2) const
          {
            return env->callDoubleMethod(this$, mids$[mid_tfn_761ab1c432346fd0], a0.this$, a1, a2);
          }

          ::java::lang::String Normalization::toString() const
          {
            return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_db9b55ba01e03e4b]));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"
#include "org/apache/lucene/search/similarities/Normalization$NoNormalization.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace similarities {
          static PyObject *t_Normalization_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_Normalization_instance_(PyTypeObject *type, PyObject *arg);
          static int t_Normalization_init_(t_Normalization *self, PyObject *args, PyObject *kwds);
          static PyObject *t_Normalization_explain(t_Normalization *self, PyObject *args);
          static PyObject *t_Normalization_tfn(t_Normalization *self, PyObject *args);
          static PyObject *t_Normalization_toString(t_Normalization *self, PyObject *args);

          static PyMethodDef t_Normalization__methods_[] = {
            DECLARE_METHOD(t_Normalization, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_Normalization, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_Normalization, explain, METH_VARARGS),
            DECLARE_METHOD(t_Normalization, tfn, METH_VARARGS),
            DECLARE_METHOD(t_Normalization, toString, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          static PyType_Slot PY_TYPE_SLOTS(Normalization)[] = {
            { Py_tp_methods, t_Normalization__methods_ },
            { Py_tp_init, (void *) t_Normalization_init_ },
            { 0, NULL }
          };

          static PyType_Def *PY_TYPE_BASES(Normalization)[] = {
            &PY_TYPE_DEF(::java::lang::Object),
            NULL
          };

          DEFINE_TYPE(Normalization, t_Normalization, Normalization);

          void t_Normalization::install(PyObject *module)
          {
            installType(&PY_TYPE(Normalization), &PY_TYPE_DEF(Normalization), module, "Normalization", 0);
            PyObject_SetAttrString((PyObject *) PY_TYPE(Normalization), "NoNormalization", make_descriptor(&PY_TYPE_DEF(Normalization$NoNormalization)));
          }

          void t_Normalization::initialize(PyObject *module)
          {
            PyObject_SetAttrString((PyObject *) PY_TYPE(Normalization), "class_", make_descriptor(Normalization::initializeClass, 1));
            PyObject_SetAttrString((PyObject *) PY_TYPE(Normalization), "wrapfn_", make_descriptor(t_Normalization::wrap_jobject));
            PyObject_SetAttrString((PyObject *) PY_TYPE(Normalization), "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_Normalization_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, Normalization::initializeClass, 1)))
              return NULL;
            return t_Normalization::wrap_Object(Normalization(((t_Normalization *) arg)->object.this$));
          }
          static PyObject *t_Normalization_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, Normalization::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_Normalization_init_(t_Normalization *self, PyObject *args, PyObject *kwds)
          {
            Normalization object((jobject) NULL);

            INT_CALL(object = Normalization());
            self->object = object;

            return 0;
          }

          static PyObject *t_Normalization_explain(t_Normalization *self, PyObject *args)
          {
            ::org::apache::lucene::search::similarities::BasicStats a0((jobject) NULL);
            jdouble a1;
            jdouble a2;
            ::org::apache::lucene::search::Explanation result((jobject) NULL);

            if (!parseArgs(args, "kDD", ::org::apache::lucene::search::similarities::BasicStats::initializeClass, &a0, &a1, &a2))
            {
              OBJ_CALL(result = self->object.explain(a0, a1, a2));
              return ::org::apache::lucene::search::t_Explanation::wrap_Object(result);
            }

            PyErr_SetArgsError((PyObject *) self, "explain", args);
            return NULL;
          }

          static PyObject *t_Normalization_tfn(t_Normalization *self, PyObject *args)
          {
            ::org::apache::lucene::search::similarities::BasicStats a0((jobject) NULL);
            jdouble a1;
            jdouble a2;
            jdouble result;

            if (!parseArgs(args, "kDD", ::org::apache::lucene::search::similarities::BasicStats::initializeClass, &a0, &a1, &a2))
            {
              OBJ_CALL(result = self->object.tfn(a0, a1, a2));
              return PyFloat_FromDouble((double) result);
            }

            PyErr_SetArgsError((PyObject *) self, "tfn", args);
            return NULL;
          }

          static PyObject *t_Normalization_toString(t_Normalization *self, PyObject *args)
          {
            ::java::lang::String result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.toString());
              return j2p(result);
            }

            return callSuper(PY_TYPE(Normalization), (PyObject *) self, "toString", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/miscellaneous/CodepointCountFilterFactory.h"
#include "java/util/Map.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/analysis/TokenStream.h"
#include "java/lang/String.h"
#include "org/apache/lucene/analysis/miscellaneous/CodepointCountFilter.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace miscellaneous {

          ::java::lang::Class *CodepointCountFilterFactory::class$ = NULL;
          jmethodID *CodepointCountFilterFactory::mids$ = NULL;
          bool CodepointCountFilterFactory::live$ = false;
          ::java::lang::String *CodepointCountFilterFactory::MAX_KEY = NULL;
          ::java::lang::String *CodepointCountFilterFactory::MIN_KEY = NULL;
          ::java::lang::String *CodepointCountFilterFactory::NAME = NULL;

          jclass CodepointCountFilterFactory::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/miscellaneous/CodepointCountFilterFactory");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_408bd889ee3beae5] = env->getMethodID(cls, "<init>", "(Ljava/util/Map;)V");
              mids$[mid_create_250f3ca6c24b7378] = env->getMethodID(cls, "create", "(Lorg/apache/lucene/analysis/TokenStream;)Lorg/apache/lucene/analysis/miscellaneous/CodepointCountFilter;");

              class$ = new ::java::lang::Class(cls);
              cls = (jclass) class$->this$;

              MAX_KEY = new ::java::lang::String(env->getStaticObjectField(cls, "MAX_KEY", "Ljava/lang/String;"));
              MIN_KEY = new ::java::lang::String(env->getStaticObjectField(cls, "MIN_KEY", "Ljava/lang/String;"));
              NAME = new ::java::lang::String(env->getStaticObjectField(cls, "NAME", "Ljava/lang/String;"));
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          CodepointCountFilterFactory::CodepointCountFilterFactory(const ::java::util::Map & a0) : ::org::apache::lucene::analysis::util::TokenFilterFactory(env->newObject(initializeClass, &mids$, mid_init$_408bd889ee3beae5, a0.this$)) {}

          ::org::apache::lucene::analysis::miscellaneous::CodepointCountFilter CodepointCountFilterFactory::create(const ::org::apache::lucene::analysis::TokenStream & a0) const
          {
            return ::org::apache::lucene::analysis::miscellaneous::CodepointCountFilter(env->callObjectMethod(this$, mids$[mid_create_250f3ca6c24b7378], a0.this$));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace miscellaneous {
          static PyObject *t_CodepointCountFilterFactory_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_CodepointCountFilterFactory_instance_(PyTypeObject *type, PyObject *arg);
          static int t_CodepointCountFilterFactory_init_(t_CodepointCountFilterFactory *self, PyObject *args, PyObject *kwds);
          static PyObject *t_CodepointCountFilterFactory_create(t_CodepointCountFilterFactory *self, PyObject *args);

          static PyMethodDef t_CodepointCountFilterFactory__methods_[] = {
            DECLARE_METHOD(t_CodepointCountFilterFactory, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_CodepointCountFilterFactory, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_CodepointCountFilterFactory, create, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          static PyType_Slot PY_TYPE_SLOTS(CodepointCountFilterFactory)[] = {
            { Py_tp_methods, t_CodepointCountFilterFactory__methods_ },
            { Py_tp_init, (void *) t_CodepointCountFilterFactory_init_ },
            { 0, NULL }
          };

          static PyType_Def *PY_TYPE_BASES(CodepointCountFilterFactory)[] = {
            &PY_TYPE_DEF(::org::apache::lucene::analysis::util::TokenFilterFactory),
            NULL
          };

          DEFINE_TYPE(CodepointCountFilterFactory, t_CodepointCountFilterFactory, CodepointCountFilterFactory);

          void t_CodepointCountFilterFactory::install(PyObject *module)
          {
            installType(&PY_TYPE(CodepointCountFilterFactory), &PY_TYPE_DEF(CodepointCountFilterFactory), module, "CodepointCountFilterFactory", 0);
          }

          void t_CodepointCountFilterFactory::initialize(PyObject *module)
          {
            PyObject_SetAttrString((PyObject *) PY_TYPE(CodepointCountFilterFactory), "class_", make_descriptor(CodepointCountFilterFactory::initializeClass, 1));
            PyObject_SetAttrString((PyObject *) PY_TYPE(CodepointCountFilterFactory), "wrapfn_", make_descriptor(t_CodepointCountFilterFactory::wrap_jobject));
            PyObject_SetAttrString((PyObject *) PY_TYPE(CodepointCountFilterFactory), "boxfn_", make_descriptor(boxObject));
            env->getClass(CodepointCountFilterFactory::initializeClass);
            PyObject_SetAttrString((PyObject *) PY_TYPE(CodepointCountFilterFactory), "MAX_KEY", make_descriptor(j2p(*CodepointCountFilterFactory::MAX_KEY)));
            PyObject_SetAttrString((PyObject *) PY_TYPE(CodepointCountFilterFactory), "MIN_KEY", make_descriptor(j2p(*CodepointCountFilterFactory::MIN_KEY)));
            PyObject_SetAttrString((PyObject *) PY_TYPE(CodepointCountFilterFactory), "NAME", make_descriptor(j2p(*CodepointCountFilterFactory::NAME)));
          }

          static PyObject *t_CodepointCountFilterFactory_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, CodepointCountFilterFactory::initializeClass, 1)))
              return NULL;
            return t_CodepointCountFilterFactory::wrap_Object(CodepointCountFilterFactory(((t_CodepointCountFilterFactory *) arg)->object.this$));
          }
          static PyObject *t_CodepointCountFilterFactory_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, CodepointCountFilterFactory::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_CodepointCountFilterFactory_init_(t_CodepointCountFilterFactory *self, PyObject *args, PyObject *kwds)
          {
            ::java::util::Map a0((jobject) NULL);
            PyTypeObject **p0;
            CodepointCountFilterFactory object((jobject) NULL);

            if (!parseArgs(args, "K", ::java::util::Map::initializeClass, &a0, &p0, ::java::util::t_Map::parameters_))
            {
              INT_CALL(object = CodepointCountFilterFactory(a0));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_CodepointCountFilterFactory_create(t_CodepointCountFilterFactory *self, PyObject *args)
          {
            ::org::apache::lucene::analysis::TokenStream a0((jobject) NULL);
            ::org::apache::lucene::analysis::miscellaneous::CodepointCountFilter result((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::analysis::TokenStream::initializeClass, &a0))
            {
              OBJ_CALL(result = self->object.create(a0));
              return ::org::apache::lucene::analysis::miscellaneous::t_CodepointCountFilter::wrap_Object(result);
            }

            return callSuper(PY_TYPE(CodepointCountFilterFactory), (PyObject *) self, "create", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/ja/JapaneseReadingFormFilter.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/analysis/TokenStream.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace ja {

          ::java::lang::Class *JapaneseReadingFormFilter::class$ = NULL;
          jmethodID *JapaneseReadingFormFilter::mids$ = NULL;
          bool JapaneseReadingFormFilter::live$ = false;

          jclass JapaneseReadingFormFilter::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/ja/JapaneseReadingFormFilter");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_c26756868a754f4e] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/analysis/TokenStream;)V");
              mids$[mid_init$_2ffd64a9e6352a93] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/analysis/TokenStream;Z)V");
              mids$[mid_incrementToken_8454bd5aa23fd11e] = env->getMethodID(cls, "incrementToken", "()Z");

              class$ = new ::java::lang::Class(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          JapaneseReadingFormFilter::JapaneseReadingFormFilter(const ::org::apache::lucene::analysis::TokenStream & a0) : ::org::apache::lucene::analysis::TokenFilter(env->newObject(initializeClass, &mids$, mid_init$_c26756868a754f4e, a0.this$)) {}

          JapaneseReadingFormFilter::JapaneseReadingFormFilter(const ::org::apache::lucene::analysis::TokenStream & a0, jboolean a1) : ::org::apache::lucene::analysis::TokenFilter(env->newObject(initializeClass, &mids$, mid_init$_2ffd64a9e6352a93, a0.this$, a1)) {}

          jboolean JapaneseReadingFormFilter::incrementToken() const
          {
            return env->callBooleanMethod(this$, mids$[mid_incrementToken_8454bd5aa23fd11e]);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace ja {
          static PyObject *t_JapaneseReadingFormFilter_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_JapaneseReadingFormFilter_instance_(PyTypeObject *type, PyObject *arg);
          static int t_JapaneseReadingFormFilter_init_(t_JapaneseReadingFormFilter *self, PyObject *args, PyObject *kwds);
          static PyObject *t_JapaneseReadingFormFilter_incrementToken(t_JapaneseReadingFormFilter *self, PyObject *args);

          static PyMethodDef t_JapaneseReadingFormFilter__methods_[] = {
            DECLARE_METHOD(t_JapaneseReadingFormFilter, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_JapaneseReadingFormFilter, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_JapaneseReadingFormFilter, incrementToken, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          static PyType_Slot PY_TYPE_SLOTS(JapaneseReadingFormFilter)[] = {
            { Py_tp_methods, t_JapaneseReadingFormFilter__methods_ },
            { Py_tp_init, (void *) t_JapaneseReadingFormFilter_init_ },
            { 0, NULL }
          };

          static PyType_Def *PY_TYPE_BASES(JapaneseReadingFormFilter)[] = {
            &PY_TYPE_DEF(::org::apache::lucene::analysis::TokenFilter),
            NULL
          };

          DEFINE_TYPE(JapaneseReadingFormFilter, t_JapaneseReadingFormFilter, JapaneseReadingFormFilter);

          void t_JapaneseReadingFormFilter::install(PyObject *module)
          {
            installType(&PY_TYPE(JapaneseReadingFormFilter), &PY_TYPE_DEF(JapaneseReadingFormFilter), module, "JapaneseReadingFormFilter", 0);
          }

          void t_JapaneseReadingFormFilter::initialize(PyObject *module)
          {
            PyObject_SetAttrString((PyObject *) PY_TYPE(JapaneseReadingFormFilter), "class_", make_descriptor(JapaneseReadingFormFilter::initializeClass, 1));
            PyObject_SetAttrString((PyObject *) PY_TYPE(JapaneseReadingFormFilter), "wrapfn_", make_descriptor(t_JapaneseReadingFormFilter::wrap_jobject));
            PyObject_SetAttrString((PyObject *) PY_TYPE(JapaneseReadingFormFilter), "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_JapaneseReadingFormFilter_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, JapaneseReadingFormFilter::initializeClass, 1)))
              return NULL;
            return t_JapaneseReadingFormFilter::wrap_Object(JapaneseReadingFormFilter(((t_JapaneseReadingFormFilter *) arg)->object.this$));
          }
          static PyObject *t_JapaneseReadingFormFilter_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, JapaneseReadingFormFilter::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_JapaneseReadingFormFilter_init_(t_JapaneseReadingFormFilter *self, PyObject *args, PyObject *kwds)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 1:
              {
                ::org::apache::lucene::analysis::TokenStream a0((jobject) NULL);
                JapaneseReadingFormFilter object((jobject) NULL);

                if (!parseArgs(args, "k", ::org::apache::lucene::analysis::TokenStream::initializeClass, &a0))
                {
                  INT_CALL(object = JapaneseReadingFormFilter(a0));
                  self->object = object;
                  break;
                }
              }
              goto err;
             case 2:
              {
                ::org::apache::lucene::analysis::TokenStream a0((jobject) NULL);
                jboolean a1;
                JapaneseReadingFormFilter object((jobject) NULL);

                if (!parseArgs(args, "kZ", ::org::apache::lucene::analysis::TokenStream::initializeClass, &a0, &a1))
                {
                  INT_CALL(object = JapaneseReadingFormFilter(a0, a1));
                  self->object = object;
                  break;
                }
              }
             default:
             err:
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_JapaneseReadingFormFilter_incrementToken(t_JapaneseReadingFormFilter *self, PyObject *args)
          {
            jboolean result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.incrementToken());
              Py_RETURN_BOOL(result);
            }

            return callSuper(PY_TYPE(JapaneseReadingFormFilter), (PyObject *) self, "incrementToken", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/SynonymQuery$Builder.h"
#include "org/apache/lucene/search/SynonymQuery.h"
#include "org/apache/lucene/search/SynonymQuery$Builder.h"
#include "org/apache/lucene/index/Term.h"
#include "java/lang/Class.h"
#include "java/lang/String.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {

        ::java::lang::Class *SynonymQuery$Builder::class$ = NULL;
        jmethodID *SynonymQuery$Builder::mids$ = NULL;
        bool SynonymQuery$Builder::live$ = false;

        jclass SynonymQuery$Builder::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/search/SynonymQuery$Builder");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_9fd2eb66a64e6f0f] = env->getMethodID(cls, "<init>", "(Ljava/lang/String;)V");
            mids$[mid_addTerm_cd6328a57bece0f9] = env->getMethodID(cls, "addTerm", "(Lorg/apache/lucene/index/Term;)Lorg/apache/lucene/search/SynonymQuery$Builder;");
            mids$[mid_addTerm_7a0c68dac9f77a61] = env->getMethodID(cls, "addTerm", "(Lorg/apache/lucene/index/Term;F)Lorg/apache/lucene/search/SynonymQuery$Builder;");
            mids$[mid_build_aa568aadce5f49d4] = env->getMethodID(cls, "build", "()Lorg/apache/lucene/search/SynonymQuery;");

            class$ = new ::java::lang::Class(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        SynonymQuery$Builder::SynonymQuery$Builder(const ::java::lang::String & a0) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_9fd2eb66a64e6f0f, a0.this$)) {}

        SynonymQuery$Builder SynonymQuery$Builder::addTerm(const ::org::apache::lucene::index::Term & a0) const
        {
          return SynonymQuery$Builder(env->callObjectMethod(this$, mids$[mid_addTerm_cd6328a57bece0f9], a0.this$));
        }

        SynonymQuery$Builder SynonymQuery$Builder::addTerm(const ::org::apache::lucene::index::Term & a0, jfloat a1) const
        {
          return SynonymQuery$Builder(env->callObjectMethod(this$, mids$[mid_addTerm_7a0c68dac9f77a61], a0.this$, a1));
        }

        ::org::apache::lucene::search::SynonymQuery SynonymQuery$Builder::build() const
        {
          return ::org::apache::lucene::search::SynonymQuery(env->callObjectMethod(this$, mids$[mid_build_aa568aadce5f49d4]));
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        static PyObject *t_SynonymQuery$Builder_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_SynonymQuery$Builder_instance_(PyTypeObject *type, PyObject *arg);
        static int t_SynonymQuery$Builder_init_(t_SynonymQuery$Builder *self, PyObject *args, PyObject *kwds);
        static PyObject *t_SynonymQuery$Builder_addTerm(t_SynonymQuery$Builder *self, PyObject *args);
        static PyObject *t_SynonymQuery$Builder_build(t_SynonymQuery$Builder *self);

        static PyMethodDef t_SynonymQuery$Builder__methods_[] = {
          DECLARE_METHOD(t_SynonymQuery$Builder, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_SynonymQuery$Builder, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_SynonymQuery$Builder, addTerm, METH_VARARGS),
          DECLARE_METHOD(t_SynonymQuery$Builder, build, METH_NOARGS),
          { NULL, NULL, 0, NULL }
        };

        static PyType_Slot PY_TYPE_SLOTS(SynonymQuery$Builder)[] = {
          { Py_tp_methods, t_SynonymQuery$Builder__methods_ },
          { Py_tp_init, (void *) t_SynonymQuery$Builder_init_ },
          { 0, NULL }
        };

        static PyType_Def *PY_TYPE_BASES(SynonymQuery$Builder)[] = {
          &PY_TYPE_DEF(::java::lang::Object),
          NULL
        };

        DEFINE_TYPE(SynonymQuery$Builder, t_SynonymQuery$Builder, SynonymQuery$Builder);

        void t_SynonymQuery$Builder::install(PyObject *module)
        {
          installType(&PY_TYPE(SynonymQuery$Builder), &PY_TYPE_DEF(SynonymQuery$Builder), module, "SynonymQuery$Builder", 0);
        }

        void t_SynonymQuery$Builder::initialize(PyObject *module)
        {
          PyObject_SetAttrString((PyObject *) PY_TYPE(SynonymQuery$Builder), "class_", make_descriptor(SynonymQuery$Builder::initializeClass, 1));
          PyObject_SetAttrString((PyObject *) PY_TYPE(SynonymQuery$Builder), "wrapfn_", make_descriptor(t_SynonymQuery$Builder::wrap_jobject));
          PyObject_SetAttrString((PyObject *) PY_TYPE(SynonymQuery$Builder), "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_SynonymQuery$Builder_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, SynonymQuery$Builder::initializeClass, 1)))
            return NULL;
          return t_SynonymQuery$Builder::wrap_Object(SynonymQuery$Builder(((t_SynonymQuery$Builder *) arg)->object.this$));
        }
        static PyObject *t_SynonymQuery$Builder_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, SynonymQuery$Builder::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_SynonymQuery$Builder_init_(t_SynonymQuery$Builder *self, PyObject *args, PyObject *kwds)
        {
          ::java::lang::String a0((jobject) NULL);
          SynonymQuery$Builder object((jobject) NULL);

          if (!parseArgs(args, "s", &a0))
          {
            INT_CALL(object = SynonymQuery$Builder(a0));
            self->object = object;
          }
          else
          {
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }

        static PyObject *t_SynonymQuery$Builder_addTerm(t_SynonymQuery$Builder *self, PyObject *args)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 1:
            {
              ::org::apache::lucene::index::Term a0((jobject) NULL);
              SynonymQuery$Builder result((jobject) NULL);

              if (!parseArgs(args, "k", ::org::apache::lucene::index::Term::initializeClass, &a0))
              {
                OBJ_CALL(result = self->object.addTerm(a0));
                return t_SynonymQuery$Builder::wrap_Object(result);
              }
            }
            break;
           case 2:
            {
              ::org::apache::lucene::index::Term a0((jobject) NULL);
              jfloat a1;
              SynonymQuery$Builder result((jobject) NULL);

              if (!parseArgs(args, "kF", ::org::apache::lucene::index::Term::initializeClass, &a0, &a1))
              {
                OBJ_CALL(result = self->object.addTerm(a0, a1));
                return t_SynonymQuery$Builder::wrap_Object(result);
              }
            }
          }

          PyErr_SetArgsError((PyObject *) self, "addTerm", args);
          return NULL;
        }

        static PyObject *t_SynonymQuery$Builder_build(t_SynonymQuery$Builder *self)
        {
          ::org::apache::lucene::search::SynonymQuery result((jobject) NULL);
          OBJ_CALL(result = self->object.build());
          return ::org::apache::lucene::search::t_SynonymQuery::wrap_Object(result);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/index/PointValues.h"
#include "org/apache/lucene/index/IndexReader.h"
#include "org/apache/lucene/index/PointValues$IntersectVisitor.h"
#include "java/lang/Class.h"
#include "java/lang/String.h"
#include "java/io/IOException.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {

        ::java::lang::Class *PointValues::class$ = NULL;
        jmethodID *PointValues::mids$ = NULL;
        bool PointValues::live$ = false;
        jint PointValues::MAX_DIMENSIONS = (jint) 0;
        jint PointValues::MAX_INDEX_DIMENSIONS = (jint) 0;
        jint PointValues::MAX_NUM_BYTES = (jint) 0;

        jclass PointValues::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/index/PointValues");

            mids$ = new jmethodID[max_mid];
            mids$[mid_estimateDocCount_c36ecfcc70f1a802] = env->getMethodID(cls, "estimateDocCount", "(Lorg/apache/lucene/index/PointValues$IntersectVisitor;)J");
            mids$[mid_estimatePointCount_c36ecfcc70f1a802] = env->getMethodID(cls, "estimatePointCount", "(Lorg/apache/lucene/index/PointValues$IntersectVisitor;)J");
            mids$[mid_getBytesPerDimension_9972fcc56b44e79d] = env->getMethodID(cls, "getBytesPerDimension", "()I");
            mids$[mid_getDocCount_9972fcc56b44e79d] = env->getMethodID(cls, "getDocCount", "()I");
            mids$[mid_getDocCount_22884bb4916a685a] = env->getStaticMethodID(cls, "getDocCount", "(Lorg/apache/lucene/index/IndexReader;Ljava/lang/String;)I");
            mids$[mid_getMaxPackedValue_cf386cdb1bbd339f] = env->getMethodID(cls, "getMaxPackedValue", "()[B");
            mids$[mid_getMaxPackedValue_747bccda0867faeb] = env->getStaticMethodID(cls, "getMaxPackedValue", "(Lorg/apache/lucene/index/IndexReader;Ljava/lang/String;)[B");
            mids$[mid_getMinPackedValue_cf386cdb1bbd339f] = env->getMethodID(cls, "getMinPackedValue", "()[B");
            mids$[mid_getMinPackedValue_747bccda0867faeb] = env->getStaticMethodID(cls, "getMinPackedValue", "(Lorg/apache/lucene/index/IndexReader;Ljava/lang/String;)[B");
            mids$[mid_getNumDimensions_9972fcc56b44e79d] = env->getMethodID(cls, "getNumDimensions", "()I");
            mids$[mid_getNumIndexDimensions_9972fcc56b44e79d] = env->getMethodID(cls, "getNumIndexDimensions", "()I");
            mids$[mid_intersect_9cdd639f530ebf3c] = env->getMethodID(cls, "intersect", "(Lorg/apache/lucene/index/PointValues$IntersectVisitor;)V");
            mids$[mid_size_2e5ae9edcb9b072f] = env->getMethodID(cls, "size", "()J");
            mids$[mid_size_06957b5fdb6e3629] = env->getStaticMethodID(cls, "size", "(Lorg/apache/lucene/index/IndexReader;Ljava/lang/String;)J");

            class$ = new ::java::lang::Class(cls);
            cls = (jclass) class$->this$;

            MAX_DIMENSIONS = env->getStaticIntField(cls, "MAX_DIMENSIONS");
            MAX_INDEX_DIMENSIONS = env->getStaticIntField(cls, "MAX_INDEX_DIMENSIONS");
            MAX_NUM_BYTES = env->getStaticIntField(cls, "MAX_NUM_BYTES");
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        jlong PointValues::estimateDocCount(const ::org::apache::lucene::index::PointValues$IntersectVisitor & a0) const
        {
          return env->callLongMethod(this$, mids$[mid_estimateDocCount_c36ecfcc70f1a802], a0.this$);
        }

        jlong PointValues::estimatePointCount(const ::org::apache::lucene::index::PointValues$IntersectVisitor & a0) const
        {
          return env->callLongMethod(this$, mids$[mid_estimatePointCount_c36ecfcc70f1a802], a0.this$);
        }

        jint PointValues::getBytesPerDimension() const
        {
          return env->callIntMethod(this$, mids$[mid_getBytesPerDimension_9972fcc56b44e79d]);
        }

        jint PointValues::getDocCount() const
        {
          return env->callIntMethod(this$, mids$[mid_getDocCount_9972fcc56b44e79d]);
        }

        jint PointValues::getDocCount(const ::org::apache::lucene::index::IndexReader & a0, const ::java::lang::String & a1)
        {
          jclass cls = env->getClass(initializeClass);
          return env->callStaticIntMethod(cls, mids$[mid_getDocCount_22884bb4916a685a], a0.this$, a1.this$);
        }

        JArray< jbyte > PointValues::getMaxPackedValue() const
        {
          return JArray< jbyte >(env->callObjectMethod(this$, mids$[mid_getMaxPackedValue_cf386cdb1bbd339f]));
        }

        JArray< jbyte > PointValues::getMaxPackedValue(const ::org::apache::lucene::index::IndexReader & a0, const ::java::lang::String & a1)
        {
          jclass cls = env->getClass(initializeClass);
          return JArray< jbyte >(env->callStaticObjectMethod(cls, mids$[mid_getMaxPackedValue_747bccda0867faeb], a0.this$, a1.this$));
        }

        JArray< jbyte > PointValues::getMinPackedValue() const
        {
          return JArray< jbyte >(env->callObjectMethod(this$, mids$[mid_getMinPackedValue_cf386cdb1bbd339f]));
        }

        JArray< jbyte > PointValues::getMinPackedValue(const ::org::apache::lucene::index::IndexReader & a0, const ::java::lang::String & a1)
        {
          jclass cls = env->getClass(initializeClass);
          return JArray< jbyte >(env->callStaticObjectMethod(cls, mids$[mid_getMinPackedValue_747bccda0867faeb], a0.this$, a1.this$));
        }

        jint PointValues::getNumDimensions() const
        {
          return env->callIntMethod(this$, mids$[mid_getNumDimensions_9972fcc56b44e79d]);
        }

        jint PointValues::getNumIndexDimensions() const
        {
          return env->callIntMethod(this$, mids$[mid_getNumIndexDimensions_9972fcc56b44e79d]);
        }

        void PointValues::intersect(const ::org::apache::lucene::index::PointValues$IntersectVisitor & a0) const
        {
          env->callVoidMethod(this$, mids$[mid_intersect_9cdd639f530ebf3c], a0.this$);
        }

        jlong PointValues::size() const
        {
          return env->callLongMethod(this$, mids$[mid_size_2e5ae9edcb9b072f]);
        }

        jlong PointValues::size(const ::org::apache::lucene::index::IndexReader & a0, const ::java::lang::String & a1)
        {
          jclass cls = env->getClass(initializeClass);
          return env->callStaticLongMethod(cls, mids$[mid_size_06957b5fdb6e3629], a0.this$, a1.this$);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"
#include "org/apache/lucene/index/PointValues$Relation.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {
        static PyObject *t_PointValues_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_PointValues_instance_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_PointValues_estimateDocCount(t_PointValues *self, PyObject *arg);
        static PyObject *t_PointValues_estimatePointCount(t_PointValues *self, PyObject *arg);
        static PyObject *t_PointValues_getBytesPerDimension(t_PointValues *self);
        static PyObject *t_PointValues_getDocCount(t_PointValues *self);
        static PyObject *t_PointValues_getDocCount_(PyTypeObject *type, PyObject *args);
        static PyObject *t_PointValues_getMaxPackedValue(t_PointValues *self);
        static PyObject *t_PointValues_getMaxPackedValue_(PyTypeObject *type, PyObject *args);
        static PyObject *t_PointValues_getMinPackedValue(t_PointValues *self);
        static PyObject *t_PointValues_getMinPackedValue_(PyTypeObject *type, PyObject *args);
        static PyObject *t_PointValues_getNumDimensions(t_PointValues *self);
        static PyObject *t_PointValues_getNumIndexDimensions(t_PointValues *self);
        static PyObject *t_PointValues_intersect(t_PointValues *self, PyObject *arg);
        static PyObject *t_PointValues_size(t_PointValues *self);
        static PyObject *t_PointValues_size_(PyTypeObject *type, PyObject *args);
        static PyObject *t_PointValues_get__bytesPerDimension(t_PointValues *self, void *data);
        static PyObject *t_PointValues_get__docCount(t_PointValues *self, void *data);
        static PyObject *t_PointValues_get__maxPackedValue(t_PointValues *self, void *data);
        static PyObject *t_PointValues_get__minPackedValue(t_PointValues *self, void *data);
        static PyObject *t_PointValues_get__numDimensions(t_PointValues *self, void *data);
        static PyObject *t_PointValues_get__numIndexDimensions(t_PointValues *self, void *data);
        static PyGetSetDef t_PointValues__fields_[] = {
          DECLARE_GET_FIELD(t_PointValues, bytesPerDimension),
          DECLARE_GET_FIELD(t_PointValues, docCount),
          DECLARE_GET_FIELD(t_PointValues, maxPackedValue),
          DECLARE_GET_FIELD(t_PointValues, minPackedValue),
          DECLARE_GET_FIELD(t_PointValues, numDimensions),
          DECLARE_GET_FIELD(t_PointValues, numIndexDimensions),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_PointValues__methods_[] = {
          DECLARE_METHOD(t_PointValues, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_PointValues, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_PointValues, estimateDocCount, METH_O),
          DECLARE_METHOD(t_PointValues, estimatePointCount, METH_O),
          DECLARE_METHOD(t_PointValues, getBytesPerDimension, METH_NOARGS),
          DECLARE_METHOD(t_PointValues, getDocCount, METH_NOARGS),
          DECLARE_METHOD(t_PointValues, getDocCount_, METH_VARARGS | METH_CLASS),
          DECLARE_METHOD(t_PointValues, getMaxPackedValue, METH_NOARGS),
          DECLARE_METHOD(t_PointValues, getMaxPackedValue_, METH_VARARGS | METH_CLASS),
          DECLARE_METHOD(t_PointValues, getMinPackedValue, METH_NOARGS),
          DECLARE_METHOD(t_PointValues, getMinPackedValue_, METH_VARARGS | METH_CLASS),
          DECLARE_METHOD(t_PointValues, getNumDimensions, METH_NOARGS),
          DECLARE_METHOD(t_PointValues, getNumIndexDimensions, METH_NOARGS),
          DECLARE_METHOD(t_PointValues, intersect, METH_O),
          DECLARE_METHOD(t_PointValues, size, METH_NOARGS),
          DECLARE_METHOD(t_PointValues, size_, METH_VARARGS | METH_CLASS),
          { NULL, NULL, 0, NULL }
        };

        static PyType_Slot PY_TYPE_SLOTS(PointValues)[] = {
          { Py_tp_methods, t_PointValues__methods_ },
          { Py_tp_init, (void *) abstract_init },
          { Py_tp_getset, t_PointValues__fields_ },
          { 0, NULL }
        };

        static PyType_Def *PY_TYPE_BASES(PointValues)[] = {
          &PY_TYPE_DEF(::java::lang::Object),
          NULL
        };

        DEFINE_TYPE(PointValues, t_PointValues, PointValues);

        void t_PointValues::install(PyObject *module)
        {
          installType(&PY_TYPE(PointValues), &PY_TYPE_DEF(PointValues), module, "PointValues", 0);
          PyObject_SetAttrString((PyObject *) PY_TYPE(PointValues), "IntersectVisitor", make_descriptor(&PY_TYPE_DEF(PointValues$IntersectVisitor)));
          PyObject_SetAttrString((PyObject *) PY_TYPE(PointValues), "Relation", make_descriptor(&PY_TYPE_DEF(PointValues$Relation)));
        }

        void t_PointValues::initialize(PyObject *module)
        {
          PyObject_SetAttrString((PyObject *) PY_TYPE(PointValues), "class_", make_descriptor(PointValues::initializeClass, 1));
          PyObject_SetAttrString((PyObject *) PY_TYPE(PointValues), "wrapfn_", make_descriptor(t_PointValues::wrap_jobject));
          PyObject_SetAttrString((PyObject *) PY_TYPE(PointValues), "boxfn_", make_descriptor(boxObject));
          env->getClass(PointValues::initializeClass);
          PyObject_SetAttrString((PyObject *) PY_TYPE(PointValues), "MAX_DIMENSIONS", make_descriptor(PointValues::MAX_DIMENSIONS));
          PyObject_SetAttrString((PyObject *) PY_TYPE(PointValues), "MAX_INDEX_DIMENSIONS", make_descriptor(PointValues::MAX_INDEX_DIMENSIONS));
          PyObject_SetAttrString((PyObject *) PY_TYPE(PointValues), "MAX_NUM_BYTES", make_descriptor(PointValues::MAX_NUM_BYTES));
        }

        static PyObject *t_PointValues_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, PointValues::initializeClass, 1)))
            return NULL;
          return t_PointValues::wrap_Object(PointValues(((t_PointValues *) arg)->object.this$));
        }
        static PyObject *t_PointValues_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, PointValues::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static PyObject *t_PointValues_estimateDocCount(t_PointValues *self, PyObject *arg)
        {
          ::org::apache::lucene::index::PointValues$IntersectVisitor a0((jobject) NULL);
          jlong result;

          if (!parseArg(arg, "k", ::org::apache::lucene::index::PointValues$IntersectVisitor::initializeClass, &a0))
          {
            OBJ_CALL(result = self->object.estimateDocCount(a0));
            return PyLong_FromLongLong((PY_LONG_LONG) result);
          }

          PyErr_SetArgsError((PyObject *) self, "estimateDocCount", arg);
          return NULL;
        }

        static PyObject *t_PointValues_estimatePointCount(t_PointValues *self, PyObject *arg)
        {
          ::org::apache::lucene::index::PointValues$IntersectVisitor a0((jobject) NULL);
          jlong result;

          if (!parseArg(arg, "k", ::org::apache::lucene::index::PointValues$IntersectVisitor::initializeClass, &a0))
          {
            OBJ_CALL(result = self->object.estimatePointCount(a0));
            return PyLong_FromLongLong((PY_LONG_LONG) result);
          }

          PyErr_SetArgsError((PyObject *) self, "estimatePointCount", arg);
          return NULL;
        }

        static PyObject *t_PointValues_getBytesPerDimension(t_PointValues *self)
        {
          jint result;
          OBJ_CALL(result = self->object.getBytesPerDimension());
          return PyLong_FromLong((long) result);
        }

        static PyObject *t_PointValues_getDocCount(t_PointValues *self)
        {
          jint result;
          OBJ_CALL(result = self->object.getDocCount());
          return PyLong_FromLong((long) result);
        }

        static PyObject *t_PointValues_getDocCount_(PyTypeObject *type, PyObject *args)
        {
          ::org::apache::lucene::index::IndexReader a0((jobject) NULL);
          ::java::lang::String a1((jobject) NULL);
          jint result;

          if (!parseArgs(args, "ks", ::org::apache::lucene::index::IndexReader::initializeClass, &a0, &a1))
          {
            OBJ_CALL(result = ::org::apache::lucene::index::PointValues::getDocCount(a0, a1));
            return PyLong_FromLong((long) result);
          }

          PyErr_SetArgsError(type, "getDocCount_", args);
          return NULL;
        }

        static PyObject *t_PointValues_getMaxPackedValue(t_PointValues *self)
        {
          JArray< jbyte > result((jobject) NULL);
          OBJ_CALL(result = self->object.getMaxPackedValue());
          return result.wrap();
        }

        static PyObject *t_PointValues_getMaxPackedValue_(PyTypeObject *type, PyObject *args)
        {
          ::org::apache::lucene::index::IndexReader a0((jobject) NULL);
          ::java::lang::String a1((jobject) NULL);
          JArray< jbyte > result((jobject) NULL);

          if (!parseArgs(args, "ks", ::org::apache::lucene::index::IndexReader::initializeClass, &a0, &a1))
          {
            OBJ_CALL(result = ::org::apache::lucene::index::PointValues::getMaxPackedValue(a0, a1));
            return result.wrap();
          }

          PyErr_SetArgsError(type, "getMaxPackedValue_", args);
          return NULL;
        }

        static PyObject *t_PointValues_getMinPackedValue(t_PointValues *self)
        {
          JArray< jbyte > result((jobject) NULL);
          OBJ_CALL(result = self->object.getMinPackedValue());
          return result.wrap();
        }

        static PyObject *t_PointValues_getMinPackedValue_(PyTypeObject *type, PyObject *args)
        {
          ::org::apache::lucene::index::IndexReader a0((jobject) NULL);
          ::java::lang::String a1((jobject) NULL);
          JArray< jbyte > result((jobject) NULL);

          if (!parseArgs(args, "ks", ::org::apache::lucene::index::IndexReader::initializeClass, &a0, &a1))
          {
            OBJ_CALL(result = ::org::apache::lucene::index::PointValues::getMinPackedValue(a0, a1));
            return result.wrap();
          }

          PyErr_SetArgsError(type, "getMinPackedValue_", args);
          return NULL;
        }

        static PyObject *t_PointValues_getNumDimensions(t_PointValues *self)
        {
          jint result;
          OBJ_CALL(result = self->object.getNumDimensions());
          return PyLong_FromLong((long) result);
        }

        static PyObject *t_PointValues_getNumIndexDimensions(t_PointValues *self)
        {
          jint result;
          OBJ_CALL(result = self->object.getNumIndexDimensions());
          return PyLong_FromLong((long) result);
        }

        static PyObject *t_PointValues_intersect(t_PointValues *self, PyObject *arg)
        {
          ::org::apache::lucene::index::PointValues$IntersectVisitor a0((jobject) NULL);

          if (!parseArg(arg, "k", ::org::apache::lucene::index::PointValues$IntersectVisitor::initializeClass, &a0))
          {
            OBJ_CALL(self->object.intersect(a0));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "intersect", arg);
          return NULL;
        }

        static PyObject *t_PointValues_size(t_PointValues *self)
        {
          jlong result;
          OBJ_CALL(result = self->object.size());
          return PyLong_FromLongLong((PY_LONG_LONG) result);
        }

        static PyObject *t_PointValues_size_(PyTypeObject *type, PyObject *args)
        {
          ::org::apache::lucene::index::IndexReader a0((jobject) NULL);
          ::java::lang::String a1((jobject) NULL);
          jlong result;

          if (!parseArgs(args, "ks", ::org::apache::lucene::index::IndexReader::initializeClass, &a0, &a1))
          {
            OBJ_CALL(result = ::org::apache::lucene::index::PointValues::size(a0, a1));
            return PyLong_FromLongLong((PY_LONG_LONG) result);
          }

          PyErr_SetArgsError(type, "size_", args);
          return NULL;
        }

        static PyObject *t_PointValues_get__bytesPerDimension(t_PointValues *self, void *data)
        {
          jint value;
          OBJ_CALL(value = self->object.getBytesPerDimension());
          return PyLong_FromLong((long) value);
        }

        static PyObject *t_PointValues_get__docCount(t_PointValues *self, void *data)
        {
          jint value;
          OBJ_CALL(value = self->object.getDocCount());
          return PyLong_FromLong((long) value);
        }

        static PyObject *t_PointValues_get__maxPackedValue(t_PointValues *self, void *data)
        {
          JArray< jbyte > value((jobject) NULL);
          OBJ_CALL(value = self->object.getMaxPackedValue());
          return value.wrap();
        }

        static PyObject *t_PointValues_get__minPackedValue(t_PointValues *self, void *data)
        {
          JArray< jbyte > value((jobject) NULL);
          OBJ_CALL(value = self->object.getMinPackedValue());
          return value.wrap();
        }

        static PyObject *t_PointValues_get__numDimensions(t_PointValues *self, void *data)
        {
          jint value;
          OBJ_CALL(value = self->object.getNumDimensions());
          return PyLong_FromLong((long) value);
        }

        static PyObject *t_PointValues_get__numIndexDimensions(t_PointValues *self, void *data)
        {
          jint value;
          OBJ_CALL(value = self->object.getNumIndexDimensions());
          return PyLong_FromLong((long) value);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/Scorable$ChildScorable.h"
#include "org/apache/lucene/search/Scorable.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {

        ::java::lang::Class *Scorable$ChildScorable::class$ = NULL;
        jmethodID *Scorable$ChildScorable::mids$ = NULL;
        jfieldID *Scorable$ChildScorable::fids$ = NULL;
        bool Scorable$ChildScorable::live$ = false;

        jclass Scorable$ChildScorable::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/search/Scorable$ChildScorable");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_82146d7bbeb51f42] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/search/Scorable;Ljava/lang/String;)V");

            fids$ = new jfieldID[max_fid];
            fids$[fid_child] = env->getFieldID(cls, "child", "Lorg/apache/lucene/search/Scorable;");
            fids$[fid_relationship] = env->getFieldID(cls, "relationship", "Ljava/lang/String;");

            class$ = new ::java::lang::Class(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        Scorable$ChildScorable::Scorable$ChildScorable(const ::org::apache::lucene::search::Scorable & a0, const ::java::lang::String & a1) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_82146d7bbeb51f42, a0.this$, a1.this$)) {}

        ::org::apache::lucene::search::Scorable Scorable$ChildScorable::_get_child() const
        {
          return ::org::apache::lucene::search::Scorable(env->getObjectField(this$, fids$[fid_child]));
        }

        ::java::lang::String Scorable$ChildScorable::_get_relationship() const
        {
          return ::java::lang::String(env->getObjectField(this$, fids$[fid_relationship]));
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        static PyObject *t_Scorable$ChildScorable_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_Scorable$ChildScorable_instance_(PyTypeObject *type, PyObject *arg);
        static int t_Scorable$ChildScorable_init_(t_Scorable$ChildScorable *self, PyObject *args, PyObject *kwds);
        static PyObject *t_Scorable$ChildScorable_get__child(t_Scorable$ChildScorable *self, void *data);
        static PyObject *t_Scorable$ChildScorable_get__relationship(t_Scorable$ChildScorable *self, void *data);

        static PyGetSetDef t_Scorable$ChildScorable__fields_[] = {
          DECLARE_GET_FIELD(t_Scorable$ChildScorable, child),
          DECLARE_GET_FIELD(t_Scorable$ChildScorable, relationship),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_Scorable$ChildScorable__methods_[] = {
          DECLARE_METHOD(t_Scorable$ChildScorable, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_Scorable$ChildScorable, instance_, METH_O | METH_CLASS),
          { NULL, NULL, 0, NULL }
        };

        static PyType_Slot PY_TYPE_SLOTS(Scorable$ChildScorable)[] = {
          { Py_tp_methods, t_Scorable$ChildScorable__methods_ },
          { Py_tp_init, (void *) t_Scorable$ChildScorable_init_ },
          { Py_tp_getset, t_Scorable$ChildScorable__fields_ },
          { 0, NULL }
        };

        static PyType_Def *PY_TYPE_BASES(Scorable$ChildScorable)[] = {
          &PY_TYPE_DEF(::java::lang::Object),
          NULL
        };

        DEFINE_TYPE(Scorable$ChildScorable, t_Scorable$ChildScorable, Scorable$ChildScorable);

        void t_Scorable$ChildScorable::install(PyObject *module)
        {
          installType(&PY_TYPE(Scorable$ChildScorable), &PY_TYPE_DEF(Scorable$ChildScorable), module, "Scorable$ChildScorable", 0);
        }

        void t_Scorable$ChildScorable::initialize(PyObject *module)
        {
          PyObject_SetAttrString((PyObject *) PY_TYPE(Scorable$ChildScorable), "class_", make_descriptor(Scorable$ChildScorable::initializeClass, 1));
          PyObject_SetAttrString((PyObject *) PY_TYPE(Scorable$ChildScorable), "wrapfn_", make_descriptor(t_Scorable$ChildScorable::wrap_jobject));
          PyObject_SetAttrString((PyObject *) PY_TYPE(Scorable$ChildScorable), "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_Scorable$ChildScorable_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, Scorable$ChildScorable::initializeClass, 1)))
            return NULL;
          return t_Scorable$ChildScorable::wrap_Object(Scorable$ChildScorable(((t_Scorable$ChildScorable *) arg)->object.this$));
        }
        static PyObject *t_Scorable$ChildScorable_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, Scorable$ChildScorable::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_Scorable$ChildScorable_init_(t_Scorable$ChildScorable *self, PyObject *args, PyObject *kwds)
        {
          ::org::apache::lucene::search::Scorable a0((jobject) NULL);
          ::java::lang::String a1((jobject) NULL);
          Scorable$ChildScorable object((jobject) NULL);

          if (!parseArgs(args, "ks", ::org::apache::lucene::search::Scorable::initializeClass, &a0, &a1))
          {
            INT_CALL(object = Scorable$ChildScorable(a0, a1));
            self->object = object;
          }
          else
          {
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }

        static PyObject *t_Scorable$ChildScorable_get__child(t_Scorable$ChildScorable *self, void *data)
        {
          ::org::apache::lucene::search::Scorable value((jobject) NULL);
          OBJ_CALL(value = self->object._get_child());
          return ::org::apache::lucene::search::t_Scorable::wrap_Object(value);
        }

        static PyObject *t_Scorable$ChildScorable_get__relationship(t_Scorable$ChildScorable *self, void *data)
        {
          ::java::lang::String value((jobject) NULL);
          OBJ_CALL(value = self->object._get_relationship());
          return j2p(value);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/index/ImpactsEnum.h"
#include "org/apache/lucene/index/ImpactsSource.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {

        ::java::lang::Class *ImpactsEnum::class$ = NULL;
        jmethodID *ImpactsEnum::mids$ = NULL;
        bool ImpactsEnum::live$ = false;

        jclass ImpactsEnum::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/index/ImpactsEnum");

            class$ = new ::java::lang::Class(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {
        static PyObject *t_ImpactsEnum_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_ImpactsEnum_instance_(PyTypeObject *type, PyObject *arg);

        static PyMethodDef t_ImpactsEnum__methods_[] = {
          DECLARE_METHOD(t_ImpactsEnum, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_ImpactsEnum, instance_, METH_O | METH_CLASS),
          { NULL, NULL, 0, NULL }
        };

        static PyType_Slot PY_TYPE_SLOTS(ImpactsEnum)[] = {
          { Py_tp_methods, t_ImpactsEnum__methods_ },
          { Py_tp_init, (void *) abstract_init },
          { 0, NULL }
        };

        static PyType_Def *PY_TYPE_BASES(ImpactsEnum)[] = {
          &PY_TYPE_DEF(::org::apache::lucene::index::PostingsEnum),
          NULL
        };

        DEFINE_TYPE(ImpactsEnum, t_ImpactsEnum, ImpactsEnum);

        void t_ImpactsEnum::install(PyObject *module)
        {
          installType(&PY_TYPE(ImpactsEnum), &PY_TYPE_DEF(ImpactsEnum), module, "ImpactsEnum", 0);
        }

        void t_ImpactsEnum::initialize(PyObject *module)
        {
          PyObject_SetAttrString((PyObject *) PY_TYPE(ImpactsEnum), "class_", make_descriptor(ImpactsEnum::initializeClass, 1));
          PyObject_SetAttrString((PyObject *) PY_TYPE(ImpactsEnum), "wrapfn_", make_descriptor(t_ImpactsEnum::wrap_jobject));
          PyObject_SetAttrString((PyObject *) PY_TYPE(ImpactsEnum), "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_ImpactsEnum_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, ImpactsEnum::initializeClass, 1)))
            return NULL;
          return t_ImpactsEnum::wrap_Object(ImpactsEnum(((t_ImpactsEnum *) arg)->object.this$));
        }
        static PyObject *t_ImpactsEnum_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, ImpactsEnum::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/en/EnglishAnalyzer.h"
#include "org/apache/lucene/analysis/CharArraySet.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace en {

          ::java::lang::Class *EnglishAnalyzer::class$ = NULL;
          jmethodID *EnglishAnalyzer::mids$ = NULL;
          bool EnglishAnalyzer::live$ = false;
          ::org::apache::lucene::analysis::CharArraySet *EnglishAnalyzer::ENGLISH_STOP_WORDS_SET = NULL;

          jclass EnglishAnalyzer::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/en/EnglishAnalyzer");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_f2cc1bce94666404] = env->getMethodID(cls, "<init>", "()V");
              mids$[mid_init$_09c0eb6a436581d3] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/analysis/CharArraySet;)V");
              mids$[mid_init$_b66a15b6e54e4218] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/analysis/CharArraySet;Lorg/apache/lucene/analysis/CharArraySet;)V");
              mids$[mid_getDefaultStopSet_7aec8e69a9807ca1] = env->getStaticMethodID(cls, "getDefaultStopSet", "()Lorg/apache/lucene/analysis/CharArraySet;");
              mids$[mid_createComponents_c22fd244b0553c1e] = env->getMethodID(cls, "createComponents", "(Ljava/lang/String;)Lorg/apache/lucene/analysis/Analyzer$TokenStreamComponents;");
              mids$[mid_normalize_e597989422f66fcd] = env->getMethodID(cls, "normalize", "(Ljava/lang/String;Lorg/apache/lucene/analysis/TokenStream;)Lorg/apache/lucene/analysis/TokenStream;");

              class$ = new ::java::lang::Class(cls);
              cls = (jclass) class$->this$;

              ENGLISH_STOP_WORDS_SET = new ::org::apache::lucene::analysis::CharArraySet(env->getStaticObjectField(cls, "ENGLISH_STOP_WORDS_SET", "Lorg/apache/lucene/analysis/CharArraySet;"));
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          EnglishAnalyzer::EnglishAnalyzer() : ::org::apache::lucene::analysis::StopwordAnalyzerBase(env->newObject(initializeClass, &mids$, mid_init$_f2cc1bce94666404)) {}

          EnglishAnalyzer::EnglishAnalyzer(const ::org::apache::lucene::analysis::CharArraySet & a0) : ::org::apache::lucene::analysis::StopwordAnalyzerBase(env->newObject(initializeClass, &mids$, mid_init$_09c0eb6a436581d3, a0.this$)) {}

          EnglishAnalyzer::EnglishAnalyzer(const ::org::apache::lucene::analysis::CharArraySet & a0, const ::org::apache::lucene::analysis::CharArraySet & a1) : ::org::apache::lucene::analysis::StopwordAnalyzerBase(env->newObject(initializeClass, &mids$, mid_init$_b66a15b6e54e4218, a0.this$, a1.this$)) {}

          ::org::apache::lucene::analysis::CharArraySet EnglishAnalyzer::getDefaultStopSet()
          {
            jclass cls = env->getClass(initializeClass);
            return ::org::apache::lucene::analysis::CharArraySet(env->callStaticObjectMethod(cls, mids$[mid_getDefaultStopSet_7aec8e69a9807ca1]));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace en {
          static PyObject *t_EnglishAnalyzer_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_EnglishAnalyzer_instance_(PyTypeObject *type, PyObject *arg);
          static int t_EnglishAnalyzer_init_(t_EnglishAnalyzer *self, PyObject *args, PyObject *kwds);
          static PyObject *t_EnglishAnalyzer_getDefaultStopSet(PyTypeObject *type);
          static PyObject *t_EnglishAnalyzer_get__defaultStopSet(t_EnglishAnalyzer *self, void *data);
          static PyGetSetDef t_EnglishAnalyzer__fields_[] = {
            DECLARE_GET_FIELD(t_EnglishAnalyzer, defaultStopSet),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_EnglishAnalyzer__methods_[] = {
            DECLARE_METHOD(t_EnglishAnalyzer, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_EnglishAnalyzer, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_EnglishAnalyzer, getDefaultStopSet, METH_NOARGS | METH_CLASS),
            { NULL, NULL, 0, NULL }
          };

          static PyType_Slot PY_TYPE_SLOTS(EnglishAnalyzer)[] = {
            { Py_tp_methods, t_EnglishAnalyzer__methods_ },
            { Py_tp_init, (void *) t_EnglishAnalyzer_init_ },
            { Py_tp_getset, t_EnglishAnalyzer__fields_ },
            { 0, NULL }
          };

          static PyType_Def *PY_TYPE_BASES(EnglishAnalyzer)[] = {
            &PY_TYPE_DEF(::org::apache::lucene::analysis::StopwordAnalyzerBase),
            NULL
          };

          DEFINE_TYPE(EnglishAnalyzer, t_EnglishAnalyzer, EnglishAnalyzer);

          void t_EnglishAnalyzer::install(PyObject *module)
          {
            installType(&PY_TYPE(EnglishAnalyzer), &PY_TYPE_DEF(EnglishAnalyzer), module, "EnglishAnalyzer", 0);
          }

          void t_EnglishAnalyzer::initialize(PyObject *module)
          {
            PyObject_SetAttrString((PyObject *) PY_TYPE(EnglishAnalyzer), "class_", make_descriptor(EnglishAnalyzer::initializeClass, 1));
            PyObject_SetAttrString((PyObject *) PY_TYPE(EnglishAnalyzer), "wrapfn_", make_descriptor(t_EnglishAnalyzer::wrap_jobject));
            PyObject_SetAttrString((PyObject *) PY_TYPE(EnglishAnalyzer), "boxfn_", make_descriptor(boxObject));
            env->getClass(EnglishAnalyzer::initializeClass);
            PyObject_SetAttrString((PyObject *) PY_TYPE(EnglishAnalyzer), "ENGLISH_STOP_WORDS_SET", make_descriptor(::org::apache::lucene::analysis::t_CharArraySet::wrap_Object(*EnglishAnalyzer::ENGLISH_STOP_WORDS_SET)));
          }

          static PyObject *t_EnglishAnalyzer_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, EnglishAnalyzer::initializeClass, 1)))
              return NULL;
            return t_EnglishAnalyzer::wrap_Object(EnglishAnalyzer(((t_EnglishAnalyzer *) arg)->object.this$));
          }
          static PyObject *t_EnglishAnalyzer_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, EnglishAnalyzer::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_EnglishAnalyzer_init_(t_EnglishAnalyzer *self, PyObject *args, PyObject *kwds)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 0:
              {
                EnglishAnalyzer object((jobject) NULL);

                INT_CALL(object = EnglishAnalyzer());
                self->object = object;
                break;
              }
             case 1:
              {
                ::org::apache::lucene::analysis::CharArraySet a0((jobject) NULL);
                PyTypeObject **p0;
                EnglishAnalyzer object((jobject) NULL);

                if (!parseArgs(args, "K", ::org::apache::lucene::analysis::CharArraySet::initializeClass, &a0, &p0, ::org::apache::lucene::analysis::t_CharArraySet::parameters_))
                {
                  INT_CALL(object = EnglishAnalyzer(a0));
                  self->object = object;
                  break;
                }
              }
              goto err;
             case 2:
              {
                ::org::apache::lucene::analysis::CharArraySet a0((jobject) NULL);
                PyTypeObject **p0;
                ::org::apache::lucene::analysis::CharArraySet a1((jobject) NULL);
                PyTypeObject **p1;
                EnglishAnalyzer object((jobject) NULL);

                if (!parseArgs(args, "KK", ::org::apache::lucene::analysis::CharArraySet::initializeClass, ::org::apache::lucene::analysis::CharArraySet::initializeClass, &a0, &p0, ::org::apache::lucene::analysis::t_CharArraySet::parameters_, &a1, &p1, ::org::apache::lucene::analysis::t_CharArraySet::parameters_))
                {
                  INT_CALL(object = EnglishAnalyzer(a0, a1));
                  self->object = object;
                  break;
                }
              }
             default:
             err:
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_EnglishAnalyzer_getDefaultStopSet(PyTypeObject *type)
          {
            ::org::apache::lucene::analysis::CharArraySet result((jobject) NULL);
            OBJ_CALL(result = ::org::apache::lucene::analysis::en::EnglishAnalyzer::getDefaultStopSet());
            return ::org::apache::lucene::analysis::t_CharArraySet::wrap_Object(result);
          }

          static PyObject *t_EnglishAnalyzer_get__defaultStopSet(t_EnglishAnalyzer *self, void *data)
          {
            ::org::apache::lucene::analysis::CharArraySet value((jobject) NULL);
            OBJ_CALL(value = self->object.getDefaultStopSet());
            return ::org::apache::lucene::analysis::t_CharArraySet::wrap_Object(value);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/expressions/js/JavascriptParser$AddsubContext.h"
#include "java/lang/Class.h"
#include "java/lang/Object.h"
#include "java/util/List.h"
#include "org/antlr/v4/runtime/Token.h"
#include "org/antlr/v4/runtime/atn/ParserATNSimulator.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace expressions {
        namespace js {

          ::java::lang::Class *JavascriptParser$AddsubContext::class$ = NULL;
          jmethodID *JavascriptParser$AddsubContext::mids$ = NULL;
          bool JavascriptParser$AddsubContext::live$ = false;

          jclass JavascriptParser$AddsubContext::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/expressions/js/JavascriptParser$AddsubContext");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_5b630188893587b5] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/expressions/js/JavascriptParser$ExpressionContext;)V");
              mids$[mid_expression_49ec78390f08338a] = env->getMethodID(cls, "expression", "()Ljava/util/List;");
              mids$[mid_expression_a4fb3fdc55d1c64a] = env->getMethodID(cls, "expression", "(I)Lorg/apache/lucene/expressions/js/JavascriptParser$ExpressionContext;");

              class$ = new ::java::lang::Class(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          JavascriptParser$AddsubContext::JavascriptParser$AddsubContext(const ::org::apache::lucene::expressions::js::JavascriptParser$ExpressionContext & a0) : ::org::apache::lucene::expressions::js::JavascriptParser$ExpressionContext(env->newObject(initializeClass, &mids$, mid_init$_5b630188893587b5, a0.this$)) {}

          ::java::util::List JavascriptParser$AddsubContext::expression() const
          {
            return ::java::util::List(env->callObjectMethod(this$, mids$[mid_expression_49ec78390f08338a]));
          }

          ::org::apache::lucene::expressions::js::JavascriptParser$ExpressionContext JavascriptParser$AddsubContext::expression(jint a0) const
          {
            return ::org::apache::lucene::expressions::js::JavascriptParser$ExpressionContext(env->callObjectMethod(this$, mids$[mid_expression_a4fb3fdc55d1c64a], a0));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace expressions {
        namespace js {
          static PyObject *t_JavascriptParser$AddsubContext_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_JavascriptParser$AddsubContext_instance_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_JavascriptParser$AddsubContext_of_(t_JavascriptParser$AddsubContext *self, PyObject *args);
          static int t_JavascriptParser$AddsubContext_init_(t_JavascriptParser$AddsubContext *self, PyObject *args, PyObject *kwds);
          static PyObject *t_JavascriptParser$AddsubContext_expression(t_JavascriptParser$AddsubContext *self, PyObject *args);
          static PyObject *t_JavascriptParser$AddsubContext_get__parameters_(t_JavascriptParser$AddsubContext *self, void *data);
          static PyGetSetDef t_JavascriptParser$AddsubContext__fields_[] = {
            DECLARE_GET_FIELD(t_JavascriptParser$AddsubContext, parameters_),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_JavascriptParser$AddsubContext__methods_[] = {
            DECLARE_METHOD(t_JavascriptParser$AddsubContext, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_JavascriptParser$AddsubContext, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_JavascriptParser$AddsubContext, of_, METH_VARARGS),
            DECLARE_METHOD(t_JavascriptParser$AddsubContext, expression, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          static PyType_Slot PY_TYPE_SLOTS(JavascriptParser$AddsubContext)[] = {
            { Py_tp_methods, t_JavascriptParser$AddsubContext__methods_ },
            { Py_tp_init, (void *) t_JavascriptParser$AddsubContext_init_ },
            { Py_tp_getset, t_JavascriptParser$AddsubContext__fields_ },
            { 0, NULL }
          };

          static PyType_Def *PY_TYPE_BASES(JavascriptParser$AddsubContext)[] = {
            &PY_TYPE_DEF(::org::apache::lucene::expressions::js::JavascriptParser$ExpressionContext),
            NULL
          };

          DEFINE_TYPE(JavascriptParser$AddsubContext, t_JavascriptParser$AddsubContext, JavascriptParser$AddsubContext);
          PyObject *t_JavascriptParser$AddsubContext::wrap_Object(const JavascriptParser$AddsubContext& object, PyTypeObject *p0, PyTypeObject *p1)
          {
            PyObject *obj = t_JavascriptParser$AddsubContext::wrap_Object(object);
            if (obj != NULL && obj != Py_None)
            {
              t_JavascriptParser$AddsubContext *self = (t_JavascriptParser$AddsubContext *) obj;
              self->parameters[0] = p0;
              self->parameters[1] = p1;
            }
            return obj;
          }

          PyObject *t_JavascriptParser$AddsubContext::wrap_jobject(const jobject& object, PyTypeObject *p0, PyTypeObject *p1)
          {
            PyObject *obj = t_JavascriptParser$AddsubContext::wrap_jobject(object);
            if (obj != NULL && obj != Py_None)
            {
              t_JavascriptParser$AddsubContext *self = (t_JavascriptParser$AddsubContext *) obj;
              self->parameters[0] = p0;
              self->parameters[1] = p1;
            }
            return obj;
          }

          void t_JavascriptParser$AddsubContext::install(PyObject *module)
          {
            installType(&PY_TYPE(JavascriptParser$AddsubContext), &PY_TYPE_DEF(JavascriptParser$AddsubContext), module, "JavascriptParser$AddsubContext", 0);
          }

          void t_JavascriptParser$AddsubContext::initialize(PyObject *module)
          {
            PyObject_SetAttrString((PyObject *) PY_TYPE(JavascriptParser$AddsubContext), "class_", make_descriptor(JavascriptParser$AddsubContext::initializeClass, 1));
            PyObject_SetAttrString((PyObject *) PY_TYPE(JavascriptParser$AddsubContext), "wrapfn_", make_descriptor(t_JavascriptParser$AddsubContext::wrap_jobject));
            PyObject_SetAttrString((PyObject *) PY_TYPE(JavascriptParser$AddsubContext), "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_JavascriptParser$AddsubContext_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, JavascriptParser$AddsubContext::initializeClass, 1)))
              return NULL;
            return t_JavascriptParser$AddsubContext::wrap_Object(JavascriptParser$AddsubContext(((t_JavascriptParser$AddsubContext *) arg)->object.this$));
          }
          static PyObject *t_JavascriptParser$AddsubContext_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, JavascriptParser$AddsubContext::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static PyObject *t_JavascriptParser$AddsubContext_of_(t_JavascriptParser$AddsubContext *self, PyObject *args)
          {
            if (!parseArg(args, "T", 2, &(self->parameters)))
              Py_RETURN_SELF;
            return PyErr_SetArgsError((PyObject *) self, "of_", args);
          }

          static int t_JavascriptParser$AddsubContext_init_(t_JavascriptParser$AddsubContext *self, PyObject *args, PyObject *kwds)
          {
            ::org::apache::lucene::expressions::js::JavascriptParser$ExpressionContext a0((jobject) NULL);
            PyTypeObject **p0;
            JavascriptParser$AddsubContext object((jobject) NULL);

            if (!parseArgs(args, "K", ::org::apache::lucene::expressions::js::JavascriptParser$ExpressionContext::initializeClass, &a0, &p0, ::org::apache::lucene::expressions::js::t_JavascriptParser$ExpressionContext::parameters_))
            {
              INT_CALL(object = JavascriptParser$AddsubContext(a0));
              self->object = object;
              self->parameters[0] = ::org::antlr::v4::runtime::PY_TYPE(Token);
              self->parameters[1] = ::org::antlr::v4::runtime::atn::PY_TYPE(ParserATNSimulator);
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_JavascriptParser$AddsubContext_expression(t_JavascriptParser$AddsubContext *self, PyObject *args)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 0:
              {
                ::java::util::List result((jobject) NULL);
                OBJ_CALL(result = self->object.expression());
                return ::java::util::t_List::wrap_Object(result, ::org::apache::lucene::expressions::js::PY_TYPE(JavascriptParser$ExpressionContext));
              }
              break;
             case 1:
              {
                jint a0;
                ::org::apache::lucene::expressions::js::JavascriptParser$ExpressionContext result((jobject) NULL);

                if (!parseArgs(args, "I", &a0))
                {
                  OBJ_CALL(result = self->object.expression(a0));
                  return ::org::apache::lucene::expressions::js::t_JavascriptParser$ExpressionContext::wrap_Object(result);
                }
              }
            }

            PyErr_SetArgsError((PyObject *) self, "expression", args);
            return NULL;
          }
          static PyObject *t_JavascriptParser$AddsubContext_get__parameters_(t_JavascriptParser$AddsubContext *self, void *data)
          {
            return typeParameters(self->parameters, sizeof(self->parameters));
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/BooleanQuery$TooManyClauses.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {

        ::java::lang::Class *BooleanQuery$TooManyClauses::class$ = NULL;
        jmethodID *BooleanQuery$TooManyClauses::mids$ = NULL;
        bool BooleanQuery$TooManyClauses::live$ = false;

        jclass BooleanQuery$TooManyClauses::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/search/BooleanQuery$TooManyClauses");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_f2cc1bce94666404] = env->getMethodID(cls, "<init>", "()V");

            class$ = new ::java::lang::Class(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        BooleanQuery$TooManyClauses::BooleanQuery$TooManyClauses() : ::java::lang::RuntimeException(env->newObject(initializeClass, &mids$, mid_init$_f2cc1bce94666404)) {}
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        static PyObject *t_BooleanQuery$TooManyClauses_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_BooleanQuery$TooManyClauses_instance_(PyTypeObject *type, PyObject *arg);
        static int t_BooleanQuery$TooManyClauses_init_(t_BooleanQuery$TooManyClauses *self, PyObject *args, PyObject *kwds);

        static PyMethodDef t_BooleanQuery$TooManyClauses__methods_[] = {
          DECLARE_METHOD(t_BooleanQuery$TooManyClauses, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_BooleanQuery$TooManyClauses, instance_, METH_O | METH_CLASS),
          { NULL, NULL, 0, NULL }
        };

        static PyType_Slot PY_TYPE_SLOTS(BooleanQuery$TooManyClauses)[] = {
          { Py_tp_methods, t_BooleanQuery$TooManyClauses__methods_ },
          { Py_tp_init, (void *) t_BooleanQuery$TooManyClauses_init_ },
          { 0, NULL }
        };

        static PyType_Def *PY_TYPE_BASES(BooleanQuery$TooManyClauses)[] = {
          &PY_TYPE_DEF(::java::lang::RuntimeException),
          NULL
        };

        DEFINE_TYPE(BooleanQuery$TooManyClauses, t_BooleanQuery$TooManyClauses, BooleanQuery$TooManyClauses);

        void t_BooleanQuery$TooManyClauses::install(PyObject *module)
        {
          installType(&PY_TYPE(BooleanQuery$TooManyClauses), &PY_TYPE_DEF(BooleanQuery$TooManyClauses), module, "BooleanQuery$TooManyClauses", 0);
        }

        void t_BooleanQuery$TooManyClauses::initialize(PyObject *module)
        {
          PyObject_SetAttrString((PyObject *) PY_TYPE(BooleanQuery$TooManyClauses), "class_", make_descriptor(BooleanQuery$TooManyClauses::initializeClass, 1));
          PyObject_SetAttrString((PyObject *) PY_TYPE(BooleanQuery$TooManyClauses), "wrapfn_", make_descriptor(t_BooleanQuery$TooManyClauses::wrap_jobject));
          PyObject_SetAttrString((PyObject *) PY_TYPE(BooleanQuery$TooManyClauses), "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_BooleanQuery$TooManyClauses_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, BooleanQuery$TooManyClauses::initializeClass, 1)))
            return NULL;
          return t_BooleanQuery$TooManyClauses::wrap_Object(BooleanQuery$TooManyClauses(((t_BooleanQuery$TooManyClauses *) arg)->object.this$));
        }
        static PyObject *t_BooleanQuery$TooManyClauses_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, BooleanQuery$TooManyClauses::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_BooleanQuery$TooManyClauses_init_(t_BooleanQuery$TooManyClauses *self, PyObject *args, PyObject *kwds)
        {
          BooleanQuery$TooManyClauses object((jobject) NULL);

          INT_CALL(object = BooleanQuery$TooManyClauses());
          self->object = object;

          return 0;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/util/packed/MonotonicBlockPackedReader.h"
#include "org/apache/lucene/util/packed/MonotonicBlockPackedReader.h"
#include "org/apache/lucene/store/IndexInput.h"
#include "org/apache/lucene/util/Accountable.h"
#include "java/lang/Class.h"
#include "java/lang/String.h"
#include "java/io/IOException.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        namespace packed {

          ::java::lang::Class *MonotonicBlockPackedReader::class$ = NULL;
          jmethodID *MonotonicBlockPackedReader::mids$ = NULL;
          bool MonotonicBlockPackedReader::live$ = false;

          jclass MonotonicBlockPackedReader::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/util/packed/MonotonicBlockPackedReader");

              mids$ = new jmethodID[max_mid];
              mids$[mid_get_d711eecdc469624a] = env->getMethodID(cls, "get", "(J)J");
              mids$[mid_of_25fc22e8c5435465] = env->getStaticMethodID(cls, "of", "(Lorg/apache/lucene/store/IndexInput;IIJZ)Lorg/apache/lucene/util/packed/MonotonicBlockPackedReader;");
              mids$[mid_ramBytesUsed_2e5ae9edcb9b072f] = env->getMethodID(cls, "ramBytesUsed", "()J");
              mids$[mid_size_2e5ae9edcb9b072f] = env->getMethodID(cls, "size", "()J");
              mids$[mid_toString_db9b55ba01e03e4b] = env->getMethodID(cls, "toString", "()Ljava/lang/String;");

              class$ = new ::java::lang::Class(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          jlong MonotonicBlockPackedReader::get(jlong a0) const
          {
            return env->callLongMethod(this$, mids$[mid_get_d711eecdc469624a], a0);
          }

          MonotonicBlockPackedReader MonotonicBlockPackedReader::of(const ::org::apache::lucene::store::IndexInput & a0, jint a1, jint a2, jlong a3, jboolean a4)
          {
            jclass cls = env->getClass(initializeClass);
            return MonotonicBlockPackedReader(env->callStaticObjectMethod(cls, mids$[mid_of_25fc22e8c5435465], a0.this$, a1, a2, a3, a4));
          }

          jlong MonotonicBlockPackedReader::ramBytesUsed() const
          {
            return env->callLongMethod(this$, mids$[mid_ramBytesUsed_2e5ae9edcb9b072f]);
          }

          jlong MonotonicBlockPackedReader::size() const
          {
            return env->callLongMethod(this$, mids$[mid_size_2e5ae9edcb9b072f]);
          }

          ::java::lang::String MonotonicBlockPackedReader::toString() const
          {
            return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_db9b55ba01e03e4b]));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        namespace packed {
          static PyObject *t_MonotonicBlockPackedReader_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_MonotonicBlockPackedReader_instance_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_MonotonicBlockPackedReader_get(t_MonotonicBlockPackedReader *self, PyObject *args);
          static PyObject *t_MonotonicBlockPackedReader_of(PyTypeObject *type, PyObject *args);
          static PyObject *t_MonotonicBlockPackedReader_ramBytesUsed(t_MonotonicBlockPackedReader *self);
          static PyObject *t_MonotonicBlockPackedReader_size(t_MonotonicBlockPackedReader *self);
          static PyObject *t_MonotonicBlockPackedReader_toString(t_MonotonicBlockPackedReader *self, PyObject *args);

          static PyMethodDef t_MonotonicBlockPackedReader__methods_[] = {
            DECLARE_METHOD(t_MonotonicBlockPackedReader, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_MonotonicBlockPackedReader, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_MonotonicBlockPackedReader, get, METH_VARARGS),
            DECLARE_METHOD(t_MonotonicBlockPackedReader, of, METH_VARARGS | METH_CLASS),
            DECLARE_METHOD(t_MonotonicBlockPackedReader, ramBytesUsed, METH_NOARGS),
            DECLARE_METHOD(t_MonotonicBlockPackedReader, size, METH_NOARGS),
            DECLARE_METHOD(t_MonotonicBlockPackedReader, toString, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          static PyType_Slot PY_TYPE_SLOTS(MonotonicBlockPackedReader)[] = {
            { Py_tp_methods, t_MonotonicBlockPackedReader__methods_ },
            { Py_tp_init, (void *) abstract_init },
            { 0, NULL }
          };

          static PyType_Def *PY_TYPE_BASES(MonotonicBlockPackedReader)[] = {
            &PY_TYPE_DEF(::org::apache::lucene::util::LongValues),
            NULL
          };

          DEFINE_TYPE(MonotonicBlockPackedReader, t_MonotonicBlockPackedReader, MonotonicBlockPackedReader);

          void t_MonotonicBlockPackedReader::install(PyObject *module)
          {
            installType(&PY_TYPE(MonotonicBlockPackedReader), &PY_TYPE_DEF(MonotonicBlockPackedReader), module, "MonotonicBlockPackedReader", 0);
          }

          void t_MonotonicBlockPackedReader::initialize(PyObject *module)
          {
            PyObject_SetAttrString((PyObject *) PY_TYPE(MonotonicBlockPackedReader), "class_", make_descriptor(MonotonicBlockPackedReader::initializeClass, 1));
            PyObject_SetAttrString((PyObject *) PY_TYPE(MonotonicBlockPackedReader), "wrapfn_", make_descriptor(t_MonotonicBlockPackedReader::wrap_jobject));
            PyObject_SetAttrString((PyObject *) PY_TYPE(MonotonicBlockPackedReader), "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_MonotonicBlockPackedReader_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, MonotonicBlockPackedReader::initializeClass, 1)))
              return NULL;
            return t_MonotonicBlockPackedReader::wrap_Object(MonotonicBlockPackedReader(((t_MonotonicBlockPackedReader *) arg)->object.this$));
          }
          static PyObject *t_MonotonicBlockPackedReader_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, MonotonicBlockPackedReader::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static PyObject *t_MonotonicBlockPackedReader_get(t_MonotonicBlockPackedReader *self, PyObject *args)
          {
            jlong a0;
            jlong result;

            if (!parseArgs(args, "J", &a0))
            {
              OBJ_CALL(result = self->object.get(a0));
              return PyLong_FromLongLong((PY_LONG_LONG) result);
            }

            return callSuper(PY_TYPE(MonotonicBlockPackedReader), (PyObject *) self, "get", args, 2);
          }

          static PyObject *t_MonotonicBlockPackedReader_of(PyTypeObject *type, PyObject *args)
          {
            ::org::apache::lucene::store::IndexInput a0((jobject) NULL);
            jint a1;
            jint a2;
            jlong a3;
            jboolean a4;
            MonotonicBlockPackedReader result((jobject) NULL);

            if (!parseArgs(args, "kIIJZ", ::org::apache::lucene::store::IndexInput::initializeClass, &a0, &a1, &a2, &a3, &a4))
            {
              OBJ_CALL(result = ::org::apache::lucene::util::packed::MonotonicBlockPackedReader::of(a0, a1, a2, a3, a4));
              return t_MonotonicBlockPackedReader::wrap_Object(result);
            }

            PyErr_SetArgsError(type, "of", args);
            return NULL;
          }

          static PyObject *t_MonotonicBlockPackedReader_ramBytesUsed(t_MonotonicBlockPackedReader *self)
          {
            jlong result;
            OBJ_CALL(result = self->object.ramBytesUsed());
            return PyLong_FromLongLong((PY_LONG_LONG) result);
          }

          static PyObject *t_MonotonicBlockPackedReader_size(t_MonotonicBlockPackedReader *self)
          {
            jlong result;
            OBJ_CALL(result = self->object.size());
            return PyLong_FromLongLong((PY_LONG_LONG) result);
          }

          static PyObject *t_MonotonicBlockPackedReader_toString(t_MonotonicBlockPackedReader *self, PyObject *args)
          {
            ::java::lang::String result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.toString());
              return j2p(result);
            }

            return callSuper(PY_TYPE(MonotonicBlockPackedReader), (PyObject *) self, "toString", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/ru/RussianLightStemmer.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace ru {

          ::java::lang::Class *RussianLightStemmer::class$ = NULL;
          jmethodID *RussianLightStemmer::mids$ = NULL;
          bool RussianLightStemmer::live$ = false;

          jclass RussianLightStemmer::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/ru/RussianLightStemmer");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_f2cc1bce94666404] = env->getMethodID(cls, "<init>", "()V");
              mids$[mid_stem_d4655f2a19359017] = env->getMethodID(cls, "stem", "([CI)I");

              class$ = new ::java::lang::Class(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          RussianLightStemmer::RussianLightStemmer() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_f2cc1bce94666404)) {}

          jint RussianLightStemmer::stem(const JArray< jchar > & a0, jint a1) const
          {
            return env->callIntMethod(this$, mids$[mid_stem_d4655f2a19359017], a0.this$, a1);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace ru {
          static PyObject *t_RussianLightStemmer_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_RussianLightStemmer_instance_(PyTypeObject *type, PyObject *arg);
          static int t_RussianLightStemmer_init_(t_RussianLightStemmer *self, PyObject *args, PyObject *kwds);
          static PyObject *t_RussianLightStemmer_stem(t_RussianLightStemmer *self, PyObject *args);

          static PyMethodDef t_RussianLightStemmer__methods_[] = {
            DECLARE_METHOD(t_RussianLightStemmer, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_RussianLightStemmer, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_RussianLightStemmer, stem, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          static PyType_Slot PY_TYPE_SLOTS(RussianLightStemmer)[] = {
            { Py_tp_methods, t_RussianLightStemmer__methods_ },
            { Py_tp_init, (void *) t_RussianLightStemmer_init_ },
            { 0, NULL }
          };

          static PyType_Def *PY_TYPE_BASES(RussianLightStemmer)[] = {
            &PY_TYPE_DEF(::java::lang::Object),
            NULL
          };

          DEFINE_TYPE(RussianLightStemmer, t_RussianLightStemmer, RussianLightStemmer);

          void t_RussianLightStemmer::install(PyObject *module)
          {
            installType(&PY_TYPE(RussianLightStemmer), &PY_TYPE_DEF(RussianLightStemmer), module, "RussianLightStemmer", 0);
          }

          void t_RussianLightStemmer::initialize(PyObject *module)
          {
            PyObject_SetAttrString((PyObject *) PY_TYPE(RussianLightStemmer), "class_", make_descriptor(RussianLightStemmer::initializeClass, 1));
            PyObject_SetAttrString((PyObject *) PY_TYPE(RussianLightStemmer), "wrapfn_", make_descriptor(t_RussianLightStemmer::wrap_jobject));
            PyObject_SetAttrString((PyObject *) PY_TYPE(RussianLightStemmer), "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_RussianLightStemmer_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, RussianLightStemmer::initializeClass, 1)))
              return NULL;
            return t_RussianLightStemmer::wrap_Object(RussianLightStemmer(((t_RussianLightStemmer *) arg)->object.this$));
          }
          static PyObject *t_RussianLightStemmer_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, RussianLightStemmer::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_RussianLightStemmer_init_(t_RussianLightStemmer *self, PyObject *args, PyObject *kwds)
          {
            RussianLightStemmer object((jobject) NULL);

            INT_CALL(object = RussianLightStemmer());
            self->object = object;

            return 0;
          }

          static PyObject *t_RussianLightStemmer_stem(t_RussianLightStemmer *self, PyObject *args)
          {
            JArray< jchar > a0((jobject) NULL);
            jint a1;
            jint result;

            if (!parseArgs(args, "[CI", &a0, &a1))
            {
              OBJ_CALL(result = self->object.stem(a0, a1));
              return PyLong_FromLong((long) result);
            }

            PyErr_SetArgsError((PyObject *) self, "stem", args);
            return NULL;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "java/lang/Object.h"
#include "java/lang/Object.h"
#include "java/lang/String.h"
#include "java/lang/InterruptedException.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace java {
  namespace lang {

    ::java::lang::Class *Object::class$ = NULL;
    jmethodID *Object::mids$ = NULL;
    bool Object::live$ = false;

    jclass Object::initializeClass(bool getOnly)
    {
      if (getOnly)
        return (jclass) (live$ ? class$->this$ : NULL);
      if (class$ == NULL)
      {
        jclass cls = (jclass) env->findClass("java/lang/Object");

        mids$ = new jmethodID[max_mid];
        mids$[mid_init$_f2cc1bce94666404] = env->getMethodID(cls, "<init>", "()V");
        mids$[mid_equals_8b72f2dcdde6fd1d] = env->getMethodID(cls, "equals", "(Ljava/lang/Object;)Z");
        mids$[mid_getClass_9df2cc6ebce035fe] = env->getMethodID(cls, "getClass", "()Ljava/lang/Class;");
        mids$[mid_hashCode_9972fcc56b44e79d] = env->getMethodID(cls, "hashCode", "()I");
        mids$[mid_notify_f2cc1bce94666404] = env->getMethodID(cls, "notify", "()V");
        mids$[mid_notifyAll_f2cc1bce94666404] = env->getMethodID(cls, "notifyAll", "()V");
        mids$[mid_toString_db9b55ba01e03e4b] = env->getMethodID(cls, "toString", "()Ljava/lang/String;");
        mids$[mid_wait_f2cc1bce94666404] = env->getMethodID(cls, "wait", "()V");
        mids$[mid_wait_9c778c9bce6694df] = env->getMethodID(cls, "wait", "(J)V");
        mids$[mid_wait_7cbcb52ba5068aff] = env->getMethodID(cls, "wait", "(JI)V");
        mids$[mid_finalize_f2cc1bce94666404] = env->getMethodID(cls, "finalize", "()V");
        mids$[mid_clone_d6bcd06f3102c4d9] = env->getMethodID(cls, "clone", "()Ljava/lang/Object;");

        class$ = new ::java::lang::Class(cls);
        live$ = true;
      }
      return (jclass) class$->this$;
    }

    Object::Object() : ::JObject(env->newObject(initializeClass, &mids$, mid_init$_f2cc1bce94666404)) {}

    jboolean Object::equals(const Object & a0) const
    {
      return env->callBooleanMethod(this$, mids$[mid_equals_8b72f2dcdde6fd1d], a0.this$);
    }

    ::java::lang::Class Object::getClass() const
    {
      return ::java::lang::Class(env->callObjectMethod(this$, mids$[mid_getClass_9df2cc6ebce035fe]));
    }

    jint Object::hashCode() const
    {
      return env->callIntMethod(this$, mids$[mid_hashCode_9972fcc56b44e79d]);
    }

    void Object::notify() const
    {
      env->callVoidMethod(this$, mids$[mid_notify_f2cc1bce94666404]);
    }

    void Object::notifyAll() const
    {
      env->callVoidMethod(this$, mids$[mid_notifyAll_f2cc1bce94666404]);
    }

    ::java::lang::String Object::toString() const
    {
      return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_db9b55ba01e03e4b]));
    }

    void Object::wait() const
    {
      env->callVoidMethod(this$, mids$[mid_wait_f2cc1bce94666404]);
    }

    void Object::wait(jlong a0) const
    {
      env->callVoidMethod(this$, mids$[mid_wait_9c778c9bce6694df], a0);
    }

    void Object::wait(jlong a0, jint a1) const
    {
      env->callVoidMethod(this$, mids$[mid_wait_7cbcb52ba5068aff], a0, a1);
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace java {
  namespace lang {
    static PyObject *t_Object_cast_(PyTypeObject *type, PyObject *arg);
    static PyObject *t_Object_instance_(PyTypeObject *type, PyObject *arg);
    static int t_Object_init_(t_Object *self, PyObject *args, PyObject *kwds);
    static PyObject *t_Object_equals(t_Object *self, PyObject *arg);
    static PyObject *t_Object_getClass(t_Object *self);
    static PyObject *t_Object_hashCode(t_Object *self);
    static PyObject *t_Object_notify(t_Object *self);
    static PyObject *t_Object_notifyAll(t_Object *self);
    static PyObject *t_Object_toString(t_Object *self);
    static PyObject *t_Object_wait(t_Object *self, PyObject *args);
    static PyObject *t_Object_get__class(t_Object *self, void *data);
    static PyGetSetDef t_Object__fields_[] = {
      DECLARE_GET_FIELD(t_Object, class),
      { NULL, NULL, NULL, NULL, NULL }
    };

    static PyMethodDef t_Object__methods_[] = {
      DECLARE_METHOD(t_Object, cast_, METH_O | METH_CLASS),
      DECLARE_METHOD(t_Object, instance_, METH_O | METH_CLASS),
      DECLARE_METHOD(t_Object, equals, METH_O),
      DECLARE_METHOD(t_Object, getClass, METH_NOARGS),
      DECLARE_METHOD(t_Object, hashCode, METH_NOARGS),
      DECLARE_METHOD(t_Object, notify, METH_NOARGS),
      DECLARE_METHOD(t_Object, notifyAll, METH_NOARGS),
      DECLARE_METHOD(t_Object, toString, METH_NOARGS),
      DECLARE_METHOD(t_Object, wait, METH_VARARGS),
      { NULL, NULL, 0, NULL }
    };

    static PyType_Slot PY_TYPE_SLOTS(Object)[] = {
      { Py_tp_methods, t_Object__methods_ },
      { Py_tp_init, (void *) t_Object_init_ },
      { Py_tp_getset, t_Object__fields_ },
      { 0, NULL }
    };

    static PyType_Def *PY_TYPE_BASES(Object)[] = {
      &PY_TYPE_DEF(JObject),
      NULL
    };

    DEFINE_TYPE(Object, t_Object, Object);

    void t_Object::install(PyObject *module)
    {
      installType(&PY_TYPE(Object), &PY_TYPE_DEF(Object), module, "Object", 0);
    }

    void t_Object::initialize(PyObject *module)
    {
      PyObject_SetAttrString((PyObject *) PY_TYPE(Object), "class_", make_descriptor(Object::initializeClass, 1));
      PyObject_SetAttrString((PyObject *) PY_TYPE(Object), "wrapfn_", make_descriptor(t_Object::wrap_jobject));
      PyObject_SetAttrString((PyObject *) PY_TYPE(Object), "boxfn_", make_descriptor(boxObject));
    }

    static PyObject *t_Object_cast_(PyTypeObject *type, PyObject *arg)
    {
      if (!(arg = castCheck(arg, Object::initializeClass, 1)))
        return NULL;
      return t_Object::wrap_Object(Object(((t_Object *) arg)->object.this$));
    }
    static PyObject *t_Object_instance_(PyTypeObject *type, PyObject *arg)
    {
      if (!castCheck(arg, Object::initializeClass, 0))
        Py_RETURN_FALSE;
      Py_RETURN_TRUE;
    }

    static int t_Object_init_(t_Object *self, PyObject *args, PyObject *kwds)
    {
      Object object((jobject) NULL);

      INT_CALL(object = Object());
      self->object = object;

      return 0;
    }

    static PyObject *t_Object_equals(t_Object *self, PyObject *arg)
    {
      Object a0((jobject) NULL);
      jboolean result;

      if (!parseArg(arg, "o", &a0))
      {
        OBJ_CALL(result = self->object.equals(a0));
        Py_RETURN_BOOL(result);
      }

      PyErr_SetArgsError((PyObject *) self, "equals", arg);
      return NULL;
    }

    static PyObject *t_Object_getClass(t_Object *self)
    {
      ::java::lang::Class result((jobject) NULL);
      OBJ_CALL(result = self->object.getClass());
      return ::java::lang::t_Class::wrap_Object(result);
    }

    static PyObject *t_Object_hashCode(t_Object *self)
    {
      jint result;
      OBJ_CALL(result = self->object.hashCode());
      return PyLong_FromLong((long) result);
    }

    static PyObject *t_Object_notify(t_Object *self)
    {
      OBJ_CALL(self->object.notify());
      Py_RETURN_NONE;
    }

    static PyObject *t_Object_notifyAll(t_Object *self)
    {
      OBJ_CALL(self->object.notifyAll());
      Py_RETURN_NONE;
    }

    static PyObject *t_Object_toString(t_Object *self)
    {
      ::java::lang::String result((jobject) NULL);
      OBJ_CALL(result = self->object.toString());
      return j2p(result);
    }

    static PyObject *t_Object_wait(t_Object *self, PyObject *args)
    {
      switch (PyTuple_GET_SIZE(args)) {
       case 0:
        {
          OBJ_CALL(self->object.wait());
          Py_RETURN_NONE;
        }
        break;
       case 1:
        {
          jlong a0;

          if (!parseArgs(args, "J", &a0))
          {
            OBJ_CALL(self->object.wait(a0));
            Py_RETURN_NONE;
          }
        }
        break;
       case 2:
        {
          jlong a0;
          jint a1;

          if (!parseArgs(args, "JI", &a0, &a1))
          {
            OBJ_CALL(self->object.wait(a0, a1));
            Py_RETURN_NONE;
          }
        }
      }

      PyErr_SetArgsError((PyObject *) self, "wait", args);
      return NULL;
    }

    static PyObject *t_Object_get__class(t_Object *self, void *data)
    {
      ::java::lang::Class value((jobject) NULL);
      OBJ_CALL(value = self->object.getClass());
      return ::java::lang::t_Class::wrap_Object(value);
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/miscellaneous/PerFieldAnalyzerWrapper.h"
#include "java/util/Map.h"
#include "java/lang/String.h"
#include "org/apache/lucene/analysis/Analyzer.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace miscellaneous {

          ::java::lang::Class *PerFieldAnalyzerWrapper::class$ = NULL;
          jmethodID *PerFieldAnalyzerWrapper::mids$ = NULL;
          bool PerFieldAnalyzerWrapper::live$ = false;

          jclass PerFieldAnalyzerWrapper::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/miscellaneous/PerFieldAnalyzerWrapper");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_651b708fb3f85e6e] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/analysis/Analyzer;)V");
              mids$[mid_init$_de518fbba4c05dd3] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/analysis/Analyzer;Ljava/util/Map;)V");
              mids$[mid_toString_db9b55ba01e03e4b] = env->getMethodID(cls, "toString", "()Ljava/lang/String;");
              mids$[mid_getWrappedAnalyzer_dad9f41704206408] = env->getMethodID(cls, "getWrappedAnalyzer", "(Ljava/lang/String;)Lorg/apache/lucene/analysis/Analyzer;");

              class$ = new ::java::lang::Class(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          PerFieldAnalyzerWrapper::PerFieldAnalyzerWrapper(const ::org::apache::lucene::analysis::Analyzer & a0) : ::org::apache::lucene::analysis::DelegatingAnalyzerWrapper(env->newObject(initializeClass, &mids$, mid_init$_651b708fb3f85e6e, a0.this$)) {}

          PerFieldAnalyzerWrapper::PerFieldAnalyzerWrapper(const ::org::apache::lucene::analysis::Analyzer & a0, const ::java::util::Map & a1) : ::org::apache::lucene::analysis::DelegatingAnalyzerWrapper(env->newObject(initializeClass, &mids$, mid_init$_de518fbba4c05dd3, a0.this$, a1.this$)) {}

          ::java::lang::String PerFieldAnalyzerWrapper::toString() const
          {
            return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_db9b55ba01e03e4b]));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace miscellaneous {
          static PyObject *t_PerFieldAnalyzerWrapper_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_PerFieldAnalyzerWrapper_instance_(PyTypeObject *type, PyObject *arg);
          static int t_PerFieldAnalyzerWrapper_init_(t_PerFieldAnalyzerWrapper *self, PyObject *args, PyObject *kwds);
          static PyObject *t_PerFieldAnalyzerWrapper_toString(t_PerFieldAnalyzerWrapper *self, PyObject *args);

          static PyMethodDef t_PerFieldAnalyzerWrapper__methods_[] = {
            DECLARE_METHOD(t_PerFieldAnalyzerWrapper, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_PerFieldAnalyzerWrapper, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_PerFieldAnalyzerWrapper, toString, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          static PyType_Slot PY_TYPE_SLOTS(PerFieldAnalyzerWrapper)[] = {
            { Py_tp_methods, t_PerFieldAnalyzerWrapper__methods_ },
            { Py_tp_init, (void *) t_PerFieldAnalyzerWrapper_init_ },
            { 0, NULL }
          };

          static PyType_Def *PY_TYPE_BASES(PerFieldAnalyzerWrapper)[] = {
            &PY_TYPE_DEF(::org::apache::lucene::analysis::DelegatingAnalyzerWrapper),
            NULL
          };

          DEFINE_TYPE(PerFieldAnalyzerWrapper, t_PerFieldAnalyzerWrapper, PerFieldAnalyzerWrapper);

          void t_PerFieldAnalyzerWrapper::install(PyObject *module)
          {
            installType(&PY_TYPE(PerFieldAnalyzerWrapper), &PY_TYPE_DEF(PerFieldAnalyzerWrapper), module, "PerFieldAnalyzerWrapper", 0);
          }

          void t_PerFieldAnalyzerWrapper::initialize(PyObject *module)
          {
            PyObject_SetAttrString((PyObject *) PY_TYPE(PerFieldAnalyzerWrapper), "class_", make_descriptor(PerFieldAnalyzerWrapper::initializeClass, 1));
            PyObject_SetAttrString((PyObject *) PY_TYPE(PerFieldAnalyzerWrapper), "wrapfn_", make_descriptor(t_PerFieldAnalyzerWrapper::wrap_jobject));
            PyObject_SetAttrString((PyObject *) PY_TYPE(PerFieldAnalyzerWrapper), "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_PerFieldAnalyzerWrapper_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, PerFieldAnalyzerWrapper::initializeClass, 1)))
              return NULL;
            return t_PerFieldAnalyzerWrapper::wrap_Object(PerFieldAnalyzerWrapper(((t_PerFieldAnalyzerWrapper *) arg)->object.this$));
          }
          static PyObject *t_PerFieldAnalyzerWrapper_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, PerFieldAnalyzerWrapper::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_PerFieldAnalyzerWrapper_init_(t_PerFieldAnalyzerWrapper *self, PyObject *args, PyObject *kwds)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 1:
              {
                ::org::apache::lucene::analysis::Analyzer a0((jobject) NULL);
                PerFieldAnalyzerWrapper object((jobject) NULL);

                if (!parseArgs(args, "k", ::org::apache::lucene::analysis::Analyzer::initializeClass, &a0))
                {
                  INT_CALL(object = PerFieldAnalyzerWrapper(a0));
                  self->object = object;
                  break;
                }
              }
              goto err;
             case 2:
              {
                ::org::apache::lucene::analysis::Analyzer a0((jobject) NULL);
                ::java::util::Map a1((jobject) NULL);
                PyTypeObject **p1;
                PerFieldAnalyzerWrapper object((jobject) NULL);

                if (!parseArgs(args, "kK", ::org::apache::lucene::analysis::Analyzer::initializeClass, ::java::util::Map::initializeClass, &a0, &a1, &p1, ::java::util::t_Map::parameters_))
                {
                  INT_CALL(object = PerFieldAnalyzerWrapper(a0, a1));
                  self->object = object;
                  break;
                }
              }
             default:
             err:
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_PerFieldAnalyzerWrapper_toString(t_PerFieldAnalyzerWrapper *self, PyObject *args)
          {
            ::java::lang::String result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.toString());
              return j2p(result);
            }

            return callSuper(PY_TYPE(PerFieldAnalyzerWrapper), (PyObject *) self, "toString", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/util/StableMSBRadixSorter.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {

        ::java::lang::Class *StableMSBRadixSorter::class$ = NULL;
        jmethodID *StableMSBRadixSorter::mids$ = NULL;
        bool StableMSBRadixSorter::live$ = false;

        jclass StableMSBRadixSorter::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/util/StableMSBRadixSorter");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_040c4cd0390c5aff] = env->getMethodID(cls, "<init>", "(I)V");
            mids$[mid_restore_438c62480c481c65] = env->getMethodID(cls, "restore", "(II)V");
            mids$[mid_getFallbackSorter_941f3cb31d983b76] = env->getMethodID(cls, "getFallbackSorter", "(I)Lorg/apache/lucene/util/Sorter;");
            mids$[mid_reorder_50c137e6aaa1731d] = env->getMethodID(cls, "reorder", "(II[I[II)V");
            mids$[mid_save_438c62480c481c65] = env->getMethodID(cls, "save", "(II)V");

            class$ = new ::java::lang::Class(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        StableMSBRadixSorter::StableMSBRadixSorter(jint a0) : ::org::apache::lucene::util::MSBRadixSorter(env->newObject(initializeClass, &mids$, mid_init$_040c4cd0390c5aff, a0)) {}
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        static PyObject *t_StableMSBRadixSorter_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_StableMSBRadixSorter_instance_(PyTypeObject *type, PyObject *arg);
        static int t_StableMSBRadixSorter_init_(t_StableMSBRadixSorter *self, PyObject *args, PyObject *kwds);

        static PyMethodDef t_StableMSBRadixSorter__methods_[] = {
          DECLARE_METHOD(t_StableMSBRadixSorter, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_StableMSBRadixSorter, instance_, METH_O | METH_CLASS),
          { NULL, NULL, 0, NULL }
        };

        static PyType_Slot PY_TYPE_SLOTS(StableMSBRadixSorter)[] = {
          { Py_tp_methods, t_StableMSBRadixSorter__methods_ },
          { Py_tp_init, (void *) t_StableMSBRadixSorter_init_ },
          { 0, NULL }
        };

        static PyType_Def *PY_TYPE_BASES(StableMSBRadixSorter)[] = {
          &PY_TYPE_DEF(::org::apache::lucene::util::MSBRadixSorter),
          NULL
        };

        DEFINE_TYPE(StableMSBRadixSorter, t_StableMSBRadixSorter, StableMSBRadixSorter);

        void t_StableMSBRadixSorter::install(PyObject *module)
        {
          installType(&PY_TYPE(StableMSBRadixSorter), &PY_TYPE_DEF(StableMSBRadixSorter), module, "StableMSBRadixSorter", 0);
        }

        void t_StableMSBRadixSorter::initialize(PyObject *module)
        {
          PyObject_SetAttrString((PyObject *) PY_TYPE(StableMSBRadixSorter), "class_", make_descriptor(StableMSBRadixSorter::initializeClass, 1));
          PyObject_SetAttrString((PyObject *) PY_TYPE(StableMSBRadixSorter), "wrapfn_", make_descriptor(t_StableMSBRadixSorter::wrap_jobject));
          PyObject_SetAttrString((PyObject *) PY_TYPE(StableMSBRadixSorter), "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_StableMSBRadixSorter_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, StableMSBRadixSorter::initializeClass, 1)))
            return NULL;
          return t_StableMSBRadixSorter::wrap_Object(StableMSBRadixSorter(((t_StableMSBRadixSorter *) arg)->object.this$));
        }
        static PyObject *t_StableMSBRadixSorter_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, StableMSBRadixSorter::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_StableMSBRadixSorter_init_(t_StableMSBRadixSorter *self, PyObject *args, PyObject *kwds)
        {
          jint a0;
          StableMSBRadixSorter object((jobject) NULL);

          if (!parseArgs(args, "I", &a0))
          {
            INT_CALL(object = StableMSBRadixSorter(a0));
            self->object = object;
          }
          else
          {
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/ngram/NGramTokenizerFactory.h"
#include "org/apache/lucene/util/AttributeFactory.h"
#include "java/util/Map.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/analysis/Tokenizer.h"
#include "java/lang/String.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace ngram {

          ::java::lang::Class *NGramTokenizerFactory::class$ = NULL;
          jmethodID *NGramTokenizerFactory::mids$ = NULL;
          bool NGramTokenizerFactory::live$ = false;
          ::java::lang::String *NGramTokenizerFactory::NAME = NULL;

          jclass NGramTokenizerFactory::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/ngram/NGramTokenizerFactory");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_408bd889ee3beae5] = env->getMethodID(cls, "<init>", "(Ljava/util/Map;)V");
              mids$[mid_create_824583f10752bea9] = env->getMethodID(cls, "create", "(Lorg/apache/lucene/util/AttributeFactory;)Lorg/apache/lucene/analysis/Tokenizer;");

              class$ = new ::java::lang::Class(cls);
              cls = (jclass) class$->this$;

              NAME = new ::java::lang::String(env->getStaticObjectField(cls, "NAME", "Ljava/lang/String;"));
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          NGramTokenizerFactory::NGramTokenizerFactory(const ::java::util::Map & a0) : ::org::apache::lucene::analysis::util::TokenizerFactory(env->newObject(initializeClass, &mids$, mid_init$_408bd889ee3beae5, a0.this$)) {}

          ::org::apache::lucene::analysis::Tokenizer NGramTokenizerFactory::create(const ::org::apache::lucene::util::AttributeFactory & a0) const
          {
            return ::org::apache::lucene::analysis::Tokenizer(env->callObjectMethod(this$, mids$[mid_create_824583f10752bea9], a0.this$));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace ngram {
          static PyObject *t_NGramTokenizerFactory_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_NGramTokenizerFactory_instance_(PyTypeObject *type, PyObject *arg);
          static int t_NGramTokenizerFactory_init_(t_NGramTokenizerFactory *self, PyObject *args, PyObject *kwds);
          static PyObject *t_NGramTokenizerFactory_create(t_NGramTokenizerFactory *self, PyObject *args);

          static PyMethodDef t_NGramTokenizerFactory__methods_[] = {
            DECLARE_METHOD(t_NGramTokenizerFactory, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_NGramTokenizerFactory, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_NGramTokenizerFactory, create, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          static PyType_Slot PY_TYPE_SLOTS(NGramTokenizerFactory)[] = {
            { Py_tp_methods, t_NGramTokenizerFactory__methods_ },
            { Py_tp_init, (void *) t_NGramTokenizerFactory_init_ },
            { 0, NULL }
          };

          static PyType_Def *PY_TYPE_BASES(NGramTokenizerFactory)[] = {
            &PY_TYPE_DEF(::org::apache::lucene::analysis::util::TokenizerFactory),
            NULL
          };

          DEFINE_TYPE(NGramTokenizerFactory, t_NGramTokenizerFactory, NGramTokenizerFactory);

          void t_NGramTokenizerFactory::install(PyObject *module)
          {
            installType(&PY_TYPE(NGramTokenizerFactory), &PY_TYPE_DEF(NGramTokenizerFactory), module, "NGramTokenizerFactory", 0);
          }

          void t_NGramTokenizerFactory::initialize(PyObject *module)
          {
            PyObject_SetAttrString((PyObject *) PY_TYPE(NGramTokenizerFactory), "class_", make_descriptor(NGramTokenizerFactory::initializeClass, 1));
            PyObject_SetAttrString((PyObject *) PY_TYPE(NGramTokenizerFactory), "wrapfn_", make_descriptor(t_NGramTokenizerFactory::wrap_jobject));
            PyObject_SetAttrString((PyObject *) PY_TYPE(NGramTokenizerFactory), "boxfn_", make_descriptor(boxObject));
            env->getClass(NGramTokenizerFactory::initializeClass);
            PyObject_SetAttrString((PyObject *) PY_TYPE(NGramTokenizerFactory), "NAME", make_descriptor(j2p(*NGramTokenizerFactory::NAME)));
          }

          static PyObject *t_NGramTokenizerFactory_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, NGramTokenizerFactory::initializeClass, 1)))
              return NULL;
            return t_NGramTokenizerFactory::wrap_Object(NGramTokenizerFactory(((t_NGramTokenizerFactory *) arg)->object.this$));
          }
          static PyObject *t_NGramTokenizerFactory_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, NGramTokenizerFactory::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_NGramTokenizerFactory_init_(t_NGramTokenizerFactory *self, PyObject *args, PyObject *kwds)
          {
            ::java::util::Map a0((jobject) NULL);
            PyTypeObject **p0;
            NGramTokenizerFactory object((jobject) NULL);

            if (!parseArgs(args, "K", ::java::util::Map::initializeClass, &a0, &p0, ::java::util::t_Map::parameters_))
            {
              INT_CALL(object = NGramTokenizerFactory(a0));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_NGramTokenizerFactory_create(t_NGramTokenizerFactory *self, PyObject *args)
          {
            ::org::apache::lucene::util::AttributeFactory a0((jobject) NULL);
            ::org::apache::lucene::analysis::Tokenizer result((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::util::AttributeFactory::initializeClass, &a0))
            {
              OBJ_CALL(result = self->object.create(a0));
              return ::org::apache::lucene::analysis::t_Tokenizer::wrap_Object(result);
            }

            return callSuper(PY_TYPE(NGramTokenizerFactory), (PyObject *) self, "create", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/util/SetOnce.h"
#include "java/lang/Cloneable.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {

        ::java::lang::Class *SetOnce::class$ = NULL;
        jmethodID *SetOnce::mids$ = NULL;
        bool SetOnce::live$ = false;

        jclass SetOnce::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/util/SetOnce");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_f2cc1bce94666404] = env->getMethodID(cls, "<init>", "()V");
            mids$[mid_init$_d20f626183f72f7d] = env->getMethodID(cls, "<init>", "(Ljava/lang/Object;)V");
            mids$[mid_get_d6bcd06f3102c4d9] = env->getMethodID(cls, "get", "()Ljava/lang/Object;");
            mids$[mid_set_d20f626183f72f7d] = env->getMethodID(cls, "set", "(Ljava/lang/Object;)V");
            mids$[mid_trySet_8b72f2dcdde6fd1d] = env->getMethodID(cls, "trySet", "(Ljava/lang/Object;)Z");

            class$ = new ::java::lang::Class(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        SetOnce::SetOnce() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_f2cc1bce94666404)) {}

        SetOnce::SetOnce(const ::java::lang::Object & a0) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_d20f626183f72f7d, a0.this$)) {}

        ::java::lang::Object SetOnce::get() const
        {
          return ::java::lang::Object(env->callObjectMethod(this$, mids$[mid_get_d6bcd06f3102c4d9]));
        }

        void SetOnce::set(const ::java::lang::Object & a0) const
        {
          env->callVoidMethod(this$, mids$[mid_set_d20f626183f72f7d], a0.this$);
        }

        jboolean SetOnce::trySet(const ::java::lang::Object & a0) const
        {
          return env->callBooleanMethod(this$, mids$[mid_trySet_8b72f2dcdde6fd1d], a0.this$);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"
#include "org/apache/lucene/util/SetOnce$AlreadySetException.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        static PyObject *t_SetOnce_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_SetOnce_instance_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_SetOnce_of_(t_SetOnce *self, PyObject *args);
        static int t_SetOnce_init_(t_SetOnce *self, PyObject *args, PyObject *kwds);
        static PyObject *t_SetOnce_get(t_SetOnce *self);
        static PyObject *t_SetOnce_set(t_SetOnce *self, PyObject *arg);
        static PyObject *t_SetOnce_trySet(t_SetOnce *self, PyObject *arg);
        static PyObject *t_SetOnce_get__parameters_(t_SetOnce *self, void *data);
        static PyGetSetDef t_SetOnce__fields_[] = {
          DECLARE_GET_FIELD(t_SetOnce, parameters_),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_SetOnce__methods_[] = {
          DECLARE_METHOD(t_SetOnce, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_SetOnce, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_SetOnce, of_, METH_VARARGS),
          DECLARE_METHOD(t_SetOnce, get, METH_NOARGS),
          DECLARE_METHOD(t_SetOnce, set, METH_O),
          DECLARE_METHOD(t_SetOnce, trySet, METH_O),
          { NULL, NULL, 0, NULL }
        };

        static PyType_Slot PY_TYPE_SLOTS(SetOnce)[] = {
          { Py_tp_methods, t_SetOnce__methods_ },
          { Py_tp_init, (void *) t_SetOnce_init_ },
          { Py_tp_getset, t_SetOnce__fields_ },
          { 0, NULL }
        };

        static PyType_Def *PY_TYPE_BASES(SetOnce)[] = {
          &PY_TYPE_DEF(::java::lang::Object),
          NULL
        };

        DEFINE_TYPE(SetOnce, t_SetOnce, SetOnce);
        PyObject *t_SetOnce::wrap_Object(const SetOnce& object, PyTypeObject *p0)
        {
          PyObject *obj = t_SetOnce::wrap_Object(object);
          if (obj != NULL && obj != Py_None)
          {
            t_SetOnce *self = (t_SetOnce *) obj;
            self->parameters[0] = p0;
          }
          return obj;
        }

        PyObject *t_SetOnce::wrap_jobject(const jobject& object, PyTypeObject *p0)
        {
          PyObject *obj = t_SetOnce::wrap_jobject(object);
          if (obj != NULL && obj != Py_None)
          {
            t_SetOnce *self = (t_SetOnce *) obj;
            self->parameters[0] = p0;
          }
          return obj;
        }

        void t_SetOnce::install(PyObject *module)
        {
          installType(&PY_TYPE(SetOnce), &PY_TYPE_DEF(SetOnce), module, "SetOnce", 0);
          PyObject_SetAttrString((PyObject *) PY_TYPE(SetOnce), "AlreadySetException", make_descriptor(&PY_TYPE_DEF(SetOnce$AlreadySetException)));
        }

        void t_SetOnce::initialize(PyObject *module)
        {
          PyObject_SetAttrString((PyObject *) PY_TYPE(SetOnce), "class_", make_descriptor(SetOnce::initializeClass, 1));
          PyObject_SetAttrString((PyObject *) PY_TYPE(SetOnce), "wrapfn_", make_descriptor(t_SetOnce::wrap_jobject));
          PyObject_SetAttrString((PyObject *) PY_TYPE(SetOnce), "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_SetOnce_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, SetOnce::initializeClass, 1)))
            return NULL;
          return t_SetOnce::wrap_Object(SetOnce(((t_SetOnce *) arg)->object.this$));
        }
        static PyObject *t_SetOnce_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, SetOnce::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static PyObject *t_SetOnce_of_(t_SetOnce *self, PyObject *args)
        {
          if (!parseArg(args, "T", 1, &(self->parameters)))
            Py_RETURN_SELF;
          return PyErr_SetArgsError((PyObject *) self, "of_", args);
        }

        static int t_SetOnce_init_(t_SetOnce *self, PyObject *args, PyObject *kwds)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 0:
            {
              SetOnce object((jobject) NULL);

              INT_CALL(object = SetOnce());
              self->object = object;
              break;
            }
           case 1:
            {
              ::java::lang::Object a0((jobject) NULL);
              SetOnce object((jobject) NULL);

              if (!parseArgs(args, "o", &a0))
              {
                INT_CALL(object = SetOnce(a0));
                self->object = object;
                break;
              }
            }
           default:
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }

        static PyObject *t_SetOnce_get(t_SetOnce *self)
        {
          ::java::lang::Object result((jobject) NULL);
          OBJ_CALL(result = self->object.get());
          return self->parameters[0] != NULL ? wrapType(self->parameters[0], result.this$) : ::java::lang::t_Object::wrap_Object(result);
        }

        static PyObject *t_SetOnce_set(t_SetOnce *self, PyObject *arg)
        {
          ::java::lang::Object a0((jobject) NULL);

          if (!parseArg(arg, "O", self->parameters[0], &a0))
          {
            OBJ_CALL(self->object.set(a0));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "set", arg);
          return NULL;
        }

        static PyObject *t_SetOnce_trySet(t_SetOnce *self, PyObject *arg)
        {
          ::java::lang::Object a0((jobject) NULL);
          jboolean result;

          if (!parseArg(arg, "O", self->parameters[0], &a0))
          {
            OBJ_CALL(result = self->object.trySet(a0));
            Py_RETURN_BOOL(result);
          }

          PyErr_SetArgsError((PyObject *) self, "trySet", arg);
          return NULL;
        }
        static PyObject *t_SetOnce_get__parameters_(t_SetOnce *self, void *data)
        {
          return typeParameters(self->parameters, sizeof(self->parameters));
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/index/SortFieldProvider.h"
#include "org/apache/lucene/search/SortField.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/store/DataOutput.h"
#include "org/apache/lucene/index/SortFieldProvider.h"
#include "java/lang/String.h"
#include "java/util/Set.h"
#include "java/io/IOException.h"
#include "java/lang/ClassLoader.h"
#include "org/apache/lucene/util/NamedSPILoader$NamedSPI.h"
#include "org/apache/lucene/store/DataInput.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {

        ::java::lang::Class *SortFieldProvider::class$ = NULL;
        jmethodID *SortFieldProvider::mids$ = NULL;
        bool SortFieldProvider::live$ = false;

        jclass SortFieldProvider::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/index/SortFieldProvider");

            mids$ = new jmethodID[max_mid];
            mids$[mid_availableSortFieldProviders_7dcf4034c6d1a92a] = env->getStaticMethodID(cls, "availableSortFieldProviders", "()Ljava/util/Set;");
            mids$[mid_forName_4d5d914ea854834c] = env->getStaticMethodID(cls, "forName", "(Ljava/lang/String;)Lorg/apache/lucene/index/SortFieldProvider;");
            mids$[mid_getName_db9b55ba01e03e4b] = env->getMethodID(cls, "getName", "()Ljava/lang/String;");
            mids$[mid_readSortField_f5c813112fa668ab] = env->getMethodID(cls, "readSortField", "(Lorg/apache/lucene/store/DataInput;)Lorg/apache/lucene/search/SortField;");
            mids$[mid_reloadSortFieldProviders_98a876e82795b112] = env->getStaticMethodID(cls, "reloadSortFieldProviders", "(Ljava/lang/ClassLoader;)V");
            mids$[mid_write_d394f16dc9680504] = env->getStaticMethodID(cls, "write", "(Lorg/apache/lucene/search/SortField;Lorg/apache/lucene/store/DataOutput;)V");
            mids$[mid_writeSortField_d394f16dc9680504] = env->getMethodID(cls, "writeSortField", "(Lorg/apache/lucene/search/SortField;Lorg/apache/lucene/store/DataOutput;)V");

            class$ = new ::java::lang::Class(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        ::java::util::Set SortFieldProvider::availableSortFieldProviders()
        {
          jclass cls = env->getClass(initializeClass);
          return ::java::util::Set(env->callStaticObjectMethod(cls, mids$[mid_availableSortFieldProviders_7dcf4034c6d1a92a]));
        }

        SortFieldProvider SortFieldProvider::forName(const ::java::lang::String & a0)
        {
          jclass cls = env->getClass(initializeClass);
          return SortFieldProvider(env->callStaticObjectMethod(cls, mids$[mid_forName_4d5d914ea854834c], a0.this$));
        }

        ::java::lang::String SortFieldProvider::getName() const
        {
          return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_getName_db9b55ba01e03e4b]));
        }

        ::org::apache::lucene::search::SortField SortFieldProvider::readSortField(const ::org::apache::lucene::store::DataInput & a0) const
        {
          return ::org::apache::lucene::search::SortField(env->callObjectMethod(this$, mids$[mid_readSortField_f5c813112fa668ab], a0.this$));
        }

        void SortFieldProvider::reloadSortFieldProviders(const ::java::lang::ClassLoader & a0)
        {
          jclass cls = env->getClass(initializeClass);
          env->callStaticVoidMethod(cls, mids$[mid_reloadSortFieldProviders_98a876e82795b112], a0.this$);
        }

        void SortFieldProvider::write(const ::org::apache::lucene::search::SortField & a0, const ::org::apache::lucene::store::DataOutput & a1)
        {
          jclass cls = env->getClass(initializeClass);
          env->callStaticVoidMethod(cls, mids$[mid_write_d394f16dc9680504], a0.this$, a1.this$);
        }

        void SortFieldProvider::writeSortField(const ::org::apache::lucene::search::SortField & a0, const ::org::apache::lucene::store::DataOutput & a1) const
        {
          env->callVoidMethod(this$, mids$[mid_writeSortField_d394f16dc9680504], a0.this$, a1.this$);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {
        static PyObject *t_SortFieldProvider_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_SortFieldProvider_instance_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_SortFieldProvider_availableSortFieldProviders(PyTypeObject *type);
        static PyObject *t_SortFieldProvider_forName(PyTypeObject *type, PyObject *arg);
        static PyObject *t_SortFieldProvider_getName(t_SortFieldProvider *self);
        static PyObject *t_SortFieldProvider_readSortField(t_SortFieldProvider *self, PyObject *arg);
        static PyObject *t_SortFieldProvider_reloadSortFieldProviders(PyTypeObject *type, PyObject *arg);
        static PyObject *t_SortFieldProvider_write(PyTypeObject *type, PyObject *args);
        static PyObject *t_SortFieldProvider_writeSortField(t_SortFieldProvider *self, PyObject *args);
        static PyObject *t_SortFieldProvider_get__name(t_SortFieldProvider *self, void *data);
        static PyGetSetDef t_SortFieldProvider__fields_[] = {
          DECLARE_GET_FIELD(t_SortFieldProvider, name),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_SortFieldProvider__methods_[] = {
          DECLARE_METHOD(t_SortFieldProvider, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_SortFieldProvider, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_SortFieldProvider, availableSortFieldProviders, METH_NOARGS | METH_CLASS),
          DECLARE_METHOD(t_SortFieldProvider, forName, METH_O | METH_CLASS),
          DECLARE_METHOD(t_SortFieldProvider, getName, METH_NOARGS),
          DECLARE_METHOD(t_SortFieldProvider, readSortField, METH_O),
          DECLARE_METHOD(t_SortFieldProvider, reloadSortFieldProviders, METH_O | METH_CLASS),
          DECLARE_METHOD(t_SortFieldProvider, write, METH_VARARGS | METH_CLASS),
          DECLARE_METHOD(t_SortFieldProvider, writeSortField, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        static PyType_Slot PY_TYPE_SLOTS(SortFieldProvider)[] = {
          { Py_tp_methods, t_SortFieldProvider__methods_ },
          { Py_tp_init, (void *) abstract_init },
          { Py_tp_getset, t_SortFieldProvider__fields_ },
          { 0, NULL }
        };

        static PyType_Def *PY_TYPE_BASES(SortFieldProvider)[] = {
          &PY_TYPE_DEF(::java::lang::Object),
          NULL
        };

        DEFINE_TYPE(SortFieldProvider, t_SortFieldProvider, SortFieldProvider);

        void t_SortFieldProvider::install(PyObject *module)
        {
          installType(&PY_TYPE(SortFieldProvider), &PY_TYPE_DEF(SortFieldProvider), module, "SortFieldProvider", 0);
        }

        void t_SortFieldProvider::initialize(PyObject *module)
        {
          PyObject_SetAttrString((PyObject *) PY_TYPE(SortFieldProvider), "class_", make_descriptor(SortFieldProvider::initializeClass, 1));
          PyObject_SetAttrString((PyObject *) PY_TYPE(SortFieldProvider), "wrapfn_", make_descriptor(t_SortFieldProvider::wrap_jobject));
          PyObject_SetAttrString((PyObject *) PY_TYPE(SortFieldProvider), "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_SortFieldProvider_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, SortFieldProvider::initializeClass, 1)))
            return NULL;
          return t_SortFieldProvider::wrap_Object(SortFieldProvider(((t_SortFieldProvider *) arg)->object.this$));
        }
        static PyObject *t_SortFieldProvider_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, SortFieldProvider::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static PyObject *t_SortFieldProvider_availableSortFieldProviders(PyTypeObject *type)
        {
          ::java::util::Set result((jobject) NULL);
          OBJ_CALL(result = ::org::apache::lucene::index::SortFieldProvider::availableSortFieldProviders());
          return ::java::util::t_Set::wrap_Object(result, ::java::lang::PY_TYPE(String));
        }

        static PyObject *t_SortFieldProvider_forName(PyTypeObject *type, PyObject *arg)
        {
          ::java::lang::String a0((jobject) NULL);
          SortFieldProvider result((jobject) NULL);

          if (!parseArg(arg, "s", &a0))
          {
            OBJ_CALL(result = ::org::apache::lucene::index::SortFieldProvider::forName(a0));
            return t_SortFieldProvider::wrap_Object(result);
          }

          PyErr_SetArgsError(type, "forName", arg);
          return NULL;
        }

        static PyObject *t_SortFieldProvider_getName(t_SortFieldProvider *self)
        {
          ::java::lang::String result((jobject) NULL);
          OBJ_CALL(result = self->object.getName());
          return j2p(result);
        }

        static PyObject *t_SortFieldProvider_readSortField(t_SortFieldProvider *self, PyObject *arg)
        {
          ::org::apache::lucene::store::DataInput a0((jobject) NULL);
          ::org::apache::lucene::search::SortField result((jobject) NULL);

          if (!parseArg(arg, "k", ::org::apache::lucene::store::DataInput::initializeClass, &a0))
          {
            OBJ_CALL(result = self->object.readSortField(a0));
            return ::org::apache::lucene::search::t_SortField::wrap_Object(result);
          }

          PyErr_SetArgsError((PyObject *) self, "readSortField", arg);
          return NULL;
        }

        static PyObject *t_SortFieldProvider_reloadSortFieldProviders(PyTypeObject *type, PyObject *arg)
        {
          ::java::lang::ClassLoader a0((jobject) NULL);

          if (!parseArg(arg, "k", ::java::lang::ClassLoader::initializeClass, &a0))
          {
            OBJ_CALL(::org::apache::lucene::index::SortFieldProvider::reloadSortFieldProviders(a0));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError(type, "reloadSortFieldProviders", arg);
          return NULL;
        }

        static PyObject *t_SortFieldProvider_write(PyTypeObject *type, PyObject *args)
        {
          ::org::apache::lucene::search::SortField a0((jobject) NULL);
          ::org::apache::lucene::store::DataOutput a1((jobject) NULL);

          if (!parseArgs(args, "kk", ::org::apache::lucene::search::SortField::initializeClass, ::org::apache::lucene::store::DataOutput::initializeClass, &a0, &a1))
          {
            OBJ_CALL(::org::apache::lucene::index::SortFieldProvider::write(a0, a1));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError(type, "write", args);
          return NULL;
        }

        static PyObject *t_SortFieldProvider_writeSortField(t_SortFieldProvider *self, PyObject *args)
        {
          ::org::apache::lucene::search::SortField a0((jobject) NULL);
          ::org::apache::lucene::store::DataOutput a1((jobject) NULL);

          if (!parseArgs(args, "kk", ::org::apache::lucene::search::SortField::initializeClass, ::org::apache::lucene::store::DataOutput::initializeClass, &a0, &a1))
          {
            OBJ_CALL(self->object.writeSortField(a0, a1));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "writeSortField", args);
          return NULL;
        }

        static PyObject *t_SortFieldProvider_get__name(t_SortFieldProvider *self, void *data)
        {
          ::java::lang::String value((jobject) NULL);
          OBJ_CALL(value = self->object.getName());
          return j2p(value);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/charfilter/HTMLStripCharFilterFactory.h"
#include "java/util/Map.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/analysis/charfilter/HTMLStripCharFilter.h"
#include "java/lang/String.h"
#include "java/io/Reader.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace charfilter {

          ::java::lang::Class *HTMLStripCharFilterFactory::class$ = NULL;
          jmethodID *HTMLStripCharFilterFactory::mids$ = NULL;
          bool HTMLStripCharFilterFactory::live$ = false;
          ::java::lang::String *HTMLStripCharFilterFactory::NAME = NULL;

          jclass HTMLStripCharFilterFactory::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/charfilter/HTMLStripCharFilterFactory");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_408bd889ee3beae5] = env->getMethodID(cls, "<init>", "(Ljava/util/Map;)V");
              mids$[mid_create_0f72fcd850874098] = env->getMethodID(cls, "create", "(Ljava/io/Reader;)Lorg/apache/lucene/analysis/charfilter/HTMLStripCharFilter;");

              class$ = new ::java::lang::Class(cls);
              cls = (jclass) class$->this$;

              NAME = new ::java::lang::String(env->getStaticObjectField(cls, "NAME", "Ljava/lang/String;"));
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          HTMLStripCharFilterFactory::HTMLStripCharFilterFactory(const ::java::util::Map & a0) : ::org::apache::lucene::analysis::util::CharFilterFactory(env->newObject(initializeClass, &mids$, mid_init$_408bd889ee3beae5, a0.this$)) {}

          ::org::apache::lucene::analysis::charfilter::HTMLStripCharFilter HTMLStripCharFilterFactory::create(const ::java::io::Reader & a0) const
          {
            return ::org::apache::lucene::analysis::charfilter::HTMLStripCharFilter(env->callObjectMethod(this$, mids$[mid_create_0f72fcd850874098], a0.this$));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace charfilter {
          static PyObject *t_HTMLStripCharFilterFactory_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_HTMLStripCharFilterFactory_instance_(PyTypeObject *type, PyObject *arg);
          static int t_HTMLStripCharFilterFactory_init_(t_HTMLStripCharFilterFactory *self, PyObject *args, PyObject *kwds);
          static PyObject *t_HTMLStripCharFilterFactory_create(t_HTMLStripCharFilterFactory *self, PyObject *args);

          static PyMethodDef t_HTMLStripCharFilterFactory__methods_[] = {
            DECLARE_METHOD(t_HTMLStripCharFilterFactory, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_HTMLStripCharFilterFactory, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_HTMLStripCharFilterFactory, create, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          static PyType_Slot PY_TYPE_SLOTS(HTMLStripCharFilterFactory)[] = {
            { Py_tp_methods, t_HTMLStripCharFilterFactory__methods_ },
            { Py_tp_init, (void *) t_HTMLStripCharFilterFactory_init_ },
            { 0, NULL }
          };

          static PyType_Def *PY_TYPE_BASES(HTMLStripCharFilterFactory)[] = {
            &PY_TYPE_DEF(::org::apache::lucene::analysis::util::CharFilterFactory),
            NULL
          };

          DEFINE_TYPE(HTMLStripCharFilterFactory, t_HTMLStripCharFilterFactory, HTMLStripCharFilterFactory);

          void t_HTMLStripCharFilterFactory::install(PyObject *module)
          {
            installType(&PY_TYPE(HTMLStripCharFilterFactory), &PY_TYPE_DEF(HTMLStripCharFilterFactory), module, "HTMLStripCharFilterFactory", 0);
          }

          void t_HTMLStripCharFilterFactory::initialize(PyObject *module)
          {
            PyObject_SetAttrString((PyObject *) PY_TYPE(HTMLStripCharFilterFactory), "class_", make_descriptor(HTMLStripCharFilterFactory::initializeClass, 1));
            PyObject_SetAttrString((PyObject *) PY_TYPE(HTMLStripCharFilterFactory), "wrapfn_", make_descriptor(t_HTMLStripCharFilterFactory::wrap_jobject));
            PyObject_SetAttrString((PyObject *) PY_TYPE(HTMLStripCharFilterFactory), "boxfn_", make_descriptor(boxObject));
            env->getClass(HTMLStripCharFilterFactory::initializeClass);
            PyObject_SetAttrString((PyObject *) PY_TYPE(HTMLStripCharFilterFactory), "NAME", make_descriptor(j2p(*HTMLStripCharFilterFactory::NAME)));
          }

          static PyObject *t_HTMLStripCharFilterFactory_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, HTMLStripCharFilterFactory::initializeClass, 1)))
              return NULL;
            return t_HTMLStripCharFilterFactory::wrap_Object(HTMLStripCharFilterFactory(((t_HTMLStripCharFilterFactory *) arg)->object.this$));
          }
          static PyObject *t_HTMLStripCharFilterFactory_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, HTMLStripCharFilterFactory::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_HTMLStripCharFilterFactory_init_(t_HTMLStripCharFilterFactory *self, PyObject *args, PyObject *kwds)
          {
            ::java::util::Map a0((jobject) NULL);
            PyTypeObject **p0;
            HTMLStripCharFilterFactory object((jobject) NULL);

            if (!parseArgs(args, "K", ::java::util::Map::initializeClass, &a0, &p0, ::java::util::t_Map::parameters_))
            {
              INT_CALL(object = HTMLStripCharFilterFactory(a0));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_HTMLStripCharFilterFactory_create(t_HTMLStripCharFilterFactory *self, PyObject *args)
          {
            ::java::io::Reader a0((jobject) NULL);
            ::org::apache::lucene::analysis::charfilter::HTMLStripCharFilter result((jobject) NULL);

            if (!parseArgs(args, "k", ::java::io::Reader::initializeClass, &a0))
            {
              OBJ_CALL(result = self->object.create(a0));
              return ::org::apache::lucene::analysis::charfilter::t_HTMLStripCharFilter::wrap_Object(result);
            }

            return callSuper(PY_TYPE(HTMLStripCharFilterFactory), (PyObject *) self, "create", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/facet/taxonomy/writercache/NameHashIntCacheLRU.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace facet {
        namespace taxonomy {
          namespace writercache {

            ::java::lang::Class *NameHashIntCacheLRU::class$ = NULL;
            jmethodID *NameHashIntCacheLRU::mids$ = NULL;
            bool NameHashIntCacheLRU::live$ = false;

            jclass NameHashIntCacheLRU::initializeClass(bool getOnly)
            {
              if (getOnly)
                return (jclass) (live$ ? class$->this$ : NULL);
              if (class$ == NULL)
              {
                jclass cls = (jclass) env->findClass("org/apache/lucene/facet/taxonomy/writercache/NameHashIntCacheLRU");

                class$ = new ::java::lang::Class(cls);
                live$ = true;
              }
              return (jclass) class$->this$;
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace facet {
        namespace taxonomy {
          namespace writercache {
            static PyObject *t_NameHashIntCacheLRU_cast_(PyTypeObject *type, PyObject *arg);
            static PyObject *t_NameHashIntCacheLRU_instance_(PyTypeObject *type, PyObject *arg);

            static PyMethodDef t_NameHashIntCacheLRU__methods_[] = {
              DECLARE_METHOD(t_NameHashIntCacheLRU, cast_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_NameHashIntCacheLRU, instance_, METH_O | METH_CLASS),
              { NULL, NULL, 0, NULL }
            };

            static PyType_Slot PY_TYPE_SLOTS(NameHashIntCacheLRU)[] = {
              { Py_tp_methods, t_NameHashIntCacheLRU__methods_ },
              { Py_tp_init, (void *) abstract_init },
              { 0, NULL }
            };

            static PyType_Def *PY_TYPE_BASES(NameHashIntCacheLRU)[] = {
              &PY_TYPE_DEF(::org::apache::lucene::facet::taxonomy::writercache::NameIntCacheLRU),
              NULL
            };

            DEFINE_TYPE(NameHashIntCacheLRU, t_NameHashIntCacheLRU, NameHashIntCacheLRU);

            void t_NameHashIntCacheLRU::install(PyObject *module)
            {
              installType(&PY_TYPE(NameHashIntCacheLRU), &PY_TYPE_DEF(NameHashIntCacheLRU), module, "NameHashIntCacheLRU", 0);
            }

            void t_NameHashIntCacheLRU::initialize(PyObject *module)
            {
              PyObject_SetAttrString((PyObject *) PY_TYPE(NameHashIntCacheLRU), "class_", make_descriptor(NameHashIntCacheLRU::initializeClass, 1));
              PyObject_SetAttrString((PyObject *) PY_TYPE(NameHashIntCacheLRU), "wrapfn_", make_descriptor(t_NameHashIntCacheLRU::wrap_jobject));
              PyObject_SetAttrString((PyObject *) PY_TYPE(NameHashIntCacheLRU), "boxfn_", make_descriptor(boxObject));
            }

            static PyObject *t_NameHashIntCacheLRU_cast_(PyTypeObject *type, PyObject *arg)
            {
              if (!(arg = castCheck(arg, NameHashIntCacheLRU::initializeClass, 1)))
                return NULL;
              return t_NameHashIntCacheLRU::wrap_Object(NameHashIntCacheLRU(((t_NameHashIntCacheLRU *) arg)->object.this$));
            }
            static PyObject *t_NameHashIntCacheLRU_instance_(PyTypeObject *type, PyObject *arg)
            {
              if (!castCheck(arg, NameHashIntCacheLRU::initializeClass, 0))
                Py_RETURN_FALSE;
              Py_RETURN_TRUE;
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/util/mutable/MutableValueLong.h"
#include "java/lang/Object.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        namespace mutable$ {

          ::java::lang::Class *MutableValueLong::class$ = NULL;
          jmethodID *MutableValueLong::mids$ = NULL;
          jfieldID *MutableValueLong::fids$ = NULL;
          bool MutableValueLong::live$ = false;

          jclass MutableValueLong::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/util/mutable/MutableValueLong");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_f2cc1bce94666404] = env->getMethodID(cls, "<init>", "()V");
              mids$[mid_compareSameType_5a4805a36cf611e7] = env->getMethodID(cls, "compareSameType", "(Ljava/lang/Object;)I");
              mids$[mid_copy_3a4da6d6b1464d7a] = env->getMethodID(cls, "copy", "(Lorg/apache/lucene/util/mutable/MutableValue;)V");
              mids$[mid_duplicate_b6a1db04136f7d9b] = env->getMethodID(cls, "duplicate", "()Lorg/apache/lucene/util/mutable/MutableValue;");
              mids$[mid_equalsSameType_8b72f2dcdde6fd1d] = env->getMethodID(cls, "equalsSameType", "(Ljava/lang/Object;)Z");
              mids$[mid_hashCode_9972fcc56b44e79d] = env->getMethodID(cls, "hashCode", "()I");
              mids$[mid_toObject_d6bcd06f3102c4d9] = env->getMethodID(cls, "toObject", "()Ljava/lang/Object;");

              fids$ = new jfieldID[max_fid];
              fids$[fid_value] = env->getFieldID(cls, "value", "J");

              class$ = new ::java::lang::Class(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          MutableValueLong::MutableValueLong() : ::org::apache::lucene::util::mutable$::MutableValue(env->newObject(initializeClass, &mids$, mid_init$_f2cc1bce94666404)) {}

          jint MutableValueLong::compareSameType(const ::java::lang::Object & a0) const
          {
            return env->callIntMethod(this$, mids$[mid_compareSameType_5a4805a36cf611e7], a0.this$);
          }

          void MutableValueLong::copy(const ::org::apache::lucene::util::mutable$::MutableValue & a0) const
          {
            env->callVoidMethod(this$, mids$[mid_copy_3a4da6d6b1464d7a], a0.this$);
          }

          ::org::apache::lucene::util::mutable$::MutableValue MutableValueLong::duplicate() const
          {
            return ::org::apache::lucene::util::mutable$::MutableValue(env->callObjectMethod(this$, mids$[mid_duplicate_b6a1db04136f7d9b]));
          }

          jboolean MutableValueLong::equalsSameType(const ::java::lang::Object & a0) const
          {
            return env->callBooleanMethod(this$, mids$[mid_equalsSameType_8b72f2dcdde6fd1d], a0.this$);
          }

          jint MutableValueLong::hashCode() const
          {
            return env->callIntMethod(this$, mids$[mid_hashCode_9972fcc56b44e79d]);
          }

          ::java::lang::Object MutableValueLong::toObject() const
          {
            return ::java::lang::Object(env->callObjectMethod(this$, mids$[mid_toObject_d6bcd06f3102c4d9]));
          }

          jlong MutableValueLong::_get_value() const
          {
            return env->getLongField(this$, fids$[fid_value]);
          }

          void MutableValueLong::_set_value(jlong a0) const
          {
            env->setLongField(this$, fids$[fid_value], a0);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        namespace mutable$ {
          static PyObject *t_MutableValueLong_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_MutableValueLong_instance_(PyTypeObject *type, PyObject *arg);
          static int t_MutableValueLong_init_(t_MutableValueLong *self, PyObject *args, PyObject *kwds);
          static PyObject *t_MutableValueLong_compareSameType(t_MutableValueLong *self, PyObject *args);
          static PyObject *t_MutableValueLong_copy(t_MutableValueLong *self, PyObject *args);
          static PyObject *t_MutableValueLong_duplicate(t_MutableValueLong *self, PyObject *args);
          static PyObject *t_MutableValueLong_equalsSameType(t_MutableValueLong *self, PyObject *args);
          static PyObject *t_MutableValueLong_hashCode(t_MutableValueLong *self, PyObject *args);
          static PyObject *t_MutableValueLong_toObject(t_MutableValueLong *self, PyObject *args);
          static PyObject *t_MutableValueLong_get__value(t_MutableValueLong *self, void *data);
          static int t_MutableValueLong_set__value(t_MutableValueLong *self, PyObject *arg, void *data);

          static PyGetSetDef t_MutableValueLong__fields_[] = {
            DECLARE_GETSET_FIELD(t_MutableValueLong, value),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_MutableValueLong__methods_[] = {
            DECLARE_METHOD(t_MutableValueLong, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_MutableValueLong, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_MutableValueLong, compareSameType, METH_VARARGS),
            DECLARE_METHOD(t_MutableValueLong, copy, METH_VARARGS),
            DECLARE_METHOD(t_MutableValueLong, duplicate, METH_VARARGS),
            DECLARE_METHOD(t_MutableValueLong, equalsSameType, METH_VARARGS),
            DECLARE_METHOD(t_MutableValueLong, hashCode, METH_VARARGS),
            DECLARE_METHOD(t_MutableValueLong, toObject, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          static PyType_Slot PY_TYPE_SLOTS(MutableValueLong)[] = {
            { Py_tp_methods, t_MutableValueLong__methods_ },
            { Py_tp_init, (void *) t_MutableValueLong_init_ },
            { Py_tp_getset, t_MutableValueLong__fields_ },
            { 0, NULL }
          };

          static PyType_Def *PY_TYPE_BASES(MutableValueLong)[] = {
            &PY_TYPE_DEF(::org::apache::lucene::util::mutable$::MutableValue),
            NULL
          };

          DEFINE_TYPE(MutableValueLong, t_MutableValueLong, MutableValueLong);

          void t_MutableValueLong::install(PyObject *module)
          {
            installType(&PY_TYPE(MutableValueLong), &PY_TYPE_DEF(MutableValueLong), module, "MutableValueLong", 0);
          }

          void t_MutableValueLong::initialize(PyObject *module)
          {
            PyObject_SetAttrString((PyObject *) PY_TYPE(MutableValueLong), "class_", make_descriptor(MutableValueLong::initializeClass, 1));
            PyObject_SetAttrString((PyObject *) PY_TYPE(MutableValueLong), "wrapfn_", make_descriptor(t_MutableValueLong::wrap_jobject));
            PyObject_SetAttrString((PyObject *) PY_TYPE(MutableValueLong), "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_MutableValueLong_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, MutableValueLong::initializeClass, 1)))
              return NULL;
            return t_MutableValueLong::wrap_Object(MutableValueLong(((t_MutableValueLong *) arg)->object.this$));
          }
          static PyObject *t_MutableValueLong_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, MutableValueLong::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_MutableValueLong_init_(t_MutableValueLong *self, PyObject *args, PyObject *kwds)
          {
            MutableValueLong object((jobject) NULL);

            INT_CALL(object = MutableValueLong());
            self->object = object;

            return 0;
          }

          static PyObject *t_MutableValueLong_compareSameType(t_MutableValueLong *self, PyObject *args)
          {
            ::java::lang::Object a0((jobject) NULL);
            jint result;

            if (!parseArgs(args, "o", &a0))
            {
              OBJ_CALL(result = self->object.compareSameType(a0));
              return PyLong_FromLong((long) result);
            }

            return callSuper(PY_TYPE(MutableValueLong), (PyObject *) self, "compareSameType", args, 2);
          }

          static PyObject *t_MutableValueLong_copy(t_MutableValueLong *self, PyObject *args)
          {
            ::org::apache::lucene::util::mutable$::MutableValue a0((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::util::mutable$::MutableValue::initializeClass, &a0))
            {
              OBJ_CALL(self->object.copy(a0));
              Py_RETURN_NONE;
            }

            return callSuper(PY_TYPE(MutableValueLong), (PyObject *) self, "copy", args, 2);
          }

          static PyObject *t_MutableValueLong_duplicate(t_MutableValueLong *self, PyObject *args)
          {
            ::org::apache::lucene::util::mutable$::MutableValue result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.duplicate());
              return ::org::apache::lucene::util::mutable$::t_MutableValue::wrap_Object(result);
            }

            return callSuper(PY_TYPE(MutableValueLong), (PyObject *) self, "duplicate", args, 2);
          }

          static PyObject *t_MutableValueLong_equalsSameType(t_MutableValueLong *self, PyObject *args)
          {
            ::java::lang::Object a0((jobject) NULL);
            jboolean result;

            if (!parseArgs(args, "o", &a0))
            {
              OBJ_CALL(result = self->object.equalsSameType(a0));
              Py_RETURN_BOOL(result);
            }

            return callSuper(PY_TYPE(MutableValueLong), (PyObject *) self, "equalsSameType", args, 2);
          }

          static PyObject *t_MutableValueLong_hashCode(t_MutableValueLong *self, PyObject *args)
          {
            jint result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.hashCode());
              return PyLong_FromLong((long) result);
            }

            return callSuper(PY_TYPE(MutableValueLong), (PyObject *) self, "hashCode", args, 2);
          }

          static PyObject *t_MutableValueLong_toObject(t_MutableValueLong *self, PyObject *args)
          {
            ::java::lang::Object result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.toObject());
              return ::java::lang::t_Object::wrap_Object(result);
            }

            return callSuper(PY_TYPE(MutableValueLong), (PyObject *) self, "toObject", args, 2);
          }

          static PyObject *t_MutableValueLong_get__value(t_MutableValueLong *self, void *data)
          {
            jlong value;
            OBJ_CALL(value = self->object._get_value());
            return PyLong_FromLongLong((PY_LONG_LONG) value);
          }
          static int t_MutableValueLong_set__value(t_MutableValueLong *self, PyObject *arg, void *data)
          {
            jlong value;
            if (!parseArg(arg, "J", &value))
            {
              INT_CALL(self->object._set_value(value));
              return 0;
            }
            PyErr_SetArgsError((PyObject *) self, "value", arg);
            return -1;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/collation/CollationAttributeFactory.h"
#include "org/apache/lucene/util/AttributeFactory.h"
#include "org/apache/lucene/collation/tokenattributes/CollatedTermAttributeImpl.h"
#include "java/text/Collator.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace collation {

        ::java::lang::Class *CollationAttributeFactory::class$ = NULL;
        jmethodID *CollationAttributeFactory::mids$ = NULL;
        bool CollationAttributeFactory::live$ = false;

        jclass CollationAttributeFactory::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/collation/CollationAttributeFactory");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_5752a611d0e456db] = env->getMethodID(cls, "<init>", "(Ljava/text/Collator;)V");
            mids$[mid_init$_857978efc63f23cc] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/util/AttributeFactory;Ljava/text/Collator;)V");
            mids$[mid_createInstance_24a1bd2bf1472156] = env->getMethodID(cls, "createInstance", "()Lorg/apache/lucene/collation/tokenattributes/CollatedTermAttributeImpl;");

            class$ = new ::java::lang::Class(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        CollationAttributeFactory::CollationAttributeFactory(const ::java::text::Collator & a0) : ::org::apache::lucene::util::AttributeFactory$StaticImplementationAttributeFactory(env->newObject(initializeClass, &mids$, mid_init$_5752a611d0e456db, a0.this$)) {}

        CollationAttributeFactory::CollationAttributeFactory(const ::org::apache::lucene::util::AttributeFactory & a0, const ::java::text::Collator & a1) : ::org::apache::lucene::util::AttributeFactory$StaticImplementationAttributeFactory(env->newObject(initializeClass, &mids$, mid_init$_857978efc63f23cc, a0.this$, a1.this$)) {}

        ::org::apache::lucene::collation::tokenattributes::CollatedTermAttributeImpl CollationAttributeFactory::createInstance() const
        {
          return ::org::apache::lucene::collation::tokenattributes::CollatedTermAttributeImpl(env->callObjectMethod(this$, mids$[mid_createInstance_24a1bd2bf1472156]));
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace collation {
        static PyObject *t_CollationAttributeFactory_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_CollationAttributeFactory_instance_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_CollationAttributeFactory_of_(t_CollationAttributeFactory *self, PyObject *args);
        static int t_CollationAttributeFactory_init_(t_CollationAttributeFactory *self, PyObject *args, PyObject *kwds);
        static PyObject *t_CollationAttributeFactory_createInstance(t_CollationAttributeFactory *self);
        static PyObject *t_CollationAttributeFactory_get__parameters_(t_CollationAttributeFactory *self, void *data);
        static PyGetSetDef t_CollationAttributeFactory__fields_[] = {
          DECLARE_GET_FIELD(t_CollationAttributeFactory, parameters_),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_CollationAttributeFactory__methods_[] = {
          DECLARE_METHOD(t_CollationAttributeFactory, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_CollationAttributeFactory, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_CollationAttributeFactory, of_, METH_VARARGS),
          DECLARE_METHOD(t_CollationAttributeFactory, createInstance, METH_NOARGS),
          { NULL, NULL, 0, NULL }
        };

        static PyType_Slot PY_TYPE_SLOTS(CollationAttributeFactory)[] = {
          { Py_tp_methods, t_CollationAttributeFactory__methods_ },
          { Py_tp_init, (void *) t_CollationAttributeFactory_init_ },
          { Py_tp_getset, t_CollationAttributeFactory__fields_ },
          { 0, NULL }
        };

        static PyType_Def *PY_TYPE_BASES(CollationAttributeFactory)[] = {
          &PY_TYPE_DEF(::org::apache::lucene::util::AttributeFactory$StaticImplementationAttributeFactory),
          NULL
        };

        DEFINE_TYPE(CollationAttributeFactory, t_CollationAttributeFactory, CollationAttributeFactory);
        PyObject *t_CollationAttributeFactory::wrap_Object(const CollationAttributeFactory& object, PyTypeObject *p0)
        {
          PyObject *obj = t_CollationAttributeFactory::wrap_Object(object);
          if (obj != NULL && obj != Py_None)
          {
            t_CollationAttributeFactory *self = (t_CollationAttributeFactory *) obj;
            self->parameters[0] = p0;
          }
          return obj;
        }

        PyObject *t_CollationAttributeFactory::wrap_jobject(const jobject& object, PyTypeObject *p0)
        {
          PyObject *obj = t_CollationAttributeFactory::wrap_jobject(object);
          if (obj != NULL && obj != Py_None)
          {
            t_CollationAttributeFactory *self = (t_CollationAttributeFactory *) obj;
            self->parameters[0] = p0;
          }
          return obj;
        }

        void t_CollationAttributeFactory::install(PyObject *module)
        {
          installType(&PY_TYPE(CollationAttributeFactory), &PY_TYPE_DEF(CollationAttributeFactory), module, "CollationAttributeFactory", 0);
        }

        void t_CollationAttributeFactory::initialize(PyObject *module)
        {
          PyObject_SetAttrString((PyObject *) PY_TYPE(CollationAttributeFactory), "class_", make_descriptor(CollationAttributeFactory::initializeClass, 1));
          PyObject_SetAttrString((PyObject *) PY_TYPE(CollationAttributeFactory), "wrapfn_", make_descriptor(t_CollationAttributeFactory::wrap_jobject));
          PyObject_SetAttrString((PyObject *) PY_TYPE(CollationAttributeFactory), "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_CollationAttributeFactory_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, CollationAttributeFactory::initializeClass, 1)))
            return NULL;
          return t_CollationAttributeFactory::wrap_Object(CollationAttributeFactory(((t_CollationAttributeFactory *) arg)->object.this$));
        }
        static PyObject *t_CollationAttributeFactory_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, CollationAttributeFactory::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static PyObject *t_CollationAttributeFactory_of_(t_CollationAttributeFactory *self, PyObject *args)
        {
          if (!parseArg(args, "T", 1, &(self->parameters)))
            Py_RETURN_SELF;
          return PyErr_SetArgsError((PyObject *) self, "of_", args);
        }

        static int t_CollationAttributeFactory_init_(t_CollationAttributeFactory *self, PyObject *args, PyObject *kwds)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 1:
            {
              ::java::text::Collator a0((jobject) NULL);
              CollationAttributeFactory object((jobject) NULL);

              if (!parseArgs(args, "k", ::java::text::Collator::initializeClass, &a0))
              {
                INT_CALL(object = CollationAttributeFactory(a0));
                self->object = object;
                self->parameters[0] = ::org::apache::lucene::collation::tokenattributes::PY_TYPE(CollatedTermAttributeImpl);
                break;
              }
            }
            goto err;
           case 2:
            {
              ::org::apache::lucene::util::AttributeFactory a0((jobject) NULL);
              ::java::text::Collator a1((jobject) NULL);
              CollationAttributeFactory object((jobject) NULL);

              if (!parseArgs(args, "kk", ::org::apache::lucene::util::AttributeFactory::initializeClass, ::java::text::Collator::initializeClass, &a0, &a1))
              {
                INT_CALL(object = CollationAttributeFactory(a0, a1));
                self->object = object;
                self->parameters[0] = ::org::apache::lucene::collation::tokenattributes::PY_TYPE(CollatedTermAttributeImpl);
                break;
              }
            }
           default:
           err:
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }

        static PyObject *t_CollationAttributeFactory_createInstance(t_CollationAttributeFactory *self)
        {
          ::org::apache::lucene::collation::tokenattributes::CollatedTermAttributeImpl result((jobject) NULL);
          OBJ_CALL(result = self->object.createInstance());
          return ::org::apache::lucene::collation::tokenattributes::t_CollatedTermAttributeImpl::wrap_Object(result);
        }
        static PyObject *t_CollationAttributeFactory_get__parameters_(t_CollationAttributeFactory *self, void *data)
        {
          return typeParameters(self->parameters, sizeof(self->parameters));
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/id/IndonesianStemFilterFactory.h"
#include "java/util/Map.h"
#include "java/lang/String.h"
#include "org/apache/lucene/analysis/TokenStream.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace id {

          ::java::lang::Class *IndonesianStemFilterFactory::class$ = NULL;
          jmethodID *IndonesianStemFilterFactory::mids$ = NULL;
          bool IndonesianStemFilterFactory::live$ = false;
          ::java::lang::String *IndonesianStemFilterFactory::NAME = NULL;

          jclass IndonesianStemFilterFactory::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/id/IndonesianStemFilterFactory");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_408bd889ee3beae5] = env->getMethodID(cls, "<init>", "(Ljava/util/Map;)V");
              mids$[mid_create_6de1e28d9d10cd9e] = env->getMethodID(cls, "create", "(Lorg/apache/lucene/analysis/TokenStream;)Lorg/apache/lucene/analysis/TokenStream;");

              class$ = new ::java::lang::Class(cls);
              cls = (jclass) class$->this$;

              NAME = new ::java::lang::String(env->getStaticObjectField(cls, "NAME", "Ljava/lang/String;"));
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          IndonesianStemFilterFactory::IndonesianStemFilterFactory(const ::java::util::Map & a0) : ::org::apache::lucene::analysis::util::TokenFilterFactory(env->newObject(initializeClass, &mids$, mid_init$_408bd889ee3beae5, a0.this$)) {}

          ::org::apache::lucene::analysis::TokenStream IndonesianStemFilterFactory::create(const ::org::apache::lucene::analysis::TokenStream & a0) const
          {
            return ::org::apache::lucene::analysis::TokenStream(env->callObjectMethod(this$, mids$[mid_create_6de1e28d9d10cd9e], a0.this$));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace id {
          static PyObject *t_IndonesianStemFilterFactory_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_IndonesianStemFilterFactory_instance_(PyTypeObject *type, PyObject *arg);
          static int t_IndonesianStemFilterFactory_init_(t_IndonesianStemFilterFactory *self, PyObject *args, PyObject *kwds);
          static PyObject *t_IndonesianStemFilterFactory_create(t_IndonesianStemFilterFactory *self, PyObject *args);

          static PyMethodDef t_IndonesianStemFilterFactory__methods_[] = {
            DECLARE_METHOD(t_IndonesianStemFilterFactory, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_IndonesianStemFilterFactory, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_IndonesianStemFilterFactory, create, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          static PyType_Slot PY_TYPE_SLOTS(IndonesianStemFilterFactory)[] = {
            { Py_tp_methods, t_IndonesianStemFilterFactory__methods_ },
            { Py_tp_init, (void *) t_IndonesianStemFilterFactory_init_ },
            { 0, NULL }
          };

          static PyType_Def *PY_TYPE_BASES(IndonesianStemFilterFactory)[] = {
            &PY_TYPE_DEF(::org::apache::lucene::analysis::util::TokenFilterFactory),
            NULL
          };

          DEFINE_TYPE(IndonesianStemFilterFactory, t_IndonesianStemFilterFactory, IndonesianStemFilterFactory);

          void t_IndonesianStemFilterFactory::install(PyObject *module)
          {
            installType(&PY_TYPE(IndonesianStemFilterFactory), &PY_TYPE_DEF(IndonesianStemFilterFactory), module, "IndonesianStemFilterFactory", 0);
          }

          void t_IndonesianStemFilterFactory::initialize(PyObject *module)
          {
            PyObject_SetAttrString((PyObject *) PY_TYPE(IndonesianStemFilterFactory), "class_", make_descriptor(IndonesianStemFilterFactory::initializeClass, 1));
            PyObject_SetAttrString((PyObject *) PY_TYPE(IndonesianStemFilterFactory), "wrapfn_", make_descriptor(t_IndonesianStemFilterFactory::wrap_jobject));
            PyObject_SetAttrString((PyObject *) PY_TYPE(IndonesianStemFilterFactory), "boxfn_", make_descriptor(boxObject));
            env->getClass(IndonesianStemFilterFactory::initializeClass);
            PyObject_SetAttrString((PyObject *) PY_TYPE(IndonesianStemFilterFactory), "NAME", make_descriptor(j2p(*IndonesianStemFilterFactory::NAME)));
          }

          static PyObject *t_IndonesianStemFilterFactory_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, IndonesianStemFilterFactory::initializeClass, 1)))
              return NULL;
            return t_IndonesianStemFilterFactory::wrap_Object(IndonesianStemFilterFactory(((t_IndonesianStemFilterFactory *) arg)->object.this$));
          }
          static PyObject *t_IndonesianStemFilterFactory_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, IndonesianStemFilterFactory::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_IndonesianStemFilterFactory_init_(t_IndonesianStemFilterFactory *self, PyObject *args, PyObject *kwds)
          {
            ::java::util::Map a0((jobject) NULL);
            PyTypeObject **p0;
            IndonesianStemFilterFactory object((jobject) NULL);

            if (!parseArgs(args, "K", ::java::util::Map::initializeClass, &a0, &p0, ::java::util::t_Map::parameters_))
            {
              INT_CALL(object = IndonesianStemFilterFactory(a0));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_IndonesianStemFilterFactory_create(t_IndonesianStemFilterFactory *self, PyObject *args)
          {
            ::org::apache::lucene::analysis::TokenStream a0((jobject) NULL);
            ::org::apache::lucene::analysis::TokenStream result((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::analysis::TokenStream::initializeClass, &a0))
            {
              OBJ_CALL(result = self->object.create(a0));
              return ::org::apache::lucene::analysis::t_TokenStream::wrap_Object(result);
            }

            return callSuper(PY_TYPE(IndonesianStemFilterFactory), (PyObject *) self, "create", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/util/automaton/MinimizationOperations.h"
#include "org/apache/lucene/util/automaton/Automaton.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        namespace automaton {

          ::java::lang::Class *MinimizationOperations::class$ = NULL;
          jmethodID *MinimizationOperations::mids$ = NULL;
          bool MinimizationOperations::live$ = false;

          jclass MinimizationOperations::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/util/automaton/MinimizationOperations");

              mids$ = new jmethodID[max_mid];
              mids$[mid_minimize_a82baeed01cff8c3] = env->getStaticMethodID(cls, "minimize", "(Lorg/apache/lucene/util/automaton/Automaton;I)Lorg/apache/lucene/util/automaton/Automaton;");

              class$ = new ::java::lang::Class(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          ::org::apache::lucene::util::automaton::Automaton MinimizationOperations::minimize(const ::org::apache::lucene::util::automaton::Automaton & a0, jint a1)
          {
            jclass cls = env->getClass(initializeClass);
            return ::org::apache::lucene::util::automaton::Automaton(env->callStaticObjectMethod(cls, mids$[mid_minimize_a82baeed01cff8c3], a0.this$, a1));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        namespace automaton {
          static PyObject *t_MinimizationOperations_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_MinimizationOperations_instance_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_MinimizationOperations_minimize(PyTypeObject *type, PyObject *args);

          static PyMethodDef t_MinimizationOperations__methods_[] = {
            DECLARE_METHOD(t_MinimizationOperations, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_MinimizationOperations, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_MinimizationOperations, minimize, METH_VARARGS | METH_CLASS),
            { NULL, NULL, 0, NULL }
          };

          static PyType_Slot PY_TYPE_SLOTS(MinimizationOperations)[] = {
            { Py_tp_methods, t_MinimizationOperations__methods_ },
            { Py_tp_init, (void *) abstract_init },
            { 0, NULL }
          };

          static PyType_Def *PY_TYPE_BASES(MinimizationOperations)[] = {
            &PY_TYPE_DEF(::java::lang::Object),
            NULL
          };

          DEFINE_TYPE(MinimizationOperations, t_MinimizationOperations, MinimizationOperations);

          void t_MinimizationOperations::install(PyObject *module)
          {
            installType(&PY_TYPE(MinimizationOperations), &PY_TYPE_DEF(MinimizationOperations), module, "MinimizationOperations", 0);
          }

          void t_MinimizationOperations::initialize(PyObject *module)
          {
            PyObject_SetAttrString((PyObject *) PY_TYPE(MinimizationOperations), "class_", make_descriptor(MinimizationOperations::initializeClass, 1));
            PyObject_SetAttrString((PyObject *) PY_TYPE(MinimizationOperations), "wrapfn_", make_descriptor(t_MinimizationOperations::wrap_jobject));
            PyObject_SetAttrString((PyObject *) PY_TYPE(MinimizationOperations), "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_MinimizationOperations_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, MinimizationOperations::initializeClass, 1)))
              return NULL;
            return t_MinimizationOperations::wrap_Object(MinimizationOperations(((t_MinimizationOperations *) arg)->object.this$));
          }
          static PyObject *t_MinimizationOperations_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, MinimizationOperations::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static PyObject *t_MinimizationOperations_minimize(PyTypeObject *type, PyObject *args)
          {
            ::org::apache::lucene::util::automaton::Automaton a0((jobject) NULL);
            jint a1;
            ::org::apache::lucene::util::automaton::Automaton result((jobject) NULL);

            if (!parseArgs(args, "kI", ::org::apache::lucene::util::automaton::Automaton::initializeClass, &a0, &a1))
            {
              OBJ_CALL(result = ::org::apache::lucene::util::automaton::MinimizationOperations::minimize(a0, a1));
              return ::org::apache::lucene::util::automaton::t_Automaton::wrap_Object(result);
            }

            PyErr_SetArgsError(type, "minimize", args);
            return NULL;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/codecs/blockterms/TermsIndexReaderBase$FieldIndexEnum.h"
#include "org/apache/lucene/util/BytesRef.h"
#include "java/io/IOException.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace codecs {
        namespace blockterms {

          ::java::lang::Class *TermsIndexReaderBase$FieldIndexEnum::class$ = NULL;
          jmethodID *TermsIndexReaderBase$FieldIndexEnum::mids$ = NULL;
          bool TermsIndexReaderBase$FieldIndexEnum::live$ = false;

          jclass TermsIndexReaderBase$FieldIndexEnum::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/codecs/blockterms/TermsIndexReaderBase$FieldIndexEnum");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_f2cc1bce94666404] = env->getMethodID(cls, "<init>", "()V");
              mids$[mid_next_2e5ae9edcb9b072f] = env->getMethodID(cls, "next", "()J");
              mids$[mid_ord_2e5ae9edcb9b072f] = env->getMethodID(cls, "ord", "()J");
              mids$[mid_seek_6f6ee5bba7f22d4c] = env->getMethodID(cls, "seek", "(Lorg/apache/lucene/util/BytesRef;)J");
              mids$[mid_seek_d711eecdc469624a] = env->getMethodID(cls, "seek", "(J)J");
              mids$[mid_term_7af2ea2e37ce82b8] = env->getMethodID(cls, "term", "()Lorg/apache/lucene/util/BytesRef;");

              class$ = new ::java::lang::Class(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          TermsIndexReaderBase$FieldIndexEnum::TermsIndexReaderBase$FieldIndexEnum() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_f2cc1bce94666404)) {}

          jlong TermsIndexReaderBase$FieldIndexEnum::next() const
          {
            return env->callLongMethod(this$, mids$[mid_next_2e5ae9edcb9b072f]);
          }

          jlong TermsIndexReaderBase$FieldIndexEnum::ord() const
          {
            return env->callLongMethod(this$, mids$[mid_ord_2e5ae9edcb9b072f]);
          }

          jlong TermsIndexReaderBase$FieldIndexEnum::seek(const ::org::apache::lucene::util::BytesRef & a0) const
          {
            return env->callLongMethod(this$, mids$[mid_seek_6f6ee5bba7f22d4c], a0.this$);
          }

          jlong TermsIndexReaderBase$FieldIndexEnum::seek(jlong a0) const
          {
            return env->callLongMethod(this$, mids$[mid_seek_d711eecdc469624a], a0);
          }

          ::org::apache::lucene::util::BytesRef TermsIndexReaderBase$FieldIndexEnum::term() const
          {
            return ::org::apache::lucene::util::BytesRef(env->callObjectMethod(this$, mids$[mid_term_7af2ea2e37ce82b8]));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace codecs {
        namespace blockterms {
          static PyObject *t_TermsIndexReaderBase$FieldIndexEnum_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_TermsIndexReaderBase$FieldIndexEnum_instance_(PyTypeObject *type, PyObject *arg);
          static int t_TermsIndexReaderBase$FieldIndexEnum_init_(t_TermsIndexReaderBase$FieldIndexEnum *self, PyObject *args, PyObject *kwds);
          static PyObject *t_TermsIndexReaderBase$FieldIndexEnum_next(t_TermsIndexReaderBase$FieldIndexEnum *self);
          static PyObject *t_TermsIndexReaderBase$FieldIndexEnum_ord(t_TermsIndexReaderBase$FieldIndexEnum *self);
          static PyObject *t_TermsIndexReaderBase$FieldIndexEnum_seek(t_TermsIndexReaderBase$FieldIndexEnum *self, PyObject *args);
          static PyObject *t_TermsIndexReaderBase$FieldIndexEnum_term(t_TermsIndexReaderBase$FieldIndexEnum *self);

          static PyMethodDef t_TermsIndexReaderBase$FieldIndexEnum__methods_[] = {
            DECLARE_METHOD(t_TermsIndexReaderBase$FieldIndexEnum, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_TermsIndexReaderBase$FieldIndexEnum, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_TermsIndexReaderBase$FieldIndexEnum, next, METH_NOARGS),
            DECLARE_METHOD(t_TermsIndexReaderBase$FieldIndexEnum, ord, METH_NOARGS),
            DECLARE_METHOD(t_TermsIndexReaderBase$FieldIndexEnum, seek, METH_VARARGS),
            DECLARE_METHOD(t_TermsIndexReaderBase$FieldIndexEnum, term, METH_NOARGS),
            { NULL, NULL, 0, NULL }
          };

          static PyType_Slot PY_TYPE_SLOTS(TermsIndexReaderBase$FieldIndexEnum)[] = {
            { Py_tp_methods, t_TermsIndexReaderBase$FieldIndexEnum__methods_ },
            { Py_tp_init, (void *) t_TermsIndexReaderBase$FieldIndexEnum_init_ },
            { 0, NULL }
          };

          static PyType_Def *PY_TYPE_BASES(TermsIndexReaderBase$FieldIndexEnum)[] = {
            &PY_TYPE_DEF(::java::lang::Object),
            NULL
          };

          DEFINE_TYPE(TermsIndexReaderBase$FieldIndexEnum, t_TermsIndexReaderBase$FieldIndexEnum, TermsIndexReaderBase$FieldIndexEnum);

          void t_TermsIndexReaderBase$FieldIndexEnum::install(PyObject *module)
          {
            installType(&PY_TYPE(TermsIndexReaderBase$FieldIndexEnum), &PY_TYPE_DEF(TermsIndexReaderBase$FieldIndexEnum), module, "TermsIndexReaderBase$FieldIndexEnum", 0);
          }

          void t_TermsIndexReaderBase$FieldIndexEnum::initialize(PyObject *module)
          {
            PyObject_SetAttrString((PyObject *) PY_TYPE(TermsIndexReaderBase$FieldIndexEnum), "class_", make_descriptor(TermsIndexReaderBase$FieldIndexEnum::initializeClass, 1));
            PyObject_SetAttrString((PyObject *) PY_TYPE(TermsIndexReaderBase$FieldIndexEnum), "wrapfn_", make_descriptor(t_TermsIndexReaderBase$FieldIndexEnum::wrap_jobject));
            PyObject_SetAttrString((PyObject *) PY_TYPE(TermsIndexReaderBase$FieldIndexEnum), "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_TermsIndexReaderBase$FieldIndexEnum_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, TermsIndexReaderBase$FieldIndexEnum::initializeClass, 1)))
              return NULL;
            return t_TermsIndexReaderBase$FieldIndexEnum::wrap_Object(TermsIndexReaderBase$FieldIndexEnum(((t_TermsIndexReaderBase$FieldIndexEnum *) arg)->object.this$));
          }
          static PyObject *t_TermsIndexReaderBase$FieldIndexEnum_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, TermsIndexReaderBase$FieldIndexEnum::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_TermsIndexReaderBase$FieldIndexEnum_init_(t_TermsIndexReaderBase$FieldIndexEnum *self, PyObject *args, PyObject *kwds)
          {
            TermsIndexReaderBase$FieldIndexEnum object((jobject) NULL);

            INT_CALL(object = TermsIndexReaderBase$FieldIndexEnum());
            self->object = object;

            return 0;
          }

          static PyObject *t_TermsIndexReaderBase$FieldIndexEnum_next(t_TermsIndexReaderBase$FieldIndexEnum *self)
          {
            jlong result;
            OBJ_CALL(result = self->object.next());
            return PyLong_FromLongLong((PY_LONG_LONG) result);
          }

          static PyObject *t_TermsIndexReaderBase$FieldIndexEnum_ord(t_TermsIndexReaderBase$FieldIndexEnum *self)
          {
            jlong result;
            OBJ_CALL(result = self->object.ord());
            return PyLong_FromLongLong((PY_LONG_LONG) result);
          }

          static PyObject *t_TermsIndexReaderBase$FieldIndexEnum_seek(t_TermsIndexReaderBase$FieldIndexEnum *self, PyObject *args)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 1:
              {
                ::org::apache::lucene::util::BytesRef a0((jobject) NULL);
                jlong result;

                if (!parseArgs(args, "k", ::org::apache::lucene::util::BytesRef::initializeClass, &a0))
                {
                  OBJ_CALL(result = self->object.seek(a0));
                  return PyLong_FromLongLong((PY_LONG_LONG) result);
                }
              }
              {
                jlong a0;
                jlong result;

                if (!parseArgs(args, "J", &a0))
                {
                  OBJ_CALL(result = self->object.seek(a0));
                  return PyLong_FromLongLong((PY_LONG_LONG) result);
                }
              }
            }

            PyErr_SetArgsError((PyObject *) self, "seek", args);
            return NULL;
          }

          static PyObject *t_TermsIndexReaderBase$FieldIndexEnum_term(t_TermsIndexReaderBase$FieldIndexEnum *self)
          {
            ::org::apache::lucene::util::BytesRef result((jobject) NULL);
            OBJ_CALL(result = self->object.term());
            return ::org::apache::lucene::util::t_BytesRef::wrap_Object(result);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/spatial3d/geom/GeoCircleFactory.h"
#include "org/apache/lucene/spatial3d/geom/PlanetModel.h"
#include "org/apache/lucene/spatial3d/geom/GeoCircle.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace spatial3d {
        namespace geom {

          ::java::lang::Class *GeoCircleFactory::class$ = NULL;
          jmethodID *GeoCircleFactory::mids$ = NULL;
          bool GeoCircleFactory::live$ = false;

          jclass GeoCircleFactory::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/spatial3d/geom/GeoCircleFactory");

              mids$ = new jmethodID[max_mid];
              mids$[mid_makeExactGeoCircle_31c0faa275a89c98] = env->getStaticMethodID(cls, "makeExactGeoCircle", "(Lorg/apache/lucene/spatial3d/geom/PlanetModel;DDDD)Lorg/apache/lucene/spatial3d/geom/GeoCircle;");
              mids$[mid_makeGeoCircle_9ce7a7494b8beee7] = env->getStaticMethodID(cls, "makeGeoCircle", "(Lorg/apache/lucene/spatial3d/geom/PlanetModel;DDD)Lorg/apache/lucene/spatial3d/geom/GeoCircle;");

              class$ = new ::java::lang::Class(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          ::org::apache::lucene::spatial3d::geom::GeoCircle GeoCircleFactory::makeExactGeoCircle(const ::org::apache::lucene::spatial3d::geom::PlanetModel & a0, jdouble a1, jdouble a2, jdouble a3, jdouble a4)
          {
            jclass cls = env->getClass(initializeClass);
            return ::org::apache::lucene::spatial3d::geom::GeoCircle(env->callStaticObjectMethod(cls, mids$[mid_makeExactGeoCircle_31c0faa275a89c98], a0.this$, a1, a2, a3, a4));
          }

          ::org::apache::lucene::spatial3d::geom::GeoCircle GeoCircleFactory::makeGeoCircle(const ::org::apache::lucene::spatial3d::geom::PlanetModel & a0, jdouble a1, jdouble a2, jdouble a3)
          {
            jclass cls = env->getClass(initializeClass);
            return ::org::apache::lucene::spatial3d::geom::GeoCircle(env->callStaticObjectMethod(cls, mids$[mid_makeGeoCircle_9ce7a7494b8beee7], a0.this$, a1, a2, a3));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace spatial3d {
        namespace geom {
          static PyObject *t_GeoCircleFactory_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_GeoCircleFactory_instance_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_GeoCircleFactory_makeExactGeoCircle(PyTypeObject *type, PyObject *args);
          static PyObject *t_GeoCircleFactory_makeGeoCircle(PyTypeObject *type, PyObject *args);

          static PyMethodDef t_GeoCircleFactory__methods_[] = {
            DECLARE_METHOD(t_GeoCircleFactory, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_GeoCircleFactory, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_GeoCircleFactory, makeExactGeoCircle, METH_VARARGS | METH_CLASS),
            DECLARE_METHOD(t_GeoCircleFactory, makeGeoCircle, METH_VARARGS | METH_CLASS),
            { NULL, NULL, 0, NULL }
          };

          static PyType_Slot PY_TYPE_SLOTS(GeoCircleFactory)[] = {
            { Py_tp_methods, t_GeoCircleFactory__methods_ },
            { Py_tp_init, (void *) abstract_init },
            { 0, NULL }
          };

          static PyType_Def *PY_TYPE_BASES(GeoCircleFactory)[] = {
            &PY_TYPE_DEF(::java::lang::Object),
            NULL
          };

          DEFINE_TYPE(GeoCircleFactory, t_GeoCircleFactory, GeoCircleFactory);

          void t_GeoCircleFactory::install(PyObject *module)
          {
            installType(&PY_TYPE(GeoCircleFactory), &PY_TYPE_DEF(GeoCircleFactory), module, "GeoCircleFactory", 0);
          }

          void t_GeoCircleFactory::initialize(PyObject *module)
          {
            PyObject_SetAttrString((PyObject *) PY_TYPE(GeoCircleFactory), "class_", make_descriptor(GeoCircleFactory::initializeClass, 1));
            PyObject_SetAttrString((PyObject *) PY_TYPE(GeoCircleFactory), "wrapfn_", make_descriptor(t_GeoCircleFactory::wrap_jobject));
            PyObject_SetAttrString((PyObject *) PY_TYPE(GeoCircleFactory), "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_GeoCircleFactory_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, GeoCircleFactory::initializeClass, 1)))
              return NULL;
            return t_GeoCircleFactory::wrap_Object(GeoCircleFactory(((t_GeoCircleFactory *) arg)->object.this$));
          }
          static PyObject *t_GeoCircleFactory_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, GeoCircleFactory::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static PyObject *t_GeoCircleFactory_makeExactGeoCircle(PyTypeObject *type, PyObject *args)
          {
            ::org::apache::lucene::spatial3d::geom::PlanetModel a0((jobject) NULL);
            jdouble a1;
            jdouble a2;
            jdouble a3;
            jdouble a4;
            ::org::apache::lucene::spatial3d::geom::GeoCircle result((jobject) NULL);

            if (!parseArgs(args, "kDDDD", ::org::apache::lucene::spatial3d::geom::PlanetModel::initializeClass, &a0, &a1, &a2, &a3, &a4))
            {
              OBJ_CALL(result = ::org::apache::lucene::spatial3d::geom::GeoCircleFactory::makeExactGeoCircle(a0, a1, a2, a3, a4));
              return ::org::apache::lucene::spatial3d::geom::t_GeoCircle::wrap_Object(result);
            }

            PyErr_SetArgsError(type, "makeExactGeoCircle", args);
            return NULL;
          }

          static PyObject *t_GeoCircleFactory_makeGeoCircle(PyTypeObject *type, PyObject *args)
          {
            ::org::apache::lucene::spatial3d::geom::PlanetModel a0((jobject) NULL);
            jdouble a1;
            jdouble a2;
            jdouble a3;
            ::org::apache::lucene::spatial3d::geom::GeoCircle result((jobject) NULL);

            if (!parseArgs(args, "kDDD", ::org::apache::lucene::spatial3d::geom::PlanetModel::initializeClass, &a0, &a1, &a2, &a3))
            {
              OBJ_CALL(result = ::org::apache::lucene::spatial3d::geom::GeoCircleFactory::makeGeoCircle(a0, a1, a2, a3));
              return ::org::apache::lucene::spatial3d::geom::t_GeoCircle::wrap_Object(result);
            }

            PyErr_SetArgsError(type, "makeGeoCircle", args);
            return NULL;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/codecs/StoredFieldsReader.h"
#include "org/apache/lucene/codecs/StoredFieldsReader.h"
#include "java/lang/Cloneable.h"
#include "org/apache/lucene/util/Accountable.h"
#include "java/lang/Class.h"
#include "java/io/Closeable.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/index/StoredFieldVisitor.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace codecs {

        ::java::lang::Class *StoredFieldsReader::class$ = NULL;
        jmethodID *StoredFieldsReader::mids$ = NULL;
        bool StoredFieldsReader::live$ = false;

        jclass StoredFieldsReader::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/codecs/StoredFieldsReader");

            mids$ = new jmethodID[max_mid];
            mids$[mid_checkIntegrity_f2cc1bce94666404] = env->getMethodID(cls, "checkIntegrity", "()V");
            mids$[mid_clone_ba629b83d3686969] = env->getMethodID(cls, "clone", "()Lorg/apache/lucene/codecs/StoredFieldsReader;");
            mids$[mid_getMergeInstance_ba629b83d3686969] = env->getMethodID(cls, "getMergeInstance", "()Lorg/apache/lucene/codecs/StoredFieldsReader;");
            mids$[mid_visitDocument_8f45e7464506ed2f] = env->getMethodID(cls, "visitDocument", "(ILorg/apache/lucene/index/StoredFieldVisitor;)V");

            class$ = new ::java::lang::Class(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        void StoredFieldsReader::checkIntegrity() const
        {
          env->callVoidMethod(this$, mids$[mid_checkIntegrity_f2cc1bce94666404]);
        }

        StoredFieldsReader StoredFieldsReader::clone() const
        {
          return StoredFieldsReader(env->callObjectMethod(this$, mids$[mid_clone_ba629b83d3686969]));
        }

        StoredFieldsReader StoredFieldsReader::getMergeInstance() const
        {
          return StoredFieldsReader(env->callObjectMethod(this$, mids$[mid_getMergeInstance_ba629b83d3686969]));
        }

        void StoredFieldsReader::visitDocument(jint a0, const ::org::apache::lucene::index::StoredFieldVisitor & a1) const
        {
          env->callVoidMethod(this$, mids$[mid_visitDocument_8f45e7464506ed2f], a0, a1.this$);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace codecs {
        static PyObject *t_StoredFieldsReader_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_StoredFieldsReader_instance_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_StoredFieldsReader_checkIntegrity(t_StoredFieldsReader *self);
        static PyObject *t_StoredFieldsReader_clone(t_StoredFieldsReader *self);
        static PyObject *t_StoredFieldsReader_getMergeInstance(t_StoredFieldsReader *self);
        static PyObject *t_StoredFieldsReader_visitDocument(t_StoredFieldsReader *self, PyObject *args);
        static PyObject *t_StoredFieldsReader_get__mergeInstance(t_StoredFieldsReader *self, void *data);
        static PyGetSetDef t_StoredFieldsReader__fields_[] = {
          DECLARE_GET_FIELD(t_StoredFieldsReader, mergeInstance),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_StoredFieldsReader__methods_[] = {
          DECLARE_METHOD(t_StoredFieldsReader, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_StoredFieldsReader, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_StoredFieldsReader, checkIntegrity, METH_NOARGS),
          DECLARE_METHOD(t_StoredFieldsReader, clone, METH_NOARGS),
          DECLARE_METHOD(t_StoredFieldsReader, getMergeInstance, METH_NOARGS),
          DECLARE_METHOD(t_StoredFieldsReader, visitDocument, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        static PyType_Slot PY_TYPE_SLOTS(StoredFieldsReader)[] = {
          { Py_tp_methods, t_StoredFieldsReader__methods_ },
          { Py_tp_init, (void *) abstract_init },
          { Py_tp_getset, t_StoredFieldsReader__fields_ },
          { 0, NULL }
        };

        static PyType_Def *PY_TYPE_BASES(StoredFieldsReader)[] = {
          &PY_TYPE_DEF(::java::lang::Object),
          NULL
        };

        DEFINE_TYPE(StoredFieldsReader, t_StoredFieldsReader, StoredFieldsReader);

        void t_StoredFieldsReader::install(PyObject *module)
        {
          installType(&PY_TYPE(StoredFieldsReader), &PY_TYPE_DEF(StoredFieldsReader), module, "StoredFieldsReader", 0);
        }

        void t_StoredFieldsReader::initialize(PyObject *module)
        {
          PyObject_SetAttrString((PyObject *) PY_TYPE(StoredFieldsReader), "class_", make_descriptor(StoredFieldsReader::initializeClass, 1));
          PyObject_SetAttrString((PyObject *) PY_TYPE(StoredFieldsReader), "wrapfn_", make_descriptor(t_StoredFieldsReader::wrap_jobject));
          PyObject_SetAttrString((PyObject *) PY_TYPE(StoredFieldsReader), "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_StoredFieldsReader_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, StoredFieldsReader::initializeClass, 1)))
            return NULL;
          return t_StoredFieldsReader::wrap_Object(StoredFieldsReader(((t_StoredFieldsReader *) arg)->object.this$));
        }
        static PyObject *t_StoredFieldsReader_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, StoredFieldsReader::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static PyObject *t_StoredFieldsReader_checkIntegrity(t_StoredFieldsReader *self)
        {
          OBJ_CALL(self->object.checkIntegrity());
          Py_RETURN_NONE;
        }

        static PyObject *t_StoredFieldsReader_clone(t_StoredFieldsReader *self)
        {
          StoredFieldsReader result((jobject) NULL);
          OBJ_CALL(result = self->object.clone());
          return t_StoredFieldsReader::wrap_Object(result);
        }

        static PyObject *t_StoredFieldsReader_getMergeInstance(t_StoredFieldsReader *self)
        {
          StoredFieldsReader result((jobject) NULL);
          OBJ_CALL(result = self->object.getMergeInstance());
          return t_StoredFieldsReader::wrap_Object(result);
        }

        static PyObject *t_StoredFieldsReader_visitDocument(t_StoredFieldsReader *self, PyObject *args)
        {
          jint a0;
          ::org::apache::lucene::index::StoredFieldVisitor a1((jobject) NULL);

          if (!parseArgs(args, "Ik", ::org::apache::lucene::index::StoredFieldVisitor::initializeClass, &a0, &a1))
          {
            OBJ_CALL(self->object.visitDocument(a0, a1));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "visitDocument", args);
          return NULL;
        }

        static PyObject *t_StoredFieldsReader_get__mergeInstance(t_StoredFieldsReader *self, void *data)
        {
          StoredFieldsReader value((jobject) NULL);
          OBJ_CALL(value = self->object.getMergeInstance());
          return t_StoredFieldsReader::wrap_Object(value);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/tartarus/snowball/ext/LovinsStemmer.h"
#include "java/lang/Object.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace tartarus {
    namespace snowball {
      namespace ext {

        ::java::lang::Class *LovinsStemmer::class$ = NULL;
        jmethodID *LovinsStemmer::mids$ = NULL;
        bool LovinsStemmer::live$ = false;

        jclass LovinsStemmer::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/tartarus/snowball/ext/LovinsStemmer");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_f2cc1bce94666404] = env->getMethodID(cls, "<init>", "()V");
            mids$[mid_equals_8b72f2dcdde6fd1d] = env->getMethodID(cls, "equals", "(Ljava/lang/Object;)Z");
            mids$[mid_hashCode_9972fcc56b44e79d] = env->getMethodID(cls, "hashCode", "()I");
            mids$[mid_stem_8454bd5aa23fd11e] = env->getMethodID(cls, "stem", "()Z");

            class$ = new ::java::lang::Class(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        LovinsStemmer::LovinsStemmer() : ::org::tartarus::snowball::SnowballProgram(env->newObject(initializeClass, &mids$, mid_init$_f2cc1bce94666404)) {}

        jboolean LovinsStemmer::equals(const ::java::lang::Object & a0) const
        {
          return env->callBooleanMethod(this$, mids$[mid_equals_8b72f2dcdde6fd1d], a0.this$);
        }

        jint LovinsStemmer::hashCode() const
        {
          return env->callIntMethod(this$, mids$[mid_hashCode_9972fcc56b44e79d]);
        }

        jboolean LovinsStemmer::stem() const
        {
          return env->callBooleanMethod(this$, mids$[mid_stem_8454bd5aa23fd11e]);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace tartarus {
    namespace snowball {
      namespace ext {
        static PyObject *t_LovinsStemmer_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_LovinsStemmer_instance_(PyTypeObject *type, PyObject *arg);
        static int t_LovinsStemmer_init_(t_LovinsStemmer *self, PyObject *args, PyObject *kwds);
        static PyObject *t_LovinsStemmer_equals(t_LovinsStemmer *self, PyObject *args);
        static PyObject *t_LovinsStemmer_hashCode(t_LovinsStemmer *self, PyObject *args);
        static PyObject *t_LovinsStemmer_stem(t_LovinsStemmer *self, PyObject *args);

        static PyMethodDef t_LovinsStemmer__methods_[] = {
          DECLARE_METHOD(t_LovinsStemmer, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_LovinsStemmer, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_LovinsStemmer, equals, METH_VARARGS),
          DECLARE_METHOD(t_LovinsStemmer, hashCode, METH_VARARGS),
          DECLARE_METHOD(t_LovinsStemmer, stem, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        static PyType_Slot PY_TYPE_SLOTS(LovinsStemmer)[] = {
          { Py_tp_methods, t_LovinsStemmer__methods_ },
          { Py_tp_init, (void *) t_LovinsStemmer_init_ },
          { 0, NULL }
        };

        static PyType_Def *PY_TYPE_BASES(LovinsStemmer)[] = {
          &PY_TYPE_DEF(::org::tartarus::snowball::SnowballProgram),
          NULL
        };

        DEFINE_TYPE(LovinsStemmer, t_LovinsStemmer, LovinsStemmer);

        void t_LovinsStemmer::install(PyObject *module)
        {
          installType(&PY_TYPE(LovinsStemmer), &PY_TYPE_DEF(LovinsStemmer), module, "LovinsStemmer", 0);
        }

        void t_LovinsStemmer::initialize(PyObject *module)
        {
          PyObject_SetAttrString((PyObject *) PY_TYPE(LovinsStemmer), "class_", make_descriptor(LovinsStemmer::initializeClass, 1));
          PyObject_SetAttrString((PyObject *) PY_TYPE(LovinsStemmer), "wrapfn_", make_descriptor(t_LovinsStemmer::wrap_jobject));
          PyObject_SetAttrString((PyObject *) PY_TYPE(LovinsStemmer), "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_LovinsStemmer_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, LovinsStemmer::initializeClass, 1)))
            return NULL;
          return t_LovinsStemmer::wrap_Object(LovinsStemmer(((t_LovinsStemmer *) arg)->object.this$));
        }
        static PyObject *t_LovinsStemmer_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, LovinsStemmer::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_LovinsStemmer_init_(t_LovinsStemmer *self, PyObject *args, PyObject *kwds)
        {
          LovinsStemmer object((jobject) NULL);

          INT_CALL(object = LovinsStemmer());
          self->object = object;

          return 0;
        }

        static PyObject *t_LovinsStemmer_equals(t_LovinsStemmer *self, PyObject *args)
        {
          ::java::lang::Object a0((jobject) NULL);
          jboolean result;

          if (!parseArgs(args, "o", &a0))
          {
            OBJ_CALL(result = self->object.equals(a0));
            Py_RETURN_BOOL(result);
          }

          return callSuper(PY_TYPE(LovinsStemmer), (PyObject *) self, "equals", args, 2);
        }

        static PyObject *t_LovinsStemmer_hashCode(t_LovinsStemmer *self, PyObject *args)
        {
          jint result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.hashCode());
            return PyLong_FromLong((long) result);
          }

          return callSuper(PY_TYPE(LovinsStemmer), (PyObject *) self, "hashCode", args, 2);
        }

        static PyObject *t_LovinsStemmer_stem(t_LovinsStemmer *self, PyObject *args)
        {
          jboolean result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.stem());
            Py_RETURN_BOOL(result);
          }

          return callSuper(PY_TYPE(LovinsStemmer), (PyObject *) self, "stem", args, 2);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/highlight/SpanGradientFormatter.h"
#include "org/apache/lucene/search/highlight/TokenGroup.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace highlight {

          ::java::lang::Class *SpanGradientFormatter::class$ = NULL;
          jmethodID *SpanGradientFormatter::mids$ = NULL;
          bool SpanGradientFormatter::live$ = false;

          jclass SpanGradientFormatter::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/search/highlight/SpanGradientFormatter");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_83fb09b4857a051b] = env->getMethodID(cls, "<init>", "(FLjava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)V");
              mids$[mid_highlightTerm_89cd75f77d741eb4] = env->getMethodID(cls, "highlightTerm", "(Ljava/lang/String;Lorg/apache/lucene/search/highlight/TokenGroup;)Ljava/lang/String;");

              class$ = new ::java::lang::Class(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          SpanGradientFormatter::SpanGradientFormatter(jfloat a0, const ::java::lang::String & a1, const ::java::lang::String & a2, const ::java::lang::String & a3, const ::java::lang::String & a4) : ::org::apache::lucene::search::highlight::GradientFormatter(env->newObject(initializeClass, &mids$, mid_init$_83fb09b4857a051b, a0, a1.this$, a2.this$, a3.this$, a4.this$)) {}

          ::java::lang::String SpanGradientFormatter::highlightTerm(const ::java::lang::String & a0, const ::org::apache::lucene::search::highlight::TokenGroup & a1) const
          {
            return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_highlightTerm_89cd75f77d741eb4], a0.this$, a1.this$));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace highlight {
          static PyObject *t_SpanGradientFormatter_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_SpanGradientFormatter_instance_(PyTypeObject *type, PyObject *arg);
          static int t_SpanGradientFormatter_init_(t_SpanGradientFormatter *self, PyObject *args, PyObject *kwds);
          static PyObject *t_SpanGradientFormatter_highlightTerm(t_SpanGradientFormatter *self, PyObject *args);

          static PyMethodDef t_SpanGradientFormatter__methods_[] = {
            DECLARE_METHOD(t_SpanGradientFormatter, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_SpanGradientFormatter, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_SpanGradientFormatter, highlightTerm, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          static PyType_Slot PY_TYPE_SLOTS(SpanGradientFormatter)[] = {
            { Py_tp_methods, t_SpanGradientFormatter__methods_ },
            { Py_tp_init, (void *) t_SpanGradientFormatter_init_ },
            { 0, NULL }
          };

          static PyType_Def *PY_TYPE_BASES(SpanGradientFormatter)[] = {
            &PY_TYPE_DEF(::org::apache::lucene::search::highlight::GradientFormatter),
            NULL
          };

          DEFINE_TYPE(SpanGradientFormatter, t_SpanGradientFormatter, SpanGradientFormatter);

          void t_SpanGradientFormatter::install(PyObject *module)
          {
            installType(&PY_TYPE(SpanGradientFormatter), &PY_TYPE_DEF(SpanGradientFormatter), module, "SpanGradientFormatter", 0);
          }

          void t_SpanGradientFormatter::initialize(PyObject *module)
          {
            PyObject_SetAttrString((PyObject *) PY_TYPE(SpanGradientFormatter), "class_", make_descriptor(SpanGradientFormatter::initializeClass, 1));
            PyObject_SetAttrString((PyObject *) PY_TYPE(SpanGradientFormatter), "wrapfn_", make_descriptor(t_SpanGradientFormatter::wrap_jobject));
            PyObject_SetAttrString((PyObject *) PY_TYPE(SpanGradientFormatter), "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_SpanGradientFormatter_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, SpanGradientFormatter::initializeClass, 1)))
              return NULL;
            return t_SpanGradientFormatter::wrap_Object(SpanGradientFormatter(((t_SpanGradientFormatter *) arg)->object.this$));
          }
          static PyObject *t_SpanGradientFormatter_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, SpanGradientFormatter::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_SpanGradientFormatter_init_(t_SpanGradientFormatter *self, PyObject *args, PyObject *kwds)
          {
            jfloat a0;
            ::java::lang::String a1((jobject) NULL);
            ::java::lang::String a2((jobject) NULL);
            ::java::lang::String a3((jobject) NULL);
            ::java::lang::String a4((jobject) NULL);
            SpanGradientFormatter object((jobject) NULL);

            if (!parseArgs(args, "Fssss", &a0, &a1, &a2, &a3, &a4))
            {
              INT_CALL(object = SpanGradientFormatter(a0, a1, a2, a3, a4));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_SpanGradientFormatter_highlightTerm(t_SpanGradientFormatter *self, PyObject *args)
          {
            ::java::lang::String a0((jobject) NULL);
            ::org::apache::lucene::search::highlight::TokenGroup a1((jobject) NULL);
            ::java::lang::String result((jobject) NULL);

            if (!parseArgs(args, "sk", ::org::apache::lucene::search::highlight::TokenGroup::initializeClass, &a0, &a1))
            {
              OBJ_CALL(result = self->object.highlightTerm(a0, a1));
              return j2p(result);
            }

            return callSuper(PY_TYPE(SpanGradientFormatter), (PyObject *) self, "highlightTerm", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/util/BitUtil.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {

        ::java::lang::Class *BitUtil::class$ = NULL;
        jmethodID *BitUtil::mids$ = NULL;
        bool BitUtil::live$ = false;

        jclass BitUtil::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/util/BitUtil");

            mids$ = new jmethodID[max_mid];
            mids$[mid_deinterleave_d711eecdc469624a] = env->getStaticMethodID(cls, "deinterleave", "(J)J");
            mids$[mid_flipFlop_d711eecdc469624a] = env->getStaticMethodID(cls, "flipFlop", "(J)J");
            mids$[mid_interleave_b41f949dd7315988] = env->getStaticMethodID(cls, "interleave", "(II)J");
            mids$[mid_nextHighestPowerOfTwo_1e143afe1894d213] = env->getStaticMethodID(cls, "nextHighestPowerOfTwo", "(I)I");
            mids$[mid_nextHighestPowerOfTwo_d711eecdc469624a] = env->getStaticMethodID(cls, "nextHighestPowerOfTwo", "(J)J");
            mids$[mid_pop_andnot_75af901f9fc3dd56] = env->getStaticMethodID(cls, "pop_andnot", "([J[JII)J");
            mids$[mid_pop_array_c4e9c52e91b65572] = env->getStaticMethodID(cls, "pop_array", "([JII)J");
            mids$[mid_pop_intersect_75af901f9fc3dd56] = env->getStaticMethodID(cls, "pop_intersect", "([J[JII)J");
            mids$[mid_pop_union_75af901f9fc3dd56] = env->getStaticMethodID(cls, "pop_union", "([J[JII)J");
            mids$[mid_pop_xor_75af901f9fc3dd56] = env->getStaticMethodID(cls, "pop_xor", "([J[JII)J");
            mids$[mid_zigZagDecode_1e143afe1894d213] = env->getStaticMethodID(cls, "zigZagDecode", "(I)I");
            mids$[mid_zigZagDecode_d711eecdc469624a] = env->getStaticMethodID(cls, "zigZagDecode", "(J)J");
            mids$[mid_zigZagEncode_1e143afe1894d213] = env->getStaticMethodID(cls, "zigZagEncode", "(I)I");
            mids$[mid_zigZagEncode_d711eecdc469624a] = env->getStaticMethodID(cls, "zigZagEncode", "(J)J");

            class$ = new ::java::lang::Class(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        jlong BitUtil::deinterleave(jlong a0)
        {
          jclass cls = env->getClass(initializeClass);
          return env->callStaticLongMethod(cls, mids$[mid_deinterleave_d711eecdc469624a], a0);
        }

        jlong BitUtil::flipFlop(jlong a0)
        {
          jclass cls = env->getClass(initializeClass);
          return env->callStaticLongMethod(cls, mids$[mid_flipFlop_d711eecdc469624a], a0);
        }

        jlong BitUtil::interleave(jint a0, jint a1)
        {
          jclass cls = env->getClass(initializeClass);
          return env->callStaticLongMethod(cls, mids$[mid_interleave_b41f949dd7315988], a0, a1);
        }

        jint BitUtil::nextHighestPowerOfTwo(jint a0)
        {
          jclass cls = env->getClass(initializeClass);
          return env->callStaticIntMethod(cls, mids$[mid_nextHighestPowerOfTwo_1e143afe1894d213], a0);
        }

        jlong BitUtil::nextHighestPowerOfTwo(jlong a0)
        {
          jclass cls = env->getClass(initializeClass);
          return env->callStaticLongMethod(cls, mids$[mid_nextHighestPowerOfTwo_d711eecdc469624a], a0);
        }

        jlong BitUtil::pop_andnot(const JArray< jlong > & a0, const JArray< jlong > & a1, jint a2, jint a3)
        {
          jclass cls = env->getClass(initializeClass);
          return env->callStaticLongMethod(cls, mids$[mid_pop_andnot_75af901f9fc3dd56], a0.this$, a1.this$, a2, a3);
        }

        jlong BitUtil::pop_array(const JArray< jlong > & a0, jint a1, jint a2)
        {
          jclass cls = env->getClass(initializeClass);
          return env->callStaticLongMethod(cls, mids$[mid_pop_array_c4e9c52e91b65572], a0.this$, a1, a2);
        }

        jlong BitUtil::pop_intersect(const JArray< jlong > & a0, const JArray< jlong > & a1, jint a2, jint a3)
        {
          jclass cls = env->getClass(initializeClass);
          return env->callStaticLongMethod(cls, mids$[mid_pop_intersect_75af901f9fc3dd56], a0.this$, a1.this$, a2, a3);
        }

        jlong BitUtil::pop_union(const JArray< jlong > & a0, const JArray< jlong > & a1, jint a2, jint a3)
        {
          jclass cls = env->getClass(initializeClass);
          return env->callStaticLongMethod(cls, mids$[mid_pop_union_75af901f9fc3dd56], a0.this$, a1.this$, a2, a3);
        }

        jlong BitUtil::pop_xor(const JArray< jlong > & a0, const JArray< jlong > & a1, jint a2, jint a3)
        {
          jclass cls = env->getClass(initializeClass);
          return env->callStaticLongMethod(cls, mids$[mid_pop_xor_75af901f9fc3dd56], a0.this$, a1.this$, a2, a3);
        }

        jint BitUtil::zigZagDecode(jint a0)
        {
          jclass cls = env->getClass(initializeClass);
          return env->callStaticIntMethod(cls, mids$[mid_zigZagDecode_1e143afe1894d213], a0);
        }

        jlong BitUtil::zigZagDecode(jlong a0)
        {
          jclass cls = env->getClass(initializeClass);
          return env->callStaticLongMethod(cls, mids$[mid_zigZagDecode_d711eecdc469624a], a0);
        }

        jint BitUtil::zigZagEncode(jint a0)
        {
          jclass cls = env->getClass(initializeClass);
          return env->callStaticIntMethod(cls, mids$[mid_zigZagEncode_1e143afe1894d213], a0);
        }

        jlong BitUtil::zigZagEncode(jlong a0)
        {
          jclass cls = env->getClass(initializeClass);
          return env->callStaticLongMethod(cls, mids$[mid_zigZagEncode_d711eecdc469624a], a0);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        static PyObject *t_BitUtil_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_BitUtil_instance_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_BitUtil_deinterleave(PyTypeObject *type, PyObject *arg);
        static PyObject *t_BitUtil_flipFlop(PyTypeObject *type, PyObject *arg);
        static PyObject *t_BitUtil_interleave(PyTypeObject *type, PyObject *args);
        static PyObject *t_BitUtil_nextHighestPowerOfTwo(PyTypeObject *type, PyObject *args);
        static PyObject *t_BitUtil_pop_andnot(PyTypeObject *type, PyObject *args);
        static PyObject *t_BitUtil_pop_array(PyTypeObject *type, PyObject *args);
        static PyObject *t_BitUtil_pop_intersect(PyTypeObject *type, PyObject *args);
        static PyObject *t_BitUtil_pop_union(PyTypeObject *type, PyObject *args);
        static PyObject *t_BitUtil_pop_xor(PyTypeObject *type, PyObject *args);
        static PyObject *t_BitUtil_zigZagDecode(PyTypeObject *type, PyObject *args);
        static PyObject *t_BitUtil_zigZagEncode(PyTypeObject *type, PyObject *args);

        static PyMethodDef t_BitUtil__methods_[] = {
          DECLARE_METHOD(t_BitUtil, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_BitUtil, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_BitUtil, deinterleave, METH_O | METH_CLASS),
          DECLARE_METHOD(t_BitUtil, flipFlop, METH_O | METH_CLASS),
          DECLARE_METHOD(t_BitUtil, interleave, METH_VARARGS | METH_CLASS),
          DECLARE_METHOD(t_BitUtil, nextHighestPowerOfTwo, METH_VARARGS | METH_CLASS),
          DECLARE_METHOD(t_BitUtil, pop_andnot, METH_VARARGS | METH_CLASS),
          DECLARE_METHOD(t_BitUtil, pop_array, METH_VARARGS | METH_CLASS),
          DECLARE_METHOD(t_BitUtil, pop_intersect, METH_VARARGS | METH_CLASS),
          DECLARE_METHOD(t_BitUtil, pop_union, METH_VARARGS | METH_CLASS),
          DECLARE_METHOD(t_BitUtil, pop_xor, METH_VARARGS | METH_CLASS),
          DECLARE_METHOD(t_BitUtil, zigZagDecode, METH_VARARGS | METH_CLASS),
          DECLARE_METHOD(t_BitUtil, zigZagEncode, METH_VARARGS | METH_CLASS),
          { NULL, NULL, 0, NULL }
        };

        static PyType_Slot PY_TYPE_SLOTS(BitUtil)[] = {
          { Py_tp_methods, t_BitUtil__methods_ },
          { Py_tp_init, (void *) abstract_init },
          { 0, NULL }
        };

        static PyType_Def *PY_TYPE_BASES(BitUtil)[] = {
          &PY_TYPE_DEF(::java::lang::Object),
          NULL
        };

        DEFINE_TYPE(BitUtil, t_BitUtil, BitUtil);

        void t_BitUtil::install(PyObject *module)
        {
          installType(&PY_TYPE(BitUtil), &PY_TYPE_DEF(BitUtil), module, "BitUtil", 0);
        }

        void t_BitUtil::initialize(PyObject *module)
        {
          PyObject_SetAttrString((PyObject *) PY_TYPE(BitUtil), "class_", make_descriptor(BitUtil::initializeClass, 1));
          PyObject_SetAttrString((PyObject *) PY_TYPE(BitUtil), "wrapfn_", make_descriptor(t_BitUtil::wrap_jobject));
          PyObject_SetAttrString((PyObject *) PY_TYPE(BitUtil), "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_BitUtil_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, BitUtil::initializeClass, 1)))
            return NULL;
          return t_BitUtil::wrap_Object(BitUtil(((t_BitUtil *) arg)->object.this$));
        }
        static PyObject *t_BitUtil_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, BitUtil::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static PyObject *t_BitUtil_deinterleave(PyTypeObject *type, PyObject *arg)
        {
          jlong a0;
          jlong result;

          if (!parseArg(arg, "J", &a0))
          {
            OBJ_CALL(result = ::org::apache::lucene::util::BitUtil::deinterleave(a0));
            return PyLong_FromLongLong((PY_LONG_LONG) result);
          }

          PyErr_SetArgsError(type, "deinterleave", arg);
          return NULL;
        }

        static PyObject *t_BitUtil_flipFlop(PyTypeObject *type, PyObject *arg)
        {
          jlong a0;
          jlong result;

          if (!parseArg(arg, "J", &a0))
          {
            OBJ_CALL(result = ::org::apache::lucene::util::BitUtil::flipFlop(a0));
            return PyLong_FromLongLong((PY_LONG_LONG) result);
          }

          PyErr_SetArgsError(type, "flipFlop", arg);
          return NULL;
        }

        static PyObject *t_BitUtil_interleave(PyTypeObject *type, PyObject *args)
        {
          jint a0;
          jint a1;
          jlong result;

          if (!parseArgs(args, "II", &a0, &a1))
          {
            OBJ_CALL(result = ::org::apache::lucene::util::BitUtil::interleave(a0, a1));
            return PyLong_FromLongLong((PY_LONG_LONG) result);
          }

          PyErr_SetArgsError(type, "interleave", args);
          return NULL;
        }

        static PyObject *t_BitUtil_nextHighestPowerOfTwo(PyTypeObject *type, PyObject *args)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 1:
            {
              jint a0;
              jint result;

              if (!parseArgs(args, "I", &a0))
              {
                OBJ_CALL(result = ::org::apache::lucene::util::BitUtil::nextHighestPowerOfTwo(a0));
                return PyLong_FromLong((long) result);
              }
            }
            {
              jlong a0;
              jlong result;

              if (!parseArgs(args, "J", &a0))
              {
                OBJ_CALL(result = ::org::apache::lucene::util::BitUtil::nextHighestPowerOfTwo(a0));
                return PyLong_FromLongLong((PY_LONG_LONG) result);
              }
            }
          }

          PyErr_SetArgsError(type, "nextHighestPowerOfTwo", args);
          return NULL;
        }

        static PyObject *t_BitUtil_pop_andnot(PyTypeObject *type, PyObject *args)
        {
          JArray< jlong > a0((jobject) NULL);
          JArray< jlong > a1((jobject) NULL);
          jint a2;
          jint a3;
          jlong result;

          if (!parseArgs(args, "[J[JII", &a0, &a1, &a2, &a3))
          {
            OBJ_CALL(result = ::org::apache::lucene::util::BitUtil::pop_andnot(a0, a1, a2, a3));
            return PyLong_FromLongLong((PY_LONG_LONG) result);
          }

          PyErr_SetArgsError(type, "pop_andnot", args);
          return NULL;
        }

        static PyObject *t_BitUtil_pop_array(PyTypeObject *type, PyObject *args)
        {
          JArray< jlong > a0((jobject) NULL);
          jint a1;
          jint a2;
          jlong result;

          if (!parseArgs(args, "[JII", &a0, &a1, &a2))
          {
            OBJ_CALL(result = ::org::apache::lucene::util::BitUtil::pop_array(a0, a1, a2));
            return PyLong_FromLongLong((PY_LONG_LONG) result);
          }

          PyErr_SetArgsError(type, "pop_array", args);
          return NULL;
        }

        static PyObject *t_BitUtil_pop_intersect(PyTypeObject *type, PyObject *args)
        {
          JArray< jlong > a0((jobject) NULL);
          JArray< jlong > a1((jobject) NULL);
          jint a2;
          jint a3;
          jlong result;

          if (!parseArgs(args, "[J[JII", &a0, &a1, &a2, &a3))
          {
            OBJ_CALL(result = ::org::apache::lucene::util::BitUtil::pop_intersect(a0, a1, a2, a3));
            return PyLong_FromLongLong((PY_LONG_LONG) result);
          }

          PyErr_SetArgsError(type, "pop_intersect", args);
          return NULL;
        }

        static PyObject *t_BitUtil_pop_union(PyTypeObject *type, PyObject *args)
        {
          JArray< jlong > a0((jobject) NULL);
          JArray< jlong > a1((jobject) NULL);
          jint a2;
          jint a3;
          jlong result;

          if (!parseArgs(args, "[J[JII", &a0, &a1, &a2, &a3))
          {
            OBJ_CALL(result = ::org::apache::lucene::util::BitUtil::pop_union(a0, a1, a2, a3));
            return PyLong_FromLongLong((PY_LONG_LONG) result);
          }

          PyErr_SetArgsError(type, "pop_union", args);
          return NULL;
        }

        static PyObject *t_BitUtil_pop_xor(PyTypeObject *type, PyObject *args)
        {
          JArray< jlong > a0((jobject) NULL);
          JArray< jlong > a1((jobject) NULL);
          jint a2;
          jint a3;
          jlong result;

          if (!parseArgs(args, "[J[JII", &a0, &a1, &a2, &a3))
          {
            OBJ_CALL(result = ::org::apache::lucene::util::BitUtil::pop_xor(a0, a1, a2, a3));
            return PyLong_FromLongLong((PY_LONG_LONG) result);
          }

          PyErr_SetArgsError(type, "pop_xor", args);
          return NULL;
        }

        static PyObject *t_BitUtil_zigZagDecode(PyTypeObject *type, PyObject *args)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 1:
            {
              jint a0;
              jint result;

              if (!parseArgs(args, "I", &a0))
              {
                OBJ_CALL(result = ::org::apache::lucene::util::BitUtil::zigZagDecode(a0));
                return PyLong_FromLong((long) result);
              }
            }
            {
              jlong a0;
              jlong result;

              if (!parseArgs(args, "J", &a0))
              {
                OBJ_CALL(result = ::org::apache::lucene::util::BitUtil::zigZagDecode(a0));
                return PyLong_FromLongLong((PY_LONG_LONG) result);
              }
            }
          }

          PyErr_SetArgsError(type, "zigZagDecode", args);
          return NULL;
        }

        static PyObject *t_BitUtil_zigZagEncode(PyTypeObject *type, PyObject *args)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 1:
            {
              jint a0;
              jint result;

              if (!parseArgs(args, "I", &a0))
              {
                OBJ_CALL(result = ::org::apache::lucene::util::BitUtil::zigZagEncode(a0));
                return PyLong_FromLong((long) result);
              }
            }
            {
              jlong a0;
              jlong result;

              if (!parseArgs(args, "J", &a0))
              {
                OBJ_CALL(result = ::org::apache::lucene::util::BitUtil::zigZagEncode(a0));
                return PyLong_FromLongLong((PY_LONG_LONG) result);
              }
            }
          }

          PyErr_SetArgsError(type, "zigZagEncode", args);
          return NULL;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queryparser/flexible/standard/nodes/MultiPhraseQueryNode.h"
#include "org/apache/lucene/queryparser/flexible/core/parser/EscapeQuerySyntax.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/queryparser/flexible/core/nodes/QueryNode.h"
#include "java/lang/String.h"
#include "java/lang/CharSequence.h"
#include "org/apache/lucene/queryparser/flexible/core/nodes/FieldableNode.h"
#include "java/lang/CloneNotSupportedException.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace standard {
            namespace nodes {

              ::java::lang::Class *MultiPhraseQueryNode::class$ = NULL;
              jmethodID *MultiPhraseQueryNode::mids$ = NULL;
              bool MultiPhraseQueryNode::live$ = false;

              jclass MultiPhraseQueryNode::initializeClass(bool getOnly)
              {
                if (getOnly)
                  return (jclass) (live$ ? class$->this$ : NULL);
                if (class$ == NULL)
                {
                  jclass cls = (jclass) env->findClass("org/apache/lucene/queryparser/flexible/standard/nodes/MultiPhraseQueryNode");

                  mids$ = new jmethodID[max_mid];
                  mids$[mid_init$_f2cc1bce94666404] = env->getMethodID(cls, "<init>", "()V");
                  mids$[mid_cloneTree_7f4134ae4682ace0] = env->getMethodID(cls, "cloneTree", "()Lorg/apache/lucene/queryparser/flexible/core/nodes/QueryNode;");
                  mids$[mid_getField_ba44900ab7d793b9] = env->getMethodID(cls, "getField", "()Ljava/lang/CharSequence;");
                  mids$[mid_setField_4b7f5e38f806ae55] = env->getMethodID(cls, "setField", "(Ljava/lang/CharSequence;)V");
                  mids$[mid_toQueryString_6bb2daa53c506f10] = env->getMethodID(cls, "toQueryString", "(Lorg/apache/lucene/queryparser/flexible/core/parser/EscapeQuerySyntax;)Ljava/lang/CharSequence;");
                  mids$[mid_toString_db9b55ba01e03e4b] = env->getMethodID(cls, "toString", "()Ljava/lang/String;");

                  class$ = new ::java::lang::Class(cls);
                  live$ = true;
                }
                return (jclass) class$->this$;
              }

              MultiPhraseQueryNode::MultiPhraseQueryNode() : ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNodeImpl(env->newObject(initializeClass, &mids$, mid_init$_f2cc1bce94666404)) {}

              ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode MultiPhraseQueryNode::cloneTree() const
              {
                return ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode(env->callObjectMethod(this$, mids$[mid_cloneTree_7f4134ae4682ace0]));
              }

              ::java::lang::CharSequence MultiPhraseQueryNode::getField() const
              {
                return ::java::lang::CharSequence(env->callObjectMethod(this$, mids$[mid_getField_ba44900ab7d793b9]));
              }

              void MultiPhraseQueryNode::setField(const ::java::lang::CharSequence & a0) const
              {
                env->callVoidMethod(this$, mids$[mid_setField_4b7f5e38f806ae55], a0.this$);
              }

              ::java::lang::CharSequence MultiPhraseQueryNode::toQueryString(const ::org::apache::lucene::queryparser::flexible::core::parser::EscapeQuerySyntax & a0) const
              {
                return ::java::lang::CharSequence(env->callObjectMethod(this$, mids$[mid_toQueryString_6bb2daa53c506f10], a0.this$));
              }

              ::java::lang::String MultiPhraseQueryNode::toString() const
              {
                return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_db9b55ba01e03e4b]));
              }
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace standard {
            namespace nodes {
              static PyObject *t_MultiPhraseQueryNode_cast_(PyTypeObject *type, PyObject *arg);
              static PyObject *t_MultiPhraseQueryNode_instance_(PyTypeObject *type, PyObject *arg);
              static int t_MultiPhraseQueryNode_init_(t_MultiPhraseQueryNode *self, PyObject *args, PyObject *kwds);
              static PyObject *t_MultiPhraseQueryNode_cloneTree(t_MultiPhraseQueryNode *self, PyObject *args);
              static PyObject *t_MultiPhraseQueryNode_getField(t_MultiPhraseQueryNode *self);
              static PyObject *t_MultiPhraseQueryNode_setField(t_MultiPhraseQueryNode *self, PyObject *arg);
              static PyObject *t_MultiPhraseQueryNode_toQueryString(t_MultiPhraseQueryNode *self, PyObject *args);
              static PyObject *t_MultiPhraseQueryNode_toString(t_MultiPhraseQueryNode *self, PyObject *args);
              static PyObject *t_MultiPhraseQueryNode_get__field(t_MultiPhraseQueryNode *self, void *data);
              static int t_MultiPhraseQueryNode_set__field(t_MultiPhraseQueryNode *self, PyObject *arg, void *data);
              static PyGetSetDef t_MultiPhraseQueryNode__fields_[] = {
                DECLARE_GETSET_FIELD(t_MultiPhraseQueryNode, field),
                { NULL, NULL, NULL, NULL, NULL }
              };

              static PyMethodDef t_MultiPhraseQueryNode__methods_[] = {
                DECLARE_METHOD(t_MultiPhraseQueryNode, cast_, METH_O | METH_CLASS),
                DECLARE_METHOD(t_MultiPhraseQueryNode, instance_, METH_O | METH_CLASS),
                DECLARE_METHOD(t_MultiPhraseQueryNode, cloneTree, METH_VARARGS),
                DECLARE_METHOD(t_MultiPhraseQueryNode, getField, METH_NOARGS),
                DECLARE_METHOD(t_MultiPhraseQueryNode, setField, METH_O),
                DECLARE_METHOD(t_MultiPhraseQueryNode, toQueryString, METH_VARARGS),
                DECLARE_METHOD(t_MultiPhraseQueryNode, toString, METH_VARARGS),
                { NULL, NULL, 0, NULL }
              };

              static PyType_Slot PY_TYPE_SLOTS(MultiPhraseQueryNode)[] = {
                { Py_tp_methods, t_MultiPhraseQueryNode__methods_ },
                { Py_tp_init, (void *) t_MultiPhraseQueryNode_init_ },
                { Py_tp_getset, t_MultiPhraseQueryNode__fields_ },
                { 0, NULL }
              };

              static PyType_Def *PY_TYPE_BASES(MultiPhraseQueryNode)[] = {
                &PY_TYPE_DEF(::org::apache::lucene::queryparser::flexible::core::nodes::QueryNodeImpl),
                NULL
              };

              DEFINE_TYPE(MultiPhraseQueryNode, t_MultiPhraseQueryNode, MultiPhraseQueryNode);

              void t_MultiPhraseQueryNode::install(PyObject *module)
              {
                installType(&PY_TYPE(MultiPhraseQueryNode), &PY_TYPE_DEF(MultiPhraseQueryNode), module, "MultiPhraseQueryNode", 0);
              }

              void t_MultiPhraseQueryNode::initialize(PyObject *module)
              {
                PyObject_SetAttrString((PyObject *) PY_TYPE(MultiPhraseQueryNode), "class_", make_descriptor(MultiPhraseQueryNode::initializeClass, 1));
                PyObject_SetAttrString((PyObject *) PY_TYPE(MultiPhraseQueryNode), "wrapfn_", make_descriptor(t_MultiPhraseQueryNode::wrap_jobject));
                PyObject_SetAttrString((PyObject *) PY_TYPE(MultiPhraseQueryNode), "boxfn_", make_descriptor(boxObject));
              }

              static PyObject *t_MultiPhraseQueryNode_cast_(PyTypeObject *type, PyObject *arg)
              {
                if (!(arg = castCheck(arg, MultiPhraseQueryNode::initializeClass, 1)))
                  return NULL;
                return t_MultiPhraseQueryNode::wrap_Object(MultiPhraseQueryNode(((t_MultiPhraseQueryNode *) arg)->object.this$));
              }
              static PyObject *t_MultiPhraseQueryNode_instance_(PyTypeObject *type, PyObject *arg)
              {
                if (!castCheck(arg, MultiPhraseQueryNode::initializeClass, 0))
                  Py_RETURN_FALSE;
                Py_RETURN_TRUE;
              }

              static int t_MultiPhraseQueryNode_init_(t_MultiPhraseQueryNode *self, PyObject *args, PyObject *kwds)
              {
                MultiPhraseQueryNode object((jobject) NULL);

                INT_CALL(object = MultiPhraseQueryNode());
                self->object = object;

                return 0;
              }

              static PyObject *t_MultiPhraseQueryNode_cloneTree(t_MultiPhraseQueryNode *self, PyObject *args)
              {
                ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode result((jobject) NULL);

                if (!parseArgs(args, ""))
                {
                  OBJ_CALL(result = self->object.cloneTree());
                  return ::org::apache::lucene::queryparser::flexible::core::nodes::t_QueryNode::wrap_Object(result);
                }

                return callSuper(PY_TYPE(MultiPhraseQueryNode), (PyObject *) self, "cloneTree", args, 2);
              }

              static PyObject *t_MultiPhraseQueryNode_getField(t_MultiPhraseQueryNode *self)
              {
                ::java::lang::CharSequence result((jobject) NULL);
                OBJ_CALL(result = self->object.getField());
                return ::java::lang::t_CharSequence::wrap_Object(result);
              }

              static PyObject *t_MultiPhraseQueryNode_setField(t_MultiPhraseQueryNode *self, PyObject *arg)
              {
                ::java::lang::CharSequence a0((jobject) NULL);

                if (!parseArg(arg, "O", ::java::lang::PY_TYPE(CharSequence), &a0))
                {
                  OBJ_CALL(self->object.setField(a0));
                  Py_RETURN_NONE;
                }

                PyErr_SetArgsError((PyObject *) self, "setField", arg);
                return NULL;
              }

              static PyObject *t_MultiPhraseQueryNode_toQueryString(t_MultiPhraseQueryNode *self, PyObject *args)
              {
                ::org::apache::lucene::queryparser::flexible::core::parser::EscapeQuerySyntax a0((jobject) NULL);
                ::java::lang::CharSequence result((jobject) NULL);

                if (!parseArgs(args, "k", ::org::apache::lucene::queryparser::flexible::core::parser::EscapeQuerySyntax::initializeClass, &a0))
                {
                  OBJ_CALL(result = self->object.toQueryString(a0));
                  return ::java::lang::t_CharSequence::wrap_Object(result);
                }

                return callSuper(PY_TYPE(MultiPhraseQueryNode), (PyObject *) self, "toQueryString", args, 2);
              }

              static PyObject *t_MultiPhraseQueryNode_toString(t_MultiPhraseQueryNode *self, PyObject *args)
              {
                ::java::lang::String result((jobject) NULL);

                if (!parseArgs(args, ""))
                {
                  OBJ_CALL(result = self->object.toString());
                  return j2p(result);
                }

                return callSuper(PY_TYPE(MultiPhraseQueryNode), (PyObject *) self, "toString", args, 2);
              }

              static PyObject *t_MultiPhraseQueryNode_get__field(t_MultiPhraseQueryNode *self, void *data)
              {
                ::java::lang::CharSequence value((jobject) NULL);
                OBJ_CALL(value = self->object.getField());
                return ::java::lang::t_CharSequence::wrap_Object(value);
              }
              static int t_MultiPhraseQueryNode_set__field(t_MultiPhraseQueryNode *self, PyObject *arg, void *data)
              {
                {
                  ::java::lang::CharSequence value((jobject) NULL);
                  if (!parseArg(arg, "O", ::java::lang::PY_TYPE(CharSequence), &value))
                  {
                    INT_CALL(self->object.setField(value));
                    return 0;
                  }
                }
                PyErr_SetArgsError((PyObject *) self, "field", arg);
                return -1;
              }
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/facet/taxonomy/SearcherTaxonomyManager.h"
#include "org/apache/lucene/index/IndexReader.h"
#include "org/apache/lucene/index/IndexWriter.h"
#include "org/apache/lucene/facet/taxonomy/SearcherTaxonomyManager$SearcherAndTaxonomy.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/store/Directory.h"
#include "org/apache/lucene/search/SearcherFactory.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/facet/taxonomy/directory/DirectoryTaxonomyWriter.h"
#include "org/apache/lucene/facet/taxonomy/directory/DirectoryTaxonomyReader.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace facet {
        namespace taxonomy {

          ::java::lang::Class *SearcherTaxonomyManager::class$ = NULL;
          jmethodID *SearcherTaxonomyManager::mids$ = NULL;
          bool SearcherTaxonomyManager::live$ = false;

          jclass SearcherTaxonomyManager::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/facet/taxonomy/SearcherTaxonomyManager");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_72e2396fabbd42f0] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/index/IndexReader;Lorg/apache/lucene/facet/taxonomy/directory/DirectoryTaxonomyReader;Lorg/apache/lucene/search/SearcherFactory;)V");
              mids$[mid_init$_ccdbb8b8c1f803f4] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/index/IndexWriter;Lorg/apache/lucene/search/SearcherFactory;Lorg/apache/lucene/facet/taxonomy/directory/DirectoryTaxonomyWriter;)V");
              mids$[mid_init$_4eb14fe126628cad] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/store/Directory;Lorg/apache/lucene/store/Directory;Lorg/apache/lucene/search/SearcherFactory;)V");
              mids$[mid_init$_e52fd45136d31028] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/index/IndexWriter;ZLorg/apache/lucene/search/SearcherFactory;Lorg/apache/lucene/facet/taxonomy/directory/DirectoryTaxonomyWriter;)V");
              mids$[mid_refreshIfNeeded_5c61e816c7753b1e] = env->getMethodID(cls, "refreshIfNeeded", "(Lorg/apache/lucene/facet/taxonomy/SearcherTaxonomyManager$SearcherAndTaxonomy;)Lorg/apache/lucene/facet/taxonomy/SearcherTaxonomyManager$SearcherAndTaxonomy;");
              mids$[mid_tryIncRef_14e0c7cbb0bc6a28] = env->getMethodID(cls, "tryIncRef", "(Lorg/apache/lucene/facet/taxonomy/SearcherTaxonomyManager$SearcherAndTaxonomy;)Z");
              mids$[mid_decRef_190a08f619ab3c18] = env->getMethodID(cls, "decRef", "(Lorg/apache/lucene/facet/taxonomy/SearcherTaxonomyManager$SearcherAndTaxonomy;)V");
              mids$[mid_getRefCount_55ac14ebcefa4900] = env->getMethodID(cls, "getRefCount", "(Lorg/apache/lucene/facet/taxonomy/SearcherTaxonomyManager$SearcherAndTaxonomy;)I");

              class$ = new ::java::lang::Class(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          SearcherTaxonomyManager::SearcherTaxonomyManager(const ::org::apache::lucene::index::IndexReader & a0, const ::org::apache::lucene::facet::taxonomy::directory::DirectoryTaxonomyReader & a1, const ::org::apache::lucene::search::SearcherFactory & a2) : ::org::apache::lucene::search::ReferenceManager(env->newObject(initializeClass, &mids$, mid_init$_72e2396fabbd42f0, a0.this$, a1.this$, a2.this$)) {}

          SearcherTaxonomyManager::SearcherTaxonomyManager(const ::org::apache::lucene::index::IndexWriter & a0, const ::org::apache::lucene::search::SearcherFactory & a1, const ::org::apache::lucene::facet::taxonomy::directory::DirectoryTaxonomyWriter & a2) : ::org::apache::lucene::search::ReferenceManager(env->newObject(initializeClass, &mids$, mid_init$_ccdbb8b8c1f803f4, a0.this$, a1.this$, a2.this$)) {}

          SearcherTaxonomyManager::SearcherTaxonomyManager(const ::org::apache::lucene::store::Directory & a0, const ::org::apache::lucene::store::Directory & a1, const ::org::apache::lucene::search::SearcherFactory & a2) : ::org::apache::lucene::search::ReferenceManager(env->newObject(initializeClass, &mids$, mid_init$_4eb14fe126628cad, a0.this$, a1.this$, a2.this$)) {}

          SearcherTaxonomyManager::SearcherTaxonomyManager(const ::org::apache::lucene::index::IndexWriter & a0, jboolean a1, const ::org::apache::lucene::search::SearcherFactory & a2, const ::org::apache::lucene::facet::taxonomy::directory::DirectoryTaxonomyWriter & a3) : ::org::apache::lucene::search::ReferenceManager(env->newObject(initializeClass, &mids$, mid_init$_e52fd45136d31028, a0.this$, a1, a2.this$, a3.this$)) {}
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace facet {
        namespace taxonomy {
          static PyObject *t_SearcherTaxonomyManager_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_SearcherTaxonomyManager_instance_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_SearcherTaxonomyManager_of_(t_SearcherTaxonomyManager *self, PyObject *args);
          static int t_SearcherTaxonomyManager_init_(t_SearcherTaxonomyManager *self, PyObject *args, PyObject *kwds);
          static PyObject *t_SearcherTaxonomyManager_get__parameters_(t_SearcherTaxonomyManager *self, void *data);
          static PyGetSetDef t_SearcherTaxonomyManager__fields_[] = {
            DECLARE_GET_FIELD(t_SearcherTaxonomyManager, parameters_),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_SearcherTaxonomyManager__methods_[] = {
            DECLARE_METHOD(t_SearcherTaxonomyManager, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_SearcherTaxonomyManager, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_SearcherTaxonomyManager, of_, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          static PyType_Slot PY_TYPE_SLOTS(SearcherTaxonomyManager)[] = {
            { Py_tp_methods, t_SearcherTaxonomyManager__methods_ },
            { Py_tp_init, (void *) t_SearcherTaxonomyManager_init_ },
            { Py_tp_getset, t_SearcherTaxonomyManager__fields_ },
            { 0, NULL }
          };

          static PyType_Def *PY_TYPE_BASES(SearcherTaxonomyManager)[] = {
            &PY_TYPE_DEF(::org::apache::lucene::search::ReferenceManager),
            NULL
          };

          DEFINE_TYPE(SearcherTaxonomyManager, t_SearcherTaxonomyManager, SearcherTaxonomyManager);
          PyObject *t_SearcherTaxonomyManager::wrap_Object(const SearcherTaxonomyManager& object, PyTypeObject *p0)
          {
            PyObject *obj = t_SearcherTaxonomyManager::wrap_Object(object);
            if (obj != NULL && obj != Py_None)
            {
              t_SearcherTaxonomyManager *self = (t_SearcherTaxonomyManager *) obj;
              self->parameters[0] = p0;
            }
            return obj;
          }

          PyObject *t_SearcherTaxonomyManager::wrap_jobject(const jobject& object, PyTypeObject *p0)
          {
            PyObject *obj = t_SearcherTaxonomyManager::wrap_jobject(object);
            if (obj != NULL && obj != Py_None)
            {
              t_SearcherTaxonomyManager *self = (t_SearcherTaxonomyManager *) obj;
              self->parameters[0] = p0;
            }
            return obj;
          }

          void t_SearcherTaxonomyManager::install(PyObject *module)
          {
            installType(&PY_TYPE(SearcherTaxonomyManager), &PY_TYPE_DEF(SearcherTaxonomyManager), module, "SearcherTaxonomyManager", 0);
            PyObject_SetAttrString((PyObject *) PY_TYPE(SearcherTaxonomyManager), "SearcherAndTaxonomy", make_descriptor(&PY_TYPE_DEF(SearcherTaxonomyManager$SearcherAndTaxonomy)));
          }

          void t_SearcherTaxonomyManager::initialize(PyObject *module)
          {
            PyObject_SetAttrString((PyObject *) PY_TYPE(SearcherTaxonomyManager), "class_", make_descriptor(SearcherTaxonomyManager::initializeClass, 1));
            PyObject_SetAttrString((PyObject *) PY_TYPE(SearcherTaxonomyManager), "wrapfn_", make_descriptor(t_SearcherTaxonomyManager::wrap_jobject));
            PyObject_SetAttrString((PyObject *) PY_TYPE(SearcherTaxonomyManager), "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_SearcherTaxonomyManager_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, SearcherTaxonomyManager::initializeClass, 1)))
              return NULL;
            return t_SearcherTaxonomyManager::wrap_Object(SearcherTaxonomyManager(((t_SearcherTaxonomyManager *) arg)->object.this$));
          }
          static PyObject *t_SearcherTaxonomyManager_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, SearcherTaxonomyManager::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static PyObject *t_SearcherTaxonomyManager_of_(t_SearcherTaxonomyManager *self, PyObject *args)
          {
            if (!parseArg(args, "T", 1, &(self->parameters)))
              Py_RETURN_SELF;
            return PyErr_SetArgsError((PyObject *) self, "of_", args);
          }

          static int t_SearcherTaxonomyManager_init_(t_SearcherTaxonomyManager *self, PyObject *args, PyObject *kwds)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 3:
              {
                ::org::apache::lucene::index::IndexReader a0((jobject) NULL);
                ::org::apache::lucene::facet::taxonomy::directory::DirectoryTaxonomyReader a1((jobject) NULL);
                ::org::apache::lucene::search::SearcherFactory a2((jobject) NULL);
                SearcherTaxonomyManager object((jobject) NULL);

                if (!parseArgs(args, "kkk", ::org::apache::lucene::index::IndexReader::initializeClass, ::org::apache::lucene::facet::taxonomy::directory::DirectoryTaxonomyReader::initializeClass, ::org::apache::lucene::search::SearcherFactory::initializeClass, &a0, &a1, &a2))
                {
                  INT_CALL(object = SearcherTaxonomyManager(a0, a1, a2));
                  self->object = object;
                  self->parameters[0] = ::org::apache::lucene::facet::taxonomy::PY_TYPE(SearcherTaxonomyManager$SearcherAndTaxonomy);
                  break;
                }
              }
              {
                ::org::apache::lucene::index::IndexWriter a0((jobject) NULL);
                ::org::apache::lucene::search::SearcherFactory a1((jobject) NULL);
                ::org::apache::lucene::facet::taxonomy::directory::DirectoryTaxonomyWriter a2((jobject) NULL);
                SearcherTaxonomyManager object((jobject) NULL);

                if (!parseArgs(args, "kkk", ::org::apache::lucene::index::IndexWriter::initializeClass, ::org::apache::lucene::search::SearcherFactory::initializeClass, ::org::apache::lucene::facet::taxonomy::directory::DirectoryTaxonomyWriter::initializeClass, &a0, &a1, &a2))
                {
                  INT_CALL(object = SearcherTaxonomyManager(a0, a1, a2));
                  self->object = object;
                  self->parameters[0] = ::org::apache::lucene::facet::taxonomy::PY_TYPE(SearcherTaxonomyManager$SearcherAndTaxonomy);
                  break;
                }
              }
              {
                ::org::apache::lucene::store::Directory a0((jobject) NULL);
                ::org::apache::lucene::store::Directory a1((jobject) NULL);
                ::org::apache::lucene::search::SearcherFactory a2((jobject) NULL);
                SearcherTaxonomyManager object((jobject) NULL);

                if (!parseArgs(args, "kkk", ::org::apache::lucene::store::Directory::initializeClass, ::org::apache::lucene::store::Directory::initializeClass, ::org::apache::lucene::search::SearcherFactory::initializeClass, &a0, &a1, &a2))
                {
                  INT_CALL(object = SearcherTaxonomyManager(a0, a1, a2));
                  self->object = object;
                  self->parameters[0] = ::org::apache::lucene::facet::taxonomy::PY_TYPE(SearcherTaxonomyManager$SearcherAndTaxonomy);
                  break;
                }
              }
              goto err;
             case 4:
              {
                ::org::apache::lucene::index::IndexWriter a0((jobject) NULL);
                jboolean a1;
                ::org::apache::lucene::search::SearcherFactory a2((jobject) NULL);
                ::org::apache::lucene::facet::taxonomy::directory::DirectoryTaxonomyWriter a3((jobject) NULL);
                SearcherTaxonomyManager object((jobject) NULL);

                if (!parseArgs(args, "kZkk", ::org::apache::lucene::index::IndexWriter::initializeClass, ::org::apache::lucene::search::SearcherFactory::initializeClass, ::org::apache::lucene::facet::taxonomy::directory::DirectoryTaxonomyWriter::initializeClass, &a0, &a1, &a2, &a3))
                {
                  INT_CALL(object = SearcherTaxonomyManager(a0, a1, a2, a3));
                  self->object = object;
                  self->parameters[0] = ::org::apache::lucene::facet::taxonomy::PY_TYPE(SearcherTaxonomyManager$SearcherAndTaxonomy);
                  break;
                }
              }
             default:
             err:
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }
          static PyObject *t_SearcherTaxonomyManager_get__parameters_(t_SearcherTaxonomyManager *self, void *data)
          {
            return typeParameters(self->parameters, sizeof(self->parameters));
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/grouping/TopGroups.h"
#include "org/apache/lucene/search/grouping/TopGroups$ScoreMergeMode.h"
#include "org/apache/lucene/search/SortField.h"
#include "org/apache/lucene/search/grouping/GroupDocs.h"
#include "org/apache/lucene/search/grouping/TopGroups.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/search/Sort.h"
#include "java/lang/Integer.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace grouping {

          ::java::lang::Class *TopGroups::class$ = NULL;
          jmethodID *TopGroups::mids$ = NULL;
          jfieldID *TopGroups::fids$ = NULL;
          bool TopGroups::live$ = false;

          jclass TopGroups::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/search/grouping/TopGroups");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_57d56695311b5cd3] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/search/grouping/TopGroups;Ljava/lang/Integer;)V");
              mids$[mid_init$_e9e2150cb290b30e] = env->getMethodID(cls, "<init>", "([Lorg/apache/lucene/search/SortField;[Lorg/apache/lucene/search/SortField;II[Lorg/apache/lucene/search/grouping/GroupDocs;F)V");
              mids$[mid_merge_db1f8a8706207dc5] = env->getStaticMethodID(cls, "merge", "([Lorg/apache/lucene/search/grouping/TopGroups;Lorg/apache/lucene/search/Sort;Lorg/apache/lucene/search/Sort;IILorg/apache/lucene/search/grouping/TopGroups$ScoreMergeMode;)Lorg/apache/lucene/search/grouping/TopGroups;");

              fids$ = new jfieldID[max_fid];
              fids$[fid_groupSort] = env->getFieldID(cls, "groupSort", "[Lorg/apache/lucene/search/SortField;");
              fids$[fid_groups] = env->getFieldID(cls, "groups", "[Lorg/apache/lucene/search/grouping/GroupDocs;");
              fids$[fid_maxScore] = env->getFieldID(cls, "maxScore", "F");
              fids$[fid_totalGroupCount] = env->getFieldID(cls, "totalGroupCount", "Ljava/lang/Integer;");
              fids$[fid_totalGroupedHitCount] = env->getFieldID(cls, "totalGroupedHitCount", "I");
              fids$[fid_totalHitCount] = env->getFieldID(cls, "totalHitCount", "I");
              fids$[fid_withinGroupSort] = env->getFieldID(cls, "withinGroupSort", "[Lorg/apache/lucene/search/SortField;");

              class$ = new ::java::lang::Class(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          TopGroups::TopGroups(const TopGroups & a0, const ::java::lang::Integer & a1) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_57d56695311b5cd3, a0.this$, a1.this$)) {}

          TopGroups::TopGroups(const JArray< ::org::apache::lucene::search::SortField > & a0, const JArray< ::org::apache::lucene::search::SortField > & a1, jint a2, jint a3, const JArray< ::org::apache::lucene::search::grouping::GroupDocs > & a4, jfloat a5) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_e9e2150cb290b30e, a0.this$, a1.this$, a2, a3, a4.this$, a5)) {}

          TopGroups TopGroups::merge(const JArray< TopGroups > & a0, const ::org::apache::lucene::search::Sort & a1, const ::org::apache::lucene::search::Sort & a2, jint a3, jint a4, const ::org::apache::lucene::search::grouping::TopGroups$ScoreMergeMode & a5)
          {
            jclass cls = env->getClass(initializeClass);
            return TopGroups(env->callStaticObjectMethod(cls, mids$[mid_merge_db1f8a8706207dc5], a0.this$, a1.this$, a2.this$, a3, a4, a5.this$));
          }

          JArray< ::org::apache::lucene::search::SortField > TopGroups::_get_groupSort() const
          {
            return JArray< ::org::apache::lucene::search::SortField >(env->getObjectField(this$, fids$[fid_groupSort]));
          }

          JArray< ::org::apache::lucene::search::grouping::GroupDocs > TopGroups::_get_groups() const
          {
            return JArray< ::org::apache::lucene::search::grouping::GroupDocs >(env->getObjectField(this$, fids$[fid_groups]));
          }

          jfloat TopGroups::_get_maxScore() const
          {
            return env->getFloatField(this$, fids$[fid_maxScore]);
          }

          ::java::lang::Integer TopGroups::_get_totalGroupCount() const
          {
            return ::java::lang::Integer(env->getObjectField(this$, fids$[fid_totalGroupCount]));
          }

          jint TopGroups::_get_totalGroupedHitCount() const
          {
            return env->getIntField(this$, fids$[fid_totalGroupedHitCount]);
          }

          jint TopGroups::_get_totalHitCount() const
          {
            return env->getIntField(this$, fids$[fid_totalHitCount]);
          }

          JArray< ::org::apache::lucene::search::SortField > TopGroups::_get_withinGroupSort() const
          {
            return JArray< ::org::apache::lucene::search::SortField >(env->getObjectField(this$, fids$[fid_withinGroupSort]));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace grouping {
          static PyObject *t_TopGroups_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_TopGroups_instance_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_TopGroups_of_(t_TopGroups *self, PyObject *args);
          static int t_TopGroups_init_(t_TopGroups *self, PyObject *args, PyObject *kwds);
          static PyObject *t_TopGroups_merge(PyTypeObject *type, PyObject *args);
          static PyObject *t_TopGroups_get__groupSort(t_TopGroups *self, void *data);
          static PyObject *t_TopGroups_get__groups(t_TopGroups *self, void *data);
          static PyObject *t_TopGroups_get__maxScore(t_TopGroups *self, void *data);
          static PyObject *t_TopGroups_get__totalGroupCount(t_TopGroups *self, void *data);
          static PyObject *t_TopGroups_get__totalGroupedHitCount(t_TopGroups *self, void *data);
          static PyObject *t_TopGroups_get__totalHitCount(t_TopGroups *self, void *data);
          static PyObject *t_TopGroups_get__withinGroupSort(t_TopGroups *self, void *data);

          static PyObject *t_TopGroups_get__parameters_(t_TopGroups *self, void *data);
          static PyGetSetDef t_TopGroups__fields_[] = {
            DECLARE_GET_FIELD(t_TopGroups, groupSort),
            DECLARE_GET_FIELD(t_TopGroups, groups),
            DECLARE_GET_FIELD(t_TopGroups, maxScore),
            DECLARE_GET_FIELD(t_TopGroups, totalGroupCount),
            DECLARE_GET_FIELD(t_TopGroups, totalGroupedHitCount),
            DECLARE_GET_FIELD(t_TopGroups, totalHitCount),
            DECLARE_GET_FIELD(t_TopGroups, withinGroupSort),
            DECLARE_GET_FIELD(t_TopGroups, parameters_),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_TopGroups__methods_[] = {
            DECLARE_METHOD(t_TopGroups, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_TopGroups, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_TopGroups, of_, METH_VARARGS),
            DECLARE_METHOD(t_TopGroups, merge, METH_VARARGS | METH_CLASS),
            { NULL, NULL, 0, NULL }
          };

          static PyType_Slot PY_TYPE_SLOTS(TopGroups)[] = {
            { Py_tp_methods, t_TopGroups__methods_ },
            { Py_tp_init, (void *) t_TopGroups_init_ },
            { Py_tp_getset, t_TopGroups__fields_ },
            { 0, NULL }
          };

          static PyType_Def *PY_TYPE_BASES(TopGroups)[] = {
            &PY_TYPE_DEF(::java::lang::Object),
            NULL
          };

          DEFINE_TYPE(TopGroups, t_TopGroups, TopGroups);
          PyObject *t_TopGroups::wrap_Object(const TopGroups& object, PyTypeObject *p0)
          {
            PyObject *obj = t_TopGroups::wrap_Object(object);
            if (obj != NULL && obj != Py_None)
            {
              t_TopGroups *self = (t_TopGroups *) obj;
              self->parameters[0] = p0;
            }
            return obj;
          }

          PyObject *t_TopGroups::wrap_jobject(const jobject& object, PyTypeObject *p0)
          {
            PyObject *obj = t_TopGroups::wrap_jobject(object);
            if (obj != NULL && obj != Py_None)
            {
              t_TopGroups *self = (t_TopGroups *) obj;
              self->parameters[0] = p0;
            }
            return obj;
          }

          void t_TopGroups::install(PyObject *module)
          {
            installType(&PY_TYPE(TopGroups), &PY_TYPE_DEF(TopGroups), module, "TopGroups", 0);
            PyObject_SetAttrString((PyObject *) PY_TYPE(TopGroups), "ScoreMergeMode", make_descriptor(&PY_TYPE_DEF(TopGroups$ScoreMergeMode)));
          }

          void t_TopGroups::initialize(PyObject *module)
          {
            PyObject_SetAttrString((PyObject *) PY_TYPE(TopGroups), "class_", make_descriptor(TopGroups::initializeClass, 1));
            PyObject_SetAttrString((PyObject *) PY_TYPE(TopGroups), "wrapfn_", make_descriptor(t_TopGroups::wrap_jobject));
            PyObject_SetAttrString((PyObject *) PY_TYPE(TopGroups), "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_TopGroups_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, TopGroups::initializeClass, 1)))
              return NULL;
            return t_TopGroups::wrap_Object(TopGroups(((t_TopGroups *) arg)->object.this$));
          }
          static PyObject *t_TopGroups_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, TopGroups::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static PyObject *t_TopGroups_of_(t_TopGroups *self, PyObject *args)
          {
            if (!parseArg(args, "T", 1, &(self->parameters)))
              Py_RETURN_SELF;
            return PyErr_SetArgsError((PyObject *) self, "of_", args);
          }

          static int t_TopGroups_init_(t_TopGroups *self, PyObject *args, PyObject *kwds)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 2:
              {
                TopGroups a0((jobject) NULL);
                PyTypeObject **p0;
                ::java::lang::Integer a1((jobject) NULL);
                TopGroups object((jobject) NULL);

                if (!parseArgs(args, "KO", TopGroups::initializeClass, ::java::lang::PY_TYPE(Integer), &a0, &p0, t_TopGroups::parameters_, &a1))
                {
                  INT_CALL(object = TopGroups(a0, a1));
                  self->object = object;
                  break;
                }
              }
              goto err;
             case 6:
              {
                JArray< ::org::apache::lucene::search::SortField > a0((jobject) NULL);
                JArray< ::org::apache::lucene::search::SortField > a1((jobject) NULL);
                jint a2;
                jint a3;
                JArray< ::org::apache::lucene::search::grouping::GroupDocs > a4((jobject) NULL);
                PyTypeObject **p4;
                jfloat a5;
                TopGroups object((jobject) NULL);

                if (!parseArgs(args, "[k[kII[KF", ::org::apache::lucene::search::SortField::initializeClass, ::org::apache::lucene::search::SortField::initializeClass, ::org::apache::lucene::search::grouping::GroupDocs::initializeClass, &a0, &a1, &a2, &a3, &a4, &p4, ::org::apache::lucene::search::grouping::t_GroupDocs::parameters_, &a5))
                {
                  INT_CALL(object = TopGroups(a0, a1, a2, a3, a4, a5));
                  self->object = object;
                  break;
                }
              }
             default:
             err:
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_TopGroups_merge(PyTypeObject *type, PyObject *args)
          {
            JArray< TopGroups > a0((jobject) NULL);
            PyTypeObject **p0;
            ::org::apache::lucene::search::Sort a1((jobject) NULL);
            ::org::apache::lucene::search::Sort a2((jobject) NULL);
            jint a3;
            jint a4;
            ::org::apache::lucene::search::grouping::TopGroups$ScoreMergeMode a5((jobject) NULL);
            PyTypeObject **p5;
            TopGroups result((jobject) NULL);

            if (!parseArgs(args, "[KkkIIK", TopGroups::initializeClass, ::org::apache::lucene::search::Sort::initializeClass, ::org::apache::lucene::search::Sort::initializeClass, ::org::apache::lucene::search::grouping::TopGroups$ScoreMergeMode::initializeClass, &a0, &p0, t_TopGroups::parameters_, &a1, &a2, &a3, &a4, &a5, &p5, ::org::apache::lucene::search::grouping::t_TopGroups$ScoreMergeMode::parameters_))
            {
              OBJ_CALL(result = ::org::apache::lucene::search::grouping::TopGroups::merge(a0, a1, a2, a3, a4, a5));
              return t_TopGroups::wrap_Object(result);
            }

            PyErr_SetArgsError(type, "merge", args);
            return NULL;
          }
          static PyObject *t_TopGroups_get__parameters_(t_TopGroups *self, void *data)
          {
            return typeParameters(self->parameters, sizeof(self->parameters));
          }

          static PyObject *t_TopGroups_get__groupSort(t_TopGroups *self, void *data)
          {
            JArray< ::org::apache::lucene::search::SortField > value((jobject) NULL);
            OBJ_CALL(value = self->object._get_groupSort());
            return JArray<jobject>(value.this$).wrap(::org::apache::lucene::search::t_SortField::wrap_jobject);
          }

          static PyObject *t_TopGroups_get__groups(t_TopGroups *self, void *data)
          {
            JArray< ::org::apache::lucene::search::grouping::GroupDocs > value((jobject) NULL);
            OBJ_CALL(value = self->object._get_groups());
            return JArray<jobject>(value.this$).wrap(::org::apache::lucene::search::grouping::t_GroupDocs::wrap_jobject);
          }

          static PyObject *t_TopGroups_get__maxScore(t_TopGroups *self, void *data)
          {
            jfloat value;
            OBJ_CALL(value = self->object._get_maxScore());
            return PyFloat_FromDouble((double) value);
          }

          static PyObject *t_TopGroups_get__totalGroupCount(t_TopGroups *self, void *data)
          {
            ::java::lang::Integer value((jobject) NULL);
            OBJ_CALL(value = self->object._get_totalGroupCount());
            return ::java::lang::t_Integer::wrap_Object(value);
          }

          static PyObject *t_TopGroups_get__totalGroupedHitCount(t_TopGroups *self, void *data)
          {
            jint value;
            OBJ_CALL(value = self->object._get_totalGroupedHitCount());
            return PyLong_FromLong((long) value);
          }

          static PyObject *t_TopGroups_get__totalHitCount(t_TopGroups *self, void *data)
          {
            jint value;
            OBJ_CALL(value = self->object._get_totalHitCount());
            return PyLong_FromLong((long) value);
          }

          static PyObject *t_TopGroups_get__withinGroupSort(t_TopGroups *self, void *data)
          {
            JArray< ::org::apache::lucene::search::SortField > value((jobject) NULL);
            OBJ_CALL(value = self->object._get_withinGroupSort());
            return JArray<jobject>(value.this$).wrap(::org::apache::lucene::search::t_SortField::wrap_jobject);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queryparser/flexible/standard/config/StandardQueryConfigHandler$Operator.h"
#include "java/lang/String.h"
#include "org/apache/lucene/queryparser/flexible/standard/config/StandardQueryConfigHandler$Operator.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace standard {
            namespace config {

              ::java::lang::Class *StandardQueryConfigHandler$Operator::class$ = NULL;
              jmethodID *StandardQueryConfigHandler$Operator::mids$ = NULL;
              bool StandardQueryConfigHandler$Operator::live$ = false;
              StandardQueryConfigHandler$Operator *StandardQueryConfigHandler$Operator::AND = NULL;
              StandardQueryConfigHandler$Operator *StandardQueryConfigHandler$Operator::OR = NULL;

              jclass StandardQueryConfigHandler$Operator::initializeClass(bool getOnly)
              {
                if (getOnly)
                  return (jclass) (live$ ? class$->this$ : NULL);
                if (class$ == NULL)
                {
                  jclass cls = (jclass) env->findClass("org/apache/lucene/queryparser/flexible/standard/config/StandardQueryConfigHandler$Operator");

                  mids$ = new jmethodID[max_mid];
                  mids$[mid_valueOf_e419c3e9301ebf77] = env->getStaticMethodID(cls, "valueOf", "(Ljava/lang/String;)Lorg/apache/lucene/queryparser/flexible/standard/config/StandardQueryConfigHandler$Operator;");
                  mids$[mid_values_ed8be8b0136cdb70] = env->getStaticMethodID(cls, "values", "()[Lorg/apache/lucene/queryparser/flexible/standard/config/StandardQueryConfigHandler$Operator;");

                  class$ = new ::java::lang::Class(cls);
                  cls = (jclass) class$->this$;

                  AND = new StandardQueryConfigHandler$Operator(env->getStaticObjectField(cls, "AND", "Lorg/apache/lucene/queryparser/flexible/standard/config/StandardQueryConfigHandler$Operator;"));
                  OR = new StandardQueryConfigHandler$Operator(env->getStaticObjectField(cls, "OR", "Lorg/apache/lucene/queryparser/flexible/standard/config/StandardQueryConfigHandler$Operator;"));
                  live$ = true;
                }
                return (jclass) class$->this$;
              }

              StandardQueryConfigHandler$Operator StandardQueryConfigHandler$Operator::valueOf(const ::java::lang::String & a0)
              {
                jclass cls = env->getClass(initializeClass);
                return StandardQueryConfigHandler$Operator(env->callStaticObjectMethod(cls, mids$[mid_valueOf_e419c3e9301ebf77], a0.this$));
              }

              JArray< StandardQueryConfigHandler$Operator > StandardQueryConfigHandler$Operator::values()
              {
                jclass cls = env->getClass(initializeClass);
                return JArray< StandardQueryConfigHandler$Operator >(env->callStaticObjectMethod(cls, mids$[mid_values_ed8be8b0136cdb70]));
              }
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace standard {
            namespace config {
              static PyObject *t_StandardQueryConfigHandler$Operator_cast_(PyTypeObject *type, PyObject *arg);
              static PyObject *t_StandardQueryConfigHandler$Operator_instance_(PyTypeObject *type, PyObject *arg);
              static PyObject *t_StandardQueryConfigHandler$Operator_of_(t_StandardQueryConfigHandler$Operator *self, PyObject *args);
              static PyObject *t_StandardQueryConfigHandler$Operator_valueOf(PyTypeObject *type, PyObject *args);
              static PyObject *t_StandardQueryConfigHandler$Operator_values(PyTypeObject *type);
              static PyObject *t_StandardQueryConfigHandler$Operator_get__parameters_(t_StandardQueryConfigHandler$Operator *self, void *data);
              static PyGetSetDef t_StandardQueryConfigHandler$Operator__fields_[] = {
                DECLARE_GET_FIELD(t_StandardQueryConfigHandler$Operator, parameters_),
                { NULL, NULL, NULL, NULL, NULL }
              };

              static PyMethodDef t_StandardQueryConfigHandler$Operator__methods_[] = {
                DECLARE_METHOD(t_StandardQueryConfigHandler$Operator, cast_, METH_O | METH_CLASS),
                DECLARE_METHOD(t_StandardQueryConfigHandler$Operator, instance_, METH_O | METH_CLASS),
                DECLARE_METHOD(t_StandardQueryConfigHandler$Operator, of_, METH_VARARGS),
                DECLARE_METHOD(t_StandardQueryConfigHandler$Operator, valueOf, METH_VARARGS | METH_CLASS),
                DECLARE_METHOD(t_StandardQueryConfigHandler$Operator, values, METH_NOARGS | METH_CLASS),
                { NULL, NULL, 0, NULL }
              };

              static PyType_Slot PY_TYPE_SLOTS(StandardQueryConfigHandler$Operator)[] = {
                { Py_tp_methods, t_StandardQueryConfigHandler$Operator__methods_ },
                { Py_tp_init, (void *) abstract_init },
                { Py_tp_getset, t_StandardQueryConfigHandler$Operator__fields_ },
                { 0, NULL }
              };

              static PyType_Def *PY_TYPE_BASES(StandardQueryConfigHandler$Operator)[] = {
                &PY_TYPE_DEF(::java::lang::Enum),
                NULL
              };

              DEFINE_TYPE(StandardQueryConfigHandler$Operator, t_StandardQueryConfigHandler$Operator, StandardQueryConfigHandler$Operator);
              PyObject *t_StandardQueryConfigHandler$Operator::wrap_Object(const StandardQueryConfigHandler$Operator& object, PyTypeObject *p0)
              {
                PyObject *obj = t_StandardQueryConfigHandler$Operator::wrap_Object(object);
                if (obj != NULL && obj != Py_None)
                {
                  t_StandardQueryConfigHandler$Operator *self = (t_StandardQueryConfigHandler$Operator *) obj;
                  self->parameters[0] = p0;
                }
                return obj;
              }

              PyObject *t_StandardQueryConfigHandler$Operator::wrap_jobject(const jobject& object, PyTypeObject *p0)
              {
                PyObject *obj = t_StandardQueryConfigHandler$Operator::wrap_jobject(object);
                if (obj != NULL && obj != Py_None)
                {
                  t_StandardQueryConfigHandler$Operator *self = (t_StandardQueryConfigHandler$Operator *) obj;
                  self->parameters[0] = p0;
                }
                return obj;
              }

              void t_StandardQueryConfigHandler$Operator::install(PyObject *module)
              {
                installType(&PY_TYPE(StandardQueryConfigHandler$Operator), &PY_TYPE_DEF(StandardQueryConfigHandler$Operator), module, "StandardQueryConfigHandler$Operator", 0);
              }

              void t_StandardQueryConfigHandler$Operator::initialize(PyObject *module)
              {
                PyObject_SetAttrString((PyObject *) PY_TYPE(StandardQueryConfigHandler$Operator), "class_", make_descriptor(StandardQueryConfigHandler$Operator::initializeClass, 1));
                PyObject_SetAttrString((PyObject *) PY_TYPE(StandardQueryConfigHandler$Operator), "wrapfn_", make_descriptor(t_StandardQueryConfigHandler$Operator::wrap_jobject));
                PyObject_SetAttrString((PyObject *) PY_TYPE(StandardQueryConfigHandler$Operator), "boxfn_", make_descriptor(boxObject));
                env->getClass(StandardQueryConfigHandler$Operator::initializeClass);
                PyObject_SetAttrString((PyObject *) PY_TYPE(StandardQueryConfigHandler$Operator), "AND", make_descriptor(t_StandardQueryConfigHandler$Operator::wrap_Object(*StandardQueryConfigHandler$Operator::AND)));
                PyObject_SetAttrString((PyObject *) PY_TYPE(StandardQueryConfigHandler$Operator), "OR", make_descriptor(t_StandardQueryConfigHandler$Operator::wrap_Object(*StandardQueryConfigHandler$Operator::OR)));
              }

              static PyObject *t_StandardQueryConfigHandler$Operator_cast_(PyTypeObject *type, PyObject *arg)
              {
                if (!(arg = castCheck(arg, StandardQueryConfigHandler$Operator::initializeClass, 1)))
                  return NULL;
                return t_StandardQueryConfigHandler$Operator::wrap_Object(StandardQueryConfigHandler$Operator(((t_StandardQueryConfigHandler$Operator *) arg)->object.this$));
              }
              static PyObject *t_StandardQueryConfigHandler$Operator_instance_(PyTypeObject *type, PyObject *arg)
              {
                if (!castCheck(arg, StandardQueryConfigHandler$Operator::initializeClass, 0))
                  Py_RETURN_FALSE;
                Py_RETURN_TRUE;
              }

              static PyObject *t_StandardQueryConfigHandler$Operator_of_(t_StandardQueryConfigHandler$Operator *self, PyObject *args)
              {
                if (!parseArg(args, "T", 1, &(self->parameters)))
                  Py_RETURN_SELF;
                return PyErr_SetArgsError((PyObject *) self, "of_", args);
              }

              static PyObject *t_StandardQueryConfigHandler$Operator_valueOf(PyTypeObject *type, PyObject *args)
              {
                ::java::lang::String a0((jobject) NULL);
                StandardQueryConfigHandler$Operator result((jobject) NULL);

                if (!parseArgs(args, "s", &a0))
                {
                  OBJ_CALL(result = ::org::apache::lucene::queryparser::flexible::standard::config::StandardQueryConfigHandler$Operator::valueOf(a0));
                  return t_StandardQueryConfigHandler$Operator::wrap_Object(result);
                }

                return callSuper(type, "valueOf", args, 2);
              }

              static PyObject *t_StandardQueryConfigHandler$Operator_values(PyTypeObject *type)
              {
                JArray< StandardQueryConfigHandler$Operator > result((jobject) NULL);
                OBJ_CALL(result = ::org::apache::lucene::queryparser::flexible::standard::config::StandardQueryConfigHandler$Operator::values());
                return JArray<jobject>(result.this$).wrap(t_StandardQueryConfigHandler$Operator::wrap_jobject);
              }
              static PyObject *t_StandardQueryConfigHandler$Operator_get__parameters_(t_StandardQueryConfigHandler$Operator *self, void *data)
              {
                return typeParameters(self->parameters, sizeof(self->parameters));
              }
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/reverse/ReverseStringFilter.h"
#include "java/lang/String.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/analysis/TokenStream.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace reverse {

          ::java::lang::Class *ReverseStringFilter::class$ = NULL;
          jmethodID *ReverseStringFilter::mids$ = NULL;
          bool ReverseStringFilter::live$ = false;
          jchar ReverseStringFilter::INFORMATION_SEPARATOR_MARKER = (jchar) 0;
          jchar ReverseStringFilter::PUA_EC00_MARKER = (jchar) 0;
          jchar ReverseStringFilter::RTL_DIRECTION_MARKER = (jchar) 0;
          jchar ReverseStringFilter::START_OF_HEADING_MARKER = (jchar) 0;

          jclass ReverseStringFilter::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/reverse/ReverseStringFilter");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_c26756868a754f4e] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/analysis/TokenStream;)V");
              mids$[mid_init$_ab485f7fd2eaf684] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/analysis/TokenStream;C)V");
              mids$[mid_incrementToken_8454bd5aa23fd11e] = env->getMethodID(cls, "incrementToken", "()Z");
              mids$[mid_reverse_82dffe1ba55ed767] = env->getStaticMethodID(cls, "reverse", "([C)V");
              mids$[mid_reverse_9bfa75c9f141b67f] = env->getStaticMethodID(cls, "reverse", "(Ljava/lang/String;)Ljava/lang/String;");
              mids$[mid_reverse_d7b537fea0247190] = env->getStaticMethodID(cls, "reverse", "([CI)V");
              mids$[mid_reverse_d5128be76a214037] = env->getStaticMethodID(cls, "reverse", "([CII)V");

              class$ = new ::java::lang::Class(cls);
              cls = (jclass) class$->this$;

              INFORMATION_SEPARATOR_MARKER = env->getStaticCharField(cls, "INFORMATION_SEPARATOR_MARKER");
              PUA_EC00_MARKER = env->getStaticCharField(cls, "PUA_EC00_MARKER");
              RTL_DIRECTION_MARKER = env->getStaticCharField(cls, "RTL_DIRECTION_MARKER");
              START_OF_HEADING_MARKER = env->getStaticCharField(cls, "START_OF_HEADING_MARKER");
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          ReverseStringFilter::ReverseStringFilter(const ::org::apache::lucene::analysis::TokenStream & a0) : ::org::apache::lucene::analysis::TokenFilter(env->newObject(initializeClass, &mids$, mid_init$_c26756868a754f4e, a0.this$)) {}

          ReverseStringFilter::ReverseStringFilter(const ::org::apache::lucene::analysis::TokenStream & a0, jchar a1) : ::org::apache::lucene::analysis::TokenFilter(env->newObject(initializeClass, &mids$, mid_init$_ab485f7fd2eaf684, a0.this$, a1)) {}

          jboolean ReverseStringFilter::incrementToken() const
          {
            return env->callBooleanMethod(this$, mids$[mid_incrementToken_8454bd5aa23fd11e]);
          }

          void ReverseStringFilter::reverse(const JArray< jchar > & a0)
          {
            jclass cls = env->getClass(initializeClass);
            env->callStaticVoidMethod(cls, mids$[mid_reverse_82dffe1ba55ed767], a0.this$);
          }

          ::java::lang::String ReverseStringFilter::reverse(const ::java::lang::String & a0)
          {
            jclass cls = env->getClass(initializeClass);
            return ::java::lang::String(env->callStaticObjectMethod(cls, mids$[mid_reverse_9bfa75c9f141b67f], a0.this$));
          }

          void ReverseStringFilter::reverse(const JArray< jchar > & a0, jint a1)
          {
            jclass cls = env->getClass(initializeClass);
            env->callStaticVoidMethod(cls, mids$[mid_reverse_d7b537fea0247190], a0.this$, a1);
          }

          void ReverseStringFilter::reverse(const JArray< jchar > & a0, jint a1, jint a2)
          {
            jclass cls = env->getClass(initializeClass);
            env->callStaticVoidMethod(cls, mids$[mid_reverse_d5128be76a214037], a0.this$, a1, a2);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace reverse {
          static PyObject *t_ReverseStringFilter_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_ReverseStringFilter_instance_(PyTypeObject *type, PyObject *arg);
          static int t_ReverseStringFilter_init_(t_ReverseStringFilter *self, PyObject *args, PyObject *kwds);
          static PyObject *t_ReverseStringFilter_incrementToken(t_ReverseStringFilter *self, PyObject *args);
          static PyObject *t_ReverseStringFilter_reverse(PyTypeObject *type, PyObject *args);

          static PyMethodDef t_ReverseStringFilter__methods_[] = {
            DECLARE_METHOD(t_ReverseStringFilter, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_ReverseStringFilter, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_ReverseStringFilter, incrementToken, METH_VARARGS),
            DECLARE_METHOD(t_ReverseStringFilter, reverse, METH_VARARGS | METH_CLASS),
            { NULL, NULL, 0, NULL }
          };

          static PyType_Slot PY_TYPE_SLOTS(ReverseStringFilter)[] = {
            { Py_tp_methods, t_ReverseStringFilter__methods_ },
            { Py_tp_init, (void *) t_ReverseStringFilter_init_ },
            { 0, NULL }
          };

          static PyType_Def *PY_TYPE_BASES(ReverseStringFilter)[] = {
            &PY_TYPE_DEF(::org::apache::lucene::analysis::TokenFilter),
            NULL
          };

          DEFINE_TYPE(ReverseStringFilter, t_ReverseStringFilter, ReverseStringFilter);

          void t_ReverseStringFilter::install(PyObject *module)
          {
            installType(&PY_TYPE(ReverseStringFilter), &PY_TYPE_DEF(ReverseStringFilter), module, "ReverseStringFilter", 0);
          }

          void t_ReverseStringFilter::initialize(PyObject *module)
          {
            PyObject_SetAttrString((PyObject *) PY_TYPE(ReverseStringFilter), "class_", make_descriptor(ReverseStringFilter::initializeClass, 1));
            PyObject_SetAttrString((PyObject *) PY_TYPE(ReverseStringFilter), "wrapfn_", make_descriptor(t_ReverseStringFilter::wrap_jobject));
            PyObject_SetAttrString((PyObject *) PY_TYPE(ReverseStringFilter), "boxfn_", make_descriptor(boxObject));
            env->getClass(ReverseStringFilter::initializeClass);
            PyObject_SetAttrString((PyObject *) PY_TYPE(ReverseStringFilter), "INFORMATION_SEPARATOR_MARKER", make_descriptor(ReverseStringFilter::INFORMATION_SEPARATOR_MARKER));
            PyObject_SetAttrString((PyObject *) PY_TYPE(ReverseStringFilter), "PUA_EC00_MARKER", make_descriptor(ReverseStringFilter::PUA_EC00_MARKER));
            PyObject_SetAttrString((PyObject *) PY_TYPE(ReverseStringFilter), "RTL_DIRECTION_MARKER", make_descriptor(ReverseStringFilter::RTL_DIRECTION_MARKER));
            PyObject_SetAttrString((PyObject *) PY_TYPE(ReverseStringFilter), "START_OF_HEADING_MARKER", make_descriptor(ReverseStringFilter::START_OF_HEADING_MARKER));
          }

          static PyObject *t_ReverseStringFilter_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, ReverseStringFilter::initializeClass, 1)))
              return NULL;
            return t_ReverseStringFilter::wrap_Object(ReverseStringFilter(((t_ReverseStringFilter *) arg)->object.this$));
          }
          static PyObject *t_ReverseStringFilter_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, ReverseStringFilter::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_ReverseStringFilter_init_(t_ReverseStringFilter *self, PyObject *args, PyObject *kwds)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 1:
              {
                ::org::apache::lucene::analysis::TokenStream a0((jobject) NULL);
                ReverseStringFilter object((jobject) NULL);

                if (!parseArgs(args, "k", ::org::apache::lucene::analysis::TokenStream::initializeClass, &a0))
                {
                  INT_CALL(object = ReverseStringFilter(a0));
                  self->object = object;
                  break;
                }
              }
              goto err;
             case 2:
              {
                ::org::apache::lucene::analysis::TokenStream a0((jobject) NULL);
                jchar a1;
                ReverseStringFilter object((jobject) NULL);

                if (!parseArgs(args, "kC", ::org::apache::lucene::analysis::TokenStream::initializeClass, &a0, &a1))
                {
                  INT_CALL(object = ReverseStringFilter(a0, a1));
                  self->object = object;
                  break;
                }
              }
             default:
             err:
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_ReverseStringFilter_incrementToken(t_ReverseStringFilter *self, PyObject *args)
          {
            jboolean result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.incrementToken());
              Py_RETURN_BOOL(result);
            }

            return callSuper(PY_TYPE(ReverseStringFilter), (PyObject *) self, "incrementToken", args, 2);
          }

          static PyObject *t_ReverseStringFilter_reverse(PyTypeObject *type, PyObject *args)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 1:
              {
                JArray< jchar > a0((jobject) NULL);

                if (!parseArgs(args, "[C", &a0))
                {
                  OBJ_CALL(::org::apache::lucene::analysis::reverse::ReverseStringFilter::reverse(a0));
                  Py_RETURN_NONE;
                }
              }
              {
                ::java::lang::String a0((jobject) NULL);
                ::java::lang::String result((jobject) NULL);

                if (!parseArgs(args, "s", &a0))
                {
                  OBJ_CALL(result = ::org::apache::lucene::analysis::reverse::ReverseStringFilter::reverse(a0));
                  return j2p(result);
                }
              }
              break;
             case 2:
              {
                JArray< jchar > a0((jobject) NULL);
                jint a1;

                if (!parseArgs(args, "[CI", &a0, &a1))
                {
                  OBJ_CALL(::org::apache::lucene::analysis::reverse::ReverseStringFilter::reverse(a0, a1));
                  Py_RETURN_NONE;
                }
              }
              break;
             case 3:
              {
                JArray< jchar > a0((jobject) NULL);
                jint a1;
                jint a2;

                if (!parseArgs(args, "[CII", &a0, &a1, &a2))
                {
                  OBJ_CALL(::org::apache::lucene::analysis::reverse::ReverseStringFilter::reverse(a0, a1, a2));
                  Py_RETURN_NONE;
                }
              }
            }

            PyErr_SetArgsError(type, "reverse", args);
            return NULL;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/index/CheckIndex$VerifyPointsVisitor.h"
#include "org/apache/lucene/index/PointValues$IntersectVisitor.h"
#include "org/apache/lucene/index/PointValues.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/index/PointValues$Relation.h"
#include "java/lang/String.h"
#include "java/io/IOException.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {

        ::java::lang::Class *CheckIndex$VerifyPointsVisitor::class$ = NULL;
        jmethodID *CheckIndex$VerifyPointsVisitor::mids$ = NULL;
        bool CheckIndex$VerifyPointsVisitor::live$ = false;

        jclass CheckIndex$VerifyPointsVisitor::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/index/CheckIndex$VerifyPointsVisitor");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_ebdc9f3ed87d8423] = env->getMethodID(cls, "<init>", "(Ljava/lang/String;ILorg/apache/lucene/index/PointValues;)V");
            mids$[mid_compare_7b8ae5aa66accb0b] = env->getMethodID(cls, "compare", "([B[B)Lorg/apache/lucene/index/PointValues$Relation;");
            mids$[mid_getDocCountSeen_2e5ae9edcb9b072f] = env->getMethodID(cls, "getDocCountSeen", "()J");
            mids$[mid_getPointCountSeen_2e5ae9edcb9b072f] = env->getMethodID(cls, "getPointCountSeen", "()J");
            mids$[mid_visit_040c4cd0390c5aff] = env->getMethodID(cls, "visit", "(I)V");
            mids$[mid_visit_0ff3bfb1ed512144] = env->getMethodID(cls, "visit", "(I[B)V");

            class$ = new ::java::lang::Class(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        CheckIndex$VerifyPointsVisitor::CheckIndex$VerifyPointsVisitor(const ::java::lang::String & a0, jint a1, const ::org::apache::lucene::index::PointValues & a2) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_ebdc9f3ed87d8423, a0.this$, a1, a2.this$)) {}

        ::org::apache::lucene::index::PointValues$Relation CheckIndex$VerifyPointsVisitor::compare(const JArray< jbyte > & a0, const JArray< jbyte > & a1) const
        {
          return ::org::apache::lucene::index::PointValues$Relation(env->callObjectMethod(this$, mids$[mid_compare_7b8ae5aa66accb0b], a0.this$, a1.this$));
        }

        jlong CheckIndex$VerifyPointsVisitor::getDocCountSeen() const
        {
          return env->callLongMethod(this$, mids$[mid_getDocCountSeen_2e5ae9edcb9b072f]);
        }

        jlong CheckIndex$VerifyPointsVisitor::getPointCountSeen() const
        {
          return env->callLongMethod(this$, mids$[mid_getPointCountSeen_2e5ae9edcb9b072f]);
        }

        void CheckIndex$VerifyPointsVisitor::visit(jint a0) const
        {
          env->callVoidMethod(this$, mids$[mid_visit_040c4cd0390c5aff], a0);
        }

        void CheckIndex$VerifyPointsVisitor::visit(jint a0, const JArray< jbyte > & a1) const
        {
          env->callVoidMethod(this$, mids$[mid_visit_0ff3bfb1ed512144], a0, a1.this$);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {
        static PyObject *t_CheckIndex$VerifyPointsVisitor_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_CheckIndex$VerifyPointsVisitor_instance_(PyTypeObject *type, PyObject *arg);
        static int t_CheckIndex$VerifyPointsVisitor_init_(t_CheckIndex$VerifyPointsVisitor *self, PyObject *args, PyObject *kwds);
        static PyObject *t_CheckIndex$VerifyPointsVisitor_compare(t_CheckIndex$VerifyPointsVisitor *self, PyObject *args);
        static PyObject *t_CheckIndex$VerifyPointsVisitor_getDocCountSeen(t_CheckIndex$VerifyPointsVisitor *self);
        static PyObject *t_CheckIndex$VerifyPointsVisitor_getPointCountSeen(t_CheckIndex$VerifyPointsVisitor *self);
        static PyObject *t_CheckIndex$VerifyPointsVisitor_visit(t_CheckIndex$VerifyPointsVisitor *self, PyObject *args);
        static PyObject *t_CheckIndex$VerifyPointsVisitor_get__docCountSeen(t_CheckIndex$VerifyPointsVisitor *self, void *data);
        static PyObject *t_CheckIndex$VerifyPointsVisitor_get__pointCountSeen(t_CheckIndex$VerifyPointsVisitor *self, void *data);
        static PyGetSetDef t_CheckIndex$VerifyPointsVisitor__fields_[] = {
          DECLARE_GET_FIELD(t_CheckIndex$VerifyPointsVisitor, docCountSeen),
          DECLARE_GET_FIELD(t_CheckIndex$VerifyPointsVisitor, pointCountSeen),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_CheckIndex$VerifyPointsVisitor__methods_[] = {
          DECLARE_METHOD(t_CheckIndex$VerifyPointsVisitor, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_CheckIndex$VerifyPointsVisitor, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_CheckIndex$VerifyPointsVisitor, compare, METH_VARARGS),
          DECLARE_METHOD(t_CheckIndex$VerifyPointsVisitor, getDocCountSeen, METH_NOARGS),
          DECLARE_METHOD(t_CheckIndex$VerifyPointsVisitor, getPointCountSeen, METH_NOARGS),
          DECLARE_METHOD(t_CheckIndex$VerifyPointsVisitor, visit, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        static PyType_Slot PY_TYPE_SLOTS(CheckIndex$VerifyPointsVisitor)[] = {
          { Py_tp_methods, t_CheckIndex$VerifyPointsVisitor__methods_ },
          { Py_tp_init, (void *) t_CheckIndex$VerifyPointsVisitor_init_ },
          { Py_tp_getset, t_CheckIndex$VerifyPointsVisitor__fields_ },
          { 0, NULL }
        };

        static PyType_Def *PY_TYPE_BASES(CheckIndex$VerifyPointsVisitor)[] = {
          &PY_TYPE_DEF(::java::lang::Object),
          NULL
        };

        DEFINE_TYPE(CheckIndex$VerifyPointsVisitor, t_CheckIndex$VerifyPointsVisitor, CheckIndex$VerifyPointsVisitor);

        void t_CheckIndex$VerifyPointsVisitor::install(PyObject *module)
        {
          installType(&PY_TYPE(CheckIndex$VerifyPointsVisitor), &PY_TYPE_DEF(CheckIndex$VerifyPointsVisitor), module, "CheckIndex$VerifyPointsVisitor", 0);
        }

        void t_CheckIndex$VerifyPointsVisitor::initialize(PyObject *module)
        {
          PyObject_SetAttrString((PyObject *) PY_TYPE(CheckIndex$VerifyPointsVisitor), "class_", make_descriptor(CheckIndex$VerifyPointsVisitor::initializeClass, 1));
          PyObject_SetAttrString((PyObject *) PY_TYPE(CheckIndex$VerifyPointsVisitor), "wrapfn_", make_descriptor(t_CheckIndex$VerifyPointsVisitor::wrap_jobject));
          PyObject_SetAttrString((PyObject *) PY_TYPE(CheckIndex$VerifyPointsVisitor), "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_CheckIndex$VerifyPointsVisitor_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, CheckIndex$VerifyPointsVisitor::initializeClass, 1)))
            return NULL;
          return t_CheckIndex$VerifyPointsVisitor::wrap_Object(CheckIndex$VerifyPointsVisitor(((t_CheckIndex$VerifyPointsVisitor *) arg)->object.this$));
        }
        static PyObject *t_CheckIndex$VerifyPointsVisitor_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, CheckIndex$VerifyPointsVisitor::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_CheckIndex$VerifyPointsVisitor_init_(t_CheckIndex$VerifyPointsVisitor *self, PyObject *args, PyObject *kwds)
        {
          ::java::lang::String a0((jobject) NULL);
          jint a1;
          ::org::apache::lucene::index::PointValues a2((jobject) NULL);
          CheckIndex$VerifyPointsVisitor object((jobject) NULL);

          if (!parseArgs(args, "sIk", ::org::apache::lucene::index::PointValues::initializeClass, &a0, &a1, &a2))
          {
            INT_CALL(object = CheckIndex$VerifyPointsVisitor(a0, a1, a2));
            self->object = object;
          }
          else
          {
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }

        static PyObject *t_CheckIndex$VerifyPointsVisitor_compare(t_CheckIndex$VerifyPointsVisitor *self, PyObject *args)
        {
          JArray< jbyte > a0((jobject) NULL);
          JArray< jbyte > a1((jobject) NULL);
          ::org::apache::lucene::index::PointValues$Relation result((jobject) NULL);

          if (!parseArgs(args, "[B[B", &a0, &a1))
          {
            OBJ_CALL(result = self->object.compare(a0, a1));
            return ::org::apache::lucene::index::t_PointValues$Relation::wrap_Object(result);
          }

          PyErr_SetArgsError((PyObject *) self, "compare", args);
          return NULL;
        }

        static PyObject *t_CheckIndex$VerifyPointsVisitor_getDocCountSeen(t_CheckIndex$VerifyPointsVisitor *self)
        {
          jlong result;
          OBJ_CALL(result = self->object.getDocCountSeen());
          return PyLong_FromLongLong((PY_LONG_LONG) result);
        }

        static PyObject *t_CheckIndex$VerifyPointsVisitor_getPointCountSeen(t_CheckIndex$VerifyPointsVisitor *self)
        {
          jlong result;
          OBJ_CALL(result = self->object.getPointCountSeen());
          return PyLong_FromLongLong((PY_LONG_LONG) result);
        }

        static PyObject *t_CheckIndex$VerifyPointsVisitor_visit(t_CheckIndex$VerifyPointsVisitor *self, PyObject *args)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 1:
            {
              jint a0;

              if (!parseArgs(args, "I", &a0))
              {
                OBJ_CALL(self->object.visit(a0));
                Py_RETURN_NONE;
              }
            }
            break;
           case 2:
            {
              jint a0;
              JArray< jbyte > a1((jobject) NULL);

              if (!parseArgs(args, "I[B", &a0, &a1))
              {
                OBJ_CALL(self->object.visit(a0, a1));
                Py_RETURN_NONE;
              }
            }
          }

          PyErr_SetArgsError((PyObject *) self, "visit", args);
          return NULL;
        }

        static PyObject *t_CheckIndex$VerifyPointsVisitor_get__docCountSeen(t_CheckIndex$VerifyPointsVisitor *self, void *data)
        {
          jlong value;
          OBJ_CALL(value = self->object.getDocCountSeen());
          return PyLong_FromLongLong((PY_LONG_LONG) value);
        }

        static PyObject *t_CheckIndex$VerifyPointsVisitor_get__pointCountSeen(t_CheckIndex$VerifyPointsVisitor *self, void *data)
        {
          jlong value;
          OBJ_CALL(value = self->object.getPointCountSeen());
          return PyLong_FromLongLong((PY_LONG_LONG) value);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queryparser/flexible/standard/processors/AnalyzerQueryNodeProcessor.h"
#include "org/apache/lucene/queryparser/flexible/core/QueryNodeException.h"
#include "org/apache/lucene/queryparser/flexible/core/nodes/QueryNode.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace standard {
            namespace processors {

              ::java::lang::Class *AnalyzerQueryNodeProcessor::class$ = NULL;
              jmethodID *AnalyzerQueryNodeProcessor::mids$ = NULL;
              bool AnalyzerQueryNodeProcessor::live$ = false;

              jclass AnalyzerQueryNodeProcessor::initializeClass(bool getOnly)
              {
                if (getOnly)
                  return (jclass) (live$ ? class$->this$ : NULL);
                if (class$ == NULL)
                {
                  jclass cls = (jclass) env->findClass("org/apache/lucene/queryparser/flexible/standard/processors/AnalyzerQueryNodeProcessor");

                  mids$ = new jmethodID[max_mid];
                  mids$[mid_init$_f2cc1bce94666404] = env->getMethodID(cls, "<init>", "()V");
                  mids$[mid_process_9b07be8595532de7] = env->getMethodID(cls, "process", "(Lorg/apache/lucene/queryparser/flexible/core/nodes/QueryNode;)Lorg/apache/lucene/queryparser/flexible/core/nodes/QueryNode;");
                  mids$[mid_preProcessNode_9b07be8595532de7] = env->getMethodID(cls, "preProcessNode", "(Lorg/apache/lucene/queryparser/flexible/core/nodes/QueryNode;)Lorg/apache/lucene/queryparser/flexible/core/nodes/QueryNode;");
                  mids$[mid_postProcessNode_9b07be8595532de7] = env->getMethodID(cls, "postProcessNode", "(Lorg/apache/lucene/queryparser/flexible/core/nodes/QueryNode;)Lorg/apache/lucene/queryparser/flexible/core/nodes/QueryNode;");
                  mids$[mid_setChildrenOrder_e420eeaadf0bcd20] = env->getMethodID(cls, "setChildrenOrder", "(Ljava/util/List;)Ljava/util/List;");

                  class$ = new ::java::lang::Class(cls);
                  live$ = true;
                }
                return (jclass) class$->this$;
              }

              AnalyzerQueryNodeProcessor::AnalyzerQueryNodeProcessor() : ::org::apache::lucene::queryparser::flexible::core::processors::QueryNodeProcessorImpl(env->newObject(initializeClass, &mids$, mid_init$_f2cc1bce94666404)) {}

              ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode AnalyzerQueryNodeProcessor::process(const ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode & a0) const
              {
                return ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode(env->callObjectMethod(this$, mids$[mid_process_9b07be8595532de7], a0.this$));
              }
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace standard {
            namespace processors {
              static PyObject *t_AnalyzerQueryNodeProcessor_cast_(PyTypeObject *type, PyObject *arg);
              static PyObject *t_AnalyzerQueryNodeProcessor_instance_(PyTypeObject *type, PyObject *arg);
              static int t_AnalyzerQueryNodeProcessor_init_(t_AnalyzerQueryNodeProcessor *self, PyObject *args, PyObject *kwds);
              static PyObject *t_AnalyzerQueryNodeProcessor_process(t_AnalyzerQueryNodeProcessor *self, PyObject *args);

              static PyMethodDef t_AnalyzerQueryNodeProcessor__methods_[] = {
                DECLARE_METHOD(t_AnalyzerQueryNodeProcessor, cast_, METH_O | METH_CLASS),
                DECLARE_METHOD(t_AnalyzerQueryNodeProcessor, instance_, METH_O | METH_CLASS),
                DECLARE_METHOD(t_AnalyzerQueryNodeProcessor, process, METH_VARARGS),
                { NULL, NULL, 0, NULL }
              };

              static PyType_Slot PY_TYPE_SLOTS(AnalyzerQueryNodeProcessor)[] = {
                { Py_tp_methods, t_AnalyzerQueryNodeProcessor__methods_ },
                { Py_tp_init, (void *) t_AnalyzerQueryNodeProcessor_init_ },
                { 0, NULL }
              };

              static PyType_Def *PY_TYPE_BASES(AnalyzerQueryNodeProcessor)[] = {
                &PY_TYPE_DEF(::org::apache::lucene::queryparser::flexible::core::processors::QueryNodeProcessorImpl),
                NULL
              };

              DEFINE_TYPE(AnalyzerQueryNodeProcessor, t_AnalyzerQueryNodeProcessor, AnalyzerQueryNodeProcessor);

              void t_AnalyzerQueryNodeProcessor::install(PyObject *module)
              {
                installType(&PY_TYPE(AnalyzerQueryNodeProcessor), &PY_TYPE_DEF(AnalyzerQueryNodeProcessor), module, "AnalyzerQueryNodeProcessor", 0);
              }

              void t_AnalyzerQueryNodeProcessor::initialize(PyObject *module)
              {
                PyObject_SetAttrString((PyObject *) PY_TYPE(AnalyzerQueryNodeProcessor), "class_", make_descriptor(AnalyzerQueryNodeProcessor::initializeClass, 1));
                PyObject_SetAttrString((PyObject *) PY_TYPE(AnalyzerQueryNodeProcessor), "wrapfn_", make_descriptor(t_AnalyzerQueryNodeProcessor::wrap_jobject));
                PyObject_SetAttrString((PyObject *) PY_TYPE(AnalyzerQueryNodeProcessor), "boxfn_", make_descriptor(boxObject));
              }

              static PyObject *t_AnalyzerQueryNodeProcessor_cast_(PyTypeObject *type, PyObject *arg)
              {
                if (!(arg = castCheck(arg, AnalyzerQueryNodeProcessor::initializeClass, 1)))
                  return NULL;
                return t_AnalyzerQueryNodeProcessor::wrap_Object(AnalyzerQueryNodeProcessor(((t_AnalyzerQueryNodeProcessor *) arg)->object.this$));
              }
              static PyObject *t_AnalyzerQueryNodeProcessor_instance_(PyTypeObject *type, PyObject *arg)
              {
                if (!castCheck(arg, AnalyzerQueryNodeProcessor::initializeClass, 0))
                  Py_RETURN_FALSE;
                Py_RETURN_TRUE;
              }

              static int t_AnalyzerQueryNodeProcessor_init_(t_AnalyzerQueryNodeProcessor *self, PyObject *args, PyObject *kwds)
              {
                AnalyzerQueryNodeProcessor object((jobject) NULL);

                INT_CALL(object = AnalyzerQueryNodeProcessor());
                self->object = object;

                return 0;
              }

              static PyObject *t_AnalyzerQueryNodeProcessor_process(t_AnalyzerQueryNodeProcessor *self, PyObject *args)
              {
                ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode a0((jobject) NULL);
                ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode result((jobject) NULL);

                if (!parseArgs(args, "k", ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode::initializeClass, &a0))
                {
                  OBJ_CALL(result = self->object.process(a0));
                  return ::org::apache::lucene::queryparser::flexible::core::nodes::t_QueryNode::wrap_Object(result);
                }

                return callSuper(PY_TYPE(AnalyzerQueryNodeProcessor), (PyObject *) self, "process", args, 2);
              }
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/facet/range/RangeFacetCounts.h"
#include "org/apache/lucene/facet/FacetResult.h"
#include "java/lang/Number.h"
#include "java/lang/Class.h"
#include "java/lang/String.h"
#include "java/io/IOException.h"
#include "java/util/List.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace facet {
        namespace range {

          ::java::lang::Class *RangeFacetCounts::class$ = NULL;
          jmethodID *RangeFacetCounts::mids$ = NULL;
          bool RangeFacetCounts::live$ = false;

          jclass RangeFacetCounts::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/facet/range/RangeFacetCounts");

              mids$ = new jmethodID[max_mid];
              mids$[mid_getAllDims_d82aee015ceb4d93] = env->getMethodID(cls, "getAllDims", "(I)Ljava/util/List;");
              mids$[mid_getSpecificValue_aaf99af6028dc803] = env->getMethodID(cls, "getSpecificValue", "(Ljava/lang/String;[Ljava/lang/String;)Ljava/lang/Number;");
              mids$[mid_getTopChildren_8be156db8a3c742c] = env->getMethodID(cls, "getTopChildren", "(ILjava/lang/String;[Ljava/lang/String;)Lorg/apache/lucene/facet/FacetResult;");
              mids$[mid_toString_db9b55ba01e03e4b] = env->getMethodID(cls, "toString", "()Ljava/lang/String;");

              class$ = new ::java::lang::Class(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          ::java::util::List RangeFacetCounts::getAllDims(jint a0) const
          {
            return ::java::util::List(env->callObjectMethod(this$, mids$[mid_getAllDims_d82aee015ceb4d93], a0));
          }

          ::java::lang::Number RangeFacetCounts::getSpecificValue(const ::java::lang::String & a0, const JArray< ::java::lang::String > & a1) const
          {
            return ::java::lang::Number(env->callObjectMethod(this$, mids$[mid_getSpecificValue_aaf99af6028dc803], a0.this$, a1.this$));
          }

          ::org::apache::lucene::facet::FacetResult RangeFacetCounts::getTopChildren(jint a0, const ::java::lang::String & a1, const JArray< ::java::lang::String > & a2) const
          {
            return ::org::apache::lucene::facet::FacetResult(env->callObjectMethod(this$, mids$[mid_getTopChildren_8be156db8a3c742c], a0, a1.this$, a2.this$));
          }

          ::java::lang::String RangeFacetCounts::toString() const
          {
            return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_db9b55ba01e03e4b]));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace facet {
        namespace range {
          static PyObject *t_RangeFacetCounts_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_RangeFacetCounts_instance_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_RangeFacetCounts_getAllDims(t_RangeFacetCounts *self, PyObject *args);
          static PyObject *t_RangeFacetCounts_getSpecificValue(t_RangeFacetCounts *self, PyObject *args);
          static PyObject *t_RangeFacetCounts_getTopChildren(t_RangeFacetCounts *self, PyObject *args);
          static PyObject *t_RangeFacetCounts_toString(t_RangeFacetCounts *self, PyObject *args);

          static PyMethodDef t_RangeFacetCounts__methods_[] = {
            DECLARE_METHOD(t_RangeFacetCounts, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_RangeFacetCounts, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_RangeFacetCounts, getAllDims, METH_VARARGS),
            DECLARE_METHOD(t_RangeFacetCounts, getSpecificValue, METH_VARARGS),
            DECLARE_METHOD(t_RangeFacetCounts, getTopChildren, METH_VARARGS),
            DECLARE_METHOD(t_RangeFacetCounts, toString, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          static PyType_Slot PY_TYPE_SLOTS(RangeFacetCounts)[] = {
            { Py_tp_methods, t_RangeFacetCounts__methods_ },
            { Py_tp_init, (void *) abstract_init },
            { 0, NULL }
          };

          static PyType_Def *PY_TYPE_BASES(RangeFacetCounts)[] = {
            &PY_TYPE_DEF(::org::apache::lucene::facet::Facets),
            NULL
          };

          DEFINE_TYPE(RangeFacetCounts, t_RangeFacetCounts, RangeFacetCounts);

          void t_RangeFacetCounts::install(PyObject *module)
          {
            installType(&PY_TYPE(RangeFacetCounts), &PY_TYPE_DEF(RangeFacetCounts), module, "RangeFacetCounts", 0);
          }

          void t_RangeFacetCounts::initialize(PyObject *module)
          {
            PyObject_SetAttrString((PyObject *) PY_TYPE(RangeFacetCounts), "class_", make_descriptor(RangeFacetCounts::initializeClass, 1));
            PyObject_SetAttrString((PyObject *) PY_TYPE(RangeFacetCounts), "wrapfn_", make_descriptor(t_RangeFacetCounts::wrap_jobject));
            PyObject_SetAttrString((PyObject *) PY_TYPE(RangeFacetCounts), "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_RangeFacetCounts_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, RangeFacetCounts::initializeClass, 1)))
              return NULL;
            return t_RangeFacetCounts::wrap_Object(RangeFacetCounts(((t_RangeFacetCounts *) arg)->object.this$));
          }
          static PyObject *t_RangeFacetCounts_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, RangeFacetCounts::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static PyObject *t_RangeFacetCounts_getAllDims(t_RangeFacetCounts *self, PyObject *args)
          {
            jint a0;
            ::java::util::List result((jobject) NULL);

            if (!parseArgs(args, "I", &a0))
            {
              OBJ_CALL(result = self->object.getAllDims(a0));
              return ::java::util::t_List::wrap_Object(result, ::org::apache::lucene::facet::PY_TYPE(FacetResult));
            }

            return callSuper(PY_TYPE(RangeFacetCounts), (PyObject *) self, "getAllDims", args, 2);
          }

          static PyObject *t_RangeFacetCounts_getSpecificValue(t_RangeFacetCounts *self, PyObject *args)
          {
            ::java::lang::String a0((jobject) NULL);
            JArray< ::java::lang::String > a1((jobject) NULL);
            ::java::lang::Number result((jobject) NULL);

            if (!parseArgs(args, "s[s", &a0, &a1))
            {
              OBJ_CALL(result = self->object.getSpecificValue(a0, a1));
              return ::java::lang::t_Number::wrap_Object(result);
            }

            return callSuper(PY_TYPE(RangeFacetCounts), (PyObject *) self, "getSpecificValue", args, 2);
          }

          static PyObject *t_RangeFacetCounts_getTopChildren(t_RangeFacetCounts *self, PyObject *args)
          {
            jint a0;
            ::java::lang::String a1((jobject) NULL);
            JArray< ::java::lang::String > a2((jobject) NULL);
            ::org::apache::lucene::facet::FacetResult result((jobject) NULL);

            if (!parseArgs(args, "Is[s", &a0, &a1, &a2))
            {
              OBJ_CALL(result = self->object.getTopChildren(a0, a1, a2));
              return ::org::apache::lucene::facet::t_FacetResult::wrap_Object(result);
            }

            return callSuper(PY_TYPE(RangeFacetCounts), (PyObject *) self, "getTopChildren", args, 2);
          }

          static PyObject *t_RangeFacetCounts_toString(t_RangeFacetCounts *self, PyObject *args)
          {
            ::java::lang::String result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.toString());
              return j2p(result);
            }

            return callSuper(PY_TYPE(RangeFacetCounts), (PyObject *) self, "toString", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/store/LockReleaseFailedException.h"
#include "java/lang/String.h"
#include "java/lang/Throwable.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace store {

        ::java::lang::Class *LockReleaseFailedException::class$ = NULL;
        jmethodID *LockReleaseFailedException::mids$ = NULL;
        bool LockReleaseFailedException::live$ = false;

        jclass LockReleaseFailedException::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/store/LockReleaseFailedException");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_9fd2eb66a64e6f0f] = env->getMethodID(cls, "<init>", "(Ljava/lang/String;)V");
            mids$[mid_init$_2e9d196dc293ffe6] = env->getMethodID(cls, "<init>", "(Ljava/lang/String;Ljava/lang/Throwable;)V");

            class$ = new ::java::lang::Class(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        LockReleaseFailedException::LockReleaseFailedException(const ::java::lang::String & a0) : ::java::io::IOException(env->newObject(initializeClass, &mids$, mid_init$_9fd2eb66a64e6f0f, a0.this$)) {}

        LockReleaseFailedException::LockReleaseFailedException(const ::java::lang::String & a0, const ::java::lang::Throwable & a1) : ::java::io::IOException(env->newObject(initializeClass, &mids$, mid_init$_2e9d196dc293ffe6, a0.this$, a1.this$)) {}
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace store {
        static PyObject *t_LockReleaseFailedException_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_LockReleaseFailedException_instance_(PyTypeObject *type, PyObject *arg);
        static int t_LockReleaseFailedException_init_(t_LockReleaseFailedException *self, PyObject *args, PyObject *kwds);

        static PyMethodDef t_LockReleaseFailedException__methods_[] = {
          DECLARE_METHOD(t_LockReleaseFailedException, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_LockReleaseFailedException, instance_, METH_O | METH_CLASS),
          { NULL, NULL, 0, NULL }
        };

        static PyType_Slot PY_TYPE_SLOTS(LockReleaseFailedException)[] = {
          { Py_tp_methods, t_LockReleaseFailedException__methods_ },
          { Py_tp_init, (void *) t_LockReleaseFailedException_init_ },
          { 0, NULL }
        };

        static PyType_Def *PY_TYPE_BASES(LockReleaseFailedException)[] = {
          &PY_TYPE_DEF(::java::io::IOException),
          NULL
        };

        DEFINE_TYPE(LockReleaseFailedException, t_LockReleaseFailedException, LockReleaseFailedException);

        void t_LockReleaseFailedException::install(PyObject *module)
        {
          installType(&PY_TYPE(LockReleaseFailedException), &PY_TYPE_DEF(LockReleaseFailedException), module, "LockReleaseFailedException", 0);
        }

        void t_LockReleaseFailedException::initialize(PyObject *module)
        {
          PyObject_SetAttrString((PyObject *) PY_TYPE(LockReleaseFailedException), "class_", make_descriptor(LockReleaseFailedException::initializeClass, 1));
          PyObject_SetAttrString((PyObject *) PY_TYPE(LockReleaseFailedException), "wrapfn_", make_descriptor(t_LockReleaseFailedException::wrap_jobject));
          PyObject_SetAttrString((PyObject *) PY_TYPE(LockReleaseFailedException), "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_LockReleaseFailedException_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, LockReleaseFailedException::initializeClass, 1)))
            return NULL;
          return t_LockReleaseFailedException::wrap_Object(LockReleaseFailedException(((t_LockReleaseFailedException *) arg)->object.this$));
        }
        static PyObject *t_LockReleaseFailedException_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, LockReleaseFailedException::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_LockReleaseFailedException_init_(t_LockReleaseFailedException *self, PyObject *args, PyObject *kwds)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 1:
            {
              ::java::lang::String a0((jobject) NULL);
              LockReleaseFailedException object((jobject) NULL);

              if (!parseArgs(args, "s", &a0))
              {
                INT_CALL(object = LockReleaseFailedException(a0));
                self->object = object;
                break;
              }
            }
            goto err;
           case 2:
            {
              ::java::lang::String a0((jobject) NULL);
              ::java::lang::Throwable a1((jobject) NULL);
              LockReleaseFailedException object((jobject) NULL);

              if (!parseArgs(args, "sk", ::java::lang::Throwable::initializeClass, &a0, &a1))
              {
                INT_CALL(object = LockReleaseFailedException(a0, a1));
                self->object = object;
                break;
              }
            }
           default:
           err:
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queries/function/valuesource/FieldCacheSource.h"
#include "java/lang/Object.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queries {
        namespace function {
          namespace valuesource {

            ::java::lang::Class *FieldCacheSource::class$ = NULL;
            jmethodID *FieldCacheSource::mids$ = NULL;
            bool FieldCacheSource::live$ = false;

            jclass FieldCacheSource::initializeClass(bool getOnly)
            {
              if (getOnly)
                return (jclass) (live$ ? class$->this$ : NULL);
              if (class$ == NULL)
              {
                jclass cls = (jclass) env->findClass("org/apache/lucene/queries/function/valuesource/FieldCacheSource");

                mids$ = new jmethodID[max_mid];
                mids$[mid_init$_9fd2eb66a64e6f0f] = env->getMethodID(cls, "<init>", "(Ljava/lang/String;)V");
                mids$[mid_description_db9b55ba01e03e4b] = env->getMethodID(cls, "description", "()Ljava/lang/String;");
                mids$[mid_equals_8b72f2dcdde6fd1d] = env->getMethodID(cls, "equals", "(Ljava/lang/Object;)Z");
                mids$[mid_getField_db9b55ba01e03e4b] = env->getMethodID(cls, "getField", "()Ljava/lang/String;");
                mids$[mid_hashCode_9972fcc56b44e79d] = env->getMethodID(cls, "hashCode", "()I");

                class$ = new ::java::lang::Class(cls);
                live$ = true;
              }
              return (jclass) class$->this$;
            }

            FieldCacheSource::FieldCacheSource(const ::java::lang::String & a0) : ::org::apache::lucene::queries::function::ValueSource(env->newObject(initializeClass, &mids$, mid_init$_9fd2eb66a64e6f0f, a0.this$)) {}

            ::java::lang::String FieldCacheSource::description() const
            {
              return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_description_db9b55ba01e03e4b]));
            }

            jboolean FieldCacheSource::equals(const ::java::lang::Object & a0) const
            {
              return env->callBooleanMethod(this$, mids$[mid_equals_8b72f2dcdde6fd1d], a0.this$);
            }

            ::java::lang::String FieldCacheSource::getField() const
            {
              return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_getField_db9b55ba01e03e4b]));
            }

            jint FieldCacheSource::hashCode() const
            {
              return env->callIntMethod(this$, mids$[mid_hashCode_9972fcc56b44e79d]);
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queries {
        namespace function {
          namespace valuesource {
            static PyObject *t_FieldCacheSource_cast_(PyTypeObject *type, PyObject *arg);
            static PyObject *t_FieldCacheSource_instance_(PyTypeObject *type, PyObject *arg);
            static int t_FieldCacheSource_init_(t_FieldCacheSource *self, PyObject *args, PyObject *kwds);
            static PyObject *t_FieldCacheSource_description(t_FieldCacheSource *self, PyObject *args);
            static PyObject *t_FieldCacheSource_equals(t_FieldCacheSource *self, PyObject *args);
            static PyObject *t_FieldCacheSource_getField(t_FieldCacheSource *self);
            static PyObject *t_FieldCacheSource_hashCode(t_FieldCacheSource *self, PyObject *args);
            static PyObject *t_FieldCacheSource_get__field(t_FieldCacheSource *self, void *data);
            static PyGetSetDef t_FieldCacheSource__fields_[] = {
              DECLARE_GET_FIELD(t_FieldCacheSource, field),
              { NULL, NULL, NULL, NULL, NULL }
            };

            static PyMethodDef t_FieldCacheSource__methods_[] = {
              DECLARE_METHOD(t_FieldCacheSource, cast_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_FieldCacheSource, instance_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_FieldCacheSource, description, METH_VARARGS),
              DECLARE_METHOD(t_FieldCacheSource, equals, METH_VARARGS),
              DECLARE_METHOD(t_FieldCacheSource, getField, METH_NOARGS),
              DECLARE_METHOD(t_FieldCacheSource, hashCode, METH_VARARGS),
              { NULL, NULL, 0, NULL }
            };

            static PyType_Slot PY_TYPE_SLOTS(FieldCacheSource)[] = {
              { Py_tp_methods, t_FieldCacheSource__methods_ },
              { Py_tp_init, (void *) t_FieldCacheSource_init_ },
              { Py_tp_getset, t_FieldCacheSource__fields_ },
              { 0, NULL }
            };

            static PyType_Def *PY_TYPE_BASES(FieldCacheSource)[] = {
              &PY_TYPE_DEF(::org::apache::lucene::queries::function::ValueSource),
              NULL
            };

            DEFINE_TYPE(FieldCacheSource, t_FieldCacheSource, FieldCacheSource);

            void t_FieldCacheSource::install(PyObject *module)
            {
              installType(&PY_TYPE(FieldCacheSource), &PY_TYPE_DEF(FieldCacheSource), module, "FieldCacheSource", 0);
            }

            void t_FieldCacheSource::initialize(PyObject *module)
            {
              PyObject_SetAttrString((PyObject *) PY_TYPE(FieldCacheSource), "class_", make_descriptor(FieldCacheSource::initializeClass, 1));
              PyObject_SetAttrString((PyObject *) PY_TYPE(FieldCacheSource), "wrapfn_", make_descriptor(t_FieldCacheSource::wrap_jobject));
              PyObject_SetAttrString((PyObject *) PY_TYPE(FieldCacheSource), "boxfn_", make_descriptor(boxObject));
            }

            static PyObject *t_FieldCacheSource_cast_(PyTypeObject *type, PyObject *arg)
            {
              if (!(arg = castCheck(arg, FieldCacheSource::initializeClass, 1)))
                return NULL;
              return t_FieldCacheSource::wrap_Object(FieldCacheSource(((t_FieldCacheSource *) arg)->object.this$));
            }
            static PyObject *t_FieldCacheSource_instance_(PyTypeObject *type, PyObject *arg)
            {
              if (!castCheck(arg, FieldCacheSource::initializeClass, 0))
                Py_RETURN_FALSE;
              Py_RETURN_TRUE;
            }

            static int t_FieldCacheSource_init_(t_FieldCacheSource *self, PyObject *args, PyObject *kwds)
            {
              ::java::lang::String a0((jobject) NULL);
              FieldCacheSource object((jobject) NULL);

              if (!parseArgs(args, "s", &a0))
              {
                INT_CALL(object = FieldCacheSource(a0));
                self->object = object;
              }
              else
              {
                PyErr_SetArgsError((PyObject *) self, "__init__", args);
                return -1;
              }

              return 0;
            }

            static PyObject *t_FieldCacheSource_description(t_FieldCacheSource *self, PyObject *args)
            {
              ::java::lang::String result((jobject) NULL);

              if (!parseArgs(args, ""))
              {
                OBJ_CALL(result = self->object.description());
                return j2p(result);
              }

              return callSuper(PY_TYPE(FieldCacheSource), (PyObject *) self, "description", args, 2);
            }

            static PyObject *t_FieldCacheSource_equals(t_FieldCacheSource *self, PyObject *args)
            {
              ::java::lang::Object a0((jobject) NULL);
              jboolean result;

              if (!parseArgs(args, "o", &a0))
              {
                OBJ_CALL(result = self->object.equals(a0));
                Py_RETURN_BOOL(result);
              }

              return callSuper(PY_TYPE(FieldCacheSource), (PyObject *) self, "equals", args, 2);
            }

            static PyObject *t_FieldCacheSource_getField(t_FieldCacheSource *self)
            {
              ::java::lang::String result((jobject) NULL);
              OBJ_CALL(result = self->object.getField());
              return j2p(result);
            }

            static PyObject *t_FieldCacheSource_hashCode(t_FieldCacheSource *self, PyObject *args)
            {
              jint result;

              if (!parseArgs(args, ""))
              {
                OBJ_CALL(result = self->object.hashCode());
                return PyLong_FromLong((long) result);
              }

              return callSuper(PY_TYPE(FieldCacheSource), (PyObject *) self, "hashCode", args, 2);
            }

            static PyObject *t_FieldCacheSource_get__field(t_FieldCacheSource *self, void *data)
            {
              ::java::lang::String value((jobject) NULL);
              OBJ_CALL(value = self->object.getField());
              return j2p(value);
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "java/text/DateFormat.h"
#include "java/lang/Class.h"
#include "java/util/Date.h"
#include "java/lang/Object.h"
#include "java/util/Locale.h"
#include "java/lang/String.h"
#include "java/util/TimeZone.h"
#include "java/lang/StringBuffer.h"
#include "java/util/Calendar.h"
#include "java/text/NumberFormat.h"
#include "java/text/DateFormat.h"
#include "JArray.h"

namespace java {
  namespace text {

    ::java::lang::Class *DateFormat::class$ = NULL;
    jmethodID *DateFormat::mids$ = NULL;
    bool DateFormat::live$ = false;
    jint DateFormat::AM_PM_FIELD = (jint) 0;
    jint DateFormat::DATE_FIELD = (jint) 0;
    jint DateFormat::DAY_OF_WEEK_FIELD = (jint) 0;
    jint DateFormat::DAY_OF_WEEK_IN_MONTH_FIELD = (jint) 0;
    jint DateFormat::DAY_OF_YEAR_FIELD = (jint) 0;
    jint DateFormat::DEFAULT = (jint) 0;
    jint DateFormat::ERA_FIELD = (jint) 0;
    jint DateFormat::FULL = (jint) 0;
    jint DateFormat::HOUR0_FIELD = (jint) 0;
    jint DateFormat::HOUR1_FIELD = (jint) 0;
    jint DateFormat::HOUR_OF_DAY0_FIELD = (jint) 0;
    jint DateFormat::HOUR_OF_DAY1_FIELD = (jint) 0;
    jint DateFormat::LONG = (jint) 0;
    jint DateFormat::MEDIUM = (jint) 0;
    jint DateFormat::MILLISECOND_FIELD = (jint) 0;
    jint DateFormat::MINUTE_FIELD = (jint) 0;
    jint DateFormat::MONTH_FIELD = (jint) 0;
    jint DateFormat::SECOND_FIELD = (jint) 0;
    jint DateFormat::SHORT = (jint) 0;
    jint DateFormat::TIMEZONE_FIELD = (jint) 0;
    jint DateFormat::WEEK_OF_MONTH_FIELD = (jint) 0;
    jint DateFormat::WEEK_OF_YEAR_FIELD = (jint) 0;
    jint DateFormat::YEAR_FIELD = (jint) 0;

    jclass DateFormat::initializeClass(bool getOnly)
    {
      if (getOnly)
        return (jclass) (live$ ? class$->this$ : NULL);
      if (class$ == NULL)
      {
        jclass cls = (jclass) env->findClass("java/text/DateFormat");

        mids$ = new jmethodID[max_mid];
        mids$[mid_clone_d6bcd06f3102c4d9] = env->getMethodID(cls, "clone", "()Ljava/lang/Object;");
        mids$[mid_equals_8b72f2dcdde6fd1d] = env->getMethodID(cls, "equals", "(Ljava/lang/Object;)Z");
        mids$[mid_format_019cce38164faab9] = env->getMethodID(cls, "format", "(Ljava/util/Date;)Ljava/lang/String;");
        mids$[mid_getAvailableLocales_9de0c9f607235a40] = env->getStaticMethodID(cls, "getAvailableLocales", "()[Ljava/util/Locale;");
        mids$[mid_getCalendar_5d2bf8ea8296abce] = env->getMethodID(cls, "getCalendar", "()Ljava/util/Calendar;");
        mids$[mid_getDateInstance_4224c39e32504ea8] = env->getStaticMethodID(cls, "getDateInstance", "()Ljava/text/DateFormat;");
        mids$[mid_getDateInstance_7c4a02a3edd004ae] = env->getStaticMethodID(cls, "getDateInstance", "(I)Ljava/text/DateFormat;");
        mids$[mid_getDateInstance_7b16cf096b1ba9cd] = env->getStaticMethodID(cls, "getDateInstance", "(ILjava/util/Locale;)Ljava/text/DateFormat;");
        mids$[mid_getDateTimeInstance_4224c39e32504ea8] = env->getStaticMethodID(cls, "getDateTimeInstance", "()Ljava/text/DateFormat;");
        mids$[mid_getDateTimeInstance_8b5fbf7d3a03c7e6] = env->getStaticMethodID(cls, "getDateTimeInstance", "(II)Ljava/text/DateFormat;");
        mids$[mid_getDateTimeInstance_e8bcdac412674d38] = env->getStaticMethodID(cls, "getDateTimeInstance", "(IILjava/util/Locale;)Ljava/text/DateFormat;");
        mids$[mid_getInstance_4224c39e32504ea8] = env->getStaticMethodID(cls, "getInstance", "()Ljava/text/DateFormat;");
        mids$[mid_getNumberFormat_a56386c4cfd9cbe9] = env->getMethodID(cls, "getNumberFormat", "()Ljava/text/NumberFormat;");
        mids$[mid_getTimeInstance_4224c39e32504ea8] = env->getStaticMethodID(cls, "getTimeInstance", "()Ljava/text/DateFormat;");
        mids$[mid_getTimeInstance_7c4a02a3edd004ae] = env->getStaticMethodID(cls, "getTimeInstance", "(I)Ljava/text/DateFormat;");
        mids$[mid_getTimeInstance_7b16cf096b1ba9cd] = env->getStaticMethodID(cls, "getTimeInstance", "(ILjava/util/Locale;)Ljava/text/DateFormat;");
        mids$[mid_getTimeZone_a00e8b2cc21b09d1] = env->getMethodID(cls, "getTimeZone", "()Ljava/util/TimeZone;");
        mids$[mid_hashCode_9972fcc56b44e79d] = env->getMethodID(cls, "hashCode", "()I");
        mids$[mid_isLenient_8454bd5aa23fd11e] = env->getMethodID(cls, "isLenient", "()Z");
        mids$[mid_parse_6748e872d0c49761] = env->getMethodID(cls, "parse", "(Ljava/lang/String;)Ljava/util/Date;");
        mids$[mid_setCalendar_0899a53f109bc21b] = env->getMethodID(cls, "setCalendar", "(Ljava/util/Calendar;)V");
        mids$[mid_setLenient_9d72768e8fdce2b7] = env->getMethodID(cls, "setLenient", "(Z)V");
        mids$[mid_setNumberFormat_cd4a218c853203a8] = env->getMethodID(cls, "setNumberFormat", "(Ljava/text/NumberFormat;)V");
        mids$[mid_setTimeZone_62cba443b119095c] = env->getMethodID(cls, "setTimeZone", "(Ljava/util/TimeZone;)V");

        class$ = new ::java::lang::Class(cls);
        cls = (jclass) class$->this$;

        AM_PM_FIELD = env->getStaticIntField(cls, "AM_PM_FIELD");
        DATE_FIELD = env->getStaticIntField(cls, "DATE_FIELD");
        DAY_OF_WEEK_FIELD = env->getStaticIntField(cls, "DAY_OF_WEEK_FIELD");
        DAY_OF_WEEK_IN_MONTH_FIELD = env->getStaticIntField(cls, "DAY_OF_WEEK_IN_MONTH_FIELD");
        DAY_OF_YEAR_FIELD = env->getStaticIntField(cls, "DAY_OF_YEAR_FIELD");
        DEFAULT = env->getStaticIntField(cls, "DEFAULT");
        ERA_FIELD = env->getStaticIntField(cls, "ERA_FIELD");
        FULL = env->getStaticIntField(cls, "FULL");
        HOUR0_FIELD = env->getStaticIntField(cls, "HOUR0_FIELD");
        HOUR1_FIELD = env->getStaticIntField(cls, "HOUR1_FIELD");
        HOUR_OF_DAY0_FIELD = env->getStaticIntField(cls, "HOUR_OF_DAY0_FIELD");
        HOUR_OF_DAY1_FIELD = env->getStaticIntField(cls, "HOUR_OF_DAY1_FIELD");
        LONG = env->getStaticIntField(cls, "LONG");
        MEDIUM = env->getStaticIntField(cls, "MEDIUM");
        MILLISECOND_FIELD = env->getStaticIntField(cls, "MILLISECOND_FIELD");
        MINUTE_FIELD = env->getStaticIntField(cls, "MINUTE_FIELD");
        MONTH_FIELD = env->getStaticIntField(cls, "MONTH_FIELD");
        SECOND_FIELD = env->getStaticIntField(cls, "SECOND_FIELD");
        SHORT = env->getStaticIntField(cls, "SHORT");
        TIMEZONE_FIELD = env->getStaticIntField(cls, "TIMEZONE_FIELD");
        WEEK_OF_MONTH_FIELD = env->getStaticIntField(cls, "WEEK_OF_MONTH_FIELD");
        WEEK_OF_YEAR_FIELD = env->getStaticIntField(cls, "WEEK_OF_YEAR_FIELD");
        YEAR_FIELD = env->getStaticIntField(cls, "YEAR_FIELD");
        live$ = true;
      }
      return (jclass) class$->this$;
    }

    ::java::lang::Object DateFormat::clone() const
    {
      return ::java::lang::Object(env->callObjectMethod(this$, mids$[mid_clone_d6bcd06f3102c4d9]));
    }

    jboolean DateFormat::equals(const ::java::lang::Object & a0) const
    {
      return env->callBooleanMethod(this$, mids$[mid_equals_8b72f2dcdde6fd1d], a0.this$);
    }

    ::java::lang::String DateFormat::format(const ::java::util::Date & a0) const
    {
      return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_format_019cce38164faab9], a0.this$));
    }

    JArray< ::java::util::Locale > DateFormat::getAvailableLocales()
    {
      jclass cls = env->getClass(initializeClass);
      return JArray< ::java::util::Locale >(env->callStaticObjectMethod(cls, mids$[mid_getAvailableLocales_9de0c9f607235a40]));
    }

    ::java::util::Calendar DateFormat::getCalendar() const
    {
      return ::java::util::Calendar(env->callObjectMethod(this$, mids$[mid_getCalendar_5d2bf8ea8296abce]));
    }

    DateFormat DateFormat::getDateInstance()
    {
      jclass cls = env->getClass(initializeClass);
      return DateFormat(env->callStaticObjectMethod(cls, mids$[mid_getDateInstance_4224c39e32504ea8]));
    }

    DateFormat DateFormat::getDateInstance(jint a0)
    {
      jclass cls = env->getClass(initializeClass);
      return DateFormat(env->callStaticObjectMethod(cls, mids$[mid_getDateInstance_7c4a02a3edd004ae], a0));
    }

    DateFormat DateFormat::getDateInstance(jint a0, const ::java::util::Locale & a1)
    {
      jclass cls = env->getClass(initializeClass);
      return DateFormat(env->callStaticObjectMethod(cls, mids$[mid_getDateInstance_7b16cf096b1ba9cd], a0, a1.this$));
    }

    DateFormat DateFormat::getDateTimeInstance()
    {
      jclass cls = env->getClass(initializeClass);
      return DateFormat(env->callStaticObjectMethod(cls, mids$[mid_getDateTimeInstance_4224c39e32504ea8]));
    }

    DateFormat DateFormat::getDateTimeInstance(jint a0, jint a1)
    {
      jclass cls = env->getClass(initializeClass);
      return DateFormat(env->callStaticObjectMethod(cls, mids$[mid_getDateTimeInstance_8b5fbf7d3a03c7e6], a0, a1));
    }

    DateFormat DateFormat::getDateTimeInstance(jint a0, jint a1, const ::java::util::Locale & a2)
    {
      jclass cls = env->getClass(initializeClass);
      return DateFormat(env->callStaticObjectMethod(cls, mids$[mid_getDateTimeInstance_e8bcdac412674d38], a0, a1, a2.this$));
    }

    DateFormat DateFormat::getInstance()
    {
      jclass cls = env->getClass(initializeClass);
      return DateFormat(env->callStaticObjectMethod(cls, mids$[mid_getInstance_4224c39e32504ea8]));
    }

    ::java::text::NumberFormat DateFormat::getNumberFormat() const
    {
      return ::java::text::NumberFormat(env->callObjectMethod(this$, mids$[mid_getNumberFormat_a56386c4cfd9cbe9]));
    }

    DateFormat DateFormat::getTimeInstance()
    {
      jclass cls = env->getClass(initializeClass);
      return DateFormat(env->callStaticObjectMethod(cls, mids$[mid_getTimeInstance_4224c39e32504ea8]));
    }

    DateFormat DateFormat::getTimeInstance(jint a0)
    {
      jclass cls = env->getClass(initializeClass);
      return DateFormat(env->callStaticObjectMethod(cls, mids$[mid_getTimeInstance_7c4a02a3edd004ae], a0));
    }

    DateFormat DateFormat::getTimeInstance(jint a0, const ::java::util::Locale & a1)
    {
      jclass cls = env->getClass(initializeClass);
      return DateFormat(env->callStaticObjectMethod(cls, mids$[mid_getTimeInstance_7b16cf096b1ba9cd], a0, a1.this$));
    }

    ::java::util::TimeZone DateFormat::getTimeZone() const
    {
      return ::java::util::TimeZone(env->callObjectMethod(this$, mids$[mid_getTimeZone_a00e8b2cc21b09d1]));
    }

    jint DateFormat::hashCode() const
    {
      return env->callIntMethod(this$, mids$[mid_hashCode_9972fcc56b44e79d]);
    }

    jboolean DateFormat::isLenient() const
    {
      return env->callBooleanMethod(this$, mids$[mid_isLenient_8454bd5aa23fd11e]);
    }

    ::java::util::Date DateFormat::parse(const ::java::lang::String & a0) const
    {
      return ::java::util::Date(env->callObjectMethod(this$, mids$[mid_parse_6748e872d0c49761], a0.this$));
    }

    void DateFormat::setCalendar(const ::java::util::Calendar & a0) const
    {
      env->callVoidMethod(this$, mids$[mid_setCalendar_0899a53f109bc21b], a0.this$);
    }

    void DateFormat::setLenient(jboolean a0) const
    {
      env->callVoidMethod(this$, mids$[mid_setLenient_9d72768e8fdce2b7], a0);
    }

    void DateFormat::setNumberFormat(const ::java::text::NumberFormat & a0) const
    {
      env->callVoidMethod(this$, mids$[mid_setNumberFormat_cd4a218c853203a8], a0.this$);
    }

    void DateFormat::setTimeZone(const ::java::util::TimeZone & a0) const
    {
      env->callVoidMethod(this$, mids$[mid_setTimeZone_62cba443b119095c], a0.this$);
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace java {
  namespace text {
    static PyObject *t_DateFormat_cast_(PyTypeObject *type, PyObject *arg);
    static PyObject *t_DateFormat_instance_(PyTypeObject *type, PyObject *arg);
    static PyObject *t_DateFormat_clone(t_DateFormat *self, PyObject *args);
    static PyObject *t_DateFormat_equals(t_DateFormat *self, PyObject *args);
    static PyObject *t_DateFormat_format(t_DateFormat *self, PyObject *args);
    static PyObject *t_DateFormat_getAvailableLocales(PyTypeObject *type);
    static PyObject *t_DateFormat_getCalendar(t_DateFormat *self);
    static PyObject *t_DateFormat_getDateInstance(PyTypeObject *type, PyObject *args);
    static PyObject *t_DateFormat_getDateTimeInstance(PyTypeObject *type, PyObject *args);
    static PyObject *t_DateFormat_getInstance(PyTypeObject *type);
    static PyObject *t_DateFormat_getNumberFormat(t_DateFormat *self);
    static PyObject *t_DateFormat_getTimeInstance(PyTypeObject *type, PyObject *args);
    static PyObject *t_DateFormat_getTimeZone(t_DateFormat *self);
    static PyObject *t_DateFormat_hashCode(t_DateFormat *self, PyObject *args);
    static PyObject *t_DateFormat_isLenient(t_DateFormat *self);
    static PyObject *t_DateFormat_parse(t_DateFormat *self, PyObject *arg);
    static PyObject *t_DateFormat_setCalendar(t_DateFormat *self, PyObject *arg);
    static PyObject *t_DateFormat_setLenient(t_DateFormat *self, PyObject *arg);
    static PyObject *t_DateFormat_setNumberFormat(t_DateFormat *self, PyObject *arg);
    static PyObject *t_DateFormat_setTimeZone(t_DateFormat *self, PyObject *arg);
    static PyObject *t_DateFormat_get__availableLocales(t_DateFormat *self, void *data);
    static PyObject *t_DateFormat_get__calendar(t_DateFormat *self, void *data);
    static int t_DateFormat_set__calendar(t_DateFormat *self, PyObject *arg, void *data);
    static PyObject *t_DateFormat_get__dateInstance(t_DateFormat *self, void *data);
    static PyObject *t_DateFormat_get__dateTimeInstance(t_DateFormat *self, void *data);
    static PyObject *t_DateFormat_get__instance(t_DateFormat *self, void *data);
    static PyObject *t_DateFormat_get__lenient(t_DateFormat *self, void *data);
    static int t_DateFormat_set__lenient(t_DateFormat *self, PyObject *arg, void *data);
    static PyObject *t_DateFormat_get__numberFormat(t_DateFormat *self, void *data);
    static int t_DateFormat_set__numberFormat(t_DateFormat *self, PyObject *arg, void *data);
    static PyObject *t_DateFormat_get__timeInstance(t_DateFormat *self, void *data);
    static PyObject *t_DateFormat_get__timeZone(t_DateFormat *self, void *data);
    static int t_DateFormat_set__timeZone(t_DateFormat *self, PyObject *arg, void *data);
    static PyGetSetDef t_DateFormat__fields_[] = {
      DECLARE_GET_FIELD(t_DateFormat, availableLocales),
      DECLARE_GETSET_FIELD(t_DateFormat, calendar),
      DECLARE_GET_FIELD(t_DateFormat, dateInstance),
      DECLARE_GET_FIELD(t_DateFormat, dateTimeInstance),
      DECLARE_GET_FIELD(t_DateFormat, instance),
      DECLARE_GETSET_FIELD(t_DateFormat, lenient),
      DECLARE_GETSET_FIELD(t_DateFormat, numberFormat),
      DECLARE_GET_FIELD(t_DateFormat, timeInstance),
      DECLARE_GETSET_FIELD(t_DateFormat, timeZone),
      { NULL, NULL, NULL, NULL, NULL }
    };

    static PyMethodDef t_DateFormat__methods_[] = {
      DECLARE_METHOD(t_DateFormat, cast_, METH_O | METH_CLASS),
      DECLARE_METHOD(t_DateFormat, instance_, METH_O | METH_CLASS),
      DECLARE_METHOD(t_DateFormat, clone, METH_VARARGS),
      DECLARE_METHOD(t_DateFormat, equals, METH_VARARGS),
      DECLARE_METHOD(t_DateFormat, format, METH_VARARGS),
      DECLARE_METHOD(t_DateFormat, getAvailableLocales, METH_NOARGS | METH_CLASS),
      DECLARE_METHOD(t_DateFormat, getCalendar, METH_NOARGS),
      DECLARE_METHOD(t_DateFormat, getDateInstance, METH_VARARGS | METH_CLASS),
      DECLARE_METHOD(t_DateFormat, getDateTimeInstance, METH_VARARGS | METH_CLASS),
      DECLARE_METHOD(t_DateFormat, getInstance, METH_NOARGS | METH_CLASS),
      DECLARE_METHOD(t_DateFormat, getNumberFormat, METH_NOARGS),
      DECLARE_METHOD(t_DateFormat, getTimeInstance, METH_VARARGS | METH_CLASS),
      DECLARE_METHOD(t_DateFormat, getTimeZone, METH_NOARGS),
      DECLARE_METHOD(t_DateFormat, hashCode, METH_VARARGS),
      DECLARE_METHOD(t_DateFormat, isLenient, METH_NOARGS),
      DECLARE_METHOD(t_DateFormat, parse, METH_O),
      DECLARE_METHOD(t_DateFormat, setCalendar, METH_O),
      DECLARE_METHOD(t_DateFormat, setLenient, METH_O),
      DECLARE_METHOD(t_DateFormat, setNumberFormat, METH_O),
      DECLARE_METHOD(t_DateFormat, setTimeZone, METH_O),
      { NULL, NULL, 0, NULL }
    };

    static PyType_Slot PY_TYPE_SLOTS(DateFormat)[] = {
      { Py_tp_methods, t_DateFormat__methods_ },
      { Py_tp_init, (void *) abstract_init },
      { Py_tp_getset, t_DateFormat__fields_ },
      { 0, NULL }
    };

    static PyType_Def *PY_TYPE_BASES(DateFormat)[] = {
      &PY_TYPE_DEF(::java::text::Format),
      NULL
    };

    DEFINE_TYPE(DateFormat, t_DateFormat, DateFormat);

    void t_DateFormat::install(PyObject *module)
    {
      installType(&PY_TYPE(DateFormat), &PY_TYPE_DEF(DateFormat), module, "DateFormat", 0);
    }

    void t_DateFormat::initialize(PyObject *module)
    {
      PyObject_SetAttrString((PyObject *) PY_TYPE(DateFormat), "class_", make_descriptor(DateFormat::initializeClass, 1));
      PyObject_SetAttrString((PyObject *) PY_TYPE(DateFormat), "wrapfn_", make_descriptor(t_DateFormat::wrap_jobject));
      PyObject_SetAttrString((PyObject *) PY_TYPE(DateFormat), "boxfn_", make_descriptor(boxObject));
      env->getClass(DateFormat::initializeClass);
      PyObject_SetAttrString((PyObject *) PY_TYPE(DateFormat), "AM_PM_FIELD", make_descriptor(DateFormat::AM_PM_FIELD));
      PyObject_SetAttrString((PyObject *) PY_TYPE(DateFormat), "DATE_FIELD", make_descriptor(DateFormat::DATE_FIELD));
      PyObject_SetAttrString((PyObject *) PY_TYPE(DateFormat), "DAY_OF_WEEK_FIELD", make_descriptor(DateFormat::DAY_OF_WEEK_FIELD));
      PyObject_SetAttrString((PyObject *) PY_TYPE(DateFormat), "DAY_OF_WEEK_IN_MONTH_FIELD", make_descriptor(DateFormat::DAY_OF_WEEK_IN_MONTH_FIELD));
      PyObject_SetAttrString((PyObject *) PY_TYPE(DateFormat), "DAY_OF_YEAR_FIELD", make_descriptor(DateFormat::DAY_OF_YEAR_FIELD));
      PyObject_SetAttrString((PyObject *) PY_TYPE(DateFormat), "DEFAULT", make_descriptor(DateFormat::DEFAULT));
      PyObject_SetAttrString((PyObject *) PY_TYPE(DateFormat), "ERA_FIELD", make_descriptor(DateFormat::ERA_FIELD));
      PyObject_SetAttrString((PyObject *) PY_TYPE(DateFormat), "FULL", make_descriptor(DateFormat::FULL));
      PyObject_SetAttrString((PyObject *) PY_TYPE(DateFormat), "HOUR0_FIELD", make_descriptor(DateFormat::HOUR0_FIELD));
      PyObject_SetAttrString((PyObject *) PY_TYPE(DateFormat), "HOUR1_FIELD", make_descriptor(DateFormat::HOUR1_FIELD));
      PyObject_SetAttrString((PyObject *) PY_TYPE(DateFormat), "HOUR_OF_DAY0_FIELD", make_descriptor(DateFormat::HOUR_OF_DAY0_FIELD));
      PyObject_SetAttrString((PyObject *) PY_TYPE(DateFormat), "HOUR_OF_DAY1_FIELD", make_descriptor(DateFormat::HOUR_OF_DAY1_FIELD));
      PyObject_SetAttrString((PyObject *) PY_TYPE(DateFormat), "LONG", make_descriptor(DateFormat::LONG));
      PyObject_SetAttrString((PyObject *) PY_TYPE(DateFormat), "MEDIUM", make_descriptor(DateFormat::MEDIUM));
      PyObject_SetAttrString((PyObject *) PY_TYPE(DateFormat), "MILLISECOND_FIELD", make_descriptor(DateFormat::MILLISECOND_FIELD));
      PyObject_SetAttrString((PyObject *) PY_TYPE(DateFormat), "MINUTE_FIELD", make_descriptor(DateFormat::MINUTE_FIELD));
      PyObject_SetAttrString((PyObject *) PY_TYPE(DateFormat), "MONTH_FIELD", make_descriptor(DateFormat::MONTH_FIELD));
      PyObject_SetAttrString((PyObject *) PY_TYPE(DateFormat), "SECOND_FIELD", make_descriptor(DateFormat::SECOND_FIELD));
      PyObject_SetAttrString((PyObject *) PY_TYPE(DateFormat), "SHORT", make_descriptor(DateFormat::SHORT));
      PyObject_SetAttrString((PyObject *) PY_TYPE(DateFormat), "TIMEZONE_FIELD", make_descriptor(DateFormat::TIMEZONE_FIELD));
      PyObject_SetAttrString((PyObject *) PY_TYPE(DateFormat), "WEEK_OF_MONTH_FIELD", make_descriptor(DateFormat::WEEK_OF_MONTH_FIELD));
      PyObject_SetAttrString((PyObject *) PY_TYPE(DateFormat), "WEEK_OF_YEAR_FIELD", make_descriptor(DateFormat::WEEK_OF_YEAR_FIELD));
      PyObject_SetAttrString((PyObject *) PY_TYPE(DateFormat), "YEAR_FIELD", make_descriptor(DateFormat::YEAR_FIELD));
    }

    static PyObject *t_DateFormat_cast_(PyTypeObject *type, PyObject *arg)
    {
      if (!(arg = castCheck(arg, DateFormat::initializeClass, 1)))
        return NULL;
      return t_DateFormat::wrap_Object(DateFormat(((t_DateFormat *) arg)->object.this$));
    }
    static PyObject *t_DateFormat_instance_(PyTypeObject *type, PyObject *arg)
    {
      if (!castCheck(arg, DateFormat::initializeClass, 0))
        Py_RETURN_FALSE;
      Py_RETURN_TRUE;
    }

    static PyObject *t_DateFormat_clone(t_DateFormat *self, PyObject *args)
    {
      ::java::lang::Object result((jobject) NULL);

      if (!parseArgs(args, ""))
      {
        OBJ_CALL(result = self->object.clone());
        return ::java::lang::t_Object::wrap_Object(result);
      }

      return callSuper(PY_TYPE(DateFormat), (PyObject *) self, "clone", args, 2);
    }

    static PyObject *t_DateFormat_equals(t_DateFormat *self, PyObject *args)
    {
      ::java::lang::Object a0((jobject) NULL);
      jboolean result;

      if (!parseArgs(args, "o", &a0))
      {
        OBJ_CALL(result = self->object.equals(a0));
        Py_RETURN_BOOL(result);
      }

      return callSuper(PY_TYPE(DateFormat), (PyObject *) self, "equals", args, 2);
    }

    static PyObject *t_DateFormat_format(t_DateFormat *self, PyObject *args)
    {
      ::java::util::Date a0((jobject) NULL);
      ::java::lang::String result((jobject) NULL);

      if (!parseArgs(args, "k", ::java::util::Date::initializeClass, &a0))
      {
        OBJ_CALL(result = self->object.format(a0));
        return j2p(result);
      }

      return callSuper(PY_TYPE(DateFormat), (PyObject *) self, "format", args, 2);
    }

    static PyObject *t_DateFormat_getAvailableLocales(PyTypeObject *type)
    {
      JArray< ::java::util::Locale > result((jobject) NULL);
      OBJ_CALL(result = ::java::text::DateFormat::getAvailableLocales());
      return JArray<jobject>(result.this$).wrap(::java::util::t_Locale::wrap_jobject);
    }

    static PyObject *t_DateFormat_getCalendar(t_DateFormat *self)
    {
      ::java::util::Calendar result((jobject) NULL);
      OBJ_CALL(result = self->object.getCalendar());
      return ::java::util::t_Calendar::wrap_Object(result);
    }

    static PyObject *t_DateFormat_getDateInstance(PyTypeObject *type, PyObject *args)
    {
      switch (PyTuple_GET_SIZE(args)) {
       case 0:
        {
          DateFormat result((jobject) NULL);
          OBJ_CALL(result = ::java::text::DateFormat::getDateInstance());
          return t_DateFormat::wrap_Object(result);
        }
        break;
       case 1:
        {
          jint a0;
          DateFormat result((jobject) NULL);

          if (!parseArgs(args, "I", &a0))
          {
            OBJ_CALL(result = ::java::text::DateFormat::getDateInstance(a0));
            return t_DateFormat::wrap_Object(result);
          }
        }
        break;
       case 2:
        {
          jint a0;
          ::java::util::Locale a1((jobject) NULL);
          DateFormat result((jobject) NULL);

          if (!parseArgs(args, "Ik", ::java::util::Locale::initializeClass, &a0, &a1))
          {
            OBJ_CALL(result = ::java::text::DateFormat::getDateInstance(a0, a1));
            return t_DateFormat::wrap_Object(result);
          }
        }
      }

      PyErr_SetArgsError(type, "getDateInstance", args);
      return NULL;
    }

    static PyObject *t_DateFormat_getDateTimeInstance(PyTypeObject *type, PyObject *args)
    {
      switch (PyTuple_GET_SIZE(args)) {
       case 0:
        {
          DateFormat result((jobject) NULL);
          OBJ_CALL(result = ::java::text::DateFormat::getDateTimeInstance());
          return t_DateFormat::wrap_Object(result);
        }
        break;
       case 2:
        {
          jint a0;
          jint a1;
          DateFormat result((jobject) NULL);

          if (!parseArgs(args, "II", &a0, &a1))
          {
            OBJ_CALL(result = ::java::text::DateFormat::getDateTimeInstance(a0, a1));
            return t_DateFormat::wrap_Object(result);
          }
        }
        break;
       case 3:
        {
          jint a0;
          jint a1;
          ::java::util::Locale a2((jobject) NULL);
          DateFormat result((jobject) NULL);

          if (!parseArgs(args, "IIk", ::java::util::Locale::initializeClass, &a0, &a1, &a2))
          {
            OBJ_CALL(result = ::java::text::DateFormat::getDateTimeInstance(a0, a1, a2));
            return t_DateFormat::wrap_Object(result);
          }
        }
      }

      PyErr_SetArgsError(type, "getDateTimeInstance", args);
      return NULL;
    }

    static PyObject *t_DateFormat_getInstance(PyTypeObject *type)
    {
      DateFormat result((jobject) NULL);
      OBJ_CALL(result = ::java::text::DateFormat::getInstance());
      return t_DateFormat::wrap_Object(result);
    }

    static PyObject *t_DateFormat_getNumberFormat(t_DateFormat *self)
    {
      ::java::text::NumberFormat result((jobject) NULL);
      OBJ_CALL(result = self->object.getNumberFormat());
      return ::java::text::t_NumberFormat::wrap_Object(result);
    }

    static PyObject *t_DateFormat_getTimeInstance(PyTypeObject *type, PyObject *args)
    {
      switch (PyTuple_GET_SIZE(args)) {
       case 0:
        {
          DateFormat result((jobject) NULL);
          OBJ_CALL(result = ::java::text::DateFormat::getTimeInstance());
          return t_DateFormat::wrap_Object(result);
        }
        break;
       case 1:
        {
          jint a0;
          DateFormat result((jobject) NULL);

          if (!parseArgs(args, "I", &a0))
          {
            OBJ_CALL(result = ::java::text::DateFormat::getTimeInstance(a0));
            return t_DateFormat::wrap_Object(result);
          }
        }
        break;
       case 2:
        {
          jint a0;
          ::java::util::Locale a1((jobject) NULL);
          DateFormat result((jobject) NULL);

          if (!parseArgs(args, "Ik", ::java::util::Locale::initializeClass, &a0, &a1))
          {
            OBJ_CALL(result = ::java::text::DateFormat::getTimeInstance(a0, a1));
            return t_DateFormat::wrap_Object(result);
          }
        }
      }

      PyErr_SetArgsError(type, "getTimeInstance", args);
      return NULL;
    }

    static PyObject *t_DateFormat_getTimeZone(t_DateFormat *self)
    {
      ::java::util::TimeZone result((jobject) NULL);
      OBJ_CALL(result = self->object.getTimeZone());
      return ::java::util::t_TimeZone::wrap_Object(result);
    }

    static PyObject *t_DateFormat_hashCode(t_DateFormat *self, PyObject *args)
    {
      jint result;

      if (!parseArgs(args, ""))
      {
        OBJ_CALL(result = self->object.hashCode());
        return PyLong_FromLong((long) result);
      }

      return callSuper(PY_TYPE(DateFormat), (PyObject *) self, "hashCode", args, 2);
    }

    static PyObject *t_DateFormat_isLenient(t_DateFormat *self)
    {
      jboolean result;
      OBJ_CALL(result = self->object.isLenient());
      Py_RETURN_BOOL(result);
    }

    static PyObject *t_DateFormat_parse(t_DateFormat *self, PyObject *arg)
    {
      ::java::lang::String a0((jobject) NULL);
      ::java::util::Date result((jobject) NULL);

      if (!parseArg(arg, "s", &a0))
      {
        OBJ_CALL(result = self->object.parse(a0));
        return ::java::util::t_Date::wrap_Object(result);
      }

      PyErr_SetArgsError((PyObject *) self, "parse", arg);
      return NULL;
    }

    static PyObject *t_DateFormat_setCalendar(t_DateFormat *self, PyObject *arg)
    {
      ::java::util::Calendar a0((jobject) NULL);

      if (!parseArg(arg, "k", ::java::util::Calendar::initializeClass, &a0))
      {
        OBJ_CALL(self->object.setCalendar(a0));
        Py_RETURN_NONE;
      }

      PyErr_SetArgsError((PyObject *) self, "setCalendar", arg);
      return NULL;
    }

    static PyObject *t_DateFormat_setLenient(t_DateFormat *self, PyObject *arg)
    {
      jboolean a0;

      if (!parseArg(arg, "Z", &a0))
      {
        OBJ_CALL(self->object.setLenient(a0));
        Py_RETURN_NONE;
      }

      PyErr_SetArgsError((PyObject *) self, "setLenient", arg);
      return NULL;
    }

    static PyObject *t_DateFormat_setNumberFormat(t_DateFormat *self, PyObject *arg)
    {
      ::java::text::NumberFormat a0((jobject) NULL);

      if (!parseArg(arg, "k", ::java::text::NumberFormat::initializeClass, &a0))
      {
        OBJ_CALL(self->object.setNumberFormat(a0));
        Py_RETURN_NONE;
      }

      PyErr_SetArgsError((PyObject *) self, "setNumberFormat", arg);
      return NULL;
    }

    static PyObject *t_DateFormat_setTimeZone(t_DateFormat *self, PyObject *arg)
    {
      ::java::util::TimeZone a0((jobject) NULL);

      if (!parseArg(arg, "k", ::java::util::TimeZone::initializeClass, &a0))
      {
        OBJ_CALL(self->object.setTimeZone(a0));
        Py_RETURN_NONE;
      }

      PyErr_SetArgsError((PyObject *) self, "setTimeZone", arg);
      return NULL;
    }

    static PyObject *t_DateFormat_get__availableLocales(t_DateFormat *self, void *data)
    {
      JArray< ::java::util::Locale > value((jobject) NULL);
      OBJ_CALL(value = self->object.getAvailableLocales());
      return JArray<jobject>(value.this$).wrap(::java::util::t_Locale::wrap_jobject);
    }

    static PyObject *t_DateFormat_get__calendar(t_DateFormat *self, void *data)
    {
      ::java::util::Calendar value((jobject) NULL);
      OBJ_CALL(value = self->object.getCalendar());
      return ::java::util::t_Calendar::wrap_Object(value);
    }
    static int t_DateFormat_set__calendar(t_DateFormat *self, PyObject *arg, void *data)
    {
      {
        ::java::util::Calendar value((jobject) NULL);
        if (!parseArg(arg, "k", ::java::util::Calendar::initializeClass, &value))
        {
          INT_CALL(self->object.setCalendar(value));
          return 0;
        }
      }
      PyErr_SetArgsError((PyObject *) self, "calendar", arg);
      return -1;
    }

    static PyObject *t_DateFormat_get__dateInstance(t_DateFormat *self, void *data)
    {
      DateFormat value((jobject) NULL);
      OBJ_CALL(value = self->object.getDateInstance());
      return t_DateFormat::wrap_Object(value);
    }

    static PyObject *t_DateFormat_get__dateTimeInstance(t_DateFormat *self, void *data)
    {
      DateFormat value((jobject) NULL);
      OBJ_CALL(value = self->object.getDateTimeInstance());
      return t_DateFormat::wrap_Object(value);
    }

    static PyObject *t_DateFormat_get__instance(t_DateFormat *self, void *data)
    {
      DateFormat value((jobject) NULL);
      OBJ_CALL(value = self->object.getInstance());
      return t_DateFormat::wrap_Object(value);
    }

    static PyObject *t_DateFormat_get__lenient(t_DateFormat *self, void *data)
    {
      jboolean value;
      OBJ_CALL(value = self->object.isLenient());
      Py_RETURN_BOOL(value);
    }
    static int t_DateFormat_set__lenient(t_DateFormat *self, PyObject *arg, void *data)
    {
      {
        jboolean value;
        if (!parseArg(arg, "Z", &value))
        {
          INT_CALL(self->object.setLenient(value));
          return 0;
        }
      }
      PyErr_SetArgsError((PyObject *) self, "lenient", arg);
      return -1;
    }

    static PyObject *t_DateFormat_get__numberFormat(t_DateFormat *self, void *data)
    {
      ::java::text::NumberFormat value((jobject) NULL);
      OBJ_CALL(value = self->object.getNumberFormat());
      return ::java::text::t_NumberFormat::wrap_Object(value);
    }
    static int t_DateFormat_set__numberFormat(t_DateFormat *self, PyObject *arg, void *data)
    {
      {
        ::java::text::NumberFormat value((jobject) NULL);
        if (!parseArg(arg, "k", ::java::text::NumberFormat::initializeClass, &value))
        {
          INT_CALL(self->object.setNumberFormat(value));
          return 0;
        }
      }
      PyErr_SetArgsError((PyObject *) self, "numberFormat", arg);
      return -1;
    }

    static PyObject *t_DateFormat_get__timeInstance(t_DateFormat *self, void *data)
    {
      DateFormat value((jobject) NULL);
      OBJ_CALL(value = self->object.getTimeInstance());
      return t_DateFormat::wrap_Object(value);
    }

    static PyObject *t_DateFormat_get__timeZone(t_DateFormat *self, void *data)
    {
      ::java::util::TimeZone value((jobject) NULL);
      OBJ_CALL(value = self->object.getTimeZone());
      return ::java::util::t_TimeZone::wrap_Object(value);
    }
    static int t_DateFormat_set__timeZone(t_DateFormat *self, PyObject *arg, void *data)
    {
      {
        ::java::util::TimeZone value((jobject) NULL);
        if (!parseArg(arg, "k", ::java::util::TimeZone::initializeClass, &value))
        {
          INT_CALL(self->object.setTimeZone(value));
          return 0;
        }
      }
      PyErr_SetArgsError((PyObject *) self, "timeZone", arg);
      return -1;
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/hu/HungarianLightStemmer.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace hu {

          ::java::lang::Class *HungarianLightStemmer::class$ = NULL;
          jmethodID *HungarianLightStemmer::mids$ = NULL;
          bool HungarianLightStemmer::live$ = false;

          jclass HungarianLightStemmer::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/hu/HungarianLightStemmer");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_f2cc1bce94666404] = env->getMethodID(cls, "<init>", "()V");
              mids$[mid_stem_d4655f2a19359017] = env->getMethodID(cls, "stem", "([CI)I");

              class$ = new ::java::lang::Class(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          HungarianLightStemmer::HungarianLightStemmer() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_f2cc1bce94666404)) {}

          jint HungarianLightStemmer::stem(const JArray< jchar > & a0, jint a1) const
          {
            return env->callIntMethod(this$, mids$[mid_stem_d4655f2a19359017], a0.this$, a1);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace hu {
          static PyObject *t_HungarianLightStemmer_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_HungarianLightStemmer_instance_(PyTypeObject *type, PyObject *arg);
          static int t_HungarianLightStemmer_init_(t_HungarianLightStemmer *self, PyObject *args, PyObject *kwds);
          static PyObject *t_HungarianLightStemmer_stem(t_HungarianLightStemmer *self, PyObject *args);

          static PyMethodDef t_HungarianLightStemmer__methods_[] = {
            DECLARE_METHOD(t_HungarianLightStemmer, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_HungarianLightStemmer, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_HungarianLightStemmer, stem, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          static PyType_Slot PY_TYPE_SLOTS(HungarianLightStemmer)[] = {
            { Py_tp_methods, t_HungarianLightStemmer__methods_ },
            { Py_tp_init, (void *) t_HungarianLightStemmer_init_ },
            { 0, NULL }
          };

          static PyType_Def *PY_TYPE_BASES(HungarianLightStemmer)[] = {
            &PY_TYPE_DEF(::java::lang::Object),
            NULL
          };

          DEFINE_TYPE(HungarianLightStemmer, t_HungarianLightStemmer, HungarianLightStemmer);

          void t_HungarianLightStemmer::install(PyObject *module)
          {
            installType(&PY_TYPE(HungarianLightStemmer), &PY_TYPE_DEF(HungarianLightStemmer), module, "HungarianLightStemmer", 0);
          }

          void t_HungarianLightStemmer::initialize(PyObject *module)
          {
            PyObject_SetAttrString((PyObject *) PY_TYPE(HungarianLightStemmer), "class_", make_descriptor(HungarianLightStemmer::initializeClass, 1));
            PyObject_SetAttrString((PyObject *) PY_TYPE(HungarianLightStemmer), "wrapfn_", make_descriptor(t_HungarianLightStemmer::wrap_jobject));
            PyObject_SetAttrString((PyObject *) PY_TYPE(HungarianLightStemmer), "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_HungarianLightStemmer_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, HungarianLightStemmer::initializeClass, 1)))
              return NULL;
            return t_HungarianLightStemmer::wrap_Object(HungarianLightStemmer(((t_HungarianLightStemmer *) arg)->object.this$));
          }
          static PyObject *t_HungarianLightStemmer_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, HungarianLightStemmer::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_HungarianLightStemmer_init_(t_HungarianLightStemmer *self, PyObject *args, PyObject *kwds)
          {
            HungarianLightStemmer object((jobject) NULL);

            INT_CALL(object = HungarianLightStemmer());
            self->object = object;

            return 0;
          }

          static PyObject *t_HungarianLightStemmer_stem(t_HungarianLightStemmer *self, PyObject *args)
          {
            JArray< jchar > a0((jobject) NULL);
            jint a1;
            jint result;

            if (!parseArgs(args, "[CI", &a0, &a1))
            {
              OBJ_CALL(result = self->object.stem(a0, a1));
              return PyLong_FromLong((long) result);
            }

            PyErr_SetArgsError((PyObject *) self, "stem", args);
            return NULL;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/Analyzer$TokenStreamComponents.h"
#include "java/lang/Class.h"
#include "java/util/function/Consumer.h"
#include "org/apache/lucene/analysis/TokenStream.h"
#include "org/apache/lucene/analysis/Tokenizer.h"
#include "java/io/Reader.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {

        ::java::lang::Class *Analyzer$TokenStreamComponents::class$ = NULL;
        jmethodID *Analyzer$TokenStreamComponents::mids$ = NULL;
        bool Analyzer$TokenStreamComponents::live$ = false;

        jclass Analyzer$TokenStreamComponents::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/Analyzer$TokenStreamComponents");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_e03fb874ecf6a8c0] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/analysis/Tokenizer;)V");
            mids$[mid_init$_2bc417f4e68b469c] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/analysis/Tokenizer;Lorg/apache/lucene/analysis/TokenStream;)V");
            mids$[mid_init$_747dea13ad55b145] = env->getMethodID(cls, "<init>", "(Ljava/util/function/Consumer;Lorg/apache/lucene/analysis/TokenStream;)V");
            mids$[mid_getSource_47b9b564aaded151] = env->getMethodID(cls, "getSource", "()Ljava/util/function/Consumer;");
            mids$[mid_getTokenStream_53a594dacf37f73d] = env->getMethodID(cls, "getTokenStream", "()Lorg/apache/lucene/analysis/TokenStream;");

            class$ = new ::java::lang::Class(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        Analyzer$TokenStreamComponents::Analyzer$TokenStreamComponents(const ::org::apache::lucene::analysis::Tokenizer & a0) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_e03fb874ecf6a8c0, a0.this$)) {}

        Analyzer$TokenStreamComponents::Analyzer$TokenStreamComponents(const ::org::apache::lucene::analysis::Tokenizer & a0, const ::org::apache::lucene::analysis::TokenStream & a1) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_2bc417f4e68b469c, a0.this$, a1.this$)) {}

        Analyzer$TokenStreamComponents::Analyzer$TokenStreamComponents(const ::java::util::function::Consumer & a0, const ::org::apache::lucene::analysis::TokenStream & a1) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_747dea13ad55b145, a0.this$, a1.this$)) {}

        ::java::util::function::Consumer Analyzer$TokenStreamComponents::getSource() const
        {
          return ::java::util::function::Consumer(env->callObjectMethod(this$, mids$[mid_getSource_47b9b564aaded151]));
        }

        ::org::apache::lucene::analysis::TokenStream Analyzer$TokenStreamComponents::getTokenStream() const
        {
          return ::org::apache::lucene::analysis::TokenStream(env->callObjectMethod(this$, mids$[mid_getTokenStream_53a594dacf37f73d]));
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        static PyObject *t_Analyzer$TokenStreamComponents_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_Analyzer$TokenStreamComponents_instance_(PyTypeObject *type, PyObject *arg);
        static int t_Analyzer$TokenStreamComponents_init_(t_Analyzer$TokenStreamComponents *self, PyObject *args, PyObject *kwds);
        static PyObject *t_Analyzer$TokenStreamComponents_getSource(t_Analyzer$TokenStreamComponents *self);
        static PyObject *t_Analyzer$TokenStreamComponents_getTokenStream(t_Analyzer$TokenStreamComponents *self);
        static PyObject *t_Analyzer$TokenStreamComponents_get__source(t_Analyzer$TokenStreamComponents *self, void *data);
        static PyObject *t_Analyzer$TokenStreamComponents_get__tokenStream(t_Analyzer$TokenStreamComponents *self, void *data);
        static PyGetSetDef t_Analyzer$TokenStreamComponents__fields_[] = {
          DECLARE_GET_FIELD(t_Analyzer$TokenStreamComponents, source),
          DECLARE_GET_FIELD(t_Analyzer$TokenStreamComponents, tokenStream),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_Analyzer$TokenStreamComponents__methods_[] = {
          DECLARE_METHOD(t_Analyzer$TokenStreamComponents, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_Analyzer$TokenStreamComponents, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_Analyzer$TokenStreamComponents, getSource, METH_NOARGS),
          DECLARE_METHOD(t_Analyzer$TokenStreamComponents, getTokenStream, METH_NOARGS),
          { NULL, NULL, 0, NULL }
        };

        static PyType_Slot PY_TYPE_SLOTS(Analyzer$TokenStreamComponents)[] = {
          { Py_tp_methods, t_Analyzer$TokenStreamComponents__methods_ },
          { Py_tp_init, (void *) t_Analyzer$TokenStreamComponents_init_ },
          { Py_tp_getset, t_Analyzer$TokenStreamComponents__fields_ },
          { 0, NULL }
        };

        static PyType_Def *PY_TYPE_BASES(Analyzer$TokenStreamComponents)[] = {
          &PY_TYPE_DEF(::java::lang::Object),
          NULL
        };

        DEFINE_TYPE(Analyzer$TokenStreamComponents, t_Analyzer$TokenStreamComponents, Analyzer$TokenStreamComponents);

        void t_Analyzer$TokenStreamComponents::install(PyObject *module)
        {
          installType(&PY_TYPE(Analyzer$TokenStreamComponents), &PY_TYPE_DEF(Analyzer$TokenStreamComponents), module, "Analyzer$TokenStreamComponents", 0);
        }

        void t_Analyzer$TokenStreamComponents::initialize(PyObject *module)
        {
          PyObject_SetAttrString((PyObject *) PY_TYPE(Analyzer$TokenStreamComponents), "class_", make_descriptor(Analyzer$TokenStreamComponents::initializeClass, 1));
          PyObject_SetAttrString((PyObject *) PY_TYPE(Analyzer$TokenStreamComponents), "wrapfn_", make_descriptor(t_Analyzer$TokenStreamComponents::wrap_jobject));
          PyObject_SetAttrString((PyObject *) PY_TYPE(Analyzer$TokenStreamComponents), "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_Analyzer$TokenStreamComponents_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, Analyzer$TokenStreamComponents::initializeClass, 1)))
            return NULL;
          return t_Analyzer$TokenStreamComponents::wrap_Object(Analyzer$TokenStreamComponents(((t_Analyzer$TokenStreamComponents *) arg)->object.this$));
        }
        static PyObject *t_Analyzer$TokenStreamComponents_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, Analyzer$TokenStreamComponents::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_Analyzer$TokenStreamComponents_init_(t_Analyzer$TokenStreamComponents *self, PyObject *args, PyObject *kwds)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 1:
            {
              ::org::apache::lucene::analysis::Tokenizer a0((jobject) NULL);
              Analyzer$TokenStreamComponents object((jobject) NULL);

              if (!parseArgs(args, "k", ::org::apache::lucene::analysis::Tokenizer::initializeClass, &a0))
              {
                INT_CALL(object = Analyzer$TokenStreamComponents(a0));
                self->object = object;
                break;
              }
            }
            goto err;
           case 2:
            {
              ::org::apache::lucene::analysis::Tokenizer a0((jobject) NULL);
              ::org::apache::lucene::analysis::TokenStream a1((jobject) NULL);
              Analyzer$TokenStreamComponents object((jobject) NULL);

              if (!parseArgs(args, "kk", ::org::apache::lucene::analysis::Tokenizer::initializeClass, ::org::apache::lucene::analysis::TokenStream::initializeClass, &a0, &a1))
              {
                INT_CALL(object = Analyzer$TokenStreamComponents(a0, a1));
                self->object = object;
                break;
              }
            }
            {
              ::java::util::function::Consumer a0((jobject) NULL);
              PyTypeObject **p0;
              ::org::apache::lucene::analysis::TokenStream a1((jobject) NULL);
              Analyzer$TokenStreamComponents object((jobject) NULL);

              if (!parseArgs(args, "Kk", ::java::util::function::Consumer::initializeClass, ::org::apache::lucene::analysis::TokenStream::initializeClass, &a0, &p0, ::java::util::function::t_Consumer::parameters_, &a1))
              {
                INT_CALL(object = Analyzer$TokenStreamComponents(a0, a1));
                self->object = object;
                break;
              }
            }
           default:
           err:
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }

        static PyObject *t_Analyzer$TokenStreamComponents_getSource(t_Analyzer$TokenStreamComponents *self)
        {
          ::java::util::function::Consumer result((jobject) NULL);
          OBJ_CALL(result = self->object.getSource());
          return ::java::util::function::t_Consumer::wrap_Object(result, ::java::io::PY_TYPE(Reader));
        }

        static PyObject *t_Analyzer$TokenStreamComponents_getTokenStream(t_Analyzer$TokenStreamComponents *self)
        {
          ::org::apache::lucene::analysis::TokenStream result((jobject) NULL);
          OBJ_CALL(result = self->object.getTokenStream());
          return ::org::apache::lucene::analysis::t_TokenStream::wrap_Object(result);
        }

        static PyObject *t_Analyzer$TokenStreamComponents_get__source(t_Analyzer$TokenStreamComponents *self, void *data)
        {
          ::java::util::function::Consumer value((jobject) NULL);
          OBJ_CALL(value = self->object.getSource());
          return ::java::util::function::t_Consumer::wrap_Object(value);
        }

        static PyObject *t_Analyzer$TokenStreamComponents_get__tokenStream(t_Analyzer$TokenStreamComponents *self, void *data)
        {
          ::org::apache::lucene::analysis::TokenStream value((jobject) NULL);
          OBJ_CALL(value = self->object.getTokenStream());
          return ::org::apache::lucene::analysis::t_TokenStream::wrap_Object(value);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/miscellaneous/KeepWordFilterFactory.h"
#include "java/util/Map.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/analysis/TokenStream.h"
#include "org/apache/lucene/analysis/util/ResourceLoader.h"
#include "java/lang/String.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/analysis/util/ResourceLoaderAware.h"
#include "org/apache/lucene/analysis/CharArraySet.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace miscellaneous {

          ::java::lang::Class *KeepWordFilterFactory::class$ = NULL;
          jmethodID *KeepWordFilterFactory::mids$ = NULL;
          bool KeepWordFilterFactory::live$ = false;
          ::java::lang::String *KeepWordFilterFactory::NAME = NULL;

          jclass KeepWordFilterFactory::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/miscellaneous/KeepWordFilterFactory");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_408bd889ee3beae5] = env->getMethodID(cls, "<init>", "(Ljava/util/Map;)V");
              mids$[mid_create_6de1e28d9d10cd9e] = env->getMethodID(cls, "create", "(Lorg/apache/lucene/analysis/TokenStream;)Lorg/apache/lucene/analysis/TokenStream;");
              mids$[mid_getWords_7aec8e69a9807ca1] = env->getMethodID(cls, "getWords", "()Lorg/apache/lucene/analysis/CharArraySet;");
              mids$[mid_inform_b4ee53c41a5f629f] = env->getMethodID(cls, "inform", "(Lorg/apache/lucene/analysis/util/ResourceLoader;)V");
              mids$[mid_isIgnoreCase_8454bd5aa23fd11e] = env->getMethodID(cls, "isIgnoreCase", "()Z");

              class$ = new ::java::lang::Class(cls);
              cls = (jclass) class$->this$;

              NAME = new ::java::lang::String(env->getStaticObjectField(cls, "NAME", "Ljava/lang/String;"));
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          KeepWordFilterFactory::KeepWordFilterFactory(const ::java::util::Map & a0) : ::org::apache::lucene::analysis::util::TokenFilterFactory(env->newObject(initializeClass, &mids$, mid_init$_408bd889ee3beae5, a0.this$)) {}

          ::org::apache::lucene::analysis::TokenStream KeepWordFilterFactory::create(const ::org::apache::lucene::analysis::TokenStream & a0) const
          {
            return ::org::apache::lucene::analysis::TokenStream(env->callObjectMethod(this$, mids$[mid_create_6de1e28d9d10cd9e], a0.this$));
          }

          ::org::apache::lucene::analysis::CharArraySet KeepWordFilterFactory::getWords() const
          {
            return ::org::apache::lucene::analysis::CharArraySet(env->callObjectMethod(this$, mids$[mid_getWords_7aec8e69a9807ca1]));
          }

          void KeepWordFilterFactory::inform(const ::org::apache::lucene::analysis::util::ResourceLoader & a0) const
          {
            env->callVoidMethod(this$, mids$[mid_inform_b4ee53c41a5f629f], a0.this$);
          }

          jboolean KeepWordFilterFactory::isIgnoreCase() const
          {
            return env->callBooleanMethod(this$, mids$[mid_isIgnoreCase_8454bd5aa23fd11e]);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace miscellaneous {
          static PyObject *t_KeepWordFilterFactory_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_KeepWordFilterFactory_instance_(PyTypeObject *type, PyObject *arg);
          static int t_KeepWordFilterFactory_init_(t_KeepWordFilterFactory *self, PyObject *args, PyObject *kwds);
          static PyObject *t_KeepWordFilterFactory_create(t_KeepWordFilterFactory *self, PyObject *args);
          static PyObject *t_KeepWordFilterFactory_getWords(t_KeepWordFilterFactory *self);
          static PyObject *t_KeepWordFilterFactory_inform(t_KeepWordFilterFactory *self, PyObject *arg);
          static PyObject *t_KeepWordFilterFactory_isIgnoreCase(t_KeepWordFilterFactory *self);
          static PyObject *t_KeepWordFilterFactory_get__ignoreCase(t_KeepWordFilterFactory *self, void *data);
          static PyObject *t_KeepWordFilterFactory_get__words(t_KeepWordFilterFactory *self, void *data);
          static PyGetSetDef t_KeepWordFilterFactory__fields_[] = {
            DECLARE_GET_FIELD(t_KeepWordFilterFactory, ignoreCase),
            DECLARE_GET_FIELD(t_KeepWordFilterFactory, words),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_KeepWordFilterFactory__methods_[] = {
            DECLARE_METHOD(t_KeepWordFilterFactory, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_KeepWordFilterFactory, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_KeepWordFilterFactory, create, METH_VARARGS),
            DECLARE_METHOD(t_KeepWordFilterFactory, getWords, METH_NOARGS),
            DECLARE_METHOD(t_KeepWordFilterFactory, inform, METH_O),
            DECLARE_METHOD(t_KeepWordFilterFactory, isIgnoreCase, METH_NOARGS),
            { NULL, NULL, 0, NULL }
          };

          static PyType_Slot PY_TYPE_SLOTS(KeepWordFilterFactory)[] = {
            { Py_tp_methods, t_KeepWordFilterFactory__methods_ },
            { Py_tp_init, (void *) t_KeepWordFilterFactory_init_ },
            { Py_tp_getset, t_KeepWordFilterFactory__fields_ },
            { 0, NULL }
          };

          static PyType_Def *PY_TYPE_BASES(KeepWordFilterFactory)[] = {
            &PY_TYPE_DEF(::org::apache::lucene::analysis::util::TokenFilterFactory),
            NULL
          };

          DEFINE_TYPE(KeepWordFilterFactory, t_KeepWordFilterFactory, KeepWordFilterFactory);

          void t_KeepWordFilterFactory::install(PyObject *module)
          {
            installType(&PY_TYPE(KeepWordFilterFactory), &PY_TYPE_DEF(KeepWordFilterFactory), module, "KeepWordFilterFactory", 0);
          }

          void t_KeepWordFilterFactory::initialize(PyObject *module)
          {
            PyObject_SetAttrString((PyObject *) PY_TYPE(KeepWordFilterFactory), "class_", make_descriptor(KeepWordFilterFactory::initializeClass, 1));
            PyObject_SetAttrString((PyObject *) PY_TYPE(KeepWordFilterFactory), "wrapfn_", make_descriptor(t_KeepWordFilterFactory::wrap_jobject));
            PyObject_SetAttrString((PyObject *) PY_TYPE(KeepWordFilterFactory), "boxfn_", make_descriptor(boxObject));
            env->getClass(KeepWordFilterFactory::initializeClass);
            PyObject_SetAttrString((PyObject *) PY_TYPE(KeepWordFilterFactory), "NAME", make_descriptor(j2p(*KeepWordFilterFactory::NAME)));
          }

          static PyObject *t_KeepWordFilterFactory_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, KeepWordFilterFactory::initializeClass, 1)))
              return NULL;
            return t_KeepWordFilterFactory::wrap_Object(KeepWordFilterFactory(((t_KeepWordFilterFactory *) arg)->object.this$));
          }
          static PyObject *t_KeepWordFilterFactory_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, KeepWordFilterFactory::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_KeepWordFilterFactory_init_(t_KeepWordFilterFactory *self, PyObject *args, PyObject *kwds)
          {
            ::java::util::Map a0((jobject) NULL);
            PyTypeObject **p0;
            KeepWordFilterFactory object((jobject) NULL);

            if (!parseArgs(args, "K", ::java::util::Map::initializeClass, &a0, &p0, ::java::util::t_Map::parameters_))
            {
              INT_CALL(object = KeepWordFilterFactory(a0));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_KeepWordFilterFactory_create(t_KeepWordFilterFactory *self, PyObject *args)
          {
            ::org::apache::lucene::analysis::TokenStream a0((jobject) NULL);
            ::org::apache::lucene::analysis::TokenStream result((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::analysis::TokenStream::initializeClass, &a0))
            {
              OBJ_CALL(result = self->object.create(a0));
              return ::org::apache::lucene::analysis::t_TokenStream::wrap_Object(result);
            }

            return callSuper(PY_TYPE(KeepWordFilterFactory), (PyObject *) self, "create", args, 2);
          }

          static PyObject *t_KeepWordFilterFactory_getWords(t_KeepWordFilterFactory *self)
          {
            ::org::apache::lucene::analysis::CharArraySet result((jobject) NULL);
            OBJ_CALL(result = self->object.getWords());
            return ::org::apache::lucene::analysis::t_CharArraySet::wrap_Object(result);
          }

          static PyObject *t_KeepWordFilterFactory_inform(t_KeepWordFilterFactory *self, PyObject *arg)
          {
            ::org::apache::lucene::analysis::util::ResourceLoader a0((jobject) NULL);

            if (!parseArg(arg, "k", ::org::apache::lucene::analysis::util::ResourceLoader::initializeClass, &a0))
            {
              OBJ_CALL(self->object.inform(a0));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError((PyObject *) self, "inform", arg);
            return NULL;
          }

          static PyObject *t_KeepWordFilterFactory_isIgnoreCase(t_KeepWordFilterFactory *self)
          {
            jboolean result;
            OBJ_CALL(result = self->object.isIgnoreCase());
            Py_RETURN_BOOL(result);
          }

          static PyObject *t_KeepWordFilterFactory_get__ignoreCase(t_KeepWordFilterFactory *self, void *data)
          {
            jboolean value;
            OBJ_CALL(value = self->object.isIgnoreCase());
            Py_RETURN_BOOL(value);
          }

          static PyObject *t_KeepWordFilterFactory_get__words(t_KeepWordFilterFactory *self, void *data)
          {
            ::org::apache::lucene::analysis::CharArraySet value((jobject) NULL);
            OBJ_CALL(value = self->object.getWords());
            return ::org::apache::lucene::analysis::t_CharArraySet::wrap_Object(value);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/document/DoubleRangeDocValuesField.h"
#include "java/lang/String.h"
#include "org/apache/lucene/search/Query.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace document {

        ::java::lang::Class *DoubleRangeDocValuesField::class$ = NULL;
        jmethodID *DoubleRangeDocValuesField::mids$ = NULL;
        bool DoubleRangeDocValuesField::live$ = false;

        jclass DoubleRangeDocValuesField::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/document/DoubleRangeDocValuesField");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_f874f398fdc79791] = env->getMethodID(cls, "<init>", "(Ljava/lang/String;[D[D)V");
            mids$[mid_getMax_f3ddedc0b6f18620] = env->getMethodID(cls, "getMax", "(I)D");
            mids$[mid_getMin_f3ddedc0b6f18620] = env->getMethodID(cls, "getMin", "(I)D");
            mids$[mid_newSlowIntersectsQuery_ac4cb7e9a584976e] = env->getStaticMethodID(cls, "newSlowIntersectsQuery", "(Ljava/lang/String;[D[D)Lorg/apache/lucene/search/Query;");

            class$ = new ::java::lang::Class(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        DoubleRangeDocValuesField::DoubleRangeDocValuesField(const ::java::lang::String & a0, const JArray< jdouble > & a1, const JArray< jdouble > & a2) : ::org::apache::lucene::document::BinaryRangeDocValuesField(env->newObject(initializeClass, &mids$, mid_init$_f874f398fdc79791, a0.this$, a1.this$, a2.this$)) {}

        jdouble DoubleRangeDocValuesField::getMax(jint a0) const
        {
          return env->callDoubleMethod(this$, mids$[mid_getMax_f3ddedc0b6f18620], a0);
        }

        jdouble DoubleRangeDocValuesField::getMin(jint a0) const
        {
          return env->callDoubleMethod(this$, mids$[mid_getMin_f3ddedc0b6f18620], a0);
        }

        ::org::apache::lucene::search::Query DoubleRangeDocValuesField::newSlowIntersectsQuery(const ::java::lang::String & a0, const JArray< jdouble > & a1, const JArray< jdouble > & a2)
        {
          jclass cls = env->getClass(initializeClass);
          return ::org::apache::lucene::search::Query(env->callStaticObjectMethod(cls, mids$[mid_newSlowIntersectsQuery_ac4cb7e9a584976e], a0.this$, a1.this$, a2.this$));
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace document {
        static PyObject *t_DoubleRangeDocValuesField_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_DoubleRangeDocValuesField_instance_(PyTypeObject *type, PyObject *arg);
        static int t_DoubleRangeDocValuesField_init_(t_DoubleRangeDocValuesField *self, PyObject *args, PyObject *kwds);
        static PyObject *t_DoubleRangeDocValuesField_getMax(t_DoubleRangeDocValuesField *self, PyObject *arg);
        static PyObject *t_DoubleRangeDocValuesField_getMin(t_DoubleRangeDocValuesField *self, PyObject *arg);
        static PyObject *t_DoubleRangeDocValuesField_newSlowIntersectsQuery(PyTypeObject *type, PyObject *args);

        static PyMethodDef t_DoubleRangeDocValuesField__methods_[] = {
          DECLARE_METHOD(t_DoubleRangeDocValuesField, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_DoubleRangeDocValuesField, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_DoubleRangeDocValuesField, getMax, METH_O),
          DECLARE_METHOD(t_DoubleRangeDocValuesField, getMin, METH_O),
          DECLARE_METHOD(t_DoubleRangeDocValuesField, newSlowIntersectsQuery, METH_VARARGS | METH_CLASS),
          { NULL, NULL, 0, NULL }
        };

        static PyType_Slot PY_TYPE_SLOTS(DoubleRangeDocValuesField)[] = {
          { Py_tp_methods, t_DoubleRangeDocValuesField__methods_ },
          { Py_tp_init, (void *) t_DoubleRangeDocValuesField_init_ },
          { 0, NULL }
        };

        static PyType_Def *PY_TYPE_BASES(DoubleRangeDocValuesField)[] = {
          &PY_TYPE_DEF(::org::apache::lucene::document::BinaryRangeDocValuesField),
          NULL
        };

        DEFINE_TYPE(DoubleRangeDocValuesField, t_DoubleRangeDocValuesField, DoubleRangeDocValuesField);

        void t_DoubleRangeDocValuesField::install(PyObject *module)
        {
          installType(&PY_TYPE(DoubleRangeDocValuesField), &PY_TYPE_DEF(DoubleRangeDocValuesField), module, "DoubleRangeDocValuesField", 0);
        }

        void t_DoubleRangeDocValuesField::initialize(PyObject *module)
        {
          PyObject_SetAttrString((PyObject *) PY_TYPE(DoubleRangeDocValuesField), "class_", make_descriptor(DoubleRangeDocValuesField::initializeClass, 1));
          PyObject_SetAttrString((PyObject *) PY_TYPE(DoubleRangeDocValuesField), "wrapfn_", make_descriptor(t_DoubleRangeDocValuesField::wrap_jobject));
          PyObject_SetAttrString((PyObject *) PY_TYPE(DoubleRangeDocValuesField), "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_DoubleRangeDocValuesField_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, DoubleRangeDocValuesField::initializeClass, 1)))
            return NULL;
          return t_DoubleRangeDocValuesField::wrap_Object(DoubleRangeDocValuesField(((t_DoubleRangeDocValuesField *) arg)->object.this$));
        }
        static PyObject *t_DoubleRangeDocValuesField_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, DoubleRangeDocValuesField::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_DoubleRangeDocValuesField_init_(t_DoubleRangeDocValuesField *self, PyObject *args, PyObject *kwds)
        {
          ::java::lang::String a0((jobject) NULL);
          JArray< jdouble > a1((jobject) NULL);
          JArray< jdouble > a2((jobject) NULL);
          DoubleRangeDocValuesField object((jobject) NULL);

          if (!parseArgs(args, "s[D[D", &a0, &a1, &a2))
          {
            INT_CALL(object = DoubleRangeDocValuesField(a0, a1, a2));
            self->object = object;
          }
          else
          {
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }

        static PyObject *t_DoubleRangeDocValuesField_getMax(t_DoubleRangeDocValuesField *self, PyObject *arg)
        {
          jint a0;
          jdouble result;

          if (!parseArg(arg, "I", &a0))
          {
            OBJ_CALL(result = self->object.getMax(a0));
            return PyFloat_FromDouble((double) result);
          }

          PyErr_SetArgsError((PyObject *) self, "getMax", arg);
          return NULL;
        }

        static PyObject *t_DoubleRangeDocValuesField_getMin(t_DoubleRangeDocValuesField *self, PyObject *arg)
        {
          jint a0;
          jdouble result;

          if (!parseArg(arg, "I", &a0))
          {
            OBJ_CALL(result = self->object.getMin(a0));
            return PyFloat_FromDouble((double) result);
          }

          PyErr_SetArgsError((PyObject *) self, "getMin", arg);
          return NULL;
        }

        static PyObject *t_DoubleRangeDocValuesField_newSlowIntersectsQuery(PyTypeObject *type, PyObject *args)
        {
          ::java::lang::String a0((jobject) NULL);
          JArray< jdouble > a1((jobject) NULL);
          JArray< jdouble > a2((jobject) NULL);
          ::org::apache::lucene::search::Query result((jobject) NULL);

          if (!parseArgs(args, "s[D[D", &a0, &a1, &a2))
          {
            OBJ_CALL(result = ::org::apache::lucene::document::DoubleRangeDocValuesField::newSlowIntersectsQuery(a0, a1, a2));
            return ::org::apache::lucene::search::t_Query::wrap_Object(result);
          }

          PyErr_SetArgsError(type, "newSlowIntersectsQuery", args);
          return NULL;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/index/IndexCommit.h"
#include "java/util/Map.h"
#include "java/util/Collection.h"
#include "java/lang/Comparable.h"
#include "org/apache/lucene/index/IndexCommit.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/store/Directory.h"
#include "java/lang/String.h"
#include "java/io/IOException.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {

        ::java::lang::Class *IndexCommit::class$ = NULL;
        jmethodID *IndexCommit::mids$ = NULL;
        bool IndexCommit::live$ = false;

        jclass IndexCommit::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/index/IndexCommit");

            mids$ = new jmethodID[max_mid];
            mids$[mid_compareTo_72e6178fc455abbc] = env->getMethodID(cls, "compareTo", "(Lorg/apache/lucene/index/IndexCommit;)I");
            mids$[mid_delete_f2cc1bce94666404] = env->getMethodID(cls, "delete", "()V");
            mids$[mid_equals_8b72f2dcdde6fd1d] = env->getMethodID(cls, "equals", "(Ljava/lang/Object;)Z");
            mids$[mid_getDirectory_7452b086ce8219b2] = env->getMethodID(cls, "getDirectory", "()Lorg/apache/lucene/store/Directory;");
            mids$[mid_getFileNames_d4dfbf7a26ff41df] = env->getMethodID(cls, "getFileNames", "()Ljava/util/Collection;");
            mids$[mid_getGeneration_2e5ae9edcb9b072f] = env->getMethodID(cls, "getGeneration", "()J");
            mids$[mid_getSegmentCount_9972fcc56b44e79d] = env->getMethodID(cls, "getSegmentCount", "()I");
            mids$[mid_getSegmentsFileName_db9b55ba01e03e4b] = env->getMethodID(cls, "getSegmentsFileName", "()Ljava/lang/String;");
            mids$[mid_getUserData_1c3426541413a55d] = env->getMethodID(cls, "getUserData", "()Ljava/util/Map;");
            mids$[mid_hashCode_9972fcc56b44e79d] = env->getMethodID(cls, "hashCode", "()I");
            mids$[mid_isDeleted_8454bd5aa23fd11e] = env->getMethodID(cls, "isDeleted", "()Z");

            class$ = new ::java::lang::Class(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        jint IndexCommit::compareTo(const IndexCommit & a0) const
        {
          return env->callIntMethod(this$, mids$[mid_compareTo_72e6178fc455abbc], a0.this$);
        }

        void IndexCommit::delete$() const
        {
          env->callVoidMethod(this$, mids$[mid_delete_f2cc1bce94666404]);
        }

        jboolean IndexCommit::equals(const ::java::lang::Object & a0) const
        {
          return env->callBooleanMethod(this$, mids$[mid_equals_8b72f2dcdde6fd1d], a0.this$);
        }

        ::org::apache::lucene::store::Directory IndexCommit::getDirectory() const
        {
          return ::org::apache::lucene::store::Directory(env->callObjectMethod(this$, mids$[mid_getDirectory_7452b086ce8219b2]));
        }

        ::java::util::Collection IndexCommit::getFileNames() const
        {
          return ::java::util::Collection(env->callObjectMethod(this$, mids$[mid_getFileNames_d4dfbf7a26ff41df]));
        }

        jlong IndexCommit::getGeneration() const
        {
          return env->callLongMethod(this$, mids$[mid_getGeneration_2e5ae9edcb9b072f]);
        }

        jint IndexCommit::getSegmentCount() const
        {
          return env->callIntMethod(this$, mids$[mid_getSegmentCount_9972fcc56b44e79d]);
        }

        ::java::lang::String IndexCommit::getSegmentsFileName() const
        {
          return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_getSegmentsFileName_db9b55ba01e03e4b]));
        }

        ::java::util::Map IndexCommit::getUserData() const
        {
          return ::java::util::Map(env->callObjectMethod(this$, mids$[mid_getUserData_1c3426541413a55d]));
        }

        jint IndexCommit::hashCode() const
        {
          return env->callIntMethod(this$, mids$[mid_hashCode_9972fcc56b44e79d]);
        }

        jboolean IndexCommit::isDeleted() const
        {
          return env->callBooleanMethod(this$, mids$[mid_isDeleted_8454bd5aa23fd11e]);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {
        static PyObject *t_IndexCommit_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_IndexCommit_instance_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_IndexCommit_compareTo(t_IndexCommit *self, PyObject *arg);
        static PyObject *t_IndexCommit_delete(t_IndexCommit *self);
        static PyObject *t_IndexCommit_equals(t_IndexCommit *self, PyObject *args);
        static PyObject *t_IndexCommit_getDirectory(t_IndexCommit *self);
        static PyObject *t_IndexCommit_getFileNames(t_IndexCommit *self);
        static PyObject *t_IndexCommit_getGeneration(t_IndexCommit *self);
        static PyObject *t_IndexCommit_getSegmentCount(t_IndexCommit *self);
        static PyObject *t_IndexCommit_getSegmentsFileName(t_IndexCommit *self);
        static PyObject *t_IndexCommit_getUserData(t_IndexCommit *self);
        static PyObject *t_IndexCommit_hashCode(t_IndexCommit *self, PyObject *args);
        static PyObject *t_IndexCommit_isDeleted(t_IndexCommit *self);
        static PyObject *t_IndexCommit_get__deleted(t_IndexCommit *self, void *data);
        static PyObject *t_IndexCommit_get__directory(t_IndexCommit *self, void *data);
        static PyObject *t_IndexCommit_get__fileNames(t_IndexCommit *self, void *data);
        static PyObject *t_IndexCommit_get__generation(t_IndexCommit *self, void *data);
        static PyObject *t_IndexCommit_get__segmentCount(t_IndexCommit *self, void *data);
        static PyObject *t_IndexCommit_get__segmentsFileName(t_IndexCommit *self, void *data);
        static PyObject *t_IndexCommit_get__userData(t_IndexCommit *self, void *data);
        static PyGetSetDef t_IndexCommit__fields_[] = {
          DECLARE_GET_FIELD(t_IndexCommit, deleted),
          DECLARE_GET_FIELD(t_IndexCommit, directory),
          DECLARE_GET_FIELD(t_IndexCommit, fileNames),
          DECLARE_GET_FIELD(t_IndexCommit, generation),
          DECLARE_GET_FIELD(t_IndexCommit, segmentCount),
          DECLARE_GET_FIELD(t_IndexCommit, segmentsFileName),
          DECLARE_GET_FIELD(t_IndexCommit, userData),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_IndexCommit__methods_[] = {
          DECLARE_METHOD(t_IndexCommit, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_IndexCommit, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_IndexCommit, compareTo, METH_O),
          DECLARE_METHOD(t_IndexCommit, delete, METH_NOARGS),
          DECLARE_METHOD(t_IndexCommit, equals, METH_VARARGS),
          DECLARE_METHOD(t_IndexCommit, getDirectory, METH_NOARGS),
          DECLARE_METHOD(t_IndexCommit, getFileNames, METH_NOARGS),
          DECLARE_METHOD(t_IndexCommit, getGeneration, METH_NOARGS),
          DECLARE_METHOD(t_IndexCommit, getSegmentCount, METH_NOARGS),
          DECLARE_METHOD(t_IndexCommit, getSegmentsFileName, METH_NOARGS),
          DECLARE_METHOD(t_IndexCommit, getUserData, METH_NOARGS),
          DECLARE_METHOD(t_IndexCommit, hashCode, METH_VARARGS),
          DECLARE_METHOD(t_IndexCommit, isDeleted, METH_NOARGS),
          { NULL, NULL, 0, NULL }
        };

        static PyType_Slot PY_TYPE_SLOTS(IndexCommit)[] = {
          { Py_tp_methods, t_IndexCommit__methods_ },
          { Py_tp_init, (void *) abstract_init },
          { Py_tp_getset, t_IndexCommit__fields_ },
          { 0, NULL }
        };

        static PyType_Def *PY_TYPE_BASES(IndexCommit)[] = {
          &PY_TYPE_DEF(::java::lang::Object),
          NULL
        };

        DEFINE_TYPE(IndexCommit, t_IndexCommit, IndexCommit);

        void t_IndexCommit::install(PyObject *module)
        {
          installType(&PY_TYPE(IndexCommit), &PY_TYPE_DEF(IndexCommit), module, "IndexCommit", 0);
        }

        void t_IndexCommit::initialize(PyObject *module)
        {
          PyObject_SetAttrString((PyObject *) PY_TYPE(IndexCommit), "class_", make_descriptor(IndexCommit::initializeClass, 1));
          PyObject_SetAttrString((PyObject *) PY_TYPE(IndexCommit), "wrapfn_", make_descriptor(t_IndexCommit::wrap_jobject));
          PyObject_SetAttrString((PyObject *) PY_TYPE(IndexCommit), "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_IndexCommit_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, IndexCommit::initializeClass, 1)))
            return NULL;
          return t_IndexCommit::wrap_Object(IndexCommit(((t_IndexCommit *) arg)->object.this$));
        }
        static PyObject *t_IndexCommit_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, IndexCommit::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static PyObject *t_IndexCommit_compareTo(t_IndexCommit *self, PyObject *arg)
        {
          IndexCommit a0((jobject) NULL);
          jint result;

          if (!parseArg(arg, "k", IndexCommit::initializeClass, &a0))
          {
            OBJ_CALL(result = self->object.compareTo(a0));
            return PyLong_FromLong((long) result);
          }

          PyErr_SetArgsError((PyObject *) self, "compareTo", arg);
          return NULL;
        }

        static PyObject *t_IndexCommit_delete(t_IndexCommit *self)
        {
          OBJ_CALL(self->object.delete$());
          Py_RETURN_NONE;
        }

        static PyObject *t_IndexCommit_equals(t_IndexCommit *self, PyObject *args)
        {
          ::java::lang::Object a0((jobject) NULL);
          jboolean result;

          if (!parseArgs(args, "o", &a0))
          {
            OBJ_CALL(result = self->object.equals(a0));
            Py_RETURN_BOOL(result);
          }

          return callSuper(PY_TYPE(IndexCommit), (PyObject *) self, "equals", args, 2);
        }

        static PyObject *t_IndexCommit_getDirectory(t_IndexCommit *self)
        {
          ::org::apache::lucene::store::Directory result((jobject) NULL);
          OBJ_CALL(result = self->object.getDirectory());
          return ::org::apache::lucene::store::t_Directory::wrap_Object(result);
        }

        static PyObject *t_IndexCommit_getFileNames(t_IndexCommit *self)
        {
          ::java::util::Collection result((jobject) NULL);
          OBJ_CALL(result = self->object.getFileNames());
          return ::java::util::t_Collection::wrap_Object(result, ::java::lang::PY_TYPE(String));
        }

        static PyObject *t_IndexCommit_getGeneration(t_IndexCommit *self)
        {
          jlong result;
          OBJ_CALL(result = self->object.getGeneration());
          return PyLong_FromLongLong((PY_LONG_LONG) result);
        }

        static PyObject *t_IndexCommit_getSegmentCount(t_IndexCommit *self)
        {
          jint result;
          OBJ_CALL(result = self->object.getSegmentCount());
          return PyLong_FromLong((long) result);
        }

        static PyObject *t_IndexCommit_getSegmentsFileName(t_IndexCommit *self)
        {
          ::java::lang::String result((jobject) NULL);
          OBJ_CALL(result = self->object.getSegmentsFileName());
          return j2p(result);
        }

        static PyObject *t_IndexCommit_getUserData(t_IndexCommit *self)
        {
          ::java::util::Map result((jobject) NULL);
          OBJ_CALL(result = self->object.getUserData());
          return ::java::util::t_Map::wrap_Object(result, ::java::lang::PY_TYPE(String), ::java::lang::PY_TYPE(String));
        }

        static PyObject *t_IndexCommit_hashCode(t_IndexCommit *self, PyObject *args)
        {
          jint result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.hashCode());
            return PyLong_FromLong((long) result);
          }

          return callSuper(PY_TYPE(IndexCommit), (PyObject *) self, "hashCode", args, 2);
        }

        static PyObject *t_IndexCommit_isDeleted(t_IndexCommit *self)
        {
          jboolean result;
          OBJ_CALL(result = self->object.isDeleted());
          Py_RETURN_BOOL(result);
        }

        static PyObject *t_IndexCommit_get__deleted(t_IndexCommit *self, void *data)
        {
          jboolean value;
          OBJ_CALL(value = self->object.isDeleted());
          Py_RETURN_BOOL(value);
        }

        static PyObject *t_IndexCommit_get__directory(t_IndexCommit *self, void *data)
        {
          ::org::apache::lucene::store::Directory value((jobject) NULL);
          OBJ_CALL(value = self->object.getDirectory());
          return ::org::apache::lucene::store::t_Directory::wrap_Object(value);
        }

        static PyObject *t_IndexCommit_get__fileNames(t_IndexCommit *self, void *data)
        {
          ::java::util::Collection value((jobject) NULL);
          OBJ_CALL(value = self->object.getFileNames());
          return ::java::util::t_Collection::wrap_Object(value);
        }

        static PyObject *t_IndexCommit_get__generation(t_IndexCommit *self, void *data)
        {
          jlong value;
          OBJ_CALL(value = self->object.getGeneration());
          return PyLong_FromLongLong((PY_LONG_LONG) value);
        }

        static PyObject *t_IndexCommit_get__segmentCount(t_IndexCommit *self, void *data)
        {
          jint value;
          OBJ_CALL(value = self->object.getSegmentCount());
          return PyLong_FromLong((long) value);
        }

        static PyObject *t_IndexCommit_get__segmentsFileName(t_IndexCommit *self, void *data)
        {
          ::java::lang::String value((jobject) NULL);
          OBJ_CALL(value = self->object.getSegmentsFileName());
          return j2p(value);
        }

        static PyObject *t_IndexCommit_get__userData(t_IndexCommit *self, void *data)
        {
          ::java::util::Map value((jobject) NULL);
          OBJ_CALL(value = self->object.getUserData());
          return ::java::util::t_Map::wrap_Object(value);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/expressions/SimpleBindings.h"
#include "org/apache/lucene/search/SortField.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/search/DoubleValuesSource.h"
#include "java/lang/String.h"
#include "org/apache/lucene/expressions/Expression.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace expressions {

        ::java::lang::Class *SimpleBindings::class$ = NULL;
        jmethodID *SimpleBindings::mids$ = NULL;
        bool SimpleBindings::live$ = false;

        jclass SimpleBindings::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/expressions/SimpleBindings");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_f2cc1bce94666404] = env->getMethodID(cls, "<init>", "()V");
            mids$[mid_add_ac50e9be1b02abdc] = env->getMethodID(cls, "add", "(Lorg/apache/lucene/search/SortField;)V");
            mids$[mid_add_22c45ea33f64e70d] = env->getMethodID(cls, "add", "(Ljava/lang/String;Lorg/apache/lucene/expressions/Expression;)V");
            mids$[mid_add_ab6036e9ef85ff14] = env->getMethodID(cls, "add", "(Ljava/lang/String;Lorg/apache/lucene/search/DoubleValuesSource;)V");
            mids$[mid_getDoubleValuesSource_ff23b83f44e75cdf] = env->getMethodID(cls, "getDoubleValuesSource", "(Ljava/lang/String;)Lorg/apache/lucene/search/DoubleValuesSource;");
            mids$[mid_validate_f2cc1bce94666404] = env->getMethodID(cls, "validate", "()V");

            class$ = new ::java::lang::Class(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        SimpleBindings::SimpleBindings() : ::org::apache::lucene::expressions::Bindings(env->newObject(initializeClass, &mids$, mid_init$_f2cc1bce94666404)) {}

        void SimpleBindings::add(const ::org::apache::lucene::search::SortField & a0) const
        {
          env->callVoidMethod(this$, mids$[mid_add_ac50e9be1b02abdc], a0.this$);
        }

        void SimpleBindings::add(const ::java::lang::String & a0, const ::org::apache::lucene::expressions::Expression & a1) const
        {
          env->callVoidMethod(this$, mids$[mid_add_22c45ea33f64e70d], a0.this$, a1.this$);
        }

        void SimpleBindings::add(const ::java::lang::String & a0, const ::org::apache::lucene::search::DoubleValuesSource & a1) const
        {
          env->callVoidMethod(this$, mids$[mid_add_ab6036e9ef85ff14], a0.this$, a1.this$);
        }

        ::org::apache::lucene::search::DoubleValuesSource SimpleBindings::getDoubleValuesSource(const ::java::lang::String & a0) const
        {
          return ::org::apache::lucene::search::DoubleValuesSource(env->callObjectMethod(this$, mids$[mid_getDoubleValuesSource_ff23b83f44e75cdf], a0.this$));
        }

        void SimpleBindings::validate() const
        {
          env->callVoidMethod(this$, mids$[mid_validate_f2cc1bce94666404]);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace expressions {
        static PyObject *t_SimpleBindings_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_SimpleBindings_instance_(PyTypeObject *type, PyObject *arg);
        static int t_SimpleBindings_init_(t_SimpleBindings *self, PyObject *args, PyObject *kwds);
        static PyObject *t_SimpleBindings_add(t_SimpleBindings *self, PyObject *args);
        static PyObject *t_SimpleBindings_getDoubleValuesSource(t_SimpleBindings *self, PyObject *args);
        static PyObject *t_SimpleBindings_validate(t_SimpleBindings *self);

        static PyMethodDef t_SimpleBindings__methods_[] = {
          DECLARE_METHOD(t_SimpleBindings, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_SimpleBindings, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_SimpleBindings, add, METH_VARARGS),
          DECLARE_METHOD(t_SimpleBindings, getDoubleValuesSource, METH_VARARGS),
          DECLARE_METHOD(t_SimpleBindings, validate, METH_NOARGS),
          { NULL, NULL, 0, NULL }
        };

        static PyType_Slot PY_TYPE_SLOTS(SimpleBindings)[] = {
          { Py_tp_methods, t_SimpleBindings__methods_ },
          { Py_tp_init, (void *) t_SimpleBindings_init_ },
          { 0, NULL }
        };

        static PyType_Def *PY_TYPE_BASES(SimpleBindings)[] = {
          &PY_TYPE_DEF(::org::apache::lucene::expressions::Bindings),
          NULL
        };

        DEFINE_TYPE(SimpleBindings, t_SimpleBindings, SimpleBindings);

        void t_SimpleBindings::install(PyObject *module)
        {
          installType(&PY_TYPE(SimpleBindings), &PY_TYPE_DEF(SimpleBindings), module, "SimpleBindings", 0);
        }

        void t_SimpleBindings::initialize(PyObject *module)
        {
          PyObject_SetAttrString((PyObject *) PY_TYPE(SimpleBindings), "class_", make_descriptor(SimpleBindings::initializeClass, 1));
          PyObject_SetAttrString((PyObject *) PY_TYPE(SimpleBindings), "wrapfn_", make_descriptor(t_SimpleBindings::wrap_jobject));
          PyObject_SetAttrString((PyObject *) PY_TYPE(SimpleBindings), "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_SimpleBindings_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, SimpleBindings::initializeClass, 1)))
            return NULL;
          return t_SimpleBindings::wrap_Object(SimpleBindings(((t_SimpleBindings *) arg)->object.this$));
        }
        static PyObject *t_SimpleBindings_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, SimpleBindings::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_SimpleBindings_init_(t_SimpleBindings *self, PyObject *args, PyObject *kwds)
        {
          SimpleBindings object((jobject) NULL);

          INT_CALL(object = SimpleBindings());
          self->object = object;

          return 0;
        }

        static PyObject *t_SimpleBindings_add(t_SimpleBindings *self, PyObject *args)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 1:
            {
              ::org::apache::lucene::search::SortField a0((jobject) NULL);

              if (!parseArgs(args, "k", ::org::apache::lucene::search::SortField::initializeClass, &a0))
              {
                OBJ_CALL(self->object.add(a0));
                Py_RETURN_NONE;
              }
            }
            break;
           case 2:
            {
              ::java::lang::String a0((jobject) NULL);
              ::org::apache::lucene::expressions::Expression a1((jobject) NULL);

              if (!parseArgs(args, "sk", ::org::apache::lucene::expressions::Expression::initializeClass, &a0, &a1))
              {
                OBJ_CALL(self->object.add(a0, a1));
                Py_RETURN_NONE;
              }
            }
            {
              ::java::lang::String a0((jobject) NULL);
              ::org::apache::lucene::search::DoubleValuesSource a1((jobject) NULL);

              if (!parseArgs(args, "sk", ::org::apache::lucene::search::DoubleValuesSource::initializeClass, &a0, &a1))
              {
                OBJ_CALL(self->object.add(a0, a1));
                Py_RETURN_NONE;
              }
            }
          }

          PyErr_SetArgsError((PyObject *) self, "add", args);
          return NULL;
        }

        static PyObject *t_SimpleBindings_getDoubleValuesSource(t_SimpleBindings *self, PyObject *args)
        {
          ::java::lang::String a0((jobject) NULL);
          ::org::apache::lucene::search::DoubleValuesSource result((jobject) NULL);

          if (!parseArgs(args, "s", &a0))
          {
            OBJ_CALL(result = self->object.getDoubleValuesSource(a0));
            return ::org::apache::lucene::search::t_DoubleValuesSource::wrap_Object(result);
          }

          return callSuper(PY_TYPE(SimpleBindings), (PyObject *) self, "getDoubleValuesSource", args, 2);
        }

        static PyObject *t_SimpleBindings_validate(t_SimpleBindings *self)
        {
          OBJ_CALL(self->object.validate());
          Py_RETURN_NONE;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/codecs/lucene70/Lucene70NormsFormat.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/index/SegmentReadState.h"
#include "org/apache/lucene/codecs/NormsProducer.h"
#include "org/apache/lucene/codecs/NormsConsumer.h"
#include "org/apache/lucene/index/SegmentWriteState.h"
#include "java/io/IOException.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace codecs {
        namespace lucene70 {

          ::java::lang::Class *Lucene70NormsFormat::class$ = NULL;
          jmethodID *Lucene70NormsFormat::mids$ = NULL;
          bool Lucene70NormsFormat::live$ = false;

          jclass Lucene70NormsFormat::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/codecs/lucene70/Lucene70NormsFormat");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_f2cc1bce94666404] = env->getMethodID(cls, "<init>", "()V");
              mids$[mid_normsConsumer_129866fdd9f40fd4] = env->getMethodID(cls, "normsConsumer", "(Lorg/apache/lucene/index/SegmentWriteState;)Lorg/apache/lucene/codecs/NormsConsumer;");
              mids$[mid_normsProducer_c7aca038fcf2bba1] = env->getMethodID(cls, "normsProducer", "(Lorg/apache/lucene/index/SegmentReadState;)Lorg/apache/lucene/codecs/NormsProducer;");

              class$ = new ::java::lang::Class(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          Lucene70NormsFormat::Lucene70NormsFormat() : ::org::apache::lucene::codecs::NormsFormat(env->newObject(initializeClass, &mids$, mid_init$_f2cc1bce94666404)) {}

          ::org::apache::lucene::codecs::NormsConsumer Lucene70NormsFormat::normsConsumer(const ::org::apache::lucene::index::SegmentWriteState & a0) const
          {
            return ::org::apache::lucene::codecs::NormsConsumer(env->callObjectMethod(this$, mids$[mid_normsConsumer_129866fdd9f40fd4], a0.this$));
          }

          ::org::apache::lucene::codecs::NormsProducer Lucene70NormsFormat::normsProducer(const ::org::apache::lucene::index::SegmentReadState & a0) const
          {
            return ::org::apache::lucene::codecs::NormsProducer(env->callObjectMethod(this$, mids$[mid_normsProducer_c7aca038fcf2bba1], a0.this$));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace codecs {
        namespace lucene70 {
          static PyObject *t_Lucene70NormsFormat_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_Lucene70NormsFormat_instance_(PyTypeObject *type, PyObject *arg);
          static int t_Lucene70NormsFormat_init_(t_Lucene70NormsFormat *self, PyObject *args, PyObject *kwds);
          static PyObject *t_Lucene70NormsFormat_normsConsumer(t_Lucene70NormsFormat *self, PyObject *args);
          static PyObject *t_Lucene70NormsFormat_normsProducer(t_Lucene70NormsFormat *self, PyObject *args);

          static PyMethodDef t_Lucene70NormsFormat__methods_[] = {
            DECLARE_METHOD(t_Lucene70NormsFormat, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_Lucene70NormsFormat, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_Lucene70NormsFormat, normsConsumer, METH_VARARGS),
            DECLARE_METHOD(t_Lucene70NormsFormat, normsProducer, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          static PyType_Slot PY_TYPE_SLOTS(Lucene70NormsFormat)[] = {
            { Py_tp_methods, t_Lucene70NormsFormat__methods_ },
            { Py_tp_init, (void *) t_Lucene70NormsFormat_init_ },
            { 0, NULL }
          };

          static PyType_Def *PY_TYPE_BASES(Lucene70NormsFormat)[] = {
            &PY_TYPE_DEF(::org::apache::lucene::codecs::NormsFormat),
            NULL
          };

          DEFINE_TYPE(Lucene70NormsFormat, t_Lucene70NormsFormat, Lucene70NormsFormat);

          void t_Lucene70NormsFormat::install(PyObject *module)
          {
            installType(&PY_TYPE(Lucene70NormsFormat), &PY_TYPE_DEF(Lucene70NormsFormat), module, "Lucene70NormsFormat", 0);
          }

          void t_Lucene70NormsFormat::initialize(PyObject *module)
          {
            PyObject_SetAttrString((PyObject *) PY_TYPE(Lucene70NormsFormat), "class_", make_descriptor(Lucene70NormsFormat::initializeClass, 1));
            PyObject_SetAttrString((PyObject *) PY_TYPE(Lucene70NormsFormat), "wrapfn_", make_descriptor(t_Lucene70NormsFormat::wrap_jobject));
            PyObject_SetAttrString((PyObject *) PY_TYPE(Lucene70NormsFormat), "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_Lucene70NormsFormat_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, Lucene70NormsFormat::initializeClass, 1)))
              return NULL;
            return t_Lucene70NormsFormat::wrap_Object(Lucene70NormsFormat(((t_Lucene70NormsFormat *) arg)->object.this$));
          }
          static PyObject *t_Lucene70NormsFormat_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, Lucene70NormsFormat::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_Lucene70NormsFormat_init_(t_Lucene70NormsFormat *self, PyObject *args, PyObject *kwds)
          {
            Lucene70NormsFormat object((jobject) NULL);

            INT_CALL(object = Lucene70NormsFormat());
            self->object = object;

            return 0;
          }

          static PyObject *t_Lucene70NormsFormat_normsConsumer(t_Lucene70NormsFormat *self, PyObject *args)
          {
            ::org::apache::lucene::index::SegmentWriteState a0((jobject) NULL);
            ::org::apache::lucene::codecs::NormsConsumer result((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::index::SegmentWriteState::initializeClass, &a0))
            {
              OBJ_CALL(result = self->object.normsConsumer(a0));
              return ::org::apache::lucene::codecs::t_NormsConsumer::wrap_Object(result);
            }

            return callSuper(PY_TYPE(Lucene70NormsFormat), (PyObject *) self, "normsConsumer", args, 2);
          }

          static PyObject *t_Lucene70NormsFormat_normsProducer(t_Lucene70NormsFormat *self, PyObject *args)
          {
            ::org::apache::lucene::index::SegmentReadState a0((jobject) NULL);
            ::org::apache::lucene::codecs::NormsProducer result((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::index::SegmentReadState::initializeClass, &a0))
            {
              OBJ_CALL(result = self->object.normsProducer(a0));
              return ::org::apache::lucene::codecs::t_NormsProducer::wrap_Object(result);
            }

            return callSuper(PY_TYPE(Lucene70NormsFormat), (PyObject *) self, "normsProducer", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/facet/sortedset/ConcurrentSortedSetDocValuesFacetCounts.h"
#include "org/apache/lucene/facet/FacetResult.h"
#include "java/lang/Number.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/facet/FacetsCollector.h"
#include "java/util/concurrent/ExecutorService.h"
#include "java/lang/String.h"
#include "java/lang/InterruptedException.h"
#include "java/io/IOException.h"
#include "java/util/List.h"
#include "org/apache/lucene/facet/sortedset/SortedSetDocValuesReaderState.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace facet {
        namespace sortedset {

          ::java::lang::Class *ConcurrentSortedSetDocValuesFacetCounts::class$ = NULL;
          jmethodID *ConcurrentSortedSetDocValuesFacetCounts::mids$ = NULL;
          bool ConcurrentSortedSetDocValuesFacetCounts::live$ = false;

          jclass ConcurrentSortedSetDocValuesFacetCounts::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/facet/sortedset/ConcurrentSortedSetDocValuesFacetCounts");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_e2d4457686d05726] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/facet/sortedset/SortedSetDocValuesReaderState;Ljava/util/concurrent/ExecutorService;)V");
              mids$[mid_init$_82a44db4bf273579] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/facet/sortedset/SortedSetDocValuesReaderState;Lorg/apache/lucene/facet/FacetsCollector;Ljava/util/concurrent/ExecutorService;)V");
              mids$[mid_getAllDims_d82aee015ceb4d93] = env->getMethodID(cls, "getAllDims", "(I)Ljava/util/List;");
              mids$[mid_getSpecificValue_aaf99af6028dc803] = env->getMethodID(cls, "getSpecificValue", "(Ljava/lang/String;[Ljava/lang/String;)Ljava/lang/Number;");
              mids$[mid_getTopChildren_8be156db8a3c742c] = env->getMethodID(cls, "getTopChildren", "(ILjava/lang/String;[Ljava/lang/String;)Lorg/apache/lucene/facet/FacetResult;");

              class$ = new ::java::lang::Class(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          ConcurrentSortedSetDocValuesFacetCounts::ConcurrentSortedSetDocValuesFacetCounts(const ::org::apache::lucene::facet::sortedset::SortedSetDocValuesReaderState & a0, const ::java::util::concurrent::ExecutorService & a1) : ::org::apache::lucene::facet::Facets(env->newObject(initializeClass, &mids$, mid_init$_e2d4457686d05726, a0.this$, a1.this$)) {}

          ConcurrentSortedSetDocValuesFacetCounts::ConcurrentSortedSetDocValuesFacetCounts(const ::org::apache::lucene::facet::sortedset::SortedSetDocValuesReaderState & a0, const ::org::apache::lucene::facet::FacetsCollector & a1, const ::java::util::concurrent::ExecutorService & a2) : ::org::apache::lucene::facet::Facets(env->newObject(initializeClass, &mids$, mid_init$_82a44db4bf273579, a0.this$, a1.this$, a2.this$)) {}

          ::java::util::List ConcurrentSortedSetDocValuesFacetCounts::getAllDims(jint a0) const
          {
            return ::java::util::List(env->callObjectMethod(this$, mids$[mid_getAllDims_d82aee015ceb4d93], a0));
          }

          ::java::lang::Number ConcurrentSortedSetDocValuesFacetCounts::getSpecificValue(const ::java::lang::String & a0, const JArray< ::java::lang::String > & a1) const
          {
            return ::java::lang::Number(env->callObjectMethod(this$, mids$[mid_getSpecificValue_aaf99af6028dc803], a0.this$, a1.this$));
          }

          ::org::apache::lucene::facet::FacetResult ConcurrentSortedSetDocValuesFacetCounts::getTopChildren(jint a0, const ::java::lang::String & a1, const JArray< ::java::lang::String > & a2) const
          {
            return ::org::apache::lucene::facet::FacetResult(env->callObjectMethod(this$, mids$[mid_getTopChildren_8be156db8a3c742c], a0, a1.this$, a2.this$));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace facet {
        namespace sortedset {
          static PyObject *t_ConcurrentSortedSetDocValuesFacetCounts_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_ConcurrentSortedSetDocValuesFacetCounts_instance_(PyTypeObject *type, PyObject *arg);
          static int t_ConcurrentSortedSetDocValuesFacetCounts_init_(t_ConcurrentSortedSetDocValuesFacetCounts *self, PyObject *args, PyObject *kwds);
          static PyObject *t_ConcurrentSortedSetDocValuesFacetCounts_getAllDims(t_ConcurrentSortedSetDocValuesFacetCounts *self, PyObject *args);
          static PyObject *t_ConcurrentSortedSetDocValuesFacetCounts_getSpecificValue(t_ConcurrentSortedSetDocValuesFacetCounts *self, PyObject *args);
          static PyObject *t_ConcurrentSortedSetDocValuesFacetCounts_getTopChildren(t_ConcurrentSortedSetDocValuesFacetCounts *self, PyObject *args);

          static PyMethodDef t_ConcurrentSortedSetDocValuesFacetCounts__methods_[] = {
            DECLARE_METHOD(t_ConcurrentSortedSetDocValuesFacetCounts, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_ConcurrentSortedSetDocValuesFacetCounts, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_ConcurrentSortedSetDocValuesFacetCounts, getAllDims, METH_VARARGS),
            DECLARE_METHOD(t_ConcurrentSortedSetDocValuesFacetCounts, getSpecificValue, METH_VARARGS),
            DECLARE_METHOD(t_ConcurrentSortedSetDocValuesFacetCounts, getTopChildren, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          static PyType_Slot PY_TYPE_SLOTS(ConcurrentSortedSetDocValuesFacetCounts)[] = {
            { Py_tp_methods, t_ConcurrentSortedSetDocValuesFacetCounts__methods_ },
            { Py_tp_init, (void *) t_ConcurrentSortedSetDocValuesFacetCounts_init_ },
            { 0, NULL }
          };

          static PyType_Def *PY_TYPE_BASES(ConcurrentSortedSetDocValuesFacetCounts)[] = {
            &PY_TYPE_DEF(::org::apache::lucene::facet::Facets),
            NULL
          };

          DEFINE_TYPE(ConcurrentSortedSetDocValuesFacetCounts, t_ConcurrentSortedSetDocValuesFacetCounts, ConcurrentSortedSetDocValuesFacetCounts);

          void t_ConcurrentSortedSetDocValuesFacetCounts::install(PyObject *module)
          {
            installType(&PY_TYPE(ConcurrentSortedSetDocValuesFacetCounts), &PY_TYPE_DEF(ConcurrentSortedSetDocValuesFacetCounts), module, "ConcurrentSortedSetDocValuesFacetCounts", 0);
          }

          void t_ConcurrentSortedSetDocValuesFacetCounts::initialize(PyObject *module)
          {
            PyObject_SetAttrString((PyObject *) PY_TYPE(ConcurrentSortedSetDocValuesFacetCounts), "class_", make_descriptor(ConcurrentSortedSetDocValuesFacetCounts::initializeClass, 1));
            PyObject_SetAttrString((PyObject *) PY_TYPE(ConcurrentSortedSetDocValuesFacetCounts), "wrapfn_", make_descriptor(t_ConcurrentSortedSetDocValuesFacetCounts::wrap_jobject));
            PyObject_SetAttrString((PyObject *) PY_TYPE(ConcurrentSortedSetDocValuesFacetCounts), "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_ConcurrentSortedSetDocValuesFacetCounts_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, ConcurrentSortedSetDocValuesFacetCounts::initializeClass, 1)))
              return NULL;
            return t_ConcurrentSortedSetDocValuesFacetCounts::wrap_Object(ConcurrentSortedSetDocValuesFacetCounts(((t_ConcurrentSortedSetDocValuesFacetCounts *) arg)->object.this$));
          }
          static PyObject *t_ConcurrentSortedSetDocValuesFacetCounts_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, ConcurrentSortedSetDocValuesFacetCounts::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_ConcurrentSortedSetDocValuesFacetCounts_init_(t_ConcurrentSortedSetDocValuesFacetCounts *self, PyObject *args, PyObject *kwds)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 2:
              {
                ::org::apache::lucene::facet::sortedset::SortedSetDocValuesReaderState a0((jobject) NULL);
                ::java::util::concurrent::ExecutorService a1((jobject) NULL);
                ConcurrentSortedSetDocValuesFacetCounts object((jobject) NULL);

                if (!parseArgs(args, "kk", ::org::apache::lucene::facet::sortedset::SortedSetDocValuesReaderState::initializeClass, ::java::util::concurrent::ExecutorService::initializeClass, &a0, &a1))
                {
                  INT_CALL(object = ConcurrentSortedSetDocValuesFacetCounts(a0, a1));
                  self->object = object;
                  break;
                }
              }
              goto err;
             case 3:
              {
                ::org::apache::lucene::facet::sortedset::SortedSetDocValuesReaderState a0((jobject) NULL);
                ::org::apache::lucene::facet::FacetsCollector a1((jobject) NULL);
                ::java::util::concurrent::ExecutorService a2((jobject) NULL);
                ConcurrentSortedSetDocValuesFacetCounts object((jobject) NULL);

                if (!parseArgs(args, "kkk", ::org::apache::lucene::facet::sortedset::SortedSetDocValuesReaderState::initializeClass, ::org::apache::lucene::facet::FacetsCollector::initializeClass, ::java::util::concurrent::ExecutorService::initializeClass, &a0, &a1, &a2))
                {
                  INT_CALL(object = ConcurrentSortedSetDocValuesFacetCounts(a0, a1, a2));
                  self->object = object;
                  break;
                }
              }
             default:
             err:
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_ConcurrentSortedSetDocValuesFacetCounts_getAllDims(t_ConcurrentSortedSetDocValuesFacetCounts *self, PyObject *args)
          {
            jint a0;
            ::java::util::List result((jobject) NULL);

            if (!parseArgs(args, "I", &a0))
            {
              OBJ_CALL(result = self->object.getAllDims(a0));
              return ::java::util::t_List::wrap_Object(result, ::org::apache::lucene::facet::PY_TYPE(FacetResult));
            }

            return callSuper(PY_TYPE(ConcurrentSortedSetDocValuesFacetCounts), (PyObject *) self, "getAllDims", args, 2);
          }

          static PyObject *t_ConcurrentSortedSetDocValuesFacetCounts_getSpecificValue(t_ConcurrentSortedSetDocValuesFacetCounts *self, PyObject *args)
          {
            ::java::lang::String a0((jobject) NULL);
            JArray< ::java::lang::String > a1((jobject) NULL);
            ::java::lang::Number result((jobject) NULL);

            if (!parseArgs(args, "s[s", &a0, &a1))
            {
              OBJ_CALL(result = self->object.getSpecificValue(a0, a1));
              return ::java::lang::t_Number::wrap_Object(result);
            }

            return callSuper(PY_TYPE(ConcurrentSortedSetDocValuesFacetCounts), (PyObject *) self, "getSpecificValue", args, 2);
          }

          static PyObject *t_ConcurrentSortedSetDocValuesFacetCounts_getTopChildren(t_ConcurrentSortedSetDocValuesFacetCounts *self, PyObject *args)
          {
            jint a0;
            ::java::lang::String a1((jobject) NULL);
            JArray< ::java::lang::String > a2((jobject) NULL);
            ::org::apache::lucene::facet::FacetResult result((jobject) NULL);

            if (!parseArgs(args, "Is[s", &a0, &a1, &a2))
            {
              OBJ_CALL(result = self->object.getTopChildren(a0, a1, a2));
              return ::org::apache::lucene::facet::t_FacetResult::wrap_Object(result);
            }

            return callSuper(PY_TYPE(ConcurrentSortedSetDocValuesFacetCounts), (PyObject *) self, "getTopChildren", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/uhighlight/Passage.h"
#include "org/apache/lucene/util/BytesRef.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace uhighlight {

          ::java::lang::Class *Passage::class$ = NULL;
          jmethodID *Passage::mids$ = NULL;
          bool Passage::live$ = false;

          jclass Passage::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/search/uhighlight/Passage");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_f2cc1bce94666404] = env->getMethodID(cls, "<init>", "()V");
              mids$[mid_addMatch_835b93aaa6ddd6b0] = env->getMethodID(cls, "addMatch", "(IILorg/apache/lucene/util/BytesRef;I)V");
              mids$[mid_getEndOffset_9972fcc56b44e79d] = env->getMethodID(cls, "getEndOffset", "()I");
              mids$[mid_getLength_9972fcc56b44e79d] = env->getMethodID(cls, "getLength", "()I");
              mids$[mid_getMatchEnds_d2c45ef07a322466] = env->getMethodID(cls, "getMatchEnds", "()[I");
              mids$[mid_getMatchStarts_d2c45ef07a322466] = env->getMethodID(cls, "getMatchStarts", "()[I");
              mids$[mid_getMatchTermFreqsInDoc_d2c45ef07a322466] = env->getMethodID(cls, "getMatchTermFreqsInDoc", "()[I");
              mids$[mid_getMatchTerms_af55d198d80d9d7e] = env->getMethodID(cls, "getMatchTerms", "()[Lorg/apache/lucene/util/BytesRef;");
              mids$[mid_getNumMatches_9972fcc56b44e79d] = env->getMethodID(cls, "getNumMatches", "()I");
              mids$[mid_getScore_58aec2b64dff50c8] = env->getMethodID(cls, "getScore", "()F");
              mids$[mid_getStartOffset_9972fcc56b44e79d] = env->getMethodID(cls, "getStartOffset", "()I");
              mids$[mid_reset_f2cc1bce94666404] = env->getMethodID(cls, "reset", "()V");
              mids$[mid_setEndOffset_040c4cd0390c5aff] = env->getMethodID(cls, "setEndOffset", "(I)V");
              mids$[mid_setScore_8e1d952dd65cdc3a] = env->getMethodID(cls, "setScore", "(F)V");
              mids$[mid_setStartOffset_040c4cd0390c5aff] = env->getMethodID(cls, "setStartOffset", "(I)V");
              mids$[mid_toString_db9b55ba01e03e4b] = env->getMethodID(cls, "toString", "()Ljava/lang/String;");

              class$ = new ::java::lang::Class(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          Passage::Passage() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_f2cc1bce94666404)) {}

          void Passage::addMatch(jint a0, jint a1, const ::org::apache::lucene::util::BytesRef & a2, jint a3) const
          {
            env->callVoidMethod(this$, mids$[mid_addMatch_835b93aaa6ddd6b0], a0, a1, a2.this$, a3);
          }

          jint Passage::getEndOffset() const
          {
            return env->callIntMethod(this$, mids$[mid_getEndOffset_9972fcc56b44e79d]);
          }

          jint Passage::getLength() const
          {
            return env->callIntMethod(this$, mids$[mid_getLength_9972fcc56b44e79d]);
          }

          JArray< jint > Passage::getMatchEnds() const
          {
            return JArray< jint >(env->callObjectMethod(this$, mids$[mid_getMatchEnds_d2c45ef07a322466]));
          }

          JArray< jint > Passage::getMatchStarts() const
          {
            return JArray< jint >(env->callObjectMethod(this$, mids$[mid_getMatchStarts_d2c45ef07a322466]));
          }

          JArray< jint > Passage::getMatchTermFreqsInDoc() const
          {
            return JArray< jint >(env->callObjectMethod(this$, mids$[mid_getMatchTermFreqsInDoc_d2c45ef07a322466]));
          }

          JArray< ::org::apache::lucene::util::BytesRef > Passage::getMatchTerms() const
          {
            return JArray< ::org::apache::lucene::util::BytesRef >(env->callObjectMethod(this$, mids$[mid_getMatchTerms_af55d198d80d9d7e]));
          }

          jint Passage::getNumMatches() const
          {
            return env->callIntMethod(this$, mids$[mid_getNumMatches_9972fcc56b44e79d]);
          }

          jfloat Passage::getScore() const
          {
            return env->callFloatMethod(this$, mids$[mid_getScore_58aec2b64dff50c8]);
          }

          jint Passage::getStartOffset() const
          {
            return env->callIntMethod(this$, mids$[mid_getStartOffset_9972fcc56b44e79d]);
          }

          void Passage::reset() const
          {
            env->callVoidMethod(this$, mids$[mid_reset_f2cc1bce94666404]);
          }

          void Passage::setEndOffset(jint a0) const
          {
            env->callVoidMethod(this$, mids$[mid_setEndOffset_040c4cd0390c5aff], a0);
          }

          void Passage::setScore(jfloat a0) const
          {
            env->callVoidMethod(this$, mids$[mid_setScore_8e1d952dd65cdc3a], a0);
          }

          void Passage::setStartOffset(jint a0) const
          {
            env->callVoidMethod(this$, mids$[mid_setStartOffset_040c4cd0390c5aff], a0);
          }

          ::java::lang::String Passage::toString() const
          {
            return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_db9b55ba01e03e4b]));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace uhighlight {
          static PyObject *t_Passage_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_Passage_instance_(PyTypeObject *type, PyObject *arg);
          static int t_Passage_init_(t_Passage *self, PyObject *args, PyObject *kwds);
          static PyObject *t_Passage_addMatch(t_Passage *self, PyObject *args);
          static PyObject *t_Passage_getEndOffset(t_Passage *self);
          static PyObject *t_Passage_getLength(t_Passage *self);
          static PyObject *t_Passage_getMatchEnds(t_Passage *self);
          static PyObject *t_Passage_getMatchStarts(t_Passage *self);
          static PyObject *t_Passage_getMatchTermFreqsInDoc(t_Passage *self);
          static PyObject *t_Passage_getMatchTerms(t_Passage *self);
          static PyObject *t_Passage_getNumMatches(t_Passage *self);
          static PyObject *t_Passage_getScore(t_Passage *self);
          static PyObject *t_Passage_getStartOffset(t_Passage *self);
          static PyObject *t_Passage_reset(t_Passage *self);
          static PyObject *t_Passage_setEndOffset(t_Passage *self, PyObject *arg);
          static PyObject *t_Passage_setScore(t_Passage *self, PyObject *arg);
          static PyObject *t_Passage_setStartOffset(t_Passage *self, PyObject *arg);
          static PyObject *t_Passage_toString(t_Passage *self, PyObject *args);
          static PyObject *t_Passage_get__endOffset(t_Passage *self, void *data);
          static int t_Passage_set__endOffset(t_Passage *self, PyObject *arg, void *data);
          static PyObject *t_Passage_get__length(t_Passage *self, void *data);
          static PyObject *t_Passage_get__matchEnds(t_Passage *self, void *data);
          static PyObject *t_Passage_get__matchStarts(t_Passage *self, void *data);
          static PyObject *t_Passage_get__matchTermFreqsInDoc(t_Passage *self, void *data);
          static PyObject *t_Passage_get__matchTerms(t_Passage *self, void *data);
          static PyObject *t_Passage_get__numMatches(t_Passage *self, void *data);
          static PyObject *t_Passage_get__score(t_Passage *self, void *data);
          static int t_Passage_set__score(t_Passage *self, PyObject *arg, void *data);
          static PyObject *t_Passage_get__startOffset(t_Passage *self, void *data);
          static int t_Passage_set__startOffset(t_Passage *self, PyObject *arg, void *data);
          static PyGetSetDef t_Passage__fields_[] = {
            DECLARE_GETSET_FIELD(t_Passage, endOffset),
            DECLARE_GET_FIELD(t_Passage, length),
            DECLARE_GET_FIELD(t_Passage, matchEnds),
            DECLARE_GET_FIELD(t_Passage, matchStarts),
            DECLARE_GET_FIELD(t_Passage, matchTermFreqsInDoc),
            DECLARE_GET_FIELD(t_Passage, matchTerms),
            DECLARE_GET_FIELD(t_Passage, numMatches),
            DECLARE_GETSET_FIELD(t_Passage, score),
            DECLARE_GETSET_FIELD(t_Passage, startOffset),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_Passage__methods_[] = {
            DECLARE_METHOD(t_Passage, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_Passage, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_Passage, addMatch, METH_VARARGS),
            DECLARE_METHOD(t_Passage, getEndOffset, METH_NOARGS),
            DECLARE_METHOD(t_Passage, getLength, METH_NOARGS),
            DECLARE_METHOD(t_Passage, getMatchEnds, METH_NOARGS),
            DECLARE_METHOD(t_Passage, getMatchStarts, METH_NOARGS),
            DECLARE_METHOD(t_Passage, getMatchTermFreqsInDoc, METH_NOARGS),
            DECLARE_METHOD(t_Passage, getMatchTerms, METH_NOARGS),
            DECLARE_METHOD(t_Passage, getNumMatches, METH_NOARGS),
            DECLARE_METHOD(t_Passage, getScore, METH_NOARGS),
            DECLARE_METHOD(t_Passage, getStartOffset, METH_NOARGS),
            DECLARE_METHOD(t_Passage, reset, METH_NOARGS),
            DECLARE_METHOD(t_Passage, setEndOffset, METH_O),
            DECLARE_METHOD(t_Passage, setScore, METH_O),
            DECLARE_METHOD(t_Passage, setStartOffset, METH_O),
            DECLARE_METHOD(t_Passage, toString, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          static PyType_Slot PY_TYPE_SLOTS(Passage)[] = {
            { Py_tp_methods, t_Passage__methods_ },
            { Py_tp_init, (void *) t_Passage_init_ },
            { Py_tp_getset, t_Passage__fields_ },
            { 0, NULL }
          };

          static PyType_Def *PY_TYPE_BASES(Passage)[] = {
            &PY_TYPE_DEF(::java::lang::Object),
            NULL
          };

          DEFINE_TYPE(Passage, t_Passage, Passage);

          void t_Passage::install(PyObject *module)
          {
            installType(&PY_TYPE(Passage), &PY_TYPE_DEF(Passage), module, "Passage", 0);
          }

          void t_Passage::initialize(PyObject *module)
          {
            PyObject_SetAttrString((PyObject *) PY_TYPE(Passage), "class_", make_descriptor(Passage::initializeClass, 1));
            PyObject_SetAttrString((PyObject *) PY_TYPE(Passage), "wrapfn_", make_descriptor(t_Passage::wrap_jobject));
            PyObject_SetAttrString((PyObject *) PY_TYPE(Passage), "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_Passage_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, Passage::initializeClass, 1)))
              return NULL;
            return t_Passage::wrap_Object(Passage(((t_Passage *) arg)->object.this$));
          }
          static PyObject *t_Passage_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, Passage::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_Passage_init_(t_Passage *self, PyObject *args, PyObject *kwds)
          {
            Passage object((jobject) NULL);

            INT_CALL(object = Passage());
            self->object = object;

            return 0;
          }

          static PyObject *t_Passage_addMatch(t_Passage *self, PyObject *args)
          {
            jint a0;
            jint a1;
            ::org::apache::lucene::util::BytesRef a2((jobject) NULL);
            jint a3;

            if (!parseArgs(args, "IIkI", ::org::apache::lucene::util::BytesRef::initializeClass, &a0, &a1, &a2, &a3))
            {
              OBJ_CALL(self->object.addMatch(a0, a1, a2, a3));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError((PyObject *) self, "addMatch", args);
            return NULL;
          }

          static PyObject *t_Passage_getEndOffset(t_Passage *self)
          {
            jint result;
            OBJ_CALL(result = self->object.getEndOffset());
            return PyLong_FromLong((long) result);
          }

          static PyObject *t_Passage_getLength(t_Passage *self)
          {
            jint result;
            OBJ_CALL(result = self->object.getLength());
            return PyLong_FromLong((long) result);
          }

          static PyObject *t_Passage_getMatchEnds(t_Passage *self)
          {
            JArray< jint > result((jobject) NULL);
            OBJ_CALL(result = self->object.getMatchEnds());
            return result.wrap();
          }

          static PyObject *t_Passage_getMatchStarts(t_Passage *self)
          {
            JArray< jint > result((jobject) NULL);
            OBJ_CALL(result = self->object.getMatchStarts());
            return result.wrap();
          }

          static PyObject *t_Passage_getMatchTermFreqsInDoc(t_Passage *self)
          {
            JArray< jint > result((jobject) NULL);
            OBJ_CALL(result = self->object.getMatchTermFreqsInDoc());
            return result.wrap();
          }

          static PyObject *t_Passage_getMatchTerms(t_Passage *self)
          {
            JArray< ::org::apache::lucene::util::BytesRef > result((jobject) NULL);
            OBJ_CALL(result = self->object.getMatchTerms());
            return JArray<jobject>(result.this$).wrap(::org::apache::lucene::util::t_BytesRef::wrap_jobject);
          }

          static PyObject *t_Passage_getNumMatches(t_Passage *self)
          {
            jint result;
            OBJ_CALL(result = self->object.getNumMatches());
            return PyLong_FromLong((long) result);
          }

          static PyObject *t_Passage_getScore(t_Passage *self)
          {
            jfloat result;
            OBJ_CALL(result = self->object.getScore());
            return PyFloat_FromDouble((double) result);
          }

          static PyObject *t_Passage_getStartOffset(t_Passage *self)
          {
            jint result;
            OBJ_CALL(result = self->object.getStartOffset());
            return PyLong_FromLong((long) result);
          }

          static PyObject *t_Passage_reset(t_Passage *self)
          {
            OBJ_CALL(self->object.reset());
            Py_RETURN_NONE;
          }

          static PyObject *t_Passage_setEndOffset(t_Passage *self, PyObject *arg)
          {
            jint a0;

            if (!parseArg(arg, "I", &a0))
            {
              OBJ_CALL(self->object.setEndOffset(a0));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError((PyObject *) self, "setEndOffset", arg);
            return NULL;
          }

          static PyObject *t_Passage_setScore(t_Passage *self, PyObject *arg)
          {
            jfloat a0;

            if (!parseArg(arg, "F", &a0))
            {
              OBJ_CALL(self->object.setScore(a0));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError((PyObject *) self, "setScore", arg);
            return NULL;
          }

          static PyObject *t_Passage_setStartOffset(t_Passage *self, PyObject *arg)
          {
            jint a0;

            if (!parseArg(arg, "I", &a0))
            {
              OBJ_CALL(self->object.setStartOffset(a0));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError((PyObject *) self, "setStartOffset", arg);
            return NULL;
          }

          static PyObject *t_Passage_toString(t_Passage *self, PyObject *args)
          {
            ::java::lang::String result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.toString());
              return j2p(result);
            }

            return callSuper(PY_TYPE(Passage), (PyObject *) self, "toString", args, 2);
          }

          static PyObject *t_Passage_get__endOffset(t_Passage *self, void *data)
          {
            jint value;
            OBJ_CALL(value = self->object.getEndOffset());
            return PyLong_FromLong((long) value);
          }
          static int t_Passage_set__endOffset(t_Passage *self, PyObject *arg, void *data)
          {
            {
              jint value;
              if (!parseArg(arg, "I", &value))
              {
                INT_CALL(self->object.setEndOffset(value));
                return 0;
              }
            }
            PyErr_SetArgsError((PyObject *) self, "endOffset", arg);
            return -1;
          }

          static PyObject *t_Passage_get__length(t_Passage *self, void *data)
          {
            jint value;
            OBJ_CALL(value = self->object.getLength());
            return PyLong_FromLong((long) value);
          }

          static PyObject *t_Passage_get__matchEnds(t_Passage *self, void *data)
          {
            JArray< jint > value((jobject) NULL);
            OBJ_CALL(value = self->object.getMatchEnds());
            return value.wrap();
          }

          static PyObject *t_Passage_get__matchStarts(t_Passage *self, void *data)
          {
            JArray< jint > value((jobject) NULL);
            OBJ_CALL(value = self->object.getMatchStarts());
            return value.wrap();
          }

          static PyObject *t_Passage_get__matchTermFreqsInDoc(t_Passage *self, void *data)
          {
            JArray< jint > value((jobject) NULL);
            OBJ_CALL(value = self->object.getMatchTermFreqsInDoc());
            return value.wrap();
          }

          static PyObject *t_Passage_get__matchTerms(t_Passage *self, void *data)
          {
            JArray< ::org::apache::lucene::util::BytesRef > value((jobject) NULL);
            OBJ_CALL(value = self->object.getMatchTerms());
            return JArray<jobject>(value.this$).wrap(::org::apache::lucene::util::t_BytesRef::wrap_jobject);
          }

          static PyObject *t_Passage_get__numMatches(t_Passage *self, void *data)
          {
            jint value;
            OBJ_CALL(value = self->object.getNumMatches());
            return PyLong_FromLong((long) value);
          }

          static PyObject *t_Passage_get__score(t_Passage *self, void *data)
          {
            jfloat value;
            OBJ_CALL(value = self->object.getScore());
            return PyFloat_FromDouble((double) value);
          }
          static int t_Passage_set__score(t_Passage *self, PyObject *arg, void *data)
          {
            {
              jfloat value;
              if (!parseArg(arg, "F", &value))
              {
                INT_CALL(self->object.setScore(value));
                return 0;
              }
            }
            PyErr_SetArgsError((PyObject *) self, "score", arg);
            return -1;
          }

          static PyObject *t_Passage_get__startOffset(t_Passage *self, void *data)
          {
            jint value;
            OBJ_CALL(value = self->object.getStartOffset());
            return PyLong_FromLong((long) value);
          }
          static int t_Passage_set__startOffset(t_Passage *self, PyObject *arg, void *data)
          {
            {
              jint value;
              if (!parseArg(arg, "I", &value))
              {
                INT_CALL(self->object.setStartOffset(value));
                return 0;
              }
            }
            PyErr_SetArgsError((PyObject *) self, "startOffset", arg);
            return -1;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/en/PorterStemFilterFactory.h"
#include "java/util/Map.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/analysis/TokenStream.h"
#include "java/lang/String.h"
#include "org/apache/lucene/analysis/en/PorterStemFilter.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace en {

          ::java::lang::Class *PorterStemFilterFactory::class$ = NULL;
          jmethodID *PorterStemFilterFactory::mids$ = NULL;
          bool PorterStemFilterFactory::live$ = false;
          ::java::lang::String *PorterStemFilterFactory::NAME = NULL;

          jclass PorterStemFilterFactory::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/en/PorterStemFilterFactory");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_408bd889ee3beae5] = env->getMethodID(cls, "<init>", "(Ljava/util/Map;)V");
              mids$[mid_create_d217117f84e508f7] = env->getMethodID(cls, "create", "(Lorg/apache/lucene/analysis/TokenStream;)Lorg/apache/lucene/analysis/en/PorterStemFilter;");

              class$ = new ::java::lang::Class(cls);
              cls = (jclass) class$->this$;

              NAME = new ::java::lang::String(env->getStaticObjectField(cls, "NAME", "Ljava/lang/String;"));
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          PorterStemFilterFactory::PorterStemFilterFactory(const ::java::util::Map & a0) : ::org::apache::lucene::analysis::util::TokenFilterFactory(env->newObject(initializeClass, &mids$, mid_init$_408bd889ee3beae5, a0.this$)) {}

          ::org::apache::lucene::analysis::en::PorterStemFilter PorterStemFilterFactory::create(const ::org::apache::lucene::analysis::TokenStream & a0) const
          {
            return ::org::apache::lucene::analysis::en::PorterStemFilter(env->callObjectMethod(this$, mids$[mid_create_d217117f84e508f7], a0.this$));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace en {
          static PyObject *t_PorterStemFilterFactory_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_PorterStemFilterFactory_instance_(PyTypeObject *type, PyObject *arg);
          static int t_PorterStemFilterFactory_init_(t_PorterStemFilterFactory *self, PyObject *args, PyObject *kwds);
          static PyObject *t_PorterStemFilterFactory_create(t_PorterStemFilterFactory *self, PyObject *args);

          static PyMethodDef t_PorterStemFilterFactory__methods_[] = {
            DECLARE_METHOD(t_PorterStemFilterFactory, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_PorterStemFilterFactory, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_PorterStemFilterFactory, create, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          static PyType_Slot PY_TYPE_SLOTS(PorterStemFilterFactory)[] = {
            { Py_tp_methods, t_PorterStemFilterFactory__methods_ },
            { Py_tp_init, (void *) t_PorterStemFilterFactory_init_ },
            { 0, NULL }
          };

          static PyType_Def *PY_TYPE_BASES(PorterStemFilterFactory)[] = {
            &PY_TYPE_DEF(::org::apache::lucene::analysis::util::TokenFilterFactory),
            NULL
          };

          DEFINE_TYPE(PorterStemFilterFactory, t_PorterStemFilterFactory, PorterStemFilterFactory);

          void t_PorterStemFilterFactory::install(PyObject *module)
          {
            installType(&PY_TYPE(PorterStemFilterFactory), &PY_TYPE_DEF(PorterStemFilterFactory), module, "PorterStemFilterFactory", 0);
          }

          void t_PorterStemFilterFactory::initialize(PyObject *module)
          {
            PyObject_SetAttrString((PyObject *) PY_TYPE(PorterStemFilterFactory), "class_", make_descriptor(PorterStemFilterFactory::initializeClass, 1));
            PyObject_SetAttrString((PyObject *) PY_TYPE(PorterStemFilterFactory), "wrapfn_", make_descriptor(t_PorterStemFilterFactory::wrap_jobject));
            PyObject_SetAttrString((PyObject *) PY_TYPE(PorterStemFilterFactory), "boxfn_", make_descriptor(boxObject));
            env->getClass(PorterStemFilterFactory::initializeClass);
            PyObject_SetAttrString((PyObject *) PY_TYPE(PorterStemFilterFactory), "NAME", make_descriptor(j2p(*PorterStemFilterFactory::NAME)));
          }

          static PyObject *t_PorterStemFilterFactory_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, PorterStemFilterFactory::initializeClass, 1)))
              return NULL;
            return t_PorterStemFilterFactory::wrap_Object(PorterStemFilterFactory(((t_PorterStemFilterFactory *) arg)->object.this$));
          }
          static PyObject *t_PorterStemFilterFactory_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, PorterStemFilterFactory::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_PorterStemFilterFactory_init_(t_PorterStemFilterFactory *self, PyObject *args, PyObject *kwds)
          {
            ::java::util::Map a0((jobject) NULL);
            PyTypeObject **p0;
            PorterStemFilterFactory object((jobject) NULL);

            if (!parseArgs(args, "K", ::java::util::Map::initializeClass, &a0, &p0, ::java::util::t_Map::parameters_))
            {
              INT_CALL(object = PorterStemFilterFactory(a0));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_PorterStemFilterFactory_create(t_PorterStemFilterFactory *self, PyObject *args)
          {
            ::org::apache::lucene::analysis::TokenStream a0((jobject) NULL);
            ::org::apache::lucene::analysis::en::PorterStemFilter result((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::analysis::TokenStream::initializeClass, &a0))
            {
              OBJ_CALL(result = self->object.create(a0));
              return ::org::apache::lucene::analysis::en::t_PorterStemFilter::wrap_Object(result);
            }

            return callSuper(PY_TYPE(PorterStemFilterFactory), (PyObject *) self, "create", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queryparser/surround/query/SpanNearClauseFactory.h"
#include "org/apache/lucene/index/IndexReader.h"
#include "org/apache/lucene/search/spans/SpanQuery.h"
#include "org/apache/lucene/index/Term.h"
#include "java/lang/Class.h"
#include "java/lang/String.h"
#include "org/apache/lucene/search/Query.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/queryparser/surround/query/BasicQueryFactory.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace surround {
          namespace query {

            ::java::lang::Class *SpanNearClauseFactory::class$ = NULL;
            jmethodID *SpanNearClauseFactory::mids$ = NULL;
            bool SpanNearClauseFactory::live$ = false;

            jclass SpanNearClauseFactory::initializeClass(bool getOnly)
            {
              if (getOnly)
                return (jclass) (live$ ? class$->this$ : NULL);
              if (class$ == NULL)
              {
                jclass cls = (jclass) env->findClass("org/apache/lucene/queryparser/surround/query/SpanNearClauseFactory");

                mids$ = new jmethodID[max_mid];
                mids$[mid_init$_65ddf5b5d63d92de] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/index/IndexReader;Ljava/lang/String;Lorg/apache/lucene/queryparser/surround/query/BasicQueryFactory;)V");
                mids$[mid_addSpanQuery_ede25bb9d48237ac] = env->getMethodID(cls, "addSpanQuery", "(Lorg/apache/lucene/search/Query;)V");
                mids$[mid_addTermWeighted_cbd6f15a00eb0d92] = env->getMethodID(cls, "addTermWeighted", "(Lorg/apache/lucene/index/Term;F)V");
                mids$[mid_clear_f2cc1bce94666404] = env->getMethodID(cls, "clear", "()V");
                mids$[mid_getBasicQueryFactory_eb92ea6d572623b0] = env->getMethodID(cls, "getBasicQueryFactory", "()Lorg/apache/lucene/queryparser/surround/query/BasicQueryFactory;");
                mids$[mid_getFieldName_db9b55ba01e03e4b] = env->getMethodID(cls, "getFieldName", "()Ljava/lang/String;");
                mids$[mid_getIndexReader_3268165ce941bf52] = env->getMethodID(cls, "getIndexReader", "()Lorg/apache/lucene/index/IndexReader;");
                mids$[mid_makeSpanClause_5a8903ceec80d1b9] = env->getMethodID(cls, "makeSpanClause", "()Lorg/apache/lucene/search/spans/SpanQuery;");
                mids$[mid_size_9972fcc56b44e79d] = env->getMethodID(cls, "size", "()I");
                mids$[mid_addSpanQueryWeighted_d187e1529c821aa4] = env->getMethodID(cls, "addSpanQueryWeighted", "(Lorg/apache/lucene/search/spans/SpanQuery;F)V");

                class$ = new ::java::lang::Class(cls);
                live$ = true;
              }
              return (jclass) class$->this$;
            }

            SpanNearClauseFactory::SpanNearClauseFactory(const ::org::apache::lucene::index::IndexReader & a0, const ::java::lang::String & a1, const ::org::apache::lucene::queryparser::surround::query::BasicQueryFactory & a2) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_65ddf5b5d63d92de, a0.this$, a1.this$, a2.this$)) {}

            void SpanNearClauseFactory::addSpanQuery(const ::org::apache::lucene::search::Query & a0) const
            {
              env->callVoidMethod(this$, mids$[mid_addSpanQuery_ede25bb9d48237ac], a0.this$);
            }

            void SpanNearClauseFactory::addTermWeighted(const ::org::apache::lucene::index::Term & a0, jfloat a1) const
            {
              env->callVoidMethod(this$, mids$[mid_addTermWeighted_cbd6f15a00eb0d92], a0.this$, a1);
            }

            void SpanNearClauseFactory::clear() const
            {
              env->callVoidMethod(this$, mids$[mid_clear_f2cc1bce94666404]);
            }

            ::org::apache::lucene::queryparser::surround::query::BasicQueryFactory SpanNearClauseFactory::getBasicQueryFactory() const
            {
              return ::org::apache::lucene::queryparser::surround::query::BasicQueryFactory(env->callObjectMethod(this$, mids$[mid_getBasicQueryFactory_eb92ea6d572623b0]));
            }

            ::java::lang::String SpanNearClauseFactory::getFieldName() const
            {
              return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_getFieldName_db9b55ba01e03e4b]));
            }

            ::org::apache::lucene::index::IndexReader SpanNearClauseFactory::getIndexReader() const
            {
              return ::org::apache::lucene::index::IndexReader(env->callObjectMethod(this$, mids$[mid_getIndexReader_3268165ce941bf52]));
            }

            ::org::apache::lucene::search::spans::SpanQuery SpanNearClauseFactory::makeSpanClause() const
            {
              return ::org::apache::lucene::search::spans::SpanQuery(env->callObjectMethod(this$, mids$[mid_makeSpanClause_5a8903ceec80d1b9]));
            }

            jint SpanNearClauseFactory::size() const
            {
              return env->callIntMethod(this$, mids$[mid_size_9972fcc56b44e79d]);
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace surround {
          namespace query {
            static PyObject *t_SpanNearClauseFactory_cast_(PyTypeObject *type, PyObject *arg);
            static PyObject *t_SpanNearClauseFactory_instance_(PyTypeObject *type, PyObject *arg);
            static int t_SpanNearClauseFactory_init_(t_SpanNearClauseFactory *self, PyObject *args, PyObject *kwds);
            static PyObject *t_SpanNearClauseFactory_addSpanQuery(t_SpanNearClauseFactory *self, PyObject *arg);
            static PyObject *t_SpanNearClauseFactory_addTermWeighted(t_SpanNearClauseFactory *self, PyObject *args);
            static PyObject *t_SpanNearClauseFactory_clear(t_SpanNearClauseFactory *self);
            static PyObject *t_SpanNearClauseFactory_getBasicQueryFactory(t_SpanNearClauseFactory *self);
            static PyObject *t_SpanNearClauseFactory_getFieldName(t_SpanNearClauseFactory *self);
            static PyObject *t_SpanNearClauseFactory_getIndexReader(t_SpanNearClauseFactory *self);
            static PyObject *t_SpanNearClauseFactory_makeSpanClause(t_SpanNearClauseFactory *self);
            static PyObject *t_SpanNearClauseFactory_size(t_SpanNearClauseFactory *self);
            static PyObject *t_SpanNearClauseFactory_get__basicQueryFactory(t_SpanNearClauseFactory *self, void *data);
            static PyObject *t_SpanNearClauseFactory_get__fieldName(t_SpanNearClauseFactory *self, void *data);
            static PyObject *t_SpanNearClauseFactory_get__indexReader(t_SpanNearClauseFactory *self, void *data);
            static PyGetSetDef t_SpanNearClauseFactory__fields_[] = {
              DECLARE_GET_FIELD(t_SpanNearClauseFactory, basicQueryFactory),
              DECLARE_GET_FIELD(t_SpanNearClauseFactory, fieldName),
              DECLARE_GET_FIELD(t_SpanNearClauseFactory, indexReader),
              { NULL, NULL, NULL, NULL, NULL }
            };

            static PyMethodDef t_SpanNearClauseFactory__methods_[] = {
              DECLARE_METHOD(t_SpanNearClauseFactory, cast_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_SpanNearClauseFactory, instance_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_SpanNearClauseFactory, addSpanQuery, METH_O),
              DECLARE_METHOD(t_SpanNearClauseFactory, addTermWeighted, METH_VARARGS),
              DECLARE_METHOD(t_SpanNearClauseFactory, clear, METH_NOARGS),
              DECLARE_METHOD(t_SpanNearClauseFactory, getBasicQueryFactory, METH_NOARGS),
              DECLARE_METHOD(t_SpanNearClauseFactory, getFieldName, METH_NOARGS),
              DECLARE_METHOD(t_SpanNearClauseFactory, getIndexReader, METH_NOARGS),
              DECLARE_METHOD(t_SpanNearClauseFactory, makeSpanClause, METH_NOARGS),
              DECLARE_METHOD(t_SpanNearClauseFactory, size, METH_NOARGS),
              { NULL, NULL, 0, NULL }
            };

            static PyType_Slot PY_TYPE_SLOTS(SpanNearClauseFactory)[] = {
              { Py_tp_methods, t_SpanNearClauseFactory__methods_ },
              { Py_tp_init, (void *) t_SpanNearClauseFactory_init_ },
              { Py_tp_getset, t_SpanNearClauseFactory__fields_ },
              { 0, NULL }
            };

            static PyType_Def *PY_TYPE_BASES(SpanNearClauseFactory)[] = {
              &PY_TYPE_DEF(::java::lang::Object),
              NULL
            };

            DEFINE_TYPE(SpanNearClauseFactory, t_SpanNearClauseFactory, SpanNearClauseFactory);

            void t_SpanNearClauseFactory::install(PyObject *module)
            {
              installType(&PY_TYPE(SpanNearClauseFactory), &PY_TYPE_DEF(SpanNearClauseFactory), module, "SpanNearClauseFactory", 0);
            }

            void t_SpanNearClauseFactory::initialize(PyObject *module)
            {
              PyObject_SetAttrString((PyObject *) PY_TYPE(SpanNearClauseFactory), "class_", make_descriptor(SpanNearClauseFactory::initializeClass, 1));
              PyObject_SetAttrString((PyObject *) PY_TYPE(SpanNearClauseFactory), "wrapfn_", make_descriptor(t_SpanNearClauseFactory::wrap_jobject));
              PyObject_SetAttrString((PyObject *) PY_TYPE(SpanNearClauseFactory), "boxfn_", make_descriptor(boxObject));
            }

            static PyObject *t_SpanNearClauseFactory_cast_(PyTypeObject *type, PyObject *arg)
            {
              if (!(arg = castCheck(arg, SpanNearClauseFactory::initializeClass, 1)))
                return NULL;
              return t_SpanNearClauseFactory::wrap_Object(SpanNearClauseFactory(((t_SpanNearClauseFactory *) arg)->object.this$));
            }
            static PyObject *t_SpanNearClauseFactory_instance_(PyTypeObject *type, PyObject *arg)
            {
              if (!castCheck(arg, SpanNearClauseFactory::initializeClass, 0))
                Py_RETURN_FALSE;
              Py_RETURN_TRUE;
            }

            static int t_SpanNearClauseFactory_init_(t_SpanNearClauseFactory *self, PyObject *args, PyObject *kwds)
            {
              ::org::apache::lucene::index::IndexReader a0((jobject) NULL);
              ::java::lang::String a1((jobject) NULL);
              ::org::apache::lucene::queryparser::surround::query::BasicQueryFactory a2((jobject) NULL);
              SpanNearClauseFactory object((jobject) NULL);

              if (!parseArgs(args, "ksk", ::org::apache::lucene::index::IndexReader::initializeClass, ::org::apache::lucene::queryparser::surround::query::BasicQueryFactory::initializeClass, &a0, &a1, &a2))
              {
                INT_CALL(object = SpanNearClauseFactory(a0, a1, a2));
                self->object = object;
              }
              else
              {
                PyErr_SetArgsError((PyObject *) self, "__init__", args);
                return -1;
              }

              return 0;
            }

            static PyObject *t_SpanNearClauseFactory_addSpanQuery(t_SpanNearClauseFactory *self, PyObject *arg)
            {
              ::org::apache::lucene::search::Query a0((jobject) NULL);

              if (!parseArg(arg, "k", ::org::apache::lucene::search::Query::initializeClass, &a0))
              {
                OBJ_CALL(self->object.addSpanQuery(a0));
                Py_RETURN_NONE;
              }

              PyErr_SetArgsError((PyObject *) self, "addSpanQuery", arg);
              return NULL;
            }

            static PyObject *t_SpanNearClauseFactory_addTermWeighted(t_SpanNearClauseFactory *self, PyObject *args)
            {
              ::org::apache::lucene::index::Term a0((jobject) NULL);
              jfloat a1;

              if (!parseArgs(args, "kF", ::org::apache::lucene::index::Term::initializeClass, &a0, &a1))
              {
                OBJ_CALL(self->object.addTermWeighted(a0, a1));
                Py_RETURN_NONE;
              }

              PyErr_SetArgsError((PyObject *) self, "addTermWeighted", args);
              return NULL;
            }

            static PyObject *t_SpanNearClauseFactory_clear(t_SpanNearClauseFactory *self)
            {
              OBJ_CALL(self->object.clear());
              Py_RETURN_NONE;
            }

            static PyObject *t_SpanNearClauseFactory_getBasicQueryFactory(t_SpanNearClauseFactory *self)
            {
              ::org::apache::lucene::queryparser::surround::query::BasicQueryFactory result((jobject) NULL);
              OBJ_CALL(result = self->object.getBasicQueryFactory());
              return ::org::apache::lucene::queryparser::surround::query::t_BasicQueryFactory::wrap_Object(result);
            }

            static PyObject *t_SpanNearClauseFactory_getFieldName(t_SpanNearClauseFactory *self)
            {
              ::java::lang::String result((jobject) NULL);
              OBJ_CALL(result = self->object.getFieldName());
              return j2p(result);
            }

            static PyObject *t_SpanNearClauseFactory_getIndexReader(t_SpanNearClauseFactory *self)
            {
              ::org::apache::lucene::index::IndexReader result((jobject) NULL);
              OBJ_CALL(result = self->object.getIndexReader());
              return ::org::apache::lucene::index::t_IndexReader::wrap_Object(result);
            }

            static PyObject *t_SpanNearClauseFactory_makeSpanClause(t_SpanNearClauseFactory *self)
            {
              ::org::apache::lucene::search::spans::SpanQuery result((jobject) NULL);
              OBJ_CALL(result = self->object.makeSpanClause());
              return ::org::apache::lucene::search::spans::t_SpanQuery::wrap_Object(result);
            }

            static PyObject *t_SpanNearClauseFactory_size(t_SpanNearClauseFactory *self)
            {
              jint result;
              OBJ_CALL(result = self->object.size());
              return PyLong_FromLong((long) result);
            }

            static PyObject *t_SpanNearClauseFactory_get__basicQueryFactory(t_SpanNearClauseFactory *self, void *data)
            {
              ::org::apache::lucene::queryparser::surround::query::BasicQueryFactory value((jobject) NULL);
              OBJ_CALL(value = self->object.getBasicQueryFactory());
              return ::org::apache::lucene::queryparser::surround::query::t_BasicQueryFactory::wrap_Object(value);
            }

            static PyObject *t_SpanNearClauseFactory_get__fieldName(t_SpanNearClauseFactory *self, void *data)
            {
              ::java::lang::String value((jobject) NULL);
              OBJ_CALL(value = self->object.getFieldName());
              return j2p(value);
            }

            static PyObject *t_SpanNearClauseFactory_get__indexReader(t_SpanNearClauseFactory *self, void *data)
            {
              ::org::apache::lucene::index::IndexReader value((jobject) NULL);
              OBJ_CALL(value = self->object.getIndexReader());
              return ::org::apache::lucene::index::t_IndexReader::wrap_Object(value);
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/core/KeywordTokenizer.h"
#include "org/apache/lucene/util/AttributeFactory.h"
#include "java/io/IOException.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace core {

          ::java::lang::Class *KeywordTokenizer::class$ = NULL;
          jmethodID *KeywordTokenizer::mids$ = NULL;
          bool KeywordTokenizer::live$ = false;
          jint KeywordTokenizer::DEFAULT_BUFFER_SIZE = (jint) 0;

          jclass KeywordTokenizer::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/core/KeywordTokenizer");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_f2cc1bce94666404] = env->getMethodID(cls, "<init>", "()V");
              mids$[mid_init$_040c4cd0390c5aff] = env->getMethodID(cls, "<init>", "(I)V");
              mids$[mid_init$_541d20dfedf4268e] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/util/AttributeFactory;I)V");
              mids$[mid_end_f2cc1bce94666404] = env->getMethodID(cls, "end", "()V");
              mids$[mid_incrementToken_8454bd5aa23fd11e] = env->getMethodID(cls, "incrementToken", "()Z");
              mids$[mid_reset_f2cc1bce94666404] = env->getMethodID(cls, "reset", "()V");

              class$ = new ::java::lang::Class(cls);
              cls = (jclass) class$->this$;

              DEFAULT_BUFFER_SIZE = env->getStaticIntField(cls, "DEFAULT_BUFFER_SIZE");
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          KeywordTokenizer::KeywordTokenizer() : ::org::apache::lucene::analysis::Tokenizer(env->newObject(initializeClass, &mids$, mid_init$_f2cc1bce94666404)) {}

          KeywordTokenizer::KeywordTokenizer(jint a0) : ::org::apache::lucene::analysis::Tokenizer(env->newObject(initializeClass, &mids$, mid_init$_040c4cd0390c5aff, a0)) {}

          KeywordTokenizer::KeywordTokenizer(const ::org::apache::lucene::util::AttributeFactory & a0, jint a1) : ::org::apache::lucene::analysis::Tokenizer(env->newObject(initializeClass, &mids$, mid_init$_541d20dfedf4268e, a0.this$, a1)) {}

          void KeywordTokenizer::end() const
          {
            env->callVoidMethod(this$, mids$[mid_end_f2cc1bce94666404]);
          }

          jboolean KeywordTokenizer::incrementToken() const
          {
            return env->callBooleanMethod(this$, mids$[mid_incrementToken_8454bd5aa23fd11e]);
          }

          void KeywordTokenizer::reset() const
          {
            env->callVoidMethod(this$, mids$[mid_reset_f2cc1bce94666404]);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace core {
          static PyObject *t_KeywordTokenizer_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_KeywordTokenizer_instance_(PyTypeObject *type, PyObject *arg);
          static int t_KeywordTokenizer_init_(t_KeywordTokenizer *self, PyObject *args, PyObject *kwds);
          static PyObject *t_KeywordTokenizer_end(t_KeywordTokenizer *self, PyObject *args);
          static PyObject *t_KeywordTokenizer_incrementToken(t_KeywordTokenizer *self, PyObject *args);
          static PyObject *t_KeywordTokenizer_reset(t_KeywordTokenizer *self, PyObject *args);

          static PyMethodDef t_KeywordTokenizer__methods_[] = {
            DECLARE_METHOD(t_KeywordTokenizer, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_KeywordTokenizer, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_KeywordTokenizer, end, METH_VARARGS),
            DECLARE_METHOD(t_KeywordTokenizer, incrementToken, METH_VARARGS),
            DECLARE_METHOD(t_KeywordTokenizer, reset, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          static PyType_Slot PY_TYPE_SLOTS(KeywordTokenizer)[] = {
            { Py_tp_methods, t_KeywordTokenizer__methods_ },
            { Py_tp_init, (void *) t_KeywordTokenizer_init_ },
            { 0, NULL }
          };

          static PyType_Def *PY_TYPE_BASES(KeywordTokenizer)[] = {
            &PY_TYPE_DEF(::org::apache::lucene::analysis::Tokenizer),
            NULL
          };

          DEFINE_TYPE(KeywordTokenizer, t_KeywordTokenizer, KeywordTokenizer);

          void t_KeywordTokenizer::install(PyObject *module)
          {
            installType(&PY_TYPE(KeywordTokenizer), &PY_TYPE_DEF(KeywordTokenizer), module, "KeywordTokenizer", 0);
          }

          void t_KeywordTokenizer::initialize(PyObject *module)
          {
            PyObject_SetAttrString((PyObject *) PY_TYPE(KeywordTokenizer), "class_", make_descriptor(KeywordTokenizer::initializeClass, 1));
            PyObject_SetAttrString((PyObject *) PY_TYPE(KeywordTokenizer), "wrapfn_", make_descriptor(t_KeywordTokenizer::wrap_jobject));
            PyObject_SetAttrString((PyObject *) PY_TYPE(KeywordTokenizer), "boxfn_", make_descriptor(boxObject));
            env->getClass(KeywordTokenizer::initializeClass);
            PyObject_SetAttrString((PyObject *) PY_TYPE(KeywordTokenizer), "DEFAULT_BUFFER_SIZE", make_descriptor(KeywordTokenizer::DEFAULT_BUFFER_SIZE));
          }

          static PyObject *t_KeywordTokenizer_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, KeywordTokenizer::initializeClass, 1)))
              return NULL;
            return t_KeywordTokenizer::wrap_Object(KeywordTokenizer(((t_KeywordTokenizer *) arg)->object.this$));
          }
          static PyObject *t_KeywordTokenizer_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, KeywordTokenizer::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_KeywordTokenizer_init_(t_KeywordTokenizer *self, PyObject *args, PyObject *kwds)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 0:
              {
                KeywordTokenizer object((jobject) NULL);

                INT_CALL(object = KeywordTokenizer());
                self->object = object;
                break;
              }
             case 1:
              {
                jint a0;
                KeywordTokenizer object((jobject) NULL);

                if (!parseArgs(args, "I", &a0))
                {
                  INT_CALL(object = KeywordTokenizer(a0));
                  self->object = object;
                  break;
                }
              }
              goto err;
             case 2:
              {
                ::org::apache::lucene::util::AttributeFactory a0((jobject) NULL);
                jint a1;
                KeywordTokenizer object((jobject) NULL);

                if (!parseArgs(args, "kI", ::org::apache::lucene::util::AttributeFactory::initializeClass, &a0, &a1))
                {
                  INT_CALL(object = KeywordTokenizer(a0, a1));
                  self->object = object;
                  break;
                }
              }
             default:
             err:
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_KeywordTokenizer_end(t_KeywordTokenizer *self, PyObject *args)
          {

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(self->object.end());
              Py_RETURN_NONE;
            }

            return callSuper(PY_TYPE(KeywordTokenizer), (PyObject *) self, "end", args, 2);
          }

          static PyObject *t_KeywordTokenizer_incrementToken(t_KeywordTokenizer *self, PyObject *args)
          {
            jboolean result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.incrementToken());
              Py_RETURN_BOOL(result);
            }

            return callSuper(PY_TYPE(KeywordTokenizer), (PyObject *) self, "incrementToken", args, 2);
          }

          static PyObject *t_KeywordTokenizer_reset(t_KeywordTokenizer *self, PyObject *args)
          {

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(self->object.reset());
              Py_RETURN_NONE;
            }

            return callSuper(PY_TYPE(KeywordTokenizer), (PyObject *) self, "reset", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/index/SlowImpactsEnum.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/index/PostingsEnum.h"
#include "org/apache/lucene/index/Impacts.h"
#include "org/apache/lucene/util/BytesRef.h"
#include "java/io/IOException.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {

        ::java::lang::Class *SlowImpactsEnum::class$ = NULL;
        jmethodID *SlowImpactsEnum::mids$ = NULL;
        bool SlowImpactsEnum::live$ = false;

        jclass SlowImpactsEnum::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/index/SlowImpactsEnum");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_00af2cc6e79e7447] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/index/PostingsEnum;)V");
            mids$[mid_advance_1e143afe1894d213] = env->getMethodID(cls, "advance", "(I)I");
            mids$[mid_advanceShallow_040c4cd0390c5aff] = env->getMethodID(cls, "advanceShallow", "(I)V");
            mids$[mid_cost_2e5ae9edcb9b072f] = env->getMethodID(cls, "cost", "()J");
            mids$[mid_docID_9972fcc56b44e79d] = env->getMethodID(cls, "docID", "()I");
            mids$[mid_endOffset_9972fcc56b44e79d] = env->getMethodID(cls, "endOffset", "()I");
            mids$[mid_freq_9972fcc56b44e79d] = env->getMethodID(cls, "freq", "()I");
            mids$[mid_getImpacts_292e6cb194dff836] = env->getMethodID(cls, "getImpacts", "()Lorg/apache/lucene/index/Impacts;");
            mids$[mid_getPayload_7af2ea2e37ce82b8] = env->getMethodID(cls, "getPayload", "()Lorg/apache/lucene/util/BytesRef;");
            mids$[mid_nextDoc_9972fcc56b44e79d] = env->getMethodID(cls, "nextDoc", "()I");
            mids$[mid_nextPosition_9972fcc56b44e79d] = env->getMethodID(cls, "nextPosition", "()I");
            mids$[mid_startOffset_9972fcc56b44e79d] = env->getMethodID(cls, "startOffset", "()I");

            class$ = new ::java::lang::Class(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        SlowImpactsEnum::SlowImpactsEnum(const ::org::apache::lucene::index::PostingsEnum & a0) : ::org::apache::lucene::index::ImpactsEnum(env->newObject(initializeClass, &mids$, mid_init$_00af2cc6e79e7447, a0.this$)) {}

        jint SlowImpactsEnum::advance(jint a0) const
        {
          return env->callIntMethod(this$, mids$[mid_advance_1e143afe1894d213], a0);
        }

        void SlowImpactsEnum::advanceShallow(jint a0) const
        {
          env->callVoidMethod(this$, mids$[mid_advanceShallow_040c4cd0390c5aff], a0);
        }

        jlong SlowImpactsEnum::cost() const
        {
          return env->callLongMethod(this$, mids$[mid_cost_2e5ae9edcb9b072f]);
        }

        jint SlowImpactsEnum::docID() const
        {
          return env->callIntMethod(this$, mids$[mid_docID_9972fcc56b44e79d]);
        }

        jint SlowImpactsEnum::endOffset() const
        {
          return env->callIntMethod(this$, mids$[mid_endOffset_9972fcc56b44e79d]);
        }

        jint SlowImpactsEnum::freq() const
        {
          return env->callIntMethod(this$, mids$[mid_freq_9972fcc56b44e79d]);
        }

        ::org::apache::lucene::index::Impacts SlowImpactsEnum::getImpacts() const
        {
          return ::org::apache::lucene::index::Impacts(env->callObjectMethod(this$, mids$[mid_getImpacts_292e6cb194dff836]));
        }

        ::org::apache::lucene::util::BytesRef SlowImpactsEnum::getPayload() const
        {
          return ::org::apache::lucene::util::BytesRef(env->callObjectMethod(this$, mids$[mid_getPayload_7af2ea2e37ce82b8]));
        }

        jint SlowImpactsEnum::nextDoc() const
        {
          return env->callIntMethod(this$, mids$[mid_nextDoc_9972fcc56b44e79d]);
        }

        jint SlowImpactsEnum::nextPosition() const
        {
          return env->callIntMethod(this$, mids$[mid_nextPosition_9972fcc56b44e79d]);
        }

        jint SlowImpactsEnum::startOffset() const
        {
          return env->callIntMethod(this$, mids$[mid_startOffset_9972fcc56b44e79d]);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {
        static PyObject *t_SlowImpactsEnum_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_SlowImpactsEnum_instance_(PyTypeObject *type, PyObject *arg);
        static int t_SlowImpactsEnum_init_(t_SlowImpactsEnum *self, PyObject *args, PyObject *kwds);
        static PyObject *t_SlowImpactsEnum_advance(t_SlowImpactsEnum *self, PyObject *args);
        static PyObject *t_SlowImpactsEnum_advanceShallow(t_SlowImpactsEnum *self, PyObject *args);
        static PyObject *t_SlowImpactsEnum_cost(t_SlowImpactsEnum *self, PyObject *args);
        static PyObject *t_SlowImpactsEnum_docID(t_SlowImpactsEnum *self, PyObject *args);
        static PyObject *t_SlowImpactsEnum_endOffset(t_SlowImpactsEnum *self, PyObject *args);
        static PyObject *t_SlowImpactsEnum_freq(t_SlowImpactsEnum *self, PyObject *args);
        static PyObject *t_SlowImpactsEnum_getImpacts(t_SlowImpactsEnum *self, PyObject *args);
        static PyObject *t_SlowImpactsEnum_getPayload(t_SlowImpactsEnum *self, PyObject *args);
        static PyObject *t_SlowImpactsEnum_nextDoc(t_SlowImpactsEnum *self, PyObject *args);
        static PyObject *t_SlowImpactsEnum_nextPosition(t_SlowImpactsEnum *self, PyObject *args);
        static PyObject *t_SlowImpactsEnum_startOffset(t_SlowImpactsEnum *self, PyObject *args);
        static PyObject *t_SlowImpactsEnum_get__impacts(t_SlowImpactsEnum *self, void *data);
        static PyObject *t_SlowImpactsEnum_get__payload(t_SlowImpactsEnum *self, void *data);
        static PyGetSetDef t_SlowImpactsEnum__fields_[] = {
          DECLARE_GET_FIELD(t_SlowImpactsEnum, impacts),
          DECLARE_GET_FIELD(t_SlowImpactsEnum, payload),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_SlowImpactsEnum__methods_[] = {
          DECLARE_METHOD(t_SlowImpactsEnum, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_SlowImpactsEnum, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_SlowImpactsEnum, advance, METH_VARARGS),
          DECLARE_METHOD(t_SlowImpactsEnum, advanceShallow, METH_VARARGS),
          DECLARE_METHOD(t_SlowImpactsEnum, cost, METH_VARARGS),
          DECLARE_METHOD(t_SlowImpactsEnum, docID, METH_VARARGS),
          DECLARE_METHOD(t_SlowImpactsEnum, endOffset, METH_VARARGS),
          DECLARE_METHOD(t_SlowImpactsEnum, freq, METH_VARARGS),
          DECLARE_METHOD(t_SlowImpactsEnum, getImpacts, METH_VARARGS),
          DECLARE_METHOD(t_SlowImpactsEnum, getPayload, METH_VARARGS),
          DECLARE_METHOD(t_SlowImpactsEnum, nextDoc, METH_VARARGS),
          DECLARE_METHOD(t_SlowImpactsEnum, nextPosition, METH_VARARGS),
          DECLARE_METHOD(t_SlowImpactsEnum, startOffset, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        static PyType_Slot PY_TYPE_SLOTS(SlowImpactsEnum)[] = {
          { Py_tp_methods, t_SlowImpactsEnum__methods_ },
          { Py_tp_init, (void *) t_SlowImpactsEnum_init_ },
          { Py_tp_getset, t_SlowImpactsEnum__fields_ },
          { 0, NULL }
        };

        static PyType_Def *PY_TYPE_BASES(SlowImpactsEnum)[] = {
          &PY_TYPE_DEF(::org::apache::lucene::index::ImpactsEnum),
          NULL
        };

        DEFINE_TYPE(SlowImpactsEnum, t_SlowImpactsEnum, SlowImpactsEnum);

        void t_SlowImpactsEnum::install(PyObject *module)
        {
          installType(&PY_TYPE(SlowImpactsEnum), &PY_TYPE_DEF(SlowImpactsEnum), module, "SlowImpactsEnum", 0);
        }

        void t_SlowImpactsEnum::initialize(PyObject *module)
        {
          PyObject_SetAttrString((PyObject *) PY_TYPE(SlowImpactsEnum), "class_", make_descriptor(SlowImpactsEnum::initializeClass, 1));
          PyObject_SetAttrString((PyObject *) PY_TYPE(SlowImpactsEnum), "wrapfn_", make_descriptor(t_SlowImpactsEnum::wrap_jobject));
          PyObject_SetAttrString((PyObject *) PY_TYPE(SlowImpactsEnum), "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_SlowImpactsEnum_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, SlowImpactsEnum::initializeClass, 1)))
            return NULL;
          return t_SlowImpactsEnum::wrap_Object(SlowImpactsEnum(((t_SlowImpactsEnum *) arg)->object.this$));
        }
        static PyObject *t_SlowImpactsEnum_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, SlowImpactsEnum::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_SlowImpactsEnum_init_(t_SlowImpactsEnum *self, PyObject *args, PyObject *kwds)
        {
          ::org::apache::lucene::index::PostingsEnum a0((jobject) NULL);
          SlowImpactsEnum object((jobject) NULL);

          if (!parseArgs(args, "k", ::org::apache::lucene::index::PostingsEnum::initializeClass, &a0))
          {
            INT_CALL(object = SlowImpactsEnum(a0));
            self->object = object;
          }
          else
          {
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }

        static PyObject *t_SlowImpactsEnum_advance(t_SlowImpactsEnum *self, PyObject *args)
        {
          jint a0;
          jint result;

          if (!parseArgs(args, "I", &a0))
          {
            OBJ_CALL(result = self->object.advance(a0));
            return PyLong_FromLong((long) result);
          }

          return callSuper(PY_TYPE(SlowImpactsEnum), (PyObject *) self, "advance", args, 2);
        }

        static PyObject *t_SlowImpactsEnum_advanceShallow(t_SlowImpactsEnum *self, PyObject *args)
        {
          jint a0;

          if (!parseArgs(args, "I", &a0))
          {
            OBJ_CALL(self->object.advanceShallow(a0));
            Py_RETURN_NONE;
          }

          return callSuper(PY_TYPE(SlowImpactsEnum), (PyObject *) self, "advanceShallow", args, 2);
        }

        static PyObject *t_SlowImpactsEnum_cost(t_SlowImpactsEnum *self, PyObject *args)
        {
          jlong result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.cost());
            return PyLong_FromLongLong((PY_LONG_LONG) result);
          }

          return callSuper(PY_TYPE(SlowImpactsEnum), (PyObject *) self, "cost", args, 2);
        }

        static PyObject *t_SlowImpactsEnum_docID(t_SlowImpactsEnum *self, PyObject *args)
        {
          jint result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.docID());
            return PyLong_FromLong((long) result);
          }

          return callSuper(PY_TYPE(SlowImpactsEnum), (PyObject *) self, "docID", args, 2);
        }

        static PyObject *t_SlowImpactsEnum_endOffset(t_SlowImpactsEnum *self, PyObject *args)
        {
          jint result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.endOffset());
            return PyLong_FromLong((long) result);
          }

          return callSuper(PY_TYPE(SlowImpactsEnum), (PyObject *) self, "endOffset", args, 2);
        }

        static PyObject *t_SlowImpactsEnum_freq(t_SlowImpactsEnum *self, PyObject *args)
        {
          jint result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.freq());
            return PyLong_FromLong((long) result);
          }

          return callSuper(PY_TYPE(SlowImpactsEnum), (PyObject *) self, "freq", args, 2);
        }

        static PyObject *t_SlowImpactsEnum_getImpacts(t_SlowImpactsEnum *self, PyObject *args)
        {
          ::org::apache::lucene::index::Impacts result((jobject) NULL);

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.getImpacts());
            return ::org::apache::lucene::index::t_Impacts::wrap_Object(result);
          }

          return callSuper(PY_TYPE(SlowImpactsEnum), (PyObject *) self, "getImpacts", args, 2);
        }

        static PyObject *t_SlowImpactsEnum_getPayload(t_SlowImpactsEnum *self, PyObject *args)
        {
          ::org::apache::lucene::util::BytesRef result((jobject) NULL);

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.getPayload());
            return ::org::apache::lucene::util::t_BytesRef::wrap_Object(result);
          }

          return callSuper(PY_TYPE(SlowImpactsEnum), (PyObject *) self, "getPayload", args, 2);
        }

        static PyObject *t_SlowImpactsEnum_nextDoc(t_SlowImpactsEnum *self, PyObject *args)
        {
          jint result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.nextDoc());
            return PyLong_FromLong((long) result);
          }

          return callSuper(PY_TYPE(SlowImpactsEnum), (PyObject *) self, "nextDoc", args, 2);
        }

        static PyObject *t_SlowImpactsEnum_nextPosition(t_SlowImpactsEnum *self, PyObject *args)
        {
          jint result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.nextPosition());
            return PyLong_FromLong((long) result);
          }

          return callSuper(PY_TYPE(SlowImpactsEnum), (PyObject *) self, "nextPosition", args, 2);
        }

        static PyObject *t_SlowImpactsEnum_startOffset(t_SlowImpactsEnum *self, PyObject *args)
        {
          jint result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.startOffset());
            return PyLong_FromLong((long) result);
          }

          return callSuper(PY_TYPE(SlowImpactsEnum), (PyObject *) self, "startOffset", args, 2);
        }

        static PyObject *t_SlowImpactsEnum_get__impacts(t_SlowImpactsEnum *self, void *data)
        {
          ::org::apache::lucene::index::Impacts value((jobject) NULL);
          OBJ_CALL(value = self->object.getImpacts());
          return ::org::apache::lucene::index::t_Impacts::wrap_Object(value);
        }

        static PyObject *t_SlowImpactsEnum_get__payload(t_SlowImpactsEnum *self, void *data)
        {
          ::org::apache::lucene::util::BytesRef value((jobject) NULL);
          OBJ_CALL(value = self->object.getPayload());
          return ::org::apache::lucene::util::t_BytesRef::wrap_Object(value);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/suggest/fst/FSTCompletionBuilder.h"
#include "org/apache/lucene/search/suggest/fst/BytesRefSorter.h"
#include "org/apache/lucene/search/suggest/fst/FSTCompletion.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/util/BytesRef.h"
#include "java/io/IOException.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace suggest {
          namespace fst {

            ::java::lang::Class *FSTCompletionBuilder::class$ = NULL;
            jmethodID *FSTCompletionBuilder::mids$ = NULL;
            bool FSTCompletionBuilder::live$ = false;
            jint FSTCompletionBuilder::DEFAULT_BUCKETS = (jint) 0;

            jclass FSTCompletionBuilder::initializeClass(bool getOnly)
            {
              if (getOnly)
                return (jclass) (live$ ? class$->this$ : NULL);
              if (class$ == NULL)
              {
                jclass cls = (jclass) env->findClass("org/apache/lucene/search/suggest/fst/FSTCompletionBuilder");

                mids$ = new jmethodID[max_mid];
                mids$[mid_init$_f2cc1bce94666404] = env->getMethodID(cls, "<init>", "()V");
                mids$[mid_init$_50edd9ae640e6c87] = env->getMethodID(cls, "<init>", "(ILorg/apache/lucene/search/suggest/fst/BytesRefSorter;I)V");
                mids$[mid_add_327a6f4e8624d9f4] = env->getMethodID(cls, "add", "(Lorg/apache/lucene/util/BytesRef;I)V");
                mids$[mid_build_1823ac43fdabec8f] = env->getMethodID(cls, "build", "()Lorg/apache/lucene/search/suggest/fst/FSTCompletion;");

                class$ = new ::java::lang::Class(cls);
                cls = (jclass) class$->this$;

                DEFAULT_BUCKETS = env->getStaticIntField(cls, "DEFAULT_BUCKETS");
                live$ = true;
              }
              return (jclass) class$->this$;
            }

            FSTCompletionBuilder::FSTCompletionBuilder() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_f2cc1bce94666404)) {}

            FSTCompletionBuilder::FSTCompletionBuilder(jint a0, const ::org::apache::lucene::search::suggest::fst::BytesRefSorter & a1, jint a2) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_50edd9ae640e6c87, a0, a1.this$, a2)) {}

            void FSTCompletionBuilder::add(const ::org::apache::lucene::util::BytesRef & a0, jint a1) const
            {
              env->callVoidMethod(this$, mids$[mid_add_327a6f4e8624d9f4], a0.this$, a1);
            }

            ::org::apache::lucene::search::suggest::fst::FSTCompletion FSTCompletionBuilder::build() const
            {
              return ::org::apache::lucene::search::suggest::fst::FSTCompletion(env->callObjectMethod(this$, mids$[mid_build_1823ac43fdabec8f]));
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace suggest {
          namespace fst {
            static PyObject *t_FSTCompletionBuilder_cast_(PyTypeObject *type, PyObject *arg);
            static PyObject *t_FSTCompletionBuilder_instance_(PyTypeObject *type, PyObject *arg);
            static int t_FSTCompletionBuilder_init_(t_FSTCompletionBuilder *self, PyObject *args, PyObject *kwds);
            static PyObject *t_FSTCompletionBuilder_add(t_FSTCompletionBuilder *self, PyObject *args);
            static PyObject *t_FSTCompletionBuilder_build(t_FSTCompletionBuilder *self);

            static PyMethodDef t_FSTCompletionBuilder__methods_[] = {
              DECLARE_METHOD(t_FSTCompletionBuilder, cast_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_FSTCompletionBuilder, instance_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_FSTCompletionBuilder, add, METH_VARARGS),
              DECLARE_METHOD(t_FSTCompletionBuilder, build, METH_NOARGS),
              { NULL, NULL, 0, NULL }
            };

            static PyType_Slot PY_TYPE_SLOTS(FSTCompletionBuilder)[] = {
              { Py_tp_methods, t_FSTCompletionBuilder__methods_ },
              { Py_tp_init, (void *) t_FSTCompletionBuilder_init_ },
              { 0, NULL }
            };

            static PyType_Def *PY_TYPE_BASES(FSTCompletionBuilder)[] = {
              &PY_TYPE_DEF(::java::lang::Object),
              NULL
            };

            DEFINE_TYPE(FSTCompletionBuilder, t_FSTCompletionBuilder, FSTCompletionBuilder);

            void t_FSTCompletionBuilder::install(PyObject *module)
            {
              installType(&PY_TYPE(FSTCompletionBuilder), &PY_TYPE_DEF(FSTCompletionBuilder), module, "FSTCompletionBuilder", 0);
            }

            void t_FSTCompletionBuilder::initialize(PyObject *module)
            {
              PyObject_SetAttrString((PyObject *) PY_TYPE(FSTCompletionBuilder), "class_", make_descriptor(FSTCompletionBuilder::initializeClass, 1));
              PyObject_SetAttrString((PyObject *) PY_TYPE(FSTCompletionBuilder), "wrapfn_", make_descriptor(t_FSTCompletionBuilder::wrap_jobject));
              PyObject_SetAttrString((PyObject *) PY_TYPE(FSTCompletionBuilder), "boxfn_", make_descriptor(boxObject));
              env->getClass(FSTCompletionBuilder::initializeClass);
              PyObject_SetAttrString((PyObject *) PY_TYPE(FSTCompletionBuilder), "DEFAULT_BUCKETS", make_descriptor(FSTCompletionBuilder::DEFAULT_BUCKETS));
            }

            static PyObject *t_FSTCompletionBuilder_cast_(PyTypeObject *type, PyObject *arg)
            {
              if (!(arg = castCheck(arg, FSTCompletionBuilder::initializeClass, 1)))
                return NULL;
              return t_FSTCompletionBuilder::wrap_Object(FSTCompletionBuilder(((t_FSTCompletionBuilder *) arg)->object.this$));
            }
            static PyObject *t_FSTCompletionBuilder_instance_(PyTypeObject *type, PyObject *arg)
            {
              if (!castCheck(arg, FSTCompletionBuilder::initializeClass, 0))
                Py_RETURN_FALSE;
              Py_RETURN_TRUE;
            }

            static int t_FSTCompletionBuilder_init_(t_FSTCompletionBuilder *self, PyObject *args, PyObject *kwds)
            {
              switch (PyTuple_GET_SIZE(args)) {
               case 0:
                {
                  FSTCompletionBuilder object((jobject) NULL);

                  INT_CALL(object = FSTCompletionBuilder());
                  self->object = object;
                  break;
                }
               case 3:
                {
                  jint a0;
                  ::org::apache::lucene::search::suggest::fst::BytesRefSorter a1((jobject) NULL);
                  jint a2;
                  FSTCompletionBuilder object((jobject) NULL);

                  if (!parseArgs(args, "IkI", ::org::apache::lucene::search::suggest::fst::BytesRefSorter::initializeClass, &a0, &a1, &a2))
                  {
                    INT_CALL(object = FSTCompletionBuilder(a0, a1, a2));
                    self->object = object;
                    break;
                  }
                }
               default:
                PyErr_SetArgsError((PyObject *) self, "__init__", args);
                return -1;
              }

              return 0;
            }

            static PyObject *t_FSTCompletionBuilder_add(t_FSTCompletionBuilder *self, PyObject *args)
            {
              ::org::apache::lucene::util::BytesRef a0((jobject) NULL);
              jint a1;

              if (!parseArgs(args, "kI", ::org::apache::lucene::util::BytesRef::initializeClass, &a0, &a1))
              {
                OBJ_CALL(self->object.add(a0, a1));
                Py_RETURN_NONE;
              }

              PyErr_SetArgsError((PyObject *) self, "add", args);
              return NULL;
            }

            static PyObject *t_FSTCompletionBuilder_build(t_FSTCompletionBuilder *self)
            {
              ::org::apache::lucene::search::suggest::fst::FSTCompletion result((jobject) NULL);
              OBJ_CALL(result = self->object.build());
              return ::org::apache::lucene::search::suggest::fst::t_FSTCompletion::wrap_Object(result);
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queries/function/valuesource/ComparisonBoolFunction.h"
#include "java/util/Map.h"
#include "org/apache/lucene/index/LeafReaderContext.h"
#include "org/apache/lucene/search/IndexSearcher.h"
#include "org/apache/lucene/queries/function/FunctionValues.h"
#include "java/lang/Class.h"
#include "java/lang/Object.h"
#include "java/lang/String.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/queries/function/ValueSource.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queries {
        namespace function {
          namespace valuesource {

            ::java::lang::Class *ComparisonBoolFunction::class$ = NULL;
            jmethodID *ComparisonBoolFunction::mids$ = NULL;
            bool ComparisonBoolFunction::live$ = false;

            jclass ComparisonBoolFunction::initializeClass(bool getOnly)
            {
              if (getOnly)
                return (jclass) (live$ ? class$->this$ : NULL);
              if (class$ == NULL)
              {
                jclass cls = (jclass) env->findClass("org/apache/lucene/queries/function/valuesource/ComparisonBoolFunction");

                mids$ = new jmethodID[max_mid];
                mids$[mid_init$_998a60a1cd39848c] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/queries/function/ValueSource;Lorg/apache/lucene/queries/function/ValueSource;Ljava/lang/String;)V");
                mids$[mid_compare_d3dc0352a2f5d844] = env->getMethodID(cls, "compare", "(ILorg/apache/lucene/queries/function/FunctionValues;Lorg/apache/lucene/queries/function/FunctionValues;)Z");
                mids$[mid_createWeight_69d322032c5ae159] = env->getMethodID(cls, "createWeight", "(Ljava/util/Map;Lorg/apache/lucene/search/IndexSearcher;)V");
                mids$[mid_description_db9b55ba01e03e4b] = env->getMethodID(cls, "description", "()Ljava/lang/String;");
                mids$[mid_equals_8b72f2dcdde6fd1d] = env->getMethodID(cls, "equals", "(Ljava/lang/Object;)Z");
                mids$[mid_getValues_ede8eccd3e97f32c] = env->getMethodID(cls, "getValues", "(Ljava/util/Map;Lorg/apache/lucene/index/LeafReaderContext;)Lorg/apache/lucene/queries/function/FunctionValues;");
                mids$[mid_hashCode_9972fcc56b44e79d] = env->getMethodID(cls, "hashCode", "()I");
                mids$[mid_name_db9b55ba01e03e4b] = env->getMethodID(cls, "name", "()Ljava/lang/String;");

                class$ = new ::java::lang::Class(cls);
                live$ = true;
              }
              return (jclass) class$->this$;
            }

            ComparisonBoolFunction::ComparisonBoolFunction(const ::org::apache::lucene::queries::function::ValueSource & a0, const ::org::apache::lucene::queries::function::ValueSource & a1, const ::java::lang::String & a2) : ::org::apache::lucene::queries::function::valuesource::BoolFunction(env->newObject(initializeClass, &mids$, mid_init$_998a60a1cd39848c, a0.this$, a1.this$, a2.this$)) {}

            jboolean ComparisonBoolFunction::compare(jint a0, const ::org::apache::lucene::queries::function::FunctionValues & a1, const ::org::apache::lucene::queries::function::FunctionValues & a2) const
            {
              return env->callBooleanMethod(this$, mids$[mid_compare_d3dc0352a2f5d844], a0, a1.this$, a2.this$);
            }

            void ComparisonBoolFunction::createWeight(const ::java::util::Map & a0, const ::org::apache::lucene::search::IndexSearcher & a1) const
            {
              env->callVoidMethod(this$, mids$[mid_createWeight_69d322032c5ae159], a0.this$, a1.this$);
            }

            ::java::lang::String ComparisonBoolFunction::description() const
            {
              return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_description_db9b55ba01e03e4b]));
            }

            jboolean ComparisonBoolFunction::equals(const ::java::lang::Object & a0) const
            {
              return env->callBooleanMethod(this$, mids$[mid_equals_8b72f2dcdde6fd1d], a0.this$);
            }

            ::org::apache::lucene::queries::function::FunctionValues ComparisonBoolFunction::getValues(const ::java::util::Map & a0, const ::org::apache::lucene::index::LeafReaderContext & a1) const
            {
              return ::org::apache::lucene::queries::function::FunctionValues(env->callObjectMethod(this$, mids$[mid_getValues_ede8eccd3e97f32c], a0.this$, a1.this$));
            }

            jint ComparisonBoolFunction::hashCode() const
            {
              return env->callIntMethod(this$, mids$[mid_hashCode_9972fcc56b44e79d]);
            }

            ::java::lang::String ComparisonBoolFunction::name() const
            {
              return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_name_db9b55ba01e03e4b]));
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queries {
        namespace function {
          namespace valuesource {
            static PyObject *t_ComparisonBoolFunction_cast_(PyTypeObject *type, PyObject *arg);
            static PyObject *t_ComparisonBoolFunction_instance_(PyTypeObject *type, PyObject *arg);
            static int t_ComparisonBoolFunction_init_(t_ComparisonBoolFunction *self, PyObject *args, PyObject *kwds);
            static PyObject *t_ComparisonBoolFunction_compare(t_ComparisonBoolFunction *self, PyObject *args);
            static PyObject *t_ComparisonBoolFunction_createWeight(t_ComparisonBoolFunction *self, PyObject *args);
            static PyObject *t_ComparisonBoolFunction_description(t_ComparisonBoolFunction *self, PyObject *args);
            static PyObject *t_ComparisonBoolFunction_equals(t_ComparisonBoolFunction *self, PyObject *args);
            static PyObject *t_ComparisonBoolFunction_getValues(t_ComparisonBoolFunction *self, PyObject *args);
            static PyObject *t_ComparisonBoolFunction_hashCode(t_ComparisonBoolFunction *self, PyObject *args);
            static PyObject *t_ComparisonBoolFunction_name(t_ComparisonBoolFunction *self);

            static PyMethodDef t_ComparisonBoolFunction__methods_[] = {
              DECLARE_METHOD(t_ComparisonBoolFunction, cast_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_ComparisonBoolFunction, instance_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_ComparisonBoolFunction, compare, METH_VARARGS),
              DECLARE_METHOD(t_ComparisonBoolFunction, createWeight, METH_VARARGS),
              DECLARE_METHOD(t_ComparisonBoolFunction, description, METH_VARARGS),
              DECLARE_METHOD(t_ComparisonBoolFunction, equals, METH_VARARGS),
              DECLARE_METHOD(t_ComparisonBoolFunction, getValues, METH_VARARGS),
              DECLARE_METHOD(t_ComparisonBoolFunction, hashCode, METH_VARARGS),
              DECLARE_METHOD(t_ComparisonBoolFunction, name, METH_NOARGS),
              { NULL, NULL, 0, NULL }
            };

            static PyType_Slot PY_TYPE_SLOTS(ComparisonBoolFunction)[] = {
              { Py_tp_methods, t_ComparisonBoolFunction__methods_ },
              { Py_tp_init, (void *) t_ComparisonBoolFunction_init_ },
              { 0, NULL }
            };

            static PyType_Def *PY_TYPE_BASES(ComparisonBoolFunction)[] = {
              &PY_TYPE_DEF(::org::apache::lucene::queries::function::valuesource::BoolFunction),
              NULL
            };

            DEFINE_TYPE(ComparisonBoolFunction, t_ComparisonBoolFunction, ComparisonBoolFunction);

            void t_ComparisonBoolFunction::install(PyObject *module)
            {
              installType(&PY_TYPE(ComparisonBoolFunction), &PY_TYPE_DEF(ComparisonBoolFunction), module, "ComparisonBoolFunction", 0);
            }

            void t_ComparisonBoolFunction::initialize(PyObject *module)
            {
              PyObject_SetAttrString((PyObject *) PY_TYPE(ComparisonBoolFunction), "class_", make_descriptor(ComparisonBoolFunction::initializeClass, 1));
              PyObject_SetAttrString((PyObject *) PY_TYPE(ComparisonBoolFunction), "wrapfn_", make_descriptor(t_ComparisonBoolFunction::wrap_jobject));
              PyObject_SetAttrString((PyObject *) PY_TYPE(ComparisonBoolFunction), "boxfn_", make_descriptor(boxObject));
            }

            static PyObject *t_ComparisonBoolFunction_cast_(PyTypeObject *type, PyObject *arg)
            {
              if (!(arg = castCheck(arg, ComparisonBoolFunction::initializeClass, 1)))
                return NULL;
              return t_ComparisonBoolFunction::wrap_Object(ComparisonBoolFunction(((t_ComparisonBoolFunction *) arg)->object.this$));
            }
            static PyObject *t_ComparisonBoolFunction_instance_(PyTypeObject *type, PyObject *arg)
            {
              if (!castCheck(arg, ComparisonBoolFunction::initializeClass, 0))
                Py_RETURN_FALSE;
              Py_RETURN_TRUE;
            }

            static int t_ComparisonBoolFunction_init_(t_ComparisonBoolFunction *self, PyObject *args, PyObject *kwds)
            {
              ::org::apache::lucene::queries::function::ValueSource a0((jobject) NULL);
              ::org::apache::lucene::queries::function::ValueSource a1((jobject) NULL);
              ::java::lang::String a2((jobject) NULL);
              ComparisonBoolFunction object((jobject) NULL);

              if (!parseArgs(args, "kks", ::org::apache::lucene::queries::function::ValueSource::initializeClass, ::org::apache::lucene::queries::function::ValueSource::initializeClass, &a0, &a1, &a2))
              {
                INT_CALL(object = ComparisonBoolFunction(a0, a1, a2));
                self->object = object;
              }
              else
              {
                PyErr_SetArgsError((PyObject *) self, "__init__", args);
                return -1;
              }

              return 0;
            }

            static PyObject *t_ComparisonBoolFunction_compare(t_ComparisonBoolFunction *self, PyObject *args)
            {
              jint a0;
              ::org::apache::lucene::queries::function::FunctionValues a1((jobject) NULL);
              ::org::apache::lucene::queries::function::FunctionValues a2((jobject) NULL);
              jboolean result;

              if (!parseArgs(args, "Ikk", ::org::apache::lucene::queries::function::FunctionValues::initializeClass, ::org::apache::lucene::queries::function::FunctionValues::initializeClass, &a0, &a1, &a2))
              {
                OBJ_CALL(result = self->object.compare(a0, a1, a2));
                Py_RETURN_BOOL(result);
              }

              PyErr_SetArgsError((PyObject *) self, "compare", args);
              return NULL;
            }

            static PyObject *t_ComparisonBoolFunction_createWeight(t_ComparisonBoolFunction *self, PyObject *args)
            {
              ::java::util::Map a0((jobject) NULL);
              PyTypeObject **p0;
              ::org::apache::lucene::search::IndexSearcher a1((jobject) NULL);

              if (!parseArgs(args, "Kk", ::java::util::Map::initializeClass, ::org::apache::lucene::search::IndexSearcher::initializeClass, &a0, &p0, ::java::util::t_Map::parameters_, &a1))
              {
                OBJ_CALL(self->object.createWeight(a0, a1));
                Py_RETURN_NONE;
              }

              return callSuper(PY_TYPE(ComparisonBoolFunction), (PyObject *) self, "createWeight", args, 2);
            }

            static PyObject *t_ComparisonBoolFunction_description(t_ComparisonBoolFunction *self, PyObject *args)
            {
              ::java::lang::String result((jobject) NULL);

              if (!parseArgs(args, ""))
              {
                OBJ_CALL(result = self->object.description());
                return j2p(result);
              }

              return callSuper(PY_TYPE(ComparisonBoolFunction), (PyObject *) self, "description", args, 2);
            }

            static PyObject *t_ComparisonBoolFunction_equals(t_ComparisonBoolFunction *self, PyObject *args)
            {
              ::java::lang::Object a0((jobject) NULL);
              jboolean result;

              if (!parseArgs(args, "o", &a0))
              {
                OBJ_CALL(result = self->object.equals(a0));
                Py_RETURN_BOOL(result);
              }

              return callSuper(PY_TYPE(ComparisonBoolFunction), (PyObject *) self, "equals", args, 2);
            }

            static PyObject *t_ComparisonBoolFunction_getValues(t_ComparisonBoolFunction *self, PyObject *args)
            {
              ::java::util::Map a0((jobject) NULL);
              PyTypeObject **p0;
              ::org::apache::lucene::index::LeafReaderContext a1((jobject) NULL);
              ::org::apache::lucene::queries::function::FunctionValues result((jobject) NULL);

              if (!parseArgs(args, "Kk", ::java::util::Map::initializeClass, ::org::apache::lucene::index::LeafReaderContext::initializeClass, &a0, &p0, ::java::util::t_Map::parameters_, &a1))
              {
                OBJ_CALL(result = self->object.getValues(a0, a1));
                return ::org::apache::lucene::queries::function::t_FunctionValues::wrap_Object(result);
              }

              return callSuper(PY_TYPE(ComparisonBoolFunction), (PyObject *) self, "getValues", args, 2);
            }

            static PyObject *t_ComparisonBoolFunction_hashCode(t_ComparisonBoolFunction *self, PyObject *args)
            {
              jint result;

              if (!parseArgs(args, ""))
              {
                OBJ_CALL(result = self->object.hashCode());
                return PyLong_FromLong((long) result);
              }

              return callSuper(PY_TYPE(ComparisonBoolFunction), (PyObject *) self, "hashCode", args, 2);
            }

            static PyObject *t_ComparisonBoolFunction_name(t_ComparisonBoolFunction *self)
            {
              ::java::lang::String result((jobject) NULL);
              OBJ_CALL(result = self->object.name());
              return j2p(result);
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/util/packed/AbstractBlockPackedWriter.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/store/DataOutput.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        namespace packed {

          ::java::lang::Class *AbstractBlockPackedWriter::class$ = NULL;
          jmethodID *AbstractBlockPackedWriter::mids$ = NULL;
          bool AbstractBlockPackedWriter::live$ = false;

          jclass AbstractBlockPackedWriter::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/util/packed/AbstractBlockPackedWriter");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_18f961b5c3a68dc0] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/store/DataOutput;I)V");
              mids$[mid_add_9c778c9bce6694df] = env->getMethodID(cls, "add", "(J)V");
              mids$[mid_finish_f2cc1bce94666404] = env->getMethodID(cls, "finish", "()V");
              mids$[mid_ord_2e5ae9edcb9b072f] = env->getMethodID(cls, "ord", "()J");
              mids$[mid_reset_ead2c38342037c59] = env->getMethodID(cls, "reset", "(Lorg/apache/lucene/store/DataOutput;)V");
              mids$[mid_writeValues_040c4cd0390c5aff] = env->getMethodID(cls, "writeValues", "(I)V");
              mids$[mid_flush_f2cc1bce94666404] = env->getMethodID(cls, "flush", "()V");

              class$ = new ::java::lang::Class(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          AbstractBlockPackedWriter::AbstractBlockPackedWriter(const ::org::apache::lucene::store::DataOutput & a0, jint a1) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_18f961b5c3a68dc0, a0.this$, a1)) {}

          void AbstractBlockPackedWriter::add(jlong a0) const
          {
            env->callVoidMethod(this$, mids$[mid_add_9c778c9bce6694df], a0);
          }

          void AbstractBlockPackedWriter::finish() const
          {
            env->callVoidMethod(this$, mids$[mid_finish_f2cc1bce94666404]);
          }

          jlong AbstractBlockPackedWriter::ord() const
          {
            return env->callLongMethod(this$, mids$[mid_ord_2e5ae9edcb9b072f]);
          }

          void AbstractBlockPackedWriter::reset(const ::org::apache::lucene::store::DataOutput & a0) const
          {
            env->callVoidMethod(this$, mids$[mid_reset_ead2c38342037c59], a0.this$);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        namespace packed {
          static PyObject *t_AbstractBlockPackedWriter_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_AbstractBlockPackedWriter_instance_(PyTypeObject *type, PyObject *arg);
          static int t_AbstractBlockPackedWriter_init_(t_AbstractBlockPackedWriter *self, PyObject *args, PyObject *kwds);
          static PyObject *t_AbstractBlockPackedWriter_add(t_AbstractBlockPackedWriter *self, PyObject *arg);
          static PyObject *t_AbstractBlockPackedWriter_finish(t_AbstractBlockPackedWriter *self);
          static PyObject *t_AbstractBlockPackedWriter_ord(t_AbstractBlockPackedWriter *self);
          static PyObject *t_AbstractBlockPackedWriter_reset(t_AbstractBlockPackedWriter *self, PyObject *arg);

          static PyMethodDef t_AbstractBlockPackedWriter__methods_[] = {
            DECLARE_METHOD(t_AbstractBlockPackedWriter, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_AbstractBlockPackedWriter, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_AbstractBlockPackedWriter, add, METH_O),
            DECLARE_METHOD(t_AbstractBlockPackedWriter, finish, METH_NOARGS),
            DECLARE_METHOD(t_AbstractBlockPackedWriter, ord, METH_NOARGS),
            DECLARE_METHOD(t_AbstractBlockPackedWriter, reset, METH_O),
            { NULL, NULL, 0, NULL }
          };

          static PyType_Slot PY_TYPE_SLOTS(AbstractBlockPackedWriter)[] = {
            { Py_tp_methods, t_AbstractBlockPackedWriter__methods_ },
            { Py_tp_init, (void *) t_AbstractBlockPackedWriter_init_ },
            { 0, NULL }
          };

          static PyType_Def *PY_TYPE_BASES(AbstractBlockPackedWriter)[] = {
            &PY_TYPE_DEF(::java::lang::Object),
            NULL
          };

          DEFINE_TYPE(AbstractBlockPackedWriter, t_AbstractBlockPackedWriter, AbstractBlockPackedWriter);

          void t_AbstractBlockPackedWriter::install(PyObject *module)
          {
            installType(&PY_TYPE(AbstractBlockPackedWriter), &PY_TYPE_DEF(AbstractBlockPackedWriter), module, "AbstractBlockPackedWriter", 0);
          }

          void t_AbstractBlockPackedWriter::initialize(PyObject *module)
          {
            PyObject_SetAttrString((PyObject *) PY_TYPE(AbstractBlockPackedWriter), "class_", make_descriptor(AbstractBlockPackedWriter::initializeClass, 1));
            PyObject_SetAttrString((PyObject *) PY_TYPE(AbstractBlockPackedWriter), "wrapfn_", make_descriptor(t_AbstractBlockPackedWriter::wrap_jobject));
            PyObject_SetAttrString((PyObject *) PY_TYPE(AbstractBlockPackedWriter), "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_AbstractBlockPackedWriter_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, AbstractBlockPackedWriter::initializeClass, 1)))
              return NULL;
            return t_AbstractBlockPackedWriter::wrap_Object(AbstractBlockPackedWriter(((t_AbstractBlockPackedWriter *) arg)->object.this$));
          }
          static PyObject *t_AbstractBlockPackedWriter_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, AbstractBlockPackedWriter::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_AbstractBlockPackedWriter_init_(t_AbstractBlockPackedWriter *self, PyObject *args, PyObject *kwds)
          {
            ::org::apache::lucene::store::DataOutput a0((jobject) NULL);
            jint a1;
            AbstractBlockPackedWriter object((jobject) NULL);

            if (!parseArgs(args, "kI", ::org::apache::lucene::store::DataOutput::initializeClass, &a0, &a1))
            {
              INT_CALL(object = AbstractBlockPackedWriter(a0, a1));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_AbstractBlockPackedWriter_add(t_AbstractBlockPackedWriter *self, PyObject *arg)
          {
            jlong a0;

            if (!parseArg(arg, "J", &a0))
            {
              OBJ_CALL(self->object.add(a0));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError((PyObject *) self, "add", arg);
            return NULL;
          }

          static PyObject *t_AbstractBlockPackedWriter_finish(t_AbstractBlockPackedWriter *self)
          {
            OBJ_CALL(self->object.finish());
            Py_RETURN_NONE;
          }

          static PyObject *t_AbstractBlockPackedWriter_ord(t_AbstractBlockPackedWriter *self)
          {
            jlong result;
            OBJ_CALL(result = self->object.ord());
            return PyLong_FromLongLong((PY_LONG_LONG) result);
          }

          static PyObject *t_AbstractBlockPackedWriter_reset(t_AbstractBlockPackedWriter *self, PyObject *arg)
          {
            ::org::apache::lucene::store::DataOutput a0((jobject) NULL);

            if (!parseArg(arg, "k", ::org::apache::lucene::store::DataOutput::initializeClass, &a0))
            {
              OBJ_CALL(self->object.reset(a0));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError((PyObject *) self, "reset", arg);
            return NULL;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/uhighlight/TokenStreamOffsetStrategy.h"
#include "org/apache/lucene/analysis/Analyzer.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/search/uhighlight/OffsetsEnum.h"
#include "org/apache/lucene/index/LeafReader.h"
#include "java/lang/String.h"
#include "org/apache/lucene/search/uhighlight/UHComponents.h"
#include "java/io/IOException.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace uhighlight {

          ::java::lang::Class *TokenStreamOffsetStrategy::class$ = NULL;
          jmethodID *TokenStreamOffsetStrategy::mids$ = NULL;
          bool TokenStreamOffsetStrategy::live$ = false;

          jclass TokenStreamOffsetStrategy::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/search/uhighlight/TokenStreamOffsetStrategy");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_969950458d02784c] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/search/uhighlight/UHComponents;Lorg/apache/lucene/analysis/Analyzer;)V");
              mids$[mid_getOffsetsEnum_55596ccb3f6b81ab] = env->getMethodID(cls, "getOffsetsEnum", "(Lorg/apache/lucene/index/LeafReader;ILjava/lang/String;)Lorg/apache/lucene/search/uhighlight/OffsetsEnum;");

              class$ = new ::java::lang::Class(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          TokenStreamOffsetStrategy::TokenStreamOffsetStrategy(const ::org::apache::lucene::search::uhighlight::UHComponents & a0, const ::org::apache::lucene::analysis::Analyzer & a1) : ::org::apache::lucene::search::uhighlight::AnalysisOffsetStrategy(env->newObject(initializeClass, &mids$, mid_init$_969950458d02784c, a0.this$, a1.this$)) {}

          ::org::apache::lucene::search::uhighlight::OffsetsEnum TokenStreamOffsetStrategy::getOffsetsEnum(const ::org::apache::lucene::index::LeafReader & a0, jint a1, const ::java::lang::String & a2) const
          {
            return ::org::apache::lucene::search::uhighlight::OffsetsEnum(env->callObjectMethod(this$, mids$[mid_getOffsetsEnum_55596ccb3f6b81ab], a0.this$, a1, a2.this$));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace uhighlight {
          static PyObject *t_TokenStreamOffsetStrategy_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_TokenStreamOffsetStrategy_instance_(PyTypeObject *type, PyObject *arg);
          static int t_TokenStreamOffsetStrategy_init_(t_TokenStreamOffsetStrategy *self, PyObject *args, PyObject *kwds);
          static PyObject *t_TokenStreamOffsetStrategy_getOffsetsEnum(t_TokenStreamOffsetStrategy *self, PyObject *args);

          static PyMethodDef t_TokenStreamOffsetStrategy__methods_[] = {
            DECLARE_METHOD(t_TokenStreamOffsetStrategy, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_TokenStreamOffsetStrategy, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_TokenStreamOffsetStrategy, getOffsetsEnum, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          static PyType_Slot PY_TYPE_SLOTS(TokenStreamOffsetStrategy)[] = {
            { Py_tp_methods, t_TokenStreamOffsetStrategy__methods_ },
            { Py_tp_init, (void *) t_TokenStreamOffsetStrategy_init_ },
            { 0, NULL }
          };

          static PyType_Def *PY_TYPE_BASES(TokenStreamOffsetStrategy)[] = {
            &PY_TYPE_DEF(::org::apache::lucene::search::uhighlight::AnalysisOffsetStrategy),
            NULL
          };

          DEFINE_TYPE(TokenStreamOffsetStrategy, t_TokenStreamOffsetStrategy, TokenStreamOffsetStrategy);

          void t_TokenStreamOffsetStrategy::install(PyObject *module)
          {
            installType(&PY_TYPE(TokenStreamOffsetStrategy), &PY_TYPE_DEF(TokenStreamOffsetStrategy), module, "TokenStreamOffsetStrategy", 0);
          }

          void t_TokenStreamOffsetStrategy::initialize(PyObject *module)
          {
            PyObject_SetAttrString((PyObject *) PY_TYPE(TokenStreamOffsetStrategy), "class_", make_descriptor(TokenStreamOffsetStrategy::initializeClass, 1));
            PyObject_SetAttrString((PyObject *) PY_TYPE(TokenStreamOffsetStrategy), "wrapfn_", make_descriptor(t_TokenStreamOffsetStrategy::wrap_jobject));
            PyObject_SetAttrString((PyObject *) PY_TYPE(TokenStreamOffsetStrategy), "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_TokenStreamOffsetStrategy_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, TokenStreamOffsetStrategy::initializeClass, 1)))
              return NULL;
            return t_TokenStreamOffsetStrategy::wrap_Object(TokenStreamOffsetStrategy(((t_TokenStreamOffsetStrategy *) arg)->object.this$));
          }
          static PyObject *t_TokenStreamOffsetStrategy_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, TokenStreamOffsetStrategy::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_TokenStreamOffsetStrategy_init_(t_TokenStreamOffsetStrategy *self, PyObject *args, PyObject *kwds)
          {
            ::org::apache::lucene::search::uhighlight::UHComponents a0((jobject) NULL);
            ::org::apache::lucene::analysis::Analyzer a1((jobject) NULL);
            TokenStreamOffsetStrategy object((jobject) NULL);

            if (!parseArgs(args, "kk", ::org::apache::lucene::search::uhighlight::UHComponents::initializeClass, ::org::apache::lucene::analysis::Analyzer::initializeClass, &a0, &a1))
            {
              INT_CALL(object = TokenStreamOffsetStrategy(a0, a1));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_TokenStreamOffsetStrategy_getOffsetsEnum(t_TokenStreamOffsetStrategy *self, PyObject *args)
          {
            ::org::apache::lucene::index::LeafReader a0((jobject) NULL);
            jint a1;
            ::java::lang::String a2((jobject) NULL);
            ::org::apache::lucene::search::uhighlight::OffsetsEnum result((jobject) NULL);

            if (!parseArgs(args, "kIs", ::org::apache::lucene::index::LeafReader::initializeClass, &a0, &a1, &a2))
            {
              OBJ_CALL(result = self->object.getOffsetsEnum(a0, a1, a2));
              return ::org::apache::lucene::search::uhighlight::t_OffsetsEnum::wrap_Object(result);
            }

            return callSuper(PY_TYPE(TokenStreamOffsetStrategy), (PyObject *) self, "getOffsetsEnum", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/spell/SuggestWord.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace spell {

          ::java::lang::Class *SuggestWord::class$ = NULL;
          jmethodID *SuggestWord::mids$ = NULL;
          jfieldID *SuggestWord::fids$ = NULL;
          bool SuggestWord::live$ = false;

          jclass SuggestWord::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/search/spell/SuggestWord");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_f2cc1bce94666404] = env->getMethodID(cls, "<init>", "()V");

              fids$ = new jfieldID[max_fid];
              fids$[fid_freq] = env->getFieldID(cls, "freq", "I");
              fids$[fid_score] = env->getFieldID(cls, "score", "F");
              fids$[fid_string] = env->getFieldID(cls, "string", "Ljava/lang/String;");

              class$ = new ::java::lang::Class(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          SuggestWord::SuggestWord() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_f2cc1bce94666404)) {}

          jint SuggestWord::_get_freq() const
          {
            return env->getIntField(this$, fids$[fid_freq]);
          }

          void SuggestWord::_set_freq(jint a0) const
          {
            env->setIntField(this$, fids$[fid_freq], a0);
          }

          jfloat SuggestWord::_get_score() const
          {
            return env->getFloatField(this$, fids$[fid_score]);
          }

          void SuggestWord::_set_score(jfloat a0) const
          {
            env->setFloatField(this$, fids$[fid_score], a0);
          }

          ::java::lang::String SuggestWord::_get_string() const
          {
            return ::java::lang::String(env->getObjectField(this$, fids$[fid_string]));
          }

          void SuggestWord::_set_string(const ::java::lang::String & a0) const
          {
            env->setObjectField(this$, fids$[fid_string], a0.this$);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace spell {
          static PyObject *t_SuggestWord_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_SuggestWord_instance_(PyTypeObject *type, PyObject *arg);
          static int t_SuggestWord_init_(t_SuggestWord *self, PyObject *args, PyObject *kwds);
          static PyObject *t_SuggestWord_get__freq(t_SuggestWord *self, void *data);
          static int t_SuggestWord_set__freq(t_SuggestWord *self, PyObject *arg, void *data);
          static PyObject *t_SuggestWord_get__score(t_SuggestWord *self, void *data);
          static int t_SuggestWord_set__score(t_SuggestWord *self, PyObject *arg, void *data);
          static PyObject *t_SuggestWord_get__string(t_SuggestWord *self, void *data);
          static int t_SuggestWord_set__string(t_SuggestWord *self, PyObject *arg, void *data);

          static PyGetSetDef t_SuggestWord__fields_[] = {
            DECLARE_GETSET_FIELD(t_SuggestWord, freq),
            DECLARE_GETSET_FIELD(t_SuggestWord, score),
            DECLARE_GETSET_FIELD(t_SuggestWord, string),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_SuggestWord__methods_[] = {
            DECLARE_METHOD(t_SuggestWord, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_SuggestWord, instance_, METH_O | METH_CLASS),
            { NULL, NULL, 0, NULL }
          };

          static PyType_Slot PY_TYPE_SLOTS(SuggestWord)[] = {
            { Py_tp_methods, t_SuggestWord__methods_ },
            { Py_tp_init, (void *) t_SuggestWord_init_ },
            { Py_tp_getset, t_SuggestWord__fields_ },
            { 0, NULL }
          };

          static PyType_Def *PY_TYPE_BASES(SuggestWord)[] = {
            &PY_TYPE_DEF(::java::lang::Object),
            NULL
          };

          DEFINE_TYPE(SuggestWord, t_SuggestWord, SuggestWord);

          void t_SuggestWord::install(PyObject *module)
          {
            installType(&PY_TYPE(SuggestWord), &PY_TYPE_DEF(SuggestWord), module, "SuggestWord", 0);
          }

          void t_SuggestWord::initialize(PyObject *module)
          {
            PyObject_SetAttrString((PyObject *) PY_TYPE(SuggestWord), "class_", make_descriptor(SuggestWord::initializeClass, 1));
            PyObject_SetAttrString((PyObject *) PY_TYPE(SuggestWord), "wrapfn_", make_descriptor(t_SuggestWord::wrap_jobject));
            PyObject_SetAttrString((PyObject *) PY_TYPE(SuggestWord), "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_SuggestWord_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, SuggestWord::initializeClass, 1)))
              return NULL;
            return t_SuggestWord::wrap_Object(SuggestWord(((t_SuggestWord *) arg)->object.this$));
          }
          static PyObject *t_SuggestWord_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, SuggestWord::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_SuggestWord_init_(t_SuggestWord *self, PyObject *args, PyObject *kwds)
          {
            SuggestWord object((jobject) NULL);

            INT_CALL(object = SuggestWord());
            self->object = object;

            return 0;
          }

          static PyObject *t_SuggestWord_get__freq(t_SuggestWord *self, void *data)
          {
            jint value;
            OBJ_CALL(value = self->object._get_freq());
            return PyLong_FromLong((long) value);
          }
          static int t_SuggestWord_set__freq(t_SuggestWord *self, PyObject *arg, void *data)
          {
            jint value;
            if (!parseArg(arg, "I", &value))
            {
              INT_CALL(self->object._set_freq(value));
              return 0;
            }
            PyErr_SetArgsError((PyObject *) self, "freq", arg);
            return -1;
          }

          static PyObject *t_SuggestWord_get__score(t_SuggestWord *self, void *data)
          {
            jfloat value;
            OBJ_CALL(value = self->object._get_score());
            return PyFloat_FromDouble((double) value);
          }
          static int t_SuggestWord_set__score(t_SuggestWord *self, PyObject *arg, void *data)
          {
            jfloat value;
            if (!parseArg(arg, "F", &value))
            {
              INT_CALL(self->object._set_score(value));
              return 0;
            }
            PyErr_SetArgsError((PyObject *) self, "score", arg);
            return -1;
          }

          static PyObject *t_SuggestWord_get__string(t_SuggestWord *self, void *data)
          {
            ::java::lang::String value((jobject) NULL);
            OBJ_CALL(value = self->object._get_string());
            return j2p(value);
          }
          static int t_SuggestWord_set__string(t_SuggestWord *self, PyObject *arg, void *data)
          {
            ::java::lang::String value((jobject) NULL);
            if (!parseArg(arg, "s", &value))
            {
              INT_CALL(self->object._set_string(value));
              return 0;
            }
            PyErr_SetArgsError((PyObject *) self, "string", arg);
            return -1;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queries/function/valuesource/DualFloatFunction.h"
#include "java/util/Map.h"
#include "org/apache/lucene/index/LeafReaderContext.h"
#include "org/apache/lucene/search/IndexSearcher.h"
#include "org/apache/lucene/queries/function/FunctionValues.h"
#include "java/lang/Class.h"
#include "java/lang/Object.h"
#include "java/lang/String.h"
#include "java/io/IOException.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queries {
        namespace function {
          namespace valuesource {

            ::java::lang::Class *DualFloatFunction::class$ = NULL;
            jmethodID *DualFloatFunction::mids$ = NULL;
            bool DualFloatFunction::live$ = false;

            jclass DualFloatFunction::initializeClass(bool getOnly)
            {
              if (getOnly)
                return (jclass) (live$ ? class$->this$ : NULL);
              if (class$ == NULL)
              {
                jclass cls = (jclass) env->findClass("org/apache/lucene/queries/function/valuesource/DualFloatFunction");

                mids$ = new jmethodID[max_mid];
                mids$[mid_init$_6d73cd8677453118] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/queries/function/ValueSource;Lorg/apache/lucene/queries/function/ValueSource;)V");
                mids$[mid_createWeight_69d322032c5ae159] = env->getMethodID(cls, "createWeight", "(Ljava/util/Map;Lorg/apache/lucene/search/IndexSearcher;)V");
                mids$[mid_description_db9b55ba01e03e4b] = env->getMethodID(cls, "description", "()Ljava/lang/String;");
                mids$[mid_equals_8b72f2dcdde6fd1d] = env->getMethodID(cls, "equals", "(Ljava/lang/Object;)Z");
                mids$[mid_getValues_ede8eccd3e97f32c] = env->getMethodID(cls, "getValues", "(Ljava/util/Map;Lorg/apache/lucene/index/LeafReaderContext;)Lorg/apache/lucene/queries/function/FunctionValues;");
                mids$[mid_hashCode_9972fcc56b44e79d] = env->getMethodID(cls, "hashCode", "()I");
                mids$[mid_func_328d6b0dd62870d9] = env->getMethodID(cls, "func", "(ILorg/apache/lucene/queries/function/FunctionValues;Lorg/apache/lucene/queries/function/FunctionValues;)F");
                mids$[mid_name_db9b55ba01e03e4b] = env->getMethodID(cls, "name", "()Ljava/lang/String;");

                class$ = new ::java::lang::Class(cls);
                live$ = true;
              }
              return (jclass) class$->this$;
            }

            DualFloatFunction::DualFloatFunction(const ::org::apache::lucene::queries::function::ValueSource & a0, const ::org::apache::lucene::queries::function::ValueSource & a1) : ::org::apache::lucene::queries::function::ValueSource(env->newObject(initializeClass, &mids$, mid_init$_6d73cd8677453118, a0.this$, a1.this$)) {}

            void DualFloatFunction::createWeight(const ::java::util::Map & a0, const ::org::apache::lucene::search::IndexSearcher & a1) const
            {
              env->callVoidMethod(this$, mids$[mid_createWeight_69d322032c5ae159], a0.this$, a1.this$);
            }

            ::java::lang::String DualFloatFunction::description() const
            {
              return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_description_db9b55ba01e03e4b]));
            }

            jboolean DualFloatFunction::equals(const ::java::lang::Object & a0) const
            {
              return env->callBooleanMethod(this$, mids$[mid_equals_8b72f2dcdde6fd1d], a0.this$);
            }

            ::org::apache::lucene::queries::function::FunctionValues DualFloatFunction::getValues(const ::java::util::Map & a0, const ::org::apache::lucene::index::LeafReaderContext & a1) const
            {
              return ::org::apache::lucene::queries::function::FunctionValues(env->callObjectMethod(this$, mids$[mid_getValues_ede8eccd3e97f32c], a0.this$, a1.this$));
            }

            jint DualFloatFunction::hashCode() const
            {
              return env->callIntMethod(this$, mids$[mid_hashCode_9972fcc56b44e79d]);
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queries {
        namespace function {
          namespace valuesource {
            static PyObject *t_DualFloatFunction_cast_(PyTypeObject *type, PyObject *arg);
            static PyObject *t_DualFloatFunction_instance_(PyTypeObject *type, PyObject *arg);
            static int t_DualFloatFunction_init_(t_DualFloatFunction *self, PyObject *args, PyObject *kwds);
            static PyObject *t_DualFloatFunction_createWeight(t_DualFloatFunction *self, PyObject *args);
            static PyObject *t_DualFloatFunction_description(t_DualFloatFunction *self, PyObject *args);
            static PyObject *t_DualFloatFunction_equals(t_DualFloatFunction *self, PyObject *args);
            static PyObject *t_DualFloatFunction_getValues(t_DualFloatFunction *self, PyObject *args);
            static PyObject *t_DualFloatFunction_hashCode(t_DualFloatFunction *self, PyObject *args);

            static PyMethodDef t_DualFloatFunction__methods_[] = {
              DECLARE_METHOD(t_DualFloatFunction, cast_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_DualFloatFunction, instance_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_DualFloatFunction, createWeight, METH_VARARGS),
              DECLARE_METHOD(t_DualFloatFunction, description, METH_VARARGS),
              DECLARE_METHOD(t_DualFloatFunction, equals, METH_VARARGS),
              DECLARE_METHOD(t_DualFloatFunction, getValues, METH_VARARGS),
              DECLARE_METHOD(t_DualFloatFunction, hashCode, METH_VARARGS),
              { NULL, NULL, 0, NULL }
            };

            static PyType_Slot PY_TYPE_SLOTS(DualFloatFunction)[] = {
              { Py_tp_methods, t_DualFloatFunction__methods_ },
              { Py_tp_init, (void *) t_DualFloatFunction_init_ },
              { 0, NULL }
            };

            static PyType_Def *PY_TYPE_BASES(DualFloatFunction)[] = {
              &PY_TYPE_DEF(::org::apache::lucene::queries::function::ValueSource),
              NULL
            };

            DEFINE_TYPE(DualFloatFunction, t_DualFloatFunction, DualFloatFunction);

            void t_DualFloatFunction::install(PyObject *module)
            {
              installType(&PY_TYPE(DualFloatFunction), &PY_TYPE_DEF(DualFloatFunction), module, "DualFloatFunction", 0);
            }

            void t_DualFloatFunction::initialize(PyObject *module)
            {
              PyObject_SetAttrString((PyObject *) PY_TYPE(DualFloatFunction), "class_", make_descriptor(DualFloatFunction::initializeClass, 1));
              PyObject_SetAttrString((PyObject *) PY_TYPE(DualFloatFunction), "wrapfn_", make_descriptor(t_DualFloatFunction::wrap_jobject));
              PyObject_SetAttrString((PyObject *) PY_TYPE(DualFloatFunction), "boxfn_", make_descriptor(boxObject));
            }

            static PyObject *t_DualFloatFunction_cast_(PyTypeObject *type, PyObject *arg)
            {
              if (!(arg = castCheck(arg, DualFloatFunction::initializeClass, 1)))
                return NULL;
              return t_DualFloatFunction::wrap_Object(DualFloatFunction(((t_DualFloatFunction *) arg)->object.this$));
            }
            static PyObject *t_DualFloatFunction_instance_(PyTypeObject *type, PyObject *arg)
            {
              if (!castCheck(arg, DualFloatFunction::initializeClass, 0))
                Py_RETURN_FALSE;
              Py_RETURN_TRUE;
            }

            static int t_DualFloatFunction_init_(t_DualFloatFunction *self, PyObject *args, PyObject *kwds)
            {
              ::org::apache::lucene::queries::function::ValueSource a0((jobject) NULL);
              ::org::apache::lucene::queries::function::ValueSource a1((jobject) NULL);
              DualFloatFunction object((jobject) NULL);

              if (!parseArgs(args, "kk", ::org::apache::lucene::queries::function::ValueSource::initializeClass, ::org::apache::lucene::queries::function::ValueSource::initializeClass, &a0, &a1))
              {
                INT_CALL(object = DualFloatFunction(a0, a1));
                self->object = object;
              }
              else
              {
                PyErr_SetArgsError((PyObject *) self, "__init__", args);
                return -1;
              }

              return 0;
            }

            static PyObject *t_DualFloatFunction_createWeight(t_DualFloatFunction *self, PyObject *args)
            {
              ::java::util::Map a0((jobject) NULL);
              PyTypeObject **p0;
              ::org::apache::lucene::search::IndexSearcher a1((jobject) NULL);

              if (!parseArgs(args, "Kk", ::java::util::Map::initializeClass, ::org::apache::lucene::search::IndexSearcher::initializeClass, &a0, &p0, ::java::util::t_Map::parameters_, &a1))
              {
                OBJ_CALL(self->object.createWeight(a0, a1));
                Py_RETURN_NONE;
              }

              return callSuper(PY_TYPE(DualFloatFunction), (PyObject *) self, "createWeight", args, 2);
            }

            static PyObject *t_DualFloatFunction_description(t_DualFloatFunction *self, PyObject *args)
            {
              ::java::lang::String result((jobject) NULL);

              if (!parseArgs(args, ""))
              {
                OBJ_CALL(result = self->object.description());
                return j2p(result);
              }

              return callSuper(PY_TYPE(DualFloatFunction), (PyObject *) self, "description", args, 2);
            }

            static PyObject *t_DualFloatFunction_equals(t_DualFloatFunction *self, PyObject *args)
            {
              ::java::lang::Object a0((jobject) NULL);
              jboolean result;

              if (!parseArgs(args, "o", &a0))
              {
                OBJ_CALL(result = self->object.equals(a0));
                Py_RETURN_BOOL(result);
              }

              return callSuper(PY_TYPE(DualFloatFunction), (PyObject *) self, "equals", args, 2);
            }

            static PyObject *t_DualFloatFunction_getValues(t_DualFloatFunction *self, PyObject *args)
            {
              ::java::util::Map a0((jobject) NULL);
              PyTypeObject **p0;
              ::org::apache::lucene::index::LeafReaderContext a1((jobject) NULL);
              ::org::apache::lucene::queries::function::FunctionValues result((jobject) NULL);

              if (!parseArgs(args, "Kk", ::java::util::Map::initializeClass, ::org::apache::lucene::index::LeafReaderContext::initializeClass, &a0, &p0, ::java::util::t_Map::parameters_, &a1))
              {
                OBJ_CALL(result = self->object.getValues(a0, a1));
                return ::org::apache::lucene::queries::function::t_FunctionValues::wrap_Object(result);
              }

              return callSuper(PY_TYPE(DualFloatFunction), (PyObject *) self, "getValues", args, 2);
            }

            static PyObject *t_DualFloatFunction_hashCode(t_DualFloatFunction *self, PyObject *args)
            {
              jint result;

              if (!parseArgs(args, ""))
              {
                OBJ_CALL(result = self->object.hashCode());
                return PyLong_FromLong((long) result);
              }

              return callSuper(PY_TYPE(DualFloatFunction), (PyObject *) self, "hashCode", args, 2);
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/store/ByteBufferIndexInput.h"
#include "org/apache/lucene/store/ByteBufferIndexInput.h"
#include "java/lang/Class.h"
#include "java/lang/String.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/store/RandomAccessInput.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace store {

        ::java::lang::Class *ByteBufferIndexInput::class$ = NULL;
        jmethodID *ByteBufferIndexInput::mids$ = NULL;
        bool ByteBufferIndexInput::live$ = false;

        jclass ByteBufferIndexInput::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/store/ByteBufferIndexInput");

            mids$ = new jmethodID[max_mid];
            mids$[mid_clone_22202b843a91ed14] = env->getMethodID(cls, "clone", "()Lorg/apache/lucene/store/ByteBufferIndexInput;");
            mids$[mid_close_f2cc1bce94666404] = env->getMethodID(cls, "close", "()V");
            mids$[mid_getFilePointer_2e5ae9edcb9b072f] = env->getMethodID(cls, "getFilePointer", "()J");
            mids$[mid_length_2e5ae9edcb9b072f] = env->getMethodID(cls, "length", "()J");
            mids$[mid_readByte_871cd52a74f26213] = env->getMethodID(cls, "readByte", "()B");
            mids$[mid_readByte_70f46e25a8aca047] = env->getMethodID(cls, "readByte", "(J)B");
            mids$[mid_readBytes_43fdd39c09bb2fad] = env->getMethodID(cls, "readBytes", "([BII)V");
            mids$[mid_readInt_9972fcc56b44e79d] = env->getMethodID(cls, "readInt", "()I");
            mids$[mid_readInt_694afffd0eb7dc3c] = env->getMethodID(cls, "readInt", "(J)I");
            mids$[mid_readLELongs_d07f51188c558bf8] = env->getMethodID(cls, "readLELongs", "([JII)V");
            mids$[mid_readLong_2e5ae9edcb9b072f] = env->getMethodID(cls, "readLong", "()J");
            mids$[mid_readLong_d711eecdc469624a] = env->getMethodID(cls, "readLong", "(J)J");
            mids$[mid_readShort_ec20af88366b851e] = env->getMethodID(cls, "readShort", "()S");
            mids$[mid_readShort_e963ff2cc414b347] = env->getMethodID(cls, "readShort", "(J)S");
            mids$[mid_seek_9c778c9bce6694df] = env->getMethodID(cls, "seek", "(J)V");
            mids$[mid_slice_cbd827549aa1b1b1] = env->getMethodID(cls, "slice", "(Ljava/lang/String;JJ)Lorg/apache/lucene/store/ByteBufferIndexInput;");
            mids$[mid_setCurBuf_d159d3a3e7127e81] = env->getMethodID(cls, "setCurBuf", "(Ljava/nio/ByteBuffer;)V");
            mids$[mid_buildSlice_cbd827549aa1b1b1] = env->getMethodID(cls, "buildSlice", "(Ljava/lang/String;JJ)Lorg/apache/lucene/store/ByteBufferIndexInput;");
            mids$[mid_newCloneInstance_39b4902d924e213c] = env->getMethodID(cls, "newCloneInstance", "(Ljava/lang/String;[Ljava/nio/ByteBuffer;IJ)Lorg/apache/lucene/store/ByteBufferIndexInput;");

            class$ = new ::java::lang::Class(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        ByteBufferIndexInput ByteBufferIndexInput::clone() const
        {
          return ByteBufferIndexInput(env->callObjectMethod(this$, mids$[mid_clone_22202b843a91ed14]));
        }

        void ByteBufferIndexInput::close() const
        {
          env->callVoidMethod(this$, mids$[mid_close_f2cc1bce94666404]);
        }

        jlong ByteBufferIndexInput::getFilePointer() const
        {
          return env->callLongMethod(this$, mids$[mid_getFilePointer_2e5ae9edcb9b072f]);
        }

        jlong ByteBufferIndexInput::length() const
        {
          return env->callLongMethod(this$, mids$[mid_length_2e5ae9edcb9b072f]);
        }

        jbyte ByteBufferIndexInput::readByte() const
        {
          return env->callByteMethod(this$, mids$[mid_readByte_871cd52a74f26213]);
        }

        jbyte ByteBufferIndexInput::readByte(jlong a0) const
        {
          return env->callByteMethod(this$, mids$[mid_readByte_70f46e25a8aca047], a0);
        }

        void ByteBufferIndexInput::readBytes(const JArray< jbyte > & a0, jint a1, jint a2) const
        {
          env->callVoidMethod(this$, mids$[mid_readBytes_43fdd39c09bb2fad], a0.this$, a1, a2);
        }

        jint ByteBufferIndexInput::readInt() const
        {
          return env->callIntMethod(this$, mids$[mid_readInt_9972fcc56b44e79d]);
        }

        jint ByteBufferIndexInput::readInt(jlong a0) const
        {
          return env->callIntMethod(this$, mids$[mid_readInt_694afffd0eb7dc3c], a0);
        }

        void ByteBufferIndexInput::readLELongs(const JArray< jlong > & a0, jint a1, jint a2) const
        {
          env->callVoidMethod(this$, mids$[mid_readLELongs_d07f51188c558bf8], a0.this$, a1, a2);
        }

        jlong ByteBufferIndexInput::readLong() const
        {
          return env->callLongMethod(this$, mids$[mid_readLong_2e5ae9edcb9b072f]);
        }

        jlong ByteBufferIndexInput::readLong(jlong a0) const
        {
          return env->callLongMethod(this$, mids$[mid_readLong_d711eecdc469624a], a0);
        }

        jshort ByteBufferIndexInput::readShort() const
        {
          return env->callShortMethod(this$, mids$[mid_readShort_ec20af88366b851e]);
        }

        jshort ByteBufferIndexInput::readShort(jlong a0) const
        {
          return env->callShortMethod(this$, mids$[mid_readShort_e963ff2cc414b347], a0);
        }

        void ByteBufferIndexInput::seek(jlong a0) const
        {
          env->callVoidMethod(this$, mids$[mid_seek_9c778c9bce6694df], a0);
        }

        ByteBufferIndexInput ByteBufferIndexInput::slice(const ::java::lang::String & a0, jlong a1, jlong a2) const
        {
          return ByteBufferIndexInput(env->callObjectMethod(this$, mids$[mid_slice_cbd827549aa1b1b1], a0.this$, a1, a2));
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace store {
        static PyObject *t_ByteBufferIndexInput_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_ByteBufferIndexInput_instance_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_ByteBufferIndexInput_clone(t_ByteBufferIndexInput *self, PyObject *args);
        static PyObject *t_ByteBufferIndexInput_close(t_ByteBufferIndexInput *self, PyObject *args);
        static PyObject *t_ByteBufferIndexInput_getFilePointer(t_ByteBufferIndexInput *self, PyObject *args);
        static PyObject *t_ByteBufferIndexInput_length(t_ByteBufferIndexInput *self, PyObject *args);
        static PyObject *t_ByteBufferIndexInput_readByte(t_ByteBufferIndexInput *self, PyObject *args);
        static PyObject *t_ByteBufferIndexInput_readBytes(t_ByteBufferIndexInput *self, PyObject *args);
        static PyObject *t_ByteBufferIndexInput_readInt(t_ByteBufferIndexInput *self, PyObject *args);
        static PyObject *t_ByteBufferIndexInput_readLELongs(t_ByteBufferIndexInput *self, PyObject *args);
        static PyObject *t_ByteBufferIndexInput_readLong(t_ByteBufferIndexInput *self, PyObject *args);
        static PyObject *t_ByteBufferIndexInput_readShort(t_ByteBufferIndexInput *self, PyObject *args);
        static PyObject *t_ByteBufferIndexInput_seek(t_ByteBufferIndexInput *self, PyObject *args);
        static PyObject *t_ByteBufferIndexInput_slice(t_ByteBufferIndexInput *self, PyObject *args);
        static PyObject *t_ByteBufferIndexInput_get__filePointer(t_ByteBufferIndexInput *self, void *data);
        static PyGetSetDef t_ByteBufferIndexInput__fields_[] = {
          DECLARE_GET_FIELD(t_ByteBufferIndexInput, filePointer),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_ByteBufferIndexInput__methods_[] = {
          DECLARE_METHOD(t_ByteBufferIndexInput, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_ByteBufferIndexInput, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_ByteBufferIndexInput, clone, METH_VARARGS),
          DECLARE_METHOD(t_ByteBufferIndexInput, close, METH_VARARGS),
          DECLARE_METHOD(t_ByteBufferIndexInput, getFilePointer, METH_VARARGS),
          DECLARE_METHOD(t_ByteBufferIndexInput, length, METH_VARARGS),
          DECLARE_METHOD(t_ByteBufferIndexInput, readByte, METH_VARARGS),
          DECLARE_METHOD(t_ByteBufferIndexInput, readBytes, METH_VARARGS),
          DECLARE_METHOD(t_ByteBufferIndexInput, readInt, METH_VARARGS),
          DECLARE_METHOD(t_ByteBufferIndexInput, readLELongs, METH_VARARGS),
          DECLARE_METHOD(t_ByteBufferIndexInput, readLong, METH_VARARGS),
          DECLARE_METHOD(t_ByteBufferIndexInput, readShort, METH_VARARGS),
          DECLARE_METHOD(t_ByteBufferIndexInput, seek, METH_VARARGS),
          DECLARE_METHOD(t_ByteBufferIndexInput, slice, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        static PyType_Slot PY_TYPE_SLOTS(ByteBufferIndexInput)[] = {
          { Py_tp_methods, t_ByteBufferIndexInput__methods_ },
          { Py_tp_init, (void *) abstract_init },
          { Py_tp_getset, t_ByteBufferIndexInput__fields_ },
          { 0, NULL }
        };

        static PyType_Def *PY_TYPE_BASES(ByteBufferIndexInput)[] = {
          &PY_TYPE_DEF(::org::apache::lucene::store::IndexInput),
          NULL
        };

        DEFINE_TYPE(ByteBufferIndexInput, t_ByteBufferIndexInput, ByteBufferIndexInput);

        void t_ByteBufferIndexInput::install(PyObject *module)
        {
          installType(&PY_TYPE(ByteBufferIndexInput), &PY_TYPE_DEF(ByteBufferIndexInput), module, "ByteBufferIndexInput", 0);
        }

        void t_ByteBufferIndexInput::initialize(PyObject *module)
        {
          PyObject_SetAttrString((PyObject *) PY_TYPE(ByteBufferIndexInput), "class_", make_descriptor(ByteBufferIndexInput::initializeClass, 1));
          PyObject_SetAttrString((PyObject *) PY_TYPE(ByteBufferIndexInput), "wrapfn_", make_descriptor(t_ByteBufferIndexInput::wrap_jobject));
          PyObject_SetAttrString((PyObject *) PY_TYPE(ByteBufferIndexInput), "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_ByteBufferIndexInput_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, ByteBufferIndexInput::initializeClass, 1)))
            return NULL;
          return t_ByteBufferIndexInput::wrap_Object(ByteBufferIndexInput(((t_ByteBufferIndexInput *) arg)->object.this$));
        }
        static PyObject *t_ByteBufferIndexInput_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, ByteBufferIndexInput::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static PyObject *t_ByteBufferIndexInput_clone(t_ByteBufferIndexInput *self, PyObject *args)
        {
          ByteBufferIndexInput result((jobject) NULL);

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.clone());
            return t_ByteBufferIndexInput::wrap_Object(result);
          }

          return callSuper(PY_TYPE(ByteBufferIndexInput), (PyObject *) self, "clone", args, 2);
        }

        static PyObject *t_ByteBufferIndexInput_close(t_ByteBufferIndexInput *self, PyObject *args)
        {

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(self->object.close());
            Py_RETURN_NONE;
          }

          return callSuper(PY_TYPE(ByteBufferIndexInput), (PyObject *) self, "close", args, 2);
        }

        static PyObject *t_ByteBufferIndexInput_getFilePointer(t_ByteBufferIndexInput *self, PyObject *args)
        {
          jlong result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.getFilePointer());
            return PyLong_FromLongLong((PY_LONG_LONG) result);
          }

          return callSuper(PY_TYPE(ByteBufferIndexInput), (PyObject *) self, "getFilePointer", args, 2);
        }

        static PyObject *t_ByteBufferIndexInput_length(t_ByteBufferIndexInput *self, PyObject *args)
        {
          jlong result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.length());
            return PyLong_FromLongLong((PY_LONG_LONG) result);
          }

          return callSuper(PY_TYPE(ByteBufferIndexInput), (PyObject *) self, "length", args, 2);
        }

        static PyObject *t_ByteBufferIndexInput_readByte(t_ByteBufferIndexInput *self, PyObject *args)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 0:
            {
              jbyte result;
              OBJ_CALL(result = self->object.readByte());
              return PyLong_FromLong((long) result);
            }
            break;
           case 1:
            {
              jlong a0;
              jbyte result;

              if (!parseArgs(args, "J", &a0))
              {
                OBJ_CALL(result = self->object.readByte(a0));
                return PyLong_FromLong((long) result);
              }
            }
          }

          return callSuper(PY_TYPE(ByteBufferIndexInput), (PyObject *) self, "readByte", args, 2);
        }

        static PyObject *t_ByteBufferIndexInput_readBytes(t_ByteBufferIndexInput *self, PyObject *args)
        {
          JArray< jbyte > a0((jobject) NULL);
          jint a1;
          jint a2;

          if (!parseArgs(args, "[BII", &a0, &a1, &a2))
          {
            OBJ_CALL(self->object.readBytes(a0, a1, a2));
            Py_RETURN_NONE;
          }

          return callSuper(PY_TYPE(ByteBufferIndexInput), (PyObject *) self, "readBytes", args, 2);
        }

        static PyObject *t_ByteBufferIndexInput_readInt(t_ByteBufferIndexInput *self, PyObject *args)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 0:
            {
              jint result;
              OBJ_CALL(result = self->object.readInt());
              return PyLong_FromLong((long) result);
            }
            break;
           case 1:
            {
              jlong a0;
              jint result;

              if (!parseArgs(args, "J", &a0))
              {
                OBJ_CALL(result = self->object.readInt(a0));
                return PyLong_FromLong((long) result);
              }
            }
          }

          return callSuper(PY_TYPE(ByteBufferIndexInput), (PyObject *) self, "readInt", args, 2);
        }

        static PyObject *t_ByteBufferIndexInput_readLELongs(t_ByteBufferIndexInput *self, PyObject *args)
        {
          JArray< jlong > a0((jobject) NULL);
          jint a1;
          jint a2;

          if (!parseArgs(args, "[JII", &a0, &a1, &a2))
          {
            OBJ_CALL(self->object.readLELongs(a0, a1, a2));
            Py_RETURN_NONE;
          }

          return callSuper(PY_TYPE(ByteBufferIndexInput), (PyObject *) self, "readLELongs", args, 2);
        }

        static PyObject *t_ByteBufferIndexInput_readLong(t_ByteBufferIndexInput *self, PyObject *args)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 0:
            {
              jlong result;
              OBJ_CALL(result = self->object.readLong());
              return PyLong_FromLongLong((PY_LONG_LONG) result);
            }
            break;
           case 1:
            {
              jlong a0;
              jlong result;

              if (!parseArgs(args, "J", &a0))
              {
                OBJ_CALL(result = self->object.readLong(a0));
                return PyLong_FromLongLong((PY_LONG_LONG) result);
              }
            }
          }

          return callSuper(PY_TYPE(ByteBufferIndexInput), (PyObject *) self, "readLong", args, 2);
        }

        static PyObject *t_ByteBufferIndexInput_readShort(t_ByteBufferIndexInput *self, PyObject *args)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 0:
            {
              jshort result;
              OBJ_CALL(result = self->object.readShort());
              return PyLong_FromLong((long) result);
            }
            break;
           case 1:
            {
              jlong a0;
              jshort result;

              if (!parseArgs(args, "J", &a0))
              {
                OBJ_CALL(result = self->object.readShort(a0));
                return PyLong_FromLong((long) result);
              }
            }
          }

          return callSuper(PY_TYPE(ByteBufferIndexInput), (PyObject *) self, "readShort", args, 2);
        }

        static PyObject *t_ByteBufferIndexInput_seek(t_ByteBufferIndexInput *self, PyObject *args)
        {
          jlong a0;

          if (!parseArgs(args, "J", &a0))
          {
            OBJ_CALL(self->object.seek(a0));
            Py_RETURN_NONE;
          }

          return callSuper(PY_TYPE(ByteBufferIndexInput), (PyObject *) self, "seek", args, 2);
        }

        static PyObject *t_ByteBufferIndexInput_slice(t_ByteBufferIndexInput *self, PyObject *args)
        {
          ::java::lang::String a0((jobject) NULL);
          jlong a1;
          jlong a2;
          ByteBufferIndexInput result((jobject) NULL);

          if (!parseArgs(args, "sJJ", &a0, &a1, &a2))
          {
            OBJ_CALL(result = self->object.slice(a0, a1, a2));
            return t_ByteBufferIndexInput::wrap_Object(result);
          }

          return callSuper(PY_TYPE(ByteBufferIndexInput), (PyObject *) self, "slice", args, 2);
        }

        static PyObject *t_ByteBufferIndexInput_get__filePointer(t_ByteBufferIndexInput *self, void *data)
        {
          jlong value;
          OBJ_CALL(value = self->object.getFilePointer());
          return PyLong_FromLongLong((PY_LONG_LONG) value);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/Sort.h"
#include "org/apache/lucene/search/SortField.h"
#include "org/apache/lucene/search/IndexSearcher.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/search/Sort.h"
#include "java/lang/String.h"
#include "java/io/IOException.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {

        ::java::lang::Class *Sort::class$ = NULL;
        jmethodID *Sort::mids$ = NULL;
        bool Sort::live$ = false;
        Sort *Sort::INDEXORDER = NULL;
        Sort *Sort::RELEVANCE = NULL;

        jclass Sort::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/search/Sort");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_f2cc1bce94666404] = env->getMethodID(cls, "<init>", "()V");
            mids$[mid_init$_76f0c5651a6ef704] = env->getMethodID(cls, "<init>", "([Lorg/apache/lucene/search/SortField;)V");
            mids$[mid_init$_ac50e9be1b02abdc] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/search/SortField;)V");
            mids$[mid_equals_8b72f2dcdde6fd1d] = env->getMethodID(cls, "equals", "(Ljava/lang/Object;)Z");
            mids$[mid_getSort_b779051c8bd9ece1] = env->getMethodID(cls, "getSort", "()[Lorg/apache/lucene/search/SortField;");
            mids$[mid_hashCode_9972fcc56b44e79d] = env->getMethodID(cls, "hashCode", "()I");
            mids$[mid_needsScores_8454bd5aa23fd11e] = env->getMethodID(cls, "needsScores", "()Z");
            mids$[mid_rewrite_d9e3fdde5059b95c] = env->getMethodID(cls, "rewrite", "(Lorg/apache/lucene/search/IndexSearcher;)Lorg/apache/lucene/search/Sort;");
            mids$[mid_setSort_76f0c5651a6ef704] = env->getMethodID(cls, "setSort", "([Lorg/apache/lucene/search/SortField;)V");
            mids$[mid_setSort_ac50e9be1b02abdc] = env->getMethodID(cls, "setSort", "(Lorg/apache/lucene/search/SortField;)V");
            mids$[mid_toString_db9b55ba01e03e4b] = env->getMethodID(cls, "toString", "()Ljava/lang/String;");

            class$ = new ::java::lang::Class(cls);
            cls = (jclass) class$->this$;

            INDEXORDER = new Sort(env->getStaticObjectField(cls, "INDEXORDER", "Lorg/apache/lucene/search/Sort;"));
            RELEVANCE = new Sort(env->getStaticObjectField(cls, "RELEVANCE", "Lorg/apache/lucene/search/Sort;"));
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        Sort::Sort() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_f2cc1bce94666404)) {}

        Sort::Sort(const JArray< ::org::apache::lucene::search::SortField > & a0) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_76f0c5651a6ef704, a0.this$)) {}

        Sort::Sort(const ::org::apache::lucene::search::SortField & a0) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_ac50e9be1b02abdc, a0.this$)) {}

        jboolean Sort::equals(const ::java::lang::Object & a0) const
        {
          return env->callBooleanMethod(this$, mids$[mid_equals_8b72f2dcdde6fd1d], a0.this$);
        }

        JArray< ::org::apache::lucene::search::SortField > Sort::getSort() const
        {
          return JArray< ::org::apache::lucene::search::SortField >(env->callObjectMethod(this$, mids$[mid_getSort_b779051c8bd9ece1]));
        }

        jint Sort::hashCode() const
        {
          return env->callIntMethod(this$, mids$[mid_hashCode_9972fcc56b44e79d]);
        }

        jboolean Sort::needsScores() const
        {
          return env->callBooleanMethod(this$, mids$[mid_needsScores_8454bd5aa23fd11e]);
        }

        Sort Sort::rewrite(const ::org::apache::lucene::search::IndexSearcher & a0) const
        {
          return Sort(env->callObjectMethod(this$, mids$[mid_rewrite_d9e3fdde5059b95c], a0.this$));
        }

        void Sort::setSort(const JArray< ::org::apache::lucene::search::SortField > & a0) const
        {
          env->callVoidMethod(this$, mids$[mid_setSort_76f0c5651a6ef704], a0.this$);
        }

        void Sort::setSort(const ::org::apache::lucene::search::SortField & a0) const
        {
          env->callVoidMethod(this$, mids$[mid_setSort_ac50e9be1b02abdc], a0.this$);
        }

        ::java::lang::String Sort::toString() const
        {
          return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_db9b55ba01e03e4b]));
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        static PyObject *t_Sort_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_Sort_instance_(PyTypeObject *type, PyObject *arg);
        static int t_Sort_init_(t_Sort *self, PyObject *args, PyObject *kwds);
        static PyObject *t_Sort_equals(t_Sort *self, PyObject *args);
        static PyObject *t_Sort_getSort(t_Sort *self);
        static PyObject *t_Sort_hashCode(t_Sort *self, PyObject *args);
        static PyObject *t_Sort_needsScores(t_Sort *self);
        static PyObject *t_Sort_rewrite(t_Sort *self, PyObject *arg);
        static PyObject *t_Sort_setSort(t_Sort *self, PyObject *args);
        static PyObject *t_Sort_toString(t_Sort *self, PyObject *args);
        static PyObject *t_Sort_get__sort(t_Sort *self, void *data);
        static int t_Sort_set__sort(t_Sort *self, PyObject *arg, void *data);
        static PyGetSetDef t_Sort__fields_[] = {
          DECLARE_GETSET_FIELD(t_Sort, sort),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_Sort__methods_[] = {
          DECLARE_METHOD(t_Sort, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_Sort, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_Sort, equals, METH_VARARGS),
          DECLARE_METHOD(t_Sort, getSort, METH_NOARGS),
          DECLARE_METHOD(t_Sort, hashCode, METH_VARARGS),
          DECLARE_METHOD(t_Sort, needsScores, METH_NOARGS),
          DECLARE_METHOD(t_Sort, rewrite, METH_O),
          DECLARE_METHOD(t_Sort, setSort, METH_VARARGS),
          DECLARE_METHOD(t_Sort, toString, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        static PyType_Slot PY_TYPE_SLOTS(Sort)[] = {
          { Py_tp_methods, t_Sort__methods_ },
          { Py_tp_init, (void *) t_Sort_init_ },
          { Py_tp_getset, t_Sort__fields_ },
          { 0, NULL }
        };

        static PyType_Def *PY_TYPE_BASES(Sort)[] = {
          &PY_TYPE_DEF(::java::lang::Object),
          NULL
        };

        DEFINE_TYPE(Sort, t_Sort, Sort);

        void t_Sort::install(PyObject *module)
        {
          installType(&PY_TYPE(Sort), &PY_TYPE_DEF(Sort), module, "Sort", 0);
        }

        void t_Sort::initialize(PyObject *module)
        {
          PyObject_SetAttrString((PyObject *) PY_TYPE(Sort), "class_", make_descriptor(Sort::initializeClass, 1));
          PyObject_SetAttrString((PyObject *) PY_TYPE(Sort), "wrapfn_", make_descriptor(t_Sort::wrap_jobject));
          PyObject_SetAttrString((PyObject *) PY_TYPE(Sort), "boxfn_", make_descriptor(boxObject));
          env->getClass(Sort::initializeClass);
          PyObject_SetAttrString((PyObject *) PY_TYPE(Sort), "INDEXORDER", make_descriptor(t_Sort::wrap_Object(*Sort::INDEXORDER)));
          PyObject_SetAttrString((PyObject *) PY_TYPE(Sort), "RELEVANCE", make_descriptor(t_Sort::wrap_Object(*Sort::RELEVANCE)));
        }

        static PyObject *t_Sort_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, Sort::initializeClass, 1)))
            return NULL;
          return t_Sort::wrap_Object(Sort(((t_Sort *) arg)->object.this$));
        }
        static PyObject *t_Sort_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, Sort::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_Sort_init_(t_Sort *self, PyObject *args, PyObject *kwds)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 0:
            {
              Sort object((jobject) NULL);

              INT_CALL(object = Sort());
              self->object = object;
              break;
            }
           case 1:
            {
              JArray< ::org::apache::lucene::search::SortField > a0((jobject) NULL);
              Sort object((jobject) NULL);

              if (!parseArgs(args, "[k", ::org::apache::lucene::search::SortField::initializeClass, &a0))
              {
                INT_CALL(object = Sort(a0));
                self->object = object;
                break;
              }
            }
            {
              ::org::apache::lucene::search::SortField a0((jobject) NULL);
              Sort object((jobject) NULL);

              if (!parseArgs(args, "k", ::org::apache::lucene::search::SortField::initializeClass, &a0))
              {
                INT_CALL(object = Sort(a0));
                self->object = object;
                break;
              }
            }
           default:
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }

        static PyObject *t_Sort_equals(t_Sort *self, PyObject *args)
        {
          ::java::lang::Object a0((jobject) NULL);
          jboolean result;

          if (!parseArgs(args, "o", &a0))
          {
            OBJ_CALL(result = self->object.equals(a0));
            Py_RETURN_BOOL(result);
          }

          return callSuper(PY_TYPE(Sort), (PyObject *) self, "equals", args, 2);
        }

        static PyObject *t_Sort_getSort(t_Sort *self)
        {
          JArray< ::org::apache::lucene::search::SortField > result((jobject) NULL);
          OBJ_CALL(result = self->object.getSort());
          return JArray<jobject>(result.this$).wrap(::org::apache::lucene::search::t_SortField::wrap_jobject);
        }

        static PyObject *t_Sort_hashCode(t_Sort *self, PyObject *args)
        {
          jint result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.hashCode());
            return PyLong_FromLong((long) result);
          }

          return callSuper(PY_TYPE(Sort), (PyObject *) self, "hashCode", args, 2);
        }

        static PyObject *t_Sort_needsScores(t_Sort *self)
        {
          jboolean result;
          OBJ_CALL(result = self->object.needsScores());
          Py_RETURN_BOOL(result);
        }

        static PyObject *t_Sort_rewrite(t_Sort *self, PyObject *arg)
        {
          ::org::apache::lucene::search::IndexSearcher a0((jobject) NULL);
          Sort result((jobject) NULL);

          if (!parseArg(arg, "k", ::org::apache::lucene::search::IndexSearcher::initializeClass, &a0))
          {
            OBJ_CALL(result = self->object.rewrite(a0));
            return t_Sort::wrap_Object(result);
          }

          PyErr_SetArgsError((PyObject *) self, "rewrite", arg);
          return NULL;
        }

        static PyObject *t_Sort_setSort(t_Sort *self, PyObject *args)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 1:
            {
              JArray< ::org::apache::lucene::search::SortField > a0((jobject) NULL);

              if (!parseArgs(args, "[k", ::org::apache::lucene::search::SortField::initializeClass, &a0))
              {
                OBJ_CALL(self->object.setSort(a0));
                Py_RETURN_NONE;
              }
            }
            {
              ::org::apache::lucene::search::SortField a0((jobject) NULL);

              if (!parseArgs(args, "k", ::org::apache::lucene::search::SortField::initializeClass, &a0))
              {
                OBJ_CALL(self->object.setSort(a0));
                Py_RETURN_NONE;
              }
            }
          }

          PyErr_SetArgsError((PyObject *) self, "setSort", args);
          return NULL;
        }

        static PyObject *t_Sort_toString(t_Sort *self, PyObject *args)
        {
          ::java::lang::String result((jobject) NULL);

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.toString());
            return j2p(result);
          }

          return callSuper(PY_TYPE(Sort), (PyObject *) self, "toString", args, 2);
        }

        static PyObject *t_Sort_get__sort(t_Sort *self, void *data)
        {
          JArray< ::org::apache::lucene::search::SortField > value((jobject) NULL);
          OBJ_CALL(value = self->object.getSort());
          return JArray<jobject>(value.this$).wrap(::org::apache::lucene::search::t_SortField::wrap_jobject);
        }
        static int t_Sort_set__sort(t_Sort *self, PyObject *arg, void *data)
        {
          {
            JArray< ::org::apache::lucene::search::SortField > value((jobject) NULL);
            if (!parseArg(arg, "[k", ::org::apache::lucene::search::SortField::initializeClass, &value))
            {
              INT_CALL(self->object.setSort(value));
              return 0;
            }
          }
          {
            ::org::apache::lucene::search::SortField value((jobject) NULL);
            if (!parseArg(arg, "k", ::org::apache::lucene::search::SortField::initializeClass, &value))
            {
              INT_CALL(self->object.setSort(value));
              return 0;
            }
          }
          PyErr_SetArgsError((PyObject *) self, "sort", arg);
          return -1;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/suggest/InputIterator.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/util/BytesRef.h"
#include "java/util/Set.h"
#include "org/apache/lucene/search/suggest/InputIterator.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace suggest {

          ::java::lang::Class *InputIterator::class$ = NULL;
          jmethodID *InputIterator::mids$ = NULL;
          bool InputIterator::live$ = false;
          InputIterator *InputIterator::EMPTY = NULL;

          jclass InputIterator::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/search/suggest/InputIterator");

              mids$ = new jmethodID[max_mid];
              mids$[mid_contexts_7dcf4034c6d1a92a] = env->getMethodID(cls, "contexts", "()Ljava/util/Set;");
              mids$[mid_hasContexts_8454bd5aa23fd11e] = env->getMethodID(cls, "hasContexts", "()Z");
              mids$[mid_hasPayloads_8454bd5aa23fd11e] = env->getMethodID(cls, "hasPayloads", "()Z");
              mids$[mid_payload_7af2ea2e37ce82b8] = env->getMethodID(cls, "payload", "()Lorg/apache/lucene/util/BytesRef;");
              mids$[mid_weight_2e5ae9edcb9b072f] = env->getMethodID(cls, "weight", "()J");

              class$ = new ::java::lang::Class(cls);
              cls = (jclass) class$->this$;

              EMPTY = new InputIterator(env->getStaticObjectField(cls, "EMPTY", "Lorg/apache/lucene/search/suggest/InputIterator;"));
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          ::java::util::Set InputIterator::contexts() const
          {
            return ::java::util::Set(env->callObjectMethod(this$, mids$[mid_contexts_7dcf4034c6d1a92a]));
          }

          jboolean InputIterator::hasContexts() const
          {
            return env->callBooleanMethod(this$, mids$[mid_hasContexts_8454bd5aa23fd11e]);
          }

          jboolean InputIterator::hasPayloads() const
          {
            return env->callBooleanMethod(this$, mids$[mid_hasPayloads_8454bd5aa23fd11e]);
          }

          ::org::apache::lucene::util::BytesRef InputIterator::payload() const
          {
            return ::org::apache::lucene::util::BytesRef(env->callObjectMethod(this$, mids$[mid_payload_7af2ea2e37ce82b8]));
          }

          jlong InputIterator::weight() const
          {
            return env->callLongMethod(this$, mids$[mid_weight_2e5ae9edcb9b072f]);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"
#include "org/apache/lucene/search/suggest/InputIterator$InputIteratorWrapper.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace suggest {
          static PyObject *t_InputIterator_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_InputIterator_instance_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_InputIterator_contexts(t_InputIterator *self);
          static PyObject *t_InputIterator_hasContexts(t_InputIterator *self);
          static PyObject *t_InputIterator_hasPayloads(t_InputIterator *self);
          static PyObject *t_InputIterator_payload(t_InputIterator *self);
          static PyObject *t_InputIterator_weight(t_InputIterator *self);

          static PyMethodDef t_InputIterator__methods_[] = {
            DECLARE_METHOD(t_InputIterator, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_InputIterator, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_InputIterator, contexts, METH_NOARGS),
            DECLARE_METHOD(t_InputIterator, hasContexts, METH_NOARGS),
            DECLARE_METHOD(t_InputIterator, hasPayloads, METH_NOARGS),
            DECLARE_METHOD(t_InputIterator, payload, METH_NOARGS),
            DECLARE_METHOD(t_InputIterator, weight, METH_NOARGS),
            { NULL, NULL, 0, NULL }
          };

          static PyType_Slot PY_TYPE_SLOTS(InputIterator)[] = {
            { Py_tp_methods, t_InputIterator__methods_ },
            { Py_tp_init, (void *) abstract_init },
            { 0, NULL }
          };

          static PyType_Def *PY_TYPE_BASES(InputIterator)[] = {
            &PY_TYPE_DEF(::org::apache::lucene::util::BytesRefIterator),
            NULL
          };

          DEFINE_TYPE(InputIterator, t_InputIterator, InputIterator);

          void t_InputIterator::install(PyObject *module)
          {
            installType(&PY_TYPE(InputIterator), &PY_TYPE_DEF(InputIterator), module, "InputIterator", 0);
            PyObject_SetAttrString((PyObject *) PY_TYPE(InputIterator), "InputIteratorWrapper", make_descriptor(&PY_TYPE_DEF(InputIterator$InputIteratorWrapper)));
          }

          void t_InputIterator::initialize(PyObject *module)
          {
            PyObject_SetAttrString((PyObject *) PY_TYPE(InputIterator), "class_", make_descriptor(InputIterator::initializeClass, 1));
            PyObject_SetAttrString((PyObject *) PY_TYPE(InputIterator), "wrapfn_", make_descriptor(t_InputIterator::wrap_jobject));
            PyObject_SetAttrString((PyObject *) PY_TYPE(InputIterator), "boxfn_", make_descriptor(boxObject));
            env->getClass(InputIterator::initializeClass);
            PyObject_SetAttrString((PyObject *) PY_TYPE(InputIterator), "EMPTY", make_descriptor(t_InputIterator::wrap_Object(*InputIterator::EMPTY)));
          }

          static PyObject *t_InputIterator_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, InputIterator::initializeClass, 1)))
              return NULL;
            return t_InputIterator::wrap_Object(InputIterator(((t_InputIterator *) arg)->object.this$));
          }
          static PyObject *t_InputIterator_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, InputIterator::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static PyObject *t_InputIterator_contexts(t_InputIterator *self)
          {
            ::java::util::Set result((jobject) NULL);
            OBJ_CALL(result = self->object.contexts());
            return ::java::util::t_Set::wrap_Object(result, ::org::apache::lucene::util::PY_TYPE(BytesRef));
          }

          static PyObject *t_InputIterator_hasContexts(t_InputIterator *self)
          {
            jboolean result;
            OBJ_CALL(result = self->object.hasContexts());
            Py_RETURN_BOOL(result);
          }

          static PyObject *t_InputIterator_hasPayloads(t_InputIterator *self)
          {
            jboolean result;
            OBJ_CALL(result = self->object.hasPayloads());
            Py_RETURN_BOOL(result);
          }

          static PyObject *t_InputIterator_payload(t_InputIterator *self)
          {
            ::org::apache::lucene::util::BytesRef result((jobject) NULL);
            OBJ_CALL(result = self->object.payload());
            return ::org::apache::lucene::util::t_BytesRef::wrap_Object(result);
          }

          static PyObject *t_InputIterator_weight(t_InputIterator *self)
          {
            jlong result;
            OBJ_CALL(result = self->object.weight());
            return PyLong_FromLongLong((PY_LONG_LONG) result);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/uhighlight/CustomSeparatorBreakIterator.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace uhighlight {

          ::java::lang::Class *CustomSeparatorBreakIterator::class$ = NULL;
          jmethodID *CustomSeparatorBreakIterator::mids$ = NULL;
          bool CustomSeparatorBreakIterator::live$ = false;

          jclass CustomSeparatorBreakIterator::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/search/uhighlight/CustomSeparatorBreakIterator");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_b227b2c08d18d29e] = env->getMethodID(cls, "<init>", "(C)V");
              mids$[mid_current_9972fcc56b44e79d] = env->getMethodID(cls, "current", "()I");
              mids$[mid_first_9972fcc56b44e79d] = env->getMethodID(cls, "first", "()I");
              mids$[mid_following_1e143afe1894d213] = env->getMethodID(cls, "following", "(I)I");
              mids$[mid_last_9972fcc56b44e79d] = env->getMethodID(cls, "last", "()I");
              mids$[mid_next_9972fcc56b44e79d] = env->getMethodID(cls, "next", "()I");
              mids$[mid_next_1e143afe1894d213] = env->getMethodID(cls, "next", "(I)I");
              mids$[mid_preceding_1e143afe1894d213] = env->getMethodID(cls, "preceding", "(I)I");
              mids$[mid_previous_9972fcc56b44e79d] = env->getMethodID(cls, "previous", "()I");

              class$ = new ::java::lang::Class(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          CustomSeparatorBreakIterator::CustomSeparatorBreakIterator(jchar a0) : ::java::text::BreakIterator(env->newObject(initializeClass, &mids$, mid_init$_b227b2c08d18d29e, a0)) {}

          jint CustomSeparatorBreakIterator::current() const
          {
            return env->callIntMethod(this$, mids$[mid_current_9972fcc56b44e79d]);
          }

          jint CustomSeparatorBreakIterator::first() const
          {
            return env->callIntMethod(this$, mids$[mid_first_9972fcc56b44e79d]);
          }

          jint CustomSeparatorBreakIterator::following(jint a0) const
          {
            return env->callIntMethod(this$, mids$[mid_following_1e143afe1894d213], a0);
          }

          jint CustomSeparatorBreakIterator::last() const
          {
            return env->callIntMethod(this$, mids$[mid_last_9972fcc56b44e79d]);
          }

          jint CustomSeparatorBreakIterator::next() const
          {
            return env->callIntMethod(this$, mids$[mid_next_9972fcc56b44e79d]);
          }

          jint CustomSeparatorBreakIterator::next(jint a0) const
          {
            return env->callIntMethod(this$, mids$[mid_next_1e143afe1894d213], a0);
          }

          jint CustomSeparatorBreakIterator::preceding(jint a0) const
          {
            return env->callIntMethod(this$, mids$[mid_preceding_1e143afe1894d213], a0);
          }

          jint CustomSeparatorBreakIterator::previous() const
          {
            return env->callIntMethod(this$, mids$[mid_previous_9972fcc56b44e79d]);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace uhighlight {
          static PyObject *t_CustomSeparatorBreakIterator_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_CustomSeparatorBreakIterator_instance_(PyTypeObject *type, PyObject *arg);
          static int t_CustomSeparatorBreakIterator_init_(t_CustomSeparatorBreakIterator *self, PyObject *args, PyObject *kwds);
          static PyObject *t_CustomSeparatorBreakIterator_current(t_CustomSeparatorBreakIterator *self, PyObject *args);
          static PyObject *t_CustomSeparatorBreakIterator_first(t_CustomSeparatorBreakIterator *self, PyObject *args);
          static PyObject *t_CustomSeparatorBreakIterator_following(t_CustomSeparatorBreakIterator *self, PyObject *args);
          static PyObject *t_CustomSeparatorBreakIterator_last(t_CustomSeparatorBreakIterator *self, PyObject *args);
          static PyObject *t_CustomSeparatorBreakIterator_next(t_CustomSeparatorBreakIterator *self, PyObject *args);
          static PyObject *t_CustomSeparatorBreakIterator_preceding(t_CustomSeparatorBreakIterator *self, PyObject *args);
          static PyObject *t_CustomSeparatorBreakIterator_previous(t_CustomSeparatorBreakIterator *self, PyObject *args);

          static PyMethodDef t_CustomSeparatorBreakIterator__methods_[] = {
            DECLARE_METHOD(t_CustomSeparatorBreakIterator, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_CustomSeparatorBreakIterator, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_CustomSeparatorBreakIterator, current, METH_VARARGS),
            DECLARE_METHOD(t_CustomSeparatorBreakIterator, first, METH_VARARGS),
            DECLARE_METHOD(t_CustomSeparatorBreakIterator, following, METH_VARARGS),
            DECLARE_METHOD(t_CustomSeparatorBreakIterator, last, METH_VARARGS),
            DECLARE_METHOD(t_CustomSeparatorBreakIterator, next, METH_VARARGS),
            DECLARE_METHOD(t_CustomSeparatorBreakIterator, preceding, METH_VARARGS),
            DECLARE_METHOD(t_CustomSeparatorBreakIterator, previous, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          static PyType_Slot PY_TYPE_SLOTS(CustomSeparatorBreakIterator)[] = {
            { Py_tp_methods, t_CustomSeparatorBreakIterator__methods_ },
            { Py_tp_init, (void *) t_CustomSeparatorBreakIterator_init_ },
            { 0, NULL }
          };

          static PyType_Def *PY_TYPE_BASES(CustomSeparatorBreakIterator)[] = {
            &PY_TYPE_DEF(::java::text::BreakIterator),
            NULL
          };

          DEFINE_TYPE(CustomSeparatorBreakIterator, t_CustomSeparatorBreakIterator, CustomSeparatorBreakIterator);

          void t_CustomSeparatorBreakIterator::install(PyObject *module)
          {
            installType(&PY_TYPE(CustomSeparatorBreakIterator), &PY_TYPE_DEF(CustomSeparatorBreakIterator), module, "CustomSeparatorBreakIterator", 0);
          }

          void t_CustomSeparatorBreakIterator::initialize(PyObject *module)
          {
            PyObject_SetAttrString((PyObject *) PY_TYPE(CustomSeparatorBreakIterator), "class_", make_descriptor(CustomSeparatorBreakIterator::initializeClass, 1));
            PyObject_SetAttrString((PyObject *) PY_TYPE(CustomSeparatorBreakIterator), "wrapfn_", make_descriptor(t_CustomSeparatorBreakIterator::wrap_jobject));
            PyObject_SetAttrString((PyObject *) PY_TYPE(CustomSeparatorBreakIterator), "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_CustomSeparatorBreakIterator_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, CustomSeparatorBreakIterator::initializeClass, 1)))
              return NULL;
            return t_CustomSeparatorBreakIterator::wrap_Object(CustomSeparatorBreakIterator(((t_CustomSeparatorBreakIterator *) arg)->object.this$));
          }
          static PyObject *t_CustomSeparatorBreakIterator_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, CustomSeparatorBreakIterator::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_CustomSeparatorBreakIterator_init_(t_CustomSeparatorBreakIterator *self, PyObject *args, PyObject *kwds)
          {
            jchar a0;
            CustomSeparatorBreakIterator object((jobject) NULL);

            if (!parseArgs(args, "C", &a0))
            {
              INT_CALL(object = CustomSeparatorBreakIterator(a0));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_CustomSeparatorBreakIterator_current(t_CustomSeparatorBreakIterator *self, PyObject *args)
          {
            jint result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.current());
              return PyLong_FromLong((long) result);
            }

            return callSuper(PY_TYPE(CustomSeparatorBreakIterator), (PyObject *) self, "current", args, 2);
          }

          static PyObject *t_CustomSeparatorBreakIterator_first(t_CustomSeparatorBreakIterator *self, PyObject *args)
          {
            jint result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.first());
              return PyLong_FromLong((long) result);
            }

            return callSuper(PY_TYPE(CustomSeparatorBreakIterator), (PyObject *) self, "first", args, 2);
          }

          static PyObject *t_CustomSeparatorBreakIterator_following(t_CustomSeparatorBreakIterator *self, PyObject *args)
          {
            jint a0;
            jint result;

            if (!parseArgs(args, "I", &a0))
            {
              OBJ_CALL(result = self->object.following(a0));
              return PyLong_FromLong((long) result);
            }

            return callSuper(PY_TYPE(CustomSeparatorBreakIterator), (PyObject *) self, "following", args, 2);
          }

          static PyObject *t_CustomSeparatorBreakIterator_last(t_CustomSeparatorBreakIterator *self, PyObject *args)
          {
            jint result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.last());
              return PyLong_FromLong((long) result);
            }

            return callSuper(PY_TYPE(CustomSeparatorBreakIterator), (PyObject *) self, "last", args, 2);
          }

          static PyObject *t_CustomSeparatorBreakIterator_next(t_CustomSeparatorBreakIterator *self, PyObject *args)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 0:
              {
                jint result;
                OBJ_CALL(result = self->object.next());
                return PyLong_FromLong((long) result);
              }
              break;
             case 1:
              {
                jint a0;
                jint result;

                if (!parseArgs(args, "I", &a0))
                {
                  OBJ_CALL(result = self->object.next(a0));
                  return PyLong_FromLong((long) result);
                }
              }
            }

            return callSuper(PY_TYPE(CustomSeparatorBreakIterator), (PyObject *) self, "next", args, 2);
          }

          static PyObject *t_CustomSeparatorBreakIterator_preceding(t_CustomSeparatorBreakIterator *self, PyObject *args)
          {
            jint a0;
            jint result;

            if (!parseArgs(args, "I", &a0))
            {
              OBJ_CALL(result = self->object.preceding(a0));
              return PyLong_FromLong((long) result);
            }

            return callSuper(PY_TYPE(CustomSeparatorBreakIterator), (PyObject *) self, "preceding", args, 2);
          }

          static PyObject *t_CustomSeparatorBreakIterator_previous(t_CustomSeparatorBreakIterator *self, PyObject *args)
          {
            jint result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.previous());
              return PyLong_FromLong((long) result);
            }

            return callSuper(PY_TYPE(CustomSeparatorBreakIterator), (PyObject *) self, "previous", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/index/MergePolicy.h"
#include "java/util/Map.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/index/MergePolicy$MergeSpecification.h"
#include "org/apache/lucene/index/CodecReader.h"
#include "org/apache/lucene/index/MergeTrigger.h"
#include "org/apache/lucene/index/MergePolicy$MergeContext.h"
#include "org/apache/lucene/index/SegmentCommitInfo.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/util/IOSupplier.h"
#include "org/apache/lucene/index/SegmentInfos.h"
#include "java/lang/Boolean.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {

        ::java::lang::Class *MergePolicy::class$ = NULL;
        jmethodID *MergePolicy::mids$ = NULL;
        bool MergePolicy::live$ = false;

        jclass MergePolicy::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/index/MergePolicy");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_f2cc1bce94666404] = env->getMethodID(cls, "<init>", "()V");
            mids$[mid_findForcedDeletesMerges_a4b8e92c69858eaa] = env->getMethodID(cls, "findForcedDeletesMerges", "(Lorg/apache/lucene/index/SegmentInfos;Lorg/apache/lucene/index/MergePolicy$MergeContext;)Lorg/apache/lucene/index/MergePolicy$MergeSpecification;");
            mids$[mid_findForcedMerges_7f23fa79bde67ff3] = env->getMethodID(cls, "findForcedMerges", "(Lorg/apache/lucene/index/SegmentInfos;ILjava/util/Map;Lorg/apache/lucene/index/MergePolicy$MergeContext;)Lorg/apache/lucene/index/MergePolicy$MergeSpecification;");
            mids$[mid_findFullFlushMerges_ce0e45d4a26e56b1] = env->getMethodID(cls, "findFullFlushMerges", "(Lorg/apache/lucene/index/MergeTrigger;Lorg/apache/lucene/index/SegmentInfos;Lorg/apache/lucene/index/MergePolicy$MergeContext;)Lorg/apache/lucene/index/MergePolicy$MergeSpecification;");
            mids$[mid_findMerges_ce0e45d4a26e56b1] = env->getMethodID(cls, "findMerges", "(Lorg/apache/lucene/index/MergeTrigger;Lorg/apache/lucene/index/SegmentInfos;Lorg/apache/lucene/index/MergePolicy$MergeContext;)Lorg/apache/lucene/index/MergePolicy$MergeSpecification;");
            mids$[mid_getMaxCFSSegmentSizeMB_8c74b787998ce4bc] = env->getMethodID(cls, "getMaxCFSSegmentSizeMB", "()D");
            mids$[mid_getNoCFSRatio_8c74b787998ce4bc] = env->getMethodID(cls, "getNoCFSRatio", "()D");
            mids$[mid_keepFullyDeletedSegment_df61ce79f6884854] = env->getMethodID(cls, "keepFullyDeletedSegment", "(Lorg/apache/lucene/util/IOSupplier;)Z");
            mids$[mid_numDeletesToMerge_38410daa12d7ee1e] = env->getMethodID(cls, "numDeletesToMerge", "(Lorg/apache/lucene/index/SegmentCommitInfo;ILorg/apache/lucene/util/IOSupplier;)I");
            mids$[mid_setMaxCFSSegmentSizeMB_3c435f10a3b1e038] = env->getMethodID(cls, "setMaxCFSSegmentSizeMB", "(D)V");
            mids$[mid_setNoCFSRatio_3c435f10a3b1e038] = env->getMethodID(cls, "setNoCFSRatio", "(D)V");
            mids$[mid_useCompoundFile_f4dd668fee1c81b8] = env->getMethodID(cls, "useCompoundFile", "(Lorg/apache/lucene/index/SegmentInfos;Lorg/apache/lucene/index/SegmentCommitInfo;Lorg/apache/lucene/index/MergePolicy$MergeContext;)Z");
            mids$[mid_verbose_6295e9a8b474782c] = env->getMethodID(cls, "verbose", "(Lorg/apache/lucene/index/MergePolicy$MergeContext;)Z");
            mids$[mid_segString_1a4fca4b8b9e1a1e] = env->getMethodID(cls, "segString", "(Lorg/apache/lucene/index/MergePolicy$MergeContext;Ljava/lang/Iterable;)Ljava/lang/String;");
            mids$[mid_isMerged_f4dd668fee1c81b8] = env->getMethodID(cls, "isMerged", "(Lorg/apache/lucene/index/SegmentInfos;Lorg/apache/lucene/index/SegmentCommitInfo;Lorg/apache/lucene/index/MergePolicy$MergeContext;)Z");
            mids$[mid_assertDelCount_62f94ba84ddd01fa] = env->getMethodID(cls, "assertDelCount", "(ILorg/apache/lucene/index/SegmentCommitInfo;)Z");
            mids$[mid_size_ad7dad42a292eb83] = env->getMethodID(cls, "size", "(Lorg/apache/lucene/index/SegmentCommitInfo;Lorg/apache/lucene/index/MergePolicy$MergeContext;)J");
            mids$[mid_message_30f817844aa17268] = env->getMethodID(cls, "message", "(Ljava/lang/String;Lorg/apache/lucene/index/MergePolicy$MergeContext;)V");

            class$ = new ::java::lang::Class(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        MergePolicy::MergePolicy() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_f2cc1bce94666404)) {}

        ::org::apache::lucene::index::MergePolicy$MergeSpecification MergePolicy::findForcedDeletesMerges(const ::org::apache::lucene::index::SegmentInfos & a0, const ::org::apache::lucene::index::MergePolicy$MergeContext & a1) const
        {
          return ::org::apache::lucene::index::MergePolicy$MergeSpecification(env->callObjectMethod(this$, mids$[mid_findForcedDeletesMerges_a4b8e92c69858eaa], a0.this$, a1.this$));
        }

        ::org::apache::lucene::index::MergePolicy$MergeSpecification MergePolicy::findForcedMerges(const ::org::apache::lucene::index::SegmentInfos & a0, jint a1, const ::java::util::Map & a2, const ::org::apache::lucene::index::MergePolicy$MergeContext & a3) const
        {
          return ::org::apache::lucene::index::MergePolicy$MergeSpecification(env->callObjectMethod(this$, mids$[mid_findForcedMerges_7f23fa79bde67ff3], a0.this$, a1, a2.this$, a3.this$));
        }

        ::org::apache::lucene::index::MergePolicy$MergeSpecification MergePolicy::findFullFlushMerges(const ::org::apache::lucene::index::MergeTrigger & a0, const ::org::apache::lucene::index::SegmentInfos & a1, const ::org::apache::lucene::index::MergePolicy$MergeContext & a2) const
        {
          return ::org::apache::lucene::index::MergePolicy$MergeSpecification(env->callObjectMethod(this$, mids$[mid_findFullFlushMerges_ce0e45d4a26e56b1], a0.this$, a1.this$, a2.this$));
        }

        ::org::apache::lucene::index::MergePolicy$MergeSpecification MergePolicy::findMerges(const ::org::apache::lucene::index::MergeTrigger & a0, const ::org::apache::lucene::index::SegmentInfos & a1, const ::org::apache::lucene::index::MergePolicy$MergeContext & a2) const
        {
          return ::org::apache::lucene::index::MergePolicy$MergeSpecification(env->callObjectMethod(this$, mids$[mid_findMerges_ce0e45d4a26e56b1], a0.this$, a1.this$, a2.this$));
        }

        jdouble MergePolicy::getMaxCFSSegmentSizeMB() const
        {
          return env->callDoubleMethod(this$, mids$[mid_getMaxCFSSegmentSizeMB_8c74b787998ce4bc]);
        }

        jdouble MergePolicy::getNoCFSRatio() const
        {
          return env->callDoubleMethod(this$, mids$[mid_getNoCFSRatio_8c74b787998ce4bc]);
        }

        jboolean MergePolicy::keepFullyDeletedSegment(const ::org::apache::lucene::util::IOSupplier & a0) const
        {
          return env->callBooleanMethod(this$, mids$[mid_keepFullyDeletedSegment_df61ce79f6884854], a0.this$);
        }

        jint MergePolicy::numDeletesToMerge(const ::org::apache::lucene::index::SegmentCommitInfo & a0, jint a1, const ::org::apache::lucene::util::IOSupplier & a2) const
        {
          return env->callIntMethod(this$, mids$[mid_numDeletesToMerge_38410daa12d7ee1e], a0.this$, a1, a2.this$);
        }

        void MergePolicy::setMaxCFSSegmentSizeMB(jdouble a0) const
        {
          env->callVoidMethod(this$, mids$[mid_setMaxCFSSegmentSizeMB_3c435f10a3b1e038], a0);
        }

        void MergePolicy::setNoCFSRatio(jdouble a0) const
        {
          env->callVoidMethod(this$, mids$[mid_setNoCFSRatio_3c435f10a3b1e038], a0);
        }

        jboolean MergePolicy::useCompoundFile(const ::org::apache::lucene::index::SegmentInfos & a0, const ::org::apache::lucene::index::SegmentCommitInfo & a1, const ::org::apache::lucene::index::MergePolicy$MergeContext & a2) const
        {
          return env->callBooleanMethod(this$, mids$[mid_useCompoundFile_f4dd668fee1c81b8], a0.this$, a1.this$, a2.this$);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"
#include "org/apache/lucene/index/MergePolicy$MergeAbortedException.h"
#include "org/apache/lucene/index/MergePolicy$MergeException.h"
#include "org/apache/lucene/index/MergePolicy$OneMerge.h"
#include "org/apache/lucene/index/MergePolicy$OneMergeProgress.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {
        static PyObject *t_MergePolicy_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_MergePolicy_instance_(PyTypeObject *type, PyObject *arg);
        static int t_MergePolicy_init_(t_MergePolicy *self, PyObject *args, PyObject *kwds);
        static PyObject *t_MergePolicy_findForcedDeletesMerges(t_MergePolicy *self, PyObject *args);
        static PyObject *t_MergePolicy_findForcedMerges(t_MergePolicy *self, PyObject *args);
        static PyObject *t_MergePolicy_findFullFlushMerges(t_MergePolicy *self, PyObject *args);
        static PyObject *t_MergePolicy_findMerges(t_MergePolicy *self, PyObject *args);
        static PyObject *t_MergePolicy_getMaxCFSSegmentSizeMB(t_MergePolicy *self);
        static PyObject *t_MergePolicy_getNoCFSRatio(t_MergePolicy *self);
        static PyObject *t_MergePolicy_keepFullyDeletedSegment(t_MergePolicy *self, PyObject *arg);
        static PyObject *t_MergePolicy_numDeletesToMerge(t_MergePolicy *self, PyObject *args);
        static PyObject *t_MergePolicy_setMaxCFSSegmentSizeMB(t_MergePolicy *self, PyObject *arg);
        static PyObject *t_MergePolicy_setNoCFSRatio(t_MergePolicy *self, PyObject *arg);
        static PyObject *t_MergePolicy_useCompoundFile(t_MergePolicy *self, PyObject *args);
        static PyObject *t_MergePolicy_get__maxCFSSegmentSizeMB(t_MergePolicy *self, void *data);
        static int t_MergePolicy_set__maxCFSSegmentSizeMB(t_MergePolicy *self, PyObject *arg, void *data);
        static PyObject *t_MergePolicy_get__noCFSRatio(t_MergePolicy *self, void *data);
        static int t_MergePolicy_set__noCFSRatio(t_MergePolicy *self, PyObject *arg, void *data);
        static PyGetSetDef t_MergePolicy__fields_[] = {
          DECLARE_GETSET_FIELD(t_MergePolicy, maxCFSSegmentSizeMB),
          DECLARE_GETSET_FIELD(t_MergePolicy, noCFSRatio),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_MergePolicy__methods_[] = {
          DECLARE_METHOD(t_MergePolicy, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_MergePolicy, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_MergePolicy, findForcedDeletesMerges, METH_VARARGS),
          DECLARE_METHOD(t_MergePolicy, findForcedMerges, METH_VARARGS),
          DECLARE_METHOD(t_MergePolicy, findFullFlushMerges, METH_VARARGS),
          DECLARE_METHOD(t_MergePolicy, findMerges, METH_VARARGS),
          DECLARE_METHOD(t_MergePolicy, getMaxCFSSegmentSizeMB, METH_NOARGS),
          DECLARE_METHOD(t_MergePolicy, getNoCFSRatio, METH_NOARGS),
          DECLARE_METHOD(t_MergePolicy, keepFullyDeletedSegment, METH_O),
          DECLARE_METHOD(t_MergePolicy, numDeletesToMerge, METH_VARARGS),
          DECLARE_METHOD(t_MergePolicy, setMaxCFSSegmentSizeMB, METH_O),
          DECLARE_METHOD(t_MergePolicy, setNoCFSRatio, METH_O),
          DECLARE_METHOD(t_MergePolicy, useCompoundFile, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        static PyType_Slot PY_TYPE_SLOTS(MergePolicy)[] = {
          { Py_tp_methods, t_MergePolicy__methods_ },
          { Py_tp_init, (void *) t_MergePolicy_init_ },
          { Py_tp_getset, t_MergePolicy__fields_ },
          { 0, NULL }
        };

        static PyType_Def *PY_TYPE_BASES(MergePolicy)[] = {
          &PY_TYPE_DEF(::java::lang::Object),
          NULL
        };

        DEFINE_TYPE(MergePolicy, t_MergePolicy, MergePolicy);

        void t_MergePolicy::install(PyObject *module)
        {
          installType(&PY_TYPE(MergePolicy), &PY_TYPE_DEF(MergePolicy), module, "MergePolicy", 0);
          PyObject_SetAttrString((PyObject *) PY_TYPE(MergePolicy), "MergeContext", make_descriptor(&PY_TYPE_DEF(MergePolicy$MergeContext)));
          PyObject_SetAttrString((PyObject *) PY_TYPE(MergePolicy), "MergeAbortedException", make_descriptor(&PY_TYPE_DEF(MergePolicy$MergeAbortedException)));
          PyObject_SetAttrString((PyObject *) PY_TYPE(MergePolicy), "MergeException", make_descriptor(&PY_TYPE_DEF(MergePolicy$MergeException)));
          PyObject_SetAttrString((PyObject *) PY_TYPE(MergePolicy), "MergeSpecification", make_descriptor(&PY_TYPE_DEF(MergePolicy$MergeSpecification)));
          PyObject_SetAttrString((PyObject *) PY_TYPE(MergePolicy), "OneMerge", make_descriptor(&PY_TYPE_DEF(MergePolicy$OneMerge)));
          PyObject_SetAttrString((PyObject *) PY_TYPE(MergePolicy), "OneMergeProgress", make_descriptor(&PY_TYPE_DEF(MergePolicy$OneMergeProgress)));
        }

        void t_MergePolicy::initialize(PyObject *module)
        {
          PyObject_SetAttrString((PyObject *) PY_TYPE(MergePolicy), "class_", make_descriptor(MergePolicy::initializeClass, 1));
          PyObject_SetAttrString((PyObject *) PY_TYPE(MergePolicy), "wrapfn_", make_descriptor(t_MergePolicy::wrap_jobject));
          PyObject_SetAttrString((PyObject *) PY_TYPE(MergePolicy), "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_MergePolicy_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, MergePolicy::initializeClass, 1)))
            return NULL;
          return t_MergePolicy::wrap_Object(MergePolicy(((t_MergePolicy *) arg)->object.this$));
        }
        static PyObject *t_MergePolicy_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, MergePolicy::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_MergePolicy_init_(t_MergePolicy *self, PyObject *args, PyObject *kwds)
        {
          MergePolicy object((jobject) NULL);

          INT_CALL(object = MergePolicy());
          self->object = object;

          return 0;
        }

        static PyObject *t_MergePolicy_findForcedDeletesMerges(t_MergePolicy *self, PyObject *args)
        {
          ::org::apache::lucene::index::SegmentInfos a0((jobject) NULL);
          ::org::apache::lucene::index::MergePolicy$MergeContext a1((jobject) NULL);
          ::org::apache::lucene::index::MergePolicy$MergeSpecification result((jobject) NULL);

          if (!parseArgs(args, "kk", ::org::apache::lucene::index::SegmentInfos::initializeClass, ::org::apache::lucene::index::MergePolicy$MergeContext::initializeClass, &a0, &a1))
          {
            OBJ_CALL(result = self->object.findForcedDeletesMerges(a0, a1));
            return ::org::apache::lucene::index::t_MergePolicy$MergeSpecification::wrap_Object(result);
          }

          PyErr_SetArgsError((PyObject *) self, "findForcedDeletesMerges", args);
          return NULL;
        }

        static PyObject *t_MergePolicy_findForcedMerges(t_MergePolicy *self, PyObject *args)
        {
          ::org::apache::lucene::index::SegmentInfos a0((jobject) NULL);
          jint a1;
          ::java::util::Map a2((jobject) NULL);
          PyTypeObject **p2;
          ::org::apache::lucene::index::MergePolicy$MergeContext a3((jobject) NULL);
          ::org::apache::lucene::index::MergePolicy$MergeSpecification result((jobject) NULL);

          if (!parseArgs(args, "kIKk", ::org::apache::lucene::index::SegmentInfos::initializeClass, ::java::util::Map::initializeClass, ::org::apache::lucene::index::MergePolicy$MergeContext::initializeClass, &a0, &a1, &a2, &p2, ::java::util::t_Map::parameters_, &a3))
          {
            OBJ_CALL(result = self->object.findForcedMerges(a0, a1, a2, a3));
            return ::org::apache::lucene::index::t_MergePolicy$MergeSpecification::wrap_Object(result);
          }

          PyErr_SetArgsError((PyObject *) self, "findForcedMerges", args);
          return NULL;
        }

        static PyObject *t_MergePolicy_findFullFlushMerges(t_MergePolicy *self, PyObject *args)
        {
          ::org::apache::lucene::index::MergeTrigger a0((jobject) NULL);
          PyTypeObject **p0;
          ::org::apache::lucene::index::SegmentInfos a1((jobject) NULL);
          ::org::apache::lucene::index::MergePolicy$MergeContext a2((jobject) NULL);
          ::org::apache::lucene::index::MergePolicy$MergeSpecification result((jobject) NULL);

          if (!parseArgs(args, "Kkk", ::org::apache::lucene::index::MergeTrigger::initializeClass, ::org::apache::lucene::index::SegmentInfos::initializeClass, ::org::apache::lucene::index::MergePolicy$MergeContext::initializeClass, &a0, &p0, ::org::apache::lucene::index::t_MergeTrigger::parameters_, &a1, &a2))
          {
            OBJ_CALL(result = self->object.findFullFlushMerges(a0, a1, a2));
            return ::org::apache::lucene::index::t_MergePolicy$MergeSpecification::wrap_Object(result);
          }

          PyErr_SetArgsError((PyObject *) self, "findFullFlushMerges", args);
          return NULL;
        }

        static PyObject *t_MergePolicy_findMerges(t_MergePolicy *self, PyObject *args)
        {
          ::org::apache::lucene::index::MergeTrigger a0((jobject) NULL);
          PyTypeObject **p0;
          ::org::apache::lucene::index::SegmentInfos a1((jobject) NULL);
          ::org::apache::lucene::index::MergePolicy$MergeContext a2((jobject) NULL);
          ::org::apache::lucene::index::MergePolicy$MergeSpecification result((jobject) NULL);

          if (!parseArgs(args, "Kkk", ::org::apache::lucene::index::MergeTrigger::initializeClass, ::org::apache::lucene::index::SegmentInfos::initializeClass, ::org::apache::lucene::index::MergePolicy$MergeContext::initializeClass, &a0, &p0, ::org::apache::lucene::index::t_MergeTrigger::parameters_, &a1, &a2))
          {
            OBJ_CALL(result = self->object.findMerges(a0, a1, a2));
            return ::org::apache::lucene::index::t_MergePolicy$MergeSpecification::wrap_Object(result);
          }

          PyErr_SetArgsError((PyObject *) self, "findMerges", args);
          return NULL;
        }

        static PyObject *t_MergePolicy_getMaxCFSSegmentSizeMB(t_MergePolicy *self)
        {
          jdouble result;
          OBJ_CALL(result = self->object.getMaxCFSSegmentSizeMB());
          return PyFloat_FromDouble((double) result);
        }

        static PyObject *t_MergePolicy_getNoCFSRatio(t_MergePolicy *self)
        {
          jdouble result;
          OBJ_CALL(result = self->object.getNoCFSRatio());
          return PyFloat_FromDouble((double) result);
        }

        static PyObject *t_MergePolicy_keepFullyDeletedSegment(t_MergePolicy *self, PyObject *arg)
        {
          ::org::apache::lucene::util::IOSupplier a0((jobject) NULL);
          PyTypeObject **p0;
          jboolean result;

          if (!parseArg(arg, "K", ::org::apache::lucene::util::IOSupplier::initializeClass, &a0, &p0, ::org::apache::lucene::util::t_IOSupplier::parameters_))
          {
            OBJ_CALL(result = self->object.keepFullyDeletedSegment(a0));
            Py_RETURN_BOOL(result);
          }

          PyErr_SetArgsError((PyObject *) self, "keepFullyDeletedSegment", arg);
          return NULL;
        }

        static PyObject *t_MergePolicy_numDeletesToMerge(t_MergePolicy *self, PyObject *args)
        {
          ::org::apache::lucene::index::SegmentCommitInfo a0((jobject) NULL);
          jint a1;
          ::org::apache::lucene::util::IOSupplier a2((jobject) NULL);
          PyTypeObject **p2;
          jint result;

          if (!parseArgs(args, "kIK", ::org::apache::lucene::index::SegmentCommitInfo::initializeClass, ::org::apache::lucene::util::IOSupplier::initializeClass, &a0, &a1, &a2, &p2, ::org::apache::lucene::util::t_IOSupplier::parameters_))
          {
            OBJ_CALL(result = self->object.numDeletesToMerge(a0, a1, a2));
            return PyLong_FromLong((long) result);
          }

          PyErr_SetArgsError((PyObject *) self, "numDeletesToMerge", args);
          return NULL;
        }

        static PyObject *t_MergePolicy_setMaxCFSSegmentSizeMB(t_MergePolicy *self, PyObject *arg)
        {
          jdouble a0;

          if (!parseArg(arg, "D", &a0))
          {
            OBJ_CALL(self->object.setMaxCFSSegmentSizeMB(a0));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "setMaxCFSSegmentSizeMB", arg);
          return NULL;
        }

        static PyObject *t_MergePolicy_setNoCFSRatio(t_MergePolicy *self, PyObject *arg)
        {
          jdouble a0;

          if (!parseArg(arg, "D", &a0))
          {
            OBJ_CALL(self->object.setNoCFSRatio(a0));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "setNoCFSRatio", arg);
          return NULL;
        }

        static PyObject *t_MergePolicy_useCompoundFile(t_MergePolicy *self, PyObject *args)
        {
          ::org::apache::lucene::index::SegmentInfos a0((jobject) NULL);
          ::org::apache::lucene::index::SegmentCommitInfo a1((jobject) NULL);
          ::org::apache::lucene::index::MergePolicy$MergeContext a2((jobject) NULL);
          jboolean result;

          if (!parseArgs(args, "kkk", ::org::apache::lucene::index::SegmentInfos::initializeClass, ::org::apache::lucene::index::SegmentCommitInfo::initializeClass, ::org::apache::lucene::index::MergePolicy$MergeContext::initializeClass, &a0, &a1, &a2))
          {
            OBJ_CALL(result = self->object.useCompoundFile(a0, a1, a2));
            Py_RETURN_BOOL(result);
          }

          PyErr_SetArgsError((PyObject *) self, "useCompoundFile", args);
          return NULL;
        }

        static PyObject *t_MergePolicy_get__maxCFSSegmentSizeMB(t_MergePolicy *self, void *data)
        {
          jdouble value;
          OBJ_CALL(value = self->object.getMaxCFSSegmentSizeMB());
          return PyFloat_FromDouble((double) value);
        }
        static int t_MergePolicy_set__maxCFSSegmentSizeMB(t_MergePolicy *self, PyObject *arg, void *data)
        {
          {
            jdouble value;
            if (!parseArg(arg, "D", &value))
            {
              INT_CALL(self->object.setMaxCFSSegmentSizeMB(value));
              return 0;
            }
          }
          PyErr_SetArgsError((PyObject *) self, "maxCFSSegmentSizeMB", arg);
          return -1;
        }

        static PyObject *t_MergePolicy_get__noCFSRatio(t_MergePolicy *self, void *data)
        {
          jdouble value;
          OBJ_CALL(value = self->object.getNoCFSRatio());
          return PyFloat_FromDouble((double) value);
        }
        static int t_MergePolicy_set__noCFSRatio(t_MergePolicy *self, PyObject *arg, void *data)
        {
          {
            jdouble value;
            if (!parseArg(arg, "D", &value))
            {
              INT_CALL(self->object.setNoCFSRatio(value));
              return 0;
            }
          }
          PyErr_SetArgsError((PyObject *) self, "noCFSRatio", arg);
          return -1;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/ScoreCachingWrappingScorer.h"
#include "java/util/Collection.h"
#include "org/apache/lucene/search/Scorable$ChildScorable.h"
#include "java/lang/Class.h"
#include "java/io/IOException.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {

        ::java::lang::Class *ScoreCachingWrappingScorer::class$ = NULL;
        jmethodID *ScoreCachingWrappingScorer::mids$ = NULL;
        bool ScoreCachingWrappingScorer::live$ = false;

        jclass ScoreCachingWrappingScorer::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/search/ScoreCachingWrappingScorer");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_57a565cc0113e133] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/search/Scorable;)V");
            mids$[mid_docID_9972fcc56b44e79d] = env->getMethodID(cls, "docID", "()I");
            mids$[mid_getChildren_d4dfbf7a26ff41df] = env->getMethodID(cls, "getChildren", "()Ljava/util/Collection;");
            mids$[mid_score_58aec2b64dff50c8] = env->getMethodID(cls, "score", "()F");
            mids$[mid_setMinCompetitiveScore_8e1d952dd65cdc3a] = env->getMethodID(cls, "setMinCompetitiveScore", "(F)V");

            class$ = new ::java::lang::Class(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        ScoreCachingWrappingScorer::ScoreCachingWrappingScorer(const ::org::apache::lucene::search::Scorable & a0) : ::org::apache::lucene::search::Scorable(env->newObject(initializeClass, &mids$, mid_init$_57a565cc0113e133, a0.this$)) {}

        jint ScoreCachingWrappingScorer::docID() const
        {
          return env->callIntMethod(this$, mids$[mid_docID_9972fcc56b44e79d]);
        }

        ::java::util::Collection ScoreCachingWrappingScorer::getChildren() const
        {
          return ::java::util::Collection(env->callObjectMethod(this$, mids$[mid_getChildren_d4dfbf7a26ff41df]));
        }

        jfloat ScoreCachingWrappingScorer::score() const
        {
          return env->callFloatMethod(this$, mids$[mid_score_58aec2b64dff50c8]);
        }

        void ScoreCachingWrappingScorer::setMinCompetitiveScore(jfloat a0) const
        {
          env->callVoidMethod(this$, mids$[mid_setMinCompetitiveScore_8e1d952dd65cdc3a], a0);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        static PyObject *t_ScoreCachingWrappingScorer_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_ScoreCachingWrappingScorer_instance_(PyTypeObject *type, PyObject *arg);
        static int t_ScoreCachingWrappingScorer_init_(t_ScoreCachingWrappingScorer *self, PyObject *args, PyObject *kwds);
        static PyObject *t_ScoreCachingWrappingScorer_docID(t_ScoreCachingWrappingScorer *self, PyObject *args);
        static PyObject *t_ScoreCachingWrappingScorer_getChildren(t_ScoreCachingWrappingScorer *self, PyObject *args);
        static PyObject *t_ScoreCachingWrappingScorer_score(t_ScoreCachingWrappingScorer *self, PyObject *args);
        static PyObject *t_ScoreCachingWrappingScorer_setMinCompetitiveScore(t_ScoreCachingWrappingScorer *self, PyObject *args);
        static PyObject *t_ScoreCachingWrappingScorer_get__children(t_ScoreCachingWrappingScorer *self, void *data);
        static int t_ScoreCachingWrappingScorer_set__minCompetitiveScore(t_ScoreCachingWrappingScorer *self, PyObject *arg, void *data);
        static PyGetSetDef t_ScoreCachingWrappingScorer__fields_[] = {
          DECLARE_GET_FIELD(t_ScoreCachingWrappingScorer, children),
          DECLARE_SET_FIELD(t_ScoreCachingWrappingScorer, minCompetitiveScore),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_ScoreCachingWrappingScorer__methods_[] = {
          DECLARE_METHOD(t_ScoreCachingWrappingScorer, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_ScoreCachingWrappingScorer, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_ScoreCachingWrappingScorer, docID, METH_VARARGS),
          DECLARE_METHOD(t_ScoreCachingWrappingScorer, getChildren, METH_VARARGS),
          DECLARE_METHOD(t_ScoreCachingWrappingScorer, score, METH_VARARGS),
          DECLARE_METHOD(t_ScoreCachingWrappingScorer, setMinCompetitiveScore, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        static PyType_Slot PY_TYPE_SLOTS(ScoreCachingWrappingScorer)[] = {
          { Py_tp_methods, t_ScoreCachingWrappingScorer__methods_ },
          { Py_tp_init, (void *) t_ScoreCachingWrappingScorer_init_ },
          { Py_tp_getset, t_ScoreCachingWrappingScorer__fields_ },
          { 0, NULL }
        };

        static PyType_Def *PY_TYPE_BASES(ScoreCachingWrappingScorer)[] = {
          &PY_TYPE_DEF(::org::apache::lucene::search::Scorable),
          NULL
        };

        DEFINE_TYPE(ScoreCachingWrappingScorer, t_ScoreCachingWrappingScorer, ScoreCachingWrappingScorer);

        void t_ScoreCachingWrappingScorer::install(PyObject *module)
        {
          installType(&PY_TYPE(ScoreCachingWrappingScorer), &PY_TYPE_DEF(ScoreCachingWrappingScorer), module, "ScoreCachingWrappingScorer", 0);
        }

        void t_ScoreCachingWrappingScorer::initialize(PyObject *module)
        {
          PyObject_SetAttrString((PyObject *) PY_TYPE(ScoreCachingWrappingScorer), "class_", make_descriptor(ScoreCachingWrappingScorer::initializeClass, 1));
          PyObject_SetAttrString((PyObject *) PY_TYPE(ScoreCachingWrappingScorer), "wrapfn_", make_descriptor(t_ScoreCachingWrappingScorer::wrap_jobject));
          PyObject_SetAttrString((PyObject *) PY_TYPE(ScoreCachingWrappingScorer), "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_ScoreCachingWrappingScorer_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, ScoreCachingWrappingScorer::initializeClass, 1)))
            return NULL;
          return t_ScoreCachingWrappingScorer::wrap_Object(ScoreCachingWrappingScorer(((t_ScoreCachingWrappingScorer *) arg)->object.this$));
        }
        static PyObject *t_ScoreCachingWrappingScorer_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, ScoreCachingWrappingScorer::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_ScoreCachingWrappingScorer_init_(t_ScoreCachingWrappingScorer *self, PyObject *args, PyObject *kwds)
        {
          ::org::apache::lucene::search::Scorable a0((jobject) NULL);
          ScoreCachingWrappingScorer object((jobject) NULL);

          if (!parseArgs(args, "k", ::org::apache::lucene::search::Scorable::initializeClass, &a0))
          {
            INT_CALL(object = ScoreCachingWrappingScorer(a0));
            self->object = object;
          }
          else
          {
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }

        static PyObject *t_ScoreCachingWrappingScorer_docID(t_ScoreCachingWrappingScorer *self, PyObject *args)
        {
          jint result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.docID());
            return PyLong_FromLong((long) result);
          }

          return callSuper(PY_TYPE(ScoreCachingWrappingScorer), (PyObject *) self, "docID", args, 2);
        }

        static PyObject *t_ScoreCachingWrappingScorer_getChildren(t_ScoreCachingWrappingScorer *self, PyObject *args)
        {
          ::java::util::Collection result((jobject) NULL);

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.getChildren());
            return ::java::util::t_Collection::wrap_Object(result, ::org::apache::lucene::search::PY_TYPE(Scorable$ChildScorable));
          }

          return callSuper(PY_TYPE(ScoreCachingWrappingScorer), (PyObject *) self, "getChildren", args, 2);
        }

        static PyObject *t_ScoreCachingWrappingScorer_score(t_ScoreCachingWrappingScorer *self, PyObject *args)
        {
          jfloat result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.score());
            return PyFloat_FromDouble((double) result);
          }

          return callSuper(PY_TYPE(ScoreCachingWrappingScorer), (PyObject *) self, "score", args, 2);
        }

        static PyObject *t_ScoreCachingWrappingScorer_setMinCompetitiveScore(t_ScoreCachingWrappingScorer *self, PyObject *args)
        {
          jfloat a0;

          if (!parseArgs(args, "F", &a0))
          {
            OBJ_CALL(self->object.setMinCompetitiveScore(a0));
            Py_RETURN_NONE;
          }

          return callSuper(PY_TYPE(ScoreCachingWrappingScorer), (PyObject *) self, "setMinCompetitiveScore", args, 2);
        }

        static PyObject *t_ScoreCachingWrappingScorer_get__children(t_ScoreCachingWrappingScorer *self, void *data)
        {
          ::java::util::Collection value((jobject) NULL);
          OBJ_CALL(value = self->object.getChildren());
          return ::java::util::t_Collection::wrap_Object(value);
        }

        static int t_ScoreCachingWrappingScorer_set__minCompetitiveScore(t_ScoreCachingWrappingScorer *self, PyObject *arg, void *data)
        {
          {
            jfloat value;
            if (!parseArg(arg, "F", &value))
            {
              INT_CALL(self->object.setMinCompetitiveScore(value));
              return 0;
            }
          }
          PyErr_SetArgsError((PyObject *) self, "minCompetitiveScore", arg);
          return -1;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/util/OfflineSorter$BufferSize.h"
#include "org/apache/lucene/util/OfflineSorter$BufferSize.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {

        ::java::lang::Class *OfflineSorter$BufferSize::class$ = NULL;
        jmethodID *OfflineSorter$BufferSize::mids$ = NULL;
        bool OfflineSorter$BufferSize::live$ = false;

        jclass OfflineSorter$BufferSize::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/util/OfflineSorter$BufferSize");

            mids$ = new jmethodID[max_mid];
            mids$[mid_automatic_647e51a2c8686434] = env->getStaticMethodID(cls, "automatic", "()Lorg/apache/lucene/util/OfflineSorter$BufferSize;");
            mids$[mid_megabytes_9003d57433fe3f66] = env->getStaticMethodID(cls, "megabytes", "(J)Lorg/apache/lucene/util/OfflineSorter$BufferSize;");

            class$ = new ::java::lang::Class(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        OfflineSorter$BufferSize OfflineSorter$BufferSize::automatic()
        {
          jclass cls = env->getClass(initializeClass);
          return OfflineSorter$BufferSize(env->callStaticObjectMethod(cls, mids$[mid_automatic_647e51a2c8686434]));
        }

        OfflineSorter$BufferSize OfflineSorter$BufferSize::megabytes(jlong a0)
        {
          jclass cls = env->getClass(initializeClass);
          return OfflineSorter$BufferSize(env->callStaticObjectMethod(cls, mids$[mid_megabytes_9003d57433fe3f66], a0));
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        static PyObject *t_OfflineSorter$BufferSize_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_OfflineSorter$BufferSize_instance_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_OfflineSorter$BufferSize_automatic(PyTypeObject *type);
        static PyObject *t_OfflineSorter$BufferSize_megabytes(PyTypeObject *type, PyObject *arg);

        static PyMethodDef t_OfflineSorter$BufferSize__methods_[] = {
          DECLARE_METHOD(t_OfflineSorter$BufferSize, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_OfflineSorter$BufferSize, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_OfflineSorter$BufferSize, automatic, METH_NOARGS | METH_CLASS),
          DECLARE_METHOD(t_OfflineSorter$BufferSize, megabytes, METH_O | METH_CLASS),
          { NULL, NULL, 0, NULL }
        };

        static PyType_Slot PY_TYPE_SLOTS(OfflineSorter$BufferSize)[] = {
          { Py_tp_methods, t_OfflineSorter$BufferSize__methods_ },
          { Py_tp_init, (void *) abstract_init },
          { 0, NULL }
        };

        static PyType_Def *PY_TYPE_BASES(OfflineSorter$BufferSize)[] = {
          &PY_TYPE_DEF(::java::lang::Object),
          NULL
        };

        DEFINE_TYPE(OfflineSorter$BufferSize, t_OfflineSorter$BufferSize, OfflineSorter$BufferSize);

        void t_OfflineSorter$BufferSize::install(PyObject *module)
        {
          installType(&PY_TYPE(OfflineSorter$BufferSize), &PY_TYPE_DEF(OfflineSorter$BufferSize), module, "OfflineSorter$BufferSize", 0);
        }

        void t_OfflineSorter$BufferSize::initialize(PyObject *module)
        {
          PyObject_SetAttrString((PyObject *) PY_TYPE(OfflineSorter$BufferSize), "class_", make_descriptor(OfflineSorter$BufferSize::initializeClass, 1));
          PyObject_SetAttrString((PyObject *) PY_TYPE(OfflineSorter$BufferSize), "wrapfn_", make_descriptor(t_OfflineSorter$BufferSize::wrap_jobject));
          PyObject_SetAttrString((PyObject *) PY_TYPE(OfflineSorter$BufferSize), "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_OfflineSorter$BufferSize_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, OfflineSorter$BufferSize::initializeClass, 1)))
            return NULL;
          return t_OfflineSorter$BufferSize::wrap_Object(OfflineSorter$BufferSize(((t_OfflineSorter$BufferSize *) arg)->object.this$));
        }
        static PyObject *t_OfflineSorter$BufferSize_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, OfflineSorter$BufferSize::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static PyObject *t_OfflineSorter$BufferSize_automatic(PyTypeObject *type)
        {
          OfflineSorter$BufferSize result((jobject) NULL);
          OBJ_CALL(result = ::org::apache::lucene::util::OfflineSorter$BufferSize::automatic());
          return t_OfflineSorter$BufferSize::wrap_Object(result);
        }

        static PyObject *t_OfflineSorter$BufferSize_megabytes(PyTypeObject *type, PyObject *arg)
        {
          jlong a0;
          OfflineSorter$BufferSize result((jobject) NULL);

          if (!parseArg(arg, "J", &a0))
          {
            OBJ_CALL(result = ::org::apache::lucene::util::OfflineSorter$BufferSize::megabytes(a0));
            return t_OfflineSorter$BufferSize::wrap_Object(result);
          }

          PyErr_SetArgsError(type, "megabytes", arg);
          return NULL;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/grouping/SecondPassGroupingCollector.h"
#include "java/util/Collection.h"
#include "org/apache/lucene/search/grouping/GroupSelector.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/search/Scorable.h"
#include "java/lang/Object.h"
#include "org/apache/lucene/search/grouping/SearchGroup.h"
#include "org/apache/lucene/search/grouping/GroupReducer.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/search/ScoreMode.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace grouping {

          ::java::lang::Class *SecondPassGroupingCollector::class$ = NULL;
          jmethodID *SecondPassGroupingCollector::mids$ = NULL;
          bool SecondPassGroupingCollector::live$ = false;

          jclass SecondPassGroupingCollector::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/search/grouping/SecondPassGroupingCollector");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_7f17b15ce8fed6d7] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/search/grouping/GroupSelector;Ljava/util/Collection;Lorg/apache/lucene/search/grouping/GroupReducer;)V");
              mids$[mid_collect_040c4cd0390c5aff] = env->getMethodID(cls, "collect", "(I)V");
              mids$[mid_getGroupSelector_06bb0f4d4c7a4e8b] = env->getMethodID(cls, "getGroupSelector", "()Lorg/apache/lucene/search/grouping/GroupSelector;");
              mids$[mid_scoreMode_8a35254b82ee8276] = env->getMethodID(cls, "scoreMode", "()Lorg/apache/lucene/search/ScoreMode;");
              mids$[mid_setScorer_57a565cc0113e133] = env->getMethodID(cls, "setScorer", "(Lorg/apache/lucene/search/Scorable;)V");
              mids$[mid_doSetNextReader_8747e0e89febf88d] = env->getMethodID(cls, "doSetNextReader", "(Lorg/apache/lucene/index/LeafReaderContext;)V");

              class$ = new ::java::lang::Class(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          SecondPassGroupingCollector::SecondPassGroupingCollector(const ::org::apache::lucene::search::grouping::GroupSelector & a0, const ::java::util::Collection & a1, const ::org::apache::lucene::search::grouping::GroupReducer & a2) : ::org::apache::lucene::search::SimpleCollector(env->newObject(initializeClass, &mids$, mid_init$_7f17b15ce8fed6d7, a0.this$, a1.this$, a2.this$)) {}

          void SecondPassGroupingCollector::collect(jint a0) const
          {
            env->callVoidMethod(this$, mids$[mid_collect_040c4cd0390c5aff], a0);
          }

          ::org::apache::lucene::search::grouping::GroupSelector SecondPassGroupingCollector::getGroupSelector() const
          {
            return ::org::apache::lucene::search::grouping::GroupSelector(env->callObjectMethod(this$, mids$[mid_getGroupSelector_06bb0f4d4c7a4e8b]));
          }

          ::org::apache::lucene::search::ScoreMode SecondPassGroupingCollector::scoreMode() const
          {
            return ::org::apache::lucene::search::ScoreMode(env->callObjectMethod(this$, mids$[mid_scoreMode_8a35254b82ee8276]));
          }

          void SecondPassGroupingCollector::setScorer(const ::org::apache::lucene::search::Scorable & a0) const
          {
            env->callVoidMethod(this$, mids$[mid_setScorer_57a565cc0113e133], a0.this$);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace grouping {
          static PyObject *t_SecondPassGroupingCollector_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_SecondPassGroupingCollector_instance_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_SecondPassGroupingCollector_of_(t_SecondPassGroupingCollector *self, PyObject *args);
          static int t_SecondPassGroupingCollector_init_(t_SecondPassGroupingCollector *self, PyObject *args, PyObject *kwds);
          static PyObject *t_SecondPassGroupingCollector_collect(t_SecondPassGroupingCollector *self, PyObject *args);
          static PyObject *t_SecondPassGroupingCollector_getGroupSelector(t_SecondPassGroupingCollector *self);
          static PyObject *t_SecondPassGroupingCollector_scoreMode(t_SecondPassGroupingCollector *self, PyObject *args);
          static PyObject *t_SecondPassGroupingCollector_setScorer(t_SecondPassGroupingCollector *self, PyObject *args);
          static PyObject *t_SecondPassGroupingCollector_get__groupSelector(t_SecondPassGroupingCollector *self, void *data);
          static int t_SecondPassGroupingCollector_set__scorer(t_SecondPassGroupingCollector *self, PyObject *arg, void *data);
          static PyObject *t_SecondPassGroupingCollector_get__parameters_(t_SecondPassGroupingCollector *self, void *data);
          static PyGetSetDef t_SecondPassGroupingCollector__fields_[] = {
            DECLARE_GET_FIELD(t_SecondPassGroupingCollector, groupSelector),
            DECLARE_SET_FIELD(t_SecondPassGroupingCollector, scorer),
            DECLARE_GET_FIELD(t_SecondPassGroupingCollector, parameters_),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_SecondPassGroupingCollector__methods_[] = {
            DECLARE_METHOD(t_SecondPassGroupingCollector, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_SecondPassGroupingCollector, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_SecondPassGroupingCollector, of_, METH_VARARGS),
            DECLARE_METHOD(t_SecondPassGroupingCollector, collect, METH_VARARGS),
            DECLARE_METHOD(t_SecondPassGroupingCollector, getGroupSelector, METH_NOARGS),
            DECLARE_METHOD(t_SecondPassGroupingCollector, scoreMode, METH_VARARGS),
            DECLARE_METHOD(t_SecondPassGroupingCollector, setScorer, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          static PyType_Slot PY_TYPE_SLOTS(SecondPassGroupingCollector)[] = {
            { Py_tp_methods, t_SecondPassGroupingCollector__methods_ },
            { Py_tp_init, (void *) t_SecondPassGroupingCollector_init_ },
            { Py_tp_getset, t_SecondPassGroupingCollector__fields_ },
            { 0, NULL }
          };

          static PyType_Def *PY_TYPE_BASES(SecondPassGroupingCollector)[] = {
            &PY_TYPE_DEF(::org::apache::lucene::search::SimpleCollector),
            NULL
          };

          DEFINE_TYPE(SecondPassGroupingCollector, t_SecondPassGroupingCollector, SecondPassGroupingCollector);
          PyObject *t_SecondPassGroupingCollector::wrap_Object(const SecondPassGroupingCollector& object, PyTypeObject *p0)
          {
            PyObject *obj = t_SecondPassGroupingCollector::wrap_Object(object);
            if (obj != NULL && obj != Py_None)
            {
              t_SecondPassGroupingCollector *self = (t_SecondPassGroupingCollector *) obj;
              self->parameters[0] = p0;
            }
            return obj;
          }

          PyObject *t_SecondPassGroupingCollector::wrap_jobject(const jobject& object, PyTypeObject *p0)
          {
            PyObject *obj = t_SecondPassGroupingCollector::wrap_jobject(object);
            if (obj != NULL && obj != Py_None)
            {
              t_SecondPassGroupingCollector *self = (t_SecondPassGroupingCollector *) obj;
              self->parameters[0] = p0;
            }
            return obj;
          }

          void t_SecondPassGroupingCollector::install(PyObject *module)
          {
            installType(&PY_TYPE(SecondPassGroupingCollector), &PY_TYPE_DEF(SecondPassGroupingCollector), module, "SecondPassGroupingCollector", 0);
          }

          void t_SecondPassGroupingCollector::initialize(PyObject *module)
          {
            PyObject_SetAttrString((PyObject *) PY_TYPE(SecondPassGroupingCollector), "class_", make_descriptor(SecondPassGroupingCollector::initializeClass, 1));
            PyObject_SetAttrString((PyObject *) PY_TYPE(SecondPassGroupingCollector), "wrapfn_", make_descriptor(t_SecondPassGroupingCollector::wrap_jobject));
            PyObject_SetAttrString((PyObject *) PY_TYPE(SecondPassGroupingCollector), "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_SecondPassGroupingCollector_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, SecondPassGroupingCollector::initializeClass, 1)))
              return NULL;
            return t_SecondPassGroupingCollector::wrap_Object(SecondPassGroupingCollector(((t_SecondPassGroupingCollector *) arg)->object.this$));
          }
          static PyObject *t_SecondPassGroupingCollector_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, SecondPassGroupingCollector::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static PyObject *t_SecondPassGroupingCollector_of_(t_SecondPassGroupingCollector *self, PyObject *args)
          {
            if (!parseArg(args, "T", 1, &(self->parameters)))
              Py_RETURN_SELF;
            return PyErr_SetArgsError((PyObject *) self, "of_", args);
          }

          static int t_SecondPassGroupingCollector_init_(t_SecondPassGroupingCollector *self, PyObject *args, PyObject *kwds)
          {
            ::org::apache::lucene::search::grouping::GroupSelector a0((jobject) NULL);
            PyTypeObject **p0;
            ::java::util::Collection a1((jobject) NULL);
            PyTypeObject **p1;
            ::org::apache::lucene::search::grouping::GroupReducer a2((jobject) NULL);
            PyTypeObject **p2;
            SecondPassGroupingCollector object((jobject) NULL);

            if (!parseArgs(args, "KKK", ::org::apache::lucene::search::grouping::GroupSelector::initializeClass, ::java::util::Collection::initializeClass, ::org::apache::lucene::search::grouping::GroupReducer::initializeClass, &a0, &p0, ::org::apache::lucene::search::grouping::t_GroupSelector::parameters_, &a1, &p1, ::java::util::t_Collection::parameters_, &a2, &p2, ::org::apache::lucene::search::grouping::t_GroupReducer::parameters_))
            {
              INT_CALL(object = SecondPassGroupingCollector(a0, a1, a2));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_SecondPassGroupingCollector_collect(t_SecondPassGroupingCollector *self, PyObject *args)
          {
            jint a0;

            if (!parseArgs(args, "I", &a0))
            {
              OBJ_CALL(self->object.collect(a0));
              Py_RETURN_NONE;
            }

            return callSuper(PY_TYPE(SecondPassGroupingCollector), (PyObject *) self, "collect", args, 2);
          }

          static PyObject *t_SecondPassGroupingCollector_getGroupSelector(t_SecondPassGroupingCollector *self)
          {
            ::org::apache::lucene::search::grouping::GroupSelector result((jobject) NULL);
            OBJ_CALL(result = self->object.getGroupSelector());
            return ::org::apache::lucene::search::grouping::t_GroupSelector::wrap_Object(result, self->parameters[0]);
          }

          static PyObject *t_SecondPassGroupingCollector_scoreMode(t_SecondPassGroupingCollector *self, PyObject *args)
          {
            ::org::apache::lucene::search::ScoreMode result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.scoreMode());
              return ::org::apache::lucene::search::t_ScoreMode::wrap_Object(result);
            }

            return callSuper(PY_TYPE(SecondPassGroupingCollector), (PyObject *) self, "scoreMode", args, 2);
          }

          static PyObject *t_SecondPassGroupingCollector_setScorer(t_SecondPassGroupingCollector *self, PyObject *args)
          {
            ::org::apache::lucene::search::Scorable a0((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::search::Scorable::initializeClass, &a0))
            {
              OBJ_CALL(self->object.setScorer(a0));
              Py_RETURN_NONE;
            }

            return callSuper(PY_TYPE(SecondPassGroupingCollector), (PyObject *) self, "setScorer", args, 2);
          }
          static PyObject *t_SecondPassGroupingCollector_get__parameters_(t_SecondPassGroupingCollector *self, void *data)
          {
            return typeParameters(self->parameters, sizeof(self->parameters));
          }

          static PyObject *t_SecondPassGroupingCollector_get__groupSelector(t_SecondPassGroupingCollector *self, void *data)
          {
            ::org::apache::lucene::search::grouping::GroupSelector value((jobject) NULL);
            OBJ_CALL(value = self->object.getGroupSelector());
            return ::org::apache::lucene::search::grouping::t_GroupSelector::wrap_Object(value);
          }

          static int t_SecondPassGroupingCollector_set__scorer(t_SecondPassGroupingCollector *self, PyObject *arg, void *data)
          {
            {
              ::org::apache::lucene::search::Scorable value((jobject) NULL);
              if (!parseArg(arg, "k", ::org::apache::lucene::search::Scorable::initializeClass, &value))
              {
                INT_CALL(self->object.setScorer(value));
                return 0;
              }
            }
            PyErr_SetArgsError((PyObject *) self, "scorer", arg);
            return -1;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/index/OrdinalMap.h"
#include "java/util/Collection.h"
#include "org/apache/lucene/index/SortedSetDocValues.h"
#include "org/apache/lucene/util/Accountable.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/util/LongValues.h"
#include "org/apache/lucene/index/IndexReader$CacheKey.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/index/SortedDocValues.h"
#include "org/apache/lucene/index/OrdinalMap.h"
#include "org/apache/lucene/index/TermsEnum.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {

        ::java::lang::Class *OrdinalMap::class$ = NULL;
        jmethodID *OrdinalMap::mids$ = NULL;
        jfieldID *OrdinalMap::fids$ = NULL;
        bool OrdinalMap::live$ = false;

        jclass OrdinalMap::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/index/OrdinalMap");

            mids$ = new jmethodID[max_mid];
            mids$[mid_build_70f32f87964660d2] = env->getStaticMethodID(cls, "build", "(Lorg/apache/lucene/index/IndexReader$CacheKey;[Lorg/apache/lucene/index/SortedDocValues;F)Lorg/apache/lucene/index/OrdinalMap;");
            mids$[mid_build_a6a15a723cb6799b] = env->getStaticMethodID(cls, "build", "(Lorg/apache/lucene/index/IndexReader$CacheKey;[Lorg/apache/lucene/index/SortedSetDocValues;F)Lorg/apache/lucene/index/OrdinalMap;");
            mids$[mid_build_930e5388970b68b9] = env->getStaticMethodID(cls, "build", "(Lorg/apache/lucene/index/IndexReader$CacheKey;[Lorg/apache/lucene/index/TermsEnum;[JF)Lorg/apache/lucene/index/OrdinalMap;");
            mids$[mid_getChildResources_d4dfbf7a26ff41df] = env->getMethodID(cls, "getChildResources", "()Ljava/util/Collection;");
            mids$[mid_getFirstSegmentNumber_694afffd0eb7dc3c] = env->getMethodID(cls, "getFirstSegmentNumber", "(J)I");
            mids$[mid_getFirstSegmentOrd_d711eecdc469624a] = env->getMethodID(cls, "getFirstSegmentOrd", "(J)J");
            mids$[mid_getGlobalOrds_2dc8412e7df95ece] = env->getMethodID(cls, "getGlobalOrds", "(I)Lorg/apache/lucene/util/LongValues;");
            mids$[mid_getValueCount_2e5ae9edcb9b072f] = env->getMethodID(cls, "getValueCount", "()J");
            mids$[mid_ramBytesUsed_2e5ae9edcb9b072f] = env->getMethodID(cls, "ramBytesUsed", "()J");

            fids$ = new jfieldID[max_fid];
            fids$[fid_owner] = env->getFieldID(cls, "owner", "Lorg/apache/lucene/index/IndexReader$CacheKey;");

            class$ = new ::java::lang::Class(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        OrdinalMap OrdinalMap::build(const ::org::apache::lucene::index::IndexReader$CacheKey & a0, const JArray< ::org::apache::lucene::index::SortedDocValues > & a1, jfloat a2)
        {
          jclass cls = env->getClass(initializeClass);
          return OrdinalMap(env->callStaticObjectMethod(cls, mids$[mid_build_70f32f87964660d2], a0.this$, a1.this$, a2));
        }

        OrdinalMap OrdinalMap::build(const ::org::apache::lucene::index::IndexReader$CacheKey & a0, const JArray< ::org::apache::lucene::index::SortedSetDocValues > & a1, jfloat a2)
        {
          jclass cls = env->getClass(initializeClass);
          return OrdinalMap(env->callStaticObjectMethod(cls, mids$[mid_build_a6a15a723cb6799b], a0.this$, a1.this$, a2));
        }

        OrdinalMap OrdinalMap::build(const ::org::apache::lucene::index::IndexReader$CacheKey & a0, const JArray< ::org::apache::lucene::index::TermsEnum > & a1, const JArray< jlong > & a2, jfloat a3)
        {
          jclass cls = env->getClass(initializeClass);
          return OrdinalMap(env->callStaticObjectMethod(cls, mids$[mid_build_930e5388970b68b9], a0.this$, a1.this$, a2.this$, a3));
        }

        ::java::util::Collection OrdinalMap::getChildResources() const
        {
          return ::java::util::Collection(env->callObjectMethod(this$, mids$[mid_getChildResources_d4dfbf7a26ff41df]));
        }

        jint OrdinalMap::getFirstSegmentNumber(jlong a0) const
        {
          return env->callIntMethod(this$, mids$[mid_getFirstSegmentNumber_694afffd0eb7dc3c], a0);
        }

        jlong OrdinalMap::getFirstSegmentOrd(jlong a0) const
        {
          return env->callLongMethod(this$, mids$[mid_getFirstSegmentOrd_d711eecdc469624a], a0);
        }

        ::org::apache::lucene::util::LongValues OrdinalMap::getGlobalOrds(jint a0) const
        {
          return ::org::apache::lucene::util::LongValues(env->callObjectMethod(this$, mids$[mid_getGlobalOrds_2dc8412e7df95ece], a0));
        }

        jlong OrdinalMap::getValueCount() const
        {
          return env->callLongMethod(this$, mids$[mid_getValueCount_2e5ae9edcb9b072f]);
        }

        jlong OrdinalMap::ramBytesUsed() const
        {
          return env->callLongMethod(this$, mids$[mid_ramBytesUsed_2e5ae9edcb9b072f]);
        }

        ::org::apache::lucene::index::IndexReader$CacheKey OrdinalMap::_get_owner() const
        {
          return ::org::apache::lucene::index::IndexReader$CacheKey(env->getObjectField(this$, fids$[fid_owner]));
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {
        static PyObject *t_OrdinalMap_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_OrdinalMap_instance_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_OrdinalMap_build(PyTypeObject *type, PyObject *args);
        static PyObject *t_OrdinalMap_getChildResources(t_OrdinalMap *self);
        static PyObject *t_OrdinalMap_getFirstSegmentNumber(t_OrdinalMap *self, PyObject *arg);
        static PyObject *t_OrdinalMap_getFirstSegmentOrd(t_OrdinalMap *self, PyObject *arg);
        static PyObject *t_OrdinalMap_getGlobalOrds(t_OrdinalMap *self, PyObject *arg);
        static PyObject *t_OrdinalMap_getValueCount(t_OrdinalMap *self);
        static PyObject *t_OrdinalMap_ramBytesUsed(t_OrdinalMap *self);
        static PyObject *t_OrdinalMap_get__owner(t_OrdinalMap *self, void *data);

        static PyObject *t_OrdinalMap_get__childResources(t_OrdinalMap *self, void *data);
        static PyObject *t_OrdinalMap_get__valueCount(t_OrdinalMap *self, void *data);
        static PyGetSetDef t_OrdinalMap__fields_[] = {
          DECLARE_GET_FIELD(t_OrdinalMap, owner),
          DECLARE_GET_FIELD(t_OrdinalMap, childResources),
          DECLARE_GET_FIELD(t_OrdinalMap, valueCount),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_OrdinalMap__methods_[] = {
          DECLARE_METHOD(t_OrdinalMap, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_OrdinalMap, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_OrdinalMap, build, METH_VARARGS | METH_CLASS),
          DECLARE_METHOD(t_OrdinalMap, getChildResources, METH_NOARGS),
          DECLARE_METHOD(t_OrdinalMap, getFirstSegmentNumber, METH_O),
          DECLARE_METHOD(t_OrdinalMap, getFirstSegmentOrd, METH_O),
          DECLARE_METHOD(t_OrdinalMap, getGlobalOrds, METH_O),
          DECLARE_METHOD(t_OrdinalMap, getValueCount, METH_NOARGS),
          DECLARE_METHOD(t_OrdinalMap, ramBytesUsed, METH_NOARGS),
          { NULL, NULL, 0, NULL }
        };

        static PyType_Slot PY_TYPE_SLOTS(OrdinalMap)[] = {
          { Py_tp_methods, t_OrdinalMap__methods_ },
          { Py_tp_init, (void *) abstract_init },
          { Py_tp_getset, t_OrdinalMap__fields_ },
          { 0, NULL }
        };

        static PyType_Def *PY_TYPE_BASES(OrdinalMap)[] = {
          &PY_TYPE_DEF(::java::lang::Object),
          NULL
        };

        DEFINE_TYPE(OrdinalMap, t_OrdinalMap, OrdinalMap);

        void t_OrdinalMap::install(PyObject *module)
        {
          installType(&PY_TYPE(OrdinalMap), &PY_TYPE_DEF(OrdinalMap), module, "OrdinalMap", 0);
        }

        void t_OrdinalMap::initialize(PyObject *module)
        {
          PyObject_SetAttrString((PyObject *) PY_TYPE(OrdinalMap), "class_", make_descriptor(OrdinalMap::initializeClass, 1));
          PyObject_SetAttrString((PyObject *) PY_TYPE(OrdinalMap), "wrapfn_", make_descriptor(t_OrdinalMap::wrap_jobject));
          PyObject_SetAttrString((PyObject *) PY_TYPE(OrdinalMap), "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_OrdinalMap_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, OrdinalMap::initializeClass, 1)))
            return NULL;
          return t_OrdinalMap::wrap_Object(OrdinalMap(((t_OrdinalMap *) arg)->object.this$));
        }
        static PyObject *t_OrdinalMap_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, OrdinalMap::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static PyObject *t_OrdinalMap_build(PyTypeObject *type, PyObject *args)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 3:
            {
              ::org::apache::lucene::index::IndexReader$CacheKey a0((jobject) NULL);
              JArray< ::org::apache::lucene::index::SortedDocValues > a1((jobject) NULL);
              jfloat a2;
              OrdinalMap result((jobject) NULL);

              if (!parseArgs(args, "k[kF", ::org::apache::lucene::index::IndexReader$CacheKey::initializeClass, ::org::apache::lucene::index::SortedDocValues::initializeClass, &a0, &a1, &a2))
              {
                OBJ_CALL(result = ::org::apache::lucene::index::OrdinalMap::build(a0, a1, a2));
                return t_OrdinalMap::wrap_Object(result);
              }
            }
            {
              ::org::apache::lucene::index::IndexReader$CacheKey a0((jobject) NULL);
              JArray< ::org::apache::lucene::index::SortedSetDocValues > a1((jobject) NULL);
              jfloat a2;
              OrdinalMap result((jobject) NULL);

              if (!parseArgs(args, "k[kF", ::org::apache::lucene::index::IndexReader$CacheKey::initializeClass, ::org::apache::lucene::index::SortedSetDocValues::initializeClass, &a0, &a1, &a2))
              {
                OBJ_CALL(result = ::org::apache::lucene::index::OrdinalMap::build(a0, a1, a2));
                return t_OrdinalMap::wrap_Object(result);
              }
            }
            break;
           case 4:
            {
              ::org::apache::lucene::index::IndexReader$CacheKey a0((jobject) NULL);
              JArray< ::org::apache::lucene::index::TermsEnum > a1((jobject) NULL);
              JArray< jlong > a2((jobject) NULL);
              jfloat a3;
              OrdinalMap result((jobject) NULL);

              if (!parseArgs(args, "k[k[JF", ::org::apache::lucene::index::IndexReader$CacheKey::initializeClass, ::org::apache::lucene::index::TermsEnum::initializeClass, &a0, &a1, &a2, &a3))
              {
                OBJ_CALL(result = ::org::apache::lucene::index::OrdinalMap::build(a0, a1, a2, a3));
                return t_OrdinalMap::wrap_Object(result);
              }
            }
          }

          PyErr_SetArgsError(type, "build", args);
          return NULL;
        }

        static PyObject *t_OrdinalMap_getChildResources(t_OrdinalMap *self)
        {
          ::java::util::Collection result((jobject) NULL);
          OBJ_CALL(result = self->object.getChildResources());
          return ::java::util::t_Collection::wrap_Object(result, ::org::apache::lucene::util::PY_TYPE(Accountable));
        }

        static PyObject *t_OrdinalMap_getFirstSegmentNumber(t_OrdinalMap *self, PyObject *arg)
        {
          jlong a0;
          jint result;

          if (!parseArg(arg, "J", &a0))
          {
            OBJ_CALL(result = self->object.getFirstSegmentNumber(a0));
            return PyLong_FromLong((long) result);
          }

          PyErr_SetArgsError((PyObject *) self, "getFirstSegmentNumber", arg);
          return NULL;
        }

        static PyObject *t_OrdinalMap_getFirstSegmentOrd(t_OrdinalMap *self, PyObject *arg)
        {
          jlong a0;
          jlong result;

          if (!parseArg(arg, "J", &a0))
          {
            OBJ_CALL(result = self->object.getFirstSegmentOrd(a0));
            return PyLong_FromLongLong((PY_LONG_LONG) result);
          }

          PyErr_SetArgsError((PyObject *) self, "getFirstSegmentOrd", arg);
          return NULL;
        }

        static PyObject *t_OrdinalMap_getGlobalOrds(t_OrdinalMap *self, PyObject *arg)
        {
          jint a0;
          ::org::apache::lucene::util::LongValues result((jobject) NULL);

          if (!parseArg(arg, "I", &a0))
          {
            OBJ_CALL(result = self->object.getGlobalOrds(a0));
            return ::org::apache::lucene::util::t_LongValues::wrap_Object(result);
          }

          PyErr_SetArgsError((PyObject *) self, "getGlobalOrds", arg);
          return NULL;
        }

        static PyObject *t_OrdinalMap_getValueCount(t_OrdinalMap *self)
        {
          jlong result;
          OBJ_CALL(result = self->object.getValueCount());
          return PyLong_FromLongLong((PY_LONG_LONG) result);
        }

        static PyObject *t_OrdinalMap_ramBytesUsed(t_OrdinalMap *self)
        {
          jlong result;
          OBJ_CALL(result = self->object.ramBytesUsed());
          return PyLong_FromLongLong((PY_LONG_LONG) result);
        }

        static PyObject *t_OrdinalMap_get__owner(t_OrdinalMap *self, void *data)
        {
          ::org::apache::lucene::index::IndexReader$CacheKey value((jobject) NULL);
          OBJ_CALL(value = self->object._get_owner());
          return ::org::apache::lucene::index::t_IndexReader$CacheKey::wrap_Object(value);
        }

        static PyObject *t_OrdinalMap_get__childResources(t_OrdinalMap *self, void *data)
        {
          ::java::util::Collection value((jobject) NULL);
          OBJ_CALL(value = self->object.getChildResources());
          return ::java::util::t_Collection::wrap_Object(value);
        }

        static PyObject *t_OrdinalMap_get__valueCount(t_OrdinalMap *self, void *data)
        {
          jlong value;
          OBJ_CALL(value = self->object.getValueCount());
          return PyLong_FromLongLong((PY_LONG_LONG) value);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/geo/GeoUtils.h"
#include "org/apache/lucene/index/PointValues$Relation.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace geo {

        ::java::lang::Class *GeoUtils::class$ = NULL;
        jmethodID *GeoUtils::mids$ = NULL;
        bool GeoUtils::live$ = false;
        jdouble GeoUtils::EARTH_MEAN_RADIUS_METERS = (jdouble) 0;
        jdouble GeoUtils::MAX_LAT_INCL = (jdouble) 0;
        jdouble GeoUtils::MAX_LAT_RADIANS = (jdouble) 0;
        jdouble GeoUtils::MAX_LON_INCL = (jdouble) 0;
        jdouble GeoUtils::MAX_LON_RADIANS = (jdouble) 0;
        jdouble GeoUtils::MIN_LAT_INCL = (jdouble) 0;
        jdouble GeoUtils::MIN_LAT_RADIANS = (jdouble) 0;
        jdouble GeoUtils::MIN_LON_INCL = (jdouble) 0;
        jdouble GeoUtils::MIN_LON_RADIANS = (jdouble) 0;

        jclass GeoUtils::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/geo/GeoUtils");

            mids$ = new jmethodID[max_mid];
            mids$[mid_checkLatitude_3c435f10a3b1e038] = env->getStaticMethodID(cls, "checkLatitude", "(D)V");
            mids$[mid_checkLongitude_3c435f10a3b1e038] = env->getStaticMethodID(cls, "checkLongitude", "(D)V");
            mids$[mid_distanceQuerySortKey_d089f34703408a66] = env->getStaticMethodID(cls, "distanceQuerySortKey", "(D)D");
            mids$[mid_lineCrossesLine_d68abb61fe1c2fa4] = env->getStaticMethodID(cls, "lineCrossesLine", "(DDDDDDDD)Z");
            mids$[mid_lineCrossesLineWithBoundary_d68abb61fe1c2fa4] = env->getStaticMethodID(cls, "lineCrossesLineWithBoundary", "(DDDDDDDD)Z");
            mids$[mid_orient_ca8028968cdca818] = env->getStaticMethodID(cls, "orient", "(DDDDDD)I");
            mids$[mid_relate_c71965b92ea62a38] = env->getStaticMethodID(cls, "relate", "(DDDDDDDD)Lorg/apache/lucene/index/PointValues$Relation;");
            mids$[mid_sloppySin_d089f34703408a66] = env->getStaticMethodID(cls, "sloppySin", "(D)D");

            class$ = new ::java::lang::Class(cls);
            cls = (jclass) class$->this$;

            EARTH_MEAN_RADIUS_METERS = env->getStaticDoubleField(cls, "EARTH_MEAN_RADIUS_METERS");
            MAX_LAT_INCL = env->getStaticDoubleField(cls, "MAX_LAT_INCL");
            MAX_LAT_RADIANS = env->getStaticDoubleField(cls, "MAX_LAT_RADIANS");
            MAX_LON_INCL = env->getStaticDoubleField(cls, "MAX_LON_INCL");
            MAX_LON_RADIANS = env->getStaticDoubleField(cls, "MAX_LON_RADIANS");
            MIN_LAT_INCL = env->getStaticDoubleField(cls, "MIN_LAT_INCL");
            MIN_LAT_RADIANS = env->getStaticDoubleField(cls, "MIN_LAT_RADIANS");
            MIN_LON_INCL = env->getStaticDoubleField(cls, "MIN_LON_INCL");
            MIN_LON_RADIANS = env->getStaticDoubleField(cls, "MIN_LON_RADIANS");
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        void GeoUtils::checkLatitude(jdouble a0)
        {
          jclass cls = env->getClass(initializeClass);
          env->callStaticVoidMethod(cls, mids$[mid_checkLatitude_3c435f10a3b1e038], a0);
        }

        void GeoUtils::checkLongitude(jdouble a0)
        {
          jclass cls = env->getClass(initializeClass);
          env->callStaticVoidMethod(cls, mids$[mid_checkLongitude_3c435f10a3b1e038], a0);
        }

        jdouble GeoUtils::distanceQuerySortKey(jdouble a0)
        {
          jclass cls = env->getClass(initializeClass);
          return env->callStaticDoubleMethod(cls, mids$[mid_distanceQuerySortKey_d089f34703408a66], a0);
        }

        jboolean GeoUtils::lineCrossesLine(jdouble a0, jdouble a1, jdouble a2, jdouble a3, jdouble a4, jdouble a5, jdouble a6, jdouble a7)
        {
          jclass cls = env->getClass(initializeClass);
          return env->callStaticBooleanMethod(cls, mids$[mid_lineCrossesLine_d68abb61fe1c2fa4], a0, a1, a2, a3, a4, a5, a6, a7);
        }

        jboolean GeoUtils::lineCrossesLineWithBoundary(jdouble a0, jdouble a1, jdouble a2, jdouble a3, jdouble a4, jdouble a5, jdouble a6, jdouble a7)
        {
          jclass cls = env->getClass(initializeClass);
          return env->callStaticBooleanMethod(cls, mids$[mid_lineCrossesLineWithBoundary_d68abb61fe1c2fa4], a0, a1, a2, a3, a4, a5, a6, a7);
        }

        jint GeoUtils::orient(jdouble a0, jdouble a1, jdouble a2, jdouble a3, jdouble a4, jdouble a5)
        {
          jclass cls = env->getClass(initializeClass);
          return env->callStaticIntMethod(cls, mids$[mid_orient_ca8028968cdca818], a0, a1, a2, a3, a4, a5);
        }

        ::org::apache::lucene::index::PointValues$Relation GeoUtils::relate(jdouble a0, jdouble a1, jdouble a2, jdouble a3, jdouble a4, jdouble a5, jdouble a6, jdouble a7)
        {
          jclass cls = env->getClass(initializeClass);
          return ::org::apache::lucene::index::PointValues$Relation(env->callStaticObjectMethod(cls, mids$[mid_relate_c71965b92ea62a38], a0, a1, a2, a3, a4, a5, a6, a7));
        }

        jdouble GeoUtils::sloppySin(jdouble a0)
        {
          jclass cls = env->getClass(initializeClass);
          return env->callStaticDoubleMethod(cls, mids$[mid_sloppySin_d089f34703408a66], a0);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"
#include "org/apache/lucene/geo/GeoUtils$WindingOrder.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace geo {
        static PyObject *t_GeoUtils_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_GeoUtils_instance_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_GeoUtils_checkLatitude(PyTypeObject *type, PyObject *arg);
        static PyObject *t_GeoUtils_checkLongitude(PyTypeObject *type, PyObject *arg);
        static PyObject *t_GeoUtils_distanceQuerySortKey(PyTypeObject *type, PyObject *arg);
        static PyObject *t_GeoUtils_lineCrossesLine(PyTypeObject *type, PyObject *args);
        static PyObject *t_GeoUtils_lineCrossesLineWithBoundary(PyTypeObject *type, PyObject *args);
        static PyObject *t_GeoUtils_orient(PyTypeObject *type, PyObject *args);
        static PyObject *t_GeoUtils_relate(PyTypeObject *type, PyObject *args);
        static PyObject *t_GeoUtils_sloppySin(PyTypeObject *type, PyObject *arg);

        static PyMethodDef t_GeoUtils__methods_[] = {
          DECLARE_METHOD(t_GeoUtils, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_GeoUtils, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_GeoUtils, checkLatitude, METH_O | METH_CLASS),
          DECLARE_METHOD(t_GeoUtils, checkLongitude, METH_O | METH_CLASS),
          DECLARE_METHOD(t_GeoUtils, distanceQuerySortKey, METH_O | METH_CLASS),
          DECLARE_METHOD(t_GeoUtils, lineCrossesLine, METH_VARARGS | METH_CLASS),
          DECLARE_METHOD(t_GeoUtils, lineCrossesLineWithBoundary, METH_VARARGS | METH_CLASS),
          DECLARE_METHOD(t_GeoUtils, orient, METH_VARARGS | METH_CLASS),
          DECLARE_METHOD(t_GeoUtils, relate, METH_VARARGS | METH_CLASS),
          DECLARE_METHOD(t_GeoUtils, sloppySin, METH_O | METH_CLASS),
          { NULL, NULL, 0, NULL }
        };

        static PyType_Slot PY_TYPE_SLOTS(GeoUtils)[] = {
          { Py_tp_methods, t_GeoUtils__methods_ },
          { Py_tp_init, (void *) abstract_init },
          { 0, NULL }
        };

        static PyType_Def *PY_TYPE_BASES(GeoUtils)[] = {
          &PY_TYPE_DEF(::java::lang::Object),
          NULL
        };

        DEFINE_TYPE(GeoUtils, t_GeoUtils, GeoUtils);

        void t_GeoUtils::install(PyObject *module)
        {
          installType(&PY_TYPE(GeoUtils), &PY_TYPE_DEF(GeoUtils), module, "GeoUtils", 0);
          PyObject_SetAttrString((PyObject *) PY_TYPE(GeoUtils), "WindingOrder", make_descriptor(&PY_TYPE_DEF(GeoUtils$WindingOrder)));
        }

        void t_GeoUtils::initialize(PyObject *module)
        {
          PyObject_SetAttrString((PyObject *) PY_TYPE(GeoUtils), "class_", make_descriptor(GeoUtils::initializeClass, 1));
          PyObject_SetAttrString((PyObject *) PY_TYPE(GeoUtils), "wrapfn_", make_descriptor(t_GeoUtils::wrap_jobject));
          PyObject_SetAttrString((PyObject *) PY_TYPE(GeoUtils), "boxfn_", make_descriptor(boxObject));
          env->getClass(GeoUtils::initializeClass);
          PyObject_SetAttrString((PyObject *) PY_TYPE(GeoUtils), "EARTH_MEAN_RADIUS_METERS", make_descriptor(GeoUtils::EARTH_MEAN_RADIUS_METERS));
          PyObject_SetAttrString((PyObject *) PY_TYPE(GeoUtils), "MAX_LAT_INCL", make_descriptor(GeoUtils::MAX_LAT_INCL));
          PyObject_SetAttrString((PyObject *) PY_TYPE(GeoUtils), "MAX_LAT_RADIANS", make_descriptor(GeoUtils::MAX_LAT_RADIANS));
          PyObject_SetAttrString((PyObject *) PY_TYPE(GeoUtils), "MAX_LON_INCL", make_descriptor(GeoUtils::MAX_LON_INCL));
          PyObject_SetAttrString((PyObject *) PY_TYPE(GeoUtils), "MAX_LON_RADIANS", make_descriptor(GeoUtils::MAX_LON_RADIANS));
          PyObject_SetAttrString((PyObject *) PY_TYPE(GeoUtils), "MIN_LAT_INCL", make_descriptor(GeoUtils::MIN_LAT_INCL));
          PyObject_SetAttrString((PyObject *) PY_TYPE(GeoUtils), "MIN_LAT_RADIANS", make_descriptor(GeoUtils::MIN_LAT_RADIANS));
          PyObject_SetAttrString((PyObject *) PY_TYPE(GeoUtils), "MIN_LON_INCL", make_descriptor(GeoUtils::MIN_LON_INCL));
          PyObject_SetAttrString((PyObject *) PY_TYPE(GeoUtils), "MIN_LON_RADIANS", make_descriptor(GeoUtils::MIN_LON_RADIANS));
        }

        static PyObject *t_GeoUtils_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, GeoUtils::initializeClass, 1)))
            return NULL;
          return t_GeoUtils::wrap_Object(GeoUtils(((t_GeoUtils *) arg)->object.this$));
        }
        static PyObject *t_GeoUtils_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, GeoUtils::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static PyObject *t_GeoUtils_checkLatitude(PyTypeObject *type, PyObject *arg)
        {
          jdouble a0;

          if (!parseArg(arg, "D", &a0))
          {
            OBJ_CALL(::org::apache::lucene::geo::GeoUtils::checkLatitude(a0));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError(type, "checkLatitude", arg);
          return NULL;
        }

        static PyObject *t_GeoUtils_checkLongitude(PyTypeObject *type, PyObject *arg)
        {
          jdouble a0;

          if (!parseArg(arg, "D", &a0))
          {
            OBJ_CALL(::org::apache::lucene::geo::GeoUtils::checkLongitude(a0));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError(type, "checkLongitude", arg);
          return NULL;
        }

        static PyObject *t_GeoUtils_distanceQuerySortKey(PyTypeObject *type, PyObject *arg)
        {
          jdouble a0;
          jdouble result;

          if (!parseArg(arg, "D", &a0))
          {
            OBJ_CALL(result = ::org::apache::lucene::geo::GeoUtils::distanceQuerySortKey(a0));
            return PyFloat_FromDouble((double) result);
          }

          PyErr_SetArgsError(type, "distanceQuerySortKey", arg);
          return NULL;
        }

        static PyObject *t_GeoUtils_lineCrossesLine(PyTypeObject *type, PyObject *args)
        {
          jdouble a0;
          jdouble a1;
          jdouble a2;
          jdouble a3;
          jdouble a4;
          jdouble a5;
          jdouble a6;
          jdouble a7;
          jboolean result;

          if (!parseArgs(args, "DDDDDDDD", &a0, &a1, &a2, &a3, &a4, &a5, &a6, &a7))
          {
            OBJ_CALL(result = ::org::apache::lucene::geo::GeoUtils::lineCrossesLine(a0, a1, a2, a3, a4, a5, a6, a7));
            Py_RETURN_BOOL(result);
          }

          PyErr_SetArgsError(type, "lineCrossesLine", args);
          return NULL;
        }

        static PyObject *t_GeoUtils_lineCrossesLineWithBoundary(PyTypeObject *type, PyObject *args)
        {
          jdouble a0;
          jdouble a1;
          jdouble a2;
          jdouble a3;
          jdouble a4;
          jdouble a5;
          jdouble a6;
          jdouble a7;
          jboolean result;

          if (!parseArgs(args, "DDDDDDDD", &a0, &a1, &a2, &a3, &a4, &a5, &a6, &a7))
          {
            OBJ_CALL(result = ::org::apache::lucene::geo::GeoUtils::lineCrossesLineWithBoundary(a0, a1, a2, a3, a4, a5, a6, a7));
            Py_RETURN_BOOL(result);
          }

          PyErr_SetArgsError(type, "lineCrossesLineWithBoundary", args);
          return NULL;
        }

        static PyObject *t_GeoUtils_orient(PyTypeObject *type, PyObject *args)
        {
          jdouble a0;
          jdouble a1;
          jdouble a2;
          jdouble a3;
          jdouble a4;
          jdouble a5;
          jint result;

          if (!parseArgs(args, "DDDDDD", &a0, &a1, &a2, &a3, &a4, &a5))
          {
            OBJ_CALL(result = ::org::apache::lucene::geo::GeoUtils::orient(a0, a1, a2, a3, a4, a5));
            return PyLong_FromLong((long) result);
          }

          PyErr_SetArgsError(type, "orient", args);
          return NULL;
        }

        static PyObject *t_GeoUtils_relate(PyTypeObject *type, PyObject *args)
        {
          jdouble a0;
          jdouble a1;
          jdouble a2;
          jdouble a3;
          jdouble a4;
          jdouble a5;
          jdouble a6;
          jdouble a7;
          ::org::apache::lucene::index::PointValues$Relation result((jobject) NULL);

          if (!parseArgs(args, "DDDDDDDD", &a0, &a1, &a2, &a3, &a4, &a5, &a6, &a7))
          {
            OBJ_CALL(result = ::org::apache::lucene::geo::GeoUtils::relate(a0, a1, a2, a3, a4, a5, a6, a7));
            return ::org::apache::lucene::index::t_PointValues$Relation::wrap_Object(result);
          }

          PyErr_SetArgsError(type, "relate", args);
          return NULL;
        }

        static PyObject *t_GeoUtils_sloppySin(PyTypeObject *type, PyObject *arg)
        {
          jdouble a0;
          jdouble result;

          if (!parseArg(arg, "D", &a0))
          {
            OBJ_CALL(result = ::org::apache::lucene::geo::GeoUtils::sloppySin(a0));
            return PyFloat_FromDouble((double) result);
          }

          PyErr_SetArgsError(type, "sloppySin", arg);
          return NULL;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/vectorhighlight/WeightedFieldFragList.h"
#include "java/util/List.h"
#include "org/apache/lucene/search/vectorhighlight/FieldPhraseList$WeightedPhraseInfo.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace vectorhighlight {

          ::java::lang::Class *WeightedFieldFragList::class$ = NULL;
          jmethodID *WeightedFieldFragList::mids$ = NULL;
          bool WeightedFieldFragList::live$ = false;

          jclass WeightedFieldFragList::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/search/vectorhighlight/WeightedFieldFragList");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_040c4cd0390c5aff] = env->getMethodID(cls, "<init>", "(I)V");
              mids$[mid_add_0579db43a3783deb] = env->getMethodID(cls, "add", "(IILjava/util/List;)V");

              class$ = new ::java::lang::Class(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          WeightedFieldFragList::WeightedFieldFragList(jint a0) : ::org::apache::lucene::search::vectorhighlight::FieldFragList(env->newObject(initializeClass, &mids$, mid_init$_040c4cd0390c5aff, a0)) {}

          void WeightedFieldFragList::add(jint a0, jint a1, const ::java::util::List & a2) const
          {
            env->callVoidMethod(this$, mids$[mid_add_0579db43a3783deb], a0, a1, a2.this$);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace vectorhighlight {
          static PyObject *t_WeightedFieldFragList_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_WeightedFieldFragList_instance_(PyTypeObject *type, PyObject *arg);
          static int t_WeightedFieldFragList_init_(t_WeightedFieldFragList *self, PyObject *args, PyObject *kwds);
          static PyObject *t_WeightedFieldFragList_add(t_WeightedFieldFragList *self, PyObject *args);

          static PyMethodDef t_WeightedFieldFragList__methods_[] = {
            DECLARE_METHOD(t_WeightedFieldFragList, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_WeightedFieldFragList, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_WeightedFieldFragList, add, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          static PyType_Slot PY_TYPE_SLOTS(WeightedFieldFragList)[] = {
            { Py_tp_methods, t_WeightedFieldFragList__methods_ },
            { Py_tp_init, (void *) t_WeightedFieldFragList_init_ },
            { 0, NULL }
          };

          static PyType_Def *PY_TYPE_BASES(WeightedFieldFragList)[] = {
            &PY_TYPE_DEF(::org::apache::lucene::search::vectorhighlight::FieldFragList),
            NULL
          };

          DEFINE_TYPE(WeightedFieldFragList, t_WeightedFieldFragList, WeightedFieldFragList);

          void t_WeightedFieldFragList::install(PyObject *module)
          {
            installType(&PY_TYPE(WeightedFieldFragList), &PY_TYPE_DEF(WeightedFieldFragList), module, "WeightedFieldFragList", 0);
          }

          void t_WeightedFieldFragList::initialize(PyObject *module)
          {
            PyObject_SetAttrString((PyObject *) PY_TYPE(WeightedFieldFragList), "class_", make_descriptor(WeightedFieldFragList::initializeClass, 1));
            PyObject_SetAttrString((PyObject *) PY_TYPE(WeightedFieldFragList), "wrapfn_", make_descriptor(t_WeightedFieldFragList::wrap_jobject));
            PyObject_SetAttrString((PyObject *) PY_TYPE(WeightedFieldFragList), "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_WeightedFieldFragList_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, WeightedFieldFragList::initializeClass, 1)))
              return NULL;
            return t_WeightedFieldFragList::wrap_Object(WeightedFieldFragList(((t_WeightedFieldFragList *) arg)->object.this$));
          }
          static PyObject *t_WeightedFieldFragList_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, WeightedFieldFragList::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_WeightedFieldFragList_init_(t_WeightedFieldFragList *self, PyObject *args, PyObject *kwds)
          {
            jint a0;
            WeightedFieldFragList object((jobject) NULL);

            if (!parseArgs(args, "I", &a0))
            {
              INT_CALL(object = WeightedFieldFragList(a0));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_WeightedFieldFragList_add(t_WeightedFieldFragList *self, PyObject *args)
          {
            jint a0;
            jint a1;
            ::java::util::List a2((jobject) NULL);
            PyTypeObject **p2;

            if (!parseArgs(args, "IIK", ::java::util::List::initializeClass, &a0, &a1, &a2, &p2, ::java::util::t_List::parameters_))
            {
              OBJ_CALL(self->object.add(a0, a1, a2));
              Py_RETURN_NONE;
            }

            return callSuper(PY_TYPE(WeightedFieldFragList), (PyObject *) self, "add", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/miscellaneous/ConcatenateGraphFilter.h"
#include "java/lang/Class.h"
#include "java/lang/Character.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/util/automaton/Automaton.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace miscellaneous {

          ::java::lang::Class *ConcatenateGraphFilter::class$ = NULL;
          jmethodID *ConcatenateGraphFilter::mids$ = NULL;
          bool ConcatenateGraphFilter::live$ = false;
          jint ConcatenateGraphFilter::DEFAULT_MAX_GRAPH_EXPANSIONS = (jint) 0;
          jboolean ConcatenateGraphFilter::DEFAULT_PRESERVE_POSITION_INCREMENTS = (jboolean) 0;
          jboolean ConcatenateGraphFilter::DEFAULT_PRESERVE_SEP = (jboolean) 0;
          ::java::lang::Character *ConcatenateGraphFilter::DEFAULT_TOKEN_SEPARATOR = NULL;
          jint ConcatenateGraphFilter::SEP_LABEL = (jint) 0;

          jclass ConcatenateGraphFilter::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/miscellaneous/ConcatenateGraphFilter");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_c26756868a754f4e] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/analysis/TokenStream;)V");
              mids$[mid_init$_ad87d1e05b471ca5] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/analysis/TokenStream;Ljava/lang/Character;ZI)V");
              mids$[mid_init$_43bd57fb29937546] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/analysis/TokenStream;ZZI)V");
              mids$[mid_close_f2cc1bce94666404] = env->getMethodID(cls, "close", "()V");
              mids$[mid_end_f2cc1bce94666404] = env->getMethodID(cls, "end", "()V");
              mids$[mid_incrementToken_8454bd5aa23fd11e] = env->getMethodID(cls, "incrementToken", "()Z");
              mids$[mid_reset_f2cc1bce94666404] = env->getMethodID(cls, "reset", "()V");
              mids$[mid_toAutomaton_d9f5c446a29ec187] = env->getMethodID(cls, "toAutomaton", "()Lorg/apache/lucene/util/automaton/Automaton;");
              mids$[mid_toAutomaton_2dfd31606da6dbf0] = env->getMethodID(cls, "toAutomaton", "(Z)Lorg/apache/lucene/util/automaton/Automaton;");

              class$ = new ::java::lang::Class(cls);
              cls = (jclass) class$->this$;

              DEFAULT_MAX_GRAPH_EXPANSIONS = env->getStaticIntField(cls, "DEFAULT_MAX_GRAPH_EXPANSIONS");
              DEFAULT_PRESERVE_POSITION_INCREMENTS = env->getStaticBooleanField(cls, "DEFAULT_PRESERVE_POSITION_INCREMENTS");
              DEFAULT_PRESERVE_SEP = env->getStaticBooleanField(cls, "DEFAULT_PRESERVE_SEP");
              DEFAULT_TOKEN_SEPARATOR = new ::java::lang::Character(env->getStaticObjectField(cls, "DEFAULT_TOKEN_SEPARATOR", "Ljava/lang/Character;"));
              SEP_LABEL = env->getStaticIntField(cls, "SEP_LABEL");
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          ConcatenateGraphFilter::ConcatenateGraphFilter(const ::org::apache::lucene::analysis::TokenStream & a0) : ::org::apache::lucene::analysis::TokenStream(env->newObject(initializeClass, &mids$, mid_init$_c26756868a754f4e, a0.this$)) {}

          ConcatenateGraphFilter::ConcatenateGraphFilter(const ::org::apache::lucene::analysis::TokenStream & a0, const ::java::lang::Character & a1, jboolean a2, jint a3) : ::org::apache::lucene::analysis::TokenStream(env->newObject(initializeClass, &mids$, mid_init$_ad87d1e05b471ca5, a0.this$, a1.this$, a2, a3)) {}

          ConcatenateGraphFilter::ConcatenateGraphFilter(const ::org::apache::lucene::analysis::TokenStream & a0, jboolean a1, jboolean a2, jint a3) : ::org::apache::lucene::analysis::TokenStream(env->newObject(initializeClass, &mids$, mid_init$_43bd57fb29937546, a0.this$, a1, a2, a3)) {}

          void ConcatenateGraphFilter::close() const
          {
            env->callVoidMethod(this$, mids$[mid_close_f2cc1bce94666404]);
          }

          void ConcatenateGraphFilter::end() const
          {
            env->callVoidMethod(this$, mids$[mid_end_f2cc1bce94666404]);
          }

          jboolean ConcatenateGraphFilter::incrementToken() const
          {
            return env->callBooleanMethod(this$, mids$[mid_incrementToken_8454bd5aa23fd11e]);
          }

          void ConcatenateGraphFilter::reset() const
          {
            env->callVoidMethod(this$, mids$[mid_reset_f2cc1bce94666404]);
          }

          ::org::apache::lucene::util::automaton::Automaton ConcatenateGraphFilter::toAutomaton() const
          {
            return ::org::apache::lucene::util::automaton::Automaton(env->callObjectMethod(this$, mids$[mid_toAutomaton_d9f5c446a29ec187]));
          }

          ::org::apache::lucene::util::automaton::Automaton ConcatenateGraphFilter::toAutomaton(jboolean a0) const
          {
            return ::org::apache::lucene::util::automaton::Automaton(env->callObjectMethod(this$, mids$[mid_toAutomaton_2dfd31606da6dbf0], a0));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"
#include "org/apache/lucene/analysis/miscellaneous/ConcatenateGraphFilter$BytesRefBuilderTermAttributeImpl.h"
#include "org/apache/lucene/analysis/miscellaneous/ConcatenateGraphFilter$BytesRefBuilderTermAttribute.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace miscellaneous {
          static PyObject *t_ConcatenateGraphFilter_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_ConcatenateGraphFilter_instance_(PyTypeObject *type, PyObject *arg);
          static int t_ConcatenateGraphFilter_init_(t_ConcatenateGraphFilter *self, PyObject *args, PyObject *kwds);
          static PyObject *t_ConcatenateGraphFilter_close(t_ConcatenateGraphFilter *self, PyObject *args);
          static PyObject *t_ConcatenateGraphFilter_end(t_ConcatenateGraphFilter *self, PyObject *args);
          static PyObject *t_ConcatenateGraphFilter_incrementToken(t_ConcatenateGraphFilter *self, PyObject *args);
          static PyObject *t_ConcatenateGraphFilter_reset(t_ConcatenateGraphFilter *self, PyObject *args);
          static PyObject *t_ConcatenateGraphFilter_toAutomaton(t_ConcatenateGraphFilter *self, PyObject *args);

          static PyMethodDef t_ConcatenateGraphFilter__methods_[] = {
            DECLARE_METHOD(t_ConcatenateGraphFilter, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_ConcatenateGraphFilter, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_ConcatenateGraphFilter, close, METH_VARARGS),
            DECLARE_METHOD(t_ConcatenateGraphFilter, end, METH_VARARGS),
            DECLARE_METHOD(t_ConcatenateGraphFilter, incrementToken, METH_VARARGS),
            DECLARE_METHOD(t_ConcatenateGraphFilter, reset, METH_VARARGS),
            DECLARE_METHOD(t_ConcatenateGraphFilter, toAutomaton, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          static PyType_Slot PY_TYPE_SLOTS(ConcatenateGraphFilter)[] = {
            { Py_tp_methods, t_ConcatenateGraphFilter__methods_ },
            { Py_tp_init, (void *) t_ConcatenateGraphFilter_init_ },
            { 0, NULL }
          };

          static PyType_Def *PY_TYPE_BASES(ConcatenateGraphFilter)[] = {
            &PY_TYPE_DEF(::org::apache::lucene::analysis::TokenStream),
            NULL
          };

          DEFINE_TYPE(ConcatenateGraphFilter, t_ConcatenateGraphFilter, ConcatenateGraphFilter);

          void t_ConcatenateGraphFilter::install(PyObject *module)
          {
            installType(&PY_TYPE(ConcatenateGraphFilter), &PY_TYPE_DEF(ConcatenateGraphFilter), module, "ConcatenateGraphFilter", 0);
            PyObject_SetAttrString((PyObject *) PY_TYPE(ConcatenateGraphFilter), "BytesRefBuilderTermAttributeImpl", make_descriptor(&PY_TYPE_DEF(ConcatenateGraphFilter$BytesRefBuilderTermAttributeImpl)));
            PyObject_SetAttrString((PyObject *) PY_TYPE(ConcatenateGraphFilter), "BytesRefBuilderTermAttribute", make_descriptor(&PY_TYPE_DEF(ConcatenateGraphFilter$BytesRefBuilderTermAttribute)));
          }

          void t_ConcatenateGraphFilter::initialize(PyObject *module)
          {
            PyObject_SetAttrString((PyObject *) PY_TYPE(ConcatenateGraphFilter), "class_", make_descriptor(ConcatenateGraphFilter::initializeClass, 1));
            PyObject_SetAttrString((PyObject *) PY_TYPE(ConcatenateGraphFilter), "wrapfn_", make_descriptor(t_ConcatenateGraphFilter::wrap_jobject));
            PyObject_SetAttrString((PyObject *) PY_TYPE(ConcatenateGraphFilter), "boxfn_", make_descriptor(boxObject));
            env->getClass(ConcatenateGraphFilter::initializeClass);
            PyObject_SetAttrString((PyObject *) PY_TYPE(ConcatenateGraphFilter), "DEFAULT_MAX_GRAPH_EXPANSIONS", make_descriptor(ConcatenateGraphFilter::DEFAULT_MAX_GRAPH_EXPANSIONS));
            PyObject_SetAttrString((PyObject *) PY_TYPE(ConcatenateGraphFilter), "DEFAULT_PRESERVE_POSITION_INCREMENTS", make_descriptor(ConcatenateGraphFilter::DEFAULT_PRESERVE_POSITION_INCREMENTS));
            PyObject_SetAttrString((PyObject *) PY_TYPE(ConcatenateGraphFilter), "DEFAULT_PRESERVE_SEP", make_descriptor(ConcatenateGraphFilter::DEFAULT_PRESERVE_SEP));
            PyObject_SetAttrString((PyObject *) PY_TYPE(ConcatenateGraphFilter), "DEFAULT_TOKEN_SEPARATOR", make_descriptor(::java::lang::t_Character::wrap_Object(*ConcatenateGraphFilter::DEFAULT_TOKEN_SEPARATOR)));
            PyObject_SetAttrString((PyObject *) PY_TYPE(ConcatenateGraphFilter), "SEP_LABEL", make_descriptor(ConcatenateGraphFilter::SEP_LABEL));
          }

          static PyObject *t_ConcatenateGraphFilter_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, ConcatenateGraphFilter::initializeClass, 1)))
              return NULL;
            return t_ConcatenateGraphFilter::wrap_Object(ConcatenateGraphFilter(((t_ConcatenateGraphFilter *) arg)->object.this$));
          }
          static PyObject *t_ConcatenateGraphFilter_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, ConcatenateGraphFilter::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_ConcatenateGraphFilter_init_(t_ConcatenateGraphFilter *self, PyObject *args, PyObject *kwds)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 1:
              {
                ::org::apache::lucene::analysis::TokenStream a0((jobject) NULL);
                ConcatenateGraphFilter object((jobject) NULL);

                if (!parseArgs(args, "k", ::org::apache::lucene::analysis::TokenStream::initializeClass, &a0))
                {
                  INT_CALL(object = ConcatenateGraphFilter(a0));
                  self->object = object;
                  break;
                }
              }
              goto err;
             case 4:
              {
                ::org::apache::lucene::analysis::TokenStream a0((jobject) NULL);
                ::java::lang::Character a1((jobject) NULL);
                jboolean a2;
                jint a3;
                ConcatenateGraphFilter object((jobject) NULL);

                if (!parseArgs(args, "kOZI", ::org::apache::lucene::analysis::TokenStream::initializeClass, ::java::lang::PY_TYPE(Character), &a0, &a1, &a2, &a3))
                {
                  INT_CALL(object = ConcatenateGraphFilter(a0, a1, a2, a3));
                  self->object = object;
                  break;
                }
              }
              {
                ::org::apache::lucene::analysis::TokenStream a0((jobject) NULL);
                jboolean a1;
                jboolean a2;
                jint a3;
                ConcatenateGraphFilter object((jobject) NULL);

                if (!parseArgs(args, "kZZI", ::org::apache::lucene::analysis::TokenStream::initializeClass, &a0, &a1, &a2, &a3))
                {
                  INT_CALL(object = ConcatenateGraphFilter(a0, a1, a2, a3));
                  self->object = object;
                  break;
                }
              }
             default:
             err:
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_ConcatenateGraphFilter_close(t_ConcatenateGraphFilter *self, PyObject *args)
          {

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(self->object.close());
              Py_RETURN_NONE;
            }

            return callSuper(PY_TYPE(ConcatenateGraphFilter), (PyObject *) self, "close", args, 2);
          }

          static PyObject *t_ConcatenateGraphFilter_end(t_ConcatenateGraphFilter *self, PyObject *args)
          {

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(self->object.end());
              Py_RETURN_NONE;
            }

            return callSuper(PY_TYPE(ConcatenateGraphFilter), (PyObject *) self, "end", args, 2);
          }

          static PyObject *t_ConcatenateGraphFilter_incrementToken(t_ConcatenateGraphFilter *self, PyObject *args)
          {
            jboolean result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.incrementToken());
              Py_RETURN_BOOL(result);
            }

            return callSuper(PY_TYPE(ConcatenateGraphFilter), (PyObject *) self, "incrementToken", args, 2);
          }

          static PyObject *t_ConcatenateGraphFilter_reset(t_ConcatenateGraphFilter *self, PyObject *args)
          {

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(self->object.reset());
              Py_RETURN_NONE;
            }

            return callSuper(PY_TYPE(ConcatenateGraphFilter), (PyObject *) self, "reset", args, 2);
          }

          static PyObject *t_ConcatenateGraphFilter_toAutomaton(t_ConcatenateGraphFilter *self, PyObject *args)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 0:
              {
                ::org::apache::lucene::util::automaton::Automaton result((jobject) NULL);
                OBJ_CALL(result = self->object.toAutomaton());
                return ::org::apache::lucene::util::automaton::t_Automaton::wrap_Object(result);
              }
              break;
             case 1:
              {
                jboolean a0;
                ::org::apache::lucene::util::automaton::Automaton result((jobject) NULL);

                if (!parseArgs(args, "Z", &a0))
                {
                  OBJ_CALL(result = self->object.toAutomaton(a0));
                  return ::org::apache::lucene::util::automaton::t_Automaton::wrap_Object(result);
                }
              }
            }

            PyErr_SetArgsError((PyObject *) self, "toAutomaton", args);
            return NULL;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/ja/tokenattributes/ReadingAttributeImpl.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/analysis/ja/tokenattributes/ReadingAttribute.h"
#include "org/apache/lucene/analysis/ja/Token.h"
#include "java/lang/String.h"
#include "org/apache/lucene/util/AttributeReflector.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace ja {
          namespace tokenattributes {

            ::java::lang::Class *ReadingAttributeImpl::class$ = NULL;
            jmethodID *ReadingAttributeImpl::mids$ = NULL;
            bool ReadingAttributeImpl::live$ = false;

            jclass ReadingAttributeImpl::initializeClass(bool getOnly)
            {
              if (getOnly)
                return (jclass) (live$ ? class$->this$ : NULL);
              if (class$ == NULL)
              {
                jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/ja/tokenattributes/ReadingAttributeImpl");

                mids$ = new jmethodID[max_mid];
                mids$[mid_init$_f2cc1bce94666404] = env->getMethodID(cls, "<init>", "()V");
                mids$[mid_clear_f2cc1bce94666404] = env->getMethodID(cls, "clear", "()V");
                mids$[mid_copyTo_26346c38ebc9c090] = env->getMethodID(cls, "copyTo", "(Lorg/apache/lucene/util/AttributeImpl;)V");
                mids$[mid_getPronunciation_db9b55ba01e03e4b] = env->getMethodID(cls, "getPronunciation", "()Ljava/lang/String;");
                mids$[mid_getReading_db9b55ba01e03e4b] = env->getMethodID(cls, "getReading", "()Ljava/lang/String;");
                mids$[mid_reflectWith_b880c72ee67200af] = env->getMethodID(cls, "reflectWith", "(Lorg/apache/lucene/util/AttributeReflector;)V");
                mids$[mid_setToken_e7eb8cf5a63e4354] = env->getMethodID(cls, "setToken", "(Lorg/apache/lucene/analysis/ja/Token;)V");

                class$ = new ::java::lang::Class(cls);
                live$ = true;
              }
              return (jclass) class$->this$;
            }

            ReadingAttributeImpl::ReadingAttributeImpl() : ::org::apache::lucene::util::AttributeImpl(env->newObject(initializeClass, &mids$, mid_init$_f2cc1bce94666404)) {}

            void ReadingAttributeImpl::clear() const
            {
              env->callVoidMethod(this$, mids$[mid_clear_f2cc1bce94666404]);
            }

            void ReadingAttributeImpl::copyTo(const ::org::apache::lucene::util::AttributeImpl & a0) const
            {
              env->callVoidMethod(this$, mids$[mid_copyTo_26346c38ebc9c090], a0.this$);
            }

            ::java::lang::String ReadingAttributeImpl::getPronunciation() const
            {
              return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_getPronunciation_db9b55ba01e03e4b]));
            }

            ::java::lang::String ReadingAttributeImpl::getReading() const
            {
              return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_getReading_db9b55ba01e03e4b]));
            }

            void ReadingAttributeImpl::reflectWith(const ::org::apache::lucene::util::AttributeReflector & a0) const
            {
              env->callVoidMethod(this$, mids$[mid_reflectWith_b880c72ee67200af], a0.this$);
            }

            void ReadingAttributeImpl::setToken(const ::org::apache::lucene::analysis::ja::Token & a0) const
            {
              env->callVoidMethod(this$, mids$[mid_setToken_e7eb8cf5a63e4354], a0.this$);
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace ja {
          namespace tokenattributes {
            static PyObject *t_ReadingAttributeImpl_cast_(PyTypeObject *type, PyObject *arg);
            static PyObject *t_ReadingAttributeImpl_instance_(PyTypeObject *type, PyObject *arg);
            static int t_ReadingAttributeImpl_init_(t_ReadingAttributeImpl *self, PyObject *args, PyObject *kwds);
            static PyObject *t_ReadingAttributeImpl_clear(t_ReadingAttributeImpl *self, PyObject *args);
            static PyObject *t_ReadingAttributeImpl_copyTo(t_ReadingAttributeImpl *self, PyObject *args);
            static PyObject *t_ReadingAttributeImpl_getPronunciation(t_ReadingAttributeImpl *self);
            static PyObject *t_ReadingAttributeImpl_getReading(t_ReadingAttributeImpl *self);
            static PyObject *t_ReadingAttributeImpl_reflectWith(t_ReadingAttributeImpl *self, PyObject *args);
            static PyObject *t_ReadingAttributeImpl_setToken(t_ReadingAttributeImpl *self, PyObject *arg);
            static PyObject *t_ReadingAttributeImpl_get__pronunciation(t_ReadingAttributeImpl *self, void *data);
            static PyObject *t_ReadingAttributeImpl_get__reading(t_ReadingAttributeImpl *self, void *data);
            static int t_ReadingAttributeImpl_set__token(t_ReadingAttributeImpl *self, PyObject *arg, void *data);
            static PyGetSetDef t_ReadingAttributeImpl__fields_[] = {
              DECLARE_GET_FIELD(t_ReadingAttributeImpl, pronunciation),
              DECLARE_GET_FIELD(t_ReadingAttributeImpl, reading),
              DECLARE_SET_FIELD(t_ReadingAttributeImpl, token),
              { NULL, NULL, NULL, NULL, NULL }
            };

            static PyMethodDef t_ReadingAttributeImpl__methods_[] = {
              DECLARE_METHOD(t_ReadingAttributeImpl, cast_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_ReadingAttributeImpl, instance_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_ReadingAttributeImpl, clear, METH_VARARGS),
              DECLARE_METHOD(t_ReadingAttributeImpl, copyTo, METH_VARARGS),
              DECLARE_METHOD(t_ReadingAttributeImpl, getPronunciation, METH_NOARGS),
              DECLARE_METHOD(t_ReadingAttributeImpl, getReading, METH_NOARGS),
              DECLARE_METHOD(t_ReadingAttributeImpl, reflectWith, METH_VARARGS),
              DECLARE_METHOD(t_ReadingAttributeImpl, setToken, METH_O),
              { NULL, NULL, 0, NULL }
            };

            static PyType_Slot PY_TYPE_SLOTS(ReadingAttributeImpl)[] = {
              { Py_tp_methods, t_ReadingAttributeImpl__methods_ },
              { Py_tp_init, (void *) t_ReadingAttributeImpl_init_ },
              { Py_tp_getset, t_ReadingAttributeImpl__fields_ },
              { 0, NULL }
            };

            static PyType_Def *PY_TYPE_BASES(ReadingAttributeImpl)[] = {
              &PY_TYPE_DEF(::org::apache::lucene::util::AttributeImpl),
              NULL
            };

            DEFINE_TYPE(ReadingAttributeImpl, t_ReadingAttributeImpl, ReadingAttributeImpl);

            void t_ReadingAttributeImpl::install(PyObject *module)
            {
              installType(&PY_TYPE(ReadingAttributeImpl), &PY_TYPE_DEF(ReadingAttributeImpl), module, "ReadingAttributeImpl", 0);
            }

            void t_ReadingAttributeImpl::initialize(PyObject *module)
            {
              PyObject_SetAttrString((PyObject *) PY_TYPE(ReadingAttributeImpl), "class_", make_descriptor(ReadingAttributeImpl::initializeClass, 1));
              PyObject_SetAttrString((PyObject *) PY_TYPE(ReadingAttributeImpl), "wrapfn_", make_descriptor(t_ReadingAttributeImpl::wrap_jobject));
              PyObject_SetAttrString((PyObject *) PY_TYPE(ReadingAttributeImpl), "boxfn_", make_descriptor(boxObject));
            }

            static PyObject *t_ReadingAttributeImpl_cast_(PyTypeObject *type, PyObject *arg)
            {
              if (!(arg = castCheck(arg, ReadingAttributeImpl::initializeClass, 1)))
                return NULL;
              return t_ReadingAttributeImpl::wrap_Object(ReadingAttributeImpl(((t_ReadingAttributeImpl *) arg)->object.this$));
            }
            static PyObject *t_ReadingAttributeImpl_instance_(PyTypeObject *type, PyObject *arg)
            {
              if (!castCheck(arg, ReadingAttributeImpl::initializeClass, 0))
                Py_RETURN_FALSE;
              Py_RETURN_TRUE;
            }

            static int t_ReadingAttributeImpl_init_(t_ReadingAttributeImpl *self, PyObject *args, PyObject *kwds)
            {
              ReadingAttributeImpl object((jobject) NULL);

              INT_CALL(object = ReadingAttributeImpl());
              self->object = object;

              return 0;
            }

            static PyObject *t_ReadingAttributeImpl_clear(t_ReadingAttributeImpl *self, PyObject *args)
            {

              if (!parseArgs(args, ""))
              {
                OBJ_CALL(self->object.clear());
                Py_RETURN_NONE;
              }

              return callSuper(PY_TYPE(ReadingAttributeImpl), (PyObject *) self, "clear", args, 2);
            }

            static PyObject *t_ReadingAttributeImpl_copyTo(t_ReadingAttributeImpl *self, PyObject *args)
            {
              ::org::apache::lucene::util::AttributeImpl a0((jobject) NULL);

              if (!parseArgs(args, "k", ::org::apache::lucene::util::AttributeImpl::initializeClass, &a0))
              {
                OBJ_CALL(self->object.copyTo(a0));
                Py_RETURN_NONE;
              }

              return callSuper(PY_TYPE(ReadingAttributeImpl), (PyObject *) self, "copyTo", args, 2);
            }

            static PyObject *t_ReadingAttributeImpl_getPronunciation(t_ReadingAttributeImpl *self)
            {
              ::java::lang::String result((jobject) NULL);
              OBJ_CALL(result = self->object.getPronunciation());
              return j2p(result);
            }

            static PyObject *t_ReadingAttributeImpl_getReading(t_ReadingAttributeImpl *self)
            {
              ::java::lang::String result((jobject) NULL);
              OBJ_CALL(result = self->object.getReading());
              return j2p(result);
            }

            static PyObject *t_ReadingAttributeImpl_reflectWith(t_ReadingAttributeImpl *self, PyObject *args)
            {
              ::org::apache::lucene::util::AttributeReflector a0((jobject) NULL);

              if (!parseArgs(args, "k", ::org::apache::lucene::util::AttributeReflector::initializeClass, &a0))
              {
                OBJ_CALL(self->object.reflectWith(a0));
                Py_RETURN_NONE;
              }

              return callSuper(PY_TYPE(ReadingAttributeImpl), (PyObject *) self, "reflectWith", args, 2);
            }

            static PyObject *t_ReadingAttributeImpl_setToken(t_ReadingAttributeImpl *self, PyObject *arg)
            {
              ::org::apache::lucene::analysis::ja::Token a0((jobject) NULL);

              if (!parseArg(arg, "k", ::org::apache::lucene::analysis::ja::Token::initializeClass, &a0))
              {
                OBJ_CALL(self->object.setToken(a0));
                Py_RETURN_NONE;
              }

              PyErr_SetArgsError((PyObject *) self, "setToken", arg);
              return NULL;
            }

            static PyObject *t_ReadingAttributeImpl_get__pronunciation(t_ReadingAttributeImpl *self, void *data)
            {
              ::java::lang::String value((jobject) NULL);
              OBJ_CALL(value = self->object.getPronunciation());
              return j2p(value);
            }

            static PyObject *t_ReadingAttributeImpl_get__reading(t_ReadingAttributeImpl *self, void *data)
            {
              ::java::lang::String value((jobject) NULL);
              OBJ_CALL(value = self->object.getReading());
              return j2p(value);
            }

            static int t_ReadingAttributeImpl_set__token(t_ReadingAttributeImpl *self, PyObject *arg, void *data)
            {
              {
                ::org::apache::lucene::analysis::ja::Token value((jobject) NULL);
                if (!parseArg(arg, "k", ::org::apache::lucene::analysis::ja::Token::initializeClass, &value))
                {
                  INT_CALL(self->object.setToken(value));
                  return 0;
                }
              }
              PyErr_SetArgsError((PyObject *) self, "token", arg);
              return -1;
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/index/FilterLeafReader$FilterTerms.h"
#include "java/lang/Class.h"
#include "java/lang/Object.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/index/TermsEnum.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {

        ::java::lang::Class *FilterLeafReader$FilterTerms::class$ = NULL;
        jmethodID *FilterLeafReader$FilterTerms::mids$ = NULL;
        bool FilterLeafReader$FilterTerms::live$ = false;

        jclass FilterLeafReader$FilterTerms::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/index/FilterLeafReader$FilterTerms");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_4b02001141791c28] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/index/Terms;)V");
            mids$[mid_getDocCount_9972fcc56b44e79d] = env->getMethodID(cls, "getDocCount", "()I");
            mids$[mid_getStats_d6bcd06f3102c4d9] = env->getMethodID(cls, "getStats", "()Ljava/lang/Object;");
            mids$[mid_getSumDocFreq_2e5ae9edcb9b072f] = env->getMethodID(cls, "getSumDocFreq", "()J");
            mids$[mid_getSumTotalTermFreq_2e5ae9edcb9b072f] = env->getMethodID(cls, "getSumTotalTermFreq", "()J");
            mids$[mid_hasFreqs_8454bd5aa23fd11e] = env->getMethodID(cls, "hasFreqs", "()Z");
            mids$[mid_hasOffsets_8454bd5aa23fd11e] = env->getMethodID(cls, "hasOffsets", "()Z");
            mids$[mid_hasPayloads_8454bd5aa23fd11e] = env->getMethodID(cls, "hasPayloads", "()Z");
            mids$[mid_hasPositions_8454bd5aa23fd11e] = env->getMethodID(cls, "hasPositions", "()Z");
            mids$[mid_iterator_3f9a21827903a65f] = env->getMethodID(cls, "iterator", "()Lorg/apache/lucene/index/TermsEnum;");
            mids$[mid_size_2e5ae9edcb9b072f] = env->getMethodID(cls, "size", "()J");

            class$ = new ::java::lang::Class(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        FilterLeafReader$FilterTerms::FilterLeafReader$FilterTerms(const ::org::apache::lucene::index::Terms & a0) : ::org::apache::lucene::index::Terms(env->newObject(initializeClass, &mids$, mid_init$_4b02001141791c28, a0.this$)) {}

        jint FilterLeafReader$FilterTerms::getDocCount() const
        {
          return env->callIntMethod(this$, mids$[mid_getDocCount_9972fcc56b44e79d]);
        }

        ::java::lang::Object FilterLeafReader$FilterTerms::getStats() const
        {
          return ::java::lang::Object(env->callObjectMethod(this$, mids$[mid_getStats_d6bcd06f3102c4d9]));
        }

        jlong FilterLeafReader$FilterTerms::getSumDocFreq() const
        {
          return env->callLongMethod(this$, mids$[mid_getSumDocFreq_2e5ae9edcb9b072f]);
        }

        jlong FilterLeafReader$FilterTerms::getSumTotalTermFreq() const
        {
          return env->callLongMethod(this$, mids$[mid_getSumTotalTermFreq_2e5ae9edcb9b072f]);
        }

        jboolean FilterLeafReader$FilterTerms::hasFreqs() const
        {
          return env->callBooleanMethod(this$, mids$[mid_hasFreqs_8454bd5aa23fd11e]);
        }

        jboolean FilterLeafReader$FilterTerms::hasOffsets() const
        {
          return env->callBooleanMethod(this$, mids$[mid_hasOffsets_8454bd5aa23fd11e]);
        }

        jboolean FilterLeafReader$FilterTerms::hasPayloads() const
        {
          return env->callBooleanMethod(this$, mids$[mid_hasPayloads_8454bd5aa23fd11e]);
        }

        jboolean FilterLeafReader$FilterTerms::hasPositions() const
        {
          return env->callBooleanMethod(this$, mids$[mid_hasPositions_8454bd5aa23fd11e]);
        }

        ::org::apache::lucene::index::TermsEnum FilterLeafReader$FilterTerms::iterator() const
        {
          return ::org::apache::lucene::index::TermsEnum(env->callObjectMethod(this$, mids$[mid_iterator_3f9a21827903a65f]));
        }

        jlong FilterLeafReader$FilterTerms::size() const
        {
          return env->callLongMethod(this$, mids$[mid_size_2e5ae9edcb9b072f]);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {
        static PyObject *t_FilterLeafReader$FilterTerms_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_FilterLeafReader$FilterTerms_instance_(PyTypeObject *type, PyObject *arg);
        static int t_FilterLeafReader$FilterTerms_init_(t_FilterLeafReader$FilterTerms *self, PyObject *args, PyObject *kwds);
        static PyObject *t_FilterLeafReader$FilterTerms_getDocCount(t_FilterLeafReader$FilterTerms *self, PyObject *args);
        static PyObject *t_FilterLeafReader$FilterTerms_getStats(t_FilterLeafReader$FilterTerms *self, PyObject *args);
        static PyObject *t_FilterLeafReader$FilterTerms_getSumDocFreq(t_FilterLeafReader$FilterTerms *self, PyObject *args);
        static PyObject *t_FilterLeafReader$FilterTerms_getSumTotalTermFreq(t_FilterLeafReader$FilterTerms *self, PyObject *args);
        static PyObject *t_FilterLeafReader$FilterTerms_hasFreqs(t_FilterLeafReader$FilterTerms *self, PyObject *args);
        static PyObject *t_FilterLeafReader$FilterTerms_hasOffsets(t_FilterLeafReader$FilterTerms *self, PyObject *args);
        static PyObject *t_FilterLeafReader$FilterTerms_hasPayloads(t_FilterLeafReader$FilterTerms *self, PyObject *args);
        static PyObject *t_FilterLeafReader$FilterTerms_hasPositions(t_FilterLeafReader$FilterTerms *self, PyObject *args);
        static PyObject *t_FilterLeafReader$FilterTerms_iterator(t_FilterLeafReader$FilterTerms *self, PyObject *args);
        static PyObject *t_FilterLeafReader$FilterTerms_size(t_FilterLeafReader$FilterTerms *self, PyObject *args);
        static PyObject *t_FilterLeafReader$FilterTerms_get__docCount(t_FilterLeafReader$FilterTerms *self, void *data);
        static PyObject *t_FilterLeafReader$FilterTerms_get__stats(t_FilterLeafReader$FilterTerms *self, void *data);
        static PyObject *t_FilterLeafReader$FilterTerms_get__sumDocFreq(t_FilterLeafReader$FilterTerms *self, void *data);
        static PyObject *t_FilterLeafReader$FilterTerms_get__sumTotalTermFreq(t_FilterLeafReader$FilterTerms *self, void *data);
        static PyGetSetDef t_FilterLeafReader$FilterTerms__fields_[] = {
          DECLARE_GET_FIELD(t_FilterLeafReader$FilterTerms, docCount),
          DECLARE_GET_FIELD(t_FilterLeafReader$FilterTerms, stats),
          DECLARE_GET_FIELD(t_FilterLeafReader$FilterTerms, sumDocFreq),
          DECLARE_GET_FIELD(t_FilterLeafReader$FilterTerms, sumTotalTermFreq),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_FilterLeafReader$FilterTerms__methods_[] = {
          DECLARE_METHOD(t_FilterLeafReader$FilterTerms, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_FilterLeafReader$FilterTerms, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_FilterLeafReader$FilterTerms, getDocCount, METH_VARARGS),
          DECLARE_METHOD(t_FilterLeafReader$FilterTerms, getStats, METH_VARARGS),
          DECLARE_METHOD(t_FilterLeafReader$FilterTerms, getSumDocFreq, METH_VARARGS),
          DECLARE_METHOD(t_FilterLeafReader$FilterTerms, getSumTotalTermFreq, METH_VARARGS),
          DECLARE_METHOD(t_FilterLeafReader$FilterTerms, hasFreqs, METH_VARARGS),
          DECLARE_METHOD(t_FilterLeafReader$FilterTerms, hasOffsets, METH_VARARGS),
          DECLARE_METHOD(t_FilterLeafReader$FilterTerms, hasPayloads, METH_VARARGS),
          DECLARE_METHOD(t_FilterLeafReader$FilterTerms, hasPositions, METH_VARARGS),
          DECLARE_METHOD(t_FilterLeafReader$FilterTerms, iterator, METH_VARARGS),
          DECLARE_METHOD(t_FilterLeafReader$FilterTerms, size, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        static PyType_Slot PY_TYPE_SLOTS(FilterLeafReader$FilterTerms)[] = {
          { Py_tp_methods, t_FilterLeafReader$FilterTerms__methods_ },
          { Py_tp_init, (void *) t_FilterLeafReader$FilterTerms_init_ },
          { Py_tp_getset, t_FilterLeafReader$FilterTerms__fields_ },
          { 0, NULL }
        };

        static PyType_Def *PY_TYPE_BASES(FilterLeafReader$FilterTerms)[] = {
          &PY_TYPE_DEF(::org::apache::lucene::index::Terms),
          NULL
        };

        DEFINE_TYPE(FilterLeafReader$FilterTerms, t_FilterLeafReader$FilterTerms, FilterLeafReader$FilterTerms);

        void t_FilterLeafReader$FilterTerms::install(PyObject *module)
        {
          installType(&PY_TYPE(FilterLeafReader$FilterTerms), &PY_TYPE_DEF(FilterLeafReader$FilterTerms), module, "FilterLeafReader$FilterTerms", 0);
        }

        void t_FilterLeafReader$FilterTerms::initialize(PyObject *module)
        {
          PyObject_SetAttrString((PyObject *) PY_TYPE(FilterLeafReader$FilterTerms), "class_", make_descriptor(FilterLeafReader$FilterTerms::initializeClass, 1));
          PyObject_SetAttrString((PyObject *) PY_TYPE(FilterLeafReader$FilterTerms), "wrapfn_", make_descriptor(t_FilterLeafReader$FilterTerms::wrap_jobject));
          PyObject_SetAttrString((PyObject *) PY_TYPE(FilterLeafReader$FilterTerms), "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_FilterLeafReader$FilterTerms_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, FilterLeafReader$FilterTerms::initializeClass, 1)))
            return NULL;
          return t_FilterLeafReader$FilterTerms::wrap_Object(FilterLeafReader$FilterTerms(((t_FilterLeafReader$FilterTerms *) arg)->object.this$));
        }
        static PyObject *t_FilterLeafReader$FilterTerms_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, FilterLeafReader$FilterTerms::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_FilterLeafReader$FilterTerms_init_(t_FilterLeafReader$FilterTerms *self, PyObject *args, PyObject *kwds)
        {
          ::org::apache::lucene::index::Terms a0((jobject) NULL);
          FilterLeafReader$FilterTerms object((jobject) NULL);

          if (!parseArgs(args, "k", ::org::apache::lucene::index::Terms::initializeClass, &a0))
          {
            INT_CALL(object = FilterLeafReader$FilterTerms(a0));
            self->object = object;
          }
          else
          {
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }

        static PyObject *t_FilterLeafReader$FilterTerms_getDocCount(t_FilterLeafReader$FilterTerms *self, PyObject *args)
        {
          jint result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.getDocCount());
            return PyLong_FromLong((long) result);
          }

          return callSuper(PY_TYPE(FilterLeafReader$FilterTerms), (PyObject *) self, "getDocCount", args, 2);
        }

        static PyObject *t_FilterLeafReader$FilterTerms_getStats(t_FilterLeafReader$FilterTerms *self, PyObject *args)
        {
          ::java::lang::Object result((jobject) NULL);

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.getStats());
            return ::java::lang::t_Object::wrap_Object(result);
          }

          return callSuper(PY_TYPE(FilterLeafReader$FilterTerms), (PyObject *) self, "getStats", args, 2);
        }

        static PyObject *t_FilterLeafReader$FilterTerms_getSumDocFreq(t_FilterLeafReader$FilterTerms *self, PyObject *args)
        {
          jlong result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.getSumDocFreq());
            return PyLong_FromLongLong((PY_LONG_LONG) result);
          }

          return callSuper(PY_TYPE(FilterLeafReader$FilterTerms), (PyObject *) self, "getSumDocFreq", args, 2);
        }

        static PyObject *t_FilterLeafReader$FilterTerms_getSumTotalTermFreq(t_FilterLeafReader$FilterTerms *self, PyObject *args)
        {
          jlong result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.getSumTotalTermFreq());
            return PyLong_FromLongLong((PY_LONG_LONG) result);
          }

          return callSuper(PY_TYPE(FilterLeafReader$FilterTerms), (PyObject *) self, "getSumTotalTermFreq", args, 2);
        }

        static PyObject *t_FilterLeafReader$FilterTerms_hasFreqs(t_FilterLeafReader$FilterTerms *self, PyObject *args)
        {
          jboolean result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.hasFreqs());
            Py_RETURN_BOOL(result);
          }

          return callSuper(PY_TYPE(FilterLeafReader$FilterTerms), (PyObject *) self, "hasFreqs", args, 2);
        }

        static PyObject *t_FilterLeafReader$FilterTerms_hasOffsets(t_FilterLeafReader$FilterTerms *self, PyObject *args)
        {
          jboolean result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.hasOffsets());
            Py_RETURN_BOOL(result);
          }

          return callSuper(PY_TYPE(FilterLeafReader$FilterTerms), (PyObject *) self, "hasOffsets", args, 2);
        }

        static PyObject *t_FilterLeafReader$FilterTerms_hasPayloads(t_FilterLeafReader$FilterTerms *self, PyObject *args)
        {
          jboolean result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.hasPayloads());
            Py_RETURN_BOOL(result);
          }

          return callSuper(PY_TYPE(FilterLeafReader$FilterTerms), (PyObject *) self, "hasPayloads", args, 2);
        }

        static PyObject *t_FilterLeafReader$FilterTerms_hasPositions(t_FilterLeafReader$FilterTerms *self, PyObject *args)
        {
          jboolean result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.hasPositions());
            Py_RETURN_BOOL(result);
          }

          return callSuper(PY_TYPE(FilterLeafReader$FilterTerms), (PyObject *) self, "hasPositions", args, 2);
        }

        static PyObject *t_FilterLeafReader$FilterTerms_iterator(t_FilterLeafReader$FilterTerms *self, PyObject *args)
        {
          ::org::apache::lucene::index::TermsEnum result((jobject) NULL);

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.iterator());
            return ::org::apache::lucene::index::t_TermsEnum::wrap_Object(result);
          }

          return callSuper(PY_TYPE(FilterLeafReader$FilterTerms), (PyObject *) self, "iterator", args, 2);
        }

        static PyObject *t_FilterLeafReader$FilterTerms_size(t_FilterLeafReader$FilterTerms *self, PyObject *args)
        {
          jlong result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.size());
            return PyLong_FromLongLong((PY_LONG_LONG) result);
          }

          return callSuper(PY_TYPE(FilterLeafReader$FilterTerms), (PyObject *) self, "size", args, 2);
        }

        static PyObject *t_FilterLeafReader$FilterTerms_get__docCount(t_FilterLeafReader$FilterTerms *self, void *data)
        {
          jint value;
          OBJ_CALL(value = self->object.getDocCount());
          return PyLong_FromLong((long) value);
        }

        static PyObject *t_FilterLeafReader$FilterTerms_get__stats(t_FilterLeafReader$FilterTerms *self, void *data)
        {
          ::java::lang::Object value((jobject) NULL);
          OBJ_CALL(value = self->object.getStats());
          return ::java::lang::t_Object::wrap_Object(value);
        }

        static PyObject *t_FilterLeafReader$FilterTerms_get__sumDocFreq(t_FilterLeafReader$FilterTerms *self, void *data)
        {
          jlong value;
          OBJ_CALL(value = self->object.getSumDocFreq());
          return PyLong_FromLongLong((PY_LONG_LONG) value);
        }

        static PyObject *t_FilterLeafReader$FilterTerms_get__sumTotalTermFreq(t_FilterLeafReader$FilterTerms *self, void *data)
        {
          jlong value;
          OBJ_CALL(value = self->object.getSumTotalTermFreq());
          return PyLong_FromLongLong((PY_LONG_LONG) value);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queries/function/valuesource/MultiValuedIntFieldSource.h"
#include "org/apache/lucene/search/SortField.h"
#include "java/lang/Class.h"
#include "java/lang/Object.h"
#include "java/lang/String.h"
#include "org/apache/lucene/search/SortedNumericSelector$Type.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queries {
        namespace function {
          namespace valuesource {

            ::java::lang::Class *MultiValuedIntFieldSource::class$ = NULL;
            jmethodID *MultiValuedIntFieldSource::mids$ = NULL;
            bool MultiValuedIntFieldSource::live$ = false;

            jclass MultiValuedIntFieldSource::initializeClass(bool getOnly)
            {
              if (getOnly)
                return (jclass) (live$ ? class$->this$ : NULL);
              if (class$ == NULL)
              {
                jclass cls = (jclass) env->findClass("org/apache/lucene/queries/function/valuesource/MultiValuedIntFieldSource");

                mids$ = new jmethodID[max_mid];
                mids$[mid_init$_eb65f30ff755fcc7] = env->getMethodID(cls, "<init>", "(Ljava/lang/String;Lorg/apache/lucene/search/SortedNumericSelector$Type;)V");
                mids$[mid_description_db9b55ba01e03e4b] = env->getMethodID(cls, "description", "()Ljava/lang/String;");
                mids$[mid_equals_8b72f2dcdde6fd1d] = env->getMethodID(cls, "equals", "(Ljava/lang/Object;)Z");
                mids$[mid_getSortField_8a713675264264ba] = env->getMethodID(cls, "getSortField", "(Z)Lorg/apache/lucene/search/SortField;");
                mids$[mid_hashCode_9972fcc56b44e79d] = env->getMethodID(cls, "hashCode", "()I");
                mids$[mid_getNumericDocValues_991afb5c8a130516] = env->getMethodID(cls, "getNumericDocValues", "(Ljava/util/Map;Lorg/apache/lucene/index/LeafReaderContext;)Lorg/apache/lucene/index/NumericDocValues;");

                class$ = new ::java::lang::Class(cls);
                live$ = true;
              }
              return (jclass) class$->this$;
            }

            MultiValuedIntFieldSource::MultiValuedIntFieldSource(const ::java::lang::String & a0, const ::org::apache::lucene::search::SortedNumericSelector$Type & a1) : ::org::apache::lucene::queries::function::valuesource::IntFieldSource(env->newObject(initializeClass, &mids$, mid_init$_eb65f30ff755fcc7, a0.this$, a1.this$)) {}

            ::java::lang::String MultiValuedIntFieldSource::description() const
            {
              return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_description_db9b55ba01e03e4b]));
            }

            jboolean MultiValuedIntFieldSource::equals(const ::java::lang::Object & a0) const
            {
              return env->callBooleanMethod(this$, mids$[mid_equals_8b72f2dcdde6fd1d], a0.this$);
            }

            ::org::apache::lucene::search::SortField MultiValuedIntFieldSource::getSortField(jboolean a0) const
            {
              return ::org::apache::lucene::search::SortField(env->callObjectMethod(this$, mids$[mid_getSortField_8a713675264264ba], a0));
            }

            jint MultiValuedIntFieldSource::hashCode() const
            {
              return env->callIntMethod(this$, mids$[mid_hashCode_9972fcc56b44e79d]);
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queries {
        namespace function {
          namespace valuesource {
            static PyObject *t_MultiValuedIntFieldSource_cast_(PyTypeObject *type, PyObject *arg);
            static PyObject *t_MultiValuedIntFieldSource_instance_(PyTypeObject *type, PyObject *arg);
            static int t_MultiValuedIntFieldSource_init_(t_MultiValuedIntFieldSource *self, PyObject *args, PyObject *kwds);
            static PyObject *t_MultiValuedIntFieldSource_description(t_MultiValuedIntFieldSource *self, PyObject *args);
            static PyObject *t_MultiValuedIntFieldSource_equals(t_MultiValuedIntFieldSource *self, PyObject *args);
            static PyObject *t_MultiValuedIntFieldSource_getSortField(t_MultiValuedIntFieldSource *self, PyObject *args);
            static PyObject *t_MultiValuedIntFieldSource_hashCode(t_MultiValuedIntFieldSource *self, PyObject *args);

            static PyMethodDef t_MultiValuedIntFieldSource__methods_[] = {
              DECLARE_METHOD(t_MultiValuedIntFieldSource, cast_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_MultiValuedIntFieldSource, instance_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_MultiValuedIntFieldSource, description, METH_VARARGS),
              DECLARE_METHOD(t_MultiValuedIntFieldSource, equals, METH_VARARGS),
              DECLARE_METHOD(t_MultiValuedIntFieldSource, getSortField, METH_VARARGS),
              DECLARE_METHOD(t_MultiValuedIntFieldSource, hashCode, METH_VARARGS),
              { NULL, NULL, 0, NULL }
            };

            static PyType_Slot PY_TYPE_SLOTS(MultiValuedIntFieldSource)[] = {
              { Py_tp_methods, t_MultiValuedIntFieldSource__methods_ },
              { Py_tp_init, (void *) t_MultiValuedIntFieldSource_init_ },
              { 0, NULL }
            };

            static PyType_Def *PY_TYPE_BASES(MultiValuedIntFieldSource)[] = {
              &PY_TYPE_DEF(::org::apache::lucene::queries::function::valuesource::IntFieldSource),
              NULL
            };

            DEFINE_TYPE(MultiValuedIntFieldSource, t_MultiValuedIntFieldSource, MultiValuedIntFieldSource);

            void t_MultiValuedIntFieldSource::install(PyObject *module)
            {
              installType(&PY_TYPE(MultiValuedIntFieldSource), &PY_TYPE_DEF(MultiValuedIntFieldSource), module, "MultiValuedIntFieldSource", 0);
            }

            void t_MultiValuedIntFieldSource::initialize(PyObject *module)
            {
              PyObject_SetAttrString((PyObject *) PY_TYPE(MultiValuedIntFieldSource), "class_", make_descriptor(MultiValuedIntFieldSource::initializeClass, 1));
              PyObject_SetAttrString((PyObject *) PY_TYPE(MultiValuedIntFieldSource), "wrapfn_", make_descriptor(t_MultiValuedIntFieldSource::wrap_jobject));
              PyObject_SetAttrString((PyObject *) PY_TYPE(MultiValuedIntFieldSource), "boxfn_", make_descriptor(boxObject));
            }

            static PyObject *t_MultiValuedIntFieldSource_cast_(PyTypeObject *type, PyObject *arg)
            {
              if (!(arg = castCheck(arg, MultiValuedIntFieldSource::initializeClass, 1)))
                return NULL;
              return t_MultiValuedIntFieldSource::wrap_Object(MultiValuedIntFieldSource(((t_MultiValuedIntFieldSource *) arg)->object.this$));
            }
            static PyObject *t_MultiValuedIntFieldSource_instance_(PyTypeObject *type, PyObject *arg)
            {
              if (!castCheck(arg, MultiValuedIntFieldSource::initializeClass, 0))
                Py_RETURN_FALSE;
              Py_RETURN_TRUE;
            }

            static int t_MultiValuedIntFieldSource_init_(t_MultiValuedIntFieldSource *self, PyObject *args, PyObject *kwds)
            {
              ::java::lang::String a0((jobject) NULL);
              ::org::apache::lucene::search::SortedNumericSelector$Type a1((jobject) NULL);
              PyTypeObject **p1;
              MultiValuedIntFieldSource object((jobject) NULL);

              if (!parseArgs(args, "sK", ::org::apache::lucene::search::SortedNumericSelector$Type::initializeClass, &a0, &a1, &p1, ::org::apache::lucene::search::t_SortedNumericSelector$Type::parameters_))
              {
                INT_CALL(object = MultiValuedIntFieldSource(a0, a1));
                self->object = object;
              }
              else
              {
                PyErr_SetArgsError((PyObject *) self, "__init__", args);
                return -1;
              }

              return 0;
            }

            static PyObject *t_MultiValuedIntFieldSource_description(t_MultiValuedIntFieldSource *self, PyObject *args)
            {
              ::java::lang::String result((jobject) NULL);

              if (!parseArgs(args, ""))
              {
                OBJ_CALL(result = self->object.description());
                return j2p(result);
              }

              return callSuper(PY_TYPE(MultiValuedIntFieldSource), (PyObject *) self, "description", args, 2);
            }

            static PyObject *t_MultiValuedIntFieldSource_equals(t_MultiValuedIntFieldSource *self, PyObject *args)
            {
              ::java::lang::Object a0((jobject) NULL);
              jboolean result;

              if (!parseArgs(args, "o", &a0))
              {
                OBJ_CALL(result = self->object.equals(a0));
                Py_RETURN_BOOL(result);
              }

              return callSuper(PY_TYPE(MultiValuedIntFieldSource), (PyObject *) self, "equals", args, 2);
            }

            static PyObject *t_MultiValuedIntFieldSource_getSortField(t_MultiValuedIntFieldSource *self, PyObject *args)
            {
              jboolean a0;
              ::org::apache::lucene::search::SortField result((jobject) NULL);

              if (!parseArgs(args, "Z", &a0))
              {
                OBJ_CALL(result = self->object.getSortField(a0));
                return ::org::apache::lucene::search::t_SortField::wrap_Object(result);
              }

              return callSuper(PY_TYPE(MultiValuedIntFieldSource), (PyObject *) self, "getSortField", args, 2);
            }

            static PyObject *t_MultiValuedIntFieldSource_hashCode(t_MultiValuedIntFieldSource *self, PyObject *args)
            {
              jint result;

              if (!parseArgs(args, ""))
              {
                OBJ_CALL(result = self->object.hashCode());
                return PyLong_FromLong((long) result);
              }

              return callSuper(PY_TYPE(MultiValuedIntFieldSource), (PyObject *) self, "hashCode", args, 2);
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/hi/HindiNormalizer.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace hi {

          ::java::lang::Class *HindiNormalizer::class$ = NULL;
          jmethodID *HindiNormalizer::mids$ = NULL;
          bool HindiNormalizer::live$ = false;

          jclass HindiNormalizer::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/hi/HindiNormalizer");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_f2cc1bce94666404] = env->getMethodID(cls, "<init>", "()V");
              mids$[mid_normalize_d4655f2a19359017] = env->getMethodID(cls, "normalize", "([CI)I");

              class$ = new ::java::lang::Class(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          HindiNormalizer::HindiNormalizer() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_f2cc1bce94666404)) {}

          jint HindiNormalizer::normalize(const JArray< jchar > & a0, jint a1) const
          {
            return env->callIntMethod(this$, mids$[mid_normalize_d4655f2a19359017], a0.this$, a1);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace hi {
          static PyObject *t_HindiNormalizer_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_HindiNormalizer_instance_(PyTypeObject *type, PyObject *arg);
          static int t_HindiNormalizer_init_(t_HindiNormalizer *self, PyObject *args, PyObject *kwds);
          static PyObject *t_HindiNormalizer_normalize(t_HindiNormalizer *self, PyObject *args);

          static PyMethodDef t_HindiNormalizer__methods_[] = {
            DECLARE_METHOD(t_HindiNormalizer, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_HindiNormalizer, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_HindiNormalizer, normalize, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          static PyType_Slot PY_TYPE_SLOTS(HindiNormalizer)[] = {
            { Py_tp_methods, t_HindiNormalizer__methods_ },
            { Py_tp_init, (void *) t_HindiNormalizer_init_ },
            { 0, NULL }
          };

          static PyType_Def *PY_TYPE_BASES(HindiNormalizer)[] = {
            &PY_TYPE_DEF(::java::lang::Object),
            NULL
          };

          DEFINE_TYPE(HindiNormalizer, t_HindiNormalizer, HindiNormalizer);

          void t_HindiNormalizer::install(PyObject *module)
          {
            installType(&PY_TYPE(HindiNormalizer), &PY_TYPE_DEF(HindiNormalizer), module, "HindiNormalizer", 0);
          }

          void t_HindiNormalizer::initialize(PyObject *module)
          {
            PyObject_SetAttrString((PyObject *) PY_TYPE(HindiNormalizer), "class_", make_descriptor(HindiNormalizer::initializeClass, 1));
            PyObject_SetAttrString((PyObject *) PY_TYPE(HindiNormalizer), "wrapfn_", make_descriptor(t_HindiNormalizer::wrap_jobject));
            PyObject_SetAttrString((PyObject *) PY_TYPE(HindiNormalizer), "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_HindiNormalizer_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, HindiNormalizer::initializeClass, 1)))
              return NULL;
            return t_HindiNormalizer::wrap_Object(HindiNormalizer(((t_HindiNormalizer *) arg)->object.this$));
          }
          static PyObject *t_HindiNormalizer_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, HindiNormalizer::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_HindiNormalizer_init_(t_HindiNormalizer *self, PyObject *args, PyObject *kwds)
          {
            HindiNormalizer object((jobject) NULL);

            INT_CALL(object = HindiNormalizer());
            self->object = object;

            return 0;
          }

          static PyObject *t_HindiNormalizer_normalize(t_HindiNormalizer *self, PyObject *args)
          {
            JArray< jchar > a0((jobject) NULL);
            jint a1;
            jint result;

            if (!parseArgs(args, "[CI", &a0, &a1))
            {
              OBJ_CALL(result = self->object.normalize(a0, a1));
              return PyLong_FromLong((long) result);
            }

            PyErr_SetArgsError((PyObject *) self, "normalize", args);
            return NULL;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/fi/FinnishLightStemFilter.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/analysis/TokenStream.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace fi {

          ::java::lang::Class *FinnishLightStemFilter::class$ = NULL;
          jmethodID *FinnishLightStemFilter::mids$ = NULL;
          bool FinnishLightStemFilter::live$ = false;

          jclass FinnishLightStemFilter::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/fi/FinnishLightStemFilter");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_c26756868a754f4e] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/analysis/TokenStream;)V");
              mids$[mid_incrementToken_8454bd5aa23fd11e] = env->getMethodID(cls, "incrementToken", "()Z");

              class$ = new ::java::lang::Class(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          FinnishLightStemFilter::FinnishLightStemFilter(const ::org::apache::lucene::analysis::TokenStream & a0) : ::org::apache::lucene::analysis::TokenFilter(env->newObject(initializeClass, &mids$, mid_init$_c26756868a754f4e, a0.this$)) {}

          jboolean FinnishLightStemFilter::incrementToken() const
          {
            return env->callBooleanMethod(this$, mids$[mid_incrementToken_8454bd5aa23fd11e]);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace fi {
          static PyObject *t_FinnishLightStemFilter_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_FinnishLightStemFilter_instance_(PyTypeObject *type, PyObject *arg);
          static int t_FinnishLightStemFilter_init_(t_FinnishLightStemFilter *self, PyObject *args, PyObject *kwds);
          static PyObject *t_FinnishLightStemFilter_incrementToken(t_FinnishLightStemFilter *self, PyObject *args);

          static PyMethodDef t_FinnishLightStemFilter__methods_[] = {
            DECLARE_METHOD(t_FinnishLightStemFilter, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_FinnishLightStemFilter, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_FinnishLightStemFilter, incrementToken, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          static PyType_Slot PY_TYPE_SLOTS(FinnishLightStemFilter)[] = {
            { Py_tp_methods, t_FinnishLightStemFilter__methods_ },
            { Py_tp_init, (void *) t_FinnishLightStemFilter_init_ },
            { 0, NULL }
          };

          static PyType_Def *PY_TYPE_BASES(FinnishLightStemFilter)[] = {
            &PY_TYPE_DEF(::org::apache::lucene::analysis::TokenFilter),
            NULL
          };

          DEFINE_TYPE(FinnishLightStemFilter, t_FinnishLightStemFilter, FinnishLightStemFilter);

          void t_FinnishLightStemFilter::install(PyObject *module)
          {
            installType(&PY_TYPE(FinnishLightStemFilter), &PY_TYPE_DEF(FinnishLightStemFilter), module, "FinnishLightStemFilter", 0);
          }

          void t_FinnishLightStemFilter::initialize(PyObject *module)
          {
            PyObject_SetAttrString((PyObject *) PY_TYPE(FinnishLightStemFilter), "class_", make_descriptor(FinnishLightStemFilter::initializeClass, 1));
            PyObject_SetAttrString((PyObject *) PY_TYPE(FinnishLightStemFilter), "wrapfn_", make_descriptor(t_FinnishLightStemFilter::wrap_jobject));
            PyObject_SetAttrString((PyObject *) PY_TYPE(FinnishLightStemFilter), "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_FinnishLightStemFilter_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, FinnishLightStemFilter::initializeClass, 1)))
              return NULL;
            return t_FinnishLightStemFilter::wrap_Object(FinnishLightStemFilter(((t_FinnishLightStemFilter *) arg)->object.this$));
          }
          static PyObject *t_FinnishLightStemFilter_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, FinnishLightStemFilter::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_FinnishLightStemFilter_init_(t_FinnishLightStemFilter *self, PyObject *args, PyObject *kwds)
          {
            ::org::apache::lucene::analysis::TokenStream a0((jobject) NULL);
            FinnishLightStemFilter object((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::analysis::TokenStream::initializeClass, &a0))
            {
              INT_CALL(object = FinnishLightStemFilter(a0));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_FinnishLightStemFilter_incrementToken(t_FinnishLightStemFilter *self, PyObject *args)
          {
            jboolean result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.incrementToken());
              Py_RETURN_BOOL(result);
            }

            return callSuper(PY_TYPE(FinnishLightStemFilter), (PyObject *) self, "incrementToken", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queryparser/flexible/standard/processors/TermRangeQueryNodeProcessor.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace standard {
            namespace processors {

              ::java::lang::Class *TermRangeQueryNodeProcessor::class$ = NULL;
              jmethodID *TermRangeQueryNodeProcessor::mids$ = NULL;
              bool TermRangeQueryNodeProcessor::live$ = false;

              jclass TermRangeQueryNodeProcessor::initializeClass(bool getOnly)
              {
                if (getOnly)
                  return (jclass) (live$ ? class$->this$ : NULL);
                if (class$ == NULL)
                {
                  jclass cls = (jclass) env->findClass("org/apache/lucene/queryparser/flexible/standard/processors/TermRangeQueryNodeProcessor");

                  mids$ = new jmethodID[max_mid];
                  mids$[mid_init$_f2cc1bce94666404] = env->getMethodID(cls, "<init>", "()V");
                  mids$[mid_preProcessNode_9b07be8595532de7] = env->getMethodID(cls, "preProcessNode", "(Lorg/apache/lucene/queryparser/flexible/core/nodes/QueryNode;)Lorg/apache/lucene/queryparser/flexible/core/nodes/QueryNode;");
                  mids$[mid_postProcessNode_9b07be8595532de7] = env->getMethodID(cls, "postProcessNode", "(Lorg/apache/lucene/queryparser/flexible/core/nodes/QueryNode;)Lorg/apache/lucene/queryparser/flexible/core/nodes/QueryNode;");
                  mids$[mid_setChildrenOrder_e420eeaadf0bcd20] = env->getMethodID(cls, "setChildrenOrder", "(Ljava/util/List;)Ljava/util/List;");

                  class$ = new ::java::lang::Class(cls);
                  live$ = true;
                }
                return (jclass) class$->this$;
              }

              TermRangeQueryNodeProcessor::TermRangeQueryNodeProcessor() : ::org::apache::lucene::queryparser::flexible::core::processors::QueryNodeProcessorImpl(env->newObject(initializeClass, &mids$, mid_init$_f2cc1bce94666404)) {}
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace standard {
            namespace processors {
              static PyObject *t_TermRangeQueryNodeProcessor_cast_(PyTypeObject *type, PyObject *arg);
              static PyObject *t_TermRangeQueryNodeProcessor_instance_(PyTypeObject *type, PyObject *arg);
              static int t_TermRangeQueryNodeProcessor_init_(t_TermRangeQueryNodeProcessor *self, PyObject *args, PyObject *kwds);

              static PyMethodDef t_TermRangeQueryNodeProcessor__methods_[] = {
                DECLARE_METHOD(t_TermRangeQueryNodeProcessor, cast_, METH_O | METH_CLASS),
                DECLARE_METHOD(t_TermRangeQueryNodeProcessor, instance_, METH_O | METH_CLASS),
                { NULL, NULL, 0, NULL }
              };

              static PyType_Slot PY_TYPE_SLOTS(TermRangeQueryNodeProcessor)[] = {
                { Py_tp_methods, t_TermRangeQueryNodeProcessor__methods_ },
                { Py_tp_init, (void *) t_TermRangeQueryNodeProcessor_init_ },
                { 0, NULL }
              };

              static PyType_Def *PY_TYPE_BASES(TermRangeQueryNodeProcessor)[] = {
                &PY_TYPE_DEF(::org::apache::lucene::queryparser::flexible::core::processors::QueryNodeProcessorImpl),
                NULL
              };

              DEFINE_TYPE(TermRangeQueryNodeProcessor, t_TermRangeQueryNodeProcessor, TermRangeQueryNodeProcessor);

              void t_TermRangeQueryNodeProcessor::install(PyObject *module)
              {
                installType(&PY_TYPE(TermRangeQueryNodeProcessor), &PY_TYPE_DEF(TermRangeQueryNodeProcessor), module, "TermRangeQueryNodeProcessor", 0);
              }

              void t_TermRangeQueryNodeProcessor::initialize(PyObject *module)
              {
                PyObject_SetAttrString((PyObject *) PY_TYPE(TermRangeQueryNodeProcessor), "class_", make_descriptor(TermRangeQueryNodeProcessor::initializeClass, 1));
                PyObject_SetAttrString((PyObject *) PY_TYPE(TermRangeQueryNodeProcessor), "wrapfn_", make_descriptor(t_TermRangeQueryNodeProcessor::wrap_jobject));
                PyObject_SetAttrString((PyObject *) PY_TYPE(TermRangeQueryNodeProcessor), "boxfn_", make_descriptor(boxObject));
              }

              static PyObject *t_TermRangeQueryNodeProcessor_cast_(PyTypeObject *type, PyObject *arg)
              {
                if (!(arg = castCheck(arg, TermRangeQueryNodeProcessor::initializeClass, 1)))
                  return NULL;
                return t_TermRangeQueryNodeProcessor::wrap_Object(TermRangeQueryNodeProcessor(((t_TermRangeQueryNodeProcessor *) arg)->object.this$));
              }
              static PyObject *t_TermRangeQueryNodeProcessor_instance_(PyTypeObject *type, PyObject *arg)
              {
                if (!castCheck(arg, TermRangeQueryNodeProcessor::initializeClass, 0))
                  Py_RETURN_FALSE;
                Py_RETURN_TRUE;
              }

              static int t_TermRangeQueryNodeProcessor_init_(t_TermRangeQueryNodeProcessor *self, PyObject *args, PyObject *kwds)
              {
                TermRangeQueryNodeProcessor object((jobject) NULL);

                INT_CALL(object = TermRangeQueryNodeProcessor());
                self->object = object;

                return 0;
              }
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/util/packed/PackedInts$Writer.h"
#include "java/io/IOException.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        namespace packed {

          ::java::lang::Class *PackedInts$Writer::class$ = NULL;
          jmethodID *PackedInts$Writer::mids$ = NULL;
          bool PackedInts$Writer::live$ = false;

          jclass PackedInts$Writer::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/util/packed/PackedInts$Writer");

              mids$ = new jmethodID[max_mid];
              mids$[mid_add_9c778c9bce6694df] = env->getMethodID(cls, "add", "(J)V");
              mids$[mid_bitsPerValue_9972fcc56b44e79d] = env->getMethodID(cls, "bitsPerValue", "()I");
              mids$[mid_finish_f2cc1bce94666404] = env->getMethodID(cls, "finish", "()V");
              mids$[mid_ord_9972fcc56b44e79d] = env->getMethodID(cls, "ord", "()I");
              mids$[mid_getFormat_19338728cfc4522e] = env->getMethodID(cls, "getFormat", "()Lorg/apache/lucene/util/packed/PackedInts$Format;");

              class$ = new ::java::lang::Class(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          void PackedInts$Writer::add(jlong a0) const
          {
            env->callVoidMethod(this$, mids$[mid_add_9c778c9bce6694df], a0);
          }

          jint PackedInts$Writer::bitsPerValue() const
          {
            return env->callIntMethod(this$, mids$[mid_bitsPerValue_9972fcc56b44e79d]);
          }

          void PackedInts$Writer::finish() const
          {
            env->callVoidMethod(this$, mids$[mid_finish_f2cc1bce94666404]);
          }

          jint PackedInts$Writer::ord() const
          {
            return env->callIntMethod(this$, mids$[mid_ord_9972fcc56b44e79d]);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        namespace packed {
          static PyObject *t_PackedInts$Writer_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_PackedInts$Writer_instance_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_PackedInts$Writer_add(t_PackedInts$Writer *self, PyObject *arg);
          static PyObject *t_PackedInts$Writer_bitsPerValue(t_PackedInts$Writer *self);
          static PyObject *t_PackedInts$Writer_finish(t_PackedInts$Writer *self);
          static PyObject *t_PackedInts$Writer_ord(t_PackedInts$Writer *self);

          static PyMethodDef t_PackedInts$Writer__methods_[] = {
            DECLARE_METHOD(t_PackedInts$Writer, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_PackedInts$Writer, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_PackedInts$Writer, add, METH_O),
            DECLARE_METHOD(t_PackedInts$Writer, bitsPerValue, METH_NOARGS),
            DECLARE_METHOD(t_PackedInts$Writer, finish, METH_NOARGS),
            DECLARE_METHOD(t_PackedInts$Writer, ord, METH_NOARGS),
            { NULL, NULL, 0, NULL }
          };

          static PyType_Slot PY_TYPE_SLOTS(PackedInts$Writer)[] = {
            { Py_tp_methods, t_PackedInts$Writer__methods_ },
            { Py_tp_init, (void *) abstract_init },
            { 0, NULL }
          };

          static PyType_Def *PY_TYPE_BASES(PackedInts$Writer)[] = {
            &PY_TYPE_DEF(::java::lang::Object),
            NULL
          };

          DEFINE_TYPE(PackedInts$Writer, t_PackedInts$Writer, PackedInts$Writer);

          void t_PackedInts$Writer::install(PyObject *module)
          {
            installType(&PY_TYPE(PackedInts$Writer), &PY_TYPE_DEF(PackedInts$Writer), module, "PackedInts$Writer", 0);
          }

          void t_PackedInts$Writer::initialize(PyObject *module)
          {
            PyObject_SetAttrString((PyObject *) PY_TYPE(PackedInts$Writer), "class_", make_descriptor(PackedInts$Writer::initializeClass, 1));
            PyObject_SetAttrString((PyObject *) PY_TYPE(PackedInts$Writer), "wrapfn_", make_descriptor(t_PackedInts$Writer::wrap_jobject));
            PyObject_SetAttrString((PyObject *) PY_TYPE(PackedInts$Writer), "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_PackedInts$Writer_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, PackedInts$Writer::initializeClass, 1)))
              return NULL;
            return t_PackedInts$Writer::wrap_Object(PackedInts$Writer(((t_PackedInts$Writer *) arg)->object.this$));
          }
          static PyObject *t_PackedInts$Writer_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, PackedInts$Writer::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static PyObject *t_PackedInts$Writer_add(t_PackedInts$Writer *self, PyObject *arg)
          {
            jlong a0;

            if (!parseArg(arg, "J", &a0))
            {
              OBJ_CALL(self->object.add(a0));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError((PyObject *) self, "add", arg);
            return NULL;
          }

          static PyObject *t_PackedInts$Writer_bitsPerValue(t_PackedInts$Writer *self)
          {
            jint result;
            OBJ_CALL(result = self->object.bitsPerValue());
            return PyLong_FromLong((long) result);
          }

          static PyObject *t_PackedInts$Writer_finish(t_PackedInts$Writer *self)
          {
            OBJ_CALL(self->object.finish());
            Py_RETURN_NONE;
          }

          static PyObject *t_PackedInts$Writer_ord(t_PackedInts$Writer *self)
          {
            jint result;
            OBJ_CALL(result = self->object.ord());
            return PyLong_FromLong((long) result);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/codecs/lucene70/Lucene70SegmentInfoFormat.h"
#include "org/apache/lucene/store/IOContext.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/store/Directory.h"
#include "java/lang/String.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/index/SegmentInfo.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace codecs {
        namespace lucene70 {

          ::java::lang::Class *Lucene70SegmentInfoFormat::class$ = NULL;
          jmethodID *Lucene70SegmentInfoFormat::mids$ = NULL;
          bool Lucene70SegmentInfoFormat::live$ = false;
          ::java::lang::String *Lucene70SegmentInfoFormat::SI_EXTENSION = NULL;

          jclass Lucene70SegmentInfoFormat::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/codecs/lucene70/Lucene70SegmentInfoFormat");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_f2cc1bce94666404] = env->getMethodID(cls, "<init>", "()V");
              mids$[mid_read_ca83998f161c8fae] = env->getMethodID(cls, "read", "(Lorg/apache/lucene/store/Directory;Ljava/lang/String;[BLorg/apache/lucene/store/IOContext;)Lorg/apache/lucene/index/SegmentInfo;");
              mids$[mid_write_42bd8d9f441f9252] = env->getMethodID(cls, "write", "(Lorg/apache/lucene/store/Directory;Lorg/apache/lucene/index/SegmentInfo;Lorg/apache/lucene/store/IOContext;)V");

              class$ = new ::java::lang::Class(cls);
              cls = (jclass) class$->this$;

              SI_EXTENSION = new ::java::lang::String(env->getStaticObjectField(cls, "SI_EXTENSION", "Ljava/lang/String;"));
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          Lucene70SegmentInfoFormat::Lucene70SegmentInfoFormat() : ::org::apache::lucene::codecs::SegmentInfoFormat(env->newObject(initializeClass, &mids$, mid_init$_f2cc1bce94666404)) {}

          ::org::apache::lucene::index::SegmentInfo Lucene70SegmentInfoFormat::read(const ::org::apache::lucene::store::Directory & a0, const ::java::lang::String & a1, const JArray< jbyte > & a2, const ::org::apache::lucene::store::IOContext & a3) const
          {
            return ::org::apache::lucene::index::SegmentInfo(env->callObjectMethod(this$, mids$[mid_read_ca83998f161c8fae], a0.this$, a1.this$, a2.this$, a3.this$));
          }

          void Lucene70SegmentInfoFormat::write(const ::org::apache::lucene::store::Directory & a0, const ::org::apache::lucene::index::SegmentInfo & a1, const ::org::apache::lucene::store::IOContext & a2) const
          {
            env->callVoidMethod(this$, mids$[mid_write_42bd8d9f441f9252], a0.this$, a1.this$, a2.this$);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace codecs {
        namespace lucene70 {
          static PyObject *t_Lucene70SegmentInfoFormat_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_Lucene70SegmentInfoFormat_instance_(PyTypeObject *type, PyObject *arg);
          static int t_Lucene70SegmentInfoFormat_init_(t_Lucene70SegmentInfoFormat *self, PyObject *args, PyObject *kwds);
          static PyObject *t_Lucene70SegmentInfoFormat_read(t_Lucene70SegmentInfoFormat *self, PyObject *args);
          static PyObject *t_Lucene70SegmentInfoFormat_write(t_Lucene70SegmentInfoFormat *self, PyObject *args);

          static PyMethodDef t_Lucene70SegmentInfoFormat__methods_[] = {
            DECLARE_METHOD(t_Lucene70SegmentInfoFormat, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_Lucene70SegmentInfoFormat, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_Lucene70SegmentInfoFormat, read, METH_VARARGS),
            DECLARE_METHOD(t_Lucene70SegmentInfoFormat, write, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          static PyType_Slot PY_TYPE_SLOTS(Lucene70SegmentInfoFormat)[] = {
            { Py_tp_methods, t_Lucene70SegmentInfoFormat__methods_ },
            { Py_tp_init, (void *) t_Lucene70SegmentInfoFormat_init_ },
            { 0, NULL }
          };

          static PyType_Def *PY_TYPE_BASES(Lucene70SegmentInfoFormat)[] = {
            &PY_TYPE_DEF(::org::apache::lucene::codecs::SegmentInfoFormat),
            NULL
          };

          DEFINE_TYPE(Lucene70SegmentInfoFormat, t_Lucene70SegmentInfoFormat, Lucene70SegmentInfoFormat);

          void t_Lucene70SegmentInfoFormat::install(PyObject *module)
          {
            installType(&PY_TYPE(Lucene70SegmentInfoFormat), &PY_TYPE_DEF(Lucene70SegmentInfoFormat), module, "Lucene70SegmentInfoFormat", 0);
          }

          void t_Lucene70SegmentInfoFormat::initialize(PyObject *module)
          {
            PyObject_SetAttrString((PyObject *) PY_TYPE(Lucene70SegmentInfoFormat), "class_", make_descriptor(Lucene70SegmentInfoFormat::initializeClass, 1));
            PyObject_SetAttrString((PyObject *) PY_TYPE(Lucene70SegmentInfoFormat), "wrapfn_", make_descriptor(t_Lucene70SegmentInfoFormat::wrap_jobject));
            PyObject_SetAttrString((PyObject *) PY_TYPE(Lucene70SegmentInfoFormat), "boxfn_", make_descriptor(boxObject));
            env->getClass(Lucene70SegmentInfoFormat::initializeClass);
            PyObject_SetAttrString((PyObject *) PY_TYPE(Lucene70SegmentInfoFormat), "SI_EXTENSION", make_descriptor(j2p(*Lucene70SegmentInfoFormat::SI_EXTENSION)));
          }

          static PyObject *t_Lucene70SegmentInfoFormat_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, Lucene70SegmentInfoFormat::initializeClass, 1)))
              return NULL;
            return t_Lucene70SegmentInfoFormat::wrap_Object(Lucene70SegmentInfoFormat(((t_Lucene70SegmentInfoFormat *) arg)->object.this$));
          }
          static PyObject *t_Lucene70SegmentInfoFormat_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, Lucene70SegmentInfoFormat::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_Lucene70SegmentInfoFormat_init_(t_Lucene70SegmentInfoFormat *self, PyObject *args, PyObject *kwds)
          {
            Lucene70SegmentInfoFormat object((jobject) NULL);

            INT_CALL(object = Lucene70SegmentInfoFormat());
            self->object = object;

            return 0;
          }

          static PyObject *t_Lucene70SegmentInfoFormat_read(t_Lucene70SegmentInfoFormat *self, PyObject *args)
          {
            ::org::apache::lucene::store::Directory a0((jobject) NULL);
            ::java::lang::String a1((jobject) NULL);
            JArray< jbyte > a2((jobject) NULL);
            ::org::apache::lucene::store::IOContext a3((jobject) NULL);
            ::org::apache::lucene::index::SegmentInfo result((jobject) NULL);

            if (!parseArgs(args, "ks[Bk", ::org::apache::lucene::store::Directory::initializeClass, ::org::apache::lucene::store::IOContext::initializeClass, &a0, &a1, &a2, &a3))
            {
              OBJ_CALL(result = self->object.read(a0, a1, a2, a3));
              return ::org::apache::lucene::index::t_SegmentInfo::wrap_Object(result);
            }

            return callSuper(PY_TYPE(Lucene70SegmentInfoFormat), (PyObject *) self, "read", args, 2);
          }

          static PyObject *t_Lucene70SegmentInfoFormat_write(t_Lucene70SegmentInfoFormat *self, PyObject *args)
          {
            ::org::apache::lucene::store::Directory a0((jobject) NULL);
            ::org::apache::lucene::index::SegmentInfo a1((jobject) NULL);
            ::org::apache::lucene::store::IOContext a2((jobject) NULL);

            if (!parseArgs(args, "kkk", ::org::apache::lucene::store::Directory::initializeClass, ::org::apache::lucene::index::SegmentInfo::initializeClass, ::org::apache::lucene::store::IOContext::initializeClass, &a0, &a1, &a2))
            {
              OBJ_CALL(self->object.write(a0, a1, a2));
              Py_RETURN_NONE;
            }

            return callSuper(PY_TYPE(Lucene70SegmentInfoFormat), (PyObject *) self, "write", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/FilterWeight.h"
#include "org/apache/lucene/index/LeafReaderContext.h"
#include "org/apache/lucene/index/Term.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/search/Explanation.h"
#include "org/apache/lucene/search/Scorer.h"
#include "java/util/Set.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/search/Matches.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {

        ::java::lang::Class *FilterWeight::class$ = NULL;
        jmethodID *FilterWeight::mids$ = NULL;
        bool FilterWeight::live$ = false;

        jclass FilterWeight::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/search/FilterWeight");

            mids$ = new jmethodID[max_mid];
            mids$[mid_explain_4cf8bab0b7954f4a] = env->getMethodID(cls, "explain", "(Lorg/apache/lucene/index/LeafReaderContext;I)Lorg/apache/lucene/search/Explanation;");
            mids$[mid_extractTerms_d5a4a8d4b806f0ba] = env->getMethodID(cls, "extractTerms", "(Ljava/util/Set;)V");
            mids$[mid_isCacheable_07cae694a8cf1c6d] = env->getMethodID(cls, "isCacheable", "(Lorg/apache/lucene/index/LeafReaderContext;)Z");
            mids$[mid_matches_a177ac6f01316d86] = env->getMethodID(cls, "matches", "(Lorg/apache/lucene/index/LeafReaderContext;I)Lorg/apache/lucene/search/Matches;");
            mids$[mid_scorer_4046a1267922adae] = env->getMethodID(cls, "scorer", "(Lorg/apache/lucene/index/LeafReaderContext;)Lorg/apache/lucene/search/Scorer;");

            class$ = new ::java::lang::Class(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        ::org::apache::lucene::search::Explanation FilterWeight::explain(const ::org::apache::lucene::index::LeafReaderContext & a0, jint a1) const
        {
          return ::org::apache::lucene::search::Explanation(env->callObjectMethod(this$, mids$[mid_explain_4cf8bab0b7954f4a], a0.this$, a1));
        }

        void FilterWeight::extractTerms(const ::java::util::Set & a0) const
        {
          env->callVoidMethod(this$, mids$[mid_extractTerms_d5a4a8d4b806f0ba], a0.this$);
        }

        jboolean FilterWeight::isCacheable(const ::org::apache::lucene::index::LeafReaderContext & a0) const
        {
          return env->callBooleanMethod(this$, mids$[mid_isCacheable_07cae694a8cf1c6d], a0.this$);
        }

        ::org::apache::lucene::search::Matches FilterWeight::matches(const ::org::apache::lucene::index::LeafReaderContext & a0, jint a1) const
        {
          return ::org::apache::lucene::search::Matches(env->callObjectMethod(this$, mids$[mid_matches_a177ac6f01316d86], a0.this$, a1));
        }

        ::org::apache::lucene::search::Scorer FilterWeight::scorer(const ::org::apache::lucene::index::LeafReaderContext & a0) const
        {
          return ::org::apache::lucene::search::Scorer(env->callObjectMethod(this$, mids$[mid_scorer_4046a1267922adae], a0.this$));
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        static PyObject *t_FilterWeight_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_FilterWeight_instance_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_FilterWeight_explain(t_FilterWeight *self, PyObject *args);
        static PyObject *t_FilterWeight_extractTerms(t_FilterWeight *self, PyObject *args);
        static PyObject *t_FilterWeight_isCacheable(t_FilterWeight *self, PyObject *args);
        static PyObject *t_FilterWeight_matches(t_FilterWeight *self, PyObject *args);
        static PyObject *t_FilterWeight_scorer(t_FilterWeight *self, PyObject *args);

        static PyMethodDef t_FilterWeight__methods_[] = {
          DECLARE_METHOD(t_FilterWeight, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_FilterWeight, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_FilterWeight, explain, METH_VARARGS),
          DECLARE_METHOD(t_FilterWeight, extractTerms, METH_VARARGS),
          DECLARE_METHOD(t_FilterWeight, isCacheable, METH_VARARGS),
          DECLARE_METHOD(t_FilterWeight, matches, METH_VARARGS),
          DECLARE_METHOD(t_FilterWeight, scorer, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        static PyType_Slot PY_TYPE_SLOTS(FilterWeight)[] = {
          { Py_tp_methods, t_FilterWeight__methods_ },
          { Py_tp_init, (void *) abstract_init },
          { 0, NULL }
        };

        static PyType_Def *PY_TYPE_BASES(FilterWeight)[] = {
          &PY_TYPE_DEF(::org::apache::lucene::search::Weight),
          NULL
        };

        DEFINE_TYPE(FilterWeight, t_FilterWeight, FilterWeight);

        void t_FilterWeight::install(PyObject *module)
        {
          installType(&PY_TYPE(FilterWeight), &PY_TYPE_DEF(FilterWeight), module, "FilterWeight", 0);
        }

        void t_FilterWeight::initialize(PyObject *module)
        {
          PyObject_SetAttrString((PyObject *) PY_TYPE(FilterWeight), "class_", make_descriptor(FilterWeight::initializeClass, 1));
          PyObject_SetAttrString((PyObject *) PY_TYPE(FilterWeight), "wrapfn_", make_descriptor(t_FilterWeight::wrap_jobject));
          PyObject_SetAttrString((PyObject *) PY_TYPE(FilterWeight), "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_FilterWeight_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, FilterWeight::initializeClass, 1)))
            return NULL;
          return t_FilterWeight::wrap_Object(FilterWeight(((t_FilterWeight *) arg)->object.this$));
        }
        static PyObject *t_FilterWeight_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, FilterWeight::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static PyObject *t_FilterWeight_explain(t_FilterWeight *self, PyObject *args)
        {
          ::org::apache::lucene::index::LeafReaderContext a0((jobject) NULL);
          jint a1;
          ::org::apache::lucene::search::Explanation result((jobject) NULL);

          if (!parseArgs(args, "kI", ::org::apache::lucene::index::LeafReaderContext::initializeClass, &a0, &a1))
          {
            OBJ_CALL(result = self->object.explain(a0, a1));
            return ::org::apache::lucene::search::t_Explanation::wrap_Object(result);
          }

          return callSuper(PY_TYPE(FilterWeight), (PyObject *) self, "explain", args, 2);
        }

        static PyObject *t_FilterWeight_extractTerms(t_FilterWeight *self, PyObject *args)
        {
          ::java::util::Set a0((jobject) NULL);
          PyTypeObject **p0;

          if (!parseArgs(args, "K", ::java::util::Set::initializeClass, &a0, &p0, ::java::util::t_Set::parameters_))
          {
            OBJ_CALL(self->object.extractTerms(a0));
            Py_RETURN_NONE;
          }

          return callSuper(PY_TYPE(FilterWeight), (PyObject *) self, "extractTerms", args, 2);
        }

        static PyObject *t_FilterWeight_isCacheable(t_FilterWeight *self, PyObject *args)
        {
          ::org::apache::lucene::index::LeafReaderContext a0((jobject) NULL);
          jboolean result;

          if (!parseArgs(args, "k", ::org::apache::lucene::index::LeafReaderContext::initializeClass, &a0))
          {
            OBJ_CALL(result = self->object.isCacheable(a0));
            Py_RETURN_BOOL(result);
          }

          return callSuper(PY_TYPE(FilterWeight), (PyObject *) self, "isCacheable", args, 2);
        }

        static PyObject *t_FilterWeight_matches(t_FilterWeight *self, PyObject *args)
        {
          ::org::apache::lucene::index::LeafReaderContext a0((jobject) NULL);
          jint a1;
          ::org::apache::lucene::search::Matches result((jobject) NULL);

          if (!parseArgs(args, "kI", ::org::apache::lucene::index::LeafReaderContext::initializeClass, &a0, &a1))
          {
            OBJ_CALL(result = self->object.matches(a0, a1));
            return ::org::apache::lucene::search::t_Matches::wrap_Object(result);
          }

          return callSuper(PY_TYPE(FilterWeight), (PyObject *) self, "matches", args, 2);
        }

        static PyObject *t_FilterWeight_scorer(t_FilterWeight *self, PyObject *args)
        {
          ::org::apache::lucene::index::LeafReaderContext a0((jobject) NULL);
          ::org::apache::lucene::search::Scorer result((jobject) NULL);

          if (!parseArgs(args, "k", ::org::apache::lucene::index::LeafReaderContext::initializeClass, &a0))
          {
            OBJ_CALL(result = self->object.scorer(a0));
            return ::org::apache::lucene::search::t_Scorer::wrap_Object(result);
          }

          return callSuper(PY_TYPE(FilterWeight), (PyObject *) self, "scorer", args, 2);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/uhighlight/NoOpOffsetStrategy.h"
#include "org/apache/lucene/search/uhighlight/UnifiedHighlighter$OffsetSource.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/index/LeafReader.h"
#include "org/apache/lucene/search/uhighlight/OffsetsEnum.h"
#include "org/apache/lucene/search/uhighlight/NoOpOffsetStrategy.h"
#include "java/lang/String.h"
#include "java/io/IOException.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace uhighlight {

          ::java::lang::Class *NoOpOffsetStrategy::class$ = NULL;
          jmethodID *NoOpOffsetStrategy::mids$ = NULL;
          bool NoOpOffsetStrategy::live$ = false;
          NoOpOffsetStrategy *NoOpOffsetStrategy::INSTANCE = NULL;

          jclass NoOpOffsetStrategy::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/search/uhighlight/NoOpOffsetStrategy");

              mids$ = new jmethodID[max_mid];
              mids$[mid_getOffsetSource_d592a7a3fc9567b1] = env->getMethodID(cls, "getOffsetSource", "()Lorg/apache/lucene/search/uhighlight/UnifiedHighlighter$OffsetSource;");
              mids$[mid_getOffsetsEnum_55596ccb3f6b81ab] = env->getMethodID(cls, "getOffsetsEnum", "(Lorg/apache/lucene/index/LeafReader;ILjava/lang/String;)Lorg/apache/lucene/search/uhighlight/OffsetsEnum;");

              class$ = new ::java::lang::Class(cls);
              cls = (jclass) class$->this$;

              INSTANCE = new NoOpOffsetStrategy(env->getStaticObjectField(cls, "INSTANCE", "Lorg/apache/lucene/search/uhighlight/NoOpOffsetStrategy;"));
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          ::org::apache::lucene::search::uhighlight::UnifiedHighlighter$OffsetSource NoOpOffsetStrategy::getOffsetSource() const
          {
            return ::org::apache::lucene::search::uhighlight::UnifiedHighlighter$OffsetSource(env->callObjectMethod(this$, mids$[mid_getOffsetSource_d592a7a3fc9567b1]));
          }

          ::org::apache::lucene::search::uhighlight::OffsetsEnum NoOpOffsetStrategy::getOffsetsEnum(const ::org::apache::lucene::index::LeafReader & a0, jint a1, const ::java::lang::String & a2) const
          {
            return ::org::apache::lucene::search::uhighlight::OffsetsEnum(env->callObjectMethod(this$, mids$[mid_getOffsetsEnum_55596ccb3f6b81ab], a0.this$, a1, a2.this$));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace uhighlight {
          static PyObject *t_NoOpOffsetStrategy_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_NoOpOffsetStrategy_instance_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_NoOpOffsetStrategy_getOffsetSource(t_NoOpOffsetStrategy *self, PyObject *args);
          static PyObject *t_NoOpOffsetStrategy_getOffsetsEnum(t_NoOpOffsetStrategy *self, PyObject *args);
          static PyObject *t_NoOpOffsetStrategy_get__offsetSource(t_NoOpOffsetStrategy *self, void *data);
          static PyGetSetDef t_NoOpOffsetStrategy__fields_[] = {
            DECLARE_GET_FIELD(t_NoOpOffsetStrategy, offsetSource),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_NoOpOffsetStrategy__methods_[] = {
            DECLARE_METHOD(t_NoOpOffsetStrategy, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_NoOpOffsetStrategy, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_NoOpOffsetStrategy, getOffsetSource, METH_VARARGS),
            DECLARE_METHOD(t_NoOpOffsetStrategy, getOffsetsEnum, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          static PyType_Slot PY_TYPE_SLOTS(NoOpOffsetStrategy)[] = {
            { Py_tp_methods, t_NoOpOffsetStrategy__methods_ },
            { Py_tp_init, (void *) abstract_init },
            { Py_tp_getset, t_NoOpOffsetStrategy__fields_ },
            { 0, NULL }
          };

          static PyType_Def *PY_TYPE_BASES(NoOpOffsetStrategy)[] = {
            &PY_TYPE_DEF(::org::apache::lucene::search::uhighlight::FieldOffsetStrategy),
            NULL
          };

          DEFINE_TYPE(NoOpOffsetStrategy, t_NoOpOffsetStrategy, NoOpOffsetStrategy);

          void t_NoOpOffsetStrategy::install(PyObject *module)
          {
            installType(&PY_TYPE(NoOpOffsetStrategy), &PY_TYPE_DEF(NoOpOffsetStrategy), module, "NoOpOffsetStrategy", 0);
          }

          void t_NoOpOffsetStrategy::initialize(PyObject *module)
          {
            PyObject_SetAttrString((PyObject *) PY_TYPE(NoOpOffsetStrategy), "class_", make_descriptor(NoOpOffsetStrategy::initializeClass, 1));
            PyObject_SetAttrString((PyObject *) PY_TYPE(NoOpOffsetStrategy), "wrapfn_", make_descriptor(t_NoOpOffsetStrategy::wrap_jobject));
            PyObject_SetAttrString((PyObject *) PY_TYPE(NoOpOffsetStrategy), "boxfn_", make_descriptor(boxObject));
            env->getClass(NoOpOffsetStrategy::initializeClass);
            PyObject_SetAttrString((PyObject *) PY_TYPE(NoOpOffsetStrategy), "INSTANCE", make_descriptor(t_NoOpOffsetStrategy::wrap_Object(*NoOpOffsetStrategy::INSTANCE)));
          }

          static PyObject *t_NoOpOffsetStrategy_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, NoOpOffsetStrategy::initializeClass, 1)))
              return NULL;
            return t_NoOpOffsetStrategy::wrap_Object(NoOpOffsetStrategy(((t_NoOpOffsetStrategy *) arg)->object.this$));
          }
          static PyObject *t_NoOpOffsetStrategy_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, NoOpOffsetStrategy::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static PyObject *t_NoOpOffsetStrategy_getOffsetSource(t_NoOpOffsetStrategy *self, PyObject *args)
          {
            ::org::apache::lucene::search::uhighlight::UnifiedHighlighter$OffsetSource result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.getOffsetSource());
              return ::org::apache::lucene::search::uhighlight::t_UnifiedHighlighter$OffsetSource::wrap_Object(result);
            }

            return callSuper(PY_TYPE(NoOpOffsetStrategy), (PyObject *) self, "getOffsetSource", args, 2);
          }

          static PyObject *t_NoOpOffsetStrategy_getOffsetsEnum(t_NoOpOffsetStrategy *self, PyObject *args)
          {
            ::org::apache::lucene::index::LeafReader a0((jobject) NULL);
            jint a1;
            ::java::lang::String a2((jobject) NULL);
            ::org::apache::lucene::search::uhighlight::OffsetsEnum result((jobject) NULL);

            if (!parseArgs(args, "kIs", ::org::apache::lucene::index::LeafReader::initializeClass, &a0, &a1, &a2))
            {
              OBJ_CALL(result = self->object.getOffsetsEnum(a0, a1, a2));
              return ::org::apache::lucene::search::uhighlight::t_OffsetsEnum::wrap_Object(result);
            }

            return callSuper(PY_TYPE(NoOpOffsetStrategy), (PyObject *) self, "getOffsetsEnum", args, 2);
          }

          static PyObject *t_NoOpOffsetStrategy_get__offsetSource(t_NoOpOffsetStrategy *self, void *data)
          {
            ::org::apache::lucene::search::uhighlight::UnifiedHighlighter$OffsetSource value((jobject) NULL);
            OBJ_CALL(value = self->object.getOffsetSource());
            return ::org::apache::lucene::search::uhighlight::t_UnifiedHighlighter$OffsetSource::wrap_Object(value);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queryparser/flexible/core/nodes/RangeQueryNode.h"
#include "java/lang/Object.h"
#include "org/apache/lucene/queryparser/flexible/core/nodes/FieldValuePairQueryNode.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace core {
            namespace nodes {

              ::java::lang::Class *RangeQueryNode::class$ = NULL;
              jmethodID *RangeQueryNode::mids$ = NULL;
              bool RangeQueryNode::live$ = false;

              jclass RangeQueryNode::initializeClass(bool getOnly)
              {
                if (getOnly)
                  return (jclass) (live$ ? class$->this$ : NULL);
                if (class$ == NULL)
                {
                  jclass cls = (jclass) env->findClass("org/apache/lucene/queryparser/flexible/core/nodes/RangeQueryNode");

                  mids$ = new jmethodID[max_mid];
                  mids$[mid_getLowerBound_28e9192a65eb7516] = env->getMethodID(cls, "getLowerBound", "()Lorg/apache/lucene/queryparser/flexible/core/nodes/FieldValuePairQueryNode;");
                  mids$[mid_getUpperBound_28e9192a65eb7516] = env->getMethodID(cls, "getUpperBound", "()Lorg/apache/lucene/queryparser/flexible/core/nodes/FieldValuePairQueryNode;");
                  mids$[mid_isLowerInclusive_8454bd5aa23fd11e] = env->getMethodID(cls, "isLowerInclusive", "()Z");
                  mids$[mid_isUpperInclusive_8454bd5aa23fd11e] = env->getMethodID(cls, "isUpperInclusive", "()Z");

                  class$ = new ::java::lang::Class(cls);
                  live$ = true;
                }
                return (jclass) class$->this$;
              }

              ::org::apache::lucene::queryparser::flexible::core::nodes::FieldValuePairQueryNode RangeQueryNode::getLowerBound() const
              {
                return ::org::apache::lucene::queryparser::flexible::core::nodes::FieldValuePairQueryNode(env->callObjectMethod(this$, mids$[mid_getLowerBound_28e9192a65eb7516]));
              }

              ::org::apache::lucene::queryparser::flexible::core::nodes::FieldValuePairQueryNode RangeQueryNode::getUpperBound() const
              {
                return ::org::apache::lucene::queryparser::flexible::core::nodes::FieldValuePairQueryNode(env->callObjectMethod(this$, mids$[mid_getUpperBound_28e9192a65eb7516]));
              }

              jboolean RangeQueryNode::isLowerInclusive() const
              {
                return env->callBooleanMethod(this$, mids$[mid_isLowerInclusive_8454bd5aa23fd11e]);
              }

              jboolean RangeQueryNode::isUpperInclusive() const
              {
                return env->callBooleanMethod(this$, mids$[mid_isUpperInclusive_8454bd5aa23fd11e]);
              }
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace core {
            namespace nodes {
              static PyObject *t_RangeQueryNode_cast_(PyTypeObject *type, PyObject *arg);
              static PyObject *t_RangeQueryNode_instance_(PyTypeObject *type, PyObject *arg);
              static PyObject *t_RangeQueryNode_of_(t_RangeQueryNode *self, PyObject *args);
              static PyObject *t_RangeQueryNode_getLowerBound(t_RangeQueryNode *self);
              static PyObject *t_RangeQueryNode_getUpperBound(t_RangeQueryNode *self);
              static PyObject *t_RangeQueryNode_isLowerInclusive(t_RangeQueryNode *self);
              static PyObject *t_RangeQueryNode_isUpperInclusive(t_RangeQueryNode *self);
              static PyObject *t_RangeQueryNode_get__lowerBound(t_RangeQueryNode *self, void *data);
              static PyObject *t_RangeQueryNode_get__lowerInclusive(t_RangeQueryNode *self, void *data);
              static PyObject *t_RangeQueryNode_get__upperBound(t_RangeQueryNode *self, void *data);
              static PyObject *t_RangeQueryNode_get__upperInclusive(t_RangeQueryNode *self, void *data);
              static PyObject *t_RangeQueryNode_get__parameters_(t_RangeQueryNode *self, void *data);
              static PyGetSetDef t_RangeQueryNode__fields_[] = {
                DECLARE_GET_FIELD(t_RangeQueryNode, lowerBound),
                DECLARE_GET_FIELD(t_RangeQueryNode, lowerInclusive),
                DECLARE_GET_FIELD(t_RangeQueryNode, upperBound),
                DECLARE_GET_FIELD(t_RangeQueryNode, upperInclusive),
                DECLARE_GET_FIELD(t_RangeQueryNode, parameters_),
                { NULL, NULL, NULL, NULL, NULL }
              };

              static PyMethodDef t_RangeQueryNode__methods_[] = {
                DECLARE_METHOD(t_RangeQueryNode, cast_, METH_O | METH_CLASS),
                DECLARE_METHOD(t_RangeQueryNode, instance_, METH_O | METH_CLASS),
                DECLARE_METHOD(t_RangeQueryNode, of_, METH_VARARGS),
                DECLARE_METHOD(t_RangeQueryNode, getLowerBound, METH_NOARGS),
                DECLARE_METHOD(t_RangeQueryNode, getUpperBound, METH_NOARGS),
                DECLARE_METHOD(t_RangeQueryNode, isLowerInclusive, METH_NOARGS),
                DECLARE_METHOD(t_RangeQueryNode, isUpperInclusive, METH_NOARGS),
                { NULL, NULL, 0, NULL }
              };

              static PyType_Slot PY_TYPE_SLOTS(RangeQueryNode)[] = {
                { Py_tp_methods, t_RangeQueryNode__methods_ },
                { Py_tp_init, (void *) abstract_init },
                { Py_tp_getset, t_RangeQueryNode__fields_ },
                { 0, NULL }
              };

              static PyType_Def *PY_TYPE_BASES(RangeQueryNode)[] = {
                &PY_TYPE_DEF(::org::apache::lucene::queryparser::flexible::core::nodes::FieldableNode),
                NULL
              };

              DEFINE_TYPE(RangeQueryNode, t_RangeQueryNode, RangeQueryNode);
              PyObject *t_RangeQueryNode::wrap_Object(const RangeQueryNode& object, PyTypeObject *p0)
              {
                PyObject *obj = t_RangeQueryNode::wrap_Object(object);
                if (obj != NULL && obj != Py_None)
                {
                  t_RangeQueryNode *self = (t_RangeQueryNode *) obj;
                  self->parameters[0] = p0;
                }
                return obj;
              }

              PyObject *t_RangeQueryNode::wrap_jobject(const jobject& object, PyTypeObject *p0)
              {
                PyObject *obj = t_RangeQueryNode::wrap_jobject(object);
                if (obj != NULL && obj != Py_None)
                {
                  t_RangeQueryNode *self = (t_RangeQueryNode *) obj;
                  self->parameters[0] = p0;
                }
                return obj;
              }

              void t_RangeQueryNode::install(PyObject *module)
              {
                installType(&PY_TYPE(RangeQueryNode), &PY_TYPE_DEF(RangeQueryNode), module, "RangeQueryNode", 0);
              }

              void t_RangeQueryNode::initialize(PyObject *module)
              {
                PyObject_SetAttrString((PyObject *) PY_TYPE(RangeQueryNode), "class_", make_descriptor(RangeQueryNode::initializeClass, 1));
                PyObject_SetAttrString((PyObject *) PY_TYPE(RangeQueryNode), "wrapfn_", make_descriptor(t_RangeQueryNode::wrap_jobject));
                PyObject_SetAttrString((PyObject *) PY_TYPE(RangeQueryNode), "boxfn_", make_descriptor(boxObject));
              }

              static PyObject *t_RangeQueryNode_cast_(PyTypeObject *type, PyObject *arg)
              {
                if (!(arg = castCheck(arg, RangeQueryNode::initializeClass, 1)))
                  return NULL;
                return t_RangeQueryNode::wrap_Object(RangeQueryNode(((t_RangeQueryNode *) arg)->object.this$));
              }
              static PyObject *t_RangeQueryNode_instance_(PyTypeObject *type, PyObject *arg)
              {
                if (!castCheck(arg, RangeQueryNode::initializeClass, 0))
                  Py_RETURN_FALSE;
                Py_RETURN_TRUE;
              }

              static PyObject *t_RangeQueryNode_of_(t_RangeQueryNode *self, PyObject *args)
              {
                if (!parseArg(args, "T", 1, &(self->parameters)))
                  Py_RETURN_SELF;
                return PyErr_SetArgsError((PyObject *) self, "of_", args);
              }

              static PyObject *t_RangeQueryNode_getLowerBound(t_RangeQueryNode *self)
              {
                ::org::apache::lucene::queryparser::flexible::core::nodes::FieldValuePairQueryNode result((jobject) NULL);
                OBJ_CALL(result = self->object.getLowerBound());
                return self->parameters[0] != NULL ? wrapType(self->parameters[0], result.this$) : ::org::apache::lucene::queryparser::flexible::core::nodes::t_FieldValuePairQueryNode::wrap_Object(result);
              }

              static PyObject *t_RangeQueryNode_getUpperBound(t_RangeQueryNode *self)
              {
                ::org::apache::lucene::queryparser::flexible::core::nodes::FieldValuePairQueryNode result((jobject) NULL);
                OBJ_CALL(result = self->object.getUpperBound());
                return self->parameters[0] != NULL ? wrapType(self->parameters[0], result.this$) : ::org::apache::lucene::queryparser::flexible::core::nodes::t_FieldValuePairQueryNode::wrap_Object(result);
              }

              static PyObject *t_RangeQueryNode_isLowerInclusive(t_RangeQueryNode *self)
              {
                jboolean result;
                OBJ_CALL(result = self->object.isLowerInclusive());
                Py_RETURN_BOOL(result);
              }

              static PyObject *t_RangeQueryNode_isUpperInclusive(t_RangeQueryNode *self)
              {
                jboolean result;
                OBJ_CALL(result = self->object.isUpperInclusive());
                Py_RETURN_BOOL(result);
              }
              static PyObject *t_RangeQueryNode_get__parameters_(t_RangeQueryNode *self, void *data)
              {
                return typeParameters(self->parameters, sizeof(self->parameters));
              }

              static PyObject *t_RangeQueryNode_get__lowerBound(t_RangeQueryNode *self, void *data)
              {
                ::org::apache::lucene::queryparser::flexible::core::nodes::FieldValuePairQueryNode value((jobject) NULL);
                OBJ_CALL(value = self->object.getLowerBound());
                return ::org::apache::lucene::queryparser::flexible::core::nodes::t_FieldValuePairQueryNode::wrap_Object(value);
              }

              static PyObject *t_RangeQueryNode_get__lowerInclusive(t_RangeQueryNode *self, void *data)
              {
                jboolean value;
                OBJ_CALL(value = self->object.isLowerInclusive());
                Py_RETURN_BOOL(value);
              }

              static PyObject *t_RangeQueryNode_get__upperBound(t_RangeQueryNode *self, void *data)
              {
                ::org::apache::lucene::queryparser::flexible::core::nodes::FieldValuePairQueryNode value((jobject) NULL);
                OBJ_CALL(value = self->object.getUpperBound());
                return ::org::apache::lucene::queryparser::flexible::core::nodes::t_FieldValuePairQueryNode::wrap_Object(value);
              }

              static PyObject *t_RangeQueryNode_get__upperInclusive(t_RangeQueryNode *self, void *data)
              {
                jboolean value;
                OBJ_CALL(value = self->object.isUpperInclusive());
                Py_RETURN_BOOL(value);
              }
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/codecs/BlockTermState.h"
#include "org/apache/lucene/index/TermState.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace codecs {

        ::java::lang::Class *BlockTermState::class$ = NULL;
        jmethodID *BlockTermState::mids$ = NULL;
        jfieldID *BlockTermState::fids$ = NULL;
        bool BlockTermState::live$ = false;

        jclass BlockTermState::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/codecs/BlockTermState");

            mids$ = new jmethodID[max_mid];
            mids$[mid_copyFrom_4291efa1cd29ac2a] = env->getMethodID(cls, "copyFrom", "(Lorg/apache/lucene/index/TermState;)V");
            mids$[mid_toString_db9b55ba01e03e4b] = env->getMethodID(cls, "toString", "()Ljava/lang/String;");

            fids$ = new jfieldID[max_fid];
            fids$[fid_blockFilePointer] = env->getFieldID(cls, "blockFilePointer", "J");
            fids$[fid_docFreq] = env->getFieldID(cls, "docFreq", "I");
            fids$[fid_termBlockOrd] = env->getFieldID(cls, "termBlockOrd", "I");
            fids$[fid_totalTermFreq] = env->getFieldID(cls, "totalTermFreq", "J");

            class$ = new ::java::lang::Class(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        void BlockTermState::copyFrom(const ::org::apache::lucene::index::TermState & a0) const
        {
          env->callVoidMethod(this$, mids$[mid_copyFrom_4291efa1cd29ac2a], a0.this$);
        }

        ::java::lang::String BlockTermState::toString() const
        {
          return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_db9b55ba01e03e4b]));
        }

        jlong BlockTermState::_get_blockFilePointer() const
        {
          return env->getLongField(this$, fids$[fid_blockFilePointer]);
        }

        void BlockTermState::_set_blockFilePointer(jlong a0) const
        {
          env->setLongField(this$, fids$[fid_blockFilePointer], a0);
        }

        jint BlockTermState::_get_docFreq() const
        {
          return env->getIntField(this$, fids$[fid_docFreq]);
        }

        void BlockTermState::_set_docFreq(jint a0) const
        {
          env->setIntField(this$, fids$[fid_docFreq], a0);
        }

        jint BlockTermState::_get_termBlockOrd() const
        {
          return env->getIntField(this$, fids$[fid_termBlockOrd]);
        }

        void BlockTermState::_set_termBlockOrd(jint a0) const
        {
          env->setIntField(this$, fids$[fid_termBlockOrd], a0);
        }

        jlong BlockTermState::_get_totalTermFreq() const
        {
          return env->getLongField(this$, fids$[fid_totalTermFreq]);
        }

        void BlockTermState::_set_totalTermFreq(jlong a0) const
        {
          env->setLongField(this$, fids$[fid_totalTermFreq], a0);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace codecs {
        static PyObject *t_BlockTermState_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_BlockTermState_instance_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_BlockTermState_copyFrom(t_BlockTermState *self, PyObject *args);
        static PyObject *t_BlockTermState_toString(t_BlockTermState *self, PyObject *args);
        static PyObject *t_BlockTermState_get__blockFilePointer(t_BlockTermState *self, void *data);
        static int t_BlockTermState_set__blockFilePointer(t_BlockTermState *self, PyObject *arg, void *data);
        static PyObject *t_BlockTermState_get__docFreq(t_BlockTermState *self, void *data);
        static int t_BlockTermState_set__docFreq(t_BlockTermState *self, PyObject *arg, void *data);
        static PyObject *t_BlockTermState_get__termBlockOrd(t_BlockTermState *self, void *data);
        static int t_BlockTermState_set__termBlockOrd(t_BlockTermState *self, PyObject *arg, void *data);
        static PyObject *t_BlockTermState_get__totalTermFreq(t_BlockTermState *self, void *data);
        static int t_BlockTermState_set__totalTermFreq(t_BlockTermState *self, PyObject *arg, void *data);

        static PyGetSetDef t_BlockTermState__fields_[] = {
          DECLARE_GETSET_FIELD(t_BlockTermState, blockFilePointer),
          DECLARE_GETSET_FIELD(t_BlockTermState, docFreq),
          DECLARE_GETSET_FIELD(t_BlockTermState, termBlockOrd),
          DECLARE_GETSET_FIELD(t_BlockTermState, totalTermFreq),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_BlockTermState__methods_[] = {
          DECLARE_METHOD(t_BlockTermState, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_BlockTermState, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_BlockTermState, copyFrom, METH_VARARGS),
          DECLARE_METHOD(t_BlockTermState, toString, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        static PyType_Slot PY_TYPE_SLOTS(BlockTermState)[] = {
          { Py_tp_methods, t_BlockTermState__methods_ },
          { Py_tp_init, (void *) abstract_init },
          { Py_tp_getset, t_BlockTermState__fields_ },
          { 0, NULL }
        };

        static PyType_Def *PY_TYPE_BASES(BlockTermState)[] = {
          &PY_TYPE_DEF(::org::apache::lucene::index::OrdTermState),
          NULL
        };

        DEFINE_TYPE(BlockTermState, t_BlockTermState, BlockTermState);

        void t_BlockTermState::install(PyObject *module)
        {
          installType(&PY_TYPE(BlockTermState), &PY_TYPE_DEF(BlockTermState), module, "BlockTermState", 0);
        }

        void t_BlockTermState::initialize(PyObject *module)
        {
          PyObject_SetAttrString((PyObject *) PY_TYPE(BlockTermState), "class_", make_descriptor(BlockTermState::initializeClass, 1));
          PyObject_SetAttrString((PyObject *) PY_TYPE(BlockTermState), "wrapfn_", make_descriptor(t_BlockTermState::wrap_jobject));
          PyObject_SetAttrString((PyObject *) PY_TYPE(BlockTermState), "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_BlockTermState_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, BlockTermState::initializeClass, 1)))
            return NULL;
          return t_BlockTermState::wrap_Object(BlockTermState(((t_BlockTermState *) arg)->object.this$));
        }
        static PyObject *t_BlockTermState_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, BlockTermState::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static PyObject *t_BlockTermState_copyFrom(t_BlockTermState *self, PyObject *args)
        {
          ::org::apache::lucene::index::TermState a0((jobject) NULL);

          if (!parseArgs(args, "k", ::org::apache::lucene::index::TermState::initializeClass, &a0))
          {
            OBJ_CALL(self->object.copyFrom(a0));
            Py_RETURN_NONE;
          }

          return callSuper(PY_TYPE(BlockTermState), (PyObject *) self, "copyFrom", args, 2);
        }

        static PyObject *t_BlockTermState_toString(t_BlockTermState *self, PyObject *args)
        {
          ::java::lang::String result((jobject) NULL);

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.toString());
            return j2p(result);
          }

          return callSuper(PY_TYPE(BlockTermState), (PyObject *) self, "toString", args, 2);
        }

        static PyObject *t_BlockTermState_get__blockFilePointer(t_BlockTermState *self, void *data)
        {
          jlong value;
          OBJ_CALL(value = self->object._get_blockFilePointer());
          return PyLong_FromLongLong((PY_LONG_LONG) value);
        }
        static int t_BlockTermState_set__blockFilePointer(t_BlockTermState *self, PyObject *arg, void *data)
        {
          jlong value;
          if (!parseArg(arg, "J", &value))
          {
            INT_CALL(self->object._set_blockFilePointer(value));
            return 0;
          }
          PyErr_SetArgsError((PyObject *) self, "blockFilePointer", arg);
          return -1;
        }

        static PyObject *t_BlockTermState_get__docFreq(t_BlockTermState *self, void *data)
        {
          jint value;
          OBJ_CALL(value = self->object._get_docFreq());
          return PyLong_FromLong((long) value);
        }
        static int t_BlockTermState_set__docFreq(t_BlockTermState *self, PyObject *arg, void *data)
        {
          jint value;
          if (!parseArg(arg, "I", &value))
          {
            INT_CALL(self->object._set_docFreq(value));
            return 0;
          }
          PyErr_SetArgsError((PyObject *) self, "docFreq", arg);
          return -1;
        }

        static PyObject *t_BlockTermState_get__termBlockOrd(t_BlockTermState *self, void *data)
        {
          jint value;
          OBJ_CALL(value = self->object._get_termBlockOrd());
          return PyLong_FromLong((long) value);
        }
        static int t_BlockTermState_set__termBlockOrd(t_BlockTermState *self, PyObject *arg, void *data)
        {
          jint value;
          if (!parseArg(arg, "I", &value))
          {
            INT_CALL(self->object._set_termBlockOrd(value));
            return 0;
          }
          PyErr_SetArgsError((PyObject *) self, "termBlockOrd", arg);
          return -1;
        }

        static PyObject *t_BlockTermState_get__totalTermFreq(t_BlockTermState *self, void *data)
        {
          jlong value;
          OBJ_CALL(value = self->object._get_totalTermFreq());
          return PyLong_FromLongLong((PY_LONG_LONG) value);
        }
        static int t_BlockTermState_set__totalTermFreq(t_BlockTermState *self, PyObject *arg, void *data)
        {
          jlong value;
          if (!parseArg(arg, "J", &value))
          {
            INT_CALL(self->object._set_totalTermFreq(value));
            return 0;
          }
          PyErr_SetArgsError((PyObject *) self, "totalTermFreq", arg);
          return -1;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/index/FilterMergePolicy.h"
#include "java/util/Map.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/index/MergePolicy$MergeSpecification.h"
#include "org/apache/lucene/index/CodecReader.h"
#include "org/apache/lucene/index/MergeTrigger.h"
#include "org/apache/lucene/index/MergePolicy$MergeContext.h"
#include "org/apache/lucene/index/SegmentCommitInfo.h"
#include "java/lang/String.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/util/IOSupplier.h"
#include "org/apache/lucene/index/SegmentInfos.h"
#include "java/lang/Boolean.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {

        ::java::lang::Class *FilterMergePolicy::class$ = NULL;
        jmethodID *FilterMergePolicy::mids$ = NULL;
        bool FilterMergePolicy::live$ = false;

        jclass FilterMergePolicy::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/index/FilterMergePolicy");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_b609897b5fb3e0bb] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/index/MergePolicy;)V");
            mids$[mid_findForcedDeletesMerges_a4b8e92c69858eaa] = env->getMethodID(cls, "findForcedDeletesMerges", "(Lorg/apache/lucene/index/SegmentInfos;Lorg/apache/lucene/index/MergePolicy$MergeContext;)Lorg/apache/lucene/index/MergePolicy$MergeSpecification;");
            mids$[mid_findForcedMerges_7f23fa79bde67ff3] = env->getMethodID(cls, "findForcedMerges", "(Lorg/apache/lucene/index/SegmentInfos;ILjava/util/Map;Lorg/apache/lucene/index/MergePolicy$MergeContext;)Lorg/apache/lucene/index/MergePolicy$MergeSpecification;");
            mids$[mid_findFullFlushMerges_ce0e45d4a26e56b1] = env->getMethodID(cls, "findFullFlushMerges", "(Lorg/apache/lucene/index/MergeTrigger;Lorg/apache/lucene/index/SegmentInfos;Lorg/apache/lucene/index/MergePolicy$MergeContext;)Lorg/apache/lucene/index/MergePolicy$MergeSpecification;");
            mids$[mid_findMerges_ce0e45d4a26e56b1] = env->getMethodID(cls, "findMerges", "(Lorg/apache/lucene/index/MergeTrigger;Lorg/apache/lucene/index/SegmentInfos;Lorg/apache/lucene/index/MergePolicy$MergeContext;)Lorg/apache/lucene/index/MergePolicy$MergeSpecification;");
            mids$[mid_getMaxCFSSegmentSizeMB_8c74b787998ce4bc] = env->getMethodID(cls, "getMaxCFSSegmentSizeMB", "()D");
            mids$[mid_getNoCFSRatio_8c74b787998ce4bc] = env->getMethodID(cls, "getNoCFSRatio", "()D");
            mids$[mid_keepFullyDeletedSegment_df61ce79f6884854] = env->getMethodID(cls, "keepFullyDeletedSegment", "(Lorg/apache/lucene/util/IOSupplier;)Z");
            mids$[mid_numDeletesToMerge_38410daa12d7ee1e] = env->getMethodID(cls, "numDeletesToMerge", "(Lorg/apache/lucene/index/SegmentCommitInfo;ILorg/apache/lucene/util/IOSupplier;)I");
            mids$[mid_setMaxCFSSegmentSizeMB_3c435f10a3b1e038] = env->getMethodID(cls, "setMaxCFSSegmentSizeMB", "(D)V");
            mids$[mid_setNoCFSRatio_3c435f10a3b1e038] = env->getMethodID(cls, "setNoCFSRatio", "(D)V");
            mids$[mid_toString_db9b55ba01e03e4b] = env->getMethodID(cls, "toString", "()Ljava/lang/String;");
            mids$[mid_useCompoundFile_f4dd668fee1c81b8] = env->getMethodID(cls, "useCompoundFile", "(Lorg/apache/lucene/index/SegmentInfos;Lorg/apache/lucene/index/SegmentCommitInfo;Lorg/apache/lucene/index/MergePolicy$MergeContext;)Z");
            mids$[mid_size_ad7dad42a292eb83] = env->getMethodID(cls, "size", "(Lorg/apache/lucene/index/SegmentCommitInfo;Lorg/apache/lucene/index/MergePolicy$MergeContext;)J");

            class$ = new ::java::lang::Class(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        FilterMergePolicy::FilterMergePolicy(const ::org::apache::lucene::index::MergePolicy & a0) : ::org::apache::lucene::index::MergePolicy(env->newObject(initializeClass, &mids$, mid_init$_b609897b5fb3e0bb, a0.this$)) {}

        ::org::apache::lucene::index::MergePolicy$MergeSpecification FilterMergePolicy::findForcedDeletesMerges(const ::org::apache::lucene::index::SegmentInfos & a0, const ::org::apache::lucene::index::MergePolicy$MergeContext & a1) const
        {
          return ::org::apache::lucene::index::MergePolicy$MergeSpecification(env->callObjectMethod(this$, mids$[mid_findForcedDeletesMerges_a4b8e92c69858eaa], a0.this$, a1.this$));
        }

        ::org::apache::lucene::index::MergePolicy$MergeSpecification FilterMergePolicy::findForcedMerges(const ::org::apache::lucene::index::SegmentInfos & a0, jint a1, const ::java::util::Map & a2, const ::org::apache::lucene::index::MergePolicy$MergeContext & a3) const
        {
          return ::org::apache::lucene::index::MergePolicy$MergeSpecification(env->callObjectMethod(this$, mids$[mid_findForcedMerges_7f23fa79bde67ff3], a0.this$, a1, a2.this$, a3.this$));
        }

        ::org::apache::lucene::index::MergePolicy$MergeSpecification FilterMergePolicy::findFullFlushMerges(const ::org::apache::lucene::index::MergeTrigger & a0, const ::org::apache::lucene::index::SegmentInfos & a1, const ::org::apache::lucene::index::MergePolicy$MergeContext & a2) const
        {
          return ::org::apache::lucene::index::MergePolicy$MergeSpecification(env->callObjectMethod(this$, mids$[mid_findFullFlushMerges_ce0e45d4a26e56b1], a0.this$, a1.this$, a2.this$));
        }

        ::org::apache::lucene::index::MergePolicy$MergeSpecification FilterMergePolicy::findMerges(const ::org::apache::lucene::index::MergeTrigger & a0, const ::org::apache::lucene::index::SegmentInfos & a1, const ::org::apache::lucene::index::MergePolicy$MergeContext & a2) const
        {
          return ::org::apache::lucene::index::MergePolicy$MergeSpecification(env->callObjectMethod(this$, mids$[mid_findMerges_ce0e45d4a26e56b1], a0.this$, a1.this$, a2.this$));
        }

        jdouble FilterMergePolicy::getMaxCFSSegmentSizeMB() const
        {
          return env->callDoubleMethod(this$, mids$[mid_getMaxCFSSegmentSizeMB_8c74b787998ce4bc]);
        }

        jdouble FilterMergePolicy::getNoCFSRatio() const
        {
          return env->callDoubleMethod(this$, mids$[mid_getNoCFSRatio_8c74b787998ce4bc]);
        }

        jboolean FilterMergePolicy::keepFullyDeletedSegment(const ::org::apache::lucene::util::IOSupplier & a0) const
        {
          return env->callBooleanMethod(this$, mids$[mid_keepFullyDeletedSegment_df61ce79f6884854], a0.this$);
        }

        jint FilterMergePolicy::numDeletesToMerge(const ::org::apache::lucene::index::SegmentCommitInfo & a0, jint a1, const ::org::apache::lucene::util::IOSupplier & a2) const
        {
          return env->callIntMethod(this$, mids$[mid_numDeletesToMerge_38410daa12d7ee1e], a0.this$, a1, a2.this$);
        }

        void FilterMergePolicy::setMaxCFSSegmentSizeMB(jdouble a0) const
        {
          env->callVoidMethod(this$, mids$[mid_setMaxCFSSegmentSizeMB_3c435f10a3b1e038], a0);
        }

        void FilterMergePolicy::setNoCFSRatio(jdouble a0) const
        {
          env->callVoidMethod(this$, mids$[mid_setNoCFSRatio_3c435f10a3b1e038], a0);
        }

        ::java::lang::String FilterMergePolicy::toString() const
        {
          return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_db9b55ba01e03e4b]));
        }

        jboolean FilterMergePolicy::useCompoundFile(const ::org::apache::lucene::index::SegmentInfos & a0, const ::org::apache::lucene::index::SegmentCommitInfo & a1, const ::org::apache::lucene::index::MergePolicy$MergeContext & a2) const
        {
          return env->callBooleanMethod(this$, mids$[mid_useCompoundFile_f4dd668fee1c81b8], a0.this$, a1.this$, a2.this$);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {
        static PyObject *t_FilterMergePolicy_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_FilterMergePolicy_instance_(PyTypeObject *type, PyObject *arg);
        static int t_FilterMergePolicy_init_(t_FilterMergePolicy *self, PyObject *args, PyObject *kwds);
        static PyObject *t_FilterMergePolicy_findForcedDeletesMerges(t_FilterMergePolicy *self, PyObject *args);
        static PyObject *t_FilterMergePolicy_findForcedMerges(t_FilterMergePolicy *self, PyObject *args);
        static PyObject *t_FilterMergePolicy_findFullFlushMerges(t_FilterMergePolicy *self, PyObject *args);
        static PyObject *t_FilterMergePolicy_findMerges(t_FilterMergePolicy *self, PyObject *args);
        static PyObject *t_FilterMergePolicy_getMaxCFSSegmentSizeMB(t_FilterMergePolicy *self, PyObject *args);
        static PyObject *t_FilterMergePolicy_getNoCFSRatio(t_FilterMergePolicy *self, PyObject *args);
        static PyObject *t_FilterMergePolicy_keepFullyDeletedSegment(t_FilterMergePolicy *self, PyObject *args);
        static PyObject *t_FilterMergePolicy_numDeletesToMerge(t_FilterMergePolicy *self, PyObject *args);
        static PyObject *t_FilterMergePolicy_setMaxCFSSegmentSizeMB(t_FilterMergePolicy *self, PyObject *args);
        static PyObject *t_FilterMergePolicy_setNoCFSRatio(t_FilterMergePolicy *self, PyObject *args);
        static PyObject *t_FilterMergePolicy_toString(t_FilterMergePolicy *self, PyObject *args);
        static PyObject *t_FilterMergePolicy_useCompoundFile(t_FilterMergePolicy *self, PyObject *args);
        static PyObject *t_FilterMergePolicy_get__maxCFSSegmentSizeMB(t_FilterMergePolicy *self, void *data);
        static int t_FilterMergePolicy_set__maxCFSSegmentSizeMB(t_FilterMergePolicy *self, PyObject *arg, void *data);
        static PyObject *t_FilterMergePolicy_get__noCFSRatio(t_FilterMergePolicy *self, void *data);
        static int t_FilterMergePolicy_set__noCFSRatio(t_FilterMergePolicy *self, PyObject *arg, void *data);
        static PyGetSetDef t_FilterMergePolicy__fields_[] = {
          DECLARE_GETSET_FIELD(t_FilterMergePolicy, maxCFSSegmentSizeMB),
          DECLARE_GETSET_FIELD(t_FilterMergePolicy, noCFSRatio),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_FilterMergePolicy__methods_[] = {
          DECLARE_METHOD(t_FilterMergePolicy, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_FilterMergePolicy, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_FilterMergePolicy, findForcedDeletesMerges, METH_VARARGS),
          DECLARE_METHOD(t_FilterMergePolicy, findForcedMerges, METH_VARARGS),
          DECLARE_METHOD(t_FilterMergePolicy, findFullFlushMerges, METH_VARARGS),
          DECLARE_METHOD(t_FilterMergePolicy, findMerges, METH_VARARGS),
          DECLARE_METHOD(t_FilterMergePolicy, getMaxCFSSegmentSizeMB, METH_VARARGS),
          DECLARE_METHOD(t_FilterMergePolicy, getNoCFSRatio, METH_VARARGS),
          DECLARE_METHOD(t_FilterMergePolicy, keepFullyDeletedSegment, METH_VARARGS),
          DECLARE_METHOD(t_FilterMergePolicy, numDeletesToMerge, METH_VARARGS),
          DECLARE_METHOD(t_FilterMergePolicy, setMaxCFSSegmentSizeMB, METH_VARARGS),
          DECLARE_METHOD(t_FilterMergePolicy, setNoCFSRatio, METH_VARARGS),
          DECLARE_METHOD(t_FilterMergePolicy, toString, METH_VARARGS),
          DECLARE_METHOD(t_FilterMergePolicy, useCompoundFile, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        static PyType_Slot PY_TYPE_SLOTS(FilterMergePolicy)[] = {
          { Py_tp_methods, t_FilterMergePolicy__methods_ },
          { Py_tp_init, (void *) t_FilterMergePolicy_init_ },
          { Py_tp_getset, t_FilterMergePolicy__fields_ },
          { 0, NULL }
        };

        static PyType_Def *PY_TYPE_BASES(FilterMergePolicy)[] = {
          &PY_TYPE_DEF(::org::apache::lucene::index::MergePolicy),
          NULL
        };

        DEFINE_TYPE(FilterMergePolicy, t_FilterMergePolicy, FilterMergePolicy);

        void t_FilterMergePolicy::install(PyObject *module)
        {
          installType(&PY_TYPE(FilterMergePolicy), &PY_TYPE_DEF(FilterMergePolicy), module, "FilterMergePolicy", 0);
        }

        void t_FilterMergePolicy::initialize(PyObject *module)
        {
          PyObject_SetAttrString((PyObject *) PY_TYPE(FilterMergePolicy), "class_", make_descriptor(FilterMergePolicy::initializeClass, 1));
          PyObject_SetAttrString((PyObject *) PY_TYPE(FilterMergePolicy), "wrapfn_", make_descriptor(t_FilterMergePolicy::wrap_jobject));
          PyObject_SetAttrString((PyObject *) PY_TYPE(FilterMergePolicy), "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_FilterMergePolicy_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, FilterMergePolicy::initializeClass, 1)))
            return NULL;
          return t_FilterMergePolicy::wrap_Object(FilterMergePolicy(((t_FilterMergePolicy *) arg)->object.this$));
        }
        static PyObject *t_FilterMergePolicy_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, FilterMergePolicy::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_FilterMergePolicy_init_(t_FilterMergePolicy *self, PyObject *args, PyObject *kwds)
        {
          ::org::apache::lucene::index::MergePolicy a0((jobject) NULL);
          FilterMergePolicy object((jobject) NULL);

          if (!parseArgs(args, "k", ::org::apache::lucene::index::MergePolicy::initializeClass, &a0))
          {
            INT_CALL(object = FilterMergePolicy(a0));
            self->object = object;
          }
          else
          {
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }

        static PyObject *t_FilterMergePolicy_findForcedDeletesMerges(t_FilterMergePolicy *self, PyObject *args)
        {
          ::org::apache::lucene::index::SegmentInfos a0((jobject) NULL);
          ::org::apache::lucene::index::MergePolicy$MergeContext a1((jobject) NULL);
          ::org::apache::lucene::index::MergePolicy$MergeSpecification result((jobject) NULL);

          if (!parseArgs(args, "kk", ::org::apache::lucene::index::SegmentInfos::initializeClass, ::org::apache::lucene::index::MergePolicy$MergeContext::initializeClass, &a0, &a1))
          {
            OBJ_CALL(result = self->object.findForcedDeletesMerges(a0, a1));
            return ::org::apache::lucene::index::t_MergePolicy$MergeSpecification::wrap_Object(result);
          }

          return callSuper(PY_TYPE(FilterMergePolicy), (PyObject *) self, "findForcedDeletesMerges", args, 2);
        }

        static PyObject *t_FilterMergePolicy_findForcedMerges(t_FilterMergePolicy *self, PyObject *args)
        {
          ::org::apache::lucene::index::SegmentInfos a0((jobject) NULL);
          jint a1;
          ::java::util::Map a2((jobject) NULL);
          PyTypeObject **p2;
          ::org::apache::lucene::index::MergePolicy$MergeContext a3((jobject) NULL);
          ::org::apache::lucene::index::MergePolicy$MergeSpecification result((jobject) NULL);

          if (!parseArgs(args, "kIKk", ::org::apache::lucene::index::SegmentInfos::initializeClass, ::java::util::Map::initializeClass, ::org::apache::lucene::index::MergePolicy$MergeContext::initializeClass, &a0, &a1, &a2, &p2, ::java::util::t_Map::parameters_, &a3))
          {
            OBJ_CALL(result = self->object.findForcedMerges(a0, a1, a2, a3));
            return ::org::apache::lucene::index::t_MergePolicy$MergeSpecification::wrap_Object(result);
          }

          return callSuper(PY_TYPE(FilterMergePolicy), (PyObject *) self, "findForcedMerges", args, 2);
        }

        static PyObject *t_FilterMergePolicy_findFullFlushMerges(t_FilterMergePolicy *self, PyObject *args)
        {
          ::org::apache::lucene::index::MergeTrigger a0((jobject) NULL);
          PyTypeObject **p0;
          ::org::apache::lucene::index::SegmentInfos a1((jobject) NULL);
          ::org::apache::lucene::index::MergePolicy$MergeContext a2((jobject) NULL);
          ::org::apache::lucene::index::MergePolicy$MergeSpecification result((jobject) NULL);

          if (!parseArgs(args, "Kkk", ::org::apache::lucene::index::MergeTrigger::initializeClass, ::org::apache::lucene::index::SegmentInfos::initializeClass, ::org::apache::lucene::index::MergePolicy$MergeContext::initializeClass, &a0, &p0, ::org::apache::lucene::index::t_MergeTrigger::parameters_, &a1, &a2))
          {
            OBJ_CALL(result = self->object.findFullFlushMerges(a0, a1, a2));
            return ::org::apache::lucene::index::t_MergePolicy$MergeSpecification::wrap_Object(result);
          }

          return callSuper(PY_TYPE(FilterMergePolicy), (PyObject *) self, "findFullFlushMerges", args, 2);
        }

        static PyObject *t_FilterMergePolicy_findMerges(t_FilterMergePolicy *self, PyObject *args)
        {
          ::org::apache::lucene::index::MergeTrigger a0((jobject) NULL);
          PyTypeObject **p0;
          ::org::apache::lucene::index::SegmentInfos a1((jobject) NULL);
          ::org::apache::lucene::index::MergePolicy$MergeContext a2((jobject) NULL);
          ::org::apache::lucene::index::MergePolicy$MergeSpecification result((jobject) NULL);

          if (!parseArgs(args, "Kkk", ::org::apache::lucene::index::MergeTrigger::initializeClass, ::org::apache::lucene::index::SegmentInfos::initializeClass, ::org::apache::lucene::index::MergePolicy$MergeContext::initializeClass, &a0, &p0, ::org::apache::lucene::index::t_MergeTrigger::parameters_, &a1, &a2))
          {
            OBJ_CALL(result = self->object.findMerges(a0, a1, a2));
            return ::org::apache::lucene::index::t_MergePolicy$MergeSpecification::wrap_Object(result);
          }

          return callSuper(PY_TYPE(FilterMergePolicy), (PyObject *) self, "findMerges", args, 2);
        }

        static PyObject *t_FilterMergePolicy_getMaxCFSSegmentSizeMB(t_FilterMergePolicy *self, PyObject *args)
        {
          jdouble result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.getMaxCFSSegmentSizeMB());
            return PyFloat_FromDouble((double) result);
          }

          return callSuper(PY_TYPE(FilterMergePolicy), (PyObject *) self, "getMaxCFSSegmentSizeMB", args, 2);
        }

        static PyObject *t_FilterMergePolicy_getNoCFSRatio(t_FilterMergePolicy *self, PyObject *args)
        {
          jdouble result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.getNoCFSRatio());
            return PyFloat_FromDouble((double) result);
          }

          return callSuper(PY_TYPE(FilterMergePolicy), (PyObject *) self, "getNoCFSRatio", args, 2);
        }

        static PyObject *t_FilterMergePolicy_keepFullyDeletedSegment(t_FilterMergePolicy *self, PyObject *args)
        {
          ::org::apache::lucene::util::IOSupplier a0((jobject) NULL);
          PyTypeObject **p0;
          jboolean result;

          if (!parseArgs(args, "K", ::org::apache::lucene::util::IOSupplier::initializeClass, &a0, &p0, ::org::apache::lucene::util::t_IOSupplier::parameters_))
          {
            OBJ_CALL(result = self->object.keepFullyDeletedSegment(a0));
            Py_RETURN_BOOL(result);
          }

          return callSuper(PY_TYPE(FilterMergePolicy), (PyObject *) self, "keepFullyDeletedSegment", args, 2);
        }

        static PyObject *t_FilterMergePolicy_numDeletesToMerge(t_FilterMergePolicy *self, PyObject *args)
        {
          ::org::apache::lucene::index::SegmentCommitInfo a0((jobject) NULL);
          jint a1;
          ::org::apache::lucene::util::IOSupplier a2((jobject) NULL);
          PyTypeObject **p2;
          jint result;

          if (!parseArgs(args, "kIK", ::org::apache::lucene::index::SegmentCommitInfo::initializeClass, ::org::apache::lucene::util::IOSupplier::initializeClass, &a0, &a1, &a2, &p2, ::org::apache::lucene::util::t_IOSupplier::parameters_))
          {
            OBJ_CALL(result = self->object.numDeletesToMerge(a0, a1, a2));
            return PyLong_FromLong((long) result);
          }

          return callSuper(PY_TYPE(FilterMergePolicy), (PyObject *) self, "numDeletesToMerge", args, 2);
        }

        static PyObject *t_FilterMergePolicy_setMaxCFSSegmentSizeMB(t_FilterMergePolicy *self, PyObject *args)
        {
          jdouble a0;

          if (!parseArgs(args, "D", &a0))
          {
            OBJ_CALL(self->object.setMaxCFSSegmentSizeMB(a0));
            Py_RETURN_NONE;
          }

          return callSuper(PY_TYPE(FilterMergePolicy), (PyObject *) self, "setMaxCFSSegmentSizeMB", args, 2);
        }

        static PyObject *t_FilterMergePolicy_setNoCFSRatio(t_FilterMergePolicy *self, PyObject *args)
        {
          jdouble a0;

          if (!parseArgs(args, "D", &a0))
          {
            OBJ_CALL(self->object.setNoCFSRatio(a0));
            Py_RETURN_NONE;
          }

          return callSuper(PY_TYPE(FilterMergePolicy), (PyObject *) self, "setNoCFSRatio", args, 2);
        }

        static PyObject *t_FilterMergePolicy_toString(t_FilterMergePolicy *self, PyObject *args)
        {
          ::java::lang::String result((jobject) NULL);

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.toString());
            return j2p(result);
          }

          return callSuper(PY_TYPE(FilterMergePolicy), (PyObject *) self, "toString", args, 2);
        }

        static PyObject *t_FilterMergePolicy_useCompoundFile(t_FilterMergePolicy *self, PyObject *args)
        {
          ::org::apache::lucene::index::SegmentInfos a0((jobject) NULL);
          ::org::apache::lucene::index::SegmentCommitInfo a1((jobject) NULL);
          ::org::apache::lucene::index::MergePolicy$MergeContext a2((jobject) NULL);
          jboolean result;

          if (!parseArgs(args, "kkk", ::org::apache::lucene::index::SegmentInfos::initializeClass, ::org::apache::lucene::index::SegmentCommitInfo::initializeClass, ::org::apache::lucene::index::MergePolicy$MergeContext::initializeClass, &a0, &a1, &a2))
          {
            OBJ_CALL(result = self->object.useCompoundFile(a0, a1, a2));
            Py_RETURN_BOOL(result);
          }

          return callSuper(PY_TYPE(FilterMergePolicy), (PyObject *) self, "useCompoundFile", args, 2);
        }

        static PyObject *t_FilterMergePolicy_get__maxCFSSegmentSizeMB(t_FilterMergePolicy *self, void *data)
        {
          jdouble value;
          OBJ_CALL(value = self->object.getMaxCFSSegmentSizeMB());
          return PyFloat_FromDouble((double) value);
        }
        static int t_FilterMergePolicy_set__maxCFSSegmentSizeMB(t_FilterMergePolicy *self, PyObject *arg, void *data)
        {
          {
            jdouble value;
            if (!parseArg(arg, "D", &value))
            {
              INT_CALL(self->object.setMaxCFSSegmentSizeMB(value));
              return 0;
            }
          }
          PyErr_SetArgsError((PyObject *) self, "maxCFSSegmentSizeMB", arg);
          return -1;
        }

        static PyObject *t_FilterMergePolicy_get__noCFSRatio(t_FilterMergePolicy *self, void *data)
        {
          jdouble value;
          OBJ_CALL(value = self->object.getNoCFSRatio());
          return PyFloat_FromDouble((double) value);
        }
        static int t_FilterMergePolicy_set__noCFSRatio(t_FilterMergePolicy *self, PyObject *arg, void *data)
        {
          {
            jdouble value;
            if (!parseArg(arg, "D", &value))
            {
              INT_CALL(self->object.setNoCFSRatio(value));
              return 0;
            }
          }
          PyErr_SetArgsError((PyObject *) self, "noCFSRatio", arg);
          return -1;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/bn/BengaliStemFilterFactory.h"
#include "java/util/Map.h"
#include "java/lang/String.h"
#include "org/apache/lucene/analysis/TokenStream.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace bn {

          ::java::lang::Class *BengaliStemFilterFactory::class$ = NULL;
          jmethodID *BengaliStemFilterFactory::mids$ = NULL;
          bool BengaliStemFilterFactory::live$ = false;
          ::java::lang::String *BengaliStemFilterFactory::NAME = NULL;

          jclass BengaliStemFilterFactory::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/bn/BengaliStemFilterFactory");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_408bd889ee3beae5] = env->getMethodID(cls, "<init>", "(Ljava/util/Map;)V");
              mids$[mid_create_6de1e28d9d10cd9e] = env->getMethodID(cls, "create", "(Lorg/apache/lucene/analysis/TokenStream;)Lorg/apache/lucene/analysis/TokenStream;");

              class$ = new ::java::lang::Class(cls);
              cls = (jclass) class$->this$;

              NAME = new ::java::lang::String(env->getStaticObjectField(cls, "NAME", "Ljava/lang/String;"));
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          BengaliStemFilterFactory::BengaliStemFilterFactory(const ::java::util::Map & a0) : ::org::apache::lucene::analysis::util::TokenFilterFactory(env->newObject(initializeClass, &mids$, mid_init$_408bd889ee3beae5, a0.this$)) {}

          ::org::apache::lucene::analysis::TokenStream BengaliStemFilterFactory::create(const ::org::apache::lucene::analysis::TokenStream & a0) const
          {
            return ::org::apache::lucene::analysis::TokenStream(env->callObjectMethod(this$, mids$[mid_create_6de1e28d9d10cd9e], a0.this$));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace bn {
          static PyObject *t_BengaliStemFilterFactory_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_BengaliStemFilterFactory_instance_(PyTypeObject *type, PyObject *arg);
          static int t_BengaliStemFilterFactory_init_(t_BengaliStemFilterFactory *self, PyObject *args, PyObject *kwds);
          static PyObject *t_BengaliStemFilterFactory_create(t_BengaliStemFilterFactory *self, PyObject *args);

          static PyMethodDef t_BengaliStemFilterFactory__methods_[] = {
            DECLARE_METHOD(t_BengaliStemFilterFactory, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_BengaliStemFilterFactory, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_BengaliStemFilterFactory, create, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          static PyType_Slot PY_TYPE_SLOTS(BengaliStemFilterFactory)[] = {
            { Py_tp_methods, t_BengaliStemFilterFactory__methods_ },
            { Py_tp_init, (void *) t_BengaliStemFilterFactory_init_ },
            { 0, NULL }
          };

          static PyType_Def *PY_TYPE_BASES(BengaliStemFilterFactory)[] = {
            &PY_TYPE_DEF(::org::apache::lucene::analysis::util::TokenFilterFactory),
            NULL
          };

          DEFINE_TYPE(BengaliStemFilterFactory, t_BengaliStemFilterFactory, BengaliStemFilterFactory);

          void t_BengaliStemFilterFactory::install(PyObject *module)
          {
            installType(&PY_TYPE(BengaliStemFilterFactory), &PY_TYPE_DEF(BengaliStemFilterFactory), module, "BengaliStemFilterFactory", 0);
          }

          void t_BengaliStemFilterFactory::initialize(PyObject *module)
          {
            PyObject_SetAttrString((PyObject *) PY_TYPE(BengaliStemFilterFactory), "class_", make_descriptor(BengaliStemFilterFactory::initializeClass, 1));
            PyObject_SetAttrString((PyObject *) PY_TYPE(BengaliStemFilterFactory), "wrapfn_", make_descriptor(t_BengaliStemFilterFactory::wrap_jobject));
            PyObject_SetAttrString((PyObject *) PY_TYPE(BengaliStemFilterFactory), "boxfn_", make_descriptor(boxObject));
            env->getClass(BengaliStemFilterFactory::initializeClass);
            PyObject_SetAttrString((PyObject *) PY_TYPE(BengaliStemFilterFactory), "NAME", make_descriptor(j2p(*BengaliStemFilterFactory::NAME)));
          }

          static PyObject *t_BengaliStemFilterFactory_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, BengaliStemFilterFactory::initializeClass, 1)))
              return NULL;
            return t_BengaliStemFilterFactory::wrap_Object(BengaliStemFilterFactory(((t_BengaliStemFilterFactory *) arg)->object.this$));
          }
          static PyObject *t_BengaliStemFilterFactory_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, BengaliStemFilterFactory::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_BengaliStemFilterFactory_init_(t_BengaliStemFilterFactory *self, PyObject *args, PyObject *kwds)
          {
            ::java::util::Map a0((jobject) NULL);
            PyTypeObject **p0;
            BengaliStemFilterFactory object((jobject) NULL);

            if (!parseArgs(args, "K", ::java::util::Map::initializeClass, &a0, &p0, ::java::util::t_Map::parameters_))
            {
              INT_CALL(object = BengaliStemFilterFactory(a0));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_BengaliStemFilterFactory_create(t_BengaliStemFilterFactory *self, PyObject *args)
          {
            ::org::apache::lucene::analysis::TokenStream a0((jobject) NULL);
            ::org::apache::lucene::analysis::TokenStream result((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::analysis::TokenStream::initializeClass, &a0))
            {
              OBJ_CALL(result = self->object.create(a0));
              return ::org::apache::lucene::analysis::t_TokenStream::wrap_Object(result);
            }

            return callSuper(PY_TYPE(BengaliStemFilterFactory), (PyObject *) self, "create", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/standard/StandardTokenizerImpl.h"
#include "org/apache/lucene/analysis/tokenattributes/CharTermAttribute.h"
#include "java/lang/Class.h"
#include "java/lang/String.h"
#include "java/io/IOException.h"
#include "java/io/Reader.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace standard {

          ::java::lang::Class *StandardTokenizerImpl::class$ = NULL;
          jmethodID *StandardTokenizerImpl::mids$ = NULL;
          bool StandardTokenizerImpl::live$ = false;
          jint StandardTokenizerImpl::EMOJI_TYPE = (jint) 0;
          jint StandardTokenizerImpl::HANGUL_TYPE = (jint) 0;
          jint StandardTokenizerImpl::HIRAGANA_TYPE = (jint) 0;
          jint StandardTokenizerImpl::IDEOGRAPHIC_TYPE = (jint) 0;
          jint StandardTokenizerImpl::KATAKANA_TYPE = (jint) 0;
          jint StandardTokenizerImpl::NUMERIC_TYPE = (jint) 0;
          jint StandardTokenizerImpl::SOUTH_EAST_ASIAN_TYPE = (jint) 0;
          jint StandardTokenizerImpl::WORD_TYPE = (jint) 0;
          jint StandardTokenizerImpl::YYEOF = (jint) 0;
          jint StandardTokenizerImpl::YYINITIAL = (jint) 0;

          jclass StandardTokenizerImpl::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/standard/StandardTokenizerImpl");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_b2f3c57f5e6eb3f2] = env->getMethodID(cls, "<init>", "(Ljava/io/Reader;)V");
              mids$[mid_getNextToken_9972fcc56b44e79d] = env->getMethodID(cls, "getNextToken", "()I");
              mids$[mid_getText_5e9737191854bf83] = env->getMethodID(cls, "getText", "(Lorg/apache/lucene/analysis/tokenattributes/CharTermAttribute;)V");
              mids$[mid_setBufferSize_040c4cd0390c5aff] = env->getMethodID(cls, "setBufferSize", "(I)V");
              mids$[mid_yybegin_040c4cd0390c5aff] = env->getMethodID(cls, "yybegin", "(I)V");
              mids$[mid_yychar_9972fcc56b44e79d] = env->getMethodID(cls, "yychar", "()I");
              mids$[mid_yycharat_ebc61ec1e57770d1] = env->getMethodID(cls, "yycharat", "(I)C");
              mids$[mid_yyclose_f2cc1bce94666404] = env->getMethodID(cls, "yyclose", "()V");
              mids$[mid_yylength_9972fcc56b44e79d] = env->getMethodID(cls, "yylength", "()I");
              mids$[mid_yypushback_040c4cd0390c5aff] = env->getMethodID(cls, "yypushback", "(I)V");
              mids$[mid_yyreset_b2f3c57f5e6eb3f2] = env->getMethodID(cls, "yyreset", "(Ljava/io/Reader;)V");
              mids$[mid_yystate_9972fcc56b44e79d] = env->getMethodID(cls, "yystate", "()I");
              mids$[mid_yytext_db9b55ba01e03e4b] = env->getMethodID(cls, "yytext", "()Ljava/lang/String;");

              class$ = new ::java::lang::Class(cls);
              cls = (jclass) class$->this$;

              EMOJI_TYPE = env->getStaticIntField(cls, "EMOJI_TYPE");
              HANGUL_TYPE = env->getStaticIntField(cls, "HANGUL_TYPE");
              HIRAGANA_TYPE = env->getStaticIntField(cls, "HIRAGANA_TYPE");
              IDEOGRAPHIC_TYPE = env->getStaticIntField(cls, "IDEOGRAPHIC_TYPE");
              KATAKANA_TYPE = env->getStaticIntField(cls, "KATAKANA_TYPE");
              NUMERIC_TYPE = env->getStaticIntField(cls, "NUMERIC_TYPE");
              SOUTH_EAST_ASIAN_TYPE = env->getStaticIntField(cls, "SOUTH_EAST_ASIAN_TYPE");
              WORD_TYPE = env->getStaticIntField(cls, "WORD_TYPE");
              YYEOF = env->getStaticIntField(cls, "YYEOF");
              YYINITIAL = env->getStaticIntField(cls, "YYINITIAL");
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          StandardTokenizerImpl::StandardTokenizerImpl(const ::java::io::Reader & a0) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_b2f3c57f5e6eb3f2, a0.this$)) {}

          jint StandardTokenizerImpl::getNextToken() const
          {
            return env->callIntMethod(this$, mids$[mid_getNextToken_9972fcc56b44e79d]);
          }

          void StandardTokenizerImpl::getText(const ::org::apache::lucene::analysis::tokenattributes::CharTermAttribute & a0) const
          {
            env->callVoidMethod(this$, mids$[mid_getText_5e9737191854bf83], a0.this$);
          }

          void StandardTokenizerImpl::setBufferSize(jint a0) const
          {
            env->callVoidMethod(this$, mids$[mid_setBufferSize_040c4cd0390c5aff], a0);
          }

          void StandardTokenizerImpl::yybegin(jint a0) const
          {
            env->callVoidMethod(this$, mids$[mid_yybegin_040c4cd0390c5aff], a0);
          }

          jint StandardTokenizerImpl::yychar() const
          {
            return env->callIntMethod(this$, mids$[mid_yychar_9972fcc56b44e79d]);
          }

          jchar StandardTokenizerImpl::yycharat(jint a0) const
          {
            return env->callCharMethod(this$, mids$[mid_yycharat_ebc61ec1e57770d1], a0);
          }

          void StandardTokenizerImpl::yyclose() const
          {
            env->callVoidMethod(this$, mids$[mid_yyclose_f2cc1bce94666404]);
          }

          jint StandardTokenizerImpl::yylength() const
          {
            return env->callIntMethod(this$, mids$[mid_yylength_9972fcc56b44e79d]);
          }

          void StandardTokenizerImpl::yypushback(jint a0) const
          {
            env->callVoidMethod(this$, mids$[mid_yypushback_040c4cd0390c5aff], a0);
          }

          void StandardTokenizerImpl::yyreset(const ::java::io::Reader & a0) const
          {
            env->callVoidMethod(this$, mids$[mid_yyreset_b2f3c57f5e6eb3f2], a0.this$);
          }

          jint StandardTokenizerImpl::yystate() const
          {
            return env->callIntMethod(this$, mids$[mid_yystate_9972fcc56b44e79d]);
          }

          ::java::lang::String StandardTokenizerImpl::yytext() const
          {
            return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_yytext_db9b55ba01e03e4b]));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace standard {
          static PyObject *t_StandardTokenizerImpl_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_StandardTokenizerImpl_instance_(PyTypeObject *type, PyObject *arg);
          static int t_StandardTokenizerImpl_init_(t_StandardTokenizerImpl *self, PyObject *args, PyObject *kwds);
          static PyObject *t_StandardTokenizerImpl_getNextToken(t_StandardTokenizerImpl *self);
          static PyObject *t_StandardTokenizerImpl_getText(t_StandardTokenizerImpl *self, PyObject *arg);
          static PyObject *t_StandardTokenizerImpl_setBufferSize(t_StandardTokenizerImpl *self, PyObject *arg);
          static PyObject *t_StandardTokenizerImpl_yybegin(t_StandardTokenizerImpl *self, PyObject *arg);
          static PyObject *t_StandardTokenizerImpl_yychar(t_StandardTokenizerImpl *self);
          static PyObject *t_StandardTokenizerImpl_yycharat(t_StandardTokenizerImpl *self, PyObject *arg);
          static PyObject *t_StandardTokenizerImpl_yyclose(t_StandardTokenizerImpl *self);
          static PyObject *t_StandardTokenizerImpl_yylength(t_StandardTokenizerImpl *self);
          static PyObject *t_StandardTokenizerImpl_yypushback(t_StandardTokenizerImpl *self, PyObject *arg);
          static PyObject *t_StandardTokenizerImpl_yyreset(t_StandardTokenizerImpl *self, PyObject *arg);
          static PyObject *t_StandardTokenizerImpl_yystate(t_StandardTokenizerImpl *self);
          static PyObject *t_StandardTokenizerImpl_yytext(t_StandardTokenizerImpl *self);
          static int t_StandardTokenizerImpl_set__bufferSize(t_StandardTokenizerImpl *self, PyObject *arg, void *data);
          static PyObject *t_StandardTokenizerImpl_get__nextToken(t_StandardTokenizerImpl *self, void *data);
          static PyGetSetDef t_StandardTokenizerImpl__fields_[] = {
            DECLARE_SET_FIELD(t_StandardTokenizerImpl, bufferSize),
            DECLARE_GET_FIELD(t_StandardTokenizerImpl, nextToken),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_StandardTokenizerImpl__methods_[] = {
            DECLARE_METHOD(t_StandardTokenizerImpl, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_StandardTokenizerImpl, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_StandardTokenizerImpl, getNextToken, METH_NOARGS),
            DECLARE_METHOD(t_StandardTokenizerImpl, getText, METH_O),
            DECLARE_METHOD(t_StandardTokenizerImpl, setBufferSize, METH_O),
            DECLARE_METHOD(t_StandardTokenizerImpl, yybegin, METH_O),
            DECLARE_METHOD(t_StandardTokenizerImpl, yychar, METH_NOARGS),
            DECLARE_METHOD(t_StandardTokenizerImpl, yycharat, METH_O),
            DECLARE_METHOD(t_StandardTokenizerImpl, yyclose, METH_NOARGS),
            DECLARE_METHOD(t_StandardTokenizerImpl, yylength, METH_NOARGS),
            DECLARE_METHOD(t_StandardTokenizerImpl, yypushback, METH_O),
            DECLARE_METHOD(t_StandardTokenizerImpl, yyreset, METH_O),
            DECLARE_METHOD(t_StandardTokenizerImpl, yystate, METH_NOARGS),
            DECLARE_METHOD(t_StandardTokenizerImpl, yytext, METH_NOARGS),
            { NULL, NULL, 0, NULL }
          };

          static PyType_Slot PY_TYPE_SLOTS(StandardTokenizerImpl)[] = {
            { Py_tp_methods, t_StandardTokenizerImpl__methods_ },
            { Py_tp_init, (void *) t_StandardTokenizerImpl_init_ },
            { Py_tp_getset, t_StandardTokenizerImpl__fields_ },
            { 0, NULL }
          };

          static PyType_Def *PY_TYPE_BASES(StandardTokenizerImpl)[] = {
            &PY_TYPE_DEF(::java::lang::Object),
            NULL
          };

          DEFINE_TYPE(StandardTokenizerImpl, t_StandardTokenizerImpl, StandardTokenizerImpl);

          void t_StandardTokenizerImpl::install(PyObject *module)
          {
            installType(&PY_TYPE(StandardTokenizerImpl), &PY_TYPE_DEF(StandardTokenizerImpl), module, "StandardTokenizerImpl", 0);
          }

          void t_StandardTokenizerImpl::initialize(PyObject *module)
          {
            PyObject_SetAttrString((PyObject *) PY_TYPE(StandardTokenizerImpl), "class_", make_descriptor(StandardTokenizerImpl::initializeClass, 1));
            PyObject_SetAttrString((PyObject *) PY_TYPE(StandardTokenizerImpl), "wrapfn_", make_descriptor(t_StandardTokenizerImpl::wrap_jobject));
            PyObject_SetAttrString((PyObject *) PY_TYPE(StandardTokenizerImpl), "boxfn_", make_descriptor(boxObject));
            env->getClass(StandardTokenizerImpl::initializeClass);
            PyObject_SetAttrString((PyObject *) PY_TYPE(StandardTokenizerImpl), "EMOJI_TYPE", make_descriptor(StandardTokenizerImpl::EMOJI_TYPE));
            PyObject_SetAttrString((PyObject *) PY_TYPE(StandardTokenizerImpl), "HANGUL_TYPE", make_descriptor(StandardTokenizerImpl::HANGUL_TYPE));
            PyObject_SetAttrString((PyObject *) PY_TYPE(StandardTokenizerImpl), "HIRAGANA_TYPE", make_descriptor(StandardTokenizerImpl::HIRAGANA_TYPE));
            PyObject_SetAttrString((PyObject *) PY_TYPE(StandardTokenizerImpl), "IDEOGRAPHIC_TYPE", make_descriptor(StandardTokenizerImpl::IDEOGRAPHIC_TYPE));
            PyObject_SetAttrString((PyObject *) PY_TYPE(StandardTokenizerImpl), "KATAKANA_TYPE", make_descriptor(StandardTokenizerImpl::KATAKANA_TYPE));
            PyObject_SetAttrString((PyObject *) PY_TYPE(StandardTokenizerImpl), "NUMERIC_TYPE", make_descriptor(StandardTokenizerImpl::NUMERIC_TYPE));
            PyObject_SetAttrString((PyObject *) PY_TYPE(StandardTokenizerImpl), "SOUTH_EAST_ASIAN_TYPE", make_descriptor(StandardTokenizerImpl::SOUTH_EAST_ASIAN_TYPE));
            PyObject_SetAttrString((PyObject *) PY_TYPE(StandardTokenizerImpl), "WORD_TYPE", make_descriptor(StandardTokenizerImpl::WORD_TYPE));
            PyObject_SetAttrString((PyObject *) PY_TYPE(StandardTokenizerImpl), "YYEOF", make_descriptor(StandardTokenizerImpl::YYEOF));
            PyObject_SetAttrString((PyObject *) PY_TYPE(StandardTokenizerImpl), "YYINITIAL", make_descriptor(StandardTokenizerImpl::YYINITIAL));
          }

          static PyObject *t_StandardTokenizerImpl_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, StandardTokenizerImpl::initializeClass, 1)))
              return NULL;
            return t_StandardTokenizerImpl::wrap_Object(StandardTokenizerImpl(((t_StandardTokenizerImpl *) arg)->object.this$));
          }
          static PyObject *t_StandardTokenizerImpl_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, StandardTokenizerImpl::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_StandardTokenizerImpl_init_(t_StandardTokenizerImpl *self, PyObject *args, PyObject *kwds)
          {
            ::java::io::Reader a0((jobject) NULL);
            StandardTokenizerImpl object((jobject) NULL);

            if (!parseArgs(args, "k", ::java::io::Reader::initializeClass, &a0))
            {
              INT_CALL(object = StandardTokenizerImpl(a0));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_StandardTokenizerImpl_getNextToken(t_StandardTokenizerImpl *self)
          {
            jint result;
            OBJ_CALL(result = self->object.getNextToken());
            return PyLong_FromLong((long) result);
          }

          static PyObject *t_StandardTokenizerImpl_getText(t_StandardTokenizerImpl *self, PyObject *arg)
          {
            ::org::apache::lucene::analysis::tokenattributes::CharTermAttribute a0((jobject) NULL);

            if (!parseArg(arg, "k", ::org::apache::lucene::analysis::tokenattributes::CharTermAttribute::initializeClass, &a0))
            {
              OBJ_CALL(self->object.getText(a0));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError((PyObject *) self, "getText", arg);
            return NULL;
          }

          static PyObject *t_StandardTokenizerImpl_setBufferSize(t_StandardTokenizerImpl *self, PyObject *arg)
          {
            jint a0;

            if (!parseArg(arg, "I", &a0))
            {
              OBJ_CALL(self->object.setBufferSize(a0));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError((PyObject *) self, "setBufferSize", arg);
            return NULL;
          }

          static PyObject *t_StandardTokenizerImpl_yybegin(t_StandardTokenizerImpl *self, PyObject *arg)
          {
            jint a0;

            if (!parseArg(arg, "I", &a0))
            {
              OBJ_CALL(self->object.yybegin(a0));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError((PyObject *) self, "yybegin", arg);
            return NULL;
          }

          static PyObject *t_StandardTokenizerImpl_yychar(t_StandardTokenizerImpl *self)
          {
            jint result;
            OBJ_CALL(result = self->object.yychar());
            return PyLong_FromLong((long) result);
          }

          static PyObject *t_StandardTokenizerImpl_yycharat(t_StandardTokenizerImpl *self, PyObject *arg)
          {
            jint a0;
            jchar result;

            if (!parseArg(arg, "I", &a0))
            {
              OBJ_CALL(result = self->object.yycharat(a0));
              return c2p(result);
            }

            PyErr_SetArgsError((PyObject *) self, "yycharat", arg);
            return NULL;
          }

          static PyObject *t_StandardTokenizerImpl_yyclose(t_StandardTokenizerImpl *self)
          {
            OBJ_CALL(self->object.yyclose());
            Py_RETURN_NONE;
          }

          static PyObject *t_StandardTokenizerImpl_yylength(t_StandardTokenizerImpl *self)
          {
            jint result;
            OBJ_CALL(result = self->object.yylength());
            return PyLong_FromLong((long) result);
          }

          static PyObject *t_StandardTokenizerImpl_yypushback(t_StandardTokenizerImpl *self, PyObject *arg)
          {
            jint a0;

            if (!parseArg(arg, "I", &a0))
            {
              OBJ_CALL(self->object.yypushback(a0));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError((PyObject *) self, "yypushback", arg);
            return NULL;
          }

          static PyObject *t_StandardTokenizerImpl_yyreset(t_StandardTokenizerImpl *self, PyObject *arg)
          {
            ::java::io::Reader a0((jobject) NULL);

            if (!parseArg(arg, "k", ::java::io::Reader::initializeClass, &a0))
            {
              OBJ_CALL(self->object.yyreset(a0));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError((PyObject *) self, "yyreset", arg);
            return NULL;
          }

          static PyObject *t_StandardTokenizerImpl_yystate(t_StandardTokenizerImpl *self)
          {
            jint result;
            OBJ_CALL(result = self->object.yystate());
            return PyLong_FromLong((long) result);
          }

          static PyObject *t_StandardTokenizerImpl_yytext(t_StandardTokenizerImpl *self)
          {
            ::java::lang::String result((jobject) NULL);
            OBJ_CALL(result = self->object.yytext());
            return j2p(result);
          }

          static int t_StandardTokenizerImpl_set__bufferSize(t_StandardTokenizerImpl *self, PyObject *arg, void *data)
          {
            {
              jint value;
              if (!parseArg(arg, "I", &value))
              {
                INT_CALL(self->object.setBufferSize(value));
                return 0;
              }
            }
            PyErr_SetArgsError((PyObject *) self, "bufferSize", arg);
            return -1;
          }

          static PyObject *t_StandardTokenizerImpl_get__nextToken(t_StandardTokenizerImpl *self, void *data)
          {
            jint value;
            OBJ_CALL(value = self->object.getNextToken());
            return PyLong_FromLong((long) value);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/pattern/PatternTypingFilter$PatternTypingRule.h"
#include "java/util/regex/Pattern.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace pattern {

          ::java::lang::Class *PatternTypingFilter$PatternTypingRule::class$ = NULL;
          jmethodID *PatternTypingFilter$PatternTypingRule::mids$ = NULL;
          bool PatternTypingFilter$PatternTypingRule::live$ = false;

          jclass PatternTypingFilter$PatternTypingRule::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/pattern/PatternTypingFilter$PatternTypingRule");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_1980221f8194a743] = env->getMethodID(cls, "<init>", "(Ljava/util/regex/Pattern;ILjava/lang/String;)V");
              mids$[mid_getFlags_9972fcc56b44e79d] = env->getMethodID(cls, "getFlags", "()I");
              mids$[mid_getPattern_8b5e65d345ff91eb] = env->getMethodID(cls, "getPattern", "()Ljava/util/regex/Pattern;");
              mids$[mid_getTypeTemplate_db9b55ba01e03e4b] = env->getMethodID(cls, "getTypeTemplate", "()Ljava/lang/String;");

              class$ = new ::java::lang::Class(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          PatternTypingFilter$PatternTypingRule::PatternTypingFilter$PatternTypingRule(const ::java::util::regex::Pattern & a0, jint a1, const ::java::lang::String & a2) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_1980221f8194a743, a0.this$, a1, a2.this$)) {}

          jint PatternTypingFilter$PatternTypingRule::getFlags() const
          {
            return env->callIntMethod(this$, mids$[mid_getFlags_9972fcc56b44e79d]);
          }

          ::java::util::regex::Pattern PatternTypingFilter$PatternTypingRule::getPattern() const
          {
            return ::java::util::regex::Pattern(env->callObjectMethod(this$, mids$[mid_getPattern_8b5e65d345ff91eb]));
          }

          ::java::lang::String PatternTypingFilter$PatternTypingRule::getTypeTemplate() const
          {
            return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_getTypeTemplate_db9b55ba01e03e4b]));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace pattern {
          static PyObject *t_PatternTypingFilter$PatternTypingRule_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_PatternTypingFilter$PatternTypingRule_instance_(PyTypeObject *type, PyObject *arg);
          static int t_PatternTypingFilter$PatternTypingRule_init_(t_PatternTypingFilter$PatternTypingRule *self, PyObject *args, PyObject *kwds);
          static PyObject *t_PatternTypingFilter$PatternTypingRule_getFlags(t_PatternTypingFilter$PatternTypingRule *self);
          static PyObject *t_PatternTypingFilter$PatternTypingRule_getPattern(t_PatternTypingFilter$PatternTypingRule *self);
          static PyObject *t_PatternTypingFilter$PatternTypingRule_getTypeTemplate(t_PatternTypingFilter$PatternTypingRule *self);
          static PyObject *t_PatternTypingFilter$PatternTypingRule_get__flags(t_PatternTypingFilter$PatternTypingRule *self, void *data);
          static PyObject *t_PatternTypingFilter$PatternTypingRule_get__pattern(t_PatternTypingFilter$PatternTypingRule *self, void *data);
          static PyObject *t_PatternTypingFilter$PatternTypingRule_get__typeTemplate(t_PatternTypingFilter$PatternTypingRule *self, void *data);
          static PyGetSetDef t_PatternTypingFilter$PatternTypingRule__fields_[] = {
            DECLARE_GET_FIELD(t_PatternTypingFilter$PatternTypingRule, flags),
            DECLARE_GET_FIELD(t_PatternTypingFilter$PatternTypingRule, pattern),
            DECLARE_GET_FIELD(t_PatternTypingFilter$PatternTypingRule, typeTemplate),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_PatternTypingFilter$PatternTypingRule__methods_[] = {
            DECLARE_METHOD(t_PatternTypingFilter$PatternTypingRule, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_PatternTypingFilter$PatternTypingRule, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_PatternTypingFilter$PatternTypingRule, getFlags, METH_NOARGS),
            DECLARE_METHOD(t_PatternTypingFilter$PatternTypingRule, getPattern, METH_NOARGS),
            DECLARE_METHOD(t_PatternTypingFilter$PatternTypingRule, getTypeTemplate, METH_NOARGS),
            { NULL, NULL, 0, NULL }
          };

          static PyType_Slot PY_TYPE_SLOTS(PatternTypingFilter$PatternTypingRule)[] = {
            { Py_tp_methods, t_PatternTypingFilter$PatternTypingRule__methods_ },
            { Py_tp_init, (void *) t_PatternTypingFilter$PatternTypingRule_init_ },
            { Py_tp_getset, t_PatternTypingFilter$PatternTypingRule__fields_ },
            { 0, NULL }
          };

          static PyType_Def *PY_TYPE_BASES(PatternTypingFilter$PatternTypingRule)[] = {
            &PY_TYPE_DEF(::java::lang::Object),
            NULL
          };

          DEFINE_TYPE(PatternTypingFilter$PatternTypingRule, t_PatternTypingFilter$PatternTypingRule, PatternTypingFilter$PatternTypingRule);

          void t_PatternTypingFilter$PatternTypingRule::install(PyObject *module)
          {
            installType(&PY_TYPE(PatternTypingFilter$PatternTypingRule), &PY_TYPE_DEF(PatternTypingFilter$PatternTypingRule), module, "PatternTypingFilter$PatternTypingRule", 0);
          }

          void t_PatternTypingFilter$PatternTypingRule::initialize(PyObject *module)
          {
            PyObject_SetAttrString((PyObject *) PY_TYPE(PatternTypingFilter$PatternTypingRule), "class_", make_descriptor(PatternTypingFilter$PatternTypingRule::initializeClass, 1));
            PyObject_SetAttrString((PyObject *) PY_TYPE(PatternTypingFilter$PatternTypingRule), "wrapfn_", make_descriptor(t_PatternTypingFilter$PatternTypingRule::wrap_jobject));
            PyObject_SetAttrString((PyObject *) PY_TYPE(PatternTypingFilter$PatternTypingRule), "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_PatternTypingFilter$PatternTypingRule_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, PatternTypingFilter$PatternTypingRule::initializeClass, 1)))
              return NULL;
            return t_PatternTypingFilter$PatternTypingRule::wrap_Object(PatternTypingFilter$PatternTypingRule(((t_PatternTypingFilter$PatternTypingRule *) arg)->object.this$));
          }
          static PyObject *t_PatternTypingFilter$PatternTypingRule_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, PatternTypingFilter$PatternTypingRule::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_PatternTypingFilter$PatternTypingRule_init_(t_PatternTypingFilter$PatternTypingRule *self, PyObject *args, PyObject *kwds)
          {
            ::java::util::regex::Pattern a0((jobject) NULL);
            jint a1;
            ::java::lang::String a2((jobject) NULL);
            PatternTypingFilter$PatternTypingRule object((jobject) NULL);

            if (!parseArgs(args, "kIs", ::java::util::regex::Pattern::initializeClass, &a0, &a1, &a2))
            {
              INT_CALL(object = PatternTypingFilter$PatternTypingRule(a0, a1, a2));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_PatternTypingFilter$PatternTypingRule_getFlags(t_PatternTypingFilter$PatternTypingRule *self)
          {
            jint result;
            OBJ_CALL(result = self->object.getFlags());
            return PyLong_FromLong((long) result);
          }

          static PyObject *t_PatternTypingFilter$PatternTypingRule_getPattern(t_PatternTypingFilter$PatternTypingRule *self)
          {
            ::java::util::regex::Pattern result((jobject) NULL);
            OBJ_CALL(result = self->object.getPattern());
            return ::java::util::regex::t_Pattern::wrap_Object(result);
          }

          static PyObject *t_PatternTypingFilter$PatternTypingRule_getTypeTemplate(t_PatternTypingFilter$PatternTypingRule *self)
          {
            ::java::lang::String result((jobject) NULL);
            OBJ_CALL(result = self->object.getTypeTemplate());
            return j2p(result);
          }

          static PyObject *t_PatternTypingFilter$PatternTypingRule_get__flags(t_PatternTypingFilter$PatternTypingRule *self, void *data)
          {
            jint value;
            OBJ_CALL(value = self->object.getFlags());
            return PyLong_FromLong((long) value);
          }

          static PyObject *t_PatternTypingFilter$PatternTypingRule_get__pattern(t_PatternTypingFilter$PatternTypingRule *self, void *data)
          {
            ::java::util::regex::Pattern value((jobject) NULL);
            OBJ_CALL(value = self->object.getPattern());
            return ::java::util::regex::t_Pattern::wrap_Object(value);
          }

          static PyObject *t_PatternTypingFilter$PatternTypingRule_get__typeTemplate(t_PatternTypingFilter$PatternTypingRule *self, void *data)
          {
            ::java::lang::String value((jobject) NULL);
            OBJ_CALL(value = self->object.getTypeTemplate());
            return j2p(value);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/RegexpQuery.h"
#include "java/lang/String.h"
#include "org/apache/lucene/index/Term.h"
#include "org/apache/lucene/util/automaton/AutomatonProvider.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {

        ::java::lang::Class *RegexpQuery::class$ = NULL;
        jmethodID *RegexpQuery::mids$ = NULL;
        bool RegexpQuery::live$ = false;

        jclass RegexpQuery::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/search/RegexpQuery");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_32784f9c0ee449e6] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/index/Term;)V");
            mids$[mid_init$_d948bda7346ba4b9] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/index/Term;I)V");
            mids$[mid_init$_2d22f4c380c508c4] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/index/Term;II)V");
            mids$[mid_init$_f35bd2dd98d84073] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/index/Term;III)V");
            mids$[mid_init$_f72ae8286786d0c4] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/index/Term;ILorg/apache/lucene/util/automaton/AutomatonProvider;I)V");
            mids$[mid_init$_b5886f275db663d5] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/index/Term;IILorg/apache/lucene/util/automaton/AutomatonProvider;I)V");
            mids$[mid_getRegexp_5e734526802c58d9] = env->getMethodID(cls, "getRegexp", "()Lorg/apache/lucene/index/Term;");
            mids$[mid_toString_9bfa75c9f141b67f] = env->getMethodID(cls, "toString", "(Ljava/lang/String;)Ljava/lang/String;");

            class$ = new ::java::lang::Class(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        RegexpQuery::RegexpQuery(const ::org::apache::lucene::index::Term & a0) : ::org::apache::lucene::search::AutomatonQuery(env->newObject(initializeClass, &mids$, mid_init$_32784f9c0ee449e6, a0.this$)) {}

        RegexpQuery::RegexpQuery(const ::org::apache::lucene::index::Term & a0, jint a1) : ::org::apache::lucene::search::AutomatonQuery(env->newObject(initializeClass, &mids$, mid_init$_d948bda7346ba4b9, a0.this$, a1)) {}

        RegexpQuery::RegexpQuery(const ::org::apache::lucene::index::Term & a0, jint a1, jint a2) : ::org::apache::lucene::search::AutomatonQuery(env->newObject(initializeClass, &mids$, mid_init$_2d22f4c380c508c4, a0.this$, a1, a2)) {}

        RegexpQuery::RegexpQuery(const ::org::apache::lucene::index::Term & a0, jint a1, jint a2, jint a3) : ::org::apache::lucene::search::AutomatonQuery(env->newObject(initializeClass, &mids$, mid_init$_f35bd2dd98d84073, a0.this$, a1, a2, a3)) {}

        RegexpQuery::RegexpQuery(const ::org::apache::lucene::index::Term & a0, jint a1, const ::org::apache::lucene::util::automaton::AutomatonProvider & a2, jint a3) : ::org::apache::lucene::search::AutomatonQuery(env->newObject(initializeClass, &mids$, mid_init$_f72ae8286786d0c4, a0.this$, a1, a2.this$, a3)) {}

        RegexpQuery::RegexpQuery(const ::org::apache::lucene::index::Term & a0, jint a1, jint a2, const ::org::apache::lucene::util::automaton::AutomatonProvider & a3, jint a4) : ::org::apache::lucene::search::AutomatonQuery(env->newObject(initializeClass, &mids$, mid_init$_b5886f275db663d5, a0.this$, a1, a2, a3.this$, a4)) {}

        ::org::apache::lucene::index::Term RegexpQuery::getRegexp() const
        {
          return ::org::apache::lucene::index::Term(env->callObjectMethod(this$, mids$[mid_getRegexp_5e734526802c58d9]));
        }

        ::java::lang::String RegexpQuery::toString(const ::java::lang::String & a0) const
        {
          return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_9bfa75c9f141b67f], a0.this$));
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        static PyObject *t_RegexpQuery_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_RegexpQuery_instance_(PyTypeObject *type, PyObject *arg);
        static int t_RegexpQuery_init_(t_RegexpQuery *self, PyObject *args, PyObject *kwds);
        static PyObject *t_RegexpQuery_getRegexp(t_RegexpQuery *self);
        static PyObject *t_RegexpQuery_toString(t_RegexpQuery *self, PyObject *args);
        static PyObject *t_RegexpQuery_get__regexp(t_RegexpQuery *self, void *data);
        static PyGetSetDef t_RegexpQuery__fields_[] = {
          DECLARE_GET_FIELD(t_RegexpQuery, regexp),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_RegexpQuery__methods_[] = {
          DECLARE_METHOD(t_RegexpQuery, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_RegexpQuery, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_RegexpQuery, getRegexp, METH_NOARGS),
          DECLARE_METHOD(t_RegexpQuery, toString, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        static PyType_Slot PY_TYPE_SLOTS(RegexpQuery)[] = {
          { Py_tp_methods, t_RegexpQuery__methods_ },
          { Py_tp_init, (void *) t_RegexpQuery_init_ },
          { Py_tp_getset, t_RegexpQuery__fields_ },
          { 0, NULL }
        };

        static PyType_Def *PY_TYPE_BASES(RegexpQuery)[] = {
          &PY_TYPE_DEF(::org::apache::lucene::search::AutomatonQuery),
          NULL
        };

        DEFINE_TYPE(RegexpQuery, t_RegexpQuery, RegexpQuery);

        void t_RegexpQuery::install(PyObject *module)
        {
          installType(&PY_TYPE(RegexpQuery), &PY_TYPE_DEF(RegexpQuery), module, "RegexpQuery", 0);
        }

        void t_RegexpQuery::initialize(PyObject *module)
        {
          PyObject_SetAttrString((PyObject *) PY_TYPE(RegexpQuery), "class_", make_descriptor(RegexpQuery::initializeClass, 1));
          PyObject_SetAttrString((PyObject *) PY_TYPE(RegexpQuery), "wrapfn_", make_descriptor(t_RegexpQuery::wrap_jobject));
          PyObject_SetAttrString((PyObject *) PY_TYPE(RegexpQuery), "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_RegexpQuery_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, RegexpQuery::initializeClass, 1)))
            return NULL;
          return t_RegexpQuery::wrap_Object(RegexpQuery(((t_RegexpQuery *) arg)->object.this$));
        }
        static PyObject *t_RegexpQuery_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, RegexpQuery::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_RegexpQuery_init_(t_RegexpQuery *self, PyObject *args, PyObject *kwds)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 1:
            {
              ::org::apache::lucene::index::Term a0((jobject) NULL);
              RegexpQuery object((jobject) NULL);

              if (!parseArgs(args, "k", ::org::apache::lucene::index::Term::initializeClass, &a0))
              {
                INT_CALL(object = RegexpQuery(a0));
                self->object = object;
                break;
              }
            }
            goto err;
           case 2:
            {
              ::org::apache::lucene::index::Term a0((jobject) NULL);
              jint a1;
              RegexpQuery object((jobject) NULL);

              if (!parseArgs(args, "kI", ::org::apache::lucene::index::Term::initializeClass, &a0, &a1))
              {
                INT_CALL(object = RegexpQuery(a0, a1));
                self->object = object;
                break;
              }
            }
            goto err;
           case 3:
            {
              ::org::apache::lucene::index::Term a0((jobject) NULL);
              jint a1;
              jint a2;
              RegexpQuery object((jobject) NULL);

              if (!parseArgs(args, "kII", ::org::apache::lucene::index::Term::initializeClass, &a0, &a1, &a2))
              {
                INT_CALL(object = RegexpQuery(a0, a1, a2));
                self->object = object;
                break;
              }
            }
            goto err;
           case 4:
            {
              ::org::apache::lucene::index::Term a0((jobject) NULL);
              jint a1;
              jint a2;
              jint a3;
              RegexpQuery object((jobject) NULL);

              if (!parseArgs(args, "kIII", ::org::apache::lucene::index::Term::initializeClass, &a0, &a1, &a2, &a3))
              {
                INT_CALL(object = RegexpQuery(a0, a1, a2, a3));
                self->object = object;
                break;
              }
            }
            {
              ::org::apache::lucene::index::Term a0((jobject) NULL);
              jint a1;
              ::org::apache::lucene::util::automaton::AutomatonProvider a2((jobject) NULL);
              jint a3;
              RegexpQuery object((jobject) NULL);

              if (!parseArgs(args, "kIkI", ::org::apache::lucene::index::Term::initializeClass, ::org::apache::lucene::util::automaton::AutomatonProvider::initializeClass, &a0, &a1, &a2, &a3))
              {
                INT_CALL(object = RegexpQuery(a0, a1, a2, a3));
                self->object = object;
                break;
              }
            }
            goto err;
           case 5:
            {
              ::org::apache::lucene::index::Term a0((jobject) NULL);
              jint a1;
              jint a2;
              ::org::apache::lucene::util::automaton::AutomatonProvider a3((jobject) NULL);
              jint a4;
              RegexpQuery object((jobject) NULL);

              if (!parseArgs(args, "kIIkI", ::org::apache::lucene::index::Term::initializeClass, ::org::apache::lucene::util::automaton::AutomatonProvider::initializeClass, &a0, &a1, &a2, &a3, &a4))
              {
                INT_CALL(object = RegexpQuery(a0, a1, a2, a3, a4));
                self->object = object;
                break;
              }
            }
           default:
           err:
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }

        static PyObject *t_RegexpQuery_getRegexp(t_RegexpQuery *self)
        {
          ::org::apache::lucene::index::Term result((jobject) NULL);
          OBJ_CALL(result = self->object.getRegexp());
          return ::org::apache::lucene::index::t_Term::wrap_Object(result);
        }

        static PyObject *t_RegexpQuery_toString(t_RegexpQuery *self, PyObject *args)
        {
          ::java::lang::String a0((jobject) NULL);
          ::java::lang::String result((jobject) NULL);

          if (!parseArgs(args, "s", &a0))
          {
            OBJ_CALL(result = self->object.toString(a0));
            return j2p(result);
          }

          return callSuper(PY_TYPE(RegexpQuery), (PyObject *) self, "toString", args, 2);
        }

        static PyObject *t_RegexpQuery_get__regexp(t_RegexpQuery *self, void *data)
        {
          ::org::apache::lucene::index::Term value((jobject) NULL);
          OBJ_CALL(value = self->object.getRegexp());
          return ::org::apache::lucene::index::t_Term::wrap_Object(value);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/store/IOContext.h"
#include "org/apache/lucene/store/IOContext.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/store/FlushInfo.h"
#include "org/apache/lucene/store/MergeInfo.h"
#include "java/lang/String.h"
#include "org/apache/lucene/store/IOContext$Context.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace store {

        ::java::lang::Class *IOContext::class$ = NULL;
        jmethodID *IOContext::mids$ = NULL;
        jfieldID *IOContext::fids$ = NULL;
        bool IOContext::live$ = false;
        IOContext *IOContext::DEFAULT = NULL;
        IOContext *IOContext::READ = NULL;
        IOContext *IOContext::READONCE = NULL;

        jclass IOContext::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/store/IOContext");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_f2cc1bce94666404] = env->getMethodID(cls, "<init>", "()V");
            mids$[mid_init$_8897978edf843878] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/store/IOContext$Context;)V");
            mids$[mid_init$_23fae1dd76741319] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/store/FlushInfo;)V");
            mids$[mid_init$_4557bd3f2eec88bc] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/store/MergeInfo;)V");
            mids$[mid_init$_de1b75c1c9501eab] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/store/IOContext;Z)V");
            mids$[mid_equals_8b72f2dcdde6fd1d] = env->getMethodID(cls, "equals", "(Ljava/lang/Object;)Z");
            mids$[mid_hashCode_9972fcc56b44e79d] = env->getMethodID(cls, "hashCode", "()I");
            mids$[mid_toString_db9b55ba01e03e4b] = env->getMethodID(cls, "toString", "()Ljava/lang/String;");

            fids$ = new jfieldID[max_fid];
            fids$[fid_context] = env->getFieldID(cls, "context", "Lorg/apache/lucene/store/IOContext$Context;");
            fids$[fid_flushInfo] = env->getFieldID(cls, "flushInfo", "Lorg/apache/lucene/store/FlushInfo;");
            fids$[fid_mergeInfo] = env->getFieldID(cls, "mergeInfo", "Lorg/apache/lucene/store/MergeInfo;");
            fids$[fid_readOnce] = env->getFieldID(cls, "readOnce", "Z");

            class$ = new ::java::lang::Class(cls);
            cls = (jclass) class$->this$;

            DEFAULT = new IOContext(env->getStaticObjectField(cls, "DEFAULT", "Lorg/apache/lucene/store/IOContext;"));
            READ = new IOContext(env->getStaticObjectField(cls, "READ", "Lorg/apache/lucene/store/IOContext;"));
            READONCE = new IOContext(env->getStaticObjectField(cls, "READONCE", "Lorg/apache/lucene/store/IOContext;"));
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        IOContext::IOContext() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_f2cc1bce94666404)) {}

        IOContext::IOContext(const ::org::apache::lucene::store::IOContext$Context & a0) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_8897978edf843878, a0.this$)) {}

        IOContext::IOContext(const ::org::apache::lucene::store::FlushInfo & a0) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_23fae1dd76741319, a0.this$)) {}

        IOContext::IOContext(const ::org::apache::lucene::store::MergeInfo & a0) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_4557bd3f2eec88bc, a0.this$)) {}

        IOContext::IOContext(const IOContext & a0, jboolean a1) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_de1b75c1c9501eab, a0.this$, a1)) {}

        jboolean IOContext::equals(const ::java::lang::Object & a0) const
        {
          return env->callBooleanMethod(this$, mids$[mid_equals_8b72f2dcdde6fd1d], a0.this$);
        }

        jint IOContext::hashCode() const
        {
          return env->callIntMethod(this$, mids$[mid_hashCode_9972fcc56b44e79d]);
        }

        ::java::lang::String IOContext::toString() const
        {
          return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_db9b55ba01e03e4b]));
        }

        ::org::apache::lucene::store::IOContext$Context IOContext::_get_context() const
        {
          return ::org::apache::lucene::store::IOContext$Context(env->getObjectField(this$, fids$[fid_context]));
        }

        ::org::apache::lucene::store::FlushInfo IOContext::_get_flushInfo() const
        {
          return ::org::apache::lucene::store::FlushInfo(env->getObjectField(this$, fids$[fid_flushInfo]));
        }

        ::org::apache::lucene::store::MergeInfo IOContext::_get_mergeInfo() const
        {
          return ::org::apache::lucene::store::MergeInfo(env->getObjectField(this$, fids$[fid_mergeInfo]));
        }

        jboolean IOContext::_get_readOnce() const
        {
          return env->getBooleanField(this$, fids$[fid_readOnce]);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace store {
        static PyObject *t_IOContext_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_IOContext_instance_(PyTypeObject *type, PyObject *arg);
        static int t_IOContext_init_(t_IOContext *self, PyObject *args, PyObject *kwds);
        static PyObject *t_IOContext_equals(t_IOContext *self, PyObject *args);
        static PyObject *t_IOContext_hashCode(t_IOContext *self, PyObject *args);
        static PyObject *t_IOContext_toString(t_IOContext *self, PyObject *args);
        static PyObject *t_IOContext_get__context(t_IOContext *self, void *data);
        static PyObject *t_IOContext_get__flushInfo(t_IOContext *self, void *data);
        static PyObject *t_IOContext_get__mergeInfo(t_IOContext *self, void *data);
        static PyObject *t_IOContext_get__readOnce(t_IOContext *self, void *data);

        static PyGetSetDef t_IOContext__fields_[] = {
          DECLARE_GET_FIELD(t_IOContext, context),
          DECLARE_GET_FIELD(t_IOContext, flushInfo),
          DECLARE_GET_FIELD(t_IOContext, mergeInfo),
          DECLARE_GET_FIELD(t_IOContext, readOnce),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_IOContext__methods_[] = {
          DECLARE_METHOD(t_IOContext, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_IOContext, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_IOContext, equals, METH_VARARGS),
          DECLARE_METHOD(t_IOContext, hashCode, METH_VARARGS),
          DECLARE_METHOD(t_IOContext, toString, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        static PyType_Slot PY_TYPE_SLOTS(IOContext)[] = {
          { Py_tp_methods, t_IOContext__methods_ },
          { Py_tp_init, (void *) t_IOContext_init_ },
          { Py_tp_getset, t_IOContext__fields_ },
          { 0, NULL }
        };

        static PyType_Def *PY_TYPE_BASES(IOContext)[] = {
          &PY_TYPE_DEF(::java::lang::Object),
          NULL
        };

        DEFINE_TYPE(IOContext, t_IOContext, IOContext);

        void t_IOContext::install(PyObject *module)
        {
          installType(&PY_TYPE(IOContext), &PY_TYPE_DEF(IOContext), module, "IOContext", 0);
          PyObject_SetAttrString((PyObject *) PY_TYPE(IOContext), "Context", make_descriptor(&PY_TYPE_DEF(IOContext$Context)));
        }

        void t_IOContext::initialize(PyObject *module)
        {
          PyObject_SetAttrString((PyObject *) PY_TYPE(IOContext), "class_", make_descriptor(IOContext::initializeClass, 1));
          PyObject_SetAttrString((PyObject *) PY_TYPE(IOContext), "wrapfn_", make_descriptor(t_IOContext::wrap_jobject));
          PyObject_SetAttrString((PyObject *) PY_TYPE(IOContext), "boxfn_", make_descriptor(boxObject));
          env->getClass(IOContext::initializeClass);
          PyObject_SetAttrString((PyObject *) PY_TYPE(IOContext), "DEFAULT", make_descriptor(t_IOContext::wrap_Object(*IOContext::DEFAULT)));
          PyObject_SetAttrString((PyObject *) PY_TYPE(IOContext), "READ", make_descriptor(t_IOContext::wrap_Object(*IOContext::READ)));
          PyObject_SetAttrString((PyObject *) PY_TYPE(IOContext), "READONCE", make_descriptor(t_IOContext::wrap_Object(*IOContext::READONCE)));
        }

        static PyObject *t_IOContext_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, IOContext::initializeClass, 1)))
            return NULL;
          return t_IOContext::wrap_Object(IOContext(((t_IOContext *) arg)->object.this$));
        }
        static PyObject *t_IOContext_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, IOContext::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_IOContext_init_(t_IOContext *self, PyObject *args, PyObject *kwds)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 0:
            {
              IOContext object((jobject) NULL);

              INT_CALL(object = IOContext());
              self->object = object;
              break;
            }
           case 1:
            {
              ::org::apache::lucene::store::IOContext$Context a0((jobject) NULL);
              PyTypeObject **p0;
              IOContext object((jobject) NULL);

              if (!parseArgs(args, "K", ::org::apache::lucene::store::IOContext$Context::initializeClass, &a0, &p0, ::org::apache::lucene::store::t_IOContext$Context::parameters_))
              {
                INT_CALL(object = IOContext(a0));
                self->object = object;
                break;
              }
            }
            {
              ::org::apache::lucene::store::FlushInfo a0((jobject) NULL);
              IOContext object((jobject) NULL);

              if (!parseArgs(args, "k", ::org::apache::lucene::store::FlushInfo::initializeClass, &a0))
              {
                INT_CALL(object = IOContext(a0));
                self->object = object;
                break;
              }
            }
            {
              ::org::apache::lucene::store::MergeInfo a0((jobject) NULL);
              IOContext object((jobject) NULL);

              if (!parseArgs(args, "k", ::org::apache::lucene::store::MergeInfo::initializeClass, &a0))
              {
                INT_CALL(object = IOContext(a0));
                self->object = object;
                break;
              }
            }
            goto err;
           case 2:
            {
              IOContext a0((jobject) NULL);
              jboolean a1;
              IOContext object((jobject) NULL);

              if (!parseArgs(args, "kZ", IOContext::initializeClass, &a0, &a1))
              {
                INT_CALL(object = IOContext(a0, a1));
                self->object = object;
                break;
              }
            }
           default:
           err:
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }

        static PyObject *t_IOContext_equals(t_IOContext *self, PyObject *args)
        {
          ::java::lang::Object a0((jobject) NULL);
          jboolean result;

          if (!parseArgs(args, "o", &a0))
          {
            OBJ_CALL(result = self->object.equals(a0));
            Py_RETURN_BOOL(result);
          }

          return callSuper(PY_TYPE(IOContext), (PyObject *) self, "equals", args, 2);
        }

        static PyObject *t_IOContext_hashCode(t_IOContext *self, PyObject *args)
        {
          jint result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.hashCode());
            return PyLong_FromLong((long) result);
          }

          return callSuper(PY_TYPE(IOContext), (PyObject *) self, "hashCode", args, 2);
        }

        static PyObject *t_IOContext_toString(t_IOContext *self, PyObject *args)
        {
          ::java::lang::String result((jobject) NULL);

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.toString());
            return j2p(result);
          }

          return callSuper(PY_TYPE(IOContext), (PyObject *) self, "toString", args, 2);
        }

        static PyObject *t_IOContext_get__context(t_IOContext *self, void *data)
        {
          ::org::apache::lucene::store::IOContext$Context value((jobject) NULL);
          OBJ_CALL(value = self->object._get_context());
          return ::org::apache::lucene::store::t_IOContext$Context::wrap_Object(value);
        }

        static PyObject *t_IOContext_get__flushInfo(t_IOContext *self, void *data)
        {
          ::org::apache::lucene::store::FlushInfo value((jobject) NULL);
          OBJ_CALL(value = self->object._get_flushInfo());
          return ::org::apache::lucene::store::t_FlushInfo::wrap_Object(value);
        }

        static PyObject *t_IOContext_get__mergeInfo(t_IOContext *self, void *data)
        {
          ::org::apache::lucene::store::MergeInfo value((jobject) NULL);
          OBJ_CALL(value = self->object._get_mergeInfo());
          return ::org::apache::lucene::store::t_MergeInfo::wrap_Object(value);
        }

        static PyObject *t_IOContext_get__readOnce(t_IOContext *self, void *data)
        {
          jboolean value;
          OBJ_CALL(value = self->object._get_readOnce());
          Py_RETURN_BOOL(value);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/util/Sorter.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {

        ::java::lang::Class *Sorter::class$ = NULL;
        jmethodID *Sorter::mids$ = NULL;
        bool Sorter::live$ = false;

        jclass Sorter::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/util/Sorter");

            mids$ = new jmethodID[max_mid];
            mids$[mid_sort_438c62480c481c65] = env->getMethodID(cls, "sort", "(II)V");
            mids$[mid_comparePivot_1e143afe1894d213] = env->getMethodID(cls, "comparePivot", "(I)I");
            mids$[mid_setPivot_040c4cd0390c5aff] = env->getMethodID(cls, "setPivot", "(I)V");
            mids$[mid_compare_57a58545eba514db] = env->getMethodID(cls, "compare", "(II)I");
            mids$[mid_swap_438c62480c481c65] = env->getMethodID(cls, "swap", "(II)V");

            class$ = new ::java::lang::Class(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        void Sorter::sort(jint a0, jint a1) const
        {
          env->callVoidMethod(this$, mids$[mid_sort_438c62480c481c65], a0, a1);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        static PyObject *t_Sorter_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_Sorter_instance_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_Sorter_sort(t_Sorter *self, PyObject *args);

        static PyMethodDef t_Sorter__methods_[] = {
          DECLARE_METHOD(t_Sorter, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_Sorter, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_Sorter, sort, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        static PyType_Slot PY_TYPE_SLOTS(Sorter)[] = {
          { Py_tp_methods, t_Sorter__methods_ },
          { Py_tp_init, (void *) abstract_init },
          { 0, NULL }
        };

        static PyType_Def *PY_TYPE_BASES(Sorter)[] = {
          &PY_TYPE_DEF(::java::lang::Object),
          NULL
        };

        DEFINE_TYPE(Sorter, t_Sorter, Sorter);

        void t_Sorter::install(PyObject *module)
        {
          installType(&PY_TYPE(Sorter), &PY_TYPE_DEF(Sorter), module, "Sorter", 0);
        }

        void t_Sorter::initialize(PyObject *module)
        {
          PyObject_SetAttrString((PyObject *) PY_TYPE(Sorter), "class_", make_descriptor(Sorter::initializeClass, 1));
          PyObject_SetAttrString((PyObject *) PY_TYPE(Sorter), "wrapfn_", make_descriptor(t_Sorter::wrap_jobject));
          PyObject_SetAttrString((PyObject *) PY_TYPE(Sorter), "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_Sorter_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, Sorter::initializeClass, 1)))
            return NULL;
          return t_Sorter::wrap_Object(Sorter(((t_Sorter *) arg)->object.this$));
        }
        static PyObject *t_Sorter_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, Sorter::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static PyObject *t_Sorter_sort(t_Sorter *self, PyObject *args)
        {
          jint a0;
          jint a1;

          if (!parseArgs(args, "II", &a0, &a1))
          {
            OBJ_CALL(self->object.sort(a0, a1));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "sort", args);
          return NULL;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/pt/PortugueseLightStemFilterFactory.h"
#include "java/util/Map.h"
#include "java/lang/String.h"
#include "org/apache/lucene/analysis/TokenStream.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace pt {

          ::java::lang::Class *PortugueseLightStemFilterFactory::class$ = NULL;
          jmethodID *PortugueseLightStemFilterFactory::mids$ = NULL;
          bool PortugueseLightStemFilterFactory::live$ = false;
          ::java::lang::String *PortugueseLightStemFilterFactory::NAME = NULL;

          jclass PortugueseLightStemFilterFactory::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/pt/PortugueseLightStemFilterFactory");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_408bd889ee3beae5] = env->getMethodID(cls, "<init>", "(Ljava/util/Map;)V");
              mids$[mid_create_6de1e28d9d10cd9e] = env->getMethodID(cls, "create", "(Lorg/apache/lucene/analysis/TokenStream;)Lorg/apache/lucene/analysis/TokenStream;");

              class$ = new ::java::lang::Class(cls);
              cls = (jclass) class$->this$;

              NAME = new ::java::lang::String(env->getStaticObjectField(cls, "NAME", "Ljava/lang/String;"));
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          PortugueseLightStemFilterFactory::PortugueseLightStemFilterFactory(const ::java::util::Map & a0) : ::org::apache::lucene::analysis::util::TokenFilterFactory(env->newObject(initializeClass, &mids$, mid_init$_408bd889ee3beae5, a0.this$)) {}

          ::org::apache::lucene::analysis::TokenStream PortugueseLightStemFilterFactory::create(const ::org::apache::lucene::analysis::TokenStream & a0) const
          {
            return ::org::apache::lucene::analysis::TokenStream(env->callObjectMethod(this$, mids$[mid_create_6de1e28d9d10cd9e], a0.this$));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace pt {
          static PyObject *t_PortugueseLightStemFilterFactory_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_PortugueseLightStemFilterFactory_instance_(PyTypeObject *type, PyObject *arg);
          static int t_PortugueseLightStemFilterFactory_init_(t_PortugueseLightStemFilterFactory *self, PyObject *args, PyObject *kwds);
          static PyObject *t_PortugueseLightStemFilterFactory_create(t_PortugueseLightStemFilterFactory *self, PyObject *args);

          static PyMethodDef t_PortugueseLightStemFilterFactory__methods_[] = {
            DECLARE_METHOD(t_PortugueseLightStemFilterFactory, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_PortugueseLightStemFilterFactory, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_PortugueseLightStemFilterFactory, create, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          static PyType_Slot PY_TYPE_SLOTS(PortugueseLightStemFilterFactory)[] = {
            { Py_tp_methods, t_PortugueseLightStemFilterFactory__methods_ },
            { Py_tp_init, (void *) t_PortugueseLightStemFilterFactory_init_ },
            { 0, NULL }
          };

          static PyType_Def *PY_TYPE_BASES(PortugueseLightStemFilterFactory)[] = {
            &PY_TYPE_DEF(::org::apache::lucene::analysis::util::TokenFilterFactory),
            NULL
          };

          DEFINE_TYPE(PortugueseLightStemFilterFactory, t_PortugueseLightStemFilterFactory, PortugueseLightStemFilterFactory);

          void t_PortugueseLightStemFilterFactory::install(PyObject *module)
          {
            installType(&PY_TYPE(PortugueseLightStemFilterFactory), &PY_TYPE_DEF(PortugueseLightStemFilterFactory), module, "PortugueseLightStemFilterFactory", 0);
          }

          void t_PortugueseLightStemFilterFactory::initialize(PyObject *module)
          {
            PyObject_SetAttrString((PyObject *) PY_TYPE(PortugueseLightStemFilterFactory), "class_", make_descriptor(PortugueseLightStemFilterFactory::initializeClass, 1));
            PyObject_SetAttrString((PyObject *) PY_TYPE(PortugueseLightStemFilterFactory), "wrapfn_", make_descriptor(t_PortugueseLightStemFilterFactory::wrap_jobject));
            PyObject_SetAttrString((PyObject *) PY_TYPE(PortugueseLightStemFilterFactory), "boxfn_", make_descriptor(boxObject));
            env->getClass(PortugueseLightStemFilterFactory::initializeClass);
            PyObject_SetAttrString((PyObject *) PY_TYPE(PortugueseLightStemFilterFactory), "NAME", make_descriptor(j2p(*PortugueseLightStemFilterFactory::NAME)));
          }

          static PyObject *t_PortugueseLightStemFilterFactory_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, PortugueseLightStemFilterFactory::initializeClass, 1)))
              return NULL;
            return t_PortugueseLightStemFilterFactory::wrap_Object(PortugueseLightStemFilterFactory(((t_PortugueseLightStemFilterFactory *) arg)->object.this$));
          }
          static PyObject *t_PortugueseLightStemFilterFactory_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, PortugueseLightStemFilterFactory::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_PortugueseLightStemFilterFactory_init_(t_PortugueseLightStemFilterFactory *self, PyObject *args, PyObject *kwds)
          {
            ::java::util::Map a0((jobject) NULL);
            PyTypeObject **p0;
            PortugueseLightStemFilterFactory object((jobject) NULL);

            if (!parseArgs(args, "K", ::java::util::Map::initializeClass, &a0, &p0, ::java::util::t_Map::parameters_))
            {
              INT_CALL(object = PortugueseLightStemFilterFactory(a0));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_PortugueseLightStemFilterFactory_create(t_PortugueseLightStemFilterFactory *self, PyObject *args)
          {
            ::org::apache::lucene::analysis::TokenStream a0((jobject) NULL);
            ::org::apache::lucene::analysis::TokenStream result((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::analysis::TokenStream::initializeClass, &a0))
            {
              OBJ_CALL(result = self->object.create(a0));
              return ::org::apache::lucene::analysis::t_TokenStream::wrap_Object(result);
            }

            return callSuper(PY_TYPE(PortugueseLightStemFilterFactory), (PyObject *) self, "create", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queries/intervals/IntervalIterator.h"
#include "java/lang/String.h"
#include "java/io/IOException.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queries {
        namespace intervals {

          ::java::lang::Class *IntervalIterator::class$ = NULL;
          jmethodID *IntervalIterator::mids$ = NULL;
          bool IntervalIterator::live$ = false;
          jint IntervalIterator::NO_MORE_INTERVALS = (jint) 0;

          jclass IntervalIterator::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/queries/intervals/IntervalIterator");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_f2cc1bce94666404] = env->getMethodID(cls, "<init>", "()V");
              mids$[mid_end_9972fcc56b44e79d] = env->getMethodID(cls, "end", "()I");
              mids$[mid_gaps_9972fcc56b44e79d] = env->getMethodID(cls, "gaps", "()I");
              mids$[mid_matchCost_58aec2b64dff50c8] = env->getMethodID(cls, "matchCost", "()F");
              mids$[mid_nextInterval_9972fcc56b44e79d] = env->getMethodID(cls, "nextInterval", "()I");
              mids$[mid_start_9972fcc56b44e79d] = env->getMethodID(cls, "start", "()I");
              mids$[mid_toString_db9b55ba01e03e4b] = env->getMethodID(cls, "toString", "()Ljava/lang/String;");
              mids$[mid_width_9972fcc56b44e79d] = env->getMethodID(cls, "width", "()I");

              class$ = new ::java::lang::Class(cls);
              cls = (jclass) class$->this$;

              NO_MORE_INTERVALS = env->getStaticIntField(cls, "NO_MORE_INTERVALS");
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          IntervalIterator::IntervalIterator() : ::org::apache::lucene::search::DocIdSetIterator(env->newObject(initializeClass, &mids$, mid_init$_f2cc1bce94666404)) {}

          jint IntervalIterator::end() const
          {
            return env->callIntMethod(this$, mids$[mid_end_9972fcc56b44e79d]);
          }

          jint IntervalIterator::gaps() const
          {
            return env->callIntMethod(this$, mids$[mid_gaps_9972fcc56b44e79d]);
          }

          jfloat IntervalIterator::matchCost() const
          {
            return env->callFloatMethod(this$, mids$[mid_matchCost_58aec2b64dff50c8]);
          }

          jint IntervalIterator::nextInterval() const
          {
            return env->callIntMethod(this$, mids$[mid_nextInterval_9972fcc56b44e79d]);
          }

          jint IntervalIterator::start() const
          {
            return env->callIntMethod(this$, mids$[mid_start_9972fcc56b44e79d]);
          }

          ::java::lang::String IntervalIterator::toString() const
          {
            return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_db9b55ba01e03e4b]));
          }

          jint IntervalIterator::width() const
          {
            return env->callIntMethod(this$, mids$[mid_width_9972fcc56b44e79d]);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queries {
        namespace intervals {
          static PyObject *t_IntervalIterator_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_IntervalIterator_instance_(PyTypeObject *type, PyObject *arg);
          static int t_IntervalIterator_init_(t_IntervalIterator *self, PyObject *args, PyObject *kwds);
          static PyObject *t_IntervalIterator_end(t_IntervalIterator *self);
          static PyObject *t_IntervalIterator_gaps(t_IntervalIterator *self);
          static PyObject *t_IntervalIterator_matchCost(t_IntervalIterator *self);
          static PyObject *t_IntervalIterator_nextInterval(t_IntervalIterator *self);
          static PyObject *t_IntervalIterator_start(t_IntervalIterator *self);
          static PyObject *t_IntervalIterator_toString(t_IntervalIterator *self, PyObject *args);
          static PyObject *t_IntervalIterator_width(t_IntervalIterator *self);

          static PyMethodDef t_IntervalIterator__methods_[] = {
            DECLARE_METHOD(t_IntervalIterator, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_IntervalIterator, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_IntervalIterator, end, METH_NOARGS),
            DECLARE_METHOD(t_IntervalIterator, gaps, METH_NOARGS),
            DECLARE_METHOD(t_IntervalIterator, matchCost, METH_NOARGS),
            DECLARE_METHOD(t_IntervalIterator, nextInterval, METH_NOARGS),
            DECLARE_METHOD(t_IntervalIterator, start, METH_NOARGS),
            DECLARE_METHOD(t_IntervalIterator, toString, METH_VARARGS),
            DECLARE_METHOD(t_IntervalIterator, width, METH_NOARGS),
            { NULL, NULL, 0, NULL }
          };

          static PyType_Slot PY_TYPE_SLOTS(IntervalIterator)[] = {
            { Py_tp_methods, t_IntervalIterator__methods_ },
            { Py_tp_init, (void *) t_IntervalIterator_init_ },
            { 0, NULL }
          };

          static PyType_Def *PY_TYPE_BASES(IntervalIterator)[] = {
            &PY_TYPE_DEF(::org::apache::lucene::search::DocIdSetIterator),
            NULL
          };

          DEFINE_TYPE(IntervalIterator, t_IntervalIterator, IntervalIterator);

          void t_IntervalIterator::install(PyObject *module)
          {
            installType(&PY_TYPE(IntervalIterator), &PY_TYPE_DEF(IntervalIterator), module, "IntervalIterator", 0);
          }

          void t_IntervalIterator::initialize(PyObject *module)
          {
            PyObject_SetAttrString((PyObject *) PY_TYPE(IntervalIterator), "class_", make_descriptor(IntervalIterator::initializeClass, 1));
            PyObject_SetAttrString((PyObject *) PY_TYPE(IntervalIterator), "wrapfn_", make_descriptor(t_IntervalIterator::wrap_jobject));
            PyObject_SetAttrString((PyObject *) PY_TYPE(IntervalIterator), "boxfn_", make_descriptor(boxObject));
            env->getClass(IntervalIterator::initializeClass);
            PyObject_SetAttrString((PyObject *) PY_TYPE(IntervalIterator), "NO_MORE_INTERVALS", make_descriptor(IntervalIterator::NO_MORE_INTERVALS));
          }

          static PyObject *t_IntervalIterator_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, IntervalIterator::initializeClass, 1)))
              return NULL;
            return t_IntervalIterator::wrap_Object(IntervalIterator(((t_IntervalIterator *) arg)->object.this$));
          }
          static PyObject *t_IntervalIterator_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, IntervalIterator::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_IntervalIterator_init_(t_IntervalIterator *self, PyObject *args, PyObject *kwds)
          {
            IntervalIterator object((jobject) NULL);

            INT_CALL(object = IntervalIterator());
            self->object = object;

            return 0;
          }

          static PyObject *t_IntervalIterator_end(t_IntervalIterator *self)
          {
            jint result;
            OBJ_CALL(result = self->object.end());
            return PyLong_FromLong((long) result);
          }

          static PyObject *t_IntervalIterator_gaps(t_IntervalIterator *self)
          {
            jint result;
            OBJ_CALL(result = self->object.gaps());
            return PyLong_FromLong((long) result);
          }

          static PyObject *t_IntervalIterator_matchCost(t_IntervalIterator *self)
          {
            jfloat result;
            OBJ_CALL(result = self->object.matchCost());
            return PyFloat_FromDouble((double) result);
          }

          static PyObject *t_IntervalIterator_nextInterval(t_IntervalIterator *self)
          {
            jint result;
            OBJ_CALL(result = self->object.nextInterval());
            return PyLong_FromLong((long) result);
          }

          static PyObject *t_IntervalIterator_start(t_IntervalIterator *self)
          {
            jint result;
            OBJ_CALL(result = self->object.start());
            return PyLong_FromLong((long) result);
          }

          static PyObject *t_IntervalIterator_toString(t_IntervalIterator *self, PyObject *args)
          {
            ::java::lang::String result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.toString());
              return j2p(result);
            }

            return callSuper(PY_TYPE(IntervalIterator), (PyObject *) self, "toString", args, 2);
          }

          static PyObject *t_IntervalIterator_width(t_IntervalIterator *self)
          {
            jint result;
            OBJ_CALL(result = self->object.width());
            return PyLong_FromLong((long) result);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/misc/index/BinaryDocValueSelector.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/store/Directory.h"
#include "org/apache/lucene/index/CodecReader.h"
#include "java/util/HashSet.h"
#include "java/lang/String.h"
#include "org/apache/lucene/misc/index/IndexRearranger$DocumentSelector.h"
#include "java/io/IOException.h"
#include "java/util/List.h"
#include "java/io/Serializable.h"
#include "org/apache/lucene/util/BitSet.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace misc {
        namespace index {

          ::java::lang::Class *BinaryDocValueSelector::class$ = NULL;
          jmethodID *BinaryDocValueSelector::mids$ = NULL;
          bool BinaryDocValueSelector::live$ = false;

          jclass BinaryDocValueSelector::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/misc/index/BinaryDocValueSelector");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_409a24e3478be9f5] = env->getMethodID(cls, "<init>", "(Ljava/lang/String;Ljava/util/HashSet;)V");
              mids$[mid_createFromExistingIndex_c1b5b4784612f985] = env->getStaticMethodID(cls, "createFromExistingIndex", "(Ljava/lang/String;Lorg/apache/lucene/store/Directory;)Ljava/util/List;");
              mids$[mid_getFilteredLiveDocs_f08bfd32ceb5c39a] = env->getMethodID(cls, "getFilteredLiveDocs", "(Lorg/apache/lucene/index/CodecReader;)Lorg/apache/lucene/util/BitSet;");

              class$ = new ::java::lang::Class(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          BinaryDocValueSelector::BinaryDocValueSelector(const ::java::lang::String & a0, const ::java::util::HashSet & a1) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_409a24e3478be9f5, a0.this$, a1.this$)) {}

          ::java::util::List BinaryDocValueSelector::createFromExistingIndex(const ::java::lang::String & a0, const ::org::apache::lucene::store::Directory & a1)
          {
            jclass cls = env->getClass(initializeClass);
            return ::java::util::List(env->callStaticObjectMethod(cls, mids$[mid_createFromExistingIndex_c1b5b4784612f985], a0.this$, a1.this$));
          }

          ::org::apache::lucene::util::BitSet BinaryDocValueSelector::getFilteredLiveDocs(const ::org::apache::lucene::index::CodecReader & a0) const
          {
            return ::org::apache::lucene::util::BitSet(env->callObjectMethod(this$, mids$[mid_getFilteredLiveDocs_f08bfd32ceb5c39a], a0.this$));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace misc {
        namespace index {
          static PyObject *t_BinaryDocValueSelector_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_BinaryDocValueSelector_instance_(PyTypeObject *type, PyObject *arg);
          static int t_BinaryDocValueSelector_init_(t_BinaryDocValueSelector *self, PyObject *args, PyObject *kwds);
          static PyObject *t_BinaryDocValueSelector_createFromExistingIndex(PyTypeObject *type, PyObject *args);
          static PyObject *t_BinaryDocValueSelector_getFilteredLiveDocs(t_BinaryDocValueSelector *self, PyObject *arg);

          static PyMethodDef t_BinaryDocValueSelector__methods_[] = {
            DECLARE_METHOD(t_BinaryDocValueSelector, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_BinaryDocValueSelector, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_BinaryDocValueSelector, createFromExistingIndex, METH_VARARGS | METH_CLASS),
            DECLARE_METHOD(t_BinaryDocValueSelector, getFilteredLiveDocs, METH_O),
            { NULL, NULL, 0, NULL }
          };

          static PyType_Slot PY_TYPE_SLOTS(BinaryDocValueSelector)[] = {
            { Py_tp_methods, t_BinaryDocValueSelector__methods_ },
            { Py_tp_init, (void *) t_BinaryDocValueSelector_init_ },
            { 0, NULL }
          };

          static PyType_Def *PY_TYPE_BASES(BinaryDocValueSelector)[] = {
            &PY_TYPE_DEF(::java::lang::Object),
            NULL
          };

          DEFINE_TYPE(BinaryDocValueSelector, t_BinaryDocValueSelector, BinaryDocValueSelector);

          void t_BinaryDocValueSelector::install(PyObject *module)
          {
            installType(&PY_TYPE(BinaryDocValueSelector), &PY_TYPE_DEF(BinaryDocValueSelector), module, "BinaryDocValueSelector", 0);
          }

          void t_BinaryDocValueSelector::initialize(PyObject *module)
          {
            PyObject_SetAttrString((PyObject *) PY_TYPE(BinaryDocValueSelector), "class_", make_descriptor(BinaryDocValueSelector::initializeClass, 1));
            PyObject_SetAttrString((PyObject *) PY_TYPE(BinaryDocValueSelector), "wrapfn_", make_descriptor(t_BinaryDocValueSelector::wrap_jobject));
            PyObject_SetAttrString((PyObject *) PY_TYPE(BinaryDocValueSelector), "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_BinaryDocValueSelector_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, BinaryDocValueSelector::initializeClass, 1)))
              return NULL;
            return t_BinaryDocValueSelector::wrap_Object(BinaryDocValueSelector(((t_BinaryDocValueSelector *) arg)->object.this$));
          }
          static PyObject *t_BinaryDocValueSelector_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, BinaryDocValueSelector::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_BinaryDocValueSelector_init_(t_BinaryDocValueSelector *self, PyObject *args, PyObject *kwds)
          {
            ::java::lang::String a0((jobject) NULL);
            ::java::util::HashSet a1((jobject) NULL);
            PyTypeObject **p1;
            BinaryDocValueSelector object((jobject) NULL);

            if (!parseArgs(args, "sK", ::java::util::HashSet::initializeClass, &a0, &a1, &p1, ::java::util::t_HashSet::parameters_))
            {
              INT_CALL(object = BinaryDocValueSelector(a0, a1));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_BinaryDocValueSelector_createFromExistingIndex(PyTypeObject *type, PyObject *args)
          {
            ::java::lang::String a0((jobject) NULL);
            ::org::apache::lucene::store::Directory a1((jobject) NULL);
            ::java::util::List result((jobject) NULL);

            if (!parseArgs(args, "sk", ::org::apache::lucene::store::Directory::initializeClass, &a0, &a1))
            {
              OBJ_CALL(result = ::org::apache::lucene::misc::index::BinaryDocValueSelector::createFromExistingIndex(a0, a1));
              return ::java::util::t_List::wrap_Object(result, ::org::apache::lucene::misc::index::PY_TYPE(IndexRearranger$DocumentSelector));
            }

            PyErr_SetArgsError(type, "createFromExistingIndex", args);
            return NULL;
          }

          static PyObject *t_BinaryDocValueSelector_getFilteredLiveDocs(t_BinaryDocValueSelector *self, PyObject *arg)
          {
            ::org::apache::lucene::index::CodecReader a0((jobject) NULL);
            ::org::apache::lucene::util::BitSet result((jobject) NULL);

            if (!parseArg(arg, "k", ::org::apache::lucene::index::CodecReader::initializeClass, &a0))
            {
              OBJ_CALL(result = self->object.getFilteredLiveDocs(a0));
              return ::org::apache::lucene::util::t_BitSet::wrap_Object(result);
            }

            PyErr_SetArgsError((PyObject *) self, "getFilteredLiveDocs", arg);
            return NULL;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/egothor/stemmer/Lift.h"
#include "java/util/List.h"
#include "org/egothor/stemmer/Trie.h"
#include "org/egothor/stemmer/Row.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace egothor {
    namespace stemmer {

      ::java::lang::Class *Lift::class$ = NULL;
      jmethodID *Lift::mids$ = NULL;
      bool Lift::live$ = false;

      jclass Lift::initializeClass(bool getOnly)
      {
        if (getOnly)
          return (jclass) (live$ ? class$->this$ : NULL);
        if (class$ == NULL)
        {
          jclass cls = (jclass) env->findClass("org/egothor/stemmer/Lift");

          mids$ = new jmethodID[max_mid];
          mids$[mid_init$_9d72768e8fdce2b7] = env->getMethodID(cls, "<init>", "(Z)V");
          mids$[mid_liftUp_9cec145f36b80a32] = env->getMethodID(cls, "liftUp", "(Lorg/egothor/stemmer/Row;Ljava/util/List;)V");
          mids$[mid_optimize_76214b7d9a62d571] = env->getMethodID(cls, "optimize", "(Lorg/egothor/stemmer/Trie;)Lorg/egothor/stemmer/Trie;");

          class$ = new ::java::lang::Class(cls);
          live$ = true;
        }
        return (jclass) class$->this$;
      }

      Lift::Lift(jboolean a0) : ::org::egothor::stemmer::Reduce(env->newObject(initializeClass, &mids$, mid_init$_9d72768e8fdce2b7, a0)) {}

      void Lift::liftUp(const ::org::egothor::stemmer::Row & a0, const ::java::util::List & a1) const
      {
        env->callVoidMethod(this$, mids$[mid_liftUp_9cec145f36b80a32], a0.this$, a1.this$);
      }

      ::org::egothor::stemmer::Trie Lift::optimize(const ::org::egothor::stemmer::Trie & a0) const
      {
        return ::org::egothor::stemmer::Trie(env->callObjectMethod(this$, mids$[mid_optimize_76214b7d9a62d571], a0.this$));
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace egothor {
    namespace stemmer {
      static PyObject *t_Lift_cast_(PyTypeObject *type, PyObject *arg);
      static PyObject *t_Lift_instance_(PyTypeObject *type, PyObject *arg);
      static int t_Lift_init_(t_Lift *self, PyObject *args, PyObject *kwds);
      static PyObject *t_Lift_liftUp(t_Lift *self, PyObject *args);
      static PyObject *t_Lift_optimize(t_Lift *self, PyObject *args);

      static PyMethodDef t_Lift__methods_[] = {
        DECLARE_METHOD(t_Lift, cast_, METH_O | METH_CLASS),
        DECLARE_METHOD(t_Lift, instance_, METH_O | METH_CLASS),
        DECLARE_METHOD(t_Lift, liftUp, METH_VARARGS),
        DECLARE_METHOD(t_Lift, optimize, METH_VARARGS),
        { NULL, NULL, 0, NULL }
      };

      static PyType_Slot PY_TYPE_SLOTS(Lift)[] = {
        { Py_tp_methods, t_Lift__methods_ },
        { Py_tp_init, (void *) t_Lift_init_ },
        { 0, NULL }
      };

      static PyType_Def *PY_TYPE_BASES(Lift)[] = {
        &PY_TYPE_DEF(::org::egothor::stemmer::Reduce),
        NULL
      };

      DEFINE_TYPE(Lift, t_Lift, Lift);

      void t_Lift::install(PyObject *module)
      {
        installType(&PY_TYPE(Lift), &PY_TYPE_DEF(Lift), module, "Lift", 0);
      }

      void t_Lift::initialize(PyObject *module)
      {
        PyObject_SetAttrString((PyObject *) PY_TYPE(Lift), "class_", make_descriptor(Lift::initializeClass, 1));
        PyObject_SetAttrString((PyObject *) PY_TYPE(Lift), "wrapfn_", make_descriptor(t_Lift::wrap_jobject));
        PyObject_SetAttrString((PyObject *) PY_TYPE(Lift), "boxfn_", make_descriptor(boxObject));
      }

      static PyObject *t_Lift_cast_(PyTypeObject *type, PyObject *arg)
      {
        if (!(arg = castCheck(arg, Lift::initializeClass, 1)))
          return NULL;
        return t_Lift::wrap_Object(Lift(((t_Lift *) arg)->object.this$));
      }
      static PyObject *t_Lift_instance_(PyTypeObject *type, PyObject *arg)
      {
        if (!castCheck(arg, Lift::initializeClass, 0))
          Py_RETURN_FALSE;
        Py_RETURN_TRUE;
      }

      static int t_Lift_init_(t_Lift *self, PyObject *args, PyObject *kwds)
      {
        jboolean a0;
        Lift object((jobject) NULL);

        if (!parseArgs(args, "Z", &a0))
        {
          INT_CALL(object = Lift(a0));
          self->object = object;
        }
        else
        {
          PyErr_SetArgsError((PyObject *) self, "__init__", args);
          return -1;
        }

        return 0;
      }

      static PyObject *t_Lift_liftUp(t_Lift *self, PyObject *args)
      {
        ::org::egothor::stemmer::Row a0((jobject) NULL);
        ::java::util::List a1((jobject) NULL);
        PyTypeObject **p1;

        if (!parseArgs(args, "kK", ::org::egothor::stemmer::Row::initializeClass, ::java::util::List::initializeClass, &a0, &a1, &p1, ::java::util::t_List::parameters_))
        {
          OBJ_CALL(self->object.liftUp(a0, a1));
          Py_RETURN_NONE;
        }

        PyErr_SetArgsError((PyObject *) self, "liftUp", args);
        return NULL;
      }

      static PyObject *t_Lift_optimize(t_Lift *self, PyObject *args)
      {
        ::org::egothor::stemmer::Trie a0((jobject) NULL);
        ::org::egothor::stemmer::Trie result((jobject) NULL);

        if (!parseArgs(args, "k", ::org::egothor::stemmer::Trie::initializeClass, &a0))
        {
          OBJ_CALL(result = self->object.optimize(a0));
          return ::org::egothor::stemmer::t_Trie::wrap_Object(result);
        }

        return callSuper(PY_TYPE(Lift), (PyObject *) self, "optimize", args, 2);
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/compound/hyphenation/Hyphen.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace compound {
          namespace hyphenation {

            ::java::lang::Class *Hyphen::class$ = NULL;
            jmethodID *Hyphen::mids$ = NULL;
            jfieldID *Hyphen::fids$ = NULL;
            bool Hyphen::live$ = false;

            jclass Hyphen::initializeClass(bool getOnly)
            {
              if (getOnly)
                return (jclass) (live$ ? class$->this$ : NULL);
              if (class$ == NULL)
              {
                jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/compound/hyphenation/Hyphen");

                mids$ = new jmethodID[max_mid];
                mids$[mid_toString_db9b55ba01e03e4b] = env->getMethodID(cls, "toString", "()Ljava/lang/String;");

                fids$ = new jfieldID[max_fid];
                fids$[fid_noBreak] = env->getFieldID(cls, "noBreak", "Ljava/lang/String;");
                fids$[fid_postBreak] = env->getFieldID(cls, "postBreak", "Ljava/lang/String;");
                fids$[fid_preBreak] = env->getFieldID(cls, "preBreak", "Ljava/lang/String;");

                class$ = new ::java::lang::Class(cls);
                live$ = true;
              }
              return (jclass) class$->this$;
            }

            ::java::lang::String Hyphen::toString() const
            {
              return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_db9b55ba01e03e4b]));
            }

            ::java::lang::String Hyphen::_get_noBreak() const
            {
              return ::java::lang::String(env->getObjectField(this$, fids$[fid_noBreak]));
            }

            void Hyphen::_set_noBreak(const ::java::lang::String & a0) const
            {
              env->setObjectField(this$, fids$[fid_noBreak], a0.this$);
            }

            ::java::lang::String Hyphen::_get_postBreak() const
            {
              return ::java::lang::String(env->getObjectField(this$, fids$[fid_postBreak]));
            }

            void Hyphen::_set_postBreak(const ::java::lang::String & a0) const
            {
              env->setObjectField(this$, fids$[fid_postBreak], a0.this$);
            }

            ::java::lang::String Hyphen::_get_preBreak() const
            {
              return ::java::lang::String(env->getObjectField(this$, fids$[fid_preBreak]));
            }

            void Hyphen::_set_preBreak(const ::java::lang::String & a0) const
            {
              env->setObjectField(this$, fids$[fid_preBreak], a0.this$);
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace compound {
          namespace hyphenation {
            static PyObject *t_Hyphen_cast_(PyTypeObject *type, PyObject *arg);
            static PyObject *t_Hyphen_instance_(PyTypeObject *type, PyObject *arg);
            static PyObject *t_Hyphen_toString(t_Hyphen *self, PyObject *args);
            static PyObject *t_Hyphen_get__noBreak(t_Hyphen *self, void *data);
            static int t_Hyphen_set__noBreak(t_Hyphen *self, PyObject *arg, void *data);
            static PyObject *t_Hyphen_get__postBreak(t_Hyphen *self, void *data);
            static int t_Hyphen_set__postBreak(t_Hyphen *self, PyObject *arg, void *data);
            static PyObject *t_Hyphen_get__preBreak(t_Hyphen *self, void *data);
            static int t_Hyphen_set__preBreak(t_Hyphen *self, PyObject *arg, void *data);

            static PyGetSetDef t_Hyphen__fields_[] = {
              DECLARE_GETSET_FIELD(t_Hyphen, noBreak),
              DECLARE_GETSET_FIELD(t_Hyphen, postBreak),
              DECLARE_GETSET_FIELD(t_Hyphen, preBreak),
              { NULL, NULL, NULL, NULL, NULL }
            };

            static PyMethodDef t_Hyphen__methods_[] = {
              DECLARE_METHOD(t_Hyphen, cast_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_Hyphen, instance_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_Hyphen, toString, METH_VARARGS),
              { NULL, NULL, 0, NULL }
            };

            static PyType_Slot PY_TYPE_SLOTS(Hyphen)[] = {
              { Py_tp_methods, t_Hyphen__methods_ },
              { Py_tp_init, (void *) abstract_init },
              { Py_tp_getset, t_Hyphen__fields_ },
              { 0, NULL }
            };

            static PyType_Def *PY_TYPE_BASES(Hyphen)[] = {
              &PY_TYPE_DEF(::java::lang::Object),
              NULL
            };

            DEFINE_TYPE(Hyphen, t_Hyphen, Hyphen);

            void t_Hyphen::install(PyObject *module)
            {
              installType(&PY_TYPE(Hyphen), &PY_TYPE_DEF(Hyphen), module, "Hyphen", 0);
            }

            void t_Hyphen::initialize(PyObject *module)
            {
              PyObject_SetAttrString((PyObject *) PY_TYPE(Hyphen), "class_", make_descriptor(Hyphen::initializeClass, 1));
              PyObject_SetAttrString((PyObject *) PY_TYPE(Hyphen), "wrapfn_", make_descriptor(t_Hyphen::wrap_jobject));
              PyObject_SetAttrString((PyObject *) PY_TYPE(Hyphen), "boxfn_", make_descriptor(boxObject));
            }

            static PyObject *t_Hyphen_cast_(PyTypeObject *type, PyObject *arg)
            {
              if (!(arg = castCheck(arg, Hyphen::initializeClass, 1)))
                return NULL;
              return t_Hyphen::wrap_Object(Hyphen(((t_Hyphen *) arg)->object.this$));
            }
            static PyObject *t_Hyphen_instance_(PyTypeObject *type, PyObject *arg)
            {
              if (!castCheck(arg, Hyphen::initializeClass, 0))
                Py_RETURN_FALSE;
              Py_RETURN_TRUE;
            }

            static PyObject *t_Hyphen_toString(t_Hyphen *self, PyObject *args)
            {
              ::java::lang::String result((jobject) NULL);

              if (!parseArgs(args, ""))
              {
                OBJ_CALL(result = self->object.toString());
                return j2p(result);
              }

              return callSuper(PY_TYPE(Hyphen), (PyObject *) self, "toString", args, 2);
            }

            static PyObject *t_Hyphen_get__noBreak(t_Hyphen *self, void *data)
            {
              ::java::lang::String value((jobject) NULL);
              OBJ_CALL(value = self->object._get_noBreak());
              return j2p(value);
            }
            static int t_Hyphen_set__noBreak(t_Hyphen *self, PyObject *arg, void *data)
            {
              ::java::lang::String value((jobject) NULL);
              if (!parseArg(arg, "s", &value))
              {
                INT_CALL(self->object._set_noBreak(value));
                return 0;
              }
              PyErr_SetArgsError((PyObject *) self, "noBreak", arg);
              return -1;
            }

            static PyObject *t_Hyphen_get__postBreak(t_Hyphen *self, void *data)
            {
              ::java::lang::String value((jobject) NULL);
              OBJ_CALL(value = self->object._get_postBreak());
              return j2p(value);
            }
            static int t_Hyphen_set__postBreak(t_Hyphen *self, PyObject *arg, void *data)
            {
              ::java::lang::String value((jobject) NULL);
              if (!parseArg(arg, "s", &value))
              {
                INT_CALL(self->object._set_postBreak(value));
                return 0;
              }
              PyErr_SetArgsError((PyObject *) self, "postBreak", arg);
              return -1;
            }

            static PyObject *t_Hyphen_get__preBreak(t_Hyphen *self, void *data)
            {
              ::java::lang::String value((jobject) NULL);
              OBJ_CALL(value = self->object._get_preBreak());
              return j2p(value);
            }
            static int t_Hyphen_set__preBreak(t_Hyphen *self, PyObject *arg, void *data)
            {
              ::java::lang::String value((jobject) NULL);
              if (!parseArg(arg, "s", &value))
              {
                INT_CALL(self->object._set_preBreak(value));
                return 0;
              }
              PyErr_SetArgsError((PyObject *) self, "preBreak", arg);
              return -1;
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/antlr/v4/runtime/RuleContext.h"
#include "java/lang/Class.h"
#include "org/antlr/v4/runtime/ParserRuleContext.h"
#include "org/antlr/v4/runtime/RuleContext.h"
#include "java/lang/String.h"
#include "org/antlr/v4/runtime/Recognizer.h"
#include "org/antlr/v4/runtime/Parser.h"
#include "java/util/List.h"
#include "JArray.h"

namespace org {
  namespace antlr {
    namespace v4 {
      namespace runtime {

        ::java::lang::Class *RuleContext::class$ = NULL;
        jmethodID *RuleContext::mids$ = NULL;
        jfieldID *RuleContext::fids$ = NULL;
        bool RuleContext::live$ = false;
        ::org::antlr::v4::runtime::ParserRuleContext *RuleContext::EMPTY = NULL;

        jclass RuleContext::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/antlr/v4/runtime/RuleContext");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_f2cc1bce94666404] = env->getMethodID(cls, "<init>", "()V");
            mids$[mid_init$_6f7cd0502670b05e] = env->getMethodID(cls, "<init>", "(Lorg/antlr/v4/runtime/RuleContext;I)V");
            mids$[mid_depth_9972fcc56b44e79d] = env->getMethodID(cls, "depth", "()I");
            mids$[mid_getChildCount_9972fcc56b44e79d] = env->getMethodID(cls, "getChildCount", "()I");
            mids$[mid_getParent_fb986177668c7223] = env->getMethodID(cls, "getParent", "()Lorg/antlr/v4/runtime/RuleContext;");
            mids$[mid_getPayload_fb986177668c7223] = env->getMethodID(cls, "getPayload", "()Lorg/antlr/v4/runtime/RuleContext;");
            mids$[mid_getRuleContext_fb986177668c7223] = env->getMethodID(cls, "getRuleContext", "()Lorg/antlr/v4/runtime/RuleContext;");
            mids$[mid_getRuleIndex_9972fcc56b44e79d] = env->getMethodID(cls, "getRuleIndex", "()I");
            mids$[mid_getText_db9b55ba01e03e4b] = env->getMethodID(cls, "getText", "()Ljava/lang/String;");
            mids$[mid_isEmpty_8454bd5aa23fd11e] = env->getMethodID(cls, "isEmpty", "()Z");
            mids$[mid_toString_db9b55ba01e03e4b] = env->getMethodID(cls, "toString", "()Ljava/lang/String;");
            mids$[mid_toString_d149253c7f4e18bb] = env->getMethodID(cls, "toString", "(Lorg/antlr/v4/runtime/Recognizer;)Ljava/lang/String;");
            mids$[mid_toString_d8a287aa24cacc1f] = env->getMethodID(cls, "toString", "(Ljava/util/List;)Ljava/lang/String;");
            mids$[mid_toString_38ee7c2c81ff4d7a] = env->getMethodID(cls, "toString", "(Lorg/antlr/v4/runtime/Recognizer;Lorg/antlr/v4/runtime/RuleContext;)Ljava/lang/String;");
            mids$[mid_toString_8380bd41bd6d4935] = env->getMethodID(cls, "toString", "(Ljava/util/List;Lorg/antlr/v4/runtime/RuleContext;)Ljava/lang/String;");
            mids$[mid_toStringTree_db9b55ba01e03e4b] = env->getMethodID(cls, "toStringTree", "()Ljava/lang/String;");
            mids$[mid_toStringTree_80762e53fce54437] = env->getMethodID(cls, "toStringTree", "(Lorg/antlr/v4/runtime/Parser;)Ljava/lang/String;");
            mids$[mid_toStringTree_d8a287aa24cacc1f] = env->getMethodID(cls, "toStringTree", "(Ljava/util/List;)Ljava/lang/String;");

            fids$ = new jfieldID[max_fid];
            fids$[fid_invokingState] = env->getFieldID(cls, "invokingState", "I");
            fids$[fid_parent] = env->getFieldID(cls, "parent", "Lorg/antlr/v4/runtime/RuleContext;");

            class$ = new ::java::lang::Class(cls);
            cls = (jclass) class$->this$;

            EMPTY = new ::org::antlr::v4::runtime::ParserRuleContext(env->getStaticObjectField(cls, "EMPTY", "Lorg/antlr/v4/runtime/ParserRuleContext;"));
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        RuleContext::RuleContext() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_f2cc1bce94666404)) {}

        RuleContext::RuleContext(const RuleContext & a0, jint a1) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_6f7cd0502670b05e, a0.this$, a1)) {}

        jint RuleContext::depth() const
        {
          return env->callIntMethod(this$, mids$[mid_depth_9972fcc56b44e79d]);
        }

        jint RuleContext::getChildCount() const
        {
          return env->callIntMethod(this$, mids$[mid_getChildCount_9972fcc56b44e79d]);
        }

        RuleContext RuleContext::getParent() const
        {
          return RuleContext(env->callObjectMethod(this$, mids$[mid_getParent_fb986177668c7223]));
        }

        RuleContext RuleContext::getPayload() const
        {
          return RuleContext(env->callObjectMethod(this$, mids$[mid_getPayload_fb986177668c7223]));
        }

        RuleContext RuleContext::getRuleContext() const
        {
          return RuleContext(env->callObjectMethod(this$, mids$[mid_getRuleContext_fb986177668c7223]));
        }

        jint RuleContext::getRuleIndex() const
        {
          return env->callIntMethod(this$, mids$[mid_getRuleIndex_9972fcc56b44e79d]);
        }

        ::java::lang::String RuleContext::getText() const
        {
          return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_getText_db9b55ba01e03e4b]));
        }

        jboolean RuleContext::isEmpty() const
        {
          return env->callBooleanMethod(this$, mids$[mid_isEmpty_8454bd5aa23fd11e]);
        }

        ::java::lang::String RuleContext::toString() const
        {
          return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_db9b55ba01e03e4b]));
        }

        ::java::lang::String RuleContext::toString(const ::org::antlr::v4::runtime::Recognizer & a0) const
        {
          return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_d149253c7f4e18bb], a0.this$));
        }

        ::java::lang::String RuleContext::toString(const ::java::util::List & a0) const
        {
          return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_d8a287aa24cacc1f], a0.this$));
        }

        ::java::lang::String RuleContext::toString(const ::org::antlr::v4::runtime::Recognizer & a0, const RuleContext & a1) const
        {
          return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_38ee7c2c81ff4d7a], a0.this$, a1.this$));
        }

        ::java::lang::String RuleContext::toString(const ::java::util::List & a0, const RuleContext & a1) const
        {
          return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_8380bd41bd6d4935], a0.this$, a1.this$));
        }

        ::java::lang::String RuleContext::toStringTree() const
        {
          return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toStringTree_db9b55ba01e03e4b]));
        }

        ::java::lang::String RuleContext::toStringTree(const ::org::antlr::v4::runtime::Parser & a0) const
        {
          return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toStringTree_80762e53fce54437], a0.this$));
        }

        ::java::lang::String RuleContext::toStringTree(const ::java::util::List & a0) const
        {
          return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toStringTree_d8a287aa24cacc1f], a0.this$));
        }

        jint RuleContext::_get_invokingState() const
        {
          return env->getIntField(this$, fids$[fid_invokingState]);
        }

        void RuleContext::_set_invokingState(jint a0) const
        {
          env->setIntField(this$, fids$[fid_invokingState], a0);
        }

        RuleContext RuleContext::_get_parent() const
        {
          return RuleContext(env->getObjectField(this$, fids$[fid_parent]));
        }

        void RuleContext::_set_parent(const RuleContext & a0) const
        {
          env->setObjectField(this$, fids$[fid_parent], a0.this$);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace antlr {
    namespace v4 {
      namespace runtime {
        static PyObject *t_RuleContext_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_RuleContext_instance_(PyTypeObject *type, PyObject *arg);
        static int t_RuleContext_init_(t_RuleContext *self, PyObject *args, PyObject *kwds);
        static PyObject *t_RuleContext_depth(t_RuleContext *self);
        static PyObject *t_RuleContext_getChildCount(t_RuleContext *self);
        static PyObject *t_RuleContext_getParent(t_RuleContext *self);
        static PyObject *t_RuleContext_getPayload(t_RuleContext *self);
        static PyObject *t_RuleContext_getRuleContext(t_RuleContext *self);
        static PyObject *t_RuleContext_getRuleIndex(t_RuleContext *self);
        static PyObject *t_RuleContext_getText(t_RuleContext *self);
        static PyObject *t_RuleContext_isEmpty(t_RuleContext *self);
        static PyObject *t_RuleContext_toString(t_RuleContext *self, PyObject *args);
        static PyObject *t_RuleContext_toStringTree(t_RuleContext *self, PyObject *args);
        static PyObject *t_RuleContext_get__invokingState(t_RuleContext *self, void *data);
        static int t_RuleContext_set__invokingState(t_RuleContext *self, PyObject *arg, void *data);

        static PyObject *t_RuleContext_get__childCount(t_RuleContext *self, void *data);
        static PyObject *t_RuleContext_get__empty(t_RuleContext *self, void *data);
        static PyObject *t_RuleContext_get__parent(t_RuleContext *self, void *data);
        static PyObject *t_RuleContext_get__payload(t_RuleContext *self, void *data);
        static PyObject *t_RuleContext_get__ruleContext(t_RuleContext *self, void *data);
        static PyObject *t_RuleContext_get__ruleIndex(t_RuleContext *self, void *data);
        static PyObject *t_RuleContext_get__text(t_RuleContext *self, void *data);
        static PyGetSetDef t_RuleContext__fields_[] = {
          DECLARE_GETSET_FIELD(t_RuleContext, invokingState),
          DECLARE_GET_FIELD(t_RuleContext, childCount),
          DECLARE_GET_FIELD(t_RuleContext, empty),
          DECLARE_GET_FIELD(t_RuleContext, parent),
          DECLARE_GET_FIELD(t_RuleContext, payload),
          DECLARE_GET_FIELD(t_RuleContext, ruleContext),
          DECLARE_GET_FIELD(t_RuleContext, ruleIndex),
          DECLARE_GET_FIELD(t_RuleContext, text),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_RuleContext__methods_[] = {
          DECLARE_METHOD(t_RuleContext, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_RuleContext, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_RuleContext, depth, METH_NOARGS),
          DECLARE_METHOD(t_RuleContext, getChildCount, METH_NOARGS),
          DECLARE_METHOD(t_RuleContext, getParent, METH_NOARGS),
          DECLARE_METHOD(t_RuleContext, getPayload, METH_NOARGS),
          DECLARE_METHOD(t_RuleContext, getRuleContext, METH_NOARGS),
          DECLARE_METHOD(t_RuleContext, getRuleIndex, METH_NOARGS),
          DECLARE_METHOD(t_RuleContext, getText, METH_NOARGS),
          DECLARE_METHOD(t_RuleContext, isEmpty, METH_NOARGS),
          DECLARE_METHOD(t_RuleContext, toString, METH_VARARGS),
          DECLARE_METHOD(t_RuleContext, toStringTree, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        static PyType_Slot PY_TYPE_SLOTS(RuleContext)[] = {
          { Py_tp_methods, t_RuleContext__methods_ },
          { Py_tp_init, (void *) t_RuleContext_init_ },
          { Py_tp_getset, t_RuleContext__fields_ },
          { 0, NULL }
        };

        static PyType_Def *PY_TYPE_BASES(RuleContext)[] = {
          &PY_TYPE_DEF(::java::lang::Object),
          NULL
        };

        DEFINE_TYPE(RuleContext, t_RuleContext, RuleContext);

        void t_RuleContext::install(PyObject *module)
        {
          installType(&PY_TYPE(RuleContext), &PY_TYPE_DEF(RuleContext), module, "RuleContext", 0);
        }

        void t_RuleContext::initialize(PyObject *module)
        {
          PyObject_SetAttrString((PyObject *) PY_TYPE(RuleContext), "class_", make_descriptor(RuleContext::initializeClass, 1));
          PyObject_SetAttrString((PyObject *) PY_TYPE(RuleContext), "wrapfn_", make_descriptor(t_RuleContext::wrap_jobject));
          PyObject_SetAttrString((PyObject *) PY_TYPE(RuleContext), "boxfn_", make_descriptor(boxObject));
          env->getClass(RuleContext::initializeClass);
          PyObject_SetAttrString((PyObject *) PY_TYPE(RuleContext), "EMPTY", make_descriptor(::org::antlr::v4::runtime::t_ParserRuleContext::wrap_Object(*RuleContext::EMPTY)));
        }

        static PyObject *t_RuleContext_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, RuleContext::initializeClass, 1)))
            return NULL;
          return t_RuleContext::wrap_Object(RuleContext(((t_RuleContext *) arg)->object.this$));
        }
        static PyObject *t_RuleContext_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, RuleContext::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_RuleContext_init_(t_RuleContext *self, PyObject *args, PyObject *kwds)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 0:
            {
              RuleContext object((jobject) NULL);

              INT_CALL(object = RuleContext());
              self->object = object;
              break;
            }
           case 2:
            {
              RuleContext a0((jobject) NULL);
              jint a1;
              RuleContext object((jobject) NULL);

              if (!parseArgs(args, "kI", RuleContext::initializeClass, &a0, &a1))
              {
                INT_CALL(object = RuleContext(a0, a1));
                self->object = object;
                break;
              }
            }
           default:
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }

        static PyObject *t_RuleContext_depth(t_RuleContext *self)
        {
          jint result;
          OBJ_CALL(result = self->object.depth());
          return PyLong_FromLong((long) result);
        }

        static PyObject *t_RuleContext_getChildCount(t_RuleContext *self)
        {
          jint result;
          OBJ_CALL(result = self->object.getChildCount());
          return PyLong_FromLong((long) result);
        }

        static PyObject *t_RuleContext_getParent(t_RuleContext *self)
        {
          RuleContext result((jobject) NULL);
          OBJ_CALL(result = self->object.getParent());
          return t_RuleContext::wrap_Object(result);
        }

        static PyObject *t_RuleContext_getPayload(t_RuleContext *self)
        {
          RuleContext result((jobject) NULL);
          OBJ_CALL(result = self->object.getPayload());
          return t_RuleContext::wrap_Object(result);
        }

        static PyObject *t_RuleContext_getRuleContext(t_RuleContext *self)
        {
          RuleContext result((jobject) NULL);
          OBJ_CALL(result = self->object.getRuleContext());
          return t_RuleContext::wrap_Object(result);
        }

        static PyObject *t_RuleContext_getRuleIndex(t_RuleContext *self)
        {
          jint result;
          OBJ_CALL(result = self->object.getRuleIndex());
          return PyLong_FromLong((long) result);
        }

        static PyObject *t_RuleContext_getText(t_RuleContext *self)
        {
          ::java::lang::String result((jobject) NULL);
          OBJ_CALL(result = self->object.getText());
          return j2p(result);
        }

        static PyObject *t_RuleContext_isEmpty(t_RuleContext *self)
        {
          jboolean result;
          OBJ_CALL(result = self->object.isEmpty());
          Py_RETURN_BOOL(result);
        }

        static PyObject *t_RuleContext_toString(t_RuleContext *self, PyObject *args)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 0:
            {
              ::java::lang::String result((jobject) NULL);
              OBJ_CALL(result = self->object.toString());
              return j2p(result);
            }
            break;
           case 1:
            {
              ::org::antlr::v4::runtime::Recognizer a0((jobject) NULL);
              PyTypeObject **p0;
              ::java::lang::String result((jobject) NULL);

              if (!parseArgs(args, "K", ::org::antlr::v4::runtime::Recognizer::initializeClass, &a0, &p0, ::org::antlr::v4::runtime::t_Recognizer::parameters_))
              {
                OBJ_CALL(result = self->object.toString(a0));
                return j2p(result);
              }
            }
            {
              ::java::util::List a0((jobject) NULL);
              PyTypeObject **p0;
              ::java::lang::String result((jobject) NULL);

              if (!parseArgs(args, "K", ::java::util::List::initializeClass, &a0, &p0, ::java::util::t_List::parameters_))
              {
                OBJ_CALL(result = self->object.toString(a0));
                return j2p(result);
              }
            }
            break;
           case 2:
            {
              ::org::antlr::v4::runtime::Recognizer a0((jobject) NULL);
              PyTypeObject **p0;
              RuleContext a1((jobject) NULL);
              ::java::lang::String result((jobject) NULL);

              if (!parseArgs(args, "Kk", ::org::antlr::v4::runtime::Recognizer::initializeClass, RuleContext::initializeClass, &a0, &p0, ::org::antlr::v4::runtime::t_Recognizer::parameters_, &a1))
              {
                OBJ_CALL(result = self->object.toString(a0, a1));
                return j2p(result);
              }
            }
            {
              ::java::util::List a0((jobject) NULL);
              PyTypeObject **p0;
              RuleContext a1((jobject) NULL);
              ::java::lang::String result((jobject) NULL);

              if (!parseArgs(args, "Kk", ::java::util::List::initializeClass, RuleContext::initializeClass, &a0, &p0, ::java::util::t_List::parameters_, &a1))
              {
                OBJ_CALL(result = self->object.toString(a0, a1));
                return j2p(result);
              }
            }
          }

          return callSuper(PY_TYPE(RuleContext), (PyObject *) self, "toString", args, 2);
        }

        static PyObject *t_RuleContext_toStringTree(t_RuleContext *self, PyObject *args)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 0:
            {
              ::java::lang::String result((jobject) NULL);
              OBJ_CALL(result = self->object.toStringTree());
              return j2p(result);
            }
            break;
           case 1:
            {
              ::org::antlr::v4::runtime::Parser a0((jobject) NULL);
              PyTypeObject **p0;
              ::java::lang::String result((jobject) NULL);

              if (!parseArgs(args, "K", ::org::antlr::v4::runtime::Parser::initializeClass, &a0, &p0, ::org::antlr::v4::runtime::t_Parser::parameters_))
              {
                OBJ_CALL(result = self->object.toStringTree(a0));
                return j2p(result);
              }
            }
            {
              ::java::util::List a0((jobject) NULL);
              PyTypeObject **p0;
              ::java::lang::String result((jobject) NULL);

              if (!parseArgs(args, "K", ::java::util::List::initializeClass, &a0, &p0, ::java::util::t_List::parameters_))
              {
                OBJ_CALL(result = self->object.toStringTree(a0));
                return j2p(result);
              }
            }
          }

          PyErr_SetArgsError((PyObject *) self, "toStringTree", args);
          return NULL;
        }

        static PyObject *t_RuleContext_get__invokingState(t_RuleContext *self, void *data)
        {
          jint value;
          OBJ_CALL(value = self->object._get_invokingState());
          return PyLong_FromLong((long) value);
        }
        static int t_RuleContext_set__invokingState(t_RuleContext *self, PyObject *arg, void *data)
        {
          jint value;
          if (!parseArg(arg, "I", &value))
          {
            INT_CALL(self->object._set_invokingState(value));
            return 0;
          }
          PyErr_SetArgsError((PyObject *) self, "invokingState", arg);
          return -1;
        }

        static PyObject *t_RuleContext_get__childCount(t_RuleContext *self, void *data)
        {
          jint value;
          OBJ_CALL(value = self->object.getChildCount());
          return PyLong_FromLong((long) value);
        }

        static PyObject *t_RuleContext_get__empty(t_RuleContext *self, void *data)
        {
          jboolean value;
          OBJ_CALL(value = self->object.isEmpty());
          Py_RETURN_BOOL(value);
        }

        static PyObject *t_RuleContext_get__parent(t_RuleContext *self, void *data)
        {
          RuleContext value((jobject) NULL);
          OBJ_CALL(value = self->object.getParent());
          return t_RuleContext::wrap_Object(value);
        }

        static PyObject *t_RuleContext_get__payload(t_RuleContext *self, void *data)
        {
          RuleContext value((jobject) NULL);
          OBJ_CALL(value = self->object.getPayload());
          return t_RuleContext::wrap_Object(value);
        }

        static PyObject *t_RuleContext_get__ruleContext(t_RuleContext *self, void *data)
        {
          RuleContext value((jobject) NULL);
          OBJ_CALL(value = self->object.getRuleContext());
          return t_RuleContext::wrap_Object(value);
        }

        static PyObject *t_RuleContext_get__ruleIndex(t_RuleContext *self, void *data)
        {
          jint value;
          OBJ_CALL(value = self->object.getRuleIndex());
          return PyLong_FromLong((long) value);
        }

        static PyObject *t_RuleContext_get__text(t_RuleContext *self, void *data)
        {
          ::java::lang::String value((jobject) NULL);
          OBJ_CALL(value = self->object.getText());
          return j2p(value);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/codecs/lucene87/Lucene87StoredFieldsFormat$Mode.h"
#include "java/lang/String.h"
#include "org/apache/lucene/codecs/lucene87/Lucene87StoredFieldsFormat$Mode.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace codecs {
        namespace lucene87 {

          ::java::lang::Class *Lucene87StoredFieldsFormat$Mode::class$ = NULL;
          jmethodID *Lucene87StoredFieldsFormat$Mode::mids$ = NULL;
          bool Lucene87StoredFieldsFormat$Mode::live$ = false;
          Lucene87StoredFieldsFormat$Mode *Lucene87StoredFieldsFormat$Mode::BEST_COMPRESSION = NULL;
          Lucene87StoredFieldsFormat$Mode *Lucene87StoredFieldsFormat$Mode::BEST_SPEED = NULL;

          jclass Lucene87StoredFieldsFormat$Mode::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/codecs/lucene87/Lucene87StoredFieldsFormat$Mode");

              mids$ = new jmethodID[max_mid];
              mids$[mid_valueOf_87afc9ee5c63b774] = env->getStaticMethodID(cls, "valueOf", "(Ljava/lang/String;)Lorg/apache/lucene/codecs/lucene87/Lucene87StoredFieldsFormat$Mode;");
              mids$[mid_values_740428fc4b3d5104] = env->getStaticMethodID(cls, "values", "()[Lorg/apache/lucene/codecs/lucene87/Lucene87StoredFieldsFormat$Mode;");

              class$ = new ::java::lang::Class(cls);
              cls = (jclass) class$->this$;

              BEST_COMPRESSION = new Lucene87StoredFieldsFormat$Mode(env->getStaticObjectField(cls, "BEST_COMPRESSION", "Lorg/apache/lucene/codecs/lucene87/Lucene87StoredFieldsFormat$Mode;"));
              BEST_SPEED = new Lucene87StoredFieldsFormat$Mode(env->getStaticObjectField(cls, "BEST_SPEED", "Lorg/apache/lucene/codecs/lucene87/Lucene87StoredFieldsFormat$Mode;"));
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          Lucene87StoredFieldsFormat$Mode Lucene87StoredFieldsFormat$Mode::valueOf(const ::java::lang::String & a0)
          {
            jclass cls = env->getClass(initializeClass);
            return Lucene87StoredFieldsFormat$Mode(env->callStaticObjectMethod(cls, mids$[mid_valueOf_87afc9ee5c63b774], a0.this$));
          }

          JArray< Lucene87StoredFieldsFormat$Mode > Lucene87StoredFieldsFormat$Mode::values()
          {
            jclass cls = env->getClass(initializeClass);
            return JArray< Lucene87StoredFieldsFormat$Mode >(env->callStaticObjectMethod(cls, mids$[mid_values_740428fc4b3d5104]));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace codecs {
        namespace lucene87 {
          static PyObject *t_Lucene87StoredFieldsFormat$Mode_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_Lucene87StoredFieldsFormat$Mode_instance_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_Lucene87StoredFieldsFormat$Mode_of_(t_Lucene87StoredFieldsFormat$Mode *self, PyObject *args);
          static PyObject *t_Lucene87StoredFieldsFormat$Mode_valueOf(PyTypeObject *type, PyObject *args);
          static PyObject *t_Lucene87StoredFieldsFormat$Mode_values(PyTypeObject *type);
          static PyObject *t_Lucene87StoredFieldsFormat$Mode_get__parameters_(t_Lucene87StoredFieldsFormat$Mode *self, void *data);
          static PyGetSetDef t_Lucene87StoredFieldsFormat$Mode__fields_[] = {
            DECLARE_GET_FIELD(t_Lucene87StoredFieldsFormat$Mode, parameters_),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_Lucene87StoredFieldsFormat$Mode__methods_[] = {
            DECLARE_METHOD(t_Lucene87StoredFieldsFormat$Mode, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_Lucene87StoredFieldsFormat$Mode, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_Lucene87StoredFieldsFormat$Mode, of_, METH_VARARGS),
            DECLARE_METHOD(t_Lucene87StoredFieldsFormat$Mode, valueOf, METH_VARARGS | METH_CLASS),
            DECLARE_METHOD(t_Lucene87StoredFieldsFormat$Mode, values, METH_NOARGS | METH_CLASS),
            { NULL, NULL, 0, NULL }
          };

          static PyType_Slot PY_TYPE_SLOTS(Lucene87StoredFieldsFormat$Mode)[] = {
            { Py_tp_methods, t_Lucene87StoredFieldsFormat$Mode__methods_ },
            { Py_tp_init, (void *) abstract_init },
            { Py_tp_getset, t_Lucene87StoredFieldsFormat$Mode__fields_ },
            { 0, NULL }
          };

          static PyType_Def *PY_TYPE_BASES(Lucene87StoredFieldsFormat$Mode)[] = {
            &PY_TYPE_DEF(::java::lang::Enum),
            NULL
          };

          DEFINE_TYPE(Lucene87StoredFieldsFormat$Mode, t_Lucene87StoredFieldsFormat$Mode, Lucene87StoredFieldsFormat$Mode);
          PyObject *t_Lucene87StoredFieldsFormat$Mode::wrap_Object(const Lucene87StoredFieldsFormat$Mode& object, PyTypeObject *p0)
          {
            PyObject *obj = t_Lucene87StoredFieldsFormat$Mode::wrap_Object(object);
            if (obj != NULL && obj != Py_None)
            {
              t_Lucene87StoredFieldsFormat$Mode *self = (t_Lucene87StoredFieldsFormat$Mode *) obj;
              self->parameters[0] = p0;
            }
            return obj;
          }

          PyObject *t_Lucene87StoredFieldsFormat$Mode::wrap_jobject(const jobject& object, PyTypeObject *p0)
          {
            PyObject *obj = t_Lucene87StoredFieldsFormat$Mode::wrap_jobject(object);
            if (obj != NULL && obj != Py_None)
            {
              t_Lucene87StoredFieldsFormat$Mode *self = (t_Lucene87StoredFieldsFormat$Mode *) obj;
              self->parameters[0] = p0;
            }
            return obj;
          }

          void t_Lucene87StoredFieldsFormat$Mode::install(PyObject *module)
          {
            installType(&PY_TYPE(Lucene87StoredFieldsFormat$Mode), &PY_TYPE_DEF(Lucene87StoredFieldsFormat$Mode), module, "Lucene87StoredFieldsFormat$Mode", 0);
          }

          void t_Lucene87StoredFieldsFormat$Mode::initialize(PyObject *module)
          {
            PyObject_SetAttrString((PyObject *) PY_TYPE(Lucene87StoredFieldsFormat$Mode), "class_", make_descriptor(Lucene87StoredFieldsFormat$Mode::initializeClass, 1));
            PyObject_SetAttrString((PyObject *) PY_TYPE(Lucene87StoredFieldsFormat$Mode), "wrapfn_", make_descriptor(t_Lucene87StoredFieldsFormat$Mode::wrap_jobject));
            PyObject_SetAttrString((PyObject *) PY_TYPE(Lucene87StoredFieldsFormat$Mode), "boxfn_", make_descriptor(boxObject));
            env->getClass(Lucene87StoredFieldsFormat$Mode::initializeClass);
            PyObject_SetAttrString((PyObject *) PY_TYPE(Lucene87StoredFieldsFormat$Mode), "BEST_COMPRESSION", make_descriptor(t_Lucene87StoredFieldsFormat$Mode::wrap_Object(*Lucene87StoredFieldsFormat$Mode::BEST_COMPRESSION)));
            PyObject_SetAttrString((PyObject *) PY_TYPE(Lucene87StoredFieldsFormat$Mode), "BEST_SPEED", make_descriptor(t_Lucene87StoredFieldsFormat$Mode::wrap_Object(*Lucene87StoredFieldsFormat$Mode::BEST_SPEED)));
          }

          static PyObject *t_Lucene87StoredFieldsFormat$Mode_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, Lucene87StoredFieldsFormat$Mode::initializeClass, 1)))
              return NULL;
            return t_Lucene87StoredFieldsFormat$Mode::wrap_Object(Lucene87StoredFieldsFormat$Mode(((t_Lucene87StoredFieldsFormat$Mode *) arg)->object.this$));
          }
          static PyObject *t_Lucene87StoredFieldsFormat$Mode_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, Lucene87StoredFieldsFormat$Mode::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static PyObject *t_Lucene87StoredFieldsFormat$Mode_of_(t_Lucene87StoredFieldsFormat$Mode *self, PyObject *args)
          {
            if (!parseArg(args, "T", 1, &(self->parameters)))
              Py_RETURN_SELF;
            return PyErr_SetArgsError((PyObject *) self, "of_", args);
          }

          static PyObject *t_Lucene87StoredFieldsFormat$Mode_valueOf(PyTypeObject *type, PyObject *args)
          {
            ::java::lang::String a0((jobject) NULL);
            Lucene87StoredFieldsFormat$Mode result((jobject) NULL);

            if (!parseArgs(args, "s", &a0))
            {
              OBJ_CALL(result = ::org::apache::lucene::codecs::lucene87::Lucene87StoredFieldsFormat$Mode::valueOf(a0));
              return t_Lucene87StoredFieldsFormat$Mode::wrap_Object(result);
            }

            return callSuper(type, "valueOf", args, 2);
          }

          static PyObject *t_Lucene87StoredFieldsFormat$Mode_values(PyTypeObject *type)
          {
            JArray< Lucene87StoredFieldsFormat$Mode > result((jobject) NULL);
            OBJ_CALL(result = ::org::apache::lucene::codecs::lucene87::Lucene87StoredFieldsFormat$Mode::values());
            return JArray<jobject>(result.this$).wrap(t_Lucene87StoredFieldsFormat$Mode::wrap_jobject);
          }
          static PyObject *t_Lucene87StoredFieldsFormat$Mode_get__parameters_(t_Lucene87StoredFieldsFormat$Mode *self, void *data)
          {
            return typeParameters(self->parameters, sizeof(self->parameters));
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/util/SuppressForbidden.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {

        ::java::lang::Class *SuppressForbidden::class$ = NULL;
        jmethodID *SuppressForbidden::mids$ = NULL;
        bool SuppressForbidden::live$ = false;

        jclass SuppressForbidden::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/util/SuppressForbidden");

            mids$ = new jmethodID[max_mid];
            mids$[mid_reason_db9b55ba01e03e4b] = env->getMethodID(cls, "reason", "()Ljava/lang/String;");

            class$ = new ::java::lang::Class(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        ::java::lang::String SuppressForbidden::reason() const
        {
          return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_reason_db9b55ba01e03e4b]));
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        static PyObject *t_SuppressForbidden_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_SuppressForbidden_instance_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_SuppressForbidden_reason(t_SuppressForbidden *self);

        static PyMethodDef t_SuppressForbidden__methods_[] = {
          DECLARE_METHOD(t_SuppressForbidden, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_SuppressForbidden, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_SuppressForbidden, reason, METH_NOARGS),
          { NULL, NULL, 0, NULL }
        };

        static PyType_Slot PY_TYPE_SLOTS(SuppressForbidden)[] = {
          { Py_tp_methods, t_SuppressForbidden__methods_ },
          { Py_tp_init, (void *) abstract_init },
          { 0, NULL }
        };

        static PyType_Def *PY_TYPE_BASES(SuppressForbidden)[] = {
          &PY_TYPE_DEF(::java::lang::Object),
          NULL
        };

        DEFINE_TYPE(SuppressForbidden, t_SuppressForbidden, SuppressForbidden);

        void t_SuppressForbidden::install(PyObject *module)
        {
          installType(&PY_TYPE(SuppressForbidden), &PY_TYPE_DEF(SuppressForbidden), module, "SuppressForbidden", 0);
        }

        void t_SuppressForbidden::initialize(PyObject *module)
        {
          PyObject_SetAttrString((PyObject *) PY_TYPE(SuppressForbidden), "class_", make_descriptor(SuppressForbidden::initializeClass, 1));
          PyObject_SetAttrString((PyObject *) PY_TYPE(SuppressForbidden), "wrapfn_", make_descriptor(t_SuppressForbidden::wrap_jobject));
          PyObject_SetAttrString((PyObject *) PY_TYPE(SuppressForbidden), "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_SuppressForbidden_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, SuppressForbidden::initializeClass, 1)))
            return NULL;
          return t_SuppressForbidden::wrap_Object(SuppressForbidden(((t_SuppressForbidden *) arg)->object.this$));
        }
        static PyObject *t_SuppressForbidden_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, SuppressForbidden::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static PyObject *t_SuppressForbidden_reason(t_SuppressForbidden *self)
        {
          ::java::lang::String result((jobject) NULL);
          OBJ_CALL(result = self->object.reason());
          return j2p(result);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/util/compress/LZ4$HashTable.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        namespace compress {

          ::java::lang::Class *LZ4$HashTable::class$ = NULL;
          jmethodID *LZ4$HashTable::mids$ = NULL;
          bool LZ4$HashTable::live$ = false;

          jclass LZ4$HashTable::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/util/compress/LZ4$HashTable");

              class$ = new ::java::lang::Class(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        namespace compress {
          static PyObject *t_LZ4$HashTable_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_LZ4$HashTable_instance_(PyTypeObject *type, PyObject *arg);

          static PyMethodDef t_LZ4$HashTable__methods_[] = {
            DECLARE_METHOD(t_LZ4$HashTable, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_LZ4$HashTable, instance_, METH_O | METH_CLASS),
            { NULL, NULL, 0, NULL }
          };

          static PyType_Slot PY_TYPE_SLOTS(LZ4$HashTable)[] = {
            { Py_tp_methods, t_LZ4$HashTable__methods_ },
            { Py_tp_init, (void *) abstract_init },
            { 0, NULL }
          };

          static PyType_Def *PY_TYPE_BASES(LZ4$HashTable)[] = {
            &PY_TYPE_DEF(::java::lang::Object),
            NULL
          };

          DEFINE_TYPE(LZ4$HashTable, t_LZ4$HashTable, LZ4$HashTable);

          void t_LZ4$HashTable::install(PyObject *module)
          {
            installType(&PY_TYPE(LZ4$HashTable), &PY_TYPE_DEF(LZ4$HashTable), module, "LZ4$HashTable", 0);
          }

          void t_LZ4$HashTable::initialize(PyObject *module)
          {
            PyObject_SetAttrString((PyObject *) PY_TYPE(LZ4$HashTable), "class_", make_descriptor(LZ4$HashTable::initializeClass, 1));
            PyObject_SetAttrString((PyObject *) PY_TYPE(LZ4$HashTable), "wrapfn_", make_descriptor(t_LZ4$HashTable::wrap_jobject));
            PyObject_SetAttrString((PyObject *) PY_TYPE(LZ4$HashTable), "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_LZ4$HashTable_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, LZ4$HashTable::initializeClass, 1)))
              return NULL;
            return t_LZ4$HashTable::wrap_Object(LZ4$HashTable(((t_LZ4$HashTable *) arg)->object.this$));
          }
          static PyObject *t_LZ4$HashTable_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, LZ4$HashTable::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queries/payloads/PayloadFunction.h"
#include "org/apache/lucene/search/Explanation.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queries {
        namespace payloads {

          ::java::lang::Class *PayloadFunction::class$ = NULL;
          jmethodID *PayloadFunction::mids$ = NULL;
          bool PayloadFunction::live$ = false;

          jclass PayloadFunction::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/queries/payloads/PayloadFunction");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_f2cc1bce94666404] = env->getMethodID(cls, "<init>", "()V");
              mids$[mid_currentScore_0a14f13874ab46d9] = env->getMethodID(cls, "currentScore", "(ILjava/lang/String;IIIFF)F");
              mids$[mid_docScore_6294fc7b7308f6b0] = env->getMethodID(cls, "docScore", "(ILjava/lang/String;IF)F");
              mids$[mid_equals_8b72f2dcdde6fd1d] = env->getMethodID(cls, "equals", "(Ljava/lang/Object;)Z");
              mids$[mid_explain_a704e831bc4bdcca] = env->getMethodID(cls, "explain", "(ILjava/lang/String;IF)Lorg/apache/lucene/search/Explanation;");
              mids$[mid_hashCode_9972fcc56b44e79d] = env->getMethodID(cls, "hashCode", "()I");

              class$ = new ::java::lang::Class(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          PayloadFunction::PayloadFunction() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_f2cc1bce94666404)) {}

          jfloat PayloadFunction::currentScore(jint a0, const ::java::lang::String & a1, jint a2, jint a3, jint a4, jfloat a5, jfloat a6) const
          {
            return env->callFloatMethod(this$, mids$[mid_currentScore_0a14f13874ab46d9], a0, a1.this$, a2, a3, a4, a5, a6);
          }

          jfloat PayloadFunction::docScore(jint a0, const ::java::lang::String & a1, jint a2, jfloat a3) const
          {
            return env->callFloatMethod(this$, mids$[mid_docScore_6294fc7b7308f6b0], a0, a1.this$, a2, a3);
          }

          jboolean PayloadFunction::equals(const ::java::lang::Object & a0) const
          {
            return env->callBooleanMethod(this$, mids$[mid_equals_8b72f2dcdde6fd1d], a0.this$);
          }

          ::org::apache::lucene::search::Explanation PayloadFunction::explain(jint a0, const ::java::lang::String & a1, jint a2, jfloat a3) const
          {
            return ::org::apache::lucene::search::Explanation(env->callObjectMethod(this$, mids$[mid_explain_a704e831bc4bdcca], a0, a1.this$, a2, a3));
          }

          jint PayloadFunction::hashCode() const
          {
            return env->callIntMethod(this$, mids$[mid_hashCode_9972fcc56b44e79d]);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queries {
        namespace payloads {
          static PyObject *t_PayloadFunction_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_PayloadFunction_instance_(PyTypeObject *type, PyObject *arg);
          static int t_PayloadFunction_init_(t_PayloadFunction *self, PyObject *args, PyObject *kwds);
          static PyObject *t_PayloadFunction_currentScore(t_PayloadFunction *self, PyObject *args);
          static PyObject *t_PayloadFunction_docScore(t_PayloadFunction *self, PyObject *args);
          static PyObject *t_PayloadFunction_equals(t_PayloadFunction *self, PyObject *args);
          static PyObject *t_PayloadFunction_explain(t_PayloadFunction *self, PyObject *args);
          static PyObject *t_PayloadFunction_hashCode(t_PayloadFunction *self, PyObject *args);

          static PyMethodDef t_PayloadFunction__methods_[] = {
            DECLARE_METHOD(t_PayloadFunction, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_PayloadFunction, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_PayloadFunction, currentScore, METH_VARARGS),
            DECLARE_METHOD(t_PayloadFunction, docScore, METH_VARARGS),
            DECLARE_METHOD(t_PayloadFunction, equals, METH_VARARGS),
            DECLARE_METHOD(t_PayloadFunction, explain, METH_VARARGS),
            DECLARE_METHOD(t_PayloadFunction, hashCode, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          static PyType_Slot PY_TYPE_SLOTS(PayloadFunction)[] = {
            { Py_tp_methods, t_PayloadFunction__methods_ },
            { Py_tp_init, (void *) t_PayloadFunction_init_ },
            { 0, NULL }
          };

          static PyType_Def *PY_TYPE_BASES(PayloadFunction)[] = {
            &PY_TYPE_DEF(::java::lang::Object),
            NULL
          };

          DEFINE_TYPE(PayloadFunction, t_PayloadFunction, PayloadFunction);

          void t_PayloadFunction::install(PyObject *module)
          {
            installType(&PY_TYPE(PayloadFunction), &PY_TYPE_DEF(PayloadFunction), module, "PayloadFunction", 0);
          }

          void t_PayloadFunction::initialize(PyObject *module)
          {
            PyObject_SetAttrString((PyObject *) PY_TYPE(PayloadFunction), "class_", make_descriptor(PayloadFunction::initializeClass, 1));
            PyObject_SetAttrString((PyObject *) PY_TYPE(PayloadFunction), "wrapfn_", make_descriptor(t_PayloadFunction::wrap_jobject));
            PyObject_SetAttrString((PyObject *) PY_TYPE(PayloadFunction), "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_PayloadFunction_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, PayloadFunction::initializeClass, 1)))
              return NULL;
            return t_PayloadFunction::wrap_Object(PayloadFunction(((t_PayloadFunction *) arg)->object.this$));
          }
          static PyObject *t_PayloadFunction_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, PayloadFunction::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_PayloadFunction_init_(t_PayloadFunction *self, PyObject *args, PyObject *kwds)
          {
            PayloadFunction object((jobject) NULL);

            INT_CALL(object = PayloadFunction());
            self->object = object;

            return 0;
          }

          static PyObject *t_PayloadFunction_currentScore(t_PayloadFunction *self, PyObject *args)
          {
            jint a0;
            ::java::lang::String a1((jobject) NULL);
            jint a2;
            jint a3;
            jint a4;
            jfloat a5;
            jfloat a6;
            jfloat result;

            if (!parseArgs(args, "IsIIIFF", &a0, &a1, &a2, &a3, &a4, &a5, &a6))
            {
              OBJ_CALL(result = self->object.currentScore(a0, a1, a2, a3, a4, a5, a6));
              return PyFloat_FromDouble((double) result);
            }

            PyErr_SetArgsError((PyObject *) self, "currentScore", args);
            return NULL;
          }

          static PyObject *t_PayloadFunction_docScore(t_PayloadFunction *self, PyObject *args)
          {
            jint a0;
            ::java::lang::String a1((jobject) NULL);
            jint a2;
            jfloat a3;
            jfloat result;

            if (!parseArgs(args, "IsIF", &a0, &a1, &a2, &a3))
            {
              OBJ_CALL(result = self->object.docScore(a0, a1, a2, a3));
              return PyFloat_FromDouble((double) result);
            }

            PyErr_SetArgsError((PyObject *) self, "docScore", args);
            return NULL;
          }

          static PyObject *t_PayloadFunction_equals(t_PayloadFunction *self, PyObject *args)
          {
            ::java::lang::Object a0((jobject) NULL);
            jboolean result;

            if (!parseArgs(args, "o", &a0))
            {
              OBJ_CALL(result = self->object.equals(a0));
              Py_RETURN_BOOL(result);
            }

            return callSuper(PY_TYPE(PayloadFunction), (PyObject *) self, "equals", args, 2);
          }

          static PyObject *t_PayloadFunction_explain(t_PayloadFunction *self, PyObject *args)
          {
            jint a0;
            ::java::lang::String a1((jobject) NULL);
            jint a2;
            jfloat a3;
            ::org::apache::lucene::search::Explanation result((jobject) NULL);

            if (!parseArgs(args, "IsIF", &a0, &a1, &a2, &a3))
            {
              OBJ_CALL(result = self->object.explain(a0, a1, a2, a3));
              return ::org::apache::lucene::search::t_Explanation::wrap_Object(result);
            }

            PyErr_SetArgsError((PyObject *) self, "explain", args);
            return NULL;
          }

          static PyObject *t_PayloadFunction_hashCode(t_PayloadFunction *self, PyObject *args)
          {
            jint result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.hashCode());
              return PyLong_FromLong((long) result);
            }

            return callSuper(PY_TYPE(PayloadFunction), (PyObject *) self, "hashCode", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/codecs/MultiLevelSkipListWriter.h"
#include "org/apache/lucene/store/IndexOutput.h"
#include "java/io/IOException.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace codecs {

        ::java::lang::Class *MultiLevelSkipListWriter::class$ = NULL;
        jmethodID *MultiLevelSkipListWriter::mids$ = NULL;
        bool MultiLevelSkipListWriter::live$ = false;

        jclass MultiLevelSkipListWriter::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/codecs/MultiLevelSkipListWriter");

            mids$ = new jmethodID[max_mid];
            mids$[mid_bufferSkip_040c4cd0390c5aff] = env->getMethodID(cls, "bufferSkip", "(I)V");
            mids$[mid_writeSkip_2d8edaf5101635c8] = env->getMethodID(cls, "writeSkip", "(Lorg/apache/lucene/store/IndexOutput;)J");
            mids$[mid_resetSkip_f2cc1bce94666404] = env->getMethodID(cls, "resetSkip", "()V");
            mids$[mid_writeSkipData_3b25f15d6988aa5d] = env->getMethodID(cls, "writeSkipData", "(ILorg/apache/lucene/store/IndexOutput;)V");
            mids$[mid_init_f2cc1bce94666404] = env->getMethodID(cls, "init", "()V");

            class$ = new ::java::lang::Class(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        void MultiLevelSkipListWriter::bufferSkip(jint a0) const
        {
          env->callVoidMethod(this$, mids$[mid_bufferSkip_040c4cd0390c5aff], a0);
        }

        jlong MultiLevelSkipListWriter::writeSkip(const ::org::apache::lucene::store::IndexOutput & a0) const
        {
          return env->callLongMethod(this$, mids$[mid_writeSkip_2d8edaf5101635c8], a0.this$);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace codecs {
        static PyObject *t_MultiLevelSkipListWriter_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_MultiLevelSkipListWriter_instance_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_MultiLevelSkipListWriter_bufferSkip(t_MultiLevelSkipListWriter *self, PyObject *arg);
        static PyObject *t_MultiLevelSkipListWriter_writeSkip(t_MultiLevelSkipListWriter *self, PyObject *arg);

        static PyMethodDef t_MultiLevelSkipListWriter__methods_[] = {
          DECLARE_METHOD(t_MultiLevelSkipListWriter, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_MultiLevelSkipListWriter, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_MultiLevelSkipListWriter, bufferSkip, METH_O),
          DECLARE_METHOD(t_MultiLevelSkipListWriter, writeSkip, METH_O),
          { NULL, NULL, 0, NULL }
        };

        static PyType_Slot PY_TYPE_SLOTS(MultiLevelSkipListWriter)[] = {
          { Py_tp_methods, t_MultiLevelSkipListWriter__methods_ },
          { Py_tp_init, (void *) abstract_init },
          { 0, NULL }
        };

        static PyType_Def *PY_TYPE_BASES(MultiLevelSkipListWriter)[] = {
          &PY_TYPE_DEF(::java::lang::Object),
          NULL
        };

        DEFINE_TYPE(MultiLevelSkipListWriter, t_MultiLevelSkipListWriter, MultiLevelSkipListWriter);

        void t_MultiLevelSkipListWriter::install(PyObject *module)
        {
          installType(&PY_TYPE(MultiLevelSkipListWriter), &PY_TYPE_DEF(MultiLevelSkipListWriter), module, "MultiLevelSkipListWriter", 0);
        }

        void t_MultiLevelSkipListWriter::initialize(PyObject *module)
        {
          PyObject_SetAttrString((PyObject *) PY_TYPE(MultiLevelSkipListWriter), "class_", make_descriptor(MultiLevelSkipListWriter::initializeClass, 1));
          PyObject_SetAttrString((PyObject *) PY_TYPE(MultiLevelSkipListWriter), "wrapfn_", make_descriptor(t_MultiLevelSkipListWriter::wrap_jobject));
          PyObject_SetAttrString((PyObject *) PY_TYPE(MultiLevelSkipListWriter), "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_MultiLevelSkipListWriter_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, MultiLevelSkipListWriter::initializeClass, 1)))
            return NULL;
          return t_MultiLevelSkipListWriter::wrap_Object(MultiLevelSkipListWriter(((t_MultiLevelSkipListWriter *) arg)->object.this$));
        }
        static PyObject *t_MultiLevelSkipListWriter_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, MultiLevelSkipListWriter::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static PyObject *t_MultiLevelSkipListWriter_bufferSkip(t_MultiLevelSkipListWriter *self, PyObject *arg)
        {
          jint a0;

          if (!parseArg(arg, "I", &a0))
          {
            OBJ_CALL(self->object.bufferSkip(a0));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "bufferSkip", arg);
          return NULL;
        }

        static PyObject *t_MultiLevelSkipListWriter_writeSkip(t_MultiLevelSkipListWriter *self, PyObject *arg)
        {
          ::org::apache::lucene::store::IndexOutput a0((jobject) NULL);
          jlong result;

          if (!parseArg(arg, "k", ::org::apache::lucene::store::IndexOutput::initializeClass, &a0))
          {
            OBJ_CALL(result = self->object.writeSkip(a0));
            return PyLong_FromLongLong((PY_LONG_LONG) result);
          }

          PyErr_SetArgsError((PyObject *) self, "writeSkip", arg);
          return NULL;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queryparser/flexible/core/nodes/PathQueryNode.h"
#include "org/apache/lucene/queryparser/flexible/core/parser/EscapeQuerySyntax.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/queryparser/flexible/core/nodes/PathQueryNode$QueryText.h"
#include "org/apache/lucene/queryparser/flexible/core/nodes/QueryNode.h"
#include "java/lang/String.h"
#include "java/lang/CharSequence.h"
#include "java/util/List.h"
#include "java/lang/CloneNotSupportedException.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace core {
            namespace nodes {

              ::java::lang::Class *PathQueryNode::class$ = NULL;
              jmethodID *PathQueryNode::mids$ = NULL;
              bool PathQueryNode::live$ = false;

              jclass PathQueryNode::initializeClass(bool getOnly)
              {
                if (getOnly)
                  return (jclass) (live$ ? class$->this$ : NULL);
                if (class$ == NULL)
                {
                  jclass cls = (jclass) env->findClass("org/apache/lucene/queryparser/flexible/core/nodes/PathQueryNode");

                  mids$ = new jmethodID[max_mid];
                  mids$[mid_init$_d03990be0130160d] = env->getMethodID(cls, "<init>", "(Ljava/util/List;)V");
                  mids$[mid_cloneTree_7f4134ae4682ace0] = env->getMethodID(cls, "cloneTree", "()Lorg/apache/lucene/queryparser/flexible/core/nodes/QueryNode;");
                  mids$[mid_getFirstPathElement_ba44900ab7d793b9] = env->getMethodID(cls, "getFirstPathElement", "()Ljava/lang/CharSequence;");
                  mids$[mid_getPathElement_807ceef7cb416379] = env->getMethodID(cls, "getPathElement", "(I)Lorg/apache/lucene/queryparser/flexible/core/nodes/PathQueryNode$QueryText;");
                  mids$[mid_getPathElements_49ec78390f08338a] = env->getMethodID(cls, "getPathElements", "()Ljava/util/List;");
                  mids$[mid_getPathElements_d82aee015ceb4d93] = env->getMethodID(cls, "getPathElements", "(I)Ljava/util/List;");
                  mids$[mid_setPathElements_d03990be0130160d] = env->getMethodID(cls, "setPathElements", "(Ljava/util/List;)V");
                  mids$[mid_toQueryString_6bb2daa53c506f10] = env->getMethodID(cls, "toQueryString", "(Lorg/apache/lucene/queryparser/flexible/core/parser/EscapeQuerySyntax;)Ljava/lang/CharSequence;");
                  mids$[mid_toString_db9b55ba01e03e4b] = env->getMethodID(cls, "toString", "()Ljava/lang/String;");

                  class$ = new ::java::lang::Class(cls);
                  live$ = true;
                }
                return (jclass) class$->this$;
              }

              PathQueryNode::PathQueryNode(const ::java::util::List & a0) : ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNodeImpl(env->newObject(initializeClass, &mids$, mid_init$_d03990be0130160d, a0.this$)) {}

              ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode PathQueryNode::cloneTree() const
              {
                return ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode(env->callObjectMethod(this$, mids$[mid_cloneTree_7f4134ae4682ace0]));
              }

              ::java::lang::CharSequence PathQueryNode::getFirstPathElement() const
              {
                return ::java::lang::CharSequence(env->callObjectMethod(this$, mids$[mid_getFirstPathElement_ba44900ab7d793b9]));
              }

              ::org::apache::lucene::queryparser::flexible::core::nodes::PathQueryNode$QueryText PathQueryNode::getPathElement(jint a0) const
              {
                return ::org::apache::lucene::queryparser::flexible::core::nodes::PathQueryNode$QueryText(env->callObjectMethod(this$, mids$[mid_getPathElement_807ceef7cb416379], a0));
              }

              ::java::util::List PathQueryNode::getPathElements() const
              {
                return ::java::util::List(env->callObjectMethod(this$, mids$[mid_getPathElements_49ec78390f08338a]));
              }

              ::java::util::List PathQueryNode::getPathElements(jint a0) const
              {
                return ::java::util::List(env->callObjectMethod(this$, mids$[mid_getPathElements_d82aee015ceb4d93], a0));
              }

              void PathQueryNode::setPathElements(const ::java::util::List & a0) const
              {
                env->callVoidMethod(this$, mids$[mid_setPathElements_d03990be0130160d], a0.this$);
              }

              ::java::lang::CharSequence PathQueryNode::toQueryString(const ::org::apache::lucene::queryparser::flexible::core::parser::EscapeQuerySyntax & a0) const
              {
                return ::java::lang::CharSequence(env->callObjectMethod(this$, mids$[mid_toQueryString_6bb2daa53c506f10], a0.this$));
              }

              ::java::lang::String PathQueryNode::toString() const
              {
                return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_db9b55ba01e03e4b]));
              }
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace core {
            namespace nodes {
              static PyObject *t_PathQueryNode_cast_(PyTypeObject *type, PyObject *arg);
              static PyObject *t_PathQueryNode_instance_(PyTypeObject *type, PyObject *arg);
              static int t_PathQueryNode_init_(t_PathQueryNode *self, PyObject *args, PyObject *kwds);
              static PyObject *t_PathQueryNode_cloneTree(t_PathQueryNode *self, PyObject *args);
              static PyObject *t_PathQueryNode_getFirstPathElement(t_PathQueryNode *self);
              static PyObject *t_PathQueryNode_getPathElement(t_PathQueryNode *self, PyObject *arg);
              static PyObject *t_PathQueryNode_getPathElements(t_PathQueryNode *self, PyObject *args);
              static PyObject *t_PathQueryNode_setPathElements(t_PathQueryNode *self, PyObject *arg);
              static PyObject *t_PathQueryNode_toQueryString(t_PathQueryNode *self, PyObject *args);
              static PyObject *t_PathQueryNode_toString(t_PathQueryNode *self, PyObject *args);
              static PyObject *t_PathQueryNode_get__firstPathElement(t_PathQueryNode *self, void *data);
              static PyObject *t_PathQueryNode_get__pathElements(t_PathQueryNode *self, void *data);
              static int t_PathQueryNode_set__pathElements(t_PathQueryNode *self, PyObject *arg, void *data);
              static PyGetSetDef t_PathQueryNode__fields_[] = {
                DECLARE_GET_FIELD(t_PathQueryNode, firstPathElement),
                DECLARE_GETSET_FIELD(t_PathQueryNode, pathElements),
                { NULL, NULL, NULL, NULL, NULL }
              };

              static PyMethodDef t_PathQueryNode__methods_[] = {
                DECLARE_METHOD(t_PathQueryNode, cast_, METH_O | METH_CLASS),
                DECLARE_METHOD(t_PathQueryNode, instance_, METH_O | METH_CLASS),
                DECLARE_METHOD(t_PathQueryNode, cloneTree, METH_VARARGS),
                DECLARE_METHOD(t_PathQueryNode, getFirstPathElement, METH_NOARGS),
                DECLARE_METHOD(t_PathQueryNode, getPathElement, METH_O),
                DECLARE_METHOD(t_PathQueryNode, getPathElements, METH_VARARGS),
                DECLARE_METHOD(t_PathQueryNode, setPathElements, METH_O),
                DECLARE_METHOD(t_PathQueryNode, toQueryString, METH_VARARGS),
                DECLARE_METHOD(t_PathQueryNode, toString, METH_VARARGS),
                { NULL, NULL, 0, NULL }
              };

              static PyType_Slot PY_TYPE_SLOTS(PathQueryNode)[] = {
                { Py_tp_methods, t_PathQueryNode__methods_ },
                { Py_tp_init, (void *) t_PathQueryNode_init_ },
                { Py_tp_getset, t_PathQueryNode__fields_ },
                { 0, NULL }
              };

              static PyType_Def *PY_TYPE_BASES(PathQueryNode)[] = {
                &PY_TYPE_DEF(::org::apache::lucene::queryparser::flexible::core::nodes::QueryNodeImpl),
                NULL
              };

              DEFINE_TYPE(PathQueryNode, t_PathQueryNode, PathQueryNode);

              void t_PathQueryNode::install(PyObject *module)
              {
                installType(&PY_TYPE(PathQueryNode), &PY_TYPE_DEF(PathQueryNode), module, "PathQueryNode", 0);
                PyObject_SetAttrString((PyObject *) PY_TYPE(PathQueryNode), "QueryText", make_descriptor(&PY_TYPE_DEF(PathQueryNode$QueryText)));
              }

              void t_PathQueryNode::initialize(PyObject *module)
              {
                PyObject_SetAttrString((PyObject *) PY_TYPE(PathQueryNode), "class_", make_descriptor(PathQueryNode::initializeClass, 1));
                PyObject_SetAttrString((PyObject *) PY_TYPE(PathQueryNode), "wrapfn_", make_descriptor(t_PathQueryNode::wrap_jobject));
                PyObject_SetAttrString((PyObject *) PY_TYPE(PathQueryNode), "boxfn_", make_descriptor(boxObject));
              }

              static PyObject *t_PathQueryNode_cast_(PyTypeObject *type, PyObject *arg)
              {
                if (!(arg = castCheck(arg, PathQueryNode::initializeClass, 1)))
                  return NULL;
                return t_PathQueryNode::wrap_Object(PathQueryNode(((t_PathQueryNode *) arg)->object.this$));
              }
              static PyObject *t_PathQueryNode_instance_(PyTypeObject *type, PyObject *arg)
              {
                if (!castCheck(arg, PathQueryNode::initializeClass, 0))
                  Py_RETURN_FALSE;
                Py_RETURN_TRUE;
              }

              static int t_PathQueryNode_init_(t_PathQueryNode *self, PyObject *args, PyObject *kwds)
              {
                ::java::util::List a0((jobject) NULL);
                PyTypeObject **p0;
                PathQueryNode object((jobject) NULL);

                if (!parseArgs(args, "K", ::java::util::List::initializeClass, &a0, &p0, ::java::util::t_List::parameters_))
                {
                  INT_CALL(object = PathQueryNode(a0));
                  self->object = object;
                }
                else
                {
                  PyErr_SetArgsError((PyObject *) self, "__init__", args);
                  return -1;
                }

                return 0;
              }

              static PyObject *t_PathQueryNode_cloneTree(t_PathQueryNode *self, PyObject *args)
              {
                ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode result((jobject) NULL);

                if (!parseArgs(args, ""))
                {
                  OBJ_CALL(result = self->object.cloneTree());
                  return ::org::apache::lucene::queryparser::flexible::core::nodes::t_QueryNode::wrap_Object(result);
                }

                return callSuper(PY_TYPE(PathQueryNode), (PyObject *) self, "cloneTree", args, 2);
              }

              static PyObject *t_PathQueryNode_getFirstPathElement(t_PathQueryNode *self)
              {
                ::java::lang::CharSequence result((jobject) NULL);
                OBJ_CALL(result = self->object.getFirstPathElement());
                return ::java::lang::t_CharSequence::wrap_Object(result);
              }

              static PyObject *t_PathQueryNode_getPathElement(t_PathQueryNode *self, PyObject *arg)
              {
                jint a0;
                ::org::apache::lucene::queryparser::flexible::core::nodes::PathQueryNode$QueryText result((jobject) NULL);

                if (!parseArg(arg, "I", &a0))
                {
                  OBJ_CALL(result = self->object.getPathElement(a0));
                  return ::org::apache::lucene::queryparser::flexible::core::nodes::t_PathQueryNode$QueryText::wrap_Object(result);
                }

                PyErr_SetArgsError((PyObject *) self, "getPathElement", arg);
                return NULL;
              }

              static PyObject *t_PathQueryNode_getPathElements(t_PathQueryNode *self, PyObject *args)
              {
                switch (PyTuple_GET_SIZE(args)) {
                 case 0:
                  {
                    ::java::util::List result((jobject) NULL);
                    OBJ_CALL(result = self->object.getPathElements());
                    return ::java::util::t_List::wrap_Object(result, ::org::apache::lucene::queryparser::flexible::core::nodes::PY_TYPE(PathQueryNode$QueryText));
                  }
                  break;
                 case 1:
                  {
                    jint a0;
                    ::java::util::List result((jobject) NULL);

                    if (!parseArgs(args, "I", &a0))
                    {
                      OBJ_CALL(result = self->object.getPathElements(a0));
                      return ::java::util::t_List::wrap_Object(result, ::org::apache::lucene::queryparser::flexible::core::nodes::PY_TYPE(PathQueryNode$QueryText));
                    }
                  }
                }

                PyErr_SetArgsError((PyObject *) self, "getPathElements", args);
                return NULL;
              }

              static PyObject *t_PathQueryNode_setPathElements(t_PathQueryNode *self, PyObject *arg)
              {
                ::java::util::List a0((jobject) NULL);
                PyTypeObject **p0;

                if (!parseArg(arg, "K", ::java::util::List::initializeClass, &a0, &p0, ::java::util::t_List::parameters_))
                {
                  OBJ_CALL(self->object.setPathElements(a0));
                  Py_RETURN_NONE;
                }

                PyErr_SetArgsError((PyObject *) self, "setPathElements", arg);
                return NULL;
              }

              static PyObject *t_PathQueryNode_toQueryString(t_PathQueryNode *self, PyObject *args)
              {
                ::org::apache::lucene::queryparser::flexible::core::parser::EscapeQuerySyntax a0((jobject) NULL);
                ::java::lang::CharSequence result((jobject) NULL);

                if (!parseArgs(args, "k", ::org::apache::lucene::queryparser::flexible::core::parser::EscapeQuerySyntax::initializeClass, &a0))
                {
                  OBJ_CALL(result = self->object.toQueryString(a0));
                  return ::java::lang::t_CharSequence::wrap_Object(result);
                }

                return callSuper(PY_TYPE(PathQueryNode), (PyObject *) self, "toQueryString", args, 2);
              }

              static PyObject *t_PathQueryNode_toString(t_PathQueryNode *self, PyObject *args)
              {
                ::java::lang::String result((jobject) NULL);

                if (!parseArgs(args, ""))
                {
                  OBJ_CALL(result = self->object.toString());
                  return j2p(result);
                }

                return callSuper(PY_TYPE(PathQueryNode), (PyObject *) self, "toString", args, 2);
              }

              static PyObject *t_PathQueryNode_get__firstPathElement(t_PathQueryNode *self, void *data)
              {
                ::java::lang::CharSequence value((jobject) NULL);
                OBJ_CALL(value = self->object.getFirstPathElement());
                return ::java::lang::t_CharSequence::wrap_Object(value);
              }

              static PyObject *t_PathQueryNode_get__pathElements(t_PathQueryNode *self, void *data)
              {
                ::java::util::List value((jobject) NULL);
                OBJ_CALL(value = self->object.getPathElements());
                return ::java::util::t_List::wrap_Object(value);
              }
              static int t_PathQueryNode_set__pathElements(t_PathQueryNode *self, PyObject *arg, void *data)
              {
                {
                  ::java::util::List value((jobject) NULL);
                  if (!parseArg(arg, "k", ::java::util::List::initializeClass, &value))
                  {
                    INT_CALL(self->object.setPathElements(value));
                    return 0;
                  }
                }
                PyErr_SetArgsError((PyObject *) self, "pathElements", arg);
                return -1;
              }
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/miscellaneous/RemoveDuplicatesTokenFilter.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/analysis/TokenStream.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace miscellaneous {

          ::java::lang::Class *RemoveDuplicatesTokenFilter::class$ = NULL;
          jmethodID *RemoveDuplicatesTokenFilter::mids$ = NULL;
          bool RemoveDuplicatesTokenFilter::live$ = false;

          jclass RemoveDuplicatesTokenFilter::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/miscellaneous/RemoveDuplicatesTokenFilter");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_c26756868a754f4e] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/analysis/TokenStream;)V");
              mids$[mid_incrementToken_8454bd5aa23fd11e] = env->getMethodID(cls, "incrementToken", "()Z");
              mids$[mid_reset_f2cc1bce94666404] = env->getMethodID(cls, "reset", "()V");

              class$ = new ::java::lang::Class(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          RemoveDuplicatesTokenFilter::RemoveDuplicatesTokenFilter(const ::org::apache::lucene::analysis::TokenStream & a0) : ::org::apache::lucene::analysis::TokenFilter(env->newObject(initializeClass, &mids$, mid_init$_c26756868a754f4e, a0.this$)) {}

          jboolean RemoveDuplicatesTokenFilter::incrementToken() const
          {
            return env->callBooleanMethod(this$, mids$[mid_incrementToken_8454bd5aa23fd11e]);
          }

          void RemoveDuplicatesTokenFilter::reset() const
          {
            env->callVoidMethod(this$, mids$[mid_reset_f2cc1bce94666404]);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace miscellaneous {
          static PyObject *t_RemoveDuplicatesTokenFilter_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_RemoveDuplicatesTokenFilter_instance_(PyTypeObject *type, PyObject *arg);
          static int t_RemoveDuplicatesTokenFilter_init_(t_RemoveDuplicatesTokenFilter *self, PyObject *args, PyObject *kwds);
          static PyObject *t_RemoveDuplicatesTokenFilter_incrementToken(t_RemoveDuplicatesTokenFilter *self, PyObject *args);
          static PyObject *t_RemoveDuplicatesTokenFilter_reset(t_RemoveDuplicatesTokenFilter *self, PyObject *args);

          static PyMethodDef t_RemoveDuplicatesTokenFilter__methods_[] = {
            DECLARE_METHOD(t_RemoveDuplicatesTokenFilter, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_RemoveDuplicatesTokenFilter, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_RemoveDuplicatesTokenFilter, incrementToken, METH_VARARGS),
            DECLARE_METHOD(t_RemoveDuplicatesTokenFilter, reset, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          static PyType_Slot PY_TYPE_SLOTS(RemoveDuplicatesTokenFilter)[] = {
            { Py_tp_methods, t_RemoveDuplicatesTokenFilter__methods_ },
            { Py_tp_init, (void *) t_RemoveDuplicatesTokenFilter_init_ },
            { 0, NULL }
          };

          static PyType_Def *PY_TYPE_BASES(RemoveDuplicatesTokenFilter)[] = {
            &PY_TYPE_DEF(::org::apache::lucene::analysis::TokenFilter),
            NULL
          };

          DEFINE_TYPE(RemoveDuplicatesTokenFilter, t_RemoveDuplicatesTokenFilter, RemoveDuplicatesTokenFilter);

          void t_RemoveDuplicatesTokenFilter::install(PyObject *module)
          {
            installType(&PY_TYPE(RemoveDuplicatesTokenFilter), &PY_TYPE_DEF(RemoveDuplicatesTokenFilter), module, "RemoveDuplicatesTokenFilter", 0);
          }

          void t_RemoveDuplicatesTokenFilter::initialize(PyObject *module)
          {
            PyObject_SetAttrString((PyObject *) PY_TYPE(RemoveDuplicatesTokenFilter), "class_", make_descriptor(RemoveDuplicatesTokenFilter::initializeClass, 1));
            PyObject_SetAttrString((PyObject *) PY_TYPE(RemoveDuplicatesTokenFilter), "wrapfn_", make_descriptor(t_RemoveDuplicatesTokenFilter::wrap_jobject));
            PyObject_SetAttrString((PyObject *) PY_TYPE(RemoveDuplicatesTokenFilter), "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_RemoveDuplicatesTokenFilter_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, RemoveDuplicatesTokenFilter::initializeClass, 1)))
              return NULL;
            return t_RemoveDuplicatesTokenFilter::wrap_Object(RemoveDuplicatesTokenFilter(((t_RemoveDuplicatesTokenFilter *) arg)->object.this$));
          }
          static PyObject *t_RemoveDuplicatesTokenFilter_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, RemoveDuplicatesTokenFilter::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_RemoveDuplicatesTokenFilter_init_(t_RemoveDuplicatesTokenFilter *self, PyObject *args, PyObject *kwds)
          {
            ::org::apache::lucene::analysis::TokenStream a0((jobject) NULL);
            RemoveDuplicatesTokenFilter object((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::analysis::TokenStream::initializeClass, &a0))
            {
              INT_CALL(object = RemoveDuplicatesTokenFilter(a0));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_RemoveDuplicatesTokenFilter_incrementToken(t_RemoveDuplicatesTokenFilter *self, PyObject *args)
          {
            jboolean result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.incrementToken());
              Py_RETURN_BOOL(result);
            }

            return callSuper(PY_TYPE(RemoveDuplicatesTokenFilter), (PyObject *) self, "incrementToken", args, 2);
          }

          static PyObject *t_RemoveDuplicatesTokenFilter_reset(t_RemoveDuplicatesTokenFilter *self, PyObject *args)
          {

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(self->object.reset());
              Py_RETURN_NONE;
            }

            return callSuper(PY_TYPE(RemoveDuplicatesTokenFilter), (PyObject *) self, "reset", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/document/XYPointField.h"
#include "org/apache/lucene/document/FieldType.h"
#include "java/lang/Class.h"
#include "java/lang/String.h"
#include "org/apache/lucene/geo/XYGeometry.h"
#include "org/apache/lucene/search/Query.h"
#include "org/apache/lucene/geo/XYPolygon.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace document {

        ::java::lang::Class *XYPointField::class$ = NULL;
        jmethodID *XYPointField::mids$ = NULL;
        bool XYPointField::live$ = false;
        jint XYPointField::BYTES = (jint) 0;
        ::org::apache::lucene::document::FieldType *XYPointField::TYPE = NULL;

        jclass XYPointField::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/document/XYPointField");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_4c60be71108f1f4a] = env->getMethodID(cls, "<init>", "(Ljava/lang/String;FF)V");
            mids$[mid_newBoxQuery_8a1205b2cac943a4] = env->getStaticMethodID(cls, "newBoxQuery", "(Ljava/lang/String;FFFF)Lorg/apache/lucene/search/Query;");
            mids$[mid_newDistanceQuery_97227b15813dc44c] = env->getStaticMethodID(cls, "newDistanceQuery", "(Ljava/lang/String;FFF)Lorg/apache/lucene/search/Query;");
            mids$[mid_newGeometryQuery_8489d3544c80a05b] = env->getStaticMethodID(cls, "newGeometryQuery", "(Ljava/lang/String;[Lorg/apache/lucene/geo/XYGeometry;)Lorg/apache/lucene/search/Query;");
            mids$[mid_newPolygonQuery_7142c1f4741031a0] = env->getStaticMethodID(cls, "newPolygonQuery", "(Ljava/lang/String;[Lorg/apache/lucene/geo/XYPolygon;)Lorg/apache/lucene/search/Query;");
            mids$[mid_setLocationValue_5a9245193073da7b] = env->getMethodID(cls, "setLocationValue", "(FF)V");
            mids$[mid_toString_db9b55ba01e03e4b] = env->getMethodID(cls, "toString", "()Ljava/lang/String;");

            class$ = new ::java::lang::Class(cls);
            cls = (jclass) class$->this$;

            BYTES = env->getStaticIntField(cls, "BYTES");
            TYPE = new ::org::apache::lucene::document::FieldType(env->getStaticObjectField(cls, "TYPE", "Lorg/apache/lucene/document/FieldType;"));
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        XYPointField::XYPointField(const ::java::lang::String & a0, jfloat a1, jfloat a2) : ::org::apache::lucene::document::Field(env->newObject(initializeClass, &mids$, mid_init$_4c60be71108f1f4a, a0.this$, a1, a2)) {}

        ::org::apache::lucene::search::Query XYPointField::newBoxQuery(const ::java::lang::String & a0, jfloat a1, jfloat a2, jfloat a3, jfloat a4)
        {
          jclass cls = env->getClass(initializeClass);
          return ::org::apache::lucene::search::Query(env->callStaticObjectMethod(cls, mids$[mid_newBoxQuery_8a1205b2cac943a4], a0.this$, a1, a2, a3, a4));
        }

        ::org::apache::lucene::search::Query XYPointField::newDistanceQuery(const ::java::lang::String & a0, jfloat a1, jfloat a2, jfloat a3)
        {
          jclass cls = env->getClass(initializeClass);
          return ::org::apache::lucene::search::Query(env->callStaticObjectMethod(cls, mids$[mid_newDistanceQuery_97227b15813dc44c], a0.this$, a1, a2, a3));
        }

        ::org::apache::lucene::search::Query XYPointField::newGeometryQuery(const ::java::lang::String & a0, const JArray< ::org::apache::lucene::geo::XYGeometry > & a1)
        {
          jclass cls = env->getClass(initializeClass);
          return ::org::apache::lucene::search::Query(env->callStaticObjectMethod(cls, mids$[mid_newGeometryQuery_8489d3544c80a05b], a0.this$, a1.this$));
        }

        ::org::apache::lucene::search::Query XYPointField::newPolygonQuery(const ::java::lang::String & a0, const JArray< ::org::apache::lucene::geo::XYPolygon > & a1)
        {
          jclass cls = env->getClass(initializeClass);
          return ::org::apache::lucene::search::Query(env->callStaticObjectMethod(cls, mids$[mid_newPolygonQuery_7142c1f4741031a0], a0.this$, a1.this$));
        }

        void XYPointField::setLocationValue(jfloat a0, jfloat a1) const
        {
          env->callVoidMethod(this$, mids$[mid_setLocationValue_5a9245193073da7b], a0, a1);
        }

        ::java::lang::String XYPointField::toString() const
        {
          return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_db9b55ba01e03e4b]));
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace document {
        static PyObject *t_XYPointField_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_XYPointField_instance_(PyTypeObject *type, PyObject *arg);
        static int t_XYPointField_init_(t_XYPointField *self, PyObject *args, PyObject *kwds);
        static PyObject *t_XYPointField_newBoxQuery(PyTypeObject *type, PyObject *args);
        static PyObject *t_XYPointField_newDistanceQuery(PyTypeObject *type, PyObject *args);
        static PyObject *t_XYPointField_newGeometryQuery(PyTypeObject *type, PyObject *args);
        static PyObject *t_XYPointField_newPolygonQuery(PyTypeObject *type, PyObject *args);
        static PyObject *t_XYPointField_setLocationValue(t_XYPointField *self, PyObject *args);
        static PyObject *t_XYPointField_toString(t_XYPointField *self, PyObject *args);

        static PyMethodDef t_XYPointField__methods_[] = {
          DECLARE_METHOD(t_XYPointField, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_XYPointField, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_XYPointField, newBoxQuery, METH_VARARGS | METH_CLASS),
          DECLARE_METHOD(t_XYPointField, newDistanceQuery, METH_VARARGS | METH_CLASS),
          DECLARE_METHOD(t_XYPointField, newGeometryQuery, METH_VARARGS | METH_CLASS),
          DECLARE_METHOD(t_XYPointField, newPolygonQuery, METH_VARARGS | METH_CLASS),
          DECLARE_METHOD(t_XYPointField, setLocationValue, METH_VARARGS),
          DECLARE_METHOD(t_XYPointField, toString, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        static PyType_Slot PY_TYPE_SLOTS(XYPointField)[] = {
          { Py_tp_methods, t_XYPointField__methods_ },
          { Py_tp_init, (void *) t_XYPointField_init_ },
          { 0, NULL }
        };

        static PyType_Def *PY_TYPE_BASES(XYPointField)[] = {
          &PY_TYPE_DEF(::org::apache::lucene::document::Field),
          NULL
        };

        DEFINE_TYPE(XYPointField, t_XYPointField, XYPointField);

        void t_XYPointField::install(PyObject *module)
        {
          installType(&PY_TYPE(XYPointField), &PY_TYPE_DEF(XYPointField), module, "XYPointField", 0);
        }

        void t_XYPointField::initialize(PyObject *module)
        {
          PyObject_SetAttrString((PyObject *) PY_TYPE(XYPointField), "class_", make_descriptor(XYPointField::initializeClass, 1));
          PyObject_SetAttrString((PyObject *) PY_TYPE(XYPointField), "wrapfn_", make_descriptor(t_XYPointField::wrap_jobject));
          PyObject_SetAttrString((PyObject *) PY_TYPE(XYPointField), "boxfn_", make_descriptor(boxObject));
          env->getClass(XYPointField::initializeClass);
          PyObject_SetAttrString((PyObject *) PY_TYPE(XYPointField), "BYTES", make_descriptor(XYPointField::BYTES));
          PyObject_SetAttrString((PyObject *) PY_TYPE(XYPointField), "TYPE", make_descriptor(::org::apache::lucene::document::t_FieldType::wrap_Object(*XYPointField::TYPE)));
        }

        static PyObject *t_XYPointField_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, XYPointField::initializeClass, 1)))
            return NULL;
          return t_XYPointField::wrap_Object(XYPointField(((t_XYPointField *) arg)->object.this$));
        }
        static PyObject *t_XYPointField_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, XYPointField::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_XYPointField_init_(t_XYPointField *self, PyObject *args, PyObject *kwds)
        {
          ::java::lang::String a0((jobject) NULL);
          jfloat a1;
          jfloat a2;
          XYPointField object((jobject) NULL);

          if (!parseArgs(args, "sFF", &a0, &a1, &a2))
          {
            INT_CALL(object = XYPointField(a0, a1, a2));
            self->object = object;
          }
          else
          {
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }

        static PyObject *t_XYPointField_newBoxQuery(PyTypeObject *type, PyObject *args)
        {
          ::java::lang::String a0((jobject) NULL);
          jfloat a1;
          jfloat a2;
          jfloat a3;
          jfloat a4;
          ::org::apache::lucene::search::Query result((jobject) NULL);

          if (!parseArgs(args, "sFFFF", &a0, &a1, &a2, &a3, &a4))
          {
            OBJ_CALL(result = ::org::apache::lucene::document::XYPointField::newBoxQuery(a0, a1, a2, a3, a4));
            return ::org::apache::lucene::search::t_Query::wrap_Object(result);
          }

          PyErr_SetArgsError(type, "newBoxQuery", args);
          return NULL;
        }

        static PyObject *t_XYPointField_newDistanceQuery(PyTypeObject *type, PyObject *args)
        {
          ::java::lang::String a0((jobject) NULL);
          jfloat a1;
          jfloat a2;
          jfloat a3;
          ::org::apache::lucene::search::Query result((jobject) NULL);

          if (!parseArgs(args, "sFFF", &a0, &a1, &a2, &a3))
          {
            OBJ_CALL(result = ::org::apache::lucene::document::XYPointField::newDistanceQuery(a0, a1, a2, a3));
            return ::org::apache::lucene::search::t_Query::wrap_Object(result);
          }

          PyErr_SetArgsError(type, "newDistanceQuery", args);
          return NULL;
        }

        static PyObject *t_XYPointField_newGeometryQuery(PyTypeObject *type, PyObject *args)
        {
          ::java::lang::String a0((jobject) NULL);
          JArray< ::org::apache::lucene::geo::XYGeometry > a1((jobject) NULL);
          ::org::apache::lucene::search::Query result((jobject) NULL);

          if (!parseArgs(args, "s[k", ::org::apache::lucene::geo::XYGeometry::initializeClass, &a0, &a1))
          {
            OBJ_CALL(result = ::org::apache::lucene::document::XYPointField::newGeometryQuery(a0, a1));
            return ::org::apache::lucene::search::t_Query::wrap_Object(result);
          }

          PyErr_SetArgsError(type, "newGeometryQuery", args);
          return NULL;
        }

        static PyObject *t_XYPointField_newPolygonQuery(PyTypeObject *type, PyObject *args)
        {
          ::java::lang::String a0((jobject) NULL);
          JArray< ::org::apache::lucene::geo::XYPolygon > a1((jobject) NULL);
          ::org::apache::lucene::search::Query result((jobject) NULL);

          if (!parseArgs(args, "s[k", ::org::apache::lucene::geo::XYPolygon::initializeClass, &a0, &a1))
          {
            OBJ_CALL(result = ::org::apache::lucene::document::XYPointField::newPolygonQuery(a0, a1));
            return ::org::apache::lucene::search::t_Query::wrap_Object(result);
          }

          PyErr_SetArgsError(type, "newPolygonQuery", args);
          return NULL;
        }

        static PyObject *t_XYPointField_setLocationValue(t_XYPointField *self, PyObject *args)
        {
          jfloat a0;
          jfloat a1;

          if (!parseArgs(args, "FF", &a0, &a1))
          {
            OBJ_CALL(self->object.setLocationValue(a0, a1));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "setLocationValue", args);
          return NULL;
        }

        static PyObject *t_XYPointField_toString(t_XYPointField *self, PyObject *args)
        {
          ::java::lang::String result((jobject) NULL);

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.toString());
            return j2p(result);
          }

          return callSuper(PY_TYPE(XYPointField), (PyObject *) self, "toString", args, 2);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/util/Version.h"
#include "java/lang/String.h"
#include "org/apache/lucene/util/Version.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {

        ::java::lang::Class *Version::class$ = NULL;
        jmethodID *Version::mids$ = NULL;
        jfieldID *Version::fids$ = NULL;
        bool Version::live$ = false;
        Version *Version::LATEST = NULL;
        Version *Version::LUCENE_7_0_0 = NULL;
        Version *Version::LUCENE_7_0_1 = NULL;
        Version *Version::LUCENE_7_1_0 = NULL;
        Version *Version::LUCENE_7_2_0 = NULL;
        Version *Version::LUCENE_7_2_1 = NULL;
        Version *Version::LUCENE_7_3_0 = NULL;
        Version *Version::LUCENE_7_3_1 = NULL;
        Version *Version::LUCENE_7_4_0 = NULL;
        Version *Version::LUCENE_7_5_0 = NULL;
        Version *Version::LUCENE_7_6_0 = NULL;
        Version *Version::LUCENE_7_7_0 = NULL;
        Version *Version::LUCENE_7_7_1 = NULL;
        Version *Version::LUCENE_7_7_2 = NULL;
        Version *Version::LUCENE_7_7_3 = NULL;
        Version *Version::LUCENE_7_8_0 = NULL;
        Version *Version::LUCENE_8_0_0 = NULL;
        Version *Version::LUCENE_8_1_0 = NULL;
        Version *Version::LUCENE_8_1_1 = NULL;
        Version *Version::LUCENE_8_2_0 = NULL;
        Version *Version::LUCENE_8_3_0 = NULL;
        Version *Version::LUCENE_8_3_1 = NULL;
        Version *Version::LUCENE_8_4_0 = NULL;
        Version *Version::LUCENE_8_4_1 = NULL;
        Version *Version::LUCENE_8_5_0 = NULL;
        Version *Version::LUCENE_8_5_1 = NULL;
        Version *Version::LUCENE_8_5_2 = NULL;
        Version *Version::LUCENE_8_6_0 = NULL;
        Version *Version::LUCENE_8_6_1 = NULL;
        Version *Version::LUCENE_8_6_2 = NULL;
        Version *Version::LUCENE_8_6_3 = NULL;
        Version *Version::LUCENE_8_7_0 = NULL;
        Version *Version::LUCENE_8_8_0 = NULL;
        Version *Version::LUCENE_8_8_1 = NULL;
        Version *Version::LUCENE_8_8_2 = NULL;
        Version *Version::LUCENE_8_9_0 = NULL;
        Version *Version::LUCENE_CURRENT = NULL;

        jclass Version::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/util/Version");

            mids$ = new jmethodID[max_mid];
            mids$[mid_equals_8b72f2dcdde6fd1d] = env->getMethodID(cls, "equals", "(Ljava/lang/Object;)Z");
            mids$[mid_fromBits_4fc78b18dd8d5969] = env->getStaticMethodID(cls, "fromBits", "(III)Lorg/apache/lucene/util/Version;");
            mids$[mid_hashCode_9972fcc56b44e79d] = env->getMethodID(cls, "hashCode", "()I");
            mids$[mid_onOrAfter_34410a04cabe96cc] = env->getMethodID(cls, "onOrAfter", "(Lorg/apache/lucene/util/Version;)Z");
            mids$[mid_parse_f137af40605ba4de] = env->getStaticMethodID(cls, "parse", "(Ljava/lang/String;)Lorg/apache/lucene/util/Version;");
            mids$[mid_parseLeniently_f137af40605ba4de] = env->getStaticMethodID(cls, "parseLeniently", "(Ljava/lang/String;)Lorg/apache/lucene/util/Version;");
            mids$[mid_toString_db9b55ba01e03e4b] = env->getMethodID(cls, "toString", "()Ljava/lang/String;");

            fids$ = new jfieldID[max_fid];
            fids$[fid_bugfix] = env->getFieldID(cls, "bugfix", "I");
            fids$[fid_major] = env->getFieldID(cls, "major", "I");
            fids$[fid_minor] = env->getFieldID(cls, "minor", "I");
            fids$[fid_prerelease] = env->getFieldID(cls, "prerelease", "I");

            class$ = new ::java::lang::Class(cls);
            cls = (jclass) class$->this$;

            LATEST = new Version(env->getStaticObjectField(cls, "LATEST", "Lorg/apache/lucene/util/Version;"));
            LUCENE_7_0_0 = new Version(env->getStaticObjectField(cls, "LUCENE_7_0_0", "Lorg/apache/lucene/util/Version;"));
            LUCENE_7_0_1 = new Version(env->getStaticObjectField(cls, "LUCENE_7_0_1", "Lorg/apache/lucene/util/Version;"));
            LUCENE_7_1_0 = new Version(env->getStaticObjectField(cls, "LUCENE_7_1_0", "Lorg/apache/lucene/util/Version;"));
            LUCENE_7_2_0 = new Version(env->getStaticObjectField(cls, "LUCENE_7_2_0", "Lorg/apache/lucene/util/Version;"));
            LUCENE_7_2_1 = new Version(env->getStaticObjectField(cls, "LUCENE_7_2_1", "Lorg/apache/lucene/util/Version;"));
            LUCENE_7_3_0 = new Version(env->getStaticObjectField(cls, "LUCENE_7_3_0", "Lorg/apache/lucene/util/Version;"));
            LUCENE_7_3_1 = new Version(env->getStaticObjectField(cls, "LUCENE_7_3_1", "Lorg/apache/lucene/util/Version;"));
            LUCENE_7_4_0 = new Version(env->getStaticObjectField(cls, "LUCENE_7_4_0", "Lorg/apache/lucene/util/Version;"));
            LUCENE_7_5_0 = new Version(env->getStaticObjectField(cls, "LUCENE_7_5_0", "Lorg/apache/lucene/util/Version;"));
            LUCENE_7_6_0 = new Version(env->getStaticObjectField(cls, "LUCENE_7_6_0", "Lorg/apache/lucene/util/Version;"));
            LUCENE_7_7_0 = new Version(env->getStaticObjectField(cls, "LUCENE_7_7_0", "Lorg/apache/lucene/util/Version;"));
            LUCENE_7_7_1 = new Version(env->getStaticObjectField(cls, "LUCENE_7_7_1", "Lorg/apache/lucene/util/Version;"));
            LUCENE_7_7_2 = new Version(env->getStaticObjectField(cls, "LUCENE_7_7_2", "Lorg/apache/lucene/util/Version;"));
            LUCENE_7_7_3 = new Version(env->getStaticObjectField(cls, "LUCENE_7_7_3", "Lorg/apache/lucene/util/Version;"));
            LUCENE_7_8_0 = new Version(env->getStaticObjectField(cls, "LUCENE_7_8_0", "Lorg/apache/lucene/util/Version;"));
            LUCENE_8_0_0 = new Version(env->getStaticObjectField(cls, "LUCENE_8_0_0", "Lorg/apache/lucene/util/Version;"));
            LUCENE_8_1_0 = new Version(env->getStaticObjectField(cls, "LUCENE_8_1_0", "Lorg/apache/lucene/util/Version;"));
            LUCENE_8_1_1 = new Version(env->getStaticObjectField(cls, "LUCENE_8_1_1", "Lorg/apache/lucene/util/Version;"));
            LUCENE_8_2_0 = new Version(env->getStaticObjectField(cls, "LUCENE_8_2_0", "Lorg/apache/lucene/util/Version;"));
            LUCENE_8_3_0 = new Version(env->getStaticObjectField(cls, "LUCENE_8_3_0", "Lorg/apache/lucene/util/Version;"));
            LUCENE_8_3_1 = new Version(env->getStaticObjectField(cls, "LUCENE_8_3_1", "Lorg/apache/lucene/util/Version;"));
            LUCENE_8_4_0 = new Version(env->getStaticObjectField(cls, "LUCENE_8_4_0", "Lorg/apache/lucene/util/Version;"));
            LUCENE_8_4_1 = new Version(env->getStaticObjectField(cls, "LUCENE_8_4_1", "Lorg/apache/lucene/util/Version;"));
            LUCENE_8_5_0 = new Version(env->getStaticObjectField(cls, "LUCENE_8_5_0", "Lorg/apache/lucene/util/Version;"));
            LUCENE_8_5_1 = new Version(env->getStaticObjectField(cls, "LUCENE_8_5_1", "Lorg/apache/lucene/util/Version;"));
            LUCENE_8_5_2 = new Version(env->getStaticObjectField(cls, "LUCENE_8_5_2", "Lorg/apache/lucene/util/Version;"));
            LUCENE_8_6_0 = new Version(env->getStaticObjectField(cls, "LUCENE_8_6_0", "Lorg/apache/lucene/util/Version;"));
            LUCENE_8_6_1 = new Version(env->getStaticObjectField(cls, "LUCENE_8_6_1", "Lorg/apache/lucene/util/Version;"));
            LUCENE_8_6_2 = new Version(env->getStaticObjectField(cls, "LUCENE_8_6_2", "Lorg/apache/lucene/util/Version;"));
            LUCENE_8_6_3 = new Version(env->getStaticObjectField(cls, "LUCENE_8_6_3", "Lorg/apache/lucene/util/Version;"));
            LUCENE_8_7_0 = new Version(env->getStaticObjectField(cls, "LUCENE_8_7_0", "Lorg/apache/lucene/util/Version;"));
            LUCENE_8_8_0 = new Version(env->getStaticObjectField(cls, "LUCENE_8_8_0", "Lorg/apache/lucene/util/Version;"));
            LUCENE_8_8_1 = new Version(env->getStaticObjectField(cls, "LUCENE_8_8_1", "Lorg/apache/lucene/util/Version;"));
            LUCENE_8_8_2 = new Version(env->getStaticObjectField(cls, "LUCENE_8_8_2", "Lorg/apache/lucene/util/Version;"));
            LUCENE_8_9_0 = new Version(env->getStaticObjectField(cls, "LUCENE_8_9_0", "Lorg/apache/lucene/util/Version;"));
            LUCENE_CURRENT = new Version(env->getStaticObjectField(cls, "LUCENE_CURRENT", "Lorg/apache/lucene/util/Version;"));
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        jboolean Version::equals(const ::java::lang::Object & a0) const
        {
          return env->callBooleanMethod(this$, mids$[mid_equals_8b72f2dcdde6fd1d], a0.this$);
        }

        Version Version::fromBits(jint a0, jint a1, jint a2)
        {
          jclass cls = env->getClass(initializeClass);
          return Version(env->callStaticObjectMethod(cls, mids$[mid_fromBits_4fc78b18dd8d5969], a0, a1, a2));
        }

        jint Version::hashCode() const
        {
          return env->callIntMethod(this$, mids$[mid_hashCode_9972fcc56b44e79d]);
        }

        jboolean Version::onOrAfter(const Version & a0) const
        {
          return env->callBooleanMethod(this$, mids$[mid_onOrAfter_34410a04cabe96cc], a0.this$);
        }

        Version Version::parse(const ::java::lang::String & a0)
        {
          jclass cls = env->getClass(initializeClass);
          return Version(env->callStaticObjectMethod(cls, mids$[mid_parse_f137af40605ba4de], a0.this$));
        }

        Version Version::parseLeniently(const ::java::lang::String & a0)
        {
          jclass cls = env->getClass(initializeClass);
          return Version(env->callStaticObjectMethod(cls, mids$[mid_parseLeniently_f137af40605ba4de], a0.this$));
        }

        ::java::lang::String Version::toString() const
        {
          return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_db9b55ba01e03e4b]));
        }

        jint Version::_get_bugfix() const
        {
          return env->getIntField(this$, fids$[fid_bugfix]);
        }

        jint Version::_get_major() const
        {
          return env->getIntField(this$, fids$[fid_major]);
        }

        jint Version::_get_minor() const
        {
          return env->getIntField(this$, fids$[fid_minor]);
        }

        jint Version::_get_prerelease() const
        {
          return env->getIntField(this$, fids$[fid_prerelease]);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        static PyObject *t_Version_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_Version_instance_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_Version_equals(t_Version *self, PyObject *args);
        static PyObject *t_Version_fromBits(PyTypeObject *type, PyObject *args);
        static PyObject *t_Version_hashCode(t_Version *self, PyObject *args);
        static PyObject *t_Version_onOrAfter(t_Version *self, PyObject *arg);
        static PyObject *t_Version_parse(PyTypeObject *type, PyObject *arg);
        static PyObject *t_Version_parseLeniently(PyTypeObject *type, PyObject *arg);
        static PyObject *t_Version_toString(t_Version *self, PyObject *args);
        static PyObject *t_Version_get__bugfix(t_Version *self, void *data);
        static PyObject *t_Version_get__major(t_Version *self, void *data);
        static PyObject *t_Version_get__minor(t_Version *self, void *data);
        static PyObject *t_Version_get__prerelease(t_Version *self, void *data);

        static PyGetSetDef t_Version__fields_[] = {
          DECLARE_GET_FIELD(t_Version, bugfix),
          DECLARE_GET_FIELD(t_Version, major),
          DECLARE_GET_FIELD(t_Version, minor),
          DECLARE_GET_FIELD(t_Version, prerelease),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_Version__methods_[] = {
          DECLARE_METHOD(t_Version, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_Version, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_Version, equals, METH_VARARGS),
          DECLARE_METHOD(t_Version, fromBits, METH_VARARGS | METH_CLASS),
          DECLARE_METHOD(t_Version, hashCode, METH_VARARGS),
          DECLARE_METHOD(t_Version, onOrAfter, METH_O),
          DECLARE_METHOD(t_Version, parse, METH_O | METH_CLASS),
          DECLARE_METHOD(t_Version, parseLeniently, METH_O | METH_CLASS),
          DECLARE_METHOD(t_Version, toString, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        static PyType_Slot PY_TYPE_SLOTS(Version)[] = {
          { Py_tp_methods, t_Version__methods_ },
          { Py_tp_init, (void *) abstract_init },
          { Py_tp_getset, t_Version__fields_ },
          { 0, NULL }
        };

        static PyType_Def *PY_TYPE_BASES(Version)[] = {
          &PY_TYPE_DEF(::java::lang::Object),
          NULL
        };

        DEFINE_TYPE(Version, t_Version, Version);

        void t_Version::install(PyObject *module)
        {
          installType(&PY_TYPE(Version), &PY_TYPE_DEF(Version), module, "Version", 0);
        }

        void t_Version::initialize(PyObject *module)
        {
          PyObject_SetAttrString((PyObject *) PY_TYPE(Version), "class_", make_descriptor(Version::initializeClass, 1));
          PyObject_SetAttrString((PyObject *) PY_TYPE(Version), "wrapfn_", make_descriptor(t_Version::wrap_jobject));
          PyObject_SetAttrString((PyObject *) PY_TYPE(Version), "boxfn_", make_descriptor(boxObject));
          env->getClass(Version::initializeClass);
          PyObject_SetAttrString((PyObject *) PY_TYPE(Version), "LATEST", make_descriptor(t_Version::wrap_Object(*Version::LATEST)));
          PyObject_SetAttrString((PyObject *) PY_TYPE(Version), "LUCENE_7_0_0", make_descriptor(t_Version::wrap_Object(*Version::LUCENE_7_0_0)));
          PyObject_SetAttrString((PyObject *) PY_TYPE(Version), "LUCENE_7_0_1", make_descriptor(t_Version::wrap_Object(*Version::LUCENE_7_0_1)));
          PyObject_SetAttrString((PyObject *) PY_TYPE(Version), "LUCENE_7_1_0", make_descriptor(t_Version::wrap_Object(*Version::LUCENE_7_1_0)));
          PyObject_SetAttrString((PyObject *) PY_TYPE(Version), "LUCENE_7_2_0", make_descriptor(t_Version::wrap_Object(*Version::LUCENE_7_2_0)));
          PyObject_SetAttrString((PyObject *) PY_TYPE(Version), "LUCENE_7_2_1", make_descriptor(t_Version::wrap_Object(*Version::LUCENE_7_2_1)));
          PyObject_SetAttrString((PyObject *) PY_TYPE(Version), "LUCENE_7_3_0", make_descriptor(t_Version::wrap_Object(*Version::LUCENE_7_3_0)));
          PyObject_SetAttrString((PyObject *) PY_TYPE(Version), "LUCENE_7_3_1", make_descriptor(t_Version::wrap_Object(*Version::LUCENE_7_3_1)));
          PyObject_SetAttrString((PyObject *) PY_TYPE(Version), "LUCENE_7_4_0", make_descriptor(t_Version::wrap_Object(*Version::LUCENE_7_4_0)));
          PyObject_SetAttrString((PyObject *) PY_TYPE(Version), "LUCENE_7_5_0", make_descriptor(t_Version::wrap_Object(*Version::LUCENE_7_5_0)));
          PyObject_SetAttrString((PyObject *) PY_TYPE(Version), "LUCENE_7_6_0", make_descriptor(t_Version::wrap_Object(*Version::LUCENE_7_6_0)));
          PyObject_SetAttrString((PyObject *) PY_TYPE(Version), "LUCENE_7_7_0", make_descriptor(t_Version::wrap_Object(*Version::LUCENE_7_7_0)));
          PyObject_SetAttrString((PyObject *) PY_TYPE(Version), "LUCENE_7_7_1", make_descriptor(t_Version::wrap_Object(*Version::LUCENE_7_7_1)));
          PyObject_SetAttrString((PyObject *) PY_TYPE(Version), "LUCENE_7_7_2", make_descriptor(t_Version::wrap_Object(*Version::LUCENE_7_7_2)));
          PyObject_SetAttrString((PyObject *) PY_TYPE(Version), "LUCENE_7_7_3", make_descriptor(t_Version::wrap_Object(*Version::LUCENE_7_7_3)));
          PyObject_SetAttrString((PyObject *) PY_TYPE(Version), "LUCENE_7_8_0", make_descriptor(t_Version::wrap_Object(*Version::LUCENE_7_8_0)));
          PyObject_SetAttrString((PyObject *) PY_TYPE(Version), "LUCENE_8_0_0", make_descriptor(t_Version::wrap_Object(*Version::LUCENE_8_0_0)));
          PyObject_SetAttrString((PyObject *) PY_TYPE(Version), "LUCENE_8_1_0", make_descriptor(t_Version::wrap_Object(*Version::LUCENE_8_1_0)));
          PyObject_SetAttrString((PyObject *) PY_TYPE(Version), "LUCENE_8_1_1", make_descriptor(t_Version::wrap_Object(*Version::LUCENE_8_1_1)));
          PyObject_SetAttrString((PyObject *) PY_TYPE(Version), "LUCENE_8_2_0", make_descriptor(t_Version::wrap_Object(*Version::LUCENE_8_2_0)));
          PyObject_SetAttrString((PyObject *) PY_TYPE(Version), "LUCENE_8_3_0", make_descriptor(t_Version::wrap_Object(*Version::LUCENE_8_3_0)));
          PyObject_SetAttrString((PyObject *) PY_TYPE(Version), "LUCENE_8_3_1", make_descriptor(t_Version::wrap_Object(*Version::LUCENE_8_3_1)));
          PyObject_SetAttrString((PyObject *) PY_TYPE(Version), "LUCENE_8_4_0", make_descriptor(t_Version::wrap_Object(*Version::LUCENE_8_4_0)));
          PyObject_SetAttrString((PyObject *) PY_TYPE(Version), "LUCENE_8_4_1", make_descriptor(t_Version::wrap_Object(*Version::LUCENE_8_4_1)));
          PyObject_SetAttrString((PyObject *) PY_TYPE(Version), "LUCENE_8_5_0", make_descriptor(t_Version::wrap_Object(*Version::LUCENE_8_5_0)));
          PyObject_SetAttrString((PyObject *) PY_TYPE(Version), "LUCENE_8_5_1", make_descriptor(t_Version::wrap_Object(*Version::LUCENE_8_5_1)));
          PyObject_SetAttrString((PyObject *) PY_TYPE(Version), "LUCENE_8_5_2", make_descriptor(t_Version::wrap_Object(*Version::LUCENE_8_5_2)));
          PyObject_SetAttrString((PyObject *) PY_TYPE(Version), "LUCENE_8_6_0", make_descriptor(t_Version::wrap_Object(*Version::LUCENE_8_6_0)));
          PyObject_SetAttrString((PyObject *) PY_TYPE(Version), "LUCENE_8_6_1", make_descriptor(t_Version::wrap_Object(*Version::LUCENE_8_6_1)));
          PyObject_SetAttrString((PyObject *) PY_TYPE(Version), "LUCENE_8_6_2", make_descriptor(t_Version::wrap_Object(*Version::LUCENE_8_6_2)));
          PyObject_SetAttrString((PyObject *) PY_TYPE(Version), "LUCENE_8_6_3", make_descriptor(t_Version::wrap_Object(*Version::LUCENE_8_6_3)));
          PyObject_SetAttrString((PyObject *) PY_TYPE(Version), "LUCENE_8_7_0", make_descriptor(t_Version::wrap_Object(*Version::LUCENE_8_7_0)));
          PyObject_SetAttrString((PyObject *) PY_TYPE(Version), "LUCENE_8_8_0", make_descriptor(t_Version::wrap_Object(*Version::LUCENE_8_8_0)));
          PyObject_SetAttrString((PyObject *) PY_TYPE(Version), "LUCENE_8_8_1", make_descriptor(t_Version::wrap_Object(*Version::LUCENE_8_8_1)));
          PyObject_SetAttrString((PyObject *) PY_TYPE(Version), "LUCENE_8_8_2", make_descriptor(t_Version::wrap_Object(*Version::LUCENE_8_8_2)));
          PyObject_SetAttrString((PyObject *) PY_TYPE(Version), "LUCENE_8_9_0", make_descriptor(t_Version::wrap_Object(*Version::LUCENE_8_9_0)));
          PyObject_SetAttrString((PyObject *) PY_TYPE(Version), "LUCENE_CURRENT", make_descriptor(t_Version::wrap_Object(*Version::LUCENE_CURRENT)));
        }

        static PyObject *t_Version_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, Version::initializeClass, 1)))
            return NULL;
          return t_Version::wrap_Object(Version(((t_Version *) arg)->object.this$));
        }
        static PyObject *t_Version_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, Version::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static PyObject *t_Version_equals(t_Version *self, PyObject *args)
        {
          ::java::lang::Object a0((jobject) NULL);
          jboolean result;

          if (!parseArgs(args, "o", &a0))
          {
            OBJ_CALL(result = self->object.equals(a0));
            Py_RETURN_BOOL(result);
          }

          return callSuper(PY_TYPE(Version), (PyObject *) self, "equals", args, 2);
        }

        static PyObject *t_Version_fromBits(PyTypeObject *type, PyObject *args)
        {
          jint a0;
          jint a1;
          jint a2;
          Version result((jobject) NULL);

          if (!parseArgs(args, "III", &a0, &a1, &a2))
          {
            OBJ_CALL(result = ::org::apache::lucene::util::Version::fromBits(a0, a1, a2));
            return t_Version::wrap_Object(result);
          }

          PyErr_SetArgsError(type, "fromBits", args);
          return NULL;
        }

        static PyObject *t_Version_hashCode(t_Version *self, PyObject *args)
        {
          jint result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.hashCode());
            return PyLong_FromLong((long) result);
          }

          return callSuper(PY_TYPE(Version), (PyObject *) self, "hashCode", args, 2);
        }

        static PyObject *t_Version_onOrAfter(t_Version *self, PyObject *arg)
        {
          Version a0((jobject) NULL);
          jboolean result;

          if (!parseArg(arg, "k", Version::initializeClass, &a0))
          {
            OBJ_CALL(result = self->object.onOrAfter(a0));
            Py_RETURN_BOOL(result);
          }

          PyErr_SetArgsError((PyObject *) self, "onOrAfter", arg);
          return NULL;
        }

        static PyObject *t_Version_parse(PyTypeObject *type, PyObject *arg)
        {
          ::java::lang::String a0((jobject) NULL);
          Version result((jobject) NULL);

          if (!parseArg(arg, "s", &a0))
          {
            OBJ_CALL(result = ::org::apache::lucene::util::Version::parse(a0));
            return t_Version::wrap_Object(result);
          }

          PyErr_SetArgsError(type, "parse", arg);
          return NULL;
        }

        static PyObject *t_Version_parseLeniently(PyTypeObject *type, PyObject *arg)
        {
          ::java::lang::String a0((jobject) NULL);
          Version result((jobject) NULL);

          if (!parseArg(arg, "s", &a0))
          {
            OBJ_CALL(result = ::org::apache::lucene::util::Version::parseLeniently(a0));
            return t_Version::wrap_Object(result);
          }

          PyErr_SetArgsError(type, "parseLeniently", arg);
          return NULL;
        }

        static PyObject *t_Version_toString(t_Version *self, PyObject *args)
        {
          ::java::lang::String result((jobject) NULL);

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.toString());
            return j2p(result);
          }

          return callSuper(PY_TYPE(Version), (PyObject *) self, "toString", args, 2);
        }

        static PyObject *t_Version_get__bugfix(t_Version *self, void *data)
        {
          jint value;
          OBJ_CALL(value = self->object._get_bugfix());
          return PyLong_FromLong((long) value);
        }

        static PyObject *t_Version_get__major(t_Version *self, void *data)
        {
          jint value;
          OBJ_CALL(value = self->object._get_major());
          return PyLong_FromLong((long) value);
        }

        static PyObject *t_Version_get__minor(t_Version *self, void *data)
        {
          jint value;
          OBJ_CALL(value = self->object._get_minor());
          return PyLong_FromLong((long) value);
        }

        static PyObject *t_Version_get__prerelease(t_Version *self, void *data)
        {
          jint value;
          OBJ_CALL(value = self->object._get_prerelease());
          return PyLong_FromLong((long) value);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/spans/SpanContainingQuery.h"
#include "org/apache/lucene/search/spans/SpanQuery.h"
#include "org/apache/lucene/search/IndexSearcher.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/search/spans/SpanWeight.h"
#include "java/lang/String.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/search/ScoreMode.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace spans {

          ::java::lang::Class *SpanContainingQuery::class$ = NULL;
          jmethodID *SpanContainingQuery::mids$ = NULL;
          bool SpanContainingQuery::live$ = false;

          jclass SpanContainingQuery::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/search/spans/SpanContainingQuery");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_5a5cbe5f748d0153] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/search/spans/SpanQuery;Lorg/apache/lucene/search/spans/SpanQuery;)V");
              mids$[mid_createWeight_5baab4cc5ccc46b6] = env->getMethodID(cls, "createWeight", "(Lorg/apache/lucene/search/IndexSearcher;Lorg/apache/lucene/search/ScoreMode;F)Lorg/apache/lucene/search/spans/SpanWeight;");
              mids$[mid_toString_9bfa75c9f141b67f] = env->getMethodID(cls, "toString", "(Ljava/lang/String;)Ljava/lang/String;");

              class$ = new ::java::lang::Class(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          SpanContainingQuery::SpanContainingQuery(const ::org::apache::lucene::search::spans::SpanQuery & a0, const ::org::apache::lucene::search::spans::SpanQuery & a1) : ::org::apache::lucene::search::spans::SpanContainQuery(env->newObject(initializeClass, &mids$, mid_init$_5a5cbe5f748d0153, a0.this$, a1.this$)) {}

          ::org::apache::lucene::search::spans::SpanWeight SpanContainingQuery::createWeight(const ::org::apache::lucene::search::IndexSearcher & a0, const ::org::apache::lucene::search::ScoreMode & a1, jfloat a2) const
          {
            return ::org::apache::lucene::search::spans::SpanWeight(env->callObjectMethod(this$, mids$[mid_createWeight_5baab4cc5ccc46b6], a0.this$, a1.this$, a2));
          }

          ::java::lang::String SpanContainingQuery::toString(const ::java::lang::String & a0) const
          {
            return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_9bfa75c9f141b67f], a0.this$));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace spans {
          static PyObject *t_SpanContainingQuery_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_SpanContainingQuery_instance_(PyTypeObject *type, PyObject *arg);
          static int t_SpanContainingQuery_init_(t_SpanContainingQuery *self, PyObject *args, PyObject *kwds);
          static PyObject *t_SpanContainingQuery_createWeight(t_SpanContainingQuery *self, PyObject *args);
          static PyObject *t_SpanContainingQuery_toString(t_SpanContainingQuery *self, PyObject *args);

          static PyMethodDef t_SpanContainingQuery__methods_[] = {
            DECLARE_METHOD(t_SpanContainingQuery, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_SpanContainingQuery, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_SpanContainingQuery, createWeight, METH_VARARGS),
            DECLARE_METHOD(t_SpanContainingQuery, toString, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          static PyType_Slot PY_TYPE_SLOTS(SpanContainingQuery)[] = {
            { Py_tp_methods, t_SpanContainingQuery__methods_ },
            { Py_tp_init, (void *) t_SpanContainingQuery_init_ },
            { 0, NULL }
          };

          static PyType_Def *PY_TYPE_BASES(SpanContainingQuery)[] = {
            &PY_TYPE_DEF(::org::apache::lucene::search::spans::SpanContainQuery),
            NULL
          };

          DEFINE_TYPE(SpanContainingQuery, t_SpanContainingQuery, SpanContainingQuery);

          void t_SpanContainingQuery::install(PyObject *module)
          {
            installType(&PY_TYPE(SpanContainingQuery), &PY_TYPE_DEF(SpanContainingQuery), module, "SpanContainingQuery", 0);
          }

          void t_SpanContainingQuery::initialize(PyObject *module)
          {
            PyObject_SetAttrString((PyObject *) PY_TYPE(SpanContainingQuery), "class_", make_descriptor(SpanContainingQuery::initializeClass, 1));
            PyObject_SetAttrString((PyObject *) PY_TYPE(SpanContainingQuery), "wrapfn_", make_descriptor(t_SpanContainingQuery::wrap_jobject));
            PyObject_SetAttrString((PyObject *) PY_TYPE(SpanContainingQuery), "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_SpanContainingQuery_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, SpanContainingQuery::initializeClass, 1)))
              return NULL;
            return t_SpanContainingQuery::wrap_Object(SpanContainingQuery(((t_SpanContainingQuery *) arg)->object.this$));
          }
          static PyObject *t_SpanContainingQuery_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, SpanContainingQuery::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_SpanContainingQuery_init_(t_SpanContainingQuery *self, PyObject *args, PyObject *kwds)
          {
            ::org::apache::lucene::search::spans::SpanQuery a0((jobject) NULL);
            ::org::apache::lucene::search::spans::SpanQuery a1((jobject) NULL);
            SpanContainingQuery object((jobject) NULL);

            if (!parseArgs(args, "kk", ::org::apache::lucene::search::spans::SpanQuery::initializeClass, ::org::apache::lucene::search::spans::SpanQuery::initializeClass, &a0, &a1))
            {
              INT_CALL(object = SpanContainingQuery(a0, a1));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_SpanContainingQuery_createWeight(t_SpanContainingQuery *self, PyObject *args)
          {
            ::org::apache::lucene::search::IndexSearcher a0((jobject) NULL);
            ::org::apache::lucene::search::ScoreMode a1((jobject) NULL);
            PyTypeObject **p1;
            jfloat a2;
            ::org::apache::lucene::search::spans::SpanWeight result((jobject) NULL);

            if (!parseArgs(args, "kKF", ::org::apache::lucene::search::IndexSearcher::initializeClass, ::org::apache::lucene::search::ScoreMode::initializeClass, &a0, &a1, &p1, ::org::apache::lucene::search::t_ScoreMode::parameters_, &a2))
            {
              OBJ_CALL(result = self->object.createWeight(a0, a1, a2));
              return ::org::apache::lucene::search::spans::t_SpanWeight::wrap_Object(result);
            }

            return callSuper(PY_TYPE(SpanContainingQuery), (PyObject *) self, "createWeight", args, 2);
          }

          static PyObject *t_SpanContainingQuery_toString(t_SpanContainingQuery *self, PyObject *args)
          {
            ::java::lang::String a0((jobject) NULL);
            ::java::lang::String result((jobject) NULL);

            if (!parseArgs(args, "s", &a0))
            {
              OBJ_CALL(result = self->object.toString(a0));
              return j2p(result);
            }

            return callSuper(PY_TYPE(SpanContainingQuery), (PyObject *) self, "toString", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/ko/KoreanTokenizer$DecompoundMode.h"
#include "java/lang/String.h"
#include "org/apache/lucene/analysis/ko/KoreanTokenizer$DecompoundMode.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace ko {

          ::java::lang::Class *KoreanTokenizer$DecompoundMode::class$ = NULL;
          jmethodID *KoreanTokenizer$DecompoundMode::mids$ = NULL;
          bool KoreanTokenizer$DecompoundMode::live$ = false;
          KoreanTokenizer$DecompoundMode *KoreanTokenizer$DecompoundMode::DISCARD = NULL;
          KoreanTokenizer$DecompoundMode *KoreanTokenizer$DecompoundMode::MIXED = NULL;
          KoreanTokenizer$DecompoundMode *KoreanTokenizer$DecompoundMode::NONE = NULL;

          jclass KoreanTokenizer$DecompoundMode::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/ko/KoreanTokenizer$DecompoundMode");

              mids$ = new jmethodID[max_mid];
              mids$[mid_valueOf_2a10c787fcf5aef2] = env->getStaticMethodID(cls, "valueOf", "(Ljava/lang/String;)Lorg/apache/lucene/analysis/ko/KoreanTokenizer$DecompoundMode;");
              mids$[mid_values_155ccb619a04aaa0] = env->getStaticMethodID(cls, "values", "()[Lorg/apache/lucene/analysis/ko/KoreanTokenizer$DecompoundMode;");

              class$ = new ::java::lang::Class(cls);
              cls = (jclass) class$->this$;

              DISCARD = new KoreanTokenizer$DecompoundMode(env->getStaticObjectField(cls, "DISCARD", "Lorg/apache/lucene/analysis/ko/KoreanTokenizer$DecompoundMode;"));
              MIXED = new KoreanTokenizer$DecompoundMode(env->getStaticObjectField(cls, "MIXED", "Lorg/apache/lucene/analysis/ko/KoreanTokenizer$DecompoundMode;"));
              NONE = new KoreanTokenizer$DecompoundMode(env->getStaticObjectField(cls, "NONE", "Lorg/apache/lucene/analysis/ko/KoreanTokenizer$DecompoundMode;"));
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          KoreanTokenizer$DecompoundMode KoreanTokenizer$DecompoundMode::valueOf(const ::java::lang::String & a0)
          {
            jclass cls = env->getClass(initializeClass);
            return KoreanTokenizer$DecompoundMode(env->callStaticObjectMethod(cls, mids$[mid_valueOf_2a10c787fcf5aef2], a0.this$));
          }

          JArray< KoreanTokenizer$DecompoundMode > KoreanTokenizer$DecompoundMode::values()
          {
            jclass cls = env->getClass(initializeClass);
            return JArray< KoreanTokenizer$DecompoundMode >(env->callStaticObjectMethod(cls, mids$[mid_values_155ccb619a04aaa0]));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace ko {
          static PyObject *t_KoreanTokenizer$DecompoundMode_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_KoreanTokenizer$DecompoundMode_instance_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_KoreanTokenizer$DecompoundMode_of_(t_KoreanTokenizer$DecompoundMode *self, PyObject *args);
          static PyObject *t_KoreanTokenizer$DecompoundMode_valueOf(PyTypeObject *type, PyObject *args);
          static PyObject *t_KoreanTokenizer$DecompoundMode_values(PyTypeObject *type);
          static PyObject *t_KoreanTokenizer$DecompoundMode_get__parameters_(t_KoreanTokenizer$DecompoundMode *self, void *data);
          static PyGetSetDef t_KoreanTokenizer$DecompoundMode__fields_[] = {
            DECLARE_GET_FIELD(t_KoreanTokenizer$DecompoundMode, parameters_),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_KoreanTokenizer$DecompoundMode__methods_[] = {
            DECLARE_METHOD(t_KoreanTokenizer$DecompoundMode, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_KoreanTokenizer$DecompoundMode, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_KoreanTokenizer$DecompoundMode, of_, METH_VARARGS),
            DECLARE_METHOD(t_KoreanTokenizer$DecompoundMode, valueOf, METH_VARARGS | METH_CLASS),
            DECLARE_METHOD(t_KoreanTokenizer$DecompoundMode, values, METH_NOARGS | METH_CLASS),
            { NULL, NULL, 0, NULL }
          };

          static PyType_Slot PY_TYPE_SLOTS(KoreanTokenizer$DecompoundMode)[] = {
            { Py_tp_methods, t_KoreanTokenizer$DecompoundMode__methods_ },
            { Py_tp_init, (void *) abstract_init },
            { Py_tp_getset, t_KoreanTokenizer$DecompoundMode__fields_ },
            { 0, NULL }
          };

          static PyType_Def *PY_TYPE_BASES(KoreanTokenizer$DecompoundMode)[] = {
            &PY_TYPE_DEF(::java::lang::Enum),
            NULL
          };

          DEFINE_TYPE(KoreanTokenizer$DecompoundMode, t_KoreanTokenizer$DecompoundMode, KoreanTokenizer$DecompoundMode);
          PyObject *t_KoreanTokenizer$DecompoundMode::wrap_Object(const KoreanTokenizer$DecompoundMode& object, PyTypeObject *p0)
          {
            PyObject *obj = t_KoreanTokenizer$DecompoundMode::wrap_Object(object);
            if (obj != NULL && obj != Py_None)
            {
              t_KoreanTokenizer$DecompoundMode *self = (t_KoreanTokenizer$DecompoundMode *) obj;
              self->parameters[0] = p0;
            }
            return obj;
          }

          PyObject *t_KoreanTokenizer$DecompoundMode::wrap_jobject(const jobject& object, PyTypeObject *p0)
          {
            PyObject *obj = t_KoreanTokenizer$DecompoundMode::wrap_jobject(object);
            if (obj != NULL && obj != Py_None)
            {
              t_KoreanTokenizer$DecompoundMode *self = (t_KoreanTokenizer$DecompoundMode *) obj;
              self->parameters[0] = p0;
            }
            return obj;
          }

          void t_KoreanTokenizer$DecompoundMode::install(PyObject *module)
          {
            installType(&PY_TYPE(KoreanTokenizer$DecompoundMode), &PY_TYPE_DEF(KoreanTokenizer$DecompoundMode), module, "KoreanTokenizer$DecompoundMode", 0);
          }

          void t_KoreanTokenizer$DecompoundMode::initialize(PyObject *module)
          {
            PyObject_SetAttrString((PyObject *) PY_TYPE(KoreanTokenizer$DecompoundMode), "class_", make_descriptor(KoreanTokenizer$DecompoundMode::initializeClass, 1));
            PyObject_SetAttrString((PyObject *) PY_TYPE(KoreanTokenizer$DecompoundMode), "wrapfn_", make_descriptor(t_KoreanTokenizer$DecompoundMode::wrap_jobject));
            PyObject_SetAttrString((PyObject *) PY_TYPE(KoreanTokenizer$DecompoundMode), "boxfn_", make_descriptor(boxObject));
            env->getClass(KoreanTokenizer$DecompoundMode::initializeClass);
            PyObject_SetAttrString((PyObject *) PY_TYPE(KoreanTokenizer$DecompoundMode), "DISCARD", make_descriptor(t_KoreanTokenizer$DecompoundMode::wrap_Object(*KoreanTokenizer$DecompoundMode::DISCARD)));
            PyObject_SetAttrString((PyObject *) PY_TYPE(KoreanTokenizer$DecompoundMode), "MIXED", make_descriptor(t_KoreanTokenizer$DecompoundMode::wrap_Object(*KoreanTokenizer$DecompoundMode::MIXED)));
            PyObject_SetAttrString((PyObject *) PY_TYPE(KoreanTokenizer$DecompoundMode), "NONE", make_descriptor(t_KoreanTokenizer$DecompoundMode::wrap_Object(*KoreanTokenizer$DecompoundMode::NONE)));
          }

          static PyObject *t_KoreanTokenizer$DecompoundMode_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, KoreanTokenizer$DecompoundMode::initializeClass, 1)))
              return NULL;
            return t_KoreanTokenizer$DecompoundMode::wrap_Object(KoreanTokenizer$DecompoundMode(((t_KoreanTokenizer$DecompoundMode *) arg)->object.this$));
          }
          static PyObject *t_KoreanTokenizer$DecompoundMode_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, KoreanTokenizer$DecompoundMode::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static PyObject *t_KoreanTokenizer$DecompoundMode_of_(t_KoreanTokenizer$DecompoundMode *self, PyObject *args)
          {
            if (!parseArg(args, "T", 1, &(self->parameters)))
              Py_RETURN_SELF;
            return PyErr_SetArgsError((PyObject *) self, "of_", args);
          }

          static PyObject *t_KoreanTokenizer$DecompoundMode_valueOf(PyTypeObject *type, PyObject *args)
          {
            ::java::lang::String a0((jobject) NULL);
            KoreanTokenizer$DecompoundMode result((jobject) NULL);

            if (!parseArgs(args, "s", &a0))
            {
              OBJ_CALL(result = ::org::apache::lucene::analysis::ko::KoreanTokenizer$DecompoundMode::valueOf(a0));
              return t_KoreanTokenizer$DecompoundMode::wrap_Object(result);
            }

            return callSuper(type, "valueOf", args, 2);
          }

          static PyObject *t_KoreanTokenizer$DecompoundMode_values(PyTypeObject *type)
          {
            JArray< KoreanTokenizer$DecompoundMode > result((jobject) NULL);
            OBJ_CALL(result = ::org::apache::lucene::analysis::ko::KoreanTokenizer$DecompoundMode::values());
            return JArray<jobject>(result.this$).wrap(t_KoreanTokenizer$DecompoundMode::wrap_jobject);
          }
          static PyObject *t_KoreanTokenizer$DecompoundMode_get__parameters_(t_KoreanTokenizer$DecompoundMode *self, void *data)
          {
            return typeParameters(self->parameters, sizeof(self->parameters));
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/similarities/IndependenceChiSquared.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace similarities {

          ::java::lang::Class *IndependenceChiSquared::class$ = NULL;
          jmethodID *IndependenceChiSquared::mids$ = NULL;
          bool IndependenceChiSquared::live$ = false;

          jclass IndependenceChiSquared::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/search/similarities/IndependenceChiSquared");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_f2cc1bce94666404] = env->getMethodID(cls, "<init>", "()V");
              mids$[mid_score_990b512583b70d91] = env->getMethodID(cls, "score", "(DD)D");
              mids$[mid_toString_db9b55ba01e03e4b] = env->getMethodID(cls, "toString", "()Ljava/lang/String;");

              class$ = new ::java::lang::Class(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          IndependenceChiSquared::IndependenceChiSquared() : ::org::apache::lucene::search::similarities::Independence(env->newObject(initializeClass, &mids$, mid_init$_f2cc1bce94666404)) {}

          jdouble IndependenceChiSquared::score(jdouble a0, jdouble a1) const
          {
            return env->callDoubleMethod(this$, mids$[mid_score_990b512583b70d91], a0, a1);
          }

          ::java::lang::String IndependenceChiSquared::toString() const
          {
            return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_db9b55ba01e03e4b]));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace similarities {
          static PyObject *t_IndependenceChiSquared_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_IndependenceChiSquared_instance_(PyTypeObject *type, PyObject *arg);
          static int t_IndependenceChiSquared_init_(t_IndependenceChiSquared *self, PyObject *args, PyObject *kwds);
          static PyObject *t_IndependenceChiSquared_score(t_IndependenceChiSquared *self, PyObject *args);
          static PyObject *t_IndependenceChiSquared_toString(t_IndependenceChiSquared *self, PyObject *args);

          static PyMethodDef t_IndependenceChiSquared__methods_[] = {
            DECLARE_METHOD(t_IndependenceChiSquared, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_IndependenceChiSquared, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_IndependenceChiSquared, score, METH_VARARGS),
            DECLARE_METHOD(t_IndependenceChiSquared, toString, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          static PyType_Slot PY_TYPE_SLOTS(IndependenceChiSquared)[] = {
            { Py_tp_methods, t_IndependenceChiSquared__methods_ },
            { Py_tp_init, (void *) t_IndependenceChiSquared_init_ },
            { 0, NULL }
          };

          static PyType_Def *PY_TYPE_BASES(IndependenceChiSquared)[] = {
            &PY_TYPE_DEF(::org::apache::lucene::search::similarities::Independence),
            NULL
          };

          DEFINE_TYPE(IndependenceChiSquared, t_IndependenceChiSquared, IndependenceChiSquared);

          void t_IndependenceChiSquared::install(PyObject *module)
          {
            installType(&PY_TYPE(IndependenceChiSquared), &PY_TYPE_DEF(IndependenceChiSquared), module, "IndependenceChiSquared", 0);
          }

          void t_IndependenceChiSquared::initialize(PyObject *module)
          {
            PyObject_SetAttrString((PyObject *) PY_TYPE(IndependenceChiSquared), "class_", make_descriptor(IndependenceChiSquared::initializeClass, 1));
            PyObject_SetAttrString((PyObject *) PY_TYPE(IndependenceChiSquared), "wrapfn_", make_descriptor(t_IndependenceChiSquared::wrap_jobject));
            PyObject_SetAttrString((PyObject *) PY_TYPE(IndependenceChiSquared), "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_IndependenceChiSquared_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, IndependenceChiSquared::initializeClass, 1)))
              return NULL;
            return t_IndependenceChiSquared::wrap_Object(IndependenceChiSquared(((t_IndependenceChiSquared *) arg)->object.this$));
          }
          static PyObject *t_IndependenceChiSquared_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, IndependenceChiSquared::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_IndependenceChiSquared_init_(t_IndependenceChiSquared *self, PyObject *args, PyObject *kwds)
          {
            IndependenceChiSquared object((jobject) NULL);

            INT_CALL(object = IndependenceChiSquared());
            self->object = object;

            return 0;
          }

          static PyObject *t_IndependenceChiSquared_score(t_IndependenceChiSquared *self, PyObject *args)
          {
            jdouble a0;
            jdouble a1;
            jdouble result;

            if (!parseArgs(args, "DD", &a0, &a1))
            {
              OBJ_CALL(result = self->object.score(a0, a1));
              return PyFloat_FromDouble((double) result);
            }

            return callSuper(PY_TYPE(IndependenceChiSquared), (PyObject *) self, "score", args, 2);
          }

          static PyObject *t_IndependenceChiSquared_toString(t_IndependenceChiSquared *self, PyObject *args)
          {
            ::java::lang::String result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.toString());
              return j2p(result);
            }

            return callSuper(PY_TYPE(IndependenceChiSquared), (PyObject *) self, "toString", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/codecs/simpletext/SimpleTextStoredFieldsReader.h"
#include "org/apache/lucene/store/IOContext.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/store/Directory.h"
#include "java/lang/String.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/index/SegmentInfo.h"
#include "org/apache/lucene/index/StoredFieldVisitor.h"
#include "org/apache/lucene/index/FieldInfos.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace codecs {
        namespace simpletext {

          ::java::lang::Class *SimpleTextStoredFieldsReader::class$ = NULL;
          jmethodID *SimpleTextStoredFieldsReader::mids$ = NULL;
          bool SimpleTextStoredFieldsReader::live$ = false;

          jclass SimpleTextStoredFieldsReader::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/codecs/simpletext/SimpleTextStoredFieldsReader");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_5ab8220dbafb2f4c] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/store/Directory;Lorg/apache/lucene/index/SegmentInfo;Lorg/apache/lucene/index/FieldInfos;Lorg/apache/lucene/store/IOContext;)V");
              mids$[mid_checkIntegrity_f2cc1bce94666404] = env->getMethodID(cls, "checkIntegrity", "()V");
              mids$[mid_clone_ba629b83d3686969] = env->getMethodID(cls, "clone", "()Lorg/apache/lucene/codecs/StoredFieldsReader;");
              mids$[mid_close_f2cc1bce94666404] = env->getMethodID(cls, "close", "()V");
              mids$[mid_ramBytesUsed_2e5ae9edcb9b072f] = env->getMethodID(cls, "ramBytesUsed", "()J");
              mids$[mid_toString_db9b55ba01e03e4b] = env->getMethodID(cls, "toString", "()Ljava/lang/String;");
              mids$[mid_visitDocument_8f45e7464506ed2f] = env->getMethodID(cls, "visitDocument", "(ILorg/apache/lucene/index/StoredFieldVisitor;)V");

              class$ = new ::java::lang::Class(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          SimpleTextStoredFieldsReader::SimpleTextStoredFieldsReader(const ::org::apache::lucene::store::Directory & a0, const ::org::apache::lucene::index::SegmentInfo & a1, const ::org::apache::lucene::index::FieldInfos & a2, const ::org::apache::lucene::store::IOContext & a3) : ::org::apache::lucene::codecs::StoredFieldsReader(env->newObject(initializeClass, &mids$, mid_init$_5ab8220dbafb2f4c, a0.this$, a1.this$, a2.this$, a3.this$)) {}

          void SimpleTextStoredFieldsReader::checkIntegrity() const
          {
            env->callVoidMethod(this$, mids$[mid_checkIntegrity_f2cc1bce94666404]);
          }

          ::org::apache::lucene::codecs::StoredFieldsReader SimpleTextStoredFieldsReader::clone() const
          {
            return ::org::apache::lucene::codecs::StoredFieldsReader(env->callObjectMethod(this$, mids$[mid_clone_ba629b83d3686969]));
          }

          void SimpleTextStoredFieldsReader::close() const
          {
            env->callVoidMethod(this$, mids$[mid_close_f2cc1bce94666404]);
          }

          jlong SimpleTextStoredFieldsReader::ramBytesUsed() const
          {
            return env->callLongMethod(this$, mids$[mid_ramBytesUsed_2e5ae9edcb9b072f]);
          }

          ::java::lang::String SimpleTextStoredFieldsReader::toString() const
          {
            return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_db9b55ba01e03e4b]));
          }

          void SimpleTextStoredFieldsReader::visitDocument(jint a0, const ::org::apache::lucene::index::StoredFieldVisitor & a1) const
          {
            env->callVoidMethod(this$, mids$[mid_visitDocument_8f45e7464506ed2f], a0, a1.this$);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace codecs {
        namespace simpletext {
          static PyObject *t_SimpleTextStoredFieldsReader_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_SimpleTextStoredFieldsReader_instance_(PyTypeObject *type, PyObject *arg);
          static int t_SimpleTextStoredFieldsReader_init_(t_SimpleTextStoredFieldsReader *self, PyObject *args, PyObject *kwds);
          static PyObject *t_SimpleTextStoredFieldsReader_checkIntegrity(t_SimpleTextStoredFieldsReader *self, PyObject *args);
          static PyObject *t_SimpleTextStoredFieldsReader_clone(t_SimpleTextStoredFieldsReader *self, PyObject *args);
          static PyObject *t_SimpleTextStoredFieldsReader_close(t_SimpleTextStoredFieldsReader *self, PyObject *args);
          static PyObject *t_SimpleTextStoredFieldsReader_ramBytesUsed(t_SimpleTextStoredFieldsReader *self, PyObject *args);
          static PyObject *t_SimpleTextStoredFieldsReader_toString(t_SimpleTextStoredFieldsReader *self, PyObject *args);
          static PyObject *t_SimpleTextStoredFieldsReader_visitDocument(t_SimpleTextStoredFieldsReader *self, PyObject *args);

          static PyMethodDef t_SimpleTextStoredFieldsReader__methods_[] = {
            DECLARE_METHOD(t_SimpleTextStoredFieldsReader, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_SimpleTextStoredFieldsReader, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_SimpleTextStoredFieldsReader, checkIntegrity, METH_VARARGS),
            DECLARE_METHOD(t_SimpleTextStoredFieldsReader, clone, METH_VARARGS),
            DECLARE_METHOD(t_SimpleTextStoredFieldsReader, close, METH_VARARGS),
            DECLARE_METHOD(t_SimpleTextStoredFieldsReader, ramBytesUsed, METH_VARARGS),
            DECLARE_METHOD(t_SimpleTextStoredFieldsReader, toString, METH_VARARGS),
            DECLARE_METHOD(t_SimpleTextStoredFieldsReader, visitDocument, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          static PyType_Slot PY_TYPE_SLOTS(SimpleTextStoredFieldsReader)[] = {
            { Py_tp_methods, t_SimpleTextStoredFieldsReader__methods_ },
            { Py_tp_init, (void *) t_SimpleTextStoredFieldsReader_init_ },
            { 0, NULL }
          };

          static PyType_Def *PY_TYPE_BASES(SimpleTextStoredFieldsReader)[] = {
            &PY_TYPE_DEF(::org::apache::lucene::codecs::StoredFieldsReader),
            NULL
          };

          DEFINE_TYPE(SimpleTextStoredFieldsReader, t_SimpleTextStoredFieldsReader, SimpleTextStoredFieldsReader);

          void t_SimpleTextStoredFieldsReader::install(PyObject *module)
          {
            installType(&PY_TYPE(SimpleTextStoredFieldsReader), &PY_TYPE_DEF(SimpleTextStoredFieldsReader), module, "SimpleTextStoredFieldsReader", 0);
          }

          void t_SimpleTextStoredFieldsReader::initialize(PyObject *module)
          {
            PyObject_SetAttrString((PyObject *) PY_TYPE(SimpleTextStoredFieldsReader), "class_", make_descriptor(SimpleTextStoredFieldsReader::initializeClass, 1));
            PyObject_SetAttrString((PyObject *) PY_TYPE(SimpleTextStoredFieldsReader), "wrapfn_", make_descriptor(t_SimpleTextStoredFieldsReader::wrap_jobject));
            PyObject_SetAttrString((PyObject *) PY_TYPE(SimpleTextStoredFieldsReader), "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_SimpleTextStoredFieldsReader_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, SimpleTextStoredFieldsReader::initializeClass, 1)))
              return NULL;
            return t_SimpleTextStoredFieldsReader::wrap_Object(SimpleTextStoredFieldsReader(((t_SimpleTextStoredFieldsReader *) arg)->object.this$));
          }
          static PyObject *t_SimpleTextStoredFieldsReader_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, SimpleTextStoredFieldsReader::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_SimpleTextStoredFieldsReader_init_(t_SimpleTextStoredFieldsReader *self, PyObject *args, PyObject *kwds)
          {
            ::org::apache::lucene::store::Directory a0((jobject) NULL);
            ::org::apache::lucene::index::SegmentInfo a1((jobject) NULL);
            ::org::apache::lucene::index::FieldInfos a2((jobject) NULL);
            ::org::apache::lucene::store::IOContext a3((jobject) NULL);
            SimpleTextStoredFieldsReader object((jobject) NULL);

            if (!parseArgs(args, "kkkk", ::org::apache::lucene::store::Directory::initializeClass, ::org::apache::lucene::index::SegmentInfo::initializeClass, ::org::apache::lucene::index::FieldInfos::initializeClass, ::org::apache::lucene::store::IOContext::initializeClass, &a0, &a1, &a2, &a3))
            {
              INT_CALL(object = SimpleTextStoredFieldsReader(a0, a1, a2, a3));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_SimpleTextStoredFieldsReader_checkIntegrity(t_SimpleTextStoredFieldsReader *self, PyObject *args)
          {

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(self->object.checkIntegrity());
              Py_RETURN_NONE;
            }

            return callSuper(PY_TYPE(SimpleTextStoredFieldsReader), (PyObject *) self, "checkIntegrity", args, 2);
          }

          static PyObject *t_SimpleTextStoredFieldsReader_clone(t_SimpleTextStoredFieldsReader *self, PyObject *args)
          {
            ::org::apache::lucene::codecs::StoredFieldsReader result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.clone());
              return ::org::apache::lucene::codecs::t_StoredFieldsReader::wrap_Object(result);
            }

            return callSuper(PY_TYPE(SimpleTextStoredFieldsReader), (PyObject *) self, "clone", args, 2);
          }

          static PyObject *t_SimpleTextStoredFieldsReader_close(t_SimpleTextStoredFieldsReader *self, PyObject *args)
          {

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(self->object.close());
              Py_RETURN_NONE;
            }

            return callSuper(PY_TYPE(SimpleTextStoredFieldsReader), (PyObject *) self, "close", args, 2);
          }

          static PyObject *t_SimpleTextStoredFieldsReader_ramBytesUsed(t_SimpleTextStoredFieldsReader *self, PyObject *args)
          {
            jlong result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.ramBytesUsed());
              return PyLong_FromLongLong((PY_LONG_LONG) result);
            }

            return callSuper(PY_TYPE(SimpleTextStoredFieldsReader), (PyObject *) self, "ramBytesUsed", args, 2);
          }

          static PyObject *t_SimpleTextStoredFieldsReader_toString(t_SimpleTextStoredFieldsReader *self, PyObject *args)
          {
            ::java::lang::String result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.toString());
              return j2p(result);
            }

            return callSuper(PY_TYPE(SimpleTextStoredFieldsReader), (PyObject *) self, "toString", args, 2);
          }

          static PyObject *t_SimpleTextStoredFieldsReader_visitDocument(t_SimpleTextStoredFieldsReader *self, PyObject *args)
          {
            jint a0;
            ::org::apache::lucene::index::StoredFieldVisitor a1((jobject) NULL);

            if (!parseArgs(args, "Ik", ::org::apache::lucene::index::StoredFieldVisitor::initializeClass, &a0, &a1))
            {
              OBJ_CALL(self->object.visitDocument(a0, a1));
              Py_RETURN_NONE;
            }

            return callSuper(PY_TYPE(SimpleTextStoredFieldsReader), (PyObject *) self, "visitDocument", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/core/UpperCaseFilterFactory.h"
#include "java/util/Map.h"
#include "java/lang/String.h"
#include "org/apache/lucene/analysis/TokenStream.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace core {

          ::java::lang::Class *UpperCaseFilterFactory::class$ = NULL;
          jmethodID *UpperCaseFilterFactory::mids$ = NULL;
          bool UpperCaseFilterFactory::live$ = false;
          ::java::lang::String *UpperCaseFilterFactory::NAME = NULL;

          jclass UpperCaseFilterFactory::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/core/UpperCaseFilterFactory");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_408bd889ee3beae5] = env->getMethodID(cls, "<init>", "(Ljava/util/Map;)V");
              mids$[mid_create_6de1e28d9d10cd9e] = env->getMethodID(cls, "create", "(Lorg/apache/lucene/analysis/TokenStream;)Lorg/apache/lucene/analysis/TokenStream;");
              mids$[mid_normalize_6de1e28d9d10cd9e] = env->getMethodID(cls, "normalize", "(Lorg/apache/lucene/analysis/TokenStream;)Lorg/apache/lucene/analysis/TokenStream;");

              class$ = new ::java::lang::Class(cls);
              cls = (jclass) class$->this$;

              NAME = new ::java::lang::String(env->getStaticObjectField(cls, "NAME", "Ljava/lang/String;"));
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          UpperCaseFilterFactory::UpperCaseFilterFactory(const ::java::util::Map & a0) : ::org::apache::lucene::analysis::util::TokenFilterFactory(env->newObject(initializeClass, &mids$, mid_init$_408bd889ee3beae5, a0.this$)) {}

          ::org::apache::lucene::analysis::TokenStream UpperCaseFilterFactory::create(const ::org::apache::lucene::analysis::TokenStream & a0) const
          {
            return ::org::apache::lucene::analysis::TokenStream(env->callObjectMethod(this$, mids$[mid_create_6de1e28d9d10cd9e], a0.this$));
          }

          ::org::apache::lucene::analysis::TokenStream UpperCaseFilterFactory::normalize(const ::org::apache::lucene::analysis::TokenStream & a0) const
          {
            return ::org::apache::lucene::analysis::TokenStream(env->callObjectMethod(this$, mids$[mid_normalize_6de1e28d9d10cd9e], a0.this$));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace core {
          static PyObject *t_UpperCaseFilterFactory_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_UpperCaseFilterFactory_instance_(PyTypeObject *type, PyObject *arg);
          static int t_UpperCaseFilterFactory_init_(t_UpperCaseFilterFactory *self, PyObject *args, PyObject *kwds);
          static PyObject *t_UpperCaseFilterFactory_create(t_UpperCaseFilterFactory *self, PyObject *args);
          static PyObject *t_UpperCaseFilterFactory_normalize(t_UpperCaseFilterFactory *self, PyObject *args);

          static PyMethodDef t_UpperCaseFilterFactory__methods_[] = {
            DECLARE_METHOD(t_UpperCaseFilterFactory, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_UpperCaseFilterFactory, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_UpperCaseFilterFactory, create, METH_VARARGS),
            DECLARE_METHOD(t_UpperCaseFilterFactory, normalize, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          static PyType_Slot PY_TYPE_SLOTS(UpperCaseFilterFactory)[] = {
            { Py_tp_methods, t_UpperCaseFilterFactory__methods_ },
            { Py_tp_init, (void *) t_UpperCaseFilterFactory_init_ },
            { 0, NULL }
          };

          static PyType_Def *PY_TYPE_BASES(UpperCaseFilterFactory)[] = {
            &PY_TYPE_DEF(::org::apache::lucene::analysis::util::TokenFilterFactory),
            NULL
          };

          DEFINE_TYPE(UpperCaseFilterFactory, t_UpperCaseFilterFactory, UpperCaseFilterFactory);

          void t_UpperCaseFilterFactory::install(PyObject *module)
          {
            installType(&PY_TYPE(UpperCaseFilterFactory), &PY_TYPE_DEF(UpperCaseFilterFactory), module, "UpperCaseFilterFactory", 0);
          }

          void t_UpperCaseFilterFactory::initialize(PyObject *module)
          {
            PyObject_SetAttrString((PyObject *) PY_TYPE(UpperCaseFilterFactory), "class_", make_descriptor(UpperCaseFilterFactory::initializeClass, 1));
            PyObject_SetAttrString((PyObject *) PY_TYPE(UpperCaseFilterFactory), "wrapfn_", make_descriptor(t_UpperCaseFilterFactory::wrap_jobject));
            PyObject_SetAttrString((PyObject *) PY_TYPE(UpperCaseFilterFactory), "boxfn_", make_descriptor(boxObject));
            env->getClass(UpperCaseFilterFactory::initializeClass);
            PyObject_SetAttrString((PyObject *) PY_TYPE(UpperCaseFilterFactory), "NAME", make_descriptor(j2p(*UpperCaseFilterFactory::NAME)));
          }

          static PyObject *t_UpperCaseFilterFactory_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, UpperCaseFilterFactory::initializeClass, 1)))
              return NULL;
            return t_UpperCaseFilterFactory::wrap_Object(UpperCaseFilterFactory(((t_UpperCaseFilterFactory *) arg)->object.this$));
          }
          static PyObject *t_UpperCaseFilterFactory_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, UpperCaseFilterFactory::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_UpperCaseFilterFactory_init_(t_UpperCaseFilterFactory *self, PyObject *args, PyObject *kwds)
          {
            ::java::util::Map a0((jobject) NULL);
            PyTypeObject **p0;
            UpperCaseFilterFactory object((jobject) NULL);

            if (!parseArgs(args, "K", ::java::util::Map::initializeClass, &a0, &p0, ::java::util::t_Map::parameters_))
            {
              INT_CALL(object = UpperCaseFilterFactory(a0));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_UpperCaseFilterFactory_create(t_UpperCaseFilterFactory *self, PyObject *args)
          {
            ::org::apache::lucene::analysis::TokenStream a0((jobject) NULL);
            ::org::apache::lucene::analysis::TokenStream result((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::analysis::TokenStream::initializeClass, &a0))
            {
              OBJ_CALL(result = self->object.create(a0));
              return ::org::apache::lucene::analysis::t_TokenStream::wrap_Object(result);
            }

            return callSuper(PY_TYPE(UpperCaseFilterFactory), (PyObject *) self, "create", args, 2);
          }

          static PyObject *t_UpperCaseFilterFactory_normalize(t_UpperCaseFilterFactory *self, PyObject *args)
          {
            ::org::apache::lucene::analysis::TokenStream a0((jobject) NULL);
            ::org::apache::lucene::analysis::TokenStream result((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::analysis::TokenStream::initializeClass, &a0))
            {
              OBJ_CALL(result = self->object.normalize(a0));
              return ::org::apache::lucene::analysis::t_TokenStream::wrap_Object(result);
            }

            return callSuper(PY_TYPE(UpperCaseFilterFactory), (PyObject *) self, "normalize", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/util/ByteBlockPool$DirectAllocator.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {

        ::java::lang::Class *ByteBlockPool$DirectAllocator::class$ = NULL;
        jmethodID *ByteBlockPool$DirectAllocator::mids$ = NULL;
        bool ByteBlockPool$DirectAllocator::live$ = false;

        jclass ByteBlockPool$DirectAllocator::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/util/ByteBlockPool$DirectAllocator");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_f2cc1bce94666404] = env->getMethodID(cls, "<init>", "()V");
            mids$[mid_init$_040c4cd0390c5aff] = env->getMethodID(cls, "<init>", "(I)V");
            mids$[mid_recycleByteBlocks_06d20f962341558f] = env->getMethodID(cls, "recycleByteBlocks", "([[BII)V");

            class$ = new ::java::lang::Class(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        ByteBlockPool$DirectAllocator::ByteBlockPool$DirectAllocator() : ::org::apache::lucene::util::ByteBlockPool$Allocator(env->newObject(initializeClass, &mids$, mid_init$_f2cc1bce94666404)) {}

        ByteBlockPool$DirectAllocator::ByteBlockPool$DirectAllocator(jint a0) : ::org::apache::lucene::util::ByteBlockPool$Allocator(env->newObject(initializeClass, &mids$, mid_init$_040c4cd0390c5aff, a0)) {}

        void ByteBlockPool$DirectAllocator::recycleByteBlocks(const JArray< JArray< jbyte > > & a0, jint a1, jint a2) const
        {
          env->callVoidMethod(this$, mids$[mid_recycleByteBlocks_06d20f962341558f], a0.this$, a1, a2);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        static PyObject *t_ByteBlockPool$DirectAllocator_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_ByteBlockPool$DirectAllocator_instance_(PyTypeObject *type, PyObject *arg);
        static int t_ByteBlockPool$DirectAllocator_init_(t_ByteBlockPool$DirectAllocator *self, PyObject *args, PyObject *kwds);
        static PyObject *t_ByteBlockPool$DirectAllocator_recycleByteBlocks(t_ByteBlockPool$DirectAllocator *self, PyObject *args);

        static PyMethodDef t_ByteBlockPool$DirectAllocator__methods_[] = {
          DECLARE_METHOD(t_ByteBlockPool$DirectAllocator, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_ByteBlockPool$DirectAllocator, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_ByteBlockPool$DirectAllocator, recycleByteBlocks, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        static PyType_Slot PY_TYPE_SLOTS(ByteBlockPool$DirectAllocator)[] = {
          { Py_tp_methods, t_ByteBlockPool$DirectAllocator__methods_ },
          { Py_tp_init, (void *) t_ByteBlockPool$DirectAllocator_init_ },
          { 0, NULL }
        };

        static PyType_Def *PY_TYPE_BASES(ByteBlockPool$DirectAllocator)[] = {
          &PY_TYPE_DEF(::org::apache::lucene::util::ByteBlockPool$Allocator),
          NULL
        };

        DEFINE_TYPE(ByteBlockPool$DirectAllocator, t_ByteBlockPool$DirectAllocator, ByteBlockPool$DirectAllocator);

        void t_ByteBlockPool$DirectAllocator::install(PyObject *module)
        {
          installType(&PY_TYPE(ByteBlockPool$DirectAllocator), &PY_TYPE_DEF(ByteBlockPool$DirectAllocator), module, "ByteBlockPool$DirectAllocator", 0);
        }

        void t_ByteBlockPool$DirectAllocator::initialize(PyObject *module)
        {
          PyObject_SetAttrString((PyObject *) PY_TYPE(ByteBlockPool$DirectAllocator), "class_", make_descriptor(ByteBlockPool$DirectAllocator::initializeClass, 1));
          PyObject_SetAttrString((PyObject *) PY_TYPE(ByteBlockPool$DirectAllocator), "wrapfn_", make_descriptor(t_ByteBlockPool$DirectAllocator::wrap_jobject));
          PyObject_SetAttrString((PyObject *) PY_TYPE(ByteBlockPool$DirectAllocator), "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_ByteBlockPool$DirectAllocator_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, ByteBlockPool$DirectAllocator::initializeClass, 1)))
            return NULL;
          return t_ByteBlockPool$DirectAllocator::wrap_Object(ByteBlockPool$DirectAllocator(((t_ByteBlockPool$DirectAllocator *) arg)->object.this$));
        }
        static PyObject *t_ByteBlockPool$DirectAllocator_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, ByteBlockPool$DirectAllocator::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_ByteBlockPool$DirectAllocator_init_(t_ByteBlockPool$DirectAllocator *self, PyObject *args, PyObject *kwds)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 0:
            {
              ByteBlockPool$DirectAllocator object((jobject) NULL);

              INT_CALL(object = ByteBlockPool$DirectAllocator());
              self->object = object;
              break;
            }
           case 1:
            {
              jint a0;
              ByteBlockPool$DirectAllocator object((jobject) NULL);

              if (!parseArgs(args, "I", &a0))
              {
                INT_CALL(object = ByteBlockPool$DirectAllocator(a0));
                self->object = object;
                break;
              }
            }
           default:
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }

        static PyObject *t_ByteBlockPool$DirectAllocator_recycleByteBlocks(t_ByteBlockPool$DirectAllocator *self, PyObject *args)
        {
          JArray< JArray< jbyte > > a0((jobject) NULL);
          jint a1;
          jint a2;

          if (!parseArgs(args, "[[BII", &a0, &a1, &a2))
          {
            OBJ_CALL(self->object.recycleByteBlocks(a0, a1, a2));
            Py_RETURN_NONE;
          }

          return callSuper(PY_TYPE(ByteBlockPool$DirectAllocator), (PyObject *) self, "recycleByteBlocks", args, 2);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/suggest/tst/TernaryTreeNode.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace suggest {
          namespace tst {

            ::java::lang::Class *TernaryTreeNode::class$ = NULL;
            jmethodID *TernaryTreeNode::mids$ = NULL;
            bool TernaryTreeNode::live$ = false;

            jclass TernaryTreeNode::initializeClass(bool getOnly)
            {
              if (getOnly)
                return (jclass) (live$ ? class$->this$ : NULL);
              if (class$ == NULL)
              {
                jclass cls = (jclass) env->findClass("org/apache/lucene/search/suggest/tst/TernaryTreeNode");

                mids$ = new jmethodID[max_mid];
                mids$[mid_init$_f2cc1bce94666404] = env->getMethodID(cls, "<init>", "()V");

                class$ = new ::java::lang::Class(cls);
                live$ = true;
              }
              return (jclass) class$->this$;
            }

            TernaryTreeNode::TernaryTreeNode() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_f2cc1bce94666404)) {}
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace suggest {
          namespace tst {
            static PyObject *t_TernaryTreeNode_cast_(PyTypeObject *type, PyObject *arg);
            static PyObject *t_TernaryTreeNode_instance_(PyTypeObject *type, PyObject *arg);
            static int t_TernaryTreeNode_init_(t_TernaryTreeNode *self, PyObject *args, PyObject *kwds);

            static PyMethodDef t_TernaryTreeNode__methods_[] = {
              DECLARE_METHOD(t_TernaryTreeNode, cast_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_TernaryTreeNode, instance_, METH_O | METH_CLASS),
              { NULL, NULL, 0, NULL }
            };

            static PyType_Slot PY_TYPE_SLOTS(TernaryTreeNode)[] = {
              { Py_tp_methods, t_TernaryTreeNode__methods_ },
              { Py_tp_init, (void *) t_TernaryTreeNode_init_ },
              { 0, NULL }
            };

            static PyType_Def *PY_TYPE_BASES(TernaryTreeNode)[] = {
              &PY_TYPE_DEF(::java::lang::Object),
              NULL
            };

            DEFINE_TYPE(TernaryTreeNode, t_TernaryTreeNode, TernaryTreeNode);

            void t_TernaryTreeNode::install(PyObject *module)
            {
              installType(&PY_TYPE(TernaryTreeNode), &PY_TYPE_DEF(TernaryTreeNode), module, "TernaryTreeNode", 0);
            }

            void t_TernaryTreeNode::initialize(PyObject *module)
            {
              PyObject_SetAttrString((PyObject *) PY_TYPE(TernaryTreeNode), "class_", make_descriptor(TernaryTreeNode::initializeClass, 1));
              PyObject_SetAttrString((PyObject *) PY_TYPE(TernaryTreeNode), "wrapfn_", make_descriptor(t_TernaryTreeNode::wrap_jobject));
              PyObject_SetAttrString((PyObject *) PY_TYPE(TernaryTreeNode), "boxfn_", make_descriptor(boxObject));
            }

            static PyObject *t_TernaryTreeNode_cast_(PyTypeObject *type, PyObject *arg)
            {
              if (!(arg = castCheck(arg, TernaryTreeNode::initializeClass, 1)))
                return NULL;
              return t_TernaryTreeNode::wrap_Object(TernaryTreeNode(((t_TernaryTreeNode *) arg)->object.this$));
            }
            static PyObject *t_TernaryTreeNode_instance_(PyTypeObject *type, PyObject *arg)
            {
              if (!castCheck(arg, TernaryTreeNode::initializeClass, 0))
                Py_RETURN_FALSE;
              Py_RETURN_TRUE;
            }

            static int t_TernaryTreeNode_init_(t_TernaryTreeNode *self, PyObject *args, PyObject *kwds)
            {
              TernaryTreeNode object((jobject) NULL);

              INT_CALL(object = TernaryTreeNode());
              self->object = object;

              return 0;
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/NormsFieldExistsQuery.h"
#include "org/apache/lucene/search/IndexSearcher.h"
#include "java/lang/Class.h"
#include "java/lang/Object.h"
#include "java/lang/String.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/search/QueryVisitor.h"
#include "org/apache/lucene/search/ScoreMode.h"
#include "org/apache/lucene/search/Weight.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {

        ::java::lang::Class *NormsFieldExistsQuery::class$ = NULL;
        jmethodID *NormsFieldExistsQuery::mids$ = NULL;
        bool NormsFieldExistsQuery::live$ = false;

        jclass NormsFieldExistsQuery::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/search/NormsFieldExistsQuery");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_9fd2eb66a64e6f0f] = env->getMethodID(cls, "<init>", "(Ljava/lang/String;)V");
            mids$[mid_createWeight_f0ef0b5ea369ac06] = env->getMethodID(cls, "createWeight", "(Lorg/apache/lucene/search/IndexSearcher;Lorg/apache/lucene/search/ScoreMode;F)Lorg/apache/lucene/search/Weight;");
            mids$[mid_equals_8b72f2dcdde6fd1d] = env->getMethodID(cls, "equals", "(Ljava/lang/Object;)Z");
            mids$[mid_getField_db9b55ba01e03e4b] = env->getMethodID(cls, "getField", "()Ljava/lang/String;");
            mids$[mid_hashCode_9972fcc56b44e79d] = env->getMethodID(cls, "hashCode", "()I");
            mids$[mid_toString_9bfa75c9f141b67f] = env->getMethodID(cls, "toString", "(Ljava/lang/String;)Ljava/lang/String;");
            mids$[mid_visit_f9e6207006c5b6c1] = env->getMethodID(cls, "visit", "(Lorg/apache/lucene/search/QueryVisitor;)V");

            class$ = new ::java::lang::Class(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        NormsFieldExistsQuery::NormsFieldExistsQuery(const ::java::lang::String & a0) : ::org::apache::lucene::search::Query(env->newObject(initializeClass, &mids$, mid_init$_9fd2eb66a64e6f0f, a0.this$)) {}

        ::org::apache::lucene::search::Weight NormsFieldExistsQuery::createWeight(const ::org::apache::lucene::search::IndexSearcher & a0, const ::org::apache::lucene::search::ScoreMode & a1, jfloat a2) const
        {
          return ::org::apache::lucene::search::Weight(env->callObjectMethod(this$, mids$[mid_createWeight_f0ef0b5ea369ac06], a0.this$, a1.this$, a2));
        }

        jboolean NormsFieldExistsQuery::equals(const ::java::lang::Object & a0) const
        {
          return env->callBooleanMethod(this$, mids$[mid_equals_8b72f2dcdde6fd1d], a0.this$);
        }

        ::java::lang::String NormsFieldExistsQuery::getField() const
        {
          return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_getField_db9b55ba01e03e4b]));
        }

        jint NormsFieldExistsQuery::hashCode() const
        {
          return env->callIntMethod(this$, mids$[mid_hashCode_9972fcc56b44e79d]);
        }

        ::java::lang::String NormsFieldExistsQuery::toString(const ::java::lang::String & a0) const
        {
          return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_9bfa75c9f141b67f], a0.this$));
        }

        void NormsFieldExistsQuery::visit(const ::org::apache::lucene::search::QueryVisitor & a0) const
        {
          env->callVoidMethod(this$, mids$[mid_visit_f9e6207006c5b6c1], a0.this$);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        static PyObject *t_NormsFieldExistsQuery_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_NormsFieldExistsQuery_instance_(PyTypeObject *type, PyObject *arg);
        static int t_NormsFieldExistsQuery_init_(t_NormsFieldExistsQuery *self, PyObject *args, PyObject *kwds);
        static PyObject *t_NormsFieldExistsQuery_createWeight(t_NormsFieldExistsQuery *self, PyObject *args);
        static PyObject *t_NormsFieldExistsQuery_equals(t_NormsFieldExistsQuery *self, PyObject *args);
        static PyObject *t_NormsFieldExistsQuery_getField(t_NormsFieldExistsQuery *self);
        static PyObject *t_NormsFieldExistsQuery_hashCode(t_NormsFieldExistsQuery *self, PyObject *args);
        static PyObject *t_NormsFieldExistsQuery_toString(t_NormsFieldExistsQuery *self, PyObject *args);
        static PyObject *t_NormsFieldExistsQuery_visit(t_NormsFieldExistsQuery *self, PyObject *args);
        static PyObject *t_NormsFieldExistsQuery_get__field(t_NormsFieldExistsQuery *self, void *data);
        static PyGetSetDef t_NormsFieldExistsQuery__fields_[] = {
          DECLARE_GET_FIELD(t_NormsFieldExistsQuery, field),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_NormsFieldExistsQuery__methods_[] = {
          DECLARE_METHOD(t_NormsFieldExistsQuery, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_NormsFieldExistsQuery, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_NormsFieldExistsQuery, createWeight, METH_VARARGS),
          DECLARE_METHOD(t_NormsFieldExistsQuery, equals, METH_VARARGS),
          DECLARE_METHOD(t_NormsFieldExistsQuery, getField, METH_NOARGS),
          DECLARE_METHOD(t_NormsFieldExistsQuery, hashCode, METH_VARARGS),
          DECLARE_METHOD(t_NormsFieldExistsQuery, toString, METH_VARARGS),
          DECLARE_METHOD(t_NormsFieldExistsQuery, visit, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        static PyType_Slot PY_TYPE_SLOTS(NormsFieldExistsQuery)[] = {
          { Py_tp_methods, t_NormsFieldExistsQuery__methods_ },
          { Py_tp_init, (void *) t_NormsFieldExistsQuery_init_ },
          { Py_tp_getset, t_NormsFieldExistsQuery__fields_ },
          { 0, NULL }
        };

        static PyType_Def *PY_TYPE_BASES(NormsFieldExistsQuery)[] = {
          &PY_TYPE_DEF(::org::apache::lucene::search::Query),
          NULL
        };

        DEFINE_TYPE(NormsFieldExistsQuery, t_NormsFieldExistsQuery, NormsFieldExistsQuery);

        void t_NormsFieldExistsQuery::install(PyObject *module)
        {
          installType(&PY_TYPE(NormsFieldExistsQuery), &PY_TYPE_DEF(NormsFieldExistsQuery), module, "NormsFieldExistsQuery", 0);
        }

        void t_NormsFieldExistsQuery::initialize(PyObject *module)
        {
          PyObject_SetAttrString((PyObject *) PY_TYPE(NormsFieldExistsQuery), "class_", make_descriptor(NormsFieldExistsQuery::initializeClass, 1));
          PyObject_SetAttrString((PyObject *) PY_TYPE(NormsFieldExistsQuery), "wrapfn_", make_descriptor(t_NormsFieldExistsQuery::wrap_jobject));
          PyObject_SetAttrString((PyObject *) PY_TYPE(NormsFieldExistsQuery), "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_NormsFieldExistsQuery_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, NormsFieldExistsQuery::initializeClass, 1)))
            return NULL;
          return t_NormsFieldExistsQuery::wrap_Object(NormsFieldExistsQuery(((t_NormsFieldExistsQuery *) arg)->object.this$));
        }
        static PyObject *t_NormsFieldExistsQuery_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, NormsFieldExistsQuery::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_NormsFieldExistsQuery_init_(t_NormsFieldExistsQuery *self, PyObject *args, PyObject *kwds)
        {
          ::java::lang::String a0((jobject) NULL);
          NormsFieldExistsQuery object((jobject) NULL);

          if (!parseArgs(args, "s", &a0))
          {
            INT_CALL(object = NormsFieldExistsQuery(a0));
            self->object = object;
          }
          else
          {
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }

        static PyObject *t_NormsFieldExistsQuery_createWeight(t_NormsFieldExistsQuery *self, PyObject *args)
        {
          ::org::apache::lucene::search::IndexSearcher a0((jobject) NULL);
          ::org::apache::lucene::search::ScoreMode a1((jobject) NULL);
          PyTypeObject **p1;
          jfloat a2;
          ::org::apache::lucene::search::Weight result((jobject) NULL);

          if (!parseArgs(args, "kKF", ::org::apache::lucene::search::IndexSearcher::initializeClass, ::org::apache::lucene::search::ScoreMode::initializeClass, &a0, &a1, &p1, ::org::apache::lucene::search::t_ScoreMode::parameters_, &a2))
          {
            OBJ_CALL(result = self->object.createWeight(a0, a1, a2));
            return ::org::apache::lucene::search::t_Weight::wrap_Object(result);
          }

          return callSuper(PY_TYPE(NormsFieldExistsQuery), (PyObject *) self, "createWeight", args, 2);
        }

        static PyObject *t_NormsFieldExistsQuery_equals(t_NormsFieldExistsQuery *self, PyObject *args)
        {
          ::java::lang::Object a0((jobject) NULL);
          jboolean result;

          if (!parseArgs(args, "o", &a0))
          {
            OBJ_CALL(result = self->object.equals(a0));
            Py_RETURN_BOOL(result);
          }

          return callSuper(PY_TYPE(NormsFieldExistsQuery), (PyObject *) self, "equals", args, 2);
        }

        static PyObject *t_NormsFieldExistsQuery_getField(t_NormsFieldExistsQuery *self)
        {
          ::java::lang::String result((jobject) NULL);
          OBJ_CALL(result = self->object.getField());
          return j2p(result);
        }

        static PyObject *t_NormsFieldExistsQuery_hashCode(t_NormsFieldExistsQuery *self, PyObject *args)
        {
          jint result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.hashCode());
            return PyLong_FromLong((long) result);
          }

          return callSuper(PY_TYPE(NormsFieldExistsQuery), (PyObject *) self, "hashCode", args, 2);
        }

        static PyObject *t_NormsFieldExistsQuery_toString(t_NormsFieldExistsQuery *self, PyObject *args)
        {
          ::java::lang::String a0((jobject) NULL);
          ::java::lang::String result((jobject) NULL);

          if (!parseArgs(args, "s", &a0))
          {
            OBJ_CALL(result = self->object.toString(a0));
            return j2p(result);
          }

          return callSuper(PY_TYPE(NormsFieldExistsQuery), (PyObject *) self, "toString", args, 2);
        }

        static PyObject *t_NormsFieldExistsQuery_visit(t_NormsFieldExistsQuery *self, PyObject *args)
        {
          ::org::apache::lucene::search::QueryVisitor a0((jobject) NULL);

          if (!parseArgs(args, "k", ::org::apache::lucene::search::QueryVisitor::initializeClass, &a0))
          {
            OBJ_CALL(self->object.visit(a0));
            Py_RETURN_NONE;
          }

          return callSuper(PY_TYPE(NormsFieldExistsQuery), (PyObject *) self, "visit", args, 2);
        }

        static PyObject *t_NormsFieldExistsQuery_get__field(t_NormsFieldExistsQuery *self, void *data)
        {
          ::java::lang::String value((jobject) NULL);
          OBJ_CALL(value = self->object.getField());
          return j2p(value);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/suggest/fst/FSTCompletion$Completion.h"
#include "java/lang/Comparable.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/util/BytesRef.h"
#include "java/lang/String.h"
#include "org/apache/lucene/search/suggest/fst/FSTCompletion$Completion.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace suggest {
          namespace fst {

            ::java::lang::Class *FSTCompletion$Completion::class$ = NULL;
            jmethodID *FSTCompletion$Completion::mids$ = NULL;
            jfieldID *FSTCompletion$Completion::fids$ = NULL;
            bool FSTCompletion$Completion::live$ = false;

            jclass FSTCompletion$Completion::initializeClass(bool getOnly)
            {
              if (getOnly)
                return (jclass) (live$ ? class$->this$ : NULL);
              if (class$ == NULL)
              {
                jclass cls = (jclass) env->findClass("org/apache/lucene/search/suggest/fst/FSTCompletion$Completion");

                mids$ = new jmethodID[max_mid];
                mids$[mid_compareTo_056f0c154fffadfa] = env->getMethodID(cls, "compareTo", "(Lorg/apache/lucene/search/suggest/fst/FSTCompletion$Completion;)I");
                mids$[mid_toString_db9b55ba01e03e4b] = env->getMethodID(cls, "toString", "()Ljava/lang/String;");

                fids$ = new jfieldID[max_fid];
                fids$[fid_bucket] = env->getFieldID(cls, "bucket", "I");
                fids$[fid_utf8] = env->getFieldID(cls, "utf8", "Lorg/apache/lucene/util/BytesRef;");

                class$ = new ::java::lang::Class(cls);
                live$ = true;
              }
              return (jclass) class$->this$;
            }

            jint FSTCompletion$Completion::compareTo(const FSTCompletion$Completion & a0) const
            {
              return env->callIntMethod(this$, mids$[mid_compareTo_056f0c154fffadfa], a0.this$);
            }

            ::java::lang::String FSTCompletion$Completion::toString() const
            {
              return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_db9b55ba01e03e4b]));
            }

            jint FSTCompletion$Completion::_get_bucket() const
            {
              return env->getIntField(this$, fids$[fid_bucket]);
            }

            ::org::apache::lucene::util::BytesRef FSTCompletion$Completion::_get_utf8() const
            {
              return ::org::apache::lucene::util::BytesRef(env->getObjectField(this$, fids$[fid_utf8]));
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace suggest {
          namespace fst {
            static PyObject *t_FSTCompletion$Completion_cast_(PyTypeObject *type, PyObject *arg);
            static PyObject *t_FSTCompletion$Completion_instance_(PyTypeObject *type, PyObject *arg);
            static PyObject *t_FSTCompletion$Completion_compareTo(t_FSTCompletion$Completion *self, PyObject *arg);
            static PyObject *t_FSTCompletion$Completion_toString(t_FSTCompletion$Completion *self, PyObject *args);
            static PyObject *t_FSTCompletion$Completion_get__bucket(t_FSTCompletion$Completion *self, void *data);
            static PyObject *t_FSTCompletion$Completion_get__utf8(t_FSTCompletion$Completion *self, void *data);

            static PyGetSetDef t_FSTCompletion$Completion__fields_[] = {
              DECLARE_GET_FIELD(t_FSTCompletion$Completion, bucket),
              DECLARE_GET_FIELD(t_FSTCompletion$Completion, utf8),
              { NULL, NULL, NULL, NULL, NULL }
            };

            static PyMethodDef t_FSTCompletion$Completion__methods_[] = {
              DECLARE_METHOD(t_FSTCompletion$Completion, cast_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_FSTCompletion$Completion, instance_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_FSTCompletion$Completion, compareTo, METH_O),
              DECLARE_METHOD(t_FSTCompletion$Completion, toString, METH_VARARGS),
              { NULL, NULL, 0, NULL }
            };

            static PyType_Slot PY_TYPE_SLOTS(FSTCompletion$Completion)[] = {
              { Py_tp_methods, t_FSTCompletion$Completion__methods_ },
              { Py_tp_init, (void *) abstract_init },
              { Py_tp_getset, t_FSTCompletion$Completion__fields_ },
              { 0, NULL }
            };

            static PyType_Def *PY_TYPE_BASES(FSTCompletion$Completion)[] = {
              &PY_TYPE_DEF(::java::lang::Object),
              NULL
            };

            DEFINE_TYPE(FSTCompletion$Completion, t_FSTCompletion$Completion, FSTCompletion$Completion);

            void t_FSTCompletion$Completion::install(PyObject *module)
            {
              installType(&PY_TYPE(FSTCompletion$Completion), &PY_TYPE_DEF(FSTCompletion$Completion), module, "FSTCompletion$Completion", 0);
            }

            void t_FSTCompletion$Completion::initialize(PyObject *module)
            {
              PyObject_SetAttrString((PyObject *) PY_TYPE(FSTCompletion$Completion), "class_", make_descriptor(FSTCompletion$Completion::initializeClass, 1));
              PyObject_SetAttrString((PyObject *) PY_TYPE(FSTCompletion$Completion), "wrapfn_", make_descriptor(t_FSTCompletion$Completion::wrap_jobject));
              PyObject_SetAttrString((PyObject *) PY_TYPE(FSTCompletion$Completion), "boxfn_", make_descriptor(boxObject));
            }

            static PyObject *t_FSTCompletion$Completion_cast_(PyTypeObject *type, PyObject *arg)
            {
              if (!(arg = castCheck(arg, FSTCompletion$Completion::initializeClass, 1)))
                return NULL;
              return t_FSTCompletion$Completion::wrap_Object(FSTCompletion$Completion(((t_FSTCompletion$Completion *) arg)->object.this$));
            }
            static PyObject *t_FSTCompletion$Completion_instance_(PyTypeObject *type, PyObject *arg)
            {
              if (!castCheck(arg, FSTCompletion$Completion::initializeClass, 0))
                Py_RETURN_FALSE;
              Py_RETURN_TRUE;
            }

            static PyObject *t_FSTCompletion$Completion_compareTo(t_FSTCompletion$Completion *self, PyObject *arg)
            {
              FSTCompletion$Completion a0((jobject) NULL);
              jint result;

              if (!parseArg(arg, "k", FSTCompletion$Completion::initializeClass, &a0))
              {
                OBJ_CALL(result = self->object.compareTo(a0));
                return PyLong_FromLong((long) result);
              }

              PyErr_SetArgsError((PyObject *) self, "compareTo", arg);
              return NULL;
            }

            static PyObject *t_FSTCompletion$Completion_toString(t_FSTCompletion$Completion *self, PyObject *args)
            {
              ::java::lang::String result((jobject) NULL);

              if (!parseArgs(args, ""))
              {
                OBJ_CALL(result = self->object.toString());
                return j2p(result);
              }

              return callSuper(PY_TYPE(FSTCompletion$Completion), (PyObject *) self, "toString", args, 2);
            }

            static PyObject *t_FSTCompletion$Completion_get__bucket(t_FSTCompletion$Completion *self, void *data)
            {
              jint value;
              OBJ_CALL(value = self->object._get_bucket());
              return PyLong_FromLong((long) value);
            }

            static PyObject *t_FSTCompletion$Completion_get__utf8(t_FSTCompletion$Completion *self, void *data)
            {
              ::org::apache::lucene::util::BytesRef value((jobject) NULL);
              OBJ_CALL(value = self->object._get_utf8());
              return ::org::apache::lucene::util::t_BytesRef::wrap_Object(value);
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/miscellaneous/ASCIIFoldingFilterFactory.h"
#include "java/util/Map.h"
#include "java/lang/String.h"
#include "org/apache/lucene/analysis/TokenStream.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace miscellaneous {

          ::java::lang::Class *ASCIIFoldingFilterFactory::class$ = NULL;
          jmethodID *ASCIIFoldingFilterFactory::mids$ = NULL;
          bool ASCIIFoldingFilterFactory::live$ = false;
          ::java::lang::String *ASCIIFoldingFilterFactory::NAME = NULL;

          jclass ASCIIFoldingFilterFactory::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/miscellaneous/ASCIIFoldingFilterFactory");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_408bd889ee3beae5] = env->getMethodID(cls, "<init>", "(Ljava/util/Map;)V");
              mids$[mid_create_6de1e28d9d10cd9e] = env->getMethodID(cls, "create", "(Lorg/apache/lucene/analysis/TokenStream;)Lorg/apache/lucene/analysis/TokenStream;");
              mids$[mid_normalize_6de1e28d9d10cd9e] = env->getMethodID(cls, "normalize", "(Lorg/apache/lucene/analysis/TokenStream;)Lorg/apache/lucene/analysis/TokenStream;");

              class$ = new ::java::lang::Class(cls);
              cls = (jclass) class$->this$;

              NAME = new ::java::lang::String(env->getStaticObjectField(cls, "NAME", "Ljava/lang/String;"));
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          ASCIIFoldingFilterFactory::ASCIIFoldingFilterFactory(const ::java::util::Map & a0) : ::org::apache::lucene::analysis::util::TokenFilterFactory(env->newObject(initializeClass, &mids$, mid_init$_408bd889ee3beae5, a0.this$)) {}

          ::org::apache::lucene::analysis::TokenStream ASCIIFoldingFilterFactory::create(const ::org::apache::lucene::analysis::TokenStream & a0) const
          {
            return ::org::apache::lucene::analysis::TokenStream(env->callObjectMethod(this$, mids$[mid_create_6de1e28d9d10cd9e], a0.this$));
          }

          ::org::apache::lucene::analysis::TokenStream ASCIIFoldingFilterFactory::normalize(const ::org::apache::lucene::analysis::TokenStream & a0) const
          {
            return ::org::apache::lucene::analysis::TokenStream(env->callObjectMethod(this$, mids$[mid_normalize_6de1e28d9d10cd9e], a0.this$));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace miscellaneous {
          static PyObject *t_ASCIIFoldingFilterFactory_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_ASCIIFoldingFilterFactory_instance_(PyTypeObject *type, PyObject *arg);
          static int t_ASCIIFoldingFilterFactory_init_(t_ASCIIFoldingFilterFactory *self, PyObject *args, PyObject *kwds);
          static PyObject *t_ASCIIFoldingFilterFactory_create(t_ASCIIFoldingFilterFactory *self, PyObject *args);
          static PyObject *t_ASCIIFoldingFilterFactory_normalize(t_ASCIIFoldingFilterFactory *self, PyObject *args);

          static PyMethodDef t_ASCIIFoldingFilterFactory__methods_[] = {
            DECLARE_METHOD(t_ASCIIFoldingFilterFactory, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_ASCIIFoldingFilterFactory, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_ASCIIFoldingFilterFactory, create, METH_VARARGS),
            DECLARE_METHOD(t_ASCIIFoldingFilterFactory, normalize, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          static PyType_Slot PY_TYPE_SLOTS(ASCIIFoldingFilterFactory)[] = {
            { Py_tp_methods, t_ASCIIFoldingFilterFactory__methods_ },
            { Py_tp_init, (void *) t_ASCIIFoldingFilterFactory_init_ },
            { 0, NULL }
          };

          static PyType_Def *PY_TYPE_BASES(ASCIIFoldingFilterFactory)[] = {
            &PY_TYPE_DEF(::org::apache::lucene::analysis::util::TokenFilterFactory),
            NULL
          };

          DEFINE_TYPE(ASCIIFoldingFilterFactory, t_ASCIIFoldingFilterFactory, ASCIIFoldingFilterFactory);

          void t_ASCIIFoldingFilterFactory::install(PyObject *module)
          {
            installType(&PY_TYPE(ASCIIFoldingFilterFactory), &PY_TYPE_DEF(ASCIIFoldingFilterFactory), module, "ASCIIFoldingFilterFactory", 0);
          }

          void t_ASCIIFoldingFilterFactory::initialize(PyObject *module)
          {
            PyObject_SetAttrString((PyObject *) PY_TYPE(ASCIIFoldingFilterFactory), "class_", make_descriptor(ASCIIFoldingFilterFactory::initializeClass, 1));
            PyObject_SetAttrString((PyObject *) PY_TYPE(ASCIIFoldingFilterFactory), "wrapfn_", make_descriptor(t_ASCIIFoldingFilterFactory::wrap_jobject));
            PyObject_SetAttrString((PyObject *) PY_TYPE(ASCIIFoldingFilterFactory), "boxfn_", make_descriptor(boxObject));
            env->getClass(ASCIIFoldingFilterFactory::initializeClass);
            PyObject_SetAttrString((PyObject *) PY_TYPE(ASCIIFoldingFilterFactory), "NAME", make_descriptor(j2p(*ASCIIFoldingFilterFactory::NAME)));
          }

          static PyObject *t_ASCIIFoldingFilterFactory_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, ASCIIFoldingFilterFactory::initializeClass, 1)))
              return NULL;
            return t_ASCIIFoldingFilterFactory::wrap_Object(ASCIIFoldingFilterFactory(((t_ASCIIFoldingFilterFactory *) arg)->object.this$));
          }
          static PyObject *t_ASCIIFoldingFilterFactory_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, ASCIIFoldingFilterFactory::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_ASCIIFoldingFilterFactory_init_(t_ASCIIFoldingFilterFactory *self, PyObject *args, PyObject *kwds)
          {
            ::java::util::Map a0((jobject) NULL);
            PyTypeObject **p0;
            ASCIIFoldingFilterFactory object((jobject) NULL);

            if (!parseArgs(args, "K", ::java::util::Map::initializeClass, &a0, &p0, ::java::util::t_Map::parameters_))
            {
              INT_CALL(object = ASCIIFoldingFilterFactory(a0));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_ASCIIFoldingFilterFactory_create(t_ASCIIFoldingFilterFactory *self, PyObject *args)
          {
            ::org::apache::lucene::analysis::TokenStream a0((jobject) NULL);
            ::org::apache::lucene::analysis::TokenStream result((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::analysis::TokenStream::initializeClass, &a0))
            {
              OBJ_CALL(result = self->object.create(a0));
              return ::org::apache::lucene::analysis::t_TokenStream::wrap_Object(result);
            }

            return callSuper(PY_TYPE(ASCIIFoldingFilterFactory), (PyObject *) self, "create", args, 2);
          }

          static PyObject *t_ASCIIFoldingFilterFactory_normalize(t_ASCIIFoldingFilterFactory *self, PyObject *args)
          {
            ::org::apache::lucene::analysis::TokenStream a0((jobject) NULL);
            ::org::apache::lucene::analysis::TokenStream result((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::analysis::TokenStream::initializeClass, &a0))
            {
              OBJ_CALL(result = self->object.normalize(a0));
              return ::org::apache::lucene::analysis::t_TokenStream::wrap_Object(result);
            }

            return callSuper(PY_TYPE(ASCIIFoldingFilterFactory), (PyObject *) self, "normalize", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/spatial3d/geom/XYZSolid.h"
#include "org/apache/lucene/spatial3d/geom/PlanetObject.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace spatial3d {
        namespace geom {

          ::java::lang::Class *XYZSolid::class$ = NULL;
          jmethodID *XYZSolid::mids$ = NULL;
          bool XYZSolid::live$ = false;

          jclass XYZSolid::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/spatial3d/geom/XYZSolid");

              class$ = new ::java::lang::Class(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace spatial3d {
        namespace geom {
          static PyObject *t_XYZSolid_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_XYZSolid_instance_(PyTypeObject *type, PyObject *arg);

          static PyMethodDef t_XYZSolid__methods_[] = {
            DECLARE_METHOD(t_XYZSolid, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_XYZSolid, instance_, METH_O | METH_CLASS),
            { NULL, NULL, 0, NULL }
          };

          static PyType_Slot PY_TYPE_SLOTS(XYZSolid)[] = {
            { Py_tp_methods, t_XYZSolid__methods_ },
            { Py_tp_init, (void *) abstract_init },
            { 0, NULL }
          };

          static PyType_Def *PY_TYPE_BASES(XYZSolid)[] = {
            &PY_TYPE_DEF(::org::apache::lucene::spatial3d::geom::GeoArea),
            NULL
          };

          DEFINE_TYPE(XYZSolid, t_XYZSolid, XYZSolid);

          void t_XYZSolid::install(PyObject *module)
          {
            installType(&PY_TYPE(XYZSolid), &PY_TYPE_DEF(XYZSolid), module, "XYZSolid", 0);
          }

          void t_XYZSolid::initialize(PyObject *module)
          {
            PyObject_SetAttrString((PyObject *) PY_TYPE(XYZSolid), "class_", make_descriptor(XYZSolid::initializeClass, 1));
            PyObject_SetAttrString((PyObject *) PY_TYPE(XYZSolid), "wrapfn_", make_descriptor(t_XYZSolid::wrap_jobject));
            PyObject_SetAttrString((PyObject *) PY_TYPE(XYZSolid), "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_XYZSolid_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, XYZSolid::initializeClass, 1)))
              return NULL;
            return t_XYZSolid::wrap_Object(XYZSolid(((t_XYZSolid *) arg)->object.this$));
          }
          static PyObject *t_XYZSolid_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, XYZSolid::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/shingle/ShingleFilter.h"
#include "java/lang/String.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/analysis/TokenStream.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace shingle {

          ::java::lang::Class *ShingleFilter::class$ = NULL;
          jmethodID *ShingleFilter::mids$ = NULL;
          bool ShingleFilter::live$ = false;
          ::java::lang::String *ShingleFilter::DEFAULT_FILLER_TOKEN = NULL;
          jint ShingleFilter::DEFAULT_MAX_SHINGLE_SIZE = (jint) 0;
          jint ShingleFilter::DEFAULT_MIN_SHINGLE_SIZE = (jint) 0;
          ::java::lang::String *ShingleFilter::DEFAULT_TOKEN_SEPARATOR = NULL;
          ::java::lang::String *ShingleFilter::DEFAULT_TOKEN_TYPE = NULL;

          jclass ShingleFilter::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/shingle/ShingleFilter");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_c26756868a754f4e] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/analysis/TokenStream;)V");
              mids$[mid_init$_b047379931b7623e] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/analysis/TokenStream;Ljava/lang/String;)V");
              mids$[mid_init$_ec84dcad1ccbb797] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/analysis/TokenStream;I)V");
              mids$[mid_init$_cc3fe04da12abad6] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/analysis/TokenStream;II)V");
              mids$[mid_end_f2cc1bce94666404] = env->getMethodID(cls, "end", "()V");
              mids$[mid_incrementToken_8454bd5aa23fd11e] = env->getMethodID(cls, "incrementToken", "()Z");
              mids$[mid_reset_f2cc1bce94666404] = env->getMethodID(cls, "reset", "()V");
              mids$[mid_setFillerToken_9fd2eb66a64e6f0f] = env->getMethodID(cls, "setFillerToken", "(Ljava/lang/String;)V");
              mids$[mid_setMaxShingleSize_040c4cd0390c5aff] = env->getMethodID(cls, "setMaxShingleSize", "(I)V");
              mids$[mid_setMinShingleSize_040c4cd0390c5aff] = env->getMethodID(cls, "setMinShingleSize", "(I)V");
              mids$[mid_setOutputUnigrams_9d72768e8fdce2b7] = env->getMethodID(cls, "setOutputUnigrams", "(Z)V");
              mids$[mid_setOutputUnigramsIfNoShingles_9d72768e8fdce2b7] = env->getMethodID(cls, "setOutputUnigramsIfNoShingles", "(Z)V");
              mids$[mid_setTokenSeparator_9fd2eb66a64e6f0f] = env->getMethodID(cls, "setTokenSeparator", "(Ljava/lang/String;)V");
              mids$[mid_setTokenType_9fd2eb66a64e6f0f] = env->getMethodID(cls, "setTokenType", "(Ljava/lang/String;)V");

              class$ = new ::java::lang::Class(cls);
              cls = (jclass) class$->this$;

              DEFAULT_FILLER_TOKEN = new ::java::lang::String(env->getStaticObjectField(cls, "DEFAULT_FILLER_TOKEN", "Ljava/lang/String;"));
              DEFAULT_MAX_SHINGLE_SIZE = env->getStaticIntField(cls, "DEFAULT_MAX_SHINGLE_SIZE");
              DEFAULT_MIN_SHINGLE_SIZE = env->getStaticIntField(cls, "DEFAULT_MIN_SHINGLE_SIZE");
              DEFAULT_TOKEN_SEPARATOR = new ::java::lang::String(env->getStaticObjectField(cls, "DEFAULT_TOKEN_SEPARATOR", "Ljava/lang/String;"));
              DEFAULT_TOKEN_TYPE = new ::java::lang::String(env->getStaticObjectField(cls, "DEFAULT_TOKEN_TYPE", "Ljava/lang/String;"));
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          ShingleFilter::ShingleFilter(const ::org::apache::lucene::analysis::TokenStream & a0) : ::org::apache::lucene::analysis::TokenFilter(env->newObject(initializeClass, &mids$, mid_init$_c26756868a754f4e, a0.this$)) {}

          ShingleFilter::ShingleFilter(const ::org::apache::lucene::analysis::TokenStream & a0, const ::java::lang::String & a1) : ::org::apache::lucene::analysis::TokenFilter(env->newObject(initializeClass, &mids$, mid_init$_b047379931b7623e, a0.this$, a1.this$)) {}

          ShingleFilter::ShingleFilter(const ::org::apache::lucene::analysis::TokenStream & a0, jint a1) : ::org::apache::lucene::analysis::TokenFilter(env->newObject(initializeClass, &mids$, mid_init$_ec84dcad1ccbb797, a0.this$, a1)) {}

          ShingleFilter::ShingleFilter(const ::org::apache::lucene::analysis::TokenStream & a0, jint a1, jint a2) : ::org::apache::lucene::analysis::TokenFilter(env->newObject(initializeClass, &mids$, mid_init$_cc3fe04da12abad6, a0.this$, a1, a2)) {}

          void ShingleFilter::end() const
          {
            env->callVoidMethod(this$, mids$[mid_end_f2cc1bce94666404]);
          }

          jboolean ShingleFilter::incrementToken() const
          {
            return env->callBooleanMethod(this$, mids$[mid_incrementToken_8454bd5aa23fd11e]);
          }

          void ShingleFilter::reset() const
          {
            env->callVoidMethod(this$, mids$[mid_reset_f2cc1bce94666404]);
          }

          void ShingleFilter::setFillerToken(const ::java::lang::String & a0) const
          {
            env->callVoidMethod(this$, mids$[mid_setFillerToken_9fd2eb66a64e6f0f], a0.this$);
          }

          void ShingleFilter::setMaxShingleSize(jint a0) const
          {
            env->callVoidMethod(this$, mids$[mid_setMaxShingleSize_040c4cd0390c5aff], a0);
          }

          void ShingleFilter::setMinShingleSize(jint a0) const
          {
            env->callVoidMethod(this$, mids$[mid_setMinShingleSize_040c4cd0390c5aff], a0);
          }

          void ShingleFilter::setOutputUnigrams(jboolean a0) const
          {
            env->callVoidMethod(this$, mids$[mid_setOutputUnigrams_9d72768e8fdce2b7], a0);
          }

          void ShingleFilter::setOutputUnigramsIfNoShingles(jboolean a0) const
          {
            env->callVoidMethod(this$, mids$[mid_setOutputUnigramsIfNoShingles_9d72768e8fdce2b7], a0);
          }

          void ShingleFilter::setTokenSeparator(const ::java::lang::String & a0) const
          {
            env->callVoidMethod(this$, mids$[mid_setTokenSeparator_9fd2eb66a64e6f0f], a0.this$);
          }

          void ShingleFilter::setTokenType(const ::java::lang::String & a0) const
          {
            env->callVoidMethod(this$, mids$[mid_setTokenType_9fd2eb66a64e6f0f], a0.this$);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace shingle {
          static PyObject *t_ShingleFilter_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_ShingleFilter_instance_(PyTypeObject *type, PyObject *arg);
          static int t_ShingleFilter_init_(t_ShingleFilter *self, PyObject *args, PyObject *kwds);
          static PyObject *t_ShingleFilter_end(t_ShingleFilter *self, PyObject *args);
          static PyObject *t_ShingleFilter_incrementToken(t_ShingleFilter *self, PyObject *args);
          static PyObject *t_ShingleFilter_reset(t_ShingleFilter *self, PyObject *args);
          static PyObject *t_ShingleFilter_setFillerToken(t_ShingleFilter *self, PyObject *arg);
          static PyObject *t_ShingleFilter_setMaxShingleSize(t_ShingleFilter *self, PyObject *arg);
          static PyObject *t_ShingleFilter_setMinShingleSize(t_ShingleFilter *self, PyObject *arg);
          static PyObject *t_ShingleFilter_setOutputUnigrams(t_ShingleFilter *self, PyObject *arg);
          static PyObject *t_ShingleFilter_setOutputUnigramsIfNoShingles(t_ShingleFilter *self, PyObject *arg);
          static PyObject *t_ShingleFilter_setTokenSeparator(t_ShingleFilter *self, PyObject *arg);
          static PyObject *t_ShingleFilter_setTokenType(t_ShingleFilter *self, PyObject *arg);
          static int t_ShingleFilter_set__fillerToken(t_ShingleFilter *self, PyObject *arg, void *data);
          static int t_ShingleFilter_set__maxShingleSize(t_ShingleFilter *self, PyObject *arg, void *data);
          static int t_ShingleFilter_set__minShingleSize(t_ShingleFilter *self, PyObject *arg, void *data);
          static int t_ShingleFilter_set__outputUnigrams(t_ShingleFilter *self, PyObject *arg, void *data);
          static int t_ShingleFilter_set__outputUnigramsIfNoShingles(t_ShingleFilter *self, PyObject *arg, void *data);
          static int t_ShingleFilter_set__tokenSeparator(t_ShingleFilter *self, PyObject *arg, void *data);
          static int t_ShingleFilter_set__tokenType(t_ShingleFilter *self, PyObject *arg, void *data);
          static PyGetSetDef t_ShingleFilter__fields_[] = {
            DECLARE_SET_FIELD(t_ShingleFilter, fillerToken),
            DECLARE_SET_FIELD(t_ShingleFilter, maxShingleSize),
            DECLARE_SET_FIELD(t_ShingleFilter, minShingleSize),
            DECLARE_SET_FIELD(t_ShingleFilter, outputUnigrams),
            DECLARE_SET_FIELD(t_ShingleFilter, outputUnigramsIfNoShingles),
            DECLARE_SET_FIELD(t_ShingleFilter, tokenSeparator),
            DECLARE_SET_FIELD(t_ShingleFilter, tokenType),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_ShingleFilter__methods_[] = {
            DECLARE_METHOD(t_ShingleFilter, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_ShingleFilter, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_ShingleFilter, end, METH_VARARGS),
            DECLARE_METHOD(t_ShingleFilter, incrementToken, METH_VARARGS),
            DECLARE_METHOD(t_ShingleFilter, reset, METH_VARARGS),
            DECLARE_METHOD(t_ShingleFilter, setFillerToken, METH_O),
            DECLARE_METHOD(t_ShingleFilter, setMaxShingleSize, METH_O),
            DECLARE_METHOD(t_ShingleFilter, setMinShingleSize, METH_O),
            DECLARE_METHOD(t_ShingleFilter, setOutputUnigrams, METH_O),
            DECLARE_METHOD(t_ShingleFilter, setOutputUnigramsIfNoShingles, METH_O),
            DECLARE_METHOD(t_ShingleFilter, setTokenSeparator, METH_O),
            DECLARE_METHOD(t_ShingleFilter, setTokenType, METH_O),
            { NULL, NULL, 0, NULL }
          };

          static PyType_Slot PY_TYPE_SLOTS(ShingleFilter)[] = {
            { Py_tp_methods, t_ShingleFilter__methods_ },
            { Py_tp_init, (void *) t_ShingleFilter_init_ },
            { Py_tp_getset, t_ShingleFilter__fields_ },
            { 0, NULL }
          };

          static PyType_Def *PY_TYPE_BASES(ShingleFilter)[] = {
            &PY_TYPE_DEF(::org::apache::lucene::analysis::TokenFilter),
            NULL
          };

          DEFINE_TYPE(ShingleFilter, t_ShingleFilter, ShingleFilter);

          void t_ShingleFilter::install(PyObject *module)
          {
            installType(&PY_TYPE(ShingleFilter), &PY_TYPE_DEF(ShingleFilter), module, "ShingleFilter", 0);
          }

          void t_ShingleFilter::initialize(PyObject *module)
          {
            PyObject_SetAttrString((PyObject *) PY_TYPE(ShingleFilter), "class_", make_descriptor(ShingleFilter::initializeClass, 1));
            PyObject_SetAttrString((PyObject *) PY_TYPE(ShingleFilter), "wrapfn_", make_descriptor(t_ShingleFilter::wrap_jobject));
            PyObject_SetAttrString((PyObject *) PY_TYPE(ShingleFilter), "boxfn_", make_descriptor(boxObject));
            env->getClass(ShingleFilter::initializeClass);
            PyObject_SetAttrString((PyObject *) PY_TYPE(ShingleFilter), "DEFAULT_FILLER_TOKEN", make_descriptor(j2p(*ShingleFilter::DEFAULT_FILLER_TOKEN)));
            PyObject_SetAttrString((PyObject *) PY_TYPE(ShingleFilter), "DEFAULT_MAX_SHINGLE_SIZE", make_descriptor(ShingleFilter::DEFAULT_MAX_SHINGLE_SIZE));
            PyObject_SetAttrString((PyObject *) PY_TYPE(ShingleFilter), "DEFAULT_MIN_SHINGLE_SIZE", make_descriptor(ShingleFilter::DEFAULT_MIN_SHINGLE_SIZE));
            PyObject_SetAttrString((PyObject *) PY_TYPE(ShingleFilter), "DEFAULT_TOKEN_SEPARATOR", make_descriptor(j2p(*ShingleFilter::DEFAULT_TOKEN_SEPARATOR)));
            PyObject_SetAttrString((PyObject *) PY_TYPE(ShingleFilter), "DEFAULT_TOKEN_TYPE", make_descriptor(j2p(*ShingleFilter::DEFAULT_TOKEN_TYPE)));
          }

          static PyObject *t_ShingleFilter_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, ShingleFilter::initializeClass, 1)))
              return NULL;
            return t_ShingleFilter::wrap_Object(ShingleFilter(((t_ShingleFilter *) arg)->object.this$));
          }
          static PyObject *t_ShingleFilter_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, ShingleFilter::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_ShingleFilter_init_(t_ShingleFilter *self, PyObject *args, PyObject *kwds)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 1:
              {
                ::org::apache::lucene::analysis::TokenStream a0((jobject) NULL);
                ShingleFilter object((jobject) NULL);

                if (!parseArgs(args, "k", ::org::apache::lucene::analysis::TokenStream::initializeClass, &a0))
                {
                  INT_CALL(object = ShingleFilter(a0));
                  self->object = object;
                  break;
                }
              }
              goto err;
             case 2:
              {
                ::org::apache::lucene::analysis::TokenStream a0((jobject) NULL);
                ::java::lang::String a1((jobject) NULL);
                ShingleFilter object((jobject) NULL);

                if (!parseArgs(args, "ks", ::org::apache::lucene::analysis::TokenStream::initializeClass, &a0, &a1))
                {
                  INT_CALL(object = ShingleFilter(a0, a1));
                  self->object = object;
                  break;
                }
              }
              {
                ::org::apache::lucene::analysis::TokenStream a0((jobject) NULL);
                jint a1;
                ShingleFilter object((jobject) NULL);

                if (!parseArgs(args, "kI", ::org::apache::lucene::analysis::TokenStream::initializeClass, &a0, &a1))
                {
                  INT_CALL(object = ShingleFilter(a0, a1));
                  self->object = object;
                  break;
                }
              }
              goto err;
             case 3:
              {
                ::org::apache::lucene::analysis::TokenStream a0((jobject) NULL);
                jint a1;
                jint a2;
                ShingleFilter object((jobject) NULL);

                if (!parseArgs(args, "kII", ::org::apache::lucene::analysis::TokenStream::initializeClass, &a0, &a1, &a2))
                {
                  INT_CALL(object = ShingleFilter(a0, a1, a2));
                  self->object = object;
                  break;
                }
              }
             default:
             err:
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_ShingleFilter_end(t_ShingleFilter *self, PyObject *args)
          {

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(self->object.end());
              Py_RETURN_NONE;
            }

            return callSuper(PY_TYPE(ShingleFilter), (PyObject *) self, "end", args, 2);
          }

          static PyObject *t_ShingleFilter_incrementToken(t_ShingleFilter *self, PyObject *args)
          {
            jboolean result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.incrementToken());
              Py_RETURN_BOOL(result);
            }

            return callSuper(PY_TYPE(ShingleFilter), (PyObject *) self, "incrementToken", args, 2);
          }

          static PyObject *t_ShingleFilter_reset(t_ShingleFilter *self, PyObject *args)
          {

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(self->object.reset());
              Py_RETURN_NONE;
            }

            return callSuper(PY_TYPE(ShingleFilter), (PyObject *) self, "reset", args, 2);
          }

          static PyObject *t_ShingleFilter_setFillerToken(t_ShingleFilter *self, PyObject *arg)
          {
            ::java::lang::String a0((jobject) NULL);

            if (!parseArg(arg, "s", &a0))
            {
              OBJ_CALL(self->object.setFillerToken(a0));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError((PyObject *) self, "setFillerToken", arg);
            return NULL;
          }

          static PyObject *t_ShingleFilter_setMaxShingleSize(t_ShingleFilter *self, PyObject *arg)
          {
            jint a0;

            if (!parseArg(arg, "I", &a0))
            {
              OBJ_CALL(self->object.setMaxShingleSize(a0));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError((PyObject *) self, "setMaxShingleSize", arg);
            return NULL;
          }

          static PyObject *t_ShingleFilter_setMinShingleSize(t_ShingleFilter *self, PyObject *arg)
          {
            jint a0;

            if (!parseArg(arg, "I", &a0))
            {
              OBJ_CALL(self->object.setMinShingleSize(a0));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError((PyObject *) self, "setMinShingleSize", arg);
            return NULL;
          }

          static PyObject *t_ShingleFilter_setOutputUnigrams(t_ShingleFilter *self, PyObject *arg)
          {
            jboolean a0;

            if (!parseArg(arg, "Z", &a0))
            {
              OBJ_CALL(self->object.setOutputUnigrams(a0));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError((PyObject *) self, "setOutputUnigrams", arg);
            return NULL;
          }

          static PyObject *t_ShingleFilter_setOutputUnigramsIfNoShingles(t_ShingleFilter *self, PyObject *arg)
          {
            jboolean a0;

            if (!parseArg(arg, "Z", &a0))
            {
              OBJ_CALL(self->object.setOutputUnigramsIfNoShingles(a0));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError((PyObject *) self, "setOutputUnigramsIfNoShingles", arg);
            return NULL;
          }

          static PyObject *t_ShingleFilter_setTokenSeparator(t_ShingleFilter *self, PyObject *arg)
          {
            ::java::lang::String a0((jobject) NULL);

            if (!parseArg(arg, "s", &a0))
            {
              OBJ_CALL(self->object.setTokenSeparator(a0));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError((PyObject *) self, "setTokenSeparator", arg);
            return NULL;
          }

          static PyObject *t_ShingleFilter_setTokenType(t_ShingleFilter *self, PyObject *arg)
          {
            ::java::lang::String a0((jobject) NULL);

            if (!parseArg(arg, "s", &a0))
            {
              OBJ_CALL(self->object.setTokenType(a0));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError((PyObject *) self, "setTokenType", arg);
            return NULL;
          }

          static int t_ShingleFilter_set__fillerToken(t_ShingleFilter *self, PyObject *arg, void *data)
          {
            {
              ::java::lang::String value((jobject) NULL);
              if (!parseArg(arg, "s", &value))
              {
                INT_CALL(self->object.setFillerToken(value));
                return 0;
              }
            }
            PyErr_SetArgsError((PyObject *) self, "fillerToken", arg);
            return -1;
          }

          static int t_ShingleFilter_set__maxShingleSize(t_ShingleFilter *self, PyObject *arg, void *data)
          {
            {
              jint value;
              if (!parseArg(arg, "I", &value))
              {
                INT_CALL(self->object.setMaxShingleSize(value));
                return 0;
              }
            }
            PyErr_SetArgsError((PyObject *) self, "maxShingleSize", arg);
            return -1;
          }

          static int t_ShingleFilter_set__minShingleSize(t_ShingleFilter *self, PyObject *arg, void *data)
          {
            {
              jint value;
              if (!parseArg(arg, "I", &value))
              {
                INT_CALL(self->object.setMinShingleSize(value));
                return 0;
              }
            }
            PyErr_SetArgsError((PyObject *) self, "minShingleSize", arg);
            return -1;
          }

          static int t_ShingleFilter_set__outputUnigrams(t_ShingleFilter *self, PyObject *arg, void *data)
          {
            {
              jboolean value;
              if (!parseArg(arg, "Z", &value))
              {
                INT_CALL(self->object.setOutputUnigrams(value));
                return 0;
              }
            }
            PyErr_SetArgsError((PyObject *) self, "outputUnigrams", arg);
            return -1;
          }

          static int t_ShingleFilter_set__outputUnigramsIfNoShingles(t_ShingleFilter *self, PyObject *arg, void *data)
          {
            {
              jboolean value;
              if (!parseArg(arg, "Z", &value))
              {
                INT_CALL(self->object.setOutputUnigramsIfNoShingles(value));
                return 0;
              }
            }
            PyErr_SetArgsError((PyObject *) self, "outputUnigramsIfNoShingles", arg);
            return -1;
          }

          static int t_ShingleFilter_set__tokenSeparator(t_ShingleFilter *self, PyObject *arg, void *data)
          {
            {
              ::java::lang::String value((jobject) NULL);
              if (!parseArg(arg, "s", &value))
              {
                INT_CALL(self->object.setTokenSeparator(value));
                return 0;
              }
            }
            PyErr_SetArgsError((PyObject *) self, "tokenSeparator", arg);
            return -1;
          }

          static int t_ShingleFilter_set__tokenType(t_ShingleFilter *self, PyObject *arg, void *data)
          {
            {
              ::java::lang::String value((jobject) NULL);
              if (!parseArg(arg, "s", &value))
              {
                INT_CALL(self->object.setTokenType(value));
                return 0;
              }
            }
            PyErr_SetArgsError((PyObject *) self, "tokenType", arg);
            return -1;
          }
        }
      }
    }
  }
}
