#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/codecs/blockterms/FixedGapTermsIndexWriter.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/index/SegmentWriteState.h"
#include "org/apache/lucene/codecs/blockterms/TermsIndexWriterBase$FieldWriter.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/index/FieldInfo.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace codecs {
        namespace blockterms {

          ::java::lang::Class *FixedGapTermsIndexWriter::class$ = NULL;
          jmethodID *FixedGapTermsIndexWriter::mids$ = NULL;
          bool FixedGapTermsIndexWriter::live$ = false;
          jint FixedGapTermsIndexWriter::DEFAULT_TERM_INDEX_INTERVAL = (jint) 0;

          jclass FixedGapTermsIndexWriter::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/codecs/blockterms/FixedGapTermsIndexWriter");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_a108448a3f706d50] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/index/SegmentWriteState;)V");
              mids$[mid_init$_6ecf5ec2ceab9754] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/index/SegmentWriteState;I)V");
              mids$[mid_addField_d1b1b077f554cd9d] = env->getMethodID(cls, "addField", "(Lorg/apache/lucene/index/FieldInfo;J)Lorg/apache/lucene/codecs/blockterms/TermsIndexWriterBase$FieldWriter;");
              mids$[mid_close_f2cc1bce94666404] = env->getMethodID(cls, "close", "()V");
              mids$[mid_indexedTermPrefixLength_f465493e4f3be174] = env->getMethodID(cls, "indexedTermPrefixLength", "(Lorg/apache/lucene/util/BytesRef;Lorg/apache/lucene/util/BytesRef;)I");

              class$ = new ::java::lang::Class(cls);
              cls = (jclass) class$->this$;

              DEFAULT_TERM_INDEX_INTERVAL = env->getStaticIntField(cls, "DEFAULT_TERM_INDEX_INTERVAL");
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          FixedGapTermsIndexWriter::FixedGapTermsIndexWriter(const ::org::apache::lucene::index::SegmentWriteState & a0) : ::org::apache::lucene::codecs::blockterms::TermsIndexWriterBase(env->newObject(initializeClass, &mids$, mid_init$_a108448a3f706d50, a0.this$)) {}

          FixedGapTermsIndexWriter::FixedGapTermsIndexWriter(const ::org::apache::lucene::index::SegmentWriteState & a0, jint a1) : ::org::apache::lucene::codecs::blockterms::TermsIndexWriterBase(env->newObject(initializeClass, &mids$, mid_init$_6ecf5ec2ceab9754, a0.this$, a1)) {}

          ::org::apache::lucene::codecs::blockterms::TermsIndexWriterBase$FieldWriter FixedGapTermsIndexWriter::addField(const ::org::apache::lucene::index::FieldInfo & a0, jlong a1) const
          {
            return ::org::apache::lucene::codecs::blockterms::TermsIndexWriterBase$FieldWriter(env->callObjectMethod(this$, mids$[mid_addField_d1b1b077f554cd9d], a0.this$, a1));
          }

          void FixedGapTermsIndexWriter::close() const
          {
            env->callVoidMethod(this$, mids$[mid_close_f2cc1bce94666404]);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace codecs {
        namespace blockterms {
          static PyObject *t_FixedGapTermsIndexWriter_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_FixedGapTermsIndexWriter_instance_(PyTypeObject *type, PyObject *arg);
          static int t_FixedGapTermsIndexWriter_init_(t_FixedGapTermsIndexWriter *self, PyObject *args, PyObject *kwds);
          static PyObject *t_FixedGapTermsIndexWriter_addField(t_FixedGapTermsIndexWriter *self, PyObject *args);
          static PyObject *t_FixedGapTermsIndexWriter_close(t_FixedGapTermsIndexWriter *self, PyObject *args);

          static PyMethodDef t_FixedGapTermsIndexWriter__methods_[] = {
            DECLARE_METHOD(t_FixedGapTermsIndexWriter, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_FixedGapTermsIndexWriter, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_FixedGapTermsIndexWriter, addField, METH_VARARGS),
            DECLARE_METHOD(t_FixedGapTermsIndexWriter, close, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          static PyType_Slot PY_TYPE_SLOTS(FixedGapTermsIndexWriter)[] = {
            { Py_tp_methods, t_FixedGapTermsIndexWriter__methods_ },
            { Py_tp_init, (void *) t_FixedGapTermsIndexWriter_init_ },
            { 0, NULL }
          };

          static PyType_Def *PY_TYPE_BASES(FixedGapTermsIndexWriter)[] = {
            &PY_TYPE_DEF(::org::apache::lucene::codecs::blockterms::TermsIndexWriterBase),
            NULL
          };

          DEFINE_TYPE(FixedGapTermsIndexWriter, t_FixedGapTermsIndexWriter, FixedGapTermsIndexWriter);

          void t_FixedGapTermsIndexWriter::install(PyObject *module)
          {
            installType(&PY_TYPE(FixedGapTermsIndexWriter), &PY_TYPE_DEF(FixedGapTermsIndexWriter), module, "FixedGapTermsIndexWriter", 0);
          }

          void t_FixedGapTermsIndexWriter::initialize(PyObject *module)
          {
            PyObject_SetAttrString((PyObject *) PY_TYPE(FixedGapTermsIndexWriter), "class_", make_descriptor(FixedGapTermsIndexWriter::initializeClass, 1));
            PyObject_SetAttrString((PyObject *) PY_TYPE(FixedGapTermsIndexWriter), "wrapfn_", make_descriptor(t_FixedGapTermsIndexWriter::wrap_jobject));
            PyObject_SetAttrString((PyObject *) PY_TYPE(FixedGapTermsIndexWriter), "boxfn_", make_descriptor(boxObject));
            env->getClass(FixedGapTermsIndexWriter::initializeClass);
            PyObject_SetAttrString((PyObject *) PY_TYPE(FixedGapTermsIndexWriter), "DEFAULT_TERM_INDEX_INTERVAL", make_descriptor(FixedGapTermsIndexWriter::DEFAULT_TERM_INDEX_INTERVAL));
          }

          static PyObject *t_FixedGapTermsIndexWriter_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, FixedGapTermsIndexWriter::initializeClass, 1)))
              return NULL;
            return t_FixedGapTermsIndexWriter::wrap_Object(FixedGapTermsIndexWriter(((t_FixedGapTermsIndexWriter *) arg)->object.this$));
          }
          static PyObject *t_FixedGapTermsIndexWriter_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, FixedGapTermsIndexWriter::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_FixedGapTermsIndexWriter_init_(t_FixedGapTermsIndexWriter *self, PyObject *args, PyObject *kwds)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 1:
              {
                ::org::apache::lucene::index::SegmentWriteState a0((jobject) NULL);
                FixedGapTermsIndexWriter object((jobject) NULL);

                if (!parseArgs(args, "k", ::org::apache::lucene::index::SegmentWriteState::initializeClass, &a0))
                {
                  INT_CALL(object = FixedGapTermsIndexWriter(a0));
                  self->object = object;
                  break;
                }
              }
              goto err;
             case 2:
              {
                ::org::apache::lucene::index::SegmentWriteState a0((jobject) NULL);
                jint a1;
                FixedGapTermsIndexWriter object((jobject) NULL);

                if (!parseArgs(args, "kI", ::org::apache::lucene::index::SegmentWriteState::initializeClass, &a0, &a1))
                {
                  INT_CALL(object = FixedGapTermsIndexWriter(a0, a1));
                  self->object = object;
                  break;
                }
              }
             default:
             err:
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_FixedGapTermsIndexWriter_addField(t_FixedGapTermsIndexWriter *self, PyObject *args)
          {
            ::org::apache::lucene::index::FieldInfo a0((jobject) NULL);
            jlong a1;
            ::org::apache::lucene::codecs::blockterms::TermsIndexWriterBase$FieldWriter result((jobject) NULL);

            if (!parseArgs(args, "kJ", ::org::apache::lucene::index::FieldInfo::initializeClass, &a0, &a1))
            {
              OBJ_CALL(result = self->object.addField(a0, a1));
              return ::org::apache::lucene::codecs::blockterms::t_TermsIndexWriterBase$FieldWriter::wrap_Object(result);
            }

            return callSuper(PY_TYPE(FixedGapTermsIndexWriter), (PyObject *) self, "addField", args, 2);
          }

          static PyObject *t_FixedGapTermsIndexWriter_close(t_FixedGapTermsIndexWriter *self, PyObject *args)
          {

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(self->object.close());
              Py_RETURN_NONE;
            }

            return callSuper(PY_TYPE(FixedGapTermsIndexWriter), (PyObject *) self, "close", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queries/function/FunctionMatchQuery.h"
#include "java/util/function/DoublePredicate.h"
#include "org/apache/lucene/search/IndexSearcher.h"
#include "java/lang/Class.h"
#include "java/lang/Object.h"
#include "org/apache/lucene/search/DoubleValuesSource.h"
#include "java/lang/String.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/search/QueryVisitor.h"
#include "org/apache/lucene/search/ScoreMode.h"
#include "org/apache/lucene/search/Weight.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queries {
        namespace function {

          ::java::lang::Class *FunctionMatchQuery::class$ = NULL;
          jmethodID *FunctionMatchQuery::mids$ = NULL;
          bool FunctionMatchQuery::live$ = false;

          jclass FunctionMatchQuery::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/queries/function/FunctionMatchQuery");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_bfc4ebaa405971dc] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/search/DoubleValuesSource;Ljava/util/function/DoublePredicate;)V");
              mids$[mid_init$_7de7c43118dd85a2] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/search/DoubleValuesSource;Ljava/util/function/DoublePredicate;F)V");
              mids$[mid_createWeight_f0ef0b5ea369ac06] = env->getMethodID(cls, "createWeight", "(Lorg/apache/lucene/search/IndexSearcher;Lorg/apache/lucene/search/ScoreMode;F)Lorg/apache/lucene/search/Weight;");
              mids$[mid_equals_8b72f2dcdde6fd1d] = env->getMethodID(cls, "equals", "(Ljava/lang/Object;)Z");
              mids$[mid_hashCode_9972fcc56b44e79d] = env->getMethodID(cls, "hashCode", "()I");
              mids$[mid_toString_9bfa75c9f141b67f] = env->getMethodID(cls, "toString", "(Ljava/lang/String;)Ljava/lang/String;");
              mids$[mid_visit_f9e6207006c5b6c1] = env->getMethodID(cls, "visit", "(Lorg/apache/lucene/search/QueryVisitor;)V");

              class$ = new ::java::lang::Class(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          FunctionMatchQuery::FunctionMatchQuery(const ::org::apache::lucene::search::DoubleValuesSource & a0, const ::java::util::function::DoublePredicate & a1) : ::org::apache::lucene::search::Query(env->newObject(initializeClass, &mids$, mid_init$_bfc4ebaa405971dc, a0.this$, a1.this$)) {}

          FunctionMatchQuery::FunctionMatchQuery(const ::org::apache::lucene::search::DoubleValuesSource & a0, const ::java::util::function::DoublePredicate & a1, jfloat a2) : ::org::apache::lucene::search::Query(env->newObject(initializeClass, &mids$, mid_init$_7de7c43118dd85a2, a0.this$, a1.this$, a2)) {}

          ::org::apache::lucene::search::Weight FunctionMatchQuery::createWeight(const ::org::apache::lucene::search::IndexSearcher & a0, const ::org::apache::lucene::search::ScoreMode & a1, jfloat a2) const
          {
            return ::org::apache::lucene::search::Weight(env->callObjectMethod(this$, mids$[mid_createWeight_f0ef0b5ea369ac06], a0.this$, a1.this$, a2));
          }

          jboolean FunctionMatchQuery::equals(const ::java::lang::Object & a0) const
          {
            return env->callBooleanMethod(this$, mids$[mid_equals_8b72f2dcdde6fd1d], a0.this$);
          }

          jint FunctionMatchQuery::hashCode() const
          {
            return env->callIntMethod(this$, mids$[mid_hashCode_9972fcc56b44e79d]);
          }

          ::java::lang::String FunctionMatchQuery::toString(const ::java::lang::String & a0) const
          {
            return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_9bfa75c9f141b67f], a0.this$));
          }

          void FunctionMatchQuery::visit(const ::org::apache::lucene::search::QueryVisitor & a0) const
          {
            env->callVoidMethod(this$, mids$[mid_visit_f9e6207006c5b6c1], a0.this$);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queries {
        namespace function {
          static PyObject *t_FunctionMatchQuery_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_FunctionMatchQuery_instance_(PyTypeObject *type, PyObject *arg);
          static int t_FunctionMatchQuery_init_(t_FunctionMatchQuery *self, PyObject *args, PyObject *kwds);
          static PyObject *t_FunctionMatchQuery_createWeight(t_FunctionMatchQuery *self, PyObject *args);
          static PyObject *t_FunctionMatchQuery_equals(t_FunctionMatchQuery *self, PyObject *args);
          static PyObject *t_FunctionMatchQuery_hashCode(t_FunctionMatchQuery *self, PyObject *args);
          static PyObject *t_FunctionMatchQuery_toString(t_FunctionMatchQuery *self, PyObject *args);
          static PyObject *t_FunctionMatchQuery_visit(t_FunctionMatchQuery *self, PyObject *args);

          static PyMethodDef t_FunctionMatchQuery__methods_[] = {
            DECLARE_METHOD(t_FunctionMatchQuery, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_FunctionMatchQuery, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_FunctionMatchQuery, createWeight, METH_VARARGS),
            DECLARE_METHOD(t_FunctionMatchQuery, equals, METH_VARARGS),
            DECLARE_METHOD(t_FunctionMatchQuery, hashCode, METH_VARARGS),
            DECLARE_METHOD(t_FunctionMatchQuery, toString, METH_VARARGS),
            DECLARE_METHOD(t_FunctionMatchQuery, visit, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          static PyType_Slot PY_TYPE_SLOTS(FunctionMatchQuery)[] = {
            { Py_tp_methods, t_FunctionMatchQuery__methods_ },
            { Py_tp_init, (void *) t_FunctionMatchQuery_init_ },
            { 0, NULL }
          };

          static PyType_Def *PY_TYPE_BASES(FunctionMatchQuery)[] = {
            &PY_TYPE_DEF(::org::apache::lucene::search::Query),
            NULL
          };

          DEFINE_TYPE(FunctionMatchQuery, t_FunctionMatchQuery, FunctionMatchQuery);

          void t_FunctionMatchQuery::install(PyObject *module)
          {
            installType(&PY_TYPE(FunctionMatchQuery), &PY_TYPE_DEF(FunctionMatchQuery), module, "FunctionMatchQuery", 0);
          }

          void t_FunctionMatchQuery::initialize(PyObject *module)
          {
            PyObject_SetAttrString((PyObject *) PY_TYPE(FunctionMatchQuery), "class_", make_descriptor(FunctionMatchQuery::initializeClass, 1));
            PyObject_SetAttrString((PyObject *) PY_TYPE(FunctionMatchQuery), "wrapfn_", make_descriptor(t_FunctionMatchQuery::wrap_jobject));
            PyObject_SetAttrString((PyObject *) PY_TYPE(FunctionMatchQuery), "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_FunctionMatchQuery_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, FunctionMatchQuery::initializeClass, 1)))
              return NULL;
            return t_FunctionMatchQuery::wrap_Object(FunctionMatchQuery(((t_FunctionMatchQuery *) arg)->object.this$));
          }
          static PyObject *t_FunctionMatchQuery_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, FunctionMatchQuery::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_FunctionMatchQuery_init_(t_FunctionMatchQuery *self, PyObject *args, PyObject *kwds)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 2:
              {
                ::org::apache::lucene::search::DoubleValuesSource a0((jobject) NULL);
                ::java::util::function::DoublePredicate a1((jobject) NULL);
                FunctionMatchQuery object((jobject) NULL);

                if (!parseArgs(args, "kk", ::org::apache::lucene::search::DoubleValuesSource::initializeClass, ::java::util::function::DoublePredicate::initializeClass, &a0, &a1))
                {
                  INT_CALL(object = FunctionMatchQuery(a0, a1));
                  self->object = object;
                  break;
                }
              }
              goto err;
             case 3:
              {
                ::org::apache::lucene::search::DoubleValuesSource a0((jobject) NULL);
                ::java::util::function::DoublePredicate a1((jobject) NULL);
                jfloat a2;
                FunctionMatchQuery object((jobject) NULL);

                if (!parseArgs(args, "kkF", ::org::apache::lucene::search::DoubleValuesSource::initializeClass, ::java::util::function::DoublePredicate::initializeClass, &a0, &a1, &a2))
                {
                  INT_CALL(object = FunctionMatchQuery(a0, a1, a2));
                  self->object = object;
                  break;
                }
              }
             default:
             err:
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_FunctionMatchQuery_createWeight(t_FunctionMatchQuery *self, PyObject *args)
          {
            ::org::apache::lucene::search::IndexSearcher a0((jobject) NULL);
            ::org::apache::lucene::search::ScoreMode a1((jobject) NULL);
            PyTypeObject **p1;
            jfloat a2;
            ::org::apache::lucene::search::Weight result((jobject) NULL);

            if (!parseArgs(args, "kKF", ::org::apache::lucene::search::IndexSearcher::initializeClass, ::org::apache::lucene::search::ScoreMode::initializeClass, &a0, &a1, &p1, ::org::apache::lucene::search::t_ScoreMode::parameters_, &a2))
            {
              OBJ_CALL(result = self->object.createWeight(a0, a1, a2));
              return ::org::apache::lucene::search::t_Weight::wrap_Object(result);
            }

            return callSuper(PY_TYPE(FunctionMatchQuery), (PyObject *) self, "createWeight", args, 2);
          }

          static PyObject *t_FunctionMatchQuery_equals(t_FunctionMatchQuery *self, PyObject *args)
          {
            ::java::lang::Object a0((jobject) NULL);
            jboolean result;

            if (!parseArgs(args, "o", &a0))
            {
              OBJ_CALL(result = self->object.equals(a0));
              Py_RETURN_BOOL(result);
            }

            return callSuper(PY_TYPE(FunctionMatchQuery), (PyObject *) self, "equals", args, 2);
          }

          static PyObject *t_FunctionMatchQuery_hashCode(t_FunctionMatchQuery *self, PyObject *args)
          {
            jint result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.hashCode());
              return PyLong_FromLong((long) result);
            }

            return callSuper(PY_TYPE(FunctionMatchQuery), (PyObject *) self, "hashCode", args, 2);
          }

          static PyObject *t_FunctionMatchQuery_toString(t_FunctionMatchQuery *self, PyObject *args)
          {
            ::java::lang::String a0((jobject) NULL);
            ::java::lang::String result((jobject) NULL);

            if (!parseArgs(args, "s", &a0))
            {
              OBJ_CALL(result = self->object.toString(a0));
              return j2p(result);
            }

            return callSuper(PY_TYPE(FunctionMatchQuery), (PyObject *) self, "toString", args, 2);
          }

          static PyObject *t_FunctionMatchQuery_visit(t_FunctionMatchQuery *self, PyObject *args)
          {
            ::org::apache::lucene::search::QueryVisitor a0((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::search::QueryVisitor::initializeClass, &a0))
            {
              OBJ_CALL(self->object.visit(a0));
              Py_RETURN_NONE;
            }

            return callSuper(PY_TYPE(FunctionMatchQuery), (PyObject *) self, "visit", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/egothor/stemmer/Compile.h"
#include "java/lang/String.h"
#include "java/lang/Exception.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace egothor {
    namespace stemmer {

      ::java::lang::Class *Compile::class$ = NULL;
      jmethodID *Compile::mids$ = NULL;
      bool Compile::live$ = false;

      jclass Compile::initializeClass(bool getOnly)
      {
        if (getOnly)
          return (jclass) (live$ ? class$->this$ : NULL);
        if (class$ == NULL)
        {
          jclass cls = (jclass) env->findClass("org/egothor/stemmer/Compile");

          mids$ = new jmethodID[max_mid];
          mids$[mid_main_2fc318b999a7aba3] = env->getStaticMethodID(cls, "main", "([Ljava/lang/String;)V");

          class$ = new ::java::lang::Class(cls);
          live$ = true;
        }
        return (jclass) class$->this$;
      }

      void Compile::main(const JArray< ::java::lang::String > & a0)
      {
        jclass cls = env->getClass(initializeClass);
        env->callStaticVoidMethod(cls, mids$[mid_main_2fc318b999a7aba3], a0.this$);
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace egothor {
    namespace stemmer {
      static PyObject *t_Compile_cast_(PyTypeObject *type, PyObject *arg);
      static PyObject *t_Compile_instance_(PyTypeObject *type, PyObject *arg);
      static PyObject *t_Compile_main(PyTypeObject *type, PyObject *arg);

      static PyMethodDef t_Compile__methods_[] = {
        DECLARE_METHOD(t_Compile, cast_, METH_O | METH_CLASS),
        DECLARE_METHOD(t_Compile, instance_, METH_O | METH_CLASS),
        DECLARE_METHOD(t_Compile, main, METH_O | METH_CLASS),
        { NULL, NULL, 0, NULL }
      };

      static PyType_Slot PY_TYPE_SLOTS(Compile)[] = {
        { Py_tp_methods, t_Compile__methods_ },
        { Py_tp_init, (void *) abstract_init },
        { 0, NULL }
      };

      static PyType_Def *PY_TYPE_BASES(Compile)[] = {
        &PY_TYPE_DEF(::java::lang::Object),
        NULL
      };

      DEFINE_TYPE(Compile, t_Compile, Compile);

      void t_Compile::install(PyObject *module)
      {
        installType(&PY_TYPE(Compile), &PY_TYPE_DEF(Compile), module, "Compile", 0);
      }

      void t_Compile::initialize(PyObject *module)
      {
        PyObject_SetAttrString((PyObject *) PY_TYPE(Compile), "class_", make_descriptor(Compile::initializeClass, 1));
        PyObject_SetAttrString((PyObject *) PY_TYPE(Compile), "wrapfn_", make_descriptor(t_Compile::wrap_jobject));
        PyObject_SetAttrString((PyObject *) PY_TYPE(Compile), "boxfn_", make_descriptor(boxObject));
      }

      static PyObject *t_Compile_cast_(PyTypeObject *type, PyObject *arg)
      {
        if (!(arg = castCheck(arg, Compile::initializeClass, 1)))
          return NULL;
        return t_Compile::wrap_Object(Compile(((t_Compile *) arg)->object.this$));
      }
      static PyObject *t_Compile_instance_(PyTypeObject *type, PyObject *arg)
      {
        if (!castCheck(arg, Compile::initializeClass, 0))
          Py_RETURN_FALSE;
        Py_RETURN_TRUE;
      }

      static PyObject *t_Compile_main(PyTypeObject *type, PyObject *arg)
      {
        JArray< ::java::lang::String > a0((jobject) NULL);

        if (!parseArg(arg, "[s", &a0))
        {
          OBJ_CALL(::org::egothor::stemmer::Compile::main(a0));
          Py_RETURN_NONE;
        }

        PyErr_SetArgsError(type, "main", arg);
        return NULL;
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/spell/SuggestWordFrequencyComparator.h"
#include "org/apache/lucene/search/spell/SuggestWord.h"
#include "java/util/Comparator.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace spell {

          ::java::lang::Class *SuggestWordFrequencyComparator::class$ = NULL;
          jmethodID *SuggestWordFrequencyComparator::mids$ = NULL;
          bool SuggestWordFrequencyComparator::live$ = false;

          jclass SuggestWordFrequencyComparator::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/search/spell/SuggestWordFrequencyComparator");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_f2cc1bce94666404] = env->getMethodID(cls, "<init>", "()V");
              mids$[mid_compare_b877b48a0c3b8cb1] = env->getMethodID(cls, "compare", "(Lorg/apache/lucene/search/spell/SuggestWord;Lorg/apache/lucene/search/spell/SuggestWord;)I");

              class$ = new ::java::lang::Class(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          SuggestWordFrequencyComparator::SuggestWordFrequencyComparator() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_f2cc1bce94666404)) {}

          jint SuggestWordFrequencyComparator::compare(const ::org::apache::lucene::search::spell::SuggestWord & a0, const ::org::apache::lucene::search::spell::SuggestWord & a1) const
          {
            return env->callIntMethod(this$, mids$[mid_compare_b877b48a0c3b8cb1], a0.this$, a1.this$);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace spell {
          static PyObject *t_SuggestWordFrequencyComparator_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_SuggestWordFrequencyComparator_instance_(PyTypeObject *type, PyObject *arg);
          static int t_SuggestWordFrequencyComparator_init_(t_SuggestWordFrequencyComparator *self, PyObject *args, PyObject *kwds);
          static PyObject *t_SuggestWordFrequencyComparator_compare(t_SuggestWordFrequencyComparator *self, PyObject *args);

          static PyMethodDef t_SuggestWordFrequencyComparator__methods_[] = {
            DECLARE_METHOD(t_SuggestWordFrequencyComparator, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_SuggestWordFrequencyComparator, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_SuggestWordFrequencyComparator, compare, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          static PyType_Slot PY_TYPE_SLOTS(SuggestWordFrequencyComparator)[] = {
            { Py_tp_methods, t_SuggestWordFrequencyComparator__methods_ },
            { Py_tp_init, (void *) t_SuggestWordFrequencyComparator_init_ },
            { 0, NULL }
          };

          static PyType_Def *PY_TYPE_BASES(SuggestWordFrequencyComparator)[] = {
            &PY_TYPE_DEF(::java::lang::Object),
            NULL
          };

          DEFINE_TYPE(SuggestWordFrequencyComparator, t_SuggestWordFrequencyComparator, SuggestWordFrequencyComparator);

          void t_SuggestWordFrequencyComparator::install(PyObject *module)
          {
            installType(&PY_TYPE(SuggestWordFrequencyComparator), &PY_TYPE_DEF(SuggestWordFrequencyComparator), module, "SuggestWordFrequencyComparator", 0);
          }

          void t_SuggestWordFrequencyComparator::initialize(PyObject *module)
          {
            PyObject_SetAttrString((PyObject *) PY_TYPE(SuggestWordFrequencyComparator), "class_", make_descriptor(SuggestWordFrequencyComparator::initializeClass, 1));
            PyObject_SetAttrString((PyObject *) PY_TYPE(SuggestWordFrequencyComparator), "wrapfn_", make_descriptor(t_SuggestWordFrequencyComparator::wrap_jobject));
            PyObject_SetAttrString((PyObject *) PY_TYPE(SuggestWordFrequencyComparator), "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_SuggestWordFrequencyComparator_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, SuggestWordFrequencyComparator::initializeClass, 1)))
              return NULL;
            return t_SuggestWordFrequencyComparator::wrap_Object(SuggestWordFrequencyComparator(((t_SuggestWordFrequencyComparator *) arg)->object.this$));
          }
          static PyObject *t_SuggestWordFrequencyComparator_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, SuggestWordFrequencyComparator::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_SuggestWordFrequencyComparator_init_(t_SuggestWordFrequencyComparator *self, PyObject *args, PyObject *kwds)
          {
            SuggestWordFrequencyComparator object((jobject) NULL);

            INT_CALL(object = SuggestWordFrequencyComparator());
            self->object = object;

            return 0;
          }

          static PyObject *t_SuggestWordFrequencyComparator_compare(t_SuggestWordFrequencyComparator *self, PyObject *args)
          {
            ::org::apache::lucene::search::spell::SuggestWord a0((jobject) NULL);
            ::org::apache::lucene::search::spell::SuggestWord a1((jobject) NULL);
            jint result;

            if (!parseArgs(args, "kk", ::org::apache::lucene::search::spell::SuggestWord::initializeClass, ::org::apache::lucene::search::spell::SuggestWord::initializeClass, &a0, &a1))
            {
              OBJ_CALL(result = self->object.compare(a0, a1));
              return PyLong_FromLong((long) result);
            }

            PyErr_SetArgsError((PyObject *) self, "compare", args);
            return NULL;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/DelegatingAnalyzerWrapper.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {

        ::java::lang::Class *DelegatingAnalyzerWrapper::class$ = NULL;
        jmethodID *DelegatingAnalyzerWrapper::mids$ = NULL;
        bool DelegatingAnalyzerWrapper::live$ = false;

        jclass DelegatingAnalyzerWrapper::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/DelegatingAnalyzerWrapper");

            mids$ = new jmethodID[max_mid];
            mids$[mid_wrapTokenStreamForNormalization_e597989422f66fcd] = env->getMethodID(cls, "wrapTokenStreamForNormalization", "(Ljava/lang/String;Lorg/apache/lucene/analysis/TokenStream;)Lorg/apache/lucene/analysis/TokenStream;");
            mids$[mid_wrapReaderForNormalization_8dbb4487391277c7] = env->getMethodID(cls, "wrapReaderForNormalization", "(Ljava/lang/String;Ljava/io/Reader;)Ljava/io/Reader;");
            mids$[mid_wrapComponents_ad8b4daa4250cd99] = env->getMethodID(cls, "wrapComponents", "(Ljava/lang/String;Lorg/apache/lucene/analysis/Analyzer$TokenStreamComponents;)Lorg/apache/lucene/analysis/Analyzer$TokenStreamComponents;");
            mids$[mid_wrapReader_8dbb4487391277c7] = env->getMethodID(cls, "wrapReader", "(Ljava/lang/String;Ljava/io/Reader;)Ljava/io/Reader;");

            class$ = new ::java::lang::Class(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        static PyObject *t_DelegatingAnalyzerWrapper_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_DelegatingAnalyzerWrapper_instance_(PyTypeObject *type, PyObject *arg);

        static PyMethodDef t_DelegatingAnalyzerWrapper__methods_[] = {
          DECLARE_METHOD(t_DelegatingAnalyzerWrapper, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_DelegatingAnalyzerWrapper, instance_, METH_O | METH_CLASS),
          { NULL, NULL, 0, NULL }
        };

        static PyType_Slot PY_TYPE_SLOTS(DelegatingAnalyzerWrapper)[] = {
          { Py_tp_methods, t_DelegatingAnalyzerWrapper__methods_ },
          { Py_tp_init, (void *) abstract_init },
          { 0, NULL }
        };

        static PyType_Def *PY_TYPE_BASES(DelegatingAnalyzerWrapper)[] = {
          &PY_TYPE_DEF(::org::apache::lucene::analysis::AnalyzerWrapper),
          NULL
        };

        DEFINE_TYPE(DelegatingAnalyzerWrapper, t_DelegatingAnalyzerWrapper, DelegatingAnalyzerWrapper);

        void t_DelegatingAnalyzerWrapper::install(PyObject *module)
        {
          installType(&PY_TYPE(DelegatingAnalyzerWrapper), &PY_TYPE_DEF(DelegatingAnalyzerWrapper), module, "DelegatingAnalyzerWrapper", 0);
        }

        void t_DelegatingAnalyzerWrapper::initialize(PyObject *module)
        {
          PyObject_SetAttrString((PyObject *) PY_TYPE(DelegatingAnalyzerWrapper), "class_", make_descriptor(DelegatingAnalyzerWrapper::initializeClass, 1));
          PyObject_SetAttrString((PyObject *) PY_TYPE(DelegatingAnalyzerWrapper), "wrapfn_", make_descriptor(t_DelegatingAnalyzerWrapper::wrap_jobject));
          PyObject_SetAttrString((PyObject *) PY_TYPE(DelegatingAnalyzerWrapper), "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_DelegatingAnalyzerWrapper_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, DelegatingAnalyzerWrapper::initializeClass, 1)))
            return NULL;
          return t_DelegatingAnalyzerWrapper::wrap_Object(DelegatingAnalyzerWrapper(((t_DelegatingAnalyzerWrapper *) arg)->object.this$));
        }
        static PyObject *t_DelegatingAnalyzerWrapper_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, DelegatingAnalyzerWrapper::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/path/PathHierarchyTokenizerFactory.h"
#include "org/apache/lucene/util/AttributeFactory.h"
#include "java/util/Map.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/analysis/Tokenizer.h"
#include "java/lang/String.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace path {

          ::java::lang::Class *PathHierarchyTokenizerFactory::class$ = NULL;
          jmethodID *PathHierarchyTokenizerFactory::mids$ = NULL;
          bool PathHierarchyTokenizerFactory::live$ = false;
          ::java::lang::String *PathHierarchyTokenizerFactory::NAME = NULL;

          jclass PathHierarchyTokenizerFactory::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/path/PathHierarchyTokenizerFactory");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_408bd889ee3beae5] = env->getMethodID(cls, "<init>", "(Ljava/util/Map;)V");
              mids$[mid_create_824583f10752bea9] = env->getMethodID(cls, "create", "(Lorg/apache/lucene/util/AttributeFactory;)Lorg/apache/lucene/analysis/Tokenizer;");

              class$ = new ::java::lang::Class(cls);
              cls = (jclass) class$->this$;

              NAME = new ::java::lang::String(env->getStaticObjectField(cls, "NAME", "Ljava/lang/String;"));
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          PathHierarchyTokenizerFactory::PathHierarchyTokenizerFactory(const ::java::util::Map & a0) : ::org::apache::lucene::analysis::util::TokenizerFactory(env->newObject(initializeClass, &mids$, mid_init$_408bd889ee3beae5, a0.this$)) {}

          ::org::apache::lucene::analysis::Tokenizer PathHierarchyTokenizerFactory::create(const ::org::apache::lucene::util::AttributeFactory & a0) const
          {
            return ::org::apache::lucene::analysis::Tokenizer(env->callObjectMethod(this$, mids$[mid_create_824583f10752bea9], a0.this$));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace path {
          static PyObject *t_PathHierarchyTokenizerFactory_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_PathHierarchyTokenizerFactory_instance_(PyTypeObject *type, PyObject *arg);
          static int t_PathHierarchyTokenizerFactory_init_(t_PathHierarchyTokenizerFactory *self, PyObject *args, PyObject *kwds);
          static PyObject *t_PathHierarchyTokenizerFactory_create(t_PathHierarchyTokenizerFactory *self, PyObject *args);

          static PyMethodDef t_PathHierarchyTokenizerFactory__methods_[] = {
            DECLARE_METHOD(t_PathHierarchyTokenizerFactory, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_PathHierarchyTokenizerFactory, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_PathHierarchyTokenizerFactory, create, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          static PyType_Slot PY_TYPE_SLOTS(PathHierarchyTokenizerFactory)[] = {
            { Py_tp_methods, t_PathHierarchyTokenizerFactory__methods_ },
            { Py_tp_init, (void *) t_PathHierarchyTokenizerFactory_init_ },
            { 0, NULL }
          };

          static PyType_Def *PY_TYPE_BASES(PathHierarchyTokenizerFactory)[] = {
            &PY_TYPE_DEF(::org::apache::lucene::analysis::util::TokenizerFactory),
            NULL
          };

          DEFINE_TYPE(PathHierarchyTokenizerFactory, t_PathHierarchyTokenizerFactory, PathHierarchyTokenizerFactory);

          void t_PathHierarchyTokenizerFactory::install(PyObject *module)
          {
            installType(&PY_TYPE(PathHierarchyTokenizerFactory), &PY_TYPE_DEF(PathHierarchyTokenizerFactory), module, "PathHierarchyTokenizerFactory", 0);
          }

          void t_PathHierarchyTokenizerFactory::initialize(PyObject *module)
          {
            PyObject_SetAttrString((PyObject *) PY_TYPE(PathHierarchyTokenizerFactory), "class_", make_descriptor(PathHierarchyTokenizerFactory::initializeClass, 1));
            PyObject_SetAttrString((PyObject *) PY_TYPE(PathHierarchyTokenizerFactory), "wrapfn_", make_descriptor(t_PathHierarchyTokenizerFactory::wrap_jobject));
            PyObject_SetAttrString((PyObject *) PY_TYPE(PathHierarchyTokenizerFactory), "boxfn_", make_descriptor(boxObject));
            env->getClass(PathHierarchyTokenizerFactory::initializeClass);
            PyObject_SetAttrString((PyObject *) PY_TYPE(PathHierarchyTokenizerFactory), "NAME", make_descriptor(j2p(*PathHierarchyTokenizerFactory::NAME)));
          }

          static PyObject *t_PathHierarchyTokenizerFactory_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, PathHierarchyTokenizerFactory::initializeClass, 1)))
              return NULL;
            return t_PathHierarchyTokenizerFactory::wrap_Object(PathHierarchyTokenizerFactory(((t_PathHierarchyTokenizerFactory *) arg)->object.this$));
          }
          static PyObject *t_PathHierarchyTokenizerFactory_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, PathHierarchyTokenizerFactory::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_PathHierarchyTokenizerFactory_init_(t_PathHierarchyTokenizerFactory *self, PyObject *args, PyObject *kwds)
          {
            ::java::util::Map a0((jobject) NULL);
            PyTypeObject **p0;
            PathHierarchyTokenizerFactory object((jobject) NULL);

            if (!parseArgs(args, "K", ::java::util::Map::initializeClass, &a0, &p0, ::java::util::t_Map::parameters_))
            {
              INT_CALL(object = PathHierarchyTokenizerFactory(a0));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_PathHierarchyTokenizerFactory_create(t_PathHierarchyTokenizerFactory *self, PyObject *args)
          {
            ::org::apache::lucene::util::AttributeFactory a0((jobject) NULL);
            ::org::apache::lucene::analysis::Tokenizer result((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::util::AttributeFactory::initializeClass, &a0))
            {
              OBJ_CALL(result = self->object.create(a0));
              return ::org::apache::lucene::analysis::t_Tokenizer::wrap_Object(result);
            }

            return callSuper(PY_TYPE(PathHierarchyTokenizerFactory), (PyObject *) self, "create", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/util/AttributeSource$State.h"
#include "org/apache/lucene/util/AttributeSource$State.h"
#include "java/lang/Cloneable.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {

        ::java::lang::Class *AttributeSource$State::class$ = NULL;
        jmethodID *AttributeSource$State::mids$ = NULL;
        bool AttributeSource$State::live$ = false;

        jclass AttributeSource$State::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/util/AttributeSource$State");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_f2cc1bce94666404] = env->getMethodID(cls, "<init>", "()V");
            mids$[mid_clone_e576d345b9d7fa00] = env->getMethodID(cls, "clone", "()Lorg/apache/lucene/util/AttributeSource$State;");

            class$ = new ::java::lang::Class(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        AttributeSource$State::AttributeSource$State() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_f2cc1bce94666404)) {}

        AttributeSource$State AttributeSource$State::clone() const
        {
          return AttributeSource$State(env->callObjectMethod(this$, mids$[mid_clone_e576d345b9d7fa00]));
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        static PyObject *t_AttributeSource$State_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_AttributeSource$State_instance_(PyTypeObject *type, PyObject *arg);
        static int t_AttributeSource$State_init_(t_AttributeSource$State *self, PyObject *args, PyObject *kwds);
        static PyObject *t_AttributeSource$State_clone(t_AttributeSource$State *self);

        static PyMethodDef t_AttributeSource$State__methods_[] = {
          DECLARE_METHOD(t_AttributeSource$State, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_AttributeSource$State, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_AttributeSource$State, clone, METH_NOARGS),
          { NULL, NULL, 0, NULL }
        };

        static PyType_Slot PY_TYPE_SLOTS(AttributeSource$State)[] = {
          { Py_tp_methods, t_AttributeSource$State__methods_ },
          { Py_tp_init, (void *) t_AttributeSource$State_init_ },
          { 0, NULL }
        };

        static PyType_Def *PY_TYPE_BASES(AttributeSource$State)[] = {
          &PY_TYPE_DEF(::java::lang::Object),
          NULL
        };

        DEFINE_TYPE(AttributeSource$State, t_AttributeSource$State, AttributeSource$State);

        void t_AttributeSource$State::install(PyObject *module)
        {
          installType(&PY_TYPE(AttributeSource$State), &PY_TYPE_DEF(AttributeSource$State), module, "AttributeSource$State", 0);
        }

        void t_AttributeSource$State::initialize(PyObject *module)
        {
          PyObject_SetAttrString((PyObject *) PY_TYPE(AttributeSource$State), "class_", make_descriptor(AttributeSource$State::initializeClass, 1));
          PyObject_SetAttrString((PyObject *) PY_TYPE(AttributeSource$State), "wrapfn_", make_descriptor(t_AttributeSource$State::wrap_jobject));
          PyObject_SetAttrString((PyObject *) PY_TYPE(AttributeSource$State), "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_AttributeSource$State_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, AttributeSource$State::initializeClass, 1)))
            return NULL;
          return t_AttributeSource$State::wrap_Object(AttributeSource$State(((t_AttributeSource$State *) arg)->object.this$));
        }
        static PyObject *t_AttributeSource$State_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, AttributeSource$State::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_AttributeSource$State_init_(t_AttributeSource$State *self, PyObject *args, PyObject *kwds)
        {
          AttributeSource$State object((jobject) NULL);

          INT_CALL(object = AttributeSource$State());
          self->object = object;

          return 0;
        }

        static PyObject *t_AttributeSource$State_clone(t_AttributeSource$State *self)
        {
          AttributeSource$State result((jobject) NULL);
          OBJ_CALL(result = self->object.clone());
          return t_AttributeSource$State::wrap_Object(result);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/facet/taxonomy/DocValuesOrdinalsReader.h"
#include "org/apache/lucene/util/IntsRef.h"
#include "org/apache/lucene/index/LeafReaderContext.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/facet/taxonomy/OrdinalsReader$OrdinalsSegmentReader.h"
#include "org/apache/lucene/util/BytesRef.h"
#include "java/lang/String.h"
#include "java/io/IOException.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace facet {
        namespace taxonomy {

          ::java::lang::Class *DocValuesOrdinalsReader::class$ = NULL;
          jmethodID *DocValuesOrdinalsReader::mids$ = NULL;
          bool DocValuesOrdinalsReader::live$ = false;

          jclass DocValuesOrdinalsReader::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/facet/taxonomy/DocValuesOrdinalsReader");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_f2cc1bce94666404] = env->getMethodID(cls, "<init>", "()V");
              mids$[mid_init$_9fd2eb66a64e6f0f] = env->getMethodID(cls, "<init>", "(Ljava/lang/String;)V");
              mids$[mid_decode_930a84cc4b64ce1b] = env->getMethodID(cls, "decode", "(Lorg/apache/lucene/util/BytesRef;Lorg/apache/lucene/util/IntsRef;)V");
              mids$[mid_getIndexFieldName_db9b55ba01e03e4b] = env->getMethodID(cls, "getIndexFieldName", "()Ljava/lang/String;");
              mids$[mid_getReader_ff225b04fcdc6f32] = env->getMethodID(cls, "getReader", "(Lorg/apache/lucene/index/LeafReaderContext;)Lorg/apache/lucene/facet/taxonomy/OrdinalsReader$OrdinalsSegmentReader;");

              class$ = new ::java::lang::Class(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          DocValuesOrdinalsReader::DocValuesOrdinalsReader() : ::org::apache::lucene::facet::taxonomy::OrdinalsReader(env->newObject(initializeClass, &mids$, mid_init$_f2cc1bce94666404)) {}

          DocValuesOrdinalsReader::DocValuesOrdinalsReader(const ::java::lang::String & a0) : ::org::apache::lucene::facet::taxonomy::OrdinalsReader(env->newObject(initializeClass, &mids$, mid_init$_9fd2eb66a64e6f0f, a0.this$)) {}

          void DocValuesOrdinalsReader::decode(const ::org::apache::lucene::util::BytesRef & a0, const ::org::apache::lucene::util::IntsRef & a1) const
          {
            env->callVoidMethod(this$, mids$[mid_decode_930a84cc4b64ce1b], a0.this$, a1.this$);
          }

          ::java::lang::String DocValuesOrdinalsReader::getIndexFieldName() const
          {
            return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_getIndexFieldName_db9b55ba01e03e4b]));
          }

          ::org::apache::lucene::facet::taxonomy::OrdinalsReader$OrdinalsSegmentReader DocValuesOrdinalsReader::getReader(const ::org::apache::lucene::index::LeafReaderContext & a0) const
          {
            return ::org::apache::lucene::facet::taxonomy::OrdinalsReader$OrdinalsSegmentReader(env->callObjectMethod(this$, mids$[mid_getReader_ff225b04fcdc6f32], a0.this$));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace facet {
        namespace taxonomy {
          static PyObject *t_DocValuesOrdinalsReader_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_DocValuesOrdinalsReader_instance_(PyTypeObject *type, PyObject *arg);
          static int t_DocValuesOrdinalsReader_init_(t_DocValuesOrdinalsReader *self, PyObject *args, PyObject *kwds);
          static PyObject *t_DocValuesOrdinalsReader_decode(t_DocValuesOrdinalsReader *self, PyObject *args);
          static PyObject *t_DocValuesOrdinalsReader_getIndexFieldName(t_DocValuesOrdinalsReader *self, PyObject *args);
          static PyObject *t_DocValuesOrdinalsReader_getReader(t_DocValuesOrdinalsReader *self, PyObject *args);
          static PyObject *t_DocValuesOrdinalsReader_get__indexFieldName(t_DocValuesOrdinalsReader *self, void *data);
          static PyGetSetDef t_DocValuesOrdinalsReader__fields_[] = {
            DECLARE_GET_FIELD(t_DocValuesOrdinalsReader, indexFieldName),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_DocValuesOrdinalsReader__methods_[] = {
            DECLARE_METHOD(t_DocValuesOrdinalsReader, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_DocValuesOrdinalsReader, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_DocValuesOrdinalsReader, decode, METH_VARARGS),
            DECLARE_METHOD(t_DocValuesOrdinalsReader, getIndexFieldName, METH_VARARGS),
            DECLARE_METHOD(t_DocValuesOrdinalsReader, getReader, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          static PyType_Slot PY_TYPE_SLOTS(DocValuesOrdinalsReader)[] = {
            { Py_tp_methods, t_DocValuesOrdinalsReader__methods_ },
            { Py_tp_init, (void *) t_DocValuesOrdinalsReader_init_ },
            { Py_tp_getset, t_DocValuesOrdinalsReader__fields_ },
            { 0, NULL }
          };

          static PyType_Def *PY_TYPE_BASES(DocValuesOrdinalsReader)[] = {
            &PY_TYPE_DEF(::org::apache::lucene::facet::taxonomy::OrdinalsReader),
            NULL
          };

          DEFINE_TYPE(DocValuesOrdinalsReader, t_DocValuesOrdinalsReader, DocValuesOrdinalsReader);

          void t_DocValuesOrdinalsReader::install(PyObject *module)
          {
            installType(&PY_TYPE(DocValuesOrdinalsReader), &PY_TYPE_DEF(DocValuesOrdinalsReader), module, "DocValuesOrdinalsReader", 0);
          }

          void t_DocValuesOrdinalsReader::initialize(PyObject *module)
          {
            PyObject_SetAttrString((PyObject *) PY_TYPE(DocValuesOrdinalsReader), "class_", make_descriptor(DocValuesOrdinalsReader::initializeClass, 1));
            PyObject_SetAttrString((PyObject *) PY_TYPE(DocValuesOrdinalsReader), "wrapfn_", make_descriptor(t_DocValuesOrdinalsReader::wrap_jobject));
            PyObject_SetAttrString((PyObject *) PY_TYPE(DocValuesOrdinalsReader), "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_DocValuesOrdinalsReader_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, DocValuesOrdinalsReader::initializeClass, 1)))
              return NULL;
            return t_DocValuesOrdinalsReader::wrap_Object(DocValuesOrdinalsReader(((t_DocValuesOrdinalsReader *) arg)->object.this$));
          }
          static PyObject *t_DocValuesOrdinalsReader_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, DocValuesOrdinalsReader::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_DocValuesOrdinalsReader_init_(t_DocValuesOrdinalsReader *self, PyObject *args, PyObject *kwds)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 0:
              {
                DocValuesOrdinalsReader object((jobject) NULL);

                INT_CALL(object = DocValuesOrdinalsReader());
                self->object = object;
                break;
              }
             case 1:
              {
                ::java::lang::String a0((jobject) NULL);
                DocValuesOrdinalsReader object((jobject) NULL);

                if (!parseArgs(args, "s", &a0))
                {
                  INT_CALL(object = DocValuesOrdinalsReader(a0));
                  self->object = object;
                  break;
                }
              }
             default:
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_DocValuesOrdinalsReader_decode(t_DocValuesOrdinalsReader *self, PyObject *args)
          {
            ::org::apache::lucene::util::BytesRef a0((jobject) NULL);
            ::org::apache::lucene::util::IntsRef a1((jobject) NULL);

            if (!parseArgs(args, "kk", ::org::apache::lucene::util::BytesRef::initializeClass, ::org::apache::lucene::util::IntsRef::initializeClass, &a0, &a1))
            {
              OBJ_CALL(self->object.decode(a0, a1));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError((PyObject *) self, "decode", args);
            return NULL;
          }

          static PyObject *t_DocValuesOrdinalsReader_getIndexFieldName(t_DocValuesOrdinalsReader *self, PyObject *args)
          {
            ::java::lang::String result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.getIndexFieldName());
              return j2p(result);
            }

            return callSuper(PY_TYPE(DocValuesOrdinalsReader), (PyObject *) self, "getIndexFieldName", args, 2);
          }

          static PyObject *t_DocValuesOrdinalsReader_getReader(t_DocValuesOrdinalsReader *self, PyObject *args)
          {
            ::org::apache::lucene::index::LeafReaderContext a0((jobject) NULL);
            ::org::apache::lucene::facet::taxonomy::OrdinalsReader$OrdinalsSegmentReader result((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::index::LeafReaderContext::initializeClass, &a0))
            {
              OBJ_CALL(result = self->object.getReader(a0));
              return ::org::apache::lucene::facet::taxonomy::t_OrdinalsReader$OrdinalsSegmentReader::wrap_Object(result);
            }

            return callSuper(PY_TYPE(DocValuesOrdinalsReader), (PyObject *) self, "getReader", args, 2);
          }

          static PyObject *t_DocValuesOrdinalsReader_get__indexFieldName(t_DocValuesOrdinalsReader *self, void *data)
          {
            ::java::lang::String value((jobject) NULL);
            OBJ_CALL(value = self->object.getIndexFieldName());
            return j2p(value);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/AnalyzerWrapper.h"
#include "java/lang/String.h"
#include "java/io/Reader.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {

        ::java::lang::Class *AnalyzerWrapper::class$ = NULL;
        jmethodID *AnalyzerWrapper::mids$ = NULL;
        bool AnalyzerWrapper::live$ = false;

        jclass AnalyzerWrapper::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/AnalyzerWrapper");

            mids$ = new jmethodID[max_mid];
            mids$[mid_getOffsetGap_a5a7d1128e9e2bb7] = env->getMethodID(cls, "getOffsetGap", "(Ljava/lang/String;)I");
            mids$[mid_getPositionIncrementGap_a5a7d1128e9e2bb7] = env->getMethodID(cls, "getPositionIncrementGap", "(Ljava/lang/String;)I");
            mids$[mid_initReader_8dbb4487391277c7] = env->getMethodID(cls, "initReader", "(Ljava/lang/String;Ljava/io/Reader;)Ljava/io/Reader;");
            mids$[mid_attributeFactory_11e9c67770fe4372] = env->getMethodID(cls, "attributeFactory", "(Ljava/lang/String;)Lorg/apache/lucene/util/AttributeFactory;");
            mids$[mid_createComponents_c22fd244b0553c1e] = env->getMethodID(cls, "createComponents", "(Ljava/lang/String;)Lorg/apache/lucene/analysis/Analyzer$TokenStreamComponents;");
            mids$[mid_initReaderForNormalization_8dbb4487391277c7] = env->getMethodID(cls, "initReaderForNormalization", "(Ljava/lang/String;Ljava/io/Reader;)Ljava/io/Reader;");
            mids$[mid_getWrappedAnalyzer_dad9f41704206408] = env->getMethodID(cls, "getWrappedAnalyzer", "(Ljava/lang/String;)Lorg/apache/lucene/analysis/Analyzer;");
            mids$[mid_wrapTokenStreamForNormalization_e597989422f66fcd] = env->getMethodID(cls, "wrapTokenStreamForNormalization", "(Ljava/lang/String;Lorg/apache/lucene/analysis/TokenStream;)Lorg/apache/lucene/analysis/TokenStream;");
            mids$[mid_wrapReaderForNormalization_8dbb4487391277c7] = env->getMethodID(cls, "wrapReaderForNormalization", "(Ljava/lang/String;Ljava/io/Reader;)Ljava/io/Reader;");
            mids$[mid_wrapComponents_ad8b4daa4250cd99] = env->getMethodID(cls, "wrapComponents", "(Ljava/lang/String;Lorg/apache/lucene/analysis/Analyzer$TokenStreamComponents;)Lorg/apache/lucene/analysis/Analyzer$TokenStreamComponents;");
            mids$[mid_wrapReader_8dbb4487391277c7] = env->getMethodID(cls, "wrapReader", "(Ljava/lang/String;Ljava/io/Reader;)Ljava/io/Reader;");
            mids$[mid_normalize_e597989422f66fcd] = env->getMethodID(cls, "normalize", "(Ljava/lang/String;Lorg/apache/lucene/analysis/TokenStream;)Lorg/apache/lucene/analysis/TokenStream;");

            class$ = new ::java::lang::Class(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        jint AnalyzerWrapper::getOffsetGap(const ::java::lang::String & a0) const
        {
          return env->callIntMethod(this$, mids$[mid_getOffsetGap_a5a7d1128e9e2bb7], a0.this$);
        }

        jint AnalyzerWrapper::getPositionIncrementGap(const ::java::lang::String & a0) const
        {
          return env->callIntMethod(this$, mids$[mid_getPositionIncrementGap_a5a7d1128e9e2bb7], a0.this$);
        }

        ::java::io::Reader AnalyzerWrapper::initReader(const ::java::lang::String & a0, const ::java::io::Reader & a1) const
        {
          return ::java::io::Reader(env->callObjectMethod(this$, mids$[mid_initReader_8dbb4487391277c7], a0.this$, a1.this$));
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        static PyObject *t_AnalyzerWrapper_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_AnalyzerWrapper_instance_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_AnalyzerWrapper_getOffsetGap(t_AnalyzerWrapper *self, PyObject *args);
        static PyObject *t_AnalyzerWrapper_getPositionIncrementGap(t_AnalyzerWrapper *self, PyObject *args);
        static PyObject *t_AnalyzerWrapper_initReader(t_AnalyzerWrapper *self, PyObject *args);

        static PyMethodDef t_AnalyzerWrapper__methods_[] = {
          DECLARE_METHOD(t_AnalyzerWrapper, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_AnalyzerWrapper, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_AnalyzerWrapper, getOffsetGap, METH_VARARGS),
          DECLARE_METHOD(t_AnalyzerWrapper, getPositionIncrementGap, METH_VARARGS),
          DECLARE_METHOD(t_AnalyzerWrapper, initReader, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        static PyType_Slot PY_TYPE_SLOTS(AnalyzerWrapper)[] = {
          { Py_tp_methods, t_AnalyzerWrapper__methods_ },
          { Py_tp_init, (void *) abstract_init },
          { 0, NULL }
        };

        static PyType_Def *PY_TYPE_BASES(AnalyzerWrapper)[] = {
          &PY_TYPE_DEF(::org::apache::lucene::analysis::Analyzer),
          NULL
        };

        DEFINE_TYPE(AnalyzerWrapper, t_AnalyzerWrapper, AnalyzerWrapper);

        void t_AnalyzerWrapper::install(PyObject *module)
        {
          installType(&PY_TYPE(AnalyzerWrapper), &PY_TYPE_DEF(AnalyzerWrapper), module, "AnalyzerWrapper", 0);
        }

        void t_AnalyzerWrapper::initialize(PyObject *module)
        {
          PyObject_SetAttrString((PyObject *) PY_TYPE(AnalyzerWrapper), "class_", make_descriptor(AnalyzerWrapper::initializeClass, 1));
          PyObject_SetAttrString((PyObject *) PY_TYPE(AnalyzerWrapper), "wrapfn_", make_descriptor(t_AnalyzerWrapper::wrap_jobject));
          PyObject_SetAttrString((PyObject *) PY_TYPE(AnalyzerWrapper), "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_AnalyzerWrapper_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, AnalyzerWrapper::initializeClass, 1)))
            return NULL;
          return t_AnalyzerWrapper::wrap_Object(AnalyzerWrapper(((t_AnalyzerWrapper *) arg)->object.this$));
        }
        static PyObject *t_AnalyzerWrapper_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, AnalyzerWrapper::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static PyObject *t_AnalyzerWrapper_getOffsetGap(t_AnalyzerWrapper *self, PyObject *args)
        {
          ::java::lang::String a0((jobject) NULL);
          jint result;

          if (!parseArgs(args, "s", &a0))
          {
            OBJ_CALL(result = self->object.getOffsetGap(a0));
            return PyLong_FromLong((long) result);
          }

          return callSuper(PY_TYPE(AnalyzerWrapper), (PyObject *) self, "getOffsetGap", args, 2);
        }

        static PyObject *t_AnalyzerWrapper_getPositionIncrementGap(t_AnalyzerWrapper *self, PyObject *args)
        {
          ::java::lang::String a0((jobject) NULL);
          jint result;

          if (!parseArgs(args, "s", &a0))
          {
            OBJ_CALL(result = self->object.getPositionIncrementGap(a0));
            return PyLong_FromLong((long) result);
          }

          return callSuper(PY_TYPE(AnalyzerWrapper), (PyObject *) self, "getPositionIncrementGap", args, 2);
        }

        static PyObject *t_AnalyzerWrapper_initReader(t_AnalyzerWrapper *self, PyObject *args)
        {
          ::java::lang::String a0((jobject) NULL);
          ::java::io::Reader a1((jobject) NULL);
          ::java::io::Reader result((jobject) NULL);

          if (!parseArgs(args, "sk", ::java::io::Reader::initializeClass, &a0, &a1))
          {
            OBJ_CALL(result = self->object.initReader(a0, a1));
            return ::java::io::t_Reader::wrap_Object(result);
          }

          PyErr_SetArgsError((PyObject *) self, "initReader", args);
          return NULL;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/en/KStemFilterFactory.h"
#include "java/util/Map.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/analysis/TokenStream.h"
#include "org/apache/lucene/analysis/TokenFilter.h"
#include "java/lang/String.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace en {

          ::java::lang::Class *KStemFilterFactory::class$ = NULL;
          jmethodID *KStemFilterFactory::mids$ = NULL;
          bool KStemFilterFactory::live$ = false;
          ::java::lang::String *KStemFilterFactory::NAME = NULL;

          jclass KStemFilterFactory::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/en/KStemFilterFactory");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_408bd889ee3beae5] = env->getMethodID(cls, "<init>", "(Ljava/util/Map;)V");
              mids$[mid_create_4366615ad7077dae] = env->getMethodID(cls, "create", "(Lorg/apache/lucene/analysis/TokenStream;)Lorg/apache/lucene/analysis/TokenFilter;");

              class$ = new ::java::lang::Class(cls);
              cls = (jclass) class$->this$;

              NAME = new ::java::lang::String(env->getStaticObjectField(cls, "NAME", "Ljava/lang/String;"));
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          KStemFilterFactory::KStemFilterFactory(const ::java::util::Map & a0) : ::org::apache::lucene::analysis::util::TokenFilterFactory(env->newObject(initializeClass, &mids$, mid_init$_408bd889ee3beae5, a0.this$)) {}

          ::org::apache::lucene::analysis::TokenFilter KStemFilterFactory::create(const ::org::apache::lucene::analysis::TokenStream & a0) const
          {
            return ::org::apache::lucene::analysis::TokenFilter(env->callObjectMethod(this$, mids$[mid_create_4366615ad7077dae], a0.this$));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace en {
          static PyObject *t_KStemFilterFactory_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_KStemFilterFactory_instance_(PyTypeObject *type, PyObject *arg);
          static int t_KStemFilterFactory_init_(t_KStemFilterFactory *self, PyObject *args, PyObject *kwds);
          static PyObject *t_KStemFilterFactory_create(t_KStemFilterFactory *self, PyObject *args);

          static PyMethodDef t_KStemFilterFactory__methods_[] = {
            DECLARE_METHOD(t_KStemFilterFactory, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_KStemFilterFactory, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_KStemFilterFactory, create, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          static PyType_Slot PY_TYPE_SLOTS(KStemFilterFactory)[] = {
            { Py_tp_methods, t_KStemFilterFactory__methods_ },
            { Py_tp_init, (void *) t_KStemFilterFactory_init_ },
            { 0, NULL }
          };

          static PyType_Def *PY_TYPE_BASES(KStemFilterFactory)[] = {
            &PY_TYPE_DEF(::org::apache::lucene::analysis::util::TokenFilterFactory),
            NULL
          };

          DEFINE_TYPE(KStemFilterFactory, t_KStemFilterFactory, KStemFilterFactory);

          void t_KStemFilterFactory::install(PyObject *module)
          {
            installType(&PY_TYPE(KStemFilterFactory), &PY_TYPE_DEF(KStemFilterFactory), module, "KStemFilterFactory", 0);
          }

          void t_KStemFilterFactory::initialize(PyObject *module)
          {
            PyObject_SetAttrString((PyObject *) PY_TYPE(KStemFilterFactory), "class_", make_descriptor(KStemFilterFactory::initializeClass, 1));
            PyObject_SetAttrString((PyObject *) PY_TYPE(KStemFilterFactory), "wrapfn_", make_descriptor(t_KStemFilterFactory::wrap_jobject));
            PyObject_SetAttrString((PyObject *) PY_TYPE(KStemFilterFactory), "boxfn_", make_descriptor(boxObject));
            env->getClass(KStemFilterFactory::initializeClass);
            PyObject_SetAttrString((PyObject *) PY_TYPE(KStemFilterFactory), "NAME", make_descriptor(j2p(*KStemFilterFactory::NAME)));
          }

          static PyObject *t_KStemFilterFactory_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, KStemFilterFactory::initializeClass, 1)))
              return NULL;
            return t_KStemFilterFactory::wrap_Object(KStemFilterFactory(((t_KStemFilterFactory *) arg)->object.this$));
          }
          static PyObject *t_KStemFilterFactory_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, KStemFilterFactory::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_KStemFilterFactory_init_(t_KStemFilterFactory *self, PyObject *args, PyObject *kwds)
          {
            ::java::util::Map a0((jobject) NULL);
            PyTypeObject **p0;
            KStemFilterFactory object((jobject) NULL);

            if (!parseArgs(args, "K", ::java::util::Map::initializeClass, &a0, &p0, ::java::util::t_Map::parameters_))
            {
              INT_CALL(object = KStemFilterFactory(a0));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_KStemFilterFactory_create(t_KStemFilterFactory *self, PyObject *args)
          {
            ::org::apache::lucene::analysis::TokenStream a0((jobject) NULL);
            ::org::apache::lucene::analysis::TokenFilter result((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::analysis::TokenStream::initializeClass, &a0))
            {
              OBJ_CALL(result = self->object.create(a0));
              return ::org::apache::lucene::analysis::t_TokenFilter::wrap_Object(result);
            }

            return callSuper(PY_TYPE(KStemFilterFactory), (PyObject *) self, "create", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/ja/util/DictionaryBuilder.h"
#include "org/apache/lucene/analysis/ja/util/DictionaryBuilder$DictionaryFormat.h"
#include "java/lang/Class.h"
#include "java/lang/String.h"
#include "java/io/IOException.h"
#include "java/nio/file/Path.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace ja {
          namespace util {

            ::java::lang::Class *DictionaryBuilder::class$ = NULL;
            jmethodID *DictionaryBuilder::mids$ = NULL;
            bool DictionaryBuilder::live$ = false;

            jclass DictionaryBuilder::initializeClass(bool getOnly)
            {
              if (getOnly)
                return (jclass) (live$ ? class$->this$ : NULL);
              if (class$ == NULL)
              {
                jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/ja/util/DictionaryBuilder");

                mids$ = new jmethodID[max_mid];
                mids$[mid_build_6bb09738e170e0a8] = env->getStaticMethodID(cls, "build", "(Lorg/apache/lucene/analysis/ja/util/DictionaryBuilder$DictionaryFormat;Ljava/nio/file/Path;Ljava/nio/file/Path;Ljava/lang/String;Z)V");
                mids$[mid_main_2fc318b999a7aba3] = env->getStaticMethodID(cls, "main", "([Ljava/lang/String;)V");

                class$ = new ::java::lang::Class(cls);
                live$ = true;
              }
              return (jclass) class$->this$;
            }

            void DictionaryBuilder::build(const ::org::apache::lucene::analysis::ja::util::DictionaryBuilder$DictionaryFormat & a0, const ::java::nio::file::Path & a1, const ::java::nio::file::Path & a2, const ::java::lang::String & a3, jboolean a4)
            {
              jclass cls = env->getClass(initializeClass);
              env->callStaticVoidMethod(cls, mids$[mid_build_6bb09738e170e0a8], a0.this$, a1.this$, a2.this$, a3.this$, a4);
            }

            void DictionaryBuilder::main(const JArray< ::java::lang::String > & a0)
            {
              jclass cls = env->getClass(initializeClass);
              env->callStaticVoidMethod(cls, mids$[mid_main_2fc318b999a7aba3], a0.this$);
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace ja {
          namespace util {
            static PyObject *t_DictionaryBuilder_cast_(PyTypeObject *type, PyObject *arg);
            static PyObject *t_DictionaryBuilder_instance_(PyTypeObject *type, PyObject *arg);
            static PyObject *t_DictionaryBuilder_build(PyTypeObject *type, PyObject *args);
            static PyObject *t_DictionaryBuilder_main(PyTypeObject *type, PyObject *arg);

            static PyMethodDef t_DictionaryBuilder__methods_[] = {
              DECLARE_METHOD(t_DictionaryBuilder, cast_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_DictionaryBuilder, instance_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_DictionaryBuilder, build, METH_VARARGS | METH_CLASS),
              DECLARE_METHOD(t_DictionaryBuilder, main, METH_O | METH_CLASS),
              { NULL, NULL, 0, NULL }
            };

            static PyType_Slot PY_TYPE_SLOTS(DictionaryBuilder)[] = {
              { Py_tp_methods, t_DictionaryBuilder__methods_ },
              { Py_tp_init, (void *) abstract_init },
              { 0, NULL }
            };

            static PyType_Def *PY_TYPE_BASES(DictionaryBuilder)[] = {
              &PY_TYPE_DEF(::java::lang::Object),
              NULL
            };

            DEFINE_TYPE(DictionaryBuilder, t_DictionaryBuilder, DictionaryBuilder);

            void t_DictionaryBuilder::install(PyObject *module)
            {
              installType(&PY_TYPE(DictionaryBuilder), &PY_TYPE_DEF(DictionaryBuilder), module, "DictionaryBuilder", 0);
              PyObject_SetAttrString((PyObject *) PY_TYPE(DictionaryBuilder), "DictionaryFormat", make_descriptor(&PY_TYPE_DEF(DictionaryBuilder$DictionaryFormat)));
            }

            void t_DictionaryBuilder::initialize(PyObject *module)
            {
              PyObject_SetAttrString((PyObject *) PY_TYPE(DictionaryBuilder), "class_", make_descriptor(DictionaryBuilder::initializeClass, 1));
              PyObject_SetAttrString((PyObject *) PY_TYPE(DictionaryBuilder), "wrapfn_", make_descriptor(t_DictionaryBuilder::wrap_jobject));
              PyObject_SetAttrString((PyObject *) PY_TYPE(DictionaryBuilder), "boxfn_", make_descriptor(boxObject));
            }

            static PyObject *t_DictionaryBuilder_cast_(PyTypeObject *type, PyObject *arg)
            {
              if (!(arg = castCheck(arg, DictionaryBuilder::initializeClass, 1)))
                return NULL;
              return t_DictionaryBuilder::wrap_Object(DictionaryBuilder(((t_DictionaryBuilder *) arg)->object.this$));
            }
            static PyObject *t_DictionaryBuilder_instance_(PyTypeObject *type, PyObject *arg)
            {
              if (!castCheck(arg, DictionaryBuilder::initializeClass, 0))
                Py_RETURN_FALSE;
              Py_RETURN_TRUE;
            }

            static PyObject *t_DictionaryBuilder_build(PyTypeObject *type, PyObject *args)
            {
              ::org::apache::lucene::analysis::ja::util::DictionaryBuilder$DictionaryFormat a0((jobject) NULL);
              PyTypeObject **p0;
              ::java::nio::file::Path a1((jobject) NULL);
              ::java::nio::file::Path a2((jobject) NULL);
              ::java::lang::String a3((jobject) NULL);
              jboolean a4;

              if (!parseArgs(args, "KkksZ", ::org::apache::lucene::analysis::ja::util::DictionaryBuilder$DictionaryFormat::initializeClass, ::java::nio::file::Path::initializeClass, ::java::nio::file::Path::initializeClass, &a0, &p0, ::org::apache::lucene::analysis::ja::util::t_DictionaryBuilder$DictionaryFormat::parameters_, &a1, &a2, &a3, &a4))
              {
                OBJ_CALL(::org::apache::lucene::analysis::ja::util::DictionaryBuilder::build(a0, a1, a2, a3, a4));
                Py_RETURN_NONE;
              }

              PyErr_SetArgsError(type, "build", args);
              return NULL;
            }

            static PyObject *t_DictionaryBuilder_main(PyTypeObject *type, PyObject *arg)
            {
              JArray< ::java::lang::String > a0((jobject) NULL);

              if (!parseArg(arg, "[s", &a0))
              {
                OBJ_CALL(::org::apache::lucene::analysis::ja::util::DictionaryBuilder::main(a0));
                Py_RETURN_NONE;
              }

              PyErr_SetArgsError(type, "main", arg);
              return NULL;
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/BooleanQuery$Builder.h"
#include "org/apache/lucene/search/BooleanQuery$Builder.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/search/BooleanClause$Occur.h"
#include "org/apache/lucene/search/Query.h"
#include "org/apache/lucene/search/BooleanClause.h"
#include "org/apache/lucene/search/BooleanQuery.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {

        ::java::lang::Class *BooleanQuery$Builder::class$ = NULL;
        jmethodID *BooleanQuery$Builder::mids$ = NULL;
        bool BooleanQuery$Builder::live$ = false;

        jclass BooleanQuery$Builder::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/search/BooleanQuery$Builder");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_f2cc1bce94666404] = env->getMethodID(cls, "<init>", "()V");
            mids$[mid_add_fcde99278bfd3621] = env->getMethodID(cls, "add", "(Lorg/apache/lucene/search/BooleanClause;)Lorg/apache/lucene/search/BooleanQuery$Builder;");
            mids$[mid_add_c4e10e38dc4090a9] = env->getMethodID(cls, "add", "(Lorg/apache/lucene/search/Query;Lorg/apache/lucene/search/BooleanClause$Occur;)Lorg/apache/lucene/search/BooleanQuery$Builder;");
            mids$[mid_build_e24ba83d47bcdba6] = env->getMethodID(cls, "build", "()Lorg/apache/lucene/search/BooleanQuery;");
            mids$[mid_setMinimumNumberShouldMatch_43389b1589fe18ca] = env->getMethodID(cls, "setMinimumNumberShouldMatch", "(I)Lorg/apache/lucene/search/BooleanQuery$Builder;");

            class$ = new ::java::lang::Class(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        BooleanQuery$Builder::BooleanQuery$Builder() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_f2cc1bce94666404)) {}

        BooleanQuery$Builder BooleanQuery$Builder::add(const ::org::apache::lucene::search::BooleanClause & a0) const
        {
          return BooleanQuery$Builder(env->callObjectMethod(this$, mids$[mid_add_fcde99278bfd3621], a0.this$));
        }

        BooleanQuery$Builder BooleanQuery$Builder::add(const ::org::apache::lucene::search::Query & a0, const ::org::apache::lucene::search::BooleanClause$Occur & a1) const
        {
          return BooleanQuery$Builder(env->callObjectMethod(this$, mids$[mid_add_c4e10e38dc4090a9], a0.this$, a1.this$));
        }

        ::org::apache::lucene::search::BooleanQuery BooleanQuery$Builder::build() const
        {
          return ::org::apache::lucene::search::BooleanQuery(env->callObjectMethod(this$, mids$[mid_build_e24ba83d47bcdba6]));
        }

        BooleanQuery$Builder BooleanQuery$Builder::setMinimumNumberShouldMatch(jint a0) const
        {
          return BooleanQuery$Builder(env->callObjectMethod(this$, mids$[mid_setMinimumNumberShouldMatch_43389b1589fe18ca], a0));
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        static PyObject *t_BooleanQuery$Builder_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_BooleanQuery$Builder_instance_(PyTypeObject *type, PyObject *arg);
        static int t_BooleanQuery$Builder_init_(t_BooleanQuery$Builder *self, PyObject *args, PyObject *kwds);
        static PyObject *t_BooleanQuery$Builder_add(t_BooleanQuery$Builder *self, PyObject *args);
        static PyObject *t_BooleanQuery$Builder_build(t_BooleanQuery$Builder *self);
        static PyObject *t_BooleanQuery$Builder_setMinimumNumberShouldMatch(t_BooleanQuery$Builder *self, PyObject *arg);
        static int t_BooleanQuery$Builder_set__minimumNumberShouldMatch(t_BooleanQuery$Builder *self, PyObject *arg, void *data);
        static PyGetSetDef t_BooleanQuery$Builder__fields_[] = {
          DECLARE_SET_FIELD(t_BooleanQuery$Builder, minimumNumberShouldMatch),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_BooleanQuery$Builder__methods_[] = {
          DECLARE_METHOD(t_BooleanQuery$Builder, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_BooleanQuery$Builder, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_BooleanQuery$Builder, add, METH_VARARGS),
          DECLARE_METHOD(t_BooleanQuery$Builder, build, METH_NOARGS),
          DECLARE_METHOD(t_BooleanQuery$Builder, setMinimumNumberShouldMatch, METH_O),
          { NULL, NULL, 0, NULL }
        };

        static PyType_Slot PY_TYPE_SLOTS(BooleanQuery$Builder)[] = {
          { Py_tp_methods, t_BooleanQuery$Builder__methods_ },
          { Py_tp_init, (void *) t_BooleanQuery$Builder_init_ },
          { Py_tp_getset, t_BooleanQuery$Builder__fields_ },
          { 0, NULL }
        };

        static PyType_Def *PY_TYPE_BASES(BooleanQuery$Builder)[] = {
          &PY_TYPE_DEF(::java::lang::Object),
          NULL
        };

        DEFINE_TYPE(BooleanQuery$Builder, t_BooleanQuery$Builder, BooleanQuery$Builder);

        void t_BooleanQuery$Builder::install(PyObject *module)
        {
          installType(&PY_TYPE(BooleanQuery$Builder), &PY_TYPE_DEF(BooleanQuery$Builder), module, "BooleanQuery$Builder", 0);
        }

        void t_BooleanQuery$Builder::initialize(PyObject *module)
        {
          PyObject_SetAttrString((PyObject *) PY_TYPE(BooleanQuery$Builder), "class_", make_descriptor(BooleanQuery$Builder::initializeClass, 1));
          PyObject_SetAttrString((PyObject *) PY_TYPE(BooleanQuery$Builder), "wrapfn_", make_descriptor(t_BooleanQuery$Builder::wrap_jobject));
          PyObject_SetAttrString((PyObject *) PY_TYPE(BooleanQuery$Builder), "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_BooleanQuery$Builder_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, BooleanQuery$Builder::initializeClass, 1)))
            return NULL;
          return t_BooleanQuery$Builder::wrap_Object(BooleanQuery$Builder(((t_BooleanQuery$Builder *) arg)->object.this$));
        }
        static PyObject *t_BooleanQuery$Builder_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, BooleanQuery$Builder::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_BooleanQuery$Builder_init_(t_BooleanQuery$Builder *self, PyObject *args, PyObject *kwds)
        {
          BooleanQuery$Builder object((jobject) NULL);

          INT_CALL(object = BooleanQuery$Builder());
          self->object = object;

          return 0;
        }

        static PyObject *t_BooleanQuery$Builder_add(t_BooleanQuery$Builder *self, PyObject *args)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 1:
            {
              ::org::apache::lucene::search::BooleanClause a0((jobject) NULL);
              BooleanQuery$Builder result((jobject) NULL);

              if (!parseArgs(args, "k", ::org::apache::lucene::search::BooleanClause::initializeClass, &a0))
              {
                OBJ_CALL(result = self->object.add(a0));
                return t_BooleanQuery$Builder::wrap_Object(result);
              }
            }
            break;
           case 2:
            {
              ::org::apache::lucene::search::Query a0((jobject) NULL);
              ::org::apache::lucene::search::BooleanClause$Occur a1((jobject) NULL);
              PyTypeObject **p1;
              BooleanQuery$Builder result((jobject) NULL);

              if (!parseArgs(args, "kK", ::org::apache::lucene::search::Query::initializeClass, ::org::apache::lucene::search::BooleanClause$Occur::initializeClass, &a0, &a1, &p1, ::org::apache::lucene::search::t_BooleanClause$Occur::parameters_))
              {
                OBJ_CALL(result = self->object.add(a0, a1));
                return t_BooleanQuery$Builder::wrap_Object(result);
              }
            }
          }

          PyErr_SetArgsError((PyObject *) self, "add", args);
          return NULL;
        }

        static PyObject *t_BooleanQuery$Builder_build(t_BooleanQuery$Builder *self)
        {
          ::org::apache::lucene::search::BooleanQuery result((jobject) NULL);
          OBJ_CALL(result = self->object.build());
          return ::org::apache::lucene::search::t_BooleanQuery::wrap_Object(result);
        }

        static PyObject *t_BooleanQuery$Builder_setMinimumNumberShouldMatch(t_BooleanQuery$Builder *self, PyObject *arg)
        {
          jint a0;
          BooleanQuery$Builder result((jobject) NULL);

          if (!parseArg(arg, "I", &a0))
          {
            OBJ_CALL(result = self->object.setMinimumNumberShouldMatch(a0));
            return t_BooleanQuery$Builder::wrap_Object(result);
          }

          PyErr_SetArgsError((PyObject *) self, "setMinimumNumberShouldMatch", arg);
          return NULL;
        }

        static int t_BooleanQuery$Builder_set__minimumNumberShouldMatch(t_BooleanQuery$Builder *self, PyObject *arg, void *data)
        {
          {
            jint value;
            if (!parseArg(arg, "I", &value))
            {
              INT_CALL(self->object.setMinimumNumberShouldMatch(value));
              return 0;
            }
          }
          PyErr_SetArgsError((PyObject *) self, "minimumNumberShouldMatch", arg);
          return -1;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/index/BaseCompositeReader.h"
#include "org/apache/lucene/index/Fields.h"
#include "org/apache/lucene/index/Term.h"
#include "java/lang/Class.h"
#include "java/lang/String.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/index/StoredFieldVisitor.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {

        ::java::lang::Class *BaseCompositeReader::class$ = NULL;
        jmethodID *BaseCompositeReader::mids$ = NULL;
        bool BaseCompositeReader::live$ = false;

        jclass BaseCompositeReader::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/index/BaseCompositeReader");

            mids$ = new jmethodID[max_mid];
            mids$[mid_docFreq_d7008d5a6820eefc] = env->getMethodID(cls, "docFreq", "(Lorg/apache/lucene/index/Term;)I");
            mids$[mid_document_8f45e7464506ed2f] = env->getMethodID(cls, "document", "(ILorg/apache/lucene/index/StoredFieldVisitor;)V");
            mids$[mid_getDocCount_a5a7d1128e9e2bb7] = env->getMethodID(cls, "getDocCount", "(Ljava/lang/String;)I");
            mids$[mid_getSumDocFreq_b1e05207ec98e246] = env->getMethodID(cls, "getSumDocFreq", "(Ljava/lang/String;)J");
            mids$[mid_getSumTotalTermFreq_b1e05207ec98e246] = env->getMethodID(cls, "getSumTotalTermFreq", "(Ljava/lang/String;)J");
            mids$[mid_getTermVectors_9997c94b783ad8be] = env->getMethodID(cls, "getTermVectors", "(I)Lorg/apache/lucene/index/Fields;");
            mids$[mid_maxDoc_9972fcc56b44e79d] = env->getMethodID(cls, "maxDoc", "()I");
            mids$[mid_numDocs_9972fcc56b44e79d] = env->getMethodID(cls, "numDocs", "()I");
            mids$[mid_totalTermFreq_4edac0e8611d73f1] = env->getMethodID(cls, "totalTermFreq", "(Lorg/apache/lucene/index/Term;)J");
            mids$[mid_readerIndex_1e143afe1894d213] = env->getMethodID(cls, "readerIndex", "(I)I");
            mids$[mid_readerBase_1e143afe1894d213] = env->getMethodID(cls, "readerBase", "(I)I");
            mids$[mid_getSequentialSubReaders_49ec78390f08338a] = env->getMethodID(cls, "getSequentialSubReaders", "()Ljava/util/List;");

            class$ = new ::java::lang::Class(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        jint BaseCompositeReader::docFreq(const ::org::apache::lucene::index::Term & a0) const
        {
          return env->callIntMethod(this$, mids$[mid_docFreq_d7008d5a6820eefc], a0.this$);
        }

        void BaseCompositeReader::document(jint a0, const ::org::apache::lucene::index::StoredFieldVisitor & a1) const
        {
          env->callVoidMethod(this$, mids$[mid_document_8f45e7464506ed2f], a0, a1.this$);
        }

        jint BaseCompositeReader::getDocCount(const ::java::lang::String & a0) const
        {
          return env->callIntMethod(this$, mids$[mid_getDocCount_a5a7d1128e9e2bb7], a0.this$);
        }

        jlong BaseCompositeReader::getSumDocFreq(const ::java::lang::String & a0) const
        {
          return env->callLongMethod(this$, mids$[mid_getSumDocFreq_b1e05207ec98e246], a0.this$);
        }

        jlong BaseCompositeReader::getSumTotalTermFreq(const ::java::lang::String & a0) const
        {
          return env->callLongMethod(this$, mids$[mid_getSumTotalTermFreq_b1e05207ec98e246], a0.this$);
        }

        ::org::apache::lucene::index::Fields BaseCompositeReader::getTermVectors(jint a0) const
        {
          return ::org::apache::lucene::index::Fields(env->callObjectMethod(this$, mids$[mid_getTermVectors_9997c94b783ad8be], a0));
        }

        jint BaseCompositeReader::maxDoc() const
        {
          return env->callIntMethod(this$, mids$[mid_maxDoc_9972fcc56b44e79d]);
        }

        jint BaseCompositeReader::numDocs() const
        {
          return env->callIntMethod(this$, mids$[mid_numDocs_9972fcc56b44e79d]);
        }

        jlong BaseCompositeReader::totalTermFreq(const ::org::apache::lucene::index::Term & a0) const
        {
          return env->callLongMethod(this$, mids$[mid_totalTermFreq_4edac0e8611d73f1], a0.this$);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {
        static PyObject *t_BaseCompositeReader_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_BaseCompositeReader_instance_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_BaseCompositeReader_of_(t_BaseCompositeReader *self, PyObject *args);
        static PyObject *t_BaseCompositeReader_docFreq(t_BaseCompositeReader *self, PyObject *args);
        static PyObject *t_BaseCompositeReader_document(t_BaseCompositeReader *self, PyObject *args);
        static PyObject *t_BaseCompositeReader_getDocCount(t_BaseCompositeReader *self, PyObject *args);
        static PyObject *t_BaseCompositeReader_getSumDocFreq(t_BaseCompositeReader *self, PyObject *args);
        static PyObject *t_BaseCompositeReader_getSumTotalTermFreq(t_BaseCompositeReader *self, PyObject *args);
        static PyObject *t_BaseCompositeReader_getTermVectors(t_BaseCompositeReader *self, PyObject *args);
        static PyObject *t_BaseCompositeReader_maxDoc(t_BaseCompositeReader *self, PyObject *args);
        static PyObject *t_BaseCompositeReader_numDocs(t_BaseCompositeReader *self, PyObject *args);
        static PyObject *t_BaseCompositeReader_totalTermFreq(t_BaseCompositeReader *self, PyObject *args);
        static PyObject *t_BaseCompositeReader_get__parameters_(t_BaseCompositeReader *self, void *data);
        static PyGetSetDef t_BaseCompositeReader__fields_[] = {
          DECLARE_GET_FIELD(t_BaseCompositeReader, parameters_),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_BaseCompositeReader__methods_[] = {
          DECLARE_METHOD(t_BaseCompositeReader, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_BaseCompositeReader, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_BaseCompositeReader, of_, METH_VARARGS),
          DECLARE_METHOD(t_BaseCompositeReader, docFreq, METH_VARARGS),
          DECLARE_METHOD(t_BaseCompositeReader, document, METH_VARARGS),
          DECLARE_METHOD(t_BaseCompositeReader, getDocCount, METH_VARARGS),
          DECLARE_METHOD(t_BaseCompositeReader, getSumDocFreq, METH_VARARGS),
          DECLARE_METHOD(t_BaseCompositeReader, getSumTotalTermFreq, METH_VARARGS),
          DECLARE_METHOD(t_BaseCompositeReader, getTermVectors, METH_VARARGS),
          DECLARE_METHOD(t_BaseCompositeReader, maxDoc, METH_VARARGS),
          DECLARE_METHOD(t_BaseCompositeReader, numDocs, METH_VARARGS),
          DECLARE_METHOD(t_BaseCompositeReader, totalTermFreq, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        static PyType_Slot PY_TYPE_SLOTS(BaseCompositeReader)[] = {
          { Py_tp_methods, t_BaseCompositeReader__methods_ },
          { Py_tp_init, (void *) abstract_init },
          { Py_tp_getset, t_BaseCompositeReader__fields_ },
          { 0, NULL }
        };

        static PyType_Def *PY_TYPE_BASES(BaseCompositeReader)[] = {
          &PY_TYPE_DEF(::org::apache::lucene::index::CompositeReader),
          NULL
        };

        DEFINE_TYPE(BaseCompositeReader, t_BaseCompositeReader, BaseCompositeReader);
        PyObject *t_BaseCompositeReader::wrap_Object(const BaseCompositeReader& object, PyTypeObject *p0)
        {
          PyObject *obj = t_BaseCompositeReader::wrap_Object(object);
          if (obj != NULL && obj != Py_None)
          {
            t_BaseCompositeReader *self = (t_BaseCompositeReader *) obj;
            self->parameters[0] = p0;
          }
          return obj;
        }

        PyObject *t_BaseCompositeReader::wrap_jobject(const jobject& object, PyTypeObject *p0)
        {
          PyObject *obj = t_BaseCompositeReader::wrap_jobject(object);
          if (obj != NULL && obj != Py_None)
          {
            t_BaseCompositeReader *self = (t_BaseCompositeReader *) obj;
            self->parameters[0] = p0;
          }
          return obj;
        }

        void t_BaseCompositeReader::install(PyObject *module)
        {
          installType(&PY_TYPE(BaseCompositeReader), &PY_TYPE_DEF(BaseCompositeReader), module, "BaseCompositeReader", 0);
        }

        void t_BaseCompositeReader::initialize(PyObject *module)
        {
          PyObject_SetAttrString((PyObject *) PY_TYPE(BaseCompositeReader), "class_", make_descriptor(BaseCompositeReader::initializeClass, 1));
          PyObject_SetAttrString((PyObject *) PY_TYPE(BaseCompositeReader), "wrapfn_", make_descriptor(t_BaseCompositeReader::wrap_jobject));
          PyObject_SetAttrString((PyObject *) PY_TYPE(BaseCompositeReader), "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_BaseCompositeReader_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, BaseCompositeReader::initializeClass, 1)))
            return NULL;
          return t_BaseCompositeReader::wrap_Object(BaseCompositeReader(((t_BaseCompositeReader *) arg)->object.this$));
        }
        static PyObject *t_BaseCompositeReader_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, BaseCompositeReader::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static PyObject *t_BaseCompositeReader_of_(t_BaseCompositeReader *self, PyObject *args)
        {
          if (!parseArg(args, "T", 1, &(self->parameters)))
            Py_RETURN_SELF;
          return PyErr_SetArgsError((PyObject *) self, "of_", args);
        }

        static PyObject *t_BaseCompositeReader_docFreq(t_BaseCompositeReader *self, PyObject *args)
        {
          ::org::apache::lucene::index::Term a0((jobject) NULL);
          jint result;

          if (!parseArgs(args, "k", ::org::apache::lucene::index::Term::initializeClass, &a0))
          {
            OBJ_CALL(result = self->object.docFreq(a0));
            return PyLong_FromLong((long) result);
          }

          return callSuper(PY_TYPE(BaseCompositeReader), (PyObject *) self, "docFreq", args, 2);
        }

        static PyObject *t_BaseCompositeReader_document(t_BaseCompositeReader *self, PyObject *args)
        {
          jint a0;
          ::org::apache::lucene::index::StoredFieldVisitor a1((jobject) NULL);

          if (!parseArgs(args, "Ik", ::org::apache::lucene::index::StoredFieldVisitor::initializeClass, &a0, &a1))
          {
            OBJ_CALL(self->object.document(a0, a1));
            Py_RETURN_NONE;
          }

          return callSuper(PY_TYPE(BaseCompositeReader), (PyObject *) self, "document", args, 2);
        }

        static PyObject *t_BaseCompositeReader_getDocCount(t_BaseCompositeReader *self, PyObject *args)
        {
          ::java::lang::String a0((jobject) NULL);
          jint result;

          if (!parseArgs(args, "s", &a0))
          {
            OBJ_CALL(result = self->object.getDocCount(a0));
            return PyLong_FromLong((long) result);
          }

          return callSuper(PY_TYPE(BaseCompositeReader), (PyObject *) self, "getDocCount", args, 2);
        }

        static PyObject *t_BaseCompositeReader_getSumDocFreq(t_BaseCompositeReader *self, PyObject *args)
        {
          ::java::lang::String a0((jobject) NULL);
          jlong result;

          if (!parseArgs(args, "s", &a0))
          {
            OBJ_CALL(result = self->object.getSumDocFreq(a0));
            return PyLong_FromLongLong((PY_LONG_LONG) result);
          }

          return callSuper(PY_TYPE(BaseCompositeReader), (PyObject *) self, "getSumDocFreq", args, 2);
        }

        static PyObject *t_BaseCompositeReader_getSumTotalTermFreq(t_BaseCompositeReader *self, PyObject *args)
        {
          ::java::lang::String a0((jobject) NULL);
          jlong result;

          if (!parseArgs(args, "s", &a0))
          {
            OBJ_CALL(result = self->object.getSumTotalTermFreq(a0));
            return PyLong_FromLongLong((PY_LONG_LONG) result);
          }

          return callSuper(PY_TYPE(BaseCompositeReader), (PyObject *) self, "getSumTotalTermFreq", args, 2);
        }

        static PyObject *t_BaseCompositeReader_getTermVectors(t_BaseCompositeReader *self, PyObject *args)
        {
          jint a0;
          ::org::apache::lucene::index::Fields result((jobject) NULL);

          if (!parseArgs(args, "I", &a0))
          {
            OBJ_CALL(result = self->object.getTermVectors(a0));
            return ::org::apache::lucene::index::t_Fields::wrap_Object(result);
          }

          return callSuper(PY_TYPE(BaseCompositeReader), (PyObject *) self, "getTermVectors", args, 2);
        }

        static PyObject *t_BaseCompositeReader_maxDoc(t_BaseCompositeReader *self, PyObject *args)
        {
          jint result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.maxDoc());
            return PyLong_FromLong((long) result);
          }

          return callSuper(PY_TYPE(BaseCompositeReader), (PyObject *) self, "maxDoc", args, 2);
        }

        static PyObject *t_BaseCompositeReader_numDocs(t_BaseCompositeReader *self, PyObject *args)
        {
          jint result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.numDocs());
            return PyLong_FromLong((long) result);
          }

          return callSuper(PY_TYPE(BaseCompositeReader), (PyObject *) self, "numDocs", args, 2);
        }

        static PyObject *t_BaseCompositeReader_totalTermFreq(t_BaseCompositeReader *self, PyObject *args)
        {
          ::org::apache::lucene::index::Term a0((jobject) NULL);
          jlong result;

          if (!parseArgs(args, "k", ::org::apache::lucene::index::Term::initializeClass, &a0))
          {
            OBJ_CALL(result = self->object.totalTermFreq(a0));
            return PyLong_FromLongLong((PY_LONG_LONG) result);
          }

          return callSuper(PY_TYPE(BaseCompositeReader), (PyObject *) self, "totalTermFreq", args, 2);
        }
        static PyObject *t_BaseCompositeReader_get__parameters_(t_BaseCompositeReader *self, void *data)
        {
          return typeParameters(self->parameters, sizeof(self->parameters));
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queries/intervals/IntervalQuery.h"
#include "org/apache/lucene/search/IndexSearcher.h"
#include "java/lang/Class.h"
#include "java/lang/Object.h"
#include "java/lang/String.h"
#include "org/apache/lucene/queries/intervals/IntervalsSource.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/search/QueryVisitor.h"
#include "org/apache/lucene/search/ScoreMode.h"
#include "org/apache/lucene/search/Weight.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queries {
        namespace intervals {

          ::java::lang::Class *IntervalQuery::class$ = NULL;
          jmethodID *IntervalQuery::mids$ = NULL;
          bool IntervalQuery::live$ = false;

          jclass IntervalQuery::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/queries/intervals/IntervalQuery");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_1e32a8f89fb4c908] = env->getMethodID(cls, "<init>", "(Ljava/lang/String;Lorg/apache/lucene/queries/intervals/IntervalsSource;)V");
              mids$[mid_init$_02cdd3d78792d3d1] = env->getMethodID(cls, "<init>", "(Ljava/lang/String;Lorg/apache/lucene/queries/intervals/IntervalsSource;F)V");
              mids$[mid_init$_c25966ea9ca1cf54] = env->getMethodID(cls, "<init>", "(Ljava/lang/String;Lorg/apache/lucene/queries/intervals/IntervalsSource;FF)V");
              mids$[mid_createWeight_f0ef0b5ea369ac06] = env->getMethodID(cls, "createWeight", "(Lorg/apache/lucene/search/IndexSearcher;Lorg/apache/lucene/search/ScoreMode;F)Lorg/apache/lucene/search/Weight;");
              mids$[mid_equals_8b72f2dcdde6fd1d] = env->getMethodID(cls, "equals", "(Ljava/lang/Object;)Z");
              mids$[mid_getField_db9b55ba01e03e4b] = env->getMethodID(cls, "getField", "()Ljava/lang/String;");
              mids$[mid_hashCode_9972fcc56b44e79d] = env->getMethodID(cls, "hashCode", "()I");
              mids$[mid_toString_9bfa75c9f141b67f] = env->getMethodID(cls, "toString", "(Ljava/lang/String;)Ljava/lang/String;");
              mids$[mid_visit_f9e6207006c5b6c1] = env->getMethodID(cls, "visit", "(Lorg/apache/lucene/search/QueryVisitor;)V");

              class$ = new ::java::lang::Class(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          IntervalQuery::IntervalQuery(const ::java::lang::String & a0, const ::org::apache::lucene::queries::intervals::IntervalsSource & a1) : ::org::apache::lucene::search::Query(env->newObject(initializeClass, &mids$, mid_init$_1e32a8f89fb4c908, a0.this$, a1.this$)) {}

          IntervalQuery::IntervalQuery(const ::java::lang::String & a0, const ::org::apache::lucene::queries::intervals::IntervalsSource & a1, jfloat a2) : ::org::apache::lucene::search::Query(env->newObject(initializeClass, &mids$, mid_init$_02cdd3d78792d3d1, a0.this$, a1.this$, a2)) {}

          IntervalQuery::IntervalQuery(const ::java::lang::String & a0, const ::org::apache::lucene::queries::intervals::IntervalsSource & a1, jfloat a2, jfloat a3) : ::org::apache::lucene::search::Query(env->newObject(initializeClass, &mids$, mid_init$_c25966ea9ca1cf54, a0.this$, a1.this$, a2, a3)) {}

          ::org::apache::lucene::search::Weight IntervalQuery::createWeight(const ::org::apache::lucene::search::IndexSearcher & a0, const ::org::apache::lucene::search::ScoreMode & a1, jfloat a2) const
          {
            return ::org::apache::lucene::search::Weight(env->callObjectMethod(this$, mids$[mid_createWeight_f0ef0b5ea369ac06], a0.this$, a1.this$, a2));
          }

          jboolean IntervalQuery::equals(const ::java::lang::Object & a0) const
          {
            return env->callBooleanMethod(this$, mids$[mid_equals_8b72f2dcdde6fd1d], a0.this$);
          }

          ::java::lang::String IntervalQuery::getField() const
          {
            return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_getField_db9b55ba01e03e4b]));
          }

          jint IntervalQuery::hashCode() const
          {
            return env->callIntMethod(this$, mids$[mid_hashCode_9972fcc56b44e79d]);
          }

          ::java::lang::String IntervalQuery::toString(const ::java::lang::String & a0) const
          {
            return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_9bfa75c9f141b67f], a0.this$));
          }

          void IntervalQuery::visit(const ::org::apache::lucene::search::QueryVisitor & a0) const
          {
            env->callVoidMethod(this$, mids$[mid_visit_f9e6207006c5b6c1], a0.this$);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queries {
        namespace intervals {
          static PyObject *t_IntervalQuery_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_IntervalQuery_instance_(PyTypeObject *type, PyObject *arg);
          static int t_IntervalQuery_init_(t_IntervalQuery *self, PyObject *args, PyObject *kwds);
          static PyObject *t_IntervalQuery_createWeight(t_IntervalQuery *self, PyObject *args);
          static PyObject *t_IntervalQuery_equals(t_IntervalQuery *self, PyObject *args);
          static PyObject *t_IntervalQuery_getField(t_IntervalQuery *self);
          static PyObject *t_IntervalQuery_hashCode(t_IntervalQuery *self, PyObject *args);
          static PyObject *t_IntervalQuery_toString(t_IntervalQuery *self, PyObject *args);
          static PyObject *t_IntervalQuery_visit(t_IntervalQuery *self, PyObject *args);
          static PyObject *t_IntervalQuery_get__field(t_IntervalQuery *self, void *data);
          static PyGetSetDef t_IntervalQuery__fields_[] = {
            DECLARE_GET_FIELD(t_IntervalQuery, field),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_IntervalQuery__methods_[] = {
            DECLARE_METHOD(t_IntervalQuery, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_IntervalQuery, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_IntervalQuery, createWeight, METH_VARARGS),
            DECLARE_METHOD(t_IntervalQuery, equals, METH_VARARGS),
            DECLARE_METHOD(t_IntervalQuery, getField, METH_NOARGS),
            DECLARE_METHOD(t_IntervalQuery, hashCode, METH_VARARGS),
            DECLARE_METHOD(t_IntervalQuery, toString, METH_VARARGS),
            DECLARE_METHOD(t_IntervalQuery, visit, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          static PyType_Slot PY_TYPE_SLOTS(IntervalQuery)[] = {
            { Py_tp_methods, t_IntervalQuery__methods_ },
            { Py_tp_init, (void *) t_IntervalQuery_init_ },
            { Py_tp_getset, t_IntervalQuery__fields_ },
            { 0, NULL }
          };

          static PyType_Def *PY_TYPE_BASES(IntervalQuery)[] = {
            &PY_TYPE_DEF(::org::apache::lucene::search::Query),
            NULL
          };

          DEFINE_TYPE(IntervalQuery, t_IntervalQuery, IntervalQuery);

          void t_IntervalQuery::install(PyObject *module)
          {
            installType(&PY_TYPE(IntervalQuery), &PY_TYPE_DEF(IntervalQuery), module, "IntervalQuery", 0);
          }

          void t_IntervalQuery::initialize(PyObject *module)
          {
            PyObject_SetAttrString((PyObject *) PY_TYPE(IntervalQuery), "class_", make_descriptor(IntervalQuery::initializeClass, 1));
            PyObject_SetAttrString((PyObject *) PY_TYPE(IntervalQuery), "wrapfn_", make_descriptor(t_IntervalQuery::wrap_jobject));
            PyObject_SetAttrString((PyObject *) PY_TYPE(IntervalQuery), "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_IntervalQuery_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, IntervalQuery::initializeClass, 1)))
              return NULL;
            return t_IntervalQuery::wrap_Object(IntervalQuery(((t_IntervalQuery *) arg)->object.this$));
          }
          static PyObject *t_IntervalQuery_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, IntervalQuery::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_IntervalQuery_init_(t_IntervalQuery *self, PyObject *args, PyObject *kwds)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 2:
              {
                ::java::lang::String a0((jobject) NULL);
                ::org::apache::lucene::queries::intervals::IntervalsSource a1((jobject) NULL);
                IntervalQuery object((jobject) NULL);

                if (!parseArgs(args, "sk", ::org::apache::lucene::queries::intervals::IntervalsSource::initializeClass, &a0, &a1))
                {
                  INT_CALL(object = IntervalQuery(a0, a1));
                  self->object = object;
                  break;
                }
              }
              goto err;
             case 3:
              {
                ::java::lang::String a0((jobject) NULL);
                ::org::apache::lucene::queries::intervals::IntervalsSource a1((jobject) NULL);
                jfloat a2;
                IntervalQuery object((jobject) NULL);

                if (!parseArgs(args, "skF", ::org::apache::lucene::queries::intervals::IntervalsSource::initializeClass, &a0, &a1, &a2))
                {
                  INT_CALL(object = IntervalQuery(a0, a1, a2));
                  self->object = object;
                  break;
                }
              }
              goto err;
             case 4:
              {
                ::java::lang::String a0((jobject) NULL);
                ::org::apache::lucene::queries::intervals::IntervalsSource a1((jobject) NULL);
                jfloat a2;
                jfloat a3;
                IntervalQuery object((jobject) NULL);

                if (!parseArgs(args, "skFF", ::org::apache::lucene::queries::intervals::IntervalsSource::initializeClass, &a0, &a1, &a2, &a3))
                {
                  INT_CALL(object = IntervalQuery(a0, a1, a2, a3));
                  self->object = object;
                  break;
                }
              }
             default:
             err:
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_IntervalQuery_createWeight(t_IntervalQuery *self, PyObject *args)
          {
            ::org::apache::lucene::search::IndexSearcher a0((jobject) NULL);
            ::org::apache::lucene::search::ScoreMode a1((jobject) NULL);
            PyTypeObject **p1;
            jfloat a2;
            ::org::apache::lucene::search::Weight result((jobject) NULL);

            if (!parseArgs(args, "kKF", ::org::apache::lucene::search::IndexSearcher::initializeClass, ::org::apache::lucene::search::ScoreMode::initializeClass, &a0, &a1, &p1, ::org::apache::lucene::search::t_ScoreMode::parameters_, &a2))
            {
              OBJ_CALL(result = self->object.createWeight(a0, a1, a2));
              return ::org::apache::lucene::search::t_Weight::wrap_Object(result);
            }

            return callSuper(PY_TYPE(IntervalQuery), (PyObject *) self, "createWeight", args, 2);
          }

          static PyObject *t_IntervalQuery_equals(t_IntervalQuery *self, PyObject *args)
          {
            ::java::lang::Object a0((jobject) NULL);
            jboolean result;

            if (!parseArgs(args, "o", &a0))
            {
              OBJ_CALL(result = self->object.equals(a0));
              Py_RETURN_BOOL(result);
            }

            return callSuper(PY_TYPE(IntervalQuery), (PyObject *) self, "equals", args, 2);
          }

          static PyObject *t_IntervalQuery_getField(t_IntervalQuery *self)
          {
            ::java::lang::String result((jobject) NULL);
            OBJ_CALL(result = self->object.getField());
            return j2p(result);
          }

          static PyObject *t_IntervalQuery_hashCode(t_IntervalQuery *self, PyObject *args)
          {
            jint result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.hashCode());
              return PyLong_FromLong((long) result);
            }

            return callSuper(PY_TYPE(IntervalQuery), (PyObject *) self, "hashCode", args, 2);
          }

          static PyObject *t_IntervalQuery_toString(t_IntervalQuery *self, PyObject *args)
          {
            ::java::lang::String a0((jobject) NULL);
            ::java::lang::String result((jobject) NULL);

            if (!parseArgs(args, "s", &a0))
            {
              OBJ_CALL(result = self->object.toString(a0));
              return j2p(result);
            }

            return callSuper(PY_TYPE(IntervalQuery), (PyObject *) self, "toString", args, 2);
          }

          static PyObject *t_IntervalQuery_visit(t_IntervalQuery *self, PyObject *args)
          {
            ::org::apache::lucene::search::QueryVisitor a0((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::search::QueryVisitor::initializeClass, &a0))
            {
              OBJ_CALL(self->object.visit(a0));
              Py_RETURN_NONE;
            }

            return callSuper(PY_TYPE(IntervalQuery), (PyObject *) self, "visit", args, 2);
          }

          static PyObject *t_IntervalQuery_get__field(t_IntervalQuery *self, void *data)
          {
            ::java::lang::String value((jobject) NULL);
            OBJ_CALL(value = self->object.getField());
            return j2p(value);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/suggest/document/NRTSuggester.h"
#include "org/apache/lucene/util/Bits.h"
#include "java/util/Collection.h"
#include "org/apache/lucene/store/IndexInput.h"
#include "org/apache/lucene/util/Accountable.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/search/suggest/document/NRTSuggester.h"
#include "org/apache/lucene/search/suggest/document/CompletionScorer.h"
#include "org/apache/lucene/search/suggest/document/TopSuggestDocsCollector.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/search/suggest/document/CompletionPostingsFormat$FSTLoadMode.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace suggest {
          namespace document {

            ::java::lang::Class *NRTSuggester::class$ = NULL;
            jmethodID *NRTSuggester::mids$ = NULL;
            bool NRTSuggester::live$ = false;

            jclass NRTSuggester::initializeClass(bool getOnly)
            {
              if (getOnly)
                return (jclass) (live$ ? class$->this$ : NULL);
              if (class$ == NULL)
              {
                jclass cls = (jclass) env->findClass("org/apache/lucene/search/suggest/document/NRTSuggester");

                mids$ = new jmethodID[max_mid];
                mids$[mid_getChildResources_d4dfbf7a26ff41df] = env->getMethodID(cls, "getChildResources", "()Ljava/util/Collection;");
                mids$[mid_load_f10e230490444dce] = env->getStaticMethodID(cls, "load", "(Lorg/apache/lucene/store/IndexInput;Lorg/apache/lucene/search/suggest/document/CompletionPostingsFormat$FSTLoadMode;)Lorg/apache/lucene/search/suggest/document/NRTSuggester;");
                mids$[mid_lookup_9e8de2090ae7d332] = env->getMethodID(cls, "lookup", "(Lorg/apache/lucene/search/suggest/document/CompletionScorer;Lorg/apache/lucene/util/Bits;Lorg/apache/lucene/search/suggest/document/TopSuggestDocsCollector;)V");
                mids$[mid_ramBytesUsed_2e5ae9edcb9b072f] = env->getMethodID(cls, "ramBytesUsed", "()J");

                class$ = new ::java::lang::Class(cls);
                live$ = true;
              }
              return (jclass) class$->this$;
            }

            ::java::util::Collection NRTSuggester::getChildResources() const
            {
              return ::java::util::Collection(env->callObjectMethod(this$, mids$[mid_getChildResources_d4dfbf7a26ff41df]));
            }

            NRTSuggester NRTSuggester::load(const ::org::apache::lucene::store::IndexInput & a0, const ::org::apache::lucene::search::suggest::document::CompletionPostingsFormat$FSTLoadMode & a1)
            {
              jclass cls = env->getClass(initializeClass);
              return NRTSuggester(env->callStaticObjectMethod(cls, mids$[mid_load_f10e230490444dce], a0.this$, a1.this$));
            }

            void NRTSuggester::lookup(const ::org::apache::lucene::search::suggest::document::CompletionScorer & a0, const ::org::apache::lucene::util::Bits & a1, const ::org::apache::lucene::search::suggest::document::TopSuggestDocsCollector & a2) const
            {
              env->callVoidMethod(this$, mids$[mid_lookup_9e8de2090ae7d332], a0.this$, a1.this$, a2.this$);
            }

            jlong NRTSuggester::ramBytesUsed() const
            {
              return env->callLongMethod(this$, mids$[mid_ramBytesUsed_2e5ae9edcb9b072f]);
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace suggest {
          namespace document {
            static PyObject *t_NRTSuggester_cast_(PyTypeObject *type, PyObject *arg);
            static PyObject *t_NRTSuggester_instance_(PyTypeObject *type, PyObject *arg);
            static PyObject *t_NRTSuggester_getChildResources(t_NRTSuggester *self);
            static PyObject *t_NRTSuggester_load(PyTypeObject *type, PyObject *args);
            static PyObject *t_NRTSuggester_lookup(t_NRTSuggester *self, PyObject *args);
            static PyObject *t_NRTSuggester_ramBytesUsed(t_NRTSuggester *self);
            static PyObject *t_NRTSuggester_get__childResources(t_NRTSuggester *self, void *data);
            static PyGetSetDef t_NRTSuggester__fields_[] = {
              DECLARE_GET_FIELD(t_NRTSuggester, childResources),
              { NULL, NULL, NULL, NULL, NULL }
            };

            static PyMethodDef t_NRTSuggester__methods_[] = {
              DECLARE_METHOD(t_NRTSuggester, cast_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_NRTSuggester, instance_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_NRTSuggester, getChildResources, METH_NOARGS),
              DECLARE_METHOD(t_NRTSuggester, load, METH_VARARGS | METH_CLASS),
              DECLARE_METHOD(t_NRTSuggester, lookup, METH_VARARGS),
              DECLARE_METHOD(t_NRTSuggester, ramBytesUsed, METH_NOARGS),
              { NULL, NULL, 0, NULL }
            };

            static PyType_Slot PY_TYPE_SLOTS(NRTSuggester)[] = {
              { Py_tp_methods, t_NRTSuggester__methods_ },
              { Py_tp_init, (void *) abstract_init },
              { Py_tp_getset, t_NRTSuggester__fields_ },
              { 0, NULL }
            };

            static PyType_Def *PY_TYPE_BASES(NRTSuggester)[] = {
              &PY_TYPE_DEF(::java::lang::Object),
              NULL
            };

            DEFINE_TYPE(NRTSuggester, t_NRTSuggester, NRTSuggester);

            void t_NRTSuggester::install(PyObject *module)
            {
              installType(&PY_TYPE(NRTSuggester), &PY_TYPE_DEF(NRTSuggester), module, "NRTSuggester", 0);
            }

            void t_NRTSuggester::initialize(PyObject *module)
            {
              PyObject_SetAttrString((PyObject *) PY_TYPE(NRTSuggester), "class_", make_descriptor(NRTSuggester::initializeClass, 1));
              PyObject_SetAttrString((PyObject *) PY_TYPE(NRTSuggester), "wrapfn_", make_descriptor(t_NRTSuggester::wrap_jobject));
              PyObject_SetAttrString((PyObject *) PY_TYPE(NRTSuggester), "boxfn_", make_descriptor(boxObject));
            }

            static PyObject *t_NRTSuggester_cast_(PyTypeObject *type, PyObject *arg)
            {
              if (!(arg = castCheck(arg, NRTSuggester::initializeClass, 1)))
                return NULL;
              return t_NRTSuggester::wrap_Object(NRTSuggester(((t_NRTSuggester *) arg)->object.this$));
            }
            static PyObject *t_NRTSuggester_instance_(PyTypeObject *type, PyObject *arg)
            {
              if (!castCheck(arg, NRTSuggester::initializeClass, 0))
                Py_RETURN_FALSE;
              Py_RETURN_TRUE;
            }

            static PyObject *t_NRTSuggester_getChildResources(t_NRTSuggester *self)
            {
              ::java::util::Collection result((jobject) NULL);
              OBJ_CALL(result = self->object.getChildResources());
              return ::java::util::t_Collection::wrap_Object(result, ::org::apache::lucene::util::PY_TYPE(Accountable));
            }

            static PyObject *t_NRTSuggester_load(PyTypeObject *type, PyObject *args)
            {
              ::org::apache::lucene::store::IndexInput a0((jobject) NULL);
              ::org::apache::lucene::search::suggest::document::CompletionPostingsFormat$FSTLoadMode a1((jobject) NULL);
              PyTypeObject **p1;
              NRTSuggester result((jobject) NULL);

              if (!parseArgs(args, "kK", ::org::apache::lucene::store::IndexInput::initializeClass, ::org::apache::lucene::search::suggest::document::CompletionPostingsFormat$FSTLoadMode::initializeClass, &a0, &a1, &p1, ::org::apache::lucene::search::suggest::document::t_CompletionPostingsFormat$FSTLoadMode::parameters_))
              {
                OBJ_CALL(result = ::org::apache::lucene::search::suggest::document::NRTSuggester::load(a0, a1));
                return t_NRTSuggester::wrap_Object(result);
              }

              PyErr_SetArgsError(type, "load", args);
              return NULL;
            }

            static PyObject *t_NRTSuggester_lookup(t_NRTSuggester *self, PyObject *args)
            {
              ::org::apache::lucene::search::suggest::document::CompletionScorer a0((jobject) NULL);
              ::org::apache::lucene::util::Bits a1((jobject) NULL);
              ::org::apache::lucene::search::suggest::document::TopSuggestDocsCollector a2((jobject) NULL);

              if (!parseArgs(args, "kkk", ::org::apache::lucene::search::suggest::document::CompletionScorer::initializeClass, ::org::apache::lucene::util::Bits::initializeClass, ::org::apache::lucene::search::suggest::document::TopSuggestDocsCollector::initializeClass, &a0, &a1, &a2))
              {
                OBJ_CALL(self->object.lookup(a0, a1, a2));
                Py_RETURN_NONE;
              }

              PyErr_SetArgsError((PyObject *) self, "lookup", args);
              return NULL;
            }

            static PyObject *t_NRTSuggester_ramBytesUsed(t_NRTSuggester *self)
            {
              jlong result;
              OBJ_CALL(result = self->object.ramBytesUsed());
              return PyLong_FromLongLong((PY_LONG_LONG) result);
            }

            static PyObject *t_NRTSuggester_get__childResources(t_NRTSuggester *self, void *data)
            {
              ::java::util::Collection value((jobject) NULL);
              OBJ_CALL(value = self->object.getChildResources());
              return ::java::util::t_Collection::wrap_Object(value);
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queries/payloads/AveragePayloadFunction.h"
#include "java/lang/Object.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queries {
        namespace payloads {

          ::java::lang::Class *AveragePayloadFunction::class$ = NULL;
          jmethodID *AveragePayloadFunction::mids$ = NULL;
          bool AveragePayloadFunction::live$ = false;

          jclass AveragePayloadFunction::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/queries/payloads/AveragePayloadFunction");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_f2cc1bce94666404] = env->getMethodID(cls, "<init>", "()V");
              mids$[mid_currentScore_0a14f13874ab46d9] = env->getMethodID(cls, "currentScore", "(ILjava/lang/String;IIIFF)F");
              mids$[mid_docScore_6294fc7b7308f6b0] = env->getMethodID(cls, "docScore", "(ILjava/lang/String;IF)F");
              mids$[mid_equals_8b72f2dcdde6fd1d] = env->getMethodID(cls, "equals", "(Ljava/lang/Object;)Z");
              mids$[mid_hashCode_9972fcc56b44e79d] = env->getMethodID(cls, "hashCode", "()I");

              class$ = new ::java::lang::Class(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          AveragePayloadFunction::AveragePayloadFunction() : ::org::apache::lucene::queries::payloads::PayloadFunction(env->newObject(initializeClass, &mids$, mid_init$_f2cc1bce94666404)) {}

          jfloat AveragePayloadFunction::currentScore(jint a0, const ::java::lang::String & a1, jint a2, jint a3, jint a4, jfloat a5, jfloat a6) const
          {
            return env->callFloatMethod(this$, mids$[mid_currentScore_0a14f13874ab46d9], a0, a1.this$, a2, a3, a4, a5, a6);
          }

          jfloat AveragePayloadFunction::docScore(jint a0, const ::java::lang::String & a1, jint a2, jfloat a3) const
          {
            return env->callFloatMethod(this$, mids$[mid_docScore_6294fc7b7308f6b0], a0, a1.this$, a2, a3);
          }

          jboolean AveragePayloadFunction::equals(const ::java::lang::Object & a0) const
          {
            return env->callBooleanMethod(this$, mids$[mid_equals_8b72f2dcdde6fd1d], a0.this$);
          }

          jint AveragePayloadFunction::hashCode() const
          {
            return env->callIntMethod(this$, mids$[mid_hashCode_9972fcc56b44e79d]);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queries {
        namespace payloads {
          static PyObject *t_AveragePayloadFunction_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_AveragePayloadFunction_instance_(PyTypeObject *type, PyObject *arg);
          static int t_AveragePayloadFunction_init_(t_AveragePayloadFunction *self, PyObject *args, PyObject *kwds);
          static PyObject *t_AveragePayloadFunction_currentScore(t_AveragePayloadFunction *self, PyObject *args);
          static PyObject *t_AveragePayloadFunction_docScore(t_AveragePayloadFunction *self, PyObject *args);
          static PyObject *t_AveragePayloadFunction_equals(t_AveragePayloadFunction *self, PyObject *args);
          static PyObject *t_AveragePayloadFunction_hashCode(t_AveragePayloadFunction *self, PyObject *args);

          static PyMethodDef t_AveragePayloadFunction__methods_[] = {
            DECLARE_METHOD(t_AveragePayloadFunction, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_AveragePayloadFunction, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_AveragePayloadFunction, currentScore, METH_VARARGS),
            DECLARE_METHOD(t_AveragePayloadFunction, docScore, METH_VARARGS),
            DECLARE_METHOD(t_AveragePayloadFunction, equals, METH_VARARGS),
            DECLARE_METHOD(t_AveragePayloadFunction, hashCode, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          static PyType_Slot PY_TYPE_SLOTS(AveragePayloadFunction)[] = {
            { Py_tp_methods, t_AveragePayloadFunction__methods_ },
            { Py_tp_init, (void *) t_AveragePayloadFunction_init_ },
            { 0, NULL }
          };

          static PyType_Def *PY_TYPE_BASES(AveragePayloadFunction)[] = {
            &PY_TYPE_DEF(::org::apache::lucene::queries::payloads::PayloadFunction),
            NULL
          };

          DEFINE_TYPE(AveragePayloadFunction, t_AveragePayloadFunction, AveragePayloadFunction);

          void t_AveragePayloadFunction::install(PyObject *module)
          {
            installType(&PY_TYPE(AveragePayloadFunction), &PY_TYPE_DEF(AveragePayloadFunction), module, "AveragePayloadFunction", 0);
          }

          void t_AveragePayloadFunction::initialize(PyObject *module)
          {
            PyObject_SetAttrString((PyObject *) PY_TYPE(AveragePayloadFunction), "class_", make_descriptor(AveragePayloadFunction::initializeClass, 1));
            PyObject_SetAttrString((PyObject *) PY_TYPE(AveragePayloadFunction), "wrapfn_", make_descriptor(t_AveragePayloadFunction::wrap_jobject));
            PyObject_SetAttrString((PyObject *) PY_TYPE(AveragePayloadFunction), "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_AveragePayloadFunction_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, AveragePayloadFunction::initializeClass, 1)))
              return NULL;
            return t_AveragePayloadFunction::wrap_Object(AveragePayloadFunction(((t_AveragePayloadFunction *) arg)->object.this$));
          }
          static PyObject *t_AveragePayloadFunction_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, AveragePayloadFunction::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_AveragePayloadFunction_init_(t_AveragePayloadFunction *self, PyObject *args, PyObject *kwds)
          {
            AveragePayloadFunction object((jobject) NULL);

            INT_CALL(object = AveragePayloadFunction());
            self->object = object;

            return 0;
          }

          static PyObject *t_AveragePayloadFunction_currentScore(t_AveragePayloadFunction *self, PyObject *args)
          {
            jint a0;
            ::java::lang::String a1((jobject) NULL);
            jint a2;
            jint a3;
            jint a4;
            jfloat a5;
            jfloat a6;
            jfloat result;

            if (!parseArgs(args, "IsIIIFF", &a0, &a1, &a2, &a3, &a4, &a5, &a6))
            {
              OBJ_CALL(result = self->object.currentScore(a0, a1, a2, a3, a4, a5, a6));
              return PyFloat_FromDouble((double) result);
            }

            return callSuper(PY_TYPE(AveragePayloadFunction), (PyObject *) self, "currentScore", args, 2);
          }

          static PyObject *t_AveragePayloadFunction_docScore(t_AveragePayloadFunction *self, PyObject *args)
          {
            jint a0;
            ::java::lang::String a1((jobject) NULL);
            jint a2;
            jfloat a3;
            jfloat result;

            if (!parseArgs(args, "IsIF", &a0, &a1, &a2, &a3))
            {
              OBJ_CALL(result = self->object.docScore(a0, a1, a2, a3));
              return PyFloat_FromDouble((double) result);
            }

            return callSuper(PY_TYPE(AveragePayloadFunction), (PyObject *) self, "docScore", args, 2);
          }

          static PyObject *t_AveragePayloadFunction_equals(t_AveragePayloadFunction *self, PyObject *args)
          {
            ::java::lang::Object a0((jobject) NULL);
            jboolean result;

            if (!parseArgs(args, "o", &a0))
            {
              OBJ_CALL(result = self->object.equals(a0));
              Py_RETURN_BOOL(result);
            }

            return callSuper(PY_TYPE(AveragePayloadFunction), (PyObject *) self, "equals", args, 2);
          }

          static PyObject *t_AveragePayloadFunction_hashCode(t_AveragePayloadFunction *self, PyObject *args)
          {
            jint result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.hashCode());
              return PyLong_FromLong((long) result);
            }

            return callSuper(PY_TYPE(AveragePayloadFunction), (PyObject *) self, "hashCode", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queryparser/flexible/standard/processors/FuzzyQueryNodeProcessor.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace standard {
            namespace processors {

              ::java::lang::Class *FuzzyQueryNodeProcessor::class$ = NULL;
              jmethodID *FuzzyQueryNodeProcessor::mids$ = NULL;
              bool FuzzyQueryNodeProcessor::live$ = false;

              jclass FuzzyQueryNodeProcessor::initializeClass(bool getOnly)
              {
                if (getOnly)
                  return (jclass) (live$ ? class$->this$ : NULL);
                if (class$ == NULL)
                {
                  jclass cls = (jclass) env->findClass("org/apache/lucene/queryparser/flexible/standard/processors/FuzzyQueryNodeProcessor");

                  mids$ = new jmethodID[max_mid];
                  mids$[mid_init$_f2cc1bce94666404] = env->getMethodID(cls, "<init>", "()V");
                  mids$[mid_preProcessNode_9b07be8595532de7] = env->getMethodID(cls, "preProcessNode", "(Lorg/apache/lucene/queryparser/flexible/core/nodes/QueryNode;)Lorg/apache/lucene/queryparser/flexible/core/nodes/QueryNode;");
                  mids$[mid_postProcessNode_9b07be8595532de7] = env->getMethodID(cls, "postProcessNode", "(Lorg/apache/lucene/queryparser/flexible/core/nodes/QueryNode;)Lorg/apache/lucene/queryparser/flexible/core/nodes/QueryNode;");
                  mids$[mid_setChildrenOrder_e420eeaadf0bcd20] = env->getMethodID(cls, "setChildrenOrder", "(Ljava/util/List;)Ljava/util/List;");

                  class$ = new ::java::lang::Class(cls);
                  live$ = true;
                }
                return (jclass) class$->this$;
              }

              FuzzyQueryNodeProcessor::FuzzyQueryNodeProcessor() : ::org::apache::lucene::queryparser::flexible::core::processors::QueryNodeProcessorImpl(env->newObject(initializeClass, &mids$, mid_init$_f2cc1bce94666404)) {}
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace standard {
            namespace processors {
              static PyObject *t_FuzzyQueryNodeProcessor_cast_(PyTypeObject *type, PyObject *arg);
              static PyObject *t_FuzzyQueryNodeProcessor_instance_(PyTypeObject *type, PyObject *arg);
              static int t_FuzzyQueryNodeProcessor_init_(t_FuzzyQueryNodeProcessor *self, PyObject *args, PyObject *kwds);

              static PyMethodDef t_FuzzyQueryNodeProcessor__methods_[] = {
                DECLARE_METHOD(t_FuzzyQueryNodeProcessor, cast_, METH_O | METH_CLASS),
                DECLARE_METHOD(t_FuzzyQueryNodeProcessor, instance_, METH_O | METH_CLASS),
                { NULL, NULL, 0, NULL }
              };

              static PyType_Slot PY_TYPE_SLOTS(FuzzyQueryNodeProcessor)[] = {
                { Py_tp_methods, t_FuzzyQueryNodeProcessor__methods_ },
                { Py_tp_init, (void *) t_FuzzyQueryNodeProcessor_init_ },
                { 0, NULL }
              };

              static PyType_Def *PY_TYPE_BASES(FuzzyQueryNodeProcessor)[] = {
                &PY_TYPE_DEF(::org::apache::lucene::queryparser::flexible::core::processors::QueryNodeProcessorImpl),
                NULL
              };

              DEFINE_TYPE(FuzzyQueryNodeProcessor, t_FuzzyQueryNodeProcessor, FuzzyQueryNodeProcessor);

              void t_FuzzyQueryNodeProcessor::install(PyObject *module)
              {
                installType(&PY_TYPE(FuzzyQueryNodeProcessor), &PY_TYPE_DEF(FuzzyQueryNodeProcessor), module, "FuzzyQueryNodeProcessor", 0);
              }

              void t_FuzzyQueryNodeProcessor::initialize(PyObject *module)
              {
                PyObject_SetAttrString((PyObject *) PY_TYPE(FuzzyQueryNodeProcessor), "class_", make_descriptor(FuzzyQueryNodeProcessor::initializeClass, 1));
                PyObject_SetAttrString((PyObject *) PY_TYPE(FuzzyQueryNodeProcessor), "wrapfn_", make_descriptor(t_FuzzyQueryNodeProcessor::wrap_jobject));
                PyObject_SetAttrString((PyObject *) PY_TYPE(FuzzyQueryNodeProcessor), "boxfn_", make_descriptor(boxObject));
              }

              static PyObject *t_FuzzyQueryNodeProcessor_cast_(PyTypeObject *type, PyObject *arg)
              {
                if (!(arg = castCheck(arg, FuzzyQueryNodeProcessor::initializeClass, 1)))
                  return NULL;
                return t_FuzzyQueryNodeProcessor::wrap_Object(FuzzyQueryNodeProcessor(((t_FuzzyQueryNodeProcessor *) arg)->object.this$));
              }
              static PyObject *t_FuzzyQueryNodeProcessor_instance_(PyTypeObject *type, PyObject *arg)
              {
                if (!castCheck(arg, FuzzyQueryNodeProcessor::initializeClass, 0))
                  Py_RETURN_FALSE;
                Py_RETURN_TRUE;
              }

              static int t_FuzzyQueryNodeProcessor_init_(t_FuzzyQueryNodeProcessor *self, PyObject *args, PyObject *kwds)
              {
                FuzzyQueryNodeProcessor object((jobject) NULL);

                INT_CALL(object = FuzzyQueryNodeProcessor());
                self->object = object;

                return 0;
              }
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/payloads/FloatEncoder.h"
#include "org/apache/lucene/util/BytesRef.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace payloads {

          ::java::lang::Class *FloatEncoder::class$ = NULL;
          jmethodID *FloatEncoder::mids$ = NULL;
          bool FloatEncoder::live$ = false;

          jclass FloatEncoder::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/payloads/FloatEncoder");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_f2cc1bce94666404] = env->getMethodID(cls, "<init>", "()V");
              mids$[mid_encode_785adfa8e7d32a0b] = env->getMethodID(cls, "encode", "([CII)Lorg/apache/lucene/util/BytesRef;");

              class$ = new ::java::lang::Class(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          FloatEncoder::FloatEncoder() : ::org::apache::lucene::analysis::payloads::AbstractEncoder(env->newObject(initializeClass, &mids$, mid_init$_f2cc1bce94666404)) {}

          ::org::apache::lucene::util::BytesRef FloatEncoder::encode(const JArray< jchar > & a0, jint a1, jint a2) const
          {
            return ::org::apache::lucene::util::BytesRef(env->callObjectMethod(this$, mids$[mid_encode_785adfa8e7d32a0b], a0.this$, a1, a2));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace payloads {
          static PyObject *t_FloatEncoder_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_FloatEncoder_instance_(PyTypeObject *type, PyObject *arg);
          static int t_FloatEncoder_init_(t_FloatEncoder *self, PyObject *args, PyObject *kwds);
          static PyObject *t_FloatEncoder_encode(t_FloatEncoder *self, PyObject *args);

          static PyMethodDef t_FloatEncoder__methods_[] = {
            DECLARE_METHOD(t_FloatEncoder, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_FloatEncoder, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_FloatEncoder, encode, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          static PyType_Slot PY_TYPE_SLOTS(FloatEncoder)[] = {
            { Py_tp_methods, t_FloatEncoder__methods_ },
            { Py_tp_init, (void *) t_FloatEncoder_init_ },
            { 0, NULL }
          };

          static PyType_Def *PY_TYPE_BASES(FloatEncoder)[] = {
            &PY_TYPE_DEF(::org::apache::lucene::analysis::payloads::AbstractEncoder),
            NULL
          };

          DEFINE_TYPE(FloatEncoder, t_FloatEncoder, FloatEncoder);

          void t_FloatEncoder::install(PyObject *module)
          {
            installType(&PY_TYPE(FloatEncoder), &PY_TYPE_DEF(FloatEncoder), module, "FloatEncoder", 0);
          }

          void t_FloatEncoder::initialize(PyObject *module)
          {
            PyObject_SetAttrString((PyObject *) PY_TYPE(FloatEncoder), "class_", make_descriptor(FloatEncoder::initializeClass, 1));
            PyObject_SetAttrString((PyObject *) PY_TYPE(FloatEncoder), "wrapfn_", make_descriptor(t_FloatEncoder::wrap_jobject));
            PyObject_SetAttrString((PyObject *) PY_TYPE(FloatEncoder), "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_FloatEncoder_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, FloatEncoder::initializeClass, 1)))
              return NULL;
            return t_FloatEncoder::wrap_Object(FloatEncoder(((t_FloatEncoder *) arg)->object.this$));
          }
          static PyObject *t_FloatEncoder_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, FloatEncoder::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_FloatEncoder_init_(t_FloatEncoder *self, PyObject *args, PyObject *kwds)
          {
            FloatEncoder object((jobject) NULL);

            INT_CALL(object = FloatEncoder());
            self->object = object;

            return 0;
          }

          static PyObject *t_FloatEncoder_encode(t_FloatEncoder *self, PyObject *args)
          {
            JArray< jchar > a0((jobject) NULL);
            jint a1;
            jint a2;
            ::org::apache::lucene::util::BytesRef result((jobject) NULL);

            if (!parseArgs(args, "[CII", &a0, &a1, &a2))
            {
              OBJ_CALL(result = self->object.encode(a0, a1, a2));
              return ::org::apache::lucene::util::t_BytesRef::wrap_Object(result);
            }

            return callSuper(PY_TYPE(FloatEncoder), (PyObject *) self, "encode", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/miscellaneous/LengthFilter.h"
#include "org/apache/lucene/analysis/TokenStream.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace miscellaneous {

          ::java::lang::Class *LengthFilter::class$ = NULL;
          jmethodID *LengthFilter::mids$ = NULL;
          bool LengthFilter::live$ = false;

          jclass LengthFilter::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/miscellaneous/LengthFilter");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_cc3fe04da12abad6] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/analysis/TokenStream;II)V");
              mids$[mid_accept_8454bd5aa23fd11e] = env->getMethodID(cls, "accept", "()Z");

              class$ = new ::java::lang::Class(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          LengthFilter::LengthFilter(const ::org::apache::lucene::analysis::TokenStream & a0, jint a1, jint a2) : ::org::apache::lucene::analysis::FilteringTokenFilter(env->newObject(initializeClass, &mids$, mid_init$_cc3fe04da12abad6, a0.this$, a1, a2)) {}

          jboolean LengthFilter::accept() const
          {
            return env->callBooleanMethod(this$, mids$[mid_accept_8454bd5aa23fd11e]);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace miscellaneous {
          static PyObject *t_LengthFilter_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_LengthFilter_instance_(PyTypeObject *type, PyObject *arg);
          static int t_LengthFilter_init_(t_LengthFilter *self, PyObject *args, PyObject *kwds);
          static PyObject *t_LengthFilter_accept(t_LengthFilter *self);

          static PyMethodDef t_LengthFilter__methods_[] = {
            DECLARE_METHOD(t_LengthFilter, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_LengthFilter, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_LengthFilter, accept, METH_NOARGS),
            { NULL, NULL, 0, NULL }
          };

          static PyType_Slot PY_TYPE_SLOTS(LengthFilter)[] = {
            { Py_tp_methods, t_LengthFilter__methods_ },
            { Py_tp_init, (void *) t_LengthFilter_init_ },
            { 0, NULL }
          };

          static PyType_Def *PY_TYPE_BASES(LengthFilter)[] = {
            &PY_TYPE_DEF(::org::apache::lucene::analysis::FilteringTokenFilter),
            NULL
          };

          DEFINE_TYPE(LengthFilter, t_LengthFilter, LengthFilter);

          void t_LengthFilter::install(PyObject *module)
          {
            installType(&PY_TYPE(LengthFilter), &PY_TYPE_DEF(LengthFilter), module, "LengthFilter", 0);
          }

          void t_LengthFilter::initialize(PyObject *module)
          {
            PyObject_SetAttrString((PyObject *) PY_TYPE(LengthFilter), "class_", make_descriptor(LengthFilter::initializeClass, 1));
            PyObject_SetAttrString((PyObject *) PY_TYPE(LengthFilter), "wrapfn_", make_descriptor(t_LengthFilter::wrap_jobject));
            PyObject_SetAttrString((PyObject *) PY_TYPE(LengthFilter), "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_LengthFilter_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, LengthFilter::initializeClass, 1)))
              return NULL;
            return t_LengthFilter::wrap_Object(LengthFilter(((t_LengthFilter *) arg)->object.this$));
          }
          static PyObject *t_LengthFilter_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, LengthFilter::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_LengthFilter_init_(t_LengthFilter *self, PyObject *args, PyObject *kwds)
          {
            ::org::apache::lucene::analysis::TokenStream a0((jobject) NULL);
            jint a1;
            jint a2;
            LengthFilter object((jobject) NULL);

            if (!parseArgs(args, "kII", ::org::apache::lucene::analysis::TokenStream::initializeClass, &a0, &a1, &a2))
            {
              INT_CALL(object = LengthFilter(a0, a1, a2));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_LengthFilter_accept(t_LengthFilter *self)
          {
            jboolean result;
            OBJ_CALL(result = self->object.accept());
            Py_RETURN_BOOL(result);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/codecs/simpletext/SimpleTextStoredFieldsWriter.h"
#include "org/apache/lucene/store/IOContext.h"
#include "org/apache/lucene/index/IndexableField.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/store/Directory.h"
#include "java/lang/String.h"
#include "org/apache/lucene/index/FieldInfo.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/index/FieldInfos.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace codecs {
        namespace simpletext {

          ::java::lang::Class *SimpleTextStoredFieldsWriter::class$ = NULL;
          jmethodID *SimpleTextStoredFieldsWriter::mids$ = NULL;
          bool SimpleTextStoredFieldsWriter::live$ = false;

          jclass SimpleTextStoredFieldsWriter::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/codecs/simpletext/SimpleTextStoredFieldsWriter");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_2bb5442de459a81e] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/store/Directory;Ljava/lang/String;Lorg/apache/lucene/store/IOContext;)V");
              mids$[mid_close_f2cc1bce94666404] = env->getMethodID(cls, "close", "()V");
              mids$[mid_finish_8a63e70a8b43ee48] = env->getMethodID(cls, "finish", "(Lorg/apache/lucene/index/FieldInfos;I)V");
              mids$[mid_ramBytesUsed_2e5ae9edcb9b072f] = env->getMethodID(cls, "ramBytesUsed", "()J");
              mids$[mid_startDocument_f2cc1bce94666404] = env->getMethodID(cls, "startDocument", "()V");
              mids$[mid_writeField_c717cea83051791d] = env->getMethodID(cls, "writeField", "(Lorg/apache/lucene/index/FieldInfo;Lorg/apache/lucene/index/IndexableField;)V");

              class$ = new ::java::lang::Class(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          SimpleTextStoredFieldsWriter::SimpleTextStoredFieldsWriter(const ::org::apache::lucene::store::Directory & a0, const ::java::lang::String & a1, const ::org::apache::lucene::store::IOContext & a2) : ::org::apache::lucene::codecs::StoredFieldsWriter(env->newObject(initializeClass, &mids$, mid_init$_2bb5442de459a81e, a0.this$, a1.this$, a2.this$)) {}

          void SimpleTextStoredFieldsWriter::close() const
          {
            env->callVoidMethod(this$, mids$[mid_close_f2cc1bce94666404]);
          }

          void SimpleTextStoredFieldsWriter::finish(const ::org::apache::lucene::index::FieldInfos & a0, jint a1) const
          {
            env->callVoidMethod(this$, mids$[mid_finish_8a63e70a8b43ee48], a0.this$, a1);
          }

          jlong SimpleTextStoredFieldsWriter::ramBytesUsed() const
          {
            return env->callLongMethod(this$, mids$[mid_ramBytesUsed_2e5ae9edcb9b072f]);
          }

          void SimpleTextStoredFieldsWriter::startDocument() const
          {
            env->callVoidMethod(this$, mids$[mid_startDocument_f2cc1bce94666404]);
          }

          void SimpleTextStoredFieldsWriter::writeField(const ::org::apache::lucene::index::FieldInfo & a0, const ::org::apache::lucene::index::IndexableField & a1) const
          {
            env->callVoidMethod(this$, mids$[mid_writeField_c717cea83051791d], a0.this$, a1.this$);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace codecs {
        namespace simpletext {
          static PyObject *t_SimpleTextStoredFieldsWriter_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_SimpleTextStoredFieldsWriter_instance_(PyTypeObject *type, PyObject *arg);
          static int t_SimpleTextStoredFieldsWriter_init_(t_SimpleTextStoredFieldsWriter *self, PyObject *args, PyObject *kwds);
          static PyObject *t_SimpleTextStoredFieldsWriter_close(t_SimpleTextStoredFieldsWriter *self, PyObject *args);
          static PyObject *t_SimpleTextStoredFieldsWriter_finish(t_SimpleTextStoredFieldsWriter *self, PyObject *args);
          static PyObject *t_SimpleTextStoredFieldsWriter_ramBytesUsed(t_SimpleTextStoredFieldsWriter *self, PyObject *args);
          static PyObject *t_SimpleTextStoredFieldsWriter_startDocument(t_SimpleTextStoredFieldsWriter *self, PyObject *args);
          static PyObject *t_SimpleTextStoredFieldsWriter_writeField(t_SimpleTextStoredFieldsWriter *self, PyObject *args);

          static PyMethodDef t_SimpleTextStoredFieldsWriter__methods_[] = {
            DECLARE_METHOD(t_SimpleTextStoredFieldsWriter, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_SimpleTextStoredFieldsWriter, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_SimpleTextStoredFieldsWriter, close, METH_VARARGS),
            DECLARE_METHOD(t_SimpleTextStoredFieldsWriter, finish, METH_VARARGS),
            DECLARE_METHOD(t_SimpleTextStoredFieldsWriter, ramBytesUsed, METH_VARARGS),
            DECLARE_METHOD(t_SimpleTextStoredFieldsWriter, startDocument, METH_VARARGS),
            DECLARE_METHOD(t_SimpleTextStoredFieldsWriter, writeField, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          static PyType_Slot PY_TYPE_SLOTS(SimpleTextStoredFieldsWriter)[] = {
            { Py_tp_methods, t_SimpleTextStoredFieldsWriter__methods_ },
            { Py_tp_init, (void *) t_SimpleTextStoredFieldsWriter_init_ },
            { 0, NULL }
          };

          static PyType_Def *PY_TYPE_BASES(SimpleTextStoredFieldsWriter)[] = {
            &PY_TYPE_DEF(::org::apache::lucene::codecs::StoredFieldsWriter),
            NULL
          };

          DEFINE_TYPE(SimpleTextStoredFieldsWriter, t_SimpleTextStoredFieldsWriter, SimpleTextStoredFieldsWriter);

          void t_SimpleTextStoredFieldsWriter::install(PyObject *module)
          {
            installType(&PY_TYPE(SimpleTextStoredFieldsWriter), &PY_TYPE_DEF(SimpleTextStoredFieldsWriter), module, "SimpleTextStoredFieldsWriter", 0);
          }

          void t_SimpleTextStoredFieldsWriter::initialize(PyObject *module)
          {
            PyObject_SetAttrString((PyObject *) PY_TYPE(SimpleTextStoredFieldsWriter), "class_", make_descriptor(SimpleTextStoredFieldsWriter::initializeClass, 1));
            PyObject_SetAttrString((PyObject *) PY_TYPE(SimpleTextStoredFieldsWriter), "wrapfn_", make_descriptor(t_SimpleTextStoredFieldsWriter::wrap_jobject));
            PyObject_SetAttrString((PyObject *) PY_TYPE(SimpleTextStoredFieldsWriter), "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_SimpleTextStoredFieldsWriter_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, SimpleTextStoredFieldsWriter::initializeClass, 1)))
              return NULL;
            return t_SimpleTextStoredFieldsWriter::wrap_Object(SimpleTextStoredFieldsWriter(((t_SimpleTextStoredFieldsWriter *) arg)->object.this$));
          }
          static PyObject *t_SimpleTextStoredFieldsWriter_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, SimpleTextStoredFieldsWriter::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_SimpleTextStoredFieldsWriter_init_(t_SimpleTextStoredFieldsWriter *self, PyObject *args, PyObject *kwds)
          {
            ::org::apache::lucene::store::Directory a0((jobject) NULL);
            ::java::lang::String a1((jobject) NULL);
            ::org::apache::lucene::store::IOContext a2((jobject) NULL);
            SimpleTextStoredFieldsWriter object((jobject) NULL);

            if (!parseArgs(args, "ksk", ::org::apache::lucene::store::Directory::initializeClass, ::org::apache::lucene::store::IOContext::initializeClass, &a0, &a1, &a2))
            {
              INT_CALL(object = SimpleTextStoredFieldsWriter(a0, a1, a2));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_SimpleTextStoredFieldsWriter_close(t_SimpleTextStoredFieldsWriter *self, PyObject *args)
          {

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(self->object.close());
              Py_RETURN_NONE;
            }

            return callSuper(PY_TYPE(SimpleTextStoredFieldsWriter), (PyObject *) self, "close", args, 2);
          }

          static PyObject *t_SimpleTextStoredFieldsWriter_finish(t_SimpleTextStoredFieldsWriter *self, PyObject *args)
          {
            ::org::apache::lucene::index::FieldInfos a0((jobject) NULL);
            jint a1;

            if (!parseArgs(args, "kI", ::org::apache::lucene::index::FieldInfos::initializeClass, &a0, &a1))
            {
              OBJ_CALL(self->object.finish(a0, a1));
              Py_RETURN_NONE;
            }

            return callSuper(PY_TYPE(SimpleTextStoredFieldsWriter), (PyObject *) self, "finish", args, 2);
          }

          static PyObject *t_SimpleTextStoredFieldsWriter_ramBytesUsed(t_SimpleTextStoredFieldsWriter *self, PyObject *args)
          {
            jlong result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.ramBytesUsed());
              return PyLong_FromLongLong((PY_LONG_LONG) result);
            }

            return callSuper(PY_TYPE(SimpleTextStoredFieldsWriter), (PyObject *) self, "ramBytesUsed", args, 2);
          }

          static PyObject *t_SimpleTextStoredFieldsWriter_startDocument(t_SimpleTextStoredFieldsWriter *self, PyObject *args)
          {

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(self->object.startDocument());
              Py_RETURN_NONE;
            }

            return callSuper(PY_TYPE(SimpleTextStoredFieldsWriter), (PyObject *) self, "startDocument", args, 2);
          }

          static PyObject *t_SimpleTextStoredFieldsWriter_writeField(t_SimpleTextStoredFieldsWriter *self, PyObject *args)
          {
            ::org::apache::lucene::index::FieldInfo a0((jobject) NULL);
            ::org::apache::lucene::index::IndexableField a1((jobject) NULL);

            if (!parseArgs(args, "kk", ::org::apache::lucene::index::FieldInfo::initializeClass, ::org::apache::lucene::index::IndexableField::initializeClass, &a0, &a1))
            {
              OBJ_CALL(self->object.writeField(a0, a1));
              Py_RETURN_NONE;
            }

            return callSuper(PY_TYPE(SimpleTextStoredFieldsWriter), (PyObject *) self, "writeField", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/core/UnicodeWhitespaceAnalyzer.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace core {

          ::java::lang::Class *UnicodeWhitespaceAnalyzer::class$ = NULL;
          jmethodID *UnicodeWhitespaceAnalyzer::mids$ = NULL;
          bool UnicodeWhitespaceAnalyzer::live$ = false;

          jclass UnicodeWhitespaceAnalyzer::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/core/UnicodeWhitespaceAnalyzer");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_f2cc1bce94666404] = env->getMethodID(cls, "<init>", "()V");
              mids$[mid_createComponents_c22fd244b0553c1e] = env->getMethodID(cls, "createComponents", "(Ljava/lang/String;)Lorg/apache/lucene/analysis/Analyzer$TokenStreamComponents;");

              class$ = new ::java::lang::Class(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          UnicodeWhitespaceAnalyzer::UnicodeWhitespaceAnalyzer() : ::org::apache::lucene::analysis::Analyzer(env->newObject(initializeClass, &mids$, mid_init$_f2cc1bce94666404)) {}
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace core {
          static PyObject *t_UnicodeWhitespaceAnalyzer_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_UnicodeWhitespaceAnalyzer_instance_(PyTypeObject *type, PyObject *arg);
          static int t_UnicodeWhitespaceAnalyzer_init_(t_UnicodeWhitespaceAnalyzer *self, PyObject *args, PyObject *kwds);

          static PyMethodDef t_UnicodeWhitespaceAnalyzer__methods_[] = {
            DECLARE_METHOD(t_UnicodeWhitespaceAnalyzer, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_UnicodeWhitespaceAnalyzer, instance_, METH_O | METH_CLASS),
            { NULL, NULL, 0, NULL }
          };

          static PyType_Slot PY_TYPE_SLOTS(UnicodeWhitespaceAnalyzer)[] = {
            { Py_tp_methods, t_UnicodeWhitespaceAnalyzer__methods_ },
            { Py_tp_init, (void *) t_UnicodeWhitespaceAnalyzer_init_ },
            { 0, NULL }
          };

          static PyType_Def *PY_TYPE_BASES(UnicodeWhitespaceAnalyzer)[] = {
            &PY_TYPE_DEF(::org::apache::lucene::analysis::Analyzer),
            NULL
          };

          DEFINE_TYPE(UnicodeWhitespaceAnalyzer, t_UnicodeWhitespaceAnalyzer, UnicodeWhitespaceAnalyzer);

          void t_UnicodeWhitespaceAnalyzer::install(PyObject *module)
          {
            installType(&PY_TYPE(UnicodeWhitespaceAnalyzer), &PY_TYPE_DEF(UnicodeWhitespaceAnalyzer), module, "UnicodeWhitespaceAnalyzer", 0);
          }

          void t_UnicodeWhitespaceAnalyzer::initialize(PyObject *module)
          {
            PyObject_SetAttrString((PyObject *) PY_TYPE(UnicodeWhitespaceAnalyzer), "class_", make_descriptor(UnicodeWhitespaceAnalyzer::initializeClass, 1));
            PyObject_SetAttrString((PyObject *) PY_TYPE(UnicodeWhitespaceAnalyzer), "wrapfn_", make_descriptor(t_UnicodeWhitespaceAnalyzer::wrap_jobject));
            PyObject_SetAttrString((PyObject *) PY_TYPE(UnicodeWhitespaceAnalyzer), "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_UnicodeWhitespaceAnalyzer_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, UnicodeWhitespaceAnalyzer::initializeClass, 1)))
              return NULL;
            return t_UnicodeWhitespaceAnalyzer::wrap_Object(UnicodeWhitespaceAnalyzer(((t_UnicodeWhitespaceAnalyzer *) arg)->object.this$));
          }
          static PyObject *t_UnicodeWhitespaceAnalyzer_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, UnicodeWhitespaceAnalyzer::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_UnicodeWhitespaceAnalyzer_init_(t_UnicodeWhitespaceAnalyzer *self, PyObject *args, PyObject *kwds)
          {
            UnicodeWhitespaceAnalyzer object((jobject) NULL);

            INT_CALL(object = UnicodeWhitespaceAnalyzer());
            self->object = object;

            return 0;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/index/FilterBinaryDocValues.h"
#include "org/apache/lucene/util/BytesRef.h"
#include "java/io/IOException.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {

        ::java::lang::Class *FilterBinaryDocValues::class$ = NULL;
        jmethodID *FilterBinaryDocValues::mids$ = NULL;
        bool FilterBinaryDocValues::live$ = false;

        jclass FilterBinaryDocValues::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/index/FilterBinaryDocValues");

            mids$ = new jmethodID[max_mid];
            mids$[mid_advance_1e143afe1894d213] = env->getMethodID(cls, "advance", "(I)I");
            mids$[mid_advanceExact_a1d30e1ee40c89a2] = env->getMethodID(cls, "advanceExact", "(I)Z");
            mids$[mid_binaryValue_7af2ea2e37ce82b8] = env->getMethodID(cls, "binaryValue", "()Lorg/apache/lucene/util/BytesRef;");
            mids$[mid_cost_2e5ae9edcb9b072f] = env->getMethodID(cls, "cost", "()J");
            mids$[mid_docID_9972fcc56b44e79d] = env->getMethodID(cls, "docID", "()I");
            mids$[mid_nextDoc_9972fcc56b44e79d] = env->getMethodID(cls, "nextDoc", "()I");

            class$ = new ::java::lang::Class(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        jint FilterBinaryDocValues::advance(jint a0) const
        {
          return env->callIntMethod(this$, mids$[mid_advance_1e143afe1894d213], a0);
        }

        jboolean FilterBinaryDocValues::advanceExact(jint a0) const
        {
          return env->callBooleanMethod(this$, mids$[mid_advanceExact_a1d30e1ee40c89a2], a0);
        }

        ::org::apache::lucene::util::BytesRef FilterBinaryDocValues::binaryValue() const
        {
          return ::org::apache::lucene::util::BytesRef(env->callObjectMethod(this$, mids$[mid_binaryValue_7af2ea2e37ce82b8]));
        }

        jlong FilterBinaryDocValues::cost() const
        {
          return env->callLongMethod(this$, mids$[mid_cost_2e5ae9edcb9b072f]);
        }

        jint FilterBinaryDocValues::docID() const
        {
          return env->callIntMethod(this$, mids$[mid_docID_9972fcc56b44e79d]);
        }

        jint FilterBinaryDocValues::nextDoc() const
        {
          return env->callIntMethod(this$, mids$[mid_nextDoc_9972fcc56b44e79d]);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {
        static PyObject *t_FilterBinaryDocValues_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_FilterBinaryDocValues_instance_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_FilterBinaryDocValues_advance(t_FilterBinaryDocValues *self, PyObject *args);
        static PyObject *t_FilterBinaryDocValues_advanceExact(t_FilterBinaryDocValues *self, PyObject *args);
        static PyObject *t_FilterBinaryDocValues_binaryValue(t_FilterBinaryDocValues *self, PyObject *args);
        static PyObject *t_FilterBinaryDocValues_cost(t_FilterBinaryDocValues *self, PyObject *args);
        static PyObject *t_FilterBinaryDocValues_docID(t_FilterBinaryDocValues *self, PyObject *args);
        static PyObject *t_FilterBinaryDocValues_nextDoc(t_FilterBinaryDocValues *self, PyObject *args);

        static PyMethodDef t_FilterBinaryDocValues__methods_[] = {
          DECLARE_METHOD(t_FilterBinaryDocValues, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_FilterBinaryDocValues, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_FilterBinaryDocValues, advance, METH_VARARGS),
          DECLARE_METHOD(t_FilterBinaryDocValues, advanceExact, METH_VARARGS),
          DECLARE_METHOD(t_FilterBinaryDocValues, binaryValue, METH_VARARGS),
          DECLARE_METHOD(t_FilterBinaryDocValues, cost, METH_VARARGS),
          DECLARE_METHOD(t_FilterBinaryDocValues, docID, METH_VARARGS),
          DECLARE_METHOD(t_FilterBinaryDocValues, nextDoc, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        static PyType_Slot PY_TYPE_SLOTS(FilterBinaryDocValues)[] = {
          { Py_tp_methods, t_FilterBinaryDocValues__methods_ },
          { Py_tp_init, (void *) abstract_init },
          { 0, NULL }
        };

        static PyType_Def *PY_TYPE_BASES(FilterBinaryDocValues)[] = {
          &PY_TYPE_DEF(::org::apache::lucene::index::BinaryDocValues),
          NULL
        };

        DEFINE_TYPE(FilterBinaryDocValues, t_FilterBinaryDocValues, FilterBinaryDocValues);

        void t_FilterBinaryDocValues::install(PyObject *module)
        {
          installType(&PY_TYPE(FilterBinaryDocValues), &PY_TYPE_DEF(FilterBinaryDocValues), module, "FilterBinaryDocValues", 0);
        }

        void t_FilterBinaryDocValues::initialize(PyObject *module)
        {
          PyObject_SetAttrString((PyObject *) PY_TYPE(FilterBinaryDocValues), "class_", make_descriptor(FilterBinaryDocValues::initializeClass, 1));
          PyObject_SetAttrString((PyObject *) PY_TYPE(FilterBinaryDocValues), "wrapfn_", make_descriptor(t_FilterBinaryDocValues::wrap_jobject));
          PyObject_SetAttrString((PyObject *) PY_TYPE(FilterBinaryDocValues), "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_FilterBinaryDocValues_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, FilterBinaryDocValues::initializeClass, 1)))
            return NULL;
          return t_FilterBinaryDocValues::wrap_Object(FilterBinaryDocValues(((t_FilterBinaryDocValues *) arg)->object.this$));
        }
        static PyObject *t_FilterBinaryDocValues_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, FilterBinaryDocValues::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static PyObject *t_FilterBinaryDocValues_advance(t_FilterBinaryDocValues *self, PyObject *args)
        {
          jint a0;
          jint result;

          if (!parseArgs(args, "I", &a0))
          {
            OBJ_CALL(result = self->object.advance(a0));
            return PyLong_FromLong((long) result);
          }

          return callSuper(PY_TYPE(FilterBinaryDocValues), (PyObject *) self, "advance", args, 2);
        }

        static PyObject *t_FilterBinaryDocValues_advanceExact(t_FilterBinaryDocValues *self, PyObject *args)
        {
          jint a0;
          jboolean result;

          if (!parseArgs(args, "I", &a0))
          {
            OBJ_CALL(result = self->object.advanceExact(a0));
            Py_RETURN_BOOL(result);
          }

          return callSuper(PY_TYPE(FilterBinaryDocValues), (PyObject *) self, "advanceExact", args, 2);
        }

        static PyObject *t_FilterBinaryDocValues_binaryValue(t_FilterBinaryDocValues *self, PyObject *args)
        {
          ::org::apache::lucene::util::BytesRef result((jobject) NULL);

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.binaryValue());
            return ::org::apache::lucene::util::t_BytesRef::wrap_Object(result);
          }

          return callSuper(PY_TYPE(FilterBinaryDocValues), (PyObject *) self, "binaryValue", args, 2);
        }

        static PyObject *t_FilterBinaryDocValues_cost(t_FilterBinaryDocValues *self, PyObject *args)
        {
          jlong result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.cost());
            return PyLong_FromLongLong((PY_LONG_LONG) result);
          }

          return callSuper(PY_TYPE(FilterBinaryDocValues), (PyObject *) self, "cost", args, 2);
        }

        static PyObject *t_FilterBinaryDocValues_docID(t_FilterBinaryDocValues *self, PyObject *args)
        {
          jint result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.docID());
            return PyLong_FromLong((long) result);
          }

          return callSuper(PY_TYPE(FilterBinaryDocValues), (PyObject *) self, "docID", args, 2);
        }

        static PyObject *t_FilterBinaryDocValues_nextDoc(t_FilterBinaryDocValues *self, PyObject *args)
        {
          jint result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.nextDoc());
            return PyLong_FromLong((long) result);
          }

          return callSuper(PY_TYPE(FilterBinaryDocValues), (PyObject *) self, "nextDoc", args, 2);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/comparators/FloatComparator.h"
#include "org/apache/lucene/index/LeafReaderContext.h"
#include "org/apache/lucene/search/LeafFieldComparator.h"
#include "java/lang/Float.h"
#include "java/lang/Class.h"
#include "java/lang/String.h"
#include "java/io/IOException.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace comparators {

          ::java::lang::Class *FloatComparator::class$ = NULL;
          jmethodID *FloatComparator::mids$ = NULL;
          bool FloatComparator::live$ = false;

          jclass FloatComparator::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/search/comparators/FloatComparator");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_7eea80f78a0a7ef5] = env->getMethodID(cls, "<init>", "(ILjava/lang/String;Ljava/lang/Float;ZI)V");
              mids$[mid_compare_57a58545eba514db] = env->getMethodID(cls, "compare", "(II)I");
              mids$[mid_getLeafComparator_6183906b7058c4b5] = env->getMethodID(cls, "getLeafComparator", "(Lorg/apache/lucene/index/LeafReaderContext;)Lorg/apache/lucene/search/LeafFieldComparator;");
              mids$[mid_setTopValue_983cdbc3424b161f] = env->getMethodID(cls, "setTopValue", "(Ljava/lang/Float;)V");
              mids$[mid_value_36191ce480b45955] = env->getMethodID(cls, "value", "(I)Ljava/lang/Float;");

              class$ = new ::java::lang::Class(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          FloatComparator::FloatComparator(jint a0, const ::java::lang::String & a1, const ::java::lang::Float & a2, jboolean a3, jint a4) : ::org::apache::lucene::search::comparators::NumericComparator(env->newObject(initializeClass, &mids$, mid_init$_7eea80f78a0a7ef5, a0, a1.this$, a2.this$, a3, a4)) {}

          jint FloatComparator::compare(jint a0, jint a1) const
          {
            return env->callIntMethod(this$, mids$[mid_compare_57a58545eba514db], a0, a1);
          }

          ::org::apache::lucene::search::LeafFieldComparator FloatComparator::getLeafComparator(const ::org::apache::lucene::index::LeafReaderContext & a0) const
          {
            return ::org::apache::lucene::search::LeafFieldComparator(env->callObjectMethod(this$, mids$[mid_getLeafComparator_6183906b7058c4b5], a0.this$));
          }

          void FloatComparator::setTopValue(const ::java::lang::Float & a0) const
          {
            env->callVoidMethod(this$, mids$[mid_setTopValue_983cdbc3424b161f], a0.this$);
          }

          ::java::lang::Float FloatComparator::value(jint a0) const
          {
            return ::java::lang::Float(env->callObjectMethod(this$, mids$[mid_value_36191ce480b45955], a0));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace comparators {
          static PyObject *t_FloatComparator_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_FloatComparator_instance_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_FloatComparator_of_(t_FloatComparator *self, PyObject *args);
          static int t_FloatComparator_init_(t_FloatComparator *self, PyObject *args, PyObject *kwds);
          static PyObject *t_FloatComparator_compare(t_FloatComparator *self, PyObject *args);
          static PyObject *t_FloatComparator_getLeafComparator(t_FloatComparator *self, PyObject *args);
          static PyObject *t_FloatComparator_setTopValue(t_FloatComparator *self, PyObject *args);
          static PyObject *t_FloatComparator_value(t_FloatComparator *self, PyObject *args);
          static int t_FloatComparator_set__topValue(t_FloatComparator *self, PyObject *arg, void *data);
          static PyObject *t_FloatComparator_get__parameters_(t_FloatComparator *self, void *data);
          static PyGetSetDef t_FloatComparator__fields_[] = {
            DECLARE_SET_FIELD(t_FloatComparator, topValue),
            DECLARE_GET_FIELD(t_FloatComparator, parameters_),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_FloatComparator__methods_[] = {
            DECLARE_METHOD(t_FloatComparator, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_FloatComparator, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_FloatComparator, of_, METH_VARARGS),
            DECLARE_METHOD(t_FloatComparator, compare, METH_VARARGS),
            DECLARE_METHOD(t_FloatComparator, getLeafComparator, METH_VARARGS),
            DECLARE_METHOD(t_FloatComparator, setTopValue, METH_VARARGS),
            DECLARE_METHOD(t_FloatComparator, value, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          static PyType_Slot PY_TYPE_SLOTS(FloatComparator)[] = {
            { Py_tp_methods, t_FloatComparator__methods_ },
            { Py_tp_init, (void *) t_FloatComparator_init_ },
            { Py_tp_getset, t_FloatComparator__fields_ },
            { 0, NULL }
          };

          static PyType_Def *PY_TYPE_BASES(FloatComparator)[] = {
            &PY_TYPE_DEF(::org::apache::lucene::search::comparators::NumericComparator),
            NULL
          };

          DEFINE_TYPE(FloatComparator, t_FloatComparator, FloatComparator);
          PyObject *t_FloatComparator::wrap_Object(const FloatComparator& object, PyTypeObject *p0)
          {
            PyObject *obj = t_FloatComparator::wrap_Object(object);
            if (obj != NULL && obj != Py_None)
            {
              t_FloatComparator *self = (t_FloatComparator *) obj;
              self->parameters[0] = p0;
            }
            return obj;
          }

          PyObject *t_FloatComparator::wrap_jobject(const jobject& object, PyTypeObject *p0)
          {
            PyObject *obj = t_FloatComparator::wrap_jobject(object);
            if (obj != NULL && obj != Py_None)
            {
              t_FloatComparator *self = (t_FloatComparator *) obj;
              self->parameters[0] = p0;
            }
            return obj;
          }

          void t_FloatComparator::install(PyObject *module)
          {
            installType(&PY_TYPE(FloatComparator), &PY_TYPE_DEF(FloatComparator), module, "FloatComparator", 0);
          }

          void t_FloatComparator::initialize(PyObject *module)
          {
            PyObject_SetAttrString((PyObject *) PY_TYPE(FloatComparator), "class_", make_descriptor(FloatComparator::initializeClass, 1));
            PyObject_SetAttrString((PyObject *) PY_TYPE(FloatComparator), "wrapfn_", make_descriptor(t_FloatComparator::wrap_jobject));
            PyObject_SetAttrString((PyObject *) PY_TYPE(FloatComparator), "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_FloatComparator_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, FloatComparator::initializeClass, 1)))
              return NULL;
            return t_FloatComparator::wrap_Object(FloatComparator(((t_FloatComparator *) arg)->object.this$));
          }
          static PyObject *t_FloatComparator_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, FloatComparator::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static PyObject *t_FloatComparator_of_(t_FloatComparator *self, PyObject *args)
          {
            if (!parseArg(args, "T", 1, &(self->parameters)))
              Py_RETURN_SELF;
            return PyErr_SetArgsError((PyObject *) self, "of_", args);
          }

          static int t_FloatComparator_init_(t_FloatComparator *self, PyObject *args, PyObject *kwds)
          {
            jint a0;
            ::java::lang::String a1((jobject) NULL);
            ::java::lang::Float a2((jobject) NULL);
            jboolean a3;
            jint a4;
            FloatComparator object((jobject) NULL);

            if (!parseArgs(args, "IsOZI", ::java::lang::PY_TYPE(Float), &a0, &a1, &a2, &a3, &a4))
            {
              INT_CALL(object = FloatComparator(a0, a1, a2, a3, a4));
              self->object = object;
              self->parameters[0] = ::java::lang::PY_TYPE(Float);
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_FloatComparator_compare(t_FloatComparator *self, PyObject *args)
          {
            jint a0;
            jint a1;
            jint result;

            if (!parseArgs(args, "II", &a0, &a1))
            {
              OBJ_CALL(result = self->object.compare(a0, a1));
              return PyLong_FromLong((long) result);
            }

            return callSuper(PY_TYPE(FloatComparator), (PyObject *) self, "compare", args, 2);
          }

          static PyObject *t_FloatComparator_getLeafComparator(t_FloatComparator *self, PyObject *args)
          {
            ::org::apache::lucene::index::LeafReaderContext a0((jobject) NULL);
            ::org::apache::lucene::search::LeafFieldComparator result((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::index::LeafReaderContext::initializeClass, &a0))
            {
              OBJ_CALL(result = self->object.getLeafComparator(a0));
              return ::org::apache::lucene::search::t_LeafFieldComparator::wrap_Object(result);
            }

            return callSuper(PY_TYPE(FloatComparator), (PyObject *) self, "getLeafComparator", args, 2);
          }

          static PyObject *t_FloatComparator_setTopValue(t_FloatComparator *self, PyObject *args)
          {
            ::java::lang::Float a0((jobject) NULL);

            if (!parseArgs(args, "O", ::java::lang::PY_TYPE(Float), &a0))
            {
              OBJ_CALL(self->object.setTopValue(a0));
              Py_RETURN_NONE;
            }

            return callSuper(PY_TYPE(FloatComparator), (PyObject *) self, "setTopValue", args, 2);
          }

          static PyObject *t_FloatComparator_value(t_FloatComparator *self, PyObject *args)
          {
            jint a0;
            ::java::lang::Float result((jobject) NULL);

            if (!parseArgs(args, "I", &a0))
            {
              OBJ_CALL(result = self->object.value(a0));
              return ::java::lang::t_Float::wrap_Object(result);
            }

            return callSuper(PY_TYPE(FloatComparator), (PyObject *) self, "value", args, 2);
          }
          static PyObject *t_FloatComparator_get__parameters_(t_FloatComparator *self, void *data)
          {
            return typeParameters(self->parameters, sizeof(self->parameters));
          }

          static int t_FloatComparator_set__topValue(t_FloatComparator *self, PyObject *arg, void *data)
          {
            {
              ::java::lang::Float value((jobject) NULL);
              if (!parseArg(arg, "O", ::java::lang::PY_TYPE(Float), &value))
              {
                INT_CALL(self->object.setTopValue(value));
                return 0;
              }
            }
            PyErr_SetArgsError((PyObject *) self, "topValue", arg);
            return -1;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/FieldComparatorSource.h"
#include "org/apache/lucene/search/FieldComparator.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {

        ::java::lang::Class *FieldComparatorSource::class$ = NULL;
        jmethodID *FieldComparatorSource::mids$ = NULL;
        bool FieldComparatorSource::live$ = false;

        jclass FieldComparatorSource::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/search/FieldComparatorSource");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_f2cc1bce94666404] = env->getMethodID(cls, "<init>", "()V");
            mids$[mid_newComparator_4abec46c53076dc4] = env->getMethodID(cls, "newComparator", "(Ljava/lang/String;IIZ)Lorg/apache/lucene/search/FieldComparator;");

            class$ = new ::java::lang::Class(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        FieldComparatorSource::FieldComparatorSource() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_f2cc1bce94666404)) {}

        ::org::apache::lucene::search::FieldComparator FieldComparatorSource::newComparator(const ::java::lang::String & a0, jint a1, jint a2, jboolean a3) const
        {
          return ::org::apache::lucene::search::FieldComparator(env->callObjectMethod(this$, mids$[mid_newComparator_4abec46c53076dc4], a0.this$, a1, a2, a3));
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        static PyObject *t_FieldComparatorSource_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_FieldComparatorSource_instance_(PyTypeObject *type, PyObject *arg);
        static int t_FieldComparatorSource_init_(t_FieldComparatorSource *self, PyObject *args, PyObject *kwds);
        static PyObject *t_FieldComparatorSource_newComparator(t_FieldComparatorSource *self, PyObject *args);

        static PyMethodDef t_FieldComparatorSource__methods_[] = {
          DECLARE_METHOD(t_FieldComparatorSource, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_FieldComparatorSource, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_FieldComparatorSource, newComparator, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        static PyType_Slot PY_TYPE_SLOTS(FieldComparatorSource)[] = {
          { Py_tp_methods, t_FieldComparatorSource__methods_ },
          { Py_tp_init, (void *) t_FieldComparatorSource_init_ },
          { 0, NULL }
        };

        static PyType_Def *PY_TYPE_BASES(FieldComparatorSource)[] = {
          &PY_TYPE_DEF(::java::lang::Object),
          NULL
        };

        DEFINE_TYPE(FieldComparatorSource, t_FieldComparatorSource, FieldComparatorSource);

        void t_FieldComparatorSource::install(PyObject *module)
        {
          installType(&PY_TYPE(FieldComparatorSource), &PY_TYPE_DEF(FieldComparatorSource), module, "FieldComparatorSource", 0);
        }

        void t_FieldComparatorSource::initialize(PyObject *module)
        {
          PyObject_SetAttrString((PyObject *) PY_TYPE(FieldComparatorSource), "class_", make_descriptor(FieldComparatorSource::initializeClass, 1));
          PyObject_SetAttrString((PyObject *) PY_TYPE(FieldComparatorSource), "wrapfn_", make_descriptor(t_FieldComparatorSource::wrap_jobject));
          PyObject_SetAttrString((PyObject *) PY_TYPE(FieldComparatorSource), "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_FieldComparatorSource_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, FieldComparatorSource::initializeClass, 1)))
            return NULL;
          return t_FieldComparatorSource::wrap_Object(FieldComparatorSource(((t_FieldComparatorSource *) arg)->object.this$));
        }
        static PyObject *t_FieldComparatorSource_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, FieldComparatorSource::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_FieldComparatorSource_init_(t_FieldComparatorSource *self, PyObject *args, PyObject *kwds)
        {
          FieldComparatorSource object((jobject) NULL);

          INT_CALL(object = FieldComparatorSource());
          self->object = object;

          return 0;
        }

        static PyObject *t_FieldComparatorSource_newComparator(t_FieldComparatorSource *self, PyObject *args)
        {
          ::java::lang::String a0((jobject) NULL);
          jint a1;
          jint a2;
          jboolean a3;
          ::org::apache::lucene::search::FieldComparator result((jobject) NULL);

          if (!parseArgs(args, "sIIZ", &a0, &a1, &a2, &a3))
          {
            OBJ_CALL(result = self->object.newComparator(a0, a1, a2, a3));
            return ::org::apache::lucene::search::t_FieldComparator::wrap_Object(result);
          }

          PyErr_SetArgsError((PyObject *) self, "newComparator", args);
          return NULL;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/miscellaneous/KeywordMarkerFilter.h"
#include "java/io/IOException.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace miscellaneous {

          ::java::lang::Class *KeywordMarkerFilter::class$ = NULL;
          jmethodID *KeywordMarkerFilter::mids$ = NULL;
          bool KeywordMarkerFilter::live$ = false;

          jclass KeywordMarkerFilter::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/miscellaneous/KeywordMarkerFilter");

              mids$ = new jmethodID[max_mid];
              mids$[mid_incrementToken_8454bd5aa23fd11e] = env->getMethodID(cls, "incrementToken", "()Z");
              mids$[mid_isKeyword_8454bd5aa23fd11e] = env->getMethodID(cls, "isKeyword", "()Z");

              class$ = new ::java::lang::Class(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          jboolean KeywordMarkerFilter::incrementToken() const
          {
            return env->callBooleanMethod(this$, mids$[mid_incrementToken_8454bd5aa23fd11e]);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace miscellaneous {
          static PyObject *t_KeywordMarkerFilter_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_KeywordMarkerFilter_instance_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_KeywordMarkerFilter_incrementToken(t_KeywordMarkerFilter *self, PyObject *args);

          static PyMethodDef t_KeywordMarkerFilter__methods_[] = {
            DECLARE_METHOD(t_KeywordMarkerFilter, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_KeywordMarkerFilter, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_KeywordMarkerFilter, incrementToken, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          static PyType_Slot PY_TYPE_SLOTS(KeywordMarkerFilter)[] = {
            { Py_tp_methods, t_KeywordMarkerFilter__methods_ },
            { Py_tp_init, (void *) abstract_init },
            { 0, NULL }
          };

          static PyType_Def *PY_TYPE_BASES(KeywordMarkerFilter)[] = {
            &PY_TYPE_DEF(::org::apache::lucene::analysis::TokenFilter),
            NULL
          };

          DEFINE_TYPE(KeywordMarkerFilter, t_KeywordMarkerFilter, KeywordMarkerFilter);

          void t_KeywordMarkerFilter::install(PyObject *module)
          {
            installType(&PY_TYPE(KeywordMarkerFilter), &PY_TYPE_DEF(KeywordMarkerFilter), module, "KeywordMarkerFilter", 0);
          }

          void t_KeywordMarkerFilter::initialize(PyObject *module)
          {
            PyObject_SetAttrString((PyObject *) PY_TYPE(KeywordMarkerFilter), "class_", make_descriptor(KeywordMarkerFilter::initializeClass, 1));
            PyObject_SetAttrString((PyObject *) PY_TYPE(KeywordMarkerFilter), "wrapfn_", make_descriptor(t_KeywordMarkerFilter::wrap_jobject));
            PyObject_SetAttrString((PyObject *) PY_TYPE(KeywordMarkerFilter), "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_KeywordMarkerFilter_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, KeywordMarkerFilter::initializeClass, 1)))
              return NULL;
            return t_KeywordMarkerFilter::wrap_Object(KeywordMarkerFilter(((t_KeywordMarkerFilter *) arg)->object.this$));
          }
          static PyObject *t_KeywordMarkerFilter_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, KeywordMarkerFilter::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static PyObject *t_KeywordMarkerFilter_incrementToken(t_KeywordMarkerFilter *self, PyObject *args)
          {
            jboolean result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.incrementToken());
              Py_RETURN_BOOL(result);
            }

            return callSuper(PY_TYPE(KeywordMarkerFilter), (PyObject *) self, "incrementToken", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/tokenattributes/FlagsAttribute.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace tokenattributes {

          ::java::lang::Class *FlagsAttribute::class$ = NULL;
          jmethodID *FlagsAttribute::mids$ = NULL;
          bool FlagsAttribute::live$ = false;

          jclass FlagsAttribute::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/tokenattributes/FlagsAttribute");

              mids$ = new jmethodID[max_mid];
              mids$[mid_getFlags_9972fcc56b44e79d] = env->getMethodID(cls, "getFlags", "()I");
              mids$[mid_setFlags_040c4cd0390c5aff] = env->getMethodID(cls, "setFlags", "(I)V");

              class$ = new ::java::lang::Class(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          jint FlagsAttribute::getFlags() const
          {
            return env->callIntMethod(this$, mids$[mid_getFlags_9972fcc56b44e79d]);
          }

          void FlagsAttribute::setFlags(jint a0) const
          {
            env->callVoidMethod(this$, mids$[mid_setFlags_040c4cd0390c5aff], a0);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace tokenattributes {
          static PyObject *t_FlagsAttribute_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_FlagsAttribute_instance_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_FlagsAttribute_getFlags(t_FlagsAttribute *self);
          static PyObject *t_FlagsAttribute_setFlags(t_FlagsAttribute *self, PyObject *arg);
          static PyObject *t_FlagsAttribute_get__flags(t_FlagsAttribute *self, void *data);
          static int t_FlagsAttribute_set__flags(t_FlagsAttribute *self, PyObject *arg, void *data);
          static PyGetSetDef t_FlagsAttribute__fields_[] = {
            DECLARE_GETSET_FIELD(t_FlagsAttribute, flags),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_FlagsAttribute__methods_[] = {
            DECLARE_METHOD(t_FlagsAttribute, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_FlagsAttribute, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_FlagsAttribute, getFlags, METH_NOARGS),
            DECLARE_METHOD(t_FlagsAttribute, setFlags, METH_O),
            { NULL, NULL, 0, NULL }
          };

          static PyType_Slot PY_TYPE_SLOTS(FlagsAttribute)[] = {
            { Py_tp_methods, t_FlagsAttribute__methods_ },
            { Py_tp_init, (void *) abstract_init },
            { Py_tp_getset, t_FlagsAttribute__fields_ },
            { 0, NULL }
          };

          static PyType_Def *PY_TYPE_BASES(FlagsAttribute)[] = {
            &PY_TYPE_DEF(::org::apache::lucene::util::Attribute),
            NULL
          };

          DEFINE_TYPE(FlagsAttribute, t_FlagsAttribute, FlagsAttribute);

          void t_FlagsAttribute::install(PyObject *module)
          {
            installType(&PY_TYPE(FlagsAttribute), &PY_TYPE_DEF(FlagsAttribute), module, "FlagsAttribute", 0);
          }

          void t_FlagsAttribute::initialize(PyObject *module)
          {
            PyObject_SetAttrString((PyObject *) PY_TYPE(FlagsAttribute), "class_", make_descriptor(FlagsAttribute::initializeClass, 1));
            PyObject_SetAttrString((PyObject *) PY_TYPE(FlagsAttribute), "wrapfn_", make_descriptor(t_FlagsAttribute::wrap_jobject));
            PyObject_SetAttrString((PyObject *) PY_TYPE(FlagsAttribute), "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_FlagsAttribute_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, FlagsAttribute::initializeClass, 1)))
              return NULL;
            return t_FlagsAttribute::wrap_Object(FlagsAttribute(((t_FlagsAttribute *) arg)->object.this$));
          }
          static PyObject *t_FlagsAttribute_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, FlagsAttribute::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static PyObject *t_FlagsAttribute_getFlags(t_FlagsAttribute *self)
          {
            jint result;
            OBJ_CALL(result = self->object.getFlags());
            return PyLong_FromLong((long) result);
          }

          static PyObject *t_FlagsAttribute_setFlags(t_FlagsAttribute *self, PyObject *arg)
          {
            jint a0;

            if (!parseArg(arg, "I", &a0))
            {
              OBJ_CALL(self->object.setFlags(a0));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError((PyObject *) self, "setFlags", arg);
            return NULL;
          }

          static PyObject *t_FlagsAttribute_get__flags(t_FlagsAttribute *self, void *data)
          {
            jint value;
            OBJ_CALL(value = self->object.getFlags());
            return PyLong_FromLong((long) value);
          }
          static int t_FlagsAttribute_set__flags(t_FlagsAttribute *self, PyObject *arg, void *data)
          {
            {
              jint value;
              if (!parseArg(arg, "I", &value))
              {
                INT_CALL(self->object.setFlags(value));
                return 0;
              }
            }
            PyErr_SetArgsError((PyObject *) self, "flags", arg);
            return -1;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/util/LongValues.h"
#include "org/apache/lucene/util/LongValues.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {

        ::java::lang::Class *LongValues::class$ = NULL;
        jmethodID *LongValues::mids$ = NULL;
        bool LongValues::live$ = false;
        LongValues *LongValues::IDENTITY = NULL;
        LongValues *LongValues::ZEROES = NULL;

        jclass LongValues::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/util/LongValues");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_f2cc1bce94666404] = env->getMethodID(cls, "<init>", "()V");
            mids$[mid_get_d711eecdc469624a] = env->getMethodID(cls, "get", "(J)J");

            class$ = new ::java::lang::Class(cls);
            cls = (jclass) class$->this$;

            IDENTITY = new LongValues(env->getStaticObjectField(cls, "IDENTITY", "Lorg/apache/lucene/util/LongValues;"));
            ZEROES = new LongValues(env->getStaticObjectField(cls, "ZEROES", "Lorg/apache/lucene/util/LongValues;"));
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        LongValues::LongValues() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_f2cc1bce94666404)) {}

        jlong LongValues::get(jlong a0) const
        {
          return env->callLongMethod(this$, mids$[mid_get_d711eecdc469624a], a0);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        static PyObject *t_LongValues_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_LongValues_instance_(PyTypeObject *type, PyObject *arg);
        static int t_LongValues_init_(t_LongValues *self, PyObject *args, PyObject *kwds);
        static PyObject *t_LongValues_get(t_LongValues *self, PyObject *arg);

        static PyMethodDef t_LongValues__methods_[] = {
          DECLARE_METHOD(t_LongValues, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_LongValues, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_LongValues, get, METH_O),
          { NULL, NULL, 0, NULL }
        };

        static PyType_Slot PY_TYPE_SLOTS(LongValues)[] = {
          { Py_tp_methods, t_LongValues__methods_ },
          { Py_tp_init, (void *) t_LongValues_init_ },
          { 0, NULL }
        };

        static PyType_Def *PY_TYPE_BASES(LongValues)[] = {
          &PY_TYPE_DEF(::java::lang::Object),
          NULL
        };

        DEFINE_TYPE(LongValues, t_LongValues, LongValues);

        void t_LongValues::install(PyObject *module)
        {
          installType(&PY_TYPE(LongValues), &PY_TYPE_DEF(LongValues), module, "LongValues", 0);
        }

        void t_LongValues::initialize(PyObject *module)
        {
          PyObject_SetAttrString((PyObject *) PY_TYPE(LongValues), "class_", make_descriptor(LongValues::initializeClass, 1));
          PyObject_SetAttrString((PyObject *) PY_TYPE(LongValues), "wrapfn_", make_descriptor(t_LongValues::wrap_jobject));
          PyObject_SetAttrString((PyObject *) PY_TYPE(LongValues), "boxfn_", make_descriptor(boxObject));
          env->getClass(LongValues::initializeClass);
          PyObject_SetAttrString((PyObject *) PY_TYPE(LongValues), "IDENTITY", make_descriptor(t_LongValues::wrap_Object(*LongValues::IDENTITY)));
          PyObject_SetAttrString((PyObject *) PY_TYPE(LongValues), "ZEROES", make_descriptor(t_LongValues::wrap_Object(*LongValues::ZEROES)));
        }

        static PyObject *t_LongValues_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, LongValues::initializeClass, 1)))
            return NULL;
          return t_LongValues::wrap_Object(LongValues(((t_LongValues *) arg)->object.this$));
        }
        static PyObject *t_LongValues_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, LongValues::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_LongValues_init_(t_LongValues *self, PyObject *args, PyObject *kwds)
        {
          LongValues object((jobject) NULL);

          INT_CALL(object = LongValues());
          self->object = object;

          return 0;
        }

        static PyObject *t_LongValues_get(t_LongValues *self, PyObject *arg)
        {
          jlong a0;
          jlong result;

          if (!parseArg(arg, "J", &a0))
          {
            OBJ_CALL(result = self->object.get(a0));
            return PyLong_FromLongLong((PY_LONG_LONG) result);
          }

          PyErr_SetArgsError((PyObject *) self, "get", arg);
          return NULL;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/util/fst/BytesRefFSTEnum$InputOutput.h"
#include "org/apache/lucene/util/BytesRef.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        namespace fst {

          ::java::lang::Class *BytesRefFSTEnum$InputOutput::class$ = NULL;
          jmethodID *BytesRefFSTEnum$InputOutput::mids$ = NULL;
          jfieldID *BytesRefFSTEnum$InputOutput::fids$ = NULL;
          bool BytesRefFSTEnum$InputOutput::live$ = false;

          jclass BytesRefFSTEnum$InputOutput::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/util/fst/BytesRefFSTEnum$InputOutput");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_f2cc1bce94666404] = env->getMethodID(cls, "<init>", "()V");

              fids$ = new jfieldID[max_fid];
              fids$[fid_input] = env->getFieldID(cls, "input", "Lorg/apache/lucene/util/BytesRef;");
              fids$[fid_output] = env->getFieldID(cls, "output", "Ljava/lang/Object;");

              class$ = new ::java::lang::Class(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          BytesRefFSTEnum$InputOutput::BytesRefFSTEnum$InputOutput() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_f2cc1bce94666404)) {}

          ::org::apache::lucene::util::BytesRef BytesRefFSTEnum$InputOutput::_get_input() const
          {
            return ::org::apache::lucene::util::BytesRef(env->getObjectField(this$, fids$[fid_input]));
          }

          void BytesRefFSTEnum$InputOutput::_set_input(const ::org::apache::lucene::util::BytesRef & a0) const
          {
            env->setObjectField(this$, fids$[fid_input], a0.this$);
          }

          ::java::lang::Object BytesRefFSTEnum$InputOutput::_get_output() const
          {
            return ::java::lang::Object(env->getObjectField(this$, fids$[fid_output]));
          }

          void BytesRefFSTEnum$InputOutput::_set_output(const ::java::lang::Object & a0) const
          {
            env->setObjectField(this$, fids$[fid_output], a0.this$);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        namespace fst {
          static PyObject *t_BytesRefFSTEnum$InputOutput_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_BytesRefFSTEnum$InputOutput_instance_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_BytesRefFSTEnum$InputOutput_of_(t_BytesRefFSTEnum$InputOutput *self, PyObject *args);
          static int t_BytesRefFSTEnum$InputOutput_init_(t_BytesRefFSTEnum$InputOutput *self, PyObject *args, PyObject *kwds);
          static PyObject *t_BytesRefFSTEnum$InputOutput_get__input(t_BytesRefFSTEnum$InputOutput *self, void *data);
          static int t_BytesRefFSTEnum$InputOutput_set__input(t_BytesRefFSTEnum$InputOutput *self, PyObject *arg, void *data);
          static PyObject *t_BytesRefFSTEnum$InputOutput_get__output(t_BytesRefFSTEnum$InputOutput *self, void *data);
          static int t_BytesRefFSTEnum$InputOutput_set__output(t_BytesRefFSTEnum$InputOutput *self, PyObject *arg, void *data);

          static PyObject *t_BytesRefFSTEnum$InputOutput_get__parameters_(t_BytesRefFSTEnum$InputOutput *self, void *data);
          static PyGetSetDef t_BytesRefFSTEnum$InputOutput__fields_[] = {
            DECLARE_GETSET_FIELD(t_BytesRefFSTEnum$InputOutput, input),
            DECLARE_GETSET_FIELD(t_BytesRefFSTEnum$InputOutput, output),
            DECLARE_GET_FIELD(t_BytesRefFSTEnum$InputOutput, parameters_),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_BytesRefFSTEnum$InputOutput__methods_[] = {
            DECLARE_METHOD(t_BytesRefFSTEnum$InputOutput, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_BytesRefFSTEnum$InputOutput, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_BytesRefFSTEnum$InputOutput, of_, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          static PyType_Slot PY_TYPE_SLOTS(BytesRefFSTEnum$InputOutput)[] = {
            { Py_tp_methods, t_BytesRefFSTEnum$InputOutput__methods_ },
            { Py_tp_init, (void *) t_BytesRefFSTEnum$InputOutput_init_ },
            { Py_tp_getset, t_BytesRefFSTEnum$InputOutput__fields_ },
            { 0, NULL }
          };

          static PyType_Def *PY_TYPE_BASES(BytesRefFSTEnum$InputOutput)[] = {
            &PY_TYPE_DEF(::java::lang::Object),
            NULL
          };

          DEFINE_TYPE(BytesRefFSTEnum$InputOutput, t_BytesRefFSTEnum$InputOutput, BytesRefFSTEnum$InputOutput);
          PyObject *t_BytesRefFSTEnum$InputOutput::wrap_Object(const BytesRefFSTEnum$InputOutput& object, PyTypeObject *p0)
          {
            PyObject *obj = t_BytesRefFSTEnum$InputOutput::wrap_Object(object);
            if (obj != NULL && obj != Py_None)
            {
              t_BytesRefFSTEnum$InputOutput *self = (t_BytesRefFSTEnum$InputOutput *) obj;
              self->parameters[0] = p0;
            }
            return obj;
          }

          PyObject *t_BytesRefFSTEnum$InputOutput::wrap_jobject(const jobject& object, PyTypeObject *p0)
          {
            PyObject *obj = t_BytesRefFSTEnum$InputOutput::wrap_jobject(object);
            if (obj != NULL && obj != Py_None)
            {
              t_BytesRefFSTEnum$InputOutput *self = (t_BytesRefFSTEnum$InputOutput *) obj;
              self->parameters[0] = p0;
            }
            return obj;
          }

          void t_BytesRefFSTEnum$InputOutput::install(PyObject *module)
          {
            installType(&PY_TYPE(BytesRefFSTEnum$InputOutput), &PY_TYPE_DEF(BytesRefFSTEnum$InputOutput), module, "BytesRefFSTEnum$InputOutput", 0);
          }

          void t_BytesRefFSTEnum$InputOutput::initialize(PyObject *module)
          {
            PyObject_SetAttrString((PyObject *) PY_TYPE(BytesRefFSTEnum$InputOutput), "class_", make_descriptor(BytesRefFSTEnum$InputOutput::initializeClass, 1));
            PyObject_SetAttrString((PyObject *) PY_TYPE(BytesRefFSTEnum$InputOutput), "wrapfn_", make_descriptor(t_BytesRefFSTEnum$InputOutput::wrap_jobject));
            PyObject_SetAttrString((PyObject *) PY_TYPE(BytesRefFSTEnum$InputOutput), "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_BytesRefFSTEnum$InputOutput_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, BytesRefFSTEnum$InputOutput::initializeClass, 1)))
              return NULL;
            return t_BytesRefFSTEnum$InputOutput::wrap_Object(BytesRefFSTEnum$InputOutput(((t_BytesRefFSTEnum$InputOutput *) arg)->object.this$));
          }
          static PyObject *t_BytesRefFSTEnum$InputOutput_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, BytesRefFSTEnum$InputOutput::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static PyObject *t_BytesRefFSTEnum$InputOutput_of_(t_BytesRefFSTEnum$InputOutput *self, PyObject *args)
          {
            if (!parseArg(args, "T", 1, &(self->parameters)))
              Py_RETURN_SELF;
            return PyErr_SetArgsError((PyObject *) self, "of_", args);
          }

          static int t_BytesRefFSTEnum$InputOutput_init_(t_BytesRefFSTEnum$InputOutput *self, PyObject *args, PyObject *kwds)
          {
            BytesRefFSTEnum$InputOutput object((jobject) NULL);

            INT_CALL(object = BytesRefFSTEnum$InputOutput());
            self->object = object;

            return 0;
          }
          static PyObject *t_BytesRefFSTEnum$InputOutput_get__parameters_(t_BytesRefFSTEnum$InputOutput *self, void *data)
          {
            return typeParameters(self->parameters, sizeof(self->parameters));
          }

          static PyObject *t_BytesRefFSTEnum$InputOutput_get__input(t_BytesRefFSTEnum$InputOutput *self, void *data)
          {
            ::org::apache::lucene::util::BytesRef value((jobject) NULL);
            OBJ_CALL(value = self->object._get_input());
            return ::org::apache::lucene::util::t_BytesRef::wrap_Object(value);
          }
          static int t_BytesRefFSTEnum$InputOutput_set__input(t_BytesRefFSTEnum$InputOutput *self, PyObject *arg, void *data)
          {
            ::org::apache::lucene::util::BytesRef value((jobject) NULL);
            if (!parseArg(arg, "k", ::org::apache::lucene::util::BytesRef::initializeClass, &value))
            {
              INT_CALL(self->object._set_input(value));
              return 0;
            }
            PyErr_SetArgsError((PyObject *) self, "input", arg);
            return -1;
          }

          static PyObject *t_BytesRefFSTEnum$InputOutput_get__output(t_BytesRefFSTEnum$InputOutput *self, void *data)
          {
            ::java::lang::Object value((jobject) NULL);
            OBJ_CALL(value = self->object._get_output());
            return ::java::lang::t_Object::wrap_Object(value);
          }
          static int t_BytesRefFSTEnum$InputOutput_set__output(t_BytesRefFSTEnum$InputOutput *self, PyObject *arg, void *data)
          {
            ::java::lang::Object value((jobject) NULL);
            if (!parseArg(arg, "o", &value))
            {
              INT_CALL(self->object._set_output(value));
              return 0;
            }
            PyErr_SetArgsError((PyObject *) self, "output", arg);
            return -1;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/codecs/lucene50/Lucene50FieldInfosFormat.h"
#include "org/apache/lucene/store/IOContext.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/store/Directory.h"
#include "java/lang/String.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/index/SegmentInfo.h"
#include "org/apache/lucene/index/FieldInfos.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace codecs {
        namespace lucene50 {

          ::java::lang::Class *Lucene50FieldInfosFormat::class$ = NULL;
          jmethodID *Lucene50FieldInfosFormat::mids$ = NULL;
          bool Lucene50FieldInfosFormat::live$ = false;

          jclass Lucene50FieldInfosFormat::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/codecs/lucene50/Lucene50FieldInfosFormat");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_f2cc1bce94666404] = env->getMethodID(cls, "<init>", "()V");
              mids$[mid_read_1706310ddb242d67] = env->getMethodID(cls, "read", "(Lorg/apache/lucene/store/Directory;Lorg/apache/lucene/index/SegmentInfo;Ljava/lang/String;Lorg/apache/lucene/store/IOContext;)Lorg/apache/lucene/index/FieldInfos;");
              mids$[mid_write_226745c1985cb50a] = env->getMethodID(cls, "write", "(Lorg/apache/lucene/store/Directory;Lorg/apache/lucene/index/SegmentInfo;Ljava/lang/String;Lorg/apache/lucene/index/FieldInfos;Lorg/apache/lucene/store/IOContext;)V");

              class$ = new ::java::lang::Class(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          Lucene50FieldInfosFormat::Lucene50FieldInfosFormat() : ::org::apache::lucene::codecs::FieldInfosFormat(env->newObject(initializeClass, &mids$, mid_init$_f2cc1bce94666404)) {}

          ::org::apache::lucene::index::FieldInfos Lucene50FieldInfosFormat::read(const ::org::apache::lucene::store::Directory & a0, const ::org::apache::lucene::index::SegmentInfo & a1, const ::java::lang::String & a2, const ::org::apache::lucene::store::IOContext & a3) const
          {
            return ::org::apache::lucene::index::FieldInfos(env->callObjectMethod(this$, mids$[mid_read_1706310ddb242d67], a0.this$, a1.this$, a2.this$, a3.this$));
          }

          void Lucene50FieldInfosFormat::write(const ::org::apache::lucene::store::Directory & a0, const ::org::apache::lucene::index::SegmentInfo & a1, const ::java::lang::String & a2, const ::org::apache::lucene::index::FieldInfos & a3, const ::org::apache::lucene::store::IOContext & a4) const
          {
            env->callVoidMethod(this$, mids$[mid_write_226745c1985cb50a], a0.this$, a1.this$, a2.this$, a3.this$, a4.this$);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace codecs {
        namespace lucene50 {
          static PyObject *t_Lucene50FieldInfosFormat_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_Lucene50FieldInfosFormat_instance_(PyTypeObject *type, PyObject *arg);
          static int t_Lucene50FieldInfosFormat_init_(t_Lucene50FieldInfosFormat *self, PyObject *args, PyObject *kwds);
          static PyObject *t_Lucene50FieldInfosFormat_read(t_Lucene50FieldInfosFormat *self, PyObject *args);
          static PyObject *t_Lucene50FieldInfosFormat_write(t_Lucene50FieldInfosFormat *self, PyObject *args);

          static PyMethodDef t_Lucene50FieldInfosFormat__methods_[] = {
            DECLARE_METHOD(t_Lucene50FieldInfosFormat, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_Lucene50FieldInfosFormat, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_Lucene50FieldInfosFormat, read, METH_VARARGS),
            DECLARE_METHOD(t_Lucene50FieldInfosFormat, write, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          static PyType_Slot PY_TYPE_SLOTS(Lucene50FieldInfosFormat)[] = {
            { Py_tp_methods, t_Lucene50FieldInfosFormat__methods_ },
            { Py_tp_init, (void *) t_Lucene50FieldInfosFormat_init_ },
            { 0, NULL }
          };

          static PyType_Def *PY_TYPE_BASES(Lucene50FieldInfosFormat)[] = {
            &PY_TYPE_DEF(::org::apache::lucene::codecs::FieldInfosFormat),
            NULL
          };

          DEFINE_TYPE(Lucene50FieldInfosFormat, t_Lucene50FieldInfosFormat, Lucene50FieldInfosFormat);

          void t_Lucene50FieldInfosFormat::install(PyObject *module)
          {
            installType(&PY_TYPE(Lucene50FieldInfosFormat), &PY_TYPE_DEF(Lucene50FieldInfosFormat), module, "Lucene50FieldInfosFormat", 0);
          }

          void t_Lucene50FieldInfosFormat::initialize(PyObject *module)
          {
            PyObject_SetAttrString((PyObject *) PY_TYPE(Lucene50FieldInfosFormat), "class_", make_descriptor(Lucene50FieldInfosFormat::initializeClass, 1));
            PyObject_SetAttrString((PyObject *) PY_TYPE(Lucene50FieldInfosFormat), "wrapfn_", make_descriptor(t_Lucene50FieldInfosFormat::wrap_jobject));
            PyObject_SetAttrString((PyObject *) PY_TYPE(Lucene50FieldInfosFormat), "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_Lucene50FieldInfosFormat_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, Lucene50FieldInfosFormat::initializeClass, 1)))
              return NULL;
            return t_Lucene50FieldInfosFormat::wrap_Object(Lucene50FieldInfosFormat(((t_Lucene50FieldInfosFormat *) arg)->object.this$));
          }
          static PyObject *t_Lucene50FieldInfosFormat_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, Lucene50FieldInfosFormat::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_Lucene50FieldInfosFormat_init_(t_Lucene50FieldInfosFormat *self, PyObject *args, PyObject *kwds)
          {
            Lucene50FieldInfosFormat object((jobject) NULL);

            INT_CALL(object = Lucene50FieldInfosFormat());
            self->object = object;

            return 0;
          }

          static PyObject *t_Lucene50FieldInfosFormat_read(t_Lucene50FieldInfosFormat *self, PyObject *args)
          {
            ::org::apache::lucene::store::Directory a0((jobject) NULL);
            ::org::apache::lucene::index::SegmentInfo a1((jobject) NULL);
            ::java::lang::String a2((jobject) NULL);
            ::org::apache::lucene::store::IOContext a3((jobject) NULL);
            ::org::apache::lucene::index::FieldInfos result((jobject) NULL);

            if (!parseArgs(args, "kksk", ::org::apache::lucene::store::Directory::initializeClass, ::org::apache::lucene::index::SegmentInfo::initializeClass, ::org::apache::lucene::store::IOContext::initializeClass, &a0, &a1, &a2, &a3))
            {
              OBJ_CALL(result = self->object.read(a0, a1, a2, a3));
              return ::org::apache::lucene::index::t_FieldInfos::wrap_Object(result);
            }

            return callSuper(PY_TYPE(Lucene50FieldInfosFormat), (PyObject *) self, "read", args, 2);
          }

          static PyObject *t_Lucene50FieldInfosFormat_write(t_Lucene50FieldInfosFormat *self, PyObject *args)
          {
            ::org::apache::lucene::store::Directory a0((jobject) NULL);
            ::org::apache::lucene::index::SegmentInfo a1((jobject) NULL);
            ::java::lang::String a2((jobject) NULL);
            ::org::apache::lucene::index::FieldInfos a3((jobject) NULL);
            ::org::apache::lucene::store::IOContext a4((jobject) NULL);

            if (!parseArgs(args, "kkskk", ::org::apache::lucene::store::Directory::initializeClass, ::org::apache::lucene::index::SegmentInfo::initializeClass, ::org::apache::lucene::index::FieldInfos::initializeClass, ::org::apache::lucene::store::IOContext::initializeClass, &a0, &a1, &a2, &a3, &a4))
            {
              OBJ_CALL(self->object.write(a0, a1, a2, a3, a4));
              Py_RETURN_NONE;
            }

            return callSuper(PY_TYPE(Lucene50FieldInfosFormat), (PyObject *) self, "write", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/util/RoaringDocIdSet$Builder.h"
#include "java/lang/Class.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/search/DocIdSetIterator.h"
#include "org/apache/lucene/util/RoaringDocIdSet.h"
#include "org/apache/lucene/util/RoaringDocIdSet$Builder.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {

        ::java::lang::Class *RoaringDocIdSet$Builder::class$ = NULL;
        jmethodID *RoaringDocIdSet$Builder::mids$ = NULL;
        bool RoaringDocIdSet$Builder::live$ = false;

        jclass RoaringDocIdSet$Builder::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/util/RoaringDocIdSet$Builder");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_040c4cd0390c5aff] = env->getMethodID(cls, "<init>", "(I)V");
            mids$[mid_add_0e5bfa131d98bc47] = env->getMethodID(cls, "add", "(Lorg/apache/lucene/search/DocIdSetIterator;)Lorg/apache/lucene/util/RoaringDocIdSet$Builder;");
            mids$[mid_add_210fa47068b51280] = env->getMethodID(cls, "add", "(I)Lorg/apache/lucene/util/RoaringDocIdSet$Builder;");
            mids$[mid_build_f149c9d6bd244979] = env->getMethodID(cls, "build", "()Lorg/apache/lucene/util/RoaringDocIdSet;");

            class$ = new ::java::lang::Class(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        RoaringDocIdSet$Builder::RoaringDocIdSet$Builder(jint a0) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_040c4cd0390c5aff, a0)) {}

        RoaringDocIdSet$Builder RoaringDocIdSet$Builder::add(const ::org::apache::lucene::search::DocIdSetIterator & a0) const
        {
          return RoaringDocIdSet$Builder(env->callObjectMethod(this$, mids$[mid_add_0e5bfa131d98bc47], a0.this$));
        }

        RoaringDocIdSet$Builder RoaringDocIdSet$Builder::add(jint a0) const
        {
          return RoaringDocIdSet$Builder(env->callObjectMethod(this$, mids$[mid_add_210fa47068b51280], a0));
        }

        ::org::apache::lucene::util::RoaringDocIdSet RoaringDocIdSet$Builder::build() const
        {
          return ::org::apache::lucene::util::RoaringDocIdSet(env->callObjectMethod(this$, mids$[mid_build_f149c9d6bd244979]));
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        static PyObject *t_RoaringDocIdSet$Builder_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_RoaringDocIdSet$Builder_instance_(PyTypeObject *type, PyObject *arg);
        static int t_RoaringDocIdSet$Builder_init_(t_RoaringDocIdSet$Builder *self, PyObject *args, PyObject *kwds);
        static PyObject *t_RoaringDocIdSet$Builder_add(t_RoaringDocIdSet$Builder *self, PyObject *args);
        static PyObject *t_RoaringDocIdSet$Builder_build(t_RoaringDocIdSet$Builder *self);

        static PyMethodDef t_RoaringDocIdSet$Builder__methods_[] = {
          DECLARE_METHOD(t_RoaringDocIdSet$Builder, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_RoaringDocIdSet$Builder, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_RoaringDocIdSet$Builder, add, METH_VARARGS),
          DECLARE_METHOD(t_RoaringDocIdSet$Builder, build, METH_NOARGS),
          { NULL, NULL, 0, NULL }
        };

        static PyType_Slot PY_TYPE_SLOTS(RoaringDocIdSet$Builder)[] = {
          { Py_tp_methods, t_RoaringDocIdSet$Builder__methods_ },
          { Py_tp_init, (void *) t_RoaringDocIdSet$Builder_init_ },
          { 0, NULL }
        };

        static PyType_Def *PY_TYPE_BASES(RoaringDocIdSet$Builder)[] = {
          &PY_TYPE_DEF(::java::lang::Object),
          NULL
        };

        DEFINE_TYPE(RoaringDocIdSet$Builder, t_RoaringDocIdSet$Builder, RoaringDocIdSet$Builder);

        void t_RoaringDocIdSet$Builder::install(PyObject *module)
        {
          installType(&PY_TYPE(RoaringDocIdSet$Builder), &PY_TYPE_DEF(RoaringDocIdSet$Builder), module, "RoaringDocIdSet$Builder", 0);
        }

        void t_RoaringDocIdSet$Builder::initialize(PyObject *module)
        {
          PyObject_SetAttrString((PyObject *) PY_TYPE(RoaringDocIdSet$Builder), "class_", make_descriptor(RoaringDocIdSet$Builder::initializeClass, 1));
          PyObject_SetAttrString((PyObject *) PY_TYPE(RoaringDocIdSet$Builder), "wrapfn_", make_descriptor(t_RoaringDocIdSet$Builder::wrap_jobject));
          PyObject_SetAttrString((PyObject *) PY_TYPE(RoaringDocIdSet$Builder), "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_RoaringDocIdSet$Builder_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, RoaringDocIdSet$Builder::initializeClass, 1)))
            return NULL;
          return t_RoaringDocIdSet$Builder::wrap_Object(RoaringDocIdSet$Builder(((t_RoaringDocIdSet$Builder *) arg)->object.this$));
        }
        static PyObject *t_RoaringDocIdSet$Builder_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, RoaringDocIdSet$Builder::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_RoaringDocIdSet$Builder_init_(t_RoaringDocIdSet$Builder *self, PyObject *args, PyObject *kwds)
        {
          jint a0;
          RoaringDocIdSet$Builder object((jobject) NULL);

          if (!parseArgs(args, "I", &a0))
          {
            INT_CALL(object = RoaringDocIdSet$Builder(a0));
            self->object = object;
          }
          else
          {
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }

        static PyObject *t_RoaringDocIdSet$Builder_add(t_RoaringDocIdSet$Builder *self, PyObject *args)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 1:
            {
              ::org::apache::lucene::search::DocIdSetIterator a0((jobject) NULL);
              RoaringDocIdSet$Builder result((jobject) NULL);

              if (!parseArgs(args, "k", ::org::apache::lucene::search::DocIdSetIterator::initializeClass, &a0))
              {
                OBJ_CALL(result = self->object.add(a0));
                return t_RoaringDocIdSet$Builder::wrap_Object(result);
              }
            }
            {
              jint a0;
              RoaringDocIdSet$Builder result((jobject) NULL);

              if (!parseArgs(args, "I", &a0))
              {
                OBJ_CALL(result = self->object.add(a0));
                return t_RoaringDocIdSet$Builder::wrap_Object(result);
              }
            }
          }

          PyErr_SetArgsError((PyObject *) self, "add", args);
          return NULL;
        }

        static PyObject *t_RoaringDocIdSet$Builder_build(t_RoaringDocIdSet$Builder *self)
        {
          ::org::apache::lucene::util::RoaringDocIdSet result((jobject) NULL);
          OBJ_CALL(result = self->object.build());
          return ::org::apache::lucene::util::t_RoaringDocIdSet::wrap_Object(result);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/facet/taxonomy/TaxonomyWriter.h"
#include "java/util/Map$Entry.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/index/TwoPhaseCommit.h"
#include "java/lang/Iterable.h"
#include "java/lang/String.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/facet/taxonomy/FacetLabel.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace facet {
        namespace taxonomy {

          ::java::lang::Class *TaxonomyWriter::class$ = NULL;
          jmethodID *TaxonomyWriter::mids$ = NULL;
          bool TaxonomyWriter::live$ = false;

          jclass TaxonomyWriter::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/facet/taxonomy/TaxonomyWriter");

              mids$ = new jmethodID[max_mid];
              mids$[mid_addCategory_1e6795f28098d13d] = env->getMethodID(cls, "addCategory", "(Lorg/apache/lucene/facet/taxonomy/FacetLabel;)I");
              mids$[mid_getLiveCommitData_7a21c115c1b038aa] = env->getMethodID(cls, "getLiveCommitData", "()Ljava/lang/Iterable;");
              mids$[mid_getParent_1e143afe1894d213] = env->getMethodID(cls, "getParent", "(I)I");
              mids$[mid_getSize_9972fcc56b44e79d] = env->getMethodID(cls, "getSize", "()I");
              mids$[mid_setLiveCommitData_870d7079aa6e0153] = env->getMethodID(cls, "setLiveCommitData", "(Ljava/lang/Iterable;)V");

              class$ = new ::java::lang::Class(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          jint TaxonomyWriter::addCategory(const ::org::apache::lucene::facet::taxonomy::FacetLabel & a0) const
          {
            return env->callIntMethod(this$, mids$[mid_addCategory_1e6795f28098d13d], a0.this$);
          }

          ::java::lang::Iterable TaxonomyWriter::getLiveCommitData() const
          {
            return ::java::lang::Iterable(env->callObjectMethod(this$, mids$[mid_getLiveCommitData_7a21c115c1b038aa]));
          }

          jint TaxonomyWriter::getParent(jint a0) const
          {
            return env->callIntMethod(this$, mids$[mid_getParent_1e143afe1894d213], a0);
          }

          jint TaxonomyWriter::getSize() const
          {
            return env->callIntMethod(this$, mids$[mid_getSize_9972fcc56b44e79d]);
          }

          void TaxonomyWriter::setLiveCommitData(const ::java::lang::Iterable & a0) const
          {
            env->callVoidMethod(this$, mids$[mid_setLiveCommitData_870d7079aa6e0153], a0.this$);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace facet {
        namespace taxonomy {
          static PyObject *t_TaxonomyWriter_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_TaxonomyWriter_instance_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_TaxonomyWriter_addCategory(t_TaxonomyWriter *self, PyObject *arg);
          static PyObject *t_TaxonomyWriter_getLiveCommitData(t_TaxonomyWriter *self);
          static PyObject *t_TaxonomyWriter_getParent(t_TaxonomyWriter *self, PyObject *arg);
          static PyObject *t_TaxonomyWriter_getSize(t_TaxonomyWriter *self);
          static PyObject *t_TaxonomyWriter_setLiveCommitData(t_TaxonomyWriter *self, PyObject *arg);
          static PyObject *t_TaxonomyWriter_get__liveCommitData(t_TaxonomyWriter *self, void *data);
          static int t_TaxonomyWriter_set__liveCommitData(t_TaxonomyWriter *self, PyObject *arg, void *data);
          static PyObject *t_TaxonomyWriter_get__size(t_TaxonomyWriter *self, void *data);
          static PyGetSetDef t_TaxonomyWriter__fields_[] = {
            DECLARE_GETSET_FIELD(t_TaxonomyWriter, liveCommitData),
            DECLARE_GET_FIELD(t_TaxonomyWriter, size),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_TaxonomyWriter__methods_[] = {
            DECLARE_METHOD(t_TaxonomyWriter, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_TaxonomyWriter, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_TaxonomyWriter, addCategory, METH_O),
            DECLARE_METHOD(t_TaxonomyWriter, getLiveCommitData, METH_NOARGS),
            DECLARE_METHOD(t_TaxonomyWriter, getParent, METH_O),
            DECLARE_METHOD(t_TaxonomyWriter, getSize, METH_NOARGS),
            DECLARE_METHOD(t_TaxonomyWriter, setLiveCommitData, METH_O),
            { NULL, NULL, 0, NULL }
          };

          static PyType_Slot PY_TYPE_SLOTS(TaxonomyWriter)[] = {
            { Py_tp_methods, t_TaxonomyWriter__methods_ },
            { Py_tp_init, (void *) abstract_init },
            { Py_tp_getset, t_TaxonomyWriter__fields_ },
            { 0, NULL }
          };

          static PyType_Def *PY_TYPE_BASES(TaxonomyWriter)[] = {
            &PY_TYPE_DEF(::java::io::Closeable),
            NULL
          };

          DEFINE_TYPE(TaxonomyWriter, t_TaxonomyWriter, TaxonomyWriter);

          void t_TaxonomyWriter::install(PyObject *module)
          {
            installType(&PY_TYPE(TaxonomyWriter), &PY_TYPE_DEF(TaxonomyWriter), module, "TaxonomyWriter", 0);
          }

          void t_TaxonomyWriter::initialize(PyObject *module)
          {
            PyObject_SetAttrString((PyObject *) PY_TYPE(TaxonomyWriter), "class_", make_descriptor(TaxonomyWriter::initializeClass, 1));
            PyObject_SetAttrString((PyObject *) PY_TYPE(TaxonomyWriter), "wrapfn_", make_descriptor(t_TaxonomyWriter::wrap_jobject));
            PyObject_SetAttrString((PyObject *) PY_TYPE(TaxonomyWriter), "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_TaxonomyWriter_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, TaxonomyWriter::initializeClass, 1)))
              return NULL;
            return t_TaxonomyWriter::wrap_Object(TaxonomyWriter(((t_TaxonomyWriter *) arg)->object.this$));
          }
          static PyObject *t_TaxonomyWriter_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, TaxonomyWriter::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static PyObject *t_TaxonomyWriter_addCategory(t_TaxonomyWriter *self, PyObject *arg)
          {
            ::org::apache::lucene::facet::taxonomy::FacetLabel a0((jobject) NULL);
            jint result;

            if (!parseArg(arg, "k", ::org::apache::lucene::facet::taxonomy::FacetLabel::initializeClass, &a0))
            {
              OBJ_CALL(result = self->object.addCategory(a0));
              return PyLong_FromLong((long) result);
            }

            PyErr_SetArgsError((PyObject *) self, "addCategory", arg);
            return NULL;
          }

          static PyObject *t_TaxonomyWriter_getLiveCommitData(t_TaxonomyWriter *self)
          {
            ::java::lang::Iterable result((jobject) NULL);
            OBJ_CALL(result = self->object.getLiveCommitData());
            return ::java::lang::t_Iterable::wrap_Object(result);
          }

          static PyObject *t_TaxonomyWriter_getParent(t_TaxonomyWriter *self, PyObject *arg)
          {
            jint a0;
            jint result;

            if (!parseArg(arg, "I", &a0))
            {
              OBJ_CALL(result = self->object.getParent(a0));
              return PyLong_FromLong((long) result);
            }

            PyErr_SetArgsError((PyObject *) self, "getParent", arg);
            return NULL;
          }

          static PyObject *t_TaxonomyWriter_getSize(t_TaxonomyWriter *self)
          {
            jint result;
            OBJ_CALL(result = self->object.getSize());
            return PyLong_FromLong((long) result);
          }

          static PyObject *t_TaxonomyWriter_setLiveCommitData(t_TaxonomyWriter *self, PyObject *arg)
          {
            ::java::lang::Iterable a0((jobject) NULL);
            PyTypeObject **p0;

            if (!parseArg(arg, "K", ::java::lang::Iterable::initializeClass, &a0, &p0, ::java::lang::t_Iterable::parameters_))
            {
              OBJ_CALL(self->object.setLiveCommitData(a0));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError((PyObject *) self, "setLiveCommitData", arg);
            return NULL;
          }

          static PyObject *t_TaxonomyWriter_get__liveCommitData(t_TaxonomyWriter *self, void *data)
          {
            ::java::lang::Iterable value((jobject) NULL);
            OBJ_CALL(value = self->object.getLiveCommitData());
            return ::java::lang::t_Iterable::wrap_Object(value);
          }
          static int t_TaxonomyWriter_set__liveCommitData(t_TaxonomyWriter *self, PyObject *arg, void *data)
          {
            {
              ::java::lang::Iterable value((jobject) NULL);
              if (!parseArg(arg, "k", ::java::lang::Iterable::initializeClass, &value))
              {
                INT_CALL(self->object.setLiveCommitData(value));
                return 0;
              }
            }
            PyErr_SetArgsError((PyObject *) self, "liveCommitData", arg);
            return -1;
          }

          static PyObject *t_TaxonomyWriter_get__size(t_TaxonomyWriter *self, void *data)
          {
            jint value;
            OBJ_CALL(value = self->object.getSize());
            return PyLong_FromLong((long) value);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/miscellaneous/RemoveDuplicatesTokenFilterFactory.h"
#include "java/util/Map.h"
#include "org/apache/lucene/analysis/miscellaneous/RemoveDuplicatesTokenFilter.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/analysis/TokenStream.h"
#include "java/lang/String.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace miscellaneous {

          ::java::lang::Class *RemoveDuplicatesTokenFilterFactory::class$ = NULL;
          jmethodID *RemoveDuplicatesTokenFilterFactory::mids$ = NULL;
          bool RemoveDuplicatesTokenFilterFactory::live$ = false;
          ::java::lang::String *RemoveDuplicatesTokenFilterFactory::NAME = NULL;

          jclass RemoveDuplicatesTokenFilterFactory::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/miscellaneous/RemoveDuplicatesTokenFilterFactory");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_408bd889ee3beae5] = env->getMethodID(cls, "<init>", "(Ljava/util/Map;)V");
              mids$[mid_create_0975f94c3b439703] = env->getMethodID(cls, "create", "(Lorg/apache/lucene/analysis/TokenStream;)Lorg/apache/lucene/analysis/miscellaneous/RemoveDuplicatesTokenFilter;");

              class$ = new ::java::lang::Class(cls);
              cls = (jclass) class$->this$;

              NAME = new ::java::lang::String(env->getStaticObjectField(cls, "NAME", "Ljava/lang/String;"));
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          RemoveDuplicatesTokenFilterFactory::RemoveDuplicatesTokenFilterFactory(const ::java::util::Map & a0) : ::org::apache::lucene::analysis::util::TokenFilterFactory(env->newObject(initializeClass, &mids$, mid_init$_408bd889ee3beae5, a0.this$)) {}

          ::org::apache::lucene::analysis::miscellaneous::RemoveDuplicatesTokenFilter RemoveDuplicatesTokenFilterFactory::create(const ::org::apache::lucene::analysis::TokenStream & a0) const
          {
            return ::org::apache::lucene::analysis::miscellaneous::RemoveDuplicatesTokenFilter(env->callObjectMethod(this$, mids$[mid_create_0975f94c3b439703], a0.this$));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace miscellaneous {
          static PyObject *t_RemoveDuplicatesTokenFilterFactory_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_RemoveDuplicatesTokenFilterFactory_instance_(PyTypeObject *type, PyObject *arg);
          static int t_RemoveDuplicatesTokenFilterFactory_init_(t_RemoveDuplicatesTokenFilterFactory *self, PyObject *args, PyObject *kwds);
          static PyObject *t_RemoveDuplicatesTokenFilterFactory_create(t_RemoveDuplicatesTokenFilterFactory *self, PyObject *args);

          static PyMethodDef t_RemoveDuplicatesTokenFilterFactory__methods_[] = {
            DECLARE_METHOD(t_RemoveDuplicatesTokenFilterFactory, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_RemoveDuplicatesTokenFilterFactory, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_RemoveDuplicatesTokenFilterFactory, create, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          static PyType_Slot PY_TYPE_SLOTS(RemoveDuplicatesTokenFilterFactory)[] = {
            { Py_tp_methods, t_RemoveDuplicatesTokenFilterFactory__methods_ },
            { Py_tp_init, (void *) t_RemoveDuplicatesTokenFilterFactory_init_ },
            { 0, NULL }
          };

          static PyType_Def *PY_TYPE_BASES(RemoveDuplicatesTokenFilterFactory)[] = {
            &PY_TYPE_DEF(::org::apache::lucene::analysis::util::TokenFilterFactory),
            NULL
          };

          DEFINE_TYPE(RemoveDuplicatesTokenFilterFactory, t_RemoveDuplicatesTokenFilterFactory, RemoveDuplicatesTokenFilterFactory);

          void t_RemoveDuplicatesTokenFilterFactory::install(PyObject *module)
          {
            installType(&PY_TYPE(RemoveDuplicatesTokenFilterFactory), &PY_TYPE_DEF(RemoveDuplicatesTokenFilterFactory), module, "RemoveDuplicatesTokenFilterFactory", 0);
          }

          void t_RemoveDuplicatesTokenFilterFactory::initialize(PyObject *module)
          {
            PyObject_SetAttrString((PyObject *) PY_TYPE(RemoveDuplicatesTokenFilterFactory), "class_", make_descriptor(RemoveDuplicatesTokenFilterFactory::initializeClass, 1));
            PyObject_SetAttrString((PyObject *) PY_TYPE(RemoveDuplicatesTokenFilterFactory), "wrapfn_", make_descriptor(t_RemoveDuplicatesTokenFilterFactory::wrap_jobject));
            PyObject_SetAttrString((PyObject *) PY_TYPE(RemoveDuplicatesTokenFilterFactory), "boxfn_", make_descriptor(boxObject));
            env->getClass(RemoveDuplicatesTokenFilterFactory::initializeClass);
            PyObject_SetAttrString((PyObject *) PY_TYPE(RemoveDuplicatesTokenFilterFactory), "NAME", make_descriptor(j2p(*RemoveDuplicatesTokenFilterFactory::NAME)));
          }

          static PyObject *t_RemoveDuplicatesTokenFilterFactory_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, RemoveDuplicatesTokenFilterFactory::initializeClass, 1)))
              return NULL;
            return t_RemoveDuplicatesTokenFilterFactory::wrap_Object(RemoveDuplicatesTokenFilterFactory(((t_RemoveDuplicatesTokenFilterFactory *) arg)->object.this$));
          }
          static PyObject *t_RemoveDuplicatesTokenFilterFactory_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, RemoveDuplicatesTokenFilterFactory::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_RemoveDuplicatesTokenFilterFactory_init_(t_RemoveDuplicatesTokenFilterFactory *self, PyObject *args, PyObject *kwds)
          {
            ::java::util::Map a0((jobject) NULL);
            PyTypeObject **p0;
            RemoveDuplicatesTokenFilterFactory object((jobject) NULL);

            if (!parseArgs(args, "K", ::java::util::Map::initializeClass, &a0, &p0, ::java::util::t_Map::parameters_))
            {
              INT_CALL(object = RemoveDuplicatesTokenFilterFactory(a0));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_RemoveDuplicatesTokenFilterFactory_create(t_RemoveDuplicatesTokenFilterFactory *self, PyObject *args)
          {
            ::org::apache::lucene::analysis::TokenStream a0((jobject) NULL);
            ::org::apache::lucene::analysis::miscellaneous::RemoveDuplicatesTokenFilter result((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::analysis::TokenStream::initializeClass, &a0))
            {
              OBJ_CALL(result = self->object.create(a0));
              return ::org::apache::lucene::analysis::miscellaneous::t_RemoveDuplicatesTokenFilter::wrap_Object(result);
            }

            return callSuper(PY_TYPE(RemoveDuplicatesTokenFilterFactory), (PyObject *) self, "create", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/codecs/uniformsplit/sharedterms/STUniformSplitTerms.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/util/BytesRef.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/util/automaton/CompiledAutomaton.h"
#include "org/apache/lucene/index/TermsEnum.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace codecs {
        namespace uniformsplit {
          namespace sharedterms {

            ::java::lang::Class *STUniformSplitTerms::class$ = NULL;
            jmethodID *STUniformSplitTerms::mids$ = NULL;
            bool STUniformSplitTerms::live$ = false;

            jclass STUniformSplitTerms::initializeClass(bool getOnly)
            {
              if (getOnly)
                return (jclass) (live$ ? class$->this$ : NULL);
              if (class$ == NULL)
              {
                jclass cls = (jclass) env->findClass("org/apache/lucene/codecs/uniformsplit/sharedterms/STUniformSplitTerms");

                mids$ = new jmethodID[max_mid];
                mids$[mid_intersect_20ab83ddd033f0a8] = env->getMethodID(cls, "intersect", "(Lorg/apache/lucene/util/automaton/CompiledAutomaton;Lorg/apache/lucene/util/BytesRef;)Lorg/apache/lucene/index/TermsEnum;");
                mids$[mid_iterator_3f9a21827903a65f] = env->getMethodID(cls, "iterator", "()Lorg/apache/lucene/index/TermsEnum;");

                class$ = new ::java::lang::Class(cls);
                live$ = true;
              }
              return (jclass) class$->this$;
            }

            ::org::apache::lucene::index::TermsEnum STUniformSplitTerms::intersect(const ::org::apache::lucene::util::automaton::CompiledAutomaton & a0, const ::org::apache::lucene::util::BytesRef & a1) const
            {
              return ::org::apache::lucene::index::TermsEnum(env->callObjectMethod(this$, mids$[mid_intersect_20ab83ddd033f0a8], a0.this$, a1.this$));
            }

            ::org::apache::lucene::index::TermsEnum STUniformSplitTerms::iterator() const
            {
              return ::org::apache::lucene::index::TermsEnum(env->callObjectMethod(this$, mids$[mid_iterator_3f9a21827903a65f]));
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace codecs {
        namespace uniformsplit {
          namespace sharedterms {
            static PyObject *t_STUniformSplitTerms_cast_(PyTypeObject *type, PyObject *arg);
            static PyObject *t_STUniformSplitTerms_instance_(PyTypeObject *type, PyObject *arg);
            static PyObject *t_STUniformSplitTerms_intersect(t_STUniformSplitTerms *self, PyObject *args);
            static PyObject *t_STUniformSplitTerms_iterator(t_STUniformSplitTerms *self, PyObject *args);

            static PyMethodDef t_STUniformSplitTerms__methods_[] = {
              DECLARE_METHOD(t_STUniformSplitTerms, cast_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_STUniformSplitTerms, instance_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_STUniformSplitTerms, intersect, METH_VARARGS),
              DECLARE_METHOD(t_STUniformSplitTerms, iterator, METH_VARARGS),
              { NULL, NULL, 0, NULL }
            };

            static PyType_Slot PY_TYPE_SLOTS(STUniformSplitTerms)[] = {
              { Py_tp_methods, t_STUniformSplitTerms__methods_ },
              { Py_tp_init, (void *) abstract_init },
              { 0, NULL }
            };

            static PyType_Def *PY_TYPE_BASES(STUniformSplitTerms)[] = {
              &PY_TYPE_DEF(::org::apache::lucene::codecs::uniformsplit::UniformSplitTerms),
              NULL
            };

            DEFINE_TYPE(STUniformSplitTerms, t_STUniformSplitTerms, STUniformSplitTerms);

            void t_STUniformSplitTerms::install(PyObject *module)
            {
              installType(&PY_TYPE(STUniformSplitTerms), &PY_TYPE_DEF(STUniformSplitTerms), module, "STUniformSplitTerms", 0);
            }

            void t_STUniformSplitTerms::initialize(PyObject *module)
            {
              PyObject_SetAttrString((PyObject *) PY_TYPE(STUniformSplitTerms), "class_", make_descriptor(STUniformSplitTerms::initializeClass, 1));
              PyObject_SetAttrString((PyObject *) PY_TYPE(STUniformSplitTerms), "wrapfn_", make_descriptor(t_STUniformSplitTerms::wrap_jobject));
              PyObject_SetAttrString((PyObject *) PY_TYPE(STUniformSplitTerms), "boxfn_", make_descriptor(boxObject));
            }

            static PyObject *t_STUniformSplitTerms_cast_(PyTypeObject *type, PyObject *arg)
            {
              if (!(arg = castCheck(arg, STUniformSplitTerms::initializeClass, 1)))
                return NULL;
              return t_STUniformSplitTerms::wrap_Object(STUniformSplitTerms(((t_STUniformSplitTerms *) arg)->object.this$));
            }
            static PyObject *t_STUniformSplitTerms_instance_(PyTypeObject *type, PyObject *arg)
            {
              if (!castCheck(arg, STUniformSplitTerms::initializeClass, 0))
                Py_RETURN_FALSE;
              Py_RETURN_TRUE;
            }

            static PyObject *t_STUniformSplitTerms_intersect(t_STUniformSplitTerms *self, PyObject *args)
            {
              ::org::apache::lucene::util::automaton::CompiledAutomaton a0((jobject) NULL);
              ::org::apache::lucene::util::BytesRef a1((jobject) NULL);
              ::org::apache::lucene::index::TermsEnum result((jobject) NULL);

              if (!parseArgs(args, "kk", ::org::apache::lucene::util::automaton::CompiledAutomaton::initializeClass, ::org::apache::lucene::util::BytesRef::initializeClass, &a0, &a1))
              {
                OBJ_CALL(result = self->object.intersect(a0, a1));
                return ::org::apache::lucene::index::t_TermsEnum::wrap_Object(result);
              }

              return callSuper(PY_TYPE(STUniformSplitTerms), (PyObject *) self, "intersect", args, 2);
            }

            static PyObject *t_STUniformSplitTerms_iterator(t_STUniformSplitTerms *self, PyObject *args)
            {
              ::org::apache::lucene::index::TermsEnum result((jobject) NULL);

              if (!parseArgs(args, ""))
              {
                OBJ_CALL(result = self->object.iterator());
                return ::org::apache::lucene::index::t_TermsEnum::wrap_Object(result);
              }

              return callSuper(PY_TYPE(STUniformSplitTerms), (PyObject *) self, "iterator", args, 2);
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/store/SleepingLockWrapper.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/store/Directory.h"
#include "org/apache/lucene/store/Lock.h"
#include "java/lang/String.h"
#include "java/io/IOException.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace store {

        ::java::lang::Class *SleepingLockWrapper::class$ = NULL;
        jmethodID *SleepingLockWrapper::mids$ = NULL;
        bool SleepingLockWrapper::live$ = false;
        jlong SleepingLockWrapper::DEFAULT_POLL_INTERVAL = (jlong) 0;
        jlong SleepingLockWrapper::LOCK_OBTAIN_WAIT_FOREVER = (jlong) 0;

        jclass SleepingLockWrapper::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/store/SleepingLockWrapper");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_7652f4f7a0a6ad99] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/store/Directory;J)V");
            mids$[mid_init$_d32eb3327672e30e] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/store/Directory;JJ)V");
            mids$[mid_obtainLock_f265149b22017c5b] = env->getMethodID(cls, "obtainLock", "(Ljava/lang/String;)Lorg/apache/lucene/store/Lock;");
            mids$[mid_toString_db9b55ba01e03e4b] = env->getMethodID(cls, "toString", "()Ljava/lang/String;");

            class$ = new ::java::lang::Class(cls);
            cls = (jclass) class$->this$;

            DEFAULT_POLL_INTERVAL = env->getStaticLongField(cls, "DEFAULT_POLL_INTERVAL");
            LOCK_OBTAIN_WAIT_FOREVER = env->getStaticLongField(cls, "LOCK_OBTAIN_WAIT_FOREVER");
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        SleepingLockWrapper::SleepingLockWrapper(const ::org::apache::lucene::store::Directory & a0, jlong a1) : ::org::apache::lucene::store::FilterDirectory(env->newObject(initializeClass, &mids$, mid_init$_7652f4f7a0a6ad99, a0.this$, a1)) {}

        SleepingLockWrapper::SleepingLockWrapper(const ::org::apache::lucene::store::Directory & a0, jlong a1, jlong a2) : ::org::apache::lucene::store::FilterDirectory(env->newObject(initializeClass, &mids$, mid_init$_d32eb3327672e30e, a0.this$, a1, a2)) {}

        ::org::apache::lucene::store::Lock SleepingLockWrapper::obtainLock(const ::java::lang::String & a0) const
        {
          return ::org::apache::lucene::store::Lock(env->callObjectMethod(this$, mids$[mid_obtainLock_f265149b22017c5b], a0.this$));
        }

        ::java::lang::String SleepingLockWrapper::toString() const
        {
          return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_db9b55ba01e03e4b]));
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace store {
        static PyObject *t_SleepingLockWrapper_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_SleepingLockWrapper_instance_(PyTypeObject *type, PyObject *arg);
        static int t_SleepingLockWrapper_init_(t_SleepingLockWrapper *self, PyObject *args, PyObject *kwds);
        static PyObject *t_SleepingLockWrapper_obtainLock(t_SleepingLockWrapper *self, PyObject *args);
        static PyObject *t_SleepingLockWrapper_toString(t_SleepingLockWrapper *self, PyObject *args);

        static PyMethodDef t_SleepingLockWrapper__methods_[] = {
          DECLARE_METHOD(t_SleepingLockWrapper, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_SleepingLockWrapper, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_SleepingLockWrapper, obtainLock, METH_VARARGS),
          DECLARE_METHOD(t_SleepingLockWrapper, toString, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        static PyType_Slot PY_TYPE_SLOTS(SleepingLockWrapper)[] = {
          { Py_tp_methods, t_SleepingLockWrapper__methods_ },
          { Py_tp_init, (void *) t_SleepingLockWrapper_init_ },
          { 0, NULL }
        };

        static PyType_Def *PY_TYPE_BASES(SleepingLockWrapper)[] = {
          &PY_TYPE_DEF(::org::apache::lucene::store::FilterDirectory),
          NULL
        };

        DEFINE_TYPE(SleepingLockWrapper, t_SleepingLockWrapper, SleepingLockWrapper);

        void t_SleepingLockWrapper::install(PyObject *module)
        {
          installType(&PY_TYPE(SleepingLockWrapper), &PY_TYPE_DEF(SleepingLockWrapper), module, "SleepingLockWrapper", 0);
        }

        void t_SleepingLockWrapper::initialize(PyObject *module)
        {
          PyObject_SetAttrString((PyObject *) PY_TYPE(SleepingLockWrapper), "class_", make_descriptor(SleepingLockWrapper::initializeClass, 1));
          PyObject_SetAttrString((PyObject *) PY_TYPE(SleepingLockWrapper), "wrapfn_", make_descriptor(t_SleepingLockWrapper::wrap_jobject));
          PyObject_SetAttrString((PyObject *) PY_TYPE(SleepingLockWrapper), "boxfn_", make_descriptor(boxObject));
          env->getClass(SleepingLockWrapper::initializeClass);
          PyObject_SetAttrString((PyObject *) PY_TYPE(SleepingLockWrapper), "DEFAULT_POLL_INTERVAL", make_descriptor(SleepingLockWrapper::DEFAULT_POLL_INTERVAL));
          PyObject_SetAttrString((PyObject *) PY_TYPE(SleepingLockWrapper), "LOCK_OBTAIN_WAIT_FOREVER", make_descriptor(SleepingLockWrapper::LOCK_OBTAIN_WAIT_FOREVER));
        }

        static PyObject *t_SleepingLockWrapper_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, SleepingLockWrapper::initializeClass, 1)))
            return NULL;
          return t_SleepingLockWrapper::wrap_Object(SleepingLockWrapper(((t_SleepingLockWrapper *) arg)->object.this$));
        }
        static PyObject *t_SleepingLockWrapper_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, SleepingLockWrapper::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_SleepingLockWrapper_init_(t_SleepingLockWrapper *self, PyObject *args, PyObject *kwds)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 2:
            {
              ::org::apache::lucene::store::Directory a0((jobject) NULL);
              jlong a1;
              SleepingLockWrapper object((jobject) NULL);

              if (!parseArgs(args, "kJ", ::org::apache::lucene::store::Directory::initializeClass, &a0, &a1))
              {
                INT_CALL(object = SleepingLockWrapper(a0, a1));
                self->object = object;
                break;
              }
            }
            goto err;
           case 3:
            {
              ::org::apache::lucene::store::Directory a0((jobject) NULL);
              jlong a1;
              jlong a2;
              SleepingLockWrapper object((jobject) NULL);

              if (!parseArgs(args, "kJJ", ::org::apache::lucene::store::Directory::initializeClass, &a0, &a1, &a2))
              {
                INT_CALL(object = SleepingLockWrapper(a0, a1, a2));
                self->object = object;
                break;
              }
            }
           default:
           err:
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }

        static PyObject *t_SleepingLockWrapper_obtainLock(t_SleepingLockWrapper *self, PyObject *args)
        {
          ::java::lang::String a0((jobject) NULL);
          ::org::apache::lucene::store::Lock result((jobject) NULL);

          if (!parseArgs(args, "s", &a0))
          {
            OBJ_CALL(result = self->object.obtainLock(a0));
            return ::org::apache::lucene::store::t_Lock::wrap_Object(result);
          }

          return callSuper(PY_TYPE(SleepingLockWrapper), (PyObject *) self, "obtainLock", args, 2);
        }

        static PyObject *t_SleepingLockWrapper_toString(t_SleepingLockWrapper *self, PyObject *args)
        {
          ::java::lang::String result((jobject) NULL);

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.toString());
            return j2p(result);
          }

          return callSuper(PY_TYPE(SleepingLockWrapper), (PyObject *) self, "toString", args, 2);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queryparser/xml/builders/TermsQueryBuilder.h"
#include "org/apache/lucene/analysis/Analyzer.h"
#include "org/apache/lucene/search/Query.h"
#include "org/apache/lucene/queryparser/xml/QueryBuilder.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace xml {
          namespace builders {

            ::java::lang::Class *TermsQueryBuilder::class$ = NULL;
            jmethodID *TermsQueryBuilder::mids$ = NULL;
            bool TermsQueryBuilder::live$ = false;

            jclass TermsQueryBuilder::initializeClass(bool getOnly)
            {
              if (getOnly)
                return (jclass) (live$ ? class$->this$ : NULL);
              if (class$ == NULL)
              {
                jclass cls = (jclass) env->findClass("org/apache/lucene/queryparser/xml/builders/TermsQueryBuilder");

                mids$ = new jmethodID[max_mid];
                mids$[mid_init$_651b708fb3f85e6e] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/analysis/Analyzer;)V");

                class$ = new ::java::lang::Class(cls);
                live$ = true;
              }
              return (jclass) class$->this$;
            }

            TermsQueryBuilder::TermsQueryBuilder(const ::org::apache::lucene::analysis::Analyzer & a0) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_651b708fb3f85e6e, a0.this$)) {}
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace xml {
          namespace builders {
            static PyObject *t_TermsQueryBuilder_cast_(PyTypeObject *type, PyObject *arg);
            static PyObject *t_TermsQueryBuilder_instance_(PyTypeObject *type, PyObject *arg);
            static int t_TermsQueryBuilder_init_(t_TermsQueryBuilder *self, PyObject *args, PyObject *kwds);

            static PyMethodDef t_TermsQueryBuilder__methods_[] = {
              DECLARE_METHOD(t_TermsQueryBuilder, cast_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_TermsQueryBuilder, instance_, METH_O | METH_CLASS),
              { NULL, NULL, 0, NULL }
            };

            static PyType_Slot PY_TYPE_SLOTS(TermsQueryBuilder)[] = {
              { Py_tp_methods, t_TermsQueryBuilder__methods_ },
              { Py_tp_init, (void *) t_TermsQueryBuilder_init_ },
              { 0, NULL }
            };

            static PyType_Def *PY_TYPE_BASES(TermsQueryBuilder)[] = {
              &PY_TYPE_DEF(::java::lang::Object),
              NULL
            };

            DEFINE_TYPE(TermsQueryBuilder, t_TermsQueryBuilder, TermsQueryBuilder);

            void t_TermsQueryBuilder::install(PyObject *module)
            {
              installType(&PY_TYPE(TermsQueryBuilder), &PY_TYPE_DEF(TermsQueryBuilder), module, "TermsQueryBuilder", 0);
            }

            void t_TermsQueryBuilder::initialize(PyObject *module)
            {
              PyObject_SetAttrString((PyObject *) PY_TYPE(TermsQueryBuilder), "class_", make_descriptor(TermsQueryBuilder::initializeClass, 1));
              PyObject_SetAttrString((PyObject *) PY_TYPE(TermsQueryBuilder), "wrapfn_", make_descriptor(t_TermsQueryBuilder::wrap_jobject));
              PyObject_SetAttrString((PyObject *) PY_TYPE(TermsQueryBuilder), "boxfn_", make_descriptor(boxObject));
            }

            static PyObject *t_TermsQueryBuilder_cast_(PyTypeObject *type, PyObject *arg)
            {
              if (!(arg = castCheck(arg, TermsQueryBuilder::initializeClass, 1)))
                return NULL;
              return t_TermsQueryBuilder::wrap_Object(TermsQueryBuilder(((t_TermsQueryBuilder *) arg)->object.this$));
            }
            static PyObject *t_TermsQueryBuilder_instance_(PyTypeObject *type, PyObject *arg)
            {
              if (!castCheck(arg, TermsQueryBuilder::initializeClass, 0))
                Py_RETURN_FALSE;
              Py_RETURN_TRUE;
            }

            static int t_TermsQueryBuilder_init_(t_TermsQueryBuilder *self, PyObject *args, PyObject *kwds)
            {
              ::org::apache::lucene::analysis::Analyzer a0((jobject) NULL);
              TermsQueryBuilder object((jobject) NULL);

              if (!parseArgs(args, "k", ::org::apache::lucene::analysis::Analyzer::initializeClass, &a0))
              {
                INT_CALL(object = TermsQueryBuilder(a0));
                self->object = object;
              }
              else
              {
                PyErr_SetArgsError((PyObject *) self, "__init__", args);
                return -1;
              }

              return 0;
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/no/NorwegianLightStemmer.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace no {

          ::java::lang::Class *NorwegianLightStemmer::class$ = NULL;
          jmethodID *NorwegianLightStemmer::mids$ = NULL;
          bool NorwegianLightStemmer::live$ = false;
          jint NorwegianLightStemmer::BOKMAAL = (jint) 0;
          jint NorwegianLightStemmer::NYNORSK = (jint) 0;

          jclass NorwegianLightStemmer::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/no/NorwegianLightStemmer");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_040c4cd0390c5aff] = env->getMethodID(cls, "<init>", "(I)V");
              mids$[mid_stem_d4655f2a19359017] = env->getMethodID(cls, "stem", "([CI)I");

              class$ = new ::java::lang::Class(cls);
              cls = (jclass) class$->this$;

              BOKMAAL = env->getStaticIntField(cls, "BOKMAAL");
              NYNORSK = env->getStaticIntField(cls, "NYNORSK");
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          NorwegianLightStemmer::NorwegianLightStemmer(jint a0) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_040c4cd0390c5aff, a0)) {}

          jint NorwegianLightStemmer::stem(const JArray< jchar > & a0, jint a1) const
          {
            return env->callIntMethod(this$, mids$[mid_stem_d4655f2a19359017], a0.this$, a1);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace no {
          static PyObject *t_NorwegianLightStemmer_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_NorwegianLightStemmer_instance_(PyTypeObject *type, PyObject *arg);
          static int t_NorwegianLightStemmer_init_(t_NorwegianLightStemmer *self, PyObject *args, PyObject *kwds);
          static PyObject *t_NorwegianLightStemmer_stem(t_NorwegianLightStemmer *self, PyObject *args);

          static PyMethodDef t_NorwegianLightStemmer__methods_[] = {
            DECLARE_METHOD(t_NorwegianLightStemmer, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_NorwegianLightStemmer, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_NorwegianLightStemmer, stem, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          static PyType_Slot PY_TYPE_SLOTS(NorwegianLightStemmer)[] = {
            { Py_tp_methods, t_NorwegianLightStemmer__methods_ },
            { Py_tp_init, (void *) t_NorwegianLightStemmer_init_ },
            { 0, NULL }
          };

          static PyType_Def *PY_TYPE_BASES(NorwegianLightStemmer)[] = {
            &PY_TYPE_DEF(::java::lang::Object),
            NULL
          };

          DEFINE_TYPE(NorwegianLightStemmer, t_NorwegianLightStemmer, NorwegianLightStemmer);

          void t_NorwegianLightStemmer::install(PyObject *module)
          {
            installType(&PY_TYPE(NorwegianLightStemmer), &PY_TYPE_DEF(NorwegianLightStemmer), module, "NorwegianLightStemmer", 0);
          }

          void t_NorwegianLightStemmer::initialize(PyObject *module)
          {
            PyObject_SetAttrString((PyObject *) PY_TYPE(NorwegianLightStemmer), "class_", make_descriptor(NorwegianLightStemmer::initializeClass, 1));
            PyObject_SetAttrString((PyObject *) PY_TYPE(NorwegianLightStemmer), "wrapfn_", make_descriptor(t_NorwegianLightStemmer::wrap_jobject));
            PyObject_SetAttrString((PyObject *) PY_TYPE(NorwegianLightStemmer), "boxfn_", make_descriptor(boxObject));
            env->getClass(NorwegianLightStemmer::initializeClass);
            PyObject_SetAttrString((PyObject *) PY_TYPE(NorwegianLightStemmer), "BOKMAAL", make_descriptor(NorwegianLightStemmer::BOKMAAL));
            PyObject_SetAttrString((PyObject *) PY_TYPE(NorwegianLightStemmer), "NYNORSK", make_descriptor(NorwegianLightStemmer::NYNORSK));
          }

          static PyObject *t_NorwegianLightStemmer_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, NorwegianLightStemmer::initializeClass, 1)))
              return NULL;
            return t_NorwegianLightStemmer::wrap_Object(NorwegianLightStemmer(((t_NorwegianLightStemmer *) arg)->object.this$));
          }
          static PyObject *t_NorwegianLightStemmer_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, NorwegianLightStemmer::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_NorwegianLightStemmer_init_(t_NorwegianLightStemmer *self, PyObject *args, PyObject *kwds)
          {
            jint a0;
            NorwegianLightStemmer object((jobject) NULL);

            if (!parseArgs(args, "I", &a0))
            {
              INT_CALL(object = NorwegianLightStemmer(a0));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_NorwegianLightStemmer_stem(t_NorwegianLightStemmer *self, PyObject *args)
          {
            JArray< jchar > a0((jobject) NULL);
            jint a1;
            jint result;

            if (!parseArgs(args, "[CI", &a0, &a1))
            {
              OBJ_CALL(result = self->object.stem(a0, a1));
              return PyLong_FromLong((long) result);
            }

            PyErr_SetArgsError((PyObject *) self, "stem", args);
            return NULL;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/index/SoftDeletesDirectoryReaderWrapper.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/index/DirectoryReader.h"
#include "org/apache/lucene/index/LeafReader.h"
#include "java/lang/String.h"
#include "org/apache/lucene/index/IndexReader$CacheHelper.h"
#include "java/io/IOException.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {

        ::java::lang::Class *SoftDeletesDirectoryReaderWrapper::class$ = NULL;
        jmethodID *SoftDeletesDirectoryReaderWrapper::mids$ = NULL;
        bool SoftDeletesDirectoryReaderWrapper::live$ = false;

        jclass SoftDeletesDirectoryReaderWrapper::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/index/SoftDeletesDirectoryReaderWrapper");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_3e5cfde576a79434] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/index/DirectoryReader;Ljava/lang/String;)V");
            mids$[mid_getReaderCacheHelper_a64c414fea9a8cf6] = env->getMethodID(cls, "getReaderCacheHelper", "()Lorg/apache/lucene/index/IndexReader$CacheHelper;");
            mids$[mid_doWrapDirectoryReader_bfd9949da06c4860] = env->getMethodID(cls, "doWrapDirectoryReader", "(Lorg/apache/lucene/index/DirectoryReader;)Lorg/apache/lucene/index/DirectoryReader;");

            class$ = new ::java::lang::Class(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        SoftDeletesDirectoryReaderWrapper::SoftDeletesDirectoryReaderWrapper(const ::org::apache::lucene::index::DirectoryReader & a0, const ::java::lang::String & a1) : ::org::apache::lucene::index::FilterDirectoryReader(env->newObject(initializeClass, &mids$, mid_init$_3e5cfde576a79434, a0.this$, a1.this$)) {}

        ::org::apache::lucene::index::IndexReader$CacheHelper SoftDeletesDirectoryReaderWrapper::getReaderCacheHelper() const
        {
          return ::org::apache::lucene::index::IndexReader$CacheHelper(env->callObjectMethod(this$, mids$[mid_getReaderCacheHelper_a64c414fea9a8cf6]));
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {
        static PyObject *t_SoftDeletesDirectoryReaderWrapper_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_SoftDeletesDirectoryReaderWrapper_instance_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_SoftDeletesDirectoryReaderWrapper_of_(t_SoftDeletesDirectoryReaderWrapper *self, PyObject *args);
        static int t_SoftDeletesDirectoryReaderWrapper_init_(t_SoftDeletesDirectoryReaderWrapper *self, PyObject *args, PyObject *kwds);
        static PyObject *t_SoftDeletesDirectoryReaderWrapper_getReaderCacheHelper(t_SoftDeletesDirectoryReaderWrapper *self, PyObject *args);
        static PyObject *t_SoftDeletesDirectoryReaderWrapper_get__readerCacheHelper(t_SoftDeletesDirectoryReaderWrapper *self, void *data);
        static PyObject *t_SoftDeletesDirectoryReaderWrapper_get__parameters_(t_SoftDeletesDirectoryReaderWrapper *self, void *data);
        static PyGetSetDef t_SoftDeletesDirectoryReaderWrapper__fields_[] = {
          DECLARE_GET_FIELD(t_SoftDeletesDirectoryReaderWrapper, readerCacheHelper),
          DECLARE_GET_FIELD(t_SoftDeletesDirectoryReaderWrapper, parameters_),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_SoftDeletesDirectoryReaderWrapper__methods_[] = {
          DECLARE_METHOD(t_SoftDeletesDirectoryReaderWrapper, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_SoftDeletesDirectoryReaderWrapper, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_SoftDeletesDirectoryReaderWrapper, of_, METH_VARARGS),
          DECLARE_METHOD(t_SoftDeletesDirectoryReaderWrapper, getReaderCacheHelper, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        static PyType_Slot PY_TYPE_SLOTS(SoftDeletesDirectoryReaderWrapper)[] = {
          { Py_tp_methods, t_SoftDeletesDirectoryReaderWrapper__methods_ },
          { Py_tp_init, (void *) t_SoftDeletesDirectoryReaderWrapper_init_ },
          { Py_tp_getset, t_SoftDeletesDirectoryReaderWrapper__fields_ },
          { 0, NULL }
        };

        static PyType_Def *PY_TYPE_BASES(SoftDeletesDirectoryReaderWrapper)[] = {
          &PY_TYPE_DEF(::org::apache::lucene::index::FilterDirectoryReader),
          NULL
        };

        DEFINE_TYPE(SoftDeletesDirectoryReaderWrapper, t_SoftDeletesDirectoryReaderWrapper, SoftDeletesDirectoryReaderWrapper);
        PyObject *t_SoftDeletesDirectoryReaderWrapper::wrap_Object(const SoftDeletesDirectoryReaderWrapper& object, PyTypeObject *p0)
        {
          PyObject *obj = t_SoftDeletesDirectoryReaderWrapper::wrap_Object(object);
          if (obj != NULL && obj != Py_None)
          {
            t_SoftDeletesDirectoryReaderWrapper *self = (t_SoftDeletesDirectoryReaderWrapper *) obj;
            self->parameters[0] = p0;
          }
          return obj;
        }

        PyObject *t_SoftDeletesDirectoryReaderWrapper::wrap_jobject(const jobject& object, PyTypeObject *p0)
        {
          PyObject *obj = t_SoftDeletesDirectoryReaderWrapper::wrap_jobject(object);
          if (obj != NULL && obj != Py_None)
          {
            t_SoftDeletesDirectoryReaderWrapper *self = (t_SoftDeletesDirectoryReaderWrapper *) obj;
            self->parameters[0] = p0;
          }
          return obj;
        }

        void t_SoftDeletesDirectoryReaderWrapper::install(PyObject *module)
        {
          installType(&PY_TYPE(SoftDeletesDirectoryReaderWrapper), &PY_TYPE_DEF(SoftDeletesDirectoryReaderWrapper), module, "SoftDeletesDirectoryReaderWrapper", 0);
        }

        void t_SoftDeletesDirectoryReaderWrapper::initialize(PyObject *module)
        {
          PyObject_SetAttrString((PyObject *) PY_TYPE(SoftDeletesDirectoryReaderWrapper), "class_", make_descriptor(SoftDeletesDirectoryReaderWrapper::initializeClass, 1));
          PyObject_SetAttrString((PyObject *) PY_TYPE(SoftDeletesDirectoryReaderWrapper), "wrapfn_", make_descriptor(t_SoftDeletesDirectoryReaderWrapper::wrap_jobject));
          PyObject_SetAttrString((PyObject *) PY_TYPE(SoftDeletesDirectoryReaderWrapper), "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_SoftDeletesDirectoryReaderWrapper_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, SoftDeletesDirectoryReaderWrapper::initializeClass, 1)))
            return NULL;
          return t_SoftDeletesDirectoryReaderWrapper::wrap_Object(SoftDeletesDirectoryReaderWrapper(((t_SoftDeletesDirectoryReaderWrapper *) arg)->object.this$));
        }
        static PyObject *t_SoftDeletesDirectoryReaderWrapper_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, SoftDeletesDirectoryReaderWrapper::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static PyObject *t_SoftDeletesDirectoryReaderWrapper_of_(t_SoftDeletesDirectoryReaderWrapper *self, PyObject *args)
        {
          if (!parseArg(args, "T", 1, &(self->parameters)))
            Py_RETURN_SELF;
          return PyErr_SetArgsError((PyObject *) self, "of_", args);
        }

        static int t_SoftDeletesDirectoryReaderWrapper_init_(t_SoftDeletesDirectoryReaderWrapper *self, PyObject *args, PyObject *kwds)
        {
          ::org::apache::lucene::index::DirectoryReader a0((jobject) NULL);
          PyTypeObject **p0;
          ::java::lang::String a1((jobject) NULL);
          SoftDeletesDirectoryReaderWrapper object((jobject) NULL);

          if (!parseArgs(args, "Ks", ::org::apache::lucene::index::DirectoryReader::initializeClass, &a0, &p0, ::org::apache::lucene::index::t_DirectoryReader::parameters_, &a1))
          {
            INT_CALL(object = SoftDeletesDirectoryReaderWrapper(a0, a1));
            self->object = object;
            self->parameters[0] = ::org::apache::lucene::index::PY_TYPE(LeafReader);
          }
          else
          {
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }

        static PyObject *t_SoftDeletesDirectoryReaderWrapper_getReaderCacheHelper(t_SoftDeletesDirectoryReaderWrapper *self, PyObject *args)
        {
          ::org::apache::lucene::index::IndexReader$CacheHelper result((jobject) NULL);

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.getReaderCacheHelper());
            return ::org::apache::lucene::index::t_IndexReader$CacheHelper::wrap_Object(result);
          }

          return callSuper(PY_TYPE(SoftDeletesDirectoryReaderWrapper), (PyObject *) self, "getReaderCacheHelper", args, 2);
        }
        static PyObject *t_SoftDeletesDirectoryReaderWrapper_get__parameters_(t_SoftDeletesDirectoryReaderWrapper *self, void *data)
        {
          return typeParameters(self->parameters, sizeof(self->parameters));
        }

        static PyObject *t_SoftDeletesDirectoryReaderWrapper_get__readerCacheHelper(t_SoftDeletesDirectoryReaderWrapper *self, void *data)
        {
          ::org::apache::lucene::index::IndexReader$CacheHelper value((jobject) NULL);
          OBJ_CALL(value = self->object.getReaderCacheHelper());
          return ::org::apache::lucene::index::t_IndexReader$CacheHelper::wrap_Object(value);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/el/GreekLowerCaseFilterFactory.h"
#include "java/util/Map.h"
#include "java/lang/String.h"
#include "org/apache/lucene/analysis/TokenStream.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace el {

          ::java::lang::Class *GreekLowerCaseFilterFactory::class$ = NULL;
          jmethodID *GreekLowerCaseFilterFactory::mids$ = NULL;
          bool GreekLowerCaseFilterFactory::live$ = false;
          ::java::lang::String *GreekLowerCaseFilterFactory::NAME = NULL;

          jclass GreekLowerCaseFilterFactory::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/el/GreekLowerCaseFilterFactory");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_408bd889ee3beae5] = env->getMethodID(cls, "<init>", "(Ljava/util/Map;)V");
              mids$[mid_create_6de1e28d9d10cd9e] = env->getMethodID(cls, "create", "(Lorg/apache/lucene/analysis/TokenStream;)Lorg/apache/lucene/analysis/TokenStream;");
              mids$[mid_normalize_6de1e28d9d10cd9e] = env->getMethodID(cls, "normalize", "(Lorg/apache/lucene/analysis/TokenStream;)Lorg/apache/lucene/analysis/TokenStream;");

              class$ = new ::java::lang::Class(cls);
              cls = (jclass) class$->this$;

              NAME = new ::java::lang::String(env->getStaticObjectField(cls, "NAME", "Ljava/lang/String;"));
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          GreekLowerCaseFilterFactory::GreekLowerCaseFilterFactory(const ::java::util::Map & a0) : ::org::apache::lucene::analysis::util::TokenFilterFactory(env->newObject(initializeClass, &mids$, mid_init$_408bd889ee3beae5, a0.this$)) {}

          ::org::apache::lucene::analysis::TokenStream GreekLowerCaseFilterFactory::create(const ::org::apache::lucene::analysis::TokenStream & a0) const
          {
            return ::org::apache::lucene::analysis::TokenStream(env->callObjectMethod(this$, mids$[mid_create_6de1e28d9d10cd9e], a0.this$));
          }

          ::org::apache::lucene::analysis::TokenStream GreekLowerCaseFilterFactory::normalize(const ::org::apache::lucene::analysis::TokenStream & a0) const
          {
            return ::org::apache::lucene::analysis::TokenStream(env->callObjectMethod(this$, mids$[mid_normalize_6de1e28d9d10cd9e], a0.this$));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace el {
          static PyObject *t_GreekLowerCaseFilterFactory_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_GreekLowerCaseFilterFactory_instance_(PyTypeObject *type, PyObject *arg);
          static int t_GreekLowerCaseFilterFactory_init_(t_GreekLowerCaseFilterFactory *self, PyObject *args, PyObject *kwds);
          static PyObject *t_GreekLowerCaseFilterFactory_create(t_GreekLowerCaseFilterFactory *self, PyObject *args);
          static PyObject *t_GreekLowerCaseFilterFactory_normalize(t_GreekLowerCaseFilterFactory *self, PyObject *args);

          static PyMethodDef t_GreekLowerCaseFilterFactory__methods_[] = {
            DECLARE_METHOD(t_GreekLowerCaseFilterFactory, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_GreekLowerCaseFilterFactory, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_GreekLowerCaseFilterFactory, create, METH_VARARGS),
            DECLARE_METHOD(t_GreekLowerCaseFilterFactory, normalize, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          static PyType_Slot PY_TYPE_SLOTS(GreekLowerCaseFilterFactory)[] = {
            { Py_tp_methods, t_GreekLowerCaseFilterFactory__methods_ },
            { Py_tp_init, (void *) t_GreekLowerCaseFilterFactory_init_ },
            { 0, NULL }
          };

          static PyType_Def *PY_TYPE_BASES(GreekLowerCaseFilterFactory)[] = {
            &PY_TYPE_DEF(::org::apache::lucene::analysis::util::TokenFilterFactory),
            NULL
          };

          DEFINE_TYPE(GreekLowerCaseFilterFactory, t_GreekLowerCaseFilterFactory, GreekLowerCaseFilterFactory);

          void t_GreekLowerCaseFilterFactory::install(PyObject *module)
          {
            installType(&PY_TYPE(GreekLowerCaseFilterFactory), &PY_TYPE_DEF(GreekLowerCaseFilterFactory), module, "GreekLowerCaseFilterFactory", 0);
          }

          void t_GreekLowerCaseFilterFactory::initialize(PyObject *module)
          {
            PyObject_SetAttrString((PyObject *) PY_TYPE(GreekLowerCaseFilterFactory), "class_", make_descriptor(GreekLowerCaseFilterFactory::initializeClass, 1));
            PyObject_SetAttrString((PyObject *) PY_TYPE(GreekLowerCaseFilterFactory), "wrapfn_", make_descriptor(t_GreekLowerCaseFilterFactory::wrap_jobject));
            PyObject_SetAttrString((PyObject *) PY_TYPE(GreekLowerCaseFilterFactory), "boxfn_", make_descriptor(boxObject));
            env->getClass(GreekLowerCaseFilterFactory::initializeClass);
            PyObject_SetAttrString((PyObject *) PY_TYPE(GreekLowerCaseFilterFactory), "NAME", make_descriptor(j2p(*GreekLowerCaseFilterFactory::NAME)));
          }

          static PyObject *t_GreekLowerCaseFilterFactory_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, GreekLowerCaseFilterFactory::initializeClass, 1)))
              return NULL;
            return t_GreekLowerCaseFilterFactory::wrap_Object(GreekLowerCaseFilterFactory(((t_GreekLowerCaseFilterFactory *) arg)->object.this$));
          }
          static PyObject *t_GreekLowerCaseFilterFactory_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, GreekLowerCaseFilterFactory::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_GreekLowerCaseFilterFactory_init_(t_GreekLowerCaseFilterFactory *self, PyObject *args, PyObject *kwds)
          {
            ::java::util::Map a0((jobject) NULL);
            PyTypeObject **p0;
            GreekLowerCaseFilterFactory object((jobject) NULL);

            if (!parseArgs(args, "K", ::java::util::Map::initializeClass, &a0, &p0, ::java::util::t_Map::parameters_))
            {
              INT_CALL(object = GreekLowerCaseFilterFactory(a0));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_GreekLowerCaseFilterFactory_create(t_GreekLowerCaseFilterFactory *self, PyObject *args)
          {
            ::org::apache::lucene::analysis::TokenStream a0((jobject) NULL);
            ::org::apache::lucene::analysis::TokenStream result((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::analysis::TokenStream::initializeClass, &a0))
            {
              OBJ_CALL(result = self->object.create(a0));
              return ::org::apache::lucene::analysis::t_TokenStream::wrap_Object(result);
            }

            return callSuper(PY_TYPE(GreekLowerCaseFilterFactory), (PyObject *) self, "create", args, 2);
          }

          static PyObject *t_GreekLowerCaseFilterFactory_normalize(t_GreekLowerCaseFilterFactory *self, PyObject *args)
          {
            ::org::apache::lucene::analysis::TokenStream a0((jobject) NULL);
            ::org::apache::lucene::analysis::TokenStream result((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::analysis::TokenStream::initializeClass, &a0))
            {
              OBJ_CALL(result = self->object.normalize(a0));
              return ::org::apache::lucene::analysis::t_TokenStream::wrap_Object(result);
            }

            return callSuper(PY_TYPE(GreekLowerCaseFilterFactory), (PyObject *) self, "normalize", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/spans/SpanTermQuery.h"
#include "org/apache/lucene/search/IndexSearcher.h"
#include "org/apache/lucene/index/Term.h"
#include "java/lang/Class.h"
#include "java/lang/Object.h"
#include "org/apache/lucene/index/TermStates.h"
#include "org/apache/lucene/search/spans/SpanWeight.h"
#include "java/lang/String.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/search/QueryVisitor.h"
#include "org/apache/lucene/search/ScoreMode.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace spans {

          ::java::lang::Class *SpanTermQuery::class$ = NULL;
          jmethodID *SpanTermQuery::mids$ = NULL;
          bool SpanTermQuery::live$ = false;

          jclass SpanTermQuery::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/search/spans/SpanTermQuery");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_32784f9c0ee449e6] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/index/Term;)V");
              mids$[mid_init$_98ee6fb07d5bdf57] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/index/Term;Lorg/apache/lucene/index/TermStates;)V");
              mids$[mid_createWeight_5baab4cc5ccc46b6] = env->getMethodID(cls, "createWeight", "(Lorg/apache/lucene/search/IndexSearcher;Lorg/apache/lucene/search/ScoreMode;F)Lorg/apache/lucene/search/spans/SpanWeight;");
              mids$[mid_equals_8b72f2dcdde6fd1d] = env->getMethodID(cls, "equals", "(Ljava/lang/Object;)Z");
              mids$[mid_getField_db9b55ba01e03e4b] = env->getMethodID(cls, "getField", "()Ljava/lang/String;");
              mids$[mid_getTerm_5e734526802c58d9] = env->getMethodID(cls, "getTerm", "()Lorg/apache/lucene/index/Term;");
              mids$[mid_getTermStates_656ab7adb8fbc7f7] = env->getMethodID(cls, "getTermStates", "()Lorg/apache/lucene/index/TermStates;");
              mids$[mid_hashCode_9972fcc56b44e79d] = env->getMethodID(cls, "hashCode", "()I");
              mids$[mid_toString_9bfa75c9f141b67f] = env->getMethodID(cls, "toString", "(Ljava/lang/String;)Ljava/lang/String;");
              mids$[mid_visit_f9e6207006c5b6c1] = env->getMethodID(cls, "visit", "(Lorg/apache/lucene/search/QueryVisitor;)V");

              class$ = new ::java::lang::Class(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          SpanTermQuery::SpanTermQuery(const ::org::apache::lucene::index::Term & a0) : ::org::apache::lucene::search::spans::SpanQuery(env->newObject(initializeClass, &mids$, mid_init$_32784f9c0ee449e6, a0.this$)) {}

          SpanTermQuery::SpanTermQuery(const ::org::apache::lucene::index::Term & a0, const ::org::apache::lucene::index::TermStates & a1) : ::org::apache::lucene::search::spans::SpanQuery(env->newObject(initializeClass, &mids$, mid_init$_98ee6fb07d5bdf57, a0.this$, a1.this$)) {}

          ::org::apache::lucene::search::spans::SpanWeight SpanTermQuery::createWeight(const ::org::apache::lucene::search::IndexSearcher & a0, const ::org::apache::lucene::search::ScoreMode & a1, jfloat a2) const
          {
            return ::org::apache::lucene::search::spans::SpanWeight(env->callObjectMethod(this$, mids$[mid_createWeight_5baab4cc5ccc46b6], a0.this$, a1.this$, a2));
          }

          jboolean SpanTermQuery::equals(const ::java::lang::Object & a0) const
          {
            return env->callBooleanMethod(this$, mids$[mid_equals_8b72f2dcdde6fd1d], a0.this$);
          }

          ::java::lang::String SpanTermQuery::getField() const
          {
            return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_getField_db9b55ba01e03e4b]));
          }

          ::org::apache::lucene::index::Term SpanTermQuery::getTerm() const
          {
            return ::org::apache::lucene::index::Term(env->callObjectMethod(this$, mids$[mid_getTerm_5e734526802c58d9]));
          }

          ::org::apache::lucene::index::TermStates SpanTermQuery::getTermStates() const
          {
            return ::org::apache::lucene::index::TermStates(env->callObjectMethod(this$, mids$[mid_getTermStates_656ab7adb8fbc7f7]));
          }

          jint SpanTermQuery::hashCode() const
          {
            return env->callIntMethod(this$, mids$[mid_hashCode_9972fcc56b44e79d]);
          }

          ::java::lang::String SpanTermQuery::toString(const ::java::lang::String & a0) const
          {
            return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_9bfa75c9f141b67f], a0.this$));
          }

          void SpanTermQuery::visit(const ::org::apache::lucene::search::QueryVisitor & a0) const
          {
            env->callVoidMethod(this$, mids$[mid_visit_f9e6207006c5b6c1], a0.this$);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace spans {
          static PyObject *t_SpanTermQuery_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_SpanTermQuery_instance_(PyTypeObject *type, PyObject *arg);
          static int t_SpanTermQuery_init_(t_SpanTermQuery *self, PyObject *args, PyObject *kwds);
          static PyObject *t_SpanTermQuery_createWeight(t_SpanTermQuery *self, PyObject *args);
          static PyObject *t_SpanTermQuery_equals(t_SpanTermQuery *self, PyObject *args);
          static PyObject *t_SpanTermQuery_getField(t_SpanTermQuery *self, PyObject *args);
          static PyObject *t_SpanTermQuery_getTerm(t_SpanTermQuery *self);
          static PyObject *t_SpanTermQuery_getTermStates(t_SpanTermQuery *self, PyObject *args);
          static PyObject *t_SpanTermQuery_hashCode(t_SpanTermQuery *self, PyObject *args);
          static PyObject *t_SpanTermQuery_toString(t_SpanTermQuery *self, PyObject *args);
          static PyObject *t_SpanTermQuery_visit(t_SpanTermQuery *self, PyObject *args);
          static PyObject *t_SpanTermQuery_get__field(t_SpanTermQuery *self, void *data);
          static PyObject *t_SpanTermQuery_get__term(t_SpanTermQuery *self, void *data);
          static PyObject *t_SpanTermQuery_get__termStates(t_SpanTermQuery *self, void *data);
          static PyGetSetDef t_SpanTermQuery__fields_[] = {
            DECLARE_GET_FIELD(t_SpanTermQuery, field),
            DECLARE_GET_FIELD(t_SpanTermQuery, term),
            DECLARE_GET_FIELD(t_SpanTermQuery, termStates),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_SpanTermQuery__methods_[] = {
            DECLARE_METHOD(t_SpanTermQuery, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_SpanTermQuery, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_SpanTermQuery, createWeight, METH_VARARGS),
            DECLARE_METHOD(t_SpanTermQuery, equals, METH_VARARGS),
            DECLARE_METHOD(t_SpanTermQuery, getField, METH_VARARGS),
            DECLARE_METHOD(t_SpanTermQuery, getTerm, METH_NOARGS),
            DECLARE_METHOD(t_SpanTermQuery, getTermStates, METH_VARARGS),
            DECLARE_METHOD(t_SpanTermQuery, hashCode, METH_VARARGS),
            DECLARE_METHOD(t_SpanTermQuery, toString, METH_VARARGS),
            DECLARE_METHOD(t_SpanTermQuery, visit, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          static PyType_Slot PY_TYPE_SLOTS(SpanTermQuery)[] = {
            { Py_tp_methods, t_SpanTermQuery__methods_ },
            { Py_tp_init, (void *) t_SpanTermQuery_init_ },
            { Py_tp_getset, t_SpanTermQuery__fields_ },
            { 0, NULL }
          };

          static PyType_Def *PY_TYPE_BASES(SpanTermQuery)[] = {
            &PY_TYPE_DEF(::org::apache::lucene::search::spans::SpanQuery),
            NULL
          };

          DEFINE_TYPE(SpanTermQuery, t_SpanTermQuery, SpanTermQuery);

          void t_SpanTermQuery::install(PyObject *module)
          {
            installType(&PY_TYPE(SpanTermQuery), &PY_TYPE_DEF(SpanTermQuery), module, "SpanTermQuery", 0);
          }

          void t_SpanTermQuery::initialize(PyObject *module)
          {
            PyObject_SetAttrString((PyObject *) PY_TYPE(SpanTermQuery), "class_", make_descriptor(SpanTermQuery::initializeClass, 1));
            PyObject_SetAttrString((PyObject *) PY_TYPE(SpanTermQuery), "wrapfn_", make_descriptor(t_SpanTermQuery::wrap_jobject));
            PyObject_SetAttrString((PyObject *) PY_TYPE(SpanTermQuery), "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_SpanTermQuery_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, SpanTermQuery::initializeClass, 1)))
              return NULL;
            return t_SpanTermQuery::wrap_Object(SpanTermQuery(((t_SpanTermQuery *) arg)->object.this$));
          }
          static PyObject *t_SpanTermQuery_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, SpanTermQuery::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_SpanTermQuery_init_(t_SpanTermQuery *self, PyObject *args, PyObject *kwds)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 1:
              {
                ::org::apache::lucene::index::Term a0((jobject) NULL);
                SpanTermQuery object((jobject) NULL);

                if (!parseArgs(args, "k", ::org::apache::lucene::index::Term::initializeClass, &a0))
                {
                  INT_CALL(object = SpanTermQuery(a0));
                  self->object = object;
                  break;
                }
              }
              goto err;
             case 2:
              {
                ::org::apache::lucene::index::Term a0((jobject) NULL);
                ::org::apache::lucene::index::TermStates a1((jobject) NULL);
                SpanTermQuery object((jobject) NULL);

                if (!parseArgs(args, "kk", ::org::apache::lucene::index::Term::initializeClass, ::org::apache::lucene::index::TermStates::initializeClass, &a0, &a1))
                {
                  INT_CALL(object = SpanTermQuery(a0, a1));
                  self->object = object;
                  break;
                }
              }
             default:
             err:
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_SpanTermQuery_createWeight(t_SpanTermQuery *self, PyObject *args)
          {
            ::org::apache::lucene::search::IndexSearcher a0((jobject) NULL);
            ::org::apache::lucene::search::ScoreMode a1((jobject) NULL);
            PyTypeObject **p1;
            jfloat a2;
            ::org::apache::lucene::search::spans::SpanWeight result((jobject) NULL);

            if (!parseArgs(args, "kKF", ::org::apache::lucene::search::IndexSearcher::initializeClass, ::org::apache::lucene::search::ScoreMode::initializeClass, &a0, &a1, &p1, ::org::apache::lucene::search::t_ScoreMode::parameters_, &a2))
            {
              OBJ_CALL(result = self->object.createWeight(a0, a1, a2));
              return ::org::apache::lucene::search::spans::t_SpanWeight::wrap_Object(result);
            }

            return callSuper(PY_TYPE(SpanTermQuery), (PyObject *) self, "createWeight", args, 2);
          }

          static PyObject *t_SpanTermQuery_equals(t_SpanTermQuery *self, PyObject *args)
          {
            ::java::lang::Object a0((jobject) NULL);
            jboolean result;

            if (!parseArgs(args, "o", &a0))
            {
              OBJ_CALL(result = self->object.equals(a0));
              Py_RETURN_BOOL(result);
            }

            return callSuper(PY_TYPE(SpanTermQuery), (PyObject *) self, "equals", args, 2);
          }

          static PyObject *t_SpanTermQuery_getField(t_SpanTermQuery *self, PyObject *args)
          {
            ::java::lang::String result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.getField());
              return j2p(result);
            }

            return callSuper(PY_TYPE(SpanTermQuery), (PyObject *) self, "getField", args, 2);
          }

          static PyObject *t_SpanTermQuery_getTerm(t_SpanTermQuery *self)
          {
            ::org::apache::lucene::index::Term result((jobject) NULL);
            OBJ_CALL(result = self->object.getTerm());
            return ::org::apache::lucene::index::t_Term::wrap_Object(result);
          }

          static PyObject *t_SpanTermQuery_getTermStates(t_SpanTermQuery *self, PyObject *args)
          {
            ::org::apache::lucene::index::TermStates result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.getTermStates());
              return ::org::apache::lucene::index::t_TermStates::wrap_Object(result);
            }

            return callSuper(PY_TYPE(SpanTermQuery), (PyObject *) self, "getTermStates", args, 2);
          }

          static PyObject *t_SpanTermQuery_hashCode(t_SpanTermQuery *self, PyObject *args)
          {
            jint result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.hashCode());
              return PyLong_FromLong((long) result);
            }

            return callSuper(PY_TYPE(SpanTermQuery), (PyObject *) self, "hashCode", args, 2);
          }

          static PyObject *t_SpanTermQuery_toString(t_SpanTermQuery *self, PyObject *args)
          {
            ::java::lang::String a0((jobject) NULL);
            ::java::lang::String result((jobject) NULL);

            if (!parseArgs(args, "s", &a0))
            {
              OBJ_CALL(result = self->object.toString(a0));
              return j2p(result);
            }

            return callSuper(PY_TYPE(SpanTermQuery), (PyObject *) self, "toString", args, 2);
          }

          static PyObject *t_SpanTermQuery_visit(t_SpanTermQuery *self, PyObject *args)
          {
            ::org::apache::lucene::search::QueryVisitor a0((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::search::QueryVisitor::initializeClass, &a0))
            {
              OBJ_CALL(self->object.visit(a0));
              Py_RETURN_NONE;
            }

            return callSuper(PY_TYPE(SpanTermQuery), (PyObject *) self, "visit", args, 2);
          }

          static PyObject *t_SpanTermQuery_get__field(t_SpanTermQuery *self, void *data)
          {
            ::java::lang::String value((jobject) NULL);
            OBJ_CALL(value = self->object.getField());
            return j2p(value);
          }

          static PyObject *t_SpanTermQuery_get__term(t_SpanTermQuery *self, void *data)
          {
            ::org::apache::lucene::index::Term value((jobject) NULL);
            OBJ_CALL(value = self->object.getTerm());
            return ::org::apache::lucene::index::t_Term::wrap_Object(value);
          }

          static PyObject *t_SpanTermQuery_get__termStates(t_SpanTermQuery *self, void *data)
          {
            ::org::apache::lucene::index::TermStates value((jobject) NULL);
            OBJ_CALL(value = self->object.getTermStates());
            return ::org::apache::lucene::index::t_TermStates::wrap_Object(value);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/core/LowerCaseFilterFactory.h"
#include "java/util/Map.h"
#include "java/lang/String.h"
#include "org/apache/lucene/analysis/TokenStream.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace core {

          ::java::lang::Class *LowerCaseFilterFactory::class$ = NULL;
          jmethodID *LowerCaseFilterFactory::mids$ = NULL;
          bool LowerCaseFilterFactory::live$ = false;
          ::java::lang::String *LowerCaseFilterFactory::NAME = NULL;

          jclass LowerCaseFilterFactory::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/core/LowerCaseFilterFactory");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_408bd889ee3beae5] = env->getMethodID(cls, "<init>", "(Ljava/util/Map;)V");
              mids$[mid_create_6de1e28d9d10cd9e] = env->getMethodID(cls, "create", "(Lorg/apache/lucene/analysis/TokenStream;)Lorg/apache/lucene/analysis/TokenStream;");
              mids$[mid_normalize_6de1e28d9d10cd9e] = env->getMethodID(cls, "normalize", "(Lorg/apache/lucene/analysis/TokenStream;)Lorg/apache/lucene/analysis/TokenStream;");

              class$ = new ::java::lang::Class(cls);
              cls = (jclass) class$->this$;

              NAME = new ::java::lang::String(env->getStaticObjectField(cls, "NAME", "Ljava/lang/String;"));
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          LowerCaseFilterFactory::LowerCaseFilterFactory(const ::java::util::Map & a0) : ::org::apache::lucene::analysis::util::TokenFilterFactory(env->newObject(initializeClass, &mids$, mid_init$_408bd889ee3beae5, a0.this$)) {}

          ::org::apache::lucene::analysis::TokenStream LowerCaseFilterFactory::create(const ::org::apache::lucene::analysis::TokenStream & a0) const
          {
            return ::org::apache::lucene::analysis::TokenStream(env->callObjectMethod(this$, mids$[mid_create_6de1e28d9d10cd9e], a0.this$));
          }

          ::org::apache::lucene::analysis::TokenStream LowerCaseFilterFactory::normalize(const ::org::apache::lucene::analysis::TokenStream & a0) const
          {
            return ::org::apache::lucene::analysis::TokenStream(env->callObjectMethod(this$, mids$[mid_normalize_6de1e28d9d10cd9e], a0.this$));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace core {
          static PyObject *t_LowerCaseFilterFactory_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_LowerCaseFilterFactory_instance_(PyTypeObject *type, PyObject *arg);
          static int t_LowerCaseFilterFactory_init_(t_LowerCaseFilterFactory *self, PyObject *args, PyObject *kwds);
          static PyObject *t_LowerCaseFilterFactory_create(t_LowerCaseFilterFactory *self, PyObject *args);
          static PyObject *t_LowerCaseFilterFactory_normalize(t_LowerCaseFilterFactory *self, PyObject *args);

          static PyMethodDef t_LowerCaseFilterFactory__methods_[] = {
            DECLARE_METHOD(t_LowerCaseFilterFactory, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_LowerCaseFilterFactory, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_LowerCaseFilterFactory, create, METH_VARARGS),
            DECLARE_METHOD(t_LowerCaseFilterFactory, normalize, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          static PyType_Slot PY_TYPE_SLOTS(LowerCaseFilterFactory)[] = {
            { Py_tp_methods, t_LowerCaseFilterFactory__methods_ },
            { Py_tp_init, (void *) t_LowerCaseFilterFactory_init_ },
            { 0, NULL }
          };

          static PyType_Def *PY_TYPE_BASES(LowerCaseFilterFactory)[] = {
            &PY_TYPE_DEF(::org::apache::lucene::analysis::util::TokenFilterFactory),
            NULL
          };

          DEFINE_TYPE(LowerCaseFilterFactory, t_LowerCaseFilterFactory, LowerCaseFilterFactory);

          void t_LowerCaseFilterFactory::install(PyObject *module)
          {
            installType(&PY_TYPE(LowerCaseFilterFactory), &PY_TYPE_DEF(LowerCaseFilterFactory), module, "LowerCaseFilterFactory", 0);
          }

          void t_LowerCaseFilterFactory::initialize(PyObject *module)
          {
            PyObject_SetAttrString((PyObject *) PY_TYPE(LowerCaseFilterFactory), "class_", make_descriptor(LowerCaseFilterFactory::initializeClass, 1));
            PyObject_SetAttrString((PyObject *) PY_TYPE(LowerCaseFilterFactory), "wrapfn_", make_descriptor(t_LowerCaseFilterFactory::wrap_jobject));
            PyObject_SetAttrString((PyObject *) PY_TYPE(LowerCaseFilterFactory), "boxfn_", make_descriptor(boxObject));
            env->getClass(LowerCaseFilterFactory::initializeClass);
            PyObject_SetAttrString((PyObject *) PY_TYPE(LowerCaseFilterFactory), "NAME", make_descriptor(j2p(*LowerCaseFilterFactory::NAME)));
          }

          static PyObject *t_LowerCaseFilterFactory_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, LowerCaseFilterFactory::initializeClass, 1)))
              return NULL;
            return t_LowerCaseFilterFactory::wrap_Object(LowerCaseFilterFactory(((t_LowerCaseFilterFactory *) arg)->object.this$));
          }
          static PyObject *t_LowerCaseFilterFactory_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, LowerCaseFilterFactory::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_LowerCaseFilterFactory_init_(t_LowerCaseFilterFactory *self, PyObject *args, PyObject *kwds)
          {
            ::java::util::Map a0((jobject) NULL);
            PyTypeObject **p0;
            LowerCaseFilterFactory object((jobject) NULL);

            if (!parseArgs(args, "K", ::java::util::Map::initializeClass, &a0, &p0, ::java::util::t_Map::parameters_))
            {
              INT_CALL(object = LowerCaseFilterFactory(a0));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_LowerCaseFilterFactory_create(t_LowerCaseFilterFactory *self, PyObject *args)
          {
            ::org::apache::lucene::analysis::TokenStream a0((jobject) NULL);
            ::org::apache::lucene::analysis::TokenStream result((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::analysis::TokenStream::initializeClass, &a0))
            {
              OBJ_CALL(result = self->object.create(a0));
              return ::org::apache::lucene::analysis::t_TokenStream::wrap_Object(result);
            }

            return callSuper(PY_TYPE(LowerCaseFilterFactory), (PyObject *) self, "create", args, 2);
          }

          static PyObject *t_LowerCaseFilterFactory_normalize(t_LowerCaseFilterFactory *self, PyObject *args)
          {
            ::org::apache::lucene::analysis::TokenStream a0((jobject) NULL);
            ::org::apache::lucene::analysis::TokenStream result((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::analysis::TokenStream::initializeClass, &a0))
            {
              OBJ_CALL(result = self->object.normalize(a0));
              return ::org::apache::lucene::analysis::t_TokenStream::wrap_Object(result);
            }

            return callSuper(PY_TYPE(LowerCaseFilterFactory), (PyObject *) self, "normalize", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/index/EmptyDocValuesProducer.h"
#include "org/apache/lucene/index/SortedNumericDocValues.h"
#include "org/apache/lucene/index/BinaryDocValues.h"
#include "org/apache/lucene/index/SortedSetDocValues.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/index/NumericDocValues.h"
#include "org/apache/lucene/index/FieldInfo.h"
#include "org/apache/lucene/index/SortedDocValues.h"
#include "java/io/IOException.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {

        ::java::lang::Class *EmptyDocValuesProducer::class$ = NULL;
        jmethodID *EmptyDocValuesProducer::mids$ = NULL;
        bool EmptyDocValuesProducer::live$ = false;

        jclass EmptyDocValuesProducer::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/index/EmptyDocValuesProducer");

            mids$ = new jmethodID[max_mid];
            mids$[mid_checkIntegrity_f2cc1bce94666404] = env->getMethodID(cls, "checkIntegrity", "()V");
            mids$[mid_close_f2cc1bce94666404] = env->getMethodID(cls, "close", "()V");
            mids$[mid_getBinary_cc93390a800a98c7] = env->getMethodID(cls, "getBinary", "(Lorg/apache/lucene/index/FieldInfo;)Lorg/apache/lucene/index/BinaryDocValues;");
            mids$[mid_getNumeric_d63b818fc8746ddc] = env->getMethodID(cls, "getNumeric", "(Lorg/apache/lucene/index/FieldInfo;)Lorg/apache/lucene/index/NumericDocValues;");
            mids$[mid_getSorted_c19eb99297e55136] = env->getMethodID(cls, "getSorted", "(Lorg/apache/lucene/index/FieldInfo;)Lorg/apache/lucene/index/SortedDocValues;");
            mids$[mid_getSortedNumeric_0c331c793dd9b6b8] = env->getMethodID(cls, "getSortedNumeric", "(Lorg/apache/lucene/index/FieldInfo;)Lorg/apache/lucene/index/SortedNumericDocValues;");
            mids$[mid_getSortedSet_5c6b5be0c46973db] = env->getMethodID(cls, "getSortedSet", "(Lorg/apache/lucene/index/FieldInfo;)Lorg/apache/lucene/index/SortedSetDocValues;");
            mids$[mid_ramBytesUsed_2e5ae9edcb9b072f] = env->getMethodID(cls, "ramBytesUsed", "()J");

            class$ = new ::java::lang::Class(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        void EmptyDocValuesProducer::checkIntegrity() const
        {
          env->callVoidMethod(this$, mids$[mid_checkIntegrity_f2cc1bce94666404]);
        }

        void EmptyDocValuesProducer::close() const
        {
          env->callVoidMethod(this$, mids$[mid_close_f2cc1bce94666404]);
        }

        ::org::apache::lucene::index::BinaryDocValues EmptyDocValuesProducer::getBinary(const ::org::apache::lucene::index::FieldInfo & a0) const
        {
          return ::org::apache::lucene::index::BinaryDocValues(env->callObjectMethod(this$, mids$[mid_getBinary_cc93390a800a98c7], a0.this$));
        }

        ::org::apache::lucene::index::NumericDocValues EmptyDocValuesProducer::getNumeric(const ::org::apache::lucene::index::FieldInfo & a0) const
        {
          return ::org::apache::lucene::index::NumericDocValues(env->callObjectMethod(this$, mids$[mid_getNumeric_d63b818fc8746ddc], a0.this$));
        }

        ::org::apache::lucene::index::SortedDocValues EmptyDocValuesProducer::getSorted(const ::org::apache::lucene::index::FieldInfo & a0) const
        {
          return ::org::apache::lucene::index::SortedDocValues(env->callObjectMethod(this$, mids$[mid_getSorted_c19eb99297e55136], a0.this$));
        }

        ::org::apache::lucene::index::SortedNumericDocValues EmptyDocValuesProducer::getSortedNumeric(const ::org::apache::lucene::index::FieldInfo & a0) const
        {
          return ::org::apache::lucene::index::SortedNumericDocValues(env->callObjectMethod(this$, mids$[mid_getSortedNumeric_0c331c793dd9b6b8], a0.this$));
        }

        ::org::apache::lucene::index::SortedSetDocValues EmptyDocValuesProducer::getSortedSet(const ::org::apache::lucene::index::FieldInfo & a0) const
        {
          return ::org::apache::lucene::index::SortedSetDocValues(env->callObjectMethod(this$, mids$[mid_getSortedSet_5c6b5be0c46973db], a0.this$));
        }

        jlong EmptyDocValuesProducer::ramBytesUsed() const
        {
          return env->callLongMethod(this$, mids$[mid_ramBytesUsed_2e5ae9edcb9b072f]);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {
        static PyObject *t_EmptyDocValuesProducer_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_EmptyDocValuesProducer_instance_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_EmptyDocValuesProducer_checkIntegrity(t_EmptyDocValuesProducer *self, PyObject *args);
        static PyObject *t_EmptyDocValuesProducer_close(t_EmptyDocValuesProducer *self, PyObject *args);
        static PyObject *t_EmptyDocValuesProducer_getBinary(t_EmptyDocValuesProducer *self, PyObject *args);
        static PyObject *t_EmptyDocValuesProducer_getNumeric(t_EmptyDocValuesProducer *self, PyObject *args);
        static PyObject *t_EmptyDocValuesProducer_getSorted(t_EmptyDocValuesProducer *self, PyObject *args);
        static PyObject *t_EmptyDocValuesProducer_getSortedNumeric(t_EmptyDocValuesProducer *self, PyObject *args);
        static PyObject *t_EmptyDocValuesProducer_getSortedSet(t_EmptyDocValuesProducer *self, PyObject *args);
        static PyObject *t_EmptyDocValuesProducer_ramBytesUsed(t_EmptyDocValuesProducer *self, PyObject *args);

        static PyMethodDef t_EmptyDocValuesProducer__methods_[] = {
          DECLARE_METHOD(t_EmptyDocValuesProducer, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_EmptyDocValuesProducer, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_EmptyDocValuesProducer, checkIntegrity, METH_VARARGS),
          DECLARE_METHOD(t_EmptyDocValuesProducer, close, METH_VARARGS),
          DECLARE_METHOD(t_EmptyDocValuesProducer, getBinary, METH_VARARGS),
          DECLARE_METHOD(t_EmptyDocValuesProducer, getNumeric, METH_VARARGS),
          DECLARE_METHOD(t_EmptyDocValuesProducer, getSorted, METH_VARARGS),
          DECLARE_METHOD(t_EmptyDocValuesProducer, getSortedNumeric, METH_VARARGS),
          DECLARE_METHOD(t_EmptyDocValuesProducer, getSortedSet, METH_VARARGS),
          DECLARE_METHOD(t_EmptyDocValuesProducer, ramBytesUsed, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        static PyType_Slot PY_TYPE_SLOTS(EmptyDocValuesProducer)[] = {
          { Py_tp_methods, t_EmptyDocValuesProducer__methods_ },
          { Py_tp_init, (void *) abstract_init },
          { 0, NULL }
        };

        static PyType_Def *PY_TYPE_BASES(EmptyDocValuesProducer)[] = {
          &PY_TYPE_DEF(::org::apache::lucene::codecs::DocValuesProducer),
          NULL
        };

        DEFINE_TYPE(EmptyDocValuesProducer, t_EmptyDocValuesProducer, EmptyDocValuesProducer);

        void t_EmptyDocValuesProducer::install(PyObject *module)
        {
          installType(&PY_TYPE(EmptyDocValuesProducer), &PY_TYPE_DEF(EmptyDocValuesProducer), module, "EmptyDocValuesProducer", 0);
        }

        void t_EmptyDocValuesProducer::initialize(PyObject *module)
        {
          PyObject_SetAttrString((PyObject *) PY_TYPE(EmptyDocValuesProducer), "class_", make_descriptor(EmptyDocValuesProducer::initializeClass, 1));
          PyObject_SetAttrString((PyObject *) PY_TYPE(EmptyDocValuesProducer), "wrapfn_", make_descriptor(t_EmptyDocValuesProducer::wrap_jobject));
          PyObject_SetAttrString((PyObject *) PY_TYPE(EmptyDocValuesProducer), "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_EmptyDocValuesProducer_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, EmptyDocValuesProducer::initializeClass, 1)))
            return NULL;
          return t_EmptyDocValuesProducer::wrap_Object(EmptyDocValuesProducer(((t_EmptyDocValuesProducer *) arg)->object.this$));
        }
        static PyObject *t_EmptyDocValuesProducer_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, EmptyDocValuesProducer::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static PyObject *t_EmptyDocValuesProducer_checkIntegrity(t_EmptyDocValuesProducer *self, PyObject *args)
        {

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(self->object.checkIntegrity());
            Py_RETURN_NONE;
          }

          return callSuper(PY_TYPE(EmptyDocValuesProducer), (PyObject *) self, "checkIntegrity", args, 2);
        }

        static PyObject *t_EmptyDocValuesProducer_close(t_EmptyDocValuesProducer *self, PyObject *args)
        {

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(self->object.close());
            Py_RETURN_NONE;
          }

          return callSuper(PY_TYPE(EmptyDocValuesProducer), (PyObject *) self, "close", args, 2);
        }

        static PyObject *t_EmptyDocValuesProducer_getBinary(t_EmptyDocValuesProducer *self, PyObject *args)
        {
          ::org::apache::lucene::index::FieldInfo a0((jobject) NULL);
          ::org::apache::lucene::index::BinaryDocValues result((jobject) NULL);

          if (!parseArgs(args, "k", ::org::apache::lucene::index::FieldInfo::initializeClass, &a0))
          {
            OBJ_CALL(result = self->object.getBinary(a0));
            return ::org::apache::lucene::index::t_BinaryDocValues::wrap_Object(result);
          }

          return callSuper(PY_TYPE(EmptyDocValuesProducer), (PyObject *) self, "getBinary", args, 2);
        }

        static PyObject *t_EmptyDocValuesProducer_getNumeric(t_EmptyDocValuesProducer *self, PyObject *args)
        {
          ::org::apache::lucene::index::FieldInfo a0((jobject) NULL);
          ::org::apache::lucene::index::NumericDocValues result((jobject) NULL);

          if (!parseArgs(args, "k", ::org::apache::lucene::index::FieldInfo::initializeClass, &a0))
          {
            OBJ_CALL(result = self->object.getNumeric(a0));
            return ::org::apache::lucene::index::t_NumericDocValues::wrap_Object(result);
          }

          return callSuper(PY_TYPE(EmptyDocValuesProducer), (PyObject *) self, "getNumeric", args, 2);
        }

        static PyObject *t_EmptyDocValuesProducer_getSorted(t_EmptyDocValuesProducer *self, PyObject *args)
        {
          ::org::apache::lucene::index::FieldInfo a0((jobject) NULL);
          ::org::apache::lucene::index::SortedDocValues result((jobject) NULL);

          if (!parseArgs(args, "k", ::org::apache::lucene::index::FieldInfo::initializeClass, &a0))
          {
            OBJ_CALL(result = self->object.getSorted(a0));
            return ::org::apache::lucene::index::t_SortedDocValues::wrap_Object(result);
          }

          return callSuper(PY_TYPE(EmptyDocValuesProducer), (PyObject *) self, "getSorted", args, 2);
        }

        static PyObject *t_EmptyDocValuesProducer_getSortedNumeric(t_EmptyDocValuesProducer *self, PyObject *args)
        {
          ::org::apache::lucene::index::FieldInfo a0((jobject) NULL);
          ::org::apache::lucene::index::SortedNumericDocValues result((jobject) NULL);

          if (!parseArgs(args, "k", ::org::apache::lucene::index::FieldInfo::initializeClass, &a0))
          {
            OBJ_CALL(result = self->object.getSortedNumeric(a0));
            return ::org::apache::lucene::index::t_SortedNumericDocValues::wrap_Object(result);
          }

          return callSuper(PY_TYPE(EmptyDocValuesProducer), (PyObject *) self, "getSortedNumeric", args, 2);
        }

        static PyObject *t_EmptyDocValuesProducer_getSortedSet(t_EmptyDocValuesProducer *self, PyObject *args)
        {
          ::org::apache::lucene::index::FieldInfo a0((jobject) NULL);
          ::org::apache::lucene::index::SortedSetDocValues result((jobject) NULL);

          if (!parseArgs(args, "k", ::org::apache::lucene::index::FieldInfo::initializeClass, &a0))
          {
            OBJ_CALL(result = self->object.getSortedSet(a0));
            return ::org::apache::lucene::index::t_SortedSetDocValues::wrap_Object(result);
          }

          return callSuper(PY_TYPE(EmptyDocValuesProducer), (PyObject *) self, "getSortedSet", args, 2);
        }

        static PyObject *t_EmptyDocValuesProducer_ramBytesUsed(t_EmptyDocValuesProducer *self, PyObject *args)
        {
          jlong result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.ramBytesUsed());
            return PyLong_FromLongLong((PY_LONG_LONG) result);
          }

          return callSuper(PY_TYPE(EmptyDocValuesProducer), (PyObject *) self, "ramBytesUsed", args, 2);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/standard/ClassicAnalyzer.h"
#include "java/io/IOException.h"
#include "java/io/Reader.h"
#include "org/apache/lucene/analysis/CharArraySet.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace standard {

          ::java::lang::Class *ClassicAnalyzer::class$ = NULL;
          jmethodID *ClassicAnalyzer::mids$ = NULL;
          bool ClassicAnalyzer::live$ = false;
          jint ClassicAnalyzer::DEFAULT_MAX_TOKEN_LENGTH = (jint) 0;
          ::org::apache::lucene::analysis::CharArraySet *ClassicAnalyzer::STOP_WORDS_SET = NULL;

          jclass ClassicAnalyzer::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/standard/ClassicAnalyzer");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_f2cc1bce94666404] = env->getMethodID(cls, "<init>", "()V");
              mids$[mid_init$_09c0eb6a436581d3] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/analysis/CharArraySet;)V");
              mids$[mid_init$_b2f3c57f5e6eb3f2] = env->getMethodID(cls, "<init>", "(Ljava/io/Reader;)V");
              mids$[mid_getMaxTokenLength_9972fcc56b44e79d] = env->getMethodID(cls, "getMaxTokenLength", "()I");
              mids$[mid_setMaxTokenLength_040c4cd0390c5aff] = env->getMethodID(cls, "setMaxTokenLength", "(I)V");
              mids$[mid_createComponents_c22fd244b0553c1e] = env->getMethodID(cls, "createComponents", "(Ljava/lang/String;)Lorg/apache/lucene/analysis/Analyzer$TokenStreamComponents;");
              mids$[mid_normalize_e597989422f66fcd] = env->getMethodID(cls, "normalize", "(Ljava/lang/String;Lorg/apache/lucene/analysis/TokenStream;)Lorg/apache/lucene/analysis/TokenStream;");

              class$ = new ::java::lang::Class(cls);
              cls = (jclass) class$->this$;

              DEFAULT_MAX_TOKEN_LENGTH = env->getStaticIntField(cls, "DEFAULT_MAX_TOKEN_LENGTH");
              STOP_WORDS_SET = new ::org::apache::lucene::analysis::CharArraySet(env->getStaticObjectField(cls, "STOP_WORDS_SET", "Lorg/apache/lucene/analysis/CharArraySet;"));
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          ClassicAnalyzer::ClassicAnalyzer() : ::org::apache::lucene::analysis::StopwordAnalyzerBase(env->newObject(initializeClass, &mids$, mid_init$_f2cc1bce94666404)) {}

          ClassicAnalyzer::ClassicAnalyzer(const ::org::apache::lucene::analysis::CharArraySet & a0) : ::org::apache::lucene::analysis::StopwordAnalyzerBase(env->newObject(initializeClass, &mids$, mid_init$_09c0eb6a436581d3, a0.this$)) {}

          ClassicAnalyzer::ClassicAnalyzer(const ::java::io::Reader & a0) : ::org::apache::lucene::analysis::StopwordAnalyzerBase(env->newObject(initializeClass, &mids$, mid_init$_b2f3c57f5e6eb3f2, a0.this$)) {}

          jint ClassicAnalyzer::getMaxTokenLength() const
          {
            return env->callIntMethod(this$, mids$[mid_getMaxTokenLength_9972fcc56b44e79d]);
          }

          void ClassicAnalyzer::setMaxTokenLength(jint a0) const
          {
            env->callVoidMethod(this$, mids$[mid_setMaxTokenLength_040c4cd0390c5aff], a0);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace standard {
          static PyObject *t_ClassicAnalyzer_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_ClassicAnalyzer_instance_(PyTypeObject *type, PyObject *arg);
          static int t_ClassicAnalyzer_init_(t_ClassicAnalyzer *self, PyObject *args, PyObject *kwds);
          static PyObject *t_ClassicAnalyzer_getMaxTokenLength(t_ClassicAnalyzer *self);
          static PyObject *t_ClassicAnalyzer_setMaxTokenLength(t_ClassicAnalyzer *self, PyObject *arg);
          static PyObject *t_ClassicAnalyzer_get__maxTokenLength(t_ClassicAnalyzer *self, void *data);
          static int t_ClassicAnalyzer_set__maxTokenLength(t_ClassicAnalyzer *self, PyObject *arg, void *data);
          static PyGetSetDef t_ClassicAnalyzer__fields_[] = {
            DECLARE_GETSET_FIELD(t_ClassicAnalyzer, maxTokenLength),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_ClassicAnalyzer__methods_[] = {
            DECLARE_METHOD(t_ClassicAnalyzer, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_ClassicAnalyzer, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_ClassicAnalyzer, getMaxTokenLength, METH_NOARGS),
            DECLARE_METHOD(t_ClassicAnalyzer, setMaxTokenLength, METH_O),
            { NULL, NULL, 0, NULL }
          };

          static PyType_Slot PY_TYPE_SLOTS(ClassicAnalyzer)[] = {
            { Py_tp_methods, t_ClassicAnalyzer__methods_ },
            { Py_tp_init, (void *) t_ClassicAnalyzer_init_ },
            { Py_tp_getset, t_ClassicAnalyzer__fields_ },
            { 0, NULL }
          };

          static PyType_Def *PY_TYPE_BASES(ClassicAnalyzer)[] = {
            &PY_TYPE_DEF(::org::apache::lucene::analysis::StopwordAnalyzerBase),
            NULL
          };

          DEFINE_TYPE(ClassicAnalyzer, t_ClassicAnalyzer, ClassicAnalyzer);

          void t_ClassicAnalyzer::install(PyObject *module)
          {
            installType(&PY_TYPE(ClassicAnalyzer), &PY_TYPE_DEF(ClassicAnalyzer), module, "ClassicAnalyzer", 0);
          }

          void t_ClassicAnalyzer::initialize(PyObject *module)
          {
            PyObject_SetAttrString((PyObject *) PY_TYPE(ClassicAnalyzer), "class_", make_descriptor(ClassicAnalyzer::initializeClass, 1));
            PyObject_SetAttrString((PyObject *) PY_TYPE(ClassicAnalyzer), "wrapfn_", make_descriptor(t_ClassicAnalyzer::wrap_jobject));
            PyObject_SetAttrString((PyObject *) PY_TYPE(ClassicAnalyzer), "boxfn_", make_descriptor(boxObject));
            env->getClass(ClassicAnalyzer::initializeClass);
            PyObject_SetAttrString((PyObject *) PY_TYPE(ClassicAnalyzer), "DEFAULT_MAX_TOKEN_LENGTH", make_descriptor(ClassicAnalyzer::DEFAULT_MAX_TOKEN_LENGTH));
            PyObject_SetAttrString((PyObject *) PY_TYPE(ClassicAnalyzer), "STOP_WORDS_SET", make_descriptor(::org::apache::lucene::analysis::t_CharArraySet::wrap_Object(*ClassicAnalyzer::STOP_WORDS_SET)));
          }

          static PyObject *t_ClassicAnalyzer_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, ClassicAnalyzer::initializeClass, 1)))
              return NULL;
            return t_ClassicAnalyzer::wrap_Object(ClassicAnalyzer(((t_ClassicAnalyzer *) arg)->object.this$));
          }
          static PyObject *t_ClassicAnalyzer_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, ClassicAnalyzer::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_ClassicAnalyzer_init_(t_ClassicAnalyzer *self, PyObject *args, PyObject *kwds)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 0:
              {
                ClassicAnalyzer object((jobject) NULL);

                INT_CALL(object = ClassicAnalyzer());
                self->object = object;
                break;
              }
             case 1:
              {
                ::org::apache::lucene::analysis::CharArraySet a0((jobject) NULL);
                PyTypeObject **p0;
                ClassicAnalyzer object((jobject) NULL);

                if (!parseArgs(args, "K", ::org::apache::lucene::analysis::CharArraySet::initializeClass, &a0, &p0, ::org::apache::lucene::analysis::t_CharArraySet::parameters_))
                {
                  INT_CALL(object = ClassicAnalyzer(a0));
                  self->object = object;
                  break;
                }
              }
              {
                ::java::io::Reader a0((jobject) NULL);
                ClassicAnalyzer object((jobject) NULL);

                if (!parseArgs(args, "k", ::java::io::Reader::initializeClass, &a0))
                {
                  INT_CALL(object = ClassicAnalyzer(a0));
                  self->object = object;
                  break;
                }
              }
             default:
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_ClassicAnalyzer_getMaxTokenLength(t_ClassicAnalyzer *self)
          {
            jint result;
            OBJ_CALL(result = self->object.getMaxTokenLength());
            return PyLong_FromLong((long) result);
          }

          static PyObject *t_ClassicAnalyzer_setMaxTokenLength(t_ClassicAnalyzer *self, PyObject *arg)
          {
            jint a0;

            if (!parseArg(arg, "I", &a0))
            {
              OBJ_CALL(self->object.setMaxTokenLength(a0));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError((PyObject *) self, "setMaxTokenLength", arg);
            return NULL;
          }

          static PyObject *t_ClassicAnalyzer_get__maxTokenLength(t_ClassicAnalyzer *self, void *data)
          {
            jint value;
            OBJ_CALL(value = self->object.getMaxTokenLength());
            return PyLong_FromLong((long) value);
          }
          static int t_ClassicAnalyzer_set__maxTokenLength(t_ClassicAnalyzer *self, PyObject *arg, void *data)
          {
            {
              jint value;
              if (!parseArg(arg, "I", &value))
              {
                INT_CALL(self->object.setMaxTokenLength(value));
                return 0;
              }
            }
            PyErr_SetArgsError((PyObject *) self, "maxTokenLength", arg);
            return -1;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queryparser/flexible/core/nodes/BooleanQueryNode.h"
#include "org/apache/lucene/queryparser/flexible/core/parser/EscapeQuerySyntax.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/queryparser/flexible/core/nodes/QueryNode.h"
#include "java/lang/String.h"
#include "java/lang/CharSequence.h"
#include "java/util/List.h"
#include "java/lang/CloneNotSupportedException.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace core {
            namespace nodes {

              ::java::lang::Class *BooleanQueryNode::class$ = NULL;
              jmethodID *BooleanQueryNode::mids$ = NULL;
              bool BooleanQueryNode::live$ = false;

              jclass BooleanQueryNode::initializeClass(bool getOnly)
              {
                if (getOnly)
                  return (jclass) (live$ ? class$->this$ : NULL);
                if (class$ == NULL)
                {
                  jclass cls = (jclass) env->findClass("org/apache/lucene/queryparser/flexible/core/nodes/BooleanQueryNode");

                  mids$ = new jmethodID[max_mid];
                  mids$[mid_init$_d03990be0130160d] = env->getMethodID(cls, "<init>", "(Ljava/util/List;)V");
                  mids$[mid_cloneTree_7f4134ae4682ace0] = env->getMethodID(cls, "cloneTree", "()Lorg/apache/lucene/queryparser/flexible/core/nodes/QueryNode;");
                  mids$[mid_toQueryString_6bb2daa53c506f10] = env->getMethodID(cls, "toQueryString", "(Lorg/apache/lucene/queryparser/flexible/core/parser/EscapeQuerySyntax;)Ljava/lang/CharSequence;");
                  mids$[mid_toString_db9b55ba01e03e4b] = env->getMethodID(cls, "toString", "()Ljava/lang/String;");

                  class$ = new ::java::lang::Class(cls);
                  live$ = true;
                }
                return (jclass) class$->this$;
              }

              BooleanQueryNode::BooleanQueryNode(const ::java::util::List & a0) : ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNodeImpl(env->newObject(initializeClass, &mids$, mid_init$_d03990be0130160d, a0.this$)) {}

              ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode BooleanQueryNode::cloneTree() const
              {
                return ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode(env->callObjectMethod(this$, mids$[mid_cloneTree_7f4134ae4682ace0]));
              }

              ::java::lang::CharSequence BooleanQueryNode::toQueryString(const ::org::apache::lucene::queryparser::flexible::core::parser::EscapeQuerySyntax & a0) const
              {
                return ::java::lang::CharSequence(env->callObjectMethod(this$, mids$[mid_toQueryString_6bb2daa53c506f10], a0.this$));
              }

              ::java::lang::String BooleanQueryNode::toString() const
              {
                return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_db9b55ba01e03e4b]));
              }
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace core {
            namespace nodes {
              static PyObject *t_BooleanQueryNode_cast_(PyTypeObject *type, PyObject *arg);
              static PyObject *t_BooleanQueryNode_instance_(PyTypeObject *type, PyObject *arg);
              static int t_BooleanQueryNode_init_(t_BooleanQueryNode *self, PyObject *args, PyObject *kwds);
              static PyObject *t_BooleanQueryNode_cloneTree(t_BooleanQueryNode *self, PyObject *args);
              static PyObject *t_BooleanQueryNode_toQueryString(t_BooleanQueryNode *self, PyObject *args);
              static PyObject *t_BooleanQueryNode_toString(t_BooleanQueryNode *self, PyObject *args);

              static PyMethodDef t_BooleanQueryNode__methods_[] = {
                DECLARE_METHOD(t_BooleanQueryNode, cast_, METH_O | METH_CLASS),
                DECLARE_METHOD(t_BooleanQueryNode, instance_, METH_O | METH_CLASS),
                DECLARE_METHOD(t_BooleanQueryNode, cloneTree, METH_VARARGS),
                DECLARE_METHOD(t_BooleanQueryNode, toQueryString, METH_VARARGS),
                DECLARE_METHOD(t_BooleanQueryNode, toString, METH_VARARGS),
                { NULL, NULL, 0, NULL }
              };

              static PyType_Slot PY_TYPE_SLOTS(BooleanQueryNode)[] = {
                { Py_tp_methods, t_BooleanQueryNode__methods_ },
                { Py_tp_init, (void *) t_BooleanQueryNode_init_ },
                { 0, NULL }
              };

              static PyType_Def *PY_TYPE_BASES(BooleanQueryNode)[] = {
                &PY_TYPE_DEF(::org::apache::lucene::queryparser::flexible::core::nodes::QueryNodeImpl),
                NULL
              };

              DEFINE_TYPE(BooleanQueryNode, t_BooleanQueryNode, BooleanQueryNode);

              void t_BooleanQueryNode::install(PyObject *module)
              {
                installType(&PY_TYPE(BooleanQueryNode), &PY_TYPE_DEF(BooleanQueryNode), module, "BooleanQueryNode", 0);
              }

              void t_BooleanQueryNode::initialize(PyObject *module)
              {
                PyObject_SetAttrString((PyObject *) PY_TYPE(BooleanQueryNode), "class_", make_descriptor(BooleanQueryNode::initializeClass, 1));
                PyObject_SetAttrString((PyObject *) PY_TYPE(BooleanQueryNode), "wrapfn_", make_descriptor(t_BooleanQueryNode::wrap_jobject));
                PyObject_SetAttrString((PyObject *) PY_TYPE(BooleanQueryNode), "boxfn_", make_descriptor(boxObject));
              }

              static PyObject *t_BooleanQueryNode_cast_(PyTypeObject *type, PyObject *arg)
              {
                if (!(arg = castCheck(arg, BooleanQueryNode::initializeClass, 1)))
                  return NULL;
                return t_BooleanQueryNode::wrap_Object(BooleanQueryNode(((t_BooleanQueryNode *) arg)->object.this$));
              }
              static PyObject *t_BooleanQueryNode_instance_(PyTypeObject *type, PyObject *arg)
              {
                if (!castCheck(arg, BooleanQueryNode::initializeClass, 0))
                  Py_RETURN_FALSE;
                Py_RETURN_TRUE;
              }

              static int t_BooleanQueryNode_init_(t_BooleanQueryNode *self, PyObject *args, PyObject *kwds)
              {
                ::java::util::List a0((jobject) NULL);
                PyTypeObject **p0;
                BooleanQueryNode object((jobject) NULL);

                if (!parseArgs(args, "K", ::java::util::List::initializeClass, &a0, &p0, ::java::util::t_List::parameters_))
                {
                  INT_CALL(object = BooleanQueryNode(a0));
                  self->object = object;
                }
                else
                {
                  PyErr_SetArgsError((PyObject *) self, "__init__", args);
                  return -1;
                }

                return 0;
              }

              static PyObject *t_BooleanQueryNode_cloneTree(t_BooleanQueryNode *self, PyObject *args)
              {
                ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode result((jobject) NULL);

                if (!parseArgs(args, ""))
                {
                  OBJ_CALL(result = self->object.cloneTree());
                  return ::org::apache::lucene::queryparser::flexible::core::nodes::t_QueryNode::wrap_Object(result);
                }

                return callSuper(PY_TYPE(BooleanQueryNode), (PyObject *) self, "cloneTree", args, 2);
              }

              static PyObject *t_BooleanQueryNode_toQueryString(t_BooleanQueryNode *self, PyObject *args)
              {
                ::org::apache::lucene::queryparser::flexible::core::parser::EscapeQuerySyntax a0((jobject) NULL);
                ::java::lang::CharSequence result((jobject) NULL);

                if (!parseArgs(args, "k", ::org::apache::lucene::queryparser::flexible::core::parser::EscapeQuerySyntax::initializeClass, &a0))
                {
                  OBJ_CALL(result = self->object.toQueryString(a0));
                  return ::java::lang::t_CharSequence::wrap_Object(result);
                }

                return callSuper(PY_TYPE(BooleanQueryNode), (PyObject *) self, "toQueryString", args, 2);
              }

              static PyObject *t_BooleanQueryNode_toString(t_BooleanQueryNode *self, PyObject *args)
              {
                ::java::lang::String result((jobject) NULL);

                if (!parseArgs(args, ""))
                {
                  OBJ_CALL(result = self->object.toString());
                  return j2p(result);
                }

                return callSuper(PY_TYPE(BooleanQueryNode), (PyObject *) self, "toString", args, 2);
              }
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queries/function/FunctionRangeQuery.h"
#include "java/lang/Number.h"
#include "org/apache/lucene/search/IndexSearcher.h"
#include "java/lang/Class.h"
#include "java/lang/Object.h"
#include "java/lang/String.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/queries/function/ValueSource.h"
#include "org/apache/lucene/search/QueryVisitor.h"
#include "org/apache/lucene/search/ScoreMode.h"
#include "org/apache/lucene/search/Weight.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queries {
        namespace function {

          ::java::lang::Class *FunctionRangeQuery::class$ = NULL;
          jmethodID *FunctionRangeQuery::mids$ = NULL;
          bool FunctionRangeQuery::live$ = false;

          jclass FunctionRangeQuery::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/queries/function/FunctionRangeQuery");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_9ee9bbba5945833a] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/queries/function/ValueSource;Ljava/lang/Number;Ljava/lang/Number;ZZ)V");
              mids$[mid_init$_cafaf093ab3a1441] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/queries/function/ValueSource;Ljava/lang/String;Ljava/lang/String;ZZ)V");
              mids$[mid_createWeight_f0ef0b5ea369ac06] = env->getMethodID(cls, "createWeight", "(Lorg/apache/lucene/search/IndexSearcher;Lorg/apache/lucene/search/ScoreMode;F)Lorg/apache/lucene/search/Weight;");
              mids$[mid_equals_8b72f2dcdde6fd1d] = env->getMethodID(cls, "equals", "(Ljava/lang/Object;)Z");
              mids$[mid_getLowerVal_db9b55ba01e03e4b] = env->getMethodID(cls, "getLowerVal", "()Ljava/lang/String;");
              mids$[mid_getUpperVal_db9b55ba01e03e4b] = env->getMethodID(cls, "getUpperVal", "()Ljava/lang/String;");
              mids$[mid_getValueSource_4e635fdab1789701] = env->getMethodID(cls, "getValueSource", "()Lorg/apache/lucene/queries/function/ValueSource;");
              mids$[mid_hashCode_9972fcc56b44e79d] = env->getMethodID(cls, "hashCode", "()I");
              mids$[mid_isIncludeLower_8454bd5aa23fd11e] = env->getMethodID(cls, "isIncludeLower", "()Z");
              mids$[mid_isIncludeUpper_8454bd5aa23fd11e] = env->getMethodID(cls, "isIncludeUpper", "()Z");
              mids$[mid_toString_9bfa75c9f141b67f] = env->getMethodID(cls, "toString", "(Ljava/lang/String;)Ljava/lang/String;");
              mids$[mid_visit_f9e6207006c5b6c1] = env->getMethodID(cls, "visit", "(Lorg/apache/lucene/search/QueryVisitor;)V");

              class$ = new ::java::lang::Class(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          FunctionRangeQuery::FunctionRangeQuery(const ::org::apache::lucene::queries::function::ValueSource & a0, const ::java::lang::Number & a1, const ::java::lang::Number & a2, jboolean a3, jboolean a4) : ::org::apache::lucene::search::Query(env->newObject(initializeClass, &mids$, mid_init$_9ee9bbba5945833a, a0.this$, a1.this$, a2.this$, a3, a4)) {}

          FunctionRangeQuery::FunctionRangeQuery(const ::org::apache::lucene::queries::function::ValueSource & a0, const ::java::lang::String & a1, const ::java::lang::String & a2, jboolean a3, jboolean a4) : ::org::apache::lucene::search::Query(env->newObject(initializeClass, &mids$, mid_init$_cafaf093ab3a1441, a0.this$, a1.this$, a2.this$, a3, a4)) {}

          ::org::apache::lucene::search::Weight FunctionRangeQuery::createWeight(const ::org::apache::lucene::search::IndexSearcher & a0, const ::org::apache::lucene::search::ScoreMode & a1, jfloat a2) const
          {
            return ::org::apache::lucene::search::Weight(env->callObjectMethod(this$, mids$[mid_createWeight_f0ef0b5ea369ac06], a0.this$, a1.this$, a2));
          }

          jboolean FunctionRangeQuery::equals(const ::java::lang::Object & a0) const
          {
            return env->callBooleanMethod(this$, mids$[mid_equals_8b72f2dcdde6fd1d], a0.this$);
          }

          ::java::lang::String FunctionRangeQuery::getLowerVal() const
          {
            return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_getLowerVal_db9b55ba01e03e4b]));
          }

          ::java::lang::String FunctionRangeQuery::getUpperVal() const
          {
            return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_getUpperVal_db9b55ba01e03e4b]));
          }

          ::org::apache::lucene::queries::function::ValueSource FunctionRangeQuery::getValueSource() const
          {
            return ::org::apache::lucene::queries::function::ValueSource(env->callObjectMethod(this$, mids$[mid_getValueSource_4e635fdab1789701]));
          }

          jint FunctionRangeQuery::hashCode() const
          {
            return env->callIntMethod(this$, mids$[mid_hashCode_9972fcc56b44e79d]);
          }

          jboolean FunctionRangeQuery::isIncludeLower() const
          {
            return env->callBooleanMethod(this$, mids$[mid_isIncludeLower_8454bd5aa23fd11e]);
          }

          jboolean FunctionRangeQuery::isIncludeUpper() const
          {
            return env->callBooleanMethod(this$, mids$[mid_isIncludeUpper_8454bd5aa23fd11e]);
          }

          ::java::lang::String FunctionRangeQuery::toString(const ::java::lang::String & a0) const
          {
            return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_9bfa75c9f141b67f], a0.this$));
          }

          void FunctionRangeQuery::visit(const ::org::apache::lucene::search::QueryVisitor & a0) const
          {
            env->callVoidMethod(this$, mids$[mid_visit_f9e6207006c5b6c1], a0.this$);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queries {
        namespace function {
          static PyObject *t_FunctionRangeQuery_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_FunctionRangeQuery_instance_(PyTypeObject *type, PyObject *arg);
          static int t_FunctionRangeQuery_init_(t_FunctionRangeQuery *self, PyObject *args, PyObject *kwds);
          static PyObject *t_FunctionRangeQuery_createWeight(t_FunctionRangeQuery *self, PyObject *args);
          static PyObject *t_FunctionRangeQuery_equals(t_FunctionRangeQuery *self, PyObject *args);
          static PyObject *t_FunctionRangeQuery_getLowerVal(t_FunctionRangeQuery *self);
          static PyObject *t_FunctionRangeQuery_getUpperVal(t_FunctionRangeQuery *self);
          static PyObject *t_FunctionRangeQuery_getValueSource(t_FunctionRangeQuery *self);
          static PyObject *t_FunctionRangeQuery_hashCode(t_FunctionRangeQuery *self, PyObject *args);
          static PyObject *t_FunctionRangeQuery_isIncludeLower(t_FunctionRangeQuery *self);
          static PyObject *t_FunctionRangeQuery_isIncludeUpper(t_FunctionRangeQuery *self);
          static PyObject *t_FunctionRangeQuery_toString(t_FunctionRangeQuery *self, PyObject *args);
          static PyObject *t_FunctionRangeQuery_visit(t_FunctionRangeQuery *self, PyObject *args);
          static PyObject *t_FunctionRangeQuery_get__includeLower(t_FunctionRangeQuery *self, void *data);
          static PyObject *t_FunctionRangeQuery_get__includeUpper(t_FunctionRangeQuery *self, void *data);
          static PyObject *t_FunctionRangeQuery_get__lowerVal(t_FunctionRangeQuery *self, void *data);
          static PyObject *t_FunctionRangeQuery_get__upperVal(t_FunctionRangeQuery *self, void *data);
          static PyObject *t_FunctionRangeQuery_get__valueSource(t_FunctionRangeQuery *self, void *data);
          static PyGetSetDef t_FunctionRangeQuery__fields_[] = {
            DECLARE_GET_FIELD(t_FunctionRangeQuery, includeLower),
            DECLARE_GET_FIELD(t_FunctionRangeQuery, includeUpper),
            DECLARE_GET_FIELD(t_FunctionRangeQuery, lowerVal),
            DECLARE_GET_FIELD(t_FunctionRangeQuery, upperVal),
            DECLARE_GET_FIELD(t_FunctionRangeQuery, valueSource),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_FunctionRangeQuery__methods_[] = {
            DECLARE_METHOD(t_FunctionRangeQuery, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_FunctionRangeQuery, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_FunctionRangeQuery, createWeight, METH_VARARGS),
            DECLARE_METHOD(t_FunctionRangeQuery, equals, METH_VARARGS),
            DECLARE_METHOD(t_FunctionRangeQuery, getLowerVal, METH_NOARGS),
            DECLARE_METHOD(t_FunctionRangeQuery, getUpperVal, METH_NOARGS),
            DECLARE_METHOD(t_FunctionRangeQuery, getValueSource, METH_NOARGS),
            DECLARE_METHOD(t_FunctionRangeQuery, hashCode, METH_VARARGS),
            DECLARE_METHOD(t_FunctionRangeQuery, isIncludeLower, METH_NOARGS),
            DECLARE_METHOD(t_FunctionRangeQuery, isIncludeUpper, METH_NOARGS),
            DECLARE_METHOD(t_FunctionRangeQuery, toString, METH_VARARGS),
            DECLARE_METHOD(t_FunctionRangeQuery, visit, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          static PyType_Slot PY_TYPE_SLOTS(FunctionRangeQuery)[] = {
            { Py_tp_methods, t_FunctionRangeQuery__methods_ },
            { Py_tp_init, (void *) t_FunctionRangeQuery_init_ },
            { Py_tp_getset, t_FunctionRangeQuery__fields_ },
            { 0, NULL }
          };

          static PyType_Def *PY_TYPE_BASES(FunctionRangeQuery)[] = {
            &PY_TYPE_DEF(::org::apache::lucene::search::Query),
            NULL
          };

          DEFINE_TYPE(FunctionRangeQuery, t_FunctionRangeQuery, FunctionRangeQuery);

          void t_FunctionRangeQuery::install(PyObject *module)
          {
            installType(&PY_TYPE(FunctionRangeQuery), &PY_TYPE_DEF(FunctionRangeQuery), module, "FunctionRangeQuery", 0);
          }

          void t_FunctionRangeQuery::initialize(PyObject *module)
          {
            PyObject_SetAttrString((PyObject *) PY_TYPE(FunctionRangeQuery), "class_", make_descriptor(FunctionRangeQuery::initializeClass, 1));
            PyObject_SetAttrString((PyObject *) PY_TYPE(FunctionRangeQuery), "wrapfn_", make_descriptor(t_FunctionRangeQuery::wrap_jobject));
            PyObject_SetAttrString((PyObject *) PY_TYPE(FunctionRangeQuery), "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_FunctionRangeQuery_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, FunctionRangeQuery::initializeClass, 1)))
              return NULL;
            return t_FunctionRangeQuery::wrap_Object(FunctionRangeQuery(((t_FunctionRangeQuery *) arg)->object.this$));
          }
          static PyObject *t_FunctionRangeQuery_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, FunctionRangeQuery::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_FunctionRangeQuery_init_(t_FunctionRangeQuery *self, PyObject *args, PyObject *kwds)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 5:
              {
                ::org::apache::lucene::queries::function::ValueSource a0((jobject) NULL);
                ::java::lang::Number a1((jobject) NULL);
                ::java::lang::Number a2((jobject) NULL);
                jboolean a3;
                jboolean a4;
                FunctionRangeQuery object((jobject) NULL);

                if (!parseArgs(args, "kOOZZ", ::org::apache::lucene::queries::function::ValueSource::initializeClass, ::java::lang::PY_TYPE(Number), ::java::lang::PY_TYPE(Number), &a0, &a1, &a2, &a3, &a4))
                {
                  INT_CALL(object = FunctionRangeQuery(a0, a1, a2, a3, a4));
                  self->object = object;
                  break;
                }
              }
              {
                ::org::apache::lucene::queries::function::ValueSource a0((jobject) NULL);
                ::java::lang::String a1((jobject) NULL);
                ::java::lang::String a2((jobject) NULL);
                jboolean a3;
                jboolean a4;
                FunctionRangeQuery object((jobject) NULL);

                if (!parseArgs(args, "kssZZ", ::org::apache::lucene::queries::function::ValueSource::initializeClass, &a0, &a1, &a2, &a3, &a4))
                {
                  INT_CALL(object = FunctionRangeQuery(a0, a1, a2, a3, a4));
                  self->object = object;
                  break;
                }
              }
             default:
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_FunctionRangeQuery_createWeight(t_FunctionRangeQuery *self, PyObject *args)
          {
            ::org::apache::lucene::search::IndexSearcher a0((jobject) NULL);
            ::org::apache::lucene::search::ScoreMode a1((jobject) NULL);
            PyTypeObject **p1;
            jfloat a2;
            ::org::apache::lucene::search::Weight result((jobject) NULL);

            if (!parseArgs(args, "kKF", ::org::apache::lucene::search::IndexSearcher::initializeClass, ::org::apache::lucene::search::ScoreMode::initializeClass, &a0, &a1, &p1, ::org::apache::lucene::search::t_ScoreMode::parameters_, &a2))
            {
              OBJ_CALL(result = self->object.createWeight(a0, a1, a2));
              return ::org::apache::lucene::search::t_Weight::wrap_Object(result);
            }

            return callSuper(PY_TYPE(FunctionRangeQuery), (PyObject *) self, "createWeight", args, 2);
          }

          static PyObject *t_FunctionRangeQuery_equals(t_FunctionRangeQuery *self, PyObject *args)
          {
            ::java::lang::Object a0((jobject) NULL);
            jboolean result;

            if (!parseArgs(args, "o", &a0))
            {
              OBJ_CALL(result = self->object.equals(a0));
              Py_RETURN_BOOL(result);
            }

            return callSuper(PY_TYPE(FunctionRangeQuery), (PyObject *) self, "equals", args, 2);
          }

          static PyObject *t_FunctionRangeQuery_getLowerVal(t_FunctionRangeQuery *self)
          {
            ::java::lang::String result((jobject) NULL);
            OBJ_CALL(result = self->object.getLowerVal());
            return j2p(result);
          }

          static PyObject *t_FunctionRangeQuery_getUpperVal(t_FunctionRangeQuery *self)
          {
            ::java::lang::String result((jobject) NULL);
            OBJ_CALL(result = self->object.getUpperVal());
            return j2p(result);
          }

          static PyObject *t_FunctionRangeQuery_getValueSource(t_FunctionRangeQuery *self)
          {
            ::org::apache::lucene::queries::function::ValueSource result((jobject) NULL);
            OBJ_CALL(result = self->object.getValueSource());
            return ::org::apache::lucene::queries::function::t_ValueSource::wrap_Object(result);
          }

          static PyObject *t_FunctionRangeQuery_hashCode(t_FunctionRangeQuery *self, PyObject *args)
          {
            jint result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.hashCode());
              return PyLong_FromLong((long) result);
            }

            return callSuper(PY_TYPE(FunctionRangeQuery), (PyObject *) self, "hashCode", args, 2);
          }

          static PyObject *t_FunctionRangeQuery_isIncludeLower(t_FunctionRangeQuery *self)
          {
            jboolean result;
            OBJ_CALL(result = self->object.isIncludeLower());
            Py_RETURN_BOOL(result);
          }

          static PyObject *t_FunctionRangeQuery_isIncludeUpper(t_FunctionRangeQuery *self)
          {
            jboolean result;
            OBJ_CALL(result = self->object.isIncludeUpper());
            Py_RETURN_BOOL(result);
          }

          static PyObject *t_FunctionRangeQuery_toString(t_FunctionRangeQuery *self, PyObject *args)
          {
            ::java::lang::String a0((jobject) NULL);
            ::java::lang::String result((jobject) NULL);

            if (!parseArgs(args, "s", &a0))
            {
              OBJ_CALL(result = self->object.toString(a0));
              return j2p(result);
            }

            return callSuper(PY_TYPE(FunctionRangeQuery), (PyObject *) self, "toString", args, 2);
          }

          static PyObject *t_FunctionRangeQuery_visit(t_FunctionRangeQuery *self, PyObject *args)
          {
            ::org::apache::lucene::search::QueryVisitor a0((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::search::QueryVisitor::initializeClass, &a0))
            {
              OBJ_CALL(self->object.visit(a0));
              Py_RETURN_NONE;
            }

            return callSuper(PY_TYPE(FunctionRangeQuery), (PyObject *) self, "visit", args, 2);
          }

          static PyObject *t_FunctionRangeQuery_get__includeLower(t_FunctionRangeQuery *self, void *data)
          {
            jboolean value;
            OBJ_CALL(value = self->object.isIncludeLower());
            Py_RETURN_BOOL(value);
          }

          static PyObject *t_FunctionRangeQuery_get__includeUpper(t_FunctionRangeQuery *self, void *data)
          {
            jboolean value;
            OBJ_CALL(value = self->object.isIncludeUpper());
            Py_RETURN_BOOL(value);
          }

          static PyObject *t_FunctionRangeQuery_get__lowerVal(t_FunctionRangeQuery *self, void *data)
          {
            ::java::lang::String value((jobject) NULL);
            OBJ_CALL(value = self->object.getLowerVal());
            return j2p(value);
          }

          static PyObject *t_FunctionRangeQuery_get__upperVal(t_FunctionRangeQuery *self, void *data)
          {
            ::java::lang::String value((jobject) NULL);
            OBJ_CALL(value = self->object.getUpperVal());
            return j2p(value);
          }

          static PyObject *t_FunctionRangeQuery_get__valueSource(t_FunctionRangeQuery *self, void *data)
          {
            ::org::apache::lucene::queries::function::ValueSource value((jobject) NULL);
            OBJ_CALL(value = self->object.getValueSource());
            return ::org::apache::lucene::queries::function::t_ValueSource::wrap_Object(value);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/util/SameThreadExecutorService.h"
#include "java/lang/Class.h"
#include "java/lang/Runnable.h"
#include "java/lang/InterruptedException.h"
#include "java/util/concurrent/TimeUnit.h"
#include "java/util/List.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {

        ::java::lang::Class *SameThreadExecutorService::class$ = NULL;
        jmethodID *SameThreadExecutorService::mids$ = NULL;
        bool SameThreadExecutorService::live$ = false;

        jclass SameThreadExecutorService::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/util/SameThreadExecutorService");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_f2cc1bce94666404] = env->getMethodID(cls, "<init>", "()V");
            mids$[mid_awaitTermination_30164a42685760d2] = env->getMethodID(cls, "awaitTermination", "(JLjava/util/concurrent/TimeUnit;)Z");
            mids$[mid_execute_81586dca3e83f35f] = env->getMethodID(cls, "execute", "(Ljava/lang/Runnable;)V");
            mids$[mid_isShutdown_8454bd5aa23fd11e] = env->getMethodID(cls, "isShutdown", "()Z");
            mids$[mid_isTerminated_8454bd5aa23fd11e] = env->getMethodID(cls, "isTerminated", "()Z");
            mids$[mid_shutdown_f2cc1bce94666404] = env->getMethodID(cls, "shutdown", "()V");
            mids$[mid_shutdownNow_49ec78390f08338a] = env->getMethodID(cls, "shutdownNow", "()Ljava/util/List;");

            class$ = new ::java::lang::Class(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        SameThreadExecutorService::SameThreadExecutorService() : ::java::util::concurrent::AbstractExecutorService(env->newObject(initializeClass, &mids$, mid_init$_f2cc1bce94666404)) {}

        jboolean SameThreadExecutorService::awaitTermination(jlong a0, const ::java::util::concurrent::TimeUnit & a1) const
        {
          return env->callBooleanMethod(this$, mids$[mid_awaitTermination_30164a42685760d2], a0, a1.this$);
        }

        void SameThreadExecutorService::execute(const ::java::lang::Runnable & a0) const
        {
          env->callVoidMethod(this$, mids$[mid_execute_81586dca3e83f35f], a0.this$);
        }

        jboolean SameThreadExecutorService::isShutdown() const
        {
          return env->callBooleanMethod(this$, mids$[mid_isShutdown_8454bd5aa23fd11e]);
        }

        jboolean SameThreadExecutorService::isTerminated() const
        {
          return env->callBooleanMethod(this$, mids$[mid_isTerminated_8454bd5aa23fd11e]);
        }

        void SameThreadExecutorService::shutdown() const
        {
          env->callVoidMethod(this$, mids$[mid_shutdown_f2cc1bce94666404]);
        }

        ::java::util::List SameThreadExecutorService::shutdownNow() const
        {
          return ::java::util::List(env->callObjectMethod(this$, mids$[mid_shutdownNow_49ec78390f08338a]));
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        static PyObject *t_SameThreadExecutorService_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_SameThreadExecutorService_instance_(PyTypeObject *type, PyObject *arg);
        static int t_SameThreadExecutorService_init_(t_SameThreadExecutorService *self, PyObject *args, PyObject *kwds);
        static PyObject *t_SameThreadExecutorService_awaitTermination(t_SameThreadExecutorService *self, PyObject *args);
        static PyObject *t_SameThreadExecutorService_execute(t_SameThreadExecutorService *self, PyObject *args);
        static PyObject *t_SameThreadExecutorService_isShutdown(t_SameThreadExecutorService *self, PyObject *args);
        static PyObject *t_SameThreadExecutorService_isTerminated(t_SameThreadExecutorService *self, PyObject *args);
        static PyObject *t_SameThreadExecutorService_shutdown(t_SameThreadExecutorService *self, PyObject *args);
        static PyObject *t_SameThreadExecutorService_shutdownNow(t_SameThreadExecutorService *self, PyObject *args);
        static PyObject *t_SameThreadExecutorService_get__terminated(t_SameThreadExecutorService *self, void *data);
        static PyGetSetDef t_SameThreadExecutorService__fields_[] = {
          DECLARE_GET_FIELD(t_SameThreadExecutorService, terminated),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_SameThreadExecutorService__methods_[] = {
          DECLARE_METHOD(t_SameThreadExecutorService, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_SameThreadExecutorService, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_SameThreadExecutorService, awaitTermination, METH_VARARGS),
          DECLARE_METHOD(t_SameThreadExecutorService, execute, METH_VARARGS),
          DECLARE_METHOD(t_SameThreadExecutorService, isShutdown, METH_VARARGS),
          DECLARE_METHOD(t_SameThreadExecutorService, isTerminated, METH_VARARGS),
          DECLARE_METHOD(t_SameThreadExecutorService, shutdown, METH_VARARGS),
          DECLARE_METHOD(t_SameThreadExecutorService, shutdownNow, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        static PyType_Slot PY_TYPE_SLOTS(SameThreadExecutorService)[] = {
          { Py_tp_methods, t_SameThreadExecutorService__methods_ },
          { Py_tp_init, (void *) t_SameThreadExecutorService_init_ },
          { Py_tp_getset, t_SameThreadExecutorService__fields_ },
          { 0, NULL }
        };

        static PyType_Def *PY_TYPE_BASES(SameThreadExecutorService)[] = {
          &PY_TYPE_DEF(::java::util::concurrent::AbstractExecutorService),
          NULL
        };

        DEFINE_TYPE(SameThreadExecutorService, t_SameThreadExecutorService, SameThreadExecutorService);

        void t_SameThreadExecutorService::install(PyObject *module)
        {
          installType(&PY_TYPE(SameThreadExecutorService), &PY_TYPE_DEF(SameThreadExecutorService), module, "SameThreadExecutorService", 0);
        }

        void t_SameThreadExecutorService::initialize(PyObject *module)
        {
          PyObject_SetAttrString((PyObject *) PY_TYPE(SameThreadExecutorService), "class_", make_descriptor(SameThreadExecutorService::initializeClass, 1));
          PyObject_SetAttrString((PyObject *) PY_TYPE(SameThreadExecutorService), "wrapfn_", make_descriptor(t_SameThreadExecutorService::wrap_jobject));
          PyObject_SetAttrString((PyObject *) PY_TYPE(SameThreadExecutorService), "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_SameThreadExecutorService_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, SameThreadExecutorService::initializeClass, 1)))
            return NULL;
          return t_SameThreadExecutorService::wrap_Object(SameThreadExecutorService(((t_SameThreadExecutorService *) arg)->object.this$));
        }
        static PyObject *t_SameThreadExecutorService_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, SameThreadExecutorService::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_SameThreadExecutorService_init_(t_SameThreadExecutorService *self, PyObject *args, PyObject *kwds)
        {
          SameThreadExecutorService object((jobject) NULL);

          INT_CALL(object = SameThreadExecutorService());
          self->object = object;

          return 0;
        }

        static PyObject *t_SameThreadExecutorService_awaitTermination(t_SameThreadExecutorService *self, PyObject *args)
        {
          jlong a0;
          ::java::util::concurrent::TimeUnit a1((jobject) NULL);
          PyTypeObject **p1;
          jboolean result;

          if (!parseArgs(args, "JK", ::java::util::concurrent::TimeUnit::initializeClass, &a0, &a1, &p1, ::java::util::concurrent::t_TimeUnit::parameters_))
          {
            OBJ_CALL(result = self->object.awaitTermination(a0, a1));
            Py_RETURN_BOOL(result);
          }

          return callSuper(PY_TYPE(SameThreadExecutorService), (PyObject *) self, "awaitTermination", args, 2);
        }

        static PyObject *t_SameThreadExecutorService_execute(t_SameThreadExecutorService *self, PyObject *args)
        {
          ::java::lang::Runnable a0((jobject) NULL);

          if (!parseArgs(args, "k", ::java::lang::Runnable::initializeClass, &a0))
          {
            OBJ_CALL(self->object.execute(a0));
            Py_RETURN_NONE;
          }

          return callSuper(PY_TYPE(SameThreadExecutorService), (PyObject *) self, "execute", args, 2);
        }

        static PyObject *t_SameThreadExecutorService_isShutdown(t_SameThreadExecutorService *self, PyObject *args)
        {
          jboolean result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.isShutdown());
            Py_RETURN_BOOL(result);
          }

          return callSuper(PY_TYPE(SameThreadExecutorService), (PyObject *) self, "isShutdown", args, 2);
        }

        static PyObject *t_SameThreadExecutorService_isTerminated(t_SameThreadExecutorService *self, PyObject *args)
        {
          jboolean result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.isTerminated());
            Py_RETURN_BOOL(result);
          }

          return callSuper(PY_TYPE(SameThreadExecutorService), (PyObject *) self, "isTerminated", args, 2);
        }

        static PyObject *t_SameThreadExecutorService_shutdown(t_SameThreadExecutorService *self, PyObject *args)
        {

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(self->object.shutdown());
            Py_RETURN_NONE;
          }

          return callSuper(PY_TYPE(SameThreadExecutorService), (PyObject *) self, "shutdown", args, 2);
        }

        static PyObject *t_SameThreadExecutorService_shutdownNow(t_SameThreadExecutorService *self, PyObject *args)
        {
          ::java::util::List result((jobject) NULL);

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.shutdownNow());
            return ::java::util::t_List::wrap_Object(result, ::java::lang::PY_TYPE(Runnable));
          }

          return callSuper(PY_TYPE(SameThreadExecutorService), (PyObject *) self, "shutdownNow", args, 2);
        }

        static PyObject *t_SameThreadExecutorService_get__terminated(t_SameThreadExecutorService *self, void *data)
        {
          jboolean value;
          OBJ_CALL(value = self->object.isTerminated());
          Py_RETURN_BOOL(value);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/facet/taxonomy/TaxonomyFacetCounts.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/facet/FacetsCollector.h"
#include "org/apache/lucene/facet/FacetsConfig.h"
#include "org/apache/lucene/facet/taxonomy/TaxonomyReader.h"
#include "org/apache/lucene/facet/taxonomy/OrdinalsReader.h"
#include "java/io/IOException.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace facet {
        namespace taxonomy {

          ::java::lang::Class *TaxonomyFacetCounts::class$ = NULL;
          jmethodID *TaxonomyFacetCounts::mids$ = NULL;
          bool TaxonomyFacetCounts::live$ = false;

          jclass TaxonomyFacetCounts::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/facet/taxonomy/TaxonomyFacetCounts");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_20c339a6765418eb] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/facet/taxonomy/OrdinalsReader;Lorg/apache/lucene/facet/taxonomy/TaxonomyReader;Lorg/apache/lucene/facet/FacetsConfig;Lorg/apache/lucene/facet/FacetsCollector;)V");

              class$ = new ::java::lang::Class(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          TaxonomyFacetCounts::TaxonomyFacetCounts(const ::org::apache::lucene::facet::taxonomy::OrdinalsReader & a0, const ::org::apache::lucene::facet::taxonomy::TaxonomyReader & a1, const ::org::apache::lucene::facet::FacetsConfig & a2, const ::org::apache::lucene::facet::FacetsCollector & a3) : ::org::apache::lucene::facet::taxonomy::IntTaxonomyFacets(env->newObject(initializeClass, &mids$, mid_init$_20c339a6765418eb, a0.this$, a1.this$, a2.this$, a3.this$)) {}
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace facet {
        namespace taxonomy {
          static PyObject *t_TaxonomyFacetCounts_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_TaxonomyFacetCounts_instance_(PyTypeObject *type, PyObject *arg);
          static int t_TaxonomyFacetCounts_init_(t_TaxonomyFacetCounts *self, PyObject *args, PyObject *kwds);

          static PyMethodDef t_TaxonomyFacetCounts__methods_[] = {
            DECLARE_METHOD(t_TaxonomyFacetCounts, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_TaxonomyFacetCounts, instance_, METH_O | METH_CLASS),
            { NULL, NULL, 0, NULL }
          };

          static PyType_Slot PY_TYPE_SLOTS(TaxonomyFacetCounts)[] = {
            { Py_tp_methods, t_TaxonomyFacetCounts__methods_ },
            { Py_tp_init, (void *) t_TaxonomyFacetCounts_init_ },
            { 0, NULL }
          };

          static PyType_Def *PY_TYPE_BASES(TaxonomyFacetCounts)[] = {
            &PY_TYPE_DEF(::org::apache::lucene::facet::taxonomy::IntTaxonomyFacets),
            NULL
          };

          DEFINE_TYPE(TaxonomyFacetCounts, t_TaxonomyFacetCounts, TaxonomyFacetCounts);

          void t_TaxonomyFacetCounts::install(PyObject *module)
          {
            installType(&PY_TYPE(TaxonomyFacetCounts), &PY_TYPE_DEF(TaxonomyFacetCounts), module, "TaxonomyFacetCounts", 0);
          }

          void t_TaxonomyFacetCounts::initialize(PyObject *module)
          {
            PyObject_SetAttrString((PyObject *) PY_TYPE(TaxonomyFacetCounts), "class_", make_descriptor(TaxonomyFacetCounts::initializeClass, 1));
            PyObject_SetAttrString((PyObject *) PY_TYPE(TaxonomyFacetCounts), "wrapfn_", make_descriptor(t_TaxonomyFacetCounts::wrap_jobject));
            PyObject_SetAttrString((PyObject *) PY_TYPE(TaxonomyFacetCounts), "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_TaxonomyFacetCounts_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, TaxonomyFacetCounts::initializeClass, 1)))
              return NULL;
            return t_TaxonomyFacetCounts::wrap_Object(TaxonomyFacetCounts(((t_TaxonomyFacetCounts *) arg)->object.this$));
          }
          static PyObject *t_TaxonomyFacetCounts_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, TaxonomyFacetCounts::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_TaxonomyFacetCounts_init_(t_TaxonomyFacetCounts *self, PyObject *args, PyObject *kwds)
          {
            ::org::apache::lucene::facet::taxonomy::OrdinalsReader a0((jobject) NULL);
            ::org::apache::lucene::facet::taxonomy::TaxonomyReader a1((jobject) NULL);
            ::org::apache::lucene::facet::FacetsConfig a2((jobject) NULL);
            ::org::apache::lucene::facet::FacetsCollector a3((jobject) NULL);
            TaxonomyFacetCounts object((jobject) NULL);

            if (!parseArgs(args, "kkkk", ::org::apache::lucene::facet::taxonomy::OrdinalsReader::initializeClass, ::org::apache::lucene::facet::taxonomy::TaxonomyReader::initializeClass, ::org::apache::lucene::facet::FacetsConfig::initializeClass, ::org::apache::lucene::facet::FacetsCollector::initializeClass, &a0, &a1, &a2, &a3))
            {
              INT_CALL(object = TaxonomyFacetCounts(a0, a1, a2, a3));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queryparser/flexible/core/nodes/PathQueryNode$QueryText.h"
#include "java/lang/Cloneable.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/queryparser/flexible/core/nodes/PathQueryNode$QueryText.h"
#include "java/lang/String.h"
#include "java/lang/CharSequence.h"
#include "java/lang/CloneNotSupportedException.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace core {
            namespace nodes {

              ::java::lang::Class *PathQueryNode$QueryText::class$ = NULL;
              jmethodID *PathQueryNode$QueryText::mids$ = NULL;
              bool PathQueryNode$QueryText::live$ = false;

              jclass PathQueryNode$QueryText::initializeClass(bool getOnly)
              {
                if (getOnly)
                  return (jclass) (live$ ? class$->this$ : NULL);
                if (class$ == NULL)
                {
                  jclass cls = (jclass) env->findClass("org/apache/lucene/queryparser/flexible/core/nodes/PathQueryNode$QueryText");

                  mids$ = new jmethodID[max_mid];
                  mids$[mid_init$_1a9fff4dae4e12f0] = env->getMethodID(cls, "<init>", "(Ljava/lang/CharSequence;II)V");
                  mids$[mid_clone_fb8caec6ffa526fd] = env->getMethodID(cls, "clone", "()Lorg/apache/lucene/queryparser/flexible/core/nodes/PathQueryNode$QueryText;");
                  mids$[mid_getBegin_9972fcc56b44e79d] = env->getMethodID(cls, "getBegin", "()I");
                  mids$[mid_getEnd_9972fcc56b44e79d] = env->getMethodID(cls, "getEnd", "()I");
                  mids$[mid_getValue_ba44900ab7d793b9] = env->getMethodID(cls, "getValue", "()Ljava/lang/CharSequence;");
                  mids$[mid_toString_db9b55ba01e03e4b] = env->getMethodID(cls, "toString", "()Ljava/lang/String;");

                  class$ = new ::java::lang::Class(cls);
                  live$ = true;
                }
                return (jclass) class$->this$;
              }

              PathQueryNode$QueryText::PathQueryNode$QueryText(const ::java::lang::CharSequence & a0, jint a1, jint a2) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_1a9fff4dae4e12f0, a0.this$, a1, a2)) {}

              PathQueryNode$QueryText PathQueryNode$QueryText::clone() const
              {
                return PathQueryNode$QueryText(env->callObjectMethod(this$, mids$[mid_clone_fb8caec6ffa526fd]));
              }

              jint PathQueryNode$QueryText::getBegin() const
              {
                return env->callIntMethod(this$, mids$[mid_getBegin_9972fcc56b44e79d]);
              }

              jint PathQueryNode$QueryText::getEnd() const
              {
                return env->callIntMethod(this$, mids$[mid_getEnd_9972fcc56b44e79d]);
              }

              ::java::lang::CharSequence PathQueryNode$QueryText::getValue() const
              {
                return ::java::lang::CharSequence(env->callObjectMethod(this$, mids$[mid_getValue_ba44900ab7d793b9]));
              }

              ::java::lang::String PathQueryNode$QueryText::toString() const
              {
                return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_db9b55ba01e03e4b]));
              }
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace core {
            namespace nodes {
              static PyObject *t_PathQueryNode$QueryText_cast_(PyTypeObject *type, PyObject *arg);
              static PyObject *t_PathQueryNode$QueryText_instance_(PyTypeObject *type, PyObject *arg);
              static int t_PathQueryNode$QueryText_init_(t_PathQueryNode$QueryText *self, PyObject *args, PyObject *kwds);
              static PyObject *t_PathQueryNode$QueryText_clone(t_PathQueryNode$QueryText *self);
              static PyObject *t_PathQueryNode$QueryText_getBegin(t_PathQueryNode$QueryText *self);
              static PyObject *t_PathQueryNode$QueryText_getEnd(t_PathQueryNode$QueryText *self);
              static PyObject *t_PathQueryNode$QueryText_getValue(t_PathQueryNode$QueryText *self);
              static PyObject *t_PathQueryNode$QueryText_toString(t_PathQueryNode$QueryText *self, PyObject *args);
              static PyObject *t_PathQueryNode$QueryText_get__begin(t_PathQueryNode$QueryText *self, void *data);
              static PyObject *t_PathQueryNode$QueryText_get__end(t_PathQueryNode$QueryText *self, void *data);
              static PyObject *t_PathQueryNode$QueryText_get__value(t_PathQueryNode$QueryText *self, void *data);
              static PyGetSetDef t_PathQueryNode$QueryText__fields_[] = {
                DECLARE_GET_FIELD(t_PathQueryNode$QueryText, begin),
                DECLARE_GET_FIELD(t_PathQueryNode$QueryText, end),
                DECLARE_GET_FIELD(t_PathQueryNode$QueryText, value),
                { NULL, NULL, NULL, NULL, NULL }
              };

              static PyMethodDef t_PathQueryNode$QueryText__methods_[] = {
                DECLARE_METHOD(t_PathQueryNode$QueryText, cast_, METH_O | METH_CLASS),
                DECLARE_METHOD(t_PathQueryNode$QueryText, instance_, METH_O | METH_CLASS),
                DECLARE_METHOD(t_PathQueryNode$QueryText, clone, METH_NOARGS),
                DECLARE_METHOD(t_PathQueryNode$QueryText, getBegin, METH_NOARGS),
                DECLARE_METHOD(t_PathQueryNode$QueryText, getEnd, METH_NOARGS),
                DECLARE_METHOD(t_PathQueryNode$QueryText, getValue, METH_NOARGS),
                DECLARE_METHOD(t_PathQueryNode$QueryText, toString, METH_VARARGS),
                { NULL, NULL, 0, NULL }
              };

              static PyType_Slot PY_TYPE_SLOTS(PathQueryNode$QueryText)[] = {
                { Py_tp_methods, t_PathQueryNode$QueryText__methods_ },
                { Py_tp_init, (void *) t_PathQueryNode$QueryText_init_ },
                { Py_tp_getset, t_PathQueryNode$QueryText__fields_ },
                { 0, NULL }
              };

              static PyType_Def *PY_TYPE_BASES(PathQueryNode$QueryText)[] = {
                &PY_TYPE_DEF(::java::lang::Object),
                NULL
              };

              DEFINE_TYPE(PathQueryNode$QueryText, t_PathQueryNode$QueryText, PathQueryNode$QueryText);

              void t_PathQueryNode$QueryText::install(PyObject *module)
              {
                installType(&PY_TYPE(PathQueryNode$QueryText), &PY_TYPE_DEF(PathQueryNode$QueryText), module, "PathQueryNode$QueryText", 0);
              }

              void t_PathQueryNode$QueryText::initialize(PyObject *module)
              {
                PyObject_SetAttrString((PyObject *) PY_TYPE(PathQueryNode$QueryText), "class_", make_descriptor(PathQueryNode$QueryText::initializeClass, 1));
                PyObject_SetAttrString((PyObject *) PY_TYPE(PathQueryNode$QueryText), "wrapfn_", make_descriptor(t_PathQueryNode$QueryText::wrap_jobject));
                PyObject_SetAttrString((PyObject *) PY_TYPE(PathQueryNode$QueryText), "boxfn_", make_descriptor(boxObject));
              }

              static PyObject *t_PathQueryNode$QueryText_cast_(PyTypeObject *type, PyObject *arg)
              {
                if (!(arg = castCheck(arg, PathQueryNode$QueryText::initializeClass, 1)))
                  return NULL;
                return t_PathQueryNode$QueryText::wrap_Object(PathQueryNode$QueryText(((t_PathQueryNode$QueryText *) arg)->object.this$));
              }
              static PyObject *t_PathQueryNode$QueryText_instance_(PyTypeObject *type, PyObject *arg)
              {
                if (!castCheck(arg, PathQueryNode$QueryText::initializeClass, 0))
                  Py_RETURN_FALSE;
                Py_RETURN_TRUE;
              }

              static int t_PathQueryNode$QueryText_init_(t_PathQueryNode$QueryText *self, PyObject *args, PyObject *kwds)
              {
                ::java::lang::CharSequence a0((jobject) NULL);
                jint a1;
                jint a2;
                PathQueryNode$QueryText object((jobject) NULL);

                if (!parseArgs(args, "OII", ::java::lang::PY_TYPE(CharSequence), &a0, &a1, &a2))
                {
                  INT_CALL(object = PathQueryNode$QueryText(a0, a1, a2));
                  self->object = object;
                }
                else
                {
                  PyErr_SetArgsError((PyObject *) self, "__init__", args);
                  return -1;
                }

                return 0;
              }

              static PyObject *t_PathQueryNode$QueryText_clone(t_PathQueryNode$QueryText *self)
              {
                PathQueryNode$QueryText result((jobject) NULL);
                OBJ_CALL(result = self->object.clone());
                return t_PathQueryNode$QueryText::wrap_Object(result);
              }

              static PyObject *t_PathQueryNode$QueryText_getBegin(t_PathQueryNode$QueryText *self)
              {
                jint result;
                OBJ_CALL(result = self->object.getBegin());
                return PyLong_FromLong((long) result);
              }

              static PyObject *t_PathQueryNode$QueryText_getEnd(t_PathQueryNode$QueryText *self)
              {
                jint result;
                OBJ_CALL(result = self->object.getEnd());
                return PyLong_FromLong((long) result);
              }

              static PyObject *t_PathQueryNode$QueryText_getValue(t_PathQueryNode$QueryText *self)
              {
                ::java::lang::CharSequence result((jobject) NULL);
                OBJ_CALL(result = self->object.getValue());
                return ::java::lang::t_CharSequence::wrap_Object(result);
              }

              static PyObject *t_PathQueryNode$QueryText_toString(t_PathQueryNode$QueryText *self, PyObject *args)
              {
                ::java::lang::String result((jobject) NULL);

                if (!parseArgs(args, ""))
                {
                  OBJ_CALL(result = self->object.toString());
                  return j2p(result);
                }

                return callSuper(PY_TYPE(PathQueryNode$QueryText), (PyObject *) self, "toString", args, 2);
              }

              static PyObject *t_PathQueryNode$QueryText_get__begin(t_PathQueryNode$QueryText *self, void *data)
              {
                jint value;
                OBJ_CALL(value = self->object.getBegin());
                return PyLong_FromLong((long) value);
              }

              static PyObject *t_PathQueryNode$QueryText_get__end(t_PathQueryNode$QueryText *self, void *data)
              {
                jint value;
                OBJ_CALL(value = self->object.getEnd());
                return PyLong_FromLong((long) value);
              }

              static PyObject *t_PathQueryNode$QueryText_get__value(t_PathQueryNode$QueryText *self, void *data)
              {
                ::java::lang::CharSequence value((jobject) NULL);
                OBJ_CALL(value = self->object.getValue());
                return ::java::lang::t_CharSequence::wrap_Object(value);
              }
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/fi/FinnishLightStemFilterFactory.h"
#include "java/util/Map.h"
#include "java/lang/String.h"
#include "org/apache/lucene/analysis/TokenStream.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace fi {

          ::java::lang::Class *FinnishLightStemFilterFactory::class$ = NULL;
          jmethodID *FinnishLightStemFilterFactory::mids$ = NULL;
          bool FinnishLightStemFilterFactory::live$ = false;
          ::java::lang::String *FinnishLightStemFilterFactory::NAME = NULL;

          jclass FinnishLightStemFilterFactory::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/fi/FinnishLightStemFilterFactory");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_408bd889ee3beae5] = env->getMethodID(cls, "<init>", "(Ljava/util/Map;)V");
              mids$[mid_create_6de1e28d9d10cd9e] = env->getMethodID(cls, "create", "(Lorg/apache/lucene/analysis/TokenStream;)Lorg/apache/lucene/analysis/TokenStream;");

              class$ = new ::java::lang::Class(cls);
              cls = (jclass) class$->this$;

              NAME = new ::java::lang::String(env->getStaticObjectField(cls, "NAME", "Ljava/lang/String;"));
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          FinnishLightStemFilterFactory::FinnishLightStemFilterFactory(const ::java::util::Map & a0) : ::org::apache::lucene::analysis::util::TokenFilterFactory(env->newObject(initializeClass, &mids$, mid_init$_408bd889ee3beae5, a0.this$)) {}

          ::org::apache::lucene::analysis::TokenStream FinnishLightStemFilterFactory::create(const ::org::apache::lucene::analysis::TokenStream & a0) const
          {
            return ::org::apache::lucene::analysis::TokenStream(env->callObjectMethod(this$, mids$[mid_create_6de1e28d9d10cd9e], a0.this$));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace fi {
          static PyObject *t_FinnishLightStemFilterFactory_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_FinnishLightStemFilterFactory_instance_(PyTypeObject *type, PyObject *arg);
          static int t_FinnishLightStemFilterFactory_init_(t_FinnishLightStemFilterFactory *self, PyObject *args, PyObject *kwds);
          static PyObject *t_FinnishLightStemFilterFactory_create(t_FinnishLightStemFilterFactory *self, PyObject *args);

          static PyMethodDef t_FinnishLightStemFilterFactory__methods_[] = {
            DECLARE_METHOD(t_FinnishLightStemFilterFactory, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_FinnishLightStemFilterFactory, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_FinnishLightStemFilterFactory, create, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          static PyType_Slot PY_TYPE_SLOTS(FinnishLightStemFilterFactory)[] = {
            { Py_tp_methods, t_FinnishLightStemFilterFactory__methods_ },
            { Py_tp_init, (void *) t_FinnishLightStemFilterFactory_init_ },
            { 0, NULL }
          };

          static PyType_Def *PY_TYPE_BASES(FinnishLightStemFilterFactory)[] = {
            &PY_TYPE_DEF(::org::apache::lucene::analysis::util::TokenFilterFactory),
            NULL
          };

          DEFINE_TYPE(FinnishLightStemFilterFactory, t_FinnishLightStemFilterFactory, FinnishLightStemFilterFactory);

          void t_FinnishLightStemFilterFactory::install(PyObject *module)
          {
            installType(&PY_TYPE(FinnishLightStemFilterFactory), &PY_TYPE_DEF(FinnishLightStemFilterFactory), module, "FinnishLightStemFilterFactory", 0);
          }

          void t_FinnishLightStemFilterFactory::initialize(PyObject *module)
          {
            PyObject_SetAttrString((PyObject *) PY_TYPE(FinnishLightStemFilterFactory), "class_", make_descriptor(FinnishLightStemFilterFactory::initializeClass, 1));
            PyObject_SetAttrString((PyObject *) PY_TYPE(FinnishLightStemFilterFactory), "wrapfn_", make_descriptor(t_FinnishLightStemFilterFactory::wrap_jobject));
            PyObject_SetAttrString((PyObject *) PY_TYPE(FinnishLightStemFilterFactory), "boxfn_", make_descriptor(boxObject));
            env->getClass(FinnishLightStemFilterFactory::initializeClass);
            PyObject_SetAttrString((PyObject *) PY_TYPE(FinnishLightStemFilterFactory), "NAME", make_descriptor(j2p(*FinnishLightStemFilterFactory::NAME)));
          }

          static PyObject *t_FinnishLightStemFilterFactory_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, FinnishLightStemFilterFactory::initializeClass, 1)))
              return NULL;
            return t_FinnishLightStemFilterFactory::wrap_Object(FinnishLightStemFilterFactory(((t_FinnishLightStemFilterFactory *) arg)->object.this$));
          }
          static PyObject *t_FinnishLightStemFilterFactory_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, FinnishLightStemFilterFactory::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_FinnishLightStemFilterFactory_init_(t_FinnishLightStemFilterFactory *self, PyObject *args, PyObject *kwds)
          {
            ::java::util::Map a0((jobject) NULL);
            PyTypeObject **p0;
            FinnishLightStemFilterFactory object((jobject) NULL);

            if (!parseArgs(args, "K", ::java::util::Map::initializeClass, &a0, &p0, ::java::util::t_Map::parameters_))
            {
              INT_CALL(object = FinnishLightStemFilterFactory(a0));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_FinnishLightStemFilterFactory_create(t_FinnishLightStemFilterFactory *self, PyObject *args)
          {
            ::org::apache::lucene::analysis::TokenStream a0((jobject) NULL);
            ::org::apache::lucene::analysis::TokenStream result((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::analysis::TokenStream::initializeClass, &a0))
            {
              OBJ_CALL(result = self->object.create(a0));
              return ::org::apache::lucene::analysis::t_TokenStream::wrap_Object(result);
            }

            return callSuper(PY_TYPE(FinnishLightStemFilterFactory), (PyObject *) self, "create", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queryparser/flexible/core/config/FieldConfig.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace core {
            namespace config {

              ::java::lang::Class *FieldConfig::class$ = NULL;
              jmethodID *FieldConfig::mids$ = NULL;
              bool FieldConfig::live$ = false;

              jclass FieldConfig::initializeClass(bool getOnly)
              {
                if (getOnly)
                  return (jclass) (live$ ? class$->this$ : NULL);
                if (class$ == NULL)
                {
                  jclass cls = (jclass) env->findClass("org/apache/lucene/queryparser/flexible/core/config/FieldConfig");

                  mids$ = new jmethodID[max_mid];
                  mids$[mid_init$_9fd2eb66a64e6f0f] = env->getMethodID(cls, "<init>", "(Ljava/lang/String;)V");
                  mids$[mid_getField_db9b55ba01e03e4b] = env->getMethodID(cls, "getField", "()Ljava/lang/String;");
                  mids$[mid_toString_db9b55ba01e03e4b] = env->getMethodID(cls, "toString", "()Ljava/lang/String;");

                  class$ = new ::java::lang::Class(cls);
                  live$ = true;
                }
                return (jclass) class$->this$;
              }

              FieldConfig::FieldConfig(const ::java::lang::String & a0) : ::org::apache::lucene::queryparser::flexible::core::config::AbstractQueryConfig(env->newObject(initializeClass, &mids$, mid_init$_9fd2eb66a64e6f0f, a0.this$)) {}

              ::java::lang::String FieldConfig::getField() const
              {
                return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_getField_db9b55ba01e03e4b]));
              }

              ::java::lang::String FieldConfig::toString() const
              {
                return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_db9b55ba01e03e4b]));
              }
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace core {
            namespace config {
              static PyObject *t_FieldConfig_cast_(PyTypeObject *type, PyObject *arg);
              static PyObject *t_FieldConfig_instance_(PyTypeObject *type, PyObject *arg);
              static int t_FieldConfig_init_(t_FieldConfig *self, PyObject *args, PyObject *kwds);
              static PyObject *t_FieldConfig_getField(t_FieldConfig *self);
              static PyObject *t_FieldConfig_toString(t_FieldConfig *self, PyObject *args);
              static PyObject *t_FieldConfig_get__field(t_FieldConfig *self, void *data);
              static PyGetSetDef t_FieldConfig__fields_[] = {
                DECLARE_GET_FIELD(t_FieldConfig, field),
                { NULL, NULL, NULL, NULL, NULL }
              };

              static PyMethodDef t_FieldConfig__methods_[] = {
                DECLARE_METHOD(t_FieldConfig, cast_, METH_O | METH_CLASS),
                DECLARE_METHOD(t_FieldConfig, instance_, METH_O | METH_CLASS),
                DECLARE_METHOD(t_FieldConfig, getField, METH_NOARGS),
                DECLARE_METHOD(t_FieldConfig, toString, METH_VARARGS),
                { NULL, NULL, 0, NULL }
              };

              static PyType_Slot PY_TYPE_SLOTS(FieldConfig)[] = {
                { Py_tp_methods, t_FieldConfig__methods_ },
                { Py_tp_init, (void *) t_FieldConfig_init_ },
                { Py_tp_getset, t_FieldConfig__fields_ },
                { 0, NULL }
              };

              static PyType_Def *PY_TYPE_BASES(FieldConfig)[] = {
                &PY_TYPE_DEF(::org::apache::lucene::queryparser::flexible::core::config::AbstractQueryConfig),
                NULL
              };

              DEFINE_TYPE(FieldConfig, t_FieldConfig, FieldConfig);

              void t_FieldConfig::install(PyObject *module)
              {
                installType(&PY_TYPE(FieldConfig), &PY_TYPE_DEF(FieldConfig), module, "FieldConfig", 0);
              }

              void t_FieldConfig::initialize(PyObject *module)
              {
                PyObject_SetAttrString((PyObject *) PY_TYPE(FieldConfig), "class_", make_descriptor(FieldConfig::initializeClass, 1));
                PyObject_SetAttrString((PyObject *) PY_TYPE(FieldConfig), "wrapfn_", make_descriptor(t_FieldConfig::wrap_jobject));
                PyObject_SetAttrString((PyObject *) PY_TYPE(FieldConfig), "boxfn_", make_descriptor(boxObject));
              }

              static PyObject *t_FieldConfig_cast_(PyTypeObject *type, PyObject *arg)
              {
                if (!(arg = castCheck(arg, FieldConfig::initializeClass, 1)))
                  return NULL;
                return t_FieldConfig::wrap_Object(FieldConfig(((t_FieldConfig *) arg)->object.this$));
              }
              static PyObject *t_FieldConfig_instance_(PyTypeObject *type, PyObject *arg)
              {
                if (!castCheck(arg, FieldConfig::initializeClass, 0))
                  Py_RETURN_FALSE;
                Py_RETURN_TRUE;
              }

              static int t_FieldConfig_init_(t_FieldConfig *self, PyObject *args, PyObject *kwds)
              {
                ::java::lang::String a0((jobject) NULL);
                FieldConfig object((jobject) NULL);

                if (!parseArgs(args, "s", &a0))
                {
                  INT_CALL(object = FieldConfig(a0));
                  self->object = object;
                }
                else
                {
                  PyErr_SetArgsError((PyObject *) self, "__init__", args);
                  return -1;
                }

                return 0;
              }

              static PyObject *t_FieldConfig_getField(t_FieldConfig *self)
              {
                ::java::lang::String result((jobject) NULL);
                OBJ_CALL(result = self->object.getField());
                return j2p(result);
              }

              static PyObject *t_FieldConfig_toString(t_FieldConfig *self, PyObject *args)
              {
                ::java::lang::String result((jobject) NULL);

                if (!parseArgs(args, ""))
                {
                  OBJ_CALL(result = self->object.toString());
                  return j2p(result);
                }

                return callSuper(PY_TYPE(FieldConfig), (PyObject *) self, "toString", args, 2);
              }

              static PyObject *t_FieldConfig_get__field(t_FieldConfig *self, void *data)
              {
                ::java::lang::String value((jobject) NULL);
                OBJ_CALL(value = self->object.getField());
                return j2p(value);
              }
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/similarities/AxiomaticF1LOG.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace similarities {

          ::java::lang::Class *AxiomaticF1LOG::class$ = NULL;
          jmethodID *AxiomaticF1LOG::mids$ = NULL;
          bool AxiomaticF1LOG::live$ = false;

          jclass AxiomaticF1LOG::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/search/similarities/AxiomaticF1LOG");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_f2cc1bce94666404] = env->getMethodID(cls, "<init>", "()V");
              mids$[mid_init$_8e1d952dd65cdc3a] = env->getMethodID(cls, "<init>", "(F)V");
              mids$[mid_toString_db9b55ba01e03e4b] = env->getMethodID(cls, "toString", "()Ljava/lang/String;");
              mids$[mid_idf_761ab1c432346fd0] = env->getMethodID(cls, "idf", "(Lorg/apache/lucene/search/similarities/BasicStats;DD)D");
              mids$[mid_gamma_761ab1c432346fd0] = env->getMethodID(cls, "gamma", "(Lorg/apache/lucene/search/similarities/BasicStats;DD)D");
              mids$[mid_tf_761ab1c432346fd0] = env->getMethodID(cls, "tf", "(Lorg/apache/lucene/search/similarities/BasicStats;DD)D");
              mids$[mid_idfExplain_77a68ba236144920] = env->getMethodID(cls, "idfExplain", "(Lorg/apache/lucene/search/similarities/BasicStats;DD)Lorg/apache/lucene/search/Explanation;");
              mids$[mid_tfln_761ab1c432346fd0] = env->getMethodID(cls, "tfln", "(Lorg/apache/lucene/search/similarities/BasicStats;DD)D");
              mids$[mid_tflnExplain_77a68ba236144920] = env->getMethodID(cls, "tflnExplain", "(Lorg/apache/lucene/search/similarities/BasicStats;DD)Lorg/apache/lucene/search/Explanation;");
              mids$[mid_ln_761ab1c432346fd0] = env->getMethodID(cls, "ln", "(Lorg/apache/lucene/search/similarities/BasicStats;DD)D");
              mids$[mid_lnExplain_77a68ba236144920] = env->getMethodID(cls, "lnExplain", "(Lorg/apache/lucene/search/similarities/BasicStats;DD)Lorg/apache/lucene/search/Explanation;");
              mids$[mid_tfExplain_77a68ba236144920] = env->getMethodID(cls, "tfExplain", "(Lorg/apache/lucene/search/similarities/BasicStats;DD)Lorg/apache/lucene/search/Explanation;");

              class$ = new ::java::lang::Class(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          AxiomaticF1LOG::AxiomaticF1LOG() : ::org::apache::lucene::search::similarities::Axiomatic(env->newObject(initializeClass, &mids$, mid_init$_f2cc1bce94666404)) {}

          AxiomaticF1LOG::AxiomaticF1LOG(jfloat a0) : ::org::apache::lucene::search::similarities::Axiomatic(env->newObject(initializeClass, &mids$, mid_init$_8e1d952dd65cdc3a, a0)) {}

          ::java::lang::String AxiomaticF1LOG::toString() const
          {
            return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_db9b55ba01e03e4b]));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace similarities {
          static PyObject *t_AxiomaticF1LOG_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_AxiomaticF1LOG_instance_(PyTypeObject *type, PyObject *arg);
          static int t_AxiomaticF1LOG_init_(t_AxiomaticF1LOG *self, PyObject *args, PyObject *kwds);
          static PyObject *t_AxiomaticF1LOG_toString(t_AxiomaticF1LOG *self, PyObject *args);

          static PyMethodDef t_AxiomaticF1LOG__methods_[] = {
            DECLARE_METHOD(t_AxiomaticF1LOG, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_AxiomaticF1LOG, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_AxiomaticF1LOG, toString, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          static PyType_Slot PY_TYPE_SLOTS(AxiomaticF1LOG)[] = {
            { Py_tp_methods, t_AxiomaticF1LOG__methods_ },
            { Py_tp_init, (void *) t_AxiomaticF1LOG_init_ },
            { 0, NULL }
          };

          static PyType_Def *PY_TYPE_BASES(AxiomaticF1LOG)[] = {
            &PY_TYPE_DEF(::org::apache::lucene::search::similarities::Axiomatic),
            NULL
          };

          DEFINE_TYPE(AxiomaticF1LOG, t_AxiomaticF1LOG, AxiomaticF1LOG);

          void t_AxiomaticF1LOG::install(PyObject *module)
          {
            installType(&PY_TYPE(AxiomaticF1LOG), &PY_TYPE_DEF(AxiomaticF1LOG), module, "AxiomaticF1LOG", 0);
          }

          void t_AxiomaticF1LOG::initialize(PyObject *module)
          {
            PyObject_SetAttrString((PyObject *) PY_TYPE(AxiomaticF1LOG), "class_", make_descriptor(AxiomaticF1LOG::initializeClass, 1));
            PyObject_SetAttrString((PyObject *) PY_TYPE(AxiomaticF1LOG), "wrapfn_", make_descriptor(t_AxiomaticF1LOG::wrap_jobject));
            PyObject_SetAttrString((PyObject *) PY_TYPE(AxiomaticF1LOG), "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_AxiomaticF1LOG_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, AxiomaticF1LOG::initializeClass, 1)))
              return NULL;
            return t_AxiomaticF1LOG::wrap_Object(AxiomaticF1LOG(((t_AxiomaticF1LOG *) arg)->object.this$));
          }
          static PyObject *t_AxiomaticF1LOG_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, AxiomaticF1LOG::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_AxiomaticF1LOG_init_(t_AxiomaticF1LOG *self, PyObject *args, PyObject *kwds)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 0:
              {
                AxiomaticF1LOG object((jobject) NULL);

                INT_CALL(object = AxiomaticF1LOG());
                self->object = object;
                break;
              }
             case 1:
              {
                jfloat a0;
                AxiomaticF1LOG object((jobject) NULL);

                if (!parseArgs(args, "F", &a0))
                {
                  INT_CALL(object = AxiomaticF1LOG(a0));
                  self->object = object;
                  break;
                }
              }
             default:
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_AxiomaticF1LOG_toString(t_AxiomaticF1LOG *self, PyObject *args)
          {
            ::java::lang::String result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.toString());
              return j2p(result);
            }

            return callSuper(PY_TYPE(AxiomaticF1LOG), (PyObject *) self, "toString", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/fr/FrenchMinimalStemmer.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace fr {

          ::java::lang::Class *FrenchMinimalStemmer::class$ = NULL;
          jmethodID *FrenchMinimalStemmer::mids$ = NULL;
          bool FrenchMinimalStemmer::live$ = false;

          jclass FrenchMinimalStemmer::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/fr/FrenchMinimalStemmer");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_f2cc1bce94666404] = env->getMethodID(cls, "<init>", "()V");
              mids$[mid_stem_d4655f2a19359017] = env->getMethodID(cls, "stem", "([CI)I");

              class$ = new ::java::lang::Class(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          FrenchMinimalStemmer::FrenchMinimalStemmer() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_f2cc1bce94666404)) {}

          jint FrenchMinimalStemmer::stem(const JArray< jchar > & a0, jint a1) const
          {
            return env->callIntMethod(this$, mids$[mid_stem_d4655f2a19359017], a0.this$, a1);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace fr {
          static PyObject *t_FrenchMinimalStemmer_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_FrenchMinimalStemmer_instance_(PyTypeObject *type, PyObject *arg);
          static int t_FrenchMinimalStemmer_init_(t_FrenchMinimalStemmer *self, PyObject *args, PyObject *kwds);
          static PyObject *t_FrenchMinimalStemmer_stem(t_FrenchMinimalStemmer *self, PyObject *args);

          static PyMethodDef t_FrenchMinimalStemmer__methods_[] = {
            DECLARE_METHOD(t_FrenchMinimalStemmer, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_FrenchMinimalStemmer, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_FrenchMinimalStemmer, stem, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          static PyType_Slot PY_TYPE_SLOTS(FrenchMinimalStemmer)[] = {
            { Py_tp_methods, t_FrenchMinimalStemmer__methods_ },
            { Py_tp_init, (void *) t_FrenchMinimalStemmer_init_ },
            { 0, NULL }
          };

          static PyType_Def *PY_TYPE_BASES(FrenchMinimalStemmer)[] = {
            &PY_TYPE_DEF(::java::lang::Object),
            NULL
          };

          DEFINE_TYPE(FrenchMinimalStemmer, t_FrenchMinimalStemmer, FrenchMinimalStemmer);

          void t_FrenchMinimalStemmer::install(PyObject *module)
          {
            installType(&PY_TYPE(FrenchMinimalStemmer), &PY_TYPE_DEF(FrenchMinimalStemmer), module, "FrenchMinimalStemmer", 0);
          }

          void t_FrenchMinimalStemmer::initialize(PyObject *module)
          {
            PyObject_SetAttrString((PyObject *) PY_TYPE(FrenchMinimalStemmer), "class_", make_descriptor(FrenchMinimalStemmer::initializeClass, 1));
            PyObject_SetAttrString((PyObject *) PY_TYPE(FrenchMinimalStemmer), "wrapfn_", make_descriptor(t_FrenchMinimalStemmer::wrap_jobject));
            PyObject_SetAttrString((PyObject *) PY_TYPE(FrenchMinimalStemmer), "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_FrenchMinimalStemmer_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, FrenchMinimalStemmer::initializeClass, 1)))
              return NULL;
            return t_FrenchMinimalStemmer::wrap_Object(FrenchMinimalStemmer(((t_FrenchMinimalStemmer *) arg)->object.this$));
          }
          static PyObject *t_FrenchMinimalStemmer_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, FrenchMinimalStemmer::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_FrenchMinimalStemmer_init_(t_FrenchMinimalStemmer *self, PyObject *args, PyObject *kwds)
          {
            FrenchMinimalStemmer object((jobject) NULL);

            INT_CALL(object = FrenchMinimalStemmer());
            self->object = object;

            return 0;
          }

          static PyObject *t_FrenchMinimalStemmer_stem(t_FrenchMinimalStemmer *self, PyObject *args)
          {
            JArray< jchar > a0((jobject) NULL);
            jint a1;
            jint result;

            if (!parseArgs(args, "[CI", &a0, &a1))
            {
              OBJ_CALL(result = self->object.stem(a0, a1));
              return PyLong_FromLong((long) result);
            }

            PyErr_SetArgsError((PyObject *) self, "stem", args);
            return NULL;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queryparser/flexible/standard/nodes/SynonymQueryNode.h"
#include "java/util/List.h"
#include "org/apache/lucene/queryparser/flexible/core/nodes/QueryNode.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace standard {
            namespace nodes {

              ::java::lang::Class *SynonymQueryNode::class$ = NULL;
              jmethodID *SynonymQueryNode::mids$ = NULL;
              bool SynonymQueryNode::live$ = false;

              jclass SynonymQueryNode::initializeClass(bool getOnly)
              {
                if (getOnly)
                  return (jclass) (live$ ? class$->this$ : NULL);
                if (class$ == NULL)
                {
                  jclass cls = (jclass) env->findClass("org/apache/lucene/queryparser/flexible/standard/nodes/SynonymQueryNode");

                  mids$ = new jmethodID[max_mid];
                  mids$[mid_init$_d03990be0130160d] = env->getMethodID(cls, "<init>", "(Ljava/util/List;)V");

                  class$ = new ::java::lang::Class(cls);
                  live$ = true;
                }
                return (jclass) class$->this$;
              }

              SynonymQueryNode::SynonymQueryNode(const ::java::util::List & a0) : ::org::apache::lucene::queryparser::flexible::core::nodes::BooleanQueryNode(env->newObject(initializeClass, &mids$, mid_init$_d03990be0130160d, a0.this$)) {}
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace standard {
            namespace nodes {
              static PyObject *t_SynonymQueryNode_cast_(PyTypeObject *type, PyObject *arg);
              static PyObject *t_SynonymQueryNode_instance_(PyTypeObject *type, PyObject *arg);
              static int t_SynonymQueryNode_init_(t_SynonymQueryNode *self, PyObject *args, PyObject *kwds);

              static PyMethodDef t_SynonymQueryNode__methods_[] = {
                DECLARE_METHOD(t_SynonymQueryNode, cast_, METH_O | METH_CLASS),
                DECLARE_METHOD(t_SynonymQueryNode, instance_, METH_O | METH_CLASS),
                { NULL, NULL, 0, NULL }
              };

              static PyType_Slot PY_TYPE_SLOTS(SynonymQueryNode)[] = {
                { Py_tp_methods, t_SynonymQueryNode__methods_ },
                { Py_tp_init, (void *) t_SynonymQueryNode_init_ },
                { 0, NULL }
              };

              static PyType_Def *PY_TYPE_BASES(SynonymQueryNode)[] = {
                &PY_TYPE_DEF(::org::apache::lucene::queryparser::flexible::core::nodes::BooleanQueryNode),
                NULL
              };

              DEFINE_TYPE(SynonymQueryNode, t_SynonymQueryNode, SynonymQueryNode);

              void t_SynonymQueryNode::install(PyObject *module)
              {
                installType(&PY_TYPE(SynonymQueryNode), &PY_TYPE_DEF(SynonymQueryNode), module, "SynonymQueryNode", 0);
              }

              void t_SynonymQueryNode::initialize(PyObject *module)
              {
                PyObject_SetAttrString((PyObject *) PY_TYPE(SynonymQueryNode), "class_", make_descriptor(SynonymQueryNode::initializeClass, 1));
                PyObject_SetAttrString((PyObject *) PY_TYPE(SynonymQueryNode), "wrapfn_", make_descriptor(t_SynonymQueryNode::wrap_jobject));
                PyObject_SetAttrString((PyObject *) PY_TYPE(SynonymQueryNode), "boxfn_", make_descriptor(boxObject));
              }

              static PyObject *t_SynonymQueryNode_cast_(PyTypeObject *type, PyObject *arg)
              {
                if (!(arg = castCheck(arg, SynonymQueryNode::initializeClass, 1)))
                  return NULL;
                return t_SynonymQueryNode::wrap_Object(SynonymQueryNode(((t_SynonymQueryNode *) arg)->object.this$));
              }
              static PyObject *t_SynonymQueryNode_instance_(PyTypeObject *type, PyObject *arg)
              {
                if (!castCheck(arg, SynonymQueryNode::initializeClass, 0))
                  Py_RETURN_FALSE;
                Py_RETURN_TRUE;
              }

              static int t_SynonymQueryNode_init_(t_SynonymQueryNode *self, PyObject *args, PyObject *kwds)
              {
                ::java::util::List a0((jobject) NULL);
                PyTypeObject **p0;
                SynonymQueryNode object((jobject) NULL);

                if (!parseArgs(args, "K", ::java::util::List::initializeClass, &a0, &p0, ::java::util::t_List::parameters_))
                {
                  INT_CALL(object = SynonymQueryNode(a0));
                  self->object = object;
                }
                else
                {
                  PyErr_SetArgsError((PyObject *) self, "__init__", args);
                  return -1;
                }

                return 0;
              }
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queryparser/flexible/standard/processors/WildcardQueryNodeProcessor.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace standard {
            namespace processors {

              ::java::lang::Class *WildcardQueryNodeProcessor::class$ = NULL;
              jmethodID *WildcardQueryNodeProcessor::mids$ = NULL;
              bool WildcardQueryNodeProcessor::live$ = false;

              jclass WildcardQueryNodeProcessor::initializeClass(bool getOnly)
              {
                if (getOnly)
                  return (jclass) (live$ ? class$->this$ : NULL);
                if (class$ == NULL)
                {
                  jclass cls = (jclass) env->findClass("org/apache/lucene/queryparser/flexible/standard/processors/WildcardQueryNodeProcessor");

                  mids$ = new jmethodID[max_mid];
                  mids$[mid_init$_f2cc1bce94666404] = env->getMethodID(cls, "<init>", "()V");
                  mids$[mid_preProcessNode_9b07be8595532de7] = env->getMethodID(cls, "preProcessNode", "(Lorg/apache/lucene/queryparser/flexible/core/nodes/QueryNode;)Lorg/apache/lucene/queryparser/flexible/core/nodes/QueryNode;");
                  mids$[mid_postProcessNode_9b07be8595532de7] = env->getMethodID(cls, "postProcessNode", "(Lorg/apache/lucene/queryparser/flexible/core/nodes/QueryNode;)Lorg/apache/lucene/queryparser/flexible/core/nodes/QueryNode;");
                  mids$[mid_setChildrenOrder_e420eeaadf0bcd20] = env->getMethodID(cls, "setChildrenOrder", "(Ljava/util/List;)Ljava/util/List;");

                  class$ = new ::java::lang::Class(cls);
                  live$ = true;
                }
                return (jclass) class$->this$;
              }

              WildcardQueryNodeProcessor::WildcardQueryNodeProcessor() : ::org::apache::lucene::queryparser::flexible::core::processors::QueryNodeProcessorImpl(env->newObject(initializeClass, &mids$, mid_init$_f2cc1bce94666404)) {}
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace standard {
            namespace processors {
              static PyObject *t_WildcardQueryNodeProcessor_cast_(PyTypeObject *type, PyObject *arg);
              static PyObject *t_WildcardQueryNodeProcessor_instance_(PyTypeObject *type, PyObject *arg);
              static int t_WildcardQueryNodeProcessor_init_(t_WildcardQueryNodeProcessor *self, PyObject *args, PyObject *kwds);

              static PyMethodDef t_WildcardQueryNodeProcessor__methods_[] = {
                DECLARE_METHOD(t_WildcardQueryNodeProcessor, cast_, METH_O | METH_CLASS),
                DECLARE_METHOD(t_WildcardQueryNodeProcessor, instance_, METH_O | METH_CLASS),
                { NULL, NULL, 0, NULL }
              };

              static PyType_Slot PY_TYPE_SLOTS(WildcardQueryNodeProcessor)[] = {
                { Py_tp_methods, t_WildcardQueryNodeProcessor__methods_ },
                { Py_tp_init, (void *) t_WildcardQueryNodeProcessor_init_ },
                { 0, NULL }
              };

              static PyType_Def *PY_TYPE_BASES(WildcardQueryNodeProcessor)[] = {
                &PY_TYPE_DEF(::org::apache::lucene::queryparser::flexible::core::processors::QueryNodeProcessorImpl),
                NULL
              };

              DEFINE_TYPE(WildcardQueryNodeProcessor, t_WildcardQueryNodeProcessor, WildcardQueryNodeProcessor);

              void t_WildcardQueryNodeProcessor::install(PyObject *module)
              {
                installType(&PY_TYPE(WildcardQueryNodeProcessor), &PY_TYPE_DEF(WildcardQueryNodeProcessor), module, "WildcardQueryNodeProcessor", 0);
              }

              void t_WildcardQueryNodeProcessor::initialize(PyObject *module)
              {
                PyObject_SetAttrString((PyObject *) PY_TYPE(WildcardQueryNodeProcessor), "class_", make_descriptor(WildcardQueryNodeProcessor::initializeClass, 1));
                PyObject_SetAttrString((PyObject *) PY_TYPE(WildcardQueryNodeProcessor), "wrapfn_", make_descriptor(t_WildcardQueryNodeProcessor::wrap_jobject));
                PyObject_SetAttrString((PyObject *) PY_TYPE(WildcardQueryNodeProcessor), "boxfn_", make_descriptor(boxObject));
              }

              static PyObject *t_WildcardQueryNodeProcessor_cast_(PyTypeObject *type, PyObject *arg)
              {
                if (!(arg = castCheck(arg, WildcardQueryNodeProcessor::initializeClass, 1)))
                  return NULL;
                return t_WildcardQueryNodeProcessor::wrap_Object(WildcardQueryNodeProcessor(((t_WildcardQueryNodeProcessor *) arg)->object.this$));
              }
              static PyObject *t_WildcardQueryNodeProcessor_instance_(PyTypeObject *type, PyObject *arg)
              {
                if (!castCheck(arg, WildcardQueryNodeProcessor::initializeClass, 0))
                  Py_RETURN_FALSE;
                Py_RETURN_TRUE;
              }

              static int t_WildcardQueryNodeProcessor_init_(t_WildcardQueryNodeProcessor *self, PyObject *args, PyObject *kwds)
              {
                WildcardQueryNodeProcessor object((jobject) NULL);

                INT_CALL(object = WildcardQueryNodeProcessor());
                self->object = object;

                return 0;
              }
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/util/BytesRefArray$IndexedBytesRefIterator.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {

        ::java::lang::Class *BytesRefArray$IndexedBytesRefIterator::class$ = NULL;
        jmethodID *BytesRefArray$IndexedBytesRefIterator::mids$ = NULL;
        bool BytesRefArray$IndexedBytesRefIterator::live$ = false;

        jclass BytesRefArray$IndexedBytesRefIterator::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/util/BytesRefArray$IndexedBytesRefIterator");

            mids$ = new jmethodID[max_mid];
            mids$[mid_ord_9972fcc56b44e79d] = env->getMethodID(cls, "ord", "()I");

            class$ = new ::java::lang::Class(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        jint BytesRefArray$IndexedBytesRefIterator::ord() const
        {
          return env->callIntMethod(this$, mids$[mid_ord_9972fcc56b44e79d]);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        static PyObject *t_BytesRefArray$IndexedBytesRefIterator_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_BytesRefArray$IndexedBytesRefIterator_instance_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_BytesRefArray$IndexedBytesRefIterator_ord(t_BytesRefArray$IndexedBytesRefIterator *self);

        static PyMethodDef t_BytesRefArray$IndexedBytesRefIterator__methods_[] = {
          DECLARE_METHOD(t_BytesRefArray$IndexedBytesRefIterator, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_BytesRefArray$IndexedBytesRefIterator, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_BytesRefArray$IndexedBytesRefIterator, ord, METH_NOARGS),
          { NULL, NULL, 0, NULL }
        };

        static PyType_Slot PY_TYPE_SLOTS(BytesRefArray$IndexedBytesRefIterator)[] = {
          { Py_tp_methods, t_BytesRefArray$IndexedBytesRefIterator__methods_ },
          { Py_tp_init, (void *) abstract_init },
          { 0, NULL }
        };

        static PyType_Def *PY_TYPE_BASES(BytesRefArray$IndexedBytesRefIterator)[] = {
          &PY_TYPE_DEF(::org::apache::lucene::util::BytesRefIterator),
          NULL
        };

        DEFINE_TYPE(BytesRefArray$IndexedBytesRefIterator, t_BytesRefArray$IndexedBytesRefIterator, BytesRefArray$IndexedBytesRefIterator);

        void t_BytesRefArray$IndexedBytesRefIterator::install(PyObject *module)
        {
          installType(&PY_TYPE(BytesRefArray$IndexedBytesRefIterator), &PY_TYPE_DEF(BytesRefArray$IndexedBytesRefIterator), module, "BytesRefArray$IndexedBytesRefIterator", 0);
        }

        void t_BytesRefArray$IndexedBytesRefIterator::initialize(PyObject *module)
        {
          PyObject_SetAttrString((PyObject *) PY_TYPE(BytesRefArray$IndexedBytesRefIterator), "class_", make_descriptor(BytesRefArray$IndexedBytesRefIterator::initializeClass, 1));
          PyObject_SetAttrString((PyObject *) PY_TYPE(BytesRefArray$IndexedBytesRefIterator), "wrapfn_", make_descriptor(t_BytesRefArray$IndexedBytesRefIterator::wrap_jobject));
          PyObject_SetAttrString((PyObject *) PY_TYPE(BytesRefArray$IndexedBytesRefIterator), "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_BytesRefArray$IndexedBytesRefIterator_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, BytesRefArray$IndexedBytesRefIterator::initializeClass, 1)))
            return NULL;
          return t_BytesRefArray$IndexedBytesRefIterator::wrap_Object(BytesRefArray$IndexedBytesRefIterator(((t_BytesRefArray$IndexedBytesRefIterator *) arg)->object.this$));
        }
        static PyObject *t_BytesRefArray$IndexedBytesRefIterator_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, BytesRefArray$IndexedBytesRefIterator::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static PyObject *t_BytesRefArray$IndexedBytesRefIterator_ord(t_BytesRefArray$IndexedBytesRefIterator *self)
        {
          jint result;
          OBJ_CALL(result = self->object.ord());
          return PyLong_FromLong((long) result);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/index/DocValuesType.h"
#include "java/lang/String.h"
#include "org/apache/lucene/index/DocValuesType.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {

        ::java::lang::Class *DocValuesType::class$ = NULL;
        jmethodID *DocValuesType::mids$ = NULL;
        bool DocValuesType::live$ = false;
        DocValuesType *DocValuesType::BINARY = NULL;
        DocValuesType *DocValuesType::NONE = NULL;
        DocValuesType *DocValuesType::NUMERIC = NULL;
        DocValuesType *DocValuesType::SORTED = NULL;
        DocValuesType *DocValuesType::SORTED_NUMERIC = NULL;
        DocValuesType *DocValuesType::SORTED_SET = NULL;

        jclass DocValuesType::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/index/DocValuesType");

            mids$ = new jmethodID[max_mid];
            mids$[mid_valueOf_d990a73d022b8e2b] = env->getStaticMethodID(cls, "valueOf", "(Ljava/lang/String;)Lorg/apache/lucene/index/DocValuesType;");
            mids$[mid_values_6eb2dcb5e864479c] = env->getStaticMethodID(cls, "values", "()[Lorg/apache/lucene/index/DocValuesType;");

            class$ = new ::java::lang::Class(cls);
            cls = (jclass) class$->this$;

            BINARY = new DocValuesType(env->getStaticObjectField(cls, "BINARY", "Lorg/apache/lucene/index/DocValuesType;"));
            NONE = new DocValuesType(env->getStaticObjectField(cls, "NONE", "Lorg/apache/lucene/index/DocValuesType;"));
            NUMERIC = new DocValuesType(env->getStaticObjectField(cls, "NUMERIC", "Lorg/apache/lucene/index/DocValuesType;"));
            SORTED = new DocValuesType(env->getStaticObjectField(cls, "SORTED", "Lorg/apache/lucene/index/DocValuesType;"));
            SORTED_NUMERIC = new DocValuesType(env->getStaticObjectField(cls, "SORTED_NUMERIC", "Lorg/apache/lucene/index/DocValuesType;"));
            SORTED_SET = new DocValuesType(env->getStaticObjectField(cls, "SORTED_SET", "Lorg/apache/lucene/index/DocValuesType;"));
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        DocValuesType DocValuesType::valueOf(const ::java::lang::String & a0)
        {
          jclass cls = env->getClass(initializeClass);
          return DocValuesType(env->callStaticObjectMethod(cls, mids$[mid_valueOf_d990a73d022b8e2b], a0.this$));
        }

        JArray< DocValuesType > DocValuesType::values()
        {
          jclass cls = env->getClass(initializeClass);
          return JArray< DocValuesType >(env->callStaticObjectMethod(cls, mids$[mid_values_6eb2dcb5e864479c]));
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {
        static PyObject *t_DocValuesType_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_DocValuesType_instance_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_DocValuesType_of_(t_DocValuesType *self, PyObject *args);
        static PyObject *t_DocValuesType_valueOf(PyTypeObject *type, PyObject *args);
        static PyObject *t_DocValuesType_values(PyTypeObject *type);
        static PyObject *t_DocValuesType_get__parameters_(t_DocValuesType *self, void *data);
        static PyGetSetDef t_DocValuesType__fields_[] = {
          DECLARE_GET_FIELD(t_DocValuesType, parameters_),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_DocValuesType__methods_[] = {
          DECLARE_METHOD(t_DocValuesType, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_DocValuesType, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_DocValuesType, of_, METH_VARARGS),
          DECLARE_METHOD(t_DocValuesType, valueOf, METH_VARARGS | METH_CLASS),
          DECLARE_METHOD(t_DocValuesType, values, METH_NOARGS | METH_CLASS),
          { NULL, NULL, 0, NULL }
        };

        static PyType_Slot PY_TYPE_SLOTS(DocValuesType)[] = {
          { Py_tp_methods, t_DocValuesType__methods_ },
          { Py_tp_init, (void *) abstract_init },
          { Py_tp_getset, t_DocValuesType__fields_ },
          { 0, NULL }
        };

        static PyType_Def *PY_TYPE_BASES(DocValuesType)[] = {
          &PY_TYPE_DEF(::java::lang::Enum),
          NULL
        };

        DEFINE_TYPE(DocValuesType, t_DocValuesType, DocValuesType);
        PyObject *t_DocValuesType::wrap_Object(const DocValuesType& object, PyTypeObject *p0)
        {
          PyObject *obj = t_DocValuesType::wrap_Object(object);
          if (obj != NULL && obj != Py_None)
          {
            t_DocValuesType *self = (t_DocValuesType *) obj;
            self->parameters[0] = p0;
          }
          return obj;
        }

        PyObject *t_DocValuesType::wrap_jobject(const jobject& object, PyTypeObject *p0)
        {
          PyObject *obj = t_DocValuesType::wrap_jobject(object);
          if (obj != NULL && obj != Py_None)
          {
            t_DocValuesType *self = (t_DocValuesType *) obj;
            self->parameters[0] = p0;
          }
          return obj;
        }

        void t_DocValuesType::install(PyObject *module)
        {
          installType(&PY_TYPE(DocValuesType), &PY_TYPE_DEF(DocValuesType), module, "DocValuesType", 0);
        }

        void t_DocValuesType::initialize(PyObject *module)
        {
          PyObject_SetAttrString((PyObject *) PY_TYPE(DocValuesType), "class_", make_descriptor(DocValuesType::initializeClass, 1));
          PyObject_SetAttrString((PyObject *) PY_TYPE(DocValuesType), "wrapfn_", make_descriptor(t_DocValuesType::wrap_jobject));
          PyObject_SetAttrString((PyObject *) PY_TYPE(DocValuesType), "boxfn_", make_descriptor(boxObject));
          env->getClass(DocValuesType::initializeClass);
          PyObject_SetAttrString((PyObject *) PY_TYPE(DocValuesType), "BINARY", make_descriptor(t_DocValuesType::wrap_Object(*DocValuesType::BINARY)));
          PyObject_SetAttrString((PyObject *) PY_TYPE(DocValuesType), "NONE", make_descriptor(t_DocValuesType::wrap_Object(*DocValuesType::NONE)));
          PyObject_SetAttrString((PyObject *) PY_TYPE(DocValuesType), "NUMERIC", make_descriptor(t_DocValuesType::wrap_Object(*DocValuesType::NUMERIC)));
          PyObject_SetAttrString((PyObject *) PY_TYPE(DocValuesType), "SORTED", make_descriptor(t_DocValuesType::wrap_Object(*DocValuesType::SORTED)));
          PyObject_SetAttrString((PyObject *) PY_TYPE(DocValuesType), "SORTED_NUMERIC", make_descriptor(t_DocValuesType::wrap_Object(*DocValuesType::SORTED_NUMERIC)));
          PyObject_SetAttrString((PyObject *) PY_TYPE(DocValuesType), "SORTED_SET", make_descriptor(t_DocValuesType::wrap_Object(*DocValuesType::SORTED_SET)));
        }

        static PyObject *t_DocValuesType_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, DocValuesType::initializeClass, 1)))
            return NULL;
          return t_DocValuesType::wrap_Object(DocValuesType(((t_DocValuesType *) arg)->object.this$));
        }
        static PyObject *t_DocValuesType_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, DocValuesType::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static PyObject *t_DocValuesType_of_(t_DocValuesType *self, PyObject *args)
        {
          if (!parseArg(args, "T", 1, &(self->parameters)))
            Py_RETURN_SELF;
          return PyErr_SetArgsError((PyObject *) self, "of_", args);
        }

        static PyObject *t_DocValuesType_valueOf(PyTypeObject *type, PyObject *args)
        {
          ::java::lang::String a0((jobject) NULL);
          DocValuesType result((jobject) NULL);

          if (!parseArgs(args, "s", &a0))
          {
            OBJ_CALL(result = ::org::apache::lucene::index::DocValuesType::valueOf(a0));
            return t_DocValuesType::wrap_Object(result);
          }

          return callSuper(type, "valueOf", args, 2);
        }

        static PyObject *t_DocValuesType_values(PyTypeObject *type)
        {
          JArray< DocValuesType > result((jobject) NULL);
          OBJ_CALL(result = ::org::apache::lucene::index::DocValuesType::values());
          return JArray<jobject>(result.this$).wrap(t_DocValuesType::wrap_jobject);
        }
        static PyObject *t_DocValuesType_get__parameters_(t_DocValuesType *self, void *data)
        {
          return typeParameters(self->parameters, sizeof(self->parameters));
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/spell/SpellChecker.h"
#include "org/apache/lucene/search/spell/SuggestWord.h"
#include "org/apache/lucene/index/IndexReader.h"
#include "java/util/Comparator.h"
#include "org/apache/lucene/search/spell/SuggestMode.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/store/Directory.h"
#include "java/io/Closeable.h"
#include "org/apache/lucene/index/IndexWriterConfig.h"
#include "org/apache/lucene/search/spell/StringDistance.h"
#include "java/lang/String.h"
#include "org/apache/lucene/search/spell/Dictionary.h"
#include "java/io/IOException.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace spell {

          ::java::lang::Class *SpellChecker::class$ = NULL;
          jmethodID *SpellChecker::mids$ = NULL;
          bool SpellChecker::live$ = false;
          jfloat SpellChecker::DEFAULT_ACCURACY = (jfloat) 0;
          ::java::lang::String *SpellChecker::F_WORD = NULL;

          jclass SpellChecker::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/search/spell/SpellChecker");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_c51fd9fb1cf0392d] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/store/Directory;)V");
              mids$[mid_init$_8c2a08c751951193] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/store/Directory;Lorg/apache/lucene/search/spell/StringDistance;)V");
              mids$[mid_init$_177b7a316167e81d] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/store/Directory;Lorg/apache/lucene/search/spell/StringDistance;Ljava/util/Comparator;)V");
              mids$[mid_clearIndex_f2cc1bce94666404] = env->getMethodID(cls, "clearIndex", "()V");
              mids$[mid_close_f2cc1bce94666404] = env->getMethodID(cls, "close", "()V");
              mids$[mid_exist_145b2d0af0c06b93] = env->getMethodID(cls, "exist", "(Ljava/lang/String;)Z");
              mids$[mid_getAccuracy_58aec2b64dff50c8] = env->getMethodID(cls, "getAccuracy", "()F");
              mids$[mid_getComparator_beb0414e0ec1de00] = env->getMethodID(cls, "getComparator", "()Ljava/util/Comparator;");
              mids$[mid_getStringDistance_2012a1536a00ef81] = env->getMethodID(cls, "getStringDistance", "()Lorg/apache/lucene/search/spell/StringDistance;");
              mids$[mid_indexDictionary_6ccbc29818d74b60] = env->getMethodID(cls, "indexDictionary", "(Lorg/apache/lucene/search/spell/Dictionary;Lorg/apache/lucene/index/IndexWriterConfig;Z)V");
              mids$[mid_setAccuracy_8e1d952dd65cdc3a] = env->getMethodID(cls, "setAccuracy", "(F)V");
              mids$[mid_setComparator_4703504c5d45d50f] = env->getMethodID(cls, "setComparator", "(Ljava/util/Comparator;)V");
              mids$[mid_setSpellIndex_c51fd9fb1cf0392d] = env->getMethodID(cls, "setSpellIndex", "(Lorg/apache/lucene/store/Directory;)V");
              mids$[mid_setStringDistance_96537eb7f43eebe7] = env->getMethodID(cls, "setStringDistance", "(Lorg/apache/lucene/search/spell/StringDistance;)V");
              mids$[mid_suggestSimilar_5ba731fecfe18cb8] = env->getMethodID(cls, "suggestSimilar", "(Ljava/lang/String;I)[Ljava/lang/String;");
              mids$[mid_suggestSimilar_a2929ffd888e3abb] = env->getMethodID(cls, "suggestSimilar", "(Ljava/lang/String;IF)[Ljava/lang/String;");
              mids$[mid_suggestSimilar_8d9000e391e6186e] = env->getMethodID(cls, "suggestSimilar", "(Ljava/lang/String;ILorg/apache/lucene/index/IndexReader;Ljava/lang/String;Lorg/apache/lucene/search/spell/SuggestMode;)[Ljava/lang/String;");
              mids$[mid_suggestSimilar_3ce1f307517de4e4] = env->getMethodID(cls, "suggestSimilar", "(Ljava/lang/String;ILorg/apache/lucene/index/IndexReader;Ljava/lang/String;Lorg/apache/lucene/search/spell/SuggestMode;F)[Ljava/lang/String;");

              class$ = new ::java::lang::Class(cls);
              cls = (jclass) class$->this$;

              DEFAULT_ACCURACY = env->getStaticFloatField(cls, "DEFAULT_ACCURACY");
              F_WORD = new ::java::lang::String(env->getStaticObjectField(cls, "F_WORD", "Ljava/lang/String;"));
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          SpellChecker::SpellChecker(const ::org::apache::lucene::store::Directory & a0) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_c51fd9fb1cf0392d, a0.this$)) {}

          SpellChecker::SpellChecker(const ::org::apache::lucene::store::Directory & a0, const ::org::apache::lucene::search::spell::StringDistance & a1) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_8c2a08c751951193, a0.this$, a1.this$)) {}

          SpellChecker::SpellChecker(const ::org::apache::lucene::store::Directory & a0, const ::org::apache::lucene::search::spell::StringDistance & a1, const ::java::util::Comparator & a2) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_177b7a316167e81d, a0.this$, a1.this$, a2.this$)) {}

          void SpellChecker::clearIndex() const
          {
            env->callVoidMethod(this$, mids$[mid_clearIndex_f2cc1bce94666404]);
          }

          void SpellChecker::close() const
          {
            env->callVoidMethod(this$, mids$[mid_close_f2cc1bce94666404]);
          }

          jboolean SpellChecker::exist(const ::java::lang::String & a0) const
          {
            return env->callBooleanMethod(this$, mids$[mid_exist_145b2d0af0c06b93], a0.this$);
          }

          jfloat SpellChecker::getAccuracy() const
          {
            return env->callFloatMethod(this$, mids$[mid_getAccuracy_58aec2b64dff50c8]);
          }

          ::java::util::Comparator SpellChecker::getComparator() const
          {
            return ::java::util::Comparator(env->callObjectMethod(this$, mids$[mid_getComparator_beb0414e0ec1de00]));
          }

          ::org::apache::lucene::search::spell::StringDistance SpellChecker::getStringDistance() const
          {
            return ::org::apache::lucene::search::spell::StringDistance(env->callObjectMethod(this$, mids$[mid_getStringDistance_2012a1536a00ef81]));
          }

          void SpellChecker::indexDictionary(const ::org::apache::lucene::search::spell::Dictionary & a0, const ::org::apache::lucene::index::IndexWriterConfig & a1, jboolean a2) const
          {
            env->callVoidMethod(this$, mids$[mid_indexDictionary_6ccbc29818d74b60], a0.this$, a1.this$, a2);
          }

          void SpellChecker::setAccuracy(jfloat a0) const
          {
            env->callVoidMethod(this$, mids$[mid_setAccuracy_8e1d952dd65cdc3a], a0);
          }

          void SpellChecker::setComparator(const ::java::util::Comparator & a0) const
          {
            env->callVoidMethod(this$, mids$[mid_setComparator_4703504c5d45d50f], a0.this$);
          }

          void SpellChecker::setSpellIndex(const ::org::apache::lucene::store::Directory & a0) const
          {
            env->callVoidMethod(this$, mids$[mid_setSpellIndex_c51fd9fb1cf0392d], a0.this$);
          }

          void SpellChecker::setStringDistance(const ::org::apache::lucene::search::spell::StringDistance & a0) const
          {
            env->callVoidMethod(this$, mids$[mid_setStringDistance_96537eb7f43eebe7], a0.this$);
          }

          JArray< ::java::lang::String > SpellChecker::suggestSimilar(const ::java::lang::String & a0, jint a1) const
          {
            return JArray< ::java::lang::String >(env->callObjectMethod(this$, mids$[mid_suggestSimilar_5ba731fecfe18cb8], a0.this$, a1));
          }

          JArray< ::java::lang::String > SpellChecker::suggestSimilar(const ::java::lang::String & a0, jint a1, jfloat a2) const
          {
            return JArray< ::java::lang::String >(env->callObjectMethod(this$, mids$[mid_suggestSimilar_a2929ffd888e3abb], a0.this$, a1, a2));
          }

          JArray< ::java::lang::String > SpellChecker::suggestSimilar(const ::java::lang::String & a0, jint a1, const ::org::apache::lucene::index::IndexReader & a2, const ::java::lang::String & a3, const ::org::apache::lucene::search::spell::SuggestMode & a4) const
          {
            return JArray< ::java::lang::String >(env->callObjectMethod(this$, mids$[mid_suggestSimilar_8d9000e391e6186e], a0.this$, a1, a2.this$, a3.this$, a4.this$));
          }

          JArray< ::java::lang::String > SpellChecker::suggestSimilar(const ::java::lang::String & a0, jint a1, const ::org::apache::lucene::index::IndexReader & a2, const ::java::lang::String & a3, const ::org::apache::lucene::search::spell::SuggestMode & a4, jfloat a5) const
          {
            return JArray< ::java::lang::String >(env->callObjectMethod(this$, mids$[mid_suggestSimilar_3ce1f307517de4e4], a0.this$, a1, a2.this$, a3.this$, a4.this$, a5));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace spell {
          static PyObject *t_SpellChecker_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_SpellChecker_instance_(PyTypeObject *type, PyObject *arg);
          static int t_SpellChecker_init_(t_SpellChecker *self, PyObject *args, PyObject *kwds);
          static PyObject *t_SpellChecker_clearIndex(t_SpellChecker *self);
          static PyObject *t_SpellChecker_close(t_SpellChecker *self);
          static PyObject *t_SpellChecker_exist(t_SpellChecker *self, PyObject *arg);
          static PyObject *t_SpellChecker_getAccuracy(t_SpellChecker *self);
          static PyObject *t_SpellChecker_getComparator(t_SpellChecker *self);
          static PyObject *t_SpellChecker_getStringDistance(t_SpellChecker *self);
          static PyObject *t_SpellChecker_indexDictionary(t_SpellChecker *self, PyObject *args);
          static PyObject *t_SpellChecker_setAccuracy(t_SpellChecker *self, PyObject *arg);
          static PyObject *t_SpellChecker_setComparator(t_SpellChecker *self, PyObject *arg);
          static PyObject *t_SpellChecker_setSpellIndex(t_SpellChecker *self, PyObject *arg);
          static PyObject *t_SpellChecker_setStringDistance(t_SpellChecker *self, PyObject *arg);
          static PyObject *t_SpellChecker_suggestSimilar(t_SpellChecker *self, PyObject *args);
          static PyObject *t_SpellChecker_get__accuracy(t_SpellChecker *self, void *data);
          static int t_SpellChecker_set__accuracy(t_SpellChecker *self, PyObject *arg, void *data);
          static PyObject *t_SpellChecker_get__comparator(t_SpellChecker *self, void *data);
          static int t_SpellChecker_set__comparator(t_SpellChecker *self, PyObject *arg, void *data);
          static int t_SpellChecker_set__spellIndex(t_SpellChecker *self, PyObject *arg, void *data);
          static PyObject *t_SpellChecker_get__stringDistance(t_SpellChecker *self, void *data);
          static int t_SpellChecker_set__stringDistance(t_SpellChecker *self, PyObject *arg, void *data);
          static PyGetSetDef t_SpellChecker__fields_[] = {
            DECLARE_GETSET_FIELD(t_SpellChecker, accuracy),
            DECLARE_GETSET_FIELD(t_SpellChecker, comparator),
            DECLARE_SET_FIELD(t_SpellChecker, spellIndex),
            DECLARE_GETSET_FIELD(t_SpellChecker, stringDistance),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_SpellChecker__methods_[] = {
            DECLARE_METHOD(t_SpellChecker, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_SpellChecker, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_SpellChecker, clearIndex, METH_NOARGS),
            DECLARE_METHOD(t_SpellChecker, close, METH_NOARGS),
            DECLARE_METHOD(t_SpellChecker, exist, METH_O),
            DECLARE_METHOD(t_SpellChecker, getAccuracy, METH_NOARGS),
            DECLARE_METHOD(t_SpellChecker, getComparator, METH_NOARGS),
            DECLARE_METHOD(t_SpellChecker, getStringDistance, METH_NOARGS),
            DECLARE_METHOD(t_SpellChecker, indexDictionary, METH_VARARGS),
            DECLARE_METHOD(t_SpellChecker, setAccuracy, METH_O),
            DECLARE_METHOD(t_SpellChecker, setComparator, METH_O),
            DECLARE_METHOD(t_SpellChecker, setSpellIndex, METH_O),
            DECLARE_METHOD(t_SpellChecker, setStringDistance, METH_O),
            DECLARE_METHOD(t_SpellChecker, suggestSimilar, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          static PyType_Slot PY_TYPE_SLOTS(SpellChecker)[] = {
            { Py_tp_methods, t_SpellChecker__methods_ },
            { Py_tp_init, (void *) t_SpellChecker_init_ },
            { Py_tp_getset, t_SpellChecker__fields_ },
            { 0, NULL }
          };

          static PyType_Def *PY_TYPE_BASES(SpellChecker)[] = {
            &PY_TYPE_DEF(::java::lang::Object),
            NULL
          };

          DEFINE_TYPE(SpellChecker, t_SpellChecker, SpellChecker);

          void t_SpellChecker::install(PyObject *module)
          {
            installType(&PY_TYPE(SpellChecker), &PY_TYPE_DEF(SpellChecker), module, "SpellChecker", 0);
          }

          void t_SpellChecker::initialize(PyObject *module)
          {
            PyObject_SetAttrString((PyObject *) PY_TYPE(SpellChecker), "class_", make_descriptor(SpellChecker::initializeClass, 1));
            PyObject_SetAttrString((PyObject *) PY_TYPE(SpellChecker), "wrapfn_", make_descriptor(t_SpellChecker::wrap_jobject));
            PyObject_SetAttrString((PyObject *) PY_TYPE(SpellChecker), "boxfn_", make_descriptor(boxObject));
            env->getClass(SpellChecker::initializeClass);
            PyObject_SetAttrString((PyObject *) PY_TYPE(SpellChecker), "DEFAULT_ACCURACY", make_descriptor(SpellChecker::DEFAULT_ACCURACY));
            PyObject_SetAttrString((PyObject *) PY_TYPE(SpellChecker), "F_WORD", make_descriptor(j2p(*SpellChecker::F_WORD)));
          }

          static PyObject *t_SpellChecker_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, SpellChecker::initializeClass, 1)))
              return NULL;
            return t_SpellChecker::wrap_Object(SpellChecker(((t_SpellChecker *) arg)->object.this$));
          }
          static PyObject *t_SpellChecker_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, SpellChecker::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_SpellChecker_init_(t_SpellChecker *self, PyObject *args, PyObject *kwds)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 1:
              {
                ::org::apache::lucene::store::Directory a0((jobject) NULL);
                SpellChecker object((jobject) NULL);

                if (!parseArgs(args, "k", ::org::apache::lucene::store::Directory::initializeClass, &a0))
                {
                  INT_CALL(object = SpellChecker(a0));
                  self->object = object;
                  break;
                }
              }
              goto err;
             case 2:
              {
                ::org::apache::lucene::store::Directory a0((jobject) NULL);
                ::org::apache::lucene::search::spell::StringDistance a1((jobject) NULL);
                SpellChecker object((jobject) NULL);

                if (!parseArgs(args, "kk", ::org::apache::lucene::store::Directory::initializeClass, ::org::apache::lucene::search::spell::StringDistance::initializeClass, &a0, &a1))
                {
                  INT_CALL(object = SpellChecker(a0, a1));
                  self->object = object;
                  break;
                }
              }
              goto err;
             case 3:
              {
                ::org::apache::lucene::store::Directory a0((jobject) NULL);
                ::org::apache::lucene::search::spell::StringDistance a1((jobject) NULL);
                ::java::util::Comparator a2((jobject) NULL);
                PyTypeObject **p2;
                SpellChecker object((jobject) NULL);

                if (!parseArgs(args, "kkK", ::org::apache::lucene::store::Directory::initializeClass, ::org::apache::lucene::search::spell::StringDistance::initializeClass, ::java::util::Comparator::initializeClass, &a0, &a1, &a2, &p2, ::java::util::t_Comparator::parameters_))
                {
                  INT_CALL(object = SpellChecker(a0, a1, a2));
                  self->object = object;
                  break;
                }
              }
             default:
             err:
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_SpellChecker_clearIndex(t_SpellChecker *self)
          {
            OBJ_CALL(self->object.clearIndex());
            Py_RETURN_NONE;
          }

          static PyObject *t_SpellChecker_close(t_SpellChecker *self)
          {
            OBJ_CALL(self->object.close());
            Py_RETURN_NONE;
          }

          static PyObject *t_SpellChecker_exist(t_SpellChecker *self, PyObject *arg)
          {
            ::java::lang::String a0((jobject) NULL);
            jboolean result;

            if (!parseArg(arg, "s", &a0))
            {
              OBJ_CALL(result = self->object.exist(a0));
              Py_RETURN_BOOL(result);
            }

            PyErr_SetArgsError((PyObject *) self, "exist", arg);
            return NULL;
          }

          static PyObject *t_SpellChecker_getAccuracy(t_SpellChecker *self)
          {
            jfloat result;
            OBJ_CALL(result = self->object.getAccuracy());
            return PyFloat_FromDouble((double) result);
          }

          static PyObject *t_SpellChecker_getComparator(t_SpellChecker *self)
          {
            ::java::util::Comparator result((jobject) NULL);
            OBJ_CALL(result = self->object.getComparator());
            return ::java::util::t_Comparator::wrap_Object(result, ::org::apache::lucene::search::spell::PY_TYPE(SuggestWord));
          }

          static PyObject *t_SpellChecker_getStringDistance(t_SpellChecker *self)
          {
            ::org::apache::lucene::search::spell::StringDistance result((jobject) NULL);
            OBJ_CALL(result = self->object.getStringDistance());
            return ::org::apache::lucene::search::spell::t_StringDistance::wrap_Object(result);
          }

          static PyObject *t_SpellChecker_indexDictionary(t_SpellChecker *self, PyObject *args)
          {
            ::org::apache::lucene::search::spell::Dictionary a0((jobject) NULL);
            ::org::apache::lucene::index::IndexWriterConfig a1((jobject) NULL);
            jboolean a2;

            if (!parseArgs(args, "kkZ", ::org::apache::lucene::search::spell::Dictionary::initializeClass, ::org::apache::lucene::index::IndexWriterConfig::initializeClass, &a0, &a1, &a2))
            {
              OBJ_CALL(self->object.indexDictionary(a0, a1, a2));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError((PyObject *) self, "indexDictionary", args);
            return NULL;
          }

          static PyObject *t_SpellChecker_setAccuracy(t_SpellChecker *self, PyObject *arg)
          {
            jfloat a0;

            if (!parseArg(arg, "F", &a0))
            {
              OBJ_CALL(self->object.setAccuracy(a0));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError((PyObject *) self, "setAccuracy", arg);
            return NULL;
          }

          static PyObject *t_SpellChecker_setComparator(t_SpellChecker *self, PyObject *arg)
          {
            ::java::util::Comparator a0((jobject) NULL);
            PyTypeObject **p0;

            if (!parseArg(arg, "K", ::java::util::Comparator::initializeClass, &a0, &p0, ::java::util::t_Comparator::parameters_))
            {
              OBJ_CALL(self->object.setComparator(a0));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError((PyObject *) self, "setComparator", arg);
            return NULL;
          }

          static PyObject *t_SpellChecker_setSpellIndex(t_SpellChecker *self, PyObject *arg)
          {
            ::org::apache::lucene::store::Directory a0((jobject) NULL);

            if (!parseArg(arg, "k", ::org::apache::lucene::store::Directory::initializeClass, &a0))
            {
              OBJ_CALL(self->object.setSpellIndex(a0));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError((PyObject *) self, "setSpellIndex", arg);
            return NULL;
          }

          static PyObject *t_SpellChecker_setStringDistance(t_SpellChecker *self, PyObject *arg)
          {
            ::org::apache::lucene::search::spell::StringDistance a0((jobject) NULL);

            if (!parseArg(arg, "k", ::org::apache::lucene::search::spell::StringDistance::initializeClass, &a0))
            {
              OBJ_CALL(self->object.setStringDistance(a0));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError((PyObject *) self, "setStringDistance", arg);
            return NULL;
          }

          static PyObject *t_SpellChecker_suggestSimilar(t_SpellChecker *self, PyObject *args)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 2:
              {
                ::java::lang::String a0((jobject) NULL);
                jint a1;
                JArray< ::java::lang::String > result((jobject) NULL);

                if (!parseArgs(args, "sI", &a0, &a1))
                {
                  OBJ_CALL(result = self->object.suggestSimilar(a0, a1));
                  return JArray<jstring>(result.this$).wrap();
                }
              }
              break;
             case 3:
              {
                ::java::lang::String a0((jobject) NULL);
                jint a1;
                jfloat a2;
                JArray< ::java::lang::String > result((jobject) NULL);

                if (!parseArgs(args, "sIF", &a0, &a1, &a2))
                {
                  OBJ_CALL(result = self->object.suggestSimilar(a0, a1, a2));
                  return JArray<jstring>(result.this$).wrap();
                }
              }
              break;
             case 5:
              {
                ::java::lang::String a0((jobject) NULL);
                jint a1;
                ::org::apache::lucene::index::IndexReader a2((jobject) NULL);
                ::java::lang::String a3((jobject) NULL);
                ::org::apache::lucene::search::spell::SuggestMode a4((jobject) NULL);
                PyTypeObject **p4;
                JArray< ::java::lang::String > result((jobject) NULL);

                if (!parseArgs(args, "sIksK", ::org::apache::lucene::index::IndexReader::initializeClass, ::org::apache::lucene::search::spell::SuggestMode::initializeClass, &a0, &a1, &a2, &a3, &a4, &p4, ::org::apache::lucene::search::spell::t_SuggestMode::parameters_))
                {
                  OBJ_CALL(result = self->object.suggestSimilar(a0, a1, a2, a3, a4));
                  return JArray<jstring>(result.this$).wrap();
                }
              }
              break;
             case 6:
              {
                ::java::lang::String a0((jobject) NULL);
                jint a1;
                ::org::apache::lucene::index::IndexReader a2((jobject) NULL);
                ::java::lang::String a3((jobject) NULL);
                ::org::apache::lucene::search::spell::SuggestMode a4((jobject) NULL);
                PyTypeObject **p4;
                jfloat a5;
                JArray< ::java::lang::String > result((jobject) NULL);

                if (!parseArgs(args, "sIksKF", ::org::apache::lucene::index::IndexReader::initializeClass, ::org::apache::lucene::search::spell::SuggestMode::initializeClass, &a0, &a1, &a2, &a3, &a4, &p4, ::org::apache::lucene::search::spell::t_SuggestMode::parameters_, &a5))
                {
                  OBJ_CALL(result = self->object.suggestSimilar(a0, a1, a2, a3, a4, a5));
                  return JArray<jstring>(result.this$).wrap();
                }
              }
            }

            PyErr_SetArgsError((PyObject *) self, "suggestSimilar", args);
            return NULL;
          }

          static PyObject *t_SpellChecker_get__accuracy(t_SpellChecker *self, void *data)
          {
            jfloat value;
            OBJ_CALL(value = self->object.getAccuracy());
            return PyFloat_FromDouble((double) value);
          }
          static int t_SpellChecker_set__accuracy(t_SpellChecker *self, PyObject *arg, void *data)
          {
            {
              jfloat value;
              if (!parseArg(arg, "F", &value))
              {
                INT_CALL(self->object.setAccuracy(value));
                return 0;
              }
            }
            PyErr_SetArgsError((PyObject *) self, "accuracy", arg);
            return -1;
          }

          static PyObject *t_SpellChecker_get__comparator(t_SpellChecker *self, void *data)
          {
            ::java::util::Comparator value((jobject) NULL);
            OBJ_CALL(value = self->object.getComparator());
            return ::java::util::t_Comparator::wrap_Object(value);
          }
          static int t_SpellChecker_set__comparator(t_SpellChecker *self, PyObject *arg, void *data)
          {
            {
              ::java::util::Comparator value((jobject) NULL);
              if (!parseArg(arg, "k", ::java::util::Comparator::initializeClass, &value))
              {
                INT_CALL(self->object.setComparator(value));
                return 0;
              }
            }
            PyErr_SetArgsError((PyObject *) self, "comparator", arg);
            return -1;
          }

          static int t_SpellChecker_set__spellIndex(t_SpellChecker *self, PyObject *arg, void *data)
          {
            {
              ::org::apache::lucene::store::Directory value((jobject) NULL);
              if (!parseArg(arg, "k", ::org::apache::lucene::store::Directory::initializeClass, &value))
              {
                INT_CALL(self->object.setSpellIndex(value));
                return 0;
              }
            }
            PyErr_SetArgsError((PyObject *) self, "spellIndex", arg);
            return -1;
          }

          static PyObject *t_SpellChecker_get__stringDistance(t_SpellChecker *self, void *data)
          {
            ::org::apache::lucene::search::spell::StringDistance value((jobject) NULL);
            OBJ_CALL(value = self->object.getStringDistance());
            return ::org::apache::lucene::search::spell::t_StringDistance::wrap_Object(value);
          }
          static int t_SpellChecker_set__stringDistance(t_SpellChecker *self, PyObject *arg, void *data)
          {
            {
              ::org::apache::lucene::search::spell::StringDistance value((jobject) NULL);
              if (!parseArg(arg, "k", ::org::apache::lucene::search::spell::StringDistance::initializeClass, &value))
              {
                INT_CALL(self->object.setStringDistance(value));
                return 0;
              }
            }
            PyErr_SetArgsError((PyObject *) self, "stringDistance", arg);
            return -1;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/index/CheckIndex.h"
#include "org/apache/lucene/index/CodecReader.h"
#include "org/apache/lucene/store/Lock.h"
#include "java/lang/String.h"
#include "org/apache/lucene/index/CheckIndex$Status$TermVectorStatus.h"
#include "java/lang/Class.h"
#include "java/io/PrintStream.h"
#include "org/apache/lucene/index/CheckIndex$Status$IndexSortStatus.h"
#include "org/apache/lucene/index/CheckIndex$Status.h"
#include "org/apache/lucene/index/CheckIndex$Options.h"
#include "org/apache/lucene/search/Sort.h"
#include "org/apache/lucene/index/CheckIndex$Status$TermIndexStatus.h"
#include "java/util/List.h"
#include "org/apache/lucene/index/CheckIndex$Status$FieldNormStatus.h"
#include "java/lang/InterruptedException.h"
#include "org/apache/lucene/index/CheckIndex$Status$DocValuesStatus.h"
#include "org/apache/lucene/index/CheckIndex$Status$FieldInfoStatus.h"
#include "org/apache/lucene/index/CheckIndex$Status$PointsStatus.h"
#include "org/apache/lucene/index/CheckIndex$Status$StoredFieldStatus.h"
#include "org/apache/lucene/store/Directory.h"
#include "java/io/Closeable.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/index/CheckIndex$Status$LiveDocStatus.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {

        ::java::lang::Class *CheckIndex::class$ = NULL;
        jmethodID *CheckIndex::mids$ = NULL;
        bool CheckIndex::live$ = false;

        jclass CheckIndex::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/index/CheckIndex");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_c51fd9fb1cf0392d] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/store/Directory;)V");
            mids$[mid_init$_79d7a2fc1d47b5f2] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/store/Directory;Lorg/apache/lucene/store/Lock;)V");
            mids$[mid_assertsOn_8454bd5aa23fd11e] = env->getStaticMethodID(cls, "assertsOn", "()Z");
            mids$[mid_checkIndex_edce15eafe031069] = env->getMethodID(cls, "checkIndex", "()Lorg/apache/lucene/index/CheckIndex$Status;");
            mids$[mid_checkIndex_451c481213097fa8] = env->getMethodID(cls, "checkIndex", "(Ljava/util/List;)Lorg/apache/lucene/index/CheckIndex$Status;");
            mids$[mid_close_f2cc1bce94666404] = env->getMethodID(cls, "close", "()V");
            mids$[mid_doCheck_acbf5774feec2c83] = env->getMethodID(cls, "doCheck", "(Lorg/apache/lucene/index/CheckIndex$Options;)I");
            mids$[mid_doSlowChecks_8454bd5aa23fd11e] = env->getMethodID(cls, "doSlowChecks", "()Z");
            mids$[mid_exorciseIndex_910cd3fc76add463] = env->getMethodID(cls, "exorciseIndex", "(Lorg/apache/lucene/index/CheckIndex$Status;)V");
            mids$[mid_getChecksumsOnly_8454bd5aa23fd11e] = env->getMethodID(cls, "getChecksumsOnly", "()Z");
            mids$[mid_getFailFast_8454bd5aa23fd11e] = env->getMethodID(cls, "getFailFast", "()Z");
            mids$[mid_main_2fc318b999a7aba3] = env->getStaticMethodID(cls, "main", "([Ljava/lang/String;)V");
            mids$[mid_parseOptions_7336ac587a7d10ea] = env->getStaticMethodID(cls, "parseOptions", "([Ljava/lang/String;)Lorg/apache/lucene/index/CheckIndex$Options;");
            mids$[mid_setChecksumsOnly_9d72768e8fdce2b7] = env->getMethodID(cls, "setChecksumsOnly", "(Z)V");
            mids$[mid_setDoSlowChecks_9d72768e8fdce2b7] = env->getMethodID(cls, "setDoSlowChecks", "(Z)V");
            mids$[mid_setFailFast_9d72768e8fdce2b7] = env->getMethodID(cls, "setFailFast", "(Z)V");
            mids$[mid_setInfoStream_51d7bcb97eea24e3] = env->getMethodID(cls, "setInfoStream", "(Ljava/io/PrintStream;)V");
            mids$[mid_setInfoStream_e912f9b165d7d4ea] = env->getMethodID(cls, "setInfoStream", "(Ljava/io/PrintStream;Z)V");
            mids$[mid_testDocValues_564756a64495bf41] = env->getStaticMethodID(cls, "testDocValues", "(Lorg/apache/lucene/index/CodecReader;Ljava/io/PrintStream;Z)Lorg/apache/lucene/index/CheckIndex$Status$DocValuesStatus;");
            mids$[mid_testFieldInfos_1b0c793235d994c3] = env->getStaticMethodID(cls, "testFieldInfos", "(Lorg/apache/lucene/index/CodecReader;Ljava/io/PrintStream;Z)Lorg/apache/lucene/index/CheckIndex$Status$FieldInfoStatus;");
            mids$[mid_testFieldNorms_d7cc9f44e48eafcb] = env->getStaticMethodID(cls, "testFieldNorms", "(Lorg/apache/lucene/index/CodecReader;Ljava/io/PrintStream;Z)Lorg/apache/lucene/index/CheckIndex$Status$FieldNormStatus;");
            mids$[mid_testLiveDocs_75d452bf036e9277] = env->getStaticMethodID(cls, "testLiveDocs", "(Lorg/apache/lucene/index/CodecReader;Ljava/io/PrintStream;Z)Lorg/apache/lucene/index/CheckIndex$Status$LiveDocStatus;");
            mids$[mid_testPoints_eabf892e502903a9] = env->getStaticMethodID(cls, "testPoints", "(Lorg/apache/lucene/index/CodecReader;Ljava/io/PrintStream;Z)Lorg/apache/lucene/index/CheckIndex$Status$PointsStatus;");
            mids$[mid_testPostings_d8a12926df9f9cf8] = env->getStaticMethodID(cls, "testPostings", "(Lorg/apache/lucene/index/CodecReader;Ljava/io/PrintStream;)Lorg/apache/lucene/index/CheckIndex$Status$TermIndexStatus;");
            mids$[mid_testPostings_9eb2a6bf39823159] = env->getStaticMethodID(cls, "testPostings", "(Lorg/apache/lucene/index/CodecReader;Ljava/io/PrintStream;ZZZ)Lorg/apache/lucene/index/CheckIndex$Status$TermIndexStatus;");
            mids$[mid_testSort_18439b76d3011751] = env->getStaticMethodID(cls, "testSort", "(Lorg/apache/lucene/index/CodecReader;Lorg/apache/lucene/search/Sort;Ljava/io/PrintStream;Z)Lorg/apache/lucene/index/CheckIndex$Status$IndexSortStatus;");
            mids$[mid_testStoredFields_86256ec535b4c3c7] = env->getStaticMethodID(cls, "testStoredFields", "(Lorg/apache/lucene/index/CodecReader;Ljava/io/PrintStream;Z)Lorg/apache/lucene/index/CheckIndex$Status$StoredFieldStatus;");
            mids$[mid_testTermVectors_dcb71f51d8fb33d0] = env->getStaticMethodID(cls, "testTermVectors", "(Lorg/apache/lucene/index/CodecReader;Ljava/io/PrintStream;)Lorg/apache/lucene/index/CheckIndex$Status$TermVectorStatus;");
            mids$[mid_testTermVectors_b0b190dc18cfcf3b] = env->getStaticMethodID(cls, "testTermVectors", "(Lorg/apache/lucene/index/CodecReader;Ljava/io/PrintStream;ZZZ)Lorg/apache/lucene/index/CheckIndex$Status$TermVectorStatus;");

            class$ = new ::java::lang::Class(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        CheckIndex::CheckIndex(const ::org::apache::lucene::store::Directory & a0) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_c51fd9fb1cf0392d, a0.this$)) {}

        CheckIndex::CheckIndex(const ::org::apache::lucene::store::Directory & a0, const ::org::apache::lucene::store::Lock & a1) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_79d7a2fc1d47b5f2, a0.this$, a1.this$)) {}

        jboolean CheckIndex::assertsOn()
        {
          jclass cls = env->getClass(initializeClass);
          return env->callStaticBooleanMethod(cls, mids$[mid_assertsOn_8454bd5aa23fd11e]);
        }

        ::org::apache::lucene::index::CheckIndex$Status CheckIndex::checkIndex() const
        {
          return ::org::apache::lucene::index::CheckIndex$Status(env->callObjectMethod(this$, mids$[mid_checkIndex_edce15eafe031069]));
        }

        ::org::apache::lucene::index::CheckIndex$Status CheckIndex::checkIndex(const ::java::util::List & a0) const
        {
          return ::org::apache::lucene::index::CheckIndex$Status(env->callObjectMethod(this$, mids$[mid_checkIndex_451c481213097fa8], a0.this$));
        }

        void CheckIndex::close() const
        {
          env->callVoidMethod(this$, mids$[mid_close_f2cc1bce94666404]);
        }

        jint CheckIndex::doCheck(const ::org::apache::lucene::index::CheckIndex$Options & a0) const
        {
          return env->callIntMethod(this$, mids$[mid_doCheck_acbf5774feec2c83], a0.this$);
        }

        jboolean CheckIndex::doSlowChecks() const
        {
          return env->callBooleanMethod(this$, mids$[mid_doSlowChecks_8454bd5aa23fd11e]);
        }

        void CheckIndex::exorciseIndex(const ::org::apache::lucene::index::CheckIndex$Status & a0) const
        {
          env->callVoidMethod(this$, mids$[mid_exorciseIndex_910cd3fc76add463], a0.this$);
        }

        jboolean CheckIndex::getChecksumsOnly() const
        {
          return env->callBooleanMethod(this$, mids$[mid_getChecksumsOnly_8454bd5aa23fd11e]);
        }

        jboolean CheckIndex::getFailFast() const
        {
          return env->callBooleanMethod(this$, mids$[mid_getFailFast_8454bd5aa23fd11e]);
        }

        void CheckIndex::main(const JArray< ::java::lang::String > & a0)
        {
          jclass cls = env->getClass(initializeClass);
          env->callStaticVoidMethod(cls, mids$[mid_main_2fc318b999a7aba3], a0.this$);
        }

        ::org::apache::lucene::index::CheckIndex$Options CheckIndex::parseOptions(const JArray< ::java::lang::String > & a0)
        {
          jclass cls = env->getClass(initializeClass);
          return ::org::apache::lucene::index::CheckIndex$Options(env->callStaticObjectMethod(cls, mids$[mid_parseOptions_7336ac587a7d10ea], a0.this$));
        }

        void CheckIndex::setChecksumsOnly(jboolean a0) const
        {
          env->callVoidMethod(this$, mids$[mid_setChecksumsOnly_9d72768e8fdce2b7], a0);
        }

        void CheckIndex::setDoSlowChecks(jboolean a0) const
        {
          env->callVoidMethod(this$, mids$[mid_setDoSlowChecks_9d72768e8fdce2b7], a0);
        }

        void CheckIndex::setFailFast(jboolean a0) const
        {
          env->callVoidMethod(this$, mids$[mid_setFailFast_9d72768e8fdce2b7], a0);
        }

        void CheckIndex::setInfoStream(const ::java::io::PrintStream & a0) const
        {
          env->callVoidMethod(this$, mids$[mid_setInfoStream_51d7bcb97eea24e3], a0.this$);
        }

        void CheckIndex::setInfoStream(const ::java::io::PrintStream & a0, jboolean a1) const
        {
          env->callVoidMethod(this$, mids$[mid_setInfoStream_e912f9b165d7d4ea], a0.this$, a1);
        }

        ::org::apache::lucene::index::CheckIndex$Status$DocValuesStatus CheckIndex::testDocValues(const ::org::apache::lucene::index::CodecReader & a0, const ::java::io::PrintStream & a1, jboolean a2)
        {
          jclass cls = env->getClass(initializeClass);
          return ::org::apache::lucene::index::CheckIndex$Status$DocValuesStatus(env->callStaticObjectMethod(cls, mids$[mid_testDocValues_564756a64495bf41], a0.this$, a1.this$, a2));
        }

        ::org::apache::lucene::index::CheckIndex$Status$FieldInfoStatus CheckIndex::testFieldInfos(const ::org::apache::lucene::index::CodecReader & a0, const ::java::io::PrintStream & a1, jboolean a2)
        {
          jclass cls = env->getClass(initializeClass);
          return ::org::apache::lucene::index::CheckIndex$Status$FieldInfoStatus(env->callStaticObjectMethod(cls, mids$[mid_testFieldInfos_1b0c793235d994c3], a0.this$, a1.this$, a2));
        }

        ::org::apache::lucene::index::CheckIndex$Status$FieldNormStatus CheckIndex::testFieldNorms(const ::org::apache::lucene::index::CodecReader & a0, const ::java::io::PrintStream & a1, jboolean a2)
        {
          jclass cls = env->getClass(initializeClass);
          return ::org::apache::lucene::index::CheckIndex$Status$FieldNormStatus(env->callStaticObjectMethod(cls, mids$[mid_testFieldNorms_d7cc9f44e48eafcb], a0.this$, a1.this$, a2));
        }

        ::org::apache::lucene::index::CheckIndex$Status$LiveDocStatus CheckIndex::testLiveDocs(const ::org::apache::lucene::index::CodecReader & a0, const ::java::io::PrintStream & a1, jboolean a2)
        {
          jclass cls = env->getClass(initializeClass);
          return ::org::apache::lucene::index::CheckIndex$Status$LiveDocStatus(env->callStaticObjectMethod(cls, mids$[mid_testLiveDocs_75d452bf036e9277], a0.this$, a1.this$, a2));
        }

        ::org::apache::lucene::index::CheckIndex$Status$PointsStatus CheckIndex::testPoints(const ::org::apache::lucene::index::CodecReader & a0, const ::java::io::PrintStream & a1, jboolean a2)
        {
          jclass cls = env->getClass(initializeClass);
          return ::org::apache::lucene::index::CheckIndex$Status$PointsStatus(env->callStaticObjectMethod(cls, mids$[mid_testPoints_eabf892e502903a9], a0.this$, a1.this$, a2));
        }

        ::org::apache::lucene::index::CheckIndex$Status$TermIndexStatus CheckIndex::testPostings(const ::org::apache::lucene::index::CodecReader & a0, const ::java::io::PrintStream & a1)
        {
          jclass cls = env->getClass(initializeClass);
          return ::org::apache::lucene::index::CheckIndex$Status$TermIndexStatus(env->callStaticObjectMethod(cls, mids$[mid_testPostings_d8a12926df9f9cf8], a0.this$, a1.this$));
        }

        ::org::apache::lucene::index::CheckIndex$Status$TermIndexStatus CheckIndex::testPostings(const ::org::apache::lucene::index::CodecReader & a0, const ::java::io::PrintStream & a1, jboolean a2, jboolean a3, jboolean a4)
        {
          jclass cls = env->getClass(initializeClass);
          return ::org::apache::lucene::index::CheckIndex$Status$TermIndexStatus(env->callStaticObjectMethod(cls, mids$[mid_testPostings_9eb2a6bf39823159], a0.this$, a1.this$, a2, a3, a4));
        }

        ::org::apache::lucene::index::CheckIndex$Status$IndexSortStatus CheckIndex::testSort(const ::org::apache::lucene::index::CodecReader & a0, const ::org::apache::lucene::search::Sort & a1, const ::java::io::PrintStream & a2, jboolean a3)
        {
          jclass cls = env->getClass(initializeClass);
          return ::org::apache::lucene::index::CheckIndex$Status$IndexSortStatus(env->callStaticObjectMethod(cls, mids$[mid_testSort_18439b76d3011751], a0.this$, a1.this$, a2.this$, a3));
        }

        ::org::apache::lucene::index::CheckIndex$Status$StoredFieldStatus CheckIndex::testStoredFields(const ::org::apache::lucene::index::CodecReader & a0, const ::java::io::PrintStream & a1, jboolean a2)
        {
          jclass cls = env->getClass(initializeClass);
          return ::org::apache::lucene::index::CheckIndex$Status$StoredFieldStatus(env->callStaticObjectMethod(cls, mids$[mid_testStoredFields_86256ec535b4c3c7], a0.this$, a1.this$, a2));
        }

        ::org::apache::lucene::index::CheckIndex$Status$TermVectorStatus CheckIndex::testTermVectors(const ::org::apache::lucene::index::CodecReader & a0, const ::java::io::PrintStream & a1)
        {
          jclass cls = env->getClass(initializeClass);
          return ::org::apache::lucene::index::CheckIndex$Status$TermVectorStatus(env->callStaticObjectMethod(cls, mids$[mid_testTermVectors_dcb71f51d8fb33d0], a0.this$, a1.this$));
        }

        ::org::apache::lucene::index::CheckIndex$Status$TermVectorStatus CheckIndex::testTermVectors(const ::org::apache::lucene::index::CodecReader & a0, const ::java::io::PrintStream & a1, jboolean a2, jboolean a3, jboolean a4)
        {
          jclass cls = env->getClass(initializeClass);
          return ::org::apache::lucene::index::CheckIndex$Status$TermVectorStatus(env->callStaticObjectMethod(cls, mids$[mid_testTermVectors_b0b190dc18cfcf3b], a0.this$, a1.this$, a2, a3, a4));
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"
#include "org/apache/lucene/index/CheckIndex$VerifyPointsVisitor.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {
        static PyObject *t_CheckIndex_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_CheckIndex_instance_(PyTypeObject *type, PyObject *arg);
        static int t_CheckIndex_init_(t_CheckIndex *self, PyObject *args, PyObject *kwds);
        static PyObject *t_CheckIndex_assertsOn(PyTypeObject *type);
        static PyObject *t_CheckIndex_checkIndex(t_CheckIndex *self, PyObject *args);
        static PyObject *t_CheckIndex_close(t_CheckIndex *self);
        static PyObject *t_CheckIndex_doCheck(t_CheckIndex *self, PyObject *arg);
        static PyObject *t_CheckIndex_doSlowChecks(t_CheckIndex *self);
        static PyObject *t_CheckIndex_exorciseIndex(t_CheckIndex *self, PyObject *arg);
        static PyObject *t_CheckIndex_getChecksumsOnly(t_CheckIndex *self);
        static PyObject *t_CheckIndex_getFailFast(t_CheckIndex *self);
        static PyObject *t_CheckIndex_main(PyTypeObject *type, PyObject *arg);
        static PyObject *t_CheckIndex_parseOptions(PyTypeObject *type, PyObject *arg);
        static PyObject *t_CheckIndex_setChecksumsOnly(t_CheckIndex *self, PyObject *arg);
        static PyObject *t_CheckIndex_setDoSlowChecks(t_CheckIndex *self, PyObject *arg);
        static PyObject *t_CheckIndex_setFailFast(t_CheckIndex *self, PyObject *arg);
        static PyObject *t_CheckIndex_setInfoStream(t_CheckIndex *self, PyObject *args);
        static PyObject *t_CheckIndex_testDocValues(PyTypeObject *type, PyObject *args);
        static PyObject *t_CheckIndex_testFieldInfos(PyTypeObject *type, PyObject *args);
        static PyObject *t_CheckIndex_testFieldNorms(PyTypeObject *type, PyObject *args);
        static PyObject *t_CheckIndex_testLiveDocs(PyTypeObject *type, PyObject *args);
        static PyObject *t_CheckIndex_testPoints(PyTypeObject *type, PyObject *args);
        static PyObject *t_CheckIndex_testPostings(PyTypeObject *type, PyObject *args);
        static PyObject *t_CheckIndex_testSort(PyTypeObject *type, PyObject *args);
        static PyObject *t_CheckIndex_testStoredFields(PyTypeObject *type, PyObject *args);
        static PyObject *t_CheckIndex_testTermVectors(PyTypeObject *type, PyObject *args);
        static PyObject *t_CheckIndex_get__checksumsOnly(t_CheckIndex *self, void *data);
        static int t_CheckIndex_set__checksumsOnly(t_CheckIndex *self, PyObject *arg, void *data);
        static PyObject *t_CheckIndex_get__failFast(t_CheckIndex *self, void *data);
        static int t_CheckIndex_set__failFast(t_CheckIndex *self, PyObject *arg, void *data);
        static int t_CheckIndex_set__infoStream(t_CheckIndex *self, PyObject *arg, void *data);
        static PyGetSetDef t_CheckIndex__fields_[] = {
          DECLARE_GETSET_FIELD(t_CheckIndex, checksumsOnly),
          DECLARE_GETSET_FIELD(t_CheckIndex, failFast),
          DECLARE_SET_FIELD(t_CheckIndex, infoStream),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_CheckIndex__methods_[] = {
          DECLARE_METHOD(t_CheckIndex, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_CheckIndex, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_CheckIndex, assertsOn, METH_NOARGS | METH_CLASS),
          DECLARE_METHOD(t_CheckIndex, checkIndex, METH_VARARGS),
          DECLARE_METHOD(t_CheckIndex, close, METH_NOARGS),
          DECLARE_METHOD(t_CheckIndex, doCheck, METH_O),
          DECLARE_METHOD(t_CheckIndex, doSlowChecks, METH_NOARGS),
          DECLARE_METHOD(t_CheckIndex, exorciseIndex, METH_O),
          DECLARE_METHOD(t_CheckIndex, getChecksumsOnly, METH_NOARGS),
          DECLARE_METHOD(t_CheckIndex, getFailFast, METH_NOARGS),
          DECLARE_METHOD(t_CheckIndex, main, METH_O | METH_CLASS),
          DECLARE_METHOD(t_CheckIndex, parseOptions, METH_O | METH_CLASS),
          DECLARE_METHOD(t_CheckIndex, setChecksumsOnly, METH_O),
          DECLARE_METHOD(t_CheckIndex, setDoSlowChecks, METH_O),
          DECLARE_METHOD(t_CheckIndex, setFailFast, METH_O),
          DECLARE_METHOD(t_CheckIndex, setInfoStream, METH_VARARGS),
          DECLARE_METHOD(t_CheckIndex, testDocValues, METH_VARARGS | METH_CLASS),
          DECLARE_METHOD(t_CheckIndex, testFieldInfos, METH_VARARGS | METH_CLASS),
          DECLARE_METHOD(t_CheckIndex, testFieldNorms, METH_VARARGS | METH_CLASS),
          DECLARE_METHOD(t_CheckIndex, testLiveDocs, METH_VARARGS | METH_CLASS),
          DECLARE_METHOD(t_CheckIndex, testPoints, METH_VARARGS | METH_CLASS),
          DECLARE_METHOD(t_CheckIndex, testPostings, METH_VARARGS | METH_CLASS),
          DECLARE_METHOD(t_CheckIndex, testSort, METH_VARARGS | METH_CLASS),
          DECLARE_METHOD(t_CheckIndex, testStoredFields, METH_VARARGS | METH_CLASS),
          DECLARE_METHOD(t_CheckIndex, testTermVectors, METH_VARARGS | METH_CLASS),
          { NULL, NULL, 0, NULL }
        };

        static PyType_Slot PY_TYPE_SLOTS(CheckIndex)[] = {
          { Py_tp_methods, t_CheckIndex__methods_ },
          { Py_tp_init, (void *) t_CheckIndex_init_ },
          { Py_tp_getset, t_CheckIndex__fields_ },
          { 0, NULL }
        };

        static PyType_Def *PY_TYPE_BASES(CheckIndex)[] = {
          &PY_TYPE_DEF(::java::lang::Object),
          NULL
        };

        DEFINE_TYPE(CheckIndex, t_CheckIndex, CheckIndex);

        void t_CheckIndex::install(PyObject *module)
        {
          installType(&PY_TYPE(CheckIndex), &PY_TYPE_DEF(CheckIndex), module, "CheckIndex", 0);
          PyObject_SetAttrString((PyObject *) PY_TYPE(CheckIndex), "Options", make_descriptor(&PY_TYPE_DEF(CheckIndex$Options)));
          PyObject_SetAttrString((PyObject *) PY_TYPE(CheckIndex), "VerifyPointsVisitor", make_descriptor(&PY_TYPE_DEF(CheckIndex$VerifyPointsVisitor)));
          PyObject_SetAttrString((PyObject *) PY_TYPE(CheckIndex), "Status", make_descriptor(&PY_TYPE_DEF(CheckIndex$Status)));
        }

        void t_CheckIndex::initialize(PyObject *module)
        {
          PyObject_SetAttrString((PyObject *) PY_TYPE(CheckIndex), "class_", make_descriptor(CheckIndex::initializeClass, 1));
          PyObject_SetAttrString((PyObject *) PY_TYPE(CheckIndex), "wrapfn_", make_descriptor(t_CheckIndex::wrap_jobject));
          PyObject_SetAttrString((PyObject *) PY_TYPE(CheckIndex), "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_CheckIndex_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, CheckIndex::initializeClass, 1)))
            return NULL;
          return t_CheckIndex::wrap_Object(CheckIndex(((t_CheckIndex *) arg)->object.this$));
        }
        static PyObject *t_CheckIndex_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, CheckIndex::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_CheckIndex_init_(t_CheckIndex *self, PyObject *args, PyObject *kwds)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 1:
            {
              ::org::apache::lucene::store::Directory a0((jobject) NULL);
              CheckIndex object((jobject) NULL);

              if (!parseArgs(args, "k", ::org::apache::lucene::store::Directory::initializeClass, &a0))
              {
                INT_CALL(object = CheckIndex(a0));
                self->object = object;
                break;
              }
            }
            goto err;
           case 2:
            {
              ::org::apache::lucene::store::Directory a0((jobject) NULL);
              ::org::apache::lucene::store::Lock a1((jobject) NULL);
              CheckIndex object((jobject) NULL);

              if (!parseArgs(args, "kk", ::org::apache::lucene::store::Directory::initializeClass, ::org::apache::lucene::store::Lock::initializeClass, &a0, &a1))
              {
                INT_CALL(object = CheckIndex(a0, a1));
                self->object = object;
                break;
              }
            }
           default:
           err:
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }

        static PyObject *t_CheckIndex_assertsOn(PyTypeObject *type)
        {
          jboolean result;
          OBJ_CALL(result = ::org::apache::lucene::index::CheckIndex::assertsOn());
          Py_RETURN_BOOL(result);
        }

        static PyObject *t_CheckIndex_checkIndex(t_CheckIndex *self, PyObject *args)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 0:
            {
              ::org::apache::lucene::index::CheckIndex$Status result((jobject) NULL);
              OBJ_CALL(result = self->object.checkIndex());
              return ::org::apache::lucene::index::t_CheckIndex$Status::wrap_Object(result);
            }
            break;
           case 1:
            {
              ::java::util::List a0((jobject) NULL);
              PyTypeObject **p0;
              ::org::apache::lucene::index::CheckIndex$Status result((jobject) NULL);

              if (!parseArgs(args, "K", ::java::util::List::initializeClass, &a0, &p0, ::java::util::t_List::parameters_))
              {
                OBJ_CALL(result = self->object.checkIndex(a0));
                return ::org::apache::lucene::index::t_CheckIndex$Status::wrap_Object(result);
              }
            }
          }

          PyErr_SetArgsError((PyObject *) self, "checkIndex", args);
          return NULL;
        }

        static PyObject *t_CheckIndex_close(t_CheckIndex *self)
        {
          OBJ_CALL(self->object.close());
          Py_RETURN_NONE;
        }

        static PyObject *t_CheckIndex_doCheck(t_CheckIndex *self, PyObject *arg)
        {
          ::org::apache::lucene::index::CheckIndex$Options a0((jobject) NULL);
          jint result;

          if (!parseArg(arg, "k", ::org::apache::lucene::index::CheckIndex$Options::initializeClass, &a0))
          {
            OBJ_CALL(result = self->object.doCheck(a0));
            return PyLong_FromLong((long) result);
          }

          PyErr_SetArgsError((PyObject *) self, "doCheck", arg);
          return NULL;
        }

        static PyObject *t_CheckIndex_doSlowChecks(t_CheckIndex *self)
        {
          jboolean result;
          OBJ_CALL(result = self->object.doSlowChecks());
          Py_RETURN_BOOL(result);
        }

        static PyObject *t_CheckIndex_exorciseIndex(t_CheckIndex *self, PyObject *arg)
        {
          ::org::apache::lucene::index::CheckIndex$Status a0((jobject) NULL);

          if (!parseArg(arg, "k", ::org::apache::lucene::index::CheckIndex$Status::initializeClass, &a0))
          {
            OBJ_CALL(self->object.exorciseIndex(a0));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "exorciseIndex", arg);
          return NULL;
        }

        static PyObject *t_CheckIndex_getChecksumsOnly(t_CheckIndex *self)
        {
          jboolean result;
          OBJ_CALL(result = self->object.getChecksumsOnly());
          Py_RETURN_BOOL(result);
        }

        static PyObject *t_CheckIndex_getFailFast(t_CheckIndex *self)
        {
          jboolean result;
          OBJ_CALL(result = self->object.getFailFast());
          Py_RETURN_BOOL(result);
        }

        static PyObject *t_CheckIndex_main(PyTypeObject *type, PyObject *arg)
        {
          JArray< ::java::lang::String > a0((jobject) NULL);

          if (!parseArg(arg, "[s", &a0))
          {
            OBJ_CALL(::org::apache::lucene::index::CheckIndex::main(a0));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError(type, "main", arg);
          return NULL;
        }

        static PyObject *t_CheckIndex_parseOptions(PyTypeObject *type, PyObject *arg)
        {
          JArray< ::java::lang::String > a0((jobject) NULL);
          ::org::apache::lucene::index::CheckIndex$Options result((jobject) NULL);

          if (!parseArg(arg, "[s", &a0))
          {
            OBJ_CALL(result = ::org::apache::lucene::index::CheckIndex::parseOptions(a0));
            return ::org::apache::lucene::index::t_CheckIndex$Options::wrap_Object(result);
          }

          PyErr_SetArgsError(type, "parseOptions", arg);
          return NULL;
        }

        static PyObject *t_CheckIndex_setChecksumsOnly(t_CheckIndex *self, PyObject *arg)
        {
          jboolean a0;

          if (!parseArg(arg, "Z", &a0))
          {
            OBJ_CALL(self->object.setChecksumsOnly(a0));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "setChecksumsOnly", arg);
          return NULL;
        }

        static PyObject *t_CheckIndex_setDoSlowChecks(t_CheckIndex *self, PyObject *arg)
        {
          jboolean a0;

          if (!parseArg(arg, "Z", &a0))
          {
            OBJ_CALL(self->object.setDoSlowChecks(a0));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "setDoSlowChecks", arg);
          return NULL;
        }

        static PyObject *t_CheckIndex_setFailFast(t_CheckIndex *self, PyObject *arg)
        {
          jboolean a0;

          if (!parseArg(arg, "Z", &a0))
          {
            OBJ_CALL(self->object.setFailFast(a0));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "setFailFast", arg);
          return NULL;
        }

        static PyObject *t_CheckIndex_setInfoStream(t_CheckIndex *self, PyObject *args)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 1:
            {
              ::java::io::PrintStream a0((jobject) NULL);

              if (!parseArgs(args, "k", ::java::io::PrintStream::initializeClass, &a0))
              {
                OBJ_CALL(self->object.setInfoStream(a0));
                Py_RETURN_NONE;
              }
            }
            break;
           case 2:
            {
              ::java::io::PrintStream a0((jobject) NULL);
              jboolean a1;

              if (!parseArgs(args, "kZ", ::java::io::PrintStream::initializeClass, &a0, &a1))
              {
                OBJ_CALL(self->object.setInfoStream(a0, a1));
                Py_RETURN_NONE;
              }
            }
          }

          PyErr_SetArgsError((PyObject *) self, "setInfoStream", args);
          return NULL;
        }

        static PyObject *t_CheckIndex_testDocValues(PyTypeObject *type, PyObject *args)
        {
          ::org::apache::lucene::index::CodecReader a0((jobject) NULL);
          ::java::io::PrintStream a1((jobject) NULL);
          jboolean a2;
          ::org::apache::lucene::index::CheckIndex$Status$DocValuesStatus result((jobject) NULL);

          if (!parseArgs(args, "kkZ", ::org::apache::lucene::index::CodecReader::initializeClass, ::java::io::PrintStream::initializeClass, &a0, &a1, &a2))
          {
            OBJ_CALL(result = ::org::apache::lucene::index::CheckIndex::testDocValues(a0, a1, a2));
            return ::org::apache::lucene::index::t_CheckIndex$Status$DocValuesStatus::wrap_Object(result);
          }

          PyErr_SetArgsError(type, "testDocValues", args);
          return NULL;
        }

        static PyObject *t_CheckIndex_testFieldInfos(PyTypeObject *type, PyObject *args)
        {
          ::org::apache::lucene::index::CodecReader a0((jobject) NULL);
          ::java::io::PrintStream a1((jobject) NULL);
          jboolean a2;
          ::org::apache::lucene::index::CheckIndex$Status$FieldInfoStatus result((jobject) NULL);

          if (!parseArgs(args, "kkZ", ::org::apache::lucene::index::CodecReader::initializeClass, ::java::io::PrintStream::initializeClass, &a0, &a1, &a2))
          {
            OBJ_CALL(result = ::org::apache::lucene::index::CheckIndex::testFieldInfos(a0, a1, a2));
            return ::org::apache::lucene::index::t_CheckIndex$Status$FieldInfoStatus::wrap_Object(result);
          }

          PyErr_SetArgsError(type, "testFieldInfos", args);
          return NULL;
        }

        static PyObject *t_CheckIndex_testFieldNorms(PyTypeObject *type, PyObject *args)
        {
          ::org::apache::lucene::index::CodecReader a0((jobject) NULL);
          ::java::io::PrintStream a1((jobject) NULL);
          jboolean a2;
          ::org::apache::lucene::index::CheckIndex$Status$FieldNormStatus result((jobject) NULL);

          if (!parseArgs(args, "kkZ", ::org::apache::lucene::index::CodecReader::initializeClass, ::java::io::PrintStream::initializeClass, &a0, &a1, &a2))
          {
            OBJ_CALL(result = ::org::apache::lucene::index::CheckIndex::testFieldNorms(a0, a1, a2));
            return ::org::apache::lucene::index::t_CheckIndex$Status$FieldNormStatus::wrap_Object(result);
          }

          PyErr_SetArgsError(type, "testFieldNorms", args);
          return NULL;
        }

        static PyObject *t_CheckIndex_testLiveDocs(PyTypeObject *type, PyObject *args)
        {
          ::org::apache::lucene::index::CodecReader a0((jobject) NULL);
          ::java::io::PrintStream a1((jobject) NULL);
          jboolean a2;
          ::org::apache::lucene::index::CheckIndex$Status$LiveDocStatus result((jobject) NULL);

          if (!parseArgs(args, "kkZ", ::org::apache::lucene::index::CodecReader::initializeClass, ::java::io::PrintStream::initializeClass, &a0, &a1, &a2))
          {
            OBJ_CALL(result = ::org::apache::lucene::index::CheckIndex::testLiveDocs(a0, a1, a2));
            return ::org::apache::lucene::index::t_CheckIndex$Status$LiveDocStatus::wrap_Object(result);
          }

          PyErr_SetArgsError(type, "testLiveDocs", args);
          return NULL;
        }

        static PyObject *t_CheckIndex_testPoints(PyTypeObject *type, PyObject *args)
        {
          ::org::apache::lucene::index::CodecReader a0((jobject) NULL);
          ::java::io::PrintStream a1((jobject) NULL);
          jboolean a2;
          ::org::apache::lucene::index::CheckIndex$Status$PointsStatus result((jobject) NULL);

          if (!parseArgs(args, "kkZ", ::org::apache::lucene::index::CodecReader::initializeClass, ::java::io::PrintStream::initializeClass, &a0, &a1, &a2))
          {
            OBJ_CALL(result = ::org::apache::lucene::index::CheckIndex::testPoints(a0, a1, a2));
            return ::org::apache::lucene::index::t_CheckIndex$Status$PointsStatus::wrap_Object(result);
          }

          PyErr_SetArgsError(type, "testPoints", args);
          return NULL;
        }

        static PyObject *t_CheckIndex_testPostings(PyTypeObject *type, PyObject *args)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 2:
            {
              ::org::apache::lucene::index::CodecReader a0((jobject) NULL);
              ::java::io::PrintStream a1((jobject) NULL);
              ::org::apache::lucene::index::CheckIndex$Status$TermIndexStatus result((jobject) NULL);

              if (!parseArgs(args, "kk", ::org::apache::lucene::index::CodecReader::initializeClass, ::java::io::PrintStream::initializeClass, &a0, &a1))
              {
                OBJ_CALL(result = ::org::apache::lucene::index::CheckIndex::testPostings(a0, a1));
                return ::org::apache::lucene::index::t_CheckIndex$Status$TermIndexStatus::wrap_Object(result);
              }
            }
            break;
           case 5:
            {
              ::org::apache::lucene::index::CodecReader a0((jobject) NULL);
              ::java::io::PrintStream a1((jobject) NULL);
              jboolean a2;
              jboolean a3;
              jboolean a4;
              ::org::apache::lucene::index::CheckIndex$Status$TermIndexStatus result((jobject) NULL);

              if (!parseArgs(args, "kkZZZ", ::org::apache::lucene::index::CodecReader::initializeClass, ::java::io::PrintStream::initializeClass, &a0, &a1, &a2, &a3, &a4))
              {
                OBJ_CALL(result = ::org::apache::lucene::index::CheckIndex::testPostings(a0, a1, a2, a3, a4));
                return ::org::apache::lucene::index::t_CheckIndex$Status$TermIndexStatus::wrap_Object(result);
              }
            }
          }

          PyErr_SetArgsError(type, "testPostings", args);
          return NULL;
        }

        static PyObject *t_CheckIndex_testSort(PyTypeObject *type, PyObject *args)
        {
          ::org::apache::lucene::index::CodecReader a0((jobject) NULL);
          ::org::apache::lucene::search::Sort a1((jobject) NULL);
          ::java::io::PrintStream a2((jobject) NULL);
          jboolean a3;
          ::org::apache::lucene::index::CheckIndex$Status$IndexSortStatus result((jobject) NULL);

          if (!parseArgs(args, "kkkZ", ::org::apache::lucene::index::CodecReader::initializeClass, ::org::apache::lucene::search::Sort::initializeClass, ::java::io::PrintStream::initializeClass, &a0, &a1, &a2, &a3))
          {
            OBJ_CALL(result = ::org::apache::lucene::index::CheckIndex::testSort(a0, a1, a2, a3));
            return ::org::apache::lucene::index::t_CheckIndex$Status$IndexSortStatus::wrap_Object(result);
          }

          PyErr_SetArgsError(type, "testSort", args);
          return NULL;
        }

        static PyObject *t_CheckIndex_testStoredFields(PyTypeObject *type, PyObject *args)
        {
          ::org::apache::lucene::index::CodecReader a0((jobject) NULL);
          ::java::io::PrintStream a1((jobject) NULL);
          jboolean a2;
          ::org::apache::lucene::index::CheckIndex$Status$StoredFieldStatus result((jobject) NULL);

          if (!parseArgs(args, "kkZ", ::org::apache::lucene::index::CodecReader::initializeClass, ::java::io::PrintStream::initializeClass, &a0, &a1, &a2))
          {
            OBJ_CALL(result = ::org::apache::lucene::index::CheckIndex::testStoredFields(a0, a1, a2));
            return ::org::apache::lucene::index::t_CheckIndex$Status$StoredFieldStatus::wrap_Object(result);
          }

          PyErr_SetArgsError(type, "testStoredFields", args);
          return NULL;
        }

        static PyObject *t_CheckIndex_testTermVectors(PyTypeObject *type, PyObject *args)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 2:
            {
              ::org::apache::lucene::index::CodecReader a0((jobject) NULL);
              ::java::io::PrintStream a1((jobject) NULL);
              ::org::apache::lucene::index::CheckIndex$Status$TermVectorStatus result((jobject) NULL);

              if (!parseArgs(args, "kk", ::org::apache::lucene::index::CodecReader::initializeClass, ::java::io::PrintStream::initializeClass, &a0, &a1))
              {
                OBJ_CALL(result = ::org::apache::lucene::index::CheckIndex::testTermVectors(a0, a1));
                return ::org::apache::lucene::index::t_CheckIndex$Status$TermVectorStatus::wrap_Object(result);
              }
            }
            break;
           case 5:
            {
              ::org::apache::lucene::index::CodecReader a0((jobject) NULL);
              ::java::io::PrintStream a1((jobject) NULL);
              jboolean a2;
              jboolean a3;
              jboolean a4;
              ::org::apache::lucene::index::CheckIndex$Status$TermVectorStatus result((jobject) NULL);

              if (!parseArgs(args, "kkZZZ", ::org::apache::lucene::index::CodecReader::initializeClass, ::java::io::PrintStream::initializeClass, &a0, &a1, &a2, &a3, &a4))
              {
                OBJ_CALL(result = ::org::apache::lucene::index::CheckIndex::testTermVectors(a0, a1, a2, a3, a4));
                return ::org::apache::lucene::index::t_CheckIndex$Status$TermVectorStatus::wrap_Object(result);
              }
            }
          }

          PyErr_SetArgsError(type, "testTermVectors", args);
          return NULL;
        }

        static PyObject *t_CheckIndex_get__checksumsOnly(t_CheckIndex *self, void *data)
        {
          jboolean value;
          OBJ_CALL(value = self->object.getChecksumsOnly());
          Py_RETURN_BOOL(value);
        }
        static int t_CheckIndex_set__checksumsOnly(t_CheckIndex *self, PyObject *arg, void *data)
        {
          {
            jboolean value;
            if (!parseArg(arg, "Z", &value))
            {
              INT_CALL(self->object.setChecksumsOnly(value));
              return 0;
            }
          }
          PyErr_SetArgsError((PyObject *) self, "checksumsOnly", arg);
          return -1;
        }

        static PyObject *t_CheckIndex_get__failFast(t_CheckIndex *self, void *data)
        {
          jboolean value;
          OBJ_CALL(value = self->object.getFailFast());
          Py_RETURN_BOOL(value);
        }
        static int t_CheckIndex_set__failFast(t_CheckIndex *self, PyObject *arg, void *data)
        {
          {
            jboolean value;
            if (!parseArg(arg, "Z", &value))
            {
              INT_CALL(self->object.setFailFast(value));
              return 0;
            }
          }
          PyErr_SetArgsError((PyObject *) self, "failFast", arg);
          return -1;
        }

        static int t_CheckIndex_set__infoStream(t_CheckIndex *self, PyObject *arg, void *data)
        {
          {
            ::java::io::PrintStream value((jobject) NULL);
            if (!parseArg(arg, "k", ::java::io::PrintStream::initializeClass, &value))
            {
              INT_CALL(self->object.setInfoStream(value));
              return 0;
            }
          }
          PyErr_SetArgsError((PyObject *) self, "infoStream", arg);
          return -1;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queries/function/valuesource/SumFloatFunction.h"
#include "org/apache/lucene/queries/function/ValueSource.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queries {
        namespace function {
          namespace valuesource {

            ::java::lang::Class *SumFloatFunction::class$ = NULL;
            jmethodID *SumFloatFunction::mids$ = NULL;
            bool SumFloatFunction::live$ = false;

            jclass SumFloatFunction::initializeClass(bool getOnly)
            {
              if (getOnly)
                return (jclass) (live$ ? class$->this$ : NULL);
              if (class$ == NULL)
              {
                jclass cls = (jclass) env->findClass("org/apache/lucene/queries/function/valuesource/SumFloatFunction");

                mids$ = new jmethodID[max_mid];
                mids$[mid_init$_103f1bad010d62d9] = env->getMethodID(cls, "<init>", "([Lorg/apache/lucene/queries/function/ValueSource;)V");
                mids$[mid_func_e36b2f77f3be25c3] = env->getMethodID(cls, "func", "(I[Lorg/apache/lucene/queries/function/FunctionValues;)F");
                mids$[mid_name_db9b55ba01e03e4b] = env->getMethodID(cls, "name", "()Ljava/lang/String;");

                class$ = new ::java::lang::Class(cls);
                live$ = true;
              }
              return (jclass) class$->this$;
            }

            SumFloatFunction::SumFloatFunction(const JArray< ::org::apache::lucene::queries::function::ValueSource > & a0) : ::org::apache::lucene::queries::function::valuesource::MultiFloatFunction(env->newObject(initializeClass, &mids$, mid_init$_103f1bad010d62d9, a0.this$)) {}
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queries {
        namespace function {
          namespace valuesource {
            static PyObject *t_SumFloatFunction_cast_(PyTypeObject *type, PyObject *arg);
            static PyObject *t_SumFloatFunction_instance_(PyTypeObject *type, PyObject *arg);
            static int t_SumFloatFunction_init_(t_SumFloatFunction *self, PyObject *args, PyObject *kwds);

            static PyMethodDef t_SumFloatFunction__methods_[] = {
              DECLARE_METHOD(t_SumFloatFunction, cast_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_SumFloatFunction, instance_, METH_O | METH_CLASS),
              { NULL, NULL, 0, NULL }
            };

            static PyType_Slot PY_TYPE_SLOTS(SumFloatFunction)[] = {
              { Py_tp_methods, t_SumFloatFunction__methods_ },
              { Py_tp_init, (void *) t_SumFloatFunction_init_ },
              { 0, NULL }
            };

            static PyType_Def *PY_TYPE_BASES(SumFloatFunction)[] = {
              &PY_TYPE_DEF(::org::apache::lucene::queries::function::valuesource::MultiFloatFunction),
              NULL
            };

            DEFINE_TYPE(SumFloatFunction, t_SumFloatFunction, SumFloatFunction);

            void t_SumFloatFunction::install(PyObject *module)
            {
              installType(&PY_TYPE(SumFloatFunction), &PY_TYPE_DEF(SumFloatFunction), module, "SumFloatFunction", 0);
            }

            void t_SumFloatFunction::initialize(PyObject *module)
            {
              PyObject_SetAttrString((PyObject *) PY_TYPE(SumFloatFunction), "class_", make_descriptor(SumFloatFunction::initializeClass, 1));
              PyObject_SetAttrString((PyObject *) PY_TYPE(SumFloatFunction), "wrapfn_", make_descriptor(t_SumFloatFunction::wrap_jobject));
              PyObject_SetAttrString((PyObject *) PY_TYPE(SumFloatFunction), "boxfn_", make_descriptor(boxObject));
            }

            static PyObject *t_SumFloatFunction_cast_(PyTypeObject *type, PyObject *arg)
            {
              if (!(arg = castCheck(arg, SumFloatFunction::initializeClass, 1)))
                return NULL;
              return t_SumFloatFunction::wrap_Object(SumFloatFunction(((t_SumFloatFunction *) arg)->object.this$));
            }
            static PyObject *t_SumFloatFunction_instance_(PyTypeObject *type, PyObject *arg)
            {
              if (!castCheck(arg, SumFloatFunction::initializeClass, 0))
                Py_RETURN_FALSE;
              Py_RETURN_TRUE;
            }

            static int t_SumFloatFunction_init_(t_SumFloatFunction *self, PyObject *args, PyObject *kwds)
            {
              JArray< ::org::apache::lucene::queries::function::ValueSource > a0((jobject) NULL);
              SumFloatFunction object((jobject) NULL);

              if (!parseArgs(args, "[k", ::org::apache::lucene::queries::function::ValueSource::initializeClass, &a0))
              {
                INT_CALL(object = SumFloatFunction(a0));
                self->object = object;
              }
              else
              {
                PyErr_SetArgsError((PyObject *) self, "__init__", args);
                return -1;
              }

              return 0;
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/suggest/DocumentValueSourceDictionary.h"
#include "org/apache/lucene/index/IndexReader.h"
#include "org/apache/lucene/search/LongValuesSource.h"
#include "java/lang/Class.h"
#include "java/lang/String.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/search/suggest/InputIterator.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace suggest {

          ::java::lang::Class *DocumentValueSourceDictionary::class$ = NULL;
          jmethodID *DocumentValueSourceDictionary::mids$ = NULL;
          bool DocumentValueSourceDictionary::live$ = false;

          jclass DocumentValueSourceDictionary::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/search/suggest/DocumentValueSourceDictionary");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_d130f3883e87cdde] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/index/IndexReader;Ljava/lang/String;Lorg/apache/lucene/search/LongValuesSource;)V");
              mids$[mid_init$_930cddc0a919319d] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/index/IndexReader;Ljava/lang/String;Lorg/apache/lucene/search/LongValuesSource;Ljava/lang/String;)V");
              mids$[mid_init$_2d2642caff4cb219] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/index/IndexReader;Ljava/lang/String;Lorg/apache/lucene/search/LongValuesSource;Ljava/lang/String;Ljava/lang/String;)V");
              mids$[mid_getEntryIterator_58c408dcc07c62ab] = env->getMethodID(cls, "getEntryIterator", "()Lorg/apache/lucene/search/suggest/InputIterator;");

              class$ = new ::java::lang::Class(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          DocumentValueSourceDictionary::DocumentValueSourceDictionary(const ::org::apache::lucene::index::IndexReader & a0, const ::java::lang::String & a1, const ::org::apache::lucene::search::LongValuesSource & a2) : ::org::apache::lucene::search::suggest::DocumentDictionary(env->newObject(initializeClass, &mids$, mid_init$_d130f3883e87cdde, a0.this$, a1.this$, a2.this$)) {}

          DocumentValueSourceDictionary::DocumentValueSourceDictionary(const ::org::apache::lucene::index::IndexReader & a0, const ::java::lang::String & a1, const ::org::apache::lucene::search::LongValuesSource & a2, const ::java::lang::String & a3) : ::org::apache::lucene::search::suggest::DocumentDictionary(env->newObject(initializeClass, &mids$, mid_init$_930cddc0a919319d, a0.this$, a1.this$, a2.this$, a3.this$)) {}

          DocumentValueSourceDictionary::DocumentValueSourceDictionary(const ::org::apache::lucene::index::IndexReader & a0, const ::java::lang::String & a1, const ::org::apache::lucene::search::LongValuesSource & a2, const ::java::lang::String & a3, const ::java::lang::String & a4) : ::org::apache::lucene::search::suggest::DocumentDictionary(env->newObject(initializeClass, &mids$, mid_init$_2d2642caff4cb219, a0.this$, a1.this$, a2.this$, a3.this$, a4.this$)) {}

          ::org::apache::lucene::search::suggest::InputIterator DocumentValueSourceDictionary::getEntryIterator() const
          {
            return ::org::apache::lucene::search::suggest::InputIterator(env->callObjectMethod(this$, mids$[mid_getEntryIterator_58c408dcc07c62ab]));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace suggest {
          static PyObject *t_DocumentValueSourceDictionary_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_DocumentValueSourceDictionary_instance_(PyTypeObject *type, PyObject *arg);
          static int t_DocumentValueSourceDictionary_init_(t_DocumentValueSourceDictionary *self, PyObject *args, PyObject *kwds);
          static PyObject *t_DocumentValueSourceDictionary_getEntryIterator(t_DocumentValueSourceDictionary *self, PyObject *args);
          static PyObject *t_DocumentValueSourceDictionary_get__entryIterator(t_DocumentValueSourceDictionary *self, void *data);
          static PyGetSetDef t_DocumentValueSourceDictionary__fields_[] = {
            DECLARE_GET_FIELD(t_DocumentValueSourceDictionary, entryIterator),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_DocumentValueSourceDictionary__methods_[] = {
            DECLARE_METHOD(t_DocumentValueSourceDictionary, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_DocumentValueSourceDictionary, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_DocumentValueSourceDictionary, getEntryIterator, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          static PyType_Slot PY_TYPE_SLOTS(DocumentValueSourceDictionary)[] = {
            { Py_tp_methods, t_DocumentValueSourceDictionary__methods_ },
            { Py_tp_init, (void *) t_DocumentValueSourceDictionary_init_ },
            { Py_tp_getset, t_DocumentValueSourceDictionary__fields_ },
            { 0, NULL }
          };

          static PyType_Def *PY_TYPE_BASES(DocumentValueSourceDictionary)[] = {
            &PY_TYPE_DEF(::org::apache::lucene::search::suggest::DocumentDictionary),
            NULL
          };

          DEFINE_TYPE(DocumentValueSourceDictionary, t_DocumentValueSourceDictionary, DocumentValueSourceDictionary);

          void t_DocumentValueSourceDictionary::install(PyObject *module)
          {
            installType(&PY_TYPE(DocumentValueSourceDictionary), &PY_TYPE_DEF(DocumentValueSourceDictionary), module, "DocumentValueSourceDictionary", 0);
          }

          void t_DocumentValueSourceDictionary::initialize(PyObject *module)
          {
            PyObject_SetAttrString((PyObject *) PY_TYPE(DocumentValueSourceDictionary), "class_", make_descriptor(DocumentValueSourceDictionary::initializeClass, 1));
            PyObject_SetAttrString((PyObject *) PY_TYPE(DocumentValueSourceDictionary), "wrapfn_", make_descriptor(t_DocumentValueSourceDictionary::wrap_jobject));
            PyObject_SetAttrString((PyObject *) PY_TYPE(DocumentValueSourceDictionary), "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_DocumentValueSourceDictionary_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, DocumentValueSourceDictionary::initializeClass, 1)))
              return NULL;
            return t_DocumentValueSourceDictionary::wrap_Object(DocumentValueSourceDictionary(((t_DocumentValueSourceDictionary *) arg)->object.this$));
          }
          static PyObject *t_DocumentValueSourceDictionary_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, DocumentValueSourceDictionary::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_DocumentValueSourceDictionary_init_(t_DocumentValueSourceDictionary *self, PyObject *args, PyObject *kwds)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 3:
              {
                ::org::apache::lucene::index::IndexReader a0((jobject) NULL);
                ::java::lang::String a1((jobject) NULL);
                ::org::apache::lucene::search::LongValuesSource a2((jobject) NULL);
                DocumentValueSourceDictionary object((jobject) NULL);

                if (!parseArgs(args, "ksk", ::org::apache::lucene::index::IndexReader::initializeClass, ::org::apache::lucene::search::LongValuesSource::initializeClass, &a0, &a1, &a2))
                {
                  INT_CALL(object = DocumentValueSourceDictionary(a0, a1, a2));
                  self->object = object;
                  break;
                }
              }
              goto err;
             case 4:
              {
                ::org::apache::lucene::index::IndexReader a0((jobject) NULL);
                ::java::lang::String a1((jobject) NULL);
                ::org::apache::lucene::search::LongValuesSource a2((jobject) NULL);
                ::java::lang::String a3((jobject) NULL);
                DocumentValueSourceDictionary object((jobject) NULL);

                if (!parseArgs(args, "ksks", ::org::apache::lucene::index::IndexReader::initializeClass, ::org::apache::lucene::search::LongValuesSource::initializeClass, &a0, &a1, &a2, &a3))
                {
                  INT_CALL(object = DocumentValueSourceDictionary(a0, a1, a2, a3));
                  self->object = object;
                  break;
                }
              }
              goto err;
             case 5:
              {
                ::org::apache::lucene::index::IndexReader a0((jobject) NULL);
                ::java::lang::String a1((jobject) NULL);
                ::org::apache::lucene::search::LongValuesSource a2((jobject) NULL);
                ::java::lang::String a3((jobject) NULL);
                ::java::lang::String a4((jobject) NULL);
                DocumentValueSourceDictionary object((jobject) NULL);

                if (!parseArgs(args, "kskss", ::org::apache::lucene::index::IndexReader::initializeClass, ::org::apache::lucene::search::LongValuesSource::initializeClass, &a0, &a1, &a2, &a3, &a4))
                {
                  INT_CALL(object = DocumentValueSourceDictionary(a0, a1, a2, a3, a4));
                  self->object = object;
                  break;
                }
              }
             default:
             err:
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_DocumentValueSourceDictionary_getEntryIterator(t_DocumentValueSourceDictionary *self, PyObject *args)
          {
            ::org::apache::lucene::search::suggest::InputIterator result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.getEntryIterator());
              return ::org::apache::lucene::search::suggest::t_InputIterator::wrap_Object(result);
            }

            return callSuper(PY_TYPE(DocumentValueSourceDictionary), (PyObject *) self, "getEntryIterator", args, 2);
          }

          static PyObject *t_DocumentValueSourceDictionary_get__entryIterator(t_DocumentValueSourceDictionary *self, void *data)
          {
            ::org::apache::lucene::search::suggest::InputIterator value((jobject) NULL);
            OBJ_CALL(value = self->object.getEntryIterator());
            return ::org::apache::lucene::search::suggest::t_InputIterator::wrap_Object(value);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/pylucene/util/PythonSet.h"
#include "java/util/Collection.h"
#include "java/lang/Class.h"
#include "java/util/Iterator.h"
#include "java/util/Set.h"
#include "java/lang/Throwable.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace pylucene {
      namespace util {

        ::java::lang::Class *PythonSet::class$ = NULL;
        jmethodID *PythonSet::mids$ = NULL;
        bool PythonSet::live$ = false;

        jclass PythonSet::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/pylucene/util/PythonSet");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_f2cc1bce94666404] = env->getMethodID(cls, "<init>", "()V");
            mids$[mid_add_8b72f2dcdde6fd1d] = env->getMethodID(cls, "add", "(Ljava/lang/Object;)Z");
            mids$[mid_addAll_15d9cc2398c22637] = env->getMethodID(cls, "addAll", "(Ljava/util/Collection;)Z");
            mids$[mid_clear_f2cc1bce94666404] = env->getMethodID(cls, "clear", "()V");
            mids$[mid_contains_8b72f2dcdde6fd1d] = env->getMethodID(cls, "contains", "(Ljava/lang/Object;)Z");
            mids$[mid_containsAll_15d9cc2398c22637] = env->getMethodID(cls, "containsAll", "(Ljava/util/Collection;)Z");
            mids$[mid_equals_8b72f2dcdde6fd1d] = env->getMethodID(cls, "equals", "(Ljava/lang/Object;)Z");
            mids$[mid_finalize_f2cc1bce94666404] = env->getMethodID(cls, "finalize", "()V");
            mids$[mid_isEmpty_8454bd5aa23fd11e] = env->getMethodID(cls, "isEmpty", "()Z");
            mids$[mid_iterator_233a192dadb0917d] = env->getMethodID(cls, "iterator", "()Ljava/util/Iterator;");
            mids$[mid_pythonDecRef_f2cc1bce94666404] = env->getMethodID(cls, "pythonDecRef", "()V");
            mids$[mid_pythonExtension_2e5ae9edcb9b072f] = env->getMethodID(cls, "pythonExtension", "()J");
            mids$[mid_pythonExtension_9c778c9bce6694df] = env->getMethodID(cls, "pythonExtension", "(J)V");
            mids$[mid_remove_8b72f2dcdde6fd1d] = env->getMethodID(cls, "remove", "(Ljava/lang/Object;)Z");
            mids$[mid_removeAll_15d9cc2398c22637] = env->getMethodID(cls, "removeAll", "(Ljava/util/Collection;)Z");
            mids$[mid_retainAll_15d9cc2398c22637] = env->getMethodID(cls, "retainAll", "(Ljava/util/Collection;)Z");
            mids$[mid_size_9972fcc56b44e79d] = env->getMethodID(cls, "size", "()I");
            mids$[mid_toArray_6becf78ffd87a9bc] = env->getMethodID(cls, "toArray", "()[Ljava/lang/Object;");
            mids$[mid_toArray_609b05756010dc5d] = env->getMethodID(cls, "toArray", "([Ljava/lang/Object;)[Ljava/lang/Object;");

            class$ = new ::java::lang::Class(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        PythonSet::PythonSet() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_f2cc1bce94666404)) {}

        jboolean PythonSet::equals(const ::java::lang::Object & a0) const
        {
          return env->callNonvirtualBooleanMethod(this$, (jclass) ::java::lang::Object::class$->this$, ::java::lang::Object::mids$[::java::lang::Object::mid_equals_8b72f2dcdde6fd1d], a0.this$);
        }

        void PythonSet::finalize() const
        {
          env->callVoidMethod(this$, mids$[mid_finalize_f2cc1bce94666404]);
        }

        jlong PythonSet::pythonExtension() const
        {
          return env->callLongMethod(this$, mids$[mid_pythonExtension_2e5ae9edcb9b072f]);
        }

        void PythonSet::pythonExtension(jlong a0) const
        {
          env->callVoidMethod(this$, mids$[mid_pythonExtension_9c778c9bce6694df], a0);
        }

        JArray< ::java::lang::Object > PythonSet::toArray(const JArray< ::java::lang::Object > & a0) const
        {
          return JArray< ::java::lang::Object >(env->callObjectMethod(this$, mids$[mid_toArray_609b05756010dc5d], a0.this$));
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace pylucene {
      namespace util {
        static PyObject *t_PythonSet_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_PythonSet_instance_(PyTypeObject *type, PyObject *arg);
        static int t_PythonSet_init_(t_PythonSet *self, PyObject *args, PyObject *kwds);
        static PyObject *t_PythonSet_equals(t_PythonSet *self, PyObject *args);
        static PyObject *t_PythonSet_finalize(t_PythonSet *self);
        static PyObject *t_PythonSet_pythonExtension(t_PythonSet *self, PyObject *args);
        static PyObject *t_PythonSet_toArray(t_PythonSet *self, PyObject *arg);
        static jboolean JNICALL t_PythonSet_add0(JNIEnv *jenv, jobject jobj, jobject a0);
        static jboolean JNICALL t_PythonSet_addAll1(JNIEnv *jenv, jobject jobj, jobject a0);
        static void JNICALL t_PythonSet_clear2(JNIEnv *jenv, jobject jobj);
        static jboolean JNICALL t_PythonSet_contains3(JNIEnv *jenv, jobject jobj, jobject a0);
        static jboolean JNICALL t_PythonSet_containsAll4(JNIEnv *jenv, jobject jobj, jobject a0);
        static jboolean JNICALL t_PythonSet_equals5(JNIEnv *jenv, jobject jobj, jobject a0);
        static jboolean JNICALL t_PythonSet_isEmpty6(JNIEnv *jenv, jobject jobj);
        static jobject JNICALL t_PythonSet_iterator7(JNIEnv *jenv, jobject jobj);
        static void JNICALL t_PythonSet_pythonDecRef8(JNIEnv *jenv, jobject jobj);
        static jboolean JNICALL t_PythonSet_remove9(JNIEnv *jenv, jobject jobj, jobject a0);
        static jboolean JNICALL t_PythonSet_removeAll10(JNIEnv *jenv, jobject jobj, jobject a0);
        static jboolean JNICALL t_PythonSet_retainAll11(JNIEnv *jenv, jobject jobj, jobject a0);
        static jint JNICALL t_PythonSet_size12(JNIEnv *jenv, jobject jobj);
        static jobject JNICALL t_PythonSet_toArray13(JNIEnv *jenv, jobject jobj);
        static PyObject *t_PythonSet_get__self(t_PythonSet *self, void *data);
        static PyGetSetDef t_PythonSet__fields_[] = {
          DECLARE_GET_FIELD(t_PythonSet, self),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_PythonSet__methods_[] = {
          DECLARE_METHOD(t_PythonSet, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_PythonSet, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_PythonSet, equals, METH_VARARGS),
          DECLARE_METHOD(t_PythonSet, finalize, METH_NOARGS),
          DECLARE_METHOD(t_PythonSet, pythonExtension, METH_VARARGS),
          DECLARE_METHOD(t_PythonSet, toArray, METH_O),
          { NULL, NULL, 0, NULL }
        };

        static PyType_Slot PY_TYPE_SLOTS(PythonSet)[] = {
          { Py_tp_methods, t_PythonSet__methods_ },
          { Py_tp_init, (void *) t_PythonSet_init_ },
          { Py_tp_getset, t_PythonSet__fields_ },
          { Py_tp_iter, (void *) get_extension_iterator },
          { Py_tp_iternext, (void *) 0 },
          { 0, NULL }
        };

        static PyType_Def *PY_TYPE_BASES(PythonSet)[] = {
          &PY_TYPE_DEF(::java::lang::Object),
          NULL
        };

        DEFINE_TYPE(PythonSet, t_PythonSet, PythonSet);

        void t_PythonSet::install(PyObject *module)
        {
          installType(&PY_TYPE(PythonSet), &PY_TYPE_DEF(PythonSet), module, "PythonSet", 1);
        }

        void t_PythonSet::initialize(PyObject *module)
        {
          PyObject_SetAttrString((PyObject *) PY_TYPE(PythonSet), "class_", make_descriptor(PythonSet::initializeClass, 1));
          PyObject_SetAttrString((PyObject *) PY_TYPE(PythonSet), "wrapfn_", make_descriptor(t_PythonSet::wrap_jobject));
          PyObject_SetAttrString((PyObject *) PY_TYPE(PythonSet), "boxfn_", make_descriptor(boxObject));
          jclass cls = env->getClass(PythonSet::initializeClass);
          JNINativeMethod methods[] = {
            { "add", "(Ljava/lang/Object;)Z", (void *) t_PythonSet_add0 },
            { "addAll", "(Ljava/util/Collection;)Z", (void *) t_PythonSet_addAll1 },
            { "clear", "()V", (void *) t_PythonSet_clear2 },
            { "contains", "(Ljava/lang/Object;)Z", (void *) t_PythonSet_contains3 },
            { "containsAll", "(Ljava/util/Collection;)Z", (void *) t_PythonSet_containsAll4 },
            { "equals", "(Ljava/lang/Object;)Z", (void *) t_PythonSet_equals5 },
            { "isEmpty", "()Z", (void *) t_PythonSet_isEmpty6 },
            { "iterator", "()Ljava/util/Iterator;", (void *) t_PythonSet_iterator7 },
            { "pythonDecRef", "()V", (void *) t_PythonSet_pythonDecRef8 },
            { "remove", "(Ljava/lang/Object;)Z", (void *) t_PythonSet_remove9 },
            { "removeAll", "(Ljava/util/Collection;)Z", (void *) t_PythonSet_removeAll10 },
            { "retainAll", "(Ljava/util/Collection;)Z", (void *) t_PythonSet_retainAll11 },
            { "size", "()I", (void *) t_PythonSet_size12 },
            { "toArray", "()[Ljava/lang/Object;", (void *) t_PythonSet_toArray13 },
          };
          env->registerNatives(cls, methods, 14);
        }

        static PyObject *t_PythonSet_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, PythonSet::initializeClass, 1)))
            return NULL;
          return t_PythonSet::wrap_Object(PythonSet(((t_PythonSet *) arg)->object.this$));
        }
        static PyObject *t_PythonSet_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, PythonSet::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_PythonSet_init_(t_PythonSet *self, PyObject *args, PyObject *kwds)
        {
          PythonSet object((jobject) NULL);

          INT_CALL(object = PythonSet());
          self->object = object;

          Py_INCREF((PyObject *) self);
          self->object.pythonExtension((jlong) (Py_intptr_t) (void *) self);

          return 0;
        }

        static PyObject *t_PythonSet_equals(t_PythonSet *self, PyObject *args)
        {
          ::java::lang::Object a0((jobject) NULL);
          jboolean result;

          if (!parseArgs(args, "o", &a0))
          {
            OBJ_CALL(result = self->object.equals(a0));
            Py_RETURN_BOOL(result);
          }

          return callSuper(PY_TYPE(PythonSet), (PyObject *) self, "equals", args, 2);
        }

        static PyObject *t_PythonSet_finalize(t_PythonSet *self)
        {
          OBJ_CALL(self->object.finalize());
          Py_RETURN_NONE;
        }

        static PyObject *t_PythonSet_pythonExtension(t_PythonSet *self, PyObject *args)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 0:
            {
              jlong result;
              OBJ_CALL(result = self->object.pythonExtension());
              return PyLong_FromLongLong((PY_LONG_LONG) result);
            }
            break;
           case 1:
            {
              jlong a0;

              if (!parseArgs(args, "J", &a0))
              {
                OBJ_CALL(self->object.pythonExtension(a0));
                Py_RETURN_NONE;
              }
            }
          }

          PyErr_SetArgsError((PyObject *) self, "pythonExtension", args);
          return NULL;
        }

        static PyObject *t_PythonSet_toArray(t_PythonSet *self, PyObject *arg)
        {
          JArray< ::java::lang::Object > a0((jobject) NULL);
          JArray< ::java::lang::Object > result((jobject) NULL);

          if (!parseArg(arg, "[o", &a0))
          {
            OBJ_CALL(result = self->object.toArray(a0));
            return JArray<jobject>(result.this$).wrap(::java::lang::t_Object::wrap_jobject);
          }

          PyErr_SetArgsError((PyObject *) self, "toArray", arg);
          return NULL;
        }

        static jboolean JNICALL t_PythonSet_add0(JNIEnv *jenv, jobject jobj, jobject a0)
        {
          jlong ptr = jenv->CallLongMethod(jobj, PythonSet::mids$[PythonSet::mid_pythonExtension_2e5ae9edcb9b072f]);
          PyObject *obj = (PyObject *) (Py_intptr_t) ptr;
          PythonGIL gil(jenv);
          jboolean value;
          PyObject *o0 = ::java::lang::t_Object::wrap_Object(::java::lang::Object(a0));
          PyObject *result = PyObject_CallMethod(obj, "add", "O", o0);
          Py_DECREF(o0);
          if (!result)
            throwPythonError();
          else if (parseArg(result, "Z", &value))
          {
            throwTypeError("add", result);
            Py_DECREF(result);
          }
          else
          {
            Py_DECREF(result);
            return value;
          }

          return (jboolean) 0;
        }

        static jboolean JNICALL t_PythonSet_addAll1(JNIEnv *jenv, jobject jobj, jobject a0)
        {
          jlong ptr = jenv->CallLongMethod(jobj, PythonSet::mids$[PythonSet::mid_pythonExtension_2e5ae9edcb9b072f]);
          PyObject *obj = (PyObject *) (Py_intptr_t) ptr;
          PythonGIL gil(jenv);
          jboolean value;
          PyObject *o0 = ::java::util::t_Collection::wrap_Object(::java::util::Collection(a0));
          PyObject *result = PyObject_CallMethod(obj, "addAll", "O", o0);
          Py_DECREF(o0);
          if (!result)
            throwPythonError();
          else if (parseArg(result, "Z", &value))
          {
            throwTypeError("addAll", result);
            Py_DECREF(result);
          }
          else
          {
            Py_DECREF(result);
            return value;
          }

          return (jboolean) 0;
        }

        static void JNICALL t_PythonSet_clear2(JNIEnv *jenv, jobject jobj)
        {
          jlong ptr = jenv->CallLongMethod(jobj, PythonSet::mids$[PythonSet::mid_pythonExtension_2e5ae9edcb9b072f]);
          PyObject *obj = (PyObject *) (Py_intptr_t) ptr;
          PythonGIL gil(jenv);
          PyObject *result = PyObject_CallMethod(obj, "clear", "");
          if (!result)
            throwPythonError();
          else
            Py_DECREF(result);
        }

        static jboolean JNICALL t_PythonSet_contains3(JNIEnv *jenv, jobject jobj, jobject a0)
        {
          jlong ptr = jenv->CallLongMethod(jobj, PythonSet::mids$[PythonSet::mid_pythonExtension_2e5ae9edcb9b072f]);
          PyObject *obj = (PyObject *) (Py_intptr_t) ptr;
          PythonGIL gil(jenv);
          jboolean value;
          PyObject *o0 = ::java::lang::t_Object::wrap_Object(::java::lang::Object(a0));
          PyObject *result = PyObject_CallMethod(obj, "contains", "O", o0);
          Py_DECREF(o0);
          if (!result)
            throwPythonError();
          else if (parseArg(result, "Z", &value))
          {
            throwTypeError("contains", result);
            Py_DECREF(result);
          }
          else
          {
            Py_DECREF(result);
            return value;
          }

          return (jboolean) 0;
        }

        static jboolean JNICALL t_PythonSet_containsAll4(JNIEnv *jenv, jobject jobj, jobject a0)
        {
          jlong ptr = jenv->CallLongMethod(jobj, PythonSet::mids$[PythonSet::mid_pythonExtension_2e5ae9edcb9b072f]);
          PyObject *obj = (PyObject *) (Py_intptr_t) ptr;
          PythonGIL gil(jenv);
          jboolean value;
          PyObject *o0 = ::java::util::t_Collection::wrap_Object(::java::util::Collection(a0));
          PyObject *result = PyObject_CallMethod(obj, "containsAll", "O", o0);
          Py_DECREF(o0);
          if (!result)
            throwPythonError();
          else if (parseArg(result, "Z", &value))
          {
            throwTypeError("containsAll", result);
            Py_DECREF(result);
          }
          else
          {
            Py_DECREF(result);
            return value;
          }

          return (jboolean) 0;
        }

        static jboolean JNICALL t_PythonSet_equals5(JNIEnv *jenv, jobject jobj, jobject a0)
        {
          jlong ptr = jenv->CallLongMethod(jobj, PythonSet::mids$[PythonSet::mid_pythonExtension_2e5ae9edcb9b072f]);
          PyObject *obj = (PyObject *) (Py_intptr_t) ptr;
          PythonGIL gil(jenv);
          jboolean value;
          PyObject *o0 = ::java::lang::t_Object::wrap_Object(::java::lang::Object(a0));
          PyObject *result = PyObject_CallMethod(obj, "equals", "O", o0);
          Py_DECREF(o0);
          if (!result)
            throwPythonError();
          else if (parseArg(result, "Z", &value))
          {
            throwTypeError("equals", result);
            Py_DECREF(result);
          }
          else
          {
            Py_DECREF(result);
            return value;
          }

          return (jboolean) 0;
        }

        static jboolean JNICALL t_PythonSet_isEmpty6(JNIEnv *jenv, jobject jobj)
        {
          jlong ptr = jenv->CallLongMethod(jobj, PythonSet::mids$[PythonSet::mid_pythonExtension_2e5ae9edcb9b072f]);
          PyObject *obj = (PyObject *) (Py_intptr_t) ptr;
          PythonGIL gil(jenv);
          jboolean value;
          PyObject *result = PyObject_CallMethod(obj, "isEmpty", "");
          if (!result)
            throwPythonError();
          else if (parseArg(result, "Z", &value))
          {
            throwTypeError("isEmpty", result);
            Py_DECREF(result);
          }
          else
          {
            Py_DECREF(result);
            return value;
          }

          return (jboolean) 0;
        }

        static jobject JNICALL t_PythonSet_iterator7(JNIEnv *jenv, jobject jobj)
        {
          jlong ptr = jenv->CallLongMethod(jobj, PythonSet::mids$[PythonSet::mid_pythonExtension_2e5ae9edcb9b072f]);
          PyObject *obj = (PyObject *) (Py_intptr_t) ptr;
          PythonGIL gil(jenv);
          ::java::util::Iterator value((jobject) NULL);
          PyObject *result = PyObject_CallMethod(obj, "iterator", "");
          if (!result)
            throwPythonError();
          else if (parseArg(result, "k", ::java::util::Iterator::initializeClass, &value))
          {
            throwTypeError("iterator", result);
            Py_DECREF(result);
          }
          else
          {
            jobj = jenv->NewLocalRef(value.this$);
            Py_DECREF(result);
            return jobj;
          }

          return (jobject) NULL;
        }

        static void JNICALL t_PythonSet_pythonDecRef8(JNIEnv *jenv, jobject jobj)
        {
          jlong ptr = jenv->CallLongMethod(jobj, PythonSet::mids$[PythonSet::mid_pythonExtension_2e5ae9edcb9b072f]);
          PyObject *obj = (PyObject *) (Py_intptr_t) ptr;

          if (obj != NULL)
          {
            jenv->CallVoidMethod(jobj, PythonSet::mids$[PythonSet::mid_pythonExtension_9c778c9bce6694df], (jlong) 0);
            env->finalizeObject(jenv, obj);
          }
        }

        static jboolean JNICALL t_PythonSet_remove9(JNIEnv *jenv, jobject jobj, jobject a0)
        {
          jlong ptr = jenv->CallLongMethod(jobj, PythonSet::mids$[PythonSet::mid_pythonExtension_2e5ae9edcb9b072f]);
          PyObject *obj = (PyObject *) (Py_intptr_t) ptr;
          PythonGIL gil(jenv);
          jboolean value;
          PyObject *o0 = ::java::lang::t_Object::wrap_Object(::java::lang::Object(a0));
          PyObject *result = PyObject_CallMethod(obj, "remove", "O", o0);
          Py_DECREF(o0);
          if (!result)
            throwPythonError();
          else if (parseArg(result, "Z", &value))
          {
            throwTypeError("remove", result);
            Py_DECREF(result);
          }
          else
          {
            Py_DECREF(result);
            return value;
          }

          return (jboolean) 0;
        }

        static jboolean JNICALL t_PythonSet_removeAll10(JNIEnv *jenv, jobject jobj, jobject a0)
        {
          jlong ptr = jenv->CallLongMethod(jobj, PythonSet::mids$[PythonSet::mid_pythonExtension_2e5ae9edcb9b072f]);
          PyObject *obj = (PyObject *) (Py_intptr_t) ptr;
          PythonGIL gil(jenv);
          jboolean value;
          PyObject *o0 = ::java::util::t_Collection::wrap_Object(::java::util::Collection(a0));
          PyObject *result = PyObject_CallMethod(obj, "removeAll", "O", o0);
          Py_DECREF(o0);
          if (!result)
            throwPythonError();
          else if (parseArg(result, "Z", &value))
          {
            throwTypeError("removeAll", result);
            Py_DECREF(result);
          }
          else
          {
            Py_DECREF(result);
            return value;
          }

          return (jboolean) 0;
        }

        static jboolean JNICALL t_PythonSet_retainAll11(JNIEnv *jenv, jobject jobj, jobject a0)
        {
          jlong ptr = jenv->CallLongMethod(jobj, PythonSet::mids$[PythonSet::mid_pythonExtension_2e5ae9edcb9b072f]);
          PyObject *obj = (PyObject *) (Py_intptr_t) ptr;
          PythonGIL gil(jenv);
          jboolean value;
          PyObject *o0 = ::java::util::t_Collection::wrap_Object(::java::util::Collection(a0));
          PyObject *result = PyObject_CallMethod(obj, "retainAll", "O", o0);
          Py_DECREF(o0);
          if (!result)
            throwPythonError();
          else if (parseArg(result, "Z", &value))
          {
            throwTypeError("retainAll", result);
            Py_DECREF(result);
          }
          else
          {
            Py_DECREF(result);
            return value;
          }

          return (jboolean) 0;
        }

        static jint JNICALL t_PythonSet_size12(JNIEnv *jenv, jobject jobj)
        {
          jlong ptr = jenv->CallLongMethod(jobj, PythonSet::mids$[PythonSet::mid_pythonExtension_2e5ae9edcb9b072f]);
          PyObject *obj = (PyObject *) (Py_intptr_t) ptr;
          PythonGIL gil(jenv);
          jint value;
          PyObject *result = PyObject_CallMethod(obj, "size", "");
          if (!result)
            throwPythonError();
          else if (parseArg(result, "I", &value))
          {
            throwTypeError("size", result);
            Py_DECREF(result);
          }
          else
          {
            Py_DECREF(result);
            return value;
          }

          return (jint) 0;
        }

        static jobject JNICALL t_PythonSet_toArray13(JNIEnv *jenv, jobject jobj)
        {
          jlong ptr = jenv->CallLongMethod(jobj, PythonSet::mids$[PythonSet::mid_pythonExtension_2e5ae9edcb9b072f]);
          PyObject *obj = (PyObject *) (Py_intptr_t) ptr;
          PythonGIL gil(jenv);
          JArray< ::java::lang::Object > value((jobject) NULL);
          PyObject *result = PyObject_CallMethod(obj, "toArray", "");
          if (!result)
            throwPythonError();
          else if (parseArg(result, "[o", &value))
          {
            throwTypeError("toArray", result);
            Py_DECREF(result);
          }
          else
          {
            jobj = jenv->NewLocalRef(value.this$);
            Py_DECREF(result);
            return jobj;
          }

          return (jobject) NULL;
        }

        static PyObject *t_PythonSet_get__self(t_PythonSet *self, void *data)
        {
          jlong ptr;
          OBJ_CALL(ptr = self->object.pythonExtension());
          PyObject *obj = (PyObject *) (Py_intptr_t) ptr;

          if (obj != NULL)
          {
            Py_INCREF(obj);
            return obj;
          }
          else
            Py_RETURN_NONE;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/util/fst/Util.h"
#include "org/apache/lucene/util/IntsRef.h"
#include "org/apache/lucene/util/fst/FST$BytesReader.h"
#include "java/util/Comparator.h"
#include "java/lang/Long.h"
#include "org/apache/lucene/util/fst/Util$TopResults.h"
#include "org/apache/lucene/util/BytesRefBuilder.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/util/fst/FST$Arc.h"
#include "org/apache/lucene/util/IntsRefBuilder.h"
#include "org/apache/lucene/util/BytesRef.h"
#include "java/io/IOException.h"
#include "java/lang/CharSequence.h"
#include "org/apache/lucene/util/fst/FST.h"
#include "java/io/Writer.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        namespace fst {

          ::java::lang::Class *Util::class$ = NULL;
          jmethodID *Util::mids$ = NULL;
          bool Util::live$ = false;

          jclass Util::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/util/fst/Util");

              mids$ = new jmethodID[max_mid];
              mids$[mid_get_35edc978bad5c1db] = env->getStaticMethodID(cls, "get", "(Lorg/apache/lucene/util/fst/FST;Lorg/apache/lucene/util/BytesRef;)Ljava/lang/Object;");
              mids$[mid_get_01d705500f6c3d43] = env->getStaticMethodID(cls, "get", "(Lorg/apache/lucene/util/fst/FST;Lorg/apache/lucene/util/IntsRef;)Ljava/lang/Object;");
              mids$[mid_getByOutput_e9bda709015233a6] = env->getStaticMethodID(cls, "getByOutput", "(Lorg/apache/lucene/util/fst/FST;J)Lorg/apache/lucene/util/IntsRef;");
              mids$[mid_getByOutput_6d7fec9ef481143f] = env->getStaticMethodID(cls, "getByOutput", "(Lorg/apache/lucene/util/fst/FST;JLorg/apache/lucene/util/fst/FST$BytesReader;Lorg/apache/lucene/util/fst/FST$Arc;Lorg/apache/lucene/util/fst/FST$Arc;Lorg/apache/lucene/util/IntsRefBuilder;)Lorg/apache/lucene/util/IntsRef;");
              mids$[mid_readCeilArc_de5e982d3430dea1] = env->getStaticMethodID(cls, "readCeilArc", "(ILorg/apache/lucene/util/fst/FST;Lorg/apache/lucene/util/fst/FST$Arc;Lorg/apache/lucene/util/fst/FST$Arc;Lorg/apache/lucene/util/fst/FST$BytesReader;)Lorg/apache/lucene/util/fst/FST$Arc;");
              mids$[mid_shortestPaths_9f906d2bf57ec184] = env->getStaticMethodID(cls, "shortestPaths", "(Lorg/apache/lucene/util/fst/FST;Lorg/apache/lucene/util/fst/FST$Arc;Ljava/lang/Object;Ljava/util/Comparator;IZ)Lorg/apache/lucene/util/fst/Util$TopResults;");
              mids$[mid_toBytesRef_d7ea7a8fbb8893f1] = env->getStaticMethodID(cls, "toBytesRef", "(Lorg/apache/lucene/util/IntsRef;Lorg/apache/lucene/util/BytesRefBuilder;)Lorg/apache/lucene/util/BytesRef;");
              mids$[mid_toDot_3c8a64e005a96f7c] = env->getStaticMethodID(cls, "toDot", "(Lorg/apache/lucene/util/fst/FST;Ljava/io/Writer;ZZ)V");
              mids$[mid_toIntsRef_e1cdf5ba258a774a] = env->getStaticMethodID(cls, "toIntsRef", "(Lorg/apache/lucene/util/BytesRef;Lorg/apache/lucene/util/IntsRefBuilder;)Lorg/apache/lucene/util/IntsRef;");
              mids$[mid_toUTF16_979bf809961b697c] = env->getStaticMethodID(cls, "toUTF16", "(Ljava/lang/CharSequence;Lorg/apache/lucene/util/IntsRefBuilder;)Lorg/apache/lucene/util/IntsRef;");
              mids$[mid_toUTF32_979bf809961b697c] = env->getStaticMethodID(cls, "toUTF32", "(Ljava/lang/CharSequence;Lorg/apache/lucene/util/IntsRefBuilder;)Lorg/apache/lucene/util/IntsRef;");
              mids$[mid_toUTF32_53dbce2d6530aa8f] = env->getStaticMethodID(cls, "toUTF32", "([CIILorg/apache/lucene/util/IntsRefBuilder;)Lorg/apache/lucene/util/IntsRef;");

              class$ = new ::java::lang::Class(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          ::java::lang::Object Util::get(const ::org::apache::lucene::util::fst::FST & a0, const ::org::apache::lucene::util::BytesRef & a1)
          {
            jclass cls = env->getClass(initializeClass);
            return ::java::lang::Object(env->callStaticObjectMethod(cls, mids$[mid_get_35edc978bad5c1db], a0.this$, a1.this$));
          }

          ::java::lang::Object Util::get(const ::org::apache::lucene::util::fst::FST & a0, const ::org::apache::lucene::util::IntsRef & a1)
          {
            jclass cls = env->getClass(initializeClass);
            return ::java::lang::Object(env->callStaticObjectMethod(cls, mids$[mid_get_01d705500f6c3d43], a0.this$, a1.this$));
          }

          ::org::apache::lucene::util::IntsRef Util::getByOutput(const ::org::apache::lucene::util::fst::FST & a0, jlong a1)
          {
            jclass cls = env->getClass(initializeClass);
            return ::org::apache::lucene::util::IntsRef(env->callStaticObjectMethod(cls, mids$[mid_getByOutput_e9bda709015233a6], a0.this$, a1));
          }

          ::org::apache::lucene::util::IntsRef Util::getByOutput(const ::org::apache::lucene::util::fst::FST & a0, jlong a1, const ::org::apache::lucene::util::fst::FST$BytesReader & a2, const ::org::apache::lucene::util::fst::FST$Arc & a3, const ::org::apache::lucene::util::fst::FST$Arc & a4, const ::org::apache::lucene::util::IntsRefBuilder & a5)
          {
            jclass cls = env->getClass(initializeClass);
            return ::org::apache::lucene::util::IntsRef(env->callStaticObjectMethod(cls, mids$[mid_getByOutput_6d7fec9ef481143f], a0.this$, a1, a2.this$, a3.this$, a4.this$, a5.this$));
          }

          ::org::apache::lucene::util::fst::FST$Arc Util::readCeilArc(jint a0, const ::org::apache::lucene::util::fst::FST & a1, const ::org::apache::lucene::util::fst::FST$Arc & a2, const ::org::apache::lucene::util::fst::FST$Arc & a3, const ::org::apache::lucene::util::fst::FST$BytesReader & a4)
          {
            jclass cls = env->getClass(initializeClass);
            return ::org::apache::lucene::util::fst::FST$Arc(env->callStaticObjectMethod(cls, mids$[mid_readCeilArc_de5e982d3430dea1], a0, a1.this$, a2.this$, a3.this$, a4.this$));
          }

          ::org::apache::lucene::util::fst::Util$TopResults Util::shortestPaths(const ::org::apache::lucene::util::fst::FST & a0, const ::org::apache::lucene::util::fst::FST$Arc & a1, const ::java::lang::Object & a2, const ::java::util::Comparator & a3, jint a4, jboolean a5)
          {
            jclass cls = env->getClass(initializeClass);
            return ::org::apache::lucene::util::fst::Util$TopResults(env->callStaticObjectMethod(cls, mids$[mid_shortestPaths_9f906d2bf57ec184], a0.this$, a1.this$, a2.this$, a3.this$, a4, a5));
          }

          ::org::apache::lucene::util::BytesRef Util::toBytesRef(const ::org::apache::lucene::util::IntsRef & a0, const ::org::apache::lucene::util::BytesRefBuilder & a1)
          {
            jclass cls = env->getClass(initializeClass);
            return ::org::apache::lucene::util::BytesRef(env->callStaticObjectMethod(cls, mids$[mid_toBytesRef_d7ea7a8fbb8893f1], a0.this$, a1.this$));
          }

          void Util::toDot(const ::org::apache::lucene::util::fst::FST & a0, const ::java::io::Writer & a1, jboolean a2, jboolean a3)
          {
            jclass cls = env->getClass(initializeClass);
            env->callStaticVoidMethod(cls, mids$[mid_toDot_3c8a64e005a96f7c], a0.this$, a1.this$, a2, a3);
          }

          ::org::apache::lucene::util::IntsRef Util::toIntsRef(const ::org::apache::lucene::util::BytesRef & a0, const ::org::apache::lucene::util::IntsRefBuilder & a1)
          {
            jclass cls = env->getClass(initializeClass);
            return ::org::apache::lucene::util::IntsRef(env->callStaticObjectMethod(cls, mids$[mid_toIntsRef_e1cdf5ba258a774a], a0.this$, a1.this$));
          }

          ::org::apache::lucene::util::IntsRef Util::toUTF16(const ::java::lang::CharSequence & a0, const ::org::apache::lucene::util::IntsRefBuilder & a1)
          {
            jclass cls = env->getClass(initializeClass);
            return ::org::apache::lucene::util::IntsRef(env->callStaticObjectMethod(cls, mids$[mid_toUTF16_979bf809961b697c], a0.this$, a1.this$));
          }

          ::org::apache::lucene::util::IntsRef Util::toUTF32(const ::java::lang::CharSequence & a0, const ::org::apache::lucene::util::IntsRefBuilder & a1)
          {
            jclass cls = env->getClass(initializeClass);
            return ::org::apache::lucene::util::IntsRef(env->callStaticObjectMethod(cls, mids$[mid_toUTF32_979bf809961b697c], a0.this$, a1.this$));
          }

          ::org::apache::lucene::util::IntsRef Util::toUTF32(const JArray< jchar > & a0, jint a1, jint a2, const ::org::apache::lucene::util::IntsRefBuilder & a3)
          {
            jclass cls = env->getClass(initializeClass);
            return ::org::apache::lucene::util::IntsRef(env->callStaticObjectMethod(cls, mids$[mid_toUTF32_53dbce2d6530aa8f], a0.this$, a1, a2, a3.this$));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"
#include "org/apache/lucene/util/fst/Util$Result.h"
#include "org/apache/lucene/util/fst/Util$TopNSearcher.h"
#include "org/apache/lucene/util/fst/Util$FSTPath.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        namespace fst {
          static PyObject *t_Util_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_Util_instance_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_Util_get(PyTypeObject *type, PyObject *args);
          static PyObject *t_Util_getByOutput(PyTypeObject *type, PyObject *args);
          static PyObject *t_Util_readCeilArc(PyTypeObject *type, PyObject *args);
          static PyObject *t_Util_shortestPaths(PyTypeObject *type, PyObject *args);
          static PyObject *t_Util_toBytesRef(PyTypeObject *type, PyObject *args);
          static PyObject *t_Util_toDot(PyTypeObject *type, PyObject *args);
          static PyObject *t_Util_toIntsRef(PyTypeObject *type, PyObject *args);
          static PyObject *t_Util_toUTF16(PyTypeObject *type, PyObject *args);
          static PyObject *t_Util_toUTF32(PyTypeObject *type, PyObject *args);

          static PyMethodDef t_Util__methods_[] = {
            DECLARE_METHOD(t_Util, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_Util, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_Util, get, METH_VARARGS | METH_CLASS),
            DECLARE_METHOD(t_Util, getByOutput, METH_VARARGS | METH_CLASS),
            DECLARE_METHOD(t_Util, readCeilArc, METH_VARARGS | METH_CLASS),
            DECLARE_METHOD(t_Util, shortestPaths, METH_VARARGS | METH_CLASS),
            DECLARE_METHOD(t_Util, toBytesRef, METH_VARARGS | METH_CLASS),
            DECLARE_METHOD(t_Util, toDot, METH_VARARGS | METH_CLASS),
            DECLARE_METHOD(t_Util, toIntsRef, METH_VARARGS | METH_CLASS),
            DECLARE_METHOD(t_Util, toUTF16, METH_VARARGS | METH_CLASS),
            DECLARE_METHOD(t_Util, toUTF32, METH_VARARGS | METH_CLASS),
            { NULL, NULL, 0, NULL }
          };

          static PyType_Slot PY_TYPE_SLOTS(Util)[] = {
            { Py_tp_methods, t_Util__methods_ },
            { Py_tp_init, (void *) abstract_init },
            { 0, NULL }
          };

          static PyType_Def *PY_TYPE_BASES(Util)[] = {
            &PY_TYPE_DEF(::java::lang::Object),
            NULL
          };

          DEFINE_TYPE(Util, t_Util, Util);

          void t_Util::install(PyObject *module)
          {
            installType(&PY_TYPE(Util), &PY_TYPE_DEF(Util), module, "Util", 0);
            PyObject_SetAttrString((PyObject *) PY_TYPE(Util), "TopResults", make_descriptor(&PY_TYPE_DEF(Util$TopResults)));
            PyObject_SetAttrString((PyObject *) PY_TYPE(Util), "Result", make_descriptor(&PY_TYPE_DEF(Util$Result)));
            PyObject_SetAttrString((PyObject *) PY_TYPE(Util), "TopNSearcher", make_descriptor(&PY_TYPE_DEF(Util$TopNSearcher)));
            PyObject_SetAttrString((PyObject *) PY_TYPE(Util), "FSTPath", make_descriptor(&PY_TYPE_DEF(Util$FSTPath)));
          }

          void t_Util::initialize(PyObject *module)
          {
            PyObject_SetAttrString((PyObject *) PY_TYPE(Util), "class_", make_descriptor(Util::initializeClass, 1));
            PyObject_SetAttrString((PyObject *) PY_TYPE(Util), "wrapfn_", make_descriptor(t_Util::wrap_jobject));
            PyObject_SetAttrString((PyObject *) PY_TYPE(Util), "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_Util_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, Util::initializeClass, 1)))
              return NULL;
            return t_Util::wrap_Object(Util(((t_Util *) arg)->object.this$));
          }
          static PyObject *t_Util_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, Util::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static PyObject *t_Util_get(PyTypeObject *type, PyObject *args)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 2:
              {
                ::org::apache::lucene::util::fst::FST a0((jobject) NULL);
                PyTypeObject **p0;
                ::org::apache::lucene::util::BytesRef a1((jobject) NULL);
                ::java::lang::Object result((jobject) NULL);

                if (!parseArgs(args, "Kk", ::org::apache::lucene::util::fst::FST::initializeClass, ::org::apache::lucene::util::BytesRef::initializeClass, &a0, &p0, ::org::apache::lucene::util::fst::t_FST::parameters_, &a1))
                {
                  OBJ_CALL(result = ::org::apache::lucene::util::fst::Util::get(a0, a1));
                  return p0 != NULL && p0[0] != NULL ? wrapType(p0[0], result.this$) : ::java::lang::t_Object::wrap_Object(result);
                }
              }
              {
                ::org::apache::lucene::util::fst::FST a0((jobject) NULL);
                PyTypeObject **p0;
                ::org::apache::lucene::util::IntsRef a1((jobject) NULL);
                ::java::lang::Object result((jobject) NULL);

                if (!parseArgs(args, "Kk", ::org::apache::lucene::util::fst::FST::initializeClass, ::org::apache::lucene::util::IntsRef::initializeClass, &a0, &p0, ::org::apache::lucene::util::fst::t_FST::parameters_, &a1))
                {
                  OBJ_CALL(result = ::org::apache::lucene::util::fst::Util::get(a0, a1));
                  return p0 != NULL && p0[0] != NULL ? wrapType(p0[0], result.this$) : ::java::lang::t_Object::wrap_Object(result);
                }
              }
            }

            PyErr_SetArgsError(type, "get", args);
            return NULL;
          }

          static PyObject *t_Util_getByOutput(PyTypeObject *type, PyObject *args)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 2:
              {
                ::org::apache::lucene::util::fst::FST a0((jobject) NULL);
                PyTypeObject **p0;
                jlong a1;
                ::org::apache::lucene::util::IntsRef result((jobject) NULL);

                if (!parseArgs(args, "KJ", ::org::apache::lucene::util::fst::FST::initializeClass, &a0, &p0, ::org::apache::lucene::util::fst::t_FST::parameters_, &a1))
                {
                  OBJ_CALL(result = ::org::apache::lucene::util::fst::Util::getByOutput(a0, a1));
                  return ::org::apache::lucene::util::t_IntsRef::wrap_Object(result);
                }
              }
              break;
             case 6:
              {
                ::org::apache::lucene::util::fst::FST a0((jobject) NULL);
                PyTypeObject **p0;
                jlong a1;
                ::org::apache::lucene::util::fst::FST$BytesReader a2((jobject) NULL);
                PyTypeObject **p2;
                ::org::apache::lucene::util::fst::FST$Arc a3((jobject) NULL);
                PyTypeObject **p3;
                ::org::apache::lucene::util::fst::FST$Arc a4((jobject) NULL);
                PyTypeObject **p4;
                ::org::apache::lucene::util::IntsRefBuilder a5((jobject) NULL);
                ::org::apache::lucene::util::IntsRef result((jobject) NULL);

                if (!parseArgs(args, "KJKKKk", ::org::apache::lucene::util::fst::FST::initializeClass, ::org::apache::lucene::util::fst::FST$BytesReader::initializeClass, ::org::apache::lucene::util::fst::FST$Arc::initializeClass, ::org::apache::lucene::util::fst::FST$Arc::initializeClass, ::org::apache::lucene::util::IntsRefBuilder::initializeClass, &a0, &p0, ::org::apache::lucene::util::fst::t_FST::parameters_, &a1, &a2, &p2, ::org::apache::lucene::util::fst::t_FST$BytesReader::parameters_, &a3, &p3, ::org::apache::lucene::util::fst::t_FST$Arc::parameters_, &a4, &p4, ::org::apache::lucene::util::fst::t_FST$Arc::parameters_, &a5))
                {
                  OBJ_CALL(result = ::org::apache::lucene::util::fst::Util::getByOutput(a0, a1, a2, a3, a4, a5));
                  return ::org::apache::lucene::util::t_IntsRef::wrap_Object(result);
                }
              }
            }

            PyErr_SetArgsError(type, "getByOutput", args);
            return NULL;
          }

          static PyObject *t_Util_readCeilArc(PyTypeObject *type, PyObject *args)
          {
            jint a0;
            ::org::apache::lucene::util::fst::FST a1((jobject) NULL);
            PyTypeObject **p1;
            ::org::apache::lucene::util::fst::FST$Arc a2((jobject) NULL);
            PyTypeObject **p2;
            ::org::apache::lucene::util::fst::FST$Arc a3((jobject) NULL);
            PyTypeObject **p3;
            ::org::apache::lucene::util::fst::FST$BytesReader a4((jobject) NULL);
            PyTypeObject **p4;
            ::org::apache::lucene::util::fst::FST$Arc result((jobject) NULL);

            if (!parseArgs(args, "IKKKK", ::org::apache::lucene::util::fst::FST::initializeClass, ::org::apache::lucene::util::fst::FST$Arc::initializeClass, ::org::apache::lucene::util::fst::FST$Arc::initializeClass, ::org::apache::lucene::util::fst::FST$BytesReader::initializeClass, &a0, &a1, &p1, ::org::apache::lucene::util::fst::t_FST::parameters_, &a2, &p2, ::org::apache::lucene::util::fst::t_FST$Arc::parameters_, &a3, &p3, ::org::apache::lucene::util::fst::t_FST$Arc::parameters_, &a4, &p4, ::org::apache::lucene::util::fst::t_FST$BytesReader::parameters_))
            {
              OBJ_CALL(result = ::org::apache::lucene::util::fst::Util::readCeilArc(a0, a1, a2, a3, a4));
              return ::org::apache::lucene::util::fst::t_FST$Arc::wrap_Object(result);
            }

            PyErr_SetArgsError(type, "readCeilArc", args);
            return NULL;
          }

          static PyObject *t_Util_shortestPaths(PyTypeObject *type, PyObject *args)
          {
            ::org::apache::lucene::util::fst::FST a0((jobject) NULL);
            PyTypeObject **p0;
            ::org::apache::lucene::util::fst::FST$Arc a1((jobject) NULL);
            PyTypeObject **p1;
            ::java::lang::Object a2((jobject) NULL);
            ::java::util::Comparator a3((jobject) NULL);
            PyTypeObject **p3;
            jint a4;
            jboolean a5;
            ::org::apache::lucene::util::fst::Util$TopResults result((jobject) NULL);

            if (!parseArgs(args, "KKoKIZ", ::org::apache::lucene::util::fst::FST::initializeClass, ::org::apache::lucene::util::fst::FST$Arc::initializeClass, ::java::util::Comparator::initializeClass, &a0, &p0, ::org::apache::lucene::util::fst::t_FST::parameters_, &a1, &p1, ::org::apache::lucene::util::fst::t_FST$Arc::parameters_, &a2, &a3, &p3, ::java::util::t_Comparator::parameters_, &a4, &a5))
            {
              OBJ_CALL(result = ::org::apache::lucene::util::fst::Util::shortestPaths(a0, a1, a2, a3, a4, a5));
              return ::org::apache::lucene::util::fst::t_Util$TopResults::wrap_Object(result);
            }

            PyErr_SetArgsError(type, "shortestPaths", args);
            return NULL;
          }

          static PyObject *t_Util_toBytesRef(PyTypeObject *type, PyObject *args)
          {
            ::org::apache::lucene::util::IntsRef a0((jobject) NULL);
            ::org::apache::lucene::util::BytesRefBuilder a1((jobject) NULL);
            ::org::apache::lucene::util::BytesRef result((jobject) NULL);

            if (!parseArgs(args, "kk", ::org::apache::lucene::util::IntsRef::initializeClass, ::org::apache::lucene::util::BytesRefBuilder::initializeClass, &a0, &a1))
            {
              OBJ_CALL(result = ::org::apache::lucene::util::fst::Util::toBytesRef(a0, a1));
              return ::org::apache::lucene::util::t_BytesRef::wrap_Object(result);
            }

            PyErr_SetArgsError(type, "toBytesRef", args);
            return NULL;
          }

          static PyObject *t_Util_toDot(PyTypeObject *type, PyObject *args)
          {
            ::org::apache::lucene::util::fst::FST a0((jobject) NULL);
            PyTypeObject **p0;
            ::java::io::Writer a1((jobject) NULL);
            jboolean a2;
            jboolean a3;

            if (!parseArgs(args, "KkZZ", ::org::apache::lucene::util::fst::FST::initializeClass, ::java::io::Writer::initializeClass, &a0, &p0, ::org::apache::lucene::util::fst::t_FST::parameters_, &a1, &a2, &a3))
            {
              OBJ_CALL(::org::apache::lucene::util::fst::Util::toDot(a0, a1, a2, a3));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError(type, "toDot", args);
            return NULL;
          }

          static PyObject *t_Util_toIntsRef(PyTypeObject *type, PyObject *args)
          {
            ::org::apache::lucene::util::BytesRef a0((jobject) NULL);
            ::org::apache::lucene::util::IntsRefBuilder a1((jobject) NULL);
            ::org::apache::lucene::util::IntsRef result((jobject) NULL);

            if (!parseArgs(args, "kk", ::org::apache::lucene::util::BytesRef::initializeClass, ::org::apache::lucene::util::IntsRefBuilder::initializeClass, &a0, &a1))
            {
              OBJ_CALL(result = ::org::apache::lucene::util::fst::Util::toIntsRef(a0, a1));
              return ::org::apache::lucene::util::t_IntsRef::wrap_Object(result);
            }

            PyErr_SetArgsError(type, "toIntsRef", args);
            return NULL;
          }

          static PyObject *t_Util_toUTF16(PyTypeObject *type, PyObject *args)
          {
            ::java::lang::CharSequence a0((jobject) NULL);
            ::org::apache::lucene::util::IntsRefBuilder a1((jobject) NULL);
            ::org::apache::lucene::util::IntsRef result((jobject) NULL);

            if (!parseArgs(args, "Ok", ::java::lang::PY_TYPE(CharSequence), ::org::apache::lucene::util::IntsRefBuilder::initializeClass, &a0, &a1))
            {
              OBJ_CALL(result = ::org::apache::lucene::util::fst::Util::toUTF16(a0, a1));
              return ::org::apache::lucene::util::t_IntsRef::wrap_Object(result);
            }

            PyErr_SetArgsError(type, "toUTF16", args);
            return NULL;
          }

          static PyObject *t_Util_toUTF32(PyTypeObject *type, PyObject *args)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 2:
              {
                ::java::lang::CharSequence a0((jobject) NULL);
                ::org::apache::lucene::util::IntsRefBuilder a1((jobject) NULL);
                ::org::apache::lucene::util::IntsRef result((jobject) NULL);

                if (!parseArgs(args, "Ok", ::java::lang::PY_TYPE(CharSequence), ::org::apache::lucene::util::IntsRefBuilder::initializeClass, &a0, &a1))
                {
                  OBJ_CALL(result = ::org::apache::lucene::util::fst::Util::toUTF32(a0, a1));
                  return ::org::apache::lucene::util::t_IntsRef::wrap_Object(result);
                }
              }
              break;
             case 4:
              {
                JArray< jchar > a0((jobject) NULL);
                jint a1;
                jint a2;
                ::org::apache::lucene::util::IntsRefBuilder a3((jobject) NULL);
                ::org::apache::lucene::util::IntsRef result((jobject) NULL);

                if (!parseArgs(args, "[CIIk", ::org::apache::lucene::util::IntsRefBuilder::initializeClass, &a0, &a1, &a2, &a3))
                {
                  OBJ_CALL(result = ::org::apache::lucene::util::fst::Util::toUTF32(a0, a1, a2, a3));
                  return ::org::apache::lucene::util::t_IntsRef::wrap_Object(result);
                }
              }
            }

            PyErr_SetArgsError(type, "toUTF32", args);
            return NULL;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/reverse/ReverseStringFilterFactory.h"
#include "java/util/Map.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/analysis/TokenStream.h"
#include "org/apache/lucene/analysis/reverse/ReverseStringFilter.h"
#include "java/lang/String.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace reverse {

          ::java::lang::Class *ReverseStringFilterFactory::class$ = NULL;
          jmethodID *ReverseStringFilterFactory::mids$ = NULL;
          bool ReverseStringFilterFactory::live$ = false;
          ::java::lang::String *ReverseStringFilterFactory::NAME = NULL;

          jclass ReverseStringFilterFactory::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/reverse/ReverseStringFilterFactory");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_408bd889ee3beae5] = env->getMethodID(cls, "<init>", "(Ljava/util/Map;)V");
              mids$[mid_create_b4b07d5bbbb3dec3] = env->getMethodID(cls, "create", "(Lorg/apache/lucene/analysis/TokenStream;)Lorg/apache/lucene/analysis/reverse/ReverseStringFilter;");

              class$ = new ::java::lang::Class(cls);
              cls = (jclass) class$->this$;

              NAME = new ::java::lang::String(env->getStaticObjectField(cls, "NAME", "Ljava/lang/String;"));
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          ReverseStringFilterFactory::ReverseStringFilterFactory(const ::java::util::Map & a0) : ::org::apache::lucene::analysis::util::TokenFilterFactory(env->newObject(initializeClass, &mids$, mid_init$_408bd889ee3beae5, a0.this$)) {}

          ::org::apache::lucene::analysis::reverse::ReverseStringFilter ReverseStringFilterFactory::create(const ::org::apache::lucene::analysis::TokenStream & a0) const
          {
            return ::org::apache::lucene::analysis::reverse::ReverseStringFilter(env->callObjectMethod(this$, mids$[mid_create_b4b07d5bbbb3dec3], a0.this$));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace reverse {
          static PyObject *t_ReverseStringFilterFactory_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_ReverseStringFilterFactory_instance_(PyTypeObject *type, PyObject *arg);
          static int t_ReverseStringFilterFactory_init_(t_ReverseStringFilterFactory *self, PyObject *args, PyObject *kwds);
          static PyObject *t_ReverseStringFilterFactory_create(t_ReverseStringFilterFactory *self, PyObject *args);

          static PyMethodDef t_ReverseStringFilterFactory__methods_[] = {
            DECLARE_METHOD(t_ReverseStringFilterFactory, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_ReverseStringFilterFactory, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_ReverseStringFilterFactory, create, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          static PyType_Slot PY_TYPE_SLOTS(ReverseStringFilterFactory)[] = {
            { Py_tp_methods, t_ReverseStringFilterFactory__methods_ },
            { Py_tp_init, (void *) t_ReverseStringFilterFactory_init_ },
            { 0, NULL }
          };

          static PyType_Def *PY_TYPE_BASES(ReverseStringFilterFactory)[] = {
            &PY_TYPE_DEF(::org::apache::lucene::analysis::util::TokenFilterFactory),
            NULL
          };

          DEFINE_TYPE(ReverseStringFilterFactory, t_ReverseStringFilterFactory, ReverseStringFilterFactory);

          void t_ReverseStringFilterFactory::install(PyObject *module)
          {
            installType(&PY_TYPE(ReverseStringFilterFactory), &PY_TYPE_DEF(ReverseStringFilterFactory), module, "ReverseStringFilterFactory", 0);
          }

          void t_ReverseStringFilterFactory::initialize(PyObject *module)
          {
            PyObject_SetAttrString((PyObject *) PY_TYPE(ReverseStringFilterFactory), "class_", make_descriptor(ReverseStringFilterFactory::initializeClass, 1));
            PyObject_SetAttrString((PyObject *) PY_TYPE(ReverseStringFilterFactory), "wrapfn_", make_descriptor(t_ReverseStringFilterFactory::wrap_jobject));
            PyObject_SetAttrString((PyObject *) PY_TYPE(ReverseStringFilterFactory), "boxfn_", make_descriptor(boxObject));
            env->getClass(ReverseStringFilterFactory::initializeClass);
            PyObject_SetAttrString((PyObject *) PY_TYPE(ReverseStringFilterFactory), "NAME", make_descriptor(j2p(*ReverseStringFilterFactory::NAME)));
          }

          static PyObject *t_ReverseStringFilterFactory_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, ReverseStringFilterFactory::initializeClass, 1)))
              return NULL;
            return t_ReverseStringFilterFactory::wrap_Object(ReverseStringFilterFactory(((t_ReverseStringFilterFactory *) arg)->object.this$));
          }
          static PyObject *t_ReverseStringFilterFactory_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, ReverseStringFilterFactory::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_ReverseStringFilterFactory_init_(t_ReverseStringFilterFactory *self, PyObject *args, PyObject *kwds)
          {
            ::java::util::Map a0((jobject) NULL);
            PyTypeObject **p0;
            ReverseStringFilterFactory object((jobject) NULL);

            if (!parseArgs(args, "K", ::java::util::Map::initializeClass, &a0, &p0, ::java::util::t_Map::parameters_))
            {
              INT_CALL(object = ReverseStringFilterFactory(a0));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_ReverseStringFilterFactory_create(t_ReverseStringFilterFactory *self, PyObject *args)
          {
            ::org::apache::lucene::analysis::TokenStream a0((jobject) NULL);
            ::org::apache::lucene::analysis::reverse::ReverseStringFilter result((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::analysis::TokenStream::initializeClass, &a0))
            {
              OBJ_CALL(result = self->object.create(a0));
              return ::org::apache::lucene::analysis::reverse::t_ReverseStringFilter::wrap_Object(result);
            }

            return callSuper(PY_TYPE(ReverseStringFilterFactory), (PyObject *) self, "create", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/Collector.h"
#include "org/apache/lucene/index/LeafReaderContext.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/search/LeafCollector.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/search/ScoreMode.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {

        ::java::lang::Class *Collector::class$ = NULL;
        jmethodID *Collector::mids$ = NULL;
        bool Collector::live$ = false;

        jclass Collector::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/search/Collector");

            mids$ = new jmethodID[max_mid];
            mids$[mid_getLeafCollector_d5dbc8c30b21e920] = env->getMethodID(cls, "getLeafCollector", "(Lorg/apache/lucene/index/LeafReaderContext;)Lorg/apache/lucene/search/LeafCollector;");
            mids$[mid_scoreMode_8a35254b82ee8276] = env->getMethodID(cls, "scoreMode", "()Lorg/apache/lucene/search/ScoreMode;");

            class$ = new ::java::lang::Class(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        ::org::apache::lucene::search::LeafCollector Collector::getLeafCollector(const ::org::apache::lucene::index::LeafReaderContext & a0) const
        {
          return ::org::apache::lucene::search::LeafCollector(env->callObjectMethod(this$, mids$[mid_getLeafCollector_d5dbc8c30b21e920], a0.this$));
        }

        ::org::apache::lucene::search::ScoreMode Collector::scoreMode() const
        {
          return ::org::apache::lucene::search::ScoreMode(env->callObjectMethod(this$, mids$[mid_scoreMode_8a35254b82ee8276]));
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        static PyObject *t_Collector_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_Collector_instance_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_Collector_getLeafCollector(t_Collector *self, PyObject *arg);
        static PyObject *t_Collector_scoreMode(t_Collector *self);

        static PyMethodDef t_Collector__methods_[] = {
          DECLARE_METHOD(t_Collector, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_Collector, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_Collector, getLeafCollector, METH_O),
          DECLARE_METHOD(t_Collector, scoreMode, METH_NOARGS),
          { NULL, NULL, 0, NULL }
        };

        static PyType_Slot PY_TYPE_SLOTS(Collector)[] = {
          { Py_tp_methods, t_Collector__methods_ },
          { Py_tp_init, (void *) abstract_init },
          { 0, NULL }
        };

        static PyType_Def *PY_TYPE_BASES(Collector)[] = {
          &PY_TYPE_DEF(::java::lang::Object),
          NULL
        };

        DEFINE_TYPE(Collector, t_Collector, Collector);

        void t_Collector::install(PyObject *module)
        {
          installType(&PY_TYPE(Collector), &PY_TYPE_DEF(Collector), module, "Collector", 0);
        }

        void t_Collector::initialize(PyObject *module)
        {
          PyObject_SetAttrString((PyObject *) PY_TYPE(Collector), "class_", make_descriptor(Collector::initializeClass, 1));
          PyObject_SetAttrString((PyObject *) PY_TYPE(Collector), "wrapfn_", make_descriptor(t_Collector::wrap_jobject));
          PyObject_SetAttrString((PyObject *) PY_TYPE(Collector), "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_Collector_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, Collector::initializeClass, 1)))
            return NULL;
          return t_Collector::wrap_Object(Collector(((t_Collector *) arg)->object.this$));
        }
        static PyObject *t_Collector_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, Collector::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static PyObject *t_Collector_getLeafCollector(t_Collector *self, PyObject *arg)
        {
          ::org::apache::lucene::index::LeafReaderContext a0((jobject) NULL);
          ::org::apache::lucene::search::LeafCollector result((jobject) NULL);

          if (!parseArg(arg, "k", ::org::apache::lucene::index::LeafReaderContext::initializeClass, &a0))
          {
            OBJ_CALL(result = self->object.getLeafCollector(a0));
            return ::org::apache::lucene::search::t_LeafCollector::wrap_Object(result);
          }

          PyErr_SetArgsError((PyObject *) self, "getLeafCollector", arg);
          return NULL;
        }

        static PyObject *t_Collector_scoreMode(t_Collector *self)
        {
          ::org::apache::lucene::search::ScoreMode result((jobject) NULL);
          OBJ_CALL(result = self->object.scoreMode());
          return ::org::apache::lucene::search::t_ScoreMode::wrap_Object(result);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/fa/PersianCharFilter.h"
#include "java/io/IOException.h"
#include "java/io/Reader.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace fa {

          ::java::lang::Class *PersianCharFilter::class$ = NULL;
          jmethodID *PersianCharFilter::mids$ = NULL;
          bool PersianCharFilter::live$ = false;

          jclass PersianCharFilter::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/fa/PersianCharFilter");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_b2f3c57f5e6eb3f2] = env->getMethodID(cls, "<init>", "(Ljava/io/Reader;)V");
              mids$[mid_read_9972fcc56b44e79d] = env->getMethodID(cls, "read", "()I");
              mids$[mid_read_644fc0bf0aa7fb26] = env->getMethodID(cls, "read", "([CII)I");
              mids$[mid_correct_1e143afe1894d213] = env->getMethodID(cls, "correct", "(I)I");

              class$ = new ::java::lang::Class(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          PersianCharFilter::PersianCharFilter(const ::java::io::Reader & a0) : ::org::apache::lucene::analysis::CharFilter(env->newObject(initializeClass, &mids$, mid_init$_b2f3c57f5e6eb3f2, a0.this$)) {}

          jint PersianCharFilter::read() const
          {
            return env->callIntMethod(this$, mids$[mid_read_9972fcc56b44e79d]);
          }

          jint PersianCharFilter::read(const JArray< jchar > & a0, jint a1, jint a2) const
          {
            return env->callIntMethod(this$, mids$[mid_read_644fc0bf0aa7fb26], a0.this$, a1, a2);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace fa {
          static PyObject *t_PersianCharFilter_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_PersianCharFilter_instance_(PyTypeObject *type, PyObject *arg);
          static int t_PersianCharFilter_init_(t_PersianCharFilter *self, PyObject *args, PyObject *kwds);
          static PyObject *t_PersianCharFilter_read(t_PersianCharFilter *self, PyObject *args);

          static PyMethodDef t_PersianCharFilter__methods_[] = {
            DECLARE_METHOD(t_PersianCharFilter, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_PersianCharFilter, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_PersianCharFilter, read, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          static PyType_Slot PY_TYPE_SLOTS(PersianCharFilter)[] = {
            { Py_tp_methods, t_PersianCharFilter__methods_ },
            { Py_tp_init, (void *) t_PersianCharFilter_init_ },
            { 0, NULL }
          };

          static PyType_Def *PY_TYPE_BASES(PersianCharFilter)[] = {
            &PY_TYPE_DEF(::org::apache::lucene::analysis::CharFilter),
            NULL
          };

          DEFINE_TYPE(PersianCharFilter, t_PersianCharFilter, PersianCharFilter);

          void t_PersianCharFilter::install(PyObject *module)
          {
            installType(&PY_TYPE(PersianCharFilter), &PY_TYPE_DEF(PersianCharFilter), module, "PersianCharFilter", 0);
          }

          void t_PersianCharFilter::initialize(PyObject *module)
          {
            PyObject_SetAttrString((PyObject *) PY_TYPE(PersianCharFilter), "class_", make_descriptor(PersianCharFilter::initializeClass, 1));
            PyObject_SetAttrString((PyObject *) PY_TYPE(PersianCharFilter), "wrapfn_", make_descriptor(t_PersianCharFilter::wrap_jobject));
            PyObject_SetAttrString((PyObject *) PY_TYPE(PersianCharFilter), "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_PersianCharFilter_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, PersianCharFilter::initializeClass, 1)))
              return NULL;
            return t_PersianCharFilter::wrap_Object(PersianCharFilter(((t_PersianCharFilter *) arg)->object.this$));
          }
          static PyObject *t_PersianCharFilter_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, PersianCharFilter::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_PersianCharFilter_init_(t_PersianCharFilter *self, PyObject *args, PyObject *kwds)
          {
            ::java::io::Reader a0((jobject) NULL);
            PersianCharFilter object((jobject) NULL);

            if (!parseArgs(args, "k", ::java::io::Reader::initializeClass, &a0))
            {
              INT_CALL(object = PersianCharFilter(a0));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_PersianCharFilter_read(t_PersianCharFilter *self, PyObject *args)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 0:
              {
                jint result;
                OBJ_CALL(result = self->object.read());
                return PyLong_FromLong((long) result);
              }
              break;
             case 3:
              {
                JArray< jchar > a0((jobject) NULL);
                jint a1;
                jint a2;
                jint result;

                if (!parseArgs(args, "[CII", &a0, &a1, &a2))
                {
                  OBJ_CALL(result = self->object.read(a0, a1, a2));
                  return PyLong_FromLong((long) result);
                }
              }
            }

            return callSuper(PY_TYPE(PersianCharFilter), (PyObject *) self, "read", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/QueryCache.h"
#include "org/apache/lucene/search/QueryCachingPolicy.h"
#include "org/apache/lucene/search/Weight.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {

        ::java::lang::Class *QueryCache::class$ = NULL;
        jmethodID *QueryCache::mids$ = NULL;
        bool QueryCache::live$ = false;

        jclass QueryCache::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/search/QueryCache");

            mids$ = new jmethodID[max_mid];
            mids$[mid_doCache_739d035002ca686c] = env->getMethodID(cls, "doCache", "(Lorg/apache/lucene/search/Weight;Lorg/apache/lucene/search/QueryCachingPolicy;)Lorg/apache/lucene/search/Weight;");

            class$ = new ::java::lang::Class(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        ::org::apache::lucene::search::Weight QueryCache::doCache(const ::org::apache::lucene::search::Weight & a0, const ::org::apache::lucene::search::QueryCachingPolicy & a1) const
        {
          return ::org::apache::lucene::search::Weight(env->callObjectMethod(this$, mids$[mid_doCache_739d035002ca686c], a0.this$, a1.this$));
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        static PyObject *t_QueryCache_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_QueryCache_instance_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_QueryCache_doCache(t_QueryCache *self, PyObject *args);

        static PyMethodDef t_QueryCache__methods_[] = {
          DECLARE_METHOD(t_QueryCache, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_QueryCache, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_QueryCache, doCache, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        static PyType_Slot PY_TYPE_SLOTS(QueryCache)[] = {
          { Py_tp_methods, t_QueryCache__methods_ },
          { Py_tp_init, (void *) abstract_init },
          { 0, NULL }
        };

        static PyType_Def *PY_TYPE_BASES(QueryCache)[] = {
          &PY_TYPE_DEF(::java::lang::Object),
          NULL
        };

        DEFINE_TYPE(QueryCache, t_QueryCache, QueryCache);

        void t_QueryCache::install(PyObject *module)
        {
          installType(&PY_TYPE(QueryCache), &PY_TYPE_DEF(QueryCache), module, "QueryCache", 0);
        }

        void t_QueryCache::initialize(PyObject *module)
        {
          PyObject_SetAttrString((PyObject *) PY_TYPE(QueryCache), "class_", make_descriptor(QueryCache::initializeClass, 1));
          PyObject_SetAttrString((PyObject *) PY_TYPE(QueryCache), "wrapfn_", make_descriptor(t_QueryCache::wrap_jobject));
          PyObject_SetAttrString((PyObject *) PY_TYPE(QueryCache), "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_QueryCache_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, QueryCache::initializeClass, 1)))
            return NULL;
          return t_QueryCache::wrap_Object(QueryCache(((t_QueryCache *) arg)->object.this$));
        }
        static PyObject *t_QueryCache_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, QueryCache::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static PyObject *t_QueryCache_doCache(t_QueryCache *self, PyObject *args)
        {
          ::org::apache::lucene::search::Weight a0((jobject) NULL);
          ::org::apache::lucene::search::QueryCachingPolicy a1((jobject) NULL);
          ::org::apache::lucene::search::Weight result((jobject) NULL);

          if (!parseArgs(args, "kk", ::org::apache::lucene::search::Weight::initializeClass, ::org::apache::lucene::search::QueryCachingPolicy::initializeClass, &a0, &a1))
          {
            OBJ_CALL(result = self->object.doCache(a0, a1));
            return ::org::apache::lucene::search::t_Weight::wrap_Object(result);
          }

          PyErr_SetArgsError((PyObject *) self, "doCache", args);
          return NULL;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/codecs/lucene50/Lucene50PostingsReader.h"
#include "org/apache/lucene/store/DataInput.h"
#include "org/apache/lucene/index/ImpactsEnum.h"
#include "org/apache/lucene/store/IndexInput.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/index/SegmentReadState.h"
#include "org/apache/lucene/index/PostingsEnum.h"
#include "java/lang/String.h"
#include "org/apache/lucene/index/FieldInfo.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/codecs/BlockTermState.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace codecs {
        namespace lucene50 {

          ::java::lang::Class *Lucene50PostingsReader::class$ = NULL;
          jmethodID *Lucene50PostingsReader::mids$ = NULL;
          bool Lucene50PostingsReader::live$ = false;

          jclass Lucene50PostingsReader::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/codecs/lucene50/Lucene50PostingsReader");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_363fedc32cc1a1cf] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/index/SegmentReadState;)V");
              mids$[mid_checkIntegrity_f2cc1bce94666404] = env->getMethodID(cls, "checkIntegrity", "()V");
              mids$[mid_close_f2cc1bce94666404] = env->getMethodID(cls, "close", "()V");
              mids$[mid_decodeTerm_96c712031f56c3ca] = env->getMethodID(cls, "decodeTerm", "(Lorg/apache/lucene/store/DataInput;Lorg/apache/lucene/index/FieldInfo;Lorg/apache/lucene/codecs/BlockTermState;Z)V");
              mids$[mid_impacts_c827249ad6105c32] = env->getMethodID(cls, "impacts", "(Lorg/apache/lucene/index/FieldInfo;Lorg/apache/lucene/codecs/BlockTermState;I)Lorg/apache/lucene/index/ImpactsEnum;");
              mids$[mid_init_80eb712663869aa2] = env->getMethodID(cls, "init", "(Lorg/apache/lucene/store/IndexInput;Lorg/apache/lucene/index/SegmentReadState;)V");
              mids$[mid_newTermState_ec21239f6d5a0c5b] = env->getMethodID(cls, "newTermState", "()Lorg/apache/lucene/codecs/BlockTermState;");
              mids$[mid_postings_07f95f4d18ad7976] = env->getMethodID(cls, "postings", "(Lorg/apache/lucene/index/FieldInfo;Lorg/apache/lucene/codecs/BlockTermState;Lorg/apache/lucene/index/PostingsEnum;I)Lorg/apache/lucene/index/PostingsEnum;");
              mids$[mid_ramBytesUsed_2e5ae9edcb9b072f] = env->getMethodID(cls, "ramBytesUsed", "()J");
              mids$[mid_toString_db9b55ba01e03e4b] = env->getMethodID(cls, "toString", "()Ljava/lang/String;");

              class$ = new ::java::lang::Class(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          Lucene50PostingsReader::Lucene50PostingsReader(const ::org::apache::lucene::index::SegmentReadState & a0) : ::org::apache::lucene::codecs::PostingsReaderBase(env->newObject(initializeClass, &mids$, mid_init$_363fedc32cc1a1cf, a0.this$)) {}

          void Lucene50PostingsReader::checkIntegrity() const
          {
            env->callVoidMethod(this$, mids$[mid_checkIntegrity_f2cc1bce94666404]);
          }

          void Lucene50PostingsReader::close() const
          {
            env->callVoidMethod(this$, mids$[mid_close_f2cc1bce94666404]);
          }

          void Lucene50PostingsReader::decodeTerm(const ::org::apache::lucene::store::DataInput & a0, const ::org::apache::lucene::index::FieldInfo & a1, const ::org::apache::lucene::codecs::BlockTermState & a2, jboolean a3) const
          {
            env->callVoidMethod(this$, mids$[mid_decodeTerm_96c712031f56c3ca], a0.this$, a1.this$, a2.this$, a3);
          }

          ::org::apache::lucene::index::ImpactsEnum Lucene50PostingsReader::impacts(const ::org::apache::lucene::index::FieldInfo & a0, const ::org::apache::lucene::codecs::BlockTermState & a1, jint a2) const
          {
            return ::org::apache::lucene::index::ImpactsEnum(env->callObjectMethod(this$, mids$[mid_impacts_c827249ad6105c32], a0.this$, a1.this$, a2));
          }

          void Lucene50PostingsReader::init(const ::org::apache::lucene::store::IndexInput & a0, const ::org::apache::lucene::index::SegmentReadState & a1) const
          {
            env->callVoidMethod(this$, mids$[mid_init_80eb712663869aa2], a0.this$, a1.this$);
          }

          ::org::apache::lucene::codecs::BlockTermState Lucene50PostingsReader::newTermState() const
          {
            return ::org::apache::lucene::codecs::BlockTermState(env->callObjectMethod(this$, mids$[mid_newTermState_ec21239f6d5a0c5b]));
          }

          ::org::apache::lucene::index::PostingsEnum Lucene50PostingsReader::postings(const ::org::apache::lucene::index::FieldInfo & a0, const ::org::apache::lucene::codecs::BlockTermState & a1, const ::org::apache::lucene::index::PostingsEnum & a2, jint a3) const
          {
            return ::org::apache::lucene::index::PostingsEnum(env->callObjectMethod(this$, mids$[mid_postings_07f95f4d18ad7976], a0.this$, a1.this$, a2.this$, a3));
          }

          jlong Lucene50PostingsReader::ramBytesUsed() const
          {
            return env->callLongMethod(this$, mids$[mid_ramBytesUsed_2e5ae9edcb9b072f]);
          }

          ::java::lang::String Lucene50PostingsReader::toString() const
          {
            return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_db9b55ba01e03e4b]));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace codecs {
        namespace lucene50 {
          static PyObject *t_Lucene50PostingsReader_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_Lucene50PostingsReader_instance_(PyTypeObject *type, PyObject *arg);
          static int t_Lucene50PostingsReader_init_(t_Lucene50PostingsReader *self, PyObject *args, PyObject *kwds);
          static PyObject *t_Lucene50PostingsReader_checkIntegrity(t_Lucene50PostingsReader *self, PyObject *args);
          static PyObject *t_Lucene50PostingsReader_close(t_Lucene50PostingsReader *self, PyObject *args);
          static PyObject *t_Lucene50PostingsReader_decodeTerm(t_Lucene50PostingsReader *self, PyObject *args);
          static PyObject *t_Lucene50PostingsReader_impacts(t_Lucene50PostingsReader *self, PyObject *args);
          static PyObject *t_Lucene50PostingsReader_init(t_Lucene50PostingsReader *self, PyObject *args);
          static PyObject *t_Lucene50PostingsReader_newTermState(t_Lucene50PostingsReader *self, PyObject *args);
          static PyObject *t_Lucene50PostingsReader_postings(t_Lucene50PostingsReader *self, PyObject *args);
          static PyObject *t_Lucene50PostingsReader_ramBytesUsed(t_Lucene50PostingsReader *self, PyObject *args);
          static PyObject *t_Lucene50PostingsReader_toString(t_Lucene50PostingsReader *self, PyObject *args);

          static PyMethodDef t_Lucene50PostingsReader__methods_[] = {
            DECLARE_METHOD(t_Lucene50PostingsReader, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_Lucene50PostingsReader, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_Lucene50PostingsReader, checkIntegrity, METH_VARARGS),
            DECLARE_METHOD(t_Lucene50PostingsReader, close, METH_VARARGS),
            DECLARE_METHOD(t_Lucene50PostingsReader, decodeTerm, METH_VARARGS),
            DECLARE_METHOD(t_Lucene50PostingsReader, impacts, METH_VARARGS),
            DECLARE_METHOD(t_Lucene50PostingsReader, init, METH_VARARGS),
            DECLARE_METHOD(t_Lucene50PostingsReader, newTermState, METH_VARARGS),
            DECLARE_METHOD(t_Lucene50PostingsReader, postings, METH_VARARGS),
            DECLARE_METHOD(t_Lucene50PostingsReader, ramBytesUsed, METH_VARARGS),
            DECLARE_METHOD(t_Lucene50PostingsReader, toString, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          static PyType_Slot PY_TYPE_SLOTS(Lucene50PostingsReader)[] = {
            { Py_tp_methods, t_Lucene50PostingsReader__methods_ },
            { Py_tp_init, (void *) t_Lucene50PostingsReader_init_ },
            { 0, NULL }
          };

          static PyType_Def *PY_TYPE_BASES(Lucene50PostingsReader)[] = {
            &PY_TYPE_DEF(::org::apache::lucene::codecs::PostingsReaderBase),
            NULL
          };

          DEFINE_TYPE(Lucene50PostingsReader, t_Lucene50PostingsReader, Lucene50PostingsReader);

          void t_Lucene50PostingsReader::install(PyObject *module)
          {
            installType(&PY_TYPE(Lucene50PostingsReader), &PY_TYPE_DEF(Lucene50PostingsReader), module, "Lucene50PostingsReader", 0);
          }

          void t_Lucene50PostingsReader::initialize(PyObject *module)
          {
            PyObject_SetAttrString((PyObject *) PY_TYPE(Lucene50PostingsReader), "class_", make_descriptor(Lucene50PostingsReader::initializeClass, 1));
            PyObject_SetAttrString((PyObject *) PY_TYPE(Lucene50PostingsReader), "wrapfn_", make_descriptor(t_Lucene50PostingsReader::wrap_jobject));
            PyObject_SetAttrString((PyObject *) PY_TYPE(Lucene50PostingsReader), "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_Lucene50PostingsReader_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, Lucene50PostingsReader::initializeClass, 1)))
              return NULL;
            return t_Lucene50PostingsReader::wrap_Object(Lucene50PostingsReader(((t_Lucene50PostingsReader *) arg)->object.this$));
          }
          static PyObject *t_Lucene50PostingsReader_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, Lucene50PostingsReader::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_Lucene50PostingsReader_init_(t_Lucene50PostingsReader *self, PyObject *args, PyObject *kwds)
          {
            ::org::apache::lucene::index::SegmentReadState a0((jobject) NULL);
            Lucene50PostingsReader object((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::index::SegmentReadState::initializeClass, &a0))
            {
              INT_CALL(object = Lucene50PostingsReader(a0));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_Lucene50PostingsReader_checkIntegrity(t_Lucene50PostingsReader *self, PyObject *args)
          {

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(self->object.checkIntegrity());
              Py_RETURN_NONE;
            }

            return callSuper(PY_TYPE(Lucene50PostingsReader), (PyObject *) self, "checkIntegrity", args, 2);
          }

          static PyObject *t_Lucene50PostingsReader_close(t_Lucene50PostingsReader *self, PyObject *args)
          {

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(self->object.close());
              Py_RETURN_NONE;
            }

            return callSuper(PY_TYPE(Lucene50PostingsReader), (PyObject *) self, "close", args, 2);
          }

          static PyObject *t_Lucene50PostingsReader_decodeTerm(t_Lucene50PostingsReader *self, PyObject *args)
          {
            ::org::apache::lucene::store::DataInput a0((jobject) NULL);
            ::org::apache::lucene::index::FieldInfo a1((jobject) NULL);
            ::org::apache::lucene::codecs::BlockTermState a2((jobject) NULL);
            jboolean a3;

            if (!parseArgs(args, "kkkZ", ::org::apache::lucene::store::DataInput::initializeClass, ::org::apache::lucene::index::FieldInfo::initializeClass, ::org::apache::lucene::codecs::BlockTermState::initializeClass, &a0, &a1, &a2, &a3))
            {
              OBJ_CALL(self->object.decodeTerm(a0, a1, a2, a3));
              Py_RETURN_NONE;
            }

            return callSuper(PY_TYPE(Lucene50PostingsReader), (PyObject *) self, "decodeTerm", args, 2);
          }

          static PyObject *t_Lucene50PostingsReader_impacts(t_Lucene50PostingsReader *self, PyObject *args)
          {
            ::org::apache::lucene::index::FieldInfo a0((jobject) NULL);
            ::org::apache::lucene::codecs::BlockTermState a1((jobject) NULL);
            jint a2;
            ::org::apache::lucene::index::ImpactsEnum result((jobject) NULL);

            if (!parseArgs(args, "kkI", ::org::apache::lucene::index::FieldInfo::initializeClass, ::org::apache::lucene::codecs::BlockTermState::initializeClass, &a0, &a1, &a2))
            {
              OBJ_CALL(result = self->object.impacts(a0, a1, a2));
              return ::org::apache::lucene::index::t_ImpactsEnum::wrap_Object(result);
            }

            return callSuper(PY_TYPE(Lucene50PostingsReader), (PyObject *) self, "impacts", args, 2);
          }

          static PyObject *t_Lucene50PostingsReader_init(t_Lucene50PostingsReader *self, PyObject *args)
          {
            ::org::apache::lucene::store::IndexInput a0((jobject) NULL);
            ::org::apache::lucene::index::SegmentReadState a1((jobject) NULL);

            if (!parseArgs(args, "kk", ::org::apache::lucene::store::IndexInput::initializeClass, ::org::apache::lucene::index::SegmentReadState::initializeClass, &a0, &a1))
            {
              OBJ_CALL(self->object.init(a0, a1));
              Py_RETURN_NONE;
            }

            return callSuper(PY_TYPE(Lucene50PostingsReader), (PyObject *) self, "init", args, 2);
          }

          static PyObject *t_Lucene50PostingsReader_newTermState(t_Lucene50PostingsReader *self, PyObject *args)
          {
            ::org::apache::lucene::codecs::BlockTermState result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.newTermState());
              return ::org::apache::lucene::codecs::t_BlockTermState::wrap_Object(result);
            }

            return callSuper(PY_TYPE(Lucene50PostingsReader), (PyObject *) self, "newTermState", args, 2);
          }

          static PyObject *t_Lucene50PostingsReader_postings(t_Lucene50PostingsReader *self, PyObject *args)
          {
            ::org::apache::lucene::index::FieldInfo a0((jobject) NULL);
            ::org::apache::lucene::codecs::BlockTermState a1((jobject) NULL);
            ::org::apache::lucene::index::PostingsEnum a2((jobject) NULL);
            jint a3;
            ::org::apache::lucene::index::PostingsEnum result((jobject) NULL);

            if (!parseArgs(args, "kkkI", ::org::apache::lucene::index::FieldInfo::initializeClass, ::org::apache::lucene::codecs::BlockTermState::initializeClass, ::org::apache::lucene::index::PostingsEnum::initializeClass, &a0, &a1, &a2, &a3))
            {
              OBJ_CALL(result = self->object.postings(a0, a1, a2, a3));
              return ::org::apache::lucene::index::t_PostingsEnum::wrap_Object(result);
            }

            return callSuper(PY_TYPE(Lucene50PostingsReader), (PyObject *) self, "postings", args, 2);
          }

          static PyObject *t_Lucene50PostingsReader_ramBytesUsed(t_Lucene50PostingsReader *self, PyObject *args)
          {
            jlong result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.ramBytesUsed());
              return PyLong_FromLongLong((PY_LONG_LONG) result);
            }

            return callSuper(PY_TYPE(Lucene50PostingsReader), (PyObject *) self, "ramBytesUsed", args, 2);
          }

          static PyObject *t_Lucene50PostingsReader_toString(t_Lucene50PostingsReader *self, PyObject *args)
          {
            ::java::lang::String result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.toString());
              return j2p(result);
            }

            return callSuper(PY_TYPE(Lucene50PostingsReader), (PyObject *) self, "toString", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queries/function/valuesource/FloatFieldSource.h"
#include "java/util/Map.h"
#include "org/apache/lucene/index/LeafReaderContext.h"
#include "org/apache/lucene/search/SortField.h"
#include "org/apache/lucene/queries/function/FunctionValues.h"
#include "java/lang/Class.h"
#include "java/lang/Object.h"
#include "java/lang/String.h"
#include "java/io/IOException.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queries {
        namespace function {
          namespace valuesource {

            ::java::lang::Class *FloatFieldSource::class$ = NULL;
            jmethodID *FloatFieldSource::mids$ = NULL;
            bool FloatFieldSource::live$ = false;

            jclass FloatFieldSource::initializeClass(bool getOnly)
            {
              if (getOnly)
                return (jclass) (live$ ? class$->this$ : NULL);
              if (class$ == NULL)
              {
                jclass cls = (jclass) env->findClass("org/apache/lucene/queries/function/valuesource/FloatFieldSource");

                mids$ = new jmethodID[max_mid];
                mids$[mid_init$_9fd2eb66a64e6f0f] = env->getMethodID(cls, "<init>", "(Ljava/lang/String;)V");
                mids$[mid_description_db9b55ba01e03e4b] = env->getMethodID(cls, "description", "()Ljava/lang/String;");
                mids$[mid_equals_8b72f2dcdde6fd1d] = env->getMethodID(cls, "equals", "(Ljava/lang/Object;)Z");
                mids$[mid_getSortField_8a713675264264ba] = env->getMethodID(cls, "getSortField", "(Z)Lorg/apache/lucene/search/SortField;");
                mids$[mid_getValues_ede8eccd3e97f32c] = env->getMethodID(cls, "getValues", "(Ljava/util/Map;Lorg/apache/lucene/index/LeafReaderContext;)Lorg/apache/lucene/queries/function/FunctionValues;");
                mids$[mid_hashCode_9972fcc56b44e79d] = env->getMethodID(cls, "hashCode", "()I");
                mids$[mid_getNumericDocValues_991afb5c8a130516] = env->getMethodID(cls, "getNumericDocValues", "(Ljava/util/Map;Lorg/apache/lucene/index/LeafReaderContext;)Lorg/apache/lucene/index/NumericDocValues;");

                class$ = new ::java::lang::Class(cls);
                live$ = true;
              }
              return (jclass) class$->this$;
            }

            FloatFieldSource::FloatFieldSource(const ::java::lang::String & a0) : ::org::apache::lucene::queries::function::valuesource::FieldCacheSource(env->newObject(initializeClass, &mids$, mid_init$_9fd2eb66a64e6f0f, a0.this$)) {}

            ::java::lang::String FloatFieldSource::description() const
            {
              return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_description_db9b55ba01e03e4b]));
            }

            jboolean FloatFieldSource::equals(const ::java::lang::Object & a0) const
            {
              return env->callBooleanMethod(this$, mids$[mid_equals_8b72f2dcdde6fd1d], a0.this$);
            }

            ::org::apache::lucene::search::SortField FloatFieldSource::getSortField(jboolean a0) const
            {
              return ::org::apache::lucene::search::SortField(env->callObjectMethod(this$, mids$[mid_getSortField_8a713675264264ba], a0));
            }

            ::org::apache::lucene::queries::function::FunctionValues FloatFieldSource::getValues(const ::java::util::Map & a0, const ::org::apache::lucene::index::LeafReaderContext & a1) const
            {
              return ::org::apache::lucene::queries::function::FunctionValues(env->callObjectMethod(this$, mids$[mid_getValues_ede8eccd3e97f32c], a0.this$, a1.this$));
            }

            jint FloatFieldSource::hashCode() const
            {
              return env->callIntMethod(this$, mids$[mid_hashCode_9972fcc56b44e79d]);
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queries {
        namespace function {
          namespace valuesource {
            static PyObject *t_FloatFieldSource_cast_(PyTypeObject *type, PyObject *arg);
            static PyObject *t_FloatFieldSource_instance_(PyTypeObject *type, PyObject *arg);
            static int t_FloatFieldSource_init_(t_FloatFieldSource *self, PyObject *args, PyObject *kwds);
            static PyObject *t_FloatFieldSource_description(t_FloatFieldSource *self, PyObject *args);
            static PyObject *t_FloatFieldSource_equals(t_FloatFieldSource *self, PyObject *args);
            static PyObject *t_FloatFieldSource_getSortField(t_FloatFieldSource *self, PyObject *args);
            static PyObject *t_FloatFieldSource_getValues(t_FloatFieldSource *self, PyObject *args);
            static PyObject *t_FloatFieldSource_hashCode(t_FloatFieldSource *self, PyObject *args);

            static PyMethodDef t_FloatFieldSource__methods_[] = {
              DECLARE_METHOD(t_FloatFieldSource, cast_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_FloatFieldSource, instance_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_FloatFieldSource, description, METH_VARARGS),
              DECLARE_METHOD(t_FloatFieldSource, equals, METH_VARARGS),
              DECLARE_METHOD(t_FloatFieldSource, getSortField, METH_VARARGS),
              DECLARE_METHOD(t_FloatFieldSource, getValues, METH_VARARGS),
              DECLARE_METHOD(t_FloatFieldSource, hashCode, METH_VARARGS),
              { NULL, NULL, 0, NULL }
            };

            static PyType_Slot PY_TYPE_SLOTS(FloatFieldSource)[] = {
              { Py_tp_methods, t_FloatFieldSource__methods_ },
              { Py_tp_init, (void *) t_FloatFieldSource_init_ },
              { 0, NULL }
            };

            static PyType_Def *PY_TYPE_BASES(FloatFieldSource)[] = {
              &PY_TYPE_DEF(::org::apache::lucene::queries::function::valuesource::FieldCacheSource),
              NULL
            };

            DEFINE_TYPE(FloatFieldSource, t_FloatFieldSource, FloatFieldSource);

            void t_FloatFieldSource::install(PyObject *module)
            {
              installType(&PY_TYPE(FloatFieldSource), &PY_TYPE_DEF(FloatFieldSource), module, "FloatFieldSource", 0);
            }

            void t_FloatFieldSource::initialize(PyObject *module)
            {
              PyObject_SetAttrString((PyObject *) PY_TYPE(FloatFieldSource), "class_", make_descriptor(FloatFieldSource::initializeClass, 1));
              PyObject_SetAttrString((PyObject *) PY_TYPE(FloatFieldSource), "wrapfn_", make_descriptor(t_FloatFieldSource::wrap_jobject));
              PyObject_SetAttrString((PyObject *) PY_TYPE(FloatFieldSource), "boxfn_", make_descriptor(boxObject));
            }

            static PyObject *t_FloatFieldSource_cast_(PyTypeObject *type, PyObject *arg)
            {
              if (!(arg = castCheck(arg, FloatFieldSource::initializeClass, 1)))
                return NULL;
              return t_FloatFieldSource::wrap_Object(FloatFieldSource(((t_FloatFieldSource *) arg)->object.this$));
            }
            static PyObject *t_FloatFieldSource_instance_(PyTypeObject *type, PyObject *arg)
            {
              if (!castCheck(arg, FloatFieldSource::initializeClass, 0))
                Py_RETURN_FALSE;
              Py_RETURN_TRUE;
            }

            static int t_FloatFieldSource_init_(t_FloatFieldSource *self, PyObject *args, PyObject *kwds)
            {
              ::java::lang::String a0((jobject) NULL);
              FloatFieldSource object((jobject) NULL);

              if (!parseArgs(args, "s", &a0))
              {
                INT_CALL(object = FloatFieldSource(a0));
                self->object = object;
              }
              else
              {
                PyErr_SetArgsError((PyObject *) self, "__init__", args);
                return -1;
              }

              return 0;
            }

            static PyObject *t_FloatFieldSource_description(t_FloatFieldSource *self, PyObject *args)
            {
              ::java::lang::String result((jobject) NULL);

              if (!parseArgs(args, ""))
              {
                OBJ_CALL(result = self->object.description());
                return j2p(result);
              }

              return callSuper(PY_TYPE(FloatFieldSource), (PyObject *) self, "description", args, 2);
            }

            static PyObject *t_FloatFieldSource_equals(t_FloatFieldSource *self, PyObject *args)
            {
              ::java::lang::Object a0((jobject) NULL);
              jboolean result;

              if (!parseArgs(args, "o", &a0))
              {
                OBJ_CALL(result = self->object.equals(a0));
                Py_RETURN_BOOL(result);
              }

              return callSuper(PY_TYPE(FloatFieldSource), (PyObject *) self, "equals", args, 2);
            }

            static PyObject *t_FloatFieldSource_getSortField(t_FloatFieldSource *self, PyObject *args)
            {
              jboolean a0;
              ::org::apache::lucene::search::SortField result((jobject) NULL);

              if (!parseArgs(args, "Z", &a0))
              {
                OBJ_CALL(result = self->object.getSortField(a0));
                return ::org::apache::lucene::search::t_SortField::wrap_Object(result);
              }

              return callSuper(PY_TYPE(FloatFieldSource), (PyObject *) self, "getSortField", args, 2);
            }

            static PyObject *t_FloatFieldSource_getValues(t_FloatFieldSource *self, PyObject *args)
            {
              ::java::util::Map a0((jobject) NULL);
              PyTypeObject **p0;
              ::org::apache::lucene::index::LeafReaderContext a1((jobject) NULL);
              ::org::apache::lucene::queries::function::FunctionValues result((jobject) NULL);

              if (!parseArgs(args, "Kk", ::java::util::Map::initializeClass, ::org::apache::lucene::index::LeafReaderContext::initializeClass, &a0, &p0, ::java::util::t_Map::parameters_, &a1))
              {
                OBJ_CALL(result = self->object.getValues(a0, a1));
                return ::org::apache::lucene::queries::function::t_FunctionValues::wrap_Object(result);
              }

              return callSuper(PY_TYPE(FloatFieldSource), (PyObject *) self, "getValues", args, 2);
            }

            static PyObject *t_FloatFieldSource_hashCode(t_FloatFieldSource *self, PyObject *args)
            {
              jint result;

              if (!parseArgs(args, ""))
              {
                OBJ_CALL(result = self->object.hashCode());
                return PyLong_FromLong((long) result);
              }

              return callSuper(PY_TYPE(FloatFieldSource), (PyObject *) self, "hashCode", args, 2);
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/sinks/TeeSinkTokenFilter.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/analysis/TokenStream.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace sinks {

          ::java::lang::Class *TeeSinkTokenFilter::class$ = NULL;
          jmethodID *TeeSinkTokenFilter::mids$ = NULL;
          bool TeeSinkTokenFilter::live$ = false;

          jclass TeeSinkTokenFilter::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/sinks/TeeSinkTokenFilter");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_c26756868a754f4e] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/analysis/TokenStream;)V");
              mids$[mid_consumeAllTokens_f2cc1bce94666404] = env->getMethodID(cls, "consumeAllTokens", "()V");
              mids$[mid_end_f2cc1bce94666404] = env->getMethodID(cls, "end", "()V");
              mids$[mid_incrementToken_8454bd5aa23fd11e] = env->getMethodID(cls, "incrementToken", "()Z");
              mids$[mid_newSinkTokenStream_53a594dacf37f73d] = env->getMethodID(cls, "newSinkTokenStream", "()Lorg/apache/lucene/analysis/TokenStream;");
              mids$[mid_reset_f2cc1bce94666404] = env->getMethodID(cls, "reset", "()V");

              class$ = new ::java::lang::Class(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          TeeSinkTokenFilter::TeeSinkTokenFilter(const ::org::apache::lucene::analysis::TokenStream & a0) : ::org::apache::lucene::analysis::TokenFilter(env->newObject(initializeClass, &mids$, mid_init$_c26756868a754f4e, a0.this$)) {}

          void TeeSinkTokenFilter::consumeAllTokens() const
          {
            env->callVoidMethod(this$, mids$[mid_consumeAllTokens_f2cc1bce94666404]);
          }

          void TeeSinkTokenFilter::end() const
          {
            env->callVoidMethod(this$, mids$[mid_end_f2cc1bce94666404]);
          }

          jboolean TeeSinkTokenFilter::incrementToken() const
          {
            return env->callBooleanMethod(this$, mids$[mid_incrementToken_8454bd5aa23fd11e]);
          }

          ::org::apache::lucene::analysis::TokenStream TeeSinkTokenFilter::newSinkTokenStream() const
          {
            return ::org::apache::lucene::analysis::TokenStream(env->callObjectMethod(this$, mids$[mid_newSinkTokenStream_53a594dacf37f73d]));
          }

          void TeeSinkTokenFilter::reset() const
          {
            env->callVoidMethod(this$, mids$[mid_reset_f2cc1bce94666404]);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"
#include "org/apache/lucene/analysis/sinks/TeeSinkTokenFilter$SinkTokenStream.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace sinks {
          static PyObject *t_TeeSinkTokenFilter_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_TeeSinkTokenFilter_instance_(PyTypeObject *type, PyObject *arg);
          static int t_TeeSinkTokenFilter_init_(t_TeeSinkTokenFilter *self, PyObject *args, PyObject *kwds);
          static PyObject *t_TeeSinkTokenFilter_consumeAllTokens(t_TeeSinkTokenFilter *self);
          static PyObject *t_TeeSinkTokenFilter_end(t_TeeSinkTokenFilter *self, PyObject *args);
          static PyObject *t_TeeSinkTokenFilter_incrementToken(t_TeeSinkTokenFilter *self, PyObject *args);
          static PyObject *t_TeeSinkTokenFilter_newSinkTokenStream(t_TeeSinkTokenFilter *self);
          static PyObject *t_TeeSinkTokenFilter_reset(t_TeeSinkTokenFilter *self, PyObject *args);

          static PyMethodDef t_TeeSinkTokenFilter__methods_[] = {
            DECLARE_METHOD(t_TeeSinkTokenFilter, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_TeeSinkTokenFilter, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_TeeSinkTokenFilter, consumeAllTokens, METH_NOARGS),
            DECLARE_METHOD(t_TeeSinkTokenFilter, end, METH_VARARGS),
            DECLARE_METHOD(t_TeeSinkTokenFilter, incrementToken, METH_VARARGS),
            DECLARE_METHOD(t_TeeSinkTokenFilter, newSinkTokenStream, METH_NOARGS),
            DECLARE_METHOD(t_TeeSinkTokenFilter, reset, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          static PyType_Slot PY_TYPE_SLOTS(TeeSinkTokenFilter)[] = {
            { Py_tp_methods, t_TeeSinkTokenFilter__methods_ },
            { Py_tp_init, (void *) t_TeeSinkTokenFilter_init_ },
            { 0, NULL }
          };

          static PyType_Def *PY_TYPE_BASES(TeeSinkTokenFilter)[] = {
            &PY_TYPE_DEF(::org::apache::lucene::analysis::TokenFilter),
            NULL
          };

          DEFINE_TYPE(TeeSinkTokenFilter, t_TeeSinkTokenFilter, TeeSinkTokenFilter);

          void t_TeeSinkTokenFilter::install(PyObject *module)
          {
            installType(&PY_TYPE(TeeSinkTokenFilter), &PY_TYPE_DEF(TeeSinkTokenFilter), module, "TeeSinkTokenFilter", 0);
            PyObject_SetAttrString((PyObject *) PY_TYPE(TeeSinkTokenFilter), "SinkTokenStream", make_descriptor(&PY_TYPE_DEF(TeeSinkTokenFilter$SinkTokenStream)));
          }

          void t_TeeSinkTokenFilter::initialize(PyObject *module)
          {
            PyObject_SetAttrString((PyObject *) PY_TYPE(TeeSinkTokenFilter), "class_", make_descriptor(TeeSinkTokenFilter::initializeClass, 1));
            PyObject_SetAttrString((PyObject *) PY_TYPE(TeeSinkTokenFilter), "wrapfn_", make_descriptor(t_TeeSinkTokenFilter::wrap_jobject));
            PyObject_SetAttrString((PyObject *) PY_TYPE(TeeSinkTokenFilter), "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_TeeSinkTokenFilter_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, TeeSinkTokenFilter::initializeClass, 1)))
              return NULL;
            return t_TeeSinkTokenFilter::wrap_Object(TeeSinkTokenFilter(((t_TeeSinkTokenFilter *) arg)->object.this$));
          }
          static PyObject *t_TeeSinkTokenFilter_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, TeeSinkTokenFilter::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_TeeSinkTokenFilter_init_(t_TeeSinkTokenFilter *self, PyObject *args, PyObject *kwds)
          {
            ::org::apache::lucene::analysis::TokenStream a0((jobject) NULL);
            TeeSinkTokenFilter object((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::analysis::TokenStream::initializeClass, &a0))
            {
              INT_CALL(object = TeeSinkTokenFilter(a0));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_TeeSinkTokenFilter_consumeAllTokens(t_TeeSinkTokenFilter *self)
          {
            OBJ_CALL(self->object.consumeAllTokens());
            Py_RETURN_NONE;
          }

          static PyObject *t_TeeSinkTokenFilter_end(t_TeeSinkTokenFilter *self, PyObject *args)
          {

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(self->object.end());
              Py_RETURN_NONE;
            }

            return callSuper(PY_TYPE(TeeSinkTokenFilter), (PyObject *) self, "end", args, 2);
          }

          static PyObject *t_TeeSinkTokenFilter_incrementToken(t_TeeSinkTokenFilter *self, PyObject *args)
          {
            jboolean result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.incrementToken());
              Py_RETURN_BOOL(result);
            }

            return callSuper(PY_TYPE(TeeSinkTokenFilter), (PyObject *) self, "incrementToken", args, 2);
          }

          static PyObject *t_TeeSinkTokenFilter_newSinkTokenStream(t_TeeSinkTokenFilter *self)
          {
            ::org::apache::lucene::analysis::TokenStream result((jobject) NULL);
            OBJ_CALL(result = self->object.newSinkTokenStream());
            return ::org::apache::lucene::analysis::t_TokenStream::wrap_Object(result);
          }

          static PyObject *t_TeeSinkTokenFilter_reset(t_TeeSinkTokenFilter *self, PyObject *args)
          {

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(self->object.reset());
              Py_RETURN_NONE;
            }

            return callSuper(PY_TYPE(TeeSinkTokenFilter), (PyObject *) self, "reset", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/util/automaton/AutomatonProvider.h"
#include "org/apache/lucene/util/automaton/Automaton.h"
#include "java/lang/String.h"
#include "java/io/IOException.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        namespace automaton {

          ::java::lang::Class *AutomatonProvider::class$ = NULL;
          jmethodID *AutomatonProvider::mids$ = NULL;
          bool AutomatonProvider::live$ = false;

          jclass AutomatonProvider::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/util/automaton/AutomatonProvider");

              mids$ = new jmethodID[max_mid];
              mids$[mid_getAutomaton_4af768456c0d501c] = env->getMethodID(cls, "getAutomaton", "(Ljava/lang/String;)Lorg/apache/lucene/util/automaton/Automaton;");

              class$ = new ::java::lang::Class(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          ::org::apache::lucene::util::automaton::Automaton AutomatonProvider::getAutomaton(const ::java::lang::String & a0) const
          {
            return ::org::apache::lucene::util::automaton::Automaton(env->callObjectMethod(this$, mids$[mid_getAutomaton_4af768456c0d501c], a0.this$));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        namespace automaton {
          static PyObject *t_AutomatonProvider_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_AutomatonProvider_instance_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_AutomatonProvider_getAutomaton(t_AutomatonProvider *self, PyObject *arg);

          static PyMethodDef t_AutomatonProvider__methods_[] = {
            DECLARE_METHOD(t_AutomatonProvider, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_AutomatonProvider, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_AutomatonProvider, getAutomaton, METH_O),
            { NULL, NULL, 0, NULL }
          };

          static PyType_Slot PY_TYPE_SLOTS(AutomatonProvider)[] = {
            { Py_tp_methods, t_AutomatonProvider__methods_ },
            { Py_tp_init, (void *) abstract_init },
            { 0, NULL }
          };

          static PyType_Def *PY_TYPE_BASES(AutomatonProvider)[] = {
            &PY_TYPE_DEF(::java::lang::Object),
            NULL
          };

          DEFINE_TYPE(AutomatonProvider, t_AutomatonProvider, AutomatonProvider);

          void t_AutomatonProvider::install(PyObject *module)
          {
            installType(&PY_TYPE(AutomatonProvider), &PY_TYPE_DEF(AutomatonProvider), module, "AutomatonProvider", 0);
          }

          void t_AutomatonProvider::initialize(PyObject *module)
          {
            PyObject_SetAttrString((PyObject *) PY_TYPE(AutomatonProvider), "class_", make_descriptor(AutomatonProvider::initializeClass, 1));
            PyObject_SetAttrString((PyObject *) PY_TYPE(AutomatonProvider), "wrapfn_", make_descriptor(t_AutomatonProvider::wrap_jobject));
            PyObject_SetAttrString((PyObject *) PY_TYPE(AutomatonProvider), "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_AutomatonProvider_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, AutomatonProvider::initializeClass, 1)))
              return NULL;
            return t_AutomatonProvider::wrap_Object(AutomatonProvider(((t_AutomatonProvider *) arg)->object.this$));
          }
          static PyObject *t_AutomatonProvider_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, AutomatonProvider::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static PyObject *t_AutomatonProvider_getAutomaton(t_AutomatonProvider *self, PyObject *arg)
          {
            ::java::lang::String a0((jobject) NULL);
            ::org::apache::lucene::util::automaton::Automaton result((jobject) NULL);

            if (!parseArg(arg, "s", &a0))
            {
              OBJ_CALL(result = self->object.getAutomaton(a0));
              return ::org::apache::lucene::util::automaton::t_Automaton::wrap_Object(result);
            }

            PyErr_SetArgsError((PyObject *) self, "getAutomaton", arg);
            return NULL;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/util/packed/BlockPackedReader.h"
#include "org/apache/lucene/store/IndexInput.h"
#include "org/apache/lucene/util/Accountable.h"
#include "java/lang/Class.h"
#include "java/lang/String.h"
#include "java/io/IOException.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        namespace packed {

          ::java::lang::Class *BlockPackedReader::class$ = NULL;
          jmethodID *BlockPackedReader::mids$ = NULL;
          bool BlockPackedReader::live$ = false;

          jclass BlockPackedReader::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/util/packed/BlockPackedReader");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_d48e2201f1f1ae5b] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/store/IndexInput;IIJZ)V");
              mids$[mid_get_d711eecdc469624a] = env->getMethodID(cls, "get", "(J)J");
              mids$[mid_ramBytesUsed_2e5ae9edcb9b072f] = env->getMethodID(cls, "ramBytesUsed", "()J");
              mids$[mid_toString_db9b55ba01e03e4b] = env->getMethodID(cls, "toString", "()Ljava/lang/String;");

              class$ = new ::java::lang::Class(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          BlockPackedReader::BlockPackedReader(const ::org::apache::lucene::store::IndexInput & a0, jint a1, jint a2, jlong a3, jboolean a4) : ::org::apache::lucene::util::LongValues(env->newObject(initializeClass, &mids$, mid_init$_d48e2201f1f1ae5b, a0.this$, a1, a2, a3, a4)) {}

          jlong BlockPackedReader::get(jlong a0) const
          {
            return env->callLongMethod(this$, mids$[mid_get_d711eecdc469624a], a0);
          }

          jlong BlockPackedReader::ramBytesUsed() const
          {
            return env->callLongMethod(this$, mids$[mid_ramBytesUsed_2e5ae9edcb9b072f]);
          }

          ::java::lang::String BlockPackedReader::toString() const
          {
            return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_db9b55ba01e03e4b]));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        namespace packed {
          static PyObject *t_BlockPackedReader_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_BlockPackedReader_instance_(PyTypeObject *type, PyObject *arg);
          static int t_BlockPackedReader_init_(t_BlockPackedReader *self, PyObject *args, PyObject *kwds);
          static PyObject *t_BlockPackedReader_get(t_BlockPackedReader *self, PyObject *args);
          static PyObject *t_BlockPackedReader_ramBytesUsed(t_BlockPackedReader *self);
          static PyObject *t_BlockPackedReader_toString(t_BlockPackedReader *self, PyObject *args);

          static PyMethodDef t_BlockPackedReader__methods_[] = {
            DECLARE_METHOD(t_BlockPackedReader, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_BlockPackedReader, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_BlockPackedReader, get, METH_VARARGS),
            DECLARE_METHOD(t_BlockPackedReader, ramBytesUsed, METH_NOARGS),
            DECLARE_METHOD(t_BlockPackedReader, toString, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          static PyType_Slot PY_TYPE_SLOTS(BlockPackedReader)[] = {
            { Py_tp_methods, t_BlockPackedReader__methods_ },
            { Py_tp_init, (void *) t_BlockPackedReader_init_ },
            { 0, NULL }
          };

          static PyType_Def *PY_TYPE_BASES(BlockPackedReader)[] = {
            &PY_TYPE_DEF(::org::apache::lucene::util::LongValues),
            NULL
          };

          DEFINE_TYPE(BlockPackedReader, t_BlockPackedReader, BlockPackedReader);

          void t_BlockPackedReader::install(PyObject *module)
          {
            installType(&PY_TYPE(BlockPackedReader), &PY_TYPE_DEF(BlockPackedReader), module, "BlockPackedReader", 0);
          }

          void t_BlockPackedReader::initialize(PyObject *module)
          {
            PyObject_SetAttrString((PyObject *) PY_TYPE(BlockPackedReader), "class_", make_descriptor(BlockPackedReader::initializeClass, 1));
            PyObject_SetAttrString((PyObject *) PY_TYPE(BlockPackedReader), "wrapfn_", make_descriptor(t_BlockPackedReader::wrap_jobject));
            PyObject_SetAttrString((PyObject *) PY_TYPE(BlockPackedReader), "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_BlockPackedReader_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, BlockPackedReader::initializeClass, 1)))
              return NULL;
            return t_BlockPackedReader::wrap_Object(BlockPackedReader(((t_BlockPackedReader *) arg)->object.this$));
          }
          static PyObject *t_BlockPackedReader_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, BlockPackedReader::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_BlockPackedReader_init_(t_BlockPackedReader *self, PyObject *args, PyObject *kwds)
          {
            ::org::apache::lucene::store::IndexInput a0((jobject) NULL);
            jint a1;
            jint a2;
            jlong a3;
            jboolean a4;
            BlockPackedReader object((jobject) NULL);

            if (!parseArgs(args, "kIIJZ", ::org::apache::lucene::store::IndexInput::initializeClass, &a0, &a1, &a2, &a3, &a4))
            {
              INT_CALL(object = BlockPackedReader(a0, a1, a2, a3, a4));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_BlockPackedReader_get(t_BlockPackedReader *self, PyObject *args)
          {
            jlong a0;
            jlong result;

            if (!parseArgs(args, "J", &a0))
            {
              OBJ_CALL(result = self->object.get(a0));
              return PyLong_FromLongLong((PY_LONG_LONG) result);
            }

            return callSuper(PY_TYPE(BlockPackedReader), (PyObject *) self, "get", args, 2);
          }

          static PyObject *t_BlockPackedReader_ramBytesUsed(t_BlockPackedReader *self)
          {
            jlong result;
            OBJ_CALL(result = self->object.ramBytesUsed());
            return PyLong_FromLongLong((PY_LONG_LONG) result);
          }

          static PyObject *t_BlockPackedReader_toString(t_BlockPackedReader *self, PyObject *args)
          {
            ::java::lang::String result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.toString());
              return j2p(result);
            }

            return callSuper(PY_TYPE(BlockPackedReader), (PyObject *) self, "toString", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/spell/LevenshteinDistance.h"
#include "org/apache/lucene/search/spell/StringDistance.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace spell {

          ::java::lang::Class *LevenshteinDistance::class$ = NULL;
          jmethodID *LevenshteinDistance::mids$ = NULL;
          bool LevenshteinDistance::live$ = false;

          jclass LevenshteinDistance::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/search/spell/LevenshteinDistance");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_f2cc1bce94666404] = env->getMethodID(cls, "<init>", "()V");
              mids$[mid_equals_8b72f2dcdde6fd1d] = env->getMethodID(cls, "equals", "(Ljava/lang/Object;)Z");
              mids$[mid_getDistance_31e45f475cca0d26] = env->getMethodID(cls, "getDistance", "(Ljava/lang/String;Ljava/lang/String;)F");
              mids$[mid_hashCode_9972fcc56b44e79d] = env->getMethodID(cls, "hashCode", "()I");
              mids$[mid_toString_db9b55ba01e03e4b] = env->getMethodID(cls, "toString", "()Ljava/lang/String;");

              class$ = new ::java::lang::Class(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          LevenshteinDistance::LevenshteinDistance() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_f2cc1bce94666404)) {}

          jboolean LevenshteinDistance::equals(const ::java::lang::Object & a0) const
          {
            return env->callBooleanMethod(this$, mids$[mid_equals_8b72f2dcdde6fd1d], a0.this$);
          }

          jfloat LevenshteinDistance::getDistance(const ::java::lang::String & a0, const ::java::lang::String & a1) const
          {
            return env->callFloatMethod(this$, mids$[mid_getDistance_31e45f475cca0d26], a0.this$, a1.this$);
          }

          jint LevenshteinDistance::hashCode() const
          {
            return env->callIntMethod(this$, mids$[mid_hashCode_9972fcc56b44e79d]);
          }

          ::java::lang::String LevenshteinDistance::toString() const
          {
            return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_db9b55ba01e03e4b]));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace spell {
          static PyObject *t_LevenshteinDistance_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_LevenshteinDistance_instance_(PyTypeObject *type, PyObject *arg);
          static int t_LevenshteinDistance_init_(t_LevenshteinDistance *self, PyObject *args, PyObject *kwds);
          static PyObject *t_LevenshteinDistance_equals(t_LevenshteinDistance *self, PyObject *args);
          static PyObject *t_LevenshteinDistance_getDistance(t_LevenshteinDistance *self, PyObject *args);
          static PyObject *t_LevenshteinDistance_hashCode(t_LevenshteinDistance *self, PyObject *args);
          static PyObject *t_LevenshteinDistance_toString(t_LevenshteinDistance *self, PyObject *args);

          static PyMethodDef t_LevenshteinDistance__methods_[] = {
            DECLARE_METHOD(t_LevenshteinDistance, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_LevenshteinDistance, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_LevenshteinDistance, equals, METH_VARARGS),
            DECLARE_METHOD(t_LevenshteinDistance, getDistance, METH_VARARGS),
            DECLARE_METHOD(t_LevenshteinDistance, hashCode, METH_VARARGS),
            DECLARE_METHOD(t_LevenshteinDistance, toString, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          static PyType_Slot PY_TYPE_SLOTS(LevenshteinDistance)[] = {
            { Py_tp_methods, t_LevenshteinDistance__methods_ },
            { Py_tp_init, (void *) t_LevenshteinDistance_init_ },
            { 0, NULL }
          };

          static PyType_Def *PY_TYPE_BASES(LevenshteinDistance)[] = {
            &PY_TYPE_DEF(::java::lang::Object),
            NULL
          };

          DEFINE_TYPE(LevenshteinDistance, t_LevenshteinDistance, LevenshteinDistance);

          void t_LevenshteinDistance::install(PyObject *module)
          {
            installType(&PY_TYPE(LevenshteinDistance), &PY_TYPE_DEF(LevenshteinDistance), module, "LevenshteinDistance", 0);
          }

          void t_LevenshteinDistance::initialize(PyObject *module)
          {
            PyObject_SetAttrString((PyObject *) PY_TYPE(LevenshteinDistance), "class_", make_descriptor(LevenshteinDistance::initializeClass, 1));
            PyObject_SetAttrString((PyObject *) PY_TYPE(LevenshteinDistance), "wrapfn_", make_descriptor(t_LevenshteinDistance::wrap_jobject));
            PyObject_SetAttrString((PyObject *) PY_TYPE(LevenshteinDistance), "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_LevenshteinDistance_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, LevenshteinDistance::initializeClass, 1)))
              return NULL;
            return t_LevenshteinDistance::wrap_Object(LevenshteinDistance(((t_LevenshteinDistance *) arg)->object.this$));
          }
          static PyObject *t_LevenshteinDistance_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, LevenshteinDistance::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_LevenshteinDistance_init_(t_LevenshteinDistance *self, PyObject *args, PyObject *kwds)
          {
            LevenshteinDistance object((jobject) NULL);

            INT_CALL(object = LevenshteinDistance());
            self->object = object;

            return 0;
          }

          static PyObject *t_LevenshteinDistance_equals(t_LevenshteinDistance *self, PyObject *args)
          {
            ::java::lang::Object a0((jobject) NULL);
            jboolean result;

            if (!parseArgs(args, "o", &a0))
            {
              OBJ_CALL(result = self->object.equals(a0));
              Py_RETURN_BOOL(result);
            }

            return callSuper(PY_TYPE(LevenshteinDistance), (PyObject *) self, "equals", args, 2);
          }

          static PyObject *t_LevenshteinDistance_getDistance(t_LevenshteinDistance *self, PyObject *args)
          {
            ::java::lang::String a0((jobject) NULL);
            ::java::lang::String a1((jobject) NULL);
            jfloat result;

            if (!parseArgs(args, "ss", &a0, &a1))
            {
              OBJ_CALL(result = self->object.getDistance(a0, a1));
              return PyFloat_FromDouble((double) result);
            }

            PyErr_SetArgsError((PyObject *) self, "getDistance", args);
            return NULL;
          }

          static PyObject *t_LevenshteinDistance_hashCode(t_LevenshteinDistance *self, PyObject *args)
          {
            jint result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.hashCode());
              return PyLong_FromLong((long) result);
            }

            return callSuper(PY_TYPE(LevenshteinDistance), (PyObject *) self, "hashCode", args, 2);
          }

          static PyObject *t_LevenshteinDistance_toString(t_LevenshteinDistance *self, PyObject *args)
          {
            ::java::lang::String result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.toString());
              return j2p(result);
            }

            return callSuper(PY_TYPE(LevenshteinDistance), (PyObject *) self, "toString", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/index/IndexSorter$SortedDocValuesProvider.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/index/LeafReader.h"
#include "org/apache/lucene/index/SortedDocValues.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {

        ::java::lang::Class *IndexSorter$SortedDocValuesProvider::class$ = NULL;
        jmethodID *IndexSorter$SortedDocValuesProvider::mids$ = NULL;
        bool IndexSorter$SortedDocValuesProvider::live$ = false;

        jclass IndexSorter$SortedDocValuesProvider::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/index/IndexSorter$SortedDocValuesProvider");

            mids$ = new jmethodID[max_mid];
            mids$[mid_get_f35182fdfaf9a12a] = env->getMethodID(cls, "get", "(Lorg/apache/lucene/index/LeafReader;)Lorg/apache/lucene/index/SortedDocValues;");

            class$ = new ::java::lang::Class(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        ::org::apache::lucene::index::SortedDocValues IndexSorter$SortedDocValuesProvider::get(const ::org::apache::lucene::index::LeafReader & a0) const
        {
          return ::org::apache::lucene::index::SortedDocValues(env->callObjectMethod(this$, mids$[mid_get_f35182fdfaf9a12a], a0.this$));
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {
        static PyObject *t_IndexSorter$SortedDocValuesProvider_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_IndexSorter$SortedDocValuesProvider_instance_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_IndexSorter$SortedDocValuesProvider_get(t_IndexSorter$SortedDocValuesProvider *self, PyObject *arg);

        static PyMethodDef t_IndexSorter$SortedDocValuesProvider__methods_[] = {
          DECLARE_METHOD(t_IndexSorter$SortedDocValuesProvider, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_IndexSorter$SortedDocValuesProvider, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_IndexSorter$SortedDocValuesProvider, get, METH_O),
          { NULL, NULL, 0, NULL }
        };

        static PyType_Slot PY_TYPE_SLOTS(IndexSorter$SortedDocValuesProvider)[] = {
          { Py_tp_methods, t_IndexSorter$SortedDocValuesProvider__methods_ },
          { Py_tp_init, (void *) abstract_init },
          { 0, NULL }
        };

        static PyType_Def *PY_TYPE_BASES(IndexSorter$SortedDocValuesProvider)[] = {
          &PY_TYPE_DEF(::java::lang::Object),
          NULL
        };

        DEFINE_TYPE(IndexSorter$SortedDocValuesProvider, t_IndexSorter$SortedDocValuesProvider, IndexSorter$SortedDocValuesProvider);

        void t_IndexSorter$SortedDocValuesProvider::install(PyObject *module)
        {
          installType(&PY_TYPE(IndexSorter$SortedDocValuesProvider), &PY_TYPE_DEF(IndexSorter$SortedDocValuesProvider), module, "IndexSorter$SortedDocValuesProvider", 0);
        }

        void t_IndexSorter$SortedDocValuesProvider::initialize(PyObject *module)
        {
          PyObject_SetAttrString((PyObject *) PY_TYPE(IndexSorter$SortedDocValuesProvider), "class_", make_descriptor(IndexSorter$SortedDocValuesProvider::initializeClass, 1));
          PyObject_SetAttrString((PyObject *) PY_TYPE(IndexSorter$SortedDocValuesProvider), "wrapfn_", make_descriptor(t_IndexSorter$SortedDocValuesProvider::wrap_jobject));
          PyObject_SetAttrString((PyObject *) PY_TYPE(IndexSorter$SortedDocValuesProvider), "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_IndexSorter$SortedDocValuesProvider_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, IndexSorter$SortedDocValuesProvider::initializeClass, 1)))
            return NULL;
          return t_IndexSorter$SortedDocValuesProvider::wrap_Object(IndexSorter$SortedDocValuesProvider(((t_IndexSorter$SortedDocValuesProvider *) arg)->object.this$));
        }
        static PyObject *t_IndexSorter$SortedDocValuesProvider_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, IndexSorter$SortedDocValuesProvider::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static PyObject *t_IndexSorter$SortedDocValuesProvider_get(t_IndexSorter$SortedDocValuesProvider *self, PyObject *arg)
        {
          ::org::apache::lucene::index::LeafReader a0((jobject) NULL);
          ::org::apache::lucene::index::SortedDocValues result((jobject) NULL);

          if (!parseArg(arg, "k", ::org::apache::lucene::index::LeafReader::initializeClass, &a0))
          {
            OBJ_CALL(result = self->object.get(a0));
            return ::org::apache::lucene::index::t_SortedDocValues::wrap_Object(result);
          }

          PyErr_SetArgsError((PyObject *) self, "get", arg);
          return NULL;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/document/XYDocValuesField.h"
#include "org/apache/lucene/search/SortField.h"
#include "org/apache/lucene/document/FieldType.h"
#include "java/lang/Class.h"
#include "java/lang/String.h"
#include "org/apache/lucene/geo/XYGeometry.h"
#include "org/apache/lucene/search/Query.h"
#include "org/apache/lucene/geo/XYPolygon.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace document {

        ::java::lang::Class *XYDocValuesField::class$ = NULL;
        jmethodID *XYDocValuesField::mids$ = NULL;
        bool XYDocValuesField::live$ = false;
        ::org::apache::lucene::document::FieldType *XYDocValuesField::TYPE = NULL;

        jclass XYDocValuesField::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/document/XYDocValuesField");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_4c60be71108f1f4a] = env->getMethodID(cls, "<init>", "(Ljava/lang/String;FF)V");
            mids$[mid_newDistanceSort_cd7bf6909fa7453a] = env->getStaticMethodID(cls, "newDistanceSort", "(Ljava/lang/String;FF)Lorg/apache/lucene/search/SortField;");
            mids$[mid_newSlowBoxQuery_8a1205b2cac943a4] = env->getStaticMethodID(cls, "newSlowBoxQuery", "(Ljava/lang/String;FFFF)Lorg/apache/lucene/search/Query;");
            mids$[mid_newSlowDistanceQuery_97227b15813dc44c] = env->getStaticMethodID(cls, "newSlowDistanceQuery", "(Ljava/lang/String;FFF)Lorg/apache/lucene/search/Query;");
            mids$[mid_newSlowGeometryQuery_8489d3544c80a05b] = env->getStaticMethodID(cls, "newSlowGeometryQuery", "(Ljava/lang/String;[Lorg/apache/lucene/geo/XYGeometry;)Lorg/apache/lucene/search/Query;");
            mids$[mid_newSlowPolygonQuery_7142c1f4741031a0] = env->getStaticMethodID(cls, "newSlowPolygonQuery", "(Ljava/lang/String;[Lorg/apache/lucene/geo/XYPolygon;)Lorg/apache/lucene/search/Query;");
            mids$[mid_setLocationValue_5a9245193073da7b] = env->getMethodID(cls, "setLocationValue", "(FF)V");
            mids$[mid_toString_db9b55ba01e03e4b] = env->getMethodID(cls, "toString", "()Ljava/lang/String;");

            class$ = new ::java::lang::Class(cls);
            cls = (jclass) class$->this$;

            TYPE = new ::org::apache::lucene::document::FieldType(env->getStaticObjectField(cls, "TYPE", "Lorg/apache/lucene/document/FieldType;"));
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        XYDocValuesField::XYDocValuesField(const ::java::lang::String & a0, jfloat a1, jfloat a2) : ::org::apache::lucene::document::Field(env->newObject(initializeClass, &mids$, mid_init$_4c60be71108f1f4a, a0.this$, a1, a2)) {}

        ::org::apache::lucene::search::SortField XYDocValuesField::newDistanceSort(const ::java::lang::String & a0, jfloat a1, jfloat a2)
        {
          jclass cls = env->getClass(initializeClass);
          return ::org::apache::lucene::search::SortField(env->callStaticObjectMethod(cls, mids$[mid_newDistanceSort_cd7bf6909fa7453a], a0.this$, a1, a2));
        }

        ::org::apache::lucene::search::Query XYDocValuesField::newSlowBoxQuery(const ::java::lang::String & a0, jfloat a1, jfloat a2, jfloat a3, jfloat a4)
        {
          jclass cls = env->getClass(initializeClass);
          return ::org::apache::lucene::search::Query(env->callStaticObjectMethod(cls, mids$[mid_newSlowBoxQuery_8a1205b2cac943a4], a0.this$, a1, a2, a3, a4));
        }

        ::org::apache::lucene::search::Query XYDocValuesField::newSlowDistanceQuery(const ::java::lang::String & a0, jfloat a1, jfloat a2, jfloat a3)
        {
          jclass cls = env->getClass(initializeClass);
          return ::org::apache::lucene::search::Query(env->callStaticObjectMethod(cls, mids$[mid_newSlowDistanceQuery_97227b15813dc44c], a0.this$, a1, a2, a3));
        }

        ::org::apache::lucene::search::Query XYDocValuesField::newSlowGeometryQuery(const ::java::lang::String & a0, const JArray< ::org::apache::lucene::geo::XYGeometry > & a1)
        {
          jclass cls = env->getClass(initializeClass);
          return ::org::apache::lucene::search::Query(env->callStaticObjectMethod(cls, mids$[mid_newSlowGeometryQuery_8489d3544c80a05b], a0.this$, a1.this$));
        }

        ::org::apache::lucene::search::Query XYDocValuesField::newSlowPolygonQuery(const ::java::lang::String & a0, const JArray< ::org::apache::lucene::geo::XYPolygon > & a1)
        {
          jclass cls = env->getClass(initializeClass);
          return ::org::apache::lucene::search::Query(env->callStaticObjectMethod(cls, mids$[mid_newSlowPolygonQuery_7142c1f4741031a0], a0.this$, a1.this$));
        }

        void XYDocValuesField::setLocationValue(jfloat a0, jfloat a1) const
        {
          env->callVoidMethod(this$, mids$[mid_setLocationValue_5a9245193073da7b], a0, a1);
        }

        ::java::lang::String XYDocValuesField::toString() const
        {
          return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_db9b55ba01e03e4b]));
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace document {
        static PyObject *t_XYDocValuesField_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_XYDocValuesField_instance_(PyTypeObject *type, PyObject *arg);
        static int t_XYDocValuesField_init_(t_XYDocValuesField *self, PyObject *args, PyObject *kwds);
        static PyObject *t_XYDocValuesField_newDistanceSort(PyTypeObject *type, PyObject *args);
        static PyObject *t_XYDocValuesField_newSlowBoxQuery(PyTypeObject *type, PyObject *args);
        static PyObject *t_XYDocValuesField_newSlowDistanceQuery(PyTypeObject *type, PyObject *args);
        static PyObject *t_XYDocValuesField_newSlowGeometryQuery(PyTypeObject *type, PyObject *args);
        static PyObject *t_XYDocValuesField_newSlowPolygonQuery(PyTypeObject *type, PyObject *args);
        static PyObject *t_XYDocValuesField_setLocationValue(t_XYDocValuesField *self, PyObject *args);
        static PyObject *t_XYDocValuesField_toString(t_XYDocValuesField *self, PyObject *args);

        static PyMethodDef t_XYDocValuesField__methods_[] = {
          DECLARE_METHOD(t_XYDocValuesField, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_XYDocValuesField, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_XYDocValuesField, newDistanceSort, METH_VARARGS | METH_CLASS),
          DECLARE_METHOD(t_XYDocValuesField, newSlowBoxQuery, METH_VARARGS | METH_CLASS),
          DECLARE_METHOD(t_XYDocValuesField, newSlowDistanceQuery, METH_VARARGS | METH_CLASS),
          DECLARE_METHOD(t_XYDocValuesField, newSlowGeometryQuery, METH_VARARGS | METH_CLASS),
          DECLARE_METHOD(t_XYDocValuesField, newSlowPolygonQuery, METH_VARARGS | METH_CLASS),
          DECLARE_METHOD(t_XYDocValuesField, setLocationValue, METH_VARARGS),
          DECLARE_METHOD(t_XYDocValuesField, toString, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        static PyType_Slot PY_TYPE_SLOTS(XYDocValuesField)[] = {
          { Py_tp_methods, t_XYDocValuesField__methods_ },
          { Py_tp_init, (void *) t_XYDocValuesField_init_ },
          { 0, NULL }
        };

        static PyType_Def *PY_TYPE_BASES(XYDocValuesField)[] = {
          &PY_TYPE_DEF(::org::apache::lucene::document::Field),
          NULL
        };

        DEFINE_TYPE(XYDocValuesField, t_XYDocValuesField, XYDocValuesField);

        void t_XYDocValuesField::install(PyObject *module)
        {
          installType(&PY_TYPE(XYDocValuesField), &PY_TYPE_DEF(XYDocValuesField), module, "XYDocValuesField", 0);
        }

        void t_XYDocValuesField::initialize(PyObject *module)
        {
          PyObject_SetAttrString((PyObject *) PY_TYPE(XYDocValuesField), "class_", make_descriptor(XYDocValuesField::initializeClass, 1));
          PyObject_SetAttrString((PyObject *) PY_TYPE(XYDocValuesField), "wrapfn_", make_descriptor(t_XYDocValuesField::wrap_jobject));
          PyObject_SetAttrString((PyObject *) PY_TYPE(XYDocValuesField), "boxfn_", make_descriptor(boxObject));
          env->getClass(XYDocValuesField::initializeClass);
          PyObject_SetAttrString((PyObject *) PY_TYPE(XYDocValuesField), "TYPE", make_descriptor(::org::apache::lucene::document::t_FieldType::wrap_Object(*XYDocValuesField::TYPE)));
        }

        static PyObject *t_XYDocValuesField_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, XYDocValuesField::initializeClass, 1)))
            return NULL;
          return t_XYDocValuesField::wrap_Object(XYDocValuesField(((t_XYDocValuesField *) arg)->object.this$));
        }
        static PyObject *t_XYDocValuesField_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, XYDocValuesField::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_XYDocValuesField_init_(t_XYDocValuesField *self, PyObject *args, PyObject *kwds)
        {
          ::java::lang::String a0((jobject) NULL);
          jfloat a1;
          jfloat a2;
          XYDocValuesField object((jobject) NULL);

          if (!parseArgs(args, "sFF", &a0, &a1, &a2))
          {
            INT_CALL(object = XYDocValuesField(a0, a1, a2));
            self->object = object;
          }
          else
          {
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }

        static PyObject *t_XYDocValuesField_newDistanceSort(PyTypeObject *type, PyObject *args)
        {
          ::java::lang::String a0((jobject) NULL);
          jfloat a1;
          jfloat a2;
          ::org::apache::lucene::search::SortField result((jobject) NULL);

          if (!parseArgs(args, "sFF", &a0, &a1, &a2))
          {
            OBJ_CALL(result = ::org::apache::lucene::document::XYDocValuesField::newDistanceSort(a0, a1, a2));
            return ::org::apache::lucene::search::t_SortField::wrap_Object(result);
          }

          PyErr_SetArgsError(type, "newDistanceSort", args);
          return NULL;
        }

        static PyObject *t_XYDocValuesField_newSlowBoxQuery(PyTypeObject *type, PyObject *args)
        {
          ::java::lang::String a0((jobject) NULL);
          jfloat a1;
          jfloat a2;
          jfloat a3;
          jfloat a4;
          ::org::apache::lucene::search::Query result((jobject) NULL);

          if (!parseArgs(args, "sFFFF", &a0, &a1, &a2, &a3, &a4))
          {
            OBJ_CALL(result = ::org::apache::lucene::document::XYDocValuesField::newSlowBoxQuery(a0, a1, a2, a3, a4));
            return ::org::apache::lucene::search::t_Query::wrap_Object(result);
          }

          PyErr_SetArgsError(type, "newSlowBoxQuery", args);
          return NULL;
        }

        static PyObject *t_XYDocValuesField_newSlowDistanceQuery(PyTypeObject *type, PyObject *args)
        {
          ::java::lang::String a0((jobject) NULL);
          jfloat a1;
          jfloat a2;
          jfloat a3;
          ::org::apache::lucene::search::Query result((jobject) NULL);

          if (!parseArgs(args, "sFFF", &a0, &a1, &a2, &a3))
          {
            OBJ_CALL(result = ::org::apache::lucene::document::XYDocValuesField::newSlowDistanceQuery(a0, a1, a2, a3));
            return ::org::apache::lucene::search::t_Query::wrap_Object(result);
          }

          PyErr_SetArgsError(type, "newSlowDistanceQuery", args);
          return NULL;
        }

        static PyObject *t_XYDocValuesField_newSlowGeometryQuery(PyTypeObject *type, PyObject *args)
        {
          ::java::lang::String a0((jobject) NULL);
          JArray< ::org::apache::lucene::geo::XYGeometry > a1((jobject) NULL);
          ::org::apache::lucene::search::Query result((jobject) NULL);

          if (!parseArgs(args, "s[k", ::org::apache::lucene::geo::XYGeometry::initializeClass, &a0, &a1))
          {
            OBJ_CALL(result = ::org::apache::lucene::document::XYDocValuesField::newSlowGeometryQuery(a0, a1));
            return ::org::apache::lucene::search::t_Query::wrap_Object(result);
          }

          PyErr_SetArgsError(type, "newSlowGeometryQuery", args);
          return NULL;
        }

        static PyObject *t_XYDocValuesField_newSlowPolygonQuery(PyTypeObject *type, PyObject *args)
        {
          ::java::lang::String a0((jobject) NULL);
          JArray< ::org::apache::lucene::geo::XYPolygon > a1((jobject) NULL);
          ::org::apache::lucene::search::Query result((jobject) NULL);

          if (!parseArgs(args, "s[k", ::org::apache::lucene::geo::XYPolygon::initializeClass, &a0, &a1))
          {
            OBJ_CALL(result = ::org::apache::lucene::document::XYDocValuesField::newSlowPolygonQuery(a0, a1));
            return ::org::apache::lucene::search::t_Query::wrap_Object(result);
          }

          PyErr_SetArgsError(type, "newSlowPolygonQuery", args);
          return NULL;
        }

        static PyObject *t_XYDocValuesField_setLocationValue(t_XYDocValuesField *self, PyObject *args)
        {
          jfloat a0;
          jfloat a1;

          if (!parseArgs(args, "FF", &a0, &a1))
          {
            OBJ_CALL(self->object.setLocationValue(a0, a1));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "setLocationValue", args);
          return NULL;
        }

        static PyObject *t_XYDocValuesField_toString(t_XYDocValuesField *self, PyObject *args)
        {
          ::java::lang::String result((jobject) NULL);

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.toString());
            return j2p(result);
          }

          return callSuper(PY_TYPE(XYDocValuesField), (PyObject *) self, "toString", args, 2);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/util/packed/PagedMutable.h"
#include "org/apache/lucene/util/packed/PagedMutable.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        namespace packed {

          ::java::lang::Class *PagedMutable::class$ = NULL;
          jmethodID *PagedMutable::mids$ = NULL;
          bool PagedMutable::live$ = false;

          jclass PagedMutable::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/util/packed/PagedMutable");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_424abb77f7d49b95] = env->getMethodID(cls, "<init>", "(JIIF)V");
              mids$[mid_baseRamBytesUsed_2e5ae9edcb9b072f] = env->getMethodID(cls, "baseRamBytesUsed", "()J");
              mids$[mid_newMutable_15c7bed2e0f3a021] = env->getMethodID(cls, "newMutable", "(II)Lorg/apache/lucene/util/packed/PackedInts$Mutable;");
              mids$[mid_newUnfilledCopy_a1989e81f56ba639] = env->getMethodID(cls, "newUnfilledCopy", "(J)Lorg/apache/lucene/util/packed/PagedMutable;");

              class$ = new ::java::lang::Class(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          PagedMutable::PagedMutable(jlong a0, jint a1, jint a2, jfloat a3) : ::org::apache::lucene::util::packed::AbstractPagedMutable(env->newObject(initializeClass, &mids$, mid_init$_424abb77f7d49b95, a0, a1, a2, a3)) {}
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        namespace packed {
          static PyObject *t_PagedMutable_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_PagedMutable_instance_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_PagedMutable_of_(t_PagedMutable *self, PyObject *args);
          static int t_PagedMutable_init_(t_PagedMutable *self, PyObject *args, PyObject *kwds);
          static PyObject *t_PagedMutable_get__parameters_(t_PagedMutable *self, void *data);
          static PyGetSetDef t_PagedMutable__fields_[] = {
            DECLARE_GET_FIELD(t_PagedMutable, parameters_),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_PagedMutable__methods_[] = {
            DECLARE_METHOD(t_PagedMutable, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_PagedMutable, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_PagedMutable, of_, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          static PyType_Slot PY_TYPE_SLOTS(PagedMutable)[] = {
            { Py_tp_methods, t_PagedMutable__methods_ },
            { Py_tp_init, (void *) t_PagedMutable_init_ },
            { Py_tp_getset, t_PagedMutable__fields_ },
            { 0, NULL }
          };

          static PyType_Def *PY_TYPE_BASES(PagedMutable)[] = {
            &PY_TYPE_DEF(::org::apache::lucene::util::packed::AbstractPagedMutable),
            NULL
          };

          DEFINE_TYPE(PagedMutable, t_PagedMutable, PagedMutable);
          PyObject *t_PagedMutable::wrap_Object(const PagedMutable& object, PyTypeObject *p0)
          {
            PyObject *obj = t_PagedMutable::wrap_Object(object);
            if (obj != NULL && obj != Py_None)
            {
              t_PagedMutable *self = (t_PagedMutable *) obj;
              self->parameters[0] = p0;
            }
            return obj;
          }

          PyObject *t_PagedMutable::wrap_jobject(const jobject& object, PyTypeObject *p0)
          {
            PyObject *obj = t_PagedMutable::wrap_jobject(object);
            if (obj != NULL && obj != Py_None)
            {
              t_PagedMutable *self = (t_PagedMutable *) obj;
              self->parameters[0] = p0;
            }
            return obj;
          }

          void t_PagedMutable::install(PyObject *module)
          {
            installType(&PY_TYPE(PagedMutable), &PY_TYPE_DEF(PagedMutable), module, "PagedMutable", 0);
          }

          void t_PagedMutable::initialize(PyObject *module)
          {
            PyObject_SetAttrString((PyObject *) PY_TYPE(PagedMutable), "class_", make_descriptor(PagedMutable::initializeClass, 1));
            PyObject_SetAttrString((PyObject *) PY_TYPE(PagedMutable), "wrapfn_", make_descriptor(t_PagedMutable::wrap_jobject));
            PyObject_SetAttrString((PyObject *) PY_TYPE(PagedMutable), "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_PagedMutable_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, PagedMutable::initializeClass, 1)))
              return NULL;
            return t_PagedMutable::wrap_Object(PagedMutable(((t_PagedMutable *) arg)->object.this$));
          }
          static PyObject *t_PagedMutable_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, PagedMutable::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static PyObject *t_PagedMutable_of_(t_PagedMutable *self, PyObject *args)
          {
            if (!parseArg(args, "T", 1, &(self->parameters)))
              Py_RETURN_SELF;
            return PyErr_SetArgsError((PyObject *) self, "of_", args);
          }

          static int t_PagedMutable_init_(t_PagedMutable *self, PyObject *args, PyObject *kwds)
          {
            jlong a0;
            jint a1;
            jint a2;
            jfloat a3;
            PagedMutable object((jobject) NULL);

            if (!parseArgs(args, "JIIF", &a0, &a1, &a2, &a3))
            {
              INT_CALL(object = PagedMutable(a0, a1, a2, a3));
              self->object = object;
              self->parameters[0] = ::org::apache::lucene::util::packed::PY_TYPE(PagedMutable);
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }
          static PyObject *t_PagedMutable_get__parameters_(t_PagedMutable *self, void *data)
          {
            return typeParameters(self->parameters, sizeof(self->parameters));
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/index/NumericDocValues.h"
#include "java/io/IOException.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {

        ::java::lang::Class *NumericDocValues::class$ = NULL;
        jmethodID *NumericDocValues::mids$ = NULL;
        bool NumericDocValues::live$ = false;

        jclass NumericDocValues::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/index/NumericDocValues");

            mids$ = new jmethodID[max_mid];
            mids$[mid_longValue_2e5ae9edcb9b072f] = env->getMethodID(cls, "longValue", "()J");

            class$ = new ::java::lang::Class(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        jlong NumericDocValues::longValue() const
        {
          return env->callLongMethod(this$, mids$[mid_longValue_2e5ae9edcb9b072f]);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {
        static PyObject *t_NumericDocValues_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_NumericDocValues_instance_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_NumericDocValues_longValue(t_NumericDocValues *self);

        static PyMethodDef t_NumericDocValues__methods_[] = {
          DECLARE_METHOD(t_NumericDocValues, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_NumericDocValues, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_NumericDocValues, longValue, METH_NOARGS),
          { NULL, NULL, 0, NULL }
        };

        static PyType_Slot PY_TYPE_SLOTS(NumericDocValues)[] = {
          { Py_tp_methods, t_NumericDocValues__methods_ },
          { Py_tp_init, (void *) abstract_init },
          { 0, NULL }
        };

        static PyType_Def *PY_TYPE_BASES(NumericDocValues)[] = {
          &PY_TYPE_DEF(::org::apache::lucene::index::DocValuesIterator),
          NULL
        };

        DEFINE_TYPE(NumericDocValues, t_NumericDocValues, NumericDocValues);

        void t_NumericDocValues::install(PyObject *module)
        {
          installType(&PY_TYPE(NumericDocValues), &PY_TYPE_DEF(NumericDocValues), module, "NumericDocValues", 0);
        }

        void t_NumericDocValues::initialize(PyObject *module)
        {
          PyObject_SetAttrString((PyObject *) PY_TYPE(NumericDocValues), "class_", make_descriptor(NumericDocValues::initializeClass, 1));
          PyObject_SetAttrString((PyObject *) PY_TYPE(NumericDocValues), "wrapfn_", make_descriptor(t_NumericDocValues::wrap_jobject));
          PyObject_SetAttrString((PyObject *) PY_TYPE(NumericDocValues), "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_NumericDocValues_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, NumericDocValues::initializeClass, 1)))
            return NULL;
          return t_NumericDocValues::wrap_Object(NumericDocValues(((t_NumericDocValues *) arg)->object.this$));
        }
        static PyObject *t_NumericDocValues_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, NumericDocValues::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static PyObject *t_NumericDocValues_longValue(t_NumericDocValues *self)
        {
          jlong result;
          OBJ_CALL(result = self->object.longValue());
          return PyLong_FromLongLong((PY_LONG_LONG) result);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/facet/MultiFacets.h"
#include "org/apache/lucene/facet/FacetResult.h"
#include "java/util/Map.h"
#include "java/lang/Number.h"
#include "java/lang/Class.h"
#include "java/lang/String.h"
#include "java/io/IOException.h"
#include "java/util/List.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace facet {

        ::java::lang::Class *MultiFacets::class$ = NULL;
        jmethodID *MultiFacets::mids$ = NULL;
        bool MultiFacets::live$ = false;

        jclass MultiFacets::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/facet/MultiFacets");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_408bd889ee3beae5] = env->getMethodID(cls, "<init>", "(Ljava/util/Map;)V");
            mids$[mid_init$_92b1d0d73323b79e] = env->getMethodID(cls, "<init>", "(Ljava/util/Map;Lorg/apache/lucene/facet/Facets;)V");
            mids$[mid_getAllDims_d82aee015ceb4d93] = env->getMethodID(cls, "getAllDims", "(I)Ljava/util/List;");
            mids$[mid_getSpecificValue_aaf99af6028dc803] = env->getMethodID(cls, "getSpecificValue", "(Ljava/lang/String;[Ljava/lang/String;)Ljava/lang/Number;");
            mids$[mid_getTopChildren_8be156db8a3c742c] = env->getMethodID(cls, "getTopChildren", "(ILjava/lang/String;[Ljava/lang/String;)Lorg/apache/lucene/facet/FacetResult;");

            class$ = new ::java::lang::Class(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        MultiFacets::MultiFacets(const ::java::util::Map & a0) : ::org::apache::lucene::facet::Facets(env->newObject(initializeClass, &mids$, mid_init$_408bd889ee3beae5, a0.this$)) {}

        MultiFacets::MultiFacets(const ::java::util::Map & a0, const ::org::apache::lucene::facet::Facets & a1) : ::org::apache::lucene::facet::Facets(env->newObject(initializeClass, &mids$, mid_init$_92b1d0d73323b79e, a0.this$, a1.this$)) {}

        ::java::util::List MultiFacets::getAllDims(jint a0) const
        {
          return ::java::util::List(env->callObjectMethod(this$, mids$[mid_getAllDims_d82aee015ceb4d93], a0));
        }

        ::java::lang::Number MultiFacets::getSpecificValue(const ::java::lang::String & a0, const JArray< ::java::lang::String > & a1) const
        {
          return ::java::lang::Number(env->callObjectMethod(this$, mids$[mid_getSpecificValue_aaf99af6028dc803], a0.this$, a1.this$));
        }

        ::org::apache::lucene::facet::FacetResult MultiFacets::getTopChildren(jint a0, const ::java::lang::String & a1, const JArray< ::java::lang::String > & a2) const
        {
          return ::org::apache::lucene::facet::FacetResult(env->callObjectMethod(this$, mids$[mid_getTopChildren_8be156db8a3c742c], a0, a1.this$, a2.this$));
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace facet {
        static PyObject *t_MultiFacets_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_MultiFacets_instance_(PyTypeObject *type, PyObject *arg);
        static int t_MultiFacets_init_(t_MultiFacets *self, PyObject *args, PyObject *kwds);
        static PyObject *t_MultiFacets_getAllDims(t_MultiFacets *self, PyObject *args);
        static PyObject *t_MultiFacets_getSpecificValue(t_MultiFacets *self, PyObject *args);
        static PyObject *t_MultiFacets_getTopChildren(t_MultiFacets *self, PyObject *args);

        static PyMethodDef t_MultiFacets__methods_[] = {
          DECLARE_METHOD(t_MultiFacets, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_MultiFacets, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_MultiFacets, getAllDims, METH_VARARGS),
          DECLARE_METHOD(t_MultiFacets, getSpecificValue, METH_VARARGS),
          DECLARE_METHOD(t_MultiFacets, getTopChildren, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        static PyType_Slot PY_TYPE_SLOTS(MultiFacets)[] = {
          { Py_tp_methods, t_MultiFacets__methods_ },
          { Py_tp_init, (void *) t_MultiFacets_init_ },
          { 0, NULL }
        };

        static PyType_Def *PY_TYPE_BASES(MultiFacets)[] = {
          &PY_TYPE_DEF(::org::apache::lucene::facet::Facets),
          NULL
        };

        DEFINE_TYPE(MultiFacets, t_MultiFacets, MultiFacets);

        void t_MultiFacets::install(PyObject *module)
        {
          installType(&PY_TYPE(MultiFacets), &PY_TYPE_DEF(MultiFacets), module, "MultiFacets", 0);
        }

        void t_MultiFacets::initialize(PyObject *module)
        {
          PyObject_SetAttrString((PyObject *) PY_TYPE(MultiFacets), "class_", make_descriptor(MultiFacets::initializeClass, 1));
          PyObject_SetAttrString((PyObject *) PY_TYPE(MultiFacets), "wrapfn_", make_descriptor(t_MultiFacets::wrap_jobject));
          PyObject_SetAttrString((PyObject *) PY_TYPE(MultiFacets), "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_MultiFacets_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, MultiFacets::initializeClass, 1)))
            return NULL;
          return t_MultiFacets::wrap_Object(MultiFacets(((t_MultiFacets *) arg)->object.this$));
        }
        static PyObject *t_MultiFacets_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, MultiFacets::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_MultiFacets_init_(t_MultiFacets *self, PyObject *args, PyObject *kwds)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 1:
            {
              ::java::util::Map a0((jobject) NULL);
              PyTypeObject **p0;
              MultiFacets object((jobject) NULL);

              if (!parseArgs(args, "K", ::java::util::Map::initializeClass, &a0, &p0, ::java::util::t_Map::parameters_))
              {
                INT_CALL(object = MultiFacets(a0));
                self->object = object;
                break;
              }
            }
            goto err;
           case 2:
            {
              ::java::util::Map a0((jobject) NULL);
              PyTypeObject **p0;
              ::org::apache::lucene::facet::Facets a1((jobject) NULL);
              MultiFacets object((jobject) NULL);

              if (!parseArgs(args, "Kk", ::java::util::Map::initializeClass, ::org::apache::lucene::facet::Facets::initializeClass, &a0, &p0, ::java::util::t_Map::parameters_, &a1))
              {
                INT_CALL(object = MultiFacets(a0, a1));
                self->object = object;
                break;
              }
            }
           default:
           err:
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }

        static PyObject *t_MultiFacets_getAllDims(t_MultiFacets *self, PyObject *args)
        {
          jint a0;
          ::java::util::List result((jobject) NULL);

          if (!parseArgs(args, "I", &a0))
          {
            OBJ_CALL(result = self->object.getAllDims(a0));
            return ::java::util::t_List::wrap_Object(result, ::org::apache::lucene::facet::PY_TYPE(FacetResult));
          }

          return callSuper(PY_TYPE(MultiFacets), (PyObject *) self, "getAllDims", args, 2);
        }

        static PyObject *t_MultiFacets_getSpecificValue(t_MultiFacets *self, PyObject *args)
        {
          ::java::lang::String a0((jobject) NULL);
          JArray< ::java::lang::String > a1((jobject) NULL);
          ::java::lang::Number result((jobject) NULL);

          if (!parseArgs(args, "s[s", &a0, &a1))
          {
            OBJ_CALL(result = self->object.getSpecificValue(a0, a1));
            return ::java::lang::t_Number::wrap_Object(result);
          }

          return callSuper(PY_TYPE(MultiFacets), (PyObject *) self, "getSpecificValue", args, 2);
        }

        static PyObject *t_MultiFacets_getTopChildren(t_MultiFacets *self, PyObject *args)
        {
          jint a0;
          ::java::lang::String a1((jobject) NULL);
          JArray< ::java::lang::String > a2((jobject) NULL);
          ::org::apache::lucene::facet::FacetResult result((jobject) NULL);

          if (!parseArgs(args, "Is[s", &a0, &a1, &a2))
          {
            OBJ_CALL(result = self->object.getTopChildren(a0, a1, a2));
            return ::org::apache::lucene::facet::t_FacetResult::wrap_Object(result);
          }

          return callSuper(PY_TYPE(MultiFacets), (PyObject *) self, "getTopChildren", args, 2);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/similarities/LMSimilarity.h"
#include "org/apache/lucene/search/similarities/LMSimilarity$CollectionModel.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace similarities {

          ::java::lang::Class *LMSimilarity::class$ = NULL;
          jmethodID *LMSimilarity::mids$ = NULL;
          bool LMSimilarity::live$ = false;

          jclass LMSimilarity::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/search/similarities/LMSimilarity");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_f2cc1bce94666404] = env->getMethodID(cls, "<init>", "()V");
              mids$[mid_init$_070af2e40388d15d] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/search/similarities/LMSimilarity$CollectionModel;)V");
              mids$[mid_getName_db9b55ba01e03e4b] = env->getMethodID(cls, "getName", "()Ljava/lang/String;");
              mids$[mid_toString_db9b55ba01e03e4b] = env->getMethodID(cls, "toString", "()Ljava/lang/String;");
              mids$[mid_explain_f9756f2482a92b24] = env->getMethodID(cls, "explain", "(Ljava/util/List;Lorg/apache/lucene/search/similarities/BasicStats;DD)V");
              mids$[mid_newStats_0b411ec39c954c9c] = env->getMethodID(cls, "newStats", "(Ljava/lang/String;D)Lorg/apache/lucene/search/similarities/BasicStats;");
              mids$[mid_fillBasicStats_4a86bd7ff3b2c1a5] = env->getMethodID(cls, "fillBasicStats", "(Lorg/apache/lucene/search/similarities/BasicStats;Lorg/apache/lucene/search/CollectionStatistics;Lorg/apache/lucene/search/TermStatistics;)V");

              class$ = new ::java::lang::Class(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          LMSimilarity::LMSimilarity() : ::org::apache::lucene::search::similarities::SimilarityBase(env->newObject(initializeClass, &mids$, mid_init$_f2cc1bce94666404)) {}

          LMSimilarity::LMSimilarity(const ::org::apache::lucene::search::similarities::LMSimilarity$CollectionModel & a0) : ::org::apache::lucene::search::similarities::SimilarityBase(env->newObject(initializeClass, &mids$, mid_init$_070af2e40388d15d, a0.this$)) {}

          ::java::lang::String LMSimilarity::getName() const
          {
            return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_getName_db9b55ba01e03e4b]));
          }

          ::java::lang::String LMSimilarity::toString() const
          {
            return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_db9b55ba01e03e4b]));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"
#include "org/apache/lucene/search/similarities/LMSimilarity$DefaultCollectionModel.h"
#include "org/apache/lucene/search/similarities/LMSimilarity$LMStats.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace similarities {
          static PyObject *t_LMSimilarity_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_LMSimilarity_instance_(PyTypeObject *type, PyObject *arg);
          static int t_LMSimilarity_init_(t_LMSimilarity *self, PyObject *args, PyObject *kwds);
          static PyObject *t_LMSimilarity_getName(t_LMSimilarity *self);
          static PyObject *t_LMSimilarity_toString(t_LMSimilarity *self, PyObject *args);
          static PyObject *t_LMSimilarity_get__name(t_LMSimilarity *self, void *data);
          static PyGetSetDef t_LMSimilarity__fields_[] = {
            DECLARE_GET_FIELD(t_LMSimilarity, name),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_LMSimilarity__methods_[] = {
            DECLARE_METHOD(t_LMSimilarity, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_LMSimilarity, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_LMSimilarity, getName, METH_NOARGS),
            DECLARE_METHOD(t_LMSimilarity, toString, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          static PyType_Slot PY_TYPE_SLOTS(LMSimilarity)[] = {
            { Py_tp_methods, t_LMSimilarity__methods_ },
            { Py_tp_init, (void *) t_LMSimilarity_init_ },
            { Py_tp_getset, t_LMSimilarity__fields_ },
            { 0, NULL }
          };

          static PyType_Def *PY_TYPE_BASES(LMSimilarity)[] = {
            &PY_TYPE_DEF(::org::apache::lucene::search::similarities::SimilarityBase),
            NULL
          };

          DEFINE_TYPE(LMSimilarity, t_LMSimilarity, LMSimilarity);

          void t_LMSimilarity::install(PyObject *module)
          {
            installType(&PY_TYPE(LMSimilarity), &PY_TYPE_DEF(LMSimilarity), module, "LMSimilarity", 0);
            PyObject_SetAttrString((PyObject *) PY_TYPE(LMSimilarity), "DefaultCollectionModel", make_descriptor(&PY_TYPE_DEF(LMSimilarity$DefaultCollectionModel)));
            PyObject_SetAttrString((PyObject *) PY_TYPE(LMSimilarity), "CollectionModel", make_descriptor(&PY_TYPE_DEF(LMSimilarity$CollectionModel)));
            PyObject_SetAttrString((PyObject *) PY_TYPE(LMSimilarity), "LMStats", make_descriptor(&PY_TYPE_DEF(LMSimilarity$LMStats)));
          }

          void t_LMSimilarity::initialize(PyObject *module)
          {
            PyObject_SetAttrString((PyObject *) PY_TYPE(LMSimilarity), "class_", make_descriptor(LMSimilarity::initializeClass, 1));
            PyObject_SetAttrString((PyObject *) PY_TYPE(LMSimilarity), "wrapfn_", make_descriptor(t_LMSimilarity::wrap_jobject));
            PyObject_SetAttrString((PyObject *) PY_TYPE(LMSimilarity), "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_LMSimilarity_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, LMSimilarity::initializeClass, 1)))
              return NULL;
            return t_LMSimilarity::wrap_Object(LMSimilarity(((t_LMSimilarity *) arg)->object.this$));
          }
          static PyObject *t_LMSimilarity_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, LMSimilarity::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_LMSimilarity_init_(t_LMSimilarity *self, PyObject *args, PyObject *kwds)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 0:
              {
                LMSimilarity object((jobject) NULL);

                INT_CALL(object = LMSimilarity());
                self->object = object;
                break;
              }
             case 1:
              {
                ::org::apache::lucene::search::similarities::LMSimilarity$CollectionModel a0((jobject) NULL);
                LMSimilarity object((jobject) NULL);

                if (!parseArgs(args, "k", ::org::apache::lucene::search::similarities::LMSimilarity$CollectionModel::initializeClass, &a0))
                {
                  INT_CALL(object = LMSimilarity(a0));
                  self->object = object;
                  break;
                }
              }
             default:
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_LMSimilarity_getName(t_LMSimilarity *self)
          {
            ::java::lang::String result((jobject) NULL);
            OBJ_CALL(result = self->object.getName());
            return j2p(result);
          }

          static PyObject *t_LMSimilarity_toString(t_LMSimilarity *self, PyObject *args)
          {
            ::java::lang::String result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.toString());
              return j2p(result);
            }

            return callSuper(PY_TYPE(LMSimilarity), (PyObject *) self, "toString", args, 2);
          }

          static PyObject *t_LMSimilarity_get__name(t_LMSimilarity *self, void *data)
          {
            ::java::lang::String value((jobject) NULL);
            OBJ_CALL(value = self->object.getName());
            return j2p(value);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/suggest/analyzing/FSTUtil$Path.h"
#include "org/apache/lucene/util/IntsRefBuilder.h"
#include "org/apache/lucene/util/fst/FST$Arc.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace suggest {
          namespace analyzing {

            ::java::lang::Class *FSTUtil$Path::class$ = NULL;
            jmethodID *FSTUtil$Path::mids$ = NULL;
            jfieldID *FSTUtil$Path::fids$ = NULL;
            bool FSTUtil$Path::live$ = false;

            jclass FSTUtil$Path::initializeClass(bool getOnly)
            {
              if (getOnly)
                return (jclass) (live$ ? class$->this$ : NULL);
              if (class$ == NULL)
              {
                jclass cls = (jclass) env->findClass("org/apache/lucene/search/suggest/analyzing/FSTUtil$Path");

                mids$ = new jmethodID[max_mid];
                mids$[mid_init$_5385eeb18ef2cdbf] = env->getMethodID(cls, "<init>", "(ILorg/apache/lucene/util/fst/FST$Arc;Ljava/lang/Object;Lorg/apache/lucene/util/IntsRefBuilder;)V");

                fids$ = new jfieldID[max_fid];
                fids$[fid_fstNode] = env->getFieldID(cls, "fstNode", "Lorg/apache/lucene/util/fst/FST$Arc;");
                fids$[fid_input] = env->getFieldID(cls, "input", "Lorg/apache/lucene/util/IntsRefBuilder;");
                fids$[fid_output] = env->getFieldID(cls, "output", "Ljava/lang/Object;");
                fids$[fid_state] = env->getFieldID(cls, "state", "I");

                class$ = new ::java::lang::Class(cls);
                live$ = true;
              }
              return (jclass) class$->this$;
            }

            FSTUtil$Path::FSTUtil$Path(jint a0, const ::org::apache::lucene::util::fst::FST$Arc & a1, const ::java::lang::Object & a2, const ::org::apache::lucene::util::IntsRefBuilder & a3) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_5385eeb18ef2cdbf, a0, a1.this$, a2.this$, a3.this$)) {}

            ::org::apache::lucene::util::fst::FST$Arc FSTUtil$Path::_get_fstNode() const
            {
              return ::org::apache::lucene::util::fst::FST$Arc(env->getObjectField(this$, fids$[fid_fstNode]));
            }

            ::org::apache::lucene::util::IntsRefBuilder FSTUtil$Path::_get_input() const
            {
              return ::org::apache::lucene::util::IntsRefBuilder(env->getObjectField(this$, fids$[fid_input]));
            }

            ::java::lang::Object FSTUtil$Path::_get_output() const
            {
              return ::java::lang::Object(env->getObjectField(this$, fids$[fid_output]));
            }

            jint FSTUtil$Path::_get_state() const
            {
              return env->getIntField(this$, fids$[fid_state]);
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace suggest {
          namespace analyzing {
            static PyObject *t_FSTUtil$Path_cast_(PyTypeObject *type, PyObject *arg);
            static PyObject *t_FSTUtil$Path_instance_(PyTypeObject *type, PyObject *arg);
            static PyObject *t_FSTUtil$Path_of_(t_FSTUtil$Path *self, PyObject *args);
            static int t_FSTUtil$Path_init_(t_FSTUtil$Path *self, PyObject *args, PyObject *kwds);
            static PyObject *t_FSTUtil$Path_get__fstNode(t_FSTUtil$Path *self, void *data);
            static PyObject *t_FSTUtil$Path_get__input(t_FSTUtil$Path *self, void *data);
            static PyObject *t_FSTUtil$Path_get__output(t_FSTUtil$Path *self, void *data);
            static PyObject *t_FSTUtil$Path_get__state(t_FSTUtil$Path *self, void *data);

            static PyObject *t_FSTUtil$Path_get__parameters_(t_FSTUtil$Path *self, void *data);
            static PyGetSetDef t_FSTUtil$Path__fields_[] = {
              DECLARE_GET_FIELD(t_FSTUtil$Path, fstNode),
              DECLARE_GET_FIELD(t_FSTUtil$Path, input),
              DECLARE_GET_FIELD(t_FSTUtil$Path, output),
              DECLARE_GET_FIELD(t_FSTUtil$Path, state),
              DECLARE_GET_FIELD(t_FSTUtil$Path, parameters_),
              { NULL, NULL, NULL, NULL, NULL }
            };

            static PyMethodDef t_FSTUtil$Path__methods_[] = {
              DECLARE_METHOD(t_FSTUtil$Path, cast_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_FSTUtil$Path, instance_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_FSTUtil$Path, of_, METH_VARARGS),
              { NULL, NULL, 0, NULL }
            };

            static PyType_Slot PY_TYPE_SLOTS(FSTUtil$Path)[] = {
              { Py_tp_methods, t_FSTUtil$Path__methods_ },
              { Py_tp_init, (void *) t_FSTUtil$Path_init_ },
              { Py_tp_getset, t_FSTUtil$Path__fields_ },
              { 0, NULL }
            };

            static PyType_Def *PY_TYPE_BASES(FSTUtil$Path)[] = {
              &PY_TYPE_DEF(::java::lang::Object),
              NULL
            };

            DEFINE_TYPE(FSTUtil$Path, t_FSTUtil$Path, FSTUtil$Path);
            PyObject *t_FSTUtil$Path::wrap_Object(const FSTUtil$Path& object, PyTypeObject *p0)
            {
              PyObject *obj = t_FSTUtil$Path::wrap_Object(object);
              if (obj != NULL && obj != Py_None)
              {
                t_FSTUtil$Path *self = (t_FSTUtil$Path *) obj;
                self->parameters[0] = p0;
              }
              return obj;
            }

            PyObject *t_FSTUtil$Path::wrap_jobject(const jobject& object, PyTypeObject *p0)
            {
              PyObject *obj = t_FSTUtil$Path::wrap_jobject(object);
              if (obj != NULL && obj != Py_None)
              {
                t_FSTUtil$Path *self = (t_FSTUtil$Path *) obj;
                self->parameters[0] = p0;
              }
              return obj;
            }

            void t_FSTUtil$Path::install(PyObject *module)
            {
              installType(&PY_TYPE(FSTUtil$Path), &PY_TYPE_DEF(FSTUtil$Path), module, "FSTUtil$Path", 0);
            }

            void t_FSTUtil$Path::initialize(PyObject *module)
            {
              PyObject_SetAttrString((PyObject *) PY_TYPE(FSTUtil$Path), "class_", make_descriptor(FSTUtil$Path::initializeClass, 1));
              PyObject_SetAttrString((PyObject *) PY_TYPE(FSTUtil$Path), "wrapfn_", make_descriptor(t_FSTUtil$Path::wrap_jobject));
              PyObject_SetAttrString((PyObject *) PY_TYPE(FSTUtil$Path), "boxfn_", make_descriptor(boxObject));
            }

            static PyObject *t_FSTUtil$Path_cast_(PyTypeObject *type, PyObject *arg)
            {
              if (!(arg = castCheck(arg, FSTUtil$Path::initializeClass, 1)))
                return NULL;
              return t_FSTUtil$Path::wrap_Object(FSTUtil$Path(((t_FSTUtil$Path *) arg)->object.this$));
            }
            static PyObject *t_FSTUtil$Path_instance_(PyTypeObject *type, PyObject *arg)
            {
              if (!castCheck(arg, FSTUtil$Path::initializeClass, 0))
                Py_RETURN_FALSE;
              Py_RETURN_TRUE;
            }

            static PyObject *t_FSTUtil$Path_of_(t_FSTUtil$Path *self, PyObject *args)
            {
              if (!parseArg(args, "T", 1, &(self->parameters)))
                Py_RETURN_SELF;
              return PyErr_SetArgsError((PyObject *) self, "of_", args);
            }

            static int t_FSTUtil$Path_init_(t_FSTUtil$Path *self, PyObject *args, PyObject *kwds)
            {
              jint a0;
              ::org::apache::lucene::util::fst::FST$Arc a1((jobject) NULL);
              PyTypeObject **p1;
              ::java::lang::Object a2((jobject) NULL);
              ::org::apache::lucene::util::IntsRefBuilder a3((jobject) NULL);
              FSTUtil$Path object((jobject) NULL);

              if (!parseArgs(args, "IKok", ::org::apache::lucene::util::fst::FST$Arc::initializeClass, ::org::apache::lucene::util::IntsRefBuilder::initializeClass, &a0, &a1, &p1, ::org::apache::lucene::util::fst::t_FST$Arc::parameters_, &a2, &a3))
              {
                INT_CALL(object = FSTUtil$Path(a0, a1, a2, a3));
                self->object = object;
              }
              else
              {
                PyErr_SetArgsError((PyObject *) self, "__init__", args);
                return -1;
              }

              return 0;
            }
            static PyObject *t_FSTUtil$Path_get__parameters_(t_FSTUtil$Path *self, void *data)
            {
              return typeParameters(self->parameters, sizeof(self->parameters));
            }

            static PyObject *t_FSTUtil$Path_get__fstNode(t_FSTUtil$Path *self, void *data)
            {
              ::org::apache::lucene::util::fst::FST$Arc value((jobject) NULL);
              OBJ_CALL(value = self->object._get_fstNode());
              return ::org::apache::lucene::util::fst::t_FST$Arc::wrap_Object(value);
            }

            static PyObject *t_FSTUtil$Path_get__input(t_FSTUtil$Path *self, void *data)
            {
              ::org::apache::lucene::util::IntsRefBuilder value((jobject) NULL);
              OBJ_CALL(value = self->object._get_input());
              return ::org::apache::lucene::util::t_IntsRefBuilder::wrap_Object(value);
            }

            static PyObject *t_FSTUtil$Path_get__output(t_FSTUtil$Path *self, void *data)
            {
              ::java::lang::Object value((jobject) NULL);
              OBJ_CALL(value = self->object._get_output());
              return ::java::lang::t_Object::wrap_Object(value);
            }

            static PyObject *t_FSTUtil$Path_get__state(t_FSTUtil$Path *self, void *data)
            {
              jint value;
              OBJ_CALL(value = self->object._get_state());
              return PyLong_FromLong((long) value);
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/index/IndexWriter.h"
#include "org/apache/lucene/index/IndexReader.h"
#include "org/apache/lucene/index/DirectoryReader.h"
#include "org/apache/lucene/index/TwoPhaseCommit.h"
#include "org/apache/lucene/index/CodecReader.h"
#include "org/apache/lucene/index/IndexWriterConfig.h"
#include "java/lang/String.h"
#include "org/apache/lucene/search/Query.h"
#include "java/util/Map$Entry.h"
#include "org/apache/lucene/index/Term.h"
#include "org/apache/lucene/util/Accountable.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/analysis/Analyzer.h"
#include "org/apache/lucene/index/MergePolicy$MergeContext.h"
#include "org/apache/lucene/document/Field.h"
#include "org/apache/lucene/index/IndexWriter$DocStats.h"
#include "java/lang/Iterable.h"
#include "org/apache/lucene/util/BytesRef.h"
#include "java/util/Set.h"
#include "org/apache/lucene/util/InfoStream.h"
#include "org/apache/lucene/index/SegmentInfos.h"
#include "org/apache/lucene/index/LiveIndexWriterConfig.h"
#include "org/apache/lucene/index/IndexableField.h"
#include "org/apache/lucene/store/Directory.h"
#include "java/io/Closeable.h"
#include "org/apache/lucene/index/SegmentCommitInfo.h"
#include "java/io/IOException.h"
#include "java/lang/Throwable.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {

        ::java::lang::Class *IndexWriter::class$ = NULL;
        jmethodID *IndexWriter::mids$ = NULL;
        bool IndexWriter::live$ = false;
        jint IndexWriter::MAX_DOCS = (jint) 0;
        jint IndexWriter::MAX_POSITION = (jint) 0;
        jint IndexWriter::MAX_STORED_STRING_LENGTH = (jint) 0;
        jint IndexWriter::MAX_TERM_LENGTH = (jint) 0;
        ::java::lang::String *IndexWriter::SOURCE = NULL;
        ::java::lang::String *IndexWriter::SOURCE_ADDINDEXES_READERS = NULL;
        ::java::lang::String *IndexWriter::SOURCE_FLUSH = NULL;
        ::java::lang::String *IndexWriter::SOURCE_MERGE = NULL;
        ::java::lang::String *IndexWriter::WRITE_LOCK_NAME = NULL;

        jclass IndexWriter::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/index/IndexWriter");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_3128376472d636d0] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/store/Directory;Lorg/apache/lucene/index/IndexWriterConfig;)V");
            mids$[mid_addDocument_886e4657d40731cf] = env->getMethodID(cls, "addDocument", "(Ljava/lang/Iterable;)J");
            mids$[mid_addDocuments_886e4657d40731cf] = env->getMethodID(cls, "addDocuments", "(Ljava/lang/Iterable;)J");
            mids$[mid_addIndexes_8f6d3487bd0416a3] = env->getMethodID(cls, "addIndexes", "([Lorg/apache/lucene/index/CodecReader;)J");
            mids$[mid_addIndexes_e529e8cc043bafc6] = env->getMethodID(cls, "addIndexes", "([Lorg/apache/lucene/store/Directory;)J");
            mids$[mid_advanceSegmentInfosVersion_9c778c9bce6694df] = env->getMethodID(cls, "advanceSegmentInfosVersion", "(J)V");
            mids$[mid_close_f2cc1bce94666404] = env->getMethodID(cls, "close", "()V");
            mids$[mid_commit_2e5ae9edcb9b072f] = env->getMethodID(cls, "commit", "()J");
            mids$[mid_decRefDeleter_3f9b7fbda4d2a096] = env->getMethodID(cls, "decRefDeleter", "(Lorg/apache/lucene/index/SegmentInfos;)V");
            mids$[mid_deleteAll_2e5ae9edcb9b072f] = env->getMethodID(cls, "deleteAll", "()J");
            mids$[mid_deleteDocuments_ea4d83832bd2c65f] = env->getMethodID(cls, "deleteDocuments", "([Lorg/apache/lucene/index/Term;)J");
            mids$[mid_deleteDocuments_dd02bee91ea029b0] = env->getMethodID(cls, "deleteDocuments", "([Lorg/apache/lucene/search/Query;)J");
            mids$[mid_deleteUnusedFiles_f2cc1bce94666404] = env->getMethodID(cls, "deleteUnusedFiles", "()V");
            mids$[mid_flush_f2cc1bce94666404] = env->getMethodID(cls, "flush", "()V");
            mids$[mid_flushNextBuffer_8454bd5aa23fd11e] = env->getMethodID(cls, "flushNextBuffer", "()Z");
            mids$[mid_forceMerge_040c4cd0390c5aff] = env->getMethodID(cls, "forceMerge", "(I)V");
            mids$[mid_forceMerge_b8f283cdbda5c964] = env->getMethodID(cls, "forceMerge", "(IZ)V");
            mids$[mid_forceMergeDeletes_f2cc1bce94666404] = env->getMethodID(cls, "forceMergeDeletes", "()V");
            mids$[mid_forceMergeDeletes_9d72768e8fdce2b7] = env->getMethodID(cls, "forceMergeDeletes", "(Z)V");
            mids$[mid_getAnalyzer_75a99b097bd64493] = env->getMethodID(cls, "getAnalyzer", "()Lorg/apache/lucene/analysis/Analyzer;");
            mids$[mid_getConfig_d7414aca50eb2a40] = env->getMethodID(cls, "getConfig", "()Lorg/apache/lucene/index/LiveIndexWriterConfig;");
            mids$[mid_getDirectory_7452b086ce8219b2] = env->getMethodID(cls, "getDirectory", "()Lorg/apache/lucene/store/Directory;");
            mids$[mid_getDocStats_c986b54aabb70579] = env->getMethodID(cls, "getDocStats", "()Lorg/apache/lucene/index/IndexWriter$DocStats;");
            mids$[mid_getFieldNames_7dcf4034c6d1a92a] = env->getMethodID(cls, "getFieldNames", "()Ljava/util/Set;");
            mids$[mid_getFlushingBytes_2e5ae9edcb9b072f] = env->getMethodID(cls, "getFlushingBytes", "()J");
            mids$[mid_getInfoStream_05a6766ae71db614] = env->getMethodID(cls, "getInfoStream", "()Lorg/apache/lucene/util/InfoStream;");
            mids$[mid_getLiveCommitData_7a21c115c1b038aa] = env->getMethodID(cls, "getLiveCommitData", "()Ljava/lang/Iterable;");
            mids$[mid_getMaxCompletedSequenceNumber_2e5ae9edcb9b072f] = env->getMethodID(cls, "getMaxCompletedSequenceNumber", "()J");
            mids$[mid_getMergingSegments_7dcf4034c6d1a92a] = env->getMethodID(cls, "getMergingSegments", "()Ljava/util/Set;");
            mids$[mid_getPendingNumDocs_2e5ae9edcb9b072f] = env->getMethodID(cls, "getPendingNumDocs", "()J");
            mids$[mid_getReader_f2740abbecd1a98f] = env->getMethodID(cls, "getReader", "()Lorg/apache/lucene/index/DirectoryReader;");
            mids$[mid_getReader_dac5029fd8e538bb] = env->getMethodID(cls, "getReader", "(ZZ)Lorg/apache/lucene/index/DirectoryReader;");
            mids$[mid_getTragicException_4d6e2861e0be5c10] = env->getMethodID(cls, "getTragicException", "()Ljava/lang/Throwable;");
            mids$[mid_hasDeletions_8454bd5aa23fd11e] = env->getMethodID(cls, "hasDeletions", "()Z");
            mids$[mid_hasPendingMerges_8454bd5aa23fd11e] = env->getMethodID(cls, "hasPendingMerges", "()Z");
            mids$[mid_hasUncommittedChanges_8454bd5aa23fd11e] = env->getMethodID(cls, "hasUncommittedChanges", "()Z");
            mids$[mid_incRefDeleter_3f9b7fbda4d2a096] = env->getMethodID(cls, "incRefDeleter", "(Lorg/apache/lucene/index/SegmentInfos;)V");
            mids$[mid_isOpen_8454bd5aa23fd11e] = env->getMethodID(cls, "isOpen", "()Z");
            mids$[mid_maybeMerge_f2cc1bce94666404] = env->getMethodID(cls, "maybeMerge", "()V");
            mids$[mid_numDeletedDocs_a14757c1f6c5c9ec] = env->getMethodID(cls, "numDeletedDocs", "(Lorg/apache/lucene/index/SegmentCommitInfo;)I");
            mids$[mid_numDeletesToMerge_a14757c1f6c5c9ec] = env->getMethodID(cls, "numDeletesToMerge", "(Lorg/apache/lucene/index/SegmentCommitInfo;)I");
            mids$[mid_numRamDocs_9972fcc56b44e79d] = env->getMethodID(cls, "numRamDocs", "()I");
            mids$[mid_onTragicEvent_787e2f59666235c5] = env->getMethodID(cls, "onTragicEvent", "(Ljava/lang/Throwable;Ljava/lang/String;)V");
            mids$[mid_prepareCommit_2e5ae9edcb9b072f] = env->getMethodID(cls, "prepareCommit", "()J");
            mids$[mid_ramBytesUsed_2e5ae9edcb9b072f] = env->getMethodID(cls, "ramBytesUsed", "()J");
            mids$[mid_rollback_f2cc1bce94666404] = env->getMethodID(cls, "rollback", "()V");
            mids$[mid_setLiveCommitData_870d7079aa6e0153] = env->getMethodID(cls, "setLiveCommitData", "(Ljava/lang/Iterable;)V");
            mids$[mid_setLiveCommitData_3bfd7c24ea15c4f1] = env->getMethodID(cls, "setLiveCommitData", "(Ljava/lang/Iterable;Z)V");
            mids$[mid_softUpdateDocument_8753404127ccc7aa] = env->getMethodID(cls, "softUpdateDocument", "(Lorg/apache/lucene/index/Term;Ljava/lang/Iterable;[Lorg/apache/lucene/document/Field;)J");
            mids$[mid_softUpdateDocuments_8753404127ccc7aa] = env->getMethodID(cls, "softUpdateDocuments", "(Lorg/apache/lucene/index/Term;Ljava/lang/Iterable;[Lorg/apache/lucene/document/Field;)J");
            mids$[mid_tryDeleteDocument_35f6327da08c6994] = env->getMethodID(cls, "tryDeleteDocument", "(Lorg/apache/lucene/index/IndexReader;I)J");
            mids$[mid_tryUpdateDocValue_4201c90342c7fff0] = env->getMethodID(cls, "tryUpdateDocValue", "(Lorg/apache/lucene/index/IndexReader;I[Lorg/apache/lucene/document/Field;)J");
            mids$[mid_updateBinaryDocValue_aed0aeed624c551a] = env->getMethodID(cls, "updateBinaryDocValue", "(Lorg/apache/lucene/index/Term;Ljava/lang/String;Lorg/apache/lucene/util/BytesRef;)J");
            mids$[mid_updateDocValues_71557dfae811995e] = env->getMethodID(cls, "updateDocValues", "(Lorg/apache/lucene/index/Term;[Lorg/apache/lucene/document/Field;)J");
            mids$[mid_updateDocument_5937fc584cc14357] = env->getMethodID(cls, "updateDocument", "(Lorg/apache/lucene/index/Term;Ljava/lang/Iterable;)J");
            mids$[mid_updateDocuments_5937fc584cc14357] = env->getMethodID(cls, "updateDocuments", "(Lorg/apache/lucene/index/Term;Ljava/lang/Iterable;)J");
            mids$[mid_updateNumericDocValue_caf04eb0a747d50d] = env->getMethodID(cls, "updateNumericDocValue", "(Lorg/apache/lucene/index/Term;Ljava/lang/String;J)J");
            mids$[mid_doAfterFlush_f2cc1bce94666404] = env->getMethodID(cls, "doAfterFlush", "()V");
            mids$[mid_doBeforeFlush_f2cc1bce94666404] = env->getMethodID(cls, "doBeforeFlush", "()V");
            mids$[mid_mergeSuccess_b4144ef05f017168] = env->getMethodID(cls, "mergeSuccess", "(Lorg/apache/lucene/index/MergePolicy$OneMerge;)V");
            mids$[mid_isEnableTestPoints_8454bd5aa23fd11e] = env->getMethodID(cls, "isEnableTestPoints", "()Z");
            mids$[mid_merge_b4144ef05f017168] = env->getMethodID(cls, "merge", "(Lorg/apache/lucene/index/MergePolicy$OneMerge;)V");
            mids$[mid_ensureOpen_9d72768e8fdce2b7] = env->getMethodID(cls, "ensureOpen", "(Z)V");
            mids$[mid_ensureOpen_f2cc1bce94666404] = env->getMethodID(cls, "ensureOpen", "()V");

            class$ = new ::java::lang::Class(cls);
            cls = (jclass) class$->this$;

            MAX_DOCS = env->getStaticIntField(cls, "MAX_DOCS");
            MAX_POSITION = env->getStaticIntField(cls, "MAX_POSITION");
            MAX_STORED_STRING_LENGTH = env->getStaticIntField(cls, "MAX_STORED_STRING_LENGTH");
            MAX_TERM_LENGTH = env->getStaticIntField(cls, "MAX_TERM_LENGTH");
            SOURCE = new ::java::lang::String(env->getStaticObjectField(cls, "SOURCE", "Ljava/lang/String;"));
            SOURCE_ADDINDEXES_READERS = new ::java::lang::String(env->getStaticObjectField(cls, "SOURCE_ADDINDEXES_READERS", "Ljava/lang/String;"));
            SOURCE_FLUSH = new ::java::lang::String(env->getStaticObjectField(cls, "SOURCE_FLUSH", "Ljava/lang/String;"));
            SOURCE_MERGE = new ::java::lang::String(env->getStaticObjectField(cls, "SOURCE_MERGE", "Ljava/lang/String;"));
            WRITE_LOCK_NAME = new ::java::lang::String(env->getStaticObjectField(cls, "WRITE_LOCK_NAME", "Ljava/lang/String;"));
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        IndexWriter::IndexWriter(const ::org::apache::lucene::store::Directory & a0, const ::org::apache::lucene::index::IndexWriterConfig & a1) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_3128376472d636d0, a0.this$, a1.this$)) {}

        jlong IndexWriter::addDocument(const ::java::lang::Iterable & a0) const
        {
          return env->callLongMethod(this$, mids$[mid_addDocument_886e4657d40731cf], a0.this$);
        }

        jlong IndexWriter::addDocuments(const ::java::lang::Iterable & a0) const
        {
          return env->callLongMethod(this$, mids$[mid_addDocuments_886e4657d40731cf], a0.this$);
        }

        jlong IndexWriter::addIndexes(const JArray< ::org::apache::lucene::index::CodecReader > & a0) const
        {
          return env->callLongMethod(this$, mids$[mid_addIndexes_8f6d3487bd0416a3], a0.this$);
        }

        jlong IndexWriter::addIndexes(const JArray< ::org::apache::lucene::store::Directory > & a0) const
        {
          return env->callLongMethod(this$, mids$[mid_addIndexes_e529e8cc043bafc6], a0.this$);
        }

        void IndexWriter::advanceSegmentInfosVersion(jlong a0) const
        {
          env->callVoidMethod(this$, mids$[mid_advanceSegmentInfosVersion_9c778c9bce6694df], a0);
        }

        void IndexWriter::close() const
        {
          env->callVoidMethod(this$, mids$[mid_close_f2cc1bce94666404]);
        }

        jlong IndexWriter::commit() const
        {
          return env->callLongMethod(this$, mids$[mid_commit_2e5ae9edcb9b072f]);
        }

        void IndexWriter::decRefDeleter(const ::org::apache::lucene::index::SegmentInfos & a0) const
        {
          env->callVoidMethod(this$, mids$[mid_decRefDeleter_3f9b7fbda4d2a096], a0.this$);
        }

        jlong IndexWriter::deleteAll() const
        {
          return env->callLongMethod(this$, mids$[mid_deleteAll_2e5ae9edcb9b072f]);
        }

        jlong IndexWriter::deleteDocuments(const JArray< ::org::apache::lucene::index::Term > & a0) const
        {
          return env->callLongMethod(this$, mids$[mid_deleteDocuments_ea4d83832bd2c65f], a0.this$);
        }

        jlong IndexWriter::deleteDocuments(const JArray< ::org::apache::lucene::search::Query > & a0) const
        {
          return env->callLongMethod(this$, mids$[mid_deleteDocuments_dd02bee91ea029b0], a0.this$);
        }

        void IndexWriter::deleteUnusedFiles() const
        {
          env->callVoidMethod(this$, mids$[mid_deleteUnusedFiles_f2cc1bce94666404]);
        }

        void IndexWriter::flush() const
        {
          env->callVoidMethod(this$, mids$[mid_flush_f2cc1bce94666404]);
        }

        jboolean IndexWriter::flushNextBuffer() const
        {
          return env->callBooleanMethod(this$, mids$[mid_flushNextBuffer_8454bd5aa23fd11e]);
        }

        void IndexWriter::forceMerge(jint a0) const
        {
          env->callVoidMethod(this$, mids$[mid_forceMerge_040c4cd0390c5aff], a0);
        }

        void IndexWriter::forceMerge(jint a0, jboolean a1) const
        {
          env->callVoidMethod(this$, mids$[mid_forceMerge_b8f283cdbda5c964], a0, a1);
        }

        void IndexWriter::forceMergeDeletes() const
        {
          env->callVoidMethod(this$, mids$[mid_forceMergeDeletes_f2cc1bce94666404]);
        }

        void IndexWriter::forceMergeDeletes(jboolean a0) const
        {
          env->callVoidMethod(this$, mids$[mid_forceMergeDeletes_9d72768e8fdce2b7], a0);
        }

        ::org::apache::lucene::analysis::Analyzer IndexWriter::getAnalyzer() const
        {
          return ::org::apache::lucene::analysis::Analyzer(env->callObjectMethod(this$, mids$[mid_getAnalyzer_75a99b097bd64493]));
        }

        ::org::apache::lucene::index::LiveIndexWriterConfig IndexWriter::getConfig() const
        {
          return ::org::apache::lucene::index::LiveIndexWriterConfig(env->callObjectMethod(this$, mids$[mid_getConfig_d7414aca50eb2a40]));
        }

        ::org::apache::lucene::store::Directory IndexWriter::getDirectory() const
        {
          return ::org::apache::lucene::store::Directory(env->callObjectMethod(this$, mids$[mid_getDirectory_7452b086ce8219b2]));
        }

        ::org::apache::lucene::index::IndexWriter$DocStats IndexWriter::getDocStats() const
        {
          return ::org::apache::lucene::index::IndexWriter$DocStats(env->callObjectMethod(this$, mids$[mid_getDocStats_c986b54aabb70579]));
        }

        ::java::util::Set IndexWriter::getFieldNames() const
        {
          return ::java::util::Set(env->callObjectMethod(this$, mids$[mid_getFieldNames_7dcf4034c6d1a92a]));
        }

        jlong IndexWriter::getFlushingBytes() const
        {
          return env->callLongMethod(this$, mids$[mid_getFlushingBytes_2e5ae9edcb9b072f]);
        }

        ::org::apache::lucene::util::InfoStream IndexWriter::getInfoStream() const
        {
          return ::org::apache::lucene::util::InfoStream(env->callObjectMethod(this$, mids$[mid_getInfoStream_05a6766ae71db614]));
        }

        ::java::lang::Iterable IndexWriter::getLiveCommitData() const
        {
          return ::java::lang::Iterable(env->callObjectMethod(this$, mids$[mid_getLiveCommitData_7a21c115c1b038aa]));
        }

        jlong IndexWriter::getMaxCompletedSequenceNumber() const
        {
          return env->callLongMethod(this$, mids$[mid_getMaxCompletedSequenceNumber_2e5ae9edcb9b072f]);
        }

        ::java::util::Set IndexWriter::getMergingSegments() const
        {
          return ::java::util::Set(env->callObjectMethod(this$, mids$[mid_getMergingSegments_7dcf4034c6d1a92a]));
        }

        jlong IndexWriter::getPendingNumDocs() const
        {
          return env->callLongMethod(this$, mids$[mid_getPendingNumDocs_2e5ae9edcb9b072f]);
        }

        ::org::apache::lucene::index::DirectoryReader IndexWriter::getReader() const
        {
          return ::org::apache::lucene::index::DirectoryReader(env->callObjectMethod(this$, mids$[mid_getReader_f2740abbecd1a98f]));
        }

        ::org::apache::lucene::index::DirectoryReader IndexWriter::getReader(jboolean a0, jboolean a1) const
        {
          return ::org::apache::lucene::index::DirectoryReader(env->callObjectMethod(this$, mids$[mid_getReader_dac5029fd8e538bb], a0, a1));
        }

        ::java::lang::Throwable IndexWriter::getTragicException() const
        {
          return ::java::lang::Throwable(env->callObjectMethod(this$, mids$[mid_getTragicException_4d6e2861e0be5c10]));
        }

        jboolean IndexWriter::hasDeletions() const
        {
          return env->callBooleanMethod(this$, mids$[mid_hasDeletions_8454bd5aa23fd11e]);
        }

        jboolean IndexWriter::hasPendingMerges() const
        {
          return env->callBooleanMethod(this$, mids$[mid_hasPendingMerges_8454bd5aa23fd11e]);
        }

        jboolean IndexWriter::hasUncommittedChanges() const
        {
          return env->callBooleanMethod(this$, mids$[mid_hasUncommittedChanges_8454bd5aa23fd11e]);
        }

        void IndexWriter::incRefDeleter(const ::org::apache::lucene::index::SegmentInfos & a0) const
        {
          env->callVoidMethod(this$, mids$[mid_incRefDeleter_3f9b7fbda4d2a096], a0.this$);
        }

        jboolean IndexWriter::isOpen() const
        {
          return env->callBooleanMethod(this$, mids$[mid_isOpen_8454bd5aa23fd11e]);
        }

        void IndexWriter::maybeMerge() const
        {
          env->callVoidMethod(this$, mids$[mid_maybeMerge_f2cc1bce94666404]);
        }

        jint IndexWriter::numDeletedDocs(const ::org::apache::lucene::index::SegmentCommitInfo & a0) const
        {
          return env->callIntMethod(this$, mids$[mid_numDeletedDocs_a14757c1f6c5c9ec], a0.this$);
        }

        jint IndexWriter::numDeletesToMerge(const ::org::apache::lucene::index::SegmentCommitInfo & a0) const
        {
          return env->callIntMethod(this$, mids$[mid_numDeletesToMerge_a14757c1f6c5c9ec], a0.this$);
        }

        jint IndexWriter::numRamDocs() const
        {
          return env->callIntMethod(this$, mids$[mid_numRamDocs_9972fcc56b44e79d]);
        }

        void IndexWriter::onTragicEvent(const ::java::lang::Throwable & a0, const ::java::lang::String & a1) const
        {
          env->callVoidMethod(this$, mids$[mid_onTragicEvent_787e2f59666235c5], a0.this$, a1.this$);
        }

        jlong IndexWriter::prepareCommit() const
        {
          return env->callLongMethod(this$, mids$[mid_prepareCommit_2e5ae9edcb9b072f]);
        }

        jlong IndexWriter::ramBytesUsed() const
        {
          return env->callLongMethod(this$, mids$[mid_ramBytesUsed_2e5ae9edcb9b072f]);
        }

        void IndexWriter::rollback() const
        {
          env->callVoidMethod(this$, mids$[mid_rollback_f2cc1bce94666404]);
        }

        void IndexWriter::setLiveCommitData(const ::java::lang::Iterable & a0) const
        {
          env->callVoidMethod(this$, mids$[mid_setLiveCommitData_870d7079aa6e0153], a0.this$);
        }

        void IndexWriter::setLiveCommitData(const ::java::lang::Iterable & a0, jboolean a1) const
        {
          env->callVoidMethod(this$, mids$[mid_setLiveCommitData_3bfd7c24ea15c4f1], a0.this$, a1);
        }

        jlong IndexWriter::softUpdateDocument(const ::org::apache::lucene::index::Term & a0, const ::java::lang::Iterable & a1, const JArray< ::org::apache::lucene::document::Field > & a2) const
        {
          return env->callLongMethod(this$, mids$[mid_softUpdateDocument_8753404127ccc7aa], a0.this$, a1.this$, a2.this$);
        }

        jlong IndexWriter::softUpdateDocuments(const ::org::apache::lucene::index::Term & a0, const ::java::lang::Iterable & a1, const JArray< ::org::apache::lucene::document::Field > & a2) const
        {
          return env->callLongMethod(this$, mids$[mid_softUpdateDocuments_8753404127ccc7aa], a0.this$, a1.this$, a2.this$);
        }

        jlong IndexWriter::tryDeleteDocument(const ::org::apache::lucene::index::IndexReader & a0, jint a1) const
        {
          return env->callLongMethod(this$, mids$[mid_tryDeleteDocument_35f6327da08c6994], a0.this$, a1);
        }

        jlong IndexWriter::tryUpdateDocValue(const ::org::apache::lucene::index::IndexReader & a0, jint a1, const JArray< ::org::apache::lucene::document::Field > & a2) const
        {
          return env->callLongMethod(this$, mids$[mid_tryUpdateDocValue_4201c90342c7fff0], a0.this$, a1, a2.this$);
        }

        jlong IndexWriter::updateBinaryDocValue(const ::org::apache::lucene::index::Term & a0, const ::java::lang::String & a1, const ::org::apache::lucene::util::BytesRef & a2) const
        {
          return env->callLongMethod(this$, mids$[mid_updateBinaryDocValue_aed0aeed624c551a], a0.this$, a1.this$, a2.this$);
        }

        jlong IndexWriter::updateDocValues(const ::org::apache::lucene::index::Term & a0, const JArray< ::org::apache::lucene::document::Field > & a1) const
        {
          return env->callLongMethod(this$, mids$[mid_updateDocValues_71557dfae811995e], a0.this$, a1.this$);
        }

        jlong IndexWriter::updateDocument(const ::org::apache::lucene::index::Term & a0, const ::java::lang::Iterable & a1) const
        {
          return env->callLongMethod(this$, mids$[mid_updateDocument_5937fc584cc14357], a0.this$, a1.this$);
        }

        jlong IndexWriter::updateDocuments(const ::org::apache::lucene::index::Term & a0, const ::java::lang::Iterable & a1) const
        {
          return env->callLongMethod(this$, mids$[mid_updateDocuments_5937fc584cc14357], a0.this$, a1.this$);
        }

        jlong IndexWriter::updateNumericDocValue(const ::org::apache::lucene::index::Term & a0, const ::java::lang::String & a1, jlong a2) const
        {
          return env->callLongMethod(this$, mids$[mid_updateNumericDocValue_caf04eb0a747d50d], a0.this$, a1.this$, a2);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"
#include "org/apache/lucene/index/IndexWriter$IndexReaderWarmer.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {
        static PyObject *t_IndexWriter_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_IndexWriter_instance_(PyTypeObject *type, PyObject *arg);
        static int t_IndexWriter_init_(t_IndexWriter *self, PyObject *args, PyObject *kwds);
        static PyObject *t_IndexWriter_addDocument(t_IndexWriter *self, PyObject *arg);
        static PyObject *t_IndexWriter_addDocuments(t_IndexWriter *self, PyObject *arg);
        static PyObject *t_IndexWriter_addIndexes(t_IndexWriter *self, PyObject *args);
        static PyObject *t_IndexWriter_advanceSegmentInfosVersion(t_IndexWriter *self, PyObject *arg);
        static PyObject *t_IndexWriter_close(t_IndexWriter *self);
        static PyObject *t_IndexWriter_commit(t_IndexWriter *self);
        static PyObject *t_IndexWriter_decRefDeleter(t_IndexWriter *self, PyObject *arg);
        static PyObject *t_IndexWriter_deleteAll(t_IndexWriter *self);
        static PyObject *t_IndexWriter_deleteDocuments(t_IndexWriter *self, PyObject *args);
        static PyObject *t_IndexWriter_deleteUnusedFiles(t_IndexWriter *self);
        static PyObject *t_IndexWriter_flush(t_IndexWriter *self);
        static PyObject *t_IndexWriter_flushNextBuffer(t_IndexWriter *self);
        static PyObject *t_IndexWriter_forceMerge(t_IndexWriter *self, PyObject *args);
        static PyObject *t_IndexWriter_forceMergeDeletes(t_IndexWriter *self, PyObject *args);
        static PyObject *t_IndexWriter_getAnalyzer(t_IndexWriter *self);
        static PyObject *t_IndexWriter_getConfig(t_IndexWriter *self);
        static PyObject *t_IndexWriter_getDirectory(t_IndexWriter *self);
        static PyObject *t_IndexWriter_getDocStats(t_IndexWriter *self);
        static PyObject *t_IndexWriter_getFieldNames(t_IndexWriter *self);
        static PyObject *t_IndexWriter_getFlushingBytes(t_IndexWriter *self);
        static PyObject *t_IndexWriter_getInfoStream(t_IndexWriter *self);
        static PyObject *t_IndexWriter_getLiveCommitData(t_IndexWriter *self);
        static PyObject *t_IndexWriter_getMaxCompletedSequenceNumber(t_IndexWriter *self);
        static PyObject *t_IndexWriter_getMergingSegments(t_IndexWriter *self);
        static PyObject *t_IndexWriter_getPendingNumDocs(t_IndexWriter *self);
        static PyObject *t_IndexWriter_getReader(t_IndexWriter *self, PyObject *args);
        static PyObject *t_IndexWriter_getTragicException(t_IndexWriter *self);
        static PyObject *t_IndexWriter_hasDeletions(t_IndexWriter *self);
        static PyObject *t_IndexWriter_hasPendingMerges(t_IndexWriter *self);
        static PyObject *t_IndexWriter_hasUncommittedChanges(t_IndexWriter *self);
        static PyObject *t_IndexWriter_incRefDeleter(t_IndexWriter *self, PyObject *arg);
        static PyObject *t_IndexWriter_isOpen(t_IndexWriter *self);
        static PyObject *t_IndexWriter_maybeMerge(t_IndexWriter *self);
        static PyObject *t_IndexWriter_numDeletedDocs(t_IndexWriter *self, PyObject *arg);
        static PyObject *t_IndexWriter_numDeletesToMerge(t_IndexWriter *self, PyObject *arg);
        static PyObject *t_IndexWriter_numRamDocs(t_IndexWriter *self);
        static PyObject *t_IndexWriter_onTragicEvent(t_IndexWriter *self, PyObject *args);
        static PyObject *t_IndexWriter_prepareCommit(t_IndexWriter *self);
        static PyObject *t_IndexWriter_ramBytesUsed(t_IndexWriter *self);
        static PyObject *t_IndexWriter_rollback(t_IndexWriter *self);
        static PyObject *t_IndexWriter_setLiveCommitData(t_IndexWriter *self, PyObject *args);
        static PyObject *t_IndexWriter_softUpdateDocument(t_IndexWriter *self, PyObject *args);
        static PyObject *t_IndexWriter_softUpdateDocuments(t_IndexWriter *self, PyObject *args);
        static PyObject *t_IndexWriter_tryDeleteDocument(t_IndexWriter *self, PyObject *args);
        static PyObject *t_IndexWriter_tryUpdateDocValue(t_IndexWriter *self, PyObject *args);
        static PyObject *t_IndexWriter_updateBinaryDocValue(t_IndexWriter *self, PyObject *args);
        static PyObject *t_IndexWriter_updateDocValues(t_IndexWriter *self, PyObject *args);
        static PyObject *t_IndexWriter_updateDocument(t_IndexWriter *self, PyObject *args);
        static PyObject *t_IndexWriter_updateDocuments(t_IndexWriter *self, PyObject *args);
        static PyObject *t_IndexWriter_updateNumericDocValue(t_IndexWriter *self, PyObject *args);
        static PyObject *t_IndexWriter_get__analyzer(t_IndexWriter *self, void *data);
        static PyObject *t_IndexWriter_get__config(t_IndexWriter *self, void *data);
        static PyObject *t_IndexWriter_get__directory(t_IndexWriter *self, void *data);
        static PyObject *t_IndexWriter_get__docStats(t_IndexWriter *self, void *data);
        static PyObject *t_IndexWriter_get__fieldNames(t_IndexWriter *self, void *data);
        static PyObject *t_IndexWriter_get__flushingBytes(t_IndexWriter *self, void *data);
        static PyObject *t_IndexWriter_get__infoStream(t_IndexWriter *self, void *data);
        static PyObject *t_IndexWriter_get__liveCommitData(t_IndexWriter *self, void *data);
        static int t_IndexWriter_set__liveCommitData(t_IndexWriter *self, PyObject *arg, void *data);
        static PyObject *t_IndexWriter_get__maxCompletedSequenceNumber(t_IndexWriter *self, void *data);
        static PyObject *t_IndexWriter_get__mergingSegments(t_IndexWriter *self, void *data);
        static PyObject *t_IndexWriter_get__open(t_IndexWriter *self, void *data);
        static PyObject *t_IndexWriter_get__pendingNumDocs(t_IndexWriter *self, void *data);
        static PyObject *t_IndexWriter_get__reader(t_IndexWriter *self, void *data);
        static PyObject *t_IndexWriter_get__tragicException(t_IndexWriter *self, void *data);
        static PyGetSetDef t_IndexWriter__fields_[] = {
          DECLARE_GET_FIELD(t_IndexWriter, analyzer),
          DECLARE_GET_FIELD(t_IndexWriter, config),
          DECLARE_GET_FIELD(t_IndexWriter, directory),
          DECLARE_GET_FIELD(t_IndexWriter, docStats),
          DECLARE_GET_FIELD(t_IndexWriter, fieldNames),
          DECLARE_GET_FIELD(t_IndexWriter, flushingBytes),
          DECLARE_GET_FIELD(t_IndexWriter, infoStream),
          DECLARE_GETSET_FIELD(t_IndexWriter, liveCommitData),
          DECLARE_GET_FIELD(t_IndexWriter, maxCompletedSequenceNumber),
          DECLARE_GET_FIELD(t_IndexWriter, mergingSegments),
          DECLARE_GET_FIELD(t_IndexWriter, open),
          DECLARE_GET_FIELD(t_IndexWriter, pendingNumDocs),
          DECLARE_GET_FIELD(t_IndexWriter, reader),
          DECLARE_GET_FIELD(t_IndexWriter, tragicException),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_IndexWriter__methods_[] = {
          DECLARE_METHOD(t_IndexWriter, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_IndexWriter, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_IndexWriter, addDocument, METH_O),
          DECLARE_METHOD(t_IndexWriter, addDocuments, METH_O),
          DECLARE_METHOD(t_IndexWriter, addIndexes, METH_VARARGS),
          DECLARE_METHOD(t_IndexWriter, advanceSegmentInfosVersion, METH_O),
          DECLARE_METHOD(t_IndexWriter, close, METH_NOARGS),
          DECLARE_METHOD(t_IndexWriter, commit, METH_NOARGS),
          DECLARE_METHOD(t_IndexWriter, decRefDeleter, METH_O),
          DECLARE_METHOD(t_IndexWriter, deleteAll, METH_NOARGS),
          DECLARE_METHOD(t_IndexWriter, deleteDocuments, METH_VARARGS),
          DECLARE_METHOD(t_IndexWriter, deleteUnusedFiles, METH_NOARGS),
          DECLARE_METHOD(t_IndexWriter, flush, METH_NOARGS),
          DECLARE_METHOD(t_IndexWriter, flushNextBuffer, METH_NOARGS),
          DECLARE_METHOD(t_IndexWriter, forceMerge, METH_VARARGS),
          DECLARE_METHOD(t_IndexWriter, forceMergeDeletes, METH_VARARGS),
          DECLARE_METHOD(t_IndexWriter, getAnalyzer, METH_NOARGS),
          DECLARE_METHOD(t_IndexWriter, getConfig, METH_NOARGS),
          DECLARE_METHOD(t_IndexWriter, getDirectory, METH_NOARGS),
          DECLARE_METHOD(t_IndexWriter, getDocStats, METH_NOARGS),
          DECLARE_METHOD(t_IndexWriter, getFieldNames, METH_NOARGS),
          DECLARE_METHOD(t_IndexWriter, getFlushingBytes, METH_NOARGS),
          DECLARE_METHOD(t_IndexWriter, getInfoStream, METH_NOARGS),
          DECLARE_METHOD(t_IndexWriter, getLiveCommitData, METH_NOARGS),
          DECLARE_METHOD(t_IndexWriter, getMaxCompletedSequenceNumber, METH_NOARGS),
          DECLARE_METHOD(t_IndexWriter, getMergingSegments, METH_NOARGS),
          DECLARE_METHOD(t_IndexWriter, getPendingNumDocs, METH_NOARGS),
          DECLARE_METHOD(t_IndexWriter, getReader, METH_VARARGS),
          DECLARE_METHOD(t_IndexWriter, getTragicException, METH_NOARGS),
          DECLARE_METHOD(t_IndexWriter, hasDeletions, METH_NOARGS),
          DECLARE_METHOD(t_IndexWriter, hasPendingMerges, METH_NOARGS),
          DECLARE_METHOD(t_IndexWriter, hasUncommittedChanges, METH_NOARGS),
          DECLARE_METHOD(t_IndexWriter, incRefDeleter, METH_O),
          DECLARE_METHOD(t_IndexWriter, isOpen, METH_NOARGS),
          DECLARE_METHOD(t_IndexWriter, maybeMerge, METH_NOARGS),
          DECLARE_METHOD(t_IndexWriter, numDeletedDocs, METH_O),
          DECLARE_METHOD(t_IndexWriter, numDeletesToMerge, METH_O),
          DECLARE_METHOD(t_IndexWriter, numRamDocs, METH_NOARGS),
          DECLARE_METHOD(t_IndexWriter, onTragicEvent, METH_VARARGS),
          DECLARE_METHOD(t_IndexWriter, prepareCommit, METH_NOARGS),
          DECLARE_METHOD(t_IndexWriter, ramBytesUsed, METH_NOARGS),
          DECLARE_METHOD(t_IndexWriter, rollback, METH_NOARGS),
          DECLARE_METHOD(t_IndexWriter, setLiveCommitData, METH_VARARGS),
          DECLARE_METHOD(t_IndexWriter, softUpdateDocument, METH_VARARGS),
          DECLARE_METHOD(t_IndexWriter, softUpdateDocuments, METH_VARARGS),
          DECLARE_METHOD(t_IndexWriter, tryDeleteDocument, METH_VARARGS),
          DECLARE_METHOD(t_IndexWriter, tryUpdateDocValue, METH_VARARGS),
          DECLARE_METHOD(t_IndexWriter, updateBinaryDocValue, METH_VARARGS),
          DECLARE_METHOD(t_IndexWriter, updateDocValues, METH_VARARGS),
          DECLARE_METHOD(t_IndexWriter, updateDocument, METH_VARARGS),
          DECLARE_METHOD(t_IndexWriter, updateDocuments, METH_VARARGS),
          DECLARE_METHOD(t_IndexWriter, updateNumericDocValue, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        static PyType_Slot PY_TYPE_SLOTS(IndexWriter)[] = {
          { Py_tp_methods, t_IndexWriter__methods_ },
          { Py_tp_init, (void *) t_IndexWriter_init_ },
          { Py_tp_getset, t_IndexWriter__fields_ },
          { 0, NULL }
        };

        static PyType_Def *PY_TYPE_BASES(IndexWriter)[] = {
          &PY_TYPE_DEF(::java::lang::Object),
          NULL
        };

        DEFINE_TYPE(IndexWriter, t_IndexWriter, IndexWriter);

        void t_IndexWriter::install(PyObject *module)
        {
          installType(&PY_TYPE(IndexWriter), &PY_TYPE_DEF(IndexWriter), module, "IndexWriter", 0);
          PyObject_SetAttrString((PyObject *) PY_TYPE(IndexWriter), "DocStats", make_descriptor(&PY_TYPE_DEF(IndexWriter$DocStats)));
          PyObject_SetAttrString((PyObject *) PY_TYPE(IndexWriter), "IndexReaderWarmer", make_descriptor(&PY_TYPE_DEF(IndexWriter$IndexReaderWarmer)));
        }

        void t_IndexWriter::initialize(PyObject *module)
        {
          PyObject_SetAttrString((PyObject *) PY_TYPE(IndexWriter), "class_", make_descriptor(IndexWriter::initializeClass, 1));
          PyObject_SetAttrString((PyObject *) PY_TYPE(IndexWriter), "wrapfn_", make_descriptor(t_IndexWriter::wrap_jobject));
          PyObject_SetAttrString((PyObject *) PY_TYPE(IndexWriter), "boxfn_", make_descriptor(boxObject));
          env->getClass(IndexWriter::initializeClass);
          PyObject_SetAttrString((PyObject *) PY_TYPE(IndexWriter), "MAX_DOCS", make_descriptor(IndexWriter::MAX_DOCS));
          PyObject_SetAttrString((PyObject *) PY_TYPE(IndexWriter), "MAX_POSITION", make_descriptor(IndexWriter::MAX_POSITION));
          PyObject_SetAttrString((PyObject *) PY_TYPE(IndexWriter), "MAX_STORED_STRING_LENGTH", make_descriptor(IndexWriter::MAX_STORED_STRING_LENGTH));
          PyObject_SetAttrString((PyObject *) PY_TYPE(IndexWriter), "MAX_TERM_LENGTH", make_descriptor(IndexWriter::MAX_TERM_LENGTH));
          PyObject_SetAttrString((PyObject *) PY_TYPE(IndexWriter), "SOURCE", make_descriptor(j2p(*IndexWriter::SOURCE)));
          PyObject_SetAttrString((PyObject *) PY_TYPE(IndexWriter), "SOURCE_ADDINDEXES_READERS", make_descriptor(j2p(*IndexWriter::SOURCE_ADDINDEXES_READERS)));
          PyObject_SetAttrString((PyObject *) PY_TYPE(IndexWriter), "SOURCE_FLUSH", make_descriptor(j2p(*IndexWriter::SOURCE_FLUSH)));
          PyObject_SetAttrString((PyObject *) PY_TYPE(IndexWriter), "SOURCE_MERGE", make_descriptor(j2p(*IndexWriter::SOURCE_MERGE)));
          PyObject_SetAttrString((PyObject *) PY_TYPE(IndexWriter), "WRITE_LOCK_NAME", make_descriptor(j2p(*IndexWriter::WRITE_LOCK_NAME)));
        }

        static PyObject *t_IndexWriter_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, IndexWriter::initializeClass, 1)))
            return NULL;
          return t_IndexWriter::wrap_Object(IndexWriter(((t_IndexWriter *) arg)->object.this$));
        }
        static PyObject *t_IndexWriter_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, IndexWriter::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_IndexWriter_init_(t_IndexWriter *self, PyObject *args, PyObject *kwds)
        {
          ::org::apache::lucene::store::Directory a0((jobject) NULL);
          ::org::apache::lucene::index::IndexWriterConfig a1((jobject) NULL);
          IndexWriter object((jobject) NULL);

          if (!parseArgs(args, "kk", ::org::apache::lucene::store::Directory::initializeClass, ::org::apache::lucene::index::IndexWriterConfig::initializeClass, &a0, &a1))
          {
            INT_CALL(object = IndexWriter(a0, a1));
            self->object = object;
          }
          else
          {
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }

        static PyObject *t_IndexWriter_addDocument(t_IndexWriter *self, PyObject *arg)
        {
          ::java::lang::Iterable a0((jobject) NULL);
          PyTypeObject **p0;
          jlong result;

          if (!parseArg(arg, "K", ::java::lang::Iterable::initializeClass, &a0, &p0, ::java::lang::t_Iterable::parameters_))
          {
            OBJ_CALL(result = self->object.addDocument(a0));
            return PyLong_FromLongLong((PY_LONG_LONG) result);
          }

          PyErr_SetArgsError((PyObject *) self, "addDocument", arg);
          return NULL;
        }

        static PyObject *t_IndexWriter_addDocuments(t_IndexWriter *self, PyObject *arg)
        {
          ::java::lang::Iterable a0((jobject) NULL);
          PyTypeObject **p0;
          jlong result;

          if (!parseArg(arg, "K", ::java::lang::Iterable::initializeClass, &a0, &p0, ::java::lang::t_Iterable::parameters_))
          {
            OBJ_CALL(result = self->object.addDocuments(a0));
            return PyLong_FromLongLong((PY_LONG_LONG) result);
          }

          PyErr_SetArgsError((PyObject *) self, "addDocuments", arg);
          return NULL;
        }

        static PyObject *t_IndexWriter_addIndexes(t_IndexWriter *self, PyObject *args)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 1:
            {
              JArray< ::org::apache::lucene::index::CodecReader > a0((jobject) NULL);
              jlong result;

              if (!parseArgs(args, "[k", ::org::apache::lucene::index::CodecReader::initializeClass, &a0))
              {
                OBJ_CALL(result = self->object.addIndexes(a0));
                return PyLong_FromLongLong((PY_LONG_LONG) result);
              }
            }
            {
              JArray< ::org::apache::lucene::store::Directory > a0((jobject) NULL);
              jlong result;

              if (!parseArgs(args, "[k", ::org::apache::lucene::store::Directory::initializeClass, &a0))
              {
                OBJ_CALL(result = self->object.addIndexes(a0));
                return PyLong_FromLongLong((PY_LONG_LONG) result);
              }
            }
          }

          PyErr_SetArgsError((PyObject *) self, "addIndexes", args);
          return NULL;
        }

        static PyObject *t_IndexWriter_advanceSegmentInfosVersion(t_IndexWriter *self, PyObject *arg)
        {
          jlong a0;

          if (!parseArg(arg, "J", &a0))
          {
            OBJ_CALL(self->object.advanceSegmentInfosVersion(a0));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "advanceSegmentInfosVersion", arg);
          return NULL;
        }

        static PyObject *t_IndexWriter_close(t_IndexWriter *self)
        {
          OBJ_CALL(self->object.close());
          Py_RETURN_NONE;
        }

        static PyObject *t_IndexWriter_commit(t_IndexWriter *self)
        {
          jlong result;
          OBJ_CALL(result = self->object.commit());
          return PyLong_FromLongLong((PY_LONG_LONG) result);
        }

        static PyObject *t_IndexWriter_decRefDeleter(t_IndexWriter *self, PyObject *arg)
        {
          ::org::apache::lucene::index::SegmentInfos a0((jobject) NULL);

          if (!parseArg(arg, "k", ::org::apache::lucene::index::SegmentInfos::initializeClass, &a0))
          {
            OBJ_CALL(self->object.decRefDeleter(a0));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "decRefDeleter", arg);
          return NULL;
        }

        static PyObject *t_IndexWriter_deleteAll(t_IndexWriter *self)
        {
          jlong result;
          OBJ_CALL(result = self->object.deleteAll());
          return PyLong_FromLongLong((PY_LONG_LONG) result);
        }

        static PyObject *t_IndexWriter_deleteDocuments(t_IndexWriter *self, PyObject *args)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 1:
            {
              JArray< ::org::apache::lucene::index::Term > a0((jobject) NULL);
              jlong result;

              if (!parseArgs(args, "[k", ::org::apache::lucene::index::Term::initializeClass, &a0))
              {
                OBJ_CALL(result = self->object.deleteDocuments(a0));
                return PyLong_FromLongLong((PY_LONG_LONG) result);
              }
            }
            {
              JArray< ::org::apache::lucene::search::Query > a0((jobject) NULL);
              jlong result;

              if (!parseArgs(args, "[k", ::org::apache::lucene::search::Query::initializeClass, &a0))
              {
                OBJ_CALL(result = self->object.deleteDocuments(a0));
                return PyLong_FromLongLong((PY_LONG_LONG) result);
              }
            }
          }

          PyErr_SetArgsError((PyObject *) self, "deleteDocuments", args);
          return NULL;
        }

        static PyObject *t_IndexWriter_deleteUnusedFiles(t_IndexWriter *self)
        {
          OBJ_CALL(self->object.deleteUnusedFiles());
          Py_RETURN_NONE;
        }

        static PyObject *t_IndexWriter_flush(t_IndexWriter *self)
        {
          OBJ_CALL(self->object.flush());
          Py_RETURN_NONE;
        }

        static PyObject *t_IndexWriter_flushNextBuffer(t_IndexWriter *self)
        {
          jboolean result;
          OBJ_CALL(result = self->object.flushNextBuffer());
          Py_RETURN_BOOL(result);
        }

        static PyObject *t_IndexWriter_forceMerge(t_IndexWriter *self, PyObject *args)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 1:
            {
              jint a0;

              if (!parseArgs(args, "I", &a0))
              {
                OBJ_CALL(self->object.forceMerge(a0));
                Py_RETURN_NONE;
              }
            }
            break;
           case 2:
            {
              jint a0;
              jboolean a1;

              if (!parseArgs(args, "IZ", &a0, &a1))
              {
                OBJ_CALL(self->object.forceMerge(a0, a1));
                Py_RETURN_NONE;
              }
            }
          }

          PyErr_SetArgsError((PyObject *) self, "forceMerge", args);
          return NULL;
        }

        static PyObject *t_IndexWriter_forceMergeDeletes(t_IndexWriter *self, PyObject *args)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 0:
            {
              OBJ_CALL(self->object.forceMergeDeletes());
              Py_RETURN_NONE;
            }
            break;
           case 1:
            {
              jboolean a0;

              if (!parseArgs(args, "Z", &a0))
              {
                OBJ_CALL(self->object.forceMergeDeletes(a0));
                Py_RETURN_NONE;
              }
            }
          }

          PyErr_SetArgsError((PyObject *) self, "forceMergeDeletes", args);
          return NULL;
        }

        static PyObject *t_IndexWriter_getAnalyzer(t_IndexWriter *self)
        {
          ::org::apache::lucene::analysis::Analyzer result((jobject) NULL);
          OBJ_CALL(result = self->object.getAnalyzer());
          return ::org::apache::lucene::analysis::t_Analyzer::wrap_Object(result);
        }

        static PyObject *t_IndexWriter_getConfig(t_IndexWriter *self)
        {
          ::org::apache::lucene::index::LiveIndexWriterConfig result((jobject) NULL);
          OBJ_CALL(result = self->object.getConfig());
          return ::org::apache::lucene::index::t_LiveIndexWriterConfig::wrap_Object(result);
        }

        static PyObject *t_IndexWriter_getDirectory(t_IndexWriter *self)
        {
          ::org::apache::lucene::store::Directory result((jobject) NULL);
          OBJ_CALL(result = self->object.getDirectory());
          return ::org::apache::lucene::store::t_Directory::wrap_Object(result);
        }

        static PyObject *t_IndexWriter_getDocStats(t_IndexWriter *self)
        {
          ::org::apache::lucene::index::IndexWriter$DocStats result((jobject) NULL);
          OBJ_CALL(result = self->object.getDocStats());
          return ::org::apache::lucene::index::t_IndexWriter$DocStats::wrap_Object(result);
        }

        static PyObject *t_IndexWriter_getFieldNames(t_IndexWriter *self)
        {
          ::java::util::Set result((jobject) NULL);
          OBJ_CALL(result = self->object.getFieldNames());
          return ::java::util::t_Set::wrap_Object(result, ::java::lang::PY_TYPE(String));
        }

        static PyObject *t_IndexWriter_getFlushingBytes(t_IndexWriter *self)
        {
          jlong result;
          OBJ_CALL(result = self->object.getFlushingBytes());
          return PyLong_FromLongLong((PY_LONG_LONG) result);
        }

        static PyObject *t_IndexWriter_getInfoStream(t_IndexWriter *self)
        {
          ::org::apache::lucene::util::InfoStream result((jobject) NULL);
          OBJ_CALL(result = self->object.getInfoStream());
          return ::org::apache::lucene::util::t_InfoStream::wrap_Object(result);
        }

        static PyObject *t_IndexWriter_getLiveCommitData(t_IndexWriter *self)
        {
          ::java::lang::Iterable result((jobject) NULL);
          OBJ_CALL(result = self->object.getLiveCommitData());
          return ::java::lang::t_Iterable::wrap_Object(result);
        }

        static PyObject *t_IndexWriter_getMaxCompletedSequenceNumber(t_IndexWriter *self)
        {
          jlong result;
          OBJ_CALL(result = self->object.getMaxCompletedSequenceNumber());
          return PyLong_FromLongLong((PY_LONG_LONG) result);
        }

        static PyObject *t_IndexWriter_getMergingSegments(t_IndexWriter *self)
        {
          ::java::util::Set result((jobject) NULL);
          OBJ_CALL(result = self->object.getMergingSegments());
          return ::java::util::t_Set::wrap_Object(result, ::org::apache::lucene::index::PY_TYPE(SegmentCommitInfo));
        }

        static PyObject *t_IndexWriter_getPendingNumDocs(t_IndexWriter *self)
        {
          jlong result;
          OBJ_CALL(result = self->object.getPendingNumDocs());
          return PyLong_FromLongLong((PY_LONG_LONG) result);
        }

        static PyObject *t_IndexWriter_getReader(t_IndexWriter *self, PyObject *args)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 0:
            {
              ::org::apache::lucene::index::DirectoryReader result((jobject) NULL);
              OBJ_CALL(result = self->object.getReader());
              return ::org::apache::lucene::index::t_DirectoryReader::wrap_Object(result);
            }
            break;
           case 2:
            {
              jboolean a0;
              jboolean a1;
              ::org::apache::lucene::index::DirectoryReader result((jobject) NULL);

              if (!parseArgs(args, "ZZ", &a0, &a1))
              {
                OBJ_CALL(result = self->object.getReader(a0, a1));
                return ::org::apache::lucene::index::t_DirectoryReader::wrap_Object(result);
              }
            }
          }

          PyErr_SetArgsError((PyObject *) self, "getReader", args);
          return NULL;
        }

        static PyObject *t_IndexWriter_getTragicException(t_IndexWriter *self)
        {
          ::java::lang::Throwable result((jobject) NULL);
          OBJ_CALL(result = self->object.getTragicException());
          return ::java::lang::t_Throwable::wrap_Object(result);
        }

        static PyObject *t_IndexWriter_hasDeletions(t_IndexWriter *self)
        {
          jboolean result;
          OBJ_CALL(result = self->object.hasDeletions());
          Py_RETURN_BOOL(result);
        }

        static PyObject *t_IndexWriter_hasPendingMerges(t_IndexWriter *self)
        {
          jboolean result;
          OBJ_CALL(result = self->object.hasPendingMerges());
          Py_RETURN_BOOL(result);
        }

        static PyObject *t_IndexWriter_hasUncommittedChanges(t_IndexWriter *self)
        {
          jboolean result;
          OBJ_CALL(result = self->object.hasUncommittedChanges());
          Py_RETURN_BOOL(result);
        }

        static PyObject *t_IndexWriter_incRefDeleter(t_IndexWriter *self, PyObject *arg)
        {
          ::org::apache::lucene::index::SegmentInfos a0((jobject) NULL);

          if (!parseArg(arg, "k", ::org::apache::lucene::index::SegmentInfos::initializeClass, &a0))
          {
            OBJ_CALL(self->object.incRefDeleter(a0));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "incRefDeleter", arg);
          return NULL;
        }

        static PyObject *t_IndexWriter_isOpen(t_IndexWriter *self)
        {
          jboolean result;
          OBJ_CALL(result = self->object.isOpen());
          Py_RETURN_BOOL(result);
        }

        static PyObject *t_IndexWriter_maybeMerge(t_IndexWriter *self)
        {
          OBJ_CALL(self->object.maybeMerge());
          Py_RETURN_NONE;
        }

        static PyObject *t_IndexWriter_numDeletedDocs(t_IndexWriter *self, PyObject *arg)
        {
          ::org::apache::lucene::index::SegmentCommitInfo a0((jobject) NULL);
          jint result;

          if (!parseArg(arg, "k", ::org::apache::lucene::index::SegmentCommitInfo::initializeClass, &a0))
          {
            OBJ_CALL(result = self->object.numDeletedDocs(a0));
            return PyLong_FromLong((long) result);
          }

          PyErr_SetArgsError((PyObject *) self, "numDeletedDocs", arg);
          return NULL;
        }

        static PyObject *t_IndexWriter_numDeletesToMerge(t_IndexWriter *self, PyObject *arg)
        {
          ::org::apache::lucene::index::SegmentCommitInfo a0((jobject) NULL);
          jint result;

          if (!parseArg(arg, "k", ::org::apache::lucene::index::SegmentCommitInfo::initializeClass, &a0))
          {
            OBJ_CALL(result = self->object.numDeletesToMerge(a0));
            return PyLong_FromLong((long) result);
          }

          PyErr_SetArgsError((PyObject *) self, "numDeletesToMerge", arg);
          return NULL;
        }

        static PyObject *t_IndexWriter_numRamDocs(t_IndexWriter *self)
        {
          jint result;
          OBJ_CALL(result = self->object.numRamDocs());
          return PyLong_FromLong((long) result);
        }

        static PyObject *t_IndexWriter_onTragicEvent(t_IndexWriter *self, PyObject *args)
        {
          ::java::lang::Throwable a0((jobject) NULL);
          ::java::lang::String a1((jobject) NULL);

          if (!parseArgs(args, "ks", ::java::lang::Throwable::initializeClass, &a0, &a1))
          {
            OBJ_CALL(self->object.onTragicEvent(a0, a1));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "onTragicEvent", args);
          return NULL;
        }

        static PyObject *t_IndexWriter_prepareCommit(t_IndexWriter *self)
        {
          jlong result;
          OBJ_CALL(result = self->object.prepareCommit());
          return PyLong_FromLongLong((PY_LONG_LONG) result);
        }

        static PyObject *t_IndexWriter_ramBytesUsed(t_IndexWriter *self)
        {
          jlong result;
          OBJ_CALL(result = self->object.ramBytesUsed());
          return PyLong_FromLongLong((PY_LONG_LONG) result);
        }

        static PyObject *t_IndexWriter_rollback(t_IndexWriter *self)
        {
          OBJ_CALL(self->object.rollback());
          Py_RETURN_NONE;
        }

        static PyObject *t_IndexWriter_setLiveCommitData(t_IndexWriter *self, PyObject *args)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 1:
            {
              ::java::lang::Iterable a0((jobject) NULL);
              PyTypeObject **p0;

              if (!parseArgs(args, "K", ::java::lang::Iterable::initializeClass, &a0, &p0, ::java::lang::t_Iterable::parameters_))
              {
                OBJ_CALL(self->object.setLiveCommitData(a0));
                Py_RETURN_NONE;
              }
            }
            break;
           case 2:
            {
              ::java::lang::Iterable a0((jobject) NULL);
              PyTypeObject **p0;
              jboolean a1;

              if (!parseArgs(args, "KZ", ::java::lang::Iterable::initializeClass, &a0, &p0, ::java::lang::t_Iterable::parameters_, &a1))
              {
                OBJ_CALL(self->object.setLiveCommitData(a0, a1));
                Py_RETURN_NONE;
              }
            }
          }

          PyErr_SetArgsError((PyObject *) self, "setLiveCommitData", args);
          return NULL;
        }

        static PyObject *t_IndexWriter_softUpdateDocument(t_IndexWriter *self, PyObject *args)
        {
          ::org::apache::lucene::index::Term a0((jobject) NULL);
          ::java::lang::Iterable a1((jobject) NULL);
          PyTypeObject **p1;
          JArray< ::org::apache::lucene::document::Field > a2((jobject) NULL);
          jlong result;

          if (!parseArgs(args, "kK[k", ::org::apache::lucene::index::Term::initializeClass, ::java::lang::Iterable::initializeClass, ::org::apache::lucene::document::Field::initializeClass, &a0, &a1, &p1, ::java::lang::t_Iterable::parameters_, &a2))
          {
            OBJ_CALL(result = self->object.softUpdateDocument(a0, a1, a2));
            return PyLong_FromLongLong((PY_LONG_LONG) result);
          }

          PyErr_SetArgsError((PyObject *) self, "softUpdateDocument", args);
          return NULL;
        }

        static PyObject *t_IndexWriter_softUpdateDocuments(t_IndexWriter *self, PyObject *args)
        {
          ::org::apache::lucene::index::Term a0((jobject) NULL);
          ::java::lang::Iterable a1((jobject) NULL);
          PyTypeObject **p1;
          JArray< ::org::apache::lucene::document::Field > a2((jobject) NULL);
          jlong result;

          if (!parseArgs(args, "kK[k", ::org::apache::lucene::index::Term::initializeClass, ::java::lang::Iterable::initializeClass, ::org::apache::lucene::document::Field::initializeClass, &a0, &a1, &p1, ::java::lang::t_Iterable::parameters_, &a2))
          {
            OBJ_CALL(result = self->object.softUpdateDocuments(a0, a1, a2));
            return PyLong_FromLongLong((PY_LONG_LONG) result);
          }

          PyErr_SetArgsError((PyObject *) self, "softUpdateDocuments", args);
          return NULL;
        }

        static PyObject *t_IndexWriter_tryDeleteDocument(t_IndexWriter *self, PyObject *args)
        {
          ::org::apache::lucene::index::IndexReader a0((jobject) NULL);
          jint a1;
          jlong result;

          if (!parseArgs(args, "kI", ::org::apache::lucene::index::IndexReader::initializeClass, &a0, &a1))
          {
            OBJ_CALL(result = self->object.tryDeleteDocument(a0, a1));
            return PyLong_FromLongLong((PY_LONG_LONG) result);
          }

          PyErr_SetArgsError((PyObject *) self, "tryDeleteDocument", args);
          return NULL;
        }

        static PyObject *t_IndexWriter_tryUpdateDocValue(t_IndexWriter *self, PyObject *args)
        {
          ::org::apache::lucene::index::IndexReader a0((jobject) NULL);
          jint a1;
          JArray< ::org::apache::lucene::document::Field > a2((jobject) NULL);
          jlong result;

          if (!parseArgs(args, "kI[k", ::org::apache::lucene::index::IndexReader::initializeClass, ::org::apache::lucene::document::Field::initializeClass, &a0, &a1, &a2))
          {
            OBJ_CALL(result = self->object.tryUpdateDocValue(a0, a1, a2));
            return PyLong_FromLongLong((PY_LONG_LONG) result);
          }

          PyErr_SetArgsError((PyObject *) self, "tryUpdateDocValue", args);
          return NULL;
        }

        static PyObject *t_IndexWriter_updateBinaryDocValue(t_IndexWriter *self, PyObject *args)
        {
          ::org::apache::lucene::index::Term a0((jobject) NULL);
          ::java::lang::String a1((jobject) NULL);
          ::org::apache::lucene::util::BytesRef a2((jobject) NULL);
          jlong result;

          if (!parseArgs(args, "ksk", ::org::apache::lucene::index::Term::initializeClass, ::org::apache::lucene::util::BytesRef::initializeClass, &a0, &a1, &a2))
          {
            OBJ_CALL(result = self->object.updateBinaryDocValue(a0, a1, a2));
            return PyLong_FromLongLong((PY_LONG_LONG) result);
          }

          PyErr_SetArgsError((PyObject *) self, "updateBinaryDocValue", args);
          return NULL;
        }

        static PyObject *t_IndexWriter_updateDocValues(t_IndexWriter *self, PyObject *args)
        {
          ::org::apache::lucene::index::Term a0((jobject) NULL);
          JArray< ::org::apache::lucene::document::Field > a1((jobject) NULL);
          jlong result;

          if (!parseArgs(args, "k[k", ::org::apache::lucene::index::Term::initializeClass, ::org::apache::lucene::document::Field::initializeClass, &a0, &a1))
          {
            OBJ_CALL(result = self->object.updateDocValues(a0, a1));
            return PyLong_FromLongLong((PY_LONG_LONG) result);
          }

          PyErr_SetArgsError((PyObject *) self, "updateDocValues", args);
          return NULL;
        }

        static PyObject *t_IndexWriter_updateDocument(t_IndexWriter *self, PyObject *args)
        {
          ::org::apache::lucene::index::Term a0((jobject) NULL);
          ::java::lang::Iterable a1((jobject) NULL);
          PyTypeObject **p1;
          jlong result;

          if (!parseArgs(args, "kK", ::org::apache::lucene::index::Term::initializeClass, ::java::lang::Iterable::initializeClass, &a0, &a1, &p1, ::java::lang::t_Iterable::parameters_))
          {
            OBJ_CALL(result = self->object.updateDocument(a0, a1));
            return PyLong_FromLongLong((PY_LONG_LONG) result);
          }

          PyErr_SetArgsError((PyObject *) self, "updateDocument", args);
          return NULL;
        }

        static PyObject *t_IndexWriter_updateDocuments(t_IndexWriter *self, PyObject *args)
        {
          ::org::apache::lucene::index::Term a0((jobject) NULL);
          ::java::lang::Iterable a1((jobject) NULL);
          PyTypeObject **p1;
          jlong result;

          if (!parseArgs(args, "kK", ::org::apache::lucene::index::Term::initializeClass, ::java::lang::Iterable::initializeClass, &a0, &a1, &p1, ::java::lang::t_Iterable::parameters_))
          {
            OBJ_CALL(result = self->object.updateDocuments(a0, a1));
            return PyLong_FromLongLong((PY_LONG_LONG) result);
          }

          PyErr_SetArgsError((PyObject *) self, "updateDocuments", args);
          return NULL;
        }

        static PyObject *t_IndexWriter_updateNumericDocValue(t_IndexWriter *self, PyObject *args)
        {
          ::org::apache::lucene::index::Term a0((jobject) NULL);
          ::java::lang::String a1((jobject) NULL);
          jlong a2;
          jlong result;

          if (!parseArgs(args, "ksJ", ::org::apache::lucene::index::Term::initializeClass, &a0, &a1, &a2))
          {
            OBJ_CALL(result = self->object.updateNumericDocValue(a0, a1, a2));
            return PyLong_FromLongLong((PY_LONG_LONG) result);
          }

          PyErr_SetArgsError((PyObject *) self, "updateNumericDocValue", args);
          return NULL;
        }

        static PyObject *t_IndexWriter_get__analyzer(t_IndexWriter *self, void *data)
        {
          ::org::apache::lucene::analysis::Analyzer value((jobject) NULL);
          OBJ_CALL(value = self->object.getAnalyzer());
          return ::org::apache::lucene::analysis::t_Analyzer::wrap_Object(value);
        }

        static PyObject *t_IndexWriter_get__config(t_IndexWriter *self, void *data)
        {
          ::org::apache::lucene::index::LiveIndexWriterConfig value((jobject) NULL);
          OBJ_CALL(value = self->object.getConfig());
          return ::org::apache::lucene::index::t_LiveIndexWriterConfig::wrap_Object(value);
        }

        static PyObject *t_IndexWriter_get__directory(t_IndexWriter *self, void *data)
        {
          ::org::apache::lucene::store::Directory value((jobject) NULL);
          OBJ_CALL(value = self->object.getDirectory());
          return ::org::apache::lucene::store::t_Directory::wrap_Object(value);
        }

        static PyObject *t_IndexWriter_get__docStats(t_IndexWriter *self, void *data)
        {
          ::org::apache::lucene::index::IndexWriter$DocStats value((jobject) NULL);
          OBJ_CALL(value = self->object.getDocStats());
          return ::org::apache::lucene::index::t_IndexWriter$DocStats::wrap_Object(value);
        }

        static PyObject *t_IndexWriter_get__fieldNames(t_IndexWriter *self, void *data)
        {
          ::java::util::Set value((jobject) NULL);
          OBJ_CALL(value = self->object.getFieldNames());
          return ::java::util::t_Set::wrap_Object(value);
        }

        static PyObject *t_IndexWriter_get__flushingBytes(t_IndexWriter *self, void *data)
        {
          jlong value;
          OBJ_CALL(value = self->object.getFlushingBytes());
          return PyLong_FromLongLong((PY_LONG_LONG) value);
        }

        static PyObject *t_IndexWriter_get__infoStream(t_IndexWriter *self, void *data)
        {
          ::org::apache::lucene::util::InfoStream value((jobject) NULL);
          OBJ_CALL(value = self->object.getInfoStream());
          return ::org::apache::lucene::util::t_InfoStream::wrap_Object(value);
        }

        static PyObject *t_IndexWriter_get__liveCommitData(t_IndexWriter *self, void *data)
        {
          ::java::lang::Iterable value((jobject) NULL);
          OBJ_CALL(value = self->object.getLiveCommitData());
          return ::java::lang::t_Iterable::wrap_Object(value);
        }
        static int t_IndexWriter_set__liveCommitData(t_IndexWriter *self, PyObject *arg, void *data)
        {
          {
            ::java::lang::Iterable value((jobject) NULL);
            if (!parseArg(arg, "k", ::java::lang::Iterable::initializeClass, &value))
            {
              INT_CALL(self->object.setLiveCommitData(value));
              return 0;
            }
          }
          PyErr_SetArgsError((PyObject *) self, "liveCommitData", arg);
          return -1;
        }

        static PyObject *t_IndexWriter_get__maxCompletedSequenceNumber(t_IndexWriter *self, void *data)
        {
          jlong value;
          OBJ_CALL(value = self->object.getMaxCompletedSequenceNumber());
          return PyLong_FromLongLong((PY_LONG_LONG) value);
        }

        static PyObject *t_IndexWriter_get__mergingSegments(t_IndexWriter *self, void *data)
        {
          ::java::util::Set value((jobject) NULL);
          OBJ_CALL(value = self->object.getMergingSegments());
          return ::java::util::t_Set::wrap_Object(value);
        }

        static PyObject *t_IndexWriter_get__open(t_IndexWriter *self, void *data)
        {
          jboolean value;
          OBJ_CALL(value = self->object.isOpen());
          Py_RETURN_BOOL(value);
        }

        static PyObject *t_IndexWriter_get__pendingNumDocs(t_IndexWriter *self, void *data)
        {
          jlong value;
          OBJ_CALL(value = self->object.getPendingNumDocs());
          return PyLong_FromLongLong((PY_LONG_LONG) value);
        }

        static PyObject *t_IndexWriter_get__reader(t_IndexWriter *self, void *data)
        {
          ::org::apache::lucene::index::DirectoryReader value((jobject) NULL);
          OBJ_CALL(value = self->object.getReader());
          return ::org::apache::lucene::index::t_DirectoryReader::wrap_Object(value);
        }

        static PyObject *t_IndexWriter_get__tragicException(t_IndexWriter *self, void *data)
        {
          ::java::lang::Throwable value((jobject) NULL);
          OBJ_CALL(value = self->object.getTragicException());
          return ::java::lang::t_Throwable::wrap_Object(value);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/ckb/SoraniStemFilter.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/analysis/TokenStream.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace ckb {

          ::java::lang::Class *SoraniStemFilter::class$ = NULL;
          jmethodID *SoraniStemFilter::mids$ = NULL;
          bool SoraniStemFilter::live$ = false;

          jclass SoraniStemFilter::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/ckb/SoraniStemFilter");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_c26756868a754f4e] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/analysis/TokenStream;)V");
              mids$[mid_incrementToken_8454bd5aa23fd11e] = env->getMethodID(cls, "incrementToken", "()Z");

              class$ = new ::java::lang::Class(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          SoraniStemFilter::SoraniStemFilter(const ::org::apache::lucene::analysis::TokenStream & a0) : ::org::apache::lucene::analysis::TokenFilter(env->newObject(initializeClass, &mids$, mid_init$_c26756868a754f4e, a0.this$)) {}

          jboolean SoraniStemFilter::incrementToken() const
          {
            return env->callBooleanMethod(this$, mids$[mid_incrementToken_8454bd5aa23fd11e]);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace ckb {
          static PyObject *t_SoraniStemFilter_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_SoraniStemFilter_instance_(PyTypeObject *type, PyObject *arg);
          static int t_SoraniStemFilter_init_(t_SoraniStemFilter *self, PyObject *args, PyObject *kwds);
          static PyObject *t_SoraniStemFilter_incrementToken(t_SoraniStemFilter *self, PyObject *args);

          static PyMethodDef t_SoraniStemFilter__methods_[] = {
            DECLARE_METHOD(t_SoraniStemFilter, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_SoraniStemFilter, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_SoraniStemFilter, incrementToken, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          static PyType_Slot PY_TYPE_SLOTS(SoraniStemFilter)[] = {
            { Py_tp_methods, t_SoraniStemFilter__methods_ },
            { Py_tp_init, (void *) t_SoraniStemFilter_init_ },
            { 0, NULL }
          };

          static PyType_Def *PY_TYPE_BASES(SoraniStemFilter)[] = {
            &PY_TYPE_DEF(::org::apache::lucene::analysis::TokenFilter),
            NULL
          };

          DEFINE_TYPE(SoraniStemFilter, t_SoraniStemFilter, SoraniStemFilter);

          void t_SoraniStemFilter::install(PyObject *module)
          {
            installType(&PY_TYPE(SoraniStemFilter), &PY_TYPE_DEF(SoraniStemFilter), module, "SoraniStemFilter", 0);
          }

          void t_SoraniStemFilter::initialize(PyObject *module)
          {
            PyObject_SetAttrString((PyObject *) PY_TYPE(SoraniStemFilter), "class_", make_descriptor(SoraniStemFilter::initializeClass, 1));
            PyObject_SetAttrString((PyObject *) PY_TYPE(SoraniStemFilter), "wrapfn_", make_descriptor(t_SoraniStemFilter::wrap_jobject));
            PyObject_SetAttrString((PyObject *) PY_TYPE(SoraniStemFilter), "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_SoraniStemFilter_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, SoraniStemFilter::initializeClass, 1)))
              return NULL;
            return t_SoraniStemFilter::wrap_Object(SoraniStemFilter(((t_SoraniStemFilter *) arg)->object.this$));
          }
          static PyObject *t_SoraniStemFilter_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, SoraniStemFilter::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_SoraniStemFilter_init_(t_SoraniStemFilter *self, PyObject *args, PyObject *kwds)
          {
            ::org::apache::lucene::analysis::TokenStream a0((jobject) NULL);
            SoraniStemFilter object((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::analysis::TokenStream::initializeClass, &a0))
            {
              INT_CALL(object = SoraniStemFilter(a0));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_SoraniStemFilter_incrementToken(t_SoraniStemFilter *self, PyObject *args)
          {
            jboolean result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.incrementToken());
              Py_RETURN_BOOL(result);
            }

            return callSuper(PY_TYPE(SoraniStemFilter), (PyObject *) self, "incrementToken", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queries/function/valuesource/TermFreqValueSource.h"
#include "java/util/Map.h"
#include "org/apache/lucene/index/LeafReaderContext.h"
#include "org/apache/lucene/queries/function/FunctionValues.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/util/BytesRef.h"
#include "java/lang/String.h"
#include "java/io/IOException.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queries {
        namespace function {
          namespace valuesource {

            ::java::lang::Class *TermFreqValueSource::class$ = NULL;
            jmethodID *TermFreqValueSource::mids$ = NULL;
            bool TermFreqValueSource::live$ = false;

            jclass TermFreqValueSource::initializeClass(bool getOnly)
            {
              if (getOnly)
                return (jclass) (live$ ? class$->this$ : NULL);
              if (class$ == NULL)
              {
                jclass cls = (jclass) env->findClass("org/apache/lucene/queries/function/valuesource/TermFreqValueSource");

                mids$ = new jmethodID[max_mid];
                mids$[mid_init$_1329b9cc98226e6f] = env->getMethodID(cls, "<init>", "(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Lorg/apache/lucene/util/BytesRef;)V");
                mids$[mid_getValues_ede8eccd3e97f32c] = env->getMethodID(cls, "getValues", "(Ljava/util/Map;Lorg/apache/lucene/index/LeafReaderContext;)Lorg/apache/lucene/queries/function/FunctionValues;");
                mids$[mid_name_db9b55ba01e03e4b] = env->getMethodID(cls, "name", "()Ljava/lang/String;");

                class$ = new ::java::lang::Class(cls);
                live$ = true;
              }
              return (jclass) class$->this$;
            }

            TermFreqValueSource::TermFreqValueSource(const ::java::lang::String & a0, const ::java::lang::String & a1, const ::java::lang::String & a2, const ::org::apache::lucene::util::BytesRef & a3) : ::org::apache::lucene::queries::function::valuesource::DocFreqValueSource(env->newObject(initializeClass, &mids$, mid_init$_1329b9cc98226e6f, a0.this$, a1.this$, a2.this$, a3.this$)) {}

            ::org::apache::lucene::queries::function::FunctionValues TermFreqValueSource::getValues(const ::java::util::Map & a0, const ::org::apache::lucene::index::LeafReaderContext & a1) const
            {
              return ::org::apache::lucene::queries::function::FunctionValues(env->callObjectMethod(this$, mids$[mid_getValues_ede8eccd3e97f32c], a0.this$, a1.this$));
            }

            ::java::lang::String TermFreqValueSource::name() const
            {
              return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_name_db9b55ba01e03e4b]));
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queries {
        namespace function {
          namespace valuesource {
            static PyObject *t_TermFreqValueSource_cast_(PyTypeObject *type, PyObject *arg);
            static PyObject *t_TermFreqValueSource_instance_(PyTypeObject *type, PyObject *arg);
            static int t_TermFreqValueSource_init_(t_TermFreqValueSource *self, PyObject *args, PyObject *kwds);
            static PyObject *t_TermFreqValueSource_getValues(t_TermFreqValueSource *self, PyObject *args);
            static PyObject *t_TermFreqValueSource_name(t_TermFreqValueSource *self, PyObject *args);

            static PyMethodDef t_TermFreqValueSource__methods_[] = {
              DECLARE_METHOD(t_TermFreqValueSource, cast_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_TermFreqValueSource, instance_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_TermFreqValueSource, getValues, METH_VARARGS),
              DECLARE_METHOD(t_TermFreqValueSource, name, METH_VARARGS),
              { NULL, NULL, 0, NULL }
            };

            static PyType_Slot PY_TYPE_SLOTS(TermFreqValueSource)[] = {
              { Py_tp_methods, t_TermFreqValueSource__methods_ },
              { Py_tp_init, (void *) t_TermFreqValueSource_init_ },
              { 0, NULL }
            };

            static PyType_Def *PY_TYPE_BASES(TermFreqValueSource)[] = {
              &PY_TYPE_DEF(::org::apache::lucene::queries::function::valuesource::DocFreqValueSource),
              NULL
            };

            DEFINE_TYPE(TermFreqValueSource, t_TermFreqValueSource, TermFreqValueSource);

            void t_TermFreqValueSource::install(PyObject *module)
            {
              installType(&PY_TYPE(TermFreqValueSource), &PY_TYPE_DEF(TermFreqValueSource), module, "TermFreqValueSource", 0);
            }

            void t_TermFreqValueSource::initialize(PyObject *module)
            {
              PyObject_SetAttrString((PyObject *) PY_TYPE(TermFreqValueSource), "class_", make_descriptor(TermFreqValueSource::initializeClass, 1));
              PyObject_SetAttrString((PyObject *) PY_TYPE(TermFreqValueSource), "wrapfn_", make_descriptor(t_TermFreqValueSource::wrap_jobject));
              PyObject_SetAttrString((PyObject *) PY_TYPE(TermFreqValueSource), "boxfn_", make_descriptor(boxObject));
            }

            static PyObject *t_TermFreqValueSource_cast_(PyTypeObject *type, PyObject *arg)
            {
              if (!(arg = castCheck(arg, TermFreqValueSource::initializeClass, 1)))
                return NULL;
              return t_TermFreqValueSource::wrap_Object(TermFreqValueSource(((t_TermFreqValueSource *) arg)->object.this$));
            }
            static PyObject *t_TermFreqValueSource_instance_(PyTypeObject *type, PyObject *arg)
            {
              if (!castCheck(arg, TermFreqValueSource::initializeClass, 0))
                Py_RETURN_FALSE;
              Py_RETURN_TRUE;
            }

            static int t_TermFreqValueSource_init_(t_TermFreqValueSource *self, PyObject *args, PyObject *kwds)
            {
              ::java::lang::String a0((jobject) NULL);
              ::java::lang::String a1((jobject) NULL);
              ::java::lang::String a2((jobject) NULL);
              ::org::apache::lucene::util::BytesRef a3((jobject) NULL);
              TermFreqValueSource object((jobject) NULL);

              if (!parseArgs(args, "sssk", ::org::apache::lucene::util::BytesRef::initializeClass, &a0, &a1, &a2, &a3))
              {
                INT_CALL(object = TermFreqValueSource(a0, a1, a2, a3));
                self->object = object;
              }
              else
              {
                PyErr_SetArgsError((PyObject *) self, "__init__", args);
                return -1;
              }

              return 0;
            }

            static PyObject *t_TermFreqValueSource_getValues(t_TermFreqValueSource *self, PyObject *args)
            {
              ::java::util::Map a0((jobject) NULL);
              PyTypeObject **p0;
              ::org::apache::lucene::index::LeafReaderContext a1((jobject) NULL);
              ::org::apache::lucene::queries::function::FunctionValues result((jobject) NULL);

              if (!parseArgs(args, "Kk", ::java::util::Map::initializeClass, ::org::apache::lucene::index::LeafReaderContext::initializeClass, &a0, &p0, ::java::util::t_Map::parameters_, &a1))
              {
                OBJ_CALL(result = self->object.getValues(a0, a1));
                return ::org::apache::lucene::queries::function::t_FunctionValues::wrap_Object(result);
              }

              return callSuper(PY_TYPE(TermFreqValueSource), (PyObject *) self, "getValues", args, 2);
            }

            static PyObject *t_TermFreqValueSource_name(t_TermFreqValueSource *self, PyObject *args)
            {
              ::java::lang::String result((jobject) NULL);

              if (!parseArgs(args, ""))
              {
                OBJ_CALL(result = self->object.name());
                return j2p(result);
              }

              return callSuper(PY_TYPE(TermFreqValueSource), (PyObject *) self, "name", args, 2);
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/bg/BulgarianAnalyzer.h"
#include "org/apache/lucene/analysis/Analyzer$TokenStreamComponents.h"
#include "java/lang/String.h"
#include "org/apache/lucene/analysis/CharArraySet.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace bg {

          ::java::lang::Class *BulgarianAnalyzer::class$ = NULL;
          jmethodID *BulgarianAnalyzer::mids$ = NULL;
          bool BulgarianAnalyzer::live$ = false;
          ::java::lang::String *BulgarianAnalyzer::DEFAULT_STOPWORD_FILE = NULL;

          jclass BulgarianAnalyzer::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/bg/BulgarianAnalyzer");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_f2cc1bce94666404] = env->getMethodID(cls, "<init>", "()V");
              mids$[mid_init$_09c0eb6a436581d3] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/analysis/CharArraySet;)V");
              mids$[mid_init$_b66a15b6e54e4218] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/analysis/CharArraySet;Lorg/apache/lucene/analysis/CharArraySet;)V");
              mids$[mid_createComponents_c22fd244b0553c1e] = env->getMethodID(cls, "createComponents", "(Ljava/lang/String;)Lorg/apache/lucene/analysis/Analyzer$TokenStreamComponents;");
              mids$[mid_getDefaultStopSet_7aec8e69a9807ca1] = env->getStaticMethodID(cls, "getDefaultStopSet", "()Lorg/apache/lucene/analysis/CharArraySet;");
              mids$[mid_normalize_e597989422f66fcd] = env->getMethodID(cls, "normalize", "(Ljava/lang/String;Lorg/apache/lucene/analysis/TokenStream;)Lorg/apache/lucene/analysis/TokenStream;");

              class$ = new ::java::lang::Class(cls);
              cls = (jclass) class$->this$;

              DEFAULT_STOPWORD_FILE = new ::java::lang::String(env->getStaticObjectField(cls, "DEFAULT_STOPWORD_FILE", "Ljava/lang/String;"));
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          BulgarianAnalyzer::BulgarianAnalyzer() : ::org::apache::lucene::analysis::StopwordAnalyzerBase(env->newObject(initializeClass, &mids$, mid_init$_f2cc1bce94666404)) {}

          BulgarianAnalyzer::BulgarianAnalyzer(const ::org::apache::lucene::analysis::CharArraySet & a0) : ::org::apache::lucene::analysis::StopwordAnalyzerBase(env->newObject(initializeClass, &mids$, mid_init$_09c0eb6a436581d3, a0.this$)) {}

          BulgarianAnalyzer::BulgarianAnalyzer(const ::org::apache::lucene::analysis::CharArraySet & a0, const ::org::apache::lucene::analysis::CharArraySet & a1) : ::org::apache::lucene::analysis::StopwordAnalyzerBase(env->newObject(initializeClass, &mids$, mid_init$_b66a15b6e54e4218, a0.this$, a1.this$)) {}

          ::org::apache::lucene::analysis::Analyzer$TokenStreamComponents BulgarianAnalyzer::createComponents(const ::java::lang::String & a0) const
          {
            return ::org::apache::lucene::analysis::Analyzer$TokenStreamComponents(env->callObjectMethod(this$, mids$[mid_createComponents_c22fd244b0553c1e], a0.this$));
          }

          ::org::apache::lucene::analysis::CharArraySet BulgarianAnalyzer::getDefaultStopSet()
          {
            jclass cls = env->getClass(initializeClass);
            return ::org::apache::lucene::analysis::CharArraySet(env->callStaticObjectMethod(cls, mids$[mid_getDefaultStopSet_7aec8e69a9807ca1]));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace bg {
          static PyObject *t_BulgarianAnalyzer_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_BulgarianAnalyzer_instance_(PyTypeObject *type, PyObject *arg);
          static int t_BulgarianAnalyzer_init_(t_BulgarianAnalyzer *self, PyObject *args, PyObject *kwds);
          static PyObject *t_BulgarianAnalyzer_createComponents(t_BulgarianAnalyzer *self, PyObject *arg);
          static PyObject *t_BulgarianAnalyzer_getDefaultStopSet(PyTypeObject *type);
          static PyObject *t_BulgarianAnalyzer_get__defaultStopSet(t_BulgarianAnalyzer *self, void *data);
          static PyGetSetDef t_BulgarianAnalyzer__fields_[] = {
            DECLARE_GET_FIELD(t_BulgarianAnalyzer, defaultStopSet),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_BulgarianAnalyzer__methods_[] = {
            DECLARE_METHOD(t_BulgarianAnalyzer, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_BulgarianAnalyzer, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_BulgarianAnalyzer, createComponents, METH_O),
            DECLARE_METHOD(t_BulgarianAnalyzer, getDefaultStopSet, METH_NOARGS | METH_CLASS),
            { NULL, NULL, 0, NULL }
          };

          static PyType_Slot PY_TYPE_SLOTS(BulgarianAnalyzer)[] = {
            { Py_tp_methods, t_BulgarianAnalyzer__methods_ },
            { Py_tp_init, (void *) t_BulgarianAnalyzer_init_ },
            { Py_tp_getset, t_BulgarianAnalyzer__fields_ },
            { 0, NULL }
          };

          static PyType_Def *PY_TYPE_BASES(BulgarianAnalyzer)[] = {
            &PY_TYPE_DEF(::org::apache::lucene::analysis::StopwordAnalyzerBase),
            NULL
          };

          DEFINE_TYPE(BulgarianAnalyzer, t_BulgarianAnalyzer, BulgarianAnalyzer);

          void t_BulgarianAnalyzer::install(PyObject *module)
          {
            installType(&PY_TYPE(BulgarianAnalyzer), &PY_TYPE_DEF(BulgarianAnalyzer), module, "BulgarianAnalyzer", 0);
          }

          void t_BulgarianAnalyzer::initialize(PyObject *module)
          {
            PyObject_SetAttrString((PyObject *) PY_TYPE(BulgarianAnalyzer), "class_", make_descriptor(BulgarianAnalyzer::initializeClass, 1));
            PyObject_SetAttrString((PyObject *) PY_TYPE(BulgarianAnalyzer), "wrapfn_", make_descriptor(t_BulgarianAnalyzer::wrap_jobject));
            PyObject_SetAttrString((PyObject *) PY_TYPE(BulgarianAnalyzer), "boxfn_", make_descriptor(boxObject));
            env->getClass(BulgarianAnalyzer::initializeClass);
            PyObject_SetAttrString((PyObject *) PY_TYPE(BulgarianAnalyzer), "DEFAULT_STOPWORD_FILE", make_descriptor(j2p(*BulgarianAnalyzer::DEFAULT_STOPWORD_FILE)));
          }

          static PyObject *t_BulgarianAnalyzer_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, BulgarianAnalyzer::initializeClass, 1)))
              return NULL;
            return t_BulgarianAnalyzer::wrap_Object(BulgarianAnalyzer(((t_BulgarianAnalyzer *) arg)->object.this$));
          }
          static PyObject *t_BulgarianAnalyzer_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, BulgarianAnalyzer::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_BulgarianAnalyzer_init_(t_BulgarianAnalyzer *self, PyObject *args, PyObject *kwds)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 0:
              {
                BulgarianAnalyzer object((jobject) NULL);

                INT_CALL(object = BulgarianAnalyzer());
                self->object = object;
                break;
              }
             case 1:
              {
                ::org::apache::lucene::analysis::CharArraySet a0((jobject) NULL);
                PyTypeObject **p0;
                BulgarianAnalyzer object((jobject) NULL);

                if (!parseArgs(args, "K", ::org::apache::lucene::analysis::CharArraySet::initializeClass, &a0, &p0, ::org::apache::lucene::analysis::t_CharArraySet::parameters_))
                {
                  INT_CALL(object = BulgarianAnalyzer(a0));
                  self->object = object;
                  break;
                }
              }
              goto err;
             case 2:
              {
                ::org::apache::lucene::analysis::CharArraySet a0((jobject) NULL);
                PyTypeObject **p0;
                ::org::apache::lucene::analysis::CharArraySet a1((jobject) NULL);
                PyTypeObject **p1;
                BulgarianAnalyzer object((jobject) NULL);

                if (!parseArgs(args, "KK", ::org::apache::lucene::analysis::CharArraySet::initializeClass, ::org::apache::lucene::analysis::CharArraySet::initializeClass, &a0, &p0, ::org::apache::lucene::analysis::t_CharArraySet::parameters_, &a1, &p1, ::org::apache::lucene::analysis::t_CharArraySet::parameters_))
                {
                  INT_CALL(object = BulgarianAnalyzer(a0, a1));
                  self->object = object;
                  break;
                }
              }
             default:
             err:
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_BulgarianAnalyzer_createComponents(t_BulgarianAnalyzer *self, PyObject *arg)
          {
            ::java::lang::String a0((jobject) NULL);
            ::org::apache::lucene::analysis::Analyzer$TokenStreamComponents result((jobject) NULL);

            if (!parseArg(arg, "s", &a0))
            {
              OBJ_CALL(result = self->object.createComponents(a0));
              return ::org::apache::lucene::analysis::t_Analyzer$TokenStreamComponents::wrap_Object(result);
            }

            PyErr_SetArgsError((PyObject *) self, "createComponents", arg);
            return NULL;
          }

          static PyObject *t_BulgarianAnalyzer_getDefaultStopSet(PyTypeObject *type)
          {
            ::org::apache::lucene::analysis::CharArraySet result((jobject) NULL);
            OBJ_CALL(result = ::org::apache::lucene::analysis::bg::BulgarianAnalyzer::getDefaultStopSet());
            return ::org::apache::lucene::analysis::t_CharArraySet::wrap_Object(result);
          }

          static PyObject *t_BulgarianAnalyzer_get__defaultStopSet(t_BulgarianAnalyzer *self, void *data)
          {
            ::org::apache::lucene::analysis::CharArraySet value((jobject) NULL);
            OBJ_CALL(value = self->object.getDefaultStopSet());
            return ::org::apache::lucene::analysis::t_CharArraySet::wrap_Object(value);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/ja/JapaneseIterationMarkCharFilter.h"
#include "java/io/IOException.h"
#include "java/io/Reader.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace ja {

          ::java::lang::Class *JapaneseIterationMarkCharFilter::class$ = NULL;
          jmethodID *JapaneseIterationMarkCharFilter::mids$ = NULL;
          bool JapaneseIterationMarkCharFilter::live$ = false;
          jboolean JapaneseIterationMarkCharFilter::NORMALIZE_KANA_DEFAULT = (jboolean) 0;
          jboolean JapaneseIterationMarkCharFilter::NORMALIZE_KANJI_DEFAULT = (jboolean) 0;

          jclass JapaneseIterationMarkCharFilter::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/ja/JapaneseIterationMarkCharFilter");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_b2f3c57f5e6eb3f2] = env->getMethodID(cls, "<init>", "(Ljava/io/Reader;)V");
              mids$[mid_init$_b7eff173a7b6dded] = env->getMethodID(cls, "<init>", "(Ljava/io/Reader;ZZ)V");
              mids$[mid_read_9972fcc56b44e79d] = env->getMethodID(cls, "read", "()I");
              mids$[mid_read_644fc0bf0aa7fb26] = env->getMethodID(cls, "read", "([CII)I");
              mids$[mid_correct_1e143afe1894d213] = env->getMethodID(cls, "correct", "(I)I");

              class$ = new ::java::lang::Class(cls);
              cls = (jclass) class$->this$;

              NORMALIZE_KANA_DEFAULT = env->getStaticBooleanField(cls, "NORMALIZE_KANA_DEFAULT");
              NORMALIZE_KANJI_DEFAULT = env->getStaticBooleanField(cls, "NORMALIZE_KANJI_DEFAULT");
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          JapaneseIterationMarkCharFilter::JapaneseIterationMarkCharFilter(const ::java::io::Reader & a0) : ::org::apache::lucene::analysis::CharFilter(env->newObject(initializeClass, &mids$, mid_init$_b2f3c57f5e6eb3f2, a0.this$)) {}

          JapaneseIterationMarkCharFilter::JapaneseIterationMarkCharFilter(const ::java::io::Reader & a0, jboolean a1, jboolean a2) : ::org::apache::lucene::analysis::CharFilter(env->newObject(initializeClass, &mids$, mid_init$_b7eff173a7b6dded, a0.this$, a1, a2)) {}

          jint JapaneseIterationMarkCharFilter::read() const
          {
            return env->callIntMethod(this$, mids$[mid_read_9972fcc56b44e79d]);
          }

          jint JapaneseIterationMarkCharFilter::read(const JArray< jchar > & a0, jint a1, jint a2) const
          {
            return env->callIntMethod(this$, mids$[mid_read_644fc0bf0aa7fb26], a0.this$, a1, a2);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace ja {
          static PyObject *t_JapaneseIterationMarkCharFilter_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_JapaneseIterationMarkCharFilter_instance_(PyTypeObject *type, PyObject *arg);
          static int t_JapaneseIterationMarkCharFilter_init_(t_JapaneseIterationMarkCharFilter *self, PyObject *args, PyObject *kwds);
          static PyObject *t_JapaneseIterationMarkCharFilter_read(t_JapaneseIterationMarkCharFilter *self, PyObject *args);

          static PyMethodDef t_JapaneseIterationMarkCharFilter__methods_[] = {
            DECLARE_METHOD(t_JapaneseIterationMarkCharFilter, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_JapaneseIterationMarkCharFilter, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_JapaneseIterationMarkCharFilter, read, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          static PyType_Slot PY_TYPE_SLOTS(JapaneseIterationMarkCharFilter)[] = {
            { Py_tp_methods, t_JapaneseIterationMarkCharFilter__methods_ },
            { Py_tp_init, (void *) t_JapaneseIterationMarkCharFilter_init_ },
            { 0, NULL }
          };

          static PyType_Def *PY_TYPE_BASES(JapaneseIterationMarkCharFilter)[] = {
            &PY_TYPE_DEF(::org::apache::lucene::analysis::CharFilter),
            NULL
          };

          DEFINE_TYPE(JapaneseIterationMarkCharFilter, t_JapaneseIterationMarkCharFilter, JapaneseIterationMarkCharFilter);

          void t_JapaneseIterationMarkCharFilter::install(PyObject *module)
          {
            installType(&PY_TYPE(JapaneseIterationMarkCharFilter), &PY_TYPE_DEF(JapaneseIterationMarkCharFilter), module, "JapaneseIterationMarkCharFilter", 0);
          }

          void t_JapaneseIterationMarkCharFilter::initialize(PyObject *module)
          {
            PyObject_SetAttrString((PyObject *) PY_TYPE(JapaneseIterationMarkCharFilter), "class_", make_descriptor(JapaneseIterationMarkCharFilter::initializeClass, 1));
            PyObject_SetAttrString((PyObject *) PY_TYPE(JapaneseIterationMarkCharFilter), "wrapfn_", make_descriptor(t_JapaneseIterationMarkCharFilter::wrap_jobject));
            PyObject_SetAttrString((PyObject *) PY_TYPE(JapaneseIterationMarkCharFilter), "boxfn_", make_descriptor(boxObject));
            env->getClass(JapaneseIterationMarkCharFilter::initializeClass);
            PyObject_SetAttrString((PyObject *) PY_TYPE(JapaneseIterationMarkCharFilter), "NORMALIZE_KANA_DEFAULT", make_descriptor(JapaneseIterationMarkCharFilter::NORMALIZE_KANA_DEFAULT));
            PyObject_SetAttrString((PyObject *) PY_TYPE(JapaneseIterationMarkCharFilter), "NORMALIZE_KANJI_DEFAULT", make_descriptor(JapaneseIterationMarkCharFilter::NORMALIZE_KANJI_DEFAULT));
          }

          static PyObject *t_JapaneseIterationMarkCharFilter_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, JapaneseIterationMarkCharFilter::initializeClass, 1)))
              return NULL;
            return t_JapaneseIterationMarkCharFilter::wrap_Object(JapaneseIterationMarkCharFilter(((t_JapaneseIterationMarkCharFilter *) arg)->object.this$));
          }
          static PyObject *t_JapaneseIterationMarkCharFilter_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, JapaneseIterationMarkCharFilter::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_JapaneseIterationMarkCharFilter_init_(t_JapaneseIterationMarkCharFilter *self, PyObject *args, PyObject *kwds)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 1:
              {
                ::java::io::Reader a0((jobject) NULL);
                JapaneseIterationMarkCharFilter object((jobject) NULL);

                if (!parseArgs(args, "k", ::java::io::Reader::initializeClass, &a0))
                {
                  INT_CALL(object = JapaneseIterationMarkCharFilter(a0));
                  self->object = object;
                  break;
                }
              }
              goto err;
             case 3:
              {
                ::java::io::Reader a0((jobject) NULL);
                jboolean a1;
                jboolean a2;
                JapaneseIterationMarkCharFilter object((jobject) NULL);

                if (!parseArgs(args, "kZZ", ::java::io::Reader::initializeClass, &a0, &a1, &a2))
                {
                  INT_CALL(object = JapaneseIterationMarkCharFilter(a0, a1, a2));
                  self->object = object;
                  break;
                }
              }
             default:
             err:
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_JapaneseIterationMarkCharFilter_read(t_JapaneseIterationMarkCharFilter *self, PyObject *args)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 0:
              {
                jint result;
                OBJ_CALL(result = self->object.read());
                return PyLong_FromLong((long) result);
              }
              break;
             case 3:
              {
                JArray< jchar > a0((jobject) NULL);
                jint a1;
                jint a2;
                jint result;

                if (!parseArgs(args, "[CII", &a0, &a1, &a2))
                {
                  OBJ_CALL(result = self->object.read(a0, a1, a2));
                  return PyLong_FromLong((long) result);
                }
              }
            }

            return callSuper(PY_TYPE(JapaneseIterationMarkCharFilter), (PyObject *) self, "read", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/bn/BengaliNormalizationFilter.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/analysis/TokenStream.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace bn {

          ::java::lang::Class *BengaliNormalizationFilter::class$ = NULL;
          jmethodID *BengaliNormalizationFilter::mids$ = NULL;
          bool BengaliNormalizationFilter::live$ = false;

          jclass BengaliNormalizationFilter::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/bn/BengaliNormalizationFilter");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_c26756868a754f4e] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/analysis/TokenStream;)V");
              mids$[mid_incrementToken_8454bd5aa23fd11e] = env->getMethodID(cls, "incrementToken", "()Z");

              class$ = new ::java::lang::Class(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          BengaliNormalizationFilter::BengaliNormalizationFilter(const ::org::apache::lucene::analysis::TokenStream & a0) : ::org::apache::lucene::analysis::TokenFilter(env->newObject(initializeClass, &mids$, mid_init$_c26756868a754f4e, a0.this$)) {}

          jboolean BengaliNormalizationFilter::incrementToken() const
          {
            return env->callBooleanMethod(this$, mids$[mid_incrementToken_8454bd5aa23fd11e]);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace bn {
          static PyObject *t_BengaliNormalizationFilter_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_BengaliNormalizationFilter_instance_(PyTypeObject *type, PyObject *arg);
          static int t_BengaliNormalizationFilter_init_(t_BengaliNormalizationFilter *self, PyObject *args, PyObject *kwds);
          static PyObject *t_BengaliNormalizationFilter_incrementToken(t_BengaliNormalizationFilter *self, PyObject *args);

          static PyMethodDef t_BengaliNormalizationFilter__methods_[] = {
            DECLARE_METHOD(t_BengaliNormalizationFilter, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_BengaliNormalizationFilter, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_BengaliNormalizationFilter, incrementToken, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          static PyType_Slot PY_TYPE_SLOTS(BengaliNormalizationFilter)[] = {
            { Py_tp_methods, t_BengaliNormalizationFilter__methods_ },
            { Py_tp_init, (void *) t_BengaliNormalizationFilter_init_ },
            { 0, NULL }
          };

          static PyType_Def *PY_TYPE_BASES(BengaliNormalizationFilter)[] = {
            &PY_TYPE_DEF(::org::apache::lucene::analysis::TokenFilter),
            NULL
          };

          DEFINE_TYPE(BengaliNormalizationFilter, t_BengaliNormalizationFilter, BengaliNormalizationFilter);

          void t_BengaliNormalizationFilter::install(PyObject *module)
          {
            installType(&PY_TYPE(BengaliNormalizationFilter), &PY_TYPE_DEF(BengaliNormalizationFilter), module, "BengaliNormalizationFilter", 0);
          }

          void t_BengaliNormalizationFilter::initialize(PyObject *module)
          {
            PyObject_SetAttrString((PyObject *) PY_TYPE(BengaliNormalizationFilter), "class_", make_descriptor(BengaliNormalizationFilter::initializeClass, 1));
            PyObject_SetAttrString((PyObject *) PY_TYPE(BengaliNormalizationFilter), "wrapfn_", make_descriptor(t_BengaliNormalizationFilter::wrap_jobject));
            PyObject_SetAttrString((PyObject *) PY_TYPE(BengaliNormalizationFilter), "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_BengaliNormalizationFilter_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, BengaliNormalizationFilter::initializeClass, 1)))
              return NULL;
            return t_BengaliNormalizationFilter::wrap_Object(BengaliNormalizationFilter(((t_BengaliNormalizationFilter *) arg)->object.this$));
          }
          static PyObject *t_BengaliNormalizationFilter_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, BengaliNormalizationFilter::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_BengaliNormalizationFilter_init_(t_BengaliNormalizationFilter *self, PyObject *args, PyObject *kwds)
          {
            ::org::apache::lucene::analysis::TokenStream a0((jobject) NULL);
            BengaliNormalizationFilter object((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::analysis::TokenStream::initializeClass, &a0))
            {
              INT_CALL(object = BengaliNormalizationFilter(a0));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_BengaliNormalizationFilter_incrementToken(t_BengaliNormalizationFilter *self, PyObject *args)
          {
            jboolean result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.incrementToken());
              Py_RETURN_BOOL(result);
            }

            return callSuper(PY_TYPE(BengaliNormalizationFilter), (PyObject *) self, "incrementToken", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/ko/KoreanReadingFormFilter.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/analysis/TokenStream.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace ko {

          ::java::lang::Class *KoreanReadingFormFilter::class$ = NULL;
          jmethodID *KoreanReadingFormFilter::mids$ = NULL;
          bool KoreanReadingFormFilter::live$ = false;

          jclass KoreanReadingFormFilter::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/ko/KoreanReadingFormFilter");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_c26756868a754f4e] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/analysis/TokenStream;)V");
              mids$[mid_incrementToken_8454bd5aa23fd11e] = env->getMethodID(cls, "incrementToken", "()Z");

              class$ = new ::java::lang::Class(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          KoreanReadingFormFilter::KoreanReadingFormFilter(const ::org::apache::lucene::analysis::TokenStream & a0) : ::org::apache::lucene::analysis::TokenFilter(env->newObject(initializeClass, &mids$, mid_init$_c26756868a754f4e, a0.this$)) {}

          jboolean KoreanReadingFormFilter::incrementToken() const
          {
            return env->callBooleanMethod(this$, mids$[mid_incrementToken_8454bd5aa23fd11e]);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace ko {
          static PyObject *t_KoreanReadingFormFilter_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_KoreanReadingFormFilter_instance_(PyTypeObject *type, PyObject *arg);
          static int t_KoreanReadingFormFilter_init_(t_KoreanReadingFormFilter *self, PyObject *args, PyObject *kwds);
          static PyObject *t_KoreanReadingFormFilter_incrementToken(t_KoreanReadingFormFilter *self, PyObject *args);

          static PyMethodDef t_KoreanReadingFormFilter__methods_[] = {
            DECLARE_METHOD(t_KoreanReadingFormFilter, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_KoreanReadingFormFilter, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_KoreanReadingFormFilter, incrementToken, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          static PyType_Slot PY_TYPE_SLOTS(KoreanReadingFormFilter)[] = {
            { Py_tp_methods, t_KoreanReadingFormFilter__methods_ },
            { Py_tp_init, (void *) t_KoreanReadingFormFilter_init_ },
            { 0, NULL }
          };

          static PyType_Def *PY_TYPE_BASES(KoreanReadingFormFilter)[] = {
            &PY_TYPE_DEF(::org::apache::lucene::analysis::TokenFilter),
            NULL
          };

          DEFINE_TYPE(KoreanReadingFormFilter, t_KoreanReadingFormFilter, KoreanReadingFormFilter);

          void t_KoreanReadingFormFilter::install(PyObject *module)
          {
            installType(&PY_TYPE(KoreanReadingFormFilter), &PY_TYPE_DEF(KoreanReadingFormFilter), module, "KoreanReadingFormFilter", 0);
          }

          void t_KoreanReadingFormFilter::initialize(PyObject *module)
          {
            PyObject_SetAttrString((PyObject *) PY_TYPE(KoreanReadingFormFilter), "class_", make_descriptor(KoreanReadingFormFilter::initializeClass, 1));
            PyObject_SetAttrString((PyObject *) PY_TYPE(KoreanReadingFormFilter), "wrapfn_", make_descriptor(t_KoreanReadingFormFilter::wrap_jobject));
            PyObject_SetAttrString((PyObject *) PY_TYPE(KoreanReadingFormFilter), "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_KoreanReadingFormFilter_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, KoreanReadingFormFilter::initializeClass, 1)))
              return NULL;
            return t_KoreanReadingFormFilter::wrap_Object(KoreanReadingFormFilter(((t_KoreanReadingFormFilter *) arg)->object.this$));
          }
          static PyObject *t_KoreanReadingFormFilter_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, KoreanReadingFormFilter::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_KoreanReadingFormFilter_init_(t_KoreanReadingFormFilter *self, PyObject *args, PyObject *kwds)
          {
            ::org::apache::lucene::analysis::TokenStream a0((jobject) NULL);
            KoreanReadingFormFilter object((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::analysis::TokenStream::initializeClass, &a0))
            {
              INT_CALL(object = KoreanReadingFormFilter(a0));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_KoreanReadingFormFilter_incrementToken(t_KoreanReadingFormFilter *self, PyObject *args)
          {
            jboolean result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.incrementToken());
              Py_RETURN_BOOL(result);
            }

            return callSuper(PY_TYPE(KoreanReadingFormFilter), (PyObject *) self, "incrementToken", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/IndexOrDocValuesQuery.h"
#include "org/apache/lucene/index/IndexReader.h"
#include "org/apache/lucene/search/IndexSearcher.h"
#include "java/lang/Class.h"
#include "java/lang/Object.h"
#include "java/lang/String.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/search/QueryVisitor.h"
#include "org/apache/lucene/search/ScoreMode.h"
#include "org/apache/lucene/search/Weight.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {

        ::java::lang::Class *IndexOrDocValuesQuery::class$ = NULL;
        jmethodID *IndexOrDocValuesQuery::mids$ = NULL;
        bool IndexOrDocValuesQuery::live$ = false;

        jclass IndexOrDocValuesQuery::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/search/IndexOrDocValuesQuery");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_e16fb791c00cdb62] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/search/Query;Lorg/apache/lucene/search/Query;)V");
            mids$[mid_createWeight_f0ef0b5ea369ac06] = env->getMethodID(cls, "createWeight", "(Lorg/apache/lucene/search/IndexSearcher;Lorg/apache/lucene/search/ScoreMode;F)Lorg/apache/lucene/search/Weight;");
            mids$[mid_equals_8b72f2dcdde6fd1d] = env->getMethodID(cls, "equals", "(Ljava/lang/Object;)Z");
            mids$[mid_getIndexQuery_cbf839a480265450] = env->getMethodID(cls, "getIndexQuery", "()Lorg/apache/lucene/search/Query;");
            mids$[mid_getRandomAccessQuery_cbf839a480265450] = env->getMethodID(cls, "getRandomAccessQuery", "()Lorg/apache/lucene/search/Query;");
            mids$[mid_hashCode_9972fcc56b44e79d] = env->getMethodID(cls, "hashCode", "()I");
            mids$[mid_rewrite_bb52f19a8254555c] = env->getMethodID(cls, "rewrite", "(Lorg/apache/lucene/index/IndexReader;)Lorg/apache/lucene/search/Query;");
            mids$[mid_toString_9bfa75c9f141b67f] = env->getMethodID(cls, "toString", "(Ljava/lang/String;)Ljava/lang/String;");
            mids$[mid_visit_f9e6207006c5b6c1] = env->getMethodID(cls, "visit", "(Lorg/apache/lucene/search/QueryVisitor;)V");

            class$ = new ::java::lang::Class(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        IndexOrDocValuesQuery::IndexOrDocValuesQuery(const ::org::apache::lucene::search::Query & a0, const ::org::apache::lucene::search::Query & a1) : ::org::apache::lucene::search::Query(env->newObject(initializeClass, &mids$, mid_init$_e16fb791c00cdb62, a0.this$, a1.this$)) {}

        ::org::apache::lucene::search::Weight IndexOrDocValuesQuery::createWeight(const ::org::apache::lucene::search::IndexSearcher & a0, const ::org::apache::lucene::search::ScoreMode & a1, jfloat a2) const
        {
          return ::org::apache::lucene::search::Weight(env->callObjectMethod(this$, mids$[mid_createWeight_f0ef0b5ea369ac06], a0.this$, a1.this$, a2));
        }

        jboolean IndexOrDocValuesQuery::equals(const ::java::lang::Object & a0) const
        {
          return env->callBooleanMethod(this$, mids$[mid_equals_8b72f2dcdde6fd1d], a0.this$);
        }

        ::org::apache::lucene::search::Query IndexOrDocValuesQuery::getIndexQuery() const
        {
          return ::org::apache::lucene::search::Query(env->callObjectMethod(this$, mids$[mid_getIndexQuery_cbf839a480265450]));
        }

        ::org::apache::lucene::search::Query IndexOrDocValuesQuery::getRandomAccessQuery() const
        {
          return ::org::apache::lucene::search::Query(env->callObjectMethod(this$, mids$[mid_getRandomAccessQuery_cbf839a480265450]));
        }

        jint IndexOrDocValuesQuery::hashCode() const
        {
          return env->callIntMethod(this$, mids$[mid_hashCode_9972fcc56b44e79d]);
        }

        ::org::apache::lucene::search::Query IndexOrDocValuesQuery::rewrite(const ::org::apache::lucene::index::IndexReader & a0) const
        {
          return ::org::apache::lucene::search::Query(env->callObjectMethod(this$, mids$[mid_rewrite_bb52f19a8254555c], a0.this$));
        }

        ::java::lang::String IndexOrDocValuesQuery::toString(const ::java::lang::String & a0) const
        {
          return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_9bfa75c9f141b67f], a0.this$));
        }

        void IndexOrDocValuesQuery::visit(const ::org::apache::lucene::search::QueryVisitor & a0) const
        {
          env->callVoidMethod(this$, mids$[mid_visit_f9e6207006c5b6c1], a0.this$);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        static PyObject *t_IndexOrDocValuesQuery_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_IndexOrDocValuesQuery_instance_(PyTypeObject *type, PyObject *arg);
        static int t_IndexOrDocValuesQuery_init_(t_IndexOrDocValuesQuery *self, PyObject *args, PyObject *kwds);
        static PyObject *t_IndexOrDocValuesQuery_createWeight(t_IndexOrDocValuesQuery *self, PyObject *args);
        static PyObject *t_IndexOrDocValuesQuery_equals(t_IndexOrDocValuesQuery *self, PyObject *args);
        static PyObject *t_IndexOrDocValuesQuery_getIndexQuery(t_IndexOrDocValuesQuery *self);
        static PyObject *t_IndexOrDocValuesQuery_getRandomAccessQuery(t_IndexOrDocValuesQuery *self);
        static PyObject *t_IndexOrDocValuesQuery_hashCode(t_IndexOrDocValuesQuery *self, PyObject *args);
        static PyObject *t_IndexOrDocValuesQuery_rewrite(t_IndexOrDocValuesQuery *self, PyObject *args);
        static PyObject *t_IndexOrDocValuesQuery_toString(t_IndexOrDocValuesQuery *self, PyObject *args);
        static PyObject *t_IndexOrDocValuesQuery_visit(t_IndexOrDocValuesQuery *self, PyObject *args);
        static PyObject *t_IndexOrDocValuesQuery_get__indexQuery(t_IndexOrDocValuesQuery *self, void *data);
        static PyObject *t_IndexOrDocValuesQuery_get__randomAccessQuery(t_IndexOrDocValuesQuery *self, void *data);
        static PyGetSetDef t_IndexOrDocValuesQuery__fields_[] = {
          DECLARE_GET_FIELD(t_IndexOrDocValuesQuery, indexQuery),
          DECLARE_GET_FIELD(t_IndexOrDocValuesQuery, randomAccessQuery),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_IndexOrDocValuesQuery__methods_[] = {
          DECLARE_METHOD(t_IndexOrDocValuesQuery, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_IndexOrDocValuesQuery, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_IndexOrDocValuesQuery, createWeight, METH_VARARGS),
          DECLARE_METHOD(t_IndexOrDocValuesQuery, equals, METH_VARARGS),
          DECLARE_METHOD(t_IndexOrDocValuesQuery, getIndexQuery, METH_NOARGS),
          DECLARE_METHOD(t_IndexOrDocValuesQuery, getRandomAccessQuery, METH_NOARGS),
          DECLARE_METHOD(t_IndexOrDocValuesQuery, hashCode, METH_VARARGS),
          DECLARE_METHOD(t_IndexOrDocValuesQuery, rewrite, METH_VARARGS),
          DECLARE_METHOD(t_IndexOrDocValuesQuery, toString, METH_VARARGS),
          DECLARE_METHOD(t_IndexOrDocValuesQuery, visit, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        static PyType_Slot PY_TYPE_SLOTS(IndexOrDocValuesQuery)[] = {
          { Py_tp_methods, t_IndexOrDocValuesQuery__methods_ },
          { Py_tp_init, (void *) t_IndexOrDocValuesQuery_init_ },
          { Py_tp_getset, t_IndexOrDocValuesQuery__fields_ },
          { 0, NULL }
        };

        static PyType_Def *PY_TYPE_BASES(IndexOrDocValuesQuery)[] = {
          &PY_TYPE_DEF(::org::apache::lucene::search::Query),
          NULL
        };

        DEFINE_TYPE(IndexOrDocValuesQuery, t_IndexOrDocValuesQuery, IndexOrDocValuesQuery);

        void t_IndexOrDocValuesQuery::install(PyObject *module)
        {
          installType(&PY_TYPE(IndexOrDocValuesQuery), &PY_TYPE_DEF(IndexOrDocValuesQuery), module, "IndexOrDocValuesQuery", 0);
        }

        void t_IndexOrDocValuesQuery::initialize(PyObject *module)
        {
          PyObject_SetAttrString((PyObject *) PY_TYPE(IndexOrDocValuesQuery), "class_", make_descriptor(IndexOrDocValuesQuery::initializeClass, 1));
          PyObject_SetAttrString((PyObject *) PY_TYPE(IndexOrDocValuesQuery), "wrapfn_", make_descriptor(t_IndexOrDocValuesQuery::wrap_jobject));
          PyObject_SetAttrString((PyObject *) PY_TYPE(IndexOrDocValuesQuery), "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_IndexOrDocValuesQuery_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, IndexOrDocValuesQuery::initializeClass, 1)))
            return NULL;
          return t_IndexOrDocValuesQuery::wrap_Object(IndexOrDocValuesQuery(((t_IndexOrDocValuesQuery *) arg)->object.this$));
        }
        static PyObject *t_IndexOrDocValuesQuery_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, IndexOrDocValuesQuery::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_IndexOrDocValuesQuery_init_(t_IndexOrDocValuesQuery *self, PyObject *args, PyObject *kwds)
        {
          ::org::apache::lucene::search::Query a0((jobject) NULL);
          ::org::apache::lucene::search::Query a1((jobject) NULL);
          IndexOrDocValuesQuery object((jobject) NULL);

          if (!parseArgs(args, "kk", ::org::apache::lucene::search::Query::initializeClass, ::org::apache::lucene::search::Query::initializeClass, &a0, &a1))
          {
            INT_CALL(object = IndexOrDocValuesQuery(a0, a1));
            self->object = object;
          }
          else
          {
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }

        static PyObject *t_IndexOrDocValuesQuery_createWeight(t_IndexOrDocValuesQuery *self, PyObject *args)
        {
          ::org::apache::lucene::search::IndexSearcher a0((jobject) NULL);
          ::org::apache::lucene::search::ScoreMode a1((jobject) NULL);
          PyTypeObject **p1;
          jfloat a2;
          ::org::apache::lucene::search::Weight result((jobject) NULL);

          if (!parseArgs(args, "kKF", ::org::apache::lucene::search::IndexSearcher::initializeClass, ::org::apache::lucene::search::ScoreMode::initializeClass, &a0, &a1, &p1, ::org::apache::lucene::search::t_ScoreMode::parameters_, &a2))
          {
            OBJ_CALL(result = self->object.createWeight(a0, a1, a2));
            return ::org::apache::lucene::search::t_Weight::wrap_Object(result);
          }

          return callSuper(PY_TYPE(IndexOrDocValuesQuery), (PyObject *) self, "createWeight", args, 2);
        }

        static PyObject *t_IndexOrDocValuesQuery_equals(t_IndexOrDocValuesQuery *self, PyObject *args)
        {
          ::java::lang::Object a0((jobject) NULL);
          jboolean result;

          if (!parseArgs(args, "o", &a0))
          {
            OBJ_CALL(result = self->object.equals(a0));
            Py_RETURN_BOOL(result);
          }

          return callSuper(PY_TYPE(IndexOrDocValuesQuery), (PyObject *) self, "equals", args, 2);
        }

        static PyObject *t_IndexOrDocValuesQuery_getIndexQuery(t_IndexOrDocValuesQuery *self)
        {
          ::org::apache::lucene::search::Query result((jobject) NULL);
          OBJ_CALL(result = self->object.getIndexQuery());
          return ::org::apache::lucene::search::t_Query::wrap_Object(result);
        }

        static PyObject *t_IndexOrDocValuesQuery_getRandomAccessQuery(t_IndexOrDocValuesQuery *self)
        {
          ::org::apache::lucene::search::Query result((jobject) NULL);
          OBJ_CALL(result = self->object.getRandomAccessQuery());
          return ::org::apache::lucene::search::t_Query::wrap_Object(result);
        }

        static PyObject *t_IndexOrDocValuesQuery_hashCode(t_IndexOrDocValuesQuery *self, PyObject *args)
        {
          jint result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.hashCode());
            return PyLong_FromLong((long) result);
          }

          return callSuper(PY_TYPE(IndexOrDocValuesQuery), (PyObject *) self, "hashCode", args, 2);
        }

        static PyObject *t_IndexOrDocValuesQuery_rewrite(t_IndexOrDocValuesQuery *self, PyObject *args)
        {
          ::org::apache::lucene::index::IndexReader a0((jobject) NULL);
          ::org::apache::lucene::search::Query result((jobject) NULL);

          if (!parseArgs(args, "k", ::org::apache::lucene::index::IndexReader::initializeClass, &a0))
          {
            OBJ_CALL(result = self->object.rewrite(a0));
            return ::org::apache::lucene::search::t_Query::wrap_Object(result);
          }

          return callSuper(PY_TYPE(IndexOrDocValuesQuery), (PyObject *) self, "rewrite", args, 2);
        }

        static PyObject *t_IndexOrDocValuesQuery_toString(t_IndexOrDocValuesQuery *self, PyObject *args)
        {
          ::java::lang::String a0((jobject) NULL);
          ::java::lang::String result((jobject) NULL);

          if (!parseArgs(args, "s", &a0))
          {
            OBJ_CALL(result = self->object.toString(a0));
            return j2p(result);
          }

          return callSuper(PY_TYPE(IndexOrDocValuesQuery), (PyObject *) self, "toString", args, 2);
        }

        static PyObject *t_IndexOrDocValuesQuery_visit(t_IndexOrDocValuesQuery *self, PyObject *args)
        {
          ::org::apache::lucene::search::QueryVisitor a0((jobject) NULL);

          if (!parseArgs(args, "k", ::org::apache::lucene::search::QueryVisitor::initializeClass, &a0))
          {
            OBJ_CALL(self->object.visit(a0));
            Py_RETURN_NONE;
          }

          return callSuper(PY_TYPE(IndexOrDocValuesQuery), (PyObject *) self, "visit", args, 2);
        }

        static PyObject *t_IndexOrDocValuesQuery_get__indexQuery(t_IndexOrDocValuesQuery *self, void *data)
        {
          ::org::apache::lucene::search::Query value((jobject) NULL);
          OBJ_CALL(value = self->object.getIndexQuery());
          return ::org::apache::lucene::search::t_Query::wrap_Object(value);
        }

        static PyObject *t_IndexOrDocValuesQuery_get__randomAccessQuery(t_IndexOrDocValuesQuery *self, void *data)
        {
          ::org::apache::lucene::search::Query value((jobject) NULL);
          OBJ_CALL(value = self->object.getRandomAccessQuery());
          return ::org::apache::lucene::search::t_Query::wrap_Object(value);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/de/GermanNormalizationFilterFactory.h"
#include "java/util/Map.h"
#include "java/lang/String.h"
#include "org/apache/lucene/analysis/TokenStream.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace de {

          ::java::lang::Class *GermanNormalizationFilterFactory::class$ = NULL;
          jmethodID *GermanNormalizationFilterFactory::mids$ = NULL;
          bool GermanNormalizationFilterFactory::live$ = false;
          ::java::lang::String *GermanNormalizationFilterFactory::NAME = NULL;

          jclass GermanNormalizationFilterFactory::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/de/GermanNormalizationFilterFactory");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_408bd889ee3beae5] = env->getMethodID(cls, "<init>", "(Ljava/util/Map;)V");
              mids$[mid_create_6de1e28d9d10cd9e] = env->getMethodID(cls, "create", "(Lorg/apache/lucene/analysis/TokenStream;)Lorg/apache/lucene/analysis/TokenStream;");
              mids$[mid_normalize_6de1e28d9d10cd9e] = env->getMethodID(cls, "normalize", "(Lorg/apache/lucene/analysis/TokenStream;)Lorg/apache/lucene/analysis/TokenStream;");

              class$ = new ::java::lang::Class(cls);
              cls = (jclass) class$->this$;

              NAME = new ::java::lang::String(env->getStaticObjectField(cls, "NAME", "Ljava/lang/String;"));
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          GermanNormalizationFilterFactory::GermanNormalizationFilterFactory(const ::java::util::Map & a0) : ::org::apache::lucene::analysis::util::TokenFilterFactory(env->newObject(initializeClass, &mids$, mid_init$_408bd889ee3beae5, a0.this$)) {}

          ::org::apache::lucene::analysis::TokenStream GermanNormalizationFilterFactory::create(const ::org::apache::lucene::analysis::TokenStream & a0) const
          {
            return ::org::apache::lucene::analysis::TokenStream(env->callObjectMethod(this$, mids$[mid_create_6de1e28d9d10cd9e], a0.this$));
          }

          ::org::apache::lucene::analysis::TokenStream GermanNormalizationFilterFactory::normalize(const ::org::apache::lucene::analysis::TokenStream & a0) const
          {
            return ::org::apache::lucene::analysis::TokenStream(env->callObjectMethod(this$, mids$[mid_normalize_6de1e28d9d10cd9e], a0.this$));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace de {
          static PyObject *t_GermanNormalizationFilterFactory_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_GermanNormalizationFilterFactory_instance_(PyTypeObject *type, PyObject *arg);
          static int t_GermanNormalizationFilterFactory_init_(t_GermanNormalizationFilterFactory *self, PyObject *args, PyObject *kwds);
          static PyObject *t_GermanNormalizationFilterFactory_create(t_GermanNormalizationFilterFactory *self, PyObject *args);
          static PyObject *t_GermanNormalizationFilterFactory_normalize(t_GermanNormalizationFilterFactory *self, PyObject *args);

          static PyMethodDef t_GermanNormalizationFilterFactory__methods_[] = {
            DECLARE_METHOD(t_GermanNormalizationFilterFactory, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_GermanNormalizationFilterFactory, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_GermanNormalizationFilterFactory, create, METH_VARARGS),
            DECLARE_METHOD(t_GermanNormalizationFilterFactory, normalize, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          static PyType_Slot PY_TYPE_SLOTS(GermanNormalizationFilterFactory)[] = {
            { Py_tp_methods, t_GermanNormalizationFilterFactory__methods_ },
            { Py_tp_init, (void *) t_GermanNormalizationFilterFactory_init_ },
            { 0, NULL }
          };

          static PyType_Def *PY_TYPE_BASES(GermanNormalizationFilterFactory)[] = {
            &PY_TYPE_DEF(::org::apache::lucene::analysis::util::TokenFilterFactory),
            NULL
          };

          DEFINE_TYPE(GermanNormalizationFilterFactory, t_GermanNormalizationFilterFactory, GermanNormalizationFilterFactory);

          void t_GermanNormalizationFilterFactory::install(PyObject *module)
          {
            installType(&PY_TYPE(GermanNormalizationFilterFactory), &PY_TYPE_DEF(GermanNormalizationFilterFactory), module, "GermanNormalizationFilterFactory", 0);
          }

          void t_GermanNormalizationFilterFactory::initialize(PyObject *module)
          {
            PyObject_SetAttrString((PyObject *) PY_TYPE(GermanNormalizationFilterFactory), "class_", make_descriptor(GermanNormalizationFilterFactory::initializeClass, 1));
            PyObject_SetAttrString((PyObject *) PY_TYPE(GermanNormalizationFilterFactory), "wrapfn_", make_descriptor(t_GermanNormalizationFilterFactory::wrap_jobject));
            PyObject_SetAttrString((PyObject *) PY_TYPE(GermanNormalizationFilterFactory), "boxfn_", make_descriptor(boxObject));
            env->getClass(GermanNormalizationFilterFactory::initializeClass);
            PyObject_SetAttrString((PyObject *) PY_TYPE(GermanNormalizationFilterFactory), "NAME", make_descriptor(j2p(*GermanNormalizationFilterFactory::NAME)));
          }

          static PyObject *t_GermanNormalizationFilterFactory_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, GermanNormalizationFilterFactory::initializeClass, 1)))
              return NULL;
            return t_GermanNormalizationFilterFactory::wrap_Object(GermanNormalizationFilterFactory(((t_GermanNormalizationFilterFactory *) arg)->object.this$));
          }
          static PyObject *t_GermanNormalizationFilterFactory_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, GermanNormalizationFilterFactory::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_GermanNormalizationFilterFactory_init_(t_GermanNormalizationFilterFactory *self, PyObject *args, PyObject *kwds)
          {
            ::java::util::Map a0((jobject) NULL);
            PyTypeObject **p0;
            GermanNormalizationFilterFactory object((jobject) NULL);

            if (!parseArgs(args, "K", ::java::util::Map::initializeClass, &a0, &p0, ::java::util::t_Map::parameters_))
            {
              INT_CALL(object = GermanNormalizationFilterFactory(a0));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_GermanNormalizationFilterFactory_create(t_GermanNormalizationFilterFactory *self, PyObject *args)
          {
            ::org::apache::lucene::analysis::TokenStream a0((jobject) NULL);
            ::org::apache::lucene::analysis::TokenStream result((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::analysis::TokenStream::initializeClass, &a0))
            {
              OBJ_CALL(result = self->object.create(a0));
              return ::org::apache::lucene::analysis::t_TokenStream::wrap_Object(result);
            }

            return callSuper(PY_TYPE(GermanNormalizationFilterFactory), (PyObject *) self, "create", args, 2);
          }

          static PyObject *t_GermanNormalizationFilterFactory_normalize(t_GermanNormalizationFilterFactory *self, PyObject *args)
          {
            ::org::apache::lucene::analysis::TokenStream a0((jobject) NULL);
            ::org::apache::lucene::analysis::TokenStream result((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::analysis::TokenStream::initializeClass, &a0))
            {
              OBJ_CALL(result = self->object.normalize(a0));
              return ::org::apache::lucene::analysis::t_TokenStream::wrap_Object(result);
            }

            return callSuper(PY_TYPE(GermanNormalizationFilterFactory), (PyObject *) self, "normalize", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/util/CharsRef.h"
#include "java/util/Comparator.h"
#include "java/lang/Cloneable.h"
#include "java/lang/Comparable.h"
#include "org/apache/lucene/util/CharsRef.h"
#include "java/lang/Class.h"
#include "java/lang/String.h"
#include "java/lang/CharSequence.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {

        ::java::lang::Class *CharsRef::class$ = NULL;
        jmethodID *CharsRef::mids$ = NULL;
        jfieldID *CharsRef::fids$ = NULL;
        bool CharsRef::live$ = false;
        JArray< jchar > *CharsRef::EMPTY_CHARS = NULL;

        jclass CharsRef::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/util/CharsRef");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_f2cc1bce94666404] = env->getMethodID(cls, "<init>", "()V");
            mids$[mid_init$_9fd2eb66a64e6f0f] = env->getMethodID(cls, "<init>", "(Ljava/lang/String;)V");
            mids$[mid_init$_040c4cd0390c5aff] = env->getMethodID(cls, "<init>", "(I)V");
            mids$[mid_init$_d5128be76a214037] = env->getMethodID(cls, "<init>", "([CII)V");
            mids$[mid_charAt_ebc61ec1e57770d1] = env->getMethodID(cls, "charAt", "(I)C");
            mids$[mid_charsEquals_32b38c27586805a6] = env->getMethodID(cls, "charsEquals", "(Lorg/apache/lucene/util/CharsRef;)Z");
            mids$[mid_clone_2361d75e15cf20de] = env->getMethodID(cls, "clone", "()Lorg/apache/lucene/util/CharsRef;");
            mids$[mid_compareTo_3d179161e74bf316] = env->getMethodID(cls, "compareTo", "(Lorg/apache/lucene/util/CharsRef;)I");
            mids$[mid_deepCopyOf_8bc3c1aa34587137] = env->getStaticMethodID(cls, "deepCopyOf", "(Lorg/apache/lucene/util/CharsRef;)Lorg/apache/lucene/util/CharsRef;");
            mids$[mid_equals_8b72f2dcdde6fd1d] = env->getMethodID(cls, "equals", "(Ljava/lang/Object;)Z");
            mids$[mid_getUTF16SortedAsUTF8Comparator_beb0414e0ec1de00] = env->getStaticMethodID(cls, "getUTF16SortedAsUTF8Comparator", "()Ljava/util/Comparator;");
            mids$[mid_hashCode_9972fcc56b44e79d] = env->getMethodID(cls, "hashCode", "()I");
            mids$[mid_isValid_8454bd5aa23fd11e] = env->getMethodID(cls, "isValid", "()Z");
            mids$[mid_length_9972fcc56b44e79d] = env->getMethodID(cls, "length", "()I");
            mids$[mid_stringHashCode_644fc0bf0aa7fb26] = env->getStaticMethodID(cls, "stringHashCode", "([CII)I");
            mids$[mid_subSequence_26d6f5be97bcdc38] = env->getMethodID(cls, "subSequence", "(II)Ljava/lang/CharSequence;");
            mids$[mid_toString_db9b55ba01e03e4b] = env->getMethodID(cls, "toString", "()Ljava/lang/String;");

            fids$ = new jfieldID[max_fid];
            fids$[fid_chars] = env->getFieldID(cls, "chars", "[C");
            fids$[fid_length] = env->getFieldID(cls, "length", "I");
            fids$[fid_offset] = env->getFieldID(cls, "offset", "I");

            class$ = new ::java::lang::Class(cls);
            cls = (jclass) class$->this$;

            EMPTY_CHARS = new JArray< jchar >(env->getStaticObjectField(cls, "EMPTY_CHARS", "[C"));
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        CharsRef::CharsRef() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_f2cc1bce94666404)) {}

        CharsRef::CharsRef(const ::java::lang::String & a0) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_9fd2eb66a64e6f0f, a0.this$)) {}

        CharsRef::CharsRef(jint a0) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_040c4cd0390c5aff, a0)) {}

        CharsRef::CharsRef(const JArray< jchar > & a0, jint a1, jint a2) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_d5128be76a214037, a0.this$, a1, a2)) {}

        jchar CharsRef::charAt(jint a0) const
        {
          return env->callCharMethod(this$, mids$[mid_charAt_ebc61ec1e57770d1], a0);
        }

        jboolean CharsRef::charsEquals(const CharsRef & a0) const
        {
          return env->callBooleanMethod(this$, mids$[mid_charsEquals_32b38c27586805a6], a0.this$);
        }

        CharsRef CharsRef::clone() const
        {
          return CharsRef(env->callObjectMethod(this$, mids$[mid_clone_2361d75e15cf20de]));
        }

        jint CharsRef::compareTo(const CharsRef & a0) const
        {
          return env->callIntMethod(this$, mids$[mid_compareTo_3d179161e74bf316], a0.this$);
        }

        CharsRef CharsRef::deepCopyOf(const CharsRef & a0)
        {
          jclass cls = env->getClass(initializeClass);
          return CharsRef(env->callStaticObjectMethod(cls, mids$[mid_deepCopyOf_8bc3c1aa34587137], a0.this$));
        }

        jboolean CharsRef::equals(const ::java::lang::Object & a0) const
        {
          return env->callBooleanMethod(this$, mids$[mid_equals_8b72f2dcdde6fd1d], a0.this$);
        }

        ::java::util::Comparator CharsRef::getUTF16SortedAsUTF8Comparator()
        {
          jclass cls = env->getClass(initializeClass);
          return ::java::util::Comparator(env->callStaticObjectMethod(cls, mids$[mid_getUTF16SortedAsUTF8Comparator_beb0414e0ec1de00]));
        }

        jint CharsRef::hashCode() const
        {
          return env->callIntMethod(this$, mids$[mid_hashCode_9972fcc56b44e79d]);
        }

        jboolean CharsRef::isValid() const
        {
          return env->callBooleanMethod(this$, mids$[mid_isValid_8454bd5aa23fd11e]);
        }

        jint CharsRef::length() const
        {
          return env->callIntMethod(this$, mids$[mid_length_9972fcc56b44e79d]);
        }

        jint CharsRef::stringHashCode(const JArray< jchar > & a0, jint a1, jint a2)
        {
          jclass cls = env->getClass(initializeClass);
          return env->callStaticIntMethod(cls, mids$[mid_stringHashCode_644fc0bf0aa7fb26], a0.this$, a1, a2);
        }

        ::java::lang::CharSequence CharsRef::subSequence(jint a0, jint a1) const
        {
          return ::java::lang::CharSequence(env->callObjectMethod(this$, mids$[mid_subSequence_26d6f5be97bcdc38], a0, a1));
        }

        ::java::lang::String CharsRef::toString() const
        {
          return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_db9b55ba01e03e4b]));
        }

        JArray< jchar > CharsRef::_get_chars() const
        {
          return JArray< jchar >(env->getObjectField(this$, fids$[fid_chars]));
        }

        void CharsRef::_set_chars(const JArray< jchar > & a0) const
        {
          env->setObjectField(this$, fids$[fid_chars], a0.this$);
        }

        jint CharsRef::_get_length() const
        {
          return env->getIntField(this$, fids$[fid_length]);
        }

        void CharsRef::_set_length(jint a0) const
        {
          env->setIntField(this$, fids$[fid_length], a0);
        }

        jint CharsRef::_get_offset() const
        {
          return env->getIntField(this$, fids$[fid_offset]);
        }

        void CharsRef::_set_offset(jint a0) const
        {
          env->setIntField(this$, fids$[fid_offset], a0);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        static PyObject *t_CharsRef_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_CharsRef_instance_(PyTypeObject *type, PyObject *arg);
        static int t_CharsRef_init_(t_CharsRef *self, PyObject *args, PyObject *kwds);
        static PyObject *t_CharsRef_charAt(t_CharsRef *self, PyObject *arg);
        static PyObject *t_CharsRef_charsEquals(t_CharsRef *self, PyObject *arg);
        static PyObject *t_CharsRef_clone(t_CharsRef *self);
        static PyObject *t_CharsRef_compareTo(t_CharsRef *self, PyObject *arg);
        static PyObject *t_CharsRef_deepCopyOf(PyTypeObject *type, PyObject *arg);
        static PyObject *t_CharsRef_equals(t_CharsRef *self, PyObject *args);
        static PyObject *t_CharsRef_getUTF16SortedAsUTF8Comparator(PyTypeObject *type);
        static PyObject *t_CharsRef_hashCode(t_CharsRef *self, PyObject *args);
        static PyObject *t_CharsRef_isValid(t_CharsRef *self);
        static PyObject *t_CharsRef_length(t_CharsRef *self);
        static PyObject *t_CharsRef_stringHashCode(PyTypeObject *type, PyObject *args);
        static PyObject *t_CharsRef_subSequence(t_CharsRef *self, PyObject *args);
        static PyObject *t_CharsRef_toString(t_CharsRef *self, PyObject *args);
        static PyObject *t_CharsRef_get__chars(t_CharsRef *self, void *data);
        static int t_CharsRef_set__chars(t_CharsRef *self, PyObject *arg, void *data);
        static PyObject *t_CharsRef_get__length(t_CharsRef *self, void *data);
        static int t_CharsRef_set__length(t_CharsRef *self, PyObject *arg, void *data);
        static PyObject *t_CharsRef_get__offset(t_CharsRef *self, void *data);
        static int t_CharsRef_set__offset(t_CharsRef *self, PyObject *arg, void *data);

        static PyObject *t_CharsRef_get__uTF16SortedAsUTF8Comparator(t_CharsRef *self, void *data);
        static PyObject *t_CharsRef_get__valid(t_CharsRef *self, void *data);
        static PyGetSetDef t_CharsRef__fields_[] = {
          DECLARE_GETSET_FIELD(t_CharsRef, chars),
          DECLARE_GETSET_FIELD(t_CharsRef, length),
          DECLARE_GETSET_FIELD(t_CharsRef, offset),
          DECLARE_GET_FIELD(t_CharsRef, uTF16SortedAsUTF8Comparator),
          DECLARE_GET_FIELD(t_CharsRef, valid),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_CharsRef__methods_[] = {
          DECLARE_METHOD(t_CharsRef, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_CharsRef, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_CharsRef, charAt, METH_O),
          DECLARE_METHOD(t_CharsRef, charsEquals, METH_O),
          DECLARE_METHOD(t_CharsRef, clone, METH_NOARGS),
          DECLARE_METHOD(t_CharsRef, compareTo, METH_O),
          DECLARE_METHOD(t_CharsRef, deepCopyOf, METH_O | METH_CLASS),
          DECLARE_METHOD(t_CharsRef, equals, METH_VARARGS),
          DECLARE_METHOD(t_CharsRef, getUTF16SortedAsUTF8Comparator, METH_NOARGS | METH_CLASS),
          DECLARE_METHOD(t_CharsRef, hashCode, METH_VARARGS),
          DECLARE_METHOD(t_CharsRef, isValid, METH_NOARGS),
          DECLARE_METHOD(t_CharsRef, length, METH_NOARGS),
          DECLARE_METHOD(t_CharsRef, stringHashCode, METH_VARARGS | METH_CLASS),
          DECLARE_METHOD(t_CharsRef, subSequence, METH_VARARGS),
          DECLARE_METHOD(t_CharsRef, toString, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        static PyType_Slot PY_TYPE_SLOTS(CharsRef)[] = {
          { Py_tp_methods, t_CharsRef__methods_ },
          { Py_tp_init, (void *) t_CharsRef_init_ },
          { Py_tp_getset, t_CharsRef__fields_ },
          { 0, NULL }
        };

        static PyType_Def *PY_TYPE_BASES(CharsRef)[] = {
          &PY_TYPE_DEF(::java::lang::Object),
          NULL
        };

        DEFINE_TYPE(CharsRef, t_CharsRef, CharsRef);

        void t_CharsRef::install(PyObject *module)
        {
          installType(&PY_TYPE(CharsRef), &PY_TYPE_DEF(CharsRef), module, "CharsRef", 0);
        }

        void t_CharsRef::initialize(PyObject *module)
        {
          PyObject_SetAttrString((PyObject *) PY_TYPE(CharsRef), "class_", make_descriptor(CharsRef::initializeClass, 1));
          PyObject_SetAttrString((PyObject *) PY_TYPE(CharsRef), "wrapfn_", make_descriptor(t_CharsRef::wrap_jobject));
          PyObject_SetAttrString((PyObject *) PY_TYPE(CharsRef), "boxfn_", make_descriptor(boxObject));
          env->getClass(CharsRef::initializeClass);
          PyObject_SetAttrString((PyObject *) PY_TYPE(CharsRef), "EMPTY_CHARS", make_descriptor(CharsRef::EMPTY_CHARS->wrap()));
        }

        static PyObject *t_CharsRef_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, CharsRef::initializeClass, 1)))
            return NULL;
          return t_CharsRef::wrap_Object(CharsRef(((t_CharsRef *) arg)->object.this$));
        }
        static PyObject *t_CharsRef_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, CharsRef::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_CharsRef_init_(t_CharsRef *self, PyObject *args, PyObject *kwds)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 0:
            {
              CharsRef object((jobject) NULL);

              INT_CALL(object = CharsRef());
              self->object = object;
              break;
            }
           case 1:
            {
              ::java::lang::String a0((jobject) NULL);
              CharsRef object((jobject) NULL);

              if (!parseArgs(args, "s", &a0))
              {
                INT_CALL(object = CharsRef(a0));
                self->object = object;
                break;
              }
            }
            {
              jint a0;
              CharsRef object((jobject) NULL);

              if (!parseArgs(args, "I", &a0))
              {
                INT_CALL(object = CharsRef(a0));
                self->object = object;
                break;
              }
            }
            goto err;
           case 3:
            {
              JArray< jchar > a0((jobject) NULL);
              jint a1;
              jint a2;
              CharsRef object((jobject) NULL);

              if (!parseArgs(args, "[CII", &a0, &a1, &a2))
              {
                INT_CALL(object = CharsRef(a0, a1, a2));
                self->object = object;
                break;
              }
            }
           default:
           err:
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }

        static PyObject *t_CharsRef_charAt(t_CharsRef *self, PyObject *arg)
        {
          jint a0;
          jchar result;

          if (!parseArg(arg, "I", &a0))
          {
            OBJ_CALL(result = self->object.charAt(a0));
            return c2p(result);
          }

          PyErr_SetArgsError((PyObject *) self, "charAt", arg);
          return NULL;
        }

        static PyObject *t_CharsRef_charsEquals(t_CharsRef *self, PyObject *arg)
        {
          CharsRef a0((jobject) NULL);
          jboolean result;

          if (!parseArg(arg, "k", CharsRef::initializeClass, &a0))
          {
            OBJ_CALL(result = self->object.charsEquals(a0));
            Py_RETURN_BOOL(result);
          }

          PyErr_SetArgsError((PyObject *) self, "charsEquals", arg);
          return NULL;
        }

        static PyObject *t_CharsRef_clone(t_CharsRef *self)
        {
          CharsRef result((jobject) NULL);
          OBJ_CALL(result = self->object.clone());
          return t_CharsRef::wrap_Object(result);
        }

        static PyObject *t_CharsRef_compareTo(t_CharsRef *self, PyObject *arg)
        {
          CharsRef a0((jobject) NULL);
          jint result;

          if (!parseArg(arg, "k", CharsRef::initializeClass, &a0))
          {
            OBJ_CALL(result = self->object.compareTo(a0));
            return PyLong_FromLong((long) result);
          }

          PyErr_SetArgsError((PyObject *) self, "compareTo", arg);
          return NULL;
        }

        static PyObject *t_CharsRef_deepCopyOf(PyTypeObject *type, PyObject *arg)
        {
          CharsRef a0((jobject) NULL);
          CharsRef result((jobject) NULL);

          if (!parseArg(arg, "k", CharsRef::initializeClass, &a0))
          {
            OBJ_CALL(result = ::org::apache::lucene::util::CharsRef::deepCopyOf(a0));
            return t_CharsRef::wrap_Object(result);
          }

          PyErr_SetArgsError(type, "deepCopyOf", arg);
          return NULL;
        }

        static PyObject *t_CharsRef_equals(t_CharsRef *self, PyObject *args)
        {
          ::java::lang::Object a0((jobject) NULL);
          jboolean result;

          if (!parseArgs(args, "o", &a0))
          {
            OBJ_CALL(result = self->object.equals(a0));
            Py_RETURN_BOOL(result);
          }

          return callSuper(PY_TYPE(CharsRef), (PyObject *) self, "equals", args, 2);
        }

        static PyObject *t_CharsRef_getUTF16SortedAsUTF8Comparator(PyTypeObject *type)
        {
          ::java::util::Comparator result((jobject) NULL);
          OBJ_CALL(result = ::org::apache::lucene::util::CharsRef::getUTF16SortedAsUTF8Comparator());
          return ::java::util::t_Comparator::wrap_Object(result, ::org::apache::lucene::util::PY_TYPE(CharsRef));
        }

        static PyObject *t_CharsRef_hashCode(t_CharsRef *self, PyObject *args)
        {
          jint result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.hashCode());
            return PyLong_FromLong((long) result);
          }

          return callSuper(PY_TYPE(CharsRef), (PyObject *) self, "hashCode", args, 2);
        }

        static PyObject *t_CharsRef_isValid(t_CharsRef *self)
        {
          jboolean result;
          OBJ_CALL(result = self->object.isValid());
          Py_RETURN_BOOL(result);
        }

        static PyObject *t_CharsRef_length(t_CharsRef *self)
        {
          jint result;
          OBJ_CALL(result = self->object.length());
          return PyLong_FromLong((long) result);
        }

        static PyObject *t_CharsRef_stringHashCode(PyTypeObject *type, PyObject *args)
        {
          JArray< jchar > a0((jobject) NULL);
          jint a1;
          jint a2;
          jint result;

          if (!parseArgs(args, "[CII", &a0, &a1, &a2))
          {
            OBJ_CALL(result = ::org::apache::lucene::util::CharsRef::stringHashCode(a0, a1, a2));
            return PyLong_FromLong((long) result);
          }

          PyErr_SetArgsError(type, "stringHashCode", args);
          return NULL;
        }

        static PyObject *t_CharsRef_subSequence(t_CharsRef *self, PyObject *args)
        {
          jint a0;
          jint a1;
          ::java::lang::CharSequence result((jobject) NULL);

          if (!parseArgs(args, "II", &a0, &a1))
          {
            OBJ_CALL(result = self->object.subSequence(a0, a1));
            return ::java::lang::t_CharSequence::wrap_Object(result);
          }

          PyErr_SetArgsError((PyObject *) self, "subSequence", args);
          return NULL;
        }

        static PyObject *t_CharsRef_toString(t_CharsRef *self, PyObject *args)
        {
          ::java::lang::String result((jobject) NULL);

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.toString());
            return j2p(result);
          }

          return callSuper(PY_TYPE(CharsRef), (PyObject *) self, "toString", args, 2);
        }

        static PyObject *t_CharsRef_get__chars(t_CharsRef *self, void *data)
        {
          JArray< jchar > value((jobject) NULL);
          OBJ_CALL(value = self->object._get_chars());
          return value.wrap();
        }
        static int t_CharsRef_set__chars(t_CharsRef *self, PyObject *arg, void *data)
        {
          JArray< jchar > value((jobject) NULL);
          if (!parseArg(arg, "[C", &value))
          {
            INT_CALL(self->object._set_chars(value));
            return 0;
          }
          PyErr_SetArgsError((PyObject *) self, "chars", arg);
          return -1;
        }

        static PyObject *t_CharsRef_get__length(t_CharsRef *self, void *data)
        {
          jint value;
          OBJ_CALL(value = self->object._get_length());
          return PyLong_FromLong((long) value);
        }
        static int t_CharsRef_set__length(t_CharsRef *self, PyObject *arg, void *data)
        {
          jint value;
          if (!parseArg(arg, "I", &value))
          {
            INT_CALL(self->object._set_length(value));
            return 0;
          }
          PyErr_SetArgsError((PyObject *) self, "length", arg);
          return -1;
        }

        static PyObject *t_CharsRef_get__offset(t_CharsRef *self, void *data)
        {
          jint value;
          OBJ_CALL(value = self->object._get_offset());
          return PyLong_FromLong((long) value);
        }
        static int t_CharsRef_set__offset(t_CharsRef *self, PyObject *arg, void *data)
        {
          jint value;
          if (!parseArg(arg, "I", &value))
          {
            INT_CALL(self->object._set_offset(value));
            return 0;
          }
          PyErr_SetArgsError((PyObject *) self, "offset", arg);
          return -1;
        }

        static PyObject *t_CharsRef_get__uTF16SortedAsUTF8Comparator(t_CharsRef *self, void *data)
        {
          ::java::util::Comparator value((jobject) NULL);
          OBJ_CALL(value = self->object.getUTF16SortedAsUTF8Comparator());
          return ::java::util::t_Comparator::wrap_Object(value);
        }

        static PyObject *t_CharsRef_get__valid(t_CharsRef *self, void *data)
        {
          jboolean value;
          OBJ_CALL(value = self->object.isValid());
          Py_RETURN_BOOL(value);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queryparser/classic/ParseException.h"
#include "org/apache/lucene/queryparser/classic/Token.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace classic {

          ::java::lang::Class *ParseException::class$ = NULL;
          jmethodID *ParseException::mids$ = NULL;
          jfieldID *ParseException::fids$ = NULL;
          bool ParseException::live$ = false;

          jclass ParseException::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/queryparser/classic/ParseException");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_f2cc1bce94666404] = env->getMethodID(cls, "<init>", "()V");
              mids$[mid_init$_9fd2eb66a64e6f0f] = env->getMethodID(cls, "<init>", "(Ljava/lang/String;)V");
              mids$[mid_init$_018a0dbc84df1f9e] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/queryparser/classic/Token;[[I[Ljava/lang/String;)V");

              fids$ = new jfieldID[max_fid];
              fids$[fid_currentToken] = env->getFieldID(cls, "currentToken", "Lorg/apache/lucene/queryparser/classic/Token;");
              fids$[fid_expectedTokenSequences] = env->getFieldID(cls, "expectedTokenSequences", "[[I");
              fids$[fid_tokenImage] = env->getFieldID(cls, "tokenImage", "[Ljava/lang/String;");

              class$ = new ::java::lang::Class(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          ParseException::ParseException() : ::java::lang::Exception(env->newObject(initializeClass, &mids$, mid_init$_f2cc1bce94666404)) {}

          ParseException::ParseException(const ::java::lang::String & a0) : ::java::lang::Exception(env->newObject(initializeClass, &mids$, mid_init$_9fd2eb66a64e6f0f, a0.this$)) {}

          ParseException::ParseException(const ::org::apache::lucene::queryparser::classic::Token & a0, const JArray< JArray< jint > > & a1, const JArray< ::java::lang::String > & a2) : ::java::lang::Exception(env->newObject(initializeClass, &mids$, mid_init$_018a0dbc84df1f9e, a0.this$, a1.this$, a2.this$)) {}

          ::org::apache::lucene::queryparser::classic::Token ParseException::_get_currentToken() const
          {
            return ::org::apache::lucene::queryparser::classic::Token(env->getObjectField(this$, fids$[fid_currentToken]));
          }

          void ParseException::_set_currentToken(const ::org::apache::lucene::queryparser::classic::Token & a0) const
          {
            env->setObjectField(this$, fids$[fid_currentToken], a0.this$);
          }

          JArray< JArray< jint > > ParseException::_get_expectedTokenSequences() const
          {
            return JArray< JArray< jint > >(env->getObjectField(this$, fids$[fid_expectedTokenSequences]));
          }

          void ParseException::_set_expectedTokenSequences(const JArray< JArray< jint > > & a0) const
          {
            env->setObjectField(this$, fids$[fid_expectedTokenSequences], a0.this$);
          }

          JArray< ::java::lang::String > ParseException::_get_tokenImage() const
          {
            return JArray< ::java::lang::String >(env->getObjectField(this$, fids$[fid_tokenImage]));
          }

          void ParseException::_set_tokenImage(const JArray< ::java::lang::String > & a0) const
          {
            env->setObjectField(this$, fids$[fid_tokenImage], a0.this$);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace classic {
          static PyObject *t_ParseException_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_ParseException_instance_(PyTypeObject *type, PyObject *arg);
          static int t_ParseException_init_(t_ParseException *self, PyObject *args, PyObject *kwds);
          static PyObject *t_ParseException_get__currentToken(t_ParseException *self, void *data);
          static int t_ParseException_set__currentToken(t_ParseException *self, PyObject *arg, void *data);
          static PyObject *t_ParseException_get__expectedTokenSequences(t_ParseException *self, void *data);
          static int t_ParseException_set__expectedTokenSequences(t_ParseException *self, PyObject *arg, void *data);
          static PyObject *t_ParseException_get__tokenImage(t_ParseException *self, void *data);
          static int t_ParseException_set__tokenImage(t_ParseException *self, PyObject *arg, void *data);

          static PyGetSetDef t_ParseException__fields_[] = {
            DECLARE_GETSET_FIELD(t_ParseException, currentToken),
            DECLARE_GETSET_FIELD(t_ParseException, expectedTokenSequences),
            DECLARE_GETSET_FIELD(t_ParseException, tokenImage),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_ParseException__methods_[] = {
            DECLARE_METHOD(t_ParseException, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_ParseException, instance_, METH_O | METH_CLASS),
            { NULL, NULL, 0, NULL }
          };

          static PyType_Slot PY_TYPE_SLOTS(ParseException)[] = {
            { Py_tp_methods, t_ParseException__methods_ },
            { Py_tp_init, (void *) t_ParseException_init_ },
            { Py_tp_getset, t_ParseException__fields_ },
            { 0, NULL }
          };

          static PyType_Def *PY_TYPE_BASES(ParseException)[] = {
            &PY_TYPE_DEF(::java::lang::Exception),
            NULL
          };

          DEFINE_TYPE(ParseException, t_ParseException, ParseException);

          void t_ParseException::install(PyObject *module)
          {
            installType(&PY_TYPE(ParseException), &PY_TYPE_DEF(ParseException), module, "ParseException", 0);
          }

          void t_ParseException::initialize(PyObject *module)
          {
            PyObject_SetAttrString((PyObject *) PY_TYPE(ParseException), "class_", make_descriptor(ParseException::initializeClass, 1));
            PyObject_SetAttrString((PyObject *) PY_TYPE(ParseException), "wrapfn_", make_descriptor(t_ParseException::wrap_jobject));
            PyObject_SetAttrString((PyObject *) PY_TYPE(ParseException), "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_ParseException_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, ParseException::initializeClass, 1)))
              return NULL;
            return t_ParseException::wrap_Object(ParseException(((t_ParseException *) arg)->object.this$));
          }
          static PyObject *t_ParseException_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, ParseException::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_ParseException_init_(t_ParseException *self, PyObject *args, PyObject *kwds)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 0:
              {
                ParseException object((jobject) NULL);

                INT_CALL(object = ParseException());
                self->object = object;
                break;
              }
             case 1:
              {
                ::java::lang::String a0((jobject) NULL);
                ParseException object((jobject) NULL);

                if (!parseArgs(args, "s", &a0))
                {
                  INT_CALL(object = ParseException(a0));
                  self->object = object;
                  break;
                }
              }
              goto err;
             case 3:
              {
                ::org::apache::lucene::queryparser::classic::Token a0((jobject) NULL);
                JArray< JArray< jint > > a1((jobject) NULL);
                JArray< ::java::lang::String > a2((jobject) NULL);
                ParseException object((jobject) NULL);

                if (!parseArgs(args, "k[[I[s", ::org::apache::lucene::queryparser::classic::Token::initializeClass, &a0, &a1, &a2))
                {
                  INT_CALL(object = ParseException(a0, a1, a2));
                  self->object = object;
                  break;
                }
              }
             default:
             err:
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_ParseException_get__currentToken(t_ParseException *self, void *data)
          {
            ::org::apache::lucene::queryparser::classic::Token value((jobject) NULL);
            OBJ_CALL(value = self->object._get_currentToken());
            return ::org::apache::lucene::queryparser::classic::t_Token::wrap_Object(value);
          }
          static int t_ParseException_set__currentToken(t_ParseException *self, PyObject *arg, void *data)
          {
            ::org::apache::lucene::queryparser::classic::Token value((jobject) NULL);
            if (!parseArg(arg, "k", ::org::apache::lucene::queryparser::classic::Token::initializeClass, &value))
            {
              INT_CALL(self->object._set_currentToken(value));
              return 0;
            }
            PyErr_SetArgsError((PyObject *) self, "currentToken", arg);
            return -1;
          }

          static PyObject *t_ParseException_get__expectedTokenSequences(t_ParseException *self, void *data)
          {
            JArray< JArray< jint > > value((jobject) NULL);
            OBJ_CALL(value = self->object._get_expectedTokenSequences());
            return JArray<jobject>(value.this$).wrap(NULL);
          }
          static int t_ParseException_set__expectedTokenSequences(t_ParseException *self, PyObject *arg, void *data)
          {
            JArray< JArray< jint > > value((jobject) NULL);
            if (!parseArg(arg, "[[I", &value))
            {
              INT_CALL(self->object._set_expectedTokenSequences(value));
              return 0;
            }
            PyErr_SetArgsError((PyObject *) self, "expectedTokenSequences", arg);
            return -1;
          }

          static PyObject *t_ParseException_get__tokenImage(t_ParseException *self, void *data)
          {
            JArray< ::java::lang::String > value((jobject) NULL);
            OBJ_CALL(value = self->object._get_tokenImage());
            return JArray<jstring>(value.this$).wrap();
          }
          static int t_ParseException_set__tokenImage(t_ParseException *self, PyObject *arg, void *data)
          {
            JArray< ::java::lang::String > value((jobject) NULL);
            if (!parseArg(arg, "[s", &value))
            {
              INT_CALL(self->object._set_tokenImage(value));
              return 0;
            }
            PyErr_SetArgsError((PyObject *) self, "tokenImage", arg);
            return -1;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/highlight/WeightedSpanTerm.h"
#include "java/util/List.h"
#include "org/apache/lucene/search/highlight/PositionSpan.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace highlight {

          ::java::lang::Class *WeightedSpanTerm::class$ = NULL;
          jmethodID *WeightedSpanTerm::mids$ = NULL;
          bool WeightedSpanTerm::live$ = false;

          jclass WeightedSpanTerm::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/search/highlight/WeightedSpanTerm");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_92b8330cd0e4f2a3] = env->getMethodID(cls, "<init>", "(FLjava/lang/String;)V");
              mids$[mid_init$_b094f5b048ebd6a7] = env->getMethodID(cls, "<init>", "(FLjava/lang/String;Z)V");
              mids$[mid_addPositionSpans_d03990be0130160d] = env->getMethodID(cls, "addPositionSpans", "(Ljava/util/List;)V");
              mids$[mid_checkPosition_a1d30e1ee40c89a2] = env->getMethodID(cls, "checkPosition", "(I)Z");
              mids$[mid_getPositionSpans_49ec78390f08338a] = env->getMethodID(cls, "getPositionSpans", "()Ljava/util/List;");
              mids$[mid_isPositionSensitive_8454bd5aa23fd11e] = env->getMethodID(cls, "isPositionSensitive", "()Z");
              mids$[mid_setPositionSensitive_9d72768e8fdce2b7] = env->getMethodID(cls, "setPositionSensitive", "(Z)V");

              class$ = new ::java::lang::Class(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          WeightedSpanTerm::WeightedSpanTerm(jfloat a0, const ::java::lang::String & a1) : ::org::apache::lucene::search::highlight::WeightedTerm(env->newObject(initializeClass, &mids$, mid_init$_92b8330cd0e4f2a3, a0, a1.this$)) {}

          WeightedSpanTerm::WeightedSpanTerm(jfloat a0, const ::java::lang::String & a1, jboolean a2) : ::org::apache::lucene::search::highlight::WeightedTerm(env->newObject(initializeClass, &mids$, mid_init$_b094f5b048ebd6a7, a0, a1.this$, a2)) {}

          void WeightedSpanTerm::addPositionSpans(const ::java::util::List & a0) const
          {
            env->callVoidMethod(this$, mids$[mid_addPositionSpans_d03990be0130160d], a0.this$);
          }

          jboolean WeightedSpanTerm::checkPosition(jint a0) const
          {
            return env->callBooleanMethod(this$, mids$[mid_checkPosition_a1d30e1ee40c89a2], a0);
          }

          ::java::util::List WeightedSpanTerm::getPositionSpans() const
          {
            return ::java::util::List(env->callObjectMethod(this$, mids$[mid_getPositionSpans_49ec78390f08338a]));
          }

          jboolean WeightedSpanTerm::isPositionSensitive() const
          {
            return env->callBooleanMethod(this$, mids$[mid_isPositionSensitive_8454bd5aa23fd11e]);
          }

          void WeightedSpanTerm::setPositionSensitive(jboolean a0) const
          {
            env->callVoidMethod(this$, mids$[mid_setPositionSensitive_9d72768e8fdce2b7], a0);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace highlight {
          static PyObject *t_WeightedSpanTerm_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_WeightedSpanTerm_instance_(PyTypeObject *type, PyObject *arg);
          static int t_WeightedSpanTerm_init_(t_WeightedSpanTerm *self, PyObject *args, PyObject *kwds);
          static PyObject *t_WeightedSpanTerm_addPositionSpans(t_WeightedSpanTerm *self, PyObject *arg);
          static PyObject *t_WeightedSpanTerm_checkPosition(t_WeightedSpanTerm *self, PyObject *arg);
          static PyObject *t_WeightedSpanTerm_getPositionSpans(t_WeightedSpanTerm *self);
          static PyObject *t_WeightedSpanTerm_isPositionSensitive(t_WeightedSpanTerm *self);
          static PyObject *t_WeightedSpanTerm_setPositionSensitive(t_WeightedSpanTerm *self, PyObject *arg);
          static PyObject *t_WeightedSpanTerm_get__positionSensitive(t_WeightedSpanTerm *self, void *data);
          static int t_WeightedSpanTerm_set__positionSensitive(t_WeightedSpanTerm *self, PyObject *arg, void *data);
          static PyObject *t_WeightedSpanTerm_get__positionSpans(t_WeightedSpanTerm *self, void *data);
          static PyGetSetDef t_WeightedSpanTerm__fields_[] = {
            DECLARE_GETSET_FIELD(t_WeightedSpanTerm, positionSensitive),
            DECLARE_GET_FIELD(t_WeightedSpanTerm, positionSpans),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_WeightedSpanTerm__methods_[] = {
            DECLARE_METHOD(t_WeightedSpanTerm, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_WeightedSpanTerm, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_WeightedSpanTerm, addPositionSpans, METH_O),
            DECLARE_METHOD(t_WeightedSpanTerm, checkPosition, METH_O),
            DECLARE_METHOD(t_WeightedSpanTerm, getPositionSpans, METH_NOARGS),
            DECLARE_METHOD(t_WeightedSpanTerm, isPositionSensitive, METH_NOARGS),
            DECLARE_METHOD(t_WeightedSpanTerm, setPositionSensitive, METH_O),
            { NULL, NULL, 0, NULL }
          };

          static PyType_Slot PY_TYPE_SLOTS(WeightedSpanTerm)[] = {
            { Py_tp_methods, t_WeightedSpanTerm__methods_ },
            { Py_tp_init, (void *) t_WeightedSpanTerm_init_ },
            { Py_tp_getset, t_WeightedSpanTerm__fields_ },
            { 0, NULL }
          };

          static PyType_Def *PY_TYPE_BASES(WeightedSpanTerm)[] = {
            &PY_TYPE_DEF(::org::apache::lucene::search::highlight::WeightedTerm),
            NULL
          };

          DEFINE_TYPE(WeightedSpanTerm, t_WeightedSpanTerm, WeightedSpanTerm);

          void t_WeightedSpanTerm::install(PyObject *module)
          {
            installType(&PY_TYPE(WeightedSpanTerm), &PY_TYPE_DEF(WeightedSpanTerm), module, "WeightedSpanTerm", 0);
          }

          void t_WeightedSpanTerm::initialize(PyObject *module)
          {
            PyObject_SetAttrString((PyObject *) PY_TYPE(WeightedSpanTerm), "class_", make_descriptor(WeightedSpanTerm::initializeClass, 1));
            PyObject_SetAttrString((PyObject *) PY_TYPE(WeightedSpanTerm), "wrapfn_", make_descriptor(t_WeightedSpanTerm::wrap_jobject));
            PyObject_SetAttrString((PyObject *) PY_TYPE(WeightedSpanTerm), "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_WeightedSpanTerm_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, WeightedSpanTerm::initializeClass, 1)))
              return NULL;
            return t_WeightedSpanTerm::wrap_Object(WeightedSpanTerm(((t_WeightedSpanTerm *) arg)->object.this$));
          }
          static PyObject *t_WeightedSpanTerm_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, WeightedSpanTerm::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_WeightedSpanTerm_init_(t_WeightedSpanTerm *self, PyObject *args, PyObject *kwds)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 2:
              {
                jfloat a0;
                ::java::lang::String a1((jobject) NULL);
                WeightedSpanTerm object((jobject) NULL);

                if (!parseArgs(args, "Fs", &a0, &a1))
                {
                  INT_CALL(object = WeightedSpanTerm(a0, a1));
                  self->object = object;
                  break;
                }
              }
              goto err;
             case 3:
              {
                jfloat a0;
                ::java::lang::String a1((jobject) NULL);
                jboolean a2;
                WeightedSpanTerm object((jobject) NULL);

                if (!parseArgs(args, "FsZ", &a0, &a1, &a2))
                {
                  INT_CALL(object = WeightedSpanTerm(a0, a1, a2));
                  self->object = object;
                  break;
                }
              }
             default:
             err:
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_WeightedSpanTerm_addPositionSpans(t_WeightedSpanTerm *self, PyObject *arg)
          {
            ::java::util::List a0((jobject) NULL);
            PyTypeObject **p0;

            if (!parseArg(arg, "K", ::java::util::List::initializeClass, &a0, &p0, ::java::util::t_List::parameters_))
            {
              OBJ_CALL(self->object.addPositionSpans(a0));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError((PyObject *) self, "addPositionSpans", arg);
            return NULL;
          }

          static PyObject *t_WeightedSpanTerm_checkPosition(t_WeightedSpanTerm *self, PyObject *arg)
          {
            jint a0;
            jboolean result;

            if (!parseArg(arg, "I", &a0))
            {
              OBJ_CALL(result = self->object.checkPosition(a0));
              Py_RETURN_BOOL(result);
            }

            PyErr_SetArgsError((PyObject *) self, "checkPosition", arg);
            return NULL;
          }

          static PyObject *t_WeightedSpanTerm_getPositionSpans(t_WeightedSpanTerm *self)
          {
            ::java::util::List result((jobject) NULL);
            OBJ_CALL(result = self->object.getPositionSpans());
            return ::java::util::t_List::wrap_Object(result, ::org::apache::lucene::search::highlight::PY_TYPE(PositionSpan));
          }

          static PyObject *t_WeightedSpanTerm_isPositionSensitive(t_WeightedSpanTerm *self)
          {
            jboolean result;
            OBJ_CALL(result = self->object.isPositionSensitive());
            Py_RETURN_BOOL(result);
          }

          static PyObject *t_WeightedSpanTerm_setPositionSensitive(t_WeightedSpanTerm *self, PyObject *arg)
          {
            jboolean a0;

            if (!parseArg(arg, "Z", &a0))
            {
              OBJ_CALL(self->object.setPositionSensitive(a0));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError((PyObject *) self, "setPositionSensitive", arg);
            return NULL;
          }

          static PyObject *t_WeightedSpanTerm_get__positionSensitive(t_WeightedSpanTerm *self, void *data)
          {
            jboolean value;
            OBJ_CALL(value = self->object.isPositionSensitive());
            Py_RETURN_BOOL(value);
          }
          static int t_WeightedSpanTerm_set__positionSensitive(t_WeightedSpanTerm *self, PyObject *arg, void *data)
          {
            {
              jboolean value;
              if (!parseArg(arg, "Z", &value))
              {
                INT_CALL(self->object.setPositionSensitive(value));
                return 0;
              }
            }
            PyErr_SetArgsError((PyObject *) self, "positionSensitive", arg);
            return -1;
          }

          static PyObject *t_WeightedSpanTerm_get__positionSpans(t_WeightedSpanTerm *self, void *data)
          {
            ::java::util::List value((jobject) NULL);
            OBJ_CALL(value = self->object.getPositionSpans());
            return ::java::util::t_List::wrap_Object(value);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/pylucene/search/similarities/PythonClassicSimilarity.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/search/TermStatistics.h"
#include "org/apache/lucene/search/Explanation.h"
#include "org/apache/lucene/search/CollectionStatistics.h"
#include "java/lang/Throwable.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace pylucene {
      namespace search {
        namespace similarities {

          ::java::lang::Class *PythonClassicSimilarity::class$ = NULL;
          jmethodID *PythonClassicSimilarity::mids$ = NULL;
          bool PythonClassicSimilarity::live$ = false;

          jclass PythonClassicSimilarity::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/pylucene/search/similarities/PythonClassicSimilarity");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_f2cc1bce94666404] = env->getMethodID(cls, "<init>", "()V");
              mids$[mid_finalize_f2cc1bce94666404] = env->getMethodID(cls, "finalize", "()V");
              mids$[mid_idf_f850d9cfe8a8e47f] = env->getMethodID(cls, "idf", "(JJ)F");
              mids$[mid_idfExplain_a65c9ef6c8dde9e4] = env->getMethodID(cls, "idfExplain", "(Lorg/apache/lucene/search/CollectionStatistics;[Lorg/apache/lucene/search/TermStatistics;)Lorg/apache/lucene/search/Explanation;");
              mids$[mid_lengthNorm_384f078ef4b8f931] = env->getMethodID(cls, "lengthNorm", "(I)F");
              mids$[mid_pythonDecRef_f2cc1bce94666404] = env->getMethodID(cls, "pythonDecRef", "()V");
              mids$[mid_pythonExtension_2e5ae9edcb9b072f] = env->getMethodID(cls, "pythonExtension", "()J");
              mids$[mid_pythonExtension_9c778c9bce6694df] = env->getMethodID(cls, "pythonExtension", "(J)V");
              mids$[mid_tf_8c8518d25218b9c5] = env->getMethodID(cls, "tf", "(F)F");

              class$ = new ::java::lang::Class(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          PythonClassicSimilarity::PythonClassicSimilarity() : ::org::apache::lucene::search::similarities::ClassicSimilarity(env->newObject(initializeClass, &mids$, mid_init$_f2cc1bce94666404)) {}

          void PythonClassicSimilarity::finalize() const
          {
            env->callVoidMethod(this$, mids$[mid_finalize_f2cc1bce94666404]);
          }

          jfloat PythonClassicSimilarity::idf(jlong a0, jlong a1) const
          {
            return env->callNonvirtualFloatMethod(this$, (jclass) ::org::apache::lucene::search::similarities::ClassicSimilarity::class$->this$, ::org::apache::lucene::search::similarities::ClassicSimilarity::mids$[::org::apache::lucene::search::similarities::ClassicSimilarity::mid_idf_f850d9cfe8a8e47f], a0, a1);
          }

          ::org::apache::lucene::search::Explanation PythonClassicSimilarity::idfExplain(const ::org::apache::lucene::search::CollectionStatistics & a0, const JArray< ::org::apache::lucene::search::TermStatistics > & a1) const
          {
            return ::org::apache::lucene::search::Explanation(env->callNonvirtualObjectMethod(this$, (jclass) ::org::apache::lucene::search::similarities::ClassicSimilarity::class$->this$, ::org::apache::lucene::search::similarities::TFIDFSimilarity::mids$[::org::apache::lucene::search::similarities::TFIDFSimilarity::mid_idfExplain_a65c9ef6c8dde9e4], a0.this$, a1.this$));
          }

          jfloat PythonClassicSimilarity::lengthNorm(jint a0) const
          {
            return env->callNonvirtualFloatMethod(this$, (jclass) ::org::apache::lucene::search::similarities::ClassicSimilarity::class$->this$, ::org::apache::lucene::search::similarities::ClassicSimilarity::mids$[::org::apache::lucene::search::similarities::ClassicSimilarity::mid_lengthNorm_384f078ef4b8f931], a0);
          }

          jlong PythonClassicSimilarity::pythonExtension() const
          {
            return env->callLongMethod(this$, mids$[mid_pythonExtension_2e5ae9edcb9b072f]);
          }

          void PythonClassicSimilarity::pythonExtension(jlong a0) const
          {
            env->callVoidMethod(this$, mids$[mid_pythonExtension_9c778c9bce6694df], a0);
          }

          jfloat PythonClassicSimilarity::tf(jfloat a0) const
          {
            return env->callNonvirtualFloatMethod(this$, (jclass) ::org::apache::lucene::search::similarities::ClassicSimilarity::class$->this$, ::org::apache::lucene::search::similarities::ClassicSimilarity::mids$[::org::apache::lucene::search::similarities::ClassicSimilarity::mid_tf_8c8518d25218b9c5], a0);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace pylucene {
      namespace search {
        namespace similarities {
          static PyObject *t_PythonClassicSimilarity_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_PythonClassicSimilarity_instance_(PyTypeObject *type, PyObject *arg);
          static int t_PythonClassicSimilarity_init_(t_PythonClassicSimilarity *self, PyObject *args, PyObject *kwds);
          static PyObject *t_PythonClassicSimilarity_finalize(t_PythonClassicSimilarity *self);
          static PyObject *t_PythonClassicSimilarity_idf(t_PythonClassicSimilarity *self, PyObject *args);
          static PyObject *t_PythonClassicSimilarity_idfExplain(t_PythonClassicSimilarity *self, PyObject *args);
          static PyObject *t_PythonClassicSimilarity_lengthNorm(t_PythonClassicSimilarity *self, PyObject *args);
          static PyObject *t_PythonClassicSimilarity_pythonExtension(t_PythonClassicSimilarity *self, PyObject *args);
          static PyObject *t_PythonClassicSimilarity_tf(t_PythonClassicSimilarity *self, PyObject *args);
          static jfloat JNICALL t_PythonClassicSimilarity_idf0(JNIEnv *jenv, jobject jobj, jlong a0, jlong a1);
          static jobject JNICALL t_PythonClassicSimilarity_idfExplain1(JNIEnv *jenv, jobject jobj, jobject a0, jobject a1);
          static jfloat JNICALL t_PythonClassicSimilarity_lengthNorm2(JNIEnv *jenv, jobject jobj, jint a0);
          static void JNICALL t_PythonClassicSimilarity_pythonDecRef3(JNIEnv *jenv, jobject jobj);
          static jfloat JNICALL t_PythonClassicSimilarity_tf4(JNIEnv *jenv, jobject jobj, jfloat a0);
          static PyObject *t_PythonClassicSimilarity_get__self(t_PythonClassicSimilarity *self, void *data);
          static PyGetSetDef t_PythonClassicSimilarity__fields_[] = {
            DECLARE_GET_FIELD(t_PythonClassicSimilarity, self),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_PythonClassicSimilarity__methods_[] = {
            DECLARE_METHOD(t_PythonClassicSimilarity, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_PythonClassicSimilarity, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_PythonClassicSimilarity, finalize, METH_NOARGS),
            DECLARE_METHOD(t_PythonClassicSimilarity, idf, METH_VARARGS),
            DECLARE_METHOD(t_PythonClassicSimilarity, idfExplain, METH_VARARGS),
            DECLARE_METHOD(t_PythonClassicSimilarity, lengthNorm, METH_VARARGS),
            DECLARE_METHOD(t_PythonClassicSimilarity, pythonExtension, METH_VARARGS),
            DECLARE_METHOD(t_PythonClassicSimilarity, tf, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          static PyType_Slot PY_TYPE_SLOTS(PythonClassicSimilarity)[] = {
            { Py_tp_methods, t_PythonClassicSimilarity__methods_ },
            { Py_tp_init, (void *) t_PythonClassicSimilarity_init_ },
            { Py_tp_getset, t_PythonClassicSimilarity__fields_ },
            { 0, NULL }
          };

          static PyType_Def *PY_TYPE_BASES(PythonClassicSimilarity)[] = {
            &PY_TYPE_DEF(::org::apache::lucene::search::similarities::ClassicSimilarity),
            NULL
          };

          DEFINE_TYPE(PythonClassicSimilarity, t_PythonClassicSimilarity, PythonClassicSimilarity);

          void t_PythonClassicSimilarity::install(PyObject *module)
          {
            installType(&PY_TYPE(PythonClassicSimilarity), &PY_TYPE_DEF(PythonClassicSimilarity), module, "PythonClassicSimilarity", 1);
          }

          void t_PythonClassicSimilarity::initialize(PyObject *module)
          {
            PyObject_SetAttrString((PyObject *) PY_TYPE(PythonClassicSimilarity), "class_", make_descriptor(PythonClassicSimilarity::initializeClass, 1));
            PyObject_SetAttrString((PyObject *) PY_TYPE(PythonClassicSimilarity), "wrapfn_", make_descriptor(t_PythonClassicSimilarity::wrap_jobject));
            PyObject_SetAttrString((PyObject *) PY_TYPE(PythonClassicSimilarity), "boxfn_", make_descriptor(boxObject));
            jclass cls = env->getClass(PythonClassicSimilarity::initializeClass);
            JNINativeMethod methods[] = {
              { "idf", "(JJ)F", (void *) t_PythonClassicSimilarity_idf0 },
              { "idfExplain", "(Lorg/apache/lucene/search/CollectionStatistics;[Lorg/apache/lucene/search/TermStatistics;)Lorg/apache/lucene/search/Explanation;", (void *) t_PythonClassicSimilarity_idfExplain1 },
              { "lengthNorm", "(I)F", (void *) t_PythonClassicSimilarity_lengthNorm2 },
              { "pythonDecRef", "()V", (void *) t_PythonClassicSimilarity_pythonDecRef3 },
              { "tf", "(F)F", (void *) t_PythonClassicSimilarity_tf4 },
            };
            env->registerNatives(cls, methods, 5);
          }

          static PyObject *t_PythonClassicSimilarity_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, PythonClassicSimilarity::initializeClass, 1)))
              return NULL;
            return t_PythonClassicSimilarity::wrap_Object(PythonClassicSimilarity(((t_PythonClassicSimilarity *) arg)->object.this$));
          }
          static PyObject *t_PythonClassicSimilarity_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, PythonClassicSimilarity::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_PythonClassicSimilarity_init_(t_PythonClassicSimilarity *self, PyObject *args, PyObject *kwds)
          {
            PythonClassicSimilarity object((jobject) NULL);

            INT_CALL(object = PythonClassicSimilarity());
            self->object = object;

            Py_INCREF((PyObject *) self);
            self->object.pythonExtension((jlong) (Py_intptr_t) (void *) self);

            return 0;
          }

          static PyObject *t_PythonClassicSimilarity_finalize(t_PythonClassicSimilarity *self)
          {
            OBJ_CALL(self->object.finalize());
            Py_RETURN_NONE;
          }

          static PyObject *t_PythonClassicSimilarity_idf(t_PythonClassicSimilarity *self, PyObject *args)
          {
            jlong a0;
            jlong a1;
            jfloat result;

            if (!parseArgs(args, "JJ", &a0, &a1))
            {
              OBJ_CALL(result = self->object.idf(a0, a1));
              return PyFloat_FromDouble((double) result);
            }

            return callSuper(PY_TYPE(PythonClassicSimilarity), (PyObject *) self, "idf", args, 2);
          }

          static PyObject *t_PythonClassicSimilarity_idfExplain(t_PythonClassicSimilarity *self, PyObject *args)
          {
            ::org::apache::lucene::search::CollectionStatistics a0((jobject) NULL);
            JArray< ::org::apache::lucene::search::TermStatistics > a1((jobject) NULL);
            ::org::apache::lucene::search::Explanation result((jobject) NULL);

            if (!parseArgs(args, "k[k", ::org::apache::lucene::search::CollectionStatistics::initializeClass, ::org::apache::lucene::search::TermStatistics::initializeClass, &a0, &a1))
            {
              OBJ_CALL(result = self->object.idfExplain(a0, a1));
              return ::org::apache::lucene::search::t_Explanation::wrap_Object(result);
            }

            return callSuper(PY_TYPE(PythonClassicSimilarity), (PyObject *) self, "idfExplain", args, 2);
          }

          static PyObject *t_PythonClassicSimilarity_lengthNorm(t_PythonClassicSimilarity *self, PyObject *args)
          {
            jint a0;
            jfloat result;

            if (!parseArgs(args, "I", &a0))
            {
              OBJ_CALL(result = self->object.lengthNorm(a0));
              return PyFloat_FromDouble((double) result);
            }

            return callSuper(PY_TYPE(PythonClassicSimilarity), (PyObject *) self, "lengthNorm", args, 2);
          }

          static PyObject *t_PythonClassicSimilarity_pythonExtension(t_PythonClassicSimilarity *self, PyObject *args)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 0:
              {
                jlong result;
                OBJ_CALL(result = self->object.pythonExtension());
                return PyLong_FromLongLong((PY_LONG_LONG) result);
              }
              break;
             case 1:
              {
                jlong a0;

                if (!parseArgs(args, "J", &a0))
                {
                  OBJ_CALL(self->object.pythonExtension(a0));
                  Py_RETURN_NONE;
                }
              }
            }

            PyErr_SetArgsError((PyObject *) self, "pythonExtension", args);
            return NULL;
          }

          static PyObject *t_PythonClassicSimilarity_tf(t_PythonClassicSimilarity *self, PyObject *args)
          {
            jfloat a0;
            jfloat result;

            if (!parseArgs(args, "F", &a0))
            {
              OBJ_CALL(result = self->object.tf(a0));
              return PyFloat_FromDouble((double) result);
            }

            return callSuper(PY_TYPE(PythonClassicSimilarity), (PyObject *) self, "tf", args, 2);
          }

          static jfloat JNICALL t_PythonClassicSimilarity_idf0(JNIEnv *jenv, jobject jobj, jlong a0, jlong a1)
          {
            jlong ptr = jenv->CallLongMethod(jobj, PythonClassicSimilarity::mids$[PythonClassicSimilarity::mid_pythonExtension_2e5ae9edcb9b072f]);
            PyObject *obj = (PyObject *) (Py_intptr_t) ptr;
            PythonGIL gil(jenv);
            jfloat value;
            PyObject *result = PyObject_CallMethod(obj, "idf", "LL", (long long) a0, (long long) a1);
            if (!result)
              throwPythonError();
            else if (parseArg(result, "F", &value))
            {
              throwTypeError("idf", result);
              Py_DECREF(result);
            }
            else
            {
              Py_DECREF(result);
              return value;
            }

            return (jfloat) 0;
          }

          static jobject JNICALL t_PythonClassicSimilarity_idfExplain1(JNIEnv *jenv, jobject jobj, jobject a0, jobject a1)
          {
            jlong ptr = jenv->CallLongMethod(jobj, PythonClassicSimilarity::mids$[PythonClassicSimilarity::mid_pythonExtension_2e5ae9edcb9b072f]);
            PyObject *obj = (PyObject *) (Py_intptr_t) ptr;
            PythonGIL gil(jenv);
            ::org::apache::lucene::search::Explanation value((jobject) NULL);
            PyObject *o0 = ::org::apache::lucene::search::t_CollectionStatistics::wrap_Object(::org::apache::lucene::search::CollectionStatistics(a0));
            PyObject *o1 = JArray<jobject>(a1).wrap(::org::apache::lucene::search::t_TermStatistics::wrap_jobject);
            PyObject *result = PyObject_CallMethod(obj, "idfExplain", "OO", o0, o1);
            Py_DECREF(o0);
            Py_DECREF(o1);
            if (!result)
              throwPythonError();
            else if (parseArg(result, "k", ::org::apache::lucene::search::Explanation::initializeClass, &value))
            {
              throwTypeError("idfExplain", result);
              Py_DECREF(result);
            }
            else
            {
              jobj = jenv->NewLocalRef(value.this$);
              Py_DECREF(result);
              return jobj;
            }

            return (jobject) NULL;
          }

          static jfloat JNICALL t_PythonClassicSimilarity_lengthNorm2(JNIEnv *jenv, jobject jobj, jint a0)
          {
            jlong ptr = jenv->CallLongMethod(jobj, PythonClassicSimilarity::mids$[PythonClassicSimilarity::mid_pythonExtension_2e5ae9edcb9b072f]);
            PyObject *obj = (PyObject *) (Py_intptr_t) ptr;
            PythonGIL gil(jenv);
            jfloat value;
            PyObject *result = PyObject_CallMethod(obj, "lengthNorm", "i", (int) a0);
            if (!result)
              throwPythonError();
            else if (parseArg(result, "F", &value))
            {
              throwTypeError("lengthNorm", result);
              Py_DECREF(result);
            }
            else
            {
              Py_DECREF(result);
              return value;
            }

            return (jfloat) 0;
          }

          static void JNICALL t_PythonClassicSimilarity_pythonDecRef3(JNIEnv *jenv, jobject jobj)
          {
            jlong ptr = jenv->CallLongMethod(jobj, PythonClassicSimilarity::mids$[PythonClassicSimilarity::mid_pythonExtension_2e5ae9edcb9b072f]);
            PyObject *obj = (PyObject *) (Py_intptr_t) ptr;

            if (obj != NULL)
            {
              jenv->CallVoidMethod(jobj, PythonClassicSimilarity::mids$[PythonClassicSimilarity::mid_pythonExtension_9c778c9bce6694df], (jlong) 0);
              env->finalizeObject(jenv, obj);
            }
          }

          static jfloat JNICALL t_PythonClassicSimilarity_tf4(JNIEnv *jenv, jobject jobj, jfloat a0)
          {
            jlong ptr = jenv->CallLongMethod(jobj, PythonClassicSimilarity::mids$[PythonClassicSimilarity::mid_pythonExtension_2e5ae9edcb9b072f]);
            PyObject *obj = (PyObject *) (Py_intptr_t) ptr;
            PythonGIL gil(jenv);
            jfloat value;
            PyObject *result = PyObject_CallMethod(obj, "tf", "f", (float) a0);
            if (!result)
              throwPythonError();
            else if (parseArg(result, "F", &value))
            {
              throwTypeError("tf", result);
              Py_DECREF(result);
            }
            else
            {
              Py_DECREF(result);
              return value;
            }

            return (jfloat) 0;
          }

          static PyObject *t_PythonClassicSimilarity_get__self(t_PythonClassicSimilarity *self, void *data)
          {
            jlong ptr;
            OBJ_CALL(ptr = self->object.pythonExtension());
            PyObject *obj = (PyObject *) (Py_intptr_t) ptr;

            if (obj != NULL)
            {
              Py_INCREF(obj);
              return obj;
            }
            else
              Py_RETURN_NONE;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/core/WhitespaceAnalyzer.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace core {

          ::java::lang::Class *WhitespaceAnalyzer::class$ = NULL;
          jmethodID *WhitespaceAnalyzer::mids$ = NULL;
          bool WhitespaceAnalyzer::live$ = false;

          jclass WhitespaceAnalyzer::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/core/WhitespaceAnalyzer");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_f2cc1bce94666404] = env->getMethodID(cls, "<init>", "()V");
              mids$[mid_init$_040c4cd0390c5aff] = env->getMethodID(cls, "<init>", "(I)V");
              mids$[mid_createComponents_c22fd244b0553c1e] = env->getMethodID(cls, "createComponents", "(Ljava/lang/String;)Lorg/apache/lucene/analysis/Analyzer$TokenStreamComponents;");

              class$ = new ::java::lang::Class(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          WhitespaceAnalyzer::WhitespaceAnalyzer() : ::org::apache::lucene::analysis::Analyzer(env->newObject(initializeClass, &mids$, mid_init$_f2cc1bce94666404)) {}

          WhitespaceAnalyzer::WhitespaceAnalyzer(jint a0) : ::org::apache::lucene::analysis::Analyzer(env->newObject(initializeClass, &mids$, mid_init$_040c4cd0390c5aff, a0)) {}
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace core {
          static PyObject *t_WhitespaceAnalyzer_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_WhitespaceAnalyzer_instance_(PyTypeObject *type, PyObject *arg);
          static int t_WhitespaceAnalyzer_init_(t_WhitespaceAnalyzer *self, PyObject *args, PyObject *kwds);

          static PyMethodDef t_WhitespaceAnalyzer__methods_[] = {
            DECLARE_METHOD(t_WhitespaceAnalyzer, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_WhitespaceAnalyzer, instance_, METH_O | METH_CLASS),
            { NULL, NULL, 0, NULL }
          };

          static PyType_Slot PY_TYPE_SLOTS(WhitespaceAnalyzer)[] = {
            { Py_tp_methods, t_WhitespaceAnalyzer__methods_ },
            { Py_tp_init, (void *) t_WhitespaceAnalyzer_init_ },
            { 0, NULL }
          };

          static PyType_Def *PY_TYPE_BASES(WhitespaceAnalyzer)[] = {
            &PY_TYPE_DEF(::org::apache::lucene::analysis::Analyzer),
            NULL
          };

          DEFINE_TYPE(WhitespaceAnalyzer, t_WhitespaceAnalyzer, WhitespaceAnalyzer);

          void t_WhitespaceAnalyzer::install(PyObject *module)
          {
            installType(&PY_TYPE(WhitespaceAnalyzer), &PY_TYPE_DEF(WhitespaceAnalyzer), module, "WhitespaceAnalyzer", 0);
          }

          void t_WhitespaceAnalyzer::initialize(PyObject *module)
          {
            PyObject_SetAttrString((PyObject *) PY_TYPE(WhitespaceAnalyzer), "class_", make_descriptor(WhitespaceAnalyzer::initializeClass, 1));
            PyObject_SetAttrString((PyObject *) PY_TYPE(WhitespaceAnalyzer), "wrapfn_", make_descriptor(t_WhitespaceAnalyzer::wrap_jobject));
            PyObject_SetAttrString((PyObject *) PY_TYPE(WhitespaceAnalyzer), "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_WhitespaceAnalyzer_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, WhitespaceAnalyzer::initializeClass, 1)))
              return NULL;
            return t_WhitespaceAnalyzer::wrap_Object(WhitespaceAnalyzer(((t_WhitespaceAnalyzer *) arg)->object.this$));
          }
          static PyObject *t_WhitespaceAnalyzer_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, WhitespaceAnalyzer::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_WhitespaceAnalyzer_init_(t_WhitespaceAnalyzer *self, PyObject *args, PyObject *kwds)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 0:
              {
                WhitespaceAnalyzer object((jobject) NULL);

                INT_CALL(object = WhitespaceAnalyzer());
                self->object = object;
                break;
              }
             case 1:
              {
                jint a0;
                WhitespaceAnalyzer object((jobject) NULL);

                if (!parseArgs(args, "I", &a0))
                {
                  INT_CALL(object = WhitespaceAnalyzer(a0));
                  self->object = object;
                  break;
                }
              }
             default:
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/DisjunctionMaxQuery.h"
#include "org/apache/lucene/index/IndexReader.h"
#include "java/util/Collection.h"
#include "org/apache/lucene/search/IndexSearcher.h"
#include "java/lang/Class.h"
#include "java/lang/Object.h"
#include "java/lang/Iterable.h"
#include "java/lang/String.h"
#include "java/util/Iterator.h"
#include "java/io/IOException.h"
#include "java/util/List.h"
#include "org/apache/lucene/search/QueryVisitor.h"
#include "org/apache/lucene/search/ScoreMode.h"
#include "org/apache/lucene/search/Weight.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {

        ::java::lang::Class *DisjunctionMaxQuery::class$ = NULL;
        jmethodID *DisjunctionMaxQuery::mids$ = NULL;
        bool DisjunctionMaxQuery::live$ = false;

        jclass DisjunctionMaxQuery::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/search/DisjunctionMaxQuery");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_4cbff39777e90f6f] = env->getMethodID(cls, "<init>", "(Ljava/util/Collection;F)V");
            mids$[mid_createWeight_f0ef0b5ea369ac06] = env->getMethodID(cls, "createWeight", "(Lorg/apache/lucene/search/IndexSearcher;Lorg/apache/lucene/search/ScoreMode;F)Lorg/apache/lucene/search/Weight;");
            mids$[mid_equals_8b72f2dcdde6fd1d] = env->getMethodID(cls, "equals", "(Ljava/lang/Object;)Z");
            mids$[mid_getDisjuncts_49ec78390f08338a] = env->getMethodID(cls, "getDisjuncts", "()Ljava/util/List;");
            mids$[mid_getTieBreakerMultiplier_58aec2b64dff50c8] = env->getMethodID(cls, "getTieBreakerMultiplier", "()F");
            mids$[mid_hashCode_9972fcc56b44e79d] = env->getMethodID(cls, "hashCode", "()I");
            mids$[mid_iterator_233a192dadb0917d] = env->getMethodID(cls, "iterator", "()Ljava/util/Iterator;");
            mids$[mid_rewrite_bb52f19a8254555c] = env->getMethodID(cls, "rewrite", "(Lorg/apache/lucene/index/IndexReader;)Lorg/apache/lucene/search/Query;");
            mids$[mid_toString_9bfa75c9f141b67f] = env->getMethodID(cls, "toString", "(Ljava/lang/String;)Ljava/lang/String;");
            mids$[mid_visit_f9e6207006c5b6c1] = env->getMethodID(cls, "visit", "(Lorg/apache/lucene/search/QueryVisitor;)V");

            class$ = new ::java::lang::Class(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        DisjunctionMaxQuery::DisjunctionMaxQuery(const ::java::util::Collection & a0, jfloat a1) : ::org::apache::lucene::search::Query(env->newObject(initializeClass, &mids$, mid_init$_4cbff39777e90f6f, a0.this$, a1)) {}

        ::org::apache::lucene::search::Weight DisjunctionMaxQuery::createWeight(const ::org::apache::lucene::search::IndexSearcher & a0, const ::org::apache::lucene::search::ScoreMode & a1, jfloat a2) const
        {
          return ::org::apache::lucene::search::Weight(env->callObjectMethod(this$, mids$[mid_createWeight_f0ef0b5ea369ac06], a0.this$, a1.this$, a2));
        }

        jboolean DisjunctionMaxQuery::equals(const ::java::lang::Object & a0) const
        {
          return env->callBooleanMethod(this$, mids$[mid_equals_8b72f2dcdde6fd1d], a0.this$);
        }

        ::java::util::List DisjunctionMaxQuery::getDisjuncts() const
        {
          return ::java::util::List(env->callObjectMethod(this$, mids$[mid_getDisjuncts_49ec78390f08338a]));
        }

        jfloat DisjunctionMaxQuery::getTieBreakerMultiplier() const
        {
          return env->callFloatMethod(this$, mids$[mid_getTieBreakerMultiplier_58aec2b64dff50c8]);
        }

        jint DisjunctionMaxQuery::hashCode() const
        {
          return env->callIntMethod(this$, mids$[mid_hashCode_9972fcc56b44e79d]);
        }

        ::java::util::Iterator DisjunctionMaxQuery::iterator() const
        {
          return ::java::util::Iterator(env->callObjectMethod(this$, mids$[mid_iterator_233a192dadb0917d]));
        }

        ::org::apache::lucene::search::Query DisjunctionMaxQuery::rewrite(const ::org::apache::lucene::index::IndexReader & a0) const
        {
          return ::org::apache::lucene::search::Query(env->callObjectMethod(this$, mids$[mid_rewrite_bb52f19a8254555c], a0.this$));
        }

        ::java::lang::String DisjunctionMaxQuery::toString(const ::java::lang::String & a0) const
        {
          return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_9bfa75c9f141b67f], a0.this$));
        }

        void DisjunctionMaxQuery::visit(const ::org::apache::lucene::search::QueryVisitor & a0) const
        {
          env->callVoidMethod(this$, mids$[mid_visit_f9e6207006c5b6c1], a0.this$);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        static PyObject *t_DisjunctionMaxQuery_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_DisjunctionMaxQuery_instance_(PyTypeObject *type, PyObject *arg);
        static int t_DisjunctionMaxQuery_init_(t_DisjunctionMaxQuery *self, PyObject *args, PyObject *kwds);
        static PyObject *t_DisjunctionMaxQuery_createWeight(t_DisjunctionMaxQuery *self, PyObject *args);
        static PyObject *t_DisjunctionMaxQuery_equals(t_DisjunctionMaxQuery *self, PyObject *args);
        static PyObject *t_DisjunctionMaxQuery_getDisjuncts(t_DisjunctionMaxQuery *self);
        static PyObject *t_DisjunctionMaxQuery_getTieBreakerMultiplier(t_DisjunctionMaxQuery *self);
        static PyObject *t_DisjunctionMaxQuery_hashCode(t_DisjunctionMaxQuery *self, PyObject *args);
        static PyObject *t_DisjunctionMaxQuery_iterator(t_DisjunctionMaxQuery *self);
        static PyObject *t_DisjunctionMaxQuery_rewrite(t_DisjunctionMaxQuery *self, PyObject *args);
        static PyObject *t_DisjunctionMaxQuery_toString(t_DisjunctionMaxQuery *self, PyObject *args);
        static PyObject *t_DisjunctionMaxQuery_visit(t_DisjunctionMaxQuery *self, PyObject *args);
        static PyObject *t_DisjunctionMaxQuery_get__disjuncts(t_DisjunctionMaxQuery *self, void *data);
        static PyObject *t_DisjunctionMaxQuery_get__tieBreakerMultiplier(t_DisjunctionMaxQuery *self, void *data);
        static PyGetSetDef t_DisjunctionMaxQuery__fields_[] = {
          DECLARE_GET_FIELD(t_DisjunctionMaxQuery, disjuncts),
          DECLARE_GET_FIELD(t_DisjunctionMaxQuery, tieBreakerMultiplier),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_DisjunctionMaxQuery__methods_[] = {
          DECLARE_METHOD(t_DisjunctionMaxQuery, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_DisjunctionMaxQuery, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_DisjunctionMaxQuery, createWeight, METH_VARARGS),
          DECLARE_METHOD(t_DisjunctionMaxQuery, equals, METH_VARARGS),
          DECLARE_METHOD(t_DisjunctionMaxQuery, getDisjuncts, METH_NOARGS),
          DECLARE_METHOD(t_DisjunctionMaxQuery, getTieBreakerMultiplier, METH_NOARGS),
          DECLARE_METHOD(t_DisjunctionMaxQuery, hashCode, METH_VARARGS),
          DECLARE_METHOD(t_DisjunctionMaxQuery, iterator, METH_NOARGS),
          DECLARE_METHOD(t_DisjunctionMaxQuery, rewrite, METH_VARARGS),
          DECLARE_METHOD(t_DisjunctionMaxQuery, toString, METH_VARARGS),
          DECLARE_METHOD(t_DisjunctionMaxQuery, visit, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        static PyType_Slot PY_TYPE_SLOTS(DisjunctionMaxQuery)[] = {
          { Py_tp_methods, t_DisjunctionMaxQuery__methods_ },
          { Py_tp_init, (void *) t_DisjunctionMaxQuery_init_ },
          { Py_tp_getset, t_DisjunctionMaxQuery__fields_ },
          { Py_tp_iter, (void *) ((PyObject *(*)(t_DisjunctionMaxQuery *)) get_iterator< t_DisjunctionMaxQuery >) },
          { Py_tp_iternext, (void *) 0 },
          { 0, NULL }
        };

        static PyType_Def *PY_TYPE_BASES(DisjunctionMaxQuery)[] = {
          &PY_TYPE_DEF(::org::apache::lucene::search::Query),
          NULL
        };

        DEFINE_TYPE(DisjunctionMaxQuery, t_DisjunctionMaxQuery, DisjunctionMaxQuery);

        void t_DisjunctionMaxQuery::install(PyObject *module)
        {
          installType(&PY_TYPE(DisjunctionMaxQuery), &PY_TYPE_DEF(DisjunctionMaxQuery), module, "DisjunctionMaxQuery", 0);
        }

        void t_DisjunctionMaxQuery::initialize(PyObject *module)
        {
          PyObject_SetAttrString((PyObject *) PY_TYPE(DisjunctionMaxQuery), "class_", make_descriptor(DisjunctionMaxQuery::initializeClass, 1));
          PyObject_SetAttrString((PyObject *) PY_TYPE(DisjunctionMaxQuery), "wrapfn_", make_descriptor(t_DisjunctionMaxQuery::wrap_jobject));
          PyObject_SetAttrString((PyObject *) PY_TYPE(DisjunctionMaxQuery), "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_DisjunctionMaxQuery_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, DisjunctionMaxQuery::initializeClass, 1)))
            return NULL;
          return t_DisjunctionMaxQuery::wrap_Object(DisjunctionMaxQuery(((t_DisjunctionMaxQuery *) arg)->object.this$));
        }
        static PyObject *t_DisjunctionMaxQuery_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, DisjunctionMaxQuery::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_DisjunctionMaxQuery_init_(t_DisjunctionMaxQuery *self, PyObject *args, PyObject *kwds)
        {
          ::java::util::Collection a0((jobject) NULL);
          PyTypeObject **p0;
          jfloat a1;
          DisjunctionMaxQuery object((jobject) NULL);

          if (!parseArgs(args, "KF", ::java::util::Collection::initializeClass, &a0, &p0, ::java::util::t_Collection::parameters_, &a1))
          {
            INT_CALL(object = DisjunctionMaxQuery(a0, a1));
            self->object = object;
          }
          else
          {
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }

        static PyObject *t_DisjunctionMaxQuery_createWeight(t_DisjunctionMaxQuery *self, PyObject *args)
        {
          ::org::apache::lucene::search::IndexSearcher a0((jobject) NULL);
          ::org::apache::lucene::search::ScoreMode a1((jobject) NULL);
          PyTypeObject **p1;
          jfloat a2;
          ::org::apache::lucene::search::Weight result((jobject) NULL);

          if (!parseArgs(args, "kKF", ::org::apache::lucene::search::IndexSearcher::initializeClass, ::org::apache::lucene::search::ScoreMode::initializeClass, &a0, &a1, &p1, ::org::apache::lucene::search::t_ScoreMode::parameters_, &a2))
          {
            OBJ_CALL(result = self->object.createWeight(a0, a1, a2));
            return ::org::apache::lucene::search::t_Weight::wrap_Object(result);
          }

          return callSuper(PY_TYPE(DisjunctionMaxQuery), (PyObject *) self, "createWeight", args, 2);
        }

        static PyObject *t_DisjunctionMaxQuery_equals(t_DisjunctionMaxQuery *self, PyObject *args)
        {
          ::java::lang::Object a0((jobject) NULL);
          jboolean result;

          if (!parseArgs(args, "o", &a0))
          {
            OBJ_CALL(result = self->object.equals(a0));
            Py_RETURN_BOOL(result);
          }

          return callSuper(PY_TYPE(DisjunctionMaxQuery), (PyObject *) self, "equals", args, 2);
        }

        static PyObject *t_DisjunctionMaxQuery_getDisjuncts(t_DisjunctionMaxQuery *self)
        {
          ::java::util::List result((jobject) NULL);
          OBJ_CALL(result = self->object.getDisjuncts());
          return ::java::util::t_List::wrap_Object(result, ::org::apache::lucene::search::PY_TYPE(Query));
        }

        static PyObject *t_DisjunctionMaxQuery_getTieBreakerMultiplier(t_DisjunctionMaxQuery *self)
        {
          jfloat result;
          OBJ_CALL(result = self->object.getTieBreakerMultiplier());
          return PyFloat_FromDouble((double) result);
        }

        static PyObject *t_DisjunctionMaxQuery_hashCode(t_DisjunctionMaxQuery *self, PyObject *args)
        {
          jint result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.hashCode());
            return PyLong_FromLong((long) result);
          }

          return callSuper(PY_TYPE(DisjunctionMaxQuery), (PyObject *) self, "hashCode", args, 2);
        }

        static PyObject *t_DisjunctionMaxQuery_iterator(t_DisjunctionMaxQuery *self)
        {
          ::java::util::Iterator result((jobject) NULL);
          OBJ_CALL(result = self->object.iterator());
          return ::java::util::t_Iterator::wrap_Object(result, ::org::apache::lucene::search::PY_TYPE(Query));
        }

        static PyObject *t_DisjunctionMaxQuery_rewrite(t_DisjunctionMaxQuery *self, PyObject *args)
        {
          ::org::apache::lucene::index::IndexReader a0((jobject) NULL);
          ::org::apache::lucene::search::Query result((jobject) NULL);

          if (!parseArgs(args, "k", ::org::apache::lucene::index::IndexReader::initializeClass, &a0))
          {
            OBJ_CALL(result = self->object.rewrite(a0));
            return ::org::apache::lucene::search::t_Query::wrap_Object(result);
          }

          return callSuper(PY_TYPE(DisjunctionMaxQuery), (PyObject *) self, "rewrite", args, 2);
        }

        static PyObject *t_DisjunctionMaxQuery_toString(t_DisjunctionMaxQuery *self, PyObject *args)
        {
          ::java::lang::String a0((jobject) NULL);
          ::java::lang::String result((jobject) NULL);

          if (!parseArgs(args, "s", &a0))
          {
            OBJ_CALL(result = self->object.toString(a0));
            return j2p(result);
          }

          return callSuper(PY_TYPE(DisjunctionMaxQuery), (PyObject *) self, "toString", args, 2);
        }

        static PyObject *t_DisjunctionMaxQuery_visit(t_DisjunctionMaxQuery *self, PyObject *args)
        {
          ::org::apache::lucene::search::QueryVisitor a0((jobject) NULL);

          if (!parseArgs(args, "k", ::org::apache::lucene::search::QueryVisitor::initializeClass, &a0))
          {
            OBJ_CALL(self->object.visit(a0));
            Py_RETURN_NONE;
          }

          return callSuper(PY_TYPE(DisjunctionMaxQuery), (PyObject *) self, "visit", args, 2);
        }

        static PyObject *t_DisjunctionMaxQuery_get__disjuncts(t_DisjunctionMaxQuery *self, void *data)
        {
          ::java::util::List value((jobject) NULL);
          OBJ_CALL(value = self->object.getDisjuncts());
          return ::java::util::t_List::wrap_Object(value);
        }

        static PyObject *t_DisjunctionMaxQuery_get__tieBreakerMultiplier(t_DisjunctionMaxQuery *self, void *data)
        {
          jfloat value;
          OBJ_CALL(value = self->object.getTieBreakerMultiplier());
          return PyFloat_FromDouble((double) value);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queries/function/valuesource/MaxFloatFunction.h"
#include "org/apache/lucene/queries/function/ValueSource.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queries {
        namespace function {
          namespace valuesource {

            ::java::lang::Class *MaxFloatFunction::class$ = NULL;
            jmethodID *MaxFloatFunction::mids$ = NULL;
            bool MaxFloatFunction::live$ = false;

            jclass MaxFloatFunction::initializeClass(bool getOnly)
            {
              if (getOnly)
                return (jclass) (live$ ? class$->this$ : NULL);
              if (class$ == NULL)
              {
                jclass cls = (jclass) env->findClass("org/apache/lucene/queries/function/valuesource/MaxFloatFunction");

                mids$ = new jmethodID[max_mid];
                mids$[mid_init$_103f1bad010d62d9] = env->getMethodID(cls, "<init>", "([Lorg/apache/lucene/queries/function/ValueSource;)V");
                mids$[mid_func_e36b2f77f3be25c3] = env->getMethodID(cls, "func", "(I[Lorg/apache/lucene/queries/function/FunctionValues;)F");
                mids$[mid_name_db9b55ba01e03e4b] = env->getMethodID(cls, "name", "()Ljava/lang/String;");
                mids$[mid_exists_79d91b981374bcba] = env->getMethodID(cls, "exists", "(I[Lorg/apache/lucene/queries/function/FunctionValues;)Z");

                class$ = new ::java::lang::Class(cls);
                live$ = true;
              }
              return (jclass) class$->this$;
            }

            MaxFloatFunction::MaxFloatFunction(const JArray< ::org::apache::lucene::queries::function::ValueSource > & a0) : ::org::apache::lucene::queries::function::valuesource::MultiFloatFunction(env->newObject(initializeClass, &mids$, mid_init$_103f1bad010d62d9, a0.this$)) {}
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queries {
        namespace function {
          namespace valuesource {
            static PyObject *t_MaxFloatFunction_cast_(PyTypeObject *type, PyObject *arg);
            static PyObject *t_MaxFloatFunction_instance_(PyTypeObject *type, PyObject *arg);
            static int t_MaxFloatFunction_init_(t_MaxFloatFunction *self, PyObject *args, PyObject *kwds);

            static PyMethodDef t_MaxFloatFunction__methods_[] = {
              DECLARE_METHOD(t_MaxFloatFunction, cast_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_MaxFloatFunction, instance_, METH_O | METH_CLASS),
              { NULL, NULL, 0, NULL }
            };

            static PyType_Slot PY_TYPE_SLOTS(MaxFloatFunction)[] = {
              { Py_tp_methods, t_MaxFloatFunction__methods_ },
              { Py_tp_init, (void *) t_MaxFloatFunction_init_ },
              { 0, NULL }
            };

            static PyType_Def *PY_TYPE_BASES(MaxFloatFunction)[] = {
              &PY_TYPE_DEF(::org::apache::lucene::queries::function::valuesource::MultiFloatFunction),
              NULL
            };

            DEFINE_TYPE(MaxFloatFunction, t_MaxFloatFunction, MaxFloatFunction);

            void t_MaxFloatFunction::install(PyObject *module)
            {
              installType(&PY_TYPE(MaxFloatFunction), &PY_TYPE_DEF(MaxFloatFunction), module, "MaxFloatFunction", 0);
            }

            void t_MaxFloatFunction::initialize(PyObject *module)
            {
              PyObject_SetAttrString((PyObject *) PY_TYPE(MaxFloatFunction), "class_", make_descriptor(MaxFloatFunction::initializeClass, 1));
              PyObject_SetAttrString((PyObject *) PY_TYPE(MaxFloatFunction), "wrapfn_", make_descriptor(t_MaxFloatFunction::wrap_jobject));
              PyObject_SetAttrString((PyObject *) PY_TYPE(MaxFloatFunction), "boxfn_", make_descriptor(boxObject));
            }

            static PyObject *t_MaxFloatFunction_cast_(PyTypeObject *type, PyObject *arg)
            {
              if (!(arg = castCheck(arg, MaxFloatFunction::initializeClass, 1)))
                return NULL;
              return t_MaxFloatFunction::wrap_Object(MaxFloatFunction(((t_MaxFloatFunction *) arg)->object.this$));
            }
            static PyObject *t_MaxFloatFunction_instance_(PyTypeObject *type, PyObject *arg)
            {
              if (!castCheck(arg, MaxFloatFunction::initializeClass, 0))
                Py_RETURN_FALSE;
              Py_RETURN_TRUE;
            }

            static int t_MaxFloatFunction_init_(t_MaxFloatFunction *self, PyObject *args, PyObject *kwds)
            {
              JArray< ::org::apache::lucene::queries::function::ValueSource > a0((jobject) NULL);
              MaxFloatFunction object((jobject) NULL);

              if (!parseArgs(args, "[k", ::org::apache::lucene::queries::function::ValueSource::initializeClass, &a0))
              {
                INT_CALL(object = MaxFloatFunction(a0));
                self->object = object;
              }
              else
              {
                PyErr_SetArgsError((PyObject *) self, "__init__", args);
                return -1;
              }

              return 0;
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/expressions/js/JavascriptParser$ExternalContext.h"
#include "java/lang/Class.h"
#include "java/lang/Object.h"
#include "java/util/List.h"
#include "org/antlr/v4/runtime/Token.h"
#include "org/antlr/v4/runtime/atn/ParserATNSimulator.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace expressions {
        namespace js {

          ::java::lang::Class *JavascriptParser$ExternalContext::class$ = NULL;
          jmethodID *JavascriptParser$ExternalContext::mids$ = NULL;
          bool JavascriptParser$ExternalContext::live$ = false;

          jclass JavascriptParser$ExternalContext::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/expressions/js/JavascriptParser$ExternalContext");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_5b630188893587b5] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/expressions/js/JavascriptParser$ExpressionContext;)V");
              mids$[mid_expression_49ec78390f08338a] = env->getMethodID(cls, "expression", "()Ljava/util/List;");
              mids$[mid_expression_a4fb3fdc55d1c64a] = env->getMethodID(cls, "expression", "(I)Lorg/apache/lucene/expressions/js/JavascriptParser$ExpressionContext;");

              class$ = new ::java::lang::Class(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          JavascriptParser$ExternalContext::JavascriptParser$ExternalContext(const ::org::apache::lucene::expressions::js::JavascriptParser$ExpressionContext & a0) : ::org::apache::lucene::expressions::js::JavascriptParser$ExpressionContext(env->newObject(initializeClass, &mids$, mid_init$_5b630188893587b5, a0.this$)) {}

          ::java::util::List JavascriptParser$ExternalContext::expression() const
          {
            return ::java::util::List(env->callObjectMethod(this$, mids$[mid_expression_49ec78390f08338a]));
          }

          ::org::apache::lucene::expressions::js::JavascriptParser$ExpressionContext JavascriptParser$ExternalContext::expression(jint a0) const
          {
            return ::org::apache::lucene::expressions::js::JavascriptParser$ExpressionContext(env->callObjectMethod(this$, mids$[mid_expression_a4fb3fdc55d1c64a], a0));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace expressions {
        namespace js {
          static PyObject *t_JavascriptParser$ExternalContext_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_JavascriptParser$ExternalContext_instance_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_JavascriptParser$ExternalContext_of_(t_JavascriptParser$ExternalContext *self, PyObject *args);
          static int t_JavascriptParser$ExternalContext_init_(t_JavascriptParser$ExternalContext *self, PyObject *args, PyObject *kwds);
          static PyObject *t_JavascriptParser$ExternalContext_expression(t_JavascriptParser$ExternalContext *self, PyObject *args);
          static PyObject *t_JavascriptParser$ExternalContext_get__parameters_(t_JavascriptParser$ExternalContext *self, void *data);
          static PyGetSetDef t_JavascriptParser$ExternalContext__fields_[] = {
            DECLARE_GET_FIELD(t_JavascriptParser$ExternalContext, parameters_),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_JavascriptParser$ExternalContext__methods_[] = {
            DECLARE_METHOD(t_JavascriptParser$ExternalContext, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_JavascriptParser$ExternalContext, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_JavascriptParser$ExternalContext, of_, METH_VARARGS),
            DECLARE_METHOD(t_JavascriptParser$ExternalContext, expression, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          static PyType_Slot PY_TYPE_SLOTS(JavascriptParser$ExternalContext)[] = {
            { Py_tp_methods, t_JavascriptParser$ExternalContext__methods_ },
            { Py_tp_init, (void *) t_JavascriptParser$ExternalContext_init_ },
            { Py_tp_getset, t_JavascriptParser$ExternalContext__fields_ },
            { 0, NULL }
          };

          static PyType_Def *PY_TYPE_BASES(JavascriptParser$ExternalContext)[] = {
            &PY_TYPE_DEF(::org::apache::lucene::expressions::js::JavascriptParser$ExpressionContext),
            NULL
          };

          DEFINE_TYPE(JavascriptParser$ExternalContext, t_JavascriptParser$ExternalContext, JavascriptParser$ExternalContext);
          PyObject *t_JavascriptParser$ExternalContext::wrap_Object(const JavascriptParser$ExternalContext& object, PyTypeObject *p0, PyTypeObject *p1)
          {
            PyObject *obj = t_JavascriptParser$ExternalContext::wrap_Object(object);
            if (obj != NULL && obj != Py_None)
            {
              t_JavascriptParser$ExternalContext *self = (t_JavascriptParser$ExternalContext *) obj;
              self->parameters[0] = p0;
              self->parameters[1] = p1;
            }
            return obj;
          }

          PyObject *t_JavascriptParser$ExternalContext::wrap_jobject(const jobject& object, PyTypeObject *p0, PyTypeObject *p1)
          {
            PyObject *obj = t_JavascriptParser$ExternalContext::wrap_jobject(object);
            if (obj != NULL && obj != Py_None)
            {
              t_JavascriptParser$ExternalContext *self = (t_JavascriptParser$ExternalContext *) obj;
              self->parameters[0] = p0;
              self->parameters[1] = p1;
            }
            return obj;
          }

          void t_JavascriptParser$ExternalContext::install(PyObject *module)
          {
            installType(&PY_TYPE(JavascriptParser$ExternalContext), &PY_TYPE_DEF(JavascriptParser$ExternalContext), module, "JavascriptParser$ExternalContext", 0);
          }

          void t_JavascriptParser$ExternalContext::initialize(PyObject *module)
          {
            PyObject_SetAttrString((PyObject *) PY_TYPE(JavascriptParser$ExternalContext), "class_", make_descriptor(JavascriptParser$ExternalContext::initializeClass, 1));
            PyObject_SetAttrString((PyObject *) PY_TYPE(JavascriptParser$ExternalContext), "wrapfn_", make_descriptor(t_JavascriptParser$ExternalContext::wrap_jobject));
            PyObject_SetAttrString((PyObject *) PY_TYPE(JavascriptParser$ExternalContext), "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_JavascriptParser$ExternalContext_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, JavascriptParser$ExternalContext::initializeClass, 1)))
              return NULL;
            return t_JavascriptParser$ExternalContext::wrap_Object(JavascriptParser$ExternalContext(((t_JavascriptParser$ExternalContext *) arg)->object.this$));
          }
          static PyObject *t_JavascriptParser$ExternalContext_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, JavascriptParser$ExternalContext::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static PyObject *t_JavascriptParser$ExternalContext_of_(t_JavascriptParser$ExternalContext *self, PyObject *args)
          {
            if (!parseArg(args, "T", 2, &(self->parameters)))
              Py_RETURN_SELF;
            return PyErr_SetArgsError((PyObject *) self, "of_", args);
          }

          static int t_JavascriptParser$ExternalContext_init_(t_JavascriptParser$ExternalContext *self, PyObject *args, PyObject *kwds)
          {
            ::org::apache::lucene::expressions::js::JavascriptParser$ExpressionContext a0((jobject) NULL);
            PyTypeObject **p0;
            JavascriptParser$ExternalContext object((jobject) NULL);

            if (!parseArgs(args, "K", ::org::apache::lucene::expressions::js::JavascriptParser$ExpressionContext::initializeClass, &a0, &p0, ::org::apache::lucene::expressions::js::t_JavascriptParser$ExpressionContext::parameters_))
            {
              INT_CALL(object = JavascriptParser$ExternalContext(a0));
              self->object = object;
              self->parameters[0] = ::org::antlr::v4::runtime::PY_TYPE(Token);
              self->parameters[1] = ::org::antlr::v4::runtime::atn::PY_TYPE(ParserATNSimulator);
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_JavascriptParser$ExternalContext_expression(t_JavascriptParser$ExternalContext *self, PyObject *args)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 0:
              {
                ::java::util::List result((jobject) NULL);
                OBJ_CALL(result = self->object.expression());
                return ::java::util::t_List::wrap_Object(result, ::org::apache::lucene::expressions::js::PY_TYPE(JavascriptParser$ExpressionContext));
              }
              break;
             case 1:
              {
                jint a0;
                ::org::apache::lucene::expressions::js::JavascriptParser$ExpressionContext result((jobject) NULL);

                if (!parseArgs(args, "I", &a0))
                {
                  OBJ_CALL(result = self->object.expression(a0));
                  return ::org::apache::lucene::expressions::js::t_JavascriptParser$ExpressionContext::wrap_Object(result);
                }
              }
            }

            PyErr_SetArgsError((PyObject *) self, "expression", args);
            return NULL;
          }
          static PyObject *t_JavascriptParser$ExternalContext_get__parameters_(t_JavascriptParser$ExternalContext *self, void *data)
          {
            return typeParameters(self->parameters, sizeof(self->parameters));
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/el/GreekStemFilter.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/analysis/TokenStream.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace el {

          ::java::lang::Class *GreekStemFilter::class$ = NULL;
          jmethodID *GreekStemFilter::mids$ = NULL;
          bool GreekStemFilter::live$ = false;

          jclass GreekStemFilter::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/el/GreekStemFilter");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_c26756868a754f4e] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/analysis/TokenStream;)V");
              mids$[mid_incrementToken_8454bd5aa23fd11e] = env->getMethodID(cls, "incrementToken", "()Z");

              class$ = new ::java::lang::Class(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          GreekStemFilter::GreekStemFilter(const ::org::apache::lucene::analysis::TokenStream & a0) : ::org::apache::lucene::analysis::TokenFilter(env->newObject(initializeClass, &mids$, mid_init$_c26756868a754f4e, a0.this$)) {}

          jboolean GreekStemFilter::incrementToken() const
          {
            return env->callBooleanMethod(this$, mids$[mid_incrementToken_8454bd5aa23fd11e]);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace el {
          static PyObject *t_GreekStemFilter_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_GreekStemFilter_instance_(PyTypeObject *type, PyObject *arg);
          static int t_GreekStemFilter_init_(t_GreekStemFilter *self, PyObject *args, PyObject *kwds);
          static PyObject *t_GreekStemFilter_incrementToken(t_GreekStemFilter *self, PyObject *args);

          static PyMethodDef t_GreekStemFilter__methods_[] = {
            DECLARE_METHOD(t_GreekStemFilter, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_GreekStemFilter, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_GreekStemFilter, incrementToken, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          static PyType_Slot PY_TYPE_SLOTS(GreekStemFilter)[] = {
            { Py_tp_methods, t_GreekStemFilter__methods_ },
            { Py_tp_init, (void *) t_GreekStemFilter_init_ },
            { 0, NULL }
          };

          static PyType_Def *PY_TYPE_BASES(GreekStemFilter)[] = {
            &PY_TYPE_DEF(::org::apache::lucene::analysis::TokenFilter),
            NULL
          };

          DEFINE_TYPE(GreekStemFilter, t_GreekStemFilter, GreekStemFilter);

          void t_GreekStemFilter::install(PyObject *module)
          {
            installType(&PY_TYPE(GreekStemFilter), &PY_TYPE_DEF(GreekStemFilter), module, "GreekStemFilter", 0);
          }

          void t_GreekStemFilter::initialize(PyObject *module)
          {
            PyObject_SetAttrString((PyObject *) PY_TYPE(GreekStemFilter), "class_", make_descriptor(GreekStemFilter::initializeClass, 1));
            PyObject_SetAttrString((PyObject *) PY_TYPE(GreekStemFilter), "wrapfn_", make_descriptor(t_GreekStemFilter::wrap_jobject));
            PyObject_SetAttrString((PyObject *) PY_TYPE(GreekStemFilter), "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_GreekStemFilter_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, GreekStemFilter::initializeClass, 1)))
              return NULL;
            return t_GreekStemFilter::wrap_Object(GreekStemFilter(((t_GreekStemFilter *) arg)->object.this$));
          }
          static PyObject *t_GreekStemFilter_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, GreekStemFilter::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_GreekStemFilter_init_(t_GreekStemFilter *self, PyObject *args, PyObject *kwds)
          {
            ::org::apache::lucene::analysis::TokenStream a0((jobject) NULL);
            GreekStemFilter object((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::analysis::TokenStream::initializeClass, &a0))
            {
              INT_CALL(object = GreekStemFilter(a0));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_GreekStemFilter_incrementToken(t_GreekStemFilter *self, PyObject *args)
          {
            jboolean result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.incrementToken());
              Py_RETURN_BOOL(result);
            }

            return callSuper(PY_TYPE(GreekStemFilter), (PyObject *) self, "incrementToken", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/document/LongRange.h"
#include "java/lang/String.h"
#include "org/apache/lucene/search/Query.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace document {

        ::java::lang::Class *LongRange::class$ = NULL;
        jmethodID *LongRange::mids$ = NULL;
        bool LongRange::live$ = false;
        jint LongRange::BYTES = (jint) 0;

        jclass LongRange::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/document/LongRange");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_7579052ca1baafb1] = env->getMethodID(cls, "<init>", "(Ljava/lang/String;[J[J)V");
            mids$[mid_getMax_0f1d64a641e8af53] = env->getMethodID(cls, "getMax", "(I)J");
            mids$[mid_getMin_0f1d64a641e8af53] = env->getMethodID(cls, "getMin", "(I)J");
            mids$[mid_newContainsQuery_e8bfb6169bf1df05] = env->getStaticMethodID(cls, "newContainsQuery", "(Ljava/lang/String;[J[J)Lorg/apache/lucene/search/Query;");
            mids$[mid_newCrossesQuery_e8bfb6169bf1df05] = env->getStaticMethodID(cls, "newCrossesQuery", "(Ljava/lang/String;[J[J)Lorg/apache/lucene/search/Query;");
            mids$[mid_newIntersectsQuery_e8bfb6169bf1df05] = env->getStaticMethodID(cls, "newIntersectsQuery", "(Ljava/lang/String;[J[J)Lorg/apache/lucene/search/Query;");
            mids$[mid_newWithinQuery_e8bfb6169bf1df05] = env->getStaticMethodID(cls, "newWithinQuery", "(Ljava/lang/String;[J[J)Lorg/apache/lucene/search/Query;");
            mids$[mid_setRangeValues_872c99e98a9fe378] = env->getMethodID(cls, "setRangeValues", "([J[J)V");
            mids$[mid_toString_db9b55ba01e03e4b] = env->getMethodID(cls, "toString", "()Ljava/lang/String;");

            class$ = new ::java::lang::Class(cls);
            cls = (jclass) class$->this$;

            BYTES = env->getStaticIntField(cls, "BYTES");
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        LongRange::LongRange(const ::java::lang::String & a0, const JArray< jlong > & a1, const JArray< jlong > & a2) : ::org::apache::lucene::document::Field(env->newObject(initializeClass, &mids$, mid_init$_7579052ca1baafb1, a0.this$, a1.this$, a2.this$)) {}

        jlong LongRange::getMax(jint a0) const
        {
          return env->callLongMethod(this$, mids$[mid_getMax_0f1d64a641e8af53], a0);
        }

        jlong LongRange::getMin(jint a0) const
        {
          return env->callLongMethod(this$, mids$[mid_getMin_0f1d64a641e8af53], a0);
        }

        ::org::apache::lucene::search::Query LongRange::newContainsQuery(const ::java::lang::String & a0, const JArray< jlong > & a1, const JArray< jlong > & a2)
        {
          jclass cls = env->getClass(initializeClass);
          return ::org::apache::lucene::search::Query(env->callStaticObjectMethod(cls, mids$[mid_newContainsQuery_e8bfb6169bf1df05], a0.this$, a1.this$, a2.this$));
        }

        ::org::apache::lucene::search::Query LongRange::newCrossesQuery(const ::java::lang::String & a0, const JArray< jlong > & a1, const JArray< jlong > & a2)
        {
          jclass cls = env->getClass(initializeClass);
          return ::org::apache::lucene::search::Query(env->callStaticObjectMethod(cls, mids$[mid_newCrossesQuery_e8bfb6169bf1df05], a0.this$, a1.this$, a2.this$));
        }

        ::org::apache::lucene::search::Query LongRange::newIntersectsQuery(const ::java::lang::String & a0, const JArray< jlong > & a1, const JArray< jlong > & a2)
        {
          jclass cls = env->getClass(initializeClass);
          return ::org::apache::lucene::search::Query(env->callStaticObjectMethod(cls, mids$[mid_newIntersectsQuery_e8bfb6169bf1df05], a0.this$, a1.this$, a2.this$));
        }

        ::org::apache::lucene::search::Query LongRange::newWithinQuery(const ::java::lang::String & a0, const JArray< jlong > & a1, const JArray< jlong > & a2)
        {
          jclass cls = env->getClass(initializeClass);
          return ::org::apache::lucene::search::Query(env->callStaticObjectMethod(cls, mids$[mid_newWithinQuery_e8bfb6169bf1df05], a0.this$, a1.this$, a2.this$));
        }

        void LongRange::setRangeValues(const JArray< jlong > & a0, const JArray< jlong > & a1) const
        {
          env->callVoidMethod(this$, mids$[mid_setRangeValues_872c99e98a9fe378], a0.this$, a1.this$);
        }

        ::java::lang::String LongRange::toString() const
        {
          return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_db9b55ba01e03e4b]));
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace document {
        static PyObject *t_LongRange_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_LongRange_instance_(PyTypeObject *type, PyObject *arg);
        static int t_LongRange_init_(t_LongRange *self, PyObject *args, PyObject *kwds);
        static PyObject *t_LongRange_getMax(t_LongRange *self, PyObject *arg);
        static PyObject *t_LongRange_getMin(t_LongRange *self, PyObject *arg);
        static PyObject *t_LongRange_newContainsQuery(PyTypeObject *type, PyObject *args);
        static PyObject *t_LongRange_newCrossesQuery(PyTypeObject *type, PyObject *args);
        static PyObject *t_LongRange_newIntersectsQuery(PyTypeObject *type, PyObject *args);
        static PyObject *t_LongRange_newWithinQuery(PyTypeObject *type, PyObject *args);
        static PyObject *t_LongRange_setRangeValues(t_LongRange *self, PyObject *args);
        static PyObject *t_LongRange_toString(t_LongRange *self, PyObject *args);

        static PyMethodDef t_LongRange__methods_[] = {
          DECLARE_METHOD(t_LongRange, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_LongRange, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_LongRange, getMax, METH_O),
          DECLARE_METHOD(t_LongRange, getMin, METH_O),
          DECLARE_METHOD(t_LongRange, newContainsQuery, METH_VARARGS | METH_CLASS),
          DECLARE_METHOD(t_LongRange, newCrossesQuery, METH_VARARGS | METH_CLASS),
          DECLARE_METHOD(t_LongRange, newIntersectsQuery, METH_VARARGS | METH_CLASS),
          DECLARE_METHOD(t_LongRange, newWithinQuery, METH_VARARGS | METH_CLASS),
          DECLARE_METHOD(t_LongRange, setRangeValues, METH_VARARGS),
          DECLARE_METHOD(t_LongRange, toString, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        static PyType_Slot PY_TYPE_SLOTS(LongRange)[] = {
          { Py_tp_methods, t_LongRange__methods_ },
          { Py_tp_init, (void *) t_LongRange_init_ },
          { 0, NULL }
        };

        static PyType_Def *PY_TYPE_BASES(LongRange)[] = {
          &PY_TYPE_DEF(::org::apache::lucene::document::Field),
          NULL
        };

        DEFINE_TYPE(LongRange, t_LongRange, LongRange);

        void t_LongRange::install(PyObject *module)
        {
          installType(&PY_TYPE(LongRange), &PY_TYPE_DEF(LongRange), module, "LongRange", 0);
        }

        void t_LongRange::initialize(PyObject *module)
        {
          PyObject_SetAttrString((PyObject *) PY_TYPE(LongRange), "class_", make_descriptor(LongRange::initializeClass, 1));
          PyObject_SetAttrString((PyObject *) PY_TYPE(LongRange), "wrapfn_", make_descriptor(t_LongRange::wrap_jobject));
          PyObject_SetAttrString((PyObject *) PY_TYPE(LongRange), "boxfn_", make_descriptor(boxObject));
          env->getClass(LongRange::initializeClass);
          PyObject_SetAttrString((PyObject *) PY_TYPE(LongRange), "BYTES", make_descriptor(LongRange::BYTES));
        }

        static PyObject *t_LongRange_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, LongRange::initializeClass, 1)))
            return NULL;
          return t_LongRange::wrap_Object(LongRange(((t_LongRange *) arg)->object.this$));
        }
        static PyObject *t_LongRange_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, LongRange::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_LongRange_init_(t_LongRange *self, PyObject *args, PyObject *kwds)
        {
          ::java::lang::String a0((jobject) NULL);
          JArray< jlong > a1((jobject) NULL);
          JArray< jlong > a2((jobject) NULL);
          LongRange object((jobject) NULL);

          if (!parseArgs(args, "s[J[J", &a0, &a1, &a2))
          {
            INT_CALL(object = LongRange(a0, a1, a2));
            self->object = object;
          }
          else
          {
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }

        static PyObject *t_LongRange_getMax(t_LongRange *self, PyObject *arg)
        {
          jint a0;
          jlong result;

          if (!parseArg(arg, "I", &a0))
          {
            OBJ_CALL(result = self->object.getMax(a0));
            return PyLong_FromLongLong((PY_LONG_LONG) result);
          }

          PyErr_SetArgsError((PyObject *) self, "getMax", arg);
          return NULL;
        }

        static PyObject *t_LongRange_getMin(t_LongRange *self, PyObject *arg)
        {
          jint a0;
          jlong result;

          if (!parseArg(arg, "I", &a0))
          {
            OBJ_CALL(result = self->object.getMin(a0));
            return PyLong_FromLongLong((PY_LONG_LONG) result);
          }

          PyErr_SetArgsError((PyObject *) self, "getMin", arg);
          return NULL;
        }

        static PyObject *t_LongRange_newContainsQuery(PyTypeObject *type, PyObject *args)
        {
          ::java::lang::String a0((jobject) NULL);
          JArray< jlong > a1((jobject) NULL);
          JArray< jlong > a2((jobject) NULL);
          ::org::apache::lucene::search::Query result((jobject) NULL);

          if (!parseArgs(args, "s[J[J", &a0, &a1, &a2))
          {
            OBJ_CALL(result = ::org::apache::lucene::document::LongRange::newContainsQuery(a0, a1, a2));
            return ::org::apache::lucene::search::t_Query::wrap_Object(result);
          }

          PyErr_SetArgsError(type, "newContainsQuery", args);
          return NULL;
        }

        static PyObject *t_LongRange_newCrossesQuery(PyTypeObject *type, PyObject *args)
        {
          ::java::lang::String a0((jobject) NULL);
          JArray< jlong > a1((jobject) NULL);
          JArray< jlong > a2((jobject) NULL);
          ::org::apache::lucene::search::Query result((jobject) NULL);

          if (!parseArgs(args, "s[J[J", &a0, &a1, &a2))
          {
            OBJ_CALL(result = ::org::apache::lucene::document::LongRange::newCrossesQuery(a0, a1, a2));
            return ::org::apache::lucene::search::t_Query::wrap_Object(result);
          }

          PyErr_SetArgsError(type, "newCrossesQuery", args);
          return NULL;
        }

        static PyObject *t_LongRange_newIntersectsQuery(PyTypeObject *type, PyObject *args)
        {
          ::java::lang::String a0((jobject) NULL);
          JArray< jlong > a1((jobject) NULL);
          JArray< jlong > a2((jobject) NULL);
          ::org::apache::lucene::search::Query result((jobject) NULL);

          if (!parseArgs(args, "s[J[J", &a0, &a1, &a2))
          {
            OBJ_CALL(result = ::org::apache::lucene::document::LongRange::newIntersectsQuery(a0, a1, a2));
            return ::org::apache::lucene::search::t_Query::wrap_Object(result);
          }

          PyErr_SetArgsError(type, "newIntersectsQuery", args);
          return NULL;
        }

        static PyObject *t_LongRange_newWithinQuery(PyTypeObject *type, PyObject *args)
        {
          ::java::lang::String a0((jobject) NULL);
          JArray< jlong > a1((jobject) NULL);
          JArray< jlong > a2((jobject) NULL);
          ::org::apache::lucene::search::Query result((jobject) NULL);

          if (!parseArgs(args, "s[J[J", &a0, &a1, &a2))
          {
            OBJ_CALL(result = ::org::apache::lucene::document::LongRange::newWithinQuery(a0, a1, a2));
            return ::org::apache::lucene::search::t_Query::wrap_Object(result);
          }

          PyErr_SetArgsError(type, "newWithinQuery", args);
          return NULL;
        }

        static PyObject *t_LongRange_setRangeValues(t_LongRange *self, PyObject *args)
        {
          JArray< jlong > a0((jobject) NULL);
          JArray< jlong > a1((jobject) NULL);

          if (!parseArgs(args, "[J[J", &a0, &a1))
          {
            OBJ_CALL(self->object.setRangeValues(a0, a1));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "setRangeValues", args);
          return NULL;
        }

        static PyObject *t_LongRange_toString(t_LongRange *self, PyObject *args)
        {
          ::java::lang::String result((jobject) NULL);

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.toString());
            return j2p(result);
          }

          return callSuper(PY_TYPE(LongRange), (PyObject *) self, "toString", args, 2);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/util/ThreadInterruptedException.h"
#include "java/lang/InterruptedException.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {

        ::java::lang::Class *ThreadInterruptedException::class$ = NULL;
        jmethodID *ThreadInterruptedException::mids$ = NULL;
        bool ThreadInterruptedException::live$ = false;

        jclass ThreadInterruptedException::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/util/ThreadInterruptedException");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_d7ef1214d85858b2] = env->getMethodID(cls, "<init>", "(Ljava/lang/InterruptedException;)V");

            class$ = new ::java::lang::Class(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        ThreadInterruptedException::ThreadInterruptedException(const ::java::lang::InterruptedException & a0) : ::java::lang::RuntimeException(env->newObject(initializeClass, &mids$, mid_init$_d7ef1214d85858b2, a0.this$)) {}
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        static PyObject *t_ThreadInterruptedException_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_ThreadInterruptedException_instance_(PyTypeObject *type, PyObject *arg);
        static int t_ThreadInterruptedException_init_(t_ThreadInterruptedException *self, PyObject *args, PyObject *kwds);

        static PyMethodDef t_ThreadInterruptedException__methods_[] = {
          DECLARE_METHOD(t_ThreadInterruptedException, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_ThreadInterruptedException, instance_, METH_O | METH_CLASS),
          { NULL, NULL, 0, NULL }
        };

        static PyType_Slot PY_TYPE_SLOTS(ThreadInterruptedException)[] = {
          { Py_tp_methods, t_ThreadInterruptedException__methods_ },
          { Py_tp_init, (void *) t_ThreadInterruptedException_init_ },
          { 0, NULL }
        };

        static PyType_Def *PY_TYPE_BASES(ThreadInterruptedException)[] = {
          &PY_TYPE_DEF(::java::lang::RuntimeException),
          NULL
        };

        DEFINE_TYPE(ThreadInterruptedException, t_ThreadInterruptedException, ThreadInterruptedException);

        void t_ThreadInterruptedException::install(PyObject *module)
        {
          installType(&PY_TYPE(ThreadInterruptedException), &PY_TYPE_DEF(ThreadInterruptedException), module, "ThreadInterruptedException", 0);
        }

        void t_ThreadInterruptedException::initialize(PyObject *module)
        {
          PyObject_SetAttrString((PyObject *) PY_TYPE(ThreadInterruptedException), "class_", make_descriptor(ThreadInterruptedException::initializeClass, 1));
          PyObject_SetAttrString((PyObject *) PY_TYPE(ThreadInterruptedException), "wrapfn_", make_descriptor(t_ThreadInterruptedException::wrap_jobject));
          PyObject_SetAttrString((PyObject *) PY_TYPE(ThreadInterruptedException), "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_ThreadInterruptedException_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, ThreadInterruptedException::initializeClass, 1)))
            return NULL;
          return t_ThreadInterruptedException::wrap_Object(ThreadInterruptedException(((t_ThreadInterruptedException *) arg)->object.this$));
        }
        static PyObject *t_ThreadInterruptedException_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, ThreadInterruptedException::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_ThreadInterruptedException_init_(t_ThreadInterruptedException *self, PyObject *args, PyObject *kwds)
        {
          ::java::lang::InterruptedException a0((jobject) NULL);
          ThreadInterruptedException object((jobject) NULL);

          if (!parseArgs(args, "k", ::java::lang::InterruptedException::initializeClass, &a0))
          {
            INT_CALL(object = ThreadInterruptedException(a0));
            self->object = object;
          }
          else
          {
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/grouping/GroupSelector.h"
#include "java/util/Collection.h"
#include "org/apache/lucene/index/LeafReaderContext.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/search/Scorable.h"
#include "org/apache/lucene/search/grouping/SearchGroup.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/search/grouping/GroupSelector$State.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace grouping {

          ::java::lang::Class *GroupSelector::class$ = NULL;
          jmethodID *GroupSelector::mids$ = NULL;
          bool GroupSelector::live$ = false;

          jclass GroupSelector::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/search/grouping/GroupSelector");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_f2cc1bce94666404] = env->getMethodID(cls, "<init>", "()V");
              mids$[mid_advanceTo_ddaa3f14f8aeda7d] = env->getMethodID(cls, "advanceTo", "(I)Lorg/apache/lucene/search/grouping/GroupSelector$State;");
              mids$[mid_copyValue_d6bcd06f3102c4d9] = env->getMethodID(cls, "copyValue", "()Ljava/lang/Object;");
              mids$[mid_currentValue_d6bcd06f3102c4d9] = env->getMethodID(cls, "currentValue", "()Ljava/lang/Object;");
              mids$[mid_setGroups_50bc3ddc62a19f2d] = env->getMethodID(cls, "setGroups", "(Ljava/util/Collection;)V");
              mids$[mid_setNextReader_8747e0e89febf88d] = env->getMethodID(cls, "setNextReader", "(Lorg/apache/lucene/index/LeafReaderContext;)V");
              mids$[mid_setScorer_57a565cc0113e133] = env->getMethodID(cls, "setScorer", "(Lorg/apache/lucene/search/Scorable;)V");

              class$ = new ::java::lang::Class(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          GroupSelector::GroupSelector() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_f2cc1bce94666404)) {}

          ::org::apache::lucene::search::grouping::GroupSelector$State GroupSelector::advanceTo(jint a0) const
          {
            return ::org::apache::lucene::search::grouping::GroupSelector$State(env->callObjectMethod(this$, mids$[mid_advanceTo_ddaa3f14f8aeda7d], a0));
          }

          ::java::lang::Object GroupSelector::copyValue() const
          {
            return ::java::lang::Object(env->callObjectMethod(this$, mids$[mid_copyValue_d6bcd06f3102c4d9]));
          }

          ::java::lang::Object GroupSelector::currentValue() const
          {
            return ::java::lang::Object(env->callObjectMethod(this$, mids$[mid_currentValue_d6bcd06f3102c4d9]));
          }

          void GroupSelector::setGroups(const ::java::util::Collection & a0) const
          {
            env->callVoidMethod(this$, mids$[mid_setGroups_50bc3ddc62a19f2d], a0.this$);
          }

          void GroupSelector::setNextReader(const ::org::apache::lucene::index::LeafReaderContext & a0) const
          {
            env->callVoidMethod(this$, mids$[mid_setNextReader_8747e0e89febf88d], a0.this$);
          }

          void GroupSelector::setScorer(const ::org::apache::lucene::search::Scorable & a0) const
          {
            env->callVoidMethod(this$, mids$[mid_setScorer_57a565cc0113e133], a0.this$);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace grouping {
          static PyObject *t_GroupSelector_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_GroupSelector_instance_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_GroupSelector_of_(t_GroupSelector *self, PyObject *args);
          static int t_GroupSelector_init_(t_GroupSelector *self, PyObject *args, PyObject *kwds);
          static PyObject *t_GroupSelector_advanceTo(t_GroupSelector *self, PyObject *arg);
          static PyObject *t_GroupSelector_copyValue(t_GroupSelector *self);
          static PyObject *t_GroupSelector_currentValue(t_GroupSelector *self);
          static PyObject *t_GroupSelector_setGroups(t_GroupSelector *self, PyObject *arg);
          static PyObject *t_GroupSelector_setNextReader(t_GroupSelector *self, PyObject *arg);
          static PyObject *t_GroupSelector_setScorer(t_GroupSelector *self, PyObject *arg);
          static int t_GroupSelector_set__groups(t_GroupSelector *self, PyObject *arg, void *data);
          static int t_GroupSelector_set__nextReader(t_GroupSelector *self, PyObject *arg, void *data);
          static int t_GroupSelector_set__scorer(t_GroupSelector *self, PyObject *arg, void *data);
          static PyObject *t_GroupSelector_get__parameters_(t_GroupSelector *self, void *data);
          static PyGetSetDef t_GroupSelector__fields_[] = {
            DECLARE_SET_FIELD(t_GroupSelector, groups),
            DECLARE_SET_FIELD(t_GroupSelector, nextReader),
            DECLARE_SET_FIELD(t_GroupSelector, scorer),
            DECLARE_GET_FIELD(t_GroupSelector, parameters_),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_GroupSelector__methods_[] = {
            DECLARE_METHOD(t_GroupSelector, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_GroupSelector, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_GroupSelector, of_, METH_VARARGS),
            DECLARE_METHOD(t_GroupSelector, advanceTo, METH_O),
            DECLARE_METHOD(t_GroupSelector, copyValue, METH_NOARGS),
            DECLARE_METHOD(t_GroupSelector, currentValue, METH_NOARGS),
            DECLARE_METHOD(t_GroupSelector, setGroups, METH_O),
            DECLARE_METHOD(t_GroupSelector, setNextReader, METH_O),
            DECLARE_METHOD(t_GroupSelector, setScorer, METH_O),
            { NULL, NULL, 0, NULL }
          };

          static PyType_Slot PY_TYPE_SLOTS(GroupSelector)[] = {
            { Py_tp_methods, t_GroupSelector__methods_ },
            { Py_tp_init, (void *) t_GroupSelector_init_ },
            { Py_tp_getset, t_GroupSelector__fields_ },
            { 0, NULL }
          };

          static PyType_Def *PY_TYPE_BASES(GroupSelector)[] = {
            &PY_TYPE_DEF(::java::lang::Object),
            NULL
          };

          DEFINE_TYPE(GroupSelector, t_GroupSelector, GroupSelector);
          PyObject *t_GroupSelector::wrap_Object(const GroupSelector& object, PyTypeObject *p0)
          {
            PyObject *obj = t_GroupSelector::wrap_Object(object);
            if (obj != NULL && obj != Py_None)
            {
              t_GroupSelector *self = (t_GroupSelector *) obj;
              self->parameters[0] = p0;
            }
            return obj;
          }

          PyObject *t_GroupSelector::wrap_jobject(const jobject& object, PyTypeObject *p0)
          {
            PyObject *obj = t_GroupSelector::wrap_jobject(object);
            if (obj != NULL && obj != Py_None)
            {
              t_GroupSelector *self = (t_GroupSelector *) obj;
              self->parameters[0] = p0;
            }
            return obj;
          }

          void t_GroupSelector::install(PyObject *module)
          {
            installType(&PY_TYPE(GroupSelector), &PY_TYPE_DEF(GroupSelector), module, "GroupSelector", 0);
            PyObject_SetAttrString((PyObject *) PY_TYPE(GroupSelector), "State", make_descriptor(&PY_TYPE_DEF(GroupSelector$State)));
          }

          void t_GroupSelector::initialize(PyObject *module)
          {
            PyObject_SetAttrString((PyObject *) PY_TYPE(GroupSelector), "class_", make_descriptor(GroupSelector::initializeClass, 1));
            PyObject_SetAttrString((PyObject *) PY_TYPE(GroupSelector), "wrapfn_", make_descriptor(t_GroupSelector::wrap_jobject));
            PyObject_SetAttrString((PyObject *) PY_TYPE(GroupSelector), "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_GroupSelector_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, GroupSelector::initializeClass, 1)))
              return NULL;
            return t_GroupSelector::wrap_Object(GroupSelector(((t_GroupSelector *) arg)->object.this$));
          }
          static PyObject *t_GroupSelector_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, GroupSelector::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static PyObject *t_GroupSelector_of_(t_GroupSelector *self, PyObject *args)
          {
            if (!parseArg(args, "T", 1, &(self->parameters)))
              Py_RETURN_SELF;
            return PyErr_SetArgsError((PyObject *) self, "of_", args);
          }

          static int t_GroupSelector_init_(t_GroupSelector *self, PyObject *args, PyObject *kwds)
          {
            GroupSelector object((jobject) NULL);

            INT_CALL(object = GroupSelector());
            self->object = object;

            return 0;
          }

          static PyObject *t_GroupSelector_advanceTo(t_GroupSelector *self, PyObject *arg)
          {
            jint a0;
            ::org::apache::lucene::search::grouping::GroupSelector$State result((jobject) NULL);

            if (!parseArg(arg, "I", &a0))
            {
              OBJ_CALL(result = self->object.advanceTo(a0));
              return ::org::apache::lucene::search::grouping::t_GroupSelector$State::wrap_Object(result);
            }

            PyErr_SetArgsError((PyObject *) self, "advanceTo", arg);
            return NULL;
          }

          static PyObject *t_GroupSelector_copyValue(t_GroupSelector *self)
          {
            ::java::lang::Object result((jobject) NULL);
            OBJ_CALL(result = self->object.copyValue());
            return self->parameters[0] != NULL ? wrapType(self->parameters[0], result.this$) : ::java::lang::t_Object::wrap_Object(result);
          }

          static PyObject *t_GroupSelector_currentValue(t_GroupSelector *self)
          {
            ::java::lang::Object result((jobject) NULL);
            OBJ_CALL(result = self->object.currentValue());
            return self->parameters[0] != NULL ? wrapType(self->parameters[0], result.this$) : ::java::lang::t_Object::wrap_Object(result);
          }

          static PyObject *t_GroupSelector_setGroups(t_GroupSelector *self, PyObject *arg)
          {
            ::java::util::Collection a0((jobject) NULL);
            PyTypeObject **p0;

            if (!parseArg(arg, "K", ::java::util::Collection::initializeClass, &a0, &p0, ::java::util::t_Collection::parameters_))
            {
              OBJ_CALL(self->object.setGroups(a0));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError((PyObject *) self, "setGroups", arg);
            return NULL;
          }

          static PyObject *t_GroupSelector_setNextReader(t_GroupSelector *self, PyObject *arg)
          {
            ::org::apache::lucene::index::LeafReaderContext a0((jobject) NULL);

            if (!parseArg(arg, "k", ::org::apache::lucene::index::LeafReaderContext::initializeClass, &a0))
            {
              OBJ_CALL(self->object.setNextReader(a0));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError((PyObject *) self, "setNextReader", arg);
            return NULL;
          }

          static PyObject *t_GroupSelector_setScorer(t_GroupSelector *self, PyObject *arg)
          {
            ::org::apache::lucene::search::Scorable a0((jobject) NULL);

            if (!parseArg(arg, "k", ::org::apache::lucene::search::Scorable::initializeClass, &a0))
            {
              OBJ_CALL(self->object.setScorer(a0));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError((PyObject *) self, "setScorer", arg);
            return NULL;
          }
          static PyObject *t_GroupSelector_get__parameters_(t_GroupSelector *self, void *data)
          {
            return typeParameters(self->parameters, sizeof(self->parameters));
          }

          static int t_GroupSelector_set__groups(t_GroupSelector *self, PyObject *arg, void *data)
          {
            {
              ::java::util::Collection value((jobject) NULL);
              if (!parseArg(arg, "k", ::java::util::Collection::initializeClass, &value))
              {
                INT_CALL(self->object.setGroups(value));
                return 0;
              }
            }
            PyErr_SetArgsError((PyObject *) self, "groups", arg);
            return -1;
          }

          static int t_GroupSelector_set__nextReader(t_GroupSelector *self, PyObject *arg, void *data)
          {
            {
              ::org::apache::lucene::index::LeafReaderContext value((jobject) NULL);
              if (!parseArg(arg, "k", ::org::apache::lucene::index::LeafReaderContext::initializeClass, &value))
              {
                INT_CALL(self->object.setNextReader(value));
                return 0;
              }
            }
            PyErr_SetArgsError((PyObject *) self, "nextReader", arg);
            return -1;
          }

          static int t_GroupSelector_set__scorer(t_GroupSelector *self, PyObject *arg, void *data)
          {
            {
              ::org::apache::lucene::search::Scorable value((jobject) NULL);
              if (!parseArg(arg, "k", ::org::apache::lucene::search::Scorable::initializeClass, &value))
              {
                INT_CALL(self->object.setScorer(value));
                return 0;
              }
            }
            PyErr_SetArgsError((PyObject *) self, "scorer", arg);
            return -1;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/SearcherLifetimeManager$Pruner.h"
#include "org/apache/lucene/search/IndexSearcher.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {

        ::java::lang::Class *SearcherLifetimeManager$Pruner::class$ = NULL;
        jmethodID *SearcherLifetimeManager$Pruner::mids$ = NULL;
        bool SearcherLifetimeManager$Pruner::live$ = false;

        jclass SearcherLifetimeManager$Pruner::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/search/SearcherLifetimeManager$Pruner");

            mids$ = new jmethodID[max_mid];
            mids$[mid_doPrune_730c836a2963ba3c] = env->getMethodID(cls, "doPrune", "(DLorg/apache/lucene/search/IndexSearcher;)Z");

            class$ = new ::java::lang::Class(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        jboolean SearcherLifetimeManager$Pruner::doPrune(jdouble a0, const ::org::apache::lucene::search::IndexSearcher & a1) const
        {
          return env->callBooleanMethod(this$, mids$[mid_doPrune_730c836a2963ba3c], a0, a1.this$);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        static PyObject *t_SearcherLifetimeManager$Pruner_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_SearcherLifetimeManager$Pruner_instance_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_SearcherLifetimeManager$Pruner_doPrune(t_SearcherLifetimeManager$Pruner *self, PyObject *args);

        static PyMethodDef t_SearcherLifetimeManager$Pruner__methods_[] = {
          DECLARE_METHOD(t_SearcherLifetimeManager$Pruner, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_SearcherLifetimeManager$Pruner, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_SearcherLifetimeManager$Pruner, doPrune, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        static PyType_Slot PY_TYPE_SLOTS(SearcherLifetimeManager$Pruner)[] = {
          { Py_tp_methods, t_SearcherLifetimeManager$Pruner__methods_ },
          { Py_tp_init, (void *) abstract_init },
          { 0, NULL }
        };

        static PyType_Def *PY_TYPE_BASES(SearcherLifetimeManager$Pruner)[] = {
          &PY_TYPE_DEF(::java::lang::Object),
          NULL
        };

        DEFINE_TYPE(SearcherLifetimeManager$Pruner, t_SearcherLifetimeManager$Pruner, SearcherLifetimeManager$Pruner);

        void t_SearcherLifetimeManager$Pruner::install(PyObject *module)
        {
          installType(&PY_TYPE(SearcherLifetimeManager$Pruner), &PY_TYPE_DEF(SearcherLifetimeManager$Pruner), module, "SearcherLifetimeManager$Pruner", 0);
        }

        void t_SearcherLifetimeManager$Pruner::initialize(PyObject *module)
        {
          PyObject_SetAttrString((PyObject *) PY_TYPE(SearcherLifetimeManager$Pruner), "class_", make_descriptor(SearcherLifetimeManager$Pruner::initializeClass, 1));
          PyObject_SetAttrString((PyObject *) PY_TYPE(SearcherLifetimeManager$Pruner), "wrapfn_", make_descriptor(t_SearcherLifetimeManager$Pruner::wrap_jobject));
          PyObject_SetAttrString((PyObject *) PY_TYPE(SearcherLifetimeManager$Pruner), "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_SearcherLifetimeManager$Pruner_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, SearcherLifetimeManager$Pruner::initializeClass, 1)))
            return NULL;
          return t_SearcherLifetimeManager$Pruner::wrap_Object(SearcherLifetimeManager$Pruner(((t_SearcherLifetimeManager$Pruner *) arg)->object.this$));
        }
        static PyObject *t_SearcherLifetimeManager$Pruner_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, SearcherLifetimeManager$Pruner::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static PyObject *t_SearcherLifetimeManager$Pruner_doPrune(t_SearcherLifetimeManager$Pruner *self, PyObject *args)
        {
          jdouble a0;
          ::org::apache::lucene::search::IndexSearcher a1((jobject) NULL);
          jboolean result;

          if (!parseArgs(args, "Dk", ::org::apache::lucene::search::IndexSearcher::initializeClass, &a0, &a1))
          {
            OBJ_CALL(result = self->object.doPrune(a0, a1));
            Py_RETURN_BOOL(result);
          }

          PyErr_SetArgsError((PyObject *) self, "doPrune", args);
          return NULL;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/facet/range/LongRangeCounter$LongRangeNode.h"
#include "org/apache/lucene/facet/range/LongRangeCounter$LongRangeNode.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace facet {
        namespace range {

          ::java::lang::Class *LongRangeCounter$LongRangeNode::class$ = NULL;
          jmethodID *LongRangeCounter$LongRangeNode::mids$ = NULL;
          bool LongRangeCounter$LongRangeNode::live$ = false;

          jclass LongRangeCounter$LongRangeNode::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/facet/range/LongRangeCounter$LongRangeNode");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_0903d7552625f4f4] = env->getMethodID(cls, "<init>", "(JJLorg/apache/lucene/facet/range/LongRangeCounter$LongRangeNode;Lorg/apache/lucene/facet/range/LongRangeCounter$LongRangeNode;I)V");
              mids$[mid_toString_db9b55ba01e03e4b] = env->getMethodID(cls, "toString", "()Ljava/lang/String;");

              class$ = new ::java::lang::Class(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          LongRangeCounter$LongRangeNode::LongRangeCounter$LongRangeNode(jlong a0, jlong a1, const LongRangeCounter$LongRangeNode & a2, const LongRangeCounter$LongRangeNode & a3, jint a4) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_0903d7552625f4f4, a0, a1, a2.this$, a3.this$, a4)) {}

          ::java::lang::String LongRangeCounter$LongRangeNode::toString() const
          {
            return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_db9b55ba01e03e4b]));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace facet {
        namespace range {
          static PyObject *t_LongRangeCounter$LongRangeNode_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_LongRangeCounter$LongRangeNode_instance_(PyTypeObject *type, PyObject *arg);
          static int t_LongRangeCounter$LongRangeNode_init_(t_LongRangeCounter$LongRangeNode *self, PyObject *args, PyObject *kwds);
          static PyObject *t_LongRangeCounter$LongRangeNode_toString(t_LongRangeCounter$LongRangeNode *self, PyObject *args);

          static PyMethodDef t_LongRangeCounter$LongRangeNode__methods_[] = {
            DECLARE_METHOD(t_LongRangeCounter$LongRangeNode, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_LongRangeCounter$LongRangeNode, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_LongRangeCounter$LongRangeNode, toString, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          static PyType_Slot PY_TYPE_SLOTS(LongRangeCounter$LongRangeNode)[] = {
            { Py_tp_methods, t_LongRangeCounter$LongRangeNode__methods_ },
            { Py_tp_init, (void *) t_LongRangeCounter$LongRangeNode_init_ },
            { 0, NULL }
          };

          static PyType_Def *PY_TYPE_BASES(LongRangeCounter$LongRangeNode)[] = {
            &PY_TYPE_DEF(::java::lang::Object),
            NULL
          };

          DEFINE_TYPE(LongRangeCounter$LongRangeNode, t_LongRangeCounter$LongRangeNode, LongRangeCounter$LongRangeNode);

          void t_LongRangeCounter$LongRangeNode::install(PyObject *module)
          {
            installType(&PY_TYPE(LongRangeCounter$LongRangeNode), &PY_TYPE_DEF(LongRangeCounter$LongRangeNode), module, "LongRangeCounter$LongRangeNode", 0);
          }

          void t_LongRangeCounter$LongRangeNode::initialize(PyObject *module)
          {
            PyObject_SetAttrString((PyObject *) PY_TYPE(LongRangeCounter$LongRangeNode), "class_", make_descriptor(LongRangeCounter$LongRangeNode::initializeClass, 1));
            PyObject_SetAttrString((PyObject *) PY_TYPE(LongRangeCounter$LongRangeNode), "wrapfn_", make_descriptor(t_LongRangeCounter$LongRangeNode::wrap_jobject));
            PyObject_SetAttrString((PyObject *) PY_TYPE(LongRangeCounter$LongRangeNode), "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_LongRangeCounter$LongRangeNode_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, LongRangeCounter$LongRangeNode::initializeClass, 1)))
              return NULL;
            return t_LongRangeCounter$LongRangeNode::wrap_Object(LongRangeCounter$LongRangeNode(((t_LongRangeCounter$LongRangeNode *) arg)->object.this$));
          }
          static PyObject *t_LongRangeCounter$LongRangeNode_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, LongRangeCounter$LongRangeNode::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_LongRangeCounter$LongRangeNode_init_(t_LongRangeCounter$LongRangeNode *self, PyObject *args, PyObject *kwds)
          {
            jlong a0;
            jlong a1;
            LongRangeCounter$LongRangeNode a2((jobject) NULL);
            LongRangeCounter$LongRangeNode a3((jobject) NULL);
            jint a4;
            LongRangeCounter$LongRangeNode object((jobject) NULL);

            if (!parseArgs(args, "JJkkI", LongRangeCounter$LongRangeNode::initializeClass, LongRangeCounter$LongRangeNode::initializeClass, &a0, &a1, &a2, &a3, &a4))
            {
              INT_CALL(object = LongRangeCounter$LongRangeNode(a0, a1, a2, a3, a4));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_LongRangeCounter$LongRangeNode_toString(t_LongRangeCounter$LongRangeNode *self, PyObject *args)
          {
            ::java::lang::String result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.toString());
              return j2p(result);
            }

            return callSuper(PY_TYPE(LongRangeCounter$LongRangeNode), (PyObject *) self, "toString", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/FuzzyTermsEnum$FuzzyTermsException.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {

        ::java::lang::Class *FuzzyTermsEnum$FuzzyTermsException::class$ = NULL;
        jmethodID *FuzzyTermsEnum$FuzzyTermsException::mids$ = NULL;
        bool FuzzyTermsEnum$FuzzyTermsException::live$ = false;

        jclass FuzzyTermsEnum$FuzzyTermsException::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/search/FuzzyTermsEnum$FuzzyTermsException");

            class$ = new ::java::lang::Class(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        static PyObject *t_FuzzyTermsEnum$FuzzyTermsException_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_FuzzyTermsEnum$FuzzyTermsException_instance_(PyTypeObject *type, PyObject *arg);

        static PyMethodDef t_FuzzyTermsEnum$FuzzyTermsException__methods_[] = {
          DECLARE_METHOD(t_FuzzyTermsEnum$FuzzyTermsException, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_FuzzyTermsEnum$FuzzyTermsException, instance_, METH_O | METH_CLASS),
          { NULL, NULL, 0, NULL }
        };

        static PyType_Slot PY_TYPE_SLOTS(FuzzyTermsEnum$FuzzyTermsException)[] = {
          { Py_tp_methods, t_FuzzyTermsEnum$FuzzyTermsException__methods_ },
          { Py_tp_init, (void *) abstract_init },
          { 0, NULL }
        };

        static PyType_Def *PY_TYPE_BASES(FuzzyTermsEnum$FuzzyTermsException)[] = {
          &PY_TYPE_DEF(::java::lang::RuntimeException),
          NULL
        };

        DEFINE_TYPE(FuzzyTermsEnum$FuzzyTermsException, t_FuzzyTermsEnum$FuzzyTermsException, FuzzyTermsEnum$FuzzyTermsException);

        void t_FuzzyTermsEnum$FuzzyTermsException::install(PyObject *module)
        {
          installType(&PY_TYPE(FuzzyTermsEnum$FuzzyTermsException), &PY_TYPE_DEF(FuzzyTermsEnum$FuzzyTermsException), module, "FuzzyTermsEnum$FuzzyTermsException", 0);
        }

        void t_FuzzyTermsEnum$FuzzyTermsException::initialize(PyObject *module)
        {
          PyObject_SetAttrString((PyObject *) PY_TYPE(FuzzyTermsEnum$FuzzyTermsException), "class_", make_descriptor(FuzzyTermsEnum$FuzzyTermsException::initializeClass, 1));
          PyObject_SetAttrString((PyObject *) PY_TYPE(FuzzyTermsEnum$FuzzyTermsException), "wrapfn_", make_descriptor(t_FuzzyTermsEnum$FuzzyTermsException::wrap_jobject));
          PyObject_SetAttrString((PyObject *) PY_TYPE(FuzzyTermsEnum$FuzzyTermsException), "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_FuzzyTermsEnum$FuzzyTermsException_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, FuzzyTermsEnum$FuzzyTermsException::initializeClass, 1)))
            return NULL;
          return t_FuzzyTermsEnum$FuzzyTermsException::wrap_Object(FuzzyTermsEnum$FuzzyTermsException(((t_FuzzyTermsEnum$FuzzyTermsException *) arg)->object.this$));
        }
        static PyObject *t_FuzzyTermsEnum$FuzzyTermsException_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, FuzzyTermsEnum$FuzzyTermsException::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/compound/hyphenation/ByteVector.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace compound {
          namespace hyphenation {

            ::java::lang::Class *ByteVector::class$ = NULL;
            jmethodID *ByteVector::mids$ = NULL;
            bool ByteVector::live$ = false;

            jclass ByteVector::initializeClass(bool getOnly)
            {
              if (getOnly)
                return (jclass) (live$ ? class$->this$ : NULL);
              if (class$ == NULL)
              {
                jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/compound/hyphenation/ByteVector");

                mids$ = new jmethodID[max_mid];
                mids$[mid_init$_f2cc1bce94666404] = env->getMethodID(cls, "<init>", "()V");
                mids$[mid_init$_9ffdf271836656c4] = env->getMethodID(cls, "<init>", "([B)V");
                mids$[mid_init$_040c4cd0390c5aff] = env->getMethodID(cls, "<init>", "(I)V");
                mids$[mid_init$_2a8b02a5adcbf830] = env->getMethodID(cls, "<init>", "([BI)V");
                mids$[mid_alloc_1e143afe1894d213] = env->getMethodID(cls, "alloc", "(I)I");
                mids$[mid_capacity_9972fcc56b44e79d] = env->getMethodID(cls, "capacity", "()I");
                mids$[mid_get_4d5233a30cda5878] = env->getMethodID(cls, "get", "(I)B");
                mids$[mid_getArray_cf386cdb1bbd339f] = env->getMethodID(cls, "getArray", "()[B");
                mids$[mid_length_9972fcc56b44e79d] = env->getMethodID(cls, "length", "()I");
                mids$[mid_put_8344e5e168439156] = env->getMethodID(cls, "put", "(IB)V");
                mids$[mid_trimToSize_f2cc1bce94666404] = env->getMethodID(cls, "trimToSize", "()V");

                class$ = new ::java::lang::Class(cls);
                live$ = true;
              }
              return (jclass) class$->this$;
            }

            ByteVector::ByteVector() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_f2cc1bce94666404)) {}

            ByteVector::ByteVector(const JArray< jbyte > & a0) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_9ffdf271836656c4, a0.this$)) {}

            ByteVector::ByteVector(jint a0) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_040c4cd0390c5aff, a0)) {}

            ByteVector::ByteVector(const JArray< jbyte > & a0, jint a1) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_2a8b02a5adcbf830, a0.this$, a1)) {}

            jint ByteVector::alloc(jint a0) const
            {
              return env->callIntMethod(this$, mids$[mid_alloc_1e143afe1894d213], a0);
            }

            jint ByteVector::capacity() const
            {
              return env->callIntMethod(this$, mids$[mid_capacity_9972fcc56b44e79d]);
            }

            jbyte ByteVector::get(jint a0) const
            {
              return env->callByteMethod(this$, mids$[mid_get_4d5233a30cda5878], a0);
            }

            JArray< jbyte > ByteVector::getArray() const
            {
              return JArray< jbyte >(env->callObjectMethod(this$, mids$[mid_getArray_cf386cdb1bbd339f]));
            }

            jint ByteVector::length() const
            {
              return env->callIntMethod(this$, mids$[mid_length_9972fcc56b44e79d]);
            }

            void ByteVector::put(jint a0, jbyte a1) const
            {
              env->callVoidMethod(this$, mids$[mid_put_8344e5e168439156], a0, a1);
            }

            void ByteVector::trimToSize() const
            {
              env->callVoidMethod(this$, mids$[mid_trimToSize_f2cc1bce94666404]);
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace compound {
          namespace hyphenation {
            static PyObject *t_ByteVector_cast_(PyTypeObject *type, PyObject *arg);
            static PyObject *t_ByteVector_instance_(PyTypeObject *type, PyObject *arg);
            static int t_ByteVector_init_(t_ByteVector *self, PyObject *args, PyObject *kwds);
            static PyObject *t_ByteVector_alloc(t_ByteVector *self, PyObject *arg);
            static PyObject *t_ByteVector_capacity(t_ByteVector *self);
            static PyObject *t_ByteVector_get(t_ByteVector *self, PyObject *arg);
            static PyObject *t_ByteVector_getArray(t_ByteVector *self);
            static PyObject *t_ByteVector_length(t_ByteVector *self);
            static PyObject *t_ByteVector_put(t_ByteVector *self, PyObject *args);
            static PyObject *t_ByteVector_trimToSize(t_ByteVector *self);
            static PyObject *t_ByteVector_get__array(t_ByteVector *self, void *data);
            static PyGetSetDef t_ByteVector__fields_[] = {
              DECLARE_GET_FIELD(t_ByteVector, array),
              { NULL, NULL, NULL, NULL, NULL }
            };

            static PyMethodDef t_ByteVector__methods_[] = {
              DECLARE_METHOD(t_ByteVector, cast_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_ByteVector, instance_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_ByteVector, alloc, METH_O),
              DECLARE_METHOD(t_ByteVector, capacity, METH_NOARGS),
              DECLARE_METHOD(t_ByteVector, get, METH_O),
              DECLARE_METHOD(t_ByteVector, getArray, METH_NOARGS),
              DECLARE_METHOD(t_ByteVector, length, METH_NOARGS),
              DECLARE_METHOD(t_ByteVector, put, METH_VARARGS),
              DECLARE_METHOD(t_ByteVector, trimToSize, METH_NOARGS),
              { NULL, NULL, 0, NULL }
            };

            static PyType_Slot PY_TYPE_SLOTS(ByteVector)[] = {
              { Py_tp_methods, t_ByteVector__methods_ },
              { Py_tp_init, (void *) t_ByteVector_init_ },
              { Py_tp_getset, t_ByteVector__fields_ },
              { 0, NULL }
            };

            static PyType_Def *PY_TYPE_BASES(ByteVector)[] = {
              &PY_TYPE_DEF(::java::lang::Object),
              NULL
            };

            DEFINE_TYPE(ByteVector, t_ByteVector, ByteVector);

            void t_ByteVector::install(PyObject *module)
            {
              installType(&PY_TYPE(ByteVector), &PY_TYPE_DEF(ByteVector), module, "ByteVector", 0);
            }

            void t_ByteVector::initialize(PyObject *module)
            {
              PyObject_SetAttrString((PyObject *) PY_TYPE(ByteVector), "class_", make_descriptor(ByteVector::initializeClass, 1));
              PyObject_SetAttrString((PyObject *) PY_TYPE(ByteVector), "wrapfn_", make_descriptor(t_ByteVector::wrap_jobject));
              PyObject_SetAttrString((PyObject *) PY_TYPE(ByteVector), "boxfn_", make_descriptor(boxObject));
            }

            static PyObject *t_ByteVector_cast_(PyTypeObject *type, PyObject *arg)
            {
              if (!(arg = castCheck(arg, ByteVector::initializeClass, 1)))
                return NULL;
              return t_ByteVector::wrap_Object(ByteVector(((t_ByteVector *) arg)->object.this$));
            }
            static PyObject *t_ByteVector_instance_(PyTypeObject *type, PyObject *arg)
            {
              if (!castCheck(arg, ByteVector::initializeClass, 0))
                Py_RETURN_FALSE;
              Py_RETURN_TRUE;
            }

            static int t_ByteVector_init_(t_ByteVector *self, PyObject *args, PyObject *kwds)
            {
              switch (PyTuple_GET_SIZE(args)) {
               case 0:
                {
                  ByteVector object((jobject) NULL);

                  INT_CALL(object = ByteVector());
                  self->object = object;
                  break;
                }
               case 1:
                {
                  JArray< jbyte > a0((jobject) NULL);
                  ByteVector object((jobject) NULL);

                  if (!parseArgs(args, "[B", &a0))
                  {
                    INT_CALL(object = ByteVector(a0));
                    self->object = object;
                    break;
                  }
                }
                {
                  jint a0;
                  ByteVector object((jobject) NULL);

                  if (!parseArgs(args, "I", &a0))
                  {
                    INT_CALL(object = ByteVector(a0));
                    self->object = object;
                    break;
                  }
                }
                goto err;
               case 2:
                {
                  JArray< jbyte > a0((jobject) NULL);
                  jint a1;
                  ByteVector object((jobject) NULL);

                  if (!parseArgs(args, "[BI", &a0, &a1))
                  {
                    INT_CALL(object = ByteVector(a0, a1));
                    self->object = object;
                    break;
                  }
                }
               default:
               err:
                PyErr_SetArgsError((PyObject *) self, "__init__", args);
                return -1;
              }

              return 0;
            }

            static PyObject *t_ByteVector_alloc(t_ByteVector *self, PyObject *arg)
            {
              jint a0;
              jint result;

              if (!parseArg(arg, "I", &a0))
              {
                OBJ_CALL(result = self->object.alloc(a0));
                return PyLong_FromLong((long) result);
              }

              PyErr_SetArgsError((PyObject *) self, "alloc", arg);
              return NULL;
            }

            static PyObject *t_ByteVector_capacity(t_ByteVector *self)
            {
              jint result;
              OBJ_CALL(result = self->object.capacity());
              return PyLong_FromLong((long) result);
            }

            static PyObject *t_ByteVector_get(t_ByteVector *self, PyObject *arg)
            {
              jint a0;
              jbyte result;

              if (!parseArg(arg, "I", &a0))
              {
                OBJ_CALL(result = self->object.get(a0));
                return PyLong_FromLong((long) result);
              }

              PyErr_SetArgsError((PyObject *) self, "get", arg);
              return NULL;
            }

            static PyObject *t_ByteVector_getArray(t_ByteVector *self)
            {
              JArray< jbyte > result((jobject) NULL);
              OBJ_CALL(result = self->object.getArray());
              return result.wrap();
            }

            static PyObject *t_ByteVector_length(t_ByteVector *self)
            {
              jint result;
              OBJ_CALL(result = self->object.length());
              return PyLong_FromLong((long) result);
            }

            static PyObject *t_ByteVector_put(t_ByteVector *self, PyObject *args)
            {
              jint a0;
              jbyte a1;

              if (!parseArgs(args, "IB", &a0, &a1))
              {
                OBJ_CALL(self->object.put(a0, a1));
                Py_RETURN_NONE;
              }

              PyErr_SetArgsError((PyObject *) self, "put", args);
              return NULL;
            }

            static PyObject *t_ByteVector_trimToSize(t_ByteVector *self)
            {
              OBJ_CALL(self->object.trimToSize());
              Py_RETURN_NONE;
            }

            static PyObject *t_ByteVector_get__array(t_ByteVector *self, void *data)
            {
              JArray< jbyte > value((jobject) NULL);
              OBJ_CALL(value = self->object.getArray());
              return value.wrap();
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/util/SetOnce$AlreadySetException.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {

        ::java::lang::Class *SetOnce$AlreadySetException::class$ = NULL;
        jmethodID *SetOnce$AlreadySetException::mids$ = NULL;
        bool SetOnce$AlreadySetException::live$ = false;

        jclass SetOnce$AlreadySetException::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/util/SetOnce$AlreadySetException");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_f2cc1bce94666404] = env->getMethodID(cls, "<init>", "()V");

            class$ = new ::java::lang::Class(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        SetOnce$AlreadySetException::SetOnce$AlreadySetException() : ::java::lang::IllegalStateException(env->newObject(initializeClass, &mids$, mid_init$_f2cc1bce94666404)) {}
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        static PyObject *t_SetOnce$AlreadySetException_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_SetOnce$AlreadySetException_instance_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_SetOnce$AlreadySetException_of_(t_SetOnce$AlreadySetException *self, PyObject *args);
        static int t_SetOnce$AlreadySetException_init_(t_SetOnce$AlreadySetException *self, PyObject *args, PyObject *kwds);
        static PyObject *t_SetOnce$AlreadySetException_get__parameters_(t_SetOnce$AlreadySetException *self, void *data);
        static PyGetSetDef t_SetOnce$AlreadySetException__fields_[] = {
          DECLARE_GET_FIELD(t_SetOnce$AlreadySetException, parameters_),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_SetOnce$AlreadySetException__methods_[] = {
          DECLARE_METHOD(t_SetOnce$AlreadySetException, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_SetOnce$AlreadySetException, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_SetOnce$AlreadySetException, of_, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        static PyType_Slot PY_TYPE_SLOTS(SetOnce$AlreadySetException)[] = {
          { Py_tp_methods, t_SetOnce$AlreadySetException__methods_ },
          { Py_tp_init, (void *) t_SetOnce$AlreadySetException_init_ },
          { Py_tp_getset, t_SetOnce$AlreadySetException__fields_ },
          { 0, NULL }
        };

        static PyType_Def *PY_TYPE_BASES(SetOnce$AlreadySetException)[] = {
          &PY_TYPE_DEF(::java::lang::IllegalStateException),
          NULL
        };

        DEFINE_TYPE(SetOnce$AlreadySetException, t_SetOnce$AlreadySetException, SetOnce$AlreadySetException);
        PyObject *t_SetOnce$AlreadySetException::wrap_Object(const SetOnce$AlreadySetException& object, PyTypeObject *p0)
        {
          PyObject *obj = t_SetOnce$AlreadySetException::wrap_Object(object);
          if (obj != NULL && obj != Py_None)
          {
            t_SetOnce$AlreadySetException *self = (t_SetOnce$AlreadySetException *) obj;
            self->parameters[0] = p0;
          }
          return obj;
        }

        PyObject *t_SetOnce$AlreadySetException::wrap_jobject(const jobject& object, PyTypeObject *p0)
        {
          PyObject *obj = t_SetOnce$AlreadySetException::wrap_jobject(object);
          if (obj != NULL && obj != Py_None)
          {
            t_SetOnce$AlreadySetException *self = (t_SetOnce$AlreadySetException *) obj;
            self->parameters[0] = p0;
          }
          return obj;
        }

        void t_SetOnce$AlreadySetException::install(PyObject *module)
        {
          installType(&PY_TYPE(SetOnce$AlreadySetException), &PY_TYPE_DEF(SetOnce$AlreadySetException), module, "SetOnce$AlreadySetException", 0);
        }

        void t_SetOnce$AlreadySetException::initialize(PyObject *module)
        {
          PyObject_SetAttrString((PyObject *) PY_TYPE(SetOnce$AlreadySetException), "class_", make_descriptor(SetOnce$AlreadySetException::initializeClass, 1));
          PyObject_SetAttrString((PyObject *) PY_TYPE(SetOnce$AlreadySetException), "wrapfn_", make_descriptor(t_SetOnce$AlreadySetException::wrap_jobject));
          PyObject_SetAttrString((PyObject *) PY_TYPE(SetOnce$AlreadySetException), "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_SetOnce$AlreadySetException_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, SetOnce$AlreadySetException::initializeClass, 1)))
            return NULL;
          return t_SetOnce$AlreadySetException::wrap_Object(SetOnce$AlreadySetException(((t_SetOnce$AlreadySetException *) arg)->object.this$));
        }
        static PyObject *t_SetOnce$AlreadySetException_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, SetOnce$AlreadySetException::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static PyObject *t_SetOnce$AlreadySetException_of_(t_SetOnce$AlreadySetException *self, PyObject *args)
        {
          if (!parseArg(args, "T", 1, &(self->parameters)))
            Py_RETURN_SELF;
          return PyErr_SetArgsError((PyObject *) self, "of_", args);
        }

        static int t_SetOnce$AlreadySetException_init_(t_SetOnce$AlreadySetException *self, PyObject *args, PyObject *kwds)
        {
          SetOnce$AlreadySetException object((jobject) NULL);

          INT_CALL(object = SetOnce$AlreadySetException());
          self->object = object;

          return 0;
        }
        static PyObject *t_SetOnce$AlreadySetException_get__parameters_(t_SetOnce$AlreadySetException *self, void *data)
        {
          return typeParameters(self->parameters, sizeof(self->parameters));
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/de/GermanStemFilter.h"
#include "org/apache/lucene/analysis/de/GermanStemmer.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/analysis/TokenStream.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace de {

          ::java::lang::Class *GermanStemFilter::class$ = NULL;
          jmethodID *GermanStemFilter::mids$ = NULL;
          bool GermanStemFilter::live$ = false;

          jclass GermanStemFilter::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/de/GermanStemFilter");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_c26756868a754f4e] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/analysis/TokenStream;)V");
              mids$[mid_incrementToken_8454bd5aa23fd11e] = env->getMethodID(cls, "incrementToken", "()Z");
              mids$[mid_setStemmer_b79d03a38dfc3903] = env->getMethodID(cls, "setStemmer", "(Lorg/apache/lucene/analysis/de/GermanStemmer;)V");

              class$ = new ::java::lang::Class(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          GermanStemFilter::GermanStemFilter(const ::org::apache::lucene::analysis::TokenStream & a0) : ::org::apache::lucene::analysis::TokenFilter(env->newObject(initializeClass, &mids$, mid_init$_c26756868a754f4e, a0.this$)) {}

          jboolean GermanStemFilter::incrementToken() const
          {
            return env->callBooleanMethod(this$, mids$[mid_incrementToken_8454bd5aa23fd11e]);
          }

          void GermanStemFilter::setStemmer(const ::org::apache::lucene::analysis::de::GermanStemmer & a0) const
          {
            env->callVoidMethod(this$, mids$[mid_setStemmer_b79d03a38dfc3903], a0.this$);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace de {
          static PyObject *t_GermanStemFilter_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_GermanStemFilter_instance_(PyTypeObject *type, PyObject *arg);
          static int t_GermanStemFilter_init_(t_GermanStemFilter *self, PyObject *args, PyObject *kwds);
          static PyObject *t_GermanStemFilter_incrementToken(t_GermanStemFilter *self, PyObject *args);
          static PyObject *t_GermanStemFilter_setStemmer(t_GermanStemFilter *self, PyObject *arg);
          static int t_GermanStemFilter_set__stemmer(t_GermanStemFilter *self, PyObject *arg, void *data);
          static PyGetSetDef t_GermanStemFilter__fields_[] = {
            DECLARE_SET_FIELD(t_GermanStemFilter, stemmer),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_GermanStemFilter__methods_[] = {
            DECLARE_METHOD(t_GermanStemFilter, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_GermanStemFilter, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_GermanStemFilter, incrementToken, METH_VARARGS),
            DECLARE_METHOD(t_GermanStemFilter, setStemmer, METH_O),
            { NULL, NULL, 0, NULL }
          };

          static PyType_Slot PY_TYPE_SLOTS(GermanStemFilter)[] = {
            { Py_tp_methods, t_GermanStemFilter__methods_ },
            { Py_tp_init, (void *) t_GermanStemFilter_init_ },
            { Py_tp_getset, t_GermanStemFilter__fields_ },
            { 0, NULL }
          };

          static PyType_Def *PY_TYPE_BASES(GermanStemFilter)[] = {
            &PY_TYPE_DEF(::org::apache::lucene::analysis::TokenFilter),
            NULL
          };

          DEFINE_TYPE(GermanStemFilter, t_GermanStemFilter, GermanStemFilter);

          void t_GermanStemFilter::install(PyObject *module)
          {
            installType(&PY_TYPE(GermanStemFilter), &PY_TYPE_DEF(GermanStemFilter), module, "GermanStemFilter", 0);
          }

          void t_GermanStemFilter::initialize(PyObject *module)
          {
            PyObject_SetAttrString((PyObject *) PY_TYPE(GermanStemFilter), "class_", make_descriptor(GermanStemFilter::initializeClass, 1));
            PyObject_SetAttrString((PyObject *) PY_TYPE(GermanStemFilter), "wrapfn_", make_descriptor(t_GermanStemFilter::wrap_jobject));
            PyObject_SetAttrString((PyObject *) PY_TYPE(GermanStemFilter), "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_GermanStemFilter_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, GermanStemFilter::initializeClass, 1)))
              return NULL;
            return t_GermanStemFilter::wrap_Object(GermanStemFilter(((t_GermanStemFilter *) arg)->object.this$));
          }
          static PyObject *t_GermanStemFilter_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, GermanStemFilter::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_GermanStemFilter_init_(t_GermanStemFilter *self, PyObject *args, PyObject *kwds)
          {
            ::org::apache::lucene::analysis::TokenStream a0((jobject) NULL);
            GermanStemFilter object((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::analysis::TokenStream::initializeClass, &a0))
            {
              INT_CALL(object = GermanStemFilter(a0));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_GermanStemFilter_incrementToken(t_GermanStemFilter *self, PyObject *args)
          {
            jboolean result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.incrementToken());
              Py_RETURN_BOOL(result);
            }

            return callSuper(PY_TYPE(GermanStemFilter), (PyObject *) self, "incrementToken", args, 2);
          }

          static PyObject *t_GermanStemFilter_setStemmer(t_GermanStemFilter *self, PyObject *arg)
          {
            ::org::apache::lucene::analysis::de::GermanStemmer a0((jobject) NULL);

            if (!parseArg(arg, "k", ::org::apache::lucene::analysis::de::GermanStemmer::initializeClass, &a0))
            {
              OBJ_CALL(self->object.setStemmer(a0));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError((PyObject *) self, "setStemmer", arg);
            return NULL;
          }

          static int t_GermanStemFilter_set__stemmer(t_GermanStemFilter *self, PyObject *arg, void *data)
          {
            {
              ::org::apache::lucene::analysis::de::GermanStemmer value((jobject) NULL);
              if (!parseArg(arg, "k", ::org::apache::lucene::analysis::de::GermanStemmer::initializeClass, &value))
              {
                INT_CALL(self->object.setStemmer(value));
                return 0;
              }
            }
            PyErr_SetArgsError((PyObject *) self, "stemmer", arg);
            return -1;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/suggest/Lookup$LookupResult.h"
#include "java/lang/Comparable.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/util/BytesRef.h"
#include "java/lang/String.h"
#include "org/apache/lucene/search/suggest/Lookup$LookupResult.h"
#include "java/util/Set.h"
#include "java/lang/CharSequence.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace suggest {

          ::java::lang::Class *Lookup$LookupResult::class$ = NULL;
          jmethodID *Lookup$LookupResult::mids$ = NULL;
          jfieldID *Lookup$LookupResult::fids$ = NULL;
          bool Lookup$LookupResult::live$ = false;

          jclass Lookup$LookupResult::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/search/suggest/Lookup$LookupResult");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_098bb2c0a5d3bca3] = env->getMethodID(cls, "<init>", "(Ljava/lang/CharSequence;J)V");
              mids$[mid_init$_18157332824b3046] = env->getMethodID(cls, "<init>", "(Ljava/lang/CharSequence;JLorg/apache/lucene/util/BytesRef;)V");
              mids$[mid_init$_40577f8bec6feeb5] = env->getMethodID(cls, "<init>", "(Ljava/lang/CharSequence;JLjava/util/Set;)V");
              mids$[mid_init$_49900d2cf3120d67] = env->getMethodID(cls, "<init>", "(Ljava/lang/CharSequence;Ljava/lang/Object;JLorg/apache/lucene/util/BytesRef;)V");
              mids$[mid_init$_0d53df5f5b751bca] = env->getMethodID(cls, "<init>", "(Ljava/lang/CharSequence;JLorg/apache/lucene/util/BytesRef;Ljava/util/Set;)V");
              mids$[mid_init$_5ac8cc24ba8e1d06] = env->getMethodID(cls, "<init>", "(Ljava/lang/CharSequence;Ljava/lang/Object;JLorg/apache/lucene/util/BytesRef;Ljava/util/Set;)V");
              mids$[mid_compareTo_ccbca25e430ae561] = env->getMethodID(cls, "compareTo", "(Lorg/apache/lucene/search/suggest/Lookup$LookupResult;)I");
              mids$[mid_toString_db9b55ba01e03e4b] = env->getMethodID(cls, "toString", "()Ljava/lang/String;");

              fids$ = new jfieldID[max_fid];
              fids$[fid_contexts] = env->getFieldID(cls, "contexts", "Ljava/util/Set;");
              fids$[fid_highlightKey] = env->getFieldID(cls, "highlightKey", "Ljava/lang/Object;");
              fids$[fid_key] = env->getFieldID(cls, "key", "Ljava/lang/CharSequence;");
              fids$[fid_payload] = env->getFieldID(cls, "payload", "Lorg/apache/lucene/util/BytesRef;");
              fids$[fid_value] = env->getFieldID(cls, "value", "J");

              class$ = new ::java::lang::Class(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          Lookup$LookupResult::Lookup$LookupResult(const ::java::lang::CharSequence & a0, jlong a1) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_098bb2c0a5d3bca3, a0.this$, a1)) {}

          Lookup$LookupResult::Lookup$LookupResult(const ::java::lang::CharSequence & a0, jlong a1, const ::org::apache::lucene::util::BytesRef & a2) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_18157332824b3046, a0.this$, a1, a2.this$)) {}

          Lookup$LookupResult::Lookup$LookupResult(const ::java::lang::CharSequence & a0, jlong a1, const ::java::util::Set & a2) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_40577f8bec6feeb5, a0.this$, a1, a2.this$)) {}

          Lookup$LookupResult::Lookup$LookupResult(const ::java::lang::CharSequence & a0, const ::java::lang::Object & a1, jlong a2, const ::org::apache::lucene::util::BytesRef & a3) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_49900d2cf3120d67, a0.this$, a1.this$, a2, a3.this$)) {}

          Lookup$LookupResult::Lookup$LookupResult(const ::java::lang::CharSequence & a0, jlong a1, const ::org::apache::lucene::util::BytesRef & a2, const ::java::util::Set & a3) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_0d53df5f5b751bca, a0.this$, a1, a2.this$, a3.this$)) {}

          Lookup$LookupResult::Lookup$LookupResult(const ::java::lang::CharSequence & a0, const ::java::lang::Object & a1, jlong a2, const ::org::apache::lucene::util::BytesRef & a3, const ::java::util::Set & a4) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_5ac8cc24ba8e1d06, a0.this$, a1.this$, a2, a3.this$, a4.this$)) {}

          jint Lookup$LookupResult::compareTo(const Lookup$LookupResult & a0) const
          {
            return env->callIntMethod(this$, mids$[mid_compareTo_ccbca25e430ae561], a0.this$);
          }

          ::java::lang::String Lookup$LookupResult::toString() const
          {
            return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_db9b55ba01e03e4b]));
          }

          ::java::util::Set Lookup$LookupResult::_get_contexts() const
          {
            return ::java::util::Set(env->getObjectField(this$, fids$[fid_contexts]));
          }

          ::java::lang::Object Lookup$LookupResult::_get_highlightKey() const
          {
            return ::java::lang::Object(env->getObjectField(this$, fids$[fid_highlightKey]));
          }

          ::java::lang::CharSequence Lookup$LookupResult::_get_key() const
          {
            return ::java::lang::CharSequence(env->getObjectField(this$, fids$[fid_key]));
          }

          ::org::apache::lucene::util::BytesRef Lookup$LookupResult::_get_payload() const
          {
            return ::org::apache::lucene::util::BytesRef(env->getObjectField(this$, fids$[fid_payload]));
          }

          jlong Lookup$LookupResult::_get_value() const
          {
            return env->getLongField(this$, fids$[fid_value]);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace suggest {
          static PyObject *t_Lookup$LookupResult_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_Lookup$LookupResult_instance_(PyTypeObject *type, PyObject *arg);
          static int t_Lookup$LookupResult_init_(t_Lookup$LookupResult *self, PyObject *args, PyObject *kwds);
          static PyObject *t_Lookup$LookupResult_compareTo(t_Lookup$LookupResult *self, PyObject *arg);
          static PyObject *t_Lookup$LookupResult_toString(t_Lookup$LookupResult *self, PyObject *args);
          static PyObject *t_Lookup$LookupResult_get__contexts(t_Lookup$LookupResult *self, void *data);
          static PyObject *t_Lookup$LookupResult_get__highlightKey(t_Lookup$LookupResult *self, void *data);
          static PyObject *t_Lookup$LookupResult_get__key(t_Lookup$LookupResult *self, void *data);
          static PyObject *t_Lookup$LookupResult_get__payload(t_Lookup$LookupResult *self, void *data);
          static PyObject *t_Lookup$LookupResult_get__value(t_Lookup$LookupResult *self, void *data);

          static PyGetSetDef t_Lookup$LookupResult__fields_[] = {
            DECLARE_GET_FIELD(t_Lookup$LookupResult, contexts),
            DECLARE_GET_FIELD(t_Lookup$LookupResult, highlightKey),
            DECLARE_GET_FIELD(t_Lookup$LookupResult, key),
            DECLARE_GET_FIELD(t_Lookup$LookupResult, payload),
            DECLARE_GET_FIELD(t_Lookup$LookupResult, value),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_Lookup$LookupResult__methods_[] = {
            DECLARE_METHOD(t_Lookup$LookupResult, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_Lookup$LookupResult, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_Lookup$LookupResult, compareTo, METH_O),
            DECLARE_METHOD(t_Lookup$LookupResult, toString, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          static PyType_Slot PY_TYPE_SLOTS(Lookup$LookupResult)[] = {
            { Py_tp_methods, t_Lookup$LookupResult__methods_ },
            { Py_tp_init, (void *) t_Lookup$LookupResult_init_ },
            { Py_tp_getset, t_Lookup$LookupResult__fields_ },
            { 0, NULL }
          };

          static PyType_Def *PY_TYPE_BASES(Lookup$LookupResult)[] = {
            &PY_TYPE_DEF(::java::lang::Object),
            NULL
          };

          DEFINE_TYPE(Lookup$LookupResult, t_Lookup$LookupResult, Lookup$LookupResult);

          void t_Lookup$LookupResult::install(PyObject *module)
          {
            installType(&PY_TYPE(Lookup$LookupResult), &PY_TYPE_DEF(Lookup$LookupResult), module, "Lookup$LookupResult", 0);
          }

          void t_Lookup$LookupResult::initialize(PyObject *module)
          {
            PyObject_SetAttrString((PyObject *) PY_TYPE(Lookup$LookupResult), "class_", make_descriptor(Lookup$LookupResult::initializeClass, 1));
            PyObject_SetAttrString((PyObject *) PY_TYPE(Lookup$LookupResult), "wrapfn_", make_descriptor(t_Lookup$LookupResult::wrap_jobject));
            PyObject_SetAttrString((PyObject *) PY_TYPE(Lookup$LookupResult), "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_Lookup$LookupResult_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, Lookup$LookupResult::initializeClass, 1)))
              return NULL;
            return t_Lookup$LookupResult::wrap_Object(Lookup$LookupResult(((t_Lookup$LookupResult *) arg)->object.this$));
          }
          static PyObject *t_Lookup$LookupResult_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, Lookup$LookupResult::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_Lookup$LookupResult_init_(t_Lookup$LookupResult *self, PyObject *args, PyObject *kwds)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 2:
              {
                ::java::lang::CharSequence a0((jobject) NULL);
                jlong a1;
                Lookup$LookupResult object((jobject) NULL);

                if (!parseArgs(args, "OJ", ::java::lang::PY_TYPE(CharSequence), &a0, &a1))
                {
                  INT_CALL(object = Lookup$LookupResult(a0, a1));
                  self->object = object;
                  break;
                }
              }
              goto err;
             case 3:
              {
                ::java::lang::CharSequence a0((jobject) NULL);
                jlong a1;
                ::org::apache::lucene::util::BytesRef a2((jobject) NULL);
                Lookup$LookupResult object((jobject) NULL);

                if (!parseArgs(args, "OJk", ::java::lang::PY_TYPE(CharSequence), ::org::apache::lucene::util::BytesRef::initializeClass, &a0, &a1, &a2))
                {
                  INT_CALL(object = Lookup$LookupResult(a0, a1, a2));
                  self->object = object;
                  break;
                }
              }
              {
                ::java::lang::CharSequence a0((jobject) NULL);
                jlong a1;
                ::java::util::Set a2((jobject) NULL);
                PyTypeObject **p2;
                Lookup$LookupResult object((jobject) NULL);

                if (!parseArgs(args, "OJK", ::java::lang::PY_TYPE(CharSequence), ::java::util::Set::initializeClass, &a0, &a1, &a2, &p2, ::java::util::t_Set::parameters_))
                {
                  INT_CALL(object = Lookup$LookupResult(a0, a1, a2));
                  self->object = object;
                  break;
                }
              }
              goto err;
             case 4:
              {
                ::java::lang::CharSequence a0((jobject) NULL);
                ::java::lang::Object a1((jobject) NULL);
                jlong a2;
                ::org::apache::lucene::util::BytesRef a3((jobject) NULL);
                Lookup$LookupResult object((jobject) NULL);

                if (!parseArgs(args, "OoJk", ::java::lang::PY_TYPE(CharSequence), ::org::apache::lucene::util::BytesRef::initializeClass, &a0, &a1, &a2, &a3))
                {
                  INT_CALL(object = Lookup$LookupResult(a0, a1, a2, a3));
                  self->object = object;
                  break;
                }
              }
              {
                ::java::lang::CharSequence a0((jobject) NULL);
                jlong a1;
                ::org::apache::lucene::util::BytesRef a2((jobject) NULL);
                ::java::util::Set a3((jobject) NULL);
                PyTypeObject **p3;
                Lookup$LookupResult object((jobject) NULL);

                if (!parseArgs(args, "OJkK", ::java::lang::PY_TYPE(CharSequence), ::org::apache::lucene::util::BytesRef::initializeClass, ::java::util::Set::initializeClass, &a0, &a1, &a2, &a3, &p3, ::java::util::t_Set::parameters_))
                {
                  INT_CALL(object = Lookup$LookupResult(a0, a1, a2, a3));
                  self->object = object;
                  break;
                }
              }
              goto err;
             case 5:
              {
                ::java::lang::CharSequence a0((jobject) NULL);
                ::java::lang::Object a1((jobject) NULL);
                jlong a2;
                ::org::apache::lucene::util::BytesRef a3((jobject) NULL);
                ::java::util::Set a4((jobject) NULL);
                PyTypeObject **p4;
                Lookup$LookupResult object((jobject) NULL);

                if (!parseArgs(args, "OoJkK", ::java::lang::PY_TYPE(CharSequence), ::org::apache::lucene::util::BytesRef::initializeClass, ::java::util::Set::initializeClass, &a0, &a1, &a2, &a3, &a4, &p4, ::java::util::t_Set::parameters_))
                {
                  INT_CALL(object = Lookup$LookupResult(a0, a1, a2, a3, a4));
                  self->object = object;
                  break;
                }
              }
             default:
             err:
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_Lookup$LookupResult_compareTo(t_Lookup$LookupResult *self, PyObject *arg)
          {
            Lookup$LookupResult a0((jobject) NULL);
            jint result;

            if (!parseArg(arg, "k", Lookup$LookupResult::initializeClass, &a0))
            {
              OBJ_CALL(result = self->object.compareTo(a0));
              return PyLong_FromLong((long) result);
            }

            PyErr_SetArgsError((PyObject *) self, "compareTo", arg);
            return NULL;
          }

          static PyObject *t_Lookup$LookupResult_toString(t_Lookup$LookupResult *self, PyObject *args)
          {
            ::java::lang::String result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.toString());
              return j2p(result);
            }

            return callSuper(PY_TYPE(Lookup$LookupResult), (PyObject *) self, "toString", args, 2);
          }

          static PyObject *t_Lookup$LookupResult_get__contexts(t_Lookup$LookupResult *self, void *data)
          {
            ::java::util::Set value((jobject) NULL);
            OBJ_CALL(value = self->object._get_contexts());
            return ::java::util::t_Set::wrap_Object(value);
          }

          static PyObject *t_Lookup$LookupResult_get__highlightKey(t_Lookup$LookupResult *self, void *data)
          {
            ::java::lang::Object value((jobject) NULL);
            OBJ_CALL(value = self->object._get_highlightKey());
            return ::java::lang::t_Object::wrap_Object(value);
          }

          static PyObject *t_Lookup$LookupResult_get__key(t_Lookup$LookupResult *self, void *data)
          {
            ::java::lang::CharSequence value((jobject) NULL);
            OBJ_CALL(value = self->object._get_key());
            return ::java::lang::t_CharSequence::wrap_Object(value);
          }

          static PyObject *t_Lookup$LookupResult_get__payload(t_Lookup$LookupResult *self, void *data)
          {
            ::org::apache::lucene::util::BytesRef value((jobject) NULL);
            OBJ_CALL(value = self->object._get_payload());
            return ::org::apache::lucene::util::t_BytesRef::wrap_Object(value);
          }

          static PyObject *t_Lookup$LookupResult_get__value(t_Lookup$LookupResult *self, void *data)
          {
            jlong value;
            OBJ_CALL(value = self->object._get_value());
            return PyLong_FromLongLong((PY_LONG_LONG) value);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/document/DocumentStoredFieldVisitor.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/index/StoredFieldVisitor$Status.h"
#include "java/lang/String.h"
#include "org/apache/lucene/document/Document.h"
#include "java/util/Set.h"
#include "org/apache/lucene/index/FieldInfo.h"
#include "java/io/IOException.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace document {

        ::java::lang::Class *DocumentStoredFieldVisitor::class$ = NULL;
        jmethodID *DocumentStoredFieldVisitor::mids$ = NULL;
        bool DocumentStoredFieldVisitor::live$ = false;

        jclass DocumentStoredFieldVisitor::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/document/DocumentStoredFieldVisitor");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_f2cc1bce94666404] = env->getMethodID(cls, "<init>", "()V");
            mids$[mid_init$_2fc318b999a7aba3] = env->getMethodID(cls, "<init>", "([Ljava/lang/String;)V");
            mids$[mid_init$_d5a4a8d4b806f0ba] = env->getMethodID(cls, "<init>", "(Ljava/util/Set;)V");
            mids$[mid_binaryField_1d4795e4721fd31d] = env->getMethodID(cls, "binaryField", "(Lorg/apache/lucene/index/FieldInfo;[B)V");
            mids$[mid_doubleField_a30e01309dcb244d] = env->getMethodID(cls, "doubleField", "(Lorg/apache/lucene/index/FieldInfo;D)V");
            mids$[mid_floatField_f28d86c39f09c45a] = env->getMethodID(cls, "floatField", "(Lorg/apache/lucene/index/FieldInfo;F)V");
            mids$[mid_getDocument_0a6ca5ba77e91d76] = env->getMethodID(cls, "getDocument", "()Lorg/apache/lucene/document/Document;");
            mids$[mid_intField_59b56ee38a8bb555] = env->getMethodID(cls, "intField", "(Lorg/apache/lucene/index/FieldInfo;I)V");
            mids$[mid_longField_51ea8ae5f60c6fae] = env->getMethodID(cls, "longField", "(Lorg/apache/lucene/index/FieldInfo;J)V");
            mids$[mid_needsField_6afb8838461a3a79] = env->getMethodID(cls, "needsField", "(Lorg/apache/lucene/index/FieldInfo;)Lorg/apache/lucene/index/StoredFieldVisitor$Status;");
            mids$[mid_stringField_1d4795e4721fd31d] = env->getMethodID(cls, "stringField", "(Lorg/apache/lucene/index/FieldInfo;[B)V");

            class$ = new ::java::lang::Class(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        DocumentStoredFieldVisitor::DocumentStoredFieldVisitor() : ::org::apache::lucene::index::StoredFieldVisitor(env->newObject(initializeClass, &mids$, mid_init$_f2cc1bce94666404)) {}

        DocumentStoredFieldVisitor::DocumentStoredFieldVisitor(const JArray< ::java::lang::String > & a0) : ::org::apache::lucene::index::StoredFieldVisitor(env->newObject(initializeClass, &mids$, mid_init$_2fc318b999a7aba3, a0.this$)) {}

        DocumentStoredFieldVisitor::DocumentStoredFieldVisitor(const ::java::util::Set & a0) : ::org::apache::lucene::index::StoredFieldVisitor(env->newObject(initializeClass, &mids$, mid_init$_d5a4a8d4b806f0ba, a0.this$)) {}

        void DocumentStoredFieldVisitor::binaryField(const ::org::apache::lucene::index::FieldInfo & a0, const JArray< jbyte > & a1) const
        {
          env->callVoidMethod(this$, mids$[mid_binaryField_1d4795e4721fd31d], a0.this$, a1.this$);
        }

        void DocumentStoredFieldVisitor::doubleField(const ::org::apache::lucene::index::FieldInfo & a0, jdouble a1) const
        {
          env->callVoidMethod(this$, mids$[mid_doubleField_a30e01309dcb244d], a0.this$, a1);
        }

        void DocumentStoredFieldVisitor::floatField(const ::org::apache::lucene::index::FieldInfo & a0, jfloat a1) const
        {
          env->callVoidMethod(this$, mids$[mid_floatField_f28d86c39f09c45a], a0.this$, a1);
        }

        ::org::apache::lucene::document::Document DocumentStoredFieldVisitor::getDocument() const
        {
          return ::org::apache::lucene::document::Document(env->callObjectMethod(this$, mids$[mid_getDocument_0a6ca5ba77e91d76]));
        }

        void DocumentStoredFieldVisitor::intField(const ::org::apache::lucene::index::FieldInfo & a0, jint a1) const
        {
          env->callVoidMethod(this$, mids$[mid_intField_59b56ee38a8bb555], a0.this$, a1);
        }

        void DocumentStoredFieldVisitor::longField(const ::org::apache::lucene::index::FieldInfo & a0, jlong a1) const
        {
          env->callVoidMethod(this$, mids$[mid_longField_51ea8ae5f60c6fae], a0.this$, a1);
        }

        ::org::apache::lucene::index::StoredFieldVisitor$Status DocumentStoredFieldVisitor::needsField(const ::org::apache::lucene::index::FieldInfo & a0) const
        {
          return ::org::apache::lucene::index::StoredFieldVisitor$Status(env->callObjectMethod(this$, mids$[mid_needsField_6afb8838461a3a79], a0.this$));
        }

        void DocumentStoredFieldVisitor::stringField(const ::org::apache::lucene::index::FieldInfo & a0, const JArray< jbyte > & a1) const
        {
          env->callVoidMethod(this$, mids$[mid_stringField_1d4795e4721fd31d], a0.this$, a1.this$);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace document {
        static PyObject *t_DocumentStoredFieldVisitor_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_DocumentStoredFieldVisitor_instance_(PyTypeObject *type, PyObject *arg);
        static int t_DocumentStoredFieldVisitor_init_(t_DocumentStoredFieldVisitor *self, PyObject *args, PyObject *kwds);
        static PyObject *t_DocumentStoredFieldVisitor_binaryField(t_DocumentStoredFieldVisitor *self, PyObject *args);
        static PyObject *t_DocumentStoredFieldVisitor_doubleField(t_DocumentStoredFieldVisitor *self, PyObject *args);
        static PyObject *t_DocumentStoredFieldVisitor_floatField(t_DocumentStoredFieldVisitor *self, PyObject *args);
        static PyObject *t_DocumentStoredFieldVisitor_getDocument(t_DocumentStoredFieldVisitor *self);
        static PyObject *t_DocumentStoredFieldVisitor_intField(t_DocumentStoredFieldVisitor *self, PyObject *args);
        static PyObject *t_DocumentStoredFieldVisitor_longField(t_DocumentStoredFieldVisitor *self, PyObject *args);
        static PyObject *t_DocumentStoredFieldVisitor_needsField(t_DocumentStoredFieldVisitor *self, PyObject *args);
        static PyObject *t_DocumentStoredFieldVisitor_stringField(t_DocumentStoredFieldVisitor *self, PyObject *args);
        static PyObject *t_DocumentStoredFieldVisitor_get__document(t_DocumentStoredFieldVisitor *self, void *data);
        static PyGetSetDef t_DocumentStoredFieldVisitor__fields_[] = {
          DECLARE_GET_FIELD(t_DocumentStoredFieldVisitor, document),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_DocumentStoredFieldVisitor__methods_[] = {
          DECLARE_METHOD(t_DocumentStoredFieldVisitor, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_DocumentStoredFieldVisitor, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_DocumentStoredFieldVisitor, binaryField, METH_VARARGS),
          DECLARE_METHOD(t_DocumentStoredFieldVisitor, doubleField, METH_VARARGS),
          DECLARE_METHOD(t_DocumentStoredFieldVisitor, floatField, METH_VARARGS),
          DECLARE_METHOD(t_DocumentStoredFieldVisitor, getDocument, METH_NOARGS),
          DECLARE_METHOD(t_DocumentStoredFieldVisitor, intField, METH_VARARGS),
          DECLARE_METHOD(t_DocumentStoredFieldVisitor, longField, METH_VARARGS),
          DECLARE_METHOD(t_DocumentStoredFieldVisitor, needsField, METH_VARARGS),
          DECLARE_METHOD(t_DocumentStoredFieldVisitor, stringField, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        static PyType_Slot PY_TYPE_SLOTS(DocumentStoredFieldVisitor)[] = {
          { Py_tp_methods, t_DocumentStoredFieldVisitor__methods_ },
          { Py_tp_init, (void *) t_DocumentStoredFieldVisitor_init_ },
          { Py_tp_getset, t_DocumentStoredFieldVisitor__fields_ },
          { 0, NULL }
        };

        static PyType_Def *PY_TYPE_BASES(DocumentStoredFieldVisitor)[] = {
          &PY_TYPE_DEF(::org::apache::lucene::index::StoredFieldVisitor),
          NULL
        };

        DEFINE_TYPE(DocumentStoredFieldVisitor, t_DocumentStoredFieldVisitor, DocumentStoredFieldVisitor);

        void t_DocumentStoredFieldVisitor::install(PyObject *module)
        {
          installType(&PY_TYPE(DocumentStoredFieldVisitor), &PY_TYPE_DEF(DocumentStoredFieldVisitor), module, "DocumentStoredFieldVisitor", 0);
        }

        void t_DocumentStoredFieldVisitor::initialize(PyObject *module)
        {
          PyObject_SetAttrString((PyObject *) PY_TYPE(DocumentStoredFieldVisitor), "class_", make_descriptor(DocumentStoredFieldVisitor::initializeClass, 1));
          PyObject_SetAttrString((PyObject *) PY_TYPE(DocumentStoredFieldVisitor), "wrapfn_", make_descriptor(t_DocumentStoredFieldVisitor::wrap_jobject));
          PyObject_SetAttrString((PyObject *) PY_TYPE(DocumentStoredFieldVisitor), "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_DocumentStoredFieldVisitor_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, DocumentStoredFieldVisitor::initializeClass, 1)))
            return NULL;
          return t_DocumentStoredFieldVisitor::wrap_Object(DocumentStoredFieldVisitor(((t_DocumentStoredFieldVisitor *) arg)->object.this$));
        }
        static PyObject *t_DocumentStoredFieldVisitor_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, DocumentStoredFieldVisitor::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_DocumentStoredFieldVisitor_init_(t_DocumentStoredFieldVisitor *self, PyObject *args, PyObject *kwds)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 0:
            {
              DocumentStoredFieldVisitor object((jobject) NULL);

              INT_CALL(object = DocumentStoredFieldVisitor());
              self->object = object;
              break;
            }
           case 1:
            {
              JArray< ::java::lang::String > a0((jobject) NULL);
              DocumentStoredFieldVisitor object((jobject) NULL);

              if (!parseArgs(args, "[s", &a0))
              {
                INT_CALL(object = DocumentStoredFieldVisitor(a0));
                self->object = object;
                break;
              }
            }
            {
              ::java::util::Set a0((jobject) NULL);
              PyTypeObject **p0;
              DocumentStoredFieldVisitor object((jobject) NULL);

              if (!parseArgs(args, "K", ::java::util::Set::initializeClass, &a0, &p0, ::java::util::t_Set::parameters_))
              {
                INT_CALL(object = DocumentStoredFieldVisitor(a0));
                self->object = object;
                break;
              }
            }
           default:
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }

        static PyObject *t_DocumentStoredFieldVisitor_binaryField(t_DocumentStoredFieldVisitor *self, PyObject *args)
        {
          ::org::apache::lucene::index::FieldInfo a0((jobject) NULL);
          JArray< jbyte > a1((jobject) NULL);

          if (!parseArgs(args, "k[B", ::org::apache::lucene::index::FieldInfo::initializeClass, &a0, &a1))
          {
            OBJ_CALL(self->object.binaryField(a0, a1));
            Py_RETURN_NONE;
          }

          return callSuper(PY_TYPE(DocumentStoredFieldVisitor), (PyObject *) self, "binaryField", args, 2);
        }

        static PyObject *t_DocumentStoredFieldVisitor_doubleField(t_DocumentStoredFieldVisitor *self, PyObject *args)
        {
          ::org::apache::lucene::index::FieldInfo a0((jobject) NULL);
          jdouble a1;

          if (!parseArgs(args, "kD", ::org::apache::lucene::index::FieldInfo::initializeClass, &a0, &a1))
          {
            OBJ_CALL(self->object.doubleField(a0, a1));
            Py_RETURN_NONE;
          }

          return callSuper(PY_TYPE(DocumentStoredFieldVisitor), (PyObject *) self, "doubleField", args, 2);
        }

        static PyObject *t_DocumentStoredFieldVisitor_floatField(t_DocumentStoredFieldVisitor *self, PyObject *args)
        {
          ::org::apache::lucene::index::FieldInfo a0((jobject) NULL);
          jfloat a1;

          if (!parseArgs(args, "kF", ::org::apache::lucene::index::FieldInfo::initializeClass, &a0, &a1))
          {
            OBJ_CALL(self->object.floatField(a0, a1));
            Py_RETURN_NONE;
          }

          return callSuper(PY_TYPE(DocumentStoredFieldVisitor), (PyObject *) self, "floatField", args, 2);
        }

        static PyObject *t_DocumentStoredFieldVisitor_getDocument(t_DocumentStoredFieldVisitor *self)
        {
          ::org::apache::lucene::document::Document result((jobject) NULL);
          OBJ_CALL(result = self->object.getDocument());
          return ::org::apache::lucene::document::t_Document::wrap_Object(result);
        }

        static PyObject *t_DocumentStoredFieldVisitor_intField(t_DocumentStoredFieldVisitor *self, PyObject *args)
        {
          ::org::apache::lucene::index::FieldInfo a0((jobject) NULL);
          jint a1;

          if (!parseArgs(args, "kI", ::org::apache::lucene::index::FieldInfo::initializeClass, &a0, &a1))
          {
            OBJ_CALL(self->object.intField(a0, a1));
            Py_RETURN_NONE;
          }

          return callSuper(PY_TYPE(DocumentStoredFieldVisitor), (PyObject *) self, "intField", args, 2);
        }

        static PyObject *t_DocumentStoredFieldVisitor_longField(t_DocumentStoredFieldVisitor *self, PyObject *args)
        {
          ::org::apache::lucene::index::FieldInfo a0((jobject) NULL);
          jlong a1;

          if (!parseArgs(args, "kJ", ::org::apache::lucene::index::FieldInfo::initializeClass, &a0, &a1))
          {
            OBJ_CALL(self->object.longField(a0, a1));
            Py_RETURN_NONE;
          }

          return callSuper(PY_TYPE(DocumentStoredFieldVisitor), (PyObject *) self, "longField", args, 2);
        }

        static PyObject *t_DocumentStoredFieldVisitor_needsField(t_DocumentStoredFieldVisitor *self, PyObject *args)
        {
          ::org::apache::lucene::index::FieldInfo a0((jobject) NULL);
          ::org::apache::lucene::index::StoredFieldVisitor$Status result((jobject) NULL);

          if (!parseArgs(args, "k", ::org::apache::lucene::index::FieldInfo::initializeClass, &a0))
          {
            OBJ_CALL(result = self->object.needsField(a0));
            return ::org::apache::lucene::index::t_StoredFieldVisitor$Status::wrap_Object(result);
          }

          return callSuper(PY_TYPE(DocumentStoredFieldVisitor), (PyObject *) self, "needsField", args, 2);
        }

        static PyObject *t_DocumentStoredFieldVisitor_stringField(t_DocumentStoredFieldVisitor *self, PyObject *args)
        {
          ::org::apache::lucene::index::FieldInfo a0((jobject) NULL);
          JArray< jbyte > a1((jobject) NULL);

          if (!parseArgs(args, "k[B", ::org::apache::lucene::index::FieldInfo::initializeClass, &a0, &a1))
          {
            OBJ_CALL(self->object.stringField(a0, a1));
            Py_RETURN_NONE;
          }

          return callSuper(PY_TYPE(DocumentStoredFieldVisitor), (PyObject *) self, "stringField", args, 2);
        }

        static PyObject *t_DocumentStoredFieldVisitor_get__document(t_DocumentStoredFieldVisitor *self, void *data)
        {
          ::org::apache::lucene::document::Document value((jobject) NULL);
          OBJ_CALL(value = self->object.getDocument());
          return ::org::apache::lucene::document::t_Document::wrap_Object(value);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queryparser/classic/Token.h"
#include "org/apache/lucene/queryparser/classic/Token.h"
#include "java/lang/Class.h"
#include "java/lang/String.h"
#include "java/io/Serializable.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace classic {

          ::java::lang::Class *Token::class$ = NULL;
          jmethodID *Token::mids$ = NULL;
          jfieldID *Token::fids$ = NULL;
          bool Token::live$ = false;

          jclass Token::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/queryparser/classic/Token");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_f2cc1bce94666404] = env->getMethodID(cls, "<init>", "()V");
              mids$[mid_init$_040c4cd0390c5aff] = env->getMethodID(cls, "<init>", "(I)V");
              mids$[mid_init$_836a82ec1a65a0bc] = env->getMethodID(cls, "<init>", "(ILjava/lang/String;)V");
              mids$[mid_getValue_d6bcd06f3102c4d9] = env->getMethodID(cls, "getValue", "()Ljava/lang/Object;");
              mids$[mid_newToken_9e9a7409044819d9] = env->getStaticMethodID(cls, "newToken", "(I)Lorg/apache/lucene/queryparser/classic/Token;");
              mids$[mid_newToken_177abf1322039eea] = env->getStaticMethodID(cls, "newToken", "(ILjava/lang/String;)Lorg/apache/lucene/queryparser/classic/Token;");
              mids$[mid_toString_db9b55ba01e03e4b] = env->getMethodID(cls, "toString", "()Ljava/lang/String;");

              fids$ = new jfieldID[max_fid];
              fids$[fid_beginColumn] = env->getFieldID(cls, "beginColumn", "I");
              fids$[fid_beginLine] = env->getFieldID(cls, "beginLine", "I");
              fids$[fid_endColumn] = env->getFieldID(cls, "endColumn", "I");
              fids$[fid_endLine] = env->getFieldID(cls, "endLine", "I");
              fids$[fid_image] = env->getFieldID(cls, "image", "Ljava/lang/String;");
              fids$[fid_kind] = env->getFieldID(cls, "kind", "I");
              fids$[fid_next] = env->getFieldID(cls, "next", "Lorg/apache/lucene/queryparser/classic/Token;");
              fids$[fid_specialToken] = env->getFieldID(cls, "specialToken", "Lorg/apache/lucene/queryparser/classic/Token;");

              class$ = new ::java::lang::Class(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          Token::Token() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_f2cc1bce94666404)) {}

          Token::Token(jint a0) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_040c4cd0390c5aff, a0)) {}

          Token::Token(jint a0, const ::java::lang::String & a1) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_836a82ec1a65a0bc, a0, a1.this$)) {}

          ::java::lang::Object Token::getValue() const
          {
            return ::java::lang::Object(env->callObjectMethod(this$, mids$[mid_getValue_d6bcd06f3102c4d9]));
          }

          Token Token::newToken(jint a0)
          {
            jclass cls = env->getClass(initializeClass);
            return Token(env->callStaticObjectMethod(cls, mids$[mid_newToken_9e9a7409044819d9], a0));
          }

          Token Token::newToken(jint a0, const ::java::lang::String & a1)
          {
            jclass cls = env->getClass(initializeClass);
            return Token(env->callStaticObjectMethod(cls, mids$[mid_newToken_177abf1322039eea], a0, a1.this$));
          }

          ::java::lang::String Token::toString() const
          {
            return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_db9b55ba01e03e4b]));
          }

          jint Token::_get_beginColumn() const
          {
            return env->getIntField(this$, fids$[fid_beginColumn]);
          }

          void Token::_set_beginColumn(jint a0) const
          {
            env->setIntField(this$, fids$[fid_beginColumn], a0);
          }

          jint Token::_get_beginLine() const
          {
            return env->getIntField(this$, fids$[fid_beginLine]);
          }

          void Token::_set_beginLine(jint a0) const
          {
            env->setIntField(this$, fids$[fid_beginLine], a0);
          }

          jint Token::_get_endColumn() const
          {
            return env->getIntField(this$, fids$[fid_endColumn]);
          }

          void Token::_set_endColumn(jint a0) const
          {
            env->setIntField(this$, fids$[fid_endColumn], a0);
          }

          jint Token::_get_endLine() const
          {
            return env->getIntField(this$, fids$[fid_endLine]);
          }

          void Token::_set_endLine(jint a0) const
          {
            env->setIntField(this$, fids$[fid_endLine], a0);
          }

          ::java::lang::String Token::_get_image() const
          {
            return ::java::lang::String(env->getObjectField(this$, fids$[fid_image]));
          }

          void Token::_set_image(const ::java::lang::String & a0) const
          {
            env->setObjectField(this$, fids$[fid_image], a0.this$);
          }

          jint Token::_get_kind() const
          {
            return env->getIntField(this$, fids$[fid_kind]);
          }

          void Token::_set_kind(jint a0) const
          {
            env->setIntField(this$, fids$[fid_kind], a0);
          }

          Token Token::_get_next() const
          {
            return Token(env->getObjectField(this$, fids$[fid_next]));
          }

          void Token::_set_next(const Token & a0) const
          {
            env->setObjectField(this$, fids$[fid_next], a0.this$);
          }

          Token Token::_get_specialToken() const
          {
            return Token(env->getObjectField(this$, fids$[fid_specialToken]));
          }

          void Token::_set_specialToken(const Token & a0) const
          {
            env->setObjectField(this$, fids$[fid_specialToken], a0.this$);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace classic {
          static PyObject *t_Token_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_Token_instance_(PyTypeObject *type, PyObject *arg);
          static int t_Token_init_(t_Token *self, PyObject *args, PyObject *kwds);
          static PyObject *t_Token_getValue(t_Token *self);
          static PyObject *t_Token_newToken(PyTypeObject *type, PyObject *args);
          static PyObject *t_Token_toString(t_Token *self, PyObject *args);
          static PyObject *t_Token_get__beginColumn(t_Token *self, void *data);
          static int t_Token_set__beginColumn(t_Token *self, PyObject *arg, void *data);
          static PyObject *t_Token_get__beginLine(t_Token *self, void *data);
          static int t_Token_set__beginLine(t_Token *self, PyObject *arg, void *data);
          static PyObject *t_Token_get__endColumn(t_Token *self, void *data);
          static int t_Token_set__endColumn(t_Token *self, PyObject *arg, void *data);
          static PyObject *t_Token_get__endLine(t_Token *self, void *data);
          static int t_Token_set__endLine(t_Token *self, PyObject *arg, void *data);
          static PyObject *t_Token_get__image(t_Token *self, void *data);
          static int t_Token_set__image(t_Token *self, PyObject *arg, void *data);
          static PyObject *t_Token_get__kind(t_Token *self, void *data);
          static int t_Token_set__kind(t_Token *self, PyObject *arg, void *data);
          static PyObject *t_Token_get__next(t_Token *self, void *data);
          static int t_Token_set__next(t_Token *self, PyObject *arg, void *data);
          static PyObject *t_Token_get__specialToken(t_Token *self, void *data);
          static int t_Token_set__specialToken(t_Token *self, PyObject *arg, void *data);

          static PyObject *t_Token_get__value(t_Token *self, void *data);
          static PyGetSetDef t_Token__fields_[] = {
            DECLARE_GETSET_FIELD(t_Token, beginColumn),
            DECLARE_GETSET_FIELD(t_Token, beginLine),
            DECLARE_GETSET_FIELD(t_Token, endColumn),
            DECLARE_GETSET_FIELD(t_Token, endLine),
            DECLARE_GETSET_FIELD(t_Token, image),
            DECLARE_GETSET_FIELD(t_Token, kind),
            DECLARE_GETSET_FIELD(t_Token, next),
            DECLARE_GETSET_FIELD(t_Token, specialToken),
            DECLARE_GET_FIELD(t_Token, value),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_Token__methods_[] = {
            DECLARE_METHOD(t_Token, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_Token, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_Token, getValue, METH_NOARGS),
            DECLARE_METHOD(t_Token, newToken, METH_VARARGS | METH_CLASS),
            DECLARE_METHOD(t_Token, toString, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          static PyType_Slot PY_TYPE_SLOTS(Token)[] = {
            { Py_tp_methods, t_Token__methods_ },
            { Py_tp_init, (void *) t_Token_init_ },
            { Py_tp_getset, t_Token__fields_ },
            { 0, NULL }
          };

          static PyType_Def *PY_TYPE_BASES(Token)[] = {
            &PY_TYPE_DEF(::java::lang::Object),
            NULL
          };

          DEFINE_TYPE(Token, t_Token, Token);

          void t_Token::install(PyObject *module)
          {
            installType(&PY_TYPE(Token), &PY_TYPE_DEF(Token), module, "Token", 0);
          }

          void t_Token::initialize(PyObject *module)
          {
            PyObject_SetAttrString((PyObject *) PY_TYPE(Token), "class_", make_descriptor(Token::initializeClass, 1));
            PyObject_SetAttrString((PyObject *) PY_TYPE(Token), "wrapfn_", make_descriptor(t_Token::wrap_jobject));
            PyObject_SetAttrString((PyObject *) PY_TYPE(Token), "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_Token_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, Token::initializeClass, 1)))
              return NULL;
            return t_Token::wrap_Object(Token(((t_Token *) arg)->object.this$));
          }
          static PyObject *t_Token_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, Token::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_Token_init_(t_Token *self, PyObject *args, PyObject *kwds)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 0:
              {
                Token object((jobject) NULL);

                INT_CALL(object = Token());
                self->object = object;
                break;
              }
             case 1:
              {
                jint a0;
                Token object((jobject) NULL);

                if (!parseArgs(args, "I", &a0))
                {
                  INT_CALL(object = Token(a0));
                  self->object = object;
                  break;
                }
              }
              goto err;
             case 2:
              {
                jint a0;
                ::java::lang::String a1((jobject) NULL);
                Token object((jobject) NULL);

                if (!parseArgs(args, "Is", &a0, &a1))
                {
                  INT_CALL(object = Token(a0, a1));
                  self->object = object;
                  break;
                }
              }
             default:
             err:
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_Token_getValue(t_Token *self)
          {
            ::java::lang::Object result((jobject) NULL);
            OBJ_CALL(result = self->object.getValue());
            return ::java::lang::t_Object::wrap_Object(result);
          }

          static PyObject *t_Token_newToken(PyTypeObject *type, PyObject *args)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 1:
              {
                jint a0;
                Token result((jobject) NULL);

                if (!parseArgs(args, "I", &a0))
                {
                  OBJ_CALL(result = ::org::apache::lucene::queryparser::classic::Token::newToken(a0));
                  return t_Token::wrap_Object(result);
                }
              }
              break;
             case 2:
              {
                jint a0;
                ::java::lang::String a1((jobject) NULL);
                Token result((jobject) NULL);

                if (!parseArgs(args, "Is", &a0, &a1))
                {
                  OBJ_CALL(result = ::org::apache::lucene::queryparser::classic::Token::newToken(a0, a1));
                  return t_Token::wrap_Object(result);
                }
              }
            }

            PyErr_SetArgsError(type, "newToken", args);
            return NULL;
          }

          static PyObject *t_Token_toString(t_Token *self, PyObject *args)
          {
            ::java::lang::String result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.toString());
              return j2p(result);
            }

            return callSuper(PY_TYPE(Token), (PyObject *) self, "toString", args, 2);
          }

          static PyObject *t_Token_get__beginColumn(t_Token *self, void *data)
          {
            jint value;
            OBJ_CALL(value = self->object._get_beginColumn());
            return PyLong_FromLong((long) value);
          }
          static int t_Token_set__beginColumn(t_Token *self, PyObject *arg, void *data)
          {
            jint value;
            if (!parseArg(arg, "I", &value))
            {
              INT_CALL(self->object._set_beginColumn(value));
              return 0;
            }
            PyErr_SetArgsError((PyObject *) self, "beginColumn", arg);
            return -1;
          }

          static PyObject *t_Token_get__beginLine(t_Token *self, void *data)
          {
            jint value;
            OBJ_CALL(value = self->object._get_beginLine());
            return PyLong_FromLong((long) value);
          }
          static int t_Token_set__beginLine(t_Token *self, PyObject *arg, void *data)
          {
            jint value;
            if (!parseArg(arg, "I", &value))
            {
              INT_CALL(self->object._set_beginLine(value));
              return 0;
            }
            PyErr_SetArgsError((PyObject *) self, "beginLine", arg);
            return -1;
          }

          static PyObject *t_Token_get__endColumn(t_Token *self, void *data)
          {
            jint value;
            OBJ_CALL(value = self->object._get_endColumn());
            return PyLong_FromLong((long) value);
          }
          static int t_Token_set__endColumn(t_Token *self, PyObject *arg, void *data)
          {
            jint value;
            if (!parseArg(arg, "I", &value))
            {
              INT_CALL(self->object._set_endColumn(value));
              return 0;
            }
            PyErr_SetArgsError((PyObject *) self, "endColumn", arg);
            return -1;
          }

          static PyObject *t_Token_get__endLine(t_Token *self, void *data)
          {
            jint value;
            OBJ_CALL(value = self->object._get_endLine());
            return PyLong_FromLong((long) value);
          }
          static int t_Token_set__endLine(t_Token *self, PyObject *arg, void *data)
          {
            jint value;
            if (!parseArg(arg, "I", &value))
            {
              INT_CALL(self->object._set_endLine(value));
              return 0;
            }
            PyErr_SetArgsError((PyObject *) self, "endLine", arg);
            return -1;
          }

          static PyObject *t_Token_get__image(t_Token *self, void *data)
          {
            ::java::lang::String value((jobject) NULL);
            OBJ_CALL(value = self->object._get_image());
            return j2p(value);
          }
          static int t_Token_set__image(t_Token *self, PyObject *arg, void *data)
          {
            ::java::lang::String value((jobject) NULL);
            if (!parseArg(arg, "s", &value))
            {
              INT_CALL(self->object._set_image(value));
              return 0;
            }
            PyErr_SetArgsError((PyObject *) self, "image", arg);
            return -1;
          }

          static PyObject *t_Token_get__kind(t_Token *self, void *data)
          {
            jint value;
            OBJ_CALL(value = self->object._get_kind());
            return PyLong_FromLong((long) value);
          }
          static int t_Token_set__kind(t_Token *self, PyObject *arg, void *data)
          {
            jint value;
            if (!parseArg(arg, "I", &value))
            {
              INT_CALL(self->object._set_kind(value));
              return 0;
            }
            PyErr_SetArgsError((PyObject *) self, "kind", arg);
            return -1;
          }

          static PyObject *t_Token_get__next(t_Token *self, void *data)
          {
            Token value((jobject) NULL);
            OBJ_CALL(value = self->object._get_next());
            return t_Token::wrap_Object(value);
          }
          static int t_Token_set__next(t_Token *self, PyObject *arg, void *data)
          {
            Token value((jobject) NULL);
            if (!parseArg(arg, "k", Token::initializeClass, &value))
            {
              INT_CALL(self->object._set_next(value));
              return 0;
            }
            PyErr_SetArgsError((PyObject *) self, "next", arg);
            return -1;
          }

          static PyObject *t_Token_get__specialToken(t_Token *self, void *data)
          {
            Token value((jobject) NULL);
            OBJ_CALL(value = self->object._get_specialToken());
            return t_Token::wrap_Object(value);
          }
          static int t_Token_set__specialToken(t_Token *self, PyObject *arg, void *data)
          {
            Token value((jobject) NULL);
            if (!parseArg(arg, "k", Token::initializeClass, &value))
            {
              INT_CALL(self->object._set_specialToken(value));
              return 0;
            }
            PyErr_SetArgsError((PyObject *) self, "specialToken", arg);
            return -1;
          }

          static PyObject *t_Token_get__value(t_Token *self, void *data)
          {
            ::java::lang::Object value((jobject) NULL);
            OBJ_CALL(value = self->object.getValue());
            return ::java::lang::t_Object::wrap_Object(value);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "java/io/PrintWriter.h"
#include "java/io/PrintWriter.h"
#include "java/lang/Class.h"
#include "java/io/FileNotFoundException.h"
#include "java/lang/Object.h"
#include "java/util/Locale.h"
#include "java/lang/CharSequence.h"
#include "java/io/OutputStream.h"
#include "java/lang/String.h"
#include "java/io/File.h"
#include "java/io/UnsupportedEncodingException.h"
#include "JArray.h"

namespace java {
  namespace io {

    ::java::lang::Class *PrintWriter::class$ = NULL;
    jmethodID *PrintWriter::mids$ = NULL;
    bool PrintWriter::live$ = false;

    jclass PrintWriter::initializeClass(bool getOnly)
    {
      if (getOnly)
        return (jclass) (live$ ? class$->this$ : NULL);
      if (class$ == NULL)
      {
        jclass cls = (jclass) env->findClass("java/io/PrintWriter");

        mids$ = new jmethodID[max_mid];
        mids$[mid_init$_7bd45e585db89e9f] = env->getMethodID(cls, "<init>", "(Ljava/io/File;)V");
        mids$[mid_init$_02fcdace254a9894] = env->getMethodID(cls, "<init>", "(Ljava/io/OutputStream;)V");
        mids$[mid_init$_86f814b19baecb9d] = env->getMethodID(cls, "<init>", "(Ljava/io/Writer;)V");
        mids$[mid_init$_9fd2eb66a64e6f0f] = env->getMethodID(cls, "<init>", "(Ljava/lang/String;)V");
        mids$[mid_init$_c80751a79d34c011] = env->getMethodID(cls, "<init>", "(Ljava/io/File;Ljava/lang/String;)V");
        mids$[mid_init$_15b72f6a44ff93f2] = env->getMethodID(cls, "<init>", "(Ljava/lang/String;Ljava/lang/String;)V");
        mids$[mid_init$_539208f3c661c2fc] = env->getMethodID(cls, "<init>", "(Ljava/io/OutputStream;Z)V");
        mids$[mid_init$_f5225e9eb078714c] = env->getMethodID(cls, "<init>", "(Ljava/io/Writer;Z)V");
        mids$[mid_append_4ec980fb2eb0b2de] = env->getMethodID(cls, "append", "(C)Ljava/io/PrintWriter;");
        mids$[mid_append_3c57c570c884851a] = env->getMethodID(cls, "append", "(Ljava/lang/CharSequence;)Ljava/io/PrintWriter;");
        mids$[mid_append_c9a32b256e52dee3] = env->getMethodID(cls, "append", "(Ljava/lang/CharSequence;II)Ljava/io/PrintWriter;");
        mids$[mid_checkError_8454bd5aa23fd11e] = env->getMethodID(cls, "checkError", "()Z");
        mids$[mid_close_f2cc1bce94666404] = env->getMethodID(cls, "close", "()V");
        mids$[mid_flush_f2cc1bce94666404] = env->getMethodID(cls, "flush", "()V");
        mids$[mid_format_6f6452000036181c] = env->getMethodID(cls, "format", "(Ljava/lang/String;[Ljava/lang/Object;)Ljava/io/PrintWriter;");
        mids$[mid_format_3a017636fee8d9b6] = env->getMethodID(cls, "format", "(Ljava/util/Locale;Ljava/lang/String;[Ljava/lang/Object;)Ljava/io/PrintWriter;");
        mids$[mid_print_82dffe1ba55ed767] = env->getMethodID(cls, "print", "([C)V");
        mids$[mid_print_9fd2eb66a64e6f0f] = env->getMethodID(cls, "print", "(Ljava/lang/String;)V");
        mids$[mid_print_9d72768e8fdce2b7] = env->getMethodID(cls, "print", "(Z)V");
        mids$[mid_print_b227b2c08d18d29e] = env->getMethodID(cls, "print", "(C)V");
        mids$[mid_print_3c435f10a3b1e038] = env->getMethodID(cls, "print", "(D)V");
        mids$[mid_print_8e1d952dd65cdc3a] = env->getMethodID(cls, "print", "(F)V");
        mids$[mid_print_040c4cd0390c5aff] = env->getMethodID(cls, "print", "(I)V");
        mids$[mid_print_d20f626183f72f7d] = env->getMethodID(cls, "print", "(Ljava/lang/Object;)V");
        mids$[mid_print_9c778c9bce6694df] = env->getMethodID(cls, "print", "(J)V");
        mids$[mid_printf_6f6452000036181c] = env->getMethodID(cls, "printf", "(Ljava/lang/String;[Ljava/lang/Object;)Ljava/io/PrintWriter;");
        mids$[mid_printf_3a017636fee8d9b6] = env->getMethodID(cls, "printf", "(Ljava/util/Locale;Ljava/lang/String;[Ljava/lang/Object;)Ljava/io/PrintWriter;");
        mids$[mid_println_f2cc1bce94666404] = env->getMethodID(cls, "println", "()V");
        mids$[mid_println_82dffe1ba55ed767] = env->getMethodID(cls, "println", "([C)V");
        mids$[mid_println_9fd2eb66a64e6f0f] = env->getMethodID(cls, "println", "(Ljava/lang/String;)V");
        mids$[mid_println_9d72768e8fdce2b7] = env->getMethodID(cls, "println", "(Z)V");
        mids$[mid_println_b227b2c08d18d29e] = env->getMethodID(cls, "println", "(C)V");
        mids$[mid_println_3c435f10a3b1e038] = env->getMethodID(cls, "println", "(D)V");
        mids$[mid_println_8e1d952dd65cdc3a] = env->getMethodID(cls, "println", "(F)V");
        mids$[mid_println_040c4cd0390c5aff] = env->getMethodID(cls, "println", "(I)V");
        mids$[mid_println_d20f626183f72f7d] = env->getMethodID(cls, "println", "(Ljava/lang/Object;)V");
        mids$[mid_println_9c778c9bce6694df] = env->getMethodID(cls, "println", "(J)V");
        mids$[mid_write_82dffe1ba55ed767] = env->getMethodID(cls, "write", "([C)V");
        mids$[mid_write_9fd2eb66a64e6f0f] = env->getMethodID(cls, "write", "(Ljava/lang/String;)V");
        mids$[mid_write_040c4cd0390c5aff] = env->getMethodID(cls, "write", "(I)V");
        mids$[mid_write_d5128be76a214037] = env->getMethodID(cls, "write", "([CII)V");
        mids$[mid_write_08af6957f9159d4d] = env->getMethodID(cls, "write", "(Ljava/lang/String;II)V");
        mids$[mid_setError_f2cc1bce94666404] = env->getMethodID(cls, "setError", "()V");
        mids$[mid_clearError_f2cc1bce94666404] = env->getMethodID(cls, "clearError", "()V");

        class$ = new ::java::lang::Class(cls);
        live$ = true;
      }
      return (jclass) class$->this$;
    }

    PrintWriter::PrintWriter(const ::java::io::File & a0) : ::java::io::Writer(env->newObject(initializeClass, &mids$, mid_init$_7bd45e585db89e9f, a0.this$)) {}

    PrintWriter::PrintWriter(const ::java::io::OutputStream & a0) : ::java::io::Writer(env->newObject(initializeClass, &mids$, mid_init$_02fcdace254a9894, a0.this$)) {}

    PrintWriter::PrintWriter(const ::java::io::Writer & a0) : ::java::io::Writer(env->newObject(initializeClass, &mids$, mid_init$_86f814b19baecb9d, a0.this$)) {}

    PrintWriter::PrintWriter(const ::java::lang::String & a0) : ::java::io::Writer(env->newObject(initializeClass, &mids$, mid_init$_9fd2eb66a64e6f0f, a0.this$)) {}

    PrintWriter::PrintWriter(const ::java::io::File & a0, const ::java::lang::String & a1) : ::java::io::Writer(env->newObject(initializeClass, &mids$, mid_init$_c80751a79d34c011, a0.this$, a1.this$)) {}

    PrintWriter::PrintWriter(const ::java::lang::String & a0, const ::java::lang::String & a1) : ::java::io::Writer(env->newObject(initializeClass, &mids$, mid_init$_15b72f6a44ff93f2, a0.this$, a1.this$)) {}

    PrintWriter::PrintWriter(const ::java::io::OutputStream & a0, jboolean a1) : ::java::io::Writer(env->newObject(initializeClass, &mids$, mid_init$_539208f3c661c2fc, a0.this$, a1)) {}

    PrintWriter::PrintWriter(const ::java::io::Writer & a0, jboolean a1) : ::java::io::Writer(env->newObject(initializeClass, &mids$, mid_init$_f5225e9eb078714c, a0.this$, a1)) {}

    PrintWriter PrintWriter::append(jchar a0) const
    {
      return PrintWriter(env->callObjectMethod(this$, mids$[mid_append_4ec980fb2eb0b2de], a0));
    }

    PrintWriter PrintWriter::append(const ::java::lang::CharSequence & a0) const
    {
      return PrintWriter(env->callObjectMethod(this$, mids$[mid_append_3c57c570c884851a], a0.this$));
    }

    PrintWriter PrintWriter::append(const ::java::lang::CharSequence & a0, jint a1, jint a2) const
    {
      return PrintWriter(env->callObjectMethod(this$, mids$[mid_append_c9a32b256e52dee3], a0.this$, a1, a2));
    }

    jboolean PrintWriter::checkError() const
    {
      return env->callBooleanMethod(this$, mids$[mid_checkError_8454bd5aa23fd11e]);
    }

    void PrintWriter::close() const
    {
      env->callVoidMethod(this$, mids$[mid_close_f2cc1bce94666404]);
    }

    void PrintWriter::flush() const
    {
      env->callVoidMethod(this$, mids$[mid_flush_f2cc1bce94666404]);
    }

    PrintWriter PrintWriter::format(const ::java::lang::String & a0, const JArray< ::java::lang::Object > & a1) const
    {
      return PrintWriter(env->callObjectMethod(this$, mids$[mid_format_6f6452000036181c], a0.this$, a1.this$));
    }

    PrintWriter PrintWriter::format(const ::java::util::Locale & a0, const ::java::lang::String & a1, const JArray< ::java::lang::Object > & a2) const
    {
      return PrintWriter(env->callObjectMethod(this$, mids$[mid_format_3a017636fee8d9b6], a0.this$, a1.this$, a2.this$));
    }

    void PrintWriter::print(const JArray< jchar > & a0) const
    {
      env->callVoidMethod(this$, mids$[mid_print_82dffe1ba55ed767], a0.this$);
    }

    void PrintWriter::print(const ::java::lang::String & a0) const
    {
      env->callVoidMethod(this$, mids$[mid_print_9fd2eb66a64e6f0f], a0.this$);
    }

    void PrintWriter::print(jboolean a0) const
    {
      env->callVoidMethod(this$, mids$[mid_print_9d72768e8fdce2b7], a0);
    }

    void PrintWriter::print(jchar a0) const
    {
      env->callVoidMethod(this$, mids$[mid_print_b227b2c08d18d29e], a0);
    }

    void PrintWriter::print(jdouble a0) const
    {
      env->callVoidMethod(this$, mids$[mid_print_3c435f10a3b1e038], a0);
    }

    void PrintWriter::print(jfloat a0) const
    {
      env->callVoidMethod(this$, mids$[mid_print_8e1d952dd65cdc3a], a0);
    }

    void PrintWriter::print(jint a0) const
    {
      env->callVoidMethod(this$, mids$[mid_print_040c4cd0390c5aff], a0);
    }

    void PrintWriter::print(const ::java::lang::Object & a0) const
    {
      env->callVoidMethod(this$, mids$[mid_print_d20f626183f72f7d], a0.this$);
    }

    void PrintWriter::print(jlong a0) const
    {
      env->callVoidMethod(this$, mids$[mid_print_9c778c9bce6694df], a0);
    }

    PrintWriter PrintWriter::printf(const ::java::lang::String & a0, const JArray< ::java::lang::Object > & a1) const
    {
      return PrintWriter(env->callObjectMethod(this$, mids$[mid_printf_6f6452000036181c], a0.this$, a1.this$));
    }

    PrintWriter PrintWriter::printf(const ::java::util::Locale & a0, const ::java::lang::String & a1, const JArray< ::java::lang::Object > & a2) const
    {
      return PrintWriter(env->callObjectMethod(this$, mids$[mid_printf_3a017636fee8d9b6], a0.this$, a1.this$, a2.this$));
    }

    void PrintWriter::println() const
    {
      env->callVoidMethod(this$, mids$[mid_println_f2cc1bce94666404]);
    }

    void PrintWriter::println(const JArray< jchar > & a0) const
    {
      env->callVoidMethod(this$, mids$[mid_println_82dffe1ba55ed767], a0.this$);
    }

    void PrintWriter::println(const ::java::lang::String & a0) const
    {
      env->callVoidMethod(this$, mids$[mid_println_9fd2eb66a64e6f0f], a0.this$);
    }

    void PrintWriter::println(jboolean a0) const
    {
      env->callVoidMethod(this$, mids$[mid_println_9d72768e8fdce2b7], a0);
    }

    void PrintWriter::println(jchar a0) const
    {
      env->callVoidMethod(this$, mids$[mid_println_b227b2c08d18d29e], a0);
    }

    void PrintWriter::println(jdouble a0) const
    {
      env->callVoidMethod(this$, mids$[mid_println_3c435f10a3b1e038], a0);
    }

    void PrintWriter::println(jfloat a0) const
    {
      env->callVoidMethod(this$, mids$[mid_println_8e1d952dd65cdc3a], a0);
    }

    void PrintWriter::println(jint a0) const
    {
      env->callVoidMethod(this$, mids$[mid_println_040c4cd0390c5aff], a0);
    }

    void PrintWriter::println(const ::java::lang::Object & a0) const
    {
      env->callVoidMethod(this$, mids$[mid_println_d20f626183f72f7d], a0.this$);
    }

    void PrintWriter::println(jlong a0) const
    {
      env->callVoidMethod(this$, mids$[mid_println_9c778c9bce6694df], a0);
    }

    void PrintWriter::write(const JArray< jchar > & a0) const
    {
      env->callVoidMethod(this$, mids$[mid_write_82dffe1ba55ed767], a0.this$);
    }

    void PrintWriter::write(const ::java::lang::String & a0) const
    {
      env->callVoidMethod(this$, mids$[mid_write_9fd2eb66a64e6f0f], a0.this$);
    }

    void PrintWriter::write(jint a0) const
    {
      env->callVoidMethod(this$, mids$[mid_write_040c4cd0390c5aff], a0);
    }

    void PrintWriter::write(const JArray< jchar > & a0, jint a1, jint a2) const
    {
      env->callVoidMethod(this$, mids$[mid_write_d5128be76a214037], a0.this$, a1, a2);
    }

    void PrintWriter::write(const ::java::lang::String & a0, jint a1, jint a2) const
    {
      env->callVoidMethod(this$, mids$[mid_write_08af6957f9159d4d], a0.this$, a1, a2);
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace java {
  namespace io {
    static PyObject *t_PrintWriter_cast_(PyTypeObject *type, PyObject *arg);
    static PyObject *t_PrintWriter_instance_(PyTypeObject *type, PyObject *arg);
    static int t_PrintWriter_init_(t_PrintWriter *self, PyObject *args, PyObject *kwds);
    static PyObject *t_PrintWriter_append(t_PrintWriter *self, PyObject *args);
    static PyObject *t_PrintWriter_checkError(t_PrintWriter *self);
    static PyObject *t_PrintWriter_close(t_PrintWriter *self, PyObject *args);
    static PyObject *t_PrintWriter_flush(t_PrintWriter *self, PyObject *args);
    static PyObject *t_PrintWriter_format(t_PrintWriter *self, PyObject *args);
    static PyObject *t_PrintWriter_print(t_PrintWriter *self, PyObject *args);
    static PyObject *t_PrintWriter_printf(t_PrintWriter *self, PyObject *args);
    static PyObject *t_PrintWriter_println(t_PrintWriter *self, PyObject *args);
    static PyObject *t_PrintWriter_write(t_PrintWriter *self, PyObject *args);

    static PyMethodDef t_PrintWriter__methods_[] = {
      DECLARE_METHOD(t_PrintWriter, cast_, METH_O | METH_CLASS),
      DECLARE_METHOD(t_PrintWriter, instance_, METH_O | METH_CLASS),
      DECLARE_METHOD(t_PrintWriter, append, METH_VARARGS),
      DECLARE_METHOD(t_PrintWriter, checkError, METH_NOARGS),
      DECLARE_METHOD(t_PrintWriter, close, METH_VARARGS),
      DECLARE_METHOD(t_PrintWriter, flush, METH_VARARGS),
      DECLARE_METHOD(t_PrintWriter, format, METH_VARARGS),
      DECLARE_METHOD(t_PrintWriter, print, METH_VARARGS),
      DECLARE_METHOD(t_PrintWriter, printf, METH_VARARGS),
      DECLARE_METHOD(t_PrintWriter, println, METH_VARARGS),
      DECLARE_METHOD(t_PrintWriter, write, METH_VARARGS),
      { NULL, NULL, 0, NULL }
    };

    static PyType_Slot PY_TYPE_SLOTS(PrintWriter)[] = {
      { Py_tp_methods, t_PrintWriter__methods_ },
      { Py_tp_init, (void *) t_PrintWriter_init_ },
      { 0, NULL }
    };

    static PyType_Def *PY_TYPE_BASES(PrintWriter)[] = {
      &PY_TYPE_DEF(::java::io::Writer),
      NULL
    };

    DEFINE_TYPE(PrintWriter, t_PrintWriter, PrintWriter);

    void t_PrintWriter::install(PyObject *module)
    {
      installType(&PY_TYPE(PrintWriter), &PY_TYPE_DEF(PrintWriter), module, "PrintWriter", 0);
    }

    void t_PrintWriter::initialize(PyObject *module)
    {
      PyObject_SetAttrString((PyObject *) PY_TYPE(PrintWriter), "class_", make_descriptor(PrintWriter::initializeClass, 1));
      PyObject_SetAttrString((PyObject *) PY_TYPE(PrintWriter), "wrapfn_", make_descriptor(t_PrintWriter::wrap_jobject));
      PyObject_SetAttrString((PyObject *) PY_TYPE(PrintWriter), "boxfn_", make_descriptor(boxObject));
    }

    static PyObject *t_PrintWriter_cast_(PyTypeObject *type, PyObject *arg)
    {
      if (!(arg = castCheck(arg, PrintWriter::initializeClass, 1)))
        return NULL;
      return t_PrintWriter::wrap_Object(PrintWriter(((t_PrintWriter *) arg)->object.this$));
    }
    static PyObject *t_PrintWriter_instance_(PyTypeObject *type, PyObject *arg)
    {
      if (!castCheck(arg, PrintWriter::initializeClass, 0))
        Py_RETURN_FALSE;
      Py_RETURN_TRUE;
    }

    static int t_PrintWriter_init_(t_PrintWriter *self, PyObject *args, PyObject *kwds)
    {
      switch (PyTuple_GET_SIZE(args)) {
       case 1:
        {
          ::java::io::File a0((jobject) NULL);
          PrintWriter object((jobject) NULL);

          if (!parseArgs(args, "k", ::java::io::File::initializeClass, &a0))
          {
            INT_CALL(object = PrintWriter(a0));
            self->object = object;
            break;
          }
        }
        {
          ::java::io::OutputStream a0((jobject) NULL);
          PrintWriter object((jobject) NULL);

          if (!parseArgs(args, "k", ::java::io::OutputStream::initializeClass, &a0))
          {
            INT_CALL(object = PrintWriter(a0));
            self->object = object;
            break;
          }
        }
        {
          ::java::io::Writer a0((jobject) NULL);
          PrintWriter object((jobject) NULL);

          if (!parseArgs(args, "k", ::java::io::Writer::initializeClass, &a0))
          {
            INT_CALL(object = PrintWriter(a0));
            self->object = object;
            break;
          }
        }
        {
          ::java::lang::String a0((jobject) NULL);
          PrintWriter object((jobject) NULL);

          if (!parseArgs(args, "s", &a0))
          {
            INT_CALL(object = PrintWriter(a0));
            self->object = object;
            break;
          }
        }
        goto err;
       case 2:
        {
          ::java::io::File a0((jobject) NULL);
          ::java::lang::String a1((jobject) NULL);
          PrintWriter object((jobject) NULL);

          if (!parseArgs(args, "ks", ::java::io::File::initializeClass, &a0, &a1))
          {
            INT_CALL(object = PrintWriter(a0, a1));
            self->object = object;
            break;
          }
        }
        {
          ::java::lang::String a0((jobject) NULL);
          ::java::lang::String a1((jobject) NULL);
          PrintWriter object((jobject) NULL);

          if (!parseArgs(args, "ss", &a0, &a1))
          {
            INT_CALL(object = PrintWriter(a0, a1));
            self->object = object;
            break;
          }
        }
        {
          ::java::io::OutputStream a0((jobject) NULL);
          jboolean a1;
          PrintWriter object((jobject) NULL);

          if (!parseArgs(args, "kZ", ::java::io::OutputStream::initializeClass, &a0, &a1))
          {
            INT_CALL(object = PrintWriter(a0, a1));
            self->object = object;
            break;
          }
        }
        {
          ::java::io::Writer a0((jobject) NULL);
          jboolean a1;
          PrintWriter object((jobject) NULL);

          if (!parseArgs(args, "kZ", ::java::io::Writer::initializeClass, &a0, &a1))
          {
            INT_CALL(object = PrintWriter(a0, a1));
            self->object = object;
            break;
          }
        }
       default:
       err:
        PyErr_SetArgsError((PyObject *) self, "__init__", args);
        return -1;
      }

      return 0;
    }

    static PyObject *t_PrintWriter_append(t_PrintWriter *self, PyObject *args)
    {
      switch (PyTuple_GET_SIZE(args)) {
       case 1:
        {
          jchar a0;
          PrintWriter result((jobject) NULL);

          if (!parseArgs(args, "C", &a0))
          {
            OBJ_CALL(result = self->object.append(a0));
            return t_PrintWriter::wrap_Object(result);
          }
        }
        {
          ::java::lang::CharSequence a0((jobject) NULL);
          PrintWriter result((jobject) NULL);

          if (!parseArgs(args, "O", ::java::lang::PY_TYPE(CharSequence), &a0))
          {
            OBJ_CALL(result = self->object.append(a0));
            return t_PrintWriter::wrap_Object(result);
          }
        }
        break;
       case 3:
        {
          ::java::lang::CharSequence a0((jobject) NULL);
          jint a1;
          jint a2;
          PrintWriter result((jobject) NULL);

          if (!parseArgs(args, "OII", ::java::lang::PY_TYPE(CharSequence), &a0, &a1, &a2))
          {
            OBJ_CALL(result = self->object.append(a0, a1, a2));
            return t_PrintWriter::wrap_Object(result);
          }
        }
      }

      return callSuper(PY_TYPE(PrintWriter), (PyObject *) self, "append", args, 2);
    }

    static PyObject *t_PrintWriter_checkError(t_PrintWriter *self)
    {
      jboolean result;
      OBJ_CALL(result = self->object.checkError());
      Py_RETURN_BOOL(result);
    }

    static PyObject *t_PrintWriter_close(t_PrintWriter *self, PyObject *args)
    {

      if (!parseArgs(args, ""))
      {
        OBJ_CALL(self->object.close());
        Py_RETURN_NONE;
      }

      return callSuper(PY_TYPE(PrintWriter), (PyObject *) self, "close", args, 2);
    }

    static PyObject *t_PrintWriter_flush(t_PrintWriter *self, PyObject *args)
    {

      if (!parseArgs(args, ""))
      {
        OBJ_CALL(self->object.flush());
        Py_RETURN_NONE;
      }

      return callSuper(PY_TYPE(PrintWriter), (PyObject *) self, "flush", args, 2);
    }

    static PyObject *t_PrintWriter_format(t_PrintWriter *self, PyObject *args)
    {
      switch (PyTuple_GET_SIZE(args)) {
       case 2:
        {
          ::java::lang::String a0((jobject) NULL);
          JArray< ::java::lang::Object > a1((jobject) NULL);
          PrintWriter result((jobject) NULL);

          if (!parseArgs(args, "s[o", &a0, &a1))
          {
            OBJ_CALL(result = self->object.format(a0, a1));
            return t_PrintWriter::wrap_Object(result);
          }
        }
        break;
       case 3:
        {
          ::java::util::Locale a0((jobject) NULL);
          ::java::lang::String a1((jobject) NULL);
          JArray< ::java::lang::Object > a2((jobject) NULL);
          PrintWriter result((jobject) NULL);

          if (!parseArgs(args, "ks[o", ::java::util::Locale::initializeClass, &a0, &a1, &a2))
          {
            OBJ_CALL(result = self->object.format(a0, a1, a2));
            return t_PrintWriter::wrap_Object(result);
          }
        }
      }

      PyErr_SetArgsError((PyObject *) self, "format", args);
      return NULL;
    }

    static PyObject *t_PrintWriter_print(t_PrintWriter *self, PyObject *args)
    {
      switch (PyTuple_GET_SIZE(args)) {
       case 1:
        {
          JArray< jchar > a0((jobject) NULL);

          if (!parseArgs(args, "[C", &a0))
          {
            OBJ_CALL(self->object.print(a0));
            Py_RETURN_NONE;
          }
        }
        {
          ::java::lang::String a0((jobject) NULL);

          if (!parseArgs(args, "s", &a0))
          {
            OBJ_CALL(self->object.print(a0));
            Py_RETURN_NONE;
          }
        }
        {
          jboolean a0;

          if (!parseArgs(args, "Z", &a0))
          {
            OBJ_CALL(self->object.print(a0));
            Py_RETURN_NONE;
          }
        }
        {
          jchar a0;

          if (!parseArgs(args, "C", &a0))
          {
            OBJ_CALL(self->object.print(a0));
            Py_RETURN_NONE;
          }
        }
        {
          jdouble a0;

          if (!parseArgs(args, "D", &a0))
          {
            OBJ_CALL(self->object.print(a0));
            Py_RETURN_NONE;
          }
        }
        {
          jfloat a0;

          if (!parseArgs(args, "F", &a0))
          {
            OBJ_CALL(self->object.print(a0));
            Py_RETURN_NONE;
          }
        }
        {
          jint a0;

          if (!parseArgs(args, "I", &a0))
          {
            OBJ_CALL(self->object.print(a0));
            Py_RETURN_NONE;
          }
        }
        {
          ::java::lang::Object a0((jobject) NULL);

          if (!parseArgs(args, "o", &a0))
          {
            OBJ_CALL(self->object.print(a0));
            Py_RETURN_NONE;
          }
        }
        {
          jlong a0;

          if (!parseArgs(args, "J", &a0))
          {
            OBJ_CALL(self->object.print(a0));
            Py_RETURN_NONE;
          }
        }
      }

      PyErr_SetArgsError((PyObject *) self, "print", args);
      return NULL;
    }

    static PyObject *t_PrintWriter_printf(t_PrintWriter *self, PyObject *args)
    {
      switch (PyTuple_GET_SIZE(args)) {
       case 2:
        {
          ::java::lang::String a0((jobject) NULL);
          JArray< ::java::lang::Object > a1((jobject) NULL);
          PrintWriter result((jobject) NULL);

          if (!parseArgs(args, "s[o", &a0, &a1))
          {
            OBJ_CALL(result = self->object.printf(a0, a1));
            return t_PrintWriter::wrap_Object(result);
          }
        }
        break;
       case 3:
        {
          ::java::util::Locale a0((jobject) NULL);
          ::java::lang::String a1((jobject) NULL);
          JArray< ::java::lang::Object > a2((jobject) NULL);
          PrintWriter result((jobject) NULL);

          if (!parseArgs(args, "ks[o", ::java::util::Locale::initializeClass, &a0, &a1, &a2))
          {
            OBJ_CALL(result = self->object.printf(a0, a1, a2));
            return t_PrintWriter::wrap_Object(result);
          }
        }
      }

      PyErr_SetArgsError((PyObject *) self, "printf", args);
      return NULL;
    }

    static PyObject *t_PrintWriter_println(t_PrintWriter *self, PyObject *args)
    {
      switch (PyTuple_GET_SIZE(args)) {
       case 0:
        {
          OBJ_CALL(self->object.println());
          Py_RETURN_NONE;
        }
        break;
       case 1:
        {
          JArray< jchar > a0((jobject) NULL);

          if (!parseArgs(args, "[C", &a0))
          {
            OBJ_CALL(self->object.println(a0));
            Py_RETURN_NONE;
          }
        }
        {
          ::java::lang::String a0((jobject) NULL);

          if (!parseArgs(args, "s", &a0))
          {
            OBJ_CALL(self->object.println(a0));
            Py_RETURN_NONE;
          }
        }
        {
          jboolean a0;

          if (!parseArgs(args, "Z", &a0))
          {
            OBJ_CALL(self->object.println(a0));
            Py_RETURN_NONE;
          }
        }
        {
          jchar a0;

          if (!parseArgs(args, "C", &a0))
          {
            OBJ_CALL(self->object.println(a0));
            Py_RETURN_NONE;
          }
        }
        {
          jdouble a0;

          if (!parseArgs(args, "D", &a0))
          {
            OBJ_CALL(self->object.println(a0));
            Py_RETURN_NONE;
          }
        }
        {
          jfloat a0;

          if (!parseArgs(args, "F", &a0))
          {
            OBJ_CALL(self->object.println(a0));
            Py_RETURN_NONE;
          }
        }
        {
          jint a0;

          if (!parseArgs(args, "I", &a0))
          {
            OBJ_CALL(self->object.println(a0));
            Py_RETURN_NONE;
          }
        }
        {
          ::java::lang::Object a0((jobject) NULL);

          if (!parseArgs(args, "o", &a0))
          {
            OBJ_CALL(self->object.println(a0));
            Py_RETURN_NONE;
          }
        }
        {
          jlong a0;

          if (!parseArgs(args, "J", &a0))
          {
            OBJ_CALL(self->object.println(a0));
            Py_RETURN_NONE;
          }
        }
      }

      PyErr_SetArgsError((PyObject *) self, "println", args);
      return NULL;
    }

    static PyObject *t_PrintWriter_write(t_PrintWriter *self, PyObject *args)
    {
      switch (PyTuple_GET_SIZE(args)) {
       case 1:
        {
          JArray< jchar > a0((jobject) NULL);

          if (!parseArgs(args, "[C", &a0))
          {
            OBJ_CALL(self->object.write(a0));
            Py_RETURN_NONE;
          }
        }
        {
          ::java::lang::String a0((jobject) NULL);

          if (!parseArgs(args, "s", &a0))
          {
            OBJ_CALL(self->object.write(a0));
            Py_RETURN_NONE;
          }
        }
        {
          jint a0;

          if (!parseArgs(args, "I", &a0))
          {
            OBJ_CALL(self->object.write(a0));
            Py_RETURN_NONE;
          }
        }
        break;
       case 3:
        {
          JArray< jchar > a0((jobject) NULL);
          jint a1;
          jint a2;

          if (!parseArgs(args, "[CII", &a0, &a1, &a2))
          {
            OBJ_CALL(self->object.write(a0, a1, a2));
            Py_RETURN_NONE;
          }
        }
        {
          ::java::lang::String a0((jobject) NULL);
          jint a1;
          jint a2;

          if (!parseArgs(args, "sII", &a0, &a1, &a2))
          {
            OBJ_CALL(self->object.write(a0, a1, a2));
            Py_RETURN_NONE;
          }
        }
      }

      return callSuper(PY_TYPE(PrintWriter), (PyObject *) self, "write", args, 2);
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/facet/taxonomy/TaxonomyFacetSumFloatAssociations.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/facet/FacetsCollector.h"
#include "org/apache/lucene/facet/FacetsConfig.h"
#include "org/apache/lucene/facet/taxonomy/TaxonomyReader.h"
#include "java/lang/String.h"
#include "java/io/IOException.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace facet {
        namespace taxonomy {

          ::java::lang::Class *TaxonomyFacetSumFloatAssociations::class$ = NULL;
          jmethodID *TaxonomyFacetSumFloatAssociations::mids$ = NULL;
          bool TaxonomyFacetSumFloatAssociations::live$ = false;

          jclass TaxonomyFacetSumFloatAssociations::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/facet/taxonomy/TaxonomyFacetSumFloatAssociations");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_0279dbd5ca76e087] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/facet/taxonomy/TaxonomyReader;Lorg/apache/lucene/facet/FacetsConfig;Lorg/apache/lucene/facet/FacetsCollector;)V");
              mids$[mid_init$_cf8e900354647cb2] = env->getMethodID(cls, "<init>", "(Ljava/lang/String;Lorg/apache/lucene/facet/taxonomy/TaxonomyReader;Lorg/apache/lucene/facet/FacetsConfig;Lorg/apache/lucene/facet/FacetsCollector;)V");

              class$ = new ::java::lang::Class(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          TaxonomyFacetSumFloatAssociations::TaxonomyFacetSumFloatAssociations(const ::org::apache::lucene::facet::taxonomy::TaxonomyReader & a0, const ::org::apache::lucene::facet::FacetsConfig & a1, const ::org::apache::lucene::facet::FacetsCollector & a2) : ::org::apache::lucene::facet::taxonomy::FloatTaxonomyFacets(env->newObject(initializeClass, &mids$, mid_init$_0279dbd5ca76e087, a0.this$, a1.this$, a2.this$)) {}

          TaxonomyFacetSumFloatAssociations::TaxonomyFacetSumFloatAssociations(const ::java::lang::String & a0, const ::org::apache::lucene::facet::taxonomy::TaxonomyReader & a1, const ::org::apache::lucene::facet::FacetsConfig & a2, const ::org::apache::lucene::facet::FacetsCollector & a3) : ::org::apache::lucene::facet::taxonomy::FloatTaxonomyFacets(env->newObject(initializeClass, &mids$, mid_init$_cf8e900354647cb2, a0.this$, a1.this$, a2.this$, a3.this$)) {}
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace facet {
        namespace taxonomy {
          static PyObject *t_TaxonomyFacetSumFloatAssociations_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_TaxonomyFacetSumFloatAssociations_instance_(PyTypeObject *type, PyObject *arg);
          static int t_TaxonomyFacetSumFloatAssociations_init_(t_TaxonomyFacetSumFloatAssociations *self, PyObject *args, PyObject *kwds);

          static PyMethodDef t_TaxonomyFacetSumFloatAssociations__methods_[] = {
            DECLARE_METHOD(t_TaxonomyFacetSumFloatAssociations, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_TaxonomyFacetSumFloatAssociations, instance_, METH_O | METH_CLASS),
            { NULL, NULL, 0, NULL }
          };

          static PyType_Slot PY_TYPE_SLOTS(TaxonomyFacetSumFloatAssociations)[] = {
            { Py_tp_methods, t_TaxonomyFacetSumFloatAssociations__methods_ },
            { Py_tp_init, (void *) t_TaxonomyFacetSumFloatAssociations_init_ },
            { 0, NULL }
          };

          static PyType_Def *PY_TYPE_BASES(TaxonomyFacetSumFloatAssociations)[] = {
            &PY_TYPE_DEF(::org::apache::lucene::facet::taxonomy::FloatTaxonomyFacets),
            NULL
          };

          DEFINE_TYPE(TaxonomyFacetSumFloatAssociations, t_TaxonomyFacetSumFloatAssociations, TaxonomyFacetSumFloatAssociations);

          void t_TaxonomyFacetSumFloatAssociations::install(PyObject *module)
          {
            installType(&PY_TYPE(TaxonomyFacetSumFloatAssociations), &PY_TYPE_DEF(TaxonomyFacetSumFloatAssociations), module, "TaxonomyFacetSumFloatAssociations", 0);
          }

          void t_TaxonomyFacetSumFloatAssociations::initialize(PyObject *module)
          {
            PyObject_SetAttrString((PyObject *) PY_TYPE(TaxonomyFacetSumFloatAssociations), "class_", make_descriptor(TaxonomyFacetSumFloatAssociations::initializeClass, 1));
            PyObject_SetAttrString((PyObject *) PY_TYPE(TaxonomyFacetSumFloatAssociations), "wrapfn_", make_descriptor(t_TaxonomyFacetSumFloatAssociations::wrap_jobject));
            PyObject_SetAttrString((PyObject *) PY_TYPE(TaxonomyFacetSumFloatAssociations), "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_TaxonomyFacetSumFloatAssociations_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, TaxonomyFacetSumFloatAssociations::initializeClass, 1)))
              return NULL;
            return t_TaxonomyFacetSumFloatAssociations::wrap_Object(TaxonomyFacetSumFloatAssociations(((t_TaxonomyFacetSumFloatAssociations *) arg)->object.this$));
          }
          static PyObject *t_TaxonomyFacetSumFloatAssociations_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, TaxonomyFacetSumFloatAssociations::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_TaxonomyFacetSumFloatAssociations_init_(t_TaxonomyFacetSumFloatAssociations *self, PyObject *args, PyObject *kwds)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 3:
              {
                ::org::apache::lucene::facet::taxonomy::TaxonomyReader a0((jobject) NULL);
                ::org::apache::lucene::facet::FacetsConfig a1((jobject) NULL);
                ::org::apache::lucene::facet::FacetsCollector a2((jobject) NULL);
                TaxonomyFacetSumFloatAssociations object((jobject) NULL);

                if (!parseArgs(args, "kkk", ::org::apache::lucene::facet::taxonomy::TaxonomyReader::initializeClass, ::org::apache::lucene::facet::FacetsConfig::initializeClass, ::org::apache::lucene::facet::FacetsCollector::initializeClass, &a0, &a1, &a2))
                {
                  INT_CALL(object = TaxonomyFacetSumFloatAssociations(a0, a1, a2));
                  self->object = object;
                  break;
                }
              }
              goto err;
             case 4:
              {
                ::java::lang::String a0((jobject) NULL);
                ::org::apache::lucene::facet::taxonomy::TaxonomyReader a1((jobject) NULL);
                ::org::apache::lucene::facet::FacetsConfig a2((jobject) NULL);
                ::org::apache::lucene::facet::FacetsCollector a3((jobject) NULL);
                TaxonomyFacetSumFloatAssociations object((jobject) NULL);

                if (!parseArgs(args, "skkk", ::org::apache::lucene::facet::taxonomy::TaxonomyReader::initializeClass, ::org::apache::lucene::facet::FacetsConfig::initializeClass, ::org::apache::lucene::facet::FacetsCollector::initializeClass, &a0, &a1, &a2, &a3))
                {
                  INT_CALL(object = TaxonomyFacetSumFloatAssociations(a0, a1, a2, a3));
                  self->object = object;
                  break;
                }
              }
             default:
             err:
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/util/fst/FST$BytesReader.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        namespace fst {

          ::java::lang::Class *FST$BytesReader::class$ = NULL;
          jmethodID *FST$BytesReader::mids$ = NULL;
          bool FST$BytesReader::live$ = false;

          jclass FST$BytesReader::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/util/fst/FST$BytesReader");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_f2cc1bce94666404] = env->getMethodID(cls, "<init>", "()V");
              mids$[mid_getPosition_2e5ae9edcb9b072f] = env->getMethodID(cls, "getPosition", "()J");
              mids$[mid_reversed_8454bd5aa23fd11e] = env->getMethodID(cls, "reversed", "()Z");
              mids$[mid_setPosition_9c778c9bce6694df] = env->getMethodID(cls, "setPosition", "(J)V");

              class$ = new ::java::lang::Class(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          FST$BytesReader::FST$BytesReader() : ::org::apache::lucene::store::DataInput(env->newObject(initializeClass, &mids$, mid_init$_f2cc1bce94666404)) {}

          jlong FST$BytesReader::getPosition() const
          {
            return env->callLongMethod(this$, mids$[mid_getPosition_2e5ae9edcb9b072f]);
          }

          jboolean FST$BytesReader::reversed() const
          {
            return env->callBooleanMethod(this$, mids$[mid_reversed_8454bd5aa23fd11e]);
          }

          void FST$BytesReader::setPosition(jlong a0) const
          {
            env->callVoidMethod(this$, mids$[mid_setPosition_9c778c9bce6694df], a0);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        namespace fst {
          static PyObject *t_FST$BytesReader_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_FST$BytesReader_instance_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_FST$BytesReader_of_(t_FST$BytesReader *self, PyObject *args);
          static int t_FST$BytesReader_init_(t_FST$BytesReader *self, PyObject *args, PyObject *kwds);
          static PyObject *t_FST$BytesReader_getPosition(t_FST$BytesReader *self);
          static PyObject *t_FST$BytesReader_reversed(t_FST$BytesReader *self);
          static PyObject *t_FST$BytesReader_setPosition(t_FST$BytesReader *self, PyObject *arg);
          static PyObject *t_FST$BytesReader_get__position(t_FST$BytesReader *self, void *data);
          static int t_FST$BytesReader_set__position(t_FST$BytesReader *self, PyObject *arg, void *data);
          static PyObject *t_FST$BytesReader_get__parameters_(t_FST$BytesReader *self, void *data);
          static PyGetSetDef t_FST$BytesReader__fields_[] = {
            DECLARE_GETSET_FIELD(t_FST$BytesReader, position),
            DECLARE_GET_FIELD(t_FST$BytesReader, parameters_),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_FST$BytesReader__methods_[] = {
            DECLARE_METHOD(t_FST$BytesReader, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_FST$BytesReader, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_FST$BytesReader, of_, METH_VARARGS),
            DECLARE_METHOD(t_FST$BytesReader, getPosition, METH_NOARGS),
            DECLARE_METHOD(t_FST$BytesReader, reversed, METH_NOARGS),
            DECLARE_METHOD(t_FST$BytesReader, setPosition, METH_O),
            { NULL, NULL, 0, NULL }
          };

          static PyType_Slot PY_TYPE_SLOTS(FST$BytesReader)[] = {
            { Py_tp_methods, t_FST$BytesReader__methods_ },
            { Py_tp_init, (void *) t_FST$BytesReader_init_ },
            { Py_tp_getset, t_FST$BytesReader__fields_ },
            { 0, NULL }
          };

          static PyType_Def *PY_TYPE_BASES(FST$BytesReader)[] = {
            &PY_TYPE_DEF(::org::apache::lucene::store::DataInput),
            NULL
          };

          DEFINE_TYPE(FST$BytesReader, t_FST$BytesReader, FST$BytesReader);
          PyObject *t_FST$BytesReader::wrap_Object(const FST$BytesReader& object, PyTypeObject *p0)
          {
            PyObject *obj = t_FST$BytesReader::wrap_Object(object);
            if (obj != NULL && obj != Py_None)
            {
              t_FST$BytesReader *self = (t_FST$BytesReader *) obj;
              self->parameters[0] = p0;
            }
            return obj;
          }

          PyObject *t_FST$BytesReader::wrap_jobject(const jobject& object, PyTypeObject *p0)
          {
            PyObject *obj = t_FST$BytesReader::wrap_jobject(object);
            if (obj != NULL && obj != Py_None)
            {
              t_FST$BytesReader *self = (t_FST$BytesReader *) obj;
              self->parameters[0] = p0;
            }
            return obj;
          }

          void t_FST$BytesReader::install(PyObject *module)
          {
            installType(&PY_TYPE(FST$BytesReader), &PY_TYPE_DEF(FST$BytesReader), module, "FST$BytesReader", 0);
          }

          void t_FST$BytesReader::initialize(PyObject *module)
          {
            PyObject_SetAttrString((PyObject *) PY_TYPE(FST$BytesReader), "class_", make_descriptor(FST$BytesReader::initializeClass, 1));
            PyObject_SetAttrString((PyObject *) PY_TYPE(FST$BytesReader), "wrapfn_", make_descriptor(t_FST$BytesReader::wrap_jobject));
            PyObject_SetAttrString((PyObject *) PY_TYPE(FST$BytesReader), "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_FST$BytesReader_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, FST$BytesReader::initializeClass, 1)))
              return NULL;
            return t_FST$BytesReader::wrap_Object(FST$BytesReader(((t_FST$BytesReader *) arg)->object.this$));
          }
          static PyObject *t_FST$BytesReader_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, FST$BytesReader::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static PyObject *t_FST$BytesReader_of_(t_FST$BytesReader *self, PyObject *args)
          {
            if (!parseArg(args, "T", 1, &(self->parameters)))
              Py_RETURN_SELF;
            return PyErr_SetArgsError((PyObject *) self, "of_", args);
          }

          static int t_FST$BytesReader_init_(t_FST$BytesReader *self, PyObject *args, PyObject *kwds)
          {
            FST$BytesReader object((jobject) NULL);

            INT_CALL(object = FST$BytesReader());
            self->object = object;

            return 0;
          }

          static PyObject *t_FST$BytesReader_getPosition(t_FST$BytesReader *self)
          {
            jlong result;
            OBJ_CALL(result = self->object.getPosition());
            return PyLong_FromLongLong((PY_LONG_LONG) result);
          }

          static PyObject *t_FST$BytesReader_reversed(t_FST$BytesReader *self)
          {
            jboolean result;
            OBJ_CALL(result = self->object.reversed());
            Py_RETURN_BOOL(result);
          }

          static PyObject *t_FST$BytesReader_setPosition(t_FST$BytesReader *self, PyObject *arg)
          {
            jlong a0;

            if (!parseArg(arg, "J", &a0))
            {
              OBJ_CALL(self->object.setPosition(a0));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError((PyObject *) self, "setPosition", arg);
            return NULL;
          }
          static PyObject *t_FST$BytesReader_get__parameters_(t_FST$BytesReader *self, void *data)
          {
            return typeParameters(self->parameters, sizeof(self->parameters));
          }

          static PyObject *t_FST$BytesReader_get__position(t_FST$BytesReader *self, void *data)
          {
            jlong value;
            OBJ_CALL(value = self->object.getPosition());
            return PyLong_FromLongLong((PY_LONG_LONG) value);
          }
          static int t_FST$BytesReader_set__position(t_FST$BytesReader *self, PyObject *arg, void *data)
          {
            {
              jlong value;
              if (!parseArg(arg, "J", &value))
              {
                INT_CALL(self->object.setPosition(value));
                return 0;
              }
            }
            PyErr_SetArgsError((PyObject *) self, "position", arg);
            return -1;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/index/CheckIndex$Status$TermVectorStatus.h"
#include "java/lang/Throwable.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {

        ::java::lang::Class *CheckIndex$Status$TermVectorStatus::class$ = NULL;
        jmethodID *CheckIndex$Status$TermVectorStatus::mids$ = NULL;
        jfieldID *CheckIndex$Status$TermVectorStatus::fids$ = NULL;
        bool CheckIndex$Status$TermVectorStatus::live$ = false;

        jclass CheckIndex$Status$TermVectorStatus::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/index/CheckIndex$Status$TermVectorStatus");

            fids$ = new jfieldID[max_fid];
            fids$[fid_docCount] = env->getFieldID(cls, "docCount", "I");
            fids$[fid_error] = env->getFieldID(cls, "error", "Ljava/lang/Throwable;");
            fids$[fid_totVectors] = env->getFieldID(cls, "totVectors", "J");

            class$ = new ::java::lang::Class(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        jint CheckIndex$Status$TermVectorStatus::_get_docCount() const
        {
          return env->getIntField(this$, fids$[fid_docCount]);
        }

        void CheckIndex$Status$TermVectorStatus::_set_docCount(jint a0) const
        {
          env->setIntField(this$, fids$[fid_docCount], a0);
        }

        ::java::lang::Throwable CheckIndex$Status$TermVectorStatus::_get_error() const
        {
          return ::java::lang::Throwable(env->getObjectField(this$, fids$[fid_error]));
        }

        void CheckIndex$Status$TermVectorStatus::_set_error(const ::java::lang::Throwable & a0) const
        {
          env->setObjectField(this$, fids$[fid_error], a0.this$);
        }

        jlong CheckIndex$Status$TermVectorStatus::_get_totVectors() const
        {
          return env->getLongField(this$, fids$[fid_totVectors]);
        }

        void CheckIndex$Status$TermVectorStatus::_set_totVectors(jlong a0) const
        {
          env->setLongField(this$, fids$[fid_totVectors], a0);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {
        static PyObject *t_CheckIndex$Status$TermVectorStatus_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_CheckIndex$Status$TermVectorStatus_instance_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_CheckIndex$Status$TermVectorStatus_get__docCount(t_CheckIndex$Status$TermVectorStatus *self, void *data);
        static int t_CheckIndex$Status$TermVectorStatus_set__docCount(t_CheckIndex$Status$TermVectorStatus *self, PyObject *arg, void *data);
        static PyObject *t_CheckIndex$Status$TermVectorStatus_get__error(t_CheckIndex$Status$TermVectorStatus *self, void *data);
        static int t_CheckIndex$Status$TermVectorStatus_set__error(t_CheckIndex$Status$TermVectorStatus *self, PyObject *arg, void *data);
        static PyObject *t_CheckIndex$Status$TermVectorStatus_get__totVectors(t_CheckIndex$Status$TermVectorStatus *self, void *data);
        static int t_CheckIndex$Status$TermVectorStatus_set__totVectors(t_CheckIndex$Status$TermVectorStatus *self, PyObject *arg, void *data);

        static PyGetSetDef t_CheckIndex$Status$TermVectorStatus__fields_[] = {
          DECLARE_GETSET_FIELD(t_CheckIndex$Status$TermVectorStatus, docCount),
          DECLARE_GETSET_FIELD(t_CheckIndex$Status$TermVectorStatus, error),
          DECLARE_GETSET_FIELD(t_CheckIndex$Status$TermVectorStatus, totVectors),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_CheckIndex$Status$TermVectorStatus__methods_[] = {
          DECLARE_METHOD(t_CheckIndex$Status$TermVectorStatus, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_CheckIndex$Status$TermVectorStatus, instance_, METH_O | METH_CLASS),
          { NULL, NULL, 0, NULL }
        };

        static PyType_Slot PY_TYPE_SLOTS(CheckIndex$Status$TermVectorStatus)[] = {
          { Py_tp_methods, t_CheckIndex$Status$TermVectorStatus__methods_ },
          { Py_tp_init, (void *) abstract_init },
          { Py_tp_getset, t_CheckIndex$Status$TermVectorStatus__fields_ },
          { 0, NULL }
        };

        static PyType_Def *PY_TYPE_BASES(CheckIndex$Status$TermVectorStatus)[] = {
          &PY_TYPE_DEF(::java::lang::Object),
          NULL
        };

        DEFINE_TYPE(CheckIndex$Status$TermVectorStatus, t_CheckIndex$Status$TermVectorStatus, CheckIndex$Status$TermVectorStatus);

        void t_CheckIndex$Status$TermVectorStatus::install(PyObject *module)
        {
          installType(&PY_TYPE(CheckIndex$Status$TermVectorStatus), &PY_TYPE_DEF(CheckIndex$Status$TermVectorStatus), module, "CheckIndex$Status$TermVectorStatus", 0);
        }

        void t_CheckIndex$Status$TermVectorStatus::initialize(PyObject *module)
        {
          PyObject_SetAttrString((PyObject *) PY_TYPE(CheckIndex$Status$TermVectorStatus), "class_", make_descriptor(CheckIndex$Status$TermVectorStatus::initializeClass, 1));
          PyObject_SetAttrString((PyObject *) PY_TYPE(CheckIndex$Status$TermVectorStatus), "wrapfn_", make_descriptor(t_CheckIndex$Status$TermVectorStatus::wrap_jobject));
          PyObject_SetAttrString((PyObject *) PY_TYPE(CheckIndex$Status$TermVectorStatus), "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_CheckIndex$Status$TermVectorStatus_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, CheckIndex$Status$TermVectorStatus::initializeClass, 1)))
            return NULL;
          return t_CheckIndex$Status$TermVectorStatus::wrap_Object(CheckIndex$Status$TermVectorStatus(((t_CheckIndex$Status$TermVectorStatus *) arg)->object.this$));
        }
        static PyObject *t_CheckIndex$Status$TermVectorStatus_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, CheckIndex$Status$TermVectorStatus::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static PyObject *t_CheckIndex$Status$TermVectorStatus_get__docCount(t_CheckIndex$Status$TermVectorStatus *self, void *data)
        {
          jint value;
          OBJ_CALL(value = self->object._get_docCount());
          return PyLong_FromLong((long) value);
        }
        static int t_CheckIndex$Status$TermVectorStatus_set__docCount(t_CheckIndex$Status$TermVectorStatus *self, PyObject *arg, void *data)
        {
          jint value;
          if (!parseArg(arg, "I", &value))
          {
            INT_CALL(self->object._set_docCount(value));
            return 0;
          }
          PyErr_SetArgsError((PyObject *) self, "docCount", arg);
          return -1;
        }

        static PyObject *t_CheckIndex$Status$TermVectorStatus_get__error(t_CheckIndex$Status$TermVectorStatus *self, void *data)
        {
          ::java::lang::Throwable value((jobject) NULL);
          OBJ_CALL(value = self->object._get_error());
          return ::java::lang::t_Throwable::wrap_Object(value);
        }
        static int t_CheckIndex$Status$TermVectorStatus_set__error(t_CheckIndex$Status$TermVectorStatus *self, PyObject *arg, void *data)
        {
          ::java::lang::Throwable value((jobject) NULL);
          if (!parseArg(arg, "k", ::java::lang::Throwable::initializeClass, &value))
          {
            INT_CALL(self->object._set_error(value));
            return 0;
          }
          PyErr_SetArgsError((PyObject *) self, "error", arg);
          return -1;
        }

        static PyObject *t_CheckIndex$Status$TermVectorStatus_get__totVectors(t_CheckIndex$Status$TermVectorStatus *self, void *data)
        {
          jlong value;
          OBJ_CALL(value = self->object._get_totVectors());
          return PyLong_FromLongLong((PY_LONG_LONG) value);
        }
        static int t_CheckIndex$Status$TermVectorStatus_set__totVectors(t_CheckIndex$Status$TermVectorStatus *self, PyObject *arg, void *data)
        {
          jlong value;
          if (!parseArg(arg, "J", &value))
          {
            INT_CALL(self->object._set_totVectors(value));
            return 0;
          }
          PyErr_SetArgsError((PyObject *) self, "totVectors", arg);
          return -1;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/spatial3d/geom/GeoPointShape.h"
#include "org/apache/lucene/spatial3d/geom/GeoBBox.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace spatial3d {
        namespace geom {

          ::java::lang::Class *GeoPointShape::class$ = NULL;
          jmethodID *GeoPointShape::mids$ = NULL;
          bool GeoPointShape::live$ = false;

          jclass GeoPointShape::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/spatial3d/geom/GeoPointShape");

              class$ = new ::java::lang::Class(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace spatial3d {
        namespace geom {
          static PyObject *t_GeoPointShape_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_GeoPointShape_instance_(PyTypeObject *type, PyObject *arg);

          static PyMethodDef t_GeoPointShape__methods_[] = {
            DECLARE_METHOD(t_GeoPointShape, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_GeoPointShape, instance_, METH_O | METH_CLASS),
            { NULL, NULL, 0, NULL }
          };

          static PyType_Slot PY_TYPE_SLOTS(GeoPointShape)[] = {
            { Py_tp_methods, t_GeoPointShape__methods_ },
            { Py_tp_init, (void *) abstract_init },
            { 0, NULL }
          };

          static PyType_Def *PY_TYPE_BASES(GeoPointShape)[] = {
            &PY_TYPE_DEF(::org::apache::lucene::spatial3d::geom::GeoCircle),
            NULL
          };

          DEFINE_TYPE(GeoPointShape, t_GeoPointShape, GeoPointShape);

          void t_GeoPointShape::install(PyObject *module)
          {
            installType(&PY_TYPE(GeoPointShape), &PY_TYPE_DEF(GeoPointShape), module, "GeoPointShape", 0);
          }

          void t_GeoPointShape::initialize(PyObject *module)
          {
            PyObject_SetAttrString((PyObject *) PY_TYPE(GeoPointShape), "class_", make_descriptor(GeoPointShape::initializeClass, 1));
            PyObject_SetAttrString((PyObject *) PY_TYPE(GeoPointShape), "wrapfn_", make_descriptor(t_GeoPointShape::wrap_jobject));
            PyObject_SetAttrString((PyObject *) PY_TYPE(GeoPointShape), "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_GeoPointShape_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, GeoPointShape::initializeClass, 1)))
              return NULL;
            return t_GeoPointShape::wrap_Object(GeoPointShape(((t_GeoPointShape *) arg)->object.this$));
          }
          static PyObject *t_GeoPointShape_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, GeoPointShape::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queryparser/flexible/core/config/ConfigurationKey.h"
#include "org/apache/lucene/queryparser/flexible/core/config/ConfigurationKey.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace core {
            namespace config {

              ::java::lang::Class *ConfigurationKey::class$ = NULL;
              jmethodID *ConfigurationKey::mids$ = NULL;
              bool ConfigurationKey::live$ = false;

              jclass ConfigurationKey::initializeClass(bool getOnly)
              {
                if (getOnly)
                  return (jclass) (live$ ? class$->this$ : NULL);
                if (class$ == NULL)
                {
                  jclass cls = (jclass) env->findClass("org/apache/lucene/queryparser/flexible/core/config/ConfigurationKey");

                  mids$ = new jmethodID[max_mid];
                  mids$[mid_newInstance_f7c8c6962157d839] = env->getStaticMethodID(cls, "newInstance", "()Lorg/apache/lucene/queryparser/flexible/core/config/ConfigurationKey;");

                  class$ = new ::java::lang::Class(cls);
                  live$ = true;
                }
                return (jclass) class$->this$;
              }

              ConfigurationKey ConfigurationKey::newInstance()
              {
                jclass cls = env->getClass(initializeClass);
                return ConfigurationKey(env->callStaticObjectMethod(cls, mids$[mid_newInstance_f7c8c6962157d839]));
              }
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace core {
            namespace config {
              static PyObject *t_ConfigurationKey_cast_(PyTypeObject *type, PyObject *arg);
              static PyObject *t_ConfigurationKey_instance_(PyTypeObject *type, PyObject *arg);
              static PyObject *t_ConfigurationKey_of_(t_ConfigurationKey *self, PyObject *args);
              static PyObject *t_ConfigurationKey_newInstance(PyTypeObject *type);
              static PyObject *t_ConfigurationKey_get__parameters_(t_ConfigurationKey *self, void *data);
              static PyGetSetDef t_ConfigurationKey__fields_[] = {
                DECLARE_GET_FIELD(t_ConfigurationKey, parameters_),
                { NULL, NULL, NULL, NULL, NULL }
              };

              static PyMethodDef t_ConfigurationKey__methods_[] = {
                DECLARE_METHOD(t_ConfigurationKey, cast_, METH_O | METH_CLASS),
                DECLARE_METHOD(t_ConfigurationKey, instance_, METH_O | METH_CLASS),
                DECLARE_METHOD(t_ConfigurationKey, of_, METH_VARARGS),
                DECLARE_METHOD(t_ConfigurationKey, newInstance, METH_NOARGS | METH_CLASS),
                { NULL, NULL, 0, NULL }
              };

              static PyType_Slot PY_TYPE_SLOTS(ConfigurationKey)[] = {
                { Py_tp_methods, t_ConfigurationKey__methods_ },
                { Py_tp_init, (void *) abstract_init },
                { Py_tp_getset, t_ConfigurationKey__fields_ },
                { 0, NULL }
              };

              static PyType_Def *PY_TYPE_BASES(ConfigurationKey)[] = {
                &PY_TYPE_DEF(::java::lang::Object),
                NULL
              };

              DEFINE_TYPE(ConfigurationKey, t_ConfigurationKey, ConfigurationKey);
              PyObject *t_ConfigurationKey::wrap_Object(const ConfigurationKey& object, PyTypeObject *p0)
              {
                PyObject *obj = t_ConfigurationKey::wrap_Object(object);
                if (obj != NULL && obj != Py_None)
                {
                  t_ConfigurationKey *self = (t_ConfigurationKey *) obj;
                  self->parameters[0] = p0;
                }
                return obj;
              }

              PyObject *t_ConfigurationKey::wrap_jobject(const jobject& object, PyTypeObject *p0)
              {
                PyObject *obj = t_ConfigurationKey::wrap_jobject(object);
                if (obj != NULL && obj != Py_None)
                {
                  t_ConfigurationKey *self = (t_ConfigurationKey *) obj;
                  self->parameters[0] = p0;
                }
                return obj;
              }

              void t_ConfigurationKey::install(PyObject *module)
              {
                installType(&PY_TYPE(ConfigurationKey), &PY_TYPE_DEF(ConfigurationKey), module, "ConfigurationKey", 0);
              }

              void t_ConfigurationKey::initialize(PyObject *module)
              {
                PyObject_SetAttrString((PyObject *) PY_TYPE(ConfigurationKey), "class_", make_descriptor(ConfigurationKey::initializeClass, 1));
                PyObject_SetAttrString((PyObject *) PY_TYPE(ConfigurationKey), "wrapfn_", make_descriptor(t_ConfigurationKey::wrap_jobject));
                PyObject_SetAttrString((PyObject *) PY_TYPE(ConfigurationKey), "boxfn_", make_descriptor(boxObject));
              }

              static PyObject *t_ConfigurationKey_cast_(PyTypeObject *type, PyObject *arg)
              {
                if (!(arg = castCheck(arg, ConfigurationKey::initializeClass, 1)))
                  return NULL;
                return t_ConfigurationKey::wrap_Object(ConfigurationKey(((t_ConfigurationKey *) arg)->object.this$));
              }
              static PyObject *t_ConfigurationKey_instance_(PyTypeObject *type, PyObject *arg)
              {
                if (!castCheck(arg, ConfigurationKey::initializeClass, 0))
                  Py_RETURN_FALSE;
                Py_RETURN_TRUE;
              }

              static PyObject *t_ConfigurationKey_of_(t_ConfigurationKey *self, PyObject *args)
              {
                if (!parseArg(args, "T", 1, &(self->parameters)))
                  Py_RETURN_SELF;
                return PyErr_SetArgsError((PyObject *) self, "of_", args);
              }

              static PyObject *t_ConfigurationKey_newInstance(PyTypeObject *type)
              {
                ConfigurationKey result((jobject) NULL);
                OBJ_CALL(result = ::org::apache::lucene::queryparser::flexible::core::config::ConfigurationKey::newInstance());
                return t_ConfigurationKey::wrap_Object(result);
              }
              static PyObject *t_ConfigurationKey_get__parameters_(t_ConfigurationKey *self, void *data)
              {
                return typeParameters(self->parameters, sizeof(self->parameters));
              }
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/geo/XYPoint.h"
#include "java/lang/Object.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace geo {

        ::java::lang::Class *XYPoint::class$ = NULL;
        jmethodID *XYPoint::mids$ = NULL;
        bool XYPoint::live$ = false;

        jclass XYPoint::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/geo/XYPoint");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_5a9245193073da7b] = env->getMethodID(cls, "<init>", "(FF)V");
            mids$[mid_equals_8b72f2dcdde6fd1d] = env->getMethodID(cls, "equals", "(Ljava/lang/Object;)Z");
            mids$[mid_getX_58aec2b64dff50c8] = env->getMethodID(cls, "getX", "()F");
            mids$[mid_getY_58aec2b64dff50c8] = env->getMethodID(cls, "getY", "()F");
            mids$[mid_hashCode_9972fcc56b44e79d] = env->getMethodID(cls, "hashCode", "()I");
            mids$[mid_toString_db9b55ba01e03e4b] = env->getMethodID(cls, "toString", "()Ljava/lang/String;");
            mids$[mid_toComponent2D_6fe8ae19c34b6817] = env->getMethodID(cls, "toComponent2D", "()Lorg/apache/lucene/geo/Component2D;");

            class$ = new ::java::lang::Class(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        XYPoint::XYPoint(jfloat a0, jfloat a1) : ::org::apache::lucene::geo::XYGeometry(env->newObject(initializeClass, &mids$, mid_init$_5a9245193073da7b, a0, a1)) {}

        jboolean XYPoint::equals(const ::java::lang::Object & a0) const
        {
          return env->callBooleanMethod(this$, mids$[mid_equals_8b72f2dcdde6fd1d], a0.this$);
        }

        jfloat XYPoint::getX() const
        {
          return env->callFloatMethod(this$, mids$[mid_getX_58aec2b64dff50c8]);
        }

        jfloat XYPoint::getY() const
        {
          return env->callFloatMethod(this$, mids$[mid_getY_58aec2b64dff50c8]);
        }

        jint XYPoint::hashCode() const
        {
          return env->callIntMethod(this$, mids$[mid_hashCode_9972fcc56b44e79d]);
        }

        ::java::lang::String XYPoint::toString() const
        {
          return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_db9b55ba01e03e4b]));
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace geo {
        static PyObject *t_XYPoint_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_XYPoint_instance_(PyTypeObject *type, PyObject *arg);
        static int t_XYPoint_init_(t_XYPoint *self, PyObject *args, PyObject *kwds);
        static PyObject *t_XYPoint_equals(t_XYPoint *self, PyObject *args);
        static PyObject *t_XYPoint_getX(t_XYPoint *self);
        static PyObject *t_XYPoint_getY(t_XYPoint *self);
        static PyObject *t_XYPoint_hashCode(t_XYPoint *self, PyObject *args);
        static PyObject *t_XYPoint_toString(t_XYPoint *self, PyObject *args);
        static PyObject *t_XYPoint_get__x(t_XYPoint *self, void *data);
        static PyObject *t_XYPoint_get__y(t_XYPoint *self, void *data);
        static PyGetSetDef t_XYPoint__fields_[] = {
          DECLARE_GET_FIELD(t_XYPoint, x),
          DECLARE_GET_FIELD(t_XYPoint, y),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_XYPoint__methods_[] = {
          DECLARE_METHOD(t_XYPoint, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_XYPoint, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_XYPoint, equals, METH_VARARGS),
          DECLARE_METHOD(t_XYPoint, getX, METH_NOARGS),
          DECLARE_METHOD(t_XYPoint, getY, METH_NOARGS),
          DECLARE_METHOD(t_XYPoint, hashCode, METH_VARARGS),
          DECLARE_METHOD(t_XYPoint, toString, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        static PyType_Slot PY_TYPE_SLOTS(XYPoint)[] = {
          { Py_tp_methods, t_XYPoint__methods_ },
          { Py_tp_init, (void *) t_XYPoint_init_ },
          { Py_tp_getset, t_XYPoint__fields_ },
          { 0, NULL }
        };

        static PyType_Def *PY_TYPE_BASES(XYPoint)[] = {
          &PY_TYPE_DEF(::org::apache::lucene::geo::XYGeometry),
          NULL
        };

        DEFINE_TYPE(XYPoint, t_XYPoint, XYPoint);

        void t_XYPoint::install(PyObject *module)
        {
          installType(&PY_TYPE(XYPoint), &PY_TYPE_DEF(XYPoint), module, "XYPoint", 0);
        }

        void t_XYPoint::initialize(PyObject *module)
        {
          PyObject_SetAttrString((PyObject *) PY_TYPE(XYPoint), "class_", make_descriptor(XYPoint::initializeClass, 1));
          PyObject_SetAttrString((PyObject *) PY_TYPE(XYPoint), "wrapfn_", make_descriptor(t_XYPoint::wrap_jobject));
          PyObject_SetAttrString((PyObject *) PY_TYPE(XYPoint), "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_XYPoint_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, XYPoint::initializeClass, 1)))
            return NULL;
          return t_XYPoint::wrap_Object(XYPoint(((t_XYPoint *) arg)->object.this$));
        }
        static PyObject *t_XYPoint_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, XYPoint::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_XYPoint_init_(t_XYPoint *self, PyObject *args, PyObject *kwds)
        {
          jfloat a0;
          jfloat a1;
          XYPoint object((jobject) NULL);

          if (!parseArgs(args, "FF", &a0, &a1))
          {
            INT_CALL(object = XYPoint(a0, a1));
            self->object = object;
          }
          else
          {
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }

        static PyObject *t_XYPoint_equals(t_XYPoint *self, PyObject *args)
        {
          ::java::lang::Object a0((jobject) NULL);
          jboolean result;

          if (!parseArgs(args, "o", &a0))
          {
            OBJ_CALL(result = self->object.equals(a0));
            Py_RETURN_BOOL(result);
          }

          return callSuper(PY_TYPE(XYPoint), (PyObject *) self, "equals", args, 2);
        }

        static PyObject *t_XYPoint_getX(t_XYPoint *self)
        {
          jfloat result;
          OBJ_CALL(result = self->object.getX());
          return PyFloat_FromDouble((double) result);
        }

        static PyObject *t_XYPoint_getY(t_XYPoint *self)
        {
          jfloat result;
          OBJ_CALL(result = self->object.getY());
          return PyFloat_FromDouble((double) result);
        }

        static PyObject *t_XYPoint_hashCode(t_XYPoint *self, PyObject *args)
        {
          jint result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.hashCode());
            return PyLong_FromLong((long) result);
          }

          return callSuper(PY_TYPE(XYPoint), (PyObject *) self, "hashCode", args, 2);
        }

        static PyObject *t_XYPoint_toString(t_XYPoint *self, PyObject *args)
        {
          ::java::lang::String result((jobject) NULL);

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.toString());
            return j2p(result);
          }

          return callSuper(PY_TYPE(XYPoint), (PyObject *) self, "toString", args, 2);
        }

        static PyObject *t_XYPoint_get__x(t_XYPoint *self, void *data)
        {
          jfloat value;
          OBJ_CALL(value = self->object.getX());
          return PyFloat_FromDouble((double) value);
        }

        static PyObject *t_XYPoint_get__y(t_XYPoint *self, void *data)
        {
          jfloat value;
          OBJ_CALL(value = self->object.getY());
          return PyFloat_FromDouble((double) value);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/util/IOUtils$IOConsumer.h"
#include "java/io/IOException.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {

        ::java::lang::Class *IOUtils$IOConsumer::class$ = NULL;
        jmethodID *IOUtils$IOConsumer::mids$ = NULL;
        bool IOUtils$IOConsumer::live$ = false;

        jclass IOUtils$IOConsumer::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/util/IOUtils$IOConsumer");

            mids$ = new jmethodID[max_mid];
            mids$[mid_accept_d20f626183f72f7d] = env->getMethodID(cls, "accept", "(Ljava/lang/Object;)V");

            class$ = new ::java::lang::Class(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        void IOUtils$IOConsumer::accept(const ::java::lang::Object & a0) const
        {
          env->callVoidMethod(this$, mids$[mid_accept_d20f626183f72f7d], a0.this$);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        static PyObject *t_IOUtils$IOConsumer_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_IOUtils$IOConsumer_instance_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_IOUtils$IOConsumer_of_(t_IOUtils$IOConsumer *self, PyObject *args);
        static PyObject *t_IOUtils$IOConsumer_accept(t_IOUtils$IOConsumer *self, PyObject *arg);
        static PyObject *t_IOUtils$IOConsumer_get__parameters_(t_IOUtils$IOConsumer *self, void *data);
        static PyGetSetDef t_IOUtils$IOConsumer__fields_[] = {
          DECLARE_GET_FIELD(t_IOUtils$IOConsumer, parameters_),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_IOUtils$IOConsumer__methods_[] = {
          DECLARE_METHOD(t_IOUtils$IOConsumer, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_IOUtils$IOConsumer, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_IOUtils$IOConsumer, of_, METH_VARARGS),
          DECLARE_METHOD(t_IOUtils$IOConsumer, accept, METH_O),
          { NULL, NULL, 0, NULL }
        };

        static PyType_Slot PY_TYPE_SLOTS(IOUtils$IOConsumer)[] = {
          { Py_tp_methods, t_IOUtils$IOConsumer__methods_ },
          { Py_tp_init, (void *) abstract_init },
          { Py_tp_getset, t_IOUtils$IOConsumer__fields_ },
          { 0, NULL }
        };

        static PyType_Def *PY_TYPE_BASES(IOUtils$IOConsumer)[] = {
          &PY_TYPE_DEF(::java::lang::Object),
          NULL
        };

        DEFINE_TYPE(IOUtils$IOConsumer, t_IOUtils$IOConsumer, IOUtils$IOConsumer);
        PyObject *t_IOUtils$IOConsumer::wrap_Object(const IOUtils$IOConsumer& object, PyTypeObject *p0)
        {
          PyObject *obj = t_IOUtils$IOConsumer::wrap_Object(object);
          if (obj != NULL && obj != Py_None)
          {
            t_IOUtils$IOConsumer *self = (t_IOUtils$IOConsumer *) obj;
            self->parameters[0] = p0;
          }
          return obj;
        }

        PyObject *t_IOUtils$IOConsumer::wrap_jobject(const jobject& object, PyTypeObject *p0)
        {
          PyObject *obj = t_IOUtils$IOConsumer::wrap_jobject(object);
          if (obj != NULL && obj != Py_None)
          {
            t_IOUtils$IOConsumer *self = (t_IOUtils$IOConsumer *) obj;
            self->parameters[0] = p0;
          }
          return obj;
        }

        void t_IOUtils$IOConsumer::install(PyObject *module)
        {
          installType(&PY_TYPE(IOUtils$IOConsumer), &PY_TYPE_DEF(IOUtils$IOConsumer), module, "IOUtils$IOConsumer", 0);
        }

        void t_IOUtils$IOConsumer::initialize(PyObject *module)
        {
          PyObject_SetAttrString((PyObject *) PY_TYPE(IOUtils$IOConsumer), "class_", make_descriptor(IOUtils$IOConsumer::initializeClass, 1));
          PyObject_SetAttrString((PyObject *) PY_TYPE(IOUtils$IOConsumer), "wrapfn_", make_descriptor(t_IOUtils$IOConsumer::wrap_jobject));
          PyObject_SetAttrString((PyObject *) PY_TYPE(IOUtils$IOConsumer), "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_IOUtils$IOConsumer_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, IOUtils$IOConsumer::initializeClass, 1)))
            return NULL;
          return t_IOUtils$IOConsumer::wrap_Object(IOUtils$IOConsumer(((t_IOUtils$IOConsumer *) arg)->object.this$));
        }
        static PyObject *t_IOUtils$IOConsumer_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, IOUtils$IOConsumer::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static PyObject *t_IOUtils$IOConsumer_of_(t_IOUtils$IOConsumer *self, PyObject *args)
        {
          if (!parseArg(args, "T", 1, &(self->parameters)))
            Py_RETURN_SELF;
          return PyErr_SetArgsError((PyObject *) self, "of_", args);
        }

        static PyObject *t_IOUtils$IOConsumer_accept(t_IOUtils$IOConsumer *self, PyObject *arg)
        {
          ::java::lang::Object a0((jobject) NULL);

          if (!parseArg(arg, "O", self->parameters[0], &a0))
          {
            OBJ_CALL(self->object.accept(a0));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "accept", arg);
          return NULL;
        }
        static PyObject *t_IOUtils$IOConsumer_get__parameters_(t_IOUtils$IOConsumer *self, void *data)
        {
          return typeParameters(self->parameters, sizeof(self->parameters));
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/spans/SpanNotQuery.h"
#include "org/apache/lucene/index/IndexReader.h"
#include "org/apache/lucene/search/IndexSearcher.h"
#include "java/lang/Class.h"
#include "java/lang/Object.h"
#include "org/apache/lucene/search/spans/SpanWeight.h"
#include "java/lang/String.h"
#include "org/apache/lucene/search/Query.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/search/QueryVisitor.h"
#include "org/apache/lucene/search/ScoreMode.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace spans {

          ::java::lang::Class *SpanNotQuery::class$ = NULL;
          jmethodID *SpanNotQuery::mids$ = NULL;
          bool SpanNotQuery::live$ = false;

          jclass SpanNotQuery::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/search/spans/SpanNotQuery");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_5a5cbe5f748d0153] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/search/spans/SpanQuery;Lorg/apache/lucene/search/spans/SpanQuery;)V");
              mids$[mid_init$_a40b9aee4bbe18a9] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/search/spans/SpanQuery;Lorg/apache/lucene/search/spans/SpanQuery;I)V");
              mids$[mid_init$_f116d9340c469758] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/search/spans/SpanQuery;Lorg/apache/lucene/search/spans/SpanQuery;II)V");
              mids$[mid_createWeight_5baab4cc5ccc46b6] = env->getMethodID(cls, "createWeight", "(Lorg/apache/lucene/search/IndexSearcher;Lorg/apache/lucene/search/ScoreMode;F)Lorg/apache/lucene/search/spans/SpanWeight;");
              mids$[mid_equals_8b72f2dcdde6fd1d] = env->getMethodID(cls, "equals", "(Ljava/lang/Object;)Z");
              mids$[mid_getExclude_5a8903ceec80d1b9] = env->getMethodID(cls, "getExclude", "()Lorg/apache/lucene/search/spans/SpanQuery;");
              mids$[mid_getField_db9b55ba01e03e4b] = env->getMethodID(cls, "getField", "()Ljava/lang/String;");
              mids$[mid_getInclude_5a8903ceec80d1b9] = env->getMethodID(cls, "getInclude", "()Lorg/apache/lucene/search/spans/SpanQuery;");
              mids$[mid_hashCode_9972fcc56b44e79d] = env->getMethodID(cls, "hashCode", "()I");
              mids$[mid_rewrite_bb52f19a8254555c] = env->getMethodID(cls, "rewrite", "(Lorg/apache/lucene/index/IndexReader;)Lorg/apache/lucene/search/Query;");
              mids$[mid_toString_9bfa75c9f141b67f] = env->getMethodID(cls, "toString", "(Ljava/lang/String;)Ljava/lang/String;");
              mids$[mid_visit_f9e6207006c5b6c1] = env->getMethodID(cls, "visit", "(Lorg/apache/lucene/search/QueryVisitor;)V");

              class$ = new ::java::lang::Class(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          SpanNotQuery::SpanNotQuery(const ::org::apache::lucene::search::spans::SpanQuery & a0, const ::org::apache::lucene::search::spans::SpanQuery & a1) : ::org::apache::lucene::search::spans::SpanQuery(env->newObject(initializeClass, &mids$, mid_init$_5a5cbe5f748d0153, a0.this$, a1.this$)) {}

          SpanNotQuery::SpanNotQuery(const ::org::apache::lucene::search::spans::SpanQuery & a0, const ::org::apache::lucene::search::spans::SpanQuery & a1, jint a2) : ::org::apache::lucene::search::spans::SpanQuery(env->newObject(initializeClass, &mids$, mid_init$_a40b9aee4bbe18a9, a0.this$, a1.this$, a2)) {}

          SpanNotQuery::SpanNotQuery(const ::org::apache::lucene::search::spans::SpanQuery & a0, const ::org::apache::lucene::search::spans::SpanQuery & a1, jint a2, jint a3) : ::org::apache::lucene::search::spans::SpanQuery(env->newObject(initializeClass, &mids$, mid_init$_f116d9340c469758, a0.this$, a1.this$, a2, a3)) {}

          ::org::apache::lucene::search::spans::SpanWeight SpanNotQuery::createWeight(const ::org::apache::lucene::search::IndexSearcher & a0, const ::org::apache::lucene::search::ScoreMode & a1, jfloat a2) const
          {
            return ::org::apache::lucene::search::spans::SpanWeight(env->callObjectMethod(this$, mids$[mid_createWeight_5baab4cc5ccc46b6], a0.this$, a1.this$, a2));
          }

          jboolean SpanNotQuery::equals(const ::java::lang::Object & a0) const
          {
            return env->callBooleanMethod(this$, mids$[mid_equals_8b72f2dcdde6fd1d], a0.this$);
          }

          ::org::apache::lucene::search::spans::SpanQuery SpanNotQuery::getExclude() const
          {
            return ::org::apache::lucene::search::spans::SpanQuery(env->callObjectMethod(this$, mids$[mid_getExclude_5a8903ceec80d1b9]));
          }

          ::java::lang::String SpanNotQuery::getField() const
          {
            return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_getField_db9b55ba01e03e4b]));
          }

          ::org::apache::lucene::search::spans::SpanQuery SpanNotQuery::getInclude() const
          {
            return ::org::apache::lucene::search::spans::SpanQuery(env->callObjectMethod(this$, mids$[mid_getInclude_5a8903ceec80d1b9]));
          }

          jint SpanNotQuery::hashCode() const
          {
            return env->callIntMethod(this$, mids$[mid_hashCode_9972fcc56b44e79d]);
          }

          ::org::apache::lucene::search::Query SpanNotQuery::rewrite(const ::org::apache::lucene::index::IndexReader & a0) const
          {
            return ::org::apache::lucene::search::Query(env->callObjectMethod(this$, mids$[mid_rewrite_bb52f19a8254555c], a0.this$));
          }

          ::java::lang::String SpanNotQuery::toString(const ::java::lang::String & a0) const
          {
            return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_9bfa75c9f141b67f], a0.this$));
          }

          void SpanNotQuery::visit(const ::org::apache::lucene::search::QueryVisitor & a0) const
          {
            env->callVoidMethod(this$, mids$[mid_visit_f9e6207006c5b6c1], a0.this$);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace spans {
          static PyObject *t_SpanNotQuery_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_SpanNotQuery_instance_(PyTypeObject *type, PyObject *arg);
          static int t_SpanNotQuery_init_(t_SpanNotQuery *self, PyObject *args, PyObject *kwds);
          static PyObject *t_SpanNotQuery_createWeight(t_SpanNotQuery *self, PyObject *args);
          static PyObject *t_SpanNotQuery_equals(t_SpanNotQuery *self, PyObject *args);
          static PyObject *t_SpanNotQuery_getExclude(t_SpanNotQuery *self);
          static PyObject *t_SpanNotQuery_getField(t_SpanNotQuery *self, PyObject *args);
          static PyObject *t_SpanNotQuery_getInclude(t_SpanNotQuery *self);
          static PyObject *t_SpanNotQuery_hashCode(t_SpanNotQuery *self, PyObject *args);
          static PyObject *t_SpanNotQuery_rewrite(t_SpanNotQuery *self, PyObject *args);
          static PyObject *t_SpanNotQuery_toString(t_SpanNotQuery *self, PyObject *args);
          static PyObject *t_SpanNotQuery_visit(t_SpanNotQuery *self, PyObject *args);
          static PyObject *t_SpanNotQuery_get__exclude(t_SpanNotQuery *self, void *data);
          static PyObject *t_SpanNotQuery_get__field(t_SpanNotQuery *self, void *data);
          static PyObject *t_SpanNotQuery_get__include(t_SpanNotQuery *self, void *data);
          static PyGetSetDef t_SpanNotQuery__fields_[] = {
            DECLARE_GET_FIELD(t_SpanNotQuery, exclude),
            DECLARE_GET_FIELD(t_SpanNotQuery, field),
            DECLARE_GET_FIELD(t_SpanNotQuery, include),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_SpanNotQuery__methods_[] = {
            DECLARE_METHOD(t_SpanNotQuery, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_SpanNotQuery, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_SpanNotQuery, createWeight, METH_VARARGS),
            DECLARE_METHOD(t_SpanNotQuery, equals, METH_VARARGS),
            DECLARE_METHOD(t_SpanNotQuery, getExclude, METH_NOARGS),
            DECLARE_METHOD(t_SpanNotQuery, getField, METH_VARARGS),
            DECLARE_METHOD(t_SpanNotQuery, getInclude, METH_NOARGS),
            DECLARE_METHOD(t_SpanNotQuery, hashCode, METH_VARARGS),
            DECLARE_METHOD(t_SpanNotQuery, rewrite, METH_VARARGS),
            DECLARE_METHOD(t_SpanNotQuery, toString, METH_VARARGS),
            DECLARE_METHOD(t_SpanNotQuery, visit, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          static PyType_Slot PY_TYPE_SLOTS(SpanNotQuery)[] = {
            { Py_tp_methods, t_SpanNotQuery__methods_ },
            { Py_tp_init, (void *) t_SpanNotQuery_init_ },
            { Py_tp_getset, t_SpanNotQuery__fields_ },
            { 0, NULL }
          };

          static PyType_Def *PY_TYPE_BASES(SpanNotQuery)[] = {
            &PY_TYPE_DEF(::org::apache::lucene::search::spans::SpanQuery),
            NULL
          };

          DEFINE_TYPE(SpanNotQuery, t_SpanNotQuery, SpanNotQuery);

          void t_SpanNotQuery::install(PyObject *module)
          {
            installType(&PY_TYPE(SpanNotQuery), &PY_TYPE_DEF(SpanNotQuery), module, "SpanNotQuery", 0);
          }

          void t_SpanNotQuery::initialize(PyObject *module)
          {
            PyObject_SetAttrString((PyObject *) PY_TYPE(SpanNotQuery), "class_", make_descriptor(SpanNotQuery::initializeClass, 1));
            PyObject_SetAttrString((PyObject *) PY_TYPE(SpanNotQuery), "wrapfn_", make_descriptor(t_SpanNotQuery::wrap_jobject));
            PyObject_SetAttrString((PyObject *) PY_TYPE(SpanNotQuery), "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_SpanNotQuery_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, SpanNotQuery::initializeClass, 1)))
              return NULL;
            return t_SpanNotQuery::wrap_Object(SpanNotQuery(((t_SpanNotQuery *) arg)->object.this$));
          }
          static PyObject *t_SpanNotQuery_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, SpanNotQuery::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_SpanNotQuery_init_(t_SpanNotQuery *self, PyObject *args, PyObject *kwds)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 2:
              {
                ::org::apache::lucene::search::spans::SpanQuery a0((jobject) NULL);
                ::org::apache::lucene::search::spans::SpanQuery a1((jobject) NULL);
                SpanNotQuery object((jobject) NULL);

                if (!parseArgs(args, "kk", ::org::apache::lucene::search::spans::SpanQuery::initializeClass, ::org::apache::lucene::search::spans::SpanQuery::initializeClass, &a0, &a1))
                {
                  INT_CALL(object = SpanNotQuery(a0, a1));
                  self->object = object;
                  break;
                }
              }
              goto err;
             case 3:
              {
                ::org::apache::lucene::search::spans::SpanQuery a0((jobject) NULL);
                ::org::apache::lucene::search::spans::SpanQuery a1((jobject) NULL);
                jint a2;
                SpanNotQuery object((jobject) NULL);

                if (!parseArgs(args, "kkI", ::org::apache::lucene::search::spans::SpanQuery::initializeClass, ::org::apache::lucene::search::spans::SpanQuery::initializeClass, &a0, &a1, &a2))
                {
                  INT_CALL(object = SpanNotQuery(a0, a1, a2));
                  self->object = object;
                  break;
                }
              }
              goto err;
             case 4:
              {
                ::org::apache::lucene::search::spans::SpanQuery a0((jobject) NULL);
                ::org::apache::lucene::search::spans::SpanQuery a1((jobject) NULL);
                jint a2;
                jint a3;
                SpanNotQuery object((jobject) NULL);

                if (!parseArgs(args, "kkII", ::org::apache::lucene::search::spans::SpanQuery::initializeClass, ::org::apache::lucene::search::spans::SpanQuery::initializeClass, &a0, &a1, &a2, &a3))
                {
                  INT_CALL(object = SpanNotQuery(a0, a1, a2, a3));
                  self->object = object;
                  break;
                }
              }
             default:
             err:
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_SpanNotQuery_createWeight(t_SpanNotQuery *self, PyObject *args)
          {
            ::org::apache::lucene::search::IndexSearcher a0((jobject) NULL);
            ::org::apache::lucene::search::ScoreMode a1((jobject) NULL);
            PyTypeObject **p1;
            jfloat a2;
            ::org::apache::lucene::search::spans::SpanWeight result((jobject) NULL);

            if (!parseArgs(args, "kKF", ::org::apache::lucene::search::IndexSearcher::initializeClass, ::org::apache::lucene::search::ScoreMode::initializeClass, &a0, &a1, &p1, ::org::apache::lucene::search::t_ScoreMode::parameters_, &a2))
            {
              OBJ_CALL(result = self->object.createWeight(a0, a1, a2));
              return ::org::apache::lucene::search::spans::t_SpanWeight::wrap_Object(result);
            }

            return callSuper(PY_TYPE(SpanNotQuery), (PyObject *) self, "createWeight", args, 2);
          }

          static PyObject *t_SpanNotQuery_equals(t_SpanNotQuery *self, PyObject *args)
          {
            ::java::lang::Object a0((jobject) NULL);
            jboolean result;

            if (!parseArgs(args, "o", &a0))
            {
              OBJ_CALL(result = self->object.equals(a0));
              Py_RETURN_BOOL(result);
            }

            return callSuper(PY_TYPE(SpanNotQuery), (PyObject *) self, "equals", args, 2);
          }

          static PyObject *t_SpanNotQuery_getExclude(t_SpanNotQuery *self)
          {
            ::org::apache::lucene::search::spans::SpanQuery result((jobject) NULL);
            OBJ_CALL(result = self->object.getExclude());
            return ::org::apache::lucene::search::spans::t_SpanQuery::wrap_Object(result);
          }

          static PyObject *t_SpanNotQuery_getField(t_SpanNotQuery *self, PyObject *args)
          {
            ::java::lang::String result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.getField());
              return j2p(result);
            }

            return callSuper(PY_TYPE(SpanNotQuery), (PyObject *) self, "getField", args, 2);
          }

          static PyObject *t_SpanNotQuery_getInclude(t_SpanNotQuery *self)
          {
            ::org::apache::lucene::search::spans::SpanQuery result((jobject) NULL);
            OBJ_CALL(result = self->object.getInclude());
            return ::org::apache::lucene::search::spans::t_SpanQuery::wrap_Object(result);
          }

          static PyObject *t_SpanNotQuery_hashCode(t_SpanNotQuery *self, PyObject *args)
          {
            jint result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.hashCode());
              return PyLong_FromLong((long) result);
            }

            return callSuper(PY_TYPE(SpanNotQuery), (PyObject *) self, "hashCode", args, 2);
          }

          static PyObject *t_SpanNotQuery_rewrite(t_SpanNotQuery *self, PyObject *args)
          {
            ::org::apache::lucene::index::IndexReader a0((jobject) NULL);
            ::org::apache::lucene::search::Query result((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::index::IndexReader::initializeClass, &a0))
            {
              OBJ_CALL(result = self->object.rewrite(a0));
              return ::org::apache::lucene::search::t_Query::wrap_Object(result);
            }

            return callSuper(PY_TYPE(SpanNotQuery), (PyObject *) self, "rewrite", args, 2);
          }

          static PyObject *t_SpanNotQuery_toString(t_SpanNotQuery *self, PyObject *args)
          {
            ::java::lang::String a0((jobject) NULL);
            ::java::lang::String result((jobject) NULL);

            if (!parseArgs(args, "s", &a0))
            {
              OBJ_CALL(result = self->object.toString(a0));
              return j2p(result);
            }

            return callSuper(PY_TYPE(SpanNotQuery), (PyObject *) self, "toString", args, 2);
          }

          static PyObject *t_SpanNotQuery_visit(t_SpanNotQuery *self, PyObject *args)
          {
            ::org::apache::lucene::search::QueryVisitor a0((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::search::QueryVisitor::initializeClass, &a0))
            {
              OBJ_CALL(self->object.visit(a0));
              Py_RETURN_NONE;
            }

            return callSuper(PY_TYPE(SpanNotQuery), (PyObject *) self, "visit", args, 2);
          }

          static PyObject *t_SpanNotQuery_get__exclude(t_SpanNotQuery *self, void *data)
          {
            ::org::apache::lucene::search::spans::SpanQuery value((jobject) NULL);
            OBJ_CALL(value = self->object.getExclude());
            return ::org::apache::lucene::search::spans::t_SpanQuery::wrap_Object(value);
          }

          static PyObject *t_SpanNotQuery_get__field(t_SpanNotQuery *self, void *data)
          {
            ::java::lang::String value((jobject) NULL);
            OBJ_CALL(value = self->object.getField());
            return j2p(value);
          }

          static PyObject *t_SpanNotQuery_get__include(t_SpanNotQuery *self, void *data)
          {
            ::org::apache::lucene::search::spans::SpanQuery value((jobject) NULL);
            OBJ_CALL(value = self->object.getInclude());
            return ::org::apache::lucene::search::spans::t_SpanQuery::wrap_Object(value);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queryparser/flexible/standard/processors/PointRangeQueryNodeProcessor.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace standard {
            namespace processors {

              ::java::lang::Class *PointRangeQueryNodeProcessor::class$ = NULL;
              jmethodID *PointRangeQueryNodeProcessor::mids$ = NULL;
              bool PointRangeQueryNodeProcessor::live$ = false;

              jclass PointRangeQueryNodeProcessor::initializeClass(bool getOnly)
              {
                if (getOnly)
                  return (jclass) (live$ ? class$->this$ : NULL);
                if (class$ == NULL)
                {
                  jclass cls = (jclass) env->findClass("org/apache/lucene/queryparser/flexible/standard/processors/PointRangeQueryNodeProcessor");

                  mids$ = new jmethodID[max_mid];
                  mids$[mid_init$_f2cc1bce94666404] = env->getMethodID(cls, "<init>", "()V");
                  mids$[mid_preProcessNode_9b07be8595532de7] = env->getMethodID(cls, "preProcessNode", "(Lorg/apache/lucene/queryparser/flexible/core/nodes/QueryNode;)Lorg/apache/lucene/queryparser/flexible/core/nodes/QueryNode;");
                  mids$[mid_postProcessNode_9b07be8595532de7] = env->getMethodID(cls, "postProcessNode", "(Lorg/apache/lucene/queryparser/flexible/core/nodes/QueryNode;)Lorg/apache/lucene/queryparser/flexible/core/nodes/QueryNode;");
                  mids$[mid_setChildrenOrder_e420eeaadf0bcd20] = env->getMethodID(cls, "setChildrenOrder", "(Ljava/util/List;)Ljava/util/List;");

                  class$ = new ::java::lang::Class(cls);
                  live$ = true;
                }
                return (jclass) class$->this$;
              }

              PointRangeQueryNodeProcessor::PointRangeQueryNodeProcessor() : ::org::apache::lucene::queryparser::flexible::core::processors::QueryNodeProcessorImpl(env->newObject(initializeClass, &mids$, mid_init$_f2cc1bce94666404)) {}
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace standard {
            namespace processors {
              static PyObject *t_PointRangeQueryNodeProcessor_cast_(PyTypeObject *type, PyObject *arg);
              static PyObject *t_PointRangeQueryNodeProcessor_instance_(PyTypeObject *type, PyObject *arg);
              static int t_PointRangeQueryNodeProcessor_init_(t_PointRangeQueryNodeProcessor *self, PyObject *args, PyObject *kwds);

              static PyMethodDef t_PointRangeQueryNodeProcessor__methods_[] = {
                DECLARE_METHOD(t_PointRangeQueryNodeProcessor, cast_, METH_O | METH_CLASS),
                DECLARE_METHOD(t_PointRangeQueryNodeProcessor, instance_, METH_O | METH_CLASS),
                { NULL, NULL, 0, NULL }
              };

              static PyType_Slot PY_TYPE_SLOTS(PointRangeQueryNodeProcessor)[] = {
                { Py_tp_methods, t_PointRangeQueryNodeProcessor__methods_ },
                { Py_tp_init, (void *) t_PointRangeQueryNodeProcessor_init_ },
                { 0, NULL }
              };

              static PyType_Def *PY_TYPE_BASES(PointRangeQueryNodeProcessor)[] = {
                &PY_TYPE_DEF(::org::apache::lucene::queryparser::flexible::core::processors::QueryNodeProcessorImpl),
                NULL
              };

              DEFINE_TYPE(PointRangeQueryNodeProcessor, t_PointRangeQueryNodeProcessor, PointRangeQueryNodeProcessor);

              void t_PointRangeQueryNodeProcessor::install(PyObject *module)
              {
                installType(&PY_TYPE(PointRangeQueryNodeProcessor), &PY_TYPE_DEF(PointRangeQueryNodeProcessor), module, "PointRangeQueryNodeProcessor", 0);
              }

              void t_PointRangeQueryNodeProcessor::initialize(PyObject *module)
              {
                PyObject_SetAttrString((PyObject *) PY_TYPE(PointRangeQueryNodeProcessor), "class_", make_descriptor(PointRangeQueryNodeProcessor::initializeClass, 1));
                PyObject_SetAttrString((PyObject *) PY_TYPE(PointRangeQueryNodeProcessor), "wrapfn_", make_descriptor(t_PointRangeQueryNodeProcessor::wrap_jobject));
                PyObject_SetAttrString((PyObject *) PY_TYPE(PointRangeQueryNodeProcessor), "boxfn_", make_descriptor(boxObject));
              }

              static PyObject *t_PointRangeQueryNodeProcessor_cast_(PyTypeObject *type, PyObject *arg)
              {
                if (!(arg = castCheck(arg, PointRangeQueryNodeProcessor::initializeClass, 1)))
                  return NULL;
                return t_PointRangeQueryNodeProcessor::wrap_Object(PointRangeQueryNodeProcessor(((t_PointRangeQueryNodeProcessor *) arg)->object.this$));
              }
              static PyObject *t_PointRangeQueryNodeProcessor_instance_(PyTypeObject *type, PyObject *arg)
              {
                if (!castCheck(arg, PointRangeQueryNodeProcessor::initializeClass, 0))
                  Py_RETURN_FALSE;
                Py_RETURN_TRUE;
              }

              static int t_PointRangeQueryNodeProcessor_init_(t_PointRangeQueryNodeProcessor *self, PyObject *args, PyObject *kwds)
              {
                PointRangeQueryNodeProcessor object((jobject) NULL);

                INT_CALL(object = PointRangeQueryNodeProcessor());
                self->object = object;

                return 0;
              }
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/ja/GraphvizFormatter.h"
#include "org/apache/lucene/analysis/ja/dict/ConnectionCosts.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace ja {

          ::java::lang::Class *GraphvizFormatter::class$ = NULL;
          jmethodID *GraphvizFormatter::mids$ = NULL;
          bool GraphvizFormatter::live$ = false;

          jclass GraphvizFormatter::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/ja/GraphvizFormatter");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_7894daa1b4081c11] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/analysis/ja/dict/ConnectionCosts;)V");
              mids$[mid_finish_db9b55ba01e03e4b] = env->getMethodID(cls, "finish", "()Ljava/lang/String;");

              class$ = new ::java::lang::Class(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          GraphvizFormatter::GraphvizFormatter(const ::org::apache::lucene::analysis::ja::dict::ConnectionCosts & a0) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_7894daa1b4081c11, a0.this$)) {}

          ::java::lang::String GraphvizFormatter::finish() const
          {
            return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_finish_db9b55ba01e03e4b]));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace ja {
          static PyObject *t_GraphvizFormatter_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_GraphvizFormatter_instance_(PyTypeObject *type, PyObject *arg);
          static int t_GraphvizFormatter_init_(t_GraphvizFormatter *self, PyObject *args, PyObject *kwds);
          static PyObject *t_GraphvizFormatter_finish(t_GraphvizFormatter *self);

          static PyMethodDef t_GraphvizFormatter__methods_[] = {
            DECLARE_METHOD(t_GraphvizFormatter, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_GraphvizFormatter, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_GraphvizFormatter, finish, METH_NOARGS),
            { NULL, NULL, 0, NULL }
          };

          static PyType_Slot PY_TYPE_SLOTS(GraphvizFormatter)[] = {
            { Py_tp_methods, t_GraphvizFormatter__methods_ },
            { Py_tp_init, (void *) t_GraphvizFormatter_init_ },
            { 0, NULL }
          };

          static PyType_Def *PY_TYPE_BASES(GraphvizFormatter)[] = {
            &PY_TYPE_DEF(::java::lang::Object),
            NULL
          };

          DEFINE_TYPE(GraphvizFormatter, t_GraphvizFormatter, GraphvizFormatter);

          void t_GraphvizFormatter::install(PyObject *module)
          {
            installType(&PY_TYPE(GraphvizFormatter), &PY_TYPE_DEF(GraphvizFormatter), module, "GraphvizFormatter", 0);
          }

          void t_GraphvizFormatter::initialize(PyObject *module)
          {
            PyObject_SetAttrString((PyObject *) PY_TYPE(GraphvizFormatter), "class_", make_descriptor(GraphvizFormatter::initializeClass, 1));
            PyObject_SetAttrString((PyObject *) PY_TYPE(GraphvizFormatter), "wrapfn_", make_descriptor(t_GraphvizFormatter::wrap_jobject));
            PyObject_SetAttrString((PyObject *) PY_TYPE(GraphvizFormatter), "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_GraphvizFormatter_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, GraphvizFormatter::initializeClass, 1)))
              return NULL;
            return t_GraphvizFormatter::wrap_Object(GraphvizFormatter(((t_GraphvizFormatter *) arg)->object.this$));
          }
          static PyObject *t_GraphvizFormatter_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, GraphvizFormatter::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_GraphvizFormatter_init_(t_GraphvizFormatter *self, PyObject *args, PyObject *kwds)
          {
            ::org::apache::lucene::analysis::ja::dict::ConnectionCosts a0((jobject) NULL);
            GraphvizFormatter object((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::analysis::ja::dict::ConnectionCosts::initializeClass, &a0))
            {
              INT_CALL(object = GraphvizFormatter(a0));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_GraphvizFormatter_finish(t_GraphvizFormatter *self)
          {
            ::java::lang::String result((jobject) NULL);
            OBJ_CALL(result = self->object.finish());
            return j2p(result);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queries/intervals/FilteredIntervalsSource.h"
#include "org/apache/lucene/index/LeafReaderContext.h"
#include "java/util/Collection.h"
#include "java/lang/Class.h"
#include "java/lang/Object.h"
#include "org/apache/lucene/queries/intervals/IntervalIterator.h"
#include "java/lang/String.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/search/QueryVisitor.h"
#include "org/apache/lucene/queries/intervals/IntervalMatchesIterator.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queries {
        namespace intervals {

          ::java::lang::Class *FilteredIntervalsSource::class$ = NULL;
          jmethodID *FilteredIntervalsSource::mids$ = NULL;
          bool FilteredIntervalsSource::live$ = false;

          jclass FilteredIntervalsSource::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/queries/intervals/FilteredIntervalsSource");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_1e32a8f89fb4c908] = env->getMethodID(cls, "<init>", "(Ljava/lang/String;Lorg/apache/lucene/queries/intervals/IntervalsSource;)V");
              mids$[mid_equals_8b72f2dcdde6fd1d] = env->getMethodID(cls, "equals", "(Ljava/lang/Object;)Z");
              mids$[mid_hashCode_9972fcc56b44e79d] = env->getMethodID(cls, "hashCode", "()I");
              mids$[mid_intervals_80ec7682f3d26944] = env->getMethodID(cls, "intervals", "(Ljava/lang/String;Lorg/apache/lucene/index/LeafReaderContext;)Lorg/apache/lucene/queries/intervals/IntervalIterator;");
              mids$[mid_matches_d5980412d2357d19] = env->getMethodID(cls, "matches", "(Ljava/lang/String;Lorg/apache/lucene/index/LeafReaderContext;I)Lorg/apache/lucene/queries/intervals/IntervalMatchesIterator;");
              mids$[mid_maxGaps_b5cbca4ec9a8c75a] = env->getStaticMethodID(cls, "maxGaps", "(Lorg/apache/lucene/queries/intervals/IntervalsSource;I)Lorg/apache/lucene/queries/intervals/IntervalsSource;");
              mids$[mid_maxWidth_b5cbca4ec9a8c75a] = env->getStaticMethodID(cls, "maxWidth", "(Lorg/apache/lucene/queries/intervals/IntervalsSource;I)Lorg/apache/lucene/queries/intervals/IntervalsSource;");
              mids$[mid_minExtent_9972fcc56b44e79d] = env->getMethodID(cls, "minExtent", "()I");
              mids$[mid_pullUpDisjunctions_d4dfbf7a26ff41df] = env->getMethodID(cls, "pullUpDisjunctions", "()Ljava/util/Collection;");
              mids$[mid_toString_db9b55ba01e03e4b] = env->getMethodID(cls, "toString", "()Ljava/lang/String;");
              mids$[mid_visit_1a0587fdd01f6343] = env->getMethodID(cls, "visit", "(Ljava/lang/String;Lorg/apache/lucene/search/QueryVisitor;)V");
              mids$[mid_accept_c612da1f7e163206] = env->getMethodID(cls, "accept", "(Lorg/apache/lucene/queries/intervals/IntervalIterator;)Z");

              class$ = new ::java::lang::Class(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          FilteredIntervalsSource::FilteredIntervalsSource(const ::java::lang::String & a0, const ::org::apache::lucene::queries::intervals::IntervalsSource & a1) : ::org::apache::lucene::queries::intervals::IntervalsSource(env->newObject(initializeClass, &mids$, mid_init$_1e32a8f89fb4c908, a0.this$, a1.this$)) {}

          jboolean FilteredIntervalsSource::equals(const ::java::lang::Object & a0) const
          {
            return env->callBooleanMethod(this$, mids$[mid_equals_8b72f2dcdde6fd1d], a0.this$);
          }

          jint FilteredIntervalsSource::hashCode() const
          {
            return env->callIntMethod(this$, mids$[mid_hashCode_9972fcc56b44e79d]);
          }

          ::org::apache::lucene::queries::intervals::IntervalIterator FilteredIntervalsSource::intervals(const ::java::lang::String & a0, const ::org::apache::lucene::index::LeafReaderContext & a1) const
          {
            return ::org::apache::lucene::queries::intervals::IntervalIterator(env->callObjectMethod(this$, mids$[mid_intervals_80ec7682f3d26944], a0.this$, a1.this$));
          }

          ::org::apache::lucene::queries::intervals::IntervalMatchesIterator FilteredIntervalsSource::matches(const ::java::lang::String & a0, const ::org::apache::lucene::index::LeafReaderContext & a1, jint a2) const
          {
            return ::org::apache::lucene::queries::intervals::IntervalMatchesIterator(env->callObjectMethod(this$, mids$[mid_matches_d5980412d2357d19], a0.this$, a1.this$, a2));
          }

          ::org::apache::lucene::queries::intervals::IntervalsSource FilteredIntervalsSource::maxGaps(const ::org::apache::lucene::queries::intervals::IntervalsSource & a0, jint a1)
          {
            jclass cls = env->getClass(initializeClass);
            return ::org::apache::lucene::queries::intervals::IntervalsSource(env->callStaticObjectMethod(cls, mids$[mid_maxGaps_b5cbca4ec9a8c75a], a0.this$, a1));
          }

          ::org::apache::lucene::queries::intervals::IntervalsSource FilteredIntervalsSource::maxWidth(const ::org::apache::lucene::queries::intervals::IntervalsSource & a0, jint a1)
          {
            jclass cls = env->getClass(initializeClass);
            return ::org::apache::lucene::queries::intervals::IntervalsSource(env->callStaticObjectMethod(cls, mids$[mid_maxWidth_b5cbca4ec9a8c75a], a0.this$, a1));
          }

          jint FilteredIntervalsSource::minExtent() const
          {
            return env->callIntMethod(this$, mids$[mid_minExtent_9972fcc56b44e79d]);
          }

          ::java::util::Collection FilteredIntervalsSource::pullUpDisjunctions() const
          {
            return ::java::util::Collection(env->callObjectMethod(this$, mids$[mid_pullUpDisjunctions_d4dfbf7a26ff41df]));
          }

          ::java::lang::String FilteredIntervalsSource::toString() const
          {
            return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_db9b55ba01e03e4b]));
          }

          void FilteredIntervalsSource::visit(const ::java::lang::String & a0, const ::org::apache::lucene::search::QueryVisitor & a1) const
          {
            env->callVoidMethod(this$, mids$[mid_visit_1a0587fdd01f6343], a0.this$, a1.this$);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queries {
        namespace intervals {
          static PyObject *t_FilteredIntervalsSource_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_FilteredIntervalsSource_instance_(PyTypeObject *type, PyObject *arg);
          static int t_FilteredIntervalsSource_init_(t_FilteredIntervalsSource *self, PyObject *args, PyObject *kwds);
          static PyObject *t_FilteredIntervalsSource_equals(t_FilteredIntervalsSource *self, PyObject *args);
          static PyObject *t_FilteredIntervalsSource_hashCode(t_FilteredIntervalsSource *self, PyObject *args);
          static PyObject *t_FilteredIntervalsSource_intervals(t_FilteredIntervalsSource *self, PyObject *args);
          static PyObject *t_FilteredIntervalsSource_matches(t_FilteredIntervalsSource *self, PyObject *args);
          static PyObject *t_FilteredIntervalsSource_maxGaps(PyTypeObject *type, PyObject *args);
          static PyObject *t_FilteredIntervalsSource_maxWidth(PyTypeObject *type, PyObject *args);
          static PyObject *t_FilteredIntervalsSource_minExtent(t_FilteredIntervalsSource *self, PyObject *args);
          static PyObject *t_FilteredIntervalsSource_pullUpDisjunctions(t_FilteredIntervalsSource *self, PyObject *args);
          static PyObject *t_FilteredIntervalsSource_toString(t_FilteredIntervalsSource *self, PyObject *args);
          static PyObject *t_FilteredIntervalsSource_visit(t_FilteredIntervalsSource *self, PyObject *args);

          static PyMethodDef t_FilteredIntervalsSource__methods_[] = {
            DECLARE_METHOD(t_FilteredIntervalsSource, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_FilteredIntervalsSource, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_FilteredIntervalsSource, equals, METH_VARARGS),
            DECLARE_METHOD(t_FilteredIntervalsSource, hashCode, METH_VARARGS),
            DECLARE_METHOD(t_FilteredIntervalsSource, intervals, METH_VARARGS),
            DECLARE_METHOD(t_FilteredIntervalsSource, matches, METH_VARARGS),
            DECLARE_METHOD(t_FilteredIntervalsSource, maxGaps, METH_VARARGS | METH_CLASS),
            DECLARE_METHOD(t_FilteredIntervalsSource, maxWidth, METH_VARARGS | METH_CLASS),
            DECLARE_METHOD(t_FilteredIntervalsSource, minExtent, METH_VARARGS),
            DECLARE_METHOD(t_FilteredIntervalsSource, pullUpDisjunctions, METH_VARARGS),
            DECLARE_METHOD(t_FilteredIntervalsSource, toString, METH_VARARGS),
            DECLARE_METHOD(t_FilteredIntervalsSource, visit, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          static PyType_Slot PY_TYPE_SLOTS(FilteredIntervalsSource)[] = {
            { Py_tp_methods, t_FilteredIntervalsSource__methods_ },
            { Py_tp_init, (void *) t_FilteredIntervalsSource_init_ },
            { 0, NULL }
          };

          static PyType_Def *PY_TYPE_BASES(FilteredIntervalsSource)[] = {
            &PY_TYPE_DEF(::org::apache::lucene::queries::intervals::IntervalsSource),
            NULL
          };

          DEFINE_TYPE(FilteredIntervalsSource, t_FilteredIntervalsSource, FilteredIntervalsSource);

          void t_FilteredIntervalsSource::install(PyObject *module)
          {
            installType(&PY_TYPE(FilteredIntervalsSource), &PY_TYPE_DEF(FilteredIntervalsSource), module, "FilteredIntervalsSource", 0);
          }

          void t_FilteredIntervalsSource::initialize(PyObject *module)
          {
            PyObject_SetAttrString((PyObject *) PY_TYPE(FilteredIntervalsSource), "class_", make_descriptor(FilteredIntervalsSource::initializeClass, 1));
            PyObject_SetAttrString((PyObject *) PY_TYPE(FilteredIntervalsSource), "wrapfn_", make_descriptor(t_FilteredIntervalsSource::wrap_jobject));
            PyObject_SetAttrString((PyObject *) PY_TYPE(FilteredIntervalsSource), "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_FilteredIntervalsSource_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, FilteredIntervalsSource::initializeClass, 1)))
              return NULL;
            return t_FilteredIntervalsSource::wrap_Object(FilteredIntervalsSource(((t_FilteredIntervalsSource *) arg)->object.this$));
          }
          static PyObject *t_FilteredIntervalsSource_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, FilteredIntervalsSource::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_FilteredIntervalsSource_init_(t_FilteredIntervalsSource *self, PyObject *args, PyObject *kwds)
          {
            ::java::lang::String a0((jobject) NULL);
            ::org::apache::lucene::queries::intervals::IntervalsSource a1((jobject) NULL);
            FilteredIntervalsSource object((jobject) NULL);

            if (!parseArgs(args, "sk", ::org::apache::lucene::queries::intervals::IntervalsSource::initializeClass, &a0, &a1))
            {
              INT_CALL(object = FilteredIntervalsSource(a0, a1));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_FilteredIntervalsSource_equals(t_FilteredIntervalsSource *self, PyObject *args)
          {
            ::java::lang::Object a0((jobject) NULL);
            jboolean result;

            if (!parseArgs(args, "o", &a0))
            {
              OBJ_CALL(result = self->object.equals(a0));
              Py_RETURN_BOOL(result);
            }

            return callSuper(PY_TYPE(FilteredIntervalsSource), (PyObject *) self, "equals", args, 2);
          }

          static PyObject *t_FilteredIntervalsSource_hashCode(t_FilteredIntervalsSource *self, PyObject *args)
          {
            jint result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.hashCode());
              return PyLong_FromLong((long) result);
            }

            return callSuper(PY_TYPE(FilteredIntervalsSource), (PyObject *) self, "hashCode", args, 2);
          }

          static PyObject *t_FilteredIntervalsSource_intervals(t_FilteredIntervalsSource *self, PyObject *args)
          {
            ::java::lang::String a0((jobject) NULL);
            ::org::apache::lucene::index::LeafReaderContext a1((jobject) NULL);
            ::org::apache::lucene::queries::intervals::IntervalIterator result((jobject) NULL);

            if (!parseArgs(args, "sk", ::org::apache::lucene::index::LeafReaderContext::initializeClass, &a0, &a1))
            {
              OBJ_CALL(result = self->object.intervals(a0, a1));
              return ::org::apache::lucene::queries::intervals::t_IntervalIterator::wrap_Object(result);
            }

            return callSuper(PY_TYPE(FilteredIntervalsSource), (PyObject *) self, "intervals", args, 2);
          }

          static PyObject *t_FilteredIntervalsSource_matches(t_FilteredIntervalsSource *self, PyObject *args)
          {
            ::java::lang::String a0((jobject) NULL);
            ::org::apache::lucene::index::LeafReaderContext a1((jobject) NULL);
            jint a2;
            ::org::apache::lucene::queries::intervals::IntervalMatchesIterator result((jobject) NULL);

            if (!parseArgs(args, "skI", ::org::apache::lucene::index::LeafReaderContext::initializeClass, &a0, &a1, &a2))
            {
              OBJ_CALL(result = self->object.matches(a0, a1, a2));
              return ::org::apache::lucene::queries::intervals::t_IntervalMatchesIterator::wrap_Object(result);
            }

            return callSuper(PY_TYPE(FilteredIntervalsSource), (PyObject *) self, "matches", args, 2);
          }

          static PyObject *t_FilteredIntervalsSource_maxGaps(PyTypeObject *type, PyObject *args)
          {
            ::org::apache::lucene::queries::intervals::IntervalsSource a0((jobject) NULL);
            jint a1;
            ::org::apache::lucene::queries::intervals::IntervalsSource result((jobject) NULL);

            if (!parseArgs(args, "kI", ::org::apache::lucene::queries::intervals::IntervalsSource::initializeClass, &a0, &a1))
            {
              OBJ_CALL(result = ::org::apache::lucene::queries::intervals::FilteredIntervalsSource::maxGaps(a0, a1));
              return ::org::apache::lucene::queries::intervals::t_IntervalsSource::wrap_Object(result);
            }

            PyErr_SetArgsError(type, "maxGaps", args);
            return NULL;
          }

          static PyObject *t_FilteredIntervalsSource_maxWidth(PyTypeObject *type, PyObject *args)
          {
            ::org::apache::lucene::queries::intervals::IntervalsSource a0((jobject) NULL);
            jint a1;
            ::org::apache::lucene::queries::intervals::IntervalsSource result((jobject) NULL);

            if (!parseArgs(args, "kI", ::org::apache::lucene::queries::intervals::IntervalsSource::initializeClass, &a0, &a1))
            {
              OBJ_CALL(result = ::org::apache::lucene::queries::intervals::FilteredIntervalsSource::maxWidth(a0, a1));
              return ::org::apache::lucene::queries::intervals::t_IntervalsSource::wrap_Object(result);
            }

            PyErr_SetArgsError(type, "maxWidth", args);
            return NULL;
          }

          static PyObject *t_FilteredIntervalsSource_minExtent(t_FilteredIntervalsSource *self, PyObject *args)
          {
            jint result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.minExtent());
              return PyLong_FromLong((long) result);
            }

            return callSuper(PY_TYPE(FilteredIntervalsSource), (PyObject *) self, "minExtent", args, 2);
          }

          static PyObject *t_FilteredIntervalsSource_pullUpDisjunctions(t_FilteredIntervalsSource *self, PyObject *args)
          {
            ::java::util::Collection result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.pullUpDisjunctions());
              return ::java::util::t_Collection::wrap_Object(result, ::org::apache::lucene::queries::intervals::PY_TYPE(IntervalsSource));
            }

            return callSuper(PY_TYPE(FilteredIntervalsSource), (PyObject *) self, "pullUpDisjunctions", args, 2);
          }

          static PyObject *t_FilteredIntervalsSource_toString(t_FilteredIntervalsSource *self, PyObject *args)
          {
            ::java::lang::String result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.toString());
              return j2p(result);
            }

            return callSuper(PY_TYPE(FilteredIntervalsSource), (PyObject *) self, "toString", args, 2);
          }

          static PyObject *t_FilteredIntervalsSource_visit(t_FilteredIntervalsSource *self, PyObject *args)
          {
            ::java::lang::String a0((jobject) NULL);
            ::org::apache::lucene::search::QueryVisitor a1((jobject) NULL);

            if (!parseArgs(args, "sk", ::org::apache::lucene::search::QueryVisitor::initializeClass, &a0, &a1))
            {
              OBJ_CALL(self->object.visit(a0, a1));
              Py_RETURN_NONE;
            }

            return callSuper(PY_TYPE(FilteredIntervalsSource), (PyObject *) self, "visit", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/join/SeekingTermSetTermsEnum.h"
#include "org/apache/lucene/util/BytesRefHash.h"
#include "org/apache/lucene/index/TermsEnum.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace join {

          ::java::lang::Class *SeekingTermSetTermsEnum::class$ = NULL;
          jmethodID *SeekingTermSetTermsEnum::mids$ = NULL;
          bool SeekingTermSetTermsEnum::live$ = false;

          jclass SeekingTermSetTermsEnum::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/search/join/SeekingTermSetTermsEnum");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_0856db2ffedd7854] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/index/TermsEnum;Lorg/apache/lucene/util/BytesRefHash;[I)V");
              mids$[mid_nextSeekTerm_858d77d551759ace] = env->getMethodID(cls, "nextSeekTerm", "(Lorg/apache/lucene/util/BytesRef;)Lorg/apache/lucene/util/BytesRef;");
              mids$[mid_accept_dc5d5822c627e12a] = env->getMethodID(cls, "accept", "(Lorg/apache/lucene/util/BytesRef;)Lorg/apache/lucene/index/FilteredTermsEnum$AcceptStatus;");

              class$ = new ::java::lang::Class(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          SeekingTermSetTermsEnum::SeekingTermSetTermsEnum(const ::org::apache::lucene::index::TermsEnum & a0, const ::org::apache::lucene::util::BytesRefHash & a1, const JArray< jint > & a2) : ::org::apache::lucene::index::FilteredTermsEnum(env->newObject(initializeClass, &mids$, mid_init$_0856db2ffedd7854, a0.this$, a1.this$, a2.this$)) {}
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace join {
          static PyObject *t_SeekingTermSetTermsEnum_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_SeekingTermSetTermsEnum_instance_(PyTypeObject *type, PyObject *arg);
          static int t_SeekingTermSetTermsEnum_init_(t_SeekingTermSetTermsEnum *self, PyObject *args, PyObject *kwds);

          static PyMethodDef t_SeekingTermSetTermsEnum__methods_[] = {
            DECLARE_METHOD(t_SeekingTermSetTermsEnum, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_SeekingTermSetTermsEnum, instance_, METH_O | METH_CLASS),
            { NULL, NULL, 0, NULL }
          };

          static PyType_Slot PY_TYPE_SLOTS(SeekingTermSetTermsEnum)[] = {
            { Py_tp_methods, t_SeekingTermSetTermsEnum__methods_ },
            { Py_tp_init, (void *) t_SeekingTermSetTermsEnum_init_ },
            { 0, NULL }
          };

          static PyType_Def *PY_TYPE_BASES(SeekingTermSetTermsEnum)[] = {
            &PY_TYPE_DEF(::org::apache::lucene::index::FilteredTermsEnum),
            NULL
          };

          DEFINE_TYPE(SeekingTermSetTermsEnum, t_SeekingTermSetTermsEnum, SeekingTermSetTermsEnum);

          void t_SeekingTermSetTermsEnum::install(PyObject *module)
          {
            installType(&PY_TYPE(SeekingTermSetTermsEnum), &PY_TYPE_DEF(SeekingTermSetTermsEnum), module, "SeekingTermSetTermsEnum", 0);
          }

          void t_SeekingTermSetTermsEnum::initialize(PyObject *module)
          {
            PyObject_SetAttrString((PyObject *) PY_TYPE(SeekingTermSetTermsEnum), "class_", make_descriptor(SeekingTermSetTermsEnum::initializeClass, 1));
            PyObject_SetAttrString((PyObject *) PY_TYPE(SeekingTermSetTermsEnum), "wrapfn_", make_descriptor(t_SeekingTermSetTermsEnum::wrap_jobject));
            PyObject_SetAttrString((PyObject *) PY_TYPE(SeekingTermSetTermsEnum), "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_SeekingTermSetTermsEnum_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, SeekingTermSetTermsEnum::initializeClass, 1)))
              return NULL;
            return t_SeekingTermSetTermsEnum::wrap_Object(SeekingTermSetTermsEnum(((t_SeekingTermSetTermsEnum *) arg)->object.this$));
          }
          static PyObject *t_SeekingTermSetTermsEnum_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, SeekingTermSetTermsEnum::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_SeekingTermSetTermsEnum_init_(t_SeekingTermSetTermsEnum *self, PyObject *args, PyObject *kwds)
          {
            ::org::apache::lucene::index::TermsEnum a0((jobject) NULL);
            ::org::apache::lucene::util::BytesRefHash a1((jobject) NULL);
            JArray< jint > a2((jobject) NULL);
            SeekingTermSetTermsEnum object((jobject) NULL);

            if (!parseArgs(args, "kk[I", ::org::apache::lucene::index::TermsEnum::initializeClass, ::org::apache::lucene::util::BytesRefHash::initializeClass, &a0, &a1, &a2))
            {
              INT_CALL(object = SeekingTermSetTermsEnum(a0, a1, a2));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/util/fst/BytesRefFSTEnum.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/util/fst/BytesRefFSTEnum$InputOutput.h"
#include "org/apache/lucene/util/BytesRef.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/util/fst/FST.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        namespace fst {

          ::java::lang::Class *BytesRefFSTEnum::class$ = NULL;
          jmethodID *BytesRefFSTEnum::mids$ = NULL;
          bool BytesRefFSTEnum::live$ = false;

          jclass BytesRefFSTEnum::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/util/fst/BytesRefFSTEnum");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_1ee434f3c8d3152a] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/util/fst/FST;)V");
              mids$[mid_current_b1ac188d30ea2934] = env->getMethodID(cls, "current", "()Lorg/apache/lucene/util/fst/BytesRefFSTEnum$InputOutput;");
              mids$[mid_next_b1ac188d30ea2934] = env->getMethodID(cls, "next", "()Lorg/apache/lucene/util/fst/BytesRefFSTEnum$InputOutput;");
              mids$[mid_seekCeil_f6943ba8c2db2c19] = env->getMethodID(cls, "seekCeil", "(Lorg/apache/lucene/util/BytesRef;)Lorg/apache/lucene/util/fst/BytesRefFSTEnum$InputOutput;");
              mids$[mid_seekExact_f6943ba8c2db2c19] = env->getMethodID(cls, "seekExact", "(Lorg/apache/lucene/util/BytesRef;)Lorg/apache/lucene/util/fst/BytesRefFSTEnum$InputOutput;");
              mids$[mid_seekFloor_f6943ba8c2db2c19] = env->getMethodID(cls, "seekFloor", "(Lorg/apache/lucene/util/BytesRef;)Lorg/apache/lucene/util/fst/BytesRefFSTEnum$InputOutput;");
              mids$[mid_setCurrentLabel_040c4cd0390c5aff] = env->getMethodID(cls, "setCurrentLabel", "(I)V");
              mids$[mid_getCurrentLabel_9972fcc56b44e79d] = env->getMethodID(cls, "getCurrentLabel", "()I");
              mids$[mid_getTargetLabel_9972fcc56b44e79d] = env->getMethodID(cls, "getTargetLabel", "()I");
              mids$[mid_grow_f2cc1bce94666404] = env->getMethodID(cls, "grow", "()V");

              class$ = new ::java::lang::Class(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          BytesRefFSTEnum::BytesRefFSTEnum(const ::org::apache::lucene::util::fst::FST & a0) : ::org::apache::lucene::util::fst::FSTEnum(env->newObject(initializeClass, &mids$, mid_init$_1ee434f3c8d3152a, a0.this$)) {}

          ::org::apache::lucene::util::fst::BytesRefFSTEnum$InputOutput BytesRefFSTEnum::current() const
          {
            return ::org::apache::lucene::util::fst::BytesRefFSTEnum$InputOutput(env->callObjectMethod(this$, mids$[mid_current_b1ac188d30ea2934]));
          }

          ::org::apache::lucene::util::fst::BytesRefFSTEnum$InputOutput BytesRefFSTEnum::next() const
          {
            return ::org::apache::lucene::util::fst::BytesRefFSTEnum$InputOutput(env->callObjectMethod(this$, mids$[mid_next_b1ac188d30ea2934]));
          }

          ::org::apache::lucene::util::fst::BytesRefFSTEnum$InputOutput BytesRefFSTEnum::seekCeil(const ::org::apache::lucene::util::BytesRef & a0) const
          {
            return ::org::apache::lucene::util::fst::BytesRefFSTEnum$InputOutput(env->callObjectMethod(this$, mids$[mid_seekCeil_f6943ba8c2db2c19], a0.this$));
          }

          ::org::apache::lucene::util::fst::BytesRefFSTEnum$InputOutput BytesRefFSTEnum::seekExact(const ::org::apache::lucene::util::BytesRef & a0) const
          {
            return ::org::apache::lucene::util::fst::BytesRefFSTEnum$InputOutput(env->callObjectMethod(this$, mids$[mid_seekExact_f6943ba8c2db2c19], a0.this$));
          }

          ::org::apache::lucene::util::fst::BytesRefFSTEnum$InputOutput BytesRefFSTEnum::seekFloor(const ::org::apache::lucene::util::BytesRef & a0) const
          {
            return ::org::apache::lucene::util::fst::BytesRefFSTEnum$InputOutput(env->callObjectMethod(this$, mids$[mid_seekFloor_f6943ba8c2db2c19], a0.this$));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        namespace fst {
          static PyObject *t_BytesRefFSTEnum_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_BytesRefFSTEnum_instance_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_BytesRefFSTEnum_of_(t_BytesRefFSTEnum *self, PyObject *args);
          static int t_BytesRefFSTEnum_init_(t_BytesRefFSTEnum *self, PyObject *args, PyObject *kwds);
          static PyObject *t_BytesRefFSTEnum_current(t_BytesRefFSTEnum *self);
          static PyObject *t_BytesRefFSTEnum_next(t_BytesRefFSTEnum *self);
          static PyObject *t_BytesRefFSTEnum_seekCeil(t_BytesRefFSTEnum *self, PyObject *arg);
          static PyObject *t_BytesRefFSTEnum_seekExact(t_BytesRefFSTEnum *self, PyObject *arg);
          static PyObject *t_BytesRefFSTEnum_seekFloor(t_BytesRefFSTEnum *self, PyObject *arg);
          static PyObject *t_BytesRefFSTEnum_get__parameters_(t_BytesRefFSTEnum *self, void *data);
          static PyGetSetDef t_BytesRefFSTEnum__fields_[] = {
            DECLARE_GET_FIELD(t_BytesRefFSTEnum, parameters_),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_BytesRefFSTEnum__methods_[] = {
            DECLARE_METHOD(t_BytesRefFSTEnum, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_BytesRefFSTEnum, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_BytesRefFSTEnum, of_, METH_VARARGS),
            DECLARE_METHOD(t_BytesRefFSTEnum, current, METH_NOARGS),
            DECLARE_METHOD(t_BytesRefFSTEnum, next, METH_NOARGS),
            DECLARE_METHOD(t_BytesRefFSTEnum, seekCeil, METH_O),
            DECLARE_METHOD(t_BytesRefFSTEnum, seekExact, METH_O),
            DECLARE_METHOD(t_BytesRefFSTEnum, seekFloor, METH_O),
            { NULL, NULL, 0, NULL }
          };

          static PyType_Slot PY_TYPE_SLOTS(BytesRefFSTEnum)[] = {
            { Py_tp_methods, t_BytesRefFSTEnum__methods_ },
            { Py_tp_init, (void *) t_BytesRefFSTEnum_init_ },
            { Py_tp_getset, t_BytesRefFSTEnum__fields_ },
            { Py_tp_iter, (void *) PyObject_SelfIter },
            { Py_tp_iternext, (void *) ((PyObject *(*)(t_BytesRefFSTEnum *)) get_generic_next< t_BytesRefFSTEnum,::org::apache::lucene::util::fst::t_BytesRefFSTEnum$InputOutput,::org::apache::lucene::util::fst::BytesRefFSTEnum$InputOutput >) },
            { 0, NULL }
          };

          static PyType_Def *PY_TYPE_BASES(BytesRefFSTEnum)[] = {
            &PY_TYPE_DEF(::org::apache::lucene::util::fst::FSTEnum),
            NULL
          };

          DEFINE_TYPE(BytesRefFSTEnum, t_BytesRefFSTEnum, BytesRefFSTEnum);
          PyObject *t_BytesRefFSTEnum::wrap_Object(const BytesRefFSTEnum& object, PyTypeObject *p0)
          {
            PyObject *obj = t_BytesRefFSTEnum::wrap_Object(object);
            if (obj != NULL && obj != Py_None)
            {
              t_BytesRefFSTEnum *self = (t_BytesRefFSTEnum *) obj;
              self->parameters[0] = p0;
            }
            return obj;
          }

          PyObject *t_BytesRefFSTEnum::wrap_jobject(const jobject& object, PyTypeObject *p0)
          {
            PyObject *obj = t_BytesRefFSTEnum::wrap_jobject(object);
            if (obj != NULL && obj != Py_None)
            {
              t_BytesRefFSTEnum *self = (t_BytesRefFSTEnum *) obj;
              self->parameters[0] = p0;
            }
            return obj;
          }

          void t_BytesRefFSTEnum::install(PyObject *module)
          {
            installType(&PY_TYPE(BytesRefFSTEnum), &PY_TYPE_DEF(BytesRefFSTEnum), module, "BytesRefFSTEnum", 0);
            PyObject_SetAttrString((PyObject *) PY_TYPE(BytesRefFSTEnum), "InputOutput", make_descriptor(&PY_TYPE_DEF(BytesRefFSTEnum$InputOutput)));
          }

          void t_BytesRefFSTEnum::initialize(PyObject *module)
          {
            PyObject_SetAttrString((PyObject *) PY_TYPE(BytesRefFSTEnum), "class_", make_descriptor(BytesRefFSTEnum::initializeClass, 1));
            PyObject_SetAttrString((PyObject *) PY_TYPE(BytesRefFSTEnum), "wrapfn_", make_descriptor(t_BytesRefFSTEnum::wrap_jobject));
            PyObject_SetAttrString((PyObject *) PY_TYPE(BytesRefFSTEnum), "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_BytesRefFSTEnum_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, BytesRefFSTEnum::initializeClass, 1)))
              return NULL;
            return t_BytesRefFSTEnum::wrap_Object(BytesRefFSTEnum(((t_BytesRefFSTEnum *) arg)->object.this$));
          }
          static PyObject *t_BytesRefFSTEnum_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, BytesRefFSTEnum::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static PyObject *t_BytesRefFSTEnum_of_(t_BytesRefFSTEnum *self, PyObject *args)
          {
            if (!parseArg(args, "T", 1, &(self->parameters)))
              Py_RETURN_SELF;
            return PyErr_SetArgsError((PyObject *) self, "of_", args);
          }

          static int t_BytesRefFSTEnum_init_(t_BytesRefFSTEnum *self, PyObject *args, PyObject *kwds)
          {
            ::org::apache::lucene::util::fst::FST a0((jobject) NULL);
            PyTypeObject **p0;
            BytesRefFSTEnum object((jobject) NULL);

            if (!parseArgs(args, "K", ::org::apache::lucene::util::fst::FST::initializeClass, &a0, &p0, ::org::apache::lucene::util::fst::t_FST::parameters_))
            {
              INT_CALL(object = BytesRefFSTEnum(a0));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_BytesRefFSTEnum_current(t_BytesRefFSTEnum *self)
          {
            ::org::apache::lucene::util::fst::BytesRefFSTEnum$InputOutput result((jobject) NULL);
            OBJ_CALL(result = self->object.current());
            return ::org::apache::lucene::util::fst::t_BytesRefFSTEnum$InputOutput::wrap_Object(result, self->parameters[0]);
          }

          static PyObject *t_BytesRefFSTEnum_next(t_BytesRefFSTEnum *self)
          {
            ::org::apache::lucene::util::fst::BytesRefFSTEnum$InputOutput result((jobject) NULL);
            OBJ_CALL(result = self->object.next());
            return ::org::apache::lucene::util::fst::t_BytesRefFSTEnum$InputOutput::wrap_Object(result, self->parameters[0]);
          }

          static PyObject *t_BytesRefFSTEnum_seekCeil(t_BytesRefFSTEnum *self, PyObject *arg)
          {
            ::org::apache::lucene::util::BytesRef a0((jobject) NULL);
            ::org::apache::lucene::util::fst::BytesRefFSTEnum$InputOutput result((jobject) NULL);

            if (!parseArg(arg, "k", ::org::apache::lucene::util::BytesRef::initializeClass, &a0))
            {
              OBJ_CALL(result = self->object.seekCeil(a0));
              return ::org::apache::lucene::util::fst::t_BytesRefFSTEnum$InputOutput::wrap_Object(result, self->parameters[0]);
            }

            PyErr_SetArgsError((PyObject *) self, "seekCeil", arg);
            return NULL;
          }

          static PyObject *t_BytesRefFSTEnum_seekExact(t_BytesRefFSTEnum *self, PyObject *arg)
          {
            ::org::apache::lucene::util::BytesRef a0((jobject) NULL);
            ::org::apache::lucene::util::fst::BytesRefFSTEnum$InputOutput result((jobject) NULL);

            if (!parseArg(arg, "k", ::org::apache::lucene::util::BytesRef::initializeClass, &a0))
            {
              OBJ_CALL(result = self->object.seekExact(a0));
              return ::org::apache::lucene::util::fst::t_BytesRefFSTEnum$InputOutput::wrap_Object(result, self->parameters[0]);
            }

            PyErr_SetArgsError((PyObject *) self, "seekExact", arg);
            return NULL;
          }

          static PyObject *t_BytesRefFSTEnum_seekFloor(t_BytesRefFSTEnum *self, PyObject *arg)
          {
            ::org::apache::lucene::util::BytesRef a0((jobject) NULL);
            ::org::apache::lucene::util::fst::BytesRefFSTEnum$InputOutput result((jobject) NULL);

            if (!parseArg(arg, "k", ::org::apache::lucene::util::BytesRef::initializeClass, &a0))
            {
              OBJ_CALL(result = self->object.seekFloor(a0));
              return ::org::apache::lucene::util::fst::t_BytesRefFSTEnum$InputOutput::wrap_Object(result, self->parameters[0]);
            }

            PyErr_SetArgsError((PyObject *) self, "seekFloor", arg);
            return NULL;
          }
          static PyObject *t_BytesRefFSTEnum_get__parameters_(t_BytesRefFSTEnum *self, void *data)
          {
            return typeParameters(self->parameters, sizeof(self->parameters));
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/codecs/simpletext/SimpleTextPointsFormat.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/codecs/PointsWriter.h"
#include "org/apache/lucene/index/SegmentReadState.h"
#include "org/apache/lucene/codecs/PointsReader.h"
#include "org/apache/lucene/index/SegmentWriteState.h"
#include "java/io/IOException.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace codecs {
        namespace simpletext {

          ::java::lang::Class *SimpleTextPointsFormat::class$ = NULL;
          jmethodID *SimpleTextPointsFormat::mids$ = NULL;
          bool SimpleTextPointsFormat::live$ = false;

          jclass SimpleTextPointsFormat::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/codecs/simpletext/SimpleTextPointsFormat");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_f2cc1bce94666404] = env->getMethodID(cls, "<init>", "()V");
              mids$[mid_fieldsReader_8abb687068409d66] = env->getMethodID(cls, "fieldsReader", "(Lorg/apache/lucene/index/SegmentReadState;)Lorg/apache/lucene/codecs/PointsReader;");
              mids$[mid_fieldsWriter_e285a7edd004a5e4] = env->getMethodID(cls, "fieldsWriter", "(Lorg/apache/lucene/index/SegmentWriteState;)Lorg/apache/lucene/codecs/PointsWriter;");

              class$ = new ::java::lang::Class(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          SimpleTextPointsFormat::SimpleTextPointsFormat() : ::org::apache::lucene::codecs::PointsFormat(env->newObject(initializeClass, &mids$, mid_init$_f2cc1bce94666404)) {}

          ::org::apache::lucene::codecs::PointsReader SimpleTextPointsFormat::fieldsReader(const ::org::apache::lucene::index::SegmentReadState & a0) const
          {
            return ::org::apache::lucene::codecs::PointsReader(env->callObjectMethod(this$, mids$[mid_fieldsReader_8abb687068409d66], a0.this$));
          }

          ::org::apache::lucene::codecs::PointsWriter SimpleTextPointsFormat::fieldsWriter(const ::org::apache::lucene::index::SegmentWriteState & a0) const
          {
            return ::org::apache::lucene::codecs::PointsWriter(env->callObjectMethod(this$, mids$[mid_fieldsWriter_e285a7edd004a5e4], a0.this$));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace codecs {
        namespace simpletext {
          static PyObject *t_SimpleTextPointsFormat_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_SimpleTextPointsFormat_instance_(PyTypeObject *type, PyObject *arg);
          static int t_SimpleTextPointsFormat_init_(t_SimpleTextPointsFormat *self, PyObject *args, PyObject *kwds);
          static PyObject *t_SimpleTextPointsFormat_fieldsReader(t_SimpleTextPointsFormat *self, PyObject *args);
          static PyObject *t_SimpleTextPointsFormat_fieldsWriter(t_SimpleTextPointsFormat *self, PyObject *args);

          static PyMethodDef t_SimpleTextPointsFormat__methods_[] = {
            DECLARE_METHOD(t_SimpleTextPointsFormat, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_SimpleTextPointsFormat, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_SimpleTextPointsFormat, fieldsReader, METH_VARARGS),
            DECLARE_METHOD(t_SimpleTextPointsFormat, fieldsWriter, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          static PyType_Slot PY_TYPE_SLOTS(SimpleTextPointsFormat)[] = {
            { Py_tp_methods, t_SimpleTextPointsFormat__methods_ },
            { Py_tp_init, (void *) t_SimpleTextPointsFormat_init_ },
            { 0, NULL }
          };

          static PyType_Def *PY_TYPE_BASES(SimpleTextPointsFormat)[] = {
            &PY_TYPE_DEF(::org::apache::lucene::codecs::PointsFormat),
            NULL
          };

          DEFINE_TYPE(SimpleTextPointsFormat, t_SimpleTextPointsFormat, SimpleTextPointsFormat);

          void t_SimpleTextPointsFormat::install(PyObject *module)
          {
            installType(&PY_TYPE(SimpleTextPointsFormat), &PY_TYPE_DEF(SimpleTextPointsFormat), module, "SimpleTextPointsFormat", 0);
          }

          void t_SimpleTextPointsFormat::initialize(PyObject *module)
          {
            PyObject_SetAttrString((PyObject *) PY_TYPE(SimpleTextPointsFormat), "class_", make_descriptor(SimpleTextPointsFormat::initializeClass, 1));
            PyObject_SetAttrString((PyObject *) PY_TYPE(SimpleTextPointsFormat), "wrapfn_", make_descriptor(t_SimpleTextPointsFormat::wrap_jobject));
            PyObject_SetAttrString((PyObject *) PY_TYPE(SimpleTextPointsFormat), "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_SimpleTextPointsFormat_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, SimpleTextPointsFormat::initializeClass, 1)))
              return NULL;
            return t_SimpleTextPointsFormat::wrap_Object(SimpleTextPointsFormat(((t_SimpleTextPointsFormat *) arg)->object.this$));
          }
          static PyObject *t_SimpleTextPointsFormat_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, SimpleTextPointsFormat::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_SimpleTextPointsFormat_init_(t_SimpleTextPointsFormat *self, PyObject *args, PyObject *kwds)
          {
            SimpleTextPointsFormat object((jobject) NULL);

            INT_CALL(object = SimpleTextPointsFormat());
            self->object = object;

            return 0;
          }

          static PyObject *t_SimpleTextPointsFormat_fieldsReader(t_SimpleTextPointsFormat *self, PyObject *args)
          {
            ::org::apache::lucene::index::SegmentReadState a0((jobject) NULL);
            ::org::apache::lucene::codecs::PointsReader result((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::index::SegmentReadState::initializeClass, &a0))
            {
              OBJ_CALL(result = self->object.fieldsReader(a0));
              return ::org::apache::lucene::codecs::t_PointsReader::wrap_Object(result);
            }

            return callSuper(PY_TYPE(SimpleTextPointsFormat), (PyObject *) self, "fieldsReader", args, 2);
          }

          static PyObject *t_SimpleTextPointsFormat_fieldsWriter(t_SimpleTextPointsFormat *self, PyObject *args)
          {
            ::org::apache::lucene::index::SegmentWriteState a0((jobject) NULL);
            ::org::apache::lucene::codecs::PointsWriter result((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::index::SegmentWriteState::initializeClass, &a0))
            {
              OBJ_CALL(result = self->object.fieldsWriter(a0));
              return ::org::apache::lucene::codecs::t_PointsWriter::wrap_Object(result);
            }

            return callSuper(PY_TYPE(SimpleTextPointsFormat), (PyObject *) self, "fieldsWriter", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/facet/DrillSideways$ConcurrentDrillSidewaysResult.h"
#include "java/lang/Object.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace facet {

        ::java::lang::Class *DrillSideways$ConcurrentDrillSidewaysResult::class$ = NULL;
        jmethodID *DrillSideways$ConcurrentDrillSidewaysResult::mids$ = NULL;
        jfieldID *DrillSideways$ConcurrentDrillSidewaysResult::fids$ = NULL;
        bool DrillSideways$ConcurrentDrillSidewaysResult::live$ = false;

        jclass DrillSideways$ConcurrentDrillSidewaysResult::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/facet/DrillSideways$ConcurrentDrillSidewaysResult");

            fids$ = new jfieldID[max_fid];
            fids$[fid_collectorResult] = env->getFieldID(cls, "collectorResult", "Ljava/lang/Object;");

            class$ = new ::java::lang::Class(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        ::java::lang::Object DrillSideways$ConcurrentDrillSidewaysResult::_get_collectorResult() const
        {
          return ::java::lang::Object(env->getObjectField(this$, fids$[fid_collectorResult]));
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace facet {
        static PyObject *t_DrillSideways$ConcurrentDrillSidewaysResult_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_DrillSideways$ConcurrentDrillSidewaysResult_instance_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_DrillSideways$ConcurrentDrillSidewaysResult_of_(t_DrillSideways$ConcurrentDrillSidewaysResult *self, PyObject *args);
        static PyObject *t_DrillSideways$ConcurrentDrillSidewaysResult_get__collectorResult(t_DrillSideways$ConcurrentDrillSidewaysResult *self, void *data);

        static PyObject *t_DrillSideways$ConcurrentDrillSidewaysResult_get__parameters_(t_DrillSideways$ConcurrentDrillSidewaysResult *self, void *data);
        static PyGetSetDef t_DrillSideways$ConcurrentDrillSidewaysResult__fields_[] = {
          DECLARE_GET_FIELD(t_DrillSideways$ConcurrentDrillSidewaysResult, collectorResult),
          DECLARE_GET_FIELD(t_DrillSideways$ConcurrentDrillSidewaysResult, parameters_),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_DrillSideways$ConcurrentDrillSidewaysResult__methods_[] = {
          DECLARE_METHOD(t_DrillSideways$ConcurrentDrillSidewaysResult, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_DrillSideways$ConcurrentDrillSidewaysResult, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_DrillSideways$ConcurrentDrillSidewaysResult, of_, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        static PyType_Slot PY_TYPE_SLOTS(DrillSideways$ConcurrentDrillSidewaysResult)[] = {
          { Py_tp_methods, t_DrillSideways$ConcurrentDrillSidewaysResult__methods_ },
          { Py_tp_init, (void *) abstract_init },
          { Py_tp_getset, t_DrillSideways$ConcurrentDrillSidewaysResult__fields_ },
          { 0, NULL }
        };

        static PyType_Def *PY_TYPE_BASES(DrillSideways$ConcurrentDrillSidewaysResult)[] = {
          &PY_TYPE_DEF(::org::apache::lucene::facet::DrillSideways$DrillSidewaysResult),
          NULL
        };

        DEFINE_TYPE(DrillSideways$ConcurrentDrillSidewaysResult, t_DrillSideways$ConcurrentDrillSidewaysResult, DrillSideways$ConcurrentDrillSidewaysResult);
        PyObject *t_DrillSideways$ConcurrentDrillSidewaysResult::wrap_Object(const DrillSideways$ConcurrentDrillSidewaysResult& object, PyTypeObject *p0)
        {
          PyObject *obj = t_DrillSideways$ConcurrentDrillSidewaysResult::wrap_Object(object);
          if (obj != NULL && obj != Py_None)
          {
            t_DrillSideways$ConcurrentDrillSidewaysResult *self = (t_DrillSideways$ConcurrentDrillSidewaysResult *) obj;
            self->parameters[0] = p0;
          }
          return obj;
        }

        PyObject *t_DrillSideways$ConcurrentDrillSidewaysResult::wrap_jobject(const jobject& object, PyTypeObject *p0)
        {
          PyObject *obj = t_DrillSideways$ConcurrentDrillSidewaysResult::wrap_jobject(object);
          if (obj != NULL && obj != Py_None)
          {
            t_DrillSideways$ConcurrentDrillSidewaysResult *self = (t_DrillSideways$ConcurrentDrillSidewaysResult *) obj;
            self->parameters[0] = p0;
          }
          return obj;
        }

        void t_DrillSideways$ConcurrentDrillSidewaysResult::install(PyObject *module)
        {
          installType(&PY_TYPE(DrillSideways$ConcurrentDrillSidewaysResult), &PY_TYPE_DEF(DrillSideways$ConcurrentDrillSidewaysResult), module, "DrillSideways$ConcurrentDrillSidewaysResult", 0);
        }

        void t_DrillSideways$ConcurrentDrillSidewaysResult::initialize(PyObject *module)
        {
          PyObject_SetAttrString((PyObject *) PY_TYPE(DrillSideways$ConcurrentDrillSidewaysResult), "class_", make_descriptor(DrillSideways$ConcurrentDrillSidewaysResult::initializeClass, 1));
          PyObject_SetAttrString((PyObject *) PY_TYPE(DrillSideways$ConcurrentDrillSidewaysResult), "wrapfn_", make_descriptor(t_DrillSideways$ConcurrentDrillSidewaysResult::wrap_jobject));
          PyObject_SetAttrString((PyObject *) PY_TYPE(DrillSideways$ConcurrentDrillSidewaysResult), "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_DrillSideways$ConcurrentDrillSidewaysResult_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, DrillSideways$ConcurrentDrillSidewaysResult::initializeClass, 1)))
            return NULL;
          return t_DrillSideways$ConcurrentDrillSidewaysResult::wrap_Object(DrillSideways$ConcurrentDrillSidewaysResult(((t_DrillSideways$ConcurrentDrillSidewaysResult *) arg)->object.this$));
        }
        static PyObject *t_DrillSideways$ConcurrentDrillSidewaysResult_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, DrillSideways$ConcurrentDrillSidewaysResult::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static PyObject *t_DrillSideways$ConcurrentDrillSidewaysResult_of_(t_DrillSideways$ConcurrentDrillSidewaysResult *self, PyObject *args)
        {
          if (!parseArg(args, "T", 1, &(self->parameters)))
            Py_RETURN_SELF;
          return PyErr_SetArgsError((PyObject *) self, "of_", args);
        }
        static PyObject *t_DrillSideways$ConcurrentDrillSidewaysResult_get__parameters_(t_DrillSideways$ConcurrentDrillSidewaysResult *self, void *data)
        {
          return typeParameters(self->parameters, sizeof(self->parameters));
        }

        static PyObject *t_DrillSideways$ConcurrentDrillSidewaysResult_get__collectorResult(t_DrillSideways$ConcurrentDrillSidewaysResult *self, void *data)
        {
          ::java::lang::Object value((jobject) NULL);
          OBJ_CALL(value = self->object._get_collectorResult());
          return ::java::lang::t_Object::wrap_Object(value);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/highlight/TokenGroup.h"
#include "org/apache/lucene/analysis/TokenStream.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace highlight {

          ::java::lang::Class *TokenGroup::class$ = NULL;
          jmethodID *TokenGroup::mids$ = NULL;
          bool TokenGroup::live$ = false;

          jclass TokenGroup::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/search/highlight/TokenGroup");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_c26756868a754f4e] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/analysis/TokenStream;)V");
              mids$[mid_getEndOffset_9972fcc56b44e79d] = env->getMethodID(cls, "getEndOffset", "()I");
              mids$[mid_getNumTokens_9972fcc56b44e79d] = env->getMethodID(cls, "getNumTokens", "()I");
              mids$[mid_getScore_384f078ef4b8f931] = env->getMethodID(cls, "getScore", "(I)F");
              mids$[mid_getStartOffset_9972fcc56b44e79d] = env->getMethodID(cls, "getStartOffset", "()I");
              mids$[mid_getTotalScore_58aec2b64dff50c8] = env->getMethodID(cls, "getTotalScore", "()F");

              class$ = new ::java::lang::Class(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          TokenGroup::TokenGroup(const ::org::apache::lucene::analysis::TokenStream & a0) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_c26756868a754f4e, a0.this$)) {}

          jint TokenGroup::getEndOffset() const
          {
            return env->callIntMethod(this$, mids$[mid_getEndOffset_9972fcc56b44e79d]);
          }

          jint TokenGroup::getNumTokens() const
          {
            return env->callIntMethod(this$, mids$[mid_getNumTokens_9972fcc56b44e79d]);
          }

          jfloat TokenGroup::getScore(jint a0) const
          {
            return env->callFloatMethod(this$, mids$[mid_getScore_384f078ef4b8f931], a0);
          }

          jint TokenGroup::getStartOffset() const
          {
            return env->callIntMethod(this$, mids$[mid_getStartOffset_9972fcc56b44e79d]);
          }

          jfloat TokenGroup::getTotalScore() const
          {
            return env->callFloatMethod(this$, mids$[mid_getTotalScore_58aec2b64dff50c8]);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace highlight {
          static PyObject *t_TokenGroup_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_TokenGroup_instance_(PyTypeObject *type, PyObject *arg);
          static int t_TokenGroup_init_(t_TokenGroup *self, PyObject *args, PyObject *kwds);
          static PyObject *t_TokenGroup_getEndOffset(t_TokenGroup *self);
          static PyObject *t_TokenGroup_getNumTokens(t_TokenGroup *self);
          static PyObject *t_TokenGroup_getScore(t_TokenGroup *self, PyObject *arg);
          static PyObject *t_TokenGroup_getStartOffset(t_TokenGroup *self);
          static PyObject *t_TokenGroup_getTotalScore(t_TokenGroup *self);
          static PyObject *t_TokenGroup_get__endOffset(t_TokenGroup *self, void *data);
          static PyObject *t_TokenGroup_get__numTokens(t_TokenGroup *self, void *data);
          static PyObject *t_TokenGroup_get__startOffset(t_TokenGroup *self, void *data);
          static PyObject *t_TokenGroup_get__totalScore(t_TokenGroup *self, void *data);
          static PyGetSetDef t_TokenGroup__fields_[] = {
            DECLARE_GET_FIELD(t_TokenGroup, endOffset),
            DECLARE_GET_FIELD(t_TokenGroup, numTokens),
            DECLARE_GET_FIELD(t_TokenGroup, startOffset),
            DECLARE_GET_FIELD(t_TokenGroup, totalScore),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_TokenGroup__methods_[] = {
            DECLARE_METHOD(t_TokenGroup, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_TokenGroup, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_TokenGroup, getEndOffset, METH_NOARGS),
            DECLARE_METHOD(t_TokenGroup, getNumTokens, METH_NOARGS),
            DECLARE_METHOD(t_TokenGroup, getScore, METH_O),
            DECLARE_METHOD(t_TokenGroup, getStartOffset, METH_NOARGS),
            DECLARE_METHOD(t_TokenGroup, getTotalScore, METH_NOARGS),
            { NULL, NULL, 0, NULL }
          };

          static PyType_Slot PY_TYPE_SLOTS(TokenGroup)[] = {
            { Py_tp_methods, t_TokenGroup__methods_ },
            { Py_tp_init, (void *) t_TokenGroup_init_ },
            { Py_tp_getset, t_TokenGroup__fields_ },
            { 0, NULL }
          };

          static PyType_Def *PY_TYPE_BASES(TokenGroup)[] = {
            &PY_TYPE_DEF(::java::lang::Object),
            NULL
          };

          DEFINE_TYPE(TokenGroup, t_TokenGroup, TokenGroup);

          void t_TokenGroup::install(PyObject *module)
          {
            installType(&PY_TYPE(TokenGroup), &PY_TYPE_DEF(TokenGroup), module, "TokenGroup", 0);
          }

          void t_TokenGroup::initialize(PyObject *module)
          {
            PyObject_SetAttrString((PyObject *) PY_TYPE(TokenGroup), "class_", make_descriptor(TokenGroup::initializeClass, 1));
            PyObject_SetAttrString((PyObject *) PY_TYPE(TokenGroup), "wrapfn_", make_descriptor(t_TokenGroup::wrap_jobject));
            PyObject_SetAttrString((PyObject *) PY_TYPE(TokenGroup), "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_TokenGroup_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, TokenGroup::initializeClass, 1)))
              return NULL;
            return t_TokenGroup::wrap_Object(TokenGroup(((t_TokenGroup *) arg)->object.this$));
          }
          static PyObject *t_TokenGroup_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, TokenGroup::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_TokenGroup_init_(t_TokenGroup *self, PyObject *args, PyObject *kwds)
          {
            ::org::apache::lucene::analysis::TokenStream a0((jobject) NULL);
            TokenGroup object((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::analysis::TokenStream::initializeClass, &a0))
            {
              INT_CALL(object = TokenGroup(a0));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_TokenGroup_getEndOffset(t_TokenGroup *self)
          {
            jint result;
            OBJ_CALL(result = self->object.getEndOffset());
            return PyLong_FromLong((long) result);
          }

          static PyObject *t_TokenGroup_getNumTokens(t_TokenGroup *self)
          {
            jint result;
            OBJ_CALL(result = self->object.getNumTokens());
            return PyLong_FromLong((long) result);
          }

          static PyObject *t_TokenGroup_getScore(t_TokenGroup *self, PyObject *arg)
          {
            jint a0;
            jfloat result;

            if (!parseArg(arg, "I", &a0))
            {
              OBJ_CALL(result = self->object.getScore(a0));
              return PyFloat_FromDouble((double) result);
            }

            PyErr_SetArgsError((PyObject *) self, "getScore", arg);
            return NULL;
          }

          static PyObject *t_TokenGroup_getStartOffset(t_TokenGroup *self)
          {
            jint result;
            OBJ_CALL(result = self->object.getStartOffset());
            return PyLong_FromLong((long) result);
          }

          static PyObject *t_TokenGroup_getTotalScore(t_TokenGroup *self)
          {
            jfloat result;
            OBJ_CALL(result = self->object.getTotalScore());
            return PyFloat_FromDouble((double) result);
          }

          static PyObject *t_TokenGroup_get__endOffset(t_TokenGroup *self, void *data)
          {
            jint value;
            OBJ_CALL(value = self->object.getEndOffset());
            return PyLong_FromLong((long) value);
          }

          static PyObject *t_TokenGroup_get__numTokens(t_TokenGroup *self, void *data)
          {
            jint value;
            OBJ_CALL(value = self->object.getNumTokens());
            return PyLong_FromLong((long) value);
          }

          static PyObject *t_TokenGroup_get__startOffset(t_TokenGroup *self, void *data)
          {
            jint value;
            OBJ_CALL(value = self->object.getStartOffset());
            return PyLong_FromLong((long) value);
          }

          static PyObject *t_TokenGroup_get__totalScore(t_TokenGroup *self, void *data)
          {
            jfloat value;
            OBJ_CALL(value = self->object.getTotalScore());
            return PyFloat_FromDouble((double) value);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/core/UpperCaseFilter.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/analysis/TokenStream.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace core {

          ::java::lang::Class *UpperCaseFilter::class$ = NULL;
          jmethodID *UpperCaseFilter::mids$ = NULL;
          bool UpperCaseFilter::live$ = false;

          jclass UpperCaseFilter::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/core/UpperCaseFilter");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_c26756868a754f4e] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/analysis/TokenStream;)V");
              mids$[mid_incrementToken_8454bd5aa23fd11e] = env->getMethodID(cls, "incrementToken", "()Z");

              class$ = new ::java::lang::Class(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          UpperCaseFilter::UpperCaseFilter(const ::org::apache::lucene::analysis::TokenStream & a0) : ::org::apache::lucene::analysis::TokenFilter(env->newObject(initializeClass, &mids$, mid_init$_c26756868a754f4e, a0.this$)) {}

          jboolean UpperCaseFilter::incrementToken() const
          {
            return env->callBooleanMethod(this$, mids$[mid_incrementToken_8454bd5aa23fd11e]);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace core {
          static PyObject *t_UpperCaseFilter_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_UpperCaseFilter_instance_(PyTypeObject *type, PyObject *arg);
          static int t_UpperCaseFilter_init_(t_UpperCaseFilter *self, PyObject *args, PyObject *kwds);
          static PyObject *t_UpperCaseFilter_incrementToken(t_UpperCaseFilter *self, PyObject *args);

          static PyMethodDef t_UpperCaseFilter__methods_[] = {
            DECLARE_METHOD(t_UpperCaseFilter, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_UpperCaseFilter, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_UpperCaseFilter, incrementToken, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          static PyType_Slot PY_TYPE_SLOTS(UpperCaseFilter)[] = {
            { Py_tp_methods, t_UpperCaseFilter__methods_ },
            { Py_tp_init, (void *) t_UpperCaseFilter_init_ },
            { 0, NULL }
          };

          static PyType_Def *PY_TYPE_BASES(UpperCaseFilter)[] = {
            &PY_TYPE_DEF(::org::apache::lucene::analysis::TokenFilter),
            NULL
          };

          DEFINE_TYPE(UpperCaseFilter, t_UpperCaseFilter, UpperCaseFilter);

          void t_UpperCaseFilter::install(PyObject *module)
          {
            installType(&PY_TYPE(UpperCaseFilter), &PY_TYPE_DEF(UpperCaseFilter), module, "UpperCaseFilter", 0);
          }

          void t_UpperCaseFilter::initialize(PyObject *module)
          {
            PyObject_SetAttrString((PyObject *) PY_TYPE(UpperCaseFilter), "class_", make_descriptor(UpperCaseFilter::initializeClass, 1));
            PyObject_SetAttrString((PyObject *) PY_TYPE(UpperCaseFilter), "wrapfn_", make_descriptor(t_UpperCaseFilter::wrap_jobject));
            PyObject_SetAttrString((PyObject *) PY_TYPE(UpperCaseFilter), "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_UpperCaseFilter_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, UpperCaseFilter::initializeClass, 1)))
              return NULL;
            return t_UpperCaseFilter::wrap_Object(UpperCaseFilter(((t_UpperCaseFilter *) arg)->object.this$));
          }
          static PyObject *t_UpperCaseFilter_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, UpperCaseFilter::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_UpperCaseFilter_init_(t_UpperCaseFilter *self, PyObject *args, PyObject *kwds)
          {
            ::org::apache::lucene::analysis::TokenStream a0((jobject) NULL);
            UpperCaseFilter object((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::analysis::TokenStream::initializeClass, &a0))
            {
              INT_CALL(object = UpperCaseFilter(a0));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_UpperCaseFilter_incrementToken(t_UpperCaseFilter *self, PyObject *args)
          {
            jboolean result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.incrementToken());
              Py_RETURN_BOOL(result);
            }

            return callSuper(PY_TYPE(UpperCaseFilter), (PyObject *) self, "incrementToken", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/spell/DirectSpellChecker.h"
#include "org/apache/lucene/search/spell/SuggestWord.h"
#include "org/apache/lucene/index/IndexReader.h"
#include "java/util/Comparator.h"
#include "org/apache/lucene/search/spell/SuggestMode.h"
#include "org/apache/lucene/index/Term.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/search/spell/StringDistance.h"
#include "java/io/IOException.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace spell {

          ::java::lang::Class *DirectSpellChecker::class$ = NULL;
          jmethodID *DirectSpellChecker::mids$ = NULL;
          bool DirectSpellChecker::live$ = false;
          ::org::apache::lucene::search::spell::StringDistance *DirectSpellChecker::INTERNAL_LEVENSHTEIN = NULL;

          jclass DirectSpellChecker::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/search/spell/DirectSpellChecker");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_f2cc1bce94666404] = env->getMethodID(cls, "<init>", "()V");
              mids$[mid_getAccuracy_58aec2b64dff50c8] = env->getMethodID(cls, "getAccuracy", "()F");
              mids$[mid_getComparator_beb0414e0ec1de00] = env->getMethodID(cls, "getComparator", "()Ljava/util/Comparator;");
              mids$[mid_getDistance_2012a1536a00ef81] = env->getMethodID(cls, "getDistance", "()Lorg/apache/lucene/search/spell/StringDistance;");
              mids$[mid_getLowerCaseTerms_8454bd5aa23fd11e] = env->getMethodID(cls, "getLowerCaseTerms", "()Z");
              mids$[mid_getMaxEdits_9972fcc56b44e79d] = env->getMethodID(cls, "getMaxEdits", "()I");
              mids$[mid_getMaxInspections_9972fcc56b44e79d] = env->getMethodID(cls, "getMaxInspections", "()I");
              mids$[mid_getMaxQueryFrequency_58aec2b64dff50c8] = env->getMethodID(cls, "getMaxQueryFrequency", "()F");
              mids$[mid_getMaxQueryLength_9972fcc56b44e79d] = env->getMethodID(cls, "getMaxQueryLength", "()I");
              mids$[mid_getMinPrefix_9972fcc56b44e79d] = env->getMethodID(cls, "getMinPrefix", "()I");
              mids$[mid_getMinQueryLength_9972fcc56b44e79d] = env->getMethodID(cls, "getMinQueryLength", "()I");
              mids$[mid_getThresholdFrequency_58aec2b64dff50c8] = env->getMethodID(cls, "getThresholdFrequency", "()F");
              mids$[mid_setAccuracy_8e1d952dd65cdc3a] = env->getMethodID(cls, "setAccuracy", "(F)V");
              mids$[mid_setComparator_4703504c5d45d50f] = env->getMethodID(cls, "setComparator", "(Ljava/util/Comparator;)V");
              mids$[mid_setDistance_96537eb7f43eebe7] = env->getMethodID(cls, "setDistance", "(Lorg/apache/lucene/search/spell/StringDistance;)V");
              mids$[mid_setLowerCaseTerms_9d72768e8fdce2b7] = env->getMethodID(cls, "setLowerCaseTerms", "(Z)V");
              mids$[mid_setMaxEdits_040c4cd0390c5aff] = env->getMethodID(cls, "setMaxEdits", "(I)V");
              mids$[mid_setMaxInspections_040c4cd0390c5aff] = env->getMethodID(cls, "setMaxInspections", "(I)V");
              mids$[mid_setMaxQueryFrequency_8e1d952dd65cdc3a] = env->getMethodID(cls, "setMaxQueryFrequency", "(F)V");
              mids$[mid_setMaxQueryLength_040c4cd0390c5aff] = env->getMethodID(cls, "setMaxQueryLength", "(I)V");
              mids$[mid_setMinPrefix_040c4cd0390c5aff] = env->getMethodID(cls, "setMinPrefix", "(I)V");
              mids$[mid_setMinQueryLength_040c4cd0390c5aff] = env->getMethodID(cls, "setMinQueryLength", "(I)V");
              mids$[mid_setThresholdFrequency_8e1d952dd65cdc3a] = env->getMethodID(cls, "setThresholdFrequency", "(F)V");
              mids$[mid_suggestSimilar_cde54658a5b84fb9] = env->getMethodID(cls, "suggestSimilar", "(Lorg/apache/lucene/index/Term;ILorg/apache/lucene/index/IndexReader;)[Lorg/apache/lucene/search/spell/SuggestWord;");
              mids$[mid_suggestSimilar_8277a15a889f7302] = env->getMethodID(cls, "suggestSimilar", "(Lorg/apache/lucene/index/Term;ILorg/apache/lucene/index/IndexReader;Lorg/apache/lucene/search/spell/SuggestMode;)[Lorg/apache/lucene/search/spell/SuggestWord;");
              mids$[mid_suggestSimilar_6e7c192f2a3538f8] = env->getMethodID(cls, "suggestSimilar", "(Lorg/apache/lucene/index/Term;ILorg/apache/lucene/index/IndexReader;Lorg/apache/lucene/search/spell/SuggestMode;F)[Lorg/apache/lucene/search/spell/SuggestWord;");
              mids$[mid_suggestSimilar_78be369e2080aa54] = env->getMethodID(cls, "suggestSimilar", "(Lorg/apache/lucene/index/Term;ILorg/apache/lucene/index/IndexReader;IIFLorg/apache/lucene/util/CharsRefBuilder;)Ljava/util/Collection;");

              class$ = new ::java::lang::Class(cls);
              cls = (jclass) class$->this$;

              INTERNAL_LEVENSHTEIN = new ::org::apache::lucene::search::spell::StringDistance(env->getStaticObjectField(cls, "INTERNAL_LEVENSHTEIN", "Lorg/apache/lucene/search/spell/StringDistance;"));
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          DirectSpellChecker::DirectSpellChecker() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_f2cc1bce94666404)) {}

          jfloat DirectSpellChecker::getAccuracy() const
          {
            return env->callFloatMethod(this$, mids$[mid_getAccuracy_58aec2b64dff50c8]);
          }

          ::java::util::Comparator DirectSpellChecker::getComparator() const
          {
            return ::java::util::Comparator(env->callObjectMethod(this$, mids$[mid_getComparator_beb0414e0ec1de00]));
          }

          ::org::apache::lucene::search::spell::StringDistance DirectSpellChecker::getDistance() const
          {
            return ::org::apache::lucene::search::spell::StringDistance(env->callObjectMethod(this$, mids$[mid_getDistance_2012a1536a00ef81]));
          }

          jboolean DirectSpellChecker::getLowerCaseTerms() const
          {
            return env->callBooleanMethod(this$, mids$[mid_getLowerCaseTerms_8454bd5aa23fd11e]);
          }

          jint DirectSpellChecker::getMaxEdits() const
          {
            return env->callIntMethod(this$, mids$[mid_getMaxEdits_9972fcc56b44e79d]);
          }

          jint DirectSpellChecker::getMaxInspections() const
          {
            return env->callIntMethod(this$, mids$[mid_getMaxInspections_9972fcc56b44e79d]);
          }

          jfloat DirectSpellChecker::getMaxQueryFrequency() const
          {
            return env->callFloatMethod(this$, mids$[mid_getMaxQueryFrequency_58aec2b64dff50c8]);
          }

          jint DirectSpellChecker::getMaxQueryLength() const
          {
            return env->callIntMethod(this$, mids$[mid_getMaxQueryLength_9972fcc56b44e79d]);
          }

          jint DirectSpellChecker::getMinPrefix() const
          {
            return env->callIntMethod(this$, mids$[mid_getMinPrefix_9972fcc56b44e79d]);
          }

          jint DirectSpellChecker::getMinQueryLength() const
          {
            return env->callIntMethod(this$, mids$[mid_getMinQueryLength_9972fcc56b44e79d]);
          }

          jfloat DirectSpellChecker::getThresholdFrequency() const
          {
            return env->callFloatMethod(this$, mids$[mid_getThresholdFrequency_58aec2b64dff50c8]);
          }

          void DirectSpellChecker::setAccuracy(jfloat a0) const
          {
            env->callVoidMethod(this$, mids$[mid_setAccuracy_8e1d952dd65cdc3a], a0);
          }

          void DirectSpellChecker::setComparator(const ::java::util::Comparator & a0) const
          {
            env->callVoidMethod(this$, mids$[mid_setComparator_4703504c5d45d50f], a0.this$);
          }

          void DirectSpellChecker::setDistance(const ::org::apache::lucene::search::spell::StringDistance & a0) const
          {
            env->callVoidMethod(this$, mids$[mid_setDistance_96537eb7f43eebe7], a0.this$);
          }

          void DirectSpellChecker::setLowerCaseTerms(jboolean a0) const
          {
            env->callVoidMethod(this$, mids$[mid_setLowerCaseTerms_9d72768e8fdce2b7], a0);
          }

          void DirectSpellChecker::setMaxEdits(jint a0) const
          {
            env->callVoidMethod(this$, mids$[mid_setMaxEdits_040c4cd0390c5aff], a0);
          }

          void DirectSpellChecker::setMaxInspections(jint a0) const
          {
            env->callVoidMethod(this$, mids$[mid_setMaxInspections_040c4cd0390c5aff], a0);
          }

          void DirectSpellChecker::setMaxQueryFrequency(jfloat a0) const
          {
            env->callVoidMethod(this$, mids$[mid_setMaxQueryFrequency_8e1d952dd65cdc3a], a0);
          }

          void DirectSpellChecker::setMaxQueryLength(jint a0) const
          {
            env->callVoidMethod(this$, mids$[mid_setMaxQueryLength_040c4cd0390c5aff], a0);
          }

          void DirectSpellChecker::setMinPrefix(jint a0) const
          {
            env->callVoidMethod(this$, mids$[mid_setMinPrefix_040c4cd0390c5aff], a0);
          }

          void DirectSpellChecker::setMinQueryLength(jint a0) const
          {
            env->callVoidMethod(this$, mids$[mid_setMinQueryLength_040c4cd0390c5aff], a0);
          }

          void DirectSpellChecker::setThresholdFrequency(jfloat a0) const
          {
            env->callVoidMethod(this$, mids$[mid_setThresholdFrequency_8e1d952dd65cdc3a], a0);
          }

          JArray< ::org::apache::lucene::search::spell::SuggestWord > DirectSpellChecker::suggestSimilar(const ::org::apache::lucene::index::Term & a0, jint a1, const ::org::apache::lucene::index::IndexReader & a2) const
          {
            return JArray< ::org::apache::lucene::search::spell::SuggestWord >(env->callObjectMethod(this$, mids$[mid_suggestSimilar_cde54658a5b84fb9], a0.this$, a1, a2.this$));
          }

          JArray< ::org::apache::lucene::search::spell::SuggestWord > DirectSpellChecker::suggestSimilar(const ::org::apache::lucene::index::Term & a0, jint a1, const ::org::apache::lucene::index::IndexReader & a2, const ::org::apache::lucene::search::spell::SuggestMode & a3) const
          {
            return JArray< ::org::apache::lucene::search::spell::SuggestWord >(env->callObjectMethod(this$, mids$[mid_suggestSimilar_8277a15a889f7302], a0.this$, a1, a2.this$, a3.this$));
          }

          JArray< ::org::apache::lucene::search::spell::SuggestWord > DirectSpellChecker::suggestSimilar(const ::org::apache::lucene::index::Term & a0, jint a1, const ::org::apache::lucene::index::IndexReader & a2, const ::org::apache::lucene::search::spell::SuggestMode & a3, jfloat a4) const
          {
            return JArray< ::org::apache::lucene::search::spell::SuggestWord >(env->callObjectMethod(this$, mids$[mid_suggestSimilar_6e7c192f2a3538f8], a0.this$, a1, a2.this$, a3.this$, a4));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace spell {
          static PyObject *t_DirectSpellChecker_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_DirectSpellChecker_instance_(PyTypeObject *type, PyObject *arg);
          static int t_DirectSpellChecker_init_(t_DirectSpellChecker *self, PyObject *args, PyObject *kwds);
          static PyObject *t_DirectSpellChecker_getAccuracy(t_DirectSpellChecker *self);
          static PyObject *t_DirectSpellChecker_getComparator(t_DirectSpellChecker *self);
          static PyObject *t_DirectSpellChecker_getDistance(t_DirectSpellChecker *self);
          static PyObject *t_DirectSpellChecker_getLowerCaseTerms(t_DirectSpellChecker *self);
          static PyObject *t_DirectSpellChecker_getMaxEdits(t_DirectSpellChecker *self);
          static PyObject *t_DirectSpellChecker_getMaxInspections(t_DirectSpellChecker *self);
          static PyObject *t_DirectSpellChecker_getMaxQueryFrequency(t_DirectSpellChecker *self);
          static PyObject *t_DirectSpellChecker_getMaxQueryLength(t_DirectSpellChecker *self);
          static PyObject *t_DirectSpellChecker_getMinPrefix(t_DirectSpellChecker *self);
          static PyObject *t_DirectSpellChecker_getMinQueryLength(t_DirectSpellChecker *self);
          static PyObject *t_DirectSpellChecker_getThresholdFrequency(t_DirectSpellChecker *self);
          static PyObject *t_DirectSpellChecker_setAccuracy(t_DirectSpellChecker *self, PyObject *arg);
          static PyObject *t_DirectSpellChecker_setComparator(t_DirectSpellChecker *self, PyObject *arg);
          static PyObject *t_DirectSpellChecker_setDistance(t_DirectSpellChecker *self, PyObject *arg);
          static PyObject *t_DirectSpellChecker_setLowerCaseTerms(t_DirectSpellChecker *self, PyObject *arg);
          static PyObject *t_DirectSpellChecker_setMaxEdits(t_DirectSpellChecker *self, PyObject *arg);
          static PyObject *t_DirectSpellChecker_setMaxInspections(t_DirectSpellChecker *self, PyObject *arg);
          static PyObject *t_DirectSpellChecker_setMaxQueryFrequency(t_DirectSpellChecker *self, PyObject *arg);
          static PyObject *t_DirectSpellChecker_setMaxQueryLength(t_DirectSpellChecker *self, PyObject *arg);
          static PyObject *t_DirectSpellChecker_setMinPrefix(t_DirectSpellChecker *self, PyObject *arg);
          static PyObject *t_DirectSpellChecker_setMinQueryLength(t_DirectSpellChecker *self, PyObject *arg);
          static PyObject *t_DirectSpellChecker_setThresholdFrequency(t_DirectSpellChecker *self, PyObject *arg);
          static PyObject *t_DirectSpellChecker_suggestSimilar(t_DirectSpellChecker *self, PyObject *args);
          static PyObject *t_DirectSpellChecker_get__accuracy(t_DirectSpellChecker *self, void *data);
          static int t_DirectSpellChecker_set__accuracy(t_DirectSpellChecker *self, PyObject *arg, void *data);
          static PyObject *t_DirectSpellChecker_get__comparator(t_DirectSpellChecker *self, void *data);
          static int t_DirectSpellChecker_set__comparator(t_DirectSpellChecker *self, PyObject *arg, void *data);
          static PyObject *t_DirectSpellChecker_get__distance(t_DirectSpellChecker *self, void *data);
          static int t_DirectSpellChecker_set__distance(t_DirectSpellChecker *self, PyObject *arg, void *data);
          static PyObject *t_DirectSpellChecker_get__lowerCaseTerms(t_DirectSpellChecker *self, void *data);
          static int t_DirectSpellChecker_set__lowerCaseTerms(t_DirectSpellChecker *self, PyObject *arg, void *data);
          static PyObject *t_DirectSpellChecker_get__maxEdits(t_DirectSpellChecker *self, void *data);
          static int t_DirectSpellChecker_set__maxEdits(t_DirectSpellChecker *self, PyObject *arg, void *data);
          static PyObject *t_DirectSpellChecker_get__maxInspections(t_DirectSpellChecker *self, void *data);
          static int t_DirectSpellChecker_set__maxInspections(t_DirectSpellChecker *self, PyObject *arg, void *data);
          static PyObject *t_DirectSpellChecker_get__maxQueryFrequency(t_DirectSpellChecker *self, void *data);
          static int t_DirectSpellChecker_set__maxQueryFrequency(t_DirectSpellChecker *self, PyObject *arg, void *data);
          static PyObject *t_DirectSpellChecker_get__maxQueryLength(t_DirectSpellChecker *self, void *data);
          static int t_DirectSpellChecker_set__maxQueryLength(t_DirectSpellChecker *self, PyObject *arg, void *data);
          static PyObject *t_DirectSpellChecker_get__minPrefix(t_DirectSpellChecker *self, void *data);
          static int t_DirectSpellChecker_set__minPrefix(t_DirectSpellChecker *self, PyObject *arg, void *data);
          static PyObject *t_DirectSpellChecker_get__minQueryLength(t_DirectSpellChecker *self, void *data);
          static int t_DirectSpellChecker_set__minQueryLength(t_DirectSpellChecker *self, PyObject *arg, void *data);
          static PyObject *t_DirectSpellChecker_get__thresholdFrequency(t_DirectSpellChecker *self, void *data);
          static int t_DirectSpellChecker_set__thresholdFrequency(t_DirectSpellChecker *self, PyObject *arg, void *data);
          static PyGetSetDef t_DirectSpellChecker__fields_[] = {
            DECLARE_GETSET_FIELD(t_DirectSpellChecker, accuracy),
            DECLARE_GETSET_FIELD(t_DirectSpellChecker, comparator),
            DECLARE_GETSET_FIELD(t_DirectSpellChecker, distance),
            DECLARE_GETSET_FIELD(t_DirectSpellChecker, lowerCaseTerms),
            DECLARE_GETSET_FIELD(t_DirectSpellChecker, maxEdits),
            DECLARE_GETSET_FIELD(t_DirectSpellChecker, maxInspections),
            DECLARE_GETSET_FIELD(t_DirectSpellChecker, maxQueryFrequency),
            DECLARE_GETSET_FIELD(t_DirectSpellChecker, maxQueryLength),
            DECLARE_GETSET_FIELD(t_DirectSpellChecker, minPrefix),
            DECLARE_GETSET_FIELD(t_DirectSpellChecker, minQueryLength),
            DECLARE_GETSET_FIELD(t_DirectSpellChecker, thresholdFrequency),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_DirectSpellChecker__methods_[] = {
            DECLARE_METHOD(t_DirectSpellChecker, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_DirectSpellChecker, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_DirectSpellChecker, getAccuracy, METH_NOARGS),
            DECLARE_METHOD(t_DirectSpellChecker, getComparator, METH_NOARGS),
            DECLARE_METHOD(t_DirectSpellChecker, getDistance, METH_NOARGS),
            DECLARE_METHOD(t_DirectSpellChecker, getLowerCaseTerms, METH_NOARGS),
            DECLARE_METHOD(t_DirectSpellChecker, getMaxEdits, METH_NOARGS),
            DECLARE_METHOD(t_DirectSpellChecker, getMaxInspections, METH_NOARGS),
            DECLARE_METHOD(t_DirectSpellChecker, getMaxQueryFrequency, METH_NOARGS),
            DECLARE_METHOD(t_DirectSpellChecker, getMaxQueryLength, METH_NOARGS),
            DECLARE_METHOD(t_DirectSpellChecker, getMinPrefix, METH_NOARGS),
            DECLARE_METHOD(t_DirectSpellChecker, getMinQueryLength, METH_NOARGS),
            DECLARE_METHOD(t_DirectSpellChecker, getThresholdFrequency, METH_NOARGS),
            DECLARE_METHOD(t_DirectSpellChecker, setAccuracy, METH_O),
            DECLARE_METHOD(t_DirectSpellChecker, setComparator, METH_O),
            DECLARE_METHOD(t_DirectSpellChecker, setDistance, METH_O),
            DECLARE_METHOD(t_DirectSpellChecker, setLowerCaseTerms, METH_O),
            DECLARE_METHOD(t_DirectSpellChecker, setMaxEdits, METH_O),
            DECLARE_METHOD(t_DirectSpellChecker, setMaxInspections, METH_O),
            DECLARE_METHOD(t_DirectSpellChecker, setMaxQueryFrequency, METH_O),
            DECLARE_METHOD(t_DirectSpellChecker, setMaxQueryLength, METH_O),
            DECLARE_METHOD(t_DirectSpellChecker, setMinPrefix, METH_O),
            DECLARE_METHOD(t_DirectSpellChecker, setMinQueryLength, METH_O),
            DECLARE_METHOD(t_DirectSpellChecker, setThresholdFrequency, METH_O),
            DECLARE_METHOD(t_DirectSpellChecker, suggestSimilar, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          static PyType_Slot PY_TYPE_SLOTS(DirectSpellChecker)[] = {
            { Py_tp_methods, t_DirectSpellChecker__methods_ },
            { Py_tp_init, (void *) t_DirectSpellChecker_init_ },
            { Py_tp_getset, t_DirectSpellChecker__fields_ },
            { 0, NULL }
          };

          static PyType_Def *PY_TYPE_BASES(DirectSpellChecker)[] = {
            &PY_TYPE_DEF(::java::lang::Object),
            NULL
          };

          DEFINE_TYPE(DirectSpellChecker, t_DirectSpellChecker, DirectSpellChecker);

          void t_DirectSpellChecker::install(PyObject *module)
          {
            installType(&PY_TYPE(DirectSpellChecker), &PY_TYPE_DEF(DirectSpellChecker), module, "DirectSpellChecker", 0);
          }

          void t_DirectSpellChecker::initialize(PyObject *module)
          {
            PyObject_SetAttrString((PyObject *) PY_TYPE(DirectSpellChecker), "class_", make_descriptor(DirectSpellChecker::initializeClass, 1));
            PyObject_SetAttrString((PyObject *) PY_TYPE(DirectSpellChecker), "wrapfn_", make_descriptor(t_DirectSpellChecker::wrap_jobject));
            PyObject_SetAttrString((PyObject *) PY_TYPE(DirectSpellChecker), "boxfn_", make_descriptor(boxObject));
            env->getClass(DirectSpellChecker::initializeClass);
            PyObject_SetAttrString((PyObject *) PY_TYPE(DirectSpellChecker), "INTERNAL_LEVENSHTEIN", make_descriptor(::org::apache::lucene::search::spell::t_StringDistance::wrap_Object(*DirectSpellChecker::INTERNAL_LEVENSHTEIN)));
          }

          static PyObject *t_DirectSpellChecker_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, DirectSpellChecker::initializeClass, 1)))
              return NULL;
            return t_DirectSpellChecker::wrap_Object(DirectSpellChecker(((t_DirectSpellChecker *) arg)->object.this$));
          }
          static PyObject *t_DirectSpellChecker_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, DirectSpellChecker::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_DirectSpellChecker_init_(t_DirectSpellChecker *self, PyObject *args, PyObject *kwds)
          {
            DirectSpellChecker object((jobject) NULL);

            INT_CALL(object = DirectSpellChecker());
            self->object = object;

            return 0;
          }

          static PyObject *t_DirectSpellChecker_getAccuracy(t_DirectSpellChecker *self)
          {
            jfloat result;
            OBJ_CALL(result = self->object.getAccuracy());
            return PyFloat_FromDouble((double) result);
          }

          static PyObject *t_DirectSpellChecker_getComparator(t_DirectSpellChecker *self)
          {
            ::java::util::Comparator result((jobject) NULL);
            OBJ_CALL(result = self->object.getComparator());
            return ::java::util::t_Comparator::wrap_Object(result, ::org::apache::lucene::search::spell::PY_TYPE(SuggestWord));
          }

          static PyObject *t_DirectSpellChecker_getDistance(t_DirectSpellChecker *self)
          {
            ::org::apache::lucene::search::spell::StringDistance result((jobject) NULL);
            OBJ_CALL(result = self->object.getDistance());
            return ::org::apache::lucene::search::spell::t_StringDistance::wrap_Object(result);
          }

          static PyObject *t_DirectSpellChecker_getLowerCaseTerms(t_DirectSpellChecker *self)
          {
            jboolean result;
            OBJ_CALL(result = self->object.getLowerCaseTerms());
            Py_RETURN_BOOL(result);
          }

          static PyObject *t_DirectSpellChecker_getMaxEdits(t_DirectSpellChecker *self)
          {
            jint result;
            OBJ_CALL(result = self->object.getMaxEdits());
            return PyLong_FromLong((long) result);
          }

          static PyObject *t_DirectSpellChecker_getMaxInspections(t_DirectSpellChecker *self)
          {
            jint result;
            OBJ_CALL(result = self->object.getMaxInspections());
            return PyLong_FromLong((long) result);
          }

          static PyObject *t_DirectSpellChecker_getMaxQueryFrequency(t_DirectSpellChecker *self)
          {
            jfloat result;
            OBJ_CALL(result = self->object.getMaxQueryFrequency());
            return PyFloat_FromDouble((double) result);
          }

          static PyObject *t_DirectSpellChecker_getMaxQueryLength(t_DirectSpellChecker *self)
          {
            jint result;
            OBJ_CALL(result = self->object.getMaxQueryLength());
            return PyLong_FromLong((long) result);
          }

          static PyObject *t_DirectSpellChecker_getMinPrefix(t_DirectSpellChecker *self)
          {
            jint result;
            OBJ_CALL(result = self->object.getMinPrefix());
            return PyLong_FromLong((long) result);
          }

          static PyObject *t_DirectSpellChecker_getMinQueryLength(t_DirectSpellChecker *self)
          {
            jint result;
            OBJ_CALL(result = self->object.getMinQueryLength());
            return PyLong_FromLong((long) result);
          }

          static PyObject *t_DirectSpellChecker_getThresholdFrequency(t_DirectSpellChecker *self)
          {
            jfloat result;
            OBJ_CALL(result = self->object.getThresholdFrequency());
            return PyFloat_FromDouble((double) result);
          }

          static PyObject *t_DirectSpellChecker_setAccuracy(t_DirectSpellChecker *self, PyObject *arg)
          {
            jfloat a0;

            if (!parseArg(arg, "F", &a0))
            {
              OBJ_CALL(self->object.setAccuracy(a0));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError((PyObject *) self, "setAccuracy", arg);
            return NULL;
          }

          static PyObject *t_DirectSpellChecker_setComparator(t_DirectSpellChecker *self, PyObject *arg)
          {
            ::java::util::Comparator a0((jobject) NULL);
            PyTypeObject **p0;

            if (!parseArg(arg, "K", ::java::util::Comparator::initializeClass, &a0, &p0, ::java::util::t_Comparator::parameters_))
            {
              OBJ_CALL(self->object.setComparator(a0));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError((PyObject *) self, "setComparator", arg);
            return NULL;
          }

          static PyObject *t_DirectSpellChecker_setDistance(t_DirectSpellChecker *self, PyObject *arg)
          {
            ::org::apache::lucene::search::spell::StringDistance a0((jobject) NULL);

            if (!parseArg(arg, "k", ::org::apache::lucene::search::spell::StringDistance::initializeClass, &a0))
            {
              OBJ_CALL(self->object.setDistance(a0));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError((PyObject *) self, "setDistance", arg);
            return NULL;
          }

          static PyObject *t_DirectSpellChecker_setLowerCaseTerms(t_DirectSpellChecker *self, PyObject *arg)
          {
            jboolean a0;

            if (!parseArg(arg, "Z", &a0))
            {
              OBJ_CALL(self->object.setLowerCaseTerms(a0));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError((PyObject *) self, "setLowerCaseTerms", arg);
            return NULL;
          }

          static PyObject *t_DirectSpellChecker_setMaxEdits(t_DirectSpellChecker *self, PyObject *arg)
          {
            jint a0;

            if (!parseArg(arg, "I", &a0))
            {
              OBJ_CALL(self->object.setMaxEdits(a0));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError((PyObject *) self, "setMaxEdits", arg);
            return NULL;
          }

          static PyObject *t_DirectSpellChecker_setMaxInspections(t_DirectSpellChecker *self, PyObject *arg)
          {
            jint a0;

            if (!parseArg(arg, "I", &a0))
            {
              OBJ_CALL(self->object.setMaxInspections(a0));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError((PyObject *) self, "setMaxInspections", arg);
            return NULL;
          }

          static PyObject *t_DirectSpellChecker_setMaxQueryFrequency(t_DirectSpellChecker *self, PyObject *arg)
          {
            jfloat a0;

            if (!parseArg(arg, "F", &a0))
            {
              OBJ_CALL(self->object.setMaxQueryFrequency(a0));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError((PyObject *) self, "setMaxQueryFrequency", arg);
            return NULL;
          }

          static PyObject *t_DirectSpellChecker_setMaxQueryLength(t_DirectSpellChecker *self, PyObject *arg)
          {
            jint a0;

            if (!parseArg(arg, "I", &a0))
            {
              OBJ_CALL(self->object.setMaxQueryLength(a0));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError((PyObject *) self, "setMaxQueryLength", arg);
            return NULL;
          }

          static PyObject *t_DirectSpellChecker_setMinPrefix(t_DirectSpellChecker *self, PyObject *arg)
          {
            jint a0;

            if (!parseArg(arg, "I", &a0))
            {
              OBJ_CALL(self->object.setMinPrefix(a0));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError((PyObject *) self, "setMinPrefix", arg);
            return NULL;
          }

          static PyObject *t_DirectSpellChecker_setMinQueryLength(t_DirectSpellChecker *self, PyObject *arg)
          {
            jint a0;

            if (!parseArg(arg, "I", &a0))
            {
              OBJ_CALL(self->object.setMinQueryLength(a0));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError((PyObject *) self, "setMinQueryLength", arg);
            return NULL;
          }

          static PyObject *t_DirectSpellChecker_setThresholdFrequency(t_DirectSpellChecker *self, PyObject *arg)
          {
            jfloat a0;

            if (!parseArg(arg, "F", &a0))
            {
              OBJ_CALL(self->object.setThresholdFrequency(a0));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError((PyObject *) self, "setThresholdFrequency", arg);
            return NULL;
          }

          static PyObject *t_DirectSpellChecker_suggestSimilar(t_DirectSpellChecker *self, PyObject *args)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 3:
              {
                ::org::apache::lucene::index::Term a0((jobject) NULL);
                jint a1;
                ::org::apache::lucene::index::IndexReader a2((jobject) NULL);
                JArray< ::org::apache::lucene::search::spell::SuggestWord > result((jobject) NULL);

                if (!parseArgs(args, "kIk", ::org::apache::lucene::index::Term::initializeClass, ::org::apache::lucene::index::IndexReader::initializeClass, &a0, &a1, &a2))
                {
                  OBJ_CALL(result = self->object.suggestSimilar(a0, a1, a2));
                  return JArray<jobject>(result.this$).wrap(::org::apache::lucene::search::spell::t_SuggestWord::wrap_jobject);
                }
              }
              break;
             case 4:
              {
                ::org::apache::lucene::index::Term a0((jobject) NULL);
                jint a1;
                ::org::apache::lucene::index::IndexReader a2((jobject) NULL);
                ::org::apache::lucene::search::spell::SuggestMode a3((jobject) NULL);
                PyTypeObject **p3;
                JArray< ::org::apache::lucene::search::spell::SuggestWord > result((jobject) NULL);

                if (!parseArgs(args, "kIkK", ::org::apache::lucene::index::Term::initializeClass, ::org::apache::lucene::index::IndexReader::initializeClass, ::org::apache::lucene::search::spell::SuggestMode::initializeClass, &a0, &a1, &a2, &a3, &p3, ::org::apache::lucene::search::spell::t_SuggestMode::parameters_))
                {
                  OBJ_CALL(result = self->object.suggestSimilar(a0, a1, a2, a3));
                  return JArray<jobject>(result.this$).wrap(::org::apache::lucene::search::spell::t_SuggestWord::wrap_jobject);
                }
              }
              break;
             case 5:
              {
                ::org::apache::lucene::index::Term a0((jobject) NULL);
                jint a1;
                ::org::apache::lucene::index::IndexReader a2((jobject) NULL);
                ::org::apache::lucene::search::spell::SuggestMode a3((jobject) NULL);
                PyTypeObject **p3;
                jfloat a4;
                JArray< ::org::apache::lucene::search::spell::SuggestWord > result((jobject) NULL);

                if (!parseArgs(args, "kIkKF", ::org::apache::lucene::index::Term::initializeClass, ::org::apache::lucene::index::IndexReader::initializeClass, ::org::apache::lucene::search::spell::SuggestMode::initializeClass, &a0, &a1, &a2, &a3, &p3, ::org::apache::lucene::search::spell::t_SuggestMode::parameters_, &a4))
                {
                  OBJ_CALL(result = self->object.suggestSimilar(a0, a1, a2, a3, a4));
                  return JArray<jobject>(result.this$).wrap(::org::apache::lucene::search::spell::t_SuggestWord::wrap_jobject);
                }
              }
            }

            PyErr_SetArgsError((PyObject *) self, "suggestSimilar", args);
            return NULL;
          }

          static PyObject *t_DirectSpellChecker_get__accuracy(t_DirectSpellChecker *self, void *data)
          {
            jfloat value;
            OBJ_CALL(value = self->object.getAccuracy());
            return PyFloat_FromDouble((double) value);
          }
          static int t_DirectSpellChecker_set__accuracy(t_DirectSpellChecker *self, PyObject *arg, void *data)
          {
            {
              jfloat value;
              if (!parseArg(arg, "F", &value))
              {
                INT_CALL(self->object.setAccuracy(value));
                return 0;
              }
            }
            PyErr_SetArgsError((PyObject *) self, "accuracy", arg);
            return -1;
          }

          static PyObject *t_DirectSpellChecker_get__comparator(t_DirectSpellChecker *self, void *data)
          {
            ::java::util::Comparator value((jobject) NULL);
            OBJ_CALL(value = self->object.getComparator());
            return ::java::util::t_Comparator::wrap_Object(value);
          }
          static int t_DirectSpellChecker_set__comparator(t_DirectSpellChecker *self, PyObject *arg, void *data)
          {
            {
              ::java::util::Comparator value((jobject) NULL);
              if (!parseArg(arg, "k", ::java::util::Comparator::initializeClass, &value))
              {
                INT_CALL(self->object.setComparator(value));
                return 0;
              }
            }
            PyErr_SetArgsError((PyObject *) self, "comparator", arg);
            return -1;
          }

          static PyObject *t_DirectSpellChecker_get__distance(t_DirectSpellChecker *self, void *data)
          {
            ::org::apache::lucene::search::spell::StringDistance value((jobject) NULL);
            OBJ_CALL(value = self->object.getDistance());
            return ::org::apache::lucene::search::spell::t_StringDistance::wrap_Object(value);
          }
          static int t_DirectSpellChecker_set__distance(t_DirectSpellChecker *self, PyObject *arg, void *data)
          {
            {
              ::org::apache::lucene::search::spell::StringDistance value((jobject) NULL);
              if (!parseArg(arg, "k", ::org::apache::lucene::search::spell::StringDistance::initializeClass, &value))
              {
                INT_CALL(self->object.setDistance(value));
                return 0;
              }
            }
            PyErr_SetArgsError((PyObject *) self, "distance", arg);
            return -1;
          }

          static PyObject *t_DirectSpellChecker_get__lowerCaseTerms(t_DirectSpellChecker *self, void *data)
          {
            jboolean value;
            OBJ_CALL(value = self->object.getLowerCaseTerms());
            Py_RETURN_BOOL(value);
          }
          static int t_DirectSpellChecker_set__lowerCaseTerms(t_DirectSpellChecker *self, PyObject *arg, void *data)
          {
            {
              jboolean value;
              if (!parseArg(arg, "Z", &value))
              {
                INT_CALL(self->object.setLowerCaseTerms(value));
                return 0;
              }
            }
            PyErr_SetArgsError((PyObject *) self, "lowerCaseTerms", arg);
            return -1;
          }

          static PyObject *t_DirectSpellChecker_get__maxEdits(t_DirectSpellChecker *self, void *data)
          {
            jint value;
            OBJ_CALL(value = self->object.getMaxEdits());
            return PyLong_FromLong((long) value);
          }
          static int t_DirectSpellChecker_set__maxEdits(t_DirectSpellChecker *self, PyObject *arg, void *data)
          {
            {
              jint value;
              if (!parseArg(arg, "I", &value))
              {
                INT_CALL(self->object.setMaxEdits(value));
                return 0;
              }
            }
            PyErr_SetArgsError((PyObject *) self, "maxEdits", arg);
            return -1;
          }

          static PyObject *t_DirectSpellChecker_get__maxInspections(t_DirectSpellChecker *self, void *data)
          {
            jint value;
            OBJ_CALL(value = self->object.getMaxInspections());
            return PyLong_FromLong((long) value);
          }
          static int t_DirectSpellChecker_set__maxInspections(t_DirectSpellChecker *self, PyObject *arg, void *data)
          {
            {
              jint value;
              if (!parseArg(arg, "I", &value))
              {
                INT_CALL(self->object.setMaxInspections(value));
                return 0;
              }
            }
            PyErr_SetArgsError((PyObject *) self, "maxInspections", arg);
            return -1;
          }

          static PyObject *t_DirectSpellChecker_get__maxQueryFrequency(t_DirectSpellChecker *self, void *data)
          {
            jfloat value;
            OBJ_CALL(value = self->object.getMaxQueryFrequency());
            return PyFloat_FromDouble((double) value);
          }
          static int t_DirectSpellChecker_set__maxQueryFrequency(t_DirectSpellChecker *self, PyObject *arg, void *data)
          {
            {
              jfloat value;
              if (!parseArg(arg, "F", &value))
              {
                INT_CALL(self->object.setMaxQueryFrequency(value));
                return 0;
              }
            }
            PyErr_SetArgsError((PyObject *) self, "maxQueryFrequency", arg);
            return -1;
          }

          static PyObject *t_DirectSpellChecker_get__maxQueryLength(t_DirectSpellChecker *self, void *data)
          {
            jint value;
            OBJ_CALL(value = self->object.getMaxQueryLength());
            return PyLong_FromLong((long) value);
          }
          static int t_DirectSpellChecker_set__maxQueryLength(t_DirectSpellChecker *self, PyObject *arg, void *data)
          {
            {
              jint value;
              if (!parseArg(arg, "I", &value))
              {
                INT_CALL(self->object.setMaxQueryLength(value));
                return 0;
              }
            }
            PyErr_SetArgsError((PyObject *) self, "maxQueryLength", arg);
            return -1;
          }

          static PyObject *t_DirectSpellChecker_get__minPrefix(t_DirectSpellChecker *self, void *data)
          {
            jint value;
            OBJ_CALL(value = self->object.getMinPrefix());
            return PyLong_FromLong((long) value);
          }
          static int t_DirectSpellChecker_set__minPrefix(t_DirectSpellChecker *self, PyObject *arg, void *data)
          {
            {
              jint value;
              if (!parseArg(arg, "I", &value))
              {
                INT_CALL(self->object.setMinPrefix(value));
                return 0;
              }
            }
            PyErr_SetArgsError((PyObject *) self, "minPrefix", arg);
            return -1;
          }

          static PyObject *t_DirectSpellChecker_get__minQueryLength(t_DirectSpellChecker *self, void *data)
          {
            jint value;
            OBJ_CALL(value = self->object.getMinQueryLength());
            return PyLong_FromLong((long) value);
          }
          static int t_DirectSpellChecker_set__minQueryLength(t_DirectSpellChecker *self, PyObject *arg, void *data)
          {
            {
              jint value;
              if (!parseArg(arg, "I", &value))
              {
                INT_CALL(self->object.setMinQueryLength(value));
                return 0;
              }
            }
            PyErr_SetArgsError((PyObject *) self, "minQueryLength", arg);
            return -1;
          }

          static PyObject *t_DirectSpellChecker_get__thresholdFrequency(t_DirectSpellChecker *self, void *data)
          {
            jfloat value;
            OBJ_CALL(value = self->object.getThresholdFrequency());
            return PyFloat_FromDouble((double) value);
          }
          static int t_DirectSpellChecker_set__thresholdFrequency(t_DirectSpellChecker *self, PyObject *arg, void *data)
          {
            {
              jfloat value;
              if (!parseArg(arg, "F", &value))
              {
                INT_CALL(self->object.setThresholdFrequency(value));
                return 0;
              }
            }
            PyErr_SetArgsError((PyObject *) self, "thresholdFrequency", arg);
            return -1;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "java/lang/Enum.h"
#include "java/lang/Comparable.h"
#include "java/lang/Class.h"
#include "java/lang/Enum.h"
#include "java/lang/String.h"
#include "java/io/Serializable.h"
#include "JArray.h"

namespace java {
  namespace lang {

    ::java::lang::Class *Enum::class$ = NULL;
    jmethodID *Enum::mids$ = NULL;
    bool Enum::live$ = false;

    jclass Enum::initializeClass(bool getOnly)
    {
      if (getOnly)
        return (jclass) (live$ ? class$->this$ : NULL);
      if (class$ == NULL)
      {
        jclass cls = (jclass) env->findClass("java/lang/Enum");

        mids$ = new jmethodID[max_mid];
        mids$[mid_compareTo_2b51c450f527b4a3] = env->getMethodID(cls, "compareTo", "(Ljava/lang/Enum;)I");
        mids$[mid_equals_8b72f2dcdde6fd1d] = env->getMethodID(cls, "equals", "(Ljava/lang/Object;)Z");
        mids$[mid_getDeclaringClass_9df2cc6ebce035fe] = env->getMethodID(cls, "getDeclaringClass", "()Ljava/lang/Class;");
        mids$[mid_hashCode_9972fcc56b44e79d] = env->getMethodID(cls, "hashCode", "()I");
        mids$[mid_name_db9b55ba01e03e4b] = env->getMethodID(cls, "name", "()Ljava/lang/String;");
        mids$[mid_ordinal_9972fcc56b44e79d] = env->getMethodID(cls, "ordinal", "()I");
        mids$[mid_toString_db9b55ba01e03e4b] = env->getMethodID(cls, "toString", "()Ljava/lang/String;");
        mids$[mid_valueOf_69a197ef26214d9f] = env->getStaticMethodID(cls, "valueOf", "(Ljava/lang/Class;Ljava/lang/String;)Ljava/lang/Enum;");
        mids$[mid_finalize_f2cc1bce94666404] = env->getMethodID(cls, "finalize", "()V");
        mids$[mid_clone_d6bcd06f3102c4d9] = env->getMethodID(cls, "clone", "()Ljava/lang/Object;");

        class$ = new ::java::lang::Class(cls);
        live$ = true;
      }
      return (jclass) class$->this$;
    }

    jint Enum::compareTo(const Enum & a0) const
    {
      return env->callIntMethod(this$, mids$[mid_compareTo_2b51c450f527b4a3], a0.this$);
    }

    jboolean Enum::equals(const ::java::lang::Object & a0) const
    {
      return env->callBooleanMethod(this$, mids$[mid_equals_8b72f2dcdde6fd1d], a0.this$);
    }

    ::java::lang::Class Enum::getDeclaringClass() const
    {
      return ::java::lang::Class(env->callObjectMethod(this$, mids$[mid_getDeclaringClass_9df2cc6ebce035fe]));
    }

    jint Enum::hashCode() const
    {
      return env->callIntMethod(this$, mids$[mid_hashCode_9972fcc56b44e79d]);
    }

    ::java::lang::String Enum::name() const
    {
      return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_name_db9b55ba01e03e4b]));
    }

    jint Enum::ordinal() const
    {
      return env->callIntMethod(this$, mids$[mid_ordinal_9972fcc56b44e79d]);
    }

    ::java::lang::String Enum::toString() const
    {
      return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_db9b55ba01e03e4b]));
    }

    Enum Enum::valueOf(const ::java::lang::Class & a0, const ::java::lang::String & a1)
    {
      jclass cls = env->getClass(initializeClass);
      return Enum(env->callStaticObjectMethod(cls, mids$[mid_valueOf_69a197ef26214d9f], a0.this$, a1.this$));
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace java {
  namespace lang {
    static PyObject *t_Enum_cast_(PyTypeObject *type, PyObject *arg);
    static PyObject *t_Enum_instance_(PyTypeObject *type, PyObject *arg);
    static PyObject *t_Enum_of_(t_Enum *self, PyObject *args);
    static PyObject *t_Enum_compareTo(t_Enum *self, PyObject *arg);
    static PyObject *t_Enum_equals(t_Enum *self, PyObject *args);
    static PyObject *t_Enum_getDeclaringClass(t_Enum *self);
    static PyObject *t_Enum_hashCode(t_Enum *self, PyObject *args);
    static PyObject *t_Enum_name(t_Enum *self);
    static PyObject *t_Enum_ordinal(t_Enum *self);
    static PyObject *t_Enum_toString(t_Enum *self, PyObject *args);
    static PyObject *t_Enum_valueOf(PyTypeObject *type, PyObject *args);
    static PyObject *t_Enum_get__declaringClass(t_Enum *self, void *data);
    static PyObject *t_Enum_get__parameters_(t_Enum *self, void *data);
    static PyGetSetDef t_Enum__fields_[] = {
      DECLARE_GET_FIELD(t_Enum, declaringClass),
      DECLARE_GET_FIELD(t_Enum, parameters_),
      { NULL, NULL, NULL, NULL, NULL }
    };

    static PyMethodDef t_Enum__methods_[] = {
      DECLARE_METHOD(t_Enum, cast_, METH_O | METH_CLASS),
      DECLARE_METHOD(t_Enum, instance_, METH_O | METH_CLASS),
      DECLARE_METHOD(t_Enum, of_, METH_VARARGS),
      DECLARE_METHOD(t_Enum, compareTo, METH_O),
      DECLARE_METHOD(t_Enum, equals, METH_VARARGS),
      DECLARE_METHOD(t_Enum, getDeclaringClass, METH_NOARGS),
      DECLARE_METHOD(t_Enum, hashCode, METH_VARARGS),
      DECLARE_METHOD(t_Enum, name, METH_NOARGS),
      DECLARE_METHOD(t_Enum, ordinal, METH_NOARGS),
      DECLARE_METHOD(t_Enum, toString, METH_VARARGS),
      DECLARE_METHOD(t_Enum, valueOf, METH_VARARGS | METH_CLASS),
      { NULL, NULL, 0, NULL }
    };

    static PyType_Slot PY_TYPE_SLOTS(Enum)[] = {
      { Py_tp_methods, t_Enum__methods_ },
      { Py_tp_init, (void *) abstract_init },
      { Py_tp_getset, t_Enum__fields_ },
      { 0, NULL }
    };

    static PyType_Def *PY_TYPE_BASES(Enum)[] = {
      &PY_TYPE_DEF(::java::lang::Object),
      NULL
    };

    DEFINE_TYPE(Enum, t_Enum, Enum);
    PyObject *t_Enum::wrap_Object(const Enum& object, PyTypeObject *p0)
    {
      PyObject *obj = t_Enum::wrap_Object(object);
      if (obj != NULL && obj != Py_None)
      {
        t_Enum *self = (t_Enum *) obj;
        self->parameters[0] = p0;
      }
      return obj;
    }

    PyObject *t_Enum::wrap_jobject(const jobject& object, PyTypeObject *p0)
    {
      PyObject *obj = t_Enum::wrap_jobject(object);
      if (obj != NULL && obj != Py_None)
      {
        t_Enum *self = (t_Enum *) obj;
        self->parameters[0] = p0;
      }
      return obj;
    }

    void t_Enum::install(PyObject *module)
    {
      installType(&PY_TYPE(Enum), &PY_TYPE_DEF(Enum), module, "Enum", 0);
    }

    void t_Enum::initialize(PyObject *module)
    {
      PyObject_SetAttrString((PyObject *) PY_TYPE(Enum), "class_", make_descriptor(Enum::initializeClass, 1));
      PyObject_SetAttrString((PyObject *) PY_TYPE(Enum), "wrapfn_", make_descriptor(t_Enum::wrap_jobject));
      PyObject_SetAttrString((PyObject *) PY_TYPE(Enum), "boxfn_", make_descriptor(boxObject));
    }

    static PyObject *t_Enum_cast_(PyTypeObject *type, PyObject *arg)
    {
      if (!(arg = castCheck(arg, Enum::initializeClass, 1)))
        return NULL;
      return t_Enum::wrap_Object(Enum(((t_Enum *) arg)->object.this$));
    }
    static PyObject *t_Enum_instance_(PyTypeObject *type, PyObject *arg)
    {
      if (!castCheck(arg, Enum::initializeClass, 0))
        Py_RETURN_FALSE;
      Py_RETURN_TRUE;
    }

    static PyObject *t_Enum_of_(t_Enum *self, PyObject *args)
    {
      if (!parseArg(args, "T", 1, &(self->parameters)))
        Py_RETURN_SELF;
      return PyErr_SetArgsError((PyObject *) self, "of_", args);
    }

    static PyObject *t_Enum_compareTo(t_Enum *self, PyObject *arg)
    {
      Enum a0((jobject) NULL);
      PyTypeObject **p0;
      jint result;

      if (!parseArg(arg, "K", Enum::initializeClass, &a0, &p0, t_Enum::parameters_))
      {
        OBJ_CALL(result = self->object.compareTo(a0));
        return PyLong_FromLong((long) result);
      }

      PyErr_SetArgsError((PyObject *) self, "compareTo", arg);
      return NULL;
    }

    static PyObject *t_Enum_equals(t_Enum *self, PyObject *args)
    {
      ::java::lang::Object a0((jobject) NULL);
      jboolean result;

      if (!parseArgs(args, "o", &a0))
      {
        OBJ_CALL(result = self->object.equals(a0));
        Py_RETURN_BOOL(result);
      }

      return callSuper(PY_TYPE(Enum), (PyObject *) self, "equals", args, 2);
    }

    static PyObject *t_Enum_getDeclaringClass(t_Enum *self)
    {
      ::java::lang::Class result((jobject) NULL);
      OBJ_CALL(result = self->object.getDeclaringClass());
      return ::java::lang::t_Class::wrap_Object(result, self->parameters[0]);
    }

    static PyObject *t_Enum_hashCode(t_Enum *self, PyObject *args)
    {
      jint result;

      if (!parseArgs(args, ""))
      {
        OBJ_CALL(result = self->object.hashCode());
        return PyLong_FromLong((long) result);
      }

      return callSuper(PY_TYPE(Enum), (PyObject *) self, "hashCode", args, 2);
    }

    static PyObject *t_Enum_name(t_Enum *self)
    {
      ::java::lang::String result((jobject) NULL);
      OBJ_CALL(result = self->object.name());
      return j2p(result);
    }

    static PyObject *t_Enum_ordinal(t_Enum *self)
    {
      jint result;
      OBJ_CALL(result = self->object.ordinal());
      return PyLong_FromLong((long) result);
    }

    static PyObject *t_Enum_toString(t_Enum *self, PyObject *args)
    {
      ::java::lang::String result((jobject) NULL);

      if (!parseArgs(args, ""))
      {
        OBJ_CALL(result = self->object.toString());
        return j2p(result);
      }

      return callSuper(PY_TYPE(Enum), (PyObject *) self, "toString", args, 2);
    }

    static PyObject *t_Enum_valueOf(PyTypeObject *type, PyObject *args)
    {
      ::java::lang::Class a0((jobject) NULL);
      PyTypeObject **p0;
      ::java::lang::String a1((jobject) NULL);
      Enum result((jobject) NULL);

      if (!parseArgs(args, "Ks", ::java::lang::Class::initializeClass, &a0, &p0, ::java::lang::t_Class::parameters_, &a1))
      {
        OBJ_CALL(result = ::java::lang::Enum::valueOf(a0, a1));
        return p0 != NULL && p0[0] != NULL ? wrapType(p0[0], result.this$) : t_Enum::wrap_Object(result);
      }

      PyErr_SetArgsError(type, "valueOf", args);
      return NULL;
    }
    static PyObject *t_Enum_get__parameters_(t_Enum *self, void *data)
    {
      return typeParameters(self->parameters, sizeof(self->parameters));
    }

    static PyObject *t_Enum_get__declaringClass(t_Enum *self, void *data)
    {
      ::java::lang::Class value((jobject) NULL);
      OBJ_CALL(value = self->object.getDeclaringClass());
      return ::java::lang::t_Class::wrap_Object(value);
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/codecs/uniformsplit/BlockDecoder.h"
#include "org/apache/lucene/util/BytesRef.h"
#include "org/apache/lucene/store/DataInput.h"
#include "java/io/IOException.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace codecs {
        namespace uniformsplit {

          ::java::lang::Class *BlockDecoder::class$ = NULL;
          jmethodID *BlockDecoder::mids$ = NULL;
          bool BlockDecoder::live$ = false;

          jclass BlockDecoder::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/codecs/uniformsplit/BlockDecoder");

              mids$ = new jmethodID[max_mid];
              mids$[mid_decode_c30da6faf6c6bcae] = env->getMethodID(cls, "decode", "(Lorg/apache/lucene/store/DataInput;J)Lorg/apache/lucene/util/BytesRef;");

              class$ = new ::java::lang::Class(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          ::org::apache::lucene::util::BytesRef BlockDecoder::decode(const ::org::apache::lucene::store::DataInput & a0, jlong a1) const
          {
            return ::org::apache::lucene::util::BytesRef(env->callObjectMethod(this$, mids$[mid_decode_c30da6faf6c6bcae], a0.this$, a1));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace codecs {
        namespace uniformsplit {
          static PyObject *t_BlockDecoder_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_BlockDecoder_instance_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_BlockDecoder_decode(t_BlockDecoder *self, PyObject *args);

          static PyMethodDef t_BlockDecoder__methods_[] = {
            DECLARE_METHOD(t_BlockDecoder, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_BlockDecoder, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_BlockDecoder, decode, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          static PyType_Slot PY_TYPE_SLOTS(BlockDecoder)[] = {
            { Py_tp_methods, t_BlockDecoder__methods_ },
            { Py_tp_init, (void *) abstract_init },
            { 0, NULL }
          };

          static PyType_Def *PY_TYPE_BASES(BlockDecoder)[] = {
            &PY_TYPE_DEF(::java::lang::Object),
            NULL
          };

          DEFINE_TYPE(BlockDecoder, t_BlockDecoder, BlockDecoder);

          void t_BlockDecoder::install(PyObject *module)
          {
            installType(&PY_TYPE(BlockDecoder), &PY_TYPE_DEF(BlockDecoder), module, "BlockDecoder", 0);
          }

          void t_BlockDecoder::initialize(PyObject *module)
          {
            PyObject_SetAttrString((PyObject *) PY_TYPE(BlockDecoder), "class_", make_descriptor(BlockDecoder::initializeClass, 1));
            PyObject_SetAttrString((PyObject *) PY_TYPE(BlockDecoder), "wrapfn_", make_descriptor(t_BlockDecoder::wrap_jobject));
            PyObject_SetAttrString((PyObject *) PY_TYPE(BlockDecoder), "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_BlockDecoder_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, BlockDecoder::initializeClass, 1)))
              return NULL;
            return t_BlockDecoder::wrap_Object(BlockDecoder(((t_BlockDecoder *) arg)->object.this$));
          }
          static PyObject *t_BlockDecoder_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, BlockDecoder::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static PyObject *t_BlockDecoder_decode(t_BlockDecoder *self, PyObject *args)
          {
            ::org::apache::lucene::store::DataInput a0((jobject) NULL);
            jlong a1;
            ::org::apache::lucene::util::BytesRef result((jobject) NULL);

            if (!parseArgs(args, "kJ", ::org::apache::lucene::store::DataInput::initializeClass, &a0, &a1))
            {
              OBJ_CALL(result = self->object.decode(a0, a1));
              return ::org::apache::lucene::util::t_BytesRef::wrap_Object(result);
            }

            PyErr_SetArgsError((PyObject *) self, "decode", args);
            return NULL;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queryparser/simple/SimpleQueryParser.h"
#include "java/util/Map.h"
#include "java/lang/Float.h"
#include "org/apache/lucene/analysis/Analyzer.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/search/BooleanClause$Occur.h"
#include "java/lang/String.h"
#include "org/apache/lucene/search/Query.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace simple {

          ::java::lang::Class *SimpleQueryParser::class$ = NULL;
          jmethodID *SimpleQueryParser::mids$ = NULL;
          bool SimpleQueryParser::live$ = false;
          jint SimpleQueryParser::AND_OPERATOR = (jint) 0;
          jint SimpleQueryParser::ESCAPE_OPERATOR = (jint) 0;
          jint SimpleQueryParser::FUZZY_OPERATOR = (jint) 0;
          jint SimpleQueryParser::NEAR_OPERATOR = (jint) 0;
          jint SimpleQueryParser::NOT_OPERATOR = (jint) 0;
          jint SimpleQueryParser::OR_OPERATOR = (jint) 0;
          jint SimpleQueryParser::PHRASE_OPERATOR = (jint) 0;
          jint SimpleQueryParser::PRECEDENCE_OPERATORS = (jint) 0;
          jint SimpleQueryParser::PREFIX_OPERATOR = (jint) 0;
          jint SimpleQueryParser::WHITESPACE_OPERATOR = (jint) 0;

          jclass SimpleQueryParser::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/queryparser/simple/SimpleQueryParser");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_5c5c5d33641fe592] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/analysis/Analyzer;Ljava/lang/String;)V");
              mids$[mid_init$_de518fbba4c05dd3] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/analysis/Analyzer;Ljava/util/Map;)V");
              mids$[mid_init$_5b801464f8d2e967] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/analysis/Analyzer;Ljava/util/Map;I)V");
              mids$[mid_getDefaultOperator_d2a892ed3bcf0bb6] = env->getMethodID(cls, "getDefaultOperator", "()Lorg/apache/lucene/search/BooleanClause$Occur;");
              mids$[mid_parse_1cf26fcf5e3c5839] = env->getMethodID(cls, "parse", "(Ljava/lang/String;)Lorg/apache/lucene/search/Query;");
              mids$[mid_setDefaultOperator_c065c62de5f8731e] = env->getMethodID(cls, "setDefaultOperator", "(Lorg/apache/lucene/search/BooleanClause$Occur;)V");
              mids$[mid_newPrefixQuery_1cf26fcf5e3c5839] = env->getMethodID(cls, "newPrefixQuery", "(Ljava/lang/String;)Lorg/apache/lucene/search/Query;");
              mids$[mid_newFuzzyQuery_711c301244722ef0] = env->getMethodID(cls, "newFuzzyQuery", "(Ljava/lang/String;I)Lorg/apache/lucene/search/Query;");
              mids$[mid_simplify_055fce83b22684f4] = env->getMethodID(cls, "simplify", "(Lorg/apache/lucene/search/BooleanQuery;)Lorg/apache/lucene/search/Query;");
              mids$[mid_newDefaultQuery_1cf26fcf5e3c5839] = env->getMethodID(cls, "newDefaultQuery", "(Ljava/lang/String;)Lorg/apache/lucene/search/Query;");
              mids$[mid_newPhraseQuery_711c301244722ef0] = env->getMethodID(cls, "newPhraseQuery", "(Ljava/lang/String;I)Lorg/apache/lucene/search/Query;");

              class$ = new ::java::lang::Class(cls);
              cls = (jclass) class$->this$;

              AND_OPERATOR = env->getStaticIntField(cls, "AND_OPERATOR");
              ESCAPE_OPERATOR = env->getStaticIntField(cls, "ESCAPE_OPERATOR");
              FUZZY_OPERATOR = env->getStaticIntField(cls, "FUZZY_OPERATOR");
              NEAR_OPERATOR = env->getStaticIntField(cls, "NEAR_OPERATOR");
              NOT_OPERATOR = env->getStaticIntField(cls, "NOT_OPERATOR");
              OR_OPERATOR = env->getStaticIntField(cls, "OR_OPERATOR");
              PHRASE_OPERATOR = env->getStaticIntField(cls, "PHRASE_OPERATOR");
              PRECEDENCE_OPERATORS = env->getStaticIntField(cls, "PRECEDENCE_OPERATORS");
              PREFIX_OPERATOR = env->getStaticIntField(cls, "PREFIX_OPERATOR");
              WHITESPACE_OPERATOR = env->getStaticIntField(cls, "WHITESPACE_OPERATOR");
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          SimpleQueryParser::SimpleQueryParser(const ::org::apache::lucene::analysis::Analyzer & a0, const ::java::lang::String & a1) : ::org::apache::lucene::util::QueryBuilder(env->newObject(initializeClass, &mids$, mid_init$_5c5c5d33641fe592, a0.this$, a1.this$)) {}

          SimpleQueryParser::SimpleQueryParser(const ::org::apache::lucene::analysis::Analyzer & a0, const ::java::util::Map & a1) : ::org::apache::lucene::util::QueryBuilder(env->newObject(initializeClass, &mids$, mid_init$_de518fbba4c05dd3, a0.this$, a1.this$)) {}

          SimpleQueryParser::SimpleQueryParser(const ::org::apache::lucene::analysis::Analyzer & a0, const ::java::util::Map & a1, jint a2) : ::org::apache::lucene::util::QueryBuilder(env->newObject(initializeClass, &mids$, mid_init$_5b801464f8d2e967, a0.this$, a1.this$, a2)) {}

          ::org::apache::lucene::search::BooleanClause$Occur SimpleQueryParser::getDefaultOperator() const
          {
            return ::org::apache::lucene::search::BooleanClause$Occur(env->callObjectMethod(this$, mids$[mid_getDefaultOperator_d2a892ed3bcf0bb6]));
          }

          ::org::apache::lucene::search::Query SimpleQueryParser::parse(const ::java::lang::String & a0) const
          {
            return ::org::apache::lucene::search::Query(env->callObjectMethod(this$, mids$[mid_parse_1cf26fcf5e3c5839], a0.this$));
          }

          void SimpleQueryParser::setDefaultOperator(const ::org::apache::lucene::search::BooleanClause$Occur & a0) const
          {
            env->callVoidMethod(this$, mids$[mid_setDefaultOperator_c065c62de5f8731e], a0.this$);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace simple {
          static PyObject *t_SimpleQueryParser_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_SimpleQueryParser_instance_(PyTypeObject *type, PyObject *arg);
          static int t_SimpleQueryParser_init_(t_SimpleQueryParser *self, PyObject *args, PyObject *kwds);
          static PyObject *t_SimpleQueryParser_getDefaultOperator(t_SimpleQueryParser *self);
          static PyObject *t_SimpleQueryParser_parse(t_SimpleQueryParser *self, PyObject *arg);
          static PyObject *t_SimpleQueryParser_setDefaultOperator(t_SimpleQueryParser *self, PyObject *arg);
          static PyObject *t_SimpleQueryParser_get__defaultOperator(t_SimpleQueryParser *self, void *data);
          static int t_SimpleQueryParser_set__defaultOperator(t_SimpleQueryParser *self, PyObject *arg, void *data);
          static PyGetSetDef t_SimpleQueryParser__fields_[] = {
            DECLARE_GETSET_FIELD(t_SimpleQueryParser, defaultOperator),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_SimpleQueryParser__methods_[] = {
            DECLARE_METHOD(t_SimpleQueryParser, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_SimpleQueryParser, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_SimpleQueryParser, getDefaultOperator, METH_NOARGS),
            DECLARE_METHOD(t_SimpleQueryParser, parse, METH_O),
            DECLARE_METHOD(t_SimpleQueryParser, setDefaultOperator, METH_O),
            { NULL, NULL, 0, NULL }
          };

          static PyType_Slot PY_TYPE_SLOTS(SimpleQueryParser)[] = {
            { Py_tp_methods, t_SimpleQueryParser__methods_ },
            { Py_tp_init, (void *) t_SimpleQueryParser_init_ },
            { Py_tp_getset, t_SimpleQueryParser__fields_ },
            { 0, NULL }
          };

          static PyType_Def *PY_TYPE_BASES(SimpleQueryParser)[] = {
            &PY_TYPE_DEF(::org::apache::lucene::util::QueryBuilder),
            NULL
          };

          DEFINE_TYPE(SimpleQueryParser, t_SimpleQueryParser, SimpleQueryParser);

          void t_SimpleQueryParser::install(PyObject *module)
          {
            installType(&PY_TYPE(SimpleQueryParser), &PY_TYPE_DEF(SimpleQueryParser), module, "SimpleQueryParser", 0);
          }

          void t_SimpleQueryParser::initialize(PyObject *module)
          {
            PyObject_SetAttrString((PyObject *) PY_TYPE(SimpleQueryParser), "class_", make_descriptor(SimpleQueryParser::initializeClass, 1));
            PyObject_SetAttrString((PyObject *) PY_TYPE(SimpleQueryParser), "wrapfn_", make_descriptor(t_SimpleQueryParser::wrap_jobject));
            PyObject_SetAttrString((PyObject *) PY_TYPE(SimpleQueryParser), "boxfn_", make_descriptor(boxObject));
            env->getClass(SimpleQueryParser::initializeClass);
            PyObject_SetAttrString((PyObject *) PY_TYPE(SimpleQueryParser), "AND_OPERATOR", make_descriptor(SimpleQueryParser::AND_OPERATOR));
            PyObject_SetAttrString((PyObject *) PY_TYPE(SimpleQueryParser), "ESCAPE_OPERATOR", make_descriptor(SimpleQueryParser::ESCAPE_OPERATOR));
            PyObject_SetAttrString((PyObject *) PY_TYPE(SimpleQueryParser), "FUZZY_OPERATOR", make_descriptor(SimpleQueryParser::FUZZY_OPERATOR));
            PyObject_SetAttrString((PyObject *) PY_TYPE(SimpleQueryParser), "NEAR_OPERATOR", make_descriptor(SimpleQueryParser::NEAR_OPERATOR));
            PyObject_SetAttrString((PyObject *) PY_TYPE(SimpleQueryParser), "NOT_OPERATOR", make_descriptor(SimpleQueryParser::NOT_OPERATOR));
            PyObject_SetAttrString((PyObject *) PY_TYPE(SimpleQueryParser), "OR_OPERATOR", make_descriptor(SimpleQueryParser::OR_OPERATOR));
            PyObject_SetAttrString((PyObject *) PY_TYPE(SimpleQueryParser), "PHRASE_OPERATOR", make_descriptor(SimpleQueryParser::PHRASE_OPERATOR));
            PyObject_SetAttrString((PyObject *) PY_TYPE(SimpleQueryParser), "PRECEDENCE_OPERATORS", make_descriptor(SimpleQueryParser::PRECEDENCE_OPERATORS));
            PyObject_SetAttrString((PyObject *) PY_TYPE(SimpleQueryParser), "PREFIX_OPERATOR", make_descriptor(SimpleQueryParser::PREFIX_OPERATOR));
            PyObject_SetAttrString((PyObject *) PY_TYPE(SimpleQueryParser), "WHITESPACE_OPERATOR", make_descriptor(SimpleQueryParser::WHITESPACE_OPERATOR));
          }

          static PyObject *t_SimpleQueryParser_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, SimpleQueryParser::initializeClass, 1)))
              return NULL;
            return t_SimpleQueryParser::wrap_Object(SimpleQueryParser(((t_SimpleQueryParser *) arg)->object.this$));
          }
          static PyObject *t_SimpleQueryParser_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, SimpleQueryParser::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_SimpleQueryParser_init_(t_SimpleQueryParser *self, PyObject *args, PyObject *kwds)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 2:
              {
                ::org::apache::lucene::analysis::Analyzer a0((jobject) NULL);
                ::java::lang::String a1((jobject) NULL);
                SimpleQueryParser object((jobject) NULL);

                if (!parseArgs(args, "ks", ::org::apache::lucene::analysis::Analyzer::initializeClass, &a0, &a1))
                {
                  INT_CALL(object = SimpleQueryParser(a0, a1));
                  self->object = object;
                  break;
                }
              }
              {
                ::org::apache::lucene::analysis::Analyzer a0((jobject) NULL);
                ::java::util::Map a1((jobject) NULL);
                PyTypeObject **p1;
                SimpleQueryParser object((jobject) NULL);

                if (!parseArgs(args, "kK", ::org::apache::lucene::analysis::Analyzer::initializeClass, ::java::util::Map::initializeClass, &a0, &a1, &p1, ::java::util::t_Map::parameters_))
                {
                  INT_CALL(object = SimpleQueryParser(a0, a1));
                  self->object = object;
                  break;
                }
              }
              goto err;
             case 3:
              {
                ::org::apache::lucene::analysis::Analyzer a0((jobject) NULL);
                ::java::util::Map a1((jobject) NULL);
                PyTypeObject **p1;
                jint a2;
                SimpleQueryParser object((jobject) NULL);

                if (!parseArgs(args, "kKI", ::org::apache::lucene::analysis::Analyzer::initializeClass, ::java::util::Map::initializeClass, &a0, &a1, &p1, ::java::util::t_Map::parameters_, &a2))
                {
                  INT_CALL(object = SimpleQueryParser(a0, a1, a2));
                  self->object = object;
                  break;
                }
              }
             default:
             err:
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_SimpleQueryParser_getDefaultOperator(t_SimpleQueryParser *self)
          {
            ::org::apache::lucene::search::BooleanClause$Occur result((jobject) NULL);
            OBJ_CALL(result = self->object.getDefaultOperator());
            return ::org::apache::lucene::search::t_BooleanClause$Occur::wrap_Object(result);
          }

          static PyObject *t_SimpleQueryParser_parse(t_SimpleQueryParser *self, PyObject *arg)
          {
            ::java::lang::String a0((jobject) NULL);
            ::org::apache::lucene::search::Query result((jobject) NULL);

            if (!parseArg(arg, "s", &a0))
            {
              OBJ_CALL(result = self->object.parse(a0));
              return ::org::apache::lucene::search::t_Query::wrap_Object(result);
            }

            PyErr_SetArgsError((PyObject *) self, "parse", arg);
            return NULL;
          }

          static PyObject *t_SimpleQueryParser_setDefaultOperator(t_SimpleQueryParser *self, PyObject *arg)
          {
            ::org::apache::lucene::search::BooleanClause$Occur a0((jobject) NULL);
            PyTypeObject **p0;

            if (!parseArg(arg, "K", ::org::apache::lucene::search::BooleanClause$Occur::initializeClass, &a0, &p0, ::org::apache::lucene::search::t_BooleanClause$Occur::parameters_))
            {
              OBJ_CALL(self->object.setDefaultOperator(a0));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError((PyObject *) self, "setDefaultOperator", arg);
            return NULL;
          }

          static PyObject *t_SimpleQueryParser_get__defaultOperator(t_SimpleQueryParser *self, void *data)
          {
            ::org::apache::lucene::search::BooleanClause$Occur value((jobject) NULL);
            OBJ_CALL(value = self->object.getDefaultOperator());
            return ::org::apache::lucene::search::t_BooleanClause$Occur::wrap_Object(value);
          }
          static int t_SimpleQueryParser_set__defaultOperator(t_SimpleQueryParser *self, PyObject *arg, void *data)
          {
            {
              ::org::apache::lucene::search::BooleanClause$Occur value((jobject) NULL);
              if (!parseArg(arg, "k", ::org::apache::lucene::search::BooleanClause$Occur::initializeClass, &value))
              {
                INT_CALL(self->object.setDefaultOperator(value));
                return 0;
              }
            }
            PyErr_SetArgsError((PyObject *) self, "defaultOperator", arg);
            return -1;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/no/NorwegianLightStemFilter.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/analysis/TokenStream.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace no {

          ::java::lang::Class *NorwegianLightStemFilter::class$ = NULL;
          jmethodID *NorwegianLightStemFilter::mids$ = NULL;
          bool NorwegianLightStemFilter::live$ = false;

          jclass NorwegianLightStemFilter::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/no/NorwegianLightStemFilter");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_c26756868a754f4e] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/analysis/TokenStream;)V");
              mids$[mid_init$_ec84dcad1ccbb797] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/analysis/TokenStream;I)V");
              mids$[mid_incrementToken_8454bd5aa23fd11e] = env->getMethodID(cls, "incrementToken", "()Z");

              class$ = new ::java::lang::Class(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          NorwegianLightStemFilter::NorwegianLightStemFilter(const ::org::apache::lucene::analysis::TokenStream & a0) : ::org::apache::lucene::analysis::TokenFilter(env->newObject(initializeClass, &mids$, mid_init$_c26756868a754f4e, a0.this$)) {}

          NorwegianLightStemFilter::NorwegianLightStemFilter(const ::org::apache::lucene::analysis::TokenStream & a0, jint a1) : ::org::apache::lucene::analysis::TokenFilter(env->newObject(initializeClass, &mids$, mid_init$_ec84dcad1ccbb797, a0.this$, a1)) {}

          jboolean NorwegianLightStemFilter::incrementToken() const
          {
            return env->callBooleanMethod(this$, mids$[mid_incrementToken_8454bd5aa23fd11e]);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace no {
          static PyObject *t_NorwegianLightStemFilter_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_NorwegianLightStemFilter_instance_(PyTypeObject *type, PyObject *arg);
          static int t_NorwegianLightStemFilter_init_(t_NorwegianLightStemFilter *self, PyObject *args, PyObject *kwds);
          static PyObject *t_NorwegianLightStemFilter_incrementToken(t_NorwegianLightStemFilter *self, PyObject *args);

          static PyMethodDef t_NorwegianLightStemFilter__methods_[] = {
            DECLARE_METHOD(t_NorwegianLightStemFilter, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_NorwegianLightStemFilter, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_NorwegianLightStemFilter, incrementToken, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          static PyType_Slot PY_TYPE_SLOTS(NorwegianLightStemFilter)[] = {
            { Py_tp_methods, t_NorwegianLightStemFilter__methods_ },
            { Py_tp_init, (void *) t_NorwegianLightStemFilter_init_ },
            { 0, NULL }
          };

          static PyType_Def *PY_TYPE_BASES(NorwegianLightStemFilter)[] = {
            &PY_TYPE_DEF(::org::apache::lucene::analysis::TokenFilter),
            NULL
          };

          DEFINE_TYPE(NorwegianLightStemFilter, t_NorwegianLightStemFilter, NorwegianLightStemFilter);

          void t_NorwegianLightStemFilter::install(PyObject *module)
          {
            installType(&PY_TYPE(NorwegianLightStemFilter), &PY_TYPE_DEF(NorwegianLightStemFilter), module, "NorwegianLightStemFilter", 0);
          }

          void t_NorwegianLightStemFilter::initialize(PyObject *module)
          {
            PyObject_SetAttrString((PyObject *) PY_TYPE(NorwegianLightStemFilter), "class_", make_descriptor(NorwegianLightStemFilter::initializeClass, 1));
            PyObject_SetAttrString((PyObject *) PY_TYPE(NorwegianLightStemFilter), "wrapfn_", make_descriptor(t_NorwegianLightStemFilter::wrap_jobject));
            PyObject_SetAttrString((PyObject *) PY_TYPE(NorwegianLightStemFilter), "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_NorwegianLightStemFilter_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, NorwegianLightStemFilter::initializeClass, 1)))
              return NULL;
            return t_NorwegianLightStemFilter::wrap_Object(NorwegianLightStemFilter(((t_NorwegianLightStemFilter *) arg)->object.this$));
          }
          static PyObject *t_NorwegianLightStemFilter_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, NorwegianLightStemFilter::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_NorwegianLightStemFilter_init_(t_NorwegianLightStemFilter *self, PyObject *args, PyObject *kwds)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 1:
              {
                ::org::apache::lucene::analysis::TokenStream a0((jobject) NULL);
                NorwegianLightStemFilter object((jobject) NULL);

                if (!parseArgs(args, "k", ::org::apache::lucene::analysis::TokenStream::initializeClass, &a0))
                {
                  INT_CALL(object = NorwegianLightStemFilter(a0));
                  self->object = object;
                  break;
                }
              }
              goto err;
             case 2:
              {
                ::org::apache::lucene::analysis::TokenStream a0((jobject) NULL);
                jint a1;
                NorwegianLightStemFilter object((jobject) NULL);

                if (!parseArgs(args, "kI", ::org::apache::lucene::analysis::TokenStream::initializeClass, &a0, &a1))
                {
                  INT_CALL(object = NorwegianLightStemFilter(a0, a1));
                  self->object = object;
                  break;
                }
              }
             default:
             err:
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_NorwegianLightStemFilter_incrementToken(t_NorwegianLightStemFilter *self, PyObject *args)
          {
            jboolean result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.incrementToken());
              Py_RETURN_BOOL(result);
            }

            return callSuper(PY_TYPE(NorwegianLightStemFilter), (PyObject *) self, "incrementToken", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/fr/FrenchLightStemmer.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace fr {

          ::java::lang::Class *FrenchLightStemmer::class$ = NULL;
          jmethodID *FrenchLightStemmer::mids$ = NULL;
          bool FrenchLightStemmer::live$ = false;

          jclass FrenchLightStemmer::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/fr/FrenchLightStemmer");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_f2cc1bce94666404] = env->getMethodID(cls, "<init>", "()V");
              mids$[mid_stem_d4655f2a19359017] = env->getMethodID(cls, "stem", "([CI)I");

              class$ = new ::java::lang::Class(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          FrenchLightStemmer::FrenchLightStemmer() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_f2cc1bce94666404)) {}

          jint FrenchLightStemmer::stem(const JArray< jchar > & a0, jint a1) const
          {
            return env->callIntMethod(this$, mids$[mid_stem_d4655f2a19359017], a0.this$, a1);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace fr {
          static PyObject *t_FrenchLightStemmer_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_FrenchLightStemmer_instance_(PyTypeObject *type, PyObject *arg);
          static int t_FrenchLightStemmer_init_(t_FrenchLightStemmer *self, PyObject *args, PyObject *kwds);
          static PyObject *t_FrenchLightStemmer_stem(t_FrenchLightStemmer *self, PyObject *args);

          static PyMethodDef t_FrenchLightStemmer__methods_[] = {
            DECLARE_METHOD(t_FrenchLightStemmer, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_FrenchLightStemmer, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_FrenchLightStemmer, stem, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          static PyType_Slot PY_TYPE_SLOTS(FrenchLightStemmer)[] = {
            { Py_tp_methods, t_FrenchLightStemmer__methods_ },
            { Py_tp_init, (void *) t_FrenchLightStemmer_init_ },
            { 0, NULL }
          };

          static PyType_Def *PY_TYPE_BASES(FrenchLightStemmer)[] = {
            &PY_TYPE_DEF(::java::lang::Object),
            NULL
          };

          DEFINE_TYPE(FrenchLightStemmer, t_FrenchLightStemmer, FrenchLightStemmer);

          void t_FrenchLightStemmer::install(PyObject *module)
          {
            installType(&PY_TYPE(FrenchLightStemmer), &PY_TYPE_DEF(FrenchLightStemmer), module, "FrenchLightStemmer", 0);
          }

          void t_FrenchLightStemmer::initialize(PyObject *module)
          {
            PyObject_SetAttrString((PyObject *) PY_TYPE(FrenchLightStemmer), "class_", make_descriptor(FrenchLightStemmer::initializeClass, 1));
            PyObject_SetAttrString((PyObject *) PY_TYPE(FrenchLightStemmer), "wrapfn_", make_descriptor(t_FrenchLightStemmer::wrap_jobject));
            PyObject_SetAttrString((PyObject *) PY_TYPE(FrenchLightStemmer), "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_FrenchLightStemmer_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, FrenchLightStemmer::initializeClass, 1)))
              return NULL;
            return t_FrenchLightStemmer::wrap_Object(FrenchLightStemmer(((t_FrenchLightStemmer *) arg)->object.this$));
          }
          static PyObject *t_FrenchLightStemmer_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, FrenchLightStemmer::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_FrenchLightStemmer_init_(t_FrenchLightStemmer *self, PyObject *args, PyObject *kwds)
          {
            FrenchLightStemmer object((jobject) NULL);

            INT_CALL(object = FrenchLightStemmer());
            self->object = object;

            return 0;
          }

          static PyObject *t_FrenchLightStemmer_stem(t_FrenchLightStemmer *self, PyObject *args)
          {
            JArray< jchar > a0((jobject) NULL);
            jint a1;
            jint result;

            if (!parseArgs(args, "[CI", &a0, &a1))
            {
              OBJ_CALL(result = self->object.stem(a0, a1));
              return PyLong_FromLong((long) result);
            }

            PyErr_SetArgsError((PyObject *) self, "stem", args);
            return NULL;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queryparser/flexible/standard/nodes/PointRangeQueryNode.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/queryparser/flexible/core/QueryNodeException.h"
#include "org/apache/lucene/queryparser/flexible/standard/config/PointsConfig.h"
#include "java/lang/String.h"
#include "org/apache/lucene/queryparser/flexible/standard/nodes/PointQueryNode.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace standard {
            namespace nodes {

              ::java::lang::Class *PointRangeQueryNode::class$ = NULL;
              jmethodID *PointRangeQueryNode::mids$ = NULL;
              jfieldID *PointRangeQueryNode::fids$ = NULL;
              bool PointRangeQueryNode::live$ = false;

              jclass PointRangeQueryNode::initializeClass(bool getOnly)
              {
                if (getOnly)
                  return (jclass) (live$ ? class$->this$ : NULL);
                if (class$ == NULL)
                {
                  jclass cls = (jclass) env->findClass("org/apache/lucene/queryparser/flexible/standard/nodes/PointRangeQueryNode");

                  mids$ = new jmethodID[max_mid];
                  mids$[mid_init$_2de56dc6f25a8870] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/queryparser/flexible/standard/nodes/PointQueryNode;Lorg/apache/lucene/queryparser/flexible/standard/nodes/PointQueryNode;ZZLorg/apache/lucene/queryparser/flexible/standard/config/PointsConfig;)V");
                  mids$[mid_getPointsConfig_7999d9d1de2521ad] = env->getMethodID(cls, "getPointsConfig", "()Lorg/apache/lucene/queryparser/flexible/standard/config/PointsConfig;");
                  mids$[mid_setBounds_2de56dc6f25a8870] = env->getMethodID(cls, "setBounds", "(Lorg/apache/lucene/queryparser/flexible/standard/nodes/PointQueryNode;Lorg/apache/lucene/queryparser/flexible/standard/nodes/PointQueryNode;ZZLorg/apache/lucene/queryparser/flexible/standard/config/PointsConfig;)V");
                  mids$[mid_toString_db9b55ba01e03e4b] = env->getMethodID(cls, "toString", "()Ljava/lang/String;");

                  fids$ = new jfieldID[max_fid];
                  fids$[fid_numericConfig] = env->getFieldID(cls, "numericConfig", "Lorg/apache/lucene/queryparser/flexible/standard/config/PointsConfig;");

                  class$ = new ::java::lang::Class(cls);
                  live$ = true;
                }
                return (jclass) class$->this$;
              }

              PointRangeQueryNode::PointRangeQueryNode(const ::org::apache::lucene::queryparser::flexible::standard::nodes::PointQueryNode & a0, const ::org::apache::lucene::queryparser::flexible::standard::nodes::PointQueryNode & a1, jboolean a2, jboolean a3, const ::org::apache::lucene::queryparser::flexible::standard::config::PointsConfig & a4) : ::org::apache::lucene::queryparser::flexible::standard::nodes::AbstractRangeQueryNode(env->newObject(initializeClass, &mids$, mid_init$_2de56dc6f25a8870, a0.this$, a1.this$, a2, a3, a4.this$)) {}

              ::org::apache::lucene::queryparser::flexible::standard::config::PointsConfig PointRangeQueryNode::getPointsConfig() const
              {
                return ::org::apache::lucene::queryparser::flexible::standard::config::PointsConfig(env->callObjectMethod(this$, mids$[mid_getPointsConfig_7999d9d1de2521ad]));
              }

              void PointRangeQueryNode::setBounds(const ::org::apache::lucene::queryparser::flexible::standard::nodes::PointQueryNode & a0, const ::org::apache::lucene::queryparser::flexible::standard::nodes::PointQueryNode & a1, jboolean a2, jboolean a3, const ::org::apache::lucene::queryparser::flexible::standard::config::PointsConfig & a4) const
              {
                env->callVoidMethod(this$, mids$[mid_setBounds_2de56dc6f25a8870], a0.this$, a1.this$, a2, a3, a4.this$);
              }

              ::java::lang::String PointRangeQueryNode::toString() const
              {
                return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_db9b55ba01e03e4b]));
              }

              ::org::apache::lucene::queryparser::flexible::standard::config::PointsConfig PointRangeQueryNode::_get_numericConfig() const
              {
                return ::org::apache::lucene::queryparser::flexible::standard::config::PointsConfig(env->getObjectField(this$, fids$[fid_numericConfig]));
              }

              void PointRangeQueryNode::_set_numericConfig(const ::org::apache::lucene::queryparser::flexible::standard::config::PointsConfig & a0) const
              {
                env->setObjectField(this$, fids$[fid_numericConfig], a0.this$);
              }
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace standard {
            namespace nodes {
              static PyObject *t_PointRangeQueryNode_cast_(PyTypeObject *type, PyObject *arg);
              static PyObject *t_PointRangeQueryNode_instance_(PyTypeObject *type, PyObject *arg);
              static PyObject *t_PointRangeQueryNode_of_(t_PointRangeQueryNode *self, PyObject *args);
              static int t_PointRangeQueryNode_init_(t_PointRangeQueryNode *self, PyObject *args, PyObject *kwds);
              static PyObject *t_PointRangeQueryNode_getPointsConfig(t_PointRangeQueryNode *self);
              static PyObject *t_PointRangeQueryNode_setBounds(t_PointRangeQueryNode *self, PyObject *args);
              static PyObject *t_PointRangeQueryNode_toString(t_PointRangeQueryNode *self, PyObject *args);
              static PyObject *t_PointRangeQueryNode_get__numericConfig(t_PointRangeQueryNode *self, void *data);
              static int t_PointRangeQueryNode_set__numericConfig(t_PointRangeQueryNode *self, PyObject *arg, void *data);

              static PyObject *t_PointRangeQueryNode_get__pointsConfig(t_PointRangeQueryNode *self, void *data);
              static PyObject *t_PointRangeQueryNode_get__parameters_(t_PointRangeQueryNode *self, void *data);
              static PyGetSetDef t_PointRangeQueryNode__fields_[] = {
                DECLARE_GETSET_FIELD(t_PointRangeQueryNode, numericConfig),
                DECLARE_GET_FIELD(t_PointRangeQueryNode, pointsConfig),
                DECLARE_GET_FIELD(t_PointRangeQueryNode, parameters_),
                { NULL, NULL, NULL, NULL, NULL }
              };

              static PyMethodDef t_PointRangeQueryNode__methods_[] = {
                DECLARE_METHOD(t_PointRangeQueryNode, cast_, METH_O | METH_CLASS),
                DECLARE_METHOD(t_PointRangeQueryNode, instance_, METH_O | METH_CLASS),
                DECLARE_METHOD(t_PointRangeQueryNode, of_, METH_VARARGS),
                DECLARE_METHOD(t_PointRangeQueryNode, getPointsConfig, METH_NOARGS),
                DECLARE_METHOD(t_PointRangeQueryNode, setBounds, METH_VARARGS),
                DECLARE_METHOD(t_PointRangeQueryNode, toString, METH_VARARGS),
                { NULL, NULL, 0, NULL }
              };

              static PyType_Slot PY_TYPE_SLOTS(PointRangeQueryNode)[] = {
                { Py_tp_methods, t_PointRangeQueryNode__methods_ },
                { Py_tp_init, (void *) t_PointRangeQueryNode_init_ },
                { Py_tp_getset, t_PointRangeQueryNode__fields_ },
                { 0, NULL }
              };

              static PyType_Def *PY_TYPE_BASES(PointRangeQueryNode)[] = {
                &PY_TYPE_DEF(::org::apache::lucene::queryparser::flexible::standard::nodes::AbstractRangeQueryNode),
                NULL
              };

              DEFINE_TYPE(PointRangeQueryNode, t_PointRangeQueryNode, PointRangeQueryNode);
              PyObject *t_PointRangeQueryNode::wrap_Object(const PointRangeQueryNode& object, PyTypeObject *p0)
              {
                PyObject *obj = t_PointRangeQueryNode::wrap_Object(object);
                if (obj != NULL && obj != Py_None)
                {
                  t_PointRangeQueryNode *self = (t_PointRangeQueryNode *) obj;
                  self->parameters[0] = p0;
                }
                return obj;
              }

              PyObject *t_PointRangeQueryNode::wrap_jobject(const jobject& object, PyTypeObject *p0)
              {
                PyObject *obj = t_PointRangeQueryNode::wrap_jobject(object);
                if (obj != NULL && obj != Py_None)
                {
                  t_PointRangeQueryNode *self = (t_PointRangeQueryNode *) obj;
                  self->parameters[0] = p0;
                }
                return obj;
              }

              void t_PointRangeQueryNode::install(PyObject *module)
              {
                installType(&PY_TYPE(PointRangeQueryNode), &PY_TYPE_DEF(PointRangeQueryNode), module, "PointRangeQueryNode", 0);
              }

              void t_PointRangeQueryNode::initialize(PyObject *module)
              {
                PyObject_SetAttrString((PyObject *) PY_TYPE(PointRangeQueryNode), "class_", make_descriptor(PointRangeQueryNode::initializeClass, 1));
                PyObject_SetAttrString((PyObject *) PY_TYPE(PointRangeQueryNode), "wrapfn_", make_descriptor(t_PointRangeQueryNode::wrap_jobject));
                PyObject_SetAttrString((PyObject *) PY_TYPE(PointRangeQueryNode), "boxfn_", make_descriptor(boxObject));
              }

              static PyObject *t_PointRangeQueryNode_cast_(PyTypeObject *type, PyObject *arg)
              {
                if (!(arg = castCheck(arg, PointRangeQueryNode::initializeClass, 1)))
                  return NULL;
                return t_PointRangeQueryNode::wrap_Object(PointRangeQueryNode(((t_PointRangeQueryNode *) arg)->object.this$));
              }
              static PyObject *t_PointRangeQueryNode_instance_(PyTypeObject *type, PyObject *arg)
              {
                if (!castCheck(arg, PointRangeQueryNode::initializeClass, 0))
                  Py_RETURN_FALSE;
                Py_RETURN_TRUE;
              }

              static PyObject *t_PointRangeQueryNode_of_(t_PointRangeQueryNode *self, PyObject *args)
              {
                if (!parseArg(args, "T", 1, &(self->parameters)))
                  Py_RETURN_SELF;
                return PyErr_SetArgsError((PyObject *) self, "of_", args);
              }

              static int t_PointRangeQueryNode_init_(t_PointRangeQueryNode *self, PyObject *args, PyObject *kwds)
              {
                ::org::apache::lucene::queryparser::flexible::standard::nodes::PointQueryNode a0((jobject) NULL);
                ::org::apache::lucene::queryparser::flexible::standard::nodes::PointQueryNode a1((jobject) NULL);
                jboolean a2;
                jboolean a3;
                ::org::apache::lucene::queryparser::flexible::standard::config::PointsConfig a4((jobject) NULL);
                PointRangeQueryNode object((jobject) NULL);

                if (!parseArgs(args, "kkZZk", ::org::apache::lucene::queryparser::flexible::standard::nodes::PointQueryNode::initializeClass, ::org::apache::lucene::queryparser::flexible::standard::nodes::PointQueryNode::initializeClass, ::org::apache::lucene::queryparser::flexible::standard::config::PointsConfig::initializeClass, &a0, &a1, &a2, &a3, &a4))
                {
                  INT_CALL(object = PointRangeQueryNode(a0, a1, a2, a3, a4));
                  self->object = object;
                  self->parameters[0] = ::org::apache::lucene::queryparser::flexible::standard::nodes::PY_TYPE(PointQueryNode);
                }
                else
                {
                  PyErr_SetArgsError((PyObject *) self, "__init__", args);
                  return -1;
                }

                return 0;
              }

              static PyObject *t_PointRangeQueryNode_getPointsConfig(t_PointRangeQueryNode *self)
              {
                ::org::apache::lucene::queryparser::flexible::standard::config::PointsConfig result((jobject) NULL);
                OBJ_CALL(result = self->object.getPointsConfig());
                return ::org::apache::lucene::queryparser::flexible::standard::config::t_PointsConfig::wrap_Object(result);
              }

              static PyObject *t_PointRangeQueryNode_setBounds(t_PointRangeQueryNode *self, PyObject *args)
              {
                ::org::apache::lucene::queryparser::flexible::standard::nodes::PointQueryNode a0((jobject) NULL);
                ::org::apache::lucene::queryparser::flexible::standard::nodes::PointQueryNode a1((jobject) NULL);
                jboolean a2;
                jboolean a3;
                ::org::apache::lucene::queryparser::flexible::standard::config::PointsConfig a4((jobject) NULL);

                if (!parseArgs(args, "kkZZk", ::org::apache::lucene::queryparser::flexible::standard::nodes::PointQueryNode::initializeClass, ::org::apache::lucene::queryparser::flexible::standard::nodes::PointQueryNode::initializeClass, ::org::apache::lucene::queryparser::flexible::standard::config::PointsConfig::initializeClass, &a0, &a1, &a2, &a3, &a4))
                {
                  OBJ_CALL(self->object.setBounds(a0, a1, a2, a3, a4));
                  Py_RETURN_NONE;
                }

                return callSuper(PY_TYPE(PointRangeQueryNode), (PyObject *) self, "setBounds", args, 2);
              }

              static PyObject *t_PointRangeQueryNode_toString(t_PointRangeQueryNode *self, PyObject *args)
              {
                ::java::lang::String result((jobject) NULL);

                if (!parseArgs(args, ""))
                {
                  OBJ_CALL(result = self->object.toString());
                  return j2p(result);
                }

                return callSuper(PY_TYPE(PointRangeQueryNode), (PyObject *) self, "toString", args, 2);
              }
              static PyObject *t_PointRangeQueryNode_get__parameters_(t_PointRangeQueryNode *self, void *data)
              {
                return typeParameters(self->parameters, sizeof(self->parameters));
              }

              static PyObject *t_PointRangeQueryNode_get__numericConfig(t_PointRangeQueryNode *self, void *data)
              {
                ::org::apache::lucene::queryparser::flexible::standard::config::PointsConfig value((jobject) NULL);
                OBJ_CALL(value = self->object._get_numericConfig());
                return ::org::apache::lucene::queryparser::flexible::standard::config::t_PointsConfig::wrap_Object(value);
              }
              static int t_PointRangeQueryNode_set__numericConfig(t_PointRangeQueryNode *self, PyObject *arg, void *data)
              {
                ::org::apache::lucene::queryparser::flexible::standard::config::PointsConfig value((jobject) NULL);
                if (!parseArg(arg, "k", ::org::apache::lucene::queryparser::flexible::standard::config::PointsConfig::initializeClass, &value))
                {
                  INT_CALL(self->object._set_numericConfig(value));
                  return 0;
                }
                PyErr_SetArgsError((PyObject *) self, "numericConfig", arg);
                return -1;
              }

              static PyObject *t_PointRangeQueryNode_get__pointsConfig(t_PointRangeQueryNode *self, void *data)
              {
                ::org::apache::lucene::queryparser::flexible::standard::config::PointsConfig value((jobject) NULL);
                OBJ_CALL(value = self->object.getPointsConfig());
                return ::org::apache::lucene::queryparser::flexible::standard::config::t_PointsConfig::wrap_Object(value);
              }
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/similarities/LMSimilarity$LMStats.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace similarities {

          ::java::lang::Class *LMSimilarity$LMStats::class$ = NULL;
          jmethodID *LMSimilarity$LMStats::mids$ = NULL;
          bool LMSimilarity$LMStats::live$ = false;

          jclass LMSimilarity$LMStats::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/search/similarities/LMSimilarity$LMStats");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_b5c6442be7f92276] = env->getMethodID(cls, "<init>", "(Ljava/lang/String;D)V");
              mids$[mid_getCollectionProbability_8c74b787998ce4bc] = env->getMethodID(cls, "getCollectionProbability", "()D");
              mids$[mid_setCollectionProbability_3c435f10a3b1e038] = env->getMethodID(cls, "setCollectionProbability", "(D)V");

              class$ = new ::java::lang::Class(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          LMSimilarity$LMStats::LMSimilarity$LMStats(const ::java::lang::String & a0, jdouble a1) : ::org::apache::lucene::search::similarities::BasicStats(env->newObject(initializeClass, &mids$, mid_init$_b5c6442be7f92276, a0.this$, a1)) {}

          jdouble LMSimilarity$LMStats::getCollectionProbability() const
          {
            return env->callDoubleMethod(this$, mids$[mid_getCollectionProbability_8c74b787998ce4bc]);
          }

          void LMSimilarity$LMStats::setCollectionProbability(jdouble a0) const
          {
            env->callVoidMethod(this$, mids$[mid_setCollectionProbability_3c435f10a3b1e038], a0);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace similarities {
          static PyObject *t_LMSimilarity$LMStats_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_LMSimilarity$LMStats_instance_(PyTypeObject *type, PyObject *arg);
          static int t_LMSimilarity$LMStats_init_(t_LMSimilarity$LMStats *self, PyObject *args, PyObject *kwds);
          static PyObject *t_LMSimilarity$LMStats_getCollectionProbability(t_LMSimilarity$LMStats *self);
          static PyObject *t_LMSimilarity$LMStats_setCollectionProbability(t_LMSimilarity$LMStats *self, PyObject *arg);
          static PyObject *t_LMSimilarity$LMStats_get__collectionProbability(t_LMSimilarity$LMStats *self, void *data);
          static int t_LMSimilarity$LMStats_set__collectionProbability(t_LMSimilarity$LMStats *self, PyObject *arg, void *data);
          static PyGetSetDef t_LMSimilarity$LMStats__fields_[] = {
            DECLARE_GETSET_FIELD(t_LMSimilarity$LMStats, collectionProbability),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_LMSimilarity$LMStats__methods_[] = {
            DECLARE_METHOD(t_LMSimilarity$LMStats, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_LMSimilarity$LMStats, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_LMSimilarity$LMStats, getCollectionProbability, METH_NOARGS),
            DECLARE_METHOD(t_LMSimilarity$LMStats, setCollectionProbability, METH_O),
            { NULL, NULL, 0, NULL }
          };

          static PyType_Slot PY_TYPE_SLOTS(LMSimilarity$LMStats)[] = {
            { Py_tp_methods, t_LMSimilarity$LMStats__methods_ },
            { Py_tp_init, (void *) t_LMSimilarity$LMStats_init_ },
            { Py_tp_getset, t_LMSimilarity$LMStats__fields_ },
            { 0, NULL }
          };

          static PyType_Def *PY_TYPE_BASES(LMSimilarity$LMStats)[] = {
            &PY_TYPE_DEF(::org::apache::lucene::search::similarities::BasicStats),
            NULL
          };

          DEFINE_TYPE(LMSimilarity$LMStats, t_LMSimilarity$LMStats, LMSimilarity$LMStats);

          void t_LMSimilarity$LMStats::install(PyObject *module)
          {
            installType(&PY_TYPE(LMSimilarity$LMStats), &PY_TYPE_DEF(LMSimilarity$LMStats), module, "LMSimilarity$LMStats", 0);
          }

          void t_LMSimilarity$LMStats::initialize(PyObject *module)
          {
            PyObject_SetAttrString((PyObject *) PY_TYPE(LMSimilarity$LMStats), "class_", make_descriptor(LMSimilarity$LMStats::initializeClass, 1));
            PyObject_SetAttrString((PyObject *) PY_TYPE(LMSimilarity$LMStats), "wrapfn_", make_descriptor(t_LMSimilarity$LMStats::wrap_jobject));
            PyObject_SetAttrString((PyObject *) PY_TYPE(LMSimilarity$LMStats), "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_LMSimilarity$LMStats_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, LMSimilarity$LMStats::initializeClass, 1)))
              return NULL;
            return t_LMSimilarity$LMStats::wrap_Object(LMSimilarity$LMStats(((t_LMSimilarity$LMStats *) arg)->object.this$));
          }
          static PyObject *t_LMSimilarity$LMStats_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, LMSimilarity$LMStats::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_LMSimilarity$LMStats_init_(t_LMSimilarity$LMStats *self, PyObject *args, PyObject *kwds)
          {
            ::java::lang::String a0((jobject) NULL);
            jdouble a1;
            LMSimilarity$LMStats object((jobject) NULL);

            if (!parseArgs(args, "sD", &a0, &a1))
            {
              INT_CALL(object = LMSimilarity$LMStats(a0, a1));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_LMSimilarity$LMStats_getCollectionProbability(t_LMSimilarity$LMStats *self)
          {
            jdouble result;
            OBJ_CALL(result = self->object.getCollectionProbability());
            return PyFloat_FromDouble((double) result);
          }

          static PyObject *t_LMSimilarity$LMStats_setCollectionProbability(t_LMSimilarity$LMStats *self, PyObject *arg)
          {
            jdouble a0;

            if (!parseArg(arg, "D", &a0))
            {
              OBJ_CALL(self->object.setCollectionProbability(a0));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError((PyObject *) self, "setCollectionProbability", arg);
            return NULL;
          }

          static PyObject *t_LMSimilarity$LMStats_get__collectionProbability(t_LMSimilarity$LMStats *self, void *data)
          {
            jdouble value;
            OBJ_CALL(value = self->object.getCollectionProbability());
            return PyFloat_FromDouble((double) value);
          }
          static int t_LMSimilarity$LMStats_set__collectionProbability(t_LMSimilarity$LMStats *self, PyObject *arg, void *data)
          {
            {
              jdouble value;
              if (!parseArg(arg, "D", &value))
              {
                INT_CALL(self->object.setCollectionProbability(value));
                return 0;
              }
            }
            PyErr_SetArgsError((PyObject *) self, "collectionProbability", arg);
            return -1;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/index/CheckIndex$Options.h"
#include "java/io/PrintStream.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {

        ::java::lang::Class *CheckIndex$Options::class$ = NULL;
        jmethodID *CheckIndex$Options::mids$ = NULL;
        bool CheckIndex$Options::live$ = false;

        jclass CheckIndex$Options::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/index/CheckIndex$Options");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_f2cc1bce94666404] = env->getMethodID(cls, "<init>", "()V");
            mids$[mid_getDirImpl_db9b55ba01e03e4b] = env->getMethodID(cls, "getDirImpl", "()Ljava/lang/String;");
            mids$[mid_getIndexPath_db9b55ba01e03e4b] = env->getMethodID(cls, "getIndexPath", "()Ljava/lang/String;");
            mids$[mid_setOut_51d7bcb97eea24e3] = env->getMethodID(cls, "setOut", "(Ljava/io/PrintStream;)V");

            class$ = new ::java::lang::Class(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        CheckIndex$Options::CheckIndex$Options() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_f2cc1bce94666404)) {}

        ::java::lang::String CheckIndex$Options::getDirImpl() const
        {
          return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_getDirImpl_db9b55ba01e03e4b]));
        }

        ::java::lang::String CheckIndex$Options::getIndexPath() const
        {
          return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_getIndexPath_db9b55ba01e03e4b]));
        }

        void CheckIndex$Options::setOut(const ::java::io::PrintStream & a0) const
        {
          env->callVoidMethod(this$, mids$[mid_setOut_51d7bcb97eea24e3], a0.this$);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {
        static PyObject *t_CheckIndex$Options_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_CheckIndex$Options_instance_(PyTypeObject *type, PyObject *arg);
        static int t_CheckIndex$Options_init_(t_CheckIndex$Options *self, PyObject *args, PyObject *kwds);
        static PyObject *t_CheckIndex$Options_getDirImpl(t_CheckIndex$Options *self);
        static PyObject *t_CheckIndex$Options_getIndexPath(t_CheckIndex$Options *self);
        static PyObject *t_CheckIndex$Options_setOut(t_CheckIndex$Options *self, PyObject *arg);
        static PyObject *t_CheckIndex$Options_get__dirImpl(t_CheckIndex$Options *self, void *data);
        static PyObject *t_CheckIndex$Options_get__indexPath(t_CheckIndex$Options *self, void *data);
        static int t_CheckIndex$Options_set__out(t_CheckIndex$Options *self, PyObject *arg, void *data);
        static PyGetSetDef t_CheckIndex$Options__fields_[] = {
          DECLARE_GET_FIELD(t_CheckIndex$Options, dirImpl),
          DECLARE_GET_FIELD(t_CheckIndex$Options, indexPath),
          DECLARE_SET_FIELD(t_CheckIndex$Options, out),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_CheckIndex$Options__methods_[] = {
          DECLARE_METHOD(t_CheckIndex$Options, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_CheckIndex$Options, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_CheckIndex$Options, getDirImpl, METH_NOARGS),
          DECLARE_METHOD(t_CheckIndex$Options, getIndexPath, METH_NOARGS),
          DECLARE_METHOD(t_CheckIndex$Options, setOut, METH_O),
          { NULL, NULL, 0, NULL }
        };

        static PyType_Slot PY_TYPE_SLOTS(CheckIndex$Options)[] = {
          { Py_tp_methods, t_CheckIndex$Options__methods_ },
          { Py_tp_init, (void *) t_CheckIndex$Options_init_ },
          { Py_tp_getset, t_CheckIndex$Options__fields_ },
          { 0, NULL }
        };

        static PyType_Def *PY_TYPE_BASES(CheckIndex$Options)[] = {
          &PY_TYPE_DEF(::java::lang::Object),
          NULL
        };

        DEFINE_TYPE(CheckIndex$Options, t_CheckIndex$Options, CheckIndex$Options);

        void t_CheckIndex$Options::install(PyObject *module)
        {
          installType(&PY_TYPE(CheckIndex$Options), &PY_TYPE_DEF(CheckIndex$Options), module, "CheckIndex$Options", 0);
        }

        void t_CheckIndex$Options::initialize(PyObject *module)
        {
          PyObject_SetAttrString((PyObject *) PY_TYPE(CheckIndex$Options), "class_", make_descriptor(CheckIndex$Options::initializeClass, 1));
          PyObject_SetAttrString((PyObject *) PY_TYPE(CheckIndex$Options), "wrapfn_", make_descriptor(t_CheckIndex$Options::wrap_jobject));
          PyObject_SetAttrString((PyObject *) PY_TYPE(CheckIndex$Options), "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_CheckIndex$Options_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, CheckIndex$Options::initializeClass, 1)))
            return NULL;
          return t_CheckIndex$Options::wrap_Object(CheckIndex$Options(((t_CheckIndex$Options *) arg)->object.this$));
        }
        static PyObject *t_CheckIndex$Options_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, CheckIndex$Options::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_CheckIndex$Options_init_(t_CheckIndex$Options *self, PyObject *args, PyObject *kwds)
        {
          CheckIndex$Options object((jobject) NULL);

          INT_CALL(object = CheckIndex$Options());
          self->object = object;

          return 0;
        }

        static PyObject *t_CheckIndex$Options_getDirImpl(t_CheckIndex$Options *self)
        {
          ::java::lang::String result((jobject) NULL);
          OBJ_CALL(result = self->object.getDirImpl());
          return j2p(result);
        }

        static PyObject *t_CheckIndex$Options_getIndexPath(t_CheckIndex$Options *self)
        {
          ::java::lang::String result((jobject) NULL);
          OBJ_CALL(result = self->object.getIndexPath());
          return j2p(result);
        }

        static PyObject *t_CheckIndex$Options_setOut(t_CheckIndex$Options *self, PyObject *arg)
        {
          ::java::io::PrintStream a0((jobject) NULL);

          if (!parseArg(arg, "k", ::java::io::PrintStream::initializeClass, &a0))
          {
            OBJ_CALL(self->object.setOut(a0));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "setOut", arg);
          return NULL;
        }

        static PyObject *t_CheckIndex$Options_get__dirImpl(t_CheckIndex$Options *self, void *data)
        {
          ::java::lang::String value((jobject) NULL);
          OBJ_CALL(value = self->object.getDirImpl());
          return j2p(value);
        }

        static PyObject *t_CheckIndex$Options_get__indexPath(t_CheckIndex$Options *self, void *data)
        {
          ::java::lang::String value((jobject) NULL);
          OBJ_CALL(value = self->object.getIndexPath());
          return j2p(value);
        }

        static int t_CheckIndex$Options_set__out(t_CheckIndex$Options *self, PyObject *arg, void *data)
        {
          {
            ::java::io::PrintStream value((jobject) NULL);
            if (!parseArg(arg, "k", ::java::io::PrintStream::initializeClass, &value))
            {
              INT_CALL(self->object.setOut(value));
              return 0;
            }
          }
          PyErr_SetArgsError((PyObject *) self, "out", arg);
          return -1;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/util/packed/AbstractPagedMutable.h"
#include "org/apache/lucene/util/packed/AbstractPagedMutable.h"
#include "java/lang/String.h"
#include "org/apache/lucene/util/Accountable.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        namespace packed {

          ::java::lang::Class *AbstractPagedMutable::class$ = NULL;
          jmethodID *AbstractPagedMutable::mids$ = NULL;
          bool AbstractPagedMutable::live$ = false;

          jclass AbstractPagedMutable::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/util/packed/AbstractPagedMutable");

              mids$ = new jmethodID[max_mid];
              mids$[mid_get_d711eecdc469624a] = env->getMethodID(cls, "get", "(J)J");
              mids$[mid_grow_80a4e5c341ee4933] = env->getMethodID(cls, "grow", "()Lorg/apache/lucene/util/packed/AbstractPagedMutable;");
              mids$[mid_grow_84e4575b465a4b39] = env->getMethodID(cls, "grow", "(J)Lorg/apache/lucene/util/packed/AbstractPagedMutable;");
              mids$[mid_ramBytesUsed_2e5ae9edcb9b072f] = env->getMethodID(cls, "ramBytesUsed", "()J");
              mids$[mid_resize_84e4575b465a4b39] = env->getMethodID(cls, "resize", "(J)Lorg/apache/lucene/util/packed/AbstractPagedMutable;");
              mids$[mid_set_0248b6e53dc27ea3] = env->getMethodID(cls, "set", "(JJ)V");
              mids$[mid_size_2e5ae9edcb9b072f] = env->getMethodID(cls, "size", "()J");
              mids$[mid_toString_db9b55ba01e03e4b] = env->getMethodID(cls, "toString", "()Ljava/lang/String;");
              mids$[mid_baseRamBytesUsed_2e5ae9edcb9b072f] = env->getMethodID(cls, "baseRamBytesUsed", "()J");
              mids$[mid_newMutable_15c7bed2e0f3a021] = env->getMethodID(cls, "newMutable", "(II)Lorg/apache/lucene/util/packed/PackedInts$Mutable;");
              mids$[mid_fillPages_f2cc1bce94666404] = env->getMethodID(cls, "fillPages", "()V");
              mids$[mid_newUnfilledCopy_84e4575b465a4b39] = env->getMethodID(cls, "newUnfilledCopy", "(J)Lorg/apache/lucene/util/packed/AbstractPagedMutable;");

              class$ = new ::java::lang::Class(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          jlong AbstractPagedMutable::get(jlong a0) const
          {
            return env->callLongMethod(this$, mids$[mid_get_d711eecdc469624a], a0);
          }

          AbstractPagedMutable AbstractPagedMutable::grow() const
          {
            return AbstractPagedMutable(env->callObjectMethod(this$, mids$[mid_grow_80a4e5c341ee4933]));
          }

          AbstractPagedMutable AbstractPagedMutable::grow(jlong a0) const
          {
            return AbstractPagedMutable(env->callObjectMethod(this$, mids$[mid_grow_84e4575b465a4b39], a0));
          }

          jlong AbstractPagedMutable::ramBytesUsed() const
          {
            return env->callLongMethod(this$, mids$[mid_ramBytesUsed_2e5ae9edcb9b072f]);
          }

          AbstractPagedMutable AbstractPagedMutable::resize(jlong a0) const
          {
            return AbstractPagedMutable(env->callObjectMethod(this$, mids$[mid_resize_84e4575b465a4b39], a0));
          }

          void AbstractPagedMutable::set(jlong a0, jlong a1) const
          {
            env->callVoidMethod(this$, mids$[mid_set_0248b6e53dc27ea3], a0, a1);
          }

          jlong AbstractPagedMutable::size() const
          {
            return env->callLongMethod(this$, mids$[mid_size_2e5ae9edcb9b072f]);
          }

          ::java::lang::String AbstractPagedMutable::toString() const
          {
            return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_db9b55ba01e03e4b]));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        namespace packed {
          static PyObject *t_AbstractPagedMutable_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_AbstractPagedMutable_instance_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_AbstractPagedMutable_of_(t_AbstractPagedMutable *self, PyObject *args);
          static PyObject *t_AbstractPagedMutable_get(t_AbstractPagedMutable *self, PyObject *args);
          static PyObject *t_AbstractPagedMutable_grow(t_AbstractPagedMutable *self, PyObject *args);
          static PyObject *t_AbstractPagedMutable_ramBytesUsed(t_AbstractPagedMutable *self);
          static PyObject *t_AbstractPagedMutable_resize(t_AbstractPagedMutable *self, PyObject *arg);
          static PyObject *t_AbstractPagedMutable_set(t_AbstractPagedMutable *self, PyObject *args);
          static PyObject *t_AbstractPagedMutable_size(t_AbstractPagedMutable *self);
          static PyObject *t_AbstractPagedMutable_toString(t_AbstractPagedMutable *self, PyObject *args);
          static PyObject *t_AbstractPagedMutable_get__parameters_(t_AbstractPagedMutable *self, void *data);
          static PyGetSetDef t_AbstractPagedMutable__fields_[] = {
            DECLARE_GET_FIELD(t_AbstractPagedMutable, parameters_),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_AbstractPagedMutable__methods_[] = {
            DECLARE_METHOD(t_AbstractPagedMutable, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_AbstractPagedMutable, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_AbstractPagedMutable, of_, METH_VARARGS),
            DECLARE_METHOD(t_AbstractPagedMutable, get, METH_VARARGS),
            DECLARE_METHOD(t_AbstractPagedMutable, grow, METH_VARARGS),
            DECLARE_METHOD(t_AbstractPagedMutable, ramBytesUsed, METH_NOARGS),
            DECLARE_METHOD(t_AbstractPagedMutable, resize, METH_O),
            DECLARE_METHOD(t_AbstractPagedMutable, set, METH_VARARGS),
            DECLARE_METHOD(t_AbstractPagedMutable, size, METH_NOARGS),
            DECLARE_METHOD(t_AbstractPagedMutable, toString, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          static PyType_Slot PY_TYPE_SLOTS(AbstractPagedMutable)[] = {
            { Py_tp_methods, t_AbstractPagedMutable__methods_ },
            { Py_tp_init, (void *) abstract_init },
            { Py_tp_getset, t_AbstractPagedMutable__fields_ },
            { 0, NULL }
          };

          static PyType_Def *PY_TYPE_BASES(AbstractPagedMutable)[] = {
            &PY_TYPE_DEF(::org::apache::lucene::util::LongValues),
            NULL
          };

          DEFINE_TYPE(AbstractPagedMutable, t_AbstractPagedMutable, AbstractPagedMutable);
          PyObject *t_AbstractPagedMutable::wrap_Object(const AbstractPagedMutable& object, PyTypeObject *p0)
          {
            PyObject *obj = t_AbstractPagedMutable::wrap_Object(object);
            if (obj != NULL && obj != Py_None)
            {
              t_AbstractPagedMutable *self = (t_AbstractPagedMutable *) obj;
              self->parameters[0] = p0;
            }
            return obj;
          }

          PyObject *t_AbstractPagedMutable::wrap_jobject(const jobject& object, PyTypeObject *p0)
          {
            PyObject *obj = t_AbstractPagedMutable::wrap_jobject(object);
            if (obj != NULL && obj != Py_None)
            {
              t_AbstractPagedMutable *self = (t_AbstractPagedMutable *) obj;
              self->parameters[0] = p0;
            }
            return obj;
          }

          void t_AbstractPagedMutable::install(PyObject *module)
          {
            installType(&PY_TYPE(AbstractPagedMutable), &PY_TYPE_DEF(AbstractPagedMutable), module, "AbstractPagedMutable", 0);
          }

          void t_AbstractPagedMutable::initialize(PyObject *module)
          {
            PyObject_SetAttrString((PyObject *) PY_TYPE(AbstractPagedMutable), "class_", make_descriptor(AbstractPagedMutable::initializeClass, 1));
            PyObject_SetAttrString((PyObject *) PY_TYPE(AbstractPagedMutable), "wrapfn_", make_descriptor(t_AbstractPagedMutable::wrap_jobject));
            PyObject_SetAttrString((PyObject *) PY_TYPE(AbstractPagedMutable), "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_AbstractPagedMutable_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, AbstractPagedMutable::initializeClass, 1)))
              return NULL;
            return t_AbstractPagedMutable::wrap_Object(AbstractPagedMutable(((t_AbstractPagedMutable *) arg)->object.this$));
          }
          static PyObject *t_AbstractPagedMutable_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, AbstractPagedMutable::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static PyObject *t_AbstractPagedMutable_of_(t_AbstractPagedMutable *self, PyObject *args)
          {
            if (!parseArg(args, "T", 1, &(self->parameters)))
              Py_RETURN_SELF;
            return PyErr_SetArgsError((PyObject *) self, "of_", args);
          }

          static PyObject *t_AbstractPagedMutable_get(t_AbstractPagedMutable *self, PyObject *args)
          {
            jlong a0;
            jlong result;

            if (!parseArgs(args, "J", &a0))
            {
              OBJ_CALL(result = self->object.get(a0));
              return PyLong_FromLongLong((PY_LONG_LONG) result);
            }

            return callSuper(PY_TYPE(AbstractPagedMutable), (PyObject *) self, "get", args, 2);
          }

          static PyObject *t_AbstractPagedMutable_grow(t_AbstractPagedMutable *self, PyObject *args)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 0:
              {
                AbstractPagedMutable result((jobject) NULL);
                OBJ_CALL(result = self->object.grow());
                return self->parameters[0] != NULL ? wrapType(self->parameters[0], result.this$) : t_AbstractPagedMutable::wrap_Object(result);
              }
              break;
             case 1:
              {
                jlong a0;
                AbstractPagedMutable result((jobject) NULL);

                if (!parseArgs(args, "J", &a0))
                {
                  OBJ_CALL(result = self->object.grow(a0));
                  return self->parameters[0] != NULL ? wrapType(self->parameters[0], result.this$) : t_AbstractPagedMutable::wrap_Object(result);
                }
              }
            }

            PyErr_SetArgsError((PyObject *) self, "grow", args);
            return NULL;
          }

          static PyObject *t_AbstractPagedMutable_ramBytesUsed(t_AbstractPagedMutable *self)
          {
            jlong result;
            OBJ_CALL(result = self->object.ramBytesUsed());
            return PyLong_FromLongLong((PY_LONG_LONG) result);
          }

          static PyObject *t_AbstractPagedMutable_resize(t_AbstractPagedMutable *self, PyObject *arg)
          {
            jlong a0;
            AbstractPagedMutable result((jobject) NULL);

            if (!parseArg(arg, "J", &a0))
            {
              OBJ_CALL(result = self->object.resize(a0));
              return self->parameters[0] != NULL ? wrapType(self->parameters[0], result.this$) : t_AbstractPagedMutable::wrap_Object(result);
            }

            PyErr_SetArgsError((PyObject *) self, "resize", arg);
            return NULL;
          }

          static PyObject *t_AbstractPagedMutable_set(t_AbstractPagedMutable *self, PyObject *args)
          {
            jlong a0;
            jlong a1;

            if (!parseArgs(args, "JJ", &a0, &a1))
            {
              OBJ_CALL(self->object.set(a0, a1));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError((PyObject *) self, "set", args);
            return NULL;
          }

          static PyObject *t_AbstractPagedMutable_size(t_AbstractPagedMutable *self)
          {
            jlong result;
            OBJ_CALL(result = self->object.size());
            return PyLong_FromLongLong((PY_LONG_LONG) result);
          }

          static PyObject *t_AbstractPagedMutable_toString(t_AbstractPagedMutable *self, PyObject *args)
          {
            ::java::lang::String result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.toString());
              return j2p(result);
            }

            return callSuper(PY_TYPE(AbstractPagedMutable), (PyObject *) self, "toString", args, 2);
          }
          static PyObject *t_AbstractPagedMutable_get__parameters_(t_AbstractPagedMutable *self, void *data)
          {
            return typeParameters(self->parameters, sizeof(self->parameters));
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/codecs/uniformsplit/DeltaBaseTermStateSerializer.h"
#include "org/apache/lucene/store/DataInput.h"
#include "org/apache/lucene/util/Accountable.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/index/TermState.h"
#include "org/apache/lucene/store/DataOutput.h"
#include "org/apache/lucene/index/FieldInfo.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/codecs/BlockTermState.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace codecs {
        namespace uniformsplit {

          ::java::lang::Class *DeltaBaseTermStateSerializer::class$ = NULL;
          jmethodID *DeltaBaseTermStateSerializer::mids$ = NULL;
          bool DeltaBaseTermStateSerializer::live$ = false;

          jclass DeltaBaseTermStateSerializer::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/codecs/uniformsplit/DeltaBaseTermStateSerializer");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_f2cc1bce94666404] = env->getMethodID(cls, "<init>", "()V");
              mids$[mid_getBaseDocStartFP_2e5ae9edcb9b072f] = env->getMethodID(cls, "getBaseDocStartFP", "()J");
              mids$[mid_getBasePayStartFP_2e5ae9edcb9b072f] = env->getMethodID(cls, "getBasePayStartFP", "()J");
              mids$[mid_getBasePosStartFP_2e5ae9edcb9b072f] = env->getMethodID(cls, "getBasePosStartFP", "()J");
              mids$[mid_ramBytesUsed_2e5ae9edcb9b072f] = env->getMethodID(cls, "ramBytesUsed", "()J");
              mids$[mid_ramBytesUsed_48fe61a8eb679d1f] = env->getStaticMethodID(cls, "ramBytesUsed", "(Lorg/apache/lucene/index/TermState;)J");
              mids$[mid_readTermState_0afccee58487d7c8] = env->getMethodID(cls, "readTermState", "(JJJLorg/apache/lucene/store/DataInput;Lorg/apache/lucene/index/FieldInfo;Lorg/apache/lucene/codecs/BlockTermState;)Lorg/apache/lucene/codecs/BlockTermState;");
              mids$[mid_resetBaseStartFP_f2cc1bce94666404] = env->getMethodID(cls, "resetBaseStartFP", "()V");
              mids$[mid_writeTermState_3b5e029ab7788170] = env->getMethodID(cls, "writeTermState", "(Lorg/apache/lucene/store/DataOutput;Lorg/apache/lucene/index/FieldInfo;Lorg/apache/lucene/codecs/BlockTermState;)V");
              mids$[mid_reset_11be21c1dbc2e5c5] = env->getMethodID(cls, "reset", "(Lorg/apache/lucene/codecs/lucene84/Lucene84PostingsFormat$IntBlockTermState;)Lorg/apache/lucene/codecs/lucene84/Lucene84PostingsFormat$IntBlockTermState;");

              class$ = new ::java::lang::Class(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          DeltaBaseTermStateSerializer::DeltaBaseTermStateSerializer() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_f2cc1bce94666404)) {}

          jlong DeltaBaseTermStateSerializer::getBaseDocStartFP() const
          {
            return env->callLongMethod(this$, mids$[mid_getBaseDocStartFP_2e5ae9edcb9b072f]);
          }

          jlong DeltaBaseTermStateSerializer::getBasePayStartFP() const
          {
            return env->callLongMethod(this$, mids$[mid_getBasePayStartFP_2e5ae9edcb9b072f]);
          }

          jlong DeltaBaseTermStateSerializer::getBasePosStartFP() const
          {
            return env->callLongMethod(this$, mids$[mid_getBasePosStartFP_2e5ae9edcb9b072f]);
          }

          jlong DeltaBaseTermStateSerializer::ramBytesUsed() const
          {
            return env->callLongMethod(this$, mids$[mid_ramBytesUsed_2e5ae9edcb9b072f]);
          }

          jlong DeltaBaseTermStateSerializer::ramBytesUsed(const ::org::apache::lucene::index::TermState & a0)
          {
            jclass cls = env->getClass(initializeClass);
            return env->callStaticLongMethod(cls, mids$[mid_ramBytesUsed_48fe61a8eb679d1f], a0.this$);
          }

          ::org::apache::lucene::codecs::BlockTermState DeltaBaseTermStateSerializer::readTermState(jlong a0, jlong a1, jlong a2, const ::org::apache::lucene::store::DataInput & a3, const ::org::apache::lucene::index::FieldInfo & a4, const ::org::apache::lucene::codecs::BlockTermState & a5) const
          {
            return ::org::apache::lucene::codecs::BlockTermState(env->callObjectMethod(this$, mids$[mid_readTermState_0afccee58487d7c8], a0, a1, a2, a3.this$, a4.this$, a5.this$));
          }

          void DeltaBaseTermStateSerializer::resetBaseStartFP() const
          {
            env->callVoidMethod(this$, mids$[mid_resetBaseStartFP_f2cc1bce94666404]);
          }

          void DeltaBaseTermStateSerializer::writeTermState(const ::org::apache::lucene::store::DataOutput & a0, const ::org::apache::lucene::index::FieldInfo & a1, const ::org::apache::lucene::codecs::BlockTermState & a2) const
          {
            env->callVoidMethod(this$, mids$[mid_writeTermState_3b5e029ab7788170], a0.this$, a1.this$, a2.this$);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace codecs {
        namespace uniformsplit {
          static PyObject *t_DeltaBaseTermStateSerializer_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_DeltaBaseTermStateSerializer_instance_(PyTypeObject *type, PyObject *arg);
          static int t_DeltaBaseTermStateSerializer_init_(t_DeltaBaseTermStateSerializer *self, PyObject *args, PyObject *kwds);
          static PyObject *t_DeltaBaseTermStateSerializer_getBaseDocStartFP(t_DeltaBaseTermStateSerializer *self);
          static PyObject *t_DeltaBaseTermStateSerializer_getBasePayStartFP(t_DeltaBaseTermStateSerializer *self);
          static PyObject *t_DeltaBaseTermStateSerializer_getBasePosStartFP(t_DeltaBaseTermStateSerializer *self);
          static PyObject *t_DeltaBaseTermStateSerializer_ramBytesUsed(t_DeltaBaseTermStateSerializer *self);
          static PyObject *t_DeltaBaseTermStateSerializer_ramBytesUsed_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_DeltaBaseTermStateSerializer_readTermState(t_DeltaBaseTermStateSerializer *self, PyObject *args);
          static PyObject *t_DeltaBaseTermStateSerializer_resetBaseStartFP(t_DeltaBaseTermStateSerializer *self);
          static PyObject *t_DeltaBaseTermStateSerializer_writeTermState(t_DeltaBaseTermStateSerializer *self, PyObject *args);
          static PyObject *t_DeltaBaseTermStateSerializer_get__baseDocStartFP(t_DeltaBaseTermStateSerializer *self, void *data);
          static PyObject *t_DeltaBaseTermStateSerializer_get__basePayStartFP(t_DeltaBaseTermStateSerializer *self, void *data);
          static PyObject *t_DeltaBaseTermStateSerializer_get__basePosStartFP(t_DeltaBaseTermStateSerializer *self, void *data);
          static PyGetSetDef t_DeltaBaseTermStateSerializer__fields_[] = {
            DECLARE_GET_FIELD(t_DeltaBaseTermStateSerializer, baseDocStartFP),
            DECLARE_GET_FIELD(t_DeltaBaseTermStateSerializer, basePayStartFP),
            DECLARE_GET_FIELD(t_DeltaBaseTermStateSerializer, basePosStartFP),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_DeltaBaseTermStateSerializer__methods_[] = {
            DECLARE_METHOD(t_DeltaBaseTermStateSerializer, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_DeltaBaseTermStateSerializer, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_DeltaBaseTermStateSerializer, getBaseDocStartFP, METH_NOARGS),
            DECLARE_METHOD(t_DeltaBaseTermStateSerializer, getBasePayStartFP, METH_NOARGS),
            DECLARE_METHOD(t_DeltaBaseTermStateSerializer, getBasePosStartFP, METH_NOARGS),
            DECLARE_METHOD(t_DeltaBaseTermStateSerializer, ramBytesUsed, METH_NOARGS),
            DECLARE_METHOD(t_DeltaBaseTermStateSerializer, ramBytesUsed_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_DeltaBaseTermStateSerializer, readTermState, METH_VARARGS),
            DECLARE_METHOD(t_DeltaBaseTermStateSerializer, resetBaseStartFP, METH_NOARGS),
            DECLARE_METHOD(t_DeltaBaseTermStateSerializer, writeTermState, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          static PyType_Slot PY_TYPE_SLOTS(DeltaBaseTermStateSerializer)[] = {
            { Py_tp_methods, t_DeltaBaseTermStateSerializer__methods_ },
            { Py_tp_init, (void *) t_DeltaBaseTermStateSerializer_init_ },
            { Py_tp_getset, t_DeltaBaseTermStateSerializer__fields_ },
            { 0, NULL }
          };

          static PyType_Def *PY_TYPE_BASES(DeltaBaseTermStateSerializer)[] = {
            &PY_TYPE_DEF(::java::lang::Object),
            NULL
          };

          DEFINE_TYPE(DeltaBaseTermStateSerializer, t_DeltaBaseTermStateSerializer, DeltaBaseTermStateSerializer);

          void t_DeltaBaseTermStateSerializer::install(PyObject *module)
          {
            installType(&PY_TYPE(DeltaBaseTermStateSerializer), &PY_TYPE_DEF(DeltaBaseTermStateSerializer), module, "DeltaBaseTermStateSerializer", 0);
          }

          void t_DeltaBaseTermStateSerializer::initialize(PyObject *module)
          {
            PyObject_SetAttrString((PyObject *) PY_TYPE(DeltaBaseTermStateSerializer), "class_", make_descriptor(DeltaBaseTermStateSerializer::initializeClass, 1));
            PyObject_SetAttrString((PyObject *) PY_TYPE(DeltaBaseTermStateSerializer), "wrapfn_", make_descriptor(t_DeltaBaseTermStateSerializer::wrap_jobject));
            PyObject_SetAttrString((PyObject *) PY_TYPE(DeltaBaseTermStateSerializer), "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_DeltaBaseTermStateSerializer_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, DeltaBaseTermStateSerializer::initializeClass, 1)))
              return NULL;
            return t_DeltaBaseTermStateSerializer::wrap_Object(DeltaBaseTermStateSerializer(((t_DeltaBaseTermStateSerializer *) arg)->object.this$));
          }
          static PyObject *t_DeltaBaseTermStateSerializer_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, DeltaBaseTermStateSerializer::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_DeltaBaseTermStateSerializer_init_(t_DeltaBaseTermStateSerializer *self, PyObject *args, PyObject *kwds)
          {
            DeltaBaseTermStateSerializer object((jobject) NULL);

            INT_CALL(object = DeltaBaseTermStateSerializer());
            self->object = object;

            return 0;
          }

          static PyObject *t_DeltaBaseTermStateSerializer_getBaseDocStartFP(t_DeltaBaseTermStateSerializer *self)
          {
            jlong result;
            OBJ_CALL(result = self->object.getBaseDocStartFP());
            return PyLong_FromLongLong((PY_LONG_LONG) result);
          }

          static PyObject *t_DeltaBaseTermStateSerializer_getBasePayStartFP(t_DeltaBaseTermStateSerializer *self)
          {
            jlong result;
            OBJ_CALL(result = self->object.getBasePayStartFP());
            return PyLong_FromLongLong((PY_LONG_LONG) result);
          }

          static PyObject *t_DeltaBaseTermStateSerializer_getBasePosStartFP(t_DeltaBaseTermStateSerializer *self)
          {
            jlong result;
            OBJ_CALL(result = self->object.getBasePosStartFP());
            return PyLong_FromLongLong((PY_LONG_LONG) result);
          }

          static PyObject *t_DeltaBaseTermStateSerializer_ramBytesUsed(t_DeltaBaseTermStateSerializer *self)
          {
            jlong result;
            OBJ_CALL(result = self->object.ramBytesUsed());
            return PyLong_FromLongLong((PY_LONG_LONG) result);
          }

          static PyObject *t_DeltaBaseTermStateSerializer_ramBytesUsed_(PyTypeObject *type, PyObject *arg)
          {
            ::org::apache::lucene::index::TermState a0((jobject) NULL);
            jlong result;

            if (!parseArg(arg, "k", ::org::apache::lucene::index::TermState::initializeClass, &a0))
            {
              OBJ_CALL(result = ::org::apache::lucene::codecs::uniformsplit::DeltaBaseTermStateSerializer::ramBytesUsed(a0));
              return PyLong_FromLongLong((PY_LONG_LONG) result);
            }

            PyErr_SetArgsError(type, "ramBytesUsed_", arg);
            return NULL;
          }

          static PyObject *t_DeltaBaseTermStateSerializer_readTermState(t_DeltaBaseTermStateSerializer *self, PyObject *args)
          {
            jlong a0;
            jlong a1;
            jlong a2;
            ::org::apache::lucene::store::DataInput a3((jobject) NULL);
            ::org::apache::lucene::index::FieldInfo a4((jobject) NULL);
            ::org::apache::lucene::codecs::BlockTermState a5((jobject) NULL);
            ::org::apache::lucene::codecs::BlockTermState result((jobject) NULL);

            if (!parseArgs(args, "JJJkkk", ::org::apache::lucene::store::DataInput::initializeClass, ::org::apache::lucene::index::FieldInfo::initializeClass, ::org::apache::lucene::codecs::BlockTermState::initializeClass, &a0, &a1, &a2, &a3, &a4, &a5))
            {
              OBJ_CALL(result = self->object.readTermState(a0, a1, a2, a3, a4, a5));
              return ::org::apache::lucene::codecs::t_BlockTermState::wrap_Object(result);
            }

            PyErr_SetArgsError((PyObject *) self, "readTermState", args);
            return NULL;
          }

          static PyObject *t_DeltaBaseTermStateSerializer_resetBaseStartFP(t_DeltaBaseTermStateSerializer *self)
          {
            OBJ_CALL(self->object.resetBaseStartFP());
            Py_RETURN_NONE;
          }

          static PyObject *t_DeltaBaseTermStateSerializer_writeTermState(t_DeltaBaseTermStateSerializer *self, PyObject *args)
          {
            ::org::apache::lucene::store::DataOutput a0((jobject) NULL);
            ::org::apache::lucene::index::FieldInfo a1((jobject) NULL);
            ::org::apache::lucene::codecs::BlockTermState a2((jobject) NULL);

            if (!parseArgs(args, "kkk", ::org::apache::lucene::store::DataOutput::initializeClass, ::org::apache::lucene::index::FieldInfo::initializeClass, ::org::apache::lucene::codecs::BlockTermState::initializeClass, &a0, &a1, &a2))
            {
              OBJ_CALL(self->object.writeTermState(a0, a1, a2));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError((PyObject *) self, "writeTermState", args);
            return NULL;
          }

          static PyObject *t_DeltaBaseTermStateSerializer_get__baseDocStartFP(t_DeltaBaseTermStateSerializer *self, void *data)
          {
            jlong value;
            OBJ_CALL(value = self->object.getBaseDocStartFP());
            return PyLong_FromLongLong((PY_LONG_LONG) value);
          }

          static PyObject *t_DeltaBaseTermStateSerializer_get__basePayStartFP(t_DeltaBaseTermStateSerializer *self, void *data)
          {
            jlong value;
            OBJ_CALL(value = self->object.getBasePayStartFP());
            return PyLong_FromLongLong((PY_LONG_LONG) value);
          }

          static PyObject *t_DeltaBaseTermStateSerializer_get__basePosStartFP(t_DeltaBaseTermStateSerializer *self, void *data)
          {
            jlong value;
            OBJ_CALL(value = self->object.getBasePosStartFP());
            return PyLong_FromLongLong((PY_LONG_LONG) value);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/cz/CzechStemFilterFactory.h"
#include "java/util/Map.h"
#include "java/lang/String.h"
#include "org/apache/lucene/analysis/TokenStream.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace cz {

          ::java::lang::Class *CzechStemFilterFactory::class$ = NULL;
          jmethodID *CzechStemFilterFactory::mids$ = NULL;
          bool CzechStemFilterFactory::live$ = false;
          ::java::lang::String *CzechStemFilterFactory::NAME = NULL;

          jclass CzechStemFilterFactory::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/cz/CzechStemFilterFactory");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_408bd889ee3beae5] = env->getMethodID(cls, "<init>", "(Ljava/util/Map;)V");
              mids$[mid_create_6de1e28d9d10cd9e] = env->getMethodID(cls, "create", "(Lorg/apache/lucene/analysis/TokenStream;)Lorg/apache/lucene/analysis/TokenStream;");

              class$ = new ::java::lang::Class(cls);
              cls = (jclass) class$->this$;

              NAME = new ::java::lang::String(env->getStaticObjectField(cls, "NAME", "Ljava/lang/String;"));
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          CzechStemFilterFactory::CzechStemFilterFactory(const ::java::util::Map & a0) : ::org::apache::lucene::analysis::util::TokenFilterFactory(env->newObject(initializeClass, &mids$, mid_init$_408bd889ee3beae5, a0.this$)) {}

          ::org::apache::lucene::analysis::TokenStream CzechStemFilterFactory::create(const ::org::apache::lucene::analysis::TokenStream & a0) const
          {
            return ::org::apache::lucene::analysis::TokenStream(env->callObjectMethod(this$, mids$[mid_create_6de1e28d9d10cd9e], a0.this$));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace cz {
          static PyObject *t_CzechStemFilterFactory_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_CzechStemFilterFactory_instance_(PyTypeObject *type, PyObject *arg);
          static int t_CzechStemFilterFactory_init_(t_CzechStemFilterFactory *self, PyObject *args, PyObject *kwds);
          static PyObject *t_CzechStemFilterFactory_create(t_CzechStemFilterFactory *self, PyObject *args);

          static PyMethodDef t_CzechStemFilterFactory__methods_[] = {
            DECLARE_METHOD(t_CzechStemFilterFactory, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_CzechStemFilterFactory, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_CzechStemFilterFactory, create, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          static PyType_Slot PY_TYPE_SLOTS(CzechStemFilterFactory)[] = {
            { Py_tp_methods, t_CzechStemFilterFactory__methods_ },
            { Py_tp_init, (void *) t_CzechStemFilterFactory_init_ },
            { 0, NULL }
          };

          static PyType_Def *PY_TYPE_BASES(CzechStemFilterFactory)[] = {
            &PY_TYPE_DEF(::org::apache::lucene::analysis::util::TokenFilterFactory),
            NULL
          };

          DEFINE_TYPE(CzechStemFilterFactory, t_CzechStemFilterFactory, CzechStemFilterFactory);

          void t_CzechStemFilterFactory::install(PyObject *module)
          {
            installType(&PY_TYPE(CzechStemFilterFactory), &PY_TYPE_DEF(CzechStemFilterFactory), module, "CzechStemFilterFactory", 0);
          }

          void t_CzechStemFilterFactory::initialize(PyObject *module)
          {
            PyObject_SetAttrString((PyObject *) PY_TYPE(CzechStemFilterFactory), "class_", make_descriptor(CzechStemFilterFactory::initializeClass, 1));
            PyObject_SetAttrString((PyObject *) PY_TYPE(CzechStemFilterFactory), "wrapfn_", make_descriptor(t_CzechStemFilterFactory::wrap_jobject));
            PyObject_SetAttrString((PyObject *) PY_TYPE(CzechStemFilterFactory), "boxfn_", make_descriptor(boxObject));
            env->getClass(CzechStemFilterFactory::initializeClass);
            PyObject_SetAttrString((PyObject *) PY_TYPE(CzechStemFilterFactory), "NAME", make_descriptor(j2p(*CzechStemFilterFactory::NAME)));
          }

          static PyObject *t_CzechStemFilterFactory_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, CzechStemFilterFactory::initializeClass, 1)))
              return NULL;
            return t_CzechStemFilterFactory::wrap_Object(CzechStemFilterFactory(((t_CzechStemFilterFactory *) arg)->object.this$));
          }
          static PyObject *t_CzechStemFilterFactory_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, CzechStemFilterFactory::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_CzechStemFilterFactory_init_(t_CzechStemFilterFactory *self, PyObject *args, PyObject *kwds)
          {
            ::java::util::Map a0((jobject) NULL);
            PyTypeObject **p0;
            CzechStemFilterFactory object((jobject) NULL);

            if (!parseArgs(args, "K", ::java::util::Map::initializeClass, &a0, &p0, ::java::util::t_Map::parameters_))
            {
              INT_CALL(object = CzechStemFilterFactory(a0));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_CzechStemFilterFactory_create(t_CzechStemFilterFactory *self, PyObject *args)
          {
            ::org::apache::lucene::analysis::TokenStream a0((jobject) NULL);
            ::org::apache::lucene::analysis::TokenStream result((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::analysis::TokenStream::initializeClass, &a0))
            {
              OBJ_CALL(result = self->object.create(a0));
              return ::org::apache::lucene::analysis::t_TokenStream::wrap_Object(result);
            }

            return callSuper(PY_TYPE(CzechStemFilterFactory), (PyObject *) self, "create", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/ja/tokenattributes/PartOfSpeechAttribute.h"
#include "java/lang/String.h"
#include "org/apache/lucene/analysis/ja/Token.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace ja {
          namespace tokenattributes {

            ::java::lang::Class *PartOfSpeechAttribute::class$ = NULL;
            jmethodID *PartOfSpeechAttribute::mids$ = NULL;
            bool PartOfSpeechAttribute::live$ = false;

            jclass PartOfSpeechAttribute::initializeClass(bool getOnly)
            {
              if (getOnly)
                return (jclass) (live$ ? class$->this$ : NULL);
              if (class$ == NULL)
              {
                jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/ja/tokenattributes/PartOfSpeechAttribute");

                mids$ = new jmethodID[max_mid];
                mids$[mid_getPartOfSpeech_db9b55ba01e03e4b] = env->getMethodID(cls, "getPartOfSpeech", "()Ljava/lang/String;");
                mids$[mid_setToken_e7eb8cf5a63e4354] = env->getMethodID(cls, "setToken", "(Lorg/apache/lucene/analysis/ja/Token;)V");

                class$ = new ::java::lang::Class(cls);
                live$ = true;
              }
              return (jclass) class$->this$;
            }

            ::java::lang::String PartOfSpeechAttribute::getPartOfSpeech() const
            {
              return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_getPartOfSpeech_db9b55ba01e03e4b]));
            }

            void PartOfSpeechAttribute::setToken(const ::org::apache::lucene::analysis::ja::Token & a0) const
            {
              env->callVoidMethod(this$, mids$[mid_setToken_e7eb8cf5a63e4354], a0.this$);
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace ja {
          namespace tokenattributes {
            static PyObject *t_PartOfSpeechAttribute_cast_(PyTypeObject *type, PyObject *arg);
            static PyObject *t_PartOfSpeechAttribute_instance_(PyTypeObject *type, PyObject *arg);
            static PyObject *t_PartOfSpeechAttribute_getPartOfSpeech(t_PartOfSpeechAttribute *self);
            static PyObject *t_PartOfSpeechAttribute_setToken(t_PartOfSpeechAttribute *self, PyObject *arg);
            static PyObject *t_PartOfSpeechAttribute_get__partOfSpeech(t_PartOfSpeechAttribute *self, void *data);
            static int t_PartOfSpeechAttribute_set__token(t_PartOfSpeechAttribute *self, PyObject *arg, void *data);
            static PyGetSetDef t_PartOfSpeechAttribute__fields_[] = {
              DECLARE_GET_FIELD(t_PartOfSpeechAttribute, partOfSpeech),
              DECLARE_SET_FIELD(t_PartOfSpeechAttribute, token),
              { NULL, NULL, NULL, NULL, NULL }
            };

            static PyMethodDef t_PartOfSpeechAttribute__methods_[] = {
              DECLARE_METHOD(t_PartOfSpeechAttribute, cast_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_PartOfSpeechAttribute, instance_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_PartOfSpeechAttribute, getPartOfSpeech, METH_NOARGS),
              DECLARE_METHOD(t_PartOfSpeechAttribute, setToken, METH_O),
              { NULL, NULL, 0, NULL }
            };

            static PyType_Slot PY_TYPE_SLOTS(PartOfSpeechAttribute)[] = {
              { Py_tp_methods, t_PartOfSpeechAttribute__methods_ },
              { Py_tp_init, (void *) abstract_init },
              { Py_tp_getset, t_PartOfSpeechAttribute__fields_ },
              { 0, NULL }
            };

            static PyType_Def *PY_TYPE_BASES(PartOfSpeechAttribute)[] = {
              &PY_TYPE_DEF(::org::apache::lucene::util::Attribute),
              NULL
            };

            DEFINE_TYPE(PartOfSpeechAttribute, t_PartOfSpeechAttribute, PartOfSpeechAttribute);

            void t_PartOfSpeechAttribute::install(PyObject *module)
            {
              installType(&PY_TYPE(PartOfSpeechAttribute), &PY_TYPE_DEF(PartOfSpeechAttribute), module, "PartOfSpeechAttribute", 0);
            }

            void t_PartOfSpeechAttribute::initialize(PyObject *module)
            {
              PyObject_SetAttrString((PyObject *) PY_TYPE(PartOfSpeechAttribute), "class_", make_descriptor(PartOfSpeechAttribute::initializeClass, 1));
              PyObject_SetAttrString((PyObject *) PY_TYPE(PartOfSpeechAttribute), "wrapfn_", make_descriptor(t_PartOfSpeechAttribute::wrap_jobject));
              PyObject_SetAttrString((PyObject *) PY_TYPE(PartOfSpeechAttribute), "boxfn_", make_descriptor(boxObject));
            }

            static PyObject *t_PartOfSpeechAttribute_cast_(PyTypeObject *type, PyObject *arg)
            {
              if (!(arg = castCheck(arg, PartOfSpeechAttribute::initializeClass, 1)))
                return NULL;
              return t_PartOfSpeechAttribute::wrap_Object(PartOfSpeechAttribute(((t_PartOfSpeechAttribute *) arg)->object.this$));
            }
            static PyObject *t_PartOfSpeechAttribute_instance_(PyTypeObject *type, PyObject *arg)
            {
              if (!castCheck(arg, PartOfSpeechAttribute::initializeClass, 0))
                Py_RETURN_FALSE;
              Py_RETURN_TRUE;
            }

            static PyObject *t_PartOfSpeechAttribute_getPartOfSpeech(t_PartOfSpeechAttribute *self)
            {
              ::java::lang::String result((jobject) NULL);
              OBJ_CALL(result = self->object.getPartOfSpeech());
              return j2p(result);
            }

            static PyObject *t_PartOfSpeechAttribute_setToken(t_PartOfSpeechAttribute *self, PyObject *arg)
            {
              ::org::apache::lucene::analysis::ja::Token a0((jobject) NULL);

              if (!parseArg(arg, "k", ::org::apache::lucene::analysis::ja::Token::initializeClass, &a0))
              {
                OBJ_CALL(self->object.setToken(a0));
                Py_RETURN_NONE;
              }

              PyErr_SetArgsError((PyObject *) self, "setToken", arg);
              return NULL;
            }

            static PyObject *t_PartOfSpeechAttribute_get__partOfSpeech(t_PartOfSpeechAttribute *self, void *data)
            {
              ::java::lang::String value((jobject) NULL);
              OBJ_CALL(value = self->object.getPartOfSpeech());
              return j2p(value);
            }

            static int t_PartOfSpeechAttribute_set__token(t_PartOfSpeechAttribute *self, PyObject *arg, void *data)
            {
              {
                ::org::apache::lucene::analysis::ja::Token value((jobject) NULL);
                if (!parseArg(arg, "k", ::org::apache::lucene::analysis::ja::Token::initializeClass, &value))
                {
                  INT_CALL(self->object.setToken(value));
                  return 0;
                }
              }
              PyErr_SetArgsError((PyObject *) self, "token", arg);
              return -1;
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/DisjunctionDISIApproximation.h"
#include "org/apache/lucene/search/DisiPriorityQueue.h"
#include "java/io/IOException.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {

        ::java::lang::Class *DisjunctionDISIApproximation::class$ = NULL;
        jmethodID *DisjunctionDISIApproximation::mids$ = NULL;
        bool DisjunctionDISIApproximation::live$ = false;

        jclass DisjunctionDISIApproximation::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/search/DisjunctionDISIApproximation");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_36878ff357dfddeb] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/search/DisiPriorityQueue;)V");
            mids$[mid_advance_1e143afe1894d213] = env->getMethodID(cls, "advance", "(I)I");
            mids$[mid_cost_2e5ae9edcb9b072f] = env->getMethodID(cls, "cost", "()J");
            mids$[mid_docID_9972fcc56b44e79d] = env->getMethodID(cls, "docID", "()I");
            mids$[mid_nextDoc_9972fcc56b44e79d] = env->getMethodID(cls, "nextDoc", "()I");

            class$ = new ::java::lang::Class(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        DisjunctionDISIApproximation::DisjunctionDISIApproximation(const ::org::apache::lucene::search::DisiPriorityQueue & a0) : ::org::apache::lucene::search::DocIdSetIterator(env->newObject(initializeClass, &mids$, mid_init$_36878ff357dfddeb, a0.this$)) {}

        jint DisjunctionDISIApproximation::advance(jint a0) const
        {
          return env->callIntMethod(this$, mids$[mid_advance_1e143afe1894d213], a0);
        }

        jlong DisjunctionDISIApproximation::cost() const
        {
          return env->callLongMethod(this$, mids$[mid_cost_2e5ae9edcb9b072f]);
        }

        jint DisjunctionDISIApproximation::docID() const
        {
          return env->callIntMethod(this$, mids$[mid_docID_9972fcc56b44e79d]);
        }

        jint DisjunctionDISIApproximation::nextDoc() const
        {
          return env->callIntMethod(this$, mids$[mid_nextDoc_9972fcc56b44e79d]);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        static PyObject *t_DisjunctionDISIApproximation_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_DisjunctionDISIApproximation_instance_(PyTypeObject *type, PyObject *arg);
        static int t_DisjunctionDISIApproximation_init_(t_DisjunctionDISIApproximation *self, PyObject *args, PyObject *kwds);
        static PyObject *t_DisjunctionDISIApproximation_advance(t_DisjunctionDISIApproximation *self, PyObject *args);
        static PyObject *t_DisjunctionDISIApproximation_cost(t_DisjunctionDISIApproximation *self, PyObject *args);
        static PyObject *t_DisjunctionDISIApproximation_docID(t_DisjunctionDISIApproximation *self, PyObject *args);
        static PyObject *t_DisjunctionDISIApproximation_nextDoc(t_DisjunctionDISIApproximation *self, PyObject *args);

        static PyMethodDef t_DisjunctionDISIApproximation__methods_[] = {
          DECLARE_METHOD(t_DisjunctionDISIApproximation, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_DisjunctionDISIApproximation, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_DisjunctionDISIApproximation, advance, METH_VARARGS),
          DECLARE_METHOD(t_DisjunctionDISIApproximation, cost, METH_VARARGS),
          DECLARE_METHOD(t_DisjunctionDISIApproximation, docID, METH_VARARGS),
          DECLARE_METHOD(t_DisjunctionDISIApproximation, nextDoc, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        static PyType_Slot PY_TYPE_SLOTS(DisjunctionDISIApproximation)[] = {
          { Py_tp_methods, t_DisjunctionDISIApproximation__methods_ },
          { Py_tp_init, (void *) t_DisjunctionDISIApproximation_init_ },
          { 0, NULL }
        };

        static PyType_Def *PY_TYPE_BASES(DisjunctionDISIApproximation)[] = {
          &PY_TYPE_DEF(::org::apache::lucene::search::DocIdSetIterator),
          NULL
        };

        DEFINE_TYPE(DisjunctionDISIApproximation, t_DisjunctionDISIApproximation, DisjunctionDISIApproximation);

        void t_DisjunctionDISIApproximation::install(PyObject *module)
        {
          installType(&PY_TYPE(DisjunctionDISIApproximation), &PY_TYPE_DEF(DisjunctionDISIApproximation), module, "DisjunctionDISIApproximation", 0);
        }

        void t_DisjunctionDISIApproximation::initialize(PyObject *module)
        {
          PyObject_SetAttrString((PyObject *) PY_TYPE(DisjunctionDISIApproximation), "class_", make_descriptor(DisjunctionDISIApproximation::initializeClass, 1));
          PyObject_SetAttrString((PyObject *) PY_TYPE(DisjunctionDISIApproximation), "wrapfn_", make_descriptor(t_DisjunctionDISIApproximation::wrap_jobject));
          PyObject_SetAttrString((PyObject *) PY_TYPE(DisjunctionDISIApproximation), "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_DisjunctionDISIApproximation_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, DisjunctionDISIApproximation::initializeClass, 1)))
            return NULL;
          return t_DisjunctionDISIApproximation::wrap_Object(DisjunctionDISIApproximation(((t_DisjunctionDISIApproximation *) arg)->object.this$));
        }
        static PyObject *t_DisjunctionDISIApproximation_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, DisjunctionDISIApproximation::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_DisjunctionDISIApproximation_init_(t_DisjunctionDISIApproximation *self, PyObject *args, PyObject *kwds)
        {
          ::org::apache::lucene::search::DisiPriorityQueue a0((jobject) NULL);
          DisjunctionDISIApproximation object((jobject) NULL);

          if (!parseArgs(args, "k", ::org::apache::lucene::search::DisiPriorityQueue::initializeClass, &a0))
          {
            INT_CALL(object = DisjunctionDISIApproximation(a0));
            self->object = object;
          }
          else
          {
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }

        static PyObject *t_DisjunctionDISIApproximation_advance(t_DisjunctionDISIApproximation *self, PyObject *args)
        {
          jint a0;
          jint result;

          if (!parseArgs(args, "I", &a0))
          {
            OBJ_CALL(result = self->object.advance(a0));
            return PyLong_FromLong((long) result);
          }

          return callSuper(PY_TYPE(DisjunctionDISIApproximation), (PyObject *) self, "advance", args, 2);
        }

        static PyObject *t_DisjunctionDISIApproximation_cost(t_DisjunctionDISIApproximation *self, PyObject *args)
        {
          jlong result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.cost());
            return PyLong_FromLongLong((PY_LONG_LONG) result);
          }

          return callSuper(PY_TYPE(DisjunctionDISIApproximation), (PyObject *) self, "cost", args, 2);
        }

        static PyObject *t_DisjunctionDISIApproximation_docID(t_DisjunctionDISIApproximation *self, PyObject *args)
        {
          jint result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.docID());
            return PyLong_FromLong((long) result);
          }

          return callSuper(PY_TYPE(DisjunctionDISIApproximation), (PyObject *) self, "docID", args, 2);
        }

        static PyObject *t_DisjunctionDISIApproximation_nextDoc(t_DisjunctionDISIApproximation *self, PyObject *args)
        {
          jint result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.nextDoc());
            return PyLong_FromLong((long) result);
          }

          return callSuper(PY_TYPE(DisjunctionDISIApproximation), (PyObject *) self, "nextDoc", args, 2);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/comparators/DoubleComparator.h"
#include "org/apache/lucene/index/LeafReaderContext.h"
#include "org/apache/lucene/search/LeafFieldComparator.h"
#include "java/lang/Class.h"
#include "java/lang/Double.h"
#include "java/lang/String.h"
#include "java/io/IOException.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace comparators {

          ::java::lang::Class *DoubleComparator::class$ = NULL;
          jmethodID *DoubleComparator::mids$ = NULL;
          bool DoubleComparator::live$ = false;

          jclass DoubleComparator::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/search/comparators/DoubleComparator");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_9efc79397c9a5cbb] = env->getMethodID(cls, "<init>", "(ILjava/lang/String;Ljava/lang/Double;ZI)V");
              mids$[mid_compare_57a58545eba514db] = env->getMethodID(cls, "compare", "(II)I");
              mids$[mid_getLeafComparator_6183906b7058c4b5] = env->getMethodID(cls, "getLeafComparator", "(Lorg/apache/lucene/index/LeafReaderContext;)Lorg/apache/lucene/search/LeafFieldComparator;");
              mids$[mid_setTopValue_aaa8c43db41d592f] = env->getMethodID(cls, "setTopValue", "(Ljava/lang/Double;)V");
              mids$[mid_value_d9720b5e40990579] = env->getMethodID(cls, "value", "(I)Ljava/lang/Double;");

              class$ = new ::java::lang::Class(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          DoubleComparator::DoubleComparator(jint a0, const ::java::lang::String & a1, const ::java::lang::Double & a2, jboolean a3, jint a4) : ::org::apache::lucene::search::comparators::NumericComparator(env->newObject(initializeClass, &mids$, mid_init$_9efc79397c9a5cbb, a0, a1.this$, a2.this$, a3, a4)) {}

          jint DoubleComparator::compare(jint a0, jint a1) const
          {
            return env->callIntMethod(this$, mids$[mid_compare_57a58545eba514db], a0, a1);
          }

          ::org::apache::lucene::search::LeafFieldComparator DoubleComparator::getLeafComparator(const ::org::apache::lucene::index::LeafReaderContext & a0) const
          {
            return ::org::apache::lucene::search::LeafFieldComparator(env->callObjectMethod(this$, mids$[mid_getLeafComparator_6183906b7058c4b5], a0.this$));
          }

          void DoubleComparator::setTopValue(const ::java::lang::Double & a0) const
          {
            env->callVoidMethod(this$, mids$[mid_setTopValue_aaa8c43db41d592f], a0.this$);
          }

          ::java::lang::Double DoubleComparator::value(jint a0) const
          {
            return ::java::lang::Double(env->callObjectMethod(this$, mids$[mid_value_d9720b5e40990579], a0));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace comparators {
          static PyObject *t_DoubleComparator_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_DoubleComparator_instance_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_DoubleComparator_of_(t_DoubleComparator *self, PyObject *args);
          static int t_DoubleComparator_init_(t_DoubleComparator *self, PyObject *args, PyObject *kwds);
          static PyObject *t_DoubleComparator_compare(t_DoubleComparator *self, PyObject *args);
          static PyObject *t_DoubleComparator_getLeafComparator(t_DoubleComparator *self, PyObject *args);
          static PyObject *t_DoubleComparator_setTopValue(t_DoubleComparator *self, PyObject *args);
          static PyObject *t_DoubleComparator_value(t_DoubleComparator *self, PyObject *args);
          static int t_DoubleComparator_set__topValue(t_DoubleComparator *self, PyObject *arg, void *data);
          static PyObject *t_DoubleComparator_get__parameters_(t_DoubleComparator *self, void *data);
          static PyGetSetDef t_DoubleComparator__fields_[] = {
            DECLARE_SET_FIELD(t_DoubleComparator, topValue),
            DECLARE_GET_FIELD(t_DoubleComparator, parameters_),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_DoubleComparator__methods_[] = {
            DECLARE_METHOD(t_DoubleComparator, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_DoubleComparator, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_DoubleComparator, of_, METH_VARARGS),
            DECLARE_METHOD(t_DoubleComparator, compare, METH_VARARGS),
            DECLARE_METHOD(t_DoubleComparator, getLeafComparator, METH_VARARGS),
            DECLARE_METHOD(t_DoubleComparator, setTopValue, METH_VARARGS),
            DECLARE_METHOD(t_DoubleComparator, value, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          static PyType_Slot PY_TYPE_SLOTS(DoubleComparator)[] = {
            { Py_tp_methods, t_DoubleComparator__methods_ },
            { Py_tp_init, (void *) t_DoubleComparator_init_ },
            { Py_tp_getset, t_DoubleComparator__fields_ },
            { 0, NULL }
          };

          static PyType_Def *PY_TYPE_BASES(DoubleComparator)[] = {
            &PY_TYPE_DEF(::org::apache::lucene::search::comparators::NumericComparator),
            NULL
          };

          DEFINE_TYPE(DoubleComparator, t_DoubleComparator, DoubleComparator);
          PyObject *t_DoubleComparator::wrap_Object(const DoubleComparator& object, PyTypeObject *p0)
          {
            PyObject *obj = t_DoubleComparator::wrap_Object(object);
            if (obj != NULL && obj != Py_None)
            {
              t_DoubleComparator *self = (t_DoubleComparator *) obj;
              self->parameters[0] = p0;
            }
            return obj;
          }

          PyObject *t_DoubleComparator::wrap_jobject(const jobject& object, PyTypeObject *p0)
          {
            PyObject *obj = t_DoubleComparator::wrap_jobject(object);
            if (obj != NULL && obj != Py_None)
            {
              t_DoubleComparator *self = (t_DoubleComparator *) obj;
              self->parameters[0] = p0;
            }
            return obj;
          }

          void t_DoubleComparator::install(PyObject *module)
          {
            installType(&PY_TYPE(DoubleComparator), &PY_TYPE_DEF(DoubleComparator), module, "DoubleComparator", 0);
          }

          void t_DoubleComparator::initialize(PyObject *module)
          {
            PyObject_SetAttrString((PyObject *) PY_TYPE(DoubleComparator), "class_", make_descriptor(DoubleComparator::initializeClass, 1));
            PyObject_SetAttrString((PyObject *) PY_TYPE(DoubleComparator), "wrapfn_", make_descriptor(t_DoubleComparator::wrap_jobject));
            PyObject_SetAttrString((PyObject *) PY_TYPE(DoubleComparator), "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_DoubleComparator_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, DoubleComparator::initializeClass, 1)))
              return NULL;
            return t_DoubleComparator::wrap_Object(DoubleComparator(((t_DoubleComparator *) arg)->object.this$));
          }
          static PyObject *t_DoubleComparator_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, DoubleComparator::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static PyObject *t_DoubleComparator_of_(t_DoubleComparator *self, PyObject *args)
          {
            if (!parseArg(args, "T", 1, &(self->parameters)))
              Py_RETURN_SELF;
            return PyErr_SetArgsError((PyObject *) self, "of_", args);
          }

          static int t_DoubleComparator_init_(t_DoubleComparator *self, PyObject *args, PyObject *kwds)
          {
            jint a0;
            ::java::lang::String a1((jobject) NULL);
            ::java::lang::Double a2((jobject) NULL);
            jboolean a3;
            jint a4;
            DoubleComparator object((jobject) NULL);

            if (!parseArgs(args, "IsOZI", ::java::lang::PY_TYPE(Double), &a0, &a1, &a2, &a3, &a4))
            {
              INT_CALL(object = DoubleComparator(a0, a1, a2, a3, a4));
              self->object = object;
              self->parameters[0] = ::java::lang::PY_TYPE(Double);
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_DoubleComparator_compare(t_DoubleComparator *self, PyObject *args)
          {
            jint a0;
            jint a1;
            jint result;

            if (!parseArgs(args, "II", &a0, &a1))
            {
              OBJ_CALL(result = self->object.compare(a0, a1));
              return PyLong_FromLong((long) result);
            }

            return callSuper(PY_TYPE(DoubleComparator), (PyObject *) self, "compare", args, 2);
          }

          static PyObject *t_DoubleComparator_getLeafComparator(t_DoubleComparator *self, PyObject *args)
          {
            ::org::apache::lucene::index::LeafReaderContext a0((jobject) NULL);
            ::org::apache::lucene::search::LeafFieldComparator result((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::index::LeafReaderContext::initializeClass, &a0))
            {
              OBJ_CALL(result = self->object.getLeafComparator(a0));
              return ::org::apache::lucene::search::t_LeafFieldComparator::wrap_Object(result);
            }

            return callSuper(PY_TYPE(DoubleComparator), (PyObject *) self, "getLeafComparator", args, 2);
          }

          static PyObject *t_DoubleComparator_setTopValue(t_DoubleComparator *self, PyObject *args)
          {
            ::java::lang::Double a0((jobject) NULL);

            if (!parseArgs(args, "O", ::java::lang::PY_TYPE(Double), &a0))
            {
              OBJ_CALL(self->object.setTopValue(a0));
              Py_RETURN_NONE;
            }

            return callSuper(PY_TYPE(DoubleComparator), (PyObject *) self, "setTopValue", args, 2);
          }

          static PyObject *t_DoubleComparator_value(t_DoubleComparator *self, PyObject *args)
          {
            jint a0;
            ::java::lang::Double result((jobject) NULL);

            if (!parseArgs(args, "I", &a0))
            {
              OBJ_CALL(result = self->object.value(a0));
              return ::java::lang::t_Double::wrap_Object(result);
            }

            return callSuper(PY_TYPE(DoubleComparator), (PyObject *) self, "value", args, 2);
          }
          static PyObject *t_DoubleComparator_get__parameters_(t_DoubleComparator *self, void *data)
          {
            return typeParameters(self->parameters, sizeof(self->parameters));
          }

          static int t_DoubleComparator_set__topValue(t_DoubleComparator *self, PyObject *arg, void *data)
          {
            {
              ::java::lang::Double value((jobject) NULL);
              if (!parseArg(arg, "O", ::java::lang::PY_TYPE(Double), &value))
              {
                INT_CALL(self->object.setTopValue(value));
                return 0;
              }
            }
            PyErr_SetArgsError((PyObject *) self, "topValue", arg);
            return -1;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/ja/util/ToStringUtil.h"
#include "java/lang/Class.h"
#include "java/lang/CharSequence.h"
#include "java/lang/String.h"
#include "java/io/IOException.h"
#include "java/lang/Appendable.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace ja {
          namespace util {

            ::java::lang::Class *ToStringUtil::class$ = NULL;
            jmethodID *ToStringUtil::mids$ = NULL;
            bool ToStringUtil::live$ = false;

            jclass ToStringUtil::initializeClass(bool getOnly)
            {
              if (getOnly)
                return (jclass) (live$ ? class$->this$ : NULL);
              if (class$ == NULL)
              {
                jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/ja/util/ToStringUtil");

                mids$ = new jmethodID[max_mid];
                mids$[mid_init$_f2cc1bce94666404] = env->getMethodID(cls, "<init>", "()V");
                mids$[mid_getInflectedFormTranslation_9bfa75c9f141b67f] = env->getStaticMethodID(cls, "getInflectedFormTranslation", "(Ljava/lang/String;)Ljava/lang/String;");
                mids$[mid_getInflectionTypeTranslation_9bfa75c9f141b67f] = env->getStaticMethodID(cls, "getInflectionTypeTranslation", "(Ljava/lang/String;)Ljava/lang/String;");
                mids$[mid_getPOSTranslation_9bfa75c9f141b67f] = env->getStaticMethodID(cls, "getPOSTranslation", "(Ljava/lang/String;)Ljava/lang/String;");
                mids$[mid_getRomanization_9bfa75c9f141b67f] = env->getStaticMethodID(cls, "getRomanization", "(Ljava/lang/String;)Ljava/lang/String;");
                mids$[mid_getRomanization_d60e613b3148af70] = env->getStaticMethodID(cls, "getRomanization", "(Ljava/lang/Appendable;Ljava/lang/CharSequence;)V");

                class$ = new ::java::lang::Class(cls);
                live$ = true;
              }
              return (jclass) class$->this$;
            }

            ToStringUtil::ToStringUtil() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_f2cc1bce94666404)) {}

            ::java::lang::String ToStringUtil::getInflectedFormTranslation(const ::java::lang::String & a0)
            {
              jclass cls = env->getClass(initializeClass);
              return ::java::lang::String(env->callStaticObjectMethod(cls, mids$[mid_getInflectedFormTranslation_9bfa75c9f141b67f], a0.this$));
            }

            ::java::lang::String ToStringUtil::getInflectionTypeTranslation(const ::java::lang::String & a0)
            {
              jclass cls = env->getClass(initializeClass);
              return ::java::lang::String(env->callStaticObjectMethod(cls, mids$[mid_getInflectionTypeTranslation_9bfa75c9f141b67f], a0.this$));
            }

            ::java::lang::String ToStringUtil::getPOSTranslation(const ::java::lang::String & a0)
            {
              jclass cls = env->getClass(initializeClass);
              return ::java::lang::String(env->callStaticObjectMethod(cls, mids$[mid_getPOSTranslation_9bfa75c9f141b67f], a0.this$));
            }

            ::java::lang::String ToStringUtil::getRomanization(const ::java::lang::String & a0)
            {
              jclass cls = env->getClass(initializeClass);
              return ::java::lang::String(env->callStaticObjectMethod(cls, mids$[mid_getRomanization_9bfa75c9f141b67f], a0.this$));
            }

            void ToStringUtil::getRomanization(const ::java::lang::Appendable & a0, const ::java::lang::CharSequence & a1)
            {
              jclass cls = env->getClass(initializeClass);
              env->callStaticVoidMethod(cls, mids$[mid_getRomanization_d60e613b3148af70], a0.this$, a1.this$);
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace ja {
          namespace util {
            static PyObject *t_ToStringUtil_cast_(PyTypeObject *type, PyObject *arg);
            static PyObject *t_ToStringUtil_instance_(PyTypeObject *type, PyObject *arg);
            static int t_ToStringUtil_init_(t_ToStringUtil *self, PyObject *args, PyObject *kwds);
            static PyObject *t_ToStringUtil_getInflectedFormTranslation(PyTypeObject *type, PyObject *arg);
            static PyObject *t_ToStringUtil_getInflectionTypeTranslation(PyTypeObject *type, PyObject *arg);
            static PyObject *t_ToStringUtil_getPOSTranslation(PyTypeObject *type, PyObject *arg);
            static PyObject *t_ToStringUtil_getRomanization(PyTypeObject *type, PyObject *args);

            static PyMethodDef t_ToStringUtil__methods_[] = {
              DECLARE_METHOD(t_ToStringUtil, cast_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_ToStringUtil, instance_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_ToStringUtil, getInflectedFormTranslation, METH_O | METH_CLASS),
              DECLARE_METHOD(t_ToStringUtil, getInflectionTypeTranslation, METH_O | METH_CLASS),
              DECLARE_METHOD(t_ToStringUtil, getPOSTranslation, METH_O | METH_CLASS),
              DECLARE_METHOD(t_ToStringUtil, getRomanization, METH_VARARGS | METH_CLASS),
              { NULL, NULL, 0, NULL }
            };

            static PyType_Slot PY_TYPE_SLOTS(ToStringUtil)[] = {
              { Py_tp_methods, t_ToStringUtil__methods_ },
              { Py_tp_init, (void *) t_ToStringUtil_init_ },
              { 0, NULL }
            };

            static PyType_Def *PY_TYPE_BASES(ToStringUtil)[] = {
              &PY_TYPE_DEF(::java::lang::Object),
              NULL
            };

            DEFINE_TYPE(ToStringUtil, t_ToStringUtil, ToStringUtil);

            void t_ToStringUtil::install(PyObject *module)
            {
              installType(&PY_TYPE(ToStringUtil), &PY_TYPE_DEF(ToStringUtil), module, "ToStringUtil", 0);
            }

            void t_ToStringUtil::initialize(PyObject *module)
            {
              PyObject_SetAttrString((PyObject *) PY_TYPE(ToStringUtil), "class_", make_descriptor(ToStringUtil::initializeClass, 1));
              PyObject_SetAttrString((PyObject *) PY_TYPE(ToStringUtil), "wrapfn_", make_descriptor(t_ToStringUtil::wrap_jobject));
              PyObject_SetAttrString((PyObject *) PY_TYPE(ToStringUtil), "boxfn_", make_descriptor(boxObject));
            }

            static PyObject *t_ToStringUtil_cast_(PyTypeObject *type, PyObject *arg)
            {
              if (!(arg = castCheck(arg, ToStringUtil::initializeClass, 1)))
                return NULL;
              return t_ToStringUtil::wrap_Object(ToStringUtil(((t_ToStringUtil *) arg)->object.this$));
            }
            static PyObject *t_ToStringUtil_instance_(PyTypeObject *type, PyObject *arg)
            {
              if (!castCheck(arg, ToStringUtil::initializeClass, 0))
                Py_RETURN_FALSE;
              Py_RETURN_TRUE;
            }

            static int t_ToStringUtil_init_(t_ToStringUtil *self, PyObject *args, PyObject *kwds)
            {
              ToStringUtil object((jobject) NULL);

              INT_CALL(object = ToStringUtil());
              self->object = object;

              return 0;
            }

            static PyObject *t_ToStringUtil_getInflectedFormTranslation(PyTypeObject *type, PyObject *arg)
            {
              ::java::lang::String a0((jobject) NULL);
              ::java::lang::String result((jobject) NULL);

              if (!parseArg(arg, "s", &a0))
              {
                OBJ_CALL(result = ::org::apache::lucene::analysis::ja::util::ToStringUtil::getInflectedFormTranslation(a0));
                return j2p(result);
              }

              PyErr_SetArgsError(type, "getInflectedFormTranslation", arg);
              return NULL;
            }

            static PyObject *t_ToStringUtil_getInflectionTypeTranslation(PyTypeObject *type, PyObject *arg)
            {
              ::java::lang::String a0((jobject) NULL);
              ::java::lang::String result((jobject) NULL);

              if (!parseArg(arg, "s", &a0))
              {
                OBJ_CALL(result = ::org::apache::lucene::analysis::ja::util::ToStringUtil::getInflectionTypeTranslation(a0));
                return j2p(result);
              }

              PyErr_SetArgsError(type, "getInflectionTypeTranslation", arg);
              return NULL;
            }

            static PyObject *t_ToStringUtil_getPOSTranslation(PyTypeObject *type, PyObject *arg)
            {
              ::java::lang::String a0((jobject) NULL);
              ::java::lang::String result((jobject) NULL);

              if (!parseArg(arg, "s", &a0))
              {
                OBJ_CALL(result = ::org::apache::lucene::analysis::ja::util::ToStringUtil::getPOSTranslation(a0));
                return j2p(result);
              }

              PyErr_SetArgsError(type, "getPOSTranslation", arg);
              return NULL;
            }

            static PyObject *t_ToStringUtil_getRomanization(PyTypeObject *type, PyObject *args)
            {
              switch (PyTuple_GET_SIZE(args)) {
               case 1:
                {
                  ::java::lang::String a0((jobject) NULL);
                  ::java::lang::String result((jobject) NULL);

                  if (!parseArgs(args, "s", &a0))
                  {
                    OBJ_CALL(result = ::org::apache::lucene::analysis::ja::util::ToStringUtil::getRomanization(a0));
                    return j2p(result);
                  }
                }
                break;
               case 2:
                {
                  ::java::lang::Appendable a0((jobject) NULL);
                  ::java::lang::CharSequence a1((jobject) NULL);

                  if (!parseArgs(args, "kO", ::java::lang::Appendable::initializeClass, ::java::lang::PY_TYPE(CharSequence), &a0, &a1))
                  {
                    OBJ_CALL(::org::apache::lucene::analysis::ja::util::ToStringUtil::getRomanization(a0, a1));
                    Py_RETURN_NONE;
                  }
                }
              }

              PyErr_SetArgsError(type, "getRomanization", args);
              return NULL;
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/ScoreMode.h"
#include "java/lang/String.h"
#include "org/apache/lucene/search/ScoreMode.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {

        ::java::lang::Class *ScoreMode::class$ = NULL;
        jmethodID *ScoreMode::mids$ = NULL;
        bool ScoreMode::live$ = false;
        ScoreMode *ScoreMode::COMPLETE = NULL;
        ScoreMode *ScoreMode::COMPLETE_NO_SCORES = NULL;
        ScoreMode *ScoreMode::TOP_DOCS = NULL;
        ScoreMode *ScoreMode::TOP_DOCS_WITH_SCORES = NULL;
        ScoreMode *ScoreMode::TOP_SCORES = NULL;

        jclass ScoreMode::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/search/ScoreMode");

            mids$ = new jmethodID[max_mid];
            mids$[mid_isExhaustive_8454bd5aa23fd11e] = env->getMethodID(cls, "isExhaustive", "()Z");
            mids$[mid_needsScores_8454bd5aa23fd11e] = env->getMethodID(cls, "needsScores", "()Z");
            mids$[mid_valueOf_9b0e1e0877be4451] = env->getStaticMethodID(cls, "valueOf", "(Ljava/lang/String;)Lorg/apache/lucene/search/ScoreMode;");
            mids$[mid_values_d34f8555b2aa514c] = env->getStaticMethodID(cls, "values", "()[Lorg/apache/lucene/search/ScoreMode;");

            class$ = new ::java::lang::Class(cls);
            cls = (jclass) class$->this$;

            COMPLETE = new ScoreMode(env->getStaticObjectField(cls, "COMPLETE", "Lorg/apache/lucene/search/ScoreMode;"));
            COMPLETE_NO_SCORES = new ScoreMode(env->getStaticObjectField(cls, "COMPLETE_NO_SCORES", "Lorg/apache/lucene/search/ScoreMode;"));
            TOP_DOCS = new ScoreMode(env->getStaticObjectField(cls, "TOP_DOCS", "Lorg/apache/lucene/search/ScoreMode;"));
            TOP_DOCS_WITH_SCORES = new ScoreMode(env->getStaticObjectField(cls, "TOP_DOCS_WITH_SCORES", "Lorg/apache/lucene/search/ScoreMode;"));
            TOP_SCORES = new ScoreMode(env->getStaticObjectField(cls, "TOP_SCORES", "Lorg/apache/lucene/search/ScoreMode;"));
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        jboolean ScoreMode::isExhaustive() const
        {
          return env->callBooleanMethod(this$, mids$[mid_isExhaustive_8454bd5aa23fd11e]);
        }

        jboolean ScoreMode::needsScores() const
        {
          return env->callBooleanMethod(this$, mids$[mid_needsScores_8454bd5aa23fd11e]);
        }

        ScoreMode ScoreMode::valueOf(const ::java::lang::String & a0)
        {
          jclass cls = env->getClass(initializeClass);
          return ScoreMode(env->callStaticObjectMethod(cls, mids$[mid_valueOf_9b0e1e0877be4451], a0.this$));
        }

        JArray< ScoreMode > ScoreMode::values()
        {
          jclass cls = env->getClass(initializeClass);
          return JArray< ScoreMode >(env->callStaticObjectMethod(cls, mids$[mid_values_d34f8555b2aa514c]));
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        static PyObject *t_ScoreMode_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_ScoreMode_instance_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_ScoreMode_of_(t_ScoreMode *self, PyObject *args);
        static PyObject *t_ScoreMode_isExhaustive(t_ScoreMode *self);
        static PyObject *t_ScoreMode_needsScores(t_ScoreMode *self);
        static PyObject *t_ScoreMode_valueOf(PyTypeObject *type, PyObject *args);
        static PyObject *t_ScoreMode_values(PyTypeObject *type);
        static PyObject *t_ScoreMode_get__exhaustive(t_ScoreMode *self, void *data);
        static PyObject *t_ScoreMode_get__parameters_(t_ScoreMode *self, void *data);
        static PyGetSetDef t_ScoreMode__fields_[] = {
          DECLARE_GET_FIELD(t_ScoreMode, exhaustive),
          DECLARE_GET_FIELD(t_ScoreMode, parameters_),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_ScoreMode__methods_[] = {
          DECLARE_METHOD(t_ScoreMode, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_ScoreMode, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_ScoreMode, of_, METH_VARARGS),
          DECLARE_METHOD(t_ScoreMode, isExhaustive, METH_NOARGS),
          DECLARE_METHOD(t_ScoreMode, needsScores, METH_NOARGS),
          DECLARE_METHOD(t_ScoreMode, valueOf, METH_VARARGS | METH_CLASS),
          DECLARE_METHOD(t_ScoreMode, values, METH_NOARGS | METH_CLASS),
          { NULL, NULL, 0, NULL }
        };

        static PyType_Slot PY_TYPE_SLOTS(ScoreMode)[] = {
          { Py_tp_methods, t_ScoreMode__methods_ },
          { Py_tp_init, (void *) abstract_init },
          { Py_tp_getset, t_ScoreMode__fields_ },
          { 0, NULL }
        };

        static PyType_Def *PY_TYPE_BASES(ScoreMode)[] = {
          &PY_TYPE_DEF(::java::lang::Enum),
          NULL
        };

        DEFINE_TYPE(ScoreMode, t_ScoreMode, ScoreMode);
        PyObject *t_ScoreMode::wrap_Object(const ScoreMode& object, PyTypeObject *p0)
        {
          PyObject *obj = t_ScoreMode::wrap_Object(object);
          if (obj != NULL && obj != Py_None)
          {
            t_ScoreMode *self = (t_ScoreMode *) obj;
            self->parameters[0] = p0;
          }
          return obj;
        }

        PyObject *t_ScoreMode::wrap_jobject(const jobject& object, PyTypeObject *p0)
        {
          PyObject *obj = t_ScoreMode::wrap_jobject(object);
          if (obj != NULL && obj != Py_None)
          {
            t_ScoreMode *self = (t_ScoreMode *) obj;
            self->parameters[0] = p0;
          }
          return obj;
        }

        void t_ScoreMode::install(PyObject *module)
        {
          installType(&PY_TYPE(ScoreMode), &PY_TYPE_DEF(ScoreMode), module, "ScoreMode", 0);
        }

        void t_ScoreMode::initialize(PyObject *module)
        {
          PyObject_SetAttrString((PyObject *) PY_TYPE(ScoreMode), "class_", make_descriptor(ScoreMode::initializeClass, 1));
          PyObject_SetAttrString((PyObject *) PY_TYPE(ScoreMode), "wrapfn_", make_descriptor(t_ScoreMode::wrap_jobject));
          PyObject_SetAttrString((PyObject *) PY_TYPE(ScoreMode), "boxfn_", make_descriptor(boxObject));
          env->getClass(ScoreMode::initializeClass);
          PyObject_SetAttrString((PyObject *) PY_TYPE(ScoreMode), "COMPLETE", make_descriptor(t_ScoreMode::wrap_Object(*ScoreMode::COMPLETE)));
          PyObject_SetAttrString((PyObject *) PY_TYPE(ScoreMode), "COMPLETE_NO_SCORES", make_descriptor(t_ScoreMode::wrap_Object(*ScoreMode::COMPLETE_NO_SCORES)));
          PyObject_SetAttrString((PyObject *) PY_TYPE(ScoreMode), "TOP_DOCS", make_descriptor(t_ScoreMode::wrap_Object(*ScoreMode::TOP_DOCS)));
          PyObject_SetAttrString((PyObject *) PY_TYPE(ScoreMode), "TOP_DOCS_WITH_SCORES", make_descriptor(t_ScoreMode::wrap_Object(*ScoreMode::TOP_DOCS_WITH_SCORES)));
          PyObject_SetAttrString((PyObject *) PY_TYPE(ScoreMode), "TOP_SCORES", make_descriptor(t_ScoreMode::wrap_Object(*ScoreMode::TOP_SCORES)));
        }

        static PyObject *t_ScoreMode_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, ScoreMode::initializeClass, 1)))
            return NULL;
          return t_ScoreMode::wrap_Object(ScoreMode(((t_ScoreMode *) arg)->object.this$));
        }
        static PyObject *t_ScoreMode_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, ScoreMode::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static PyObject *t_ScoreMode_of_(t_ScoreMode *self, PyObject *args)
        {
          if (!parseArg(args, "T", 1, &(self->parameters)))
            Py_RETURN_SELF;
          return PyErr_SetArgsError((PyObject *) self, "of_", args);
        }

        static PyObject *t_ScoreMode_isExhaustive(t_ScoreMode *self)
        {
          jboolean result;
          OBJ_CALL(result = self->object.isExhaustive());
          Py_RETURN_BOOL(result);
        }

        static PyObject *t_ScoreMode_needsScores(t_ScoreMode *self)
        {
          jboolean result;
          OBJ_CALL(result = self->object.needsScores());
          Py_RETURN_BOOL(result);
        }

        static PyObject *t_ScoreMode_valueOf(PyTypeObject *type, PyObject *args)
        {
          ::java::lang::String a0((jobject) NULL);
          ScoreMode result((jobject) NULL);

          if (!parseArgs(args, "s", &a0))
          {
            OBJ_CALL(result = ::org::apache::lucene::search::ScoreMode::valueOf(a0));
            return t_ScoreMode::wrap_Object(result);
          }

          return callSuper(type, "valueOf", args, 2);
        }

        static PyObject *t_ScoreMode_values(PyTypeObject *type)
        {
          JArray< ScoreMode > result((jobject) NULL);
          OBJ_CALL(result = ::org::apache::lucene::search::ScoreMode::values());
          return JArray<jobject>(result.this$).wrap(t_ScoreMode::wrap_jobject);
        }
        static PyObject *t_ScoreMode_get__parameters_(t_ScoreMode *self, void *data)
        {
          return typeParameters(self->parameters, sizeof(self->parameters));
        }

        static PyObject *t_ScoreMode_get__exhaustive(t_ScoreMode *self, void *data)
        {
          jboolean value;
          OBJ_CALL(value = self->object.isExhaustive());
          Py_RETURN_BOOL(value);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/store/LockObtainFailedException.h"
#include "java/lang/String.h"
#include "java/lang/Throwable.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace store {

        ::java::lang::Class *LockObtainFailedException::class$ = NULL;
        jmethodID *LockObtainFailedException::mids$ = NULL;
        bool LockObtainFailedException::live$ = false;

        jclass LockObtainFailedException::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/store/LockObtainFailedException");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_9fd2eb66a64e6f0f] = env->getMethodID(cls, "<init>", "(Ljava/lang/String;)V");
            mids$[mid_init$_2e9d196dc293ffe6] = env->getMethodID(cls, "<init>", "(Ljava/lang/String;Ljava/lang/Throwable;)V");

            class$ = new ::java::lang::Class(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        LockObtainFailedException::LockObtainFailedException(const ::java::lang::String & a0) : ::java::io::IOException(env->newObject(initializeClass, &mids$, mid_init$_9fd2eb66a64e6f0f, a0.this$)) {}

        LockObtainFailedException::LockObtainFailedException(const ::java::lang::String & a0, const ::java::lang::Throwable & a1) : ::java::io::IOException(env->newObject(initializeClass, &mids$, mid_init$_2e9d196dc293ffe6, a0.this$, a1.this$)) {}
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace store {
        static PyObject *t_LockObtainFailedException_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_LockObtainFailedException_instance_(PyTypeObject *type, PyObject *arg);
        static int t_LockObtainFailedException_init_(t_LockObtainFailedException *self, PyObject *args, PyObject *kwds);

        static PyMethodDef t_LockObtainFailedException__methods_[] = {
          DECLARE_METHOD(t_LockObtainFailedException, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_LockObtainFailedException, instance_, METH_O | METH_CLASS),
          { NULL, NULL, 0, NULL }
        };

        static PyType_Slot PY_TYPE_SLOTS(LockObtainFailedException)[] = {
          { Py_tp_methods, t_LockObtainFailedException__methods_ },
          { Py_tp_init, (void *) t_LockObtainFailedException_init_ },
          { 0, NULL }
        };

        static PyType_Def *PY_TYPE_BASES(LockObtainFailedException)[] = {
          &PY_TYPE_DEF(::java::io::IOException),
          NULL
        };

        DEFINE_TYPE(LockObtainFailedException, t_LockObtainFailedException, LockObtainFailedException);

        void t_LockObtainFailedException::install(PyObject *module)
        {
          installType(&PY_TYPE(LockObtainFailedException), &PY_TYPE_DEF(LockObtainFailedException), module, "LockObtainFailedException", 0);
        }

        void t_LockObtainFailedException::initialize(PyObject *module)
        {
          PyObject_SetAttrString((PyObject *) PY_TYPE(LockObtainFailedException), "class_", make_descriptor(LockObtainFailedException::initializeClass, 1));
          PyObject_SetAttrString((PyObject *) PY_TYPE(LockObtainFailedException), "wrapfn_", make_descriptor(t_LockObtainFailedException::wrap_jobject));
          PyObject_SetAttrString((PyObject *) PY_TYPE(LockObtainFailedException), "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_LockObtainFailedException_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, LockObtainFailedException::initializeClass, 1)))
            return NULL;
          return t_LockObtainFailedException::wrap_Object(LockObtainFailedException(((t_LockObtainFailedException *) arg)->object.this$));
        }
        static PyObject *t_LockObtainFailedException_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, LockObtainFailedException::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_LockObtainFailedException_init_(t_LockObtainFailedException *self, PyObject *args, PyObject *kwds)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 1:
            {
              ::java::lang::String a0((jobject) NULL);
              LockObtainFailedException object((jobject) NULL);

              if (!parseArgs(args, "s", &a0))
              {
                INT_CALL(object = LockObtainFailedException(a0));
                self->object = object;
                break;
              }
            }
            goto err;
           case 2:
            {
              ::java::lang::String a0((jobject) NULL);
              ::java::lang::Throwable a1((jobject) NULL);
              LockObtainFailedException object((jobject) NULL);

              if (!parseArgs(args, "sk", ::java::lang::Throwable::initializeClass, &a0, &a1))
              {
                INT_CALL(object = LockObtainFailedException(a0, a1));
                self->object = object;
                break;
              }
            }
           default:
           err:
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/ar/ArabicStemFilter.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/analysis/TokenStream.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace ar {

          ::java::lang::Class *ArabicStemFilter::class$ = NULL;
          jmethodID *ArabicStemFilter::mids$ = NULL;
          bool ArabicStemFilter::live$ = false;

          jclass ArabicStemFilter::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/ar/ArabicStemFilter");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_c26756868a754f4e] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/analysis/TokenStream;)V");
              mids$[mid_incrementToken_8454bd5aa23fd11e] = env->getMethodID(cls, "incrementToken", "()Z");

              class$ = new ::java::lang::Class(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          ArabicStemFilter::ArabicStemFilter(const ::org::apache::lucene::analysis::TokenStream & a0) : ::org::apache::lucene::analysis::TokenFilter(env->newObject(initializeClass, &mids$, mid_init$_c26756868a754f4e, a0.this$)) {}

          jboolean ArabicStemFilter::incrementToken() const
          {
            return env->callBooleanMethod(this$, mids$[mid_incrementToken_8454bd5aa23fd11e]);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace ar {
          static PyObject *t_ArabicStemFilter_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_ArabicStemFilter_instance_(PyTypeObject *type, PyObject *arg);
          static int t_ArabicStemFilter_init_(t_ArabicStemFilter *self, PyObject *args, PyObject *kwds);
          static PyObject *t_ArabicStemFilter_incrementToken(t_ArabicStemFilter *self, PyObject *args);

          static PyMethodDef t_ArabicStemFilter__methods_[] = {
            DECLARE_METHOD(t_ArabicStemFilter, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_ArabicStemFilter, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_ArabicStemFilter, incrementToken, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          static PyType_Slot PY_TYPE_SLOTS(ArabicStemFilter)[] = {
            { Py_tp_methods, t_ArabicStemFilter__methods_ },
            { Py_tp_init, (void *) t_ArabicStemFilter_init_ },
            { 0, NULL }
          };

          static PyType_Def *PY_TYPE_BASES(ArabicStemFilter)[] = {
            &PY_TYPE_DEF(::org::apache::lucene::analysis::TokenFilter),
            NULL
          };

          DEFINE_TYPE(ArabicStemFilter, t_ArabicStemFilter, ArabicStemFilter);

          void t_ArabicStemFilter::install(PyObject *module)
          {
            installType(&PY_TYPE(ArabicStemFilter), &PY_TYPE_DEF(ArabicStemFilter), module, "ArabicStemFilter", 0);
          }

          void t_ArabicStemFilter::initialize(PyObject *module)
          {
            PyObject_SetAttrString((PyObject *) PY_TYPE(ArabicStemFilter), "class_", make_descriptor(ArabicStemFilter::initializeClass, 1));
            PyObject_SetAttrString((PyObject *) PY_TYPE(ArabicStemFilter), "wrapfn_", make_descriptor(t_ArabicStemFilter::wrap_jobject));
            PyObject_SetAttrString((PyObject *) PY_TYPE(ArabicStemFilter), "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_ArabicStemFilter_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, ArabicStemFilter::initializeClass, 1)))
              return NULL;
            return t_ArabicStemFilter::wrap_Object(ArabicStemFilter(((t_ArabicStemFilter *) arg)->object.this$));
          }
          static PyObject *t_ArabicStemFilter_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, ArabicStemFilter::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_ArabicStemFilter_init_(t_ArabicStemFilter *self, PyObject *args, PyObject *kwds)
          {
            ::org::apache::lucene::analysis::TokenStream a0((jobject) NULL);
            ArabicStemFilter object((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::analysis::TokenStream::initializeClass, &a0))
            {
              INT_CALL(object = ArabicStemFilter(a0));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_ArabicStemFilter_incrementToken(t_ArabicStemFilter *self, PyObject *args)
          {
            jboolean result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.incrementToken());
              Py_RETURN_BOOL(result);
            }

            return callSuper(PY_TYPE(ArabicStemFilter), (PyObject *) self, "incrementToken", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/cz/CzechStemmer.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace cz {

          ::java::lang::Class *CzechStemmer::class$ = NULL;
          jmethodID *CzechStemmer::mids$ = NULL;
          bool CzechStemmer::live$ = false;

          jclass CzechStemmer::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/cz/CzechStemmer");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_f2cc1bce94666404] = env->getMethodID(cls, "<init>", "()V");
              mids$[mid_stem_d4655f2a19359017] = env->getMethodID(cls, "stem", "([CI)I");

              class$ = new ::java::lang::Class(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          CzechStemmer::CzechStemmer() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_f2cc1bce94666404)) {}

          jint CzechStemmer::stem(const JArray< jchar > & a0, jint a1) const
          {
            return env->callIntMethod(this$, mids$[mid_stem_d4655f2a19359017], a0.this$, a1);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace cz {
          static PyObject *t_CzechStemmer_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_CzechStemmer_instance_(PyTypeObject *type, PyObject *arg);
          static int t_CzechStemmer_init_(t_CzechStemmer *self, PyObject *args, PyObject *kwds);
          static PyObject *t_CzechStemmer_stem(t_CzechStemmer *self, PyObject *args);

          static PyMethodDef t_CzechStemmer__methods_[] = {
            DECLARE_METHOD(t_CzechStemmer, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_CzechStemmer, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_CzechStemmer, stem, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          static PyType_Slot PY_TYPE_SLOTS(CzechStemmer)[] = {
            { Py_tp_methods, t_CzechStemmer__methods_ },
            { Py_tp_init, (void *) t_CzechStemmer_init_ },
            { 0, NULL }
          };

          static PyType_Def *PY_TYPE_BASES(CzechStemmer)[] = {
            &PY_TYPE_DEF(::java::lang::Object),
            NULL
          };

          DEFINE_TYPE(CzechStemmer, t_CzechStemmer, CzechStemmer);

          void t_CzechStemmer::install(PyObject *module)
          {
            installType(&PY_TYPE(CzechStemmer), &PY_TYPE_DEF(CzechStemmer), module, "CzechStemmer", 0);
          }

          void t_CzechStemmer::initialize(PyObject *module)
          {
            PyObject_SetAttrString((PyObject *) PY_TYPE(CzechStemmer), "class_", make_descriptor(CzechStemmer::initializeClass, 1));
            PyObject_SetAttrString((PyObject *) PY_TYPE(CzechStemmer), "wrapfn_", make_descriptor(t_CzechStemmer::wrap_jobject));
            PyObject_SetAttrString((PyObject *) PY_TYPE(CzechStemmer), "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_CzechStemmer_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, CzechStemmer::initializeClass, 1)))
              return NULL;
            return t_CzechStemmer::wrap_Object(CzechStemmer(((t_CzechStemmer *) arg)->object.this$));
          }
          static PyObject *t_CzechStemmer_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, CzechStemmer::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_CzechStemmer_init_(t_CzechStemmer *self, PyObject *args, PyObject *kwds)
          {
            CzechStemmer object((jobject) NULL);

            INT_CALL(object = CzechStemmer());
            self->object = object;

            return 0;
          }

          static PyObject *t_CzechStemmer_stem(t_CzechStemmer *self, PyObject *args)
          {
            JArray< jchar > a0((jobject) NULL);
            jint a1;
            jint result;

            if (!parseArgs(args, "[CI", &a0, &a1))
            {
              OBJ_CALL(result = self->object.stem(a0, a1));
              return PyLong_FromLong((long) result);
            }

            PyErr_SetArgsError((PyObject *) self, "stem", args);
            return NULL;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/fa/PersianCharFilterFactory.h"
#include "java/util/Map.h"
#include "java/lang/String.h"
#include "java/io/Reader.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace fa {

          ::java::lang::Class *PersianCharFilterFactory::class$ = NULL;
          jmethodID *PersianCharFilterFactory::mids$ = NULL;
          bool PersianCharFilterFactory::live$ = false;
          ::java::lang::String *PersianCharFilterFactory::NAME = NULL;

          jclass PersianCharFilterFactory::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/fa/PersianCharFilterFactory");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_408bd889ee3beae5] = env->getMethodID(cls, "<init>", "(Ljava/util/Map;)V");
              mids$[mid_create_e71c53e25a234d7d] = env->getMethodID(cls, "create", "(Ljava/io/Reader;)Ljava/io/Reader;");
              mids$[mid_normalize_e71c53e25a234d7d] = env->getMethodID(cls, "normalize", "(Ljava/io/Reader;)Ljava/io/Reader;");

              class$ = new ::java::lang::Class(cls);
              cls = (jclass) class$->this$;

              NAME = new ::java::lang::String(env->getStaticObjectField(cls, "NAME", "Ljava/lang/String;"));
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          PersianCharFilterFactory::PersianCharFilterFactory(const ::java::util::Map & a0) : ::org::apache::lucene::analysis::util::CharFilterFactory(env->newObject(initializeClass, &mids$, mid_init$_408bd889ee3beae5, a0.this$)) {}

          ::java::io::Reader PersianCharFilterFactory::create(const ::java::io::Reader & a0) const
          {
            return ::java::io::Reader(env->callObjectMethod(this$, mids$[mid_create_e71c53e25a234d7d], a0.this$));
          }

          ::java::io::Reader PersianCharFilterFactory::normalize(const ::java::io::Reader & a0) const
          {
            return ::java::io::Reader(env->callObjectMethod(this$, mids$[mid_normalize_e71c53e25a234d7d], a0.this$));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace fa {
          static PyObject *t_PersianCharFilterFactory_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_PersianCharFilterFactory_instance_(PyTypeObject *type, PyObject *arg);
          static int t_PersianCharFilterFactory_init_(t_PersianCharFilterFactory *self, PyObject *args, PyObject *kwds);
          static PyObject *t_PersianCharFilterFactory_create(t_PersianCharFilterFactory *self, PyObject *args);
          static PyObject *t_PersianCharFilterFactory_normalize(t_PersianCharFilterFactory *self, PyObject *args);

          static PyMethodDef t_PersianCharFilterFactory__methods_[] = {
            DECLARE_METHOD(t_PersianCharFilterFactory, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_PersianCharFilterFactory, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_PersianCharFilterFactory, create, METH_VARARGS),
            DECLARE_METHOD(t_PersianCharFilterFactory, normalize, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          static PyType_Slot PY_TYPE_SLOTS(PersianCharFilterFactory)[] = {
            { Py_tp_methods, t_PersianCharFilterFactory__methods_ },
            { Py_tp_init, (void *) t_PersianCharFilterFactory_init_ },
            { 0, NULL }
          };

          static PyType_Def *PY_TYPE_BASES(PersianCharFilterFactory)[] = {
            &PY_TYPE_DEF(::org::apache::lucene::analysis::util::CharFilterFactory),
            NULL
          };

          DEFINE_TYPE(PersianCharFilterFactory, t_PersianCharFilterFactory, PersianCharFilterFactory);

          void t_PersianCharFilterFactory::install(PyObject *module)
          {
            installType(&PY_TYPE(PersianCharFilterFactory), &PY_TYPE_DEF(PersianCharFilterFactory), module, "PersianCharFilterFactory", 0);
          }

          void t_PersianCharFilterFactory::initialize(PyObject *module)
          {
            PyObject_SetAttrString((PyObject *) PY_TYPE(PersianCharFilterFactory), "class_", make_descriptor(PersianCharFilterFactory::initializeClass, 1));
            PyObject_SetAttrString((PyObject *) PY_TYPE(PersianCharFilterFactory), "wrapfn_", make_descriptor(t_PersianCharFilterFactory::wrap_jobject));
            PyObject_SetAttrString((PyObject *) PY_TYPE(PersianCharFilterFactory), "boxfn_", make_descriptor(boxObject));
            env->getClass(PersianCharFilterFactory::initializeClass);
            PyObject_SetAttrString((PyObject *) PY_TYPE(PersianCharFilterFactory), "NAME", make_descriptor(j2p(*PersianCharFilterFactory::NAME)));
          }

          static PyObject *t_PersianCharFilterFactory_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, PersianCharFilterFactory::initializeClass, 1)))
              return NULL;
            return t_PersianCharFilterFactory::wrap_Object(PersianCharFilterFactory(((t_PersianCharFilterFactory *) arg)->object.this$));
          }
          static PyObject *t_PersianCharFilterFactory_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, PersianCharFilterFactory::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_PersianCharFilterFactory_init_(t_PersianCharFilterFactory *self, PyObject *args, PyObject *kwds)
          {
            ::java::util::Map a0((jobject) NULL);
            PyTypeObject **p0;
            PersianCharFilterFactory object((jobject) NULL);

            if (!parseArgs(args, "K", ::java::util::Map::initializeClass, &a0, &p0, ::java::util::t_Map::parameters_))
            {
              INT_CALL(object = PersianCharFilterFactory(a0));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_PersianCharFilterFactory_create(t_PersianCharFilterFactory *self, PyObject *args)
          {
            ::java::io::Reader a0((jobject) NULL);
            ::java::io::Reader result((jobject) NULL);

            if (!parseArgs(args, "k", ::java::io::Reader::initializeClass, &a0))
            {
              OBJ_CALL(result = self->object.create(a0));
              return ::java::io::t_Reader::wrap_Object(result);
            }

            return callSuper(PY_TYPE(PersianCharFilterFactory), (PyObject *) self, "create", args, 2);
          }

          static PyObject *t_PersianCharFilterFactory_normalize(t_PersianCharFilterFactory *self, PyObject *args)
          {
            ::java::io::Reader a0((jobject) NULL);
            ::java::io::Reader result((jobject) NULL);

            if (!parseArgs(args, "k", ::java::io::Reader::initializeClass, &a0))
            {
              OBJ_CALL(result = self->object.normalize(a0));
              return ::java::io::t_Reader::wrap_Object(result);
            }

            return callSuper(PY_TYPE(PersianCharFilterFactory), (PyObject *) self, "normalize", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/index/SegmentInfos$FindSegmentsFile.h"
#include "org/apache/lucene/index/IndexCommit.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/store/Directory.h"
#include "java/io/IOException.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {

        ::java::lang::Class *SegmentInfos$FindSegmentsFile::class$ = NULL;
        jmethodID *SegmentInfos$FindSegmentsFile::mids$ = NULL;
        bool SegmentInfos$FindSegmentsFile::live$ = false;

        jclass SegmentInfos$FindSegmentsFile::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/index/SegmentInfos$FindSegmentsFile");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_c51fd9fb1cf0392d] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/store/Directory;)V");
            mids$[mid_run_d6bcd06f3102c4d9] = env->getMethodID(cls, "run", "()Ljava/lang/Object;");
            mids$[mid_run_a78fd18a78411297] = env->getMethodID(cls, "run", "(Lorg/apache/lucene/index/IndexCommit;)Ljava/lang/Object;");
            mids$[mid_doBody_c0a3c3394484d296] = env->getMethodID(cls, "doBody", "(Ljava/lang/String;)Ljava/lang/Object;");

            class$ = new ::java::lang::Class(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        SegmentInfos$FindSegmentsFile::SegmentInfos$FindSegmentsFile(const ::org::apache::lucene::store::Directory & a0) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_c51fd9fb1cf0392d, a0.this$)) {}

        ::java::lang::Object SegmentInfos$FindSegmentsFile::run() const
        {
          return ::java::lang::Object(env->callObjectMethod(this$, mids$[mid_run_d6bcd06f3102c4d9]));
        }

        ::java::lang::Object SegmentInfos$FindSegmentsFile::run(const ::org::apache::lucene::index::IndexCommit & a0) const
        {
          return ::java::lang::Object(env->callObjectMethod(this$, mids$[mid_run_a78fd18a78411297], a0.this$));
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {
        static PyObject *t_SegmentInfos$FindSegmentsFile_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_SegmentInfos$FindSegmentsFile_instance_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_SegmentInfos$FindSegmentsFile_of_(t_SegmentInfos$FindSegmentsFile *self, PyObject *args);
        static int t_SegmentInfos$FindSegmentsFile_init_(t_SegmentInfos$FindSegmentsFile *self, PyObject *args, PyObject *kwds);
        static PyObject *t_SegmentInfos$FindSegmentsFile_run(t_SegmentInfos$FindSegmentsFile *self, PyObject *args);
        static PyObject *t_SegmentInfos$FindSegmentsFile_get__parameters_(t_SegmentInfos$FindSegmentsFile *self, void *data);
        static PyGetSetDef t_SegmentInfos$FindSegmentsFile__fields_[] = {
          DECLARE_GET_FIELD(t_SegmentInfos$FindSegmentsFile, parameters_),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_SegmentInfos$FindSegmentsFile__methods_[] = {
          DECLARE_METHOD(t_SegmentInfos$FindSegmentsFile, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_SegmentInfos$FindSegmentsFile, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_SegmentInfos$FindSegmentsFile, of_, METH_VARARGS),
          DECLARE_METHOD(t_SegmentInfos$FindSegmentsFile, run, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        static PyType_Slot PY_TYPE_SLOTS(SegmentInfos$FindSegmentsFile)[] = {
          { Py_tp_methods, t_SegmentInfos$FindSegmentsFile__methods_ },
          { Py_tp_init, (void *) t_SegmentInfos$FindSegmentsFile_init_ },
          { Py_tp_getset, t_SegmentInfos$FindSegmentsFile__fields_ },
          { 0, NULL }
        };

        static PyType_Def *PY_TYPE_BASES(SegmentInfos$FindSegmentsFile)[] = {
          &PY_TYPE_DEF(::java::lang::Object),
          NULL
        };

        DEFINE_TYPE(SegmentInfos$FindSegmentsFile, t_SegmentInfos$FindSegmentsFile, SegmentInfos$FindSegmentsFile);
        PyObject *t_SegmentInfos$FindSegmentsFile::wrap_Object(const SegmentInfos$FindSegmentsFile& object, PyTypeObject *p0)
        {
          PyObject *obj = t_SegmentInfos$FindSegmentsFile::wrap_Object(object);
          if (obj != NULL && obj != Py_None)
          {
            t_SegmentInfos$FindSegmentsFile *self = (t_SegmentInfos$FindSegmentsFile *) obj;
            self->parameters[0] = p0;
          }
          return obj;
        }

        PyObject *t_SegmentInfos$FindSegmentsFile::wrap_jobject(const jobject& object, PyTypeObject *p0)
        {
          PyObject *obj = t_SegmentInfos$FindSegmentsFile::wrap_jobject(object);
          if (obj != NULL && obj != Py_None)
          {
            t_SegmentInfos$FindSegmentsFile *self = (t_SegmentInfos$FindSegmentsFile *) obj;
            self->parameters[0] = p0;
          }
          return obj;
        }

        void t_SegmentInfos$FindSegmentsFile::install(PyObject *module)
        {
          installType(&PY_TYPE(SegmentInfos$FindSegmentsFile), &PY_TYPE_DEF(SegmentInfos$FindSegmentsFile), module, "SegmentInfos$FindSegmentsFile", 0);
        }

        void t_SegmentInfos$FindSegmentsFile::initialize(PyObject *module)
        {
          PyObject_SetAttrString((PyObject *) PY_TYPE(SegmentInfos$FindSegmentsFile), "class_", make_descriptor(SegmentInfos$FindSegmentsFile::initializeClass, 1));
          PyObject_SetAttrString((PyObject *) PY_TYPE(SegmentInfos$FindSegmentsFile), "wrapfn_", make_descriptor(t_SegmentInfos$FindSegmentsFile::wrap_jobject));
          PyObject_SetAttrString((PyObject *) PY_TYPE(SegmentInfos$FindSegmentsFile), "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_SegmentInfos$FindSegmentsFile_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, SegmentInfos$FindSegmentsFile::initializeClass, 1)))
            return NULL;
          return t_SegmentInfos$FindSegmentsFile::wrap_Object(SegmentInfos$FindSegmentsFile(((t_SegmentInfos$FindSegmentsFile *) arg)->object.this$));
        }
        static PyObject *t_SegmentInfos$FindSegmentsFile_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, SegmentInfos$FindSegmentsFile::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static PyObject *t_SegmentInfos$FindSegmentsFile_of_(t_SegmentInfos$FindSegmentsFile *self, PyObject *args)
        {
          if (!parseArg(args, "T", 1, &(self->parameters)))
            Py_RETURN_SELF;
          return PyErr_SetArgsError((PyObject *) self, "of_", args);
        }

        static int t_SegmentInfos$FindSegmentsFile_init_(t_SegmentInfos$FindSegmentsFile *self, PyObject *args, PyObject *kwds)
        {
          ::org::apache::lucene::store::Directory a0((jobject) NULL);
          SegmentInfos$FindSegmentsFile object((jobject) NULL);

          if (!parseArgs(args, "k", ::org::apache::lucene::store::Directory::initializeClass, &a0))
          {
            INT_CALL(object = SegmentInfos$FindSegmentsFile(a0));
            self->object = object;
          }
          else
          {
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }

        static PyObject *t_SegmentInfos$FindSegmentsFile_run(t_SegmentInfos$FindSegmentsFile *self, PyObject *args)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 0:
            {
              ::java::lang::Object result((jobject) NULL);
              OBJ_CALL(result = self->object.run());
              return self->parameters[0] != NULL ? wrapType(self->parameters[0], result.this$) : ::java::lang::t_Object::wrap_Object(result);
            }
            break;
           case 1:
            {
              ::org::apache::lucene::index::IndexCommit a0((jobject) NULL);
              ::java::lang::Object result((jobject) NULL);

              if (!parseArgs(args, "k", ::org::apache::lucene::index::IndexCommit::initializeClass, &a0))
              {
                OBJ_CALL(result = self->object.run(a0));
                return self->parameters[0] != NULL ? wrapType(self->parameters[0], result.this$) : ::java::lang::t_Object::wrap_Object(result);
              }
            }
          }

          PyErr_SetArgsError((PyObject *) self, "run", args);
          return NULL;
        }
        static PyObject *t_SegmentInfos$FindSegmentsFile_get__parameters_(t_SegmentInfos$FindSegmentsFile *self, void *data)
        {
          return typeParameters(self->parameters, sizeof(self->parameters));
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/document/TextField.h"
#include "org/apache/lucene/document/FieldType.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/analysis/TokenStream.h"
#include "org/apache/lucene/document/Field$Store.h"
#include "java/lang/String.h"
#include "java/io/Reader.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace document {

        ::java::lang::Class *TextField::class$ = NULL;
        jmethodID *TextField::mids$ = NULL;
        bool TextField::live$ = false;
        ::org::apache::lucene::document::FieldType *TextField::TYPE_NOT_STORED = NULL;
        ::org::apache::lucene::document::FieldType *TextField::TYPE_STORED = NULL;

        jclass TextField::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/document/TextField");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_c5ab6d211d8d31bc] = env->getMethodID(cls, "<init>", "(Ljava/lang/String;Lorg/apache/lucene/analysis/TokenStream;)V");
            mids$[mid_init$_abe8262cb4e23e3b] = env->getMethodID(cls, "<init>", "(Ljava/lang/String;Ljava/io/Reader;)V");
            mids$[mid_init$_d8dbec042659cb47] = env->getMethodID(cls, "<init>", "(Ljava/lang/String;Ljava/lang/String;Lorg/apache/lucene/document/Field$Store;)V");

            class$ = new ::java::lang::Class(cls);
            cls = (jclass) class$->this$;

            TYPE_NOT_STORED = new ::org::apache::lucene::document::FieldType(env->getStaticObjectField(cls, "TYPE_NOT_STORED", "Lorg/apache/lucene/document/FieldType;"));
            TYPE_STORED = new ::org::apache::lucene::document::FieldType(env->getStaticObjectField(cls, "TYPE_STORED", "Lorg/apache/lucene/document/FieldType;"));
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        TextField::TextField(const ::java::lang::String & a0, const ::org::apache::lucene::analysis::TokenStream & a1) : ::org::apache::lucene::document::Field(env->newObject(initializeClass, &mids$, mid_init$_c5ab6d211d8d31bc, a0.this$, a1.this$)) {}

        TextField::TextField(const ::java::lang::String & a0, const ::java::io::Reader & a1) : ::org::apache::lucene::document::Field(env->newObject(initializeClass, &mids$, mid_init$_abe8262cb4e23e3b, a0.this$, a1.this$)) {}

        TextField::TextField(const ::java::lang::String & a0, const ::java::lang::String & a1, const ::org::apache::lucene::document::Field$Store & a2) : ::org::apache::lucene::document::Field(env->newObject(initializeClass, &mids$, mid_init$_d8dbec042659cb47, a0.this$, a1.this$, a2.this$)) {}
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace document {
        static PyObject *t_TextField_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_TextField_instance_(PyTypeObject *type, PyObject *arg);
        static int t_TextField_init_(t_TextField *self, PyObject *args, PyObject *kwds);

        static PyMethodDef t_TextField__methods_[] = {
          DECLARE_METHOD(t_TextField, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_TextField, instance_, METH_O | METH_CLASS),
          { NULL, NULL, 0, NULL }
        };

        static PyType_Slot PY_TYPE_SLOTS(TextField)[] = {
          { Py_tp_methods, t_TextField__methods_ },
          { Py_tp_init, (void *) t_TextField_init_ },
          { 0, NULL }
        };

        static PyType_Def *PY_TYPE_BASES(TextField)[] = {
          &PY_TYPE_DEF(::org::apache::lucene::document::Field),
          NULL
        };

        DEFINE_TYPE(TextField, t_TextField, TextField);

        void t_TextField::install(PyObject *module)
        {
          installType(&PY_TYPE(TextField), &PY_TYPE_DEF(TextField), module, "TextField", 0);
        }

        void t_TextField::initialize(PyObject *module)
        {
          PyObject_SetAttrString((PyObject *) PY_TYPE(TextField), "class_", make_descriptor(TextField::initializeClass, 1));
          PyObject_SetAttrString((PyObject *) PY_TYPE(TextField), "wrapfn_", make_descriptor(t_TextField::wrap_jobject));
          PyObject_SetAttrString((PyObject *) PY_TYPE(TextField), "boxfn_", make_descriptor(boxObject));
          env->getClass(TextField::initializeClass);
          PyObject_SetAttrString((PyObject *) PY_TYPE(TextField), "TYPE_NOT_STORED", make_descriptor(::org::apache::lucene::document::t_FieldType::wrap_Object(*TextField::TYPE_NOT_STORED)));
          PyObject_SetAttrString((PyObject *) PY_TYPE(TextField), "TYPE_STORED", make_descriptor(::org::apache::lucene::document::t_FieldType::wrap_Object(*TextField::TYPE_STORED)));
        }

        static PyObject *t_TextField_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, TextField::initializeClass, 1)))
            return NULL;
          return t_TextField::wrap_Object(TextField(((t_TextField *) arg)->object.this$));
        }
        static PyObject *t_TextField_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, TextField::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_TextField_init_(t_TextField *self, PyObject *args, PyObject *kwds)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 2:
            {
              ::java::lang::String a0((jobject) NULL);
              ::org::apache::lucene::analysis::TokenStream a1((jobject) NULL);
              TextField object((jobject) NULL);

              if (!parseArgs(args, "sk", ::org::apache::lucene::analysis::TokenStream::initializeClass, &a0, &a1))
              {
                INT_CALL(object = TextField(a0, a1));
                self->object = object;
                break;
              }
            }
            {
              ::java::lang::String a0((jobject) NULL);
              ::java::io::Reader a1((jobject) NULL);
              TextField object((jobject) NULL);

              if (!parseArgs(args, "sk", ::java::io::Reader::initializeClass, &a0, &a1))
              {
                INT_CALL(object = TextField(a0, a1));
                self->object = object;
                break;
              }
            }
            goto err;
           case 3:
            {
              ::java::lang::String a0((jobject) NULL);
              ::java::lang::String a1((jobject) NULL);
              ::org::apache::lucene::document::Field$Store a2((jobject) NULL);
              PyTypeObject **p2;
              TextField object((jobject) NULL);

              if (!parseArgs(args, "ssK", ::org::apache::lucene::document::Field$Store::initializeClass, &a0, &a1, &a2, &p2, ::org::apache::lucene::document::t_Field$Store::parameters_))
              {
                INT_CALL(object = TextField(a0, a1, a2));
                self->object = object;
                break;
              }
            }
           default:
           err:
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/codecs/simpletext/SimpleTextSegmentInfoFormat.h"
#include "org/apache/lucene/store/IOContext.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/store/Directory.h"
#include "java/lang/String.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/index/SegmentInfo.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace codecs {
        namespace simpletext {

          ::java::lang::Class *SimpleTextSegmentInfoFormat::class$ = NULL;
          jmethodID *SimpleTextSegmentInfoFormat::mids$ = NULL;
          bool SimpleTextSegmentInfoFormat::live$ = false;
          ::java::lang::String *SimpleTextSegmentInfoFormat::SI_EXTENSION = NULL;

          jclass SimpleTextSegmentInfoFormat::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/codecs/simpletext/SimpleTextSegmentInfoFormat");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_f2cc1bce94666404] = env->getMethodID(cls, "<init>", "()V");
              mids$[mid_read_ca83998f161c8fae] = env->getMethodID(cls, "read", "(Lorg/apache/lucene/store/Directory;Ljava/lang/String;[BLorg/apache/lucene/store/IOContext;)Lorg/apache/lucene/index/SegmentInfo;");
              mids$[mid_write_42bd8d9f441f9252] = env->getMethodID(cls, "write", "(Lorg/apache/lucene/store/Directory;Lorg/apache/lucene/index/SegmentInfo;Lorg/apache/lucene/store/IOContext;)V");

              class$ = new ::java::lang::Class(cls);
              cls = (jclass) class$->this$;

              SI_EXTENSION = new ::java::lang::String(env->getStaticObjectField(cls, "SI_EXTENSION", "Ljava/lang/String;"));
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          SimpleTextSegmentInfoFormat::SimpleTextSegmentInfoFormat() : ::org::apache::lucene::codecs::SegmentInfoFormat(env->newObject(initializeClass, &mids$, mid_init$_f2cc1bce94666404)) {}

          ::org::apache::lucene::index::SegmentInfo SimpleTextSegmentInfoFormat::read(const ::org::apache::lucene::store::Directory & a0, const ::java::lang::String & a1, const JArray< jbyte > & a2, const ::org::apache::lucene::store::IOContext & a3) const
          {
            return ::org::apache::lucene::index::SegmentInfo(env->callObjectMethod(this$, mids$[mid_read_ca83998f161c8fae], a0.this$, a1.this$, a2.this$, a3.this$));
          }

          void SimpleTextSegmentInfoFormat::write(const ::org::apache::lucene::store::Directory & a0, const ::org::apache::lucene::index::SegmentInfo & a1, const ::org::apache::lucene::store::IOContext & a2) const
          {
            env->callVoidMethod(this$, mids$[mid_write_42bd8d9f441f9252], a0.this$, a1.this$, a2.this$);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace codecs {
        namespace simpletext {
          static PyObject *t_SimpleTextSegmentInfoFormat_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_SimpleTextSegmentInfoFormat_instance_(PyTypeObject *type, PyObject *arg);
          static int t_SimpleTextSegmentInfoFormat_init_(t_SimpleTextSegmentInfoFormat *self, PyObject *args, PyObject *kwds);
          static PyObject *t_SimpleTextSegmentInfoFormat_read(t_SimpleTextSegmentInfoFormat *self, PyObject *args);
          static PyObject *t_SimpleTextSegmentInfoFormat_write(t_SimpleTextSegmentInfoFormat *self, PyObject *args);

          static PyMethodDef t_SimpleTextSegmentInfoFormat__methods_[] = {
            DECLARE_METHOD(t_SimpleTextSegmentInfoFormat, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_SimpleTextSegmentInfoFormat, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_SimpleTextSegmentInfoFormat, read, METH_VARARGS),
            DECLARE_METHOD(t_SimpleTextSegmentInfoFormat, write, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          static PyType_Slot PY_TYPE_SLOTS(SimpleTextSegmentInfoFormat)[] = {
            { Py_tp_methods, t_SimpleTextSegmentInfoFormat__methods_ },
            { Py_tp_init, (void *) t_SimpleTextSegmentInfoFormat_init_ },
            { 0, NULL }
          };

          static PyType_Def *PY_TYPE_BASES(SimpleTextSegmentInfoFormat)[] = {
            &PY_TYPE_DEF(::org::apache::lucene::codecs::SegmentInfoFormat),
            NULL
          };

          DEFINE_TYPE(SimpleTextSegmentInfoFormat, t_SimpleTextSegmentInfoFormat, SimpleTextSegmentInfoFormat);

          void t_SimpleTextSegmentInfoFormat::install(PyObject *module)
          {
            installType(&PY_TYPE(SimpleTextSegmentInfoFormat), &PY_TYPE_DEF(SimpleTextSegmentInfoFormat), module, "SimpleTextSegmentInfoFormat", 0);
          }

          void t_SimpleTextSegmentInfoFormat::initialize(PyObject *module)
          {
            PyObject_SetAttrString((PyObject *) PY_TYPE(SimpleTextSegmentInfoFormat), "class_", make_descriptor(SimpleTextSegmentInfoFormat::initializeClass, 1));
            PyObject_SetAttrString((PyObject *) PY_TYPE(SimpleTextSegmentInfoFormat), "wrapfn_", make_descriptor(t_SimpleTextSegmentInfoFormat::wrap_jobject));
            PyObject_SetAttrString((PyObject *) PY_TYPE(SimpleTextSegmentInfoFormat), "boxfn_", make_descriptor(boxObject));
            env->getClass(SimpleTextSegmentInfoFormat::initializeClass);
            PyObject_SetAttrString((PyObject *) PY_TYPE(SimpleTextSegmentInfoFormat), "SI_EXTENSION", make_descriptor(j2p(*SimpleTextSegmentInfoFormat::SI_EXTENSION)));
          }

          static PyObject *t_SimpleTextSegmentInfoFormat_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, SimpleTextSegmentInfoFormat::initializeClass, 1)))
              return NULL;
            return t_SimpleTextSegmentInfoFormat::wrap_Object(SimpleTextSegmentInfoFormat(((t_SimpleTextSegmentInfoFormat *) arg)->object.this$));
          }
          static PyObject *t_SimpleTextSegmentInfoFormat_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, SimpleTextSegmentInfoFormat::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_SimpleTextSegmentInfoFormat_init_(t_SimpleTextSegmentInfoFormat *self, PyObject *args, PyObject *kwds)
          {
            SimpleTextSegmentInfoFormat object((jobject) NULL);

            INT_CALL(object = SimpleTextSegmentInfoFormat());
            self->object = object;

            return 0;
          }

          static PyObject *t_SimpleTextSegmentInfoFormat_read(t_SimpleTextSegmentInfoFormat *self, PyObject *args)
          {
            ::org::apache::lucene::store::Directory a0((jobject) NULL);
            ::java::lang::String a1((jobject) NULL);
            JArray< jbyte > a2((jobject) NULL);
            ::org::apache::lucene::store::IOContext a3((jobject) NULL);
            ::org::apache::lucene::index::SegmentInfo result((jobject) NULL);

            if (!parseArgs(args, "ks[Bk", ::org::apache::lucene::store::Directory::initializeClass, ::org::apache::lucene::store::IOContext::initializeClass, &a0, &a1, &a2, &a3))
            {
              OBJ_CALL(result = self->object.read(a0, a1, a2, a3));
              return ::org::apache::lucene::index::t_SegmentInfo::wrap_Object(result);
            }

            return callSuper(PY_TYPE(SimpleTextSegmentInfoFormat), (PyObject *) self, "read", args, 2);
          }

          static PyObject *t_SimpleTextSegmentInfoFormat_write(t_SimpleTextSegmentInfoFormat *self, PyObject *args)
          {
            ::org::apache::lucene::store::Directory a0((jobject) NULL);
            ::org::apache::lucene::index::SegmentInfo a1((jobject) NULL);
            ::org::apache::lucene::store::IOContext a2((jobject) NULL);

            if (!parseArgs(args, "kkk", ::org::apache::lucene::store::Directory::initializeClass, ::org::apache::lucene::index::SegmentInfo::initializeClass, ::org::apache::lucene::store::IOContext::initializeClass, &a0, &a1, &a2))
            {
              OBJ_CALL(self->object.write(a0, a1, a2));
              Py_RETURN_NONE;
            }

            return callSuper(PY_TYPE(SimpleTextSegmentInfoFormat), (PyObject *) self, "write", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/PhraseWildcardQuery$TermBytesTermState.h"
#include "org/apache/lucene/util/BytesRef.h"
#include "org/apache/lucene/index/TermState.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {

        ::java::lang::Class *PhraseWildcardQuery$TermBytesTermState::class$ = NULL;
        jmethodID *PhraseWildcardQuery$TermBytesTermState::mids$ = NULL;
        bool PhraseWildcardQuery$TermBytesTermState::live$ = false;

        jclass PhraseWildcardQuery$TermBytesTermState::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/search/PhraseWildcardQuery$TermBytesTermState");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_59a5c9565dacabef] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/util/BytesRef;Lorg/apache/lucene/index/TermState;)V");
            mids$[mid_toString_db9b55ba01e03e4b] = env->getMethodID(cls, "toString", "()Ljava/lang/String;");

            class$ = new ::java::lang::Class(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        PhraseWildcardQuery$TermBytesTermState::PhraseWildcardQuery$TermBytesTermState(const ::org::apache::lucene::util::BytesRef & a0, const ::org::apache::lucene::index::TermState & a1) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_59a5c9565dacabef, a0.this$, a1.this$)) {}

        ::java::lang::String PhraseWildcardQuery$TermBytesTermState::toString() const
        {
          return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_db9b55ba01e03e4b]));
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        static PyObject *t_PhraseWildcardQuery$TermBytesTermState_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_PhraseWildcardQuery$TermBytesTermState_instance_(PyTypeObject *type, PyObject *arg);
        static int t_PhraseWildcardQuery$TermBytesTermState_init_(t_PhraseWildcardQuery$TermBytesTermState *self, PyObject *args, PyObject *kwds);
        static PyObject *t_PhraseWildcardQuery$TermBytesTermState_toString(t_PhraseWildcardQuery$TermBytesTermState *self, PyObject *args);

        static PyMethodDef t_PhraseWildcardQuery$TermBytesTermState__methods_[] = {
          DECLARE_METHOD(t_PhraseWildcardQuery$TermBytesTermState, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_PhraseWildcardQuery$TermBytesTermState, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_PhraseWildcardQuery$TermBytesTermState, toString, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        static PyType_Slot PY_TYPE_SLOTS(PhraseWildcardQuery$TermBytesTermState)[] = {
          { Py_tp_methods, t_PhraseWildcardQuery$TermBytesTermState__methods_ },
          { Py_tp_init, (void *) t_PhraseWildcardQuery$TermBytesTermState_init_ },
          { 0, NULL }
        };

        static PyType_Def *PY_TYPE_BASES(PhraseWildcardQuery$TermBytesTermState)[] = {
          &PY_TYPE_DEF(::java::lang::Object),
          NULL
        };

        DEFINE_TYPE(PhraseWildcardQuery$TermBytesTermState, t_PhraseWildcardQuery$TermBytesTermState, PhraseWildcardQuery$TermBytesTermState);

        void t_PhraseWildcardQuery$TermBytesTermState::install(PyObject *module)
        {
          installType(&PY_TYPE(PhraseWildcardQuery$TermBytesTermState), &PY_TYPE_DEF(PhraseWildcardQuery$TermBytesTermState), module, "PhraseWildcardQuery$TermBytesTermState", 0);
        }

        void t_PhraseWildcardQuery$TermBytesTermState::initialize(PyObject *module)
        {
          PyObject_SetAttrString((PyObject *) PY_TYPE(PhraseWildcardQuery$TermBytesTermState), "class_", make_descriptor(PhraseWildcardQuery$TermBytesTermState::initializeClass, 1));
          PyObject_SetAttrString((PyObject *) PY_TYPE(PhraseWildcardQuery$TermBytesTermState), "wrapfn_", make_descriptor(t_PhraseWildcardQuery$TermBytesTermState::wrap_jobject));
          PyObject_SetAttrString((PyObject *) PY_TYPE(PhraseWildcardQuery$TermBytesTermState), "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_PhraseWildcardQuery$TermBytesTermState_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, PhraseWildcardQuery$TermBytesTermState::initializeClass, 1)))
            return NULL;
          return t_PhraseWildcardQuery$TermBytesTermState::wrap_Object(PhraseWildcardQuery$TermBytesTermState(((t_PhraseWildcardQuery$TermBytesTermState *) arg)->object.this$));
        }
        static PyObject *t_PhraseWildcardQuery$TermBytesTermState_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, PhraseWildcardQuery$TermBytesTermState::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_PhraseWildcardQuery$TermBytesTermState_init_(t_PhraseWildcardQuery$TermBytesTermState *self, PyObject *args, PyObject *kwds)
        {
          ::org::apache::lucene::util::BytesRef a0((jobject) NULL);
          ::org::apache::lucene::index::TermState a1((jobject) NULL);
          PhraseWildcardQuery$TermBytesTermState object((jobject) NULL);

          if (!parseArgs(args, "kk", ::org::apache::lucene::util::BytesRef::initializeClass, ::org::apache::lucene::index::TermState::initializeClass, &a0, &a1))
          {
            INT_CALL(object = PhraseWildcardQuery$TermBytesTermState(a0, a1));
            self->object = object;
          }
          else
          {
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }

        static PyObject *t_PhraseWildcardQuery$TermBytesTermState_toString(t_PhraseWildcardQuery$TermBytesTermState *self, PyObject *args)
        {
          ::java::lang::String result((jobject) NULL);

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.toString());
            return j2p(result);
          }

          return callSuper(PY_TYPE(PhraseWildcardQuery$TermBytesTermState), (PyObject *) self, "toString", args, 2);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/MultiPhraseQuery$Builder.h"
#include "org/apache/lucene/search/MultiPhraseQuery$Builder.h"
#include "org/apache/lucene/index/Term.h"
#include "org/apache/lucene/search/MultiPhraseQuery.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {

        ::java::lang::Class *MultiPhraseQuery$Builder::class$ = NULL;
        jmethodID *MultiPhraseQuery$Builder::mids$ = NULL;
        bool MultiPhraseQuery$Builder::live$ = false;

        jclass MultiPhraseQuery$Builder::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/search/MultiPhraseQuery$Builder");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_f2cc1bce94666404] = env->getMethodID(cls, "<init>", "()V");
            mids$[mid_init$_2c3dc05defe51ed9] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/search/MultiPhraseQuery;)V");
            mids$[mid_add_89a0ab165d049f48] = env->getMethodID(cls, "add", "([Lorg/apache/lucene/index/Term;)Lorg/apache/lucene/search/MultiPhraseQuery$Builder;");
            mids$[mid_add_820acf80f3dba827] = env->getMethodID(cls, "add", "(Lorg/apache/lucene/index/Term;)Lorg/apache/lucene/search/MultiPhraseQuery$Builder;");
            mids$[mid_add_c96bcfad5914236c] = env->getMethodID(cls, "add", "([Lorg/apache/lucene/index/Term;I)Lorg/apache/lucene/search/MultiPhraseQuery$Builder;");
            mids$[mid_build_b664e1331a96d42c] = env->getMethodID(cls, "build", "()Lorg/apache/lucene/search/MultiPhraseQuery;");
            mids$[mid_setSlop_3d9685074af57454] = env->getMethodID(cls, "setSlop", "(I)Lorg/apache/lucene/search/MultiPhraseQuery$Builder;");

            class$ = new ::java::lang::Class(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        MultiPhraseQuery$Builder::MultiPhraseQuery$Builder() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_f2cc1bce94666404)) {}

        MultiPhraseQuery$Builder::MultiPhraseQuery$Builder(const ::org::apache::lucene::search::MultiPhraseQuery & a0) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_2c3dc05defe51ed9, a0.this$)) {}

        MultiPhraseQuery$Builder MultiPhraseQuery$Builder::add(const JArray< ::org::apache::lucene::index::Term > & a0) const
        {
          return MultiPhraseQuery$Builder(env->callObjectMethod(this$, mids$[mid_add_89a0ab165d049f48], a0.this$));
        }

        MultiPhraseQuery$Builder MultiPhraseQuery$Builder::add(const ::org::apache::lucene::index::Term & a0) const
        {
          return MultiPhraseQuery$Builder(env->callObjectMethod(this$, mids$[mid_add_820acf80f3dba827], a0.this$));
        }

        MultiPhraseQuery$Builder MultiPhraseQuery$Builder::add(const JArray< ::org::apache::lucene::index::Term > & a0, jint a1) const
        {
          return MultiPhraseQuery$Builder(env->callObjectMethod(this$, mids$[mid_add_c96bcfad5914236c], a0.this$, a1));
        }

        ::org::apache::lucene::search::MultiPhraseQuery MultiPhraseQuery$Builder::build() const
        {
          return ::org::apache::lucene::search::MultiPhraseQuery(env->callObjectMethod(this$, mids$[mid_build_b664e1331a96d42c]));
        }

        MultiPhraseQuery$Builder MultiPhraseQuery$Builder::setSlop(jint a0) const
        {
          return MultiPhraseQuery$Builder(env->callObjectMethod(this$, mids$[mid_setSlop_3d9685074af57454], a0));
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        static PyObject *t_MultiPhraseQuery$Builder_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_MultiPhraseQuery$Builder_instance_(PyTypeObject *type, PyObject *arg);
        static int t_MultiPhraseQuery$Builder_init_(t_MultiPhraseQuery$Builder *self, PyObject *args, PyObject *kwds);
        static PyObject *t_MultiPhraseQuery$Builder_add(t_MultiPhraseQuery$Builder *self, PyObject *args);
        static PyObject *t_MultiPhraseQuery$Builder_build(t_MultiPhraseQuery$Builder *self);
        static PyObject *t_MultiPhraseQuery$Builder_setSlop(t_MultiPhraseQuery$Builder *self, PyObject *arg);
        static int t_MultiPhraseQuery$Builder_set__slop(t_MultiPhraseQuery$Builder *self, PyObject *arg, void *data);
        static PyGetSetDef t_MultiPhraseQuery$Builder__fields_[] = {
          DECLARE_SET_FIELD(t_MultiPhraseQuery$Builder, slop),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_MultiPhraseQuery$Builder__methods_[] = {
          DECLARE_METHOD(t_MultiPhraseQuery$Builder, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_MultiPhraseQuery$Builder, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_MultiPhraseQuery$Builder, add, METH_VARARGS),
          DECLARE_METHOD(t_MultiPhraseQuery$Builder, build, METH_NOARGS),
          DECLARE_METHOD(t_MultiPhraseQuery$Builder, setSlop, METH_O),
          { NULL, NULL, 0, NULL }
        };

        static PyType_Slot PY_TYPE_SLOTS(MultiPhraseQuery$Builder)[] = {
          { Py_tp_methods, t_MultiPhraseQuery$Builder__methods_ },
          { Py_tp_init, (void *) t_MultiPhraseQuery$Builder_init_ },
          { Py_tp_getset, t_MultiPhraseQuery$Builder__fields_ },
          { 0, NULL }
        };

        static PyType_Def *PY_TYPE_BASES(MultiPhraseQuery$Builder)[] = {
          &PY_TYPE_DEF(::java::lang::Object),
          NULL
        };

        DEFINE_TYPE(MultiPhraseQuery$Builder, t_MultiPhraseQuery$Builder, MultiPhraseQuery$Builder);

        void t_MultiPhraseQuery$Builder::install(PyObject *module)
        {
          installType(&PY_TYPE(MultiPhraseQuery$Builder), &PY_TYPE_DEF(MultiPhraseQuery$Builder), module, "MultiPhraseQuery$Builder", 0);
        }

        void t_MultiPhraseQuery$Builder::initialize(PyObject *module)
        {
          PyObject_SetAttrString((PyObject *) PY_TYPE(MultiPhraseQuery$Builder), "class_", make_descriptor(MultiPhraseQuery$Builder::initializeClass, 1));
          PyObject_SetAttrString((PyObject *) PY_TYPE(MultiPhraseQuery$Builder), "wrapfn_", make_descriptor(t_MultiPhraseQuery$Builder::wrap_jobject));
          PyObject_SetAttrString((PyObject *) PY_TYPE(MultiPhraseQuery$Builder), "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_MultiPhraseQuery$Builder_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, MultiPhraseQuery$Builder::initializeClass, 1)))
            return NULL;
          return t_MultiPhraseQuery$Builder::wrap_Object(MultiPhraseQuery$Builder(((t_MultiPhraseQuery$Builder *) arg)->object.this$));
        }
        static PyObject *t_MultiPhraseQuery$Builder_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, MultiPhraseQuery$Builder::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_MultiPhraseQuery$Builder_init_(t_MultiPhraseQuery$Builder *self, PyObject *args, PyObject *kwds)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 0:
            {
              MultiPhraseQuery$Builder object((jobject) NULL);

              INT_CALL(object = MultiPhraseQuery$Builder());
              self->object = object;
              break;
            }
           case 1:
            {
              ::org::apache::lucene::search::MultiPhraseQuery a0((jobject) NULL);
              MultiPhraseQuery$Builder object((jobject) NULL);

              if (!parseArgs(args, "k", ::org::apache::lucene::search::MultiPhraseQuery::initializeClass, &a0))
              {
                INT_CALL(object = MultiPhraseQuery$Builder(a0));
                self->object = object;
                break;
              }
            }
           default:
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }

        static PyObject *t_MultiPhraseQuery$Builder_add(t_MultiPhraseQuery$Builder *self, PyObject *args)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 1:
            {
              JArray< ::org::apache::lucene::index::Term > a0((jobject) NULL);
              MultiPhraseQuery$Builder result((jobject) NULL);

              if (!parseArgs(args, "[k", ::org::apache::lucene::index::Term::initializeClass, &a0))
              {
                OBJ_CALL(result = self->object.add(a0));
                return t_MultiPhraseQuery$Builder::wrap_Object(result);
              }
            }
            {
              ::org::apache::lucene::index::Term a0((jobject) NULL);
              MultiPhraseQuery$Builder result((jobject) NULL);

              if (!parseArgs(args, "k", ::org::apache::lucene::index::Term::initializeClass, &a0))
              {
                OBJ_CALL(result = self->object.add(a0));
                return t_MultiPhraseQuery$Builder::wrap_Object(result);
              }
            }
            break;
           case 2:
            {
              JArray< ::org::apache::lucene::index::Term > a0((jobject) NULL);
              jint a1;
              MultiPhraseQuery$Builder result((jobject) NULL);

              if (!parseArgs(args, "[kI", ::org::apache::lucene::index::Term::initializeClass, &a0, &a1))
              {
                OBJ_CALL(result = self->object.add(a0, a1));
                return t_MultiPhraseQuery$Builder::wrap_Object(result);
              }
            }
          }

          PyErr_SetArgsError((PyObject *) self, "add", args);
          return NULL;
        }

        static PyObject *t_MultiPhraseQuery$Builder_build(t_MultiPhraseQuery$Builder *self)
        {
          ::org::apache::lucene::search::MultiPhraseQuery result((jobject) NULL);
          OBJ_CALL(result = self->object.build());
          return ::org::apache::lucene::search::t_MultiPhraseQuery::wrap_Object(result);
        }

        static PyObject *t_MultiPhraseQuery$Builder_setSlop(t_MultiPhraseQuery$Builder *self, PyObject *arg)
        {
          jint a0;
          MultiPhraseQuery$Builder result((jobject) NULL);

          if (!parseArg(arg, "I", &a0))
          {
            OBJ_CALL(result = self->object.setSlop(a0));
            return t_MultiPhraseQuery$Builder::wrap_Object(result);
          }

          PyErr_SetArgsError((PyObject *) self, "setSlop", arg);
          return NULL;
        }

        static int t_MultiPhraseQuery$Builder_set__slop(t_MultiPhraseQuery$Builder *self, PyObject *arg, void *data)
        {
          {
            jint value;
            if (!parseArg(arg, "I", &value))
            {
              INT_CALL(self->object.setSlop(value));
              return 0;
            }
          }
          PyErr_SetArgsError((PyObject *) self, "slop", arg);
          return -1;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/spatial3d/geom/GeoSizeable.h"
#include "org/apache/lucene/spatial3d/geom/GeoPoint.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace spatial3d {
        namespace geom {

          ::java::lang::Class *GeoSizeable::class$ = NULL;
          jmethodID *GeoSizeable::mids$ = NULL;
          bool GeoSizeable::live$ = false;

          jclass GeoSizeable::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/spatial3d/geom/GeoSizeable");

              mids$ = new jmethodID[max_mid];
              mids$[mid_getCenter_9ece33e8c05297a2] = env->getMethodID(cls, "getCenter", "()Lorg/apache/lucene/spatial3d/geom/GeoPoint;");
              mids$[mid_getRadius_8c74b787998ce4bc] = env->getMethodID(cls, "getRadius", "()D");

              class$ = new ::java::lang::Class(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          ::org::apache::lucene::spatial3d::geom::GeoPoint GeoSizeable::getCenter() const
          {
            return ::org::apache::lucene::spatial3d::geom::GeoPoint(env->callObjectMethod(this$, mids$[mid_getCenter_9ece33e8c05297a2]));
          }

          jdouble GeoSizeable::getRadius() const
          {
            return env->callDoubleMethod(this$, mids$[mid_getRadius_8c74b787998ce4bc]);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace spatial3d {
        namespace geom {
          static PyObject *t_GeoSizeable_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_GeoSizeable_instance_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_GeoSizeable_getCenter(t_GeoSizeable *self);
          static PyObject *t_GeoSizeable_getRadius(t_GeoSizeable *self);
          static PyObject *t_GeoSizeable_get__center(t_GeoSizeable *self, void *data);
          static PyObject *t_GeoSizeable_get__radius(t_GeoSizeable *self, void *data);
          static PyGetSetDef t_GeoSizeable__fields_[] = {
            DECLARE_GET_FIELD(t_GeoSizeable, center),
            DECLARE_GET_FIELD(t_GeoSizeable, radius),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_GeoSizeable__methods_[] = {
            DECLARE_METHOD(t_GeoSizeable, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_GeoSizeable, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_GeoSizeable, getCenter, METH_NOARGS),
            DECLARE_METHOD(t_GeoSizeable, getRadius, METH_NOARGS),
            { NULL, NULL, 0, NULL }
          };

          static PyType_Slot PY_TYPE_SLOTS(GeoSizeable)[] = {
            { Py_tp_methods, t_GeoSizeable__methods_ },
            { Py_tp_init, (void *) abstract_init },
            { Py_tp_getset, t_GeoSizeable__fields_ },
            { 0, NULL }
          };

          static PyType_Def *PY_TYPE_BASES(GeoSizeable)[] = {
            &PY_TYPE_DEF(::java::lang::Object),
            NULL
          };

          DEFINE_TYPE(GeoSizeable, t_GeoSizeable, GeoSizeable);

          void t_GeoSizeable::install(PyObject *module)
          {
            installType(&PY_TYPE(GeoSizeable), &PY_TYPE_DEF(GeoSizeable), module, "GeoSizeable", 0);
          }

          void t_GeoSizeable::initialize(PyObject *module)
          {
            PyObject_SetAttrString((PyObject *) PY_TYPE(GeoSizeable), "class_", make_descriptor(GeoSizeable::initializeClass, 1));
            PyObject_SetAttrString((PyObject *) PY_TYPE(GeoSizeable), "wrapfn_", make_descriptor(t_GeoSizeable::wrap_jobject));
            PyObject_SetAttrString((PyObject *) PY_TYPE(GeoSizeable), "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_GeoSizeable_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, GeoSizeable::initializeClass, 1)))
              return NULL;
            return t_GeoSizeable::wrap_Object(GeoSizeable(((t_GeoSizeable *) arg)->object.this$));
          }
          static PyObject *t_GeoSizeable_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, GeoSizeable::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static PyObject *t_GeoSizeable_getCenter(t_GeoSizeable *self)
          {
            ::org::apache::lucene::spatial3d::geom::GeoPoint result((jobject) NULL);
            OBJ_CALL(result = self->object.getCenter());
            return ::org::apache::lucene::spatial3d::geom::t_GeoPoint::wrap_Object(result);
          }

          static PyObject *t_GeoSizeable_getRadius(t_GeoSizeable *self)
          {
            jdouble result;
            OBJ_CALL(result = self->object.getRadius());
            return PyFloat_FromDouble((double) result);
          }

          static PyObject *t_GeoSizeable_get__center(t_GeoSizeable *self, void *data)
          {
            ::org::apache::lucene::spatial3d::geom::GeoPoint value((jobject) NULL);
            OBJ_CALL(value = self->object.getCenter());
            return ::org::apache::lucene::spatial3d::geom::t_GeoPoint::wrap_Object(value);
          }

          static PyObject *t_GeoSizeable_get__radius(t_GeoSizeable *self, void *data)
          {
            jdouble value;
            OBJ_CALL(value = self->object.getRadius());
            return PyFloat_FromDouble((double) value);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/document/FloatPointNearestNeighbor.h"
#include "org/apache/lucene/search/IndexSearcher.h"
#include "java/lang/Class.h"
#include "java/lang/String.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/search/TopFieldDocs.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace document {

        ::java::lang::Class *FloatPointNearestNeighbor::class$ = NULL;
        jmethodID *FloatPointNearestNeighbor::mids$ = NULL;
        bool FloatPointNearestNeighbor::live$ = false;

        jclass FloatPointNearestNeighbor::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/document/FloatPointNearestNeighbor");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_f2cc1bce94666404] = env->getMethodID(cls, "<init>", "()V");
            mids$[mid_nearest_2351a91f506d8d2c] = env->getStaticMethodID(cls, "nearest", "(Lorg/apache/lucene/search/IndexSearcher;Ljava/lang/String;I[F)Lorg/apache/lucene/search/TopFieldDocs;");

            class$ = new ::java::lang::Class(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        FloatPointNearestNeighbor::FloatPointNearestNeighbor() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_f2cc1bce94666404)) {}

        ::org::apache::lucene::search::TopFieldDocs FloatPointNearestNeighbor::nearest(const ::org::apache::lucene::search::IndexSearcher & a0, const ::java::lang::String & a1, jint a2, const JArray< jfloat > & a3)
        {
          jclass cls = env->getClass(initializeClass);
          return ::org::apache::lucene::search::TopFieldDocs(env->callStaticObjectMethod(cls, mids$[mid_nearest_2351a91f506d8d2c], a0.this$, a1.this$, a2, a3.this$));
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace document {
        static PyObject *t_FloatPointNearestNeighbor_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_FloatPointNearestNeighbor_instance_(PyTypeObject *type, PyObject *arg);
        static int t_FloatPointNearestNeighbor_init_(t_FloatPointNearestNeighbor *self, PyObject *args, PyObject *kwds);
        static PyObject *t_FloatPointNearestNeighbor_nearest(PyTypeObject *type, PyObject *args);

        static PyMethodDef t_FloatPointNearestNeighbor__methods_[] = {
          DECLARE_METHOD(t_FloatPointNearestNeighbor, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_FloatPointNearestNeighbor, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_FloatPointNearestNeighbor, nearest, METH_VARARGS | METH_CLASS),
          { NULL, NULL, 0, NULL }
        };

        static PyType_Slot PY_TYPE_SLOTS(FloatPointNearestNeighbor)[] = {
          { Py_tp_methods, t_FloatPointNearestNeighbor__methods_ },
          { Py_tp_init, (void *) t_FloatPointNearestNeighbor_init_ },
          { 0, NULL }
        };

        static PyType_Def *PY_TYPE_BASES(FloatPointNearestNeighbor)[] = {
          &PY_TYPE_DEF(::java::lang::Object),
          NULL
        };

        DEFINE_TYPE(FloatPointNearestNeighbor, t_FloatPointNearestNeighbor, FloatPointNearestNeighbor);

        void t_FloatPointNearestNeighbor::install(PyObject *module)
        {
          installType(&PY_TYPE(FloatPointNearestNeighbor), &PY_TYPE_DEF(FloatPointNearestNeighbor), module, "FloatPointNearestNeighbor", 0);
        }

        void t_FloatPointNearestNeighbor::initialize(PyObject *module)
        {
          PyObject_SetAttrString((PyObject *) PY_TYPE(FloatPointNearestNeighbor), "class_", make_descriptor(FloatPointNearestNeighbor::initializeClass, 1));
          PyObject_SetAttrString((PyObject *) PY_TYPE(FloatPointNearestNeighbor), "wrapfn_", make_descriptor(t_FloatPointNearestNeighbor::wrap_jobject));
          PyObject_SetAttrString((PyObject *) PY_TYPE(FloatPointNearestNeighbor), "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_FloatPointNearestNeighbor_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, FloatPointNearestNeighbor::initializeClass, 1)))
            return NULL;
          return t_FloatPointNearestNeighbor::wrap_Object(FloatPointNearestNeighbor(((t_FloatPointNearestNeighbor *) arg)->object.this$));
        }
        static PyObject *t_FloatPointNearestNeighbor_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, FloatPointNearestNeighbor::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_FloatPointNearestNeighbor_init_(t_FloatPointNearestNeighbor *self, PyObject *args, PyObject *kwds)
        {
          FloatPointNearestNeighbor object((jobject) NULL);

          INT_CALL(object = FloatPointNearestNeighbor());
          self->object = object;

          return 0;
        }

        static PyObject *t_FloatPointNearestNeighbor_nearest(PyTypeObject *type, PyObject *args)
        {
          ::org::apache::lucene::search::IndexSearcher a0((jobject) NULL);
          ::java::lang::String a1((jobject) NULL);
          jint a2;
          JArray< jfloat > a3((jobject) NULL);
          ::org::apache::lucene::search::TopFieldDocs result((jobject) NULL);

          if (!parseArgs(args, "ksI[F", ::org::apache::lucene::search::IndexSearcher::initializeClass, &a0, &a1, &a2, &a3))
          {
            OBJ_CALL(result = ::org::apache::lucene::document::FloatPointNearestNeighbor::nearest(a0, a1, a2, a3));
            return ::org::apache::lucene::search::t_TopFieldDocs::wrap_Object(result);
          }

          PyErr_SetArgsError(type, "nearest", args);
          return NULL;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/PhraseWildcardQuery$TermStats.h"
#include "org/apache/lucene/util/BytesRef.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {

        ::java::lang::Class *PhraseWildcardQuery$TermStats::class$ = NULL;
        jmethodID *PhraseWildcardQuery$TermStats::mids$ = NULL;
        bool PhraseWildcardQuery$TermStats::live$ = false;

        jclass PhraseWildcardQuery$TermStats::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/search/PhraseWildcardQuery$TermStats");

            mids$ = new jmethodID[max_mid];
            mids$[mid_getTermBytes_7af2ea2e37ce82b8] = env->getMethodID(cls, "getTermBytes", "()Lorg/apache/lucene/util/BytesRef;");
            mids$[mid_addStats_7b2f5b9ddfcb9416] = env->getMethodID(cls, "addStats", "(IJ)V");

            class$ = new ::java::lang::Class(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        ::org::apache::lucene::util::BytesRef PhraseWildcardQuery$TermStats::getTermBytes() const
        {
          return ::org::apache::lucene::util::BytesRef(env->callObjectMethod(this$, mids$[mid_getTermBytes_7af2ea2e37ce82b8]));
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        static PyObject *t_PhraseWildcardQuery$TermStats_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_PhraseWildcardQuery$TermStats_instance_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_PhraseWildcardQuery$TermStats_getTermBytes(t_PhraseWildcardQuery$TermStats *self);
        static PyObject *t_PhraseWildcardQuery$TermStats_get__termBytes(t_PhraseWildcardQuery$TermStats *self, void *data);
        static PyGetSetDef t_PhraseWildcardQuery$TermStats__fields_[] = {
          DECLARE_GET_FIELD(t_PhraseWildcardQuery$TermStats, termBytes),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_PhraseWildcardQuery$TermStats__methods_[] = {
          DECLARE_METHOD(t_PhraseWildcardQuery$TermStats, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_PhraseWildcardQuery$TermStats, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_PhraseWildcardQuery$TermStats, getTermBytes, METH_NOARGS),
          { NULL, NULL, 0, NULL }
        };

        static PyType_Slot PY_TYPE_SLOTS(PhraseWildcardQuery$TermStats)[] = {
          { Py_tp_methods, t_PhraseWildcardQuery$TermStats__methods_ },
          { Py_tp_init, (void *) abstract_init },
          { Py_tp_getset, t_PhraseWildcardQuery$TermStats__fields_ },
          { 0, NULL }
        };

        static PyType_Def *PY_TYPE_BASES(PhraseWildcardQuery$TermStats)[] = {
          &PY_TYPE_DEF(::java::lang::Object),
          NULL
        };

        DEFINE_TYPE(PhraseWildcardQuery$TermStats, t_PhraseWildcardQuery$TermStats, PhraseWildcardQuery$TermStats);

        void t_PhraseWildcardQuery$TermStats::install(PyObject *module)
        {
          installType(&PY_TYPE(PhraseWildcardQuery$TermStats), &PY_TYPE_DEF(PhraseWildcardQuery$TermStats), module, "PhraseWildcardQuery$TermStats", 0);
        }

        void t_PhraseWildcardQuery$TermStats::initialize(PyObject *module)
        {
          PyObject_SetAttrString((PyObject *) PY_TYPE(PhraseWildcardQuery$TermStats), "class_", make_descriptor(PhraseWildcardQuery$TermStats::initializeClass, 1));
          PyObject_SetAttrString((PyObject *) PY_TYPE(PhraseWildcardQuery$TermStats), "wrapfn_", make_descriptor(t_PhraseWildcardQuery$TermStats::wrap_jobject));
          PyObject_SetAttrString((PyObject *) PY_TYPE(PhraseWildcardQuery$TermStats), "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_PhraseWildcardQuery$TermStats_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, PhraseWildcardQuery$TermStats::initializeClass, 1)))
            return NULL;
          return t_PhraseWildcardQuery$TermStats::wrap_Object(PhraseWildcardQuery$TermStats(((t_PhraseWildcardQuery$TermStats *) arg)->object.this$));
        }
        static PyObject *t_PhraseWildcardQuery$TermStats_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, PhraseWildcardQuery$TermStats::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static PyObject *t_PhraseWildcardQuery$TermStats_getTermBytes(t_PhraseWildcardQuery$TermStats *self)
        {
          ::org::apache::lucene::util::BytesRef result((jobject) NULL);
          OBJ_CALL(result = self->object.getTermBytes());
          return ::org::apache::lucene::util::t_BytesRef::wrap_Object(result);
        }

        static PyObject *t_PhraseWildcardQuery$TermStats_get__termBytes(t_PhraseWildcardQuery$TermStats *self, void *data)
        {
          ::org::apache::lucene::util::BytesRef value((jobject) NULL);
          OBJ_CALL(value = self->object.getTermBytes());
          return ::org::apache::lucene::util::t_BytesRef::wrap_Object(value);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/spans/SpanWeight$Postings.h"
#include "java/lang/String.h"
#include "org/apache/lucene/search/spans/SpanWeight$Postings.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace spans {

          ::java::lang::Class *SpanWeight$Postings::class$ = NULL;
          jmethodID *SpanWeight$Postings::mids$ = NULL;
          bool SpanWeight$Postings::live$ = false;
          SpanWeight$Postings *SpanWeight$Postings::OFFSETS = NULL;
          SpanWeight$Postings *SpanWeight$Postings::PAYLOADS = NULL;
          SpanWeight$Postings *SpanWeight$Postings::POSITIONS = NULL;

          jclass SpanWeight$Postings::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/search/spans/SpanWeight$Postings");

              mids$ = new jmethodID[max_mid];
              mids$[mid_atLeast_08e558e6b0df4267] = env->getMethodID(cls, "atLeast", "(Lorg/apache/lucene/search/spans/SpanWeight$Postings;)Lorg/apache/lucene/search/spans/SpanWeight$Postings;");
              mids$[mid_getRequiredPostings_9972fcc56b44e79d] = env->getMethodID(cls, "getRequiredPostings", "()I");
              mids$[mid_valueOf_56eea210bd87dd6b] = env->getStaticMethodID(cls, "valueOf", "(Ljava/lang/String;)Lorg/apache/lucene/search/spans/SpanWeight$Postings;");
              mids$[mid_values_be6d1cff8ec95831] = env->getStaticMethodID(cls, "values", "()[Lorg/apache/lucene/search/spans/SpanWeight$Postings;");

              class$ = new ::java::lang::Class(cls);
              cls = (jclass) class$->this$;

              OFFSETS = new SpanWeight$Postings(env->getStaticObjectField(cls, "OFFSETS", "Lorg/apache/lucene/search/spans/SpanWeight$Postings;"));
              PAYLOADS = new SpanWeight$Postings(env->getStaticObjectField(cls, "PAYLOADS", "Lorg/apache/lucene/search/spans/SpanWeight$Postings;"));
              POSITIONS = new SpanWeight$Postings(env->getStaticObjectField(cls, "POSITIONS", "Lorg/apache/lucene/search/spans/SpanWeight$Postings;"));
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          SpanWeight$Postings SpanWeight$Postings::atLeast(const SpanWeight$Postings & a0) const
          {
            return SpanWeight$Postings(env->callObjectMethod(this$, mids$[mid_atLeast_08e558e6b0df4267], a0.this$));
          }

          jint SpanWeight$Postings::getRequiredPostings() const
          {
            return env->callIntMethod(this$, mids$[mid_getRequiredPostings_9972fcc56b44e79d]);
          }

          SpanWeight$Postings SpanWeight$Postings::valueOf(const ::java::lang::String & a0)
          {
            jclass cls = env->getClass(initializeClass);
            return SpanWeight$Postings(env->callStaticObjectMethod(cls, mids$[mid_valueOf_56eea210bd87dd6b], a0.this$));
          }

          JArray< SpanWeight$Postings > SpanWeight$Postings::values()
          {
            jclass cls = env->getClass(initializeClass);
            return JArray< SpanWeight$Postings >(env->callStaticObjectMethod(cls, mids$[mid_values_be6d1cff8ec95831]));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace spans {
          static PyObject *t_SpanWeight$Postings_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_SpanWeight$Postings_instance_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_SpanWeight$Postings_of_(t_SpanWeight$Postings *self, PyObject *args);
          static PyObject *t_SpanWeight$Postings_atLeast(t_SpanWeight$Postings *self, PyObject *arg);
          static PyObject *t_SpanWeight$Postings_getRequiredPostings(t_SpanWeight$Postings *self);
          static PyObject *t_SpanWeight$Postings_valueOf(PyTypeObject *type, PyObject *args);
          static PyObject *t_SpanWeight$Postings_values(PyTypeObject *type);
          static PyObject *t_SpanWeight$Postings_get__requiredPostings(t_SpanWeight$Postings *self, void *data);
          static PyObject *t_SpanWeight$Postings_get__parameters_(t_SpanWeight$Postings *self, void *data);
          static PyGetSetDef t_SpanWeight$Postings__fields_[] = {
            DECLARE_GET_FIELD(t_SpanWeight$Postings, requiredPostings),
            DECLARE_GET_FIELD(t_SpanWeight$Postings, parameters_),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_SpanWeight$Postings__methods_[] = {
            DECLARE_METHOD(t_SpanWeight$Postings, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_SpanWeight$Postings, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_SpanWeight$Postings, of_, METH_VARARGS),
            DECLARE_METHOD(t_SpanWeight$Postings, atLeast, METH_O),
            DECLARE_METHOD(t_SpanWeight$Postings, getRequiredPostings, METH_NOARGS),
            DECLARE_METHOD(t_SpanWeight$Postings, valueOf, METH_VARARGS | METH_CLASS),
            DECLARE_METHOD(t_SpanWeight$Postings, values, METH_NOARGS | METH_CLASS),
            { NULL, NULL, 0, NULL }
          };

          static PyType_Slot PY_TYPE_SLOTS(SpanWeight$Postings)[] = {
            { Py_tp_methods, t_SpanWeight$Postings__methods_ },
            { Py_tp_init, (void *) abstract_init },
            { Py_tp_getset, t_SpanWeight$Postings__fields_ },
            { 0, NULL }
          };

          static PyType_Def *PY_TYPE_BASES(SpanWeight$Postings)[] = {
            &PY_TYPE_DEF(::java::lang::Enum),
            NULL
          };

          DEFINE_TYPE(SpanWeight$Postings, t_SpanWeight$Postings, SpanWeight$Postings);
          PyObject *t_SpanWeight$Postings::wrap_Object(const SpanWeight$Postings& object, PyTypeObject *p0)
          {
            PyObject *obj = t_SpanWeight$Postings::wrap_Object(object);
            if (obj != NULL && obj != Py_None)
            {
              t_SpanWeight$Postings *self = (t_SpanWeight$Postings *) obj;
              self->parameters[0] = p0;
            }
            return obj;
          }

          PyObject *t_SpanWeight$Postings::wrap_jobject(const jobject& object, PyTypeObject *p0)
          {
            PyObject *obj = t_SpanWeight$Postings::wrap_jobject(object);
            if (obj != NULL && obj != Py_None)
            {
              t_SpanWeight$Postings *self = (t_SpanWeight$Postings *) obj;
              self->parameters[0] = p0;
            }
            return obj;
          }

          void t_SpanWeight$Postings::install(PyObject *module)
          {
            installType(&PY_TYPE(SpanWeight$Postings), &PY_TYPE_DEF(SpanWeight$Postings), module, "SpanWeight$Postings", 0);
          }

          void t_SpanWeight$Postings::initialize(PyObject *module)
          {
            PyObject_SetAttrString((PyObject *) PY_TYPE(SpanWeight$Postings), "class_", make_descriptor(SpanWeight$Postings::initializeClass, 1));
            PyObject_SetAttrString((PyObject *) PY_TYPE(SpanWeight$Postings), "wrapfn_", make_descriptor(t_SpanWeight$Postings::wrap_jobject));
            PyObject_SetAttrString((PyObject *) PY_TYPE(SpanWeight$Postings), "boxfn_", make_descriptor(boxObject));
            env->getClass(SpanWeight$Postings::initializeClass);
            PyObject_SetAttrString((PyObject *) PY_TYPE(SpanWeight$Postings), "OFFSETS", make_descriptor(t_SpanWeight$Postings::wrap_Object(*SpanWeight$Postings::OFFSETS)));
            PyObject_SetAttrString((PyObject *) PY_TYPE(SpanWeight$Postings), "PAYLOADS", make_descriptor(t_SpanWeight$Postings::wrap_Object(*SpanWeight$Postings::PAYLOADS)));
            PyObject_SetAttrString((PyObject *) PY_TYPE(SpanWeight$Postings), "POSITIONS", make_descriptor(t_SpanWeight$Postings::wrap_Object(*SpanWeight$Postings::POSITIONS)));
          }

          static PyObject *t_SpanWeight$Postings_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, SpanWeight$Postings::initializeClass, 1)))
              return NULL;
            return t_SpanWeight$Postings::wrap_Object(SpanWeight$Postings(((t_SpanWeight$Postings *) arg)->object.this$));
          }
          static PyObject *t_SpanWeight$Postings_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, SpanWeight$Postings::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static PyObject *t_SpanWeight$Postings_of_(t_SpanWeight$Postings *self, PyObject *args)
          {
            if (!parseArg(args, "T", 1, &(self->parameters)))
              Py_RETURN_SELF;
            return PyErr_SetArgsError((PyObject *) self, "of_", args);
          }

          static PyObject *t_SpanWeight$Postings_atLeast(t_SpanWeight$Postings *self, PyObject *arg)
          {
            SpanWeight$Postings a0((jobject) NULL);
            PyTypeObject **p0;
            SpanWeight$Postings result((jobject) NULL);

            if (!parseArg(arg, "K", SpanWeight$Postings::initializeClass, &a0, &p0, t_SpanWeight$Postings::parameters_))
            {
              OBJ_CALL(result = self->object.atLeast(a0));
              return t_SpanWeight$Postings::wrap_Object(result);
            }

            PyErr_SetArgsError((PyObject *) self, "atLeast", arg);
            return NULL;
          }

          static PyObject *t_SpanWeight$Postings_getRequiredPostings(t_SpanWeight$Postings *self)
          {
            jint result;
            OBJ_CALL(result = self->object.getRequiredPostings());
            return PyLong_FromLong((long) result);
          }

          static PyObject *t_SpanWeight$Postings_valueOf(PyTypeObject *type, PyObject *args)
          {
            ::java::lang::String a0((jobject) NULL);
            SpanWeight$Postings result((jobject) NULL);

            if (!parseArgs(args, "s", &a0))
            {
              OBJ_CALL(result = ::org::apache::lucene::search::spans::SpanWeight$Postings::valueOf(a0));
              return t_SpanWeight$Postings::wrap_Object(result);
            }

            return callSuper(type, "valueOf", args, 2);
          }

          static PyObject *t_SpanWeight$Postings_values(PyTypeObject *type)
          {
            JArray< SpanWeight$Postings > result((jobject) NULL);
            OBJ_CALL(result = ::org::apache::lucene::search::spans::SpanWeight$Postings::values());
            return JArray<jobject>(result.this$).wrap(t_SpanWeight$Postings::wrap_jobject);
          }
          static PyObject *t_SpanWeight$Postings_get__parameters_(t_SpanWeight$Postings *self, void *data)
          {
            return typeParameters(self->parameters, sizeof(self->parameters));
          }

          static PyObject *t_SpanWeight$Postings_get__requiredPostings(t_SpanWeight$Postings *self, void *data)
          {
            jint value;
            OBJ_CALL(value = self->object.getRequiredPostings());
            return PyLong_FromLong((long) value);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/suggest/UnsortedInputIterator.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/util/BytesRef.h"
#include "java/io/IOException.h"
#include "java/util/Set.h"
#include "org/apache/lucene/search/suggest/InputIterator.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace suggest {

          ::java::lang::Class *UnsortedInputIterator::class$ = NULL;
          jmethodID *UnsortedInputIterator::mids$ = NULL;
          bool UnsortedInputIterator::live$ = false;

          jclass UnsortedInputIterator::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/search/suggest/UnsortedInputIterator");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_bf225d6cde09eeb7] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/search/suggest/InputIterator;)V");
              mids$[mid_contexts_7dcf4034c6d1a92a] = env->getMethodID(cls, "contexts", "()Ljava/util/Set;");
              mids$[mid_next_7af2ea2e37ce82b8] = env->getMethodID(cls, "next", "()Lorg/apache/lucene/util/BytesRef;");
              mids$[mid_payload_7af2ea2e37ce82b8] = env->getMethodID(cls, "payload", "()Lorg/apache/lucene/util/BytesRef;");
              mids$[mid_weight_2e5ae9edcb9b072f] = env->getMethodID(cls, "weight", "()J");

              class$ = new ::java::lang::Class(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          UnsortedInputIterator::UnsortedInputIterator(const ::org::apache::lucene::search::suggest::InputIterator & a0) : ::org::apache::lucene::search::suggest::BufferedInputIterator(env->newObject(initializeClass, &mids$, mid_init$_bf225d6cde09eeb7, a0.this$)) {}

          ::java::util::Set UnsortedInputIterator::contexts() const
          {
            return ::java::util::Set(env->callObjectMethod(this$, mids$[mid_contexts_7dcf4034c6d1a92a]));
          }

          ::org::apache::lucene::util::BytesRef UnsortedInputIterator::next() const
          {
            return ::org::apache::lucene::util::BytesRef(env->callObjectMethod(this$, mids$[mid_next_7af2ea2e37ce82b8]));
          }

          ::org::apache::lucene::util::BytesRef UnsortedInputIterator::payload() const
          {
            return ::org::apache::lucene::util::BytesRef(env->callObjectMethod(this$, mids$[mid_payload_7af2ea2e37ce82b8]));
          }

          jlong UnsortedInputIterator::weight() const
          {
            return env->callLongMethod(this$, mids$[mid_weight_2e5ae9edcb9b072f]);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace suggest {
          static PyObject *t_UnsortedInputIterator_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_UnsortedInputIterator_instance_(PyTypeObject *type, PyObject *arg);
          static int t_UnsortedInputIterator_init_(t_UnsortedInputIterator *self, PyObject *args, PyObject *kwds);
          static PyObject *t_UnsortedInputIterator_contexts(t_UnsortedInputIterator *self, PyObject *args);
          static PyObject *t_UnsortedInputIterator_next(t_UnsortedInputIterator *self, PyObject *args);
          static PyObject *t_UnsortedInputIterator_payload(t_UnsortedInputIterator *self, PyObject *args);
          static PyObject *t_UnsortedInputIterator_weight(t_UnsortedInputIterator *self, PyObject *args);

          static PyMethodDef t_UnsortedInputIterator__methods_[] = {
            DECLARE_METHOD(t_UnsortedInputIterator, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_UnsortedInputIterator, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_UnsortedInputIterator, contexts, METH_VARARGS),
            DECLARE_METHOD(t_UnsortedInputIterator, next, METH_VARARGS),
            DECLARE_METHOD(t_UnsortedInputIterator, payload, METH_VARARGS),
            DECLARE_METHOD(t_UnsortedInputIterator, weight, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          static PyType_Slot PY_TYPE_SLOTS(UnsortedInputIterator)[] = {
            { Py_tp_methods, t_UnsortedInputIterator__methods_ },
            { Py_tp_init, (void *) t_UnsortedInputIterator_init_ },
            { Py_tp_iter, (void *) PyObject_SelfIter },
            { Py_tp_iternext, (void *) ((PyObject *(*)(t_UnsortedInputIterator *)) get_next< t_UnsortedInputIterator,::org::apache::lucene::util::t_BytesRef,::org::apache::lucene::util::BytesRef >) },
            { 0, NULL }
          };

          static PyType_Def *PY_TYPE_BASES(UnsortedInputIterator)[] = {
            &PY_TYPE_DEF(::org::apache::lucene::search::suggest::BufferedInputIterator),
            NULL
          };

          DEFINE_TYPE(UnsortedInputIterator, t_UnsortedInputIterator, UnsortedInputIterator);

          void t_UnsortedInputIterator::install(PyObject *module)
          {
            installType(&PY_TYPE(UnsortedInputIterator), &PY_TYPE_DEF(UnsortedInputIterator), module, "UnsortedInputIterator", 0);
          }

          void t_UnsortedInputIterator::initialize(PyObject *module)
          {
            PyObject_SetAttrString((PyObject *) PY_TYPE(UnsortedInputIterator), "class_", make_descriptor(UnsortedInputIterator::initializeClass, 1));
            PyObject_SetAttrString((PyObject *) PY_TYPE(UnsortedInputIterator), "wrapfn_", make_descriptor(t_UnsortedInputIterator::wrap_jobject));
            PyObject_SetAttrString((PyObject *) PY_TYPE(UnsortedInputIterator), "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_UnsortedInputIterator_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, UnsortedInputIterator::initializeClass, 1)))
              return NULL;
            return t_UnsortedInputIterator::wrap_Object(UnsortedInputIterator(((t_UnsortedInputIterator *) arg)->object.this$));
          }
          static PyObject *t_UnsortedInputIterator_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, UnsortedInputIterator::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_UnsortedInputIterator_init_(t_UnsortedInputIterator *self, PyObject *args, PyObject *kwds)
          {
            ::org::apache::lucene::search::suggest::InputIterator a0((jobject) NULL);
            UnsortedInputIterator object((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::search::suggest::InputIterator::initializeClass, &a0))
            {
              INT_CALL(object = UnsortedInputIterator(a0));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_UnsortedInputIterator_contexts(t_UnsortedInputIterator *self, PyObject *args)
          {
            ::java::util::Set result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.contexts());
              return ::java::util::t_Set::wrap_Object(result, ::org::apache::lucene::util::PY_TYPE(BytesRef));
            }

            return callSuper(PY_TYPE(UnsortedInputIterator), (PyObject *) self, "contexts", args, 2);
          }

          static PyObject *t_UnsortedInputIterator_next(t_UnsortedInputIterator *self, PyObject *args)
          {
            ::org::apache::lucene::util::BytesRef result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.next());
              return ::org::apache::lucene::util::t_BytesRef::wrap_Object(result);
            }

            return callSuper(PY_TYPE(UnsortedInputIterator), (PyObject *) self, "next", args, 2);
          }

          static PyObject *t_UnsortedInputIterator_payload(t_UnsortedInputIterator *self, PyObject *args)
          {
            ::org::apache::lucene::util::BytesRef result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.payload());
              return ::org::apache::lucene::util::t_BytesRef::wrap_Object(result);
            }

            return callSuper(PY_TYPE(UnsortedInputIterator), (PyObject *) self, "payload", args, 2);
          }

          static PyObject *t_UnsortedInputIterator_weight(t_UnsortedInputIterator *self, PyObject *args)
          {
            jlong result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.weight());
              return PyLong_FromLongLong((PY_LONG_LONG) result);
            }

            return callSuper(PY_TYPE(UnsortedInputIterator), (PyObject *) self, "weight", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/codecs/compressing/Decompressor.h"
#include "java/lang/Cloneable.h"
#include "org/apache/lucene/codecs/compressing/Decompressor.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/util/BytesRef.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/store/DataInput.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace codecs {
        namespace compressing {

          ::java::lang::Class *Decompressor::class$ = NULL;
          jmethodID *Decompressor::mids$ = NULL;
          bool Decompressor::live$ = false;

          jclass Decompressor::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/codecs/compressing/Decompressor");

              mids$ = new jmethodID[max_mid];
              mids$[mid_clone_1fbc4f71d5e2b599] = env->getMethodID(cls, "clone", "()Lorg/apache/lucene/codecs/compressing/Decompressor;");
              mids$[mid_decompress_dd5d7af8fa18224e] = env->getMethodID(cls, "decompress", "(Lorg/apache/lucene/store/DataInput;IIILorg/apache/lucene/util/BytesRef;)V");

              class$ = new ::java::lang::Class(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          Decompressor Decompressor::clone() const
          {
            return Decompressor(env->callObjectMethod(this$, mids$[mid_clone_1fbc4f71d5e2b599]));
          }

          void Decompressor::decompress(const ::org::apache::lucene::store::DataInput & a0, jint a1, jint a2, jint a3, const ::org::apache::lucene::util::BytesRef & a4) const
          {
            env->callVoidMethod(this$, mids$[mid_decompress_dd5d7af8fa18224e], a0.this$, a1, a2, a3, a4.this$);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace codecs {
        namespace compressing {
          static PyObject *t_Decompressor_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_Decompressor_instance_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_Decompressor_clone(t_Decompressor *self);
          static PyObject *t_Decompressor_decompress(t_Decompressor *self, PyObject *args);

          static PyMethodDef t_Decompressor__methods_[] = {
            DECLARE_METHOD(t_Decompressor, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_Decompressor, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_Decompressor, clone, METH_NOARGS),
            DECLARE_METHOD(t_Decompressor, decompress, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          static PyType_Slot PY_TYPE_SLOTS(Decompressor)[] = {
            { Py_tp_methods, t_Decompressor__methods_ },
            { Py_tp_init, (void *) abstract_init },
            { 0, NULL }
          };

          static PyType_Def *PY_TYPE_BASES(Decompressor)[] = {
            &PY_TYPE_DEF(::java::lang::Object),
            NULL
          };

          DEFINE_TYPE(Decompressor, t_Decompressor, Decompressor);

          void t_Decompressor::install(PyObject *module)
          {
            installType(&PY_TYPE(Decompressor), &PY_TYPE_DEF(Decompressor), module, "Decompressor", 0);
          }

          void t_Decompressor::initialize(PyObject *module)
          {
            PyObject_SetAttrString((PyObject *) PY_TYPE(Decompressor), "class_", make_descriptor(Decompressor::initializeClass, 1));
            PyObject_SetAttrString((PyObject *) PY_TYPE(Decompressor), "wrapfn_", make_descriptor(t_Decompressor::wrap_jobject));
            PyObject_SetAttrString((PyObject *) PY_TYPE(Decompressor), "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_Decompressor_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, Decompressor::initializeClass, 1)))
              return NULL;
            return t_Decompressor::wrap_Object(Decompressor(((t_Decompressor *) arg)->object.this$));
          }
          static PyObject *t_Decompressor_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, Decompressor::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static PyObject *t_Decompressor_clone(t_Decompressor *self)
          {
            Decompressor result((jobject) NULL);
            OBJ_CALL(result = self->object.clone());
            return t_Decompressor::wrap_Object(result);
          }

          static PyObject *t_Decompressor_decompress(t_Decompressor *self, PyObject *args)
          {
            ::org::apache::lucene::store::DataInput a0((jobject) NULL);
            jint a1;
            jint a2;
            jint a3;
            ::org::apache::lucene::util::BytesRef a4((jobject) NULL);

            if (!parseArgs(args, "kIIIk", ::org::apache::lucene::store::DataInput::initializeClass, ::org::apache::lucene::util::BytesRef::initializeClass, &a0, &a1, &a2, &a3, &a4))
            {
              OBJ_CALL(self->object.decompress(a0, a1, a2, a3, a4));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError((PyObject *) self, "decompress", args);
            return NULL;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/cjk/CJKWidthFilterFactory.h"
#include "java/util/Map.h"
#include "java/lang/String.h"
#include "org/apache/lucene/analysis/TokenStream.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace cjk {

          ::java::lang::Class *CJKWidthFilterFactory::class$ = NULL;
          jmethodID *CJKWidthFilterFactory::mids$ = NULL;
          bool CJKWidthFilterFactory::live$ = false;
          ::java::lang::String *CJKWidthFilterFactory::NAME = NULL;

          jclass CJKWidthFilterFactory::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/cjk/CJKWidthFilterFactory");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_408bd889ee3beae5] = env->getMethodID(cls, "<init>", "(Ljava/util/Map;)V");
              mids$[mid_create_6de1e28d9d10cd9e] = env->getMethodID(cls, "create", "(Lorg/apache/lucene/analysis/TokenStream;)Lorg/apache/lucene/analysis/TokenStream;");
              mids$[mid_normalize_6de1e28d9d10cd9e] = env->getMethodID(cls, "normalize", "(Lorg/apache/lucene/analysis/TokenStream;)Lorg/apache/lucene/analysis/TokenStream;");

              class$ = new ::java::lang::Class(cls);
              cls = (jclass) class$->this$;

              NAME = new ::java::lang::String(env->getStaticObjectField(cls, "NAME", "Ljava/lang/String;"));
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          CJKWidthFilterFactory::CJKWidthFilterFactory(const ::java::util::Map & a0) : ::org::apache::lucene::analysis::util::TokenFilterFactory(env->newObject(initializeClass, &mids$, mid_init$_408bd889ee3beae5, a0.this$)) {}

          ::org::apache::lucene::analysis::TokenStream CJKWidthFilterFactory::create(const ::org::apache::lucene::analysis::TokenStream & a0) const
          {
            return ::org::apache::lucene::analysis::TokenStream(env->callObjectMethod(this$, mids$[mid_create_6de1e28d9d10cd9e], a0.this$));
          }

          ::org::apache::lucene::analysis::TokenStream CJKWidthFilterFactory::normalize(const ::org::apache::lucene::analysis::TokenStream & a0) const
          {
            return ::org::apache::lucene::analysis::TokenStream(env->callObjectMethod(this$, mids$[mid_normalize_6de1e28d9d10cd9e], a0.this$));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace cjk {
          static PyObject *t_CJKWidthFilterFactory_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_CJKWidthFilterFactory_instance_(PyTypeObject *type, PyObject *arg);
          static int t_CJKWidthFilterFactory_init_(t_CJKWidthFilterFactory *self, PyObject *args, PyObject *kwds);
          static PyObject *t_CJKWidthFilterFactory_create(t_CJKWidthFilterFactory *self, PyObject *args);
          static PyObject *t_CJKWidthFilterFactory_normalize(t_CJKWidthFilterFactory *self, PyObject *args);

          static PyMethodDef t_CJKWidthFilterFactory__methods_[] = {
            DECLARE_METHOD(t_CJKWidthFilterFactory, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_CJKWidthFilterFactory, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_CJKWidthFilterFactory, create, METH_VARARGS),
            DECLARE_METHOD(t_CJKWidthFilterFactory, normalize, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          static PyType_Slot PY_TYPE_SLOTS(CJKWidthFilterFactory)[] = {
            { Py_tp_methods, t_CJKWidthFilterFactory__methods_ },
            { Py_tp_init, (void *) t_CJKWidthFilterFactory_init_ },
            { 0, NULL }
          };

          static PyType_Def *PY_TYPE_BASES(CJKWidthFilterFactory)[] = {
            &PY_TYPE_DEF(::org::apache::lucene::analysis::util::TokenFilterFactory),
            NULL
          };

          DEFINE_TYPE(CJKWidthFilterFactory, t_CJKWidthFilterFactory, CJKWidthFilterFactory);

          void t_CJKWidthFilterFactory::install(PyObject *module)
          {
            installType(&PY_TYPE(CJKWidthFilterFactory), &PY_TYPE_DEF(CJKWidthFilterFactory), module, "CJKWidthFilterFactory", 0);
          }

          void t_CJKWidthFilterFactory::initialize(PyObject *module)
          {
            PyObject_SetAttrString((PyObject *) PY_TYPE(CJKWidthFilterFactory), "class_", make_descriptor(CJKWidthFilterFactory::initializeClass, 1));
            PyObject_SetAttrString((PyObject *) PY_TYPE(CJKWidthFilterFactory), "wrapfn_", make_descriptor(t_CJKWidthFilterFactory::wrap_jobject));
            PyObject_SetAttrString((PyObject *) PY_TYPE(CJKWidthFilterFactory), "boxfn_", make_descriptor(boxObject));
            env->getClass(CJKWidthFilterFactory::initializeClass);
            PyObject_SetAttrString((PyObject *) PY_TYPE(CJKWidthFilterFactory), "NAME", make_descriptor(j2p(*CJKWidthFilterFactory::NAME)));
          }

          static PyObject *t_CJKWidthFilterFactory_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, CJKWidthFilterFactory::initializeClass, 1)))
              return NULL;
            return t_CJKWidthFilterFactory::wrap_Object(CJKWidthFilterFactory(((t_CJKWidthFilterFactory *) arg)->object.this$));
          }
          static PyObject *t_CJKWidthFilterFactory_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, CJKWidthFilterFactory::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_CJKWidthFilterFactory_init_(t_CJKWidthFilterFactory *self, PyObject *args, PyObject *kwds)
          {
            ::java::util::Map a0((jobject) NULL);
            PyTypeObject **p0;
            CJKWidthFilterFactory object((jobject) NULL);

            if (!parseArgs(args, "K", ::java::util::Map::initializeClass, &a0, &p0, ::java::util::t_Map::parameters_))
            {
              INT_CALL(object = CJKWidthFilterFactory(a0));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_CJKWidthFilterFactory_create(t_CJKWidthFilterFactory *self, PyObject *args)
          {
            ::org::apache::lucene::analysis::TokenStream a0((jobject) NULL);
            ::org::apache::lucene::analysis::TokenStream result((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::analysis::TokenStream::initializeClass, &a0))
            {
              OBJ_CALL(result = self->object.create(a0));
              return ::org::apache::lucene::analysis::t_TokenStream::wrap_Object(result);
            }

            return callSuper(PY_TYPE(CJKWidthFilterFactory), (PyObject *) self, "create", args, 2);
          }

          static PyObject *t_CJKWidthFilterFactory_normalize(t_CJKWidthFilterFactory *self, PyObject *args)
          {
            ::org::apache::lucene::analysis::TokenStream a0((jobject) NULL);
            ::org::apache::lucene::analysis::TokenStream result((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::analysis::TokenStream::initializeClass, &a0))
            {
              OBJ_CALL(result = self->object.normalize(a0));
              return ::org::apache::lucene::analysis::t_TokenStream::wrap_Object(result);
            }

            return callSuper(PY_TYPE(CJKWidthFilterFactory), (PyObject *) self, "normalize", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/store/NativeUnixDirectory.h"
#include "org/apache/lucene/store/IndexOutput.h"
#include "org/apache/lucene/store/IOContext.h"
#include "org/apache/lucene/store/IndexInput.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/store/Directory.h"
#include "java/lang/String.h"
#include "java/io/IOException.h"
#include "java/nio/file/Path.h"
#include "org/apache/lucene/store/LockFactory.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace store {

        ::java::lang::Class *NativeUnixDirectory::class$ = NULL;
        jmethodID *NativeUnixDirectory::mids$ = NULL;
        bool NativeUnixDirectory::live$ = false;
        jint NativeUnixDirectory::DEFAULT_MERGE_BUFFER_SIZE = (jint) 0;
        jlong NativeUnixDirectory::DEFAULT_MIN_BYTES_DIRECT = (jlong) 0;

        jclass NativeUnixDirectory::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/store/NativeUnixDirectory");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_214edc4870a6ab39] = env->getMethodID(cls, "<init>", "(Ljava/nio/file/Path;Lorg/apache/lucene/store/Directory;)V");
            mids$[mid_init$_db939f381d52ac91] = env->getMethodID(cls, "<init>", "(Ljava/nio/file/Path;Lorg/apache/lucene/store/LockFactory;Lorg/apache/lucene/store/Directory;)V");
            mids$[mid_init$_0a269b46338b41e2] = env->getMethodID(cls, "<init>", "(Ljava/nio/file/Path;IJLorg/apache/lucene/store/LockFactory;Lorg/apache/lucene/store/Directory;)V");
            mids$[mid_createOutput_40e6d6dcc3f676b9] = env->getMethodID(cls, "createOutput", "(Ljava/lang/String;Lorg/apache/lucene/store/IOContext;)Lorg/apache/lucene/store/IndexOutput;");
            mids$[mid_openInput_cc9a9aabe8db93df] = env->getMethodID(cls, "openInput", "(Ljava/lang/String;Lorg/apache/lucene/store/IOContext;)Lorg/apache/lucene/store/IndexInput;");

            class$ = new ::java::lang::Class(cls);
            cls = (jclass) class$->this$;

            DEFAULT_MERGE_BUFFER_SIZE = env->getStaticIntField(cls, "DEFAULT_MERGE_BUFFER_SIZE");
            DEFAULT_MIN_BYTES_DIRECT = env->getStaticLongField(cls, "DEFAULT_MIN_BYTES_DIRECT");
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        NativeUnixDirectory::NativeUnixDirectory(const ::java::nio::file::Path & a0, const ::org::apache::lucene::store::Directory & a1) : ::org::apache::lucene::store::FSDirectory(env->newObject(initializeClass, &mids$, mid_init$_214edc4870a6ab39, a0.this$, a1.this$)) {}

        NativeUnixDirectory::NativeUnixDirectory(const ::java::nio::file::Path & a0, const ::org::apache::lucene::store::LockFactory & a1, const ::org::apache::lucene::store::Directory & a2) : ::org::apache::lucene::store::FSDirectory(env->newObject(initializeClass, &mids$, mid_init$_db939f381d52ac91, a0.this$, a1.this$, a2.this$)) {}

        NativeUnixDirectory::NativeUnixDirectory(const ::java::nio::file::Path & a0, jint a1, jlong a2, const ::org::apache::lucene::store::LockFactory & a3, const ::org::apache::lucene::store::Directory & a4) : ::org::apache::lucene::store::FSDirectory(env->newObject(initializeClass, &mids$, mid_init$_0a269b46338b41e2, a0.this$, a1, a2, a3.this$, a4.this$)) {}

        ::org::apache::lucene::store::IndexOutput NativeUnixDirectory::createOutput(const ::java::lang::String & a0, const ::org::apache::lucene::store::IOContext & a1) const
        {
          return ::org::apache::lucene::store::IndexOutput(env->callObjectMethod(this$, mids$[mid_createOutput_40e6d6dcc3f676b9], a0.this$, a1.this$));
        }

        ::org::apache::lucene::store::IndexInput NativeUnixDirectory::openInput(const ::java::lang::String & a0, const ::org::apache::lucene::store::IOContext & a1) const
        {
          return ::org::apache::lucene::store::IndexInput(env->callObjectMethod(this$, mids$[mid_openInput_cc9a9aabe8db93df], a0.this$, a1.this$));
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace store {
        static PyObject *t_NativeUnixDirectory_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_NativeUnixDirectory_instance_(PyTypeObject *type, PyObject *arg);
        static int t_NativeUnixDirectory_init_(t_NativeUnixDirectory *self, PyObject *args, PyObject *kwds);
        static PyObject *t_NativeUnixDirectory_createOutput(t_NativeUnixDirectory *self, PyObject *args);
        static PyObject *t_NativeUnixDirectory_openInput(t_NativeUnixDirectory *self, PyObject *args);

        static PyMethodDef t_NativeUnixDirectory__methods_[] = {
          DECLARE_METHOD(t_NativeUnixDirectory, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_NativeUnixDirectory, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_NativeUnixDirectory, createOutput, METH_VARARGS),
          DECLARE_METHOD(t_NativeUnixDirectory, openInput, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        static PyType_Slot PY_TYPE_SLOTS(NativeUnixDirectory)[] = {
          { Py_tp_methods, t_NativeUnixDirectory__methods_ },
          { Py_tp_init, (void *) t_NativeUnixDirectory_init_ },
          { 0, NULL }
        };

        static PyType_Def *PY_TYPE_BASES(NativeUnixDirectory)[] = {
          &PY_TYPE_DEF(::org::apache::lucene::store::FSDirectory),
          NULL
        };

        DEFINE_TYPE(NativeUnixDirectory, t_NativeUnixDirectory, NativeUnixDirectory);

        void t_NativeUnixDirectory::install(PyObject *module)
        {
          installType(&PY_TYPE(NativeUnixDirectory), &PY_TYPE_DEF(NativeUnixDirectory), module, "NativeUnixDirectory", 0);
        }

        void t_NativeUnixDirectory::initialize(PyObject *module)
        {
          PyObject_SetAttrString((PyObject *) PY_TYPE(NativeUnixDirectory), "class_", make_descriptor(NativeUnixDirectory::initializeClass, 1));
          PyObject_SetAttrString((PyObject *) PY_TYPE(NativeUnixDirectory), "wrapfn_", make_descriptor(t_NativeUnixDirectory::wrap_jobject));
          PyObject_SetAttrString((PyObject *) PY_TYPE(NativeUnixDirectory), "boxfn_", make_descriptor(boxObject));
          env->getClass(NativeUnixDirectory::initializeClass);
          PyObject_SetAttrString((PyObject *) PY_TYPE(NativeUnixDirectory), "DEFAULT_MERGE_BUFFER_SIZE", make_descriptor(NativeUnixDirectory::DEFAULT_MERGE_BUFFER_SIZE));
          PyObject_SetAttrString((PyObject *) PY_TYPE(NativeUnixDirectory), "DEFAULT_MIN_BYTES_DIRECT", make_descriptor(NativeUnixDirectory::DEFAULT_MIN_BYTES_DIRECT));
        }

        static PyObject *t_NativeUnixDirectory_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, NativeUnixDirectory::initializeClass, 1)))
            return NULL;
          return t_NativeUnixDirectory::wrap_Object(NativeUnixDirectory(((t_NativeUnixDirectory *) arg)->object.this$));
        }
        static PyObject *t_NativeUnixDirectory_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, NativeUnixDirectory::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_NativeUnixDirectory_init_(t_NativeUnixDirectory *self, PyObject *args, PyObject *kwds)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 2:
            {
              ::java::nio::file::Path a0((jobject) NULL);
              ::org::apache::lucene::store::Directory a1((jobject) NULL);
              NativeUnixDirectory object((jobject) NULL);

              if (!parseArgs(args, "kk", ::java::nio::file::Path::initializeClass, ::org::apache::lucene::store::Directory::initializeClass, &a0, &a1))
              {
                INT_CALL(object = NativeUnixDirectory(a0, a1));
                self->object = object;
                break;
              }
            }
            goto err;
           case 3:
            {
              ::java::nio::file::Path a0((jobject) NULL);
              ::org::apache::lucene::store::LockFactory a1((jobject) NULL);
              ::org::apache::lucene::store::Directory a2((jobject) NULL);
              NativeUnixDirectory object((jobject) NULL);

              if (!parseArgs(args, "kkk", ::java::nio::file::Path::initializeClass, ::org::apache::lucene::store::LockFactory::initializeClass, ::org::apache::lucene::store::Directory::initializeClass, &a0, &a1, &a2))
              {
                INT_CALL(object = NativeUnixDirectory(a0, a1, a2));
                self->object = object;
                break;
              }
            }
            goto err;
           case 5:
            {
              ::java::nio::file::Path a0((jobject) NULL);
              jint a1;
              jlong a2;
              ::org::apache::lucene::store::LockFactory a3((jobject) NULL);
              ::org::apache::lucene::store::Directory a4((jobject) NULL);
              NativeUnixDirectory object((jobject) NULL);

              if (!parseArgs(args, "kIJkk", ::java::nio::file::Path::initializeClass, ::org::apache::lucene::store::LockFactory::initializeClass, ::org::apache::lucene::store::Directory::initializeClass, &a0, &a1, &a2, &a3, &a4))
              {
                INT_CALL(object = NativeUnixDirectory(a0, a1, a2, a3, a4));
                self->object = object;
                break;
              }
            }
           default:
           err:
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }

        static PyObject *t_NativeUnixDirectory_createOutput(t_NativeUnixDirectory *self, PyObject *args)
        {
          ::java::lang::String a0((jobject) NULL);
          ::org::apache::lucene::store::IOContext a1((jobject) NULL);
          ::org::apache::lucene::store::IndexOutput result((jobject) NULL);

          if (!parseArgs(args, "sk", ::org::apache::lucene::store::IOContext::initializeClass, &a0, &a1))
          {
            OBJ_CALL(result = self->object.createOutput(a0, a1));
            return ::org::apache::lucene::store::t_IndexOutput::wrap_Object(result);
          }

          return callSuper(PY_TYPE(NativeUnixDirectory), (PyObject *) self, "createOutput", args, 2);
        }

        static PyObject *t_NativeUnixDirectory_openInput(t_NativeUnixDirectory *self, PyObject *args)
        {
          ::java::lang::String a0((jobject) NULL);
          ::org::apache::lucene::store::IOContext a1((jobject) NULL);
          ::org::apache::lucene::store::IndexInput result((jobject) NULL);

          if (!parseArgs(args, "sk", ::org::apache::lucene::store::IOContext::initializeClass, &a0, &a1))
          {
            OBJ_CALL(result = self->object.openInput(a0, a1));
            return ::org::apache::lucene::store::t_IndexInput::wrap_Object(result);
          }

          return callSuper(PY_TYPE(NativeUnixDirectory), (PyObject *) self, "openInput", args, 2);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/index/CheckIndex$Status$SegmentInfoStatus.h"
#include "org/apache/lucene/index/CheckIndex$Status$PointsStatus.h"
#include "java/util/Map.h"
#include "org/apache/lucene/index/CheckIndex$Status$StoredFieldStatus.h"
#include "org/apache/lucene/index/CheckIndex$Status$FieldNormStatus.h"
#include "org/apache/lucene/index/CheckIndex$Status$TermVectorStatus.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/index/CheckIndex$Status$IndexSortStatus.h"
#include "org/apache/lucene/index/CheckIndex$Status$TermIndexStatus.h"
#include "java/lang/String.h"
#include "org/apache/lucene/index/CheckIndex$Status$DocValuesStatus.h"
#include "org/apache/lucene/index/CheckIndex$Status$LiveDocStatus.h"
#include "org/apache/lucene/index/CheckIndex$Status$FieldInfoStatus.h"
#include "org/apache/lucene/codecs/Codec.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {

        ::java::lang::Class *CheckIndex$Status$SegmentInfoStatus::class$ = NULL;
        jmethodID *CheckIndex$Status$SegmentInfoStatus::mids$ = NULL;
        jfieldID *CheckIndex$Status$SegmentInfoStatus::fids$ = NULL;
        bool CheckIndex$Status$SegmentInfoStatus::live$ = false;

        jclass CheckIndex$Status$SegmentInfoStatus::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/index/CheckIndex$Status$SegmentInfoStatus");

            fids$ = new jfieldID[max_fid];
            fids$[fid_codec] = env->getFieldID(cls, "codec", "Lorg/apache/lucene/codecs/Codec;");
            fids$[fid_compound] = env->getFieldID(cls, "compound", "Z");
            fids$[fid_deletionsGen] = env->getFieldID(cls, "deletionsGen", "J");
            fids$[fid_diagnostics] = env->getFieldID(cls, "diagnostics", "Ljava/util/Map;");
            fids$[fid_docValuesStatus] = env->getFieldID(cls, "docValuesStatus", "Lorg/apache/lucene/index/CheckIndex$Status$DocValuesStatus;");
            fids$[fid_fieldInfoStatus] = env->getFieldID(cls, "fieldInfoStatus", "Lorg/apache/lucene/index/CheckIndex$Status$FieldInfoStatus;");
            fids$[fid_fieldNormStatus] = env->getFieldID(cls, "fieldNormStatus", "Lorg/apache/lucene/index/CheckIndex$Status$FieldNormStatus;");
            fids$[fid_hasDeletions] = env->getFieldID(cls, "hasDeletions", "Z");
            fids$[fid_indexSortStatus] = env->getFieldID(cls, "indexSortStatus", "Lorg/apache/lucene/index/CheckIndex$Status$IndexSortStatus;");
            fids$[fid_liveDocStatus] = env->getFieldID(cls, "liveDocStatus", "Lorg/apache/lucene/index/CheckIndex$Status$LiveDocStatus;");
            fids$[fid_maxDoc] = env->getFieldID(cls, "maxDoc", "I");
            fids$[fid_name] = env->getFieldID(cls, "name", "Ljava/lang/String;");
            fids$[fid_numFiles] = env->getFieldID(cls, "numFiles", "I");
            fids$[fid_openReaderPassed] = env->getFieldID(cls, "openReaderPassed", "Z");
            fids$[fid_pointsStatus] = env->getFieldID(cls, "pointsStatus", "Lorg/apache/lucene/index/CheckIndex$Status$PointsStatus;");
            fids$[fid_sizeMB] = env->getFieldID(cls, "sizeMB", "D");
            fids$[fid_storedFieldStatus] = env->getFieldID(cls, "storedFieldStatus", "Lorg/apache/lucene/index/CheckIndex$Status$StoredFieldStatus;");
            fids$[fid_termIndexStatus] = env->getFieldID(cls, "termIndexStatus", "Lorg/apache/lucene/index/CheckIndex$Status$TermIndexStatus;");
            fids$[fid_termVectorStatus] = env->getFieldID(cls, "termVectorStatus", "Lorg/apache/lucene/index/CheckIndex$Status$TermVectorStatus;");

            class$ = new ::java::lang::Class(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        ::org::apache::lucene::codecs::Codec CheckIndex$Status$SegmentInfoStatus::_get_codec() const
        {
          return ::org::apache::lucene::codecs::Codec(env->getObjectField(this$, fids$[fid_codec]));
        }

        void CheckIndex$Status$SegmentInfoStatus::_set_codec(const ::org::apache::lucene::codecs::Codec & a0) const
        {
          env->setObjectField(this$, fids$[fid_codec], a0.this$);
        }

        jboolean CheckIndex$Status$SegmentInfoStatus::_get_compound() const
        {
          return env->getBooleanField(this$, fids$[fid_compound]);
        }

        void CheckIndex$Status$SegmentInfoStatus::_set_compound(jboolean a0) const
        {
          env->setBooleanField(this$, fids$[fid_compound], a0);
        }

        jlong CheckIndex$Status$SegmentInfoStatus::_get_deletionsGen() const
        {
          return env->getLongField(this$, fids$[fid_deletionsGen]);
        }

        void CheckIndex$Status$SegmentInfoStatus::_set_deletionsGen(jlong a0) const
        {
          env->setLongField(this$, fids$[fid_deletionsGen], a0);
        }

        ::java::util::Map CheckIndex$Status$SegmentInfoStatus::_get_diagnostics() const
        {
          return ::java::util::Map(env->getObjectField(this$, fids$[fid_diagnostics]));
        }

        void CheckIndex$Status$SegmentInfoStatus::_set_diagnostics(const ::java::util::Map & a0) const
        {
          env->setObjectField(this$, fids$[fid_diagnostics], a0.this$);
        }

        ::org::apache::lucene::index::CheckIndex$Status$DocValuesStatus CheckIndex$Status$SegmentInfoStatus::_get_docValuesStatus() const
        {
          return ::org::apache::lucene::index::CheckIndex$Status$DocValuesStatus(env->getObjectField(this$, fids$[fid_docValuesStatus]));
        }

        void CheckIndex$Status$SegmentInfoStatus::_set_docValuesStatus(const ::org::apache::lucene::index::CheckIndex$Status$DocValuesStatus & a0) const
        {
          env->setObjectField(this$, fids$[fid_docValuesStatus], a0.this$);
        }

        ::org::apache::lucene::index::CheckIndex$Status$FieldInfoStatus CheckIndex$Status$SegmentInfoStatus::_get_fieldInfoStatus() const
        {
          return ::org::apache::lucene::index::CheckIndex$Status$FieldInfoStatus(env->getObjectField(this$, fids$[fid_fieldInfoStatus]));
        }

        void CheckIndex$Status$SegmentInfoStatus::_set_fieldInfoStatus(const ::org::apache::lucene::index::CheckIndex$Status$FieldInfoStatus & a0) const
        {
          env->setObjectField(this$, fids$[fid_fieldInfoStatus], a0.this$);
        }

        ::org::apache::lucene::index::CheckIndex$Status$FieldNormStatus CheckIndex$Status$SegmentInfoStatus::_get_fieldNormStatus() const
        {
          return ::org::apache::lucene::index::CheckIndex$Status$FieldNormStatus(env->getObjectField(this$, fids$[fid_fieldNormStatus]));
        }

        void CheckIndex$Status$SegmentInfoStatus::_set_fieldNormStatus(const ::org::apache::lucene::index::CheckIndex$Status$FieldNormStatus & a0) const
        {
          env->setObjectField(this$, fids$[fid_fieldNormStatus], a0.this$);
        }

        jboolean CheckIndex$Status$SegmentInfoStatus::_get_hasDeletions() const
        {
          return env->getBooleanField(this$, fids$[fid_hasDeletions]);
        }

        void CheckIndex$Status$SegmentInfoStatus::_set_hasDeletions(jboolean a0) const
        {
          env->setBooleanField(this$, fids$[fid_hasDeletions], a0);
        }

        ::org::apache::lucene::index::CheckIndex$Status$IndexSortStatus CheckIndex$Status$SegmentInfoStatus::_get_indexSortStatus() const
        {
          return ::org::apache::lucene::index::CheckIndex$Status$IndexSortStatus(env->getObjectField(this$, fids$[fid_indexSortStatus]));
        }

        void CheckIndex$Status$SegmentInfoStatus::_set_indexSortStatus(const ::org::apache::lucene::index::CheckIndex$Status$IndexSortStatus & a0) const
        {
          env->setObjectField(this$, fids$[fid_indexSortStatus], a0.this$);
        }

        ::org::apache::lucene::index::CheckIndex$Status$LiveDocStatus CheckIndex$Status$SegmentInfoStatus::_get_liveDocStatus() const
        {
          return ::org::apache::lucene::index::CheckIndex$Status$LiveDocStatus(env->getObjectField(this$, fids$[fid_liveDocStatus]));
        }

        void CheckIndex$Status$SegmentInfoStatus::_set_liveDocStatus(const ::org::apache::lucene::index::CheckIndex$Status$LiveDocStatus & a0) const
        {
          env->setObjectField(this$, fids$[fid_liveDocStatus], a0.this$);
        }

        jint CheckIndex$Status$SegmentInfoStatus::_get_maxDoc() const
        {
          return env->getIntField(this$, fids$[fid_maxDoc]);
        }

        void CheckIndex$Status$SegmentInfoStatus::_set_maxDoc(jint a0) const
        {
          env->setIntField(this$, fids$[fid_maxDoc], a0);
        }

        ::java::lang::String CheckIndex$Status$SegmentInfoStatus::_get_name() const
        {
          return ::java::lang::String(env->getObjectField(this$, fids$[fid_name]));
        }

        void CheckIndex$Status$SegmentInfoStatus::_set_name(const ::java::lang::String & a0) const
        {
          env->setObjectField(this$, fids$[fid_name], a0.this$);
        }

        jint CheckIndex$Status$SegmentInfoStatus::_get_numFiles() const
        {
          return env->getIntField(this$, fids$[fid_numFiles]);
        }

        void CheckIndex$Status$SegmentInfoStatus::_set_numFiles(jint a0) const
        {
          env->setIntField(this$, fids$[fid_numFiles], a0);
        }

        jboolean CheckIndex$Status$SegmentInfoStatus::_get_openReaderPassed() const
        {
          return env->getBooleanField(this$, fids$[fid_openReaderPassed]);
        }

        void CheckIndex$Status$SegmentInfoStatus::_set_openReaderPassed(jboolean a0) const
        {
          env->setBooleanField(this$, fids$[fid_openReaderPassed], a0);
        }

        ::org::apache::lucene::index::CheckIndex$Status$PointsStatus CheckIndex$Status$SegmentInfoStatus::_get_pointsStatus() const
        {
          return ::org::apache::lucene::index::CheckIndex$Status$PointsStatus(env->getObjectField(this$, fids$[fid_pointsStatus]));
        }

        void CheckIndex$Status$SegmentInfoStatus::_set_pointsStatus(const ::org::apache::lucene::index::CheckIndex$Status$PointsStatus & a0) const
        {
          env->setObjectField(this$, fids$[fid_pointsStatus], a0.this$);
        }

        jdouble CheckIndex$Status$SegmentInfoStatus::_get_sizeMB() const
        {
          return env->getDoubleField(this$, fids$[fid_sizeMB]);
        }

        void CheckIndex$Status$SegmentInfoStatus::_set_sizeMB(jdouble a0) const
        {
          env->setDoubleField(this$, fids$[fid_sizeMB], a0);
        }

        ::org::apache::lucene::index::CheckIndex$Status$StoredFieldStatus CheckIndex$Status$SegmentInfoStatus::_get_storedFieldStatus() const
        {
          return ::org::apache::lucene::index::CheckIndex$Status$StoredFieldStatus(env->getObjectField(this$, fids$[fid_storedFieldStatus]));
        }

        void CheckIndex$Status$SegmentInfoStatus::_set_storedFieldStatus(const ::org::apache::lucene::index::CheckIndex$Status$StoredFieldStatus & a0) const
        {
          env->setObjectField(this$, fids$[fid_storedFieldStatus], a0.this$);
        }

        ::org::apache::lucene::index::CheckIndex$Status$TermIndexStatus CheckIndex$Status$SegmentInfoStatus::_get_termIndexStatus() const
        {
          return ::org::apache::lucene::index::CheckIndex$Status$TermIndexStatus(env->getObjectField(this$, fids$[fid_termIndexStatus]));
        }

        void CheckIndex$Status$SegmentInfoStatus::_set_termIndexStatus(const ::org::apache::lucene::index::CheckIndex$Status$TermIndexStatus & a0) const
        {
          env->setObjectField(this$, fids$[fid_termIndexStatus], a0.this$);
        }

        ::org::apache::lucene::index::CheckIndex$Status$TermVectorStatus CheckIndex$Status$SegmentInfoStatus::_get_termVectorStatus() const
        {
          return ::org::apache::lucene::index::CheckIndex$Status$TermVectorStatus(env->getObjectField(this$, fids$[fid_termVectorStatus]));
        }

        void CheckIndex$Status$SegmentInfoStatus::_set_termVectorStatus(const ::org::apache::lucene::index::CheckIndex$Status$TermVectorStatus & a0) const
        {
          env->setObjectField(this$, fids$[fid_termVectorStatus], a0.this$);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {
        static PyObject *t_CheckIndex$Status$SegmentInfoStatus_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_CheckIndex$Status$SegmentInfoStatus_instance_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_CheckIndex$Status$SegmentInfoStatus_get__codec(t_CheckIndex$Status$SegmentInfoStatus *self, void *data);
        static int t_CheckIndex$Status$SegmentInfoStatus_set__codec(t_CheckIndex$Status$SegmentInfoStatus *self, PyObject *arg, void *data);
        static PyObject *t_CheckIndex$Status$SegmentInfoStatus_get__compound(t_CheckIndex$Status$SegmentInfoStatus *self, void *data);
        static int t_CheckIndex$Status$SegmentInfoStatus_set__compound(t_CheckIndex$Status$SegmentInfoStatus *self, PyObject *arg, void *data);
        static PyObject *t_CheckIndex$Status$SegmentInfoStatus_get__deletionsGen(t_CheckIndex$Status$SegmentInfoStatus *self, void *data);
        static int t_CheckIndex$Status$SegmentInfoStatus_set__deletionsGen(t_CheckIndex$Status$SegmentInfoStatus *self, PyObject *arg, void *data);
        static PyObject *t_CheckIndex$Status$SegmentInfoStatus_get__diagnostics(t_CheckIndex$Status$SegmentInfoStatus *self, void *data);
        static int t_CheckIndex$Status$SegmentInfoStatus_set__diagnostics(t_CheckIndex$Status$SegmentInfoStatus *self, PyObject *arg, void *data);
        static PyObject *t_CheckIndex$Status$SegmentInfoStatus_get__docValuesStatus(t_CheckIndex$Status$SegmentInfoStatus *self, void *data);
        static int t_CheckIndex$Status$SegmentInfoStatus_set__docValuesStatus(t_CheckIndex$Status$SegmentInfoStatus *self, PyObject *arg, void *data);
        static PyObject *t_CheckIndex$Status$SegmentInfoStatus_get__fieldInfoStatus(t_CheckIndex$Status$SegmentInfoStatus *self, void *data);
        static int t_CheckIndex$Status$SegmentInfoStatus_set__fieldInfoStatus(t_CheckIndex$Status$SegmentInfoStatus *self, PyObject *arg, void *data);
        static PyObject *t_CheckIndex$Status$SegmentInfoStatus_get__fieldNormStatus(t_CheckIndex$Status$SegmentInfoStatus *self, void *data);
        static int t_CheckIndex$Status$SegmentInfoStatus_set__fieldNormStatus(t_CheckIndex$Status$SegmentInfoStatus *self, PyObject *arg, void *data);
        static PyObject *t_CheckIndex$Status$SegmentInfoStatus_get__hasDeletions(t_CheckIndex$Status$SegmentInfoStatus *self, void *data);
        static int t_CheckIndex$Status$SegmentInfoStatus_set__hasDeletions(t_CheckIndex$Status$SegmentInfoStatus *self, PyObject *arg, void *data);
        static PyObject *t_CheckIndex$Status$SegmentInfoStatus_get__indexSortStatus(t_CheckIndex$Status$SegmentInfoStatus *self, void *data);
        static int t_CheckIndex$Status$SegmentInfoStatus_set__indexSortStatus(t_CheckIndex$Status$SegmentInfoStatus *self, PyObject *arg, void *data);
        static PyObject *t_CheckIndex$Status$SegmentInfoStatus_get__liveDocStatus(t_CheckIndex$Status$SegmentInfoStatus *self, void *data);
        static int t_CheckIndex$Status$SegmentInfoStatus_set__liveDocStatus(t_CheckIndex$Status$SegmentInfoStatus *self, PyObject *arg, void *data);
        static PyObject *t_CheckIndex$Status$SegmentInfoStatus_get__maxDoc(t_CheckIndex$Status$SegmentInfoStatus *self, void *data);
        static int t_CheckIndex$Status$SegmentInfoStatus_set__maxDoc(t_CheckIndex$Status$SegmentInfoStatus *self, PyObject *arg, void *data);
        static PyObject *t_CheckIndex$Status$SegmentInfoStatus_get__name(t_CheckIndex$Status$SegmentInfoStatus *self, void *data);
        static int t_CheckIndex$Status$SegmentInfoStatus_set__name(t_CheckIndex$Status$SegmentInfoStatus *self, PyObject *arg, void *data);
        static PyObject *t_CheckIndex$Status$SegmentInfoStatus_get__numFiles(t_CheckIndex$Status$SegmentInfoStatus *self, void *data);
        static int t_CheckIndex$Status$SegmentInfoStatus_set__numFiles(t_CheckIndex$Status$SegmentInfoStatus *self, PyObject *arg, void *data);
        static PyObject *t_CheckIndex$Status$SegmentInfoStatus_get__openReaderPassed(t_CheckIndex$Status$SegmentInfoStatus *self, void *data);
        static int t_CheckIndex$Status$SegmentInfoStatus_set__openReaderPassed(t_CheckIndex$Status$SegmentInfoStatus *self, PyObject *arg, void *data);
        static PyObject *t_CheckIndex$Status$SegmentInfoStatus_get__pointsStatus(t_CheckIndex$Status$SegmentInfoStatus *self, void *data);
        static int t_CheckIndex$Status$SegmentInfoStatus_set__pointsStatus(t_CheckIndex$Status$SegmentInfoStatus *self, PyObject *arg, void *data);
        static PyObject *t_CheckIndex$Status$SegmentInfoStatus_get__sizeMB(t_CheckIndex$Status$SegmentInfoStatus *self, void *data);
        static int t_CheckIndex$Status$SegmentInfoStatus_set__sizeMB(t_CheckIndex$Status$SegmentInfoStatus *self, PyObject *arg, void *data);
        static PyObject *t_CheckIndex$Status$SegmentInfoStatus_get__storedFieldStatus(t_CheckIndex$Status$SegmentInfoStatus *self, void *data);
        static int t_CheckIndex$Status$SegmentInfoStatus_set__storedFieldStatus(t_CheckIndex$Status$SegmentInfoStatus *self, PyObject *arg, void *data);
        static PyObject *t_CheckIndex$Status$SegmentInfoStatus_get__termIndexStatus(t_CheckIndex$Status$SegmentInfoStatus *self, void *data);
        static int t_CheckIndex$Status$SegmentInfoStatus_set__termIndexStatus(t_CheckIndex$Status$SegmentInfoStatus *self, PyObject *arg, void *data);
        static PyObject *t_CheckIndex$Status$SegmentInfoStatus_get__termVectorStatus(t_CheckIndex$Status$SegmentInfoStatus *self, void *data);
        static int t_CheckIndex$Status$SegmentInfoStatus_set__termVectorStatus(t_CheckIndex$Status$SegmentInfoStatus *self, PyObject *arg, void *data);

        static PyGetSetDef t_CheckIndex$Status$SegmentInfoStatus__fields_[] = {
          DECLARE_GETSET_FIELD(t_CheckIndex$Status$SegmentInfoStatus, codec),
          DECLARE_GETSET_FIELD(t_CheckIndex$Status$SegmentInfoStatus, compound),
          DECLARE_GETSET_FIELD(t_CheckIndex$Status$SegmentInfoStatus, deletionsGen),
          DECLARE_GETSET_FIELD(t_CheckIndex$Status$SegmentInfoStatus, diagnostics),
          DECLARE_GETSET_FIELD(t_CheckIndex$Status$SegmentInfoStatus, docValuesStatus),
          DECLARE_GETSET_FIELD(t_CheckIndex$Status$SegmentInfoStatus, fieldInfoStatus),
          DECLARE_GETSET_FIELD(t_CheckIndex$Status$SegmentInfoStatus, fieldNormStatus),
          DECLARE_GETSET_FIELD(t_CheckIndex$Status$SegmentInfoStatus, hasDeletions),
          DECLARE_GETSET_FIELD(t_CheckIndex$Status$SegmentInfoStatus, indexSortStatus),
          DECLARE_GETSET_FIELD(t_CheckIndex$Status$SegmentInfoStatus, liveDocStatus),
          DECLARE_GETSET_FIELD(t_CheckIndex$Status$SegmentInfoStatus, maxDoc),
          DECLARE_GETSET_FIELD(t_CheckIndex$Status$SegmentInfoStatus, name),
          DECLARE_GETSET_FIELD(t_CheckIndex$Status$SegmentInfoStatus, numFiles),
          DECLARE_GETSET_FIELD(t_CheckIndex$Status$SegmentInfoStatus, openReaderPassed),
          DECLARE_GETSET_FIELD(t_CheckIndex$Status$SegmentInfoStatus, pointsStatus),
          DECLARE_GETSET_FIELD(t_CheckIndex$Status$SegmentInfoStatus, sizeMB),
          DECLARE_GETSET_FIELD(t_CheckIndex$Status$SegmentInfoStatus, storedFieldStatus),
          DECLARE_GETSET_FIELD(t_CheckIndex$Status$SegmentInfoStatus, termIndexStatus),
          DECLARE_GETSET_FIELD(t_CheckIndex$Status$SegmentInfoStatus, termVectorStatus),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_CheckIndex$Status$SegmentInfoStatus__methods_[] = {
          DECLARE_METHOD(t_CheckIndex$Status$SegmentInfoStatus, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_CheckIndex$Status$SegmentInfoStatus, instance_, METH_O | METH_CLASS),
          { NULL, NULL, 0, NULL }
        };

        static PyType_Slot PY_TYPE_SLOTS(CheckIndex$Status$SegmentInfoStatus)[] = {
          { Py_tp_methods, t_CheckIndex$Status$SegmentInfoStatus__methods_ },
          { Py_tp_init, (void *) abstract_init },
          { Py_tp_getset, t_CheckIndex$Status$SegmentInfoStatus__fields_ },
          { 0, NULL }
        };

        static PyType_Def *PY_TYPE_BASES(CheckIndex$Status$SegmentInfoStatus)[] = {
          &PY_TYPE_DEF(::java::lang::Object),
          NULL
        };

        DEFINE_TYPE(CheckIndex$Status$SegmentInfoStatus, t_CheckIndex$Status$SegmentInfoStatus, CheckIndex$Status$SegmentInfoStatus);

        void t_CheckIndex$Status$SegmentInfoStatus::install(PyObject *module)
        {
          installType(&PY_TYPE(CheckIndex$Status$SegmentInfoStatus), &PY_TYPE_DEF(CheckIndex$Status$SegmentInfoStatus), module, "CheckIndex$Status$SegmentInfoStatus", 0);
        }

        void t_CheckIndex$Status$SegmentInfoStatus::initialize(PyObject *module)
        {
          PyObject_SetAttrString((PyObject *) PY_TYPE(CheckIndex$Status$SegmentInfoStatus), "class_", make_descriptor(CheckIndex$Status$SegmentInfoStatus::initializeClass, 1));
          PyObject_SetAttrString((PyObject *) PY_TYPE(CheckIndex$Status$SegmentInfoStatus), "wrapfn_", make_descriptor(t_CheckIndex$Status$SegmentInfoStatus::wrap_jobject));
          PyObject_SetAttrString((PyObject *) PY_TYPE(CheckIndex$Status$SegmentInfoStatus), "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_CheckIndex$Status$SegmentInfoStatus_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, CheckIndex$Status$SegmentInfoStatus::initializeClass, 1)))
            return NULL;
          return t_CheckIndex$Status$SegmentInfoStatus::wrap_Object(CheckIndex$Status$SegmentInfoStatus(((t_CheckIndex$Status$SegmentInfoStatus *) arg)->object.this$));
        }
        static PyObject *t_CheckIndex$Status$SegmentInfoStatus_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, CheckIndex$Status$SegmentInfoStatus::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static PyObject *t_CheckIndex$Status$SegmentInfoStatus_get__codec(t_CheckIndex$Status$SegmentInfoStatus *self, void *data)
        {
          ::org::apache::lucene::codecs::Codec value((jobject) NULL);
          OBJ_CALL(value = self->object._get_codec());
          return ::org::apache::lucene::codecs::t_Codec::wrap_Object(value);
        }
        static int t_CheckIndex$Status$SegmentInfoStatus_set__codec(t_CheckIndex$Status$SegmentInfoStatus *self, PyObject *arg, void *data)
        {
          ::org::apache::lucene::codecs::Codec value((jobject) NULL);
          if (!parseArg(arg, "k", ::org::apache::lucene::codecs::Codec::initializeClass, &value))
          {
            INT_CALL(self->object._set_codec(value));
            return 0;
          }
          PyErr_SetArgsError((PyObject *) self, "codec", arg);
          return -1;
        }

        static PyObject *t_CheckIndex$Status$SegmentInfoStatus_get__compound(t_CheckIndex$Status$SegmentInfoStatus *self, void *data)
        {
          jboolean value;
          OBJ_CALL(value = self->object._get_compound());
          Py_RETURN_BOOL(value);
        }
        static int t_CheckIndex$Status$SegmentInfoStatus_set__compound(t_CheckIndex$Status$SegmentInfoStatus *self, PyObject *arg, void *data)
        {
          jboolean value;
          if (!parseArg(arg, "Z", &value))
          {
            INT_CALL(self->object._set_compound(value));
            return 0;
          }
          PyErr_SetArgsError((PyObject *) self, "compound", arg);
          return -1;
        }

        static PyObject *t_CheckIndex$Status$SegmentInfoStatus_get__deletionsGen(t_CheckIndex$Status$SegmentInfoStatus *self, void *data)
        {
          jlong value;
          OBJ_CALL(value = self->object._get_deletionsGen());
          return PyLong_FromLongLong((PY_LONG_LONG) value);
        }
        static int t_CheckIndex$Status$SegmentInfoStatus_set__deletionsGen(t_CheckIndex$Status$SegmentInfoStatus *self, PyObject *arg, void *data)
        {
          jlong value;
          if (!parseArg(arg, "J", &value))
          {
            INT_CALL(self->object._set_deletionsGen(value));
            return 0;
          }
          PyErr_SetArgsError((PyObject *) self, "deletionsGen", arg);
          return -1;
        }

        static PyObject *t_CheckIndex$Status$SegmentInfoStatus_get__diagnostics(t_CheckIndex$Status$SegmentInfoStatus *self, void *data)
        {
          ::java::util::Map value((jobject) NULL);
          OBJ_CALL(value = self->object._get_diagnostics());
          return ::java::util::t_Map::wrap_Object(value);
        }
        static int t_CheckIndex$Status$SegmentInfoStatus_set__diagnostics(t_CheckIndex$Status$SegmentInfoStatus *self, PyObject *arg, void *data)
        {
          ::java::util::Map value((jobject) NULL);
          if (!parseArg(arg, "k", ::java::util::Map::initializeClass, &value))
          {
            INT_CALL(self->object._set_diagnostics(value));
            return 0;
          }
          PyErr_SetArgsError((PyObject *) self, "diagnostics", arg);
          return -1;
        }

        static PyObject *t_CheckIndex$Status$SegmentInfoStatus_get__docValuesStatus(t_CheckIndex$Status$SegmentInfoStatus *self, void *data)
        {
          ::org::apache::lucene::index::CheckIndex$Status$DocValuesStatus value((jobject) NULL);
          OBJ_CALL(value = self->object._get_docValuesStatus());
          return ::org::apache::lucene::index::t_CheckIndex$Status$DocValuesStatus::wrap_Object(value);
        }
        static int t_CheckIndex$Status$SegmentInfoStatus_set__docValuesStatus(t_CheckIndex$Status$SegmentInfoStatus *self, PyObject *arg, void *data)
        {
          ::org::apache::lucene::index::CheckIndex$Status$DocValuesStatus value((jobject) NULL);
          if (!parseArg(arg, "k", ::org::apache::lucene::index::CheckIndex$Status$DocValuesStatus::initializeClass, &value))
          {
            INT_CALL(self->object._set_docValuesStatus(value));
            return 0;
          }
          PyErr_SetArgsError((PyObject *) self, "docValuesStatus", arg);
          return -1;
        }

        static PyObject *t_CheckIndex$Status$SegmentInfoStatus_get__fieldInfoStatus(t_CheckIndex$Status$SegmentInfoStatus *self, void *data)
        {
          ::org::apache::lucene::index::CheckIndex$Status$FieldInfoStatus value((jobject) NULL);
          OBJ_CALL(value = self->object._get_fieldInfoStatus());
          return ::org::apache::lucene::index::t_CheckIndex$Status$FieldInfoStatus::wrap_Object(value);
        }
        static int t_CheckIndex$Status$SegmentInfoStatus_set__fieldInfoStatus(t_CheckIndex$Status$SegmentInfoStatus *self, PyObject *arg, void *data)
        {
          ::org::apache::lucene::index::CheckIndex$Status$FieldInfoStatus value((jobject) NULL);
          if (!parseArg(arg, "k", ::org::apache::lucene::index::CheckIndex$Status$FieldInfoStatus::initializeClass, &value))
          {
            INT_CALL(self->object._set_fieldInfoStatus(value));
            return 0;
          }
          PyErr_SetArgsError((PyObject *) self, "fieldInfoStatus", arg);
          return -1;
        }

        static PyObject *t_CheckIndex$Status$SegmentInfoStatus_get__fieldNormStatus(t_CheckIndex$Status$SegmentInfoStatus *self, void *data)
        {
          ::org::apache::lucene::index::CheckIndex$Status$FieldNormStatus value((jobject) NULL);
          OBJ_CALL(value = self->object._get_fieldNormStatus());
          return ::org::apache::lucene::index::t_CheckIndex$Status$FieldNormStatus::wrap_Object(value);
        }
        static int t_CheckIndex$Status$SegmentInfoStatus_set__fieldNormStatus(t_CheckIndex$Status$SegmentInfoStatus *self, PyObject *arg, void *data)
        {
          ::org::apache::lucene::index::CheckIndex$Status$FieldNormStatus value((jobject) NULL);
          if (!parseArg(arg, "k", ::org::apache::lucene::index::CheckIndex$Status$FieldNormStatus::initializeClass, &value))
          {
            INT_CALL(self->object._set_fieldNormStatus(value));
            return 0;
          }
          PyErr_SetArgsError((PyObject *) self, "fieldNormStatus", arg);
          return -1;
        }

        static PyObject *t_CheckIndex$Status$SegmentInfoStatus_get__hasDeletions(t_CheckIndex$Status$SegmentInfoStatus *self, void *data)
        {
          jboolean value;
          OBJ_CALL(value = self->object._get_hasDeletions());
          Py_RETURN_BOOL(value);
        }
        static int t_CheckIndex$Status$SegmentInfoStatus_set__hasDeletions(t_CheckIndex$Status$SegmentInfoStatus *self, PyObject *arg, void *data)
        {
          jboolean value;
          if (!parseArg(arg, "Z", &value))
          {
            INT_CALL(self->object._set_hasDeletions(value));
            return 0;
          }
          PyErr_SetArgsError((PyObject *) self, "hasDeletions", arg);
          return -1;
        }

        static PyObject *t_CheckIndex$Status$SegmentInfoStatus_get__indexSortStatus(t_CheckIndex$Status$SegmentInfoStatus *self, void *data)
        {
          ::org::apache::lucene::index::CheckIndex$Status$IndexSortStatus value((jobject) NULL);
          OBJ_CALL(value = self->object._get_indexSortStatus());
          return ::org::apache::lucene::index::t_CheckIndex$Status$IndexSortStatus::wrap_Object(value);
        }
        static int t_CheckIndex$Status$SegmentInfoStatus_set__indexSortStatus(t_CheckIndex$Status$SegmentInfoStatus *self, PyObject *arg, void *data)
        {
          ::org::apache::lucene::index::CheckIndex$Status$IndexSortStatus value((jobject) NULL);
          if (!parseArg(arg, "k", ::org::apache::lucene::index::CheckIndex$Status$IndexSortStatus::initializeClass, &value))
          {
            INT_CALL(self->object._set_indexSortStatus(value));
            return 0;
          }
          PyErr_SetArgsError((PyObject *) self, "indexSortStatus", arg);
          return -1;
        }

        static PyObject *t_CheckIndex$Status$SegmentInfoStatus_get__liveDocStatus(t_CheckIndex$Status$SegmentInfoStatus *self, void *data)
        {
          ::org::apache::lucene::index::CheckIndex$Status$LiveDocStatus value((jobject) NULL);
          OBJ_CALL(value = self->object._get_liveDocStatus());
          return ::org::apache::lucene::index::t_CheckIndex$Status$LiveDocStatus::wrap_Object(value);
        }
        static int t_CheckIndex$Status$SegmentInfoStatus_set__liveDocStatus(t_CheckIndex$Status$SegmentInfoStatus *self, PyObject *arg, void *data)
        {
          ::org::apache::lucene::index::CheckIndex$Status$LiveDocStatus value((jobject) NULL);
          if (!parseArg(arg, "k", ::org::apache::lucene::index::CheckIndex$Status$LiveDocStatus::initializeClass, &value))
          {
            INT_CALL(self->object._set_liveDocStatus(value));
            return 0;
          }
          PyErr_SetArgsError((PyObject *) self, "liveDocStatus", arg);
          return -1;
        }

        static PyObject *t_CheckIndex$Status$SegmentInfoStatus_get__maxDoc(t_CheckIndex$Status$SegmentInfoStatus *self, void *data)
        {
          jint value;
          OBJ_CALL(value = self->object._get_maxDoc());
          return PyLong_FromLong((long) value);
        }
        static int t_CheckIndex$Status$SegmentInfoStatus_set__maxDoc(t_CheckIndex$Status$SegmentInfoStatus *self, PyObject *arg, void *data)
        {
          jint value;
          if (!parseArg(arg, "I", &value))
          {
            INT_CALL(self->object._set_maxDoc(value));
            return 0;
          }
          PyErr_SetArgsError((PyObject *) self, "maxDoc", arg);
          return -1;
        }

        static PyObject *t_CheckIndex$Status$SegmentInfoStatus_get__name(t_CheckIndex$Status$SegmentInfoStatus *self, void *data)
        {
          ::java::lang::String value((jobject) NULL);
          OBJ_CALL(value = self->object._get_name());
          return j2p(value);
        }
        static int t_CheckIndex$Status$SegmentInfoStatus_set__name(t_CheckIndex$Status$SegmentInfoStatus *self, PyObject *arg, void *data)
        {
          ::java::lang::String value((jobject) NULL);
          if (!parseArg(arg, "s", &value))
          {
            INT_CALL(self->object._set_name(value));
            return 0;
          }
          PyErr_SetArgsError((PyObject *) self, "name", arg);
          return -1;
        }

        static PyObject *t_CheckIndex$Status$SegmentInfoStatus_get__numFiles(t_CheckIndex$Status$SegmentInfoStatus *self, void *data)
        {
          jint value;
          OBJ_CALL(value = self->object._get_numFiles());
          return PyLong_FromLong((long) value);
        }
        static int t_CheckIndex$Status$SegmentInfoStatus_set__numFiles(t_CheckIndex$Status$SegmentInfoStatus *self, PyObject *arg, void *data)
        {
          jint value;
          if (!parseArg(arg, "I", &value))
          {
            INT_CALL(self->object._set_numFiles(value));
            return 0;
          }
          PyErr_SetArgsError((PyObject *) self, "numFiles", arg);
          return -1;
        }

        static PyObject *t_CheckIndex$Status$SegmentInfoStatus_get__openReaderPassed(t_CheckIndex$Status$SegmentInfoStatus *self, void *data)
        {
          jboolean value;
          OBJ_CALL(value = self->object._get_openReaderPassed());
          Py_RETURN_BOOL(value);
        }
        static int t_CheckIndex$Status$SegmentInfoStatus_set__openReaderPassed(t_CheckIndex$Status$SegmentInfoStatus *self, PyObject *arg, void *data)
        {
          jboolean value;
          if (!parseArg(arg, "Z", &value))
          {
            INT_CALL(self->object._set_openReaderPassed(value));
            return 0;
          }
          PyErr_SetArgsError((PyObject *) self, "openReaderPassed", arg);
          return -1;
        }

        static PyObject *t_CheckIndex$Status$SegmentInfoStatus_get__pointsStatus(t_CheckIndex$Status$SegmentInfoStatus *self, void *data)
        {
          ::org::apache::lucene::index::CheckIndex$Status$PointsStatus value((jobject) NULL);
          OBJ_CALL(value = self->object._get_pointsStatus());
          return ::org::apache::lucene::index::t_CheckIndex$Status$PointsStatus::wrap_Object(value);
        }
        static int t_CheckIndex$Status$SegmentInfoStatus_set__pointsStatus(t_CheckIndex$Status$SegmentInfoStatus *self, PyObject *arg, void *data)
        {
          ::org::apache::lucene::index::CheckIndex$Status$PointsStatus value((jobject) NULL);
          if (!parseArg(arg, "k", ::org::apache::lucene::index::CheckIndex$Status$PointsStatus::initializeClass, &value))
          {
            INT_CALL(self->object._set_pointsStatus(value));
            return 0;
          }
          PyErr_SetArgsError((PyObject *) self, "pointsStatus", arg);
          return -1;
        }

        static PyObject *t_CheckIndex$Status$SegmentInfoStatus_get__sizeMB(t_CheckIndex$Status$SegmentInfoStatus *self, void *data)
        {
          jdouble value;
          OBJ_CALL(value = self->object._get_sizeMB());
          return PyFloat_FromDouble((double) value);
        }
        static int t_CheckIndex$Status$SegmentInfoStatus_set__sizeMB(t_CheckIndex$Status$SegmentInfoStatus *self, PyObject *arg, void *data)
        {
          jdouble value;
          if (!parseArg(arg, "D", &value))
          {
            INT_CALL(self->object._set_sizeMB(value));
            return 0;
          }
          PyErr_SetArgsError((PyObject *) self, "sizeMB", arg);
          return -1;
        }

        static PyObject *t_CheckIndex$Status$SegmentInfoStatus_get__storedFieldStatus(t_CheckIndex$Status$SegmentInfoStatus *self, void *data)
        {
          ::org::apache::lucene::index::CheckIndex$Status$StoredFieldStatus value((jobject) NULL);
          OBJ_CALL(value = self->object._get_storedFieldStatus());
          return ::org::apache::lucene::index::t_CheckIndex$Status$StoredFieldStatus::wrap_Object(value);
        }
        static int t_CheckIndex$Status$SegmentInfoStatus_set__storedFieldStatus(t_CheckIndex$Status$SegmentInfoStatus *self, PyObject *arg, void *data)
        {
          ::org::apache::lucene::index::CheckIndex$Status$StoredFieldStatus value((jobject) NULL);
          if (!parseArg(arg, "k", ::org::apache::lucene::index::CheckIndex$Status$StoredFieldStatus::initializeClass, &value))
          {
            INT_CALL(self->object._set_storedFieldStatus(value));
            return 0;
          }
          PyErr_SetArgsError((PyObject *) self, "storedFieldStatus", arg);
          return -1;
        }

        static PyObject *t_CheckIndex$Status$SegmentInfoStatus_get__termIndexStatus(t_CheckIndex$Status$SegmentInfoStatus *self, void *data)
        {
          ::org::apache::lucene::index::CheckIndex$Status$TermIndexStatus value((jobject) NULL);
          OBJ_CALL(value = self->object._get_termIndexStatus());
          return ::org::apache::lucene::index::t_CheckIndex$Status$TermIndexStatus::wrap_Object(value);
        }
        static int t_CheckIndex$Status$SegmentInfoStatus_set__termIndexStatus(t_CheckIndex$Status$SegmentInfoStatus *self, PyObject *arg, void *data)
        {
          ::org::apache::lucene::index::CheckIndex$Status$TermIndexStatus value((jobject) NULL);
          if (!parseArg(arg, "k", ::org::apache::lucene::index::CheckIndex$Status$TermIndexStatus::initializeClass, &value))
          {
            INT_CALL(self->object._set_termIndexStatus(value));
            return 0;
          }
          PyErr_SetArgsError((PyObject *) self, "termIndexStatus", arg);
          return -1;
        }

        static PyObject *t_CheckIndex$Status$SegmentInfoStatus_get__termVectorStatus(t_CheckIndex$Status$SegmentInfoStatus *self, void *data)
        {
          ::org::apache::lucene::index::CheckIndex$Status$TermVectorStatus value((jobject) NULL);
          OBJ_CALL(value = self->object._get_termVectorStatus());
          return ::org::apache::lucene::index::t_CheckIndex$Status$TermVectorStatus::wrap_Object(value);
        }
        static int t_CheckIndex$Status$SegmentInfoStatus_set__termVectorStatus(t_CheckIndex$Status$SegmentInfoStatus *self, PyObject *arg, void *data)
        {
          ::org::apache::lucene::index::CheckIndex$Status$TermVectorStatus value((jobject) NULL);
          if (!parseArg(arg, "k", ::org::apache::lucene::index::CheckIndex$Status$TermVectorStatus::initializeClass, &value))
          {
            INT_CALL(self->object._set_termVectorStatus(value));
            return 0;
          }
          PyErr_SetArgsError((PyObject *) self, "termVectorStatus", arg);
          return -1;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/index/FilterLeafReader.h"
#include "org/apache/lucene/util/Bits.h"
#include "org/apache/lucene/index/Terms.h"
#include "org/apache/lucene/index/PointValues.h"
#include "org/apache/lucene/index/Fields.h"
#include "org/apache/lucene/index/BinaryDocValues.h"
#include "org/apache/lucene/index/SortedNumericDocValues.h"
#include "org/apache/lucene/index/SortedSetDocValues.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/index/LeafMetaData.h"
#include "org/apache/lucene/index/NumericDocValues.h"
#include "java/lang/String.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/index/SortedDocValues.h"
#include "org/apache/lucene/index/StoredFieldVisitor.h"
#include "org/apache/lucene/index/FieldInfos.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {

        ::java::lang::Class *FilterLeafReader::class$ = NULL;
        jmethodID *FilterLeafReader::mids$ = NULL;
        bool FilterLeafReader::live$ = false;

        jclass FilterLeafReader::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/index/FilterLeafReader");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_947f3bbc1666c05e] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/index/LeafReader;)V");
            mids$[mid_checkIntegrity_f2cc1bce94666404] = env->getMethodID(cls, "checkIntegrity", "()V");
            mids$[mid_document_8f45e7464506ed2f] = env->getMethodID(cls, "document", "(ILorg/apache/lucene/index/StoredFieldVisitor;)V");
            mids$[mid_getBinaryDocValues_6cf59c3533d4df22] = env->getMethodID(cls, "getBinaryDocValues", "(Ljava/lang/String;)Lorg/apache/lucene/index/BinaryDocValues;");
            mids$[mid_getDelegate_8d1e1130d298ee34] = env->getMethodID(cls, "getDelegate", "()Lorg/apache/lucene/index/LeafReader;");
            mids$[mid_getFieldInfos_f76601004b1c139b] = env->getMethodID(cls, "getFieldInfos", "()Lorg/apache/lucene/index/FieldInfos;");
            mids$[mid_getLiveDocs_ad87da2b626b21cf] = env->getMethodID(cls, "getLiveDocs", "()Lorg/apache/lucene/util/Bits;");
            mids$[mid_getMetaData_07168aa94cc70619] = env->getMethodID(cls, "getMetaData", "()Lorg/apache/lucene/index/LeafMetaData;");
            mids$[mid_getNormValues_2b2c87c24a70ef49] = env->getMethodID(cls, "getNormValues", "(Ljava/lang/String;)Lorg/apache/lucene/index/NumericDocValues;");
            mids$[mid_getNumericDocValues_2b2c87c24a70ef49] = env->getMethodID(cls, "getNumericDocValues", "(Ljava/lang/String;)Lorg/apache/lucene/index/NumericDocValues;");
            mids$[mid_getPointValues_72b990dbae0eea09] = env->getMethodID(cls, "getPointValues", "(Ljava/lang/String;)Lorg/apache/lucene/index/PointValues;");
            mids$[mid_getSortedDocValues_adb16e9c5e3d9604] = env->getMethodID(cls, "getSortedDocValues", "(Ljava/lang/String;)Lorg/apache/lucene/index/SortedDocValues;");
            mids$[mid_getSortedNumericDocValues_25e77b19828c4dfa] = env->getMethodID(cls, "getSortedNumericDocValues", "(Ljava/lang/String;)Lorg/apache/lucene/index/SortedNumericDocValues;");
            mids$[mid_getSortedSetDocValues_379820f082b251eb] = env->getMethodID(cls, "getSortedSetDocValues", "(Ljava/lang/String;)Lorg/apache/lucene/index/SortedSetDocValues;");
            mids$[mid_getTermVectors_9997c94b783ad8be] = env->getMethodID(cls, "getTermVectors", "(I)Lorg/apache/lucene/index/Fields;");
            mids$[mid_maxDoc_9972fcc56b44e79d] = env->getMethodID(cls, "maxDoc", "()I");
            mids$[mid_numDocs_9972fcc56b44e79d] = env->getMethodID(cls, "numDocs", "()I");
            mids$[mid_terms_3976802ad88273cd] = env->getMethodID(cls, "terms", "(Ljava/lang/String;)Lorg/apache/lucene/index/Terms;");
            mids$[mid_toString_db9b55ba01e03e4b] = env->getMethodID(cls, "toString", "()Ljava/lang/String;");
            mids$[mid_unwrap_c175952bcee17188] = env->getStaticMethodID(cls, "unwrap", "(Lorg/apache/lucene/index/LeafReader;)Lorg/apache/lucene/index/LeafReader;");
            mids$[mid_doClose_f2cc1bce94666404] = env->getMethodID(cls, "doClose", "()V");

            class$ = new ::java::lang::Class(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        FilterLeafReader::FilterLeafReader(const ::org::apache::lucene::index::LeafReader & a0) : ::org::apache::lucene::index::LeafReader(env->newObject(initializeClass, &mids$, mid_init$_947f3bbc1666c05e, a0.this$)) {}

        void FilterLeafReader::checkIntegrity() const
        {
          env->callVoidMethod(this$, mids$[mid_checkIntegrity_f2cc1bce94666404]);
        }

        void FilterLeafReader::document(jint a0, const ::org::apache::lucene::index::StoredFieldVisitor & a1) const
        {
          env->callVoidMethod(this$, mids$[mid_document_8f45e7464506ed2f], a0, a1.this$);
        }

        ::org::apache::lucene::index::BinaryDocValues FilterLeafReader::getBinaryDocValues(const ::java::lang::String & a0) const
        {
          return ::org::apache::lucene::index::BinaryDocValues(env->callObjectMethod(this$, mids$[mid_getBinaryDocValues_6cf59c3533d4df22], a0.this$));
        }

        ::org::apache::lucene::index::LeafReader FilterLeafReader::getDelegate() const
        {
          return ::org::apache::lucene::index::LeafReader(env->callObjectMethod(this$, mids$[mid_getDelegate_8d1e1130d298ee34]));
        }

        ::org::apache::lucene::index::FieldInfos FilterLeafReader::getFieldInfos() const
        {
          return ::org::apache::lucene::index::FieldInfos(env->callObjectMethod(this$, mids$[mid_getFieldInfos_f76601004b1c139b]));
        }

        ::org::apache::lucene::util::Bits FilterLeafReader::getLiveDocs() const
        {
          return ::org::apache::lucene::util::Bits(env->callObjectMethod(this$, mids$[mid_getLiveDocs_ad87da2b626b21cf]));
        }

        ::org::apache::lucene::index::LeafMetaData FilterLeafReader::getMetaData() const
        {
          return ::org::apache::lucene::index::LeafMetaData(env->callObjectMethod(this$, mids$[mid_getMetaData_07168aa94cc70619]));
        }

        ::org::apache::lucene::index::NumericDocValues FilterLeafReader::getNormValues(const ::java::lang::String & a0) const
        {
          return ::org::apache::lucene::index::NumericDocValues(env->callObjectMethod(this$, mids$[mid_getNormValues_2b2c87c24a70ef49], a0.this$));
        }

        ::org::apache::lucene::index::NumericDocValues FilterLeafReader::getNumericDocValues(const ::java::lang::String & a0) const
        {
          return ::org::apache::lucene::index::NumericDocValues(env->callObjectMethod(this$, mids$[mid_getNumericDocValues_2b2c87c24a70ef49], a0.this$));
        }

        ::org::apache::lucene::index::PointValues FilterLeafReader::getPointValues(const ::java::lang::String & a0) const
        {
          return ::org::apache::lucene::index::PointValues(env->callObjectMethod(this$, mids$[mid_getPointValues_72b990dbae0eea09], a0.this$));
        }

        ::org::apache::lucene::index::SortedDocValues FilterLeafReader::getSortedDocValues(const ::java::lang::String & a0) const
        {
          return ::org::apache::lucene::index::SortedDocValues(env->callObjectMethod(this$, mids$[mid_getSortedDocValues_adb16e9c5e3d9604], a0.this$));
        }

        ::org::apache::lucene::index::SortedNumericDocValues FilterLeafReader::getSortedNumericDocValues(const ::java::lang::String & a0) const
        {
          return ::org::apache::lucene::index::SortedNumericDocValues(env->callObjectMethod(this$, mids$[mid_getSortedNumericDocValues_25e77b19828c4dfa], a0.this$));
        }

        ::org::apache::lucene::index::SortedSetDocValues FilterLeafReader::getSortedSetDocValues(const ::java::lang::String & a0) const
        {
          return ::org::apache::lucene::index::SortedSetDocValues(env->callObjectMethod(this$, mids$[mid_getSortedSetDocValues_379820f082b251eb], a0.this$));
        }

        ::org::apache::lucene::index::Fields FilterLeafReader::getTermVectors(jint a0) const
        {
          return ::org::apache::lucene::index::Fields(env->callObjectMethod(this$, mids$[mid_getTermVectors_9997c94b783ad8be], a0));
        }

        jint FilterLeafReader::maxDoc() const
        {
          return env->callIntMethod(this$, mids$[mid_maxDoc_9972fcc56b44e79d]);
        }

        jint FilterLeafReader::numDocs() const
        {
          return env->callIntMethod(this$, mids$[mid_numDocs_9972fcc56b44e79d]);
        }

        ::org::apache::lucene::index::Terms FilterLeafReader::terms(const ::java::lang::String & a0) const
        {
          return ::org::apache::lucene::index::Terms(env->callObjectMethod(this$, mids$[mid_terms_3976802ad88273cd], a0.this$));
        }

        ::java::lang::String FilterLeafReader::toString() const
        {
          return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_db9b55ba01e03e4b]));
        }

        ::org::apache::lucene::index::LeafReader FilterLeafReader::unwrap(const ::org::apache::lucene::index::LeafReader & a0)
        {
          jclass cls = env->getClass(initializeClass);
          return ::org::apache::lucene::index::LeafReader(env->callStaticObjectMethod(cls, mids$[mid_unwrap_c175952bcee17188], a0.this$));
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"
#include "org/apache/lucene/index/FilterLeafReader$FilterPostingsEnum.h"
#include "org/apache/lucene/index/FilterLeafReader$FilterTermsEnum.h"
#include "org/apache/lucene/index/FilterLeafReader$FilterTerms.h"
#include "org/apache/lucene/index/FilterLeafReader$FilterFields.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {
        static PyObject *t_FilterLeafReader_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_FilterLeafReader_instance_(PyTypeObject *type, PyObject *arg);
        static int t_FilterLeafReader_init_(t_FilterLeafReader *self, PyObject *args, PyObject *kwds);
        static PyObject *t_FilterLeafReader_checkIntegrity(t_FilterLeafReader *self, PyObject *args);
        static PyObject *t_FilterLeafReader_document(t_FilterLeafReader *self, PyObject *args);
        static PyObject *t_FilterLeafReader_getBinaryDocValues(t_FilterLeafReader *self, PyObject *args);
        static PyObject *t_FilterLeafReader_getDelegate(t_FilterLeafReader *self);
        static PyObject *t_FilterLeafReader_getFieldInfos(t_FilterLeafReader *self, PyObject *args);
        static PyObject *t_FilterLeafReader_getLiveDocs(t_FilterLeafReader *self, PyObject *args);
        static PyObject *t_FilterLeafReader_getMetaData(t_FilterLeafReader *self, PyObject *args);
        static PyObject *t_FilterLeafReader_getNormValues(t_FilterLeafReader *self, PyObject *args);
        static PyObject *t_FilterLeafReader_getNumericDocValues(t_FilterLeafReader *self, PyObject *args);
        static PyObject *t_FilterLeafReader_getPointValues(t_FilterLeafReader *self, PyObject *args);
        static PyObject *t_FilterLeafReader_getSortedDocValues(t_FilterLeafReader *self, PyObject *args);
        static PyObject *t_FilterLeafReader_getSortedNumericDocValues(t_FilterLeafReader *self, PyObject *args);
        static PyObject *t_FilterLeafReader_getSortedSetDocValues(t_FilterLeafReader *self, PyObject *args);
        static PyObject *t_FilterLeafReader_getTermVectors(t_FilterLeafReader *self, PyObject *args);
        static PyObject *t_FilterLeafReader_maxDoc(t_FilterLeafReader *self, PyObject *args);
        static PyObject *t_FilterLeafReader_numDocs(t_FilterLeafReader *self, PyObject *args);
        static PyObject *t_FilterLeafReader_terms(t_FilterLeafReader *self, PyObject *args);
        static PyObject *t_FilterLeafReader_toString(t_FilterLeafReader *self, PyObject *args);
        static PyObject *t_FilterLeafReader_unwrap(PyTypeObject *type, PyObject *arg);
        static PyObject *t_FilterLeafReader_get__delegate(t_FilterLeafReader *self, void *data);
        static PyObject *t_FilterLeafReader_get__fieldInfos(t_FilterLeafReader *self, void *data);
        static PyObject *t_FilterLeafReader_get__liveDocs(t_FilterLeafReader *self, void *data);
        static PyObject *t_FilterLeafReader_get__metaData(t_FilterLeafReader *self, void *data);
        static PyGetSetDef t_FilterLeafReader__fields_[] = {
          DECLARE_GET_FIELD(t_FilterLeafReader, delegate),
          DECLARE_GET_FIELD(t_FilterLeafReader, fieldInfos),
          DECLARE_GET_FIELD(t_FilterLeafReader, liveDocs),
          DECLARE_GET_FIELD(t_FilterLeafReader, metaData),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_FilterLeafReader__methods_[] = {
          DECLARE_METHOD(t_FilterLeafReader, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_FilterLeafReader, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_FilterLeafReader, checkIntegrity, METH_VARARGS),
          DECLARE_METHOD(t_FilterLeafReader, document, METH_VARARGS),
          DECLARE_METHOD(t_FilterLeafReader, getBinaryDocValues, METH_VARARGS),
          DECLARE_METHOD(t_FilterLeafReader, getDelegate, METH_NOARGS),
          DECLARE_METHOD(t_FilterLeafReader, getFieldInfos, METH_VARARGS),
          DECLARE_METHOD(t_FilterLeafReader, getLiveDocs, METH_VARARGS),
          DECLARE_METHOD(t_FilterLeafReader, getMetaData, METH_VARARGS),
          DECLARE_METHOD(t_FilterLeafReader, getNormValues, METH_VARARGS),
          DECLARE_METHOD(t_FilterLeafReader, getNumericDocValues, METH_VARARGS),
          DECLARE_METHOD(t_FilterLeafReader, getPointValues, METH_VARARGS),
          DECLARE_METHOD(t_FilterLeafReader, getSortedDocValues, METH_VARARGS),
          DECLARE_METHOD(t_FilterLeafReader, getSortedNumericDocValues, METH_VARARGS),
          DECLARE_METHOD(t_FilterLeafReader, getSortedSetDocValues, METH_VARARGS),
          DECLARE_METHOD(t_FilterLeafReader, getTermVectors, METH_VARARGS),
          DECLARE_METHOD(t_FilterLeafReader, maxDoc, METH_VARARGS),
          DECLARE_METHOD(t_FilterLeafReader, numDocs, METH_VARARGS),
          DECLARE_METHOD(t_FilterLeafReader, terms, METH_VARARGS),
          DECLARE_METHOD(t_FilterLeafReader, toString, METH_VARARGS),
          DECLARE_METHOD(t_FilterLeafReader, unwrap, METH_O | METH_CLASS),
          { NULL, NULL, 0, NULL }
        };

        static PyType_Slot PY_TYPE_SLOTS(FilterLeafReader)[] = {
          { Py_tp_methods, t_FilterLeafReader__methods_ },
          { Py_tp_init, (void *) t_FilterLeafReader_init_ },
          { Py_tp_getset, t_FilterLeafReader__fields_ },
          { 0, NULL }
        };

        static PyType_Def *PY_TYPE_BASES(FilterLeafReader)[] = {
          &PY_TYPE_DEF(::org::apache::lucene::index::LeafReader),
          NULL
        };

        DEFINE_TYPE(FilterLeafReader, t_FilterLeafReader, FilterLeafReader);

        void t_FilterLeafReader::install(PyObject *module)
        {
          installType(&PY_TYPE(FilterLeafReader), &PY_TYPE_DEF(FilterLeafReader), module, "FilterLeafReader", 0);
          PyObject_SetAttrString((PyObject *) PY_TYPE(FilterLeafReader), "FilterPostingsEnum", make_descriptor(&PY_TYPE_DEF(FilterLeafReader$FilterPostingsEnum)));
          PyObject_SetAttrString((PyObject *) PY_TYPE(FilterLeafReader), "FilterTermsEnum", make_descriptor(&PY_TYPE_DEF(FilterLeafReader$FilterTermsEnum)));
          PyObject_SetAttrString((PyObject *) PY_TYPE(FilterLeafReader), "FilterTerms", make_descriptor(&PY_TYPE_DEF(FilterLeafReader$FilterTerms)));
          PyObject_SetAttrString((PyObject *) PY_TYPE(FilterLeafReader), "FilterFields", make_descriptor(&PY_TYPE_DEF(FilterLeafReader$FilterFields)));
        }

        void t_FilterLeafReader::initialize(PyObject *module)
        {
          PyObject_SetAttrString((PyObject *) PY_TYPE(FilterLeafReader), "class_", make_descriptor(FilterLeafReader::initializeClass, 1));
          PyObject_SetAttrString((PyObject *) PY_TYPE(FilterLeafReader), "wrapfn_", make_descriptor(t_FilterLeafReader::wrap_jobject));
          PyObject_SetAttrString((PyObject *) PY_TYPE(FilterLeafReader), "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_FilterLeafReader_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, FilterLeafReader::initializeClass, 1)))
            return NULL;
          return t_FilterLeafReader::wrap_Object(FilterLeafReader(((t_FilterLeafReader *) arg)->object.this$));
        }
        static PyObject *t_FilterLeafReader_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, FilterLeafReader::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_FilterLeafReader_init_(t_FilterLeafReader *self, PyObject *args, PyObject *kwds)
        {
          ::org::apache::lucene::index::LeafReader a0((jobject) NULL);
          FilterLeafReader object((jobject) NULL);

          if (!parseArgs(args, "k", ::org::apache::lucene::index::LeafReader::initializeClass, &a0))
          {
            INT_CALL(object = FilterLeafReader(a0));
            self->object = object;
          }
          else
          {
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }

        static PyObject *t_FilterLeafReader_checkIntegrity(t_FilterLeafReader *self, PyObject *args)
        {

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(self->object.checkIntegrity());
            Py_RETURN_NONE;
          }

          return callSuper(PY_TYPE(FilterLeafReader), (PyObject *) self, "checkIntegrity", args, 2);
        }

        static PyObject *t_FilterLeafReader_document(t_FilterLeafReader *self, PyObject *args)
        {
          jint a0;
          ::org::apache::lucene::index::StoredFieldVisitor a1((jobject) NULL);

          if (!parseArgs(args, "Ik", ::org::apache::lucene::index::StoredFieldVisitor::initializeClass, &a0, &a1))
          {
            OBJ_CALL(self->object.document(a0, a1));
            Py_RETURN_NONE;
          }

          return callSuper(PY_TYPE(FilterLeafReader), (PyObject *) self, "document", args, 2);
        }

        static PyObject *t_FilterLeafReader_getBinaryDocValues(t_FilterLeafReader *self, PyObject *args)
        {
          ::java::lang::String a0((jobject) NULL);
          ::org::apache::lucene::index::BinaryDocValues result((jobject) NULL);

          if (!parseArgs(args, "s", &a0))
          {
            OBJ_CALL(result = self->object.getBinaryDocValues(a0));
            return ::org::apache::lucene::index::t_BinaryDocValues::wrap_Object(result);
          }

          return callSuper(PY_TYPE(FilterLeafReader), (PyObject *) self, "getBinaryDocValues", args, 2);
        }

        static PyObject *t_FilterLeafReader_getDelegate(t_FilterLeafReader *self)
        {
          ::org::apache::lucene::index::LeafReader result((jobject) NULL);
          OBJ_CALL(result = self->object.getDelegate());
          return ::org::apache::lucene::index::t_LeafReader::wrap_Object(result);
        }

        static PyObject *t_FilterLeafReader_getFieldInfos(t_FilterLeafReader *self, PyObject *args)
        {
          ::org::apache::lucene::index::FieldInfos result((jobject) NULL);

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.getFieldInfos());
            return ::org::apache::lucene::index::t_FieldInfos::wrap_Object(result);
          }

          return callSuper(PY_TYPE(FilterLeafReader), (PyObject *) self, "getFieldInfos", args, 2);
        }

        static PyObject *t_FilterLeafReader_getLiveDocs(t_FilterLeafReader *self, PyObject *args)
        {
          ::org::apache::lucene::util::Bits result((jobject) NULL);

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.getLiveDocs());
            return ::org::apache::lucene::util::t_Bits::wrap_Object(result);
          }

          return callSuper(PY_TYPE(FilterLeafReader), (PyObject *) self, "getLiveDocs", args, 2);
        }

        static PyObject *t_FilterLeafReader_getMetaData(t_FilterLeafReader *self, PyObject *args)
        {
          ::org::apache::lucene::index::LeafMetaData result((jobject) NULL);

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.getMetaData());
            return ::org::apache::lucene::index::t_LeafMetaData::wrap_Object(result);
          }

          return callSuper(PY_TYPE(FilterLeafReader), (PyObject *) self, "getMetaData", args, 2);
        }

        static PyObject *t_FilterLeafReader_getNormValues(t_FilterLeafReader *self, PyObject *args)
        {
          ::java::lang::String a0((jobject) NULL);
          ::org::apache::lucene::index::NumericDocValues result((jobject) NULL);

          if (!parseArgs(args, "s", &a0))
          {
            OBJ_CALL(result = self->object.getNormValues(a0));
            return ::org::apache::lucene::index::t_NumericDocValues::wrap_Object(result);
          }

          return callSuper(PY_TYPE(FilterLeafReader), (PyObject *) self, "getNormValues", args, 2);
        }

        static PyObject *t_FilterLeafReader_getNumericDocValues(t_FilterLeafReader *self, PyObject *args)
        {
          ::java::lang::String a0((jobject) NULL);
          ::org::apache::lucene::index::NumericDocValues result((jobject) NULL);

          if (!parseArgs(args, "s", &a0))
          {
            OBJ_CALL(result = self->object.getNumericDocValues(a0));
            return ::org::apache::lucene::index::t_NumericDocValues::wrap_Object(result);
          }

          return callSuper(PY_TYPE(FilterLeafReader), (PyObject *) self, "getNumericDocValues", args, 2);
        }

        static PyObject *t_FilterLeafReader_getPointValues(t_FilterLeafReader *self, PyObject *args)
        {
          ::java::lang::String a0((jobject) NULL);
          ::org::apache::lucene::index::PointValues result((jobject) NULL);

          if (!parseArgs(args, "s", &a0))
          {
            OBJ_CALL(result = self->object.getPointValues(a0));
            return ::org::apache::lucene::index::t_PointValues::wrap_Object(result);
          }

          return callSuper(PY_TYPE(FilterLeafReader), (PyObject *) self, "getPointValues", args, 2);
        }

        static PyObject *t_FilterLeafReader_getSortedDocValues(t_FilterLeafReader *self, PyObject *args)
        {
          ::java::lang::String a0((jobject) NULL);
          ::org::apache::lucene::index::SortedDocValues result((jobject) NULL);

          if (!parseArgs(args, "s", &a0))
          {
            OBJ_CALL(result = self->object.getSortedDocValues(a0));
            return ::org::apache::lucene::index::t_SortedDocValues::wrap_Object(result);
          }

          return callSuper(PY_TYPE(FilterLeafReader), (PyObject *) self, "getSortedDocValues", args, 2);
        }

        static PyObject *t_FilterLeafReader_getSortedNumericDocValues(t_FilterLeafReader *self, PyObject *args)
        {
          ::java::lang::String a0((jobject) NULL);
          ::org::apache::lucene::index::SortedNumericDocValues result((jobject) NULL);

          if (!parseArgs(args, "s", &a0))
          {
            OBJ_CALL(result = self->object.getSortedNumericDocValues(a0));
            return ::org::apache::lucene::index::t_SortedNumericDocValues::wrap_Object(result);
          }

          return callSuper(PY_TYPE(FilterLeafReader), (PyObject *) self, "getSortedNumericDocValues", args, 2);
        }

        static PyObject *t_FilterLeafReader_getSortedSetDocValues(t_FilterLeafReader *self, PyObject *args)
        {
          ::java::lang::String a0((jobject) NULL);
          ::org::apache::lucene::index::SortedSetDocValues result((jobject) NULL);

          if (!parseArgs(args, "s", &a0))
          {
            OBJ_CALL(result = self->object.getSortedSetDocValues(a0));
            return ::org::apache::lucene::index::t_SortedSetDocValues::wrap_Object(result);
          }

          return callSuper(PY_TYPE(FilterLeafReader), (PyObject *) self, "getSortedSetDocValues", args, 2);
        }

        static PyObject *t_FilterLeafReader_getTermVectors(t_FilterLeafReader *self, PyObject *args)
        {
          jint a0;
          ::org::apache::lucene::index::Fields result((jobject) NULL);

          if (!parseArgs(args, "I", &a0))
          {
            OBJ_CALL(result = self->object.getTermVectors(a0));
            return ::org::apache::lucene::index::t_Fields::wrap_Object(result);
          }

          return callSuper(PY_TYPE(FilterLeafReader), (PyObject *) self, "getTermVectors", args, 2);
        }

        static PyObject *t_FilterLeafReader_maxDoc(t_FilterLeafReader *self, PyObject *args)
        {
          jint result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.maxDoc());
            return PyLong_FromLong((long) result);
          }

          return callSuper(PY_TYPE(FilterLeafReader), (PyObject *) self, "maxDoc", args, 2);
        }

        static PyObject *t_FilterLeafReader_numDocs(t_FilterLeafReader *self, PyObject *args)
        {
          jint result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.numDocs());
            return PyLong_FromLong((long) result);
          }

          return callSuper(PY_TYPE(FilterLeafReader), (PyObject *) self, "numDocs", args, 2);
        }

        static PyObject *t_FilterLeafReader_terms(t_FilterLeafReader *self, PyObject *args)
        {
          ::java::lang::String a0((jobject) NULL);
          ::org::apache::lucene::index::Terms result((jobject) NULL);

          if (!parseArgs(args, "s", &a0))
          {
            OBJ_CALL(result = self->object.terms(a0));
            return ::org::apache::lucene::index::t_Terms::wrap_Object(result);
          }

          return callSuper(PY_TYPE(FilterLeafReader), (PyObject *) self, "terms", args, 2);
        }

        static PyObject *t_FilterLeafReader_toString(t_FilterLeafReader *self, PyObject *args)
        {
          ::java::lang::String result((jobject) NULL);

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.toString());
            return j2p(result);
          }

          return callSuper(PY_TYPE(FilterLeafReader), (PyObject *) self, "toString", args, 2);
        }

        static PyObject *t_FilterLeafReader_unwrap(PyTypeObject *type, PyObject *arg)
        {
          ::org::apache::lucene::index::LeafReader a0((jobject) NULL);
          ::org::apache::lucene::index::LeafReader result((jobject) NULL);

          if (!parseArg(arg, "k", ::org::apache::lucene::index::LeafReader::initializeClass, &a0))
          {
            OBJ_CALL(result = ::org::apache::lucene::index::FilterLeafReader::unwrap(a0));
            return ::org::apache::lucene::index::t_LeafReader::wrap_Object(result);
          }

          PyErr_SetArgsError(type, "unwrap", arg);
          return NULL;
        }

        static PyObject *t_FilterLeafReader_get__delegate(t_FilterLeafReader *self, void *data)
        {
          ::org::apache::lucene::index::LeafReader value((jobject) NULL);
          OBJ_CALL(value = self->object.getDelegate());
          return ::org::apache::lucene::index::t_LeafReader::wrap_Object(value);
        }

        static PyObject *t_FilterLeafReader_get__fieldInfos(t_FilterLeafReader *self, void *data)
        {
          ::org::apache::lucene::index::FieldInfos value((jobject) NULL);
          OBJ_CALL(value = self->object.getFieldInfos());
          return ::org::apache::lucene::index::t_FieldInfos::wrap_Object(value);
        }

        static PyObject *t_FilterLeafReader_get__liveDocs(t_FilterLeafReader *self, void *data)
        {
          ::org::apache::lucene::util::Bits value((jobject) NULL);
          OBJ_CALL(value = self->object.getLiveDocs());
          return ::org::apache::lucene::util::t_Bits::wrap_Object(value);
        }

        static PyObject *t_FilterLeafReader_get__metaData(t_FilterLeafReader *self, void *data)
        {
          ::org::apache::lucene::index::LeafMetaData value((jobject) NULL);
          OBJ_CALL(value = self->object.getMetaData());
          return ::org::apache::lucene::index::t_LeafMetaData::wrap_Object(value);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/index/ReaderSlice.h"
#include "java/lang/String.h"
#include "org/apache/lucene/index/ReaderSlice.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {

        ::java::lang::Class *ReaderSlice::class$ = NULL;
        jmethodID *ReaderSlice::mids$ = NULL;
        jfieldID *ReaderSlice::fids$ = NULL;
        bool ReaderSlice::live$ = false;
        JArray< ReaderSlice > *ReaderSlice::EMPTY_ARRAY = NULL;

        jclass ReaderSlice::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/index/ReaderSlice");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_db3e97653d3683f3] = env->getMethodID(cls, "<init>", "(III)V");
            mids$[mid_toString_db9b55ba01e03e4b] = env->getMethodID(cls, "toString", "()Ljava/lang/String;");

            fids$ = new jfieldID[max_fid];
            fids$[fid_length] = env->getFieldID(cls, "length", "I");
            fids$[fid_readerIndex] = env->getFieldID(cls, "readerIndex", "I");
            fids$[fid_start] = env->getFieldID(cls, "start", "I");

            class$ = new ::java::lang::Class(cls);
            cls = (jclass) class$->this$;

            EMPTY_ARRAY = new JArray< ReaderSlice >(env->getStaticObjectField(cls, "EMPTY_ARRAY", "[Lorg/apache/lucene/index/ReaderSlice;"));
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        ReaderSlice::ReaderSlice(jint a0, jint a1, jint a2) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_db3e97653d3683f3, a0, a1, a2)) {}

        ::java::lang::String ReaderSlice::toString() const
        {
          return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_db9b55ba01e03e4b]));
        }

        jint ReaderSlice::_get_length() const
        {
          return env->getIntField(this$, fids$[fid_length]);
        }

        jint ReaderSlice::_get_readerIndex() const
        {
          return env->getIntField(this$, fids$[fid_readerIndex]);
        }

        jint ReaderSlice::_get_start() const
        {
          return env->getIntField(this$, fids$[fid_start]);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {
        static PyObject *t_ReaderSlice_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_ReaderSlice_instance_(PyTypeObject *type, PyObject *arg);
        static int t_ReaderSlice_init_(t_ReaderSlice *self, PyObject *args, PyObject *kwds);
        static PyObject *t_ReaderSlice_toString(t_ReaderSlice *self, PyObject *args);
        static PyObject *t_ReaderSlice_get__length(t_ReaderSlice *self, void *data);
        static PyObject *t_ReaderSlice_get__readerIndex(t_ReaderSlice *self, void *data);
        static PyObject *t_ReaderSlice_get__start(t_ReaderSlice *self, void *data);

        static PyGetSetDef t_ReaderSlice__fields_[] = {
          DECLARE_GET_FIELD(t_ReaderSlice, length),
          DECLARE_GET_FIELD(t_ReaderSlice, readerIndex),
          DECLARE_GET_FIELD(t_ReaderSlice, start),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_ReaderSlice__methods_[] = {
          DECLARE_METHOD(t_ReaderSlice, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_ReaderSlice, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_ReaderSlice, toString, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        static PyType_Slot PY_TYPE_SLOTS(ReaderSlice)[] = {
          { Py_tp_methods, t_ReaderSlice__methods_ },
          { Py_tp_init, (void *) t_ReaderSlice_init_ },
          { Py_tp_getset, t_ReaderSlice__fields_ },
          { 0, NULL }
        };

        static PyType_Def *PY_TYPE_BASES(ReaderSlice)[] = {
          &PY_TYPE_DEF(::java::lang::Object),
          NULL
        };

        DEFINE_TYPE(ReaderSlice, t_ReaderSlice, ReaderSlice);

        void t_ReaderSlice::install(PyObject *module)
        {
          installType(&PY_TYPE(ReaderSlice), &PY_TYPE_DEF(ReaderSlice), module, "ReaderSlice", 0);
        }

        void t_ReaderSlice::initialize(PyObject *module)
        {
          PyObject_SetAttrString((PyObject *) PY_TYPE(ReaderSlice), "class_", make_descriptor(ReaderSlice::initializeClass, 1));
          PyObject_SetAttrString((PyObject *) PY_TYPE(ReaderSlice), "wrapfn_", make_descriptor(t_ReaderSlice::wrap_jobject));
          PyObject_SetAttrString((PyObject *) PY_TYPE(ReaderSlice), "boxfn_", make_descriptor(boxObject));
          env->getClass(ReaderSlice::initializeClass);
          PyObject_SetAttrString((PyObject *) PY_TYPE(ReaderSlice), "EMPTY_ARRAY", make_descriptor(JArray<jobject>(ReaderSlice::EMPTY_ARRAY->this$).wrap(t_ReaderSlice::wrap_jobject)));
        }

        static PyObject *t_ReaderSlice_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, ReaderSlice::initializeClass, 1)))
            return NULL;
          return t_ReaderSlice::wrap_Object(ReaderSlice(((t_ReaderSlice *) arg)->object.this$));
        }
        static PyObject *t_ReaderSlice_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, ReaderSlice::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_ReaderSlice_init_(t_ReaderSlice *self, PyObject *args, PyObject *kwds)
        {
          jint a0;
          jint a1;
          jint a2;
          ReaderSlice object((jobject) NULL);

          if (!parseArgs(args, "III", &a0, &a1, &a2))
          {
            INT_CALL(object = ReaderSlice(a0, a1, a2));
            self->object = object;
          }
          else
          {
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }

        static PyObject *t_ReaderSlice_toString(t_ReaderSlice *self, PyObject *args)
        {
          ::java::lang::String result((jobject) NULL);

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.toString());
            return j2p(result);
          }

          return callSuper(PY_TYPE(ReaderSlice), (PyObject *) self, "toString", args, 2);
        }

        static PyObject *t_ReaderSlice_get__length(t_ReaderSlice *self, void *data)
        {
          jint value;
          OBJ_CALL(value = self->object._get_length());
          return PyLong_FromLong((long) value);
        }

        static PyObject *t_ReaderSlice_get__readerIndex(t_ReaderSlice *self, void *data)
        {
          jint value;
          OBJ_CALL(value = self->object._get_readerIndex());
          return PyLong_FromLong((long) value);
        }

        static PyObject *t_ReaderSlice_get__start(t_ReaderSlice *self, void *data)
        {
          jint value;
          OBJ_CALL(value = self->object._get_start());
          return PyLong_FromLong((long) value);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/tokenattributes/TypeAttribute.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace tokenattributes {

          ::java::lang::Class *TypeAttribute::class$ = NULL;
          jmethodID *TypeAttribute::mids$ = NULL;
          bool TypeAttribute::live$ = false;
          ::java::lang::String *TypeAttribute::DEFAULT_TYPE = NULL;

          jclass TypeAttribute::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/tokenattributes/TypeAttribute");

              mids$ = new jmethodID[max_mid];
              mids$[mid_setType_9fd2eb66a64e6f0f] = env->getMethodID(cls, "setType", "(Ljava/lang/String;)V");
              mids$[mid_type_db9b55ba01e03e4b] = env->getMethodID(cls, "type", "()Ljava/lang/String;");

              class$ = new ::java::lang::Class(cls);
              cls = (jclass) class$->this$;

              DEFAULT_TYPE = new ::java::lang::String(env->getStaticObjectField(cls, "DEFAULT_TYPE", "Ljava/lang/String;"));
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          void TypeAttribute::setType(const ::java::lang::String & a0) const
          {
            env->callVoidMethod(this$, mids$[mid_setType_9fd2eb66a64e6f0f], a0.this$);
          }

          ::java::lang::String TypeAttribute::type() const
          {
            return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_type_db9b55ba01e03e4b]));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace tokenattributes {
          static PyObject *t_TypeAttribute_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_TypeAttribute_instance_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_TypeAttribute_setType(t_TypeAttribute *self, PyObject *arg);
          static PyObject *t_TypeAttribute_type(t_TypeAttribute *self);

          static PyMethodDef t_TypeAttribute__methods_[] = {
            DECLARE_METHOD(t_TypeAttribute, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_TypeAttribute, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_TypeAttribute, setType, METH_O),
            DECLARE_METHOD(t_TypeAttribute, type, METH_NOARGS),
            { NULL, NULL, 0, NULL }
          };

          static PyType_Slot PY_TYPE_SLOTS(TypeAttribute)[] = {
            { Py_tp_methods, t_TypeAttribute__methods_ },
            { Py_tp_init, (void *) abstract_init },
            { 0, NULL }
          };

          static PyType_Def *PY_TYPE_BASES(TypeAttribute)[] = {
            &PY_TYPE_DEF(::org::apache::lucene::util::Attribute),
            NULL
          };

          DEFINE_TYPE(TypeAttribute, t_TypeAttribute, TypeAttribute);

          void t_TypeAttribute::install(PyObject *module)
          {
            installType(&PY_TYPE(TypeAttribute), &PY_TYPE_DEF(TypeAttribute), module, "TypeAttribute", 0);
          }

          void t_TypeAttribute::initialize(PyObject *module)
          {
            PyObject_SetAttrString((PyObject *) PY_TYPE(TypeAttribute), "class_", make_descriptor(TypeAttribute::initializeClass, 1));
            PyObject_SetAttrString((PyObject *) PY_TYPE(TypeAttribute), "wrapfn_", make_descriptor(t_TypeAttribute::wrap_jobject));
            PyObject_SetAttrString((PyObject *) PY_TYPE(TypeAttribute), "boxfn_", make_descriptor(boxObject));
            env->getClass(TypeAttribute::initializeClass);
            PyObject_SetAttrString((PyObject *) PY_TYPE(TypeAttribute), "DEFAULT_TYPE", make_descriptor(j2p(*TypeAttribute::DEFAULT_TYPE)));
          }

          static PyObject *t_TypeAttribute_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, TypeAttribute::initializeClass, 1)))
              return NULL;
            return t_TypeAttribute::wrap_Object(TypeAttribute(((t_TypeAttribute *) arg)->object.this$));
          }
          static PyObject *t_TypeAttribute_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, TypeAttribute::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static PyObject *t_TypeAttribute_setType(t_TypeAttribute *self, PyObject *arg)
          {
            ::java::lang::String a0((jobject) NULL);

            if (!parseArg(arg, "s", &a0))
            {
              OBJ_CALL(self->object.setType(a0));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError((PyObject *) self, "setType", arg);
            return NULL;
          }

          static PyObject *t_TypeAttribute_type(t_TypeAttribute *self)
          {
            ::java::lang::String result((jobject) NULL);
            OBJ_CALL(result = self->object.type());
            return j2p(result);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/util/SentinelIntSet.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {

        ::java::lang::Class *SentinelIntSet::class$ = NULL;
        jmethodID *SentinelIntSet::mids$ = NULL;
        jfieldID *SentinelIntSet::fids$ = NULL;
        bool SentinelIntSet::live$ = false;

        jclass SentinelIntSet::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/util/SentinelIntSet");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_438c62480c481c65] = env->getMethodID(cls, "<init>", "(II)V");
            mids$[mid_clear_f2cc1bce94666404] = env->getMethodID(cls, "clear", "()V");
            mids$[mid_exists_a1d30e1ee40c89a2] = env->getMethodID(cls, "exists", "(I)Z");
            mids$[mid_find_1e143afe1894d213] = env->getMethodID(cls, "find", "(I)I");
            mids$[mid_getSlot_1e143afe1894d213] = env->getMethodID(cls, "getSlot", "(I)I");
            mids$[mid_hash_1e143afe1894d213] = env->getMethodID(cls, "hash", "(I)I");
            mids$[mid_put_1e143afe1894d213] = env->getMethodID(cls, "put", "(I)I");
            mids$[mid_ramBytesUsed_2e5ae9edcb9b072f] = env->getMethodID(cls, "ramBytesUsed", "()J");
            mids$[mid_rehash_f2cc1bce94666404] = env->getMethodID(cls, "rehash", "()V");
            mids$[mid_size_9972fcc56b44e79d] = env->getMethodID(cls, "size", "()I");

            fids$ = new jfieldID[max_fid];
            fids$[fid_count] = env->getFieldID(cls, "count", "I");
            fids$[fid_emptyVal] = env->getFieldID(cls, "emptyVal", "I");
            fids$[fid_keys] = env->getFieldID(cls, "keys", "[I");
            fids$[fid_rehashCount] = env->getFieldID(cls, "rehashCount", "I");

            class$ = new ::java::lang::Class(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        SentinelIntSet::SentinelIntSet(jint a0, jint a1) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_438c62480c481c65, a0, a1)) {}

        void SentinelIntSet::clear() const
        {
          env->callVoidMethod(this$, mids$[mid_clear_f2cc1bce94666404]);
        }

        jboolean SentinelIntSet::exists(jint a0) const
        {
          return env->callBooleanMethod(this$, mids$[mid_exists_a1d30e1ee40c89a2], a0);
        }

        jint SentinelIntSet::find(jint a0) const
        {
          return env->callIntMethod(this$, mids$[mid_find_1e143afe1894d213], a0);
        }

        jint SentinelIntSet::getSlot(jint a0) const
        {
          return env->callIntMethod(this$, mids$[mid_getSlot_1e143afe1894d213], a0);
        }

        jint SentinelIntSet::hash(jint a0) const
        {
          return env->callIntMethod(this$, mids$[mid_hash_1e143afe1894d213], a0);
        }

        jint SentinelIntSet::put(jint a0) const
        {
          return env->callIntMethod(this$, mids$[mid_put_1e143afe1894d213], a0);
        }

        jlong SentinelIntSet::ramBytesUsed() const
        {
          return env->callLongMethod(this$, mids$[mid_ramBytesUsed_2e5ae9edcb9b072f]);
        }

        void SentinelIntSet::rehash() const
        {
          env->callVoidMethod(this$, mids$[mid_rehash_f2cc1bce94666404]);
        }

        jint SentinelIntSet::size() const
        {
          return env->callIntMethod(this$, mids$[mid_size_9972fcc56b44e79d]);
        }

        jint SentinelIntSet::_get_count() const
        {
          return env->getIntField(this$, fids$[fid_count]);
        }

        void SentinelIntSet::_set_count(jint a0) const
        {
          env->setIntField(this$, fids$[fid_count], a0);
        }

        jint SentinelIntSet::_get_emptyVal() const
        {
          return env->getIntField(this$, fids$[fid_emptyVal]);
        }

        JArray< jint > SentinelIntSet::_get_keys() const
        {
          return JArray< jint >(env->getObjectField(this$, fids$[fid_keys]));
        }

        void SentinelIntSet::_set_keys(const JArray< jint > & a0) const
        {
          env->setObjectField(this$, fids$[fid_keys], a0.this$);
        }

        jint SentinelIntSet::_get_rehashCount() const
        {
          return env->getIntField(this$, fids$[fid_rehashCount]);
        }

        void SentinelIntSet::_set_rehashCount(jint a0) const
        {
          env->setIntField(this$, fids$[fid_rehashCount], a0);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        static PyObject *t_SentinelIntSet_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_SentinelIntSet_instance_(PyTypeObject *type, PyObject *arg);
        static int t_SentinelIntSet_init_(t_SentinelIntSet *self, PyObject *args, PyObject *kwds);
        static PyObject *t_SentinelIntSet_clear(t_SentinelIntSet *self);
        static PyObject *t_SentinelIntSet_exists(t_SentinelIntSet *self, PyObject *arg);
        static PyObject *t_SentinelIntSet_find(t_SentinelIntSet *self, PyObject *arg);
        static PyObject *t_SentinelIntSet_getSlot(t_SentinelIntSet *self, PyObject *arg);
        static PyObject *t_SentinelIntSet_hash(t_SentinelIntSet *self, PyObject *arg);
        static PyObject *t_SentinelIntSet_put(t_SentinelIntSet *self, PyObject *arg);
        static PyObject *t_SentinelIntSet_ramBytesUsed(t_SentinelIntSet *self);
        static PyObject *t_SentinelIntSet_rehash(t_SentinelIntSet *self);
        static PyObject *t_SentinelIntSet_size(t_SentinelIntSet *self);
        static PyObject *t_SentinelIntSet_get__count(t_SentinelIntSet *self, void *data);
        static int t_SentinelIntSet_set__count(t_SentinelIntSet *self, PyObject *arg, void *data);
        static PyObject *t_SentinelIntSet_get__emptyVal(t_SentinelIntSet *self, void *data);
        static PyObject *t_SentinelIntSet_get__keys(t_SentinelIntSet *self, void *data);
        static int t_SentinelIntSet_set__keys(t_SentinelIntSet *self, PyObject *arg, void *data);
        static PyObject *t_SentinelIntSet_get__rehashCount(t_SentinelIntSet *self, void *data);
        static int t_SentinelIntSet_set__rehashCount(t_SentinelIntSet *self, PyObject *arg, void *data);

        static PyGetSetDef t_SentinelIntSet__fields_[] = {
          DECLARE_GETSET_FIELD(t_SentinelIntSet, count),
          DECLARE_GET_FIELD(t_SentinelIntSet, emptyVal),
          DECLARE_GETSET_FIELD(t_SentinelIntSet, keys),
          DECLARE_GETSET_FIELD(t_SentinelIntSet, rehashCount),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_SentinelIntSet__methods_[] = {
          DECLARE_METHOD(t_SentinelIntSet, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_SentinelIntSet, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_SentinelIntSet, clear, METH_NOARGS),
          DECLARE_METHOD(t_SentinelIntSet, exists, METH_O),
          DECLARE_METHOD(t_SentinelIntSet, find, METH_O),
          DECLARE_METHOD(t_SentinelIntSet, getSlot, METH_O),
          DECLARE_METHOD(t_SentinelIntSet, hash, METH_O),
          DECLARE_METHOD(t_SentinelIntSet, put, METH_O),
          DECLARE_METHOD(t_SentinelIntSet, ramBytesUsed, METH_NOARGS),
          DECLARE_METHOD(t_SentinelIntSet, rehash, METH_NOARGS),
          DECLARE_METHOD(t_SentinelIntSet, size, METH_NOARGS),
          { NULL, NULL, 0, NULL }
        };

        static PyType_Slot PY_TYPE_SLOTS(SentinelIntSet)[] = {
          { Py_tp_methods, t_SentinelIntSet__methods_ },
          { Py_tp_init, (void *) t_SentinelIntSet_init_ },
          { Py_tp_getset, t_SentinelIntSet__fields_ },
          { 0, NULL }
        };

        static PyType_Def *PY_TYPE_BASES(SentinelIntSet)[] = {
          &PY_TYPE_DEF(::java::lang::Object),
          NULL
        };

        DEFINE_TYPE(SentinelIntSet, t_SentinelIntSet, SentinelIntSet);

        void t_SentinelIntSet::install(PyObject *module)
        {
          installType(&PY_TYPE(SentinelIntSet), &PY_TYPE_DEF(SentinelIntSet), module, "SentinelIntSet", 0);
        }

        void t_SentinelIntSet::initialize(PyObject *module)
        {
          PyObject_SetAttrString((PyObject *) PY_TYPE(SentinelIntSet), "class_", make_descriptor(SentinelIntSet::initializeClass, 1));
          PyObject_SetAttrString((PyObject *) PY_TYPE(SentinelIntSet), "wrapfn_", make_descriptor(t_SentinelIntSet::wrap_jobject));
          PyObject_SetAttrString((PyObject *) PY_TYPE(SentinelIntSet), "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_SentinelIntSet_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, SentinelIntSet::initializeClass, 1)))
            return NULL;
          return t_SentinelIntSet::wrap_Object(SentinelIntSet(((t_SentinelIntSet *) arg)->object.this$));
        }
        static PyObject *t_SentinelIntSet_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, SentinelIntSet::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_SentinelIntSet_init_(t_SentinelIntSet *self, PyObject *args, PyObject *kwds)
        {
          jint a0;
          jint a1;
          SentinelIntSet object((jobject) NULL);

          if (!parseArgs(args, "II", &a0, &a1))
          {
            INT_CALL(object = SentinelIntSet(a0, a1));
            self->object = object;
          }
          else
          {
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }

        static PyObject *t_SentinelIntSet_clear(t_SentinelIntSet *self)
        {
          OBJ_CALL(self->object.clear());
          Py_RETURN_NONE;
        }

        static PyObject *t_SentinelIntSet_exists(t_SentinelIntSet *self, PyObject *arg)
        {
          jint a0;
          jboolean result;

          if (!parseArg(arg, "I", &a0))
          {
            OBJ_CALL(result = self->object.exists(a0));
            Py_RETURN_BOOL(result);
          }

          PyErr_SetArgsError((PyObject *) self, "exists", arg);
          return NULL;
        }

        static PyObject *t_SentinelIntSet_find(t_SentinelIntSet *self, PyObject *arg)
        {
          jint a0;
          jint result;

          if (!parseArg(arg, "I", &a0))
          {
            OBJ_CALL(result = self->object.find(a0));
            return PyLong_FromLong((long) result);
          }

          PyErr_SetArgsError((PyObject *) self, "find", arg);
          return NULL;
        }

        static PyObject *t_SentinelIntSet_getSlot(t_SentinelIntSet *self, PyObject *arg)
        {
          jint a0;
          jint result;

          if (!parseArg(arg, "I", &a0))
          {
            OBJ_CALL(result = self->object.getSlot(a0));
            return PyLong_FromLong((long) result);
          }

          PyErr_SetArgsError((PyObject *) self, "getSlot", arg);
          return NULL;
        }

        static PyObject *t_SentinelIntSet_hash(t_SentinelIntSet *self, PyObject *arg)
        {
          jint a0;
          jint result;

          if (!parseArg(arg, "I", &a0))
          {
            OBJ_CALL(result = self->object.hash(a0));
            return PyLong_FromLong((long) result);
          }

          PyErr_SetArgsError((PyObject *) self, "hash", arg);
          return NULL;
        }

        static PyObject *t_SentinelIntSet_put(t_SentinelIntSet *self, PyObject *arg)
        {
          jint a0;
          jint result;

          if (!parseArg(arg, "I", &a0))
          {
            OBJ_CALL(result = self->object.put(a0));
            return PyLong_FromLong((long) result);
          }

          PyErr_SetArgsError((PyObject *) self, "put", arg);
          return NULL;
        }

        static PyObject *t_SentinelIntSet_ramBytesUsed(t_SentinelIntSet *self)
        {
          jlong result;
          OBJ_CALL(result = self->object.ramBytesUsed());
          return PyLong_FromLongLong((PY_LONG_LONG) result);
        }

        static PyObject *t_SentinelIntSet_rehash(t_SentinelIntSet *self)
        {
          OBJ_CALL(self->object.rehash());
          Py_RETURN_NONE;
        }

        static PyObject *t_SentinelIntSet_size(t_SentinelIntSet *self)
        {
          jint result;
          OBJ_CALL(result = self->object.size());
          return PyLong_FromLong((long) result);
        }

        static PyObject *t_SentinelIntSet_get__count(t_SentinelIntSet *self, void *data)
        {
          jint value;
          OBJ_CALL(value = self->object._get_count());
          return PyLong_FromLong((long) value);
        }
        static int t_SentinelIntSet_set__count(t_SentinelIntSet *self, PyObject *arg, void *data)
        {
          jint value;
          if (!parseArg(arg, "I", &value))
          {
            INT_CALL(self->object._set_count(value));
            return 0;
          }
          PyErr_SetArgsError((PyObject *) self, "count", arg);
          return -1;
        }

        static PyObject *t_SentinelIntSet_get__emptyVal(t_SentinelIntSet *self, void *data)
        {
          jint value;
          OBJ_CALL(value = self->object._get_emptyVal());
          return PyLong_FromLong((long) value);
        }

        static PyObject *t_SentinelIntSet_get__keys(t_SentinelIntSet *self, void *data)
        {
          JArray< jint > value((jobject) NULL);
          OBJ_CALL(value = self->object._get_keys());
          return value.wrap();
        }
        static int t_SentinelIntSet_set__keys(t_SentinelIntSet *self, PyObject *arg, void *data)
        {
          JArray< jint > value((jobject) NULL);
          if (!parseArg(arg, "[I", &value))
          {
            INT_CALL(self->object._set_keys(value));
            return 0;
          }
          PyErr_SetArgsError((PyObject *) self, "keys", arg);
          return -1;
        }

        static PyObject *t_SentinelIntSet_get__rehashCount(t_SentinelIntSet *self, void *data)
        {
          jint value;
          OBJ_CALL(value = self->object._get_rehashCount());
          return PyLong_FromLong((long) value);
        }
        static int t_SentinelIntSet_set__rehashCount(t_SentinelIntSet *self, PyObject *arg, void *data)
        {
          jint value;
          if (!parseArg(arg, "I", &value))
          {
            INT_CALL(self->object._set_rehashCount(value));
            return 0;
          }
          PyErr_SetArgsError((PyObject *) self, "rehashCount", arg);
          return -1;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/TopScoreDocCollector.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/search/CollectorManager.h"
#include "org/apache/lucene/search/TopDocs.h"
#include "org/apache/lucene/search/FieldDoc.h"
#include "org/apache/lucene/search/ScoreDoc.h"
#include "org/apache/lucene/search/TopScoreDocCollector.h"
#include "org/apache/lucene/search/ScoreMode.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {

        ::java::lang::Class *TopScoreDocCollector::class$ = NULL;
        jmethodID *TopScoreDocCollector::mids$ = NULL;
        bool TopScoreDocCollector::live$ = false;

        jclass TopScoreDocCollector::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/search/TopScoreDocCollector");

            mids$ = new jmethodID[max_mid];
            mids$[mid_create_dce72f63411e9649] = env->getStaticMethodID(cls, "create", "(II)Lorg/apache/lucene/search/TopScoreDocCollector;");
            mids$[mid_create_508ead10943a9c2e] = env->getStaticMethodID(cls, "create", "(ILorg/apache/lucene/search/ScoreDoc;I)Lorg/apache/lucene/search/TopScoreDocCollector;");
            mids$[mid_createSharedManager_d2f30a27f63fe9bb] = env->getStaticMethodID(cls, "createSharedManager", "(ILorg/apache/lucene/search/FieldDoc;I)Lorg/apache/lucene/search/CollectorManager;");
            mids$[mid_scoreMode_8a35254b82ee8276] = env->getMethodID(cls, "scoreMode", "()Lorg/apache/lucene/search/ScoreMode;");
            mids$[mid_updateGlobalMinCompetitiveScore_57a565cc0113e133] = env->getMethodID(cls, "updateGlobalMinCompetitiveScore", "(Lorg/apache/lucene/search/Scorable;)V");
            mids$[mid_updateMinCompetitiveScore_57a565cc0113e133] = env->getMethodID(cls, "updateMinCompetitiveScore", "(Lorg/apache/lucene/search/Scorable;)V");
            mids$[mid_newTopDocs_89238c61a7db05c2] = env->getMethodID(cls, "newTopDocs", "([Lorg/apache/lucene/search/ScoreDoc;I)Lorg/apache/lucene/search/TopDocs;");

            class$ = new ::java::lang::Class(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        TopScoreDocCollector TopScoreDocCollector::create(jint a0, jint a1)
        {
          jclass cls = env->getClass(initializeClass);
          return TopScoreDocCollector(env->callStaticObjectMethod(cls, mids$[mid_create_dce72f63411e9649], a0, a1));
        }

        TopScoreDocCollector TopScoreDocCollector::create(jint a0, const ::org::apache::lucene::search::ScoreDoc & a1, jint a2)
        {
          jclass cls = env->getClass(initializeClass);
          return TopScoreDocCollector(env->callStaticObjectMethod(cls, mids$[mid_create_508ead10943a9c2e], a0, a1.this$, a2));
        }

        ::org::apache::lucene::search::CollectorManager TopScoreDocCollector::createSharedManager(jint a0, const ::org::apache::lucene::search::FieldDoc & a1, jint a2)
        {
          jclass cls = env->getClass(initializeClass);
          return ::org::apache::lucene::search::CollectorManager(env->callStaticObjectMethod(cls, mids$[mid_createSharedManager_d2f30a27f63fe9bb], a0, a1.this$, a2));
        }

        ::org::apache::lucene::search::ScoreMode TopScoreDocCollector::scoreMode() const
        {
          return ::org::apache::lucene::search::ScoreMode(env->callObjectMethod(this$, mids$[mid_scoreMode_8a35254b82ee8276]));
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        static PyObject *t_TopScoreDocCollector_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_TopScoreDocCollector_instance_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_TopScoreDocCollector_of_(t_TopScoreDocCollector *self, PyObject *args);
        static PyObject *t_TopScoreDocCollector_create(PyTypeObject *type, PyObject *args);
        static PyObject *t_TopScoreDocCollector_createSharedManager(PyTypeObject *type, PyObject *args);
        static PyObject *t_TopScoreDocCollector_scoreMode(t_TopScoreDocCollector *self, PyObject *args);
        static PyObject *t_TopScoreDocCollector_get__parameters_(t_TopScoreDocCollector *self, void *data);
        static PyGetSetDef t_TopScoreDocCollector__fields_[] = {
          DECLARE_GET_FIELD(t_TopScoreDocCollector, parameters_),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_TopScoreDocCollector__methods_[] = {
          DECLARE_METHOD(t_TopScoreDocCollector, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_TopScoreDocCollector, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_TopScoreDocCollector, of_, METH_VARARGS),
          DECLARE_METHOD(t_TopScoreDocCollector, create, METH_VARARGS | METH_CLASS),
          DECLARE_METHOD(t_TopScoreDocCollector, createSharedManager, METH_VARARGS | METH_CLASS),
          DECLARE_METHOD(t_TopScoreDocCollector, scoreMode, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        static PyType_Slot PY_TYPE_SLOTS(TopScoreDocCollector)[] = {
          { Py_tp_methods, t_TopScoreDocCollector__methods_ },
          { Py_tp_init, (void *) abstract_init },
          { Py_tp_getset, t_TopScoreDocCollector__fields_ },
          { 0, NULL }
        };

        static PyType_Def *PY_TYPE_BASES(TopScoreDocCollector)[] = {
          &PY_TYPE_DEF(::org::apache::lucene::search::TopDocsCollector),
          NULL
        };

        DEFINE_TYPE(TopScoreDocCollector, t_TopScoreDocCollector, TopScoreDocCollector);
        PyObject *t_TopScoreDocCollector::wrap_Object(const TopScoreDocCollector& object, PyTypeObject *p0)
        {
          PyObject *obj = t_TopScoreDocCollector::wrap_Object(object);
          if (obj != NULL && obj != Py_None)
          {
            t_TopScoreDocCollector *self = (t_TopScoreDocCollector *) obj;
            self->parameters[0] = p0;
          }
          return obj;
        }

        PyObject *t_TopScoreDocCollector::wrap_jobject(const jobject& object, PyTypeObject *p0)
        {
          PyObject *obj = t_TopScoreDocCollector::wrap_jobject(object);
          if (obj != NULL && obj != Py_None)
          {
            t_TopScoreDocCollector *self = (t_TopScoreDocCollector *) obj;
            self->parameters[0] = p0;
          }
          return obj;
        }

        void t_TopScoreDocCollector::install(PyObject *module)
        {
          installType(&PY_TYPE(TopScoreDocCollector), &PY_TYPE_DEF(TopScoreDocCollector), module, "TopScoreDocCollector", 0);
        }

        void t_TopScoreDocCollector::initialize(PyObject *module)
        {
          PyObject_SetAttrString((PyObject *) PY_TYPE(TopScoreDocCollector), "class_", make_descriptor(TopScoreDocCollector::initializeClass, 1));
          PyObject_SetAttrString((PyObject *) PY_TYPE(TopScoreDocCollector), "wrapfn_", make_descriptor(t_TopScoreDocCollector::wrap_jobject));
          PyObject_SetAttrString((PyObject *) PY_TYPE(TopScoreDocCollector), "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_TopScoreDocCollector_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, TopScoreDocCollector::initializeClass, 1)))
            return NULL;
          return t_TopScoreDocCollector::wrap_Object(TopScoreDocCollector(((t_TopScoreDocCollector *) arg)->object.this$));
        }
        static PyObject *t_TopScoreDocCollector_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, TopScoreDocCollector::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static PyObject *t_TopScoreDocCollector_of_(t_TopScoreDocCollector *self, PyObject *args)
        {
          if (!parseArg(args, "T", 1, &(self->parameters)))
            Py_RETURN_SELF;
          return PyErr_SetArgsError((PyObject *) self, "of_", args);
        }

        static PyObject *t_TopScoreDocCollector_create(PyTypeObject *type, PyObject *args)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 2:
            {
              jint a0;
              jint a1;
              TopScoreDocCollector result((jobject) NULL);

              if (!parseArgs(args, "II", &a0, &a1))
              {
                OBJ_CALL(result = ::org::apache::lucene::search::TopScoreDocCollector::create(a0, a1));
                return t_TopScoreDocCollector::wrap_Object(result);
              }
            }
            break;
           case 3:
            {
              jint a0;
              ::org::apache::lucene::search::ScoreDoc a1((jobject) NULL);
              jint a2;
              TopScoreDocCollector result((jobject) NULL);

              if (!parseArgs(args, "IkI", ::org::apache::lucene::search::ScoreDoc::initializeClass, &a0, &a1, &a2))
              {
                OBJ_CALL(result = ::org::apache::lucene::search::TopScoreDocCollector::create(a0, a1, a2));
                return t_TopScoreDocCollector::wrap_Object(result);
              }
            }
          }

          PyErr_SetArgsError(type, "create", args);
          return NULL;
        }

        static PyObject *t_TopScoreDocCollector_createSharedManager(PyTypeObject *type, PyObject *args)
        {
          jint a0;
          ::org::apache::lucene::search::FieldDoc a1((jobject) NULL);
          jint a2;
          ::org::apache::lucene::search::CollectorManager result((jobject) NULL);

          if (!parseArgs(args, "IkI", ::org::apache::lucene::search::FieldDoc::initializeClass, &a0, &a1, &a2))
          {
            OBJ_CALL(result = ::org::apache::lucene::search::TopScoreDocCollector::createSharedManager(a0, a1, a2));
            return ::org::apache::lucene::search::t_CollectorManager::wrap_Object(result, ::org::apache::lucene::search::PY_TYPE(TopScoreDocCollector), ::org::apache::lucene::search::PY_TYPE(TopDocs));
          }

          PyErr_SetArgsError(type, "createSharedManager", args);
          return NULL;
        }

        static PyObject *t_TopScoreDocCollector_scoreMode(t_TopScoreDocCollector *self, PyObject *args)
        {
          ::org::apache::lucene::search::ScoreMode result((jobject) NULL);

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.scoreMode());
            return ::org::apache::lucene::search::t_ScoreMode::wrap_Object(result);
          }

          return callSuper(PY_TYPE(TopScoreDocCollector), (PyObject *) self, "scoreMode", args, 2);
        }
        static PyObject *t_TopScoreDocCollector_get__parameters_(t_TopScoreDocCollector *self, void *data)
        {
          return typeParameters(self->parameters, sizeof(self->parameters));
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/codecs/lucene50/Lucene50StoredFieldsFormat$Mode.h"
#include "java/lang/String.h"
#include "org/apache/lucene/codecs/lucene50/Lucene50StoredFieldsFormat$Mode.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace codecs {
        namespace lucene50 {

          ::java::lang::Class *Lucene50StoredFieldsFormat$Mode::class$ = NULL;
          jmethodID *Lucene50StoredFieldsFormat$Mode::mids$ = NULL;
          bool Lucene50StoredFieldsFormat$Mode::live$ = false;
          Lucene50StoredFieldsFormat$Mode *Lucene50StoredFieldsFormat$Mode::BEST_COMPRESSION = NULL;
          Lucene50StoredFieldsFormat$Mode *Lucene50StoredFieldsFormat$Mode::BEST_SPEED = NULL;

          jclass Lucene50StoredFieldsFormat$Mode::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/codecs/lucene50/Lucene50StoredFieldsFormat$Mode");

              mids$ = new jmethodID[max_mid];
              mids$[mid_valueOf_afc18df556bafe08] = env->getStaticMethodID(cls, "valueOf", "(Ljava/lang/String;)Lorg/apache/lucene/codecs/lucene50/Lucene50StoredFieldsFormat$Mode;");
              mids$[mid_values_e86668c4769d7370] = env->getStaticMethodID(cls, "values", "()[Lorg/apache/lucene/codecs/lucene50/Lucene50StoredFieldsFormat$Mode;");

              class$ = new ::java::lang::Class(cls);
              cls = (jclass) class$->this$;

              BEST_COMPRESSION = new Lucene50StoredFieldsFormat$Mode(env->getStaticObjectField(cls, "BEST_COMPRESSION", "Lorg/apache/lucene/codecs/lucene50/Lucene50StoredFieldsFormat$Mode;"));
              BEST_SPEED = new Lucene50StoredFieldsFormat$Mode(env->getStaticObjectField(cls, "BEST_SPEED", "Lorg/apache/lucene/codecs/lucene50/Lucene50StoredFieldsFormat$Mode;"));
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          Lucene50StoredFieldsFormat$Mode Lucene50StoredFieldsFormat$Mode::valueOf(const ::java::lang::String & a0)
          {
            jclass cls = env->getClass(initializeClass);
            return Lucene50StoredFieldsFormat$Mode(env->callStaticObjectMethod(cls, mids$[mid_valueOf_afc18df556bafe08], a0.this$));
          }

          JArray< Lucene50StoredFieldsFormat$Mode > Lucene50StoredFieldsFormat$Mode::values()
          {
            jclass cls = env->getClass(initializeClass);
            return JArray< Lucene50StoredFieldsFormat$Mode >(env->callStaticObjectMethod(cls, mids$[mid_values_e86668c4769d7370]));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace codecs {
        namespace lucene50 {
          static PyObject *t_Lucene50StoredFieldsFormat$Mode_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_Lucene50StoredFieldsFormat$Mode_instance_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_Lucene50StoredFieldsFormat$Mode_of_(t_Lucene50StoredFieldsFormat$Mode *self, PyObject *args);
          static PyObject *t_Lucene50StoredFieldsFormat$Mode_valueOf(PyTypeObject *type, PyObject *args);
          static PyObject *t_Lucene50StoredFieldsFormat$Mode_values(PyTypeObject *type);
          static PyObject *t_Lucene50StoredFieldsFormat$Mode_get__parameters_(t_Lucene50StoredFieldsFormat$Mode *self, void *data);
          static PyGetSetDef t_Lucene50StoredFieldsFormat$Mode__fields_[] = {
            DECLARE_GET_FIELD(t_Lucene50StoredFieldsFormat$Mode, parameters_),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_Lucene50StoredFieldsFormat$Mode__methods_[] = {
            DECLARE_METHOD(t_Lucene50StoredFieldsFormat$Mode, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_Lucene50StoredFieldsFormat$Mode, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_Lucene50StoredFieldsFormat$Mode, of_, METH_VARARGS),
            DECLARE_METHOD(t_Lucene50StoredFieldsFormat$Mode, valueOf, METH_VARARGS | METH_CLASS),
            DECLARE_METHOD(t_Lucene50StoredFieldsFormat$Mode, values, METH_NOARGS | METH_CLASS),
            { NULL, NULL, 0, NULL }
          };

          static PyType_Slot PY_TYPE_SLOTS(Lucene50StoredFieldsFormat$Mode)[] = {
            { Py_tp_methods, t_Lucene50StoredFieldsFormat$Mode__methods_ },
            { Py_tp_init, (void *) abstract_init },
            { Py_tp_getset, t_Lucene50StoredFieldsFormat$Mode__fields_ },
            { 0, NULL }
          };

          static PyType_Def *PY_TYPE_BASES(Lucene50StoredFieldsFormat$Mode)[] = {
            &PY_TYPE_DEF(::java::lang::Enum),
            NULL
          };

          DEFINE_TYPE(Lucene50StoredFieldsFormat$Mode, t_Lucene50StoredFieldsFormat$Mode, Lucene50StoredFieldsFormat$Mode);
          PyObject *t_Lucene50StoredFieldsFormat$Mode::wrap_Object(const Lucene50StoredFieldsFormat$Mode& object, PyTypeObject *p0)
          {
            PyObject *obj = t_Lucene50StoredFieldsFormat$Mode::wrap_Object(object);
            if (obj != NULL && obj != Py_None)
            {
              t_Lucene50StoredFieldsFormat$Mode *self = (t_Lucene50StoredFieldsFormat$Mode *) obj;
              self->parameters[0] = p0;
            }
            return obj;
          }

          PyObject *t_Lucene50StoredFieldsFormat$Mode::wrap_jobject(const jobject& object, PyTypeObject *p0)
          {
            PyObject *obj = t_Lucene50StoredFieldsFormat$Mode::wrap_jobject(object);
            if (obj != NULL && obj != Py_None)
            {
              t_Lucene50StoredFieldsFormat$Mode *self = (t_Lucene50StoredFieldsFormat$Mode *) obj;
              self->parameters[0] = p0;
            }
            return obj;
          }

          void t_Lucene50StoredFieldsFormat$Mode::install(PyObject *module)
          {
            installType(&PY_TYPE(Lucene50StoredFieldsFormat$Mode), &PY_TYPE_DEF(Lucene50StoredFieldsFormat$Mode), module, "Lucene50StoredFieldsFormat$Mode", 0);
          }

          void t_Lucene50StoredFieldsFormat$Mode::initialize(PyObject *module)
          {
            PyObject_SetAttrString((PyObject *) PY_TYPE(Lucene50StoredFieldsFormat$Mode), "class_", make_descriptor(Lucene50StoredFieldsFormat$Mode::initializeClass, 1));
            PyObject_SetAttrString((PyObject *) PY_TYPE(Lucene50StoredFieldsFormat$Mode), "wrapfn_", make_descriptor(t_Lucene50StoredFieldsFormat$Mode::wrap_jobject));
            PyObject_SetAttrString((PyObject *) PY_TYPE(Lucene50StoredFieldsFormat$Mode), "boxfn_", make_descriptor(boxObject));
            env->getClass(Lucene50StoredFieldsFormat$Mode::initializeClass);
            PyObject_SetAttrString((PyObject *) PY_TYPE(Lucene50StoredFieldsFormat$Mode), "BEST_COMPRESSION", make_descriptor(t_Lucene50StoredFieldsFormat$Mode::wrap_Object(*Lucene50StoredFieldsFormat$Mode::BEST_COMPRESSION)));
            PyObject_SetAttrString((PyObject *) PY_TYPE(Lucene50StoredFieldsFormat$Mode), "BEST_SPEED", make_descriptor(t_Lucene50StoredFieldsFormat$Mode::wrap_Object(*Lucene50StoredFieldsFormat$Mode::BEST_SPEED)));
          }

          static PyObject *t_Lucene50StoredFieldsFormat$Mode_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, Lucene50StoredFieldsFormat$Mode::initializeClass, 1)))
              return NULL;
            return t_Lucene50StoredFieldsFormat$Mode::wrap_Object(Lucene50StoredFieldsFormat$Mode(((t_Lucene50StoredFieldsFormat$Mode *) arg)->object.this$));
          }
          static PyObject *t_Lucene50StoredFieldsFormat$Mode_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, Lucene50StoredFieldsFormat$Mode::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static PyObject *t_Lucene50StoredFieldsFormat$Mode_of_(t_Lucene50StoredFieldsFormat$Mode *self, PyObject *args)
          {
            if (!parseArg(args, "T", 1, &(self->parameters)))
              Py_RETURN_SELF;
            return PyErr_SetArgsError((PyObject *) self, "of_", args);
          }

          static PyObject *t_Lucene50StoredFieldsFormat$Mode_valueOf(PyTypeObject *type, PyObject *args)
          {
            ::java::lang::String a0((jobject) NULL);
            Lucene50StoredFieldsFormat$Mode result((jobject) NULL);

            if (!parseArgs(args, "s", &a0))
            {
              OBJ_CALL(result = ::org::apache::lucene::codecs::lucene50::Lucene50StoredFieldsFormat$Mode::valueOf(a0));
              return t_Lucene50StoredFieldsFormat$Mode::wrap_Object(result);
            }

            return callSuper(type, "valueOf", args, 2);
          }

          static PyObject *t_Lucene50StoredFieldsFormat$Mode_values(PyTypeObject *type)
          {
            JArray< Lucene50StoredFieldsFormat$Mode > result((jobject) NULL);
            OBJ_CALL(result = ::org::apache::lucene::codecs::lucene50::Lucene50StoredFieldsFormat$Mode::values());
            return JArray<jobject>(result.this$).wrap(t_Lucene50StoredFieldsFormat$Mode::wrap_jobject);
          }
          static PyObject *t_Lucene50StoredFieldsFormat$Mode_get__parameters_(t_Lucene50StoredFieldsFormat$Mode *self, void *data)
          {
            return typeParameters(self->parameters, sizeof(self->parameters));
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/sinks/TeeSinkTokenFilter$SinkTokenStream.h"
#include "java/io/IOException.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace sinks {

          ::java::lang::Class *TeeSinkTokenFilter$SinkTokenStream::class$ = NULL;
          jmethodID *TeeSinkTokenFilter$SinkTokenStream::mids$ = NULL;
          bool TeeSinkTokenFilter$SinkTokenStream::live$ = false;

          jclass TeeSinkTokenFilter$SinkTokenStream::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/sinks/TeeSinkTokenFilter$SinkTokenStream");

              mids$ = new jmethodID[max_mid];
              mids$[mid_end_f2cc1bce94666404] = env->getMethodID(cls, "end", "()V");
              mids$[mid_incrementToken_8454bd5aa23fd11e] = env->getMethodID(cls, "incrementToken", "()Z");
              mids$[mid_reset_f2cc1bce94666404] = env->getMethodID(cls, "reset", "()V");

              class$ = new ::java::lang::Class(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          void TeeSinkTokenFilter$SinkTokenStream::end() const
          {
            env->callVoidMethod(this$, mids$[mid_end_f2cc1bce94666404]);
          }

          jboolean TeeSinkTokenFilter$SinkTokenStream::incrementToken() const
          {
            return env->callBooleanMethod(this$, mids$[mid_incrementToken_8454bd5aa23fd11e]);
          }

          void TeeSinkTokenFilter$SinkTokenStream::reset() const
          {
            env->callVoidMethod(this$, mids$[mid_reset_f2cc1bce94666404]);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace sinks {
          static PyObject *t_TeeSinkTokenFilter$SinkTokenStream_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_TeeSinkTokenFilter$SinkTokenStream_instance_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_TeeSinkTokenFilter$SinkTokenStream_end(t_TeeSinkTokenFilter$SinkTokenStream *self, PyObject *args);
          static PyObject *t_TeeSinkTokenFilter$SinkTokenStream_incrementToken(t_TeeSinkTokenFilter$SinkTokenStream *self, PyObject *args);
          static PyObject *t_TeeSinkTokenFilter$SinkTokenStream_reset(t_TeeSinkTokenFilter$SinkTokenStream *self, PyObject *args);

          static PyMethodDef t_TeeSinkTokenFilter$SinkTokenStream__methods_[] = {
            DECLARE_METHOD(t_TeeSinkTokenFilter$SinkTokenStream, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_TeeSinkTokenFilter$SinkTokenStream, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_TeeSinkTokenFilter$SinkTokenStream, end, METH_VARARGS),
            DECLARE_METHOD(t_TeeSinkTokenFilter$SinkTokenStream, incrementToken, METH_VARARGS),
            DECLARE_METHOD(t_TeeSinkTokenFilter$SinkTokenStream, reset, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          static PyType_Slot PY_TYPE_SLOTS(TeeSinkTokenFilter$SinkTokenStream)[] = {
            { Py_tp_methods, t_TeeSinkTokenFilter$SinkTokenStream__methods_ },
            { Py_tp_init, (void *) abstract_init },
            { 0, NULL }
          };

          static PyType_Def *PY_TYPE_BASES(TeeSinkTokenFilter$SinkTokenStream)[] = {
            &PY_TYPE_DEF(::org::apache::lucene::analysis::TokenStream),
            NULL
          };

          DEFINE_TYPE(TeeSinkTokenFilter$SinkTokenStream, t_TeeSinkTokenFilter$SinkTokenStream, TeeSinkTokenFilter$SinkTokenStream);

          void t_TeeSinkTokenFilter$SinkTokenStream::install(PyObject *module)
          {
            installType(&PY_TYPE(TeeSinkTokenFilter$SinkTokenStream), &PY_TYPE_DEF(TeeSinkTokenFilter$SinkTokenStream), module, "TeeSinkTokenFilter$SinkTokenStream", 0);
          }

          void t_TeeSinkTokenFilter$SinkTokenStream::initialize(PyObject *module)
          {
            PyObject_SetAttrString((PyObject *) PY_TYPE(TeeSinkTokenFilter$SinkTokenStream), "class_", make_descriptor(TeeSinkTokenFilter$SinkTokenStream::initializeClass, 1));
            PyObject_SetAttrString((PyObject *) PY_TYPE(TeeSinkTokenFilter$SinkTokenStream), "wrapfn_", make_descriptor(t_TeeSinkTokenFilter$SinkTokenStream::wrap_jobject));
            PyObject_SetAttrString((PyObject *) PY_TYPE(TeeSinkTokenFilter$SinkTokenStream), "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_TeeSinkTokenFilter$SinkTokenStream_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, TeeSinkTokenFilter$SinkTokenStream::initializeClass, 1)))
              return NULL;
            return t_TeeSinkTokenFilter$SinkTokenStream::wrap_Object(TeeSinkTokenFilter$SinkTokenStream(((t_TeeSinkTokenFilter$SinkTokenStream *) arg)->object.this$));
          }
          static PyObject *t_TeeSinkTokenFilter$SinkTokenStream_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, TeeSinkTokenFilter$SinkTokenStream::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static PyObject *t_TeeSinkTokenFilter$SinkTokenStream_end(t_TeeSinkTokenFilter$SinkTokenStream *self, PyObject *args)
          {

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(self->object.end());
              Py_RETURN_NONE;
            }

            return callSuper(PY_TYPE(TeeSinkTokenFilter$SinkTokenStream), (PyObject *) self, "end", args, 2);
          }

          static PyObject *t_TeeSinkTokenFilter$SinkTokenStream_incrementToken(t_TeeSinkTokenFilter$SinkTokenStream *self, PyObject *args)
          {
            jboolean result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.incrementToken());
              Py_RETURN_BOOL(result);
            }

            return callSuper(PY_TYPE(TeeSinkTokenFilter$SinkTokenStream), (PyObject *) self, "incrementToken", args, 2);
          }

          static PyObject *t_TeeSinkTokenFilter$SinkTokenStream_reset(t_TeeSinkTokenFilter$SinkTokenStream *self, PyObject *args)
          {

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(self->object.reset());
              Py_RETURN_NONE;
            }

            return callSuper(PY_TYPE(TeeSinkTokenFilter$SinkTokenStream), (PyObject *) self, "reset", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/facet/taxonomy/TaxonomyFacets.h"
#include "java/util/List.h"
#include "org/apache/lucene/facet/FacetResult.h"
#include "java/io/IOException.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace facet {
        namespace taxonomy {

          ::java::lang::Class *TaxonomyFacets::class$ = NULL;
          jmethodID *TaxonomyFacets::mids$ = NULL;
          bool TaxonomyFacets::live$ = false;

          jclass TaxonomyFacets::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/facet/taxonomy/TaxonomyFacets");

              mids$ = new jmethodID[max_mid];
              mids$[mid_childrenLoaded_8454bd5aa23fd11e] = env->getMethodID(cls, "childrenLoaded", "()Z");
              mids$[mid_getAllDims_d82aee015ceb4d93] = env->getMethodID(cls, "getAllDims", "(I)Ljava/util/List;");
              mids$[mid_siblingsLoaded_8454bd5aa23fd11e] = env->getMethodID(cls, "siblingsLoaded", "()Z");
              mids$[mid_getChildren_d2c45ef07a322466] = env->getMethodID(cls, "getChildren", "()[I");
              mids$[mid_getSiblings_d2c45ef07a322466] = env->getMethodID(cls, "getSiblings", "()[I");
              mids$[mid_verifyDim_c977a2e632d40fa5] = env->getMethodID(cls, "verifyDim", "(Ljava/lang/String;)Lorg/apache/lucene/facet/FacetsConfig$DimConfig;");

              class$ = new ::java::lang::Class(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          jboolean TaxonomyFacets::childrenLoaded() const
          {
            return env->callBooleanMethod(this$, mids$[mid_childrenLoaded_8454bd5aa23fd11e]);
          }

          ::java::util::List TaxonomyFacets::getAllDims(jint a0) const
          {
            return ::java::util::List(env->callObjectMethod(this$, mids$[mid_getAllDims_d82aee015ceb4d93], a0));
          }

          jboolean TaxonomyFacets::siblingsLoaded() const
          {
            return env->callBooleanMethod(this$, mids$[mid_siblingsLoaded_8454bd5aa23fd11e]);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace facet {
        namespace taxonomy {
          static PyObject *t_TaxonomyFacets_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_TaxonomyFacets_instance_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_TaxonomyFacets_childrenLoaded(t_TaxonomyFacets *self);
          static PyObject *t_TaxonomyFacets_getAllDims(t_TaxonomyFacets *self, PyObject *args);
          static PyObject *t_TaxonomyFacets_siblingsLoaded(t_TaxonomyFacets *self);

          static PyMethodDef t_TaxonomyFacets__methods_[] = {
            DECLARE_METHOD(t_TaxonomyFacets, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_TaxonomyFacets, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_TaxonomyFacets, childrenLoaded, METH_NOARGS),
            DECLARE_METHOD(t_TaxonomyFacets, getAllDims, METH_VARARGS),
            DECLARE_METHOD(t_TaxonomyFacets, siblingsLoaded, METH_NOARGS),
            { NULL, NULL, 0, NULL }
          };

          static PyType_Slot PY_TYPE_SLOTS(TaxonomyFacets)[] = {
            { Py_tp_methods, t_TaxonomyFacets__methods_ },
            { Py_tp_init, (void *) abstract_init },
            { 0, NULL }
          };

          static PyType_Def *PY_TYPE_BASES(TaxonomyFacets)[] = {
            &PY_TYPE_DEF(::org::apache::lucene::facet::Facets),
            NULL
          };

          DEFINE_TYPE(TaxonomyFacets, t_TaxonomyFacets, TaxonomyFacets);

          void t_TaxonomyFacets::install(PyObject *module)
          {
            installType(&PY_TYPE(TaxonomyFacets), &PY_TYPE_DEF(TaxonomyFacets), module, "TaxonomyFacets", 0);
          }

          void t_TaxonomyFacets::initialize(PyObject *module)
          {
            PyObject_SetAttrString((PyObject *) PY_TYPE(TaxonomyFacets), "class_", make_descriptor(TaxonomyFacets::initializeClass, 1));
            PyObject_SetAttrString((PyObject *) PY_TYPE(TaxonomyFacets), "wrapfn_", make_descriptor(t_TaxonomyFacets::wrap_jobject));
            PyObject_SetAttrString((PyObject *) PY_TYPE(TaxonomyFacets), "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_TaxonomyFacets_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, TaxonomyFacets::initializeClass, 1)))
              return NULL;
            return t_TaxonomyFacets::wrap_Object(TaxonomyFacets(((t_TaxonomyFacets *) arg)->object.this$));
          }
          static PyObject *t_TaxonomyFacets_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, TaxonomyFacets::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static PyObject *t_TaxonomyFacets_childrenLoaded(t_TaxonomyFacets *self)
          {
            jboolean result;
            OBJ_CALL(result = self->object.childrenLoaded());
            Py_RETURN_BOOL(result);
          }

          static PyObject *t_TaxonomyFacets_getAllDims(t_TaxonomyFacets *self, PyObject *args)
          {
            jint a0;
            ::java::util::List result((jobject) NULL);

            if (!parseArgs(args, "I", &a0))
            {
              OBJ_CALL(result = self->object.getAllDims(a0));
              return ::java::util::t_List::wrap_Object(result, ::org::apache::lucene::facet::PY_TYPE(FacetResult));
            }

            return callSuper(PY_TYPE(TaxonomyFacets), (PyObject *) self, "getAllDims", args, 2);
          }

          static PyObject *t_TaxonomyFacets_siblingsLoaded(t_TaxonomyFacets *self)
          {
            jboolean result;
            OBJ_CALL(result = self->object.siblingsLoaded());
            Py_RETURN_BOOL(result);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/index/TwoPhaseCommitTool$PrepareCommitFailException.h"
#include "org/apache/lucene/index/TwoPhaseCommit.h"
#include "java/lang/Throwable.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {

        ::java::lang::Class *TwoPhaseCommitTool$PrepareCommitFailException::class$ = NULL;
        jmethodID *TwoPhaseCommitTool$PrepareCommitFailException::mids$ = NULL;
        bool TwoPhaseCommitTool$PrepareCommitFailException::live$ = false;

        jclass TwoPhaseCommitTool$PrepareCommitFailException::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/index/TwoPhaseCommitTool$PrepareCommitFailException");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_0c0c7483f1e3dac6] = env->getMethodID(cls, "<init>", "(Ljava/lang/Throwable;Lorg/apache/lucene/index/TwoPhaseCommit;)V");

            class$ = new ::java::lang::Class(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        TwoPhaseCommitTool$PrepareCommitFailException::TwoPhaseCommitTool$PrepareCommitFailException(const ::java::lang::Throwable & a0, const ::org::apache::lucene::index::TwoPhaseCommit & a1) : ::java::io::IOException(env->newObject(initializeClass, &mids$, mid_init$_0c0c7483f1e3dac6, a0.this$, a1.this$)) {}
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {
        static PyObject *t_TwoPhaseCommitTool$PrepareCommitFailException_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_TwoPhaseCommitTool$PrepareCommitFailException_instance_(PyTypeObject *type, PyObject *arg);
        static int t_TwoPhaseCommitTool$PrepareCommitFailException_init_(t_TwoPhaseCommitTool$PrepareCommitFailException *self, PyObject *args, PyObject *kwds);

        static PyMethodDef t_TwoPhaseCommitTool$PrepareCommitFailException__methods_[] = {
          DECLARE_METHOD(t_TwoPhaseCommitTool$PrepareCommitFailException, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_TwoPhaseCommitTool$PrepareCommitFailException, instance_, METH_O | METH_CLASS),
          { NULL, NULL, 0, NULL }
        };

        static PyType_Slot PY_TYPE_SLOTS(TwoPhaseCommitTool$PrepareCommitFailException)[] = {
          { Py_tp_methods, t_TwoPhaseCommitTool$PrepareCommitFailException__methods_ },
          { Py_tp_init, (void *) t_TwoPhaseCommitTool$PrepareCommitFailException_init_ },
          { 0, NULL }
        };

        static PyType_Def *PY_TYPE_BASES(TwoPhaseCommitTool$PrepareCommitFailException)[] = {
          &PY_TYPE_DEF(::java::io::IOException),
          NULL
        };

        DEFINE_TYPE(TwoPhaseCommitTool$PrepareCommitFailException, t_TwoPhaseCommitTool$PrepareCommitFailException, TwoPhaseCommitTool$PrepareCommitFailException);

        void t_TwoPhaseCommitTool$PrepareCommitFailException::install(PyObject *module)
        {
          installType(&PY_TYPE(TwoPhaseCommitTool$PrepareCommitFailException), &PY_TYPE_DEF(TwoPhaseCommitTool$PrepareCommitFailException), module, "TwoPhaseCommitTool$PrepareCommitFailException", 0);
        }

        void t_TwoPhaseCommitTool$PrepareCommitFailException::initialize(PyObject *module)
        {
          PyObject_SetAttrString((PyObject *) PY_TYPE(TwoPhaseCommitTool$PrepareCommitFailException), "class_", make_descriptor(TwoPhaseCommitTool$PrepareCommitFailException::initializeClass, 1));
          PyObject_SetAttrString((PyObject *) PY_TYPE(TwoPhaseCommitTool$PrepareCommitFailException), "wrapfn_", make_descriptor(t_TwoPhaseCommitTool$PrepareCommitFailException::wrap_jobject));
          PyObject_SetAttrString((PyObject *) PY_TYPE(TwoPhaseCommitTool$PrepareCommitFailException), "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_TwoPhaseCommitTool$PrepareCommitFailException_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, TwoPhaseCommitTool$PrepareCommitFailException::initializeClass, 1)))
            return NULL;
          return t_TwoPhaseCommitTool$PrepareCommitFailException::wrap_Object(TwoPhaseCommitTool$PrepareCommitFailException(((t_TwoPhaseCommitTool$PrepareCommitFailException *) arg)->object.this$));
        }
        static PyObject *t_TwoPhaseCommitTool$PrepareCommitFailException_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, TwoPhaseCommitTool$PrepareCommitFailException::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_TwoPhaseCommitTool$PrepareCommitFailException_init_(t_TwoPhaseCommitTool$PrepareCommitFailException *self, PyObject *args, PyObject *kwds)
        {
          ::java::lang::Throwable a0((jobject) NULL);
          ::org::apache::lucene::index::TwoPhaseCommit a1((jobject) NULL);
          TwoPhaseCommitTool$PrepareCommitFailException object((jobject) NULL);

          if (!parseArgs(args, "kk", ::java::lang::Throwable::initializeClass, ::org::apache::lucene::index::TwoPhaseCommit::initializeClass, &a0, &a1))
          {
            INT_CALL(object = TwoPhaseCommitTool$PrepareCommitFailException(a0, a1));
            self->object = object;
          }
          else
          {
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/tartarus/snowball/ext/KpStemmer.h"
#include "java/lang/Object.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace tartarus {
    namespace snowball {
      namespace ext {

        ::java::lang::Class *KpStemmer::class$ = NULL;
        jmethodID *KpStemmer::mids$ = NULL;
        bool KpStemmer::live$ = false;

        jclass KpStemmer::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/tartarus/snowball/ext/KpStemmer");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_f2cc1bce94666404] = env->getMethodID(cls, "<init>", "()V");
            mids$[mid_equals_8b72f2dcdde6fd1d] = env->getMethodID(cls, "equals", "(Ljava/lang/Object;)Z");
            mids$[mid_hashCode_9972fcc56b44e79d] = env->getMethodID(cls, "hashCode", "()I");
            mids$[mid_stem_8454bd5aa23fd11e] = env->getMethodID(cls, "stem", "()Z");

            class$ = new ::java::lang::Class(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        KpStemmer::KpStemmer() : ::org::tartarus::snowball::SnowballProgram(env->newObject(initializeClass, &mids$, mid_init$_f2cc1bce94666404)) {}

        jboolean KpStemmer::equals(const ::java::lang::Object & a0) const
        {
          return env->callBooleanMethod(this$, mids$[mid_equals_8b72f2dcdde6fd1d], a0.this$);
        }

        jint KpStemmer::hashCode() const
        {
          return env->callIntMethod(this$, mids$[mid_hashCode_9972fcc56b44e79d]);
        }

        jboolean KpStemmer::stem() const
        {
          return env->callBooleanMethod(this$, mids$[mid_stem_8454bd5aa23fd11e]);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace tartarus {
    namespace snowball {
      namespace ext {
        static PyObject *t_KpStemmer_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_KpStemmer_instance_(PyTypeObject *type, PyObject *arg);
        static int t_KpStemmer_init_(t_KpStemmer *self, PyObject *args, PyObject *kwds);
        static PyObject *t_KpStemmer_equals(t_KpStemmer *self, PyObject *args);
        static PyObject *t_KpStemmer_hashCode(t_KpStemmer *self, PyObject *args);
        static PyObject *t_KpStemmer_stem(t_KpStemmer *self, PyObject *args);

        static PyMethodDef t_KpStemmer__methods_[] = {
          DECLARE_METHOD(t_KpStemmer, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_KpStemmer, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_KpStemmer, equals, METH_VARARGS),
          DECLARE_METHOD(t_KpStemmer, hashCode, METH_VARARGS),
          DECLARE_METHOD(t_KpStemmer, stem, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        static PyType_Slot PY_TYPE_SLOTS(KpStemmer)[] = {
          { Py_tp_methods, t_KpStemmer__methods_ },
          { Py_tp_init, (void *) t_KpStemmer_init_ },
          { 0, NULL }
        };

        static PyType_Def *PY_TYPE_BASES(KpStemmer)[] = {
          &PY_TYPE_DEF(::org::tartarus::snowball::SnowballProgram),
          NULL
        };

        DEFINE_TYPE(KpStemmer, t_KpStemmer, KpStemmer);

        void t_KpStemmer::install(PyObject *module)
        {
          installType(&PY_TYPE(KpStemmer), &PY_TYPE_DEF(KpStemmer), module, "KpStemmer", 0);
        }

        void t_KpStemmer::initialize(PyObject *module)
        {
          PyObject_SetAttrString((PyObject *) PY_TYPE(KpStemmer), "class_", make_descriptor(KpStemmer::initializeClass, 1));
          PyObject_SetAttrString((PyObject *) PY_TYPE(KpStemmer), "wrapfn_", make_descriptor(t_KpStemmer::wrap_jobject));
          PyObject_SetAttrString((PyObject *) PY_TYPE(KpStemmer), "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_KpStemmer_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, KpStemmer::initializeClass, 1)))
            return NULL;
          return t_KpStemmer::wrap_Object(KpStemmer(((t_KpStemmer *) arg)->object.this$));
        }
        static PyObject *t_KpStemmer_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, KpStemmer::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_KpStemmer_init_(t_KpStemmer *self, PyObject *args, PyObject *kwds)
        {
          KpStemmer object((jobject) NULL);

          INT_CALL(object = KpStemmer());
          self->object = object;

          return 0;
        }

        static PyObject *t_KpStemmer_equals(t_KpStemmer *self, PyObject *args)
        {
          ::java::lang::Object a0((jobject) NULL);
          jboolean result;

          if (!parseArgs(args, "o", &a0))
          {
            OBJ_CALL(result = self->object.equals(a0));
            Py_RETURN_BOOL(result);
          }

          return callSuper(PY_TYPE(KpStemmer), (PyObject *) self, "equals", args, 2);
        }

        static PyObject *t_KpStemmer_hashCode(t_KpStemmer *self, PyObject *args)
        {
          jint result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.hashCode());
            return PyLong_FromLong((long) result);
          }

          return callSuper(PY_TYPE(KpStemmer), (PyObject *) self, "hashCode", args, 2);
        }

        static PyObject *t_KpStemmer_stem(t_KpStemmer *self, PyObject *args)
        {
          jboolean result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.stem());
            Py_RETURN_BOOL(result);
          }

          return callSuper(PY_TYPE(KpStemmer), (PyObject *) self, "stem", args, 2);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/codecs/uniformsplit/BlockWriter.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace codecs {
        namespace uniformsplit {

          ::java::lang::Class *BlockWriter::class$ = NULL;
          jmethodID *BlockWriter::mids$ = NULL;
          bool BlockWriter::live$ = false;

          jclass BlockWriter::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/codecs/uniformsplit/BlockWriter");

              mids$ = new jmethodID[max_mid];
              mids$[mid_finishLastBlock_f9451def1ea25bf5] = env->getMethodID(cls, "finishLastBlock", "(Lorg/apache/lucene/codecs/uniformsplit/IndexDictionary$Builder;)V");
              mids$[mid_addLine_3d33d1145ecf0ca5] = env->getMethodID(cls, "addLine", "(Lorg/apache/lucene/util/BytesRef;Lorg/apache/lucene/codecs/BlockTermState;Lorg/apache/lucene/codecs/uniformsplit/IndexDictionary$Builder;)V");
              mids$[mid_writeBlock_98f43c031216cc0e] = env->getMethodID(cls, "writeBlock", "(Ljava/util/List;Lorg/apache/lucene/codecs/uniformsplit/IndexDictionary$Builder;)V");
              mids$[mid_createDeltaBaseTermStateSerializer_582cc298510958b7] = env->getMethodID(cls, "createDeltaBaseTermStateSerializer", "()Lorg/apache/lucene/codecs/uniformsplit/DeltaBaseTermStateSerializer;");
              mids$[mid_createBlockHeaderSerializer_d9142c3f0777a24f] = env->getMethodID(cls, "createBlockHeaderSerializer", "()Lorg/apache/lucene/codecs/uniformsplit/BlockHeader$Serializer;");
              mids$[mid_createBlockLineSerializer_8d7f678ac5857d60] = env->getMethodID(cls, "createBlockLineSerializer", "()Lorg/apache/lucene/codecs/uniformsplit/BlockLine$Serializer;");
              mids$[mid_updateFieldMetadata_9c778c9bce6694df] = env->getMethodID(cls, "updateFieldMetadata", "(J)V");
              mids$[mid_splitAndWriteBlock_f9451def1ea25bf5] = env->getMethodID(cls, "splitAndWriteBlock", "(Lorg/apache/lucene/codecs/uniformsplit/IndexDictionary$Builder;)V");
              mids$[mid_addBlockKey_98f43c031216cc0e] = env->getMethodID(cls, "addBlockKey", "(Ljava/util/List;Lorg/apache/lucene/codecs/uniformsplit/IndexDictionary$Builder;)V");
              mids$[mid_writeBlockLine_fa6b8f0fea2f0a11] = env->getMethodID(cls, "writeBlockLine", "(ZLorg/apache/lucene/codecs/uniformsplit/BlockLine;Lorg/apache/lucene/codecs/uniformsplit/BlockLine;)V");

              class$ = new ::java::lang::Class(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace codecs {
        namespace uniformsplit {
          static PyObject *t_BlockWriter_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_BlockWriter_instance_(PyTypeObject *type, PyObject *arg);

          static PyMethodDef t_BlockWriter__methods_[] = {
            DECLARE_METHOD(t_BlockWriter, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_BlockWriter, instance_, METH_O | METH_CLASS),
            { NULL, NULL, 0, NULL }
          };

          static PyType_Slot PY_TYPE_SLOTS(BlockWriter)[] = {
            { Py_tp_methods, t_BlockWriter__methods_ },
            { Py_tp_init, (void *) abstract_init },
            { 0, NULL }
          };

          static PyType_Def *PY_TYPE_BASES(BlockWriter)[] = {
            &PY_TYPE_DEF(::java::lang::Object),
            NULL
          };

          DEFINE_TYPE(BlockWriter, t_BlockWriter, BlockWriter);

          void t_BlockWriter::install(PyObject *module)
          {
            installType(&PY_TYPE(BlockWriter), &PY_TYPE_DEF(BlockWriter), module, "BlockWriter", 0);
          }

          void t_BlockWriter::initialize(PyObject *module)
          {
            PyObject_SetAttrString((PyObject *) PY_TYPE(BlockWriter), "class_", make_descriptor(BlockWriter::initializeClass, 1));
            PyObject_SetAttrString((PyObject *) PY_TYPE(BlockWriter), "wrapfn_", make_descriptor(t_BlockWriter::wrap_jobject));
            PyObject_SetAttrString((PyObject *) PY_TYPE(BlockWriter), "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_BlockWriter_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, BlockWriter::initializeClass, 1)))
              return NULL;
            return t_BlockWriter::wrap_Object(BlockWriter(((t_BlockWriter *) arg)->object.this$));
          }
          static PyObject *t_BlockWriter_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, BlockWriter::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/tartarus/snowball/ext/PorterStemmer.h"
#include "java/lang/Object.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace tartarus {
    namespace snowball {
      namespace ext {

        ::java::lang::Class *PorterStemmer::class$ = NULL;
        jmethodID *PorterStemmer::mids$ = NULL;
        bool PorterStemmer::live$ = false;

        jclass PorterStemmer::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/tartarus/snowball/ext/PorterStemmer");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_f2cc1bce94666404] = env->getMethodID(cls, "<init>", "()V");
            mids$[mid_equals_8b72f2dcdde6fd1d] = env->getMethodID(cls, "equals", "(Ljava/lang/Object;)Z");
            mids$[mid_hashCode_9972fcc56b44e79d] = env->getMethodID(cls, "hashCode", "()I");
            mids$[mid_stem_8454bd5aa23fd11e] = env->getMethodID(cls, "stem", "()Z");

            class$ = new ::java::lang::Class(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        PorterStemmer::PorterStemmer() : ::org::tartarus::snowball::SnowballProgram(env->newObject(initializeClass, &mids$, mid_init$_f2cc1bce94666404)) {}

        jboolean PorterStemmer::equals(const ::java::lang::Object & a0) const
        {
          return env->callBooleanMethod(this$, mids$[mid_equals_8b72f2dcdde6fd1d], a0.this$);
        }

        jint PorterStemmer::hashCode() const
        {
          return env->callIntMethod(this$, mids$[mid_hashCode_9972fcc56b44e79d]);
        }

        jboolean PorterStemmer::stem() const
        {
          return env->callBooleanMethod(this$, mids$[mid_stem_8454bd5aa23fd11e]);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace tartarus {
    namespace snowball {
      namespace ext {
        static PyObject *t_PorterStemmer_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_PorterStemmer_instance_(PyTypeObject *type, PyObject *arg);
        static int t_PorterStemmer_init_(t_PorterStemmer *self, PyObject *args, PyObject *kwds);
        static PyObject *t_PorterStemmer_equals(t_PorterStemmer *self, PyObject *args);
        static PyObject *t_PorterStemmer_hashCode(t_PorterStemmer *self, PyObject *args);
        static PyObject *t_PorterStemmer_stem(t_PorterStemmer *self, PyObject *args);

        static PyMethodDef t_PorterStemmer__methods_[] = {
          DECLARE_METHOD(t_PorterStemmer, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_PorterStemmer, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_PorterStemmer, equals, METH_VARARGS),
          DECLARE_METHOD(t_PorterStemmer, hashCode, METH_VARARGS),
          DECLARE_METHOD(t_PorterStemmer, stem, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        static PyType_Slot PY_TYPE_SLOTS(PorterStemmer)[] = {
          { Py_tp_methods, t_PorterStemmer__methods_ },
          { Py_tp_init, (void *) t_PorterStemmer_init_ },
          { 0, NULL }
        };

        static PyType_Def *PY_TYPE_BASES(PorterStemmer)[] = {
          &PY_TYPE_DEF(::org::tartarus::snowball::SnowballProgram),
          NULL
        };

        DEFINE_TYPE(PorterStemmer, t_PorterStemmer, PorterStemmer);

        void t_PorterStemmer::install(PyObject *module)
        {
          installType(&PY_TYPE(PorterStemmer), &PY_TYPE_DEF(PorterStemmer), module, "PorterStemmer", 0);
        }

        void t_PorterStemmer::initialize(PyObject *module)
        {
          PyObject_SetAttrString((PyObject *) PY_TYPE(PorterStemmer), "class_", make_descriptor(PorterStemmer::initializeClass, 1));
          PyObject_SetAttrString((PyObject *) PY_TYPE(PorterStemmer), "wrapfn_", make_descriptor(t_PorterStemmer::wrap_jobject));
          PyObject_SetAttrString((PyObject *) PY_TYPE(PorterStemmer), "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_PorterStemmer_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, PorterStemmer::initializeClass, 1)))
            return NULL;
          return t_PorterStemmer::wrap_Object(PorterStemmer(((t_PorterStemmer *) arg)->object.this$));
        }
        static PyObject *t_PorterStemmer_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, PorterStemmer::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_PorterStemmer_init_(t_PorterStemmer *self, PyObject *args, PyObject *kwds)
        {
          PorterStemmer object((jobject) NULL);

          INT_CALL(object = PorterStemmer());
          self->object = object;

          return 0;
        }

        static PyObject *t_PorterStemmer_equals(t_PorterStemmer *self, PyObject *args)
        {
          ::java::lang::Object a0((jobject) NULL);
          jboolean result;

          if (!parseArgs(args, "o", &a0))
          {
            OBJ_CALL(result = self->object.equals(a0));
            Py_RETURN_BOOL(result);
          }

          return callSuper(PY_TYPE(PorterStemmer), (PyObject *) self, "equals", args, 2);
        }

        static PyObject *t_PorterStemmer_hashCode(t_PorterStemmer *self, PyObject *args)
        {
          jint result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.hashCode());
            return PyLong_FromLong((long) result);
          }

          return callSuper(PY_TYPE(PorterStemmer), (PyObject *) self, "hashCode", args, 2);
        }

        static PyObject *t_PorterStemmer_stem(t_PorterStemmer *self, PyObject *args)
        {
          jboolean result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.stem());
            Py_RETURN_BOOL(result);
          }

          return callSuper(PY_TYPE(PorterStemmer), (PyObject *) self, "stem", args, 2);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queries/function/valuesource/IfFunction.h"
#include "java/util/Map.h"
#include "org/apache/lucene/index/LeafReaderContext.h"
#include "org/apache/lucene/search/IndexSearcher.h"
#include "org/apache/lucene/queries/function/FunctionValues.h"
#include "java/lang/Class.h"
#include "java/lang/Object.h"
#include "java/lang/String.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/queries/function/ValueSource.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queries {
        namespace function {
          namespace valuesource {

            ::java::lang::Class *IfFunction::class$ = NULL;
            jmethodID *IfFunction::mids$ = NULL;
            bool IfFunction::live$ = false;

            jclass IfFunction::initializeClass(bool getOnly)
            {
              if (getOnly)
                return (jclass) (live$ ? class$->this$ : NULL);
              if (class$ == NULL)
              {
                jclass cls = (jclass) env->findClass("org/apache/lucene/queries/function/valuesource/IfFunction");

                mids$ = new jmethodID[max_mid];
                mids$[mid_init$_8dd37325f7cb7128] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/queries/function/ValueSource;Lorg/apache/lucene/queries/function/ValueSource;Lorg/apache/lucene/queries/function/ValueSource;)V");
                mids$[mid_createWeight_69d322032c5ae159] = env->getMethodID(cls, "createWeight", "(Ljava/util/Map;Lorg/apache/lucene/search/IndexSearcher;)V");
                mids$[mid_description_db9b55ba01e03e4b] = env->getMethodID(cls, "description", "()Ljava/lang/String;");
                mids$[mid_equals_8b72f2dcdde6fd1d] = env->getMethodID(cls, "equals", "(Ljava/lang/Object;)Z");
                mids$[mid_getValues_ede8eccd3e97f32c] = env->getMethodID(cls, "getValues", "(Ljava/util/Map;Lorg/apache/lucene/index/LeafReaderContext;)Lorg/apache/lucene/queries/function/FunctionValues;");
                mids$[mid_hashCode_9972fcc56b44e79d] = env->getMethodID(cls, "hashCode", "()I");

                class$ = new ::java::lang::Class(cls);
                live$ = true;
              }
              return (jclass) class$->this$;
            }

            IfFunction::IfFunction(const ::org::apache::lucene::queries::function::ValueSource & a0, const ::org::apache::lucene::queries::function::ValueSource & a1, const ::org::apache::lucene::queries::function::ValueSource & a2) : ::org::apache::lucene::queries::function::valuesource::BoolFunction(env->newObject(initializeClass, &mids$, mid_init$_8dd37325f7cb7128, a0.this$, a1.this$, a2.this$)) {}

            void IfFunction::createWeight(const ::java::util::Map & a0, const ::org::apache::lucene::search::IndexSearcher & a1) const
            {
              env->callVoidMethod(this$, mids$[mid_createWeight_69d322032c5ae159], a0.this$, a1.this$);
            }

            ::java::lang::String IfFunction::description() const
            {
              return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_description_db9b55ba01e03e4b]));
            }

            jboolean IfFunction::equals(const ::java::lang::Object & a0) const
            {
              return env->callBooleanMethod(this$, mids$[mid_equals_8b72f2dcdde6fd1d], a0.this$);
            }

            ::org::apache::lucene::queries::function::FunctionValues IfFunction::getValues(const ::java::util::Map & a0, const ::org::apache::lucene::index::LeafReaderContext & a1) const
            {
              return ::org::apache::lucene::queries::function::FunctionValues(env->callObjectMethod(this$, mids$[mid_getValues_ede8eccd3e97f32c], a0.this$, a1.this$));
            }

            jint IfFunction::hashCode() const
            {
              return env->callIntMethod(this$, mids$[mid_hashCode_9972fcc56b44e79d]);
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queries {
        namespace function {
          namespace valuesource {
            static PyObject *t_IfFunction_cast_(PyTypeObject *type, PyObject *arg);
            static PyObject *t_IfFunction_instance_(PyTypeObject *type, PyObject *arg);
            static int t_IfFunction_init_(t_IfFunction *self, PyObject *args, PyObject *kwds);
            static PyObject *t_IfFunction_createWeight(t_IfFunction *self, PyObject *args);
            static PyObject *t_IfFunction_description(t_IfFunction *self, PyObject *args);
            static PyObject *t_IfFunction_equals(t_IfFunction *self, PyObject *args);
            static PyObject *t_IfFunction_getValues(t_IfFunction *self, PyObject *args);
            static PyObject *t_IfFunction_hashCode(t_IfFunction *self, PyObject *args);

            static PyMethodDef t_IfFunction__methods_[] = {
              DECLARE_METHOD(t_IfFunction, cast_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_IfFunction, instance_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_IfFunction, createWeight, METH_VARARGS),
              DECLARE_METHOD(t_IfFunction, description, METH_VARARGS),
              DECLARE_METHOD(t_IfFunction, equals, METH_VARARGS),
              DECLARE_METHOD(t_IfFunction, getValues, METH_VARARGS),
              DECLARE_METHOD(t_IfFunction, hashCode, METH_VARARGS),
              { NULL, NULL, 0, NULL }
            };

            static PyType_Slot PY_TYPE_SLOTS(IfFunction)[] = {
              { Py_tp_methods, t_IfFunction__methods_ },
              { Py_tp_init, (void *) t_IfFunction_init_ },
              { 0, NULL }
            };

            static PyType_Def *PY_TYPE_BASES(IfFunction)[] = {
              &PY_TYPE_DEF(::org::apache::lucene::queries::function::valuesource::BoolFunction),
              NULL
            };

            DEFINE_TYPE(IfFunction, t_IfFunction, IfFunction);

            void t_IfFunction::install(PyObject *module)
            {
              installType(&PY_TYPE(IfFunction), &PY_TYPE_DEF(IfFunction), module, "IfFunction", 0);
            }

            void t_IfFunction::initialize(PyObject *module)
            {
              PyObject_SetAttrString((PyObject *) PY_TYPE(IfFunction), "class_", make_descriptor(IfFunction::initializeClass, 1));
              PyObject_SetAttrString((PyObject *) PY_TYPE(IfFunction), "wrapfn_", make_descriptor(t_IfFunction::wrap_jobject));
              PyObject_SetAttrString((PyObject *) PY_TYPE(IfFunction), "boxfn_", make_descriptor(boxObject));
            }

            static PyObject *t_IfFunction_cast_(PyTypeObject *type, PyObject *arg)
            {
              if (!(arg = castCheck(arg, IfFunction::initializeClass, 1)))
                return NULL;
              return t_IfFunction::wrap_Object(IfFunction(((t_IfFunction *) arg)->object.this$));
            }
            static PyObject *t_IfFunction_instance_(PyTypeObject *type, PyObject *arg)
            {
              if (!castCheck(arg, IfFunction::initializeClass, 0))
                Py_RETURN_FALSE;
              Py_RETURN_TRUE;
            }

            static int t_IfFunction_init_(t_IfFunction *self, PyObject *args, PyObject *kwds)
            {
              ::org::apache::lucene::queries::function::ValueSource a0((jobject) NULL);
              ::org::apache::lucene::queries::function::ValueSource a1((jobject) NULL);
              ::org::apache::lucene::queries::function::ValueSource a2((jobject) NULL);
              IfFunction object((jobject) NULL);

              if (!parseArgs(args, "kkk", ::org::apache::lucene::queries::function::ValueSource::initializeClass, ::org::apache::lucene::queries::function::ValueSource::initializeClass, ::org::apache::lucene::queries::function::ValueSource::initializeClass, &a0, &a1, &a2))
              {
                INT_CALL(object = IfFunction(a0, a1, a2));
                self->object = object;
              }
              else
              {
                PyErr_SetArgsError((PyObject *) self, "__init__", args);
                return -1;
              }

              return 0;
            }

            static PyObject *t_IfFunction_createWeight(t_IfFunction *self, PyObject *args)
            {
              ::java::util::Map a0((jobject) NULL);
              PyTypeObject **p0;
              ::org::apache::lucene::search::IndexSearcher a1((jobject) NULL);

              if (!parseArgs(args, "Kk", ::java::util::Map::initializeClass, ::org::apache::lucene::search::IndexSearcher::initializeClass, &a0, &p0, ::java::util::t_Map::parameters_, &a1))
              {
                OBJ_CALL(self->object.createWeight(a0, a1));
                Py_RETURN_NONE;
              }

              return callSuper(PY_TYPE(IfFunction), (PyObject *) self, "createWeight", args, 2);
            }

            static PyObject *t_IfFunction_description(t_IfFunction *self, PyObject *args)
            {
              ::java::lang::String result((jobject) NULL);

              if (!parseArgs(args, ""))
              {
                OBJ_CALL(result = self->object.description());
                return j2p(result);
              }

              return callSuper(PY_TYPE(IfFunction), (PyObject *) self, "description", args, 2);
            }

            static PyObject *t_IfFunction_equals(t_IfFunction *self, PyObject *args)
            {
              ::java::lang::Object a0((jobject) NULL);
              jboolean result;

              if (!parseArgs(args, "o", &a0))
              {
                OBJ_CALL(result = self->object.equals(a0));
                Py_RETURN_BOOL(result);
              }

              return callSuper(PY_TYPE(IfFunction), (PyObject *) self, "equals", args, 2);
            }

            static PyObject *t_IfFunction_getValues(t_IfFunction *self, PyObject *args)
            {
              ::java::util::Map a0((jobject) NULL);
              PyTypeObject **p0;
              ::org::apache::lucene::index::LeafReaderContext a1((jobject) NULL);
              ::org::apache::lucene::queries::function::FunctionValues result((jobject) NULL);

              if (!parseArgs(args, "Kk", ::java::util::Map::initializeClass, ::org::apache::lucene::index::LeafReaderContext::initializeClass, &a0, &p0, ::java::util::t_Map::parameters_, &a1))
              {
                OBJ_CALL(result = self->object.getValues(a0, a1));
                return ::org::apache::lucene::queries::function::t_FunctionValues::wrap_Object(result);
              }

              return callSuper(PY_TYPE(IfFunction), (PyObject *) self, "getValues", args, 2);
            }

            static PyObject *t_IfFunction_hashCode(t_IfFunction *self, PyObject *args)
            {
              jint result;

              if (!parseArgs(args, ""))
              {
                OBJ_CALL(result = self->object.hashCode());
                return PyLong_FromLong((long) result);
              }

              return callSuper(PY_TYPE(IfFunction), (PyObject *) self, "hashCode", args, 2);
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/util/IntroSelector.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {

        ::java::lang::Class *IntroSelector::class$ = NULL;
        jmethodID *IntroSelector::mids$ = NULL;
        bool IntroSelector::live$ = false;

        jclass IntroSelector::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/util/IntroSelector");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_f2cc1bce94666404] = env->getMethodID(cls, "<init>", "()V");
            mids$[mid_select_db3e97653d3683f3] = env->getMethodID(cls, "select", "(III)V");
            mids$[mid_comparePivot_1e143afe1894d213] = env->getMethodID(cls, "comparePivot", "(I)I");
            mids$[mid_setPivot_040c4cd0390c5aff] = env->getMethodID(cls, "setPivot", "(I)V");
            mids$[mid_compare_57a58545eba514db] = env->getMethodID(cls, "compare", "(II)I");

            class$ = new ::java::lang::Class(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        IntroSelector::IntroSelector() : ::org::apache::lucene::util::Selector(env->newObject(initializeClass, &mids$, mid_init$_f2cc1bce94666404)) {}

        void IntroSelector::select(jint a0, jint a1, jint a2) const
        {
          env->callVoidMethod(this$, mids$[mid_select_db3e97653d3683f3], a0, a1, a2);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        static PyObject *t_IntroSelector_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_IntroSelector_instance_(PyTypeObject *type, PyObject *arg);
        static int t_IntroSelector_init_(t_IntroSelector *self, PyObject *args, PyObject *kwds);
        static PyObject *t_IntroSelector_select(t_IntroSelector *self, PyObject *args);

        static PyMethodDef t_IntroSelector__methods_[] = {
          DECLARE_METHOD(t_IntroSelector, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_IntroSelector, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_IntroSelector, select, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        static PyType_Slot PY_TYPE_SLOTS(IntroSelector)[] = {
          { Py_tp_methods, t_IntroSelector__methods_ },
          { Py_tp_init, (void *) t_IntroSelector_init_ },
          { 0, NULL }
        };

        static PyType_Def *PY_TYPE_BASES(IntroSelector)[] = {
          &PY_TYPE_DEF(::org::apache::lucene::util::Selector),
          NULL
        };

        DEFINE_TYPE(IntroSelector, t_IntroSelector, IntroSelector);

        void t_IntroSelector::install(PyObject *module)
        {
          installType(&PY_TYPE(IntroSelector), &PY_TYPE_DEF(IntroSelector), module, "IntroSelector", 0);
        }

        void t_IntroSelector::initialize(PyObject *module)
        {
          PyObject_SetAttrString((PyObject *) PY_TYPE(IntroSelector), "class_", make_descriptor(IntroSelector::initializeClass, 1));
          PyObject_SetAttrString((PyObject *) PY_TYPE(IntroSelector), "wrapfn_", make_descriptor(t_IntroSelector::wrap_jobject));
          PyObject_SetAttrString((PyObject *) PY_TYPE(IntroSelector), "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_IntroSelector_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, IntroSelector::initializeClass, 1)))
            return NULL;
          return t_IntroSelector::wrap_Object(IntroSelector(((t_IntroSelector *) arg)->object.this$));
        }
        static PyObject *t_IntroSelector_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, IntroSelector::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_IntroSelector_init_(t_IntroSelector *self, PyObject *args, PyObject *kwds)
        {
          IntroSelector object((jobject) NULL);

          INT_CALL(object = IntroSelector());
          self->object = object;

          return 0;
        }

        static PyObject *t_IntroSelector_select(t_IntroSelector *self, PyObject *args)
        {
          jint a0;
          jint a1;
          jint a2;

          if (!parseArgs(args, "III", &a0, &a1, &a2))
          {
            OBJ_CALL(self->object.select(a0, a1, a2));
            Py_RETURN_NONE;
          }

          return callSuper(PY_TYPE(IntroSelector), (PyObject *) self, "select", args, 2);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/bn/BengaliAnalyzer.h"
#include "java/lang/String.h"
#include "org/apache/lucene/analysis/CharArraySet.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace bn {

          ::java::lang::Class *BengaliAnalyzer::class$ = NULL;
          jmethodID *BengaliAnalyzer::mids$ = NULL;
          bool BengaliAnalyzer::live$ = false;
          ::java::lang::String *BengaliAnalyzer::DEFAULT_STOPWORD_FILE = NULL;

          jclass BengaliAnalyzer::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/bn/BengaliAnalyzer");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_f2cc1bce94666404] = env->getMethodID(cls, "<init>", "()V");
              mids$[mid_init$_09c0eb6a436581d3] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/analysis/CharArraySet;)V");
              mids$[mid_init$_b66a15b6e54e4218] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/analysis/CharArraySet;Lorg/apache/lucene/analysis/CharArraySet;)V");
              mids$[mid_getDefaultStopSet_7aec8e69a9807ca1] = env->getStaticMethodID(cls, "getDefaultStopSet", "()Lorg/apache/lucene/analysis/CharArraySet;");
              mids$[mid_createComponents_c22fd244b0553c1e] = env->getMethodID(cls, "createComponents", "(Ljava/lang/String;)Lorg/apache/lucene/analysis/Analyzer$TokenStreamComponents;");
              mids$[mid_normalize_e597989422f66fcd] = env->getMethodID(cls, "normalize", "(Ljava/lang/String;Lorg/apache/lucene/analysis/TokenStream;)Lorg/apache/lucene/analysis/TokenStream;");

              class$ = new ::java::lang::Class(cls);
              cls = (jclass) class$->this$;

              DEFAULT_STOPWORD_FILE = new ::java::lang::String(env->getStaticObjectField(cls, "DEFAULT_STOPWORD_FILE", "Ljava/lang/String;"));
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          BengaliAnalyzer::BengaliAnalyzer() : ::org::apache::lucene::analysis::StopwordAnalyzerBase(env->newObject(initializeClass, &mids$, mid_init$_f2cc1bce94666404)) {}

          BengaliAnalyzer::BengaliAnalyzer(const ::org::apache::lucene::analysis::CharArraySet & a0) : ::org::apache::lucene::analysis::StopwordAnalyzerBase(env->newObject(initializeClass, &mids$, mid_init$_09c0eb6a436581d3, a0.this$)) {}

          BengaliAnalyzer::BengaliAnalyzer(const ::org::apache::lucene::analysis::CharArraySet & a0, const ::org::apache::lucene::analysis::CharArraySet & a1) : ::org::apache::lucene::analysis::StopwordAnalyzerBase(env->newObject(initializeClass, &mids$, mid_init$_b66a15b6e54e4218, a0.this$, a1.this$)) {}

          ::org::apache::lucene::analysis::CharArraySet BengaliAnalyzer::getDefaultStopSet()
          {
            jclass cls = env->getClass(initializeClass);
            return ::org::apache::lucene::analysis::CharArraySet(env->callStaticObjectMethod(cls, mids$[mid_getDefaultStopSet_7aec8e69a9807ca1]));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace bn {
          static PyObject *t_BengaliAnalyzer_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_BengaliAnalyzer_instance_(PyTypeObject *type, PyObject *arg);
          static int t_BengaliAnalyzer_init_(t_BengaliAnalyzer *self, PyObject *args, PyObject *kwds);
          static PyObject *t_BengaliAnalyzer_getDefaultStopSet(PyTypeObject *type);
          static PyObject *t_BengaliAnalyzer_get__defaultStopSet(t_BengaliAnalyzer *self, void *data);
          static PyGetSetDef t_BengaliAnalyzer__fields_[] = {
            DECLARE_GET_FIELD(t_BengaliAnalyzer, defaultStopSet),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_BengaliAnalyzer__methods_[] = {
            DECLARE_METHOD(t_BengaliAnalyzer, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_BengaliAnalyzer, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_BengaliAnalyzer, getDefaultStopSet, METH_NOARGS | METH_CLASS),
            { NULL, NULL, 0, NULL }
          };

          static PyType_Slot PY_TYPE_SLOTS(BengaliAnalyzer)[] = {
            { Py_tp_methods, t_BengaliAnalyzer__methods_ },
            { Py_tp_init, (void *) t_BengaliAnalyzer_init_ },
            { Py_tp_getset, t_BengaliAnalyzer__fields_ },
            { 0, NULL }
          };

          static PyType_Def *PY_TYPE_BASES(BengaliAnalyzer)[] = {
            &PY_TYPE_DEF(::org::apache::lucene::analysis::StopwordAnalyzerBase),
            NULL
          };

          DEFINE_TYPE(BengaliAnalyzer, t_BengaliAnalyzer, BengaliAnalyzer);

          void t_BengaliAnalyzer::install(PyObject *module)
          {
            installType(&PY_TYPE(BengaliAnalyzer), &PY_TYPE_DEF(BengaliAnalyzer), module, "BengaliAnalyzer", 0);
          }

          void t_BengaliAnalyzer::initialize(PyObject *module)
          {
            PyObject_SetAttrString((PyObject *) PY_TYPE(BengaliAnalyzer), "class_", make_descriptor(BengaliAnalyzer::initializeClass, 1));
            PyObject_SetAttrString((PyObject *) PY_TYPE(BengaliAnalyzer), "wrapfn_", make_descriptor(t_BengaliAnalyzer::wrap_jobject));
            PyObject_SetAttrString((PyObject *) PY_TYPE(BengaliAnalyzer), "boxfn_", make_descriptor(boxObject));
            env->getClass(BengaliAnalyzer::initializeClass);
            PyObject_SetAttrString((PyObject *) PY_TYPE(BengaliAnalyzer), "DEFAULT_STOPWORD_FILE", make_descriptor(j2p(*BengaliAnalyzer::DEFAULT_STOPWORD_FILE)));
          }

          static PyObject *t_BengaliAnalyzer_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, BengaliAnalyzer::initializeClass, 1)))
              return NULL;
            return t_BengaliAnalyzer::wrap_Object(BengaliAnalyzer(((t_BengaliAnalyzer *) arg)->object.this$));
          }
          static PyObject *t_BengaliAnalyzer_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, BengaliAnalyzer::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_BengaliAnalyzer_init_(t_BengaliAnalyzer *self, PyObject *args, PyObject *kwds)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 0:
              {
                BengaliAnalyzer object((jobject) NULL);

                INT_CALL(object = BengaliAnalyzer());
                self->object = object;
                break;
              }
             case 1:
              {
                ::org::apache::lucene::analysis::CharArraySet a0((jobject) NULL);
                PyTypeObject **p0;
                BengaliAnalyzer object((jobject) NULL);

                if (!parseArgs(args, "K", ::org::apache::lucene::analysis::CharArraySet::initializeClass, &a0, &p0, ::org::apache::lucene::analysis::t_CharArraySet::parameters_))
                {
                  INT_CALL(object = BengaliAnalyzer(a0));
                  self->object = object;
                  break;
                }
              }
              goto err;
             case 2:
              {
                ::org::apache::lucene::analysis::CharArraySet a0((jobject) NULL);
                PyTypeObject **p0;
                ::org::apache::lucene::analysis::CharArraySet a1((jobject) NULL);
                PyTypeObject **p1;
                BengaliAnalyzer object((jobject) NULL);

                if (!parseArgs(args, "KK", ::org::apache::lucene::analysis::CharArraySet::initializeClass, ::org::apache::lucene::analysis::CharArraySet::initializeClass, &a0, &p0, ::org::apache::lucene::analysis::t_CharArraySet::parameters_, &a1, &p1, ::org::apache::lucene::analysis::t_CharArraySet::parameters_))
                {
                  INT_CALL(object = BengaliAnalyzer(a0, a1));
                  self->object = object;
                  break;
                }
              }
             default:
             err:
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_BengaliAnalyzer_getDefaultStopSet(PyTypeObject *type)
          {
            ::org::apache::lucene::analysis::CharArraySet result((jobject) NULL);
            OBJ_CALL(result = ::org::apache::lucene::analysis::bn::BengaliAnalyzer::getDefaultStopSet());
            return ::org::apache::lucene::analysis::t_CharArraySet::wrap_Object(result);
          }

          static PyObject *t_BengaliAnalyzer_get__defaultStopSet(t_BengaliAnalyzer *self, void *data)
          {
            ::org::apache::lucene::analysis::CharArraySet value((jobject) NULL);
            OBJ_CALL(value = self->object.getDefaultStopSet());
            return ::org::apache::lucene::analysis::t_CharArraySet::wrap_Object(value);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/facet/StringValueFacetCounts.h"
#include "org/apache/lucene/facet/FacetResult.h"
#include "java/lang/Number.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/facet/FacetsCollector.h"
#include "org/apache/lucene/facet/StringDocValuesReaderState.h"
#include "java/lang/String.h"
#include "java/io/IOException.h"
#include "java/util/List.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace facet {

        ::java::lang::Class *StringValueFacetCounts::class$ = NULL;
        jmethodID *StringValueFacetCounts::mids$ = NULL;
        bool StringValueFacetCounts::live$ = false;

        jclass StringValueFacetCounts::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/facet/StringValueFacetCounts");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_a0b5b8983e46e2cc] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/facet/StringDocValuesReaderState;)V");
            mids$[mid_init$_e5c0788dfe92c019] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/facet/StringDocValuesReaderState;Lorg/apache/lucene/facet/FacetsCollector;)V");
            mids$[mid_getAllDims_d82aee015ceb4d93] = env->getMethodID(cls, "getAllDims", "(I)Ljava/util/List;");
            mids$[mid_getSpecificValue_aaf99af6028dc803] = env->getMethodID(cls, "getSpecificValue", "(Ljava/lang/String;[Ljava/lang/String;)Ljava/lang/Number;");
            mids$[mid_getTopChildren_8be156db8a3c742c] = env->getMethodID(cls, "getTopChildren", "(ILjava/lang/String;[Ljava/lang/String;)Lorg/apache/lucene/facet/FacetResult;");

            class$ = new ::java::lang::Class(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        StringValueFacetCounts::StringValueFacetCounts(const ::org::apache::lucene::facet::StringDocValuesReaderState & a0) : ::org::apache::lucene::facet::Facets(env->newObject(initializeClass, &mids$, mid_init$_a0b5b8983e46e2cc, a0.this$)) {}

        StringValueFacetCounts::StringValueFacetCounts(const ::org::apache::lucene::facet::StringDocValuesReaderState & a0, const ::org::apache::lucene::facet::FacetsCollector & a1) : ::org::apache::lucene::facet::Facets(env->newObject(initializeClass, &mids$, mid_init$_e5c0788dfe92c019, a0.this$, a1.this$)) {}

        ::java::util::List StringValueFacetCounts::getAllDims(jint a0) const
        {
          return ::java::util::List(env->callObjectMethod(this$, mids$[mid_getAllDims_d82aee015ceb4d93], a0));
        }

        ::java::lang::Number StringValueFacetCounts::getSpecificValue(const ::java::lang::String & a0, const JArray< ::java::lang::String > & a1) const
        {
          return ::java::lang::Number(env->callObjectMethod(this$, mids$[mid_getSpecificValue_aaf99af6028dc803], a0.this$, a1.this$));
        }

        ::org::apache::lucene::facet::FacetResult StringValueFacetCounts::getTopChildren(jint a0, const ::java::lang::String & a1, const JArray< ::java::lang::String > & a2) const
        {
          return ::org::apache::lucene::facet::FacetResult(env->callObjectMethod(this$, mids$[mid_getTopChildren_8be156db8a3c742c], a0, a1.this$, a2.this$));
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace facet {
        static PyObject *t_StringValueFacetCounts_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_StringValueFacetCounts_instance_(PyTypeObject *type, PyObject *arg);
        static int t_StringValueFacetCounts_init_(t_StringValueFacetCounts *self, PyObject *args, PyObject *kwds);
        static PyObject *t_StringValueFacetCounts_getAllDims(t_StringValueFacetCounts *self, PyObject *args);
        static PyObject *t_StringValueFacetCounts_getSpecificValue(t_StringValueFacetCounts *self, PyObject *args);
        static PyObject *t_StringValueFacetCounts_getTopChildren(t_StringValueFacetCounts *self, PyObject *args);

        static PyMethodDef t_StringValueFacetCounts__methods_[] = {
          DECLARE_METHOD(t_StringValueFacetCounts, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_StringValueFacetCounts, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_StringValueFacetCounts, getAllDims, METH_VARARGS),
          DECLARE_METHOD(t_StringValueFacetCounts, getSpecificValue, METH_VARARGS),
          DECLARE_METHOD(t_StringValueFacetCounts, getTopChildren, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        static PyType_Slot PY_TYPE_SLOTS(StringValueFacetCounts)[] = {
          { Py_tp_methods, t_StringValueFacetCounts__methods_ },
          { Py_tp_init, (void *) t_StringValueFacetCounts_init_ },
          { 0, NULL }
        };

        static PyType_Def *PY_TYPE_BASES(StringValueFacetCounts)[] = {
          &PY_TYPE_DEF(::org::apache::lucene::facet::Facets),
          NULL
        };

        DEFINE_TYPE(StringValueFacetCounts, t_StringValueFacetCounts, StringValueFacetCounts);

        void t_StringValueFacetCounts::install(PyObject *module)
        {
          installType(&PY_TYPE(StringValueFacetCounts), &PY_TYPE_DEF(StringValueFacetCounts), module, "StringValueFacetCounts", 0);
        }

        void t_StringValueFacetCounts::initialize(PyObject *module)
        {
          PyObject_SetAttrString((PyObject *) PY_TYPE(StringValueFacetCounts), "class_", make_descriptor(StringValueFacetCounts::initializeClass, 1));
          PyObject_SetAttrString((PyObject *) PY_TYPE(StringValueFacetCounts), "wrapfn_", make_descriptor(t_StringValueFacetCounts::wrap_jobject));
          PyObject_SetAttrString((PyObject *) PY_TYPE(StringValueFacetCounts), "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_StringValueFacetCounts_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, StringValueFacetCounts::initializeClass, 1)))
            return NULL;
          return t_StringValueFacetCounts::wrap_Object(StringValueFacetCounts(((t_StringValueFacetCounts *) arg)->object.this$));
        }
        static PyObject *t_StringValueFacetCounts_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, StringValueFacetCounts::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_StringValueFacetCounts_init_(t_StringValueFacetCounts *self, PyObject *args, PyObject *kwds)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 1:
            {
              ::org::apache::lucene::facet::StringDocValuesReaderState a0((jobject) NULL);
              StringValueFacetCounts object((jobject) NULL);

              if (!parseArgs(args, "k", ::org::apache::lucene::facet::StringDocValuesReaderState::initializeClass, &a0))
              {
                INT_CALL(object = StringValueFacetCounts(a0));
                self->object = object;
                break;
              }
            }
            goto err;
           case 2:
            {
              ::org::apache::lucene::facet::StringDocValuesReaderState a0((jobject) NULL);
              ::org::apache::lucene::facet::FacetsCollector a1((jobject) NULL);
              StringValueFacetCounts object((jobject) NULL);

              if (!parseArgs(args, "kk", ::org::apache::lucene::facet::StringDocValuesReaderState::initializeClass, ::org::apache::lucene::facet::FacetsCollector::initializeClass, &a0, &a1))
              {
                INT_CALL(object = StringValueFacetCounts(a0, a1));
                self->object = object;
                break;
              }
            }
           default:
           err:
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }

        static PyObject *t_StringValueFacetCounts_getAllDims(t_StringValueFacetCounts *self, PyObject *args)
        {
          jint a0;
          ::java::util::List result((jobject) NULL);

          if (!parseArgs(args, "I", &a0))
          {
            OBJ_CALL(result = self->object.getAllDims(a0));
            return ::java::util::t_List::wrap_Object(result, ::org::apache::lucene::facet::PY_TYPE(FacetResult));
          }

          return callSuper(PY_TYPE(StringValueFacetCounts), (PyObject *) self, "getAllDims", args, 2);
        }

        static PyObject *t_StringValueFacetCounts_getSpecificValue(t_StringValueFacetCounts *self, PyObject *args)
        {
          ::java::lang::String a0((jobject) NULL);
          JArray< ::java::lang::String > a1((jobject) NULL);
          ::java::lang::Number result((jobject) NULL);

          if (!parseArgs(args, "s[s", &a0, &a1))
          {
            OBJ_CALL(result = self->object.getSpecificValue(a0, a1));
            return ::java::lang::t_Number::wrap_Object(result);
          }

          return callSuper(PY_TYPE(StringValueFacetCounts), (PyObject *) self, "getSpecificValue", args, 2);
        }

        static PyObject *t_StringValueFacetCounts_getTopChildren(t_StringValueFacetCounts *self, PyObject *args)
        {
          jint a0;
          ::java::lang::String a1((jobject) NULL);
          JArray< ::java::lang::String > a2((jobject) NULL);
          ::org::apache::lucene::facet::FacetResult result((jobject) NULL);

          if (!parseArgs(args, "Is[s", &a0, &a1, &a2))
          {
            OBJ_CALL(result = self->object.getTopChildren(a0, a1, a2));
            return ::org::apache::lucene::facet::t_FacetResult::wrap_Object(result);
          }

          return callSuper(PY_TYPE(StringValueFacetCounts), (PyObject *) self, "getTopChildren", args, 2);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/codecs/simpletext/SimpleTextBKDReader$IntersectState.h"
#include "org/apache/lucene/index/PointValues$IntersectVisitor.h"
#include "org/apache/lucene/store/IndexInput.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace codecs {
        namespace simpletext {

          ::java::lang::Class *SimpleTextBKDReader$IntersectState::class$ = NULL;
          jmethodID *SimpleTextBKDReader$IntersectState::mids$ = NULL;
          bool SimpleTextBKDReader$IntersectState::live$ = false;

          jclass SimpleTextBKDReader$IntersectState::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/codecs/simpletext/SimpleTextBKDReader$IntersectState");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_3720f09d232d6bd8] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/store/IndexInput;IIILorg/apache/lucene/index/PointValues$IntersectVisitor;)V");

              class$ = new ::java::lang::Class(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          SimpleTextBKDReader$IntersectState::SimpleTextBKDReader$IntersectState(const ::org::apache::lucene::store::IndexInput & a0, jint a1, jint a2, jint a3, const ::org::apache::lucene::index::PointValues$IntersectVisitor & a4) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_3720f09d232d6bd8, a0.this$, a1, a2, a3, a4.this$)) {}
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace codecs {
        namespace simpletext {
          static PyObject *t_SimpleTextBKDReader$IntersectState_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_SimpleTextBKDReader$IntersectState_instance_(PyTypeObject *type, PyObject *arg);
          static int t_SimpleTextBKDReader$IntersectState_init_(t_SimpleTextBKDReader$IntersectState *self, PyObject *args, PyObject *kwds);

          static PyMethodDef t_SimpleTextBKDReader$IntersectState__methods_[] = {
            DECLARE_METHOD(t_SimpleTextBKDReader$IntersectState, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_SimpleTextBKDReader$IntersectState, instance_, METH_O | METH_CLASS),
            { NULL, NULL, 0, NULL }
          };

          static PyType_Slot PY_TYPE_SLOTS(SimpleTextBKDReader$IntersectState)[] = {
            { Py_tp_methods, t_SimpleTextBKDReader$IntersectState__methods_ },
            { Py_tp_init, (void *) t_SimpleTextBKDReader$IntersectState_init_ },
            { 0, NULL }
          };

          static PyType_Def *PY_TYPE_BASES(SimpleTextBKDReader$IntersectState)[] = {
            &PY_TYPE_DEF(::java::lang::Object),
            NULL
          };

          DEFINE_TYPE(SimpleTextBKDReader$IntersectState, t_SimpleTextBKDReader$IntersectState, SimpleTextBKDReader$IntersectState);

          void t_SimpleTextBKDReader$IntersectState::install(PyObject *module)
          {
            installType(&PY_TYPE(SimpleTextBKDReader$IntersectState), &PY_TYPE_DEF(SimpleTextBKDReader$IntersectState), module, "SimpleTextBKDReader$IntersectState", 0);
          }

          void t_SimpleTextBKDReader$IntersectState::initialize(PyObject *module)
          {
            PyObject_SetAttrString((PyObject *) PY_TYPE(SimpleTextBKDReader$IntersectState), "class_", make_descriptor(SimpleTextBKDReader$IntersectState::initializeClass, 1));
            PyObject_SetAttrString((PyObject *) PY_TYPE(SimpleTextBKDReader$IntersectState), "wrapfn_", make_descriptor(t_SimpleTextBKDReader$IntersectState::wrap_jobject));
            PyObject_SetAttrString((PyObject *) PY_TYPE(SimpleTextBKDReader$IntersectState), "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_SimpleTextBKDReader$IntersectState_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, SimpleTextBKDReader$IntersectState::initializeClass, 1)))
              return NULL;
            return t_SimpleTextBKDReader$IntersectState::wrap_Object(SimpleTextBKDReader$IntersectState(((t_SimpleTextBKDReader$IntersectState *) arg)->object.this$));
          }
          static PyObject *t_SimpleTextBKDReader$IntersectState_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, SimpleTextBKDReader$IntersectState::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_SimpleTextBKDReader$IntersectState_init_(t_SimpleTextBKDReader$IntersectState *self, PyObject *args, PyObject *kwds)
          {
            ::org::apache::lucene::store::IndexInput a0((jobject) NULL);
            jint a1;
            jint a2;
            jint a3;
            ::org::apache::lucene::index::PointValues$IntersectVisitor a4((jobject) NULL);
            SimpleTextBKDReader$IntersectState object((jobject) NULL);

            if (!parseArgs(args, "kIIIk", ::org::apache::lucene::store::IndexInput::initializeClass, ::org::apache::lucene::index::PointValues$IntersectVisitor::initializeClass, &a0, &a1, &a2, &a3, &a4))
            {
              INT_CALL(object = SimpleTextBKDReader$IntersectState(a0, a1, a2, a3, a4));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/DocValuesStats$NumericDocValuesStats.h"
#include "java/lang/Number.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {

        ::java::lang::Class *DocValuesStats$NumericDocValuesStats::class$ = NULL;
        jmethodID *DocValuesStats$NumericDocValuesStats::mids$ = NULL;
        bool DocValuesStats$NumericDocValuesStats::live$ = false;

        jclass DocValuesStats$NumericDocValuesStats::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/search/DocValuesStats$NumericDocValuesStats");

            mids$ = new jmethodID[max_mid];
            mids$[mid_mean_8c74b787998ce4bc] = env->getMethodID(cls, "mean", "()D");
            mids$[mid_stdev_8c74b787998ce4bc] = env->getMethodID(cls, "stdev", "()D");
            mids$[mid_sum_f5813404cc5e3a1e] = env->getMethodID(cls, "sum", "()Ljava/lang/Number;");
            mids$[mid_variance_8c74b787998ce4bc] = env->getMethodID(cls, "variance", "()D");
            mids$[mid_hasValue_a1d30e1ee40c89a2] = env->getMethodID(cls, "hasValue", "(I)Z");
            mids$[mid_init_07cae694a8cf1c6d] = env->getMethodID(cls, "init", "(Lorg/apache/lucene/index/LeafReaderContext;)Z");

            class$ = new ::java::lang::Class(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        jdouble DocValuesStats$NumericDocValuesStats::mean() const
        {
          return env->callDoubleMethod(this$, mids$[mid_mean_8c74b787998ce4bc]);
        }

        jdouble DocValuesStats$NumericDocValuesStats::stdev() const
        {
          return env->callDoubleMethod(this$, mids$[mid_stdev_8c74b787998ce4bc]);
        }

        ::java::lang::Number DocValuesStats$NumericDocValuesStats::sum() const
        {
          return ::java::lang::Number(env->callObjectMethod(this$, mids$[mid_sum_f5813404cc5e3a1e]));
        }

        jdouble DocValuesStats$NumericDocValuesStats::variance() const
        {
          return env->callDoubleMethod(this$, mids$[mid_variance_8c74b787998ce4bc]);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        static PyObject *t_DocValuesStats$NumericDocValuesStats_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_DocValuesStats$NumericDocValuesStats_instance_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_DocValuesStats$NumericDocValuesStats_of_(t_DocValuesStats$NumericDocValuesStats *self, PyObject *args);
        static PyObject *t_DocValuesStats$NumericDocValuesStats_mean(t_DocValuesStats$NumericDocValuesStats *self);
        static PyObject *t_DocValuesStats$NumericDocValuesStats_stdev(t_DocValuesStats$NumericDocValuesStats *self);
        static PyObject *t_DocValuesStats$NumericDocValuesStats_sum(t_DocValuesStats$NumericDocValuesStats *self);
        static PyObject *t_DocValuesStats$NumericDocValuesStats_variance(t_DocValuesStats$NumericDocValuesStats *self);
        static PyObject *t_DocValuesStats$NumericDocValuesStats_get__parameters_(t_DocValuesStats$NumericDocValuesStats *self, void *data);
        static PyGetSetDef t_DocValuesStats$NumericDocValuesStats__fields_[] = {
          DECLARE_GET_FIELD(t_DocValuesStats$NumericDocValuesStats, parameters_),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_DocValuesStats$NumericDocValuesStats__methods_[] = {
          DECLARE_METHOD(t_DocValuesStats$NumericDocValuesStats, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_DocValuesStats$NumericDocValuesStats, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_DocValuesStats$NumericDocValuesStats, of_, METH_VARARGS),
          DECLARE_METHOD(t_DocValuesStats$NumericDocValuesStats, mean, METH_NOARGS),
          DECLARE_METHOD(t_DocValuesStats$NumericDocValuesStats, stdev, METH_NOARGS),
          DECLARE_METHOD(t_DocValuesStats$NumericDocValuesStats, sum, METH_NOARGS),
          DECLARE_METHOD(t_DocValuesStats$NumericDocValuesStats, variance, METH_NOARGS),
          { NULL, NULL, 0, NULL }
        };

        static PyType_Slot PY_TYPE_SLOTS(DocValuesStats$NumericDocValuesStats)[] = {
          { Py_tp_methods, t_DocValuesStats$NumericDocValuesStats__methods_ },
          { Py_tp_init, (void *) abstract_init },
          { Py_tp_getset, t_DocValuesStats$NumericDocValuesStats__fields_ },
          { 0, NULL }
        };

        static PyType_Def *PY_TYPE_BASES(DocValuesStats$NumericDocValuesStats)[] = {
          &PY_TYPE_DEF(::org::apache::lucene::search::DocValuesStats),
          NULL
        };

        DEFINE_TYPE(DocValuesStats$NumericDocValuesStats, t_DocValuesStats$NumericDocValuesStats, DocValuesStats$NumericDocValuesStats);
        PyObject *t_DocValuesStats$NumericDocValuesStats::wrap_Object(const DocValuesStats$NumericDocValuesStats& object, PyTypeObject *p0)
        {
          PyObject *obj = t_DocValuesStats$NumericDocValuesStats::wrap_Object(object);
          if (obj != NULL && obj != Py_None)
          {
            t_DocValuesStats$NumericDocValuesStats *self = (t_DocValuesStats$NumericDocValuesStats *) obj;
            self->parameters[0] = p0;
          }
          return obj;
        }

        PyObject *t_DocValuesStats$NumericDocValuesStats::wrap_jobject(const jobject& object, PyTypeObject *p0)
        {
          PyObject *obj = t_DocValuesStats$NumericDocValuesStats::wrap_jobject(object);
          if (obj != NULL && obj != Py_None)
          {
            t_DocValuesStats$NumericDocValuesStats *self = (t_DocValuesStats$NumericDocValuesStats *) obj;
            self->parameters[0] = p0;
          }
          return obj;
        }

        void t_DocValuesStats$NumericDocValuesStats::install(PyObject *module)
        {
          installType(&PY_TYPE(DocValuesStats$NumericDocValuesStats), &PY_TYPE_DEF(DocValuesStats$NumericDocValuesStats), module, "DocValuesStats$NumericDocValuesStats", 0);
        }

        void t_DocValuesStats$NumericDocValuesStats::initialize(PyObject *module)
        {
          PyObject_SetAttrString((PyObject *) PY_TYPE(DocValuesStats$NumericDocValuesStats), "class_", make_descriptor(DocValuesStats$NumericDocValuesStats::initializeClass, 1));
          PyObject_SetAttrString((PyObject *) PY_TYPE(DocValuesStats$NumericDocValuesStats), "wrapfn_", make_descriptor(t_DocValuesStats$NumericDocValuesStats::wrap_jobject));
          PyObject_SetAttrString((PyObject *) PY_TYPE(DocValuesStats$NumericDocValuesStats), "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_DocValuesStats$NumericDocValuesStats_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, DocValuesStats$NumericDocValuesStats::initializeClass, 1)))
            return NULL;
          return t_DocValuesStats$NumericDocValuesStats::wrap_Object(DocValuesStats$NumericDocValuesStats(((t_DocValuesStats$NumericDocValuesStats *) arg)->object.this$));
        }
        static PyObject *t_DocValuesStats$NumericDocValuesStats_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, DocValuesStats$NumericDocValuesStats::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static PyObject *t_DocValuesStats$NumericDocValuesStats_of_(t_DocValuesStats$NumericDocValuesStats *self, PyObject *args)
        {
          if (!parseArg(args, "T", 1, &(self->parameters)))
            Py_RETURN_SELF;
          return PyErr_SetArgsError((PyObject *) self, "of_", args);
        }

        static PyObject *t_DocValuesStats$NumericDocValuesStats_mean(t_DocValuesStats$NumericDocValuesStats *self)
        {
          jdouble result;
          OBJ_CALL(result = self->object.mean());
          return PyFloat_FromDouble((double) result);
        }

        static PyObject *t_DocValuesStats$NumericDocValuesStats_stdev(t_DocValuesStats$NumericDocValuesStats *self)
        {
          jdouble result;
          OBJ_CALL(result = self->object.stdev());
          return PyFloat_FromDouble((double) result);
        }

        static PyObject *t_DocValuesStats$NumericDocValuesStats_sum(t_DocValuesStats$NumericDocValuesStats *self)
        {
          ::java::lang::Number result((jobject) NULL);
          OBJ_CALL(result = self->object.sum());
          return self->parameters[0] != NULL ? wrapType(self->parameters[0], result.this$) : ::java::lang::t_Number::wrap_Object(result);
        }

        static PyObject *t_DocValuesStats$NumericDocValuesStats_variance(t_DocValuesStats$NumericDocValuesStats *self)
        {
          jdouble result;
          OBJ_CALL(result = self->object.variance());
          return PyFloat_FromDouble((double) result);
        }
        static PyObject *t_DocValuesStats$NumericDocValuesStats_get__parameters_(t_DocValuesStats$NumericDocValuesStats *self, void *data)
        {
          return typeParameters(self->parameters, sizeof(self->parameters));
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/MultiCollectorManager.h"
#include "org/apache/lucene/search/MultiCollectorManager$Collectors.h"
#include "java/util/Collection.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/search/CollectorManager.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/search/Collector.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {

        ::java::lang::Class *MultiCollectorManager::class$ = NULL;
        jmethodID *MultiCollectorManager::mids$ = NULL;
        bool MultiCollectorManager::live$ = false;

        jclass MultiCollectorManager::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/search/MultiCollectorManager");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_37fcff2671f4a255] = env->getMethodID(cls, "<init>", "([Lorg/apache/lucene/search/CollectorManager;)V");
            mids$[mid_newCollector_ce212662985657cd] = env->getMethodID(cls, "newCollector", "()Lorg/apache/lucene/search/MultiCollectorManager$Collectors;");
            mids$[mid_reduce_90c399354b696e32] = env->getMethodID(cls, "reduce", "(Ljava/util/Collection;)[Ljava/lang/Object;");

            class$ = new ::java::lang::Class(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        MultiCollectorManager::MultiCollectorManager(const JArray< ::org::apache::lucene::search::CollectorManager > & a0) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_37fcff2671f4a255, a0.this$)) {}

        ::org::apache::lucene::search::MultiCollectorManager$Collectors MultiCollectorManager::newCollector() const
        {
          return ::org::apache::lucene::search::MultiCollectorManager$Collectors(env->callObjectMethod(this$, mids$[mid_newCollector_ce212662985657cd]));
        }

        JArray< ::java::lang::Object > MultiCollectorManager::reduce(const ::java::util::Collection & a0) const
        {
          return JArray< ::java::lang::Object >(env->callObjectMethod(this$, mids$[mid_reduce_90c399354b696e32], a0.this$));
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        static PyObject *t_MultiCollectorManager_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_MultiCollectorManager_instance_(PyTypeObject *type, PyObject *arg);
        static int t_MultiCollectorManager_init_(t_MultiCollectorManager *self, PyObject *args, PyObject *kwds);
        static PyObject *t_MultiCollectorManager_newCollector(t_MultiCollectorManager *self);
        static PyObject *t_MultiCollectorManager_reduce(t_MultiCollectorManager *self, PyObject *arg);

        static PyMethodDef t_MultiCollectorManager__methods_[] = {
          DECLARE_METHOD(t_MultiCollectorManager, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_MultiCollectorManager, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_MultiCollectorManager, newCollector, METH_NOARGS),
          DECLARE_METHOD(t_MultiCollectorManager, reduce, METH_O),
          { NULL, NULL, 0, NULL }
        };

        static PyType_Slot PY_TYPE_SLOTS(MultiCollectorManager)[] = {
          { Py_tp_methods, t_MultiCollectorManager__methods_ },
          { Py_tp_init, (void *) t_MultiCollectorManager_init_ },
          { 0, NULL }
        };

        static PyType_Def *PY_TYPE_BASES(MultiCollectorManager)[] = {
          &PY_TYPE_DEF(::java::lang::Object),
          NULL
        };

        DEFINE_TYPE(MultiCollectorManager, t_MultiCollectorManager, MultiCollectorManager);

        void t_MultiCollectorManager::install(PyObject *module)
        {
          installType(&PY_TYPE(MultiCollectorManager), &PY_TYPE_DEF(MultiCollectorManager), module, "MultiCollectorManager", 0);
        }

        void t_MultiCollectorManager::initialize(PyObject *module)
        {
          PyObject_SetAttrString((PyObject *) PY_TYPE(MultiCollectorManager), "class_", make_descriptor(MultiCollectorManager::initializeClass, 1));
          PyObject_SetAttrString((PyObject *) PY_TYPE(MultiCollectorManager), "wrapfn_", make_descriptor(t_MultiCollectorManager::wrap_jobject));
          PyObject_SetAttrString((PyObject *) PY_TYPE(MultiCollectorManager), "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_MultiCollectorManager_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, MultiCollectorManager::initializeClass, 1)))
            return NULL;
          return t_MultiCollectorManager::wrap_Object(MultiCollectorManager(((t_MultiCollectorManager *) arg)->object.this$));
        }
        static PyObject *t_MultiCollectorManager_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, MultiCollectorManager::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_MultiCollectorManager_init_(t_MultiCollectorManager *self, PyObject *args, PyObject *kwds)
        {
          JArray< ::org::apache::lucene::search::CollectorManager > a0((jobject) NULL);
          PyTypeObject **p0;
          MultiCollectorManager object((jobject) NULL);

          if (!parseArgs(args, "[K", ::org::apache::lucene::search::CollectorManager::initializeClass, &a0, &p0, ::org::apache::lucene::search::t_CollectorManager::parameters_))
          {
            INT_CALL(object = MultiCollectorManager(a0));
            self->object = object;
          }
          else
          {
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }

        static PyObject *t_MultiCollectorManager_newCollector(t_MultiCollectorManager *self)
        {
          ::org::apache::lucene::search::MultiCollectorManager$Collectors result((jobject) NULL);
          OBJ_CALL(result = self->object.newCollector());
          return ::org::apache::lucene::search::t_MultiCollectorManager$Collectors::wrap_Object(result);
        }

        static PyObject *t_MultiCollectorManager_reduce(t_MultiCollectorManager *self, PyObject *arg)
        {
          ::java::util::Collection a0((jobject) NULL);
          PyTypeObject **p0;
          JArray< ::java::lang::Object > result((jobject) NULL);

          if (!parseArg(arg, "K", ::java::util::Collection::initializeClass, &a0, &p0, ::java::util::t_Collection::parameters_))
          {
            OBJ_CALL(result = self->object.reduce(a0));
            return JArray<jobject>(result.this$).wrap(::java::lang::t_Object::wrap_jobject);
          }

          PyErr_SetArgsError((PyObject *) self, "reduce", arg);
          return NULL;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/spans/SpanWithinQuery.h"
#include "org/apache/lucene/search/spans/SpanQuery.h"
#include "org/apache/lucene/search/IndexSearcher.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/search/spans/SpanWeight.h"
#include "java/lang/String.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/search/ScoreMode.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace spans {

          ::java::lang::Class *SpanWithinQuery::class$ = NULL;
          jmethodID *SpanWithinQuery::mids$ = NULL;
          bool SpanWithinQuery::live$ = false;

          jclass SpanWithinQuery::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/search/spans/SpanWithinQuery");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_5a5cbe5f748d0153] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/search/spans/SpanQuery;Lorg/apache/lucene/search/spans/SpanQuery;)V");
              mids$[mid_createWeight_5baab4cc5ccc46b6] = env->getMethodID(cls, "createWeight", "(Lorg/apache/lucene/search/IndexSearcher;Lorg/apache/lucene/search/ScoreMode;F)Lorg/apache/lucene/search/spans/SpanWeight;");
              mids$[mid_toString_9bfa75c9f141b67f] = env->getMethodID(cls, "toString", "(Ljava/lang/String;)Ljava/lang/String;");

              class$ = new ::java::lang::Class(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          SpanWithinQuery::SpanWithinQuery(const ::org::apache::lucene::search::spans::SpanQuery & a0, const ::org::apache::lucene::search::spans::SpanQuery & a1) : ::org::apache::lucene::search::spans::SpanContainQuery(env->newObject(initializeClass, &mids$, mid_init$_5a5cbe5f748d0153, a0.this$, a1.this$)) {}

          ::org::apache::lucene::search::spans::SpanWeight SpanWithinQuery::createWeight(const ::org::apache::lucene::search::IndexSearcher & a0, const ::org::apache::lucene::search::ScoreMode & a1, jfloat a2) const
          {
            return ::org::apache::lucene::search::spans::SpanWeight(env->callObjectMethod(this$, mids$[mid_createWeight_5baab4cc5ccc46b6], a0.this$, a1.this$, a2));
          }

          ::java::lang::String SpanWithinQuery::toString(const ::java::lang::String & a0) const
          {
            return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_9bfa75c9f141b67f], a0.this$));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace spans {
          static PyObject *t_SpanWithinQuery_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_SpanWithinQuery_instance_(PyTypeObject *type, PyObject *arg);
          static int t_SpanWithinQuery_init_(t_SpanWithinQuery *self, PyObject *args, PyObject *kwds);
          static PyObject *t_SpanWithinQuery_createWeight(t_SpanWithinQuery *self, PyObject *args);
          static PyObject *t_SpanWithinQuery_toString(t_SpanWithinQuery *self, PyObject *args);

          static PyMethodDef t_SpanWithinQuery__methods_[] = {
            DECLARE_METHOD(t_SpanWithinQuery, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_SpanWithinQuery, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_SpanWithinQuery, createWeight, METH_VARARGS),
            DECLARE_METHOD(t_SpanWithinQuery, toString, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          static PyType_Slot PY_TYPE_SLOTS(SpanWithinQuery)[] = {
            { Py_tp_methods, t_SpanWithinQuery__methods_ },
            { Py_tp_init, (void *) t_SpanWithinQuery_init_ },
            { 0, NULL }
          };

          static PyType_Def *PY_TYPE_BASES(SpanWithinQuery)[] = {
            &PY_TYPE_DEF(::org::apache::lucene::search::spans::SpanContainQuery),
            NULL
          };

          DEFINE_TYPE(SpanWithinQuery, t_SpanWithinQuery, SpanWithinQuery);

          void t_SpanWithinQuery::install(PyObject *module)
          {
            installType(&PY_TYPE(SpanWithinQuery), &PY_TYPE_DEF(SpanWithinQuery), module, "SpanWithinQuery", 0);
          }

          void t_SpanWithinQuery::initialize(PyObject *module)
          {
            PyObject_SetAttrString((PyObject *) PY_TYPE(SpanWithinQuery), "class_", make_descriptor(SpanWithinQuery::initializeClass, 1));
            PyObject_SetAttrString((PyObject *) PY_TYPE(SpanWithinQuery), "wrapfn_", make_descriptor(t_SpanWithinQuery::wrap_jobject));
            PyObject_SetAttrString((PyObject *) PY_TYPE(SpanWithinQuery), "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_SpanWithinQuery_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, SpanWithinQuery::initializeClass, 1)))
              return NULL;
            return t_SpanWithinQuery::wrap_Object(SpanWithinQuery(((t_SpanWithinQuery *) arg)->object.this$));
          }
          static PyObject *t_SpanWithinQuery_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, SpanWithinQuery::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_SpanWithinQuery_init_(t_SpanWithinQuery *self, PyObject *args, PyObject *kwds)
          {
            ::org::apache::lucene::search::spans::SpanQuery a0((jobject) NULL);
            ::org::apache::lucene::search::spans::SpanQuery a1((jobject) NULL);
            SpanWithinQuery object((jobject) NULL);

            if (!parseArgs(args, "kk", ::org::apache::lucene::search::spans::SpanQuery::initializeClass, ::org::apache::lucene::search::spans::SpanQuery::initializeClass, &a0, &a1))
            {
              INT_CALL(object = SpanWithinQuery(a0, a1));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_SpanWithinQuery_createWeight(t_SpanWithinQuery *self, PyObject *args)
          {
            ::org::apache::lucene::search::IndexSearcher a0((jobject) NULL);
            ::org::apache::lucene::search::ScoreMode a1((jobject) NULL);
            PyTypeObject **p1;
            jfloat a2;
            ::org::apache::lucene::search::spans::SpanWeight result((jobject) NULL);

            if (!parseArgs(args, "kKF", ::org::apache::lucene::search::IndexSearcher::initializeClass, ::org::apache::lucene::search::ScoreMode::initializeClass, &a0, &a1, &p1, ::org::apache::lucene::search::t_ScoreMode::parameters_, &a2))
            {
              OBJ_CALL(result = self->object.createWeight(a0, a1, a2));
              return ::org::apache::lucene::search::spans::t_SpanWeight::wrap_Object(result);
            }

            return callSuper(PY_TYPE(SpanWithinQuery), (PyObject *) self, "createWeight", args, 2);
          }

          static PyObject *t_SpanWithinQuery_toString(t_SpanWithinQuery *self, PyObject *args)
          {
            ::java::lang::String a0((jobject) NULL);
            ::java::lang::String result((jobject) NULL);

            if (!parseArgs(args, "s", &a0))
            {
              OBJ_CALL(result = self->object.toString(a0));
              return j2p(result);
            }

            return callSuper(PY_TYPE(SpanWithinQuery), (PyObject *) self, "toString", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/ja/JapaneseTokenizer.h"
#include "org/apache/lucene/util/AttributeFactory.h"
#include "org/apache/lucene/analysis/ja/GraphvizFormatter.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/analysis/ja/dict/UnknownDictionary.h"
#include "org/apache/lucene/analysis/ja/JapaneseTokenizer$Mode.h"
#include "org/apache/lucene/analysis/ja/dict/TokenInfoDictionary.h"
#include "java/lang/String.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/analysis/ja/dict/UserDictionary.h"
#include "org/apache/lucene/analysis/ja/dict/ConnectionCosts.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace ja {

          ::java::lang::Class *JapaneseTokenizer::class$ = NULL;
          jmethodID *JapaneseTokenizer::mids$ = NULL;
          bool JapaneseTokenizer::live$ = false;
          ::org::apache::lucene::analysis::ja::JapaneseTokenizer$Mode *JapaneseTokenizer::DEFAULT_MODE = NULL;

          jclass JapaneseTokenizer::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/ja/JapaneseTokenizer");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_a3856da6f1222919] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/analysis/ja/dict/UserDictionary;ZLorg/apache/lucene/analysis/ja/JapaneseTokenizer$Mode;)V");
              mids$[mid_init$_6a542b7e45733db2] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/util/AttributeFactory;Lorg/apache/lucene/analysis/ja/dict/UserDictionary;ZLorg/apache/lucene/analysis/ja/JapaneseTokenizer$Mode;)V");
              mids$[mid_init$_945afc5d9014ee60] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/analysis/ja/dict/UserDictionary;ZZLorg/apache/lucene/analysis/ja/JapaneseTokenizer$Mode;)V");
              mids$[mid_init$_143e55277c93402e] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/util/AttributeFactory;Lorg/apache/lucene/analysis/ja/dict/UserDictionary;ZZLorg/apache/lucene/analysis/ja/JapaneseTokenizer$Mode;)V");
              mids$[mid_init$_8d0ee0b8da25c077] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/util/AttributeFactory;Lorg/apache/lucene/analysis/ja/dict/TokenInfoDictionary;Lorg/apache/lucene/analysis/ja/dict/UnknownDictionary;Lorg/apache/lucene/analysis/ja/dict/ConnectionCosts;Lorg/apache/lucene/analysis/ja/dict/UserDictionary;ZZLorg/apache/lucene/analysis/ja/JapaneseTokenizer$Mode;)V");
              mids$[mid_calcNBestCost_a5a7d1128e9e2bb7] = env->getMethodID(cls, "calcNBestCost", "(Ljava/lang/String;)I");
              mids$[mid_close_f2cc1bce94666404] = env->getMethodID(cls, "close", "()V");
              mids$[mid_end_f2cc1bce94666404] = env->getMethodID(cls, "end", "()V");
              mids$[mid_incrementToken_8454bd5aa23fd11e] = env->getMethodID(cls, "incrementToken", "()Z");
              mids$[mid_reset_f2cc1bce94666404] = env->getMethodID(cls, "reset", "()V");
              mids$[mid_setGraphvizFormatter_cb13c44080e810a0] = env->getMethodID(cls, "setGraphvizFormatter", "(Lorg/apache/lucene/analysis/ja/GraphvizFormatter;)V");
              mids$[mid_setNBestCost_040c4cd0390c5aff] = env->getMethodID(cls, "setNBestCost", "(I)V");

              class$ = new ::java::lang::Class(cls);
              cls = (jclass) class$->this$;

              DEFAULT_MODE = new ::org::apache::lucene::analysis::ja::JapaneseTokenizer$Mode(env->getStaticObjectField(cls, "DEFAULT_MODE", "Lorg/apache/lucene/analysis/ja/JapaneseTokenizer$Mode;"));
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          JapaneseTokenizer::JapaneseTokenizer(const ::org::apache::lucene::analysis::ja::dict::UserDictionary & a0, jboolean a1, const ::org::apache::lucene::analysis::ja::JapaneseTokenizer$Mode & a2) : ::org::apache::lucene::analysis::Tokenizer(env->newObject(initializeClass, &mids$, mid_init$_a3856da6f1222919, a0.this$, a1, a2.this$)) {}

          JapaneseTokenizer::JapaneseTokenizer(const ::org::apache::lucene::util::AttributeFactory & a0, const ::org::apache::lucene::analysis::ja::dict::UserDictionary & a1, jboolean a2, const ::org::apache::lucene::analysis::ja::JapaneseTokenizer$Mode & a3) : ::org::apache::lucene::analysis::Tokenizer(env->newObject(initializeClass, &mids$, mid_init$_6a542b7e45733db2, a0.this$, a1.this$, a2, a3.this$)) {}

          JapaneseTokenizer::JapaneseTokenizer(const ::org::apache::lucene::analysis::ja::dict::UserDictionary & a0, jboolean a1, jboolean a2, const ::org::apache::lucene::analysis::ja::JapaneseTokenizer$Mode & a3) : ::org::apache::lucene::analysis::Tokenizer(env->newObject(initializeClass, &mids$, mid_init$_945afc5d9014ee60, a0.this$, a1, a2, a3.this$)) {}

          JapaneseTokenizer::JapaneseTokenizer(const ::org::apache::lucene::util::AttributeFactory & a0, const ::org::apache::lucene::analysis::ja::dict::UserDictionary & a1, jboolean a2, jboolean a3, const ::org::apache::lucene::analysis::ja::JapaneseTokenizer$Mode & a4) : ::org::apache::lucene::analysis::Tokenizer(env->newObject(initializeClass, &mids$, mid_init$_143e55277c93402e, a0.this$, a1.this$, a2, a3, a4.this$)) {}

          JapaneseTokenizer::JapaneseTokenizer(const ::org::apache::lucene::util::AttributeFactory & a0, const ::org::apache::lucene::analysis::ja::dict::TokenInfoDictionary & a1, const ::org::apache::lucene::analysis::ja::dict::UnknownDictionary & a2, const ::org::apache::lucene::analysis::ja::dict::ConnectionCosts & a3, const ::org::apache::lucene::analysis::ja::dict::UserDictionary & a4, jboolean a5, jboolean a6, const ::org::apache::lucene::analysis::ja::JapaneseTokenizer$Mode & a7) : ::org::apache::lucene::analysis::Tokenizer(env->newObject(initializeClass, &mids$, mid_init$_8d0ee0b8da25c077, a0.this$, a1.this$, a2.this$, a3.this$, a4.this$, a5, a6, a7.this$)) {}

          jint JapaneseTokenizer::calcNBestCost(const ::java::lang::String & a0) const
          {
            return env->callIntMethod(this$, mids$[mid_calcNBestCost_a5a7d1128e9e2bb7], a0.this$);
          }

          void JapaneseTokenizer::close() const
          {
            env->callVoidMethod(this$, mids$[mid_close_f2cc1bce94666404]);
          }

          void JapaneseTokenizer::end() const
          {
            env->callVoidMethod(this$, mids$[mid_end_f2cc1bce94666404]);
          }

          jboolean JapaneseTokenizer::incrementToken() const
          {
            return env->callBooleanMethod(this$, mids$[mid_incrementToken_8454bd5aa23fd11e]);
          }

          void JapaneseTokenizer::reset() const
          {
            env->callVoidMethod(this$, mids$[mid_reset_f2cc1bce94666404]);
          }

          void JapaneseTokenizer::setGraphvizFormatter(const ::org::apache::lucene::analysis::ja::GraphvizFormatter & a0) const
          {
            env->callVoidMethod(this$, mids$[mid_setGraphvizFormatter_cb13c44080e810a0], a0.this$);
          }

          void JapaneseTokenizer::setNBestCost(jint a0) const
          {
            env->callVoidMethod(this$, mids$[mid_setNBestCost_040c4cd0390c5aff], a0);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"
#include "org/apache/lucene/analysis/ja/JapaneseTokenizer$Type.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace ja {
          static PyObject *t_JapaneseTokenizer_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_JapaneseTokenizer_instance_(PyTypeObject *type, PyObject *arg);
          static int t_JapaneseTokenizer_init_(t_JapaneseTokenizer *self, PyObject *args, PyObject *kwds);
          static PyObject *t_JapaneseTokenizer_calcNBestCost(t_JapaneseTokenizer *self, PyObject *arg);
          static PyObject *t_JapaneseTokenizer_close(t_JapaneseTokenizer *self, PyObject *args);
          static PyObject *t_JapaneseTokenizer_end(t_JapaneseTokenizer *self, PyObject *args);
          static PyObject *t_JapaneseTokenizer_incrementToken(t_JapaneseTokenizer *self, PyObject *args);
          static PyObject *t_JapaneseTokenizer_reset(t_JapaneseTokenizer *self, PyObject *args);
          static PyObject *t_JapaneseTokenizer_setGraphvizFormatter(t_JapaneseTokenizer *self, PyObject *arg);
          static PyObject *t_JapaneseTokenizer_setNBestCost(t_JapaneseTokenizer *self, PyObject *arg);
          static int t_JapaneseTokenizer_set__graphvizFormatter(t_JapaneseTokenizer *self, PyObject *arg, void *data);
          static int t_JapaneseTokenizer_set__nBestCost(t_JapaneseTokenizer *self, PyObject *arg, void *data);
          static PyGetSetDef t_JapaneseTokenizer__fields_[] = {
            DECLARE_SET_FIELD(t_JapaneseTokenizer, graphvizFormatter),
            DECLARE_SET_FIELD(t_JapaneseTokenizer, nBestCost),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_JapaneseTokenizer__methods_[] = {
            DECLARE_METHOD(t_JapaneseTokenizer, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_JapaneseTokenizer, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_JapaneseTokenizer, calcNBestCost, METH_O),
            DECLARE_METHOD(t_JapaneseTokenizer, close, METH_VARARGS),
            DECLARE_METHOD(t_JapaneseTokenizer, end, METH_VARARGS),
            DECLARE_METHOD(t_JapaneseTokenizer, incrementToken, METH_VARARGS),
            DECLARE_METHOD(t_JapaneseTokenizer, reset, METH_VARARGS),
            DECLARE_METHOD(t_JapaneseTokenizer, setGraphvizFormatter, METH_O),
            DECLARE_METHOD(t_JapaneseTokenizer, setNBestCost, METH_O),
            { NULL, NULL, 0, NULL }
          };

          static PyType_Slot PY_TYPE_SLOTS(JapaneseTokenizer)[] = {
            { Py_tp_methods, t_JapaneseTokenizer__methods_ },
            { Py_tp_init, (void *) t_JapaneseTokenizer_init_ },
            { Py_tp_getset, t_JapaneseTokenizer__fields_ },
            { 0, NULL }
          };

          static PyType_Def *PY_TYPE_BASES(JapaneseTokenizer)[] = {
            &PY_TYPE_DEF(::org::apache::lucene::analysis::Tokenizer),
            NULL
          };

          DEFINE_TYPE(JapaneseTokenizer, t_JapaneseTokenizer, JapaneseTokenizer);

          void t_JapaneseTokenizer::install(PyObject *module)
          {
            installType(&PY_TYPE(JapaneseTokenizer), &PY_TYPE_DEF(JapaneseTokenizer), module, "JapaneseTokenizer", 0);
            PyObject_SetAttrString((PyObject *) PY_TYPE(JapaneseTokenizer), "Type", make_descriptor(&PY_TYPE_DEF(JapaneseTokenizer$Type)));
            PyObject_SetAttrString((PyObject *) PY_TYPE(JapaneseTokenizer), "Mode", make_descriptor(&PY_TYPE_DEF(JapaneseTokenizer$Mode)));
          }

          void t_JapaneseTokenizer::initialize(PyObject *module)
          {
            PyObject_SetAttrString((PyObject *) PY_TYPE(JapaneseTokenizer), "class_", make_descriptor(JapaneseTokenizer::initializeClass, 1));
            PyObject_SetAttrString((PyObject *) PY_TYPE(JapaneseTokenizer), "wrapfn_", make_descriptor(t_JapaneseTokenizer::wrap_jobject));
            PyObject_SetAttrString((PyObject *) PY_TYPE(JapaneseTokenizer), "boxfn_", make_descriptor(boxObject));
            env->getClass(JapaneseTokenizer::initializeClass);
            PyObject_SetAttrString((PyObject *) PY_TYPE(JapaneseTokenizer), "DEFAULT_MODE", make_descriptor(::org::apache::lucene::analysis::ja::t_JapaneseTokenizer$Mode::wrap_Object(*JapaneseTokenizer::DEFAULT_MODE)));
          }

          static PyObject *t_JapaneseTokenizer_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, JapaneseTokenizer::initializeClass, 1)))
              return NULL;
            return t_JapaneseTokenizer::wrap_Object(JapaneseTokenizer(((t_JapaneseTokenizer *) arg)->object.this$));
          }
          static PyObject *t_JapaneseTokenizer_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, JapaneseTokenizer::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_JapaneseTokenizer_init_(t_JapaneseTokenizer *self, PyObject *args, PyObject *kwds)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 3:
              {
                ::org::apache::lucene::analysis::ja::dict::UserDictionary a0((jobject) NULL);
                jboolean a1;
                ::org::apache::lucene::analysis::ja::JapaneseTokenizer$Mode a2((jobject) NULL);
                PyTypeObject **p2;
                JapaneseTokenizer object((jobject) NULL);

                if (!parseArgs(args, "kZK", ::org::apache::lucene::analysis::ja::dict::UserDictionary::initializeClass, ::org::apache::lucene::analysis::ja::JapaneseTokenizer$Mode::initializeClass, &a0, &a1, &a2, &p2, ::org::apache::lucene::analysis::ja::t_JapaneseTokenizer$Mode::parameters_))
                {
                  INT_CALL(object = JapaneseTokenizer(a0, a1, a2));
                  self->object = object;
                  break;
                }
              }
              goto err;
             case 4:
              {
                ::org::apache::lucene::util::AttributeFactory a0((jobject) NULL);
                ::org::apache::lucene::analysis::ja::dict::UserDictionary a1((jobject) NULL);
                jboolean a2;
                ::org::apache::lucene::analysis::ja::JapaneseTokenizer$Mode a3((jobject) NULL);
                PyTypeObject **p3;
                JapaneseTokenizer object((jobject) NULL);

                if (!parseArgs(args, "kkZK", ::org::apache::lucene::util::AttributeFactory::initializeClass, ::org::apache::lucene::analysis::ja::dict::UserDictionary::initializeClass, ::org::apache::lucene::analysis::ja::JapaneseTokenizer$Mode::initializeClass, &a0, &a1, &a2, &a3, &p3, ::org::apache::lucene::analysis::ja::t_JapaneseTokenizer$Mode::parameters_))
                {
                  INT_CALL(object = JapaneseTokenizer(a0, a1, a2, a3));
                  self->object = object;
                  break;
                }
              }
              {
                ::org::apache::lucene::analysis::ja::dict::UserDictionary a0((jobject) NULL);
                jboolean a1;
                jboolean a2;
                ::org::apache::lucene::analysis::ja::JapaneseTokenizer$Mode a3((jobject) NULL);
                PyTypeObject **p3;
                JapaneseTokenizer object((jobject) NULL);

                if (!parseArgs(args, "kZZK", ::org::apache::lucene::analysis::ja::dict::UserDictionary::initializeClass, ::org::apache::lucene::analysis::ja::JapaneseTokenizer$Mode::initializeClass, &a0, &a1, &a2, &a3, &p3, ::org::apache::lucene::analysis::ja::t_JapaneseTokenizer$Mode::parameters_))
                {
                  INT_CALL(object = JapaneseTokenizer(a0, a1, a2, a3));
                  self->object = object;
                  break;
                }
              }
              goto err;
             case 5:
              {
                ::org::apache::lucene::util::AttributeFactory a0((jobject) NULL);
                ::org::apache::lucene::analysis::ja::dict::UserDictionary a1((jobject) NULL);
                jboolean a2;
                jboolean a3;
                ::org::apache::lucene::analysis::ja::JapaneseTokenizer$Mode a4((jobject) NULL);
                PyTypeObject **p4;
                JapaneseTokenizer object((jobject) NULL);

                if (!parseArgs(args, "kkZZK", ::org::apache::lucene::util::AttributeFactory::initializeClass, ::org::apache::lucene::analysis::ja::dict::UserDictionary::initializeClass, ::org::apache::lucene::analysis::ja::JapaneseTokenizer$Mode::initializeClass, &a0, &a1, &a2, &a3, &a4, &p4, ::org::apache::lucene::analysis::ja::t_JapaneseTokenizer$Mode::parameters_))
                {
                  INT_CALL(object = JapaneseTokenizer(a0, a1, a2, a3, a4));
                  self->object = object;
                  break;
                }
              }
              goto err;
             case 8:
              {
                ::org::apache::lucene::util::AttributeFactory a0((jobject) NULL);
                ::org::apache::lucene::analysis::ja::dict::TokenInfoDictionary a1((jobject) NULL);
                ::org::apache::lucene::analysis::ja::dict::UnknownDictionary a2((jobject) NULL);
                ::org::apache::lucene::analysis::ja::dict::ConnectionCosts a3((jobject) NULL);
                ::org::apache::lucene::analysis::ja::dict::UserDictionary a4((jobject) NULL);
                jboolean a5;
                jboolean a6;
                ::org::apache::lucene::analysis::ja::JapaneseTokenizer$Mode a7((jobject) NULL);
                PyTypeObject **p7;
                JapaneseTokenizer object((jobject) NULL);

                if (!parseArgs(args, "kkkkkZZK", ::org::apache::lucene::util::AttributeFactory::initializeClass, ::org::apache::lucene::analysis::ja::dict::TokenInfoDictionary::initializeClass, ::org::apache::lucene::analysis::ja::dict::UnknownDictionary::initializeClass, ::org::apache::lucene::analysis::ja::dict::ConnectionCosts::initializeClass, ::org::apache::lucene::analysis::ja::dict::UserDictionary::initializeClass, ::org::apache::lucene::analysis::ja::JapaneseTokenizer$Mode::initializeClass, &a0, &a1, &a2, &a3, &a4, &a5, &a6, &a7, &p7, ::org::apache::lucene::analysis::ja::t_JapaneseTokenizer$Mode::parameters_))
                {
                  INT_CALL(object = JapaneseTokenizer(a0, a1, a2, a3, a4, a5, a6, a7));
                  self->object = object;
                  break;
                }
              }
             default:
             err:
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_JapaneseTokenizer_calcNBestCost(t_JapaneseTokenizer *self, PyObject *arg)
          {
            ::java::lang::String a0((jobject) NULL);
            jint result;

            if (!parseArg(arg, "s", &a0))
            {
              OBJ_CALL(result = self->object.calcNBestCost(a0));
              return PyLong_FromLong((long) result);
            }

            PyErr_SetArgsError((PyObject *) self, "calcNBestCost", arg);
            return NULL;
          }

          static PyObject *t_JapaneseTokenizer_close(t_JapaneseTokenizer *self, PyObject *args)
          {

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(self->object.close());
              Py_RETURN_NONE;
            }

            return callSuper(PY_TYPE(JapaneseTokenizer), (PyObject *) self, "close", args, 2);
          }

          static PyObject *t_JapaneseTokenizer_end(t_JapaneseTokenizer *self, PyObject *args)
          {

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(self->object.end());
              Py_RETURN_NONE;
            }

            return callSuper(PY_TYPE(JapaneseTokenizer), (PyObject *) self, "end", args, 2);
          }

          static PyObject *t_JapaneseTokenizer_incrementToken(t_JapaneseTokenizer *self, PyObject *args)
          {
            jboolean result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.incrementToken());
              Py_RETURN_BOOL(result);
            }

            return callSuper(PY_TYPE(JapaneseTokenizer), (PyObject *) self, "incrementToken", args, 2);
          }

          static PyObject *t_JapaneseTokenizer_reset(t_JapaneseTokenizer *self, PyObject *args)
          {

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(self->object.reset());
              Py_RETURN_NONE;
            }

            return callSuper(PY_TYPE(JapaneseTokenizer), (PyObject *) self, "reset", args, 2);
          }

          static PyObject *t_JapaneseTokenizer_setGraphvizFormatter(t_JapaneseTokenizer *self, PyObject *arg)
          {
            ::org::apache::lucene::analysis::ja::GraphvizFormatter a0((jobject) NULL);

            if (!parseArg(arg, "k", ::org::apache::lucene::analysis::ja::GraphvizFormatter::initializeClass, &a0))
            {
              OBJ_CALL(self->object.setGraphvizFormatter(a0));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError((PyObject *) self, "setGraphvizFormatter", arg);
            return NULL;
          }

          static PyObject *t_JapaneseTokenizer_setNBestCost(t_JapaneseTokenizer *self, PyObject *arg)
          {
            jint a0;

            if (!parseArg(arg, "I", &a0))
            {
              OBJ_CALL(self->object.setNBestCost(a0));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError((PyObject *) self, "setNBestCost", arg);
            return NULL;
          }

          static int t_JapaneseTokenizer_set__graphvizFormatter(t_JapaneseTokenizer *self, PyObject *arg, void *data)
          {
            {
              ::org::apache::lucene::analysis::ja::GraphvizFormatter value((jobject) NULL);
              if (!parseArg(arg, "k", ::org::apache::lucene::analysis::ja::GraphvizFormatter::initializeClass, &value))
              {
                INT_CALL(self->object.setGraphvizFormatter(value));
                return 0;
              }
            }
            PyErr_SetArgsError((PyObject *) self, "graphvizFormatter", arg);
            return -1;
          }

          static int t_JapaneseTokenizer_set__nBestCost(t_JapaneseTokenizer *self, PyObject *arg, void *data)
          {
            {
              jint value;
              if (!parseArg(arg, "I", &value))
              {
                INT_CALL(self->object.setNBestCost(value));
                return 0;
              }
            }
            PyErr_SetArgsError((PyObject *) self, "nBestCost", arg);
            return -1;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/vectorhighlight/FragmentsBuilder.h"
#include "org/apache/lucene/index/IndexReader.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/search/highlight/Encoder.h"
#include "java/lang/String.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/search/vectorhighlight/FieldFragList.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace vectorhighlight {

          ::java::lang::Class *FragmentsBuilder::class$ = NULL;
          jmethodID *FragmentsBuilder::mids$ = NULL;
          bool FragmentsBuilder::live$ = false;

          jclass FragmentsBuilder::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/search/vectorhighlight/FragmentsBuilder");

              mids$ = new jmethodID[max_mid];
              mids$[mid_createFragment_88fda903d6865251] = env->getMethodID(cls, "createFragment", "(Lorg/apache/lucene/index/IndexReader;ILjava/lang/String;Lorg/apache/lucene/search/vectorhighlight/FieldFragList;)Ljava/lang/String;");
              mids$[mid_createFragment_23264a18dcb3de8b] = env->getMethodID(cls, "createFragment", "(Lorg/apache/lucene/index/IndexReader;ILjava/lang/String;Lorg/apache/lucene/search/vectorhighlight/FieldFragList;[Ljava/lang/String;[Ljava/lang/String;Lorg/apache/lucene/search/highlight/Encoder;)Ljava/lang/String;");
              mids$[mid_createFragments_96858e3aaaeddd60] = env->getMethodID(cls, "createFragments", "(Lorg/apache/lucene/index/IndexReader;ILjava/lang/String;Lorg/apache/lucene/search/vectorhighlight/FieldFragList;I)[Ljava/lang/String;");
              mids$[mid_createFragments_59e4a59490ad9938] = env->getMethodID(cls, "createFragments", "(Lorg/apache/lucene/index/IndexReader;ILjava/lang/String;Lorg/apache/lucene/search/vectorhighlight/FieldFragList;I[Ljava/lang/String;[Ljava/lang/String;Lorg/apache/lucene/search/highlight/Encoder;)[Ljava/lang/String;");

              class$ = new ::java::lang::Class(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          ::java::lang::String FragmentsBuilder::createFragment(const ::org::apache::lucene::index::IndexReader & a0, jint a1, const ::java::lang::String & a2, const ::org::apache::lucene::search::vectorhighlight::FieldFragList & a3) const
          {
            return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_createFragment_88fda903d6865251], a0.this$, a1, a2.this$, a3.this$));
          }

          ::java::lang::String FragmentsBuilder::createFragment(const ::org::apache::lucene::index::IndexReader & a0, jint a1, const ::java::lang::String & a2, const ::org::apache::lucene::search::vectorhighlight::FieldFragList & a3, const JArray< ::java::lang::String > & a4, const JArray< ::java::lang::String > & a5, const ::org::apache::lucene::search::highlight::Encoder & a6) const
          {
            return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_createFragment_23264a18dcb3de8b], a0.this$, a1, a2.this$, a3.this$, a4.this$, a5.this$, a6.this$));
          }

          JArray< ::java::lang::String > FragmentsBuilder::createFragments(const ::org::apache::lucene::index::IndexReader & a0, jint a1, const ::java::lang::String & a2, const ::org::apache::lucene::search::vectorhighlight::FieldFragList & a3, jint a4) const
          {
            return JArray< ::java::lang::String >(env->callObjectMethod(this$, mids$[mid_createFragments_96858e3aaaeddd60], a0.this$, a1, a2.this$, a3.this$, a4));
          }

          JArray< ::java::lang::String > FragmentsBuilder::createFragments(const ::org::apache::lucene::index::IndexReader & a0, jint a1, const ::java::lang::String & a2, const ::org::apache::lucene::search::vectorhighlight::FieldFragList & a3, jint a4, const JArray< ::java::lang::String > & a5, const JArray< ::java::lang::String > & a6, const ::org::apache::lucene::search::highlight::Encoder & a7) const
          {
            return JArray< ::java::lang::String >(env->callObjectMethod(this$, mids$[mid_createFragments_59e4a59490ad9938], a0.this$, a1, a2.this$, a3.this$, a4, a5.this$, a6.this$, a7.this$));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace vectorhighlight {
          static PyObject *t_FragmentsBuilder_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_FragmentsBuilder_instance_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_FragmentsBuilder_createFragment(t_FragmentsBuilder *self, PyObject *args);
          static PyObject *t_FragmentsBuilder_createFragments(t_FragmentsBuilder *self, PyObject *args);

          static PyMethodDef t_FragmentsBuilder__methods_[] = {
            DECLARE_METHOD(t_FragmentsBuilder, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_FragmentsBuilder, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_FragmentsBuilder, createFragment, METH_VARARGS),
            DECLARE_METHOD(t_FragmentsBuilder, createFragments, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          static PyType_Slot PY_TYPE_SLOTS(FragmentsBuilder)[] = {
            { Py_tp_methods, t_FragmentsBuilder__methods_ },
            { Py_tp_init, (void *) abstract_init },
            { 0, NULL }
          };

          static PyType_Def *PY_TYPE_BASES(FragmentsBuilder)[] = {
            &PY_TYPE_DEF(::java::lang::Object),
            NULL
          };

          DEFINE_TYPE(FragmentsBuilder, t_FragmentsBuilder, FragmentsBuilder);

          void t_FragmentsBuilder::install(PyObject *module)
          {
            installType(&PY_TYPE(FragmentsBuilder), &PY_TYPE_DEF(FragmentsBuilder), module, "FragmentsBuilder", 0);
          }

          void t_FragmentsBuilder::initialize(PyObject *module)
          {
            PyObject_SetAttrString((PyObject *) PY_TYPE(FragmentsBuilder), "class_", make_descriptor(FragmentsBuilder::initializeClass, 1));
            PyObject_SetAttrString((PyObject *) PY_TYPE(FragmentsBuilder), "wrapfn_", make_descriptor(t_FragmentsBuilder::wrap_jobject));
            PyObject_SetAttrString((PyObject *) PY_TYPE(FragmentsBuilder), "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_FragmentsBuilder_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, FragmentsBuilder::initializeClass, 1)))
              return NULL;
            return t_FragmentsBuilder::wrap_Object(FragmentsBuilder(((t_FragmentsBuilder *) arg)->object.this$));
          }
          static PyObject *t_FragmentsBuilder_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, FragmentsBuilder::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static PyObject *t_FragmentsBuilder_createFragment(t_FragmentsBuilder *self, PyObject *args)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 4:
              {
                ::org::apache::lucene::index::IndexReader a0((jobject) NULL);
                jint a1;
                ::java::lang::String a2((jobject) NULL);
                ::org::apache::lucene::search::vectorhighlight::FieldFragList a3((jobject) NULL);
                ::java::lang::String result((jobject) NULL);

                if (!parseArgs(args, "kIsk", ::org::apache::lucene::index::IndexReader::initializeClass, ::org::apache::lucene::search::vectorhighlight::FieldFragList::initializeClass, &a0, &a1, &a2, &a3))
                {
                  OBJ_CALL(result = self->object.createFragment(a0, a1, a2, a3));
                  return j2p(result);
                }
              }
              break;
             case 7:
              {
                ::org::apache::lucene::index::IndexReader a0((jobject) NULL);
                jint a1;
                ::java::lang::String a2((jobject) NULL);
                ::org::apache::lucene::search::vectorhighlight::FieldFragList a3((jobject) NULL);
                JArray< ::java::lang::String > a4((jobject) NULL);
                JArray< ::java::lang::String > a5((jobject) NULL);
                ::org::apache::lucene::search::highlight::Encoder a6((jobject) NULL);
                ::java::lang::String result((jobject) NULL);

                if (!parseArgs(args, "kIsk[s[sk", ::org::apache::lucene::index::IndexReader::initializeClass, ::org::apache::lucene::search::vectorhighlight::FieldFragList::initializeClass, ::org::apache::lucene::search::highlight::Encoder::initializeClass, &a0, &a1, &a2, &a3, &a4, &a5, &a6))
                {
                  OBJ_CALL(result = self->object.createFragment(a0, a1, a2, a3, a4, a5, a6));
                  return j2p(result);
                }
              }
            }

            PyErr_SetArgsError((PyObject *) self, "createFragment", args);
            return NULL;
          }

          static PyObject *t_FragmentsBuilder_createFragments(t_FragmentsBuilder *self, PyObject *args)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 5:
              {
                ::org::apache::lucene::index::IndexReader a0((jobject) NULL);
                jint a1;
                ::java::lang::String a2((jobject) NULL);
                ::org::apache::lucene::search::vectorhighlight::FieldFragList a3((jobject) NULL);
                jint a4;
                JArray< ::java::lang::String > result((jobject) NULL);

                if (!parseArgs(args, "kIskI", ::org::apache::lucene::index::IndexReader::initializeClass, ::org::apache::lucene::search::vectorhighlight::FieldFragList::initializeClass, &a0, &a1, &a2, &a3, &a4))
                {
                  OBJ_CALL(result = self->object.createFragments(a0, a1, a2, a3, a4));
                  return JArray<jstring>(result.this$).wrap();
                }
              }
              break;
             case 8:
              {
                ::org::apache::lucene::index::IndexReader a0((jobject) NULL);
                jint a1;
                ::java::lang::String a2((jobject) NULL);
                ::org::apache::lucene::search::vectorhighlight::FieldFragList a3((jobject) NULL);
                jint a4;
                JArray< ::java::lang::String > a5((jobject) NULL);
                JArray< ::java::lang::String > a6((jobject) NULL);
                ::org::apache::lucene::search::highlight::Encoder a7((jobject) NULL);
                JArray< ::java::lang::String > result((jobject) NULL);

                if (!parseArgs(args, "kIskI[s[sk", ::org::apache::lucene::index::IndexReader::initializeClass, ::org::apache::lucene::search::vectorhighlight::FieldFragList::initializeClass, ::org::apache::lucene::search::highlight::Encoder::initializeClass, &a0, &a1, &a2, &a3, &a4, &a5, &a6, &a7))
                {
                  OBJ_CALL(result = self->object.createFragments(a0, a1, a2, a3, a4, a5, a6, a7));
                  return JArray<jstring>(result.this$).wrap();
                }
              }
            }

            PyErr_SetArgsError((PyObject *) self, "createFragments", args);
            return NULL;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/codecs/simpletext/SimpleTextCodec.h"
#include "org/apache/lucene/codecs/FieldInfosFormat.h"
#include "org/apache/lucene/codecs/DocValuesFormat.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/codecs/CompoundFormat.h"
#include "org/apache/lucene/codecs/SegmentInfoFormat.h"
#include "org/apache/lucene/codecs/StoredFieldsFormat.h"
#include "org/apache/lucene/codecs/LiveDocsFormat.h"
#include "org/apache/lucene/codecs/NormsFormat.h"
#include "org/apache/lucene/codecs/PointsFormat.h"
#include "org/apache/lucene/codecs/TermVectorsFormat.h"
#include "org/apache/lucene/codecs/PostingsFormat.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace codecs {
        namespace simpletext {

          ::java::lang::Class *SimpleTextCodec::class$ = NULL;
          jmethodID *SimpleTextCodec::mids$ = NULL;
          bool SimpleTextCodec::live$ = false;

          jclass SimpleTextCodec::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/codecs/simpletext/SimpleTextCodec");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_f2cc1bce94666404] = env->getMethodID(cls, "<init>", "()V");
              mids$[mid_compoundFormat_1641e3035b5e7063] = env->getMethodID(cls, "compoundFormat", "()Lorg/apache/lucene/codecs/CompoundFormat;");
              mids$[mid_docValuesFormat_a9c08d7c2b76eed3] = env->getMethodID(cls, "docValuesFormat", "()Lorg/apache/lucene/codecs/DocValuesFormat;");
              mids$[mid_fieldInfosFormat_48c0c59677397219] = env->getMethodID(cls, "fieldInfosFormat", "()Lorg/apache/lucene/codecs/FieldInfosFormat;");
              mids$[mid_liveDocsFormat_3c23f7d462a4a754] = env->getMethodID(cls, "liveDocsFormat", "()Lorg/apache/lucene/codecs/LiveDocsFormat;");
              mids$[mid_normsFormat_913a021834acbf93] = env->getMethodID(cls, "normsFormat", "()Lorg/apache/lucene/codecs/NormsFormat;");
              mids$[mid_pointsFormat_b24443532b28970b] = env->getMethodID(cls, "pointsFormat", "()Lorg/apache/lucene/codecs/PointsFormat;");
              mids$[mid_postingsFormat_1a5e16ceada7aa64] = env->getMethodID(cls, "postingsFormat", "()Lorg/apache/lucene/codecs/PostingsFormat;");
              mids$[mid_segmentInfoFormat_579fd0b88c210118] = env->getMethodID(cls, "segmentInfoFormat", "()Lorg/apache/lucene/codecs/SegmentInfoFormat;");
              mids$[mid_storedFieldsFormat_a6cbef21a6c483b7] = env->getMethodID(cls, "storedFieldsFormat", "()Lorg/apache/lucene/codecs/StoredFieldsFormat;");
              mids$[mid_termVectorsFormat_ae08b71ce8366567] = env->getMethodID(cls, "termVectorsFormat", "()Lorg/apache/lucene/codecs/TermVectorsFormat;");

              class$ = new ::java::lang::Class(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          SimpleTextCodec::SimpleTextCodec() : ::org::apache::lucene::codecs::Codec(env->newObject(initializeClass, &mids$, mid_init$_f2cc1bce94666404)) {}

          ::org::apache::lucene::codecs::CompoundFormat SimpleTextCodec::compoundFormat() const
          {
            return ::org::apache::lucene::codecs::CompoundFormat(env->callObjectMethod(this$, mids$[mid_compoundFormat_1641e3035b5e7063]));
          }

          ::org::apache::lucene::codecs::DocValuesFormat SimpleTextCodec::docValuesFormat() const
          {
            return ::org::apache::lucene::codecs::DocValuesFormat(env->callObjectMethod(this$, mids$[mid_docValuesFormat_a9c08d7c2b76eed3]));
          }

          ::org::apache::lucene::codecs::FieldInfosFormat SimpleTextCodec::fieldInfosFormat() const
          {
            return ::org::apache::lucene::codecs::FieldInfosFormat(env->callObjectMethod(this$, mids$[mid_fieldInfosFormat_48c0c59677397219]));
          }

          ::org::apache::lucene::codecs::LiveDocsFormat SimpleTextCodec::liveDocsFormat() const
          {
            return ::org::apache::lucene::codecs::LiveDocsFormat(env->callObjectMethod(this$, mids$[mid_liveDocsFormat_3c23f7d462a4a754]));
          }

          ::org::apache::lucene::codecs::NormsFormat SimpleTextCodec::normsFormat() const
          {
            return ::org::apache::lucene::codecs::NormsFormat(env->callObjectMethod(this$, mids$[mid_normsFormat_913a021834acbf93]));
          }

          ::org::apache::lucene::codecs::PointsFormat SimpleTextCodec::pointsFormat() const
          {
            return ::org::apache::lucene::codecs::PointsFormat(env->callObjectMethod(this$, mids$[mid_pointsFormat_b24443532b28970b]));
          }

          ::org::apache::lucene::codecs::PostingsFormat SimpleTextCodec::postingsFormat() const
          {
            return ::org::apache::lucene::codecs::PostingsFormat(env->callObjectMethod(this$, mids$[mid_postingsFormat_1a5e16ceada7aa64]));
          }

          ::org::apache::lucene::codecs::SegmentInfoFormat SimpleTextCodec::segmentInfoFormat() const
          {
            return ::org::apache::lucene::codecs::SegmentInfoFormat(env->callObjectMethod(this$, mids$[mid_segmentInfoFormat_579fd0b88c210118]));
          }

          ::org::apache::lucene::codecs::StoredFieldsFormat SimpleTextCodec::storedFieldsFormat() const
          {
            return ::org::apache::lucene::codecs::StoredFieldsFormat(env->callObjectMethod(this$, mids$[mid_storedFieldsFormat_a6cbef21a6c483b7]));
          }

          ::org::apache::lucene::codecs::TermVectorsFormat SimpleTextCodec::termVectorsFormat() const
          {
            return ::org::apache::lucene::codecs::TermVectorsFormat(env->callObjectMethod(this$, mids$[mid_termVectorsFormat_ae08b71ce8366567]));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace codecs {
        namespace simpletext {
          static PyObject *t_SimpleTextCodec_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_SimpleTextCodec_instance_(PyTypeObject *type, PyObject *arg);
          static int t_SimpleTextCodec_init_(t_SimpleTextCodec *self, PyObject *args, PyObject *kwds);
          static PyObject *t_SimpleTextCodec_compoundFormat(t_SimpleTextCodec *self, PyObject *args);
          static PyObject *t_SimpleTextCodec_docValuesFormat(t_SimpleTextCodec *self, PyObject *args);
          static PyObject *t_SimpleTextCodec_fieldInfosFormat(t_SimpleTextCodec *self, PyObject *args);
          static PyObject *t_SimpleTextCodec_liveDocsFormat(t_SimpleTextCodec *self, PyObject *args);
          static PyObject *t_SimpleTextCodec_normsFormat(t_SimpleTextCodec *self, PyObject *args);
          static PyObject *t_SimpleTextCodec_pointsFormat(t_SimpleTextCodec *self, PyObject *args);
          static PyObject *t_SimpleTextCodec_postingsFormat(t_SimpleTextCodec *self, PyObject *args);
          static PyObject *t_SimpleTextCodec_segmentInfoFormat(t_SimpleTextCodec *self, PyObject *args);
          static PyObject *t_SimpleTextCodec_storedFieldsFormat(t_SimpleTextCodec *self, PyObject *args);
          static PyObject *t_SimpleTextCodec_termVectorsFormat(t_SimpleTextCodec *self, PyObject *args);

          static PyMethodDef t_SimpleTextCodec__methods_[] = {
            DECLARE_METHOD(t_SimpleTextCodec, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_SimpleTextCodec, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_SimpleTextCodec, compoundFormat, METH_VARARGS),
            DECLARE_METHOD(t_SimpleTextCodec, docValuesFormat, METH_VARARGS),
            DECLARE_METHOD(t_SimpleTextCodec, fieldInfosFormat, METH_VARARGS),
            DECLARE_METHOD(t_SimpleTextCodec, liveDocsFormat, METH_VARARGS),
            DECLARE_METHOD(t_SimpleTextCodec, normsFormat, METH_VARARGS),
            DECLARE_METHOD(t_SimpleTextCodec, pointsFormat, METH_VARARGS),
            DECLARE_METHOD(t_SimpleTextCodec, postingsFormat, METH_VARARGS),
            DECLARE_METHOD(t_SimpleTextCodec, segmentInfoFormat, METH_VARARGS),
            DECLARE_METHOD(t_SimpleTextCodec, storedFieldsFormat, METH_VARARGS),
            DECLARE_METHOD(t_SimpleTextCodec, termVectorsFormat, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          static PyType_Slot PY_TYPE_SLOTS(SimpleTextCodec)[] = {
            { Py_tp_methods, t_SimpleTextCodec__methods_ },
            { Py_tp_init, (void *) t_SimpleTextCodec_init_ },
            { 0, NULL }
          };

          static PyType_Def *PY_TYPE_BASES(SimpleTextCodec)[] = {
            &PY_TYPE_DEF(::org::apache::lucene::codecs::Codec),
            NULL
          };

          DEFINE_TYPE(SimpleTextCodec, t_SimpleTextCodec, SimpleTextCodec);

          void t_SimpleTextCodec::install(PyObject *module)
          {
            installType(&PY_TYPE(SimpleTextCodec), &PY_TYPE_DEF(SimpleTextCodec), module, "SimpleTextCodec", 0);
          }

          void t_SimpleTextCodec::initialize(PyObject *module)
          {
            PyObject_SetAttrString((PyObject *) PY_TYPE(SimpleTextCodec), "class_", make_descriptor(SimpleTextCodec::initializeClass, 1));
            PyObject_SetAttrString((PyObject *) PY_TYPE(SimpleTextCodec), "wrapfn_", make_descriptor(t_SimpleTextCodec::wrap_jobject));
            PyObject_SetAttrString((PyObject *) PY_TYPE(SimpleTextCodec), "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_SimpleTextCodec_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, SimpleTextCodec::initializeClass, 1)))
              return NULL;
            return t_SimpleTextCodec::wrap_Object(SimpleTextCodec(((t_SimpleTextCodec *) arg)->object.this$));
          }
          static PyObject *t_SimpleTextCodec_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, SimpleTextCodec::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_SimpleTextCodec_init_(t_SimpleTextCodec *self, PyObject *args, PyObject *kwds)
          {
            SimpleTextCodec object((jobject) NULL);

            INT_CALL(object = SimpleTextCodec());
            self->object = object;

            return 0;
          }

          static PyObject *t_SimpleTextCodec_compoundFormat(t_SimpleTextCodec *self, PyObject *args)
          {
            ::org::apache::lucene::codecs::CompoundFormat result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.compoundFormat());
              return ::org::apache::lucene::codecs::t_CompoundFormat::wrap_Object(result);
            }

            return callSuper(PY_TYPE(SimpleTextCodec), (PyObject *) self, "compoundFormat", args, 2);
          }

          static PyObject *t_SimpleTextCodec_docValuesFormat(t_SimpleTextCodec *self, PyObject *args)
          {
            ::org::apache::lucene::codecs::DocValuesFormat result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.docValuesFormat());
              return ::org::apache::lucene::codecs::t_DocValuesFormat::wrap_Object(result);
            }

            return callSuper(PY_TYPE(SimpleTextCodec), (PyObject *) self, "docValuesFormat", args, 2);
          }

          static PyObject *t_SimpleTextCodec_fieldInfosFormat(t_SimpleTextCodec *self, PyObject *args)
          {
            ::org::apache::lucene::codecs::FieldInfosFormat result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.fieldInfosFormat());
              return ::org::apache::lucene::codecs::t_FieldInfosFormat::wrap_Object(result);
            }

            return callSuper(PY_TYPE(SimpleTextCodec), (PyObject *) self, "fieldInfosFormat", args, 2);
          }

          static PyObject *t_SimpleTextCodec_liveDocsFormat(t_SimpleTextCodec *self, PyObject *args)
          {
            ::org::apache::lucene::codecs::LiveDocsFormat result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.liveDocsFormat());
              return ::org::apache::lucene::codecs::t_LiveDocsFormat::wrap_Object(result);
            }

            return callSuper(PY_TYPE(SimpleTextCodec), (PyObject *) self, "liveDocsFormat", args, 2);
          }

          static PyObject *t_SimpleTextCodec_normsFormat(t_SimpleTextCodec *self, PyObject *args)
          {
            ::org::apache::lucene::codecs::NormsFormat result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.normsFormat());
              return ::org::apache::lucene::codecs::t_NormsFormat::wrap_Object(result);
            }

            return callSuper(PY_TYPE(SimpleTextCodec), (PyObject *) self, "normsFormat", args, 2);
          }

          static PyObject *t_SimpleTextCodec_pointsFormat(t_SimpleTextCodec *self, PyObject *args)
          {
            ::org::apache::lucene::codecs::PointsFormat result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.pointsFormat());
              return ::org::apache::lucene::codecs::t_PointsFormat::wrap_Object(result);
            }

            return callSuper(PY_TYPE(SimpleTextCodec), (PyObject *) self, "pointsFormat", args, 2);
          }

          static PyObject *t_SimpleTextCodec_postingsFormat(t_SimpleTextCodec *self, PyObject *args)
          {
            ::org::apache::lucene::codecs::PostingsFormat result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.postingsFormat());
              return ::org::apache::lucene::codecs::t_PostingsFormat::wrap_Object(result);
            }

            return callSuper(PY_TYPE(SimpleTextCodec), (PyObject *) self, "postingsFormat", args, 2);
          }

          static PyObject *t_SimpleTextCodec_segmentInfoFormat(t_SimpleTextCodec *self, PyObject *args)
          {
            ::org::apache::lucene::codecs::SegmentInfoFormat result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.segmentInfoFormat());
              return ::org::apache::lucene::codecs::t_SegmentInfoFormat::wrap_Object(result);
            }

            return callSuper(PY_TYPE(SimpleTextCodec), (PyObject *) self, "segmentInfoFormat", args, 2);
          }

          static PyObject *t_SimpleTextCodec_storedFieldsFormat(t_SimpleTextCodec *self, PyObject *args)
          {
            ::org::apache::lucene::codecs::StoredFieldsFormat result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.storedFieldsFormat());
              return ::org::apache::lucene::codecs::t_StoredFieldsFormat::wrap_Object(result);
            }

            return callSuper(PY_TYPE(SimpleTextCodec), (PyObject *) self, "storedFieldsFormat", args, 2);
          }

          static PyObject *t_SimpleTextCodec_termVectorsFormat(t_SimpleTextCodec *self, PyObject *args)
          {
            ::org::apache::lucene::codecs::TermVectorsFormat result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.termVectorsFormat());
              return ::org::apache::lucene::codecs::t_TermVectorsFormat::wrap_Object(result);
            }

            return callSuper(PY_TYPE(SimpleTextCodec), (PyObject *) self, "termVectorsFormat", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/store/RAMDirectory.h"
#include "org/apache/lucene/store/FSDirectory.h"
#include "org/apache/lucene/store/IndexOutput.h"
#include "org/apache/lucene/store/IOContext.h"
#include "java/util/Collection.h"
#include "org/apache/lucene/util/Accountable.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/store/IndexInput.h"
#include "java/lang/String.h"
#include "java/util/Set.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/store/LockFactory.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace store {

        ::java::lang::Class *RAMDirectory::class$ = NULL;
        jmethodID *RAMDirectory::mids$ = NULL;
        bool RAMDirectory::live$ = false;

        jclass RAMDirectory::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/store/RAMDirectory");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_f2cc1bce94666404] = env->getMethodID(cls, "<init>", "()V");
            mids$[mid_init$_267cdd0916f1154a] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/store/LockFactory;)V");
            mids$[mid_init$_29136ca1969a76af] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/store/FSDirectory;Lorg/apache/lucene/store/IOContext;)V");
            mids$[mid_close_f2cc1bce94666404] = env->getMethodID(cls, "close", "()V");
            mids$[mid_createOutput_40e6d6dcc3f676b9] = env->getMethodID(cls, "createOutput", "(Ljava/lang/String;Lorg/apache/lucene/store/IOContext;)Lorg/apache/lucene/store/IndexOutput;");
            mids$[mid_createTempOutput_918504249dfbe513] = env->getMethodID(cls, "createTempOutput", "(Ljava/lang/String;Ljava/lang/String;Lorg/apache/lucene/store/IOContext;)Lorg/apache/lucene/store/IndexOutput;");
            mids$[mid_deleteFile_9fd2eb66a64e6f0f] = env->getMethodID(cls, "deleteFile", "(Ljava/lang/String;)V");
            mids$[mid_fileLength_b1e05207ec98e246] = env->getMethodID(cls, "fileLength", "(Ljava/lang/String;)J");
            mids$[mid_fileNameExists_145b2d0af0c06b93] = env->getMethodID(cls, "fileNameExists", "(Ljava/lang/String;)Z");
            mids$[mid_getChildResources_d4dfbf7a26ff41df] = env->getMethodID(cls, "getChildResources", "()Ljava/util/Collection;");
            mids$[mid_getPendingDeletions_7dcf4034c6d1a92a] = env->getMethodID(cls, "getPendingDeletions", "()Ljava/util/Set;");
            mids$[mid_listAll_9865da0b5ee490bc] = env->getMethodID(cls, "listAll", "()[Ljava/lang/String;");
            mids$[mid_openInput_cc9a9aabe8db93df] = env->getMethodID(cls, "openInput", "(Ljava/lang/String;Lorg/apache/lucene/store/IOContext;)Lorg/apache/lucene/store/IndexInput;");
            mids$[mid_ramBytesUsed_2e5ae9edcb9b072f] = env->getMethodID(cls, "ramBytesUsed", "()J");
            mids$[mid_rename_15b72f6a44ff93f2] = env->getMethodID(cls, "rename", "(Ljava/lang/String;Ljava/lang/String;)V");
            mids$[mid_sync_50bc3ddc62a19f2d] = env->getMethodID(cls, "sync", "(Ljava/util/Collection;)V");
            mids$[mid_syncMetaData_f2cc1bce94666404] = env->getMethodID(cls, "syncMetaData", "()V");
            mids$[mid_newRAMFile_47b105fc7d63f6a1] = env->getMethodID(cls, "newRAMFile", "()Lorg/apache/lucene/store/RAMFile;");

            class$ = new ::java::lang::Class(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        RAMDirectory::RAMDirectory() : ::org::apache::lucene::store::BaseDirectory(env->newObject(initializeClass, &mids$, mid_init$_f2cc1bce94666404)) {}

        RAMDirectory::RAMDirectory(const ::org::apache::lucene::store::LockFactory & a0) : ::org::apache::lucene::store::BaseDirectory(env->newObject(initializeClass, &mids$, mid_init$_267cdd0916f1154a, a0.this$)) {}

        RAMDirectory::RAMDirectory(const ::org::apache::lucene::store::FSDirectory & a0, const ::org::apache::lucene::store::IOContext & a1) : ::org::apache::lucene::store::BaseDirectory(env->newObject(initializeClass, &mids$, mid_init$_29136ca1969a76af, a0.this$, a1.this$)) {}

        void RAMDirectory::close() const
        {
          env->callVoidMethod(this$, mids$[mid_close_f2cc1bce94666404]);
        }

        ::org::apache::lucene::store::IndexOutput RAMDirectory::createOutput(const ::java::lang::String & a0, const ::org::apache::lucene::store::IOContext & a1) const
        {
          return ::org::apache::lucene::store::IndexOutput(env->callObjectMethod(this$, mids$[mid_createOutput_40e6d6dcc3f676b9], a0.this$, a1.this$));
        }

        ::org::apache::lucene::store::IndexOutput RAMDirectory::createTempOutput(const ::java::lang::String & a0, const ::java::lang::String & a1, const ::org::apache::lucene::store::IOContext & a2) const
        {
          return ::org::apache::lucene::store::IndexOutput(env->callObjectMethod(this$, mids$[mid_createTempOutput_918504249dfbe513], a0.this$, a1.this$, a2.this$));
        }

        void RAMDirectory::deleteFile(const ::java::lang::String & a0) const
        {
          env->callVoidMethod(this$, mids$[mid_deleteFile_9fd2eb66a64e6f0f], a0.this$);
        }

        jlong RAMDirectory::fileLength(const ::java::lang::String & a0) const
        {
          return env->callLongMethod(this$, mids$[mid_fileLength_b1e05207ec98e246], a0.this$);
        }

        jboolean RAMDirectory::fileNameExists(const ::java::lang::String & a0) const
        {
          return env->callBooleanMethod(this$, mids$[mid_fileNameExists_145b2d0af0c06b93], a0.this$);
        }

        ::java::util::Collection RAMDirectory::getChildResources() const
        {
          return ::java::util::Collection(env->callObjectMethod(this$, mids$[mid_getChildResources_d4dfbf7a26ff41df]));
        }

        ::java::util::Set RAMDirectory::getPendingDeletions() const
        {
          return ::java::util::Set(env->callObjectMethod(this$, mids$[mid_getPendingDeletions_7dcf4034c6d1a92a]));
        }

        JArray< ::java::lang::String > RAMDirectory::listAll() const
        {
          return JArray< ::java::lang::String >(env->callObjectMethod(this$, mids$[mid_listAll_9865da0b5ee490bc]));
        }

        ::org::apache::lucene::store::IndexInput RAMDirectory::openInput(const ::java::lang::String & a0, const ::org::apache::lucene::store::IOContext & a1) const
        {
          return ::org::apache::lucene::store::IndexInput(env->callObjectMethod(this$, mids$[mid_openInput_cc9a9aabe8db93df], a0.this$, a1.this$));
        }

        jlong RAMDirectory::ramBytesUsed() const
        {
          return env->callLongMethod(this$, mids$[mid_ramBytesUsed_2e5ae9edcb9b072f]);
        }

        void RAMDirectory::rename(const ::java::lang::String & a0, const ::java::lang::String & a1) const
        {
          env->callVoidMethod(this$, mids$[mid_rename_15b72f6a44ff93f2], a0.this$, a1.this$);
        }

        void RAMDirectory::sync(const ::java::util::Collection & a0) const
        {
          env->callVoidMethod(this$, mids$[mid_sync_50bc3ddc62a19f2d], a0.this$);
        }

        void RAMDirectory::syncMetaData() const
        {
          env->callVoidMethod(this$, mids$[mid_syncMetaData_f2cc1bce94666404]);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace store {
        static PyObject *t_RAMDirectory_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_RAMDirectory_instance_(PyTypeObject *type, PyObject *arg);
        static int t_RAMDirectory_init_(t_RAMDirectory *self, PyObject *args, PyObject *kwds);
        static PyObject *t_RAMDirectory_close(t_RAMDirectory *self, PyObject *args);
        static PyObject *t_RAMDirectory_createOutput(t_RAMDirectory *self, PyObject *args);
        static PyObject *t_RAMDirectory_createTempOutput(t_RAMDirectory *self, PyObject *args);
        static PyObject *t_RAMDirectory_deleteFile(t_RAMDirectory *self, PyObject *args);
        static PyObject *t_RAMDirectory_fileLength(t_RAMDirectory *self, PyObject *args);
        static PyObject *t_RAMDirectory_fileNameExists(t_RAMDirectory *self, PyObject *arg);
        static PyObject *t_RAMDirectory_getChildResources(t_RAMDirectory *self);
        static PyObject *t_RAMDirectory_getPendingDeletions(t_RAMDirectory *self, PyObject *args);
        static PyObject *t_RAMDirectory_listAll(t_RAMDirectory *self, PyObject *args);
        static PyObject *t_RAMDirectory_openInput(t_RAMDirectory *self, PyObject *args);
        static PyObject *t_RAMDirectory_ramBytesUsed(t_RAMDirectory *self);
        static PyObject *t_RAMDirectory_rename(t_RAMDirectory *self, PyObject *args);
        static PyObject *t_RAMDirectory_sync(t_RAMDirectory *self, PyObject *args);
        static PyObject *t_RAMDirectory_syncMetaData(t_RAMDirectory *self, PyObject *args);
        static PyObject *t_RAMDirectory_get__childResources(t_RAMDirectory *self, void *data);
        static PyObject *t_RAMDirectory_get__pendingDeletions(t_RAMDirectory *self, void *data);
        static PyGetSetDef t_RAMDirectory__fields_[] = {
          DECLARE_GET_FIELD(t_RAMDirectory, childResources),
          DECLARE_GET_FIELD(t_RAMDirectory, pendingDeletions),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_RAMDirectory__methods_[] = {
          DECLARE_METHOD(t_RAMDirectory, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_RAMDirectory, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_RAMDirectory, close, METH_VARARGS),
          DECLARE_METHOD(t_RAMDirectory, createOutput, METH_VARARGS),
          DECLARE_METHOD(t_RAMDirectory, createTempOutput, METH_VARARGS),
          DECLARE_METHOD(t_RAMDirectory, deleteFile, METH_VARARGS),
          DECLARE_METHOD(t_RAMDirectory, fileLength, METH_VARARGS),
          DECLARE_METHOD(t_RAMDirectory, fileNameExists, METH_O),
          DECLARE_METHOD(t_RAMDirectory, getChildResources, METH_NOARGS),
          DECLARE_METHOD(t_RAMDirectory, getPendingDeletions, METH_VARARGS),
          DECLARE_METHOD(t_RAMDirectory, listAll, METH_VARARGS),
          DECLARE_METHOD(t_RAMDirectory, openInput, METH_VARARGS),
          DECLARE_METHOD(t_RAMDirectory, ramBytesUsed, METH_NOARGS),
          DECLARE_METHOD(t_RAMDirectory, rename, METH_VARARGS),
          DECLARE_METHOD(t_RAMDirectory, sync, METH_VARARGS),
          DECLARE_METHOD(t_RAMDirectory, syncMetaData, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        static PyType_Slot PY_TYPE_SLOTS(RAMDirectory)[] = {
          { Py_tp_methods, t_RAMDirectory__methods_ },
          { Py_tp_init, (void *) t_RAMDirectory_init_ },
          { Py_tp_getset, t_RAMDirectory__fields_ },
          { 0, NULL }
        };

        static PyType_Def *PY_TYPE_BASES(RAMDirectory)[] = {
          &PY_TYPE_DEF(::org::apache::lucene::store::BaseDirectory),
          NULL
        };

        DEFINE_TYPE(RAMDirectory, t_RAMDirectory, RAMDirectory);

        void t_RAMDirectory::install(PyObject *module)
        {
          installType(&PY_TYPE(RAMDirectory), &PY_TYPE_DEF(RAMDirectory), module, "RAMDirectory", 0);
        }

        void t_RAMDirectory::initialize(PyObject *module)
        {
          PyObject_SetAttrString((PyObject *) PY_TYPE(RAMDirectory), "class_", make_descriptor(RAMDirectory::initializeClass, 1));
          PyObject_SetAttrString((PyObject *) PY_TYPE(RAMDirectory), "wrapfn_", make_descriptor(t_RAMDirectory::wrap_jobject));
          PyObject_SetAttrString((PyObject *) PY_TYPE(RAMDirectory), "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_RAMDirectory_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, RAMDirectory::initializeClass, 1)))
            return NULL;
          return t_RAMDirectory::wrap_Object(RAMDirectory(((t_RAMDirectory *) arg)->object.this$));
        }
        static PyObject *t_RAMDirectory_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, RAMDirectory::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_RAMDirectory_init_(t_RAMDirectory *self, PyObject *args, PyObject *kwds)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 0:
            {
              RAMDirectory object((jobject) NULL);

              INT_CALL(object = RAMDirectory());
              self->object = object;
              break;
            }
           case 1:
            {
              ::org::apache::lucene::store::LockFactory a0((jobject) NULL);
              RAMDirectory object((jobject) NULL);

              if (!parseArgs(args, "k", ::org::apache::lucene::store::LockFactory::initializeClass, &a0))
              {
                INT_CALL(object = RAMDirectory(a0));
                self->object = object;
                break;
              }
            }
            goto err;
           case 2:
            {
              ::org::apache::lucene::store::FSDirectory a0((jobject) NULL);
              ::org::apache::lucene::store::IOContext a1((jobject) NULL);
              RAMDirectory object((jobject) NULL);

              if (!parseArgs(args, "kk", ::org::apache::lucene::store::FSDirectory::initializeClass, ::org::apache::lucene::store::IOContext::initializeClass, &a0, &a1))
              {
                INT_CALL(object = RAMDirectory(a0, a1));
                self->object = object;
                break;
              }
            }
           default:
           err:
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }

        static PyObject *t_RAMDirectory_close(t_RAMDirectory *self, PyObject *args)
        {

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(self->object.close());
            Py_RETURN_NONE;
          }

          return callSuper(PY_TYPE(RAMDirectory), (PyObject *) self, "close", args, 2);
        }

        static PyObject *t_RAMDirectory_createOutput(t_RAMDirectory *self, PyObject *args)
        {
          ::java::lang::String a0((jobject) NULL);
          ::org::apache::lucene::store::IOContext a1((jobject) NULL);
          ::org::apache::lucene::store::IndexOutput result((jobject) NULL);

          if (!parseArgs(args, "sk", ::org::apache::lucene::store::IOContext::initializeClass, &a0, &a1))
          {
            OBJ_CALL(result = self->object.createOutput(a0, a1));
            return ::org::apache::lucene::store::t_IndexOutput::wrap_Object(result);
          }

          return callSuper(PY_TYPE(RAMDirectory), (PyObject *) self, "createOutput", args, 2);
        }

        static PyObject *t_RAMDirectory_createTempOutput(t_RAMDirectory *self, PyObject *args)
        {
          ::java::lang::String a0((jobject) NULL);
          ::java::lang::String a1((jobject) NULL);
          ::org::apache::lucene::store::IOContext a2((jobject) NULL);
          ::org::apache::lucene::store::IndexOutput result((jobject) NULL);

          if (!parseArgs(args, "ssk", ::org::apache::lucene::store::IOContext::initializeClass, &a0, &a1, &a2))
          {
            OBJ_CALL(result = self->object.createTempOutput(a0, a1, a2));
            return ::org::apache::lucene::store::t_IndexOutput::wrap_Object(result);
          }

          return callSuper(PY_TYPE(RAMDirectory), (PyObject *) self, "createTempOutput", args, 2);
        }

        static PyObject *t_RAMDirectory_deleteFile(t_RAMDirectory *self, PyObject *args)
        {
          ::java::lang::String a0((jobject) NULL);

          if (!parseArgs(args, "s", &a0))
          {
            OBJ_CALL(self->object.deleteFile(a0));
            Py_RETURN_NONE;
          }

          return callSuper(PY_TYPE(RAMDirectory), (PyObject *) self, "deleteFile", args, 2);
        }

        static PyObject *t_RAMDirectory_fileLength(t_RAMDirectory *self, PyObject *args)
        {
          ::java::lang::String a0((jobject) NULL);
          jlong result;

          if (!parseArgs(args, "s", &a0))
          {
            OBJ_CALL(result = self->object.fileLength(a0));
            return PyLong_FromLongLong((PY_LONG_LONG) result);
          }

          return callSuper(PY_TYPE(RAMDirectory), (PyObject *) self, "fileLength", args, 2);
        }

        static PyObject *t_RAMDirectory_fileNameExists(t_RAMDirectory *self, PyObject *arg)
        {
          ::java::lang::String a0((jobject) NULL);
          jboolean result;

          if (!parseArg(arg, "s", &a0))
          {
            OBJ_CALL(result = self->object.fileNameExists(a0));
            Py_RETURN_BOOL(result);
          }

          PyErr_SetArgsError((PyObject *) self, "fileNameExists", arg);
          return NULL;
        }

        static PyObject *t_RAMDirectory_getChildResources(t_RAMDirectory *self)
        {
          ::java::util::Collection result((jobject) NULL);
          OBJ_CALL(result = self->object.getChildResources());
          return ::java::util::t_Collection::wrap_Object(result, ::org::apache::lucene::util::PY_TYPE(Accountable));
        }

        static PyObject *t_RAMDirectory_getPendingDeletions(t_RAMDirectory *self, PyObject *args)
        {
          ::java::util::Set result((jobject) NULL);

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.getPendingDeletions());
            return ::java::util::t_Set::wrap_Object(result, ::java::lang::PY_TYPE(String));
          }

          return callSuper(PY_TYPE(RAMDirectory), (PyObject *) self, "getPendingDeletions", args, 2);
        }

        static PyObject *t_RAMDirectory_listAll(t_RAMDirectory *self, PyObject *args)
        {
          JArray< ::java::lang::String > result((jobject) NULL);

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.listAll());
            return JArray<jstring>(result.this$).wrap();
          }

          return callSuper(PY_TYPE(RAMDirectory), (PyObject *) self, "listAll", args, 2);
        }

        static PyObject *t_RAMDirectory_openInput(t_RAMDirectory *self, PyObject *args)
        {
          ::java::lang::String a0((jobject) NULL);
          ::org::apache::lucene::store::IOContext a1((jobject) NULL);
          ::org::apache::lucene::store::IndexInput result((jobject) NULL);

          if (!parseArgs(args, "sk", ::org::apache::lucene::store::IOContext::initializeClass, &a0, &a1))
          {
            OBJ_CALL(result = self->object.openInput(a0, a1));
            return ::org::apache::lucene::store::t_IndexInput::wrap_Object(result);
          }

          return callSuper(PY_TYPE(RAMDirectory), (PyObject *) self, "openInput", args, 2);
        }

        static PyObject *t_RAMDirectory_ramBytesUsed(t_RAMDirectory *self)
        {
          jlong result;
          OBJ_CALL(result = self->object.ramBytesUsed());
          return PyLong_FromLongLong((PY_LONG_LONG) result);
        }

        static PyObject *t_RAMDirectory_rename(t_RAMDirectory *self, PyObject *args)
        {
          ::java::lang::String a0((jobject) NULL);
          ::java::lang::String a1((jobject) NULL);

          if (!parseArgs(args, "ss", &a0, &a1))
          {
            OBJ_CALL(self->object.rename(a0, a1));
            Py_RETURN_NONE;
          }

          return callSuper(PY_TYPE(RAMDirectory), (PyObject *) self, "rename", args, 2);
        }

        static PyObject *t_RAMDirectory_sync(t_RAMDirectory *self, PyObject *args)
        {
          ::java::util::Collection a0((jobject) NULL);
          PyTypeObject **p0;

          if (!parseArgs(args, "K", ::java::util::Collection::initializeClass, &a0, &p0, ::java::util::t_Collection::parameters_))
          {
            OBJ_CALL(self->object.sync(a0));
            Py_RETURN_NONE;
          }

          return callSuper(PY_TYPE(RAMDirectory), (PyObject *) self, "sync", args, 2);
        }

        static PyObject *t_RAMDirectory_syncMetaData(t_RAMDirectory *self, PyObject *args)
        {

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(self->object.syncMetaData());
            Py_RETURN_NONE;
          }

          return callSuper(PY_TYPE(RAMDirectory), (PyObject *) self, "syncMetaData", args, 2);
        }

        static PyObject *t_RAMDirectory_get__childResources(t_RAMDirectory *self, void *data)
        {
          ::java::util::Collection value((jobject) NULL);
          OBJ_CALL(value = self->object.getChildResources());
          return ::java::util::t_Collection::wrap_Object(value);
        }

        static PyObject *t_RAMDirectory_get__pendingDeletions(t_RAMDirectory *self, void *data)
        {
          ::java::util::Set value((jobject) NULL);
          OBJ_CALL(value = self->object.getPendingDeletions());
          return ::java::util::t_Set::wrap_Object(value);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queryparser/flexible/standard/builders/RegexpQueryNodeBuilder.h"
#include "org/apache/lucene/search/RegexpQuery.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/queryparser/flexible/core/QueryNodeException.h"
#include "org/apache/lucene/queryparser/flexible/standard/builders/StandardQueryBuilder.h"
#include "org/apache/lucene/queryparser/flexible/core/nodes/QueryNode.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace standard {
            namespace builders {

              ::java::lang::Class *RegexpQueryNodeBuilder::class$ = NULL;
              jmethodID *RegexpQueryNodeBuilder::mids$ = NULL;
              bool RegexpQueryNodeBuilder::live$ = false;

              jclass RegexpQueryNodeBuilder::initializeClass(bool getOnly)
              {
                if (getOnly)
                  return (jclass) (live$ ? class$->this$ : NULL);
                if (class$ == NULL)
                {
                  jclass cls = (jclass) env->findClass("org/apache/lucene/queryparser/flexible/standard/builders/RegexpQueryNodeBuilder");

                  mids$ = new jmethodID[max_mid];
                  mids$[mid_init$_f2cc1bce94666404] = env->getMethodID(cls, "<init>", "()V");
                  mids$[mid_build_aba1d6c552c89c17] = env->getMethodID(cls, "build", "(Lorg/apache/lucene/queryparser/flexible/core/nodes/QueryNode;)Lorg/apache/lucene/search/RegexpQuery;");

                  class$ = new ::java::lang::Class(cls);
                  live$ = true;
                }
                return (jclass) class$->this$;
              }

              RegexpQueryNodeBuilder::RegexpQueryNodeBuilder() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_f2cc1bce94666404)) {}

              ::org::apache::lucene::search::RegexpQuery RegexpQueryNodeBuilder::build(const ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode & a0) const
              {
                return ::org::apache::lucene::search::RegexpQuery(env->callObjectMethod(this$, mids$[mid_build_aba1d6c552c89c17], a0.this$));
              }
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace standard {
            namespace builders {
              static PyObject *t_RegexpQueryNodeBuilder_cast_(PyTypeObject *type, PyObject *arg);
              static PyObject *t_RegexpQueryNodeBuilder_instance_(PyTypeObject *type, PyObject *arg);
              static int t_RegexpQueryNodeBuilder_init_(t_RegexpQueryNodeBuilder *self, PyObject *args, PyObject *kwds);
              static PyObject *t_RegexpQueryNodeBuilder_build(t_RegexpQueryNodeBuilder *self, PyObject *arg);

              static PyMethodDef t_RegexpQueryNodeBuilder__methods_[] = {
                DECLARE_METHOD(t_RegexpQueryNodeBuilder, cast_, METH_O | METH_CLASS),
                DECLARE_METHOD(t_RegexpQueryNodeBuilder, instance_, METH_O | METH_CLASS),
                DECLARE_METHOD(t_RegexpQueryNodeBuilder, build, METH_O),
                { NULL, NULL, 0, NULL }
              };

              static PyType_Slot PY_TYPE_SLOTS(RegexpQueryNodeBuilder)[] = {
                { Py_tp_methods, t_RegexpQueryNodeBuilder__methods_ },
                { Py_tp_init, (void *) t_RegexpQueryNodeBuilder_init_ },
                { 0, NULL }
              };

              static PyType_Def *PY_TYPE_BASES(RegexpQueryNodeBuilder)[] = {
                &PY_TYPE_DEF(::java::lang::Object),
                NULL
              };

              DEFINE_TYPE(RegexpQueryNodeBuilder, t_RegexpQueryNodeBuilder, RegexpQueryNodeBuilder);

              void t_RegexpQueryNodeBuilder::install(PyObject *module)
              {
                installType(&PY_TYPE(RegexpQueryNodeBuilder), &PY_TYPE_DEF(RegexpQueryNodeBuilder), module, "RegexpQueryNodeBuilder", 0);
              }

              void t_RegexpQueryNodeBuilder::initialize(PyObject *module)
              {
                PyObject_SetAttrString((PyObject *) PY_TYPE(RegexpQueryNodeBuilder), "class_", make_descriptor(RegexpQueryNodeBuilder::initializeClass, 1));
                PyObject_SetAttrString((PyObject *) PY_TYPE(RegexpQueryNodeBuilder), "wrapfn_", make_descriptor(t_RegexpQueryNodeBuilder::wrap_jobject));
                PyObject_SetAttrString((PyObject *) PY_TYPE(RegexpQueryNodeBuilder), "boxfn_", make_descriptor(boxObject));
              }

              static PyObject *t_RegexpQueryNodeBuilder_cast_(PyTypeObject *type, PyObject *arg)
              {
                if (!(arg = castCheck(arg, RegexpQueryNodeBuilder::initializeClass, 1)))
                  return NULL;
                return t_RegexpQueryNodeBuilder::wrap_Object(RegexpQueryNodeBuilder(((t_RegexpQueryNodeBuilder *) arg)->object.this$));
              }
              static PyObject *t_RegexpQueryNodeBuilder_instance_(PyTypeObject *type, PyObject *arg)
              {
                if (!castCheck(arg, RegexpQueryNodeBuilder::initializeClass, 0))
                  Py_RETURN_FALSE;
                Py_RETURN_TRUE;
              }

              static int t_RegexpQueryNodeBuilder_init_(t_RegexpQueryNodeBuilder *self, PyObject *args, PyObject *kwds)
              {
                RegexpQueryNodeBuilder object((jobject) NULL);

                INT_CALL(object = RegexpQueryNodeBuilder());
                self->object = object;

                return 0;
              }

              static PyObject *t_RegexpQueryNodeBuilder_build(t_RegexpQueryNodeBuilder *self, PyObject *arg)
              {
                ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode a0((jobject) NULL);
                ::org::apache::lucene::search::RegexpQuery result((jobject) NULL);

                if (!parseArg(arg, "k", ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode::initializeClass, &a0))
                {
                  OBJ_CALL(result = self->object.build(a0));
                  return ::org::apache::lucene::search::t_RegexpQuery::wrap_Object(result);
                }

                PyErr_SetArgsError((PyObject *) self, "build", arg);
                return NULL;
              }
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queries/function/docvalues/FloatDocValues.h"
#include "java/lang/Class.h"
#include "java/lang/Object.h"
#include "org/apache/lucene/queries/function/FunctionValues$ValueFiller.h"
#include "java/lang/String.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/queries/function/ValueSource.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queries {
        namespace function {
          namespace docvalues {

            ::java::lang::Class *FloatDocValues::class$ = NULL;
            jmethodID *FloatDocValues::mids$ = NULL;
            bool FloatDocValues::live$ = false;

            jclass FloatDocValues::initializeClass(bool getOnly)
            {
              if (getOnly)
                return (jclass) (live$ ? class$->this$ : NULL);
              if (class$ == NULL)
              {
                jclass cls = (jclass) env->findClass("org/apache/lucene/queries/function/docvalues/FloatDocValues");

                mids$ = new jmethodID[max_mid];
                mids$[mid_init$_31c80a0040f07e19] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/queries/function/ValueSource;)V");
                mids$[mid_boolVal_a1d30e1ee40c89a2] = env->getMethodID(cls, "boolVal", "(I)Z");
                mids$[mid_byteVal_4d5233a30cda5878] = env->getMethodID(cls, "byteVal", "(I)B");
                mids$[mid_doubleVal_f3ddedc0b6f18620] = env->getMethodID(cls, "doubleVal", "(I)D");
                mids$[mid_floatVal_384f078ef4b8f931] = env->getMethodID(cls, "floatVal", "(I)F");
                mids$[mid_getValueFiller_e87ccfe6e71ebd5e] = env->getMethodID(cls, "getValueFiller", "()Lorg/apache/lucene/queries/function/FunctionValues$ValueFiller;");
                mids$[mid_intVal_1e143afe1894d213] = env->getMethodID(cls, "intVal", "(I)I");
                mids$[mid_longVal_0f1d64a641e8af53] = env->getMethodID(cls, "longVal", "(I)J");
                mids$[mid_objectVal_b15c79acb15c2870] = env->getMethodID(cls, "objectVal", "(I)Ljava/lang/Object;");
                mids$[mid_shortVal_464e34d67b70dc89] = env->getMethodID(cls, "shortVal", "(I)S");
                mids$[mid_strVal_d7593acad64ef635] = env->getMethodID(cls, "strVal", "(I)Ljava/lang/String;");
                mids$[mid_toString_d7593acad64ef635] = env->getMethodID(cls, "toString", "(I)Ljava/lang/String;");

                class$ = new ::java::lang::Class(cls);
                live$ = true;
              }
              return (jclass) class$->this$;
            }

            FloatDocValues::FloatDocValues(const ::org::apache::lucene::queries::function::ValueSource & a0) : ::org::apache::lucene::queries::function::FunctionValues(env->newObject(initializeClass, &mids$, mid_init$_31c80a0040f07e19, a0.this$)) {}

            jboolean FloatDocValues::boolVal(jint a0) const
            {
              return env->callBooleanMethod(this$, mids$[mid_boolVal_a1d30e1ee40c89a2], a0);
            }

            jbyte FloatDocValues::byteVal(jint a0) const
            {
              return env->callByteMethod(this$, mids$[mid_byteVal_4d5233a30cda5878], a0);
            }

            jdouble FloatDocValues::doubleVal(jint a0) const
            {
              return env->callDoubleMethod(this$, mids$[mid_doubleVal_f3ddedc0b6f18620], a0);
            }

            jfloat FloatDocValues::floatVal(jint a0) const
            {
              return env->callFloatMethod(this$, mids$[mid_floatVal_384f078ef4b8f931], a0);
            }

            ::org::apache::lucene::queries::function::FunctionValues$ValueFiller FloatDocValues::getValueFiller() const
            {
              return ::org::apache::lucene::queries::function::FunctionValues$ValueFiller(env->callObjectMethod(this$, mids$[mid_getValueFiller_e87ccfe6e71ebd5e]));
            }

            jint FloatDocValues::intVal(jint a0) const
            {
              return env->callIntMethod(this$, mids$[mid_intVal_1e143afe1894d213], a0);
            }

            jlong FloatDocValues::longVal(jint a0) const
            {
              return env->callLongMethod(this$, mids$[mid_longVal_0f1d64a641e8af53], a0);
            }

            ::java::lang::Object FloatDocValues::objectVal(jint a0) const
            {
              return ::java::lang::Object(env->callObjectMethod(this$, mids$[mid_objectVal_b15c79acb15c2870], a0));
            }

            jshort FloatDocValues::shortVal(jint a0) const
            {
              return env->callShortMethod(this$, mids$[mid_shortVal_464e34d67b70dc89], a0);
            }

            ::java::lang::String FloatDocValues::strVal(jint a0) const
            {
              return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_strVal_d7593acad64ef635], a0));
            }

            ::java::lang::String FloatDocValues::toString(jint a0) const
            {
              return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_d7593acad64ef635], a0));
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queries {
        namespace function {
          namespace docvalues {
            static PyObject *t_FloatDocValues_cast_(PyTypeObject *type, PyObject *arg);
            static PyObject *t_FloatDocValues_instance_(PyTypeObject *type, PyObject *arg);
            static int t_FloatDocValues_init_(t_FloatDocValues *self, PyObject *args, PyObject *kwds);
            static PyObject *t_FloatDocValues_boolVal(t_FloatDocValues *self, PyObject *args);
            static PyObject *t_FloatDocValues_byteVal(t_FloatDocValues *self, PyObject *args);
            static PyObject *t_FloatDocValues_doubleVal(t_FloatDocValues *self, PyObject *args);
            static PyObject *t_FloatDocValues_floatVal(t_FloatDocValues *self, PyObject *args);
            static PyObject *t_FloatDocValues_getValueFiller(t_FloatDocValues *self, PyObject *args);
            static PyObject *t_FloatDocValues_intVal(t_FloatDocValues *self, PyObject *args);
            static PyObject *t_FloatDocValues_longVal(t_FloatDocValues *self, PyObject *args);
            static PyObject *t_FloatDocValues_objectVal(t_FloatDocValues *self, PyObject *args);
            static PyObject *t_FloatDocValues_shortVal(t_FloatDocValues *self, PyObject *args);
            static PyObject *t_FloatDocValues_strVal(t_FloatDocValues *self, PyObject *args);
            static PyObject *t_FloatDocValues_toString(t_FloatDocValues *self, PyObject *args);
            static PyObject *t_FloatDocValues_get__valueFiller(t_FloatDocValues *self, void *data);
            static PyGetSetDef t_FloatDocValues__fields_[] = {
              DECLARE_GET_FIELD(t_FloatDocValues, valueFiller),
              { NULL, NULL, NULL, NULL, NULL }
            };

            static PyMethodDef t_FloatDocValues__methods_[] = {
              DECLARE_METHOD(t_FloatDocValues, cast_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_FloatDocValues, instance_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_FloatDocValues, boolVal, METH_VARARGS),
              DECLARE_METHOD(t_FloatDocValues, byteVal, METH_VARARGS),
              DECLARE_METHOD(t_FloatDocValues, doubleVal, METH_VARARGS),
              DECLARE_METHOD(t_FloatDocValues, floatVal, METH_VARARGS),
              DECLARE_METHOD(t_FloatDocValues, getValueFiller, METH_VARARGS),
              DECLARE_METHOD(t_FloatDocValues, intVal, METH_VARARGS),
              DECLARE_METHOD(t_FloatDocValues, longVal, METH_VARARGS),
              DECLARE_METHOD(t_FloatDocValues, objectVal, METH_VARARGS),
              DECLARE_METHOD(t_FloatDocValues, shortVal, METH_VARARGS),
              DECLARE_METHOD(t_FloatDocValues, strVal, METH_VARARGS),
              DECLARE_METHOD(t_FloatDocValues, toString, METH_VARARGS),
              { NULL, NULL, 0, NULL }
            };

            static PyType_Slot PY_TYPE_SLOTS(FloatDocValues)[] = {
              { Py_tp_methods, t_FloatDocValues__methods_ },
              { Py_tp_init, (void *) t_FloatDocValues_init_ },
              { Py_tp_getset, t_FloatDocValues__fields_ },
              { 0, NULL }
            };

            static PyType_Def *PY_TYPE_BASES(FloatDocValues)[] = {
              &PY_TYPE_DEF(::org::apache::lucene::queries::function::FunctionValues),
              NULL
            };

            DEFINE_TYPE(FloatDocValues, t_FloatDocValues, FloatDocValues);

            void t_FloatDocValues::install(PyObject *module)
            {
              installType(&PY_TYPE(FloatDocValues), &PY_TYPE_DEF(FloatDocValues), module, "FloatDocValues", 0);
            }

            void t_FloatDocValues::initialize(PyObject *module)
            {
              PyObject_SetAttrString((PyObject *) PY_TYPE(FloatDocValues), "class_", make_descriptor(FloatDocValues::initializeClass, 1));
              PyObject_SetAttrString((PyObject *) PY_TYPE(FloatDocValues), "wrapfn_", make_descriptor(t_FloatDocValues::wrap_jobject));
              PyObject_SetAttrString((PyObject *) PY_TYPE(FloatDocValues), "boxfn_", make_descriptor(boxObject));
            }

            static PyObject *t_FloatDocValues_cast_(PyTypeObject *type, PyObject *arg)
            {
              if (!(arg = castCheck(arg, FloatDocValues::initializeClass, 1)))
                return NULL;
              return t_FloatDocValues::wrap_Object(FloatDocValues(((t_FloatDocValues *) arg)->object.this$));
            }
            static PyObject *t_FloatDocValues_instance_(PyTypeObject *type, PyObject *arg)
            {
              if (!castCheck(arg, FloatDocValues::initializeClass, 0))
                Py_RETURN_FALSE;
              Py_RETURN_TRUE;
            }

            static int t_FloatDocValues_init_(t_FloatDocValues *self, PyObject *args, PyObject *kwds)
            {
              ::org::apache::lucene::queries::function::ValueSource a0((jobject) NULL);
              FloatDocValues object((jobject) NULL);

              if (!parseArgs(args, "k", ::org::apache::lucene::queries::function::ValueSource::initializeClass, &a0))
              {
                INT_CALL(object = FloatDocValues(a0));
                self->object = object;
              }
              else
              {
                PyErr_SetArgsError((PyObject *) self, "__init__", args);
                return -1;
              }

              return 0;
            }

            static PyObject *t_FloatDocValues_boolVal(t_FloatDocValues *self, PyObject *args)
            {
              jint a0;
              jboolean result;

              if (!parseArgs(args, "I", &a0))
              {
                OBJ_CALL(result = self->object.boolVal(a0));
                Py_RETURN_BOOL(result);
              }

              return callSuper(PY_TYPE(FloatDocValues), (PyObject *) self, "boolVal", args, 2);
            }

            static PyObject *t_FloatDocValues_byteVal(t_FloatDocValues *self, PyObject *args)
            {
              jint a0;
              jbyte result;

              if (!parseArgs(args, "I", &a0))
              {
                OBJ_CALL(result = self->object.byteVal(a0));
                return PyLong_FromLong((long) result);
              }

              return callSuper(PY_TYPE(FloatDocValues), (PyObject *) self, "byteVal", args, 2);
            }

            static PyObject *t_FloatDocValues_doubleVal(t_FloatDocValues *self, PyObject *args)
            {
              jint a0;
              jdouble result;

              if (!parseArgs(args, "I", &a0))
              {
                OBJ_CALL(result = self->object.doubleVal(a0));
                return PyFloat_FromDouble((double) result);
              }

              return callSuper(PY_TYPE(FloatDocValues), (PyObject *) self, "doubleVal", args, 2);
            }

            static PyObject *t_FloatDocValues_floatVal(t_FloatDocValues *self, PyObject *args)
            {
              jint a0;
              jfloat result;

              if (!parseArgs(args, "I", &a0))
              {
                OBJ_CALL(result = self->object.floatVal(a0));
                return PyFloat_FromDouble((double) result);
              }

              return callSuper(PY_TYPE(FloatDocValues), (PyObject *) self, "floatVal", args, 2);
            }

            static PyObject *t_FloatDocValues_getValueFiller(t_FloatDocValues *self, PyObject *args)
            {
              ::org::apache::lucene::queries::function::FunctionValues$ValueFiller result((jobject) NULL);

              if (!parseArgs(args, ""))
              {
                OBJ_CALL(result = self->object.getValueFiller());
                return ::org::apache::lucene::queries::function::t_FunctionValues$ValueFiller::wrap_Object(result);
              }

              return callSuper(PY_TYPE(FloatDocValues), (PyObject *) self, "getValueFiller", args, 2);
            }

            static PyObject *t_FloatDocValues_intVal(t_FloatDocValues *self, PyObject *args)
            {
              jint a0;
              jint result;

              if (!parseArgs(args, "I", &a0))
              {
                OBJ_CALL(result = self->object.intVal(a0));
                return PyLong_FromLong((long) result);
              }

              return callSuper(PY_TYPE(FloatDocValues), (PyObject *) self, "intVal", args, 2);
            }

            static PyObject *t_FloatDocValues_longVal(t_FloatDocValues *self, PyObject *args)
            {
              jint a0;
              jlong result;

              if (!parseArgs(args, "I", &a0))
              {
                OBJ_CALL(result = self->object.longVal(a0));
                return PyLong_FromLongLong((PY_LONG_LONG) result);
              }

              return callSuper(PY_TYPE(FloatDocValues), (PyObject *) self, "longVal", args, 2);
            }

            static PyObject *t_FloatDocValues_objectVal(t_FloatDocValues *self, PyObject *args)
            {
              jint a0;
              ::java::lang::Object result((jobject) NULL);

              if (!parseArgs(args, "I", &a0))
              {
                OBJ_CALL(result = self->object.objectVal(a0));
                return ::java::lang::t_Object::wrap_Object(result);
              }

              return callSuper(PY_TYPE(FloatDocValues), (PyObject *) self, "objectVal", args, 2);
            }

            static PyObject *t_FloatDocValues_shortVal(t_FloatDocValues *self, PyObject *args)
            {
              jint a0;
              jshort result;

              if (!parseArgs(args, "I", &a0))
              {
                OBJ_CALL(result = self->object.shortVal(a0));
                return PyLong_FromLong((long) result);
              }

              return callSuper(PY_TYPE(FloatDocValues), (PyObject *) self, "shortVal", args, 2);
            }

            static PyObject *t_FloatDocValues_strVal(t_FloatDocValues *self, PyObject *args)
            {
              jint a0;
              ::java::lang::String result((jobject) NULL);

              if (!parseArgs(args, "I", &a0))
              {
                OBJ_CALL(result = self->object.strVal(a0));
                return j2p(result);
              }

              return callSuper(PY_TYPE(FloatDocValues), (PyObject *) self, "strVal", args, 2);
            }

            static PyObject *t_FloatDocValues_toString(t_FloatDocValues *self, PyObject *args)
            {
              jint a0;
              ::java::lang::String result((jobject) NULL);

              if (!parseArgs(args, "I", &a0))
              {
                OBJ_CALL(result = self->object.toString(a0));
                return j2p(result);
              }

              return callSuper(PY_TYPE(FloatDocValues), (PyObject *) self, "toString", args, 2);
            }

            static PyObject *t_FloatDocValues_get__valueFiller(t_FloatDocValues *self, void *data)
            {
              ::org::apache::lucene::queries::function::FunctionValues$ValueFiller value((jobject) NULL);
              OBJ_CALL(value = self->object.getValueFiller());
              return ::org::apache::lucene::queries::function::t_FunctionValues$ValueFiller::wrap_Object(value);
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/LeafCollector.h"
#include "org/apache/lucene/search/Scorable.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/search/DocIdSetIterator.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {

        ::java::lang::Class *LeafCollector::class$ = NULL;
        jmethodID *LeafCollector::mids$ = NULL;
        bool LeafCollector::live$ = false;

        jclass LeafCollector::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/search/LeafCollector");

            mids$ = new jmethodID[max_mid];
            mids$[mid_collect_040c4cd0390c5aff] = env->getMethodID(cls, "collect", "(I)V");
            mids$[mid_competitiveIterator_173d81d7b8f93882] = env->getMethodID(cls, "competitiveIterator", "()Lorg/apache/lucene/search/DocIdSetIterator;");
            mids$[mid_setScorer_57a565cc0113e133] = env->getMethodID(cls, "setScorer", "(Lorg/apache/lucene/search/Scorable;)V");

            class$ = new ::java::lang::Class(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        void LeafCollector::collect(jint a0) const
        {
          env->callVoidMethod(this$, mids$[mid_collect_040c4cd0390c5aff], a0);
        }

        ::org::apache::lucene::search::DocIdSetIterator LeafCollector::competitiveIterator() const
        {
          return ::org::apache::lucene::search::DocIdSetIterator(env->callObjectMethod(this$, mids$[mid_competitiveIterator_173d81d7b8f93882]));
        }

        void LeafCollector::setScorer(const ::org::apache::lucene::search::Scorable & a0) const
        {
          env->callVoidMethod(this$, mids$[mid_setScorer_57a565cc0113e133], a0.this$);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        static PyObject *t_LeafCollector_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_LeafCollector_instance_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_LeafCollector_collect(t_LeafCollector *self, PyObject *arg);
        static PyObject *t_LeafCollector_competitiveIterator(t_LeafCollector *self);
        static PyObject *t_LeafCollector_setScorer(t_LeafCollector *self, PyObject *arg);
        static int t_LeafCollector_set__scorer(t_LeafCollector *self, PyObject *arg, void *data);
        static PyGetSetDef t_LeafCollector__fields_[] = {
          DECLARE_SET_FIELD(t_LeafCollector, scorer),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_LeafCollector__methods_[] = {
          DECLARE_METHOD(t_LeafCollector, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_LeafCollector, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_LeafCollector, collect, METH_O),
          DECLARE_METHOD(t_LeafCollector, competitiveIterator, METH_NOARGS),
          DECLARE_METHOD(t_LeafCollector, setScorer, METH_O),
          { NULL, NULL, 0, NULL }
        };

        static PyType_Slot PY_TYPE_SLOTS(LeafCollector)[] = {
          { Py_tp_methods, t_LeafCollector__methods_ },
          { Py_tp_init, (void *) abstract_init },
          { Py_tp_getset, t_LeafCollector__fields_ },
          { 0, NULL }
        };

        static PyType_Def *PY_TYPE_BASES(LeafCollector)[] = {
          &PY_TYPE_DEF(::java::lang::Object),
          NULL
        };

        DEFINE_TYPE(LeafCollector, t_LeafCollector, LeafCollector);

        void t_LeafCollector::install(PyObject *module)
        {
          installType(&PY_TYPE(LeafCollector), &PY_TYPE_DEF(LeafCollector), module, "LeafCollector", 0);
        }

        void t_LeafCollector::initialize(PyObject *module)
        {
          PyObject_SetAttrString((PyObject *) PY_TYPE(LeafCollector), "class_", make_descriptor(LeafCollector::initializeClass, 1));
          PyObject_SetAttrString((PyObject *) PY_TYPE(LeafCollector), "wrapfn_", make_descriptor(t_LeafCollector::wrap_jobject));
          PyObject_SetAttrString((PyObject *) PY_TYPE(LeafCollector), "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_LeafCollector_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, LeafCollector::initializeClass, 1)))
            return NULL;
          return t_LeafCollector::wrap_Object(LeafCollector(((t_LeafCollector *) arg)->object.this$));
        }
        static PyObject *t_LeafCollector_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, LeafCollector::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static PyObject *t_LeafCollector_collect(t_LeafCollector *self, PyObject *arg)
        {
          jint a0;

          if (!parseArg(arg, "I", &a0))
          {
            OBJ_CALL(self->object.collect(a0));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "collect", arg);
          return NULL;
        }

        static PyObject *t_LeafCollector_competitiveIterator(t_LeafCollector *self)
        {
          ::org::apache::lucene::search::DocIdSetIterator result((jobject) NULL);
          OBJ_CALL(result = self->object.competitiveIterator());
          return ::org::apache::lucene::search::t_DocIdSetIterator::wrap_Object(result);
        }

        static PyObject *t_LeafCollector_setScorer(t_LeafCollector *self, PyObject *arg)
        {
          ::org::apache::lucene::search::Scorable a0((jobject) NULL);

          if (!parseArg(arg, "k", ::org::apache::lucene::search::Scorable::initializeClass, &a0))
          {
            OBJ_CALL(self->object.setScorer(a0));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "setScorer", arg);
          return NULL;
        }

        static int t_LeafCollector_set__scorer(t_LeafCollector *self, PyObject *arg, void *data)
        {
          {
            ::org::apache::lucene::search::Scorable value((jobject) NULL);
            if (!parseArg(arg, "k", ::org::apache::lucene::search::Scorable::initializeClass, &value))
            {
              INT_CALL(self->object.setScorer(value));
              return 0;
            }
          }
          PyErr_SetArgsError((PyObject *) self, "scorer", arg);
          return -1;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/ga/IrishLowerCaseFilterFactory.h"
#include "java/util/Map.h"
#include "java/lang/String.h"
#include "org/apache/lucene/analysis/TokenStream.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace ga {

          ::java::lang::Class *IrishLowerCaseFilterFactory::class$ = NULL;
          jmethodID *IrishLowerCaseFilterFactory::mids$ = NULL;
          bool IrishLowerCaseFilterFactory::live$ = false;
          ::java::lang::String *IrishLowerCaseFilterFactory::NAME = NULL;

          jclass IrishLowerCaseFilterFactory::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/ga/IrishLowerCaseFilterFactory");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_408bd889ee3beae5] = env->getMethodID(cls, "<init>", "(Ljava/util/Map;)V");
              mids$[mid_create_6de1e28d9d10cd9e] = env->getMethodID(cls, "create", "(Lorg/apache/lucene/analysis/TokenStream;)Lorg/apache/lucene/analysis/TokenStream;");
              mids$[mid_normalize_6de1e28d9d10cd9e] = env->getMethodID(cls, "normalize", "(Lorg/apache/lucene/analysis/TokenStream;)Lorg/apache/lucene/analysis/TokenStream;");

              class$ = new ::java::lang::Class(cls);
              cls = (jclass) class$->this$;

              NAME = new ::java::lang::String(env->getStaticObjectField(cls, "NAME", "Ljava/lang/String;"));
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          IrishLowerCaseFilterFactory::IrishLowerCaseFilterFactory(const ::java::util::Map & a0) : ::org::apache::lucene::analysis::util::TokenFilterFactory(env->newObject(initializeClass, &mids$, mid_init$_408bd889ee3beae5, a0.this$)) {}

          ::org::apache::lucene::analysis::TokenStream IrishLowerCaseFilterFactory::create(const ::org::apache::lucene::analysis::TokenStream & a0) const
          {
            return ::org::apache::lucene::analysis::TokenStream(env->callObjectMethod(this$, mids$[mid_create_6de1e28d9d10cd9e], a0.this$));
          }

          ::org::apache::lucene::analysis::TokenStream IrishLowerCaseFilterFactory::normalize(const ::org::apache::lucene::analysis::TokenStream & a0) const
          {
            return ::org::apache::lucene::analysis::TokenStream(env->callObjectMethod(this$, mids$[mid_normalize_6de1e28d9d10cd9e], a0.this$));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace ga {
          static PyObject *t_IrishLowerCaseFilterFactory_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_IrishLowerCaseFilterFactory_instance_(PyTypeObject *type, PyObject *arg);
          static int t_IrishLowerCaseFilterFactory_init_(t_IrishLowerCaseFilterFactory *self, PyObject *args, PyObject *kwds);
          static PyObject *t_IrishLowerCaseFilterFactory_create(t_IrishLowerCaseFilterFactory *self, PyObject *args);
          static PyObject *t_IrishLowerCaseFilterFactory_normalize(t_IrishLowerCaseFilterFactory *self, PyObject *args);

          static PyMethodDef t_IrishLowerCaseFilterFactory__methods_[] = {
            DECLARE_METHOD(t_IrishLowerCaseFilterFactory, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_IrishLowerCaseFilterFactory, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_IrishLowerCaseFilterFactory, create, METH_VARARGS),
            DECLARE_METHOD(t_IrishLowerCaseFilterFactory, normalize, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          static PyType_Slot PY_TYPE_SLOTS(IrishLowerCaseFilterFactory)[] = {
            { Py_tp_methods, t_IrishLowerCaseFilterFactory__methods_ },
            { Py_tp_init, (void *) t_IrishLowerCaseFilterFactory_init_ },
            { 0, NULL }
          };

          static PyType_Def *PY_TYPE_BASES(IrishLowerCaseFilterFactory)[] = {
            &PY_TYPE_DEF(::org::apache::lucene::analysis::util::TokenFilterFactory),
            NULL
          };

          DEFINE_TYPE(IrishLowerCaseFilterFactory, t_IrishLowerCaseFilterFactory, IrishLowerCaseFilterFactory);

          void t_IrishLowerCaseFilterFactory::install(PyObject *module)
          {
            installType(&PY_TYPE(IrishLowerCaseFilterFactory), &PY_TYPE_DEF(IrishLowerCaseFilterFactory), module, "IrishLowerCaseFilterFactory", 0);
          }

          void t_IrishLowerCaseFilterFactory::initialize(PyObject *module)
          {
            PyObject_SetAttrString((PyObject *) PY_TYPE(IrishLowerCaseFilterFactory), "class_", make_descriptor(IrishLowerCaseFilterFactory::initializeClass, 1));
            PyObject_SetAttrString((PyObject *) PY_TYPE(IrishLowerCaseFilterFactory), "wrapfn_", make_descriptor(t_IrishLowerCaseFilterFactory::wrap_jobject));
            PyObject_SetAttrString((PyObject *) PY_TYPE(IrishLowerCaseFilterFactory), "boxfn_", make_descriptor(boxObject));
            env->getClass(IrishLowerCaseFilterFactory::initializeClass);
            PyObject_SetAttrString((PyObject *) PY_TYPE(IrishLowerCaseFilterFactory), "NAME", make_descriptor(j2p(*IrishLowerCaseFilterFactory::NAME)));
          }

          static PyObject *t_IrishLowerCaseFilterFactory_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, IrishLowerCaseFilterFactory::initializeClass, 1)))
              return NULL;
            return t_IrishLowerCaseFilterFactory::wrap_Object(IrishLowerCaseFilterFactory(((t_IrishLowerCaseFilterFactory *) arg)->object.this$));
          }
          static PyObject *t_IrishLowerCaseFilterFactory_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, IrishLowerCaseFilterFactory::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_IrishLowerCaseFilterFactory_init_(t_IrishLowerCaseFilterFactory *self, PyObject *args, PyObject *kwds)
          {
            ::java::util::Map a0((jobject) NULL);
            PyTypeObject **p0;
            IrishLowerCaseFilterFactory object((jobject) NULL);

            if (!parseArgs(args, "K", ::java::util::Map::initializeClass, &a0, &p0, ::java::util::t_Map::parameters_))
            {
              INT_CALL(object = IrishLowerCaseFilterFactory(a0));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_IrishLowerCaseFilterFactory_create(t_IrishLowerCaseFilterFactory *self, PyObject *args)
          {
            ::org::apache::lucene::analysis::TokenStream a0((jobject) NULL);
            ::org::apache::lucene::analysis::TokenStream result((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::analysis::TokenStream::initializeClass, &a0))
            {
              OBJ_CALL(result = self->object.create(a0));
              return ::org::apache::lucene::analysis::t_TokenStream::wrap_Object(result);
            }

            return callSuper(PY_TYPE(IrishLowerCaseFilterFactory), (PyObject *) self, "create", args, 2);
          }

          static PyObject *t_IrishLowerCaseFilterFactory_normalize(t_IrishLowerCaseFilterFactory *self, PyObject *args)
          {
            ::org::apache::lucene::analysis::TokenStream a0((jobject) NULL);
            ::org::apache::lucene::analysis::TokenStream result((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::analysis::TokenStream::initializeClass, &a0))
            {
              OBJ_CALL(result = self->object.normalize(a0));
              return ::org::apache::lucene::analysis::t_TokenStream::wrap_Object(result);
            }

            return callSuper(PY_TYPE(IrishLowerCaseFilterFactory), (PyObject *) self, "normalize", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/spatial3d/geom/SidedPlane.h"
#include "org/apache/lucene/spatial3d/geom/SidedPlane.h"
#include "java/lang/Class.h"
#include "java/lang/Object.h"
#include "java/lang/String.h"
#include "org/apache/lucene/spatial3d/geom/PlanetModel.h"
#include "org/apache/lucene/spatial3d/geom/Vector.h"
#include "org/apache/lucene/spatial3d/geom/Membership.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace spatial3d {
        namespace geom {

          ::java::lang::Class *SidedPlane::class$ = NULL;
          jmethodID *SidedPlane::mids$ = NULL;
          jfieldID *SidedPlane::fids$ = NULL;
          bool SidedPlane::live$ = false;

          jclass SidedPlane::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/spatial3d/geom/SidedPlane");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_b51abdbbf62b08b6] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/spatial3d/geom/Vector;Lorg/apache/lucene/spatial3d/geom/Vector;)V");
              mids$[mid_init$_d3aedc82f030f463] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/spatial3d/geom/Vector;Lorg/apache/lucene/spatial3d/geom/Vector;Lorg/apache/lucene/spatial3d/geom/Vector;)V");
              mids$[mid_init$_85d2716b2576641f] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/spatial3d/geom/Vector;Lorg/apache/lucene/spatial3d/geom/PlanetModel;D)V");
              mids$[mid_init$_eb9cf036efb70b22] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/spatial3d/geom/Vector;Lorg/apache/lucene/spatial3d/geom/Vector;D)V");
              mids$[mid_init$_fb8239e4815ab633] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/spatial3d/geom/Vector;DD)V");
              mids$[mid_init$_d879e4a38d970ccc] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/spatial3d/geom/Vector;ZLorg/apache/lucene/spatial3d/geom/Vector;Lorg/apache/lucene/spatial3d/geom/Vector;)V");
              mids$[mid_init$_b3ae4bb8476b6443] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/spatial3d/geom/Vector;Lorg/apache/lucene/spatial3d/geom/Vector;DDD)V");
              mids$[mid_init$_e3db414f8ab2534c] = env->getMethodID(cls, "<init>", "(DDDLorg/apache/lucene/spatial3d/geom/Vector;Lorg/apache/lucene/spatial3d/geom/Vector;)V");
              mids$[mid_init$_a94edfa2178014c0] = env->getMethodID(cls, "<init>", "(DDDLorg/apache/lucene/spatial3d/geom/Vector;D)V");
              mids$[mid_init$_40c400a2784c3802] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/spatial3d/geom/Vector;DDDD)V");
              mids$[mid_constructNormalizedPerpendicularSidedPlane_ef8bd49696d0eb2b] = env->getStaticMethodID(cls, "constructNormalizedPerpendicularSidedPlane", "(Lorg/apache/lucene/spatial3d/geom/Vector;Lorg/apache/lucene/spatial3d/geom/Vector;Lorg/apache/lucene/spatial3d/geom/Vector;Lorg/apache/lucene/spatial3d/geom/Vector;)Lorg/apache/lucene/spatial3d/geom/SidedPlane;");
              mids$[mid_constructNormalizedThreePointSidedPlane_ef8bd49696d0eb2b] = env->getStaticMethodID(cls, "constructNormalizedThreePointSidedPlane", "(Lorg/apache/lucene/spatial3d/geom/Vector;Lorg/apache/lucene/spatial3d/geom/Vector;Lorg/apache/lucene/spatial3d/geom/Vector;Lorg/apache/lucene/spatial3d/geom/Vector;)Lorg/apache/lucene/spatial3d/geom/SidedPlane;");
              mids$[mid_equals_8b72f2dcdde6fd1d] = env->getMethodID(cls, "equals", "(Ljava/lang/Object;)Z");
              mids$[mid_hashCode_9972fcc56b44e79d] = env->getMethodID(cls, "hashCode", "()I");
              mids$[mid_isWithin_5afbc0f2c6478de6] = env->getMethodID(cls, "isWithin", "(DDD)Z");
              mids$[mid_strictlyWithin_ac70289ee56608c0] = env->getMethodID(cls, "strictlyWithin", "(Lorg/apache/lucene/spatial3d/geom/Vector;)Z");
              mids$[mid_strictlyWithin_5afbc0f2c6478de6] = env->getMethodID(cls, "strictlyWithin", "(DDD)Z");
              mids$[mid_toString_db9b55ba01e03e4b] = env->getMethodID(cls, "toString", "()Ljava/lang/String;");

              fids$ = new jfieldID[max_fid];
              fids$[fid_sigNum] = env->getFieldID(cls, "sigNum", "D");

              class$ = new ::java::lang::Class(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          SidedPlane::SidedPlane(const ::org::apache::lucene::spatial3d::geom::Vector & a0, const ::org::apache::lucene::spatial3d::geom::Vector & a1) : ::org::apache::lucene::spatial3d::geom::Plane(env->newObject(initializeClass, &mids$, mid_init$_b51abdbbf62b08b6, a0.this$, a1.this$)) {}

          SidedPlane::SidedPlane(const ::org::apache::lucene::spatial3d::geom::Vector & a0, const ::org::apache::lucene::spatial3d::geom::Vector & a1, const ::org::apache::lucene::spatial3d::geom::Vector & a2) : ::org::apache::lucene::spatial3d::geom::Plane(env->newObject(initializeClass, &mids$, mid_init$_d3aedc82f030f463, a0.this$, a1.this$, a2.this$)) {}

          SidedPlane::SidedPlane(const ::org::apache::lucene::spatial3d::geom::Vector & a0, const ::org::apache::lucene::spatial3d::geom::PlanetModel & a1, jdouble a2) : ::org::apache::lucene::spatial3d::geom::Plane(env->newObject(initializeClass, &mids$, mid_init$_85d2716b2576641f, a0.this$, a1.this$, a2)) {}

          SidedPlane::SidedPlane(const ::org::apache::lucene::spatial3d::geom::Vector & a0, const ::org::apache::lucene::spatial3d::geom::Vector & a1, jdouble a2) : ::org::apache::lucene::spatial3d::geom::Plane(env->newObject(initializeClass, &mids$, mid_init$_eb9cf036efb70b22, a0.this$, a1.this$, a2)) {}

          SidedPlane::SidedPlane(const ::org::apache::lucene::spatial3d::geom::Vector & a0, jdouble a1, jdouble a2) : ::org::apache::lucene::spatial3d::geom::Plane(env->newObject(initializeClass, &mids$, mid_init$_fb8239e4815ab633, a0.this$, a1, a2)) {}

          SidedPlane::SidedPlane(const ::org::apache::lucene::spatial3d::geom::Vector & a0, jboolean a1, const ::org::apache::lucene::spatial3d::geom::Vector & a2, const ::org::apache::lucene::spatial3d::geom::Vector & a3) : ::org::apache::lucene::spatial3d::geom::Plane(env->newObject(initializeClass, &mids$, mid_init$_d879e4a38d970ccc, a0.this$, a1, a2.this$, a3.this$)) {}

          SidedPlane::SidedPlane(const ::org::apache::lucene::spatial3d::geom::Vector & a0, const ::org::apache::lucene::spatial3d::geom::Vector & a1, jdouble a2, jdouble a3, jdouble a4) : ::org::apache::lucene::spatial3d::geom::Plane(env->newObject(initializeClass, &mids$, mid_init$_b3ae4bb8476b6443, a0.this$, a1.this$, a2, a3, a4)) {}

          SidedPlane::SidedPlane(jdouble a0, jdouble a1, jdouble a2, const ::org::apache::lucene::spatial3d::geom::Vector & a3, const ::org::apache::lucene::spatial3d::geom::Vector & a4) : ::org::apache::lucene::spatial3d::geom::Plane(env->newObject(initializeClass, &mids$, mid_init$_e3db414f8ab2534c, a0, a1, a2, a3.this$, a4.this$)) {}

          SidedPlane::SidedPlane(jdouble a0, jdouble a1, jdouble a2, const ::org::apache::lucene::spatial3d::geom::Vector & a3, jdouble a4) : ::org::apache::lucene::spatial3d::geom::Plane(env->newObject(initializeClass, &mids$, mid_init$_a94edfa2178014c0, a0, a1, a2, a3.this$, a4)) {}

          SidedPlane::SidedPlane(const ::org::apache::lucene::spatial3d::geom::Vector & a0, jdouble a1, jdouble a2, jdouble a3, jdouble a4) : ::org::apache::lucene::spatial3d::geom::Plane(env->newObject(initializeClass, &mids$, mid_init$_40c400a2784c3802, a0.this$, a1, a2, a3, a4)) {}

          SidedPlane SidedPlane::constructNormalizedPerpendicularSidedPlane(const ::org::apache::lucene::spatial3d::geom::Vector & a0, const ::org::apache::lucene::spatial3d::geom::Vector & a1, const ::org::apache::lucene::spatial3d::geom::Vector & a2, const ::org::apache::lucene::spatial3d::geom::Vector & a3)
          {
            jclass cls = env->getClass(initializeClass);
            return SidedPlane(env->callStaticObjectMethod(cls, mids$[mid_constructNormalizedPerpendicularSidedPlane_ef8bd49696d0eb2b], a0.this$, a1.this$, a2.this$, a3.this$));
          }

          SidedPlane SidedPlane::constructNormalizedThreePointSidedPlane(const ::org::apache::lucene::spatial3d::geom::Vector & a0, const ::org::apache::lucene::spatial3d::geom::Vector & a1, const ::org::apache::lucene::spatial3d::geom::Vector & a2, const ::org::apache::lucene::spatial3d::geom::Vector & a3)
          {
            jclass cls = env->getClass(initializeClass);
            return SidedPlane(env->callStaticObjectMethod(cls, mids$[mid_constructNormalizedThreePointSidedPlane_ef8bd49696d0eb2b], a0.this$, a1.this$, a2.this$, a3.this$));
          }

          jboolean SidedPlane::equals(const ::java::lang::Object & a0) const
          {
            return env->callBooleanMethod(this$, mids$[mid_equals_8b72f2dcdde6fd1d], a0.this$);
          }

          jint SidedPlane::hashCode() const
          {
            return env->callIntMethod(this$, mids$[mid_hashCode_9972fcc56b44e79d]);
          }

          jboolean SidedPlane::isWithin(jdouble a0, jdouble a1, jdouble a2) const
          {
            return env->callBooleanMethod(this$, mids$[mid_isWithin_5afbc0f2c6478de6], a0, a1, a2);
          }

          jboolean SidedPlane::strictlyWithin(const ::org::apache::lucene::spatial3d::geom::Vector & a0) const
          {
            return env->callBooleanMethod(this$, mids$[mid_strictlyWithin_ac70289ee56608c0], a0.this$);
          }

          jboolean SidedPlane::strictlyWithin(jdouble a0, jdouble a1, jdouble a2) const
          {
            return env->callBooleanMethod(this$, mids$[mid_strictlyWithin_5afbc0f2c6478de6], a0, a1, a2);
          }

          ::java::lang::String SidedPlane::toString() const
          {
            return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_db9b55ba01e03e4b]));
          }

          jdouble SidedPlane::_get_sigNum() const
          {
            return env->getDoubleField(this$, fids$[fid_sigNum]);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace spatial3d {
        namespace geom {
          static PyObject *t_SidedPlane_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_SidedPlane_instance_(PyTypeObject *type, PyObject *arg);
          static int t_SidedPlane_init_(t_SidedPlane *self, PyObject *args, PyObject *kwds);
          static PyObject *t_SidedPlane_constructNormalizedPerpendicularSidedPlane(PyTypeObject *type, PyObject *args);
          static PyObject *t_SidedPlane_constructNormalizedThreePointSidedPlane(PyTypeObject *type, PyObject *args);
          static PyObject *t_SidedPlane_equals(t_SidedPlane *self, PyObject *args);
          static PyObject *t_SidedPlane_hashCode(t_SidedPlane *self, PyObject *args);
          static PyObject *t_SidedPlane_isWithin(t_SidedPlane *self, PyObject *args);
          static PyObject *t_SidedPlane_strictlyWithin(t_SidedPlane *self, PyObject *args);
          static PyObject *t_SidedPlane_toString(t_SidedPlane *self, PyObject *args);
          static PyObject *t_SidedPlane_get__sigNum(t_SidedPlane *self, void *data);

          static PyGetSetDef t_SidedPlane__fields_[] = {
            DECLARE_GET_FIELD(t_SidedPlane, sigNum),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_SidedPlane__methods_[] = {
            DECLARE_METHOD(t_SidedPlane, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_SidedPlane, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_SidedPlane, constructNormalizedPerpendicularSidedPlane, METH_VARARGS | METH_CLASS),
            DECLARE_METHOD(t_SidedPlane, constructNormalizedThreePointSidedPlane, METH_VARARGS | METH_CLASS),
            DECLARE_METHOD(t_SidedPlane, equals, METH_VARARGS),
            DECLARE_METHOD(t_SidedPlane, hashCode, METH_VARARGS),
            DECLARE_METHOD(t_SidedPlane, isWithin, METH_VARARGS),
            DECLARE_METHOD(t_SidedPlane, strictlyWithin, METH_VARARGS),
            DECLARE_METHOD(t_SidedPlane, toString, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          static PyType_Slot PY_TYPE_SLOTS(SidedPlane)[] = {
            { Py_tp_methods, t_SidedPlane__methods_ },
            { Py_tp_init, (void *) t_SidedPlane_init_ },
            { Py_tp_getset, t_SidedPlane__fields_ },
            { 0, NULL }
          };

          static PyType_Def *PY_TYPE_BASES(SidedPlane)[] = {
            &PY_TYPE_DEF(::org::apache::lucene::spatial3d::geom::Plane),
            NULL
          };

          DEFINE_TYPE(SidedPlane, t_SidedPlane, SidedPlane);

          void t_SidedPlane::install(PyObject *module)
          {
            installType(&PY_TYPE(SidedPlane), &PY_TYPE_DEF(SidedPlane), module, "SidedPlane", 0);
          }

          void t_SidedPlane::initialize(PyObject *module)
          {
            PyObject_SetAttrString((PyObject *) PY_TYPE(SidedPlane), "class_", make_descriptor(SidedPlane::initializeClass, 1));
            PyObject_SetAttrString((PyObject *) PY_TYPE(SidedPlane), "wrapfn_", make_descriptor(t_SidedPlane::wrap_jobject));
            PyObject_SetAttrString((PyObject *) PY_TYPE(SidedPlane), "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_SidedPlane_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, SidedPlane::initializeClass, 1)))
              return NULL;
            return t_SidedPlane::wrap_Object(SidedPlane(((t_SidedPlane *) arg)->object.this$));
          }
          static PyObject *t_SidedPlane_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, SidedPlane::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_SidedPlane_init_(t_SidedPlane *self, PyObject *args, PyObject *kwds)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 2:
              {
                ::org::apache::lucene::spatial3d::geom::Vector a0((jobject) NULL);
                ::org::apache::lucene::spatial3d::geom::Vector a1((jobject) NULL);
                SidedPlane object((jobject) NULL);

                if (!parseArgs(args, "kk", ::org::apache::lucene::spatial3d::geom::Vector::initializeClass, ::org::apache::lucene::spatial3d::geom::Vector::initializeClass, &a0, &a1))
                {
                  INT_CALL(object = SidedPlane(a0, a1));
                  self->object = object;
                  break;
                }
              }
              goto err;
             case 3:
              {
                ::org::apache::lucene::spatial3d::geom::Vector a0((jobject) NULL);
                ::org::apache::lucene::spatial3d::geom::Vector a1((jobject) NULL);
                ::org::apache::lucene::spatial3d::geom::Vector a2((jobject) NULL);
                SidedPlane object((jobject) NULL);

                if (!parseArgs(args, "kkk", ::org::apache::lucene::spatial3d::geom::Vector::initializeClass, ::org::apache::lucene::spatial3d::geom::Vector::initializeClass, ::org::apache::lucene::spatial3d::geom::Vector::initializeClass, &a0, &a1, &a2))
                {
                  INT_CALL(object = SidedPlane(a0, a1, a2));
                  self->object = object;
                  break;
                }
              }
              {
                ::org::apache::lucene::spatial3d::geom::Vector a0((jobject) NULL);
                ::org::apache::lucene::spatial3d::geom::PlanetModel a1((jobject) NULL);
                jdouble a2;
                SidedPlane object((jobject) NULL);

                if (!parseArgs(args, "kkD", ::org::apache::lucene::spatial3d::geom::Vector::initializeClass, ::org::apache::lucene::spatial3d::geom::PlanetModel::initializeClass, &a0, &a1, &a2))
                {
                  INT_CALL(object = SidedPlane(a0, a1, a2));
                  self->object = object;
                  break;
                }
              }
              {
                ::org::apache::lucene::spatial3d::geom::Vector a0((jobject) NULL);
                ::org::apache::lucene::spatial3d::geom::Vector a1((jobject) NULL);
                jdouble a2;
                SidedPlane object((jobject) NULL);

                if (!parseArgs(args, "kkD", ::org::apache::lucene::spatial3d::geom::Vector::initializeClass, ::org::apache::lucene::spatial3d::geom::Vector::initializeClass, &a0, &a1, &a2))
                {
                  INT_CALL(object = SidedPlane(a0, a1, a2));
                  self->object = object;
                  break;
                }
              }
              {
                ::org::apache::lucene::spatial3d::geom::Vector a0((jobject) NULL);
                jdouble a1;
                jdouble a2;
                SidedPlane object((jobject) NULL);

                if (!parseArgs(args, "kDD", ::org::apache::lucene::spatial3d::geom::Vector::initializeClass, &a0, &a1, &a2))
                {
                  INT_CALL(object = SidedPlane(a0, a1, a2));
                  self->object = object;
                  break;
                }
              }
              goto err;
             case 4:
              {
                ::org::apache::lucene::spatial3d::geom::Vector a0((jobject) NULL);
                jboolean a1;
                ::org::apache::lucene::spatial3d::geom::Vector a2((jobject) NULL);
                ::org::apache::lucene::spatial3d::geom::Vector a3((jobject) NULL);
                SidedPlane object((jobject) NULL);

                if (!parseArgs(args, "kZkk", ::org::apache::lucene::spatial3d::geom::Vector::initializeClass, ::org::apache::lucene::spatial3d::geom::Vector::initializeClass, ::org::apache::lucene::spatial3d::geom::Vector::initializeClass, &a0, &a1, &a2, &a3))
                {
                  INT_CALL(object = SidedPlane(a0, a1, a2, a3));
                  self->object = object;
                  break;
                }
              }
              goto err;
             case 5:
              {
                ::org::apache::lucene::spatial3d::geom::Vector a0((jobject) NULL);
                ::org::apache::lucene::spatial3d::geom::Vector a1((jobject) NULL);
                jdouble a2;
                jdouble a3;
                jdouble a4;
                SidedPlane object((jobject) NULL);

                if (!parseArgs(args, "kkDDD", ::org::apache::lucene::spatial3d::geom::Vector::initializeClass, ::org::apache::lucene::spatial3d::geom::Vector::initializeClass, &a0, &a1, &a2, &a3, &a4))
                {
                  INT_CALL(object = SidedPlane(a0, a1, a2, a3, a4));
                  self->object = object;
                  break;
                }
              }
              {
                jdouble a0;
                jdouble a1;
                jdouble a2;
                ::org::apache::lucene::spatial3d::geom::Vector a3((jobject) NULL);
                ::org::apache::lucene::spatial3d::geom::Vector a4((jobject) NULL);
                SidedPlane object((jobject) NULL);

                if (!parseArgs(args, "DDDkk", ::org::apache::lucene::spatial3d::geom::Vector::initializeClass, ::org::apache::lucene::spatial3d::geom::Vector::initializeClass, &a0, &a1, &a2, &a3, &a4))
                {
                  INT_CALL(object = SidedPlane(a0, a1, a2, a3, a4));
                  self->object = object;
                  break;
                }
              }
              {
                jdouble a0;
                jdouble a1;
                jdouble a2;
                ::org::apache::lucene::spatial3d::geom::Vector a3((jobject) NULL);
                jdouble a4;
                SidedPlane object((jobject) NULL);

                if (!parseArgs(args, "DDDkD", ::org::apache::lucene::spatial3d::geom::Vector::initializeClass, &a0, &a1, &a2, &a3, &a4))
                {
                  INT_CALL(object = SidedPlane(a0, a1, a2, a3, a4));
                  self->object = object;
                  break;
                }
              }
              {
                ::org::apache::lucene::spatial3d::geom::Vector a0((jobject) NULL);
                jdouble a1;
                jdouble a2;
                jdouble a3;
                jdouble a4;
                SidedPlane object((jobject) NULL);

                if (!parseArgs(args, "kDDDD", ::org::apache::lucene::spatial3d::geom::Vector::initializeClass, &a0, &a1, &a2, &a3, &a4))
                {
                  INT_CALL(object = SidedPlane(a0, a1, a2, a3, a4));
                  self->object = object;
                  break;
                }
              }
             default:
             err:
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_SidedPlane_constructNormalizedPerpendicularSidedPlane(PyTypeObject *type, PyObject *args)
          {
            ::org::apache::lucene::spatial3d::geom::Vector a0((jobject) NULL);
            ::org::apache::lucene::spatial3d::geom::Vector a1((jobject) NULL);
            ::org::apache::lucene::spatial3d::geom::Vector a2((jobject) NULL);
            ::org::apache::lucene::spatial3d::geom::Vector a3((jobject) NULL);
            SidedPlane result((jobject) NULL);

            if (!parseArgs(args, "kkkk", ::org::apache::lucene::spatial3d::geom::Vector::initializeClass, ::org::apache::lucene::spatial3d::geom::Vector::initializeClass, ::org::apache::lucene::spatial3d::geom::Vector::initializeClass, ::org::apache::lucene::spatial3d::geom::Vector::initializeClass, &a0, &a1, &a2, &a3))
            {
              OBJ_CALL(result = ::org::apache::lucene::spatial3d::geom::SidedPlane::constructNormalizedPerpendicularSidedPlane(a0, a1, a2, a3));
              return t_SidedPlane::wrap_Object(result);
            }

            PyErr_SetArgsError(type, "constructNormalizedPerpendicularSidedPlane", args);
            return NULL;
          }

          static PyObject *t_SidedPlane_constructNormalizedThreePointSidedPlane(PyTypeObject *type, PyObject *args)
          {
            ::org::apache::lucene::spatial3d::geom::Vector a0((jobject) NULL);
            ::org::apache::lucene::spatial3d::geom::Vector a1((jobject) NULL);
            ::org::apache::lucene::spatial3d::geom::Vector a2((jobject) NULL);
            ::org::apache::lucene::spatial3d::geom::Vector a3((jobject) NULL);
            SidedPlane result((jobject) NULL);

            if (!parseArgs(args, "kkkk", ::org::apache::lucene::spatial3d::geom::Vector::initializeClass, ::org::apache::lucene::spatial3d::geom::Vector::initializeClass, ::org::apache::lucene::spatial3d::geom::Vector::initializeClass, ::org::apache::lucene::spatial3d::geom::Vector::initializeClass, &a0, &a1, &a2, &a3))
            {
              OBJ_CALL(result = ::org::apache::lucene::spatial3d::geom::SidedPlane::constructNormalizedThreePointSidedPlane(a0, a1, a2, a3));
              return t_SidedPlane::wrap_Object(result);
            }

            PyErr_SetArgsError(type, "constructNormalizedThreePointSidedPlane", args);
            return NULL;
          }

          static PyObject *t_SidedPlane_equals(t_SidedPlane *self, PyObject *args)
          {
            ::java::lang::Object a0((jobject) NULL);
            jboolean result;

            if (!parseArgs(args, "o", &a0))
            {
              OBJ_CALL(result = self->object.equals(a0));
              Py_RETURN_BOOL(result);
            }

            return callSuper(PY_TYPE(SidedPlane), (PyObject *) self, "equals", args, 2);
          }

          static PyObject *t_SidedPlane_hashCode(t_SidedPlane *self, PyObject *args)
          {
            jint result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.hashCode());
              return PyLong_FromLong((long) result);
            }

            return callSuper(PY_TYPE(SidedPlane), (PyObject *) self, "hashCode", args, 2);
          }

          static PyObject *t_SidedPlane_isWithin(t_SidedPlane *self, PyObject *args)
          {
            jdouble a0;
            jdouble a1;
            jdouble a2;
            jboolean result;

            if (!parseArgs(args, "DDD", &a0, &a1, &a2))
            {
              OBJ_CALL(result = self->object.isWithin(a0, a1, a2));
              Py_RETURN_BOOL(result);
            }

            return callSuper(PY_TYPE(SidedPlane), (PyObject *) self, "isWithin", args, 2);
          }

          static PyObject *t_SidedPlane_strictlyWithin(t_SidedPlane *self, PyObject *args)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 1:
              {
                ::org::apache::lucene::spatial3d::geom::Vector a0((jobject) NULL);
                jboolean result;

                if (!parseArgs(args, "k", ::org::apache::lucene::spatial3d::geom::Vector::initializeClass, &a0))
                {
                  OBJ_CALL(result = self->object.strictlyWithin(a0));
                  Py_RETURN_BOOL(result);
                }
              }
              break;
             case 3:
              {
                jdouble a0;
                jdouble a1;
                jdouble a2;
                jboolean result;

                if (!parseArgs(args, "DDD", &a0, &a1, &a2))
                {
                  OBJ_CALL(result = self->object.strictlyWithin(a0, a1, a2));
                  Py_RETURN_BOOL(result);
                }
              }
            }

            PyErr_SetArgsError((PyObject *) self, "strictlyWithin", args);
            return NULL;
          }

          static PyObject *t_SidedPlane_toString(t_SidedPlane *self, PyObject *args)
          {
            ::java::lang::String result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.toString());
              return j2p(result);
            }

            return callSuper(PY_TYPE(SidedPlane), (PyObject *) self, "toString", args, 2);
          }

          static PyObject *t_SidedPlane_get__sigNum(t_SidedPlane *self, void *data)
          {
            jdouble value;
            OBJ_CALL(value = self->object._get_sigNum());
            return PyFloat_FromDouble((double) value);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/store/BufferedChecksumIndexInput.h"
#include "java/lang/String.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/store/IndexInput.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace store {

        ::java::lang::Class *BufferedChecksumIndexInput::class$ = NULL;
        jmethodID *BufferedChecksumIndexInput::mids$ = NULL;
        bool BufferedChecksumIndexInput::live$ = false;

        jclass BufferedChecksumIndexInput::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/store/BufferedChecksumIndexInput");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_129f336879c18407] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/store/IndexInput;)V");
            mids$[mid_clone_831b777072456914] = env->getMethodID(cls, "clone", "()Lorg/apache/lucene/store/IndexInput;");
            mids$[mid_close_f2cc1bce94666404] = env->getMethodID(cls, "close", "()V");
            mids$[mid_getChecksum_2e5ae9edcb9b072f] = env->getMethodID(cls, "getChecksum", "()J");
            mids$[mid_getFilePointer_2e5ae9edcb9b072f] = env->getMethodID(cls, "getFilePointer", "()J");
            mids$[mid_length_2e5ae9edcb9b072f] = env->getMethodID(cls, "length", "()J");
            mids$[mid_readByte_871cd52a74f26213] = env->getMethodID(cls, "readByte", "()B");
            mids$[mid_readBytes_43fdd39c09bb2fad] = env->getMethodID(cls, "readBytes", "([BII)V");
            mids$[mid_slice_552ef5e8b06b1e84] = env->getMethodID(cls, "slice", "(Ljava/lang/String;JJ)Lorg/apache/lucene/store/IndexInput;");

            class$ = new ::java::lang::Class(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        BufferedChecksumIndexInput::BufferedChecksumIndexInput(const ::org::apache::lucene::store::IndexInput & a0) : ::org::apache::lucene::store::ChecksumIndexInput(env->newObject(initializeClass, &mids$, mid_init$_129f336879c18407, a0.this$)) {}

        ::org::apache::lucene::store::IndexInput BufferedChecksumIndexInput::clone() const
        {
          return ::org::apache::lucene::store::IndexInput(env->callObjectMethod(this$, mids$[mid_clone_831b777072456914]));
        }

        void BufferedChecksumIndexInput::close() const
        {
          env->callVoidMethod(this$, mids$[mid_close_f2cc1bce94666404]);
        }

        jlong BufferedChecksumIndexInput::getChecksum() const
        {
          return env->callLongMethod(this$, mids$[mid_getChecksum_2e5ae9edcb9b072f]);
        }

        jlong BufferedChecksumIndexInput::getFilePointer() const
        {
          return env->callLongMethod(this$, mids$[mid_getFilePointer_2e5ae9edcb9b072f]);
        }

        jlong BufferedChecksumIndexInput::length() const
        {
          return env->callLongMethod(this$, mids$[mid_length_2e5ae9edcb9b072f]);
        }

        jbyte BufferedChecksumIndexInput::readByte() const
        {
          return env->callByteMethod(this$, mids$[mid_readByte_871cd52a74f26213]);
        }

        void BufferedChecksumIndexInput::readBytes(const JArray< jbyte > & a0, jint a1, jint a2) const
        {
          env->callVoidMethod(this$, mids$[mid_readBytes_43fdd39c09bb2fad], a0.this$, a1, a2);
        }

        ::org::apache::lucene::store::IndexInput BufferedChecksumIndexInput::slice(const ::java::lang::String & a0, jlong a1, jlong a2) const
        {
          return ::org::apache::lucene::store::IndexInput(env->callObjectMethod(this$, mids$[mid_slice_552ef5e8b06b1e84], a0.this$, a1, a2));
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace store {
        static PyObject *t_BufferedChecksumIndexInput_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_BufferedChecksumIndexInput_instance_(PyTypeObject *type, PyObject *arg);
        static int t_BufferedChecksumIndexInput_init_(t_BufferedChecksumIndexInput *self, PyObject *args, PyObject *kwds);
        static PyObject *t_BufferedChecksumIndexInput_clone(t_BufferedChecksumIndexInput *self, PyObject *args);
        static PyObject *t_BufferedChecksumIndexInput_close(t_BufferedChecksumIndexInput *self, PyObject *args);
        static PyObject *t_BufferedChecksumIndexInput_getChecksum(t_BufferedChecksumIndexInput *self, PyObject *args);
        static PyObject *t_BufferedChecksumIndexInput_getFilePointer(t_BufferedChecksumIndexInput *self, PyObject *args);
        static PyObject *t_BufferedChecksumIndexInput_length(t_BufferedChecksumIndexInput *self, PyObject *args);
        static PyObject *t_BufferedChecksumIndexInput_readByte(t_BufferedChecksumIndexInput *self, PyObject *args);
        static PyObject *t_BufferedChecksumIndexInput_readBytes(t_BufferedChecksumIndexInput *self, PyObject *args);
        static PyObject *t_BufferedChecksumIndexInput_slice(t_BufferedChecksumIndexInput *self, PyObject *args);
        static PyObject *t_BufferedChecksumIndexInput_get__checksum(t_BufferedChecksumIndexInput *self, void *data);
        static PyObject *t_BufferedChecksumIndexInput_get__filePointer(t_BufferedChecksumIndexInput *self, void *data);
        static PyGetSetDef t_BufferedChecksumIndexInput__fields_[] = {
          DECLARE_GET_FIELD(t_BufferedChecksumIndexInput, checksum),
          DECLARE_GET_FIELD(t_BufferedChecksumIndexInput, filePointer),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_BufferedChecksumIndexInput__methods_[] = {
          DECLARE_METHOD(t_BufferedChecksumIndexInput, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_BufferedChecksumIndexInput, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_BufferedChecksumIndexInput, clone, METH_VARARGS),
          DECLARE_METHOD(t_BufferedChecksumIndexInput, close, METH_VARARGS),
          DECLARE_METHOD(t_BufferedChecksumIndexInput, getChecksum, METH_VARARGS),
          DECLARE_METHOD(t_BufferedChecksumIndexInput, getFilePointer, METH_VARARGS),
          DECLARE_METHOD(t_BufferedChecksumIndexInput, length, METH_VARARGS),
          DECLARE_METHOD(t_BufferedChecksumIndexInput, readByte, METH_VARARGS),
          DECLARE_METHOD(t_BufferedChecksumIndexInput, readBytes, METH_VARARGS),
          DECLARE_METHOD(t_BufferedChecksumIndexInput, slice, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        static PyType_Slot PY_TYPE_SLOTS(BufferedChecksumIndexInput)[] = {
          { Py_tp_methods, t_BufferedChecksumIndexInput__methods_ },
          { Py_tp_init, (void *) t_BufferedChecksumIndexInput_init_ },
          { Py_tp_getset, t_BufferedChecksumIndexInput__fields_ },
          { 0, NULL }
        };

        static PyType_Def *PY_TYPE_BASES(BufferedChecksumIndexInput)[] = {
          &PY_TYPE_DEF(::org::apache::lucene::store::ChecksumIndexInput),
          NULL
        };

        DEFINE_TYPE(BufferedChecksumIndexInput, t_BufferedChecksumIndexInput, BufferedChecksumIndexInput);

        void t_BufferedChecksumIndexInput::install(PyObject *module)
        {
          installType(&PY_TYPE(BufferedChecksumIndexInput), &PY_TYPE_DEF(BufferedChecksumIndexInput), module, "BufferedChecksumIndexInput", 0);
        }

        void t_BufferedChecksumIndexInput::initialize(PyObject *module)
        {
          PyObject_SetAttrString((PyObject *) PY_TYPE(BufferedChecksumIndexInput), "class_", make_descriptor(BufferedChecksumIndexInput::initializeClass, 1));
          PyObject_SetAttrString((PyObject *) PY_TYPE(BufferedChecksumIndexInput), "wrapfn_", make_descriptor(t_BufferedChecksumIndexInput::wrap_jobject));
          PyObject_SetAttrString((PyObject *) PY_TYPE(BufferedChecksumIndexInput), "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_BufferedChecksumIndexInput_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, BufferedChecksumIndexInput::initializeClass, 1)))
            return NULL;
          return t_BufferedChecksumIndexInput::wrap_Object(BufferedChecksumIndexInput(((t_BufferedChecksumIndexInput *) arg)->object.this$));
        }
        static PyObject *t_BufferedChecksumIndexInput_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, BufferedChecksumIndexInput::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_BufferedChecksumIndexInput_init_(t_BufferedChecksumIndexInput *self, PyObject *args, PyObject *kwds)
        {
          ::org::apache::lucene::store::IndexInput a0((jobject) NULL);
          BufferedChecksumIndexInput object((jobject) NULL);

          if (!parseArgs(args, "k", ::org::apache::lucene::store::IndexInput::initializeClass, &a0))
          {
            INT_CALL(object = BufferedChecksumIndexInput(a0));
            self->object = object;
          }
          else
          {
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }

        static PyObject *t_BufferedChecksumIndexInput_clone(t_BufferedChecksumIndexInput *self, PyObject *args)
        {
          ::org::apache::lucene::store::IndexInput result((jobject) NULL);

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.clone());
            return ::org::apache::lucene::store::t_IndexInput::wrap_Object(result);
          }

          return callSuper(PY_TYPE(BufferedChecksumIndexInput), (PyObject *) self, "clone", args, 2);
        }

        static PyObject *t_BufferedChecksumIndexInput_close(t_BufferedChecksumIndexInput *self, PyObject *args)
        {

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(self->object.close());
            Py_RETURN_NONE;
          }

          return callSuper(PY_TYPE(BufferedChecksumIndexInput), (PyObject *) self, "close", args, 2);
        }

        static PyObject *t_BufferedChecksumIndexInput_getChecksum(t_BufferedChecksumIndexInput *self, PyObject *args)
        {
          jlong result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.getChecksum());
            return PyLong_FromLongLong((PY_LONG_LONG) result);
          }

          return callSuper(PY_TYPE(BufferedChecksumIndexInput), (PyObject *) self, "getChecksum", args, 2);
        }

        static PyObject *t_BufferedChecksumIndexInput_getFilePointer(t_BufferedChecksumIndexInput *self, PyObject *args)
        {
          jlong result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.getFilePointer());
            return PyLong_FromLongLong((PY_LONG_LONG) result);
          }

          return callSuper(PY_TYPE(BufferedChecksumIndexInput), (PyObject *) self, "getFilePointer", args, 2);
        }

        static PyObject *t_BufferedChecksumIndexInput_length(t_BufferedChecksumIndexInput *self, PyObject *args)
        {
          jlong result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.length());
            return PyLong_FromLongLong((PY_LONG_LONG) result);
          }

          return callSuper(PY_TYPE(BufferedChecksumIndexInput), (PyObject *) self, "length", args, 2);
        }

        static PyObject *t_BufferedChecksumIndexInput_readByte(t_BufferedChecksumIndexInput *self, PyObject *args)
        {
          jbyte result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.readByte());
            return PyLong_FromLong((long) result);
          }

          return callSuper(PY_TYPE(BufferedChecksumIndexInput), (PyObject *) self, "readByte", args, 2);
        }

        static PyObject *t_BufferedChecksumIndexInput_readBytes(t_BufferedChecksumIndexInput *self, PyObject *args)
        {
          JArray< jbyte > a0((jobject) NULL);
          jint a1;
          jint a2;

          if (!parseArgs(args, "[BII", &a0, &a1, &a2))
          {
            OBJ_CALL(self->object.readBytes(a0, a1, a2));
            Py_RETURN_NONE;
          }

          return callSuper(PY_TYPE(BufferedChecksumIndexInput), (PyObject *) self, "readBytes", args, 2);
        }

        static PyObject *t_BufferedChecksumIndexInput_slice(t_BufferedChecksumIndexInput *self, PyObject *args)
        {
          ::java::lang::String a0((jobject) NULL);
          jlong a1;
          jlong a2;
          ::org::apache::lucene::store::IndexInput result((jobject) NULL);

          if (!parseArgs(args, "sJJ", &a0, &a1, &a2))
          {
            OBJ_CALL(result = self->object.slice(a0, a1, a2));
            return ::org::apache::lucene::store::t_IndexInput::wrap_Object(result);
          }

          return callSuper(PY_TYPE(BufferedChecksumIndexInput), (PyObject *) self, "slice", args, 2);
        }

        static PyObject *t_BufferedChecksumIndexInput_get__checksum(t_BufferedChecksumIndexInput *self, void *data)
        {
          jlong value;
          OBJ_CALL(value = self->object.getChecksum());
          return PyLong_FromLongLong((PY_LONG_LONG) value);
        }

        static PyObject *t_BufferedChecksumIndexInput_get__filePointer(t_BufferedChecksumIndexInput *self, void *data)
        {
          jlong value;
          OBJ_CALL(value = self->object.getFilePointer());
          return PyLong_FromLongLong((PY_LONG_LONG) value);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/index/UpgradeIndexMergePolicy.h"
#include "java/util/Map.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/index/MergePolicy$MergeSpecification.h"
#include "org/apache/lucene/index/MergePolicy.h"
#include "org/apache/lucene/index/MergeTrigger.h"
#include "org/apache/lucene/index/MergePolicy$MergeContext.h"
#include "org/apache/lucene/index/SegmentCommitInfo.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/index/SegmentInfos.h"
#include "java/lang/Boolean.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {

        ::java::lang::Class *UpgradeIndexMergePolicy::class$ = NULL;
        jmethodID *UpgradeIndexMergePolicy::mids$ = NULL;
        bool UpgradeIndexMergePolicy::live$ = false;

        jclass UpgradeIndexMergePolicy::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/index/UpgradeIndexMergePolicy");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_b609897b5fb3e0bb] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/index/MergePolicy;)V");
            mids$[mid_findForcedMerges_7f23fa79bde67ff3] = env->getMethodID(cls, "findForcedMerges", "(Lorg/apache/lucene/index/SegmentInfos;ILjava/util/Map;Lorg/apache/lucene/index/MergePolicy$MergeContext;)Lorg/apache/lucene/index/MergePolicy$MergeSpecification;");
            mids$[mid_findMerges_ce0e45d4a26e56b1] = env->getMethodID(cls, "findMerges", "(Lorg/apache/lucene/index/MergeTrigger;Lorg/apache/lucene/index/SegmentInfos;Lorg/apache/lucene/index/MergePolicy$MergeContext;)Lorg/apache/lucene/index/MergePolicy$MergeSpecification;");
            mids$[mid_shouldUpgradeSegment_1cbd6355ff4ad765] = env->getMethodID(cls, "shouldUpgradeSegment", "(Lorg/apache/lucene/index/SegmentCommitInfo;)Z");

            class$ = new ::java::lang::Class(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        UpgradeIndexMergePolicy::UpgradeIndexMergePolicy(const ::org::apache::lucene::index::MergePolicy & a0) : ::org::apache::lucene::index::FilterMergePolicy(env->newObject(initializeClass, &mids$, mid_init$_b609897b5fb3e0bb, a0.this$)) {}

        ::org::apache::lucene::index::MergePolicy$MergeSpecification UpgradeIndexMergePolicy::findForcedMerges(const ::org::apache::lucene::index::SegmentInfos & a0, jint a1, const ::java::util::Map & a2, const ::org::apache::lucene::index::MergePolicy$MergeContext & a3) const
        {
          return ::org::apache::lucene::index::MergePolicy$MergeSpecification(env->callObjectMethod(this$, mids$[mid_findForcedMerges_7f23fa79bde67ff3], a0.this$, a1, a2.this$, a3.this$));
        }

        ::org::apache::lucene::index::MergePolicy$MergeSpecification UpgradeIndexMergePolicy::findMerges(const ::org::apache::lucene::index::MergeTrigger & a0, const ::org::apache::lucene::index::SegmentInfos & a1, const ::org::apache::lucene::index::MergePolicy$MergeContext & a2) const
        {
          return ::org::apache::lucene::index::MergePolicy$MergeSpecification(env->callObjectMethod(this$, mids$[mid_findMerges_ce0e45d4a26e56b1], a0.this$, a1.this$, a2.this$));
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {
        static PyObject *t_UpgradeIndexMergePolicy_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_UpgradeIndexMergePolicy_instance_(PyTypeObject *type, PyObject *arg);
        static int t_UpgradeIndexMergePolicy_init_(t_UpgradeIndexMergePolicy *self, PyObject *args, PyObject *kwds);
        static PyObject *t_UpgradeIndexMergePolicy_findForcedMerges(t_UpgradeIndexMergePolicy *self, PyObject *args);
        static PyObject *t_UpgradeIndexMergePolicy_findMerges(t_UpgradeIndexMergePolicy *self, PyObject *args);

        static PyMethodDef t_UpgradeIndexMergePolicy__methods_[] = {
          DECLARE_METHOD(t_UpgradeIndexMergePolicy, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_UpgradeIndexMergePolicy, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_UpgradeIndexMergePolicy, findForcedMerges, METH_VARARGS),
          DECLARE_METHOD(t_UpgradeIndexMergePolicy, findMerges, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        static PyType_Slot PY_TYPE_SLOTS(UpgradeIndexMergePolicy)[] = {
          { Py_tp_methods, t_UpgradeIndexMergePolicy__methods_ },
          { Py_tp_init, (void *) t_UpgradeIndexMergePolicy_init_ },
          { 0, NULL }
        };

        static PyType_Def *PY_TYPE_BASES(UpgradeIndexMergePolicy)[] = {
          &PY_TYPE_DEF(::org::apache::lucene::index::FilterMergePolicy),
          NULL
        };

        DEFINE_TYPE(UpgradeIndexMergePolicy, t_UpgradeIndexMergePolicy, UpgradeIndexMergePolicy);

        void t_UpgradeIndexMergePolicy::install(PyObject *module)
        {
          installType(&PY_TYPE(UpgradeIndexMergePolicy), &PY_TYPE_DEF(UpgradeIndexMergePolicy), module, "UpgradeIndexMergePolicy", 0);
        }

        void t_UpgradeIndexMergePolicy::initialize(PyObject *module)
        {
          PyObject_SetAttrString((PyObject *) PY_TYPE(UpgradeIndexMergePolicy), "class_", make_descriptor(UpgradeIndexMergePolicy::initializeClass, 1));
          PyObject_SetAttrString((PyObject *) PY_TYPE(UpgradeIndexMergePolicy), "wrapfn_", make_descriptor(t_UpgradeIndexMergePolicy::wrap_jobject));
          PyObject_SetAttrString((PyObject *) PY_TYPE(UpgradeIndexMergePolicy), "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_UpgradeIndexMergePolicy_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, UpgradeIndexMergePolicy::initializeClass, 1)))
            return NULL;
          return t_UpgradeIndexMergePolicy::wrap_Object(UpgradeIndexMergePolicy(((t_UpgradeIndexMergePolicy *) arg)->object.this$));
        }
        static PyObject *t_UpgradeIndexMergePolicy_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, UpgradeIndexMergePolicy::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_UpgradeIndexMergePolicy_init_(t_UpgradeIndexMergePolicy *self, PyObject *args, PyObject *kwds)
        {
          ::org::apache::lucene::index::MergePolicy a0((jobject) NULL);
          UpgradeIndexMergePolicy object((jobject) NULL);

          if (!parseArgs(args, "k", ::org::apache::lucene::index::MergePolicy::initializeClass, &a0))
          {
            INT_CALL(object = UpgradeIndexMergePolicy(a0));
            self->object = object;
          }
          else
          {
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }

        static PyObject *t_UpgradeIndexMergePolicy_findForcedMerges(t_UpgradeIndexMergePolicy *self, PyObject *args)
        {
          ::org::apache::lucene::index::SegmentInfos a0((jobject) NULL);
          jint a1;
          ::java::util::Map a2((jobject) NULL);
          PyTypeObject **p2;
          ::org::apache::lucene::index::MergePolicy$MergeContext a3((jobject) NULL);
          ::org::apache::lucene::index::MergePolicy$MergeSpecification result((jobject) NULL);

          if (!parseArgs(args, "kIKk", ::org::apache::lucene::index::SegmentInfos::initializeClass, ::java::util::Map::initializeClass, ::org::apache::lucene::index::MergePolicy$MergeContext::initializeClass, &a0, &a1, &a2, &p2, ::java::util::t_Map::parameters_, &a3))
          {
            OBJ_CALL(result = self->object.findForcedMerges(a0, a1, a2, a3));
            return ::org::apache::lucene::index::t_MergePolicy$MergeSpecification::wrap_Object(result);
          }

          return callSuper(PY_TYPE(UpgradeIndexMergePolicy), (PyObject *) self, "findForcedMerges", args, 2);
        }

        static PyObject *t_UpgradeIndexMergePolicy_findMerges(t_UpgradeIndexMergePolicy *self, PyObject *args)
        {
          ::org::apache::lucene::index::MergeTrigger a0((jobject) NULL);
          PyTypeObject **p0;
          ::org::apache::lucene::index::SegmentInfos a1((jobject) NULL);
          ::org::apache::lucene::index::MergePolicy$MergeContext a2((jobject) NULL);
          ::org::apache::lucene::index::MergePolicy$MergeSpecification result((jobject) NULL);

          if (!parseArgs(args, "Kkk", ::org::apache::lucene::index::MergeTrigger::initializeClass, ::org::apache::lucene::index::SegmentInfos::initializeClass, ::org::apache::lucene::index::MergePolicy$MergeContext::initializeClass, &a0, &p0, ::org::apache::lucene::index::t_MergeTrigger::parameters_, &a1, &a2))
          {
            OBJ_CALL(result = self->object.findMerges(a0, a1, a2));
            return ::org::apache::lucene::index::t_MergePolicy$MergeSpecification::wrap_Object(result);
          }

          return callSuper(PY_TYPE(UpgradeIndexMergePolicy), (PyObject *) self, "findMerges", args, 2);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/bn/BengaliNormalizationFilterFactory.h"
#include "java/util/Map.h"
#include "java/lang/String.h"
#include "org/apache/lucene/analysis/TokenStream.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace bn {

          ::java::lang::Class *BengaliNormalizationFilterFactory::class$ = NULL;
          jmethodID *BengaliNormalizationFilterFactory::mids$ = NULL;
          bool BengaliNormalizationFilterFactory::live$ = false;
          ::java::lang::String *BengaliNormalizationFilterFactory::NAME = NULL;

          jclass BengaliNormalizationFilterFactory::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/bn/BengaliNormalizationFilterFactory");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_408bd889ee3beae5] = env->getMethodID(cls, "<init>", "(Ljava/util/Map;)V");
              mids$[mid_create_6de1e28d9d10cd9e] = env->getMethodID(cls, "create", "(Lorg/apache/lucene/analysis/TokenStream;)Lorg/apache/lucene/analysis/TokenStream;");
              mids$[mid_normalize_6de1e28d9d10cd9e] = env->getMethodID(cls, "normalize", "(Lorg/apache/lucene/analysis/TokenStream;)Lorg/apache/lucene/analysis/TokenStream;");

              class$ = new ::java::lang::Class(cls);
              cls = (jclass) class$->this$;

              NAME = new ::java::lang::String(env->getStaticObjectField(cls, "NAME", "Ljava/lang/String;"));
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          BengaliNormalizationFilterFactory::BengaliNormalizationFilterFactory(const ::java::util::Map & a0) : ::org::apache::lucene::analysis::util::TokenFilterFactory(env->newObject(initializeClass, &mids$, mid_init$_408bd889ee3beae5, a0.this$)) {}

          ::org::apache::lucene::analysis::TokenStream BengaliNormalizationFilterFactory::create(const ::org::apache::lucene::analysis::TokenStream & a0) const
          {
            return ::org::apache::lucene::analysis::TokenStream(env->callObjectMethod(this$, mids$[mid_create_6de1e28d9d10cd9e], a0.this$));
          }

          ::org::apache::lucene::analysis::TokenStream BengaliNormalizationFilterFactory::normalize(const ::org::apache::lucene::analysis::TokenStream & a0) const
          {
            return ::org::apache::lucene::analysis::TokenStream(env->callObjectMethod(this$, mids$[mid_normalize_6de1e28d9d10cd9e], a0.this$));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace bn {
          static PyObject *t_BengaliNormalizationFilterFactory_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_BengaliNormalizationFilterFactory_instance_(PyTypeObject *type, PyObject *arg);
          static int t_BengaliNormalizationFilterFactory_init_(t_BengaliNormalizationFilterFactory *self, PyObject *args, PyObject *kwds);
          static PyObject *t_BengaliNormalizationFilterFactory_create(t_BengaliNormalizationFilterFactory *self, PyObject *args);
          static PyObject *t_BengaliNormalizationFilterFactory_normalize(t_BengaliNormalizationFilterFactory *self, PyObject *args);

          static PyMethodDef t_BengaliNormalizationFilterFactory__methods_[] = {
            DECLARE_METHOD(t_BengaliNormalizationFilterFactory, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_BengaliNormalizationFilterFactory, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_BengaliNormalizationFilterFactory, create, METH_VARARGS),
            DECLARE_METHOD(t_BengaliNormalizationFilterFactory, normalize, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          static PyType_Slot PY_TYPE_SLOTS(BengaliNormalizationFilterFactory)[] = {
            { Py_tp_methods, t_BengaliNormalizationFilterFactory__methods_ },
            { Py_tp_init, (void *) t_BengaliNormalizationFilterFactory_init_ },
            { 0, NULL }
          };

          static PyType_Def *PY_TYPE_BASES(BengaliNormalizationFilterFactory)[] = {
            &PY_TYPE_DEF(::org::apache::lucene::analysis::util::TokenFilterFactory),
            NULL
          };

          DEFINE_TYPE(BengaliNormalizationFilterFactory, t_BengaliNormalizationFilterFactory, BengaliNormalizationFilterFactory);

          void t_BengaliNormalizationFilterFactory::install(PyObject *module)
          {
            installType(&PY_TYPE(BengaliNormalizationFilterFactory), &PY_TYPE_DEF(BengaliNormalizationFilterFactory), module, "BengaliNormalizationFilterFactory", 0);
          }

          void t_BengaliNormalizationFilterFactory::initialize(PyObject *module)
          {
            PyObject_SetAttrString((PyObject *) PY_TYPE(BengaliNormalizationFilterFactory), "class_", make_descriptor(BengaliNormalizationFilterFactory::initializeClass, 1));
            PyObject_SetAttrString((PyObject *) PY_TYPE(BengaliNormalizationFilterFactory), "wrapfn_", make_descriptor(t_BengaliNormalizationFilterFactory::wrap_jobject));
            PyObject_SetAttrString((PyObject *) PY_TYPE(BengaliNormalizationFilterFactory), "boxfn_", make_descriptor(boxObject));
            env->getClass(BengaliNormalizationFilterFactory::initializeClass);
            PyObject_SetAttrString((PyObject *) PY_TYPE(BengaliNormalizationFilterFactory), "NAME", make_descriptor(j2p(*BengaliNormalizationFilterFactory::NAME)));
          }

          static PyObject *t_BengaliNormalizationFilterFactory_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, BengaliNormalizationFilterFactory::initializeClass, 1)))
              return NULL;
            return t_BengaliNormalizationFilterFactory::wrap_Object(BengaliNormalizationFilterFactory(((t_BengaliNormalizationFilterFactory *) arg)->object.this$));
          }
          static PyObject *t_BengaliNormalizationFilterFactory_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, BengaliNormalizationFilterFactory::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_BengaliNormalizationFilterFactory_init_(t_BengaliNormalizationFilterFactory *self, PyObject *args, PyObject *kwds)
          {
            ::java::util::Map a0((jobject) NULL);
            PyTypeObject **p0;
            BengaliNormalizationFilterFactory object((jobject) NULL);

            if (!parseArgs(args, "K", ::java::util::Map::initializeClass, &a0, &p0, ::java::util::t_Map::parameters_))
            {
              INT_CALL(object = BengaliNormalizationFilterFactory(a0));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_BengaliNormalizationFilterFactory_create(t_BengaliNormalizationFilterFactory *self, PyObject *args)
          {
            ::org::apache::lucene::analysis::TokenStream a0((jobject) NULL);
            ::org::apache::lucene::analysis::TokenStream result((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::analysis::TokenStream::initializeClass, &a0))
            {
              OBJ_CALL(result = self->object.create(a0));
              return ::org::apache::lucene::analysis::t_TokenStream::wrap_Object(result);
            }

            return callSuper(PY_TYPE(BengaliNormalizationFilterFactory), (PyObject *) self, "create", args, 2);
          }

          static PyObject *t_BengaliNormalizationFilterFactory_normalize(t_BengaliNormalizationFilterFactory *self, PyObject *args)
          {
            ::org::apache::lucene::analysis::TokenStream a0((jobject) NULL);
            ::org::apache::lucene::analysis::TokenStream result((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::analysis::TokenStream::initializeClass, &a0))
            {
              OBJ_CALL(result = self->object.normalize(a0));
              return ::org::apache::lucene::analysis::t_TokenStream::wrap_Object(result);
            }

            return callSuper(PY_TYPE(BengaliNormalizationFilterFactory), (PyObject *) self, "normalize", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/codecs/simpletext/SimpleTextNormsFormat$SimpleTextNormsConsumer.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/codecs/NormsProducer.h"
#include "org/apache/lucene/index/SegmentWriteState.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/index/FieldInfo.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace codecs {
        namespace simpletext {

          ::java::lang::Class *SimpleTextNormsFormat$SimpleTextNormsConsumer::class$ = NULL;
          jmethodID *SimpleTextNormsFormat$SimpleTextNormsConsumer::mids$ = NULL;
          bool SimpleTextNormsFormat$SimpleTextNormsConsumer::live$ = false;

          jclass SimpleTextNormsFormat$SimpleTextNormsConsumer::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/codecs/simpletext/SimpleTextNormsFormat$SimpleTextNormsConsumer");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_a108448a3f706d50] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/index/SegmentWriteState;)V");
              mids$[mid_addNormsField_5c2ab8fdd065173d] = env->getMethodID(cls, "addNormsField", "(Lorg/apache/lucene/index/FieldInfo;Lorg/apache/lucene/codecs/NormsProducer;)V");
              mids$[mid_close_f2cc1bce94666404] = env->getMethodID(cls, "close", "()V");

              class$ = new ::java::lang::Class(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          SimpleTextNormsFormat$SimpleTextNormsConsumer::SimpleTextNormsFormat$SimpleTextNormsConsumer(const ::org::apache::lucene::index::SegmentWriteState & a0) : ::org::apache::lucene::codecs::NormsConsumer(env->newObject(initializeClass, &mids$, mid_init$_a108448a3f706d50, a0.this$)) {}

          void SimpleTextNormsFormat$SimpleTextNormsConsumer::addNormsField(const ::org::apache::lucene::index::FieldInfo & a0, const ::org::apache::lucene::codecs::NormsProducer & a1) const
          {
            env->callVoidMethod(this$, mids$[mid_addNormsField_5c2ab8fdd065173d], a0.this$, a1.this$);
          }

          void SimpleTextNormsFormat$SimpleTextNormsConsumer::close() const
          {
            env->callVoidMethod(this$, mids$[mid_close_f2cc1bce94666404]);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace codecs {
        namespace simpletext {
          static PyObject *t_SimpleTextNormsFormat$SimpleTextNormsConsumer_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_SimpleTextNormsFormat$SimpleTextNormsConsumer_instance_(PyTypeObject *type, PyObject *arg);
          static int t_SimpleTextNormsFormat$SimpleTextNormsConsumer_init_(t_SimpleTextNormsFormat$SimpleTextNormsConsumer *self, PyObject *args, PyObject *kwds);
          static PyObject *t_SimpleTextNormsFormat$SimpleTextNormsConsumer_addNormsField(t_SimpleTextNormsFormat$SimpleTextNormsConsumer *self, PyObject *args);
          static PyObject *t_SimpleTextNormsFormat$SimpleTextNormsConsumer_close(t_SimpleTextNormsFormat$SimpleTextNormsConsumer *self, PyObject *args);

          static PyMethodDef t_SimpleTextNormsFormat$SimpleTextNormsConsumer__methods_[] = {
            DECLARE_METHOD(t_SimpleTextNormsFormat$SimpleTextNormsConsumer, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_SimpleTextNormsFormat$SimpleTextNormsConsumer, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_SimpleTextNormsFormat$SimpleTextNormsConsumer, addNormsField, METH_VARARGS),
            DECLARE_METHOD(t_SimpleTextNormsFormat$SimpleTextNormsConsumer, close, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          static PyType_Slot PY_TYPE_SLOTS(SimpleTextNormsFormat$SimpleTextNormsConsumer)[] = {
            { Py_tp_methods, t_SimpleTextNormsFormat$SimpleTextNormsConsumer__methods_ },
            { Py_tp_init, (void *) t_SimpleTextNormsFormat$SimpleTextNormsConsumer_init_ },
            { 0, NULL }
          };

          static PyType_Def *PY_TYPE_BASES(SimpleTextNormsFormat$SimpleTextNormsConsumer)[] = {
            &PY_TYPE_DEF(::org::apache::lucene::codecs::NormsConsumer),
            NULL
          };

          DEFINE_TYPE(SimpleTextNormsFormat$SimpleTextNormsConsumer, t_SimpleTextNormsFormat$SimpleTextNormsConsumer, SimpleTextNormsFormat$SimpleTextNormsConsumer);

          void t_SimpleTextNormsFormat$SimpleTextNormsConsumer::install(PyObject *module)
          {
            installType(&PY_TYPE(SimpleTextNormsFormat$SimpleTextNormsConsumer), &PY_TYPE_DEF(SimpleTextNormsFormat$SimpleTextNormsConsumer), module, "SimpleTextNormsFormat$SimpleTextNormsConsumer", 0);
          }

          void t_SimpleTextNormsFormat$SimpleTextNormsConsumer::initialize(PyObject *module)
          {
            PyObject_SetAttrString((PyObject *) PY_TYPE(SimpleTextNormsFormat$SimpleTextNormsConsumer), "class_", make_descriptor(SimpleTextNormsFormat$SimpleTextNormsConsumer::initializeClass, 1));
            PyObject_SetAttrString((PyObject *) PY_TYPE(SimpleTextNormsFormat$SimpleTextNormsConsumer), "wrapfn_", make_descriptor(t_SimpleTextNormsFormat$SimpleTextNormsConsumer::wrap_jobject));
            PyObject_SetAttrString((PyObject *) PY_TYPE(SimpleTextNormsFormat$SimpleTextNormsConsumer), "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_SimpleTextNormsFormat$SimpleTextNormsConsumer_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, SimpleTextNormsFormat$SimpleTextNormsConsumer::initializeClass, 1)))
              return NULL;
            return t_SimpleTextNormsFormat$SimpleTextNormsConsumer::wrap_Object(SimpleTextNormsFormat$SimpleTextNormsConsumer(((t_SimpleTextNormsFormat$SimpleTextNormsConsumer *) arg)->object.this$));
          }
          static PyObject *t_SimpleTextNormsFormat$SimpleTextNormsConsumer_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, SimpleTextNormsFormat$SimpleTextNormsConsumer::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_SimpleTextNormsFormat$SimpleTextNormsConsumer_init_(t_SimpleTextNormsFormat$SimpleTextNormsConsumer *self, PyObject *args, PyObject *kwds)
          {
            ::org::apache::lucene::index::SegmentWriteState a0((jobject) NULL);
            SimpleTextNormsFormat$SimpleTextNormsConsumer object((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::index::SegmentWriteState::initializeClass, &a0))
            {
              INT_CALL(object = SimpleTextNormsFormat$SimpleTextNormsConsumer(a0));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_SimpleTextNormsFormat$SimpleTextNormsConsumer_addNormsField(t_SimpleTextNormsFormat$SimpleTextNormsConsumer *self, PyObject *args)
          {
            ::org::apache::lucene::index::FieldInfo a0((jobject) NULL);
            ::org::apache::lucene::codecs::NormsProducer a1((jobject) NULL);

            if (!parseArgs(args, "kk", ::org::apache::lucene::index::FieldInfo::initializeClass, ::org::apache::lucene::codecs::NormsProducer::initializeClass, &a0, &a1))
            {
              OBJ_CALL(self->object.addNormsField(a0, a1));
              Py_RETURN_NONE;
            }

            return callSuper(PY_TYPE(SimpleTextNormsFormat$SimpleTextNormsConsumer), (PyObject *) self, "addNormsField", args, 2);
          }

          static PyObject *t_SimpleTextNormsFormat$SimpleTextNormsConsumer_close(t_SimpleTextNormsFormat$SimpleTextNormsConsumer *self, PyObject *args)
          {

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(self->object.close());
              Py_RETURN_NONE;
            }

            return callSuper(PY_TYPE(SimpleTextNormsFormat$SimpleTextNormsConsumer), (PyObject *) self, "close", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/similarities/BasicModelIF.h"
#include "org/apache/lucene/search/similarities/BasicStats.h"
#include "java/lang/String.h"
#include "org/apache/lucene/search/Explanation.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace similarities {

          ::java::lang::Class *BasicModelIF::class$ = NULL;
          jmethodID *BasicModelIF::mids$ = NULL;
          bool BasicModelIF::live$ = false;

          jclass BasicModelIF::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/search/similarities/BasicModelIF");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_f2cc1bce94666404] = env->getMethodID(cls, "<init>", "()V");
              mids$[mid_explain_77a68ba236144920] = env->getMethodID(cls, "explain", "(Lorg/apache/lucene/search/similarities/BasicStats;DD)Lorg/apache/lucene/search/Explanation;");
              mids$[mid_score_761ab1c432346fd0] = env->getMethodID(cls, "score", "(Lorg/apache/lucene/search/similarities/BasicStats;DD)D");
              mids$[mid_toString_db9b55ba01e03e4b] = env->getMethodID(cls, "toString", "()Ljava/lang/String;");

              class$ = new ::java::lang::Class(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          BasicModelIF::BasicModelIF() : ::org::apache::lucene::search::similarities::BasicModel(env->newObject(initializeClass, &mids$, mid_init$_f2cc1bce94666404)) {}

          ::org::apache::lucene::search::Explanation BasicModelIF::explain(const ::org::apache::lucene::search::similarities::BasicStats & a0, jdouble a1, jdouble a2) const
          {
            return ::org::apache::lucene::search::Explanation(env->callObjectMethod(this$, mids$[mid_explain_77a68ba236144920], a0.this$, a1, a2));
          }

          jdouble BasicModelIF::score(const ::org::apache::lucene::search::similarities::BasicStats & a0, jdouble a1, jdouble a2) const
          {
            return env->callDoubleMethod(this$, mids$[mid_score_761ab1c432346fd0], a0.this$, a1, a2);
          }

          ::java::lang::String BasicModelIF::toString() const
          {
            return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_db9b55ba01e03e4b]));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace similarities {
          static PyObject *t_BasicModelIF_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_BasicModelIF_instance_(PyTypeObject *type, PyObject *arg);
          static int t_BasicModelIF_init_(t_BasicModelIF *self, PyObject *args, PyObject *kwds);
          static PyObject *t_BasicModelIF_explain(t_BasicModelIF *self, PyObject *args);
          static PyObject *t_BasicModelIF_score(t_BasicModelIF *self, PyObject *args);
          static PyObject *t_BasicModelIF_toString(t_BasicModelIF *self, PyObject *args);

          static PyMethodDef t_BasicModelIF__methods_[] = {
            DECLARE_METHOD(t_BasicModelIF, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_BasicModelIF, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_BasicModelIF, explain, METH_VARARGS),
            DECLARE_METHOD(t_BasicModelIF, score, METH_VARARGS),
            DECLARE_METHOD(t_BasicModelIF, toString, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          static PyType_Slot PY_TYPE_SLOTS(BasicModelIF)[] = {
            { Py_tp_methods, t_BasicModelIF__methods_ },
            { Py_tp_init, (void *) t_BasicModelIF_init_ },
            { 0, NULL }
          };

          static PyType_Def *PY_TYPE_BASES(BasicModelIF)[] = {
            &PY_TYPE_DEF(::org::apache::lucene::search::similarities::BasicModel),
            NULL
          };

          DEFINE_TYPE(BasicModelIF, t_BasicModelIF, BasicModelIF);

          void t_BasicModelIF::install(PyObject *module)
          {
            installType(&PY_TYPE(BasicModelIF), &PY_TYPE_DEF(BasicModelIF), module, "BasicModelIF", 0);
          }

          void t_BasicModelIF::initialize(PyObject *module)
          {
            PyObject_SetAttrString((PyObject *) PY_TYPE(BasicModelIF), "class_", make_descriptor(BasicModelIF::initializeClass, 1));
            PyObject_SetAttrString((PyObject *) PY_TYPE(BasicModelIF), "wrapfn_", make_descriptor(t_BasicModelIF::wrap_jobject));
            PyObject_SetAttrString((PyObject *) PY_TYPE(BasicModelIF), "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_BasicModelIF_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, BasicModelIF::initializeClass, 1)))
              return NULL;
            return t_BasicModelIF::wrap_Object(BasicModelIF(((t_BasicModelIF *) arg)->object.this$));
          }
          static PyObject *t_BasicModelIF_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, BasicModelIF::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_BasicModelIF_init_(t_BasicModelIF *self, PyObject *args, PyObject *kwds)
          {
            BasicModelIF object((jobject) NULL);

            INT_CALL(object = BasicModelIF());
            self->object = object;

            return 0;
          }

          static PyObject *t_BasicModelIF_explain(t_BasicModelIF *self, PyObject *args)
          {
            ::org::apache::lucene::search::similarities::BasicStats a0((jobject) NULL);
            jdouble a1;
            jdouble a2;
            ::org::apache::lucene::search::Explanation result((jobject) NULL);

            if (!parseArgs(args, "kDD", ::org::apache::lucene::search::similarities::BasicStats::initializeClass, &a0, &a1, &a2))
            {
              OBJ_CALL(result = self->object.explain(a0, a1, a2));
              return ::org::apache::lucene::search::t_Explanation::wrap_Object(result);
            }

            return callSuper(PY_TYPE(BasicModelIF), (PyObject *) self, "explain", args, 2);
          }

          static PyObject *t_BasicModelIF_score(t_BasicModelIF *self, PyObject *args)
          {
            ::org::apache::lucene::search::similarities::BasicStats a0((jobject) NULL);
            jdouble a1;
            jdouble a2;
            jdouble result;

            if (!parseArgs(args, "kDD", ::org::apache::lucene::search::similarities::BasicStats::initializeClass, &a0, &a1, &a2))
            {
              OBJ_CALL(result = self->object.score(a0, a1, a2));
              return PyFloat_FromDouble((double) result);
            }

            return callSuper(PY_TYPE(BasicModelIF), (PyObject *) self, "score", args, 2);
          }

          static PyObject *t_BasicModelIF_toString(t_BasicModelIF *self, PyObject *args)
          {
            ::java::lang::String result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.toString());
              return j2p(result);
            }

            return callSuper(PY_TYPE(BasicModelIF), (PyObject *) self, "toString", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/index/KeepOnlyLastCommitDeletionPolicy.h"
#include "java/util/List.h"
#include "org/apache/lucene/index/IndexCommit.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {

        ::java::lang::Class *KeepOnlyLastCommitDeletionPolicy::class$ = NULL;
        jmethodID *KeepOnlyLastCommitDeletionPolicy::mids$ = NULL;
        bool KeepOnlyLastCommitDeletionPolicy::live$ = false;

        jclass KeepOnlyLastCommitDeletionPolicy::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/index/KeepOnlyLastCommitDeletionPolicy");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_f2cc1bce94666404] = env->getMethodID(cls, "<init>", "()V");
            mids$[mid_onCommit_d03990be0130160d] = env->getMethodID(cls, "onCommit", "(Ljava/util/List;)V");
            mids$[mid_onInit_d03990be0130160d] = env->getMethodID(cls, "onInit", "(Ljava/util/List;)V");

            class$ = new ::java::lang::Class(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        KeepOnlyLastCommitDeletionPolicy::KeepOnlyLastCommitDeletionPolicy() : ::org::apache::lucene::index::IndexDeletionPolicy(env->newObject(initializeClass, &mids$, mid_init$_f2cc1bce94666404)) {}

        void KeepOnlyLastCommitDeletionPolicy::onCommit(const ::java::util::List & a0) const
        {
          env->callVoidMethod(this$, mids$[mid_onCommit_d03990be0130160d], a0.this$);
        }

        void KeepOnlyLastCommitDeletionPolicy::onInit(const ::java::util::List & a0) const
        {
          env->callVoidMethod(this$, mids$[mid_onInit_d03990be0130160d], a0.this$);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {
        static PyObject *t_KeepOnlyLastCommitDeletionPolicy_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_KeepOnlyLastCommitDeletionPolicy_instance_(PyTypeObject *type, PyObject *arg);
        static int t_KeepOnlyLastCommitDeletionPolicy_init_(t_KeepOnlyLastCommitDeletionPolicy *self, PyObject *args, PyObject *kwds);
        static PyObject *t_KeepOnlyLastCommitDeletionPolicy_onCommit(t_KeepOnlyLastCommitDeletionPolicy *self, PyObject *args);
        static PyObject *t_KeepOnlyLastCommitDeletionPolicy_onInit(t_KeepOnlyLastCommitDeletionPolicy *self, PyObject *args);

        static PyMethodDef t_KeepOnlyLastCommitDeletionPolicy__methods_[] = {
          DECLARE_METHOD(t_KeepOnlyLastCommitDeletionPolicy, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_KeepOnlyLastCommitDeletionPolicy, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_KeepOnlyLastCommitDeletionPolicy, onCommit, METH_VARARGS),
          DECLARE_METHOD(t_KeepOnlyLastCommitDeletionPolicy, onInit, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        static PyType_Slot PY_TYPE_SLOTS(KeepOnlyLastCommitDeletionPolicy)[] = {
          { Py_tp_methods, t_KeepOnlyLastCommitDeletionPolicy__methods_ },
          { Py_tp_init, (void *) t_KeepOnlyLastCommitDeletionPolicy_init_ },
          { 0, NULL }
        };

        static PyType_Def *PY_TYPE_BASES(KeepOnlyLastCommitDeletionPolicy)[] = {
          &PY_TYPE_DEF(::org::apache::lucene::index::IndexDeletionPolicy),
          NULL
        };

        DEFINE_TYPE(KeepOnlyLastCommitDeletionPolicy, t_KeepOnlyLastCommitDeletionPolicy, KeepOnlyLastCommitDeletionPolicy);

        void t_KeepOnlyLastCommitDeletionPolicy::install(PyObject *module)
        {
          installType(&PY_TYPE(KeepOnlyLastCommitDeletionPolicy), &PY_TYPE_DEF(KeepOnlyLastCommitDeletionPolicy), module, "KeepOnlyLastCommitDeletionPolicy", 0);
        }

        void t_KeepOnlyLastCommitDeletionPolicy::initialize(PyObject *module)
        {
          PyObject_SetAttrString((PyObject *) PY_TYPE(KeepOnlyLastCommitDeletionPolicy), "class_", make_descriptor(KeepOnlyLastCommitDeletionPolicy::initializeClass, 1));
          PyObject_SetAttrString((PyObject *) PY_TYPE(KeepOnlyLastCommitDeletionPolicy), "wrapfn_", make_descriptor(t_KeepOnlyLastCommitDeletionPolicy::wrap_jobject));
          PyObject_SetAttrString((PyObject *) PY_TYPE(KeepOnlyLastCommitDeletionPolicy), "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_KeepOnlyLastCommitDeletionPolicy_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, KeepOnlyLastCommitDeletionPolicy::initializeClass, 1)))
            return NULL;
          return t_KeepOnlyLastCommitDeletionPolicy::wrap_Object(KeepOnlyLastCommitDeletionPolicy(((t_KeepOnlyLastCommitDeletionPolicy *) arg)->object.this$));
        }
        static PyObject *t_KeepOnlyLastCommitDeletionPolicy_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, KeepOnlyLastCommitDeletionPolicy::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_KeepOnlyLastCommitDeletionPolicy_init_(t_KeepOnlyLastCommitDeletionPolicy *self, PyObject *args, PyObject *kwds)
        {
          KeepOnlyLastCommitDeletionPolicy object((jobject) NULL);

          INT_CALL(object = KeepOnlyLastCommitDeletionPolicy());
          self->object = object;

          return 0;
        }

        static PyObject *t_KeepOnlyLastCommitDeletionPolicy_onCommit(t_KeepOnlyLastCommitDeletionPolicy *self, PyObject *args)
        {
          ::java::util::List a0((jobject) NULL);
          PyTypeObject **p0;

          if (!parseArgs(args, "K", ::java::util::List::initializeClass, &a0, &p0, ::java::util::t_List::parameters_))
          {
            OBJ_CALL(self->object.onCommit(a0));
            Py_RETURN_NONE;
          }

          return callSuper(PY_TYPE(KeepOnlyLastCommitDeletionPolicy), (PyObject *) self, "onCommit", args, 2);
        }

        static PyObject *t_KeepOnlyLastCommitDeletionPolicy_onInit(t_KeepOnlyLastCommitDeletionPolicy *self, PyObject *args)
        {
          ::java::util::List a0((jobject) NULL);
          PyTypeObject **p0;

          if (!parseArgs(args, "K", ::java::util::List::initializeClass, &a0, &p0, ::java::util::t_List::parameters_))
          {
            OBJ_CALL(self->object.onInit(a0));
            Py_RETURN_NONE;
          }

          return callSuper(PY_TYPE(KeepOnlyLastCommitDeletionPolicy), (PyObject *) self, "onInit", args, 2);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/document/ShapeField$DecodedTriangle.h"
#include "java/lang/String.h"
#include "org/apache/lucene/document/ShapeField$DecodedTriangle$TYPE.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace document {

        ::java::lang::Class *ShapeField$DecodedTriangle::class$ = NULL;
        jmethodID *ShapeField$DecodedTriangle::mids$ = NULL;
        jfieldID *ShapeField$DecodedTriangle::fids$ = NULL;
        bool ShapeField$DecodedTriangle::live$ = false;

        jclass ShapeField$DecodedTriangle::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/document/ShapeField$DecodedTriangle");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_f2cc1bce94666404] = env->getMethodID(cls, "<init>", "()V");
            mids$[mid_equals_8b72f2dcdde6fd1d] = env->getMethodID(cls, "equals", "(Ljava/lang/Object;)Z");
            mids$[mid_hashCode_9972fcc56b44e79d] = env->getMethodID(cls, "hashCode", "()I");
            mids$[mid_toString_db9b55ba01e03e4b] = env->getMethodID(cls, "toString", "()Ljava/lang/String;");

            fids$ = new jfieldID[max_fid];
            fids$[fid_aX] = env->getFieldID(cls, "aX", "I");
            fids$[fid_aY] = env->getFieldID(cls, "aY", "I");
            fids$[fid_ab] = env->getFieldID(cls, "ab", "Z");
            fids$[fid_bX] = env->getFieldID(cls, "bX", "I");
            fids$[fid_bY] = env->getFieldID(cls, "bY", "I");
            fids$[fid_bc] = env->getFieldID(cls, "bc", "Z");
            fids$[fid_cX] = env->getFieldID(cls, "cX", "I");
            fids$[fid_cY] = env->getFieldID(cls, "cY", "I");
            fids$[fid_ca] = env->getFieldID(cls, "ca", "Z");
            fids$[fid_type] = env->getFieldID(cls, "type", "Lorg/apache/lucene/document/ShapeField$DecodedTriangle$TYPE;");

            class$ = new ::java::lang::Class(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        ShapeField$DecodedTriangle::ShapeField$DecodedTriangle() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_f2cc1bce94666404)) {}

        jboolean ShapeField$DecodedTriangle::equals(const ::java::lang::Object & a0) const
        {
          return env->callBooleanMethod(this$, mids$[mid_equals_8b72f2dcdde6fd1d], a0.this$);
        }

        jint ShapeField$DecodedTriangle::hashCode() const
        {
          return env->callIntMethod(this$, mids$[mid_hashCode_9972fcc56b44e79d]);
        }

        ::java::lang::String ShapeField$DecodedTriangle::toString() const
        {
          return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_db9b55ba01e03e4b]));
        }

        jint ShapeField$DecodedTriangle::_get_aX() const
        {
          return env->getIntField(this$, fids$[fid_aX]);
        }

        void ShapeField$DecodedTriangle::_set_aX(jint a0) const
        {
          env->setIntField(this$, fids$[fid_aX], a0);
        }

        jint ShapeField$DecodedTriangle::_get_aY() const
        {
          return env->getIntField(this$, fids$[fid_aY]);
        }

        void ShapeField$DecodedTriangle::_set_aY(jint a0) const
        {
          env->setIntField(this$, fids$[fid_aY], a0);
        }

        jboolean ShapeField$DecodedTriangle::_get_ab() const
        {
          return env->getBooleanField(this$, fids$[fid_ab]);
        }

        void ShapeField$DecodedTriangle::_set_ab(jboolean a0) const
        {
          env->setBooleanField(this$, fids$[fid_ab], a0);
        }

        jint ShapeField$DecodedTriangle::_get_bX() const
        {
          return env->getIntField(this$, fids$[fid_bX]);
        }

        void ShapeField$DecodedTriangle::_set_bX(jint a0) const
        {
          env->setIntField(this$, fids$[fid_bX], a0);
        }

        jint ShapeField$DecodedTriangle::_get_bY() const
        {
          return env->getIntField(this$, fids$[fid_bY]);
        }

        void ShapeField$DecodedTriangle::_set_bY(jint a0) const
        {
          env->setIntField(this$, fids$[fid_bY], a0);
        }

        jboolean ShapeField$DecodedTriangle::_get_bc() const
        {
          return env->getBooleanField(this$, fids$[fid_bc]);
        }

        void ShapeField$DecodedTriangle::_set_bc(jboolean a0) const
        {
          env->setBooleanField(this$, fids$[fid_bc], a0);
        }

        jint ShapeField$DecodedTriangle::_get_cX() const
        {
          return env->getIntField(this$, fids$[fid_cX]);
        }

        void ShapeField$DecodedTriangle::_set_cX(jint a0) const
        {
          env->setIntField(this$, fids$[fid_cX], a0);
        }

        jint ShapeField$DecodedTriangle::_get_cY() const
        {
          return env->getIntField(this$, fids$[fid_cY]);
        }

        void ShapeField$DecodedTriangle::_set_cY(jint a0) const
        {
          env->setIntField(this$, fids$[fid_cY], a0);
        }

        jboolean ShapeField$DecodedTriangle::_get_ca() const
        {
          return env->getBooleanField(this$, fids$[fid_ca]);
        }

        void ShapeField$DecodedTriangle::_set_ca(jboolean a0) const
        {
          env->setBooleanField(this$, fids$[fid_ca], a0);
        }

        ::org::apache::lucene::document::ShapeField$DecodedTriangle$TYPE ShapeField$DecodedTriangle::_get_type() const
        {
          return ::org::apache::lucene::document::ShapeField$DecodedTriangle$TYPE(env->getObjectField(this$, fids$[fid_type]));
        }

        void ShapeField$DecodedTriangle::_set_type(const ::org::apache::lucene::document::ShapeField$DecodedTriangle$TYPE & a0) const
        {
          env->setObjectField(this$, fids$[fid_type], a0.this$);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace document {
        static PyObject *t_ShapeField$DecodedTriangle_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_ShapeField$DecodedTriangle_instance_(PyTypeObject *type, PyObject *arg);
        static int t_ShapeField$DecodedTriangle_init_(t_ShapeField$DecodedTriangle *self, PyObject *args, PyObject *kwds);
        static PyObject *t_ShapeField$DecodedTriangle_equals(t_ShapeField$DecodedTriangle *self, PyObject *args);
        static PyObject *t_ShapeField$DecodedTriangle_hashCode(t_ShapeField$DecodedTriangle *self, PyObject *args);
        static PyObject *t_ShapeField$DecodedTriangle_toString(t_ShapeField$DecodedTriangle *self, PyObject *args);
        static PyObject *t_ShapeField$DecodedTriangle_get__aX(t_ShapeField$DecodedTriangle *self, void *data);
        static int t_ShapeField$DecodedTriangle_set__aX(t_ShapeField$DecodedTriangle *self, PyObject *arg, void *data);
        static PyObject *t_ShapeField$DecodedTriangle_get__aY(t_ShapeField$DecodedTriangle *self, void *data);
        static int t_ShapeField$DecodedTriangle_set__aY(t_ShapeField$DecodedTriangle *self, PyObject *arg, void *data);
        static PyObject *t_ShapeField$DecodedTriangle_get__ab(t_ShapeField$DecodedTriangle *self, void *data);
        static int t_ShapeField$DecodedTriangle_set__ab(t_ShapeField$DecodedTriangle *self, PyObject *arg, void *data);
        static PyObject *t_ShapeField$DecodedTriangle_get__bX(t_ShapeField$DecodedTriangle *self, void *data);
        static int t_ShapeField$DecodedTriangle_set__bX(t_ShapeField$DecodedTriangle *self, PyObject *arg, void *data);
        static PyObject *t_ShapeField$DecodedTriangle_get__bY(t_ShapeField$DecodedTriangle *self, void *data);
        static int t_ShapeField$DecodedTriangle_set__bY(t_ShapeField$DecodedTriangle *self, PyObject *arg, void *data);
        static PyObject *t_ShapeField$DecodedTriangle_get__bc(t_ShapeField$DecodedTriangle *self, void *data);
        static int t_ShapeField$DecodedTriangle_set__bc(t_ShapeField$DecodedTriangle *self, PyObject *arg, void *data);
        static PyObject *t_ShapeField$DecodedTriangle_get__cX(t_ShapeField$DecodedTriangle *self, void *data);
        static int t_ShapeField$DecodedTriangle_set__cX(t_ShapeField$DecodedTriangle *self, PyObject *arg, void *data);
        static PyObject *t_ShapeField$DecodedTriangle_get__cY(t_ShapeField$DecodedTriangle *self, void *data);
        static int t_ShapeField$DecodedTriangle_set__cY(t_ShapeField$DecodedTriangle *self, PyObject *arg, void *data);
        static PyObject *t_ShapeField$DecodedTriangle_get__ca(t_ShapeField$DecodedTriangle *self, void *data);
        static int t_ShapeField$DecodedTriangle_set__ca(t_ShapeField$DecodedTriangle *self, PyObject *arg, void *data);
        static PyObject *t_ShapeField$DecodedTriangle_get__type(t_ShapeField$DecodedTriangle *self, void *data);
        static int t_ShapeField$DecodedTriangle_set__type(t_ShapeField$DecodedTriangle *self, PyObject *arg, void *data);

        static PyGetSetDef t_ShapeField$DecodedTriangle__fields_[] = {
          DECLARE_GETSET_FIELD(t_ShapeField$DecodedTriangle, aX),
          DECLARE_GETSET_FIELD(t_ShapeField$DecodedTriangle, aY),
          DECLARE_GETSET_FIELD(t_ShapeField$DecodedTriangle, ab),
          DECLARE_GETSET_FIELD(t_ShapeField$DecodedTriangle, bX),
          DECLARE_GETSET_FIELD(t_ShapeField$DecodedTriangle, bY),
          DECLARE_GETSET_FIELD(t_ShapeField$DecodedTriangle, bc),
          DECLARE_GETSET_FIELD(t_ShapeField$DecodedTriangle, cX),
          DECLARE_GETSET_FIELD(t_ShapeField$DecodedTriangle, cY),
          DECLARE_GETSET_FIELD(t_ShapeField$DecodedTriangle, ca),
          DECLARE_GETSET_FIELD(t_ShapeField$DecodedTriangle, type),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_ShapeField$DecodedTriangle__methods_[] = {
          DECLARE_METHOD(t_ShapeField$DecodedTriangle, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_ShapeField$DecodedTriangle, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_ShapeField$DecodedTriangle, equals, METH_VARARGS),
          DECLARE_METHOD(t_ShapeField$DecodedTriangle, hashCode, METH_VARARGS),
          DECLARE_METHOD(t_ShapeField$DecodedTriangle, toString, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        static PyType_Slot PY_TYPE_SLOTS(ShapeField$DecodedTriangle)[] = {
          { Py_tp_methods, t_ShapeField$DecodedTriangle__methods_ },
          { Py_tp_init, (void *) t_ShapeField$DecodedTriangle_init_ },
          { Py_tp_getset, t_ShapeField$DecodedTriangle__fields_ },
          { 0, NULL }
        };

        static PyType_Def *PY_TYPE_BASES(ShapeField$DecodedTriangle)[] = {
          &PY_TYPE_DEF(::java::lang::Object),
          NULL
        };

        DEFINE_TYPE(ShapeField$DecodedTriangle, t_ShapeField$DecodedTriangle, ShapeField$DecodedTriangle);

        void t_ShapeField$DecodedTriangle::install(PyObject *module)
        {
          installType(&PY_TYPE(ShapeField$DecodedTriangle), &PY_TYPE_DEF(ShapeField$DecodedTriangle), module, "ShapeField$DecodedTriangle", 0);
          PyObject_SetAttrString((PyObject *) PY_TYPE(ShapeField$DecodedTriangle), "TYPE", make_descriptor(&PY_TYPE_DEF(ShapeField$DecodedTriangle$TYPE)));
        }

        void t_ShapeField$DecodedTriangle::initialize(PyObject *module)
        {
          PyObject_SetAttrString((PyObject *) PY_TYPE(ShapeField$DecodedTriangle), "class_", make_descriptor(ShapeField$DecodedTriangle::initializeClass, 1));
          PyObject_SetAttrString((PyObject *) PY_TYPE(ShapeField$DecodedTriangle), "wrapfn_", make_descriptor(t_ShapeField$DecodedTriangle::wrap_jobject));
          PyObject_SetAttrString((PyObject *) PY_TYPE(ShapeField$DecodedTriangle), "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_ShapeField$DecodedTriangle_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, ShapeField$DecodedTriangle::initializeClass, 1)))
            return NULL;
          return t_ShapeField$DecodedTriangle::wrap_Object(ShapeField$DecodedTriangle(((t_ShapeField$DecodedTriangle *) arg)->object.this$));
        }
        static PyObject *t_ShapeField$DecodedTriangle_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, ShapeField$DecodedTriangle::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_ShapeField$DecodedTriangle_init_(t_ShapeField$DecodedTriangle *self, PyObject *args, PyObject *kwds)
        {
          ShapeField$DecodedTriangle object((jobject) NULL);

          INT_CALL(object = ShapeField$DecodedTriangle());
          self->object = object;

          return 0;
        }

        static PyObject *t_ShapeField$DecodedTriangle_equals(t_ShapeField$DecodedTriangle *self, PyObject *args)
        {
          ::java::lang::Object a0((jobject) NULL);
          jboolean result;

          if (!parseArgs(args, "o", &a0))
          {
            OBJ_CALL(result = self->object.equals(a0));
            Py_RETURN_BOOL(result);
          }

          return callSuper(PY_TYPE(ShapeField$DecodedTriangle), (PyObject *) self, "equals", args, 2);
        }

        static PyObject *t_ShapeField$DecodedTriangle_hashCode(t_ShapeField$DecodedTriangle *self, PyObject *args)
        {
          jint result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.hashCode());
            return PyLong_FromLong((long) result);
          }

          return callSuper(PY_TYPE(ShapeField$DecodedTriangle), (PyObject *) self, "hashCode", args, 2);
        }

        static PyObject *t_ShapeField$DecodedTriangle_toString(t_ShapeField$DecodedTriangle *self, PyObject *args)
        {
          ::java::lang::String result((jobject) NULL);

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.toString());
            return j2p(result);
          }

          return callSuper(PY_TYPE(ShapeField$DecodedTriangle), (PyObject *) self, "toString", args, 2);
        }

        static PyObject *t_ShapeField$DecodedTriangle_get__aX(t_ShapeField$DecodedTriangle *self, void *data)
        {
          jint value;
          OBJ_CALL(value = self->object._get_aX());
          return PyLong_FromLong((long) value);
        }
        static int t_ShapeField$DecodedTriangle_set__aX(t_ShapeField$DecodedTriangle *self, PyObject *arg, void *data)
        {
          jint value;
          if (!parseArg(arg, "I", &value))
          {
            INT_CALL(self->object._set_aX(value));
            return 0;
          }
          PyErr_SetArgsError((PyObject *) self, "aX", arg);
          return -1;
        }

        static PyObject *t_ShapeField$DecodedTriangle_get__aY(t_ShapeField$DecodedTriangle *self, void *data)
        {
          jint value;
          OBJ_CALL(value = self->object._get_aY());
          return PyLong_FromLong((long) value);
        }
        static int t_ShapeField$DecodedTriangle_set__aY(t_ShapeField$DecodedTriangle *self, PyObject *arg, void *data)
        {
          jint value;
          if (!parseArg(arg, "I", &value))
          {
            INT_CALL(self->object._set_aY(value));
            return 0;
          }
          PyErr_SetArgsError((PyObject *) self, "aY", arg);
          return -1;
        }

        static PyObject *t_ShapeField$DecodedTriangle_get__ab(t_ShapeField$DecodedTriangle *self, void *data)
        {
          jboolean value;
          OBJ_CALL(value = self->object._get_ab());
          Py_RETURN_BOOL(value);
        }
        static int t_ShapeField$DecodedTriangle_set__ab(t_ShapeField$DecodedTriangle *self, PyObject *arg, void *data)
        {
          jboolean value;
          if (!parseArg(arg, "Z", &value))
          {
            INT_CALL(self->object._set_ab(value));
            return 0;
          }
          PyErr_SetArgsError((PyObject *) self, "ab", arg);
          return -1;
        }

        static PyObject *t_ShapeField$DecodedTriangle_get__bX(t_ShapeField$DecodedTriangle *self, void *data)
        {
          jint value;
          OBJ_CALL(value = self->object._get_bX());
          return PyLong_FromLong((long) value);
        }
        static int t_ShapeField$DecodedTriangle_set__bX(t_ShapeField$DecodedTriangle *self, PyObject *arg, void *data)
        {
          jint value;
          if (!parseArg(arg, "I", &value))
          {
            INT_CALL(self->object._set_bX(value));
            return 0;
          }
          PyErr_SetArgsError((PyObject *) self, "bX", arg);
          return -1;
        }

        static PyObject *t_ShapeField$DecodedTriangle_get__bY(t_ShapeField$DecodedTriangle *self, void *data)
        {
          jint value;
          OBJ_CALL(value = self->object._get_bY());
          return PyLong_FromLong((long) value);
        }
        static int t_ShapeField$DecodedTriangle_set__bY(t_ShapeField$DecodedTriangle *self, PyObject *arg, void *data)
        {
          jint value;
          if (!parseArg(arg, "I", &value))
          {
            INT_CALL(self->object._set_bY(value));
            return 0;
          }
          PyErr_SetArgsError((PyObject *) self, "bY", arg);
          return -1;
        }

        static PyObject *t_ShapeField$DecodedTriangle_get__bc(t_ShapeField$DecodedTriangle *self, void *data)
        {
          jboolean value;
          OBJ_CALL(value = self->object._get_bc());
          Py_RETURN_BOOL(value);
        }
        static int t_ShapeField$DecodedTriangle_set__bc(t_ShapeField$DecodedTriangle *self, PyObject *arg, void *data)
        {
          jboolean value;
          if (!parseArg(arg, "Z", &value))
          {
            INT_CALL(self->object._set_bc(value));
            return 0;
          }
          PyErr_SetArgsError((PyObject *) self, "bc", arg);
          return -1;
        }

        static PyObject *t_ShapeField$DecodedTriangle_get__cX(t_ShapeField$DecodedTriangle *self, void *data)
        {
          jint value;
          OBJ_CALL(value = self->object._get_cX());
          return PyLong_FromLong((long) value);
        }
        static int t_ShapeField$DecodedTriangle_set__cX(t_ShapeField$DecodedTriangle *self, PyObject *arg, void *data)
        {
          jint value;
          if (!parseArg(arg, "I", &value))
          {
            INT_CALL(self->object._set_cX(value));
            return 0;
          }
          PyErr_SetArgsError((PyObject *) self, "cX", arg);
          return -1;
        }

        static PyObject *t_ShapeField$DecodedTriangle_get__cY(t_ShapeField$DecodedTriangle *self, void *data)
        {
          jint value;
          OBJ_CALL(value = self->object._get_cY());
          return PyLong_FromLong((long) value);
        }
        static int t_ShapeField$DecodedTriangle_set__cY(t_ShapeField$DecodedTriangle *self, PyObject *arg, void *data)
        {
          jint value;
          if (!parseArg(arg, "I", &value))
          {
            INT_CALL(self->object._set_cY(value));
            return 0;
          }
          PyErr_SetArgsError((PyObject *) self, "cY", arg);
          return -1;
        }

        static PyObject *t_ShapeField$DecodedTriangle_get__ca(t_ShapeField$DecodedTriangle *self, void *data)
        {
          jboolean value;
          OBJ_CALL(value = self->object._get_ca());
          Py_RETURN_BOOL(value);
        }
        static int t_ShapeField$DecodedTriangle_set__ca(t_ShapeField$DecodedTriangle *self, PyObject *arg, void *data)
        {
          jboolean value;
          if (!parseArg(arg, "Z", &value))
          {
            INT_CALL(self->object._set_ca(value));
            return 0;
          }
          PyErr_SetArgsError((PyObject *) self, "ca", arg);
          return -1;
        }

        static PyObject *t_ShapeField$DecodedTriangle_get__type(t_ShapeField$DecodedTriangle *self, void *data)
        {
          ::org::apache::lucene::document::ShapeField$DecodedTriangle$TYPE value((jobject) NULL);
          OBJ_CALL(value = self->object._get_type());
          return ::org::apache::lucene::document::t_ShapeField$DecodedTriangle$TYPE::wrap_Object(value);
        }
        static int t_ShapeField$DecodedTriangle_set__type(t_ShapeField$DecodedTriangle *self, PyObject *arg, void *data)
        {
          ::org::apache::lucene::document::ShapeField$DecodedTriangle$TYPE value((jobject) NULL);
          if (!parseArg(arg, "k", ::org::apache::lucene::document::ShapeField$DecodedTriangle$TYPE::initializeClass, &value))
          {
            INT_CALL(self->object._set_type(value));
            return 0;
          }
          PyErr_SetArgsError((PyObject *) self, "type", arg);
          return -1;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/tokenattributes/OffsetAttributeImpl.h"
#include "java/lang/Class.h"
#include "java/lang/Object.h"
#include "org/apache/lucene/analysis/tokenattributes/OffsetAttribute.h"
#include "org/apache/lucene/util/AttributeReflector.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace tokenattributes {

          ::java::lang::Class *OffsetAttributeImpl::class$ = NULL;
          jmethodID *OffsetAttributeImpl::mids$ = NULL;
          bool OffsetAttributeImpl::live$ = false;

          jclass OffsetAttributeImpl::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/tokenattributes/OffsetAttributeImpl");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_f2cc1bce94666404] = env->getMethodID(cls, "<init>", "()V");
              mids$[mid_clear_f2cc1bce94666404] = env->getMethodID(cls, "clear", "()V");
              mids$[mid_copyTo_26346c38ebc9c090] = env->getMethodID(cls, "copyTo", "(Lorg/apache/lucene/util/AttributeImpl;)V");
              mids$[mid_endOffset_9972fcc56b44e79d] = env->getMethodID(cls, "endOffset", "()I");
              mids$[mid_equals_8b72f2dcdde6fd1d] = env->getMethodID(cls, "equals", "(Ljava/lang/Object;)Z");
              mids$[mid_hashCode_9972fcc56b44e79d] = env->getMethodID(cls, "hashCode", "()I");
              mids$[mid_reflectWith_b880c72ee67200af] = env->getMethodID(cls, "reflectWith", "(Lorg/apache/lucene/util/AttributeReflector;)V");
              mids$[mid_setOffset_438c62480c481c65] = env->getMethodID(cls, "setOffset", "(II)V");
              mids$[mid_startOffset_9972fcc56b44e79d] = env->getMethodID(cls, "startOffset", "()I");

              class$ = new ::java::lang::Class(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          OffsetAttributeImpl::OffsetAttributeImpl() : ::org::apache::lucene::util::AttributeImpl(env->newObject(initializeClass, &mids$, mid_init$_f2cc1bce94666404)) {}

          void OffsetAttributeImpl::clear() const
          {
            env->callVoidMethod(this$, mids$[mid_clear_f2cc1bce94666404]);
          }

          void OffsetAttributeImpl::copyTo(const ::org::apache::lucene::util::AttributeImpl & a0) const
          {
            env->callVoidMethod(this$, mids$[mid_copyTo_26346c38ebc9c090], a0.this$);
          }

          jint OffsetAttributeImpl::endOffset() const
          {
            return env->callIntMethod(this$, mids$[mid_endOffset_9972fcc56b44e79d]);
          }

          jboolean OffsetAttributeImpl::equals(const ::java::lang::Object & a0) const
          {
            return env->callBooleanMethod(this$, mids$[mid_equals_8b72f2dcdde6fd1d], a0.this$);
          }

          jint OffsetAttributeImpl::hashCode() const
          {
            return env->callIntMethod(this$, mids$[mid_hashCode_9972fcc56b44e79d]);
          }

          void OffsetAttributeImpl::reflectWith(const ::org::apache::lucene::util::AttributeReflector & a0) const
          {
            env->callVoidMethod(this$, mids$[mid_reflectWith_b880c72ee67200af], a0.this$);
          }

          void OffsetAttributeImpl::setOffset(jint a0, jint a1) const
          {
            env->callVoidMethod(this$, mids$[mid_setOffset_438c62480c481c65], a0, a1);
          }

          jint OffsetAttributeImpl::startOffset() const
          {
            return env->callIntMethod(this$, mids$[mid_startOffset_9972fcc56b44e79d]);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace tokenattributes {
          static PyObject *t_OffsetAttributeImpl_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_OffsetAttributeImpl_instance_(PyTypeObject *type, PyObject *arg);
          static int t_OffsetAttributeImpl_init_(t_OffsetAttributeImpl *self, PyObject *args, PyObject *kwds);
          static PyObject *t_OffsetAttributeImpl_clear(t_OffsetAttributeImpl *self, PyObject *args);
          static PyObject *t_OffsetAttributeImpl_copyTo(t_OffsetAttributeImpl *self, PyObject *args);
          static PyObject *t_OffsetAttributeImpl_endOffset(t_OffsetAttributeImpl *self);
          static PyObject *t_OffsetAttributeImpl_equals(t_OffsetAttributeImpl *self, PyObject *args);
          static PyObject *t_OffsetAttributeImpl_hashCode(t_OffsetAttributeImpl *self, PyObject *args);
          static PyObject *t_OffsetAttributeImpl_reflectWith(t_OffsetAttributeImpl *self, PyObject *args);
          static PyObject *t_OffsetAttributeImpl_setOffset(t_OffsetAttributeImpl *self, PyObject *args);
          static PyObject *t_OffsetAttributeImpl_startOffset(t_OffsetAttributeImpl *self);

          static PyMethodDef t_OffsetAttributeImpl__methods_[] = {
            DECLARE_METHOD(t_OffsetAttributeImpl, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_OffsetAttributeImpl, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_OffsetAttributeImpl, clear, METH_VARARGS),
            DECLARE_METHOD(t_OffsetAttributeImpl, copyTo, METH_VARARGS),
            DECLARE_METHOD(t_OffsetAttributeImpl, endOffset, METH_NOARGS),
            DECLARE_METHOD(t_OffsetAttributeImpl, equals, METH_VARARGS),
            DECLARE_METHOD(t_OffsetAttributeImpl, hashCode, METH_VARARGS),
            DECLARE_METHOD(t_OffsetAttributeImpl, reflectWith, METH_VARARGS),
            DECLARE_METHOD(t_OffsetAttributeImpl, setOffset, METH_VARARGS),
            DECLARE_METHOD(t_OffsetAttributeImpl, startOffset, METH_NOARGS),
            { NULL, NULL, 0, NULL }
          };

          static PyType_Slot PY_TYPE_SLOTS(OffsetAttributeImpl)[] = {
            { Py_tp_methods, t_OffsetAttributeImpl__methods_ },
            { Py_tp_init, (void *) t_OffsetAttributeImpl_init_ },
            { 0, NULL }
          };

          static PyType_Def *PY_TYPE_BASES(OffsetAttributeImpl)[] = {
            &PY_TYPE_DEF(::org::apache::lucene::util::AttributeImpl),
            NULL
          };

          DEFINE_TYPE(OffsetAttributeImpl, t_OffsetAttributeImpl, OffsetAttributeImpl);

          void t_OffsetAttributeImpl::install(PyObject *module)
          {
            installType(&PY_TYPE(OffsetAttributeImpl), &PY_TYPE_DEF(OffsetAttributeImpl), module, "OffsetAttributeImpl", 0);
          }

          void t_OffsetAttributeImpl::initialize(PyObject *module)
          {
            PyObject_SetAttrString((PyObject *) PY_TYPE(OffsetAttributeImpl), "class_", make_descriptor(OffsetAttributeImpl::initializeClass, 1));
            PyObject_SetAttrString((PyObject *) PY_TYPE(OffsetAttributeImpl), "wrapfn_", make_descriptor(t_OffsetAttributeImpl::wrap_jobject));
            PyObject_SetAttrString((PyObject *) PY_TYPE(OffsetAttributeImpl), "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_OffsetAttributeImpl_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, OffsetAttributeImpl::initializeClass, 1)))
              return NULL;
            return t_OffsetAttributeImpl::wrap_Object(OffsetAttributeImpl(((t_OffsetAttributeImpl *) arg)->object.this$));
          }
          static PyObject *t_OffsetAttributeImpl_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, OffsetAttributeImpl::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_OffsetAttributeImpl_init_(t_OffsetAttributeImpl *self, PyObject *args, PyObject *kwds)
          {
            OffsetAttributeImpl object((jobject) NULL);

            INT_CALL(object = OffsetAttributeImpl());
            self->object = object;

            return 0;
          }

          static PyObject *t_OffsetAttributeImpl_clear(t_OffsetAttributeImpl *self, PyObject *args)
          {

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(self->object.clear());
              Py_RETURN_NONE;
            }

            return callSuper(PY_TYPE(OffsetAttributeImpl), (PyObject *) self, "clear", args, 2);
          }

          static PyObject *t_OffsetAttributeImpl_copyTo(t_OffsetAttributeImpl *self, PyObject *args)
          {
            ::org::apache::lucene::util::AttributeImpl a0((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::util::AttributeImpl::initializeClass, &a0))
            {
              OBJ_CALL(self->object.copyTo(a0));
              Py_RETURN_NONE;
            }

            return callSuper(PY_TYPE(OffsetAttributeImpl), (PyObject *) self, "copyTo", args, 2);
          }

          static PyObject *t_OffsetAttributeImpl_endOffset(t_OffsetAttributeImpl *self)
          {
            jint result;
            OBJ_CALL(result = self->object.endOffset());
            return PyLong_FromLong((long) result);
          }

          static PyObject *t_OffsetAttributeImpl_equals(t_OffsetAttributeImpl *self, PyObject *args)
          {
            ::java::lang::Object a0((jobject) NULL);
            jboolean result;

            if (!parseArgs(args, "o", &a0))
            {
              OBJ_CALL(result = self->object.equals(a0));
              Py_RETURN_BOOL(result);
            }

            return callSuper(PY_TYPE(OffsetAttributeImpl), (PyObject *) self, "equals", args, 2);
          }

          static PyObject *t_OffsetAttributeImpl_hashCode(t_OffsetAttributeImpl *self, PyObject *args)
          {
            jint result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.hashCode());
              return PyLong_FromLong((long) result);
            }

            return callSuper(PY_TYPE(OffsetAttributeImpl), (PyObject *) self, "hashCode", args, 2);
          }

          static PyObject *t_OffsetAttributeImpl_reflectWith(t_OffsetAttributeImpl *self, PyObject *args)
          {
            ::org::apache::lucene::util::AttributeReflector a0((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::util::AttributeReflector::initializeClass, &a0))
            {
              OBJ_CALL(self->object.reflectWith(a0));
              Py_RETURN_NONE;
            }

            return callSuper(PY_TYPE(OffsetAttributeImpl), (PyObject *) self, "reflectWith", args, 2);
          }

          static PyObject *t_OffsetAttributeImpl_setOffset(t_OffsetAttributeImpl *self, PyObject *args)
          {
            jint a0;
            jint a1;

            if (!parseArgs(args, "II", &a0, &a1))
            {
              OBJ_CALL(self->object.setOffset(a0, a1));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError((PyObject *) self, "setOffset", args);
            return NULL;
          }

          static PyObject *t_OffsetAttributeImpl_startOffset(t_OffsetAttributeImpl *self)
          {
            jint result;
            OBJ_CALL(result = self->object.startOffset());
            return PyLong_FromLong((long) result);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/util/IntsRefBuilder.h"
#include "org/apache/lucene/util/IntsRef.h"
#include "org/apache/lucene/util/BytesRef.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {

        ::java::lang::Class *IntsRefBuilder::class$ = NULL;
        jmethodID *IntsRefBuilder::mids$ = NULL;
        bool IntsRefBuilder::live$ = false;

        jclass IntsRefBuilder::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/util/IntsRefBuilder");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_f2cc1bce94666404] = env->getMethodID(cls, "<init>", "()V");
            mids$[mid_append_040c4cd0390c5aff] = env->getMethodID(cls, "append", "(I)V");
            mids$[mid_clear_f2cc1bce94666404] = env->getMethodID(cls, "clear", "()V");
            mids$[mid_copyInts_0be76783572fca9c] = env->getMethodID(cls, "copyInts", "(Lorg/apache/lucene/util/IntsRef;)V");
            mids$[mid_copyInts_11b52125bd016996] = env->getMethodID(cls, "copyInts", "([III)V");
            mids$[mid_copyUTF8Bytes_0bdfd2603b7490a8] = env->getMethodID(cls, "copyUTF8Bytes", "(Lorg/apache/lucene/util/BytesRef;)V");
            mids$[mid_equals_8b72f2dcdde6fd1d] = env->getMethodID(cls, "equals", "(Ljava/lang/Object;)Z");
            mids$[mid_get_ce9cdfb58d7a482b] = env->getMethodID(cls, "get", "()Lorg/apache/lucene/util/IntsRef;");
            mids$[mid_grow_040c4cd0390c5aff] = env->getMethodID(cls, "grow", "(I)V");
            mids$[mid_hashCode_9972fcc56b44e79d] = env->getMethodID(cls, "hashCode", "()I");
            mids$[mid_intAt_1e143afe1894d213] = env->getMethodID(cls, "intAt", "(I)I");
            mids$[mid_ints_d2c45ef07a322466] = env->getMethodID(cls, "ints", "()[I");
            mids$[mid_length_9972fcc56b44e79d] = env->getMethodID(cls, "length", "()I");
            mids$[mid_setIntAt_438c62480c481c65] = env->getMethodID(cls, "setIntAt", "(II)V");
            mids$[mid_setLength_040c4cd0390c5aff] = env->getMethodID(cls, "setLength", "(I)V");
            mids$[mid_toIntsRef_ce9cdfb58d7a482b] = env->getMethodID(cls, "toIntsRef", "()Lorg/apache/lucene/util/IntsRef;");

            class$ = new ::java::lang::Class(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        IntsRefBuilder::IntsRefBuilder() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_f2cc1bce94666404)) {}

        void IntsRefBuilder::append(jint a0) const
        {
          env->callVoidMethod(this$, mids$[mid_append_040c4cd0390c5aff], a0);
        }

        void IntsRefBuilder::clear() const
        {
          env->callVoidMethod(this$, mids$[mid_clear_f2cc1bce94666404]);
        }

        void IntsRefBuilder::copyInts(const ::org::apache::lucene::util::IntsRef & a0) const
        {
          env->callVoidMethod(this$, mids$[mid_copyInts_0be76783572fca9c], a0.this$);
        }

        void IntsRefBuilder::copyInts(const JArray< jint > & a0, jint a1, jint a2) const
        {
          env->callVoidMethod(this$, mids$[mid_copyInts_11b52125bd016996], a0.this$, a1, a2);
        }

        void IntsRefBuilder::copyUTF8Bytes(const ::org::apache::lucene::util::BytesRef & a0) const
        {
          env->callVoidMethod(this$, mids$[mid_copyUTF8Bytes_0bdfd2603b7490a8], a0.this$);
        }

        jboolean IntsRefBuilder::equals(const ::java::lang::Object & a0) const
        {
          return env->callBooleanMethod(this$, mids$[mid_equals_8b72f2dcdde6fd1d], a0.this$);
        }

        ::org::apache::lucene::util::IntsRef IntsRefBuilder::get() const
        {
          return ::org::apache::lucene::util::IntsRef(env->callObjectMethod(this$, mids$[mid_get_ce9cdfb58d7a482b]));
        }

        void IntsRefBuilder::grow(jint a0) const
        {
          env->callVoidMethod(this$, mids$[mid_grow_040c4cd0390c5aff], a0);
        }

        jint IntsRefBuilder::hashCode() const
        {
          return env->callIntMethod(this$, mids$[mid_hashCode_9972fcc56b44e79d]);
        }

        jint IntsRefBuilder::intAt(jint a0) const
        {
          return env->callIntMethod(this$, mids$[mid_intAt_1e143afe1894d213], a0);
        }

        JArray< jint > IntsRefBuilder::ints() const
        {
          return JArray< jint >(env->callObjectMethod(this$, mids$[mid_ints_d2c45ef07a322466]));
        }

        jint IntsRefBuilder::length() const
        {
          return env->callIntMethod(this$, mids$[mid_length_9972fcc56b44e79d]);
        }

        void IntsRefBuilder::setIntAt(jint a0, jint a1) const
        {
          env->callVoidMethod(this$, mids$[mid_setIntAt_438c62480c481c65], a0, a1);
        }

        void IntsRefBuilder::setLength(jint a0) const
        {
          env->callVoidMethod(this$, mids$[mid_setLength_040c4cd0390c5aff], a0);
        }

        ::org::apache::lucene::util::IntsRef IntsRefBuilder::toIntsRef() const
        {
          return ::org::apache::lucene::util::IntsRef(env->callObjectMethod(this$, mids$[mid_toIntsRef_ce9cdfb58d7a482b]));
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        static PyObject *t_IntsRefBuilder_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_IntsRefBuilder_instance_(PyTypeObject *type, PyObject *arg);
        static int t_IntsRefBuilder_init_(t_IntsRefBuilder *self, PyObject *args, PyObject *kwds);
        static PyObject *t_IntsRefBuilder_append(t_IntsRefBuilder *self, PyObject *arg);
        static PyObject *t_IntsRefBuilder_clear(t_IntsRefBuilder *self);
        static PyObject *t_IntsRefBuilder_copyInts(t_IntsRefBuilder *self, PyObject *args);
        static PyObject *t_IntsRefBuilder_copyUTF8Bytes(t_IntsRefBuilder *self, PyObject *arg);
        static PyObject *t_IntsRefBuilder_equals(t_IntsRefBuilder *self, PyObject *args);
        static PyObject *t_IntsRefBuilder_get(t_IntsRefBuilder *self);
        static PyObject *t_IntsRefBuilder_grow(t_IntsRefBuilder *self, PyObject *arg);
        static PyObject *t_IntsRefBuilder_hashCode(t_IntsRefBuilder *self, PyObject *args);
        static PyObject *t_IntsRefBuilder_intAt(t_IntsRefBuilder *self, PyObject *arg);
        static PyObject *t_IntsRefBuilder_ints(t_IntsRefBuilder *self);
        static PyObject *t_IntsRefBuilder_length(t_IntsRefBuilder *self);
        static PyObject *t_IntsRefBuilder_setIntAt(t_IntsRefBuilder *self, PyObject *args);
        static PyObject *t_IntsRefBuilder_setLength(t_IntsRefBuilder *self, PyObject *arg);
        static PyObject *t_IntsRefBuilder_toIntsRef(t_IntsRefBuilder *self);

        static PyMethodDef t_IntsRefBuilder__methods_[] = {
          DECLARE_METHOD(t_IntsRefBuilder, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_IntsRefBuilder, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_IntsRefBuilder, append, METH_O),
          DECLARE_METHOD(t_IntsRefBuilder, clear, METH_NOARGS),
          DECLARE_METHOD(t_IntsRefBuilder, copyInts, METH_VARARGS),
          DECLARE_METHOD(t_IntsRefBuilder, copyUTF8Bytes, METH_O),
          DECLARE_METHOD(t_IntsRefBuilder, equals, METH_VARARGS),
          DECLARE_METHOD(t_IntsRefBuilder, get, METH_NOARGS),
          DECLARE_METHOD(t_IntsRefBuilder, grow, METH_O),
          DECLARE_METHOD(t_IntsRefBuilder, hashCode, METH_VARARGS),
          DECLARE_METHOD(t_IntsRefBuilder, intAt, METH_O),
          DECLARE_METHOD(t_IntsRefBuilder, ints, METH_NOARGS),
          DECLARE_METHOD(t_IntsRefBuilder, length, METH_NOARGS),
          DECLARE_METHOD(t_IntsRefBuilder, setIntAt, METH_VARARGS),
          DECLARE_METHOD(t_IntsRefBuilder, setLength, METH_O),
          DECLARE_METHOD(t_IntsRefBuilder, toIntsRef, METH_NOARGS),
          { NULL, NULL, 0, NULL }
        };

        static PyType_Slot PY_TYPE_SLOTS(IntsRefBuilder)[] = {
          { Py_tp_methods, t_IntsRefBuilder__methods_ },
          { Py_tp_init, (void *) t_IntsRefBuilder_init_ },
          { 0, NULL }
        };

        static PyType_Def *PY_TYPE_BASES(IntsRefBuilder)[] = {
          &PY_TYPE_DEF(::java::lang::Object),
          NULL
        };

        DEFINE_TYPE(IntsRefBuilder, t_IntsRefBuilder, IntsRefBuilder);

        void t_IntsRefBuilder::install(PyObject *module)
        {
          installType(&PY_TYPE(IntsRefBuilder), &PY_TYPE_DEF(IntsRefBuilder), module, "IntsRefBuilder", 0);
        }

        void t_IntsRefBuilder::initialize(PyObject *module)
        {
          PyObject_SetAttrString((PyObject *) PY_TYPE(IntsRefBuilder), "class_", make_descriptor(IntsRefBuilder::initializeClass, 1));
          PyObject_SetAttrString((PyObject *) PY_TYPE(IntsRefBuilder), "wrapfn_", make_descriptor(t_IntsRefBuilder::wrap_jobject));
          PyObject_SetAttrString((PyObject *) PY_TYPE(IntsRefBuilder), "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_IntsRefBuilder_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, IntsRefBuilder::initializeClass, 1)))
            return NULL;
          return t_IntsRefBuilder::wrap_Object(IntsRefBuilder(((t_IntsRefBuilder *) arg)->object.this$));
        }
        static PyObject *t_IntsRefBuilder_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, IntsRefBuilder::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_IntsRefBuilder_init_(t_IntsRefBuilder *self, PyObject *args, PyObject *kwds)
        {
          IntsRefBuilder object((jobject) NULL);

          INT_CALL(object = IntsRefBuilder());
          self->object = object;

          return 0;
        }

        static PyObject *t_IntsRefBuilder_append(t_IntsRefBuilder *self, PyObject *arg)
        {
          jint a0;

          if (!parseArg(arg, "I", &a0))
          {
            OBJ_CALL(self->object.append(a0));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "append", arg);
          return NULL;
        }

        static PyObject *t_IntsRefBuilder_clear(t_IntsRefBuilder *self)
        {
          OBJ_CALL(self->object.clear());
          Py_RETURN_NONE;
        }

        static PyObject *t_IntsRefBuilder_copyInts(t_IntsRefBuilder *self, PyObject *args)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 1:
            {
              ::org::apache::lucene::util::IntsRef a0((jobject) NULL);

              if (!parseArgs(args, "k", ::org::apache::lucene::util::IntsRef::initializeClass, &a0))
              {
                OBJ_CALL(self->object.copyInts(a0));
                Py_RETURN_NONE;
              }
            }
            break;
           case 3:
            {
              JArray< jint > a0((jobject) NULL);
              jint a1;
              jint a2;

              if (!parseArgs(args, "[III", &a0, &a1, &a2))
              {
                OBJ_CALL(self->object.copyInts(a0, a1, a2));
                Py_RETURN_NONE;
              }
            }
          }

          PyErr_SetArgsError((PyObject *) self, "copyInts", args);
          return NULL;
        }

        static PyObject *t_IntsRefBuilder_copyUTF8Bytes(t_IntsRefBuilder *self, PyObject *arg)
        {
          ::org::apache::lucene::util::BytesRef a0((jobject) NULL);

          if (!parseArg(arg, "k", ::org::apache::lucene::util::BytesRef::initializeClass, &a0))
          {
            OBJ_CALL(self->object.copyUTF8Bytes(a0));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "copyUTF8Bytes", arg);
          return NULL;
        }

        static PyObject *t_IntsRefBuilder_equals(t_IntsRefBuilder *self, PyObject *args)
        {
          ::java::lang::Object a0((jobject) NULL);
          jboolean result;

          if (!parseArgs(args, "o", &a0))
          {
            OBJ_CALL(result = self->object.equals(a0));
            Py_RETURN_BOOL(result);
          }

          return callSuper(PY_TYPE(IntsRefBuilder), (PyObject *) self, "equals", args, 2);
        }

        static PyObject *t_IntsRefBuilder_get(t_IntsRefBuilder *self)
        {
          ::org::apache::lucene::util::IntsRef result((jobject) NULL);
          OBJ_CALL(result = self->object.get());
          return ::org::apache::lucene::util::t_IntsRef::wrap_Object(result);
        }

        static PyObject *t_IntsRefBuilder_grow(t_IntsRefBuilder *self, PyObject *arg)
        {
          jint a0;

          if (!parseArg(arg, "I", &a0))
          {
            OBJ_CALL(self->object.grow(a0));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "grow", arg);
          return NULL;
        }

        static PyObject *t_IntsRefBuilder_hashCode(t_IntsRefBuilder *self, PyObject *args)
        {
          jint result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.hashCode());
            return PyLong_FromLong((long) result);
          }

          return callSuper(PY_TYPE(IntsRefBuilder), (PyObject *) self, "hashCode", args, 2);
        }

        static PyObject *t_IntsRefBuilder_intAt(t_IntsRefBuilder *self, PyObject *arg)
        {
          jint a0;
          jint result;

          if (!parseArg(arg, "I", &a0))
          {
            OBJ_CALL(result = self->object.intAt(a0));
            return PyLong_FromLong((long) result);
          }

          PyErr_SetArgsError((PyObject *) self, "intAt", arg);
          return NULL;
        }

        static PyObject *t_IntsRefBuilder_ints(t_IntsRefBuilder *self)
        {
          JArray< jint > result((jobject) NULL);
          OBJ_CALL(result = self->object.ints());
          return result.wrap();
        }

        static PyObject *t_IntsRefBuilder_length(t_IntsRefBuilder *self)
        {
          jint result;
          OBJ_CALL(result = self->object.length());
          return PyLong_FromLong((long) result);
        }

        static PyObject *t_IntsRefBuilder_setIntAt(t_IntsRefBuilder *self, PyObject *args)
        {
          jint a0;
          jint a1;

          if (!parseArgs(args, "II", &a0, &a1))
          {
            OBJ_CALL(self->object.setIntAt(a0, a1));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "setIntAt", args);
          return NULL;
        }

        static PyObject *t_IntsRefBuilder_setLength(t_IntsRefBuilder *self, PyObject *arg)
        {
          jint a0;

          if (!parseArg(arg, "I", &a0))
          {
            OBJ_CALL(self->object.setLength(a0));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "setLength", arg);
          return NULL;
        }

        static PyObject *t_IntsRefBuilder_toIntsRef(t_IntsRefBuilder *self)
        {
          ::org::apache::lucene::util::IntsRef result((jobject) NULL);
          OBJ_CALL(result = self->object.toIntsRef());
          return ::org::apache::lucene::util::t_IntsRef::wrap_Object(result);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/util/IntBlockPool$SliceWriter.h"
#include "org/apache/lucene/util/IntBlockPool.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {

        ::java::lang::Class *IntBlockPool$SliceWriter::class$ = NULL;
        jmethodID *IntBlockPool$SliceWriter::mids$ = NULL;
        bool IntBlockPool$SliceWriter::live$ = false;

        jclass IntBlockPool$SliceWriter::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/util/IntBlockPool$SliceWriter");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_8c5ae63a3106e19c] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/util/IntBlockPool;)V");
            mids$[mid_getCurrentOffset_9972fcc56b44e79d] = env->getMethodID(cls, "getCurrentOffset", "()I");
            mids$[mid_reset_040c4cd0390c5aff] = env->getMethodID(cls, "reset", "(I)V");
            mids$[mid_startNewSlice_9972fcc56b44e79d] = env->getMethodID(cls, "startNewSlice", "()I");
            mids$[mid_writeInt_040c4cd0390c5aff] = env->getMethodID(cls, "writeInt", "(I)V");

            class$ = new ::java::lang::Class(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        IntBlockPool$SliceWriter::IntBlockPool$SliceWriter(const ::org::apache::lucene::util::IntBlockPool & a0) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_8c5ae63a3106e19c, a0.this$)) {}

        jint IntBlockPool$SliceWriter::getCurrentOffset() const
        {
          return env->callIntMethod(this$, mids$[mid_getCurrentOffset_9972fcc56b44e79d]);
        }

        void IntBlockPool$SliceWriter::reset(jint a0) const
        {
          env->callVoidMethod(this$, mids$[mid_reset_040c4cd0390c5aff], a0);
        }

        jint IntBlockPool$SliceWriter::startNewSlice() const
        {
          return env->callIntMethod(this$, mids$[mid_startNewSlice_9972fcc56b44e79d]);
        }

        void IntBlockPool$SliceWriter::writeInt(jint a0) const
        {
          env->callVoidMethod(this$, mids$[mid_writeInt_040c4cd0390c5aff], a0);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        static PyObject *t_IntBlockPool$SliceWriter_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_IntBlockPool$SliceWriter_instance_(PyTypeObject *type, PyObject *arg);
        static int t_IntBlockPool$SliceWriter_init_(t_IntBlockPool$SliceWriter *self, PyObject *args, PyObject *kwds);
        static PyObject *t_IntBlockPool$SliceWriter_getCurrentOffset(t_IntBlockPool$SliceWriter *self);
        static PyObject *t_IntBlockPool$SliceWriter_reset(t_IntBlockPool$SliceWriter *self, PyObject *arg);
        static PyObject *t_IntBlockPool$SliceWriter_startNewSlice(t_IntBlockPool$SliceWriter *self);
        static PyObject *t_IntBlockPool$SliceWriter_writeInt(t_IntBlockPool$SliceWriter *self, PyObject *arg);
        static PyObject *t_IntBlockPool$SliceWriter_get__currentOffset(t_IntBlockPool$SliceWriter *self, void *data);
        static PyGetSetDef t_IntBlockPool$SliceWriter__fields_[] = {
          DECLARE_GET_FIELD(t_IntBlockPool$SliceWriter, currentOffset),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_IntBlockPool$SliceWriter__methods_[] = {
          DECLARE_METHOD(t_IntBlockPool$SliceWriter, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_IntBlockPool$SliceWriter, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_IntBlockPool$SliceWriter, getCurrentOffset, METH_NOARGS),
          DECLARE_METHOD(t_IntBlockPool$SliceWriter, reset, METH_O),
          DECLARE_METHOD(t_IntBlockPool$SliceWriter, startNewSlice, METH_NOARGS),
          DECLARE_METHOD(t_IntBlockPool$SliceWriter, writeInt, METH_O),
          { NULL, NULL, 0, NULL }
        };

        static PyType_Slot PY_TYPE_SLOTS(IntBlockPool$SliceWriter)[] = {
          { Py_tp_methods, t_IntBlockPool$SliceWriter__methods_ },
          { Py_tp_init, (void *) t_IntBlockPool$SliceWriter_init_ },
          { Py_tp_getset, t_IntBlockPool$SliceWriter__fields_ },
          { 0, NULL }
        };

        static PyType_Def *PY_TYPE_BASES(IntBlockPool$SliceWriter)[] = {
          &PY_TYPE_DEF(::java::lang::Object),
          NULL
        };

        DEFINE_TYPE(IntBlockPool$SliceWriter, t_IntBlockPool$SliceWriter, IntBlockPool$SliceWriter);

        void t_IntBlockPool$SliceWriter::install(PyObject *module)
        {
          installType(&PY_TYPE(IntBlockPool$SliceWriter), &PY_TYPE_DEF(IntBlockPool$SliceWriter), module, "IntBlockPool$SliceWriter", 0);
        }

        void t_IntBlockPool$SliceWriter::initialize(PyObject *module)
        {
          PyObject_SetAttrString((PyObject *) PY_TYPE(IntBlockPool$SliceWriter), "class_", make_descriptor(IntBlockPool$SliceWriter::initializeClass, 1));
          PyObject_SetAttrString((PyObject *) PY_TYPE(IntBlockPool$SliceWriter), "wrapfn_", make_descriptor(t_IntBlockPool$SliceWriter::wrap_jobject));
          PyObject_SetAttrString((PyObject *) PY_TYPE(IntBlockPool$SliceWriter), "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_IntBlockPool$SliceWriter_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, IntBlockPool$SliceWriter::initializeClass, 1)))
            return NULL;
          return t_IntBlockPool$SliceWriter::wrap_Object(IntBlockPool$SliceWriter(((t_IntBlockPool$SliceWriter *) arg)->object.this$));
        }
        static PyObject *t_IntBlockPool$SliceWriter_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, IntBlockPool$SliceWriter::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_IntBlockPool$SliceWriter_init_(t_IntBlockPool$SliceWriter *self, PyObject *args, PyObject *kwds)
        {
          ::org::apache::lucene::util::IntBlockPool a0((jobject) NULL);
          IntBlockPool$SliceWriter object((jobject) NULL);

          if (!parseArgs(args, "k", ::org::apache::lucene::util::IntBlockPool::initializeClass, &a0))
          {
            INT_CALL(object = IntBlockPool$SliceWriter(a0));
            self->object = object;
          }
          else
          {
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }

        static PyObject *t_IntBlockPool$SliceWriter_getCurrentOffset(t_IntBlockPool$SliceWriter *self)
        {
          jint result;
          OBJ_CALL(result = self->object.getCurrentOffset());
          return PyLong_FromLong((long) result);
        }

        static PyObject *t_IntBlockPool$SliceWriter_reset(t_IntBlockPool$SliceWriter *self, PyObject *arg)
        {
          jint a0;

          if (!parseArg(arg, "I", &a0))
          {
            OBJ_CALL(self->object.reset(a0));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "reset", arg);
          return NULL;
        }

        static PyObject *t_IntBlockPool$SliceWriter_startNewSlice(t_IntBlockPool$SliceWriter *self)
        {
          jint result;
          OBJ_CALL(result = self->object.startNewSlice());
          return PyLong_FromLong((long) result);
        }

        static PyObject *t_IntBlockPool$SliceWriter_writeInt(t_IntBlockPool$SliceWriter *self, PyObject *arg)
        {
          jint a0;

          if (!parseArg(arg, "I", &a0))
          {
            OBJ_CALL(self->object.writeInt(a0));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "writeInt", arg);
          return NULL;
        }

        static PyObject *t_IntBlockPool$SliceWriter_get__currentOffset(t_IntBlockPool$SliceWriter *self, void *data)
        {
          jint value;
          OBJ_CALL(value = self->object.getCurrentOffset());
          return PyLong_FromLong((long) value);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/spans/SpanTermQuery$SpanTermWeight.h"
#include "java/util/Map.h"
#include "org/apache/lucene/index/LeafReaderContext.h"
#include "org/apache/lucene/search/IndexSearcher.h"
#include "org/apache/lucene/search/spans/SpanTermQuery.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/index/Term.h"
#include "org/apache/lucene/search/spans/SpanWeight$Postings.h"
#include "org/apache/lucene/index/TermStates.h"
#include "org/apache/lucene/search/spans/Spans.h"
#include "java/util/Set.h"
#include "java/io/IOException.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace spans {

          ::java::lang::Class *SpanTermQuery$SpanTermWeight::class$ = NULL;
          jmethodID *SpanTermQuery$SpanTermWeight::mids$ = NULL;
          bool SpanTermQuery$SpanTermWeight::live$ = false;

          jclass SpanTermQuery$SpanTermWeight::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/search/spans/SpanTermQuery$SpanTermWeight");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_008a8be2954119d6] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/search/spans/SpanTermQuery;Lorg/apache/lucene/index/TermStates;Lorg/apache/lucene/search/IndexSearcher;Ljava/util/Map;F)V");
              mids$[mid_extractTermStates_408bd889ee3beae5] = env->getMethodID(cls, "extractTermStates", "(Ljava/util/Map;)V");
              mids$[mid_extractTerms_d5a4a8d4b806f0ba] = env->getMethodID(cls, "extractTerms", "(Ljava/util/Set;)V");
              mids$[mid_getSpans_219c078c64a446fd] = env->getMethodID(cls, "getSpans", "(Lorg/apache/lucene/index/LeafReaderContext;Lorg/apache/lucene/search/spans/SpanWeight$Postings;)Lorg/apache/lucene/search/spans/Spans;");
              mids$[mid_isCacheable_07cae694a8cf1c6d] = env->getMethodID(cls, "isCacheable", "(Lorg/apache/lucene/index/LeafReaderContext;)Z");

              class$ = new ::java::lang::Class(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          SpanTermQuery$SpanTermWeight::SpanTermQuery$SpanTermWeight(const ::org::apache::lucene::search::spans::SpanTermQuery & a0, const ::org::apache::lucene::index::TermStates & a1, const ::org::apache::lucene::search::IndexSearcher & a2, const ::java::util::Map & a3, jfloat a4) : ::org::apache::lucene::search::spans::SpanWeight(env->newObject(initializeClass, &mids$, mid_init$_008a8be2954119d6, a0.this$, a1.this$, a2.this$, a3.this$, a4)) {}

          void SpanTermQuery$SpanTermWeight::extractTermStates(const ::java::util::Map & a0) const
          {
            env->callVoidMethod(this$, mids$[mid_extractTermStates_408bd889ee3beae5], a0.this$);
          }

          void SpanTermQuery$SpanTermWeight::extractTerms(const ::java::util::Set & a0) const
          {
            env->callVoidMethod(this$, mids$[mid_extractTerms_d5a4a8d4b806f0ba], a0.this$);
          }

          ::org::apache::lucene::search::spans::Spans SpanTermQuery$SpanTermWeight::getSpans(const ::org::apache::lucene::index::LeafReaderContext & a0, const ::org::apache::lucene::search::spans::SpanWeight$Postings & a1) const
          {
            return ::org::apache::lucene::search::spans::Spans(env->callObjectMethod(this$, mids$[mid_getSpans_219c078c64a446fd], a0.this$, a1.this$));
          }

          jboolean SpanTermQuery$SpanTermWeight::isCacheable(const ::org::apache::lucene::index::LeafReaderContext & a0) const
          {
            return env->callBooleanMethod(this$, mids$[mid_isCacheable_07cae694a8cf1c6d], a0.this$);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace spans {
          static PyObject *t_SpanTermQuery$SpanTermWeight_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_SpanTermQuery$SpanTermWeight_instance_(PyTypeObject *type, PyObject *arg);
          static int t_SpanTermQuery$SpanTermWeight_init_(t_SpanTermQuery$SpanTermWeight *self, PyObject *args, PyObject *kwds);
          static PyObject *t_SpanTermQuery$SpanTermWeight_extractTermStates(t_SpanTermQuery$SpanTermWeight *self, PyObject *args);
          static PyObject *t_SpanTermQuery$SpanTermWeight_extractTerms(t_SpanTermQuery$SpanTermWeight *self, PyObject *args);
          static PyObject *t_SpanTermQuery$SpanTermWeight_getSpans(t_SpanTermQuery$SpanTermWeight *self, PyObject *args);
          static PyObject *t_SpanTermQuery$SpanTermWeight_isCacheable(t_SpanTermQuery$SpanTermWeight *self, PyObject *args);

          static PyMethodDef t_SpanTermQuery$SpanTermWeight__methods_[] = {
            DECLARE_METHOD(t_SpanTermQuery$SpanTermWeight, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_SpanTermQuery$SpanTermWeight, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_SpanTermQuery$SpanTermWeight, extractTermStates, METH_VARARGS),
            DECLARE_METHOD(t_SpanTermQuery$SpanTermWeight, extractTerms, METH_VARARGS),
            DECLARE_METHOD(t_SpanTermQuery$SpanTermWeight, getSpans, METH_VARARGS),
            DECLARE_METHOD(t_SpanTermQuery$SpanTermWeight, isCacheable, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          static PyType_Slot PY_TYPE_SLOTS(SpanTermQuery$SpanTermWeight)[] = {
            { Py_tp_methods, t_SpanTermQuery$SpanTermWeight__methods_ },
            { Py_tp_init, (void *) t_SpanTermQuery$SpanTermWeight_init_ },
            { 0, NULL }
          };

          static PyType_Def *PY_TYPE_BASES(SpanTermQuery$SpanTermWeight)[] = {
            &PY_TYPE_DEF(::org::apache::lucene::search::spans::SpanWeight),
            NULL
          };

          DEFINE_TYPE(SpanTermQuery$SpanTermWeight, t_SpanTermQuery$SpanTermWeight, SpanTermQuery$SpanTermWeight);

          void t_SpanTermQuery$SpanTermWeight::install(PyObject *module)
          {
            installType(&PY_TYPE(SpanTermQuery$SpanTermWeight), &PY_TYPE_DEF(SpanTermQuery$SpanTermWeight), module, "SpanTermQuery$SpanTermWeight", 0);
          }

          void t_SpanTermQuery$SpanTermWeight::initialize(PyObject *module)
          {
            PyObject_SetAttrString((PyObject *) PY_TYPE(SpanTermQuery$SpanTermWeight), "class_", make_descriptor(SpanTermQuery$SpanTermWeight::initializeClass, 1));
            PyObject_SetAttrString((PyObject *) PY_TYPE(SpanTermQuery$SpanTermWeight), "wrapfn_", make_descriptor(t_SpanTermQuery$SpanTermWeight::wrap_jobject));
            PyObject_SetAttrString((PyObject *) PY_TYPE(SpanTermQuery$SpanTermWeight), "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_SpanTermQuery$SpanTermWeight_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, SpanTermQuery$SpanTermWeight::initializeClass, 1)))
              return NULL;
            return t_SpanTermQuery$SpanTermWeight::wrap_Object(SpanTermQuery$SpanTermWeight(((t_SpanTermQuery$SpanTermWeight *) arg)->object.this$));
          }
          static PyObject *t_SpanTermQuery$SpanTermWeight_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, SpanTermQuery$SpanTermWeight::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_SpanTermQuery$SpanTermWeight_init_(t_SpanTermQuery$SpanTermWeight *self, PyObject *args, PyObject *kwds)
          {
            ::org::apache::lucene::search::spans::SpanTermQuery a0((jobject) NULL);
            ::org::apache::lucene::index::TermStates a1((jobject) NULL);
            ::org::apache::lucene::search::IndexSearcher a2((jobject) NULL);
            ::java::util::Map a3((jobject) NULL);
            PyTypeObject **p3;
            jfloat a4;
            SpanTermQuery$SpanTermWeight object((jobject) NULL);

            if (!parseArgs(args, "kkkKF", ::org::apache::lucene::search::spans::SpanTermQuery::initializeClass, ::org::apache::lucene::index::TermStates::initializeClass, ::org::apache::lucene::search::IndexSearcher::initializeClass, ::java::util::Map::initializeClass, &a0, &a1, &a2, &a3, &p3, ::java::util::t_Map::parameters_, &a4))
            {
              INT_CALL(object = SpanTermQuery$SpanTermWeight(a0, a1, a2, a3, a4));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_SpanTermQuery$SpanTermWeight_extractTermStates(t_SpanTermQuery$SpanTermWeight *self, PyObject *args)
          {
            ::java::util::Map a0((jobject) NULL);
            PyTypeObject **p0;

            if (!parseArgs(args, "K", ::java::util::Map::initializeClass, &a0, &p0, ::java::util::t_Map::parameters_))
            {
              OBJ_CALL(self->object.extractTermStates(a0));
              Py_RETURN_NONE;
            }

            return callSuper(PY_TYPE(SpanTermQuery$SpanTermWeight), (PyObject *) self, "extractTermStates", args, 2);
          }

          static PyObject *t_SpanTermQuery$SpanTermWeight_extractTerms(t_SpanTermQuery$SpanTermWeight *self, PyObject *args)
          {
            ::java::util::Set a0((jobject) NULL);
            PyTypeObject **p0;

            if (!parseArgs(args, "K", ::java::util::Set::initializeClass, &a0, &p0, ::java::util::t_Set::parameters_))
            {
              OBJ_CALL(self->object.extractTerms(a0));
              Py_RETURN_NONE;
            }

            return callSuper(PY_TYPE(SpanTermQuery$SpanTermWeight), (PyObject *) self, "extractTerms", args, 2);
          }

          static PyObject *t_SpanTermQuery$SpanTermWeight_getSpans(t_SpanTermQuery$SpanTermWeight *self, PyObject *args)
          {
            ::org::apache::lucene::index::LeafReaderContext a0((jobject) NULL);
            ::org::apache::lucene::search::spans::SpanWeight$Postings a1((jobject) NULL);
            PyTypeObject **p1;
            ::org::apache::lucene::search::spans::Spans result((jobject) NULL);

            if (!parseArgs(args, "kK", ::org::apache::lucene::index::LeafReaderContext::initializeClass, ::org::apache::lucene::search::spans::SpanWeight$Postings::initializeClass, &a0, &a1, &p1, ::org::apache::lucene::search::spans::t_SpanWeight$Postings::parameters_))
            {
              OBJ_CALL(result = self->object.getSpans(a0, a1));
              return ::org::apache::lucene::search::spans::t_Spans::wrap_Object(result);
            }

            return callSuper(PY_TYPE(SpanTermQuery$SpanTermWeight), (PyObject *) self, "getSpans", args, 2);
          }

          static PyObject *t_SpanTermQuery$SpanTermWeight_isCacheable(t_SpanTermQuery$SpanTermWeight *self, PyObject *args)
          {
            ::org::apache::lucene::index::LeafReaderContext a0((jobject) NULL);
            jboolean result;

            if (!parseArgs(args, "k", ::org::apache::lucene::index::LeafReaderContext::initializeClass, &a0))
            {
              OBJ_CALL(result = self->object.isCacheable(a0));
              Py_RETURN_BOOL(result);
            }

            return callSuper(PY_TYPE(SpanTermQuery$SpanTermWeight), (PyObject *) self, "isCacheable", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/LongValues.h"
#include "java/io/IOException.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {

        ::java::lang::Class *LongValues::class$ = NULL;
        jmethodID *LongValues::mids$ = NULL;
        bool LongValues::live$ = false;

        jclass LongValues::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/search/LongValues");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_f2cc1bce94666404] = env->getMethodID(cls, "<init>", "()V");
            mids$[mid_advanceExact_a1d30e1ee40c89a2] = env->getMethodID(cls, "advanceExact", "(I)Z");
            mids$[mid_longValue_2e5ae9edcb9b072f] = env->getMethodID(cls, "longValue", "()J");

            class$ = new ::java::lang::Class(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        LongValues::LongValues() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_f2cc1bce94666404)) {}

        jboolean LongValues::advanceExact(jint a0) const
        {
          return env->callBooleanMethod(this$, mids$[mid_advanceExact_a1d30e1ee40c89a2], a0);
        }

        jlong LongValues::longValue() const
        {
          return env->callLongMethod(this$, mids$[mid_longValue_2e5ae9edcb9b072f]);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        static PyObject *t_LongValues_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_LongValues_instance_(PyTypeObject *type, PyObject *arg);
        static int t_LongValues_init_(t_LongValues *self, PyObject *args, PyObject *kwds);
        static PyObject *t_LongValues_advanceExact(t_LongValues *self, PyObject *arg);
        static PyObject *t_LongValues_longValue(t_LongValues *self);

        static PyMethodDef t_LongValues__methods_[] = {
          DECLARE_METHOD(t_LongValues, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_LongValues, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_LongValues, advanceExact, METH_O),
          DECLARE_METHOD(t_LongValues, longValue, METH_NOARGS),
          { NULL, NULL, 0, NULL }
        };

        static PyType_Slot PY_TYPE_SLOTS(LongValues)[] = {
          { Py_tp_methods, t_LongValues__methods_ },
          { Py_tp_init, (void *) t_LongValues_init_ },
          { 0, NULL }
        };

        static PyType_Def *PY_TYPE_BASES(LongValues)[] = {
          &PY_TYPE_DEF(::java::lang::Object),
          NULL
        };

        DEFINE_TYPE(LongValues, t_LongValues, LongValues);

        void t_LongValues::install(PyObject *module)
        {
          installType(&PY_TYPE(LongValues), &PY_TYPE_DEF(LongValues), module, "LongValues", 0);
        }

        void t_LongValues::initialize(PyObject *module)
        {
          PyObject_SetAttrString((PyObject *) PY_TYPE(LongValues), "class_", make_descriptor(LongValues::initializeClass, 1));
          PyObject_SetAttrString((PyObject *) PY_TYPE(LongValues), "wrapfn_", make_descriptor(t_LongValues::wrap_jobject));
          PyObject_SetAttrString((PyObject *) PY_TYPE(LongValues), "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_LongValues_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, LongValues::initializeClass, 1)))
            return NULL;
          return t_LongValues::wrap_Object(LongValues(((t_LongValues *) arg)->object.this$));
        }
        static PyObject *t_LongValues_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, LongValues::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_LongValues_init_(t_LongValues *self, PyObject *args, PyObject *kwds)
        {
          LongValues object((jobject) NULL);

          INT_CALL(object = LongValues());
          self->object = object;

          return 0;
        }

        static PyObject *t_LongValues_advanceExact(t_LongValues *self, PyObject *arg)
        {
          jint a0;
          jboolean result;

          if (!parseArg(arg, "I", &a0))
          {
            OBJ_CALL(result = self->object.advanceExact(a0));
            Py_RETURN_BOOL(result);
          }

          PyErr_SetArgsError((PyObject *) self, "advanceExact", arg);
          return NULL;
        }

        static PyObject *t_LongValues_longValue(t_LongValues *self)
        {
          jlong result;
          OBJ_CALL(result = self->object.longValue());
          return PyLong_FromLongLong((PY_LONG_LONG) result);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/store/FilterDirectory.h"
#include "org/apache/lucene/store/IndexOutput.h"
#include "org/apache/lucene/store/IOContext.h"
#include "java/util/Collection.h"
#include "org/apache/lucene/store/IndexInput.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/store/Lock.h"
#include "java/lang/String.h"
#include "java/util/Set.h"
#include "java/io/IOException.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace store {

        ::java::lang::Class *FilterDirectory::class$ = NULL;
        jmethodID *FilterDirectory::mids$ = NULL;
        bool FilterDirectory::live$ = false;

        jclass FilterDirectory::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/store/FilterDirectory");

            mids$ = new jmethodID[max_mid];
            mids$[mid_close_f2cc1bce94666404] = env->getMethodID(cls, "close", "()V");
            mids$[mid_createOutput_40e6d6dcc3f676b9] = env->getMethodID(cls, "createOutput", "(Ljava/lang/String;Lorg/apache/lucene/store/IOContext;)Lorg/apache/lucene/store/IndexOutput;");
            mids$[mid_createTempOutput_918504249dfbe513] = env->getMethodID(cls, "createTempOutput", "(Ljava/lang/String;Ljava/lang/String;Lorg/apache/lucene/store/IOContext;)Lorg/apache/lucene/store/IndexOutput;");
            mids$[mid_deleteFile_9fd2eb66a64e6f0f] = env->getMethodID(cls, "deleteFile", "(Ljava/lang/String;)V");
            mids$[mid_fileLength_b1e05207ec98e246] = env->getMethodID(cls, "fileLength", "(Ljava/lang/String;)J");
            mids$[mid_getDelegate_7452b086ce8219b2] = env->getMethodID(cls, "getDelegate", "()Lorg/apache/lucene/store/Directory;");
            mids$[mid_getPendingDeletions_7dcf4034c6d1a92a] = env->getMethodID(cls, "getPendingDeletions", "()Ljava/util/Set;");
            mids$[mid_listAll_9865da0b5ee490bc] = env->getMethodID(cls, "listAll", "()[Ljava/lang/String;");
            mids$[mid_obtainLock_f265149b22017c5b] = env->getMethodID(cls, "obtainLock", "(Ljava/lang/String;)Lorg/apache/lucene/store/Lock;");
            mids$[mid_openInput_cc9a9aabe8db93df] = env->getMethodID(cls, "openInput", "(Ljava/lang/String;Lorg/apache/lucene/store/IOContext;)Lorg/apache/lucene/store/IndexInput;");
            mids$[mid_rename_15b72f6a44ff93f2] = env->getMethodID(cls, "rename", "(Ljava/lang/String;Ljava/lang/String;)V");
            mids$[mid_sync_50bc3ddc62a19f2d] = env->getMethodID(cls, "sync", "(Ljava/util/Collection;)V");
            mids$[mid_syncMetaData_f2cc1bce94666404] = env->getMethodID(cls, "syncMetaData", "()V");
            mids$[mid_toString_db9b55ba01e03e4b] = env->getMethodID(cls, "toString", "()Ljava/lang/String;");
            mids$[mid_unwrap_4df75b8bf78a8ecf] = env->getStaticMethodID(cls, "unwrap", "(Lorg/apache/lucene/store/Directory;)Lorg/apache/lucene/store/Directory;");

            class$ = new ::java::lang::Class(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        void FilterDirectory::close() const
        {
          env->callVoidMethod(this$, mids$[mid_close_f2cc1bce94666404]);
        }

        ::org::apache::lucene::store::IndexOutput FilterDirectory::createOutput(const ::java::lang::String & a0, const ::org::apache::lucene::store::IOContext & a1) const
        {
          return ::org::apache::lucene::store::IndexOutput(env->callObjectMethod(this$, mids$[mid_createOutput_40e6d6dcc3f676b9], a0.this$, a1.this$));
        }

        ::org::apache::lucene::store::IndexOutput FilterDirectory::createTempOutput(const ::java::lang::String & a0, const ::java::lang::String & a1, const ::org::apache::lucene::store::IOContext & a2) const
        {
          return ::org::apache::lucene::store::IndexOutput(env->callObjectMethod(this$, mids$[mid_createTempOutput_918504249dfbe513], a0.this$, a1.this$, a2.this$));
        }

        void FilterDirectory::deleteFile(const ::java::lang::String & a0) const
        {
          env->callVoidMethod(this$, mids$[mid_deleteFile_9fd2eb66a64e6f0f], a0.this$);
        }

        jlong FilterDirectory::fileLength(const ::java::lang::String & a0) const
        {
          return env->callLongMethod(this$, mids$[mid_fileLength_b1e05207ec98e246], a0.this$);
        }

        ::org::apache::lucene::store::Directory FilterDirectory::getDelegate() const
        {
          return ::org::apache::lucene::store::Directory(env->callObjectMethod(this$, mids$[mid_getDelegate_7452b086ce8219b2]));
        }

        ::java::util::Set FilterDirectory::getPendingDeletions() const
        {
          return ::java::util::Set(env->callObjectMethod(this$, mids$[mid_getPendingDeletions_7dcf4034c6d1a92a]));
        }

        JArray< ::java::lang::String > FilterDirectory::listAll() const
        {
          return JArray< ::java::lang::String >(env->callObjectMethod(this$, mids$[mid_listAll_9865da0b5ee490bc]));
        }

        ::org::apache::lucene::store::Lock FilterDirectory::obtainLock(const ::java::lang::String & a0) const
        {
          return ::org::apache::lucene::store::Lock(env->callObjectMethod(this$, mids$[mid_obtainLock_f265149b22017c5b], a0.this$));
        }

        ::org::apache::lucene::store::IndexInput FilterDirectory::openInput(const ::java::lang::String & a0, const ::org::apache::lucene::store::IOContext & a1) const
        {
          return ::org::apache::lucene::store::IndexInput(env->callObjectMethod(this$, mids$[mid_openInput_cc9a9aabe8db93df], a0.this$, a1.this$));
        }

        void FilterDirectory::rename(const ::java::lang::String & a0, const ::java::lang::String & a1) const
        {
          env->callVoidMethod(this$, mids$[mid_rename_15b72f6a44ff93f2], a0.this$, a1.this$);
        }

        void FilterDirectory::sync(const ::java::util::Collection & a0) const
        {
          env->callVoidMethod(this$, mids$[mid_sync_50bc3ddc62a19f2d], a0.this$);
        }

        void FilterDirectory::syncMetaData() const
        {
          env->callVoidMethod(this$, mids$[mid_syncMetaData_f2cc1bce94666404]);
        }

        ::java::lang::String FilterDirectory::toString() const
        {
          return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_db9b55ba01e03e4b]));
        }

        ::org::apache::lucene::store::Directory FilterDirectory::unwrap(const ::org::apache::lucene::store::Directory & a0)
        {
          jclass cls = env->getClass(initializeClass);
          return ::org::apache::lucene::store::Directory(env->callStaticObjectMethod(cls, mids$[mid_unwrap_4df75b8bf78a8ecf], a0.this$));
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace store {
        static PyObject *t_FilterDirectory_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_FilterDirectory_instance_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_FilterDirectory_close(t_FilterDirectory *self, PyObject *args);
        static PyObject *t_FilterDirectory_createOutput(t_FilterDirectory *self, PyObject *args);
        static PyObject *t_FilterDirectory_createTempOutput(t_FilterDirectory *self, PyObject *args);
        static PyObject *t_FilterDirectory_deleteFile(t_FilterDirectory *self, PyObject *args);
        static PyObject *t_FilterDirectory_fileLength(t_FilterDirectory *self, PyObject *args);
        static PyObject *t_FilterDirectory_getDelegate(t_FilterDirectory *self);
        static PyObject *t_FilterDirectory_getPendingDeletions(t_FilterDirectory *self, PyObject *args);
        static PyObject *t_FilterDirectory_listAll(t_FilterDirectory *self, PyObject *args);
        static PyObject *t_FilterDirectory_obtainLock(t_FilterDirectory *self, PyObject *args);
        static PyObject *t_FilterDirectory_openInput(t_FilterDirectory *self, PyObject *args);
        static PyObject *t_FilterDirectory_rename(t_FilterDirectory *self, PyObject *args);
        static PyObject *t_FilterDirectory_sync(t_FilterDirectory *self, PyObject *args);
        static PyObject *t_FilterDirectory_syncMetaData(t_FilterDirectory *self, PyObject *args);
        static PyObject *t_FilterDirectory_toString(t_FilterDirectory *self, PyObject *args);
        static PyObject *t_FilterDirectory_unwrap(PyTypeObject *type, PyObject *arg);
        static PyObject *t_FilterDirectory_get__delegate(t_FilterDirectory *self, void *data);
        static PyObject *t_FilterDirectory_get__pendingDeletions(t_FilterDirectory *self, void *data);
        static PyGetSetDef t_FilterDirectory__fields_[] = {
          DECLARE_GET_FIELD(t_FilterDirectory, delegate),
          DECLARE_GET_FIELD(t_FilterDirectory, pendingDeletions),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_FilterDirectory__methods_[] = {
          DECLARE_METHOD(t_FilterDirectory, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_FilterDirectory, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_FilterDirectory, close, METH_VARARGS),
          DECLARE_METHOD(t_FilterDirectory, createOutput, METH_VARARGS),
          DECLARE_METHOD(t_FilterDirectory, createTempOutput, METH_VARARGS),
          DECLARE_METHOD(t_FilterDirectory, deleteFile, METH_VARARGS),
          DECLARE_METHOD(t_FilterDirectory, fileLength, METH_VARARGS),
          DECLARE_METHOD(t_FilterDirectory, getDelegate, METH_NOARGS),
          DECLARE_METHOD(t_FilterDirectory, getPendingDeletions, METH_VARARGS),
          DECLARE_METHOD(t_FilterDirectory, listAll, METH_VARARGS),
          DECLARE_METHOD(t_FilterDirectory, obtainLock, METH_VARARGS),
          DECLARE_METHOD(t_FilterDirectory, openInput, METH_VARARGS),
          DECLARE_METHOD(t_FilterDirectory, rename, METH_VARARGS),
          DECLARE_METHOD(t_FilterDirectory, sync, METH_VARARGS),
          DECLARE_METHOD(t_FilterDirectory, syncMetaData, METH_VARARGS),
          DECLARE_METHOD(t_FilterDirectory, toString, METH_VARARGS),
          DECLARE_METHOD(t_FilterDirectory, unwrap, METH_O | METH_CLASS),
          { NULL, NULL, 0, NULL }
        };

        static PyType_Slot PY_TYPE_SLOTS(FilterDirectory)[] = {
          { Py_tp_methods, t_FilterDirectory__methods_ },
          { Py_tp_init, (void *) abstract_init },
          { Py_tp_getset, t_FilterDirectory__fields_ },
          { 0, NULL }
        };

        static PyType_Def *PY_TYPE_BASES(FilterDirectory)[] = {
          &PY_TYPE_DEF(::org::apache::lucene::store::Directory),
          NULL
        };

        DEFINE_TYPE(FilterDirectory, t_FilterDirectory, FilterDirectory);

        void t_FilterDirectory::install(PyObject *module)
        {
          installType(&PY_TYPE(FilterDirectory), &PY_TYPE_DEF(FilterDirectory), module, "FilterDirectory", 0);
        }

        void t_FilterDirectory::initialize(PyObject *module)
        {
          PyObject_SetAttrString((PyObject *) PY_TYPE(FilterDirectory), "class_", make_descriptor(FilterDirectory::initializeClass, 1));
          PyObject_SetAttrString((PyObject *) PY_TYPE(FilterDirectory), "wrapfn_", make_descriptor(t_FilterDirectory::wrap_jobject));
          PyObject_SetAttrString((PyObject *) PY_TYPE(FilterDirectory), "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_FilterDirectory_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, FilterDirectory::initializeClass, 1)))
            return NULL;
          return t_FilterDirectory::wrap_Object(FilterDirectory(((t_FilterDirectory *) arg)->object.this$));
        }
        static PyObject *t_FilterDirectory_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, FilterDirectory::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static PyObject *t_FilterDirectory_close(t_FilterDirectory *self, PyObject *args)
        {

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(self->object.close());
            Py_RETURN_NONE;
          }

          return callSuper(PY_TYPE(FilterDirectory), (PyObject *) self, "close", args, 2);
        }

        static PyObject *t_FilterDirectory_createOutput(t_FilterDirectory *self, PyObject *args)
        {
          ::java::lang::String a0((jobject) NULL);
          ::org::apache::lucene::store::IOContext a1((jobject) NULL);
          ::org::apache::lucene::store::IndexOutput result((jobject) NULL);

          if (!parseArgs(args, "sk", ::org::apache::lucene::store::IOContext::initializeClass, &a0, &a1))
          {
            OBJ_CALL(result = self->object.createOutput(a0, a1));
            return ::org::apache::lucene::store::t_IndexOutput::wrap_Object(result);
          }

          return callSuper(PY_TYPE(FilterDirectory), (PyObject *) self, "createOutput", args, 2);
        }

        static PyObject *t_FilterDirectory_createTempOutput(t_FilterDirectory *self, PyObject *args)
        {
          ::java::lang::String a0((jobject) NULL);
          ::java::lang::String a1((jobject) NULL);
          ::org::apache::lucene::store::IOContext a2((jobject) NULL);
          ::org::apache::lucene::store::IndexOutput result((jobject) NULL);

          if (!parseArgs(args, "ssk", ::org::apache::lucene::store::IOContext::initializeClass, &a0, &a1, &a2))
          {
            OBJ_CALL(result = self->object.createTempOutput(a0, a1, a2));
            return ::org::apache::lucene::store::t_IndexOutput::wrap_Object(result);
          }

          return callSuper(PY_TYPE(FilterDirectory), (PyObject *) self, "createTempOutput", args, 2);
        }

        static PyObject *t_FilterDirectory_deleteFile(t_FilterDirectory *self, PyObject *args)
        {
          ::java::lang::String a0((jobject) NULL);

          if (!parseArgs(args, "s", &a0))
          {
            OBJ_CALL(self->object.deleteFile(a0));
            Py_RETURN_NONE;
          }

          return callSuper(PY_TYPE(FilterDirectory), (PyObject *) self, "deleteFile", args, 2);
        }

        static PyObject *t_FilterDirectory_fileLength(t_FilterDirectory *self, PyObject *args)
        {
          ::java::lang::String a0((jobject) NULL);
          jlong result;

          if (!parseArgs(args, "s", &a0))
          {
            OBJ_CALL(result = self->object.fileLength(a0));
            return PyLong_FromLongLong((PY_LONG_LONG) result);
          }

          return callSuper(PY_TYPE(FilterDirectory), (PyObject *) self, "fileLength", args, 2);
        }

        static PyObject *t_FilterDirectory_getDelegate(t_FilterDirectory *self)
        {
          ::org::apache::lucene::store::Directory result((jobject) NULL);
          OBJ_CALL(result = self->object.getDelegate());
          return ::org::apache::lucene::store::t_Directory::wrap_Object(result);
        }

        static PyObject *t_FilterDirectory_getPendingDeletions(t_FilterDirectory *self, PyObject *args)
        {
          ::java::util::Set result((jobject) NULL);

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.getPendingDeletions());
            return ::java::util::t_Set::wrap_Object(result, ::java::lang::PY_TYPE(String));
          }

          return callSuper(PY_TYPE(FilterDirectory), (PyObject *) self, "getPendingDeletions", args, 2);
        }

        static PyObject *t_FilterDirectory_listAll(t_FilterDirectory *self, PyObject *args)
        {
          JArray< ::java::lang::String > result((jobject) NULL);

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.listAll());
            return JArray<jstring>(result.this$).wrap();
          }

          return callSuper(PY_TYPE(FilterDirectory), (PyObject *) self, "listAll", args, 2);
        }

        static PyObject *t_FilterDirectory_obtainLock(t_FilterDirectory *self, PyObject *args)
        {
          ::java::lang::String a0((jobject) NULL);
          ::org::apache::lucene::store::Lock result((jobject) NULL);

          if (!parseArgs(args, "s", &a0))
          {
            OBJ_CALL(result = self->object.obtainLock(a0));
            return ::org::apache::lucene::store::t_Lock::wrap_Object(result);
          }

          return callSuper(PY_TYPE(FilterDirectory), (PyObject *) self, "obtainLock", args, 2);
        }

        static PyObject *t_FilterDirectory_openInput(t_FilterDirectory *self, PyObject *args)
        {
          ::java::lang::String a0((jobject) NULL);
          ::org::apache::lucene::store::IOContext a1((jobject) NULL);
          ::org::apache::lucene::store::IndexInput result((jobject) NULL);

          if (!parseArgs(args, "sk", ::org::apache::lucene::store::IOContext::initializeClass, &a0, &a1))
          {
            OBJ_CALL(result = self->object.openInput(a0, a1));
            return ::org::apache::lucene::store::t_IndexInput::wrap_Object(result);
          }

          return callSuper(PY_TYPE(FilterDirectory), (PyObject *) self, "openInput", args, 2);
        }

        static PyObject *t_FilterDirectory_rename(t_FilterDirectory *self, PyObject *args)
        {
          ::java::lang::String a0((jobject) NULL);
          ::java::lang::String a1((jobject) NULL);

          if (!parseArgs(args, "ss", &a0, &a1))
          {
            OBJ_CALL(self->object.rename(a0, a1));
            Py_RETURN_NONE;
          }

          return callSuper(PY_TYPE(FilterDirectory), (PyObject *) self, "rename", args, 2);
        }

        static PyObject *t_FilterDirectory_sync(t_FilterDirectory *self, PyObject *args)
        {
          ::java::util::Collection a0((jobject) NULL);
          PyTypeObject **p0;

          if (!parseArgs(args, "K", ::java::util::Collection::initializeClass, &a0, &p0, ::java::util::t_Collection::parameters_))
          {
            OBJ_CALL(self->object.sync(a0));
            Py_RETURN_NONE;
          }

          return callSuper(PY_TYPE(FilterDirectory), (PyObject *) self, "sync", args, 2);
        }

        static PyObject *t_FilterDirectory_syncMetaData(t_FilterDirectory *self, PyObject *args)
        {

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(self->object.syncMetaData());
            Py_RETURN_NONE;
          }

          return callSuper(PY_TYPE(FilterDirectory), (PyObject *) self, "syncMetaData", args, 2);
        }

        static PyObject *t_FilterDirectory_toString(t_FilterDirectory *self, PyObject *args)
        {
          ::java::lang::String result((jobject) NULL);

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.toString());
            return j2p(result);
          }

          return callSuper(PY_TYPE(FilterDirectory), (PyObject *) self, "toString", args, 2);
        }

        static PyObject *t_FilterDirectory_unwrap(PyTypeObject *type, PyObject *arg)
        {
          ::org::apache::lucene::store::Directory a0((jobject) NULL);
          ::org::apache::lucene::store::Directory result((jobject) NULL);

          if (!parseArg(arg, "k", ::org::apache::lucene::store::Directory::initializeClass, &a0))
          {
            OBJ_CALL(result = ::org::apache::lucene::store::FilterDirectory::unwrap(a0));
            return ::org::apache::lucene::store::t_Directory::wrap_Object(result);
          }

          PyErr_SetArgsError(type, "unwrap", arg);
          return NULL;
        }

        static PyObject *t_FilterDirectory_get__delegate(t_FilterDirectory *self, void *data)
        {
          ::org::apache::lucene::store::Directory value((jobject) NULL);
          OBJ_CALL(value = self->object.getDelegate());
          return ::org::apache::lucene::store::t_Directory::wrap_Object(value);
        }

        static PyObject *t_FilterDirectory_get__pendingDeletions(t_FilterDirectory *self, void *data)
        {
          ::java::util::Set value((jobject) NULL);
          OBJ_CALL(value = self->object.getPendingDeletions());
          return ::java::util::t_Set::wrap_Object(value);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/index/FieldInfos.h"
#include "org/apache/lucene/index/IndexReader.h"
#include "java/util/Collection.h"
#include "java/lang/Class.h"
#include "java/lang/Iterable.h"
#include "java/lang/String.h"
#include "java/util/Iterator.h"
#include "org/apache/lucene/index/FieldInfo.h"
#include "org/apache/lucene/index/FieldInfos.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {

        ::java::lang::Class *FieldInfos::class$ = NULL;
        jmethodID *FieldInfos::mids$ = NULL;
        bool FieldInfos::live$ = false;
        FieldInfos *FieldInfos::EMPTY = NULL;

        jclass FieldInfos::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/index/FieldInfos");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_d55560b6203b89e8] = env->getMethodID(cls, "<init>", "([Lorg/apache/lucene/index/FieldInfo;)V");
            mids$[mid_fieldInfo_07fc3b437c3bb7b3] = env->getMethodID(cls, "fieldInfo", "(Ljava/lang/String;)Lorg/apache/lucene/index/FieldInfo;");
            mids$[mid_fieldInfo_54a6d6c7e8df9911] = env->getMethodID(cls, "fieldInfo", "(I)Lorg/apache/lucene/index/FieldInfo;");
            mids$[mid_getIndexedFields_3cfed1bbee5d3707] = env->getStaticMethodID(cls, "getIndexedFields", "(Lorg/apache/lucene/index/IndexReader;)Ljava/util/Collection;");
            mids$[mid_getMergedFieldInfos_6d9e8b338a3e87a2] = env->getStaticMethodID(cls, "getMergedFieldInfos", "(Lorg/apache/lucene/index/IndexReader;)Lorg/apache/lucene/index/FieldInfos;");
            mids$[mid_getSoftDeletesField_db9b55ba01e03e4b] = env->getMethodID(cls, "getSoftDeletesField", "()Ljava/lang/String;");
            mids$[mid_hasDocValues_8454bd5aa23fd11e] = env->getMethodID(cls, "hasDocValues", "()Z");
            mids$[mid_hasFreq_8454bd5aa23fd11e] = env->getMethodID(cls, "hasFreq", "()Z");
            mids$[mid_hasNorms_8454bd5aa23fd11e] = env->getMethodID(cls, "hasNorms", "()Z");
            mids$[mid_hasOffsets_8454bd5aa23fd11e] = env->getMethodID(cls, "hasOffsets", "()Z");
            mids$[mid_hasPayloads_8454bd5aa23fd11e] = env->getMethodID(cls, "hasPayloads", "()Z");
            mids$[mid_hasPointValues_8454bd5aa23fd11e] = env->getMethodID(cls, "hasPointValues", "()Z");
            mids$[mid_hasProx_8454bd5aa23fd11e] = env->getMethodID(cls, "hasProx", "()Z");
            mids$[mid_hasVectors_8454bd5aa23fd11e] = env->getMethodID(cls, "hasVectors", "()Z");
            mids$[mid_iterator_233a192dadb0917d] = env->getMethodID(cls, "iterator", "()Ljava/util/Iterator;");
            mids$[mid_size_9972fcc56b44e79d] = env->getMethodID(cls, "size", "()I");

            class$ = new ::java::lang::Class(cls);
            cls = (jclass) class$->this$;

            EMPTY = new FieldInfos(env->getStaticObjectField(cls, "EMPTY", "Lorg/apache/lucene/index/FieldInfos;"));
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        FieldInfos::FieldInfos(const JArray< ::org::apache::lucene::index::FieldInfo > & a0) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_d55560b6203b89e8, a0.this$)) {}

        ::org::apache::lucene::index::FieldInfo FieldInfos::fieldInfo(const ::java::lang::String & a0) const
        {
          return ::org::apache::lucene::index::FieldInfo(env->callObjectMethod(this$, mids$[mid_fieldInfo_07fc3b437c3bb7b3], a0.this$));
        }

        ::org::apache::lucene::index::FieldInfo FieldInfos::fieldInfo(jint a0) const
        {
          return ::org::apache::lucene::index::FieldInfo(env->callObjectMethod(this$, mids$[mid_fieldInfo_54a6d6c7e8df9911], a0));
        }

        ::java::util::Collection FieldInfos::getIndexedFields(const ::org::apache::lucene::index::IndexReader & a0)
        {
          jclass cls = env->getClass(initializeClass);
          return ::java::util::Collection(env->callStaticObjectMethod(cls, mids$[mid_getIndexedFields_3cfed1bbee5d3707], a0.this$));
        }

        FieldInfos FieldInfos::getMergedFieldInfos(const ::org::apache::lucene::index::IndexReader & a0)
        {
          jclass cls = env->getClass(initializeClass);
          return FieldInfos(env->callStaticObjectMethod(cls, mids$[mid_getMergedFieldInfos_6d9e8b338a3e87a2], a0.this$));
        }

        ::java::lang::String FieldInfos::getSoftDeletesField() const
        {
          return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_getSoftDeletesField_db9b55ba01e03e4b]));
        }

        jboolean FieldInfos::hasDocValues() const
        {
          return env->callBooleanMethod(this$, mids$[mid_hasDocValues_8454bd5aa23fd11e]);
        }

        jboolean FieldInfos::hasFreq() const
        {
          return env->callBooleanMethod(this$, mids$[mid_hasFreq_8454bd5aa23fd11e]);
        }

        jboolean FieldInfos::hasNorms() const
        {
          return env->callBooleanMethod(this$, mids$[mid_hasNorms_8454bd5aa23fd11e]);
        }

        jboolean FieldInfos::hasOffsets() const
        {
          return env->callBooleanMethod(this$, mids$[mid_hasOffsets_8454bd5aa23fd11e]);
        }

        jboolean FieldInfos::hasPayloads() const
        {
          return env->callBooleanMethod(this$, mids$[mid_hasPayloads_8454bd5aa23fd11e]);
        }

        jboolean FieldInfos::hasPointValues() const
        {
          return env->callBooleanMethod(this$, mids$[mid_hasPointValues_8454bd5aa23fd11e]);
        }

        jboolean FieldInfos::hasProx() const
        {
          return env->callBooleanMethod(this$, mids$[mid_hasProx_8454bd5aa23fd11e]);
        }

        jboolean FieldInfos::hasVectors() const
        {
          return env->callBooleanMethod(this$, mids$[mid_hasVectors_8454bd5aa23fd11e]);
        }

        ::java::util::Iterator FieldInfos::iterator() const
        {
          return ::java::util::Iterator(env->callObjectMethod(this$, mids$[mid_iterator_233a192dadb0917d]));
        }

        jint FieldInfos::size() const
        {
          return env->callIntMethod(this$, mids$[mid_size_9972fcc56b44e79d]);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {
        static PyObject *t_FieldInfos_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_FieldInfos_instance_(PyTypeObject *type, PyObject *arg);
        static int t_FieldInfos_init_(t_FieldInfos *self, PyObject *args, PyObject *kwds);
        static PyObject *t_FieldInfos_fieldInfo(t_FieldInfos *self, PyObject *args);
        static PyObject *t_FieldInfos_getIndexedFields(PyTypeObject *type, PyObject *arg);
        static PyObject *t_FieldInfos_getMergedFieldInfos(PyTypeObject *type, PyObject *arg);
        static PyObject *t_FieldInfos_getSoftDeletesField(t_FieldInfos *self);
        static PyObject *t_FieldInfos_hasDocValues(t_FieldInfos *self);
        static PyObject *t_FieldInfos_hasFreq(t_FieldInfos *self);
        static PyObject *t_FieldInfos_hasNorms(t_FieldInfos *self);
        static PyObject *t_FieldInfos_hasOffsets(t_FieldInfos *self);
        static PyObject *t_FieldInfos_hasPayloads(t_FieldInfos *self);
        static PyObject *t_FieldInfos_hasPointValues(t_FieldInfos *self);
        static PyObject *t_FieldInfos_hasProx(t_FieldInfos *self);
        static PyObject *t_FieldInfos_hasVectors(t_FieldInfos *self);
        static PyObject *t_FieldInfos_iterator(t_FieldInfos *self);
        static PyObject *t_FieldInfos_size(t_FieldInfos *self);
        static PyObject *t_FieldInfos_get__softDeletesField(t_FieldInfos *self, void *data);
        static PyGetSetDef t_FieldInfos__fields_[] = {
          DECLARE_GET_FIELD(t_FieldInfos, softDeletesField),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_FieldInfos__methods_[] = {
          DECLARE_METHOD(t_FieldInfos, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_FieldInfos, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_FieldInfos, fieldInfo, METH_VARARGS),
          DECLARE_METHOD(t_FieldInfos, getIndexedFields, METH_O | METH_CLASS),
          DECLARE_METHOD(t_FieldInfos, getMergedFieldInfos, METH_O | METH_CLASS),
          DECLARE_METHOD(t_FieldInfos, getSoftDeletesField, METH_NOARGS),
          DECLARE_METHOD(t_FieldInfos, hasDocValues, METH_NOARGS),
          DECLARE_METHOD(t_FieldInfos, hasFreq, METH_NOARGS),
          DECLARE_METHOD(t_FieldInfos, hasNorms, METH_NOARGS),
          DECLARE_METHOD(t_FieldInfos, hasOffsets, METH_NOARGS),
          DECLARE_METHOD(t_FieldInfos, hasPayloads, METH_NOARGS),
          DECLARE_METHOD(t_FieldInfos, hasPointValues, METH_NOARGS),
          DECLARE_METHOD(t_FieldInfos, hasProx, METH_NOARGS),
          DECLARE_METHOD(t_FieldInfos, hasVectors, METH_NOARGS),
          DECLARE_METHOD(t_FieldInfos, iterator, METH_NOARGS),
          DECLARE_METHOD(t_FieldInfos, size, METH_NOARGS),
          { NULL, NULL, 0, NULL }
        };

        static PyType_Slot PY_TYPE_SLOTS(FieldInfos)[] = {
          { Py_tp_methods, t_FieldInfos__methods_ },
          { Py_tp_init, (void *) t_FieldInfos_init_ },
          { Py_tp_getset, t_FieldInfos__fields_ },
          { Py_tp_iter, (void *) ((PyObject *(*)(t_FieldInfos *)) get_iterator< t_FieldInfos >) },
          { Py_tp_iternext, (void *) 0 },
          { 0, NULL }
        };

        static PyType_Def *PY_TYPE_BASES(FieldInfos)[] = {
          &PY_TYPE_DEF(::java::lang::Object),
          NULL
        };

        DEFINE_TYPE(FieldInfos, t_FieldInfos, FieldInfos);

        void t_FieldInfos::install(PyObject *module)
        {
          installType(&PY_TYPE(FieldInfos), &PY_TYPE_DEF(FieldInfos), module, "FieldInfos", 0);
        }

        void t_FieldInfos::initialize(PyObject *module)
        {
          PyObject_SetAttrString((PyObject *) PY_TYPE(FieldInfos), "class_", make_descriptor(FieldInfos::initializeClass, 1));
          PyObject_SetAttrString((PyObject *) PY_TYPE(FieldInfos), "wrapfn_", make_descriptor(t_FieldInfos::wrap_jobject));
          PyObject_SetAttrString((PyObject *) PY_TYPE(FieldInfos), "boxfn_", make_descriptor(boxObject));
          env->getClass(FieldInfos::initializeClass);
          PyObject_SetAttrString((PyObject *) PY_TYPE(FieldInfos), "EMPTY", make_descriptor(t_FieldInfos::wrap_Object(*FieldInfos::EMPTY)));
        }

        static PyObject *t_FieldInfos_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, FieldInfos::initializeClass, 1)))
            return NULL;
          return t_FieldInfos::wrap_Object(FieldInfos(((t_FieldInfos *) arg)->object.this$));
        }
        static PyObject *t_FieldInfos_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, FieldInfos::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_FieldInfos_init_(t_FieldInfos *self, PyObject *args, PyObject *kwds)
        {
          JArray< ::org::apache::lucene::index::FieldInfo > a0((jobject) NULL);
          FieldInfos object((jobject) NULL);

          if (!parseArgs(args, "[k", ::org::apache::lucene::index::FieldInfo::initializeClass, &a0))
          {
            INT_CALL(object = FieldInfos(a0));
            self->object = object;
          }
          else
          {
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }

        static PyObject *t_FieldInfos_fieldInfo(t_FieldInfos *self, PyObject *args)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 1:
            {
              ::java::lang::String a0((jobject) NULL);
              ::org::apache::lucene::index::FieldInfo result((jobject) NULL);

              if (!parseArgs(args, "s", &a0))
              {
                OBJ_CALL(result = self->object.fieldInfo(a0));
                return ::org::apache::lucene::index::t_FieldInfo::wrap_Object(result);
              }
            }
            {
              jint a0;
              ::org::apache::lucene::index::FieldInfo result((jobject) NULL);

              if (!parseArgs(args, "I", &a0))
              {
                OBJ_CALL(result = self->object.fieldInfo(a0));
                return ::org::apache::lucene::index::t_FieldInfo::wrap_Object(result);
              }
            }
          }

          PyErr_SetArgsError((PyObject *) self, "fieldInfo", args);
          return NULL;
        }

        static PyObject *t_FieldInfos_getIndexedFields(PyTypeObject *type, PyObject *arg)
        {
          ::org::apache::lucene::index::IndexReader a0((jobject) NULL);
          ::java::util::Collection result((jobject) NULL);

          if (!parseArg(arg, "k", ::org::apache::lucene::index::IndexReader::initializeClass, &a0))
          {
            OBJ_CALL(result = ::org::apache::lucene::index::FieldInfos::getIndexedFields(a0));
            return ::java::util::t_Collection::wrap_Object(result, ::java::lang::PY_TYPE(String));
          }

          PyErr_SetArgsError(type, "getIndexedFields", arg);
          return NULL;
        }

        static PyObject *t_FieldInfos_getMergedFieldInfos(PyTypeObject *type, PyObject *arg)
        {
          ::org::apache::lucene::index::IndexReader a0((jobject) NULL);
          FieldInfos result((jobject) NULL);

          if (!parseArg(arg, "k", ::org::apache::lucene::index::IndexReader::initializeClass, &a0))
          {
            OBJ_CALL(result = ::org::apache::lucene::index::FieldInfos::getMergedFieldInfos(a0));
            return t_FieldInfos::wrap_Object(result);
          }

          PyErr_SetArgsError(type, "getMergedFieldInfos", arg);
          return NULL;
        }

        static PyObject *t_FieldInfos_getSoftDeletesField(t_FieldInfos *self)
        {
          ::java::lang::String result((jobject) NULL);
          OBJ_CALL(result = self->object.getSoftDeletesField());
          return j2p(result);
        }

        static PyObject *t_FieldInfos_hasDocValues(t_FieldInfos *self)
        {
          jboolean result;
          OBJ_CALL(result = self->object.hasDocValues());
          Py_RETURN_BOOL(result);
        }

        static PyObject *t_FieldInfos_hasFreq(t_FieldInfos *self)
        {
          jboolean result;
          OBJ_CALL(result = self->object.hasFreq());
          Py_RETURN_BOOL(result);
        }

        static PyObject *t_FieldInfos_hasNorms(t_FieldInfos *self)
        {
          jboolean result;
          OBJ_CALL(result = self->object.hasNorms());
          Py_RETURN_BOOL(result);
        }

        static PyObject *t_FieldInfos_hasOffsets(t_FieldInfos *self)
        {
          jboolean result;
          OBJ_CALL(result = self->object.hasOffsets());
          Py_RETURN_BOOL(result);
        }

        static PyObject *t_FieldInfos_hasPayloads(t_FieldInfos *self)
        {
          jboolean result;
          OBJ_CALL(result = self->object.hasPayloads());
          Py_RETURN_BOOL(result);
        }

        static PyObject *t_FieldInfos_hasPointValues(t_FieldInfos *self)
        {
          jboolean result;
          OBJ_CALL(result = self->object.hasPointValues());
          Py_RETURN_BOOL(result);
        }

        static PyObject *t_FieldInfos_hasProx(t_FieldInfos *self)
        {
          jboolean result;
          OBJ_CALL(result = self->object.hasProx());
          Py_RETURN_BOOL(result);
        }

        static PyObject *t_FieldInfos_hasVectors(t_FieldInfos *self)
        {
          jboolean result;
          OBJ_CALL(result = self->object.hasVectors());
          Py_RETURN_BOOL(result);
        }

        static PyObject *t_FieldInfos_iterator(t_FieldInfos *self)
        {
          ::java::util::Iterator result((jobject) NULL);
          OBJ_CALL(result = self->object.iterator());
          return ::java::util::t_Iterator::wrap_Object(result, ::org::apache::lucene::index::PY_TYPE(FieldInfo));
        }

        static PyObject *t_FieldInfos_size(t_FieldInfos *self)
        {
          jint result;
          OBJ_CALL(result = self->object.size());
          return PyLong_FromLong((long) result);
        }

        static PyObject *t_FieldInfos_get__softDeletesField(t_FieldInfos *self, void *data)
        {
          ::java::lang::String value((jobject) NULL);
          OBJ_CALL(value = self->object.getSoftDeletesField());
          return j2p(value);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/spatial3d/geom/BasePlanetObject.h"
#include "java/lang/Class.h"
#include "java/io/OutputStream.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/spatial3d/geom/PlanetModel.h"
#include "org/apache/lucene/spatial3d/geom/PlanetObject.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace spatial3d {
        namespace geom {

          ::java::lang::Class *BasePlanetObject::class$ = NULL;
          jmethodID *BasePlanetObject::mids$ = NULL;
          bool BasePlanetObject::live$ = false;

          jclass BasePlanetObject::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/spatial3d/geom/BasePlanetObject");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_fd580b4e02411290] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/spatial3d/geom/PlanetModel;)V");
              mids$[mid_equals_8b72f2dcdde6fd1d] = env->getMethodID(cls, "equals", "(Ljava/lang/Object;)Z");
              mids$[mid_getPlanetModel_04c11b465ef16498] = env->getMethodID(cls, "getPlanetModel", "()Lorg/apache/lucene/spatial3d/geom/PlanetModel;");
              mids$[mid_hashCode_9972fcc56b44e79d] = env->getMethodID(cls, "hashCode", "()I");
              mids$[mid_write_02fcdace254a9894] = env->getMethodID(cls, "write", "(Ljava/io/OutputStream;)V");

              class$ = new ::java::lang::Class(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          BasePlanetObject::BasePlanetObject(const ::org::apache::lucene::spatial3d::geom::PlanetModel & a0) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_fd580b4e02411290, a0.this$)) {}

          jboolean BasePlanetObject::equals(const ::java::lang::Object & a0) const
          {
            return env->callBooleanMethod(this$, mids$[mid_equals_8b72f2dcdde6fd1d], a0.this$);
          }

          ::org::apache::lucene::spatial3d::geom::PlanetModel BasePlanetObject::getPlanetModel() const
          {
            return ::org::apache::lucene::spatial3d::geom::PlanetModel(env->callObjectMethod(this$, mids$[mid_getPlanetModel_04c11b465ef16498]));
          }

          jint BasePlanetObject::hashCode() const
          {
            return env->callIntMethod(this$, mids$[mid_hashCode_9972fcc56b44e79d]);
          }

          void BasePlanetObject::write(const ::java::io::OutputStream & a0) const
          {
            env->callVoidMethod(this$, mids$[mid_write_02fcdace254a9894], a0.this$);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace spatial3d {
        namespace geom {
          static PyObject *t_BasePlanetObject_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_BasePlanetObject_instance_(PyTypeObject *type, PyObject *arg);
          static int t_BasePlanetObject_init_(t_BasePlanetObject *self, PyObject *args, PyObject *kwds);
          static PyObject *t_BasePlanetObject_equals(t_BasePlanetObject *self, PyObject *args);
          static PyObject *t_BasePlanetObject_getPlanetModel(t_BasePlanetObject *self);
          static PyObject *t_BasePlanetObject_hashCode(t_BasePlanetObject *self, PyObject *args);
          static PyObject *t_BasePlanetObject_write(t_BasePlanetObject *self, PyObject *arg);
          static PyObject *t_BasePlanetObject_get__planetModel(t_BasePlanetObject *self, void *data);
          static PyGetSetDef t_BasePlanetObject__fields_[] = {
            DECLARE_GET_FIELD(t_BasePlanetObject, planetModel),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_BasePlanetObject__methods_[] = {
            DECLARE_METHOD(t_BasePlanetObject, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_BasePlanetObject, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_BasePlanetObject, equals, METH_VARARGS),
            DECLARE_METHOD(t_BasePlanetObject, getPlanetModel, METH_NOARGS),
            DECLARE_METHOD(t_BasePlanetObject, hashCode, METH_VARARGS),
            DECLARE_METHOD(t_BasePlanetObject, write, METH_O),
            { NULL, NULL, 0, NULL }
          };

          static PyType_Slot PY_TYPE_SLOTS(BasePlanetObject)[] = {
            { Py_tp_methods, t_BasePlanetObject__methods_ },
            { Py_tp_init, (void *) t_BasePlanetObject_init_ },
            { Py_tp_getset, t_BasePlanetObject__fields_ },
            { 0, NULL }
          };

          static PyType_Def *PY_TYPE_BASES(BasePlanetObject)[] = {
            &PY_TYPE_DEF(::java::lang::Object),
            NULL
          };

          DEFINE_TYPE(BasePlanetObject, t_BasePlanetObject, BasePlanetObject);

          void t_BasePlanetObject::install(PyObject *module)
          {
            installType(&PY_TYPE(BasePlanetObject), &PY_TYPE_DEF(BasePlanetObject), module, "BasePlanetObject", 0);
          }

          void t_BasePlanetObject::initialize(PyObject *module)
          {
            PyObject_SetAttrString((PyObject *) PY_TYPE(BasePlanetObject), "class_", make_descriptor(BasePlanetObject::initializeClass, 1));
            PyObject_SetAttrString((PyObject *) PY_TYPE(BasePlanetObject), "wrapfn_", make_descriptor(t_BasePlanetObject::wrap_jobject));
            PyObject_SetAttrString((PyObject *) PY_TYPE(BasePlanetObject), "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_BasePlanetObject_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, BasePlanetObject::initializeClass, 1)))
              return NULL;
            return t_BasePlanetObject::wrap_Object(BasePlanetObject(((t_BasePlanetObject *) arg)->object.this$));
          }
          static PyObject *t_BasePlanetObject_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, BasePlanetObject::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_BasePlanetObject_init_(t_BasePlanetObject *self, PyObject *args, PyObject *kwds)
          {
            ::org::apache::lucene::spatial3d::geom::PlanetModel a0((jobject) NULL);
            BasePlanetObject object((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::spatial3d::geom::PlanetModel::initializeClass, &a0))
            {
              INT_CALL(object = BasePlanetObject(a0));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_BasePlanetObject_equals(t_BasePlanetObject *self, PyObject *args)
          {
            ::java::lang::Object a0((jobject) NULL);
            jboolean result;

            if (!parseArgs(args, "o", &a0))
            {
              OBJ_CALL(result = self->object.equals(a0));
              Py_RETURN_BOOL(result);
            }

            return callSuper(PY_TYPE(BasePlanetObject), (PyObject *) self, "equals", args, 2);
          }

          static PyObject *t_BasePlanetObject_getPlanetModel(t_BasePlanetObject *self)
          {
            ::org::apache::lucene::spatial3d::geom::PlanetModel result((jobject) NULL);
            OBJ_CALL(result = self->object.getPlanetModel());
            return ::org::apache::lucene::spatial3d::geom::t_PlanetModel::wrap_Object(result);
          }

          static PyObject *t_BasePlanetObject_hashCode(t_BasePlanetObject *self, PyObject *args)
          {
            jint result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.hashCode());
              return PyLong_FromLong((long) result);
            }

            return callSuper(PY_TYPE(BasePlanetObject), (PyObject *) self, "hashCode", args, 2);
          }

          static PyObject *t_BasePlanetObject_write(t_BasePlanetObject *self, PyObject *arg)
          {
            ::java::io::OutputStream a0((jobject) NULL);

            if (!parseArg(arg, "k", ::java::io::OutputStream::initializeClass, &a0))
            {
              OBJ_CALL(self->object.write(a0));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError((PyObject *) self, "write", arg);
            return NULL;
          }

          static PyObject *t_BasePlanetObject_get__planetModel(t_BasePlanetObject *self, void *data)
          {
            ::org::apache::lucene::spatial3d::geom::PlanetModel value((jobject) NULL);
            OBJ_CALL(value = self->object.getPlanetModel());
            return ::org::apache::lucene::spatial3d::geom::t_PlanetModel::wrap_Object(value);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/util/bkd/HeapPointReader.h"
#include "org/apache/lucene/util/bkd/BKDConfig.h"
#include "org/apache/lucene/util/bkd/PointReader.h"
#include "org/apache/lucene/util/bkd/PointValue.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        namespace bkd {

          ::java::lang::Class *HeapPointReader::class$ = NULL;
          jmethodID *HeapPointReader::mids$ = NULL;
          bool HeapPointReader::live$ = false;

          jclass HeapPointReader::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/util/bkd/HeapPointReader");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_3e49d4b5950e6c9e] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/util/bkd/BKDConfig;[BII)V");
              mids$[mid_close_f2cc1bce94666404] = env->getMethodID(cls, "close", "()V");
              mids$[mid_next_8454bd5aa23fd11e] = env->getMethodID(cls, "next", "()Z");
              mids$[mid_pointValue_0a50bb6f782eac99] = env->getMethodID(cls, "pointValue", "()Lorg/apache/lucene/util/bkd/PointValue;");

              class$ = new ::java::lang::Class(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          HeapPointReader::HeapPointReader(const ::org::apache::lucene::util::bkd::BKDConfig & a0, const JArray< jbyte > & a1, jint a2, jint a3) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_3e49d4b5950e6c9e, a0.this$, a1.this$, a2, a3)) {}

          void HeapPointReader::close() const
          {
            env->callVoidMethod(this$, mids$[mid_close_f2cc1bce94666404]);
          }

          jboolean HeapPointReader::next() const
          {
            return env->callBooleanMethod(this$, mids$[mid_next_8454bd5aa23fd11e]);
          }

          ::org::apache::lucene::util::bkd::PointValue HeapPointReader::pointValue() const
          {
            return ::org::apache::lucene::util::bkd::PointValue(env->callObjectMethod(this$, mids$[mid_pointValue_0a50bb6f782eac99]));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        namespace bkd {
          static PyObject *t_HeapPointReader_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_HeapPointReader_instance_(PyTypeObject *type, PyObject *arg);
          static int t_HeapPointReader_init_(t_HeapPointReader *self, PyObject *args, PyObject *kwds);
          static PyObject *t_HeapPointReader_close(t_HeapPointReader *self);
          static PyObject *t_HeapPointReader_next(t_HeapPointReader *self);
          static PyObject *t_HeapPointReader_pointValue(t_HeapPointReader *self);

          static PyMethodDef t_HeapPointReader__methods_[] = {
            DECLARE_METHOD(t_HeapPointReader, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_HeapPointReader, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_HeapPointReader, close, METH_NOARGS),
            DECLARE_METHOD(t_HeapPointReader, next, METH_NOARGS),
            DECLARE_METHOD(t_HeapPointReader, pointValue, METH_NOARGS),
            { NULL, NULL, 0, NULL }
          };

          static PyType_Slot PY_TYPE_SLOTS(HeapPointReader)[] = {
            { Py_tp_methods, t_HeapPointReader__methods_ },
            { Py_tp_init, (void *) t_HeapPointReader_init_ },
            { 0, NULL }
          };

          static PyType_Def *PY_TYPE_BASES(HeapPointReader)[] = {
            &PY_TYPE_DEF(::java::lang::Object),
            NULL
          };

          DEFINE_TYPE(HeapPointReader, t_HeapPointReader, HeapPointReader);

          void t_HeapPointReader::install(PyObject *module)
          {
            installType(&PY_TYPE(HeapPointReader), &PY_TYPE_DEF(HeapPointReader), module, "HeapPointReader", 0);
          }

          void t_HeapPointReader::initialize(PyObject *module)
          {
            PyObject_SetAttrString((PyObject *) PY_TYPE(HeapPointReader), "class_", make_descriptor(HeapPointReader::initializeClass, 1));
            PyObject_SetAttrString((PyObject *) PY_TYPE(HeapPointReader), "wrapfn_", make_descriptor(t_HeapPointReader::wrap_jobject));
            PyObject_SetAttrString((PyObject *) PY_TYPE(HeapPointReader), "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_HeapPointReader_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, HeapPointReader::initializeClass, 1)))
              return NULL;
            return t_HeapPointReader::wrap_Object(HeapPointReader(((t_HeapPointReader *) arg)->object.this$));
          }
          static PyObject *t_HeapPointReader_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, HeapPointReader::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_HeapPointReader_init_(t_HeapPointReader *self, PyObject *args, PyObject *kwds)
          {
            ::org::apache::lucene::util::bkd::BKDConfig a0((jobject) NULL);
            JArray< jbyte > a1((jobject) NULL);
            jint a2;
            jint a3;
            HeapPointReader object((jobject) NULL);

            if (!parseArgs(args, "k[BII", ::org::apache::lucene::util::bkd::BKDConfig::initializeClass, &a0, &a1, &a2, &a3))
            {
              INT_CALL(object = HeapPointReader(a0, a1, a2, a3));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_HeapPointReader_close(t_HeapPointReader *self)
          {
            OBJ_CALL(self->object.close());
            Py_RETURN_NONE;
          }

          static PyObject *t_HeapPointReader_next(t_HeapPointReader *self)
          {
            jboolean result;
            OBJ_CALL(result = self->object.next());
            Py_RETURN_BOOL(result);
          }

          static PyObject *t_HeapPointReader_pointValue(t_HeapPointReader *self)
          {
            ::org::apache::lucene::util::bkd::PointValue result((jobject) NULL);
            OBJ_CALL(result = self->object.pointValue());
            return ::org::apache::lucene::util::bkd::t_PointValue::wrap_Object(result);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/util/PrintStreamInfoStream.h"
#include "java/io/PrintStream.h"
#include "java/lang/String.h"
#include "java/io/IOException.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {

        ::java::lang::Class *PrintStreamInfoStream::class$ = NULL;
        jmethodID *PrintStreamInfoStream::mids$ = NULL;
        bool PrintStreamInfoStream::live$ = false;

        jclass PrintStreamInfoStream::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/util/PrintStreamInfoStream");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_51d7bcb97eea24e3] = env->getMethodID(cls, "<init>", "(Ljava/io/PrintStream;)V");
            mids$[mid_init$_7efc5d571081ec1e] = env->getMethodID(cls, "<init>", "(Ljava/io/PrintStream;I)V");
            mids$[mid_close_f2cc1bce94666404] = env->getMethodID(cls, "close", "()V");
            mids$[mid_isEnabled_145b2d0af0c06b93] = env->getMethodID(cls, "isEnabled", "(Ljava/lang/String;)Z");
            mids$[mid_isSystemStream_8454bd5aa23fd11e] = env->getMethodID(cls, "isSystemStream", "()Z");
            mids$[mid_message_15b72f6a44ff93f2] = env->getMethodID(cls, "message", "(Ljava/lang/String;Ljava/lang/String;)V");
            mids$[mid_getTimestamp_db9b55ba01e03e4b] = env->getMethodID(cls, "getTimestamp", "()Ljava/lang/String;");

            class$ = new ::java::lang::Class(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        PrintStreamInfoStream::PrintStreamInfoStream(const ::java::io::PrintStream & a0) : ::org::apache::lucene::util::InfoStream(env->newObject(initializeClass, &mids$, mid_init$_51d7bcb97eea24e3, a0.this$)) {}

        PrintStreamInfoStream::PrintStreamInfoStream(const ::java::io::PrintStream & a0, jint a1) : ::org::apache::lucene::util::InfoStream(env->newObject(initializeClass, &mids$, mid_init$_7efc5d571081ec1e, a0.this$, a1)) {}

        void PrintStreamInfoStream::close() const
        {
          env->callVoidMethod(this$, mids$[mid_close_f2cc1bce94666404]);
        }

        jboolean PrintStreamInfoStream::isEnabled(const ::java::lang::String & a0) const
        {
          return env->callBooleanMethod(this$, mids$[mid_isEnabled_145b2d0af0c06b93], a0.this$);
        }

        jboolean PrintStreamInfoStream::isSystemStream() const
        {
          return env->callBooleanMethod(this$, mids$[mid_isSystemStream_8454bd5aa23fd11e]);
        }

        void PrintStreamInfoStream::message(const ::java::lang::String & a0, const ::java::lang::String & a1) const
        {
          env->callVoidMethod(this$, mids$[mid_message_15b72f6a44ff93f2], a0.this$, a1.this$);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        static PyObject *t_PrintStreamInfoStream_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_PrintStreamInfoStream_instance_(PyTypeObject *type, PyObject *arg);
        static int t_PrintStreamInfoStream_init_(t_PrintStreamInfoStream *self, PyObject *args, PyObject *kwds);
        static PyObject *t_PrintStreamInfoStream_close(t_PrintStreamInfoStream *self, PyObject *args);
        static PyObject *t_PrintStreamInfoStream_isEnabled(t_PrintStreamInfoStream *self, PyObject *args);
        static PyObject *t_PrintStreamInfoStream_isSystemStream(t_PrintStreamInfoStream *self);
        static PyObject *t_PrintStreamInfoStream_message(t_PrintStreamInfoStream *self, PyObject *args);
        static PyObject *t_PrintStreamInfoStream_get__systemStream(t_PrintStreamInfoStream *self, void *data);
        static PyGetSetDef t_PrintStreamInfoStream__fields_[] = {
          DECLARE_GET_FIELD(t_PrintStreamInfoStream, systemStream),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_PrintStreamInfoStream__methods_[] = {
          DECLARE_METHOD(t_PrintStreamInfoStream, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_PrintStreamInfoStream, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_PrintStreamInfoStream, close, METH_VARARGS),
          DECLARE_METHOD(t_PrintStreamInfoStream, isEnabled, METH_VARARGS),
          DECLARE_METHOD(t_PrintStreamInfoStream, isSystemStream, METH_NOARGS),
          DECLARE_METHOD(t_PrintStreamInfoStream, message, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        static PyType_Slot PY_TYPE_SLOTS(PrintStreamInfoStream)[] = {
          { Py_tp_methods, t_PrintStreamInfoStream__methods_ },
          { Py_tp_init, (void *) t_PrintStreamInfoStream_init_ },
          { Py_tp_getset, t_PrintStreamInfoStream__fields_ },
          { 0, NULL }
        };

        static PyType_Def *PY_TYPE_BASES(PrintStreamInfoStream)[] = {
          &PY_TYPE_DEF(::org::apache::lucene::util::InfoStream),
          NULL
        };

        DEFINE_TYPE(PrintStreamInfoStream, t_PrintStreamInfoStream, PrintStreamInfoStream);

        void t_PrintStreamInfoStream::install(PyObject *module)
        {
          installType(&PY_TYPE(PrintStreamInfoStream), &PY_TYPE_DEF(PrintStreamInfoStream), module, "PrintStreamInfoStream", 0);
        }

        void t_PrintStreamInfoStream::initialize(PyObject *module)
        {
          PyObject_SetAttrString((PyObject *) PY_TYPE(PrintStreamInfoStream), "class_", make_descriptor(PrintStreamInfoStream::initializeClass, 1));
          PyObject_SetAttrString((PyObject *) PY_TYPE(PrintStreamInfoStream), "wrapfn_", make_descriptor(t_PrintStreamInfoStream::wrap_jobject));
          PyObject_SetAttrString((PyObject *) PY_TYPE(PrintStreamInfoStream), "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_PrintStreamInfoStream_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, PrintStreamInfoStream::initializeClass, 1)))
            return NULL;
          return t_PrintStreamInfoStream::wrap_Object(PrintStreamInfoStream(((t_PrintStreamInfoStream *) arg)->object.this$));
        }
        static PyObject *t_PrintStreamInfoStream_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, PrintStreamInfoStream::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_PrintStreamInfoStream_init_(t_PrintStreamInfoStream *self, PyObject *args, PyObject *kwds)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 1:
            {
              ::java::io::PrintStream a0((jobject) NULL);
              PrintStreamInfoStream object((jobject) NULL);

              if (!parseArgs(args, "k", ::java::io::PrintStream::initializeClass, &a0))
              {
                INT_CALL(object = PrintStreamInfoStream(a0));
                self->object = object;
                break;
              }
            }
            goto err;
           case 2:
            {
              ::java::io::PrintStream a0((jobject) NULL);
              jint a1;
              PrintStreamInfoStream object((jobject) NULL);

              if (!parseArgs(args, "kI", ::java::io::PrintStream::initializeClass, &a0, &a1))
              {
                INT_CALL(object = PrintStreamInfoStream(a0, a1));
                self->object = object;
                break;
              }
            }
           default:
           err:
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }

        static PyObject *t_PrintStreamInfoStream_close(t_PrintStreamInfoStream *self, PyObject *args)
        {

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(self->object.close());
            Py_RETURN_NONE;
          }

          return callSuper(PY_TYPE(PrintStreamInfoStream), (PyObject *) self, "close", args, 2);
        }

        static PyObject *t_PrintStreamInfoStream_isEnabled(t_PrintStreamInfoStream *self, PyObject *args)
        {
          ::java::lang::String a0((jobject) NULL);
          jboolean result;

          if (!parseArgs(args, "s", &a0))
          {
            OBJ_CALL(result = self->object.isEnabled(a0));
            Py_RETURN_BOOL(result);
          }

          return callSuper(PY_TYPE(PrintStreamInfoStream), (PyObject *) self, "isEnabled", args, 2);
        }

        static PyObject *t_PrintStreamInfoStream_isSystemStream(t_PrintStreamInfoStream *self)
        {
          jboolean result;
          OBJ_CALL(result = self->object.isSystemStream());
          Py_RETURN_BOOL(result);
        }

        static PyObject *t_PrintStreamInfoStream_message(t_PrintStreamInfoStream *self, PyObject *args)
        {
          ::java::lang::String a0((jobject) NULL);
          ::java::lang::String a1((jobject) NULL);

          if (!parseArgs(args, "ss", &a0, &a1))
          {
            OBJ_CALL(self->object.message(a0, a1));
            Py_RETURN_NONE;
          }

          return callSuper(PY_TYPE(PrintStreamInfoStream), (PyObject *) self, "message", args, 2);
        }

        static PyObject *t_PrintStreamInfoStream_get__systemStream(t_PrintStreamInfoStream *self, void *data)
        {
          jboolean value;
          OBJ_CALL(value = self->object.isSystemStream());
          Py_RETURN_BOOL(value);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queryparser/flexible/core/QueryNodeError.h"
#include "org/apache/lucene/queryparser/flexible/messages/Message.h"
#include "org/apache/lucene/queryparser/flexible/messages/NLSException.h"
#include "java/lang/Throwable.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace core {

            ::java::lang::Class *QueryNodeError::class$ = NULL;
            jmethodID *QueryNodeError::mids$ = NULL;
            bool QueryNodeError::live$ = false;

            jclass QueryNodeError::initializeClass(bool getOnly)
            {
              if (getOnly)
                return (jclass) (live$ ? class$->this$ : NULL);
              if (class$ == NULL)
              {
                jclass cls = (jclass) env->findClass("org/apache/lucene/queryparser/flexible/core/QueryNodeError");

                mids$ = new jmethodID[max_mid];
                mids$[mid_init$_471cfbdb800444a7] = env->getMethodID(cls, "<init>", "(Ljava/lang/Throwable;)V");
                mids$[mid_init$_26a7a119e2ed968d] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/queryparser/flexible/messages/Message;)V");
                mids$[mid_init$_84e3b301d273e601] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/queryparser/flexible/messages/Message;Ljava/lang/Throwable;)V");
                mids$[mid_getMessageObject_daa3e60103dc49c2] = env->getMethodID(cls, "getMessageObject", "()Lorg/apache/lucene/queryparser/flexible/messages/Message;");

                class$ = new ::java::lang::Class(cls);
                live$ = true;
              }
              return (jclass) class$->this$;
            }

            QueryNodeError::QueryNodeError(const ::java::lang::Throwable & a0) : ::java::lang::Error(env->newObject(initializeClass, &mids$, mid_init$_471cfbdb800444a7, a0.this$)) {}

            QueryNodeError::QueryNodeError(const ::org::apache::lucene::queryparser::flexible::messages::Message & a0) : ::java::lang::Error(env->newObject(initializeClass, &mids$, mid_init$_26a7a119e2ed968d, a0.this$)) {}

            QueryNodeError::QueryNodeError(const ::org::apache::lucene::queryparser::flexible::messages::Message & a0, const ::java::lang::Throwable & a1) : ::java::lang::Error(env->newObject(initializeClass, &mids$, mid_init$_84e3b301d273e601, a0.this$, a1.this$)) {}

            ::org::apache::lucene::queryparser::flexible::messages::Message QueryNodeError::getMessageObject() const
            {
              return ::org::apache::lucene::queryparser::flexible::messages::Message(env->callObjectMethod(this$, mids$[mid_getMessageObject_daa3e60103dc49c2]));
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace core {
            static PyObject *t_QueryNodeError_cast_(PyTypeObject *type, PyObject *arg);
            static PyObject *t_QueryNodeError_instance_(PyTypeObject *type, PyObject *arg);
            static int t_QueryNodeError_init_(t_QueryNodeError *self, PyObject *args, PyObject *kwds);
            static PyObject *t_QueryNodeError_getMessageObject(t_QueryNodeError *self);
            static PyObject *t_QueryNodeError_get__messageObject(t_QueryNodeError *self, void *data);
            static PyGetSetDef t_QueryNodeError__fields_[] = {
              DECLARE_GET_FIELD(t_QueryNodeError, messageObject),
              { NULL, NULL, NULL, NULL, NULL }
            };

            static PyMethodDef t_QueryNodeError__methods_[] = {
              DECLARE_METHOD(t_QueryNodeError, cast_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_QueryNodeError, instance_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_QueryNodeError, getMessageObject, METH_NOARGS),
              { NULL, NULL, 0, NULL }
            };

            static PyType_Slot PY_TYPE_SLOTS(QueryNodeError)[] = {
              { Py_tp_methods, t_QueryNodeError__methods_ },
              { Py_tp_init, (void *) t_QueryNodeError_init_ },
              { Py_tp_getset, t_QueryNodeError__fields_ },
              { 0, NULL }
            };

            static PyType_Def *PY_TYPE_BASES(QueryNodeError)[] = {
              &PY_TYPE_DEF(::java::lang::Error),
              NULL
            };

            DEFINE_TYPE(QueryNodeError, t_QueryNodeError, QueryNodeError);

            void t_QueryNodeError::install(PyObject *module)
            {
              installType(&PY_TYPE(QueryNodeError), &PY_TYPE_DEF(QueryNodeError), module, "QueryNodeError", 0);
            }

            void t_QueryNodeError::initialize(PyObject *module)
            {
              PyObject_SetAttrString((PyObject *) PY_TYPE(QueryNodeError), "class_", make_descriptor(QueryNodeError::initializeClass, 1));
              PyObject_SetAttrString((PyObject *) PY_TYPE(QueryNodeError), "wrapfn_", make_descriptor(t_QueryNodeError::wrap_jobject));
              PyObject_SetAttrString((PyObject *) PY_TYPE(QueryNodeError), "boxfn_", make_descriptor(boxObject));
            }

            static PyObject *t_QueryNodeError_cast_(PyTypeObject *type, PyObject *arg)
            {
              if (!(arg = castCheck(arg, QueryNodeError::initializeClass, 1)))
                return NULL;
              return t_QueryNodeError::wrap_Object(QueryNodeError(((t_QueryNodeError *) arg)->object.this$));
            }
            static PyObject *t_QueryNodeError_instance_(PyTypeObject *type, PyObject *arg)
            {
              if (!castCheck(arg, QueryNodeError::initializeClass, 0))
                Py_RETURN_FALSE;
              Py_RETURN_TRUE;
            }

            static int t_QueryNodeError_init_(t_QueryNodeError *self, PyObject *args, PyObject *kwds)
            {
              switch (PyTuple_GET_SIZE(args)) {
               case 1:
                {
                  ::java::lang::Throwable a0((jobject) NULL);
                  QueryNodeError object((jobject) NULL);

                  if (!parseArgs(args, "k", ::java::lang::Throwable::initializeClass, &a0))
                  {
                    INT_CALL(object = QueryNodeError(a0));
                    self->object = object;
                    break;
                  }
                }
                {
                  ::org::apache::lucene::queryparser::flexible::messages::Message a0((jobject) NULL);
                  QueryNodeError object((jobject) NULL);

                  if (!parseArgs(args, "k", ::org::apache::lucene::queryparser::flexible::messages::Message::initializeClass, &a0))
                  {
                    INT_CALL(object = QueryNodeError(a0));
                    self->object = object;
                    break;
                  }
                }
                goto err;
               case 2:
                {
                  ::org::apache::lucene::queryparser::flexible::messages::Message a0((jobject) NULL);
                  ::java::lang::Throwable a1((jobject) NULL);
                  QueryNodeError object((jobject) NULL);

                  if (!parseArgs(args, "kk", ::org::apache::lucene::queryparser::flexible::messages::Message::initializeClass, ::java::lang::Throwable::initializeClass, &a0, &a1))
                  {
                    INT_CALL(object = QueryNodeError(a0, a1));
                    self->object = object;
                    break;
                  }
                }
               default:
               err:
                PyErr_SetArgsError((PyObject *) self, "__init__", args);
                return -1;
              }

              return 0;
            }

            static PyObject *t_QueryNodeError_getMessageObject(t_QueryNodeError *self)
            {
              ::org::apache::lucene::queryparser::flexible::messages::Message result((jobject) NULL);
              OBJ_CALL(result = self->object.getMessageObject());
              return ::org::apache::lucene::queryparser::flexible::messages::t_Message::wrap_Object(result);
            }

            static PyObject *t_QueryNodeError_get__messageObject(t_QueryNodeError *self, void *data)
            {
              ::org::apache::lucene::queryparser::flexible::messages::Message value((jobject) NULL);
              OBJ_CALL(value = self->object.getMessageObject());
              return ::org::apache::lucene::queryparser::flexible::messages::t_Message::wrap_Object(value);
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/facet/FacetsConfig.h"
#include "java/util/Map.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/facet/FacetsConfig$DimConfig.h"
#include "org/apache/lucene/facet/FacetsConfig$DrillDownTermsIndexing.h"
#include "java/lang/String.h"
#include "org/apache/lucene/document/Document.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/facet/taxonomy/TaxonomyWriter.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace facet {

        ::java::lang::Class *FacetsConfig::class$ = NULL;
        jmethodID *FacetsConfig::mids$ = NULL;
        bool FacetsConfig::live$ = false;
        ::org::apache::lucene::facet::FacetsConfig$DimConfig *FacetsConfig::DEFAULT_DIM_CONFIG = NULL;
        ::java::lang::String *FacetsConfig::DEFAULT_INDEX_FIELD_NAME = NULL;
        jchar FacetsConfig::DELIM_CHAR = (jchar) 0;

        jclass FacetsConfig::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/facet/FacetsConfig");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_f2cc1bce94666404] = env->getMethodID(cls, "<init>", "()V");
            mids$[mid_build_acd164ff868029a3] = env->getMethodID(cls, "build", "(Lorg/apache/lucene/document/Document;)Lorg/apache/lucene/document/Document;");
            mids$[mid_build_a4a3ff91cfb48cb4] = env->getMethodID(cls, "build", "(Lorg/apache/lucene/facet/taxonomy/TaxonomyWriter;Lorg/apache/lucene/document/Document;)Lorg/apache/lucene/document/Document;");
            mids$[mid_getDimConfig_c977a2e632d40fa5] = env->getMethodID(cls, "getDimConfig", "(Ljava/lang/String;)Lorg/apache/lucene/facet/FacetsConfig$DimConfig;");
            mids$[mid_getDimConfigs_1c3426541413a55d] = env->getMethodID(cls, "getDimConfigs", "()Ljava/util/Map;");
            mids$[mid_pathToString_03dae215009b5a7f] = env->getStaticMethodID(cls, "pathToString", "([Ljava/lang/String;)Ljava/lang/String;");
            mids$[mid_pathToString_554e6a885e8e7cba] = env->getStaticMethodID(cls, "pathToString", "(Ljava/lang/String;[Ljava/lang/String;)Ljava/lang/String;");
            mids$[mid_pathToString_fae0305e95ad7426] = env->getStaticMethodID(cls, "pathToString", "([Ljava/lang/String;I)Ljava/lang/String;");
            mids$[mid_setDrillDownTermsIndexing_26fb6a5a7c23f6c4] = env->getMethodID(cls, "setDrillDownTermsIndexing", "(Ljava/lang/String;Lorg/apache/lucene/facet/FacetsConfig$DrillDownTermsIndexing;)V");
            mids$[mid_setHierarchical_b1180807b87ba737] = env->getMethodID(cls, "setHierarchical", "(Ljava/lang/String;Z)V");
            mids$[mid_setIndexFieldName_15b72f6a44ff93f2] = env->getMethodID(cls, "setIndexFieldName", "(Ljava/lang/String;Ljava/lang/String;)V");
            mids$[mid_setMultiValued_b1180807b87ba737] = env->getMethodID(cls, "setMultiValued", "(Ljava/lang/String;Z)V");
            mids$[mid_setRequireDimCount_b1180807b87ba737] = env->getMethodID(cls, "setRequireDimCount", "(Ljava/lang/String;Z)V");
            mids$[mid_setRequireDimensionDrillDown_b1180807b87ba737] = env->getMethodID(cls, "setRequireDimensionDrillDown", "(Ljava/lang/String;Z)V");
            mids$[mid_stringToPath_1606e23a23a4a8e5] = env->getStaticMethodID(cls, "stringToPath", "(Ljava/lang/String;)[Ljava/lang/String;");
            mids$[mid_dedupAndEncode_887f798643eedba4] = env->getMethodID(cls, "dedupAndEncode", "(Lorg/apache/lucene/util/IntsRef;)Lorg/apache/lucene/util/BytesRef;");
            mids$[mid_getDefaultDimConfig_52c6450c342efb8b] = env->getMethodID(cls, "getDefaultDimConfig", "()Lorg/apache/lucene/facet/FacetsConfig$DimConfig;");

            class$ = new ::java::lang::Class(cls);
            cls = (jclass) class$->this$;

            DEFAULT_DIM_CONFIG = new ::org::apache::lucene::facet::FacetsConfig$DimConfig(env->getStaticObjectField(cls, "DEFAULT_DIM_CONFIG", "Lorg/apache/lucene/facet/FacetsConfig$DimConfig;"));
            DEFAULT_INDEX_FIELD_NAME = new ::java::lang::String(env->getStaticObjectField(cls, "DEFAULT_INDEX_FIELD_NAME", "Ljava/lang/String;"));
            DELIM_CHAR = env->getStaticCharField(cls, "DELIM_CHAR");
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        FacetsConfig::FacetsConfig() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_f2cc1bce94666404)) {}

        ::org::apache::lucene::document::Document FacetsConfig::build(const ::org::apache::lucene::document::Document & a0) const
        {
          return ::org::apache::lucene::document::Document(env->callObjectMethod(this$, mids$[mid_build_acd164ff868029a3], a0.this$));
        }

        ::org::apache::lucene::document::Document FacetsConfig::build(const ::org::apache::lucene::facet::taxonomy::TaxonomyWriter & a0, const ::org::apache::lucene::document::Document & a1) const
        {
          return ::org::apache::lucene::document::Document(env->callObjectMethod(this$, mids$[mid_build_a4a3ff91cfb48cb4], a0.this$, a1.this$));
        }

        ::org::apache::lucene::facet::FacetsConfig$DimConfig FacetsConfig::getDimConfig(const ::java::lang::String & a0) const
        {
          return ::org::apache::lucene::facet::FacetsConfig$DimConfig(env->callObjectMethod(this$, mids$[mid_getDimConfig_c977a2e632d40fa5], a0.this$));
        }

        ::java::util::Map FacetsConfig::getDimConfigs() const
        {
          return ::java::util::Map(env->callObjectMethod(this$, mids$[mid_getDimConfigs_1c3426541413a55d]));
        }

        ::java::lang::String FacetsConfig::pathToString(const JArray< ::java::lang::String > & a0)
        {
          jclass cls = env->getClass(initializeClass);
          return ::java::lang::String(env->callStaticObjectMethod(cls, mids$[mid_pathToString_03dae215009b5a7f], a0.this$));
        }

        ::java::lang::String FacetsConfig::pathToString(const ::java::lang::String & a0, const JArray< ::java::lang::String > & a1)
        {
          jclass cls = env->getClass(initializeClass);
          return ::java::lang::String(env->callStaticObjectMethod(cls, mids$[mid_pathToString_554e6a885e8e7cba], a0.this$, a1.this$));
        }

        ::java::lang::String FacetsConfig::pathToString(const JArray< ::java::lang::String > & a0, jint a1)
        {
          jclass cls = env->getClass(initializeClass);
          return ::java::lang::String(env->callStaticObjectMethod(cls, mids$[mid_pathToString_fae0305e95ad7426], a0.this$, a1));
        }

        void FacetsConfig::setDrillDownTermsIndexing(const ::java::lang::String & a0, const ::org::apache::lucene::facet::FacetsConfig$DrillDownTermsIndexing & a1) const
        {
          env->callVoidMethod(this$, mids$[mid_setDrillDownTermsIndexing_26fb6a5a7c23f6c4], a0.this$, a1.this$);
        }

        void FacetsConfig::setHierarchical(const ::java::lang::String & a0, jboolean a1) const
        {
          env->callVoidMethod(this$, mids$[mid_setHierarchical_b1180807b87ba737], a0.this$, a1);
        }

        void FacetsConfig::setIndexFieldName(const ::java::lang::String & a0, const ::java::lang::String & a1) const
        {
          env->callVoidMethod(this$, mids$[mid_setIndexFieldName_15b72f6a44ff93f2], a0.this$, a1.this$);
        }

        void FacetsConfig::setMultiValued(const ::java::lang::String & a0, jboolean a1) const
        {
          env->callVoidMethod(this$, mids$[mid_setMultiValued_b1180807b87ba737], a0.this$, a1);
        }

        void FacetsConfig::setRequireDimCount(const ::java::lang::String & a0, jboolean a1) const
        {
          env->callVoidMethod(this$, mids$[mid_setRequireDimCount_b1180807b87ba737], a0.this$, a1);
        }

        void FacetsConfig::setRequireDimensionDrillDown(const ::java::lang::String & a0, jboolean a1) const
        {
          env->callVoidMethod(this$, mids$[mid_setRequireDimensionDrillDown_b1180807b87ba737], a0.this$, a1);
        }

        JArray< ::java::lang::String > FacetsConfig::stringToPath(const ::java::lang::String & a0)
        {
          jclass cls = env->getClass(initializeClass);
          return JArray< ::java::lang::String >(env->callStaticObjectMethod(cls, mids$[mid_stringToPath_1606e23a23a4a8e5], a0.this$));
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace facet {
        static PyObject *t_FacetsConfig_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_FacetsConfig_instance_(PyTypeObject *type, PyObject *arg);
        static int t_FacetsConfig_init_(t_FacetsConfig *self, PyObject *args, PyObject *kwds);
        static PyObject *t_FacetsConfig_build(t_FacetsConfig *self, PyObject *args);
        static PyObject *t_FacetsConfig_getDimConfig(t_FacetsConfig *self, PyObject *arg);
        static PyObject *t_FacetsConfig_getDimConfigs(t_FacetsConfig *self);
        static PyObject *t_FacetsConfig_pathToString(PyTypeObject *type, PyObject *args);
        static PyObject *t_FacetsConfig_setDrillDownTermsIndexing(t_FacetsConfig *self, PyObject *args);
        static PyObject *t_FacetsConfig_setHierarchical(t_FacetsConfig *self, PyObject *args);
        static PyObject *t_FacetsConfig_setIndexFieldName(t_FacetsConfig *self, PyObject *args);
        static PyObject *t_FacetsConfig_setMultiValued(t_FacetsConfig *self, PyObject *args);
        static PyObject *t_FacetsConfig_setRequireDimCount(t_FacetsConfig *self, PyObject *args);
        static PyObject *t_FacetsConfig_setRequireDimensionDrillDown(t_FacetsConfig *self, PyObject *args);
        static PyObject *t_FacetsConfig_stringToPath(PyTypeObject *type, PyObject *arg);
        static PyObject *t_FacetsConfig_get__dimConfigs(t_FacetsConfig *self, void *data);
        static PyGetSetDef t_FacetsConfig__fields_[] = {
          DECLARE_GET_FIELD(t_FacetsConfig, dimConfigs),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_FacetsConfig__methods_[] = {
          DECLARE_METHOD(t_FacetsConfig, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_FacetsConfig, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_FacetsConfig, build, METH_VARARGS),
          DECLARE_METHOD(t_FacetsConfig, getDimConfig, METH_O),
          DECLARE_METHOD(t_FacetsConfig, getDimConfigs, METH_NOARGS),
          DECLARE_METHOD(t_FacetsConfig, pathToString, METH_VARARGS | METH_CLASS),
          DECLARE_METHOD(t_FacetsConfig, setDrillDownTermsIndexing, METH_VARARGS),
          DECLARE_METHOD(t_FacetsConfig, setHierarchical, METH_VARARGS),
          DECLARE_METHOD(t_FacetsConfig, setIndexFieldName, METH_VARARGS),
          DECLARE_METHOD(t_FacetsConfig, setMultiValued, METH_VARARGS),
          DECLARE_METHOD(t_FacetsConfig, setRequireDimCount, METH_VARARGS),
          DECLARE_METHOD(t_FacetsConfig, setRequireDimensionDrillDown, METH_VARARGS),
          DECLARE_METHOD(t_FacetsConfig, stringToPath, METH_O | METH_CLASS),
          { NULL, NULL, 0, NULL }
        };

        static PyType_Slot PY_TYPE_SLOTS(FacetsConfig)[] = {
          { Py_tp_methods, t_FacetsConfig__methods_ },
          { Py_tp_init, (void *) t_FacetsConfig_init_ },
          { Py_tp_getset, t_FacetsConfig__fields_ },
          { 0, NULL }
        };

        static PyType_Def *PY_TYPE_BASES(FacetsConfig)[] = {
          &PY_TYPE_DEF(::java::lang::Object),
          NULL
        };

        DEFINE_TYPE(FacetsConfig, t_FacetsConfig, FacetsConfig);

        void t_FacetsConfig::install(PyObject *module)
        {
          installType(&PY_TYPE(FacetsConfig), &PY_TYPE_DEF(FacetsConfig), module, "FacetsConfig", 0);
          PyObject_SetAttrString((PyObject *) PY_TYPE(FacetsConfig), "DimConfig", make_descriptor(&PY_TYPE_DEF(FacetsConfig$DimConfig)));
          PyObject_SetAttrString((PyObject *) PY_TYPE(FacetsConfig), "DrillDownTermsIndexing", make_descriptor(&PY_TYPE_DEF(FacetsConfig$DrillDownTermsIndexing)));
        }

        void t_FacetsConfig::initialize(PyObject *module)
        {
          PyObject_SetAttrString((PyObject *) PY_TYPE(FacetsConfig), "class_", make_descriptor(FacetsConfig::initializeClass, 1));
          PyObject_SetAttrString((PyObject *) PY_TYPE(FacetsConfig), "wrapfn_", make_descriptor(t_FacetsConfig::wrap_jobject));
          PyObject_SetAttrString((PyObject *) PY_TYPE(FacetsConfig), "boxfn_", make_descriptor(boxObject));
          env->getClass(FacetsConfig::initializeClass);
          PyObject_SetAttrString((PyObject *) PY_TYPE(FacetsConfig), "DEFAULT_DIM_CONFIG", make_descriptor(::org::apache::lucene::facet::t_FacetsConfig$DimConfig::wrap_Object(*FacetsConfig::DEFAULT_DIM_CONFIG)));
          PyObject_SetAttrString((PyObject *) PY_TYPE(FacetsConfig), "DEFAULT_INDEX_FIELD_NAME", make_descriptor(j2p(*FacetsConfig::DEFAULT_INDEX_FIELD_NAME)));
          PyObject_SetAttrString((PyObject *) PY_TYPE(FacetsConfig), "DELIM_CHAR", make_descriptor(FacetsConfig::DELIM_CHAR));
        }

        static PyObject *t_FacetsConfig_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, FacetsConfig::initializeClass, 1)))
            return NULL;
          return t_FacetsConfig::wrap_Object(FacetsConfig(((t_FacetsConfig *) arg)->object.this$));
        }
        static PyObject *t_FacetsConfig_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, FacetsConfig::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_FacetsConfig_init_(t_FacetsConfig *self, PyObject *args, PyObject *kwds)
        {
          FacetsConfig object((jobject) NULL);

          INT_CALL(object = FacetsConfig());
          self->object = object;

          return 0;
        }

        static PyObject *t_FacetsConfig_build(t_FacetsConfig *self, PyObject *args)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 1:
            {
              ::org::apache::lucene::document::Document a0((jobject) NULL);
              ::org::apache::lucene::document::Document result((jobject) NULL);

              if (!parseArgs(args, "k", ::org::apache::lucene::document::Document::initializeClass, &a0))
              {
                OBJ_CALL(result = self->object.build(a0));
                return ::org::apache::lucene::document::t_Document::wrap_Object(result);
              }
            }
            break;
           case 2:
            {
              ::org::apache::lucene::facet::taxonomy::TaxonomyWriter a0((jobject) NULL);
              ::org::apache::lucene::document::Document a1((jobject) NULL);
              ::org::apache::lucene::document::Document result((jobject) NULL);

              if (!parseArgs(args, "kk", ::org::apache::lucene::facet::taxonomy::TaxonomyWriter::initializeClass, ::org::apache::lucene::document::Document::initializeClass, &a0, &a1))
              {
                OBJ_CALL(result = self->object.build(a0, a1));
                return ::org::apache::lucene::document::t_Document::wrap_Object(result);
              }
            }
          }

          PyErr_SetArgsError((PyObject *) self, "build", args);
          return NULL;
        }

        static PyObject *t_FacetsConfig_getDimConfig(t_FacetsConfig *self, PyObject *arg)
        {
          ::java::lang::String a0((jobject) NULL);
          ::org::apache::lucene::facet::FacetsConfig$DimConfig result((jobject) NULL);

          if (!parseArg(arg, "s", &a0))
          {
            OBJ_CALL(result = self->object.getDimConfig(a0));
            return ::org::apache::lucene::facet::t_FacetsConfig$DimConfig::wrap_Object(result);
          }

          PyErr_SetArgsError((PyObject *) self, "getDimConfig", arg);
          return NULL;
        }

        static PyObject *t_FacetsConfig_getDimConfigs(t_FacetsConfig *self)
        {
          ::java::util::Map result((jobject) NULL);
          OBJ_CALL(result = self->object.getDimConfigs());
          return ::java::util::t_Map::wrap_Object(result, ::java::lang::PY_TYPE(String), ::org::apache::lucene::facet::PY_TYPE(FacetsConfig$DimConfig));
        }

        static PyObject *t_FacetsConfig_pathToString(PyTypeObject *type, PyObject *args)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 1:
            {
              JArray< ::java::lang::String > a0((jobject) NULL);
              ::java::lang::String result((jobject) NULL);

              if (!parseArgs(args, "[s", &a0))
              {
                OBJ_CALL(result = ::org::apache::lucene::facet::FacetsConfig::pathToString(a0));
                return j2p(result);
              }
            }
            break;
           case 2:
            {
              ::java::lang::String a0((jobject) NULL);
              JArray< ::java::lang::String > a1((jobject) NULL);
              ::java::lang::String result((jobject) NULL);

              if (!parseArgs(args, "s[s", &a0, &a1))
              {
                OBJ_CALL(result = ::org::apache::lucene::facet::FacetsConfig::pathToString(a0, a1));
                return j2p(result);
              }
            }
            {
              JArray< ::java::lang::String > a0((jobject) NULL);
              jint a1;
              ::java::lang::String result((jobject) NULL);

              if (!parseArgs(args, "[sI", &a0, &a1))
              {
                OBJ_CALL(result = ::org::apache::lucene::facet::FacetsConfig::pathToString(a0, a1));
                return j2p(result);
              }
            }
          }

          PyErr_SetArgsError(type, "pathToString", args);
          return NULL;
        }

        static PyObject *t_FacetsConfig_setDrillDownTermsIndexing(t_FacetsConfig *self, PyObject *args)
        {
          ::java::lang::String a0((jobject) NULL);
          ::org::apache::lucene::facet::FacetsConfig$DrillDownTermsIndexing a1((jobject) NULL);
          PyTypeObject **p1;

          if (!parseArgs(args, "sK", ::org::apache::lucene::facet::FacetsConfig$DrillDownTermsIndexing::initializeClass, &a0, &a1, &p1, ::org::apache::lucene::facet::t_FacetsConfig$DrillDownTermsIndexing::parameters_))
          {
            OBJ_CALL(self->object.setDrillDownTermsIndexing(a0, a1));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "setDrillDownTermsIndexing", args);
          return NULL;
        }

        static PyObject *t_FacetsConfig_setHierarchical(t_FacetsConfig *self, PyObject *args)
        {
          ::java::lang::String a0((jobject) NULL);
          jboolean a1;

          if (!parseArgs(args, "sZ", &a0, &a1))
          {
            OBJ_CALL(self->object.setHierarchical(a0, a1));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "setHierarchical", args);
          return NULL;
        }

        static PyObject *t_FacetsConfig_setIndexFieldName(t_FacetsConfig *self, PyObject *args)
        {
          ::java::lang::String a0((jobject) NULL);
          ::java::lang::String a1((jobject) NULL);

          if (!parseArgs(args, "ss", &a0, &a1))
          {
            OBJ_CALL(self->object.setIndexFieldName(a0, a1));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "setIndexFieldName", args);
          return NULL;
        }

        static PyObject *t_FacetsConfig_setMultiValued(t_FacetsConfig *self, PyObject *args)
        {
          ::java::lang::String a0((jobject) NULL);
          jboolean a1;

          if (!parseArgs(args, "sZ", &a0, &a1))
          {
            OBJ_CALL(self->object.setMultiValued(a0, a1));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "setMultiValued", args);
          return NULL;
        }

        static PyObject *t_FacetsConfig_setRequireDimCount(t_FacetsConfig *self, PyObject *args)
        {
          ::java::lang::String a0((jobject) NULL);
          jboolean a1;

          if (!parseArgs(args, "sZ", &a0, &a1))
          {
            OBJ_CALL(self->object.setRequireDimCount(a0, a1));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "setRequireDimCount", args);
          return NULL;
        }

        static PyObject *t_FacetsConfig_setRequireDimensionDrillDown(t_FacetsConfig *self, PyObject *args)
        {
          ::java::lang::String a0((jobject) NULL);
          jboolean a1;

          if (!parseArgs(args, "sZ", &a0, &a1))
          {
            OBJ_CALL(self->object.setRequireDimensionDrillDown(a0, a1));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "setRequireDimensionDrillDown", args);
          return NULL;
        }

        static PyObject *t_FacetsConfig_stringToPath(PyTypeObject *type, PyObject *arg)
        {
          ::java::lang::String a0((jobject) NULL);
          JArray< ::java::lang::String > result((jobject) NULL);

          if (!parseArg(arg, "s", &a0))
          {
            OBJ_CALL(result = ::org::apache::lucene::facet::FacetsConfig::stringToPath(a0));
            return JArray<jstring>(result.this$).wrap();
          }

          PyErr_SetArgsError(type, "stringToPath", arg);
          return NULL;
        }

        static PyObject *t_FacetsConfig_get__dimConfigs(t_FacetsConfig *self, void *data)
        {
          ::java::util::Map value((jobject) NULL);
          OBJ_CALL(value = self->object.getDimConfigs());
          return ::java::util::t_Map::wrap_Object(value);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/spell/LuceneDictionary.h"
#include "org/apache/lucene/index/IndexReader.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/search/spell/Dictionary.h"
#include "java/lang/String.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/search/suggest/InputIterator.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace spell {

          ::java::lang::Class *LuceneDictionary::class$ = NULL;
          jmethodID *LuceneDictionary::mids$ = NULL;
          bool LuceneDictionary::live$ = false;

          jclass LuceneDictionary::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/search/spell/LuceneDictionary");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_456f925f19f7f45c] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/index/IndexReader;Ljava/lang/String;)V");
              mids$[mid_getEntryIterator_58c408dcc07c62ab] = env->getMethodID(cls, "getEntryIterator", "()Lorg/apache/lucene/search/suggest/InputIterator;");

              class$ = new ::java::lang::Class(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          LuceneDictionary::LuceneDictionary(const ::org::apache::lucene::index::IndexReader & a0, const ::java::lang::String & a1) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_456f925f19f7f45c, a0.this$, a1.this$)) {}

          ::org::apache::lucene::search::suggest::InputIterator LuceneDictionary::getEntryIterator() const
          {
            return ::org::apache::lucene::search::suggest::InputIterator(env->callObjectMethod(this$, mids$[mid_getEntryIterator_58c408dcc07c62ab]));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace spell {
          static PyObject *t_LuceneDictionary_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_LuceneDictionary_instance_(PyTypeObject *type, PyObject *arg);
          static int t_LuceneDictionary_init_(t_LuceneDictionary *self, PyObject *args, PyObject *kwds);
          static PyObject *t_LuceneDictionary_getEntryIterator(t_LuceneDictionary *self);
          static PyObject *t_LuceneDictionary_get__entryIterator(t_LuceneDictionary *self, void *data);
          static PyGetSetDef t_LuceneDictionary__fields_[] = {
            DECLARE_GET_FIELD(t_LuceneDictionary, entryIterator),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_LuceneDictionary__methods_[] = {
            DECLARE_METHOD(t_LuceneDictionary, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_LuceneDictionary, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_LuceneDictionary, getEntryIterator, METH_NOARGS),
            { NULL, NULL, 0, NULL }
          };

          static PyType_Slot PY_TYPE_SLOTS(LuceneDictionary)[] = {
            { Py_tp_methods, t_LuceneDictionary__methods_ },
            { Py_tp_init, (void *) t_LuceneDictionary_init_ },
            { Py_tp_getset, t_LuceneDictionary__fields_ },
            { 0, NULL }
          };

          static PyType_Def *PY_TYPE_BASES(LuceneDictionary)[] = {
            &PY_TYPE_DEF(::java::lang::Object),
            NULL
          };

          DEFINE_TYPE(LuceneDictionary, t_LuceneDictionary, LuceneDictionary);

          void t_LuceneDictionary::install(PyObject *module)
          {
            installType(&PY_TYPE(LuceneDictionary), &PY_TYPE_DEF(LuceneDictionary), module, "LuceneDictionary", 0);
          }

          void t_LuceneDictionary::initialize(PyObject *module)
          {
            PyObject_SetAttrString((PyObject *) PY_TYPE(LuceneDictionary), "class_", make_descriptor(LuceneDictionary::initializeClass, 1));
            PyObject_SetAttrString((PyObject *) PY_TYPE(LuceneDictionary), "wrapfn_", make_descriptor(t_LuceneDictionary::wrap_jobject));
            PyObject_SetAttrString((PyObject *) PY_TYPE(LuceneDictionary), "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_LuceneDictionary_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, LuceneDictionary::initializeClass, 1)))
              return NULL;
            return t_LuceneDictionary::wrap_Object(LuceneDictionary(((t_LuceneDictionary *) arg)->object.this$));
          }
          static PyObject *t_LuceneDictionary_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, LuceneDictionary::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_LuceneDictionary_init_(t_LuceneDictionary *self, PyObject *args, PyObject *kwds)
          {
            ::org::apache::lucene::index::IndexReader a0((jobject) NULL);
            ::java::lang::String a1((jobject) NULL);
            LuceneDictionary object((jobject) NULL);

            if (!parseArgs(args, "ks", ::org::apache::lucene::index::IndexReader::initializeClass, &a0, &a1))
            {
              INT_CALL(object = LuceneDictionary(a0, a1));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_LuceneDictionary_getEntryIterator(t_LuceneDictionary *self)
          {
            ::org::apache::lucene::search::suggest::InputIterator result((jobject) NULL);
            OBJ_CALL(result = self->object.getEntryIterator());
            return ::org::apache::lucene::search::suggest::t_InputIterator::wrap_Object(result);
          }

          static PyObject *t_LuceneDictionary_get__entryIterator(t_LuceneDictionary *self, void *data)
          {
            ::org::apache::lucene::search::suggest::InputIterator value((jobject) NULL);
            OBJ_CALL(value = self->object.getEntryIterator());
            return ::org::apache::lucene::search::suggest::t_InputIterator::wrap_Object(value);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/miscellaneous/EmptyTokenStream.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace miscellaneous {

          ::java::lang::Class *EmptyTokenStream::class$ = NULL;
          jmethodID *EmptyTokenStream::mids$ = NULL;
          bool EmptyTokenStream::live$ = false;

          jclass EmptyTokenStream::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/miscellaneous/EmptyTokenStream");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_f2cc1bce94666404] = env->getMethodID(cls, "<init>", "()V");
              mids$[mid_incrementToken_8454bd5aa23fd11e] = env->getMethodID(cls, "incrementToken", "()Z");

              class$ = new ::java::lang::Class(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          EmptyTokenStream::EmptyTokenStream() : ::org::apache::lucene::analysis::TokenStream(env->newObject(initializeClass, &mids$, mid_init$_f2cc1bce94666404)) {}

          jboolean EmptyTokenStream::incrementToken() const
          {
            return env->callBooleanMethod(this$, mids$[mid_incrementToken_8454bd5aa23fd11e]);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace miscellaneous {
          static PyObject *t_EmptyTokenStream_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_EmptyTokenStream_instance_(PyTypeObject *type, PyObject *arg);
          static int t_EmptyTokenStream_init_(t_EmptyTokenStream *self, PyObject *args, PyObject *kwds);
          static PyObject *t_EmptyTokenStream_incrementToken(t_EmptyTokenStream *self, PyObject *args);

          static PyMethodDef t_EmptyTokenStream__methods_[] = {
            DECLARE_METHOD(t_EmptyTokenStream, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_EmptyTokenStream, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_EmptyTokenStream, incrementToken, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          static PyType_Slot PY_TYPE_SLOTS(EmptyTokenStream)[] = {
            { Py_tp_methods, t_EmptyTokenStream__methods_ },
            { Py_tp_init, (void *) t_EmptyTokenStream_init_ },
            { 0, NULL }
          };

          static PyType_Def *PY_TYPE_BASES(EmptyTokenStream)[] = {
            &PY_TYPE_DEF(::org::apache::lucene::analysis::TokenStream),
            NULL
          };

          DEFINE_TYPE(EmptyTokenStream, t_EmptyTokenStream, EmptyTokenStream);

          void t_EmptyTokenStream::install(PyObject *module)
          {
            installType(&PY_TYPE(EmptyTokenStream), &PY_TYPE_DEF(EmptyTokenStream), module, "EmptyTokenStream", 0);
          }

          void t_EmptyTokenStream::initialize(PyObject *module)
          {
            PyObject_SetAttrString((PyObject *) PY_TYPE(EmptyTokenStream), "class_", make_descriptor(EmptyTokenStream::initializeClass, 1));
            PyObject_SetAttrString((PyObject *) PY_TYPE(EmptyTokenStream), "wrapfn_", make_descriptor(t_EmptyTokenStream::wrap_jobject));
            PyObject_SetAttrString((PyObject *) PY_TYPE(EmptyTokenStream), "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_EmptyTokenStream_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, EmptyTokenStream::initializeClass, 1)))
              return NULL;
            return t_EmptyTokenStream::wrap_Object(EmptyTokenStream(((t_EmptyTokenStream *) arg)->object.this$));
          }
          static PyObject *t_EmptyTokenStream_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, EmptyTokenStream::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_EmptyTokenStream_init_(t_EmptyTokenStream *self, PyObject *args, PyObject *kwds)
          {
            EmptyTokenStream object((jobject) NULL);

            INT_CALL(object = EmptyTokenStream());
            self->object = object;

            return 0;
          }

          static PyObject *t_EmptyTokenStream_incrementToken(t_EmptyTokenStream *self, PyObject *args)
          {
            jboolean result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.incrementToken());
              Py_RETURN_BOOL(result);
            }

            return callSuper(PY_TYPE(EmptyTokenStream), (PyObject *) self, "incrementToken", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/suggest/BufferedInputIterator.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/util/BytesRef.h"
#include "java/io/IOException.h"
#include "java/util/Set.h"
#include "org/apache/lucene/search/suggest/InputIterator.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace suggest {

          ::java::lang::Class *BufferedInputIterator::class$ = NULL;
          jmethodID *BufferedInputIterator::mids$ = NULL;
          bool BufferedInputIterator::live$ = false;

          jclass BufferedInputIterator::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/search/suggest/BufferedInputIterator");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_bf225d6cde09eeb7] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/search/suggest/InputIterator;)V");
              mids$[mid_contexts_7dcf4034c6d1a92a] = env->getMethodID(cls, "contexts", "()Ljava/util/Set;");
              mids$[mid_hasContexts_8454bd5aa23fd11e] = env->getMethodID(cls, "hasContexts", "()Z");
              mids$[mid_hasPayloads_8454bd5aa23fd11e] = env->getMethodID(cls, "hasPayloads", "()Z");
              mids$[mid_next_7af2ea2e37ce82b8] = env->getMethodID(cls, "next", "()Lorg/apache/lucene/util/BytesRef;");
              mids$[mid_payload_7af2ea2e37ce82b8] = env->getMethodID(cls, "payload", "()Lorg/apache/lucene/util/BytesRef;");
              mids$[mid_weight_2e5ae9edcb9b072f] = env->getMethodID(cls, "weight", "()J");

              class$ = new ::java::lang::Class(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          BufferedInputIterator::BufferedInputIterator(const ::org::apache::lucene::search::suggest::InputIterator & a0) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_bf225d6cde09eeb7, a0.this$)) {}

          ::java::util::Set BufferedInputIterator::contexts() const
          {
            return ::java::util::Set(env->callObjectMethod(this$, mids$[mid_contexts_7dcf4034c6d1a92a]));
          }

          jboolean BufferedInputIterator::hasContexts() const
          {
            return env->callBooleanMethod(this$, mids$[mid_hasContexts_8454bd5aa23fd11e]);
          }

          jboolean BufferedInputIterator::hasPayloads() const
          {
            return env->callBooleanMethod(this$, mids$[mid_hasPayloads_8454bd5aa23fd11e]);
          }

          ::org::apache::lucene::util::BytesRef BufferedInputIterator::next() const
          {
            return ::org::apache::lucene::util::BytesRef(env->callObjectMethod(this$, mids$[mid_next_7af2ea2e37ce82b8]));
          }

          ::org::apache::lucene::util::BytesRef BufferedInputIterator::payload() const
          {
            return ::org::apache::lucene::util::BytesRef(env->callObjectMethod(this$, mids$[mid_payload_7af2ea2e37ce82b8]));
          }

          jlong BufferedInputIterator::weight() const
          {
            return env->callLongMethod(this$, mids$[mid_weight_2e5ae9edcb9b072f]);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace suggest {
          static PyObject *t_BufferedInputIterator_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_BufferedInputIterator_instance_(PyTypeObject *type, PyObject *arg);
          static int t_BufferedInputIterator_init_(t_BufferedInputIterator *self, PyObject *args, PyObject *kwds);
          static PyObject *t_BufferedInputIterator_contexts(t_BufferedInputIterator *self);
          static PyObject *t_BufferedInputIterator_hasContexts(t_BufferedInputIterator *self);
          static PyObject *t_BufferedInputIterator_hasPayloads(t_BufferedInputIterator *self);
          static PyObject *t_BufferedInputIterator_next(t_BufferedInputIterator *self);
          static PyObject *t_BufferedInputIterator_payload(t_BufferedInputIterator *self);
          static PyObject *t_BufferedInputIterator_weight(t_BufferedInputIterator *self);

          static PyMethodDef t_BufferedInputIterator__methods_[] = {
            DECLARE_METHOD(t_BufferedInputIterator, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_BufferedInputIterator, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_BufferedInputIterator, contexts, METH_NOARGS),
            DECLARE_METHOD(t_BufferedInputIterator, hasContexts, METH_NOARGS),
            DECLARE_METHOD(t_BufferedInputIterator, hasPayloads, METH_NOARGS),
            DECLARE_METHOD(t_BufferedInputIterator, next, METH_NOARGS),
            DECLARE_METHOD(t_BufferedInputIterator, payload, METH_NOARGS),
            DECLARE_METHOD(t_BufferedInputIterator, weight, METH_NOARGS),
            { NULL, NULL, 0, NULL }
          };

          static PyType_Slot PY_TYPE_SLOTS(BufferedInputIterator)[] = {
            { Py_tp_methods, t_BufferedInputIterator__methods_ },
            { Py_tp_init, (void *) t_BufferedInputIterator_init_ },
            { Py_tp_iter, (void *) PyObject_SelfIter },
            { Py_tp_iternext, (void *) ((PyObject *(*)(t_BufferedInputIterator *)) get_next< t_BufferedInputIterator,::org::apache::lucene::util::t_BytesRef,::org::apache::lucene::util::BytesRef >) },
            { 0, NULL }
          };

          static PyType_Def *PY_TYPE_BASES(BufferedInputIterator)[] = {
            &PY_TYPE_DEF(::java::lang::Object),
            NULL
          };

          DEFINE_TYPE(BufferedInputIterator, t_BufferedInputIterator, BufferedInputIterator);

          void t_BufferedInputIterator::install(PyObject *module)
          {
            installType(&PY_TYPE(BufferedInputIterator), &PY_TYPE_DEF(BufferedInputIterator), module, "BufferedInputIterator", 0);
          }

          void t_BufferedInputIterator::initialize(PyObject *module)
          {
            PyObject_SetAttrString((PyObject *) PY_TYPE(BufferedInputIterator), "class_", make_descriptor(BufferedInputIterator::initializeClass, 1));
            PyObject_SetAttrString((PyObject *) PY_TYPE(BufferedInputIterator), "wrapfn_", make_descriptor(t_BufferedInputIterator::wrap_jobject));
            PyObject_SetAttrString((PyObject *) PY_TYPE(BufferedInputIterator), "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_BufferedInputIterator_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, BufferedInputIterator::initializeClass, 1)))
              return NULL;
            return t_BufferedInputIterator::wrap_Object(BufferedInputIterator(((t_BufferedInputIterator *) arg)->object.this$));
          }
          static PyObject *t_BufferedInputIterator_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, BufferedInputIterator::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_BufferedInputIterator_init_(t_BufferedInputIterator *self, PyObject *args, PyObject *kwds)
          {
            ::org::apache::lucene::search::suggest::InputIterator a0((jobject) NULL);
            BufferedInputIterator object((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::search::suggest::InputIterator::initializeClass, &a0))
            {
              INT_CALL(object = BufferedInputIterator(a0));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_BufferedInputIterator_contexts(t_BufferedInputIterator *self)
          {
            ::java::util::Set result((jobject) NULL);
            OBJ_CALL(result = self->object.contexts());
            return ::java::util::t_Set::wrap_Object(result, ::org::apache::lucene::util::PY_TYPE(BytesRef));
          }

          static PyObject *t_BufferedInputIterator_hasContexts(t_BufferedInputIterator *self)
          {
            jboolean result;
            OBJ_CALL(result = self->object.hasContexts());
            Py_RETURN_BOOL(result);
          }

          static PyObject *t_BufferedInputIterator_hasPayloads(t_BufferedInputIterator *self)
          {
            jboolean result;
            OBJ_CALL(result = self->object.hasPayloads());
            Py_RETURN_BOOL(result);
          }

          static PyObject *t_BufferedInputIterator_next(t_BufferedInputIterator *self)
          {
            ::org::apache::lucene::util::BytesRef result((jobject) NULL);
            OBJ_CALL(result = self->object.next());
            return ::org::apache::lucene::util::t_BytesRef::wrap_Object(result);
          }

          static PyObject *t_BufferedInputIterator_payload(t_BufferedInputIterator *self)
          {
            ::org::apache::lucene::util::BytesRef result((jobject) NULL);
            OBJ_CALL(result = self->object.payload());
            return ::org::apache::lucene::util::t_BytesRef::wrap_Object(result);
          }

          static PyObject *t_BufferedInputIterator_weight(t_BufferedInputIterator *self)
          {
            jlong result;
            OBJ_CALL(result = self->object.weight());
            return PyLong_FromLongLong((PY_LONG_LONG) result);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/en/EnglishMinimalStemFilter.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/analysis/TokenStream.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace en {

          ::java::lang::Class *EnglishMinimalStemFilter::class$ = NULL;
          jmethodID *EnglishMinimalStemFilter::mids$ = NULL;
          bool EnglishMinimalStemFilter::live$ = false;

          jclass EnglishMinimalStemFilter::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/en/EnglishMinimalStemFilter");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_c26756868a754f4e] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/analysis/TokenStream;)V");
              mids$[mid_incrementToken_8454bd5aa23fd11e] = env->getMethodID(cls, "incrementToken", "()Z");

              class$ = new ::java::lang::Class(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          EnglishMinimalStemFilter::EnglishMinimalStemFilter(const ::org::apache::lucene::analysis::TokenStream & a0) : ::org::apache::lucene::analysis::TokenFilter(env->newObject(initializeClass, &mids$, mid_init$_c26756868a754f4e, a0.this$)) {}

          jboolean EnglishMinimalStemFilter::incrementToken() const
          {
            return env->callBooleanMethod(this$, mids$[mid_incrementToken_8454bd5aa23fd11e]);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace en {
          static PyObject *t_EnglishMinimalStemFilter_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_EnglishMinimalStemFilter_instance_(PyTypeObject *type, PyObject *arg);
          static int t_EnglishMinimalStemFilter_init_(t_EnglishMinimalStemFilter *self, PyObject *args, PyObject *kwds);
          static PyObject *t_EnglishMinimalStemFilter_incrementToken(t_EnglishMinimalStemFilter *self, PyObject *args);

          static PyMethodDef t_EnglishMinimalStemFilter__methods_[] = {
            DECLARE_METHOD(t_EnglishMinimalStemFilter, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_EnglishMinimalStemFilter, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_EnglishMinimalStemFilter, incrementToken, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          static PyType_Slot PY_TYPE_SLOTS(EnglishMinimalStemFilter)[] = {
            { Py_tp_methods, t_EnglishMinimalStemFilter__methods_ },
            { Py_tp_init, (void *) t_EnglishMinimalStemFilter_init_ },
            { 0, NULL }
          };

          static PyType_Def *PY_TYPE_BASES(EnglishMinimalStemFilter)[] = {
            &PY_TYPE_DEF(::org::apache::lucene::analysis::TokenFilter),
            NULL
          };

          DEFINE_TYPE(EnglishMinimalStemFilter, t_EnglishMinimalStemFilter, EnglishMinimalStemFilter);

          void t_EnglishMinimalStemFilter::install(PyObject *module)
          {
            installType(&PY_TYPE(EnglishMinimalStemFilter), &PY_TYPE_DEF(EnglishMinimalStemFilter), module, "EnglishMinimalStemFilter", 0);
          }

          void t_EnglishMinimalStemFilter::initialize(PyObject *module)
          {
            PyObject_SetAttrString((PyObject *) PY_TYPE(EnglishMinimalStemFilter), "class_", make_descriptor(EnglishMinimalStemFilter::initializeClass, 1));
            PyObject_SetAttrString((PyObject *) PY_TYPE(EnglishMinimalStemFilter), "wrapfn_", make_descriptor(t_EnglishMinimalStemFilter::wrap_jobject));
            PyObject_SetAttrString((PyObject *) PY_TYPE(EnglishMinimalStemFilter), "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_EnglishMinimalStemFilter_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, EnglishMinimalStemFilter::initializeClass, 1)))
              return NULL;
            return t_EnglishMinimalStemFilter::wrap_Object(EnglishMinimalStemFilter(((t_EnglishMinimalStemFilter *) arg)->object.this$));
          }
          static PyObject *t_EnglishMinimalStemFilter_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, EnglishMinimalStemFilter::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_EnglishMinimalStemFilter_init_(t_EnglishMinimalStemFilter *self, PyObject *args, PyObject *kwds)
          {
            ::org::apache::lucene::analysis::TokenStream a0((jobject) NULL);
            EnglishMinimalStemFilter object((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::analysis::TokenStream::initializeClass, &a0))
            {
              INT_CALL(object = EnglishMinimalStemFilter(a0));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_EnglishMinimalStemFilter_incrementToken(t_EnglishMinimalStemFilter *self, PyObject *args)
          {
            jboolean result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.incrementToken());
              Py_RETURN_BOOL(result);
            }

            return callSuper(PY_TYPE(EnglishMinimalStemFilter), (PyObject *) self, "incrementToken", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/util/fst/IntSequenceOutputs.h"
#include "org/apache/lucene/util/IntsRef.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/util/fst/IntSequenceOutputs.h"
#include "org/apache/lucene/store/DataOutput.h"
#include "java/lang/String.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/store/DataInput.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        namespace fst {

          ::java::lang::Class *IntSequenceOutputs::class$ = NULL;
          jmethodID *IntSequenceOutputs::mids$ = NULL;
          bool IntSequenceOutputs::live$ = false;

          jclass IntSequenceOutputs::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/util/fst/IntSequenceOutputs");

              mids$ = new jmethodID[max_mid];
              mids$[mid_add_2ca81420cf9c2992] = env->getMethodID(cls, "add", "(Lorg/apache/lucene/util/IntsRef;Lorg/apache/lucene/util/IntsRef;)Lorg/apache/lucene/util/IntsRef;");
              mids$[mid_common_2ca81420cf9c2992] = env->getMethodID(cls, "common", "(Lorg/apache/lucene/util/IntsRef;Lorg/apache/lucene/util/IntsRef;)Lorg/apache/lucene/util/IntsRef;");
              mids$[mid_getNoOutput_ce9cdfb58d7a482b] = env->getMethodID(cls, "getNoOutput", "()Lorg/apache/lucene/util/IntsRef;");
              mids$[mid_getSingleton_b08227a4e328fd88] = env->getStaticMethodID(cls, "getSingleton", "()Lorg/apache/lucene/util/fst/IntSequenceOutputs;");
              mids$[mid_outputToString_0d46b4764e42d8a1] = env->getMethodID(cls, "outputToString", "(Lorg/apache/lucene/util/IntsRef;)Ljava/lang/String;");
              mids$[mid_ramBytesUsed_29f8f8f429676c4c] = env->getMethodID(cls, "ramBytesUsed", "(Lorg/apache/lucene/util/IntsRef;)J");
              mids$[mid_read_026b8975d7228564] = env->getMethodID(cls, "read", "(Lorg/apache/lucene/store/DataInput;)Lorg/apache/lucene/util/IntsRef;");
              mids$[mid_skipOutput_be8da68faa81682c] = env->getMethodID(cls, "skipOutput", "(Lorg/apache/lucene/store/DataInput;)V");
              mids$[mid_subtract_2ca81420cf9c2992] = env->getMethodID(cls, "subtract", "(Lorg/apache/lucene/util/IntsRef;Lorg/apache/lucene/util/IntsRef;)Lorg/apache/lucene/util/IntsRef;");
              mids$[mid_toString_db9b55ba01e03e4b] = env->getMethodID(cls, "toString", "()Ljava/lang/String;");
              mids$[mid_write_baf98e8590fd9407] = env->getMethodID(cls, "write", "(Lorg/apache/lucene/util/IntsRef;Lorg/apache/lucene/store/DataOutput;)V");

              class$ = new ::java::lang::Class(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          ::org::apache::lucene::util::IntsRef IntSequenceOutputs::add(const ::org::apache::lucene::util::IntsRef & a0, const ::org::apache::lucene::util::IntsRef & a1) const
          {
            return ::org::apache::lucene::util::IntsRef(env->callObjectMethod(this$, mids$[mid_add_2ca81420cf9c2992], a0.this$, a1.this$));
          }

          ::org::apache::lucene::util::IntsRef IntSequenceOutputs::common(const ::org::apache::lucene::util::IntsRef & a0, const ::org::apache::lucene::util::IntsRef & a1) const
          {
            return ::org::apache::lucene::util::IntsRef(env->callObjectMethod(this$, mids$[mid_common_2ca81420cf9c2992], a0.this$, a1.this$));
          }

          ::org::apache::lucene::util::IntsRef IntSequenceOutputs::getNoOutput() const
          {
            return ::org::apache::lucene::util::IntsRef(env->callObjectMethod(this$, mids$[mid_getNoOutput_ce9cdfb58d7a482b]));
          }

          IntSequenceOutputs IntSequenceOutputs::getSingleton()
          {
            jclass cls = env->getClass(initializeClass);
            return IntSequenceOutputs(env->callStaticObjectMethod(cls, mids$[mid_getSingleton_b08227a4e328fd88]));
          }

          ::java::lang::String IntSequenceOutputs::outputToString(const ::org::apache::lucene::util::IntsRef & a0) const
          {
            return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_outputToString_0d46b4764e42d8a1], a0.this$));
          }

          jlong IntSequenceOutputs::ramBytesUsed(const ::org::apache::lucene::util::IntsRef & a0) const
          {
            return env->callLongMethod(this$, mids$[mid_ramBytesUsed_29f8f8f429676c4c], a0.this$);
          }

          ::org::apache::lucene::util::IntsRef IntSequenceOutputs::read(const ::org::apache::lucene::store::DataInput & a0) const
          {
            return ::org::apache::lucene::util::IntsRef(env->callObjectMethod(this$, mids$[mid_read_026b8975d7228564], a0.this$));
          }

          void IntSequenceOutputs::skipOutput(const ::org::apache::lucene::store::DataInput & a0) const
          {
            env->callVoidMethod(this$, mids$[mid_skipOutput_be8da68faa81682c], a0.this$);
          }

          ::org::apache::lucene::util::IntsRef IntSequenceOutputs::subtract(const ::org::apache::lucene::util::IntsRef & a0, const ::org::apache::lucene::util::IntsRef & a1) const
          {
            return ::org::apache::lucene::util::IntsRef(env->callObjectMethod(this$, mids$[mid_subtract_2ca81420cf9c2992], a0.this$, a1.this$));
          }

          ::java::lang::String IntSequenceOutputs::toString() const
          {
            return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_db9b55ba01e03e4b]));
          }

          void IntSequenceOutputs::write(const ::org::apache::lucene::util::IntsRef & a0, const ::org::apache::lucene::store::DataOutput & a1) const
          {
            env->callVoidMethod(this$, mids$[mid_write_baf98e8590fd9407], a0.this$, a1.this$);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        namespace fst {
          static PyObject *t_IntSequenceOutputs_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_IntSequenceOutputs_instance_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_IntSequenceOutputs_of_(t_IntSequenceOutputs *self, PyObject *args);
          static PyObject *t_IntSequenceOutputs_add(t_IntSequenceOutputs *self, PyObject *args);
          static PyObject *t_IntSequenceOutputs_common(t_IntSequenceOutputs *self, PyObject *args);
          static PyObject *t_IntSequenceOutputs_getNoOutput(t_IntSequenceOutputs *self, PyObject *args);
          static PyObject *t_IntSequenceOutputs_getSingleton(PyTypeObject *type);
          static PyObject *t_IntSequenceOutputs_outputToString(t_IntSequenceOutputs *self, PyObject *args);
          static PyObject *t_IntSequenceOutputs_ramBytesUsed(t_IntSequenceOutputs *self, PyObject *args);
          static PyObject *t_IntSequenceOutputs_read(t_IntSequenceOutputs *self, PyObject *args);
          static PyObject *t_IntSequenceOutputs_skipOutput(t_IntSequenceOutputs *self, PyObject *args);
          static PyObject *t_IntSequenceOutputs_subtract(t_IntSequenceOutputs *self, PyObject *args);
          static PyObject *t_IntSequenceOutputs_toString(t_IntSequenceOutputs *self, PyObject *args);
          static PyObject *t_IntSequenceOutputs_write(t_IntSequenceOutputs *self, PyObject *args);
          static PyObject *t_IntSequenceOutputs_get__noOutput(t_IntSequenceOutputs *self, void *data);
          static PyObject *t_IntSequenceOutputs_get__singleton(t_IntSequenceOutputs *self, void *data);
          static PyObject *t_IntSequenceOutputs_get__parameters_(t_IntSequenceOutputs *self, void *data);
          static PyGetSetDef t_IntSequenceOutputs__fields_[] = {
            DECLARE_GET_FIELD(t_IntSequenceOutputs, noOutput),
            DECLARE_GET_FIELD(t_IntSequenceOutputs, singleton),
            DECLARE_GET_FIELD(t_IntSequenceOutputs, parameters_),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_IntSequenceOutputs__methods_[] = {
            DECLARE_METHOD(t_IntSequenceOutputs, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_IntSequenceOutputs, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_IntSequenceOutputs, of_, METH_VARARGS),
            DECLARE_METHOD(t_IntSequenceOutputs, add, METH_VARARGS),
            DECLARE_METHOD(t_IntSequenceOutputs, common, METH_VARARGS),
            DECLARE_METHOD(t_IntSequenceOutputs, getNoOutput, METH_VARARGS),
            DECLARE_METHOD(t_IntSequenceOutputs, getSingleton, METH_NOARGS | METH_CLASS),
            DECLARE_METHOD(t_IntSequenceOutputs, outputToString, METH_VARARGS),
            DECLARE_METHOD(t_IntSequenceOutputs, ramBytesUsed, METH_VARARGS),
            DECLARE_METHOD(t_IntSequenceOutputs, read, METH_VARARGS),
            DECLARE_METHOD(t_IntSequenceOutputs, skipOutput, METH_VARARGS),
            DECLARE_METHOD(t_IntSequenceOutputs, subtract, METH_VARARGS),
            DECLARE_METHOD(t_IntSequenceOutputs, toString, METH_VARARGS),
            DECLARE_METHOD(t_IntSequenceOutputs, write, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          static PyType_Slot PY_TYPE_SLOTS(IntSequenceOutputs)[] = {
            { Py_tp_methods, t_IntSequenceOutputs__methods_ },
            { Py_tp_init, (void *) abstract_init },
            { Py_tp_getset, t_IntSequenceOutputs__fields_ },
            { 0, NULL }
          };

          static PyType_Def *PY_TYPE_BASES(IntSequenceOutputs)[] = {
            &PY_TYPE_DEF(::org::apache::lucene::util::fst::Outputs),
            NULL
          };

          DEFINE_TYPE(IntSequenceOutputs, t_IntSequenceOutputs, IntSequenceOutputs);
          PyObject *t_IntSequenceOutputs::wrap_Object(const IntSequenceOutputs& object, PyTypeObject *p0)
          {
            PyObject *obj = t_IntSequenceOutputs::wrap_Object(object);
            if (obj != NULL && obj != Py_None)
            {
              t_IntSequenceOutputs *self = (t_IntSequenceOutputs *) obj;
              self->parameters[0] = p0;
            }
            return obj;
          }

          PyObject *t_IntSequenceOutputs::wrap_jobject(const jobject& object, PyTypeObject *p0)
          {
            PyObject *obj = t_IntSequenceOutputs::wrap_jobject(object);
            if (obj != NULL && obj != Py_None)
            {
              t_IntSequenceOutputs *self = (t_IntSequenceOutputs *) obj;
              self->parameters[0] = p0;
            }
            return obj;
          }

          void t_IntSequenceOutputs::install(PyObject *module)
          {
            installType(&PY_TYPE(IntSequenceOutputs), &PY_TYPE_DEF(IntSequenceOutputs), module, "IntSequenceOutputs", 0);
          }

          void t_IntSequenceOutputs::initialize(PyObject *module)
          {
            PyObject_SetAttrString((PyObject *) PY_TYPE(IntSequenceOutputs), "class_", make_descriptor(IntSequenceOutputs::initializeClass, 1));
            PyObject_SetAttrString((PyObject *) PY_TYPE(IntSequenceOutputs), "wrapfn_", make_descriptor(t_IntSequenceOutputs::wrap_jobject));
            PyObject_SetAttrString((PyObject *) PY_TYPE(IntSequenceOutputs), "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_IntSequenceOutputs_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, IntSequenceOutputs::initializeClass, 1)))
              return NULL;
            return t_IntSequenceOutputs::wrap_Object(IntSequenceOutputs(((t_IntSequenceOutputs *) arg)->object.this$));
          }
          static PyObject *t_IntSequenceOutputs_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, IntSequenceOutputs::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static PyObject *t_IntSequenceOutputs_of_(t_IntSequenceOutputs *self, PyObject *args)
          {
            if (!parseArg(args, "T", 1, &(self->parameters)))
              Py_RETURN_SELF;
            return PyErr_SetArgsError((PyObject *) self, "of_", args);
          }

          static PyObject *t_IntSequenceOutputs_add(t_IntSequenceOutputs *self, PyObject *args)
          {
            ::org::apache::lucene::util::IntsRef a0((jobject) NULL);
            ::org::apache::lucene::util::IntsRef a1((jobject) NULL);
            ::org::apache::lucene::util::IntsRef result((jobject) NULL);

            if (!parseArgs(args, "kk", ::org::apache::lucene::util::IntsRef::initializeClass, ::org::apache::lucene::util::IntsRef::initializeClass, &a0, &a1))
            {
              OBJ_CALL(result = self->object.add(a0, a1));
              return ::org::apache::lucene::util::t_IntsRef::wrap_Object(result);
            }

            return callSuper(PY_TYPE(IntSequenceOutputs), (PyObject *) self, "add", args, 2);
          }

          static PyObject *t_IntSequenceOutputs_common(t_IntSequenceOutputs *self, PyObject *args)
          {
            ::org::apache::lucene::util::IntsRef a0((jobject) NULL);
            ::org::apache::lucene::util::IntsRef a1((jobject) NULL);
            ::org::apache::lucene::util::IntsRef result((jobject) NULL);

            if (!parseArgs(args, "kk", ::org::apache::lucene::util::IntsRef::initializeClass, ::org::apache::lucene::util::IntsRef::initializeClass, &a0, &a1))
            {
              OBJ_CALL(result = self->object.common(a0, a1));
              return ::org::apache::lucene::util::t_IntsRef::wrap_Object(result);
            }

            return callSuper(PY_TYPE(IntSequenceOutputs), (PyObject *) self, "common", args, 2);
          }

          static PyObject *t_IntSequenceOutputs_getNoOutput(t_IntSequenceOutputs *self, PyObject *args)
          {
            ::org::apache::lucene::util::IntsRef result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.getNoOutput());
              return ::org::apache::lucene::util::t_IntsRef::wrap_Object(result);
            }

            return callSuper(PY_TYPE(IntSequenceOutputs), (PyObject *) self, "getNoOutput", args, 2);
          }

          static PyObject *t_IntSequenceOutputs_getSingleton(PyTypeObject *type)
          {
            IntSequenceOutputs result((jobject) NULL);
            OBJ_CALL(result = ::org::apache::lucene::util::fst::IntSequenceOutputs::getSingleton());
            return t_IntSequenceOutputs::wrap_Object(result);
          }

          static PyObject *t_IntSequenceOutputs_outputToString(t_IntSequenceOutputs *self, PyObject *args)
          {
            ::org::apache::lucene::util::IntsRef a0((jobject) NULL);
            ::java::lang::String result((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::util::IntsRef::initializeClass, &a0))
            {
              OBJ_CALL(result = self->object.outputToString(a0));
              return j2p(result);
            }

            return callSuper(PY_TYPE(IntSequenceOutputs), (PyObject *) self, "outputToString", args, 2);
          }

          static PyObject *t_IntSequenceOutputs_ramBytesUsed(t_IntSequenceOutputs *self, PyObject *args)
          {
            ::org::apache::lucene::util::IntsRef a0((jobject) NULL);
            jlong result;

            if (!parseArgs(args, "k", ::org::apache::lucene::util::IntsRef::initializeClass, &a0))
            {
              OBJ_CALL(result = self->object.ramBytesUsed(a0));
              return PyLong_FromLongLong((PY_LONG_LONG) result);
            }

            return callSuper(PY_TYPE(IntSequenceOutputs), (PyObject *) self, "ramBytesUsed", args, 2);
          }

          static PyObject *t_IntSequenceOutputs_read(t_IntSequenceOutputs *self, PyObject *args)
          {
            ::org::apache::lucene::store::DataInput a0((jobject) NULL);
            ::org::apache::lucene::util::IntsRef result((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::store::DataInput::initializeClass, &a0))
            {
              OBJ_CALL(result = self->object.read(a0));
              return ::org::apache::lucene::util::t_IntsRef::wrap_Object(result);
            }

            return callSuper(PY_TYPE(IntSequenceOutputs), (PyObject *) self, "read", args, 2);
          }

          static PyObject *t_IntSequenceOutputs_skipOutput(t_IntSequenceOutputs *self, PyObject *args)
          {
            ::org::apache::lucene::store::DataInput a0((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::store::DataInput::initializeClass, &a0))
            {
              OBJ_CALL(self->object.skipOutput(a0));
              Py_RETURN_NONE;
            }

            return callSuper(PY_TYPE(IntSequenceOutputs), (PyObject *) self, "skipOutput", args, 2);
          }

          static PyObject *t_IntSequenceOutputs_subtract(t_IntSequenceOutputs *self, PyObject *args)
          {
            ::org::apache::lucene::util::IntsRef a0((jobject) NULL);
            ::org::apache::lucene::util::IntsRef a1((jobject) NULL);
            ::org::apache::lucene::util::IntsRef result((jobject) NULL);

            if (!parseArgs(args, "kk", ::org::apache::lucene::util::IntsRef::initializeClass, ::org::apache::lucene::util::IntsRef::initializeClass, &a0, &a1))
            {
              OBJ_CALL(result = self->object.subtract(a0, a1));
              return ::org::apache::lucene::util::t_IntsRef::wrap_Object(result);
            }

            return callSuper(PY_TYPE(IntSequenceOutputs), (PyObject *) self, "subtract", args, 2);
          }

          static PyObject *t_IntSequenceOutputs_toString(t_IntSequenceOutputs *self, PyObject *args)
          {
            ::java::lang::String result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.toString());
              return j2p(result);
            }

            return callSuper(PY_TYPE(IntSequenceOutputs), (PyObject *) self, "toString", args, 2);
          }

          static PyObject *t_IntSequenceOutputs_write(t_IntSequenceOutputs *self, PyObject *args)
          {
            ::org::apache::lucene::util::IntsRef a0((jobject) NULL);
            ::org::apache::lucene::store::DataOutput a1((jobject) NULL);

            if (!parseArgs(args, "kk", ::org::apache::lucene::util::IntsRef::initializeClass, ::org::apache::lucene::store::DataOutput::initializeClass, &a0, &a1))
            {
              OBJ_CALL(self->object.write(a0, a1));
              Py_RETURN_NONE;
            }

            return callSuper(PY_TYPE(IntSequenceOutputs), (PyObject *) self, "write", args, 2);
          }
          static PyObject *t_IntSequenceOutputs_get__parameters_(t_IntSequenceOutputs *self, void *data)
          {
            return typeParameters(self->parameters, sizeof(self->parameters));
          }

          static PyObject *t_IntSequenceOutputs_get__noOutput(t_IntSequenceOutputs *self, void *data)
          {
            ::org::apache::lucene::util::IntsRef value((jobject) NULL);
            OBJ_CALL(value = self->object.getNoOutput());
            return ::org::apache::lucene::util::t_IntsRef::wrap_Object(value);
          }

          static PyObject *t_IntSequenceOutputs_get__singleton(t_IntSequenceOutputs *self, void *data)
          {
            IntSequenceOutputs value((jobject) NULL);
            OBJ_CALL(value = self->object.getSingleton());
            return t_IntSequenceOutputs::wrap_Object(value);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/codecs/blockterms/VariableGapTermsIndexReader.h"
#include "java/util/Collection.h"
#include "org/apache/lucene/util/Accountable.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/index/SegmentReadState.h"
#include "java/lang/String.h"
#include "org/apache/lucene/index/FieldInfo.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/codecs/blockterms/TermsIndexReaderBase$FieldIndexEnum.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace codecs {
        namespace blockterms {

          ::java::lang::Class *VariableGapTermsIndexReader::class$ = NULL;
          jmethodID *VariableGapTermsIndexReader::mids$ = NULL;
          bool VariableGapTermsIndexReader::live$ = false;

          jclass VariableGapTermsIndexReader::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/codecs/blockterms/VariableGapTermsIndexReader");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_363fedc32cc1a1cf] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/index/SegmentReadState;)V");
              mids$[mid_close_f2cc1bce94666404] = env->getMethodID(cls, "close", "()V");
              mids$[mid_getChildResources_d4dfbf7a26ff41df] = env->getMethodID(cls, "getChildResources", "()Ljava/util/Collection;");
              mids$[mid_getFieldEnum_545426ea5d9b0f76] = env->getMethodID(cls, "getFieldEnum", "(Lorg/apache/lucene/index/FieldInfo;)Lorg/apache/lucene/codecs/blockterms/TermsIndexReaderBase$FieldIndexEnum;");
              mids$[mid_ramBytesUsed_2e5ae9edcb9b072f] = env->getMethodID(cls, "ramBytesUsed", "()J");
              mids$[mid_supportsOrd_8454bd5aa23fd11e] = env->getMethodID(cls, "supportsOrd", "()Z");
              mids$[mid_toString_db9b55ba01e03e4b] = env->getMethodID(cls, "toString", "()Ljava/lang/String;");

              class$ = new ::java::lang::Class(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          VariableGapTermsIndexReader::VariableGapTermsIndexReader(const ::org::apache::lucene::index::SegmentReadState & a0) : ::org::apache::lucene::codecs::blockterms::TermsIndexReaderBase(env->newObject(initializeClass, &mids$, mid_init$_363fedc32cc1a1cf, a0.this$)) {}

          void VariableGapTermsIndexReader::close() const
          {
            env->callVoidMethod(this$, mids$[mid_close_f2cc1bce94666404]);
          }

          ::java::util::Collection VariableGapTermsIndexReader::getChildResources() const
          {
            return ::java::util::Collection(env->callObjectMethod(this$, mids$[mid_getChildResources_d4dfbf7a26ff41df]));
          }

          ::org::apache::lucene::codecs::blockterms::TermsIndexReaderBase$FieldIndexEnum VariableGapTermsIndexReader::getFieldEnum(const ::org::apache::lucene::index::FieldInfo & a0) const
          {
            return ::org::apache::lucene::codecs::blockterms::TermsIndexReaderBase$FieldIndexEnum(env->callObjectMethod(this$, mids$[mid_getFieldEnum_545426ea5d9b0f76], a0.this$));
          }

          jlong VariableGapTermsIndexReader::ramBytesUsed() const
          {
            return env->callLongMethod(this$, mids$[mid_ramBytesUsed_2e5ae9edcb9b072f]);
          }

          jboolean VariableGapTermsIndexReader::supportsOrd() const
          {
            return env->callBooleanMethod(this$, mids$[mid_supportsOrd_8454bd5aa23fd11e]);
          }

          ::java::lang::String VariableGapTermsIndexReader::toString() const
          {
            return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_db9b55ba01e03e4b]));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace codecs {
        namespace blockterms {
          static PyObject *t_VariableGapTermsIndexReader_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_VariableGapTermsIndexReader_instance_(PyTypeObject *type, PyObject *arg);
          static int t_VariableGapTermsIndexReader_init_(t_VariableGapTermsIndexReader *self, PyObject *args, PyObject *kwds);
          static PyObject *t_VariableGapTermsIndexReader_close(t_VariableGapTermsIndexReader *self, PyObject *args);
          static PyObject *t_VariableGapTermsIndexReader_getChildResources(t_VariableGapTermsIndexReader *self, PyObject *args);
          static PyObject *t_VariableGapTermsIndexReader_getFieldEnum(t_VariableGapTermsIndexReader *self, PyObject *args);
          static PyObject *t_VariableGapTermsIndexReader_ramBytesUsed(t_VariableGapTermsIndexReader *self, PyObject *args);
          static PyObject *t_VariableGapTermsIndexReader_supportsOrd(t_VariableGapTermsIndexReader *self, PyObject *args);
          static PyObject *t_VariableGapTermsIndexReader_toString(t_VariableGapTermsIndexReader *self, PyObject *args);
          static PyObject *t_VariableGapTermsIndexReader_get__childResources(t_VariableGapTermsIndexReader *self, void *data);
          static PyGetSetDef t_VariableGapTermsIndexReader__fields_[] = {
            DECLARE_GET_FIELD(t_VariableGapTermsIndexReader, childResources),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_VariableGapTermsIndexReader__methods_[] = {
            DECLARE_METHOD(t_VariableGapTermsIndexReader, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_VariableGapTermsIndexReader, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_VariableGapTermsIndexReader, close, METH_VARARGS),
            DECLARE_METHOD(t_VariableGapTermsIndexReader, getChildResources, METH_VARARGS),
            DECLARE_METHOD(t_VariableGapTermsIndexReader, getFieldEnum, METH_VARARGS),
            DECLARE_METHOD(t_VariableGapTermsIndexReader, ramBytesUsed, METH_VARARGS),
            DECLARE_METHOD(t_VariableGapTermsIndexReader, supportsOrd, METH_VARARGS),
            DECLARE_METHOD(t_VariableGapTermsIndexReader, toString, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          static PyType_Slot PY_TYPE_SLOTS(VariableGapTermsIndexReader)[] = {
            { Py_tp_methods, t_VariableGapTermsIndexReader__methods_ },
            { Py_tp_init, (void *) t_VariableGapTermsIndexReader_init_ },
            { Py_tp_getset, t_VariableGapTermsIndexReader__fields_ },
            { 0, NULL }
          };

          static PyType_Def *PY_TYPE_BASES(VariableGapTermsIndexReader)[] = {
            &PY_TYPE_DEF(::org::apache::lucene::codecs::blockterms::TermsIndexReaderBase),
            NULL
          };

          DEFINE_TYPE(VariableGapTermsIndexReader, t_VariableGapTermsIndexReader, VariableGapTermsIndexReader);

          void t_VariableGapTermsIndexReader::install(PyObject *module)
          {
            installType(&PY_TYPE(VariableGapTermsIndexReader), &PY_TYPE_DEF(VariableGapTermsIndexReader), module, "VariableGapTermsIndexReader", 0);
          }

          void t_VariableGapTermsIndexReader::initialize(PyObject *module)
          {
            PyObject_SetAttrString((PyObject *) PY_TYPE(VariableGapTermsIndexReader), "class_", make_descriptor(VariableGapTermsIndexReader::initializeClass, 1));
            PyObject_SetAttrString((PyObject *) PY_TYPE(VariableGapTermsIndexReader), "wrapfn_", make_descriptor(t_VariableGapTermsIndexReader::wrap_jobject));
            PyObject_SetAttrString((PyObject *) PY_TYPE(VariableGapTermsIndexReader), "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_VariableGapTermsIndexReader_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, VariableGapTermsIndexReader::initializeClass, 1)))
              return NULL;
            return t_VariableGapTermsIndexReader::wrap_Object(VariableGapTermsIndexReader(((t_VariableGapTermsIndexReader *) arg)->object.this$));
          }
          static PyObject *t_VariableGapTermsIndexReader_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, VariableGapTermsIndexReader::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_VariableGapTermsIndexReader_init_(t_VariableGapTermsIndexReader *self, PyObject *args, PyObject *kwds)
          {
            ::org::apache::lucene::index::SegmentReadState a0((jobject) NULL);
            VariableGapTermsIndexReader object((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::index::SegmentReadState::initializeClass, &a0))
            {
              INT_CALL(object = VariableGapTermsIndexReader(a0));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_VariableGapTermsIndexReader_close(t_VariableGapTermsIndexReader *self, PyObject *args)
          {

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(self->object.close());
              Py_RETURN_NONE;
            }

            return callSuper(PY_TYPE(VariableGapTermsIndexReader), (PyObject *) self, "close", args, 2);
          }

          static PyObject *t_VariableGapTermsIndexReader_getChildResources(t_VariableGapTermsIndexReader *self, PyObject *args)
          {
            ::java::util::Collection result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.getChildResources());
              return ::java::util::t_Collection::wrap_Object(result, ::org::apache::lucene::util::PY_TYPE(Accountable));
            }

            return callSuper(PY_TYPE(VariableGapTermsIndexReader), (PyObject *) self, "getChildResources", args, 2);
          }

          static PyObject *t_VariableGapTermsIndexReader_getFieldEnum(t_VariableGapTermsIndexReader *self, PyObject *args)
          {
            ::org::apache::lucene::index::FieldInfo a0((jobject) NULL);
            ::org::apache::lucene::codecs::blockterms::TermsIndexReaderBase$FieldIndexEnum result((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::index::FieldInfo::initializeClass, &a0))
            {
              OBJ_CALL(result = self->object.getFieldEnum(a0));
              return ::org::apache::lucene::codecs::blockterms::t_TermsIndexReaderBase$FieldIndexEnum::wrap_Object(result);
            }

            return callSuper(PY_TYPE(VariableGapTermsIndexReader), (PyObject *) self, "getFieldEnum", args, 2);
          }

          static PyObject *t_VariableGapTermsIndexReader_ramBytesUsed(t_VariableGapTermsIndexReader *self, PyObject *args)
          {
            jlong result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.ramBytesUsed());
              return PyLong_FromLongLong((PY_LONG_LONG) result);
            }

            return callSuper(PY_TYPE(VariableGapTermsIndexReader), (PyObject *) self, "ramBytesUsed", args, 2);
          }

          static PyObject *t_VariableGapTermsIndexReader_supportsOrd(t_VariableGapTermsIndexReader *self, PyObject *args)
          {
            jboolean result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.supportsOrd());
              Py_RETURN_BOOL(result);
            }

            return callSuper(PY_TYPE(VariableGapTermsIndexReader), (PyObject *) self, "supportsOrd", args, 2);
          }

          static PyObject *t_VariableGapTermsIndexReader_toString(t_VariableGapTermsIndexReader *self, PyObject *args)
          {
            ::java::lang::String result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.toString());
              return j2p(result);
            }

            return callSuper(PY_TYPE(VariableGapTermsIndexReader), (PyObject *) self, "toString", args, 2);
          }

          static PyObject *t_VariableGapTermsIndexReader_get__childResources(t_VariableGapTermsIndexReader *self, void *data)
          {
            ::java::util::Collection value((jobject) NULL);
            OBJ_CALL(value = self->object.getChildResources());
            return ::java::util::t_Collection::wrap_Object(value);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/document/Field.h"
#include "java/lang/Number.h"
#include "org/apache/lucene/index/IndexableField.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/analysis/Analyzer.h"
#include "org/apache/lucene/analysis/TokenStream.h"
#include "org/apache/lucene/util/BytesRef.h"
#include "java/lang/String.h"
#include "org/apache/lucene/index/IndexableFieldType.h"
#include "java/io/Reader.h"
#include "java/lang/CharSequence.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace document {

        ::java::lang::Class *Field::class$ = NULL;
        jmethodID *Field::mids$ = NULL;
        bool Field::live$ = false;

        jclass Field::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/document/Field");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_4c8720e1ef1dbc95] = env->getMethodID(cls, "<init>", "(Ljava/lang/String;Lorg/apache/lucene/analysis/TokenStream;Lorg/apache/lucene/index/IndexableFieldType;)V");
            mids$[mid_init$_46c2686701f65efb] = env->getMethodID(cls, "<init>", "(Ljava/lang/String;[BLorg/apache/lucene/index/IndexableFieldType;)V");
            mids$[mid_init$_e10586ac8ba012a6] = env->getMethodID(cls, "<init>", "(Ljava/lang/String;Ljava/io/Reader;Lorg/apache/lucene/index/IndexableFieldType;)V");
            mids$[mid_init$_9a31c991af7e77cf] = env->getMethodID(cls, "<init>", "(Ljava/lang/String;Lorg/apache/lucene/util/BytesRef;Lorg/apache/lucene/index/IndexableFieldType;)V");
            mids$[mid_init$_f559723a5f833138] = env->getMethodID(cls, "<init>", "(Ljava/lang/String;Ljava/lang/CharSequence;Lorg/apache/lucene/index/IndexableFieldType;)V");
            mids$[mid_init$_c49d824946c10069] = env->getMethodID(cls, "<init>", "(Ljava/lang/String;[BIILorg/apache/lucene/index/IndexableFieldType;)V");
            mids$[mid_binaryValue_7af2ea2e37ce82b8] = env->getMethodID(cls, "binaryValue", "()Lorg/apache/lucene/util/BytesRef;");
            mids$[mid_fieldType_d8965a563fa0c725] = env->getMethodID(cls, "fieldType", "()Lorg/apache/lucene/index/IndexableFieldType;");
            mids$[mid_getCharSequenceValue_ba44900ab7d793b9] = env->getMethodID(cls, "getCharSequenceValue", "()Ljava/lang/CharSequence;");
            mids$[mid_name_db9b55ba01e03e4b] = env->getMethodID(cls, "name", "()Ljava/lang/String;");
            mids$[mid_numericValue_f5813404cc5e3a1e] = env->getMethodID(cls, "numericValue", "()Ljava/lang/Number;");
            mids$[mid_readerValue_cad8e490f39649d8] = env->getMethodID(cls, "readerValue", "()Ljava/io/Reader;");
            mids$[mid_setByteValue_9c36fec3bac1d0c7] = env->getMethodID(cls, "setByteValue", "(B)V");
            mids$[mid_setBytesValue_9ffdf271836656c4] = env->getMethodID(cls, "setBytesValue", "([B)V");
            mids$[mid_setBytesValue_0bdfd2603b7490a8] = env->getMethodID(cls, "setBytesValue", "(Lorg/apache/lucene/util/BytesRef;)V");
            mids$[mid_setDoubleValue_3c435f10a3b1e038] = env->getMethodID(cls, "setDoubleValue", "(D)V");
            mids$[mid_setFloatValue_8e1d952dd65cdc3a] = env->getMethodID(cls, "setFloatValue", "(F)V");
            mids$[mid_setIntValue_040c4cd0390c5aff] = env->getMethodID(cls, "setIntValue", "(I)V");
            mids$[mid_setLongValue_9c778c9bce6694df] = env->getMethodID(cls, "setLongValue", "(J)V");
            mids$[mid_setReaderValue_b2f3c57f5e6eb3f2] = env->getMethodID(cls, "setReaderValue", "(Ljava/io/Reader;)V");
            mids$[mid_setShortValue_265bc0a0a1840315] = env->getMethodID(cls, "setShortValue", "(S)V");
            mids$[mid_setStringValue_9fd2eb66a64e6f0f] = env->getMethodID(cls, "setStringValue", "(Ljava/lang/String;)V");
            mids$[mid_setTokenStream_c26756868a754f4e] = env->getMethodID(cls, "setTokenStream", "(Lorg/apache/lucene/analysis/TokenStream;)V");
            mids$[mid_stringValue_db9b55ba01e03e4b] = env->getMethodID(cls, "stringValue", "()Ljava/lang/String;");
            mids$[mid_toString_db9b55ba01e03e4b] = env->getMethodID(cls, "toString", "()Ljava/lang/String;");
            mids$[mid_tokenStream_c1cd9ee6ce43641f] = env->getMethodID(cls, "tokenStream", "(Lorg/apache/lucene/analysis/Analyzer;Lorg/apache/lucene/analysis/TokenStream;)Lorg/apache/lucene/analysis/TokenStream;");
            mids$[mid_tokenStreamValue_53a594dacf37f73d] = env->getMethodID(cls, "tokenStreamValue", "()Lorg/apache/lucene/analysis/TokenStream;");

            class$ = new ::java::lang::Class(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        Field::Field(const ::java::lang::String & a0, const ::org::apache::lucene::analysis::TokenStream & a1, const ::org::apache::lucene::index::IndexableFieldType & a2) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_4c8720e1ef1dbc95, a0.this$, a1.this$, a2.this$)) {}

        Field::Field(const ::java::lang::String & a0, const JArray< jbyte > & a1, const ::org::apache::lucene::index::IndexableFieldType & a2) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_46c2686701f65efb, a0.this$, a1.this$, a2.this$)) {}

        Field::Field(const ::java::lang::String & a0, const ::java::io::Reader & a1, const ::org::apache::lucene::index::IndexableFieldType & a2) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_e10586ac8ba012a6, a0.this$, a1.this$, a2.this$)) {}

        Field::Field(const ::java::lang::String & a0, const ::org::apache::lucene::util::BytesRef & a1, const ::org::apache::lucene::index::IndexableFieldType & a2) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_9a31c991af7e77cf, a0.this$, a1.this$, a2.this$)) {}

        Field::Field(const ::java::lang::String & a0, const ::java::lang::CharSequence & a1, const ::org::apache::lucene::index::IndexableFieldType & a2) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_f559723a5f833138, a0.this$, a1.this$, a2.this$)) {}

        Field::Field(const ::java::lang::String & a0, const JArray< jbyte > & a1, jint a2, jint a3, const ::org::apache::lucene::index::IndexableFieldType & a4) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_c49d824946c10069, a0.this$, a1.this$, a2, a3, a4.this$)) {}

        ::org::apache::lucene::util::BytesRef Field::binaryValue() const
        {
          return ::org::apache::lucene::util::BytesRef(env->callObjectMethod(this$, mids$[mid_binaryValue_7af2ea2e37ce82b8]));
        }

        ::org::apache::lucene::index::IndexableFieldType Field::fieldType() const
        {
          return ::org::apache::lucene::index::IndexableFieldType(env->callObjectMethod(this$, mids$[mid_fieldType_d8965a563fa0c725]));
        }

        ::java::lang::CharSequence Field::getCharSequenceValue() const
        {
          return ::java::lang::CharSequence(env->callObjectMethod(this$, mids$[mid_getCharSequenceValue_ba44900ab7d793b9]));
        }

        ::java::lang::String Field::name() const
        {
          return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_name_db9b55ba01e03e4b]));
        }

        ::java::lang::Number Field::numericValue() const
        {
          return ::java::lang::Number(env->callObjectMethod(this$, mids$[mid_numericValue_f5813404cc5e3a1e]));
        }

        ::java::io::Reader Field::readerValue() const
        {
          return ::java::io::Reader(env->callObjectMethod(this$, mids$[mid_readerValue_cad8e490f39649d8]));
        }

        void Field::setByteValue(jbyte a0) const
        {
          env->callVoidMethod(this$, mids$[mid_setByteValue_9c36fec3bac1d0c7], a0);
        }

        void Field::setBytesValue(const JArray< jbyte > & a0) const
        {
          env->callVoidMethod(this$, mids$[mid_setBytesValue_9ffdf271836656c4], a0.this$);
        }

        void Field::setBytesValue(const ::org::apache::lucene::util::BytesRef & a0) const
        {
          env->callVoidMethod(this$, mids$[mid_setBytesValue_0bdfd2603b7490a8], a0.this$);
        }

        void Field::setDoubleValue(jdouble a0) const
        {
          env->callVoidMethod(this$, mids$[mid_setDoubleValue_3c435f10a3b1e038], a0);
        }

        void Field::setFloatValue(jfloat a0) const
        {
          env->callVoidMethod(this$, mids$[mid_setFloatValue_8e1d952dd65cdc3a], a0);
        }

        void Field::setIntValue(jint a0) const
        {
          env->callVoidMethod(this$, mids$[mid_setIntValue_040c4cd0390c5aff], a0);
        }

        void Field::setLongValue(jlong a0) const
        {
          env->callVoidMethod(this$, mids$[mid_setLongValue_9c778c9bce6694df], a0);
        }

        void Field::setReaderValue(const ::java::io::Reader & a0) const
        {
          env->callVoidMethod(this$, mids$[mid_setReaderValue_b2f3c57f5e6eb3f2], a0.this$);
        }

        void Field::setShortValue(jshort a0) const
        {
          env->callVoidMethod(this$, mids$[mid_setShortValue_265bc0a0a1840315], a0);
        }

        void Field::setStringValue(const ::java::lang::String & a0) const
        {
          env->callVoidMethod(this$, mids$[mid_setStringValue_9fd2eb66a64e6f0f], a0.this$);
        }

        void Field::setTokenStream(const ::org::apache::lucene::analysis::TokenStream & a0) const
        {
          env->callVoidMethod(this$, mids$[mid_setTokenStream_c26756868a754f4e], a0.this$);
        }

        ::java::lang::String Field::stringValue() const
        {
          return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_stringValue_db9b55ba01e03e4b]));
        }

        ::java::lang::String Field::toString() const
        {
          return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_db9b55ba01e03e4b]));
        }

        ::org::apache::lucene::analysis::TokenStream Field::tokenStream(const ::org::apache::lucene::analysis::Analyzer & a0, const ::org::apache::lucene::analysis::TokenStream & a1) const
        {
          return ::org::apache::lucene::analysis::TokenStream(env->callObjectMethod(this$, mids$[mid_tokenStream_c1cd9ee6ce43641f], a0.this$, a1.this$));
        }

        ::org::apache::lucene::analysis::TokenStream Field::tokenStreamValue() const
        {
          return ::org::apache::lucene::analysis::TokenStream(env->callObjectMethod(this$, mids$[mid_tokenStreamValue_53a594dacf37f73d]));
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"
#include "org/apache/lucene/document/Field$Store.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace document {
        static PyObject *t_Field_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_Field_instance_(PyTypeObject *type, PyObject *arg);
        static int t_Field_init_(t_Field *self, PyObject *args, PyObject *kwds);
        static PyObject *t_Field_binaryValue(t_Field *self);
        static PyObject *t_Field_fieldType(t_Field *self);
        static PyObject *t_Field_getCharSequenceValue(t_Field *self);
        static PyObject *t_Field_name(t_Field *self);
        static PyObject *t_Field_numericValue(t_Field *self);
        static PyObject *t_Field_readerValue(t_Field *self);
        static PyObject *t_Field_setByteValue(t_Field *self, PyObject *arg);
        static PyObject *t_Field_setBytesValue(t_Field *self, PyObject *args);
        static PyObject *t_Field_setDoubleValue(t_Field *self, PyObject *arg);
        static PyObject *t_Field_setFloatValue(t_Field *self, PyObject *arg);
        static PyObject *t_Field_setIntValue(t_Field *self, PyObject *arg);
        static PyObject *t_Field_setLongValue(t_Field *self, PyObject *arg);
        static PyObject *t_Field_setReaderValue(t_Field *self, PyObject *arg);
        static PyObject *t_Field_setShortValue(t_Field *self, PyObject *arg);
        static PyObject *t_Field_setStringValue(t_Field *self, PyObject *arg);
        static PyObject *t_Field_setTokenStream(t_Field *self, PyObject *arg);
        static PyObject *t_Field_stringValue(t_Field *self);
        static PyObject *t_Field_toString(t_Field *self, PyObject *args);
        static PyObject *t_Field_tokenStream(t_Field *self, PyObject *args);
        static PyObject *t_Field_tokenStreamValue(t_Field *self);
        static int t_Field_set__byteValue(t_Field *self, PyObject *arg, void *data);
        static int t_Field_set__bytesValue(t_Field *self, PyObject *arg, void *data);
        static PyObject *t_Field_get__charSequenceValue(t_Field *self, void *data);
        static int t_Field_set__doubleValue(t_Field *self, PyObject *arg, void *data);
        static int t_Field_set__floatValue(t_Field *self, PyObject *arg, void *data);
        static int t_Field_set__intValue(t_Field *self, PyObject *arg, void *data);
        static int t_Field_set__longValue(t_Field *self, PyObject *arg, void *data);
        static int t_Field_set__shortValue(t_Field *self, PyObject *arg, void *data);
        static PyGetSetDef t_Field__fields_[] = {
          DECLARE_SET_FIELD(t_Field, byteValue),
          DECLARE_SET_FIELD(t_Field, bytesValue),
          DECLARE_GET_FIELD(t_Field, charSequenceValue),
          DECLARE_SET_FIELD(t_Field, doubleValue),
          DECLARE_SET_FIELD(t_Field, floatValue),
          DECLARE_SET_FIELD(t_Field, intValue),
          DECLARE_SET_FIELD(t_Field, longValue),
          DECLARE_SET_FIELD(t_Field, shortValue),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_Field__methods_[] = {
          DECLARE_METHOD(t_Field, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_Field, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_Field, binaryValue, METH_NOARGS),
          DECLARE_METHOD(t_Field, fieldType, METH_NOARGS),
          DECLARE_METHOD(t_Field, getCharSequenceValue, METH_NOARGS),
          DECLARE_METHOD(t_Field, name, METH_NOARGS),
          DECLARE_METHOD(t_Field, numericValue, METH_NOARGS),
          DECLARE_METHOD(t_Field, readerValue, METH_NOARGS),
          DECLARE_METHOD(t_Field, setByteValue, METH_O),
          DECLARE_METHOD(t_Field, setBytesValue, METH_VARARGS),
          DECLARE_METHOD(t_Field, setDoubleValue, METH_O),
          DECLARE_METHOD(t_Field, setFloatValue, METH_O),
          DECLARE_METHOD(t_Field, setIntValue, METH_O),
          DECLARE_METHOD(t_Field, setLongValue, METH_O),
          DECLARE_METHOD(t_Field, setReaderValue, METH_O),
          DECLARE_METHOD(t_Field, setShortValue, METH_O),
          DECLARE_METHOD(t_Field, setStringValue, METH_O),
          DECLARE_METHOD(t_Field, setTokenStream, METH_O),
          DECLARE_METHOD(t_Field, stringValue, METH_NOARGS),
          DECLARE_METHOD(t_Field, toString, METH_VARARGS),
          DECLARE_METHOD(t_Field, tokenStream, METH_VARARGS),
          DECLARE_METHOD(t_Field, tokenStreamValue, METH_NOARGS),
          { NULL, NULL, 0, NULL }
        };

        static PyType_Slot PY_TYPE_SLOTS(Field)[] = {
          { Py_tp_methods, t_Field__methods_ },
          { Py_tp_init, (void *) t_Field_init_ },
          { Py_tp_getset, t_Field__fields_ },
          { 0, NULL }
        };

        static PyType_Def *PY_TYPE_BASES(Field)[] = {
          &PY_TYPE_DEF(::java::lang::Object),
          NULL
        };

        DEFINE_TYPE(Field, t_Field, Field);

        void t_Field::install(PyObject *module)
        {
          installType(&PY_TYPE(Field), &PY_TYPE_DEF(Field), module, "Field", 0);
          PyObject_SetAttrString((PyObject *) PY_TYPE(Field), "Store", make_descriptor(&PY_TYPE_DEF(Field$Store)));
        }

        void t_Field::initialize(PyObject *module)
        {
          PyObject_SetAttrString((PyObject *) PY_TYPE(Field), "class_", make_descriptor(Field::initializeClass, 1));
          PyObject_SetAttrString((PyObject *) PY_TYPE(Field), "wrapfn_", make_descriptor(t_Field::wrap_jobject));
          PyObject_SetAttrString((PyObject *) PY_TYPE(Field), "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_Field_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, Field::initializeClass, 1)))
            return NULL;
          return t_Field::wrap_Object(Field(((t_Field *) arg)->object.this$));
        }
        static PyObject *t_Field_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, Field::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_Field_init_(t_Field *self, PyObject *args, PyObject *kwds)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 3:
            {
              ::java::lang::String a0((jobject) NULL);
              ::org::apache::lucene::analysis::TokenStream a1((jobject) NULL);
              ::org::apache::lucene::index::IndexableFieldType a2((jobject) NULL);
              Field object((jobject) NULL);

              if (!parseArgs(args, "skk", ::org::apache::lucene::analysis::TokenStream::initializeClass, ::org::apache::lucene::index::IndexableFieldType::initializeClass, &a0, &a1, &a2))
              {
                INT_CALL(object = Field(a0, a1, a2));
                self->object = object;
                break;
              }
            }
            {
              ::java::lang::String a0((jobject) NULL);
              JArray< jbyte > a1((jobject) NULL);
              ::org::apache::lucene::index::IndexableFieldType a2((jobject) NULL);
              Field object((jobject) NULL);

              if (!parseArgs(args, "s[Bk", ::org::apache::lucene::index::IndexableFieldType::initializeClass, &a0, &a1, &a2))
              {
                INT_CALL(object = Field(a0, a1, a2));
                self->object = object;
                break;
              }
            }
            {
              ::java::lang::String a0((jobject) NULL);
              ::java::io::Reader a1((jobject) NULL);
              ::org::apache::lucene::index::IndexableFieldType a2((jobject) NULL);
              Field object((jobject) NULL);

              if (!parseArgs(args, "skk", ::java::io::Reader::initializeClass, ::org::apache::lucene::index::IndexableFieldType::initializeClass, &a0, &a1, &a2))
              {
                INT_CALL(object = Field(a0, a1, a2));
                self->object = object;
                break;
              }
            }
            {
              ::java::lang::String a0((jobject) NULL);
              ::org::apache::lucene::util::BytesRef a1((jobject) NULL);
              ::org::apache::lucene::index::IndexableFieldType a2((jobject) NULL);
              Field object((jobject) NULL);

              if (!parseArgs(args, "skk", ::org::apache::lucene::util::BytesRef::initializeClass, ::org::apache::lucene::index::IndexableFieldType::initializeClass, &a0, &a1, &a2))
              {
                INT_CALL(object = Field(a0, a1, a2));
                self->object = object;
                break;
              }
            }
            {
              ::java::lang::String a0((jobject) NULL);
              ::java::lang::CharSequence a1((jobject) NULL);
              ::org::apache::lucene::index::IndexableFieldType a2((jobject) NULL);
              Field object((jobject) NULL);

              if (!parseArgs(args, "sOk", ::java::lang::PY_TYPE(CharSequence), ::org::apache::lucene::index::IndexableFieldType::initializeClass, &a0, &a1, &a2))
              {
                INT_CALL(object = Field(a0, a1, a2));
                self->object = object;
                break;
              }
            }
            goto err;
           case 5:
            {
              ::java::lang::String a0((jobject) NULL);
              JArray< jbyte > a1((jobject) NULL);
              jint a2;
              jint a3;
              ::org::apache::lucene::index::IndexableFieldType a4((jobject) NULL);
              Field object((jobject) NULL);

              if (!parseArgs(args, "s[BIIk", ::org::apache::lucene::index::IndexableFieldType::initializeClass, &a0, &a1, &a2, &a3, &a4))
              {
                INT_CALL(object = Field(a0, a1, a2, a3, a4));
                self->object = object;
                break;
              }
            }
           default:
           err:
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }

        static PyObject *t_Field_binaryValue(t_Field *self)
        {
          ::org::apache::lucene::util::BytesRef result((jobject) NULL);
          OBJ_CALL(result = self->object.binaryValue());
          return ::org::apache::lucene::util::t_BytesRef::wrap_Object(result);
        }

        static PyObject *t_Field_fieldType(t_Field *self)
        {
          ::org::apache::lucene::index::IndexableFieldType result((jobject) NULL);
          OBJ_CALL(result = self->object.fieldType());
          return ::org::apache::lucene::index::t_IndexableFieldType::wrap_Object(result);
        }

        static PyObject *t_Field_getCharSequenceValue(t_Field *self)
        {
          ::java::lang::CharSequence result((jobject) NULL);
          OBJ_CALL(result = self->object.getCharSequenceValue());
          return ::java::lang::t_CharSequence::wrap_Object(result);
        }

        static PyObject *t_Field_name(t_Field *self)
        {
          ::java::lang::String result((jobject) NULL);
          OBJ_CALL(result = self->object.name());
          return j2p(result);
        }

        static PyObject *t_Field_numericValue(t_Field *self)
        {
          ::java::lang::Number result((jobject) NULL);
          OBJ_CALL(result = self->object.numericValue());
          return ::java::lang::t_Number::wrap_Object(result);
        }

        static PyObject *t_Field_readerValue(t_Field *self)
        {
          ::java::io::Reader result((jobject) NULL);
          OBJ_CALL(result = self->object.readerValue());
          return ::java::io::t_Reader::wrap_Object(result);
        }

        static PyObject *t_Field_setByteValue(t_Field *self, PyObject *arg)
        {
          jbyte a0;

          if (!parseArg(arg, "B", &a0))
          {
            OBJ_CALL(self->object.setByteValue(a0));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "setByteValue", arg);
          return NULL;
        }

        static PyObject *t_Field_setBytesValue(t_Field *self, PyObject *args)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 1:
            {
              JArray< jbyte > a0((jobject) NULL);

              if (!parseArgs(args, "[B", &a0))
              {
                OBJ_CALL(self->object.setBytesValue(a0));
                Py_RETURN_NONE;
              }
            }
            {
              ::org::apache::lucene::util::BytesRef a0((jobject) NULL);

              if (!parseArgs(args, "k", ::org::apache::lucene::util::BytesRef::initializeClass, &a0))
              {
                OBJ_CALL(self->object.setBytesValue(a0));
                Py_RETURN_NONE;
              }
            }
          }

          PyErr_SetArgsError((PyObject *) self, "setBytesValue", args);
          return NULL;
        }

        static PyObject *t_Field_setDoubleValue(t_Field *self, PyObject *arg)
        {
          jdouble a0;

          if (!parseArg(arg, "D", &a0))
          {
            OBJ_CALL(self->object.setDoubleValue(a0));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "setDoubleValue", arg);
          return NULL;
        }

        static PyObject *t_Field_setFloatValue(t_Field *self, PyObject *arg)
        {
          jfloat a0;

          if (!parseArg(arg, "F", &a0))
          {
            OBJ_CALL(self->object.setFloatValue(a0));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "setFloatValue", arg);
          return NULL;
        }

        static PyObject *t_Field_setIntValue(t_Field *self, PyObject *arg)
        {
          jint a0;

          if (!parseArg(arg, "I", &a0))
          {
            OBJ_CALL(self->object.setIntValue(a0));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "setIntValue", arg);
          return NULL;
        }

        static PyObject *t_Field_setLongValue(t_Field *self, PyObject *arg)
        {
          jlong a0;

          if (!parseArg(arg, "J", &a0))
          {
            OBJ_CALL(self->object.setLongValue(a0));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "setLongValue", arg);
          return NULL;
        }

        static PyObject *t_Field_setReaderValue(t_Field *self, PyObject *arg)
        {
          ::java::io::Reader a0((jobject) NULL);

          if (!parseArg(arg, "k", ::java::io::Reader::initializeClass, &a0))
          {
            OBJ_CALL(self->object.setReaderValue(a0));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "setReaderValue", arg);
          return NULL;
        }

        static PyObject *t_Field_setShortValue(t_Field *self, PyObject *arg)
        {
          jshort a0;

          if (!parseArg(arg, "S", &a0))
          {
            OBJ_CALL(self->object.setShortValue(a0));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "setShortValue", arg);
          return NULL;
        }

        static PyObject *t_Field_setStringValue(t_Field *self, PyObject *arg)
        {
          ::java::lang::String a0((jobject) NULL);

          if (!parseArg(arg, "s", &a0))
          {
            OBJ_CALL(self->object.setStringValue(a0));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "setStringValue", arg);
          return NULL;
        }

        static PyObject *t_Field_setTokenStream(t_Field *self, PyObject *arg)
        {
          ::org::apache::lucene::analysis::TokenStream a0((jobject) NULL);

          if (!parseArg(arg, "k", ::org::apache::lucene::analysis::TokenStream::initializeClass, &a0))
          {
            OBJ_CALL(self->object.setTokenStream(a0));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "setTokenStream", arg);
          return NULL;
        }

        static PyObject *t_Field_stringValue(t_Field *self)
        {
          ::java::lang::String result((jobject) NULL);
          OBJ_CALL(result = self->object.stringValue());
          return j2p(result);
        }

        static PyObject *t_Field_toString(t_Field *self, PyObject *args)
        {
          ::java::lang::String result((jobject) NULL);

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.toString());
            return j2p(result);
          }

          return callSuper(PY_TYPE(Field), (PyObject *) self, "toString", args, 2);
        }

        static PyObject *t_Field_tokenStream(t_Field *self, PyObject *args)
        {
          ::org::apache::lucene::analysis::Analyzer a0((jobject) NULL);
          ::org::apache::lucene::analysis::TokenStream a1((jobject) NULL);
          ::org::apache::lucene::analysis::TokenStream result((jobject) NULL);

          if (!parseArgs(args, "kk", ::org::apache::lucene::analysis::Analyzer::initializeClass, ::org::apache::lucene::analysis::TokenStream::initializeClass, &a0, &a1))
          {
            OBJ_CALL(result = self->object.tokenStream(a0, a1));
            return ::org::apache::lucene::analysis::t_TokenStream::wrap_Object(result);
          }

          PyErr_SetArgsError((PyObject *) self, "tokenStream", args);
          return NULL;
        }

        static PyObject *t_Field_tokenStreamValue(t_Field *self)
        {
          ::org::apache::lucene::analysis::TokenStream result((jobject) NULL);
          OBJ_CALL(result = self->object.tokenStreamValue());
          return ::org::apache::lucene::analysis::t_TokenStream::wrap_Object(result);
        }

        static int t_Field_set__byteValue(t_Field *self, PyObject *arg, void *data)
        {
          {
            jbyte value;
            if (!parseArg(arg, "B", &value))
            {
              INT_CALL(self->object.setByteValue(value));
              return 0;
            }
          }
          PyErr_SetArgsError((PyObject *) self, "byteValue", arg);
          return -1;
        }

        static int t_Field_set__bytesValue(t_Field *self, PyObject *arg, void *data)
        {
          {
            JArray< jbyte > value((jobject) NULL);
            if (!parseArg(arg, "[B", &value))
            {
              INT_CALL(self->object.setBytesValue(value));
              return 0;
            }
          }
          {
            ::org::apache::lucene::util::BytesRef value((jobject) NULL);
            if (!parseArg(arg, "k", ::org::apache::lucene::util::BytesRef::initializeClass, &value))
            {
              INT_CALL(self->object.setBytesValue(value));
              return 0;
            }
          }
          PyErr_SetArgsError((PyObject *) self, "bytesValue", arg);
          return -1;
        }

        static PyObject *t_Field_get__charSequenceValue(t_Field *self, void *data)
        {
          ::java::lang::CharSequence value((jobject) NULL);
          OBJ_CALL(value = self->object.getCharSequenceValue());
          return ::java::lang::t_CharSequence::wrap_Object(value);
        }

        static int t_Field_set__doubleValue(t_Field *self, PyObject *arg, void *data)
        {
          {
            jdouble value;
            if (!parseArg(arg, "D", &value))
            {
              INT_CALL(self->object.setDoubleValue(value));
              return 0;
            }
          }
          PyErr_SetArgsError((PyObject *) self, "doubleValue", arg);
          return -1;
        }

        static int t_Field_set__floatValue(t_Field *self, PyObject *arg, void *data)
        {
          {
            jfloat value;
            if (!parseArg(arg, "F", &value))
            {
              INT_CALL(self->object.setFloatValue(value));
              return 0;
            }
          }
          PyErr_SetArgsError((PyObject *) self, "floatValue", arg);
          return -1;
        }

        static int t_Field_set__intValue(t_Field *self, PyObject *arg, void *data)
        {
          {
            jint value;
            if (!parseArg(arg, "I", &value))
            {
              INT_CALL(self->object.setIntValue(value));
              return 0;
            }
          }
          PyErr_SetArgsError((PyObject *) self, "intValue", arg);
          return -1;
        }

        static int t_Field_set__longValue(t_Field *self, PyObject *arg, void *data)
        {
          {
            jlong value;
            if (!parseArg(arg, "J", &value))
            {
              INT_CALL(self->object.setLongValue(value));
              return 0;
            }
          }
          PyErr_SetArgsError((PyObject *) self, "longValue", arg);
          return -1;
        }

        static int t_Field_set__shortValue(t_Field *self, PyObject *arg, void *data)
        {
          {
            jshort value;
            if (!parseArg(arg, "S", &value))
            {
              INT_CALL(self->object.setShortValue(value));
              return 0;
            }
          }
          PyErr_SetArgsError((PyObject *) self, "shortValue", arg);
          return -1;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/compound/DictionaryCompoundWordTokenFilterFactory.h"
#include "java/util/Map.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/analysis/TokenStream.h"
#include "org/apache/lucene/analysis/util/ResourceLoader.h"
#include "java/lang/String.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/analysis/util/ResourceLoaderAware.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace compound {

          ::java::lang::Class *DictionaryCompoundWordTokenFilterFactory::class$ = NULL;
          jmethodID *DictionaryCompoundWordTokenFilterFactory::mids$ = NULL;
          bool DictionaryCompoundWordTokenFilterFactory::live$ = false;
          ::java::lang::String *DictionaryCompoundWordTokenFilterFactory::NAME = NULL;

          jclass DictionaryCompoundWordTokenFilterFactory::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/compound/DictionaryCompoundWordTokenFilterFactory");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_408bd889ee3beae5] = env->getMethodID(cls, "<init>", "(Ljava/util/Map;)V");
              mids$[mid_create_6de1e28d9d10cd9e] = env->getMethodID(cls, "create", "(Lorg/apache/lucene/analysis/TokenStream;)Lorg/apache/lucene/analysis/TokenStream;");
              mids$[mid_inform_b4ee53c41a5f629f] = env->getMethodID(cls, "inform", "(Lorg/apache/lucene/analysis/util/ResourceLoader;)V");

              class$ = new ::java::lang::Class(cls);
              cls = (jclass) class$->this$;

              NAME = new ::java::lang::String(env->getStaticObjectField(cls, "NAME", "Ljava/lang/String;"));
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          DictionaryCompoundWordTokenFilterFactory::DictionaryCompoundWordTokenFilterFactory(const ::java::util::Map & a0) : ::org::apache::lucene::analysis::util::TokenFilterFactory(env->newObject(initializeClass, &mids$, mid_init$_408bd889ee3beae5, a0.this$)) {}

          ::org::apache::lucene::analysis::TokenStream DictionaryCompoundWordTokenFilterFactory::create(const ::org::apache::lucene::analysis::TokenStream & a0) const
          {
            return ::org::apache::lucene::analysis::TokenStream(env->callObjectMethod(this$, mids$[mid_create_6de1e28d9d10cd9e], a0.this$));
          }

          void DictionaryCompoundWordTokenFilterFactory::inform(const ::org::apache::lucene::analysis::util::ResourceLoader & a0) const
          {
            env->callVoidMethod(this$, mids$[mid_inform_b4ee53c41a5f629f], a0.this$);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace compound {
          static PyObject *t_DictionaryCompoundWordTokenFilterFactory_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_DictionaryCompoundWordTokenFilterFactory_instance_(PyTypeObject *type, PyObject *arg);
          static int t_DictionaryCompoundWordTokenFilterFactory_init_(t_DictionaryCompoundWordTokenFilterFactory *self, PyObject *args, PyObject *kwds);
          static PyObject *t_DictionaryCompoundWordTokenFilterFactory_create(t_DictionaryCompoundWordTokenFilterFactory *self, PyObject *args);
          static PyObject *t_DictionaryCompoundWordTokenFilterFactory_inform(t_DictionaryCompoundWordTokenFilterFactory *self, PyObject *arg);

          static PyMethodDef t_DictionaryCompoundWordTokenFilterFactory__methods_[] = {
            DECLARE_METHOD(t_DictionaryCompoundWordTokenFilterFactory, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_DictionaryCompoundWordTokenFilterFactory, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_DictionaryCompoundWordTokenFilterFactory, create, METH_VARARGS),
            DECLARE_METHOD(t_DictionaryCompoundWordTokenFilterFactory, inform, METH_O),
            { NULL, NULL, 0, NULL }
          };

          static PyType_Slot PY_TYPE_SLOTS(DictionaryCompoundWordTokenFilterFactory)[] = {
            { Py_tp_methods, t_DictionaryCompoundWordTokenFilterFactory__methods_ },
            { Py_tp_init, (void *) t_DictionaryCompoundWordTokenFilterFactory_init_ },
            { 0, NULL }
          };

          static PyType_Def *PY_TYPE_BASES(DictionaryCompoundWordTokenFilterFactory)[] = {
            &PY_TYPE_DEF(::org::apache::lucene::analysis::util::TokenFilterFactory),
            NULL
          };

          DEFINE_TYPE(DictionaryCompoundWordTokenFilterFactory, t_DictionaryCompoundWordTokenFilterFactory, DictionaryCompoundWordTokenFilterFactory);

          void t_DictionaryCompoundWordTokenFilterFactory::install(PyObject *module)
          {
            installType(&PY_TYPE(DictionaryCompoundWordTokenFilterFactory), &PY_TYPE_DEF(DictionaryCompoundWordTokenFilterFactory), module, "DictionaryCompoundWordTokenFilterFactory", 0);
          }

          void t_DictionaryCompoundWordTokenFilterFactory::initialize(PyObject *module)
          {
            PyObject_SetAttrString((PyObject *) PY_TYPE(DictionaryCompoundWordTokenFilterFactory), "class_", make_descriptor(DictionaryCompoundWordTokenFilterFactory::initializeClass, 1));
            PyObject_SetAttrString((PyObject *) PY_TYPE(DictionaryCompoundWordTokenFilterFactory), "wrapfn_", make_descriptor(t_DictionaryCompoundWordTokenFilterFactory::wrap_jobject));
            PyObject_SetAttrString((PyObject *) PY_TYPE(DictionaryCompoundWordTokenFilterFactory), "boxfn_", make_descriptor(boxObject));
            env->getClass(DictionaryCompoundWordTokenFilterFactory::initializeClass);
            PyObject_SetAttrString((PyObject *) PY_TYPE(DictionaryCompoundWordTokenFilterFactory), "NAME", make_descriptor(j2p(*DictionaryCompoundWordTokenFilterFactory::NAME)));
          }

          static PyObject *t_DictionaryCompoundWordTokenFilterFactory_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, DictionaryCompoundWordTokenFilterFactory::initializeClass, 1)))
              return NULL;
            return t_DictionaryCompoundWordTokenFilterFactory::wrap_Object(DictionaryCompoundWordTokenFilterFactory(((t_DictionaryCompoundWordTokenFilterFactory *) arg)->object.this$));
          }
          static PyObject *t_DictionaryCompoundWordTokenFilterFactory_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, DictionaryCompoundWordTokenFilterFactory::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_DictionaryCompoundWordTokenFilterFactory_init_(t_DictionaryCompoundWordTokenFilterFactory *self, PyObject *args, PyObject *kwds)
          {
            ::java::util::Map a0((jobject) NULL);
            PyTypeObject **p0;
            DictionaryCompoundWordTokenFilterFactory object((jobject) NULL);

            if (!parseArgs(args, "K", ::java::util::Map::initializeClass, &a0, &p0, ::java::util::t_Map::parameters_))
            {
              INT_CALL(object = DictionaryCompoundWordTokenFilterFactory(a0));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_DictionaryCompoundWordTokenFilterFactory_create(t_DictionaryCompoundWordTokenFilterFactory *self, PyObject *args)
          {
            ::org::apache::lucene::analysis::TokenStream a0((jobject) NULL);
            ::org::apache::lucene::analysis::TokenStream result((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::analysis::TokenStream::initializeClass, &a0))
            {
              OBJ_CALL(result = self->object.create(a0));
              return ::org::apache::lucene::analysis::t_TokenStream::wrap_Object(result);
            }

            return callSuper(PY_TYPE(DictionaryCompoundWordTokenFilterFactory), (PyObject *) self, "create", args, 2);
          }

          static PyObject *t_DictionaryCompoundWordTokenFilterFactory_inform(t_DictionaryCompoundWordTokenFilterFactory *self, PyObject *arg)
          {
            ::org::apache::lucene::analysis::util::ResourceLoader a0((jobject) NULL);

            if (!parseArg(arg, "k", ::org::apache::lucene::analysis::util::ResourceLoader::initializeClass, &a0))
            {
              OBJ_CALL(self->object.inform(a0));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError((PyObject *) self, "inform", arg);
            return NULL;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/facet/TopOrdAndIntQueue$OrdAndValue.h"
#include "org/apache/lucene/facet/TopOrdAndIntQueue$OrdAndValue.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace facet {

        ::java::lang::Class *TopOrdAndIntQueue$OrdAndValue::class$ = NULL;
        jmethodID *TopOrdAndIntQueue$OrdAndValue::mids$ = NULL;
        jfieldID *TopOrdAndIntQueue$OrdAndValue::fids$ = NULL;
        bool TopOrdAndIntQueue$OrdAndValue::live$ = false;

        jclass TopOrdAndIntQueue$OrdAndValue::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/facet/TopOrdAndIntQueue$OrdAndValue");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_f2cc1bce94666404] = env->getMethodID(cls, "<init>", "()V");

            fids$ = new jfieldID[max_fid];
            fids$[fid_ord] = env->getFieldID(cls, "ord", "I");
            fids$[fid_value] = env->getFieldID(cls, "value", "I");

            class$ = new ::java::lang::Class(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        TopOrdAndIntQueue$OrdAndValue::TopOrdAndIntQueue$OrdAndValue() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_f2cc1bce94666404)) {}

        jint TopOrdAndIntQueue$OrdAndValue::_get_ord() const
        {
          return env->getIntField(this$, fids$[fid_ord]);
        }

        void TopOrdAndIntQueue$OrdAndValue::_set_ord(jint a0) const
        {
          env->setIntField(this$, fids$[fid_ord], a0);
        }

        jint TopOrdAndIntQueue$OrdAndValue::_get_value() const
        {
          return env->getIntField(this$, fids$[fid_value]);
        }

        void TopOrdAndIntQueue$OrdAndValue::_set_value(jint a0) const
        {
          env->setIntField(this$, fids$[fid_value], a0);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace facet {
        static PyObject *t_TopOrdAndIntQueue$OrdAndValue_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_TopOrdAndIntQueue$OrdAndValue_instance_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_TopOrdAndIntQueue$OrdAndValue_of_(t_TopOrdAndIntQueue$OrdAndValue *self, PyObject *args);
        static int t_TopOrdAndIntQueue$OrdAndValue_init_(t_TopOrdAndIntQueue$OrdAndValue *self, PyObject *args, PyObject *kwds);
        static PyObject *t_TopOrdAndIntQueue$OrdAndValue_get__ord(t_TopOrdAndIntQueue$OrdAndValue *self, void *data);
        static int t_TopOrdAndIntQueue$OrdAndValue_set__ord(t_TopOrdAndIntQueue$OrdAndValue *self, PyObject *arg, void *data);
        static PyObject *t_TopOrdAndIntQueue$OrdAndValue_get__value(t_TopOrdAndIntQueue$OrdAndValue *self, void *data);
        static int t_TopOrdAndIntQueue$OrdAndValue_set__value(t_TopOrdAndIntQueue$OrdAndValue *self, PyObject *arg, void *data);

        static PyObject *t_TopOrdAndIntQueue$OrdAndValue_get__parameters_(t_TopOrdAndIntQueue$OrdAndValue *self, void *data);
        static PyGetSetDef t_TopOrdAndIntQueue$OrdAndValue__fields_[] = {
          DECLARE_GETSET_FIELD(t_TopOrdAndIntQueue$OrdAndValue, ord),
          DECLARE_GETSET_FIELD(t_TopOrdAndIntQueue$OrdAndValue, value),
          DECLARE_GET_FIELD(t_TopOrdAndIntQueue$OrdAndValue, parameters_),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_TopOrdAndIntQueue$OrdAndValue__methods_[] = {
          DECLARE_METHOD(t_TopOrdAndIntQueue$OrdAndValue, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_TopOrdAndIntQueue$OrdAndValue, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_TopOrdAndIntQueue$OrdAndValue, of_, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        static PyType_Slot PY_TYPE_SLOTS(TopOrdAndIntQueue$OrdAndValue)[] = {
          { Py_tp_methods, t_TopOrdAndIntQueue$OrdAndValue__methods_ },
          { Py_tp_init, (void *) t_TopOrdAndIntQueue$OrdAndValue_init_ },
          { Py_tp_getset, t_TopOrdAndIntQueue$OrdAndValue__fields_ },
          { 0, NULL }
        };

        static PyType_Def *PY_TYPE_BASES(TopOrdAndIntQueue$OrdAndValue)[] = {
          &PY_TYPE_DEF(::java::lang::Object),
          NULL
        };

        DEFINE_TYPE(TopOrdAndIntQueue$OrdAndValue, t_TopOrdAndIntQueue$OrdAndValue, TopOrdAndIntQueue$OrdAndValue);
        PyObject *t_TopOrdAndIntQueue$OrdAndValue::wrap_Object(const TopOrdAndIntQueue$OrdAndValue& object, PyTypeObject *p0)
        {
          PyObject *obj = t_TopOrdAndIntQueue$OrdAndValue::wrap_Object(object);
          if (obj != NULL && obj != Py_None)
          {
            t_TopOrdAndIntQueue$OrdAndValue *self = (t_TopOrdAndIntQueue$OrdAndValue *) obj;
            self->parameters[0] = p0;
          }
          return obj;
        }

        PyObject *t_TopOrdAndIntQueue$OrdAndValue::wrap_jobject(const jobject& object, PyTypeObject *p0)
        {
          PyObject *obj = t_TopOrdAndIntQueue$OrdAndValue::wrap_jobject(object);
          if (obj != NULL && obj != Py_None)
          {
            t_TopOrdAndIntQueue$OrdAndValue *self = (t_TopOrdAndIntQueue$OrdAndValue *) obj;
            self->parameters[0] = p0;
          }
          return obj;
        }

        void t_TopOrdAndIntQueue$OrdAndValue::install(PyObject *module)
        {
          installType(&PY_TYPE(TopOrdAndIntQueue$OrdAndValue), &PY_TYPE_DEF(TopOrdAndIntQueue$OrdAndValue), module, "TopOrdAndIntQueue$OrdAndValue", 0);
        }

        void t_TopOrdAndIntQueue$OrdAndValue::initialize(PyObject *module)
        {
          PyObject_SetAttrString((PyObject *) PY_TYPE(TopOrdAndIntQueue$OrdAndValue), "class_", make_descriptor(TopOrdAndIntQueue$OrdAndValue::initializeClass, 1));
          PyObject_SetAttrString((PyObject *) PY_TYPE(TopOrdAndIntQueue$OrdAndValue), "wrapfn_", make_descriptor(t_TopOrdAndIntQueue$OrdAndValue::wrap_jobject));
          PyObject_SetAttrString((PyObject *) PY_TYPE(TopOrdAndIntQueue$OrdAndValue), "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_TopOrdAndIntQueue$OrdAndValue_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, TopOrdAndIntQueue$OrdAndValue::initializeClass, 1)))
            return NULL;
          return t_TopOrdAndIntQueue$OrdAndValue::wrap_Object(TopOrdAndIntQueue$OrdAndValue(((t_TopOrdAndIntQueue$OrdAndValue *) arg)->object.this$));
        }
        static PyObject *t_TopOrdAndIntQueue$OrdAndValue_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, TopOrdAndIntQueue$OrdAndValue::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static PyObject *t_TopOrdAndIntQueue$OrdAndValue_of_(t_TopOrdAndIntQueue$OrdAndValue *self, PyObject *args)
        {
          if (!parseArg(args, "T", 1, &(self->parameters)))
            Py_RETURN_SELF;
          return PyErr_SetArgsError((PyObject *) self, "of_", args);
        }

        static int t_TopOrdAndIntQueue$OrdAndValue_init_(t_TopOrdAndIntQueue$OrdAndValue *self, PyObject *args, PyObject *kwds)
        {
          TopOrdAndIntQueue$OrdAndValue object((jobject) NULL);

          INT_CALL(object = TopOrdAndIntQueue$OrdAndValue());
          self->object = object;
          self->parameters[0] = ::org::apache::lucene::facet::PY_TYPE(TopOrdAndIntQueue$OrdAndValue);

          return 0;
        }
        static PyObject *t_TopOrdAndIntQueue$OrdAndValue_get__parameters_(t_TopOrdAndIntQueue$OrdAndValue *self, void *data)
        {
          return typeParameters(self->parameters, sizeof(self->parameters));
        }

        static PyObject *t_TopOrdAndIntQueue$OrdAndValue_get__ord(t_TopOrdAndIntQueue$OrdAndValue *self, void *data)
        {
          jint value;
          OBJ_CALL(value = self->object._get_ord());
          return PyLong_FromLong((long) value);
        }
        static int t_TopOrdAndIntQueue$OrdAndValue_set__ord(t_TopOrdAndIntQueue$OrdAndValue *self, PyObject *arg, void *data)
        {
          jint value;
          if (!parseArg(arg, "I", &value))
          {
            INT_CALL(self->object._set_ord(value));
            return 0;
          }
          PyErr_SetArgsError((PyObject *) self, "ord", arg);
          return -1;
        }

        static PyObject *t_TopOrdAndIntQueue$OrdAndValue_get__value(t_TopOrdAndIntQueue$OrdAndValue *self, void *data)
        {
          jint value;
          OBJ_CALL(value = self->object._get_value());
          return PyLong_FromLong((long) value);
        }
        static int t_TopOrdAndIntQueue$OrdAndValue_set__value(t_TopOrdAndIntQueue$OrdAndValue *self, PyObject *arg, void *data)
        {
          jint value;
          if (!parseArg(arg, "I", &value))
          {
            INT_CALL(self->object._set_value(value));
            return 0;
          }
          PyErr_SetArgsError((PyObject *) self, "value", arg);
          return -1;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/codecs/blocktreeords/BlockTreeOrdsPostingsFormat.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/index/SegmentReadState.h"
#include "org/apache/lucene/index/SegmentWriteState.h"
#include "java/lang/String.h"
#include "org/apache/lucene/codecs/FieldsConsumer.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/codecs/FieldsProducer.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace codecs {
        namespace blocktreeords {

          ::java::lang::Class *BlockTreeOrdsPostingsFormat::class$ = NULL;
          jmethodID *BlockTreeOrdsPostingsFormat::mids$ = NULL;
          bool BlockTreeOrdsPostingsFormat::live$ = false;
          jint BlockTreeOrdsPostingsFormat::BLOCK_SIZE = (jint) 0;

          jclass BlockTreeOrdsPostingsFormat::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/codecs/blocktreeords/BlockTreeOrdsPostingsFormat");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_f2cc1bce94666404] = env->getMethodID(cls, "<init>", "()V");
              mids$[mid_init$_438c62480c481c65] = env->getMethodID(cls, "<init>", "(II)V");
              mids$[mid_fieldsConsumer_876dc181a1f61814] = env->getMethodID(cls, "fieldsConsumer", "(Lorg/apache/lucene/index/SegmentWriteState;)Lorg/apache/lucene/codecs/FieldsConsumer;");
              mids$[mid_fieldsProducer_c39bdf540a53fab9] = env->getMethodID(cls, "fieldsProducer", "(Lorg/apache/lucene/index/SegmentReadState;)Lorg/apache/lucene/codecs/FieldsProducer;");
              mids$[mid_toString_db9b55ba01e03e4b] = env->getMethodID(cls, "toString", "()Ljava/lang/String;");

              class$ = new ::java::lang::Class(cls);
              cls = (jclass) class$->this$;

              BLOCK_SIZE = env->getStaticIntField(cls, "BLOCK_SIZE");
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          BlockTreeOrdsPostingsFormat::BlockTreeOrdsPostingsFormat() : ::org::apache::lucene::codecs::PostingsFormat(env->newObject(initializeClass, &mids$, mid_init$_f2cc1bce94666404)) {}

          BlockTreeOrdsPostingsFormat::BlockTreeOrdsPostingsFormat(jint a0, jint a1) : ::org::apache::lucene::codecs::PostingsFormat(env->newObject(initializeClass, &mids$, mid_init$_438c62480c481c65, a0, a1)) {}

          ::org::apache::lucene::codecs::FieldsConsumer BlockTreeOrdsPostingsFormat::fieldsConsumer(const ::org::apache::lucene::index::SegmentWriteState & a0) const
          {
            return ::org::apache::lucene::codecs::FieldsConsumer(env->callObjectMethod(this$, mids$[mid_fieldsConsumer_876dc181a1f61814], a0.this$));
          }

          ::org::apache::lucene::codecs::FieldsProducer BlockTreeOrdsPostingsFormat::fieldsProducer(const ::org::apache::lucene::index::SegmentReadState & a0) const
          {
            return ::org::apache::lucene::codecs::FieldsProducer(env->callObjectMethod(this$, mids$[mid_fieldsProducer_c39bdf540a53fab9], a0.this$));
          }

          ::java::lang::String BlockTreeOrdsPostingsFormat::toString() const
          {
            return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_db9b55ba01e03e4b]));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace codecs {
        namespace blocktreeords {
          static PyObject *t_BlockTreeOrdsPostingsFormat_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_BlockTreeOrdsPostingsFormat_instance_(PyTypeObject *type, PyObject *arg);
          static int t_BlockTreeOrdsPostingsFormat_init_(t_BlockTreeOrdsPostingsFormat *self, PyObject *args, PyObject *kwds);
          static PyObject *t_BlockTreeOrdsPostingsFormat_fieldsConsumer(t_BlockTreeOrdsPostingsFormat *self, PyObject *args);
          static PyObject *t_BlockTreeOrdsPostingsFormat_fieldsProducer(t_BlockTreeOrdsPostingsFormat *self, PyObject *args);
          static PyObject *t_BlockTreeOrdsPostingsFormat_toString(t_BlockTreeOrdsPostingsFormat *self, PyObject *args);

          static PyMethodDef t_BlockTreeOrdsPostingsFormat__methods_[] = {
            DECLARE_METHOD(t_BlockTreeOrdsPostingsFormat, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_BlockTreeOrdsPostingsFormat, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_BlockTreeOrdsPostingsFormat, fieldsConsumer, METH_VARARGS),
            DECLARE_METHOD(t_BlockTreeOrdsPostingsFormat, fieldsProducer, METH_VARARGS),
            DECLARE_METHOD(t_BlockTreeOrdsPostingsFormat, toString, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          static PyType_Slot PY_TYPE_SLOTS(BlockTreeOrdsPostingsFormat)[] = {
            { Py_tp_methods, t_BlockTreeOrdsPostingsFormat__methods_ },
            { Py_tp_init, (void *) t_BlockTreeOrdsPostingsFormat_init_ },
            { 0, NULL }
          };

          static PyType_Def *PY_TYPE_BASES(BlockTreeOrdsPostingsFormat)[] = {
            &PY_TYPE_DEF(::org::apache::lucene::codecs::PostingsFormat),
            NULL
          };

          DEFINE_TYPE(BlockTreeOrdsPostingsFormat, t_BlockTreeOrdsPostingsFormat, BlockTreeOrdsPostingsFormat);

          void t_BlockTreeOrdsPostingsFormat::install(PyObject *module)
          {
            installType(&PY_TYPE(BlockTreeOrdsPostingsFormat), &PY_TYPE_DEF(BlockTreeOrdsPostingsFormat), module, "BlockTreeOrdsPostingsFormat", 0);
          }

          void t_BlockTreeOrdsPostingsFormat::initialize(PyObject *module)
          {
            PyObject_SetAttrString((PyObject *) PY_TYPE(BlockTreeOrdsPostingsFormat), "class_", make_descriptor(BlockTreeOrdsPostingsFormat::initializeClass, 1));
            PyObject_SetAttrString((PyObject *) PY_TYPE(BlockTreeOrdsPostingsFormat), "wrapfn_", make_descriptor(t_BlockTreeOrdsPostingsFormat::wrap_jobject));
            PyObject_SetAttrString((PyObject *) PY_TYPE(BlockTreeOrdsPostingsFormat), "boxfn_", make_descriptor(boxObject));
            env->getClass(BlockTreeOrdsPostingsFormat::initializeClass);
            PyObject_SetAttrString((PyObject *) PY_TYPE(BlockTreeOrdsPostingsFormat), "BLOCK_SIZE", make_descriptor(BlockTreeOrdsPostingsFormat::BLOCK_SIZE));
          }

          static PyObject *t_BlockTreeOrdsPostingsFormat_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, BlockTreeOrdsPostingsFormat::initializeClass, 1)))
              return NULL;
            return t_BlockTreeOrdsPostingsFormat::wrap_Object(BlockTreeOrdsPostingsFormat(((t_BlockTreeOrdsPostingsFormat *) arg)->object.this$));
          }
          static PyObject *t_BlockTreeOrdsPostingsFormat_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, BlockTreeOrdsPostingsFormat::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_BlockTreeOrdsPostingsFormat_init_(t_BlockTreeOrdsPostingsFormat *self, PyObject *args, PyObject *kwds)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 0:
              {
                BlockTreeOrdsPostingsFormat object((jobject) NULL);

                INT_CALL(object = BlockTreeOrdsPostingsFormat());
                self->object = object;
                break;
              }
             case 2:
              {
                jint a0;
                jint a1;
                BlockTreeOrdsPostingsFormat object((jobject) NULL);

                if (!parseArgs(args, "II", &a0, &a1))
                {
                  INT_CALL(object = BlockTreeOrdsPostingsFormat(a0, a1));
                  self->object = object;
                  break;
                }
              }
             default:
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_BlockTreeOrdsPostingsFormat_fieldsConsumer(t_BlockTreeOrdsPostingsFormat *self, PyObject *args)
          {
            ::org::apache::lucene::index::SegmentWriteState a0((jobject) NULL);
            ::org::apache::lucene::codecs::FieldsConsumer result((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::index::SegmentWriteState::initializeClass, &a0))
            {
              OBJ_CALL(result = self->object.fieldsConsumer(a0));
              return ::org::apache::lucene::codecs::t_FieldsConsumer::wrap_Object(result);
            }

            return callSuper(PY_TYPE(BlockTreeOrdsPostingsFormat), (PyObject *) self, "fieldsConsumer", args, 2);
          }

          static PyObject *t_BlockTreeOrdsPostingsFormat_fieldsProducer(t_BlockTreeOrdsPostingsFormat *self, PyObject *args)
          {
            ::org::apache::lucene::index::SegmentReadState a0((jobject) NULL);
            ::org::apache::lucene::codecs::FieldsProducer result((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::index::SegmentReadState::initializeClass, &a0))
            {
              OBJ_CALL(result = self->object.fieldsProducer(a0));
              return ::org::apache::lucene::codecs::t_FieldsProducer::wrap_Object(result);
            }

            return callSuper(PY_TYPE(BlockTreeOrdsPostingsFormat), (PyObject *) self, "fieldsProducer", args, 2);
          }

          static PyObject *t_BlockTreeOrdsPostingsFormat_toString(t_BlockTreeOrdsPostingsFormat *self, PyObject *args)
          {
            ::java::lang::String result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.toString());
              return j2p(result);
            }

            return callSuper(PY_TYPE(BlockTreeOrdsPostingsFormat), (PyObject *) self, "toString", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/codecs/uniformsplit/IndexDictionary$Browser.h"
#include "org/apache/lucene/util/BytesRef.h"
#include "java/io/IOException.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace codecs {
        namespace uniformsplit {

          ::java::lang::Class *IndexDictionary$Browser::class$ = NULL;
          jmethodID *IndexDictionary$Browser::mids$ = NULL;
          bool IndexDictionary$Browser::live$ = false;

          jclass IndexDictionary$Browser::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/codecs/uniformsplit/IndexDictionary$Browser");

              mids$ = new jmethodID[max_mid];
              mids$[mid_seekBlock_6f6ee5bba7f22d4c] = env->getMethodID(cls, "seekBlock", "(Lorg/apache/lucene/util/BytesRef;)J");

              class$ = new ::java::lang::Class(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          jlong IndexDictionary$Browser::seekBlock(const ::org::apache::lucene::util::BytesRef & a0) const
          {
            return env->callLongMethod(this$, mids$[mid_seekBlock_6f6ee5bba7f22d4c], a0.this$);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace codecs {
        namespace uniformsplit {
          static PyObject *t_IndexDictionary$Browser_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_IndexDictionary$Browser_instance_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_IndexDictionary$Browser_seekBlock(t_IndexDictionary$Browser *self, PyObject *arg);

          static PyMethodDef t_IndexDictionary$Browser__methods_[] = {
            DECLARE_METHOD(t_IndexDictionary$Browser, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_IndexDictionary$Browser, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_IndexDictionary$Browser, seekBlock, METH_O),
            { NULL, NULL, 0, NULL }
          };

          static PyType_Slot PY_TYPE_SLOTS(IndexDictionary$Browser)[] = {
            { Py_tp_methods, t_IndexDictionary$Browser__methods_ },
            { Py_tp_init, (void *) abstract_init },
            { 0, NULL }
          };

          static PyType_Def *PY_TYPE_BASES(IndexDictionary$Browser)[] = {
            &PY_TYPE_DEF(::java::lang::Object),
            NULL
          };

          DEFINE_TYPE(IndexDictionary$Browser, t_IndexDictionary$Browser, IndexDictionary$Browser);

          void t_IndexDictionary$Browser::install(PyObject *module)
          {
            installType(&PY_TYPE(IndexDictionary$Browser), &PY_TYPE_DEF(IndexDictionary$Browser), module, "IndexDictionary$Browser", 0);
          }

          void t_IndexDictionary$Browser::initialize(PyObject *module)
          {
            PyObject_SetAttrString((PyObject *) PY_TYPE(IndexDictionary$Browser), "class_", make_descriptor(IndexDictionary$Browser::initializeClass, 1));
            PyObject_SetAttrString((PyObject *) PY_TYPE(IndexDictionary$Browser), "wrapfn_", make_descriptor(t_IndexDictionary$Browser::wrap_jobject));
            PyObject_SetAttrString((PyObject *) PY_TYPE(IndexDictionary$Browser), "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_IndexDictionary$Browser_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, IndexDictionary$Browser::initializeClass, 1)))
              return NULL;
            return t_IndexDictionary$Browser::wrap_Object(IndexDictionary$Browser(((t_IndexDictionary$Browser *) arg)->object.this$));
          }
          static PyObject *t_IndexDictionary$Browser_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, IndexDictionary$Browser::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static PyObject *t_IndexDictionary$Browser_seekBlock(t_IndexDictionary$Browser *self, PyObject *arg)
          {
            ::org::apache::lucene::util::BytesRef a0((jobject) NULL);
            jlong result;

            if (!parseArg(arg, "k", ::org::apache::lucene::util::BytesRef::initializeClass, &a0))
            {
              OBJ_CALL(result = self->object.seekBlock(a0));
              return PyLong_FromLongLong((PY_LONG_LONG) result);
            }

            PyErr_SetArgsError((PyObject *) self, "seekBlock", arg);
            return NULL;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/facet/FacetsConfig$DimConfig.h"
#include "org/apache/lucene/facet/FacetsConfig$DrillDownTermsIndexing.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace facet {

        ::java::lang::Class *FacetsConfig$DimConfig::class$ = NULL;
        jmethodID *FacetsConfig$DimConfig::mids$ = NULL;
        jfieldID *FacetsConfig$DimConfig::fids$ = NULL;
        bool FacetsConfig$DimConfig::live$ = false;

        jclass FacetsConfig$DimConfig::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/facet/FacetsConfig$DimConfig");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_f2cc1bce94666404] = env->getMethodID(cls, "<init>", "()V");

            fids$ = new jfieldID[max_fid];
            fids$[fid_drillDownTermsIndexing] = env->getFieldID(cls, "drillDownTermsIndexing", "Lorg/apache/lucene/facet/FacetsConfig$DrillDownTermsIndexing;");
            fids$[fid_hierarchical] = env->getFieldID(cls, "hierarchical", "Z");
            fids$[fid_indexFieldName] = env->getFieldID(cls, "indexFieldName", "Ljava/lang/String;");
            fids$[fid_multiValued] = env->getFieldID(cls, "multiValued", "Z");
            fids$[fid_requireDimCount] = env->getFieldID(cls, "requireDimCount", "Z");

            class$ = new ::java::lang::Class(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        FacetsConfig$DimConfig::FacetsConfig$DimConfig() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_f2cc1bce94666404)) {}

        ::org::apache::lucene::facet::FacetsConfig$DrillDownTermsIndexing FacetsConfig$DimConfig::_get_drillDownTermsIndexing() const
        {
          return ::org::apache::lucene::facet::FacetsConfig$DrillDownTermsIndexing(env->getObjectField(this$, fids$[fid_drillDownTermsIndexing]));
        }

        void FacetsConfig$DimConfig::_set_drillDownTermsIndexing(const ::org::apache::lucene::facet::FacetsConfig$DrillDownTermsIndexing & a0) const
        {
          env->setObjectField(this$, fids$[fid_drillDownTermsIndexing], a0.this$);
        }

        jboolean FacetsConfig$DimConfig::_get_hierarchical() const
        {
          return env->getBooleanField(this$, fids$[fid_hierarchical]);
        }

        void FacetsConfig$DimConfig::_set_hierarchical(jboolean a0) const
        {
          env->setBooleanField(this$, fids$[fid_hierarchical], a0);
        }

        ::java::lang::String FacetsConfig$DimConfig::_get_indexFieldName() const
        {
          return ::java::lang::String(env->getObjectField(this$, fids$[fid_indexFieldName]));
        }

        void FacetsConfig$DimConfig::_set_indexFieldName(const ::java::lang::String & a0) const
        {
          env->setObjectField(this$, fids$[fid_indexFieldName], a0.this$);
        }

        jboolean FacetsConfig$DimConfig::_get_multiValued() const
        {
          return env->getBooleanField(this$, fids$[fid_multiValued]);
        }

        void FacetsConfig$DimConfig::_set_multiValued(jboolean a0) const
        {
          env->setBooleanField(this$, fids$[fid_multiValued], a0);
        }

        jboolean FacetsConfig$DimConfig::_get_requireDimCount() const
        {
          return env->getBooleanField(this$, fids$[fid_requireDimCount]);
        }

        void FacetsConfig$DimConfig::_set_requireDimCount(jboolean a0) const
        {
          env->setBooleanField(this$, fids$[fid_requireDimCount], a0);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace facet {
        static PyObject *t_FacetsConfig$DimConfig_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_FacetsConfig$DimConfig_instance_(PyTypeObject *type, PyObject *arg);
        static int t_FacetsConfig$DimConfig_init_(t_FacetsConfig$DimConfig *self, PyObject *args, PyObject *kwds);
        static PyObject *t_FacetsConfig$DimConfig_get__drillDownTermsIndexing(t_FacetsConfig$DimConfig *self, void *data);
        static int t_FacetsConfig$DimConfig_set__drillDownTermsIndexing(t_FacetsConfig$DimConfig *self, PyObject *arg, void *data);
        static PyObject *t_FacetsConfig$DimConfig_get__hierarchical(t_FacetsConfig$DimConfig *self, void *data);
        static int t_FacetsConfig$DimConfig_set__hierarchical(t_FacetsConfig$DimConfig *self, PyObject *arg, void *data);
        static PyObject *t_FacetsConfig$DimConfig_get__indexFieldName(t_FacetsConfig$DimConfig *self, void *data);
        static int t_FacetsConfig$DimConfig_set__indexFieldName(t_FacetsConfig$DimConfig *self, PyObject *arg, void *data);
        static PyObject *t_FacetsConfig$DimConfig_get__multiValued(t_FacetsConfig$DimConfig *self, void *data);
        static int t_FacetsConfig$DimConfig_set__multiValued(t_FacetsConfig$DimConfig *self, PyObject *arg, void *data);
        static PyObject *t_FacetsConfig$DimConfig_get__requireDimCount(t_FacetsConfig$DimConfig *self, void *data);
        static int t_FacetsConfig$DimConfig_set__requireDimCount(t_FacetsConfig$DimConfig *self, PyObject *arg, void *data);

        static PyGetSetDef t_FacetsConfig$DimConfig__fields_[] = {
          DECLARE_GETSET_FIELD(t_FacetsConfig$DimConfig, drillDownTermsIndexing),
          DECLARE_GETSET_FIELD(t_FacetsConfig$DimConfig, hierarchical),
          DECLARE_GETSET_FIELD(t_FacetsConfig$DimConfig, indexFieldName),
          DECLARE_GETSET_FIELD(t_FacetsConfig$DimConfig, multiValued),
          DECLARE_GETSET_FIELD(t_FacetsConfig$DimConfig, requireDimCount),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_FacetsConfig$DimConfig__methods_[] = {
          DECLARE_METHOD(t_FacetsConfig$DimConfig, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_FacetsConfig$DimConfig, instance_, METH_O | METH_CLASS),
          { NULL, NULL, 0, NULL }
        };

        static PyType_Slot PY_TYPE_SLOTS(FacetsConfig$DimConfig)[] = {
          { Py_tp_methods, t_FacetsConfig$DimConfig__methods_ },
          { Py_tp_init, (void *) t_FacetsConfig$DimConfig_init_ },
          { Py_tp_getset, t_FacetsConfig$DimConfig__fields_ },
          { 0, NULL }
        };

        static PyType_Def *PY_TYPE_BASES(FacetsConfig$DimConfig)[] = {
          &PY_TYPE_DEF(::java::lang::Object),
          NULL
        };

        DEFINE_TYPE(FacetsConfig$DimConfig, t_FacetsConfig$DimConfig, FacetsConfig$DimConfig);

        void t_FacetsConfig$DimConfig::install(PyObject *module)
        {
          installType(&PY_TYPE(FacetsConfig$DimConfig), &PY_TYPE_DEF(FacetsConfig$DimConfig), module, "FacetsConfig$DimConfig", 0);
        }

        void t_FacetsConfig$DimConfig::initialize(PyObject *module)
        {
          PyObject_SetAttrString((PyObject *) PY_TYPE(FacetsConfig$DimConfig), "class_", make_descriptor(FacetsConfig$DimConfig::initializeClass, 1));
          PyObject_SetAttrString((PyObject *) PY_TYPE(FacetsConfig$DimConfig), "wrapfn_", make_descriptor(t_FacetsConfig$DimConfig::wrap_jobject));
          PyObject_SetAttrString((PyObject *) PY_TYPE(FacetsConfig$DimConfig), "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_FacetsConfig$DimConfig_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, FacetsConfig$DimConfig::initializeClass, 1)))
            return NULL;
          return t_FacetsConfig$DimConfig::wrap_Object(FacetsConfig$DimConfig(((t_FacetsConfig$DimConfig *) arg)->object.this$));
        }
        static PyObject *t_FacetsConfig$DimConfig_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, FacetsConfig$DimConfig::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_FacetsConfig$DimConfig_init_(t_FacetsConfig$DimConfig *self, PyObject *args, PyObject *kwds)
        {
          FacetsConfig$DimConfig object((jobject) NULL);

          INT_CALL(object = FacetsConfig$DimConfig());
          self->object = object;

          return 0;
        }

        static PyObject *t_FacetsConfig$DimConfig_get__drillDownTermsIndexing(t_FacetsConfig$DimConfig *self, void *data)
        {
          ::org::apache::lucene::facet::FacetsConfig$DrillDownTermsIndexing value((jobject) NULL);
          OBJ_CALL(value = self->object._get_drillDownTermsIndexing());
          return ::org::apache::lucene::facet::t_FacetsConfig$DrillDownTermsIndexing::wrap_Object(value);
        }
        static int t_FacetsConfig$DimConfig_set__drillDownTermsIndexing(t_FacetsConfig$DimConfig *self, PyObject *arg, void *data)
        {
          ::org::apache::lucene::facet::FacetsConfig$DrillDownTermsIndexing value((jobject) NULL);
          if (!parseArg(arg, "k", ::org::apache::lucene::facet::FacetsConfig$DrillDownTermsIndexing::initializeClass, &value))
          {
            INT_CALL(self->object._set_drillDownTermsIndexing(value));
            return 0;
          }
          PyErr_SetArgsError((PyObject *) self, "drillDownTermsIndexing", arg);
          return -1;
        }

        static PyObject *t_FacetsConfig$DimConfig_get__hierarchical(t_FacetsConfig$DimConfig *self, void *data)
        {
          jboolean value;
          OBJ_CALL(value = self->object._get_hierarchical());
          Py_RETURN_BOOL(value);
        }
        static int t_FacetsConfig$DimConfig_set__hierarchical(t_FacetsConfig$DimConfig *self, PyObject *arg, void *data)
        {
          jboolean value;
          if (!parseArg(arg, "Z", &value))
          {
            INT_CALL(self->object._set_hierarchical(value));
            return 0;
          }
          PyErr_SetArgsError((PyObject *) self, "hierarchical", arg);
          return -1;
        }

        static PyObject *t_FacetsConfig$DimConfig_get__indexFieldName(t_FacetsConfig$DimConfig *self, void *data)
        {
          ::java::lang::String value((jobject) NULL);
          OBJ_CALL(value = self->object._get_indexFieldName());
          return j2p(value);
        }
        static int t_FacetsConfig$DimConfig_set__indexFieldName(t_FacetsConfig$DimConfig *self, PyObject *arg, void *data)
        {
          ::java::lang::String value((jobject) NULL);
          if (!parseArg(arg, "s", &value))
          {
            INT_CALL(self->object._set_indexFieldName(value));
            return 0;
          }
          PyErr_SetArgsError((PyObject *) self, "indexFieldName", arg);
          return -1;
        }

        static PyObject *t_FacetsConfig$DimConfig_get__multiValued(t_FacetsConfig$DimConfig *self, void *data)
        {
          jboolean value;
          OBJ_CALL(value = self->object._get_multiValued());
          Py_RETURN_BOOL(value);
        }
        static int t_FacetsConfig$DimConfig_set__multiValued(t_FacetsConfig$DimConfig *self, PyObject *arg, void *data)
        {
          jboolean value;
          if (!parseArg(arg, "Z", &value))
          {
            INT_CALL(self->object._set_multiValued(value));
            return 0;
          }
          PyErr_SetArgsError((PyObject *) self, "multiValued", arg);
          return -1;
        }

        static PyObject *t_FacetsConfig$DimConfig_get__requireDimCount(t_FacetsConfig$DimConfig *self, void *data)
        {
          jboolean value;
          OBJ_CALL(value = self->object._get_requireDimCount());
          Py_RETURN_BOOL(value);
        }
        static int t_FacetsConfig$DimConfig_set__requireDimCount(t_FacetsConfig$DimConfig *self, PyObject *arg, void *data)
        {
          jboolean value;
          if (!parseArg(arg, "Z", &value))
          {
            INT_CALL(self->object._set_requireDimCount(value));
            return 0;
          }
          PyErr_SetArgsError((PyObject *) self, "requireDimCount", arg);
          return -1;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/index/IndexableFieldType.h"
#include "java/util/Map.h"
#include "org/apache/lucene/index/DocValuesType.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/index/IndexOptions.h"
#include "java/lang/String.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {

        ::java::lang::Class *IndexableFieldType::class$ = NULL;
        jmethodID *IndexableFieldType::mids$ = NULL;
        bool IndexableFieldType::live$ = false;

        jclass IndexableFieldType::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/index/IndexableFieldType");

            mids$ = new jmethodID[max_mid];
            mids$[mid_docValuesType_c31c90cd64c32335] = env->getMethodID(cls, "docValuesType", "()Lorg/apache/lucene/index/DocValuesType;");
            mids$[mid_getAttributes_1c3426541413a55d] = env->getMethodID(cls, "getAttributes", "()Ljava/util/Map;");
            mids$[mid_indexOptions_0d28536417711dd9] = env->getMethodID(cls, "indexOptions", "()Lorg/apache/lucene/index/IndexOptions;");
            mids$[mid_omitNorms_8454bd5aa23fd11e] = env->getMethodID(cls, "omitNorms", "()Z");
            mids$[mid_pointDimensionCount_9972fcc56b44e79d] = env->getMethodID(cls, "pointDimensionCount", "()I");
            mids$[mid_pointIndexDimensionCount_9972fcc56b44e79d] = env->getMethodID(cls, "pointIndexDimensionCount", "()I");
            mids$[mid_pointNumBytes_9972fcc56b44e79d] = env->getMethodID(cls, "pointNumBytes", "()I");
            mids$[mid_storeTermVectorOffsets_8454bd5aa23fd11e] = env->getMethodID(cls, "storeTermVectorOffsets", "()Z");
            mids$[mid_storeTermVectorPayloads_8454bd5aa23fd11e] = env->getMethodID(cls, "storeTermVectorPayloads", "()Z");
            mids$[mid_storeTermVectorPositions_8454bd5aa23fd11e] = env->getMethodID(cls, "storeTermVectorPositions", "()Z");
            mids$[mid_storeTermVectors_8454bd5aa23fd11e] = env->getMethodID(cls, "storeTermVectors", "()Z");
            mids$[mid_stored_8454bd5aa23fd11e] = env->getMethodID(cls, "stored", "()Z");
            mids$[mid_tokenized_8454bd5aa23fd11e] = env->getMethodID(cls, "tokenized", "()Z");

            class$ = new ::java::lang::Class(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        ::org::apache::lucene::index::DocValuesType IndexableFieldType::docValuesType() const
        {
          return ::org::apache::lucene::index::DocValuesType(env->callObjectMethod(this$, mids$[mid_docValuesType_c31c90cd64c32335]));
        }

        ::java::util::Map IndexableFieldType::getAttributes() const
        {
          return ::java::util::Map(env->callObjectMethod(this$, mids$[mid_getAttributes_1c3426541413a55d]));
        }

        ::org::apache::lucene::index::IndexOptions IndexableFieldType::indexOptions() const
        {
          return ::org::apache::lucene::index::IndexOptions(env->callObjectMethod(this$, mids$[mid_indexOptions_0d28536417711dd9]));
        }

        jboolean IndexableFieldType::omitNorms() const
        {
          return env->callBooleanMethod(this$, mids$[mid_omitNorms_8454bd5aa23fd11e]);
        }

        jint IndexableFieldType::pointDimensionCount() const
        {
          return env->callIntMethod(this$, mids$[mid_pointDimensionCount_9972fcc56b44e79d]);
        }

        jint IndexableFieldType::pointIndexDimensionCount() const
        {
          return env->callIntMethod(this$, mids$[mid_pointIndexDimensionCount_9972fcc56b44e79d]);
        }

        jint IndexableFieldType::pointNumBytes() const
        {
          return env->callIntMethod(this$, mids$[mid_pointNumBytes_9972fcc56b44e79d]);
        }

        jboolean IndexableFieldType::storeTermVectorOffsets() const
        {
          return env->callBooleanMethod(this$, mids$[mid_storeTermVectorOffsets_8454bd5aa23fd11e]);
        }

        jboolean IndexableFieldType::storeTermVectorPayloads() const
        {
          return env->callBooleanMethod(this$, mids$[mid_storeTermVectorPayloads_8454bd5aa23fd11e]);
        }

        jboolean IndexableFieldType::storeTermVectorPositions() const
        {
          return env->callBooleanMethod(this$, mids$[mid_storeTermVectorPositions_8454bd5aa23fd11e]);
        }

        jboolean IndexableFieldType::storeTermVectors() const
        {
          return env->callBooleanMethod(this$, mids$[mid_storeTermVectors_8454bd5aa23fd11e]);
        }

        jboolean IndexableFieldType::stored() const
        {
          return env->callBooleanMethod(this$, mids$[mid_stored_8454bd5aa23fd11e]);
        }

        jboolean IndexableFieldType::tokenized() const
        {
          return env->callBooleanMethod(this$, mids$[mid_tokenized_8454bd5aa23fd11e]);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {
        static PyObject *t_IndexableFieldType_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_IndexableFieldType_instance_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_IndexableFieldType_docValuesType(t_IndexableFieldType *self);
        static PyObject *t_IndexableFieldType_getAttributes(t_IndexableFieldType *self);
        static PyObject *t_IndexableFieldType_indexOptions(t_IndexableFieldType *self);
        static PyObject *t_IndexableFieldType_omitNorms(t_IndexableFieldType *self);
        static PyObject *t_IndexableFieldType_pointDimensionCount(t_IndexableFieldType *self);
        static PyObject *t_IndexableFieldType_pointIndexDimensionCount(t_IndexableFieldType *self);
        static PyObject *t_IndexableFieldType_pointNumBytes(t_IndexableFieldType *self);
        static PyObject *t_IndexableFieldType_storeTermVectorOffsets(t_IndexableFieldType *self);
        static PyObject *t_IndexableFieldType_storeTermVectorPayloads(t_IndexableFieldType *self);
        static PyObject *t_IndexableFieldType_storeTermVectorPositions(t_IndexableFieldType *self);
        static PyObject *t_IndexableFieldType_storeTermVectors(t_IndexableFieldType *self);
        static PyObject *t_IndexableFieldType_stored(t_IndexableFieldType *self);
        static PyObject *t_IndexableFieldType_tokenized(t_IndexableFieldType *self);
        static PyObject *t_IndexableFieldType_get__attributes(t_IndexableFieldType *self, void *data);
        static PyGetSetDef t_IndexableFieldType__fields_[] = {
          DECLARE_GET_FIELD(t_IndexableFieldType, attributes),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_IndexableFieldType__methods_[] = {
          DECLARE_METHOD(t_IndexableFieldType, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_IndexableFieldType, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_IndexableFieldType, docValuesType, METH_NOARGS),
          DECLARE_METHOD(t_IndexableFieldType, getAttributes, METH_NOARGS),
          DECLARE_METHOD(t_IndexableFieldType, indexOptions, METH_NOARGS),
          DECLARE_METHOD(t_IndexableFieldType, omitNorms, METH_NOARGS),
          DECLARE_METHOD(t_IndexableFieldType, pointDimensionCount, METH_NOARGS),
          DECLARE_METHOD(t_IndexableFieldType, pointIndexDimensionCount, METH_NOARGS),
          DECLARE_METHOD(t_IndexableFieldType, pointNumBytes, METH_NOARGS),
          DECLARE_METHOD(t_IndexableFieldType, storeTermVectorOffsets, METH_NOARGS),
          DECLARE_METHOD(t_IndexableFieldType, storeTermVectorPayloads, METH_NOARGS),
          DECLARE_METHOD(t_IndexableFieldType, storeTermVectorPositions, METH_NOARGS),
          DECLARE_METHOD(t_IndexableFieldType, storeTermVectors, METH_NOARGS),
          DECLARE_METHOD(t_IndexableFieldType, stored, METH_NOARGS),
          DECLARE_METHOD(t_IndexableFieldType, tokenized, METH_NOARGS),
          { NULL, NULL, 0, NULL }
        };

        static PyType_Slot PY_TYPE_SLOTS(IndexableFieldType)[] = {
          { Py_tp_methods, t_IndexableFieldType__methods_ },
          { Py_tp_init, (void *) abstract_init },
          { Py_tp_getset, t_IndexableFieldType__fields_ },
          { 0, NULL }
        };

        static PyType_Def *PY_TYPE_BASES(IndexableFieldType)[] = {
          &PY_TYPE_DEF(::java::lang::Object),
          NULL
        };

        DEFINE_TYPE(IndexableFieldType, t_IndexableFieldType, IndexableFieldType);

        void t_IndexableFieldType::install(PyObject *module)
        {
          installType(&PY_TYPE(IndexableFieldType), &PY_TYPE_DEF(IndexableFieldType), module, "IndexableFieldType", 0);
        }

        void t_IndexableFieldType::initialize(PyObject *module)
        {
          PyObject_SetAttrString((PyObject *) PY_TYPE(IndexableFieldType), "class_", make_descriptor(IndexableFieldType::initializeClass, 1));
          PyObject_SetAttrString((PyObject *) PY_TYPE(IndexableFieldType), "wrapfn_", make_descriptor(t_IndexableFieldType::wrap_jobject));
          PyObject_SetAttrString((PyObject *) PY_TYPE(IndexableFieldType), "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_IndexableFieldType_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, IndexableFieldType::initializeClass, 1)))
            return NULL;
          return t_IndexableFieldType::wrap_Object(IndexableFieldType(((t_IndexableFieldType *) arg)->object.this$));
        }
        static PyObject *t_IndexableFieldType_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, IndexableFieldType::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static PyObject *t_IndexableFieldType_docValuesType(t_IndexableFieldType *self)
        {
          ::org::apache::lucene::index::DocValuesType result((jobject) NULL);
          OBJ_CALL(result = self->object.docValuesType());
          return ::org::apache::lucene::index::t_DocValuesType::wrap_Object(result);
        }

        static PyObject *t_IndexableFieldType_getAttributes(t_IndexableFieldType *self)
        {
          ::java::util::Map result((jobject) NULL);
          OBJ_CALL(result = self->object.getAttributes());
          return ::java::util::t_Map::wrap_Object(result, ::java::lang::PY_TYPE(String), ::java::lang::PY_TYPE(String));
        }

        static PyObject *t_IndexableFieldType_indexOptions(t_IndexableFieldType *self)
        {
          ::org::apache::lucene::index::IndexOptions result((jobject) NULL);
          OBJ_CALL(result = self->object.indexOptions());
          return ::org::apache::lucene::index::t_IndexOptions::wrap_Object(result);
        }

        static PyObject *t_IndexableFieldType_omitNorms(t_IndexableFieldType *self)
        {
          jboolean result;
          OBJ_CALL(result = self->object.omitNorms());
          Py_RETURN_BOOL(result);
        }

        static PyObject *t_IndexableFieldType_pointDimensionCount(t_IndexableFieldType *self)
        {
          jint result;
          OBJ_CALL(result = self->object.pointDimensionCount());
          return PyLong_FromLong((long) result);
        }

        static PyObject *t_IndexableFieldType_pointIndexDimensionCount(t_IndexableFieldType *self)
        {
          jint result;
          OBJ_CALL(result = self->object.pointIndexDimensionCount());
          return PyLong_FromLong((long) result);
        }

        static PyObject *t_IndexableFieldType_pointNumBytes(t_IndexableFieldType *self)
        {
          jint result;
          OBJ_CALL(result = self->object.pointNumBytes());
          return PyLong_FromLong((long) result);
        }

        static PyObject *t_IndexableFieldType_storeTermVectorOffsets(t_IndexableFieldType *self)
        {
          jboolean result;
          OBJ_CALL(result = self->object.storeTermVectorOffsets());
          Py_RETURN_BOOL(result);
        }

        static PyObject *t_IndexableFieldType_storeTermVectorPayloads(t_IndexableFieldType *self)
        {
          jboolean result;
          OBJ_CALL(result = self->object.storeTermVectorPayloads());
          Py_RETURN_BOOL(result);
        }

        static PyObject *t_IndexableFieldType_storeTermVectorPositions(t_IndexableFieldType *self)
        {
          jboolean result;
          OBJ_CALL(result = self->object.storeTermVectorPositions());
          Py_RETURN_BOOL(result);
        }

        static PyObject *t_IndexableFieldType_storeTermVectors(t_IndexableFieldType *self)
        {
          jboolean result;
          OBJ_CALL(result = self->object.storeTermVectors());
          Py_RETURN_BOOL(result);
        }

        static PyObject *t_IndexableFieldType_stored(t_IndexableFieldType *self)
        {
          jboolean result;
          OBJ_CALL(result = self->object.stored());
          Py_RETURN_BOOL(result);
        }

        static PyObject *t_IndexableFieldType_tokenized(t_IndexableFieldType *self)
        {
          jboolean result;
          OBJ_CALL(result = self->object.tokenized());
          Py_RETURN_BOOL(result);
        }

        static PyObject *t_IndexableFieldType_get__attributes(t_IndexableFieldType *self, void *data)
        {
          ::java::util::Map value((jobject) NULL);
          OBJ_CALL(value = self->object.getAttributes());
          return ::java::util::t_Map::wrap_Object(value);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/ngram/EdgeNGramTokenFilter.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/analysis/TokenStream.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace ngram {

          ::java::lang::Class *EdgeNGramTokenFilter::class$ = NULL;
          jmethodID *EdgeNGramTokenFilter::mids$ = NULL;
          bool EdgeNGramTokenFilter::live$ = false;
          jboolean EdgeNGramTokenFilter::DEFAULT_PRESERVE_ORIGINAL = (jboolean) 0;

          jclass EdgeNGramTokenFilter::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/ngram/EdgeNGramTokenFilter");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_ec84dcad1ccbb797] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/analysis/TokenStream;I)V");
              mids$[mid_init$_90f95d18f5f2d791] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/analysis/TokenStream;IIZ)V");
              mids$[mid_end_f2cc1bce94666404] = env->getMethodID(cls, "end", "()V");
              mids$[mid_incrementToken_8454bd5aa23fd11e] = env->getMethodID(cls, "incrementToken", "()Z");
              mids$[mid_reset_f2cc1bce94666404] = env->getMethodID(cls, "reset", "()V");

              class$ = new ::java::lang::Class(cls);
              cls = (jclass) class$->this$;

              DEFAULT_PRESERVE_ORIGINAL = env->getStaticBooleanField(cls, "DEFAULT_PRESERVE_ORIGINAL");
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          EdgeNGramTokenFilter::EdgeNGramTokenFilter(const ::org::apache::lucene::analysis::TokenStream & a0, jint a1) : ::org::apache::lucene::analysis::TokenFilter(env->newObject(initializeClass, &mids$, mid_init$_ec84dcad1ccbb797, a0.this$, a1)) {}

          EdgeNGramTokenFilter::EdgeNGramTokenFilter(const ::org::apache::lucene::analysis::TokenStream & a0, jint a1, jint a2, jboolean a3) : ::org::apache::lucene::analysis::TokenFilter(env->newObject(initializeClass, &mids$, mid_init$_90f95d18f5f2d791, a0.this$, a1, a2, a3)) {}

          void EdgeNGramTokenFilter::end() const
          {
            env->callVoidMethod(this$, mids$[mid_end_f2cc1bce94666404]);
          }

          jboolean EdgeNGramTokenFilter::incrementToken() const
          {
            return env->callBooleanMethod(this$, mids$[mid_incrementToken_8454bd5aa23fd11e]);
          }

          void EdgeNGramTokenFilter::reset() const
          {
            env->callVoidMethod(this$, mids$[mid_reset_f2cc1bce94666404]);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace ngram {
          static PyObject *t_EdgeNGramTokenFilter_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_EdgeNGramTokenFilter_instance_(PyTypeObject *type, PyObject *arg);
          static int t_EdgeNGramTokenFilter_init_(t_EdgeNGramTokenFilter *self, PyObject *args, PyObject *kwds);
          static PyObject *t_EdgeNGramTokenFilter_end(t_EdgeNGramTokenFilter *self, PyObject *args);
          static PyObject *t_EdgeNGramTokenFilter_incrementToken(t_EdgeNGramTokenFilter *self, PyObject *args);
          static PyObject *t_EdgeNGramTokenFilter_reset(t_EdgeNGramTokenFilter *self, PyObject *args);

          static PyMethodDef t_EdgeNGramTokenFilter__methods_[] = {
            DECLARE_METHOD(t_EdgeNGramTokenFilter, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_EdgeNGramTokenFilter, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_EdgeNGramTokenFilter, end, METH_VARARGS),
            DECLARE_METHOD(t_EdgeNGramTokenFilter, incrementToken, METH_VARARGS),
            DECLARE_METHOD(t_EdgeNGramTokenFilter, reset, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          static PyType_Slot PY_TYPE_SLOTS(EdgeNGramTokenFilter)[] = {
            { Py_tp_methods, t_EdgeNGramTokenFilter__methods_ },
            { Py_tp_init, (void *) t_EdgeNGramTokenFilter_init_ },
            { 0, NULL }
          };

          static PyType_Def *PY_TYPE_BASES(EdgeNGramTokenFilter)[] = {
            &PY_TYPE_DEF(::org::apache::lucene::analysis::TokenFilter),
            NULL
          };

          DEFINE_TYPE(EdgeNGramTokenFilter, t_EdgeNGramTokenFilter, EdgeNGramTokenFilter);

          void t_EdgeNGramTokenFilter::install(PyObject *module)
          {
            installType(&PY_TYPE(EdgeNGramTokenFilter), &PY_TYPE_DEF(EdgeNGramTokenFilter), module, "EdgeNGramTokenFilter", 0);
          }

          void t_EdgeNGramTokenFilter::initialize(PyObject *module)
          {
            PyObject_SetAttrString((PyObject *) PY_TYPE(EdgeNGramTokenFilter), "class_", make_descriptor(EdgeNGramTokenFilter::initializeClass, 1));
            PyObject_SetAttrString((PyObject *) PY_TYPE(EdgeNGramTokenFilter), "wrapfn_", make_descriptor(t_EdgeNGramTokenFilter::wrap_jobject));
            PyObject_SetAttrString((PyObject *) PY_TYPE(EdgeNGramTokenFilter), "boxfn_", make_descriptor(boxObject));
            env->getClass(EdgeNGramTokenFilter::initializeClass);
            PyObject_SetAttrString((PyObject *) PY_TYPE(EdgeNGramTokenFilter), "DEFAULT_PRESERVE_ORIGINAL", make_descriptor(EdgeNGramTokenFilter::DEFAULT_PRESERVE_ORIGINAL));
          }

          static PyObject *t_EdgeNGramTokenFilter_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, EdgeNGramTokenFilter::initializeClass, 1)))
              return NULL;
            return t_EdgeNGramTokenFilter::wrap_Object(EdgeNGramTokenFilter(((t_EdgeNGramTokenFilter *) arg)->object.this$));
          }
          static PyObject *t_EdgeNGramTokenFilter_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, EdgeNGramTokenFilter::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_EdgeNGramTokenFilter_init_(t_EdgeNGramTokenFilter *self, PyObject *args, PyObject *kwds)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 2:
              {
                ::org::apache::lucene::analysis::TokenStream a0((jobject) NULL);
                jint a1;
                EdgeNGramTokenFilter object((jobject) NULL);

                if (!parseArgs(args, "kI", ::org::apache::lucene::analysis::TokenStream::initializeClass, &a0, &a1))
                {
                  INT_CALL(object = EdgeNGramTokenFilter(a0, a1));
                  self->object = object;
                  break;
                }
              }
              goto err;
             case 4:
              {
                ::org::apache::lucene::analysis::TokenStream a0((jobject) NULL);
                jint a1;
                jint a2;
                jboolean a3;
                EdgeNGramTokenFilter object((jobject) NULL);

                if (!parseArgs(args, "kIIZ", ::org::apache::lucene::analysis::TokenStream::initializeClass, &a0, &a1, &a2, &a3))
                {
                  INT_CALL(object = EdgeNGramTokenFilter(a0, a1, a2, a3));
                  self->object = object;
                  break;
                }
              }
             default:
             err:
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_EdgeNGramTokenFilter_end(t_EdgeNGramTokenFilter *self, PyObject *args)
          {

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(self->object.end());
              Py_RETURN_NONE;
            }

            return callSuper(PY_TYPE(EdgeNGramTokenFilter), (PyObject *) self, "end", args, 2);
          }

          static PyObject *t_EdgeNGramTokenFilter_incrementToken(t_EdgeNGramTokenFilter *self, PyObject *args)
          {
            jboolean result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.incrementToken());
              Py_RETURN_BOOL(result);
            }

            return callSuper(PY_TYPE(EdgeNGramTokenFilter), (PyObject *) self, "incrementToken", args, 2);
          }

          static PyObject *t_EdgeNGramTokenFilter_reset(t_EdgeNGramTokenFilter *self, PyObject *args)
          {

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(self->object.reset());
              Py_RETURN_NONE;
            }

            return callSuper(PY_TYPE(EdgeNGramTokenFilter), (PyObject *) self, "reset", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/CachingCollector.h"
#include "org/apache/lucene/search/Collector.h"
#include "org/apache/lucene/search/CachingCollector.h"
#include "java/io/IOException.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {

        ::java::lang::Class *CachingCollector::class$ = NULL;
        jmethodID *CachingCollector::mids$ = NULL;
        bool CachingCollector::live$ = false;

        jclass CachingCollector::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/search/CachingCollector");

            mids$ = new jmethodID[max_mid];
            mids$[mid_create_7c6041740e657f81] = env->getStaticMethodID(cls, "create", "(ZD)Lorg/apache/lucene/search/CachingCollector;");
            mids$[mid_create_047d6499369a47de] = env->getStaticMethodID(cls, "create", "(Lorg/apache/lucene/search/Collector;ZD)Lorg/apache/lucene/search/CachingCollector;");
            mids$[mid_create_4ea838f5784261c4] = env->getStaticMethodID(cls, "create", "(Lorg/apache/lucene/search/Collector;ZI)Lorg/apache/lucene/search/CachingCollector;");
            mids$[mid_isCached_8454bd5aa23fd11e] = env->getMethodID(cls, "isCached", "()Z");
            mids$[mid_replay_a816cd51c84fa652] = env->getMethodID(cls, "replay", "(Lorg/apache/lucene/search/Collector;)V");

            class$ = new ::java::lang::Class(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        CachingCollector CachingCollector::create(jboolean a0, jdouble a1)
        {
          jclass cls = env->getClass(initializeClass);
          return CachingCollector(env->callStaticObjectMethod(cls, mids$[mid_create_7c6041740e657f81], a0, a1));
        }

        CachingCollector CachingCollector::create(const ::org::apache::lucene::search::Collector & a0, jboolean a1, jdouble a2)
        {
          jclass cls = env->getClass(initializeClass);
          return CachingCollector(env->callStaticObjectMethod(cls, mids$[mid_create_047d6499369a47de], a0.this$, a1, a2));
        }

        CachingCollector CachingCollector::create(const ::org::apache::lucene::search::Collector & a0, jboolean a1, jint a2)
        {
          jclass cls = env->getClass(initializeClass);
          return CachingCollector(env->callStaticObjectMethod(cls, mids$[mid_create_4ea838f5784261c4], a0.this$, a1, a2));
        }

        jboolean CachingCollector::isCached() const
        {
          return env->callBooleanMethod(this$, mids$[mid_isCached_8454bd5aa23fd11e]);
        }

        void CachingCollector::replay(const ::org::apache::lucene::search::Collector & a0) const
        {
          env->callVoidMethod(this$, mids$[mid_replay_a816cd51c84fa652], a0.this$);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        static PyObject *t_CachingCollector_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_CachingCollector_instance_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_CachingCollector_create(PyTypeObject *type, PyObject *args);
        static PyObject *t_CachingCollector_isCached(t_CachingCollector *self);
        static PyObject *t_CachingCollector_replay(t_CachingCollector *self, PyObject *arg);
        static PyObject *t_CachingCollector_get__cached(t_CachingCollector *self, void *data);
        static PyGetSetDef t_CachingCollector__fields_[] = {
          DECLARE_GET_FIELD(t_CachingCollector, cached),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_CachingCollector__methods_[] = {
          DECLARE_METHOD(t_CachingCollector, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_CachingCollector, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_CachingCollector, create, METH_VARARGS | METH_CLASS),
          DECLARE_METHOD(t_CachingCollector, isCached, METH_NOARGS),
          DECLARE_METHOD(t_CachingCollector, replay, METH_O),
          { NULL, NULL, 0, NULL }
        };

        static PyType_Slot PY_TYPE_SLOTS(CachingCollector)[] = {
          { Py_tp_methods, t_CachingCollector__methods_ },
          { Py_tp_init, (void *) abstract_init },
          { Py_tp_getset, t_CachingCollector__fields_ },
          { 0, NULL }
        };

        static PyType_Def *PY_TYPE_BASES(CachingCollector)[] = {
          &PY_TYPE_DEF(::org::apache::lucene::search::FilterCollector),
          NULL
        };

        DEFINE_TYPE(CachingCollector, t_CachingCollector, CachingCollector);

        void t_CachingCollector::install(PyObject *module)
        {
          installType(&PY_TYPE(CachingCollector), &PY_TYPE_DEF(CachingCollector), module, "CachingCollector", 0);
        }

        void t_CachingCollector::initialize(PyObject *module)
        {
          PyObject_SetAttrString((PyObject *) PY_TYPE(CachingCollector), "class_", make_descriptor(CachingCollector::initializeClass, 1));
          PyObject_SetAttrString((PyObject *) PY_TYPE(CachingCollector), "wrapfn_", make_descriptor(t_CachingCollector::wrap_jobject));
          PyObject_SetAttrString((PyObject *) PY_TYPE(CachingCollector), "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_CachingCollector_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, CachingCollector::initializeClass, 1)))
            return NULL;
          return t_CachingCollector::wrap_Object(CachingCollector(((t_CachingCollector *) arg)->object.this$));
        }
        static PyObject *t_CachingCollector_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, CachingCollector::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static PyObject *t_CachingCollector_create(PyTypeObject *type, PyObject *args)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 2:
            {
              jboolean a0;
              jdouble a1;
              CachingCollector result((jobject) NULL);

              if (!parseArgs(args, "ZD", &a0, &a1))
              {
                OBJ_CALL(result = ::org::apache::lucene::search::CachingCollector::create(a0, a1));
                return t_CachingCollector::wrap_Object(result);
              }
            }
            break;
           case 3:
            {
              ::org::apache::lucene::search::Collector a0((jobject) NULL);
              jboolean a1;
              jdouble a2;
              CachingCollector result((jobject) NULL);

              if (!parseArgs(args, "kZD", ::org::apache::lucene::search::Collector::initializeClass, &a0, &a1, &a2))
              {
                OBJ_CALL(result = ::org::apache::lucene::search::CachingCollector::create(a0, a1, a2));
                return t_CachingCollector::wrap_Object(result);
              }
            }
            {
              ::org::apache::lucene::search::Collector a0((jobject) NULL);
              jboolean a1;
              jint a2;
              CachingCollector result((jobject) NULL);

              if (!parseArgs(args, "kZI", ::org::apache::lucene::search::Collector::initializeClass, &a0, &a1, &a2))
              {
                OBJ_CALL(result = ::org::apache::lucene::search::CachingCollector::create(a0, a1, a2));
                return t_CachingCollector::wrap_Object(result);
              }
            }
          }

          PyErr_SetArgsError(type, "create", args);
          return NULL;
        }

        static PyObject *t_CachingCollector_isCached(t_CachingCollector *self)
        {
          jboolean result;
          OBJ_CALL(result = self->object.isCached());
          Py_RETURN_BOOL(result);
        }

        static PyObject *t_CachingCollector_replay(t_CachingCollector *self, PyObject *arg)
        {
          ::org::apache::lucene::search::Collector a0((jobject) NULL);

          if (!parseArg(arg, "k", ::org::apache::lucene::search::Collector::initializeClass, &a0))
          {
            OBJ_CALL(self->object.replay(a0));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "replay", arg);
          return NULL;
        }

        static PyObject *t_CachingCollector_get__cached(t_CachingCollector *self, void *data)
        {
          jboolean value;
          OBJ_CALL(value = self->object.isCached());
          Py_RETURN_BOOL(value);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queries/payloads/SpanPayloadCheckQuery$SpanPayloadCheckWeight.h"
#include "java/util/Map.h"
#include "org/apache/lucene/index/LeafReaderContext.h"
#include "org/apache/lucene/queries/payloads/SpanPayloadCheckQuery.h"
#include "org/apache/lucene/index/Term.h"
#include "org/apache/lucene/search/IndexSearcher.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/search/spans/SpanWeight$Postings.h"
#include "org/apache/lucene/index/TermStates.h"
#include "org/apache/lucene/search/spans/Spans.h"
#include "java/util/Set.h"
#include "org/apache/lucene/search/spans/SpanScorer.h"
#include "java/io/IOException.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queries {
        namespace payloads {

          ::java::lang::Class *SpanPayloadCheckQuery$SpanPayloadCheckWeight::class$ = NULL;
          jmethodID *SpanPayloadCheckQuery$SpanPayloadCheckWeight::mids$ = NULL;
          bool SpanPayloadCheckQuery$SpanPayloadCheckWeight::live$ = false;

          jclass SpanPayloadCheckQuery$SpanPayloadCheckWeight::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/queries/payloads/SpanPayloadCheckQuery$SpanPayloadCheckWeight");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_4c49e6169f6fb74a] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/queries/payloads/SpanPayloadCheckQuery;Lorg/apache/lucene/search/IndexSearcher;Ljava/util/Map;Lorg/apache/lucene/search/spans/SpanWeight;F)V");
              mids$[mid_extractTermStates_408bd889ee3beae5] = env->getMethodID(cls, "extractTermStates", "(Ljava/util/Map;)V");
              mids$[mid_extractTerms_d5a4a8d4b806f0ba] = env->getMethodID(cls, "extractTerms", "(Ljava/util/Set;)V");
              mids$[mid_getSpans_219c078c64a446fd] = env->getMethodID(cls, "getSpans", "(Lorg/apache/lucene/index/LeafReaderContext;Lorg/apache/lucene/search/spans/SpanWeight$Postings;)Lorg/apache/lucene/search/spans/Spans;");
              mids$[mid_isCacheable_07cae694a8cf1c6d] = env->getMethodID(cls, "isCacheable", "(Lorg/apache/lucene/index/LeafReaderContext;)Z");
              mids$[mid_scorer_bf17eef266ac3994] = env->getMethodID(cls, "scorer", "(Lorg/apache/lucene/index/LeafReaderContext;)Lorg/apache/lucene/search/spans/SpanScorer;");

              class$ = new ::java::lang::Class(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          SpanPayloadCheckQuery$SpanPayloadCheckWeight::SpanPayloadCheckQuery$SpanPayloadCheckWeight(const ::org::apache::lucene::queries::payloads::SpanPayloadCheckQuery & a0, const ::org::apache::lucene::search::IndexSearcher & a1, const ::java::util::Map & a2, const ::org::apache::lucene::search::spans::SpanWeight & a3, jfloat a4) : ::org::apache::lucene::search::spans::SpanWeight(env->newObject(initializeClass, &mids$, mid_init$_4c49e6169f6fb74a, a0.this$, a1.this$, a2.this$, a3.this$, a4)) {}

          void SpanPayloadCheckQuery$SpanPayloadCheckWeight::extractTermStates(const ::java::util::Map & a0) const
          {
            env->callVoidMethod(this$, mids$[mid_extractTermStates_408bd889ee3beae5], a0.this$);
          }

          void SpanPayloadCheckQuery$SpanPayloadCheckWeight::extractTerms(const ::java::util::Set & a0) const
          {
            env->callVoidMethod(this$, mids$[mid_extractTerms_d5a4a8d4b806f0ba], a0.this$);
          }

          ::org::apache::lucene::search::spans::Spans SpanPayloadCheckQuery$SpanPayloadCheckWeight::getSpans(const ::org::apache::lucene::index::LeafReaderContext & a0, const ::org::apache::lucene::search::spans::SpanWeight$Postings & a1) const
          {
            return ::org::apache::lucene::search::spans::Spans(env->callObjectMethod(this$, mids$[mid_getSpans_219c078c64a446fd], a0.this$, a1.this$));
          }

          jboolean SpanPayloadCheckQuery$SpanPayloadCheckWeight::isCacheable(const ::org::apache::lucene::index::LeafReaderContext & a0) const
          {
            return env->callBooleanMethod(this$, mids$[mid_isCacheable_07cae694a8cf1c6d], a0.this$);
          }

          ::org::apache::lucene::search::spans::SpanScorer SpanPayloadCheckQuery$SpanPayloadCheckWeight::scorer(const ::org::apache::lucene::index::LeafReaderContext & a0) const
          {
            return ::org::apache::lucene::search::spans::SpanScorer(env->callObjectMethod(this$, mids$[mid_scorer_bf17eef266ac3994], a0.this$));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queries {
        namespace payloads {
          static PyObject *t_SpanPayloadCheckQuery$SpanPayloadCheckWeight_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_SpanPayloadCheckQuery$SpanPayloadCheckWeight_instance_(PyTypeObject *type, PyObject *arg);
          static int t_SpanPayloadCheckQuery$SpanPayloadCheckWeight_init_(t_SpanPayloadCheckQuery$SpanPayloadCheckWeight *self, PyObject *args, PyObject *kwds);
          static PyObject *t_SpanPayloadCheckQuery$SpanPayloadCheckWeight_extractTermStates(t_SpanPayloadCheckQuery$SpanPayloadCheckWeight *self, PyObject *args);
          static PyObject *t_SpanPayloadCheckQuery$SpanPayloadCheckWeight_extractTerms(t_SpanPayloadCheckQuery$SpanPayloadCheckWeight *self, PyObject *args);
          static PyObject *t_SpanPayloadCheckQuery$SpanPayloadCheckWeight_getSpans(t_SpanPayloadCheckQuery$SpanPayloadCheckWeight *self, PyObject *args);
          static PyObject *t_SpanPayloadCheckQuery$SpanPayloadCheckWeight_isCacheable(t_SpanPayloadCheckQuery$SpanPayloadCheckWeight *self, PyObject *args);
          static PyObject *t_SpanPayloadCheckQuery$SpanPayloadCheckWeight_scorer(t_SpanPayloadCheckQuery$SpanPayloadCheckWeight *self, PyObject *args);

          static PyMethodDef t_SpanPayloadCheckQuery$SpanPayloadCheckWeight__methods_[] = {
            DECLARE_METHOD(t_SpanPayloadCheckQuery$SpanPayloadCheckWeight, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_SpanPayloadCheckQuery$SpanPayloadCheckWeight, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_SpanPayloadCheckQuery$SpanPayloadCheckWeight, extractTermStates, METH_VARARGS),
            DECLARE_METHOD(t_SpanPayloadCheckQuery$SpanPayloadCheckWeight, extractTerms, METH_VARARGS),
            DECLARE_METHOD(t_SpanPayloadCheckQuery$SpanPayloadCheckWeight, getSpans, METH_VARARGS),
            DECLARE_METHOD(t_SpanPayloadCheckQuery$SpanPayloadCheckWeight, isCacheable, METH_VARARGS),
            DECLARE_METHOD(t_SpanPayloadCheckQuery$SpanPayloadCheckWeight, scorer, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          static PyType_Slot PY_TYPE_SLOTS(SpanPayloadCheckQuery$SpanPayloadCheckWeight)[] = {
            { Py_tp_methods, t_SpanPayloadCheckQuery$SpanPayloadCheckWeight__methods_ },
            { Py_tp_init, (void *) t_SpanPayloadCheckQuery$SpanPayloadCheckWeight_init_ },
            { 0, NULL }
          };

          static PyType_Def *PY_TYPE_BASES(SpanPayloadCheckQuery$SpanPayloadCheckWeight)[] = {
            &PY_TYPE_DEF(::org::apache::lucene::search::spans::SpanWeight),
            NULL
          };

          DEFINE_TYPE(SpanPayloadCheckQuery$SpanPayloadCheckWeight, t_SpanPayloadCheckQuery$SpanPayloadCheckWeight, SpanPayloadCheckQuery$SpanPayloadCheckWeight);

          void t_SpanPayloadCheckQuery$SpanPayloadCheckWeight::install(PyObject *module)
          {
            installType(&PY_TYPE(SpanPayloadCheckQuery$SpanPayloadCheckWeight), &PY_TYPE_DEF(SpanPayloadCheckQuery$SpanPayloadCheckWeight), module, "SpanPayloadCheckQuery$SpanPayloadCheckWeight", 0);
          }

          void t_SpanPayloadCheckQuery$SpanPayloadCheckWeight::initialize(PyObject *module)
          {
            PyObject_SetAttrString((PyObject *) PY_TYPE(SpanPayloadCheckQuery$SpanPayloadCheckWeight), "class_", make_descriptor(SpanPayloadCheckQuery$SpanPayloadCheckWeight::initializeClass, 1));
            PyObject_SetAttrString((PyObject *) PY_TYPE(SpanPayloadCheckQuery$SpanPayloadCheckWeight), "wrapfn_", make_descriptor(t_SpanPayloadCheckQuery$SpanPayloadCheckWeight::wrap_jobject));
            PyObject_SetAttrString((PyObject *) PY_TYPE(SpanPayloadCheckQuery$SpanPayloadCheckWeight), "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_SpanPayloadCheckQuery$SpanPayloadCheckWeight_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, SpanPayloadCheckQuery$SpanPayloadCheckWeight::initializeClass, 1)))
              return NULL;
            return t_SpanPayloadCheckQuery$SpanPayloadCheckWeight::wrap_Object(SpanPayloadCheckQuery$SpanPayloadCheckWeight(((t_SpanPayloadCheckQuery$SpanPayloadCheckWeight *) arg)->object.this$));
          }
          static PyObject *t_SpanPayloadCheckQuery$SpanPayloadCheckWeight_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, SpanPayloadCheckQuery$SpanPayloadCheckWeight::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_SpanPayloadCheckQuery$SpanPayloadCheckWeight_init_(t_SpanPayloadCheckQuery$SpanPayloadCheckWeight *self, PyObject *args, PyObject *kwds)
          {
            ::org::apache::lucene::queries::payloads::SpanPayloadCheckQuery a0((jobject) NULL);
            ::org::apache::lucene::search::IndexSearcher a1((jobject) NULL);
            ::java::util::Map a2((jobject) NULL);
            PyTypeObject **p2;
            ::org::apache::lucene::search::spans::SpanWeight a3((jobject) NULL);
            jfloat a4;
            SpanPayloadCheckQuery$SpanPayloadCheckWeight object((jobject) NULL);

            if (!parseArgs(args, "kkKkF", ::org::apache::lucene::queries::payloads::SpanPayloadCheckQuery::initializeClass, ::org::apache::lucene::search::IndexSearcher::initializeClass, ::java::util::Map::initializeClass, ::org::apache::lucene::search::spans::SpanWeight::initializeClass, &a0, &a1, &a2, &p2, ::java::util::t_Map::parameters_, &a3, &a4))
            {
              INT_CALL(object = SpanPayloadCheckQuery$SpanPayloadCheckWeight(a0, a1, a2, a3, a4));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_SpanPayloadCheckQuery$SpanPayloadCheckWeight_extractTermStates(t_SpanPayloadCheckQuery$SpanPayloadCheckWeight *self, PyObject *args)
          {
            ::java::util::Map a0((jobject) NULL);
            PyTypeObject **p0;

            if (!parseArgs(args, "K", ::java::util::Map::initializeClass, &a0, &p0, ::java::util::t_Map::parameters_))
            {
              OBJ_CALL(self->object.extractTermStates(a0));
              Py_RETURN_NONE;
            }

            return callSuper(PY_TYPE(SpanPayloadCheckQuery$SpanPayloadCheckWeight), (PyObject *) self, "extractTermStates", args, 2);
          }

          static PyObject *t_SpanPayloadCheckQuery$SpanPayloadCheckWeight_extractTerms(t_SpanPayloadCheckQuery$SpanPayloadCheckWeight *self, PyObject *args)
          {
            ::java::util::Set a0((jobject) NULL);
            PyTypeObject **p0;

            if (!parseArgs(args, "K", ::java::util::Set::initializeClass, &a0, &p0, ::java::util::t_Set::parameters_))
            {
              OBJ_CALL(self->object.extractTerms(a0));
              Py_RETURN_NONE;
            }

            return callSuper(PY_TYPE(SpanPayloadCheckQuery$SpanPayloadCheckWeight), (PyObject *) self, "extractTerms", args, 2);
          }

          static PyObject *t_SpanPayloadCheckQuery$SpanPayloadCheckWeight_getSpans(t_SpanPayloadCheckQuery$SpanPayloadCheckWeight *self, PyObject *args)
          {
            ::org::apache::lucene::index::LeafReaderContext a0((jobject) NULL);
            ::org::apache::lucene::search::spans::SpanWeight$Postings a1((jobject) NULL);
            PyTypeObject **p1;
            ::org::apache::lucene::search::spans::Spans result((jobject) NULL);

            if (!parseArgs(args, "kK", ::org::apache::lucene::index::LeafReaderContext::initializeClass, ::org::apache::lucene::search::spans::SpanWeight$Postings::initializeClass, &a0, &a1, &p1, ::org::apache::lucene::search::spans::t_SpanWeight$Postings::parameters_))
            {
              OBJ_CALL(result = self->object.getSpans(a0, a1));
              return ::org::apache::lucene::search::spans::t_Spans::wrap_Object(result);
            }

            return callSuper(PY_TYPE(SpanPayloadCheckQuery$SpanPayloadCheckWeight), (PyObject *) self, "getSpans", args, 2);
          }

          static PyObject *t_SpanPayloadCheckQuery$SpanPayloadCheckWeight_isCacheable(t_SpanPayloadCheckQuery$SpanPayloadCheckWeight *self, PyObject *args)
          {
            ::org::apache::lucene::index::LeafReaderContext a0((jobject) NULL);
            jboolean result;

            if (!parseArgs(args, "k", ::org::apache::lucene::index::LeafReaderContext::initializeClass, &a0))
            {
              OBJ_CALL(result = self->object.isCacheable(a0));
              Py_RETURN_BOOL(result);
            }

            return callSuper(PY_TYPE(SpanPayloadCheckQuery$SpanPayloadCheckWeight), (PyObject *) self, "isCacheable", args, 2);
          }

          static PyObject *t_SpanPayloadCheckQuery$SpanPayloadCheckWeight_scorer(t_SpanPayloadCheckQuery$SpanPayloadCheckWeight *self, PyObject *args)
          {
            ::org::apache::lucene::index::LeafReaderContext a0((jobject) NULL);
            ::org::apache::lucene::search::spans::SpanScorer result((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::index::LeafReaderContext::initializeClass, &a0))
            {
              OBJ_CALL(result = self->object.scorer(a0));
              return ::org::apache::lucene::search::spans::t_SpanScorer::wrap_Object(result);
            }

            return callSuper(PY_TYPE(SpanPayloadCheckQuery$SpanPayloadCheckWeight), (PyObject *) self, "scorer", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queries/function/valuesource/JoinDocFreqValueSource.h"
#include "java/util/Map.h"
#include "org/apache/lucene/index/LeafReaderContext.h"
#include "org/apache/lucene/queries/function/FunctionValues.h"
#include "java/lang/Class.h"
#include "java/lang/Object.h"
#include "java/lang/String.h"
#include "java/io/IOException.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queries {
        namespace function {
          namespace valuesource {

            ::java::lang::Class *JoinDocFreqValueSource::class$ = NULL;
            jmethodID *JoinDocFreqValueSource::mids$ = NULL;
            bool JoinDocFreqValueSource::live$ = false;
            ::java::lang::String *JoinDocFreqValueSource::NAME = NULL;

            jclass JoinDocFreqValueSource::initializeClass(bool getOnly)
            {
              if (getOnly)
                return (jclass) (live$ ? class$->this$ : NULL);
              if (class$ == NULL)
              {
                jclass cls = (jclass) env->findClass("org/apache/lucene/queries/function/valuesource/JoinDocFreqValueSource");

                mids$ = new jmethodID[max_mid];
                mids$[mid_init$_15b72f6a44ff93f2] = env->getMethodID(cls, "<init>", "(Ljava/lang/String;Ljava/lang/String;)V");
                mids$[mid_description_db9b55ba01e03e4b] = env->getMethodID(cls, "description", "()Ljava/lang/String;");
                mids$[mid_equals_8b72f2dcdde6fd1d] = env->getMethodID(cls, "equals", "(Ljava/lang/Object;)Z");
                mids$[mid_getValues_ede8eccd3e97f32c] = env->getMethodID(cls, "getValues", "(Ljava/util/Map;Lorg/apache/lucene/index/LeafReaderContext;)Lorg/apache/lucene/queries/function/FunctionValues;");
                mids$[mid_hashCode_9972fcc56b44e79d] = env->getMethodID(cls, "hashCode", "()I");

                class$ = new ::java::lang::Class(cls);
                cls = (jclass) class$->this$;

                NAME = new ::java::lang::String(env->getStaticObjectField(cls, "NAME", "Ljava/lang/String;"));
                live$ = true;
              }
              return (jclass) class$->this$;
            }

            JoinDocFreqValueSource::JoinDocFreqValueSource(const ::java::lang::String & a0, const ::java::lang::String & a1) : ::org::apache::lucene::queries::function::valuesource::FieldCacheSource(env->newObject(initializeClass, &mids$, mid_init$_15b72f6a44ff93f2, a0.this$, a1.this$)) {}

            ::java::lang::String JoinDocFreqValueSource::description() const
            {
              return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_description_db9b55ba01e03e4b]));
            }

            jboolean JoinDocFreqValueSource::equals(const ::java::lang::Object & a0) const
            {
              return env->callBooleanMethod(this$, mids$[mid_equals_8b72f2dcdde6fd1d], a0.this$);
            }

            ::org::apache::lucene::queries::function::FunctionValues JoinDocFreqValueSource::getValues(const ::java::util::Map & a0, const ::org::apache::lucene::index::LeafReaderContext & a1) const
            {
              return ::org::apache::lucene::queries::function::FunctionValues(env->callObjectMethod(this$, mids$[mid_getValues_ede8eccd3e97f32c], a0.this$, a1.this$));
            }

            jint JoinDocFreqValueSource::hashCode() const
            {
              return env->callIntMethod(this$, mids$[mid_hashCode_9972fcc56b44e79d]);
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queries {
        namespace function {
          namespace valuesource {
            static PyObject *t_JoinDocFreqValueSource_cast_(PyTypeObject *type, PyObject *arg);
            static PyObject *t_JoinDocFreqValueSource_instance_(PyTypeObject *type, PyObject *arg);
            static int t_JoinDocFreqValueSource_init_(t_JoinDocFreqValueSource *self, PyObject *args, PyObject *kwds);
            static PyObject *t_JoinDocFreqValueSource_description(t_JoinDocFreqValueSource *self, PyObject *args);
            static PyObject *t_JoinDocFreqValueSource_equals(t_JoinDocFreqValueSource *self, PyObject *args);
            static PyObject *t_JoinDocFreqValueSource_getValues(t_JoinDocFreqValueSource *self, PyObject *args);
            static PyObject *t_JoinDocFreqValueSource_hashCode(t_JoinDocFreqValueSource *self, PyObject *args);

            static PyMethodDef t_JoinDocFreqValueSource__methods_[] = {
              DECLARE_METHOD(t_JoinDocFreqValueSource, cast_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_JoinDocFreqValueSource, instance_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_JoinDocFreqValueSource, description, METH_VARARGS),
              DECLARE_METHOD(t_JoinDocFreqValueSource, equals, METH_VARARGS),
              DECLARE_METHOD(t_JoinDocFreqValueSource, getValues, METH_VARARGS),
              DECLARE_METHOD(t_JoinDocFreqValueSource, hashCode, METH_VARARGS),
              { NULL, NULL, 0, NULL }
            };

            static PyType_Slot PY_TYPE_SLOTS(JoinDocFreqValueSource)[] = {
              { Py_tp_methods, t_JoinDocFreqValueSource__methods_ },
              { Py_tp_init, (void *) t_JoinDocFreqValueSource_init_ },
              { 0, NULL }
            };

            static PyType_Def *PY_TYPE_BASES(JoinDocFreqValueSource)[] = {
              &PY_TYPE_DEF(::org::apache::lucene::queries::function::valuesource::FieldCacheSource),
              NULL
            };

            DEFINE_TYPE(JoinDocFreqValueSource, t_JoinDocFreqValueSource, JoinDocFreqValueSource);

            void t_JoinDocFreqValueSource::install(PyObject *module)
            {
              installType(&PY_TYPE(JoinDocFreqValueSource), &PY_TYPE_DEF(JoinDocFreqValueSource), module, "JoinDocFreqValueSource", 0);
            }

            void t_JoinDocFreqValueSource::initialize(PyObject *module)
            {
              PyObject_SetAttrString((PyObject *) PY_TYPE(JoinDocFreqValueSource), "class_", make_descriptor(JoinDocFreqValueSource::initializeClass, 1));
              PyObject_SetAttrString((PyObject *) PY_TYPE(JoinDocFreqValueSource), "wrapfn_", make_descriptor(t_JoinDocFreqValueSource::wrap_jobject));
              PyObject_SetAttrString((PyObject *) PY_TYPE(JoinDocFreqValueSource), "boxfn_", make_descriptor(boxObject));
              env->getClass(JoinDocFreqValueSource::initializeClass);
              PyObject_SetAttrString((PyObject *) PY_TYPE(JoinDocFreqValueSource), "NAME", make_descriptor(j2p(*JoinDocFreqValueSource::NAME)));
            }

            static PyObject *t_JoinDocFreqValueSource_cast_(PyTypeObject *type, PyObject *arg)
            {
              if (!(arg = castCheck(arg, JoinDocFreqValueSource::initializeClass, 1)))
                return NULL;
              return t_JoinDocFreqValueSource::wrap_Object(JoinDocFreqValueSource(((t_JoinDocFreqValueSource *) arg)->object.this$));
            }
            static PyObject *t_JoinDocFreqValueSource_instance_(PyTypeObject *type, PyObject *arg)
            {
              if (!castCheck(arg, JoinDocFreqValueSource::initializeClass, 0))
                Py_RETURN_FALSE;
              Py_RETURN_TRUE;
            }

            static int t_JoinDocFreqValueSource_init_(t_JoinDocFreqValueSource *self, PyObject *args, PyObject *kwds)
            {
              ::java::lang::String a0((jobject) NULL);
              ::java::lang::String a1((jobject) NULL);
              JoinDocFreqValueSource object((jobject) NULL);

              if (!parseArgs(args, "ss", &a0, &a1))
              {
                INT_CALL(object = JoinDocFreqValueSource(a0, a1));
                self->object = object;
              }
              else
              {
                PyErr_SetArgsError((PyObject *) self, "__init__", args);
                return -1;
              }

              return 0;
            }

            static PyObject *t_JoinDocFreqValueSource_description(t_JoinDocFreqValueSource *self, PyObject *args)
            {
              ::java::lang::String result((jobject) NULL);

              if (!parseArgs(args, ""))
              {
                OBJ_CALL(result = self->object.description());
                return j2p(result);
              }

              return callSuper(PY_TYPE(JoinDocFreqValueSource), (PyObject *) self, "description", args, 2);
            }

            static PyObject *t_JoinDocFreqValueSource_equals(t_JoinDocFreqValueSource *self, PyObject *args)
            {
              ::java::lang::Object a0((jobject) NULL);
              jboolean result;

              if (!parseArgs(args, "o", &a0))
              {
                OBJ_CALL(result = self->object.equals(a0));
                Py_RETURN_BOOL(result);
              }

              return callSuper(PY_TYPE(JoinDocFreqValueSource), (PyObject *) self, "equals", args, 2);
            }

            static PyObject *t_JoinDocFreqValueSource_getValues(t_JoinDocFreqValueSource *self, PyObject *args)
            {
              ::java::util::Map a0((jobject) NULL);
              PyTypeObject **p0;
              ::org::apache::lucene::index::LeafReaderContext a1((jobject) NULL);
              ::org::apache::lucene::queries::function::FunctionValues result((jobject) NULL);

              if (!parseArgs(args, "Kk", ::java::util::Map::initializeClass, ::org::apache::lucene::index::LeafReaderContext::initializeClass, &a0, &p0, ::java::util::t_Map::parameters_, &a1))
              {
                OBJ_CALL(result = self->object.getValues(a0, a1));
                return ::org::apache::lucene::queries::function::t_FunctionValues::wrap_Object(result);
              }

              return callSuper(PY_TYPE(JoinDocFreqValueSource), (PyObject *) self, "getValues", args, 2);
            }

            static PyObject *t_JoinDocFreqValueSource_hashCode(t_JoinDocFreqValueSource *self, PyObject *args)
            {
              jint result;

              if (!parseArgs(args, ""))
              {
                OBJ_CALL(result = self->object.hashCode());
                return PyLong_FromLong((long) result);
              }

              return callSuper(PY_TYPE(JoinDocFreqValueSource), (PyObject *) self, "hashCode", args, 2);
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/codecs/lucene87/Lucene87Codec$Mode.h"
#include "java/lang/String.h"
#include "org/apache/lucene/codecs/lucene87/Lucene87Codec$Mode.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace codecs {
        namespace lucene87 {

          ::java::lang::Class *Lucene87Codec$Mode::class$ = NULL;
          jmethodID *Lucene87Codec$Mode::mids$ = NULL;
          bool Lucene87Codec$Mode::live$ = false;
          Lucene87Codec$Mode *Lucene87Codec$Mode::BEST_COMPRESSION = NULL;
          Lucene87Codec$Mode *Lucene87Codec$Mode::BEST_SPEED = NULL;

          jclass Lucene87Codec$Mode::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/codecs/lucene87/Lucene87Codec$Mode");

              mids$ = new jmethodID[max_mid];
              mids$[mid_valueOf_08745cf2204f411c] = env->getStaticMethodID(cls, "valueOf", "(Ljava/lang/String;)Lorg/apache/lucene/codecs/lucene87/Lucene87Codec$Mode;");
              mids$[mid_values_4fd6a8ec6da78870] = env->getStaticMethodID(cls, "values", "()[Lorg/apache/lucene/codecs/lucene87/Lucene87Codec$Mode;");

              class$ = new ::java::lang::Class(cls);
              cls = (jclass) class$->this$;

              BEST_COMPRESSION = new Lucene87Codec$Mode(env->getStaticObjectField(cls, "BEST_COMPRESSION", "Lorg/apache/lucene/codecs/lucene87/Lucene87Codec$Mode;"));
              BEST_SPEED = new Lucene87Codec$Mode(env->getStaticObjectField(cls, "BEST_SPEED", "Lorg/apache/lucene/codecs/lucene87/Lucene87Codec$Mode;"));
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          Lucene87Codec$Mode Lucene87Codec$Mode::valueOf(const ::java::lang::String & a0)
          {
            jclass cls = env->getClass(initializeClass);
            return Lucene87Codec$Mode(env->callStaticObjectMethod(cls, mids$[mid_valueOf_08745cf2204f411c], a0.this$));
          }

          JArray< Lucene87Codec$Mode > Lucene87Codec$Mode::values()
          {
            jclass cls = env->getClass(initializeClass);
            return JArray< Lucene87Codec$Mode >(env->callStaticObjectMethod(cls, mids$[mid_values_4fd6a8ec6da78870]));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace codecs {
        namespace lucene87 {
          static PyObject *t_Lucene87Codec$Mode_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_Lucene87Codec$Mode_instance_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_Lucene87Codec$Mode_of_(t_Lucene87Codec$Mode *self, PyObject *args);
          static PyObject *t_Lucene87Codec$Mode_valueOf(PyTypeObject *type, PyObject *args);
          static PyObject *t_Lucene87Codec$Mode_values(PyTypeObject *type);
          static PyObject *t_Lucene87Codec$Mode_get__parameters_(t_Lucene87Codec$Mode *self, void *data);
          static PyGetSetDef t_Lucene87Codec$Mode__fields_[] = {
            DECLARE_GET_FIELD(t_Lucene87Codec$Mode, parameters_),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_Lucene87Codec$Mode__methods_[] = {
            DECLARE_METHOD(t_Lucene87Codec$Mode, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_Lucene87Codec$Mode, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_Lucene87Codec$Mode, of_, METH_VARARGS),
            DECLARE_METHOD(t_Lucene87Codec$Mode, valueOf, METH_VARARGS | METH_CLASS),
            DECLARE_METHOD(t_Lucene87Codec$Mode, values, METH_NOARGS | METH_CLASS),
            { NULL, NULL, 0, NULL }
          };

          static PyType_Slot PY_TYPE_SLOTS(Lucene87Codec$Mode)[] = {
            { Py_tp_methods, t_Lucene87Codec$Mode__methods_ },
            { Py_tp_init, (void *) abstract_init },
            { Py_tp_getset, t_Lucene87Codec$Mode__fields_ },
            { 0, NULL }
          };

          static PyType_Def *PY_TYPE_BASES(Lucene87Codec$Mode)[] = {
            &PY_TYPE_DEF(::java::lang::Enum),
            NULL
          };

          DEFINE_TYPE(Lucene87Codec$Mode, t_Lucene87Codec$Mode, Lucene87Codec$Mode);
          PyObject *t_Lucene87Codec$Mode::wrap_Object(const Lucene87Codec$Mode& object, PyTypeObject *p0)
          {
            PyObject *obj = t_Lucene87Codec$Mode::wrap_Object(object);
            if (obj != NULL && obj != Py_None)
            {
              t_Lucene87Codec$Mode *self = (t_Lucene87Codec$Mode *) obj;
              self->parameters[0] = p0;
            }
            return obj;
          }

          PyObject *t_Lucene87Codec$Mode::wrap_jobject(const jobject& object, PyTypeObject *p0)
          {
            PyObject *obj = t_Lucene87Codec$Mode::wrap_jobject(object);
            if (obj != NULL && obj != Py_None)
            {
              t_Lucene87Codec$Mode *self = (t_Lucene87Codec$Mode *) obj;
              self->parameters[0] = p0;
            }
            return obj;
          }

          void t_Lucene87Codec$Mode::install(PyObject *module)
          {
            installType(&PY_TYPE(Lucene87Codec$Mode), &PY_TYPE_DEF(Lucene87Codec$Mode), module, "Lucene87Codec$Mode", 0);
          }

          void t_Lucene87Codec$Mode::initialize(PyObject *module)
          {
            PyObject_SetAttrString((PyObject *) PY_TYPE(Lucene87Codec$Mode), "class_", make_descriptor(Lucene87Codec$Mode::initializeClass, 1));
            PyObject_SetAttrString((PyObject *) PY_TYPE(Lucene87Codec$Mode), "wrapfn_", make_descriptor(t_Lucene87Codec$Mode::wrap_jobject));
            PyObject_SetAttrString((PyObject *) PY_TYPE(Lucene87Codec$Mode), "boxfn_", make_descriptor(boxObject));
            env->getClass(Lucene87Codec$Mode::initializeClass);
            PyObject_SetAttrString((PyObject *) PY_TYPE(Lucene87Codec$Mode), "BEST_COMPRESSION", make_descriptor(t_Lucene87Codec$Mode::wrap_Object(*Lucene87Codec$Mode::BEST_COMPRESSION)));
            PyObject_SetAttrString((PyObject *) PY_TYPE(Lucene87Codec$Mode), "BEST_SPEED", make_descriptor(t_Lucene87Codec$Mode::wrap_Object(*Lucene87Codec$Mode::BEST_SPEED)));
          }

          static PyObject *t_Lucene87Codec$Mode_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, Lucene87Codec$Mode::initializeClass, 1)))
              return NULL;
            return t_Lucene87Codec$Mode::wrap_Object(Lucene87Codec$Mode(((t_Lucene87Codec$Mode *) arg)->object.this$));
          }
          static PyObject *t_Lucene87Codec$Mode_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, Lucene87Codec$Mode::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static PyObject *t_Lucene87Codec$Mode_of_(t_Lucene87Codec$Mode *self, PyObject *args)
          {
            if (!parseArg(args, "T", 1, &(self->parameters)))
              Py_RETURN_SELF;
            return PyErr_SetArgsError((PyObject *) self, "of_", args);
          }

          static PyObject *t_Lucene87Codec$Mode_valueOf(PyTypeObject *type, PyObject *args)
          {
            ::java::lang::String a0((jobject) NULL);
            Lucene87Codec$Mode result((jobject) NULL);

            if (!parseArgs(args, "s", &a0))
            {
              OBJ_CALL(result = ::org::apache::lucene::codecs::lucene87::Lucene87Codec$Mode::valueOf(a0));
              return t_Lucene87Codec$Mode::wrap_Object(result);
            }

            return callSuper(type, "valueOf", args, 2);
          }

          static PyObject *t_Lucene87Codec$Mode_values(PyTypeObject *type)
          {
            JArray< Lucene87Codec$Mode > result((jobject) NULL);
            OBJ_CALL(result = ::org::apache::lucene::codecs::lucene87::Lucene87Codec$Mode::values());
            return JArray<jobject>(result.this$).wrap(t_Lucene87Codec$Mode::wrap_jobject);
          }
          static PyObject *t_Lucene87Codec$Mode_get__parameters_(t_Lucene87Codec$Mode *self, void *data)
          {
            return typeParameters(self->parameters, sizeof(self->parameters));
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/index/ConcurrentMergeScheduler.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/store/Directory.h"
#include "org/apache/lucene/index/MergePolicy$OneMerge.h"
#include "org/apache/lucene/index/MergeTrigger.h"
#include "java/lang/String.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/index/MergeScheduler$MergeSource.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {

        ::java::lang::Class *ConcurrentMergeScheduler::class$ = NULL;
        jmethodID *ConcurrentMergeScheduler::mids$ = NULL;
        bool ConcurrentMergeScheduler::live$ = false;
        jint ConcurrentMergeScheduler::AUTO_DETECT_MERGES_AND_THREADS = (jint) 0;
        ::java::lang::String *ConcurrentMergeScheduler::DEFAULT_CPU_CORE_COUNT_PROPERTY = NULL;
        ::java::lang::String *ConcurrentMergeScheduler::DEFAULT_SPINS_PROPERTY = NULL;

        jclass ConcurrentMergeScheduler::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/index/ConcurrentMergeScheduler");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_f2cc1bce94666404] = env->getMethodID(cls, "<init>", "()V");
            mids$[mid_close_f2cc1bce94666404] = env->getMethodID(cls, "close", "()V");
            mids$[mid_disableAutoIOThrottle_f2cc1bce94666404] = env->getMethodID(cls, "disableAutoIOThrottle", "()V");
            mids$[mid_enableAutoIOThrottle_f2cc1bce94666404] = env->getMethodID(cls, "enableAutoIOThrottle", "()V");
            mids$[mid_getAutoIOThrottle_8454bd5aa23fd11e] = env->getMethodID(cls, "getAutoIOThrottle", "()Z");
            mids$[mid_getForceMergeMBPerSec_8c74b787998ce4bc] = env->getMethodID(cls, "getForceMergeMBPerSec", "()D");
            mids$[mid_getIORateLimitMBPerSec_8c74b787998ce4bc] = env->getMethodID(cls, "getIORateLimitMBPerSec", "()D");
            mids$[mid_getMaxMergeCount_9972fcc56b44e79d] = env->getMethodID(cls, "getMaxMergeCount", "()I");
            mids$[mid_getMaxThreadCount_9972fcc56b44e79d] = env->getMethodID(cls, "getMaxThreadCount", "()I");
            mids$[mid_merge_d538047dffd358b1] = env->getMethodID(cls, "merge", "(Lorg/apache/lucene/index/MergeScheduler$MergeSource;Lorg/apache/lucene/index/MergeTrigger;)V");
            mids$[mid_mergeThreadCount_9972fcc56b44e79d] = env->getMethodID(cls, "mergeThreadCount", "()I");
            mids$[mid_setDefaultMaxMergesAndThreads_9d72768e8fdce2b7] = env->getMethodID(cls, "setDefaultMaxMergesAndThreads", "(Z)V");
            mids$[mid_setForceMergeMBPerSec_3c435f10a3b1e038] = env->getMethodID(cls, "setForceMergeMBPerSec", "(D)V");
            mids$[mid_setMaxMergesAndThreads_438c62480c481c65] = env->getMethodID(cls, "setMaxMergesAndThreads", "(II)V");
            mids$[mid_sync_f2cc1bce94666404] = env->getMethodID(cls, "sync", "()V");
            mids$[mid_toString_db9b55ba01e03e4b] = env->getMethodID(cls, "toString", "()Ljava/lang/String;");
            mids$[mid_wrapForMerge_44a548f62b1a07fc] = env->getMethodID(cls, "wrapForMerge", "(Lorg/apache/lucene/index/MergePolicy$OneMerge;Lorg/apache/lucene/store/Directory;)Lorg/apache/lucene/store/Directory;");
            mids$[mid_handleMergeException_471cfbdb800444a7] = env->getMethodID(cls, "handleMergeException", "(Ljava/lang/Throwable;)V");
            mids$[mid_updateMergeThreads_f2cc1bce94666404] = env->getMethodID(cls, "updateMergeThreads", "()V");
            mids$[mid_maybeStall_5bad7b33382dc900] = env->getMethodID(cls, "maybeStall", "(Lorg/apache/lucene/index/MergeScheduler$MergeSource;)Z");
            mids$[mid_doStall_f2cc1bce94666404] = env->getMethodID(cls, "doStall", "()V");
            mids$[mid_doMerge_c948bc497cbf33c2] = env->getMethodID(cls, "doMerge", "(Lorg/apache/lucene/index/MergeScheduler$MergeSource;Lorg/apache/lucene/index/MergePolicy$OneMerge;)V");
            mids$[mid_getMergeThread_025ff668b09a65a6] = env->getMethodID(cls, "getMergeThread", "(Lorg/apache/lucene/index/MergeScheduler$MergeSource;Lorg/apache/lucene/index/MergePolicy$OneMerge;)Lorg/apache/lucene/index/ConcurrentMergeScheduler$MergeThread;");
            mids$[mid_targetMBPerSecChanged_f2cc1bce94666404] = env->getMethodID(cls, "targetMBPerSecChanged", "()V");

            class$ = new ::java::lang::Class(cls);
            cls = (jclass) class$->this$;

            AUTO_DETECT_MERGES_AND_THREADS = env->getStaticIntField(cls, "AUTO_DETECT_MERGES_AND_THREADS");
            DEFAULT_CPU_CORE_COUNT_PROPERTY = new ::java::lang::String(env->getStaticObjectField(cls, "DEFAULT_CPU_CORE_COUNT_PROPERTY", "Ljava/lang/String;"));
            DEFAULT_SPINS_PROPERTY = new ::java::lang::String(env->getStaticObjectField(cls, "DEFAULT_SPINS_PROPERTY", "Ljava/lang/String;"));
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        ConcurrentMergeScheduler::ConcurrentMergeScheduler() : ::org::apache::lucene::index::MergeScheduler(env->newObject(initializeClass, &mids$, mid_init$_f2cc1bce94666404)) {}

        void ConcurrentMergeScheduler::close() const
        {
          env->callVoidMethod(this$, mids$[mid_close_f2cc1bce94666404]);
        }

        void ConcurrentMergeScheduler::disableAutoIOThrottle() const
        {
          env->callVoidMethod(this$, mids$[mid_disableAutoIOThrottle_f2cc1bce94666404]);
        }

        void ConcurrentMergeScheduler::enableAutoIOThrottle() const
        {
          env->callVoidMethod(this$, mids$[mid_enableAutoIOThrottle_f2cc1bce94666404]);
        }

        jboolean ConcurrentMergeScheduler::getAutoIOThrottle() const
        {
          return env->callBooleanMethod(this$, mids$[mid_getAutoIOThrottle_8454bd5aa23fd11e]);
        }

        jdouble ConcurrentMergeScheduler::getForceMergeMBPerSec() const
        {
          return env->callDoubleMethod(this$, mids$[mid_getForceMergeMBPerSec_8c74b787998ce4bc]);
        }

        jdouble ConcurrentMergeScheduler::getIORateLimitMBPerSec() const
        {
          return env->callDoubleMethod(this$, mids$[mid_getIORateLimitMBPerSec_8c74b787998ce4bc]);
        }

        jint ConcurrentMergeScheduler::getMaxMergeCount() const
        {
          return env->callIntMethod(this$, mids$[mid_getMaxMergeCount_9972fcc56b44e79d]);
        }

        jint ConcurrentMergeScheduler::getMaxThreadCount() const
        {
          return env->callIntMethod(this$, mids$[mid_getMaxThreadCount_9972fcc56b44e79d]);
        }

        void ConcurrentMergeScheduler::merge(const ::org::apache::lucene::index::MergeScheduler$MergeSource & a0, const ::org::apache::lucene::index::MergeTrigger & a1) const
        {
          env->callVoidMethod(this$, mids$[mid_merge_d538047dffd358b1], a0.this$, a1.this$);
        }

        jint ConcurrentMergeScheduler::mergeThreadCount() const
        {
          return env->callIntMethod(this$, mids$[mid_mergeThreadCount_9972fcc56b44e79d]);
        }

        void ConcurrentMergeScheduler::setDefaultMaxMergesAndThreads(jboolean a0) const
        {
          env->callVoidMethod(this$, mids$[mid_setDefaultMaxMergesAndThreads_9d72768e8fdce2b7], a0);
        }

        void ConcurrentMergeScheduler::setForceMergeMBPerSec(jdouble a0) const
        {
          env->callVoidMethod(this$, mids$[mid_setForceMergeMBPerSec_3c435f10a3b1e038], a0);
        }

        void ConcurrentMergeScheduler::setMaxMergesAndThreads(jint a0, jint a1) const
        {
          env->callVoidMethod(this$, mids$[mid_setMaxMergesAndThreads_438c62480c481c65], a0, a1);
        }

        void ConcurrentMergeScheduler::sync() const
        {
          env->callVoidMethod(this$, mids$[mid_sync_f2cc1bce94666404]);
        }

        ::java::lang::String ConcurrentMergeScheduler::toString() const
        {
          return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_db9b55ba01e03e4b]));
        }

        ::org::apache::lucene::store::Directory ConcurrentMergeScheduler::wrapForMerge(const ::org::apache::lucene::index::MergePolicy$OneMerge & a0, const ::org::apache::lucene::store::Directory & a1) const
        {
          return ::org::apache::lucene::store::Directory(env->callObjectMethod(this$, mids$[mid_wrapForMerge_44a548f62b1a07fc], a0.this$, a1.this$));
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {
        static PyObject *t_ConcurrentMergeScheduler_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_ConcurrentMergeScheduler_instance_(PyTypeObject *type, PyObject *arg);
        static int t_ConcurrentMergeScheduler_init_(t_ConcurrentMergeScheduler *self, PyObject *args, PyObject *kwds);
        static PyObject *t_ConcurrentMergeScheduler_close(t_ConcurrentMergeScheduler *self, PyObject *args);
        static PyObject *t_ConcurrentMergeScheduler_disableAutoIOThrottle(t_ConcurrentMergeScheduler *self);
        static PyObject *t_ConcurrentMergeScheduler_enableAutoIOThrottle(t_ConcurrentMergeScheduler *self);
        static PyObject *t_ConcurrentMergeScheduler_getAutoIOThrottle(t_ConcurrentMergeScheduler *self);
        static PyObject *t_ConcurrentMergeScheduler_getForceMergeMBPerSec(t_ConcurrentMergeScheduler *self);
        static PyObject *t_ConcurrentMergeScheduler_getIORateLimitMBPerSec(t_ConcurrentMergeScheduler *self);
        static PyObject *t_ConcurrentMergeScheduler_getMaxMergeCount(t_ConcurrentMergeScheduler *self);
        static PyObject *t_ConcurrentMergeScheduler_getMaxThreadCount(t_ConcurrentMergeScheduler *self);
        static PyObject *t_ConcurrentMergeScheduler_merge(t_ConcurrentMergeScheduler *self, PyObject *args);
        static PyObject *t_ConcurrentMergeScheduler_mergeThreadCount(t_ConcurrentMergeScheduler *self);
        static PyObject *t_ConcurrentMergeScheduler_setDefaultMaxMergesAndThreads(t_ConcurrentMergeScheduler *self, PyObject *arg);
        static PyObject *t_ConcurrentMergeScheduler_setForceMergeMBPerSec(t_ConcurrentMergeScheduler *self, PyObject *arg);
        static PyObject *t_ConcurrentMergeScheduler_setMaxMergesAndThreads(t_ConcurrentMergeScheduler *self, PyObject *args);
        static PyObject *t_ConcurrentMergeScheduler_sync(t_ConcurrentMergeScheduler *self);
        static PyObject *t_ConcurrentMergeScheduler_toString(t_ConcurrentMergeScheduler *self, PyObject *args);
        static PyObject *t_ConcurrentMergeScheduler_wrapForMerge(t_ConcurrentMergeScheduler *self, PyObject *args);
        static PyObject *t_ConcurrentMergeScheduler_get__autoIOThrottle(t_ConcurrentMergeScheduler *self, void *data);
        static int t_ConcurrentMergeScheduler_set__defaultMaxMergesAndThreads(t_ConcurrentMergeScheduler *self, PyObject *arg, void *data);
        static PyObject *t_ConcurrentMergeScheduler_get__forceMergeMBPerSec(t_ConcurrentMergeScheduler *self, void *data);
        static int t_ConcurrentMergeScheduler_set__forceMergeMBPerSec(t_ConcurrentMergeScheduler *self, PyObject *arg, void *data);
        static PyObject *t_ConcurrentMergeScheduler_get__iORateLimitMBPerSec(t_ConcurrentMergeScheduler *self, void *data);
        static PyObject *t_ConcurrentMergeScheduler_get__maxMergeCount(t_ConcurrentMergeScheduler *self, void *data);
        static PyObject *t_ConcurrentMergeScheduler_get__maxThreadCount(t_ConcurrentMergeScheduler *self, void *data);
        static PyGetSetDef t_ConcurrentMergeScheduler__fields_[] = {
          DECLARE_GET_FIELD(t_ConcurrentMergeScheduler, autoIOThrottle),
          DECLARE_SET_FIELD(t_ConcurrentMergeScheduler, defaultMaxMergesAndThreads),
          DECLARE_GETSET_FIELD(t_ConcurrentMergeScheduler, forceMergeMBPerSec),
          DECLARE_GET_FIELD(t_ConcurrentMergeScheduler, iORateLimitMBPerSec),
          DECLARE_GET_FIELD(t_ConcurrentMergeScheduler, maxMergeCount),
          DECLARE_GET_FIELD(t_ConcurrentMergeScheduler, maxThreadCount),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_ConcurrentMergeScheduler__methods_[] = {
          DECLARE_METHOD(t_ConcurrentMergeScheduler, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_ConcurrentMergeScheduler, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_ConcurrentMergeScheduler, close, METH_VARARGS),
          DECLARE_METHOD(t_ConcurrentMergeScheduler, disableAutoIOThrottle, METH_NOARGS),
          DECLARE_METHOD(t_ConcurrentMergeScheduler, enableAutoIOThrottle, METH_NOARGS),
          DECLARE_METHOD(t_ConcurrentMergeScheduler, getAutoIOThrottle, METH_NOARGS),
          DECLARE_METHOD(t_ConcurrentMergeScheduler, getForceMergeMBPerSec, METH_NOARGS),
          DECLARE_METHOD(t_ConcurrentMergeScheduler, getIORateLimitMBPerSec, METH_NOARGS),
          DECLARE_METHOD(t_ConcurrentMergeScheduler, getMaxMergeCount, METH_NOARGS),
          DECLARE_METHOD(t_ConcurrentMergeScheduler, getMaxThreadCount, METH_NOARGS),
          DECLARE_METHOD(t_ConcurrentMergeScheduler, merge, METH_VARARGS),
          DECLARE_METHOD(t_ConcurrentMergeScheduler, mergeThreadCount, METH_NOARGS),
          DECLARE_METHOD(t_ConcurrentMergeScheduler, setDefaultMaxMergesAndThreads, METH_O),
          DECLARE_METHOD(t_ConcurrentMergeScheduler, setForceMergeMBPerSec, METH_O),
          DECLARE_METHOD(t_ConcurrentMergeScheduler, setMaxMergesAndThreads, METH_VARARGS),
          DECLARE_METHOD(t_ConcurrentMergeScheduler, sync, METH_NOARGS),
          DECLARE_METHOD(t_ConcurrentMergeScheduler, toString, METH_VARARGS),
          DECLARE_METHOD(t_ConcurrentMergeScheduler, wrapForMerge, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        static PyType_Slot PY_TYPE_SLOTS(ConcurrentMergeScheduler)[] = {
          { Py_tp_methods, t_ConcurrentMergeScheduler__methods_ },
          { Py_tp_init, (void *) t_ConcurrentMergeScheduler_init_ },
          { Py_tp_getset, t_ConcurrentMergeScheduler__fields_ },
          { 0, NULL }
        };

        static PyType_Def *PY_TYPE_BASES(ConcurrentMergeScheduler)[] = {
          &PY_TYPE_DEF(::org::apache::lucene::index::MergeScheduler),
          NULL
        };

        DEFINE_TYPE(ConcurrentMergeScheduler, t_ConcurrentMergeScheduler, ConcurrentMergeScheduler);

        void t_ConcurrentMergeScheduler::install(PyObject *module)
        {
          installType(&PY_TYPE(ConcurrentMergeScheduler), &PY_TYPE_DEF(ConcurrentMergeScheduler), module, "ConcurrentMergeScheduler", 0);
        }

        void t_ConcurrentMergeScheduler::initialize(PyObject *module)
        {
          PyObject_SetAttrString((PyObject *) PY_TYPE(ConcurrentMergeScheduler), "class_", make_descriptor(ConcurrentMergeScheduler::initializeClass, 1));
          PyObject_SetAttrString((PyObject *) PY_TYPE(ConcurrentMergeScheduler), "wrapfn_", make_descriptor(t_ConcurrentMergeScheduler::wrap_jobject));
          PyObject_SetAttrString((PyObject *) PY_TYPE(ConcurrentMergeScheduler), "boxfn_", make_descriptor(boxObject));
          env->getClass(ConcurrentMergeScheduler::initializeClass);
          PyObject_SetAttrString((PyObject *) PY_TYPE(ConcurrentMergeScheduler), "AUTO_DETECT_MERGES_AND_THREADS", make_descriptor(ConcurrentMergeScheduler::AUTO_DETECT_MERGES_AND_THREADS));
          PyObject_SetAttrString((PyObject *) PY_TYPE(ConcurrentMergeScheduler), "DEFAULT_CPU_CORE_COUNT_PROPERTY", make_descriptor(j2p(*ConcurrentMergeScheduler::DEFAULT_CPU_CORE_COUNT_PROPERTY)));
          PyObject_SetAttrString((PyObject *) PY_TYPE(ConcurrentMergeScheduler), "DEFAULT_SPINS_PROPERTY", make_descriptor(j2p(*ConcurrentMergeScheduler::DEFAULT_SPINS_PROPERTY)));
        }

        static PyObject *t_ConcurrentMergeScheduler_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, ConcurrentMergeScheduler::initializeClass, 1)))
            return NULL;
          return t_ConcurrentMergeScheduler::wrap_Object(ConcurrentMergeScheduler(((t_ConcurrentMergeScheduler *) arg)->object.this$));
        }
        static PyObject *t_ConcurrentMergeScheduler_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, ConcurrentMergeScheduler::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_ConcurrentMergeScheduler_init_(t_ConcurrentMergeScheduler *self, PyObject *args, PyObject *kwds)
        {
          ConcurrentMergeScheduler object((jobject) NULL);

          INT_CALL(object = ConcurrentMergeScheduler());
          self->object = object;

          return 0;
        }

        static PyObject *t_ConcurrentMergeScheduler_close(t_ConcurrentMergeScheduler *self, PyObject *args)
        {

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(self->object.close());
            Py_RETURN_NONE;
          }

          return callSuper(PY_TYPE(ConcurrentMergeScheduler), (PyObject *) self, "close", args, 2);
        }

        static PyObject *t_ConcurrentMergeScheduler_disableAutoIOThrottle(t_ConcurrentMergeScheduler *self)
        {
          OBJ_CALL(self->object.disableAutoIOThrottle());
          Py_RETURN_NONE;
        }

        static PyObject *t_ConcurrentMergeScheduler_enableAutoIOThrottle(t_ConcurrentMergeScheduler *self)
        {
          OBJ_CALL(self->object.enableAutoIOThrottle());
          Py_RETURN_NONE;
        }

        static PyObject *t_ConcurrentMergeScheduler_getAutoIOThrottle(t_ConcurrentMergeScheduler *self)
        {
          jboolean result;
          OBJ_CALL(result = self->object.getAutoIOThrottle());
          Py_RETURN_BOOL(result);
        }

        static PyObject *t_ConcurrentMergeScheduler_getForceMergeMBPerSec(t_ConcurrentMergeScheduler *self)
        {
          jdouble result;
          OBJ_CALL(result = self->object.getForceMergeMBPerSec());
          return PyFloat_FromDouble((double) result);
        }

        static PyObject *t_ConcurrentMergeScheduler_getIORateLimitMBPerSec(t_ConcurrentMergeScheduler *self)
        {
          jdouble result;
          OBJ_CALL(result = self->object.getIORateLimitMBPerSec());
          return PyFloat_FromDouble((double) result);
        }

        static PyObject *t_ConcurrentMergeScheduler_getMaxMergeCount(t_ConcurrentMergeScheduler *self)
        {
          jint result;
          OBJ_CALL(result = self->object.getMaxMergeCount());
          return PyLong_FromLong((long) result);
        }

        static PyObject *t_ConcurrentMergeScheduler_getMaxThreadCount(t_ConcurrentMergeScheduler *self)
        {
          jint result;
          OBJ_CALL(result = self->object.getMaxThreadCount());
          return PyLong_FromLong((long) result);
        }

        static PyObject *t_ConcurrentMergeScheduler_merge(t_ConcurrentMergeScheduler *self, PyObject *args)
        {
          ::org::apache::lucene::index::MergeScheduler$MergeSource a0((jobject) NULL);
          ::org::apache::lucene::index::MergeTrigger a1((jobject) NULL);
          PyTypeObject **p1;

          if (!parseArgs(args, "kK", ::org::apache::lucene::index::MergeScheduler$MergeSource::initializeClass, ::org::apache::lucene::index::MergeTrigger::initializeClass, &a0, &a1, &p1, ::org::apache::lucene::index::t_MergeTrigger::parameters_))
          {
            OBJ_CALL(self->object.merge(a0, a1));
            Py_RETURN_NONE;
          }

          return callSuper(PY_TYPE(ConcurrentMergeScheduler), (PyObject *) self, "merge", args, 2);
        }

        static PyObject *t_ConcurrentMergeScheduler_mergeThreadCount(t_ConcurrentMergeScheduler *self)
        {
          jint result;
          OBJ_CALL(result = self->object.mergeThreadCount());
          return PyLong_FromLong((long) result);
        }

        static PyObject *t_ConcurrentMergeScheduler_setDefaultMaxMergesAndThreads(t_ConcurrentMergeScheduler *self, PyObject *arg)
        {
          jboolean a0;

          if (!parseArg(arg, "Z", &a0))
          {
            OBJ_CALL(self->object.setDefaultMaxMergesAndThreads(a0));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "setDefaultMaxMergesAndThreads", arg);
          return NULL;
        }

        static PyObject *t_ConcurrentMergeScheduler_setForceMergeMBPerSec(t_ConcurrentMergeScheduler *self, PyObject *arg)
        {
          jdouble a0;

          if (!parseArg(arg, "D", &a0))
          {
            OBJ_CALL(self->object.setForceMergeMBPerSec(a0));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "setForceMergeMBPerSec", arg);
          return NULL;
        }

        static PyObject *t_ConcurrentMergeScheduler_setMaxMergesAndThreads(t_ConcurrentMergeScheduler *self, PyObject *args)
        {
          jint a0;
          jint a1;

          if (!parseArgs(args, "II", &a0, &a1))
          {
            OBJ_CALL(self->object.setMaxMergesAndThreads(a0, a1));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "setMaxMergesAndThreads", args);
          return NULL;
        }

        static PyObject *t_ConcurrentMergeScheduler_sync(t_ConcurrentMergeScheduler *self)
        {
          OBJ_CALL(self->object.sync());
          Py_RETURN_NONE;
        }

        static PyObject *t_ConcurrentMergeScheduler_toString(t_ConcurrentMergeScheduler *self, PyObject *args)
        {
          ::java::lang::String result((jobject) NULL);

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.toString());
            return j2p(result);
          }

          return callSuper(PY_TYPE(ConcurrentMergeScheduler), (PyObject *) self, "toString", args, 2);
        }

        static PyObject *t_ConcurrentMergeScheduler_wrapForMerge(t_ConcurrentMergeScheduler *self, PyObject *args)
        {
          ::org::apache::lucene::index::MergePolicy$OneMerge a0((jobject) NULL);
          ::org::apache::lucene::store::Directory a1((jobject) NULL);
          ::org::apache::lucene::store::Directory result((jobject) NULL);

          if (!parseArgs(args, "kk", ::org::apache::lucene::index::MergePolicy$OneMerge::initializeClass, ::org::apache::lucene::store::Directory::initializeClass, &a0, &a1))
          {
            OBJ_CALL(result = self->object.wrapForMerge(a0, a1));
            return ::org::apache::lucene::store::t_Directory::wrap_Object(result);
          }

          return callSuper(PY_TYPE(ConcurrentMergeScheduler), (PyObject *) self, "wrapForMerge", args, 2);
        }

        static PyObject *t_ConcurrentMergeScheduler_get__autoIOThrottle(t_ConcurrentMergeScheduler *self, void *data)
        {
          jboolean value;
          OBJ_CALL(value = self->object.getAutoIOThrottle());
          Py_RETURN_BOOL(value);
        }

        static int t_ConcurrentMergeScheduler_set__defaultMaxMergesAndThreads(t_ConcurrentMergeScheduler *self, PyObject *arg, void *data)
        {
          {
            jboolean value;
            if (!parseArg(arg, "Z", &value))
            {
              INT_CALL(self->object.setDefaultMaxMergesAndThreads(value));
              return 0;
            }
          }
          PyErr_SetArgsError((PyObject *) self, "defaultMaxMergesAndThreads", arg);
          return -1;
        }

        static PyObject *t_ConcurrentMergeScheduler_get__forceMergeMBPerSec(t_ConcurrentMergeScheduler *self, void *data)
        {
          jdouble value;
          OBJ_CALL(value = self->object.getForceMergeMBPerSec());
          return PyFloat_FromDouble((double) value);
        }
        static int t_ConcurrentMergeScheduler_set__forceMergeMBPerSec(t_ConcurrentMergeScheduler *self, PyObject *arg, void *data)
        {
          {
            jdouble value;
            if (!parseArg(arg, "D", &value))
            {
              INT_CALL(self->object.setForceMergeMBPerSec(value));
              return 0;
            }
          }
          PyErr_SetArgsError((PyObject *) self, "forceMergeMBPerSec", arg);
          return -1;
        }

        static PyObject *t_ConcurrentMergeScheduler_get__iORateLimitMBPerSec(t_ConcurrentMergeScheduler *self, void *data)
        {
          jdouble value;
          OBJ_CALL(value = self->object.getIORateLimitMBPerSec());
          return PyFloat_FromDouble((double) value);
        }

        static PyObject *t_ConcurrentMergeScheduler_get__maxMergeCount(t_ConcurrentMergeScheduler *self, void *data)
        {
          jint value;
          OBJ_CALL(value = self->object.getMaxMergeCount());
          return PyLong_FromLong((long) value);
        }

        static PyObject *t_ConcurrentMergeScheduler_get__maxThreadCount(t_ConcurrentMergeScheduler *self, void *data)
        {
          jint value;
          OBJ_CALL(value = self->object.getMaxThreadCount());
          return PyLong_FromLong((long) value);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "java/lang/Thread.h"
#include "java/util/Map.h"
#include "java/lang/ClassLoader.h"
#include "java/lang/ThreadGroup.h"
#include "java/lang/Class.h"
#include "java/lang/Thread$UncaughtExceptionHandler.h"
#include "java/lang/StackTraceElement.h"
#include "java/lang/Thread$State.h"
#include "java/lang/Runnable.h"
#include "java/lang/String.h"
#include "java/lang/InterruptedException.h"
#include "java/lang/Thread.h"
#include "java/lang/Throwable.h"
#include "JArray.h"

namespace java {
  namespace lang {

    ::java::lang::Class *Thread::class$ = NULL;
    jmethodID *Thread::mids$ = NULL;
    bool Thread::live$ = false;
    jint Thread::MAX_PRIORITY = (jint) 0;
    jint Thread::MIN_PRIORITY = (jint) 0;
    jint Thread::NORM_PRIORITY = (jint) 0;

    jclass Thread::initializeClass(bool getOnly)
    {
      if (getOnly)
        return (jclass) (live$ ? class$->this$ : NULL);
      if (class$ == NULL)
      {
        jclass cls = (jclass) env->findClass("java/lang/Thread");

        mids$ = new jmethodID[max_mid];
        mids$[mid_init$_f2cc1bce94666404] = env->getMethodID(cls, "<init>", "()V");
        mids$[mid_init$_9fd2eb66a64e6f0f] = env->getMethodID(cls, "<init>", "(Ljava/lang/String;)V");
        mids$[mid_init$_81586dca3e83f35f] = env->getMethodID(cls, "<init>", "(Ljava/lang/Runnable;)V");
        mids$[mid_init$_1dfb4df15ca2768b] = env->getMethodID(cls, "<init>", "(Ljava/lang/ThreadGroup;Ljava/lang/String;)V");
        mids$[mid_init$_b5f522c8d8a66ce7] = env->getMethodID(cls, "<init>", "(Ljava/lang/ThreadGroup;Ljava/lang/Runnable;)V");
        mids$[mid_init$_7bab04f9bc5e199c] = env->getMethodID(cls, "<init>", "(Ljava/lang/Runnable;Ljava/lang/String;)V");
        mids$[mid_init$_6fa1f8e83014b39b] = env->getMethodID(cls, "<init>", "(Ljava/lang/ThreadGroup;Ljava/lang/Runnable;Ljava/lang/String;)V");
        mids$[mid_init$_f0c22eb6816cc557] = env->getMethodID(cls, "<init>", "(Ljava/lang/ThreadGroup;Ljava/lang/Runnable;Ljava/lang/String;J)V");
        mids$[mid_activeCount_9972fcc56b44e79d] = env->getStaticMethodID(cls, "activeCount", "()I");
        mids$[mid_checkAccess_f2cc1bce94666404] = env->getMethodID(cls, "checkAccess", "()V");
        mids$[mid_countStackFrames_9972fcc56b44e79d] = env->getMethodID(cls, "countStackFrames", "()I");
        mids$[mid_currentThread_a12dfffca9b3641a] = env->getStaticMethodID(cls, "currentThread", "()Ljava/lang/Thread;");
        mids$[mid_destroy_f2cc1bce94666404] = env->getMethodID(cls, "destroy", "()V");
        mids$[mid_dumpStack_f2cc1bce94666404] = env->getStaticMethodID(cls, "dumpStack", "()V");
        mids$[mid_enumerate_6735bbb14792d0b6] = env->getStaticMethodID(cls, "enumerate", "([Ljava/lang/Thread;)I");
        mids$[mid_getAllStackTraces_1c3426541413a55d] = env->getStaticMethodID(cls, "getAllStackTraces", "()Ljava/util/Map;");
        mids$[mid_getContextClassLoader_62052cb9b95d8b0c] = env->getMethodID(cls, "getContextClassLoader", "()Ljava/lang/ClassLoader;");
        mids$[mid_getDefaultUncaughtExceptionHandler_4760d5b8472495aa] = env->getStaticMethodID(cls, "getDefaultUncaughtExceptionHandler", "()Ljava/lang/Thread$UncaughtExceptionHandler;");
        mids$[mid_getId_2e5ae9edcb9b072f] = env->getMethodID(cls, "getId", "()J");
        mids$[mid_getName_db9b55ba01e03e4b] = env->getMethodID(cls, "getName", "()Ljava/lang/String;");
        mids$[mid_getPriority_9972fcc56b44e79d] = env->getMethodID(cls, "getPriority", "()I");
        mids$[mid_getStackTrace_e23550404f2bac73] = env->getMethodID(cls, "getStackTrace", "()[Ljava/lang/StackTraceElement;");
        mids$[mid_getState_43d69d4a615b2e5a] = env->getMethodID(cls, "getState", "()Ljava/lang/Thread$State;");
        mids$[mid_getThreadGroup_04b6c2a69b2c4912] = env->getMethodID(cls, "getThreadGroup", "()Ljava/lang/ThreadGroup;");
        mids$[mid_getUncaughtExceptionHandler_4760d5b8472495aa] = env->getMethodID(cls, "getUncaughtExceptionHandler", "()Ljava/lang/Thread$UncaughtExceptionHandler;");
        mids$[mid_holdsLock_8b72f2dcdde6fd1d] = env->getStaticMethodID(cls, "holdsLock", "(Ljava/lang/Object;)Z");
        mids$[mid_interrupt_f2cc1bce94666404] = env->getMethodID(cls, "interrupt", "()V");
        mids$[mid_interrupted_8454bd5aa23fd11e] = env->getStaticMethodID(cls, "interrupted", "()Z");
        mids$[mid_isAlive_8454bd5aa23fd11e] = env->getMethodID(cls, "isAlive", "()Z");
        mids$[mid_isDaemon_8454bd5aa23fd11e] = env->getMethodID(cls, "isDaemon", "()Z");
        mids$[mid_isInterrupted_8454bd5aa23fd11e] = env->getMethodID(cls, "isInterrupted", "()Z");
        mids$[mid_join_f2cc1bce94666404] = env->getMethodID(cls, "join", "()V");
        mids$[mid_join_9c778c9bce6694df] = env->getMethodID(cls, "join", "(J)V");
        mids$[mid_join_7cbcb52ba5068aff] = env->getMethodID(cls, "join", "(JI)V");
        mids$[mid_resume_f2cc1bce94666404] = env->getMethodID(cls, "resume", "()V");
        mids$[mid_run_f2cc1bce94666404] = env->getMethodID(cls, "run", "()V");
        mids$[mid_setContextClassLoader_98a876e82795b112] = env->getMethodID(cls, "setContextClassLoader", "(Ljava/lang/ClassLoader;)V");
        mids$[mid_setDaemon_9d72768e8fdce2b7] = env->getMethodID(cls, "setDaemon", "(Z)V");
        mids$[mid_setDefaultUncaughtExceptionHandler_178167206395caa2] = env->getStaticMethodID(cls, "setDefaultUncaughtExceptionHandler", "(Ljava/lang/Thread$UncaughtExceptionHandler;)V");
        mids$[mid_setName_9fd2eb66a64e6f0f] = env->getMethodID(cls, "setName", "(Ljava/lang/String;)V");
        mids$[mid_setPriority_040c4cd0390c5aff] = env->getMethodID(cls, "setPriority", "(I)V");
        mids$[mid_setUncaughtExceptionHandler_178167206395caa2] = env->getMethodID(cls, "setUncaughtExceptionHandler", "(Ljava/lang/Thread$UncaughtExceptionHandler;)V");
        mids$[mid_sleep_9c778c9bce6694df] = env->getStaticMethodID(cls, "sleep", "(J)V");
        mids$[mid_sleep_7cbcb52ba5068aff] = env->getStaticMethodID(cls, "sleep", "(JI)V");
        mids$[mid_start_f2cc1bce94666404] = env->getMethodID(cls, "start", "()V");
        mids$[mid_stop_f2cc1bce94666404] = env->getMethodID(cls, "stop", "()V");
        mids$[mid_stop_471cfbdb800444a7] = env->getMethodID(cls, "stop", "(Ljava/lang/Throwable;)V");
        mids$[mid_suspend_f2cc1bce94666404] = env->getMethodID(cls, "suspend", "()V");
        mids$[mid_toString_db9b55ba01e03e4b] = env->getMethodID(cls, "toString", "()Ljava/lang/String;");
        mids$[mid_yield_f2cc1bce94666404] = env->getStaticMethodID(cls, "yield", "()V");
        mids$[mid_clone_d6bcd06f3102c4d9] = env->getMethodID(cls, "clone", "()Ljava/lang/Object;");

        class$ = new ::java::lang::Class(cls);
        cls = (jclass) class$->this$;

        MAX_PRIORITY = env->getStaticIntField(cls, "MAX_PRIORITY");
        MIN_PRIORITY = env->getStaticIntField(cls, "MIN_PRIORITY");
        NORM_PRIORITY = env->getStaticIntField(cls, "NORM_PRIORITY");
        live$ = true;
      }
      return (jclass) class$->this$;
    }

    Thread::Thread() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_f2cc1bce94666404)) {}

    Thread::Thread(const ::java::lang::String & a0) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_9fd2eb66a64e6f0f, a0.this$)) {}

    Thread::Thread(const ::java::lang::Runnable & a0) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_81586dca3e83f35f, a0.this$)) {}

    Thread::Thread(const ::java::lang::ThreadGroup & a0, const ::java::lang::String & a1) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_1dfb4df15ca2768b, a0.this$, a1.this$)) {}

    Thread::Thread(const ::java::lang::ThreadGroup & a0, const ::java::lang::Runnable & a1) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_b5f522c8d8a66ce7, a0.this$, a1.this$)) {}

    Thread::Thread(const ::java::lang::Runnable & a0, const ::java::lang::String & a1) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_7bab04f9bc5e199c, a0.this$, a1.this$)) {}

    Thread::Thread(const ::java::lang::ThreadGroup & a0, const ::java::lang::Runnable & a1, const ::java::lang::String & a2) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_6fa1f8e83014b39b, a0.this$, a1.this$, a2.this$)) {}

    Thread::Thread(const ::java::lang::ThreadGroup & a0, const ::java::lang::Runnable & a1, const ::java::lang::String & a2, jlong a3) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_f0c22eb6816cc557, a0.this$, a1.this$, a2.this$, a3)) {}

    jint Thread::activeCount()
    {
      jclass cls = env->getClass(initializeClass);
      return env->callStaticIntMethod(cls, mids$[mid_activeCount_9972fcc56b44e79d]);
    }

    void Thread::checkAccess() const
    {
      env->callVoidMethod(this$, mids$[mid_checkAccess_f2cc1bce94666404]);
    }

    jint Thread::countStackFrames() const
    {
      return env->callIntMethod(this$, mids$[mid_countStackFrames_9972fcc56b44e79d]);
    }

    Thread Thread::currentThread()
    {
      jclass cls = env->getClass(initializeClass);
      return Thread(env->callStaticObjectMethod(cls, mids$[mid_currentThread_a12dfffca9b3641a]));
    }

    void Thread::destroy() const
    {
      env->callVoidMethod(this$, mids$[mid_destroy_f2cc1bce94666404]);
    }

    void Thread::dumpStack()
    {
      jclass cls = env->getClass(initializeClass);
      env->callStaticVoidMethod(cls, mids$[mid_dumpStack_f2cc1bce94666404]);
    }

    jint Thread::enumerate(const JArray< Thread > & a0)
    {
      jclass cls = env->getClass(initializeClass);
      return env->callStaticIntMethod(cls, mids$[mid_enumerate_6735bbb14792d0b6], a0.this$);
    }

    ::java::util::Map Thread::getAllStackTraces()
    {
      jclass cls = env->getClass(initializeClass);
      return ::java::util::Map(env->callStaticObjectMethod(cls, mids$[mid_getAllStackTraces_1c3426541413a55d]));
    }

    ::java::lang::ClassLoader Thread::getContextClassLoader() const
    {
      return ::java::lang::ClassLoader(env->callObjectMethod(this$, mids$[mid_getContextClassLoader_62052cb9b95d8b0c]));
    }

    ::java::lang::Thread$UncaughtExceptionHandler Thread::getDefaultUncaughtExceptionHandler()
    {
      jclass cls = env->getClass(initializeClass);
      return ::java::lang::Thread$UncaughtExceptionHandler(env->callStaticObjectMethod(cls, mids$[mid_getDefaultUncaughtExceptionHandler_4760d5b8472495aa]));
    }

    jlong Thread::getId() const
    {
      return env->callLongMethod(this$, mids$[mid_getId_2e5ae9edcb9b072f]);
    }

    ::java::lang::String Thread::getName() const
    {
      return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_getName_db9b55ba01e03e4b]));
    }

    jint Thread::getPriority() const
    {
      return env->callIntMethod(this$, mids$[mid_getPriority_9972fcc56b44e79d]);
    }

    JArray< ::java::lang::StackTraceElement > Thread::getStackTrace() const
    {
      return JArray< ::java::lang::StackTraceElement >(env->callObjectMethod(this$, mids$[mid_getStackTrace_e23550404f2bac73]));
    }

    ::java::lang::Thread$State Thread::getState() const
    {
      return ::java::lang::Thread$State(env->callObjectMethod(this$, mids$[mid_getState_43d69d4a615b2e5a]));
    }

    ::java::lang::ThreadGroup Thread::getThreadGroup() const
    {
      return ::java::lang::ThreadGroup(env->callObjectMethod(this$, mids$[mid_getThreadGroup_04b6c2a69b2c4912]));
    }

    ::java::lang::Thread$UncaughtExceptionHandler Thread::getUncaughtExceptionHandler() const
    {
      return ::java::lang::Thread$UncaughtExceptionHandler(env->callObjectMethod(this$, mids$[mid_getUncaughtExceptionHandler_4760d5b8472495aa]));
    }

    jboolean Thread::holdsLock(const ::java::lang::Object & a0)
    {
      jclass cls = env->getClass(initializeClass);
      return env->callStaticBooleanMethod(cls, mids$[mid_holdsLock_8b72f2dcdde6fd1d], a0.this$);
    }

    void Thread::interrupt() const
    {
      env->callVoidMethod(this$, mids$[mid_interrupt_f2cc1bce94666404]);
    }

    jboolean Thread::interrupted()
    {
      jclass cls = env->getClass(initializeClass);
      return env->callStaticBooleanMethod(cls, mids$[mid_interrupted_8454bd5aa23fd11e]);
    }

    jboolean Thread::isAlive() const
    {
      return env->callBooleanMethod(this$, mids$[mid_isAlive_8454bd5aa23fd11e]);
    }

    jboolean Thread::isDaemon() const
    {
      return env->callBooleanMethod(this$, mids$[mid_isDaemon_8454bd5aa23fd11e]);
    }

    jboolean Thread::isInterrupted() const
    {
      return env->callBooleanMethod(this$, mids$[mid_isInterrupted_8454bd5aa23fd11e]);
    }

    void Thread::join() const
    {
      env->callVoidMethod(this$, mids$[mid_join_f2cc1bce94666404]);
    }

    void Thread::join(jlong a0) const
    {
      env->callVoidMethod(this$, mids$[mid_join_9c778c9bce6694df], a0);
    }

    void Thread::join(jlong a0, jint a1) const
    {
      env->callVoidMethod(this$, mids$[mid_join_7cbcb52ba5068aff], a0, a1);
    }

    void Thread::resume() const
    {
      env->callVoidMethod(this$, mids$[mid_resume_f2cc1bce94666404]);
    }

    void Thread::run() const
    {
      env->callVoidMethod(this$, mids$[mid_run_f2cc1bce94666404]);
    }

    void Thread::setContextClassLoader(const ::java::lang::ClassLoader & a0) const
    {
      env->callVoidMethod(this$, mids$[mid_setContextClassLoader_98a876e82795b112], a0.this$);
    }

    void Thread::setDaemon(jboolean a0) const
    {
      env->callVoidMethod(this$, mids$[mid_setDaemon_9d72768e8fdce2b7], a0);
    }

    void Thread::setDefaultUncaughtExceptionHandler(const ::java::lang::Thread$UncaughtExceptionHandler & a0)
    {
      jclass cls = env->getClass(initializeClass);
      env->callStaticVoidMethod(cls, mids$[mid_setDefaultUncaughtExceptionHandler_178167206395caa2], a0.this$);
    }

    void Thread::setName(const ::java::lang::String & a0) const
    {
      env->callVoidMethod(this$, mids$[mid_setName_9fd2eb66a64e6f0f], a0.this$);
    }

    void Thread::setPriority(jint a0) const
    {
      env->callVoidMethod(this$, mids$[mid_setPriority_040c4cd0390c5aff], a0);
    }

    void Thread::setUncaughtExceptionHandler(const ::java::lang::Thread$UncaughtExceptionHandler & a0) const
    {
      env->callVoidMethod(this$, mids$[mid_setUncaughtExceptionHandler_178167206395caa2], a0.this$);
    }

    void Thread::sleep(jlong a0)
    {
      jclass cls = env->getClass(initializeClass);
      env->callStaticVoidMethod(cls, mids$[mid_sleep_9c778c9bce6694df], a0);
    }

    void Thread::sleep(jlong a0, jint a1)
    {
      jclass cls = env->getClass(initializeClass);
      env->callStaticVoidMethod(cls, mids$[mid_sleep_7cbcb52ba5068aff], a0, a1);
    }

    void Thread::start() const
    {
      env->callVoidMethod(this$, mids$[mid_start_f2cc1bce94666404]);
    }

    void Thread::stop() const
    {
      env->callVoidMethod(this$, mids$[mid_stop_f2cc1bce94666404]);
    }

    void Thread::stop(const ::java::lang::Throwable & a0) const
    {
      env->callVoidMethod(this$, mids$[mid_stop_471cfbdb800444a7], a0.this$);
    }

    void Thread::suspend() const
    {
      env->callVoidMethod(this$, mids$[mid_suspend_f2cc1bce94666404]);
    }

    ::java::lang::String Thread::toString() const
    {
      return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_db9b55ba01e03e4b]));
    }

    void Thread::yield()
    {
      jclass cls = env->getClass(initializeClass);
      env->callStaticVoidMethod(cls, mids$[mid_yield_f2cc1bce94666404]);
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace java {
  namespace lang {
    static PyObject *t_Thread_cast_(PyTypeObject *type, PyObject *arg);
    static PyObject *t_Thread_instance_(PyTypeObject *type, PyObject *arg);
    static int t_Thread_init_(t_Thread *self, PyObject *args, PyObject *kwds);
    static PyObject *t_Thread_activeCount(PyTypeObject *type);
    static PyObject *t_Thread_checkAccess(t_Thread *self);
    static PyObject *t_Thread_countStackFrames(t_Thread *self);
    static PyObject *t_Thread_currentThread(PyTypeObject *type);
    static PyObject *t_Thread_destroy(t_Thread *self);
    static PyObject *t_Thread_dumpStack(PyTypeObject *type);
    static PyObject *t_Thread_enumerate(PyTypeObject *type, PyObject *arg);
    static PyObject *t_Thread_getAllStackTraces(PyTypeObject *type);
    static PyObject *t_Thread_getContextClassLoader(t_Thread *self);
    static PyObject *t_Thread_getDefaultUncaughtExceptionHandler(PyTypeObject *type);
    static PyObject *t_Thread_getId(t_Thread *self);
    static PyObject *t_Thread_getName(t_Thread *self);
    static PyObject *t_Thread_getPriority(t_Thread *self);
    static PyObject *t_Thread_getStackTrace(t_Thread *self);
    static PyObject *t_Thread_getState(t_Thread *self);
    static PyObject *t_Thread_getThreadGroup(t_Thread *self);
    static PyObject *t_Thread_getUncaughtExceptionHandler(t_Thread *self);
    static PyObject *t_Thread_holdsLock(PyTypeObject *type, PyObject *arg);
    static PyObject *t_Thread_interrupt(t_Thread *self);
    static PyObject *t_Thread_interrupted(PyTypeObject *type);
    static PyObject *t_Thread_isAlive(t_Thread *self);
    static PyObject *t_Thread_isDaemon(t_Thread *self);
    static PyObject *t_Thread_isInterrupted(t_Thread *self);
    static PyObject *t_Thread_join(t_Thread *self, PyObject *args);
    static PyObject *t_Thread_resume(t_Thread *self);
    static PyObject *t_Thread_run(t_Thread *self);
    static PyObject *t_Thread_setContextClassLoader(t_Thread *self, PyObject *arg);
    static PyObject *t_Thread_setDaemon(t_Thread *self, PyObject *arg);
    static PyObject *t_Thread_setDefaultUncaughtExceptionHandler(PyTypeObject *type, PyObject *arg);
    static PyObject *t_Thread_setName(t_Thread *self, PyObject *arg);
    static PyObject *t_Thread_setPriority(t_Thread *self, PyObject *arg);
    static PyObject *t_Thread_setUncaughtExceptionHandler(t_Thread *self, PyObject *arg);
    static PyObject *t_Thread_sleep(PyTypeObject *type, PyObject *args);
    static PyObject *t_Thread_start(t_Thread *self);
    static PyObject *t_Thread_stop(t_Thread *self, PyObject *args);
    static PyObject *t_Thread_suspend(t_Thread *self);
    static PyObject *t_Thread_toString(t_Thread *self, PyObject *args);
    static PyObject *t_Thread_yield(PyTypeObject *type);
    static PyObject *t_Thread_get__alive(t_Thread *self, void *data);
    static PyObject *t_Thread_get__allStackTraces(t_Thread *self, void *data);
    static PyObject *t_Thread_get__contextClassLoader(t_Thread *self, void *data);
    static int t_Thread_set__contextClassLoader(t_Thread *self, PyObject *arg, void *data);
    static PyObject *t_Thread_get__daemon(t_Thread *self, void *data);
    static int t_Thread_set__daemon(t_Thread *self, PyObject *arg, void *data);
    static PyObject *t_Thread_get__defaultUncaughtExceptionHandler(t_Thread *self, void *data);
    static int t_Thread_set__defaultUncaughtExceptionHandler(t_Thread *self, PyObject *arg, void *data);
    static PyObject *t_Thread_get__id(t_Thread *self, void *data);
    static PyObject *t_Thread_get__name(t_Thread *self, void *data);
    static int t_Thread_set__name(t_Thread *self, PyObject *arg, void *data);
    static PyObject *t_Thread_get__priority(t_Thread *self, void *data);
    static int t_Thread_set__priority(t_Thread *self, PyObject *arg, void *data);
    static PyObject *t_Thread_get__stackTrace(t_Thread *self, void *data);
    static PyObject *t_Thread_get__state(t_Thread *self, void *data);
    static PyObject *t_Thread_get__threadGroup(t_Thread *self, void *data);
    static PyObject *t_Thread_get__uncaughtExceptionHandler(t_Thread *self, void *data);
    static int t_Thread_set__uncaughtExceptionHandler(t_Thread *self, PyObject *arg, void *data);
    static PyGetSetDef t_Thread__fields_[] = {
      DECLARE_GET_FIELD(t_Thread, alive),
      DECLARE_GET_FIELD(t_Thread, allStackTraces),
      DECLARE_GETSET_FIELD(t_Thread, contextClassLoader),
      DECLARE_GETSET_FIELD(t_Thread, daemon),
      DECLARE_GETSET_FIELD(t_Thread, defaultUncaughtExceptionHandler),
      DECLARE_GET_FIELD(t_Thread, id),
      DECLARE_GETSET_FIELD(t_Thread, name),
      DECLARE_GETSET_FIELD(t_Thread, priority),
      DECLARE_GET_FIELD(t_Thread, stackTrace),
      DECLARE_GET_FIELD(t_Thread, state),
      DECLARE_GET_FIELD(t_Thread, threadGroup),
      DECLARE_GETSET_FIELD(t_Thread, uncaughtExceptionHandler),
      { NULL, NULL, NULL, NULL, NULL }
    };

    static PyMethodDef t_Thread__methods_[] = {
      DECLARE_METHOD(t_Thread, cast_, METH_O | METH_CLASS),
      DECLARE_METHOD(t_Thread, instance_, METH_O | METH_CLASS),
      DECLARE_METHOD(t_Thread, activeCount, METH_NOARGS | METH_CLASS),
      DECLARE_METHOD(t_Thread, checkAccess, METH_NOARGS),
      DECLARE_METHOD(t_Thread, countStackFrames, METH_NOARGS),
      DECLARE_METHOD(t_Thread, currentThread, METH_NOARGS | METH_CLASS),
      DECLARE_METHOD(t_Thread, destroy, METH_NOARGS),
      DECLARE_METHOD(t_Thread, dumpStack, METH_NOARGS | METH_CLASS),
      DECLARE_METHOD(t_Thread, enumerate, METH_O | METH_CLASS),
      DECLARE_METHOD(t_Thread, getAllStackTraces, METH_NOARGS | METH_CLASS),
      DECLARE_METHOD(t_Thread, getContextClassLoader, METH_NOARGS),
      DECLARE_METHOD(t_Thread, getDefaultUncaughtExceptionHandler, METH_NOARGS | METH_CLASS),
      DECLARE_METHOD(t_Thread, getId, METH_NOARGS),
      DECLARE_METHOD(t_Thread, getName, METH_NOARGS),
      DECLARE_METHOD(t_Thread, getPriority, METH_NOARGS),
      DECLARE_METHOD(t_Thread, getStackTrace, METH_NOARGS),
      DECLARE_METHOD(t_Thread, getState, METH_NOARGS),
      DECLARE_METHOD(t_Thread, getThreadGroup, METH_NOARGS),
      DECLARE_METHOD(t_Thread, getUncaughtExceptionHandler, METH_NOARGS),
      DECLARE_METHOD(t_Thread, holdsLock, METH_O | METH_CLASS),
      DECLARE_METHOD(t_Thread, interrupt, METH_NOARGS),
      DECLARE_METHOD(t_Thread, interrupted, METH_NOARGS | METH_CLASS),
      DECLARE_METHOD(t_Thread, isAlive, METH_NOARGS),
      DECLARE_METHOD(t_Thread, isDaemon, METH_NOARGS),
      DECLARE_METHOD(t_Thread, isInterrupted, METH_NOARGS),
      DECLARE_METHOD(t_Thread, join, METH_VARARGS),
      DECLARE_METHOD(t_Thread, resume, METH_NOARGS),
      DECLARE_METHOD(t_Thread, run, METH_NOARGS),
      DECLARE_METHOD(t_Thread, setContextClassLoader, METH_O),
      DECLARE_METHOD(t_Thread, setDaemon, METH_O),
      DECLARE_METHOD(t_Thread, setDefaultUncaughtExceptionHandler, METH_O | METH_CLASS),
      DECLARE_METHOD(t_Thread, setName, METH_O),
      DECLARE_METHOD(t_Thread, setPriority, METH_O),
      DECLARE_METHOD(t_Thread, setUncaughtExceptionHandler, METH_O),
      DECLARE_METHOD(t_Thread, sleep, METH_VARARGS | METH_CLASS),
      DECLARE_METHOD(t_Thread, start, METH_NOARGS),
      DECLARE_METHOD(t_Thread, stop, METH_VARARGS),
      DECLARE_METHOD(t_Thread, suspend, METH_NOARGS),
      DECLARE_METHOD(t_Thread, toString, METH_VARARGS),
      DECLARE_METHOD(t_Thread, yield, METH_NOARGS | METH_CLASS),
      { NULL, NULL, 0, NULL }
    };

    static PyType_Slot PY_TYPE_SLOTS(Thread)[] = {
      { Py_tp_methods, t_Thread__methods_ },
      { Py_tp_init, (void *) t_Thread_init_ },
      { Py_tp_getset, t_Thread__fields_ },
      { 0, NULL }
    };

    static PyType_Def *PY_TYPE_BASES(Thread)[] = {
      &PY_TYPE_DEF(::java::lang::Object),
      NULL
    };

    DEFINE_TYPE(Thread, t_Thread, Thread);

    void t_Thread::install(PyObject *module)
    {
      installType(&PY_TYPE(Thread), &PY_TYPE_DEF(Thread), module, "Thread", 0);
      PyObject_SetAttrString((PyObject *) PY_TYPE(Thread), "UncaughtExceptionHandler", make_descriptor(&PY_TYPE_DEF(Thread$UncaughtExceptionHandler)));
      PyObject_SetAttrString((PyObject *) PY_TYPE(Thread), "State", make_descriptor(&PY_TYPE_DEF(Thread$State)));
    }

    void t_Thread::initialize(PyObject *module)
    {
      PyObject_SetAttrString((PyObject *) PY_TYPE(Thread), "class_", make_descriptor(Thread::initializeClass, 1));
      PyObject_SetAttrString((PyObject *) PY_TYPE(Thread), "wrapfn_", make_descriptor(t_Thread::wrap_jobject));
      PyObject_SetAttrString((PyObject *) PY_TYPE(Thread), "boxfn_", make_descriptor(boxObject));
      env->getClass(Thread::initializeClass);
      PyObject_SetAttrString((PyObject *) PY_TYPE(Thread), "MAX_PRIORITY", make_descriptor(Thread::MAX_PRIORITY));
      PyObject_SetAttrString((PyObject *) PY_TYPE(Thread), "MIN_PRIORITY", make_descriptor(Thread::MIN_PRIORITY));
      PyObject_SetAttrString((PyObject *) PY_TYPE(Thread), "NORM_PRIORITY", make_descriptor(Thread::NORM_PRIORITY));
    }

    static PyObject *t_Thread_cast_(PyTypeObject *type, PyObject *arg)
    {
      if (!(arg = castCheck(arg, Thread::initializeClass, 1)))
        return NULL;
      return t_Thread::wrap_Object(Thread(((t_Thread *) arg)->object.this$));
    }
    static PyObject *t_Thread_instance_(PyTypeObject *type, PyObject *arg)
    {
      if (!castCheck(arg, Thread::initializeClass, 0))
        Py_RETURN_FALSE;
      Py_RETURN_TRUE;
    }

    static int t_Thread_init_(t_Thread *self, PyObject *args, PyObject *kwds)
    {
      switch (PyTuple_GET_SIZE(args)) {
       case 0:
        {
          Thread object((jobject) NULL);

          INT_CALL(object = Thread());
          self->object = object;
          break;
        }
       case 1:
        {
          ::java::lang::String a0((jobject) NULL);
          Thread object((jobject) NULL);

          if (!parseArgs(args, "s", &a0))
          {
            INT_CALL(object = Thread(a0));
            self->object = object;
            break;
          }
        }
        {
          ::java::lang::Runnable a0((jobject) NULL);
          Thread object((jobject) NULL);

          if (!parseArgs(args, "k", ::java::lang::Runnable::initializeClass, &a0))
          {
            INT_CALL(object = Thread(a0));
            self->object = object;
            break;
          }
        }
        goto err;
       case 2:
        {
          ::java::lang::ThreadGroup a0((jobject) NULL);
          ::java::lang::String a1((jobject) NULL);
          Thread object((jobject) NULL);

          if (!parseArgs(args, "ks", ::java::lang::ThreadGroup::initializeClass, &a0, &a1))
          {
            INT_CALL(object = Thread(a0, a1));
            self->object = object;
            break;
          }
        }
        {
          ::java::lang::ThreadGroup a0((jobject) NULL);
          ::java::lang::Runnable a1((jobject) NULL);
          Thread object((jobject) NULL);

          if (!parseArgs(args, "kk", ::java::lang::ThreadGroup::initializeClass, ::java::lang::Runnable::initializeClass, &a0, &a1))
          {
            INT_CALL(object = Thread(a0, a1));
            self->object = object;
            break;
          }
        }
        {
          ::java::lang::Runnable a0((jobject) NULL);
          ::java::lang::String a1((jobject) NULL);
          Thread object((jobject) NULL);

          if (!parseArgs(args, "ks", ::java::lang::Runnable::initializeClass, &a0, &a1))
          {
            INT_CALL(object = Thread(a0, a1));
            self->object = object;
            break;
          }
        }
        goto err;
       case 3:
        {
          ::java::lang::ThreadGroup a0((jobject) NULL);
          ::java::lang::Runnable a1((jobject) NULL);
          ::java::lang::String a2((jobject) NULL);
          Thread object((jobject) NULL);

          if (!parseArgs(args, "kks", ::java::lang::ThreadGroup::initializeClass, ::java::lang::Runnable::initializeClass, &a0, &a1, &a2))
          {
            INT_CALL(object = Thread(a0, a1, a2));
            self->object = object;
            break;
          }
        }
        goto err;
       case 4:
        {
          ::java::lang::ThreadGroup a0((jobject) NULL);
          ::java::lang::Runnable a1((jobject) NULL);
          ::java::lang::String a2((jobject) NULL);
          jlong a3;
          Thread object((jobject) NULL);

          if (!parseArgs(args, "kksJ", ::java::lang::ThreadGroup::initializeClass, ::java::lang::Runnable::initializeClass, &a0, &a1, &a2, &a3))
          {
            INT_CALL(object = Thread(a0, a1, a2, a3));
            self->object = object;
            break;
          }
        }
       default:
       err:
        PyErr_SetArgsError((PyObject *) self, "__init__", args);
        return -1;
      }

      return 0;
    }

    static PyObject *t_Thread_activeCount(PyTypeObject *type)
    {
      jint result;
      OBJ_CALL(result = ::java::lang::Thread::activeCount());
      return PyLong_FromLong((long) result);
    }

    static PyObject *t_Thread_checkAccess(t_Thread *self)
    {
      OBJ_CALL(self->object.checkAccess());
      Py_RETURN_NONE;
    }

    static PyObject *t_Thread_countStackFrames(t_Thread *self)
    {
      jint result;
      OBJ_CALL(result = self->object.countStackFrames());
      return PyLong_FromLong((long) result);
    }

    static PyObject *t_Thread_currentThread(PyTypeObject *type)
    {
      Thread result((jobject) NULL);
      OBJ_CALL(result = ::java::lang::Thread::currentThread());
      return t_Thread::wrap_Object(result);
    }

    static PyObject *t_Thread_destroy(t_Thread *self)
    {
      OBJ_CALL(self->object.destroy());
      Py_RETURN_NONE;
    }

    static PyObject *t_Thread_dumpStack(PyTypeObject *type)
    {
      OBJ_CALL(::java::lang::Thread::dumpStack());
      Py_RETURN_NONE;
    }

    static PyObject *t_Thread_enumerate(PyTypeObject *type, PyObject *arg)
    {
      JArray< Thread > a0((jobject) NULL);
      jint result;

      if (!parseArg(arg, "[k", Thread::initializeClass, &a0))
      {
        OBJ_CALL(result = ::java::lang::Thread::enumerate(a0));
        return PyLong_FromLong((long) result);
      }

      PyErr_SetArgsError(type, "enumerate", arg);
      return NULL;
    }

    static PyObject *t_Thread_getAllStackTraces(PyTypeObject *type)
    {
      ::java::util::Map result((jobject) NULL);
      OBJ_CALL(result = ::java::lang::Thread::getAllStackTraces());
      return ::java::util::t_Map::wrap_Object(result, ::java::lang::PY_TYPE(Thread), ::java::lang::PY_TYPE(Object));
    }

    static PyObject *t_Thread_getContextClassLoader(t_Thread *self)
    {
      ::java::lang::ClassLoader result((jobject) NULL);
      OBJ_CALL(result = self->object.getContextClassLoader());
      return ::java::lang::t_ClassLoader::wrap_Object(result);
    }

    static PyObject *t_Thread_getDefaultUncaughtExceptionHandler(PyTypeObject *type)
    {
      ::java::lang::Thread$UncaughtExceptionHandler result((jobject) NULL);
      OBJ_CALL(result = ::java::lang::Thread::getDefaultUncaughtExceptionHandler());
      return ::java::lang::t_Thread$UncaughtExceptionHandler::wrap_Object(result);
    }

    static PyObject *t_Thread_getId(t_Thread *self)
    {
      jlong result;
      OBJ_CALL(result = self->object.getId());
      return PyLong_FromLongLong((PY_LONG_LONG) result);
    }

    static PyObject *t_Thread_getName(t_Thread *self)
    {
      ::java::lang::String result((jobject) NULL);
      OBJ_CALL(result = self->object.getName());
      return j2p(result);
    }

    static PyObject *t_Thread_getPriority(t_Thread *self)
    {
      jint result;
      OBJ_CALL(result = self->object.getPriority());
      return PyLong_FromLong((long) result);
    }

    static PyObject *t_Thread_getStackTrace(t_Thread *self)
    {
      JArray< ::java::lang::StackTraceElement > result((jobject) NULL);
      OBJ_CALL(result = self->object.getStackTrace());
      return JArray<jobject>(result.this$).wrap(::java::lang::t_StackTraceElement::wrap_jobject);
    }

    static PyObject *t_Thread_getState(t_Thread *self)
    {
      ::java::lang::Thread$State result((jobject) NULL);
      OBJ_CALL(result = self->object.getState());
      return ::java::lang::t_Thread$State::wrap_Object(result);
    }

    static PyObject *t_Thread_getThreadGroup(t_Thread *self)
    {
      ::java::lang::ThreadGroup result((jobject) NULL);
      OBJ_CALL(result = self->object.getThreadGroup());
      return ::java::lang::t_ThreadGroup::wrap_Object(result);
    }

    static PyObject *t_Thread_getUncaughtExceptionHandler(t_Thread *self)
    {
      ::java::lang::Thread$UncaughtExceptionHandler result((jobject) NULL);
      OBJ_CALL(result = self->object.getUncaughtExceptionHandler());
      return ::java::lang::t_Thread$UncaughtExceptionHandler::wrap_Object(result);
    }

    static PyObject *t_Thread_holdsLock(PyTypeObject *type, PyObject *arg)
    {
      ::java::lang::Object a0((jobject) NULL);
      jboolean result;

      if (!parseArg(arg, "o", &a0))
      {
        OBJ_CALL(result = ::java::lang::Thread::holdsLock(a0));
        Py_RETURN_BOOL(result);
      }

      PyErr_SetArgsError(type, "holdsLock", arg);
      return NULL;
    }

    static PyObject *t_Thread_interrupt(t_Thread *self)
    {
      OBJ_CALL(self->object.interrupt());
      Py_RETURN_NONE;
    }

    static PyObject *t_Thread_interrupted(PyTypeObject *type)
    {
      jboolean result;
      OBJ_CALL(result = ::java::lang::Thread::interrupted());
      Py_RETURN_BOOL(result);
    }

    static PyObject *t_Thread_isAlive(t_Thread *self)
    {
      jboolean result;
      OBJ_CALL(result = self->object.isAlive());
      Py_RETURN_BOOL(result);
    }

    static PyObject *t_Thread_isDaemon(t_Thread *self)
    {
      jboolean result;
      OBJ_CALL(result = self->object.isDaemon());
      Py_RETURN_BOOL(result);
    }

    static PyObject *t_Thread_isInterrupted(t_Thread *self)
    {
      jboolean result;
      OBJ_CALL(result = self->object.isInterrupted());
      Py_RETURN_BOOL(result);
    }

    static PyObject *t_Thread_join(t_Thread *self, PyObject *args)
    {
      switch (PyTuple_GET_SIZE(args)) {
       case 0:
        {
          OBJ_CALL(self->object.join());
          Py_RETURN_NONE;
        }
        break;
       case 1:
        {
          jlong a0;

          if (!parseArgs(args, "J", &a0))
          {
            OBJ_CALL(self->object.join(a0));
            Py_RETURN_NONE;
          }
        }
        break;
       case 2:
        {
          jlong a0;
          jint a1;

          if (!parseArgs(args, "JI", &a0, &a1))
          {
            OBJ_CALL(self->object.join(a0, a1));
            Py_RETURN_NONE;
          }
        }
      }

      PyErr_SetArgsError((PyObject *) self, "join", args);
      return NULL;
    }

    static PyObject *t_Thread_resume(t_Thread *self)
    {
      OBJ_CALL(self->object.resume());
      Py_RETURN_NONE;
    }

    static PyObject *t_Thread_run(t_Thread *self)
    {
      OBJ_CALL(self->object.run());
      Py_RETURN_NONE;
    }

    static PyObject *t_Thread_setContextClassLoader(t_Thread *self, PyObject *arg)
    {
      ::java::lang::ClassLoader a0((jobject) NULL);

      if (!parseArg(arg, "k", ::java::lang::ClassLoader::initializeClass, &a0))
      {
        OBJ_CALL(self->object.setContextClassLoader(a0));
        Py_RETURN_NONE;
      }

      PyErr_SetArgsError((PyObject *) self, "setContextClassLoader", arg);
      return NULL;
    }

    static PyObject *t_Thread_setDaemon(t_Thread *self, PyObject *arg)
    {
      jboolean a0;

      if (!parseArg(arg, "Z", &a0))
      {
        OBJ_CALL(self->object.setDaemon(a0));
        Py_RETURN_NONE;
      }

      PyErr_SetArgsError((PyObject *) self, "setDaemon", arg);
      return NULL;
    }

    static PyObject *t_Thread_setDefaultUncaughtExceptionHandler(PyTypeObject *type, PyObject *arg)
    {
      ::java::lang::Thread$UncaughtExceptionHandler a0((jobject) NULL);

      if (!parseArg(arg, "k", ::java::lang::Thread$UncaughtExceptionHandler::initializeClass, &a0))
      {
        OBJ_CALL(::java::lang::Thread::setDefaultUncaughtExceptionHandler(a0));
        Py_RETURN_NONE;
      }

      PyErr_SetArgsError(type, "setDefaultUncaughtExceptionHandler", arg);
      return NULL;
    }

    static PyObject *t_Thread_setName(t_Thread *self, PyObject *arg)
    {
      ::java::lang::String a0((jobject) NULL);

      if (!parseArg(arg, "s", &a0))
      {
        OBJ_CALL(self->object.setName(a0));
        Py_RETURN_NONE;
      }

      PyErr_SetArgsError((PyObject *) self, "setName", arg);
      return NULL;
    }

    static PyObject *t_Thread_setPriority(t_Thread *self, PyObject *arg)
    {
      jint a0;

      if (!parseArg(arg, "I", &a0))
      {
        OBJ_CALL(self->object.setPriority(a0));
        Py_RETURN_NONE;
      }

      PyErr_SetArgsError((PyObject *) self, "setPriority", arg);
      return NULL;
    }

    static PyObject *t_Thread_setUncaughtExceptionHandler(t_Thread *self, PyObject *arg)
    {
      ::java::lang::Thread$UncaughtExceptionHandler a0((jobject) NULL);

      if (!parseArg(arg, "k", ::java::lang::Thread$UncaughtExceptionHandler::initializeClass, &a0))
      {
        OBJ_CALL(self->object.setUncaughtExceptionHandler(a0));
        Py_RETURN_NONE;
      }

      PyErr_SetArgsError((PyObject *) self, "setUncaughtExceptionHandler", arg);
      return NULL;
    }

    static PyObject *t_Thread_sleep(PyTypeObject *type, PyObject *args)
    {
      switch (PyTuple_GET_SIZE(args)) {
       case 1:
        {
          jlong a0;

          if (!parseArgs(args, "J", &a0))
          {
            OBJ_CALL(::java::lang::Thread::sleep(a0));
            Py_RETURN_NONE;
          }
        }
        break;
       case 2:
        {
          jlong a0;
          jint a1;

          if (!parseArgs(args, "JI", &a0, &a1))
          {
            OBJ_CALL(::java::lang::Thread::sleep(a0, a1));
            Py_RETURN_NONE;
          }
        }
      }

      PyErr_SetArgsError(type, "sleep", args);
      return NULL;
    }

    static PyObject *t_Thread_start(t_Thread *self)
    {
      OBJ_CALL(self->object.start());
      Py_RETURN_NONE;
    }

    static PyObject *t_Thread_stop(t_Thread *self, PyObject *args)
    {
      switch (PyTuple_GET_SIZE(args)) {
       case 0:
        {
          OBJ_CALL(self->object.stop());
          Py_RETURN_NONE;
        }
        break;
       case 1:
        {
          ::java::lang::Throwable a0((jobject) NULL);

          if (!parseArgs(args, "k", ::java::lang::Throwable::initializeClass, &a0))
          {
            OBJ_CALL(self->object.stop(a0));
            Py_RETURN_NONE;
          }
        }
      }

      PyErr_SetArgsError((PyObject *) self, "stop", args);
      return NULL;
    }

    static PyObject *t_Thread_suspend(t_Thread *self)
    {
      OBJ_CALL(self->object.suspend());
      Py_RETURN_NONE;
    }

    static PyObject *t_Thread_toString(t_Thread *self, PyObject *args)
    {
      ::java::lang::String result((jobject) NULL);

      if (!parseArgs(args, ""))
      {
        OBJ_CALL(result = self->object.toString());
        return j2p(result);
      }

      return callSuper(PY_TYPE(Thread), (PyObject *) self, "toString", args, 2);
    }

    static PyObject *t_Thread_yield(PyTypeObject *type)
    {
      OBJ_CALL(::java::lang::Thread::yield());
      Py_RETURN_NONE;
    }

    static PyObject *t_Thread_get__alive(t_Thread *self, void *data)
    {
      jboolean value;
      OBJ_CALL(value = self->object.isAlive());
      Py_RETURN_BOOL(value);
    }

    static PyObject *t_Thread_get__allStackTraces(t_Thread *self, void *data)
    {
      ::java::util::Map value((jobject) NULL);
      OBJ_CALL(value = self->object.getAllStackTraces());
      return ::java::util::t_Map::wrap_Object(value);
    }

    static PyObject *t_Thread_get__contextClassLoader(t_Thread *self, void *data)
    {
      ::java::lang::ClassLoader value((jobject) NULL);
      OBJ_CALL(value = self->object.getContextClassLoader());
      return ::java::lang::t_ClassLoader::wrap_Object(value);
    }
    static int t_Thread_set__contextClassLoader(t_Thread *self, PyObject *arg, void *data)
    {
      {
        ::java::lang::ClassLoader value((jobject) NULL);
        if (!parseArg(arg, "k", ::java::lang::ClassLoader::initializeClass, &value))
        {
          INT_CALL(self->object.setContextClassLoader(value));
          return 0;
        }
      }
      PyErr_SetArgsError((PyObject *) self, "contextClassLoader", arg);
      return -1;
    }

    static PyObject *t_Thread_get__daemon(t_Thread *self, void *data)
    {
      jboolean value;
      OBJ_CALL(value = self->object.isDaemon());
      Py_RETURN_BOOL(value);
    }
    static int t_Thread_set__daemon(t_Thread *self, PyObject *arg, void *data)
    {
      {
        jboolean value;
        if (!parseArg(arg, "Z", &value))
        {
          INT_CALL(self->object.setDaemon(value));
          return 0;
        }
      }
      PyErr_SetArgsError((PyObject *) self, "daemon", arg);
      return -1;
    }

    static PyObject *t_Thread_get__defaultUncaughtExceptionHandler(t_Thread *self, void *data)
    {
      ::java::lang::Thread$UncaughtExceptionHandler value((jobject) NULL);
      OBJ_CALL(value = self->object.getDefaultUncaughtExceptionHandler());
      return ::java::lang::t_Thread$UncaughtExceptionHandler::wrap_Object(value);
    }
    static int t_Thread_set__defaultUncaughtExceptionHandler(t_Thread *self, PyObject *arg, void *data)
    {
      {
        ::java::lang::Thread$UncaughtExceptionHandler value((jobject) NULL);
        if (!parseArg(arg, "k", ::java::lang::Thread$UncaughtExceptionHandler::initializeClass, &value))
        {
          INT_CALL(self->object.setDefaultUncaughtExceptionHandler(value));
          return 0;
        }
      }
      PyErr_SetArgsError((PyObject *) self, "defaultUncaughtExceptionHandler", arg);
      return -1;
    }

    static PyObject *t_Thread_get__id(t_Thread *self, void *data)
    {
      jlong value;
      OBJ_CALL(value = self->object.getId());
      return PyLong_FromLongLong((PY_LONG_LONG) value);
    }

    static PyObject *t_Thread_get__name(t_Thread *self, void *data)
    {
      ::java::lang::String value((jobject) NULL);
      OBJ_CALL(value = self->object.getName());
      return j2p(value);
    }
    static int t_Thread_set__name(t_Thread *self, PyObject *arg, void *data)
    {
      {
        ::java::lang::String value((jobject) NULL);
        if (!parseArg(arg, "s", &value))
        {
          INT_CALL(self->object.setName(value));
          return 0;
        }
      }
      PyErr_SetArgsError((PyObject *) self, "name", arg);
      return -1;
    }

    static PyObject *t_Thread_get__priority(t_Thread *self, void *data)
    {
      jint value;
      OBJ_CALL(value = self->object.getPriority());
      return PyLong_FromLong((long) value);
    }
    static int t_Thread_set__priority(t_Thread *self, PyObject *arg, void *data)
    {
      {
        jint value;
        if (!parseArg(arg, "I", &value))
        {
          INT_CALL(self->object.setPriority(value));
          return 0;
        }
      }
      PyErr_SetArgsError((PyObject *) self, "priority", arg);
      return -1;
    }

    static PyObject *t_Thread_get__stackTrace(t_Thread *self, void *data)
    {
      JArray< ::java::lang::StackTraceElement > value((jobject) NULL);
      OBJ_CALL(value = self->object.getStackTrace());
      return JArray<jobject>(value.this$).wrap(::java::lang::t_StackTraceElement::wrap_jobject);
    }

    static PyObject *t_Thread_get__state(t_Thread *self, void *data)
    {
      ::java::lang::Thread$State value((jobject) NULL);
      OBJ_CALL(value = self->object.getState());
      return ::java::lang::t_Thread$State::wrap_Object(value);
    }

    static PyObject *t_Thread_get__threadGroup(t_Thread *self, void *data)
    {
      ::java::lang::ThreadGroup value((jobject) NULL);
      OBJ_CALL(value = self->object.getThreadGroup());
      return ::java::lang::t_ThreadGroup::wrap_Object(value);
    }

    static PyObject *t_Thread_get__uncaughtExceptionHandler(t_Thread *self, void *data)
    {
      ::java::lang::Thread$UncaughtExceptionHandler value((jobject) NULL);
      OBJ_CALL(value = self->object.getUncaughtExceptionHandler());
      return ::java::lang::t_Thread$UncaughtExceptionHandler::wrap_Object(value);
    }
    static int t_Thread_set__uncaughtExceptionHandler(t_Thread *self, PyObject *arg, void *data)
    {
      {
        ::java::lang::Thread$UncaughtExceptionHandler value((jobject) NULL);
        if (!parseArg(arg, "k", ::java::lang::Thread$UncaughtExceptionHandler::initializeClass, &value))
        {
          INT_CALL(self->object.setUncaughtExceptionHandler(value));
          return 0;
        }
      }
      PyErr_SetArgsError((PyObject *) self, "uncaughtExceptionHandler", arg);
      return -1;
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/misc/HighFreqTerms.h"
#include "org/apache/lucene/index/IndexReader.h"
#include "java/util/Comparator.h"
#include "java/lang/Class.h"
#include "java/lang/String.h"
#include "java/lang/Exception.h"
#include "org/apache/lucene/misc/TermStats.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace misc {

        ::java::lang::Class *HighFreqTerms::class$ = NULL;
        jmethodID *HighFreqTerms::mids$ = NULL;
        bool HighFreqTerms::live$ = false;
        jint HighFreqTerms::DEFAULT_NUMTERMS = (jint) 0;

        jclass HighFreqTerms::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/misc/HighFreqTerms");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_f2cc1bce94666404] = env->getMethodID(cls, "<init>", "()V");
            mids$[mid_getHighFreqTerms_4ab18ce05ee540e7] = env->getStaticMethodID(cls, "getHighFreqTerms", "(Lorg/apache/lucene/index/IndexReader;ILjava/lang/String;Ljava/util/Comparator;)[Lorg/apache/lucene/misc/TermStats;");
            mids$[mid_main_2fc318b999a7aba3] = env->getStaticMethodID(cls, "main", "([Ljava/lang/String;)V");

            class$ = new ::java::lang::Class(cls);
            cls = (jclass) class$->this$;

            DEFAULT_NUMTERMS = env->getStaticIntField(cls, "DEFAULT_NUMTERMS");
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        HighFreqTerms::HighFreqTerms() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_f2cc1bce94666404)) {}

        JArray< ::org::apache::lucene::misc::TermStats > HighFreqTerms::getHighFreqTerms(const ::org::apache::lucene::index::IndexReader & a0, jint a1, const ::java::lang::String & a2, const ::java::util::Comparator & a3)
        {
          jclass cls = env->getClass(initializeClass);
          return JArray< ::org::apache::lucene::misc::TermStats >(env->callStaticObjectMethod(cls, mids$[mid_getHighFreqTerms_4ab18ce05ee540e7], a0.this$, a1, a2.this$, a3.this$));
        }

        void HighFreqTerms::main(const JArray< ::java::lang::String > & a0)
        {
          jclass cls = env->getClass(initializeClass);
          env->callStaticVoidMethod(cls, mids$[mid_main_2fc318b999a7aba3], a0.this$);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"
#include "org/apache/lucene/misc/HighFreqTerms$TotalTermFreqComparator.h"
#include "org/apache/lucene/misc/HighFreqTerms$DocFreqComparator.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace misc {
        static PyObject *t_HighFreqTerms_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_HighFreqTerms_instance_(PyTypeObject *type, PyObject *arg);
        static int t_HighFreqTerms_init_(t_HighFreqTerms *self, PyObject *args, PyObject *kwds);
        static PyObject *t_HighFreqTerms_getHighFreqTerms(PyTypeObject *type, PyObject *args);
        static PyObject *t_HighFreqTerms_main(PyTypeObject *type, PyObject *arg);

        static PyMethodDef t_HighFreqTerms__methods_[] = {
          DECLARE_METHOD(t_HighFreqTerms, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_HighFreqTerms, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_HighFreqTerms, getHighFreqTerms, METH_VARARGS | METH_CLASS),
          DECLARE_METHOD(t_HighFreqTerms, main, METH_O | METH_CLASS),
          { NULL, NULL, 0, NULL }
        };

        static PyType_Slot PY_TYPE_SLOTS(HighFreqTerms)[] = {
          { Py_tp_methods, t_HighFreqTerms__methods_ },
          { Py_tp_init, (void *) t_HighFreqTerms_init_ },
          { 0, NULL }
        };

        static PyType_Def *PY_TYPE_BASES(HighFreqTerms)[] = {
          &PY_TYPE_DEF(::java::lang::Object),
          NULL
        };

        DEFINE_TYPE(HighFreqTerms, t_HighFreqTerms, HighFreqTerms);

        void t_HighFreqTerms::install(PyObject *module)
        {
          installType(&PY_TYPE(HighFreqTerms), &PY_TYPE_DEF(HighFreqTerms), module, "HighFreqTerms", 0);
          PyObject_SetAttrString((PyObject *) PY_TYPE(HighFreqTerms), "TotalTermFreqComparator", make_descriptor(&PY_TYPE_DEF(HighFreqTerms$TotalTermFreqComparator)));
          PyObject_SetAttrString((PyObject *) PY_TYPE(HighFreqTerms), "DocFreqComparator", make_descriptor(&PY_TYPE_DEF(HighFreqTerms$DocFreqComparator)));
        }

        void t_HighFreqTerms::initialize(PyObject *module)
        {
          PyObject_SetAttrString((PyObject *) PY_TYPE(HighFreqTerms), "class_", make_descriptor(HighFreqTerms::initializeClass, 1));
          PyObject_SetAttrString((PyObject *) PY_TYPE(HighFreqTerms), "wrapfn_", make_descriptor(t_HighFreqTerms::wrap_jobject));
          PyObject_SetAttrString((PyObject *) PY_TYPE(HighFreqTerms), "boxfn_", make_descriptor(boxObject));
          env->getClass(HighFreqTerms::initializeClass);
          PyObject_SetAttrString((PyObject *) PY_TYPE(HighFreqTerms), "DEFAULT_NUMTERMS", make_descriptor(HighFreqTerms::DEFAULT_NUMTERMS));
        }

        static PyObject *t_HighFreqTerms_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, HighFreqTerms::initializeClass, 1)))
            return NULL;
          return t_HighFreqTerms::wrap_Object(HighFreqTerms(((t_HighFreqTerms *) arg)->object.this$));
        }
        static PyObject *t_HighFreqTerms_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, HighFreqTerms::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_HighFreqTerms_init_(t_HighFreqTerms *self, PyObject *args, PyObject *kwds)
        {
          HighFreqTerms object((jobject) NULL);

          INT_CALL(object = HighFreqTerms());
          self->object = object;

          return 0;
        }

        static PyObject *t_HighFreqTerms_getHighFreqTerms(PyTypeObject *type, PyObject *args)
        {
          ::org::apache::lucene::index::IndexReader a0((jobject) NULL);
          jint a1;
          ::java::lang::String a2((jobject) NULL);
          ::java::util::Comparator a3((jobject) NULL);
          PyTypeObject **p3;
          JArray< ::org::apache::lucene::misc::TermStats > result((jobject) NULL);

          if (!parseArgs(args, "kIsK", ::org::apache::lucene::index::IndexReader::initializeClass, ::java::util::Comparator::initializeClass, &a0, &a1, &a2, &a3, &p3, ::java::util::t_Comparator::parameters_))
          {
            OBJ_CALL(result = ::org::apache::lucene::misc::HighFreqTerms::getHighFreqTerms(a0, a1, a2, a3));
            return JArray<jobject>(result.this$).wrap(::org::apache::lucene::misc::t_TermStats::wrap_jobject);
          }

          PyErr_SetArgsError(type, "getHighFreqTerms", args);
          return NULL;
        }

        static PyObject *t_HighFreqTerms_main(PyTypeObject *type, PyObject *arg)
        {
          JArray< ::java::lang::String > a0((jobject) NULL);

          if (!parseArg(arg, "[s", &a0))
          {
            OBJ_CALL(::org::apache::lucene::misc::HighFreqTerms::main(a0));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError(type, "main", arg);
          return NULL;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queries/function/valuesource/MaxDocValueSource.h"
#include "java/util/Map.h"
#include "org/apache/lucene/index/LeafReaderContext.h"
#include "org/apache/lucene/search/IndexSearcher.h"
#include "org/apache/lucene/queries/function/FunctionValues.h"
#include "java/lang/Class.h"
#include "java/lang/Object.h"
#include "java/lang/String.h"
#include "java/io/IOException.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queries {
        namespace function {
          namespace valuesource {

            ::java::lang::Class *MaxDocValueSource::class$ = NULL;
            jmethodID *MaxDocValueSource::mids$ = NULL;
            bool MaxDocValueSource::live$ = false;

            jclass MaxDocValueSource::initializeClass(bool getOnly)
            {
              if (getOnly)
                return (jclass) (live$ ? class$->this$ : NULL);
              if (class$ == NULL)
              {
                jclass cls = (jclass) env->findClass("org/apache/lucene/queries/function/valuesource/MaxDocValueSource");

                mids$ = new jmethodID[max_mid];
                mids$[mid_init$_f2cc1bce94666404] = env->getMethodID(cls, "<init>", "()V");
                mids$[mid_createWeight_69d322032c5ae159] = env->getMethodID(cls, "createWeight", "(Ljava/util/Map;Lorg/apache/lucene/search/IndexSearcher;)V");
                mids$[mid_description_db9b55ba01e03e4b] = env->getMethodID(cls, "description", "()Ljava/lang/String;");
                mids$[mid_equals_8b72f2dcdde6fd1d] = env->getMethodID(cls, "equals", "(Ljava/lang/Object;)Z");
                mids$[mid_getValues_ede8eccd3e97f32c] = env->getMethodID(cls, "getValues", "(Ljava/util/Map;Lorg/apache/lucene/index/LeafReaderContext;)Lorg/apache/lucene/queries/function/FunctionValues;");
                mids$[mid_hashCode_9972fcc56b44e79d] = env->getMethodID(cls, "hashCode", "()I");
                mids$[mid_name_db9b55ba01e03e4b] = env->getMethodID(cls, "name", "()Ljava/lang/String;");

                class$ = new ::java::lang::Class(cls);
                live$ = true;
              }
              return (jclass) class$->this$;
            }

            MaxDocValueSource::MaxDocValueSource() : ::org::apache::lucene::queries::function::ValueSource(env->newObject(initializeClass, &mids$, mid_init$_f2cc1bce94666404)) {}

            void MaxDocValueSource::createWeight(const ::java::util::Map & a0, const ::org::apache::lucene::search::IndexSearcher & a1) const
            {
              env->callVoidMethod(this$, mids$[mid_createWeight_69d322032c5ae159], a0.this$, a1.this$);
            }

            ::java::lang::String MaxDocValueSource::description() const
            {
              return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_description_db9b55ba01e03e4b]));
            }

            jboolean MaxDocValueSource::equals(const ::java::lang::Object & a0) const
            {
              return env->callBooleanMethod(this$, mids$[mid_equals_8b72f2dcdde6fd1d], a0.this$);
            }

            ::org::apache::lucene::queries::function::FunctionValues MaxDocValueSource::getValues(const ::java::util::Map & a0, const ::org::apache::lucene::index::LeafReaderContext & a1) const
            {
              return ::org::apache::lucene::queries::function::FunctionValues(env->callObjectMethod(this$, mids$[mid_getValues_ede8eccd3e97f32c], a0.this$, a1.this$));
            }

            jint MaxDocValueSource::hashCode() const
            {
              return env->callIntMethod(this$, mids$[mid_hashCode_9972fcc56b44e79d]);
            }

            ::java::lang::String MaxDocValueSource::name() const
            {
              return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_name_db9b55ba01e03e4b]));
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queries {
        namespace function {
          namespace valuesource {
            static PyObject *t_MaxDocValueSource_cast_(PyTypeObject *type, PyObject *arg);
            static PyObject *t_MaxDocValueSource_instance_(PyTypeObject *type, PyObject *arg);
            static int t_MaxDocValueSource_init_(t_MaxDocValueSource *self, PyObject *args, PyObject *kwds);
            static PyObject *t_MaxDocValueSource_createWeight(t_MaxDocValueSource *self, PyObject *args);
            static PyObject *t_MaxDocValueSource_description(t_MaxDocValueSource *self, PyObject *args);
            static PyObject *t_MaxDocValueSource_equals(t_MaxDocValueSource *self, PyObject *args);
            static PyObject *t_MaxDocValueSource_getValues(t_MaxDocValueSource *self, PyObject *args);
            static PyObject *t_MaxDocValueSource_hashCode(t_MaxDocValueSource *self, PyObject *args);
            static PyObject *t_MaxDocValueSource_name(t_MaxDocValueSource *self);

            static PyMethodDef t_MaxDocValueSource__methods_[] = {
              DECLARE_METHOD(t_MaxDocValueSource, cast_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_MaxDocValueSource, instance_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_MaxDocValueSource, createWeight, METH_VARARGS),
              DECLARE_METHOD(t_MaxDocValueSource, description, METH_VARARGS),
              DECLARE_METHOD(t_MaxDocValueSource, equals, METH_VARARGS),
              DECLARE_METHOD(t_MaxDocValueSource, getValues, METH_VARARGS),
              DECLARE_METHOD(t_MaxDocValueSource, hashCode, METH_VARARGS),
              DECLARE_METHOD(t_MaxDocValueSource, name, METH_NOARGS),
              { NULL, NULL, 0, NULL }
            };

            static PyType_Slot PY_TYPE_SLOTS(MaxDocValueSource)[] = {
              { Py_tp_methods, t_MaxDocValueSource__methods_ },
              { Py_tp_init, (void *) t_MaxDocValueSource_init_ },
              { 0, NULL }
            };

            static PyType_Def *PY_TYPE_BASES(MaxDocValueSource)[] = {
              &PY_TYPE_DEF(::org::apache::lucene::queries::function::ValueSource),
              NULL
            };

            DEFINE_TYPE(MaxDocValueSource, t_MaxDocValueSource, MaxDocValueSource);

            void t_MaxDocValueSource::install(PyObject *module)
            {
              installType(&PY_TYPE(MaxDocValueSource), &PY_TYPE_DEF(MaxDocValueSource), module, "MaxDocValueSource", 0);
            }

            void t_MaxDocValueSource::initialize(PyObject *module)
            {
              PyObject_SetAttrString((PyObject *) PY_TYPE(MaxDocValueSource), "class_", make_descriptor(MaxDocValueSource::initializeClass, 1));
              PyObject_SetAttrString((PyObject *) PY_TYPE(MaxDocValueSource), "wrapfn_", make_descriptor(t_MaxDocValueSource::wrap_jobject));
              PyObject_SetAttrString((PyObject *) PY_TYPE(MaxDocValueSource), "boxfn_", make_descriptor(boxObject));
            }

            static PyObject *t_MaxDocValueSource_cast_(PyTypeObject *type, PyObject *arg)
            {
              if (!(arg = castCheck(arg, MaxDocValueSource::initializeClass, 1)))
                return NULL;
              return t_MaxDocValueSource::wrap_Object(MaxDocValueSource(((t_MaxDocValueSource *) arg)->object.this$));
            }
            static PyObject *t_MaxDocValueSource_instance_(PyTypeObject *type, PyObject *arg)
            {
              if (!castCheck(arg, MaxDocValueSource::initializeClass, 0))
                Py_RETURN_FALSE;
              Py_RETURN_TRUE;
            }

            static int t_MaxDocValueSource_init_(t_MaxDocValueSource *self, PyObject *args, PyObject *kwds)
            {
              MaxDocValueSource object((jobject) NULL);

              INT_CALL(object = MaxDocValueSource());
              self->object = object;

              return 0;
            }

            static PyObject *t_MaxDocValueSource_createWeight(t_MaxDocValueSource *self, PyObject *args)
            {
              ::java::util::Map a0((jobject) NULL);
              PyTypeObject **p0;
              ::org::apache::lucene::search::IndexSearcher a1((jobject) NULL);

              if (!parseArgs(args, "Kk", ::java::util::Map::initializeClass, ::org::apache::lucene::search::IndexSearcher::initializeClass, &a0, &p0, ::java::util::t_Map::parameters_, &a1))
              {
                OBJ_CALL(self->object.createWeight(a0, a1));
                Py_RETURN_NONE;
              }

              return callSuper(PY_TYPE(MaxDocValueSource), (PyObject *) self, "createWeight", args, 2);
            }

            static PyObject *t_MaxDocValueSource_description(t_MaxDocValueSource *self, PyObject *args)
            {
              ::java::lang::String result((jobject) NULL);

              if (!parseArgs(args, ""))
              {
                OBJ_CALL(result = self->object.description());
                return j2p(result);
              }

              return callSuper(PY_TYPE(MaxDocValueSource), (PyObject *) self, "description", args, 2);
            }

            static PyObject *t_MaxDocValueSource_equals(t_MaxDocValueSource *self, PyObject *args)
            {
              ::java::lang::Object a0((jobject) NULL);
              jboolean result;

              if (!parseArgs(args, "o", &a0))
              {
                OBJ_CALL(result = self->object.equals(a0));
                Py_RETURN_BOOL(result);
              }

              return callSuper(PY_TYPE(MaxDocValueSource), (PyObject *) self, "equals", args, 2);
            }

            static PyObject *t_MaxDocValueSource_getValues(t_MaxDocValueSource *self, PyObject *args)
            {
              ::java::util::Map a0((jobject) NULL);
              PyTypeObject **p0;
              ::org::apache::lucene::index::LeafReaderContext a1((jobject) NULL);
              ::org::apache::lucene::queries::function::FunctionValues result((jobject) NULL);

              if (!parseArgs(args, "Kk", ::java::util::Map::initializeClass, ::org::apache::lucene::index::LeafReaderContext::initializeClass, &a0, &p0, ::java::util::t_Map::parameters_, &a1))
              {
                OBJ_CALL(result = self->object.getValues(a0, a1));
                return ::org::apache::lucene::queries::function::t_FunctionValues::wrap_Object(result);
              }

              return callSuper(PY_TYPE(MaxDocValueSource), (PyObject *) self, "getValues", args, 2);
            }

            static PyObject *t_MaxDocValueSource_hashCode(t_MaxDocValueSource *self, PyObject *args)
            {
              jint result;

              if (!parseArgs(args, ""))
              {
                OBJ_CALL(result = self->object.hashCode());
                return PyLong_FromLong((long) result);
              }

              return callSuper(PY_TYPE(MaxDocValueSource), (PyObject *) self, "hashCode", args, 2);
            }

            static PyObject *t_MaxDocValueSource_name(t_MaxDocValueSource *self)
            {
              ::java::lang::String result((jobject) NULL);
              OBJ_CALL(result = self->object.name());
              return j2p(result);
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/id/IndonesianStemmer.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace id {

          ::java::lang::Class *IndonesianStemmer::class$ = NULL;
          jmethodID *IndonesianStemmer::mids$ = NULL;
          bool IndonesianStemmer::live$ = false;

          jclass IndonesianStemmer::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/id/IndonesianStemmer");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_f2cc1bce94666404] = env->getMethodID(cls, "<init>", "()V");
              mids$[mid_stem_ba7db3ec1688f4c1] = env->getMethodID(cls, "stem", "([CIZ)I");

              class$ = new ::java::lang::Class(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          IndonesianStemmer::IndonesianStemmer() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_f2cc1bce94666404)) {}

          jint IndonesianStemmer::stem(const JArray< jchar > & a0, jint a1, jboolean a2) const
          {
            return env->callIntMethod(this$, mids$[mid_stem_ba7db3ec1688f4c1], a0.this$, a1, a2);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace id {
          static PyObject *t_IndonesianStemmer_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_IndonesianStemmer_instance_(PyTypeObject *type, PyObject *arg);
          static int t_IndonesianStemmer_init_(t_IndonesianStemmer *self, PyObject *args, PyObject *kwds);
          static PyObject *t_IndonesianStemmer_stem(t_IndonesianStemmer *self, PyObject *args);

          static PyMethodDef t_IndonesianStemmer__methods_[] = {
            DECLARE_METHOD(t_IndonesianStemmer, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_IndonesianStemmer, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_IndonesianStemmer, stem, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          static PyType_Slot PY_TYPE_SLOTS(IndonesianStemmer)[] = {
            { Py_tp_methods, t_IndonesianStemmer__methods_ },
            { Py_tp_init, (void *) t_IndonesianStemmer_init_ },
            { 0, NULL }
          };

          static PyType_Def *PY_TYPE_BASES(IndonesianStemmer)[] = {
            &PY_TYPE_DEF(::java::lang::Object),
            NULL
          };

          DEFINE_TYPE(IndonesianStemmer, t_IndonesianStemmer, IndonesianStemmer);

          void t_IndonesianStemmer::install(PyObject *module)
          {
            installType(&PY_TYPE(IndonesianStemmer), &PY_TYPE_DEF(IndonesianStemmer), module, "IndonesianStemmer", 0);
          }

          void t_IndonesianStemmer::initialize(PyObject *module)
          {
            PyObject_SetAttrString((PyObject *) PY_TYPE(IndonesianStemmer), "class_", make_descriptor(IndonesianStemmer::initializeClass, 1));
            PyObject_SetAttrString((PyObject *) PY_TYPE(IndonesianStemmer), "wrapfn_", make_descriptor(t_IndonesianStemmer::wrap_jobject));
            PyObject_SetAttrString((PyObject *) PY_TYPE(IndonesianStemmer), "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_IndonesianStemmer_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, IndonesianStemmer::initializeClass, 1)))
              return NULL;
            return t_IndonesianStemmer::wrap_Object(IndonesianStemmer(((t_IndonesianStemmer *) arg)->object.this$));
          }
          static PyObject *t_IndonesianStemmer_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, IndonesianStemmer::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_IndonesianStemmer_init_(t_IndonesianStemmer *self, PyObject *args, PyObject *kwds)
          {
            IndonesianStemmer object((jobject) NULL);

            INT_CALL(object = IndonesianStemmer());
            self->object = object;

            return 0;
          }

          static PyObject *t_IndonesianStemmer_stem(t_IndonesianStemmer *self, PyObject *args)
          {
            JArray< jchar > a0((jobject) NULL);
            jint a1;
            jboolean a2;
            jint result;

            if (!parseArgs(args, "[CIZ", &a0, &a1, &a2))
            {
              OBJ_CALL(result = self->object.stem(a0, a1, a2));
              return PyLong_FromLong((long) result);
            }

            PyErr_SetArgsError((PyObject *) self, "stem", args);
            return NULL;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/util/compress/LZ4.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/store/DataOutput.h"
#include "org/apache/lucene/util/compress/LZ4$HashTable.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/store/DataInput.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        namespace compress {

          ::java::lang::Class *LZ4::class$ = NULL;
          jmethodID *LZ4::mids$ = NULL;
          bool LZ4::live$ = false;

          jclass LZ4::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/util/compress/LZ4");

              mids$ = new jmethodID[max_mid];
              mids$[mid_compress_ae65dc2b9963a818] = env->getStaticMethodID(cls, "compress", "([BIILorg/apache/lucene/store/DataOutput;Lorg/apache/lucene/util/compress/LZ4$HashTable;)V");
              mids$[mid_compressWithDictionary_7ec8ec4994d8a7bb] = env->getStaticMethodID(cls, "compressWithDictionary", "([BIIILorg/apache/lucene/store/DataOutput;Lorg/apache/lucene/util/compress/LZ4$HashTable;)V");
              mids$[mid_decompress_6f370b7cb168f968] = env->getStaticMethodID(cls, "decompress", "(Lorg/apache/lucene/store/DataInput;I[BI)I");

              class$ = new ::java::lang::Class(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          void LZ4::compress(const JArray< jbyte > & a0, jint a1, jint a2, const ::org::apache::lucene::store::DataOutput & a3, const ::org::apache::lucene::util::compress::LZ4$HashTable & a4)
          {
            jclass cls = env->getClass(initializeClass);
            env->callStaticVoidMethod(cls, mids$[mid_compress_ae65dc2b9963a818], a0.this$, a1, a2, a3.this$, a4.this$);
          }

          void LZ4::compressWithDictionary(const JArray< jbyte > & a0, jint a1, jint a2, jint a3, const ::org::apache::lucene::store::DataOutput & a4, const ::org::apache::lucene::util::compress::LZ4$HashTable & a5)
          {
            jclass cls = env->getClass(initializeClass);
            env->callStaticVoidMethod(cls, mids$[mid_compressWithDictionary_7ec8ec4994d8a7bb], a0.this$, a1, a2, a3, a4.this$, a5.this$);
          }

          jint LZ4::decompress(const ::org::apache::lucene::store::DataInput & a0, jint a1, const JArray< jbyte > & a2, jint a3)
          {
            jclass cls = env->getClass(initializeClass);
            return env->callStaticIntMethod(cls, mids$[mid_decompress_6f370b7cb168f968], a0.this$, a1, a2.this$, a3);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"
#include "org/apache/lucene/util/compress/LZ4$HighCompressionHashTable.h"
#include "org/apache/lucene/util/compress/LZ4$FastCompressionHashTable.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        namespace compress {
          static PyObject *t_LZ4_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_LZ4_instance_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_LZ4_compress(PyTypeObject *type, PyObject *args);
          static PyObject *t_LZ4_compressWithDictionary(PyTypeObject *type, PyObject *args);
          static PyObject *t_LZ4_decompress(PyTypeObject *type, PyObject *args);

          static PyMethodDef t_LZ4__methods_[] = {
            DECLARE_METHOD(t_LZ4, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_LZ4, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_LZ4, compress, METH_VARARGS | METH_CLASS),
            DECLARE_METHOD(t_LZ4, compressWithDictionary, METH_VARARGS | METH_CLASS),
            DECLARE_METHOD(t_LZ4, decompress, METH_VARARGS | METH_CLASS),
            { NULL, NULL, 0, NULL }
          };

          static PyType_Slot PY_TYPE_SLOTS(LZ4)[] = {
            { Py_tp_methods, t_LZ4__methods_ },
            { Py_tp_init, (void *) abstract_init },
            { 0, NULL }
          };

          static PyType_Def *PY_TYPE_BASES(LZ4)[] = {
            &PY_TYPE_DEF(::java::lang::Object),
            NULL
          };

          DEFINE_TYPE(LZ4, t_LZ4, LZ4);

          void t_LZ4::install(PyObject *module)
          {
            installType(&PY_TYPE(LZ4), &PY_TYPE_DEF(LZ4), module, "LZ4", 0);
            PyObject_SetAttrString((PyObject *) PY_TYPE(LZ4), "HighCompressionHashTable", make_descriptor(&PY_TYPE_DEF(LZ4$HighCompressionHashTable)));
            PyObject_SetAttrString((PyObject *) PY_TYPE(LZ4), "FastCompressionHashTable", make_descriptor(&PY_TYPE_DEF(LZ4$FastCompressionHashTable)));
            PyObject_SetAttrString((PyObject *) PY_TYPE(LZ4), "HashTable", make_descriptor(&PY_TYPE_DEF(LZ4$HashTable)));
          }

          void t_LZ4::initialize(PyObject *module)
          {
            PyObject_SetAttrString((PyObject *) PY_TYPE(LZ4), "class_", make_descriptor(LZ4::initializeClass, 1));
            PyObject_SetAttrString((PyObject *) PY_TYPE(LZ4), "wrapfn_", make_descriptor(t_LZ4::wrap_jobject));
            PyObject_SetAttrString((PyObject *) PY_TYPE(LZ4), "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_LZ4_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, LZ4::initializeClass, 1)))
              return NULL;
            return t_LZ4::wrap_Object(LZ4(((t_LZ4 *) arg)->object.this$));
          }
          static PyObject *t_LZ4_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, LZ4::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static PyObject *t_LZ4_compress(PyTypeObject *type, PyObject *args)
          {
            JArray< jbyte > a0((jobject) NULL);
            jint a1;
            jint a2;
            ::org::apache::lucene::store::DataOutput a3((jobject) NULL);
            ::org::apache::lucene::util::compress::LZ4$HashTable a4((jobject) NULL);

            if (!parseArgs(args, "[BIIkk", ::org::apache::lucene::store::DataOutput::initializeClass, ::org::apache::lucene::util::compress::LZ4$HashTable::initializeClass, &a0, &a1, &a2, &a3, &a4))
            {
              OBJ_CALL(::org::apache::lucene::util::compress::LZ4::compress(a0, a1, a2, a3, a4));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError(type, "compress", args);
            return NULL;
          }

          static PyObject *t_LZ4_compressWithDictionary(PyTypeObject *type, PyObject *args)
          {
            JArray< jbyte > a0((jobject) NULL);
            jint a1;
            jint a2;
            jint a3;
            ::org::apache::lucene::store::DataOutput a4((jobject) NULL);
            ::org::apache::lucene::util::compress::LZ4$HashTable a5((jobject) NULL);

            if (!parseArgs(args, "[BIIIkk", ::org::apache::lucene::store::DataOutput::initializeClass, ::org::apache::lucene::util::compress::LZ4$HashTable::initializeClass, &a0, &a1, &a2, &a3, &a4, &a5))
            {
              OBJ_CALL(::org::apache::lucene::util::compress::LZ4::compressWithDictionary(a0, a1, a2, a3, a4, a5));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError(type, "compressWithDictionary", args);
            return NULL;
          }

          static PyObject *t_LZ4_decompress(PyTypeObject *type, PyObject *args)
          {
            ::org::apache::lucene::store::DataInput a0((jobject) NULL);
            jint a1;
            JArray< jbyte > a2((jobject) NULL);
            jint a3;
            jint result;

            if (!parseArgs(args, "kI[BI", ::org::apache::lucene::store::DataInput::initializeClass, &a0, &a1, &a2, &a3))
            {
              OBJ_CALL(result = ::org::apache::lucene::util::compress::LZ4::decompress(a0, a1, a2, a3));
              return PyLong_FromLong((long) result);
            }

            PyErr_SetArgsError(type, "decompress", args);
            return NULL;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/IndexSortSortedNumericDocValuesRangeQuery.h"
#include "org/apache/lucene/index/IndexReader.h"
#include "org/apache/lucene/search/IndexSearcher.h"
#include "java/lang/Class.h"
#include "java/lang/Object.h"
#include "java/lang/String.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/search/QueryVisitor.h"
#include "org/apache/lucene/search/ScoreMode.h"
#include "org/apache/lucene/search/Weight.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {

        ::java::lang::Class *IndexSortSortedNumericDocValuesRangeQuery::class$ = NULL;
        jmethodID *IndexSortSortedNumericDocValuesRangeQuery::mids$ = NULL;
        bool IndexSortSortedNumericDocValuesRangeQuery::live$ = false;

        jclass IndexSortSortedNumericDocValuesRangeQuery::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/search/IndexSortSortedNumericDocValuesRangeQuery");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_a1464991b37534c3] = env->getMethodID(cls, "<init>", "(Ljava/lang/String;JJLorg/apache/lucene/search/Query;)V");
            mids$[mid_createWeight_f0ef0b5ea369ac06] = env->getMethodID(cls, "createWeight", "(Lorg/apache/lucene/search/IndexSearcher;Lorg/apache/lucene/search/ScoreMode;F)Lorg/apache/lucene/search/Weight;");
            mids$[mid_equals_8b72f2dcdde6fd1d] = env->getMethodID(cls, "equals", "(Ljava/lang/Object;)Z");
            mids$[mid_getFallbackQuery_cbf839a480265450] = env->getMethodID(cls, "getFallbackQuery", "()Lorg/apache/lucene/search/Query;");
            mids$[mid_hashCode_9972fcc56b44e79d] = env->getMethodID(cls, "hashCode", "()I");
            mids$[mid_rewrite_bb52f19a8254555c] = env->getMethodID(cls, "rewrite", "(Lorg/apache/lucene/index/IndexReader;)Lorg/apache/lucene/search/Query;");
            mids$[mid_toString_9bfa75c9f141b67f] = env->getMethodID(cls, "toString", "(Ljava/lang/String;)Ljava/lang/String;");
            mids$[mid_visit_f9e6207006c5b6c1] = env->getMethodID(cls, "visit", "(Lorg/apache/lucene/search/QueryVisitor;)V");

            class$ = new ::java::lang::Class(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        IndexSortSortedNumericDocValuesRangeQuery::IndexSortSortedNumericDocValuesRangeQuery(const ::java::lang::String & a0, jlong a1, jlong a2, const ::org::apache::lucene::search::Query & a3) : ::org::apache::lucene::search::Query(env->newObject(initializeClass, &mids$, mid_init$_a1464991b37534c3, a0.this$, a1, a2, a3.this$)) {}

        ::org::apache::lucene::search::Weight IndexSortSortedNumericDocValuesRangeQuery::createWeight(const ::org::apache::lucene::search::IndexSearcher & a0, const ::org::apache::lucene::search::ScoreMode & a1, jfloat a2) const
        {
          return ::org::apache::lucene::search::Weight(env->callObjectMethod(this$, mids$[mid_createWeight_f0ef0b5ea369ac06], a0.this$, a1.this$, a2));
        }

        jboolean IndexSortSortedNumericDocValuesRangeQuery::equals(const ::java::lang::Object & a0) const
        {
          return env->callBooleanMethod(this$, mids$[mid_equals_8b72f2dcdde6fd1d], a0.this$);
        }

        ::org::apache::lucene::search::Query IndexSortSortedNumericDocValuesRangeQuery::getFallbackQuery() const
        {
          return ::org::apache::lucene::search::Query(env->callObjectMethod(this$, mids$[mid_getFallbackQuery_cbf839a480265450]));
        }

        jint IndexSortSortedNumericDocValuesRangeQuery::hashCode() const
        {
          return env->callIntMethod(this$, mids$[mid_hashCode_9972fcc56b44e79d]);
        }

        ::org::apache::lucene::search::Query IndexSortSortedNumericDocValuesRangeQuery::rewrite(const ::org::apache::lucene::index::IndexReader & a0) const
        {
          return ::org::apache::lucene::search::Query(env->callObjectMethod(this$, mids$[mid_rewrite_bb52f19a8254555c], a0.this$));
        }

        ::java::lang::String IndexSortSortedNumericDocValuesRangeQuery::toString(const ::java::lang::String & a0) const
        {
          return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_9bfa75c9f141b67f], a0.this$));
        }

        void IndexSortSortedNumericDocValuesRangeQuery::visit(const ::org::apache::lucene::search::QueryVisitor & a0) const
        {
          env->callVoidMethod(this$, mids$[mid_visit_f9e6207006c5b6c1], a0.this$);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        static PyObject *t_IndexSortSortedNumericDocValuesRangeQuery_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_IndexSortSortedNumericDocValuesRangeQuery_instance_(PyTypeObject *type, PyObject *arg);
        static int t_IndexSortSortedNumericDocValuesRangeQuery_init_(t_IndexSortSortedNumericDocValuesRangeQuery *self, PyObject *args, PyObject *kwds);
        static PyObject *t_IndexSortSortedNumericDocValuesRangeQuery_createWeight(t_IndexSortSortedNumericDocValuesRangeQuery *self, PyObject *args);
        static PyObject *t_IndexSortSortedNumericDocValuesRangeQuery_equals(t_IndexSortSortedNumericDocValuesRangeQuery *self, PyObject *args);
        static PyObject *t_IndexSortSortedNumericDocValuesRangeQuery_getFallbackQuery(t_IndexSortSortedNumericDocValuesRangeQuery *self);
        static PyObject *t_IndexSortSortedNumericDocValuesRangeQuery_hashCode(t_IndexSortSortedNumericDocValuesRangeQuery *self, PyObject *args);
        static PyObject *t_IndexSortSortedNumericDocValuesRangeQuery_rewrite(t_IndexSortSortedNumericDocValuesRangeQuery *self, PyObject *args);
        static PyObject *t_IndexSortSortedNumericDocValuesRangeQuery_toString(t_IndexSortSortedNumericDocValuesRangeQuery *self, PyObject *args);
        static PyObject *t_IndexSortSortedNumericDocValuesRangeQuery_visit(t_IndexSortSortedNumericDocValuesRangeQuery *self, PyObject *args);
        static PyObject *t_IndexSortSortedNumericDocValuesRangeQuery_get__fallbackQuery(t_IndexSortSortedNumericDocValuesRangeQuery *self, void *data);
        static PyGetSetDef t_IndexSortSortedNumericDocValuesRangeQuery__fields_[] = {
          DECLARE_GET_FIELD(t_IndexSortSortedNumericDocValuesRangeQuery, fallbackQuery),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_IndexSortSortedNumericDocValuesRangeQuery__methods_[] = {
          DECLARE_METHOD(t_IndexSortSortedNumericDocValuesRangeQuery, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_IndexSortSortedNumericDocValuesRangeQuery, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_IndexSortSortedNumericDocValuesRangeQuery, createWeight, METH_VARARGS),
          DECLARE_METHOD(t_IndexSortSortedNumericDocValuesRangeQuery, equals, METH_VARARGS),
          DECLARE_METHOD(t_IndexSortSortedNumericDocValuesRangeQuery, getFallbackQuery, METH_NOARGS),
          DECLARE_METHOD(t_IndexSortSortedNumericDocValuesRangeQuery, hashCode, METH_VARARGS),
          DECLARE_METHOD(t_IndexSortSortedNumericDocValuesRangeQuery, rewrite, METH_VARARGS),
          DECLARE_METHOD(t_IndexSortSortedNumericDocValuesRangeQuery, toString, METH_VARARGS),
          DECLARE_METHOD(t_IndexSortSortedNumericDocValuesRangeQuery, visit, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        static PyType_Slot PY_TYPE_SLOTS(IndexSortSortedNumericDocValuesRangeQuery)[] = {
          { Py_tp_methods, t_IndexSortSortedNumericDocValuesRangeQuery__methods_ },
          { Py_tp_init, (void *) t_IndexSortSortedNumericDocValuesRangeQuery_init_ },
          { Py_tp_getset, t_IndexSortSortedNumericDocValuesRangeQuery__fields_ },
          { 0, NULL }
        };

        static PyType_Def *PY_TYPE_BASES(IndexSortSortedNumericDocValuesRangeQuery)[] = {
          &PY_TYPE_DEF(::org::apache::lucene::search::Query),
          NULL
        };

        DEFINE_TYPE(IndexSortSortedNumericDocValuesRangeQuery, t_IndexSortSortedNumericDocValuesRangeQuery, IndexSortSortedNumericDocValuesRangeQuery);

        void t_IndexSortSortedNumericDocValuesRangeQuery::install(PyObject *module)
        {
          installType(&PY_TYPE(IndexSortSortedNumericDocValuesRangeQuery), &PY_TYPE_DEF(IndexSortSortedNumericDocValuesRangeQuery), module, "IndexSortSortedNumericDocValuesRangeQuery", 0);
        }

        void t_IndexSortSortedNumericDocValuesRangeQuery::initialize(PyObject *module)
        {
          PyObject_SetAttrString((PyObject *) PY_TYPE(IndexSortSortedNumericDocValuesRangeQuery), "class_", make_descriptor(IndexSortSortedNumericDocValuesRangeQuery::initializeClass, 1));
          PyObject_SetAttrString((PyObject *) PY_TYPE(IndexSortSortedNumericDocValuesRangeQuery), "wrapfn_", make_descriptor(t_IndexSortSortedNumericDocValuesRangeQuery::wrap_jobject));
          PyObject_SetAttrString((PyObject *) PY_TYPE(IndexSortSortedNumericDocValuesRangeQuery), "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_IndexSortSortedNumericDocValuesRangeQuery_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, IndexSortSortedNumericDocValuesRangeQuery::initializeClass, 1)))
            return NULL;
          return t_IndexSortSortedNumericDocValuesRangeQuery::wrap_Object(IndexSortSortedNumericDocValuesRangeQuery(((t_IndexSortSortedNumericDocValuesRangeQuery *) arg)->object.this$));
        }
        static PyObject *t_IndexSortSortedNumericDocValuesRangeQuery_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, IndexSortSortedNumericDocValuesRangeQuery::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_IndexSortSortedNumericDocValuesRangeQuery_init_(t_IndexSortSortedNumericDocValuesRangeQuery *self, PyObject *args, PyObject *kwds)
        {
          ::java::lang::String a0((jobject) NULL);
          jlong a1;
          jlong a2;
          ::org::apache::lucene::search::Query a3((jobject) NULL);
          IndexSortSortedNumericDocValuesRangeQuery object((jobject) NULL);

          if (!parseArgs(args, "sJJk", ::org::apache::lucene::search::Query::initializeClass, &a0, &a1, &a2, &a3))
          {
            INT_CALL(object = IndexSortSortedNumericDocValuesRangeQuery(a0, a1, a2, a3));
            self->object = object;
          }
          else
          {
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }

        static PyObject *t_IndexSortSortedNumericDocValuesRangeQuery_createWeight(t_IndexSortSortedNumericDocValuesRangeQuery *self, PyObject *args)
        {
          ::org::apache::lucene::search::IndexSearcher a0((jobject) NULL);
          ::org::apache::lucene::search::ScoreMode a1((jobject) NULL);
          PyTypeObject **p1;
          jfloat a2;
          ::org::apache::lucene::search::Weight result((jobject) NULL);

          if (!parseArgs(args, "kKF", ::org::apache::lucene::search::IndexSearcher::initializeClass, ::org::apache::lucene::search::ScoreMode::initializeClass, &a0, &a1, &p1, ::org::apache::lucene::search::t_ScoreMode::parameters_, &a2))
          {
            OBJ_CALL(result = self->object.createWeight(a0, a1, a2));
            return ::org::apache::lucene::search::t_Weight::wrap_Object(result);
          }

          return callSuper(PY_TYPE(IndexSortSortedNumericDocValuesRangeQuery), (PyObject *) self, "createWeight", args, 2);
        }

        static PyObject *t_IndexSortSortedNumericDocValuesRangeQuery_equals(t_IndexSortSortedNumericDocValuesRangeQuery *self, PyObject *args)
        {
          ::java::lang::Object a0((jobject) NULL);
          jboolean result;

          if (!parseArgs(args, "o", &a0))
          {
            OBJ_CALL(result = self->object.equals(a0));
            Py_RETURN_BOOL(result);
          }

          return callSuper(PY_TYPE(IndexSortSortedNumericDocValuesRangeQuery), (PyObject *) self, "equals", args, 2);
        }

        static PyObject *t_IndexSortSortedNumericDocValuesRangeQuery_getFallbackQuery(t_IndexSortSortedNumericDocValuesRangeQuery *self)
        {
          ::org::apache::lucene::search::Query result((jobject) NULL);
          OBJ_CALL(result = self->object.getFallbackQuery());
          return ::org::apache::lucene::search::t_Query::wrap_Object(result);
        }

        static PyObject *t_IndexSortSortedNumericDocValuesRangeQuery_hashCode(t_IndexSortSortedNumericDocValuesRangeQuery *self, PyObject *args)
        {
          jint result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.hashCode());
            return PyLong_FromLong((long) result);
          }

          return callSuper(PY_TYPE(IndexSortSortedNumericDocValuesRangeQuery), (PyObject *) self, "hashCode", args, 2);
        }

        static PyObject *t_IndexSortSortedNumericDocValuesRangeQuery_rewrite(t_IndexSortSortedNumericDocValuesRangeQuery *self, PyObject *args)
        {
          ::org::apache::lucene::index::IndexReader a0((jobject) NULL);
          ::org::apache::lucene::search::Query result((jobject) NULL);

          if (!parseArgs(args, "k", ::org::apache::lucene::index::IndexReader::initializeClass, &a0))
          {
            OBJ_CALL(result = self->object.rewrite(a0));
            return ::org::apache::lucene::search::t_Query::wrap_Object(result);
          }

          return callSuper(PY_TYPE(IndexSortSortedNumericDocValuesRangeQuery), (PyObject *) self, "rewrite", args, 2);
        }

        static PyObject *t_IndexSortSortedNumericDocValuesRangeQuery_toString(t_IndexSortSortedNumericDocValuesRangeQuery *self, PyObject *args)
        {
          ::java::lang::String a0((jobject) NULL);
          ::java::lang::String result((jobject) NULL);

          if (!parseArgs(args, "s", &a0))
          {
            OBJ_CALL(result = self->object.toString(a0));
            return j2p(result);
          }

          return callSuper(PY_TYPE(IndexSortSortedNumericDocValuesRangeQuery), (PyObject *) self, "toString", args, 2);
        }

        static PyObject *t_IndexSortSortedNumericDocValuesRangeQuery_visit(t_IndexSortSortedNumericDocValuesRangeQuery *self, PyObject *args)
        {
          ::org::apache::lucene::search::QueryVisitor a0((jobject) NULL);

          if (!parseArgs(args, "k", ::org::apache::lucene::search::QueryVisitor::initializeClass, &a0))
          {
            OBJ_CALL(self->object.visit(a0));
            Py_RETURN_NONE;
          }

          return callSuper(PY_TYPE(IndexSortSortedNumericDocValuesRangeQuery), (PyObject *) self, "visit", args, 2);
        }

        static PyObject *t_IndexSortSortedNumericDocValuesRangeQuery_get__fallbackQuery(t_IndexSortSortedNumericDocValuesRangeQuery *self, void *data)
        {
          ::org::apache::lucene::search::Query value((jobject) NULL);
          OBJ_CALL(value = self->object.getFallbackQuery());
          return ::org::apache::lucene::search::t_Query::wrap_Object(value);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/tokenattributes/KeywordAttributeImpl.h"
#include "java/lang/Class.h"
#include "java/lang/Object.h"
#include "org/apache/lucene/analysis/tokenattributes/KeywordAttribute.h"
#include "org/apache/lucene/util/AttributeReflector.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace tokenattributes {

          ::java::lang::Class *KeywordAttributeImpl::class$ = NULL;
          jmethodID *KeywordAttributeImpl::mids$ = NULL;
          bool KeywordAttributeImpl::live$ = false;

          jclass KeywordAttributeImpl::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/tokenattributes/KeywordAttributeImpl");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_f2cc1bce94666404] = env->getMethodID(cls, "<init>", "()V");
              mids$[mid_clear_f2cc1bce94666404] = env->getMethodID(cls, "clear", "()V");
              mids$[mid_copyTo_26346c38ebc9c090] = env->getMethodID(cls, "copyTo", "(Lorg/apache/lucene/util/AttributeImpl;)V");
              mids$[mid_equals_8b72f2dcdde6fd1d] = env->getMethodID(cls, "equals", "(Ljava/lang/Object;)Z");
              mids$[mid_hashCode_9972fcc56b44e79d] = env->getMethodID(cls, "hashCode", "()I");
              mids$[mid_isKeyword_8454bd5aa23fd11e] = env->getMethodID(cls, "isKeyword", "()Z");
              mids$[mid_reflectWith_b880c72ee67200af] = env->getMethodID(cls, "reflectWith", "(Lorg/apache/lucene/util/AttributeReflector;)V");
              mids$[mid_setKeyword_9d72768e8fdce2b7] = env->getMethodID(cls, "setKeyword", "(Z)V");

              class$ = new ::java::lang::Class(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          KeywordAttributeImpl::KeywordAttributeImpl() : ::org::apache::lucene::util::AttributeImpl(env->newObject(initializeClass, &mids$, mid_init$_f2cc1bce94666404)) {}

          void KeywordAttributeImpl::clear() const
          {
            env->callVoidMethod(this$, mids$[mid_clear_f2cc1bce94666404]);
          }

          void KeywordAttributeImpl::copyTo(const ::org::apache::lucene::util::AttributeImpl & a0) const
          {
            env->callVoidMethod(this$, mids$[mid_copyTo_26346c38ebc9c090], a0.this$);
          }

          jboolean KeywordAttributeImpl::equals(const ::java::lang::Object & a0) const
          {
            return env->callBooleanMethod(this$, mids$[mid_equals_8b72f2dcdde6fd1d], a0.this$);
          }

          jint KeywordAttributeImpl::hashCode() const
          {
            return env->callIntMethod(this$, mids$[mid_hashCode_9972fcc56b44e79d]);
          }

          jboolean KeywordAttributeImpl::isKeyword() const
          {
            return env->callBooleanMethod(this$, mids$[mid_isKeyword_8454bd5aa23fd11e]);
          }

          void KeywordAttributeImpl::reflectWith(const ::org::apache::lucene::util::AttributeReflector & a0) const
          {
            env->callVoidMethod(this$, mids$[mid_reflectWith_b880c72ee67200af], a0.this$);
          }

          void KeywordAttributeImpl::setKeyword(jboolean a0) const
          {
            env->callVoidMethod(this$, mids$[mid_setKeyword_9d72768e8fdce2b7], a0);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace tokenattributes {
          static PyObject *t_KeywordAttributeImpl_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_KeywordAttributeImpl_instance_(PyTypeObject *type, PyObject *arg);
          static int t_KeywordAttributeImpl_init_(t_KeywordAttributeImpl *self, PyObject *args, PyObject *kwds);
          static PyObject *t_KeywordAttributeImpl_clear(t_KeywordAttributeImpl *self, PyObject *args);
          static PyObject *t_KeywordAttributeImpl_copyTo(t_KeywordAttributeImpl *self, PyObject *args);
          static PyObject *t_KeywordAttributeImpl_equals(t_KeywordAttributeImpl *self, PyObject *args);
          static PyObject *t_KeywordAttributeImpl_hashCode(t_KeywordAttributeImpl *self, PyObject *args);
          static PyObject *t_KeywordAttributeImpl_isKeyword(t_KeywordAttributeImpl *self);
          static PyObject *t_KeywordAttributeImpl_reflectWith(t_KeywordAttributeImpl *self, PyObject *args);
          static PyObject *t_KeywordAttributeImpl_setKeyword(t_KeywordAttributeImpl *self, PyObject *arg);
          static PyObject *t_KeywordAttributeImpl_get__keyword(t_KeywordAttributeImpl *self, void *data);
          static int t_KeywordAttributeImpl_set__keyword(t_KeywordAttributeImpl *self, PyObject *arg, void *data);
          static PyGetSetDef t_KeywordAttributeImpl__fields_[] = {
            DECLARE_GETSET_FIELD(t_KeywordAttributeImpl, keyword),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_KeywordAttributeImpl__methods_[] = {
            DECLARE_METHOD(t_KeywordAttributeImpl, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_KeywordAttributeImpl, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_KeywordAttributeImpl, clear, METH_VARARGS),
            DECLARE_METHOD(t_KeywordAttributeImpl, copyTo, METH_VARARGS),
            DECLARE_METHOD(t_KeywordAttributeImpl, equals, METH_VARARGS),
            DECLARE_METHOD(t_KeywordAttributeImpl, hashCode, METH_VARARGS),
            DECLARE_METHOD(t_KeywordAttributeImpl, isKeyword, METH_NOARGS),
            DECLARE_METHOD(t_KeywordAttributeImpl, reflectWith, METH_VARARGS),
            DECLARE_METHOD(t_KeywordAttributeImpl, setKeyword, METH_O),
            { NULL, NULL, 0, NULL }
          };

          static PyType_Slot PY_TYPE_SLOTS(KeywordAttributeImpl)[] = {
            { Py_tp_methods, t_KeywordAttributeImpl__methods_ },
            { Py_tp_init, (void *) t_KeywordAttributeImpl_init_ },
            { Py_tp_getset, t_KeywordAttributeImpl__fields_ },
            { 0, NULL }
          };

          static PyType_Def *PY_TYPE_BASES(KeywordAttributeImpl)[] = {
            &PY_TYPE_DEF(::org::apache::lucene::util::AttributeImpl),
            NULL
          };

          DEFINE_TYPE(KeywordAttributeImpl, t_KeywordAttributeImpl, KeywordAttributeImpl);

          void t_KeywordAttributeImpl::install(PyObject *module)
          {
            installType(&PY_TYPE(KeywordAttributeImpl), &PY_TYPE_DEF(KeywordAttributeImpl), module, "KeywordAttributeImpl", 0);
          }

          void t_KeywordAttributeImpl::initialize(PyObject *module)
          {
            PyObject_SetAttrString((PyObject *) PY_TYPE(KeywordAttributeImpl), "class_", make_descriptor(KeywordAttributeImpl::initializeClass, 1));
            PyObject_SetAttrString((PyObject *) PY_TYPE(KeywordAttributeImpl), "wrapfn_", make_descriptor(t_KeywordAttributeImpl::wrap_jobject));
            PyObject_SetAttrString((PyObject *) PY_TYPE(KeywordAttributeImpl), "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_KeywordAttributeImpl_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, KeywordAttributeImpl::initializeClass, 1)))
              return NULL;
            return t_KeywordAttributeImpl::wrap_Object(KeywordAttributeImpl(((t_KeywordAttributeImpl *) arg)->object.this$));
          }
          static PyObject *t_KeywordAttributeImpl_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, KeywordAttributeImpl::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_KeywordAttributeImpl_init_(t_KeywordAttributeImpl *self, PyObject *args, PyObject *kwds)
          {
            KeywordAttributeImpl object((jobject) NULL);

            INT_CALL(object = KeywordAttributeImpl());
            self->object = object;

            return 0;
          }

          static PyObject *t_KeywordAttributeImpl_clear(t_KeywordAttributeImpl *self, PyObject *args)
          {

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(self->object.clear());
              Py_RETURN_NONE;
            }

            return callSuper(PY_TYPE(KeywordAttributeImpl), (PyObject *) self, "clear", args, 2);
          }

          static PyObject *t_KeywordAttributeImpl_copyTo(t_KeywordAttributeImpl *self, PyObject *args)
          {
            ::org::apache::lucene::util::AttributeImpl a0((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::util::AttributeImpl::initializeClass, &a0))
            {
              OBJ_CALL(self->object.copyTo(a0));
              Py_RETURN_NONE;
            }

            return callSuper(PY_TYPE(KeywordAttributeImpl), (PyObject *) self, "copyTo", args, 2);
          }

          static PyObject *t_KeywordAttributeImpl_equals(t_KeywordAttributeImpl *self, PyObject *args)
          {
            ::java::lang::Object a0((jobject) NULL);
            jboolean result;

            if (!parseArgs(args, "o", &a0))
            {
              OBJ_CALL(result = self->object.equals(a0));
              Py_RETURN_BOOL(result);
            }

            return callSuper(PY_TYPE(KeywordAttributeImpl), (PyObject *) self, "equals", args, 2);
          }

          static PyObject *t_KeywordAttributeImpl_hashCode(t_KeywordAttributeImpl *self, PyObject *args)
          {
            jint result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.hashCode());
              return PyLong_FromLong((long) result);
            }

            return callSuper(PY_TYPE(KeywordAttributeImpl), (PyObject *) self, "hashCode", args, 2);
          }

          static PyObject *t_KeywordAttributeImpl_isKeyword(t_KeywordAttributeImpl *self)
          {
            jboolean result;
            OBJ_CALL(result = self->object.isKeyword());
            Py_RETURN_BOOL(result);
          }

          static PyObject *t_KeywordAttributeImpl_reflectWith(t_KeywordAttributeImpl *self, PyObject *args)
          {
            ::org::apache::lucene::util::AttributeReflector a0((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::util::AttributeReflector::initializeClass, &a0))
            {
              OBJ_CALL(self->object.reflectWith(a0));
              Py_RETURN_NONE;
            }

            return callSuper(PY_TYPE(KeywordAttributeImpl), (PyObject *) self, "reflectWith", args, 2);
          }

          static PyObject *t_KeywordAttributeImpl_setKeyword(t_KeywordAttributeImpl *self, PyObject *arg)
          {
            jboolean a0;

            if (!parseArg(arg, "Z", &a0))
            {
              OBJ_CALL(self->object.setKeyword(a0));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError((PyObject *) self, "setKeyword", arg);
            return NULL;
          }

          static PyObject *t_KeywordAttributeImpl_get__keyword(t_KeywordAttributeImpl *self, void *data)
          {
            jboolean value;
            OBJ_CALL(value = self->object.isKeyword());
            Py_RETURN_BOOL(value);
          }
          static int t_KeywordAttributeImpl_set__keyword(t_KeywordAttributeImpl *self, PyObject *arg, void *data)
          {
            {
              jboolean value;
              if (!parseArg(arg, "Z", &value))
              {
                INT_CALL(self->object.setKeyword(value));
                return 0;
              }
            }
            PyErr_SetArgsError((PyObject *) self, "keyword", arg);
            return -1;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/index/LeafMetaData.h"
#include "org/apache/lucene/search/Sort.h"
#include "org/apache/lucene/util/Version.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {

        ::java::lang::Class *LeafMetaData::class$ = NULL;
        jmethodID *LeafMetaData::mids$ = NULL;
        bool LeafMetaData::live$ = false;

        jclass LeafMetaData::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/index/LeafMetaData");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_0997e1804de63edc] = env->getMethodID(cls, "<init>", "(ILorg/apache/lucene/util/Version;Lorg/apache/lucene/search/Sort;)V");
            mids$[mid_getCreatedVersionMajor_9972fcc56b44e79d] = env->getMethodID(cls, "getCreatedVersionMajor", "()I");
            mids$[mid_getMinVersion_6b68647131bbda98] = env->getMethodID(cls, "getMinVersion", "()Lorg/apache/lucene/util/Version;");
            mids$[mid_getSort_f58d0196b42aaee4] = env->getMethodID(cls, "getSort", "()Lorg/apache/lucene/search/Sort;");

            class$ = new ::java::lang::Class(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        LeafMetaData::LeafMetaData(jint a0, const ::org::apache::lucene::util::Version & a1, const ::org::apache::lucene::search::Sort & a2) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_0997e1804de63edc, a0, a1.this$, a2.this$)) {}

        jint LeafMetaData::getCreatedVersionMajor() const
        {
          return env->callIntMethod(this$, mids$[mid_getCreatedVersionMajor_9972fcc56b44e79d]);
        }

        ::org::apache::lucene::util::Version LeafMetaData::getMinVersion() const
        {
          return ::org::apache::lucene::util::Version(env->callObjectMethod(this$, mids$[mid_getMinVersion_6b68647131bbda98]));
        }

        ::org::apache::lucene::search::Sort LeafMetaData::getSort() const
        {
          return ::org::apache::lucene::search::Sort(env->callObjectMethod(this$, mids$[mid_getSort_f58d0196b42aaee4]));
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {
        static PyObject *t_LeafMetaData_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_LeafMetaData_instance_(PyTypeObject *type, PyObject *arg);
        static int t_LeafMetaData_init_(t_LeafMetaData *self, PyObject *args, PyObject *kwds);
        static PyObject *t_LeafMetaData_getCreatedVersionMajor(t_LeafMetaData *self);
        static PyObject *t_LeafMetaData_getMinVersion(t_LeafMetaData *self);
        static PyObject *t_LeafMetaData_getSort(t_LeafMetaData *self);
        static PyObject *t_LeafMetaData_get__createdVersionMajor(t_LeafMetaData *self, void *data);
        static PyObject *t_LeafMetaData_get__minVersion(t_LeafMetaData *self, void *data);
        static PyObject *t_LeafMetaData_get__sort(t_LeafMetaData *self, void *data);
        static PyGetSetDef t_LeafMetaData__fields_[] = {
          DECLARE_GET_FIELD(t_LeafMetaData, createdVersionMajor),
          DECLARE_GET_FIELD(t_LeafMetaData, minVersion),
          DECLARE_GET_FIELD(t_LeafMetaData, sort),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_LeafMetaData__methods_[] = {
          DECLARE_METHOD(t_LeafMetaData, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_LeafMetaData, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_LeafMetaData, getCreatedVersionMajor, METH_NOARGS),
          DECLARE_METHOD(t_LeafMetaData, getMinVersion, METH_NOARGS),
          DECLARE_METHOD(t_LeafMetaData, getSort, METH_NOARGS),
          { NULL, NULL, 0, NULL }
        };

        static PyType_Slot PY_TYPE_SLOTS(LeafMetaData)[] = {
          { Py_tp_methods, t_LeafMetaData__methods_ },
          { Py_tp_init, (void *) t_LeafMetaData_init_ },
          { Py_tp_getset, t_LeafMetaData__fields_ },
          { 0, NULL }
        };

        static PyType_Def *PY_TYPE_BASES(LeafMetaData)[] = {
          &PY_TYPE_DEF(::java::lang::Object),
          NULL
        };

        DEFINE_TYPE(LeafMetaData, t_LeafMetaData, LeafMetaData);

        void t_LeafMetaData::install(PyObject *module)
        {
          installType(&PY_TYPE(LeafMetaData), &PY_TYPE_DEF(LeafMetaData), module, "LeafMetaData", 0);
        }

        void t_LeafMetaData::initialize(PyObject *module)
        {
          PyObject_SetAttrString((PyObject *) PY_TYPE(LeafMetaData), "class_", make_descriptor(LeafMetaData::initializeClass, 1));
          PyObject_SetAttrString((PyObject *) PY_TYPE(LeafMetaData), "wrapfn_", make_descriptor(t_LeafMetaData::wrap_jobject));
          PyObject_SetAttrString((PyObject *) PY_TYPE(LeafMetaData), "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_LeafMetaData_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, LeafMetaData::initializeClass, 1)))
            return NULL;
          return t_LeafMetaData::wrap_Object(LeafMetaData(((t_LeafMetaData *) arg)->object.this$));
        }
        static PyObject *t_LeafMetaData_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, LeafMetaData::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_LeafMetaData_init_(t_LeafMetaData *self, PyObject *args, PyObject *kwds)
        {
          jint a0;
          ::org::apache::lucene::util::Version a1((jobject) NULL);
          ::org::apache::lucene::search::Sort a2((jobject) NULL);
          LeafMetaData object((jobject) NULL);

          if (!parseArgs(args, "Ikk", ::org::apache::lucene::util::Version::initializeClass, ::org::apache::lucene::search::Sort::initializeClass, &a0, &a1, &a2))
          {
            INT_CALL(object = LeafMetaData(a0, a1, a2));
            self->object = object;
          }
          else
          {
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }

        static PyObject *t_LeafMetaData_getCreatedVersionMajor(t_LeafMetaData *self)
        {
          jint result;
          OBJ_CALL(result = self->object.getCreatedVersionMajor());
          return PyLong_FromLong((long) result);
        }

        static PyObject *t_LeafMetaData_getMinVersion(t_LeafMetaData *self)
        {
          ::org::apache::lucene::util::Version result((jobject) NULL);
          OBJ_CALL(result = self->object.getMinVersion());
          return ::org::apache::lucene::util::t_Version::wrap_Object(result);
        }

        static PyObject *t_LeafMetaData_getSort(t_LeafMetaData *self)
        {
          ::org::apache::lucene::search::Sort result((jobject) NULL);
          OBJ_CALL(result = self->object.getSort());
          return ::org::apache::lucene::search::t_Sort::wrap_Object(result);
        }

        static PyObject *t_LeafMetaData_get__createdVersionMajor(t_LeafMetaData *self, void *data)
        {
          jint value;
          OBJ_CALL(value = self->object.getCreatedVersionMajor());
          return PyLong_FromLong((long) value);
        }

        static PyObject *t_LeafMetaData_get__minVersion(t_LeafMetaData *self, void *data)
        {
          ::org::apache::lucene::util::Version value((jobject) NULL);
          OBJ_CALL(value = self->object.getMinVersion());
          return ::org::apache::lucene::util::t_Version::wrap_Object(value);
        }

        static PyObject *t_LeafMetaData_get__sort(t_LeafMetaData *self, void *data)
        {
          ::org::apache::lucene::search::Sort value((jobject) NULL);
          OBJ_CALL(value = self->object.getSort());
          return ::org::apache::lucene::search::t_Sort::wrap_Object(value);
        }
      }
    }
  }
}
