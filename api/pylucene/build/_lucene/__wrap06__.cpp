#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/index/LogMergePolicy.h"
#include "java/util/Map.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/index/MergePolicy$MergeSpecification.h"
#include "org/apache/lucene/index/MergeTrigger.h"
#include "org/apache/lucene/index/MergePolicy$MergeContext.h"
#include "org/apache/lucene/index/SegmentCommitInfo.h"
#include "java/lang/String.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/index/SegmentInfos.h"
#include "java/lang/Boolean.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {

        ::java::lang::Class *LogMergePolicy::class$ = NULL;
        jmethodID *LogMergePolicy::mids$ = NULL;
        bool LogMergePolicy::live$ = false;
        jint LogMergePolicy::DEFAULT_MAX_MERGE_DOCS = (jint) 0;
        jint LogMergePolicy::DEFAULT_MERGE_FACTOR = (jint) 0;
        jdouble LogMergePolicy::DEFAULT_NO_CFS_RATIO = (jdouble) 0;
        jdouble LogMergePolicy::LEVEL_LOG_SPAN = (jdouble) 0;

        jclass LogMergePolicy::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/index/LogMergePolicy");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_f2cc1bce94666404] = env->getMethodID(cls, "<init>", "()V");
            mids$[mid_findForcedDeletesMerges_a4b8e92c69858eaa] = env->getMethodID(cls, "findForcedDeletesMerges", "(Lorg/apache/lucene/index/SegmentInfos;Lorg/apache/lucene/index/MergePolicy$MergeContext;)Lorg/apache/lucene/index/MergePolicy$MergeSpecification;");
            mids$[mid_findForcedMerges_7f23fa79bde67ff3] = env->getMethodID(cls, "findForcedMerges", "(Lorg/apache/lucene/index/SegmentInfos;ILjava/util/Map;Lorg/apache/lucene/index/MergePolicy$MergeContext;)Lorg/apache/lucene/index/MergePolicy$MergeSpecification;");
            mids$[mid_findMerges_ce0e45d4a26e56b1] = env->getMethodID(cls, "findMerges", "(Lorg/apache/lucene/index/MergeTrigger;Lorg/apache/lucene/index/SegmentInfos;Lorg/apache/lucene/index/MergePolicy$MergeContext;)Lorg/apache/lucene/index/MergePolicy$MergeSpecification;");
            mids$[mid_getCalibrateSizeByDeletes_8454bd5aa23fd11e] = env->getMethodID(cls, "getCalibrateSizeByDeletes", "()Z");
            mids$[mid_getMaxMergeDocs_9972fcc56b44e79d] = env->getMethodID(cls, "getMaxMergeDocs", "()I");
            mids$[mid_getMergeFactor_9972fcc56b44e79d] = env->getMethodID(cls, "getMergeFactor", "()I");
            mids$[mid_setCalibrateSizeByDeletes_9d72768e8fdce2b7] = env->getMethodID(cls, "setCalibrateSizeByDeletes", "(Z)V");
            mids$[mid_setMaxMergeDocs_040c4cd0390c5aff] = env->getMethodID(cls, "setMaxMergeDocs", "(I)V");
            mids$[mid_setMergeFactor_040c4cd0390c5aff] = env->getMethodID(cls, "setMergeFactor", "(I)V");
            mids$[mid_toString_db9b55ba01e03e4b] = env->getMethodID(cls, "toString", "()Ljava/lang/String;");
            mids$[mid_sizeDocs_ad7dad42a292eb83] = env->getMethodID(cls, "sizeDocs", "(Lorg/apache/lucene/index/SegmentCommitInfo;Lorg/apache/lucene/index/MergePolicy$MergeContext;)J");
            mids$[mid_sizeBytes_ad7dad42a292eb83] = env->getMethodID(cls, "sizeBytes", "(Lorg/apache/lucene/index/SegmentCommitInfo;Lorg/apache/lucene/index/MergePolicy$MergeContext;)J");
            mids$[mid_isMerged_ad9b3d30839f25fc] = env->getMethodID(cls, "isMerged", "(Lorg/apache/lucene/index/SegmentInfos;ILjava/util/Map;Lorg/apache/lucene/index/MergePolicy$MergeContext;)Z");

            class$ = new ::java::lang::Class(cls);
            cls = (jclass) class$->this$;

            DEFAULT_MAX_MERGE_DOCS = env->getStaticIntField(cls, "DEFAULT_MAX_MERGE_DOCS");
            DEFAULT_MERGE_FACTOR = env->getStaticIntField(cls, "DEFAULT_MERGE_FACTOR");
            DEFAULT_NO_CFS_RATIO = env->getStaticDoubleField(cls, "DEFAULT_NO_CFS_RATIO");
            LEVEL_LOG_SPAN = env->getStaticDoubleField(cls, "LEVEL_LOG_SPAN");
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        LogMergePolicy::LogMergePolicy() : ::org::apache::lucene::index::MergePolicy(env->newObject(initializeClass, &mids$, mid_init$_f2cc1bce94666404)) {}

        ::org::apache::lucene::index::MergePolicy$MergeSpecification LogMergePolicy::findForcedDeletesMerges(const ::org::apache::lucene::index::SegmentInfos & a0, const ::org::apache::lucene::index::MergePolicy$MergeContext & a1) const
        {
          return ::org::apache::lucene::index::MergePolicy$MergeSpecification(env->callObjectMethod(this$, mids$[mid_findForcedDeletesMerges_a4b8e92c69858eaa], a0.this$, a1.this$));
        }

        ::org::apache::lucene::index::MergePolicy$MergeSpecification LogMergePolicy::findForcedMerges(const ::org::apache::lucene::index::SegmentInfos & a0, jint a1, const ::java::util::Map & a2, const ::org::apache::lucene::index::MergePolicy$MergeContext & a3) const
        {
          return ::org::apache::lucene::index::MergePolicy$MergeSpecification(env->callObjectMethod(this$, mids$[mid_findForcedMerges_7f23fa79bde67ff3], a0.this$, a1, a2.this$, a3.this$));
        }

        ::org::apache::lucene::index::MergePolicy$MergeSpecification LogMergePolicy::findMerges(const ::org::apache::lucene::index::MergeTrigger & a0, const ::org::apache::lucene::index::SegmentInfos & a1, const ::org::apache::lucene::index::MergePolicy$MergeContext & a2) const
        {
          return ::org::apache::lucene::index::MergePolicy$MergeSpecification(env->callObjectMethod(this$, mids$[mid_findMerges_ce0e45d4a26e56b1], a0.this$, a1.this$, a2.this$));
        }

        jboolean LogMergePolicy::getCalibrateSizeByDeletes() const
        {
          return env->callBooleanMethod(this$, mids$[mid_getCalibrateSizeByDeletes_8454bd5aa23fd11e]);
        }

        jint LogMergePolicy::getMaxMergeDocs() const
        {
          return env->callIntMethod(this$, mids$[mid_getMaxMergeDocs_9972fcc56b44e79d]);
        }

        jint LogMergePolicy::getMergeFactor() const
        {
          return env->callIntMethod(this$, mids$[mid_getMergeFactor_9972fcc56b44e79d]);
        }

        void LogMergePolicy::setCalibrateSizeByDeletes(jboolean a0) const
        {
          env->callVoidMethod(this$, mids$[mid_setCalibrateSizeByDeletes_9d72768e8fdce2b7], a0);
        }

        void LogMergePolicy::setMaxMergeDocs(jint a0) const
        {
          env->callVoidMethod(this$, mids$[mid_setMaxMergeDocs_040c4cd0390c5aff], a0);
        }

        void LogMergePolicy::setMergeFactor(jint a0) const
        {
          env->callVoidMethod(this$, mids$[mid_setMergeFactor_040c4cd0390c5aff], a0);
        }

        ::java::lang::String LogMergePolicy::toString() const
        {
          return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_db9b55ba01e03e4b]));
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {
        static PyObject *t_LogMergePolicy_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_LogMergePolicy_instance_(PyTypeObject *type, PyObject *arg);
        static int t_LogMergePolicy_init_(t_LogMergePolicy *self, PyObject *args, PyObject *kwds);
        static PyObject *t_LogMergePolicy_findForcedDeletesMerges(t_LogMergePolicy *self, PyObject *args);
        static PyObject *t_LogMergePolicy_findForcedMerges(t_LogMergePolicy *self, PyObject *args);
        static PyObject *t_LogMergePolicy_findMerges(t_LogMergePolicy *self, PyObject *args);
        static PyObject *t_LogMergePolicy_getCalibrateSizeByDeletes(t_LogMergePolicy *self);
        static PyObject *t_LogMergePolicy_getMaxMergeDocs(t_LogMergePolicy *self);
        static PyObject *t_LogMergePolicy_getMergeFactor(t_LogMergePolicy *self);
        static PyObject *t_LogMergePolicy_setCalibrateSizeByDeletes(t_LogMergePolicy *self, PyObject *arg);
        static PyObject *t_LogMergePolicy_setMaxMergeDocs(t_LogMergePolicy *self, PyObject *arg);
        static PyObject *t_LogMergePolicy_setMergeFactor(t_LogMergePolicy *self, PyObject *arg);
        static PyObject *t_LogMergePolicy_toString(t_LogMergePolicy *self, PyObject *args);
        static PyObject *t_LogMergePolicy_get__calibrateSizeByDeletes(t_LogMergePolicy *self, void *data);
        static int t_LogMergePolicy_set__calibrateSizeByDeletes(t_LogMergePolicy *self, PyObject *arg, void *data);
        static PyObject *t_LogMergePolicy_get__maxMergeDocs(t_LogMergePolicy *self, void *data);
        static int t_LogMergePolicy_set__maxMergeDocs(t_LogMergePolicy *self, PyObject *arg, void *data);
        static PyObject *t_LogMergePolicy_get__mergeFactor(t_LogMergePolicy *self, void *data);
        static int t_LogMergePolicy_set__mergeFactor(t_LogMergePolicy *self, PyObject *arg, void *data);
        static PyGetSetDef t_LogMergePolicy__fields_[] = {
          DECLARE_GETSET_FIELD(t_LogMergePolicy, calibrateSizeByDeletes),
          DECLARE_GETSET_FIELD(t_LogMergePolicy, maxMergeDocs),
          DECLARE_GETSET_FIELD(t_LogMergePolicy, mergeFactor),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_LogMergePolicy__methods_[] = {
          DECLARE_METHOD(t_LogMergePolicy, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_LogMergePolicy, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_LogMergePolicy, findForcedDeletesMerges, METH_VARARGS),
          DECLARE_METHOD(t_LogMergePolicy, findForcedMerges, METH_VARARGS),
          DECLARE_METHOD(t_LogMergePolicy, findMerges, METH_VARARGS),
          DECLARE_METHOD(t_LogMergePolicy, getCalibrateSizeByDeletes, METH_NOARGS),
          DECLARE_METHOD(t_LogMergePolicy, getMaxMergeDocs, METH_NOARGS),
          DECLARE_METHOD(t_LogMergePolicy, getMergeFactor, METH_NOARGS),
          DECLARE_METHOD(t_LogMergePolicy, setCalibrateSizeByDeletes, METH_O),
          DECLARE_METHOD(t_LogMergePolicy, setMaxMergeDocs, METH_O),
          DECLARE_METHOD(t_LogMergePolicy, setMergeFactor, METH_O),
          DECLARE_METHOD(t_LogMergePolicy, toString, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        static PyType_Slot PY_TYPE_SLOTS(LogMergePolicy)[] = {
          { Py_tp_methods, t_LogMergePolicy__methods_ },
          { Py_tp_init, (void *) t_LogMergePolicy_init_ },
          { Py_tp_getset, t_LogMergePolicy__fields_ },
          { 0, NULL }
        };

        static PyType_Def *PY_TYPE_BASES(LogMergePolicy)[] = {
          &PY_TYPE_DEF(::org::apache::lucene::index::MergePolicy),
          NULL
        };

        DEFINE_TYPE(LogMergePolicy, t_LogMergePolicy, LogMergePolicy);

        void t_LogMergePolicy::install(PyObject *module)
        {
          installType(&PY_TYPE(LogMergePolicy), &PY_TYPE_DEF(LogMergePolicy), module, "LogMergePolicy", 0);
        }

        void t_LogMergePolicy::initialize(PyObject *module)
        {
          PyObject_SetAttrString((PyObject *) PY_TYPE(LogMergePolicy), "class_", make_descriptor(LogMergePolicy::initializeClass, 1));
          PyObject_SetAttrString((PyObject *) PY_TYPE(LogMergePolicy), "wrapfn_", make_descriptor(t_LogMergePolicy::wrap_jobject));
          PyObject_SetAttrString((PyObject *) PY_TYPE(LogMergePolicy), "boxfn_", make_descriptor(boxObject));
          env->getClass(LogMergePolicy::initializeClass);
          PyObject_SetAttrString((PyObject *) PY_TYPE(LogMergePolicy), "DEFAULT_MAX_MERGE_DOCS", make_descriptor(LogMergePolicy::DEFAULT_MAX_MERGE_DOCS));
          PyObject_SetAttrString((PyObject *) PY_TYPE(LogMergePolicy), "DEFAULT_MERGE_FACTOR", make_descriptor(LogMergePolicy::DEFAULT_MERGE_FACTOR));
          PyObject_SetAttrString((PyObject *) PY_TYPE(LogMergePolicy), "DEFAULT_NO_CFS_RATIO", make_descriptor(LogMergePolicy::DEFAULT_NO_CFS_RATIO));
          PyObject_SetAttrString((PyObject *) PY_TYPE(LogMergePolicy), "LEVEL_LOG_SPAN", make_descriptor(LogMergePolicy::LEVEL_LOG_SPAN));
        }

        static PyObject *t_LogMergePolicy_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, LogMergePolicy::initializeClass, 1)))
            return NULL;
          return t_LogMergePolicy::wrap_Object(LogMergePolicy(((t_LogMergePolicy *) arg)->object.this$));
        }
        static PyObject *t_LogMergePolicy_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, LogMergePolicy::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_LogMergePolicy_init_(t_LogMergePolicy *self, PyObject *args, PyObject *kwds)
        {
          LogMergePolicy object((jobject) NULL);

          INT_CALL(object = LogMergePolicy());
          self->object = object;

          return 0;
        }

        static PyObject *t_LogMergePolicy_findForcedDeletesMerges(t_LogMergePolicy *self, PyObject *args)
        {
          ::org::apache::lucene::index::SegmentInfos a0((jobject) NULL);
          ::org::apache::lucene::index::MergePolicy$MergeContext a1((jobject) NULL);
          ::org::apache::lucene::index::MergePolicy$MergeSpecification result((jobject) NULL);

          if (!parseArgs(args, "kk", ::org::apache::lucene::index::SegmentInfos::initializeClass, ::org::apache::lucene::index::MergePolicy$MergeContext::initializeClass, &a0, &a1))
          {
            OBJ_CALL(result = self->object.findForcedDeletesMerges(a0, a1));
            return ::org::apache::lucene::index::t_MergePolicy$MergeSpecification::wrap_Object(result);
          }

          return callSuper(PY_TYPE(LogMergePolicy), (PyObject *) self, "findForcedDeletesMerges", args, 2);
        }

        static PyObject *t_LogMergePolicy_findForcedMerges(t_LogMergePolicy *self, PyObject *args)
        {
          ::org::apache::lucene::index::SegmentInfos a0((jobject) NULL);
          jint a1;
          ::java::util::Map a2((jobject) NULL);
          PyTypeObject **p2;
          ::org::apache::lucene::index::MergePolicy$MergeContext a3((jobject) NULL);
          ::org::apache::lucene::index::MergePolicy$MergeSpecification result((jobject) NULL);

          if (!parseArgs(args, "kIKk", ::org::apache::lucene::index::SegmentInfos::initializeClass, ::java::util::Map::initializeClass, ::org::apache::lucene::index::MergePolicy$MergeContext::initializeClass, &a0, &a1, &a2, &p2, ::java::util::t_Map::parameters_, &a3))
          {
            OBJ_CALL(result = self->object.findForcedMerges(a0, a1, a2, a3));
            return ::org::apache::lucene::index::t_MergePolicy$MergeSpecification::wrap_Object(result);
          }

          return callSuper(PY_TYPE(LogMergePolicy), (PyObject *) self, "findForcedMerges", args, 2);
        }

        static PyObject *t_LogMergePolicy_findMerges(t_LogMergePolicy *self, PyObject *args)
        {
          ::org::apache::lucene::index::MergeTrigger a0((jobject) NULL);
          PyTypeObject **p0;
          ::org::apache::lucene::index::SegmentInfos a1((jobject) NULL);
          ::org::apache::lucene::index::MergePolicy$MergeContext a2((jobject) NULL);
          ::org::apache::lucene::index::MergePolicy$MergeSpecification result((jobject) NULL);

          if (!parseArgs(args, "Kkk", ::org::apache::lucene::index::MergeTrigger::initializeClass, ::org::apache::lucene::index::SegmentInfos::initializeClass, ::org::apache::lucene::index::MergePolicy$MergeContext::initializeClass, &a0, &p0, ::org::apache::lucene::index::t_MergeTrigger::parameters_, &a1, &a2))
          {
            OBJ_CALL(result = self->object.findMerges(a0, a1, a2));
            return ::org::apache::lucene::index::t_MergePolicy$MergeSpecification::wrap_Object(result);
          }

          return callSuper(PY_TYPE(LogMergePolicy), (PyObject *) self, "findMerges", args, 2);
        }

        static PyObject *t_LogMergePolicy_getCalibrateSizeByDeletes(t_LogMergePolicy *self)
        {
          jboolean result;
          OBJ_CALL(result = self->object.getCalibrateSizeByDeletes());
          Py_RETURN_BOOL(result);
        }

        static PyObject *t_LogMergePolicy_getMaxMergeDocs(t_LogMergePolicy *self)
        {
          jint result;
          OBJ_CALL(result = self->object.getMaxMergeDocs());
          return PyLong_FromLong((long) result);
        }

        static PyObject *t_LogMergePolicy_getMergeFactor(t_LogMergePolicy *self)
        {
          jint result;
          OBJ_CALL(result = self->object.getMergeFactor());
          return PyLong_FromLong((long) result);
        }

        static PyObject *t_LogMergePolicy_setCalibrateSizeByDeletes(t_LogMergePolicy *self, PyObject *arg)
        {
          jboolean a0;

          if (!parseArg(arg, "Z", &a0))
          {
            OBJ_CALL(self->object.setCalibrateSizeByDeletes(a0));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "setCalibrateSizeByDeletes", arg);
          return NULL;
        }

        static PyObject *t_LogMergePolicy_setMaxMergeDocs(t_LogMergePolicy *self, PyObject *arg)
        {
          jint a0;

          if (!parseArg(arg, "I", &a0))
          {
            OBJ_CALL(self->object.setMaxMergeDocs(a0));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "setMaxMergeDocs", arg);
          return NULL;
        }

        static PyObject *t_LogMergePolicy_setMergeFactor(t_LogMergePolicy *self, PyObject *arg)
        {
          jint a0;

          if (!parseArg(arg, "I", &a0))
          {
            OBJ_CALL(self->object.setMergeFactor(a0));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "setMergeFactor", arg);
          return NULL;
        }

        static PyObject *t_LogMergePolicy_toString(t_LogMergePolicy *self, PyObject *args)
        {
          ::java::lang::String result((jobject) NULL);

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.toString());
            return j2p(result);
          }

          return callSuper(PY_TYPE(LogMergePolicy), (PyObject *) self, "toString", args, 2);
        }

        static PyObject *t_LogMergePolicy_get__calibrateSizeByDeletes(t_LogMergePolicy *self, void *data)
        {
          jboolean value;
          OBJ_CALL(value = self->object.getCalibrateSizeByDeletes());
          Py_RETURN_BOOL(value);
        }
        static int t_LogMergePolicy_set__calibrateSizeByDeletes(t_LogMergePolicy *self, PyObject *arg, void *data)
        {
          {
            jboolean value;
            if (!parseArg(arg, "Z", &value))
            {
              INT_CALL(self->object.setCalibrateSizeByDeletes(value));
              return 0;
            }
          }
          PyErr_SetArgsError((PyObject *) self, "calibrateSizeByDeletes", arg);
          return -1;
        }

        static PyObject *t_LogMergePolicy_get__maxMergeDocs(t_LogMergePolicy *self, void *data)
        {
          jint value;
          OBJ_CALL(value = self->object.getMaxMergeDocs());
          return PyLong_FromLong((long) value);
        }
        static int t_LogMergePolicy_set__maxMergeDocs(t_LogMergePolicy *self, PyObject *arg, void *data)
        {
          {
            jint value;
            if (!parseArg(arg, "I", &value))
            {
              INT_CALL(self->object.setMaxMergeDocs(value));
              return 0;
            }
          }
          PyErr_SetArgsError((PyObject *) self, "maxMergeDocs", arg);
          return -1;
        }

        static PyObject *t_LogMergePolicy_get__mergeFactor(t_LogMergePolicy *self, void *data)
        {
          jint value;
          OBJ_CALL(value = self->object.getMergeFactor());
          return PyLong_FromLong((long) value);
        }
        static int t_LogMergePolicy_set__mergeFactor(t_LogMergePolicy *self, PyObject *arg, void *data)
        {
          {
            jint value;
            if (!parseArg(arg, "I", &value))
            {
              INT_CALL(self->object.setMergeFactor(value));
              return 0;
            }
          }
          PyErr_SetArgsError((PyObject *) self, "mergeFactor", arg);
          return -1;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queryparser/flexible/core/nodes/QueryNodeImpl.h"
#include "java/util/Map.h"
#include "java/lang/Cloneable.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/queryparser/flexible/core/nodes/QueryNode.h"
#include "java/lang/String.h"
#include "java/util/List.h"
#include "java/lang/CloneNotSupportedException.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace core {
            namespace nodes {

              ::java::lang::Class *QueryNodeImpl::class$ = NULL;
              jmethodID *QueryNodeImpl::mids$ = NULL;
              bool QueryNodeImpl::live$ = false;
              ::java::lang::String *QueryNodeImpl::PLAINTEXT_FIELD_NAME = NULL;

              jclass QueryNodeImpl::initializeClass(bool getOnly)
              {
                if (getOnly)
                  return (jclass) (live$ ? class$->this$ : NULL);
                if (class$ == NULL)
                {
                  jclass cls = (jclass) env->findClass("org/apache/lucene/queryparser/flexible/core/nodes/QueryNodeImpl");

                  mids$ = new jmethodID[max_mid];
                  mids$[mid_init$_f2cc1bce94666404] = env->getMethodID(cls, "<init>", "()V");
                  mids$[mid_add_d03990be0130160d] = env->getMethodID(cls, "add", "(Ljava/util/List;)V");
                  mids$[mid_add_f80bf4f68564485e] = env->getMethodID(cls, "add", "(Lorg/apache/lucene/queryparser/flexible/core/nodes/QueryNode;)V");
                  mids$[mid_clone_7f4134ae4682ace0] = env->getMethodID(cls, "clone", "()Lorg/apache/lucene/queryparser/flexible/core/nodes/QueryNode;");
                  mids$[mid_cloneTree_7f4134ae4682ace0] = env->getMethodID(cls, "cloneTree", "()Lorg/apache/lucene/queryparser/flexible/core/nodes/QueryNode;");
                  mids$[mid_containsTag_145b2d0af0c06b93] = env->getMethodID(cls, "containsTag", "(Ljava/lang/String;)Z");
                  mids$[mid_getChildren_49ec78390f08338a] = env->getMethodID(cls, "getChildren", "()Ljava/util/List;");
                  mids$[mid_getParent_7f4134ae4682ace0] = env->getMethodID(cls, "getParent", "()Lorg/apache/lucene/queryparser/flexible/core/nodes/QueryNode;");
                  mids$[mid_getTag_c0a3c3394484d296] = env->getMethodID(cls, "getTag", "(Ljava/lang/String;)Ljava/lang/Object;");
                  mids$[mid_getTagMap_1c3426541413a55d] = env->getMethodID(cls, "getTagMap", "()Ljava/util/Map;");
                  mids$[mid_isLeaf_8454bd5aa23fd11e] = env->getMethodID(cls, "isLeaf", "()Z");
                  mids$[mid_removeChildren_f80bf4f68564485e] = env->getMethodID(cls, "removeChildren", "(Lorg/apache/lucene/queryparser/flexible/core/nodes/QueryNode;)V");
                  mids$[mid_removeFromParent_f2cc1bce94666404] = env->getMethodID(cls, "removeFromParent", "()V");
                  mids$[mid_set_d03990be0130160d] = env->getMethodID(cls, "set", "(Ljava/util/List;)V");
                  mids$[mid_setTag_a814174df0bbb9ee] = env->getMethodID(cls, "setTag", "(Ljava/lang/String;Ljava/lang/Object;)V");
                  mids$[mid_toString_db9b55ba01e03e4b] = env->getMethodID(cls, "toString", "()Ljava/lang/String;");
                  mids$[mid_unsetTag_9fd2eb66a64e6f0f] = env->getMethodID(cls, "unsetTag", "(Ljava/lang/String;)V");
                  mids$[mid_setLeaf_9d72768e8fdce2b7] = env->getMethodID(cls, "setLeaf", "(Z)V");
                  mids$[mid_isRoot_8454bd5aa23fd11e] = env->getMethodID(cls, "isRoot", "()Z");
                  mids$[mid_isDefaultField_2cd6b83cb18fe093] = env->getMethodID(cls, "isDefaultField", "(Ljava/lang/CharSequence;)Z");
                  mids$[mid_allocate_f2cc1bce94666404] = env->getMethodID(cls, "allocate", "()V");

                  class$ = new ::java::lang::Class(cls);
                  cls = (jclass) class$->this$;

                  PLAINTEXT_FIELD_NAME = new ::java::lang::String(env->getStaticObjectField(cls, "PLAINTEXT_FIELD_NAME", "Ljava/lang/String;"));
                  live$ = true;
                }
                return (jclass) class$->this$;
              }

              QueryNodeImpl::QueryNodeImpl() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_f2cc1bce94666404)) {}

              void QueryNodeImpl::add(const ::java::util::List & a0) const
              {
                env->callVoidMethod(this$, mids$[mid_add_d03990be0130160d], a0.this$);
              }

              void QueryNodeImpl::add(const ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode & a0) const
              {
                env->callVoidMethod(this$, mids$[mid_add_f80bf4f68564485e], a0.this$);
              }

              ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode QueryNodeImpl::clone() const
              {
                return ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode(env->callObjectMethod(this$, mids$[mid_clone_7f4134ae4682ace0]));
              }

              ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode QueryNodeImpl::cloneTree() const
              {
                return ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode(env->callObjectMethod(this$, mids$[mid_cloneTree_7f4134ae4682ace0]));
              }

              jboolean QueryNodeImpl::containsTag(const ::java::lang::String & a0) const
              {
                return env->callBooleanMethod(this$, mids$[mid_containsTag_145b2d0af0c06b93], a0.this$);
              }

              ::java::util::List QueryNodeImpl::getChildren() const
              {
                return ::java::util::List(env->callObjectMethod(this$, mids$[mid_getChildren_49ec78390f08338a]));
              }

              ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode QueryNodeImpl::getParent() const
              {
                return ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode(env->callObjectMethod(this$, mids$[mid_getParent_7f4134ae4682ace0]));
              }

              ::java::lang::Object QueryNodeImpl::getTag(const ::java::lang::String & a0) const
              {
                return ::java::lang::Object(env->callObjectMethod(this$, mids$[mid_getTag_c0a3c3394484d296], a0.this$));
              }

              ::java::util::Map QueryNodeImpl::getTagMap() const
              {
                return ::java::util::Map(env->callObjectMethod(this$, mids$[mid_getTagMap_1c3426541413a55d]));
              }

              jboolean QueryNodeImpl::isLeaf() const
              {
                return env->callBooleanMethod(this$, mids$[mid_isLeaf_8454bd5aa23fd11e]);
              }

              void QueryNodeImpl::removeChildren(const ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode & a0) const
              {
                env->callVoidMethod(this$, mids$[mid_removeChildren_f80bf4f68564485e], a0.this$);
              }

              void QueryNodeImpl::removeFromParent() const
              {
                env->callVoidMethod(this$, mids$[mid_removeFromParent_f2cc1bce94666404]);
              }

              void QueryNodeImpl::set(const ::java::util::List & a0) const
              {
                env->callVoidMethod(this$, mids$[mid_set_d03990be0130160d], a0.this$);
              }

              void QueryNodeImpl::setTag(const ::java::lang::String & a0, const ::java::lang::Object & a1) const
              {
                env->callVoidMethod(this$, mids$[mid_setTag_a814174df0bbb9ee], a0.this$, a1.this$);
              }

              ::java::lang::String QueryNodeImpl::toString() const
              {
                return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_db9b55ba01e03e4b]));
              }

              void QueryNodeImpl::unsetTag(const ::java::lang::String & a0) const
              {
                env->callVoidMethod(this$, mids$[mid_unsetTag_9fd2eb66a64e6f0f], a0.this$);
              }
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace core {
            namespace nodes {
              static PyObject *t_QueryNodeImpl_cast_(PyTypeObject *type, PyObject *arg);
              static PyObject *t_QueryNodeImpl_instance_(PyTypeObject *type, PyObject *arg);
              static int t_QueryNodeImpl_init_(t_QueryNodeImpl *self, PyObject *args, PyObject *kwds);
              static PyObject *t_QueryNodeImpl_add(t_QueryNodeImpl *self, PyObject *args);
              static PyObject *t_QueryNodeImpl_clone(t_QueryNodeImpl *self);
              static PyObject *t_QueryNodeImpl_cloneTree(t_QueryNodeImpl *self);
              static PyObject *t_QueryNodeImpl_containsTag(t_QueryNodeImpl *self, PyObject *arg);
              static PyObject *t_QueryNodeImpl_getChildren(t_QueryNodeImpl *self);
              static PyObject *t_QueryNodeImpl_getParent(t_QueryNodeImpl *self);
              static PyObject *t_QueryNodeImpl_getTag(t_QueryNodeImpl *self, PyObject *arg);
              static PyObject *t_QueryNodeImpl_getTagMap(t_QueryNodeImpl *self);
              static PyObject *t_QueryNodeImpl_isLeaf(t_QueryNodeImpl *self);
              static PyObject *t_QueryNodeImpl_removeChildren(t_QueryNodeImpl *self, PyObject *arg);
              static PyObject *t_QueryNodeImpl_removeFromParent(t_QueryNodeImpl *self);
              static PyObject *t_QueryNodeImpl_set(t_QueryNodeImpl *self, PyObject *arg);
              static PyObject *t_QueryNodeImpl_setTag(t_QueryNodeImpl *self, PyObject *args);
              static PyObject *t_QueryNodeImpl_toString(t_QueryNodeImpl *self, PyObject *args);
              static PyObject *t_QueryNodeImpl_unsetTag(t_QueryNodeImpl *self, PyObject *arg);
              static PyObject *t_QueryNodeImpl_get__children(t_QueryNodeImpl *self, void *data);
              static PyObject *t_QueryNodeImpl_get__leaf(t_QueryNodeImpl *self, void *data);
              static PyObject *t_QueryNodeImpl_get__parent(t_QueryNodeImpl *self, void *data);
              static PyObject *t_QueryNodeImpl_get__tagMap(t_QueryNodeImpl *self, void *data);
              static PyGetSetDef t_QueryNodeImpl__fields_[] = {
                DECLARE_GET_FIELD(t_QueryNodeImpl, children),
                DECLARE_GET_FIELD(t_QueryNodeImpl, leaf),
                DECLARE_GET_FIELD(t_QueryNodeImpl, parent),
                DECLARE_GET_FIELD(t_QueryNodeImpl, tagMap),
                { NULL, NULL, NULL, NULL, NULL }
              };

              static PyMethodDef t_QueryNodeImpl__methods_[] = {
                DECLARE_METHOD(t_QueryNodeImpl, cast_, METH_O | METH_CLASS),
                DECLARE_METHOD(t_QueryNodeImpl, instance_, METH_O | METH_CLASS),
                DECLARE_METHOD(t_QueryNodeImpl, add, METH_VARARGS),
                DECLARE_METHOD(t_QueryNodeImpl, clone, METH_NOARGS),
                DECLARE_METHOD(t_QueryNodeImpl, cloneTree, METH_NOARGS),
                DECLARE_METHOD(t_QueryNodeImpl, containsTag, METH_O),
                DECLARE_METHOD(t_QueryNodeImpl, getChildren, METH_NOARGS),
                DECLARE_METHOD(t_QueryNodeImpl, getParent, METH_NOARGS),
                DECLARE_METHOD(t_QueryNodeImpl, getTag, METH_O),
                DECLARE_METHOD(t_QueryNodeImpl, getTagMap, METH_NOARGS),
                DECLARE_METHOD(t_QueryNodeImpl, isLeaf, METH_NOARGS),
                DECLARE_METHOD(t_QueryNodeImpl, removeChildren, METH_O),
                DECLARE_METHOD(t_QueryNodeImpl, removeFromParent, METH_NOARGS),
                DECLARE_METHOD(t_QueryNodeImpl, set, METH_O),
                DECLARE_METHOD(t_QueryNodeImpl, setTag, METH_VARARGS),
                DECLARE_METHOD(t_QueryNodeImpl, toString, METH_VARARGS),
                DECLARE_METHOD(t_QueryNodeImpl, unsetTag, METH_O),
                { NULL, NULL, 0, NULL }
              };

              static PyType_Slot PY_TYPE_SLOTS(QueryNodeImpl)[] = {
                { Py_tp_methods, t_QueryNodeImpl__methods_ },
                { Py_tp_init, (void *) t_QueryNodeImpl_init_ },
                { Py_tp_getset, t_QueryNodeImpl__fields_ },
                { 0, NULL }
              };

              static PyType_Def *PY_TYPE_BASES(QueryNodeImpl)[] = {
                &PY_TYPE_DEF(::java::lang::Object),
                NULL
              };

              DEFINE_TYPE(QueryNodeImpl, t_QueryNodeImpl, QueryNodeImpl);

              void t_QueryNodeImpl::install(PyObject *module)
              {
                installType(&PY_TYPE(QueryNodeImpl), &PY_TYPE_DEF(QueryNodeImpl), module, "QueryNodeImpl", 0);
              }

              void t_QueryNodeImpl::initialize(PyObject *module)
              {
                PyObject_SetAttrString((PyObject *) PY_TYPE(QueryNodeImpl), "class_", make_descriptor(QueryNodeImpl::initializeClass, 1));
                PyObject_SetAttrString((PyObject *) PY_TYPE(QueryNodeImpl), "wrapfn_", make_descriptor(t_QueryNodeImpl::wrap_jobject));
                PyObject_SetAttrString((PyObject *) PY_TYPE(QueryNodeImpl), "boxfn_", make_descriptor(boxObject));
                env->getClass(QueryNodeImpl::initializeClass);
                PyObject_SetAttrString((PyObject *) PY_TYPE(QueryNodeImpl), "PLAINTEXT_FIELD_NAME", make_descriptor(j2p(*QueryNodeImpl::PLAINTEXT_FIELD_NAME)));
              }

              static PyObject *t_QueryNodeImpl_cast_(PyTypeObject *type, PyObject *arg)
              {
                if (!(arg = castCheck(arg, QueryNodeImpl::initializeClass, 1)))
                  return NULL;
                return t_QueryNodeImpl::wrap_Object(QueryNodeImpl(((t_QueryNodeImpl *) arg)->object.this$));
              }
              static PyObject *t_QueryNodeImpl_instance_(PyTypeObject *type, PyObject *arg)
              {
                if (!castCheck(arg, QueryNodeImpl::initializeClass, 0))
                  Py_RETURN_FALSE;
                Py_RETURN_TRUE;
              }

              static int t_QueryNodeImpl_init_(t_QueryNodeImpl *self, PyObject *args, PyObject *kwds)
              {
                QueryNodeImpl object((jobject) NULL);

                INT_CALL(object = QueryNodeImpl());
                self->object = object;

                return 0;
              }

              static PyObject *t_QueryNodeImpl_add(t_QueryNodeImpl *self, PyObject *args)
              {
                switch (PyTuple_GET_SIZE(args)) {
                 case 1:
                  {
                    ::java::util::List a0((jobject) NULL);
                    PyTypeObject **p0;

                    if (!parseArgs(args, "K", ::java::util::List::initializeClass, &a0, &p0, ::java::util::t_List::parameters_))
                    {
                      OBJ_CALL(self->object.add(a0));
                      Py_RETURN_NONE;
                    }
                  }
                  {
                    ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode a0((jobject) NULL);

                    if (!parseArgs(args, "k", ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode::initializeClass, &a0))
                    {
                      OBJ_CALL(self->object.add(a0));
                      Py_RETURN_NONE;
                    }
                  }
                }

                PyErr_SetArgsError((PyObject *) self, "add", args);
                return NULL;
              }

              static PyObject *t_QueryNodeImpl_clone(t_QueryNodeImpl *self)
              {
                ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode result((jobject) NULL);
                OBJ_CALL(result = self->object.clone());
                return ::org::apache::lucene::queryparser::flexible::core::nodes::t_QueryNode::wrap_Object(result);
              }

              static PyObject *t_QueryNodeImpl_cloneTree(t_QueryNodeImpl *self)
              {
                ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode result((jobject) NULL);
                OBJ_CALL(result = self->object.cloneTree());
                return ::org::apache::lucene::queryparser::flexible::core::nodes::t_QueryNode::wrap_Object(result);
              }

              static PyObject *t_QueryNodeImpl_containsTag(t_QueryNodeImpl *self, PyObject *arg)
              {
                ::java::lang::String a0((jobject) NULL);
                jboolean result;

                if (!parseArg(arg, "s", &a0))
                {
                  OBJ_CALL(result = self->object.containsTag(a0));
                  Py_RETURN_BOOL(result);
                }

                PyErr_SetArgsError((PyObject *) self, "containsTag", arg);
                return NULL;
              }

              static PyObject *t_QueryNodeImpl_getChildren(t_QueryNodeImpl *self)
              {
                ::java::util::List result((jobject) NULL);
                OBJ_CALL(result = self->object.getChildren());
                return ::java::util::t_List::wrap_Object(result, ::org::apache::lucene::queryparser::flexible::core::nodes::PY_TYPE(QueryNode));
              }

              static PyObject *t_QueryNodeImpl_getParent(t_QueryNodeImpl *self)
              {
                ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode result((jobject) NULL);
                OBJ_CALL(result = self->object.getParent());
                return ::org::apache::lucene::queryparser::flexible::core::nodes::t_QueryNode::wrap_Object(result);
              }

              static PyObject *t_QueryNodeImpl_getTag(t_QueryNodeImpl *self, PyObject *arg)
              {
                ::java::lang::String a0((jobject) NULL);
                ::java::lang::Object result((jobject) NULL);

                if (!parseArg(arg, "s", &a0))
                {
                  OBJ_CALL(result = self->object.getTag(a0));
                  return ::java::lang::t_Object::wrap_Object(result);
                }

                PyErr_SetArgsError((PyObject *) self, "getTag", arg);
                return NULL;
              }

              static PyObject *t_QueryNodeImpl_getTagMap(t_QueryNodeImpl *self)
              {
                ::java::util::Map result((jobject) NULL);
                OBJ_CALL(result = self->object.getTagMap());
                return ::java::util::t_Map::wrap_Object(result, ::java::lang::PY_TYPE(String), ::java::lang::PY_TYPE(Object));
              }

              static PyObject *t_QueryNodeImpl_isLeaf(t_QueryNodeImpl *self)
              {
                jboolean result;
                OBJ_CALL(result = self->object.isLeaf());
                Py_RETURN_BOOL(result);
              }

              static PyObject *t_QueryNodeImpl_removeChildren(t_QueryNodeImpl *self, PyObject *arg)
              {
                ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode a0((jobject) NULL);

                if (!parseArg(arg, "k", ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode::initializeClass, &a0))
                {
                  OBJ_CALL(self->object.removeChildren(a0));
                  Py_RETURN_NONE;
                }

                PyErr_SetArgsError((PyObject *) self, "removeChildren", arg);
                return NULL;
              }

              static PyObject *t_QueryNodeImpl_removeFromParent(t_QueryNodeImpl *self)
              {
                OBJ_CALL(self->object.removeFromParent());
                Py_RETURN_NONE;
              }

              static PyObject *t_QueryNodeImpl_set(t_QueryNodeImpl *self, PyObject *arg)
              {
                ::java::util::List a0((jobject) NULL);
                PyTypeObject **p0;

                if (!parseArg(arg, "K", ::java::util::List::initializeClass, &a0, &p0, ::java::util::t_List::parameters_))
                {
                  OBJ_CALL(self->object.set(a0));
                  Py_RETURN_NONE;
                }

                PyErr_SetArgsError((PyObject *) self, "set", arg);
                return NULL;
              }

              static PyObject *t_QueryNodeImpl_setTag(t_QueryNodeImpl *self, PyObject *args)
              {
                ::java::lang::String a0((jobject) NULL);
                ::java::lang::Object a1((jobject) NULL);

                if (!parseArgs(args, "so", &a0, &a1))
                {
                  OBJ_CALL(self->object.setTag(a0, a1));
                  Py_RETURN_NONE;
                }

                PyErr_SetArgsError((PyObject *) self, "setTag", args);
                return NULL;
              }

              static PyObject *t_QueryNodeImpl_toString(t_QueryNodeImpl *self, PyObject *args)
              {
                ::java::lang::String result((jobject) NULL);

                if (!parseArgs(args, ""))
                {
                  OBJ_CALL(result = self->object.toString());
                  return j2p(result);
                }

                return callSuper(PY_TYPE(QueryNodeImpl), (PyObject *) self, "toString", args, 2);
              }

              static PyObject *t_QueryNodeImpl_unsetTag(t_QueryNodeImpl *self, PyObject *arg)
              {
                ::java::lang::String a0((jobject) NULL);

                if (!parseArg(arg, "s", &a0))
                {
                  OBJ_CALL(self->object.unsetTag(a0));
                  Py_RETURN_NONE;
                }

                PyErr_SetArgsError((PyObject *) self, "unsetTag", arg);
                return NULL;
              }

              static PyObject *t_QueryNodeImpl_get__children(t_QueryNodeImpl *self, void *data)
              {
                ::java::util::List value((jobject) NULL);
                OBJ_CALL(value = self->object.getChildren());
                return ::java::util::t_List::wrap_Object(value);
              }

              static PyObject *t_QueryNodeImpl_get__leaf(t_QueryNodeImpl *self, void *data)
              {
                jboolean value;
                OBJ_CALL(value = self->object.isLeaf());
                Py_RETURN_BOOL(value);
              }

              static PyObject *t_QueryNodeImpl_get__parent(t_QueryNodeImpl *self, void *data)
              {
                ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode value((jobject) NULL);
                OBJ_CALL(value = self->object.getParent());
                return ::org::apache::lucene::queryparser::flexible::core::nodes::t_QueryNode::wrap_Object(value);
              }

              static PyObject *t_QueryNodeImpl_get__tagMap(t_QueryNodeImpl *self, void *data)
              {
                ::java::util::Map value((jobject) NULL);
                OBJ_CALL(value = self->object.getTagMap());
                return ::java::util::t_Map::wrap_Object(value);
              }
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/FilterScorable.h"
#include "java/util/Collection.h"
#include "org/apache/lucene/search/Scorable$ChildScorable.h"
#include "java/lang/Class.h"
#include "java/io/IOException.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {

        ::java::lang::Class *FilterScorable::class$ = NULL;
        jmethodID *FilterScorable::mids$ = NULL;
        bool FilterScorable::live$ = false;

        jclass FilterScorable::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/search/FilterScorable");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_57a565cc0113e133] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/search/Scorable;)V");
            mids$[mid_docID_9972fcc56b44e79d] = env->getMethodID(cls, "docID", "()I");
            mids$[mid_getChildren_d4dfbf7a26ff41df] = env->getMethodID(cls, "getChildren", "()Ljava/util/Collection;");
            mids$[mid_score_58aec2b64dff50c8] = env->getMethodID(cls, "score", "()F");

            class$ = new ::java::lang::Class(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        FilterScorable::FilterScorable(const ::org::apache::lucene::search::Scorable & a0) : ::org::apache::lucene::search::Scorable(env->newObject(initializeClass, &mids$, mid_init$_57a565cc0113e133, a0.this$)) {}

        jint FilterScorable::docID() const
        {
          return env->callIntMethod(this$, mids$[mid_docID_9972fcc56b44e79d]);
        }

        ::java::util::Collection FilterScorable::getChildren() const
        {
          return ::java::util::Collection(env->callObjectMethod(this$, mids$[mid_getChildren_d4dfbf7a26ff41df]));
        }

        jfloat FilterScorable::score() const
        {
          return env->callFloatMethod(this$, mids$[mid_score_58aec2b64dff50c8]);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        static PyObject *t_FilterScorable_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_FilterScorable_instance_(PyTypeObject *type, PyObject *arg);
        static int t_FilterScorable_init_(t_FilterScorable *self, PyObject *args, PyObject *kwds);
        static PyObject *t_FilterScorable_docID(t_FilterScorable *self, PyObject *args);
        static PyObject *t_FilterScorable_getChildren(t_FilterScorable *self, PyObject *args);
        static PyObject *t_FilterScorable_score(t_FilterScorable *self, PyObject *args);
        static PyObject *t_FilterScorable_get__children(t_FilterScorable *self, void *data);
        static PyGetSetDef t_FilterScorable__fields_[] = {
          DECLARE_GET_FIELD(t_FilterScorable, children),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_FilterScorable__methods_[] = {
          DECLARE_METHOD(t_FilterScorable, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_FilterScorable, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_FilterScorable, docID, METH_VARARGS),
          DECLARE_METHOD(t_FilterScorable, getChildren, METH_VARARGS),
          DECLARE_METHOD(t_FilterScorable, score, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        static PyType_Slot PY_TYPE_SLOTS(FilterScorable)[] = {
          { Py_tp_methods, t_FilterScorable__methods_ },
          { Py_tp_init, (void *) t_FilterScorable_init_ },
          { Py_tp_getset, t_FilterScorable__fields_ },
          { 0, NULL }
        };

        static PyType_Def *PY_TYPE_BASES(FilterScorable)[] = {
          &PY_TYPE_DEF(::org::apache::lucene::search::Scorable),
          NULL
        };

        DEFINE_TYPE(FilterScorable, t_FilterScorable, FilterScorable);

        void t_FilterScorable::install(PyObject *module)
        {
          installType(&PY_TYPE(FilterScorable), &PY_TYPE_DEF(FilterScorable), module, "FilterScorable", 0);
        }

        void t_FilterScorable::initialize(PyObject *module)
        {
          PyObject_SetAttrString((PyObject *) PY_TYPE(FilterScorable), "class_", make_descriptor(FilterScorable::initializeClass, 1));
          PyObject_SetAttrString((PyObject *) PY_TYPE(FilterScorable), "wrapfn_", make_descriptor(t_FilterScorable::wrap_jobject));
          PyObject_SetAttrString((PyObject *) PY_TYPE(FilterScorable), "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_FilterScorable_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, FilterScorable::initializeClass, 1)))
            return NULL;
          return t_FilterScorable::wrap_Object(FilterScorable(((t_FilterScorable *) arg)->object.this$));
        }
        static PyObject *t_FilterScorable_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, FilterScorable::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_FilterScorable_init_(t_FilterScorable *self, PyObject *args, PyObject *kwds)
        {
          ::org::apache::lucene::search::Scorable a0((jobject) NULL);
          FilterScorable object((jobject) NULL);

          if (!parseArgs(args, "k", ::org::apache::lucene::search::Scorable::initializeClass, &a0))
          {
            INT_CALL(object = FilterScorable(a0));
            self->object = object;
          }
          else
          {
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }

        static PyObject *t_FilterScorable_docID(t_FilterScorable *self, PyObject *args)
        {
          jint result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.docID());
            return PyLong_FromLong((long) result);
          }

          return callSuper(PY_TYPE(FilterScorable), (PyObject *) self, "docID", args, 2);
        }

        static PyObject *t_FilterScorable_getChildren(t_FilterScorable *self, PyObject *args)
        {
          ::java::util::Collection result((jobject) NULL);

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.getChildren());
            return ::java::util::t_Collection::wrap_Object(result, ::org::apache::lucene::search::PY_TYPE(Scorable$ChildScorable));
          }

          return callSuper(PY_TYPE(FilterScorable), (PyObject *) self, "getChildren", args, 2);
        }

        static PyObject *t_FilterScorable_score(t_FilterScorable *self, PyObject *args)
        {
          jfloat result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.score());
            return PyFloat_FromDouble((double) result);
          }

          return callSuper(PY_TYPE(FilterScorable), (PyObject *) self, "score", args, 2);
        }

        static PyObject *t_FilterScorable_get__children(t_FilterScorable *self, void *data)
        {
          ::java::util::Collection value((jobject) NULL);
          OBJ_CALL(value = self->object.getChildren());
          return ::java::util::t_Collection::wrap_Object(value);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/ja/JapaneseKatakanaStemFilter.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/analysis/TokenStream.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace ja {

          ::java::lang::Class *JapaneseKatakanaStemFilter::class$ = NULL;
          jmethodID *JapaneseKatakanaStemFilter::mids$ = NULL;
          bool JapaneseKatakanaStemFilter::live$ = false;
          jint JapaneseKatakanaStemFilter::DEFAULT_MINIMUM_LENGTH = (jint) 0;

          jclass JapaneseKatakanaStemFilter::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/ja/JapaneseKatakanaStemFilter");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_c26756868a754f4e] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/analysis/TokenStream;)V");
              mids$[mid_init$_ec84dcad1ccbb797] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/analysis/TokenStream;I)V");
              mids$[mid_incrementToken_8454bd5aa23fd11e] = env->getMethodID(cls, "incrementToken", "()Z");

              class$ = new ::java::lang::Class(cls);
              cls = (jclass) class$->this$;

              DEFAULT_MINIMUM_LENGTH = env->getStaticIntField(cls, "DEFAULT_MINIMUM_LENGTH");
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          JapaneseKatakanaStemFilter::JapaneseKatakanaStemFilter(const ::org::apache::lucene::analysis::TokenStream & a0) : ::org::apache::lucene::analysis::TokenFilter(env->newObject(initializeClass, &mids$, mid_init$_c26756868a754f4e, a0.this$)) {}

          JapaneseKatakanaStemFilter::JapaneseKatakanaStemFilter(const ::org::apache::lucene::analysis::TokenStream & a0, jint a1) : ::org::apache::lucene::analysis::TokenFilter(env->newObject(initializeClass, &mids$, mid_init$_ec84dcad1ccbb797, a0.this$, a1)) {}

          jboolean JapaneseKatakanaStemFilter::incrementToken() const
          {
            return env->callBooleanMethod(this$, mids$[mid_incrementToken_8454bd5aa23fd11e]);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace ja {
          static PyObject *t_JapaneseKatakanaStemFilter_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_JapaneseKatakanaStemFilter_instance_(PyTypeObject *type, PyObject *arg);
          static int t_JapaneseKatakanaStemFilter_init_(t_JapaneseKatakanaStemFilter *self, PyObject *args, PyObject *kwds);
          static PyObject *t_JapaneseKatakanaStemFilter_incrementToken(t_JapaneseKatakanaStemFilter *self, PyObject *args);

          static PyMethodDef t_JapaneseKatakanaStemFilter__methods_[] = {
            DECLARE_METHOD(t_JapaneseKatakanaStemFilter, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_JapaneseKatakanaStemFilter, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_JapaneseKatakanaStemFilter, incrementToken, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          static PyType_Slot PY_TYPE_SLOTS(JapaneseKatakanaStemFilter)[] = {
            { Py_tp_methods, t_JapaneseKatakanaStemFilter__methods_ },
            { Py_tp_init, (void *) t_JapaneseKatakanaStemFilter_init_ },
            { 0, NULL }
          };

          static PyType_Def *PY_TYPE_BASES(JapaneseKatakanaStemFilter)[] = {
            &PY_TYPE_DEF(::org::apache::lucene::analysis::TokenFilter),
            NULL
          };

          DEFINE_TYPE(JapaneseKatakanaStemFilter, t_JapaneseKatakanaStemFilter, JapaneseKatakanaStemFilter);

          void t_JapaneseKatakanaStemFilter::install(PyObject *module)
          {
            installType(&PY_TYPE(JapaneseKatakanaStemFilter), &PY_TYPE_DEF(JapaneseKatakanaStemFilter), module, "JapaneseKatakanaStemFilter", 0);
          }

          void t_JapaneseKatakanaStemFilter::initialize(PyObject *module)
          {
            PyObject_SetAttrString((PyObject *) PY_TYPE(JapaneseKatakanaStemFilter), "class_", make_descriptor(JapaneseKatakanaStemFilter::initializeClass, 1));
            PyObject_SetAttrString((PyObject *) PY_TYPE(JapaneseKatakanaStemFilter), "wrapfn_", make_descriptor(t_JapaneseKatakanaStemFilter::wrap_jobject));
            PyObject_SetAttrString((PyObject *) PY_TYPE(JapaneseKatakanaStemFilter), "boxfn_", make_descriptor(boxObject));
            env->getClass(JapaneseKatakanaStemFilter::initializeClass);
            PyObject_SetAttrString((PyObject *) PY_TYPE(JapaneseKatakanaStemFilter), "DEFAULT_MINIMUM_LENGTH", make_descriptor(JapaneseKatakanaStemFilter::DEFAULT_MINIMUM_LENGTH));
          }

          static PyObject *t_JapaneseKatakanaStemFilter_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, JapaneseKatakanaStemFilter::initializeClass, 1)))
              return NULL;
            return t_JapaneseKatakanaStemFilter::wrap_Object(JapaneseKatakanaStemFilter(((t_JapaneseKatakanaStemFilter *) arg)->object.this$));
          }
          static PyObject *t_JapaneseKatakanaStemFilter_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, JapaneseKatakanaStemFilter::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_JapaneseKatakanaStemFilter_init_(t_JapaneseKatakanaStemFilter *self, PyObject *args, PyObject *kwds)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 1:
              {
                ::org::apache::lucene::analysis::TokenStream a0((jobject) NULL);
                JapaneseKatakanaStemFilter object((jobject) NULL);

                if (!parseArgs(args, "k", ::org::apache::lucene::analysis::TokenStream::initializeClass, &a0))
                {
                  INT_CALL(object = JapaneseKatakanaStemFilter(a0));
                  self->object = object;
                  break;
                }
              }
              goto err;
             case 2:
              {
                ::org::apache::lucene::analysis::TokenStream a0((jobject) NULL);
                jint a1;
                JapaneseKatakanaStemFilter object((jobject) NULL);

                if (!parseArgs(args, "kI", ::org::apache::lucene::analysis::TokenStream::initializeClass, &a0, &a1))
                {
                  INT_CALL(object = JapaneseKatakanaStemFilter(a0, a1));
                  self->object = object;
                  break;
                }
              }
             default:
             err:
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_JapaneseKatakanaStemFilter_incrementToken(t_JapaneseKatakanaStemFilter *self, PyObject *args)
          {
            jboolean result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.incrementToken());
              Py_RETURN_BOOL(result);
            }

            return callSuper(PY_TYPE(JapaneseKatakanaStemFilter), (PyObject *) self, "incrementToken", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/br/BrazilianStemFilterFactory.h"
#include "java/util/Map.h"
#include "org/apache/lucene/analysis/br/BrazilianStemFilter.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/analysis/TokenStream.h"
#include "java/lang/String.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace br {

          ::java::lang::Class *BrazilianStemFilterFactory::class$ = NULL;
          jmethodID *BrazilianStemFilterFactory::mids$ = NULL;
          bool BrazilianStemFilterFactory::live$ = false;
          ::java::lang::String *BrazilianStemFilterFactory::NAME = NULL;

          jclass BrazilianStemFilterFactory::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/br/BrazilianStemFilterFactory");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_408bd889ee3beae5] = env->getMethodID(cls, "<init>", "(Ljava/util/Map;)V");
              mids$[mid_create_5d8ba3a3902b3d65] = env->getMethodID(cls, "create", "(Lorg/apache/lucene/analysis/TokenStream;)Lorg/apache/lucene/analysis/br/BrazilianStemFilter;");

              class$ = new ::java::lang::Class(cls);
              cls = (jclass) class$->this$;

              NAME = new ::java::lang::String(env->getStaticObjectField(cls, "NAME", "Ljava/lang/String;"));
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          BrazilianStemFilterFactory::BrazilianStemFilterFactory(const ::java::util::Map & a0) : ::org::apache::lucene::analysis::util::TokenFilterFactory(env->newObject(initializeClass, &mids$, mid_init$_408bd889ee3beae5, a0.this$)) {}

          ::org::apache::lucene::analysis::br::BrazilianStemFilter BrazilianStemFilterFactory::create(const ::org::apache::lucene::analysis::TokenStream & a0) const
          {
            return ::org::apache::lucene::analysis::br::BrazilianStemFilter(env->callObjectMethod(this$, mids$[mid_create_5d8ba3a3902b3d65], a0.this$));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace br {
          static PyObject *t_BrazilianStemFilterFactory_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_BrazilianStemFilterFactory_instance_(PyTypeObject *type, PyObject *arg);
          static int t_BrazilianStemFilterFactory_init_(t_BrazilianStemFilterFactory *self, PyObject *args, PyObject *kwds);
          static PyObject *t_BrazilianStemFilterFactory_create(t_BrazilianStemFilterFactory *self, PyObject *args);

          static PyMethodDef t_BrazilianStemFilterFactory__methods_[] = {
            DECLARE_METHOD(t_BrazilianStemFilterFactory, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_BrazilianStemFilterFactory, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_BrazilianStemFilterFactory, create, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          static PyType_Slot PY_TYPE_SLOTS(BrazilianStemFilterFactory)[] = {
            { Py_tp_methods, t_BrazilianStemFilterFactory__methods_ },
            { Py_tp_init, (void *) t_BrazilianStemFilterFactory_init_ },
            { 0, NULL }
          };

          static PyType_Def *PY_TYPE_BASES(BrazilianStemFilterFactory)[] = {
            &PY_TYPE_DEF(::org::apache::lucene::analysis::util::TokenFilterFactory),
            NULL
          };

          DEFINE_TYPE(BrazilianStemFilterFactory, t_BrazilianStemFilterFactory, BrazilianStemFilterFactory);

          void t_BrazilianStemFilterFactory::install(PyObject *module)
          {
            installType(&PY_TYPE(BrazilianStemFilterFactory), &PY_TYPE_DEF(BrazilianStemFilterFactory), module, "BrazilianStemFilterFactory", 0);
          }

          void t_BrazilianStemFilterFactory::initialize(PyObject *module)
          {
            PyObject_SetAttrString((PyObject *) PY_TYPE(BrazilianStemFilterFactory), "class_", make_descriptor(BrazilianStemFilterFactory::initializeClass, 1));
            PyObject_SetAttrString((PyObject *) PY_TYPE(BrazilianStemFilterFactory), "wrapfn_", make_descriptor(t_BrazilianStemFilterFactory::wrap_jobject));
            PyObject_SetAttrString((PyObject *) PY_TYPE(BrazilianStemFilterFactory), "boxfn_", make_descriptor(boxObject));
            env->getClass(BrazilianStemFilterFactory::initializeClass);
            PyObject_SetAttrString((PyObject *) PY_TYPE(BrazilianStemFilterFactory), "NAME", make_descriptor(j2p(*BrazilianStemFilterFactory::NAME)));
          }

          static PyObject *t_BrazilianStemFilterFactory_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, BrazilianStemFilterFactory::initializeClass, 1)))
              return NULL;
            return t_BrazilianStemFilterFactory::wrap_Object(BrazilianStemFilterFactory(((t_BrazilianStemFilterFactory *) arg)->object.this$));
          }
          static PyObject *t_BrazilianStemFilterFactory_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, BrazilianStemFilterFactory::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_BrazilianStemFilterFactory_init_(t_BrazilianStemFilterFactory *self, PyObject *args, PyObject *kwds)
          {
            ::java::util::Map a0((jobject) NULL);
            PyTypeObject **p0;
            BrazilianStemFilterFactory object((jobject) NULL);

            if (!parseArgs(args, "K", ::java::util::Map::initializeClass, &a0, &p0, ::java::util::t_Map::parameters_))
            {
              INT_CALL(object = BrazilianStemFilterFactory(a0));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_BrazilianStemFilterFactory_create(t_BrazilianStemFilterFactory *self, PyObject *args)
          {
            ::org::apache::lucene::analysis::TokenStream a0((jobject) NULL);
            ::org::apache::lucene::analysis::br::BrazilianStemFilter result((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::analysis::TokenStream::initializeClass, &a0))
            {
              OBJ_CALL(result = self->object.create(a0));
              return ::org::apache::lucene::analysis::br::t_BrazilianStemFilter::wrap_Object(result);
            }

            return callSuper(PY_TYPE(BrazilianStemFilterFactory), (PyObject *) self, "create", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/IndriScorer.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/search/DocIdSetIterator.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {

        ::java::lang::Class *IndriScorer::class$ = NULL;
        jmethodID *IndriScorer::mids$ = NULL;
        bool IndriScorer::live$ = false;

        jclass IndriScorer::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/search/IndriScorer");

            mids$ = new jmethodID[max_mid];
            mids$[mid_docID_9972fcc56b44e79d] = env->getMethodID(cls, "docID", "()I");
            mids$[mid_getBoost_58aec2b64dff50c8] = env->getMethodID(cls, "getBoost", "()F");
            mids$[mid_getMaxScore_384f078ef4b8f931] = env->getMethodID(cls, "getMaxScore", "(I)F");
            mids$[mid_iterator_173d81d7b8f93882] = env->getMethodID(cls, "iterator", "()Lorg/apache/lucene/search/DocIdSetIterator;");
            mids$[mid_score_58aec2b64dff50c8] = env->getMethodID(cls, "score", "()F");
            mids$[mid_smoothingScore_384f078ef4b8f931] = env->getMethodID(cls, "smoothingScore", "(I)F");

            class$ = new ::java::lang::Class(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        jint IndriScorer::docID() const
        {
          return env->callIntMethod(this$, mids$[mid_docID_9972fcc56b44e79d]);
        }

        jfloat IndriScorer::getBoost() const
        {
          return env->callFloatMethod(this$, mids$[mid_getBoost_58aec2b64dff50c8]);
        }

        jfloat IndriScorer::getMaxScore(jint a0) const
        {
          return env->callFloatMethod(this$, mids$[mid_getMaxScore_384f078ef4b8f931], a0);
        }

        ::org::apache::lucene::search::DocIdSetIterator IndriScorer::iterator() const
        {
          return ::org::apache::lucene::search::DocIdSetIterator(env->callObjectMethod(this$, mids$[mid_iterator_173d81d7b8f93882]));
        }

        jfloat IndriScorer::score() const
        {
          return env->callFloatMethod(this$, mids$[mid_score_58aec2b64dff50c8]);
        }

        jfloat IndriScorer::smoothingScore(jint a0) const
        {
          return env->callFloatMethod(this$, mids$[mid_smoothingScore_384f078ef4b8f931], a0);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        static PyObject *t_IndriScorer_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_IndriScorer_instance_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_IndriScorer_docID(t_IndriScorer *self, PyObject *args);
        static PyObject *t_IndriScorer_getBoost(t_IndriScorer *self);
        static PyObject *t_IndriScorer_getMaxScore(t_IndriScorer *self, PyObject *args);
        static PyObject *t_IndriScorer_iterator(t_IndriScorer *self, PyObject *args);
        static PyObject *t_IndriScorer_score(t_IndriScorer *self, PyObject *args);
        static PyObject *t_IndriScorer_smoothingScore(t_IndriScorer *self, PyObject *args);
        static PyObject *t_IndriScorer_get__boost(t_IndriScorer *self, void *data);
        static PyGetSetDef t_IndriScorer__fields_[] = {
          DECLARE_GET_FIELD(t_IndriScorer, boost),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_IndriScorer__methods_[] = {
          DECLARE_METHOD(t_IndriScorer, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_IndriScorer, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_IndriScorer, docID, METH_VARARGS),
          DECLARE_METHOD(t_IndriScorer, getBoost, METH_NOARGS),
          DECLARE_METHOD(t_IndriScorer, getMaxScore, METH_VARARGS),
          DECLARE_METHOD(t_IndriScorer, iterator, METH_VARARGS),
          DECLARE_METHOD(t_IndriScorer, score, METH_VARARGS),
          DECLARE_METHOD(t_IndriScorer, smoothingScore, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        static PyType_Slot PY_TYPE_SLOTS(IndriScorer)[] = {
          { Py_tp_methods, t_IndriScorer__methods_ },
          { Py_tp_init, (void *) abstract_init },
          { Py_tp_getset, t_IndriScorer__fields_ },
          { 0, NULL }
        };

        static PyType_Def *PY_TYPE_BASES(IndriScorer)[] = {
          &PY_TYPE_DEF(::org::apache::lucene::search::Scorer),
          NULL
        };

        DEFINE_TYPE(IndriScorer, t_IndriScorer, IndriScorer);

        void t_IndriScorer::install(PyObject *module)
        {
          installType(&PY_TYPE(IndriScorer), &PY_TYPE_DEF(IndriScorer), module, "IndriScorer", 0);
        }

        void t_IndriScorer::initialize(PyObject *module)
        {
          PyObject_SetAttrString((PyObject *) PY_TYPE(IndriScorer), "class_", make_descriptor(IndriScorer::initializeClass, 1));
          PyObject_SetAttrString((PyObject *) PY_TYPE(IndriScorer), "wrapfn_", make_descriptor(t_IndriScorer::wrap_jobject));
          PyObject_SetAttrString((PyObject *) PY_TYPE(IndriScorer), "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_IndriScorer_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, IndriScorer::initializeClass, 1)))
            return NULL;
          return t_IndriScorer::wrap_Object(IndriScorer(((t_IndriScorer *) arg)->object.this$));
        }
        static PyObject *t_IndriScorer_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, IndriScorer::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static PyObject *t_IndriScorer_docID(t_IndriScorer *self, PyObject *args)
        {
          jint result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.docID());
            return PyLong_FromLong((long) result);
          }

          return callSuper(PY_TYPE(IndriScorer), (PyObject *) self, "docID", args, 2);
        }

        static PyObject *t_IndriScorer_getBoost(t_IndriScorer *self)
        {
          jfloat result;
          OBJ_CALL(result = self->object.getBoost());
          return PyFloat_FromDouble((double) result);
        }

        static PyObject *t_IndriScorer_getMaxScore(t_IndriScorer *self, PyObject *args)
        {
          jint a0;
          jfloat result;

          if (!parseArgs(args, "I", &a0))
          {
            OBJ_CALL(result = self->object.getMaxScore(a0));
            return PyFloat_FromDouble((double) result);
          }

          return callSuper(PY_TYPE(IndriScorer), (PyObject *) self, "getMaxScore", args, 2);
        }

        static PyObject *t_IndriScorer_iterator(t_IndriScorer *self, PyObject *args)
        {
          ::org::apache::lucene::search::DocIdSetIterator result((jobject) NULL);

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.iterator());
            return ::org::apache::lucene::search::t_DocIdSetIterator::wrap_Object(result);
          }

          return callSuper(PY_TYPE(IndriScorer), (PyObject *) self, "iterator", args, 2);
        }

        static PyObject *t_IndriScorer_score(t_IndriScorer *self, PyObject *args)
        {
          jfloat result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.score());
            return PyFloat_FromDouble((double) result);
          }

          return callSuper(PY_TYPE(IndriScorer), (PyObject *) self, "score", args, 2);
        }

        static PyObject *t_IndriScorer_smoothingScore(t_IndriScorer *self, PyObject *args)
        {
          jint a0;
          jfloat result;

          if (!parseArgs(args, "I", &a0))
          {
            OBJ_CALL(result = self->object.smoothingScore(a0));
            return PyFloat_FromDouble((double) result);
          }

          return callSuper(PY_TYPE(IndriScorer), (PyObject *) self, "smoothingScore", args, 2);
        }

        static PyObject *t_IndriScorer_get__boost(t_IndriScorer *self, void *data)
        {
          jfloat value;
          OBJ_CALL(value = self->object.getBoost());
          return PyFloat_FromDouble((double) value);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/similarities/LMSimilarity$DefaultCollectionModel.h"
#include "org/apache/lucene/search/similarities/BasicStats.h"
#include "org/apache/lucene/search/similarities/LMSimilarity$CollectionModel.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace similarities {

          ::java::lang::Class *LMSimilarity$DefaultCollectionModel::class$ = NULL;
          jmethodID *LMSimilarity$DefaultCollectionModel::mids$ = NULL;
          bool LMSimilarity$DefaultCollectionModel::live$ = false;

          jclass LMSimilarity$DefaultCollectionModel::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/search/similarities/LMSimilarity$DefaultCollectionModel");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_f2cc1bce94666404] = env->getMethodID(cls, "<init>", "()V");
              mids$[mid_computeProbability_3f1239f1e5e20981] = env->getMethodID(cls, "computeProbability", "(Lorg/apache/lucene/search/similarities/BasicStats;)D");
              mids$[mid_getName_db9b55ba01e03e4b] = env->getMethodID(cls, "getName", "()Ljava/lang/String;");

              class$ = new ::java::lang::Class(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          LMSimilarity$DefaultCollectionModel::LMSimilarity$DefaultCollectionModel() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_f2cc1bce94666404)) {}

          jdouble LMSimilarity$DefaultCollectionModel::computeProbability(const ::org::apache::lucene::search::similarities::BasicStats & a0) const
          {
            return env->callDoubleMethod(this$, mids$[mid_computeProbability_3f1239f1e5e20981], a0.this$);
          }

          ::java::lang::String LMSimilarity$DefaultCollectionModel::getName() const
          {
            return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_getName_db9b55ba01e03e4b]));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace similarities {
          static PyObject *t_LMSimilarity$DefaultCollectionModel_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_LMSimilarity$DefaultCollectionModel_instance_(PyTypeObject *type, PyObject *arg);
          static int t_LMSimilarity$DefaultCollectionModel_init_(t_LMSimilarity$DefaultCollectionModel *self, PyObject *args, PyObject *kwds);
          static PyObject *t_LMSimilarity$DefaultCollectionModel_computeProbability(t_LMSimilarity$DefaultCollectionModel *self, PyObject *arg);
          static PyObject *t_LMSimilarity$DefaultCollectionModel_getName(t_LMSimilarity$DefaultCollectionModel *self);
          static PyObject *t_LMSimilarity$DefaultCollectionModel_get__name(t_LMSimilarity$DefaultCollectionModel *self, void *data);
          static PyGetSetDef t_LMSimilarity$DefaultCollectionModel__fields_[] = {
            DECLARE_GET_FIELD(t_LMSimilarity$DefaultCollectionModel, name),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_LMSimilarity$DefaultCollectionModel__methods_[] = {
            DECLARE_METHOD(t_LMSimilarity$DefaultCollectionModel, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_LMSimilarity$DefaultCollectionModel, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_LMSimilarity$DefaultCollectionModel, computeProbability, METH_O),
            DECLARE_METHOD(t_LMSimilarity$DefaultCollectionModel, getName, METH_NOARGS),
            { NULL, NULL, 0, NULL }
          };

          static PyType_Slot PY_TYPE_SLOTS(LMSimilarity$DefaultCollectionModel)[] = {
            { Py_tp_methods, t_LMSimilarity$DefaultCollectionModel__methods_ },
            { Py_tp_init, (void *) t_LMSimilarity$DefaultCollectionModel_init_ },
            { Py_tp_getset, t_LMSimilarity$DefaultCollectionModel__fields_ },
            { 0, NULL }
          };

          static PyType_Def *PY_TYPE_BASES(LMSimilarity$DefaultCollectionModel)[] = {
            &PY_TYPE_DEF(::java::lang::Object),
            NULL
          };

          DEFINE_TYPE(LMSimilarity$DefaultCollectionModel, t_LMSimilarity$DefaultCollectionModel, LMSimilarity$DefaultCollectionModel);

          void t_LMSimilarity$DefaultCollectionModel::install(PyObject *module)
          {
            installType(&PY_TYPE(LMSimilarity$DefaultCollectionModel), &PY_TYPE_DEF(LMSimilarity$DefaultCollectionModel), module, "LMSimilarity$DefaultCollectionModel", 0);
          }

          void t_LMSimilarity$DefaultCollectionModel::initialize(PyObject *module)
          {
            PyObject_SetAttrString((PyObject *) PY_TYPE(LMSimilarity$DefaultCollectionModel), "class_", make_descriptor(LMSimilarity$DefaultCollectionModel::initializeClass, 1));
            PyObject_SetAttrString((PyObject *) PY_TYPE(LMSimilarity$DefaultCollectionModel), "wrapfn_", make_descriptor(t_LMSimilarity$DefaultCollectionModel::wrap_jobject));
            PyObject_SetAttrString((PyObject *) PY_TYPE(LMSimilarity$DefaultCollectionModel), "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_LMSimilarity$DefaultCollectionModel_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, LMSimilarity$DefaultCollectionModel::initializeClass, 1)))
              return NULL;
            return t_LMSimilarity$DefaultCollectionModel::wrap_Object(LMSimilarity$DefaultCollectionModel(((t_LMSimilarity$DefaultCollectionModel *) arg)->object.this$));
          }
          static PyObject *t_LMSimilarity$DefaultCollectionModel_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, LMSimilarity$DefaultCollectionModel::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_LMSimilarity$DefaultCollectionModel_init_(t_LMSimilarity$DefaultCollectionModel *self, PyObject *args, PyObject *kwds)
          {
            LMSimilarity$DefaultCollectionModel object((jobject) NULL);

            INT_CALL(object = LMSimilarity$DefaultCollectionModel());
            self->object = object;

            return 0;
          }

          static PyObject *t_LMSimilarity$DefaultCollectionModel_computeProbability(t_LMSimilarity$DefaultCollectionModel *self, PyObject *arg)
          {
            ::org::apache::lucene::search::similarities::BasicStats a0((jobject) NULL);
            jdouble result;

            if (!parseArg(arg, "k", ::org::apache::lucene::search::similarities::BasicStats::initializeClass, &a0))
            {
              OBJ_CALL(result = self->object.computeProbability(a0));
              return PyFloat_FromDouble((double) result);
            }

            PyErr_SetArgsError((PyObject *) self, "computeProbability", arg);
            return NULL;
          }

          static PyObject *t_LMSimilarity$DefaultCollectionModel_getName(t_LMSimilarity$DefaultCollectionModel *self)
          {
            ::java::lang::String result((jobject) NULL);
            OBJ_CALL(result = self->object.getName());
            return j2p(result);
          }

          static PyObject *t_LMSimilarity$DefaultCollectionModel_get__name(t_LMSimilarity$DefaultCollectionModel *self, void *data)
          {
            ::java::lang::String value((jobject) NULL);
            OBJ_CALL(value = self->object.getName());
            return j2p(value);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/codecs/CompetitiveImpactAccumulator.h"
#include "java/util/Collection.h"
#include "org/apache/lucene/codecs/CompetitiveImpactAccumulator.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/index/Impact.h"
#include "java/lang/String.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace codecs {

        ::java::lang::Class *CompetitiveImpactAccumulator::class$ = NULL;
        jmethodID *CompetitiveImpactAccumulator::mids$ = NULL;
        bool CompetitiveImpactAccumulator::live$ = false;

        jclass CompetitiveImpactAccumulator::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/codecs/CompetitiveImpactAccumulator");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_f2cc1bce94666404] = env->getMethodID(cls, "<init>", "()V");
            mids$[mid_add_7b2f5b9ddfcb9416] = env->getMethodID(cls, "add", "(IJ)V");
            mids$[mid_addAll_ccab6c8e5d000d1e] = env->getMethodID(cls, "addAll", "(Lorg/apache/lucene/codecs/CompetitiveImpactAccumulator;)V");
            mids$[mid_clear_f2cc1bce94666404] = env->getMethodID(cls, "clear", "()V");
            mids$[mid_getCompetitiveFreqNormPairs_d4dfbf7a26ff41df] = env->getMethodID(cls, "getCompetitiveFreqNormPairs", "()Ljava/util/Collection;");
            mids$[mid_toString_db9b55ba01e03e4b] = env->getMethodID(cls, "toString", "()Ljava/lang/String;");

            class$ = new ::java::lang::Class(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        CompetitiveImpactAccumulator::CompetitiveImpactAccumulator() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_f2cc1bce94666404)) {}

        void CompetitiveImpactAccumulator::add(jint a0, jlong a1) const
        {
          env->callVoidMethod(this$, mids$[mid_add_7b2f5b9ddfcb9416], a0, a1);
        }

        void CompetitiveImpactAccumulator::addAll(const CompetitiveImpactAccumulator & a0) const
        {
          env->callVoidMethod(this$, mids$[mid_addAll_ccab6c8e5d000d1e], a0.this$);
        }

        void CompetitiveImpactAccumulator::clear() const
        {
          env->callVoidMethod(this$, mids$[mid_clear_f2cc1bce94666404]);
        }

        ::java::util::Collection CompetitiveImpactAccumulator::getCompetitiveFreqNormPairs() const
        {
          return ::java::util::Collection(env->callObjectMethod(this$, mids$[mid_getCompetitiveFreqNormPairs_d4dfbf7a26ff41df]));
        }

        ::java::lang::String CompetitiveImpactAccumulator::toString() const
        {
          return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_db9b55ba01e03e4b]));
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace codecs {
        static PyObject *t_CompetitiveImpactAccumulator_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_CompetitiveImpactAccumulator_instance_(PyTypeObject *type, PyObject *arg);
        static int t_CompetitiveImpactAccumulator_init_(t_CompetitiveImpactAccumulator *self, PyObject *args, PyObject *kwds);
        static PyObject *t_CompetitiveImpactAccumulator_add(t_CompetitiveImpactAccumulator *self, PyObject *args);
        static PyObject *t_CompetitiveImpactAccumulator_addAll(t_CompetitiveImpactAccumulator *self, PyObject *arg);
        static PyObject *t_CompetitiveImpactAccumulator_clear(t_CompetitiveImpactAccumulator *self);
        static PyObject *t_CompetitiveImpactAccumulator_getCompetitiveFreqNormPairs(t_CompetitiveImpactAccumulator *self);
        static PyObject *t_CompetitiveImpactAccumulator_toString(t_CompetitiveImpactAccumulator *self, PyObject *args);
        static PyObject *t_CompetitiveImpactAccumulator_get__competitiveFreqNormPairs(t_CompetitiveImpactAccumulator *self, void *data);
        static PyGetSetDef t_CompetitiveImpactAccumulator__fields_[] = {
          DECLARE_GET_FIELD(t_CompetitiveImpactAccumulator, competitiveFreqNormPairs),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_CompetitiveImpactAccumulator__methods_[] = {
          DECLARE_METHOD(t_CompetitiveImpactAccumulator, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_CompetitiveImpactAccumulator, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_CompetitiveImpactAccumulator, add, METH_VARARGS),
          DECLARE_METHOD(t_CompetitiveImpactAccumulator, addAll, METH_O),
          DECLARE_METHOD(t_CompetitiveImpactAccumulator, clear, METH_NOARGS),
          DECLARE_METHOD(t_CompetitiveImpactAccumulator, getCompetitiveFreqNormPairs, METH_NOARGS),
          DECLARE_METHOD(t_CompetitiveImpactAccumulator, toString, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        static PyType_Slot PY_TYPE_SLOTS(CompetitiveImpactAccumulator)[] = {
          { Py_tp_methods, t_CompetitiveImpactAccumulator__methods_ },
          { Py_tp_init, (void *) t_CompetitiveImpactAccumulator_init_ },
          { Py_tp_getset, t_CompetitiveImpactAccumulator__fields_ },
          { 0, NULL }
        };

        static PyType_Def *PY_TYPE_BASES(CompetitiveImpactAccumulator)[] = {
          &PY_TYPE_DEF(::java::lang::Object),
          NULL
        };

        DEFINE_TYPE(CompetitiveImpactAccumulator, t_CompetitiveImpactAccumulator, CompetitiveImpactAccumulator);

        void t_CompetitiveImpactAccumulator::install(PyObject *module)
        {
          installType(&PY_TYPE(CompetitiveImpactAccumulator), &PY_TYPE_DEF(CompetitiveImpactAccumulator), module, "CompetitiveImpactAccumulator", 0);
        }

        void t_CompetitiveImpactAccumulator::initialize(PyObject *module)
        {
          PyObject_SetAttrString((PyObject *) PY_TYPE(CompetitiveImpactAccumulator), "class_", make_descriptor(CompetitiveImpactAccumulator::initializeClass, 1));
          PyObject_SetAttrString((PyObject *) PY_TYPE(CompetitiveImpactAccumulator), "wrapfn_", make_descriptor(t_CompetitiveImpactAccumulator::wrap_jobject));
          PyObject_SetAttrString((PyObject *) PY_TYPE(CompetitiveImpactAccumulator), "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_CompetitiveImpactAccumulator_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, CompetitiveImpactAccumulator::initializeClass, 1)))
            return NULL;
          return t_CompetitiveImpactAccumulator::wrap_Object(CompetitiveImpactAccumulator(((t_CompetitiveImpactAccumulator *) arg)->object.this$));
        }
        static PyObject *t_CompetitiveImpactAccumulator_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, CompetitiveImpactAccumulator::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_CompetitiveImpactAccumulator_init_(t_CompetitiveImpactAccumulator *self, PyObject *args, PyObject *kwds)
        {
          CompetitiveImpactAccumulator object((jobject) NULL);

          INT_CALL(object = CompetitiveImpactAccumulator());
          self->object = object;

          return 0;
        }

        static PyObject *t_CompetitiveImpactAccumulator_add(t_CompetitiveImpactAccumulator *self, PyObject *args)
        {
          jint a0;
          jlong a1;

          if (!parseArgs(args, "IJ", &a0, &a1))
          {
            OBJ_CALL(self->object.add(a0, a1));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "add", args);
          return NULL;
        }

        static PyObject *t_CompetitiveImpactAccumulator_addAll(t_CompetitiveImpactAccumulator *self, PyObject *arg)
        {
          CompetitiveImpactAccumulator a0((jobject) NULL);

          if (!parseArg(arg, "k", CompetitiveImpactAccumulator::initializeClass, &a0))
          {
            OBJ_CALL(self->object.addAll(a0));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "addAll", arg);
          return NULL;
        }

        static PyObject *t_CompetitiveImpactAccumulator_clear(t_CompetitiveImpactAccumulator *self)
        {
          OBJ_CALL(self->object.clear());
          Py_RETURN_NONE;
        }

        static PyObject *t_CompetitiveImpactAccumulator_getCompetitiveFreqNormPairs(t_CompetitiveImpactAccumulator *self)
        {
          ::java::util::Collection result((jobject) NULL);
          OBJ_CALL(result = self->object.getCompetitiveFreqNormPairs());
          return ::java::util::t_Collection::wrap_Object(result, ::org::apache::lucene::index::PY_TYPE(Impact));
        }

        static PyObject *t_CompetitiveImpactAccumulator_toString(t_CompetitiveImpactAccumulator *self, PyObject *args)
        {
          ::java::lang::String result((jobject) NULL);

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.toString());
            return j2p(result);
          }

          return callSuper(PY_TYPE(CompetitiveImpactAccumulator), (PyObject *) self, "toString", args, 2);
        }

        static PyObject *t_CompetitiveImpactAccumulator_get__competitiveFreqNormPairs(t_CompetitiveImpactAccumulator *self, void *data)
        {
          ::java::util::Collection value((jobject) NULL);
          OBJ_CALL(value = self->object.getCompetitiveFreqNormPairs());
          return ::java::util::t_Collection::wrap_Object(value);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/store/RateLimitedIndexOutput.h"
#include "org/apache/lucene/store/RateLimiter.h"
#include "java/io/IOException.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace store {

        ::java::lang::Class *RateLimitedIndexOutput::class$ = NULL;
        jmethodID *RateLimitedIndexOutput::mids$ = NULL;
        bool RateLimitedIndexOutput::live$ = false;

        jclass RateLimitedIndexOutput::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/store/RateLimitedIndexOutput");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_fab312cc674c57e8] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/store/RateLimiter;Lorg/apache/lucene/store/IndexOutput;)V");
            mids$[mid_close_f2cc1bce94666404] = env->getMethodID(cls, "close", "()V");
            mids$[mid_getChecksum_2e5ae9edcb9b072f] = env->getMethodID(cls, "getChecksum", "()J");
            mids$[mid_getFilePointer_2e5ae9edcb9b072f] = env->getMethodID(cls, "getFilePointer", "()J");
            mids$[mid_writeByte_9c36fec3bac1d0c7] = env->getMethodID(cls, "writeByte", "(B)V");
            mids$[mid_writeBytes_43fdd39c09bb2fad] = env->getMethodID(cls, "writeBytes", "([BII)V");

            class$ = new ::java::lang::Class(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        RateLimitedIndexOutput::RateLimitedIndexOutput(const ::org::apache::lucene::store::RateLimiter & a0, const ::org::apache::lucene::store::IndexOutput & a1) : ::org::apache::lucene::store::IndexOutput(env->newObject(initializeClass, &mids$, mid_init$_fab312cc674c57e8, a0.this$, a1.this$)) {}

        void RateLimitedIndexOutput::close() const
        {
          env->callVoidMethod(this$, mids$[mid_close_f2cc1bce94666404]);
        }

        jlong RateLimitedIndexOutput::getChecksum() const
        {
          return env->callLongMethod(this$, mids$[mid_getChecksum_2e5ae9edcb9b072f]);
        }

        jlong RateLimitedIndexOutput::getFilePointer() const
        {
          return env->callLongMethod(this$, mids$[mid_getFilePointer_2e5ae9edcb9b072f]);
        }

        void RateLimitedIndexOutput::writeByte(jbyte a0) const
        {
          env->callVoidMethod(this$, mids$[mid_writeByte_9c36fec3bac1d0c7], a0);
        }

        void RateLimitedIndexOutput::writeBytes(const JArray< jbyte > & a0, jint a1, jint a2) const
        {
          env->callVoidMethod(this$, mids$[mid_writeBytes_43fdd39c09bb2fad], a0.this$, a1, a2);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace store {
        static PyObject *t_RateLimitedIndexOutput_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_RateLimitedIndexOutput_instance_(PyTypeObject *type, PyObject *arg);
        static int t_RateLimitedIndexOutput_init_(t_RateLimitedIndexOutput *self, PyObject *args, PyObject *kwds);
        static PyObject *t_RateLimitedIndexOutput_close(t_RateLimitedIndexOutput *self, PyObject *args);
        static PyObject *t_RateLimitedIndexOutput_getChecksum(t_RateLimitedIndexOutput *self, PyObject *args);
        static PyObject *t_RateLimitedIndexOutput_getFilePointer(t_RateLimitedIndexOutput *self, PyObject *args);
        static PyObject *t_RateLimitedIndexOutput_writeByte(t_RateLimitedIndexOutput *self, PyObject *args);
        static PyObject *t_RateLimitedIndexOutput_writeBytes(t_RateLimitedIndexOutput *self, PyObject *args);
        static PyObject *t_RateLimitedIndexOutput_get__checksum(t_RateLimitedIndexOutput *self, void *data);
        static PyObject *t_RateLimitedIndexOutput_get__filePointer(t_RateLimitedIndexOutput *self, void *data);
        static PyGetSetDef t_RateLimitedIndexOutput__fields_[] = {
          DECLARE_GET_FIELD(t_RateLimitedIndexOutput, checksum),
          DECLARE_GET_FIELD(t_RateLimitedIndexOutput, filePointer),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_RateLimitedIndexOutput__methods_[] = {
          DECLARE_METHOD(t_RateLimitedIndexOutput, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_RateLimitedIndexOutput, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_RateLimitedIndexOutput, close, METH_VARARGS),
          DECLARE_METHOD(t_RateLimitedIndexOutput, getChecksum, METH_VARARGS),
          DECLARE_METHOD(t_RateLimitedIndexOutput, getFilePointer, METH_VARARGS),
          DECLARE_METHOD(t_RateLimitedIndexOutput, writeByte, METH_VARARGS),
          DECLARE_METHOD(t_RateLimitedIndexOutput, writeBytes, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        static PyType_Slot PY_TYPE_SLOTS(RateLimitedIndexOutput)[] = {
          { Py_tp_methods, t_RateLimitedIndexOutput__methods_ },
          { Py_tp_init, (void *) t_RateLimitedIndexOutput_init_ },
          { Py_tp_getset, t_RateLimitedIndexOutput__fields_ },
          { 0, NULL }
        };

        static PyType_Def *PY_TYPE_BASES(RateLimitedIndexOutput)[] = {
          &PY_TYPE_DEF(::org::apache::lucene::store::IndexOutput),
          NULL
        };

        DEFINE_TYPE(RateLimitedIndexOutput, t_RateLimitedIndexOutput, RateLimitedIndexOutput);

        void t_RateLimitedIndexOutput::install(PyObject *module)
        {
          installType(&PY_TYPE(RateLimitedIndexOutput), &PY_TYPE_DEF(RateLimitedIndexOutput), module, "RateLimitedIndexOutput", 0);
        }

        void t_RateLimitedIndexOutput::initialize(PyObject *module)
        {
          PyObject_SetAttrString((PyObject *) PY_TYPE(RateLimitedIndexOutput), "class_", make_descriptor(RateLimitedIndexOutput::initializeClass, 1));
          PyObject_SetAttrString((PyObject *) PY_TYPE(RateLimitedIndexOutput), "wrapfn_", make_descriptor(t_RateLimitedIndexOutput::wrap_jobject));
          PyObject_SetAttrString((PyObject *) PY_TYPE(RateLimitedIndexOutput), "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_RateLimitedIndexOutput_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, RateLimitedIndexOutput::initializeClass, 1)))
            return NULL;
          return t_RateLimitedIndexOutput::wrap_Object(RateLimitedIndexOutput(((t_RateLimitedIndexOutput *) arg)->object.this$));
        }
        static PyObject *t_RateLimitedIndexOutput_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, RateLimitedIndexOutput::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_RateLimitedIndexOutput_init_(t_RateLimitedIndexOutput *self, PyObject *args, PyObject *kwds)
        {
          ::org::apache::lucene::store::RateLimiter a0((jobject) NULL);
          ::org::apache::lucene::store::IndexOutput a1((jobject) NULL);
          RateLimitedIndexOutput object((jobject) NULL);

          if (!parseArgs(args, "kk", ::org::apache::lucene::store::RateLimiter::initializeClass, ::org::apache::lucene::store::IndexOutput::initializeClass, &a0, &a1))
          {
            INT_CALL(object = RateLimitedIndexOutput(a0, a1));
            self->object = object;
          }
          else
          {
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }

        static PyObject *t_RateLimitedIndexOutput_close(t_RateLimitedIndexOutput *self, PyObject *args)
        {

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(self->object.close());
            Py_RETURN_NONE;
          }

          return callSuper(PY_TYPE(RateLimitedIndexOutput), (PyObject *) self, "close", args, 2);
        }

        static PyObject *t_RateLimitedIndexOutput_getChecksum(t_RateLimitedIndexOutput *self, PyObject *args)
        {
          jlong result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.getChecksum());
            return PyLong_FromLongLong((PY_LONG_LONG) result);
          }

          return callSuper(PY_TYPE(RateLimitedIndexOutput), (PyObject *) self, "getChecksum", args, 2);
        }

        static PyObject *t_RateLimitedIndexOutput_getFilePointer(t_RateLimitedIndexOutput *self, PyObject *args)
        {
          jlong result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.getFilePointer());
            return PyLong_FromLongLong((PY_LONG_LONG) result);
          }

          return callSuper(PY_TYPE(RateLimitedIndexOutput), (PyObject *) self, "getFilePointer", args, 2);
        }

        static PyObject *t_RateLimitedIndexOutput_writeByte(t_RateLimitedIndexOutput *self, PyObject *args)
        {
          jbyte a0;

          if (!parseArgs(args, "B", &a0))
          {
            OBJ_CALL(self->object.writeByte(a0));
            Py_RETURN_NONE;
          }

          return callSuper(PY_TYPE(RateLimitedIndexOutput), (PyObject *) self, "writeByte", args, 2);
        }

        static PyObject *t_RateLimitedIndexOutput_writeBytes(t_RateLimitedIndexOutput *self, PyObject *args)
        {
          JArray< jbyte > a0((jobject) NULL);
          jint a1;
          jint a2;

          if (!parseArgs(args, "[BII", &a0, &a1, &a2))
          {
            OBJ_CALL(self->object.writeBytes(a0, a1, a2));
            Py_RETURN_NONE;
          }

          return callSuper(PY_TYPE(RateLimitedIndexOutput), (PyObject *) self, "writeBytes", args, 2);
        }

        static PyObject *t_RateLimitedIndexOutput_get__checksum(t_RateLimitedIndexOutput *self, void *data)
        {
          jlong value;
          OBJ_CALL(value = self->object.getChecksum());
          return PyLong_FromLongLong((PY_LONG_LONG) value);
        }

        static PyObject *t_RateLimitedIndexOutput_get__filePointer(t_RateLimitedIndexOutput *self, void *data)
        {
          jlong value;
          OBJ_CALL(value = self->object.getFilePointer());
          return PyLong_FromLongLong((PY_LONG_LONG) value);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/geo/Component2D$WithinRelation.h"
#include "java/lang/String.h"
#include "org/apache/lucene/geo/Component2D$WithinRelation.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace geo {

        ::java::lang::Class *Component2D$WithinRelation::class$ = NULL;
        jmethodID *Component2D$WithinRelation::mids$ = NULL;
        bool Component2D$WithinRelation::live$ = false;
        Component2D$WithinRelation *Component2D$WithinRelation::CANDIDATE = NULL;
        Component2D$WithinRelation *Component2D$WithinRelation::DISJOINT = NULL;
        Component2D$WithinRelation *Component2D$WithinRelation::NOTWITHIN = NULL;

        jclass Component2D$WithinRelation::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/geo/Component2D$WithinRelation");

            mids$ = new jmethodID[max_mid];
            mids$[mid_valueOf_ce00b0adac7aa8ca] = env->getStaticMethodID(cls, "valueOf", "(Ljava/lang/String;)Lorg/apache/lucene/geo/Component2D$WithinRelation;");
            mids$[mid_values_36c3288af25ce403] = env->getStaticMethodID(cls, "values", "()[Lorg/apache/lucene/geo/Component2D$WithinRelation;");

            class$ = new ::java::lang::Class(cls);
            cls = (jclass) class$->this$;

            CANDIDATE = new Component2D$WithinRelation(env->getStaticObjectField(cls, "CANDIDATE", "Lorg/apache/lucene/geo/Component2D$WithinRelation;"));
            DISJOINT = new Component2D$WithinRelation(env->getStaticObjectField(cls, "DISJOINT", "Lorg/apache/lucene/geo/Component2D$WithinRelation;"));
            NOTWITHIN = new Component2D$WithinRelation(env->getStaticObjectField(cls, "NOTWITHIN", "Lorg/apache/lucene/geo/Component2D$WithinRelation;"));
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        Component2D$WithinRelation Component2D$WithinRelation::valueOf(const ::java::lang::String & a0)
        {
          jclass cls = env->getClass(initializeClass);
          return Component2D$WithinRelation(env->callStaticObjectMethod(cls, mids$[mid_valueOf_ce00b0adac7aa8ca], a0.this$));
        }

        JArray< Component2D$WithinRelation > Component2D$WithinRelation::values()
        {
          jclass cls = env->getClass(initializeClass);
          return JArray< Component2D$WithinRelation >(env->callStaticObjectMethod(cls, mids$[mid_values_36c3288af25ce403]));
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace geo {
        static PyObject *t_Component2D$WithinRelation_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_Component2D$WithinRelation_instance_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_Component2D$WithinRelation_of_(t_Component2D$WithinRelation *self, PyObject *args);
        static PyObject *t_Component2D$WithinRelation_valueOf(PyTypeObject *type, PyObject *args);
        static PyObject *t_Component2D$WithinRelation_values(PyTypeObject *type);
        static PyObject *t_Component2D$WithinRelation_get__parameters_(t_Component2D$WithinRelation *self, void *data);
        static PyGetSetDef t_Component2D$WithinRelation__fields_[] = {
          DECLARE_GET_FIELD(t_Component2D$WithinRelation, parameters_),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_Component2D$WithinRelation__methods_[] = {
          DECLARE_METHOD(t_Component2D$WithinRelation, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_Component2D$WithinRelation, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_Component2D$WithinRelation, of_, METH_VARARGS),
          DECLARE_METHOD(t_Component2D$WithinRelation, valueOf, METH_VARARGS | METH_CLASS),
          DECLARE_METHOD(t_Component2D$WithinRelation, values, METH_NOARGS | METH_CLASS),
          { NULL, NULL, 0, NULL }
        };

        static PyType_Slot PY_TYPE_SLOTS(Component2D$WithinRelation)[] = {
          { Py_tp_methods, t_Component2D$WithinRelation__methods_ },
          { Py_tp_init, (void *) abstract_init },
          { Py_tp_getset, t_Component2D$WithinRelation__fields_ },
          { 0, NULL }
        };

        static PyType_Def *PY_TYPE_BASES(Component2D$WithinRelation)[] = {
          &PY_TYPE_DEF(::java::lang::Enum),
          NULL
        };

        DEFINE_TYPE(Component2D$WithinRelation, t_Component2D$WithinRelation, Component2D$WithinRelation);
        PyObject *t_Component2D$WithinRelation::wrap_Object(const Component2D$WithinRelation& object, PyTypeObject *p0)
        {
          PyObject *obj = t_Component2D$WithinRelation::wrap_Object(object);
          if (obj != NULL && obj != Py_None)
          {
            t_Component2D$WithinRelation *self = (t_Component2D$WithinRelation *) obj;
            self->parameters[0] = p0;
          }
          return obj;
        }

        PyObject *t_Component2D$WithinRelation::wrap_jobject(const jobject& object, PyTypeObject *p0)
        {
          PyObject *obj = t_Component2D$WithinRelation::wrap_jobject(object);
          if (obj != NULL && obj != Py_None)
          {
            t_Component2D$WithinRelation *self = (t_Component2D$WithinRelation *) obj;
            self->parameters[0] = p0;
          }
          return obj;
        }

        void t_Component2D$WithinRelation::install(PyObject *module)
        {
          installType(&PY_TYPE(Component2D$WithinRelation), &PY_TYPE_DEF(Component2D$WithinRelation), module, "Component2D$WithinRelation", 0);
        }

        void t_Component2D$WithinRelation::initialize(PyObject *module)
        {
          PyObject_SetAttrString((PyObject *) PY_TYPE(Component2D$WithinRelation), "class_", make_descriptor(Component2D$WithinRelation::initializeClass, 1));
          PyObject_SetAttrString((PyObject *) PY_TYPE(Component2D$WithinRelation), "wrapfn_", make_descriptor(t_Component2D$WithinRelation::wrap_jobject));
          PyObject_SetAttrString((PyObject *) PY_TYPE(Component2D$WithinRelation), "boxfn_", make_descriptor(boxObject));
          env->getClass(Component2D$WithinRelation::initializeClass);
          PyObject_SetAttrString((PyObject *) PY_TYPE(Component2D$WithinRelation), "CANDIDATE", make_descriptor(t_Component2D$WithinRelation::wrap_Object(*Component2D$WithinRelation::CANDIDATE)));
          PyObject_SetAttrString((PyObject *) PY_TYPE(Component2D$WithinRelation), "DISJOINT", make_descriptor(t_Component2D$WithinRelation::wrap_Object(*Component2D$WithinRelation::DISJOINT)));
          PyObject_SetAttrString((PyObject *) PY_TYPE(Component2D$WithinRelation), "NOTWITHIN", make_descriptor(t_Component2D$WithinRelation::wrap_Object(*Component2D$WithinRelation::NOTWITHIN)));
        }

        static PyObject *t_Component2D$WithinRelation_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, Component2D$WithinRelation::initializeClass, 1)))
            return NULL;
          return t_Component2D$WithinRelation::wrap_Object(Component2D$WithinRelation(((t_Component2D$WithinRelation *) arg)->object.this$));
        }
        static PyObject *t_Component2D$WithinRelation_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, Component2D$WithinRelation::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static PyObject *t_Component2D$WithinRelation_of_(t_Component2D$WithinRelation *self, PyObject *args)
        {
          if (!parseArg(args, "T", 1, &(self->parameters)))
            Py_RETURN_SELF;
          return PyErr_SetArgsError((PyObject *) self, "of_", args);
        }

        static PyObject *t_Component2D$WithinRelation_valueOf(PyTypeObject *type, PyObject *args)
        {
          ::java::lang::String a0((jobject) NULL);
          Component2D$WithinRelation result((jobject) NULL);

          if (!parseArgs(args, "s", &a0))
          {
            OBJ_CALL(result = ::org::apache::lucene::geo::Component2D$WithinRelation::valueOf(a0));
            return t_Component2D$WithinRelation::wrap_Object(result);
          }

          return callSuper(type, "valueOf", args, 2);
        }

        static PyObject *t_Component2D$WithinRelation_values(PyTypeObject *type)
        {
          JArray< Component2D$WithinRelation > result((jobject) NULL);
          OBJ_CALL(result = ::org::apache::lucene::geo::Component2D$WithinRelation::values());
          return JArray<jobject>(result.this$).wrap(t_Component2D$WithinRelation::wrap_jobject);
        }
        static PyObject *t_Component2D$WithinRelation_get__parameters_(t_Component2D$WithinRelation *self, void *data)
        {
          return typeParameters(self->parameters, sizeof(self->parameters));
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/index/CodecReader.h"
#include "java/util/Collection.h"
#include "java/lang/String.h"
#include "org/apache/lucene/codecs/FieldsProducer.h"
#include "org/apache/lucene/index/PointValues.h"
#include "org/apache/lucene/index/BinaryDocValues.h"
#include "org/apache/lucene/util/Accountable.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/codecs/PointsReader.h"
#include "org/apache/lucene/index/NumericDocValues.h"
#include "org/apache/lucene/index/SortedDocValues.h"
#include "org/apache/lucene/index/StoredFieldVisitor.h"
#include "org/apache/lucene/codecs/StoredFieldsReader.h"
#include "org/apache/lucene/index/Terms.h"
#include "org/apache/lucene/index/SortedNumericDocValues.h"
#include "org/apache/lucene/codecs/TermVectorsReader.h"
#include "org/apache/lucene/index/Fields.h"
#include "org/apache/lucene/index/SortedSetDocValues.h"
#include "org/apache/lucene/codecs/NormsProducer.h"
#include "org/apache/lucene/codecs/DocValuesProducer.h"
#include "java/io/IOException.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {

        ::java::lang::Class *CodecReader::class$ = NULL;
        jmethodID *CodecReader::mids$ = NULL;
        bool CodecReader::live$ = false;

        jclass CodecReader::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/index/CodecReader");

            mids$ = new jmethodID[max_mid];
            mids$[mid_checkIntegrity_f2cc1bce94666404] = env->getMethodID(cls, "checkIntegrity", "()V");
            mids$[mid_document_8f45e7464506ed2f] = env->getMethodID(cls, "document", "(ILorg/apache/lucene/index/StoredFieldVisitor;)V");
            mids$[mid_getBinaryDocValues_6cf59c3533d4df22] = env->getMethodID(cls, "getBinaryDocValues", "(Ljava/lang/String;)Lorg/apache/lucene/index/BinaryDocValues;");
            mids$[mid_getChildResources_d4dfbf7a26ff41df] = env->getMethodID(cls, "getChildResources", "()Ljava/util/Collection;");
            mids$[mid_getDocValuesReader_2703cdf07eabd0a4] = env->getMethodID(cls, "getDocValuesReader", "()Lorg/apache/lucene/codecs/DocValuesProducer;");
            mids$[mid_getFieldsReader_ba629b83d3686969] = env->getMethodID(cls, "getFieldsReader", "()Lorg/apache/lucene/codecs/StoredFieldsReader;");
            mids$[mid_getNormValues_2b2c87c24a70ef49] = env->getMethodID(cls, "getNormValues", "(Ljava/lang/String;)Lorg/apache/lucene/index/NumericDocValues;");
            mids$[mid_getNormsReader_0502194d89d40c22] = env->getMethodID(cls, "getNormsReader", "()Lorg/apache/lucene/codecs/NormsProducer;");
            mids$[mid_getNumericDocValues_2b2c87c24a70ef49] = env->getMethodID(cls, "getNumericDocValues", "(Ljava/lang/String;)Lorg/apache/lucene/index/NumericDocValues;");
            mids$[mid_getPointValues_72b990dbae0eea09] = env->getMethodID(cls, "getPointValues", "(Ljava/lang/String;)Lorg/apache/lucene/index/PointValues;");
            mids$[mid_getPointsReader_0a5d82ff6781f22b] = env->getMethodID(cls, "getPointsReader", "()Lorg/apache/lucene/codecs/PointsReader;");
            mids$[mid_getPostingsReader_573c1a94549f7937] = env->getMethodID(cls, "getPostingsReader", "()Lorg/apache/lucene/codecs/FieldsProducer;");
            mids$[mid_getSortedDocValues_adb16e9c5e3d9604] = env->getMethodID(cls, "getSortedDocValues", "(Ljava/lang/String;)Lorg/apache/lucene/index/SortedDocValues;");
            mids$[mid_getSortedNumericDocValues_25e77b19828c4dfa] = env->getMethodID(cls, "getSortedNumericDocValues", "(Ljava/lang/String;)Lorg/apache/lucene/index/SortedNumericDocValues;");
            mids$[mid_getSortedSetDocValues_379820f082b251eb] = env->getMethodID(cls, "getSortedSetDocValues", "(Ljava/lang/String;)Lorg/apache/lucene/index/SortedSetDocValues;");
            mids$[mid_getTermVectors_9997c94b783ad8be] = env->getMethodID(cls, "getTermVectors", "(I)Lorg/apache/lucene/index/Fields;");
            mids$[mid_getTermVectorsReader_f69eb90f55592154] = env->getMethodID(cls, "getTermVectorsReader", "()Lorg/apache/lucene/codecs/TermVectorsReader;");
            mids$[mid_ramBytesUsed_2e5ae9edcb9b072f] = env->getMethodID(cls, "ramBytesUsed", "()J");
            mids$[mid_terms_3976802ad88273cd] = env->getMethodID(cls, "terms", "(Ljava/lang/String;)Lorg/apache/lucene/index/Terms;");
            mids$[mid_doClose_f2cc1bce94666404] = env->getMethodID(cls, "doClose", "()V");

            class$ = new ::java::lang::Class(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        void CodecReader::checkIntegrity() const
        {
          env->callVoidMethod(this$, mids$[mid_checkIntegrity_f2cc1bce94666404]);
        }

        void CodecReader::document(jint a0, const ::org::apache::lucene::index::StoredFieldVisitor & a1) const
        {
          env->callVoidMethod(this$, mids$[mid_document_8f45e7464506ed2f], a0, a1.this$);
        }

        ::org::apache::lucene::index::BinaryDocValues CodecReader::getBinaryDocValues(const ::java::lang::String & a0) const
        {
          return ::org::apache::lucene::index::BinaryDocValues(env->callObjectMethod(this$, mids$[mid_getBinaryDocValues_6cf59c3533d4df22], a0.this$));
        }

        ::java::util::Collection CodecReader::getChildResources() const
        {
          return ::java::util::Collection(env->callObjectMethod(this$, mids$[mid_getChildResources_d4dfbf7a26ff41df]));
        }

        ::org::apache::lucene::codecs::DocValuesProducer CodecReader::getDocValuesReader() const
        {
          return ::org::apache::lucene::codecs::DocValuesProducer(env->callObjectMethod(this$, mids$[mid_getDocValuesReader_2703cdf07eabd0a4]));
        }

        ::org::apache::lucene::codecs::StoredFieldsReader CodecReader::getFieldsReader() const
        {
          return ::org::apache::lucene::codecs::StoredFieldsReader(env->callObjectMethod(this$, mids$[mid_getFieldsReader_ba629b83d3686969]));
        }

        ::org::apache::lucene::index::NumericDocValues CodecReader::getNormValues(const ::java::lang::String & a0) const
        {
          return ::org::apache::lucene::index::NumericDocValues(env->callObjectMethod(this$, mids$[mid_getNormValues_2b2c87c24a70ef49], a0.this$));
        }

        ::org::apache::lucene::codecs::NormsProducer CodecReader::getNormsReader() const
        {
          return ::org::apache::lucene::codecs::NormsProducer(env->callObjectMethod(this$, mids$[mid_getNormsReader_0502194d89d40c22]));
        }

        ::org::apache::lucene::index::NumericDocValues CodecReader::getNumericDocValues(const ::java::lang::String & a0) const
        {
          return ::org::apache::lucene::index::NumericDocValues(env->callObjectMethod(this$, mids$[mid_getNumericDocValues_2b2c87c24a70ef49], a0.this$));
        }

        ::org::apache::lucene::index::PointValues CodecReader::getPointValues(const ::java::lang::String & a0) const
        {
          return ::org::apache::lucene::index::PointValues(env->callObjectMethod(this$, mids$[mid_getPointValues_72b990dbae0eea09], a0.this$));
        }

        ::org::apache::lucene::codecs::PointsReader CodecReader::getPointsReader() const
        {
          return ::org::apache::lucene::codecs::PointsReader(env->callObjectMethod(this$, mids$[mid_getPointsReader_0a5d82ff6781f22b]));
        }

        ::org::apache::lucene::codecs::FieldsProducer CodecReader::getPostingsReader() const
        {
          return ::org::apache::lucene::codecs::FieldsProducer(env->callObjectMethod(this$, mids$[mid_getPostingsReader_573c1a94549f7937]));
        }

        ::org::apache::lucene::index::SortedDocValues CodecReader::getSortedDocValues(const ::java::lang::String & a0) const
        {
          return ::org::apache::lucene::index::SortedDocValues(env->callObjectMethod(this$, mids$[mid_getSortedDocValues_adb16e9c5e3d9604], a0.this$));
        }

        ::org::apache::lucene::index::SortedNumericDocValues CodecReader::getSortedNumericDocValues(const ::java::lang::String & a0) const
        {
          return ::org::apache::lucene::index::SortedNumericDocValues(env->callObjectMethod(this$, mids$[mid_getSortedNumericDocValues_25e77b19828c4dfa], a0.this$));
        }

        ::org::apache::lucene::index::SortedSetDocValues CodecReader::getSortedSetDocValues(const ::java::lang::String & a0) const
        {
          return ::org::apache::lucene::index::SortedSetDocValues(env->callObjectMethod(this$, mids$[mid_getSortedSetDocValues_379820f082b251eb], a0.this$));
        }

        ::org::apache::lucene::index::Fields CodecReader::getTermVectors(jint a0) const
        {
          return ::org::apache::lucene::index::Fields(env->callObjectMethod(this$, mids$[mid_getTermVectors_9997c94b783ad8be], a0));
        }

        ::org::apache::lucene::codecs::TermVectorsReader CodecReader::getTermVectorsReader() const
        {
          return ::org::apache::lucene::codecs::TermVectorsReader(env->callObjectMethod(this$, mids$[mid_getTermVectorsReader_f69eb90f55592154]));
        }

        jlong CodecReader::ramBytesUsed() const
        {
          return env->callLongMethod(this$, mids$[mid_ramBytesUsed_2e5ae9edcb9b072f]);
        }

        ::org::apache::lucene::index::Terms CodecReader::terms(const ::java::lang::String & a0) const
        {
          return ::org::apache::lucene::index::Terms(env->callObjectMethod(this$, mids$[mid_terms_3976802ad88273cd], a0.this$));
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {
        static PyObject *t_CodecReader_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_CodecReader_instance_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_CodecReader_checkIntegrity(t_CodecReader *self, PyObject *args);
        static PyObject *t_CodecReader_document(t_CodecReader *self, PyObject *args);
        static PyObject *t_CodecReader_getBinaryDocValues(t_CodecReader *self, PyObject *args);
        static PyObject *t_CodecReader_getChildResources(t_CodecReader *self);
        static PyObject *t_CodecReader_getDocValuesReader(t_CodecReader *self);
        static PyObject *t_CodecReader_getFieldsReader(t_CodecReader *self);
        static PyObject *t_CodecReader_getNormValues(t_CodecReader *self, PyObject *args);
        static PyObject *t_CodecReader_getNormsReader(t_CodecReader *self);
        static PyObject *t_CodecReader_getNumericDocValues(t_CodecReader *self, PyObject *args);
        static PyObject *t_CodecReader_getPointValues(t_CodecReader *self, PyObject *args);
        static PyObject *t_CodecReader_getPointsReader(t_CodecReader *self);
        static PyObject *t_CodecReader_getPostingsReader(t_CodecReader *self);
        static PyObject *t_CodecReader_getSortedDocValues(t_CodecReader *self, PyObject *args);
        static PyObject *t_CodecReader_getSortedNumericDocValues(t_CodecReader *self, PyObject *args);
        static PyObject *t_CodecReader_getSortedSetDocValues(t_CodecReader *self, PyObject *args);
        static PyObject *t_CodecReader_getTermVectors(t_CodecReader *self, PyObject *args);
        static PyObject *t_CodecReader_getTermVectorsReader(t_CodecReader *self);
        static PyObject *t_CodecReader_ramBytesUsed(t_CodecReader *self);
        static PyObject *t_CodecReader_terms(t_CodecReader *self, PyObject *args);
        static PyObject *t_CodecReader_get__childResources(t_CodecReader *self, void *data);
        static PyObject *t_CodecReader_get__docValuesReader(t_CodecReader *self, void *data);
        static PyObject *t_CodecReader_get__fieldsReader(t_CodecReader *self, void *data);
        static PyObject *t_CodecReader_get__normsReader(t_CodecReader *self, void *data);
        static PyObject *t_CodecReader_get__pointsReader(t_CodecReader *self, void *data);
        static PyObject *t_CodecReader_get__postingsReader(t_CodecReader *self, void *data);
        static PyObject *t_CodecReader_get__termVectorsReader(t_CodecReader *self, void *data);
        static PyGetSetDef t_CodecReader__fields_[] = {
          DECLARE_GET_FIELD(t_CodecReader, childResources),
          DECLARE_GET_FIELD(t_CodecReader, docValuesReader),
          DECLARE_GET_FIELD(t_CodecReader, fieldsReader),
          DECLARE_GET_FIELD(t_CodecReader, normsReader),
          DECLARE_GET_FIELD(t_CodecReader, pointsReader),
          DECLARE_GET_FIELD(t_CodecReader, postingsReader),
          DECLARE_GET_FIELD(t_CodecReader, termVectorsReader),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_CodecReader__methods_[] = {
          DECLARE_METHOD(t_CodecReader, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_CodecReader, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_CodecReader, checkIntegrity, METH_VARARGS),
          DECLARE_METHOD(t_CodecReader, document, METH_VARARGS),
          DECLARE_METHOD(t_CodecReader, getBinaryDocValues, METH_VARARGS),
          DECLARE_METHOD(t_CodecReader, getChildResources, METH_NOARGS),
          DECLARE_METHOD(t_CodecReader, getDocValuesReader, METH_NOARGS),
          DECLARE_METHOD(t_CodecReader, getFieldsReader, METH_NOARGS),
          DECLARE_METHOD(t_CodecReader, getNormValues, METH_VARARGS),
          DECLARE_METHOD(t_CodecReader, getNormsReader, METH_NOARGS),
          DECLARE_METHOD(t_CodecReader, getNumericDocValues, METH_VARARGS),
          DECLARE_METHOD(t_CodecReader, getPointValues, METH_VARARGS),
          DECLARE_METHOD(t_CodecReader, getPointsReader, METH_NOARGS),
          DECLARE_METHOD(t_CodecReader, getPostingsReader, METH_NOARGS),
          DECLARE_METHOD(t_CodecReader, getSortedDocValues, METH_VARARGS),
          DECLARE_METHOD(t_CodecReader, getSortedNumericDocValues, METH_VARARGS),
          DECLARE_METHOD(t_CodecReader, getSortedSetDocValues, METH_VARARGS),
          DECLARE_METHOD(t_CodecReader, getTermVectors, METH_VARARGS),
          DECLARE_METHOD(t_CodecReader, getTermVectorsReader, METH_NOARGS),
          DECLARE_METHOD(t_CodecReader, ramBytesUsed, METH_NOARGS),
          DECLARE_METHOD(t_CodecReader, terms, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        static PyType_Slot PY_TYPE_SLOTS(CodecReader)[] = {
          { Py_tp_methods, t_CodecReader__methods_ },
          { Py_tp_init, (void *) abstract_init },
          { Py_tp_getset, t_CodecReader__fields_ },
          { 0, NULL }
        };

        static PyType_Def *PY_TYPE_BASES(CodecReader)[] = {
          &PY_TYPE_DEF(::org::apache::lucene::index::LeafReader),
          NULL
        };

        DEFINE_TYPE(CodecReader, t_CodecReader, CodecReader);

        void t_CodecReader::install(PyObject *module)
        {
          installType(&PY_TYPE(CodecReader), &PY_TYPE_DEF(CodecReader), module, "CodecReader", 0);
        }

        void t_CodecReader::initialize(PyObject *module)
        {
          PyObject_SetAttrString((PyObject *) PY_TYPE(CodecReader), "class_", make_descriptor(CodecReader::initializeClass, 1));
          PyObject_SetAttrString((PyObject *) PY_TYPE(CodecReader), "wrapfn_", make_descriptor(t_CodecReader::wrap_jobject));
          PyObject_SetAttrString((PyObject *) PY_TYPE(CodecReader), "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_CodecReader_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, CodecReader::initializeClass, 1)))
            return NULL;
          return t_CodecReader::wrap_Object(CodecReader(((t_CodecReader *) arg)->object.this$));
        }
        static PyObject *t_CodecReader_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, CodecReader::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static PyObject *t_CodecReader_checkIntegrity(t_CodecReader *self, PyObject *args)
        {

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(self->object.checkIntegrity());
            Py_RETURN_NONE;
          }

          return callSuper(PY_TYPE(CodecReader), (PyObject *) self, "checkIntegrity", args, 2);
        }

        static PyObject *t_CodecReader_document(t_CodecReader *self, PyObject *args)
        {
          jint a0;
          ::org::apache::lucene::index::StoredFieldVisitor a1((jobject) NULL);

          if (!parseArgs(args, "Ik", ::org::apache::lucene::index::StoredFieldVisitor::initializeClass, &a0, &a1))
          {
            OBJ_CALL(self->object.document(a0, a1));
            Py_RETURN_NONE;
          }

          return callSuper(PY_TYPE(CodecReader), (PyObject *) self, "document", args, 2);
        }

        static PyObject *t_CodecReader_getBinaryDocValues(t_CodecReader *self, PyObject *args)
        {
          ::java::lang::String a0((jobject) NULL);
          ::org::apache::lucene::index::BinaryDocValues result((jobject) NULL);

          if (!parseArgs(args, "s", &a0))
          {
            OBJ_CALL(result = self->object.getBinaryDocValues(a0));
            return ::org::apache::lucene::index::t_BinaryDocValues::wrap_Object(result);
          }

          return callSuper(PY_TYPE(CodecReader), (PyObject *) self, "getBinaryDocValues", args, 2);
        }

        static PyObject *t_CodecReader_getChildResources(t_CodecReader *self)
        {
          ::java::util::Collection result((jobject) NULL);
          OBJ_CALL(result = self->object.getChildResources());
          return ::java::util::t_Collection::wrap_Object(result, ::org::apache::lucene::util::PY_TYPE(Accountable));
        }

        static PyObject *t_CodecReader_getDocValuesReader(t_CodecReader *self)
        {
          ::org::apache::lucene::codecs::DocValuesProducer result((jobject) NULL);
          OBJ_CALL(result = self->object.getDocValuesReader());
          return ::org::apache::lucene::codecs::t_DocValuesProducer::wrap_Object(result);
        }

        static PyObject *t_CodecReader_getFieldsReader(t_CodecReader *self)
        {
          ::org::apache::lucene::codecs::StoredFieldsReader result((jobject) NULL);
          OBJ_CALL(result = self->object.getFieldsReader());
          return ::org::apache::lucene::codecs::t_StoredFieldsReader::wrap_Object(result);
        }

        static PyObject *t_CodecReader_getNormValues(t_CodecReader *self, PyObject *args)
        {
          ::java::lang::String a0((jobject) NULL);
          ::org::apache::lucene::index::NumericDocValues result((jobject) NULL);

          if (!parseArgs(args, "s", &a0))
          {
            OBJ_CALL(result = self->object.getNormValues(a0));
            return ::org::apache::lucene::index::t_NumericDocValues::wrap_Object(result);
          }

          return callSuper(PY_TYPE(CodecReader), (PyObject *) self, "getNormValues", args, 2);
        }

        static PyObject *t_CodecReader_getNormsReader(t_CodecReader *self)
        {
          ::org::apache::lucene::codecs::NormsProducer result((jobject) NULL);
          OBJ_CALL(result = self->object.getNormsReader());
          return ::org::apache::lucene::codecs::t_NormsProducer::wrap_Object(result);
        }

        static PyObject *t_CodecReader_getNumericDocValues(t_CodecReader *self, PyObject *args)
        {
          ::java::lang::String a0((jobject) NULL);
          ::org::apache::lucene::index::NumericDocValues result((jobject) NULL);

          if (!parseArgs(args, "s", &a0))
          {
            OBJ_CALL(result = self->object.getNumericDocValues(a0));
            return ::org::apache::lucene::index::t_NumericDocValues::wrap_Object(result);
          }

          return callSuper(PY_TYPE(CodecReader), (PyObject *) self, "getNumericDocValues", args, 2);
        }

        static PyObject *t_CodecReader_getPointValues(t_CodecReader *self, PyObject *args)
        {
          ::java::lang::String a0((jobject) NULL);
          ::org::apache::lucene::index::PointValues result((jobject) NULL);

          if (!parseArgs(args, "s", &a0))
          {
            OBJ_CALL(result = self->object.getPointValues(a0));
            return ::org::apache::lucene::index::t_PointValues::wrap_Object(result);
          }

          return callSuper(PY_TYPE(CodecReader), (PyObject *) self, "getPointValues", args, 2);
        }

        static PyObject *t_CodecReader_getPointsReader(t_CodecReader *self)
        {
          ::org::apache::lucene::codecs::PointsReader result((jobject) NULL);
          OBJ_CALL(result = self->object.getPointsReader());
          return ::org::apache::lucene::codecs::t_PointsReader::wrap_Object(result);
        }

        static PyObject *t_CodecReader_getPostingsReader(t_CodecReader *self)
        {
          ::org::apache::lucene::codecs::FieldsProducer result((jobject) NULL);
          OBJ_CALL(result = self->object.getPostingsReader());
          return ::org::apache::lucene::codecs::t_FieldsProducer::wrap_Object(result);
        }

        static PyObject *t_CodecReader_getSortedDocValues(t_CodecReader *self, PyObject *args)
        {
          ::java::lang::String a0((jobject) NULL);
          ::org::apache::lucene::index::SortedDocValues result((jobject) NULL);

          if (!parseArgs(args, "s", &a0))
          {
            OBJ_CALL(result = self->object.getSortedDocValues(a0));
            return ::org::apache::lucene::index::t_SortedDocValues::wrap_Object(result);
          }

          return callSuper(PY_TYPE(CodecReader), (PyObject *) self, "getSortedDocValues", args, 2);
        }

        static PyObject *t_CodecReader_getSortedNumericDocValues(t_CodecReader *self, PyObject *args)
        {
          ::java::lang::String a0((jobject) NULL);
          ::org::apache::lucene::index::SortedNumericDocValues result((jobject) NULL);

          if (!parseArgs(args, "s", &a0))
          {
            OBJ_CALL(result = self->object.getSortedNumericDocValues(a0));
            return ::org::apache::lucene::index::t_SortedNumericDocValues::wrap_Object(result);
          }

          return callSuper(PY_TYPE(CodecReader), (PyObject *) self, "getSortedNumericDocValues", args, 2);
        }

        static PyObject *t_CodecReader_getSortedSetDocValues(t_CodecReader *self, PyObject *args)
        {
          ::java::lang::String a0((jobject) NULL);
          ::org::apache::lucene::index::SortedSetDocValues result((jobject) NULL);

          if (!parseArgs(args, "s", &a0))
          {
            OBJ_CALL(result = self->object.getSortedSetDocValues(a0));
            return ::org::apache::lucene::index::t_SortedSetDocValues::wrap_Object(result);
          }

          return callSuper(PY_TYPE(CodecReader), (PyObject *) self, "getSortedSetDocValues", args, 2);
        }

        static PyObject *t_CodecReader_getTermVectors(t_CodecReader *self, PyObject *args)
        {
          jint a0;
          ::org::apache::lucene::index::Fields result((jobject) NULL);

          if (!parseArgs(args, "I", &a0))
          {
            OBJ_CALL(result = self->object.getTermVectors(a0));
            return ::org::apache::lucene::index::t_Fields::wrap_Object(result);
          }

          return callSuper(PY_TYPE(CodecReader), (PyObject *) self, "getTermVectors", args, 2);
        }

        static PyObject *t_CodecReader_getTermVectorsReader(t_CodecReader *self)
        {
          ::org::apache::lucene::codecs::TermVectorsReader result((jobject) NULL);
          OBJ_CALL(result = self->object.getTermVectorsReader());
          return ::org::apache::lucene::codecs::t_TermVectorsReader::wrap_Object(result);
        }

        static PyObject *t_CodecReader_ramBytesUsed(t_CodecReader *self)
        {
          jlong result;
          OBJ_CALL(result = self->object.ramBytesUsed());
          return PyLong_FromLongLong((PY_LONG_LONG) result);
        }

        static PyObject *t_CodecReader_terms(t_CodecReader *self, PyObject *args)
        {
          ::java::lang::String a0((jobject) NULL);
          ::org::apache::lucene::index::Terms result((jobject) NULL);

          if (!parseArgs(args, "s", &a0))
          {
            OBJ_CALL(result = self->object.terms(a0));
            return ::org::apache::lucene::index::t_Terms::wrap_Object(result);
          }

          return callSuper(PY_TYPE(CodecReader), (PyObject *) self, "terms", args, 2);
        }

        static PyObject *t_CodecReader_get__childResources(t_CodecReader *self, void *data)
        {
          ::java::util::Collection value((jobject) NULL);
          OBJ_CALL(value = self->object.getChildResources());
          return ::java::util::t_Collection::wrap_Object(value);
        }

        static PyObject *t_CodecReader_get__docValuesReader(t_CodecReader *self, void *data)
        {
          ::org::apache::lucene::codecs::DocValuesProducer value((jobject) NULL);
          OBJ_CALL(value = self->object.getDocValuesReader());
          return ::org::apache::lucene::codecs::t_DocValuesProducer::wrap_Object(value);
        }

        static PyObject *t_CodecReader_get__fieldsReader(t_CodecReader *self, void *data)
        {
          ::org::apache::lucene::codecs::StoredFieldsReader value((jobject) NULL);
          OBJ_CALL(value = self->object.getFieldsReader());
          return ::org::apache::lucene::codecs::t_StoredFieldsReader::wrap_Object(value);
        }

        static PyObject *t_CodecReader_get__normsReader(t_CodecReader *self, void *data)
        {
          ::org::apache::lucene::codecs::NormsProducer value((jobject) NULL);
          OBJ_CALL(value = self->object.getNormsReader());
          return ::org::apache::lucene::codecs::t_NormsProducer::wrap_Object(value);
        }

        static PyObject *t_CodecReader_get__pointsReader(t_CodecReader *self, void *data)
        {
          ::org::apache::lucene::codecs::PointsReader value((jobject) NULL);
          OBJ_CALL(value = self->object.getPointsReader());
          return ::org::apache::lucene::codecs::t_PointsReader::wrap_Object(value);
        }

        static PyObject *t_CodecReader_get__postingsReader(t_CodecReader *self, void *data)
        {
          ::org::apache::lucene::codecs::FieldsProducer value((jobject) NULL);
          OBJ_CALL(value = self->object.getPostingsReader());
          return ::org::apache::lucene::codecs::t_FieldsProducer::wrap_Object(value);
        }

        static PyObject *t_CodecReader_get__termVectorsReader(t_CodecReader *self, void *data)
        {
          ::org::apache::lucene::codecs::TermVectorsReader value((jobject) NULL);
          OBJ_CALL(value = self->object.getTermVectorsReader());
          return ::org::apache::lucene::codecs::t_TermVectorsReader::wrap_Object(value);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/store/Lock.h"
#include "java/io/IOException.h"
#include "java/io/Closeable.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace store {

        ::java::lang::Class *Lock::class$ = NULL;
        jmethodID *Lock::mids$ = NULL;
        bool Lock::live$ = false;

        jclass Lock::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/store/Lock");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_f2cc1bce94666404] = env->getMethodID(cls, "<init>", "()V");
            mids$[mid_close_f2cc1bce94666404] = env->getMethodID(cls, "close", "()V");
            mids$[mid_ensureValid_f2cc1bce94666404] = env->getMethodID(cls, "ensureValid", "()V");

            class$ = new ::java::lang::Class(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        Lock::Lock() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_f2cc1bce94666404)) {}

        void Lock::close() const
        {
          env->callVoidMethod(this$, mids$[mid_close_f2cc1bce94666404]);
        }

        void Lock::ensureValid() const
        {
          env->callVoidMethod(this$, mids$[mid_ensureValid_f2cc1bce94666404]);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace store {
        static PyObject *t_Lock_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_Lock_instance_(PyTypeObject *type, PyObject *arg);
        static int t_Lock_init_(t_Lock *self, PyObject *args, PyObject *kwds);
        static PyObject *t_Lock_close(t_Lock *self);
        static PyObject *t_Lock_ensureValid(t_Lock *self);

        static PyMethodDef t_Lock__methods_[] = {
          DECLARE_METHOD(t_Lock, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_Lock, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_Lock, close, METH_NOARGS),
          DECLARE_METHOD(t_Lock, ensureValid, METH_NOARGS),
          { NULL, NULL, 0, NULL }
        };

        static PyType_Slot PY_TYPE_SLOTS(Lock)[] = {
          { Py_tp_methods, t_Lock__methods_ },
          { Py_tp_init, (void *) t_Lock_init_ },
          { 0, NULL }
        };

        static PyType_Def *PY_TYPE_BASES(Lock)[] = {
          &PY_TYPE_DEF(::java::lang::Object),
          NULL
        };

        DEFINE_TYPE(Lock, t_Lock, Lock);

        void t_Lock::install(PyObject *module)
        {
          installType(&PY_TYPE(Lock), &PY_TYPE_DEF(Lock), module, "Lock", 0);
        }

        void t_Lock::initialize(PyObject *module)
        {
          PyObject_SetAttrString((PyObject *) PY_TYPE(Lock), "class_", make_descriptor(Lock::initializeClass, 1));
          PyObject_SetAttrString((PyObject *) PY_TYPE(Lock), "wrapfn_", make_descriptor(t_Lock::wrap_jobject));
          PyObject_SetAttrString((PyObject *) PY_TYPE(Lock), "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_Lock_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, Lock::initializeClass, 1)))
            return NULL;
          return t_Lock::wrap_Object(Lock(((t_Lock *) arg)->object.this$));
        }
        static PyObject *t_Lock_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, Lock::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_Lock_init_(t_Lock *self, PyObject *args, PyObject *kwds)
        {
          Lock object((jobject) NULL);

          INT_CALL(object = Lock());
          self->object = object;

          return 0;
        }

        static PyObject *t_Lock_close(t_Lock *self)
        {
          OBJ_CALL(self->object.close());
          Py_RETURN_NONE;
        }

        static PyObject *t_Lock_ensureValid(t_Lock *self)
        {
          OBJ_CALL(self->object.ensureValid());
          Py_RETURN_NONE;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/spans/SpanMultiTermQueryWrapper$TopTermsSpanBooleanQueryRewrite.h"
#include "org/apache/lucene/index/IndexReader.h"
#include "org/apache/lucene/search/spans/SpanQuery.h"
#include "java/lang/Class.h"
#include "java/lang/Object.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/search/MultiTermQuery.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace spans {

          ::java::lang::Class *SpanMultiTermQueryWrapper$TopTermsSpanBooleanQueryRewrite::class$ = NULL;
          jmethodID *SpanMultiTermQueryWrapper$TopTermsSpanBooleanQueryRewrite::mids$ = NULL;
          bool SpanMultiTermQueryWrapper$TopTermsSpanBooleanQueryRewrite::live$ = false;

          jclass SpanMultiTermQueryWrapper$TopTermsSpanBooleanQueryRewrite::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/search/spans/SpanMultiTermQueryWrapper$TopTermsSpanBooleanQueryRewrite");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_040c4cd0390c5aff] = env->getMethodID(cls, "<init>", "(I)V");
              mids$[mid_equals_8b72f2dcdde6fd1d] = env->getMethodID(cls, "equals", "(Ljava/lang/Object;)Z");
              mids$[mid_getSize_9972fcc56b44e79d] = env->getMethodID(cls, "getSize", "()I");
              mids$[mid_hashCode_9972fcc56b44e79d] = env->getMethodID(cls, "hashCode", "()I");
              mids$[mid_rewrite_5b5095bdee2c3fbe] = env->getMethodID(cls, "rewrite", "(Lorg/apache/lucene/index/IndexReader;Lorg/apache/lucene/search/MultiTermQuery;)Lorg/apache/lucene/search/spans/SpanQuery;");

              class$ = new ::java::lang::Class(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          SpanMultiTermQueryWrapper$TopTermsSpanBooleanQueryRewrite::SpanMultiTermQueryWrapper$TopTermsSpanBooleanQueryRewrite(jint a0) : ::org::apache::lucene::search::spans::SpanMultiTermQueryWrapper$SpanRewriteMethod(env->newObject(initializeClass, &mids$, mid_init$_040c4cd0390c5aff, a0)) {}

          jboolean SpanMultiTermQueryWrapper$TopTermsSpanBooleanQueryRewrite::equals(const ::java::lang::Object & a0) const
          {
            return env->callBooleanMethod(this$, mids$[mid_equals_8b72f2dcdde6fd1d], a0.this$);
          }

          jint SpanMultiTermQueryWrapper$TopTermsSpanBooleanQueryRewrite::getSize() const
          {
            return env->callIntMethod(this$, mids$[mid_getSize_9972fcc56b44e79d]);
          }

          jint SpanMultiTermQueryWrapper$TopTermsSpanBooleanQueryRewrite::hashCode() const
          {
            return env->callIntMethod(this$, mids$[mid_hashCode_9972fcc56b44e79d]);
          }

          ::org::apache::lucene::search::spans::SpanQuery SpanMultiTermQueryWrapper$TopTermsSpanBooleanQueryRewrite::rewrite(const ::org::apache::lucene::index::IndexReader & a0, const ::org::apache::lucene::search::MultiTermQuery & a1) const
          {
            return ::org::apache::lucene::search::spans::SpanQuery(env->callObjectMethod(this$, mids$[mid_rewrite_5b5095bdee2c3fbe], a0.this$, a1.this$));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace spans {
          static PyObject *t_SpanMultiTermQueryWrapper$TopTermsSpanBooleanQueryRewrite_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_SpanMultiTermQueryWrapper$TopTermsSpanBooleanQueryRewrite_instance_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_SpanMultiTermQueryWrapper$TopTermsSpanBooleanQueryRewrite_of_(t_SpanMultiTermQueryWrapper$TopTermsSpanBooleanQueryRewrite *self, PyObject *args);
          static int t_SpanMultiTermQueryWrapper$TopTermsSpanBooleanQueryRewrite_init_(t_SpanMultiTermQueryWrapper$TopTermsSpanBooleanQueryRewrite *self, PyObject *args, PyObject *kwds);
          static PyObject *t_SpanMultiTermQueryWrapper$TopTermsSpanBooleanQueryRewrite_equals(t_SpanMultiTermQueryWrapper$TopTermsSpanBooleanQueryRewrite *self, PyObject *args);
          static PyObject *t_SpanMultiTermQueryWrapper$TopTermsSpanBooleanQueryRewrite_getSize(t_SpanMultiTermQueryWrapper$TopTermsSpanBooleanQueryRewrite *self);
          static PyObject *t_SpanMultiTermQueryWrapper$TopTermsSpanBooleanQueryRewrite_hashCode(t_SpanMultiTermQueryWrapper$TopTermsSpanBooleanQueryRewrite *self, PyObject *args);
          static PyObject *t_SpanMultiTermQueryWrapper$TopTermsSpanBooleanQueryRewrite_rewrite(t_SpanMultiTermQueryWrapper$TopTermsSpanBooleanQueryRewrite *self, PyObject *args);
          static PyObject *t_SpanMultiTermQueryWrapper$TopTermsSpanBooleanQueryRewrite_get__size(t_SpanMultiTermQueryWrapper$TopTermsSpanBooleanQueryRewrite *self, void *data);
          static PyObject *t_SpanMultiTermQueryWrapper$TopTermsSpanBooleanQueryRewrite_get__parameters_(t_SpanMultiTermQueryWrapper$TopTermsSpanBooleanQueryRewrite *self, void *data);
          static PyGetSetDef t_SpanMultiTermQueryWrapper$TopTermsSpanBooleanQueryRewrite__fields_[] = {
            DECLARE_GET_FIELD(t_SpanMultiTermQueryWrapper$TopTermsSpanBooleanQueryRewrite, size),
            DECLARE_GET_FIELD(t_SpanMultiTermQueryWrapper$TopTermsSpanBooleanQueryRewrite, parameters_),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_SpanMultiTermQueryWrapper$TopTermsSpanBooleanQueryRewrite__methods_[] = {
            DECLARE_METHOD(t_SpanMultiTermQueryWrapper$TopTermsSpanBooleanQueryRewrite, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_SpanMultiTermQueryWrapper$TopTermsSpanBooleanQueryRewrite, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_SpanMultiTermQueryWrapper$TopTermsSpanBooleanQueryRewrite, of_, METH_VARARGS),
            DECLARE_METHOD(t_SpanMultiTermQueryWrapper$TopTermsSpanBooleanQueryRewrite, equals, METH_VARARGS),
            DECLARE_METHOD(t_SpanMultiTermQueryWrapper$TopTermsSpanBooleanQueryRewrite, getSize, METH_NOARGS),
            DECLARE_METHOD(t_SpanMultiTermQueryWrapper$TopTermsSpanBooleanQueryRewrite, hashCode, METH_VARARGS),
            DECLARE_METHOD(t_SpanMultiTermQueryWrapper$TopTermsSpanBooleanQueryRewrite, rewrite, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          static PyType_Slot PY_TYPE_SLOTS(SpanMultiTermQueryWrapper$TopTermsSpanBooleanQueryRewrite)[] = {
            { Py_tp_methods, t_SpanMultiTermQueryWrapper$TopTermsSpanBooleanQueryRewrite__methods_ },
            { Py_tp_init, (void *) t_SpanMultiTermQueryWrapper$TopTermsSpanBooleanQueryRewrite_init_ },
            { Py_tp_getset, t_SpanMultiTermQueryWrapper$TopTermsSpanBooleanQueryRewrite__fields_ },
            { 0, NULL }
          };

          static PyType_Def *PY_TYPE_BASES(SpanMultiTermQueryWrapper$TopTermsSpanBooleanQueryRewrite)[] = {
            &PY_TYPE_DEF(::org::apache::lucene::search::spans::SpanMultiTermQueryWrapper$SpanRewriteMethod),
            NULL
          };

          DEFINE_TYPE(SpanMultiTermQueryWrapper$TopTermsSpanBooleanQueryRewrite, t_SpanMultiTermQueryWrapper$TopTermsSpanBooleanQueryRewrite, SpanMultiTermQueryWrapper$TopTermsSpanBooleanQueryRewrite);
          PyObject *t_SpanMultiTermQueryWrapper$TopTermsSpanBooleanQueryRewrite::wrap_Object(const SpanMultiTermQueryWrapper$TopTermsSpanBooleanQueryRewrite& object, PyTypeObject *p0)
          {
            PyObject *obj = t_SpanMultiTermQueryWrapper$TopTermsSpanBooleanQueryRewrite::wrap_Object(object);
            if (obj != NULL && obj != Py_None)
            {
              t_SpanMultiTermQueryWrapper$TopTermsSpanBooleanQueryRewrite *self = (t_SpanMultiTermQueryWrapper$TopTermsSpanBooleanQueryRewrite *) obj;
              self->parameters[0] = p0;
            }
            return obj;
          }

          PyObject *t_SpanMultiTermQueryWrapper$TopTermsSpanBooleanQueryRewrite::wrap_jobject(const jobject& object, PyTypeObject *p0)
          {
            PyObject *obj = t_SpanMultiTermQueryWrapper$TopTermsSpanBooleanQueryRewrite::wrap_jobject(object);
            if (obj != NULL && obj != Py_None)
            {
              t_SpanMultiTermQueryWrapper$TopTermsSpanBooleanQueryRewrite *self = (t_SpanMultiTermQueryWrapper$TopTermsSpanBooleanQueryRewrite *) obj;
              self->parameters[0] = p0;
            }
            return obj;
          }

          void t_SpanMultiTermQueryWrapper$TopTermsSpanBooleanQueryRewrite::install(PyObject *module)
          {
            installType(&PY_TYPE(SpanMultiTermQueryWrapper$TopTermsSpanBooleanQueryRewrite), &PY_TYPE_DEF(SpanMultiTermQueryWrapper$TopTermsSpanBooleanQueryRewrite), module, "SpanMultiTermQueryWrapper$TopTermsSpanBooleanQueryRewrite", 0);
          }

          void t_SpanMultiTermQueryWrapper$TopTermsSpanBooleanQueryRewrite::initialize(PyObject *module)
          {
            PyObject_SetAttrString((PyObject *) PY_TYPE(SpanMultiTermQueryWrapper$TopTermsSpanBooleanQueryRewrite), "class_", make_descriptor(SpanMultiTermQueryWrapper$TopTermsSpanBooleanQueryRewrite::initializeClass, 1));
            PyObject_SetAttrString((PyObject *) PY_TYPE(SpanMultiTermQueryWrapper$TopTermsSpanBooleanQueryRewrite), "wrapfn_", make_descriptor(t_SpanMultiTermQueryWrapper$TopTermsSpanBooleanQueryRewrite::wrap_jobject));
            PyObject_SetAttrString((PyObject *) PY_TYPE(SpanMultiTermQueryWrapper$TopTermsSpanBooleanQueryRewrite), "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_SpanMultiTermQueryWrapper$TopTermsSpanBooleanQueryRewrite_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, SpanMultiTermQueryWrapper$TopTermsSpanBooleanQueryRewrite::initializeClass, 1)))
              return NULL;
            return t_SpanMultiTermQueryWrapper$TopTermsSpanBooleanQueryRewrite::wrap_Object(SpanMultiTermQueryWrapper$TopTermsSpanBooleanQueryRewrite(((t_SpanMultiTermQueryWrapper$TopTermsSpanBooleanQueryRewrite *) arg)->object.this$));
          }
          static PyObject *t_SpanMultiTermQueryWrapper$TopTermsSpanBooleanQueryRewrite_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, SpanMultiTermQueryWrapper$TopTermsSpanBooleanQueryRewrite::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static PyObject *t_SpanMultiTermQueryWrapper$TopTermsSpanBooleanQueryRewrite_of_(t_SpanMultiTermQueryWrapper$TopTermsSpanBooleanQueryRewrite *self, PyObject *args)
          {
            if (!parseArg(args, "T", 1, &(self->parameters)))
              Py_RETURN_SELF;
            return PyErr_SetArgsError((PyObject *) self, "of_", args);
          }

          static int t_SpanMultiTermQueryWrapper$TopTermsSpanBooleanQueryRewrite_init_(t_SpanMultiTermQueryWrapper$TopTermsSpanBooleanQueryRewrite *self, PyObject *args, PyObject *kwds)
          {
            jint a0;
            SpanMultiTermQueryWrapper$TopTermsSpanBooleanQueryRewrite object((jobject) NULL);

            if (!parseArgs(args, "I", &a0))
            {
              INT_CALL(object = SpanMultiTermQueryWrapper$TopTermsSpanBooleanQueryRewrite(a0));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_SpanMultiTermQueryWrapper$TopTermsSpanBooleanQueryRewrite_equals(t_SpanMultiTermQueryWrapper$TopTermsSpanBooleanQueryRewrite *self, PyObject *args)
          {
            ::java::lang::Object a0((jobject) NULL);
            jboolean result;

            if (!parseArgs(args, "o", &a0))
            {
              OBJ_CALL(result = self->object.equals(a0));
              Py_RETURN_BOOL(result);
            }

            return callSuper(PY_TYPE(SpanMultiTermQueryWrapper$TopTermsSpanBooleanQueryRewrite), (PyObject *) self, "equals", args, 2);
          }

          static PyObject *t_SpanMultiTermQueryWrapper$TopTermsSpanBooleanQueryRewrite_getSize(t_SpanMultiTermQueryWrapper$TopTermsSpanBooleanQueryRewrite *self)
          {
            jint result;
            OBJ_CALL(result = self->object.getSize());
            return PyLong_FromLong((long) result);
          }

          static PyObject *t_SpanMultiTermQueryWrapper$TopTermsSpanBooleanQueryRewrite_hashCode(t_SpanMultiTermQueryWrapper$TopTermsSpanBooleanQueryRewrite *self, PyObject *args)
          {
            jint result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.hashCode());
              return PyLong_FromLong((long) result);
            }

            return callSuper(PY_TYPE(SpanMultiTermQueryWrapper$TopTermsSpanBooleanQueryRewrite), (PyObject *) self, "hashCode", args, 2);
          }

          static PyObject *t_SpanMultiTermQueryWrapper$TopTermsSpanBooleanQueryRewrite_rewrite(t_SpanMultiTermQueryWrapper$TopTermsSpanBooleanQueryRewrite *self, PyObject *args)
          {
            ::org::apache::lucene::index::IndexReader a0((jobject) NULL);
            ::org::apache::lucene::search::MultiTermQuery a1((jobject) NULL);
            ::org::apache::lucene::search::spans::SpanQuery result((jobject) NULL);

            if (!parseArgs(args, "kk", ::org::apache::lucene::index::IndexReader::initializeClass, ::org::apache::lucene::search::MultiTermQuery::initializeClass, &a0, &a1))
            {
              OBJ_CALL(result = self->object.rewrite(a0, a1));
              return ::org::apache::lucene::search::spans::t_SpanQuery::wrap_Object(result);
            }

            return callSuper(PY_TYPE(SpanMultiTermQueryWrapper$TopTermsSpanBooleanQueryRewrite), (PyObject *) self, "rewrite", args, 2);
          }
          static PyObject *t_SpanMultiTermQueryWrapper$TopTermsSpanBooleanQueryRewrite_get__parameters_(t_SpanMultiTermQueryWrapper$TopTermsSpanBooleanQueryRewrite *self, void *data)
          {
            return typeParameters(self->parameters, sizeof(self->parameters));
          }

          static PyObject *t_SpanMultiTermQueryWrapper$TopTermsSpanBooleanQueryRewrite_get__size(t_SpanMultiTermQueryWrapper$TopTermsSpanBooleanQueryRewrite *self, void *data)
          {
            jint value;
            OBJ_CALL(value = self->object.getSize());
            return PyLong_FromLong((long) value);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/MultiTermQuery$RewriteMethod.h"
#include "org/apache/lucene/index/IndexReader.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/search/Query.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/search/MultiTermQuery.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {

        ::java::lang::Class *MultiTermQuery$RewriteMethod::class$ = NULL;
        jmethodID *MultiTermQuery$RewriteMethod::mids$ = NULL;
        bool MultiTermQuery$RewriteMethod::live$ = false;

        jclass MultiTermQuery$RewriteMethod::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/search/MultiTermQuery$RewriteMethod");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_f2cc1bce94666404] = env->getMethodID(cls, "<init>", "()V");
            mids$[mid_rewrite_9b63ebac49a26b30] = env->getMethodID(cls, "rewrite", "(Lorg/apache/lucene/index/IndexReader;Lorg/apache/lucene/search/MultiTermQuery;)Lorg/apache/lucene/search/Query;");
            mids$[mid_getTermsEnum_6bc3b190a073aedd] = env->getMethodID(cls, "getTermsEnum", "(Lorg/apache/lucene/search/MultiTermQuery;Lorg/apache/lucene/index/Terms;Lorg/apache/lucene/util/AttributeSource;)Lorg/apache/lucene/index/TermsEnum;");

            class$ = new ::java::lang::Class(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        MultiTermQuery$RewriteMethod::MultiTermQuery$RewriteMethod() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_f2cc1bce94666404)) {}

        ::org::apache::lucene::search::Query MultiTermQuery$RewriteMethod::rewrite(const ::org::apache::lucene::index::IndexReader & a0, const ::org::apache::lucene::search::MultiTermQuery & a1) const
        {
          return ::org::apache::lucene::search::Query(env->callObjectMethod(this$, mids$[mid_rewrite_9b63ebac49a26b30], a0.this$, a1.this$));
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        static PyObject *t_MultiTermQuery$RewriteMethod_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_MultiTermQuery$RewriteMethod_instance_(PyTypeObject *type, PyObject *arg);
        static int t_MultiTermQuery$RewriteMethod_init_(t_MultiTermQuery$RewriteMethod *self, PyObject *args, PyObject *kwds);
        static PyObject *t_MultiTermQuery$RewriteMethod_rewrite(t_MultiTermQuery$RewriteMethod *self, PyObject *args);

        static PyMethodDef t_MultiTermQuery$RewriteMethod__methods_[] = {
          DECLARE_METHOD(t_MultiTermQuery$RewriteMethod, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_MultiTermQuery$RewriteMethod, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_MultiTermQuery$RewriteMethod, rewrite, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        static PyType_Slot PY_TYPE_SLOTS(MultiTermQuery$RewriteMethod)[] = {
          { Py_tp_methods, t_MultiTermQuery$RewriteMethod__methods_ },
          { Py_tp_init, (void *) t_MultiTermQuery$RewriteMethod_init_ },
          { 0, NULL }
        };

        static PyType_Def *PY_TYPE_BASES(MultiTermQuery$RewriteMethod)[] = {
          &PY_TYPE_DEF(::java::lang::Object),
          NULL
        };

        DEFINE_TYPE(MultiTermQuery$RewriteMethod, t_MultiTermQuery$RewriteMethod, MultiTermQuery$RewriteMethod);

        void t_MultiTermQuery$RewriteMethod::install(PyObject *module)
        {
          installType(&PY_TYPE(MultiTermQuery$RewriteMethod), &PY_TYPE_DEF(MultiTermQuery$RewriteMethod), module, "MultiTermQuery$RewriteMethod", 0);
        }

        void t_MultiTermQuery$RewriteMethod::initialize(PyObject *module)
        {
          PyObject_SetAttrString((PyObject *) PY_TYPE(MultiTermQuery$RewriteMethod), "class_", make_descriptor(MultiTermQuery$RewriteMethod::initializeClass, 1));
          PyObject_SetAttrString((PyObject *) PY_TYPE(MultiTermQuery$RewriteMethod), "wrapfn_", make_descriptor(t_MultiTermQuery$RewriteMethod::wrap_jobject));
          PyObject_SetAttrString((PyObject *) PY_TYPE(MultiTermQuery$RewriteMethod), "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_MultiTermQuery$RewriteMethod_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, MultiTermQuery$RewriteMethod::initializeClass, 1)))
            return NULL;
          return t_MultiTermQuery$RewriteMethod::wrap_Object(MultiTermQuery$RewriteMethod(((t_MultiTermQuery$RewriteMethod *) arg)->object.this$));
        }
        static PyObject *t_MultiTermQuery$RewriteMethod_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, MultiTermQuery$RewriteMethod::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_MultiTermQuery$RewriteMethod_init_(t_MultiTermQuery$RewriteMethod *self, PyObject *args, PyObject *kwds)
        {
          MultiTermQuery$RewriteMethod object((jobject) NULL);

          INT_CALL(object = MultiTermQuery$RewriteMethod());
          self->object = object;

          return 0;
        }

        static PyObject *t_MultiTermQuery$RewriteMethod_rewrite(t_MultiTermQuery$RewriteMethod *self, PyObject *args)
        {
          ::org::apache::lucene::index::IndexReader a0((jobject) NULL);
          ::org::apache::lucene::search::MultiTermQuery a1((jobject) NULL);
          ::org::apache::lucene::search::Query result((jobject) NULL);

          if (!parseArgs(args, "kk", ::org::apache::lucene::index::IndexReader::initializeClass, ::org::apache::lucene::search::MultiTermQuery::initializeClass, &a0, &a1))
          {
            OBJ_CALL(result = self->object.rewrite(a0, a1));
            return ::org::apache::lucene::search::t_Query::wrap_Object(result);
          }

          PyErr_SetArgsError((PyObject *) self, "rewrite", args);
          return NULL;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queryparser/xml/builders/SpanQueryBuilder.h"
#include "org/apache/lucene/search/spans/SpanQuery.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace xml {
          namespace builders {

            ::java::lang::Class *SpanQueryBuilder::class$ = NULL;
            jmethodID *SpanQueryBuilder::mids$ = NULL;
            bool SpanQueryBuilder::live$ = false;

            jclass SpanQueryBuilder::initializeClass(bool getOnly)
            {
              if (getOnly)
                return (jclass) (live$ ? class$->this$ : NULL);
              if (class$ == NULL)
              {
                jclass cls = (jclass) env->findClass("org/apache/lucene/queryparser/xml/builders/SpanQueryBuilder");

                class$ = new ::java::lang::Class(cls);
                live$ = true;
              }
              return (jclass) class$->this$;
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace xml {
          namespace builders {
            static PyObject *t_SpanQueryBuilder_cast_(PyTypeObject *type, PyObject *arg);
            static PyObject *t_SpanQueryBuilder_instance_(PyTypeObject *type, PyObject *arg);

            static PyMethodDef t_SpanQueryBuilder__methods_[] = {
              DECLARE_METHOD(t_SpanQueryBuilder, cast_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_SpanQueryBuilder, instance_, METH_O | METH_CLASS),
              { NULL, NULL, 0, NULL }
            };

            static PyType_Slot PY_TYPE_SLOTS(SpanQueryBuilder)[] = {
              { Py_tp_methods, t_SpanQueryBuilder__methods_ },
              { Py_tp_init, (void *) abstract_init },
              { 0, NULL }
            };

            static PyType_Def *PY_TYPE_BASES(SpanQueryBuilder)[] = {
              &PY_TYPE_DEF(::org::apache::lucene::queryparser::xml::QueryBuilder),
              NULL
            };

            DEFINE_TYPE(SpanQueryBuilder, t_SpanQueryBuilder, SpanQueryBuilder);

            void t_SpanQueryBuilder::install(PyObject *module)
            {
              installType(&PY_TYPE(SpanQueryBuilder), &PY_TYPE_DEF(SpanQueryBuilder), module, "SpanQueryBuilder", 0);
            }

            void t_SpanQueryBuilder::initialize(PyObject *module)
            {
              PyObject_SetAttrString((PyObject *) PY_TYPE(SpanQueryBuilder), "class_", make_descriptor(SpanQueryBuilder::initializeClass, 1));
              PyObject_SetAttrString((PyObject *) PY_TYPE(SpanQueryBuilder), "wrapfn_", make_descriptor(t_SpanQueryBuilder::wrap_jobject));
              PyObject_SetAttrString((PyObject *) PY_TYPE(SpanQueryBuilder), "boxfn_", make_descriptor(boxObject));
            }

            static PyObject *t_SpanQueryBuilder_cast_(PyTypeObject *type, PyObject *arg)
            {
              if (!(arg = castCheck(arg, SpanQueryBuilder::initializeClass, 1)))
                return NULL;
              return t_SpanQueryBuilder::wrap_Object(SpanQueryBuilder(((t_SpanQueryBuilder *) arg)->object.this$));
            }
            static PyObject *t_SpanQueryBuilder_instance_(PyTypeObject *type, PyObject *arg)
            {
              if (!castCheck(arg, SpanQueryBuilder::initializeClass, 0))
                Py_RETURN_FALSE;
              Py_RETURN_TRUE;
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/codecs/blocktreeords/OrdsBlockTreeTermsReader.h"
#include "org/apache/lucene/index/Terms.h"
#include "java/util/Collection.h"
#include "org/apache/lucene/util/Accountable.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/index/SegmentReadState.h"
#include "java/lang/String.h"
#include "java/util/Iterator.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/codecs/PostingsReaderBase.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace codecs {
        namespace blocktreeords {

          ::java::lang::Class *OrdsBlockTreeTermsReader::class$ = NULL;
          jmethodID *OrdsBlockTreeTermsReader::mids$ = NULL;
          bool OrdsBlockTreeTermsReader::live$ = false;

          jclass OrdsBlockTreeTermsReader::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/codecs/blocktreeords/OrdsBlockTreeTermsReader");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_c81533df697e8cdb] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/codecs/PostingsReaderBase;Lorg/apache/lucene/index/SegmentReadState;)V");
              mids$[mid_checkIntegrity_f2cc1bce94666404] = env->getMethodID(cls, "checkIntegrity", "()V");
              mids$[mid_close_f2cc1bce94666404] = env->getMethodID(cls, "close", "()V");
              mids$[mid_getChildResources_d4dfbf7a26ff41df] = env->getMethodID(cls, "getChildResources", "()Ljava/util/Collection;");
              mids$[mid_iterator_233a192dadb0917d] = env->getMethodID(cls, "iterator", "()Ljava/util/Iterator;");
              mids$[mid_ramBytesUsed_2e5ae9edcb9b072f] = env->getMethodID(cls, "ramBytesUsed", "()J");
              mids$[mid_size_9972fcc56b44e79d] = env->getMethodID(cls, "size", "()I");
              mids$[mid_terms_3976802ad88273cd] = env->getMethodID(cls, "terms", "(Ljava/lang/String;)Lorg/apache/lucene/index/Terms;");
              mids$[mid_toString_db9b55ba01e03e4b] = env->getMethodID(cls, "toString", "()Ljava/lang/String;");

              class$ = new ::java::lang::Class(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          OrdsBlockTreeTermsReader::OrdsBlockTreeTermsReader(const ::org::apache::lucene::codecs::PostingsReaderBase & a0, const ::org::apache::lucene::index::SegmentReadState & a1) : ::org::apache::lucene::codecs::FieldsProducer(env->newObject(initializeClass, &mids$, mid_init$_c81533df697e8cdb, a0.this$, a1.this$)) {}

          void OrdsBlockTreeTermsReader::checkIntegrity() const
          {
            env->callVoidMethod(this$, mids$[mid_checkIntegrity_f2cc1bce94666404]);
          }

          void OrdsBlockTreeTermsReader::close() const
          {
            env->callVoidMethod(this$, mids$[mid_close_f2cc1bce94666404]);
          }

          ::java::util::Collection OrdsBlockTreeTermsReader::getChildResources() const
          {
            return ::java::util::Collection(env->callObjectMethod(this$, mids$[mid_getChildResources_d4dfbf7a26ff41df]));
          }

          ::java::util::Iterator OrdsBlockTreeTermsReader::iterator() const
          {
            return ::java::util::Iterator(env->callObjectMethod(this$, mids$[mid_iterator_233a192dadb0917d]));
          }

          jlong OrdsBlockTreeTermsReader::ramBytesUsed() const
          {
            return env->callLongMethod(this$, mids$[mid_ramBytesUsed_2e5ae9edcb9b072f]);
          }

          jint OrdsBlockTreeTermsReader::size() const
          {
            return env->callIntMethod(this$, mids$[mid_size_9972fcc56b44e79d]);
          }

          ::org::apache::lucene::index::Terms OrdsBlockTreeTermsReader::terms(const ::java::lang::String & a0) const
          {
            return ::org::apache::lucene::index::Terms(env->callObjectMethod(this$, mids$[mid_terms_3976802ad88273cd], a0.this$));
          }

          ::java::lang::String OrdsBlockTreeTermsReader::toString() const
          {
            return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_db9b55ba01e03e4b]));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace codecs {
        namespace blocktreeords {
          static PyObject *t_OrdsBlockTreeTermsReader_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_OrdsBlockTreeTermsReader_instance_(PyTypeObject *type, PyObject *arg);
          static int t_OrdsBlockTreeTermsReader_init_(t_OrdsBlockTreeTermsReader *self, PyObject *args, PyObject *kwds);
          static PyObject *t_OrdsBlockTreeTermsReader_checkIntegrity(t_OrdsBlockTreeTermsReader *self, PyObject *args);
          static PyObject *t_OrdsBlockTreeTermsReader_close(t_OrdsBlockTreeTermsReader *self, PyObject *args);
          static PyObject *t_OrdsBlockTreeTermsReader_getChildResources(t_OrdsBlockTreeTermsReader *self, PyObject *args);
          static PyObject *t_OrdsBlockTreeTermsReader_iterator(t_OrdsBlockTreeTermsReader *self, PyObject *args);
          static PyObject *t_OrdsBlockTreeTermsReader_ramBytesUsed(t_OrdsBlockTreeTermsReader *self, PyObject *args);
          static PyObject *t_OrdsBlockTreeTermsReader_size(t_OrdsBlockTreeTermsReader *self, PyObject *args);
          static PyObject *t_OrdsBlockTreeTermsReader_terms(t_OrdsBlockTreeTermsReader *self, PyObject *args);
          static PyObject *t_OrdsBlockTreeTermsReader_toString(t_OrdsBlockTreeTermsReader *self, PyObject *args);
          static PyObject *t_OrdsBlockTreeTermsReader_get__childResources(t_OrdsBlockTreeTermsReader *self, void *data);
          static PyGetSetDef t_OrdsBlockTreeTermsReader__fields_[] = {
            DECLARE_GET_FIELD(t_OrdsBlockTreeTermsReader, childResources),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_OrdsBlockTreeTermsReader__methods_[] = {
            DECLARE_METHOD(t_OrdsBlockTreeTermsReader, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_OrdsBlockTreeTermsReader, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_OrdsBlockTreeTermsReader, checkIntegrity, METH_VARARGS),
            DECLARE_METHOD(t_OrdsBlockTreeTermsReader, close, METH_VARARGS),
            DECLARE_METHOD(t_OrdsBlockTreeTermsReader, getChildResources, METH_VARARGS),
            DECLARE_METHOD(t_OrdsBlockTreeTermsReader, iterator, METH_VARARGS),
            DECLARE_METHOD(t_OrdsBlockTreeTermsReader, ramBytesUsed, METH_VARARGS),
            DECLARE_METHOD(t_OrdsBlockTreeTermsReader, size, METH_VARARGS),
            DECLARE_METHOD(t_OrdsBlockTreeTermsReader, terms, METH_VARARGS),
            DECLARE_METHOD(t_OrdsBlockTreeTermsReader, toString, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          static PyType_Slot PY_TYPE_SLOTS(OrdsBlockTreeTermsReader)[] = {
            { Py_tp_methods, t_OrdsBlockTreeTermsReader__methods_ },
            { Py_tp_init, (void *) t_OrdsBlockTreeTermsReader_init_ },
            { Py_tp_getset, t_OrdsBlockTreeTermsReader__fields_ },
            { Py_tp_iter, (void *) ((PyObject *(*)(t_OrdsBlockTreeTermsReader *)) get_iterator< t_OrdsBlockTreeTermsReader >) },
            { Py_tp_iternext, (void *) 0 },
            { 0, NULL }
          };

          static PyType_Def *PY_TYPE_BASES(OrdsBlockTreeTermsReader)[] = {
            &PY_TYPE_DEF(::org::apache::lucene::codecs::FieldsProducer),
            NULL
          };

          DEFINE_TYPE(OrdsBlockTreeTermsReader, t_OrdsBlockTreeTermsReader, OrdsBlockTreeTermsReader);

          void t_OrdsBlockTreeTermsReader::install(PyObject *module)
          {
            installType(&PY_TYPE(OrdsBlockTreeTermsReader), &PY_TYPE_DEF(OrdsBlockTreeTermsReader), module, "OrdsBlockTreeTermsReader", 0);
          }

          void t_OrdsBlockTreeTermsReader::initialize(PyObject *module)
          {
            PyObject_SetAttrString((PyObject *) PY_TYPE(OrdsBlockTreeTermsReader), "class_", make_descriptor(OrdsBlockTreeTermsReader::initializeClass, 1));
            PyObject_SetAttrString((PyObject *) PY_TYPE(OrdsBlockTreeTermsReader), "wrapfn_", make_descriptor(t_OrdsBlockTreeTermsReader::wrap_jobject));
            PyObject_SetAttrString((PyObject *) PY_TYPE(OrdsBlockTreeTermsReader), "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_OrdsBlockTreeTermsReader_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, OrdsBlockTreeTermsReader::initializeClass, 1)))
              return NULL;
            return t_OrdsBlockTreeTermsReader::wrap_Object(OrdsBlockTreeTermsReader(((t_OrdsBlockTreeTermsReader *) arg)->object.this$));
          }
          static PyObject *t_OrdsBlockTreeTermsReader_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, OrdsBlockTreeTermsReader::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_OrdsBlockTreeTermsReader_init_(t_OrdsBlockTreeTermsReader *self, PyObject *args, PyObject *kwds)
          {
            ::org::apache::lucene::codecs::PostingsReaderBase a0((jobject) NULL);
            ::org::apache::lucene::index::SegmentReadState a1((jobject) NULL);
            OrdsBlockTreeTermsReader object((jobject) NULL);

            if (!parseArgs(args, "kk", ::org::apache::lucene::codecs::PostingsReaderBase::initializeClass, ::org::apache::lucene::index::SegmentReadState::initializeClass, &a0, &a1))
            {
              INT_CALL(object = OrdsBlockTreeTermsReader(a0, a1));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_OrdsBlockTreeTermsReader_checkIntegrity(t_OrdsBlockTreeTermsReader *self, PyObject *args)
          {

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(self->object.checkIntegrity());
              Py_RETURN_NONE;
            }

            return callSuper(PY_TYPE(OrdsBlockTreeTermsReader), (PyObject *) self, "checkIntegrity", args, 2);
          }

          static PyObject *t_OrdsBlockTreeTermsReader_close(t_OrdsBlockTreeTermsReader *self, PyObject *args)
          {

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(self->object.close());
              Py_RETURN_NONE;
            }

            return callSuper(PY_TYPE(OrdsBlockTreeTermsReader), (PyObject *) self, "close", args, 2);
          }

          static PyObject *t_OrdsBlockTreeTermsReader_getChildResources(t_OrdsBlockTreeTermsReader *self, PyObject *args)
          {
            ::java::util::Collection result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.getChildResources());
              return ::java::util::t_Collection::wrap_Object(result, ::org::apache::lucene::util::PY_TYPE(Accountable));
            }

            return callSuper(PY_TYPE(OrdsBlockTreeTermsReader), (PyObject *) self, "getChildResources", args, 2);
          }

          static PyObject *t_OrdsBlockTreeTermsReader_iterator(t_OrdsBlockTreeTermsReader *self, PyObject *args)
          {
            ::java::util::Iterator result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.iterator());
              return ::java::util::t_Iterator::wrap_Object(result, ::java::lang::PY_TYPE(String));
            }

            return callSuper(PY_TYPE(OrdsBlockTreeTermsReader), (PyObject *) self, "iterator", args, 2);
          }

          static PyObject *t_OrdsBlockTreeTermsReader_ramBytesUsed(t_OrdsBlockTreeTermsReader *self, PyObject *args)
          {
            jlong result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.ramBytesUsed());
              return PyLong_FromLongLong((PY_LONG_LONG) result);
            }

            return callSuper(PY_TYPE(OrdsBlockTreeTermsReader), (PyObject *) self, "ramBytesUsed", args, 2);
          }

          static PyObject *t_OrdsBlockTreeTermsReader_size(t_OrdsBlockTreeTermsReader *self, PyObject *args)
          {
            jint result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.size());
              return PyLong_FromLong((long) result);
            }

            return callSuper(PY_TYPE(OrdsBlockTreeTermsReader), (PyObject *) self, "size", args, 2);
          }

          static PyObject *t_OrdsBlockTreeTermsReader_terms(t_OrdsBlockTreeTermsReader *self, PyObject *args)
          {
            ::java::lang::String a0((jobject) NULL);
            ::org::apache::lucene::index::Terms result((jobject) NULL);

            if (!parseArgs(args, "s", &a0))
            {
              OBJ_CALL(result = self->object.terms(a0));
              return ::org::apache::lucene::index::t_Terms::wrap_Object(result);
            }

            return callSuper(PY_TYPE(OrdsBlockTreeTermsReader), (PyObject *) self, "terms", args, 2);
          }

          static PyObject *t_OrdsBlockTreeTermsReader_toString(t_OrdsBlockTreeTermsReader *self, PyObject *args)
          {
            ::java::lang::String result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.toString());
              return j2p(result);
            }

            return callSuper(PY_TYPE(OrdsBlockTreeTermsReader), (PyObject *) self, "toString", args, 2);
          }

          static PyObject *t_OrdsBlockTreeTermsReader_get__childResources(t_OrdsBlockTreeTermsReader *self, void *data)
          {
            ::java::util::Collection value((jobject) NULL);
            OBJ_CALL(value = self->object.getChildResources());
            return ::java::util::t_Collection::wrap_Object(value);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/MultiTermQuery.h"
#include "org/apache/lucene/index/IndexReader.h"
#include "org/apache/lucene/index/Terms.h"
#include "java/lang/Class.h"
#include "java/lang/Object.h"
#include "java/lang/String.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/search/MultiTermQuery$RewriteMethod.h"
#include "org/apache/lucene/index/TermsEnum.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {

        ::java::lang::Class *MultiTermQuery::class$ = NULL;
        jmethodID *MultiTermQuery::mids$ = NULL;
        bool MultiTermQuery::live$ = false;
        ::org::apache::lucene::search::MultiTermQuery$RewriteMethod *MultiTermQuery::CONSTANT_SCORE_BOOLEAN_REWRITE = NULL;
        ::org::apache::lucene::search::MultiTermQuery$RewriteMethod *MultiTermQuery::CONSTANT_SCORE_REWRITE = NULL;
        ::org::apache::lucene::search::MultiTermQuery$RewriteMethod *MultiTermQuery::SCORING_BOOLEAN_REWRITE = NULL;

        jclass MultiTermQuery::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/search/MultiTermQuery");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_9fd2eb66a64e6f0f] = env->getMethodID(cls, "<init>", "(Ljava/lang/String;)V");
            mids$[mid_equals_8b72f2dcdde6fd1d] = env->getMethodID(cls, "equals", "(Ljava/lang/Object;)Z");
            mids$[mid_getField_db9b55ba01e03e4b] = env->getMethodID(cls, "getField", "()Ljava/lang/String;");
            mids$[mid_getRewriteMethod_aed18a8b23332eb7] = env->getMethodID(cls, "getRewriteMethod", "()Lorg/apache/lucene/search/MultiTermQuery$RewriteMethod;");
            mids$[mid_getTermsEnum_eeaa7baef2944dcc] = env->getMethodID(cls, "getTermsEnum", "(Lorg/apache/lucene/index/Terms;)Lorg/apache/lucene/index/TermsEnum;");
            mids$[mid_hashCode_9972fcc56b44e79d] = env->getMethodID(cls, "hashCode", "()I");
            mids$[mid_rewrite_bb52f19a8254555c] = env->getMethodID(cls, "rewrite", "(Lorg/apache/lucene/index/IndexReader;)Lorg/apache/lucene/search/Query;");
            mids$[mid_setRewriteMethod_4bd3a81cb6936220] = env->getMethodID(cls, "setRewriteMethod", "(Lorg/apache/lucene/search/MultiTermQuery$RewriteMethod;)V");
            mids$[mid_getTermsEnum_e75dd6286a51776d] = env->getMethodID(cls, "getTermsEnum", "(Lorg/apache/lucene/index/Terms;Lorg/apache/lucene/util/AttributeSource;)Lorg/apache/lucene/index/TermsEnum;");

            class$ = new ::java::lang::Class(cls);
            cls = (jclass) class$->this$;

            CONSTANT_SCORE_BOOLEAN_REWRITE = new ::org::apache::lucene::search::MultiTermQuery$RewriteMethod(env->getStaticObjectField(cls, "CONSTANT_SCORE_BOOLEAN_REWRITE", "Lorg/apache/lucene/search/MultiTermQuery$RewriteMethod;"));
            CONSTANT_SCORE_REWRITE = new ::org::apache::lucene::search::MultiTermQuery$RewriteMethod(env->getStaticObjectField(cls, "CONSTANT_SCORE_REWRITE", "Lorg/apache/lucene/search/MultiTermQuery$RewriteMethod;"));
            SCORING_BOOLEAN_REWRITE = new ::org::apache::lucene::search::MultiTermQuery$RewriteMethod(env->getStaticObjectField(cls, "SCORING_BOOLEAN_REWRITE", "Lorg/apache/lucene/search/MultiTermQuery$RewriteMethod;"));
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        MultiTermQuery::MultiTermQuery(const ::java::lang::String & a0) : ::org::apache::lucene::search::Query(env->newObject(initializeClass, &mids$, mid_init$_9fd2eb66a64e6f0f, a0.this$)) {}

        jboolean MultiTermQuery::equals(const ::java::lang::Object & a0) const
        {
          return env->callBooleanMethod(this$, mids$[mid_equals_8b72f2dcdde6fd1d], a0.this$);
        }

        ::java::lang::String MultiTermQuery::getField() const
        {
          return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_getField_db9b55ba01e03e4b]));
        }

        ::org::apache::lucene::search::MultiTermQuery$RewriteMethod MultiTermQuery::getRewriteMethod() const
        {
          return ::org::apache::lucene::search::MultiTermQuery$RewriteMethod(env->callObjectMethod(this$, mids$[mid_getRewriteMethod_aed18a8b23332eb7]));
        }

        ::org::apache::lucene::index::TermsEnum MultiTermQuery::getTermsEnum(const ::org::apache::lucene::index::Terms & a0) const
        {
          return ::org::apache::lucene::index::TermsEnum(env->callObjectMethod(this$, mids$[mid_getTermsEnum_eeaa7baef2944dcc], a0.this$));
        }

        jint MultiTermQuery::hashCode() const
        {
          return env->callIntMethod(this$, mids$[mid_hashCode_9972fcc56b44e79d]);
        }

        ::org::apache::lucene::search::Query MultiTermQuery::rewrite(const ::org::apache::lucene::index::IndexReader & a0) const
        {
          return ::org::apache::lucene::search::Query(env->callObjectMethod(this$, mids$[mid_rewrite_bb52f19a8254555c], a0.this$));
        }

        void MultiTermQuery::setRewriteMethod(const ::org::apache::lucene::search::MultiTermQuery$RewriteMethod & a0) const
        {
          env->callVoidMethod(this$, mids$[mid_setRewriteMethod_4bd3a81cb6936220], a0.this$);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"
#include "org/apache/lucene/search/MultiTermQuery$TopTermsBoostOnlyBooleanQueryRewrite.h"
#include "org/apache/lucene/search/MultiTermQuery$TopTermsBlendedFreqScoringRewrite.h"
#include "org/apache/lucene/search/MultiTermQuery$TopTermsScoringBooleanQueryRewrite.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        static PyObject *t_MultiTermQuery_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_MultiTermQuery_instance_(PyTypeObject *type, PyObject *arg);
        static int t_MultiTermQuery_init_(t_MultiTermQuery *self, PyObject *args, PyObject *kwds);
        static PyObject *t_MultiTermQuery_equals(t_MultiTermQuery *self, PyObject *args);
        static PyObject *t_MultiTermQuery_getField(t_MultiTermQuery *self);
        static PyObject *t_MultiTermQuery_getRewriteMethod(t_MultiTermQuery *self);
        static PyObject *t_MultiTermQuery_getTermsEnum(t_MultiTermQuery *self, PyObject *arg);
        static PyObject *t_MultiTermQuery_hashCode(t_MultiTermQuery *self, PyObject *args);
        static PyObject *t_MultiTermQuery_rewrite(t_MultiTermQuery *self, PyObject *args);
        static PyObject *t_MultiTermQuery_setRewriteMethod(t_MultiTermQuery *self, PyObject *arg);
        static PyObject *t_MultiTermQuery_get__field(t_MultiTermQuery *self, void *data);
        static PyObject *t_MultiTermQuery_get__rewriteMethod(t_MultiTermQuery *self, void *data);
        static int t_MultiTermQuery_set__rewriteMethod(t_MultiTermQuery *self, PyObject *arg, void *data);
        static PyGetSetDef t_MultiTermQuery__fields_[] = {
          DECLARE_GET_FIELD(t_MultiTermQuery, field),
          DECLARE_GETSET_FIELD(t_MultiTermQuery, rewriteMethod),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_MultiTermQuery__methods_[] = {
          DECLARE_METHOD(t_MultiTermQuery, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_MultiTermQuery, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_MultiTermQuery, equals, METH_VARARGS),
          DECLARE_METHOD(t_MultiTermQuery, getField, METH_NOARGS),
          DECLARE_METHOD(t_MultiTermQuery, getRewriteMethod, METH_NOARGS),
          DECLARE_METHOD(t_MultiTermQuery, getTermsEnum, METH_O),
          DECLARE_METHOD(t_MultiTermQuery, hashCode, METH_VARARGS),
          DECLARE_METHOD(t_MultiTermQuery, rewrite, METH_VARARGS),
          DECLARE_METHOD(t_MultiTermQuery, setRewriteMethod, METH_O),
          { NULL, NULL, 0, NULL }
        };

        static PyType_Slot PY_TYPE_SLOTS(MultiTermQuery)[] = {
          { Py_tp_methods, t_MultiTermQuery__methods_ },
          { Py_tp_init, (void *) t_MultiTermQuery_init_ },
          { Py_tp_getset, t_MultiTermQuery__fields_ },
          { 0, NULL }
        };

        static PyType_Def *PY_TYPE_BASES(MultiTermQuery)[] = {
          &PY_TYPE_DEF(::org::apache::lucene::search::Query),
          NULL
        };

        DEFINE_TYPE(MultiTermQuery, t_MultiTermQuery, MultiTermQuery);

        void t_MultiTermQuery::install(PyObject *module)
        {
          installType(&PY_TYPE(MultiTermQuery), &PY_TYPE_DEF(MultiTermQuery), module, "MultiTermQuery", 0);
          PyObject_SetAttrString((PyObject *) PY_TYPE(MultiTermQuery), "TopTermsBoostOnlyBooleanQueryRewrite", make_descriptor(&PY_TYPE_DEF(MultiTermQuery$TopTermsBoostOnlyBooleanQueryRewrite)));
          PyObject_SetAttrString((PyObject *) PY_TYPE(MultiTermQuery), "TopTermsBlendedFreqScoringRewrite", make_descriptor(&PY_TYPE_DEF(MultiTermQuery$TopTermsBlendedFreqScoringRewrite)));
          PyObject_SetAttrString((PyObject *) PY_TYPE(MultiTermQuery), "TopTermsScoringBooleanQueryRewrite", make_descriptor(&PY_TYPE_DEF(MultiTermQuery$TopTermsScoringBooleanQueryRewrite)));
          PyObject_SetAttrString((PyObject *) PY_TYPE(MultiTermQuery), "RewriteMethod", make_descriptor(&PY_TYPE_DEF(MultiTermQuery$RewriteMethod)));
        }

        void t_MultiTermQuery::initialize(PyObject *module)
        {
          PyObject_SetAttrString((PyObject *) PY_TYPE(MultiTermQuery), "class_", make_descriptor(MultiTermQuery::initializeClass, 1));
          PyObject_SetAttrString((PyObject *) PY_TYPE(MultiTermQuery), "wrapfn_", make_descriptor(t_MultiTermQuery::wrap_jobject));
          PyObject_SetAttrString((PyObject *) PY_TYPE(MultiTermQuery), "boxfn_", make_descriptor(boxObject));
          env->getClass(MultiTermQuery::initializeClass);
          PyObject_SetAttrString((PyObject *) PY_TYPE(MultiTermQuery), "CONSTANT_SCORE_BOOLEAN_REWRITE", make_descriptor(::org::apache::lucene::search::t_MultiTermQuery$RewriteMethod::wrap_Object(*MultiTermQuery::CONSTANT_SCORE_BOOLEAN_REWRITE)));
          PyObject_SetAttrString((PyObject *) PY_TYPE(MultiTermQuery), "CONSTANT_SCORE_REWRITE", make_descriptor(::org::apache::lucene::search::t_MultiTermQuery$RewriteMethod::wrap_Object(*MultiTermQuery::CONSTANT_SCORE_REWRITE)));
          PyObject_SetAttrString((PyObject *) PY_TYPE(MultiTermQuery), "SCORING_BOOLEAN_REWRITE", make_descriptor(::org::apache::lucene::search::t_MultiTermQuery$RewriteMethod::wrap_Object(*MultiTermQuery::SCORING_BOOLEAN_REWRITE)));
        }

        static PyObject *t_MultiTermQuery_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, MultiTermQuery::initializeClass, 1)))
            return NULL;
          return t_MultiTermQuery::wrap_Object(MultiTermQuery(((t_MultiTermQuery *) arg)->object.this$));
        }
        static PyObject *t_MultiTermQuery_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, MultiTermQuery::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_MultiTermQuery_init_(t_MultiTermQuery *self, PyObject *args, PyObject *kwds)
        {
          ::java::lang::String a0((jobject) NULL);
          MultiTermQuery object((jobject) NULL);

          if (!parseArgs(args, "s", &a0))
          {
            INT_CALL(object = MultiTermQuery(a0));
            self->object = object;
          }
          else
          {
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }

        static PyObject *t_MultiTermQuery_equals(t_MultiTermQuery *self, PyObject *args)
        {
          ::java::lang::Object a0((jobject) NULL);
          jboolean result;

          if (!parseArgs(args, "o", &a0))
          {
            OBJ_CALL(result = self->object.equals(a0));
            Py_RETURN_BOOL(result);
          }

          return callSuper(PY_TYPE(MultiTermQuery), (PyObject *) self, "equals", args, 2);
        }

        static PyObject *t_MultiTermQuery_getField(t_MultiTermQuery *self)
        {
          ::java::lang::String result((jobject) NULL);
          OBJ_CALL(result = self->object.getField());
          return j2p(result);
        }

        static PyObject *t_MultiTermQuery_getRewriteMethod(t_MultiTermQuery *self)
        {
          ::org::apache::lucene::search::MultiTermQuery$RewriteMethod result((jobject) NULL);
          OBJ_CALL(result = self->object.getRewriteMethod());
          return ::org::apache::lucene::search::t_MultiTermQuery$RewriteMethod::wrap_Object(result);
        }

        static PyObject *t_MultiTermQuery_getTermsEnum(t_MultiTermQuery *self, PyObject *arg)
        {
          ::org::apache::lucene::index::Terms a0((jobject) NULL);
          ::org::apache::lucene::index::TermsEnum result((jobject) NULL);

          if (!parseArg(arg, "k", ::org::apache::lucene::index::Terms::initializeClass, &a0))
          {
            OBJ_CALL(result = self->object.getTermsEnum(a0));
            return ::org::apache::lucene::index::t_TermsEnum::wrap_Object(result);
          }

          PyErr_SetArgsError((PyObject *) self, "getTermsEnum", arg);
          return NULL;
        }

        static PyObject *t_MultiTermQuery_hashCode(t_MultiTermQuery *self, PyObject *args)
        {
          jint result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.hashCode());
            return PyLong_FromLong((long) result);
          }

          return callSuper(PY_TYPE(MultiTermQuery), (PyObject *) self, "hashCode", args, 2);
        }

        static PyObject *t_MultiTermQuery_rewrite(t_MultiTermQuery *self, PyObject *args)
        {
          ::org::apache::lucene::index::IndexReader a0((jobject) NULL);
          ::org::apache::lucene::search::Query result((jobject) NULL);

          if (!parseArgs(args, "k", ::org::apache::lucene::index::IndexReader::initializeClass, &a0))
          {
            OBJ_CALL(result = self->object.rewrite(a0));
            return ::org::apache::lucene::search::t_Query::wrap_Object(result);
          }

          return callSuper(PY_TYPE(MultiTermQuery), (PyObject *) self, "rewrite", args, 2);
        }

        static PyObject *t_MultiTermQuery_setRewriteMethod(t_MultiTermQuery *self, PyObject *arg)
        {
          ::org::apache::lucene::search::MultiTermQuery$RewriteMethod a0((jobject) NULL);

          if (!parseArg(arg, "k", ::org::apache::lucene::search::MultiTermQuery$RewriteMethod::initializeClass, &a0))
          {
            OBJ_CALL(self->object.setRewriteMethod(a0));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "setRewriteMethod", arg);
          return NULL;
        }

        static PyObject *t_MultiTermQuery_get__field(t_MultiTermQuery *self, void *data)
        {
          ::java::lang::String value((jobject) NULL);
          OBJ_CALL(value = self->object.getField());
          return j2p(value);
        }

        static PyObject *t_MultiTermQuery_get__rewriteMethod(t_MultiTermQuery *self, void *data)
        {
          ::org::apache::lucene::search::MultiTermQuery$RewriteMethod value((jobject) NULL);
          OBJ_CALL(value = self->object.getRewriteMethod());
          return ::org::apache::lucene::search::t_MultiTermQuery$RewriteMethod::wrap_Object(value);
        }
        static int t_MultiTermQuery_set__rewriteMethod(t_MultiTermQuery *self, PyObject *arg, void *data)
        {
          {
            ::org::apache::lucene::search::MultiTermQuery$RewriteMethod value((jobject) NULL);
            if (!parseArg(arg, "k", ::org::apache::lucene::search::MultiTermQuery$RewriteMethod::initializeClass, &value))
            {
              INT_CALL(self->object.setRewriteMethod(value));
              return 0;
            }
          }
          PyErr_SetArgsError((PyObject *) self, "rewriteMethod", arg);
          return -1;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/sv/SwedishLightStemFilterFactory.h"
#include "java/util/Map.h"
#include "java/lang/String.h"
#include "org/apache/lucene/analysis/TokenStream.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace sv {

          ::java::lang::Class *SwedishLightStemFilterFactory::class$ = NULL;
          jmethodID *SwedishLightStemFilterFactory::mids$ = NULL;
          bool SwedishLightStemFilterFactory::live$ = false;
          ::java::lang::String *SwedishLightStemFilterFactory::NAME = NULL;

          jclass SwedishLightStemFilterFactory::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/sv/SwedishLightStemFilterFactory");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_408bd889ee3beae5] = env->getMethodID(cls, "<init>", "(Ljava/util/Map;)V");
              mids$[mid_create_6de1e28d9d10cd9e] = env->getMethodID(cls, "create", "(Lorg/apache/lucene/analysis/TokenStream;)Lorg/apache/lucene/analysis/TokenStream;");

              class$ = new ::java::lang::Class(cls);
              cls = (jclass) class$->this$;

              NAME = new ::java::lang::String(env->getStaticObjectField(cls, "NAME", "Ljava/lang/String;"));
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          SwedishLightStemFilterFactory::SwedishLightStemFilterFactory(const ::java::util::Map & a0) : ::org::apache::lucene::analysis::util::TokenFilterFactory(env->newObject(initializeClass, &mids$, mid_init$_408bd889ee3beae5, a0.this$)) {}

          ::org::apache::lucene::analysis::TokenStream SwedishLightStemFilterFactory::create(const ::org::apache::lucene::analysis::TokenStream & a0) const
          {
            return ::org::apache::lucene::analysis::TokenStream(env->callObjectMethod(this$, mids$[mid_create_6de1e28d9d10cd9e], a0.this$));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace sv {
          static PyObject *t_SwedishLightStemFilterFactory_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_SwedishLightStemFilterFactory_instance_(PyTypeObject *type, PyObject *arg);
          static int t_SwedishLightStemFilterFactory_init_(t_SwedishLightStemFilterFactory *self, PyObject *args, PyObject *kwds);
          static PyObject *t_SwedishLightStemFilterFactory_create(t_SwedishLightStemFilterFactory *self, PyObject *args);

          static PyMethodDef t_SwedishLightStemFilterFactory__methods_[] = {
            DECLARE_METHOD(t_SwedishLightStemFilterFactory, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_SwedishLightStemFilterFactory, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_SwedishLightStemFilterFactory, create, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          static PyType_Slot PY_TYPE_SLOTS(SwedishLightStemFilterFactory)[] = {
            { Py_tp_methods, t_SwedishLightStemFilterFactory__methods_ },
            { Py_tp_init, (void *) t_SwedishLightStemFilterFactory_init_ },
            { 0, NULL }
          };

          static PyType_Def *PY_TYPE_BASES(SwedishLightStemFilterFactory)[] = {
            &PY_TYPE_DEF(::org::apache::lucene::analysis::util::TokenFilterFactory),
            NULL
          };

          DEFINE_TYPE(SwedishLightStemFilterFactory, t_SwedishLightStemFilterFactory, SwedishLightStemFilterFactory);

          void t_SwedishLightStemFilterFactory::install(PyObject *module)
          {
            installType(&PY_TYPE(SwedishLightStemFilterFactory), &PY_TYPE_DEF(SwedishLightStemFilterFactory), module, "SwedishLightStemFilterFactory", 0);
          }

          void t_SwedishLightStemFilterFactory::initialize(PyObject *module)
          {
            PyObject_SetAttrString((PyObject *) PY_TYPE(SwedishLightStemFilterFactory), "class_", make_descriptor(SwedishLightStemFilterFactory::initializeClass, 1));
            PyObject_SetAttrString((PyObject *) PY_TYPE(SwedishLightStemFilterFactory), "wrapfn_", make_descriptor(t_SwedishLightStemFilterFactory::wrap_jobject));
            PyObject_SetAttrString((PyObject *) PY_TYPE(SwedishLightStemFilterFactory), "boxfn_", make_descriptor(boxObject));
            env->getClass(SwedishLightStemFilterFactory::initializeClass);
            PyObject_SetAttrString((PyObject *) PY_TYPE(SwedishLightStemFilterFactory), "NAME", make_descriptor(j2p(*SwedishLightStemFilterFactory::NAME)));
          }

          static PyObject *t_SwedishLightStemFilterFactory_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, SwedishLightStemFilterFactory::initializeClass, 1)))
              return NULL;
            return t_SwedishLightStemFilterFactory::wrap_Object(SwedishLightStemFilterFactory(((t_SwedishLightStemFilterFactory *) arg)->object.this$));
          }
          static PyObject *t_SwedishLightStemFilterFactory_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, SwedishLightStemFilterFactory::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_SwedishLightStemFilterFactory_init_(t_SwedishLightStemFilterFactory *self, PyObject *args, PyObject *kwds)
          {
            ::java::util::Map a0((jobject) NULL);
            PyTypeObject **p0;
            SwedishLightStemFilterFactory object((jobject) NULL);

            if (!parseArgs(args, "K", ::java::util::Map::initializeClass, &a0, &p0, ::java::util::t_Map::parameters_))
            {
              INT_CALL(object = SwedishLightStemFilterFactory(a0));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_SwedishLightStemFilterFactory_create(t_SwedishLightStemFilterFactory *self, PyObject *args)
          {
            ::org::apache::lucene::analysis::TokenStream a0((jobject) NULL);
            ::org::apache::lucene::analysis::TokenStream result((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::analysis::TokenStream::initializeClass, &a0))
            {
              OBJ_CALL(result = self->object.create(a0));
              return ::org::apache::lucene::analysis::t_TokenStream::wrap_Object(result);
            }

            return callSuper(PY_TYPE(SwedishLightStemFilterFactory), (PyObject *) self, "create", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/expressions/js/JavascriptParser$BwshiftContext.h"
#include "java/lang/Class.h"
#include "java/lang/Object.h"
#include "java/util/List.h"
#include "org/antlr/v4/runtime/Token.h"
#include "org/antlr/v4/runtime/atn/ParserATNSimulator.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace expressions {
        namespace js {

          ::java::lang::Class *JavascriptParser$BwshiftContext::class$ = NULL;
          jmethodID *JavascriptParser$BwshiftContext::mids$ = NULL;
          bool JavascriptParser$BwshiftContext::live$ = false;

          jclass JavascriptParser$BwshiftContext::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/expressions/js/JavascriptParser$BwshiftContext");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_5b630188893587b5] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/expressions/js/JavascriptParser$ExpressionContext;)V");
              mids$[mid_expression_49ec78390f08338a] = env->getMethodID(cls, "expression", "()Ljava/util/List;");
              mids$[mid_expression_a4fb3fdc55d1c64a] = env->getMethodID(cls, "expression", "(I)Lorg/apache/lucene/expressions/js/JavascriptParser$ExpressionContext;");

              class$ = new ::java::lang::Class(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          JavascriptParser$BwshiftContext::JavascriptParser$BwshiftContext(const ::org::apache::lucene::expressions::js::JavascriptParser$ExpressionContext & a0) : ::org::apache::lucene::expressions::js::JavascriptParser$ExpressionContext(env->newObject(initializeClass, &mids$, mid_init$_5b630188893587b5, a0.this$)) {}

          ::java::util::List JavascriptParser$BwshiftContext::expression() const
          {
            return ::java::util::List(env->callObjectMethod(this$, mids$[mid_expression_49ec78390f08338a]));
          }

          ::org::apache::lucene::expressions::js::JavascriptParser$ExpressionContext JavascriptParser$BwshiftContext::expression(jint a0) const
          {
            return ::org::apache::lucene::expressions::js::JavascriptParser$ExpressionContext(env->callObjectMethod(this$, mids$[mid_expression_a4fb3fdc55d1c64a], a0));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace expressions {
        namespace js {
          static PyObject *t_JavascriptParser$BwshiftContext_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_JavascriptParser$BwshiftContext_instance_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_JavascriptParser$BwshiftContext_of_(t_JavascriptParser$BwshiftContext *self, PyObject *args);
          static int t_JavascriptParser$BwshiftContext_init_(t_JavascriptParser$BwshiftContext *self, PyObject *args, PyObject *kwds);
          static PyObject *t_JavascriptParser$BwshiftContext_expression(t_JavascriptParser$BwshiftContext *self, PyObject *args);
          static PyObject *t_JavascriptParser$BwshiftContext_get__parameters_(t_JavascriptParser$BwshiftContext *self, void *data);
          static PyGetSetDef t_JavascriptParser$BwshiftContext__fields_[] = {
            DECLARE_GET_FIELD(t_JavascriptParser$BwshiftContext, parameters_),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_JavascriptParser$BwshiftContext__methods_[] = {
            DECLARE_METHOD(t_JavascriptParser$BwshiftContext, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_JavascriptParser$BwshiftContext, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_JavascriptParser$BwshiftContext, of_, METH_VARARGS),
            DECLARE_METHOD(t_JavascriptParser$BwshiftContext, expression, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          static PyType_Slot PY_TYPE_SLOTS(JavascriptParser$BwshiftContext)[] = {
            { Py_tp_methods, t_JavascriptParser$BwshiftContext__methods_ },
            { Py_tp_init, (void *) t_JavascriptParser$BwshiftContext_init_ },
            { Py_tp_getset, t_JavascriptParser$BwshiftContext__fields_ },
            { 0, NULL }
          };

          static PyType_Def *PY_TYPE_BASES(JavascriptParser$BwshiftContext)[] = {
            &PY_TYPE_DEF(::org::apache::lucene::expressions::js::JavascriptParser$ExpressionContext),
            NULL
          };

          DEFINE_TYPE(JavascriptParser$BwshiftContext, t_JavascriptParser$BwshiftContext, JavascriptParser$BwshiftContext);
          PyObject *t_JavascriptParser$BwshiftContext::wrap_Object(const JavascriptParser$BwshiftContext& object, PyTypeObject *p0, PyTypeObject *p1)
          {
            PyObject *obj = t_JavascriptParser$BwshiftContext::wrap_Object(object);
            if (obj != NULL && obj != Py_None)
            {
              t_JavascriptParser$BwshiftContext *self = (t_JavascriptParser$BwshiftContext *) obj;
              self->parameters[0] = p0;
              self->parameters[1] = p1;
            }
            return obj;
          }

          PyObject *t_JavascriptParser$BwshiftContext::wrap_jobject(const jobject& object, PyTypeObject *p0, PyTypeObject *p1)
          {
            PyObject *obj = t_JavascriptParser$BwshiftContext::wrap_jobject(object);
            if (obj != NULL && obj != Py_None)
            {
              t_JavascriptParser$BwshiftContext *self = (t_JavascriptParser$BwshiftContext *) obj;
              self->parameters[0] = p0;
              self->parameters[1] = p1;
            }
            return obj;
          }

          void t_JavascriptParser$BwshiftContext::install(PyObject *module)
          {
            installType(&PY_TYPE(JavascriptParser$BwshiftContext), &PY_TYPE_DEF(JavascriptParser$BwshiftContext), module, "JavascriptParser$BwshiftContext", 0);
          }

          void t_JavascriptParser$BwshiftContext::initialize(PyObject *module)
          {
            PyObject_SetAttrString((PyObject *) PY_TYPE(JavascriptParser$BwshiftContext), "class_", make_descriptor(JavascriptParser$BwshiftContext::initializeClass, 1));
            PyObject_SetAttrString((PyObject *) PY_TYPE(JavascriptParser$BwshiftContext), "wrapfn_", make_descriptor(t_JavascriptParser$BwshiftContext::wrap_jobject));
            PyObject_SetAttrString((PyObject *) PY_TYPE(JavascriptParser$BwshiftContext), "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_JavascriptParser$BwshiftContext_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, JavascriptParser$BwshiftContext::initializeClass, 1)))
              return NULL;
            return t_JavascriptParser$BwshiftContext::wrap_Object(JavascriptParser$BwshiftContext(((t_JavascriptParser$BwshiftContext *) arg)->object.this$));
          }
          static PyObject *t_JavascriptParser$BwshiftContext_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, JavascriptParser$BwshiftContext::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static PyObject *t_JavascriptParser$BwshiftContext_of_(t_JavascriptParser$BwshiftContext *self, PyObject *args)
          {
            if (!parseArg(args, "T", 2, &(self->parameters)))
              Py_RETURN_SELF;
            return PyErr_SetArgsError((PyObject *) self, "of_", args);
          }

          static int t_JavascriptParser$BwshiftContext_init_(t_JavascriptParser$BwshiftContext *self, PyObject *args, PyObject *kwds)
          {
            ::org::apache::lucene::expressions::js::JavascriptParser$ExpressionContext a0((jobject) NULL);
            PyTypeObject **p0;
            JavascriptParser$BwshiftContext object((jobject) NULL);

            if (!parseArgs(args, "K", ::org::apache::lucene::expressions::js::JavascriptParser$ExpressionContext::initializeClass, &a0, &p0, ::org::apache::lucene::expressions::js::t_JavascriptParser$ExpressionContext::parameters_))
            {
              INT_CALL(object = JavascriptParser$BwshiftContext(a0));
              self->object = object;
              self->parameters[0] = ::org::antlr::v4::runtime::PY_TYPE(Token);
              self->parameters[1] = ::org::antlr::v4::runtime::atn::PY_TYPE(ParserATNSimulator);
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_JavascriptParser$BwshiftContext_expression(t_JavascriptParser$BwshiftContext *self, PyObject *args)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 0:
              {
                ::java::util::List result((jobject) NULL);
                OBJ_CALL(result = self->object.expression());
                return ::java::util::t_List::wrap_Object(result, ::org::apache::lucene::expressions::js::PY_TYPE(JavascriptParser$ExpressionContext));
              }
              break;
             case 1:
              {
                jint a0;
                ::org::apache::lucene::expressions::js::JavascriptParser$ExpressionContext result((jobject) NULL);

                if (!parseArgs(args, "I", &a0))
                {
                  OBJ_CALL(result = self->object.expression(a0));
                  return ::org::apache::lucene::expressions::js::t_JavascriptParser$ExpressionContext::wrap_Object(result);
                }
              }
            }

            PyErr_SetArgsError((PyObject *) self, "expression", args);
            return NULL;
          }
          static PyObject *t_JavascriptParser$BwshiftContext_get__parameters_(t_JavascriptParser$BwshiftContext *self, void *data)
          {
            return typeParameters(self->parameters, sizeof(self->parameters));
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/miscellaneous/ConditionalTokenFilterFactory.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/analysis/TokenStream.h"
#include "org/apache/lucene/analysis/util/ResourceLoader.h"
#include "java/lang/String.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/analysis/util/ResourceLoaderAware.h"
#include "java/util/List.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace miscellaneous {

          ::java::lang::Class *ConditionalTokenFilterFactory::class$ = NULL;
          jmethodID *ConditionalTokenFilterFactory::mids$ = NULL;
          bool ConditionalTokenFilterFactory::live$ = false;
          ::java::lang::String *ConditionalTokenFilterFactory::NAME = NULL;

          jclass ConditionalTokenFilterFactory::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/miscellaneous/ConditionalTokenFilterFactory");

              mids$ = new jmethodID[max_mid];
              mids$[mid_create_6de1e28d9d10cd9e] = env->getMethodID(cls, "create", "(Lorg/apache/lucene/analysis/TokenStream;)Lorg/apache/lucene/analysis/TokenStream;");
              mids$[mid_inform_b4ee53c41a5f629f] = env->getMethodID(cls, "inform", "(Lorg/apache/lucene/analysis/util/ResourceLoader;)V");
              mids$[mid_setInnerFilters_d03990be0130160d] = env->getMethodID(cls, "setInnerFilters", "(Ljava/util/List;)V");
              mids$[mid_doInform_b4ee53c41a5f629f] = env->getMethodID(cls, "doInform", "(Lorg/apache/lucene/analysis/util/ResourceLoader;)V");
              mids$[mid_create_debb7a449ce81286] = env->getMethodID(cls, "create", "(Lorg/apache/lucene/analysis/TokenStream;Ljava/util/function/Function;)Lorg/apache/lucene/analysis/miscellaneous/ConditionalTokenFilter;");

              class$ = new ::java::lang::Class(cls);
              cls = (jclass) class$->this$;

              NAME = new ::java::lang::String(env->getStaticObjectField(cls, "NAME", "Ljava/lang/String;"));
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          ::org::apache::lucene::analysis::TokenStream ConditionalTokenFilterFactory::create(const ::org::apache::lucene::analysis::TokenStream & a0) const
          {
            return ::org::apache::lucene::analysis::TokenStream(env->callObjectMethod(this$, mids$[mid_create_6de1e28d9d10cd9e], a0.this$));
          }

          void ConditionalTokenFilterFactory::inform(const ::org::apache::lucene::analysis::util::ResourceLoader & a0) const
          {
            env->callVoidMethod(this$, mids$[mid_inform_b4ee53c41a5f629f], a0.this$);
          }

          void ConditionalTokenFilterFactory::setInnerFilters(const ::java::util::List & a0) const
          {
            env->callVoidMethod(this$, mids$[mid_setInnerFilters_d03990be0130160d], a0.this$);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace miscellaneous {
          static PyObject *t_ConditionalTokenFilterFactory_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_ConditionalTokenFilterFactory_instance_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_ConditionalTokenFilterFactory_create(t_ConditionalTokenFilterFactory *self, PyObject *args);
          static PyObject *t_ConditionalTokenFilterFactory_inform(t_ConditionalTokenFilterFactory *self, PyObject *arg);
          static PyObject *t_ConditionalTokenFilterFactory_setInnerFilters(t_ConditionalTokenFilterFactory *self, PyObject *arg);
          static int t_ConditionalTokenFilterFactory_set__innerFilters(t_ConditionalTokenFilterFactory *self, PyObject *arg, void *data);
          static PyGetSetDef t_ConditionalTokenFilterFactory__fields_[] = {
            DECLARE_SET_FIELD(t_ConditionalTokenFilterFactory, innerFilters),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_ConditionalTokenFilterFactory__methods_[] = {
            DECLARE_METHOD(t_ConditionalTokenFilterFactory, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_ConditionalTokenFilterFactory, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_ConditionalTokenFilterFactory, create, METH_VARARGS),
            DECLARE_METHOD(t_ConditionalTokenFilterFactory, inform, METH_O),
            DECLARE_METHOD(t_ConditionalTokenFilterFactory, setInnerFilters, METH_O),
            { NULL, NULL, 0, NULL }
          };

          static PyType_Slot PY_TYPE_SLOTS(ConditionalTokenFilterFactory)[] = {
            { Py_tp_methods, t_ConditionalTokenFilterFactory__methods_ },
            { Py_tp_init, (void *) abstract_init },
            { Py_tp_getset, t_ConditionalTokenFilterFactory__fields_ },
            { 0, NULL }
          };

          static PyType_Def *PY_TYPE_BASES(ConditionalTokenFilterFactory)[] = {
            &PY_TYPE_DEF(::org::apache::lucene::analysis::util::TokenFilterFactory),
            NULL
          };

          DEFINE_TYPE(ConditionalTokenFilterFactory, t_ConditionalTokenFilterFactory, ConditionalTokenFilterFactory);

          void t_ConditionalTokenFilterFactory::install(PyObject *module)
          {
            installType(&PY_TYPE(ConditionalTokenFilterFactory), &PY_TYPE_DEF(ConditionalTokenFilterFactory), module, "ConditionalTokenFilterFactory", 0);
          }

          void t_ConditionalTokenFilterFactory::initialize(PyObject *module)
          {
            PyObject_SetAttrString((PyObject *) PY_TYPE(ConditionalTokenFilterFactory), "class_", make_descriptor(ConditionalTokenFilterFactory::initializeClass, 1));
            PyObject_SetAttrString((PyObject *) PY_TYPE(ConditionalTokenFilterFactory), "wrapfn_", make_descriptor(t_ConditionalTokenFilterFactory::wrap_jobject));
            PyObject_SetAttrString((PyObject *) PY_TYPE(ConditionalTokenFilterFactory), "boxfn_", make_descriptor(boxObject));
            env->getClass(ConditionalTokenFilterFactory::initializeClass);
            PyObject_SetAttrString((PyObject *) PY_TYPE(ConditionalTokenFilterFactory), "NAME", make_descriptor(j2p(*ConditionalTokenFilterFactory::NAME)));
          }

          static PyObject *t_ConditionalTokenFilterFactory_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, ConditionalTokenFilterFactory::initializeClass, 1)))
              return NULL;
            return t_ConditionalTokenFilterFactory::wrap_Object(ConditionalTokenFilterFactory(((t_ConditionalTokenFilterFactory *) arg)->object.this$));
          }
          static PyObject *t_ConditionalTokenFilterFactory_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, ConditionalTokenFilterFactory::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static PyObject *t_ConditionalTokenFilterFactory_create(t_ConditionalTokenFilterFactory *self, PyObject *args)
          {
            ::org::apache::lucene::analysis::TokenStream a0((jobject) NULL);
            ::org::apache::lucene::analysis::TokenStream result((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::analysis::TokenStream::initializeClass, &a0))
            {
              OBJ_CALL(result = self->object.create(a0));
              return ::org::apache::lucene::analysis::t_TokenStream::wrap_Object(result);
            }

            return callSuper(PY_TYPE(ConditionalTokenFilterFactory), (PyObject *) self, "create", args, 2);
          }

          static PyObject *t_ConditionalTokenFilterFactory_inform(t_ConditionalTokenFilterFactory *self, PyObject *arg)
          {
            ::org::apache::lucene::analysis::util::ResourceLoader a0((jobject) NULL);

            if (!parseArg(arg, "k", ::org::apache::lucene::analysis::util::ResourceLoader::initializeClass, &a0))
            {
              OBJ_CALL(self->object.inform(a0));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError((PyObject *) self, "inform", arg);
            return NULL;
          }

          static PyObject *t_ConditionalTokenFilterFactory_setInnerFilters(t_ConditionalTokenFilterFactory *self, PyObject *arg)
          {
            ::java::util::List a0((jobject) NULL);
            PyTypeObject **p0;

            if (!parseArg(arg, "K", ::java::util::List::initializeClass, &a0, &p0, ::java::util::t_List::parameters_))
            {
              OBJ_CALL(self->object.setInnerFilters(a0));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError((PyObject *) self, "setInnerFilters", arg);
            return NULL;
          }

          static int t_ConditionalTokenFilterFactory_set__innerFilters(t_ConditionalTokenFilterFactory *self, PyObject *arg, void *data)
          {
            {
              ::java::util::List value((jobject) NULL);
              if (!parseArg(arg, "k", ::java::util::List::initializeClass, &value))
              {
                INT_CALL(self->object.setInnerFilters(value));
                return 0;
              }
            }
            PyErr_SetArgsError((PyObject *) self, "innerFilters", arg);
            return -1;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/ko/KoreanTokenizer.h"
#include "org/apache/lucene/util/AttributeFactory.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/analysis/ko/KoreanTokenizer$DecompoundMode.h"
#include "org/apache/lucene/analysis/ko/dict/UnknownDictionary.h"
#include "org/apache/lucene/analysis/ko/dict/ConnectionCosts.h"
#include "org/apache/lucene/analysis/ko/dict/UserDictionary.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/analysis/ko/dict/TokenInfoDictionary.h"
#include "org/apache/lucene/analysis/ko/GraphvizFormatter.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace ko {

          ::java::lang::Class *KoreanTokenizer::class$ = NULL;
          jmethodID *KoreanTokenizer::mids$ = NULL;
          bool KoreanTokenizer::live$ = false;
          ::org::apache::lucene::analysis::ko::KoreanTokenizer$DecompoundMode *KoreanTokenizer::DEFAULT_DECOMPOUND = NULL;

          jclass KoreanTokenizer::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/ko/KoreanTokenizer");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_f2cc1bce94666404] = env->getMethodID(cls, "<init>", "()V");
              mids$[mid_init$_167c467481a84eb8] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/util/AttributeFactory;Lorg/apache/lucene/analysis/ko/dict/UserDictionary;Lorg/apache/lucene/analysis/ko/KoreanTokenizer$DecompoundMode;Z)V");
              mids$[mid_init$_43a048873eddd3f5] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/util/AttributeFactory;Lorg/apache/lucene/analysis/ko/dict/UserDictionary;Lorg/apache/lucene/analysis/ko/KoreanTokenizer$DecompoundMode;ZZ)V");
              mids$[mid_init$_60c9edb24915e7bf] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/util/AttributeFactory;Lorg/apache/lucene/analysis/ko/dict/TokenInfoDictionary;Lorg/apache/lucene/analysis/ko/dict/UnknownDictionary;Lorg/apache/lucene/analysis/ko/dict/ConnectionCosts;Lorg/apache/lucene/analysis/ko/dict/UserDictionary;Lorg/apache/lucene/analysis/ko/KoreanTokenizer$DecompoundMode;ZZ)V");
              mids$[mid_close_f2cc1bce94666404] = env->getMethodID(cls, "close", "()V");
              mids$[mid_end_f2cc1bce94666404] = env->getMethodID(cls, "end", "()V");
              mids$[mid_incrementToken_8454bd5aa23fd11e] = env->getMethodID(cls, "incrementToken", "()Z");
              mids$[mid_reset_f2cc1bce94666404] = env->getMethodID(cls, "reset", "()V");
              mids$[mid_setGraphvizFormatter_c3064ff64d53289f] = env->getMethodID(cls, "setGraphvizFormatter", "(Lorg/apache/lucene/analysis/ko/GraphvizFormatter;)V");

              class$ = new ::java::lang::Class(cls);
              cls = (jclass) class$->this$;

              DEFAULT_DECOMPOUND = new ::org::apache::lucene::analysis::ko::KoreanTokenizer$DecompoundMode(env->getStaticObjectField(cls, "DEFAULT_DECOMPOUND", "Lorg/apache/lucene/analysis/ko/KoreanTokenizer$DecompoundMode;"));
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          KoreanTokenizer::KoreanTokenizer() : ::org::apache::lucene::analysis::Tokenizer(env->newObject(initializeClass, &mids$, mid_init$_f2cc1bce94666404)) {}

          KoreanTokenizer::KoreanTokenizer(const ::org::apache::lucene::util::AttributeFactory & a0, const ::org::apache::lucene::analysis::ko::dict::UserDictionary & a1, const ::org::apache::lucene::analysis::ko::KoreanTokenizer$DecompoundMode & a2, jboolean a3) : ::org::apache::lucene::analysis::Tokenizer(env->newObject(initializeClass, &mids$, mid_init$_167c467481a84eb8, a0.this$, a1.this$, a2.this$, a3)) {}

          KoreanTokenizer::KoreanTokenizer(const ::org::apache::lucene::util::AttributeFactory & a0, const ::org::apache::lucene::analysis::ko::dict::UserDictionary & a1, const ::org::apache::lucene::analysis::ko::KoreanTokenizer$DecompoundMode & a2, jboolean a3, jboolean a4) : ::org::apache::lucene::analysis::Tokenizer(env->newObject(initializeClass, &mids$, mid_init$_43a048873eddd3f5, a0.this$, a1.this$, a2.this$, a3, a4)) {}

          KoreanTokenizer::KoreanTokenizer(const ::org::apache::lucene::util::AttributeFactory & a0, const ::org::apache::lucene::analysis::ko::dict::TokenInfoDictionary & a1, const ::org::apache::lucene::analysis::ko::dict::UnknownDictionary & a2, const ::org::apache::lucene::analysis::ko::dict::ConnectionCosts & a3, const ::org::apache::lucene::analysis::ko::dict::UserDictionary & a4, const ::org::apache::lucene::analysis::ko::KoreanTokenizer$DecompoundMode & a5, jboolean a6, jboolean a7) : ::org::apache::lucene::analysis::Tokenizer(env->newObject(initializeClass, &mids$, mid_init$_60c9edb24915e7bf, a0.this$, a1.this$, a2.this$, a3.this$, a4.this$, a5.this$, a6, a7)) {}

          void KoreanTokenizer::close() const
          {
            env->callVoidMethod(this$, mids$[mid_close_f2cc1bce94666404]);
          }

          void KoreanTokenizer::end() const
          {
            env->callVoidMethod(this$, mids$[mid_end_f2cc1bce94666404]);
          }

          jboolean KoreanTokenizer::incrementToken() const
          {
            return env->callBooleanMethod(this$, mids$[mid_incrementToken_8454bd5aa23fd11e]);
          }

          void KoreanTokenizer::reset() const
          {
            env->callVoidMethod(this$, mids$[mid_reset_f2cc1bce94666404]);
          }

          void KoreanTokenizer::setGraphvizFormatter(const ::org::apache::lucene::analysis::ko::GraphvizFormatter & a0) const
          {
            env->callVoidMethod(this$, mids$[mid_setGraphvizFormatter_c3064ff64d53289f], a0.this$);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"
#include "org/apache/lucene/analysis/ko/KoreanTokenizer$Type.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace ko {
          static PyObject *t_KoreanTokenizer_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_KoreanTokenizer_instance_(PyTypeObject *type, PyObject *arg);
          static int t_KoreanTokenizer_init_(t_KoreanTokenizer *self, PyObject *args, PyObject *kwds);
          static PyObject *t_KoreanTokenizer_close(t_KoreanTokenizer *self, PyObject *args);
          static PyObject *t_KoreanTokenizer_end(t_KoreanTokenizer *self, PyObject *args);
          static PyObject *t_KoreanTokenizer_incrementToken(t_KoreanTokenizer *self, PyObject *args);
          static PyObject *t_KoreanTokenizer_reset(t_KoreanTokenizer *self, PyObject *args);
          static PyObject *t_KoreanTokenizer_setGraphvizFormatter(t_KoreanTokenizer *self, PyObject *arg);
          static int t_KoreanTokenizer_set__graphvizFormatter(t_KoreanTokenizer *self, PyObject *arg, void *data);
          static PyGetSetDef t_KoreanTokenizer__fields_[] = {
            DECLARE_SET_FIELD(t_KoreanTokenizer, graphvizFormatter),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_KoreanTokenizer__methods_[] = {
            DECLARE_METHOD(t_KoreanTokenizer, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_KoreanTokenizer, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_KoreanTokenizer, close, METH_VARARGS),
            DECLARE_METHOD(t_KoreanTokenizer, end, METH_VARARGS),
            DECLARE_METHOD(t_KoreanTokenizer, incrementToken, METH_VARARGS),
            DECLARE_METHOD(t_KoreanTokenizer, reset, METH_VARARGS),
            DECLARE_METHOD(t_KoreanTokenizer, setGraphvizFormatter, METH_O),
            { NULL, NULL, 0, NULL }
          };

          static PyType_Slot PY_TYPE_SLOTS(KoreanTokenizer)[] = {
            { Py_tp_methods, t_KoreanTokenizer__methods_ },
            { Py_tp_init, (void *) t_KoreanTokenizer_init_ },
            { Py_tp_getset, t_KoreanTokenizer__fields_ },
            { 0, NULL }
          };

          static PyType_Def *PY_TYPE_BASES(KoreanTokenizer)[] = {
            &PY_TYPE_DEF(::org::apache::lucene::analysis::Tokenizer),
            NULL
          };

          DEFINE_TYPE(KoreanTokenizer, t_KoreanTokenizer, KoreanTokenizer);

          void t_KoreanTokenizer::install(PyObject *module)
          {
            installType(&PY_TYPE(KoreanTokenizer), &PY_TYPE_DEF(KoreanTokenizer), module, "KoreanTokenizer", 0);
            PyObject_SetAttrString((PyObject *) PY_TYPE(KoreanTokenizer), "DecompoundMode", make_descriptor(&PY_TYPE_DEF(KoreanTokenizer$DecompoundMode)));
            PyObject_SetAttrString((PyObject *) PY_TYPE(KoreanTokenizer), "Type", make_descriptor(&PY_TYPE_DEF(KoreanTokenizer$Type)));
          }

          void t_KoreanTokenizer::initialize(PyObject *module)
          {
            PyObject_SetAttrString((PyObject *) PY_TYPE(KoreanTokenizer), "class_", make_descriptor(KoreanTokenizer::initializeClass, 1));
            PyObject_SetAttrString((PyObject *) PY_TYPE(KoreanTokenizer), "wrapfn_", make_descriptor(t_KoreanTokenizer::wrap_jobject));
            PyObject_SetAttrString((PyObject *) PY_TYPE(KoreanTokenizer), "boxfn_", make_descriptor(boxObject));
            env->getClass(KoreanTokenizer::initializeClass);
            PyObject_SetAttrString((PyObject *) PY_TYPE(KoreanTokenizer), "DEFAULT_DECOMPOUND", make_descriptor(::org::apache::lucene::analysis::ko::t_KoreanTokenizer$DecompoundMode::wrap_Object(*KoreanTokenizer::DEFAULT_DECOMPOUND)));
          }

          static PyObject *t_KoreanTokenizer_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, KoreanTokenizer::initializeClass, 1)))
              return NULL;
            return t_KoreanTokenizer::wrap_Object(KoreanTokenizer(((t_KoreanTokenizer *) arg)->object.this$));
          }
          static PyObject *t_KoreanTokenizer_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, KoreanTokenizer::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_KoreanTokenizer_init_(t_KoreanTokenizer *self, PyObject *args, PyObject *kwds)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 0:
              {
                KoreanTokenizer object((jobject) NULL);

                INT_CALL(object = KoreanTokenizer());
                self->object = object;
                break;
              }
             case 4:
              {
                ::org::apache::lucene::util::AttributeFactory a0((jobject) NULL);
                ::org::apache::lucene::analysis::ko::dict::UserDictionary a1((jobject) NULL);
                ::org::apache::lucene::analysis::ko::KoreanTokenizer$DecompoundMode a2((jobject) NULL);
                PyTypeObject **p2;
                jboolean a3;
                KoreanTokenizer object((jobject) NULL);

                if (!parseArgs(args, "kkKZ", ::org::apache::lucene::util::AttributeFactory::initializeClass, ::org::apache::lucene::analysis::ko::dict::UserDictionary::initializeClass, ::org::apache::lucene::analysis::ko::KoreanTokenizer$DecompoundMode::initializeClass, &a0, &a1, &a2, &p2, ::org::apache::lucene::analysis::ko::t_KoreanTokenizer$DecompoundMode::parameters_, &a3))
                {
                  INT_CALL(object = KoreanTokenizer(a0, a1, a2, a3));
                  self->object = object;
                  break;
                }
              }
              goto err;
             case 5:
              {
                ::org::apache::lucene::util::AttributeFactory a0((jobject) NULL);
                ::org::apache::lucene::analysis::ko::dict::UserDictionary a1((jobject) NULL);
                ::org::apache::lucene::analysis::ko::KoreanTokenizer$DecompoundMode a2((jobject) NULL);
                PyTypeObject **p2;
                jboolean a3;
                jboolean a4;
                KoreanTokenizer object((jobject) NULL);

                if (!parseArgs(args, "kkKZZ", ::org::apache::lucene::util::AttributeFactory::initializeClass, ::org::apache::lucene::analysis::ko::dict::UserDictionary::initializeClass, ::org::apache::lucene::analysis::ko::KoreanTokenizer$DecompoundMode::initializeClass, &a0, &a1, &a2, &p2, ::org::apache::lucene::analysis::ko::t_KoreanTokenizer$DecompoundMode::parameters_, &a3, &a4))
                {
                  INT_CALL(object = KoreanTokenizer(a0, a1, a2, a3, a4));
                  self->object = object;
                  break;
                }
              }
              goto err;
             case 8:
              {
                ::org::apache::lucene::util::AttributeFactory a0((jobject) NULL);
                ::org::apache::lucene::analysis::ko::dict::TokenInfoDictionary a1((jobject) NULL);
                ::org::apache::lucene::analysis::ko::dict::UnknownDictionary a2((jobject) NULL);
                ::org::apache::lucene::analysis::ko::dict::ConnectionCosts a3((jobject) NULL);
                ::org::apache::lucene::analysis::ko::dict::UserDictionary a4((jobject) NULL);
                ::org::apache::lucene::analysis::ko::KoreanTokenizer$DecompoundMode a5((jobject) NULL);
                PyTypeObject **p5;
                jboolean a6;
                jboolean a7;
                KoreanTokenizer object((jobject) NULL);

                if (!parseArgs(args, "kkkkkKZZ", ::org::apache::lucene::util::AttributeFactory::initializeClass, ::org::apache::lucene::analysis::ko::dict::TokenInfoDictionary::initializeClass, ::org::apache::lucene::analysis::ko::dict::UnknownDictionary::initializeClass, ::org::apache::lucene::analysis::ko::dict::ConnectionCosts::initializeClass, ::org::apache::lucene::analysis::ko::dict::UserDictionary::initializeClass, ::org::apache::lucene::analysis::ko::KoreanTokenizer$DecompoundMode::initializeClass, &a0, &a1, &a2, &a3, &a4, &a5, &p5, ::org::apache::lucene::analysis::ko::t_KoreanTokenizer$DecompoundMode::parameters_, &a6, &a7))
                {
                  INT_CALL(object = KoreanTokenizer(a0, a1, a2, a3, a4, a5, a6, a7));
                  self->object = object;
                  break;
                }
              }
             default:
             err:
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_KoreanTokenizer_close(t_KoreanTokenizer *self, PyObject *args)
          {

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(self->object.close());
              Py_RETURN_NONE;
            }

            return callSuper(PY_TYPE(KoreanTokenizer), (PyObject *) self, "close", args, 2);
          }

          static PyObject *t_KoreanTokenizer_end(t_KoreanTokenizer *self, PyObject *args)
          {

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(self->object.end());
              Py_RETURN_NONE;
            }

            return callSuper(PY_TYPE(KoreanTokenizer), (PyObject *) self, "end", args, 2);
          }

          static PyObject *t_KoreanTokenizer_incrementToken(t_KoreanTokenizer *self, PyObject *args)
          {
            jboolean result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.incrementToken());
              Py_RETURN_BOOL(result);
            }

            return callSuper(PY_TYPE(KoreanTokenizer), (PyObject *) self, "incrementToken", args, 2);
          }

          static PyObject *t_KoreanTokenizer_reset(t_KoreanTokenizer *self, PyObject *args)
          {

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(self->object.reset());
              Py_RETURN_NONE;
            }

            return callSuper(PY_TYPE(KoreanTokenizer), (PyObject *) self, "reset", args, 2);
          }

          static PyObject *t_KoreanTokenizer_setGraphvizFormatter(t_KoreanTokenizer *self, PyObject *arg)
          {
            ::org::apache::lucene::analysis::ko::GraphvizFormatter a0((jobject) NULL);

            if (!parseArg(arg, "k", ::org::apache::lucene::analysis::ko::GraphvizFormatter::initializeClass, &a0))
            {
              OBJ_CALL(self->object.setGraphvizFormatter(a0));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError((PyObject *) self, "setGraphvizFormatter", arg);
            return NULL;
          }

          static int t_KoreanTokenizer_set__graphvizFormatter(t_KoreanTokenizer *self, PyObject *arg, void *data)
          {
            {
              ::org::apache::lucene::analysis::ko::GraphvizFormatter value((jobject) NULL);
              if (!parseArg(arg, "k", ::org::apache::lucene::analysis::ko::GraphvizFormatter::initializeClass, &value))
              {
                INT_CALL(self->object.setGraphvizFormatter(value));
                return 0;
              }
            }
            PyErr_SetArgsError((PyObject *) self, "graphvizFormatter", arg);
            return -1;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/pylucene/analysis/PythonTokenizer.h"
#include "java/io/IOException.h"
#include "java/lang/Throwable.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace pylucene {
      namespace analysis {

        ::java::lang::Class *PythonTokenizer::class$ = NULL;
        jmethodID *PythonTokenizer::mids$ = NULL;
        bool PythonTokenizer::live$ = false;

        jclass PythonTokenizer::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/pylucene/analysis/PythonTokenizer");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_f2cc1bce94666404] = env->getMethodID(cls, "<init>", "()V");
            mids$[mid_finalize_f2cc1bce94666404] = env->getMethodID(cls, "finalize", "()V");
            mids$[mid_incrementToken_8454bd5aa23fd11e] = env->getMethodID(cls, "incrementToken", "()Z");
            mids$[mid_pythonDecRef_f2cc1bce94666404] = env->getMethodID(cls, "pythonDecRef", "()V");
            mids$[mid_pythonExtension_2e5ae9edcb9b072f] = env->getMethodID(cls, "pythonExtension", "()J");
            mids$[mid_pythonExtension_9c778c9bce6694df] = env->getMethodID(cls, "pythonExtension", "(J)V");

            class$ = new ::java::lang::Class(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        PythonTokenizer::PythonTokenizer() : ::org::apache::lucene::analysis::Tokenizer(env->newObject(initializeClass, &mids$, mid_init$_f2cc1bce94666404)) {}

        void PythonTokenizer::finalize() const
        {
          env->callVoidMethod(this$, mids$[mid_finalize_f2cc1bce94666404]);
        }

        jlong PythonTokenizer::pythonExtension() const
        {
          return env->callLongMethod(this$, mids$[mid_pythonExtension_2e5ae9edcb9b072f]);
        }

        void PythonTokenizer::pythonExtension(jlong a0) const
        {
          env->callVoidMethod(this$, mids$[mid_pythonExtension_9c778c9bce6694df], a0);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace pylucene {
      namespace analysis {
        static PyObject *t_PythonTokenizer_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_PythonTokenizer_instance_(PyTypeObject *type, PyObject *arg);
        static int t_PythonTokenizer_init_(t_PythonTokenizer *self, PyObject *args, PyObject *kwds);
        static PyObject *t_PythonTokenizer_finalize(t_PythonTokenizer *self);
        static PyObject *t_PythonTokenizer_pythonExtension(t_PythonTokenizer *self, PyObject *args);
        static jboolean JNICALL t_PythonTokenizer_incrementToken0(JNIEnv *jenv, jobject jobj);
        static void JNICALL t_PythonTokenizer_pythonDecRef1(JNIEnv *jenv, jobject jobj);
        static PyObject *t_PythonTokenizer_get__self(t_PythonTokenizer *self, void *data);
        static PyGetSetDef t_PythonTokenizer__fields_[] = {
          DECLARE_GET_FIELD(t_PythonTokenizer, self),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_PythonTokenizer__methods_[] = {
          DECLARE_METHOD(t_PythonTokenizer, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_PythonTokenizer, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_PythonTokenizer, finalize, METH_NOARGS),
          DECLARE_METHOD(t_PythonTokenizer, pythonExtension, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        static PyType_Slot PY_TYPE_SLOTS(PythonTokenizer)[] = {
          { Py_tp_methods, t_PythonTokenizer__methods_ },
          { Py_tp_init, (void *) t_PythonTokenizer_init_ },
          { Py_tp_getset, t_PythonTokenizer__fields_ },
          { 0, NULL }
        };

        static PyType_Def *PY_TYPE_BASES(PythonTokenizer)[] = {
          &PY_TYPE_DEF(::org::apache::lucene::analysis::Tokenizer),
          NULL
        };

        DEFINE_TYPE(PythonTokenizer, t_PythonTokenizer, PythonTokenizer);

        void t_PythonTokenizer::install(PyObject *module)
        {
          installType(&PY_TYPE(PythonTokenizer), &PY_TYPE_DEF(PythonTokenizer), module, "PythonTokenizer", 1);
        }

        void t_PythonTokenizer::initialize(PyObject *module)
        {
          PyObject_SetAttrString((PyObject *) PY_TYPE(PythonTokenizer), "class_", make_descriptor(PythonTokenizer::initializeClass, 1));
          PyObject_SetAttrString((PyObject *) PY_TYPE(PythonTokenizer), "wrapfn_", make_descriptor(t_PythonTokenizer::wrap_jobject));
          PyObject_SetAttrString((PyObject *) PY_TYPE(PythonTokenizer), "boxfn_", make_descriptor(boxObject));
          jclass cls = env->getClass(PythonTokenizer::initializeClass);
          JNINativeMethod methods[] = {
            { "incrementToken", "()Z", (void *) t_PythonTokenizer_incrementToken0 },
            { "pythonDecRef", "()V", (void *) t_PythonTokenizer_pythonDecRef1 },
          };
          env->registerNatives(cls, methods, 2);
        }

        static PyObject *t_PythonTokenizer_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, PythonTokenizer::initializeClass, 1)))
            return NULL;
          return t_PythonTokenizer::wrap_Object(PythonTokenizer(((t_PythonTokenizer *) arg)->object.this$));
        }
        static PyObject *t_PythonTokenizer_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, PythonTokenizer::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_PythonTokenizer_init_(t_PythonTokenizer *self, PyObject *args, PyObject *kwds)
        {
          PythonTokenizer object((jobject) NULL);

          INT_CALL(object = PythonTokenizer());
          self->object = object;

          Py_INCREF((PyObject *) self);
          self->object.pythonExtension((jlong) (Py_intptr_t) (void *) self);

          return 0;
        }

        static PyObject *t_PythonTokenizer_finalize(t_PythonTokenizer *self)
        {
          OBJ_CALL(self->object.finalize());
          Py_RETURN_NONE;
        }

        static PyObject *t_PythonTokenizer_pythonExtension(t_PythonTokenizer *self, PyObject *args)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 0:
            {
              jlong result;
              OBJ_CALL(result = self->object.pythonExtension());
              return PyLong_FromLongLong((PY_LONG_LONG) result);
            }
            break;
           case 1:
            {
              jlong a0;

              if (!parseArgs(args, "J", &a0))
              {
                OBJ_CALL(self->object.pythonExtension(a0));
                Py_RETURN_NONE;
              }
            }
          }

          PyErr_SetArgsError((PyObject *) self, "pythonExtension", args);
          return NULL;
        }

        static jboolean JNICALL t_PythonTokenizer_incrementToken0(JNIEnv *jenv, jobject jobj)
        {
          jlong ptr = jenv->CallLongMethod(jobj, PythonTokenizer::mids$[PythonTokenizer::mid_pythonExtension_2e5ae9edcb9b072f]);
          PyObject *obj = (PyObject *) (Py_intptr_t) ptr;
          PythonGIL gil(jenv);
          jboolean value;
          PyObject *result = PyObject_CallMethod(obj, "incrementToken", "");
          if (!result)
            throwPythonError();
          else if (parseArg(result, "Z", &value))
          {
            throwTypeError("incrementToken", result);
            Py_DECREF(result);
          }
          else
          {
            Py_DECREF(result);
            return value;
          }

          return (jboolean) 0;
        }

        static void JNICALL t_PythonTokenizer_pythonDecRef1(JNIEnv *jenv, jobject jobj)
        {
          jlong ptr = jenv->CallLongMethod(jobj, PythonTokenizer::mids$[PythonTokenizer::mid_pythonExtension_2e5ae9edcb9b072f]);
          PyObject *obj = (PyObject *) (Py_intptr_t) ptr;

          if (obj != NULL)
          {
            jenv->CallVoidMethod(jobj, PythonTokenizer::mids$[PythonTokenizer::mid_pythonExtension_9c778c9bce6694df], (jlong) 0);
            env->finalizeObject(jenv, obj);
          }
        }

        static PyObject *t_PythonTokenizer_get__self(t_PythonTokenizer *self, void *data)
        {
          jlong ptr;
          OBJ_CALL(ptr = self->object.pythonExtension());
          PyObject *obj = (PyObject *) (Py_intptr_t) ptr;

          if (obj != NULL)
          {
            Py_INCREF(obj);
            return obj;
          }
          else
            Py_RETURN_NONE;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/index/IndexSorter$FloatSorter.h"
#include "java/lang/Float.h"
#include "java/util/List.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/index/LeafReader.h"
#include "org/apache/lucene/index/IndexSorter.h"
#include "org/apache/lucene/index/IndexSorter$ComparableProvider.h"
#include "java/lang/String.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/index/IndexSorter$NumericDocValuesProvider.h"
#include "org/apache/lucene/index/IndexSorter$DocComparator.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {

        ::java::lang::Class *IndexSorter$FloatSorter::class$ = NULL;
        jmethodID *IndexSorter$FloatSorter::mids$ = NULL;
        bool IndexSorter$FloatSorter::live$ = false;

        jclass IndexSorter$FloatSorter::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/index/IndexSorter$FloatSorter");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_ee42c926d6d9ebce] = env->getMethodID(cls, "<init>", "(Ljava/lang/String;Ljava/lang/Float;ZLorg/apache/lucene/index/IndexSorter$NumericDocValuesProvider;)V");
            mids$[mid_getComparableProviders_739976833795f559] = env->getMethodID(cls, "getComparableProviders", "(Ljava/util/List;)[Lorg/apache/lucene/index/IndexSorter$ComparableProvider;");
            mids$[mid_getDocComparator_8d0e93a4e9ab83f9] = env->getMethodID(cls, "getDocComparator", "(Lorg/apache/lucene/index/LeafReader;I)Lorg/apache/lucene/index/IndexSorter$DocComparator;");
            mids$[mid_getProviderName_db9b55ba01e03e4b] = env->getMethodID(cls, "getProviderName", "()Ljava/lang/String;");

            class$ = new ::java::lang::Class(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        IndexSorter$FloatSorter::IndexSorter$FloatSorter(const ::java::lang::String & a0, const ::java::lang::Float & a1, jboolean a2, const ::org::apache::lucene::index::IndexSorter$NumericDocValuesProvider & a3) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_ee42c926d6d9ebce, a0.this$, a1.this$, a2, a3.this$)) {}

        JArray< ::org::apache::lucene::index::IndexSorter$ComparableProvider > IndexSorter$FloatSorter::getComparableProviders(const ::java::util::List & a0) const
        {
          return JArray< ::org::apache::lucene::index::IndexSorter$ComparableProvider >(env->callObjectMethod(this$, mids$[mid_getComparableProviders_739976833795f559], a0.this$));
        }

        ::org::apache::lucene::index::IndexSorter$DocComparator IndexSorter$FloatSorter::getDocComparator(const ::org::apache::lucene::index::LeafReader & a0, jint a1) const
        {
          return ::org::apache::lucene::index::IndexSorter$DocComparator(env->callObjectMethod(this$, mids$[mid_getDocComparator_8d0e93a4e9ab83f9], a0.this$, a1));
        }

        ::java::lang::String IndexSorter$FloatSorter::getProviderName() const
        {
          return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_getProviderName_db9b55ba01e03e4b]));
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {
        static PyObject *t_IndexSorter$FloatSorter_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_IndexSorter$FloatSorter_instance_(PyTypeObject *type, PyObject *arg);
        static int t_IndexSorter$FloatSorter_init_(t_IndexSorter$FloatSorter *self, PyObject *args, PyObject *kwds);
        static PyObject *t_IndexSorter$FloatSorter_getComparableProviders(t_IndexSorter$FloatSorter *self, PyObject *arg);
        static PyObject *t_IndexSorter$FloatSorter_getDocComparator(t_IndexSorter$FloatSorter *self, PyObject *args);
        static PyObject *t_IndexSorter$FloatSorter_getProviderName(t_IndexSorter$FloatSorter *self);
        static PyObject *t_IndexSorter$FloatSorter_get__providerName(t_IndexSorter$FloatSorter *self, void *data);
        static PyGetSetDef t_IndexSorter$FloatSorter__fields_[] = {
          DECLARE_GET_FIELD(t_IndexSorter$FloatSorter, providerName),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_IndexSorter$FloatSorter__methods_[] = {
          DECLARE_METHOD(t_IndexSorter$FloatSorter, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_IndexSorter$FloatSorter, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_IndexSorter$FloatSorter, getComparableProviders, METH_O),
          DECLARE_METHOD(t_IndexSorter$FloatSorter, getDocComparator, METH_VARARGS),
          DECLARE_METHOD(t_IndexSorter$FloatSorter, getProviderName, METH_NOARGS),
          { NULL, NULL, 0, NULL }
        };

        static PyType_Slot PY_TYPE_SLOTS(IndexSorter$FloatSorter)[] = {
          { Py_tp_methods, t_IndexSorter$FloatSorter__methods_ },
          { Py_tp_init, (void *) t_IndexSorter$FloatSorter_init_ },
          { Py_tp_getset, t_IndexSorter$FloatSorter__fields_ },
          { 0, NULL }
        };

        static PyType_Def *PY_TYPE_BASES(IndexSorter$FloatSorter)[] = {
          &PY_TYPE_DEF(::java::lang::Object),
          NULL
        };

        DEFINE_TYPE(IndexSorter$FloatSorter, t_IndexSorter$FloatSorter, IndexSorter$FloatSorter);

        void t_IndexSorter$FloatSorter::install(PyObject *module)
        {
          installType(&PY_TYPE(IndexSorter$FloatSorter), &PY_TYPE_DEF(IndexSorter$FloatSorter), module, "IndexSorter$FloatSorter", 0);
        }

        void t_IndexSorter$FloatSorter::initialize(PyObject *module)
        {
          PyObject_SetAttrString((PyObject *) PY_TYPE(IndexSorter$FloatSorter), "class_", make_descriptor(IndexSorter$FloatSorter::initializeClass, 1));
          PyObject_SetAttrString((PyObject *) PY_TYPE(IndexSorter$FloatSorter), "wrapfn_", make_descriptor(t_IndexSorter$FloatSorter::wrap_jobject));
          PyObject_SetAttrString((PyObject *) PY_TYPE(IndexSorter$FloatSorter), "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_IndexSorter$FloatSorter_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, IndexSorter$FloatSorter::initializeClass, 1)))
            return NULL;
          return t_IndexSorter$FloatSorter::wrap_Object(IndexSorter$FloatSorter(((t_IndexSorter$FloatSorter *) arg)->object.this$));
        }
        static PyObject *t_IndexSorter$FloatSorter_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, IndexSorter$FloatSorter::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_IndexSorter$FloatSorter_init_(t_IndexSorter$FloatSorter *self, PyObject *args, PyObject *kwds)
        {
          ::java::lang::String a0((jobject) NULL);
          ::java::lang::Float a1((jobject) NULL);
          jboolean a2;
          ::org::apache::lucene::index::IndexSorter$NumericDocValuesProvider a3((jobject) NULL);
          IndexSorter$FloatSorter object((jobject) NULL);

          if (!parseArgs(args, "sOZk", ::java::lang::PY_TYPE(Float), ::org::apache::lucene::index::IndexSorter$NumericDocValuesProvider::initializeClass, &a0, &a1, &a2, &a3))
          {
            INT_CALL(object = IndexSorter$FloatSorter(a0, a1, a2, a3));
            self->object = object;
          }
          else
          {
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }

        static PyObject *t_IndexSorter$FloatSorter_getComparableProviders(t_IndexSorter$FloatSorter *self, PyObject *arg)
        {
          ::java::util::List a0((jobject) NULL);
          PyTypeObject **p0;
          JArray< ::org::apache::lucene::index::IndexSorter$ComparableProvider > result((jobject) NULL);

          if (!parseArg(arg, "K", ::java::util::List::initializeClass, &a0, &p0, ::java::util::t_List::parameters_))
          {
            OBJ_CALL(result = self->object.getComparableProviders(a0));
            return JArray<jobject>(result.this$).wrap(::org::apache::lucene::index::t_IndexSorter$ComparableProvider::wrap_jobject);
          }

          PyErr_SetArgsError((PyObject *) self, "getComparableProviders", arg);
          return NULL;
        }

        static PyObject *t_IndexSorter$FloatSorter_getDocComparator(t_IndexSorter$FloatSorter *self, PyObject *args)
        {
          ::org::apache::lucene::index::LeafReader a0((jobject) NULL);
          jint a1;
          ::org::apache::lucene::index::IndexSorter$DocComparator result((jobject) NULL);

          if (!parseArgs(args, "kI", ::org::apache::lucene::index::LeafReader::initializeClass, &a0, &a1))
          {
            OBJ_CALL(result = self->object.getDocComparator(a0, a1));
            return ::org::apache::lucene::index::t_IndexSorter$DocComparator::wrap_Object(result);
          }

          PyErr_SetArgsError((PyObject *) self, "getDocComparator", args);
          return NULL;
        }

        static PyObject *t_IndexSorter$FloatSorter_getProviderName(t_IndexSorter$FloatSorter *self)
        {
          ::java::lang::String result((jobject) NULL);
          OBJ_CALL(result = self->object.getProviderName());
          return j2p(result);
        }

        static PyObject *t_IndexSorter$FloatSorter_get__providerName(t_IndexSorter$FloatSorter *self, void *data)
        {
          ::java::lang::String value((jobject) NULL);
          OBJ_CALL(value = self->object.getProviderName());
          return j2p(value);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/grouping/CollectedSearchGroup.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace grouping {

          ::java::lang::Class *CollectedSearchGroup::class$ = NULL;
          jmethodID *CollectedSearchGroup::mids$ = NULL;
          bool CollectedSearchGroup::live$ = false;

          jclass CollectedSearchGroup::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/search/grouping/CollectedSearchGroup");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_f2cc1bce94666404] = env->getMethodID(cls, "<init>", "()V");

              class$ = new ::java::lang::Class(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          CollectedSearchGroup::CollectedSearchGroup() : ::org::apache::lucene::search::grouping::SearchGroup(env->newObject(initializeClass, &mids$, mid_init$_f2cc1bce94666404)) {}
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace grouping {
          static PyObject *t_CollectedSearchGroup_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_CollectedSearchGroup_instance_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_CollectedSearchGroup_of_(t_CollectedSearchGroup *self, PyObject *args);
          static int t_CollectedSearchGroup_init_(t_CollectedSearchGroup *self, PyObject *args, PyObject *kwds);
          static PyObject *t_CollectedSearchGroup_get__parameters_(t_CollectedSearchGroup *self, void *data);
          static PyGetSetDef t_CollectedSearchGroup__fields_[] = {
            DECLARE_GET_FIELD(t_CollectedSearchGroup, parameters_),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_CollectedSearchGroup__methods_[] = {
            DECLARE_METHOD(t_CollectedSearchGroup, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_CollectedSearchGroup, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_CollectedSearchGroup, of_, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          static PyType_Slot PY_TYPE_SLOTS(CollectedSearchGroup)[] = {
            { Py_tp_methods, t_CollectedSearchGroup__methods_ },
            { Py_tp_init, (void *) t_CollectedSearchGroup_init_ },
            { Py_tp_getset, t_CollectedSearchGroup__fields_ },
            { 0, NULL }
          };

          static PyType_Def *PY_TYPE_BASES(CollectedSearchGroup)[] = {
            &PY_TYPE_DEF(::org::apache::lucene::search::grouping::SearchGroup),
            NULL
          };

          DEFINE_TYPE(CollectedSearchGroup, t_CollectedSearchGroup, CollectedSearchGroup);
          PyObject *t_CollectedSearchGroup::wrap_Object(const CollectedSearchGroup& object, PyTypeObject *p0)
          {
            PyObject *obj = t_CollectedSearchGroup::wrap_Object(object);
            if (obj != NULL && obj != Py_None)
            {
              t_CollectedSearchGroup *self = (t_CollectedSearchGroup *) obj;
              self->parameters[0] = p0;
            }
            return obj;
          }

          PyObject *t_CollectedSearchGroup::wrap_jobject(const jobject& object, PyTypeObject *p0)
          {
            PyObject *obj = t_CollectedSearchGroup::wrap_jobject(object);
            if (obj != NULL && obj != Py_None)
            {
              t_CollectedSearchGroup *self = (t_CollectedSearchGroup *) obj;
              self->parameters[0] = p0;
            }
            return obj;
          }

          void t_CollectedSearchGroup::install(PyObject *module)
          {
            installType(&PY_TYPE(CollectedSearchGroup), &PY_TYPE_DEF(CollectedSearchGroup), module, "CollectedSearchGroup", 0);
          }

          void t_CollectedSearchGroup::initialize(PyObject *module)
          {
            PyObject_SetAttrString((PyObject *) PY_TYPE(CollectedSearchGroup), "class_", make_descriptor(CollectedSearchGroup::initializeClass, 1));
            PyObject_SetAttrString((PyObject *) PY_TYPE(CollectedSearchGroup), "wrapfn_", make_descriptor(t_CollectedSearchGroup::wrap_jobject));
            PyObject_SetAttrString((PyObject *) PY_TYPE(CollectedSearchGroup), "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_CollectedSearchGroup_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, CollectedSearchGroup::initializeClass, 1)))
              return NULL;
            return t_CollectedSearchGroup::wrap_Object(CollectedSearchGroup(((t_CollectedSearchGroup *) arg)->object.this$));
          }
          static PyObject *t_CollectedSearchGroup_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, CollectedSearchGroup::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static PyObject *t_CollectedSearchGroup_of_(t_CollectedSearchGroup *self, PyObject *args)
          {
            if (!parseArg(args, "T", 1, &(self->parameters)))
              Py_RETURN_SELF;
            return PyErr_SetArgsError((PyObject *) self, "of_", args);
          }

          static int t_CollectedSearchGroup_init_(t_CollectedSearchGroup *self, PyObject *args, PyObject *kwds)
          {
            CollectedSearchGroup object((jobject) NULL);

            INT_CALL(object = CollectedSearchGroup());
            self->object = object;

            return 0;
          }
          static PyObject *t_CollectedSearchGroup_get__parameters_(t_CollectedSearchGroup *self, void *data)
          {
            return typeParameters(self->parameters, sizeof(self->parameters));
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/ja/JapaneseNumberFilter$NumberBuffer.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace ja {

          ::java::lang::Class *JapaneseNumberFilter$NumberBuffer::class$ = NULL;
          jmethodID *JapaneseNumberFilter$NumberBuffer::mids$ = NULL;
          bool JapaneseNumberFilter$NumberBuffer::live$ = false;

          jclass JapaneseNumberFilter$NumberBuffer::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/ja/JapaneseNumberFilter$NumberBuffer");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_9fd2eb66a64e6f0f] = env->getMethodID(cls, "<init>", "(Ljava/lang/String;)V");
              mids$[mid_advance_f2cc1bce94666404] = env->getMethodID(cls, "advance", "()V");
              mids$[mid_charAt_ebc61ec1e57770d1] = env->getMethodID(cls, "charAt", "(I)C");
              mids$[mid_length_9972fcc56b44e79d] = env->getMethodID(cls, "length", "()I");
              mids$[mid_position_9972fcc56b44e79d] = env->getMethodID(cls, "position", "()I");

              class$ = new ::java::lang::Class(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          JapaneseNumberFilter$NumberBuffer::JapaneseNumberFilter$NumberBuffer(const ::java::lang::String & a0) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_9fd2eb66a64e6f0f, a0.this$)) {}

          void JapaneseNumberFilter$NumberBuffer::advance() const
          {
            env->callVoidMethod(this$, mids$[mid_advance_f2cc1bce94666404]);
          }

          jchar JapaneseNumberFilter$NumberBuffer::charAt(jint a0) const
          {
            return env->callCharMethod(this$, mids$[mid_charAt_ebc61ec1e57770d1], a0);
          }

          jint JapaneseNumberFilter$NumberBuffer::length() const
          {
            return env->callIntMethod(this$, mids$[mid_length_9972fcc56b44e79d]);
          }

          jint JapaneseNumberFilter$NumberBuffer::position() const
          {
            return env->callIntMethod(this$, mids$[mid_position_9972fcc56b44e79d]);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace ja {
          static PyObject *t_JapaneseNumberFilter$NumberBuffer_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_JapaneseNumberFilter$NumberBuffer_instance_(PyTypeObject *type, PyObject *arg);
          static int t_JapaneseNumberFilter$NumberBuffer_init_(t_JapaneseNumberFilter$NumberBuffer *self, PyObject *args, PyObject *kwds);
          static PyObject *t_JapaneseNumberFilter$NumberBuffer_advance(t_JapaneseNumberFilter$NumberBuffer *self);
          static PyObject *t_JapaneseNumberFilter$NumberBuffer_charAt(t_JapaneseNumberFilter$NumberBuffer *self, PyObject *arg);
          static PyObject *t_JapaneseNumberFilter$NumberBuffer_length(t_JapaneseNumberFilter$NumberBuffer *self);
          static PyObject *t_JapaneseNumberFilter$NumberBuffer_position(t_JapaneseNumberFilter$NumberBuffer *self);

          static PyMethodDef t_JapaneseNumberFilter$NumberBuffer__methods_[] = {
            DECLARE_METHOD(t_JapaneseNumberFilter$NumberBuffer, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_JapaneseNumberFilter$NumberBuffer, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_JapaneseNumberFilter$NumberBuffer, advance, METH_NOARGS),
            DECLARE_METHOD(t_JapaneseNumberFilter$NumberBuffer, charAt, METH_O),
            DECLARE_METHOD(t_JapaneseNumberFilter$NumberBuffer, length, METH_NOARGS),
            DECLARE_METHOD(t_JapaneseNumberFilter$NumberBuffer, position, METH_NOARGS),
            { NULL, NULL, 0, NULL }
          };

          static PyType_Slot PY_TYPE_SLOTS(JapaneseNumberFilter$NumberBuffer)[] = {
            { Py_tp_methods, t_JapaneseNumberFilter$NumberBuffer__methods_ },
            { Py_tp_init, (void *) t_JapaneseNumberFilter$NumberBuffer_init_ },
            { 0, NULL }
          };

          static PyType_Def *PY_TYPE_BASES(JapaneseNumberFilter$NumberBuffer)[] = {
            &PY_TYPE_DEF(::java::lang::Object),
            NULL
          };

          DEFINE_TYPE(JapaneseNumberFilter$NumberBuffer, t_JapaneseNumberFilter$NumberBuffer, JapaneseNumberFilter$NumberBuffer);

          void t_JapaneseNumberFilter$NumberBuffer::install(PyObject *module)
          {
            installType(&PY_TYPE(JapaneseNumberFilter$NumberBuffer), &PY_TYPE_DEF(JapaneseNumberFilter$NumberBuffer), module, "JapaneseNumberFilter$NumberBuffer", 0);
          }

          void t_JapaneseNumberFilter$NumberBuffer::initialize(PyObject *module)
          {
            PyObject_SetAttrString((PyObject *) PY_TYPE(JapaneseNumberFilter$NumberBuffer), "class_", make_descriptor(JapaneseNumberFilter$NumberBuffer::initializeClass, 1));
            PyObject_SetAttrString((PyObject *) PY_TYPE(JapaneseNumberFilter$NumberBuffer), "wrapfn_", make_descriptor(t_JapaneseNumberFilter$NumberBuffer::wrap_jobject));
            PyObject_SetAttrString((PyObject *) PY_TYPE(JapaneseNumberFilter$NumberBuffer), "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_JapaneseNumberFilter$NumberBuffer_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, JapaneseNumberFilter$NumberBuffer::initializeClass, 1)))
              return NULL;
            return t_JapaneseNumberFilter$NumberBuffer::wrap_Object(JapaneseNumberFilter$NumberBuffer(((t_JapaneseNumberFilter$NumberBuffer *) arg)->object.this$));
          }
          static PyObject *t_JapaneseNumberFilter$NumberBuffer_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, JapaneseNumberFilter$NumberBuffer::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_JapaneseNumberFilter$NumberBuffer_init_(t_JapaneseNumberFilter$NumberBuffer *self, PyObject *args, PyObject *kwds)
          {
            ::java::lang::String a0((jobject) NULL);
            JapaneseNumberFilter$NumberBuffer object((jobject) NULL);

            if (!parseArgs(args, "s", &a0))
            {
              INT_CALL(object = JapaneseNumberFilter$NumberBuffer(a0));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_JapaneseNumberFilter$NumberBuffer_advance(t_JapaneseNumberFilter$NumberBuffer *self)
          {
            OBJ_CALL(self->object.advance());
            Py_RETURN_NONE;
          }

          static PyObject *t_JapaneseNumberFilter$NumberBuffer_charAt(t_JapaneseNumberFilter$NumberBuffer *self, PyObject *arg)
          {
            jint a0;
            jchar result;

            if (!parseArg(arg, "I", &a0))
            {
              OBJ_CALL(result = self->object.charAt(a0));
              return c2p(result);
            }

            PyErr_SetArgsError((PyObject *) self, "charAt", arg);
            return NULL;
          }

          static PyObject *t_JapaneseNumberFilter$NumberBuffer_length(t_JapaneseNumberFilter$NumberBuffer *self)
          {
            jint result;
            OBJ_CALL(result = self->object.length());
            return PyLong_FromLong((long) result);
          }

          static PyObject *t_JapaneseNumberFilter$NumberBuffer_position(t_JapaneseNumberFilter$NumberBuffer *self)
          {
            jint result;
            OBJ_CALL(result = self->object.position());
            return PyLong_FromLong((long) result);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/misc/HighFreqTerms$DocFreqComparator.h"
#include "java/util/Comparator.h"
#include "org/apache/lucene/misc/TermStats.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace misc {

        ::java::lang::Class *HighFreqTerms$DocFreqComparator::class$ = NULL;
        jmethodID *HighFreqTerms$DocFreqComparator::mids$ = NULL;
        bool HighFreqTerms$DocFreqComparator::live$ = false;

        jclass HighFreqTerms$DocFreqComparator::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/misc/HighFreqTerms$DocFreqComparator");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_f2cc1bce94666404] = env->getMethodID(cls, "<init>", "()V");
            mids$[mid_compare_c976d962c4791643] = env->getMethodID(cls, "compare", "(Lorg/apache/lucene/misc/TermStats;Lorg/apache/lucene/misc/TermStats;)I");

            class$ = new ::java::lang::Class(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        HighFreqTerms$DocFreqComparator::HighFreqTerms$DocFreqComparator() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_f2cc1bce94666404)) {}

        jint HighFreqTerms$DocFreqComparator::compare(const ::org::apache::lucene::misc::TermStats & a0, const ::org::apache::lucene::misc::TermStats & a1) const
        {
          return env->callIntMethod(this$, mids$[mid_compare_c976d962c4791643], a0.this$, a1.this$);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace misc {
        static PyObject *t_HighFreqTerms$DocFreqComparator_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_HighFreqTerms$DocFreqComparator_instance_(PyTypeObject *type, PyObject *arg);
        static int t_HighFreqTerms$DocFreqComparator_init_(t_HighFreqTerms$DocFreqComparator *self, PyObject *args, PyObject *kwds);
        static PyObject *t_HighFreqTerms$DocFreqComparator_compare(t_HighFreqTerms$DocFreqComparator *self, PyObject *args);

        static PyMethodDef t_HighFreqTerms$DocFreqComparator__methods_[] = {
          DECLARE_METHOD(t_HighFreqTerms$DocFreqComparator, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_HighFreqTerms$DocFreqComparator, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_HighFreqTerms$DocFreqComparator, compare, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        static PyType_Slot PY_TYPE_SLOTS(HighFreqTerms$DocFreqComparator)[] = {
          { Py_tp_methods, t_HighFreqTerms$DocFreqComparator__methods_ },
          { Py_tp_init, (void *) t_HighFreqTerms$DocFreqComparator_init_ },
          { 0, NULL }
        };

        static PyType_Def *PY_TYPE_BASES(HighFreqTerms$DocFreqComparator)[] = {
          &PY_TYPE_DEF(::java::lang::Object),
          NULL
        };

        DEFINE_TYPE(HighFreqTerms$DocFreqComparator, t_HighFreqTerms$DocFreqComparator, HighFreqTerms$DocFreqComparator);

        void t_HighFreqTerms$DocFreqComparator::install(PyObject *module)
        {
          installType(&PY_TYPE(HighFreqTerms$DocFreqComparator), &PY_TYPE_DEF(HighFreqTerms$DocFreqComparator), module, "HighFreqTerms$DocFreqComparator", 0);
        }

        void t_HighFreqTerms$DocFreqComparator::initialize(PyObject *module)
        {
          PyObject_SetAttrString((PyObject *) PY_TYPE(HighFreqTerms$DocFreqComparator), "class_", make_descriptor(HighFreqTerms$DocFreqComparator::initializeClass, 1));
          PyObject_SetAttrString((PyObject *) PY_TYPE(HighFreqTerms$DocFreqComparator), "wrapfn_", make_descriptor(t_HighFreqTerms$DocFreqComparator::wrap_jobject));
          PyObject_SetAttrString((PyObject *) PY_TYPE(HighFreqTerms$DocFreqComparator), "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_HighFreqTerms$DocFreqComparator_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, HighFreqTerms$DocFreqComparator::initializeClass, 1)))
            return NULL;
          return t_HighFreqTerms$DocFreqComparator::wrap_Object(HighFreqTerms$DocFreqComparator(((t_HighFreqTerms$DocFreqComparator *) arg)->object.this$));
        }
        static PyObject *t_HighFreqTerms$DocFreqComparator_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, HighFreqTerms$DocFreqComparator::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_HighFreqTerms$DocFreqComparator_init_(t_HighFreqTerms$DocFreqComparator *self, PyObject *args, PyObject *kwds)
        {
          HighFreqTerms$DocFreqComparator object((jobject) NULL);

          INT_CALL(object = HighFreqTerms$DocFreqComparator());
          self->object = object;

          return 0;
        }

        static PyObject *t_HighFreqTerms$DocFreqComparator_compare(t_HighFreqTerms$DocFreqComparator *self, PyObject *args)
        {
          ::org::apache::lucene::misc::TermStats a0((jobject) NULL);
          ::org::apache::lucene::misc::TermStats a1((jobject) NULL);
          jint result;

          if (!parseArgs(args, "kk", ::org::apache::lucene::misc::TermStats::initializeClass, ::org::apache::lucene::misc::TermStats::initializeClass, &a0, &a1))
          {
            OBJ_CALL(result = self->object.compare(a0, a1));
            return PyLong_FromLong((long) result);
          }

          PyErr_SetArgsError((PyObject *) self, "compare", args);
          return NULL;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "java/text/SimpleDateFormat.h"
#include "java/util/Date.h"
#include "java/lang/Class.h"
#include "java/lang/Object.h"
#include "java/util/Locale.h"
#include "java/lang/String.h"
#include "java/lang/StringBuffer.h"
#include "JArray.h"

namespace java {
  namespace text {

    ::java::lang::Class *SimpleDateFormat::class$ = NULL;
    jmethodID *SimpleDateFormat::mids$ = NULL;
    bool SimpleDateFormat::live$ = false;

    jclass SimpleDateFormat::initializeClass(bool getOnly)
    {
      if (getOnly)
        return (jclass) (live$ ? class$->this$ : NULL);
      if (class$ == NULL)
      {
        jclass cls = (jclass) env->findClass("java/text/SimpleDateFormat");

        mids$ = new jmethodID[max_mid];
        mids$[mid_init$_f2cc1bce94666404] = env->getMethodID(cls, "<init>", "()V");
        mids$[mid_init$_9fd2eb66a64e6f0f] = env->getMethodID(cls, "<init>", "(Ljava/lang/String;)V");
        mids$[mid_init$_262174a04a8e5a23] = env->getMethodID(cls, "<init>", "(Ljava/lang/String;Ljava/util/Locale;)V");
        mids$[mid_applyLocalizedPattern_9fd2eb66a64e6f0f] = env->getMethodID(cls, "applyLocalizedPattern", "(Ljava/lang/String;)V");
        mids$[mid_applyPattern_9fd2eb66a64e6f0f] = env->getMethodID(cls, "applyPattern", "(Ljava/lang/String;)V");
        mids$[mid_clone_d6bcd06f3102c4d9] = env->getMethodID(cls, "clone", "()Ljava/lang/Object;");
        mids$[mid_equals_8b72f2dcdde6fd1d] = env->getMethodID(cls, "equals", "(Ljava/lang/Object;)Z");
        mids$[mid_get2DigitYearStart_7d498bbaa94ff388] = env->getMethodID(cls, "get2DigitYearStart", "()Ljava/util/Date;");
        mids$[mid_hashCode_9972fcc56b44e79d] = env->getMethodID(cls, "hashCode", "()I");
        mids$[mid_set2DigitYearStart_823e481d02661c07] = env->getMethodID(cls, "set2DigitYearStart", "(Ljava/util/Date;)V");
        mids$[mid_toLocalizedPattern_db9b55ba01e03e4b] = env->getMethodID(cls, "toLocalizedPattern", "()Ljava/lang/String;");
        mids$[mid_toPattern_db9b55ba01e03e4b] = env->getMethodID(cls, "toPattern", "()Ljava/lang/String;");

        class$ = new ::java::lang::Class(cls);
        live$ = true;
      }
      return (jclass) class$->this$;
    }

    SimpleDateFormat::SimpleDateFormat() : ::java::text::DateFormat(env->newObject(initializeClass, &mids$, mid_init$_f2cc1bce94666404)) {}

    SimpleDateFormat::SimpleDateFormat(const ::java::lang::String & a0) : ::java::text::DateFormat(env->newObject(initializeClass, &mids$, mid_init$_9fd2eb66a64e6f0f, a0.this$)) {}

    SimpleDateFormat::SimpleDateFormat(const ::java::lang::String & a0, const ::java::util::Locale & a1) : ::java::text::DateFormat(env->newObject(initializeClass, &mids$, mid_init$_262174a04a8e5a23, a0.this$, a1.this$)) {}

    void SimpleDateFormat::applyLocalizedPattern(const ::java::lang::String & a0) const
    {
      env->callVoidMethod(this$, mids$[mid_applyLocalizedPattern_9fd2eb66a64e6f0f], a0.this$);
    }

    void SimpleDateFormat::applyPattern(const ::java::lang::String & a0) const
    {
      env->callVoidMethod(this$, mids$[mid_applyPattern_9fd2eb66a64e6f0f], a0.this$);
    }

    ::java::lang::Object SimpleDateFormat::clone() const
    {
      return ::java::lang::Object(env->callObjectMethod(this$, mids$[mid_clone_d6bcd06f3102c4d9]));
    }

    jboolean SimpleDateFormat::equals(const ::java::lang::Object & a0) const
    {
      return env->callBooleanMethod(this$, mids$[mid_equals_8b72f2dcdde6fd1d], a0.this$);
    }

    ::java::util::Date SimpleDateFormat::get2DigitYearStart() const
    {
      return ::java::util::Date(env->callObjectMethod(this$, mids$[mid_get2DigitYearStart_7d498bbaa94ff388]));
    }

    jint SimpleDateFormat::hashCode() const
    {
      return env->callIntMethod(this$, mids$[mid_hashCode_9972fcc56b44e79d]);
    }

    void SimpleDateFormat::set2DigitYearStart(const ::java::util::Date & a0) const
    {
      env->callVoidMethod(this$, mids$[mid_set2DigitYearStart_823e481d02661c07], a0.this$);
    }

    ::java::lang::String SimpleDateFormat::toLocalizedPattern() const
    {
      return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toLocalizedPattern_db9b55ba01e03e4b]));
    }

    ::java::lang::String SimpleDateFormat::toPattern() const
    {
      return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toPattern_db9b55ba01e03e4b]));
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace java {
  namespace text {
    static PyObject *t_SimpleDateFormat_cast_(PyTypeObject *type, PyObject *arg);
    static PyObject *t_SimpleDateFormat_instance_(PyTypeObject *type, PyObject *arg);
    static int t_SimpleDateFormat_init_(t_SimpleDateFormat *self, PyObject *args, PyObject *kwds);
    static PyObject *t_SimpleDateFormat_applyLocalizedPattern(t_SimpleDateFormat *self, PyObject *arg);
    static PyObject *t_SimpleDateFormat_applyPattern(t_SimpleDateFormat *self, PyObject *arg);
    static PyObject *t_SimpleDateFormat_clone(t_SimpleDateFormat *self, PyObject *args);
    static PyObject *t_SimpleDateFormat_equals(t_SimpleDateFormat *self, PyObject *args);
    static PyObject *t_SimpleDateFormat_get2DigitYearStart(t_SimpleDateFormat *self);
    static PyObject *t_SimpleDateFormat_hashCode(t_SimpleDateFormat *self, PyObject *args);
    static PyObject *t_SimpleDateFormat_set2DigitYearStart(t_SimpleDateFormat *self, PyObject *arg);
    static PyObject *t_SimpleDateFormat_toLocalizedPattern(t_SimpleDateFormat *self);
    static PyObject *t_SimpleDateFormat_toPattern(t_SimpleDateFormat *self);
    static PyObject *t_SimpleDateFormat_get__2DigitYearStart(t_SimpleDateFormat *self, void *data);
    static int t_SimpleDateFormat_set__2DigitYearStart(t_SimpleDateFormat *self, PyObject *arg, void *data);
    static PyGetSetDef t_SimpleDateFormat__fields_[] = {
      DECLARE_GETSET_FIELD(t_SimpleDateFormat, 2DigitYearStart),
      { NULL, NULL, NULL, NULL, NULL }
    };

    static PyMethodDef t_SimpleDateFormat__methods_[] = {
      DECLARE_METHOD(t_SimpleDateFormat, cast_, METH_O | METH_CLASS),
      DECLARE_METHOD(t_SimpleDateFormat, instance_, METH_O | METH_CLASS),
      DECLARE_METHOD(t_SimpleDateFormat, applyLocalizedPattern, METH_O),
      DECLARE_METHOD(t_SimpleDateFormat, applyPattern, METH_O),
      DECLARE_METHOD(t_SimpleDateFormat, clone, METH_VARARGS),
      DECLARE_METHOD(t_SimpleDateFormat, equals, METH_VARARGS),
      DECLARE_METHOD(t_SimpleDateFormat, get2DigitYearStart, METH_NOARGS),
      DECLARE_METHOD(t_SimpleDateFormat, hashCode, METH_VARARGS),
      DECLARE_METHOD(t_SimpleDateFormat, set2DigitYearStart, METH_O),
      DECLARE_METHOD(t_SimpleDateFormat, toLocalizedPattern, METH_NOARGS),
      DECLARE_METHOD(t_SimpleDateFormat, toPattern, METH_NOARGS),
      { NULL, NULL, 0, NULL }
    };

    static PyType_Slot PY_TYPE_SLOTS(SimpleDateFormat)[] = {
      { Py_tp_methods, t_SimpleDateFormat__methods_ },
      { Py_tp_init, (void *) t_SimpleDateFormat_init_ },
      { Py_tp_getset, t_SimpleDateFormat__fields_ },
      { 0, NULL }
    };

    static PyType_Def *PY_TYPE_BASES(SimpleDateFormat)[] = {
      &PY_TYPE_DEF(::java::text::DateFormat),
      NULL
    };

    DEFINE_TYPE(SimpleDateFormat, t_SimpleDateFormat, SimpleDateFormat);

    void t_SimpleDateFormat::install(PyObject *module)
    {
      installType(&PY_TYPE(SimpleDateFormat), &PY_TYPE_DEF(SimpleDateFormat), module, "SimpleDateFormat", 0);
    }

    void t_SimpleDateFormat::initialize(PyObject *module)
    {
      PyObject_SetAttrString((PyObject *) PY_TYPE(SimpleDateFormat), "class_", make_descriptor(SimpleDateFormat::initializeClass, 1));
      PyObject_SetAttrString((PyObject *) PY_TYPE(SimpleDateFormat), "wrapfn_", make_descriptor(t_SimpleDateFormat::wrap_jobject));
      PyObject_SetAttrString((PyObject *) PY_TYPE(SimpleDateFormat), "boxfn_", make_descriptor(boxObject));
    }

    static PyObject *t_SimpleDateFormat_cast_(PyTypeObject *type, PyObject *arg)
    {
      if (!(arg = castCheck(arg, SimpleDateFormat::initializeClass, 1)))
        return NULL;
      return t_SimpleDateFormat::wrap_Object(SimpleDateFormat(((t_SimpleDateFormat *) arg)->object.this$));
    }
    static PyObject *t_SimpleDateFormat_instance_(PyTypeObject *type, PyObject *arg)
    {
      if (!castCheck(arg, SimpleDateFormat::initializeClass, 0))
        Py_RETURN_FALSE;
      Py_RETURN_TRUE;
    }

    static int t_SimpleDateFormat_init_(t_SimpleDateFormat *self, PyObject *args, PyObject *kwds)
    {
      switch (PyTuple_GET_SIZE(args)) {
       case 0:
        {
          SimpleDateFormat object((jobject) NULL);

          INT_CALL(object = SimpleDateFormat());
          self->object = object;
          break;
        }
       case 1:
        {
          ::java::lang::String a0((jobject) NULL);
          SimpleDateFormat object((jobject) NULL);

          if (!parseArgs(args, "s", &a0))
          {
            INT_CALL(object = SimpleDateFormat(a0));
            self->object = object;
            break;
          }
        }
        goto err;
       case 2:
        {
          ::java::lang::String a0((jobject) NULL);
          ::java::util::Locale a1((jobject) NULL);
          SimpleDateFormat object((jobject) NULL);

          if (!parseArgs(args, "sk", ::java::util::Locale::initializeClass, &a0, &a1))
          {
            INT_CALL(object = SimpleDateFormat(a0, a1));
            self->object = object;
            break;
          }
        }
       default:
       err:
        PyErr_SetArgsError((PyObject *) self, "__init__", args);
        return -1;
      }

      return 0;
    }

    static PyObject *t_SimpleDateFormat_applyLocalizedPattern(t_SimpleDateFormat *self, PyObject *arg)
    {
      ::java::lang::String a0((jobject) NULL);

      if (!parseArg(arg, "s", &a0))
      {
        OBJ_CALL(self->object.applyLocalizedPattern(a0));
        Py_RETURN_NONE;
      }

      PyErr_SetArgsError((PyObject *) self, "applyLocalizedPattern", arg);
      return NULL;
    }

    static PyObject *t_SimpleDateFormat_applyPattern(t_SimpleDateFormat *self, PyObject *arg)
    {
      ::java::lang::String a0((jobject) NULL);

      if (!parseArg(arg, "s", &a0))
      {
        OBJ_CALL(self->object.applyPattern(a0));
        Py_RETURN_NONE;
      }

      PyErr_SetArgsError((PyObject *) self, "applyPattern", arg);
      return NULL;
    }

    static PyObject *t_SimpleDateFormat_clone(t_SimpleDateFormat *self, PyObject *args)
    {
      ::java::lang::Object result((jobject) NULL);

      if (!parseArgs(args, ""))
      {
        OBJ_CALL(result = self->object.clone());
        return ::java::lang::t_Object::wrap_Object(result);
      }

      return callSuper(PY_TYPE(SimpleDateFormat), (PyObject *) self, "clone", args, 2);
    }

    static PyObject *t_SimpleDateFormat_equals(t_SimpleDateFormat *self, PyObject *args)
    {
      ::java::lang::Object a0((jobject) NULL);
      jboolean result;

      if (!parseArgs(args, "o", &a0))
      {
        OBJ_CALL(result = self->object.equals(a0));
        Py_RETURN_BOOL(result);
      }

      return callSuper(PY_TYPE(SimpleDateFormat), (PyObject *) self, "equals", args, 2);
    }

    static PyObject *t_SimpleDateFormat_get2DigitYearStart(t_SimpleDateFormat *self)
    {
      ::java::util::Date result((jobject) NULL);
      OBJ_CALL(result = self->object.get2DigitYearStart());
      return ::java::util::t_Date::wrap_Object(result);
    }

    static PyObject *t_SimpleDateFormat_hashCode(t_SimpleDateFormat *self, PyObject *args)
    {
      jint result;

      if (!parseArgs(args, ""))
      {
        OBJ_CALL(result = self->object.hashCode());
        return PyLong_FromLong((long) result);
      }

      return callSuper(PY_TYPE(SimpleDateFormat), (PyObject *) self, "hashCode", args, 2);
    }

    static PyObject *t_SimpleDateFormat_set2DigitYearStart(t_SimpleDateFormat *self, PyObject *arg)
    {
      ::java::util::Date a0((jobject) NULL);

      if (!parseArg(arg, "k", ::java::util::Date::initializeClass, &a0))
      {
        OBJ_CALL(self->object.set2DigitYearStart(a0));
        Py_RETURN_NONE;
      }

      PyErr_SetArgsError((PyObject *) self, "set2DigitYearStart", arg);
      return NULL;
    }

    static PyObject *t_SimpleDateFormat_toLocalizedPattern(t_SimpleDateFormat *self)
    {
      ::java::lang::String result((jobject) NULL);
      OBJ_CALL(result = self->object.toLocalizedPattern());
      return j2p(result);
    }

    static PyObject *t_SimpleDateFormat_toPattern(t_SimpleDateFormat *self)
    {
      ::java::lang::String result((jobject) NULL);
      OBJ_CALL(result = self->object.toPattern());
      return j2p(result);
    }

    static PyObject *t_SimpleDateFormat_get__2DigitYearStart(t_SimpleDateFormat *self, void *data)
    {
      ::java::util::Date value((jobject) NULL);
      OBJ_CALL(value = self->object.get2DigitYearStart());
      return ::java::util::t_Date::wrap_Object(value);
    }
    static int t_SimpleDateFormat_set__2DigitYearStart(t_SimpleDateFormat *self, PyObject *arg, void *data)
    {
      {
        ::java::util::Date value((jobject) NULL);
        if (!parseArg(arg, "k", ::java::util::Date::initializeClass, &value))
        {
          INT_CALL(self->object.set2DigitYearStart(value));
          return 0;
        }
      }
      PyErr_SetArgsError((PyObject *) self, "2DigitYearStart", arg);
      return -1;
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/spatial3d/geom/GeoMembershipShape.h"
#include "org/apache/lucene/spatial3d/geom/GeoOutsideDistance.h"
#include "org/apache/lucene/spatial3d/geom/Membership.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace spatial3d {
        namespace geom {

          ::java::lang::Class *GeoMembershipShape::class$ = NULL;
          jmethodID *GeoMembershipShape::mids$ = NULL;
          bool GeoMembershipShape::live$ = false;

          jclass GeoMembershipShape::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/spatial3d/geom/GeoMembershipShape");

              class$ = new ::java::lang::Class(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace spatial3d {
        namespace geom {
          static PyObject *t_GeoMembershipShape_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_GeoMembershipShape_instance_(PyTypeObject *type, PyObject *arg);

          static PyMethodDef t_GeoMembershipShape__methods_[] = {
            DECLARE_METHOD(t_GeoMembershipShape, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_GeoMembershipShape, instance_, METH_O | METH_CLASS),
            { NULL, NULL, 0, NULL }
          };

          static PyType_Slot PY_TYPE_SLOTS(GeoMembershipShape)[] = {
            { Py_tp_methods, t_GeoMembershipShape__methods_ },
            { Py_tp_init, (void *) abstract_init },
            { 0, NULL }
          };

          static PyType_Def *PY_TYPE_BASES(GeoMembershipShape)[] = {
            &PY_TYPE_DEF(::org::apache::lucene::spatial3d::geom::GeoShape),
            NULL
          };

          DEFINE_TYPE(GeoMembershipShape, t_GeoMembershipShape, GeoMembershipShape);

          void t_GeoMembershipShape::install(PyObject *module)
          {
            installType(&PY_TYPE(GeoMembershipShape), &PY_TYPE_DEF(GeoMembershipShape), module, "GeoMembershipShape", 0);
          }

          void t_GeoMembershipShape::initialize(PyObject *module)
          {
            PyObject_SetAttrString((PyObject *) PY_TYPE(GeoMembershipShape), "class_", make_descriptor(GeoMembershipShape::initializeClass, 1));
            PyObject_SetAttrString((PyObject *) PY_TYPE(GeoMembershipShape), "wrapfn_", make_descriptor(t_GeoMembershipShape::wrap_jobject));
            PyObject_SetAttrString((PyObject *) PY_TYPE(GeoMembershipShape), "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_GeoMembershipShape_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, GeoMembershipShape::initializeClass, 1)))
              return NULL;
            return t_GeoMembershipShape::wrap_Object(GeoMembershipShape(((t_GeoMembershipShape *) arg)->object.this$));
          }
          static PyObject *t_GeoMembershipShape_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, GeoMembershipShape::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/util/bkd/PointWriter.h"
#include "org/apache/lucene/util/bkd/PointValue.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/util/bkd/PointReader.h"
#include "java/io/IOException.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        namespace bkd {

          ::java::lang::Class *PointWriter::class$ = NULL;
          jmethodID *PointWriter::mids$ = NULL;
          bool PointWriter::live$ = false;

          jclass PointWriter::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/util/bkd/PointWriter");

              mids$ = new jmethodID[max_mid];
              mids$[mid_append_c20445b6b5276287] = env->getMethodID(cls, "append", "(Lorg/apache/lucene/util/bkd/PointValue;)V");
              mids$[mid_append_2a8b02a5adcbf830] = env->getMethodID(cls, "append", "([BI)V");
              mids$[mid_count_2e5ae9edcb9b072f] = env->getMethodID(cls, "count", "()J");
              mids$[mid_destroy_f2cc1bce94666404] = env->getMethodID(cls, "destroy", "()V");
              mids$[mid_getReader_d2caf9396a104071] = env->getMethodID(cls, "getReader", "(JJ)Lorg/apache/lucene/util/bkd/PointReader;");

              class$ = new ::java::lang::Class(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          void PointWriter::append(const ::org::apache::lucene::util::bkd::PointValue & a0) const
          {
            env->callVoidMethod(this$, mids$[mid_append_c20445b6b5276287], a0.this$);
          }

          void PointWriter::append(const JArray< jbyte > & a0, jint a1) const
          {
            env->callVoidMethod(this$, mids$[mid_append_2a8b02a5adcbf830], a0.this$, a1);
          }

          jlong PointWriter::count() const
          {
            return env->callLongMethod(this$, mids$[mid_count_2e5ae9edcb9b072f]);
          }

          void PointWriter::destroy() const
          {
            env->callVoidMethod(this$, mids$[mid_destroy_f2cc1bce94666404]);
          }

          ::org::apache::lucene::util::bkd::PointReader PointWriter::getReader(jlong a0, jlong a1) const
          {
            return ::org::apache::lucene::util::bkd::PointReader(env->callObjectMethod(this$, mids$[mid_getReader_d2caf9396a104071], a0, a1));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        namespace bkd {
          static PyObject *t_PointWriter_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_PointWriter_instance_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_PointWriter_append(t_PointWriter *self, PyObject *args);
          static PyObject *t_PointWriter_count(t_PointWriter *self);
          static PyObject *t_PointWriter_destroy(t_PointWriter *self);
          static PyObject *t_PointWriter_getReader(t_PointWriter *self, PyObject *args);

          static PyMethodDef t_PointWriter__methods_[] = {
            DECLARE_METHOD(t_PointWriter, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_PointWriter, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_PointWriter, append, METH_VARARGS),
            DECLARE_METHOD(t_PointWriter, count, METH_NOARGS),
            DECLARE_METHOD(t_PointWriter, destroy, METH_NOARGS),
            DECLARE_METHOD(t_PointWriter, getReader, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          static PyType_Slot PY_TYPE_SLOTS(PointWriter)[] = {
            { Py_tp_methods, t_PointWriter__methods_ },
            { Py_tp_init, (void *) abstract_init },
            { 0, NULL }
          };

          static PyType_Def *PY_TYPE_BASES(PointWriter)[] = {
            &PY_TYPE_DEF(::java::io::Closeable),
            NULL
          };

          DEFINE_TYPE(PointWriter, t_PointWriter, PointWriter);

          void t_PointWriter::install(PyObject *module)
          {
            installType(&PY_TYPE(PointWriter), &PY_TYPE_DEF(PointWriter), module, "PointWriter", 0);
          }

          void t_PointWriter::initialize(PyObject *module)
          {
            PyObject_SetAttrString((PyObject *) PY_TYPE(PointWriter), "class_", make_descriptor(PointWriter::initializeClass, 1));
            PyObject_SetAttrString((PyObject *) PY_TYPE(PointWriter), "wrapfn_", make_descriptor(t_PointWriter::wrap_jobject));
            PyObject_SetAttrString((PyObject *) PY_TYPE(PointWriter), "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_PointWriter_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, PointWriter::initializeClass, 1)))
              return NULL;
            return t_PointWriter::wrap_Object(PointWriter(((t_PointWriter *) arg)->object.this$));
          }
          static PyObject *t_PointWriter_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, PointWriter::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static PyObject *t_PointWriter_append(t_PointWriter *self, PyObject *args)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 1:
              {
                ::org::apache::lucene::util::bkd::PointValue a0((jobject) NULL);

                if (!parseArgs(args, "k", ::org::apache::lucene::util::bkd::PointValue::initializeClass, &a0))
                {
                  OBJ_CALL(self->object.append(a0));
                  Py_RETURN_NONE;
                }
              }
              break;
             case 2:
              {
                JArray< jbyte > a0((jobject) NULL);
                jint a1;

                if (!parseArgs(args, "[BI", &a0, &a1))
                {
                  OBJ_CALL(self->object.append(a0, a1));
                  Py_RETURN_NONE;
                }
              }
            }

            PyErr_SetArgsError((PyObject *) self, "append", args);
            return NULL;
          }

          static PyObject *t_PointWriter_count(t_PointWriter *self)
          {
            jlong result;
            OBJ_CALL(result = self->object.count());
            return PyLong_FromLongLong((PY_LONG_LONG) result);
          }

          static PyObject *t_PointWriter_destroy(t_PointWriter *self)
          {
            OBJ_CALL(self->object.destroy());
            Py_RETURN_NONE;
          }

          static PyObject *t_PointWriter_getReader(t_PointWriter *self, PyObject *args)
          {
            jlong a0;
            jlong a1;
            ::org::apache::lucene::util::bkd::PointReader result((jobject) NULL);

            if (!parseArgs(args, "JJ", &a0, &a1))
            {
              OBJ_CALL(result = self->object.getReader(a0, a1));
              return ::org::apache::lucene::util::bkd::t_PointReader::wrap_Object(result);
            }

            PyErr_SetArgsError((PyObject *) self, "getReader", args);
            return NULL;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/util/mutable/MutableValueDouble.h"
#include "java/lang/Object.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        namespace mutable$ {

          ::java::lang::Class *MutableValueDouble::class$ = NULL;
          jmethodID *MutableValueDouble::mids$ = NULL;
          jfieldID *MutableValueDouble::fids$ = NULL;
          bool MutableValueDouble::live$ = false;

          jclass MutableValueDouble::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/util/mutable/MutableValueDouble");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_f2cc1bce94666404] = env->getMethodID(cls, "<init>", "()V");
              mids$[mid_compareSameType_5a4805a36cf611e7] = env->getMethodID(cls, "compareSameType", "(Ljava/lang/Object;)I");
              mids$[mid_copy_3a4da6d6b1464d7a] = env->getMethodID(cls, "copy", "(Lorg/apache/lucene/util/mutable/MutableValue;)V");
              mids$[mid_duplicate_b6a1db04136f7d9b] = env->getMethodID(cls, "duplicate", "()Lorg/apache/lucene/util/mutable/MutableValue;");
              mids$[mid_equalsSameType_8b72f2dcdde6fd1d] = env->getMethodID(cls, "equalsSameType", "(Ljava/lang/Object;)Z");
              mids$[mid_hashCode_9972fcc56b44e79d] = env->getMethodID(cls, "hashCode", "()I");
              mids$[mid_toObject_d6bcd06f3102c4d9] = env->getMethodID(cls, "toObject", "()Ljava/lang/Object;");

              fids$ = new jfieldID[max_fid];
              fids$[fid_value] = env->getFieldID(cls, "value", "D");

              class$ = new ::java::lang::Class(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          MutableValueDouble::MutableValueDouble() : ::org::apache::lucene::util::mutable$::MutableValue(env->newObject(initializeClass, &mids$, mid_init$_f2cc1bce94666404)) {}

          jint MutableValueDouble::compareSameType(const ::java::lang::Object & a0) const
          {
            return env->callIntMethod(this$, mids$[mid_compareSameType_5a4805a36cf611e7], a0.this$);
          }

          void MutableValueDouble::copy(const ::org::apache::lucene::util::mutable$::MutableValue & a0) const
          {
            env->callVoidMethod(this$, mids$[mid_copy_3a4da6d6b1464d7a], a0.this$);
          }

          ::org::apache::lucene::util::mutable$::MutableValue MutableValueDouble::duplicate() const
          {
            return ::org::apache::lucene::util::mutable$::MutableValue(env->callObjectMethod(this$, mids$[mid_duplicate_b6a1db04136f7d9b]));
          }

          jboolean MutableValueDouble::equalsSameType(const ::java::lang::Object & a0) const
          {
            return env->callBooleanMethod(this$, mids$[mid_equalsSameType_8b72f2dcdde6fd1d], a0.this$);
          }

          jint MutableValueDouble::hashCode() const
          {
            return env->callIntMethod(this$, mids$[mid_hashCode_9972fcc56b44e79d]);
          }

          ::java::lang::Object MutableValueDouble::toObject() const
          {
            return ::java::lang::Object(env->callObjectMethod(this$, mids$[mid_toObject_d6bcd06f3102c4d9]));
          }

          jdouble MutableValueDouble::_get_value() const
          {
            return env->getDoubleField(this$, fids$[fid_value]);
          }

          void MutableValueDouble::_set_value(jdouble a0) const
          {
            env->setDoubleField(this$, fids$[fid_value], a0);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        namespace mutable$ {
          static PyObject *t_MutableValueDouble_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_MutableValueDouble_instance_(PyTypeObject *type, PyObject *arg);
          static int t_MutableValueDouble_init_(t_MutableValueDouble *self, PyObject *args, PyObject *kwds);
          static PyObject *t_MutableValueDouble_compareSameType(t_MutableValueDouble *self, PyObject *args);
          static PyObject *t_MutableValueDouble_copy(t_MutableValueDouble *self, PyObject *args);
          static PyObject *t_MutableValueDouble_duplicate(t_MutableValueDouble *self, PyObject *args);
          static PyObject *t_MutableValueDouble_equalsSameType(t_MutableValueDouble *self, PyObject *args);
          static PyObject *t_MutableValueDouble_hashCode(t_MutableValueDouble *self, PyObject *args);
          static PyObject *t_MutableValueDouble_toObject(t_MutableValueDouble *self, PyObject *args);
          static PyObject *t_MutableValueDouble_get__value(t_MutableValueDouble *self, void *data);
          static int t_MutableValueDouble_set__value(t_MutableValueDouble *self, PyObject *arg, void *data);

          static PyGetSetDef t_MutableValueDouble__fields_[] = {
            DECLARE_GETSET_FIELD(t_MutableValueDouble, value),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_MutableValueDouble__methods_[] = {
            DECLARE_METHOD(t_MutableValueDouble, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_MutableValueDouble, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_MutableValueDouble, compareSameType, METH_VARARGS),
            DECLARE_METHOD(t_MutableValueDouble, copy, METH_VARARGS),
            DECLARE_METHOD(t_MutableValueDouble, duplicate, METH_VARARGS),
            DECLARE_METHOD(t_MutableValueDouble, equalsSameType, METH_VARARGS),
            DECLARE_METHOD(t_MutableValueDouble, hashCode, METH_VARARGS),
            DECLARE_METHOD(t_MutableValueDouble, toObject, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          static PyType_Slot PY_TYPE_SLOTS(MutableValueDouble)[] = {
            { Py_tp_methods, t_MutableValueDouble__methods_ },
            { Py_tp_init, (void *) t_MutableValueDouble_init_ },
            { Py_tp_getset, t_MutableValueDouble__fields_ },
            { 0, NULL }
          };

          static PyType_Def *PY_TYPE_BASES(MutableValueDouble)[] = {
            &PY_TYPE_DEF(::org::apache::lucene::util::mutable$::MutableValue),
            NULL
          };

          DEFINE_TYPE(MutableValueDouble, t_MutableValueDouble, MutableValueDouble);

          void t_MutableValueDouble::install(PyObject *module)
          {
            installType(&PY_TYPE(MutableValueDouble), &PY_TYPE_DEF(MutableValueDouble), module, "MutableValueDouble", 0);
          }

          void t_MutableValueDouble::initialize(PyObject *module)
          {
            PyObject_SetAttrString((PyObject *) PY_TYPE(MutableValueDouble), "class_", make_descriptor(MutableValueDouble::initializeClass, 1));
            PyObject_SetAttrString((PyObject *) PY_TYPE(MutableValueDouble), "wrapfn_", make_descriptor(t_MutableValueDouble::wrap_jobject));
            PyObject_SetAttrString((PyObject *) PY_TYPE(MutableValueDouble), "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_MutableValueDouble_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, MutableValueDouble::initializeClass, 1)))
              return NULL;
            return t_MutableValueDouble::wrap_Object(MutableValueDouble(((t_MutableValueDouble *) arg)->object.this$));
          }
          static PyObject *t_MutableValueDouble_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, MutableValueDouble::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_MutableValueDouble_init_(t_MutableValueDouble *self, PyObject *args, PyObject *kwds)
          {
            MutableValueDouble object((jobject) NULL);

            INT_CALL(object = MutableValueDouble());
            self->object = object;

            return 0;
          }

          static PyObject *t_MutableValueDouble_compareSameType(t_MutableValueDouble *self, PyObject *args)
          {
            ::java::lang::Object a0((jobject) NULL);
            jint result;

            if (!parseArgs(args, "o", &a0))
            {
              OBJ_CALL(result = self->object.compareSameType(a0));
              return PyLong_FromLong((long) result);
            }

            return callSuper(PY_TYPE(MutableValueDouble), (PyObject *) self, "compareSameType", args, 2);
          }

          static PyObject *t_MutableValueDouble_copy(t_MutableValueDouble *self, PyObject *args)
          {
            ::org::apache::lucene::util::mutable$::MutableValue a0((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::util::mutable$::MutableValue::initializeClass, &a0))
            {
              OBJ_CALL(self->object.copy(a0));
              Py_RETURN_NONE;
            }

            return callSuper(PY_TYPE(MutableValueDouble), (PyObject *) self, "copy", args, 2);
          }

          static PyObject *t_MutableValueDouble_duplicate(t_MutableValueDouble *self, PyObject *args)
          {
            ::org::apache::lucene::util::mutable$::MutableValue result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.duplicate());
              return ::org::apache::lucene::util::mutable$::t_MutableValue::wrap_Object(result);
            }

            return callSuper(PY_TYPE(MutableValueDouble), (PyObject *) self, "duplicate", args, 2);
          }

          static PyObject *t_MutableValueDouble_equalsSameType(t_MutableValueDouble *self, PyObject *args)
          {
            ::java::lang::Object a0((jobject) NULL);
            jboolean result;

            if (!parseArgs(args, "o", &a0))
            {
              OBJ_CALL(result = self->object.equalsSameType(a0));
              Py_RETURN_BOOL(result);
            }

            return callSuper(PY_TYPE(MutableValueDouble), (PyObject *) self, "equalsSameType", args, 2);
          }

          static PyObject *t_MutableValueDouble_hashCode(t_MutableValueDouble *self, PyObject *args)
          {
            jint result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.hashCode());
              return PyLong_FromLong((long) result);
            }

            return callSuper(PY_TYPE(MutableValueDouble), (PyObject *) self, "hashCode", args, 2);
          }

          static PyObject *t_MutableValueDouble_toObject(t_MutableValueDouble *self, PyObject *args)
          {
            ::java::lang::Object result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.toObject());
              return ::java::lang::t_Object::wrap_Object(result);
            }

            return callSuper(PY_TYPE(MutableValueDouble), (PyObject *) self, "toObject", args, 2);
          }

          static PyObject *t_MutableValueDouble_get__value(t_MutableValueDouble *self, void *data)
          {
            jdouble value;
            OBJ_CALL(value = self->object._get_value());
            return PyFloat_FromDouble((double) value);
          }
          static int t_MutableValueDouble_set__value(t_MutableValueDouble *self, PyObject *arg, void *data)
          {
            jdouble value;
            if (!parseArg(arg, "D", &value))
            {
              INT_CALL(self->object._set_value(value));
              return 0;
            }
            PyErr_SetArgsError((PyObject *) self, "value", arg);
            return -1;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/classification/utils/DocToDoubleVectorUtils.h"
#include "org/apache/lucene/index/Terms.h"
#include "java/io/IOException.h"
#include "java/lang/Double.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace classification {
        namespace utils {

          ::java::lang::Class *DocToDoubleVectorUtils::class$ = NULL;
          jmethodID *DocToDoubleVectorUtils::mids$ = NULL;
          bool DocToDoubleVectorUtils::live$ = false;

          jclass DocToDoubleVectorUtils::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/classification/utils/DocToDoubleVectorUtils");

              mids$ = new jmethodID[max_mid];
              mids$[mid_toDenseLocalFreqDoubleArray_0a754fcf79caa770] = env->getStaticMethodID(cls, "toDenseLocalFreqDoubleArray", "(Lorg/apache/lucene/index/Terms;)[Ljava/lang/Double;");
              mids$[mid_toSparseLocalFreqDoubleArray_bfa3ce1b9cd680f1] = env->getStaticMethodID(cls, "toSparseLocalFreqDoubleArray", "(Lorg/apache/lucene/index/Terms;Lorg/apache/lucene/index/Terms;)[Ljava/lang/Double;");

              class$ = new ::java::lang::Class(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          JArray< ::java::lang::Double > DocToDoubleVectorUtils::toDenseLocalFreqDoubleArray(const ::org::apache::lucene::index::Terms & a0)
          {
            jclass cls = env->getClass(initializeClass);
            return JArray< ::java::lang::Double >(env->callStaticObjectMethod(cls, mids$[mid_toDenseLocalFreqDoubleArray_0a754fcf79caa770], a0.this$));
          }

          JArray< ::java::lang::Double > DocToDoubleVectorUtils::toSparseLocalFreqDoubleArray(const ::org::apache::lucene::index::Terms & a0, const ::org::apache::lucene::index::Terms & a1)
          {
            jclass cls = env->getClass(initializeClass);
            return JArray< ::java::lang::Double >(env->callStaticObjectMethod(cls, mids$[mid_toSparseLocalFreqDoubleArray_bfa3ce1b9cd680f1], a0.this$, a1.this$));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace classification {
        namespace utils {
          static PyObject *t_DocToDoubleVectorUtils_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_DocToDoubleVectorUtils_instance_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_DocToDoubleVectorUtils_toDenseLocalFreqDoubleArray(PyTypeObject *type, PyObject *arg);
          static PyObject *t_DocToDoubleVectorUtils_toSparseLocalFreqDoubleArray(PyTypeObject *type, PyObject *args);

          static PyMethodDef t_DocToDoubleVectorUtils__methods_[] = {
            DECLARE_METHOD(t_DocToDoubleVectorUtils, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_DocToDoubleVectorUtils, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_DocToDoubleVectorUtils, toDenseLocalFreqDoubleArray, METH_O | METH_CLASS),
            DECLARE_METHOD(t_DocToDoubleVectorUtils, toSparseLocalFreqDoubleArray, METH_VARARGS | METH_CLASS),
            { NULL, NULL, 0, NULL }
          };

          static PyType_Slot PY_TYPE_SLOTS(DocToDoubleVectorUtils)[] = {
            { Py_tp_methods, t_DocToDoubleVectorUtils__methods_ },
            { Py_tp_init, (void *) abstract_init },
            { 0, NULL }
          };

          static PyType_Def *PY_TYPE_BASES(DocToDoubleVectorUtils)[] = {
            &PY_TYPE_DEF(::java::lang::Object),
            NULL
          };

          DEFINE_TYPE(DocToDoubleVectorUtils, t_DocToDoubleVectorUtils, DocToDoubleVectorUtils);

          void t_DocToDoubleVectorUtils::install(PyObject *module)
          {
            installType(&PY_TYPE(DocToDoubleVectorUtils), &PY_TYPE_DEF(DocToDoubleVectorUtils), module, "DocToDoubleVectorUtils", 0);
          }

          void t_DocToDoubleVectorUtils::initialize(PyObject *module)
          {
            PyObject_SetAttrString((PyObject *) PY_TYPE(DocToDoubleVectorUtils), "class_", make_descriptor(DocToDoubleVectorUtils::initializeClass, 1));
            PyObject_SetAttrString((PyObject *) PY_TYPE(DocToDoubleVectorUtils), "wrapfn_", make_descriptor(t_DocToDoubleVectorUtils::wrap_jobject));
            PyObject_SetAttrString((PyObject *) PY_TYPE(DocToDoubleVectorUtils), "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_DocToDoubleVectorUtils_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, DocToDoubleVectorUtils::initializeClass, 1)))
              return NULL;
            return t_DocToDoubleVectorUtils::wrap_Object(DocToDoubleVectorUtils(((t_DocToDoubleVectorUtils *) arg)->object.this$));
          }
          static PyObject *t_DocToDoubleVectorUtils_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, DocToDoubleVectorUtils::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static PyObject *t_DocToDoubleVectorUtils_toDenseLocalFreqDoubleArray(PyTypeObject *type, PyObject *arg)
          {
            ::org::apache::lucene::index::Terms a0((jobject) NULL);
            JArray< ::java::lang::Double > result((jobject) NULL);

            if (!parseArg(arg, "k", ::org::apache::lucene::index::Terms::initializeClass, &a0))
            {
              OBJ_CALL(result = ::org::apache::lucene::classification::utils::DocToDoubleVectorUtils::toDenseLocalFreqDoubleArray(a0));
              return JArray<jobject>(result.this$).wrap(::java::lang::t_Double::wrap_jobject);
            }

            PyErr_SetArgsError(type, "toDenseLocalFreqDoubleArray", arg);
            return NULL;
          }

          static PyObject *t_DocToDoubleVectorUtils_toSparseLocalFreqDoubleArray(PyTypeObject *type, PyObject *args)
          {
            ::org::apache::lucene::index::Terms a0((jobject) NULL);
            ::org::apache::lucene::index::Terms a1((jobject) NULL);
            JArray< ::java::lang::Double > result((jobject) NULL);

            if (!parseArgs(args, "kk", ::org::apache::lucene::index::Terms::initializeClass, ::org::apache::lucene::index::Terms::initializeClass, &a0, &a1))
            {
              OBJ_CALL(result = ::org::apache::lucene::classification::utils::DocToDoubleVectorUtils::toSparseLocalFreqDoubleArray(a0, a1));
              return JArray<jobject>(result.this$).wrap(::java::lang::t_Double::wrap_jobject);
            }

            PyErr_SetArgsError(type, "toSparseLocalFreqDoubleArray", args);
            return NULL;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/document/BinaryDocValuesField.h"
#include "org/apache/lucene/util/BytesRef.h"
#include "java/lang/String.h"
#include "org/apache/lucene/document/FieldType.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace document {

        ::java::lang::Class *BinaryDocValuesField::class$ = NULL;
        jmethodID *BinaryDocValuesField::mids$ = NULL;
        bool BinaryDocValuesField::live$ = false;
        ::org::apache::lucene::document::FieldType *BinaryDocValuesField::TYPE = NULL;

        jclass BinaryDocValuesField::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/document/BinaryDocValuesField");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_63a59e248b245c2c] = env->getMethodID(cls, "<init>", "(Ljava/lang/String;Lorg/apache/lucene/util/BytesRef;)V");

            class$ = new ::java::lang::Class(cls);
            cls = (jclass) class$->this$;

            TYPE = new ::org::apache::lucene::document::FieldType(env->getStaticObjectField(cls, "TYPE", "Lorg/apache/lucene/document/FieldType;"));
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        BinaryDocValuesField::BinaryDocValuesField(const ::java::lang::String & a0, const ::org::apache::lucene::util::BytesRef & a1) : ::org::apache::lucene::document::Field(env->newObject(initializeClass, &mids$, mid_init$_63a59e248b245c2c, a0.this$, a1.this$)) {}
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace document {
        static PyObject *t_BinaryDocValuesField_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_BinaryDocValuesField_instance_(PyTypeObject *type, PyObject *arg);
        static int t_BinaryDocValuesField_init_(t_BinaryDocValuesField *self, PyObject *args, PyObject *kwds);

        static PyMethodDef t_BinaryDocValuesField__methods_[] = {
          DECLARE_METHOD(t_BinaryDocValuesField, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_BinaryDocValuesField, instance_, METH_O | METH_CLASS),
          { NULL, NULL, 0, NULL }
        };

        static PyType_Slot PY_TYPE_SLOTS(BinaryDocValuesField)[] = {
          { Py_tp_methods, t_BinaryDocValuesField__methods_ },
          { Py_tp_init, (void *) t_BinaryDocValuesField_init_ },
          { 0, NULL }
        };

        static PyType_Def *PY_TYPE_BASES(BinaryDocValuesField)[] = {
          &PY_TYPE_DEF(::org::apache::lucene::document::Field),
          NULL
        };

        DEFINE_TYPE(BinaryDocValuesField, t_BinaryDocValuesField, BinaryDocValuesField);

        void t_BinaryDocValuesField::install(PyObject *module)
        {
          installType(&PY_TYPE(BinaryDocValuesField), &PY_TYPE_DEF(BinaryDocValuesField), module, "BinaryDocValuesField", 0);
        }

        void t_BinaryDocValuesField::initialize(PyObject *module)
        {
          PyObject_SetAttrString((PyObject *) PY_TYPE(BinaryDocValuesField), "class_", make_descriptor(BinaryDocValuesField::initializeClass, 1));
          PyObject_SetAttrString((PyObject *) PY_TYPE(BinaryDocValuesField), "wrapfn_", make_descriptor(t_BinaryDocValuesField::wrap_jobject));
          PyObject_SetAttrString((PyObject *) PY_TYPE(BinaryDocValuesField), "boxfn_", make_descriptor(boxObject));
          env->getClass(BinaryDocValuesField::initializeClass);
          PyObject_SetAttrString((PyObject *) PY_TYPE(BinaryDocValuesField), "TYPE", make_descriptor(::org::apache::lucene::document::t_FieldType::wrap_Object(*BinaryDocValuesField::TYPE)));
        }

        static PyObject *t_BinaryDocValuesField_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, BinaryDocValuesField::initializeClass, 1)))
            return NULL;
          return t_BinaryDocValuesField::wrap_Object(BinaryDocValuesField(((t_BinaryDocValuesField *) arg)->object.this$));
        }
        static PyObject *t_BinaryDocValuesField_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, BinaryDocValuesField::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_BinaryDocValuesField_init_(t_BinaryDocValuesField *self, PyObject *args, PyObject *kwds)
        {
          ::java::lang::String a0((jobject) NULL);
          ::org::apache::lucene::util::BytesRef a1((jobject) NULL);
          BinaryDocValuesField object((jobject) NULL);

          if (!parseArgs(args, "sk", ::org::apache::lucene::util::BytesRef::initializeClass, &a0, &a1))
          {
            INT_CALL(object = BinaryDocValuesField(a0, a1));
            self->object = object;
          }
          else
          {
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/expressions/js/JavascriptParser$BoolandContext.h"
#include "java/lang/Class.h"
#include "java/lang/Object.h"
#include "java/util/List.h"
#include "org/antlr/v4/runtime/Token.h"
#include "org/antlr/v4/runtime/atn/ParserATNSimulator.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace expressions {
        namespace js {

          ::java::lang::Class *JavascriptParser$BoolandContext::class$ = NULL;
          jmethodID *JavascriptParser$BoolandContext::mids$ = NULL;
          bool JavascriptParser$BoolandContext::live$ = false;

          jclass JavascriptParser$BoolandContext::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/expressions/js/JavascriptParser$BoolandContext");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_5b630188893587b5] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/expressions/js/JavascriptParser$ExpressionContext;)V");
              mids$[mid_expression_49ec78390f08338a] = env->getMethodID(cls, "expression", "()Ljava/util/List;");
              mids$[mid_expression_a4fb3fdc55d1c64a] = env->getMethodID(cls, "expression", "(I)Lorg/apache/lucene/expressions/js/JavascriptParser$ExpressionContext;");

              class$ = new ::java::lang::Class(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          JavascriptParser$BoolandContext::JavascriptParser$BoolandContext(const ::org::apache::lucene::expressions::js::JavascriptParser$ExpressionContext & a0) : ::org::apache::lucene::expressions::js::JavascriptParser$ExpressionContext(env->newObject(initializeClass, &mids$, mid_init$_5b630188893587b5, a0.this$)) {}

          ::java::util::List JavascriptParser$BoolandContext::expression() const
          {
            return ::java::util::List(env->callObjectMethod(this$, mids$[mid_expression_49ec78390f08338a]));
          }

          ::org::apache::lucene::expressions::js::JavascriptParser$ExpressionContext JavascriptParser$BoolandContext::expression(jint a0) const
          {
            return ::org::apache::lucene::expressions::js::JavascriptParser$ExpressionContext(env->callObjectMethod(this$, mids$[mid_expression_a4fb3fdc55d1c64a], a0));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace expressions {
        namespace js {
          static PyObject *t_JavascriptParser$BoolandContext_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_JavascriptParser$BoolandContext_instance_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_JavascriptParser$BoolandContext_of_(t_JavascriptParser$BoolandContext *self, PyObject *args);
          static int t_JavascriptParser$BoolandContext_init_(t_JavascriptParser$BoolandContext *self, PyObject *args, PyObject *kwds);
          static PyObject *t_JavascriptParser$BoolandContext_expression(t_JavascriptParser$BoolandContext *self, PyObject *args);
          static PyObject *t_JavascriptParser$BoolandContext_get__parameters_(t_JavascriptParser$BoolandContext *self, void *data);
          static PyGetSetDef t_JavascriptParser$BoolandContext__fields_[] = {
            DECLARE_GET_FIELD(t_JavascriptParser$BoolandContext, parameters_),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_JavascriptParser$BoolandContext__methods_[] = {
            DECLARE_METHOD(t_JavascriptParser$BoolandContext, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_JavascriptParser$BoolandContext, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_JavascriptParser$BoolandContext, of_, METH_VARARGS),
            DECLARE_METHOD(t_JavascriptParser$BoolandContext, expression, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          static PyType_Slot PY_TYPE_SLOTS(JavascriptParser$BoolandContext)[] = {
            { Py_tp_methods, t_JavascriptParser$BoolandContext__methods_ },
            { Py_tp_init, (void *) t_JavascriptParser$BoolandContext_init_ },
            { Py_tp_getset, t_JavascriptParser$BoolandContext__fields_ },
            { 0, NULL }
          };

          static PyType_Def *PY_TYPE_BASES(JavascriptParser$BoolandContext)[] = {
            &PY_TYPE_DEF(::org::apache::lucene::expressions::js::JavascriptParser$ExpressionContext),
            NULL
          };

          DEFINE_TYPE(JavascriptParser$BoolandContext, t_JavascriptParser$BoolandContext, JavascriptParser$BoolandContext);
          PyObject *t_JavascriptParser$BoolandContext::wrap_Object(const JavascriptParser$BoolandContext& object, PyTypeObject *p0, PyTypeObject *p1)
          {
            PyObject *obj = t_JavascriptParser$BoolandContext::wrap_Object(object);
            if (obj != NULL && obj != Py_None)
            {
              t_JavascriptParser$BoolandContext *self = (t_JavascriptParser$BoolandContext *) obj;
              self->parameters[0] = p0;
              self->parameters[1] = p1;
            }
            return obj;
          }

          PyObject *t_JavascriptParser$BoolandContext::wrap_jobject(const jobject& object, PyTypeObject *p0, PyTypeObject *p1)
          {
            PyObject *obj = t_JavascriptParser$BoolandContext::wrap_jobject(object);
            if (obj != NULL && obj != Py_None)
            {
              t_JavascriptParser$BoolandContext *self = (t_JavascriptParser$BoolandContext *) obj;
              self->parameters[0] = p0;
              self->parameters[1] = p1;
            }
            return obj;
          }

          void t_JavascriptParser$BoolandContext::install(PyObject *module)
          {
            installType(&PY_TYPE(JavascriptParser$BoolandContext), &PY_TYPE_DEF(JavascriptParser$BoolandContext), module, "JavascriptParser$BoolandContext", 0);
          }

          void t_JavascriptParser$BoolandContext::initialize(PyObject *module)
          {
            PyObject_SetAttrString((PyObject *) PY_TYPE(JavascriptParser$BoolandContext), "class_", make_descriptor(JavascriptParser$BoolandContext::initializeClass, 1));
            PyObject_SetAttrString((PyObject *) PY_TYPE(JavascriptParser$BoolandContext), "wrapfn_", make_descriptor(t_JavascriptParser$BoolandContext::wrap_jobject));
            PyObject_SetAttrString((PyObject *) PY_TYPE(JavascriptParser$BoolandContext), "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_JavascriptParser$BoolandContext_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, JavascriptParser$BoolandContext::initializeClass, 1)))
              return NULL;
            return t_JavascriptParser$BoolandContext::wrap_Object(JavascriptParser$BoolandContext(((t_JavascriptParser$BoolandContext *) arg)->object.this$));
          }
          static PyObject *t_JavascriptParser$BoolandContext_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, JavascriptParser$BoolandContext::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static PyObject *t_JavascriptParser$BoolandContext_of_(t_JavascriptParser$BoolandContext *self, PyObject *args)
          {
            if (!parseArg(args, "T", 2, &(self->parameters)))
              Py_RETURN_SELF;
            return PyErr_SetArgsError((PyObject *) self, "of_", args);
          }

          static int t_JavascriptParser$BoolandContext_init_(t_JavascriptParser$BoolandContext *self, PyObject *args, PyObject *kwds)
          {
            ::org::apache::lucene::expressions::js::JavascriptParser$ExpressionContext a0((jobject) NULL);
            PyTypeObject **p0;
            JavascriptParser$BoolandContext object((jobject) NULL);

            if (!parseArgs(args, "K", ::org::apache::lucene::expressions::js::JavascriptParser$ExpressionContext::initializeClass, &a0, &p0, ::org::apache::lucene::expressions::js::t_JavascriptParser$ExpressionContext::parameters_))
            {
              INT_CALL(object = JavascriptParser$BoolandContext(a0));
              self->object = object;
              self->parameters[0] = ::org::antlr::v4::runtime::PY_TYPE(Token);
              self->parameters[1] = ::org::antlr::v4::runtime::atn::PY_TYPE(ParserATNSimulator);
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_JavascriptParser$BoolandContext_expression(t_JavascriptParser$BoolandContext *self, PyObject *args)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 0:
              {
                ::java::util::List result((jobject) NULL);
                OBJ_CALL(result = self->object.expression());
                return ::java::util::t_List::wrap_Object(result, ::org::apache::lucene::expressions::js::PY_TYPE(JavascriptParser$ExpressionContext));
              }
              break;
             case 1:
              {
                jint a0;
                ::org::apache::lucene::expressions::js::JavascriptParser$ExpressionContext result((jobject) NULL);

                if (!parseArgs(args, "I", &a0))
                {
                  OBJ_CALL(result = self->object.expression(a0));
                  return ::org::apache::lucene::expressions::js::t_JavascriptParser$ExpressionContext::wrap_Object(result);
                }
              }
            }

            PyErr_SetArgsError((PyObject *) self, "expression", args);
            return NULL;
          }
          static PyObject *t_JavascriptParser$BoolandContext_get__parameters_(t_JavascriptParser$BoolandContext *self, void *data)
          {
            return typeParameters(self->parameters, sizeof(self->parameters));
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/geo/Line.h"
#include "java/lang/Object.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace geo {

        ::java::lang::Class *Line::class$ = NULL;
        jmethodID *Line::mids$ = NULL;
        jfieldID *Line::fids$ = NULL;
        bool Line::live$ = false;

        jclass Line::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/geo/Line");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_1d56dd1258093787] = env->getMethodID(cls, "<init>", "([D[D)V");
            mids$[mid_equals_8b72f2dcdde6fd1d] = env->getMethodID(cls, "equals", "(Ljava/lang/Object;)Z");
            mids$[mid_getLat_f3ddedc0b6f18620] = env->getMethodID(cls, "getLat", "(I)D");
            mids$[mid_getLats_7f7ead8cd9ac7585] = env->getMethodID(cls, "getLats", "()[D");
            mids$[mid_getLon_f3ddedc0b6f18620] = env->getMethodID(cls, "getLon", "(I)D");
            mids$[mid_getLons_7f7ead8cd9ac7585] = env->getMethodID(cls, "getLons", "()[D");
            mids$[mid_hashCode_9972fcc56b44e79d] = env->getMethodID(cls, "hashCode", "()I");
            mids$[mid_numPoints_9972fcc56b44e79d] = env->getMethodID(cls, "numPoints", "()I");
            mids$[mid_toGeoJSON_db9b55ba01e03e4b] = env->getMethodID(cls, "toGeoJSON", "()Ljava/lang/String;");
            mids$[mid_toString_db9b55ba01e03e4b] = env->getMethodID(cls, "toString", "()Ljava/lang/String;");
            mids$[mid_toComponent2D_6fe8ae19c34b6817] = env->getMethodID(cls, "toComponent2D", "()Lorg/apache/lucene/geo/Component2D;");

            fids$ = new jfieldID[max_fid];
            fids$[fid_maxLat] = env->getFieldID(cls, "maxLat", "D");
            fids$[fid_maxLon] = env->getFieldID(cls, "maxLon", "D");
            fids$[fid_minLat] = env->getFieldID(cls, "minLat", "D");
            fids$[fid_minLon] = env->getFieldID(cls, "minLon", "D");

            class$ = new ::java::lang::Class(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        Line::Line(const JArray< jdouble > & a0, const JArray< jdouble > & a1) : ::org::apache::lucene::geo::LatLonGeometry(env->newObject(initializeClass, &mids$, mid_init$_1d56dd1258093787, a0.this$, a1.this$)) {}

        jboolean Line::equals(const ::java::lang::Object & a0) const
        {
          return env->callBooleanMethod(this$, mids$[mid_equals_8b72f2dcdde6fd1d], a0.this$);
        }

        jdouble Line::getLat(jint a0) const
        {
          return env->callDoubleMethod(this$, mids$[mid_getLat_f3ddedc0b6f18620], a0);
        }

        JArray< jdouble > Line::getLats() const
        {
          return JArray< jdouble >(env->callObjectMethod(this$, mids$[mid_getLats_7f7ead8cd9ac7585]));
        }

        jdouble Line::getLon(jint a0) const
        {
          return env->callDoubleMethod(this$, mids$[mid_getLon_f3ddedc0b6f18620], a0);
        }

        JArray< jdouble > Line::getLons() const
        {
          return JArray< jdouble >(env->callObjectMethod(this$, mids$[mid_getLons_7f7ead8cd9ac7585]));
        }

        jint Line::hashCode() const
        {
          return env->callIntMethod(this$, mids$[mid_hashCode_9972fcc56b44e79d]);
        }

        jint Line::numPoints() const
        {
          return env->callIntMethod(this$, mids$[mid_numPoints_9972fcc56b44e79d]);
        }

        ::java::lang::String Line::toGeoJSON() const
        {
          return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toGeoJSON_db9b55ba01e03e4b]));
        }

        ::java::lang::String Line::toString() const
        {
          return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_db9b55ba01e03e4b]));
        }

        jdouble Line::_get_maxLat() const
        {
          return env->getDoubleField(this$, fids$[fid_maxLat]);
        }

        jdouble Line::_get_maxLon() const
        {
          return env->getDoubleField(this$, fids$[fid_maxLon]);
        }

        jdouble Line::_get_minLat() const
        {
          return env->getDoubleField(this$, fids$[fid_minLat]);
        }

        jdouble Line::_get_minLon() const
        {
          return env->getDoubleField(this$, fids$[fid_minLon]);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace geo {
        static PyObject *t_Line_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_Line_instance_(PyTypeObject *type, PyObject *arg);
        static int t_Line_init_(t_Line *self, PyObject *args, PyObject *kwds);
        static PyObject *t_Line_equals(t_Line *self, PyObject *args);
        static PyObject *t_Line_getLat(t_Line *self, PyObject *arg);
        static PyObject *t_Line_getLats(t_Line *self);
        static PyObject *t_Line_getLon(t_Line *self, PyObject *arg);
        static PyObject *t_Line_getLons(t_Line *self);
        static PyObject *t_Line_hashCode(t_Line *self, PyObject *args);
        static PyObject *t_Line_numPoints(t_Line *self);
        static PyObject *t_Line_toGeoJSON(t_Line *self);
        static PyObject *t_Line_toString(t_Line *self, PyObject *args);
        static PyObject *t_Line_get__maxLat(t_Line *self, void *data);
        static PyObject *t_Line_get__maxLon(t_Line *self, void *data);
        static PyObject *t_Line_get__minLat(t_Line *self, void *data);
        static PyObject *t_Line_get__minLon(t_Line *self, void *data);

        static PyObject *t_Line_get__lats(t_Line *self, void *data);
        static PyObject *t_Line_get__lons(t_Line *self, void *data);
        static PyGetSetDef t_Line__fields_[] = {
          DECLARE_GET_FIELD(t_Line, maxLat),
          DECLARE_GET_FIELD(t_Line, maxLon),
          DECLARE_GET_FIELD(t_Line, minLat),
          DECLARE_GET_FIELD(t_Line, minLon),
          DECLARE_GET_FIELD(t_Line, lats),
          DECLARE_GET_FIELD(t_Line, lons),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_Line__methods_[] = {
          DECLARE_METHOD(t_Line, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_Line, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_Line, equals, METH_VARARGS),
          DECLARE_METHOD(t_Line, getLat, METH_O),
          DECLARE_METHOD(t_Line, getLats, METH_NOARGS),
          DECLARE_METHOD(t_Line, getLon, METH_O),
          DECLARE_METHOD(t_Line, getLons, METH_NOARGS),
          DECLARE_METHOD(t_Line, hashCode, METH_VARARGS),
          DECLARE_METHOD(t_Line, numPoints, METH_NOARGS),
          DECLARE_METHOD(t_Line, toGeoJSON, METH_NOARGS),
          DECLARE_METHOD(t_Line, toString, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        static PyType_Slot PY_TYPE_SLOTS(Line)[] = {
          { Py_tp_methods, t_Line__methods_ },
          { Py_tp_init, (void *) t_Line_init_ },
          { Py_tp_getset, t_Line__fields_ },
          { 0, NULL }
        };

        static PyType_Def *PY_TYPE_BASES(Line)[] = {
          &PY_TYPE_DEF(::org::apache::lucene::geo::LatLonGeometry),
          NULL
        };

        DEFINE_TYPE(Line, t_Line, Line);

        void t_Line::install(PyObject *module)
        {
          installType(&PY_TYPE(Line), &PY_TYPE_DEF(Line), module, "Line", 0);
        }

        void t_Line::initialize(PyObject *module)
        {
          PyObject_SetAttrString((PyObject *) PY_TYPE(Line), "class_", make_descriptor(Line::initializeClass, 1));
          PyObject_SetAttrString((PyObject *) PY_TYPE(Line), "wrapfn_", make_descriptor(t_Line::wrap_jobject));
          PyObject_SetAttrString((PyObject *) PY_TYPE(Line), "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_Line_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, Line::initializeClass, 1)))
            return NULL;
          return t_Line::wrap_Object(Line(((t_Line *) arg)->object.this$));
        }
        static PyObject *t_Line_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, Line::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_Line_init_(t_Line *self, PyObject *args, PyObject *kwds)
        {
          JArray< jdouble > a0((jobject) NULL);
          JArray< jdouble > a1((jobject) NULL);
          Line object((jobject) NULL);

          if (!parseArgs(args, "[D[D", &a0, &a1))
          {
            INT_CALL(object = Line(a0, a1));
            self->object = object;
          }
          else
          {
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }

        static PyObject *t_Line_equals(t_Line *self, PyObject *args)
        {
          ::java::lang::Object a0((jobject) NULL);
          jboolean result;

          if (!parseArgs(args, "o", &a0))
          {
            OBJ_CALL(result = self->object.equals(a0));
            Py_RETURN_BOOL(result);
          }

          return callSuper(PY_TYPE(Line), (PyObject *) self, "equals", args, 2);
        }

        static PyObject *t_Line_getLat(t_Line *self, PyObject *arg)
        {
          jint a0;
          jdouble result;

          if (!parseArg(arg, "I", &a0))
          {
            OBJ_CALL(result = self->object.getLat(a0));
            return PyFloat_FromDouble((double) result);
          }

          PyErr_SetArgsError((PyObject *) self, "getLat", arg);
          return NULL;
        }

        static PyObject *t_Line_getLats(t_Line *self)
        {
          JArray< jdouble > result((jobject) NULL);
          OBJ_CALL(result = self->object.getLats());
          return result.wrap();
        }

        static PyObject *t_Line_getLon(t_Line *self, PyObject *arg)
        {
          jint a0;
          jdouble result;

          if (!parseArg(arg, "I", &a0))
          {
            OBJ_CALL(result = self->object.getLon(a0));
            return PyFloat_FromDouble((double) result);
          }

          PyErr_SetArgsError((PyObject *) self, "getLon", arg);
          return NULL;
        }

        static PyObject *t_Line_getLons(t_Line *self)
        {
          JArray< jdouble > result((jobject) NULL);
          OBJ_CALL(result = self->object.getLons());
          return result.wrap();
        }

        static PyObject *t_Line_hashCode(t_Line *self, PyObject *args)
        {
          jint result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.hashCode());
            return PyLong_FromLong((long) result);
          }

          return callSuper(PY_TYPE(Line), (PyObject *) self, "hashCode", args, 2);
        }

        static PyObject *t_Line_numPoints(t_Line *self)
        {
          jint result;
          OBJ_CALL(result = self->object.numPoints());
          return PyLong_FromLong((long) result);
        }

        static PyObject *t_Line_toGeoJSON(t_Line *self)
        {
          ::java::lang::String result((jobject) NULL);
          OBJ_CALL(result = self->object.toGeoJSON());
          return j2p(result);
        }

        static PyObject *t_Line_toString(t_Line *self, PyObject *args)
        {
          ::java::lang::String result((jobject) NULL);

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.toString());
            return j2p(result);
          }

          return callSuper(PY_TYPE(Line), (PyObject *) self, "toString", args, 2);
        }

        static PyObject *t_Line_get__maxLat(t_Line *self, void *data)
        {
          jdouble value;
          OBJ_CALL(value = self->object._get_maxLat());
          return PyFloat_FromDouble((double) value);
        }

        static PyObject *t_Line_get__maxLon(t_Line *self, void *data)
        {
          jdouble value;
          OBJ_CALL(value = self->object._get_maxLon());
          return PyFloat_FromDouble((double) value);
        }

        static PyObject *t_Line_get__minLat(t_Line *self, void *data)
        {
          jdouble value;
          OBJ_CALL(value = self->object._get_minLat());
          return PyFloat_FromDouble((double) value);
        }

        static PyObject *t_Line_get__minLon(t_Line *self, void *data)
        {
          jdouble value;
          OBJ_CALL(value = self->object._get_minLon());
          return PyFloat_FromDouble((double) value);
        }

        static PyObject *t_Line_get__lats(t_Line *self, void *data)
        {
          JArray< jdouble > value((jobject) NULL);
          OBJ_CALL(value = self->object.getLats());
          return value.wrap();
        }

        static PyObject *t_Line_get__lons(t_Line *self, void *data)
        {
          JArray< jdouble > value((jobject) NULL);
          OBJ_CALL(value = self->object.getLons());
          return value.wrap();
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/grouping/TopGroupsCollector.h"
#include "java/util/Collection.h"
#include "org/apache/lucene/search/grouping/GroupSelector.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/search/grouping/TopGroups.h"
#include "org/apache/lucene/search/grouping/SearchGroup.h"
#include "org/apache/lucene/search/Sort.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace grouping {

          ::java::lang::Class *TopGroupsCollector::class$ = NULL;
          jmethodID *TopGroupsCollector::mids$ = NULL;
          bool TopGroupsCollector::live$ = false;

          jclass TopGroupsCollector::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/search/grouping/TopGroupsCollector");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_bc84216dae697217] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/search/grouping/GroupSelector;Ljava/util/Collection;Lorg/apache/lucene/search/Sort;Lorg/apache/lucene/search/Sort;IZ)V");
              mids$[mid_getTopGroups_2a03f3c9fd50c0c8] = env->getMethodID(cls, "getTopGroups", "(I)Lorg/apache/lucene/search/grouping/TopGroups;");

              class$ = new ::java::lang::Class(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          TopGroupsCollector::TopGroupsCollector(const ::org::apache::lucene::search::grouping::GroupSelector & a0, const ::java::util::Collection & a1, const ::org::apache::lucene::search::Sort & a2, const ::org::apache::lucene::search::Sort & a3, jint a4, jboolean a5) : ::org::apache::lucene::search::grouping::SecondPassGroupingCollector(env->newObject(initializeClass, &mids$, mid_init$_bc84216dae697217, a0.this$, a1.this$, a2.this$, a3.this$, a4, a5)) {}

          ::org::apache::lucene::search::grouping::TopGroups TopGroupsCollector::getTopGroups(jint a0) const
          {
            return ::org::apache::lucene::search::grouping::TopGroups(env->callObjectMethod(this$, mids$[mid_getTopGroups_2a03f3c9fd50c0c8], a0));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace grouping {
          static PyObject *t_TopGroupsCollector_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_TopGroupsCollector_instance_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_TopGroupsCollector_of_(t_TopGroupsCollector *self, PyObject *args);
          static int t_TopGroupsCollector_init_(t_TopGroupsCollector *self, PyObject *args, PyObject *kwds);
          static PyObject *t_TopGroupsCollector_getTopGroups(t_TopGroupsCollector *self, PyObject *arg);
          static PyObject *t_TopGroupsCollector_get__parameters_(t_TopGroupsCollector *self, void *data);
          static PyGetSetDef t_TopGroupsCollector__fields_[] = {
            DECLARE_GET_FIELD(t_TopGroupsCollector, parameters_),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_TopGroupsCollector__methods_[] = {
            DECLARE_METHOD(t_TopGroupsCollector, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_TopGroupsCollector, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_TopGroupsCollector, of_, METH_VARARGS),
            DECLARE_METHOD(t_TopGroupsCollector, getTopGroups, METH_O),
            { NULL, NULL, 0, NULL }
          };

          static PyType_Slot PY_TYPE_SLOTS(TopGroupsCollector)[] = {
            { Py_tp_methods, t_TopGroupsCollector__methods_ },
            { Py_tp_init, (void *) t_TopGroupsCollector_init_ },
            { Py_tp_getset, t_TopGroupsCollector__fields_ },
            { 0, NULL }
          };

          static PyType_Def *PY_TYPE_BASES(TopGroupsCollector)[] = {
            &PY_TYPE_DEF(::org::apache::lucene::search::grouping::SecondPassGroupingCollector),
            NULL
          };

          DEFINE_TYPE(TopGroupsCollector, t_TopGroupsCollector, TopGroupsCollector);
          PyObject *t_TopGroupsCollector::wrap_Object(const TopGroupsCollector& object, PyTypeObject *p0)
          {
            PyObject *obj = t_TopGroupsCollector::wrap_Object(object);
            if (obj != NULL && obj != Py_None)
            {
              t_TopGroupsCollector *self = (t_TopGroupsCollector *) obj;
              self->parameters[0] = p0;
            }
            return obj;
          }

          PyObject *t_TopGroupsCollector::wrap_jobject(const jobject& object, PyTypeObject *p0)
          {
            PyObject *obj = t_TopGroupsCollector::wrap_jobject(object);
            if (obj != NULL && obj != Py_None)
            {
              t_TopGroupsCollector *self = (t_TopGroupsCollector *) obj;
              self->parameters[0] = p0;
            }
            return obj;
          }

          void t_TopGroupsCollector::install(PyObject *module)
          {
            installType(&PY_TYPE(TopGroupsCollector), &PY_TYPE_DEF(TopGroupsCollector), module, "TopGroupsCollector", 0);
          }

          void t_TopGroupsCollector::initialize(PyObject *module)
          {
            PyObject_SetAttrString((PyObject *) PY_TYPE(TopGroupsCollector), "class_", make_descriptor(TopGroupsCollector::initializeClass, 1));
            PyObject_SetAttrString((PyObject *) PY_TYPE(TopGroupsCollector), "wrapfn_", make_descriptor(t_TopGroupsCollector::wrap_jobject));
            PyObject_SetAttrString((PyObject *) PY_TYPE(TopGroupsCollector), "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_TopGroupsCollector_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, TopGroupsCollector::initializeClass, 1)))
              return NULL;
            return t_TopGroupsCollector::wrap_Object(TopGroupsCollector(((t_TopGroupsCollector *) arg)->object.this$));
          }
          static PyObject *t_TopGroupsCollector_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, TopGroupsCollector::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static PyObject *t_TopGroupsCollector_of_(t_TopGroupsCollector *self, PyObject *args)
          {
            if (!parseArg(args, "T", 1, &(self->parameters)))
              Py_RETURN_SELF;
            return PyErr_SetArgsError((PyObject *) self, "of_", args);
          }

          static int t_TopGroupsCollector_init_(t_TopGroupsCollector *self, PyObject *args, PyObject *kwds)
          {
            ::org::apache::lucene::search::grouping::GroupSelector a0((jobject) NULL);
            PyTypeObject **p0;
            ::java::util::Collection a1((jobject) NULL);
            PyTypeObject **p1;
            ::org::apache::lucene::search::Sort a2((jobject) NULL);
            ::org::apache::lucene::search::Sort a3((jobject) NULL);
            jint a4;
            jboolean a5;
            TopGroupsCollector object((jobject) NULL);

            if (!parseArgs(args, "KKkkIZ", ::org::apache::lucene::search::grouping::GroupSelector::initializeClass, ::java::util::Collection::initializeClass, ::org::apache::lucene::search::Sort::initializeClass, ::org::apache::lucene::search::Sort::initializeClass, &a0, &p0, ::org::apache::lucene::search::grouping::t_GroupSelector::parameters_, &a1, &p1, ::java::util::t_Collection::parameters_, &a2, &a3, &a4, &a5))
            {
              INT_CALL(object = TopGroupsCollector(a0, a1, a2, a3, a4, a5));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_TopGroupsCollector_getTopGroups(t_TopGroupsCollector *self, PyObject *arg)
          {
            jint a0;
            ::org::apache::lucene::search::grouping::TopGroups result((jobject) NULL);

            if (!parseArg(arg, "I", &a0))
            {
              OBJ_CALL(result = self->object.getTopGroups(a0));
              return ::org::apache::lucene::search::grouping::t_TopGroups::wrap_Object(result, self->parameters[0]);
            }

            PyErr_SetArgsError((PyObject *) self, "getTopGroups", arg);
            return NULL;
          }
          static PyObject *t_TopGroupsCollector_get__parameters_(t_TopGroupsCollector *self, void *data)
          {
            return typeParameters(self->parameters, sizeof(self->parameters));
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/ru/RussianAnalyzer.h"
#include "java/lang/String.h"
#include "org/apache/lucene/analysis/CharArraySet.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace ru {

          ::java::lang::Class *RussianAnalyzer::class$ = NULL;
          jmethodID *RussianAnalyzer::mids$ = NULL;
          bool RussianAnalyzer::live$ = false;
          ::java::lang::String *RussianAnalyzer::DEFAULT_STOPWORD_FILE = NULL;

          jclass RussianAnalyzer::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/ru/RussianAnalyzer");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_f2cc1bce94666404] = env->getMethodID(cls, "<init>", "()V");
              mids$[mid_init$_09c0eb6a436581d3] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/analysis/CharArraySet;)V");
              mids$[mid_init$_b66a15b6e54e4218] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/analysis/CharArraySet;Lorg/apache/lucene/analysis/CharArraySet;)V");
              mids$[mid_getDefaultStopSet_7aec8e69a9807ca1] = env->getStaticMethodID(cls, "getDefaultStopSet", "()Lorg/apache/lucene/analysis/CharArraySet;");
              mids$[mid_createComponents_c22fd244b0553c1e] = env->getMethodID(cls, "createComponents", "(Ljava/lang/String;)Lorg/apache/lucene/analysis/Analyzer$TokenStreamComponents;");
              mids$[mid_normalize_e597989422f66fcd] = env->getMethodID(cls, "normalize", "(Ljava/lang/String;Lorg/apache/lucene/analysis/TokenStream;)Lorg/apache/lucene/analysis/TokenStream;");

              class$ = new ::java::lang::Class(cls);
              cls = (jclass) class$->this$;

              DEFAULT_STOPWORD_FILE = new ::java::lang::String(env->getStaticObjectField(cls, "DEFAULT_STOPWORD_FILE", "Ljava/lang/String;"));
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          RussianAnalyzer::RussianAnalyzer() : ::org::apache::lucene::analysis::StopwordAnalyzerBase(env->newObject(initializeClass, &mids$, mid_init$_f2cc1bce94666404)) {}

          RussianAnalyzer::RussianAnalyzer(const ::org::apache::lucene::analysis::CharArraySet & a0) : ::org::apache::lucene::analysis::StopwordAnalyzerBase(env->newObject(initializeClass, &mids$, mid_init$_09c0eb6a436581d3, a0.this$)) {}

          RussianAnalyzer::RussianAnalyzer(const ::org::apache::lucene::analysis::CharArraySet & a0, const ::org::apache::lucene::analysis::CharArraySet & a1) : ::org::apache::lucene::analysis::StopwordAnalyzerBase(env->newObject(initializeClass, &mids$, mid_init$_b66a15b6e54e4218, a0.this$, a1.this$)) {}

          ::org::apache::lucene::analysis::CharArraySet RussianAnalyzer::getDefaultStopSet()
          {
            jclass cls = env->getClass(initializeClass);
            return ::org::apache::lucene::analysis::CharArraySet(env->callStaticObjectMethod(cls, mids$[mid_getDefaultStopSet_7aec8e69a9807ca1]));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace ru {
          static PyObject *t_RussianAnalyzer_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_RussianAnalyzer_instance_(PyTypeObject *type, PyObject *arg);
          static int t_RussianAnalyzer_init_(t_RussianAnalyzer *self, PyObject *args, PyObject *kwds);
          static PyObject *t_RussianAnalyzer_getDefaultStopSet(PyTypeObject *type);
          static PyObject *t_RussianAnalyzer_get__defaultStopSet(t_RussianAnalyzer *self, void *data);
          static PyGetSetDef t_RussianAnalyzer__fields_[] = {
            DECLARE_GET_FIELD(t_RussianAnalyzer, defaultStopSet),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_RussianAnalyzer__methods_[] = {
            DECLARE_METHOD(t_RussianAnalyzer, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_RussianAnalyzer, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_RussianAnalyzer, getDefaultStopSet, METH_NOARGS | METH_CLASS),
            { NULL, NULL, 0, NULL }
          };

          static PyType_Slot PY_TYPE_SLOTS(RussianAnalyzer)[] = {
            { Py_tp_methods, t_RussianAnalyzer__methods_ },
            { Py_tp_init, (void *) t_RussianAnalyzer_init_ },
            { Py_tp_getset, t_RussianAnalyzer__fields_ },
            { 0, NULL }
          };

          static PyType_Def *PY_TYPE_BASES(RussianAnalyzer)[] = {
            &PY_TYPE_DEF(::org::apache::lucene::analysis::StopwordAnalyzerBase),
            NULL
          };

          DEFINE_TYPE(RussianAnalyzer, t_RussianAnalyzer, RussianAnalyzer);

          void t_RussianAnalyzer::install(PyObject *module)
          {
            installType(&PY_TYPE(RussianAnalyzer), &PY_TYPE_DEF(RussianAnalyzer), module, "RussianAnalyzer", 0);
          }

          void t_RussianAnalyzer::initialize(PyObject *module)
          {
            PyObject_SetAttrString((PyObject *) PY_TYPE(RussianAnalyzer), "class_", make_descriptor(RussianAnalyzer::initializeClass, 1));
            PyObject_SetAttrString((PyObject *) PY_TYPE(RussianAnalyzer), "wrapfn_", make_descriptor(t_RussianAnalyzer::wrap_jobject));
            PyObject_SetAttrString((PyObject *) PY_TYPE(RussianAnalyzer), "boxfn_", make_descriptor(boxObject));
            env->getClass(RussianAnalyzer::initializeClass);
            PyObject_SetAttrString((PyObject *) PY_TYPE(RussianAnalyzer), "DEFAULT_STOPWORD_FILE", make_descriptor(j2p(*RussianAnalyzer::DEFAULT_STOPWORD_FILE)));
          }

          static PyObject *t_RussianAnalyzer_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, RussianAnalyzer::initializeClass, 1)))
              return NULL;
            return t_RussianAnalyzer::wrap_Object(RussianAnalyzer(((t_RussianAnalyzer *) arg)->object.this$));
          }
          static PyObject *t_RussianAnalyzer_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, RussianAnalyzer::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_RussianAnalyzer_init_(t_RussianAnalyzer *self, PyObject *args, PyObject *kwds)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 0:
              {
                RussianAnalyzer object((jobject) NULL);

                INT_CALL(object = RussianAnalyzer());
                self->object = object;
                break;
              }
             case 1:
              {
                ::org::apache::lucene::analysis::CharArraySet a0((jobject) NULL);
                PyTypeObject **p0;
                RussianAnalyzer object((jobject) NULL);

                if (!parseArgs(args, "K", ::org::apache::lucene::analysis::CharArraySet::initializeClass, &a0, &p0, ::org::apache::lucene::analysis::t_CharArraySet::parameters_))
                {
                  INT_CALL(object = RussianAnalyzer(a0));
                  self->object = object;
                  break;
                }
              }
              goto err;
             case 2:
              {
                ::org::apache::lucene::analysis::CharArraySet a0((jobject) NULL);
                PyTypeObject **p0;
                ::org::apache::lucene::analysis::CharArraySet a1((jobject) NULL);
                PyTypeObject **p1;
                RussianAnalyzer object((jobject) NULL);

                if (!parseArgs(args, "KK", ::org::apache::lucene::analysis::CharArraySet::initializeClass, ::org::apache::lucene::analysis::CharArraySet::initializeClass, &a0, &p0, ::org::apache::lucene::analysis::t_CharArraySet::parameters_, &a1, &p1, ::org::apache::lucene::analysis::t_CharArraySet::parameters_))
                {
                  INT_CALL(object = RussianAnalyzer(a0, a1));
                  self->object = object;
                  break;
                }
              }
             default:
             err:
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_RussianAnalyzer_getDefaultStopSet(PyTypeObject *type)
          {
            ::org::apache::lucene::analysis::CharArraySet result((jobject) NULL);
            OBJ_CALL(result = ::org::apache::lucene::analysis::ru::RussianAnalyzer::getDefaultStopSet());
            return ::org::apache::lucene::analysis::t_CharArraySet::wrap_Object(result);
          }

          static PyObject *t_RussianAnalyzer_get__defaultStopSet(t_RussianAnalyzer *self, void *data)
          {
            ::org::apache::lucene::analysis::CharArraySet value((jobject) NULL);
            OBJ_CALL(value = self->object.getDefaultStopSet());
            return ::org::apache::lucene::analysis::t_CharArraySet::wrap_Object(value);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/expressions/js/JavascriptParser$CompileContext.h"
#include "java/lang/Class.h"
#include "java/lang/Object.h"
#include "org/apache/lucene/expressions/js/JavascriptParser$ExpressionContext.h"
#include "org/antlr/v4/runtime/Token.h"
#include "org/antlr/v4/runtime/atn/ParserATNSimulator.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace expressions {
        namespace js {

          ::java::lang::Class *JavascriptParser$CompileContext::class$ = NULL;
          jmethodID *JavascriptParser$CompileContext::mids$ = NULL;
          bool JavascriptParser$CompileContext::live$ = false;

          jclass JavascriptParser$CompileContext::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/expressions/js/JavascriptParser$CompileContext");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_0c6ee6fa39ffeab1] = env->getMethodID(cls, "<init>", "(Lorg/antlr/v4/runtime/ParserRuleContext;I)V");
              mids$[mid_expression_c790b383f10157ae] = env->getMethodID(cls, "expression", "()Lorg/apache/lucene/expressions/js/JavascriptParser$ExpressionContext;");
              mids$[mid_getRuleIndex_9972fcc56b44e79d] = env->getMethodID(cls, "getRuleIndex", "()I");

              class$ = new ::java::lang::Class(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          JavascriptParser$CompileContext::JavascriptParser$CompileContext(const ::org::antlr::v4::runtime::ParserRuleContext & a0, jint a1) : ::org::antlr::v4::runtime::ParserRuleContext(env->newObject(initializeClass, &mids$, mid_init$_0c6ee6fa39ffeab1, a0.this$, a1)) {}

          ::org::apache::lucene::expressions::js::JavascriptParser$ExpressionContext JavascriptParser$CompileContext::expression() const
          {
            return ::org::apache::lucene::expressions::js::JavascriptParser$ExpressionContext(env->callObjectMethod(this$, mids$[mid_expression_c790b383f10157ae]));
          }

          jint JavascriptParser$CompileContext::getRuleIndex() const
          {
            return env->callIntMethod(this$, mids$[mid_getRuleIndex_9972fcc56b44e79d]);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace expressions {
        namespace js {
          static PyObject *t_JavascriptParser$CompileContext_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_JavascriptParser$CompileContext_instance_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_JavascriptParser$CompileContext_of_(t_JavascriptParser$CompileContext *self, PyObject *args);
          static int t_JavascriptParser$CompileContext_init_(t_JavascriptParser$CompileContext *self, PyObject *args, PyObject *kwds);
          static PyObject *t_JavascriptParser$CompileContext_expression(t_JavascriptParser$CompileContext *self);
          static PyObject *t_JavascriptParser$CompileContext_getRuleIndex(t_JavascriptParser$CompileContext *self, PyObject *args);
          static PyObject *t_JavascriptParser$CompileContext_get__ruleIndex(t_JavascriptParser$CompileContext *self, void *data);
          static PyObject *t_JavascriptParser$CompileContext_get__parameters_(t_JavascriptParser$CompileContext *self, void *data);
          static PyGetSetDef t_JavascriptParser$CompileContext__fields_[] = {
            DECLARE_GET_FIELD(t_JavascriptParser$CompileContext, ruleIndex),
            DECLARE_GET_FIELD(t_JavascriptParser$CompileContext, parameters_),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_JavascriptParser$CompileContext__methods_[] = {
            DECLARE_METHOD(t_JavascriptParser$CompileContext, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_JavascriptParser$CompileContext, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_JavascriptParser$CompileContext, of_, METH_VARARGS),
            DECLARE_METHOD(t_JavascriptParser$CompileContext, expression, METH_NOARGS),
            DECLARE_METHOD(t_JavascriptParser$CompileContext, getRuleIndex, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          static PyType_Slot PY_TYPE_SLOTS(JavascriptParser$CompileContext)[] = {
            { Py_tp_methods, t_JavascriptParser$CompileContext__methods_ },
            { Py_tp_init, (void *) t_JavascriptParser$CompileContext_init_ },
            { Py_tp_getset, t_JavascriptParser$CompileContext__fields_ },
            { 0, NULL }
          };

          static PyType_Def *PY_TYPE_BASES(JavascriptParser$CompileContext)[] = {
            &PY_TYPE_DEF(::org::antlr::v4::runtime::ParserRuleContext),
            NULL
          };

          DEFINE_TYPE(JavascriptParser$CompileContext, t_JavascriptParser$CompileContext, JavascriptParser$CompileContext);
          PyObject *t_JavascriptParser$CompileContext::wrap_Object(const JavascriptParser$CompileContext& object, PyTypeObject *p0, PyTypeObject *p1)
          {
            PyObject *obj = t_JavascriptParser$CompileContext::wrap_Object(object);
            if (obj != NULL && obj != Py_None)
            {
              t_JavascriptParser$CompileContext *self = (t_JavascriptParser$CompileContext *) obj;
              self->parameters[0] = p0;
              self->parameters[1] = p1;
            }
            return obj;
          }

          PyObject *t_JavascriptParser$CompileContext::wrap_jobject(const jobject& object, PyTypeObject *p0, PyTypeObject *p1)
          {
            PyObject *obj = t_JavascriptParser$CompileContext::wrap_jobject(object);
            if (obj != NULL && obj != Py_None)
            {
              t_JavascriptParser$CompileContext *self = (t_JavascriptParser$CompileContext *) obj;
              self->parameters[0] = p0;
              self->parameters[1] = p1;
            }
            return obj;
          }

          void t_JavascriptParser$CompileContext::install(PyObject *module)
          {
            installType(&PY_TYPE(JavascriptParser$CompileContext), &PY_TYPE_DEF(JavascriptParser$CompileContext), module, "JavascriptParser$CompileContext", 0);
          }

          void t_JavascriptParser$CompileContext::initialize(PyObject *module)
          {
            PyObject_SetAttrString((PyObject *) PY_TYPE(JavascriptParser$CompileContext), "class_", make_descriptor(JavascriptParser$CompileContext::initializeClass, 1));
            PyObject_SetAttrString((PyObject *) PY_TYPE(JavascriptParser$CompileContext), "wrapfn_", make_descriptor(t_JavascriptParser$CompileContext::wrap_jobject));
            PyObject_SetAttrString((PyObject *) PY_TYPE(JavascriptParser$CompileContext), "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_JavascriptParser$CompileContext_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, JavascriptParser$CompileContext::initializeClass, 1)))
              return NULL;
            return t_JavascriptParser$CompileContext::wrap_Object(JavascriptParser$CompileContext(((t_JavascriptParser$CompileContext *) arg)->object.this$));
          }
          static PyObject *t_JavascriptParser$CompileContext_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, JavascriptParser$CompileContext::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static PyObject *t_JavascriptParser$CompileContext_of_(t_JavascriptParser$CompileContext *self, PyObject *args)
          {
            if (!parseArg(args, "T", 2, &(self->parameters)))
              Py_RETURN_SELF;
            return PyErr_SetArgsError((PyObject *) self, "of_", args);
          }

          static int t_JavascriptParser$CompileContext_init_(t_JavascriptParser$CompileContext *self, PyObject *args, PyObject *kwds)
          {
            ::org::antlr::v4::runtime::ParserRuleContext a0((jobject) NULL);
            jint a1;
            JavascriptParser$CompileContext object((jobject) NULL);

            if (!parseArgs(args, "kI", ::org::antlr::v4::runtime::ParserRuleContext::initializeClass, &a0, &a1))
            {
              INT_CALL(object = JavascriptParser$CompileContext(a0, a1));
              self->object = object;
              self->parameters[0] = ::org::antlr::v4::runtime::PY_TYPE(Token);
              self->parameters[1] = ::org::antlr::v4::runtime::atn::PY_TYPE(ParserATNSimulator);
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_JavascriptParser$CompileContext_expression(t_JavascriptParser$CompileContext *self)
          {
            ::org::apache::lucene::expressions::js::JavascriptParser$ExpressionContext result((jobject) NULL);
            OBJ_CALL(result = self->object.expression());
            return ::org::apache::lucene::expressions::js::t_JavascriptParser$ExpressionContext::wrap_Object(result);
          }

          static PyObject *t_JavascriptParser$CompileContext_getRuleIndex(t_JavascriptParser$CompileContext *self, PyObject *args)
          {
            jint result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.getRuleIndex());
              return PyLong_FromLong((long) result);
            }

            return callSuper(PY_TYPE(JavascriptParser$CompileContext), (PyObject *) self, "getRuleIndex", args, 2);
          }
          static PyObject *t_JavascriptParser$CompileContext_get__parameters_(t_JavascriptParser$CompileContext *self, void *data)
          {
            return typeParameters(self->parameters, sizeof(self->parameters));
          }

          static PyObject *t_JavascriptParser$CompileContext_get__ruleIndex(t_JavascriptParser$CompileContext *self, void *data)
          {
            jint value;
            OBJ_CALL(value = self->object.getRuleIndex());
            return PyLong_FromLong((long) value);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/geo/GeoUtils$WindingOrder.h"
#include "org/apache/lucene/geo/GeoUtils$WindingOrder.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace geo {

        ::java::lang::Class *GeoUtils$WindingOrder::class$ = NULL;
        jmethodID *GeoUtils$WindingOrder::mids$ = NULL;
        bool GeoUtils$WindingOrder::live$ = false;
        GeoUtils$WindingOrder *GeoUtils$WindingOrder::CCW = NULL;
        GeoUtils$WindingOrder *GeoUtils$WindingOrder::COLINEAR = NULL;
        GeoUtils$WindingOrder *GeoUtils$WindingOrder::CW = NULL;

        jclass GeoUtils$WindingOrder::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/geo/GeoUtils$WindingOrder");

            mids$ = new jmethodID[max_mid];
            mids$[mid_fromSign_740bc8d5c52bdd49] = env->getStaticMethodID(cls, "fromSign", "(I)Lorg/apache/lucene/geo/GeoUtils$WindingOrder;");
            mids$[mid_sign_9972fcc56b44e79d] = env->getMethodID(cls, "sign", "()I");
            mids$[mid_valueOf_d952a9127640d734] = env->getStaticMethodID(cls, "valueOf", "(Ljava/lang/String;)Lorg/apache/lucene/geo/GeoUtils$WindingOrder;");
            mids$[mid_values_fa0c0ba958b4a333] = env->getStaticMethodID(cls, "values", "()[Lorg/apache/lucene/geo/GeoUtils$WindingOrder;");

            class$ = new ::java::lang::Class(cls);
            cls = (jclass) class$->this$;

            CCW = new GeoUtils$WindingOrder(env->getStaticObjectField(cls, "CCW", "Lorg/apache/lucene/geo/GeoUtils$WindingOrder;"));
            COLINEAR = new GeoUtils$WindingOrder(env->getStaticObjectField(cls, "COLINEAR", "Lorg/apache/lucene/geo/GeoUtils$WindingOrder;"));
            CW = new GeoUtils$WindingOrder(env->getStaticObjectField(cls, "CW", "Lorg/apache/lucene/geo/GeoUtils$WindingOrder;"));
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        GeoUtils$WindingOrder GeoUtils$WindingOrder::fromSign(jint a0)
        {
          jclass cls = env->getClass(initializeClass);
          return GeoUtils$WindingOrder(env->callStaticObjectMethod(cls, mids$[mid_fromSign_740bc8d5c52bdd49], a0));
        }

        jint GeoUtils$WindingOrder::sign() const
        {
          return env->callIntMethod(this$, mids$[mid_sign_9972fcc56b44e79d]);
        }

        GeoUtils$WindingOrder GeoUtils$WindingOrder::valueOf(const ::java::lang::String & a0)
        {
          jclass cls = env->getClass(initializeClass);
          return GeoUtils$WindingOrder(env->callStaticObjectMethod(cls, mids$[mid_valueOf_d952a9127640d734], a0.this$));
        }

        JArray< GeoUtils$WindingOrder > GeoUtils$WindingOrder::values()
        {
          jclass cls = env->getClass(initializeClass);
          return JArray< GeoUtils$WindingOrder >(env->callStaticObjectMethod(cls, mids$[mid_values_fa0c0ba958b4a333]));
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace geo {
        static PyObject *t_GeoUtils$WindingOrder_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_GeoUtils$WindingOrder_instance_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_GeoUtils$WindingOrder_of_(t_GeoUtils$WindingOrder *self, PyObject *args);
        static PyObject *t_GeoUtils$WindingOrder_fromSign(PyTypeObject *type, PyObject *arg);
        static PyObject *t_GeoUtils$WindingOrder_sign(t_GeoUtils$WindingOrder *self);
        static PyObject *t_GeoUtils$WindingOrder_valueOf(PyTypeObject *type, PyObject *args);
        static PyObject *t_GeoUtils$WindingOrder_values(PyTypeObject *type);
        static PyObject *t_GeoUtils$WindingOrder_get__parameters_(t_GeoUtils$WindingOrder *self, void *data);
        static PyGetSetDef t_GeoUtils$WindingOrder__fields_[] = {
          DECLARE_GET_FIELD(t_GeoUtils$WindingOrder, parameters_),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_GeoUtils$WindingOrder__methods_[] = {
          DECLARE_METHOD(t_GeoUtils$WindingOrder, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_GeoUtils$WindingOrder, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_GeoUtils$WindingOrder, of_, METH_VARARGS),
          DECLARE_METHOD(t_GeoUtils$WindingOrder, fromSign, METH_O | METH_CLASS),
          DECLARE_METHOD(t_GeoUtils$WindingOrder, sign, METH_NOARGS),
          DECLARE_METHOD(t_GeoUtils$WindingOrder, valueOf, METH_VARARGS | METH_CLASS),
          DECLARE_METHOD(t_GeoUtils$WindingOrder, values, METH_NOARGS | METH_CLASS),
          { NULL, NULL, 0, NULL }
        };

        static PyType_Slot PY_TYPE_SLOTS(GeoUtils$WindingOrder)[] = {
          { Py_tp_methods, t_GeoUtils$WindingOrder__methods_ },
          { Py_tp_init, (void *) abstract_init },
          { Py_tp_getset, t_GeoUtils$WindingOrder__fields_ },
          { 0, NULL }
        };

        static PyType_Def *PY_TYPE_BASES(GeoUtils$WindingOrder)[] = {
          &PY_TYPE_DEF(::java::lang::Enum),
          NULL
        };

        DEFINE_TYPE(GeoUtils$WindingOrder, t_GeoUtils$WindingOrder, GeoUtils$WindingOrder);
        PyObject *t_GeoUtils$WindingOrder::wrap_Object(const GeoUtils$WindingOrder& object, PyTypeObject *p0)
        {
          PyObject *obj = t_GeoUtils$WindingOrder::wrap_Object(object);
          if (obj != NULL && obj != Py_None)
          {
            t_GeoUtils$WindingOrder *self = (t_GeoUtils$WindingOrder *) obj;
            self->parameters[0] = p0;
          }
          return obj;
        }

        PyObject *t_GeoUtils$WindingOrder::wrap_jobject(const jobject& object, PyTypeObject *p0)
        {
          PyObject *obj = t_GeoUtils$WindingOrder::wrap_jobject(object);
          if (obj != NULL && obj != Py_None)
          {
            t_GeoUtils$WindingOrder *self = (t_GeoUtils$WindingOrder *) obj;
            self->parameters[0] = p0;
          }
          return obj;
        }

        void t_GeoUtils$WindingOrder::install(PyObject *module)
        {
          installType(&PY_TYPE(GeoUtils$WindingOrder), &PY_TYPE_DEF(GeoUtils$WindingOrder), module, "GeoUtils$WindingOrder", 0);
        }

        void t_GeoUtils$WindingOrder::initialize(PyObject *module)
        {
          PyObject_SetAttrString((PyObject *) PY_TYPE(GeoUtils$WindingOrder), "class_", make_descriptor(GeoUtils$WindingOrder::initializeClass, 1));
          PyObject_SetAttrString((PyObject *) PY_TYPE(GeoUtils$WindingOrder), "wrapfn_", make_descriptor(t_GeoUtils$WindingOrder::wrap_jobject));
          PyObject_SetAttrString((PyObject *) PY_TYPE(GeoUtils$WindingOrder), "boxfn_", make_descriptor(boxObject));
          env->getClass(GeoUtils$WindingOrder::initializeClass);
          PyObject_SetAttrString((PyObject *) PY_TYPE(GeoUtils$WindingOrder), "CCW", make_descriptor(t_GeoUtils$WindingOrder::wrap_Object(*GeoUtils$WindingOrder::CCW)));
          PyObject_SetAttrString((PyObject *) PY_TYPE(GeoUtils$WindingOrder), "COLINEAR", make_descriptor(t_GeoUtils$WindingOrder::wrap_Object(*GeoUtils$WindingOrder::COLINEAR)));
          PyObject_SetAttrString((PyObject *) PY_TYPE(GeoUtils$WindingOrder), "CW", make_descriptor(t_GeoUtils$WindingOrder::wrap_Object(*GeoUtils$WindingOrder::CW)));
        }

        static PyObject *t_GeoUtils$WindingOrder_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, GeoUtils$WindingOrder::initializeClass, 1)))
            return NULL;
          return t_GeoUtils$WindingOrder::wrap_Object(GeoUtils$WindingOrder(((t_GeoUtils$WindingOrder *) arg)->object.this$));
        }
        static PyObject *t_GeoUtils$WindingOrder_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, GeoUtils$WindingOrder::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static PyObject *t_GeoUtils$WindingOrder_of_(t_GeoUtils$WindingOrder *self, PyObject *args)
        {
          if (!parseArg(args, "T", 1, &(self->parameters)))
            Py_RETURN_SELF;
          return PyErr_SetArgsError((PyObject *) self, "of_", args);
        }

        static PyObject *t_GeoUtils$WindingOrder_fromSign(PyTypeObject *type, PyObject *arg)
        {
          jint a0;
          GeoUtils$WindingOrder result((jobject) NULL);

          if (!parseArg(arg, "I", &a0))
          {
            OBJ_CALL(result = ::org::apache::lucene::geo::GeoUtils$WindingOrder::fromSign(a0));
            return t_GeoUtils$WindingOrder::wrap_Object(result);
          }

          PyErr_SetArgsError(type, "fromSign", arg);
          return NULL;
        }

        static PyObject *t_GeoUtils$WindingOrder_sign(t_GeoUtils$WindingOrder *self)
        {
          jint result;
          OBJ_CALL(result = self->object.sign());
          return PyLong_FromLong((long) result);
        }

        static PyObject *t_GeoUtils$WindingOrder_valueOf(PyTypeObject *type, PyObject *args)
        {
          ::java::lang::String a0((jobject) NULL);
          GeoUtils$WindingOrder result((jobject) NULL);

          if (!parseArgs(args, "s", &a0))
          {
            OBJ_CALL(result = ::org::apache::lucene::geo::GeoUtils$WindingOrder::valueOf(a0));
            return t_GeoUtils$WindingOrder::wrap_Object(result);
          }

          return callSuper(type, "valueOf", args, 2);
        }

        static PyObject *t_GeoUtils$WindingOrder_values(PyTypeObject *type)
        {
          JArray< GeoUtils$WindingOrder > result((jobject) NULL);
          OBJ_CALL(result = ::org::apache::lucene::geo::GeoUtils$WindingOrder::values());
          return JArray<jobject>(result.this$).wrap(t_GeoUtils$WindingOrder::wrap_jobject);
        }
        static PyObject *t_GeoUtils$WindingOrder_get__parameters_(t_GeoUtils$WindingOrder *self, void *data)
        {
          return typeParameters(self->parameters, sizeof(self->parameters));
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/PointInSetQuery$Stream.h"
#include "org/apache/lucene/util/BytesRef.h"
#include "org/apache/lucene/util/BytesRefIterator.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {

        ::java::lang::Class *PointInSetQuery$Stream::class$ = NULL;
        jmethodID *PointInSetQuery$Stream::mids$ = NULL;
        bool PointInSetQuery$Stream::live$ = false;

        jclass PointInSetQuery$Stream::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/search/PointInSetQuery$Stream");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_f2cc1bce94666404] = env->getMethodID(cls, "<init>", "()V");
            mids$[mid_next_7af2ea2e37ce82b8] = env->getMethodID(cls, "next", "()Lorg/apache/lucene/util/BytesRef;");

            class$ = new ::java::lang::Class(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        PointInSetQuery$Stream::PointInSetQuery$Stream() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_f2cc1bce94666404)) {}

        ::org::apache::lucene::util::BytesRef PointInSetQuery$Stream::next() const
        {
          return ::org::apache::lucene::util::BytesRef(env->callObjectMethod(this$, mids$[mid_next_7af2ea2e37ce82b8]));
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        static PyObject *t_PointInSetQuery$Stream_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_PointInSetQuery$Stream_instance_(PyTypeObject *type, PyObject *arg);
        static int t_PointInSetQuery$Stream_init_(t_PointInSetQuery$Stream *self, PyObject *args, PyObject *kwds);
        static PyObject *t_PointInSetQuery$Stream_next(t_PointInSetQuery$Stream *self);

        static PyMethodDef t_PointInSetQuery$Stream__methods_[] = {
          DECLARE_METHOD(t_PointInSetQuery$Stream, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_PointInSetQuery$Stream, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_PointInSetQuery$Stream, next, METH_NOARGS),
          { NULL, NULL, 0, NULL }
        };

        static PyType_Slot PY_TYPE_SLOTS(PointInSetQuery$Stream)[] = {
          { Py_tp_methods, t_PointInSetQuery$Stream__methods_ },
          { Py_tp_init, (void *) t_PointInSetQuery$Stream_init_ },
          { Py_tp_iter, (void *) PyObject_SelfIter },
          { Py_tp_iternext, (void *) ((PyObject *(*)(t_PointInSetQuery$Stream *)) get_next< t_PointInSetQuery$Stream,::org::apache::lucene::util::t_BytesRef,::org::apache::lucene::util::BytesRef >) },
          { 0, NULL }
        };

        static PyType_Def *PY_TYPE_BASES(PointInSetQuery$Stream)[] = {
          &PY_TYPE_DEF(::java::lang::Object),
          NULL
        };

        DEFINE_TYPE(PointInSetQuery$Stream, t_PointInSetQuery$Stream, PointInSetQuery$Stream);

        void t_PointInSetQuery$Stream::install(PyObject *module)
        {
          installType(&PY_TYPE(PointInSetQuery$Stream), &PY_TYPE_DEF(PointInSetQuery$Stream), module, "PointInSetQuery$Stream", 0);
        }

        void t_PointInSetQuery$Stream::initialize(PyObject *module)
        {
          PyObject_SetAttrString((PyObject *) PY_TYPE(PointInSetQuery$Stream), "class_", make_descriptor(PointInSetQuery$Stream::initializeClass, 1));
          PyObject_SetAttrString((PyObject *) PY_TYPE(PointInSetQuery$Stream), "wrapfn_", make_descriptor(t_PointInSetQuery$Stream::wrap_jobject));
          PyObject_SetAttrString((PyObject *) PY_TYPE(PointInSetQuery$Stream), "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_PointInSetQuery$Stream_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, PointInSetQuery$Stream::initializeClass, 1)))
            return NULL;
          return t_PointInSetQuery$Stream::wrap_Object(PointInSetQuery$Stream(((t_PointInSetQuery$Stream *) arg)->object.this$));
        }
        static PyObject *t_PointInSetQuery$Stream_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, PointInSetQuery$Stream::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_PointInSetQuery$Stream_init_(t_PointInSetQuery$Stream *self, PyObject *args, PyObject *kwds)
        {
          PointInSetQuery$Stream object((jobject) NULL);

          INT_CALL(object = PointInSetQuery$Stream());
          self->object = object;

          return 0;
        }

        static PyObject *t_PointInSetQuery$Stream_next(t_PointInSetQuery$Stream *self)
        {
          ::org::apache::lucene::util::BytesRef result((jobject) NULL);
          OBJ_CALL(result = self->object.next());
          return ::org::apache::lucene::util::t_BytesRef::wrap_Object(result);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/document/IntRange.h"
#include "java/lang/String.h"
#include "org/apache/lucene/search/Query.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace document {

        ::java::lang::Class *IntRange::class$ = NULL;
        jmethodID *IntRange::mids$ = NULL;
        bool IntRange::live$ = false;
        jint IntRange::BYTES = (jint) 0;

        jclass IntRange::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/document/IntRange");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_8d53a6ab232efab4] = env->getMethodID(cls, "<init>", "(Ljava/lang/String;[I[I)V");
            mids$[mid_getMax_1e143afe1894d213] = env->getMethodID(cls, "getMax", "(I)I");
            mids$[mid_getMin_1e143afe1894d213] = env->getMethodID(cls, "getMin", "(I)I");
            mids$[mid_newContainsQuery_4d014fedea4aa22e] = env->getStaticMethodID(cls, "newContainsQuery", "(Ljava/lang/String;[I[I)Lorg/apache/lucene/search/Query;");
            mids$[mid_newCrossesQuery_4d014fedea4aa22e] = env->getStaticMethodID(cls, "newCrossesQuery", "(Ljava/lang/String;[I[I)Lorg/apache/lucene/search/Query;");
            mids$[mid_newIntersectsQuery_4d014fedea4aa22e] = env->getStaticMethodID(cls, "newIntersectsQuery", "(Ljava/lang/String;[I[I)Lorg/apache/lucene/search/Query;");
            mids$[mid_newWithinQuery_4d014fedea4aa22e] = env->getStaticMethodID(cls, "newWithinQuery", "(Ljava/lang/String;[I[I)Lorg/apache/lucene/search/Query;");
            mids$[mid_setRangeValues_cab3080081e127d8] = env->getMethodID(cls, "setRangeValues", "([I[I)V");
            mids$[mid_toString_db9b55ba01e03e4b] = env->getMethodID(cls, "toString", "()Ljava/lang/String;");

            class$ = new ::java::lang::Class(cls);
            cls = (jclass) class$->this$;

            BYTES = env->getStaticIntField(cls, "BYTES");
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        IntRange::IntRange(const ::java::lang::String & a0, const JArray< jint > & a1, const JArray< jint > & a2) : ::org::apache::lucene::document::Field(env->newObject(initializeClass, &mids$, mid_init$_8d53a6ab232efab4, a0.this$, a1.this$, a2.this$)) {}

        jint IntRange::getMax(jint a0) const
        {
          return env->callIntMethod(this$, mids$[mid_getMax_1e143afe1894d213], a0);
        }

        jint IntRange::getMin(jint a0) const
        {
          return env->callIntMethod(this$, mids$[mid_getMin_1e143afe1894d213], a0);
        }

        ::org::apache::lucene::search::Query IntRange::newContainsQuery(const ::java::lang::String & a0, const JArray< jint > & a1, const JArray< jint > & a2)
        {
          jclass cls = env->getClass(initializeClass);
          return ::org::apache::lucene::search::Query(env->callStaticObjectMethod(cls, mids$[mid_newContainsQuery_4d014fedea4aa22e], a0.this$, a1.this$, a2.this$));
        }

        ::org::apache::lucene::search::Query IntRange::newCrossesQuery(const ::java::lang::String & a0, const JArray< jint > & a1, const JArray< jint > & a2)
        {
          jclass cls = env->getClass(initializeClass);
          return ::org::apache::lucene::search::Query(env->callStaticObjectMethod(cls, mids$[mid_newCrossesQuery_4d014fedea4aa22e], a0.this$, a1.this$, a2.this$));
        }

        ::org::apache::lucene::search::Query IntRange::newIntersectsQuery(const ::java::lang::String & a0, const JArray< jint > & a1, const JArray< jint > & a2)
        {
          jclass cls = env->getClass(initializeClass);
          return ::org::apache::lucene::search::Query(env->callStaticObjectMethod(cls, mids$[mid_newIntersectsQuery_4d014fedea4aa22e], a0.this$, a1.this$, a2.this$));
        }

        ::org::apache::lucene::search::Query IntRange::newWithinQuery(const ::java::lang::String & a0, const JArray< jint > & a1, const JArray< jint > & a2)
        {
          jclass cls = env->getClass(initializeClass);
          return ::org::apache::lucene::search::Query(env->callStaticObjectMethod(cls, mids$[mid_newWithinQuery_4d014fedea4aa22e], a0.this$, a1.this$, a2.this$));
        }

        void IntRange::setRangeValues(const JArray< jint > & a0, const JArray< jint > & a1) const
        {
          env->callVoidMethod(this$, mids$[mid_setRangeValues_cab3080081e127d8], a0.this$, a1.this$);
        }

        ::java::lang::String IntRange::toString() const
        {
          return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_db9b55ba01e03e4b]));
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace document {
        static PyObject *t_IntRange_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_IntRange_instance_(PyTypeObject *type, PyObject *arg);
        static int t_IntRange_init_(t_IntRange *self, PyObject *args, PyObject *kwds);
        static PyObject *t_IntRange_getMax(t_IntRange *self, PyObject *arg);
        static PyObject *t_IntRange_getMin(t_IntRange *self, PyObject *arg);
        static PyObject *t_IntRange_newContainsQuery(PyTypeObject *type, PyObject *args);
        static PyObject *t_IntRange_newCrossesQuery(PyTypeObject *type, PyObject *args);
        static PyObject *t_IntRange_newIntersectsQuery(PyTypeObject *type, PyObject *args);
        static PyObject *t_IntRange_newWithinQuery(PyTypeObject *type, PyObject *args);
        static PyObject *t_IntRange_setRangeValues(t_IntRange *self, PyObject *args);
        static PyObject *t_IntRange_toString(t_IntRange *self, PyObject *args);

        static PyMethodDef t_IntRange__methods_[] = {
          DECLARE_METHOD(t_IntRange, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_IntRange, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_IntRange, getMax, METH_O),
          DECLARE_METHOD(t_IntRange, getMin, METH_O),
          DECLARE_METHOD(t_IntRange, newContainsQuery, METH_VARARGS | METH_CLASS),
          DECLARE_METHOD(t_IntRange, newCrossesQuery, METH_VARARGS | METH_CLASS),
          DECLARE_METHOD(t_IntRange, newIntersectsQuery, METH_VARARGS | METH_CLASS),
          DECLARE_METHOD(t_IntRange, newWithinQuery, METH_VARARGS | METH_CLASS),
          DECLARE_METHOD(t_IntRange, setRangeValues, METH_VARARGS),
          DECLARE_METHOD(t_IntRange, toString, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        static PyType_Slot PY_TYPE_SLOTS(IntRange)[] = {
          { Py_tp_methods, t_IntRange__methods_ },
          { Py_tp_init, (void *) t_IntRange_init_ },
          { 0, NULL }
        };

        static PyType_Def *PY_TYPE_BASES(IntRange)[] = {
          &PY_TYPE_DEF(::org::apache::lucene::document::Field),
          NULL
        };

        DEFINE_TYPE(IntRange, t_IntRange, IntRange);

        void t_IntRange::install(PyObject *module)
        {
          installType(&PY_TYPE(IntRange), &PY_TYPE_DEF(IntRange), module, "IntRange", 0);
        }

        void t_IntRange::initialize(PyObject *module)
        {
          PyObject_SetAttrString((PyObject *) PY_TYPE(IntRange), "class_", make_descriptor(IntRange::initializeClass, 1));
          PyObject_SetAttrString((PyObject *) PY_TYPE(IntRange), "wrapfn_", make_descriptor(t_IntRange::wrap_jobject));
          PyObject_SetAttrString((PyObject *) PY_TYPE(IntRange), "boxfn_", make_descriptor(boxObject));
          env->getClass(IntRange::initializeClass);
          PyObject_SetAttrString((PyObject *) PY_TYPE(IntRange), "BYTES", make_descriptor(IntRange::BYTES));
        }

        static PyObject *t_IntRange_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, IntRange::initializeClass, 1)))
            return NULL;
          return t_IntRange::wrap_Object(IntRange(((t_IntRange *) arg)->object.this$));
        }
        static PyObject *t_IntRange_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, IntRange::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_IntRange_init_(t_IntRange *self, PyObject *args, PyObject *kwds)
        {
          ::java::lang::String a0((jobject) NULL);
          JArray< jint > a1((jobject) NULL);
          JArray< jint > a2((jobject) NULL);
          IntRange object((jobject) NULL);

          if (!parseArgs(args, "s[I[I", &a0, &a1, &a2))
          {
            INT_CALL(object = IntRange(a0, a1, a2));
            self->object = object;
          }
          else
          {
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }

        static PyObject *t_IntRange_getMax(t_IntRange *self, PyObject *arg)
        {
          jint a0;
          jint result;

          if (!parseArg(arg, "I", &a0))
          {
            OBJ_CALL(result = self->object.getMax(a0));
            return PyLong_FromLong((long) result);
          }

          PyErr_SetArgsError((PyObject *) self, "getMax", arg);
          return NULL;
        }

        static PyObject *t_IntRange_getMin(t_IntRange *self, PyObject *arg)
        {
          jint a0;
          jint result;

          if (!parseArg(arg, "I", &a0))
          {
            OBJ_CALL(result = self->object.getMin(a0));
            return PyLong_FromLong((long) result);
          }

          PyErr_SetArgsError((PyObject *) self, "getMin", arg);
          return NULL;
        }

        static PyObject *t_IntRange_newContainsQuery(PyTypeObject *type, PyObject *args)
        {
          ::java::lang::String a0((jobject) NULL);
          JArray< jint > a1((jobject) NULL);
          JArray< jint > a2((jobject) NULL);
          ::org::apache::lucene::search::Query result((jobject) NULL);

          if (!parseArgs(args, "s[I[I", &a0, &a1, &a2))
          {
            OBJ_CALL(result = ::org::apache::lucene::document::IntRange::newContainsQuery(a0, a1, a2));
            return ::org::apache::lucene::search::t_Query::wrap_Object(result);
          }

          PyErr_SetArgsError(type, "newContainsQuery", args);
          return NULL;
        }

        static PyObject *t_IntRange_newCrossesQuery(PyTypeObject *type, PyObject *args)
        {
          ::java::lang::String a0((jobject) NULL);
          JArray< jint > a1((jobject) NULL);
          JArray< jint > a2((jobject) NULL);
          ::org::apache::lucene::search::Query result((jobject) NULL);

          if (!parseArgs(args, "s[I[I", &a0, &a1, &a2))
          {
            OBJ_CALL(result = ::org::apache::lucene::document::IntRange::newCrossesQuery(a0, a1, a2));
            return ::org::apache::lucene::search::t_Query::wrap_Object(result);
          }

          PyErr_SetArgsError(type, "newCrossesQuery", args);
          return NULL;
        }

        static PyObject *t_IntRange_newIntersectsQuery(PyTypeObject *type, PyObject *args)
        {
          ::java::lang::String a0((jobject) NULL);
          JArray< jint > a1((jobject) NULL);
          JArray< jint > a2((jobject) NULL);
          ::org::apache::lucene::search::Query result((jobject) NULL);

          if (!parseArgs(args, "s[I[I", &a0, &a1, &a2))
          {
            OBJ_CALL(result = ::org::apache::lucene::document::IntRange::newIntersectsQuery(a0, a1, a2));
            return ::org::apache::lucene::search::t_Query::wrap_Object(result);
          }

          PyErr_SetArgsError(type, "newIntersectsQuery", args);
          return NULL;
        }

        static PyObject *t_IntRange_newWithinQuery(PyTypeObject *type, PyObject *args)
        {
          ::java::lang::String a0((jobject) NULL);
          JArray< jint > a1((jobject) NULL);
          JArray< jint > a2((jobject) NULL);
          ::org::apache::lucene::search::Query result((jobject) NULL);

          if (!parseArgs(args, "s[I[I", &a0, &a1, &a2))
          {
            OBJ_CALL(result = ::org::apache::lucene::document::IntRange::newWithinQuery(a0, a1, a2));
            return ::org::apache::lucene::search::t_Query::wrap_Object(result);
          }

          PyErr_SetArgsError(type, "newWithinQuery", args);
          return NULL;
        }

        static PyObject *t_IntRange_setRangeValues(t_IntRange *self, PyObject *args)
        {
          JArray< jint > a0((jobject) NULL);
          JArray< jint > a1((jobject) NULL);

          if (!parseArgs(args, "[I[I", &a0, &a1))
          {
            OBJ_CALL(self->object.setRangeValues(a0, a1));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "setRangeValues", args);
          return NULL;
        }

        static PyObject *t_IntRange_toString(t_IntRange *self, PyObject *args)
        {
          ::java::lang::String result((jobject) NULL);

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.toString());
            return j2p(result);
          }

          return callSuper(PY_TYPE(IntRange), (PyObject *) self, "toString", args, 2);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/suggest/fst/ExternalRefSorter.h"
#include "org/apache/lucene/search/suggest/fst/BytesRefSorter.h"
#include "java/util/Comparator.h"
#include "java/lang/Class.h"
#include "java/io/Closeable.h"
#include "org/apache/lucene/util/BytesRefIterator.h"
#include "org/apache/lucene/util/OfflineSorter.h"
#include "org/apache/lucene/util/BytesRef.h"
#include "java/io/IOException.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace suggest {
          namespace fst {

            ::java::lang::Class *ExternalRefSorter::class$ = NULL;
            jmethodID *ExternalRefSorter::mids$ = NULL;
            bool ExternalRefSorter::live$ = false;

            jclass ExternalRefSorter::initializeClass(bool getOnly)
            {
              if (getOnly)
                return (jclass) (live$ ? class$->this$ : NULL);
              if (class$ == NULL)
              {
                jclass cls = (jclass) env->findClass("org/apache/lucene/search/suggest/fst/ExternalRefSorter");

                mids$ = new jmethodID[max_mid];
                mids$[mid_init$_d34a8c39d1671d76] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/util/OfflineSorter;)V");
                mids$[mid_add_0bdfd2603b7490a8] = env->getMethodID(cls, "add", "(Lorg/apache/lucene/util/BytesRef;)V");
                mids$[mid_close_f2cc1bce94666404] = env->getMethodID(cls, "close", "()V");
                mids$[mid_getComparator_beb0414e0ec1de00] = env->getMethodID(cls, "getComparator", "()Ljava/util/Comparator;");
                mids$[mid_iterator_5416289139cf0b84] = env->getMethodID(cls, "iterator", "()Lorg/apache/lucene/util/BytesRefIterator;");

                class$ = new ::java::lang::Class(cls);
                live$ = true;
              }
              return (jclass) class$->this$;
            }

            ExternalRefSorter::ExternalRefSorter(const ::org::apache::lucene::util::OfflineSorter & a0) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_d34a8c39d1671d76, a0.this$)) {}

            void ExternalRefSorter::add(const ::org::apache::lucene::util::BytesRef & a0) const
            {
              env->callVoidMethod(this$, mids$[mid_add_0bdfd2603b7490a8], a0.this$);
            }

            void ExternalRefSorter::close() const
            {
              env->callVoidMethod(this$, mids$[mid_close_f2cc1bce94666404]);
            }

            ::java::util::Comparator ExternalRefSorter::getComparator() const
            {
              return ::java::util::Comparator(env->callObjectMethod(this$, mids$[mid_getComparator_beb0414e0ec1de00]));
            }

            ::org::apache::lucene::util::BytesRefIterator ExternalRefSorter::iterator() const
            {
              return ::org::apache::lucene::util::BytesRefIterator(env->callObjectMethod(this$, mids$[mid_iterator_5416289139cf0b84]));
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace suggest {
          namespace fst {
            static PyObject *t_ExternalRefSorter_cast_(PyTypeObject *type, PyObject *arg);
            static PyObject *t_ExternalRefSorter_instance_(PyTypeObject *type, PyObject *arg);
            static int t_ExternalRefSorter_init_(t_ExternalRefSorter *self, PyObject *args, PyObject *kwds);
            static PyObject *t_ExternalRefSorter_add(t_ExternalRefSorter *self, PyObject *arg);
            static PyObject *t_ExternalRefSorter_close(t_ExternalRefSorter *self);
            static PyObject *t_ExternalRefSorter_getComparator(t_ExternalRefSorter *self);
            static PyObject *t_ExternalRefSorter_iterator(t_ExternalRefSorter *self);
            static PyObject *t_ExternalRefSorter_get__comparator(t_ExternalRefSorter *self, void *data);
            static PyGetSetDef t_ExternalRefSorter__fields_[] = {
              DECLARE_GET_FIELD(t_ExternalRefSorter, comparator),
              { NULL, NULL, NULL, NULL, NULL }
            };

            static PyMethodDef t_ExternalRefSorter__methods_[] = {
              DECLARE_METHOD(t_ExternalRefSorter, cast_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_ExternalRefSorter, instance_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_ExternalRefSorter, add, METH_O),
              DECLARE_METHOD(t_ExternalRefSorter, close, METH_NOARGS),
              DECLARE_METHOD(t_ExternalRefSorter, getComparator, METH_NOARGS),
              DECLARE_METHOD(t_ExternalRefSorter, iterator, METH_NOARGS),
              { NULL, NULL, 0, NULL }
            };

            static PyType_Slot PY_TYPE_SLOTS(ExternalRefSorter)[] = {
              { Py_tp_methods, t_ExternalRefSorter__methods_ },
              { Py_tp_init, (void *) t_ExternalRefSorter_init_ },
              { Py_tp_getset, t_ExternalRefSorter__fields_ },
              { 0, NULL }
            };

            static PyType_Def *PY_TYPE_BASES(ExternalRefSorter)[] = {
              &PY_TYPE_DEF(::java::lang::Object),
              NULL
            };

            DEFINE_TYPE(ExternalRefSorter, t_ExternalRefSorter, ExternalRefSorter);

            void t_ExternalRefSorter::install(PyObject *module)
            {
              installType(&PY_TYPE(ExternalRefSorter), &PY_TYPE_DEF(ExternalRefSorter), module, "ExternalRefSorter", 0);
            }

            void t_ExternalRefSorter::initialize(PyObject *module)
            {
              PyObject_SetAttrString((PyObject *) PY_TYPE(ExternalRefSorter), "class_", make_descriptor(ExternalRefSorter::initializeClass, 1));
              PyObject_SetAttrString((PyObject *) PY_TYPE(ExternalRefSorter), "wrapfn_", make_descriptor(t_ExternalRefSorter::wrap_jobject));
              PyObject_SetAttrString((PyObject *) PY_TYPE(ExternalRefSorter), "boxfn_", make_descriptor(boxObject));
            }

            static PyObject *t_ExternalRefSorter_cast_(PyTypeObject *type, PyObject *arg)
            {
              if (!(arg = castCheck(arg, ExternalRefSorter::initializeClass, 1)))
                return NULL;
              return t_ExternalRefSorter::wrap_Object(ExternalRefSorter(((t_ExternalRefSorter *) arg)->object.this$));
            }
            static PyObject *t_ExternalRefSorter_instance_(PyTypeObject *type, PyObject *arg)
            {
              if (!castCheck(arg, ExternalRefSorter::initializeClass, 0))
                Py_RETURN_FALSE;
              Py_RETURN_TRUE;
            }

            static int t_ExternalRefSorter_init_(t_ExternalRefSorter *self, PyObject *args, PyObject *kwds)
            {
              ::org::apache::lucene::util::OfflineSorter a0((jobject) NULL);
              ExternalRefSorter object((jobject) NULL);

              if (!parseArgs(args, "k", ::org::apache::lucene::util::OfflineSorter::initializeClass, &a0))
              {
                INT_CALL(object = ExternalRefSorter(a0));
                self->object = object;
              }
              else
              {
                PyErr_SetArgsError((PyObject *) self, "__init__", args);
                return -1;
              }

              return 0;
            }

            static PyObject *t_ExternalRefSorter_add(t_ExternalRefSorter *self, PyObject *arg)
            {
              ::org::apache::lucene::util::BytesRef a0((jobject) NULL);

              if (!parseArg(arg, "k", ::org::apache::lucene::util::BytesRef::initializeClass, &a0))
              {
                OBJ_CALL(self->object.add(a0));
                Py_RETURN_NONE;
              }

              PyErr_SetArgsError((PyObject *) self, "add", arg);
              return NULL;
            }

            static PyObject *t_ExternalRefSorter_close(t_ExternalRefSorter *self)
            {
              OBJ_CALL(self->object.close());
              Py_RETURN_NONE;
            }

            static PyObject *t_ExternalRefSorter_getComparator(t_ExternalRefSorter *self)
            {
              ::java::util::Comparator result((jobject) NULL);
              OBJ_CALL(result = self->object.getComparator());
              return ::java::util::t_Comparator::wrap_Object(result, ::org::apache::lucene::util::PY_TYPE(BytesRef));
            }

            static PyObject *t_ExternalRefSorter_iterator(t_ExternalRefSorter *self)
            {
              ::org::apache::lucene::util::BytesRefIterator result((jobject) NULL);
              OBJ_CALL(result = self->object.iterator());
              return ::org::apache::lucene::util::t_BytesRefIterator::wrap_Object(result);
            }

            static PyObject *t_ExternalRefSorter_get__comparator(t_ExternalRefSorter *self, void *data)
            {
              ::java::util::Comparator value((jobject) NULL);
              OBJ_CALL(value = self->object.getComparator());
              return ::java::util::t_Comparator::wrap_Object(value);
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/miscellaneous/LimitTokenPositionFilterFactory.h"
#include "java/util/Map.h"
#include "java/lang/String.h"
#include "org/apache/lucene/analysis/TokenStream.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace miscellaneous {

          ::java::lang::Class *LimitTokenPositionFilterFactory::class$ = NULL;
          jmethodID *LimitTokenPositionFilterFactory::mids$ = NULL;
          bool LimitTokenPositionFilterFactory::live$ = false;
          ::java::lang::String *LimitTokenPositionFilterFactory::CONSUME_ALL_TOKENS_KEY = NULL;
          ::java::lang::String *LimitTokenPositionFilterFactory::MAX_TOKEN_POSITION_KEY = NULL;
          ::java::lang::String *LimitTokenPositionFilterFactory::NAME = NULL;

          jclass LimitTokenPositionFilterFactory::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/miscellaneous/LimitTokenPositionFilterFactory");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_408bd889ee3beae5] = env->getMethodID(cls, "<init>", "(Ljava/util/Map;)V");
              mids$[mid_create_6de1e28d9d10cd9e] = env->getMethodID(cls, "create", "(Lorg/apache/lucene/analysis/TokenStream;)Lorg/apache/lucene/analysis/TokenStream;");

              class$ = new ::java::lang::Class(cls);
              cls = (jclass) class$->this$;

              CONSUME_ALL_TOKENS_KEY = new ::java::lang::String(env->getStaticObjectField(cls, "CONSUME_ALL_TOKENS_KEY", "Ljava/lang/String;"));
              MAX_TOKEN_POSITION_KEY = new ::java::lang::String(env->getStaticObjectField(cls, "MAX_TOKEN_POSITION_KEY", "Ljava/lang/String;"));
              NAME = new ::java::lang::String(env->getStaticObjectField(cls, "NAME", "Ljava/lang/String;"));
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          LimitTokenPositionFilterFactory::LimitTokenPositionFilterFactory(const ::java::util::Map & a0) : ::org::apache::lucene::analysis::util::TokenFilterFactory(env->newObject(initializeClass, &mids$, mid_init$_408bd889ee3beae5, a0.this$)) {}

          ::org::apache::lucene::analysis::TokenStream LimitTokenPositionFilterFactory::create(const ::org::apache::lucene::analysis::TokenStream & a0) const
          {
            return ::org::apache::lucene::analysis::TokenStream(env->callObjectMethod(this$, mids$[mid_create_6de1e28d9d10cd9e], a0.this$));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace miscellaneous {
          static PyObject *t_LimitTokenPositionFilterFactory_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_LimitTokenPositionFilterFactory_instance_(PyTypeObject *type, PyObject *arg);
          static int t_LimitTokenPositionFilterFactory_init_(t_LimitTokenPositionFilterFactory *self, PyObject *args, PyObject *kwds);
          static PyObject *t_LimitTokenPositionFilterFactory_create(t_LimitTokenPositionFilterFactory *self, PyObject *args);

          static PyMethodDef t_LimitTokenPositionFilterFactory__methods_[] = {
            DECLARE_METHOD(t_LimitTokenPositionFilterFactory, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_LimitTokenPositionFilterFactory, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_LimitTokenPositionFilterFactory, create, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          static PyType_Slot PY_TYPE_SLOTS(LimitTokenPositionFilterFactory)[] = {
            { Py_tp_methods, t_LimitTokenPositionFilterFactory__methods_ },
            { Py_tp_init, (void *) t_LimitTokenPositionFilterFactory_init_ },
            { 0, NULL }
          };

          static PyType_Def *PY_TYPE_BASES(LimitTokenPositionFilterFactory)[] = {
            &PY_TYPE_DEF(::org::apache::lucene::analysis::util::TokenFilterFactory),
            NULL
          };

          DEFINE_TYPE(LimitTokenPositionFilterFactory, t_LimitTokenPositionFilterFactory, LimitTokenPositionFilterFactory);

          void t_LimitTokenPositionFilterFactory::install(PyObject *module)
          {
            installType(&PY_TYPE(LimitTokenPositionFilterFactory), &PY_TYPE_DEF(LimitTokenPositionFilterFactory), module, "LimitTokenPositionFilterFactory", 0);
          }

          void t_LimitTokenPositionFilterFactory::initialize(PyObject *module)
          {
            PyObject_SetAttrString((PyObject *) PY_TYPE(LimitTokenPositionFilterFactory), "class_", make_descriptor(LimitTokenPositionFilterFactory::initializeClass, 1));
            PyObject_SetAttrString((PyObject *) PY_TYPE(LimitTokenPositionFilterFactory), "wrapfn_", make_descriptor(t_LimitTokenPositionFilterFactory::wrap_jobject));
            PyObject_SetAttrString((PyObject *) PY_TYPE(LimitTokenPositionFilterFactory), "boxfn_", make_descriptor(boxObject));
            env->getClass(LimitTokenPositionFilterFactory::initializeClass);
            PyObject_SetAttrString((PyObject *) PY_TYPE(LimitTokenPositionFilterFactory), "CONSUME_ALL_TOKENS_KEY", make_descriptor(j2p(*LimitTokenPositionFilterFactory::CONSUME_ALL_TOKENS_KEY)));
            PyObject_SetAttrString((PyObject *) PY_TYPE(LimitTokenPositionFilterFactory), "MAX_TOKEN_POSITION_KEY", make_descriptor(j2p(*LimitTokenPositionFilterFactory::MAX_TOKEN_POSITION_KEY)));
            PyObject_SetAttrString((PyObject *) PY_TYPE(LimitTokenPositionFilterFactory), "NAME", make_descriptor(j2p(*LimitTokenPositionFilterFactory::NAME)));
          }

          static PyObject *t_LimitTokenPositionFilterFactory_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, LimitTokenPositionFilterFactory::initializeClass, 1)))
              return NULL;
            return t_LimitTokenPositionFilterFactory::wrap_Object(LimitTokenPositionFilterFactory(((t_LimitTokenPositionFilterFactory *) arg)->object.this$));
          }
          static PyObject *t_LimitTokenPositionFilterFactory_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, LimitTokenPositionFilterFactory::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_LimitTokenPositionFilterFactory_init_(t_LimitTokenPositionFilterFactory *self, PyObject *args, PyObject *kwds)
          {
            ::java::util::Map a0((jobject) NULL);
            PyTypeObject **p0;
            LimitTokenPositionFilterFactory object((jobject) NULL);

            if (!parseArgs(args, "K", ::java::util::Map::initializeClass, &a0, &p0, ::java::util::t_Map::parameters_))
            {
              INT_CALL(object = LimitTokenPositionFilterFactory(a0));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_LimitTokenPositionFilterFactory_create(t_LimitTokenPositionFilterFactory *self, PyObject *args)
          {
            ::org::apache::lucene::analysis::TokenStream a0((jobject) NULL);
            ::org::apache::lucene::analysis::TokenStream result((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::analysis::TokenStream::initializeClass, &a0))
            {
              OBJ_CALL(result = self->object.create(a0));
              return ::org::apache::lucene::analysis::t_TokenStream::wrap_Object(result);
            }

            return callSuper(PY_TYPE(LimitTokenPositionFilterFactory), (PyObject *) self, "create", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/facet/taxonomy/writercache/TaxonomyWriterCache.h"
#include "org/apache/lucene/facet/taxonomy/FacetLabel.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace facet {
        namespace taxonomy {
          namespace writercache {

            ::java::lang::Class *TaxonomyWriterCache::class$ = NULL;
            jmethodID *TaxonomyWriterCache::mids$ = NULL;
            bool TaxonomyWriterCache::live$ = false;

            jclass TaxonomyWriterCache::initializeClass(bool getOnly)
            {
              if (getOnly)
                return (jclass) (live$ ? class$->this$ : NULL);
              if (class$ == NULL)
              {
                jclass cls = (jclass) env->findClass("org/apache/lucene/facet/taxonomy/writercache/TaxonomyWriterCache");

                mids$ = new jmethodID[max_mid];
                mids$[mid_clear_f2cc1bce94666404] = env->getMethodID(cls, "clear", "()V");
                mids$[mid_close_f2cc1bce94666404] = env->getMethodID(cls, "close", "()V");
                mids$[mid_get_1e6795f28098d13d] = env->getMethodID(cls, "get", "(Lorg/apache/lucene/facet/taxonomy/FacetLabel;)I");
                mids$[mid_isFull_8454bd5aa23fd11e] = env->getMethodID(cls, "isFull", "()Z");
                mids$[mid_put_94a843fa7d322607] = env->getMethodID(cls, "put", "(Lorg/apache/lucene/facet/taxonomy/FacetLabel;I)Z");
                mids$[mid_size_9972fcc56b44e79d] = env->getMethodID(cls, "size", "()I");

                class$ = new ::java::lang::Class(cls);
                live$ = true;
              }
              return (jclass) class$->this$;
            }

            void TaxonomyWriterCache::clear() const
            {
              env->callVoidMethod(this$, mids$[mid_clear_f2cc1bce94666404]);
            }

            void TaxonomyWriterCache::close() const
            {
              env->callVoidMethod(this$, mids$[mid_close_f2cc1bce94666404]);
            }

            jint TaxonomyWriterCache::get(const ::org::apache::lucene::facet::taxonomy::FacetLabel & a0) const
            {
              return env->callIntMethod(this$, mids$[mid_get_1e6795f28098d13d], a0.this$);
            }

            jboolean TaxonomyWriterCache::isFull() const
            {
              return env->callBooleanMethod(this$, mids$[mid_isFull_8454bd5aa23fd11e]);
            }

            jboolean TaxonomyWriterCache::put(const ::org::apache::lucene::facet::taxonomy::FacetLabel & a0, jint a1) const
            {
              return env->callBooleanMethod(this$, mids$[mid_put_94a843fa7d322607], a0.this$, a1);
            }

            jint TaxonomyWriterCache::size() const
            {
              return env->callIntMethod(this$, mids$[mid_size_9972fcc56b44e79d]);
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace facet {
        namespace taxonomy {
          namespace writercache {
            static PyObject *t_TaxonomyWriterCache_cast_(PyTypeObject *type, PyObject *arg);
            static PyObject *t_TaxonomyWriterCache_instance_(PyTypeObject *type, PyObject *arg);
            static PyObject *t_TaxonomyWriterCache_clear(t_TaxonomyWriterCache *self);
            static PyObject *t_TaxonomyWriterCache_close(t_TaxonomyWriterCache *self);
            static PyObject *t_TaxonomyWriterCache_get(t_TaxonomyWriterCache *self, PyObject *arg);
            static PyObject *t_TaxonomyWriterCache_isFull(t_TaxonomyWriterCache *self);
            static PyObject *t_TaxonomyWriterCache_put(t_TaxonomyWriterCache *self, PyObject *args);
            static PyObject *t_TaxonomyWriterCache_size(t_TaxonomyWriterCache *self);
            static PyObject *t_TaxonomyWriterCache_get__full(t_TaxonomyWriterCache *self, void *data);
            static PyGetSetDef t_TaxonomyWriterCache__fields_[] = {
              DECLARE_GET_FIELD(t_TaxonomyWriterCache, full),
              { NULL, NULL, NULL, NULL, NULL }
            };

            static PyMethodDef t_TaxonomyWriterCache__methods_[] = {
              DECLARE_METHOD(t_TaxonomyWriterCache, cast_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_TaxonomyWriterCache, instance_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_TaxonomyWriterCache, clear, METH_NOARGS),
              DECLARE_METHOD(t_TaxonomyWriterCache, close, METH_NOARGS),
              DECLARE_METHOD(t_TaxonomyWriterCache, get, METH_O),
              DECLARE_METHOD(t_TaxonomyWriterCache, isFull, METH_NOARGS),
              DECLARE_METHOD(t_TaxonomyWriterCache, put, METH_VARARGS),
              DECLARE_METHOD(t_TaxonomyWriterCache, size, METH_NOARGS),
              { NULL, NULL, 0, NULL }
            };

            static PyType_Slot PY_TYPE_SLOTS(TaxonomyWriterCache)[] = {
              { Py_tp_methods, t_TaxonomyWriterCache__methods_ },
              { Py_tp_init, (void *) abstract_init },
              { Py_tp_getset, t_TaxonomyWriterCache__fields_ },
              { 0, NULL }
            };

            static PyType_Def *PY_TYPE_BASES(TaxonomyWriterCache)[] = {
              &PY_TYPE_DEF(::java::lang::Object),
              NULL
            };

            DEFINE_TYPE(TaxonomyWriterCache, t_TaxonomyWriterCache, TaxonomyWriterCache);

            void t_TaxonomyWriterCache::install(PyObject *module)
            {
              installType(&PY_TYPE(TaxonomyWriterCache), &PY_TYPE_DEF(TaxonomyWriterCache), module, "TaxonomyWriterCache", 0);
            }

            void t_TaxonomyWriterCache::initialize(PyObject *module)
            {
              PyObject_SetAttrString((PyObject *) PY_TYPE(TaxonomyWriterCache), "class_", make_descriptor(TaxonomyWriterCache::initializeClass, 1));
              PyObject_SetAttrString((PyObject *) PY_TYPE(TaxonomyWriterCache), "wrapfn_", make_descriptor(t_TaxonomyWriterCache::wrap_jobject));
              PyObject_SetAttrString((PyObject *) PY_TYPE(TaxonomyWriterCache), "boxfn_", make_descriptor(boxObject));
            }

            static PyObject *t_TaxonomyWriterCache_cast_(PyTypeObject *type, PyObject *arg)
            {
              if (!(arg = castCheck(arg, TaxonomyWriterCache::initializeClass, 1)))
                return NULL;
              return t_TaxonomyWriterCache::wrap_Object(TaxonomyWriterCache(((t_TaxonomyWriterCache *) arg)->object.this$));
            }
            static PyObject *t_TaxonomyWriterCache_instance_(PyTypeObject *type, PyObject *arg)
            {
              if (!castCheck(arg, TaxonomyWriterCache::initializeClass, 0))
                Py_RETURN_FALSE;
              Py_RETURN_TRUE;
            }

            static PyObject *t_TaxonomyWriterCache_clear(t_TaxonomyWriterCache *self)
            {
              OBJ_CALL(self->object.clear());
              Py_RETURN_NONE;
            }

            static PyObject *t_TaxonomyWriterCache_close(t_TaxonomyWriterCache *self)
            {
              OBJ_CALL(self->object.close());
              Py_RETURN_NONE;
            }

            static PyObject *t_TaxonomyWriterCache_get(t_TaxonomyWriterCache *self, PyObject *arg)
            {
              ::org::apache::lucene::facet::taxonomy::FacetLabel a0((jobject) NULL);
              jint result;

              if (!parseArg(arg, "k", ::org::apache::lucene::facet::taxonomy::FacetLabel::initializeClass, &a0))
              {
                OBJ_CALL(result = self->object.get(a0));
                return PyLong_FromLong((long) result);
              }

              PyErr_SetArgsError((PyObject *) self, "get", arg);
              return NULL;
            }

            static PyObject *t_TaxonomyWriterCache_isFull(t_TaxonomyWriterCache *self)
            {
              jboolean result;
              OBJ_CALL(result = self->object.isFull());
              Py_RETURN_BOOL(result);
            }

            static PyObject *t_TaxonomyWriterCache_put(t_TaxonomyWriterCache *self, PyObject *args)
            {
              ::org::apache::lucene::facet::taxonomy::FacetLabel a0((jobject) NULL);
              jint a1;
              jboolean result;

              if (!parseArgs(args, "kI", ::org::apache::lucene::facet::taxonomy::FacetLabel::initializeClass, &a0, &a1))
              {
                OBJ_CALL(result = self->object.put(a0, a1));
                Py_RETURN_BOOL(result);
              }

              PyErr_SetArgsError((PyObject *) self, "put", args);
              return NULL;
            }

            static PyObject *t_TaxonomyWriterCache_size(t_TaxonomyWriterCache *self)
            {
              jint result;
              OBJ_CALL(result = self->object.size());
              return PyLong_FromLong((long) result);
            }

            static PyObject *t_TaxonomyWriterCache_get__full(t_TaxonomyWriterCache *self, void *data)
            {
              jboolean value;
              OBJ_CALL(value = self->object.isFull());
              Py_RETURN_BOOL(value);
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/index/FilterNumericDocValues.h"
#include "java/io/IOException.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {

        ::java::lang::Class *FilterNumericDocValues::class$ = NULL;
        jmethodID *FilterNumericDocValues::mids$ = NULL;
        bool FilterNumericDocValues::live$ = false;

        jclass FilterNumericDocValues::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/index/FilterNumericDocValues");

            mids$ = new jmethodID[max_mid];
            mids$[mid_advance_1e143afe1894d213] = env->getMethodID(cls, "advance", "(I)I");
            mids$[mid_advanceExact_a1d30e1ee40c89a2] = env->getMethodID(cls, "advanceExact", "(I)Z");
            mids$[mid_cost_2e5ae9edcb9b072f] = env->getMethodID(cls, "cost", "()J");
            mids$[mid_docID_9972fcc56b44e79d] = env->getMethodID(cls, "docID", "()I");
            mids$[mid_longValue_2e5ae9edcb9b072f] = env->getMethodID(cls, "longValue", "()J");
            mids$[mid_nextDoc_9972fcc56b44e79d] = env->getMethodID(cls, "nextDoc", "()I");

            class$ = new ::java::lang::Class(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        jint FilterNumericDocValues::advance(jint a0) const
        {
          return env->callIntMethod(this$, mids$[mid_advance_1e143afe1894d213], a0);
        }

        jboolean FilterNumericDocValues::advanceExact(jint a0) const
        {
          return env->callBooleanMethod(this$, mids$[mid_advanceExact_a1d30e1ee40c89a2], a0);
        }

        jlong FilterNumericDocValues::cost() const
        {
          return env->callLongMethod(this$, mids$[mid_cost_2e5ae9edcb9b072f]);
        }

        jint FilterNumericDocValues::docID() const
        {
          return env->callIntMethod(this$, mids$[mid_docID_9972fcc56b44e79d]);
        }

        jlong FilterNumericDocValues::longValue() const
        {
          return env->callLongMethod(this$, mids$[mid_longValue_2e5ae9edcb9b072f]);
        }

        jint FilterNumericDocValues::nextDoc() const
        {
          return env->callIntMethod(this$, mids$[mid_nextDoc_9972fcc56b44e79d]);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {
        static PyObject *t_FilterNumericDocValues_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_FilterNumericDocValues_instance_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_FilterNumericDocValues_advance(t_FilterNumericDocValues *self, PyObject *args);
        static PyObject *t_FilterNumericDocValues_advanceExact(t_FilterNumericDocValues *self, PyObject *args);
        static PyObject *t_FilterNumericDocValues_cost(t_FilterNumericDocValues *self, PyObject *args);
        static PyObject *t_FilterNumericDocValues_docID(t_FilterNumericDocValues *self, PyObject *args);
        static PyObject *t_FilterNumericDocValues_longValue(t_FilterNumericDocValues *self, PyObject *args);
        static PyObject *t_FilterNumericDocValues_nextDoc(t_FilterNumericDocValues *self, PyObject *args);

        static PyMethodDef t_FilterNumericDocValues__methods_[] = {
          DECLARE_METHOD(t_FilterNumericDocValues, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_FilterNumericDocValues, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_FilterNumericDocValues, advance, METH_VARARGS),
          DECLARE_METHOD(t_FilterNumericDocValues, advanceExact, METH_VARARGS),
          DECLARE_METHOD(t_FilterNumericDocValues, cost, METH_VARARGS),
          DECLARE_METHOD(t_FilterNumericDocValues, docID, METH_VARARGS),
          DECLARE_METHOD(t_FilterNumericDocValues, longValue, METH_VARARGS),
          DECLARE_METHOD(t_FilterNumericDocValues, nextDoc, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        static PyType_Slot PY_TYPE_SLOTS(FilterNumericDocValues)[] = {
          { Py_tp_methods, t_FilterNumericDocValues__methods_ },
          { Py_tp_init, (void *) abstract_init },
          { 0, NULL }
        };

        static PyType_Def *PY_TYPE_BASES(FilterNumericDocValues)[] = {
          &PY_TYPE_DEF(::org::apache::lucene::index::NumericDocValues),
          NULL
        };

        DEFINE_TYPE(FilterNumericDocValues, t_FilterNumericDocValues, FilterNumericDocValues);

        void t_FilterNumericDocValues::install(PyObject *module)
        {
          installType(&PY_TYPE(FilterNumericDocValues), &PY_TYPE_DEF(FilterNumericDocValues), module, "FilterNumericDocValues", 0);
        }

        void t_FilterNumericDocValues::initialize(PyObject *module)
        {
          PyObject_SetAttrString((PyObject *) PY_TYPE(FilterNumericDocValues), "class_", make_descriptor(FilterNumericDocValues::initializeClass, 1));
          PyObject_SetAttrString((PyObject *) PY_TYPE(FilterNumericDocValues), "wrapfn_", make_descriptor(t_FilterNumericDocValues::wrap_jobject));
          PyObject_SetAttrString((PyObject *) PY_TYPE(FilterNumericDocValues), "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_FilterNumericDocValues_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, FilterNumericDocValues::initializeClass, 1)))
            return NULL;
          return t_FilterNumericDocValues::wrap_Object(FilterNumericDocValues(((t_FilterNumericDocValues *) arg)->object.this$));
        }
        static PyObject *t_FilterNumericDocValues_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, FilterNumericDocValues::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static PyObject *t_FilterNumericDocValues_advance(t_FilterNumericDocValues *self, PyObject *args)
        {
          jint a0;
          jint result;

          if (!parseArgs(args, "I", &a0))
          {
            OBJ_CALL(result = self->object.advance(a0));
            return PyLong_FromLong((long) result);
          }

          return callSuper(PY_TYPE(FilterNumericDocValues), (PyObject *) self, "advance", args, 2);
        }

        static PyObject *t_FilterNumericDocValues_advanceExact(t_FilterNumericDocValues *self, PyObject *args)
        {
          jint a0;
          jboolean result;

          if (!parseArgs(args, "I", &a0))
          {
            OBJ_CALL(result = self->object.advanceExact(a0));
            Py_RETURN_BOOL(result);
          }

          return callSuper(PY_TYPE(FilterNumericDocValues), (PyObject *) self, "advanceExact", args, 2);
        }

        static PyObject *t_FilterNumericDocValues_cost(t_FilterNumericDocValues *self, PyObject *args)
        {
          jlong result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.cost());
            return PyLong_FromLongLong((PY_LONG_LONG) result);
          }

          return callSuper(PY_TYPE(FilterNumericDocValues), (PyObject *) self, "cost", args, 2);
        }

        static PyObject *t_FilterNumericDocValues_docID(t_FilterNumericDocValues *self, PyObject *args)
        {
          jint result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.docID());
            return PyLong_FromLong((long) result);
          }

          return callSuper(PY_TYPE(FilterNumericDocValues), (PyObject *) self, "docID", args, 2);
        }

        static PyObject *t_FilterNumericDocValues_longValue(t_FilterNumericDocValues *self, PyObject *args)
        {
          jlong result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.longValue());
            return PyLong_FromLongLong((PY_LONG_LONG) result);
          }

          return callSuper(PY_TYPE(FilterNumericDocValues), (PyObject *) self, "longValue", args, 2);
        }

        static PyObject *t_FilterNumericDocValues_nextDoc(t_FilterNumericDocValues *self, PyObject *args)
        {
          jint result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.nextDoc());
            return PyLong_FromLong((long) result);
          }

          return callSuper(PY_TYPE(FilterNumericDocValues), (PyObject *) self, "nextDoc", args, 2);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/vectorhighlight/BaseFragmentsBuilder.h"
#include "org/apache/lucene/index/IndexReader.h"
#include "org/apache/lucene/search/vectorhighlight/FragmentsBuilder.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/search/highlight/Encoder.h"
#include "java/lang/String.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/search/vectorhighlight/FieldFragList.h"
#include "java/util/List.h"
#include "org/apache/lucene/search/vectorhighlight/FieldFragList$WeightedFragInfo.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace vectorhighlight {

          ::java::lang::Class *BaseFragmentsBuilder::class$ = NULL;
          jmethodID *BaseFragmentsBuilder::mids$ = NULL;
          bool BaseFragmentsBuilder::live$ = false;
          JArray< ::java::lang::String > *BaseFragmentsBuilder::COLORED_POST_TAGS = NULL;
          JArray< ::java::lang::String > *BaseFragmentsBuilder::COLORED_PRE_TAGS = NULL;

          jclass BaseFragmentsBuilder::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/search/vectorhighlight/BaseFragmentsBuilder");

              mids$ = new jmethodID[max_mid];
              mids$[mid_createFragment_88fda903d6865251] = env->getMethodID(cls, "createFragment", "(Lorg/apache/lucene/index/IndexReader;ILjava/lang/String;Lorg/apache/lucene/search/vectorhighlight/FieldFragList;)Ljava/lang/String;");
              mids$[mid_createFragment_23264a18dcb3de8b] = env->getMethodID(cls, "createFragment", "(Lorg/apache/lucene/index/IndexReader;ILjava/lang/String;Lorg/apache/lucene/search/vectorhighlight/FieldFragList;[Ljava/lang/String;[Ljava/lang/String;Lorg/apache/lucene/search/highlight/Encoder;)Ljava/lang/String;");
              mids$[mid_createFragments_96858e3aaaeddd60] = env->getMethodID(cls, "createFragments", "(Lorg/apache/lucene/index/IndexReader;ILjava/lang/String;Lorg/apache/lucene/search/vectorhighlight/FieldFragList;I)[Ljava/lang/String;");
              mids$[mid_createFragments_59e4a59490ad9938] = env->getMethodID(cls, "createFragments", "(Lorg/apache/lucene/index/IndexReader;ILjava/lang/String;Lorg/apache/lucene/search/vectorhighlight/FieldFragList;I[Ljava/lang/String;[Ljava/lang/String;Lorg/apache/lucene/search/highlight/Encoder;)[Ljava/lang/String;");
              mids$[mid_getMultiValuedSeparator_8eea1dd85c3239c3] = env->getMethodID(cls, "getMultiValuedSeparator", "()C");
              mids$[mid_getWeightedFragInfoList_e420eeaadf0bcd20] = env->getMethodID(cls, "getWeightedFragInfoList", "(Ljava/util/List;)Ljava/util/List;");
              mids$[mid_isDiscreteMultiValueHighlighting_8454bd5aa23fd11e] = env->getMethodID(cls, "isDiscreteMultiValueHighlighting", "()Z");
              mids$[mid_setDiscreteMultiValueHighlighting_9d72768e8fdce2b7] = env->getMethodID(cls, "setDiscreteMultiValueHighlighting", "(Z)V");
              mids$[mid_setMultiValuedSeparator_b227b2c08d18d29e] = env->getMethodID(cls, "setMultiValuedSeparator", "(C)V");
              mids$[mid_discreteMultiValueHighlighting_d34723982f24d8e2] = env->getMethodID(cls, "discreteMultiValueHighlighting", "(Ljava/util/List;[Lorg/apache/lucene/document/Field;)Ljava/util/List;");
              mids$[mid_makeFragment_1d1a5dd34aecdce3] = env->getMethodID(cls, "makeFragment", "(Ljava/lang/StringBuilder;[I[Lorg/apache/lucene/document/Field;Lorg/apache/lucene/search/vectorhighlight/FieldFragList$WeightedFragInfo;[Ljava/lang/String;[Ljava/lang/String;Lorg/apache/lucene/search/highlight/Encoder;)Ljava/lang/String;");
              mids$[mid_getFragmentSourceMSO_af70c7693cb17992] = env->getMethodID(cls, "getFragmentSourceMSO", "(Ljava/lang/StringBuilder;[I[Lorg/apache/lucene/document/Field;II[I)Ljava/lang/String;");
              mids$[mid_getFragmentSource_29d43192188dc845] = env->getMethodID(cls, "getFragmentSource", "(Ljava/lang/StringBuilder;[I[Lorg/apache/lucene/document/Field;II)Ljava/lang/String;");
              mids$[mid_getPreTag_d7593acad64ef635] = env->getMethodID(cls, "getPreTag", "(I)Ljava/lang/String;");
              mids$[mid_getPreTag_fae0305e95ad7426] = env->getMethodID(cls, "getPreTag", "([Ljava/lang/String;I)Ljava/lang/String;");
              mids$[mid_getPostTag_fae0305e95ad7426] = env->getMethodID(cls, "getPostTag", "([Ljava/lang/String;I)Ljava/lang/String;");
              mids$[mid_getPostTag_d7593acad64ef635] = env->getMethodID(cls, "getPostTag", "(I)Ljava/lang/String;");
              mids$[mid_getFields_e6c7b90f33cbb580] = env->getMethodID(cls, "getFields", "(Lorg/apache/lucene/index/IndexReader;ILjava/lang/String;)[Lorg/apache/lucene/document/Field;");

              class$ = new ::java::lang::Class(cls);
              cls = (jclass) class$->this$;

              COLORED_POST_TAGS = new JArray< ::java::lang::String >(env->getStaticObjectField(cls, "COLORED_POST_TAGS", "[Ljava/lang/String;"));
              COLORED_PRE_TAGS = new JArray< ::java::lang::String >(env->getStaticObjectField(cls, "COLORED_PRE_TAGS", "[Ljava/lang/String;"));
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          ::java::lang::String BaseFragmentsBuilder::createFragment(const ::org::apache::lucene::index::IndexReader & a0, jint a1, const ::java::lang::String & a2, const ::org::apache::lucene::search::vectorhighlight::FieldFragList & a3) const
          {
            return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_createFragment_88fda903d6865251], a0.this$, a1, a2.this$, a3.this$));
          }

          ::java::lang::String BaseFragmentsBuilder::createFragment(const ::org::apache::lucene::index::IndexReader & a0, jint a1, const ::java::lang::String & a2, const ::org::apache::lucene::search::vectorhighlight::FieldFragList & a3, const JArray< ::java::lang::String > & a4, const JArray< ::java::lang::String > & a5, const ::org::apache::lucene::search::highlight::Encoder & a6) const
          {
            return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_createFragment_23264a18dcb3de8b], a0.this$, a1, a2.this$, a3.this$, a4.this$, a5.this$, a6.this$));
          }

          JArray< ::java::lang::String > BaseFragmentsBuilder::createFragments(const ::org::apache::lucene::index::IndexReader & a0, jint a1, const ::java::lang::String & a2, const ::org::apache::lucene::search::vectorhighlight::FieldFragList & a3, jint a4) const
          {
            return JArray< ::java::lang::String >(env->callObjectMethod(this$, mids$[mid_createFragments_96858e3aaaeddd60], a0.this$, a1, a2.this$, a3.this$, a4));
          }

          JArray< ::java::lang::String > BaseFragmentsBuilder::createFragments(const ::org::apache::lucene::index::IndexReader & a0, jint a1, const ::java::lang::String & a2, const ::org::apache::lucene::search::vectorhighlight::FieldFragList & a3, jint a4, const JArray< ::java::lang::String > & a5, const JArray< ::java::lang::String > & a6, const ::org::apache::lucene::search::highlight::Encoder & a7) const
          {
            return JArray< ::java::lang::String >(env->callObjectMethod(this$, mids$[mid_createFragments_59e4a59490ad9938], a0.this$, a1, a2.this$, a3.this$, a4, a5.this$, a6.this$, a7.this$));
          }

          jchar BaseFragmentsBuilder::getMultiValuedSeparator() const
          {
            return env->callCharMethod(this$, mids$[mid_getMultiValuedSeparator_8eea1dd85c3239c3]);
          }

          ::java::util::List BaseFragmentsBuilder::getWeightedFragInfoList(const ::java::util::List & a0) const
          {
            return ::java::util::List(env->callObjectMethod(this$, mids$[mid_getWeightedFragInfoList_e420eeaadf0bcd20], a0.this$));
          }

          jboolean BaseFragmentsBuilder::isDiscreteMultiValueHighlighting() const
          {
            return env->callBooleanMethod(this$, mids$[mid_isDiscreteMultiValueHighlighting_8454bd5aa23fd11e]);
          }

          void BaseFragmentsBuilder::setDiscreteMultiValueHighlighting(jboolean a0) const
          {
            env->callVoidMethod(this$, mids$[mid_setDiscreteMultiValueHighlighting_9d72768e8fdce2b7], a0);
          }

          void BaseFragmentsBuilder::setMultiValuedSeparator(jchar a0) const
          {
            env->callVoidMethod(this$, mids$[mid_setMultiValuedSeparator_b227b2c08d18d29e], a0);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace vectorhighlight {
          static PyObject *t_BaseFragmentsBuilder_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_BaseFragmentsBuilder_instance_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_BaseFragmentsBuilder_createFragment(t_BaseFragmentsBuilder *self, PyObject *args);
          static PyObject *t_BaseFragmentsBuilder_createFragments(t_BaseFragmentsBuilder *self, PyObject *args);
          static PyObject *t_BaseFragmentsBuilder_getMultiValuedSeparator(t_BaseFragmentsBuilder *self);
          static PyObject *t_BaseFragmentsBuilder_getWeightedFragInfoList(t_BaseFragmentsBuilder *self, PyObject *arg);
          static PyObject *t_BaseFragmentsBuilder_isDiscreteMultiValueHighlighting(t_BaseFragmentsBuilder *self);
          static PyObject *t_BaseFragmentsBuilder_setDiscreteMultiValueHighlighting(t_BaseFragmentsBuilder *self, PyObject *arg);
          static PyObject *t_BaseFragmentsBuilder_setMultiValuedSeparator(t_BaseFragmentsBuilder *self, PyObject *arg);
          static PyObject *t_BaseFragmentsBuilder_get__discreteMultiValueHighlighting(t_BaseFragmentsBuilder *self, void *data);
          static int t_BaseFragmentsBuilder_set__discreteMultiValueHighlighting(t_BaseFragmentsBuilder *self, PyObject *arg, void *data);
          static PyObject *t_BaseFragmentsBuilder_get__multiValuedSeparator(t_BaseFragmentsBuilder *self, void *data);
          static int t_BaseFragmentsBuilder_set__multiValuedSeparator(t_BaseFragmentsBuilder *self, PyObject *arg, void *data);
          static PyGetSetDef t_BaseFragmentsBuilder__fields_[] = {
            DECLARE_GETSET_FIELD(t_BaseFragmentsBuilder, discreteMultiValueHighlighting),
            DECLARE_GETSET_FIELD(t_BaseFragmentsBuilder, multiValuedSeparator),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_BaseFragmentsBuilder__methods_[] = {
            DECLARE_METHOD(t_BaseFragmentsBuilder, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_BaseFragmentsBuilder, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_BaseFragmentsBuilder, createFragment, METH_VARARGS),
            DECLARE_METHOD(t_BaseFragmentsBuilder, createFragments, METH_VARARGS),
            DECLARE_METHOD(t_BaseFragmentsBuilder, getMultiValuedSeparator, METH_NOARGS),
            DECLARE_METHOD(t_BaseFragmentsBuilder, getWeightedFragInfoList, METH_O),
            DECLARE_METHOD(t_BaseFragmentsBuilder, isDiscreteMultiValueHighlighting, METH_NOARGS),
            DECLARE_METHOD(t_BaseFragmentsBuilder, setDiscreteMultiValueHighlighting, METH_O),
            DECLARE_METHOD(t_BaseFragmentsBuilder, setMultiValuedSeparator, METH_O),
            { NULL, NULL, 0, NULL }
          };

          static PyType_Slot PY_TYPE_SLOTS(BaseFragmentsBuilder)[] = {
            { Py_tp_methods, t_BaseFragmentsBuilder__methods_ },
            { Py_tp_init, (void *) abstract_init },
            { Py_tp_getset, t_BaseFragmentsBuilder__fields_ },
            { 0, NULL }
          };

          static PyType_Def *PY_TYPE_BASES(BaseFragmentsBuilder)[] = {
            &PY_TYPE_DEF(::java::lang::Object),
            NULL
          };

          DEFINE_TYPE(BaseFragmentsBuilder, t_BaseFragmentsBuilder, BaseFragmentsBuilder);

          void t_BaseFragmentsBuilder::install(PyObject *module)
          {
            installType(&PY_TYPE(BaseFragmentsBuilder), &PY_TYPE_DEF(BaseFragmentsBuilder), module, "BaseFragmentsBuilder", 0);
          }

          void t_BaseFragmentsBuilder::initialize(PyObject *module)
          {
            PyObject_SetAttrString((PyObject *) PY_TYPE(BaseFragmentsBuilder), "class_", make_descriptor(BaseFragmentsBuilder::initializeClass, 1));
            PyObject_SetAttrString((PyObject *) PY_TYPE(BaseFragmentsBuilder), "wrapfn_", make_descriptor(t_BaseFragmentsBuilder::wrap_jobject));
            PyObject_SetAttrString((PyObject *) PY_TYPE(BaseFragmentsBuilder), "boxfn_", make_descriptor(boxObject));
            env->getClass(BaseFragmentsBuilder::initializeClass);
            PyObject_SetAttrString((PyObject *) PY_TYPE(BaseFragmentsBuilder), "COLORED_POST_TAGS", make_descriptor(JArray<jstring>(BaseFragmentsBuilder::COLORED_POST_TAGS->this$).wrap()));
            PyObject_SetAttrString((PyObject *) PY_TYPE(BaseFragmentsBuilder), "COLORED_PRE_TAGS", make_descriptor(JArray<jstring>(BaseFragmentsBuilder::COLORED_PRE_TAGS->this$).wrap()));
          }

          static PyObject *t_BaseFragmentsBuilder_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, BaseFragmentsBuilder::initializeClass, 1)))
              return NULL;
            return t_BaseFragmentsBuilder::wrap_Object(BaseFragmentsBuilder(((t_BaseFragmentsBuilder *) arg)->object.this$));
          }
          static PyObject *t_BaseFragmentsBuilder_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, BaseFragmentsBuilder::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static PyObject *t_BaseFragmentsBuilder_createFragment(t_BaseFragmentsBuilder *self, PyObject *args)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 4:
              {
                ::org::apache::lucene::index::IndexReader a0((jobject) NULL);
                jint a1;
                ::java::lang::String a2((jobject) NULL);
                ::org::apache::lucene::search::vectorhighlight::FieldFragList a3((jobject) NULL);
                ::java::lang::String result((jobject) NULL);

                if (!parseArgs(args, "kIsk", ::org::apache::lucene::index::IndexReader::initializeClass, ::org::apache::lucene::search::vectorhighlight::FieldFragList::initializeClass, &a0, &a1, &a2, &a3))
                {
                  OBJ_CALL(result = self->object.createFragment(a0, a1, a2, a3));
                  return j2p(result);
                }
              }
              break;
             case 7:
              {
                ::org::apache::lucene::index::IndexReader a0((jobject) NULL);
                jint a1;
                ::java::lang::String a2((jobject) NULL);
                ::org::apache::lucene::search::vectorhighlight::FieldFragList a3((jobject) NULL);
                JArray< ::java::lang::String > a4((jobject) NULL);
                JArray< ::java::lang::String > a5((jobject) NULL);
                ::org::apache::lucene::search::highlight::Encoder a6((jobject) NULL);
                ::java::lang::String result((jobject) NULL);

                if (!parseArgs(args, "kIsk[s[sk", ::org::apache::lucene::index::IndexReader::initializeClass, ::org::apache::lucene::search::vectorhighlight::FieldFragList::initializeClass, ::org::apache::lucene::search::highlight::Encoder::initializeClass, &a0, &a1, &a2, &a3, &a4, &a5, &a6))
                {
                  OBJ_CALL(result = self->object.createFragment(a0, a1, a2, a3, a4, a5, a6));
                  return j2p(result);
                }
              }
            }

            PyErr_SetArgsError((PyObject *) self, "createFragment", args);
            return NULL;
          }

          static PyObject *t_BaseFragmentsBuilder_createFragments(t_BaseFragmentsBuilder *self, PyObject *args)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 5:
              {
                ::org::apache::lucene::index::IndexReader a0((jobject) NULL);
                jint a1;
                ::java::lang::String a2((jobject) NULL);
                ::org::apache::lucene::search::vectorhighlight::FieldFragList a3((jobject) NULL);
                jint a4;
                JArray< ::java::lang::String > result((jobject) NULL);

                if (!parseArgs(args, "kIskI", ::org::apache::lucene::index::IndexReader::initializeClass, ::org::apache::lucene::search::vectorhighlight::FieldFragList::initializeClass, &a0, &a1, &a2, &a3, &a4))
                {
                  OBJ_CALL(result = self->object.createFragments(a0, a1, a2, a3, a4));
                  return JArray<jstring>(result.this$).wrap();
                }
              }
              break;
             case 8:
              {
                ::org::apache::lucene::index::IndexReader a0((jobject) NULL);
                jint a1;
                ::java::lang::String a2((jobject) NULL);
                ::org::apache::lucene::search::vectorhighlight::FieldFragList a3((jobject) NULL);
                jint a4;
                JArray< ::java::lang::String > a5((jobject) NULL);
                JArray< ::java::lang::String > a6((jobject) NULL);
                ::org::apache::lucene::search::highlight::Encoder a7((jobject) NULL);
                JArray< ::java::lang::String > result((jobject) NULL);

                if (!parseArgs(args, "kIskI[s[sk", ::org::apache::lucene::index::IndexReader::initializeClass, ::org::apache::lucene::search::vectorhighlight::FieldFragList::initializeClass, ::org::apache::lucene::search::highlight::Encoder::initializeClass, &a0, &a1, &a2, &a3, &a4, &a5, &a6, &a7))
                {
                  OBJ_CALL(result = self->object.createFragments(a0, a1, a2, a3, a4, a5, a6, a7));
                  return JArray<jstring>(result.this$).wrap();
                }
              }
            }

            PyErr_SetArgsError((PyObject *) self, "createFragments", args);
            return NULL;
          }

          static PyObject *t_BaseFragmentsBuilder_getMultiValuedSeparator(t_BaseFragmentsBuilder *self)
          {
            jchar result;
            OBJ_CALL(result = self->object.getMultiValuedSeparator());
            return c2p(result);
          }

          static PyObject *t_BaseFragmentsBuilder_getWeightedFragInfoList(t_BaseFragmentsBuilder *self, PyObject *arg)
          {
            ::java::util::List a0((jobject) NULL);
            PyTypeObject **p0;
            ::java::util::List result((jobject) NULL);

            if (!parseArg(arg, "K", ::java::util::List::initializeClass, &a0, &p0, ::java::util::t_List::parameters_))
            {
              OBJ_CALL(result = self->object.getWeightedFragInfoList(a0));
              return ::java::util::t_List::wrap_Object(result, ::org::apache::lucene::search::vectorhighlight::PY_TYPE(FieldFragList$WeightedFragInfo));
            }

            PyErr_SetArgsError((PyObject *) self, "getWeightedFragInfoList", arg);
            return NULL;
          }

          static PyObject *t_BaseFragmentsBuilder_isDiscreteMultiValueHighlighting(t_BaseFragmentsBuilder *self)
          {
            jboolean result;
            OBJ_CALL(result = self->object.isDiscreteMultiValueHighlighting());
            Py_RETURN_BOOL(result);
          }

          static PyObject *t_BaseFragmentsBuilder_setDiscreteMultiValueHighlighting(t_BaseFragmentsBuilder *self, PyObject *arg)
          {
            jboolean a0;

            if (!parseArg(arg, "Z", &a0))
            {
              OBJ_CALL(self->object.setDiscreteMultiValueHighlighting(a0));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError((PyObject *) self, "setDiscreteMultiValueHighlighting", arg);
            return NULL;
          }

          static PyObject *t_BaseFragmentsBuilder_setMultiValuedSeparator(t_BaseFragmentsBuilder *self, PyObject *arg)
          {
            jchar a0;

            if (!parseArg(arg, "C", &a0))
            {
              OBJ_CALL(self->object.setMultiValuedSeparator(a0));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError((PyObject *) self, "setMultiValuedSeparator", arg);
            return NULL;
          }

          static PyObject *t_BaseFragmentsBuilder_get__discreteMultiValueHighlighting(t_BaseFragmentsBuilder *self, void *data)
          {
            jboolean value;
            OBJ_CALL(value = self->object.isDiscreteMultiValueHighlighting());
            Py_RETURN_BOOL(value);
          }
          static int t_BaseFragmentsBuilder_set__discreteMultiValueHighlighting(t_BaseFragmentsBuilder *self, PyObject *arg, void *data)
          {
            {
              jboolean value;
              if (!parseArg(arg, "Z", &value))
              {
                INT_CALL(self->object.setDiscreteMultiValueHighlighting(value));
                return 0;
              }
            }
            PyErr_SetArgsError((PyObject *) self, "discreteMultiValueHighlighting", arg);
            return -1;
          }

          static PyObject *t_BaseFragmentsBuilder_get__multiValuedSeparator(t_BaseFragmentsBuilder *self, void *data)
          {
            jchar value;
            OBJ_CALL(value = self->object.getMultiValuedSeparator());
            return c2p(value);
          }
          static int t_BaseFragmentsBuilder_set__multiValuedSeparator(t_BaseFragmentsBuilder *self, PyObject *arg, void *data)
          {
            {
              jchar value;
              if (!parseArg(arg, "C", &value))
              {
                INT_CALL(self->object.setMultiValuedSeparator(value));
                return 0;
              }
            }
            PyErr_SetArgsError((PyObject *) self, "multiValuedSeparator", arg);
            return -1;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/suggest/document/CompletionTokenStream.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/util/automaton/Automaton.h"
#include "org/apache/lucene/util/BytesRef.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace suggest {
          namespace document {

            ::java::lang::Class *CompletionTokenStream::class$ = NULL;
            jmethodID *CompletionTokenStream::mids$ = NULL;
            bool CompletionTokenStream::live$ = false;

            jclass CompletionTokenStream::initializeClass(bool getOnly)
            {
              if (getOnly)
                return (jclass) (live$ ? class$->this$ : NULL);
              if (class$ == NULL)
              {
                jclass cls = (jclass) env->findClass("org/apache/lucene/search/suggest/document/CompletionTokenStream");

                mids$ = new jmethodID[max_mid];
                mids$[mid_incrementToken_8454bd5aa23fd11e] = env->getMethodID(cls, "incrementToken", "()Z");
                mids$[mid_setPayload_0bdfd2603b7490a8] = env->getMethodID(cls, "setPayload", "(Lorg/apache/lucene/util/BytesRef;)V");
                mids$[mid_toAutomaton_d9f5c446a29ec187] = env->getMethodID(cls, "toAutomaton", "()Lorg/apache/lucene/util/automaton/Automaton;");
                mids$[mid_toAutomaton_2dfd31606da6dbf0] = env->getMethodID(cls, "toAutomaton", "(Z)Lorg/apache/lucene/util/automaton/Automaton;");

                class$ = new ::java::lang::Class(cls);
                live$ = true;
              }
              return (jclass) class$->this$;
            }

            jboolean CompletionTokenStream::incrementToken() const
            {
              return env->callBooleanMethod(this$, mids$[mid_incrementToken_8454bd5aa23fd11e]);
            }

            void CompletionTokenStream::setPayload(const ::org::apache::lucene::util::BytesRef & a0) const
            {
              env->callVoidMethod(this$, mids$[mid_setPayload_0bdfd2603b7490a8], a0.this$);
            }

            ::org::apache::lucene::util::automaton::Automaton CompletionTokenStream::toAutomaton() const
            {
              return ::org::apache::lucene::util::automaton::Automaton(env->callObjectMethod(this$, mids$[mid_toAutomaton_d9f5c446a29ec187]));
            }

            ::org::apache::lucene::util::automaton::Automaton CompletionTokenStream::toAutomaton(jboolean a0) const
            {
              return ::org::apache::lucene::util::automaton::Automaton(env->callObjectMethod(this$, mids$[mid_toAutomaton_2dfd31606da6dbf0], a0));
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace suggest {
          namespace document {
            static PyObject *t_CompletionTokenStream_cast_(PyTypeObject *type, PyObject *arg);
            static PyObject *t_CompletionTokenStream_instance_(PyTypeObject *type, PyObject *arg);
            static PyObject *t_CompletionTokenStream_incrementToken(t_CompletionTokenStream *self, PyObject *args);
            static PyObject *t_CompletionTokenStream_setPayload(t_CompletionTokenStream *self, PyObject *arg);
            static PyObject *t_CompletionTokenStream_toAutomaton(t_CompletionTokenStream *self, PyObject *args);
            static int t_CompletionTokenStream_set__payload(t_CompletionTokenStream *self, PyObject *arg, void *data);
            static PyGetSetDef t_CompletionTokenStream__fields_[] = {
              DECLARE_SET_FIELD(t_CompletionTokenStream, payload),
              { NULL, NULL, NULL, NULL, NULL }
            };

            static PyMethodDef t_CompletionTokenStream__methods_[] = {
              DECLARE_METHOD(t_CompletionTokenStream, cast_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_CompletionTokenStream, instance_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_CompletionTokenStream, incrementToken, METH_VARARGS),
              DECLARE_METHOD(t_CompletionTokenStream, setPayload, METH_O),
              DECLARE_METHOD(t_CompletionTokenStream, toAutomaton, METH_VARARGS),
              { NULL, NULL, 0, NULL }
            };

            static PyType_Slot PY_TYPE_SLOTS(CompletionTokenStream)[] = {
              { Py_tp_methods, t_CompletionTokenStream__methods_ },
              { Py_tp_init, (void *) abstract_init },
              { Py_tp_getset, t_CompletionTokenStream__fields_ },
              { 0, NULL }
            };

            static PyType_Def *PY_TYPE_BASES(CompletionTokenStream)[] = {
              &PY_TYPE_DEF(::org::apache::lucene::analysis::TokenFilter),
              NULL
            };

            DEFINE_TYPE(CompletionTokenStream, t_CompletionTokenStream, CompletionTokenStream);

            void t_CompletionTokenStream::install(PyObject *module)
            {
              installType(&PY_TYPE(CompletionTokenStream), &PY_TYPE_DEF(CompletionTokenStream), module, "CompletionTokenStream", 0);
            }

            void t_CompletionTokenStream::initialize(PyObject *module)
            {
              PyObject_SetAttrString((PyObject *) PY_TYPE(CompletionTokenStream), "class_", make_descriptor(CompletionTokenStream::initializeClass, 1));
              PyObject_SetAttrString((PyObject *) PY_TYPE(CompletionTokenStream), "wrapfn_", make_descriptor(t_CompletionTokenStream::wrap_jobject));
              PyObject_SetAttrString((PyObject *) PY_TYPE(CompletionTokenStream), "boxfn_", make_descriptor(boxObject));
            }

            static PyObject *t_CompletionTokenStream_cast_(PyTypeObject *type, PyObject *arg)
            {
              if (!(arg = castCheck(arg, CompletionTokenStream::initializeClass, 1)))
                return NULL;
              return t_CompletionTokenStream::wrap_Object(CompletionTokenStream(((t_CompletionTokenStream *) arg)->object.this$));
            }
            static PyObject *t_CompletionTokenStream_instance_(PyTypeObject *type, PyObject *arg)
            {
              if (!castCheck(arg, CompletionTokenStream::initializeClass, 0))
                Py_RETURN_FALSE;
              Py_RETURN_TRUE;
            }

            static PyObject *t_CompletionTokenStream_incrementToken(t_CompletionTokenStream *self, PyObject *args)
            {
              jboolean result;

              if (!parseArgs(args, ""))
              {
                OBJ_CALL(result = self->object.incrementToken());
                Py_RETURN_BOOL(result);
              }

              return callSuper(PY_TYPE(CompletionTokenStream), (PyObject *) self, "incrementToken", args, 2);
            }

            static PyObject *t_CompletionTokenStream_setPayload(t_CompletionTokenStream *self, PyObject *arg)
            {
              ::org::apache::lucene::util::BytesRef a0((jobject) NULL);

              if (!parseArg(arg, "k", ::org::apache::lucene::util::BytesRef::initializeClass, &a0))
              {
                OBJ_CALL(self->object.setPayload(a0));
                Py_RETURN_NONE;
              }

              PyErr_SetArgsError((PyObject *) self, "setPayload", arg);
              return NULL;
            }

            static PyObject *t_CompletionTokenStream_toAutomaton(t_CompletionTokenStream *self, PyObject *args)
            {
              switch (PyTuple_GET_SIZE(args)) {
               case 0:
                {
                  ::org::apache::lucene::util::automaton::Automaton result((jobject) NULL);
                  OBJ_CALL(result = self->object.toAutomaton());
                  return ::org::apache::lucene::util::automaton::t_Automaton::wrap_Object(result);
                }
                break;
               case 1:
                {
                  jboolean a0;
                  ::org::apache::lucene::util::automaton::Automaton result((jobject) NULL);

                  if (!parseArgs(args, "Z", &a0))
                  {
                    OBJ_CALL(result = self->object.toAutomaton(a0));
                    return ::org::apache::lucene::util::automaton::t_Automaton::wrap_Object(result);
                  }
                }
              }

              PyErr_SetArgsError((PyObject *) self, "toAutomaton", args);
              return NULL;
            }

            static int t_CompletionTokenStream_set__payload(t_CompletionTokenStream *self, PyObject *arg, void *data)
            {
              {
                ::org::apache::lucene::util::BytesRef value((jobject) NULL);
                if (!parseArg(arg, "k", ::org::apache::lucene::util::BytesRef::initializeClass, &value))
                {
                  INT_CALL(self->object.setPayload(value));
                  return 0;
                }
              }
              PyErr_SetArgsError((PyObject *) self, "payload", arg);
              return -1;
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/en/KStemmer.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace en {

          ::java::lang::Class *KStemmer::class$ = NULL;
          jmethodID *KStemmer::mids$ = NULL;
          bool KStemmer::live$ = false;

          jclass KStemmer::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/en/KStemmer");

              class$ = new ::java::lang::Class(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace en {
          static PyObject *t_KStemmer_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_KStemmer_instance_(PyTypeObject *type, PyObject *arg);

          static PyMethodDef t_KStemmer__methods_[] = {
            DECLARE_METHOD(t_KStemmer, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_KStemmer, instance_, METH_O | METH_CLASS),
            { NULL, NULL, 0, NULL }
          };

          static PyType_Slot PY_TYPE_SLOTS(KStemmer)[] = {
            { Py_tp_methods, t_KStemmer__methods_ },
            { Py_tp_init, (void *) abstract_init },
            { 0, NULL }
          };

          static PyType_Def *PY_TYPE_BASES(KStemmer)[] = {
            &PY_TYPE_DEF(::java::lang::Object),
            NULL
          };

          DEFINE_TYPE(KStemmer, t_KStemmer, KStemmer);

          void t_KStemmer::install(PyObject *module)
          {
            installType(&PY_TYPE(KStemmer), &PY_TYPE_DEF(KStemmer), module, "KStemmer", 0);
          }

          void t_KStemmer::initialize(PyObject *module)
          {
            PyObject_SetAttrString((PyObject *) PY_TYPE(KStemmer), "class_", make_descriptor(KStemmer::initializeClass, 1));
            PyObject_SetAttrString((PyObject *) PY_TYPE(KStemmer), "wrapfn_", make_descriptor(t_KStemmer::wrap_jobject));
            PyObject_SetAttrString((PyObject *) PY_TYPE(KStemmer), "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_KStemmer_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, KStemmer::initializeClass, 1)))
              return NULL;
            return t_KStemmer::wrap_Object(KStemmer(((t_KStemmer *) arg)->object.this$));
          }
          static PyObject *t_KStemmer_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, KStemmer::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/hu/HungarianLightStemFilter.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/analysis/TokenStream.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace hu {

          ::java::lang::Class *HungarianLightStemFilter::class$ = NULL;
          jmethodID *HungarianLightStemFilter::mids$ = NULL;
          bool HungarianLightStemFilter::live$ = false;

          jclass HungarianLightStemFilter::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/hu/HungarianLightStemFilter");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_c26756868a754f4e] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/analysis/TokenStream;)V");
              mids$[mid_incrementToken_8454bd5aa23fd11e] = env->getMethodID(cls, "incrementToken", "()Z");

              class$ = new ::java::lang::Class(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          HungarianLightStemFilter::HungarianLightStemFilter(const ::org::apache::lucene::analysis::TokenStream & a0) : ::org::apache::lucene::analysis::TokenFilter(env->newObject(initializeClass, &mids$, mid_init$_c26756868a754f4e, a0.this$)) {}

          jboolean HungarianLightStemFilter::incrementToken() const
          {
            return env->callBooleanMethod(this$, mids$[mid_incrementToken_8454bd5aa23fd11e]);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace hu {
          static PyObject *t_HungarianLightStemFilter_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_HungarianLightStemFilter_instance_(PyTypeObject *type, PyObject *arg);
          static int t_HungarianLightStemFilter_init_(t_HungarianLightStemFilter *self, PyObject *args, PyObject *kwds);
          static PyObject *t_HungarianLightStemFilter_incrementToken(t_HungarianLightStemFilter *self, PyObject *args);

          static PyMethodDef t_HungarianLightStemFilter__methods_[] = {
            DECLARE_METHOD(t_HungarianLightStemFilter, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_HungarianLightStemFilter, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_HungarianLightStemFilter, incrementToken, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          static PyType_Slot PY_TYPE_SLOTS(HungarianLightStemFilter)[] = {
            { Py_tp_methods, t_HungarianLightStemFilter__methods_ },
            { Py_tp_init, (void *) t_HungarianLightStemFilter_init_ },
            { 0, NULL }
          };

          static PyType_Def *PY_TYPE_BASES(HungarianLightStemFilter)[] = {
            &PY_TYPE_DEF(::org::apache::lucene::analysis::TokenFilter),
            NULL
          };

          DEFINE_TYPE(HungarianLightStemFilter, t_HungarianLightStemFilter, HungarianLightStemFilter);

          void t_HungarianLightStemFilter::install(PyObject *module)
          {
            installType(&PY_TYPE(HungarianLightStemFilter), &PY_TYPE_DEF(HungarianLightStemFilter), module, "HungarianLightStemFilter", 0);
          }

          void t_HungarianLightStemFilter::initialize(PyObject *module)
          {
            PyObject_SetAttrString((PyObject *) PY_TYPE(HungarianLightStemFilter), "class_", make_descriptor(HungarianLightStemFilter::initializeClass, 1));
            PyObject_SetAttrString((PyObject *) PY_TYPE(HungarianLightStemFilter), "wrapfn_", make_descriptor(t_HungarianLightStemFilter::wrap_jobject));
            PyObject_SetAttrString((PyObject *) PY_TYPE(HungarianLightStemFilter), "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_HungarianLightStemFilter_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, HungarianLightStemFilter::initializeClass, 1)))
              return NULL;
            return t_HungarianLightStemFilter::wrap_Object(HungarianLightStemFilter(((t_HungarianLightStemFilter *) arg)->object.this$));
          }
          static PyObject *t_HungarianLightStemFilter_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, HungarianLightStemFilter::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_HungarianLightStemFilter_init_(t_HungarianLightStemFilter *self, PyObject *args, PyObject *kwds)
          {
            ::org::apache::lucene::analysis::TokenStream a0((jobject) NULL);
            HungarianLightStemFilter object((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::analysis::TokenStream::initializeClass, &a0))
            {
              INT_CALL(object = HungarianLightStemFilter(a0));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_HungarianLightStemFilter_incrementToken(t_HungarianLightStemFilter *self, PyObject *args)
          {
            jboolean result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.incrementToken());
              Py_RETURN_BOOL(result);
            }

            return callSuper(PY_TYPE(HungarianLightStemFilter), (PyObject *) self, "incrementToken", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queryparser/flexible/messages/NLSException.h"
#include "org/apache/lucene/queryparser/flexible/messages/Message.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace messages {

            ::java::lang::Class *NLSException::class$ = NULL;
            jmethodID *NLSException::mids$ = NULL;
            bool NLSException::live$ = false;

            jclass NLSException::initializeClass(bool getOnly)
            {
              if (getOnly)
                return (jclass) (live$ ? class$->this$ : NULL);
              if (class$ == NULL)
              {
                jclass cls = (jclass) env->findClass("org/apache/lucene/queryparser/flexible/messages/NLSException");

                mids$ = new jmethodID[max_mid];
                mids$[mid_getMessageObject_daa3e60103dc49c2] = env->getMethodID(cls, "getMessageObject", "()Lorg/apache/lucene/queryparser/flexible/messages/Message;");

                class$ = new ::java::lang::Class(cls);
                live$ = true;
              }
              return (jclass) class$->this$;
            }

            ::org::apache::lucene::queryparser::flexible::messages::Message NLSException::getMessageObject() const
            {
              return ::org::apache::lucene::queryparser::flexible::messages::Message(env->callObjectMethod(this$, mids$[mid_getMessageObject_daa3e60103dc49c2]));
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace messages {
            static PyObject *t_NLSException_cast_(PyTypeObject *type, PyObject *arg);
            static PyObject *t_NLSException_instance_(PyTypeObject *type, PyObject *arg);
            static PyObject *t_NLSException_getMessageObject(t_NLSException *self);
            static PyObject *t_NLSException_get__messageObject(t_NLSException *self, void *data);
            static PyGetSetDef t_NLSException__fields_[] = {
              DECLARE_GET_FIELD(t_NLSException, messageObject),
              { NULL, NULL, NULL, NULL, NULL }
            };

            static PyMethodDef t_NLSException__methods_[] = {
              DECLARE_METHOD(t_NLSException, cast_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_NLSException, instance_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_NLSException, getMessageObject, METH_NOARGS),
              { NULL, NULL, 0, NULL }
            };

            static PyType_Slot PY_TYPE_SLOTS(NLSException)[] = {
              { Py_tp_methods, t_NLSException__methods_ },
              { Py_tp_init, (void *) abstract_init },
              { Py_tp_getset, t_NLSException__fields_ },
              { 0, NULL }
            };

            static PyType_Def *PY_TYPE_BASES(NLSException)[] = {
              &PY_TYPE_DEF(::java::lang::Object),
              NULL
            };

            DEFINE_TYPE(NLSException, t_NLSException, NLSException);

            void t_NLSException::install(PyObject *module)
            {
              installType(&PY_TYPE(NLSException), &PY_TYPE_DEF(NLSException), module, "NLSException", 0);
            }

            void t_NLSException::initialize(PyObject *module)
            {
              PyObject_SetAttrString((PyObject *) PY_TYPE(NLSException), "class_", make_descriptor(NLSException::initializeClass, 1));
              PyObject_SetAttrString((PyObject *) PY_TYPE(NLSException), "wrapfn_", make_descriptor(t_NLSException::wrap_jobject));
              PyObject_SetAttrString((PyObject *) PY_TYPE(NLSException), "boxfn_", make_descriptor(boxObject));
            }

            static PyObject *t_NLSException_cast_(PyTypeObject *type, PyObject *arg)
            {
              if (!(arg = castCheck(arg, NLSException::initializeClass, 1)))
                return NULL;
              return t_NLSException::wrap_Object(NLSException(((t_NLSException *) arg)->object.this$));
            }
            static PyObject *t_NLSException_instance_(PyTypeObject *type, PyObject *arg)
            {
              if (!castCheck(arg, NLSException::initializeClass, 0))
                Py_RETURN_FALSE;
              Py_RETURN_TRUE;
            }

            static PyObject *t_NLSException_getMessageObject(t_NLSException *self)
            {
              ::org::apache::lucene::queryparser::flexible::messages::Message result((jobject) NULL);
              OBJ_CALL(result = self->object.getMessageObject());
              return ::org::apache::lucene::queryparser::flexible::messages::t_Message::wrap_Object(result);
            }

            static PyObject *t_NLSException_get__messageObject(t_NLSException *self, void *data)
            {
              ::org::apache::lucene::queryparser::flexible::messages::Message value((jobject) NULL);
              OBJ_CALL(value = self->object.getMessageObject());
              return ::org::apache::lucene::queryparser::flexible::messages::t_Message::wrap_Object(value);
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/spatial3d/geom/GeoBaseMembershipShape.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/spatial3d/geom/DistanceStyle.h"
#include "org/apache/lucene/spatial3d/geom/GeoPoint.h"
#include "org/apache/lucene/spatial3d/geom/GeoMembershipShape.h"
#include "org/apache/lucene/spatial3d/geom/PlanetModel.h"
#include "org/apache/lucene/spatial3d/geom/Vector.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace spatial3d {
        namespace geom {

          ::java::lang::Class *GeoBaseMembershipShape::class$ = NULL;
          jmethodID *GeoBaseMembershipShape::mids$ = NULL;
          bool GeoBaseMembershipShape::live$ = false;

          jclass GeoBaseMembershipShape::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/spatial3d/geom/GeoBaseMembershipShape");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_fd580b4e02411290] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/spatial3d/geom/PlanetModel;)V");
              mids$[mid_computeOutsideDistance_d330d2576549fa67] = env->getMethodID(cls, "computeOutsideDistance", "(Lorg/apache/lucene/spatial3d/geom/DistanceStyle;Lorg/apache/lucene/spatial3d/geom/GeoPoint;)D");
              mids$[mid_computeOutsideDistance_2b407c8141eb9589] = env->getMethodID(cls, "computeOutsideDistance", "(Lorg/apache/lucene/spatial3d/geom/DistanceStyle;DDD)D");
              mids$[mid_isWithin_ac70289ee56608c0] = env->getMethodID(cls, "isWithin", "(Lorg/apache/lucene/spatial3d/geom/Vector;)Z");
              mids$[mid_outsideDistance_2b407c8141eb9589] = env->getMethodID(cls, "outsideDistance", "(Lorg/apache/lucene/spatial3d/geom/DistanceStyle;DDD)D");

              class$ = new ::java::lang::Class(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          GeoBaseMembershipShape::GeoBaseMembershipShape(const ::org::apache::lucene::spatial3d::geom::PlanetModel & a0) : ::org::apache::lucene::spatial3d::geom::GeoBaseShape(env->newObject(initializeClass, &mids$, mid_init$_fd580b4e02411290, a0.this$)) {}

          jdouble GeoBaseMembershipShape::computeOutsideDistance(const ::org::apache::lucene::spatial3d::geom::DistanceStyle & a0, const ::org::apache::lucene::spatial3d::geom::GeoPoint & a1) const
          {
            return env->callDoubleMethod(this$, mids$[mid_computeOutsideDistance_d330d2576549fa67], a0.this$, a1.this$);
          }

          jdouble GeoBaseMembershipShape::computeOutsideDistance(const ::org::apache::lucene::spatial3d::geom::DistanceStyle & a0, jdouble a1, jdouble a2, jdouble a3) const
          {
            return env->callDoubleMethod(this$, mids$[mid_computeOutsideDistance_2b407c8141eb9589], a0.this$, a1, a2, a3);
          }

          jboolean GeoBaseMembershipShape::isWithin(const ::org::apache::lucene::spatial3d::geom::Vector & a0) const
          {
            return env->callBooleanMethod(this$, mids$[mid_isWithin_ac70289ee56608c0], a0.this$);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace spatial3d {
        namespace geom {
          static PyObject *t_GeoBaseMembershipShape_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_GeoBaseMembershipShape_instance_(PyTypeObject *type, PyObject *arg);
          static int t_GeoBaseMembershipShape_init_(t_GeoBaseMembershipShape *self, PyObject *args, PyObject *kwds);
          static PyObject *t_GeoBaseMembershipShape_computeOutsideDistance(t_GeoBaseMembershipShape *self, PyObject *args);
          static PyObject *t_GeoBaseMembershipShape_isWithin(t_GeoBaseMembershipShape *self, PyObject *args);

          static PyMethodDef t_GeoBaseMembershipShape__methods_[] = {
            DECLARE_METHOD(t_GeoBaseMembershipShape, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_GeoBaseMembershipShape, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_GeoBaseMembershipShape, computeOutsideDistance, METH_VARARGS),
            DECLARE_METHOD(t_GeoBaseMembershipShape, isWithin, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          static PyType_Slot PY_TYPE_SLOTS(GeoBaseMembershipShape)[] = {
            { Py_tp_methods, t_GeoBaseMembershipShape__methods_ },
            { Py_tp_init, (void *) t_GeoBaseMembershipShape_init_ },
            { 0, NULL }
          };

          static PyType_Def *PY_TYPE_BASES(GeoBaseMembershipShape)[] = {
            &PY_TYPE_DEF(::org::apache::lucene::spatial3d::geom::GeoBaseShape),
            NULL
          };

          DEFINE_TYPE(GeoBaseMembershipShape, t_GeoBaseMembershipShape, GeoBaseMembershipShape);

          void t_GeoBaseMembershipShape::install(PyObject *module)
          {
            installType(&PY_TYPE(GeoBaseMembershipShape), &PY_TYPE_DEF(GeoBaseMembershipShape), module, "GeoBaseMembershipShape", 0);
          }

          void t_GeoBaseMembershipShape::initialize(PyObject *module)
          {
            PyObject_SetAttrString((PyObject *) PY_TYPE(GeoBaseMembershipShape), "class_", make_descriptor(GeoBaseMembershipShape::initializeClass, 1));
            PyObject_SetAttrString((PyObject *) PY_TYPE(GeoBaseMembershipShape), "wrapfn_", make_descriptor(t_GeoBaseMembershipShape::wrap_jobject));
            PyObject_SetAttrString((PyObject *) PY_TYPE(GeoBaseMembershipShape), "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_GeoBaseMembershipShape_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, GeoBaseMembershipShape::initializeClass, 1)))
              return NULL;
            return t_GeoBaseMembershipShape::wrap_Object(GeoBaseMembershipShape(((t_GeoBaseMembershipShape *) arg)->object.this$));
          }
          static PyObject *t_GeoBaseMembershipShape_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, GeoBaseMembershipShape::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_GeoBaseMembershipShape_init_(t_GeoBaseMembershipShape *self, PyObject *args, PyObject *kwds)
          {
            ::org::apache::lucene::spatial3d::geom::PlanetModel a0((jobject) NULL);
            GeoBaseMembershipShape object((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::spatial3d::geom::PlanetModel::initializeClass, &a0))
            {
              INT_CALL(object = GeoBaseMembershipShape(a0));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_GeoBaseMembershipShape_computeOutsideDistance(t_GeoBaseMembershipShape *self, PyObject *args)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 2:
              {
                ::org::apache::lucene::spatial3d::geom::DistanceStyle a0((jobject) NULL);
                ::org::apache::lucene::spatial3d::geom::GeoPoint a1((jobject) NULL);
                jdouble result;

                if (!parseArgs(args, "kk", ::org::apache::lucene::spatial3d::geom::DistanceStyle::initializeClass, ::org::apache::lucene::spatial3d::geom::GeoPoint::initializeClass, &a0, &a1))
                {
                  OBJ_CALL(result = self->object.computeOutsideDistance(a0, a1));
                  return PyFloat_FromDouble((double) result);
                }
              }
              break;
             case 4:
              {
                ::org::apache::lucene::spatial3d::geom::DistanceStyle a0((jobject) NULL);
                jdouble a1;
                jdouble a2;
                jdouble a3;
                jdouble result;

                if (!parseArgs(args, "kDDD", ::org::apache::lucene::spatial3d::geom::DistanceStyle::initializeClass, &a0, &a1, &a2, &a3))
                {
                  OBJ_CALL(result = self->object.computeOutsideDistance(a0, a1, a2, a3));
                  return PyFloat_FromDouble((double) result);
                }
              }
            }

            PyErr_SetArgsError((PyObject *) self, "computeOutsideDistance", args);
            return NULL;
          }

          static PyObject *t_GeoBaseMembershipShape_isWithin(t_GeoBaseMembershipShape *self, PyObject *args)
          {
            ::org::apache::lucene::spatial3d::geom::Vector a0((jobject) NULL);
            jboolean result;

            if (!parseArgs(args, "k", ::org::apache::lucene::spatial3d::geom::Vector::initializeClass, &a0))
            {
              OBJ_CALL(result = self->object.isWithin(a0));
              Py_RETURN_BOOL(result);
            }

            return callSuper(PY_TYPE(GeoBaseMembershipShape), (PyObject *) self, "isWithin", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/document/StringField.h"
#include "org/apache/lucene/document/FieldType.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/util/BytesRef.h"
#include "org/apache/lucene/document/Field$Store.h"
#include "java/lang/String.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace document {

        ::java::lang::Class *StringField::class$ = NULL;
        jmethodID *StringField::mids$ = NULL;
        bool StringField::live$ = false;
        ::org::apache::lucene::document::FieldType *StringField::TYPE_NOT_STORED = NULL;
        ::org::apache::lucene::document::FieldType *StringField::TYPE_STORED = NULL;

        jclass StringField::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/document/StringField");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_d8dbec042659cb47] = env->getMethodID(cls, "<init>", "(Ljava/lang/String;Ljava/lang/String;Lorg/apache/lucene/document/Field$Store;)V");
            mids$[mid_init$_0501fe8d136bd62e] = env->getMethodID(cls, "<init>", "(Ljava/lang/String;Lorg/apache/lucene/util/BytesRef;Lorg/apache/lucene/document/Field$Store;)V");

            class$ = new ::java::lang::Class(cls);
            cls = (jclass) class$->this$;

            TYPE_NOT_STORED = new ::org::apache::lucene::document::FieldType(env->getStaticObjectField(cls, "TYPE_NOT_STORED", "Lorg/apache/lucene/document/FieldType;"));
            TYPE_STORED = new ::org::apache::lucene::document::FieldType(env->getStaticObjectField(cls, "TYPE_STORED", "Lorg/apache/lucene/document/FieldType;"));
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        StringField::StringField(const ::java::lang::String & a0, const ::java::lang::String & a1, const ::org::apache::lucene::document::Field$Store & a2) : ::org::apache::lucene::document::Field(env->newObject(initializeClass, &mids$, mid_init$_d8dbec042659cb47, a0.this$, a1.this$, a2.this$)) {}

        StringField::StringField(const ::java::lang::String & a0, const ::org::apache::lucene::util::BytesRef & a1, const ::org::apache::lucene::document::Field$Store & a2) : ::org::apache::lucene::document::Field(env->newObject(initializeClass, &mids$, mid_init$_0501fe8d136bd62e, a0.this$, a1.this$, a2.this$)) {}
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace document {
        static PyObject *t_StringField_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_StringField_instance_(PyTypeObject *type, PyObject *arg);
        static int t_StringField_init_(t_StringField *self, PyObject *args, PyObject *kwds);

        static PyMethodDef t_StringField__methods_[] = {
          DECLARE_METHOD(t_StringField, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_StringField, instance_, METH_O | METH_CLASS),
          { NULL, NULL, 0, NULL }
        };

        static PyType_Slot PY_TYPE_SLOTS(StringField)[] = {
          { Py_tp_methods, t_StringField__methods_ },
          { Py_tp_init, (void *) t_StringField_init_ },
          { 0, NULL }
        };

        static PyType_Def *PY_TYPE_BASES(StringField)[] = {
          &PY_TYPE_DEF(::org::apache::lucene::document::Field),
          NULL
        };

        DEFINE_TYPE(StringField, t_StringField, StringField);

        void t_StringField::install(PyObject *module)
        {
          installType(&PY_TYPE(StringField), &PY_TYPE_DEF(StringField), module, "StringField", 0);
        }

        void t_StringField::initialize(PyObject *module)
        {
          PyObject_SetAttrString((PyObject *) PY_TYPE(StringField), "class_", make_descriptor(StringField::initializeClass, 1));
          PyObject_SetAttrString((PyObject *) PY_TYPE(StringField), "wrapfn_", make_descriptor(t_StringField::wrap_jobject));
          PyObject_SetAttrString((PyObject *) PY_TYPE(StringField), "boxfn_", make_descriptor(boxObject));
          env->getClass(StringField::initializeClass);
          PyObject_SetAttrString((PyObject *) PY_TYPE(StringField), "TYPE_NOT_STORED", make_descriptor(::org::apache::lucene::document::t_FieldType::wrap_Object(*StringField::TYPE_NOT_STORED)));
          PyObject_SetAttrString((PyObject *) PY_TYPE(StringField), "TYPE_STORED", make_descriptor(::org::apache::lucene::document::t_FieldType::wrap_Object(*StringField::TYPE_STORED)));
        }

        static PyObject *t_StringField_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, StringField::initializeClass, 1)))
            return NULL;
          return t_StringField::wrap_Object(StringField(((t_StringField *) arg)->object.this$));
        }
        static PyObject *t_StringField_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, StringField::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_StringField_init_(t_StringField *self, PyObject *args, PyObject *kwds)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 3:
            {
              ::java::lang::String a0((jobject) NULL);
              ::java::lang::String a1((jobject) NULL);
              ::org::apache::lucene::document::Field$Store a2((jobject) NULL);
              PyTypeObject **p2;
              StringField object((jobject) NULL);

              if (!parseArgs(args, "ssK", ::org::apache::lucene::document::Field$Store::initializeClass, &a0, &a1, &a2, &p2, ::org::apache::lucene::document::t_Field$Store::parameters_))
              {
                INT_CALL(object = StringField(a0, a1, a2));
                self->object = object;
                break;
              }
            }
            {
              ::java::lang::String a0((jobject) NULL);
              ::org::apache::lucene::util::BytesRef a1((jobject) NULL);
              ::org::apache::lucene::document::Field$Store a2((jobject) NULL);
              PyTypeObject **p2;
              StringField object((jobject) NULL);

              if (!parseArgs(args, "skK", ::org::apache::lucene::util::BytesRef::initializeClass, ::org::apache::lucene::document::Field$Store::initializeClass, &a0, &a1, &a2, &p2, ::org::apache::lucene::document::t_Field$Store::parameters_))
              {
                INT_CALL(object = StringField(a0, a1, a2));
                self->object = object;
                break;
              }
            }
           default:
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/index/OneMergeWrappingMergePolicy.h"
#include "java/util/function/UnaryOperator.h"
#include "java/util/Map.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/index/MergePolicy.h"
#include "org/apache/lucene/index/MergePolicy$MergeSpecification.h"
#include "org/apache/lucene/index/MergePolicy$OneMerge.h"
#include "org/apache/lucene/index/MergeTrigger.h"
#include "org/apache/lucene/index/MergePolicy$MergeContext.h"
#include "org/apache/lucene/index/SegmentCommitInfo.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/index/SegmentInfos.h"
#include "java/lang/Boolean.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {

        ::java::lang::Class *OneMergeWrappingMergePolicy::class$ = NULL;
        jmethodID *OneMergeWrappingMergePolicy::mids$ = NULL;
        bool OneMergeWrappingMergePolicy::live$ = false;

        jclass OneMergeWrappingMergePolicy::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/index/OneMergeWrappingMergePolicy");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_520adb95ab974cab] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/index/MergePolicy;Ljava/util/function/UnaryOperator;)V");
            mids$[mid_findForcedDeletesMerges_a4b8e92c69858eaa] = env->getMethodID(cls, "findForcedDeletesMerges", "(Lorg/apache/lucene/index/SegmentInfos;Lorg/apache/lucene/index/MergePolicy$MergeContext;)Lorg/apache/lucene/index/MergePolicy$MergeSpecification;");
            mids$[mid_findForcedMerges_7f23fa79bde67ff3] = env->getMethodID(cls, "findForcedMerges", "(Lorg/apache/lucene/index/SegmentInfos;ILjava/util/Map;Lorg/apache/lucene/index/MergePolicy$MergeContext;)Lorg/apache/lucene/index/MergePolicy$MergeSpecification;");
            mids$[mid_findFullFlushMerges_ce0e45d4a26e56b1] = env->getMethodID(cls, "findFullFlushMerges", "(Lorg/apache/lucene/index/MergeTrigger;Lorg/apache/lucene/index/SegmentInfos;Lorg/apache/lucene/index/MergePolicy$MergeContext;)Lorg/apache/lucene/index/MergePolicy$MergeSpecification;");
            mids$[mid_findMerges_ce0e45d4a26e56b1] = env->getMethodID(cls, "findMerges", "(Lorg/apache/lucene/index/MergeTrigger;Lorg/apache/lucene/index/SegmentInfos;Lorg/apache/lucene/index/MergePolicy$MergeContext;)Lorg/apache/lucene/index/MergePolicy$MergeSpecification;");

            class$ = new ::java::lang::Class(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        OneMergeWrappingMergePolicy::OneMergeWrappingMergePolicy(const ::org::apache::lucene::index::MergePolicy & a0, const ::java::util::function::UnaryOperator & a1) : ::org::apache::lucene::index::FilterMergePolicy(env->newObject(initializeClass, &mids$, mid_init$_520adb95ab974cab, a0.this$, a1.this$)) {}

        ::org::apache::lucene::index::MergePolicy$MergeSpecification OneMergeWrappingMergePolicy::findForcedDeletesMerges(const ::org::apache::lucene::index::SegmentInfos & a0, const ::org::apache::lucene::index::MergePolicy$MergeContext & a1) const
        {
          return ::org::apache::lucene::index::MergePolicy$MergeSpecification(env->callObjectMethod(this$, mids$[mid_findForcedDeletesMerges_a4b8e92c69858eaa], a0.this$, a1.this$));
        }

        ::org::apache::lucene::index::MergePolicy$MergeSpecification OneMergeWrappingMergePolicy::findForcedMerges(const ::org::apache::lucene::index::SegmentInfos & a0, jint a1, const ::java::util::Map & a2, const ::org::apache::lucene::index::MergePolicy$MergeContext & a3) const
        {
          return ::org::apache::lucene::index::MergePolicy$MergeSpecification(env->callObjectMethod(this$, mids$[mid_findForcedMerges_7f23fa79bde67ff3], a0.this$, a1, a2.this$, a3.this$));
        }

        ::org::apache::lucene::index::MergePolicy$MergeSpecification OneMergeWrappingMergePolicy::findFullFlushMerges(const ::org::apache::lucene::index::MergeTrigger & a0, const ::org::apache::lucene::index::SegmentInfos & a1, const ::org::apache::lucene::index::MergePolicy$MergeContext & a2) const
        {
          return ::org::apache::lucene::index::MergePolicy$MergeSpecification(env->callObjectMethod(this$, mids$[mid_findFullFlushMerges_ce0e45d4a26e56b1], a0.this$, a1.this$, a2.this$));
        }

        ::org::apache::lucene::index::MergePolicy$MergeSpecification OneMergeWrappingMergePolicy::findMerges(const ::org::apache::lucene::index::MergeTrigger & a0, const ::org::apache::lucene::index::SegmentInfos & a1, const ::org::apache::lucene::index::MergePolicy$MergeContext & a2) const
        {
          return ::org::apache::lucene::index::MergePolicy$MergeSpecification(env->callObjectMethod(this$, mids$[mid_findMerges_ce0e45d4a26e56b1], a0.this$, a1.this$, a2.this$));
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {
        static PyObject *t_OneMergeWrappingMergePolicy_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_OneMergeWrappingMergePolicy_instance_(PyTypeObject *type, PyObject *arg);
        static int t_OneMergeWrappingMergePolicy_init_(t_OneMergeWrappingMergePolicy *self, PyObject *args, PyObject *kwds);
        static PyObject *t_OneMergeWrappingMergePolicy_findForcedDeletesMerges(t_OneMergeWrappingMergePolicy *self, PyObject *args);
        static PyObject *t_OneMergeWrappingMergePolicy_findForcedMerges(t_OneMergeWrappingMergePolicy *self, PyObject *args);
        static PyObject *t_OneMergeWrappingMergePolicy_findFullFlushMerges(t_OneMergeWrappingMergePolicy *self, PyObject *args);
        static PyObject *t_OneMergeWrappingMergePolicy_findMerges(t_OneMergeWrappingMergePolicy *self, PyObject *args);

        static PyMethodDef t_OneMergeWrappingMergePolicy__methods_[] = {
          DECLARE_METHOD(t_OneMergeWrappingMergePolicy, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_OneMergeWrappingMergePolicy, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_OneMergeWrappingMergePolicy, findForcedDeletesMerges, METH_VARARGS),
          DECLARE_METHOD(t_OneMergeWrappingMergePolicy, findForcedMerges, METH_VARARGS),
          DECLARE_METHOD(t_OneMergeWrappingMergePolicy, findFullFlushMerges, METH_VARARGS),
          DECLARE_METHOD(t_OneMergeWrappingMergePolicy, findMerges, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        static PyType_Slot PY_TYPE_SLOTS(OneMergeWrappingMergePolicy)[] = {
          { Py_tp_methods, t_OneMergeWrappingMergePolicy__methods_ },
          { Py_tp_init, (void *) t_OneMergeWrappingMergePolicy_init_ },
          { 0, NULL }
        };

        static PyType_Def *PY_TYPE_BASES(OneMergeWrappingMergePolicy)[] = {
          &PY_TYPE_DEF(::org::apache::lucene::index::FilterMergePolicy),
          NULL
        };

        DEFINE_TYPE(OneMergeWrappingMergePolicy, t_OneMergeWrappingMergePolicy, OneMergeWrappingMergePolicy);

        void t_OneMergeWrappingMergePolicy::install(PyObject *module)
        {
          installType(&PY_TYPE(OneMergeWrappingMergePolicy), &PY_TYPE_DEF(OneMergeWrappingMergePolicy), module, "OneMergeWrappingMergePolicy", 0);
        }

        void t_OneMergeWrappingMergePolicy::initialize(PyObject *module)
        {
          PyObject_SetAttrString((PyObject *) PY_TYPE(OneMergeWrappingMergePolicy), "class_", make_descriptor(OneMergeWrappingMergePolicy::initializeClass, 1));
          PyObject_SetAttrString((PyObject *) PY_TYPE(OneMergeWrappingMergePolicy), "wrapfn_", make_descriptor(t_OneMergeWrappingMergePolicy::wrap_jobject));
          PyObject_SetAttrString((PyObject *) PY_TYPE(OneMergeWrappingMergePolicy), "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_OneMergeWrappingMergePolicy_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, OneMergeWrappingMergePolicy::initializeClass, 1)))
            return NULL;
          return t_OneMergeWrappingMergePolicy::wrap_Object(OneMergeWrappingMergePolicy(((t_OneMergeWrappingMergePolicy *) arg)->object.this$));
        }
        static PyObject *t_OneMergeWrappingMergePolicy_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, OneMergeWrappingMergePolicy::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_OneMergeWrappingMergePolicy_init_(t_OneMergeWrappingMergePolicy *self, PyObject *args, PyObject *kwds)
        {
          ::org::apache::lucene::index::MergePolicy a0((jobject) NULL);
          ::java::util::function::UnaryOperator a1((jobject) NULL);
          PyTypeObject **p1;
          OneMergeWrappingMergePolicy object((jobject) NULL);

          if (!parseArgs(args, "kK", ::org::apache::lucene::index::MergePolicy::initializeClass, ::java::util::function::UnaryOperator::initializeClass, &a0, &a1, &p1, ::java::util::function::t_UnaryOperator::parameters_))
          {
            INT_CALL(object = OneMergeWrappingMergePolicy(a0, a1));
            self->object = object;
          }
          else
          {
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }

        static PyObject *t_OneMergeWrappingMergePolicy_findForcedDeletesMerges(t_OneMergeWrappingMergePolicy *self, PyObject *args)
        {
          ::org::apache::lucene::index::SegmentInfos a0((jobject) NULL);
          ::org::apache::lucene::index::MergePolicy$MergeContext a1((jobject) NULL);
          ::org::apache::lucene::index::MergePolicy$MergeSpecification result((jobject) NULL);

          if (!parseArgs(args, "kk", ::org::apache::lucene::index::SegmentInfos::initializeClass, ::org::apache::lucene::index::MergePolicy$MergeContext::initializeClass, &a0, &a1))
          {
            OBJ_CALL(result = self->object.findForcedDeletesMerges(a0, a1));
            return ::org::apache::lucene::index::t_MergePolicy$MergeSpecification::wrap_Object(result);
          }

          return callSuper(PY_TYPE(OneMergeWrappingMergePolicy), (PyObject *) self, "findForcedDeletesMerges", args, 2);
        }

        static PyObject *t_OneMergeWrappingMergePolicy_findForcedMerges(t_OneMergeWrappingMergePolicy *self, PyObject *args)
        {
          ::org::apache::lucene::index::SegmentInfos a0((jobject) NULL);
          jint a1;
          ::java::util::Map a2((jobject) NULL);
          PyTypeObject **p2;
          ::org::apache::lucene::index::MergePolicy$MergeContext a3((jobject) NULL);
          ::org::apache::lucene::index::MergePolicy$MergeSpecification result((jobject) NULL);

          if (!parseArgs(args, "kIKk", ::org::apache::lucene::index::SegmentInfos::initializeClass, ::java::util::Map::initializeClass, ::org::apache::lucene::index::MergePolicy$MergeContext::initializeClass, &a0, &a1, &a2, &p2, ::java::util::t_Map::parameters_, &a3))
          {
            OBJ_CALL(result = self->object.findForcedMerges(a0, a1, a2, a3));
            return ::org::apache::lucene::index::t_MergePolicy$MergeSpecification::wrap_Object(result);
          }

          return callSuper(PY_TYPE(OneMergeWrappingMergePolicy), (PyObject *) self, "findForcedMerges", args, 2);
        }

        static PyObject *t_OneMergeWrappingMergePolicy_findFullFlushMerges(t_OneMergeWrappingMergePolicy *self, PyObject *args)
        {
          ::org::apache::lucene::index::MergeTrigger a0((jobject) NULL);
          PyTypeObject **p0;
          ::org::apache::lucene::index::SegmentInfos a1((jobject) NULL);
          ::org::apache::lucene::index::MergePolicy$MergeContext a2((jobject) NULL);
          ::org::apache::lucene::index::MergePolicy$MergeSpecification result((jobject) NULL);

          if (!parseArgs(args, "Kkk", ::org::apache::lucene::index::MergeTrigger::initializeClass, ::org::apache::lucene::index::SegmentInfos::initializeClass, ::org::apache::lucene::index::MergePolicy$MergeContext::initializeClass, &a0, &p0, ::org::apache::lucene::index::t_MergeTrigger::parameters_, &a1, &a2))
          {
            OBJ_CALL(result = self->object.findFullFlushMerges(a0, a1, a2));
            return ::org::apache::lucene::index::t_MergePolicy$MergeSpecification::wrap_Object(result);
          }

          return callSuper(PY_TYPE(OneMergeWrappingMergePolicy), (PyObject *) self, "findFullFlushMerges", args, 2);
        }

        static PyObject *t_OneMergeWrappingMergePolicy_findMerges(t_OneMergeWrappingMergePolicy *self, PyObject *args)
        {
          ::org::apache::lucene::index::MergeTrigger a0((jobject) NULL);
          PyTypeObject **p0;
          ::org::apache::lucene::index::SegmentInfos a1((jobject) NULL);
          ::org::apache::lucene::index::MergePolicy$MergeContext a2((jobject) NULL);
          ::org::apache::lucene::index::MergePolicy$MergeSpecification result((jobject) NULL);

          if (!parseArgs(args, "Kkk", ::org::apache::lucene::index::MergeTrigger::initializeClass, ::org::apache::lucene::index::SegmentInfos::initializeClass, ::org::apache::lucene::index::MergePolicy$MergeContext::initializeClass, &a0, &p0, ::org::apache::lucene::index::t_MergeTrigger::parameters_, &a1, &a2))
          {
            OBJ_CALL(result = self->object.findMerges(a0, a1, a2));
            return ::org::apache::lucene::index::t_MergePolicy$MergeSpecification::wrap_Object(result);
          }

          return callSuper(PY_TYPE(OneMergeWrappingMergePolicy), (PyObject *) self, "findMerges", args, 2);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queryparser/flexible/standard/parser/StandardSyntaxParser.h"
#include "org/apache/lucene/queryparser/flexible/standard/parser/StandardSyntaxParserConstants.h"
#include "org/apache/lucene/queryparser/flexible/core/parser/SyntaxParser.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/queryparser/flexible/standard/parser/ParseException.h"
#include "org/apache/lucene/queryparser/flexible/core/nodes/QueryNode.h"
#include "org/apache/lucene/queryparser/flexible/standard/parser/StandardSyntaxParserTokenManager.h"
#include "org/apache/lucene/queryparser/flexible/core/nodes/ModifierQueryNode$Modifier.h"
#include "java/lang/CharSequence.h"
#include "org/apache/lucene/queryparser/flexible/core/QueryNodeParseException.h"
#include "org/apache/lucene/queryparser/flexible/standard/parser/CharStream.h"
#include "org/apache/lucene/queryparser/flexible/standard/parser/Token.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace standard {
            namespace parser {

              ::java::lang::Class *StandardSyntaxParser::class$ = NULL;
              jmethodID *StandardSyntaxParser::mids$ = NULL;
              jfieldID *StandardSyntaxParser::fids$ = NULL;
              bool StandardSyntaxParser::live$ = false;

              jclass StandardSyntaxParser::initializeClass(bool getOnly)
              {
                if (getOnly)
                  return (jclass) (live$ ? class$->this$ : NULL);
                if (class$ == NULL)
                {
                  jclass cls = (jclass) env->findClass("org/apache/lucene/queryparser/flexible/standard/parser/StandardSyntaxParser");

                  mids$ = new jmethodID[max_mid];
                  mids$[mid_init$_f2cc1bce94666404] = env->getMethodID(cls, "<init>", "()V");
                  mids$[mid_init$_99822035dc0bdfd2] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/queryparser/flexible/standard/parser/StandardSyntaxParserTokenManager;)V");
                  mids$[mid_init$_3c61baa8e1690ea8] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/queryparser/flexible/standard/parser/CharStream;)V");
                  mids$[mid_Clause_b1576514fde0a646] = env->getMethodID(cls, "Clause", "(Ljava/lang/CharSequence;)Lorg/apache/lucene/queryparser/flexible/core/nodes/QueryNode;");
                  mids$[mid_ConjQuery_b1576514fde0a646] = env->getMethodID(cls, "ConjQuery", "(Ljava/lang/CharSequence;)Lorg/apache/lucene/queryparser/flexible/core/nodes/QueryNode;");
                  mids$[mid_DisjQuery_b1576514fde0a646] = env->getMethodID(cls, "DisjQuery", "(Ljava/lang/CharSequence;)Lorg/apache/lucene/queryparser/flexible/core/nodes/QueryNode;");
                  mids$[mid_ModClause_b1576514fde0a646] = env->getMethodID(cls, "ModClause", "(Ljava/lang/CharSequence;)Lorg/apache/lucene/queryparser/flexible/core/nodes/QueryNode;");
                  mids$[mid_Modifiers_19c2ffd39e124f1c] = env->getMethodID(cls, "Modifiers", "()Lorg/apache/lucene/queryparser/flexible/core/nodes/ModifierQueryNode$Modifier;");
                  mids$[mid_Query_b1576514fde0a646] = env->getMethodID(cls, "Query", "(Ljava/lang/CharSequence;)Lorg/apache/lucene/queryparser/flexible/core/nodes/QueryNode;");
                  mids$[mid_ReInit_99822035dc0bdfd2] = env->getMethodID(cls, "ReInit", "(Lorg/apache/lucene/queryparser/flexible/standard/parser/StandardSyntaxParserTokenManager;)V");
                  mids$[mid_ReInit_3c61baa8e1690ea8] = env->getMethodID(cls, "ReInit", "(Lorg/apache/lucene/queryparser/flexible/standard/parser/CharStream;)V");
                  mids$[mid_Term_b1576514fde0a646] = env->getMethodID(cls, "Term", "(Ljava/lang/CharSequence;)Lorg/apache/lucene/queryparser/flexible/core/nodes/QueryNode;");
                  mids$[mid_TopLevelQuery_b1576514fde0a646] = env->getMethodID(cls, "TopLevelQuery", "(Ljava/lang/CharSequence;)Lorg/apache/lucene/queryparser/flexible/core/nodes/QueryNode;");
                  mids$[mid_disable_tracing_f2cc1bce94666404] = env->getMethodID(cls, "disable_tracing", "()V");
                  mids$[mid_enable_tracing_f2cc1bce94666404] = env->getMethodID(cls, "enable_tracing", "()V");
                  mids$[mid_generateParseException_e2a3f0be06e47801] = env->getMethodID(cls, "generateParseException", "()Lorg/apache/lucene/queryparser/flexible/standard/parser/ParseException;");
                  mids$[mid_getNextToken_f5892a36f0431afa] = env->getMethodID(cls, "getNextToken", "()Lorg/apache/lucene/queryparser/flexible/standard/parser/Token;");
                  mids$[mid_getToken_7696c268eaf43e29] = env->getMethodID(cls, "getToken", "(I)Lorg/apache/lucene/queryparser/flexible/standard/parser/Token;");
                  mids$[mid_parse_19de468a7b0842c6] = env->getMethodID(cls, "parse", "(Ljava/lang/CharSequence;Ljava/lang/CharSequence;)Lorg/apache/lucene/queryparser/flexible/core/nodes/QueryNode;");

                  fids$ = new jfieldID[max_fid];
                  fids$[fid_jj_nt] = env->getFieldID(cls, "jj_nt", "Lorg/apache/lucene/queryparser/flexible/standard/parser/Token;");
                  fids$[fid_token] = env->getFieldID(cls, "token", "Lorg/apache/lucene/queryparser/flexible/standard/parser/Token;");
                  fids$[fid_token_source] = env->getFieldID(cls, "token_source", "Lorg/apache/lucene/queryparser/flexible/standard/parser/StandardSyntaxParserTokenManager;");

                  class$ = new ::java::lang::Class(cls);
                  live$ = true;
                }
                return (jclass) class$->this$;
              }

              StandardSyntaxParser::StandardSyntaxParser() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_f2cc1bce94666404)) {}

              StandardSyntaxParser::StandardSyntaxParser(const ::org::apache::lucene::queryparser::flexible::standard::parser::StandardSyntaxParserTokenManager & a0) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_99822035dc0bdfd2, a0.this$)) {}

              StandardSyntaxParser::StandardSyntaxParser(const ::org::apache::lucene::queryparser::flexible::standard::parser::CharStream & a0) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_3c61baa8e1690ea8, a0.this$)) {}

              ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode StandardSyntaxParser::Clause(const ::java::lang::CharSequence & a0) const
              {
                return ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode(env->callObjectMethod(this$, mids$[mid_Clause_b1576514fde0a646], a0.this$));
              }

              ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode StandardSyntaxParser::ConjQuery(const ::java::lang::CharSequence & a0) const
              {
                return ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode(env->callObjectMethod(this$, mids$[mid_ConjQuery_b1576514fde0a646], a0.this$));
              }

              ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode StandardSyntaxParser::DisjQuery(const ::java::lang::CharSequence & a0) const
              {
                return ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode(env->callObjectMethod(this$, mids$[mid_DisjQuery_b1576514fde0a646], a0.this$));
              }

              ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode StandardSyntaxParser::ModClause(const ::java::lang::CharSequence & a0) const
              {
                return ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode(env->callObjectMethod(this$, mids$[mid_ModClause_b1576514fde0a646], a0.this$));
              }

              ::org::apache::lucene::queryparser::flexible::core::nodes::ModifierQueryNode$Modifier StandardSyntaxParser::Modifiers() const
              {
                return ::org::apache::lucene::queryparser::flexible::core::nodes::ModifierQueryNode$Modifier(env->callObjectMethod(this$, mids$[mid_Modifiers_19c2ffd39e124f1c]));
              }

              ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode StandardSyntaxParser::Query(const ::java::lang::CharSequence & a0) const
              {
                return ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode(env->callObjectMethod(this$, mids$[mid_Query_b1576514fde0a646], a0.this$));
              }

              void StandardSyntaxParser::ReInit(const ::org::apache::lucene::queryparser::flexible::standard::parser::StandardSyntaxParserTokenManager & a0) const
              {
                env->callVoidMethod(this$, mids$[mid_ReInit_99822035dc0bdfd2], a0.this$);
              }

              void StandardSyntaxParser::ReInit(const ::org::apache::lucene::queryparser::flexible::standard::parser::CharStream & a0) const
              {
                env->callVoidMethod(this$, mids$[mid_ReInit_3c61baa8e1690ea8], a0.this$);
              }

              ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode StandardSyntaxParser::Term(const ::java::lang::CharSequence & a0) const
              {
                return ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode(env->callObjectMethod(this$, mids$[mid_Term_b1576514fde0a646], a0.this$));
              }

              ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode StandardSyntaxParser::TopLevelQuery(const ::java::lang::CharSequence & a0) const
              {
                return ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode(env->callObjectMethod(this$, mids$[mid_TopLevelQuery_b1576514fde0a646], a0.this$));
              }

              void StandardSyntaxParser::disable_tracing() const
              {
                env->callVoidMethod(this$, mids$[mid_disable_tracing_f2cc1bce94666404]);
              }

              void StandardSyntaxParser::enable_tracing() const
              {
                env->callVoidMethod(this$, mids$[mid_enable_tracing_f2cc1bce94666404]);
              }

              ::org::apache::lucene::queryparser::flexible::standard::parser::ParseException StandardSyntaxParser::generateParseException() const
              {
                return ::org::apache::lucene::queryparser::flexible::standard::parser::ParseException(env->callObjectMethod(this$, mids$[mid_generateParseException_e2a3f0be06e47801]));
              }

              ::org::apache::lucene::queryparser::flexible::standard::parser::Token StandardSyntaxParser::getNextToken() const
              {
                return ::org::apache::lucene::queryparser::flexible::standard::parser::Token(env->callObjectMethod(this$, mids$[mid_getNextToken_f5892a36f0431afa]));
              }

              ::org::apache::lucene::queryparser::flexible::standard::parser::Token StandardSyntaxParser::getToken(jint a0) const
              {
                return ::org::apache::lucene::queryparser::flexible::standard::parser::Token(env->callObjectMethod(this$, mids$[mid_getToken_7696c268eaf43e29], a0));
              }

              ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode StandardSyntaxParser::parse(const ::java::lang::CharSequence & a0, const ::java::lang::CharSequence & a1) const
              {
                return ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode(env->callObjectMethod(this$, mids$[mid_parse_19de468a7b0842c6], a0.this$, a1.this$));
              }

              ::org::apache::lucene::queryparser::flexible::standard::parser::Token StandardSyntaxParser::_get_jj_nt() const
              {
                return ::org::apache::lucene::queryparser::flexible::standard::parser::Token(env->getObjectField(this$, fids$[fid_jj_nt]));
              }

              void StandardSyntaxParser::_set_jj_nt(const ::org::apache::lucene::queryparser::flexible::standard::parser::Token & a0) const
              {
                env->setObjectField(this$, fids$[fid_jj_nt], a0.this$);
              }

              ::org::apache::lucene::queryparser::flexible::standard::parser::Token StandardSyntaxParser::_get_token() const
              {
                return ::org::apache::lucene::queryparser::flexible::standard::parser::Token(env->getObjectField(this$, fids$[fid_token]));
              }

              void StandardSyntaxParser::_set_token(const ::org::apache::lucene::queryparser::flexible::standard::parser::Token & a0) const
              {
                env->setObjectField(this$, fids$[fid_token], a0.this$);
              }

              ::org::apache::lucene::queryparser::flexible::standard::parser::StandardSyntaxParserTokenManager StandardSyntaxParser::_get_token_source() const
              {
                return ::org::apache::lucene::queryparser::flexible::standard::parser::StandardSyntaxParserTokenManager(env->getObjectField(this$, fids$[fid_token_source]));
              }

              void StandardSyntaxParser::_set_token_source(const ::org::apache::lucene::queryparser::flexible::standard::parser::StandardSyntaxParserTokenManager & a0) const
              {
                env->setObjectField(this$, fids$[fid_token_source], a0.this$);
              }
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace standard {
            namespace parser {
              static PyObject *t_StandardSyntaxParser_cast_(PyTypeObject *type, PyObject *arg);
              static PyObject *t_StandardSyntaxParser_instance_(PyTypeObject *type, PyObject *arg);
              static int t_StandardSyntaxParser_init_(t_StandardSyntaxParser *self, PyObject *args, PyObject *kwds);
              static PyObject *t_StandardSyntaxParser_Clause(t_StandardSyntaxParser *self, PyObject *arg);
              static PyObject *t_StandardSyntaxParser_ConjQuery(t_StandardSyntaxParser *self, PyObject *arg);
              static PyObject *t_StandardSyntaxParser_DisjQuery(t_StandardSyntaxParser *self, PyObject *arg);
              static PyObject *t_StandardSyntaxParser_ModClause(t_StandardSyntaxParser *self, PyObject *arg);
              static PyObject *t_StandardSyntaxParser_Modifiers(t_StandardSyntaxParser *self);
              static PyObject *t_StandardSyntaxParser_Query(t_StandardSyntaxParser *self, PyObject *arg);
              static PyObject *t_StandardSyntaxParser_ReInit(t_StandardSyntaxParser *self, PyObject *args);
              static PyObject *t_StandardSyntaxParser_Term(t_StandardSyntaxParser *self, PyObject *arg);
              static PyObject *t_StandardSyntaxParser_TopLevelQuery(t_StandardSyntaxParser *self, PyObject *arg);
              static PyObject *t_StandardSyntaxParser_disable_tracing(t_StandardSyntaxParser *self);
              static PyObject *t_StandardSyntaxParser_enable_tracing(t_StandardSyntaxParser *self);
              static PyObject *t_StandardSyntaxParser_generateParseException(t_StandardSyntaxParser *self);
              static PyObject *t_StandardSyntaxParser_getNextToken(t_StandardSyntaxParser *self);
              static PyObject *t_StandardSyntaxParser_getToken(t_StandardSyntaxParser *self, PyObject *arg);
              static PyObject *t_StandardSyntaxParser_parse(t_StandardSyntaxParser *self, PyObject *args);
              static PyObject *t_StandardSyntaxParser_get__jj_nt(t_StandardSyntaxParser *self, void *data);
              static int t_StandardSyntaxParser_set__jj_nt(t_StandardSyntaxParser *self, PyObject *arg, void *data);
              static PyObject *t_StandardSyntaxParser_get__token(t_StandardSyntaxParser *self, void *data);
              static int t_StandardSyntaxParser_set__token(t_StandardSyntaxParser *self, PyObject *arg, void *data);
              static PyObject *t_StandardSyntaxParser_get__token_source(t_StandardSyntaxParser *self, void *data);
              static int t_StandardSyntaxParser_set__token_source(t_StandardSyntaxParser *self, PyObject *arg, void *data);

              static PyObject *t_StandardSyntaxParser_get__nextToken(t_StandardSyntaxParser *self, void *data);
              static PyGetSetDef t_StandardSyntaxParser__fields_[] = {
                DECLARE_GETSET_FIELD(t_StandardSyntaxParser, jj_nt),
                DECLARE_GETSET_FIELD(t_StandardSyntaxParser, token),
                DECLARE_GETSET_FIELD(t_StandardSyntaxParser, token_source),
                DECLARE_GET_FIELD(t_StandardSyntaxParser, nextToken),
                { NULL, NULL, NULL, NULL, NULL }
              };

              static PyMethodDef t_StandardSyntaxParser__methods_[] = {
                DECLARE_METHOD(t_StandardSyntaxParser, cast_, METH_O | METH_CLASS),
                DECLARE_METHOD(t_StandardSyntaxParser, instance_, METH_O | METH_CLASS),
                DECLARE_METHOD(t_StandardSyntaxParser, Clause, METH_O),
                DECLARE_METHOD(t_StandardSyntaxParser, ConjQuery, METH_O),
                DECLARE_METHOD(t_StandardSyntaxParser, DisjQuery, METH_O),
                DECLARE_METHOD(t_StandardSyntaxParser, ModClause, METH_O),
                DECLARE_METHOD(t_StandardSyntaxParser, Modifiers, METH_NOARGS),
                DECLARE_METHOD(t_StandardSyntaxParser, Query, METH_O),
                DECLARE_METHOD(t_StandardSyntaxParser, ReInit, METH_VARARGS),
                DECLARE_METHOD(t_StandardSyntaxParser, Term, METH_O),
                DECLARE_METHOD(t_StandardSyntaxParser, TopLevelQuery, METH_O),
                DECLARE_METHOD(t_StandardSyntaxParser, disable_tracing, METH_NOARGS),
                DECLARE_METHOD(t_StandardSyntaxParser, enable_tracing, METH_NOARGS),
                DECLARE_METHOD(t_StandardSyntaxParser, generateParseException, METH_NOARGS),
                DECLARE_METHOD(t_StandardSyntaxParser, getNextToken, METH_NOARGS),
                DECLARE_METHOD(t_StandardSyntaxParser, getToken, METH_O),
                DECLARE_METHOD(t_StandardSyntaxParser, parse, METH_VARARGS),
                { NULL, NULL, 0, NULL }
              };

              static PyType_Slot PY_TYPE_SLOTS(StandardSyntaxParser)[] = {
                { Py_tp_methods, t_StandardSyntaxParser__methods_ },
                { Py_tp_init, (void *) t_StandardSyntaxParser_init_ },
                { Py_tp_getset, t_StandardSyntaxParser__fields_ },
                { 0, NULL }
              };

              static PyType_Def *PY_TYPE_BASES(StandardSyntaxParser)[] = {
                &PY_TYPE_DEF(::java::lang::Object),
                NULL
              };

              DEFINE_TYPE(StandardSyntaxParser, t_StandardSyntaxParser, StandardSyntaxParser);

              void t_StandardSyntaxParser::install(PyObject *module)
              {
                installType(&PY_TYPE(StandardSyntaxParser), &PY_TYPE_DEF(StandardSyntaxParser), module, "StandardSyntaxParser", 0);
              }

              void t_StandardSyntaxParser::initialize(PyObject *module)
              {
                PyObject_SetAttrString((PyObject *) PY_TYPE(StandardSyntaxParser), "class_", make_descriptor(StandardSyntaxParser::initializeClass, 1));
                PyObject_SetAttrString((PyObject *) PY_TYPE(StandardSyntaxParser), "wrapfn_", make_descriptor(t_StandardSyntaxParser::wrap_jobject));
                PyObject_SetAttrString((PyObject *) PY_TYPE(StandardSyntaxParser), "boxfn_", make_descriptor(boxObject));
              }

              static PyObject *t_StandardSyntaxParser_cast_(PyTypeObject *type, PyObject *arg)
              {
                if (!(arg = castCheck(arg, StandardSyntaxParser::initializeClass, 1)))
                  return NULL;
                return t_StandardSyntaxParser::wrap_Object(StandardSyntaxParser(((t_StandardSyntaxParser *) arg)->object.this$));
              }
              static PyObject *t_StandardSyntaxParser_instance_(PyTypeObject *type, PyObject *arg)
              {
                if (!castCheck(arg, StandardSyntaxParser::initializeClass, 0))
                  Py_RETURN_FALSE;
                Py_RETURN_TRUE;
              }

              static int t_StandardSyntaxParser_init_(t_StandardSyntaxParser *self, PyObject *args, PyObject *kwds)
              {
                switch (PyTuple_GET_SIZE(args)) {
                 case 0:
                  {
                    StandardSyntaxParser object((jobject) NULL);

                    INT_CALL(object = StandardSyntaxParser());
                    self->object = object;
                    break;
                  }
                 case 1:
                  {
                    ::org::apache::lucene::queryparser::flexible::standard::parser::StandardSyntaxParserTokenManager a0((jobject) NULL);
                    StandardSyntaxParser object((jobject) NULL);

                    if (!parseArgs(args, "k", ::org::apache::lucene::queryparser::flexible::standard::parser::StandardSyntaxParserTokenManager::initializeClass, &a0))
                    {
                      INT_CALL(object = StandardSyntaxParser(a0));
                      self->object = object;
                      break;
                    }
                  }
                  {
                    ::org::apache::lucene::queryparser::flexible::standard::parser::CharStream a0((jobject) NULL);
                    StandardSyntaxParser object((jobject) NULL);

                    if (!parseArgs(args, "k", ::org::apache::lucene::queryparser::flexible::standard::parser::CharStream::initializeClass, &a0))
                    {
                      INT_CALL(object = StandardSyntaxParser(a0));
                      self->object = object;
                      break;
                    }
                  }
                 default:
                  PyErr_SetArgsError((PyObject *) self, "__init__", args);
                  return -1;
                }

                return 0;
              }

              static PyObject *t_StandardSyntaxParser_Clause(t_StandardSyntaxParser *self, PyObject *arg)
              {
                ::java::lang::CharSequence a0((jobject) NULL);
                ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode result((jobject) NULL);

                if (!parseArg(arg, "O", ::java::lang::PY_TYPE(CharSequence), &a0))
                {
                  OBJ_CALL(result = self->object.Clause(a0));
                  return ::org::apache::lucene::queryparser::flexible::core::nodes::t_QueryNode::wrap_Object(result);
                }

                PyErr_SetArgsError((PyObject *) self, "Clause", arg);
                return NULL;
              }

              static PyObject *t_StandardSyntaxParser_ConjQuery(t_StandardSyntaxParser *self, PyObject *arg)
              {
                ::java::lang::CharSequence a0((jobject) NULL);
                ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode result((jobject) NULL);

                if (!parseArg(arg, "O", ::java::lang::PY_TYPE(CharSequence), &a0))
                {
                  OBJ_CALL(result = self->object.ConjQuery(a0));
                  return ::org::apache::lucene::queryparser::flexible::core::nodes::t_QueryNode::wrap_Object(result);
                }

                PyErr_SetArgsError((PyObject *) self, "ConjQuery", arg);
                return NULL;
              }

              static PyObject *t_StandardSyntaxParser_DisjQuery(t_StandardSyntaxParser *self, PyObject *arg)
              {
                ::java::lang::CharSequence a0((jobject) NULL);
                ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode result((jobject) NULL);

                if (!parseArg(arg, "O", ::java::lang::PY_TYPE(CharSequence), &a0))
                {
                  OBJ_CALL(result = self->object.DisjQuery(a0));
                  return ::org::apache::lucene::queryparser::flexible::core::nodes::t_QueryNode::wrap_Object(result);
                }

                PyErr_SetArgsError((PyObject *) self, "DisjQuery", arg);
                return NULL;
              }

              static PyObject *t_StandardSyntaxParser_ModClause(t_StandardSyntaxParser *self, PyObject *arg)
              {
                ::java::lang::CharSequence a0((jobject) NULL);
                ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode result((jobject) NULL);

                if (!parseArg(arg, "O", ::java::lang::PY_TYPE(CharSequence), &a0))
                {
                  OBJ_CALL(result = self->object.ModClause(a0));
                  return ::org::apache::lucene::queryparser::flexible::core::nodes::t_QueryNode::wrap_Object(result);
                }

                PyErr_SetArgsError((PyObject *) self, "ModClause", arg);
                return NULL;
              }

              static PyObject *t_StandardSyntaxParser_Modifiers(t_StandardSyntaxParser *self)
              {
                ::org::apache::lucene::queryparser::flexible::core::nodes::ModifierQueryNode$Modifier result((jobject) NULL);
                OBJ_CALL(result = self->object.Modifiers());
                return ::org::apache::lucene::queryparser::flexible::core::nodes::t_ModifierQueryNode$Modifier::wrap_Object(result);
              }

              static PyObject *t_StandardSyntaxParser_Query(t_StandardSyntaxParser *self, PyObject *arg)
              {
                ::java::lang::CharSequence a0((jobject) NULL);
                ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode result((jobject) NULL);

                if (!parseArg(arg, "O", ::java::lang::PY_TYPE(CharSequence), &a0))
                {
                  OBJ_CALL(result = self->object.Query(a0));
                  return ::org::apache::lucene::queryparser::flexible::core::nodes::t_QueryNode::wrap_Object(result);
                }

                PyErr_SetArgsError((PyObject *) self, "Query", arg);
                return NULL;
              }

              static PyObject *t_StandardSyntaxParser_ReInit(t_StandardSyntaxParser *self, PyObject *args)
              {
                switch (PyTuple_GET_SIZE(args)) {
                 case 1:
                  {
                    ::org::apache::lucene::queryparser::flexible::standard::parser::StandardSyntaxParserTokenManager a0((jobject) NULL);

                    if (!parseArgs(args, "k", ::org::apache::lucene::queryparser::flexible::standard::parser::StandardSyntaxParserTokenManager::initializeClass, &a0))
                    {
                      OBJ_CALL(self->object.ReInit(a0));
                      Py_RETURN_NONE;
                    }
                  }
                  {
                    ::org::apache::lucene::queryparser::flexible::standard::parser::CharStream a0((jobject) NULL);

                    if (!parseArgs(args, "k", ::org::apache::lucene::queryparser::flexible::standard::parser::CharStream::initializeClass, &a0))
                    {
                      OBJ_CALL(self->object.ReInit(a0));
                      Py_RETURN_NONE;
                    }
                  }
                }

                PyErr_SetArgsError((PyObject *) self, "ReInit", args);
                return NULL;
              }

              static PyObject *t_StandardSyntaxParser_Term(t_StandardSyntaxParser *self, PyObject *arg)
              {
                ::java::lang::CharSequence a0((jobject) NULL);
                ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode result((jobject) NULL);

                if (!parseArg(arg, "O", ::java::lang::PY_TYPE(CharSequence), &a0))
                {
                  OBJ_CALL(result = self->object.Term(a0));
                  return ::org::apache::lucene::queryparser::flexible::core::nodes::t_QueryNode::wrap_Object(result);
                }

                PyErr_SetArgsError((PyObject *) self, "Term", arg);
                return NULL;
              }

              static PyObject *t_StandardSyntaxParser_TopLevelQuery(t_StandardSyntaxParser *self, PyObject *arg)
              {
                ::java::lang::CharSequence a0((jobject) NULL);
                ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode result((jobject) NULL);

                if (!parseArg(arg, "O", ::java::lang::PY_TYPE(CharSequence), &a0))
                {
                  OBJ_CALL(result = self->object.TopLevelQuery(a0));
                  return ::org::apache::lucene::queryparser::flexible::core::nodes::t_QueryNode::wrap_Object(result);
                }

                PyErr_SetArgsError((PyObject *) self, "TopLevelQuery", arg);
                return NULL;
              }

              static PyObject *t_StandardSyntaxParser_disable_tracing(t_StandardSyntaxParser *self)
              {
                OBJ_CALL(self->object.disable_tracing());
                Py_RETURN_NONE;
              }

              static PyObject *t_StandardSyntaxParser_enable_tracing(t_StandardSyntaxParser *self)
              {
                OBJ_CALL(self->object.enable_tracing());
                Py_RETURN_NONE;
              }

              static PyObject *t_StandardSyntaxParser_generateParseException(t_StandardSyntaxParser *self)
              {
                ::org::apache::lucene::queryparser::flexible::standard::parser::ParseException result((jobject) NULL);
                OBJ_CALL(result = self->object.generateParseException());
                return ::org::apache::lucene::queryparser::flexible::standard::parser::t_ParseException::wrap_Object(result);
              }

              static PyObject *t_StandardSyntaxParser_getNextToken(t_StandardSyntaxParser *self)
              {
                ::org::apache::lucene::queryparser::flexible::standard::parser::Token result((jobject) NULL);
                OBJ_CALL(result = self->object.getNextToken());
                return ::org::apache::lucene::queryparser::flexible::standard::parser::t_Token::wrap_Object(result);
              }

              static PyObject *t_StandardSyntaxParser_getToken(t_StandardSyntaxParser *self, PyObject *arg)
              {
                jint a0;
                ::org::apache::lucene::queryparser::flexible::standard::parser::Token result((jobject) NULL);

                if (!parseArg(arg, "I", &a0))
                {
                  OBJ_CALL(result = self->object.getToken(a0));
                  return ::org::apache::lucene::queryparser::flexible::standard::parser::t_Token::wrap_Object(result);
                }

                PyErr_SetArgsError((PyObject *) self, "getToken", arg);
                return NULL;
              }

              static PyObject *t_StandardSyntaxParser_parse(t_StandardSyntaxParser *self, PyObject *args)
              {
                ::java::lang::CharSequence a0((jobject) NULL);
                ::java::lang::CharSequence a1((jobject) NULL);
                ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode result((jobject) NULL);

                if (!parseArgs(args, "OO", ::java::lang::PY_TYPE(CharSequence), ::java::lang::PY_TYPE(CharSequence), &a0, &a1))
                {
                  OBJ_CALL(result = self->object.parse(a0, a1));
                  return ::org::apache::lucene::queryparser::flexible::core::nodes::t_QueryNode::wrap_Object(result);
                }

                PyErr_SetArgsError((PyObject *) self, "parse", args);
                return NULL;
              }

              static PyObject *t_StandardSyntaxParser_get__jj_nt(t_StandardSyntaxParser *self, void *data)
              {
                ::org::apache::lucene::queryparser::flexible::standard::parser::Token value((jobject) NULL);
                OBJ_CALL(value = self->object._get_jj_nt());
                return ::org::apache::lucene::queryparser::flexible::standard::parser::t_Token::wrap_Object(value);
              }
              static int t_StandardSyntaxParser_set__jj_nt(t_StandardSyntaxParser *self, PyObject *arg, void *data)
              {
                ::org::apache::lucene::queryparser::flexible::standard::parser::Token value((jobject) NULL);
                if (!parseArg(arg, "k", ::org::apache::lucene::queryparser::flexible::standard::parser::Token::initializeClass, &value))
                {
                  INT_CALL(self->object._set_jj_nt(value));
                  return 0;
                }
                PyErr_SetArgsError((PyObject *) self, "jj_nt", arg);
                return -1;
              }

              static PyObject *t_StandardSyntaxParser_get__token(t_StandardSyntaxParser *self, void *data)
              {
                ::org::apache::lucene::queryparser::flexible::standard::parser::Token value((jobject) NULL);
                OBJ_CALL(value = self->object._get_token());
                return ::org::apache::lucene::queryparser::flexible::standard::parser::t_Token::wrap_Object(value);
              }
              static int t_StandardSyntaxParser_set__token(t_StandardSyntaxParser *self, PyObject *arg, void *data)
              {
                ::org::apache::lucene::queryparser::flexible::standard::parser::Token value((jobject) NULL);
                if (!parseArg(arg, "k", ::org::apache::lucene::queryparser::flexible::standard::parser::Token::initializeClass, &value))
                {
                  INT_CALL(self->object._set_token(value));
                  return 0;
                }
                PyErr_SetArgsError((PyObject *) self, "token", arg);
                return -1;
              }

              static PyObject *t_StandardSyntaxParser_get__token_source(t_StandardSyntaxParser *self, void *data)
              {
                ::org::apache::lucene::queryparser::flexible::standard::parser::StandardSyntaxParserTokenManager value((jobject) NULL);
                OBJ_CALL(value = self->object._get_token_source());
                return ::org::apache::lucene::queryparser::flexible::standard::parser::t_StandardSyntaxParserTokenManager::wrap_Object(value);
              }
              static int t_StandardSyntaxParser_set__token_source(t_StandardSyntaxParser *self, PyObject *arg, void *data)
              {
                ::org::apache::lucene::queryparser::flexible::standard::parser::StandardSyntaxParserTokenManager value((jobject) NULL);
                if (!parseArg(arg, "k", ::org::apache::lucene::queryparser::flexible::standard::parser::StandardSyntaxParserTokenManager::initializeClass, &value))
                {
                  INT_CALL(self->object._set_token_source(value));
                  return 0;
                }
                PyErr_SetArgsError((PyObject *) self, "token_source", arg);
                return -1;
              }

              static PyObject *t_StandardSyntaxParser_get__nextToken(t_StandardSyntaxParser *self, void *data)
              {
                ::org::apache::lucene::queryparser::flexible::standard::parser::Token value((jobject) NULL);
                OBJ_CALL(value = self->object.getNextToken());
                return ::org::apache::lucene::queryparser::flexible::standard::parser::t_Token::wrap_Object(value);
              }
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/ja/JapaneseIterationMarkCharFilterFactory.h"
#include "java/util/Map.h"
#include "java/lang/String.h"
#include "java/io/Reader.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace ja {

          ::java::lang::Class *JapaneseIterationMarkCharFilterFactory::class$ = NULL;
          jmethodID *JapaneseIterationMarkCharFilterFactory::mids$ = NULL;
          bool JapaneseIterationMarkCharFilterFactory::live$ = false;
          ::java::lang::String *JapaneseIterationMarkCharFilterFactory::NAME = NULL;

          jclass JapaneseIterationMarkCharFilterFactory::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/ja/JapaneseIterationMarkCharFilterFactory");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_408bd889ee3beae5] = env->getMethodID(cls, "<init>", "(Ljava/util/Map;)V");
              mids$[mid_create_e71c53e25a234d7d] = env->getMethodID(cls, "create", "(Ljava/io/Reader;)Ljava/io/Reader;");
              mids$[mid_normalize_e71c53e25a234d7d] = env->getMethodID(cls, "normalize", "(Ljava/io/Reader;)Ljava/io/Reader;");

              class$ = new ::java::lang::Class(cls);
              cls = (jclass) class$->this$;

              NAME = new ::java::lang::String(env->getStaticObjectField(cls, "NAME", "Ljava/lang/String;"));
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          JapaneseIterationMarkCharFilterFactory::JapaneseIterationMarkCharFilterFactory(const ::java::util::Map & a0) : ::org::apache::lucene::analysis::util::CharFilterFactory(env->newObject(initializeClass, &mids$, mid_init$_408bd889ee3beae5, a0.this$)) {}

          ::java::io::Reader JapaneseIterationMarkCharFilterFactory::create(const ::java::io::Reader & a0) const
          {
            return ::java::io::Reader(env->callObjectMethod(this$, mids$[mid_create_e71c53e25a234d7d], a0.this$));
          }

          ::java::io::Reader JapaneseIterationMarkCharFilterFactory::normalize(const ::java::io::Reader & a0) const
          {
            return ::java::io::Reader(env->callObjectMethod(this$, mids$[mid_normalize_e71c53e25a234d7d], a0.this$));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace ja {
          static PyObject *t_JapaneseIterationMarkCharFilterFactory_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_JapaneseIterationMarkCharFilterFactory_instance_(PyTypeObject *type, PyObject *arg);
          static int t_JapaneseIterationMarkCharFilterFactory_init_(t_JapaneseIterationMarkCharFilterFactory *self, PyObject *args, PyObject *kwds);
          static PyObject *t_JapaneseIterationMarkCharFilterFactory_create(t_JapaneseIterationMarkCharFilterFactory *self, PyObject *args);
          static PyObject *t_JapaneseIterationMarkCharFilterFactory_normalize(t_JapaneseIterationMarkCharFilterFactory *self, PyObject *args);

          static PyMethodDef t_JapaneseIterationMarkCharFilterFactory__methods_[] = {
            DECLARE_METHOD(t_JapaneseIterationMarkCharFilterFactory, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_JapaneseIterationMarkCharFilterFactory, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_JapaneseIterationMarkCharFilterFactory, create, METH_VARARGS),
            DECLARE_METHOD(t_JapaneseIterationMarkCharFilterFactory, normalize, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          static PyType_Slot PY_TYPE_SLOTS(JapaneseIterationMarkCharFilterFactory)[] = {
            { Py_tp_methods, t_JapaneseIterationMarkCharFilterFactory__methods_ },
            { Py_tp_init, (void *) t_JapaneseIterationMarkCharFilterFactory_init_ },
            { 0, NULL }
          };

          static PyType_Def *PY_TYPE_BASES(JapaneseIterationMarkCharFilterFactory)[] = {
            &PY_TYPE_DEF(::org::apache::lucene::analysis::util::CharFilterFactory),
            NULL
          };

          DEFINE_TYPE(JapaneseIterationMarkCharFilterFactory, t_JapaneseIterationMarkCharFilterFactory, JapaneseIterationMarkCharFilterFactory);

          void t_JapaneseIterationMarkCharFilterFactory::install(PyObject *module)
          {
            installType(&PY_TYPE(JapaneseIterationMarkCharFilterFactory), &PY_TYPE_DEF(JapaneseIterationMarkCharFilterFactory), module, "JapaneseIterationMarkCharFilterFactory", 0);
          }

          void t_JapaneseIterationMarkCharFilterFactory::initialize(PyObject *module)
          {
            PyObject_SetAttrString((PyObject *) PY_TYPE(JapaneseIterationMarkCharFilterFactory), "class_", make_descriptor(JapaneseIterationMarkCharFilterFactory::initializeClass, 1));
            PyObject_SetAttrString((PyObject *) PY_TYPE(JapaneseIterationMarkCharFilterFactory), "wrapfn_", make_descriptor(t_JapaneseIterationMarkCharFilterFactory::wrap_jobject));
            PyObject_SetAttrString((PyObject *) PY_TYPE(JapaneseIterationMarkCharFilterFactory), "boxfn_", make_descriptor(boxObject));
            env->getClass(JapaneseIterationMarkCharFilterFactory::initializeClass);
            PyObject_SetAttrString((PyObject *) PY_TYPE(JapaneseIterationMarkCharFilterFactory), "NAME", make_descriptor(j2p(*JapaneseIterationMarkCharFilterFactory::NAME)));
          }

          static PyObject *t_JapaneseIterationMarkCharFilterFactory_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, JapaneseIterationMarkCharFilterFactory::initializeClass, 1)))
              return NULL;
            return t_JapaneseIterationMarkCharFilterFactory::wrap_Object(JapaneseIterationMarkCharFilterFactory(((t_JapaneseIterationMarkCharFilterFactory *) arg)->object.this$));
          }
          static PyObject *t_JapaneseIterationMarkCharFilterFactory_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, JapaneseIterationMarkCharFilterFactory::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_JapaneseIterationMarkCharFilterFactory_init_(t_JapaneseIterationMarkCharFilterFactory *self, PyObject *args, PyObject *kwds)
          {
            ::java::util::Map a0((jobject) NULL);
            PyTypeObject **p0;
            JapaneseIterationMarkCharFilterFactory object((jobject) NULL);

            if (!parseArgs(args, "K", ::java::util::Map::initializeClass, &a0, &p0, ::java::util::t_Map::parameters_))
            {
              INT_CALL(object = JapaneseIterationMarkCharFilterFactory(a0));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_JapaneseIterationMarkCharFilterFactory_create(t_JapaneseIterationMarkCharFilterFactory *self, PyObject *args)
          {
            ::java::io::Reader a0((jobject) NULL);
            ::java::io::Reader result((jobject) NULL);

            if (!parseArgs(args, "k", ::java::io::Reader::initializeClass, &a0))
            {
              OBJ_CALL(result = self->object.create(a0));
              return ::java::io::t_Reader::wrap_Object(result);
            }

            return callSuper(PY_TYPE(JapaneseIterationMarkCharFilterFactory), (PyObject *) self, "create", args, 2);
          }

          static PyObject *t_JapaneseIterationMarkCharFilterFactory_normalize(t_JapaneseIterationMarkCharFilterFactory *self, PyObject *args)
          {
            ::java::io::Reader a0((jobject) NULL);
            ::java::io::Reader result((jobject) NULL);

            if (!parseArgs(args, "k", ::java::io::Reader::initializeClass, &a0))
            {
              OBJ_CALL(result = self->object.normalize(a0));
              return ::java::io::t_Reader::wrap_Object(result);
            }

            return callSuper(PY_TYPE(JapaneseIterationMarkCharFilterFactory), (PyObject *) self, "normalize", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/TermQuery.h"
#include "org/apache/lucene/search/IndexSearcher.h"
#include "org/apache/lucene/index/Term.h"
#include "java/lang/Class.h"
#include "java/lang/Object.h"
#include "org/apache/lucene/index/TermStates.h"
#include "java/lang/String.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/search/QueryVisitor.h"
#include "org/apache/lucene/search/ScoreMode.h"
#include "org/apache/lucene/search/Weight.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {

        ::java::lang::Class *TermQuery::class$ = NULL;
        jmethodID *TermQuery::mids$ = NULL;
        bool TermQuery::live$ = false;

        jclass TermQuery::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/search/TermQuery");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_32784f9c0ee449e6] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/index/Term;)V");
            mids$[mid_init$_98ee6fb07d5bdf57] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/index/Term;Lorg/apache/lucene/index/TermStates;)V");
            mids$[mid_createWeight_f0ef0b5ea369ac06] = env->getMethodID(cls, "createWeight", "(Lorg/apache/lucene/search/IndexSearcher;Lorg/apache/lucene/search/ScoreMode;F)Lorg/apache/lucene/search/Weight;");
            mids$[mid_equals_8b72f2dcdde6fd1d] = env->getMethodID(cls, "equals", "(Ljava/lang/Object;)Z");
            mids$[mid_getTerm_5e734526802c58d9] = env->getMethodID(cls, "getTerm", "()Lorg/apache/lucene/index/Term;");
            mids$[mid_getTermStates_656ab7adb8fbc7f7] = env->getMethodID(cls, "getTermStates", "()Lorg/apache/lucene/index/TermStates;");
            mids$[mid_hashCode_9972fcc56b44e79d] = env->getMethodID(cls, "hashCode", "()I");
            mids$[mid_toString_9bfa75c9f141b67f] = env->getMethodID(cls, "toString", "(Ljava/lang/String;)Ljava/lang/String;");
            mids$[mid_visit_f9e6207006c5b6c1] = env->getMethodID(cls, "visit", "(Lorg/apache/lucene/search/QueryVisitor;)V");

            class$ = new ::java::lang::Class(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        TermQuery::TermQuery(const ::org::apache::lucene::index::Term & a0) : ::org::apache::lucene::search::Query(env->newObject(initializeClass, &mids$, mid_init$_32784f9c0ee449e6, a0.this$)) {}

        TermQuery::TermQuery(const ::org::apache::lucene::index::Term & a0, const ::org::apache::lucene::index::TermStates & a1) : ::org::apache::lucene::search::Query(env->newObject(initializeClass, &mids$, mid_init$_98ee6fb07d5bdf57, a0.this$, a1.this$)) {}

        ::org::apache::lucene::search::Weight TermQuery::createWeight(const ::org::apache::lucene::search::IndexSearcher & a0, const ::org::apache::lucene::search::ScoreMode & a1, jfloat a2) const
        {
          return ::org::apache::lucene::search::Weight(env->callObjectMethod(this$, mids$[mid_createWeight_f0ef0b5ea369ac06], a0.this$, a1.this$, a2));
        }

        jboolean TermQuery::equals(const ::java::lang::Object & a0) const
        {
          return env->callBooleanMethod(this$, mids$[mid_equals_8b72f2dcdde6fd1d], a0.this$);
        }

        ::org::apache::lucene::index::Term TermQuery::getTerm() const
        {
          return ::org::apache::lucene::index::Term(env->callObjectMethod(this$, mids$[mid_getTerm_5e734526802c58d9]));
        }

        ::org::apache::lucene::index::TermStates TermQuery::getTermStates() const
        {
          return ::org::apache::lucene::index::TermStates(env->callObjectMethod(this$, mids$[mid_getTermStates_656ab7adb8fbc7f7]));
        }

        jint TermQuery::hashCode() const
        {
          return env->callIntMethod(this$, mids$[mid_hashCode_9972fcc56b44e79d]);
        }

        ::java::lang::String TermQuery::toString(const ::java::lang::String & a0) const
        {
          return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_9bfa75c9f141b67f], a0.this$));
        }

        void TermQuery::visit(const ::org::apache::lucene::search::QueryVisitor & a0) const
        {
          env->callVoidMethod(this$, mids$[mid_visit_f9e6207006c5b6c1], a0.this$);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        static PyObject *t_TermQuery_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_TermQuery_instance_(PyTypeObject *type, PyObject *arg);
        static int t_TermQuery_init_(t_TermQuery *self, PyObject *args, PyObject *kwds);
        static PyObject *t_TermQuery_createWeight(t_TermQuery *self, PyObject *args);
        static PyObject *t_TermQuery_equals(t_TermQuery *self, PyObject *args);
        static PyObject *t_TermQuery_getTerm(t_TermQuery *self);
        static PyObject *t_TermQuery_getTermStates(t_TermQuery *self);
        static PyObject *t_TermQuery_hashCode(t_TermQuery *self, PyObject *args);
        static PyObject *t_TermQuery_toString(t_TermQuery *self, PyObject *args);
        static PyObject *t_TermQuery_visit(t_TermQuery *self, PyObject *args);
        static PyObject *t_TermQuery_get__term(t_TermQuery *self, void *data);
        static PyObject *t_TermQuery_get__termStates(t_TermQuery *self, void *data);
        static PyGetSetDef t_TermQuery__fields_[] = {
          DECLARE_GET_FIELD(t_TermQuery, term),
          DECLARE_GET_FIELD(t_TermQuery, termStates),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_TermQuery__methods_[] = {
          DECLARE_METHOD(t_TermQuery, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_TermQuery, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_TermQuery, createWeight, METH_VARARGS),
          DECLARE_METHOD(t_TermQuery, equals, METH_VARARGS),
          DECLARE_METHOD(t_TermQuery, getTerm, METH_NOARGS),
          DECLARE_METHOD(t_TermQuery, getTermStates, METH_NOARGS),
          DECLARE_METHOD(t_TermQuery, hashCode, METH_VARARGS),
          DECLARE_METHOD(t_TermQuery, toString, METH_VARARGS),
          DECLARE_METHOD(t_TermQuery, visit, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        static PyType_Slot PY_TYPE_SLOTS(TermQuery)[] = {
          { Py_tp_methods, t_TermQuery__methods_ },
          { Py_tp_init, (void *) t_TermQuery_init_ },
          { Py_tp_getset, t_TermQuery__fields_ },
          { 0, NULL }
        };

        static PyType_Def *PY_TYPE_BASES(TermQuery)[] = {
          &PY_TYPE_DEF(::org::apache::lucene::search::Query),
          NULL
        };

        DEFINE_TYPE(TermQuery, t_TermQuery, TermQuery);

        void t_TermQuery::install(PyObject *module)
        {
          installType(&PY_TYPE(TermQuery), &PY_TYPE_DEF(TermQuery), module, "TermQuery", 0);
        }

        void t_TermQuery::initialize(PyObject *module)
        {
          PyObject_SetAttrString((PyObject *) PY_TYPE(TermQuery), "class_", make_descriptor(TermQuery::initializeClass, 1));
          PyObject_SetAttrString((PyObject *) PY_TYPE(TermQuery), "wrapfn_", make_descriptor(t_TermQuery::wrap_jobject));
          PyObject_SetAttrString((PyObject *) PY_TYPE(TermQuery), "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_TermQuery_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, TermQuery::initializeClass, 1)))
            return NULL;
          return t_TermQuery::wrap_Object(TermQuery(((t_TermQuery *) arg)->object.this$));
        }
        static PyObject *t_TermQuery_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, TermQuery::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_TermQuery_init_(t_TermQuery *self, PyObject *args, PyObject *kwds)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 1:
            {
              ::org::apache::lucene::index::Term a0((jobject) NULL);
              TermQuery object((jobject) NULL);

              if (!parseArgs(args, "k", ::org::apache::lucene::index::Term::initializeClass, &a0))
              {
                INT_CALL(object = TermQuery(a0));
                self->object = object;
                break;
              }
            }
            goto err;
           case 2:
            {
              ::org::apache::lucene::index::Term a0((jobject) NULL);
              ::org::apache::lucene::index::TermStates a1((jobject) NULL);
              TermQuery object((jobject) NULL);

              if (!parseArgs(args, "kk", ::org::apache::lucene::index::Term::initializeClass, ::org::apache::lucene::index::TermStates::initializeClass, &a0, &a1))
              {
                INT_CALL(object = TermQuery(a0, a1));
                self->object = object;
                break;
              }
            }
           default:
           err:
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }

        static PyObject *t_TermQuery_createWeight(t_TermQuery *self, PyObject *args)
        {
          ::org::apache::lucene::search::IndexSearcher a0((jobject) NULL);
          ::org::apache::lucene::search::ScoreMode a1((jobject) NULL);
          PyTypeObject **p1;
          jfloat a2;
          ::org::apache::lucene::search::Weight result((jobject) NULL);

          if (!parseArgs(args, "kKF", ::org::apache::lucene::search::IndexSearcher::initializeClass, ::org::apache::lucene::search::ScoreMode::initializeClass, &a0, &a1, &p1, ::org::apache::lucene::search::t_ScoreMode::parameters_, &a2))
          {
            OBJ_CALL(result = self->object.createWeight(a0, a1, a2));
            return ::org::apache::lucene::search::t_Weight::wrap_Object(result);
          }

          return callSuper(PY_TYPE(TermQuery), (PyObject *) self, "createWeight", args, 2);
        }

        static PyObject *t_TermQuery_equals(t_TermQuery *self, PyObject *args)
        {
          ::java::lang::Object a0((jobject) NULL);
          jboolean result;

          if (!parseArgs(args, "o", &a0))
          {
            OBJ_CALL(result = self->object.equals(a0));
            Py_RETURN_BOOL(result);
          }

          return callSuper(PY_TYPE(TermQuery), (PyObject *) self, "equals", args, 2);
        }

        static PyObject *t_TermQuery_getTerm(t_TermQuery *self)
        {
          ::org::apache::lucene::index::Term result((jobject) NULL);
          OBJ_CALL(result = self->object.getTerm());
          return ::org::apache::lucene::index::t_Term::wrap_Object(result);
        }

        static PyObject *t_TermQuery_getTermStates(t_TermQuery *self)
        {
          ::org::apache::lucene::index::TermStates result((jobject) NULL);
          OBJ_CALL(result = self->object.getTermStates());
          return ::org::apache::lucene::index::t_TermStates::wrap_Object(result);
        }

        static PyObject *t_TermQuery_hashCode(t_TermQuery *self, PyObject *args)
        {
          jint result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.hashCode());
            return PyLong_FromLong((long) result);
          }

          return callSuper(PY_TYPE(TermQuery), (PyObject *) self, "hashCode", args, 2);
        }

        static PyObject *t_TermQuery_toString(t_TermQuery *self, PyObject *args)
        {
          ::java::lang::String a0((jobject) NULL);
          ::java::lang::String result((jobject) NULL);

          if (!parseArgs(args, "s", &a0))
          {
            OBJ_CALL(result = self->object.toString(a0));
            return j2p(result);
          }

          return callSuper(PY_TYPE(TermQuery), (PyObject *) self, "toString", args, 2);
        }

        static PyObject *t_TermQuery_visit(t_TermQuery *self, PyObject *args)
        {
          ::org::apache::lucene::search::QueryVisitor a0((jobject) NULL);

          if (!parseArgs(args, "k", ::org::apache::lucene::search::QueryVisitor::initializeClass, &a0))
          {
            OBJ_CALL(self->object.visit(a0));
            Py_RETURN_NONE;
          }

          return callSuper(PY_TYPE(TermQuery), (PyObject *) self, "visit", args, 2);
        }

        static PyObject *t_TermQuery_get__term(t_TermQuery *self, void *data)
        {
          ::org::apache::lucene::index::Term value((jobject) NULL);
          OBJ_CALL(value = self->object.getTerm());
          return ::org::apache::lucene::index::t_Term::wrap_Object(value);
        }

        static PyObject *t_TermQuery_get__termStates(t_TermQuery *self, void *data)
        {
          ::org::apache::lucene::index::TermStates value((jobject) NULL);
          OBJ_CALL(value = self->object.getTermStates());
          return ::org::apache::lucene::index::t_TermStates::wrap_Object(value);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/en/EnglishMinimalStemmer.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace en {

          ::java::lang::Class *EnglishMinimalStemmer::class$ = NULL;
          jmethodID *EnglishMinimalStemmer::mids$ = NULL;
          bool EnglishMinimalStemmer::live$ = false;

          jclass EnglishMinimalStemmer::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/en/EnglishMinimalStemmer");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_f2cc1bce94666404] = env->getMethodID(cls, "<init>", "()V");
              mids$[mid_stem_d4655f2a19359017] = env->getMethodID(cls, "stem", "([CI)I");

              class$ = new ::java::lang::Class(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          EnglishMinimalStemmer::EnglishMinimalStemmer() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_f2cc1bce94666404)) {}

          jint EnglishMinimalStemmer::stem(const JArray< jchar > & a0, jint a1) const
          {
            return env->callIntMethod(this$, mids$[mid_stem_d4655f2a19359017], a0.this$, a1);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace en {
          static PyObject *t_EnglishMinimalStemmer_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_EnglishMinimalStemmer_instance_(PyTypeObject *type, PyObject *arg);
          static int t_EnglishMinimalStemmer_init_(t_EnglishMinimalStemmer *self, PyObject *args, PyObject *kwds);
          static PyObject *t_EnglishMinimalStemmer_stem(t_EnglishMinimalStemmer *self, PyObject *args);

          static PyMethodDef t_EnglishMinimalStemmer__methods_[] = {
            DECLARE_METHOD(t_EnglishMinimalStemmer, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_EnglishMinimalStemmer, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_EnglishMinimalStemmer, stem, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          static PyType_Slot PY_TYPE_SLOTS(EnglishMinimalStemmer)[] = {
            { Py_tp_methods, t_EnglishMinimalStemmer__methods_ },
            { Py_tp_init, (void *) t_EnglishMinimalStemmer_init_ },
            { 0, NULL }
          };

          static PyType_Def *PY_TYPE_BASES(EnglishMinimalStemmer)[] = {
            &PY_TYPE_DEF(::java::lang::Object),
            NULL
          };

          DEFINE_TYPE(EnglishMinimalStemmer, t_EnglishMinimalStemmer, EnglishMinimalStemmer);

          void t_EnglishMinimalStemmer::install(PyObject *module)
          {
            installType(&PY_TYPE(EnglishMinimalStemmer), &PY_TYPE_DEF(EnglishMinimalStemmer), module, "EnglishMinimalStemmer", 0);
          }

          void t_EnglishMinimalStemmer::initialize(PyObject *module)
          {
            PyObject_SetAttrString((PyObject *) PY_TYPE(EnglishMinimalStemmer), "class_", make_descriptor(EnglishMinimalStemmer::initializeClass, 1));
            PyObject_SetAttrString((PyObject *) PY_TYPE(EnglishMinimalStemmer), "wrapfn_", make_descriptor(t_EnglishMinimalStemmer::wrap_jobject));
            PyObject_SetAttrString((PyObject *) PY_TYPE(EnglishMinimalStemmer), "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_EnglishMinimalStemmer_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, EnglishMinimalStemmer::initializeClass, 1)))
              return NULL;
            return t_EnglishMinimalStemmer::wrap_Object(EnglishMinimalStemmer(((t_EnglishMinimalStemmer *) arg)->object.this$));
          }
          static PyObject *t_EnglishMinimalStemmer_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, EnglishMinimalStemmer::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_EnglishMinimalStemmer_init_(t_EnglishMinimalStemmer *self, PyObject *args, PyObject *kwds)
          {
            EnglishMinimalStemmer object((jobject) NULL);

            INT_CALL(object = EnglishMinimalStemmer());
            self->object = object;

            return 0;
          }

          static PyObject *t_EnglishMinimalStemmer_stem(t_EnglishMinimalStemmer *self, PyObject *args)
          {
            JArray< jchar > a0((jobject) NULL);
            jint a1;
            jint result;

            if (!parseArgs(args, "[CI", &a0, &a1))
            {
              OBJ_CALL(result = self->object.stem(a0, a1));
              return PyLong_FromLong((long) result);
            }

            PyErr_SetArgsError((PyObject *) self, "stem", args);
            return NULL;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/collation/tokenattributes/CollatedTermAttributeImpl.h"
#include "org/apache/lucene/util/BytesRef.h"
#include "java/text/Collator.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace collation {
        namespace tokenattributes {

          ::java::lang::Class *CollatedTermAttributeImpl::class$ = NULL;
          jmethodID *CollatedTermAttributeImpl::mids$ = NULL;
          bool CollatedTermAttributeImpl::live$ = false;

          jclass CollatedTermAttributeImpl::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/collation/tokenattributes/CollatedTermAttributeImpl");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_5752a611d0e456db] = env->getMethodID(cls, "<init>", "(Ljava/text/Collator;)V");
              mids$[mid_getBytesRef_7af2ea2e37ce82b8] = env->getMethodID(cls, "getBytesRef", "()Lorg/apache/lucene/util/BytesRef;");

              class$ = new ::java::lang::Class(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          CollatedTermAttributeImpl::CollatedTermAttributeImpl(const ::java::text::Collator & a0) : ::org::apache::lucene::analysis::tokenattributes::CharTermAttributeImpl(env->newObject(initializeClass, &mids$, mid_init$_5752a611d0e456db, a0.this$)) {}

          ::org::apache::lucene::util::BytesRef CollatedTermAttributeImpl::getBytesRef() const
          {
            return ::org::apache::lucene::util::BytesRef(env->callObjectMethod(this$, mids$[mid_getBytesRef_7af2ea2e37ce82b8]));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace collation {
        namespace tokenattributes {
          static PyObject *t_CollatedTermAttributeImpl_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_CollatedTermAttributeImpl_instance_(PyTypeObject *type, PyObject *arg);
          static int t_CollatedTermAttributeImpl_init_(t_CollatedTermAttributeImpl *self, PyObject *args, PyObject *kwds);
          static PyObject *t_CollatedTermAttributeImpl_getBytesRef(t_CollatedTermAttributeImpl *self, PyObject *args);
          static PyObject *t_CollatedTermAttributeImpl_get__bytesRef(t_CollatedTermAttributeImpl *self, void *data);
          static PyGetSetDef t_CollatedTermAttributeImpl__fields_[] = {
            DECLARE_GET_FIELD(t_CollatedTermAttributeImpl, bytesRef),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_CollatedTermAttributeImpl__methods_[] = {
            DECLARE_METHOD(t_CollatedTermAttributeImpl, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_CollatedTermAttributeImpl, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_CollatedTermAttributeImpl, getBytesRef, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          static PyType_Slot PY_TYPE_SLOTS(CollatedTermAttributeImpl)[] = {
            { Py_tp_methods, t_CollatedTermAttributeImpl__methods_ },
            { Py_tp_init, (void *) t_CollatedTermAttributeImpl_init_ },
            { Py_tp_getset, t_CollatedTermAttributeImpl__fields_ },
            { 0, NULL }
          };

          static PyType_Def *PY_TYPE_BASES(CollatedTermAttributeImpl)[] = {
            &PY_TYPE_DEF(::org::apache::lucene::analysis::tokenattributes::CharTermAttributeImpl),
            NULL
          };

          DEFINE_TYPE(CollatedTermAttributeImpl, t_CollatedTermAttributeImpl, CollatedTermAttributeImpl);

          void t_CollatedTermAttributeImpl::install(PyObject *module)
          {
            installType(&PY_TYPE(CollatedTermAttributeImpl), &PY_TYPE_DEF(CollatedTermAttributeImpl), module, "CollatedTermAttributeImpl", 0);
          }

          void t_CollatedTermAttributeImpl::initialize(PyObject *module)
          {
            PyObject_SetAttrString((PyObject *) PY_TYPE(CollatedTermAttributeImpl), "class_", make_descriptor(CollatedTermAttributeImpl::initializeClass, 1));
            PyObject_SetAttrString((PyObject *) PY_TYPE(CollatedTermAttributeImpl), "wrapfn_", make_descriptor(t_CollatedTermAttributeImpl::wrap_jobject));
            PyObject_SetAttrString((PyObject *) PY_TYPE(CollatedTermAttributeImpl), "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_CollatedTermAttributeImpl_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, CollatedTermAttributeImpl::initializeClass, 1)))
              return NULL;
            return t_CollatedTermAttributeImpl::wrap_Object(CollatedTermAttributeImpl(((t_CollatedTermAttributeImpl *) arg)->object.this$));
          }
          static PyObject *t_CollatedTermAttributeImpl_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, CollatedTermAttributeImpl::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_CollatedTermAttributeImpl_init_(t_CollatedTermAttributeImpl *self, PyObject *args, PyObject *kwds)
          {
            ::java::text::Collator a0((jobject) NULL);
            CollatedTermAttributeImpl object((jobject) NULL);

            if (!parseArgs(args, "k", ::java::text::Collator::initializeClass, &a0))
            {
              INT_CALL(object = CollatedTermAttributeImpl(a0));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_CollatedTermAttributeImpl_getBytesRef(t_CollatedTermAttributeImpl *self, PyObject *args)
          {
            ::org::apache::lucene::util::BytesRef result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.getBytesRef());
              return ::org::apache::lucene::util::t_BytesRef::wrap_Object(result);
            }

            return callSuper(PY_TYPE(CollatedTermAttributeImpl), (PyObject *) self, "getBytesRef", args, 2);
          }

          static PyObject *t_CollatedTermAttributeImpl_get__bytesRef(t_CollatedTermAttributeImpl *self, void *data)
          {
            ::org::apache::lucene::util::BytesRef value((jobject) NULL);
            OBJ_CALL(value = self->object.getBytesRef());
            return ::org::apache::lucene::util::t_BytesRef::wrap_Object(value);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/codecs/lucene50/Lucene50CompoundFormat.h"
#include "org/apache/lucene/store/IOContext.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/store/Directory.h"
#include "org/apache/lucene/codecs/CompoundDirectory.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/index/SegmentInfo.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace codecs {
        namespace lucene50 {

          ::java::lang::Class *Lucene50CompoundFormat::class$ = NULL;
          jmethodID *Lucene50CompoundFormat::mids$ = NULL;
          bool Lucene50CompoundFormat::live$ = false;

          jclass Lucene50CompoundFormat::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/codecs/lucene50/Lucene50CompoundFormat");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_f2cc1bce94666404] = env->getMethodID(cls, "<init>", "()V");
              mids$[mid_getCompoundReader_8e5fdfa35a2f9c39] = env->getMethodID(cls, "getCompoundReader", "(Lorg/apache/lucene/store/Directory;Lorg/apache/lucene/index/SegmentInfo;Lorg/apache/lucene/store/IOContext;)Lorg/apache/lucene/codecs/CompoundDirectory;");
              mids$[mid_write_42bd8d9f441f9252] = env->getMethodID(cls, "write", "(Lorg/apache/lucene/store/Directory;Lorg/apache/lucene/index/SegmentInfo;Lorg/apache/lucene/store/IOContext;)V");

              class$ = new ::java::lang::Class(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          Lucene50CompoundFormat::Lucene50CompoundFormat() : ::org::apache::lucene::codecs::CompoundFormat(env->newObject(initializeClass, &mids$, mid_init$_f2cc1bce94666404)) {}

          ::org::apache::lucene::codecs::CompoundDirectory Lucene50CompoundFormat::getCompoundReader(const ::org::apache::lucene::store::Directory & a0, const ::org::apache::lucene::index::SegmentInfo & a1, const ::org::apache::lucene::store::IOContext & a2) const
          {
            return ::org::apache::lucene::codecs::CompoundDirectory(env->callObjectMethod(this$, mids$[mid_getCompoundReader_8e5fdfa35a2f9c39], a0.this$, a1.this$, a2.this$));
          }

          void Lucene50CompoundFormat::write(const ::org::apache::lucene::store::Directory & a0, const ::org::apache::lucene::index::SegmentInfo & a1, const ::org::apache::lucene::store::IOContext & a2) const
          {
            env->callVoidMethod(this$, mids$[mid_write_42bd8d9f441f9252], a0.this$, a1.this$, a2.this$);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace codecs {
        namespace lucene50 {
          static PyObject *t_Lucene50CompoundFormat_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_Lucene50CompoundFormat_instance_(PyTypeObject *type, PyObject *arg);
          static int t_Lucene50CompoundFormat_init_(t_Lucene50CompoundFormat *self, PyObject *args, PyObject *kwds);
          static PyObject *t_Lucene50CompoundFormat_getCompoundReader(t_Lucene50CompoundFormat *self, PyObject *args);
          static PyObject *t_Lucene50CompoundFormat_write(t_Lucene50CompoundFormat *self, PyObject *args);

          static PyMethodDef t_Lucene50CompoundFormat__methods_[] = {
            DECLARE_METHOD(t_Lucene50CompoundFormat, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_Lucene50CompoundFormat, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_Lucene50CompoundFormat, getCompoundReader, METH_VARARGS),
            DECLARE_METHOD(t_Lucene50CompoundFormat, write, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          static PyType_Slot PY_TYPE_SLOTS(Lucene50CompoundFormat)[] = {
            { Py_tp_methods, t_Lucene50CompoundFormat__methods_ },
            { Py_tp_init, (void *) t_Lucene50CompoundFormat_init_ },
            { 0, NULL }
          };

          static PyType_Def *PY_TYPE_BASES(Lucene50CompoundFormat)[] = {
            &PY_TYPE_DEF(::org::apache::lucene::codecs::CompoundFormat),
            NULL
          };

          DEFINE_TYPE(Lucene50CompoundFormat, t_Lucene50CompoundFormat, Lucene50CompoundFormat);

          void t_Lucene50CompoundFormat::install(PyObject *module)
          {
            installType(&PY_TYPE(Lucene50CompoundFormat), &PY_TYPE_DEF(Lucene50CompoundFormat), module, "Lucene50CompoundFormat", 0);
          }

          void t_Lucene50CompoundFormat::initialize(PyObject *module)
          {
            PyObject_SetAttrString((PyObject *) PY_TYPE(Lucene50CompoundFormat), "class_", make_descriptor(Lucene50CompoundFormat::initializeClass, 1));
            PyObject_SetAttrString((PyObject *) PY_TYPE(Lucene50CompoundFormat), "wrapfn_", make_descriptor(t_Lucene50CompoundFormat::wrap_jobject));
            PyObject_SetAttrString((PyObject *) PY_TYPE(Lucene50CompoundFormat), "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_Lucene50CompoundFormat_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, Lucene50CompoundFormat::initializeClass, 1)))
              return NULL;
            return t_Lucene50CompoundFormat::wrap_Object(Lucene50CompoundFormat(((t_Lucene50CompoundFormat *) arg)->object.this$));
          }
          static PyObject *t_Lucene50CompoundFormat_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, Lucene50CompoundFormat::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_Lucene50CompoundFormat_init_(t_Lucene50CompoundFormat *self, PyObject *args, PyObject *kwds)
          {
            Lucene50CompoundFormat object((jobject) NULL);

            INT_CALL(object = Lucene50CompoundFormat());
            self->object = object;

            return 0;
          }

          static PyObject *t_Lucene50CompoundFormat_getCompoundReader(t_Lucene50CompoundFormat *self, PyObject *args)
          {
            ::org::apache::lucene::store::Directory a0((jobject) NULL);
            ::org::apache::lucene::index::SegmentInfo a1((jobject) NULL);
            ::org::apache::lucene::store::IOContext a2((jobject) NULL);
            ::org::apache::lucene::codecs::CompoundDirectory result((jobject) NULL);

            if (!parseArgs(args, "kkk", ::org::apache::lucene::store::Directory::initializeClass, ::org::apache::lucene::index::SegmentInfo::initializeClass, ::org::apache::lucene::store::IOContext::initializeClass, &a0, &a1, &a2))
            {
              OBJ_CALL(result = self->object.getCompoundReader(a0, a1, a2));
              return ::org::apache::lucene::codecs::t_CompoundDirectory::wrap_Object(result);
            }

            return callSuper(PY_TYPE(Lucene50CompoundFormat), (PyObject *) self, "getCompoundReader", args, 2);
          }

          static PyObject *t_Lucene50CompoundFormat_write(t_Lucene50CompoundFormat *self, PyObject *args)
          {
            ::org::apache::lucene::store::Directory a0((jobject) NULL);
            ::org::apache::lucene::index::SegmentInfo a1((jobject) NULL);
            ::org::apache::lucene::store::IOContext a2((jobject) NULL);

            if (!parseArgs(args, "kkk", ::org::apache::lucene::store::Directory::initializeClass, ::org::apache::lucene::index::SegmentInfo::initializeClass, ::org::apache::lucene::store::IOContext::initializeClass, &a0, &a1, &a2))
            {
              OBJ_CALL(self->object.write(a0, a1, a2));
              Py_RETURN_NONE;
            }

            return callSuper(PY_TYPE(Lucene50CompoundFormat), (PyObject *) self, "write", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/codecs/lucene87/DeflateWithPresetDictCompressionMode.h"
#include "org/apache/lucene/codecs/compressing/Compressor.h"
#include "java/lang/String.h"
#include "org/apache/lucene/codecs/compressing/Decompressor.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace codecs {
        namespace lucene87 {

          ::java::lang::Class *DeflateWithPresetDictCompressionMode::class$ = NULL;
          jmethodID *DeflateWithPresetDictCompressionMode::mids$ = NULL;
          bool DeflateWithPresetDictCompressionMode::live$ = false;

          jclass DeflateWithPresetDictCompressionMode::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/codecs/lucene87/DeflateWithPresetDictCompressionMode");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_f2cc1bce94666404] = env->getMethodID(cls, "<init>", "()V");
              mids$[mid_newCompressor_d2c98bf6347b4a10] = env->getMethodID(cls, "newCompressor", "()Lorg/apache/lucene/codecs/compressing/Compressor;");
              mids$[mid_newDecompressor_1fbc4f71d5e2b599] = env->getMethodID(cls, "newDecompressor", "()Lorg/apache/lucene/codecs/compressing/Decompressor;");
              mids$[mid_toString_db9b55ba01e03e4b] = env->getMethodID(cls, "toString", "()Ljava/lang/String;");

              class$ = new ::java::lang::Class(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          DeflateWithPresetDictCompressionMode::DeflateWithPresetDictCompressionMode() : ::org::apache::lucene::codecs::compressing::CompressionMode(env->newObject(initializeClass, &mids$, mid_init$_f2cc1bce94666404)) {}

          ::org::apache::lucene::codecs::compressing::Compressor DeflateWithPresetDictCompressionMode::newCompressor() const
          {
            return ::org::apache::lucene::codecs::compressing::Compressor(env->callObjectMethod(this$, mids$[mid_newCompressor_d2c98bf6347b4a10]));
          }

          ::org::apache::lucene::codecs::compressing::Decompressor DeflateWithPresetDictCompressionMode::newDecompressor() const
          {
            return ::org::apache::lucene::codecs::compressing::Decompressor(env->callObjectMethod(this$, mids$[mid_newDecompressor_1fbc4f71d5e2b599]));
          }

          ::java::lang::String DeflateWithPresetDictCompressionMode::toString() const
          {
            return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_db9b55ba01e03e4b]));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace codecs {
        namespace lucene87 {
          static PyObject *t_DeflateWithPresetDictCompressionMode_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_DeflateWithPresetDictCompressionMode_instance_(PyTypeObject *type, PyObject *arg);
          static int t_DeflateWithPresetDictCompressionMode_init_(t_DeflateWithPresetDictCompressionMode *self, PyObject *args, PyObject *kwds);
          static PyObject *t_DeflateWithPresetDictCompressionMode_newCompressor(t_DeflateWithPresetDictCompressionMode *self, PyObject *args);
          static PyObject *t_DeflateWithPresetDictCompressionMode_newDecompressor(t_DeflateWithPresetDictCompressionMode *self, PyObject *args);
          static PyObject *t_DeflateWithPresetDictCompressionMode_toString(t_DeflateWithPresetDictCompressionMode *self, PyObject *args);

          static PyMethodDef t_DeflateWithPresetDictCompressionMode__methods_[] = {
            DECLARE_METHOD(t_DeflateWithPresetDictCompressionMode, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_DeflateWithPresetDictCompressionMode, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_DeflateWithPresetDictCompressionMode, newCompressor, METH_VARARGS),
            DECLARE_METHOD(t_DeflateWithPresetDictCompressionMode, newDecompressor, METH_VARARGS),
            DECLARE_METHOD(t_DeflateWithPresetDictCompressionMode, toString, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          static PyType_Slot PY_TYPE_SLOTS(DeflateWithPresetDictCompressionMode)[] = {
            { Py_tp_methods, t_DeflateWithPresetDictCompressionMode__methods_ },
            { Py_tp_init, (void *) t_DeflateWithPresetDictCompressionMode_init_ },
            { 0, NULL }
          };

          static PyType_Def *PY_TYPE_BASES(DeflateWithPresetDictCompressionMode)[] = {
            &PY_TYPE_DEF(::org::apache::lucene::codecs::compressing::CompressionMode),
            NULL
          };

          DEFINE_TYPE(DeflateWithPresetDictCompressionMode, t_DeflateWithPresetDictCompressionMode, DeflateWithPresetDictCompressionMode);

          void t_DeflateWithPresetDictCompressionMode::install(PyObject *module)
          {
            installType(&PY_TYPE(DeflateWithPresetDictCompressionMode), &PY_TYPE_DEF(DeflateWithPresetDictCompressionMode), module, "DeflateWithPresetDictCompressionMode", 0);
          }

          void t_DeflateWithPresetDictCompressionMode::initialize(PyObject *module)
          {
            PyObject_SetAttrString((PyObject *) PY_TYPE(DeflateWithPresetDictCompressionMode), "class_", make_descriptor(DeflateWithPresetDictCompressionMode::initializeClass, 1));
            PyObject_SetAttrString((PyObject *) PY_TYPE(DeflateWithPresetDictCompressionMode), "wrapfn_", make_descriptor(t_DeflateWithPresetDictCompressionMode::wrap_jobject));
            PyObject_SetAttrString((PyObject *) PY_TYPE(DeflateWithPresetDictCompressionMode), "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_DeflateWithPresetDictCompressionMode_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, DeflateWithPresetDictCompressionMode::initializeClass, 1)))
              return NULL;
            return t_DeflateWithPresetDictCompressionMode::wrap_Object(DeflateWithPresetDictCompressionMode(((t_DeflateWithPresetDictCompressionMode *) arg)->object.this$));
          }
          static PyObject *t_DeflateWithPresetDictCompressionMode_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, DeflateWithPresetDictCompressionMode::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_DeflateWithPresetDictCompressionMode_init_(t_DeflateWithPresetDictCompressionMode *self, PyObject *args, PyObject *kwds)
          {
            DeflateWithPresetDictCompressionMode object((jobject) NULL);

            INT_CALL(object = DeflateWithPresetDictCompressionMode());
            self->object = object;

            return 0;
          }

          static PyObject *t_DeflateWithPresetDictCompressionMode_newCompressor(t_DeflateWithPresetDictCompressionMode *self, PyObject *args)
          {
            ::org::apache::lucene::codecs::compressing::Compressor result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.newCompressor());
              return ::org::apache::lucene::codecs::compressing::t_Compressor::wrap_Object(result);
            }

            return callSuper(PY_TYPE(DeflateWithPresetDictCompressionMode), (PyObject *) self, "newCompressor", args, 2);
          }

          static PyObject *t_DeflateWithPresetDictCompressionMode_newDecompressor(t_DeflateWithPresetDictCompressionMode *self, PyObject *args)
          {
            ::org::apache::lucene::codecs::compressing::Decompressor result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.newDecompressor());
              return ::org::apache::lucene::codecs::compressing::t_Decompressor::wrap_Object(result);
            }

            return callSuper(PY_TYPE(DeflateWithPresetDictCompressionMode), (PyObject *) self, "newDecompressor", args, 2);
          }

          static PyObject *t_DeflateWithPresetDictCompressionMode_toString(t_DeflateWithPresetDictCompressionMode *self, PyObject *args)
          {
            ::java::lang::String result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.toString());
              return j2p(result);
            }

            return callSuper(PY_TYPE(DeflateWithPresetDictCompressionMode), (PyObject *) self, "toString", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queryparser/flexible/standard/processors/BoostQueryNodeProcessor.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace standard {
            namespace processors {

              ::java::lang::Class *BoostQueryNodeProcessor::class$ = NULL;
              jmethodID *BoostQueryNodeProcessor::mids$ = NULL;
              bool BoostQueryNodeProcessor::live$ = false;

              jclass BoostQueryNodeProcessor::initializeClass(bool getOnly)
              {
                if (getOnly)
                  return (jclass) (live$ ? class$->this$ : NULL);
                if (class$ == NULL)
                {
                  jclass cls = (jclass) env->findClass("org/apache/lucene/queryparser/flexible/standard/processors/BoostQueryNodeProcessor");

                  mids$ = new jmethodID[max_mid];
                  mids$[mid_init$_f2cc1bce94666404] = env->getMethodID(cls, "<init>", "()V");
                  mids$[mid_preProcessNode_9b07be8595532de7] = env->getMethodID(cls, "preProcessNode", "(Lorg/apache/lucene/queryparser/flexible/core/nodes/QueryNode;)Lorg/apache/lucene/queryparser/flexible/core/nodes/QueryNode;");
                  mids$[mid_postProcessNode_9b07be8595532de7] = env->getMethodID(cls, "postProcessNode", "(Lorg/apache/lucene/queryparser/flexible/core/nodes/QueryNode;)Lorg/apache/lucene/queryparser/flexible/core/nodes/QueryNode;");
                  mids$[mid_setChildrenOrder_e420eeaadf0bcd20] = env->getMethodID(cls, "setChildrenOrder", "(Ljava/util/List;)Ljava/util/List;");

                  class$ = new ::java::lang::Class(cls);
                  live$ = true;
                }
                return (jclass) class$->this$;
              }

              BoostQueryNodeProcessor::BoostQueryNodeProcessor() : ::org::apache::lucene::queryparser::flexible::core::processors::QueryNodeProcessorImpl(env->newObject(initializeClass, &mids$, mid_init$_f2cc1bce94666404)) {}
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace standard {
            namespace processors {
              static PyObject *t_BoostQueryNodeProcessor_cast_(PyTypeObject *type, PyObject *arg);
              static PyObject *t_BoostQueryNodeProcessor_instance_(PyTypeObject *type, PyObject *arg);
              static int t_BoostQueryNodeProcessor_init_(t_BoostQueryNodeProcessor *self, PyObject *args, PyObject *kwds);

              static PyMethodDef t_BoostQueryNodeProcessor__methods_[] = {
                DECLARE_METHOD(t_BoostQueryNodeProcessor, cast_, METH_O | METH_CLASS),
                DECLARE_METHOD(t_BoostQueryNodeProcessor, instance_, METH_O | METH_CLASS),
                { NULL, NULL, 0, NULL }
              };

              static PyType_Slot PY_TYPE_SLOTS(BoostQueryNodeProcessor)[] = {
                { Py_tp_methods, t_BoostQueryNodeProcessor__methods_ },
                { Py_tp_init, (void *) t_BoostQueryNodeProcessor_init_ },
                { 0, NULL }
              };

              static PyType_Def *PY_TYPE_BASES(BoostQueryNodeProcessor)[] = {
                &PY_TYPE_DEF(::org::apache::lucene::queryparser::flexible::core::processors::QueryNodeProcessorImpl),
                NULL
              };

              DEFINE_TYPE(BoostQueryNodeProcessor, t_BoostQueryNodeProcessor, BoostQueryNodeProcessor);

              void t_BoostQueryNodeProcessor::install(PyObject *module)
              {
                installType(&PY_TYPE(BoostQueryNodeProcessor), &PY_TYPE_DEF(BoostQueryNodeProcessor), module, "BoostQueryNodeProcessor", 0);
              }

              void t_BoostQueryNodeProcessor::initialize(PyObject *module)
              {
                PyObject_SetAttrString((PyObject *) PY_TYPE(BoostQueryNodeProcessor), "class_", make_descriptor(BoostQueryNodeProcessor::initializeClass, 1));
                PyObject_SetAttrString((PyObject *) PY_TYPE(BoostQueryNodeProcessor), "wrapfn_", make_descriptor(t_BoostQueryNodeProcessor::wrap_jobject));
                PyObject_SetAttrString((PyObject *) PY_TYPE(BoostQueryNodeProcessor), "boxfn_", make_descriptor(boxObject));
              }

              static PyObject *t_BoostQueryNodeProcessor_cast_(PyTypeObject *type, PyObject *arg)
              {
                if (!(arg = castCheck(arg, BoostQueryNodeProcessor::initializeClass, 1)))
                  return NULL;
                return t_BoostQueryNodeProcessor::wrap_Object(BoostQueryNodeProcessor(((t_BoostQueryNodeProcessor *) arg)->object.this$));
              }
              static PyObject *t_BoostQueryNodeProcessor_instance_(PyTypeObject *type, PyObject *arg)
              {
                if (!castCheck(arg, BoostQueryNodeProcessor::initializeClass, 0))
                  Py_RETURN_FALSE;
                Py_RETURN_TRUE;
              }

              static int t_BoostQueryNodeProcessor_init_(t_BoostQueryNodeProcessor *self, PyObject *args, PyObject *kwds)
              {
                BoostQueryNodeProcessor object((jobject) NULL);

                INT_CALL(object = BoostQueryNodeProcessor());
                self->object = object;

                return 0;
              }
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/facet/FacetResult.h"
#include "java/lang/Number.h"
#include "org/apache/lucene/facet/LabelAndValue.h"
#include "java/lang/Class.h"
#include "java/lang/String.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace facet {

        ::java::lang::Class *FacetResult::class$ = NULL;
        jmethodID *FacetResult::mids$ = NULL;
        jfieldID *FacetResult::fids$ = NULL;
        bool FacetResult::live$ = false;

        jclass FacetResult::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/facet/FacetResult");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_3989d0f2a313dd34] = env->getMethodID(cls, "<init>", "(Ljava/lang/String;[Ljava/lang/String;Ljava/lang/Number;[Lorg/apache/lucene/facet/LabelAndValue;I)V");
            mids$[mid_equals_8b72f2dcdde6fd1d] = env->getMethodID(cls, "equals", "(Ljava/lang/Object;)Z");
            mids$[mid_hashCode_9972fcc56b44e79d] = env->getMethodID(cls, "hashCode", "()I");
            mids$[mid_toString_db9b55ba01e03e4b] = env->getMethodID(cls, "toString", "()Ljava/lang/String;");

            fids$ = new jfieldID[max_fid];
            fids$[fid_childCount] = env->getFieldID(cls, "childCount", "I");
            fids$[fid_dim] = env->getFieldID(cls, "dim", "Ljava/lang/String;");
            fids$[fid_labelValues] = env->getFieldID(cls, "labelValues", "[Lorg/apache/lucene/facet/LabelAndValue;");
            fids$[fid_path] = env->getFieldID(cls, "path", "[Ljava/lang/String;");
            fids$[fid_value] = env->getFieldID(cls, "value", "Ljava/lang/Number;");

            class$ = new ::java::lang::Class(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        FacetResult::FacetResult(const ::java::lang::String & a0, const JArray< ::java::lang::String > & a1, const ::java::lang::Number & a2, const JArray< ::org::apache::lucene::facet::LabelAndValue > & a3, jint a4) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_3989d0f2a313dd34, a0.this$, a1.this$, a2.this$, a3.this$, a4)) {}

        jboolean FacetResult::equals(const ::java::lang::Object & a0) const
        {
          return env->callBooleanMethod(this$, mids$[mid_equals_8b72f2dcdde6fd1d], a0.this$);
        }

        jint FacetResult::hashCode() const
        {
          return env->callIntMethod(this$, mids$[mid_hashCode_9972fcc56b44e79d]);
        }

        ::java::lang::String FacetResult::toString() const
        {
          return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_db9b55ba01e03e4b]));
        }

        jint FacetResult::_get_childCount() const
        {
          return env->getIntField(this$, fids$[fid_childCount]);
        }

        ::java::lang::String FacetResult::_get_dim() const
        {
          return ::java::lang::String(env->getObjectField(this$, fids$[fid_dim]));
        }

        JArray< ::org::apache::lucene::facet::LabelAndValue > FacetResult::_get_labelValues() const
        {
          return JArray< ::org::apache::lucene::facet::LabelAndValue >(env->getObjectField(this$, fids$[fid_labelValues]));
        }

        JArray< ::java::lang::String > FacetResult::_get_path() const
        {
          return JArray< ::java::lang::String >(env->getObjectField(this$, fids$[fid_path]));
        }

        ::java::lang::Number FacetResult::_get_value() const
        {
          return ::java::lang::Number(env->getObjectField(this$, fids$[fid_value]));
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace facet {
        static PyObject *t_FacetResult_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_FacetResult_instance_(PyTypeObject *type, PyObject *arg);
        static int t_FacetResult_init_(t_FacetResult *self, PyObject *args, PyObject *kwds);
        static PyObject *t_FacetResult_equals(t_FacetResult *self, PyObject *args);
        static PyObject *t_FacetResult_hashCode(t_FacetResult *self, PyObject *args);
        static PyObject *t_FacetResult_toString(t_FacetResult *self, PyObject *args);
        static PyObject *t_FacetResult_get__childCount(t_FacetResult *self, void *data);
        static PyObject *t_FacetResult_get__dim(t_FacetResult *self, void *data);
        static PyObject *t_FacetResult_get__labelValues(t_FacetResult *self, void *data);
        static PyObject *t_FacetResult_get__path(t_FacetResult *self, void *data);
        static PyObject *t_FacetResult_get__value(t_FacetResult *self, void *data);

        static PyGetSetDef t_FacetResult__fields_[] = {
          DECLARE_GET_FIELD(t_FacetResult, childCount),
          DECLARE_GET_FIELD(t_FacetResult, dim),
          DECLARE_GET_FIELD(t_FacetResult, labelValues),
          DECLARE_GET_FIELD(t_FacetResult, path),
          DECLARE_GET_FIELD(t_FacetResult, value),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_FacetResult__methods_[] = {
          DECLARE_METHOD(t_FacetResult, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_FacetResult, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_FacetResult, equals, METH_VARARGS),
          DECLARE_METHOD(t_FacetResult, hashCode, METH_VARARGS),
          DECLARE_METHOD(t_FacetResult, toString, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        static PyType_Slot PY_TYPE_SLOTS(FacetResult)[] = {
          { Py_tp_methods, t_FacetResult__methods_ },
          { Py_tp_init, (void *) t_FacetResult_init_ },
          { Py_tp_getset, t_FacetResult__fields_ },
          { 0, NULL }
        };

        static PyType_Def *PY_TYPE_BASES(FacetResult)[] = {
          &PY_TYPE_DEF(::java::lang::Object),
          NULL
        };

        DEFINE_TYPE(FacetResult, t_FacetResult, FacetResult);

        void t_FacetResult::install(PyObject *module)
        {
          installType(&PY_TYPE(FacetResult), &PY_TYPE_DEF(FacetResult), module, "FacetResult", 0);
        }

        void t_FacetResult::initialize(PyObject *module)
        {
          PyObject_SetAttrString((PyObject *) PY_TYPE(FacetResult), "class_", make_descriptor(FacetResult::initializeClass, 1));
          PyObject_SetAttrString((PyObject *) PY_TYPE(FacetResult), "wrapfn_", make_descriptor(t_FacetResult::wrap_jobject));
          PyObject_SetAttrString((PyObject *) PY_TYPE(FacetResult), "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_FacetResult_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, FacetResult::initializeClass, 1)))
            return NULL;
          return t_FacetResult::wrap_Object(FacetResult(((t_FacetResult *) arg)->object.this$));
        }
        static PyObject *t_FacetResult_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, FacetResult::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_FacetResult_init_(t_FacetResult *self, PyObject *args, PyObject *kwds)
        {
          ::java::lang::String a0((jobject) NULL);
          JArray< ::java::lang::String > a1((jobject) NULL);
          ::java::lang::Number a2((jobject) NULL);
          JArray< ::org::apache::lucene::facet::LabelAndValue > a3((jobject) NULL);
          jint a4;
          FacetResult object((jobject) NULL);

          if (!parseArgs(args, "s[sO[kI", ::java::lang::PY_TYPE(Number), ::org::apache::lucene::facet::LabelAndValue::initializeClass, &a0, &a1, &a2, &a3, &a4))
          {
            INT_CALL(object = FacetResult(a0, a1, a2, a3, a4));
            self->object = object;
          }
          else
          {
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }

        static PyObject *t_FacetResult_equals(t_FacetResult *self, PyObject *args)
        {
          ::java::lang::Object a0((jobject) NULL);
          jboolean result;

          if (!parseArgs(args, "o", &a0))
          {
            OBJ_CALL(result = self->object.equals(a0));
            Py_RETURN_BOOL(result);
          }

          return callSuper(PY_TYPE(FacetResult), (PyObject *) self, "equals", args, 2);
        }

        static PyObject *t_FacetResult_hashCode(t_FacetResult *self, PyObject *args)
        {
          jint result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.hashCode());
            return PyLong_FromLong((long) result);
          }

          return callSuper(PY_TYPE(FacetResult), (PyObject *) self, "hashCode", args, 2);
        }

        static PyObject *t_FacetResult_toString(t_FacetResult *self, PyObject *args)
        {
          ::java::lang::String result((jobject) NULL);

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.toString());
            return j2p(result);
          }

          return callSuper(PY_TYPE(FacetResult), (PyObject *) self, "toString", args, 2);
        }

        static PyObject *t_FacetResult_get__childCount(t_FacetResult *self, void *data)
        {
          jint value;
          OBJ_CALL(value = self->object._get_childCount());
          return PyLong_FromLong((long) value);
        }

        static PyObject *t_FacetResult_get__dim(t_FacetResult *self, void *data)
        {
          ::java::lang::String value((jobject) NULL);
          OBJ_CALL(value = self->object._get_dim());
          return j2p(value);
        }

        static PyObject *t_FacetResult_get__labelValues(t_FacetResult *self, void *data)
        {
          JArray< ::org::apache::lucene::facet::LabelAndValue > value((jobject) NULL);
          OBJ_CALL(value = self->object._get_labelValues());
          return JArray<jobject>(value.this$).wrap(::org::apache::lucene::facet::t_LabelAndValue::wrap_jobject);
        }

        static PyObject *t_FacetResult_get__path(t_FacetResult *self, void *data)
        {
          JArray< ::java::lang::String > value((jobject) NULL);
          OBJ_CALL(value = self->object._get_path());
          return JArray<jstring>(value.this$).wrap();
        }

        static PyObject *t_FacetResult_get__value(t_FacetResult *self, void *data)
        {
          ::java::lang::Number value((jobject) NULL);
          OBJ_CALL(value = self->object._get_value());
          return ::java::lang::t_Number::wrap_Object(value);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/facet/FacetField.h"
#include "java/lang/String.h"
#include "org/apache/lucene/document/FieldType.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace facet {

        ::java::lang::Class *FacetField::class$ = NULL;
        jmethodID *FacetField::mids$ = NULL;
        jfieldID *FacetField::fids$ = NULL;
        bool FacetField::live$ = false;
        ::org::apache::lucene::document::FieldType *FacetField::TYPE = NULL;

        jclass FacetField::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/facet/FacetField");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_e15507bf45c25446] = env->getMethodID(cls, "<init>", "(Ljava/lang/String;[Ljava/lang/String;)V");
            mids$[mid_toString_db9b55ba01e03e4b] = env->getMethodID(cls, "toString", "()Ljava/lang/String;");
            mids$[mid_verifyLabel_9fd2eb66a64e6f0f] = env->getStaticMethodID(cls, "verifyLabel", "(Ljava/lang/String;)V");

            fids$ = new jfieldID[max_fid];
            fids$[fid_dim] = env->getFieldID(cls, "dim", "Ljava/lang/String;");
            fids$[fid_path] = env->getFieldID(cls, "path", "[Ljava/lang/String;");

            class$ = new ::java::lang::Class(cls);
            cls = (jclass) class$->this$;

            TYPE = new ::org::apache::lucene::document::FieldType(env->getStaticObjectField(cls, "TYPE", "Lorg/apache/lucene/document/FieldType;"));
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        FacetField::FacetField(const ::java::lang::String & a0, const JArray< ::java::lang::String > & a1) : ::org::apache::lucene::document::Field(env->newObject(initializeClass, &mids$, mid_init$_e15507bf45c25446, a0.this$, a1.this$)) {}

        ::java::lang::String FacetField::toString() const
        {
          return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_db9b55ba01e03e4b]));
        }

        void FacetField::verifyLabel(const ::java::lang::String & a0)
        {
          jclass cls = env->getClass(initializeClass);
          env->callStaticVoidMethod(cls, mids$[mid_verifyLabel_9fd2eb66a64e6f0f], a0.this$);
        }

        ::java::lang::String FacetField::_get_dim() const
        {
          return ::java::lang::String(env->getObjectField(this$, fids$[fid_dim]));
        }

        JArray< ::java::lang::String > FacetField::_get_path() const
        {
          return JArray< ::java::lang::String >(env->getObjectField(this$, fids$[fid_path]));
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace facet {
        static PyObject *t_FacetField_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_FacetField_instance_(PyTypeObject *type, PyObject *arg);
        static int t_FacetField_init_(t_FacetField *self, PyObject *args, PyObject *kwds);
        static PyObject *t_FacetField_toString(t_FacetField *self, PyObject *args);
        static PyObject *t_FacetField_verifyLabel(PyTypeObject *type, PyObject *arg);
        static PyObject *t_FacetField_get__dim(t_FacetField *self, void *data);
        static PyObject *t_FacetField_get__path(t_FacetField *self, void *data);

        static PyGetSetDef t_FacetField__fields_[] = {
          DECLARE_GET_FIELD(t_FacetField, dim),
          DECLARE_GET_FIELD(t_FacetField, path),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_FacetField__methods_[] = {
          DECLARE_METHOD(t_FacetField, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_FacetField, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_FacetField, toString, METH_VARARGS),
          DECLARE_METHOD(t_FacetField, verifyLabel, METH_O | METH_CLASS),
          { NULL, NULL, 0, NULL }
        };

        static PyType_Slot PY_TYPE_SLOTS(FacetField)[] = {
          { Py_tp_methods, t_FacetField__methods_ },
          { Py_tp_init, (void *) t_FacetField_init_ },
          { Py_tp_getset, t_FacetField__fields_ },
          { 0, NULL }
        };

        static PyType_Def *PY_TYPE_BASES(FacetField)[] = {
          &PY_TYPE_DEF(::org::apache::lucene::document::Field),
          NULL
        };

        DEFINE_TYPE(FacetField, t_FacetField, FacetField);

        void t_FacetField::install(PyObject *module)
        {
          installType(&PY_TYPE(FacetField), &PY_TYPE_DEF(FacetField), module, "FacetField", 0);
        }

        void t_FacetField::initialize(PyObject *module)
        {
          PyObject_SetAttrString((PyObject *) PY_TYPE(FacetField), "class_", make_descriptor(FacetField::initializeClass, 1));
          PyObject_SetAttrString((PyObject *) PY_TYPE(FacetField), "wrapfn_", make_descriptor(t_FacetField::wrap_jobject));
          PyObject_SetAttrString((PyObject *) PY_TYPE(FacetField), "boxfn_", make_descriptor(boxObject));
          env->getClass(FacetField::initializeClass);
          PyObject_SetAttrString((PyObject *) PY_TYPE(FacetField), "TYPE", make_descriptor(::org::apache::lucene::document::t_FieldType::wrap_Object(*FacetField::TYPE)));
        }

        static PyObject *t_FacetField_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, FacetField::initializeClass, 1)))
            return NULL;
          return t_FacetField::wrap_Object(FacetField(((t_FacetField *) arg)->object.this$));
        }
        static PyObject *t_FacetField_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, FacetField::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_FacetField_init_(t_FacetField *self, PyObject *args, PyObject *kwds)
        {
          ::java::lang::String a0((jobject) NULL);
          JArray< ::java::lang::String > a1((jobject) NULL);
          FacetField object((jobject) NULL);

          if (!parseArgs(args, "s[s", &a0, &a1))
          {
            INT_CALL(object = FacetField(a0, a1));
            self->object = object;
          }
          else
          {
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }

        static PyObject *t_FacetField_toString(t_FacetField *self, PyObject *args)
        {
          ::java::lang::String result((jobject) NULL);

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.toString());
            return j2p(result);
          }

          return callSuper(PY_TYPE(FacetField), (PyObject *) self, "toString", args, 2);
        }

        static PyObject *t_FacetField_verifyLabel(PyTypeObject *type, PyObject *arg)
        {
          ::java::lang::String a0((jobject) NULL);

          if (!parseArg(arg, "s", &a0))
          {
            OBJ_CALL(::org::apache::lucene::facet::FacetField::verifyLabel(a0));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError(type, "verifyLabel", arg);
          return NULL;
        }

        static PyObject *t_FacetField_get__dim(t_FacetField *self, void *data)
        {
          ::java::lang::String value((jobject) NULL);
          OBJ_CALL(value = self->object._get_dim());
          return j2p(value);
        }

        static PyObject *t_FacetField_get__path(t_FacetField *self, void *data)
        {
          JArray< ::java::lang::String > value((jobject) NULL);
          OBJ_CALL(value = self->object._get_path());
          return JArray<jstring>(value.this$).wrap();
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/expressions/js/JavascriptParser$BwandContext.h"
#include "java/lang/Class.h"
#include "java/lang/Object.h"
#include "java/util/List.h"
#include "org/antlr/v4/runtime/Token.h"
#include "org/antlr/v4/runtime/atn/ParserATNSimulator.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace expressions {
        namespace js {

          ::java::lang::Class *JavascriptParser$BwandContext::class$ = NULL;
          jmethodID *JavascriptParser$BwandContext::mids$ = NULL;
          bool JavascriptParser$BwandContext::live$ = false;

          jclass JavascriptParser$BwandContext::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/expressions/js/JavascriptParser$BwandContext");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_5b630188893587b5] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/expressions/js/JavascriptParser$ExpressionContext;)V");
              mids$[mid_expression_49ec78390f08338a] = env->getMethodID(cls, "expression", "()Ljava/util/List;");
              mids$[mid_expression_a4fb3fdc55d1c64a] = env->getMethodID(cls, "expression", "(I)Lorg/apache/lucene/expressions/js/JavascriptParser$ExpressionContext;");

              class$ = new ::java::lang::Class(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          JavascriptParser$BwandContext::JavascriptParser$BwandContext(const ::org::apache::lucene::expressions::js::JavascriptParser$ExpressionContext & a0) : ::org::apache::lucene::expressions::js::JavascriptParser$ExpressionContext(env->newObject(initializeClass, &mids$, mid_init$_5b630188893587b5, a0.this$)) {}

          ::java::util::List JavascriptParser$BwandContext::expression() const
          {
            return ::java::util::List(env->callObjectMethod(this$, mids$[mid_expression_49ec78390f08338a]));
          }

          ::org::apache::lucene::expressions::js::JavascriptParser$ExpressionContext JavascriptParser$BwandContext::expression(jint a0) const
          {
            return ::org::apache::lucene::expressions::js::JavascriptParser$ExpressionContext(env->callObjectMethod(this$, mids$[mid_expression_a4fb3fdc55d1c64a], a0));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace expressions {
        namespace js {
          static PyObject *t_JavascriptParser$BwandContext_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_JavascriptParser$BwandContext_instance_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_JavascriptParser$BwandContext_of_(t_JavascriptParser$BwandContext *self, PyObject *args);
          static int t_JavascriptParser$BwandContext_init_(t_JavascriptParser$BwandContext *self, PyObject *args, PyObject *kwds);
          static PyObject *t_JavascriptParser$BwandContext_expression(t_JavascriptParser$BwandContext *self, PyObject *args);
          static PyObject *t_JavascriptParser$BwandContext_get__parameters_(t_JavascriptParser$BwandContext *self, void *data);
          static PyGetSetDef t_JavascriptParser$BwandContext__fields_[] = {
            DECLARE_GET_FIELD(t_JavascriptParser$BwandContext, parameters_),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_JavascriptParser$BwandContext__methods_[] = {
            DECLARE_METHOD(t_JavascriptParser$BwandContext, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_JavascriptParser$BwandContext, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_JavascriptParser$BwandContext, of_, METH_VARARGS),
            DECLARE_METHOD(t_JavascriptParser$BwandContext, expression, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          static PyType_Slot PY_TYPE_SLOTS(JavascriptParser$BwandContext)[] = {
            { Py_tp_methods, t_JavascriptParser$BwandContext__methods_ },
            { Py_tp_init, (void *) t_JavascriptParser$BwandContext_init_ },
            { Py_tp_getset, t_JavascriptParser$BwandContext__fields_ },
            { 0, NULL }
          };

          static PyType_Def *PY_TYPE_BASES(JavascriptParser$BwandContext)[] = {
            &PY_TYPE_DEF(::org::apache::lucene::expressions::js::JavascriptParser$ExpressionContext),
            NULL
          };

          DEFINE_TYPE(JavascriptParser$BwandContext, t_JavascriptParser$BwandContext, JavascriptParser$BwandContext);
          PyObject *t_JavascriptParser$BwandContext::wrap_Object(const JavascriptParser$BwandContext& object, PyTypeObject *p0, PyTypeObject *p1)
          {
            PyObject *obj = t_JavascriptParser$BwandContext::wrap_Object(object);
            if (obj != NULL && obj != Py_None)
            {
              t_JavascriptParser$BwandContext *self = (t_JavascriptParser$BwandContext *) obj;
              self->parameters[0] = p0;
              self->parameters[1] = p1;
            }
            return obj;
          }

          PyObject *t_JavascriptParser$BwandContext::wrap_jobject(const jobject& object, PyTypeObject *p0, PyTypeObject *p1)
          {
            PyObject *obj = t_JavascriptParser$BwandContext::wrap_jobject(object);
            if (obj != NULL && obj != Py_None)
            {
              t_JavascriptParser$BwandContext *self = (t_JavascriptParser$BwandContext *) obj;
              self->parameters[0] = p0;
              self->parameters[1] = p1;
            }
            return obj;
          }

          void t_JavascriptParser$BwandContext::install(PyObject *module)
          {
            installType(&PY_TYPE(JavascriptParser$BwandContext), &PY_TYPE_DEF(JavascriptParser$BwandContext), module, "JavascriptParser$BwandContext", 0);
          }

          void t_JavascriptParser$BwandContext::initialize(PyObject *module)
          {
            PyObject_SetAttrString((PyObject *) PY_TYPE(JavascriptParser$BwandContext), "class_", make_descriptor(JavascriptParser$BwandContext::initializeClass, 1));
            PyObject_SetAttrString((PyObject *) PY_TYPE(JavascriptParser$BwandContext), "wrapfn_", make_descriptor(t_JavascriptParser$BwandContext::wrap_jobject));
            PyObject_SetAttrString((PyObject *) PY_TYPE(JavascriptParser$BwandContext), "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_JavascriptParser$BwandContext_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, JavascriptParser$BwandContext::initializeClass, 1)))
              return NULL;
            return t_JavascriptParser$BwandContext::wrap_Object(JavascriptParser$BwandContext(((t_JavascriptParser$BwandContext *) arg)->object.this$));
          }
          static PyObject *t_JavascriptParser$BwandContext_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, JavascriptParser$BwandContext::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static PyObject *t_JavascriptParser$BwandContext_of_(t_JavascriptParser$BwandContext *self, PyObject *args)
          {
            if (!parseArg(args, "T", 2, &(self->parameters)))
              Py_RETURN_SELF;
            return PyErr_SetArgsError((PyObject *) self, "of_", args);
          }

          static int t_JavascriptParser$BwandContext_init_(t_JavascriptParser$BwandContext *self, PyObject *args, PyObject *kwds)
          {
            ::org::apache::lucene::expressions::js::JavascriptParser$ExpressionContext a0((jobject) NULL);
            PyTypeObject **p0;
            JavascriptParser$BwandContext object((jobject) NULL);

            if (!parseArgs(args, "K", ::org::apache::lucene::expressions::js::JavascriptParser$ExpressionContext::initializeClass, &a0, &p0, ::org::apache::lucene::expressions::js::t_JavascriptParser$ExpressionContext::parameters_))
            {
              INT_CALL(object = JavascriptParser$BwandContext(a0));
              self->object = object;
              self->parameters[0] = ::org::antlr::v4::runtime::PY_TYPE(Token);
              self->parameters[1] = ::org::antlr::v4::runtime::atn::PY_TYPE(ParserATNSimulator);
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_JavascriptParser$BwandContext_expression(t_JavascriptParser$BwandContext *self, PyObject *args)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 0:
              {
                ::java::util::List result((jobject) NULL);
                OBJ_CALL(result = self->object.expression());
                return ::java::util::t_List::wrap_Object(result, ::org::apache::lucene::expressions::js::PY_TYPE(JavascriptParser$ExpressionContext));
              }
              break;
             case 1:
              {
                jint a0;
                ::org::apache::lucene::expressions::js::JavascriptParser$ExpressionContext result((jobject) NULL);

                if (!parseArgs(args, "I", &a0))
                {
                  OBJ_CALL(result = self->object.expression(a0));
                  return ::org::apache::lucene::expressions::js::t_JavascriptParser$ExpressionContext::wrap_Object(result);
                }
              }
            }

            PyErr_SetArgsError((PyObject *) self, "expression", args);
            return NULL;
          }
          static PyObject *t_JavascriptParser$BwandContext_get__parameters_(t_JavascriptParser$BwandContext *self, void *data)
          {
            return typeParameters(self->parameters, sizeof(self->parameters));
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/spatial3d/geom/GeoBaseCompositeMembershipShape.h"
#include "org/apache/lucene/spatial3d/geom/DistanceStyle.h"
#include "org/apache/lucene/spatial3d/geom/GeoMembershipShape.h"
#include "org/apache/lucene/spatial3d/geom/GeoPoint.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace spatial3d {
        namespace geom {

          ::java::lang::Class *GeoBaseCompositeMembershipShape::class$ = NULL;
          jmethodID *GeoBaseCompositeMembershipShape::mids$ = NULL;
          bool GeoBaseCompositeMembershipShape::live$ = false;

          jclass GeoBaseCompositeMembershipShape::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/spatial3d/geom/GeoBaseCompositeMembershipShape");

              mids$ = new jmethodID[max_mid];
              mids$[mid_computeOutsideDistance_d330d2576549fa67] = env->getMethodID(cls, "computeOutsideDistance", "(Lorg/apache/lucene/spatial3d/geom/DistanceStyle;Lorg/apache/lucene/spatial3d/geom/GeoPoint;)D");
              mids$[mid_computeOutsideDistance_2b407c8141eb9589] = env->getMethodID(cls, "computeOutsideDistance", "(Lorg/apache/lucene/spatial3d/geom/DistanceStyle;DDD)D");

              class$ = new ::java::lang::Class(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          jdouble GeoBaseCompositeMembershipShape::computeOutsideDistance(const ::org::apache::lucene::spatial3d::geom::DistanceStyle & a0, const ::org::apache::lucene::spatial3d::geom::GeoPoint & a1) const
          {
            return env->callDoubleMethod(this$, mids$[mid_computeOutsideDistance_d330d2576549fa67], a0.this$, a1.this$);
          }

          jdouble GeoBaseCompositeMembershipShape::computeOutsideDistance(const ::org::apache::lucene::spatial3d::geom::DistanceStyle & a0, jdouble a1, jdouble a2, jdouble a3) const
          {
            return env->callDoubleMethod(this$, mids$[mid_computeOutsideDistance_2b407c8141eb9589], a0.this$, a1, a2, a3);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace spatial3d {
        namespace geom {
          static PyObject *t_GeoBaseCompositeMembershipShape_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_GeoBaseCompositeMembershipShape_instance_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_GeoBaseCompositeMembershipShape_of_(t_GeoBaseCompositeMembershipShape *self, PyObject *args);
          static PyObject *t_GeoBaseCompositeMembershipShape_computeOutsideDistance(t_GeoBaseCompositeMembershipShape *self, PyObject *args);
          static PyObject *t_GeoBaseCompositeMembershipShape_get__parameters_(t_GeoBaseCompositeMembershipShape *self, void *data);
          static PyGetSetDef t_GeoBaseCompositeMembershipShape__fields_[] = {
            DECLARE_GET_FIELD(t_GeoBaseCompositeMembershipShape, parameters_),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_GeoBaseCompositeMembershipShape__methods_[] = {
            DECLARE_METHOD(t_GeoBaseCompositeMembershipShape, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_GeoBaseCompositeMembershipShape, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_GeoBaseCompositeMembershipShape, of_, METH_VARARGS),
            DECLARE_METHOD(t_GeoBaseCompositeMembershipShape, computeOutsideDistance, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          static PyType_Slot PY_TYPE_SLOTS(GeoBaseCompositeMembershipShape)[] = {
            { Py_tp_methods, t_GeoBaseCompositeMembershipShape__methods_ },
            { Py_tp_init, (void *) abstract_init },
            { Py_tp_getset, t_GeoBaseCompositeMembershipShape__fields_ },
            { 0, NULL }
          };

          static PyType_Def *PY_TYPE_BASES(GeoBaseCompositeMembershipShape)[] = {
            &PY_TYPE_DEF(::org::apache::lucene::spatial3d::geom::GeoBaseCompositeShape),
            NULL
          };

          DEFINE_TYPE(GeoBaseCompositeMembershipShape, t_GeoBaseCompositeMembershipShape, GeoBaseCompositeMembershipShape);
          PyObject *t_GeoBaseCompositeMembershipShape::wrap_Object(const GeoBaseCompositeMembershipShape& object, PyTypeObject *p0)
          {
            PyObject *obj = t_GeoBaseCompositeMembershipShape::wrap_Object(object);
            if (obj != NULL && obj != Py_None)
            {
              t_GeoBaseCompositeMembershipShape *self = (t_GeoBaseCompositeMembershipShape *) obj;
              self->parameters[0] = p0;
            }
            return obj;
          }

          PyObject *t_GeoBaseCompositeMembershipShape::wrap_jobject(const jobject& object, PyTypeObject *p0)
          {
            PyObject *obj = t_GeoBaseCompositeMembershipShape::wrap_jobject(object);
            if (obj != NULL && obj != Py_None)
            {
              t_GeoBaseCompositeMembershipShape *self = (t_GeoBaseCompositeMembershipShape *) obj;
              self->parameters[0] = p0;
            }
            return obj;
          }

          void t_GeoBaseCompositeMembershipShape::install(PyObject *module)
          {
            installType(&PY_TYPE(GeoBaseCompositeMembershipShape), &PY_TYPE_DEF(GeoBaseCompositeMembershipShape), module, "GeoBaseCompositeMembershipShape", 0);
          }

          void t_GeoBaseCompositeMembershipShape::initialize(PyObject *module)
          {
            PyObject_SetAttrString((PyObject *) PY_TYPE(GeoBaseCompositeMembershipShape), "class_", make_descriptor(GeoBaseCompositeMembershipShape::initializeClass, 1));
            PyObject_SetAttrString((PyObject *) PY_TYPE(GeoBaseCompositeMembershipShape), "wrapfn_", make_descriptor(t_GeoBaseCompositeMembershipShape::wrap_jobject));
            PyObject_SetAttrString((PyObject *) PY_TYPE(GeoBaseCompositeMembershipShape), "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_GeoBaseCompositeMembershipShape_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, GeoBaseCompositeMembershipShape::initializeClass, 1)))
              return NULL;
            return t_GeoBaseCompositeMembershipShape::wrap_Object(GeoBaseCompositeMembershipShape(((t_GeoBaseCompositeMembershipShape *) arg)->object.this$));
          }
          static PyObject *t_GeoBaseCompositeMembershipShape_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, GeoBaseCompositeMembershipShape::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static PyObject *t_GeoBaseCompositeMembershipShape_of_(t_GeoBaseCompositeMembershipShape *self, PyObject *args)
          {
            if (!parseArg(args, "T", 1, &(self->parameters)))
              Py_RETURN_SELF;
            return PyErr_SetArgsError((PyObject *) self, "of_", args);
          }

          static PyObject *t_GeoBaseCompositeMembershipShape_computeOutsideDistance(t_GeoBaseCompositeMembershipShape *self, PyObject *args)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 2:
              {
                ::org::apache::lucene::spatial3d::geom::DistanceStyle a0((jobject) NULL);
                ::org::apache::lucene::spatial3d::geom::GeoPoint a1((jobject) NULL);
                jdouble result;

                if (!parseArgs(args, "kk", ::org::apache::lucene::spatial3d::geom::DistanceStyle::initializeClass, ::org::apache::lucene::spatial3d::geom::GeoPoint::initializeClass, &a0, &a1))
                {
                  OBJ_CALL(result = self->object.computeOutsideDistance(a0, a1));
                  return PyFloat_FromDouble((double) result);
                }
              }
              break;
             case 4:
              {
                ::org::apache::lucene::spatial3d::geom::DistanceStyle a0((jobject) NULL);
                jdouble a1;
                jdouble a2;
                jdouble a3;
                jdouble result;

                if (!parseArgs(args, "kDDD", ::org::apache::lucene::spatial3d::geom::DistanceStyle::initializeClass, &a0, &a1, &a2, &a3))
                {
                  OBJ_CALL(result = self->object.computeOutsideDistance(a0, a1, a2, a3));
                  return PyFloat_FromDouble((double) result);
                }
              }
            }

            PyErr_SetArgsError((PyObject *) self, "computeOutsideDistance", args);
            return NULL;
          }
          static PyObject *t_GeoBaseCompositeMembershipShape_get__parameters_(t_GeoBaseCompositeMembershipShape *self, void *data)
          {
            return typeParameters(self->parameters, sizeof(self->parameters));
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/DiversifiedTopDocsCollector.h"
#include "org/apache/lucene/index/LeafReaderContext.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/search/LeafCollector.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/search/DiversifiedTopDocsCollector$ScoreDocKey.h"
#include "org/apache/lucene/search/ScoreMode.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {

        ::java::lang::Class *DiversifiedTopDocsCollector::class$ = NULL;
        jmethodID *DiversifiedTopDocsCollector::mids$ = NULL;
        bool DiversifiedTopDocsCollector::live$ = false;

        jclass DiversifiedTopDocsCollector::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/search/DiversifiedTopDocsCollector");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_438c62480c481c65] = env->getMethodID(cls, "<init>", "(II)V");
            mids$[mid_getLeafCollector_d5dbc8c30b21e920] = env->getMethodID(cls, "getLeafCollector", "(Lorg/apache/lucene/index/LeafReaderContext;)Lorg/apache/lucene/search/LeafCollector;");
            mids$[mid_scoreMode_8a35254b82ee8276] = env->getMethodID(cls, "scoreMode", "()Lorg/apache/lucene/search/ScoreMode;");
            mids$[mid_newTopDocs_89238c61a7db05c2] = env->getMethodID(cls, "newTopDocs", "([Lorg/apache/lucene/search/ScoreDoc;I)Lorg/apache/lucene/search/TopDocs;");
            mids$[mid_insert_e634a8a02c7606ae] = env->getMethodID(cls, "insert", "(Lorg/apache/lucene/search/DiversifiedTopDocsCollector$ScoreDocKey;ILorg/apache/lucene/index/NumericDocValues;)Lorg/apache/lucene/search/DiversifiedTopDocsCollector$ScoreDocKey;");
            mids$[mid_getKeys_2eac8f5cce452ee7] = env->getMethodID(cls, "getKeys", "(Lorg/apache/lucene/index/LeafReaderContext;)Lorg/apache/lucene/index/NumericDocValues;");

            class$ = new ::java::lang::Class(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        DiversifiedTopDocsCollector::DiversifiedTopDocsCollector(jint a0, jint a1) : ::org::apache::lucene::search::TopDocsCollector(env->newObject(initializeClass, &mids$, mid_init$_438c62480c481c65, a0, a1)) {}

        ::org::apache::lucene::search::LeafCollector DiversifiedTopDocsCollector::getLeafCollector(const ::org::apache::lucene::index::LeafReaderContext & a0) const
        {
          return ::org::apache::lucene::search::LeafCollector(env->callObjectMethod(this$, mids$[mid_getLeafCollector_d5dbc8c30b21e920], a0.this$));
        }

        ::org::apache::lucene::search::ScoreMode DiversifiedTopDocsCollector::scoreMode() const
        {
          return ::org::apache::lucene::search::ScoreMode(env->callObjectMethod(this$, mids$[mid_scoreMode_8a35254b82ee8276]));
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        static PyObject *t_DiversifiedTopDocsCollector_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_DiversifiedTopDocsCollector_instance_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_DiversifiedTopDocsCollector_of_(t_DiversifiedTopDocsCollector *self, PyObject *args);
        static int t_DiversifiedTopDocsCollector_init_(t_DiversifiedTopDocsCollector *self, PyObject *args, PyObject *kwds);
        static PyObject *t_DiversifiedTopDocsCollector_getLeafCollector(t_DiversifiedTopDocsCollector *self, PyObject *args);
        static PyObject *t_DiversifiedTopDocsCollector_scoreMode(t_DiversifiedTopDocsCollector *self, PyObject *args);
        static PyObject *t_DiversifiedTopDocsCollector_get__parameters_(t_DiversifiedTopDocsCollector *self, void *data);
        static PyGetSetDef t_DiversifiedTopDocsCollector__fields_[] = {
          DECLARE_GET_FIELD(t_DiversifiedTopDocsCollector, parameters_),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_DiversifiedTopDocsCollector__methods_[] = {
          DECLARE_METHOD(t_DiversifiedTopDocsCollector, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_DiversifiedTopDocsCollector, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_DiversifiedTopDocsCollector, of_, METH_VARARGS),
          DECLARE_METHOD(t_DiversifiedTopDocsCollector, getLeafCollector, METH_VARARGS),
          DECLARE_METHOD(t_DiversifiedTopDocsCollector, scoreMode, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        static PyType_Slot PY_TYPE_SLOTS(DiversifiedTopDocsCollector)[] = {
          { Py_tp_methods, t_DiversifiedTopDocsCollector__methods_ },
          { Py_tp_init, (void *) t_DiversifiedTopDocsCollector_init_ },
          { Py_tp_getset, t_DiversifiedTopDocsCollector__fields_ },
          { 0, NULL }
        };

        static PyType_Def *PY_TYPE_BASES(DiversifiedTopDocsCollector)[] = {
          &PY_TYPE_DEF(::org::apache::lucene::search::TopDocsCollector),
          NULL
        };

        DEFINE_TYPE(DiversifiedTopDocsCollector, t_DiversifiedTopDocsCollector, DiversifiedTopDocsCollector);
        PyObject *t_DiversifiedTopDocsCollector::wrap_Object(const DiversifiedTopDocsCollector& object, PyTypeObject *p0)
        {
          PyObject *obj = t_DiversifiedTopDocsCollector::wrap_Object(object);
          if (obj != NULL && obj != Py_None)
          {
            t_DiversifiedTopDocsCollector *self = (t_DiversifiedTopDocsCollector *) obj;
            self->parameters[0] = p0;
          }
          return obj;
        }

        PyObject *t_DiversifiedTopDocsCollector::wrap_jobject(const jobject& object, PyTypeObject *p0)
        {
          PyObject *obj = t_DiversifiedTopDocsCollector::wrap_jobject(object);
          if (obj != NULL && obj != Py_None)
          {
            t_DiversifiedTopDocsCollector *self = (t_DiversifiedTopDocsCollector *) obj;
            self->parameters[0] = p0;
          }
          return obj;
        }

        void t_DiversifiedTopDocsCollector::install(PyObject *module)
        {
          installType(&PY_TYPE(DiversifiedTopDocsCollector), &PY_TYPE_DEF(DiversifiedTopDocsCollector), module, "DiversifiedTopDocsCollector", 0);
          PyObject_SetAttrString((PyObject *) PY_TYPE(DiversifiedTopDocsCollector), "ScoreDocKey", make_descriptor(&PY_TYPE_DEF(DiversifiedTopDocsCollector$ScoreDocKey)));
        }

        void t_DiversifiedTopDocsCollector::initialize(PyObject *module)
        {
          PyObject_SetAttrString((PyObject *) PY_TYPE(DiversifiedTopDocsCollector), "class_", make_descriptor(DiversifiedTopDocsCollector::initializeClass, 1));
          PyObject_SetAttrString((PyObject *) PY_TYPE(DiversifiedTopDocsCollector), "wrapfn_", make_descriptor(t_DiversifiedTopDocsCollector::wrap_jobject));
          PyObject_SetAttrString((PyObject *) PY_TYPE(DiversifiedTopDocsCollector), "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_DiversifiedTopDocsCollector_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, DiversifiedTopDocsCollector::initializeClass, 1)))
            return NULL;
          return t_DiversifiedTopDocsCollector::wrap_Object(DiversifiedTopDocsCollector(((t_DiversifiedTopDocsCollector *) arg)->object.this$));
        }
        static PyObject *t_DiversifiedTopDocsCollector_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, DiversifiedTopDocsCollector::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static PyObject *t_DiversifiedTopDocsCollector_of_(t_DiversifiedTopDocsCollector *self, PyObject *args)
        {
          if (!parseArg(args, "T", 1, &(self->parameters)))
            Py_RETURN_SELF;
          return PyErr_SetArgsError((PyObject *) self, "of_", args);
        }

        static int t_DiversifiedTopDocsCollector_init_(t_DiversifiedTopDocsCollector *self, PyObject *args, PyObject *kwds)
        {
          jint a0;
          jint a1;
          DiversifiedTopDocsCollector object((jobject) NULL);

          if (!parseArgs(args, "II", &a0, &a1))
          {
            INT_CALL(object = DiversifiedTopDocsCollector(a0, a1));
            self->object = object;
            self->parameters[0] = ::org::apache::lucene::search::PY_TYPE(DiversifiedTopDocsCollector$ScoreDocKey);
          }
          else
          {
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }

        static PyObject *t_DiversifiedTopDocsCollector_getLeafCollector(t_DiversifiedTopDocsCollector *self, PyObject *args)
        {
          ::org::apache::lucene::index::LeafReaderContext a0((jobject) NULL);
          ::org::apache::lucene::search::LeafCollector result((jobject) NULL);

          if (!parseArgs(args, "k", ::org::apache::lucene::index::LeafReaderContext::initializeClass, &a0))
          {
            OBJ_CALL(result = self->object.getLeafCollector(a0));
            return ::org::apache::lucene::search::t_LeafCollector::wrap_Object(result);
          }

          return callSuper(PY_TYPE(DiversifiedTopDocsCollector), (PyObject *) self, "getLeafCollector", args, 2);
        }

        static PyObject *t_DiversifiedTopDocsCollector_scoreMode(t_DiversifiedTopDocsCollector *self, PyObject *args)
        {
          ::org::apache::lucene::search::ScoreMode result((jobject) NULL);

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.scoreMode());
            return ::org::apache::lucene::search::t_ScoreMode::wrap_Object(result);
          }

          return callSuper(PY_TYPE(DiversifiedTopDocsCollector), (PyObject *) self, "scoreMode", args, 2);
        }
        static PyObject *t_DiversifiedTopDocsCollector_get__parameters_(t_DiversifiedTopDocsCollector *self, void *data)
        {
          return typeParameters(self->parameters, sizeof(self->parameters));
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/LRUQueryCache.h"
#include "org/apache/lucene/index/LeafReaderContext.h"
#include "java/util/Collection.h"
#include "java/util/function/Predicate.h"
#include "org/apache/lucene/util/Accountable.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/search/QueryCache.h"
#include "org/apache/lucene/search/QueryCachingPolicy.h"
#include "org/apache/lucene/search/Query.h"
#include "org/apache/lucene/search/Weight.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {

        ::java::lang::Class *LRUQueryCache::class$ = NULL;
        jmethodID *LRUQueryCache::mids$ = NULL;
        bool LRUQueryCache::live$ = false;

        jclass LRUQueryCache::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/search/LRUQueryCache");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_7b2f5b9ddfcb9416] = env->getMethodID(cls, "<init>", "(IJ)V");
            mids$[mid_init$_9a9e03bc2145858e] = env->getMethodID(cls, "<init>", "(IJLjava/util/function/Predicate;F)V");
            mids$[mid_clear_f2cc1bce94666404] = env->getMethodID(cls, "clear", "()V");
            mids$[mid_clearCoreCacheKey_d20f626183f72f7d] = env->getMethodID(cls, "clearCoreCacheKey", "(Ljava/lang/Object;)V");
            mids$[mid_clearQuery_ede25bb9d48237ac] = env->getMethodID(cls, "clearQuery", "(Lorg/apache/lucene/search/Query;)V");
            mids$[mid_doCache_739d035002ca686c] = env->getMethodID(cls, "doCache", "(Lorg/apache/lucene/search/Weight;Lorg/apache/lucene/search/QueryCachingPolicy;)Lorg/apache/lucene/search/Weight;");
            mids$[mid_getCacheCount_2e5ae9edcb9b072f] = env->getMethodID(cls, "getCacheCount", "()J");
            mids$[mid_getCacheSize_2e5ae9edcb9b072f] = env->getMethodID(cls, "getCacheSize", "()J");
            mids$[mid_getChildResources_d4dfbf7a26ff41df] = env->getMethodID(cls, "getChildResources", "()Ljava/util/Collection;");
            mids$[mid_getEvictionCount_2e5ae9edcb9b072f] = env->getMethodID(cls, "getEvictionCount", "()J");
            mids$[mid_getHitCount_2e5ae9edcb9b072f] = env->getMethodID(cls, "getHitCount", "()J");
            mids$[mid_getMissCount_2e5ae9edcb9b072f] = env->getMethodID(cls, "getMissCount", "()J");
            mids$[mid_getTotalCount_2e5ae9edcb9b072f] = env->getMethodID(cls, "getTotalCount", "()J");
            mids$[mid_ramBytesUsed_2e5ae9edcb9b072f] = env->getMethodID(cls, "ramBytesUsed", "()J");
            mids$[mid_cacheImpl_6ed275519b99d5d9] = env->getMethodID(cls, "cacheImpl", "(Lorg/apache/lucene/search/BulkScorer;I)Lorg/apache/lucene/search/DocIdSet;");
            mids$[mid_onHit_79c43c6b09481002] = env->getMethodID(cls, "onHit", "(Ljava/lang/Object;Lorg/apache/lucene/search/Query;)V");
            mids$[mid_onMiss_79c43c6b09481002] = env->getMethodID(cls, "onMiss", "(Ljava/lang/Object;Lorg/apache/lucene/search/Query;)V");
            mids$[mid_onQueryCache_fc246b9c0717126f] = env->getMethodID(cls, "onQueryCache", "(Lorg/apache/lucene/search/Query;J)V");
            mids$[mid_onQueryEviction_fc246b9c0717126f] = env->getMethodID(cls, "onQueryEviction", "(Lorg/apache/lucene/search/Query;J)V");
            mids$[mid_onDocIdSetCache_f63797c6ac19e2f5] = env->getMethodID(cls, "onDocIdSetCache", "(Ljava/lang/Object;J)V");
            mids$[mid_onDocIdSetEviction_b08200bf7fe7f247] = env->getMethodID(cls, "onDocIdSetEviction", "(Ljava/lang/Object;IJ)V");
            mids$[mid_onClear_f2cc1bce94666404] = env->getMethodID(cls, "onClear", "()V");

            class$ = new ::java::lang::Class(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        LRUQueryCache::LRUQueryCache(jint a0, jlong a1) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_7b2f5b9ddfcb9416, a0, a1)) {}

        LRUQueryCache::LRUQueryCache(jint a0, jlong a1, const ::java::util::function::Predicate & a2, jfloat a3) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_9a9e03bc2145858e, a0, a1, a2.this$, a3)) {}

        void LRUQueryCache::clear() const
        {
          env->callVoidMethod(this$, mids$[mid_clear_f2cc1bce94666404]);
        }

        void LRUQueryCache::clearCoreCacheKey(const ::java::lang::Object & a0) const
        {
          env->callVoidMethod(this$, mids$[mid_clearCoreCacheKey_d20f626183f72f7d], a0.this$);
        }

        void LRUQueryCache::clearQuery(const ::org::apache::lucene::search::Query & a0) const
        {
          env->callVoidMethod(this$, mids$[mid_clearQuery_ede25bb9d48237ac], a0.this$);
        }

        ::org::apache::lucene::search::Weight LRUQueryCache::doCache(const ::org::apache::lucene::search::Weight & a0, const ::org::apache::lucene::search::QueryCachingPolicy & a1) const
        {
          return ::org::apache::lucene::search::Weight(env->callObjectMethod(this$, mids$[mid_doCache_739d035002ca686c], a0.this$, a1.this$));
        }

        jlong LRUQueryCache::getCacheCount() const
        {
          return env->callLongMethod(this$, mids$[mid_getCacheCount_2e5ae9edcb9b072f]);
        }

        jlong LRUQueryCache::getCacheSize() const
        {
          return env->callLongMethod(this$, mids$[mid_getCacheSize_2e5ae9edcb9b072f]);
        }

        ::java::util::Collection LRUQueryCache::getChildResources() const
        {
          return ::java::util::Collection(env->callObjectMethod(this$, mids$[mid_getChildResources_d4dfbf7a26ff41df]));
        }

        jlong LRUQueryCache::getEvictionCount() const
        {
          return env->callLongMethod(this$, mids$[mid_getEvictionCount_2e5ae9edcb9b072f]);
        }

        jlong LRUQueryCache::getHitCount() const
        {
          return env->callLongMethod(this$, mids$[mid_getHitCount_2e5ae9edcb9b072f]);
        }

        jlong LRUQueryCache::getMissCount() const
        {
          return env->callLongMethod(this$, mids$[mid_getMissCount_2e5ae9edcb9b072f]);
        }

        jlong LRUQueryCache::getTotalCount() const
        {
          return env->callLongMethod(this$, mids$[mid_getTotalCount_2e5ae9edcb9b072f]);
        }

        jlong LRUQueryCache::ramBytesUsed() const
        {
          return env->callLongMethod(this$, mids$[mid_ramBytesUsed_2e5ae9edcb9b072f]);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        static PyObject *t_LRUQueryCache_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_LRUQueryCache_instance_(PyTypeObject *type, PyObject *arg);
        static int t_LRUQueryCache_init_(t_LRUQueryCache *self, PyObject *args, PyObject *kwds);
        static PyObject *t_LRUQueryCache_clear(t_LRUQueryCache *self);
        static PyObject *t_LRUQueryCache_clearCoreCacheKey(t_LRUQueryCache *self, PyObject *arg);
        static PyObject *t_LRUQueryCache_clearQuery(t_LRUQueryCache *self, PyObject *arg);
        static PyObject *t_LRUQueryCache_doCache(t_LRUQueryCache *self, PyObject *args);
        static PyObject *t_LRUQueryCache_getCacheCount(t_LRUQueryCache *self);
        static PyObject *t_LRUQueryCache_getCacheSize(t_LRUQueryCache *self);
        static PyObject *t_LRUQueryCache_getChildResources(t_LRUQueryCache *self);
        static PyObject *t_LRUQueryCache_getEvictionCount(t_LRUQueryCache *self);
        static PyObject *t_LRUQueryCache_getHitCount(t_LRUQueryCache *self);
        static PyObject *t_LRUQueryCache_getMissCount(t_LRUQueryCache *self);
        static PyObject *t_LRUQueryCache_getTotalCount(t_LRUQueryCache *self);
        static PyObject *t_LRUQueryCache_ramBytesUsed(t_LRUQueryCache *self);
        static PyObject *t_LRUQueryCache_get__cacheCount(t_LRUQueryCache *self, void *data);
        static PyObject *t_LRUQueryCache_get__cacheSize(t_LRUQueryCache *self, void *data);
        static PyObject *t_LRUQueryCache_get__childResources(t_LRUQueryCache *self, void *data);
        static PyObject *t_LRUQueryCache_get__evictionCount(t_LRUQueryCache *self, void *data);
        static PyObject *t_LRUQueryCache_get__hitCount(t_LRUQueryCache *self, void *data);
        static PyObject *t_LRUQueryCache_get__missCount(t_LRUQueryCache *self, void *data);
        static PyObject *t_LRUQueryCache_get__totalCount(t_LRUQueryCache *self, void *data);
        static PyGetSetDef t_LRUQueryCache__fields_[] = {
          DECLARE_GET_FIELD(t_LRUQueryCache, cacheCount),
          DECLARE_GET_FIELD(t_LRUQueryCache, cacheSize),
          DECLARE_GET_FIELD(t_LRUQueryCache, childResources),
          DECLARE_GET_FIELD(t_LRUQueryCache, evictionCount),
          DECLARE_GET_FIELD(t_LRUQueryCache, hitCount),
          DECLARE_GET_FIELD(t_LRUQueryCache, missCount),
          DECLARE_GET_FIELD(t_LRUQueryCache, totalCount),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_LRUQueryCache__methods_[] = {
          DECLARE_METHOD(t_LRUQueryCache, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_LRUQueryCache, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_LRUQueryCache, clear, METH_NOARGS),
          DECLARE_METHOD(t_LRUQueryCache, clearCoreCacheKey, METH_O),
          DECLARE_METHOD(t_LRUQueryCache, clearQuery, METH_O),
          DECLARE_METHOD(t_LRUQueryCache, doCache, METH_VARARGS),
          DECLARE_METHOD(t_LRUQueryCache, getCacheCount, METH_NOARGS),
          DECLARE_METHOD(t_LRUQueryCache, getCacheSize, METH_NOARGS),
          DECLARE_METHOD(t_LRUQueryCache, getChildResources, METH_NOARGS),
          DECLARE_METHOD(t_LRUQueryCache, getEvictionCount, METH_NOARGS),
          DECLARE_METHOD(t_LRUQueryCache, getHitCount, METH_NOARGS),
          DECLARE_METHOD(t_LRUQueryCache, getMissCount, METH_NOARGS),
          DECLARE_METHOD(t_LRUQueryCache, getTotalCount, METH_NOARGS),
          DECLARE_METHOD(t_LRUQueryCache, ramBytesUsed, METH_NOARGS),
          { NULL, NULL, 0, NULL }
        };

        static PyType_Slot PY_TYPE_SLOTS(LRUQueryCache)[] = {
          { Py_tp_methods, t_LRUQueryCache__methods_ },
          { Py_tp_init, (void *) t_LRUQueryCache_init_ },
          { Py_tp_getset, t_LRUQueryCache__fields_ },
          { 0, NULL }
        };

        static PyType_Def *PY_TYPE_BASES(LRUQueryCache)[] = {
          &PY_TYPE_DEF(::java::lang::Object),
          NULL
        };

        DEFINE_TYPE(LRUQueryCache, t_LRUQueryCache, LRUQueryCache);

        void t_LRUQueryCache::install(PyObject *module)
        {
          installType(&PY_TYPE(LRUQueryCache), &PY_TYPE_DEF(LRUQueryCache), module, "LRUQueryCache", 0);
        }

        void t_LRUQueryCache::initialize(PyObject *module)
        {
          PyObject_SetAttrString((PyObject *) PY_TYPE(LRUQueryCache), "class_", make_descriptor(LRUQueryCache::initializeClass, 1));
          PyObject_SetAttrString((PyObject *) PY_TYPE(LRUQueryCache), "wrapfn_", make_descriptor(t_LRUQueryCache::wrap_jobject));
          PyObject_SetAttrString((PyObject *) PY_TYPE(LRUQueryCache), "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_LRUQueryCache_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, LRUQueryCache::initializeClass, 1)))
            return NULL;
          return t_LRUQueryCache::wrap_Object(LRUQueryCache(((t_LRUQueryCache *) arg)->object.this$));
        }
        static PyObject *t_LRUQueryCache_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, LRUQueryCache::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_LRUQueryCache_init_(t_LRUQueryCache *self, PyObject *args, PyObject *kwds)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 2:
            {
              jint a0;
              jlong a1;
              LRUQueryCache object((jobject) NULL);

              if (!parseArgs(args, "IJ", &a0, &a1))
              {
                INT_CALL(object = LRUQueryCache(a0, a1));
                self->object = object;
                break;
              }
            }
            goto err;
           case 4:
            {
              jint a0;
              jlong a1;
              ::java::util::function::Predicate a2((jobject) NULL);
              PyTypeObject **p2;
              jfloat a3;
              LRUQueryCache object((jobject) NULL);

              if (!parseArgs(args, "IJKF", ::java::util::function::Predicate::initializeClass, &a0, &a1, &a2, &p2, ::java::util::function::t_Predicate::parameters_, &a3))
              {
                INT_CALL(object = LRUQueryCache(a0, a1, a2, a3));
                self->object = object;
                break;
              }
            }
           default:
           err:
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }

        static PyObject *t_LRUQueryCache_clear(t_LRUQueryCache *self)
        {
          OBJ_CALL(self->object.clear());
          Py_RETURN_NONE;
        }

        static PyObject *t_LRUQueryCache_clearCoreCacheKey(t_LRUQueryCache *self, PyObject *arg)
        {
          ::java::lang::Object a0((jobject) NULL);

          if (!parseArg(arg, "o", &a0))
          {
            OBJ_CALL(self->object.clearCoreCacheKey(a0));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "clearCoreCacheKey", arg);
          return NULL;
        }

        static PyObject *t_LRUQueryCache_clearQuery(t_LRUQueryCache *self, PyObject *arg)
        {
          ::org::apache::lucene::search::Query a0((jobject) NULL);

          if (!parseArg(arg, "k", ::org::apache::lucene::search::Query::initializeClass, &a0))
          {
            OBJ_CALL(self->object.clearQuery(a0));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "clearQuery", arg);
          return NULL;
        }

        static PyObject *t_LRUQueryCache_doCache(t_LRUQueryCache *self, PyObject *args)
        {
          ::org::apache::lucene::search::Weight a0((jobject) NULL);
          ::org::apache::lucene::search::QueryCachingPolicy a1((jobject) NULL);
          ::org::apache::lucene::search::Weight result((jobject) NULL);

          if (!parseArgs(args, "kk", ::org::apache::lucene::search::Weight::initializeClass, ::org::apache::lucene::search::QueryCachingPolicy::initializeClass, &a0, &a1))
          {
            OBJ_CALL(result = self->object.doCache(a0, a1));
            return ::org::apache::lucene::search::t_Weight::wrap_Object(result);
          }

          PyErr_SetArgsError((PyObject *) self, "doCache", args);
          return NULL;
        }

        static PyObject *t_LRUQueryCache_getCacheCount(t_LRUQueryCache *self)
        {
          jlong result;
          OBJ_CALL(result = self->object.getCacheCount());
          return PyLong_FromLongLong((PY_LONG_LONG) result);
        }

        static PyObject *t_LRUQueryCache_getCacheSize(t_LRUQueryCache *self)
        {
          jlong result;
          OBJ_CALL(result = self->object.getCacheSize());
          return PyLong_FromLongLong((PY_LONG_LONG) result);
        }

        static PyObject *t_LRUQueryCache_getChildResources(t_LRUQueryCache *self)
        {
          ::java::util::Collection result((jobject) NULL);
          OBJ_CALL(result = self->object.getChildResources());
          return ::java::util::t_Collection::wrap_Object(result, ::org::apache::lucene::util::PY_TYPE(Accountable));
        }

        static PyObject *t_LRUQueryCache_getEvictionCount(t_LRUQueryCache *self)
        {
          jlong result;
          OBJ_CALL(result = self->object.getEvictionCount());
          return PyLong_FromLongLong((PY_LONG_LONG) result);
        }

        static PyObject *t_LRUQueryCache_getHitCount(t_LRUQueryCache *self)
        {
          jlong result;
          OBJ_CALL(result = self->object.getHitCount());
          return PyLong_FromLongLong((PY_LONG_LONG) result);
        }

        static PyObject *t_LRUQueryCache_getMissCount(t_LRUQueryCache *self)
        {
          jlong result;
          OBJ_CALL(result = self->object.getMissCount());
          return PyLong_FromLongLong((PY_LONG_LONG) result);
        }

        static PyObject *t_LRUQueryCache_getTotalCount(t_LRUQueryCache *self)
        {
          jlong result;
          OBJ_CALL(result = self->object.getTotalCount());
          return PyLong_FromLongLong((PY_LONG_LONG) result);
        }

        static PyObject *t_LRUQueryCache_ramBytesUsed(t_LRUQueryCache *self)
        {
          jlong result;
          OBJ_CALL(result = self->object.ramBytesUsed());
          return PyLong_FromLongLong((PY_LONG_LONG) result);
        }

        static PyObject *t_LRUQueryCache_get__cacheCount(t_LRUQueryCache *self, void *data)
        {
          jlong value;
          OBJ_CALL(value = self->object.getCacheCount());
          return PyLong_FromLongLong((PY_LONG_LONG) value);
        }

        static PyObject *t_LRUQueryCache_get__cacheSize(t_LRUQueryCache *self, void *data)
        {
          jlong value;
          OBJ_CALL(value = self->object.getCacheSize());
          return PyLong_FromLongLong((PY_LONG_LONG) value);
        }

        static PyObject *t_LRUQueryCache_get__childResources(t_LRUQueryCache *self, void *data)
        {
          ::java::util::Collection value((jobject) NULL);
          OBJ_CALL(value = self->object.getChildResources());
          return ::java::util::t_Collection::wrap_Object(value);
        }

        static PyObject *t_LRUQueryCache_get__evictionCount(t_LRUQueryCache *self, void *data)
        {
          jlong value;
          OBJ_CALL(value = self->object.getEvictionCount());
          return PyLong_FromLongLong((PY_LONG_LONG) value);
        }

        static PyObject *t_LRUQueryCache_get__hitCount(t_LRUQueryCache *self, void *data)
        {
          jlong value;
          OBJ_CALL(value = self->object.getHitCount());
          return PyLong_FromLongLong((PY_LONG_LONG) value);
        }

        static PyObject *t_LRUQueryCache_get__missCount(t_LRUQueryCache *self, void *data)
        {
          jlong value;
          OBJ_CALL(value = self->object.getMissCount());
          return PyLong_FromLongLong((PY_LONG_LONG) value);
        }

        static PyObject *t_LRUQueryCache_get__totalCount(t_LRUQueryCache *self, void *data)
        {
          jlong value;
          OBJ_CALL(value = self->object.getTotalCount());
          return PyLong_FromLongLong((PY_LONG_LONG) value);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/spatial3d/geom/GeoPoint.h"
#include "java/io/InputStream.h"
#include "org/apache/lucene/spatial3d/geom/SerializableObject.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/spatial3d/geom/GeoPoint.h"
#include "java/lang/String.h"
#include "java/io/OutputStream.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/spatial3d/geom/PlanetModel.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace spatial3d {
        namespace geom {

          ::java::lang::Class *GeoPoint::class$ = NULL;
          jmethodID *GeoPoint::mids$ = NULL;
          bool GeoPoint::live$ = false;

          jclass GeoPoint::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/spatial3d/geom/GeoPoint");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_a227449bf251faf1] = env->getMethodID(cls, "<init>", "(Ljava/io/InputStream;)V");
              mids$[mid_init$_fa69e987247475d8] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/spatial3d/geom/PlanetModel;Ljava/io/InputStream;)V");
              mids$[mid_init$_914bffbee65f5b30] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/spatial3d/geom/PlanetModel;DD)V");
              mids$[mid_init$_2a4b7af5c9ed138c] = env->getMethodID(cls, "<init>", "(DDD)V");
              mids$[mid_init$_98b1cec09263a48f] = env->getMethodID(cls, "<init>", "(DDDD)V");
              mids$[mid_init$_db3d72bafee6378c] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/spatial3d/geom/PlanetModel;DDDD)V");
              mids$[mid_init$_36a84f56bea85ae9] = env->getMethodID(cls, "<init>", "(DDDDD)V");
              mids$[mid_init$_5d062ae8b01cf1b7] = env->getMethodID(cls, "<init>", "(DDDDDD)V");
              mids$[mid_init$_cb61cdb1a267ccb3] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/spatial3d/geom/PlanetModel;DDDDDD)V");
              mids$[mid_arcDistance_eeff1bdc68694797] = env->getMethodID(cls, "arcDistance", "(Lorg/apache/lucene/spatial3d/geom/Vector;)D");
              mids$[mid_arcDistance_5fe2cd44fc854b0c] = env->getMethodID(cls, "arcDistance", "(DDD)D");
              mids$[mid_getLatitude_8c74b787998ce4bc] = env->getMethodID(cls, "getLatitude", "()D");
              mids$[mid_getLongitude_8c74b787998ce4bc] = env->getMethodID(cls, "getLongitude", "()D");
              mids$[mid_isIdentical_7e72234f19e0117f] = env->getMethodID(cls, "isIdentical", "(Lorg/apache/lucene/spatial3d/geom/GeoPoint;)Z");
              mids$[mid_isIdentical_5afbc0f2c6478de6] = env->getMethodID(cls, "isIdentical", "(DDD)Z");
              mids$[mid_magnitude_8c74b787998ce4bc] = env->getMethodID(cls, "magnitude", "()D");
              mids$[mid_toString_db9b55ba01e03e4b] = env->getMethodID(cls, "toString", "()Ljava/lang/String;");
              mids$[mid_write_02fcdace254a9894] = env->getMethodID(cls, "write", "(Ljava/io/OutputStream;)V");

              class$ = new ::java::lang::Class(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          GeoPoint::GeoPoint(const ::java::io::InputStream & a0) : ::org::apache::lucene::spatial3d::geom::Vector(env->newObject(initializeClass, &mids$, mid_init$_a227449bf251faf1, a0.this$)) {}

          GeoPoint::GeoPoint(const ::org::apache::lucene::spatial3d::geom::PlanetModel & a0, const ::java::io::InputStream & a1) : ::org::apache::lucene::spatial3d::geom::Vector(env->newObject(initializeClass, &mids$, mid_init$_fa69e987247475d8, a0.this$, a1.this$)) {}

          GeoPoint::GeoPoint(const ::org::apache::lucene::spatial3d::geom::PlanetModel & a0, jdouble a1, jdouble a2) : ::org::apache::lucene::spatial3d::geom::Vector(env->newObject(initializeClass, &mids$, mid_init$_914bffbee65f5b30, a0.this$, a1, a2)) {}

          GeoPoint::GeoPoint(jdouble a0, jdouble a1, jdouble a2) : ::org::apache::lucene::spatial3d::geom::Vector(env->newObject(initializeClass, &mids$, mid_init$_2a4b7af5c9ed138c, a0, a1, a2)) {}

          GeoPoint::GeoPoint(jdouble a0, jdouble a1, jdouble a2, jdouble a3) : ::org::apache::lucene::spatial3d::geom::Vector(env->newObject(initializeClass, &mids$, mid_init$_98b1cec09263a48f, a0, a1, a2, a3)) {}

          GeoPoint::GeoPoint(const ::org::apache::lucene::spatial3d::geom::PlanetModel & a0, jdouble a1, jdouble a2, jdouble a3, jdouble a4) : ::org::apache::lucene::spatial3d::geom::Vector(env->newObject(initializeClass, &mids$, mid_init$_db3d72bafee6378c, a0.this$, a1, a2, a3, a4)) {}

          GeoPoint::GeoPoint(jdouble a0, jdouble a1, jdouble a2, jdouble a3, jdouble a4) : ::org::apache::lucene::spatial3d::geom::Vector(env->newObject(initializeClass, &mids$, mid_init$_36a84f56bea85ae9, a0, a1, a2, a3, a4)) {}

          GeoPoint::GeoPoint(jdouble a0, jdouble a1, jdouble a2, jdouble a3, jdouble a4, jdouble a5) : ::org::apache::lucene::spatial3d::geom::Vector(env->newObject(initializeClass, &mids$, mid_init$_5d062ae8b01cf1b7, a0, a1, a2, a3, a4, a5)) {}

          GeoPoint::GeoPoint(const ::org::apache::lucene::spatial3d::geom::PlanetModel & a0, jdouble a1, jdouble a2, jdouble a3, jdouble a4, jdouble a5, jdouble a6) : ::org::apache::lucene::spatial3d::geom::Vector(env->newObject(initializeClass, &mids$, mid_init$_cb61cdb1a267ccb3, a0.this$, a1, a2, a3, a4, a5, a6)) {}

          jdouble GeoPoint::arcDistance(const ::org::apache::lucene::spatial3d::geom::Vector & a0) const
          {
            return env->callDoubleMethod(this$, mids$[mid_arcDistance_eeff1bdc68694797], a0.this$);
          }

          jdouble GeoPoint::arcDistance(jdouble a0, jdouble a1, jdouble a2) const
          {
            return env->callDoubleMethod(this$, mids$[mid_arcDistance_5fe2cd44fc854b0c], a0, a1, a2);
          }

          jdouble GeoPoint::getLatitude() const
          {
            return env->callDoubleMethod(this$, mids$[mid_getLatitude_8c74b787998ce4bc]);
          }

          jdouble GeoPoint::getLongitude() const
          {
            return env->callDoubleMethod(this$, mids$[mid_getLongitude_8c74b787998ce4bc]);
          }

          jboolean GeoPoint::isIdentical(const GeoPoint & a0) const
          {
            return env->callBooleanMethod(this$, mids$[mid_isIdentical_7e72234f19e0117f], a0.this$);
          }

          jboolean GeoPoint::isIdentical(jdouble a0, jdouble a1, jdouble a2) const
          {
            return env->callBooleanMethod(this$, mids$[mid_isIdentical_5afbc0f2c6478de6], a0, a1, a2);
          }

          jdouble GeoPoint::magnitude() const
          {
            return env->callDoubleMethod(this$, mids$[mid_magnitude_8c74b787998ce4bc]);
          }

          ::java::lang::String GeoPoint::toString() const
          {
            return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_db9b55ba01e03e4b]));
          }

          void GeoPoint::write(const ::java::io::OutputStream & a0) const
          {
            env->callVoidMethod(this$, mids$[mid_write_02fcdace254a9894], a0.this$);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace spatial3d {
        namespace geom {
          static PyObject *t_GeoPoint_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_GeoPoint_instance_(PyTypeObject *type, PyObject *arg);
          static int t_GeoPoint_init_(t_GeoPoint *self, PyObject *args, PyObject *kwds);
          static PyObject *t_GeoPoint_arcDistance(t_GeoPoint *self, PyObject *args);
          static PyObject *t_GeoPoint_getLatitude(t_GeoPoint *self);
          static PyObject *t_GeoPoint_getLongitude(t_GeoPoint *self);
          static PyObject *t_GeoPoint_isIdentical(t_GeoPoint *self, PyObject *args);
          static PyObject *t_GeoPoint_magnitude(t_GeoPoint *self, PyObject *args);
          static PyObject *t_GeoPoint_toString(t_GeoPoint *self, PyObject *args);
          static PyObject *t_GeoPoint_write(t_GeoPoint *self, PyObject *arg);
          static PyObject *t_GeoPoint_get__latitude(t_GeoPoint *self, void *data);
          static PyObject *t_GeoPoint_get__longitude(t_GeoPoint *self, void *data);
          static PyGetSetDef t_GeoPoint__fields_[] = {
            DECLARE_GET_FIELD(t_GeoPoint, latitude),
            DECLARE_GET_FIELD(t_GeoPoint, longitude),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_GeoPoint__methods_[] = {
            DECLARE_METHOD(t_GeoPoint, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_GeoPoint, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_GeoPoint, arcDistance, METH_VARARGS),
            DECLARE_METHOD(t_GeoPoint, getLatitude, METH_NOARGS),
            DECLARE_METHOD(t_GeoPoint, getLongitude, METH_NOARGS),
            DECLARE_METHOD(t_GeoPoint, isIdentical, METH_VARARGS),
            DECLARE_METHOD(t_GeoPoint, magnitude, METH_VARARGS),
            DECLARE_METHOD(t_GeoPoint, toString, METH_VARARGS),
            DECLARE_METHOD(t_GeoPoint, write, METH_O),
            { NULL, NULL, 0, NULL }
          };

          static PyType_Slot PY_TYPE_SLOTS(GeoPoint)[] = {
            { Py_tp_methods, t_GeoPoint__methods_ },
            { Py_tp_init, (void *) t_GeoPoint_init_ },
            { Py_tp_getset, t_GeoPoint__fields_ },
            { 0, NULL }
          };

          static PyType_Def *PY_TYPE_BASES(GeoPoint)[] = {
            &PY_TYPE_DEF(::org::apache::lucene::spatial3d::geom::Vector),
            NULL
          };

          DEFINE_TYPE(GeoPoint, t_GeoPoint, GeoPoint);

          void t_GeoPoint::install(PyObject *module)
          {
            installType(&PY_TYPE(GeoPoint), &PY_TYPE_DEF(GeoPoint), module, "GeoPoint", 0);
          }

          void t_GeoPoint::initialize(PyObject *module)
          {
            PyObject_SetAttrString((PyObject *) PY_TYPE(GeoPoint), "class_", make_descriptor(GeoPoint::initializeClass, 1));
            PyObject_SetAttrString((PyObject *) PY_TYPE(GeoPoint), "wrapfn_", make_descriptor(t_GeoPoint::wrap_jobject));
            PyObject_SetAttrString((PyObject *) PY_TYPE(GeoPoint), "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_GeoPoint_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, GeoPoint::initializeClass, 1)))
              return NULL;
            return t_GeoPoint::wrap_Object(GeoPoint(((t_GeoPoint *) arg)->object.this$));
          }
          static PyObject *t_GeoPoint_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, GeoPoint::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_GeoPoint_init_(t_GeoPoint *self, PyObject *args, PyObject *kwds)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 1:
              {
                ::java::io::InputStream a0((jobject) NULL);
                GeoPoint object((jobject) NULL);

                if (!parseArgs(args, "k", ::java::io::InputStream::initializeClass, &a0))
                {
                  INT_CALL(object = GeoPoint(a0));
                  self->object = object;
                  break;
                }
              }
              goto err;
             case 2:
              {
                ::org::apache::lucene::spatial3d::geom::PlanetModel a0((jobject) NULL);
                ::java::io::InputStream a1((jobject) NULL);
                GeoPoint object((jobject) NULL);

                if (!parseArgs(args, "kk", ::org::apache::lucene::spatial3d::geom::PlanetModel::initializeClass, ::java::io::InputStream::initializeClass, &a0, &a1))
                {
                  INT_CALL(object = GeoPoint(a0, a1));
                  self->object = object;
                  break;
                }
              }
              goto err;
             case 3:
              {
                ::org::apache::lucene::spatial3d::geom::PlanetModel a0((jobject) NULL);
                jdouble a1;
                jdouble a2;
                GeoPoint object((jobject) NULL);

                if (!parseArgs(args, "kDD", ::org::apache::lucene::spatial3d::geom::PlanetModel::initializeClass, &a0, &a1, &a2))
                {
                  INT_CALL(object = GeoPoint(a0, a1, a2));
                  self->object = object;
                  break;
                }
              }
              {
                jdouble a0;
                jdouble a1;
                jdouble a2;
                GeoPoint object((jobject) NULL);

                if (!parseArgs(args, "DDD", &a0, &a1, &a2))
                {
                  INT_CALL(object = GeoPoint(a0, a1, a2));
                  self->object = object;
                  break;
                }
              }
              goto err;
             case 4:
              {
                jdouble a0;
                jdouble a1;
                jdouble a2;
                jdouble a3;
                GeoPoint object((jobject) NULL);

                if (!parseArgs(args, "DDDD", &a0, &a1, &a2, &a3))
                {
                  INT_CALL(object = GeoPoint(a0, a1, a2, a3));
                  self->object = object;
                  break;
                }
              }
              goto err;
             case 5:
              {
                ::org::apache::lucene::spatial3d::geom::PlanetModel a0((jobject) NULL);
                jdouble a1;
                jdouble a2;
                jdouble a3;
                jdouble a4;
                GeoPoint object((jobject) NULL);

                if (!parseArgs(args, "kDDDD", ::org::apache::lucene::spatial3d::geom::PlanetModel::initializeClass, &a0, &a1, &a2, &a3, &a4))
                {
                  INT_CALL(object = GeoPoint(a0, a1, a2, a3, a4));
                  self->object = object;
                  break;
                }
              }
              {
                jdouble a0;
                jdouble a1;
                jdouble a2;
                jdouble a3;
                jdouble a4;
                GeoPoint object((jobject) NULL);

                if (!parseArgs(args, "DDDDD", &a0, &a1, &a2, &a3, &a4))
                {
                  INT_CALL(object = GeoPoint(a0, a1, a2, a3, a4));
                  self->object = object;
                  break;
                }
              }
              goto err;
             case 6:
              {
                jdouble a0;
                jdouble a1;
                jdouble a2;
                jdouble a3;
                jdouble a4;
                jdouble a5;
                GeoPoint object((jobject) NULL);

                if (!parseArgs(args, "DDDDDD", &a0, &a1, &a2, &a3, &a4, &a5))
                {
                  INT_CALL(object = GeoPoint(a0, a1, a2, a3, a4, a5));
                  self->object = object;
                  break;
                }
              }
              goto err;
             case 7:
              {
                ::org::apache::lucene::spatial3d::geom::PlanetModel a0((jobject) NULL);
                jdouble a1;
                jdouble a2;
                jdouble a3;
                jdouble a4;
                jdouble a5;
                jdouble a6;
                GeoPoint object((jobject) NULL);

                if (!parseArgs(args, "kDDDDDD", ::org::apache::lucene::spatial3d::geom::PlanetModel::initializeClass, &a0, &a1, &a2, &a3, &a4, &a5, &a6))
                {
                  INT_CALL(object = GeoPoint(a0, a1, a2, a3, a4, a5, a6));
                  self->object = object;
                  break;
                }
              }
             default:
             err:
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_GeoPoint_arcDistance(t_GeoPoint *self, PyObject *args)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 1:
              {
                ::org::apache::lucene::spatial3d::geom::Vector a0((jobject) NULL);
                jdouble result;

                if (!parseArgs(args, "k", ::org::apache::lucene::spatial3d::geom::Vector::initializeClass, &a0))
                {
                  OBJ_CALL(result = self->object.arcDistance(a0));
                  return PyFloat_FromDouble((double) result);
                }
              }
              break;
             case 3:
              {
                jdouble a0;
                jdouble a1;
                jdouble a2;
                jdouble result;

                if (!parseArgs(args, "DDD", &a0, &a1, &a2))
                {
                  OBJ_CALL(result = self->object.arcDistance(a0, a1, a2));
                  return PyFloat_FromDouble((double) result);
                }
              }
            }

            PyErr_SetArgsError((PyObject *) self, "arcDistance", args);
            return NULL;
          }

          static PyObject *t_GeoPoint_getLatitude(t_GeoPoint *self)
          {
            jdouble result;
            OBJ_CALL(result = self->object.getLatitude());
            return PyFloat_FromDouble((double) result);
          }

          static PyObject *t_GeoPoint_getLongitude(t_GeoPoint *self)
          {
            jdouble result;
            OBJ_CALL(result = self->object.getLongitude());
            return PyFloat_FromDouble((double) result);
          }

          static PyObject *t_GeoPoint_isIdentical(t_GeoPoint *self, PyObject *args)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 1:
              {
                GeoPoint a0((jobject) NULL);
                jboolean result;

                if (!parseArgs(args, "k", GeoPoint::initializeClass, &a0))
                {
                  OBJ_CALL(result = self->object.isIdentical(a0));
                  Py_RETURN_BOOL(result);
                }
              }
              break;
             case 3:
              {
                jdouble a0;
                jdouble a1;
                jdouble a2;
                jboolean result;

                if (!parseArgs(args, "DDD", &a0, &a1, &a2))
                {
                  OBJ_CALL(result = self->object.isIdentical(a0, a1, a2));
                  Py_RETURN_BOOL(result);
                }
              }
            }

            PyErr_SetArgsError((PyObject *) self, "isIdentical", args);
            return NULL;
          }

          static PyObject *t_GeoPoint_magnitude(t_GeoPoint *self, PyObject *args)
          {
            jdouble result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.magnitude());
              return PyFloat_FromDouble((double) result);
            }

            return callSuper(PY_TYPE(GeoPoint), (PyObject *) self, "magnitude", args, 2);
          }

          static PyObject *t_GeoPoint_toString(t_GeoPoint *self, PyObject *args)
          {
            ::java::lang::String result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.toString());
              return j2p(result);
            }

            return callSuper(PY_TYPE(GeoPoint), (PyObject *) self, "toString", args, 2);
          }

          static PyObject *t_GeoPoint_write(t_GeoPoint *self, PyObject *arg)
          {
            ::java::io::OutputStream a0((jobject) NULL);

            if (!parseArg(arg, "k", ::java::io::OutputStream::initializeClass, &a0))
            {
              OBJ_CALL(self->object.write(a0));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError((PyObject *) self, "write", arg);
            return NULL;
          }

          static PyObject *t_GeoPoint_get__latitude(t_GeoPoint *self, void *data)
          {
            jdouble value;
            OBJ_CALL(value = self->object.getLatitude());
            return PyFloat_FromDouble((double) value);
          }

          static PyObject *t_GeoPoint_get__longitude(t_GeoPoint *self, void *data)
          {
            jdouble value;
            OBJ_CALL(value = self->object.getLongitude());
            return PyFloat_FromDouble((double) value);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/index/LeafReader.h"
#include "org/apache/lucene/util/Bits.h"
#include "org/apache/lucene/index/Terms.h"
#include "org/apache/lucene/index/PointValues.h"
#include "org/apache/lucene/index/SortedNumericDocValues.h"
#include "org/apache/lucene/index/BinaryDocValues.h"
#include "org/apache/lucene/index/Term.h"
#include "org/apache/lucene/index/SortedSetDocValues.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/index/LeafReaderContext.h"
#include "org/apache/lucene/index/PostingsEnum.h"
#include "org/apache/lucene/index/LeafMetaData.h"
#include "org/apache/lucene/index/NumericDocValues.h"
#include "java/lang/String.h"
#include "org/apache/lucene/index/IndexReader$CacheHelper.h"
#include "org/apache/lucene/index/SortedDocValues.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/index/FieldInfos.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {

        ::java::lang::Class *LeafReader::class$ = NULL;
        jmethodID *LeafReader::mids$ = NULL;
        bool LeafReader::live$ = false;

        jclass LeafReader::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/index/LeafReader");

            mids$ = new jmethodID[max_mid];
            mids$[mid_checkIntegrity_f2cc1bce94666404] = env->getMethodID(cls, "checkIntegrity", "()V");
            mids$[mid_docFreq_d7008d5a6820eefc] = env->getMethodID(cls, "docFreq", "(Lorg/apache/lucene/index/Term;)I");
            mids$[mid_getBinaryDocValues_6cf59c3533d4df22] = env->getMethodID(cls, "getBinaryDocValues", "(Ljava/lang/String;)Lorg/apache/lucene/index/BinaryDocValues;");
            mids$[mid_getContext_fb87af9aadb3c2c5] = env->getMethodID(cls, "getContext", "()Lorg/apache/lucene/index/LeafReaderContext;");
            mids$[mid_getCoreCacheHelper_a64c414fea9a8cf6] = env->getMethodID(cls, "getCoreCacheHelper", "()Lorg/apache/lucene/index/IndexReader$CacheHelper;");
            mids$[mid_getDocCount_a5a7d1128e9e2bb7] = env->getMethodID(cls, "getDocCount", "(Ljava/lang/String;)I");
            mids$[mid_getFieldInfos_f76601004b1c139b] = env->getMethodID(cls, "getFieldInfos", "()Lorg/apache/lucene/index/FieldInfos;");
            mids$[mid_getLiveDocs_ad87da2b626b21cf] = env->getMethodID(cls, "getLiveDocs", "()Lorg/apache/lucene/util/Bits;");
            mids$[mid_getMetaData_07168aa94cc70619] = env->getMethodID(cls, "getMetaData", "()Lorg/apache/lucene/index/LeafMetaData;");
            mids$[mid_getNormValues_2b2c87c24a70ef49] = env->getMethodID(cls, "getNormValues", "(Ljava/lang/String;)Lorg/apache/lucene/index/NumericDocValues;");
            mids$[mid_getNumericDocValues_2b2c87c24a70ef49] = env->getMethodID(cls, "getNumericDocValues", "(Ljava/lang/String;)Lorg/apache/lucene/index/NumericDocValues;");
            mids$[mid_getPointValues_72b990dbae0eea09] = env->getMethodID(cls, "getPointValues", "(Ljava/lang/String;)Lorg/apache/lucene/index/PointValues;");
            mids$[mid_getSortedDocValues_adb16e9c5e3d9604] = env->getMethodID(cls, "getSortedDocValues", "(Ljava/lang/String;)Lorg/apache/lucene/index/SortedDocValues;");
            mids$[mid_getSortedNumericDocValues_25e77b19828c4dfa] = env->getMethodID(cls, "getSortedNumericDocValues", "(Ljava/lang/String;)Lorg/apache/lucene/index/SortedNumericDocValues;");
            mids$[mid_getSortedSetDocValues_379820f082b251eb] = env->getMethodID(cls, "getSortedSetDocValues", "(Ljava/lang/String;)Lorg/apache/lucene/index/SortedSetDocValues;");
            mids$[mid_getSumDocFreq_b1e05207ec98e246] = env->getMethodID(cls, "getSumDocFreq", "(Ljava/lang/String;)J");
            mids$[mid_getSumTotalTermFreq_b1e05207ec98e246] = env->getMethodID(cls, "getSumTotalTermFreq", "(Ljava/lang/String;)J");
            mids$[mid_postings_506464e9109e6038] = env->getMethodID(cls, "postings", "(Lorg/apache/lucene/index/Term;)Lorg/apache/lucene/index/PostingsEnum;");
            mids$[mid_postings_4e0cd4a8b48be744] = env->getMethodID(cls, "postings", "(Lorg/apache/lucene/index/Term;I)Lorg/apache/lucene/index/PostingsEnum;");
            mids$[mid_terms_3976802ad88273cd] = env->getMethodID(cls, "terms", "(Ljava/lang/String;)Lorg/apache/lucene/index/Terms;");
            mids$[mid_totalTermFreq_4edac0e8611d73f1] = env->getMethodID(cls, "totalTermFreq", "(Lorg/apache/lucene/index/Term;)J");

            class$ = new ::java::lang::Class(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        void LeafReader::checkIntegrity() const
        {
          env->callVoidMethod(this$, mids$[mid_checkIntegrity_f2cc1bce94666404]);
        }

        jint LeafReader::docFreq(const ::org::apache::lucene::index::Term & a0) const
        {
          return env->callIntMethod(this$, mids$[mid_docFreq_d7008d5a6820eefc], a0.this$);
        }

        ::org::apache::lucene::index::BinaryDocValues LeafReader::getBinaryDocValues(const ::java::lang::String & a0) const
        {
          return ::org::apache::lucene::index::BinaryDocValues(env->callObjectMethod(this$, mids$[mid_getBinaryDocValues_6cf59c3533d4df22], a0.this$));
        }

        ::org::apache::lucene::index::LeafReaderContext LeafReader::getContext() const
        {
          return ::org::apache::lucene::index::LeafReaderContext(env->callObjectMethod(this$, mids$[mid_getContext_fb87af9aadb3c2c5]));
        }

        ::org::apache::lucene::index::IndexReader$CacheHelper LeafReader::getCoreCacheHelper() const
        {
          return ::org::apache::lucene::index::IndexReader$CacheHelper(env->callObjectMethod(this$, mids$[mid_getCoreCacheHelper_a64c414fea9a8cf6]));
        }

        jint LeafReader::getDocCount(const ::java::lang::String & a0) const
        {
          return env->callIntMethod(this$, mids$[mid_getDocCount_a5a7d1128e9e2bb7], a0.this$);
        }

        ::org::apache::lucene::index::FieldInfos LeafReader::getFieldInfos() const
        {
          return ::org::apache::lucene::index::FieldInfos(env->callObjectMethod(this$, mids$[mid_getFieldInfos_f76601004b1c139b]));
        }

        ::org::apache::lucene::util::Bits LeafReader::getLiveDocs() const
        {
          return ::org::apache::lucene::util::Bits(env->callObjectMethod(this$, mids$[mid_getLiveDocs_ad87da2b626b21cf]));
        }

        ::org::apache::lucene::index::LeafMetaData LeafReader::getMetaData() const
        {
          return ::org::apache::lucene::index::LeafMetaData(env->callObjectMethod(this$, mids$[mid_getMetaData_07168aa94cc70619]));
        }

        ::org::apache::lucene::index::NumericDocValues LeafReader::getNormValues(const ::java::lang::String & a0) const
        {
          return ::org::apache::lucene::index::NumericDocValues(env->callObjectMethod(this$, mids$[mid_getNormValues_2b2c87c24a70ef49], a0.this$));
        }

        ::org::apache::lucene::index::NumericDocValues LeafReader::getNumericDocValues(const ::java::lang::String & a0) const
        {
          return ::org::apache::lucene::index::NumericDocValues(env->callObjectMethod(this$, mids$[mid_getNumericDocValues_2b2c87c24a70ef49], a0.this$));
        }

        ::org::apache::lucene::index::PointValues LeafReader::getPointValues(const ::java::lang::String & a0) const
        {
          return ::org::apache::lucene::index::PointValues(env->callObjectMethod(this$, mids$[mid_getPointValues_72b990dbae0eea09], a0.this$));
        }

        ::org::apache::lucene::index::SortedDocValues LeafReader::getSortedDocValues(const ::java::lang::String & a0) const
        {
          return ::org::apache::lucene::index::SortedDocValues(env->callObjectMethod(this$, mids$[mid_getSortedDocValues_adb16e9c5e3d9604], a0.this$));
        }

        ::org::apache::lucene::index::SortedNumericDocValues LeafReader::getSortedNumericDocValues(const ::java::lang::String & a0) const
        {
          return ::org::apache::lucene::index::SortedNumericDocValues(env->callObjectMethod(this$, mids$[mid_getSortedNumericDocValues_25e77b19828c4dfa], a0.this$));
        }

        ::org::apache::lucene::index::SortedSetDocValues LeafReader::getSortedSetDocValues(const ::java::lang::String & a0) const
        {
          return ::org::apache::lucene::index::SortedSetDocValues(env->callObjectMethod(this$, mids$[mid_getSortedSetDocValues_379820f082b251eb], a0.this$));
        }

        jlong LeafReader::getSumDocFreq(const ::java::lang::String & a0) const
        {
          return env->callLongMethod(this$, mids$[mid_getSumDocFreq_b1e05207ec98e246], a0.this$);
        }

        jlong LeafReader::getSumTotalTermFreq(const ::java::lang::String & a0) const
        {
          return env->callLongMethod(this$, mids$[mid_getSumTotalTermFreq_b1e05207ec98e246], a0.this$);
        }

        ::org::apache::lucene::index::PostingsEnum LeafReader::postings(const ::org::apache::lucene::index::Term & a0) const
        {
          return ::org::apache::lucene::index::PostingsEnum(env->callObjectMethod(this$, mids$[mid_postings_506464e9109e6038], a0.this$));
        }

        ::org::apache::lucene::index::PostingsEnum LeafReader::postings(const ::org::apache::lucene::index::Term & a0, jint a1) const
        {
          return ::org::apache::lucene::index::PostingsEnum(env->callObjectMethod(this$, mids$[mid_postings_4e0cd4a8b48be744], a0.this$, a1));
        }

        ::org::apache::lucene::index::Terms LeafReader::terms(const ::java::lang::String & a0) const
        {
          return ::org::apache::lucene::index::Terms(env->callObjectMethod(this$, mids$[mid_terms_3976802ad88273cd], a0.this$));
        }

        jlong LeafReader::totalTermFreq(const ::org::apache::lucene::index::Term & a0) const
        {
          return env->callLongMethod(this$, mids$[mid_totalTermFreq_4edac0e8611d73f1], a0.this$);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {
        static PyObject *t_LeafReader_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_LeafReader_instance_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_LeafReader_checkIntegrity(t_LeafReader *self);
        static PyObject *t_LeafReader_docFreq(t_LeafReader *self, PyObject *args);
        static PyObject *t_LeafReader_getBinaryDocValues(t_LeafReader *self, PyObject *arg);
        static PyObject *t_LeafReader_getContext(t_LeafReader *self, PyObject *args);
        static PyObject *t_LeafReader_getCoreCacheHelper(t_LeafReader *self);
        static PyObject *t_LeafReader_getDocCount(t_LeafReader *self, PyObject *args);
        static PyObject *t_LeafReader_getFieldInfos(t_LeafReader *self);
        static PyObject *t_LeafReader_getLiveDocs(t_LeafReader *self);
        static PyObject *t_LeafReader_getMetaData(t_LeafReader *self);
        static PyObject *t_LeafReader_getNormValues(t_LeafReader *self, PyObject *arg);
        static PyObject *t_LeafReader_getNumericDocValues(t_LeafReader *self, PyObject *arg);
        static PyObject *t_LeafReader_getPointValues(t_LeafReader *self, PyObject *arg);
        static PyObject *t_LeafReader_getSortedDocValues(t_LeafReader *self, PyObject *arg);
        static PyObject *t_LeafReader_getSortedNumericDocValues(t_LeafReader *self, PyObject *arg);
        static PyObject *t_LeafReader_getSortedSetDocValues(t_LeafReader *self, PyObject *arg);
        static PyObject *t_LeafReader_getSumDocFreq(t_LeafReader *self, PyObject *args);
        static PyObject *t_LeafReader_getSumTotalTermFreq(t_LeafReader *self, PyObject *args);
        static PyObject *t_LeafReader_postings(t_LeafReader *self, PyObject *args);
        static PyObject *t_LeafReader_terms(t_LeafReader *self, PyObject *arg);
        static PyObject *t_LeafReader_totalTermFreq(t_LeafReader *self, PyObject *args);
        static PyObject *t_LeafReader_get__context(t_LeafReader *self, void *data);
        static PyObject *t_LeafReader_get__coreCacheHelper(t_LeafReader *self, void *data);
        static PyObject *t_LeafReader_get__fieldInfos(t_LeafReader *self, void *data);
        static PyObject *t_LeafReader_get__liveDocs(t_LeafReader *self, void *data);
        static PyObject *t_LeafReader_get__metaData(t_LeafReader *self, void *data);
        static PyGetSetDef t_LeafReader__fields_[] = {
          DECLARE_GET_FIELD(t_LeafReader, context),
          DECLARE_GET_FIELD(t_LeafReader, coreCacheHelper),
          DECLARE_GET_FIELD(t_LeafReader, fieldInfos),
          DECLARE_GET_FIELD(t_LeafReader, liveDocs),
          DECLARE_GET_FIELD(t_LeafReader, metaData),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_LeafReader__methods_[] = {
          DECLARE_METHOD(t_LeafReader, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_LeafReader, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_LeafReader, checkIntegrity, METH_NOARGS),
          DECLARE_METHOD(t_LeafReader, docFreq, METH_VARARGS),
          DECLARE_METHOD(t_LeafReader, getBinaryDocValues, METH_O),
          DECLARE_METHOD(t_LeafReader, getContext, METH_VARARGS),
          DECLARE_METHOD(t_LeafReader, getCoreCacheHelper, METH_NOARGS),
          DECLARE_METHOD(t_LeafReader, getDocCount, METH_VARARGS),
          DECLARE_METHOD(t_LeafReader, getFieldInfos, METH_NOARGS),
          DECLARE_METHOD(t_LeafReader, getLiveDocs, METH_NOARGS),
          DECLARE_METHOD(t_LeafReader, getMetaData, METH_NOARGS),
          DECLARE_METHOD(t_LeafReader, getNormValues, METH_O),
          DECLARE_METHOD(t_LeafReader, getNumericDocValues, METH_O),
          DECLARE_METHOD(t_LeafReader, getPointValues, METH_O),
          DECLARE_METHOD(t_LeafReader, getSortedDocValues, METH_O),
          DECLARE_METHOD(t_LeafReader, getSortedNumericDocValues, METH_O),
          DECLARE_METHOD(t_LeafReader, getSortedSetDocValues, METH_O),
          DECLARE_METHOD(t_LeafReader, getSumDocFreq, METH_VARARGS),
          DECLARE_METHOD(t_LeafReader, getSumTotalTermFreq, METH_VARARGS),
          DECLARE_METHOD(t_LeafReader, postings, METH_VARARGS),
          DECLARE_METHOD(t_LeafReader, terms, METH_O),
          DECLARE_METHOD(t_LeafReader, totalTermFreq, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        static PyType_Slot PY_TYPE_SLOTS(LeafReader)[] = {
          { Py_tp_methods, t_LeafReader__methods_ },
          { Py_tp_init, (void *) abstract_init },
          { Py_tp_getset, t_LeafReader__fields_ },
          { 0, NULL }
        };

        static PyType_Def *PY_TYPE_BASES(LeafReader)[] = {
          &PY_TYPE_DEF(::org::apache::lucene::index::IndexReader),
          NULL
        };

        DEFINE_TYPE(LeafReader, t_LeafReader, LeafReader);

        void t_LeafReader::install(PyObject *module)
        {
          installType(&PY_TYPE(LeafReader), &PY_TYPE_DEF(LeafReader), module, "LeafReader", 0);
        }

        void t_LeafReader::initialize(PyObject *module)
        {
          PyObject_SetAttrString((PyObject *) PY_TYPE(LeafReader), "class_", make_descriptor(LeafReader::initializeClass, 1));
          PyObject_SetAttrString((PyObject *) PY_TYPE(LeafReader), "wrapfn_", make_descriptor(t_LeafReader::wrap_jobject));
          PyObject_SetAttrString((PyObject *) PY_TYPE(LeafReader), "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_LeafReader_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, LeafReader::initializeClass, 1)))
            return NULL;
          return t_LeafReader::wrap_Object(LeafReader(((t_LeafReader *) arg)->object.this$));
        }
        static PyObject *t_LeafReader_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, LeafReader::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static PyObject *t_LeafReader_checkIntegrity(t_LeafReader *self)
        {
          OBJ_CALL(self->object.checkIntegrity());
          Py_RETURN_NONE;
        }

        static PyObject *t_LeafReader_docFreq(t_LeafReader *self, PyObject *args)
        {
          ::org::apache::lucene::index::Term a0((jobject) NULL);
          jint result;

          if (!parseArgs(args, "k", ::org::apache::lucene::index::Term::initializeClass, &a0))
          {
            OBJ_CALL(result = self->object.docFreq(a0));
            return PyLong_FromLong((long) result);
          }

          return callSuper(PY_TYPE(LeafReader), (PyObject *) self, "docFreq", args, 2);
        }

        static PyObject *t_LeafReader_getBinaryDocValues(t_LeafReader *self, PyObject *arg)
        {
          ::java::lang::String a0((jobject) NULL);
          ::org::apache::lucene::index::BinaryDocValues result((jobject) NULL);

          if (!parseArg(arg, "s", &a0))
          {
            OBJ_CALL(result = self->object.getBinaryDocValues(a0));
            return ::org::apache::lucene::index::t_BinaryDocValues::wrap_Object(result);
          }

          PyErr_SetArgsError((PyObject *) self, "getBinaryDocValues", arg);
          return NULL;
        }

        static PyObject *t_LeafReader_getContext(t_LeafReader *self, PyObject *args)
        {
          ::org::apache::lucene::index::LeafReaderContext result((jobject) NULL);

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.getContext());
            return ::org::apache::lucene::index::t_LeafReaderContext::wrap_Object(result);
          }

          return callSuper(PY_TYPE(LeafReader), (PyObject *) self, "getContext", args, 2);
        }

        static PyObject *t_LeafReader_getCoreCacheHelper(t_LeafReader *self)
        {
          ::org::apache::lucene::index::IndexReader$CacheHelper result((jobject) NULL);
          OBJ_CALL(result = self->object.getCoreCacheHelper());
          return ::org::apache::lucene::index::t_IndexReader$CacheHelper::wrap_Object(result);
        }

        static PyObject *t_LeafReader_getDocCount(t_LeafReader *self, PyObject *args)
        {
          ::java::lang::String a0((jobject) NULL);
          jint result;

          if (!parseArgs(args, "s", &a0))
          {
            OBJ_CALL(result = self->object.getDocCount(a0));
            return PyLong_FromLong((long) result);
          }

          return callSuper(PY_TYPE(LeafReader), (PyObject *) self, "getDocCount", args, 2);
        }

        static PyObject *t_LeafReader_getFieldInfos(t_LeafReader *self)
        {
          ::org::apache::lucene::index::FieldInfos result((jobject) NULL);
          OBJ_CALL(result = self->object.getFieldInfos());
          return ::org::apache::lucene::index::t_FieldInfos::wrap_Object(result);
        }

        static PyObject *t_LeafReader_getLiveDocs(t_LeafReader *self)
        {
          ::org::apache::lucene::util::Bits result((jobject) NULL);
          OBJ_CALL(result = self->object.getLiveDocs());
          return ::org::apache::lucene::util::t_Bits::wrap_Object(result);
        }

        static PyObject *t_LeafReader_getMetaData(t_LeafReader *self)
        {
          ::org::apache::lucene::index::LeafMetaData result((jobject) NULL);
          OBJ_CALL(result = self->object.getMetaData());
          return ::org::apache::lucene::index::t_LeafMetaData::wrap_Object(result);
        }

        static PyObject *t_LeafReader_getNormValues(t_LeafReader *self, PyObject *arg)
        {
          ::java::lang::String a0((jobject) NULL);
          ::org::apache::lucene::index::NumericDocValues result((jobject) NULL);

          if (!parseArg(arg, "s", &a0))
          {
            OBJ_CALL(result = self->object.getNormValues(a0));
            return ::org::apache::lucene::index::t_NumericDocValues::wrap_Object(result);
          }

          PyErr_SetArgsError((PyObject *) self, "getNormValues", arg);
          return NULL;
        }

        static PyObject *t_LeafReader_getNumericDocValues(t_LeafReader *self, PyObject *arg)
        {
          ::java::lang::String a0((jobject) NULL);
          ::org::apache::lucene::index::NumericDocValues result((jobject) NULL);

          if (!parseArg(arg, "s", &a0))
          {
            OBJ_CALL(result = self->object.getNumericDocValues(a0));
            return ::org::apache::lucene::index::t_NumericDocValues::wrap_Object(result);
          }

          PyErr_SetArgsError((PyObject *) self, "getNumericDocValues", arg);
          return NULL;
        }

        static PyObject *t_LeafReader_getPointValues(t_LeafReader *self, PyObject *arg)
        {
          ::java::lang::String a0((jobject) NULL);
          ::org::apache::lucene::index::PointValues result((jobject) NULL);

          if (!parseArg(arg, "s", &a0))
          {
            OBJ_CALL(result = self->object.getPointValues(a0));
            return ::org::apache::lucene::index::t_PointValues::wrap_Object(result);
          }

          PyErr_SetArgsError((PyObject *) self, "getPointValues", arg);
          return NULL;
        }

        static PyObject *t_LeafReader_getSortedDocValues(t_LeafReader *self, PyObject *arg)
        {
          ::java::lang::String a0((jobject) NULL);
          ::org::apache::lucene::index::SortedDocValues result((jobject) NULL);

          if (!parseArg(arg, "s", &a0))
          {
            OBJ_CALL(result = self->object.getSortedDocValues(a0));
            return ::org::apache::lucene::index::t_SortedDocValues::wrap_Object(result);
          }

          PyErr_SetArgsError((PyObject *) self, "getSortedDocValues", arg);
          return NULL;
        }

        static PyObject *t_LeafReader_getSortedNumericDocValues(t_LeafReader *self, PyObject *arg)
        {
          ::java::lang::String a0((jobject) NULL);
          ::org::apache::lucene::index::SortedNumericDocValues result((jobject) NULL);

          if (!parseArg(arg, "s", &a0))
          {
            OBJ_CALL(result = self->object.getSortedNumericDocValues(a0));
            return ::org::apache::lucene::index::t_SortedNumericDocValues::wrap_Object(result);
          }

          PyErr_SetArgsError((PyObject *) self, "getSortedNumericDocValues", arg);
          return NULL;
        }

        static PyObject *t_LeafReader_getSortedSetDocValues(t_LeafReader *self, PyObject *arg)
        {
          ::java::lang::String a0((jobject) NULL);
          ::org::apache::lucene::index::SortedSetDocValues result((jobject) NULL);

          if (!parseArg(arg, "s", &a0))
          {
            OBJ_CALL(result = self->object.getSortedSetDocValues(a0));
            return ::org::apache::lucene::index::t_SortedSetDocValues::wrap_Object(result);
          }

          PyErr_SetArgsError((PyObject *) self, "getSortedSetDocValues", arg);
          return NULL;
        }

        static PyObject *t_LeafReader_getSumDocFreq(t_LeafReader *self, PyObject *args)
        {
          ::java::lang::String a0((jobject) NULL);
          jlong result;

          if (!parseArgs(args, "s", &a0))
          {
            OBJ_CALL(result = self->object.getSumDocFreq(a0));
            return PyLong_FromLongLong((PY_LONG_LONG) result);
          }

          return callSuper(PY_TYPE(LeafReader), (PyObject *) self, "getSumDocFreq", args, 2);
        }

        static PyObject *t_LeafReader_getSumTotalTermFreq(t_LeafReader *self, PyObject *args)
        {
          ::java::lang::String a0((jobject) NULL);
          jlong result;

          if (!parseArgs(args, "s", &a0))
          {
            OBJ_CALL(result = self->object.getSumTotalTermFreq(a0));
            return PyLong_FromLongLong((PY_LONG_LONG) result);
          }

          return callSuper(PY_TYPE(LeafReader), (PyObject *) self, "getSumTotalTermFreq", args, 2);
        }

        static PyObject *t_LeafReader_postings(t_LeafReader *self, PyObject *args)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 1:
            {
              ::org::apache::lucene::index::Term a0((jobject) NULL);
              ::org::apache::lucene::index::PostingsEnum result((jobject) NULL);

              if (!parseArgs(args, "k", ::org::apache::lucene::index::Term::initializeClass, &a0))
              {
                OBJ_CALL(result = self->object.postings(a0));
                return ::org::apache::lucene::index::t_PostingsEnum::wrap_Object(result);
              }
            }
            break;
           case 2:
            {
              ::org::apache::lucene::index::Term a0((jobject) NULL);
              jint a1;
              ::org::apache::lucene::index::PostingsEnum result((jobject) NULL);

              if (!parseArgs(args, "kI", ::org::apache::lucene::index::Term::initializeClass, &a0, &a1))
              {
                OBJ_CALL(result = self->object.postings(a0, a1));
                return ::org::apache::lucene::index::t_PostingsEnum::wrap_Object(result);
              }
            }
          }

          PyErr_SetArgsError((PyObject *) self, "postings", args);
          return NULL;
        }

        static PyObject *t_LeafReader_terms(t_LeafReader *self, PyObject *arg)
        {
          ::java::lang::String a0((jobject) NULL);
          ::org::apache::lucene::index::Terms result((jobject) NULL);

          if (!parseArg(arg, "s", &a0))
          {
            OBJ_CALL(result = self->object.terms(a0));
            return ::org::apache::lucene::index::t_Terms::wrap_Object(result);
          }

          PyErr_SetArgsError((PyObject *) self, "terms", arg);
          return NULL;
        }

        static PyObject *t_LeafReader_totalTermFreq(t_LeafReader *self, PyObject *args)
        {
          ::org::apache::lucene::index::Term a0((jobject) NULL);
          jlong result;

          if (!parseArgs(args, "k", ::org::apache::lucene::index::Term::initializeClass, &a0))
          {
            OBJ_CALL(result = self->object.totalTermFreq(a0));
            return PyLong_FromLongLong((PY_LONG_LONG) result);
          }

          return callSuper(PY_TYPE(LeafReader), (PyObject *) self, "totalTermFreq", args, 2);
        }

        static PyObject *t_LeafReader_get__context(t_LeafReader *self, void *data)
        {
          ::org::apache::lucene::index::LeafReaderContext value((jobject) NULL);
          OBJ_CALL(value = self->object.getContext());
          return ::org::apache::lucene::index::t_LeafReaderContext::wrap_Object(value);
        }

        static PyObject *t_LeafReader_get__coreCacheHelper(t_LeafReader *self, void *data)
        {
          ::org::apache::lucene::index::IndexReader$CacheHelper value((jobject) NULL);
          OBJ_CALL(value = self->object.getCoreCacheHelper());
          return ::org::apache::lucene::index::t_IndexReader$CacheHelper::wrap_Object(value);
        }

        static PyObject *t_LeafReader_get__fieldInfos(t_LeafReader *self, void *data)
        {
          ::org::apache::lucene::index::FieldInfos value((jobject) NULL);
          OBJ_CALL(value = self->object.getFieldInfos());
          return ::org::apache::lucene::index::t_FieldInfos::wrap_Object(value);
        }

        static PyObject *t_LeafReader_get__liveDocs(t_LeafReader *self, void *data)
        {
          ::org::apache::lucene::util::Bits value((jobject) NULL);
          OBJ_CALL(value = self->object.getLiveDocs());
          return ::org::apache::lucene::util::t_Bits::wrap_Object(value);
        }

        static PyObject *t_LeafReader_get__metaData(t_LeafReader *self, void *data)
        {
          ::org::apache::lucene::index::LeafMetaData value((jobject) NULL);
          OBJ_CALL(value = self->object.getMetaData());
          return ::org::apache::lucene::index::t_LeafMetaData::wrap_Object(value);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/ko/KoreanNumberFilter$NumberBuffer.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace ko {

          ::java::lang::Class *KoreanNumberFilter$NumberBuffer::class$ = NULL;
          jmethodID *KoreanNumberFilter$NumberBuffer::mids$ = NULL;
          bool KoreanNumberFilter$NumberBuffer::live$ = false;

          jclass KoreanNumberFilter$NumberBuffer::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/ko/KoreanNumberFilter$NumberBuffer");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_9fd2eb66a64e6f0f] = env->getMethodID(cls, "<init>", "(Ljava/lang/String;)V");
              mids$[mid_advance_f2cc1bce94666404] = env->getMethodID(cls, "advance", "()V");
              mids$[mid_charAt_ebc61ec1e57770d1] = env->getMethodID(cls, "charAt", "(I)C");
              mids$[mid_length_9972fcc56b44e79d] = env->getMethodID(cls, "length", "()I");
              mids$[mid_position_9972fcc56b44e79d] = env->getMethodID(cls, "position", "()I");

              class$ = new ::java::lang::Class(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          KoreanNumberFilter$NumberBuffer::KoreanNumberFilter$NumberBuffer(const ::java::lang::String & a0) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_9fd2eb66a64e6f0f, a0.this$)) {}

          void KoreanNumberFilter$NumberBuffer::advance() const
          {
            env->callVoidMethod(this$, mids$[mid_advance_f2cc1bce94666404]);
          }

          jchar KoreanNumberFilter$NumberBuffer::charAt(jint a0) const
          {
            return env->callCharMethod(this$, mids$[mid_charAt_ebc61ec1e57770d1], a0);
          }

          jint KoreanNumberFilter$NumberBuffer::length() const
          {
            return env->callIntMethod(this$, mids$[mid_length_9972fcc56b44e79d]);
          }

          jint KoreanNumberFilter$NumberBuffer::position() const
          {
            return env->callIntMethod(this$, mids$[mid_position_9972fcc56b44e79d]);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace ko {
          static PyObject *t_KoreanNumberFilter$NumberBuffer_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_KoreanNumberFilter$NumberBuffer_instance_(PyTypeObject *type, PyObject *arg);
          static int t_KoreanNumberFilter$NumberBuffer_init_(t_KoreanNumberFilter$NumberBuffer *self, PyObject *args, PyObject *kwds);
          static PyObject *t_KoreanNumberFilter$NumberBuffer_advance(t_KoreanNumberFilter$NumberBuffer *self);
          static PyObject *t_KoreanNumberFilter$NumberBuffer_charAt(t_KoreanNumberFilter$NumberBuffer *self, PyObject *arg);
          static PyObject *t_KoreanNumberFilter$NumberBuffer_length(t_KoreanNumberFilter$NumberBuffer *self);
          static PyObject *t_KoreanNumberFilter$NumberBuffer_position(t_KoreanNumberFilter$NumberBuffer *self);

          static PyMethodDef t_KoreanNumberFilter$NumberBuffer__methods_[] = {
            DECLARE_METHOD(t_KoreanNumberFilter$NumberBuffer, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_KoreanNumberFilter$NumberBuffer, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_KoreanNumberFilter$NumberBuffer, advance, METH_NOARGS),
            DECLARE_METHOD(t_KoreanNumberFilter$NumberBuffer, charAt, METH_O),
            DECLARE_METHOD(t_KoreanNumberFilter$NumberBuffer, length, METH_NOARGS),
            DECLARE_METHOD(t_KoreanNumberFilter$NumberBuffer, position, METH_NOARGS),
            { NULL, NULL, 0, NULL }
          };

          static PyType_Slot PY_TYPE_SLOTS(KoreanNumberFilter$NumberBuffer)[] = {
            { Py_tp_methods, t_KoreanNumberFilter$NumberBuffer__methods_ },
            { Py_tp_init, (void *) t_KoreanNumberFilter$NumberBuffer_init_ },
            { 0, NULL }
          };

          static PyType_Def *PY_TYPE_BASES(KoreanNumberFilter$NumberBuffer)[] = {
            &PY_TYPE_DEF(::java::lang::Object),
            NULL
          };

          DEFINE_TYPE(KoreanNumberFilter$NumberBuffer, t_KoreanNumberFilter$NumberBuffer, KoreanNumberFilter$NumberBuffer);

          void t_KoreanNumberFilter$NumberBuffer::install(PyObject *module)
          {
            installType(&PY_TYPE(KoreanNumberFilter$NumberBuffer), &PY_TYPE_DEF(KoreanNumberFilter$NumberBuffer), module, "KoreanNumberFilter$NumberBuffer", 0);
          }

          void t_KoreanNumberFilter$NumberBuffer::initialize(PyObject *module)
          {
            PyObject_SetAttrString((PyObject *) PY_TYPE(KoreanNumberFilter$NumberBuffer), "class_", make_descriptor(KoreanNumberFilter$NumberBuffer::initializeClass, 1));
            PyObject_SetAttrString((PyObject *) PY_TYPE(KoreanNumberFilter$NumberBuffer), "wrapfn_", make_descriptor(t_KoreanNumberFilter$NumberBuffer::wrap_jobject));
            PyObject_SetAttrString((PyObject *) PY_TYPE(KoreanNumberFilter$NumberBuffer), "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_KoreanNumberFilter$NumberBuffer_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, KoreanNumberFilter$NumberBuffer::initializeClass, 1)))
              return NULL;
            return t_KoreanNumberFilter$NumberBuffer::wrap_Object(KoreanNumberFilter$NumberBuffer(((t_KoreanNumberFilter$NumberBuffer *) arg)->object.this$));
          }
          static PyObject *t_KoreanNumberFilter$NumberBuffer_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, KoreanNumberFilter$NumberBuffer::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_KoreanNumberFilter$NumberBuffer_init_(t_KoreanNumberFilter$NumberBuffer *self, PyObject *args, PyObject *kwds)
          {
            ::java::lang::String a0((jobject) NULL);
            KoreanNumberFilter$NumberBuffer object((jobject) NULL);

            if (!parseArgs(args, "s", &a0))
            {
              INT_CALL(object = KoreanNumberFilter$NumberBuffer(a0));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_KoreanNumberFilter$NumberBuffer_advance(t_KoreanNumberFilter$NumberBuffer *self)
          {
            OBJ_CALL(self->object.advance());
            Py_RETURN_NONE;
          }

          static PyObject *t_KoreanNumberFilter$NumberBuffer_charAt(t_KoreanNumberFilter$NumberBuffer *self, PyObject *arg)
          {
            jint a0;
            jchar result;

            if (!parseArg(arg, "I", &a0))
            {
              OBJ_CALL(result = self->object.charAt(a0));
              return c2p(result);
            }

            PyErr_SetArgsError((PyObject *) self, "charAt", arg);
            return NULL;
          }

          static PyObject *t_KoreanNumberFilter$NumberBuffer_length(t_KoreanNumberFilter$NumberBuffer *self)
          {
            jint result;
            OBJ_CALL(result = self->object.length());
            return PyLong_FromLong((long) result);
          }

          static PyObject *t_KoreanNumberFilter$NumberBuffer_position(t_KoreanNumberFilter$NumberBuffer *self)
          {
            jint result;
            OBJ_CALL(result = self->object.position());
            return PyLong_FromLong((long) result);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queryparser/flexible/standard/config/PointsConfig.h"
#include "java/text/NumberFormat.h"
#include "java/lang/Number.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace standard {
            namespace config {

              ::java::lang::Class *PointsConfig::class$ = NULL;
              jmethodID *PointsConfig::mids$ = NULL;
              bool PointsConfig::live$ = false;

              jclass PointsConfig::initializeClass(bool getOnly)
              {
                if (getOnly)
                  return (jclass) (live$ ? class$->this$ : NULL);
                if (class$ == NULL)
                {
                  jclass cls = (jclass) env->findClass("org/apache/lucene/queryparser/flexible/standard/config/PointsConfig");

                  mids$ = new jmethodID[max_mid];
                  mids$[mid_init$_3625cbd5c8220850] = env->getMethodID(cls, "<init>", "(Ljava/text/NumberFormat;Ljava/lang/Class;)V");
                  mids$[mid_equals_8b72f2dcdde6fd1d] = env->getMethodID(cls, "equals", "(Ljava/lang/Object;)Z");
                  mids$[mid_getNumberFormat_a56386c4cfd9cbe9] = env->getMethodID(cls, "getNumberFormat", "()Ljava/text/NumberFormat;");
                  mids$[mid_getType_9df2cc6ebce035fe] = env->getMethodID(cls, "getType", "()Ljava/lang/Class;");
                  mids$[mid_hashCode_9972fcc56b44e79d] = env->getMethodID(cls, "hashCode", "()I");
                  mids$[mid_setNumberFormat_cd4a218c853203a8] = env->getMethodID(cls, "setNumberFormat", "(Ljava/text/NumberFormat;)V");
                  mids$[mid_setType_67ec072891501dcc] = env->getMethodID(cls, "setType", "(Ljava/lang/Class;)V");

                  class$ = new ::java::lang::Class(cls);
                  live$ = true;
                }
                return (jclass) class$->this$;
              }

              PointsConfig::PointsConfig(const ::java::text::NumberFormat & a0, const ::java::lang::Class & a1) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_3625cbd5c8220850, a0.this$, a1.this$)) {}

              jboolean PointsConfig::equals(const ::java::lang::Object & a0) const
              {
                return env->callBooleanMethod(this$, mids$[mid_equals_8b72f2dcdde6fd1d], a0.this$);
              }

              ::java::text::NumberFormat PointsConfig::getNumberFormat() const
              {
                return ::java::text::NumberFormat(env->callObjectMethod(this$, mids$[mid_getNumberFormat_a56386c4cfd9cbe9]));
              }

              ::java::lang::Class PointsConfig::getType() const
              {
                return ::java::lang::Class(env->callObjectMethod(this$, mids$[mid_getType_9df2cc6ebce035fe]));
              }

              jint PointsConfig::hashCode() const
              {
                return env->callIntMethod(this$, mids$[mid_hashCode_9972fcc56b44e79d]);
              }

              void PointsConfig::setNumberFormat(const ::java::text::NumberFormat & a0) const
              {
                env->callVoidMethod(this$, mids$[mid_setNumberFormat_cd4a218c853203a8], a0.this$);
              }

              void PointsConfig::setType(const ::java::lang::Class & a0) const
              {
                env->callVoidMethod(this$, mids$[mid_setType_67ec072891501dcc], a0.this$);
              }
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace standard {
            namespace config {
              static PyObject *t_PointsConfig_cast_(PyTypeObject *type, PyObject *arg);
              static PyObject *t_PointsConfig_instance_(PyTypeObject *type, PyObject *arg);
              static int t_PointsConfig_init_(t_PointsConfig *self, PyObject *args, PyObject *kwds);
              static PyObject *t_PointsConfig_equals(t_PointsConfig *self, PyObject *args);
              static PyObject *t_PointsConfig_getNumberFormat(t_PointsConfig *self);
              static PyObject *t_PointsConfig_getType(t_PointsConfig *self);
              static PyObject *t_PointsConfig_hashCode(t_PointsConfig *self, PyObject *args);
              static PyObject *t_PointsConfig_setNumberFormat(t_PointsConfig *self, PyObject *arg);
              static PyObject *t_PointsConfig_setType(t_PointsConfig *self, PyObject *arg);
              static PyObject *t_PointsConfig_get__numberFormat(t_PointsConfig *self, void *data);
              static int t_PointsConfig_set__numberFormat(t_PointsConfig *self, PyObject *arg, void *data);
              static PyObject *t_PointsConfig_get__type(t_PointsConfig *self, void *data);
              static int t_PointsConfig_set__type(t_PointsConfig *self, PyObject *arg, void *data);
              static PyGetSetDef t_PointsConfig__fields_[] = {
                DECLARE_GETSET_FIELD(t_PointsConfig, numberFormat),
                DECLARE_GETSET_FIELD(t_PointsConfig, type),
                { NULL, NULL, NULL, NULL, NULL }
              };

              static PyMethodDef t_PointsConfig__methods_[] = {
                DECLARE_METHOD(t_PointsConfig, cast_, METH_O | METH_CLASS),
                DECLARE_METHOD(t_PointsConfig, instance_, METH_O | METH_CLASS),
                DECLARE_METHOD(t_PointsConfig, equals, METH_VARARGS),
                DECLARE_METHOD(t_PointsConfig, getNumberFormat, METH_NOARGS),
                DECLARE_METHOD(t_PointsConfig, getType, METH_NOARGS),
                DECLARE_METHOD(t_PointsConfig, hashCode, METH_VARARGS),
                DECLARE_METHOD(t_PointsConfig, setNumberFormat, METH_O),
                DECLARE_METHOD(t_PointsConfig, setType, METH_O),
                { NULL, NULL, 0, NULL }
              };

              static PyType_Slot PY_TYPE_SLOTS(PointsConfig)[] = {
                { Py_tp_methods, t_PointsConfig__methods_ },
                { Py_tp_init, (void *) t_PointsConfig_init_ },
                { Py_tp_getset, t_PointsConfig__fields_ },
                { 0, NULL }
              };

              static PyType_Def *PY_TYPE_BASES(PointsConfig)[] = {
                &PY_TYPE_DEF(::java::lang::Object),
                NULL
              };

              DEFINE_TYPE(PointsConfig, t_PointsConfig, PointsConfig);

              void t_PointsConfig::install(PyObject *module)
              {
                installType(&PY_TYPE(PointsConfig), &PY_TYPE_DEF(PointsConfig), module, "PointsConfig", 0);
              }

              void t_PointsConfig::initialize(PyObject *module)
              {
                PyObject_SetAttrString((PyObject *) PY_TYPE(PointsConfig), "class_", make_descriptor(PointsConfig::initializeClass, 1));
                PyObject_SetAttrString((PyObject *) PY_TYPE(PointsConfig), "wrapfn_", make_descriptor(t_PointsConfig::wrap_jobject));
                PyObject_SetAttrString((PyObject *) PY_TYPE(PointsConfig), "boxfn_", make_descriptor(boxObject));
              }

              static PyObject *t_PointsConfig_cast_(PyTypeObject *type, PyObject *arg)
              {
                if (!(arg = castCheck(arg, PointsConfig::initializeClass, 1)))
                  return NULL;
                return t_PointsConfig::wrap_Object(PointsConfig(((t_PointsConfig *) arg)->object.this$));
              }
              static PyObject *t_PointsConfig_instance_(PyTypeObject *type, PyObject *arg)
              {
                if (!castCheck(arg, PointsConfig::initializeClass, 0))
                  Py_RETURN_FALSE;
                Py_RETURN_TRUE;
              }

              static int t_PointsConfig_init_(t_PointsConfig *self, PyObject *args, PyObject *kwds)
              {
                ::java::text::NumberFormat a0((jobject) NULL);
                ::java::lang::Class a1((jobject) NULL);
                PyTypeObject **p1;
                PointsConfig object((jobject) NULL);

                if (!parseArgs(args, "kK", ::java::text::NumberFormat::initializeClass, ::java::lang::Class::initializeClass, &a0, &a1, &p1, ::java::lang::t_Class::parameters_))
                {
                  INT_CALL(object = PointsConfig(a0, a1));
                  self->object = object;
                }
                else
                {
                  PyErr_SetArgsError((PyObject *) self, "__init__", args);
                  return -1;
                }

                return 0;
              }

              static PyObject *t_PointsConfig_equals(t_PointsConfig *self, PyObject *args)
              {
                ::java::lang::Object a0((jobject) NULL);
                jboolean result;

                if (!parseArgs(args, "o", &a0))
                {
                  OBJ_CALL(result = self->object.equals(a0));
                  Py_RETURN_BOOL(result);
                }

                return callSuper(PY_TYPE(PointsConfig), (PyObject *) self, "equals", args, 2);
              }

              static PyObject *t_PointsConfig_getNumberFormat(t_PointsConfig *self)
              {
                ::java::text::NumberFormat result((jobject) NULL);
                OBJ_CALL(result = self->object.getNumberFormat());
                return ::java::text::t_NumberFormat::wrap_Object(result);
              }

              static PyObject *t_PointsConfig_getType(t_PointsConfig *self)
              {
                ::java::lang::Class result((jobject) NULL);
                OBJ_CALL(result = self->object.getType());
                return ::java::lang::t_Class::wrap_Object(result);
              }

              static PyObject *t_PointsConfig_hashCode(t_PointsConfig *self, PyObject *args)
              {
                jint result;

                if (!parseArgs(args, ""))
                {
                  OBJ_CALL(result = self->object.hashCode());
                  return PyLong_FromLong((long) result);
                }

                return callSuper(PY_TYPE(PointsConfig), (PyObject *) self, "hashCode", args, 2);
              }

              static PyObject *t_PointsConfig_setNumberFormat(t_PointsConfig *self, PyObject *arg)
              {
                ::java::text::NumberFormat a0((jobject) NULL);

                if (!parseArg(arg, "k", ::java::text::NumberFormat::initializeClass, &a0))
                {
                  OBJ_CALL(self->object.setNumberFormat(a0));
                  Py_RETURN_NONE;
                }

                PyErr_SetArgsError((PyObject *) self, "setNumberFormat", arg);
                return NULL;
              }

              static PyObject *t_PointsConfig_setType(t_PointsConfig *self, PyObject *arg)
              {
                ::java::lang::Class a0((jobject) NULL);
                PyTypeObject **p0;

                if (!parseArg(arg, "K", ::java::lang::Class::initializeClass, &a0, &p0, ::java::lang::t_Class::parameters_))
                {
                  OBJ_CALL(self->object.setType(a0));
                  Py_RETURN_NONE;
                }

                PyErr_SetArgsError((PyObject *) self, "setType", arg);
                return NULL;
              }

              static PyObject *t_PointsConfig_get__numberFormat(t_PointsConfig *self, void *data)
              {
                ::java::text::NumberFormat value((jobject) NULL);
                OBJ_CALL(value = self->object.getNumberFormat());
                return ::java::text::t_NumberFormat::wrap_Object(value);
              }
              static int t_PointsConfig_set__numberFormat(t_PointsConfig *self, PyObject *arg, void *data)
              {
                {
                  ::java::text::NumberFormat value((jobject) NULL);
                  if (!parseArg(arg, "k", ::java::text::NumberFormat::initializeClass, &value))
                  {
                    INT_CALL(self->object.setNumberFormat(value));
                    return 0;
                  }
                }
                PyErr_SetArgsError((PyObject *) self, "numberFormat", arg);
                return -1;
              }

              static PyObject *t_PointsConfig_get__type(t_PointsConfig *self, void *data)
              {
                ::java::lang::Class value((jobject) NULL);
                OBJ_CALL(value = self->object.getType());
                return ::java::lang::t_Class::wrap_Object(value);
              }
              static int t_PointsConfig_set__type(t_PointsConfig *self, PyObject *arg, void *data)
              {
                {
                  ::java::lang::Class value((jobject) NULL);
                  if (!parseArg(arg, "k", ::java::lang::Class::initializeClass, &value))
                  {
                    INT_CALL(self->object.setType(value));
                    return 0;
                  }
                }
                PyErr_SetArgsError((PyObject *) self, "type", arg);
                return -1;
              }
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/FuzzyTermsEnum.h"
#include "org/apache/lucene/index/TermsEnum$SeekStatus.h"
#include "org/apache/lucene/index/Terms.h"
#include "org/apache/lucene/index/ImpactsEnum.h"
#include "org/apache/lucene/index/Term.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/index/TermState.h"
#include "org/apache/lucene/util/AttributeSource.h"
#include "org/apache/lucene/index/PostingsEnum.h"
#include "org/apache/lucene/util/BytesRef.h"
#include "java/io/IOException.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {

        ::java::lang::Class *FuzzyTermsEnum::class$ = NULL;
        jmethodID *FuzzyTermsEnum::mids$ = NULL;
        bool FuzzyTermsEnum::live$ = false;

        jclass FuzzyTermsEnum::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/search/FuzzyTermsEnum");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_50511c3effe38830] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/index/Terms;Lorg/apache/lucene/index/Term;IIZ)V");
            mids$[mid_attributes_8fce18d62d0e145e] = env->getMethodID(cls, "attributes", "()Lorg/apache/lucene/util/AttributeSource;");
            mids$[mid_docFreq_9972fcc56b44e79d] = env->getMethodID(cls, "docFreq", "()I");
            mids$[mid_getBoost_58aec2b64dff50c8] = env->getMethodID(cls, "getBoost", "()F");
            mids$[mid_impacts_db5ea3c87adc7c65] = env->getMethodID(cls, "impacts", "(I)Lorg/apache/lucene/index/ImpactsEnum;");
            mids$[mid_next_7af2ea2e37ce82b8] = env->getMethodID(cls, "next", "()Lorg/apache/lucene/util/BytesRef;");
            mids$[mid_ord_2e5ae9edcb9b072f] = env->getMethodID(cls, "ord", "()J");
            mids$[mid_postings_bb7f8f714d51176b] = env->getMethodID(cls, "postings", "(Lorg/apache/lucene/index/PostingsEnum;I)Lorg/apache/lucene/index/PostingsEnum;");
            mids$[mid_seekCeil_78824f53cd7bdb8a] = env->getMethodID(cls, "seekCeil", "(Lorg/apache/lucene/util/BytesRef;)Lorg/apache/lucene/index/TermsEnum$SeekStatus;");
            mids$[mid_seekExact_553d972fe19daaec] = env->getMethodID(cls, "seekExact", "(Lorg/apache/lucene/util/BytesRef;)Z");
            mids$[mid_seekExact_9c778c9bce6694df] = env->getMethodID(cls, "seekExact", "(J)V");
            mids$[mid_seekExact_59a5c9565dacabef] = env->getMethodID(cls, "seekExact", "(Lorg/apache/lucene/util/BytesRef;Lorg/apache/lucene/index/TermState;)V");
            mids$[mid_setMaxNonCompetitiveBoost_8e1d952dd65cdc3a] = env->getMethodID(cls, "setMaxNonCompetitiveBoost", "(F)V");
            mids$[mid_term_7af2ea2e37ce82b8] = env->getMethodID(cls, "term", "()Lorg/apache/lucene/util/BytesRef;");
            mids$[mid_termState_774a8ebb2c222d2d] = env->getMethodID(cls, "termState", "()Lorg/apache/lucene/index/TermState;");
            mids$[mid_totalTermFreq_2e5ae9edcb9b072f] = env->getMethodID(cls, "totalTermFreq", "()J");

            class$ = new ::java::lang::Class(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        FuzzyTermsEnum::FuzzyTermsEnum(const ::org::apache::lucene::index::Terms & a0, const ::org::apache::lucene::index::Term & a1, jint a2, jint a3, jboolean a4) : ::org::apache::lucene::index::TermsEnum(env->newObject(initializeClass, &mids$, mid_init$_50511c3effe38830, a0.this$, a1.this$, a2, a3, a4)) {}

        ::org::apache::lucene::util::AttributeSource FuzzyTermsEnum::attributes() const
        {
          return ::org::apache::lucene::util::AttributeSource(env->callObjectMethod(this$, mids$[mid_attributes_8fce18d62d0e145e]));
        }

        jint FuzzyTermsEnum::docFreq() const
        {
          return env->callIntMethod(this$, mids$[mid_docFreq_9972fcc56b44e79d]);
        }

        jfloat FuzzyTermsEnum::getBoost() const
        {
          return env->callFloatMethod(this$, mids$[mid_getBoost_58aec2b64dff50c8]);
        }

        ::org::apache::lucene::index::ImpactsEnum FuzzyTermsEnum::impacts(jint a0) const
        {
          return ::org::apache::lucene::index::ImpactsEnum(env->callObjectMethod(this$, mids$[mid_impacts_db5ea3c87adc7c65], a0));
        }

        ::org::apache::lucene::util::BytesRef FuzzyTermsEnum::next() const
        {
          return ::org::apache::lucene::util::BytesRef(env->callObjectMethod(this$, mids$[mid_next_7af2ea2e37ce82b8]));
        }

        jlong FuzzyTermsEnum::ord() const
        {
          return env->callLongMethod(this$, mids$[mid_ord_2e5ae9edcb9b072f]);
        }

        ::org::apache::lucene::index::PostingsEnum FuzzyTermsEnum::postings(const ::org::apache::lucene::index::PostingsEnum & a0, jint a1) const
        {
          return ::org::apache::lucene::index::PostingsEnum(env->callObjectMethod(this$, mids$[mid_postings_bb7f8f714d51176b], a0.this$, a1));
        }

        ::org::apache::lucene::index::TermsEnum$SeekStatus FuzzyTermsEnum::seekCeil(const ::org::apache::lucene::util::BytesRef & a0) const
        {
          return ::org::apache::lucene::index::TermsEnum$SeekStatus(env->callObjectMethod(this$, mids$[mid_seekCeil_78824f53cd7bdb8a], a0.this$));
        }

        jboolean FuzzyTermsEnum::seekExact(const ::org::apache::lucene::util::BytesRef & a0) const
        {
          return env->callBooleanMethod(this$, mids$[mid_seekExact_553d972fe19daaec], a0.this$);
        }

        void FuzzyTermsEnum::seekExact(jlong a0) const
        {
          env->callVoidMethod(this$, mids$[mid_seekExact_9c778c9bce6694df], a0);
        }

        void FuzzyTermsEnum::seekExact(const ::org::apache::lucene::util::BytesRef & a0, const ::org::apache::lucene::index::TermState & a1) const
        {
          env->callVoidMethod(this$, mids$[mid_seekExact_59a5c9565dacabef], a0.this$, a1.this$);
        }

        void FuzzyTermsEnum::setMaxNonCompetitiveBoost(jfloat a0) const
        {
          env->callVoidMethod(this$, mids$[mid_setMaxNonCompetitiveBoost_8e1d952dd65cdc3a], a0);
        }

        ::org::apache::lucene::util::BytesRef FuzzyTermsEnum::term() const
        {
          return ::org::apache::lucene::util::BytesRef(env->callObjectMethod(this$, mids$[mid_term_7af2ea2e37ce82b8]));
        }

        ::org::apache::lucene::index::TermState FuzzyTermsEnum::termState() const
        {
          return ::org::apache::lucene::index::TermState(env->callObjectMethod(this$, mids$[mid_termState_774a8ebb2c222d2d]));
        }

        jlong FuzzyTermsEnum::totalTermFreq() const
        {
          return env->callLongMethod(this$, mids$[mid_totalTermFreq_2e5ae9edcb9b072f]);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"
#include "org/apache/lucene/search/FuzzyTermsEnum$FuzzyTermsException.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        static PyObject *t_FuzzyTermsEnum_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_FuzzyTermsEnum_instance_(PyTypeObject *type, PyObject *arg);
        static int t_FuzzyTermsEnum_init_(t_FuzzyTermsEnum *self, PyObject *args, PyObject *kwds);
        static PyObject *t_FuzzyTermsEnum_attributes(t_FuzzyTermsEnum *self, PyObject *args);
        static PyObject *t_FuzzyTermsEnum_docFreq(t_FuzzyTermsEnum *self, PyObject *args);
        static PyObject *t_FuzzyTermsEnum_getBoost(t_FuzzyTermsEnum *self);
        static PyObject *t_FuzzyTermsEnum_impacts(t_FuzzyTermsEnum *self, PyObject *args);
        static PyObject *t_FuzzyTermsEnum_next(t_FuzzyTermsEnum *self, PyObject *args);
        static PyObject *t_FuzzyTermsEnum_ord(t_FuzzyTermsEnum *self, PyObject *args);
        static PyObject *t_FuzzyTermsEnum_postings(t_FuzzyTermsEnum *self, PyObject *args);
        static PyObject *t_FuzzyTermsEnum_seekCeil(t_FuzzyTermsEnum *self, PyObject *args);
        static PyObject *t_FuzzyTermsEnum_seekExact(t_FuzzyTermsEnum *self, PyObject *args);
        static PyObject *t_FuzzyTermsEnum_setMaxNonCompetitiveBoost(t_FuzzyTermsEnum *self, PyObject *arg);
        static PyObject *t_FuzzyTermsEnum_term(t_FuzzyTermsEnum *self, PyObject *args);
        static PyObject *t_FuzzyTermsEnum_termState(t_FuzzyTermsEnum *self, PyObject *args);
        static PyObject *t_FuzzyTermsEnum_totalTermFreq(t_FuzzyTermsEnum *self, PyObject *args);
        static PyObject *t_FuzzyTermsEnum_get__boost(t_FuzzyTermsEnum *self, void *data);
        static int t_FuzzyTermsEnum_set__maxNonCompetitiveBoost(t_FuzzyTermsEnum *self, PyObject *arg, void *data);
        static PyGetSetDef t_FuzzyTermsEnum__fields_[] = {
          DECLARE_GET_FIELD(t_FuzzyTermsEnum, boost),
          DECLARE_SET_FIELD(t_FuzzyTermsEnum, maxNonCompetitiveBoost),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_FuzzyTermsEnum__methods_[] = {
          DECLARE_METHOD(t_FuzzyTermsEnum, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_FuzzyTermsEnum, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_FuzzyTermsEnum, attributes, METH_VARARGS),
          DECLARE_METHOD(t_FuzzyTermsEnum, docFreq, METH_VARARGS),
          DECLARE_METHOD(t_FuzzyTermsEnum, getBoost, METH_NOARGS),
          DECLARE_METHOD(t_FuzzyTermsEnum, impacts, METH_VARARGS),
          DECLARE_METHOD(t_FuzzyTermsEnum, next, METH_VARARGS),
          DECLARE_METHOD(t_FuzzyTermsEnum, ord, METH_VARARGS),
          DECLARE_METHOD(t_FuzzyTermsEnum, postings, METH_VARARGS),
          DECLARE_METHOD(t_FuzzyTermsEnum, seekCeil, METH_VARARGS),
          DECLARE_METHOD(t_FuzzyTermsEnum, seekExact, METH_VARARGS),
          DECLARE_METHOD(t_FuzzyTermsEnum, setMaxNonCompetitiveBoost, METH_O),
          DECLARE_METHOD(t_FuzzyTermsEnum, term, METH_VARARGS),
          DECLARE_METHOD(t_FuzzyTermsEnum, termState, METH_VARARGS),
          DECLARE_METHOD(t_FuzzyTermsEnum, totalTermFreq, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        static PyType_Slot PY_TYPE_SLOTS(FuzzyTermsEnum)[] = {
          { Py_tp_methods, t_FuzzyTermsEnum__methods_ },
          { Py_tp_init, (void *) t_FuzzyTermsEnum_init_ },
          { Py_tp_getset, t_FuzzyTermsEnum__fields_ },
          { Py_tp_iter, (void *) PyObject_SelfIter },
          { Py_tp_iternext, (void *) ((PyObject *(*)(t_FuzzyTermsEnum *)) get_next< t_FuzzyTermsEnum,::org::apache::lucene::util::t_BytesRef,::org::apache::lucene::util::BytesRef >) },
          { 0, NULL }
        };

        static PyType_Def *PY_TYPE_BASES(FuzzyTermsEnum)[] = {
          &PY_TYPE_DEF(::org::apache::lucene::index::TermsEnum),
          NULL
        };

        DEFINE_TYPE(FuzzyTermsEnum, t_FuzzyTermsEnum, FuzzyTermsEnum);

        void t_FuzzyTermsEnum::install(PyObject *module)
        {
          installType(&PY_TYPE(FuzzyTermsEnum), &PY_TYPE_DEF(FuzzyTermsEnum), module, "FuzzyTermsEnum", 0);
          PyObject_SetAttrString((PyObject *) PY_TYPE(FuzzyTermsEnum), "FuzzyTermsException", make_descriptor(&PY_TYPE_DEF(FuzzyTermsEnum$FuzzyTermsException)));
        }

        void t_FuzzyTermsEnum::initialize(PyObject *module)
        {
          PyObject_SetAttrString((PyObject *) PY_TYPE(FuzzyTermsEnum), "class_", make_descriptor(FuzzyTermsEnum::initializeClass, 1));
          PyObject_SetAttrString((PyObject *) PY_TYPE(FuzzyTermsEnum), "wrapfn_", make_descriptor(t_FuzzyTermsEnum::wrap_jobject));
          PyObject_SetAttrString((PyObject *) PY_TYPE(FuzzyTermsEnum), "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_FuzzyTermsEnum_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, FuzzyTermsEnum::initializeClass, 1)))
            return NULL;
          return t_FuzzyTermsEnum::wrap_Object(FuzzyTermsEnum(((t_FuzzyTermsEnum *) arg)->object.this$));
        }
        static PyObject *t_FuzzyTermsEnum_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, FuzzyTermsEnum::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_FuzzyTermsEnum_init_(t_FuzzyTermsEnum *self, PyObject *args, PyObject *kwds)
        {
          ::org::apache::lucene::index::Terms a0((jobject) NULL);
          ::org::apache::lucene::index::Term a1((jobject) NULL);
          jint a2;
          jint a3;
          jboolean a4;
          FuzzyTermsEnum object((jobject) NULL);

          if (!parseArgs(args, "kkIIZ", ::org::apache::lucene::index::Terms::initializeClass, ::org::apache::lucene::index::Term::initializeClass, &a0, &a1, &a2, &a3, &a4))
          {
            INT_CALL(object = FuzzyTermsEnum(a0, a1, a2, a3, a4));
            self->object = object;
          }
          else
          {
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }

        static PyObject *t_FuzzyTermsEnum_attributes(t_FuzzyTermsEnum *self, PyObject *args)
        {
          ::org::apache::lucene::util::AttributeSource result((jobject) NULL);

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.attributes());
            return ::org::apache::lucene::util::t_AttributeSource::wrap_Object(result);
          }

          return callSuper(PY_TYPE(FuzzyTermsEnum), (PyObject *) self, "attributes", args, 2);
        }

        static PyObject *t_FuzzyTermsEnum_docFreq(t_FuzzyTermsEnum *self, PyObject *args)
        {
          jint result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.docFreq());
            return PyLong_FromLong((long) result);
          }

          return callSuper(PY_TYPE(FuzzyTermsEnum), (PyObject *) self, "docFreq", args, 2);
        }

        static PyObject *t_FuzzyTermsEnum_getBoost(t_FuzzyTermsEnum *self)
        {
          jfloat result;
          OBJ_CALL(result = self->object.getBoost());
          return PyFloat_FromDouble((double) result);
        }

        static PyObject *t_FuzzyTermsEnum_impacts(t_FuzzyTermsEnum *self, PyObject *args)
        {
          jint a0;
          ::org::apache::lucene::index::ImpactsEnum result((jobject) NULL);

          if (!parseArgs(args, "I", &a0))
          {
            OBJ_CALL(result = self->object.impacts(a0));
            return ::org::apache::lucene::index::t_ImpactsEnum::wrap_Object(result);
          }

          return callSuper(PY_TYPE(FuzzyTermsEnum), (PyObject *) self, "impacts", args, 2);
        }

        static PyObject *t_FuzzyTermsEnum_next(t_FuzzyTermsEnum *self, PyObject *args)
        {
          ::org::apache::lucene::util::BytesRef result((jobject) NULL);

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.next());
            return ::org::apache::lucene::util::t_BytesRef::wrap_Object(result);
          }

          return callSuper(PY_TYPE(FuzzyTermsEnum), (PyObject *) self, "next", args, 2);
        }

        static PyObject *t_FuzzyTermsEnum_ord(t_FuzzyTermsEnum *self, PyObject *args)
        {
          jlong result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.ord());
            return PyLong_FromLongLong((PY_LONG_LONG) result);
          }

          return callSuper(PY_TYPE(FuzzyTermsEnum), (PyObject *) self, "ord", args, 2);
        }

        static PyObject *t_FuzzyTermsEnum_postings(t_FuzzyTermsEnum *self, PyObject *args)
        {
          ::org::apache::lucene::index::PostingsEnum a0((jobject) NULL);
          jint a1;
          ::org::apache::lucene::index::PostingsEnum result((jobject) NULL);

          if (!parseArgs(args, "kI", ::org::apache::lucene::index::PostingsEnum::initializeClass, &a0, &a1))
          {
            OBJ_CALL(result = self->object.postings(a0, a1));
            return ::org::apache::lucene::index::t_PostingsEnum::wrap_Object(result);
          }

          return callSuper(PY_TYPE(FuzzyTermsEnum), (PyObject *) self, "postings", args, 2);
        }

        static PyObject *t_FuzzyTermsEnum_seekCeil(t_FuzzyTermsEnum *self, PyObject *args)
        {
          ::org::apache::lucene::util::BytesRef a0((jobject) NULL);
          ::org::apache::lucene::index::TermsEnum$SeekStatus result((jobject) NULL);

          if (!parseArgs(args, "k", ::org::apache::lucene::util::BytesRef::initializeClass, &a0))
          {
            OBJ_CALL(result = self->object.seekCeil(a0));
            return ::org::apache::lucene::index::t_TermsEnum$SeekStatus::wrap_Object(result);
          }

          return callSuper(PY_TYPE(FuzzyTermsEnum), (PyObject *) self, "seekCeil", args, 2);
        }

        static PyObject *t_FuzzyTermsEnum_seekExact(t_FuzzyTermsEnum *self, PyObject *args)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 1:
            {
              ::org::apache::lucene::util::BytesRef a0((jobject) NULL);
              jboolean result;

              if (!parseArgs(args, "k", ::org::apache::lucene::util::BytesRef::initializeClass, &a0))
              {
                OBJ_CALL(result = self->object.seekExact(a0));
                Py_RETURN_BOOL(result);
              }
            }
            {
              jlong a0;

              if (!parseArgs(args, "J", &a0))
              {
                OBJ_CALL(self->object.seekExact(a0));
                Py_RETURN_NONE;
              }
            }
            break;
           case 2:
            {
              ::org::apache::lucene::util::BytesRef a0((jobject) NULL);
              ::org::apache::lucene::index::TermState a1((jobject) NULL);

              if (!parseArgs(args, "kk", ::org::apache::lucene::util::BytesRef::initializeClass, ::org::apache::lucene::index::TermState::initializeClass, &a0, &a1))
              {
                OBJ_CALL(self->object.seekExact(a0, a1));
                Py_RETURN_NONE;
              }
            }
          }

          return callSuper(PY_TYPE(FuzzyTermsEnum), (PyObject *) self, "seekExact", args, 2);
        }

        static PyObject *t_FuzzyTermsEnum_setMaxNonCompetitiveBoost(t_FuzzyTermsEnum *self, PyObject *arg)
        {
          jfloat a0;

          if (!parseArg(arg, "F", &a0))
          {
            OBJ_CALL(self->object.setMaxNonCompetitiveBoost(a0));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "setMaxNonCompetitiveBoost", arg);
          return NULL;
        }

        static PyObject *t_FuzzyTermsEnum_term(t_FuzzyTermsEnum *self, PyObject *args)
        {
          ::org::apache::lucene::util::BytesRef result((jobject) NULL);

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.term());
            return ::org::apache::lucene::util::t_BytesRef::wrap_Object(result);
          }

          return callSuper(PY_TYPE(FuzzyTermsEnum), (PyObject *) self, "term", args, 2);
        }

        static PyObject *t_FuzzyTermsEnum_termState(t_FuzzyTermsEnum *self, PyObject *args)
        {
          ::org::apache::lucene::index::TermState result((jobject) NULL);

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.termState());
            return ::org::apache::lucene::index::t_TermState::wrap_Object(result);
          }

          return callSuper(PY_TYPE(FuzzyTermsEnum), (PyObject *) self, "termState", args, 2);
        }

        static PyObject *t_FuzzyTermsEnum_totalTermFreq(t_FuzzyTermsEnum *self, PyObject *args)
        {
          jlong result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.totalTermFreq());
            return PyLong_FromLongLong((PY_LONG_LONG) result);
          }

          return callSuper(PY_TYPE(FuzzyTermsEnum), (PyObject *) self, "totalTermFreq", args, 2);
        }

        static PyObject *t_FuzzyTermsEnum_get__boost(t_FuzzyTermsEnum *self, void *data)
        {
          jfloat value;
          OBJ_CALL(value = self->object.getBoost());
          return PyFloat_FromDouble((double) value);
        }

        static int t_FuzzyTermsEnum_set__maxNonCompetitiveBoost(t_FuzzyTermsEnum *self, PyObject *arg, void *data)
        {
          {
            jfloat value;
            if (!parseArg(arg, "F", &value))
            {
              INT_CALL(self->object.setMaxNonCompetitiveBoost(value));
              return 0;
            }
          }
          PyErr_SetArgsError((PyObject *) self, "maxNonCompetitiveBoost", arg);
          return -1;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/util/fst/IntsRefFSTEnum$InputOutput.h"
#include "org/apache/lucene/util/IntsRef.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        namespace fst {

          ::java::lang::Class *IntsRefFSTEnum$InputOutput::class$ = NULL;
          jmethodID *IntsRefFSTEnum$InputOutput::mids$ = NULL;
          jfieldID *IntsRefFSTEnum$InputOutput::fids$ = NULL;
          bool IntsRefFSTEnum$InputOutput::live$ = false;

          jclass IntsRefFSTEnum$InputOutput::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/util/fst/IntsRefFSTEnum$InputOutput");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_f2cc1bce94666404] = env->getMethodID(cls, "<init>", "()V");

              fids$ = new jfieldID[max_fid];
              fids$[fid_input] = env->getFieldID(cls, "input", "Lorg/apache/lucene/util/IntsRef;");
              fids$[fid_output] = env->getFieldID(cls, "output", "Ljava/lang/Object;");

              class$ = new ::java::lang::Class(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          IntsRefFSTEnum$InputOutput::IntsRefFSTEnum$InputOutput() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_f2cc1bce94666404)) {}

          ::org::apache::lucene::util::IntsRef IntsRefFSTEnum$InputOutput::_get_input() const
          {
            return ::org::apache::lucene::util::IntsRef(env->getObjectField(this$, fids$[fid_input]));
          }

          void IntsRefFSTEnum$InputOutput::_set_input(const ::org::apache::lucene::util::IntsRef & a0) const
          {
            env->setObjectField(this$, fids$[fid_input], a0.this$);
          }

          ::java::lang::Object IntsRefFSTEnum$InputOutput::_get_output() const
          {
            return ::java::lang::Object(env->getObjectField(this$, fids$[fid_output]));
          }

          void IntsRefFSTEnum$InputOutput::_set_output(const ::java::lang::Object & a0) const
          {
            env->setObjectField(this$, fids$[fid_output], a0.this$);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        namespace fst {
          static PyObject *t_IntsRefFSTEnum$InputOutput_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_IntsRefFSTEnum$InputOutput_instance_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_IntsRefFSTEnum$InputOutput_of_(t_IntsRefFSTEnum$InputOutput *self, PyObject *args);
          static int t_IntsRefFSTEnum$InputOutput_init_(t_IntsRefFSTEnum$InputOutput *self, PyObject *args, PyObject *kwds);
          static PyObject *t_IntsRefFSTEnum$InputOutput_get__input(t_IntsRefFSTEnum$InputOutput *self, void *data);
          static int t_IntsRefFSTEnum$InputOutput_set__input(t_IntsRefFSTEnum$InputOutput *self, PyObject *arg, void *data);
          static PyObject *t_IntsRefFSTEnum$InputOutput_get__output(t_IntsRefFSTEnum$InputOutput *self, void *data);
          static int t_IntsRefFSTEnum$InputOutput_set__output(t_IntsRefFSTEnum$InputOutput *self, PyObject *arg, void *data);

          static PyObject *t_IntsRefFSTEnum$InputOutput_get__parameters_(t_IntsRefFSTEnum$InputOutput *self, void *data);
          static PyGetSetDef t_IntsRefFSTEnum$InputOutput__fields_[] = {
            DECLARE_GETSET_FIELD(t_IntsRefFSTEnum$InputOutput, input),
            DECLARE_GETSET_FIELD(t_IntsRefFSTEnum$InputOutput, output),
            DECLARE_GET_FIELD(t_IntsRefFSTEnum$InputOutput, parameters_),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_IntsRefFSTEnum$InputOutput__methods_[] = {
            DECLARE_METHOD(t_IntsRefFSTEnum$InputOutput, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_IntsRefFSTEnum$InputOutput, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_IntsRefFSTEnum$InputOutput, of_, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          static PyType_Slot PY_TYPE_SLOTS(IntsRefFSTEnum$InputOutput)[] = {
            { Py_tp_methods, t_IntsRefFSTEnum$InputOutput__methods_ },
            { Py_tp_init, (void *) t_IntsRefFSTEnum$InputOutput_init_ },
            { Py_tp_getset, t_IntsRefFSTEnum$InputOutput__fields_ },
            { 0, NULL }
          };

          static PyType_Def *PY_TYPE_BASES(IntsRefFSTEnum$InputOutput)[] = {
            &PY_TYPE_DEF(::java::lang::Object),
            NULL
          };

          DEFINE_TYPE(IntsRefFSTEnum$InputOutput, t_IntsRefFSTEnum$InputOutput, IntsRefFSTEnum$InputOutput);
          PyObject *t_IntsRefFSTEnum$InputOutput::wrap_Object(const IntsRefFSTEnum$InputOutput& object, PyTypeObject *p0)
          {
            PyObject *obj = t_IntsRefFSTEnum$InputOutput::wrap_Object(object);
            if (obj != NULL && obj != Py_None)
            {
              t_IntsRefFSTEnum$InputOutput *self = (t_IntsRefFSTEnum$InputOutput *) obj;
              self->parameters[0] = p0;
            }
            return obj;
          }

          PyObject *t_IntsRefFSTEnum$InputOutput::wrap_jobject(const jobject& object, PyTypeObject *p0)
          {
            PyObject *obj = t_IntsRefFSTEnum$InputOutput::wrap_jobject(object);
            if (obj != NULL && obj != Py_None)
            {
              t_IntsRefFSTEnum$InputOutput *self = (t_IntsRefFSTEnum$InputOutput *) obj;
              self->parameters[0] = p0;
            }
            return obj;
          }

          void t_IntsRefFSTEnum$InputOutput::install(PyObject *module)
          {
            installType(&PY_TYPE(IntsRefFSTEnum$InputOutput), &PY_TYPE_DEF(IntsRefFSTEnum$InputOutput), module, "IntsRefFSTEnum$InputOutput", 0);
          }

          void t_IntsRefFSTEnum$InputOutput::initialize(PyObject *module)
          {
            PyObject_SetAttrString((PyObject *) PY_TYPE(IntsRefFSTEnum$InputOutput), "class_", make_descriptor(IntsRefFSTEnum$InputOutput::initializeClass, 1));
            PyObject_SetAttrString((PyObject *) PY_TYPE(IntsRefFSTEnum$InputOutput), "wrapfn_", make_descriptor(t_IntsRefFSTEnum$InputOutput::wrap_jobject));
            PyObject_SetAttrString((PyObject *) PY_TYPE(IntsRefFSTEnum$InputOutput), "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_IntsRefFSTEnum$InputOutput_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, IntsRefFSTEnum$InputOutput::initializeClass, 1)))
              return NULL;
            return t_IntsRefFSTEnum$InputOutput::wrap_Object(IntsRefFSTEnum$InputOutput(((t_IntsRefFSTEnum$InputOutput *) arg)->object.this$));
          }
          static PyObject *t_IntsRefFSTEnum$InputOutput_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, IntsRefFSTEnum$InputOutput::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static PyObject *t_IntsRefFSTEnum$InputOutput_of_(t_IntsRefFSTEnum$InputOutput *self, PyObject *args)
          {
            if (!parseArg(args, "T", 1, &(self->parameters)))
              Py_RETURN_SELF;
            return PyErr_SetArgsError((PyObject *) self, "of_", args);
          }

          static int t_IntsRefFSTEnum$InputOutput_init_(t_IntsRefFSTEnum$InputOutput *self, PyObject *args, PyObject *kwds)
          {
            IntsRefFSTEnum$InputOutput object((jobject) NULL);

            INT_CALL(object = IntsRefFSTEnum$InputOutput());
            self->object = object;

            return 0;
          }
          static PyObject *t_IntsRefFSTEnum$InputOutput_get__parameters_(t_IntsRefFSTEnum$InputOutput *self, void *data)
          {
            return typeParameters(self->parameters, sizeof(self->parameters));
          }

          static PyObject *t_IntsRefFSTEnum$InputOutput_get__input(t_IntsRefFSTEnum$InputOutput *self, void *data)
          {
            ::org::apache::lucene::util::IntsRef value((jobject) NULL);
            OBJ_CALL(value = self->object._get_input());
            return ::org::apache::lucene::util::t_IntsRef::wrap_Object(value);
          }
          static int t_IntsRefFSTEnum$InputOutput_set__input(t_IntsRefFSTEnum$InputOutput *self, PyObject *arg, void *data)
          {
            ::org::apache::lucene::util::IntsRef value((jobject) NULL);
            if (!parseArg(arg, "k", ::org::apache::lucene::util::IntsRef::initializeClass, &value))
            {
              INT_CALL(self->object._set_input(value));
              return 0;
            }
            PyErr_SetArgsError((PyObject *) self, "input", arg);
            return -1;
          }

          static PyObject *t_IntsRefFSTEnum$InputOutput_get__output(t_IntsRefFSTEnum$InputOutput *self, void *data)
          {
            ::java::lang::Object value((jobject) NULL);
            OBJ_CALL(value = self->object._get_output());
            return ::java::lang::t_Object::wrap_Object(value);
          }
          static int t_IntsRefFSTEnum$InputOutput_set__output(t_IntsRefFSTEnum$InputOutput *self, PyObject *arg, void *data)
          {
            ::java::lang::Object value((jobject) NULL);
            if (!parseArg(arg, "o", &value))
            {
              INT_CALL(self->object._set_output(value));
              return 0;
            }
            PyErr_SetArgsError((PyObject *) self, "output", arg);
            return -1;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/index/FilterLeafReader$FilterTermsEnum.h"
#include "org/apache/lucene/index/TermsEnum$SeekStatus.h"
#include "org/apache/lucene/index/ImpactsEnum.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/index/TermState.h"
#include "org/apache/lucene/util/AttributeSource.h"
#include "org/apache/lucene/index/PostingsEnum.h"
#include "org/apache/lucene/util/BytesRef.h"
#include "java/io/IOException.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {

        ::java::lang::Class *FilterLeafReader$FilterTermsEnum::class$ = NULL;
        jmethodID *FilterLeafReader$FilterTermsEnum::mids$ = NULL;
        bool FilterLeafReader$FilterTermsEnum::live$ = false;

        jclass FilterLeafReader$FilterTermsEnum::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/index/FilterLeafReader$FilterTermsEnum");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_b7231ad6ff0513b1] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/index/TermsEnum;)V");
            mids$[mid_attributes_8fce18d62d0e145e] = env->getMethodID(cls, "attributes", "()Lorg/apache/lucene/util/AttributeSource;");
            mids$[mid_docFreq_9972fcc56b44e79d] = env->getMethodID(cls, "docFreq", "()I");
            mids$[mid_impacts_db5ea3c87adc7c65] = env->getMethodID(cls, "impacts", "(I)Lorg/apache/lucene/index/ImpactsEnum;");
            mids$[mid_next_7af2ea2e37ce82b8] = env->getMethodID(cls, "next", "()Lorg/apache/lucene/util/BytesRef;");
            mids$[mid_ord_2e5ae9edcb9b072f] = env->getMethodID(cls, "ord", "()J");
            mids$[mid_postings_bb7f8f714d51176b] = env->getMethodID(cls, "postings", "(Lorg/apache/lucene/index/PostingsEnum;I)Lorg/apache/lucene/index/PostingsEnum;");
            mids$[mid_seekCeil_78824f53cd7bdb8a] = env->getMethodID(cls, "seekCeil", "(Lorg/apache/lucene/util/BytesRef;)Lorg/apache/lucene/index/TermsEnum$SeekStatus;");
            mids$[mid_seekExact_553d972fe19daaec] = env->getMethodID(cls, "seekExact", "(Lorg/apache/lucene/util/BytesRef;)Z");
            mids$[mid_seekExact_9c778c9bce6694df] = env->getMethodID(cls, "seekExact", "(J)V");
            mids$[mid_seekExact_59a5c9565dacabef] = env->getMethodID(cls, "seekExact", "(Lorg/apache/lucene/util/BytesRef;Lorg/apache/lucene/index/TermState;)V");
            mids$[mid_term_7af2ea2e37ce82b8] = env->getMethodID(cls, "term", "()Lorg/apache/lucene/util/BytesRef;");
            mids$[mid_termState_774a8ebb2c222d2d] = env->getMethodID(cls, "termState", "()Lorg/apache/lucene/index/TermState;");
            mids$[mid_totalTermFreq_2e5ae9edcb9b072f] = env->getMethodID(cls, "totalTermFreq", "()J");

            class$ = new ::java::lang::Class(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        FilterLeafReader$FilterTermsEnum::FilterLeafReader$FilterTermsEnum(const ::org::apache::lucene::index::TermsEnum & a0) : ::org::apache::lucene::index::TermsEnum(env->newObject(initializeClass, &mids$, mid_init$_b7231ad6ff0513b1, a0.this$)) {}

        ::org::apache::lucene::util::AttributeSource FilterLeafReader$FilterTermsEnum::attributes() const
        {
          return ::org::apache::lucene::util::AttributeSource(env->callObjectMethod(this$, mids$[mid_attributes_8fce18d62d0e145e]));
        }

        jint FilterLeafReader$FilterTermsEnum::docFreq() const
        {
          return env->callIntMethod(this$, mids$[mid_docFreq_9972fcc56b44e79d]);
        }

        ::org::apache::lucene::index::ImpactsEnum FilterLeafReader$FilterTermsEnum::impacts(jint a0) const
        {
          return ::org::apache::lucene::index::ImpactsEnum(env->callObjectMethod(this$, mids$[mid_impacts_db5ea3c87adc7c65], a0));
        }

        ::org::apache::lucene::util::BytesRef FilterLeafReader$FilterTermsEnum::next() const
        {
          return ::org::apache::lucene::util::BytesRef(env->callObjectMethod(this$, mids$[mid_next_7af2ea2e37ce82b8]));
        }

        jlong FilterLeafReader$FilterTermsEnum::ord() const
        {
          return env->callLongMethod(this$, mids$[mid_ord_2e5ae9edcb9b072f]);
        }

        ::org::apache::lucene::index::PostingsEnum FilterLeafReader$FilterTermsEnum::postings(const ::org::apache::lucene::index::PostingsEnum & a0, jint a1) const
        {
          return ::org::apache::lucene::index::PostingsEnum(env->callObjectMethod(this$, mids$[mid_postings_bb7f8f714d51176b], a0.this$, a1));
        }

        ::org::apache::lucene::index::TermsEnum$SeekStatus FilterLeafReader$FilterTermsEnum::seekCeil(const ::org::apache::lucene::util::BytesRef & a0) const
        {
          return ::org::apache::lucene::index::TermsEnum$SeekStatus(env->callObjectMethod(this$, mids$[mid_seekCeil_78824f53cd7bdb8a], a0.this$));
        }

        jboolean FilterLeafReader$FilterTermsEnum::seekExact(const ::org::apache::lucene::util::BytesRef & a0) const
        {
          return env->callBooleanMethod(this$, mids$[mid_seekExact_553d972fe19daaec], a0.this$);
        }

        void FilterLeafReader$FilterTermsEnum::seekExact(jlong a0) const
        {
          env->callVoidMethod(this$, mids$[mid_seekExact_9c778c9bce6694df], a0);
        }

        void FilterLeafReader$FilterTermsEnum::seekExact(const ::org::apache::lucene::util::BytesRef & a0, const ::org::apache::lucene::index::TermState & a1) const
        {
          env->callVoidMethod(this$, mids$[mid_seekExact_59a5c9565dacabef], a0.this$, a1.this$);
        }

        ::org::apache::lucene::util::BytesRef FilterLeafReader$FilterTermsEnum::term() const
        {
          return ::org::apache::lucene::util::BytesRef(env->callObjectMethod(this$, mids$[mid_term_7af2ea2e37ce82b8]));
        }

        ::org::apache::lucene::index::TermState FilterLeafReader$FilterTermsEnum::termState() const
        {
          return ::org::apache::lucene::index::TermState(env->callObjectMethod(this$, mids$[mid_termState_774a8ebb2c222d2d]));
        }

        jlong FilterLeafReader$FilterTermsEnum::totalTermFreq() const
        {
          return env->callLongMethod(this$, mids$[mid_totalTermFreq_2e5ae9edcb9b072f]);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {
        static PyObject *t_FilterLeafReader$FilterTermsEnum_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_FilterLeafReader$FilterTermsEnum_instance_(PyTypeObject *type, PyObject *arg);
        static int t_FilterLeafReader$FilterTermsEnum_init_(t_FilterLeafReader$FilterTermsEnum *self, PyObject *args, PyObject *kwds);
        static PyObject *t_FilterLeafReader$FilterTermsEnum_attributes(t_FilterLeafReader$FilterTermsEnum *self, PyObject *args);
        static PyObject *t_FilterLeafReader$FilterTermsEnum_docFreq(t_FilterLeafReader$FilterTermsEnum *self, PyObject *args);
        static PyObject *t_FilterLeafReader$FilterTermsEnum_impacts(t_FilterLeafReader$FilterTermsEnum *self, PyObject *args);
        static PyObject *t_FilterLeafReader$FilterTermsEnum_next(t_FilterLeafReader$FilterTermsEnum *self, PyObject *args);
        static PyObject *t_FilterLeafReader$FilterTermsEnum_ord(t_FilterLeafReader$FilterTermsEnum *self, PyObject *args);
        static PyObject *t_FilterLeafReader$FilterTermsEnum_postings(t_FilterLeafReader$FilterTermsEnum *self, PyObject *args);
        static PyObject *t_FilterLeafReader$FilterTermsEnum_seekCeil(t_FilterLeafReader$FilterTermsEnum *self, PyObject *args);
        static PyObject *t_FilterLeafReader$FilterTermsEnum_seekExact(t_FilterLeafReader$FilterTermsEnum *self, PyObject *args);
        static PyObject *t_FilterLeafReader$FilterTermsEnum_term(t_FilterLeafReader$FilterTermsEnum *self, PyObject *args);
        static PyObject *t_FilterLeafReader$FilterTermsEnum_termState(t_FilterLeafReader$FilterTermsEnum *self, PyObject *args);
        static PyObject *t_FilterLeafReader$FilterTermsEnum_totalTermFreq(t_FilterLeafReader$FilterTermsEnum *self, PyObject *args);

        static PyMethodDef t_FilterLeafReader$FilterTermsEnum__methods_[] = {
          DECLARE_METHOD(t_FilterLeafReader$FilterTermsEnum, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_FilterLeafReader$FilterTermsEnum, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_FilterLeafReader$FilterTermsEnum, attributes, METH_VARARGS),
          DECLARE_METHOD(t_FilterLeafReader$FilterTermsEnum, docFreq, METH_VARARGS),
          DECLARE_METHOD(t_FilterLeafReader$FilterTermsEnum, impacts, METH_VARARGS),
          DECLARE_METHOD(t_FilterLeafReader$FilterTermsEnum, next, METH_VARARGS),
          DECLARE_METHOD(t_FilterLeafReader$FilterTermsEnum, ord, METH_VARARGS),
          DECLARE_METHOD(t_FilterLeafReader$FilterTermsEnum, postings, METH_VARARGS),
          DECLARE_METHOD(t_FilterLeafReader$FilterTermsEnum, seekCeil, METH_VARARGS),
          DECLARE_METHOD(t_FilterLeafReader$FilterTermsEnum, seekExact, METH_VARARGS),
          DECLARE_METHOD(t_FilterLeafReader$FilterTermsEnum, term, METH_VARARGS),
          DECLARE_METHOD(t_FilterLeafReader$FilterTermsEnum, termState, METH_VARARGS),
          DECLARE_METHOD(t_FilterLeafReader$FilterTermsEnum, totalTermFreq, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        static PyType_Slot PY_TYPE_SLOTS(FilterLeafReader$FilterTermsEnum)[] = {
          { Py_tp_methods, t_FilterLeafReader$FilterTermsEnum__methods_ },
          { Py_tp_init, (void *) t_FilterLeafReader$FilterTermsEnum_init_ },
          { Py_tp_iter, (void *) PyObject_SelfIter },
          { Py_tp_iternext, (void *) ((PyObject *(*)(t_FilterLeafReader$FilterTermsEnum *)) get_next< t_FilterLeafReader$FilterTermsEnum,::org::apache::lucene::util::t_BytesRef,::org::apache::lucene::util::BytesRef >) },
          { 0, NULL }
        };

        static PyType_Def *PY_TYPE_BASES(FilterLeafReader$FilterTermsEnum)[] = {
          &PY_TYPE_DEF(::org::apache::lucene::index::TermsEnum),
          NULL
        };

        DEFINE_TYPE(FilterLeafReader$FilterTermsEnum, t_FilterLeafReader$FilterTermsEnum, FilterLeafReader$FilterTermsEnum);

        void t_FilterLeafReader$FilterTermsEnum::install(PyObject *module)
        {
          installType(&PY_TYPE(FilterLeafReader$FilterTermsEnum), &PY_TYPE_DEF(FilterLeafReader$FilterTermsEnum), module, "FilterLeafReader$FilterTermsEnum", 0);
        }

        void t_FilterLeafReader$FilterTermsEnum::initialize(PyObject *module)
        {
          PyObject_SetAttrString((PyObject *) PY_TYPE(FilterLeafReader$FilterTermsEnum), "class_", make_descriptor(FilterLeafReader$FilterTermsEnum::initializeClass, 1));
          PyObject_SetAttrString((PyObject *) PY_TYPE(FilterLeafReader$FilterTermsEnum), "wrapfn_", make_descriptor(t_FilterLeafReader$FilterTermsEnum::wrap_jobject));
          PyObject_SetAttrString((PyObject *) PY_TYPE(FilterLeafReader$FilterTermsEnum), "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_FilterLeafReader$FilterTermsEnum_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, FilterLeafReader$FilterTermsEnum::initializeClass, 1)))
            return NULL;
          return t_FilterLeafReader$FilterTermsEnum::wrap_Object(FilterLeafReader$FilterTermsEnum(((t_FilterLeafReader$FilterTermsEnum *) arg)->object.this$));
        }
        static PyObject *t_FilterLeafReader$FilterTermsEnum_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, FilterLeafReader$FilterTermsEnum::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_FilterLeafReader$FilterTermsEnum_init_(t_FilterLeafReader$FilterTermsEnum *self, PyObject *args, PyObject *kwds)
        {
          ::org::apache::lucene::index::TermsEnum a0((jobject) NULL);
          FilterLeafReader$FilterTermsEnum object((jobject) NULL);

          if (!parseArgs(args, "k", ::org::apache::lucene::index::TermsEnum::initializeClass, &a0))
          {
            INT_CALL(object = FilterLeafReader$FilterTermsEnum(a0));
            self->object = object;
          }
          else
          {
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }

        static PyObject *t_FilterLeafReader$FilterTermsEnum_attributes(t_FilterLeafReader$FilterTermsEnum *self, PyObject *args)
        {
          ::org::apache::lucene::util::AttributeSource result((jobject) NULL);

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.attributes());
            return ::org::apache::lucene::util::t_AttributeSource::wrap_Object(result);
          }

          return callSuper(PY_TYPE(FilterLeafReader$FilterTermsEnum), (PyObject *) self, "attributes", args, 2);
        }

        static PyObject *t_FilterLeafReader$FilterTermsEnum_docFreq(t_FilterLeafReader$FilterTermsEnum *self, PyObject *args)
        {
          jint result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.docFreq());
            return PyLong_FromLong((long) result);
          }

          return callSuper(PY_TYPE(FilterLeafReader$FilterTermsEnum), (PyObject *) self, "docFreq", args, 2);
        }

        static PyObject *t_FilterLeafReader$FilterTermsEnum_impacts(t_FilterLeafReader$FilterTermsEnum *self, PyObject *args)
        {
          jint a0;
          ::org::apache::lucene::index::ImpactsEnum result((jobject) NULL);

          if (!parseArgs(args, "I", &a0))
          {
            OBJ_CALL(result = self->object.impacts(a0));
            return ::org::apache::lucene::index::t_ImpactsEnum::wrap_Object(result);
          }

          return callSuper(PY_TYPE(FilterLeafReader$FilterTermsEnum), (PyObject *) self, "impacts", args, 2);
        }

        static PyObject *t_FilterLeafReader$FilterTermsEnum_next(t_FilterLeafReader$FilterTermsEnum *self, PyObject *args)
        {
          ::org::apache::lucene::util::BytesRef result((jobject) NULL);

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.next());
            return ::org::apache::lucene::util::t_BytesRef::wrap_Object(result);
          }

          return callSuper(PY_TYPE(FilterLeafReader$FilterTermsEnum), (PyObject *) self, "next", args, 2);
        }

        static PyObject *t_FilterLeafReader$FilterTermsEnum_ord(t_FilterLeafReader$FilterTermsEnum *self, PyObject *args)
        {
          jlong result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.ord());
            return PyLong_FromLongLong((PY_LONG_LONG) result);
          }

          return callSuper(PY_TYPE(FilterLeafReader$FilterTermsEnum), (PyObject *) self, "ord", args, 2);
        }

        static PyObject *t_FilterLeafReader$FilterTermsEnum_postings(t_FilterLeafReader$FilterTermsEnum *self, PyObject *args)
        {
          ::org::apache::lucene::index::PostingsEnum a0((jobject) NULL);
          jint a1;
          ::org::apache::lucene::index::PostingsEnum result((jobject) NULL);

          if (!parseArgs(args, "kI", ::org::apache::lucene::index::PostingsEnum::initializeClass, &a0, &a1))
          {
            OBJ_CALL(result = self->object.postings(a0, a1));
            return ::org::apache::lucene::index::t_PostingsEnum::wrap_Object(result);
          }

          return callSuper(PY_TYPE(FilterLeafReader$FilterTermsEnum), (PyObject *) self, "postings", args, 2);
        }

        static PyObject *t_FilterLeafReader$FilterTermsEnum_seekCeil(t_FilterLeafReader$FilterTermsEnum *self, PyObject *args)
        {
          ::org::apache::lucene::util::BytesRef a0((jobject) NULL);
          ::org::apache::lucene::index::TermsEnum$SeekStatus result((jobject) NULL);

          if (!parseArgs(args, "k", ::org::apache::lucene::util::BytesRef::initializeClass, &a0))
          {
            OBJ_CALL(result = self->object.seekCeil(a0));
            return ::org::apache::lucene::index::t_TermsEnum$SeekStatus::wrap_Object(result);
          }

          return callSuper(PY_TYPE(FilterLeafReader$FilterTermsEnum), (PyObject *) self, "seekCeil", args, 2);
        }

        static PyObject *t_FilterLeafReader$FilterTermsEnum_seekExact(t_FilterLeafReader$FilterTermsEnum *self, PyObject *args)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 1:
            {
              ::org::apache::lucene::util::BytesRef a0((jobject) NULL);
              jboolean result;

              if (!parseArgs(args, "k", ::org::apache::lucene::util::BytesRef::initializeClass, &a0))
              {
                OBJ_CALL(result = self->object.seekExact(a0));
                Py_RETURN_BOOL(result);
              }
            }
            {
              jlong a0;

              if (!parseArgs(args, "J", &a0))
              {
                OBJ_CALL(self->object.seekExact(a0));
                Py_RETURN_NONE;
              }
            }
            break;
           case 2:
            {
              ::org::apache::lucene::util::BytesRef a0((jobject) NULL);
              ::org::apache::lucene::index::TermState a1((jobject) NULL);

              if (!parseArgs(args, "kk", ::org::apache::lucene::util::BytesRef::initializeClass, ::org::apache::lucene::index::TermState::initializeClass, &a0, &a1))
              {
                OBJ_CALL(self->object.seekExact(a0, a1));
                Py_RETURN_NONE;
              }
            }
          }

          return callSuper(PY_TYPE(FilterLeafReader$FilterTermsEnum), (PyObject *) self, "seekExact", args, 2);
        }

        static PyObject *t_FilterLeafReader$FilterTermsEnum_term(t_FilterLeafReader$FilterTermsEnum *self, PyObject *args)
        {
          ::org::apache::lucene::util::BytesRef result((jobject) NULL);

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.term());
            return ::org::apache::lucene::util::t_BytesRef::wrap_Object(result);
          }

          return callSuper(PY_TYPE(FilterLeafReader$FilterTermsEnum), (PyObject *) self, "term", args, 2);
        }

        static PyObject *t_FilterLeafReader$FilterTermsEnum_termState(t_FilterLeafReader$FilterTermsEnum *self, PyObject *args)
        {
          ::org::apache::lucene::index::TermState result((jobject) NULL);

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.termState());
            return ::org::apache::lucene::index::t_TermState::wrap_Object(result);
          }

          return callSuper(PY_TYPE(FilterLeafReader$FilterTermsEnum), (PyObject *) self, "termState", args, 2);
        }

        static PyObject *t_FilterLeafReader$FilterTermsEnum_totalTermFreq(t_FilterLeafReader$FilterTermsEnum *self, PyObject *args)
        {
          jlong result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.totalTermFreq());
            return PyLong_FromLongLong((PY_LONG_LONG) result);
          }

          return callSuper(PY_TYPE(FilterLeafReader$FilterTermsEnum), (PyObject *) self, "totalTermFreq", args, 2);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/sv/SwedishAnalyzer.h"
#include "java/lang/String.h"
#include "org/apache/lucene/analysis/CharArraySet.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace sv {

          ::java::lang::Class *SwedishAnalyzer::class$ = NULL;
          jmethodID *SwedishAnalyzer::mids$ = NULL;
          bool SwedishAnalyzer::live$ = false;
          ::java::lang::String *SwedishAnalyzer::DEFAULT_STOPWORD_FILE = NULL;

          jclass SwedishAnalyzer::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/sv/SwedishAnalyzer");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_f2cc1bce94666404] = env->getMethodID(cls, "<init>", "()V");
              mids$[mid_init$_09c0eb6a436581d3] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/analysis/CharArraySet;)V");
              mids$[mid_init$_b66a15b6e54e4218] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/analysis/CharArraySet;Lorg/apache/lucene/analysis/CharArraySet;)V");
              mids$[mid_getDefaultStopSet_7aec8e69a9807ca1] = env->getStaticMethodID(cls, "getDefaultStopSet", "()Lorg/apache/lucene/analysis/CharArraySet;");
              mids$[mid_createComponents_c22fd244b0553c1e] = env->getMethodID(cls, "createComponents", "(Ljava/lang/String;)Lorg/apache/lucene/analysis/Analyzer$TokenStreamComponents;");
              mids$[mid_normalize_e597989422f66fcd] = env->getMethodID(cls, "normalize", "(Ljava/lang/String;Lorg/apache/lucene/analysis/TokenStream;)Lorg/apache/lucene/analysis/TokenStream;");

              class$ = new ::java::lang::Class(cls);
              cls = (jclass) class$->this$;

              DEFAULT_STOPWORD_FILE = new ::java::lang::String(env->getStaticObjectField(cls, "DEFAULT_STOPWORD_FILE", "Ljava/lang/String;"));
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          SwedishAnalyzer::SwedishAnalyzer() : ::org::apache::lucene::analysis::StopwordAnalyzerBase(env->newObject(initializeClass, &mids$, mid_init$_f2cc1bce94666404)) {}

          SwedishAnalyzer::SwedishAnalyzer(const ::org::apache::lucene::analysis::CharArraySet & a0) : ::org::apache::lucene::analysis::StopwordAnalyzerBase(env->newObject(initializeClass, &mids$, mid_init$_09c0eb6a436581d3, a0.this$)) {}

          SwedishAnalyzer::SwedishAnalyzer(const ::org::apache::lucene::analysis::CharArraySet & a0, const ::org::apache::lucene::analysis::CharArraySet & a1) : ::org::apache::lucene::analysis::StopwordAnalyzerBase(env->newObject(initializeClass, &mids$, mid_init$_b66a15b6e54e4218, a0.this$, a1.this$)) {}

          ::org::apache::lucene::analysis::CharArraySet SwedishAnalyzer::getDefaultStopSet()
          {
            jclass cls = env->getClass(initializeClass);
            return ::org::apache::lucene::analysis::CharArraySet(env->callStaticObjectMethod(cls, mids$[mid_getDefaultStopSet_7aec8e69a9807ca1]));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace sv {
          static PyObject *t_SwedishAnalyzer_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_SwedishAnalyzer_instance_(PyTypeObject *type, PyObject *arg);
          static int t_SwedishAnalyzer_init_(t_SwedishAnalyzer *self, PyObject *args, PyObject *kwds);
          static PyObject *t_SwedishAnalyzer_getDefaultStopSet(PyTypeObject *type);
          static PyObject *t_SwedishAnalyzer_get__defaultStopSet(t_SwedishAnalyzer *self, void *data);
          static PyGetSetDef t_SwedishAnalyzer__fields_[] = {
            DECLARE_GET_FIELD(t_SwedishAnalyzer, defaultStopSet),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_SwedishAnalyzer__methods_[] = {
            DECLARE_METHOD(t_SwedishAnalyzer, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_SwedishAnalyzer, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_SwedishAnalyzer, getDefaultStopSet, METH_NOARGS | METH_CLASS),
            { NULL, NULL, 0, NULL }
          };

          static PyType_Slot PY_TYPE_SLOTS(SwedishAnalyzer)[] = {
            { Py_tp_methods, t_SwedishAnalyzer__methods_ },
            { Py_tp_init, (void *) t_SwedishAnalyzer_init_ },
            { Py_tp_getset, t_SwedishAnalyzer__fields_ },
            { 0, NULL }
          };

          static PyType_Def *PY_TYPE_BASES(SwedishAnalyzer)[] = {
            &PY_TYPE_DEF(::org::apache::lucene::analysis::StopwordAnalyzerBase),
            NULL
          };

          DEFINE_TYPE(SwedishAnalyzer, t_SwedishAnalyzer, SwedishAnalyzer);

          void t_SwedishAnalyzer::install(PyObject *module)
          {
            installType(&PY_TYPE(SwedishAnalyzer), &PY_TYPE_DEF(SwedishAnalyzer), module, "SwedishAnalyzer", 0);
          }

          void t_SwedishAnalyzer::initialize(PyObject *module)
          {
            PyObject_SetAttrString((PyObject *) PY_TYPE(SwedishAnalyzer), "class_", make_descriptor(SwedishAnalyzer::initializeClass, 1));
            PyObject_SetAttrString((PyObject *) PY_TYPE(SwedishAnalyzer), "wrapfn_", make_descriptor(t_SwedishAnalyzer::wrap_jobject));
            PyObject_SetAttrString((PyObject *) PY_TYPE(SwedishAnalyzer), "boxfn_", make_descriptor(boxObject));
            env->getClass(SwedishAnalyzer::initializeClass);
            PyObject_SetAttrString((PyObject *) PY_TYPE(SwedishAnalyzer), "DEFAULT_STOPWORD_FILE", make_descriptor(j2p(*SwedishAnalyzer::DEFAULT_STOPWORD_FILE)));
          }

          static PyObject *t_SwedishAnalyzer_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, SwedishAnalyzer::initializeClass, 1)))
              return NULL;
            return t_SwedishAnalyzer::wrap_Object(SwedishAnalyzer(((t_SwedishAnalyzer *) arg)->object.this$));
          }
          static PyObject *t_SwedishAnalyzer_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, SwedishAnalyzer::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_SwedishAnalyzer_init_(t_SwedishAnalyzer *self, PyObject *args, PyObject *kwds)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 0:
              {
                SwedishAnalyzer object((jobject) NULL);

                INT_CALL(object = SwedishAnalyzer());
                self->object = object;
                break;
              }
             case 1:
              {
                ::org::apache::lucene::analysis::CharArraySet a0((jobject) NULL);
                PyTypeObject **p0;
                SwedishAnalyzer object((jobject) NULL);

                if (!parseArgs(args, "K", ::org::apache::lucene::analysis::CharArraySet::initializeClass, &a0, &p0, ::org::apache::lucene::analysis::t_CharArraySet::parameters_))
                {
                  INT_CALL(object = SwedishAnalyzer(a0));
                  self->object = object;
                  break;
                }
              }
              goto err;
             case 2:
              {
                ::org::apache::lucene::analysis::CharArraySet a0((jobject) NULL);
                PyTypeObject **p0;
                ::org::apache::lucene::analysis::CharArraySet a1((jobject) NULL);
                PyTypeObject **p1;
                SwedishAnalyzer object((jobject) NULL);

                if (!parseArgs(args, "KK", ::org::apache::lucene::analysis::CharArraySet::initializeClass, ::org::apache::lucene::analysis::CharArraySet::initializeClass, &a0, &p0, ::org::apache::lucene::analysis::t_CharArraySet::parameters_, &a1, &p1, ::org::apache::lucene::analysis::t_CharArraySet::parameters_))
                {
                  INT_CALL(object = SwedishAnalyzer(a0, a1));
                  self->object = object;
                  break;
                }
              }
             default:
             err:
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_SwedishAnalyzer_getDefaultStopSet(PyTypeObject *type)
          {
            ::org::apache::lucene::analysis::CharArraySet result((jobject) NULL);
            OBJ_CALL(result = ::org::apache::lucene::analysis::sv::SwedishAnalyzer::getDefaultStopSet());
            return ::org::apache::lucene::analysis::t_CharArraySet::wrap_Object(result);
          }

          static PyObject *t_SwedishAnalyzer_get__defaultStopSet(t_SwedishAnalyzer *self, void *data)
          {
            ::org::apache::lucene::analysis::CharArraySet value((jobject) NULL);
            OBJ_CALL(value = self->object.getDefaultStopSet());
            return ::org::apache::lucene::analysis::t_CharArraySet::wrap_Object(value);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/classification/utils/ConfusionMatrixGenerator$ConfusionMatrix.h"
#include "java/util/Map.h"
#include "java/lang/Long.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace classification {
        namespace utils {

          ::java::lang::Class *ConfusionMatrixGenerator$ConfusionMatrix::class$ = NULL;
          jmethodID *ConfusionMatrixGenerator$ConfusionMatrix::mids$ = NULL;
          bool ConfusionMatrixGenerator$ConfusionMatrix::live$ = false;

          jclass ConfusionMatrixGenerator$ConfusionMatrix::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/classification/utils/ConfusionMatrixGenerator$ConfusionMatrix");

              mids$ = new jmethodID[max_mid];
              mids$[mid_getAccuracy_8c74b787998ce4bc] = env->getMethodID(cls, "getAccuracy", "()D");
              mids$[mid_getAvgClassificationTime_8c74b787998ce4bc] = env->getMethodID(cls, "getAvgClassificationTime", "()D");
              mids$[mid_getF1Measure_8c74b787998ce4bc] = env->getMethodID(cls, "getF1Measure", "()D");
              mids$[mid_getF1Measure_2bbda5860f5f88e3] = env->getMethodID(cls, "getF1Measure", "(Ljava/lang/String;)D");
              mids$[mid_getLinearizedMatrix_1c3426541413a55d] = env->getMethodID(cls, "getLinearizedMatrix", "()Ljava/util/Map;");
              mids$[mid_getNumberOfEvaluatedDocs_9972fcc56b44e79d] = env->getMethodID(cls, "getNumberOfEvaluatedDocs", "()I");
              mids$[mid_getPrecision_8c74b787998ce4bc] = env->getMethodID(cls, "getPrecision", "()D");
              mids$[mid_getPrecision_2bbda5860f5f88e3] = env->getMethodID(cls, "getPrecision", "(Ljava/lang/String;)D");
              mids$[mid_getRecall_8c74b787998ce4bc] = env->getMethodID(cls, "getRecall", "()D");
              mids$[mid_getRecall_2bbda5860f5f88e3] = env->getMethodID(cls, "getRecall", "(Ljava/lang/String;)D");
              mids$[mid_toString_db9b55ba01e03e4b] = env->getMethodID(cls, "toString", "()Ljava/lang/String;");

              class$ = new ::java::lang::Class(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          jdouble ConfusionMatrixGenerator$ConfusionMatrix::getAccuracy() const
          {
            return env->callDoubleMethod(this$, mids$[mid_getAccuracy_8c74b787998ce4bc]);
          }

          jdouble ConfusionMatrixGenerator$ConfusionMatrix::getAvgClassificationTime() const
          {
            return env->callDoubleMethod(this$, mids$[mid_getAvgClassificationTime_8c74b787998ce4bc]);
          }

          jdouble ConfusionMatrixGenerator$ConfusionMatrix::getF1Measure() const
          {
            return env->callDoubleMethod(this$, mids$[mid_getF1Measure_8c74b787998ce4bc]);
          }

          jdouble ConfusionMatrixGenerator$ConfusionMatrix::getF1Measure(const ::java::lang::String & a0) const
          {
            return env->callDoubleMethod(this$, mids$[mid_getF1Measure_2bbda5860f5f88e3], a0.this$);
          }

          ::java::util::Map ConfusionMatrixGenerator$ConfusionMatrix::getLinearizedMatrix() const
          {
            return ::java::util::Map(env->callObjectMethod(this$, mids$[mid_getLinearizedMatrix_1c3426541413a55d]));
          }

          jint ConfusionMatrixGenerator$ConfusionMatrix::getNumberOfEvaluatedDocs() const
          {
            return env->callIntMethod(this$, mids$[mid_getNumberOfEvaluatedDocs_9972fcc56b44e79d]);
          }

          jdouble ConfusionMatrixGenerator$ConfusionMatrix::getPrecision() const
          {
            return env->callDoubleMethod(this$, mids$[mid_getPrecision_8c74b787998ce4bc]);
          }

          jdouble ConfusionMatrixGenerator$ConfusionMatrix::getPrecision(const ::java::lang::String & a0) const
          {
            return env->callDoubleMethod(this$, mids$[mid_getPrecision_2bbda5860f5f88e3], a0.this$);
          }

          jdouble ConfusionMatrixGenerator$ConfusionMatrix::getRecall() const
          {
            return env->callDoubleMethod(this$, mids$[mid_getRecall_8c74b787998ce4bc]);
          }

          jdouble ConfusionMatrixGenerator$ConfusionMatrix::getRecall(const ::java::lang::String & a0) const
          {
            return env->callDoubleMethod(this$, mids$[mid_getRecall_2bbda5860f5f88e3], a0.this$);
          }

          ::java::lang::String ConfusionMatrixGenerator$ConfusionMatrix::toString() const
          {
            return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_db9b55ba01e03e4b]));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace classification {
        namespace utils {
          static PyObject *t_ConfusionMatrixGenerator$ConfusionMatrix_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_ConfusionMatrixGenerator$ConfusionMatrix_instance_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_ConfusionMatrixGenerator$ConfusionMatrix_getAccuracy(t_ConfusionMatrixGenerator$ConfusionMatrix *self);
          static PyObject *t_ConfusionMatrixGenerator$ConfusionMatrix_getAvgClassificationTime(t_ConfusionMatrixGenerator$ConfusionMatrix *self);
          static PyObject *t_ConfusionMatrixGenerator$ConfusionMatrix_getF1Measure(t_ConfusionMatrixGenerator$ConfusionMatrix *self, PyObject *args);
          static PyObject *t_ConfusionMatrixGenerator$ConfusionMatrix_getLinearizedMatrix(t_ConfusionMatrixGenerator$ConfusionMatrix *self);
          static PyObject *t_ConfusionMatrixGenerator$ConfusionMatrix_getNumberOfEvaluatedDocs(t_ConfusionMatrixGenerator$ConfusionMatrix *self);
          static PyObject *t_ConfusionMatrixGenerator$ConfusionMatrix_getPrecision(t_ConfusionMatrixGenerator$ConfusionMatrix *self, PyObject *args);
          static PyObject *t_ConfusionMatrixGenerator$ConfusionMatrix_getRecall(t_ConfusionMatrixGenerator$ConfusionMatrix *self, PyObject *args);
          static PyObject *t_ConfusionMatrixGenerator$ConfusionMatrix_toString(t_ConfusionMatrixGenerator$ConfusionMatrix *self, PyObject *args);
          static PyObject *t_ConfusionMatrixGenerator$ConfusionMatrix_get__accuracy(t_ConfusionMatrixGenerator$ConfusionMatrix *self, void *data);
          static PyObject *t_ConfusionMatrixGenerator$ConfusionMatrix_get__avgClassificationTime(t_ConfusionMatrixGenerator$ConfusionMatrix *self, void *data);
          static PyObject *t_ConfusionMatrixGenerator$ConfusionMatrix_get__f1Measure(t_ConfusionMatrixGenerator$ConfusionMatrix *self, void *data);
          static PyObject *t_ConfusionMatrixGenerator$ConfusionMatrix_get__linearizedMatrix(t_ConfusionMatrixGenerator$ConfusionMatrix *self, void *data);
          static PyObject *t_ConfusionMatrixGenerator$ConfusionMatrix_get__numberOfEvaluatedDocs(t_ConfusionMatrixGenerator$ConfusionMatrix *self, void *data);
          static PyObject *t_ConfusionMatrixGenerator$ConfusionMatrix_get__precision(t_ConfusionMatrixGenerator$ConfusionMatrix *self, void *data);
          static PyObject *t_ConfusionMatrixGenerator$ConfusionMatrix_get__recall(t_ConfusionMatrixGenerator$ConfusionMatrix *self, void *data);
          static PyGetSetDef t_ConfusionMatrixGenerator$ConfusionMatrix__fields_[] = {
            DECLARE_GET_FIELD(t_ConfusionMatrixGenerator$ConfusionMatrix, accuracy),
            DECLARE_GET_FIELD(t_ConfusionMatrixGenerator$ConfusionMatrix, avgClassificationTime),
            DECLARE_GET_FIELD(t_ConfusionMatrixGenerator$ConfusionMatrix, f1Measure),
            DECLARE_GET_FIELD(t_ConfusionMatrixGenerator$ConfusionMatrix, linearizedMatrix),
            DECLARE_GET_FIELD(t_ConfusionMatrixGenerator$ConfusionMatrix, numberOfEvaluatedDocs),
            DECLARE_GET_FIELD(t_ConfusionMatrixGenerator$ConfusionMatrix, precision),
            DECLARE_GET_FIELD(t_ConfusionMatrixGenerator$ConfusionMatrix, recall),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_ConfusionMatrixGenerator$ConfusionMatrix__methods_[] = {
            DECLARE_METHOD(t_ConfusionMatrixGenerator$ConfusionMatrix, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_ConfusionMatrixGenerator$ConfusionMatrix, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_ConfusionMatrixGenerator$ConfusionMatrix, getAccuracy, METH_NOARGS),
            DECLARE_METHOD(t_ConfusionMatrixGenerator$ConfusionMatrix, getAvgClassificationTime, METH_NOARGS),
            DECLARE_METHOD(t_ConfusionMatrixGenerator$ConfusionMatrix, getF1Measure, METH_VARARGS),
            DECLARE_METHOD(t_ConfusionMatrixGenerator$ConfusionMatrix, getLinearizedMatrix, METH_NOARGS),
            DECLARE_METHOD(t_ConfusionMatrixGenerator$ConfusionMatrix, getNumberOfEvaluatedDocs, METH_NOARGS),
            DECLARE_METHOD(t_ConfusionMatrixGenerator$ConfusionMatrix, getPrecision, METH_VARARGS),
            DECLARE_METHOD(t_ConfusionMatrixGenerator$ConfusionMatrix, getRecall, METH_VARARGS),
            DECLARE_METHOD(t_ConfusionMatrixGenerator$ConfusionMatrix, toString, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          static PyType_Slot PY_TYPE_SLOTS(ConfusionMatrixGenerator$ConfusionMatrix)[] = {
            { Py_tp_methods, t_ConfusionMatrixGenerator$ConfusionMatrix__methods_ },
            { Py_tp_init, (void *) abstract_init },
            { Py_tp_getset, t_ConfusionMatrixGenerator$ConfusionMatrix__fields_ },
            { 0, NULL }
          };

          static PyType_Def *PY_TYPE_BASES(ConfusionMatrixGenerator$ConfusionMatrix)[] = {
            &PY_TYPE_DEF(::java::lang::Object),
            NULL
          };

          DEFINE_TYPE(ConfusionMatrixGenerator$ConfusionMatrix, t_ConfusionMatrixGenerator$ConfusionMatrix, ConfusionMatrixGenerator$ConfusionMatrix);

          void t_ConfusionMatrixGenerator$ConfusionMatrix::install(PyObject *module)
          {
            installType(&PY_TYPE(ConfusionMatrixGenerator$ConfusionMatrix), &PY_TYPE_DEF(ConfusionMatrixGenerator$ConfusionMatrix), module, "ConfusionMatrixGenerator$ConfusionMatrix", 0);
          }

          void t_ConfusionMatrixGenerator$ConfusionMatrix::initialize(PyObject *module)
          {
            PyObject_SetAttrString((PyObject *) PY_TYPE(ConfusionMatrixGenerator$ConfusionMatrix), "class_", make_descriptor(ConfusionMatrixGenerator$ConfusionMatrix::initializeClass, 1));
            PyObject_SetAttrString((PyObject *) PY_TYPE(ConfusionMatrixGenerator$ConfusionMatrix), "wrapfn_", make_descriptor(t_ConfusionMatrixGenerator$ConfusionMatrix::wrap_jobject));
            PyObject_SetAttrString((PyObject *) PY_TYPE(ConfusionMatrixGenerator$ConfusionMatrix), "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_ConfusionMatrixGenerator$ConfusionMatrix_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, ConfusionMatrixGenerator$ConfusionMatrix::initializeClass, 1)))
              return NULL;
            return t_ConfusionMatrixGenerator$ConfusionMatrix::wrap_Object(ConfusionMatrixGenerator$ConfusionMatrix(((t_ConfusionMatrixGenerator$ConfusionMatrix *) arg)->object.this$));
          }
          static PyObject *t_ConfusionMatrixGenerator$ConfusionMatrix_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, ConfusionMatrixGenerator$ConfusionMatrix::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static PyObject *t_ConfusionMatrixGenerator$ConfusionMatrix_getAccuracy(t_ConfusionMatrixGenerator$ConfusionMatrix *self)
          {
            jdouble result;
            OBJ_CALL(result = self->object.getAccuracy());
            return PyFloat_FromDouble((double) result);
          }

          static PyObject *t_ConfusionMatrixGenerator$ConfusionMatrix_getAvgClassificationTime(t_ConfusionMatrixGenerator$ConfusionMatrix *self)
          {
            jdouble result;
            OBJ_CALL(result = self->object.getAvgClassificationTime());
            return PyFloat_FromDouble((double) result);
          }

          static PyObject *t_ConfusionMatrixGenerator$ConfusionMatrix_getF1Measure(t_ConfusionMatrixGenerator$ConfusionMatrix *self, PyObject *args)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 0:
              {
                jdouble result;
                OBJ_CALL(result = self->object.getF1Measure());
                return PyFloat_FromDouble((double) result);
              }
              break;
             case 1:
              {
                ::java::lang::String a0((jobject) NULL);
                jdouble result;

                if (!parseArgs(args, "s", &a0))
                {
                  OBJ_CALL(result = self->object.getF1Measure(a0));
                  return PyFloat_FromDouble((double) result);
                }
              }
            }

            PyErr_SetArgsError((PyObject *) self, "getF1Measure", args);
            return NULL;
          }

          static PyObject *t_ConfusionMatrixGenerator$ConfusionMatrix_getLinearizedMatrix(t_ConfusionMatrixGenerator$ConfusionMatrix *self)
          {
            ::java::util::Map result((jobject) NULL);
            OBJ_CALL(result = self->object.getLinearizedMatrix());
            return ::java::util::t_Map::wrap_Object(result);
          }

          static PyObject *t_ConfusionMatrixGenerator$ConfusionMatrix_getNumberOfEvaluatedDocs(t_ConfusionMatrixGenerator$ConfusionMatrix *self)
          {
            jint result;
            OBJ_CALL(result = self->object.getNumberOfEvaluatedDocs());
            return PyLong_FromLong((long) result);
          }

          static PyObject *t_ConfusionMatrixGenerator$ConfusionMatrix_getPrecision(t_ConfusionMatrixGenerator$ConfusionMatrix *self, PyObject *args)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 0:
              {
                jdouble result;
                OBJ_CALL(result = self->object.getPrecision());
                return PyFloat_FromDouble((double) result);
              }
              break;
             case 1:
              {
                ::java::lang::String a0((jobject) NULL);
                jdouble result;

                if (!parseArgs(args, "s", &a0))
                {
                  OBJ_CALL(result = self->object.getPrecision(a0));
                  return PyFloat_FromDouble((double) result);
                }
              }
            }

            PyErr_SetArgsError((PyObject *) self, "getPrecision", args);
            return NULL;
          }

          static PyObject *t_ConfusionMatrixGenerator$ConfusionMatrix_getRecall(t_ConfusionMatrixGenerator$ConfusionMatrix *self, PyObject *args)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 0:
              {
                jdouble result;
                OBJ_CALL(result = self->object.getRecall());
                return PyFloat_FromDouble((double) result);
              }
              break;
             case 1:
              {
                ::java::lang::String a0((jobject) NULL);
                jdouble result;

                if (!parseArgs(args, "s", &a0))
                {
                  OBJ_CALL(result = self->object.getRecall(a0));
                  return PyFloat_FromDouble((double) result);
                }
              }
            }

            PyErr_SetArgsError((PyObject *) self, "getRecall", args);
            return NULL;
          }

          static PyObject *t_ConfusionMatrixGenerator$ConfusionMatrix_toString(t_ConfusionMatrixGenerator$ConfusionMatrix *self, PyObject *args)
          {
            ::java::lang::String result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.toString());
              return j2p(result);
            }

            return callSuper(PY_TYPE(ConfusionMatrixGenerator$ConfusionMatrix), (PyObject *) self, "toString", args, 2);
          }

          static PyObject *t_ConfusionMatrixGenerator$ConfusionMatrix_get__accuracy(t_ConfusionMatrixGenerator$ConfusionMatrix *self, void *data)
          {
            jdouble value;
            OBJ_CALL(value = self->object.getAccuracy());
            return PyFloat_FromDouble((double) value);
          }

          static PyObject *t_ConfusionMatrixGenerator$ConfusionMatrix_get__avgClassificationTime(t_ConfusionMatrixGenerator$ConfusionMatrix *self, void *data)
          {
            jdouble value;
            OBJ_CALL(value = self->object.getAvgClassificationTime());
            return PyFloat_FromDouble((double) value);
          }

          static PyObject *t_ConfusionMatrixGenerator$ConfusionMatrix_get__f1Measure(t_ConfusionMatrixGenerator$ConfusionMatrix *self, void *data)
          {
            jdouble value;
            OBJ_CALL(value = self->object.getF1Measure());
            return PyFloat_FromDouble((double) value);
          }

          static PyObject *t_ConfusionMatrixGenerator$ConfusionMatrix_get__linearizedMatrix(t_ConfusionMatrixGenerator$ConfusionMatrix *self, void *data)
          {
            ::java::util::Map value((jobject) NULL);
            OBJ_CALL(value = self->object.getLinearizedMatrix());
            return ::java::util::t_Map::wrap_Object(value);
          }

          static PyObject *t_ConfusionMatrixGenerator$ConfusionMatrix_get__numberOfEvaluatedDocs(t_ConfusionMatrixGenerator$ConfusionMatrix *self, void *data)
          {
            jint value;
            OBJ_CALL(value = self->object.getNumberOfEvaluatedDocs());
            return PyLong_FromLong((long) value);
          }

          static PyObject *t_ConfusionMatrixGenerator$ConfusionMatrix_get__precision(t_ConfusionMatrixGenerator$ConfusionMatrix *self, void *data)
          {
            jdouble value;
            OBJ_CALL(value = self->object.getPrecision());
            return PyFloat_FromDouble((double) value);
          }

          static PyObject *t_ConfusionMatrixGenerator$ConfusionMatrix_get__recall(t_ConfusionMatrixGenerator$ConfusionMatrix *self, void *data)
          {
            jdouble value;
            OBJ_CALL(value = self->object.getRecall());
            return PyFloat_FromDouble((double) value);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/Matches.h"
#include "java/util/Collection.h"
#include "java/lang/Class.h"
#include "java/lang/String.h"
#include "org/apache/lucene/search/MatchesIterator.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/search/Matches.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {

        ::java::lang::Class *Matches::class$ = NULL;
        jmethodID *Matches::mids$ = NULL;
        bool Matches::live$ = false;

        jclass Matches::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/search/Matches");

            mids$ = new jmethodID[max_mid];
            mids$[mid_getMatches_c8ade3d4cb307f38] = env->getMethodID(cls, "getMatches", "(Ljava/lang/String;)Lorg/apache/lucene/search/MatchesIterator;");
            mids$[mid_getSubMatches_d4dfbf7a26ff41df] = env->getMethodID(cls, "getSubMatches", "()Ljava/util/Collection;");

            class$ = new ::java::lang::Class(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        ::org::apache::lucene::search::MatchesIterator Matches::getMatches(const ::java::lang::String & a0) const
        {
          return ::org::apache::lucene::search::MatchesIterator(env->callObjectMethod(this$, mids$[mid_getMatches_c8ade3d4cb307f38], a0.this$));
        }

        ::java::util::Collection Matches::getSubMatches() const
        {
          return ::java::util::Collection(env->callObjectMethod(this$, mids$[mid_getSubMatches_d4dfbf7a26ff41df]));
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        static PyObject *t_Matches_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_Matches_instance_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_Matches_getMatches(t_Matches *self, PyObject *arg);
        static PyObject *t_Matches_getSubMatches(t_Matches *self);
        static PyObject *t_Matches_get__subMatches(t_Matches *self, void *data);
        static PyGetSetDef t_Matches__fields_[] = {
          DECLARE_GET_FIELD(t_Matches, subMatches),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_Matches__methods_[] = {
          DECLARE_METHOD(t_Matches, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_Matches, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_Matches, getMatches, METH_O),
          DECLARE_METHOD(t_Matches, getSubMatches, METH_NOARGS),
          { NULL, NULL, 0, NULL }
        };

        static PyType_Slot PY_TYPE_SLOTS(Matches)[] = {
          { Py_tp_methods, t_Matches__methods_ },
          { Py_tp_init, (void *) abstract_init },
          { Py_tp_getset, t_Matches__fields_ },
          { 0, NULL }
        };

        static PyType_Def *PY_TYPE_BASES(Matches)[] = {
          &PY_TYPE_DEF(::java::lang::Iterable),
          NULL
        };

        DEFINE_TYPE(Matches, t_Matches, Matches);

        void t_Matches::install(PyObject *module)
        {
          installType(&PY_TYPE(Matches), &PY_TYPE_DEF(Matches), module, "Matches", 0);
        }

        void t_Matches::initialize(PyObject *module)
        {
          PyObject_SetAttrString((PyObject *) PY_TYPE(Matches), "class_", make_descriptor(Matches::initializeClass, 1));
          PyObject_SetAttrString((PyObject *) PY_TYPE(Matches), "wrapfn_", make_descriptor(t_Matches::wrap_jobject));
          PyObject_SetAttrString((PyObject *) PY_TYPE(Matches), "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_Matches_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, Matches::initializeClass, 1)))
            return NULL;
          return t_Matches::wrap_Object(Matches(((t_Matches *) arg)->object.this$));
        }
        static PyObject *t_Matches_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, Matches::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static PyObject *t_Matches_getMatches(t_Matches *self, PyObject *arg)
        {
          ::java::lang::String a0((jobject) NULL);
          ::org::apache::lucene::search::MatchesIterator result((jobject) NULL);

          if (!parseArg(arg, "s", &a0))
          {
            OBJ_CALL(result = self->object.getMatches(a0));
            return ::org::apache::lucene::search::t_MatchesIterator::wrap_Object(result);
          }

          PyErr_SetArgsError((PyObject *) self, "getMatches", arg);
          return NULL;
        }

        static PyObject *t_Matches_getSubMatches(t_Matches *self)
        {
          ::java::util::Collection result((jobject) NULL);
          OBJ_CALL(result = self->object.getSubMatches());
          return ::java::util::t_Collection::wrap_Object(result, ::org::apache::lucene::search::PY_TYPE(Matches));
        }

        static PyObject *t_Matches_get__subMatches(t_Matches *self, void *data)
        {
          ::java::util::Collection value((jobject) NULL);
          OBJ_CALL(value = self->object.getSubMatches());
          return ::java::util::t_Collection::wrap_Object(value);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queryparser/flexible/standard/builders/GroupQueryNodeBuilder.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/queryparser/flexible/core/QueryNodeException.h"
#include "org/apache/lucene/queryparser/flexible/standard/builders/StandardQueryBuilder.h"
#include "org/apache/lucene/queryparser/flexible/core/nodes/QueryNode.h"
#include "org/apache/lucene/search/Query.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace standard {
            namespace builders {

              ::java::lang::Class *GroupQueryNodeBuilder::class$ = NULL;
              jmethodID *GroupQueryNodeBuilder::mids$ = NULL;
              bool GroupQueryNodeBuilder::live$ = false;

              jclass GroupQueryNodeBuilder::initializeClass(bool getOnly)
              {
                if (getOnly)
                  return (jclass) (live$ ? class$->this$ : NULL);
                if (class$ == NULL)
                {
                  jclass cls = (jclass) env->findClass("org/apache/lucene/queryparser/flexible/standard/builders/GroupQueryNodeBuilder");

                  mids$ = new jmethodID[max_mid];
                  mids$[mid_init$_f2cc1bce94666404] = env->getMethodID(cls, "<init>", "()V");
                  mids$[mid_build_266d6dc3b958f456] = env->getMethodID(cls, "build", "(Lorg/apache/lucene/queryparser/flexible/core/nodes/QueryNode;)Lorg/apache/lucene/search/Query;");

                  class$ = new ::java::lang::Class(cls);
                  live$ = true;
                }
                return (jclass) class$->this$;
              }

              GroupQueryNodeBuilder::GroupQueryNodeBuilder() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_f2cc1bce94666404)) {}

              ::org::apache::lucene::search::Query GroupQueryNodeBuilder::build(const ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode & a0) const
              {
                return ::org::apache::lucene::search::Query(env->callObjectMethod(this$, mids$[mid_build_266d6dc3b958f456], a0.this$));
              }
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace standard {
            namespace builders {
              static PyObject *t_GroupQueryNodeBuilder_cast_(PyTypeObject *type, PyObject *arg);
              static PyObject *t_GroupQueryNodeBuilder_instance_(PyTypeObject *type, PyObject *arg);
              static int t_GroupQueryNodeBuilder_init_(t_GroupQueryNodeBuilder *self, PyObject *args, PyObject *kwds);
              static PyObject *t_GroupQueryNodeBuilder_build(t_GroupQueryNodeBuilder *self, PyObject *arg);

              static PyMethodDef t_GroupQueryNodeBuilder__methods_[] = {
                DECLARE_METHOD(t_GroupQueryNodeBuilder, cast_, METH_O | METH_CLASS),
                DECLARE_METHOD(t_GroupQueryNodeBuilder, instance_, METH_O | METH_CLASS),
                DECLARE_METHOD(t_GroupQueryNodeBuilder, build, METH_O),
                { NULL, NULL, 0, NULL }
              };

              static PyType_Slot PY_TYPE_SLOTS(GroupQueryNodeBuilder)[] = {
                { Py_tp_methods, t_GroupQueryNodeBuilder__methods_ },
                { Py_tp_init, (void *) t_GroupQueryNodeBuilder_init_ },
                { 0, NULL }
              };

              static PyType_Def *PY_TYPE_BASES(GroupQueryNodeBuilder)[] = {
                &PY_TYPE_DEF(::java::lang::Object),
                NULL
              };

              DEFINE_TYPE(GroupQueryNodeBuilder, t_GroupQueryNodeBuilder, GroupQueryNodeBuilder);

              void t_GroupQueryNodeBuilder::install(PyObject *module)
              {
                installType(&PY_TYPE(GroupQueryNodeBuilder), &PY_TYPE_DEF(GroupQueryNodeBuilder), module, "GroupQueryNodeBuilder", 0);
              }

              void t_GroupQueryNodeBuilder::initialize(PyObject *module)
              {
                PyObject_SetAttrString((PyObject *) PY_TYPE(GroupQueryNodeBuilder), "class_", make_descriptor(GroupQueryNodeBuilder::initializeClass, 1));
                PyObject_SetAttrString((PyObject *) PY_TYPE(GroupQueryNodeBuilder), "wrapfn_", make_descriptor(t_GroupQueryNodeBuilder::wrap_jobject));
                PyObject_SetAttrString((PyObject *) PY_TYPE(GroupQueryNodeBuilder), "boxfn_", make_descriptor(boxObject));
              }

              static PyObject *t_GroupQueryNodeBuilder_cast_(PyTypeObject *type, PyObject *arg)
              {
                if (!(arg = castCheck(arg, GroupQueryNodeBuilder::initializeClass, 1)))
                  return NULL;
                return t_GroupQueryNodeBuilder::wrap_Object(GroupQueryNodeBuilder(((t_GroupQueryNodeBuilder *) arg)->object.this$));
              }
              static PyObject *t_GroupQueryNodeBuilder_instance_(PyTypeObject *type, PyObject *arg)
              {
                if (!castCheck(arg, GroupQueryNodeBuilder::initializeClass, 0))
                  Py_RETURN_FALSE;
                Py_RETURN_TRUE;
              }

              static int t_GroupQueryNodeBuilder_init_(t_GroupQueryNodeBuilder *self, PyObject *args, PyObject *kwds)
              {
                GroupQueryNodeBuilder object((jobject) NULL);

                INT_CALL(object = GroupQueryNodeBuilder());
                self->object = object;

                return 0;
              }

              static PyObject *t_GroupQueryNodeBuilder_build(t_GroupQueryNodeBuilder *self, PyObject *arg)
              {
                ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode a0((jobject) NULL);
                ::org::apache::lucene::search::Query result((jobject) NULL);

                if (!parseArg(arg, "k", ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode::initializeClass, &a0))
                {
                  OBJ_CALL(result = self->object.build(a0));
                  return ::org::apache::lucene::search::t_Query::wrap_Object(result);
                }

                PyErr_SetArgsError((PyObject *) self, "build", arg);
                return NULL;
              }
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/codecs/lucene50/Lucene50StoredFieldsFormat.h"
#include "org/apache/lucene/codecs/StoredFieldsReader.h"
#include "org/apache/lucene/store/IOContext.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/codecs/StoredFieldsWriter.h"
#include "org/apache/lucene/store/Directory.h"
#include "java/lang/String.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/index/SegmentInfo.h"
#include "org/apache/lucene/codecs/lucene50/Lucene50StoredFieldsFormat$Mode.h"
#include "org/apache/lucene/index/FieldInfos.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace codecs {
        namespace lucene50 {

          ::java::lang::Class *Lucene50StoredFieldsFormat::class$ = NULL;
          jmethodID *Lucene50StoredFieldsFormat::mids$ = NULL;
          bool Lucene50StoredFieldsFormat::live$ = false;
          ::java::lang::String *Lucene50StoredFieldsFormat::MODE_KEY = NULL;

          jclass Lucene50StoredFieldsFormat::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/codecs/lucene50/Lucene50StoredFieldsFormat");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_f2cc1bce94666404] = env->getMethodID(cls, "<init>", "()V");
              mids$[mid_init$_6fcfbdc0d15e68b8] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/codecs/lucene50/Lucene50StoredFieldsFormat$Mode;)V");
              mids$[mid_fieldsReader_a32861160154ecdb] = env->getMethodID(cls, "fieldsReader", "(Lorg/apache/lucene/store/Directory;Lorg/apache/lucene/index/SegmentInfo;Lorg/apache/lucene/index/FieldInfos;Lorg/apache/lucene/store/IOContext;)Lorg/apache/lucene/codecs/StoredFieldsReader;");
              mids$[mid_fieldsWriter_e1dda5bd7531bf25] = env->getMethodID(cls, "fieldsWriter", "(Lorg/apache/lucene/store/Directory;Lorg/apache/lucene/index/SegmentInfo;Lorg/apache/lucene/store/IOContext;)Lorg/apache/lucene/codecs/StoredFieldsWriter;");

              class$ = new ::java::lang::Class(cls);
              cls = (jclass) class$->this$;

              MODE_KEY = new ::java::lang::String(env->getStaticObjectField(cls, "MODE_KEY", "Ljava/lang/String;"));
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          Lucene50StoredFieldsFormat::Lucene50StoredFieldsFormat() : ::org::apache::lucene::codecs::StoredFieldsFormat(env->newObject(initializeClass, &mids$, mid_init$_f2cc1bce94666404)) {}

          Lucene50StoredFieldsFormat::Lucene50StoredFieldsFormat(const ::org::apache::lucene::codecs::lucene50::Lucene50StoredFieldsFormat$Mode & a0) : ::org::apache::lucene::codecs::StoredFieldsFormat(env->newObject(initializeClass, &mids$, mid_init$_6fcfbdc0d15e68b8, a0.this$)) {}

          ::org::apache::lucene::codecs::StoredFieldsReader Lucene50StoredFieldsFormat::fieldsReader(const ::org::apache::lucene::store::Directory & a0, const ::org::apache::lucene::index::SegmentInfo & a1, const ::org::apache::lucene::index::FieldInfos & a2, const ::org::apache::lucene::store::IOContext & a3) const
          {
            return ::org::apache::lucene::codecs::StoredFieldsReader(env->callObjectMethod(this$, mids$[mid_fieldsReader_a32861160154ecdb], a0.this$, a1.this$, a2.this$, a3.this$));
          }

          ::org::apache::lucene::codecs::StoredFieldsWriter Lucene50StoredFieldsFormat::fieldsWriter(const ::org::apache::lucene::store::Directory & a0, const ::org::apache::lucene::index::SegmentInfo & a1, const ::org::apache::lucene::store::IOContext & a2) const
          {
            return ::org::apache::lucene::codecs::StoredFieldsWriter(env->callObjectMethod(this$, mids$[mid_fieldsWriter_e1dda5bd7531bf25], a0.this$, a1.this$, a2.this$));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace codecs {
        namespace lucene50 {
          static PyObject *t_Lucene50StoredFieldsFormat_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_Lucene50StoredFieldsFormat_instance_(PyTypeObject *type, PyObject *arg);
          static int t_Lucene50StoredFieldsFormat_init_(t_Lucene50StoredFieldsFormat *self, PyObject *args, PyObject *kwds);
          static PyObject *t_Lucene50StoredFieldsFormat_fieldsReader(t_Lucene50StoredFieldsFormat *self, PyObject *args);
          static PyObject *t_Lucene50StoredFieldsFormat_fieldsWriter(t_Lucene50StoredFieldsFormat *self, PyObject *args);

          static PyMethodDef t_Lucene50StoredFieldsFormat__methods_[] = {
            DECLARE_METHOD(t_Lucene50StoredFieldsFormat, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_Lucene50StoredFieldsFormat, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_Lucene50StoredFieldsFormat, fieldsReader, METH_VARARGS),
            DECLARE_METHOD(t_Lucene50StoredFieldsFormat, fieldsWriter, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          static PyType_Slot PY_TYPE_SLOTS(Lucene50StoredFieldsFormat)[] = {
            { Py_tp_methods, t_Lucene50StoredFieldsFormat__methods_ },
            { Py_tp_init, (void *) t_Lucene50StoredFieldsFormat_init_ },
            { 0, NULL }
          };

          static PyType_Def *PY_TYPE_BASES(Lucene50StoredFieldsFormat)[] = {
            &PY_TYPE_DEF(::org::apache::lucene::codecs::StoredFieldsFormat),
            NULL
          };

          DEFINE_TYPE(Lucene50StoredFieldsFormat, t_Lucene50StoredFieldsFormat, Lucene50StoredFieldsFormat);

          void t_Lucene50StoredFieldsFormat::install(PyObject *module)
          {
            installType(&PY_TYPE(Lucene50StoredFieldsFormat), &PY_TYPE_DEF(Lucene50StoredFieldsFormat), module, "Lucene50StoredFieldsFormat", 0);
            PyObject_SetAttrString((PyObject *) PY_TYPE(Lucene50StoredFieldsFormat), "Mode", make_descriptor(&PY_TYPE_DEF(Lucene50StoredFieldsFormat$Mode)));
          }

          void t_Lucene50StoredFieldsFormat::initialize(PyObject *module)
          {
            PyObject_SetAttrString((PyObject *) PY_TYPE(Lucene50StoredFieldsFormat), "class_", make_descriptor(Lucene50StoredFieldsFormat::initializeClass, 1));
            PyObject_SetAttrString((PyObject *) PY_TYPE(Lucene50StoredFieldsFormat), "wrapfn_", make_descriptor(t_Lucene50StoredFieldsFormat::wrap_jobject));
            PyObject_SetAttrString((PyObject *) PY_TYPE(Lucene50StoredFieldsFormat), "boxfn_", make_descriptor(boxObject));
            env->getClass(Lucene50StoredFieldsFormat::initializeClass);
            PyObject_SetAttrString((PyObject *) PY_TYPE(Lucene50StoredFieldsFormat), "MODE_KEY", make_descriptor(j2p(*Lucene50StoredFieldsFormat::MODE_KEY)));
          }

          static PyObject *t_Lucene50StoredFieldsFormat_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, Lucene50StoredFieldsFormat::initializeClass, 1)))
              return NULL;
            return t_Lucene50StoredFieldsFormat::wrap_Object(Lucene50StoredFieldsFormat(((t_Lucene50StoredFieldsFormat *) arg)->object.this$));
          }
          static PyObject *t_Lucene50StoredFieldsFormat_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, Lucene50StoredFieldsFormat::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_Lucene50StoredFieldsFormat_init_(t_Lucene50StoredFieldsFormat *self, PyObject *args, PyObject *kwds)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 0:
              {
                Lucene50StoredFieldsFormat object((jobject) NULL);

                INT_CALL(object = Lucene50StoredFieldsFormat());
                self->object = object;
                break;
              }
             case 1:
              {
                ::org::apache::lucene::codecs::lucene50::Lucene50StoredFieldsFormat$Mode a0((jobject) NULL);
                PyTypeObject **p0;
                Lucene50StoredFieldsFormat object((jobject) NULL);

                if (!parseArgs(args, "K", ::org::apache::lucene::codecs::lucene50::Lucene50StoredFieldsFormat$Mode::initializeClass, &a0, &p0, ::org::apache::lucene::codecs::lucene50::t_Lucene50StoredFieldsFormat$Mode::parameters_))
                {
                  INT_CALL(object = Lucene50StoredFieldsFormat(a0));
                  self->object = object;
                  break;
                }
              }
             default:
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_Lucene50StoredFieldsFormat_fieldsReader(t_Lucene50StoredFieldsFormat *self, PyObject *args)
          {
            ::org::apache::lucene::store::Directory a0((jobject) NULL);
            ::org::apache::lucene::index::SegmentInfo a1((jobject) NULL);
            ::org::apache::lucene::index::FieldInfos a2((jobject) NULL);
            ::org::apache::lucene::store::IOContext a3((jobject) NULL);
            ::org::apache::lucene::codecs::StoredFieldsReader result((jobject) NULL);

            if (!parseArgs(args, "kkkk", ::org::apache::lucene::store::Directory::initializeClass, ::org::apache::lucene::index::SegmentInfo::initializeClass, ::org::apache::lucene::index::FieldInfos::initializeClass, ::org::apache::lucene::store::IOContext::initializeClass, &a0, &a1, &a2, &a3))
            {
              OBJ_CALL(result = self->object.fieldsReader(a0, a1, a2, a3));
              return ::org::apache::lucene::codecs::t_StoredFieldsReader::wrap_Object(result);
            }

            return callSuper(PY_TYPE(Lucene50StoredFieldsFormat), (PyObject *) self, "fieldsReader", args, 2);
          }

          static PyObject *t_Lucene50StoredFieldsFormat_fieldsWriter(t_Lucene50StoredFieldsFormat *self, PyObject *args)
          {
            ::org::apache::lucene::store::Directory a0((jobject) NULL);
            ::org::apache::lucene::index::SegmentInfo a1((jobject) NULL);
            ::org::apache::lucene::store::IOContext a2((jobject) NULL);
            ::org::apache::lucene::codecs::StoredFieldsWriter result((jobject) NULL);

            if (!parseArgs(args, "kkk", ::org::apache::lucene::store::Directory::initializeClass, ::org::apache::lucene::index::SegmentInfo::initializeClass, ::org::apache::lucene::store::IOContext::initializeClass, &a0, &a1, &a2))
            {
              OBJ_CALL(result = self->object.fieldsWriter(a0, a1, a2));
              return ::org::apache::lucene::codecs::t_StoredFieldsWriter::wrap_Object(result);
            }

            return callSuper(PY_TYPE(Lucene50StoredFieldsFormat), (PyObject *) self, "fieldsWriter", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/util/BitSetIterator.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/util/SparseFixedBitSet.h"
#include "org/apache/lucene/util/FixedBitSet.h"
#include "org/apache/lucene/util/BitSet.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {

        ::java::lang::Class *BitSetIterator::class$ = NULL;
        jmethodID *BitSetIterator::mids$ = NULL;
        bool BitSetIterator::live$ = false;

        jclass BitSetIterator::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/util/BitSetIterator");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_3c9f50c8b4ac8730] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/util/BitSet;J)V");
            mids$[mid_advance_1e143afe1894d213] = env->getMethodID(cls, "advance", "(I)I");
            mids$[mid_cost_2e5ae9edcb9b072f] = env->getMethodID(cls, "cost", "()J");
            mids$[mid_docID_9972fcc56b44e79d] = env->getMethodID(cls, "docID", "()I");
            mids$[mid_getBitSet_b6503785024a1489] = env->getMethodID(cls, "getBitSet", "()Lorg/apache/lucene/util/BitSet;");
            mids$[mid_getFixedBitSetOrNull_cb952c58db86e860] = env->getStaticMethodID(cls, "getFixedBitSetOrNull", "(Lorg/apache/lucene/search/DocIdSetIterator;)Lorg/apache/lucene/util/FixedBitSet;");
            mids$[mid_getSparseFixedBitSetOrNull_8394b99a464d79e5] = env->getStaticMethodID(cls, "getSparseFixedBitSetOrNull", "(Lorg/apache/lucene/search/DocIdSetIterator;)Lorg/apache/lucene/util/SparseFixedBitSet;");
            mids$[mid_nextDoc_9972fcc56b44e79d] = env->getMethodID(cls, "nextDoc", "()I");
            mids$[mid_setDocId_040c4cd0390c5aff] = env->getMethodID(cls, "setDocId", "(I)V");

            class$ = new ::java::lang::Class(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        BitSetIterator::BitSetIterator(const ::org::apache::lucene::util::BitSet & a0, jlong a1) : ::org::apache::lucene::search::DocIdSetIterator(env->newObject(initializeClass, &mids$, mid_init$_3c9f50c8b4ac8730, a0.this$, a1)) {}

        jint BitSetIterator::advance(jint a0) const
        {
          return env->callIntMethod(this$, mids$[mid_advance_1e143afe1894d213], a0);
        }

        jlong BitSetIterator::cost() const
        {
          return env->callLongMethod(this$, mids$[mid_cost_2e5ae9edcb9b072f]);
        }

        jint BitSetIterator::docID() const
        {
          return env->callIntMethod(this$, mids$[mid_docID_9972fcc56b44e79d]);
        }

        ::org::apache::lucene::util::BitSet BitSetIterator::getBitSet() const
        {
          return ::org::apache::lucene::util::BitSet(env->callObjectMethod(this$, mids$[mid_getBitSet_b6503785024a1489]));
        }

        ::org::apache::lucene::util::FixedBitSet BitSetIterator::getFixedBitSetOrNull(const ::org::apache::lucene::search::DocIdSetIterator & a0)
        {
          jclass cls = env->getClass(initializeClass);
          return ::org::apache::lucene::util::FixedBitSet(env->callStaticObjectMethod(cls, mids$[mid_getFixedBitSetOrNull_cb952c58db86e860], a0.this$));
        }

        ::org::apache::lucene::util::SparseFixedBitSet BitSetIterator::getSparseFixedBitSetOrNull(const ::org::apache::lucene::search::DocIdSetIterator & a0)
        {
          jclass cls = env->getClass(initializeClass);
          return ::org::apache::lucene::util::SparseFixedBitSet(env->callStaticObjectMethod(cls, mids$[mid_getSparseFixedBitSetOrNull_8394b99a464d79e5], a0.this$));
        }

        jint BitSetIterator::nextDoc() const
        {
          return env->callIntMethod(this$, mids$[mid_nextDoc_9972fcc56b44e79d]);
        }

        void BitSetIterator::setDocId(jint a0) const
        {
          env->callVoidMethod(this$, mids$[mid_setDocId_040c4cd0390c5aff], a0);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        static PyObject *t_BitSetIterator_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_BitSetIterator_instance_(PyTypeObject *type, PyObject *arg);
        static int t_BitSetIterator_init_(t_BitSetIterator *self, PyObject *args, PyObject *kwds);
        static PyObject *t_BitSetIterator_advance(t_BitSetIterator *self, PyObject *args);
        static PyObject *t_BitSetIterator_cost(t_BitSetIterator *self, PyObject *args);
        static PyObject *t_BitSetIterator_docID(t_BitSetIterator *self, PyObject *args);
        static PyObject *t_BitSetIterator_getBitSet(t_BitSetIterator *self);
        static PyObject *t_BitSetIterator_getFixedBitSetOrNull(PyTypeObject *type, PyObject *arg);
        static PyObject *t_BitSetIterator_getSparseFixedBitSetOrNull(PyTypeObject *type, PyObject *arg);
        static PyObject *t_BitSetIterator_nextDoc(t_BitSetIterator *self, PyObject *args);
        static PyObject *t_BitSetIterator_setDocId(t_BitSetIterator *self, PyObject *arg);
        static PyObject *t_BitSetIterator_get__bitSet(t_BitSetIterator *self, void *data);
        static int t_BitSetIterator_set__docId(t_BitSetIterator *self, PyObject *arg, void *data);
        static PyGetSetDef t_BitSetIterator__fields_[] = {
          DECLARE_GET_FIELD(t_BitSetIterator, bitSet),
          DECLARE_SET_FIELD(t_BitSetIterator, docId),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_BitSetIterator__methods_[] = {
          DECLARE_METHOD(t_BitSetIterator, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_BitSetIterator, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_BitSetIterator, advance, METH_VARARGS),
          DECLARE_METHOD(t_BitSetIterator, cost, METH_VARARGS),
          DECLARE_METHOD(t_BitSetIterator, docID, METH_VARARGS),
          DECLARE_METHOD(t_BitSetIterator, getBitSet, METH_NOARGS),
          DECLARE_METHOD(t_BitSetIterator, getFixedBitSetOrNull, METH_O | METH_CLASS),
          DECLARE_METHOD(t_BitSetIterator, getSparseFixedBitSetOrNull, METH_O | METH_CLASS),
          DECLARE_METHOD(t_BitSetIterator, nextDoc, METH_VARARGS),
          DECLARE_METHOD(t_BitSetIterator, setDocId, METH_O),
          { NULL, NULL, 0, NULL }
        };

        static PyType_Slot PY_TYPE_SLOTS(BitSetIterator)[] = {
          { Py_tp_methods, t_BitSetIterator__methods_ },
          { Py_tp_init, (void *) t_BitSetIterator_init_ },
          { Py_tp_getset, t_BitSetIterator__fields_ },
          { 0, NULL }
        };

        static PyType_Def *PY_TYPE_BASES(BitSetIterator)[] = {
          &PY_TYPE_DEF(::org::apache::lucene::search::DocIdSetIterator),
          NULL
        };

        DEFINE_TYPE(BitSetIterator, t_BitSetIterator, BitSetIterator);

        void t_BitSetIterator::install(PyObject *module)
        {
          installType(&PY_TYPE(BitSetIterator), &PY_TYPE_DEF(BitSetIterator), module, "BitSetIterator", 0);
        }

        void t_BitSetIterator::initialize(PyObject *module)
        {
          PyObject_SetAttrString((PyObject *) PY_TYPE(BitSetIterator), "class_", make_descriptor(BitSetIterator::initializeClass, 1));
          PyObject_SetAttrString((PyObject *) PY_TYPE(BitSetIterator), "wrapfn_", make_descriptor(t_BitSetIterator::wrap_jobject));
          PyObject_SetAttrString((PyObject *) PY_TYPE(BitSetIterator), "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_BitSetIterator_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, BitSetIterator::initializeClass, 1)))
            return NULL;
          return t_BitSetIterator::wrap_Object(BitSetIterator(((t_BitSetIterator *) arg)->object.this$));
        }
        static PyObject *t_BitSetIterator_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, BitSetIterator::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_BitSetIterator_init_(t_BitSetIterator *self, PyObject *args, PyObject *kwds)
        {
          ::org::apache::lucene::util::BitSet a0((jobject) NULL);
          jlong a1;
          BitSetIterator object((jobject) NULL);

          if (!parseArgs(args, "kJ", ::org::apache::lucene::util::BitSet::initializeClass, &a0, &a1))
          {
            INT_CALL(object = BitSetIterator(a0, a1));
            self->object = object;
          }
          else
          {
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }

        static PyObject *t_BitSetIterator_advance(t_BitSetIterator *self, PyObject *args)
        {
          jint a0;
          jint result;

          if (!parseArgs(args, "I", &a0))
          {
            OBJ_CALL(result = self->object.advance(a0));
            return PyLong_FromLong((long) result);
          }

          return callSuper(PY_TYPE(BitSetIterator), (PyObject *) self, "advance", args, 2);
        }

        static PyObject *t_BitSetIterator_cost(t_BitSetIterator *self, PyObject *args)
        {
          jlong result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.cost());
            return PyLong_FromLongLong((PY_LONG_LONG) result);
          }

          return callSuper(PY_TYPE(BitSetIterator), (PyObject *) self, "cost", args, 2);
        }

        static PyObject *t_BitSetIterator_docID(t_BitSetIterator *self, PyObject *args)
        {
          jint result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.docID());
            return PyLong_FromLong((long) result);
          }

          return callSuper(PY_TYPE(BitSetIterator), (PyObject *) self, "docID", args, 2);
        }

        static PyObject *t_BitSetIterator_getBitSet(t_BitSetIterator *self)
        {
          ::org::apache::lucene::util::BitSet result((jobject) NULL);
          OBJ_CALL(result = self->object.getBitSet());
          return ::org::apache::lucene::util::t_BitSet::wrap_Object(result);
        }

        static PyObject *t_BitSetIterator_getFixedBitSetOrNull(PyTypeObject *type, PyObject *arg)
        {
          ::org::apache::lucene::search::DocIdSetIterator a0((jobject) NULL);
          ::org::apache::lucene::util::FixedBitSet result((jobject) NULL);

          if (!parseArg(arg, "k", ::org::apache::lucene::search::DocIdSetIterator::initializeClass, &a0))
          {
            OBJ_CALL(result = ::org::apache::lucene::util::BitSetIterator::getFixedBitSetOrNull(a0));
            return ::org::apache::lucene::util::t_FixedBitSet::wrap_Object(result);
          }

          PyErr_SetArgsError(type, "getFixedBitSetOrNull", arg);
          return NULL;
        }

        static PyObject *t_BitSetIterator_getSparseFixedBitSetOrNull(PyTypeObject *type, PyObject *arg)
        {
          ::org::apache::lucene::search::DocIdSetIterator a0((jobject) NULL);
          ::org::apache::lucene::util::SparseFixedBitSet result((jobject) NULL);

          if (!parseArg(arg, "k", ::org::apache::lucene::search::DocIdSetIterator::initializeClass, &a0))
          {
            OBJ_CALL(result = ::org::apache::lucene::util::BitSetIterator::getSparseFixedBitSetOrNull(a0));
            return ::org::apache::lucene::util::t_SparseFixedBitSet::wrap_Object(result);
          }

          PyErr_SetArgsError(type, "getSparseFixedBitSetOrNull", arg);
          return NULL;
        }

        static PyObject *t_BitSetIterator_nextDoc(t_BitSetIterator *self, PyObject *args)
        {
          jint result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.nextDoc());
            return PyLong_FromLong((long) result);
          }

          return callSuper(PY_TYPE(BitSetIterator), (PyObject *) self, "nextDoc", args, 2);
        }

        static PyObject *t_BitSetIterator_setDocId(t_BitSetIterator *self, PyObject *arg)
        {
          jint a0;

          if (!parseArg(arg, "I", &a0))
          {
            OBJ_CALL(self->object.setDocId(a0));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "setDocId", arg);
          return NULL;
        }

        static PyObject *t_BitSetIterator_get__bitSet(t_BitSetIterator *self, void *data)
        {
          ::org::apache::lucene::util::BitSet value((jobject) NULL);
          OBJ_CALL(value = self->object.getBitSet());
          return ::org::apache::lucene::util::t_BitSet::wrap_Object(value);
        }

        static int t_BitSetIterator_set__docId(t_BitSetIterator *self, PyObject *arg, void *data)
        {
          {
            jint value;
            if (!parseArg(arg, "I", &value))
            {
              INT_CALL(self->object.setDocId(value));
              return 0;
            }
          }
          PyErr_SetArgsError((PyObject *) self, "docId", arg);
          return -1;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/similarities/LambdaTTF.h"
#include "org/apache/lucene/search/Explanation.h"
#include "org/apache/lucene/search/similarities/BasicStats.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace similarities {

          ::java::lang::Class *LambdaTTF::class$ = NULL;
          jmethodID *LambdaTTF::mids$ = NULL;
          bool LambdaTTF::live$ = false;

          jclass LambdaTTF::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/search/similarities/LambdaTTF");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_f2cc1bce94666404] = env->getMethodID(cls, "<init>", "()V");
              mids$[mid_explain_09b827167a29e9eb] = env->getMethodID(cls, "explain", "(Lorg/apache/lucene/search/similarities/BasicStats;)Lorg/apache/lucene/search/Explanation;");
              mids$[mid_lambda_773a7ae7d4cf3ed2] = env->getMethodID(cls, "lambda", "(Lorg/apache/lucene/search/similarities/BasicStats;)F");
              mids$[mid_toString_db9b55ba01e03e4b] = env->getMethodID(cls, "toString", "()Ljava/lang/String;");

              class$ = new ::java::lang::Class(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          LambdaTTF::LambdaTTF() : ::org::apache::lucene::search::similarities::Lambda(env->newObject(initializeClass, &mids$, mid_init$_f2cc1bce94666404)) {}

          ::org::apache::lucene::search::Explanation LambdaTTF::explain(const ::org::apache::lucene::search::similarities::BasicStats & a0) const
          {
            return ::org::apache::lucene::search::Explanation(env->callObjectMethod(this$, mids$[mid_explain_09b827167a29e9eb], a0.this$));
          }

          jfloat LambdaTTF::lambda(const ::org::apache::lucene::search::similarities::BasicStats & a0) const
          {
            return env->callFloatMethod(this$, mids$[mid_lambda_773a7ae7d4cf3ed2], a0.this$);
          }

          ::java::lang::String LambdaTTF::toString() const
          {
            return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_db9b55ba01e03e4b]));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace similarities {
          static PyObject *t_LambdaTTF_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_LambdaTTF_instance_(PyTypeObject *type, PyObject *arg);
          static int t_LambdaTTF_init_(t_LambdaTTF *self, PyObject *args, PyObject *kwds);
          static PyObject *t_LambdaTTF_explain(t_LambdaTTF *self, PyObject *args);
          static PyObject *t_LambdaTTF_lambda(t_LambdaTTF *self, PyObject *args);
          static PyObject *t_LambdaTTF_toString(t_LambdaTTF *self, PyObject *args);

          static PyMethodDef t_LambdaTTF__methods_[] = {
            DECLARE_METHOD(t_LambdaTTF, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_LambdaTTF, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_LambdaTTF, explain, METH_VARARGS),
            DECLARE_METHOD(t_LambdaTTF, lambda, METH_VARARGS),
            DECLARE_METHOD(t_LambdaTTF, toString, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          static PyType_Slot PY_TYPE_SLOTS(LambdaTTF)[] = {
            { Py_tp_methods, t_LambdaTTF__methods_ },
            { Py_tp_init, (void *) t_LambdaTTF_init_ },
            { 0, NULL }
          };

          static PyType_Def *PY_TYPE_BASES(LambdaTTF)[] = {
            &PY_TYPE_DEF(::org::apache::lucene::search::similarities::Lambda),
            NULL
          };

          DEFINE_TYPE(LambdaTTF, t_LambdaTTF, LambdaTTF);

          void t_LambdaTTF::install(PyObject *module)
          {
            installType(&PY_TYPE(LambdaTTF), &PY_TYPE_DEF(LambdaTTF), module, "LambdaTTF", 0);
          }

          void t_LambdaTTF::initialize(PyObject *module)
          {
            PyObject_SetAttrString((PyObject *) PY_TYPE(LambdaTTF), "class_", make_descriptor(LambdaTTF::initializeClass, 1));
            PyObject_SetAttrString((PyObject *) PY_TYPE(LambdaTTF), "wrapfn_", make_descriptor(t_LambdaTTF::wrap_jobject));
            PyObject_SetAttrString((PyObject *) PY_TYPE(LambdaTTF), "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_LambdaTTF_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, LambdaTTF::initializeClass, 1)))
              return NULL;
            return t_LambdaTTF::wrap_Object(LambdaTTF(((t_LambdaTTF *) arg)->object.this$));
          }
          static PyObject *t_LambdaTTF_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, LambdaTTF::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_LambdaTTF_init_(t_LambdaTTF *self, PyObject *args, PyObject *kwds)
          {
            LambdaTTF object((jobject) NULL);

            INT_CALL(object = LambdaTTF());
            self->object = object;

            return 0;
          }

          static PyObject *t_LambdaTTF_explain(t_LambdaTTF *self, PyObject *args)
          {
            ::org::apache::lucene::search::similarities::BasicStats a0((jobject) NULL);
            ::org::apache::lucene::search::Explanation result((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::search::similarities::BasicStats::initializeClass, &a0))
            {
              OBJ_CALL(result = self->object.explain(a0));
              return ::org::apache::lucene::search::t_Explanation::wrap_Object(result);
            }

            return callSuper(PY_TYPE(LambdaTTF), (PyObject *) self, "explain", args, 2);
          }

          static PyObject *t_LambdaTTF_lambda(t_LambdaTTF *self, PyObject *args)
          {
            ::org::apache::lucene::search::similarities::BasicStats a0((jobject) NULL);
            jfloat result;

            if (!parseArgs(args, "k", ::org::apache::lucene::search::similarities::BasicStats::initializeClass, &a0))
            {
              OBJ_CALL(result = self->object.lambda(a0));
              return PyFloat_FromDouble((double) result);
            }

            return callSuper(PY_TYPE(LambdaTTF), (PyObject *) self, "lambda", args, 2);
          }

          static PyObject *t_LambdaTTF_toString(t_LambdaTTF *self, PyObject *args)
          {
            ::java::lang::String result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.toString());
              return j2p(result);
            }

            return callSuper(PY_TYPE(LambdaTTF), (PyObject *) self, "toString", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/ja/tokenattributes/ReadingAttribute.h"
#include "java/lang/String.h"
#include "org/apache/lucene/analysis/ja/Token.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace ja {
          namespace tokenattributes {

            ::java::lang::Class *ReadingAttribute::class$ = NULL;
            jmethodID *ReadingAttribute::mids$ = NULL;
            bool ReadingAttribute::live$ = false;

            jclass ReadingAttribute::initializeClass(bool getOnly)
            {
              if (getOnly)
                return (jclass) (live$ ? class$->this$ : NULL);
              if (class$ == NULL)
              {
                jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/ja/tokenattributes/ReadingAttribute");

                mids$ = new jmethodID[max_mid];
                mids$[mid_getPronunciation_db9b55ba01e03e4b] = env->getMethodID(cls, "getPronunciation", "()Ljava/lang/String;");
                mids$[mid_getReading_db9b55ba01e03e4b] = env->getMethodID(cls, "getReading", "()Ljava/lang/String;");
                mids$[mid_setToken_e7eb8cf5a63e4354] = env->getMethodID(cls, "setToken", "(Lorg/apache/lucene/analysis/ja/Token;)V");

                class$ = new ::java::lang::Class(cls);
                live$ = true;
              }
              return (jclass) class$->this$;
            }

            ::java::lang::String ReadingAttribute::getPronunciation() const
            {
              return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_getPronunciation_db9b55ba01e03e4b]));
            }

            ::java::lang::String ReadingAttribute::getReading() const
            {
              return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_getReading_db9b55ba01e03e4b]));
            }

            void ReadingAttribute::setToken(const ::org::apache::lucene::analysis::ja::Token & a0) const
            {
              env->callVoidMethod(this$, mids$[mid_setToken_e7eb8cf5a63e4354], a0.this$);
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace ja {
          namespace tokenattributes {
            static PyObject *t_ReadingAttribute_cast_(PyTypeObject *type, PyObject *arg);
            static PyObject *t_ReadingAttribute_instance_(PyTypeObject *type, PyObject *arg);
            static PyObject *t_ReadingAttribute_getPronunciation(t_ReadingAttribute *self);
            static PyObject *t_ReadingAttribute_getReading(t_ReadingAttribute *self);
            static PyObject *t_ReadingAttribute_setToken(t_ReadingAttribute *self, PyObject *arg);
            static PyObject *t_ReadingAttribute_get__pronunciation(t_ReadingAttribute *self, void *data);
            static PyObject *t_ReadingAttribute_get__reading(t_ReadingAttribute *self, void *data);
            static int t_ReadingAttribute_set__token(t_ReadingAttribute *self, PyObject *arg, void *data);
            static PyGetSetDef t_ReadingAttribute__fields_[] = {
              DECLARE_GET_FIELD(t_ReadingAttribute, pronunciation),
              DECLARE_GET_FIELD(t_ReadingAttribute, reading),
              DECLARE_SET_FIELD(t_ReadingAttribute, token),
              { NULL, NULL, NULL, NULL, NULL }
            };

            static PyMethodDef t_ReadingAttribute__methods_[] = {
              DECLARE_METHOD(t_ReadingAttribute, cast_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_ReadingAttribute, instance_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_ReadingAttribute, getPronunciation, METH_NOARGS),
              DECLARE_METHOD(t_ReadingAttribute, getReading, METH_NOARGS),
              DECLARE_METHOD(t_ReadingAttribute, setToken, METH_O),
              { NULL, NULL, 0, NULL }
            };

            static PyType_Slot PY_TYPE_SLOTS(ReadingAttribute)[] = {
              { Py_tp_methods, t_ReadingAttribute__methods_ },
              { Py_tp_init, (void *) abstract_init },
              { Py_tp_getset, t_ReadingAttribute__fields_ },
              { 0, NULL }
            };

            static PyType_Def *PY_TYPE_BASES(ReadingAttribute)[] = {
              &PY_TYPE_DEF(::org::apache::lucene::util::Attribute),
              NULL
            };

            DEFINE_TYPE(ReadingAttribute, t_ReadingAttribute, ReadingAttribute);

            void t_ReadingAttribute::install(PyObject *module)
            {
              installType(&PY_TYPE(ReadingAttribute), &PY_TYPE_DEF(ReadingAttribute), module, "ReadingAttribute", 0);
            }

            void t_ReadingAttribute::initialize(PyObject *module)
            {
              PyObject_SetAttrString((PyObject *) PY_TYPE(ReadingAttribute), "class_", make_descriptor(ReadingAttribute::initializeClass, 1));
              PyObject_SetAttrString((PyObject *) PY_TYPE(ReadingAttribute), "wrapfn_", make_descriptor(t_ReadingAttribute::wrap_jobject));
              PyObject_SetAttrString((PyObject *) PY_TYPE(ReadingAttribute), "boxfn_", make_descriptor(boxObject));
            }

            static PyObject *t_ReadingAttribute_cast_(PyTypeObject *type, PyObject *arg)
            {
              if (!(arg = castCheck(arg, ReadingAttribute::initializeClass, 1)))
                return NULL;
              return t_ReadingAttribute::wrap_Object(ReadingAttribute(((t_ReadingAttribute *) arg)->object.this$));
            }
            static PyObject *t_ReadingAttribute_instance_(PyTypeObject *type, PyObject *arg)
            {
              if (!castCheck(arg, ReadingAttribute::initializeClass, 0))
                Py_RETURN_FALSE;
              Py_RETURN_TRUE;
            }

            static PyObject *t_ReadingAttribute_getPronunciation(t_ReadingAttribute *self)
            {
              ::java::lang::String result((jobject) NULL);
              OBJ_CALL(result = self->object.getPronunciation());
              return j2p(result);
            }

            static PyObject *t_ReadingAttribute_getReading(t_ReadingAttribute *self)
            {
              ::java::lang::String result((jobject) NULL);
              OBJ_CALL(result = self->object.getReading());
              return j2p(result);
            }

            static PyObject *t_ReadingAttribute_setToken(t_ReadingAttribute *self, PyObject *arg)
            {
              ::org::apache::lucene::analysis::ja::Token a0((jobject) NULL);

              if (!parseArg(arg, "k", ::org::apache::lucene::analysis::ja::Token::initializeClass, &a0))
              {
                OBJ_CALL(self->object.setToken(a0));
                Py_RETURN_NONE;
              }

              PyErr_SetArgsError((PyObject *) self, "setToken", arg);
              return NULL;
            }

            static PyObject *t_ReadingAttribute_get__pronunciation(t_ReadingAttribute *self, void *data)
            {
              ::java::lang::String value((jobject) NULL);
              OBJ_CALL(value = self->object.getPronunciation());
              return j2p(value);
            }

            static PyObject *t_ReadingAttribute_get__reading(t_ReadingAttribute *self, void *data)
            {
              ::java::lang::String value((jobject) NULL);
              OBJ_CALL(value = self->object.getReading());
              return j2p(value);
            }

            static int t_ReadingAttribute_set__token(t_ReadingAttribute *self, PyObject *arg, void *data)
            {
              {
                ::org::apache::lucene::analysis::ja::Token value((jobject) NULL);
                if (!parseArg(arg, "k", ::org::apache::lucene::analysis::ja::Token::initializeClass, &value))
                {
                  INT_CALL(self->object.setToken(value));
                  return 0;
                }
              }
              PyErr_SetArgsError((PyObject *) self, "token", arg);
              return -1;
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/TokenStream.h"
#include "org/apache/lucene/util/AttributeFactory.h"
#include "java/io/IOException.h"
#include "java/io/Closeable.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {

        ::java::lang::Class *TokenStream::class$ = NULL;
        jmethodID *TokenStream::mids$ = NULL;
        bool TokenStream::live$ = false;
        ::org::apache::lucene::util::AttributeFactory *TokenStream::DEFAULT_TOKEN_ATTRIBUTE_FACTORY = NULL;

        jclass TokenStream::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/TokenStream");

            mids$ = new jmethodID[max_mid];
            mids$[mid_close_f2cc1bce94666404] = env->getMethodID(cls, "close", "()V");
            mids$[mid_end_f2cc1bce94666404] = env->getMethodID(cls, "end", "()V");
            mids$[mid_incrementToken_8454bd5aa23fd11e] = env->getMethodID(cls, "incrementToken", "()Z");
            mids$[mid_reset_f2cc1bce94666404] = env->getMethodID(cls, "reset", "()V");

            class$ = new ::java::lang::Class(cls);
            cls = (jclass) class$->this$;

            DEFAULT_TOKEN_ATTRIBUTE_FACTORY = new ::org::apache::lucene::util::AttributeFactory(env->getStaticObjectField(cls, "DEFAULT_TOKEN_ATTRIBUTE_FACTORY", "Lorg/apache/lucene/util/AttributeFactory;"));
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        void TokenStream::close() const
        {
          env->callVoidMethod(this$, mids$[mid_close_f2cc1bce94666404]);
        }

        void TokenStream::end() const
        {
          env->callVoidMethod(this$, mids$[mid_end_f2cc1bce94666404]);
        }

        jboolean TokenStream::incrementToken() const
        {
          return env->callBooleanMethod(this$, mids$[mid_incrementToken_8454bd5aa23fd11e]);
        }

        void TokenStream::reset() const
        {
          env->callVoidMethod(this$, mids$[mid_reset_f2cc1bce94666404]);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        static PyObject *t_TokenStream_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_TokenStream_instance_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_TokenStream_close(t_TokenStream *self);
        static PyObject *t_TokenStream_end(t_TokenStream *self);
        static PyObject *t_TokenStream_incrementToken(t_TokenStream *self);
        static PyObject *t_TokenStream_reset(t_TokenStream *self);

        static PyMethodDef t_TokenStream__methods_[] = {
          DECLARE_METHOD(t_TokenStream, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_TokenStream, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_TokenStream, close, METH_NOARGS),
          DECLARE_METHOD(t_TokenStream, end, METH_NOARGS),
          DECLARE_METHOD(t_TokenStream, incrementToken, METH_NOARGS),
          DECLARE_METHOD(t_TokenStream, reset, METH_NOARGS),
          { NULL, NULL, 0, NULL }
        };

        static PyType_Slot PY_TYPE_SLOTS(TokenStream)[] = {
          { Py_tp_methods, t_TokenStream__methods_ },
          { Py_tp_init, (void *) abstract_init },
          { 0, NULL }
        };

        static PyType_Def *PY_TYPE_BASES(TokenStream)[] = {
          &PY_TYPE_DEF(::org::apache::lucene::util::AttributeSource),
          NULL
        };

        DEFINE_TYPE(TokenStream, t_TokenStream, TokenStream);

        void t_TokenStream::install(PyObject *module)
        {
          installType(&PY_TYPE(TokenStream), &PY_TYPE_DEF(TokenStream), module, "TokenStream", 0);
        }

        void t_TokenStream::initialize(PyObject *module)
        {
          PyObject_SetAttrString((PyObject *) PY_TYPE(TokenStream), "class_", make_descriptor(TokenStream::initializeClass, 1));
          PyObject_SetAttrString((PyObject *) PY_TYPE(TokenStream), "wrapfn_", make_descriptor(t_TokenStream::wrap_jobject));
          PyObject_SetAttrString((PyObject *) PY_TYPE(TokenStream), "boxfn_", make_descriptor(boxObject));
          env->getClass(TokenStream::initializeClass);
          PyObject_SetAttrString((PyObject *) PY_TYPE(TokenStream), "DEFAULT_TOKEN_ATTRIBUTE_FACTORY", make_descriptor(::org::apache::lucene::util::t_AttributeFactory::wrap_Object(*TokenStream::DEFAULT_TOKEN_ATTRIBUTE_FACTORY)));
        }

        static PyObject *t_TokenStream_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, TokenStream::initializeClass, 1)))
            return NULL;
          return t_TokenStream::wrap_Object(TokenStream(((t_TokenStream *) arg)->object.this$));
        }
        static PyObject *t_TokenStream_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, TokenStream::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static PyObject *t_TokenStream_close(t_TokenStream *self)
        {
          OBJ_CALL(self->object.close());
          Py_RETURN_NONE;
        }

        static PyObject *t_TokenStream_end(t_TokenStream *self)
        {
          OBJ_CALL(self->object.end());
          Py_RETURN_NONE;
        }

        static PyObject *t_TokenStream_incrementToken(t_TokenStream *self)
        {
          jboolean result;
          OBJ_CALL(result = self->object.incrementToken());
          Py_RETURN_BOOL(result);
        }

        static PyObject *t_TokenStream_reset(t_TokenStream *self)
        {
          OBJ_CALL(self->object.reset());
          Py_RETURN_NONE;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/pattern/PatternReplaceFilter.h"
#include "java/lang/Class.h"
#include "java/util/regex/Pattern.h"
#include "org/apache/lucene/analysis/TokenStream.h"
#include "java/lang/String.h"
#include "java/io/IOException.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace pattern {

          ::java::lang::Class *PatternReplaceFilter::class$ = NULL;
          jmethodID *PatternReplaceFilter::mids$ = NULL;
          bool PatternReplaceFilter::live$ = false;

          jclass PatternReplaceFilter::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/pattern/PatternReplaceFilter");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_0fbe2a9163e7f811] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/analysis/TokenStream;Ljava/util/regex/Pattern;Ljava/lang/String;Z)V");
              mids$[mid_incrementToken_8454bd5aa23fd11e] = env->getMethodID(cls, "incrementToken", "()Z");

              class$ = new ::java::lang::Class(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          PatternReplaceFilter::PatternReplaceFilter(const ::org::apache::lucene::analysis::TokenStream & a0, const ::java::util::regex::Pattern & a1, const ::java::lang::String & a2, jboolean a3) : ::org::apache::lucene::analysis::TokenFilter(env->newObject(initializeClass, &mids$, mid_init$_0fbe2a9163e7f811, a0.this$, a1.this$, a2.this$, a3)) {}

          jboolean PatternReplaceFilter::incrementToken() const
          {
            return env->callBooleanMethod(this$, mids$[mid_incrementToken_8454bd5aa23fd11e]);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace pattern {
          static PyObject *t_PatternReplaceFilter_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_PatternReplaceFilter_instance_(PyTypeObject *type, PyObject *arg);
          static int t_PatternReplaceFilter_init_(t_PatternReplaceFilter *self, PyObject *args, PyObject *kwds);
          static PyObject *t_PatternReplaceFilter_incrementToken(t_PatternReplaceFilter *self, PyObject *args);

          static PyMethodDef t_PatternReplaceFilter__methods_[] = {
            DECLARE_METHOD(t_PatternReplaceFilter, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_PatternReplaceFilter, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_PatternReplaceFilter, incrementToken, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          static PyType_Slot PY_TYPE_SLOTS(PatternReplaceFilter)[] = {
            { Py_tp_methods, t_PatternReplaceFilter__methods_ },
            { Py_tp_init, (void *) t_PatternReplaceFilter_init_ },
            { 0, NULL }
          };

          static PyType_Def *PY_TYPE_BASES(PatternReplaceFilter)[] = {
            &PY_TYPE_DEF(::org::apache::lucene::analysis::TokenFilter),
            NULL
          };

          DEFINE_TYPE(PatternReplaceFilter, t_PatternReplaceFilter, PatternReplaceFilter);

          void t_PatternReplaceFilter::install(PyObject *module)
          {
            installType(&PY_TYPE(PatternReplaceFilter), &PY_TYPE_DEF(PatternReplaceFilter), module, "PatternReplaceFilter", 0);
          }

          void t_PatternReplaceFilter::initialize(PyObject *module)
          {
            PyObject_SetAttrString((PyObject *) PY_TYPE(PatternReplaceFilter), "class_", make_descriptor(PatternReplaceFilter::initializeClass, 1));
            PyObject_SetAttrString((PyObject *) PY_TYPE(PatternReplaceFilter), "wrapfn_", make_descriptor(t_PatternReplaceFilter::wrap_jobject));
            PyObject_SetAttrString((PyObject *) PY_TYPE(PatternReplaceFilter), "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_PatternReplaceFilter_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, PatternReplaceFilter::initializeClass, 1)))
              return NULL;
            return t_PatternReplaceFilter::wrap_Object(PatternReplaceFilter(((t_PatternReplaceFilter *) arg)->object.this$));
          }
          static PyObject *t_PatternReplaceFilter_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, PatternReplaceFilter::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_PatternReplaceFilter_init_(t_PatternReplaceFilter *self, PyObject *args, PyObject *kwds)
          {
            ::org::apache::lucene::analysis::TokenStream a0((jobject) NULL);
            ::java::util::regex::Pattern a1((jobject) NULL);
            ::java::lang::String a2((jobject) NULL);
            jboolean a3;
            PatternReplaceFilter object((jobject) NULL);

            if (!parseArgs(args, "kksZ", ::org::apache::lucene::analysis::TokenStream::initializeClass, ::java::util::regex::Pattern::initializeClass, &a0, &a1, &a2, &a3))
            {
              INT_CALL(object = PatternReplaceFilter(a0, a1, a2, a3));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_PatternReplaceFilter_incrementToken(t_PatternReplaceFilter *self, PyObject *args)
          {
            jboolean result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.incrementToken());
              Py_RETURN_BOOL(result);
            }

            return callSuper(PY_TYPE(PatternReplaceFilter), (PyObject *) self, "incrementToken", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/spans/SpanOrQuery$SpanOrWeight.h"
#include "java/util/Map.h"
#include "org/apache/lucene/search/spans/SpanOrQuery.h"
#include "org/apache/lucene/index/LeafReaderContext.h"
#include "org/apache/lucene/index/Term.h"
#include "org/apache/lucene/search/IndexSearcher.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/search/spans/SpanWeight$Postings.h"
#include "org/apache/lucene/index/TermStates.h"
#include "org/apache/lucene/search/spans/Spans.h"
#include "java/util/Set.h"
#include "java/io/IOException.h"
#include "java/util/List.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace spans {

          ::java::lang::Class *SpanOrQuery$SpanOrWeight::class$ = NULL;
          jmethodID *SpanOrQuery$SpanOrWeight::mids$ = NULL;
          bool SpanOrQuery$SpanOrWeight::live$ = false;

          jclass SpanOrQuery$SpanOrWeight::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/search/spans/SpanOrQuery$SpanOrWeight");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_4fc5970aa46a820f] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/search/spans/SpanOrQuery;Lorg/apache/lucene/search/IndexSearcher;Ljava/util/Map;Ljava/util/List;F)V");
              mids$[mid_extractTermStates_408bd889ee3beae5] = env->getMethodID(cls, "extractTermStates", "(Ljava/util/Map;)V");
              mids$[mid_extractTerms_d5a4a8d4b806f0ba] = env->getMethodID(cls, "extractTerms", "(Ljava/util/Set;)V");
              mids$[mid_getSpans_219c078c64a446fd] = env->getMethodID(cls, "getSpans", "(Lorg/apache/lucene/index/LeafReaderContext;Lorg/apache/lucene/search/spans/SpanWeight$Postings;)Lorg/apache/lucene/search/spans/Spans;");
              mids$[mid_isCacheable_07cae694a8cf1c6d] = env->getMethodID(cls, "isCacheable", "(Lorg/apache/lucene/index/LeafReaderContext;)Z");

              class$ = new ::java::lang::Class(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          SpanOrQuery$SpanOrWeight::SpanOrQuery$SpanOrWeight(const ::org::apache::lucene::search::spans::SpanOrQuery & a0, const ::org::apache::lucene::search::IndexSearcher & a1, const ::java::util::Map & a2, const ::java::util::List & a3, jfloat a4) : ::org::apache::lucene::search::spans::SpanWeight(env->newObject(initializeClass, &mids$, mid_init$_4fc5970aa46a820f, a0.this$, a1.this$, a2.this$, a3.this$, a4)) {}

          void SpanOrQuery$SpanOrWeight::extractTermStates(const ::java::util::Map & a0) const
          {
            env->callVoidMethod(this$, mids$[mid_extractTermStates_408bd889ee3beae5], a0.this$);
          }

          void SpanOrQuery$SpanOrWeight::extractTerms(const ::java::util::Set & a0) const
          {
            env->callVoidMethod(this$, mids$[mid_extractTerms_d5a4a8d4b806f0ba], a0.this$);
          }

          ::org::apache::lucene::search::spans::Spans SpanOrQuery$SpanOrWeight::getSpans(const ::org::apache::lucene::index::LeafReaderContext & a0, const ::org::apache::lucene::search::spans::SpanWeight$Postings & a1) const
          {
            return ::org::apache::lucene::search::spans::Spans(env->callObjectMethod(this$, mids$[mid_getSpans_219c078c64a446fd], a0.this$, a1.this$));
          }

          jboolean SpanOrQuery$SpanOrWeight::isCacheable(const ::org::apache::lucene::index::LeafReaderContext & a0) const
          {
            return env->callBooleanMethod(this$, mids$[mid_isCacheable_07cae694a8cf1c6d], a0.this$);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace spans {
          static PyObject *t_SpanOrQuery$SpanOrWeight_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_SpanOrQuery$SpanOrWeight_instance_(PyTypeObject *type, PyObject *arg);
          static int t_SpanOrQuery$SpanOrWeight_init_(t_SpanOrQuery$SpanOrWeight *self, PyObject *args, PyObject *kwds);
          static PyObject *t_SpanOrQuery$SpanOrWeight_extractTermStates(t_SpanOrQuery$SpanOrWeight *self, PyObject *args);
          static PyObject *t_SpanOrQuery$SpanOrWeight_extractTerms(t_SpanOrQuery$SpanOrWeight *self, PyObject *args);
          static PyObject *t_SpanOrQuery$SpanOrWeight_getSpans(t_SpanOrQuery$SpanOrWeight *self, PyObject *args);
          static PyObject *t_SpanOrQuery$SpanOrWeight_isCacheable(t_SpanOrQuery$SpanOrWeight *self, PyObject *args);

          static PyMethodDef t_SpanOrQuery$SpanOrWeight__methods_[] = {
            DECLARE_METHOD(t_SpanOrQuery$SpanOrWeight, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_SpanOrQuery$SpanOrWeight, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_SpanOrQuery$SpanOrWeight, extractTermStates, METH_VARARGS),
            DECLARE_METHOD(t_SpanOrQuery$SpanOrWeight, extractTerms, METH_VARARGS),
            DECLARE_METHOD(t_SpanOrQuery$SpanOrWeight, getSpans, METH_VARARGS),
            DECLARE_METHOD(t_SpanOrQuery$SpanOrWeight, isCacheable, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          static PyType_Slot PY_TYPE_SLOTS(SpanOrQuery$SpanOrWeight)[] = {
            { Py_tp_methods, t_SpanOrQuery$SpanOrWeight__methods_ },
            { Py_tp_init, (void *) t_SpanOrQuery$SpanOrWeight_init_ },
            { 0, NULL }
          };

          static PyType_Def *PY_TYPE_BASES(SpanOrQuery$SpanOrWeight)[] = {
            &PY_TYPE_DEF(::org::apache::lucene::search::spans::SpanWeight),
            NULL
          };

          DEFINE_TYPE(SpanOrQuery$SpanOrWeight, t_SpanOrQuery$SpanOrWeight, SpanOrQuery$SpanOrWeight);

          void t_SpanOrQuery$SpanOrWeight::install(PyObject *module)
          {
            installType(&PY_TYPE(SpanOrQuery$SpanOrWeight), &PY_TYPE_DEF(SpanOrQuery$SpanOrWeight), module, "SpanOrQuery$SpanOrWeight", 0);
          }

          void t_SpanOrQuery$SpanOrWeight::initialize(PyObject *module)
          {
            PyObject_SetAttrString((PyObject *) PY_TYPE(SpanOrQuery$SpanOrWeight), "class_", make_descriptor(SpanOrQuery$SpanOrWeight::initializeClass, 1));
            PyObject_SetAttrString((PyObject *) PY_TYPE(SpanOrQuery$SpanOrWeight), "wrapfn_", make_descriptor(t_SpanOrQuery$SpanOrWeight::wrap_jobject));
            PyObject_SetAttrString((PyObject *) PY_TYPE(SpanOrQuery$SpanOrWeight), "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_SpanOrQuery$SpanOrWeight_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, SpanOrQuery$SpanOrWeight::initializeClass, 1)))
              return NULL;
            return t_SpanOrQuery$SpanOrWeight::wrap_Object(SpanOrQuery$SpanOrWeight(((t_SpanOrQuery$SpanOrWeight *) arg)->object.this$));
          }
          static PyObject *t_SpanOrQuery$SpanOrWeight_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, SpanOrQuery$SpanOrWeight::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_SpanOrQuery$SpanOrWeight_init_(t_SpanOrQuery$SpanOrWeight *self, PyObject *args, PyObject *kwds)
          {
            ::org::apache::lucene::search::spans::SpanOrQuery a0((jobject) NULL);
            ::org::apache::lucene::search::IndexSearcher a1((jobject) NULL);
            ::java::util::Map a2((jobject) NULL);
            PyTypeObject **p2;
            ::java::util::List a3((jobject) NULL);
            PyTypeObject **p3;
            jfloat a4;
            SpanOrQuery$SpanOrWeight object((jobject) NULL);

            if (!parseArgs(args, "kkKKF", ::org::apache::lucene::search::spans::SpanOrQuery::initializeClass, ::org::apache::lucene::search::IndexSearcher::initializeClass, ::java::util::Map::initializeClass, ::java::util::List::initializeClass, &a0, &a1, &a2, &p2, ::java::util::t_Map::parameters_, &a3, &p3, ::java::util::t_List::parameters_, &a4))
            {
              INT_CALL(object = SpanOrQuery$SpanOrWeight(a0, a1, a2, a3, a4));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_SpanOrQuery$SpanOrWeight_extractTermStates(t_SpanOrQuery$SpanOrWeight *self, PyObject *args)
          {
            ::java::util::Map a0((jobject) NULL);
            PyTypeObject **p0;

            if (!parseArgs(args, "K", ::java::util::Map::initializeClass, &a0, &p0, ::java::util::t_Map::parameters_))
            {
              OBJ_CALL(self->object.extractTermStates(a0));
              Py_RETURN_NONE;
            }

            return callSuper(PY_TYPE(SpanOrQuery$SpanOrWeight), (PyObject *) self, "extractTermStates", args, 2);
          }

          static PyObject *t_SpanOrQuery$SpanOrWeight_extractTerms(t_SpanOrQuery$SpanOrWeight *self, PyObject *args)
          {
            ::java::util::Set a0((jobject) NULL);
            PyTypeObject **p0;

            if (!parseArgs(args, "K", ::java::util::Set::initializeClass, &a0, &p0, ::java::util::t_Set::parameters_))
            {
              OBJ_CALL(self->object.extractTerms(a0));
              Py_RETURN_NONE;
            }

            return callSuper(PY_TYPE(SpanOrQuery$SpanOrWeight), (PyObject *) self, "extractTerms", args, 2);
          }

          static PyObject *t_SpanOrQuery$SpanOrWeight_getSpans(t_SpanOrQuery$SpanOrWeight *self, PyObject *args)
          {
            ::org::apache::lucene::index::LeafReaderContext a0((jobject) NULL);
            ::org::apache::lucene::search::spans::SpanWeight$Postings a1((jobject) NULL);
            PyTypeObject **p1;
            ::org::apache::lucene::search::spans::Spans result((jobject) NULL);

            if (!parseArgs(args, "kK", ::org::apache::lucene::index::LeafReaderContext::initializeClass, ::org::apache::lucene::search::spans::SpanWeight$Postings::initializeClass, &a0, &a1, &p1, ::org::apache::lucene::search::spans::t_SpanWeight$Postings::parameters_))
            {
              OBJ_CALL(result = self->object.getSpans(a0, a1));
              return ::org::apache::lucene::search::spans::t_Spans::wrap_Object(result);
            }

            return callSuper(PY_TYPE(SpanOrQuery$SpanOrWeight), (PyObject *) self, "getSpans", args, 2);
          }

          static PyObject *t_SpanOrQuery$SpanOrWeight_isCacheable(t_SpanOrQuery$SpanOrWeight *self, PyObject *args)
          {
            ::org::apache::lucene::index::LeafReaderContext a0((jobject) NULL);
            jboolean result;

            if (!parseArgs(args, "k", ::org::apache::lucene::index::LeafReaderContext::initializeClass, &a0))
            {
              OBJ_CALL(result = self->object.isCacheable(a0));
              Py_RETURN_BOOL(result);
            }

            return callSuper(PY_TYPE(SpanOrQuery$SpanOrWeight), (PyObject *) self, "isCacheable", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/similarities/BasicModelG.h"
#include "org/apache/lucene/search/similarities/BasicStats.h"
#include "java/lang/String.h"
#include "org/apache/lucene/search/Explanation.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace similarities {

          ::java::lang::Class *BasicModelG::class$ = NULL;
          jmethodID *BasicModelG::mids$ = NULL;
          bool BasicModelG::live$ = false;

          jclass BasicModelG::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/search/similarities/BasicModelG");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_f2cc1bce94666404] = env->getMethodID(cls, "<init>", "()V");
              mids$[mid_explain_77a68ba236144920] = env->getMethodID(cls, "explain", "(Lorg/apache/lucene/search/similarities/BasicStats;DD)Lorg/apache/lucene/search/Explanation;");
              mids$[mid_score_761ab1c432346fd0] = env->getMethodID(cls, "score", "(Lorg/apache/lucene/search/similarities/BasicStats;DD)D");
              mids$[mid_toString_db9b55ba01e03e4b] = env->getMethodID(cls, "toString", "()Ljava/lang/String;");

              class$ = new ::java::lang::Class(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          BasicModelG::BasicModelG() : ::org::apache::lucene::search::similarities::BasicModel(env->newObject(initializeClass, &mids$, mid_init$_f2cc1bce94666404)) {}

          ::org::apache::lucene::search::Explanation BasicModelG::explain(const ::org::apache::lucene::search::similarities::BasicStats & a0, jdouble a1, jdouble a2) const
          {
            return ::org::apache::lucene::search::Explanation(env->callObjectMethod(this$, mids$[mid_explain_77a68ba236144920], a0.this$, a1, a2));
          }

          jdouble BasicModelG::score(const ::org::apache::lucene::search::similarities::BasicStats & a0, jdouble a1, jdouble a2) const
          {
            return env->callDoubleMethod(this$, mids$[mid_score_761ab1c432346fd0], a0.this$, a1, a2);
          }

          ::java::lang::String BasicModelG::toString() const
          {
            return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_db9b55ba01e03e4b]));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace similarities {
          static PyObject *t_BasicModelG_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_BasicModelG_instance_(PyTypeObject *type, PyObject *arg);
          static int t_BasicModelG_init_(t_BasicModelG *self, PyObject *args, PyObject *kwds);
          static PyObject *t_BasicModelG_explain(t_BasicModelG *self, PyObject *args);
          static PyObject *t_BasicModelG_score(t_BasicModelG *self, PyObject *args);
          static PyObject *t_BasicModelG_toString(t_BasicModelG *self, PyObject *args);

          static PyMethodDef t_BasicModelG__methods_[] = {
            DECLARE_METHOD(t_BasicModelG, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_BasicModelG, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_BasicModelG, explain, METH_VARARGS),
            DECLARE_METHOD(t_BasicModelG, score, METH_VARARGS),
            DECLARE_METHOD(t_BasicModelG, toString, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          static PyType_Slot PY_TYPE_SLOTS(BasicModelG)[] = {
            { Py_tp_methods, t_BasicModelG__methods_ },
            { Py_tp_init, (void *) t_BasicModelG_init_ },
            { 0, NULL }
          };

          static PyType_Def *PY_TYPE_BASES(BasicModelG)[] = {
            &PY_TYPE_DEF(::org::apache::lucene::search::similarities::BasicModel),
            NULL
          };

          DEFINE_TYPE(BasicModelG, t_BasicModelG, BasicModelG);

          void t_BasicModelG::install(PyObject *module)
          {
            installType(&PY_TYPE(BasicModelG), &PY_TYPE_DEF(BasicModelG), module, "BasicModelG", 0);
          }

          void t_BasicModelG::initialize(PyObject *module)
          {
            PyObject_SetAttrString((PyObject *) PY_TYPE(BasicModelG), "class_", make_descriptor(BasicModelG::initializeClass, 1));
            PyObject_SetAttrString((PyObject *) PY_TYPE(BasicModelG), "wrapfn_", make_descriptor(t_BasicModelG::wrap_jobject));
            PyObject_SetAttrString((PyObject *) PY_TYPE(BasicModelG), "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_BasicModelG_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, BasicModelG::initializeClass, 1)))
              return NULL;
            return t_BasicModelG::wrap_Object(BasicModelG(((t_BasicModelG *) arg)->object.this$));
          }
          static PyObject *t_BasicModelG_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, BasicModelG::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_BasicModelG_init_(t_BasicModelG *self, PyObject *args, PyObject *kwds)
          {
            BasicModelG object((jobject) NULL);

            INT_CALL(object = BasicModelG());
            self->object = object;

            return 0;
          }

          static PyObject *t_BasicModelG_explain(t_BasicModelG *self, PyObject *args)
          {
            ::org::apache::lucene::search::similarities::BasicStats a0((jobject) NULL);
            jdouble a1;
            jdouble a2;
            ::org::apache::lucene::search::Explanation result((jobject) NULL);

            if (!parseArgs(args, "kDD", ::org::apache::lucene::search::similarities::BasicStats::initializeClass, &a0, &a1, &a2))
            {
              OBJ_CALL(result = self->object.explain(a0, a1, a2));
              return ::org::apache::lucene::search::t_Explanation::wrap_Object(result);
            }

            return callSuper(PY_TYPE(BasicModelG), (PyObject *) self, "explain", args, 2);
          }

          static PyObject *t_BasicModelG_score(t_BasicModelG *self, PyObject *args)
          {
            ::org::apache::lucene::search::similarities::BasicStats a0((jobject) NULL);
            jdouble a1;
            jdouble a2;
            jdouble result;

            if (!parseArgs(args, "kDD", ::org::apache::lucene::search::similarities::BasicStats::initializeClass, &a0, &a1, &a2))
            {
              OBJ_CALL(result = self->object.score(a0, a1, a2));
              return PyFloat_FromDouble((double) result);
            }

            return callSuper(PY_TYPE(BasicModelG), (PyObject *) self, "score", args, 2);
          }

          static PyObject *t_BasicModelG_toString(t_BasicModelG *self, PyObject *args)
          {
            ::java::lang::String result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.toString());
              return j2p(result);
            }

            return callSuper(PY_TYPE(BasicModelG), (PyObject *) self, "toString", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/index/TermsEnum.h"
#include "org/apache/lucene/index/TermsEnum$SeekStatus.h"
#include "org/apache/lucene/index/ImpactsEnum.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/index/TermState.h"
#include "org/apache/lucene/util/BytesRefIterator.h"
#include "org/apache/lucene/index/PostingsEnum.h"
#include "org/apache/lucene/util/AttributeSource.h"
#include "org/apache/lucene/util/BytesRef.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/index/TermsEnum.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {

        ::java::lang::Class *TermsEnum::class$ = NULL;
        jmethodID *TermsEnum::mids$ = NULL;
        bool TermsEnum::live$ = false;
        TermsEnum *TermsEnum::EMPTY = NULL;

        jclass TermsEnum::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/index/TermsEnum");

            mids$ = new jmethodID[max_mid];
            mids$[mid_attributes_8fce18d62d0e145e] = env->getMethodID(cls, "attributes", "()Lorg/apache/lucene/util/AttributeSource;");
            mids$[mid_docFreq_9972fcc56b44e79d] = env->getMethodID(cls, "docFreq", "()I");
            mids$[mid_impacts_db5ea3c87adc7c65] = env->getMethodID(cls, "impacts", "(I)Lorg/apache/lucene/index/ImpactsEnum;");
            mids$[mid_ord_2e5ae9edcb9b072f] = env->getMethodID(cls, "ord", "()J");
            mids$[mid_postings_f8f2ff623a1d384c] = env->getMethodID(cls, "postings", "(Lorg/apache/lucene/index/PostingsEnum;)Lorg/apache/lucene/index/PostingsEnum;");
            mids$[mid_postings_bb7f8f714d51176b] = env->getMethodID(cls, "postings", "(Lorg/apache/lucene/index/PostingsEnum;I)Lorg/apache/lucene/index/PostingsEnum;");
            mids$[mid_seekCeil_78824f53cd7bdb8a] = env->getMethodID(cls, "seekCeil", "(Lorg/apache/lucene/util/BytesRef;)Lorg/apache/lucene/index/TermsEnum$SeekStatus;");
            mids$[mid_seekExact_553d972fe19daaec] = env->getMethodID(cls, "seekExact", "(Lorg/apache/lucene/util/BytesRef;)Z");
            mids$[mid_seekExact_9c778c9bce6694df] = env->getMethodID(cls, "seekExact", "(J)V");
            mids$[mid_seekExact_59a5c9565dacabef] = env->getMethodID(cls, "seekExact", "(Lorg/apache/lucene/util/BytesRef;Lorg/apache/lucene/index/TermState;)V");
            mids$[mid_term_7af2ea2e37ce82b8] = env->getMethodID(cls, "term", "()Lorg/apache/lucene/util/BytesRef;");
            mids$[mid_termState_774a8ebb2c222d2d] = env->getMethodID(cls, "termState", "()Lorg/apache/lucene/index/TermState;");
            mids$[mid_totalTermFreq_2e5ae9edcb9b072f] = env->getMethodID(cls, "totalTermFreq", "()J");

            class$ = new ::java::lang::Class(cls);
            cls = (jclass) class$->this$;

            EMPTY = new TermsEnum(env->getStaticObjectField(cls, "EMPTY", "Lorg/apache/lucene/index/TermsEnum;"));
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        ::org::apache::lucene::util::AttributeSource TermsEnum::attributes() const
        {
          return ::org::apache::lucene::util::AttributeSource(env->callObjectMethod(this$, mids$[mid_attributes_8fce18d62d0e145e]));
        }

        jint TermsEnum::docFreq() const
        {
          return env->callIntMethod(this$, mids$[mid_docFreq_9972fcc56b44e79d]);
        }

        ::org::apache::lucene::index::ImpactsEnum TermsEnum::impacts(jint a0) const
        {
          return ::org::apache::lucene::index::ImpactsEnum(env->callObjectMethod(this$, mids$[mid_impacts_db5ea3c87adc7c65], a0));
        }

        jlong TermsEnum::ord() const
        {
          return env->callLongMethod(this$, mids$[mid_ord_2e5ae9edcb9b072f]);
        }

        ::org::apache::lucene::index::PostingsEnum TermsEnum::postings(const ::org::apache::lucene::index::PostingsEnum & a0) const
        {
          return ::org::apache::lucene::index::PostingsEnum(env->callObjectMethod(this$, mids$[mid_postings_f8f2ff623a1d384c], a0.this$));
        }

        ::org::apache::lucene::index::PostingsEnum TermsEnum::postings(const ::org::apache::lucene::index::PostingsEnum & a0, jint a1) const
        {
          return ::org::apache::lucene::index::PostingsEnum(env->callObjectMethod(this$, mids$[mid_postings_bb7f8f714d51176b], a0.this$, a1));
        }

        ::org::apache::lucene::index::TermsEnum$SeekStatus TermsEnum::seekCeil(const ::org::apache::lucene::util::BytesRef & a0) const
        {
          return ::org::apache::lucene::index::TermsEnum$SeekStatus(env->callObjectMethod(this$, mids$[mid_seekCeil_78824f53cd7bdb8a], a0.this$));
        }

        jboolean TermsEnum::seekExact(const ::org::apache::lucene::util::BytesRef & a0) const
        {
          return env->callBooleanMethod(this$, mids$[mid_seekExact_553d972fe19daaec], a0.this$);
        }

        void TermsEnum::seekExact(jlong a0) const
        {
          env->callVoidMethod(this$, mids$[mid_seekExact_9c778c9bce6694df], a0);
        }

        void TermsEnum::seekExact(const ::org::apache::lucene::util::BytesRef & a0, const ::org::apache::lucene::index::TermState & a1) const
        {
          env->callVoidMethod(this$, mids$[mid_seekExact_59a5c9565dacabef], a0.this$, a1.this$);
        }

        ::org::apache::lucene::util::BytesRef TermsEnum::term() const
        {
          return ::org::apache::lucene::util::BytesRef(env->callObjectMethod(this$, mids$[mid_term_7af2ea2e37ce82b8]));
        }

        ::org::apache::lucene::index::TermState TermsEnum::termState() const
        {
          return ::org::apache::lucene::index::TermState(env->callObjectMethod(this$, mids$[mid_termState_774a8ebb2c222d2d]));
        }

        jlong TermsEnum::totalTermFreq() const
        {
          return env->callLongMethod(this$, mids$[mid_totalTermFreq_2e5ae9edcb9b072f]);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {
        static PyObject *t_TermsEnum_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_TermsEnum_instance_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_TermsEnum_attributes(t_TermsEnum *self);
        static PyObject *t_TermsEnum_docFreq(t_TermsEnum *self);
        static PyObject *t_TermsEnum_impacts(t_TermsEnum *self, PyObject *arg);
        static PyObject *t_TermsEnum_ord(t_TermsEnum *self);
        static PyObject *t_TermsEnum_postings(t_TermsEnum *self, PyObject *args);
        static PyObject *t_TermsEnum_seekCeil(t_TermsEnum *self, PyObject *arg);
        static PyObject *t_TermsEnum_seekExact(t_TermsEnum *self, PyObject *args);
        static PyObject *t_TermsEnum_term(t_TermsEnum *self);
        static PyObject *t_TermsEnum_termState(t_TermsEnum *self);
        static PyObject *t_TermsEnum_totalTermFreq(t_TermsEnum *self);

        static PyMethodDef t_TermsEnum__methods_[] = {
          DECLARE_METHOD(t_TermsEnum, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_TermsEnum, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_TermsEnum, attributes, METH_NOARGS),
          DECLARE_METHOD(t_TermsEnum, docFreq, METH_NOARGS),
          DECLARE_METHOD(t_TermsEnum, impacts, METH_O),
          DECLARE_METHOD(t_TermsEnum, ord, METH_NOARGS),
          DECLARE_METHOD(t_TermsEnum, postings, METH_VARARGS),
          DECLARE_METHOD(t_TermsEnum, seekCeil, METH_O),
          DECLARE_METHOD(t_TermsEnum, seekExact, METH_VARARGS),
          DECLARE_METHOD(t_TermsEnum, term, METH_NOARGS),
          DECLARE_METHOD(t_TermsEnum, termState, METH_NOARGS),
          DECLARE_METHOD(t_TermsEnum, totalTermFreq, METH_NOARGS),
          { NULL, NULL, 0, NULL }
        };

        static PyType_Slot PY_TYPE_SLOTS(TermsEnum)[] = {
          { Py_tp_methods, t_TermsEnum__methods_ },
          { Py_tp_init, (void *) abstract_init },
          { 0, NULL }
        };

        static PyType_Def *PY_TYPE_BASES(TermsEnum)[] = {
          &PY_TYPE_DEF(::java::lang::Object),
          NULL
        };

        DEFINE_TYPE(TermsEnum, t_TermsEnum, TermsEnum);

        void t_TermsEnum::install(PyObject *module)
        {
          installType(&PY_TYPE(TermsEnum), &PY_TYPE_DEF(TermsEnum), module, "TermsEnum", 0);
          PyObject_SetAttrString((PyObject *) PY_TYPE(TermsEnum), "SeekStatus", make_descriptor(&PY_TYPE_DEF(TermsEnum$SeekStatus)));
        }

        void t_TermsEnum::initialize(PyObject *module)
        {
          PyObject_SetAttrString((PyObject *) PY_TYPE(TermsEnum), "class_", make_descriptor(TermsEnum::initializeClass, 1));
          PyObject_SetAttrString((PyObject *) PY_TYPE(TermsEnum), "wrapfn_", make_descriptor(t_TermsEnum::wrap_jobject));
          PyObject_SetAttrString((PyObject *) PY_TYPE(TermsEnum), "boxfn_", make_descriptor(boxObject));
          env->getClass(TermsEnum::initializeClass);
          PyObject_SetAttrString((PyObject *) PY_TYPE(TermsEnum), "EMPTY", make_descriptor(t_TermsEnum::wrap_Object(*TermsEnum::EMPTY)));
        }

        static PyObject *t_TermsEnum_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, TermsEnum::initializeClass, 1)))
            return NULL;
          return t_TermsEnum::wrap_Object(TermsEnum(((t_TermsEnum *) arg)->object.this$));
        }
        static PyObject *t_TermsEnum_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, TermsEnum::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static PyObject *t_TermsEnum_attributes(t_TermsEnum *self)
        {
          ::org::apache::lucene::util::AttributeSource result((jobject) NULL);
          OBJ_CALL(result = self->object.attributes());
          return ::org::apache::lucene::util::t_AttributeSource::wrap_Object(result);
        }

        static PyObject *t_TermsEnum_docFreq(t_TermsEnum *self)
        {
          jint result;
          OBJ_CALL(result = self->object.docFreq());
          return PyLong_FromLong((long) result);
        }

        static PyObject *t_TermsEnum_impacts(t_TermsEnum *self, PyObject *arg)
        {
          jint a0;
          ::org::apache::lucene::index::ImpactsEnum result((jobject) NULL);

          if (!parseArg(arg, "I", &a0))
          {
            OBJ_CALL(result = self->object.impacts(a0));
            return ::org::apache::lucene::index::t_ImpactsEnum::wrap_Object(result);
          }

          PyErr_SetArgsError((PyObject *) self, "impacts", arg);
          return NULL;
        }

        static PyObject *t_TermsEnum_ord(t_TermsEnum *self)
        {
          jlong result;
          OBJ_CALL(result = self->object.ord());
          return PyLong_FromLongLong((PY_LONG_LONG) result);
        }

        static PyObject *t_TermsEnum_postings(t_TermsEnum *self, PyObject *args)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 1:
            {
              ::org::apache::lucene::index::PostingsEnum a0((jobject) NULL);
              ::org::apache::lucene::index::PostingsEnum result((jobject) NULL);

              if (!parseArgs(args, "k", ::org::apache::lucene::index::PostingsEnum::initializeClass, &a0))
              {
                OBJ_CALL(result = self->object.postings(a0));
                return ::org::apache::lucene::index::t_PostingsEnum::wrap_Object(result);
              }
            }
            break;
           case 2:
            {
              ::org::apache::lucene::index::PostingsEnum a0((jobject) NULL);
              jint a1;
              ::org::apache::lucene::index::PostingsEnum result((jobject) NULL);

              if (!parseArgs(args, "kI", ::org::apache::lucene::index::PostingsEnum::initializeClass, &a0, &a1))
              {
                OBJ_CALL(result = self->object.postings(a0, a1));
                return ::org::apache::lucene::index::t_PostingsEnum::wrap_Object(result);
              }
            }
          }

          PyErr_SetArgsError((PyObject *) self, "postings", args);
          return NULL;
        }

        static PyObject *t_TermsEnum_seekCeil(t_TermsEnum *self, PyObject *arg)
        {
          ::org::apache::lucene::util::BytesRef a0((jobject) NULL);
          ::org::apache::lucene::index::TermsEnum$SeekStatus result((jobject) NULL);

          if (!parseArg(arg, "k", ::org::apache::lucene::util::BytesRef::initializeClass, &a0))
          {
            OBJ_CALL(result = self->object.seekCeil(a0));
            return ::org::apache::lucene::index::t_TermsEnum$SeekStatus::wrap_Object(result);
          }

          PyErr_SetArgsError((PyObject *) self, "seekCeil", arg);
          return NULL;
        }

        static PyObject *t_TermsEnum_seekExact(t_TermsEnum *self, PyObject *args)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 1:
            {
              ::org::apache::lucene::util::BytesRef a0((jobject) NULL);
              jboolean result;

              if (!parseArgs(args, "k", ::org::apache::lucene::util::BytesRef::initializeClass, &a0))
              {
                OBJ_CALL(result = self->object.seekExact(a0));
                Py_RETURN_BOOL(result);
              }
            }
            {
              jlong a0;

              if (!parseArgs(args, "J", &a0))
              {
                OBJ_CALL(self->object.seekExact(a0));
                Py_RETURN_NONE;
              }
            }
            break;
           case 2:
            {
              ::org::apache::lucene::util::BytesRef a0((jobject) NULL);
              ::org::apache::lucene::index::TermState a1((jobject) NULL);

              if (!parseArgs(args, "kk", ::org::apache::lucene::util::BytesRef::initializeClass, ::org::apache::lucene::index::TermState::initializeClass, &a0, &a1))
              {
                OBJ_CALL(self->object.seekExact(a0, a1));
                Py_RETURN_NONE;
              }
            }
          }

          PyErr_SetArgsError((PyObject *) self, "seekExact", args);
          return NULL;
        }

        static PyObject *t_TermsEnum_term(t_TermsEnum *self)
        {
          ::org::apache::lucene::util::BytesRef result((jobject) NULL);
          OBJ_CALL(result = self->object.term());
          return ::org::apache::lucene::util::t_BytesRef::wrap_Object(result);
        }

        static PyObject *t_TermsEnum_termState(t_TermsEnum *self)
        {
          ::org::apache::lucene::index::TermState result((jobject) NULL);
          OBJ_CALL(result = self->object.termState());
          return ::org::apache::lucene::index::t_TermState::wrap_Object(result);
        }

        static PyObject *t_TermsEnum_totalTermFreq(t_TermsEnum *self)
        {
          jlong result;
          OBJ_CALL(result = self->object.totalTermFreq());
          return PyLong_FromLongLong((PY_LONG_LONG) result);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "java/util/TreeSet.h"
#include "java/util/SortedSet.h"
#include "java/util/Collection.h"
#include "java/util/Comparator.h"
#include "java/lang/Cloneable.h"
#include "java/util/NavigableSet.h"
#include "java/lang/Class.h"
#include "java/lang/Object.h"
#include "java/util/Spliterator.h"
#include "java/util/Iterator.h"
#include "java/io/Serializable.h"
#include "JArray.h"

namespace java {
  namespace util {

    ::java::lang::Class *TreeSet::class$ = NULL;
    jmethodID *TreeSet::mids$ = NULL;
    bool TreeSet::live$ = false;

    jclass TreeSet::initializeClass(bool getOnly)
    {
      if (getOnly)
        return (jclass) (live$ ? class$->this$ : NULL);
      if (class$ == NULL)
      {
        jclass cls = (jclass) env->findClass("java/util/TreeSet");

        mids$ = new jmethodID[max_mid];
        mids$[mid_init$_f2cc1bce94666404] = env->getMethodID(cls, "<init>", "()V");
        mids$[mid_init$_50bc3ddc62a19f2d] = env->getMethodID(cls, "<init>", "(Ljava/util/Collection;)V");
        mids$[mid_init$_4703504c5d45d50f] = env->getMethodID(cls, "<init>", "(Ljava/util/Comparator;)V");
        mids$[mid_init$_96833f9feb620a6a] = env->getMethodID(cls, "<init>", "(Ljava/util/SortedSet;)V");
        mids$[mid_add_8b72f2dcdde6fd1d] = env->getMethodID(cls, "add", "(Ljava/lang/Object;)Z");
        mids$[mid_addAll_15d9cc2398c22637] = env->getMethodID(cls, "addAll", "(Ljava/util/Collection;)Z");
        mids$[mid_ceiling_e5ae0f8c04795fa9] = env->getMethodID(cls, "ceiling", "(Ljava/lang/Object;)Ljava/lang/Object;");
        mids$[mid_clear_f2cc1bce94666404] = env->getMethodID(cls, "clear", "()V");
        mids$[mid_clone_d6bcd06f3102c4d9] = env->getMethodID(cls, "clone", "()Ljava/lang/Object;");
        mids$[mid_comparator_beb0414e0ec1de00] = env->getMethodID(cls, "comparator", "()Ljava/util/Comparator;");
        mids$[mid_contains_8b72f2dcdde6fd1d] = env->getMethodID(cls, "contains", "(Ljava/lang/Object;)Z");
        mids$[mid_descendingIterator_233a192dadb0917d] = env->getMethodID(cls, "descendingIterator", "()Ljava/util/Iterator;");
        mids$[mid_descendingSet_69a674c200eed505] = env->getMethodID(cls, "descendingSet", "()Ljava/util/NavigableSet;");
        mids$[mid_first_d6bcd06f3102c4d9] = env->getMethodID(cls, "first", "()Ljava/lang/Object;");
        mids$[mid_floor_e5ae0f8c04795fa9] = env->getMethodID(cls, "floor", "(Ljava/lang/Object;)Ljava/lang/Object;");
        mids$[mid_headSet_53f2bf24b94c5740] = env->getMethodID(cls, "headSet", "(Ljava/lang/Object;)Ljava/util/SortedSet;");
        mids$[mid_headSet_18a0ce538fdac12f] = env->getMethodID(cls, "headSet", "(Ljava/lang/Object;Z)Ljava/util/NavigableSet;");
        mids$[mid_higher_e5ae0f8c04795fa9] = env->getMethodID(cls, "higher", "(Ljava/lang/Object;)Ljava/lang/Object;");
        mids$[mid_isEmpty_8454bd5aa23fd11e] = env->getMethodID(cls, "isEmpty", "()Z");
        mids$[mid_iterator_233a192dadb0917d] = env->getMethodID(cls, "iterator", "()Ljava/util/Iterator;");
        mids$[mid_last_d6bcd06f3102c4d9] = env->getMethodID(cls, "last", "()Ljava/lang/Object;");
        mids$[mid_lower_e5ae0f8c04795fa9] = env->getMethodID(cls, "lower", "(Ljava/lang/Object;)Ljava/lang/Object;");
        mids$[mid_pollFirst_d6bcd06f3102c4d9] = env->getMethodID(cls, "pollFirst", "()Ljava/lang/Object;");
        mids$[mid_pollLast_d6bcd06f3102c4d9] = env->getMethodID(cls, "pollLast", "()Ljava/lang/Object;");
        mids$[mid_remove_8b72f2dcdde6fd1d] = env->getMethodID(cls, "remove", "(Ljava/lang/Object;)Z");
        mids$[mid_size_9972fcc56b44e79d] = env->getMethodID(cls, "size", "()I");
        mids$[mid_spliterator_7a761c107a8e14bd] = env->getMethodID(cls, "spliterator", "()Ljava/util/Spliterator;");
        mids$[mid_subSet_02b9298b38245e1d] = env->getMethodID(cls, "subSet", "(Ljava/lang/Object;Ljava/lang/Object;)Ljava/util/SortedSet;");
        mids$[mid_subSet_f6bf97d8ce23e495] = env->getMethodID(cls, "subSet", "(Ljava/lang/Object;ZLjava/lang/Object;Z)Ljava/util/NavigableSet;");
        mids$[mid_tailSet_53f2bf24b94c5740] = env->getMethodID(cls, "tailSet", "(Ljava/lang/Object;)Ljava/util/SortedSet;");
        mids$[mid_tailSet_18a0ce538fdac12f] = env->getMethodID(cls, "tailSet", "(Ljava/lang/Object;Z)Ljava/util/NavigableSet;");

        class$ = new ::java::lang::Class(cls);
        live$ = true;
      }
      return (jclass) class$->this$;
    }

    TreeSet::TreeSet() : ::java::util::AbstractSet(env->newObject(initializeClass, &mids$, mid_init$_f2cc1bce94666404)) {}

    TreeSet::TreeSet(const ::java::util::Collection & a0) : ::java::util::AbstractSet(env->newObject(initializeClass, &mids$, mid_init$_50bc3ddc62a19f2d, a0.this$)) {}

    TreeSet::TreeSet(const ::java::util::Comparator & a0) : ::java::util::AbstractSet(env->newObject(initializeClass, &mids$, mid_init$_4703504c5d45d50f, a0.this$)) {}

    TreeSet::TreeSet(const ::java::util::SortedSet & a0) : ::java::util::AbstractSet(env->newObject(initializeClass, &mids$, mid_init$_96833f9feb620a6a, a0.this$)) {}

    jboolean TreeSet::add(const ::java::lang::Object & a0) const
    {
      return env->callBooleanMethod(this$, mids$[mid_add_8b72f2dcdde6fd1d], a0.this$);
    }

    jboolean TreeSet::addAll(const ::java::util::Collection & a0) const
    {
      return env->callBooleanMethod(this$, mids$[mid_addAll_15d9cc2398c22637], a0.this$);
    }

    ::java::lang::Object TreeSet::ceiling(const ::java::lang::Object & a0) const
    {
      return ::java::lang::Object(env->callObjectMethod(this$, mids$[mid_ceiling_e5ae0f8c04795fa9], a0.this$));
    }

    void TreeSet::clear() const
    {
      env->callVoidMethod(this$, mids$[mid_clear_f2cc1bce94666404]);
    }

    ::java::lang::Object TreeSet::clone() const
    {
      return ::java::lang::Object(env->callObjectMethod(this$, mids$[mid_clone_d6bcd06f3102c4d9]));
    }

    ::java::util::Comparator TreeSet::comparator() const
    {
      return ::java::util::Comparator(env->callObjectMethod(this$, mids$[mid_comparator_beb0414e0ec1de00]));
    }

    jboolean TreeSet::contains(const ::java::lang::Object & a0) const
    {
      return env->callBooleanMethod(this$, mids$[mid_contains_8b72f2dcdde6fd1d], a0.this$);
    }

    ::java::util::Iterator TreeSet::descendingIterator() const
    {
      return ::java::util::Iterator(env->callObjectMethod(this$, mids$[mid_descendingIterator_233a192dadb0917d]));
    }

    ::java::util::NavigableSet TreeSet::descendingSet() const
    {
      return ::java::util::NavigableSet(env->callObjectMethod(this$, mids$[mid_descendingSet_69a674c200eed505]));
    }

    ::java::lang::Object TreeSet::first() const
    {
      return ::java::lang::Object(env->callObjectMethod(this$, mids$[mid_first_d6bcd06f3102c4d9]));
    }

    ::java::lang::Object TreeSet::floor(const ::java::lang::Object & a0) const
    {
      return ::java::lang::Object(env->callObjectMethod(this$, mids$[mid_floor_e5ae0f8c04795fa9], a0.this$));
    }

    ::java::util::SortedSet TreeSet::headSet(const ::java::lang::Object & a0) const
    {
      return ::java::util::SortedSet(env->callObjectMethod(this$, mids$[mid_headSet_53f2bf24b94c5740], a0.this$));
    }

    ::java::util::NavigableSet TreeSet::headSet(const ::java::lang::Object & a0, jboolean a1) const
    {
      return ::java::util::NavigableSet(env->callObjectMethod(this$, mids$[mid_headSet_18a0ce538fdac12f], a0.this$, a1));
    }

    ::java::lang::Object TreeSet::higher(const ::java::lang::Object & a0) const
    {
      return ::java::lang::Object(env->callObjectMethod(this$, mids$[mid_higher_e5ae0f8c04795fa9], a0.this$));
    }

    jboolean TreeSet::isEmpty() const
    {
      return env->callBooleanMethod(this$, mids$[mid_isEmpty_8454bd5aa23fd11e]);
    }

    ::java::util::Iterator TreeSet::iterator() const
    {
      return ::java::util::Iterator(env->callObjectMethod(this$, mids$[mid_iterator_233a192dadb0917d]));
    }

    ::java::lang::Object TreeSet::last() const
    {
      return ::java::lang::Object(env->callObjectMethod(this$, mids$[mid_last_d6bcd06f3102c4d9]));
    }

    ::java::lang::Object TreeSet::lower(const ::java::lang::Object & a0) const
    {
      return ::java::lang::Object(env->callObjectMethod(this$, mids$[mid_lower_e5ae0f8c04795fa9], a0.this$));
    }

    ::java::lang::Object TreeSet::pollFirst() const
    {
      return ::java::lang::Object(env->callObjectMethod(this$, mids$[mid_pollFirst_d6bcd06f3102c4d9]));
    }

    ::java::lang::Object TreeSet::pollLast() const
    {
      return ::java::lang::Object(env->callObjectMethod(this$, mids$[mid_pollLast_d6bcd06f3102c4d9]));
    }

    jboolean TreeSet::remove(const ::java::lang::Object & a0) const
    {
      return env->callBooleanMethod(this$, mids$[mid_remove_8b72f2dcdde6fd1d], a0.this$);
    }

    jint TreeSet::size() const
    {
      return env->callIntMethod(this$, mids$[mid_size_9972fcc56b44e79d]);
    }

    ::java::util::Spliterator TreeSet::spliterator() const
    {
      return ::java::util::Spliterator(env->callObjectMethod(this$, mids$[mid_spliterator_7a761c107a8e14bd]));
    }

    ::java::util::SortedSet TreeSet::subSet(const ::java::lang::Object & a0, const ::java::lang::Object & a1) const
    {
      return ::java::util::SortedSet(env->callObjectMethod(this$, mids$[mid_subSet_02b9298b38245e1d], a0.this$, a1.this$));
    }

    ::java::util::NavigableSet TreeSet::subSet(const ::java::lang::Object & a0, jboolean a1, const ::java::lang::Object & a2, jboolean a3) const
    {
      return ::java::util::NavigableSet(env->callObjectMethod(this$, mids$[mid_subSet_f6bf97d8ce23e495], a0.this$, a1, a2.this$, a3));
    }

    ::java::util::SortedSet TreeSet::tailSet(const ::java::lang::Object & a0) const
    {
      return ::java::util::SortedSet(env->callObjectMethod(this$, mids$[mid_tailSet_53f2bf24b94c5740], a0.this$));
    }

    ::java::util::NavigableSet TreeSet::tailSet(const ::java::lang::Object & a0, jboolean a1) const
    {
      return ::java::util::NavigableSet(env->callObjectMethod(this$, mids$[mid_tailSet_18a0ce538fdac12f], a0.this$, a1));
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace java {
  namespace util {
    static PyObject *t_TreeSet_cast_(PyTypeObject *type, PyObject *arg);
    static PyObject *t_TreeSet_instance_(PyTypeObject *type, PyObject *arg);
    static PyObject *t_TreeSet_of_(t_TreeSet *self, PyObject *args);
    static int t_TreeSet_init_(t_TreeSet *self, PyObject *args, PyObject *kwds);
    static PyObject *t_TreeSet_add(t_TreeSet *self, PyObject *args);
    static PyObject *t_TreeSet_addAll(t_TreeSet *self, PyObject *args);
    static PyObject *t_TreeSet_ceiling(t_TreeSet *self, PyObject *arg);
    static PyObject *t_TreeSet_clear(t_TreeSet *self, PyObject *args);
    static PyObject *t_TreeSet_clone(t_TreeSet *self);
    static PyObject *t_TreeSet_comparator(t_TreeSet *self);
    static PyObject *t_TreeSet_contains(t_TreeSet *self, PyObject *args);
    static PyObject *t_TreeSet_descendingIterator(t_TreeSet *self);
    static PyObject *t_TreeSet_descendingSet(t_TreeSet *self);
    static PyObject *t_TreeSet_first(t_TreeSet *self);
    static PyObject *t_TreeSet_floor(t_TreeSet *self, PyObject *arg);
    static PyObject *t_TreeSet_headSet(t_TreeSet *self, PyObject *args);
    static PyObject *t_TreeSet_higher(t_TreeSet *self, PyObject *arg);
    static PyObject *t_TreeSet_isEmpty(t_TreeSet *self, PyObject *args);
    static PyObject *t_TreeSet_iterator(t_TreeSet *self, PyObject *args);
    static PyObject *t_TreeSet_last(t_TreeSet *self);
    static PyObject *t_TreeSet_lower(t_TreeSet *self, PyObject *arg);
    static PyObject *t_TreeSet_pollFirst(t_TreeSet *self);
    static PyObject *t_TreeSet_pollLast(t_TreeSet *self);
    static PyObject *t_TreeSet_remove(t_TreeSet *self, PyObject *args);
    static PyObject *t_TreeSet_size(t_TreeSet *self, PyObject *args);
    static PyObject *t_TreeSet_spliterator(t_TreeSet *self, PyObject *args);
    static PyObject *t_TreeSet_subSet(t_TreeSet *self, PyObject *args);
    static PyObject *t_TreeSet_tailSet(t_TreeSet *self, PyObject *args);
    static PyObject *t_TreeSet_get__empty(t_TreeSet *self, void *data);
    static PyObject *t_TreeSet_get__parameters_(t_TreeSet *self, void *data);
    static PyGetSetDef t_TreeSet__fields_[] = {
      DECLARE_GET_FIELD(t_TreeSet, empty),
      DECLARE_GET_FIELD(t_TreeSet, parameters_),
      { NULL, NULL, NULL, NULL, NULL }
    };

    static PyMethodDef t_TreeSet__methods_[] = {
      DECLARE_METHOD(t_TreeSet, cast_, METH_O | METH_CLASS),
      DECLARE_METHOD(t_TreeSet, instance_, METH_O | METH_CLASS),
      DECLARE_METHOD(t_TreeSet, of_, METH_VARARGS),
      DECLARE_METHOD(t_TreeSet, add, METH_VARARGS),
      DECLARE_METHOD(t_TreeSet, addAll, METH_VARARGS),
      DECLARE_METHOD(t_TreeSet, ceiling, METH_O),
      DECLARE_METHOD(t_TreeSet, clear, METH_VARARGS),
      DECLARE_METHOD(t_TreeSet, clone, METH_NOARGS),
      DECLARE_METHOD(t_TreeSet, comparator, METH_NOARGS),
      DECLARE_METHOD(t_TreeSet, contains, METH_VARARGS),
      DECLARE_METHOD(t_TreeSet, descendingIterator, METH_NOARGS),
      DECLARE_METHOD(t_TreeSet, descendingSet, METH_NOARGS),
      DECLARE_METHOD(t_TreeSet, first, METH_NOARGS),
      DECLARE_METHOD(t_TreeSet, floor, METH_O),
      DECLARE_METHOD(t_TreeSet, headSet, METH_VARARGS),
      DECLARE_METHOD(t_TreeSet, higher, METH_O),
      DECLARE_METHOD(t_TreeSet, isEmpty, METH_VARARGS),
      DECLARE_METHOD(t_TreeSet, iterator, METH_VARARGS),
      DECLARE_METHOD(t_TreeSet, last, METH_NOARGS),
      DECLARE_METHOD(t_TreeSet, lower, METH_O),
      DECLARE_METHOD(t_TreeSet, pollFirst, METH_NOARGS),
      DECLARE_METHOD(t_TreeSet, pollLast, METH_NOARGS),
      DECLARE_METHOD(t_TreeSet, remove, METH_VARARGS),
      DECLARE_METHOD(t_TreeSet, size, METH_VARARGS),
      DECLARE_METHOD(t_TreeSet, spliterator, METH_VARARGS),
      DECLARE_METHOD(t_TreeSet, subSet, METH_VARARGS),
      DECLARE_METHOD(t_TreeSet, tailSet, METH_VARARGS),
      { NULL, NULL, 0, NULL }
    };

    static PyType_Slot PY_TYPE_SLOTS(TreeSet)[] = {
      { Py_tp_methods, t_TreeSet__methods_ },
      { Py_tp_init, (void *) t_TreeSet_init_ },
      { Py_tp_getset, t_TreeSet__fields_ },
      { Py_tp_iter, (void *) ((PyObject *(*)(t_TreeSet *)) get_generic_iterator< t_TreeSet >) },
      { Py_tp_iternext, (void *) 0 },
      { 0, NULL }
    };

    static PyType_Def *PY_TYPE_BASES(TreeSet)[] = {
      &PY_TYPE_DEF(::java::util::AbstractSet),
      NULL
    };

    DEFINE_TYPE(TreeSet, t_TreeSet, TreeSet);
    PyObject *t_TreeSet::wrap_Object(const TreeSet& object, PyTypeObject *p0)
    {
      PyObject *obj = t_TreeSet::wrap_Object(object);
      if (obj != NULL && obj != Py_None)
      {
        t_TreeSet *self = (t_TreeSet *) obj;
        self->parameters[0] = p0;
      }
      return obj;
    }

    PyObject *t_TreeSet::wrap_jobject(const jobject& object, PyTypeObject *p0)
    {
      PyObject *obj = t_TreeSet::wrap_jobject(object);
      if (obj != NULL && obj != Py_None)
      {
        t_TreeSet *self = (t_TreeSet *) obj;
        self->parameters[0] = p0;
      }
      return obj;
    }

    void t_TreeSet::install(PyObject *module)
    {
      installType(&PY_TYPE(TreeSet), &PY_TYPE_DEF(TreeSet), module, "TreeSet", 0);
    }

    void t_TreeSet::initialize(PyObject *module)
    {
      PyObject_SetAttrString((PyObject *) PY_TYPE(TreeSet), "class_", make_descriptor(TreeSet::initializeClass, 1));
      PyObject_SetAttrString((PyObject *) PY_TYPE(TreeSet), "wrapfn_", make_descriptor(t_TreeSet::wrap_jobject));
      PyObject_SetAttrString((PyObject *) PY_TYPE(TreeSet), "boxfn_", make_descriptor(boxObject));
    }

    static PyObject *t_TreeSet_cast_(PyTypeObject *type, PyObject *arg)
    {
      if (!(arg = castCheck(arg, TreeSet::initializeClass, 1)))
        return NULL;
      return t_TreeSet::wrap_Object(TreeSet(((t_TreeSet *) arg)->object.this$));
    }
    static PyObject *t_TreeSet_instance_(PyTypeObject *type, PyObject *arg)
    {
      if (!castCheck(arg, TreeSet::initializeClass, 0))
        Py_RETURN_FALSE;
      Py_RETURN_TRUE;
    }

    static PyObject *t_TreeSet_of_(t_TreeSet *self, PyObject *args)
    {
      if (!parseArg(args, "T", 1, &(self->parameters)))
        Py_RETURN_SELF;
      return PyErr_SetArgsError((PyObject *) self, "of_", args);
    }

    static int t_TreeSet_init_(t_TreeSet *self, PyObject *args, PyObject *kwds)
    {
      switch (PyTuple_GET_SIZE(args)) {
       case 0:
        {
          TreeSet object((jobject) NULL);

          INT_CALL(object = TreeSet());
          self->object = object;
          break;
        }
       case 1:
        {
          ::java::util::Collection a0((jobject) NULL);
          PyTypeObject **p0;
          TreeSet object((jobject) NULL);

          if (!parseArgs(args, "K", ::java::util::Collection::initializeClass, &a0, &p0, ::java::util::t_Collection::parameters_))
          {
            INT_CALL(object = TreeSet(a0));
            self->object = object;
            break;
          }
        }
        {
          ::java::util::Comparator a0((jobject) NULL);
          PyTypeObject **p0;
          TreeSet object((jobject) NULL);

          if (!parseArgs(args, "K", ::java::util::Comparator::initializeClass, &a0, &p0, ::java::util::t_Comparator::parameters_))
          {
            INT_CALL(object = TreeSet(a0));
            self->object = object;
            break;
          }
        }
        {
          ::java::util::SortedSet a0((jobject) NULL);
          PyTypeObject **p0;
          TreeSet object((jobject) NULL);

          if (!parseArgs(args, "K", ::java::util::SortedSet::initializeClass, &a0, &p0, ::java::util::t_SortedSet::parameters_))
          {
            INT_CALL(object = TreeSet(a0));
            self->object = object;
            break;
          }
        }
       default:
        PyErr_SetArgsError((PyObject *) self, "__init__", args);
        return -1;
      }

      return 0;
    }

    static PyObject *t_TreeSet_add(t_TreeSet *self, PyObject *args)
    {
      ::java::lang::Object a0((jobject) NULL);
      jboolean result;

      if (!parseArgs(args, "O", self->parameters[0], &a0))
      {
        OBJ_CALL(result = self->object.add(a0));
        Py_RETURN_BOOL(result);
      }

      return callSuper(PY_TYPE(TreeSet), (PyObject *) self, "add", args, 2);
    }

    static PyObject *t_TreeSet_addAll(t_TreeSet *self, PyObject *args)
    {
      ::java::util::Collection a0((jobject) NULL);
      PyTypeObject **p0;
      jboolean result;

      if (!parseArgs(args, "K", ::java::util::Collection::initializeClass, &a0, &p0, ::java::util::t_Collection::parameters_))
      {
        OBJ_CALL(result = self->object.addAll(a0));
        Py_RETURN_BOOL(result);
      }

      return callSuper(PY_TYPE(TreeSet), (PyObject *) self, "addAll", args, 2);
    }

    static PyObject *t_TreeSet_ceiling(t_TreeSet *self, PyObject *arg)
    {
      ::java::lang::Object a0((jobject) NULL);
      ::java::lang::Object result((jobject) NULL);

      if (!parseArg(arg, "O", self->parameters[0], &a0))
      {
        OBJ_CALL(result = self->object.ceiling(a0));
        return self->parameters[0] != NULL ? wrapType(self->parameters[0], result.this$) : ::java::lang::t_Object::wrap_Object(result);
      }

      PyErr_SetArgsError((PyObject *) self, "ceiling", arg);
      return NULL;
    }

    static PyObject *t_TreeSet_clear(t_TreeSet *self, PyObject *args)
    {

      if (!parseArgs(args, ""))
      {
        OBJ_CALL(self->object.clear());
        Py_RETURN_NONE;
      }

      return callSuper(PY_TYPE(TreeSet), (PyObject *) self, "clear", args, 2);
    }

    static PyObject *t_TreeSet_clone(t_TreeSet *self)
    {
      ::java::lang::Object result((jobject) NULL);
      OBJ_CALL(result = self->object.clone());
      return ::java::lang::t_Object::wrap_Object(result);
    }

    static PyObject *t_TreeSet_comparator(t_TreeSet *self)
    {
      ::java::util::Comparator result((jobject) NULL);
      OBJ_CALL(result = self->object.comparator());
      return ::java::util::t_Comparator::wrap_Object(result);
    }

    static PyObject *t_TreeSet_contains(t_TreeSet *self, PyObject *args)
    {
      ::java::lang::Object a0((jobject) NULL);
      jboolean result;

      if (!parseArgs(args, "o", &a0))
      {
        OBJ_CALL(result = self->object.contains(a0));
        Py_RETURN_BOOL(result);
      }

      return callSuper(PY_TYPE(TreeSet), (PyObject *) self, "contains", args, 2);
    }

    static PyObject *t_TreeSet_descendingIterator(t_TreeSet *self)
    {
      ::java::util::Iterator result((jobject) NULL);
      OBJ_CALL(result = self->object.descendingIterator());
      return ::java::util::t_Iterator::wrap_Object(result, self->parameters[0]);
    }

    static PyObject *t_TreeSet_descendingSet(t_TreeSet *self)
    {
      ::java::util::NavigableSet result((jobject) NULL);
      OBJ_CALL(result = self->object.descendingSet());
      return ::java::util::t_NavigableSet::wrap_Object(result, self->parameters[0]);
    }

    static PyObject *t_TreeSet_first(t_TreeSet *self)
    {
      ::java::lang::Object result((jobject) NULL);
      OBJ_CALL(result = self->object.first());
      return self->parameters[0] != NULL ? wrapType(self->parameters[0], result.this$) : ::java::lang::t_Object::wrap_Object(result);
    }

    static PyObject *t_TreeSet_floor(t_TreeSet *self, PyObject *arg)
    {
      ::java::lang::Object a0((jobject) NULL);
      ::java::lang::Object result((jobject) NULL);

      if (!parseArg(arg, "O", self->parameters[0], &a0))
      {
        OBJ_CALL(result = self->object.floor(a0));
        return self->parameters[0] != NULL ? wrapType(self->parameters[0], result.this$) : ::java::lang::t_Object::wrap_Object(result);
      }

      PyErr_SetArgsError((PyObject *) self, "floor", arg);
      return NULL;
    }

    static PyObject *t_TreeSet_headSet(t_TreeSet *self, PyObject *args)
    {
      switch (PyTuple_GET_SIZE(args)) {
       case 1:
        {
          ::java::lang::Object a0((jobject) NULL);
          ::java::util::SortedSet result((jobject) NULL);

          if (!parseArgs(args, "O", self->parameters[0], &a0))
          {
            OBJ_CALL(result = self->object.headSet(a0));
            return ::java::util::t_SortedSet::wrap_Object(result, self->parameters[0]);
          }
        }
        break;
       case 2:
        {
          ::java::lang::Object a0((jobject) NULL);
          jboolean a1;
          ::java::util::NavigableSet result((jobject) NULL);

          if (!parseArgs(args, "OZ", self->parameters[0], &a0, &a1))
          {
            OBJ_CALL(result = self->object.headSet(a0, a1));
            return ::java::util::t_NavigableSet::wrap_Object(result, self->parameters[0]);
          }
        }
      }

      PyErr_SetArgsError((PyObject *) self, "headSet", args);
      return NULL;
    }

    static PyObject *t_TreeSet_higher(t_TreeSet *self, PyObject *arg)
    {
      ::java::lang::Object a0((jobject) NULL);
      ::java::lang::Object result((jobject) NULL);

      if (!parseArg(arg, "O", self->parameters[0], &a0))
      {
        OBJ_CALL(result = self->object.higher(a0));
        return self->parameters[0] != NULL ? wrapType(self->parameters[0], result.this$) : ::java::lang::t_Object::wrap_Object(result);
      }

      PyErr_SetArgsError((PyObject *) self, "higher", arg);
      return NULL;
    }

    static PyObject *t_TreeSet_isEmpty(t_TreeSet *self, PyObject *args)
    {
      jboolean result;

      if (!parseArgs(args, ""))
      {
        OBJ_CALL(result = self->object.isEmpty());
        Py_RETURN_BOOL(result);
      }

      return callSuper(PY_TYPE(TreeSet), (PyObject *) self, "isEmpty", args, 2);
    }

    static PyObject *t_TreeSet_iterator(t_TreeSet *self, PyObject *args)
    {
      ::java::util::Iterator result((jobject) NULL);

      if (!parseArgs(args, ""))
      {
        OBJ_CALL(result = self->object.iterator());
        return ::java::util::t_Iterator::wrap_Object(result, self->parameters[0]);
      }

      return callSuper(PY_TYPE(TreeSet), (PyObject *) self, "iterator", args, 2);
    }

    static PyObject *t_TreeSet_last(t_TreeSet *self)
    {
      ::java::lang::Object result((jobject) NULL);
      OBJ_CALL(result = self->object.last());
      return self->parameters[0] != NULL ? wrapType(self->parameters[0], result.this$) : ::java::lang::t_Object::wrap_Object(result);
    }

    static PyObject *t_TreeSet_lower(t_TreeSet *self, PyObject *arg)
    {
      ::java::lang::Object a0((jobject) NULL);
      ::java::lang::Object result((jobject) NULL);

      if (!parseArg(arg, "O", self->parameters[0], &a0))
      {
        OBJ_CALL(result = self->object.lower(a0));
        return self->parameters[0] != NULL ? wrapType(self->parameters[0], result.this$) : ::java::lang::t_Object::wrap_Object(result);
      }

      PyErr_SetArgsError((PyObject *) self, "lower", arg);
      return NULL;
    }

    static PyObject *t_TreeSet_pollFirst(t_TreeSet *self)
    {
      ::java::lang::Object result((jobject) NULL);
      OBJ_CALL(result = self->object.pollFirst());
      return self->parameters[0] != NULL ? wrapType(self->parameters[0], result.this$) : ::java::lang::t_Object::wrap_Object(result);
    }

    static PyObject *t_TreeSet_pollLast(t_TreeSet *self)
    {
      ::java::lang::Object result((jobject) NULL);
      OBJ_CALL(result = self->object.pollLast());
      return self->parameters[0] != NULL ? wrapType(self->parameters[0], result.this$) : ::java::lang::t_Object::wrap_Object(result);
    }

    static PyObject *t_TreeSet_remove(t_TreeSet *self, PyObject *args)
    {
      ::java::lang::Object a0((jobject) NULL);
      jboolean result;

      if (!parseArgs(args, "o", &a0))
      {
        OBJ_CALL(result = self->object.remove(a0));
        Py_RETURN_BOOL(result);
      }

      return callSuper(PY_TYPE(TreeSet), (PyObject *) self, "remove", args, 2);
    }

    static PyObject *t_TreeSet_size(t_TreeSet *self, PyObject *args)
    {
      jint result;

      if (!parseArgs(args, ""))
      {
        OBJ_CALL(result = self->object.size());
        return PyLong_FromLong((long) result);
      }

      return callSuper(PY_TYPE(TreeSet), (PyObject *) self, "size", args, 2);
    }

    static PyObject *t_TreeSet_spliterator(t_TreeSet *self, PyObject *args)
    {
      ::java::util::Spliterator result((jobject) NULL);

      if (!parseArgs(args, ""))
      {
        OBJ_CALL(result = self->object.spliterator());
        return ::java::util::t_Spliterator::wrap_Object(result, self->parameters[0]);
      }

      return callSuper(PY_TYPE(TreeSet), (PyObject *) self, "spliterator", args, 2);
    }

    static PyObject *t_TreeSet_subSet(t_TreeSet *self, PyObject *args)
    {
      switch (PyTuple_GET_SIZE(args)) {
       case 2:
        {
          ::java::lang::Object a0((jobject) NULL);
          ::java::lang::Object a1((jobject) NULL);
          ::java::util::SortedSet result((jobject) NULL);

          if (!parseArgs(args, "OO", self->parameters[0], self->parameters[0], &a0, &a1))
          {
            OBJ_CALL(result = self->object.subSet(a0, a1));
            return ::java::util::t_SortedSet::wrap_Object(result, self->parameters[0]);
          }
        }
        break;
       case 4:
        {
          ::java::lang::Object a0((jobject) NULL);
          jboolean a1;
          ::java::lang::Object a2((jobject) NULL);
          jboolean a3;
          ::java::util::NavigableSet result((jobject) NULL);

          if (!parseArgs(args, "OZOZ", self->parameters[0], self->parameters[0], &a0, &a1, &a2, &a3))
          {
            OBJ_CALL(result = self->object.subSet(a0, a1, a2, a3));
            return ::java::util::t_NavigableSet::wrap_Object(result, self->parameters[0]);
          }
        }
      }

      PyErr_SetArgsError((PyObject *) self, "subSet", args);
      return NULL;
    }

    static PyObject *t_TreeSet_tailSet(t_TreeSet *self, PyObject *args)
    {
      switch (PyTuple_GET_SIZE(args)) {
       case 1:
        {
          ::java::lang::Object a0((jobject) NULL);
          ::java::util::SortedSet result((jobject) NULL);

          if (!parseArgs(args, "O", self->parameters[0], &a0))
          {
            OBJ_CALL(result = self->object.tailSet(a0));
            return ::java::util::t_SortedSet::wrap_Object(result, self->parameters[0]);
          }
        }
        break;
       case 2:
        {
          ::java::lang::Object a0((jobject) NULL);
          jboolean a1;
          ::java::util::NavigableSet result((jobject) NULL);

          if (!parseArgs(args, "OZ", self->parameters[0], &a0, &a1))
          {
            OBJ_CALL(result = self->object.tailSet(a0, a1));
            return ::java::util::t_NavigableSet::wrap_Object(result, self->parameters[0]);
          }
        }
      }

      PyErr_SetArgsError((PyObject *) self, "tailSet", args);
      return NULL;
    }
    static PyObject *t_TreeSet_get__parameters_(t_TreeSet *self, void *data)
    {
      return typeParameters(self->parameters, sizeof(self->parameters));
    }

    static PyObject *t_TreeSet_get__empty(t_TreeSet *self, void *data)
    {
      jboolean value;
      OBJ_CALL(value = self->object.isEmpty());
      Py_RETURN_BOOL(value);
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/core/LetterTokenizer.h"
#include "org/apache/lucene/util/AttributeFactory.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace core {

          ::java::lang::Class *LetterTokenizer::class$ = NULL;
          jmethodID *LetterTokenizer::mids$ = NULL;
          bool LetterTokenizer::live$ = false;

          jclass LetterTokenizer::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/core/LetterTokenizer");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_f2cc1bce94666404] = env->getMethodID(cls, "<init>", "()V");
              mids$[mid_init$_a55a4d78167a7843] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/util/AttributeFactory;)V");
              mids$[mid_init$_541d20dfedf4268e] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/util/AttributeFactory;I)V");
              mids$[mid_isTokenChar_a1d30e1ee40c89a2] = env->getMethodID(cls, "isTokenChar", "(I)Z");

              class$ = new ::java::lang::Class(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          LetterTokenizer::LetterTokenizer() : ::org::apache::lucene::analysis::util::CharTokenizer(env->newObject(initializeClass, &mids$, mid_init$_f2cc1bce94666404)) {}

          LetterTokenizer::LetterTokenizer(const ::org::apache::lucene::util::AttributeFactory & a0) : ::org::apache::lucene::analysis::util::CharTokenizer(env->newObject(initializeClass, &mids$, mid_init$_a55a4d78167a7843, a0.this$)) {}

          LetterTokenizer::LetterTokenizer(const ::org::apache::lucene::util::AttributeFactory & a0, jint a1) : ::org::apache::lucene::analysis::util::CharTokenizer(env->newObject(initializeClass, &mids$, mid_init$_541d20dfedf4268e, a0.this$, a1)) {}
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace core {
          static PyObject *t_LetterTokenizer_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_LetterTokenizer_instance_(PyTypeObject *type, PyObject *arg);
          static int t_LetterTokenizer_init_(t_LetterTokenizer *self, PyObject *args, PyObject *kwds);

          static PyMethodDef t_LetterTokenizer__methods_[] = {
            DECLARE_METHOD(t_LetterTokenizer, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_LetterTokenizer, instance_, METH_O | METH_CLASS),
            { NULL, NULL, 0, NULL }
          };

          static PyType_Slot PY_TYPE_SLOTS(LetterTokenizer)[] = {
            { Py_tp_methods, t_LetterTokenizer__methods_ },
            { Py_tp_init, (void *) t_LetterTokenizer_init_ },
            { 0, NULL }
          };

          static PyType_Def *PY_TYPE_BASES(LetterTokenizer)[] = {
            &PY_TYPE_DEF(::org::apache::lucene::analysis::util::CharTokenizer),
            NULL
          };

          DEFINE_TYPE(LetterTokenizer, t_LetterTokenizer, LetterTokenizer);

          void t_LetterTokenizer::install(PyObject *module)
          {
            installType(&PY_TYPE(LetterTokenizer), &PY_TYPE_DEF(LetterTokenizer), module, "LetterTokenizer", 0);
          }

          void t_LetterTokenizer::initialize(PyObject *module)
          {
            PyObject_SetAttrString((PyObject *) PY_TYPE(LetterTokenizer), "class_", make_descriptor(LetterTokenizer::initializeClass, 1));
            PyObject_SetAttrString((PyObject *) PY_TYPE(LetterTokenizer), "wrapfn_", make_descriptor(t_LetterTokenizer::wrap_jobject));
            PyObject_SetAttrString((PyObject *) PY_TYPE(LetterTokenizer), "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_LetterTokenizer_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, LetterTokenizer::initializeClass, 1)))
              return NULL;
            return t_LetterTokenizer::wrap_Object(LetterTokenizer(((t_LetterTokenizer *) arg)->object.this$));
          }
          static PyObject *t_LetterTokenizer_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, LetterTokenizer::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_LetterTokenizer_init_(t_LetterTokenizer *self, PyObject *args, PyObject *kwds)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 0:
              {
                LetterTokenizer object((jobject) NULL);

                INT_CALL(object = LetterTokenizer());
                self->object = object;
                break;
              }
             case 1:
              {
                ::org::apache::lucene::util::AttributeFactory a0((jobject) NULL);
                LetterTokenizer object((jobject) NULL);

                if (!parseArgs(args, "k", ::org::apache::lucene::util::AttributeFactory::initializeClass, &a0))
                {
                  INT_CALL(object = LetterTokenizer(a0));
                  self->object = object;
                  break;
                }
              }
              goto err;
             case 2:
              {
                ::org::apache::lucene::util::AttributeFactory a0((jobject) NULL);
                jint a1;
                LetterTokenizer object((jobject) NULL);

                if (!parseArgs(args, "kI", ::org::apache::lucene::util::AttributeFactory::initializeClass, &a0, &a1))
                {
                  INT_CALL(object = LetterTokenizer(a0, a1));
                  self->object = object;
                  break;
                }
              }
             default:
             err:
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/de/GermanLightStemFilter.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/analysis/TokenStream.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace de {

          ::java::lang::Class *GermanLightStemFilter::class$ = NULL;
          jmethodID *GermanLightStemFilter::mids$ = NULL;
          bool GermanLightStemFilter::live$ = false;

          jclass GermanLightStemFilter::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/de/GermanLightStemFilter");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_c26756868a754f4e] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/analysis/TokenStream;)V");
              mids$[mid_incrementToken_8454bd5aa23fd11e] = env->getMethodID(cls, "incrementToken", "()Z");

              class$ = new ::java::lang::Class(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          GermanLightStemFilter::GermanLightStemFilter(const ::org::apache::lucene::analysis::TokenStream & a0) : ::org::apache::lucene::analysis::TokenFilter(env->newObject(initializeClass, &mids$, mid_init$_c26756868a754f4e, a0.this$)) {}

          jboolean GermanLightStemFilter::incrementToken() const
          {
            return env->callBooleanMethod(this$, mids$[mid_incrementToken_8454bd5aa23fd11e]);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace de {
          static PyObject *t_GermanLightStemFilter_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_GermanLightStemFilter_instance_(PyTypeObject *type, PyObject *arg);
          static int t_GermanLightStemFilter_init_(t_GermanLightStemFilter *self, PyObject *args, PyObject *kwds);
          static PyObject *t_GermanLightStemFilter_incrementToken(t_GermanLightStemFilter *self, PyObject *args);

          static PyMethodDef t_GermanLightStemFilter__methods_[] = {
            DECLARE_METHOD(t_GermanLightStemFilter, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_GermanLightStemFilter, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_GermanLightStemFilter, incrementToken, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          static PyType_Slot PY_TYPE_SLOTS(GermanLightStemFilter)[] = {
            { Py_tp_methods, t_GermanLightStemFilter__methods_ },
            { Py_tp_init, (void *) t_GermanLightStemFilter_init_ },
            { 0, NULL }
          };

          static PyType_Def *PY_TYPE_BASES(GermanLightStemFilter)[] = {
            &PY_TYPE_DEF(::org::apache::lucene::analysis::TokenFilter),
            NULL
          };

          DEFINE_TYPE(GermanLightStemFilter, t_GermanLightStemFilter, GermanLightStemFilter);

          void t_GermanLightStemFilter::install(PyObject *module)
          {
            installType(&PY_TYPE(GermanLightStemFilter), &PY_TYPE_DEF(GermanLightStemFilter), module, "GermanLightStemFilter", 0);
          }

          void t_GermanLightStemFilter::initialize(PyObject *module)
          {
            PyObject_SetAttrString((PyObject *) PY_TYPE(GermanLightStemFilter), "class_", make_descriptor(GermanLightStemFilter::initializeClass, 1));
            PyObject_SetAttrString((PyObject *) PY_TYPE(GermanLightStemFilter), "wrapfn_", make_descriptor(t_GermanLightStemFilter::wrap_jobject));
            PyObject_SetAttrString((PyObject *) PY_TYPE(GermanLightStemFilter), "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_GermanLightStemFilter_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, GermanLightStemFilter::initializeClass, 1)))
              return NULL;
            return t_GermanLightStemFilter::wrap_Object(GermanLightStemFilter(((t_GermanLightStemFilter *) arg)->object.this$));
          }
          static PyObject *t_GermanLightStemFilter_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, GermanLightStemFilter::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_GermanLightStemFilter_init_(t_GermanLightStemFilter *self, PyObject *args, PyObject *kwds)
          {
            ::org::apache::lucene::analysis::TokenStream a0((jobject) NULL);
            GermanLightStemFilter object((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::analysis::TokenStream::initializeClass, &a0))
            {
              INT_CALL(object = GermanLightStemFilter(a0));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_GermanLightStemFilter_incrementToken(t_GermanLightStemFilter *self, PyObject *args)
          {
            jboolean result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.incrementToken());
              Py_RETURN_BOOL(result);
            }

            return callSuper(PY_TYPE(GermanLightStemFilter), (PyObject *) self, "incrementToken", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/Explanation.h"
#include "java/util/Collection.h"
#include "java/lang/Number.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/search/Explanation.h"
#include "java/lang/String.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {

        ::java::lang::Class *Explanation::class$ = NULL;
        jmethodID *Explanation::mids$ = NULL;
        bool Explanation::live$ = false;

        jclass Explanation::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/search/Explanation");

            mids$ = new jmethodID[max_mid];
            mids$[mid_equals_8b72f2dcdde6fd1d] = env->getMethodID(cls, "equals", "(Ljava/lang/Object;)Z");
            mids$[mid_getDescription_db9b55ba01e03e4b] = env->getMethodID(cls, "getDescription", "()Ljava/lang/String;");
            mids$[mid_getDetails_0069f1359571a33c] = env->getMethodID(cls, "getDetails", "()[Lorg/apache/lucene/search/Explanation;");
            mids$[mid_getValue_f5813404cc5e3a1e] = env->getMethodID(cls, "getValue", "()Ljava/lang/Number;");
            mids$[mid_hashCode_9972fcc56b44e79d] = env->getMethodID(cls, "hashCode", "()I");
            mids$[mid_isMatch_8454bd5aa23fd11e] = env->getMethodID(cls, "isMatch", "()Z");
            mids$[mid_match_b8e38410dce1c8d3] = env->getStaticMethodID(cls, "match", "(Ljava/lang/Number;Ljava/lang/String;[Lorg/apache/lucene/search/Explanation;)Lorg/apache/lucene/search/Explanation;");
            mids$[mid_match_ac24b643682e4dd1] = env->getStaticMethodID(cls, "match", "(Ljava/lang/Number;Ljava/lang/String;Ljava/util/Collection;)Lorg/apache/lucene/search/Explanation;");
            mids$[mid_noMatch_dfb47504cde8eab2] = env->getStaticMethodID(cls, "noMatch", "(Ljava/lang/String;[Lorg/apache/lucene/search/Explanation;)Lorg/apache/lucene/search/Explanation;");
            mids$[mid_noMatch_9c311f4287b19793] = env->getStaticMethodID(cls, "noMatch", "(Ljava/lang/String;Ljava/util/Collection;)Lorg/apache/lucene/search/Explanation;");
            mids$[mid_toString_db9b55ba01e03e4b] = env->getMethodID(cls, "toString", "()Ljava/lang/String;");

            class$ = new ::java::lang::Class(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        jboolean Explanation::equals(const ::java::lang::Object & a0) const
        {
          return env->callBooleanMethod(this$, mids$[mid_equals_8b72f2dcdde6fd1d], a0.this$);
        }

        ::java::lang::String Explanation::getDescription() const
        {
          return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_getDescription_db9b55ba01e03e4b]));
        }

        JArray< Explanation > Explanation::getDetails() const
        {
          return JArray< Explanation >(env->callObjectMethod(this$, mids$[mid_getDetails_0069f1359571a33c]));
        }

        ::java::lang::Number Explanation::getValue() const
        {
          return ::java::lang::Number(env->callObjectMethod(this$, mids$[mid_getValue_f5813404cc5e3a1e]));
        }

        jint Explanation::hashCode() const
        {
          return env->callIntMethod(this$, mids$[mid_hashCode_9972fcc56b44e79d]);
        }

        jboolean Explanation::isMatch() const
        {
          return env->callBooleanMethod(this$, mids$[mid_isMatch_8454bd5aa23fd11e]);
        }

        Explanation Explanation::match(const ::java::lang::Number & a0, const ::java::lang::String & a1, const JArray< Explanation > & a2)
        {
          jclass cls = env->getClass(initializeClass);
          return Explanation(env->callStaticObjectMethod(cls, mids$[mid_match_b8e38410dce1c8d3], a0.this$, a1.this$, a2.this$));
        }

        Explanation Explanation::match(const ::java::lang::Number & a0, const ::java::lang::String & a1, const ::java::util::Collection & a2)
        {
          jclass cls = env->getClass(initializeClass);
          return Explanation(env->callStaticObjectMethod(cls, mids$[mid_match_ac24b643682e4dd1], a0.this$, a1.this$, a2.this$));
        }

        Explanation Explanation::noMatch(const ::java::lang::String & a0, const JArray< Explanation > & a1)
        {
          jclass cls = env->getClass(initializeClass);
          return Explanation(env->callStaticObjectMethod(cls, mids$[mid_noMatch_dfb47504cde8eab2], a0.this$, a1.this$));
        }

        Explanation Explanation::noMatch(const ::java::lang::String & a0, const ::java::util::Collection & a1)
        {
          jclass cls = env->getClass(initializeClass);
          return Explanation(env->callStaticObjectMethod(cls, mids$[mid_noMatch_9c311f4287b19793], a0.this$, a1.this$));
        }

        ::java::lang::String Explanation::toString() const
        {
          return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_db9b55ba01e03e4b]));
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        static PyObject *t_Explanation_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_Explanation_instance_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_Explanation_equals(t_Explanation *self, PyObject *args);
        static PyObject *t_Explanation_getDescription(t_Explanation *self);
        static PyObject *t_Explanation_getDetails(t_Explanation *self);
        static PyObject *t_Explanation_getValue(t_Explanation *self);
        static PyObject *t_Explanation_hashCode(t_Explanation *self, PyObject *args);
        static PyObject *t_Explanation_isMatch(t_Explanation *self);
        static PyObject *t_Explanation_match(PyTypeObject *type, PyObject *args);
        static PyObject *t_Explanation_noMatch(PyTypeObject *type, PyObject *args);
        static PyObject *t_Explanation_toString(t_Explanation *self, PyObject *args);
        static PyObject *t_Explanation_get__description(t_Explanation *self, void *data);
        static PyObject *t_Explanation_get__details(t_Explanation *self, void *data);
        static PyObject *t_Explanation_get__value(t_Explanation *self, void *data);
        static PyGetSetDef t_Explanation__fields_[] = {
          DECLARE_GET_FIELD(t_Explanation, description),
          DECLARE_GET_FIELD(t_Explanation, details),
          DECLARE_GET_FIELD(t_Explanation, value),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_Explanation__methods_[] = {
          DECLARE_METHOD(t_Explanation, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_Explanation, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_Explanation, equals, METH_VARARGS),
          DECLARE_METHOD(t_Explanation, getDescription, METH_NOARGS),
          DECLARE_METHOD(t_Explanation, getDetails, METH_NOARGS),
          DECLARE_METHOD(t_Explanation, getValue, METH_NOARGS),
          DECLARE_METHOD(t_Explanation, hashCode, METH_VARARGS),
          DECLARE_METHOD(t_Explanation, isMatch, METH_NOARGS),
          DECLARE_METHOD(t_Explanation, match, METH_VARARGS | METH_CLASS),
          DECLARE_METHOD(t_Explanation, noMatch, METH_VARARGS | METH_CLASS),
          DECLARE_METHOD(t_Explanation, toString, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        static PyType_Slot PY_TYPE_SLOTS(Explanation)[] = {
          { Py_tp_methods, t_Explanation__methods_ },
          { Py_tp_init, (void *) abstract_init },
          { Py_tp_getset, t_Explanation__fields_ },
          { 0, NULL }
        };

        static PyType_Def *PY_TYPE_BASES(Explanation)[] = {
          &PY_TYPE_DEF(::java::lang::Object),
          NULL
        };

        DEFINE_TYPE(Explanation, t_Explanation, Explanation);

        void t_Explanation::install(PyObject *module)
        {
          installType(&PY_TYPE(Explanation), &PY_TYPE_DEF(Explanation), module, "Explanation", 0);
        }

        void t_Explanation::initialize(PyObject *module)
        {
          PyObject_SetAttrString((PyObject *) PY_TYPE(Explanation), "class_", make_descriptor(Explanation::initializeClass, 1));
          PyObject_SetAttrString((PyObject *) PY_TYPE(Explanation), "wrapfn_", make_descriptor(t_Explanation::wrap_jobject));
          PyObject_SetAttrString((PyObject *) PY_TYPE(Explanation), "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_Explanation_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, Explanation::initializeClass, 1)))
            return NULL;
          return t_Explanation::wrap_Object(Explanation(((t_Explanation *) arg)->object.this$));
        }
        static PyObject *t_Explanation_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, Explanation::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static PyObject *t_Explanation_equals(t_Explanation *self, PyObject *args)
        {
          ::java::lang::Object a0((jobject) NULL);
          jboolean result;

          if (!parseArgs(args, "o", &a0))
          {
            OBJ_CALL(result = self->object.equals(a0));
            Py_RETURN_BOOL(result);
          }

          return callSuper(PY_TYPE(Explanation), (PyObject *) self, "equals", args, 2);
        }

        static PyObject *t_Explanation_getDescription(t_Explanation *self)
        {
          ::java::lang::String result((jobject) NULL);
          OBJ_CALL(result = self->object.getDescription());
          return j2p(result);
        }

        static PyObject *t_Explanation_getDetails(t_Explanation *self)
        {
          JArray< Explanation > result((jobject) NULL);
          OBJ_CALL(result = self->object.getDetails());
          return JArray<jobject>(result.this$).wrap(t_Explanation::wrap_jobject);
        }

        static PyObject *t_Explanation_getValue(t_Explanation *self)
        {
          ::java::lang::Number result((jobject) NULL);
          OBJ_CALL(result = self->object.getValue());
          return ::java::lang::t_Number::wrap_Object(result);
        }

        static PyObject *t_Explanation_hashCode(t_Explanation *self, PyObject *args)
        {
          jint result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.hashCode());
            return PyLong_FromLong((long) result);
          }

          return callSuper(PY_TYPE(Explanation), (PyObject *) self, "hashCode", args, 2);
        }

        static PyObject *t_Explanation_isMatch(t_Explanation *self)
        {
          jboolean result;
          OBJ_CALL(result = self->object.isMatch());
          Py_RETURN_BOOL(result);
        }

        static PyObject *t_Explanation_match(PyTypeObject *type, PyObject *args)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 3:
            {
              ::java::lang::Number a0((jobject) NULL);
              ::java::lang::String a1((jobject) NULL);
              JArray< Explanation > a2((jobject) NULL);
              Explanation result((jobject) NULL);

              if (!parseArgs(args, "Os[k", ::java::lang::PY_TYPE(Number), Explanation::initializeClass, &a0, &a1, &a2))
              {
                OBJ_CALL(result = ::org::apache::lucene::search::Explanation::match(a0, a1, a2));
                return t_Explanation::wrap_Object(result);
              }
            }
            {
              ::java::lang::Number a0((jobject) NULL);
              ::java::lang::String a1((jobject) NULL);
              ::java::util::Collection a2((jobject) NULL);
              PyTypeObject **p2;
              Explanation result((jobject) NULL);

              if (!parseArgs(args, "OsK", ::java::lang::PY_TYPE(Number), ::java::util::Collection::initializeClass, &a0, &a1, &a2, &p2, ::java::util::t_Collection::parameters_))
              {
                OBJ_CALL(result = ::org::apache::lucene::search::Explanation::match(a0, a1, a2));
                return t_Explanation::wrap_Object(result);
              }
            }
          }

          PyErr_SetArgsError(type, "match", args);
          return NULL;
        }

        static PyObject *t_Explanation_noMatch(PyTypeObject *type, PyObject *args)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 2:
            {
              ::java::lang::String a0((jobject) NULL);
              JArray< Explanation > a1((jobject) NULL);
              Explanation result((jobject) NULL);

              if (!parseArgs(args, "s[k", Explanation::initializeClass, &a0, &a1))
              {
                OBJ_CALL(result = ::org::apache::lucene::search::Explanation::noMatch(a0, a1));
                return t_Explanation::wrap_Object(result);
              }
            }
            {
              ::java::lang::String a0((jobject) NULL);
              ::java::util::Collection a1((jobject) NULL);
              PyTypeObject **p1;
              Explanation result((jobject) NULL);

              if (!parseArgs(args, "sK", ::java::util::Collection::initializeClass, &a0, &a1, &p1, ::java::util::t_Collection::parameters_))
              {
                OBJ_CALL(result = ::org::apache::lucene::search::Explanation::noMatch(a0, a1));
                return t_Explanation::wrap_Object(result);
              }
            }
          }

          PyErr_SetArgsError(type, "noMatch", args);
          return NULL;
        }

        static PyObject *t_Explanation_toString(t_Explanation *self, PyObject *args)
        {
          ::java::lang::String result((jobject) NULL);

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.toString());
            return j2p(result);
          }

          return callSuper(PY_TYPE(Explanation), (PyObject *) self, "toString", args, 2);
        }

        static PyObject *t_Explanation_get__description(t_Explanation *self, void *data)
        {
          ::java::lang::String value((jobject) NULL);
          OBJ_CALL(value = self->object.getDescription());
          return j2p(value);
        }

        static PyObject *t_Explanation_get__details(t_Explanation *self, void *data)
        {
          JArray< Explanation > value((jobject) NULL);
          OBJ_CALL(value = self->object.getDetails());
          return JArray<jobject>(value.this$).wrap(t_Explanation::wrap_jobject);
        }

        static PyObject *t_Explanation_get__value(t_Explanation *self, void *data)
        {
          ::java::lang::Number value((jobject) NULL);
          OBJ_CALL(value = self->object.getValue());
          return ::java::lang::t_Number::wrap_Object(value);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/tr/TurkishLowerCaseFilter.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/analysis/TokenStream.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace tr {

          ::java::lang::Class *TurkishLowerCaseFilter::class$ = NULL;
          jmethodID *TurkishLowerCaseFilter::mids$ = NULL;
          bool TurkishLowerCaseFilter::live$ = false;

          jclass TurkishLowerCaseFilter::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/tr/TurkishLowerCaseFilter");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_c26756868a754f4e] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/analysis/TokenStream;)V");
              mids$[mid_incrementToken_8454bd5aa23fd11e] = env->getMethodID(cls, "incrementToken", "()Z");

              class$ = new ::java::lang::Class(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          TurkishLowerCaseFilter::TurkishLowerCaseFilter(const ::org::apache::lucene::analysis::TokenStream & a0) : ::org::apache::lucene::analysis::TokenFilter(env->newObject(initializeClass, &mids$, mid_init$_c26756868a754f4e, a0.this$)) {}

          jboolean TurkishLowerCaseFilter::incrementToken() const
          {
            return env->callBooleanMethod(this$, mids$[mid_incrementToken_8454bd5aa23fd11e]);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace tr {
          static PyObject *t_TurkishLowerCaseFilter_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_TurkishLowerCaseFilter_instance_(PyTypeObject *type, PyObject *arg);
          static int t_TurkishLowerCaseFilter_init_(t_TurkishLowerCaseFilter *self, PyObject *args, PyObject *kwds);
          static PyObject *t_TurkishLowerCaseFilter_incrementToken(t_TurkishLowerCaseFilter *self, PyObject *args);

          static PyMethodDef t_TurkishLowerCaseFilter__methods_[] = {
            DECLARE_METHOD(t_TurkishLowerCaseFilter, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_TurkishLowerCaseFilter, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_TurkishLowerCaseFilter, incrementToken, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          static PyType_Slot PY_TYPE_SLOTS(TurkishLowerCaseFilter)[] = {
            { Py_tp_methods, t_TurkishLowerCaseFilter__methods_ },
            { Py_tp_init, (void *) t_TurkishLowerCaseFilter_init_ },
            { 0, NULL }
          };

          static PyType_Def *PY_TYPE_BASES(TurkishLowerCaseFilter)[] = {
            &PY_TYPE_DEF(::org::apache::lucene::analysis::TokenFilter),
            NULL
          };

          DEFINE_TYPE(TurkishLowerCaseFilter, t_TurkishLowerCaseFilter, TurkishLowerCaseFilter);

          void t_TurkishLowerCaseFilter::install(PyObject *module)
          {
            installType(&PY_TYPE(TurkishLowerCaseFilter), &PY_TYPE_DEF(TurkishLowerCaseFilter), module, "TurkishLowerCaseFilter", 0);
          }

          void t_TurkishLowerCaseFilter::initialize(PyObject *module)
          {
            PyObject_SetAttrString((PyObject *) PY_TYPE(TurkishLowerCaseFilter), "class_", make_descriptor(TurkishLowerCaseFilter::initializeClass, 1));
            PyObject_SetAttrString((PyObject *) PY_TYPE(TurkishLowerCaseFilter), "wrapfn_", make_descriptor(t_TurkishLowerCaseFilter::wrap_jobject));
            PyObject_SetAttrString((PyObject *) PY_TYPE(TurkishLowerCaseFilter), "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_TurkishLowerCaseFilter_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, TurkishLowerCaseFilter::initializeClass, 1)))
              return NULL;
            return t_TurkishLowerCaseFilter::wrap_Object(TurkishLowerCaseFilter(((t_TurkishLowerCaseFilter *) arg)->object.this$));
          }
          static PyObject *t_TurkishLowerCaseFilter_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, TurkishLowerCaseFilter::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_TurkishLowerCaseFilter_init_(t_TurkishLowerCaseFilter *self, PyObject *args, PyObject *kwds)
          {
            ::org::apache::lucene::analysis::TokenStream a0((jobject) NULL);
            TurkishLowerCaseFilter object((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::analysis::TokenStream::initializeClass, &a0))
            {
              INT_CALL(object = TurkishLowerCaseFilter(a0));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_TurkishLowerCaseFilter_incrementToken(t_TurkishLowerCaseFilter *self, PyObject *args)
          {
            jboolean result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.incrementToken());
              Py_RETURN_BOOL(result);
            }

            return callSuper(PY_TYPE(TurkishLowerCaseFilter), (PyObject *) self, "incrementToken", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/spans/SpanPositionRangeQuery.h"
#include "java/lang/Object.h"
#include "java/lang/String.h"
#include "org/apache/lucene/search/spans/SpanQuery.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace spans {

          ::java::lang::Class *SpanPositionRangeQuery::class$ = NULL;
          jmethodID *SpanPositionRangeQuery::mids$ = NULL;
          bool SpanPositionRangeQuery::live$ = false;

          jclass SpanPositionRangeQuery::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/search/spans/SpanPositionRangeQuery");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_788b62ab1679c237] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/search/spans/SpanQuery;II)V");
              mids$[mid_equals_8b72f2dcdde6fd1d] = env->getMethodID(cls, "equals", "(Ljava/lang/Object;)Z");
              mids$[mid_getEnd_9972fcc56b44e79d] = env->getMethodID(cls, "getEnd", "()I");
              mids$[mid_getStart_9972fcc56b44e79d] = env->getMethodID(cls, "getStart", "()I");
              mids$[mid_hashCode_9972fcc56b44e79d] = env->getMethodID(cls, "hashCode", "()I");
              mids$[mid_toString_9bfa75c9f141b67f] = env->getMethodID(cls, "toString", "(Ljava/lang/String;)Ljava/lang/String;");
              mids$[mid_acceptPosition_ab707424c19ac906] = env->getMethodID(cls, "acceptPosition", "(Lorg/apache/lucene/search/spans/Spans;)Lorg/apache/lucene/search/spans/FilterSpans$AcceptStatus;");

              class$ = new ::java::lang::Class(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          SpanPositionRangeQuery::SpanPositionRangeQuery(const ::org::apache::lucene::search::spans::SpanQuery & a0, jint a1, jint a2) : ::org::apache::lucene::search::spans::SpanPositionCheckQuery(env->newObject(initializeClass, &mids$, mid_init$_788b62ab1679c237, a0.this$, a1, a2)) {}

          jboolean SpanPositionRangeQuery::equals(const ::java::lang::Object & a0) const
          {
            return env->callBooleanMethod(this$, mids$[mid_equals_8b72f2dcdde6fd1d], a0.this$);
          }

          jint SpanPositionRangeQuery::getEnd() const
          {
            return env->callIntMethod(this$, mids$[mid_getEnd_9972fcc56b44e79d]);
          }

          jint SpanPositionRangeQuery::getStart() const
          {
            return env->callIntMethod(this$, mids$[mid_getStart_9972fcc56b44e79d]);
          }

          jint SpanPositionRangeQuery::hashCode() const
          {
            return env->callIntMethod(this$, mids$[mid_hashCode_9972fcc56b44e79d]);
          }

          ::java::lang::String SpanPositionRangeQuery::toString(const ::java::lang::String & a0) const
          {
            return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_9bfa75c9f141b67f], a0.this$));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace spans {
          static PyObject *t_SpanPositionRangeQuery_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_SpanPositionRangeQuery_instance_(PyTypeObject *type, PyObject *arg);
          static int t_SpanPositionRangeQuery_init_(t_SpanPositionRangeQuery *self, PyObject *args, PyObject *kwds);
          static PyObject *t_SpanPositionRangeQuery_equals(t_SpanPositionRangeQuery *self, PyObject *args);
          static PyObject *t_SpanPositionRangeQuery_getEnd(t_SpanPositionRangeQuery *self);
          static PyObject *t_SpanPositionRangeQuery_getStart(t_SpanPositionRangeQuery *self);
          static PyObject *t_SpanPositionRangeQuery_hashCode(t_SpanPositionRangeQuery *self, PyObject *args);
          static PyObject *t_SpanPositionRangeQuery_toString(t_SpanPositionRangeQuery *self, PyObject *args);
          static PyObject *t_SpanPositionRangeQuery_get__end(t_SpanPositionRangeQuery *self, void *data);
          static PyObject *t_SpanPositionRangeQuery_get__start(t_SpanPositionRangeQuery *self, void *data);
          static PyGetSetDef t_SpanPositionRangeQuery__fields_[] = {
            DECLARE_GET_FIELD(t_SpanPositionRangeQuery, end),
            DECLARE_GET_FIELD(t_SpanPositionRangeQuery, start),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_SpanPositionRangeQuery__methods_[] = {
            DECLARE_METHOD(t_SpanPositionRangeQuery, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_SpanPositionRangeQuery, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_SpanPositionRangeQuery, equals, METH_VARARGS),
            DECLARE_METHOD(t_SpanPositionRangeQuery, getEnd, METH_NOARGS),
            DECLARE_METHOD(t_SpanPositionRangeQuery, getStart, METH_NOARGS),
            DECLARE_METHOD(t_SpanPositionRangeQuery, hashCode, METH_VARARGS),
            DECLARE_METHOD(t_SpanPositionRangeQuery, toString, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          static PyType_Slot PY_TYPE_SLOTS(SpanPositionRangeQuery)[] = {
            { Py_tp_methods, t_SpanPositionRangeQuery__methods_ },
            { Py_tp_init, (void *) t_SpanPositionRangeQuery_init_ },
            { Py_tp_getset, t_SpanPositionRangeQuery__fields_ },
            { 0, NULL }
          };

          static PyType_Def *PY_TYPE_BASES(SpanPositionRangeQuery)[] = {
            &PY_TYPE_DEF(::org::apache::lucene::search::spans::SpanPositionCheckQuery),
            NULL
          };

          DEFINE_TYPE(SpanPositionRangeQuery, t_SpanPositionRangeQuery, SpanPositionRangeQuery);

          void t_SpanPositionRangeQuery::install(PyObject *module)
          {
            installType(&PY_TYPE(SpanPositionRangeQuery), &PY_TYPE_DEF(SpanPositionRangeQuery), module, "SpanPositionRangeQuery", 0);
          }

          void t_SpanPositionRangeQuery::initialize(PyObject *module)
          {
            PyObject_SetAttrString((PyObject *) PY_TYPE(SpanPositionRangeQuery), "class_", make_descriptor(SpanPositionRangeQuery::initializeClass, 1));
            PyObject_SetAttrString((PyObject *) PY_TYPE(SpanPositionRangeQuery), "wrapfn_", make_descriptor(t_SpanPositionRangeQuery::wrap_jobject));
            PyObject_SetAttrString((PyObject *) PY_TYPE(SpanPositionRangeQuery), "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_SpanPositionRangeQuery_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, SpanPositionRangeQuery::initializeClass, 1)))
              return NULL;
            return t_SpanPositionRangeQuery::wrap_Object(SpanPositionRangeQuery(((t_SpanPositionRangeQuery *) arg)->object.this$));
          }
          static PyObject *t_SpanPositionRangeQuery_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, SpanPositionRangeQuery::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_SpanPositionRangeQuery_init_(t_SpanPositionRangeQuery *self, PyObject *args, PyObject *kwds)
          {
            ::org::apache::lucene::search::spans::SpanQuery a0((jobject) NULL);
            jint a1;
            jint a2;
            SpanPositionRangeQuery object((jobject) NULL);

            if (!parseArgs(args, "kII", ::org::apache::lucene::search::spans::SpanQuery::initializeClass, &a0, &a1, &a2))
            {
              INT_CALL(object = SpanPositionRangeQuery(a0, a1, a2));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_SpanPositionRangeQuery_equals(t_SpanPositionRangeQuery *self, PyObject *args)
          {
            ::java::lang::Object a0((jobject) NULL);
            jboolean result;

            if (!parseArgs(args, "o", &a0))
            {
              OBJ_CALL(result = self->object.equals(a0));
              Py_RETURN_BOOL(result);
            }

            return callSuper(PY_TYPE(SpanPositionRangeQuery), (PyObject *) self, "equals", args, 2);
          }

          static PyObject *t_SpanPositionRangeQuery_getEnd(t_SpanPositionRangeQuery *self)
          {
            jint result;
            OBJ_CALL(result = self->object.getEnd());
            return PyLong_FromLong((long) result);
          }

          static PyObject *t_SpanPositionRangeQuery_getStart(t_SpanPositionRangeQuery *self)
          {
            jint result;
            OBJ_CALL(result = self->object.getStart());
            return PyLong_FromLong((long) result);
          }

          static PyObject *t_SpanPositionRangeQuery_hashCode(t_SpanPositionRangeQuery *self, PyObject *args)
          {
            jint result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.hashCode());
              return PyLong_FromLong((long) result);
            }

            return callSuper(PY_TYPE(SpanPositionRangeQuery), (PyObject *) self, "hashCode", args, 2);
          }

          static PyObject *t_SpanPositionRangeQuery_toString(t_SpanPositionRangeQuery *self, PyObject *args)
          {
            ::java::lang::String a0((jobject) NULL);
            ::java::lang::String result((jobject) NULL);

            if (!parseArgs(args, "s", &a0))
            {
              OBJ_CALL(result = self->object.toString(a0));
              return j2p(result);
            }

            return callSuper(PY_TYPE(SpanPositionRangeQuery), (PyObject *) self, "toString", args, 2);
          }

          static PyObject *t_SpanPositionRangeQuery_get__end(t_SpanPositionRangeQuery *self, void *data)
          {
            jint value;
            OBJ_CALL(value = self->object.getEnd());
            return PyLong_FromLong((long) value);
          }

          static PyObject *t_SpanPositionRangeQuery_get__start(t_SpanPositionRangeQuery *self, void *data)
          {
            jint value;
            OBJ_CALL(value = self->object.getStart());
            return PyLong_FromLong((long) value);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/TermRangeQuery.h"
#include "java/lang/Class.h"
#include "java/lang/Object.h"
#include "org/apache/lucene/util/BytesRef.h"
#include "java/lang/String.h"
#include "org/apache/lucene/search/TermRangeQuery.h"
#include "org/apache/lucene/util/automaton/Automaton.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {

        ::java::lang::Class *TermRangeQuery::class$ = NULL;
        jmethodID *TermRangeQuery::mids$ = NULL;
        bool TermRangeQuery::live$ = false;

        jclass TermRangeQuery::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/search/TermRangeQuery");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_209355633dd0d5dd] = env->getMethodID(cls, "<init>", "(Ljava/lang/String;Lorg/apache/lucene/util/BytesRef;Lorg/apache/lucene/util/BytesRef;ZZ)V");
            mids$[mid_equals_8b72f2dcdde6fd1d] = env->getMethodID(cls, "equals", "(Ljava/lang/Object;)Z");
            mids$[mid_getLowerTerm_7af2ea2e37ce82b8] = env->getMethodID(cls, "getLowerTerm", "()Lorg/apache/lucene/util/BytesRef;");
            mids$[mid_getUpperTerm_7af2ea2e37ce82b8] = env->getMethodID(cls, "getUpperTerm", "()Lorg/apache/lucene/util/BytesRef;");
            mids$[mid_hashCode_9972fcc56b44e79d] = env->getMethodID(cls, "hashCode", "()I");
            mids$[mid_includesLower_8454bd5aa23fd11e] = env->getMethodID(cls, "includesLower", "()Z");
            mids$[mid_includesUpper_8454bd5aa23fd11e] = env->getMethodID(cls, "includesUpper", "()Z");
            mids$[mid_newStringRange_b38decc857e9f48f] = env->getStaticMethodID(cls, "newStringRange", "(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;ZZ)Lorg/apache/lucene/search/TermRangeQuery;");
            mids$[mid_toAutomaton_0eed7689629a4464] = env->getStaticMethodID(cls, "toAutomaton", "(Lorg/apache/lucene/util/BytesRef;Lorg/apache/lucene/util/BytesRef;ZZ)Lorg/apache/lucene/util/automaton/Automaton;");
            mids$[mid_toString_9bfa75c9f141b67f] = env->getMethodID(cls, "toString", "(Ljava/lang/String;)Ljava/lang/String;");

            class$ = new ::java::lang::Class(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        TermRangeQuery::TermRangeQuery(const ::java::lang::String & a0, const ::org::apache::lucene::util::BytesRef & a1, const ::org::apache::lucene::util::BytesRef & a2, jboolean a3, jboolean a4) : ::org::apache::lucene::search::AutomatonQuery(env->newObject(initializeClass, &mids$, mid_init$_209355633dd0d5dd, a0.this$, a1.this$, a2.this$, a3, a4)) {}

        jboolean TermRangeQuery::equals(const ::java::lang::Object & a0) const
        {
          return env->callBooleanMethod(this$, mids$[mid_equals_8b72f2dcdde6fd1d], a0.this$);
        }

        ::org::apache::lucene::util::BytesRef TermRangeQuery::getLowerTerm() const
        {
          return ::org::apache::lucene::util::BytesRef(env->callObjectMethod(this$, mids$[mid_getLowerTerm_7af2ea2e37ce82b8]));
        }

        ::org::apache::lucene::util::BytesRef TermRangeQuery::getUpperTerm() const
        {
          return ::org::apache::lucene::util::BytesRef(env->callObjectMethod(this$, mids$[mid_getUpperTerm_7af2ea2e37ce82b8]));
        }

        jint TermRangeQuery::hashCode() const
        {
          return env->callIntMethod(this$, mids$[mid_hashCode_9972fcc56b44e79d]);
        }

        jboolean TermRangeQuery::includesLower() const
        {
          return env->callBooleanMethod(this$, mids$[mid_includesLower_8454bd5aa23fd11e]);
        }

        jboolean TermRangeQuery::includesUpper() const
        {
          return env->callBooleanMethod(this$, mids$[mid_includesUpper_8454bd5aa23fd11e]);
        }

        TermRangeQuery TermRangeQuery::newStringRange(const ::java::lang::String & a0, const ::java::lang::String & a1, const ::java::lang::String & a2, jboolean a3, jboolean a4)
        {
          jclass cls = env->getClass(initializeClass);
          return TermRangeQuery(env->callStaticObjectMethod(cls, mids$[mid_newStringRange_b38decc857e9f48f], a0.this$, a1.this$, a2.this$, a3, a4));
        }

        ::org::apache::lucene::util::automaton::Automaton TermRangeQuery::toAutomaton(const ::org::apache::lucene::util::BytesRef & a0, const ::org::apache::lucene::util::BytesRef & a1, jboolean a2, jboolean a3)
        {
          jclass cls = env->getClass(initializeClass);
          return ::org::apache::lucene::util::automaton::Automaton(env->callStaticObjectMethod(cls, mids$[mid_toAutomaton_0eed7689629a4464], a0.this$, a1.this$, a2, a3));
        }

        ::java::lang::String TermRangeQuery::toString(const ::java::lang::String & a0) const
        {
          return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_9bfa75c9f141b67f], a0.this$));
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        static PyObject *t_TermRangeQuery_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_TermRangeQuery_instance_(PyTypeObject *type, PyObject *arg);
        static int t_TermRangeQuery_init_(t_TermRangeQuery *self, PyObject *args, PyObject *kwds);
        static PyObject *t_TermRangeQuery_equals(t_TermRangeQuery *self, PyObject *args);
        static PyObject *t_TermRangeQuery_getLowerTerm(t_TermRangeQuery *self);
        static PyObject *t_TermRangeQuery_getUpperTerm(t_TermRangeQuery *self);
        static PyObject *t_TermRangeQuery_hashCode(t_TermRangeQuery *self, PyObject *args);
        static PyObject *t_TermRangeQuery_includesLower(t_TermRangeQuery *self);
        static PyObject *t_TermRangeQuery_includesUpper(t_TermRangeQuery *self);
        static PyObject *t_TermRangeQuery_newStringRange(PyTypeObject *type, PyObject *args);
        static PyObject *t_TermRangeQuery_toAutomaton(PyTypeObject *type, PyObject *args);
        static PyObject *t_TermRangeQuery_toString(t_TermRangeQuery *self, PyObject *args);
        static PyObject *t_TermRangeQuery_get__lowerTerm(t_TermRangeQuery *self, void *data);
        static PyObject *t_TermRangeQuery_get__upperTerm(t_TermRangeQuery *self, void *data);
        static PyGetSetDef t_TermRangeQuery__fields_[] = {
          DECLARE_GET_FIELD(t_TermRangeQuery, lowerTerm),
          DECLARE_GET_FIELD(t_TermRangeQuery, upperTerm),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_TermRangeQuery__methods_[] = {
          DECLARE_METHOD(t_TermRangeQuery, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_TermRangeQuery, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_TermRangeQuery, equals, METH_VARARGS),
          DECLARE_METHOD(t_TermRangeQuery, getLowerTerm, METH_NOARGS),
          DECLARE_METHOD(t_TermRangeQuery, getUpperTerm, METH_NOARGS),
          DECLARE_METHOD(t_TermRangeQuery, hashCode, METH_VARARGS),
          DECLARE_METHOD(t_TermRangeQuery, includesLower, METH_NOARGS),
          DECLARE_METHOD(t_TermRangeQuery, includesUpper, METH_NOARGS),
          DECLARE_METHOD(t_TermRangeQuery, newStringRange, METH_VARARGS | METH_CLASS),
          DECLARE_METHOD(t_TermRangeQuery, toAutomaton, METH_VARARGS | METH_CLASS),
          DECLARE_METHOD(t_TermRangeQuery, toString, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        static PyType_Slot PY_TYPE_SLOTS(TermRangeQuery)[] = {
          { Py_tp_methods, t_TermRangeQuery__methods_ },
          { Py_tp_init, (void *) t_TermRangeQuery_init_ },
          { Py_tp_getset, t_TermRangeQuery__fields_ },
          { 0, NULL }
        };

        static PyType_Def *PY_TYPE_BASES(TermRangeQuery)[] = {
          &PY_TYPE_DEF(::org::apache::lucene::search::AutomatonQuery),
          NULL
        };

        DEFINE_TYPE(TermRangeQuery, t_TermRangeQuery, TermRangeQuery);

        void t_TermRangeQuery::install(PyObject *module)
        {
          installType(&PY_TYPE(TermRangeQuery), &PY_TYPE_DEF(TermRangeQuery), module, "TermRangeQuery", 0);
        }

        void t_TermRangeQuery::initialize(PyObject *module)
        {
          PyObject_SetAttrString((PyObject *) PY_TYPE(TermRangeQuery), "class_", make_descriptor(TermRangeQuery::initializeClass, 1));
          PyObject_SetAttrString((PyObject *) PY_TYPE(TermRangeQuery), "wrapfn_", make_descriptor(t_TermRangeQuery::wrap_jobject));
          PyObject_SetAttrString((PyObject *) PY_TYPE(TermRangeQuery), "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_TermRangeQuery_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, TermRangeQuery::initializeClass, 1)))
            return NULL;
          return t_TermRangeQuery::wrap_Object(TermRangeQuery(((t_TermRangeQuery *) arg)->object.this$));
        }
        static PyObject *t_TermRangeQuery_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, TermRangeQuery::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_TermRangeQuery_init_(t_TermRangeQuery *self, PyObject *args, PyObject *kwds)
        {
          ::java::lang::String a0((jobject) NULL);
          ::org::apache::lucene::util::BytesRef a1((jobject) NULL);
          ::org::apache::lucene::util::BytesRef a2((jobject) NULL);
          jboolean a3;
          jboolean a4;
          TermRangeQuery object((jobject) NULL);

          if (!parseArgs(args, "skkZZ", ::org::apache::lucene::util::BytesRef::initializeClass, ::org::apache::lucene::util::BytesRef::initializeClass, &a0, &a1, &a2, &a3, &a4))
          {
            INT_CALL(object = TermRangeQuery(a0, a1, a2, a3, a4));
            self->object = object;
          }
          else
          {
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }

        static PyObject *t_TermRangeQuery_equals(t_TermRangeQuery *self, PyObject *args)
        {
          ::java::lang::Object a0((jobject) NULL);
          jboolean result;

          if (!parseArgs(args, "o", &a0))
          {
            OBJ_CALL(result = self->object.equals(a0));
            Py_RETURN_BOOL(result);
          }

          return callSuper(PY_TYPE(TermRangeQuery), (PyObject *) self, "equals", args, 2);
        }

        static PyObject *t_TermRangeQuery_getLowerTerm(t_TermRangeQuery *self)
        {
          ::org::apache::lucene::util::BytesRef result((jobject) NULL);
          OBJ_CALL(result = self->object.getLowerTerm());
          return ::org::apache::lucene::util::t_BytesRef::wrap_Object(result);
        }

        static PyObject *t_TermRangeQuery_getUpperTerm(t_TermRangeQuery *self)
        {
          ::org::apache::lucene::util::BytesRef result((jobject) NULL);
          OBJ_CALL(result = self->object.getUpperTerm());
          return ::org::apache::lucene::util::t_BytesRef::wrap_Object(result);
        }

        static PyObject *t_TermRangeQuery_hashCode(t_TermRangeQuery *self, PyObject *args)
        {
          jint result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.hashCode());
            return PyLong_FromLong((long) result);
          }

          return callSuper(PY_TYPE(TermRangeQuery), (PyObject *) self, "hashCode", args, 2);
        }

        static PyObject *t_TermRangeQuery_includesLower(t_TermRangeQuery *self)
        {
          jboolean result;
          OBJ_CALL(result = self->object.includesLower());
          Py_RETURN_BOOL(result);
        }

        static PyObject *t_TermRangeQuery_includesUpper(t_TermRangeQuery *self)
        {
          jboolean result;
          OBJ_CALL(result = self->object.includesUpper());
          Py_RETURN_BOOL(result);
        }

        static PyObject *t_TermRangeQuery_newStringRange(PyTypeObject *type, PyObject *args)
        {
          ::java::lang::String a0((jobject) NULL);
          ::java::lang::String a1((jobject) NULL);
          ::java::lang::String a2((jobject) NULL);
          jboolean a3;
          jboolean a4;
          TermRangeQuery result((jobject) NULL);

          if (!parseArgs(args, "sssZZ", &a0, &a1, &a2, &a3, &a4))
          {
            OBJ_CALL(result = ::org::apache::lucene::search::TermRangeQuery::newStringRange(a0, a1, a2, a3, a4));
            return t_TermRangeQuery::wrap_Object(result);
          }

          PyErr_SetArgsError(type, "newStringRange", args);
          return NULL;
        }

        static PyObject *t_TermRangeQuery_toAutomaton(PyTypeObject *type, PyObject *args)
        {
          ::org::apache::lucene::util::BytesRef a0((jobject) NULL);
          ::org::apache::lucene::util::BytesRef a1((jobject) NULL);
          jboolean a2;
          jboolean a3;
          ::org::apache::lucene::util::automaton::Automaton result((jobject) NULL);

          if (!parseArgs(args, "kkZZ", ::org::apache::lucene::util::BytesRef::initializeClass, ::org::apache::lucene::util::BytesRef::initializeClass, &a0, &a1, &a2, &a3))
          {
            OBJ_CALL(result = ::org::apache::lucene::search::TermRangeQuery::toAutomaton(a0, a1, a2, a3));
            return ::org::apache::lucene::util::automaton::t_Automaton::wrap_Object(result);
          }

          PyErr_SetArgsError(type, "toAutomaton", args);
          return NULL;
        }

        static PyObject *t_TermRangeQuery_toString(t_TermRangeQuery *self, PyObject *args)
        {
          ::java::lang::String a0((jobject) NULL);
          ::java::lang::String result((jobject) NULL);

          if (!parseArgs(args, "s", &a0))
          {
            OBJ_CALL(result = self->object.toString(a0));
            return j2p(result);
          }

          return callSuper(PY_TYPE(TermRangeQuery), (PyObject *) self, "toString", args, 2);
        }

        static PyObject *t_TermRangeQuery_get__lowerTerm(t_TermRangeQuery *self, void *data)
        {
          ::org::apache::lucene::util::BytesRef value((jobject) NULL);
          OBJ_CALL(value = self->object.getLowerTerm());
          return ::org::apache::lucene::util::t_BytesRef::wrap_Object(value);
        }

        static PyObject *t_TermRangeQuery_get__upperTerm(t_TermRangeQuery *self, void *data)
        {
          ::org::apache::lucene::util::BytesRef value((jobject) NULL);
          OBJ_CALL(value = self->object.getUpperTerm());
          return ::org::apache::lucene::util::t_BytesRef::wrap_Object(value);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/index/FieldInfo.h"
#include "java/util/Map.h"
#include "org/apache/lucene/index/DocValuesType.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/index/IndexOptions.h"
#include "java/lang/String.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {

        ::java::lang::Class *FieldInfo::class$ = NULL;
        jmethodID *FieldInfo::mids$ = NULL;
        jfieldID *FieldInfo::fids$ = NULL;
        bool FieldInfo::live$ = false;

        jclass FieldInfo::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/index/FieldInfo");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_91434f1c9fde0fc9] = env->getMethodID(cls, "<init>", "(Ljava/lang/String;IZZZLorg/apache/lucene/index/IndexOptions;Lorg/apache/lucene/index/DocValuesType;JLjava/util/Map;IIIZ)V");
            mids$[mid_attributes_1c3426541413a55d] = env->getMethodID(cls, "attributes", "()Ljava/util/Map;");
            mids$[mid_checkConsistency_8454bd5aa23fd11e] = env->getMethodID(cls, "checkConsistency", "()Z");
            mids$[mid_getAttribute_9bfa75c9f141b67f] = env->getMethodID(cls, "getAttribute", "(Ljava/lang/String;)Ljava/lang/String;");
            mids$[mid_getDocValuesGen_2e5ae9edcb9b072f] = env->getMethodID(cls, "getDocValuesGen", "()J");
            mids$[mid_getDocValuesType_c31c90cd64c32335] = env->getMethodID(cls, "getDocValuesType", "()Lorg/apache/lucene/index/DocValuesType;");
            mids$[mid_getIndexOptions_0d28536417711dd9] = env->getMethodID(cls, "getIndexOptions", "()Lorg/apache/lucene/index/IndexOptions;");
            mids$[mid_getPointDimensionCount_9972fcc56b44e79d] = env->getMethodID(cls, "getPointDimensionCount", "()I");
            mids$[mid_getPointIndexDimensionCount_9972fcc56b44e79d] = env->getMethodID(cls, "getPointIndexDimensionCount", "()I");
            mids$[mid_getPointNumBytes_9972fcc56b44e79d] = env->getMethodID(cls, "getPointNumBytes", "()I");
            mids$[mid_hasNorms_8454bd5aa23fd11e] = env->getMethodID(cls, "hasNorms", "()Z");
            mids$[mid_hasPayloads_8454bd5aa23fd11e] = env->getMethodID(cls, "hasPayloads", "()Z");
            mids$[mid_hasVectors_8454bd5aa23fd11e] = env->getMethodID(cls, "hasVectors", "()Z");
            mids$[mid_isSoftDeletesField_8454bd5aa23fd11e] = env->getMethodID(cls, "isSoftDeletesField", "()Z");
            mids$[mid_omitsNorms_8454bd5aa23fd11e] = env->getMethodID(cls, "omitsNorms", "()Z");
            mids$[mid_putAttribute_04b762e0ad33dcc5] = env->getMethodID(cls, "putAttribute", "(Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String;");
            mids$[mid_setDocValuesType_ed8de59f4ab7f4c5] = env->getMethodID(cls, "setDocValuesType", "(Lorg/apache/lucene/index/DocValuesType;)V");
            mids$[mid_setIndexOptions_851d3281d7acb151] = env->getMethodID(cls, "setIndexOptions", "(Lorg/apache/lucene/index/IndexOptions;)V");
            mids$[mid_setOmitsNorms_f2cc1bce94666404] = env->getMethodID(cls, "setOmitsNorms", "()V");
            mids$[mid_setPointDimensions_db3e97653d3683f3] = env->getMethodID(cls, "setPointDimensions", "(III)V");

            fids$ = new jfieldID[max_fid];
            fids$[fid_name] = env->getFieldID(cls, "name", "Ljava/lang/String;");
            fids$[fid_number] = env->getFieldID(cls, "number", "I");

            class$ = new ::java::lang::Class(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        FieldInfo::FieldInfo(const ::java::lang::String & a0, jint a1, jboolean a2, jboolean a3, jboolean a4, const ::org::apache::lucene::index::IndexOptions & a5, const ::org::apache::lucene::index::DocValuesType & a6, jlong a7, const ::java::util::Map & a8, jint a9, jint a10, jint a11, jboolean a12) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_91434f1c9fde0fc9, a0.this$, a1, a2, a3, a4, a5.this$, a6.this$, a7, a8.this$, a9, a10, a11, a12)) {}

        ::java::util::Map FieldInfo::attributes() const
        {
          return ::java::util::Map(env->callObjectMethod(this$, mids$[mid_attributes_1c3426541413a55d]));
        }

        jboolean FieldInfo::checkConsistency() const
        {
          return env->callBooleanMethod(this$, mids$[mid_checkConsistency_8454bd5aa23fd11e]);
        }

        ::java::lang::String FieldInfo::getAttribute(const ::java::lang::String & a0) const
        {
          return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_getAttribute_9bfa75c9f141b67f], a0.this$));
        }

        jlong FieldInfo::getDocValuesGen() const
        {
          return env->callLongMethod(this$, mids$[mid_getDocValuesGen_2e5ae9edcb9b072f]);
        }

        ::org::apache::lucene::index::DocValuesType FieldInfo::getDocValuesType() const
        {
          return ::org::apache::lucene::index::DocValuesType(env->callObjectMethod(this$, mids$[mid_getDocValuesType_c31c90cd64c32335]));
        }

        ::org::apache::lucene::index::IndexOptions FieldInfo::getIndexOptions() const
        {
          return ::org::apache::lucene::index::IndexOptions(env->callObjectMethod(this$, mids$[mid_getIndexOptions_0d28536417711dd9]));
        }

        jint FieldInfo::getPointDimensionCount() const
        {
          return env->callIntMethod(this$, mids$[mid_getPointDimensionCount_9972fcc56b44e79d]);
        }

        jint FieldInfo::getPointIndexDimensionCount() const
        {
          return env->callIntMethod(this$, mids$[mid_getPointIndexDimensionCount_9972fcc56b44e79d]);
        }

        jint FieldInfo::getPointNumBytes() const
        {
          return env->callIntMethod(this$, mids$[mid_getPointNumBytes_9972fcc56b44e79d]);
        }

        jboolean FieldInfo::hasNorms() const
        {
          return env->callBooleanMethod(this$, mids$[mid_hasNorms_8454bd5aa23fd11e]);
        }

        jboolean FieldInfo::hasPayloads() const
        {
          return env->callBooleanMethod(this$, mids$[mid_hasPayloads_8454bd5aa23fd11e]);
        }

        jboolean FieldInfo::hasVectors() const
        {
          return env->callBooleanMethod(this$, mids$[mid_hasVectors_8454bd5aa23fd11e]);
        }

        jboolean FieldInfo::isSoftDeletesField() const
        {
          return env->callBooleanMethod(this$, mids$[mid_isSoftDeletesField_8454bd5aa23fd11e]);
        }

        jboolean FieldInfo::omitsNorms() const
        {
          return env->callBooleanMethod(this$, mids$[mid_omitsNorms_8454bd5aa23fd11e]);
        }

        ::java::lang::String FieldInfo::putAttribute(const ::java::lang::String & a0, const ::java::lang::String & a1) const
        {
          return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_putAttribute_04b762e0ad33dcc5], a0.this$, a1.this$));
        }

        void FieldInfo::setDocValuesType(const ::org::apache::lucene::index::DocValuesType & a0) const
        {
          env->callVoidMethod(this$, mids$[mid_setDocValuesType_ed8de59f4ab7f4c5], a0.this$);
        }

        void FieldInfo::setIndexOptions(const ::org::apache::lucene::index::IndexOptions & a0) const
        {
          env->callVoidMethod(this$, mids$[mid_setIndexOptions_851d3281d7acb151], a0.this$);
        }

        void FieldInfo::setOmitsNorms() const
        {
          env->callVoidMethod(this$, mids$[mid_setOmitsNorms_f2cc1bce94666404]);
        }

        void FieldInfo::setPointDimensions(jint a0, jint a1, jint a2) const
        {
          env->callVoidMethod(this$, mids$[mid_setPointDimensions_db3e97653d3683f3], a0, a1, a2);
        }

        ::java::lang::String FieldInfo::_get_name() const
        {
          return ::java::lang::String(env->getObjectField(this$, fids$[fid_name]));
        }

        jint FieldInfo::_get_number() const
        {
          return env->getIntField(this$, fids$[fid_number]);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {
        static PyObject *t_FieldInfo_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_FieldInfo_instance_(PyTypeObject *type, PyObject *arg);
        static int t_FieldInfo_init_(t_FieldInfo *self, PyObject *args, PyObject *kwds);
        static PyObject *t_FieldInfo_attributes(t_FieldInfo *self);
        static PyObject *t_FieldInfo_checkConsistency(t_FieldInfo *self);
        static PyObject *t_FieldInfo_getAttribute(t_FieldInfo *self, PyObject *arg);
        static PyObject *t_FieldInfo_getDocValuesGen(t_FieldInfo *self);
        static PyObject *t_FieldInfo_getDocValuesType(t_FieldInfo *self);
        static PyObject *t_FieldInfo_getIndexOptions(t_FieldInfo *self);
        static PyObject *t_FieldInfo_getPointDimensionCount(t_FieldInfo *self);
        static PyObject *t_FieldInfo_getPointIndexDimensionCount(t_FieldInfo *self);
        static PyObject *t_FieldInfo_getPointNumBytes(t_FieldInfo *self);
        static PyObject *t_FieldInfo_hasNorms(t_FieldInfo *self);
        static PyObject *t_FieldInfo_hasPayloads(t_FieldInfo *self);
        static PyObject *t_FieldInfo_hasVectors(t_FieldInfo *self);
        static PyObject *t_FieldInfo_isSoftDeletesField(t_FieldInfo *self);
        static PyObject *t_FieldInfo_omitsNorms(t_FieldInfo *self);
        static PyObject *t_FieldInfo_putAttribute(t_FieldInfo *self, PyObject *args);
        static PyObject *t_FieldInfo_setDocValuesType(t_FieldInfo *self, PyObject *arg);
        static PyObject *t_FieldInfo_setIndexOptions(t_FieldInfo *self, PyObject *arg);
        static PyObject *t_FieldInfo_setOmitsNorms(t_FieldInfo *self);
        static PyObject *t_FieldInfo_setPointDimensions(t_FieldInfo *self, PyObject *args);
        static PyObject *t_FieldInfo_get__name(t_FieldInfo *self, void *data);
        static PyObject *t_FieldInfo_get__number(t_FieldInfo *self, void *data);

        static PyObject *t_FieldInfo_get__docValuesGen(t_FieldInfo *self, void *data);
        static PyObject *t_FieldInfo_get__docValuesType(t_FieldInfo *self, void *data);
        static int t_FieldInfo_set__docValuesType(t_FieldInfo *self, PyObject *arg, void *data);
        static PyObject *t_FieldInfo_get__indexOptions(t_FieldInfo *self, void *data);
        static int t_FieldInfo_set__indexOptions(t_FieldInfo *self, PyObject *arg, void *data);
        static PyObject *t_FieldInfo_get__pointDimensionCount(t_FieldInfo *self, void *data);
        static PyObject *t_FieldInfo_get__pointIndexDimensionCount(t_FieldInfo *self, void *data);
        static PyObject *t_FieldInfo_get__pointNumBytes(t_FieldInfo *self, void *data);
        static PyObject *t_FieldInfo_get__softDeletesField(t_FieldInfo *self, void *data);
        static PyGetSetDef t_FieldInfo__fields_[] = {
          DECLARE_GET_FIELD(t_FieldInfo, name),
          DECLARE_GET_FIELD(t_FieldInfo, number),
          DECLARE_GET_FIELD(t_FieldInfo, docValuesGen),
          DECLARE_GETSET_FIELD(t_FieldInfo, docValuesType),
          DECLARE_GETSET_FIELD(t_FieldInfo, indexOptions),
          DECLARE_GET_FIELD(t_FieldInfo, pointDimensionCount),
          DECLARE_GET_FIELD(t_FieldInfo, pointIndexDimensionCount),
          DECLARE_GET_FIELD(t_FieldInfo, pointNumBytes),
          DECLARE_GET_FIELD(t_FieldInfo, softDeletesField),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_FieldInfo__methods_[] = {
          DECLARE_METHOD(t_FieldInfo, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_FieldInfo, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_FieldInfo, attributes, METH_NOARGS),
          DECLARE_METHOD(t_FieldInfo, checkConsistency, METH_NOARGS),
          DECLARE_METHOD(t_FieldInfo, getAttribute, METH_O),
          DECLARE_METHOD(t_FieldInfo, getDocValuesGen, METH_NOARGS),
          DECLARE_METHOD(t_FieldInfo, getDocValuesType, METH_NOARGS),
          DECLARE_METHOD(t_FieldInfo, getIndexOptions, METH_NOARGS),
          DECLARE_METHOD(t_FieldInfo, getPointDimensionCount, METH_NOARGS),
          DECLARE_METHOD(t_FieldInfo, getPointIndexDimensionCount, METH_NOARGS),
          DECLARE_METHOD(t_FieldInfo, getPointNumBytes, METH_NOARGS),
          DECLARE_METHOD(t_FieldInfo, hasNorms, METH_NOARGS),
          DECLARE_METHOD(t_FieldInfo, hasPayloads, METH_NOARGS),
          DECLARE_METHOD(t_FieldInfo, hasVectors, METH_NOARGS),
          DECLARE_METHOD(t_FieldInfo, isSoftDeletesField, METH_NOARGS),
          DECLARE_METHOD(t_FieldInfo, omitsNorms, METH_NOARGS),
          DECLARE_METHOD(t_FieldInfo, putAttribute, METH_VARARGS),
          DECLARE_METHOD(t_FieldInfo, setDocValuesType, METH_O),
          DECLARE_METHOD(t_FieldInfo, setIndexOptions, METH_O),
          DECLARE_METHOD(t_FieldInfo, setOmitsNorms, METH_NOARGS),
          DECLARE_METHOD(t_FieldInfo, setPointDimensions, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        static PyType_Slot PY_TYPE_SLOTS(FieldInfo)[] = {
          { Py_tp_methods, t_FieldInfo__methods_ },
          { Py_tp_init, (void *) t_FieldInfo_init_ },
          { Py_tp_getset, t_FieldInfo__fields_ },
          { 0, NULL }
        };

        static PyType_Def *PY_TYPE_BASES(FieldInfo)[] = {
          &PY_TYPE_DEF(::java::lang::Object),
          NULL
        };

        DEFINE_TYPE(FieldInfo, t_FieldInfo, FieldInfo);

        void t_FieldInfo::install(PyObject *module)
        {
          installType(&PY_TYPE(FieldInfo), &PY_TYPE_DEF(FieldInfo), module, "FieldInfo", 0);
        }

        void t_FieldInfo::initialize(PyObject *module)
        {
          PyObject_SetAttrString((PyObject *) PY_TYPE(FieldInfo), "class_", make_descriptor(FieldInfo::initializeClass, 1));
          PyObject_SetAttrString((PyObject *) PY_TYPE(FieldInfo), "wrapfn_", make_descriptor(t_FieldInfo::wrap_jobject));
          PyObject_SetAttrString((PyObject *) PY_TYPE(FieldInfo), "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_FieldInfo_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, FieldInfo::initializeClass, 1)))
            return NULL;
          return t_FieldInfo::wrap_Object(FieldInfo(((t_FieldInfo *) arg)->object.this$));
        }
        static PyObject *t_FieldInfo_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, FieldInfo::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_FieldInfo_init_(t_FieldInfo *self, PyObject *args, PyObject *kwds)
        {
          ::java::lang::String a0((jobject) NULL);
          jint a1;
          jboolean a2;
          jboolean a3;
          jboolean a4;
          ::org::apache::lucene::index::IndexOptions a5((jobject) NULL);
          PyTypeObject **p5;
          ::org::apache::lucene::index::DocValuesType a6((jobject) NULL);
          PyTypeObject **p6;
          jlong a7;
          ::java::util::Map a8((jobject) NULL);
          PyTypeObject **p8;
          jint a9;
          jint a10;
          jint a11;
          jboolean a12;
          FieldInfo object((jobject) NULL);

          if (!parseArgs(args, "sIZZZKKJKIIIZ", ::org::apache::lucene::index::IndexOptions::initializeClass, ::org::apache::lucene::index::DocValuesType::initializeClass, ::java::util::Map::initializeClass, &a0, &a1, &a2, &a3, &a4, &a5, &p5, ::org::apache::lucene::index::t_IndexOptions::parameters_, &a6, &p6, ::org::apache::lucene::index::t_DocValuesType::parameters_, &a7, &a8, &p8, ::java::util::t_Map::parameters_, &a9, &a10, &a11, &a12))
          {
            INT_CALL(object = FieldInfo(a0, a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12));
            self->object = object;
          }
          else
          {
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }

        static PyObject *t_FieldInfo_attributes(t_FieldInfo *self)
        {
          ::java::util::Map result((jobject) NULL);
          OBJ_CALL(result = self->object.attributes());
          return ::java::util::t_Map::wrap_Object(result, ::java::lang::PY_TYPE(String), ::java::lang::PY_TYPE(String));
        }

        static PyObject *t_FieldInfo_checkConsistency(t_FieldInfo *self)
        {
          jboolean result;
          OBJ_CALL(result = self->object.checkConsistency());
          Py_RETURN_BOOL(result);
        }

        static PyObject *t_FieldInfo_getAttribute(t_FieldInfo *self, PyObject *arg)
        {
          ::java::lang::String a0((jobject) NULL);
          ::java::lang::String result((jobject) NULL);

          if (!parseArg(arg, "s", &a0))
          {
            OBJ_CALL(result = self->object.getAttribute(a0));
            return j2p(result);
          }

          PyErr_SetArgsError((PyObject *) self, "getAttribute", arg);
          return NULL;
        }

        static PyObject *t_FieldInfo_getDocValuesGen(t_FieldInfo *self)
        {
          jlong result;
          OBJ_CALL(result = self->object.getDocValuesGen());
          return PyLong_FromLongLong((PY_LONG_LONG) result);
        }

        static PyObject *t_FieldInfo_getDocValuesType(t_FieldInfo *self)
        {
          ::org::apache::lucene::index::DocValuesType result((jobject) NULL);
          OBJ_CALL(result = self->object.getDocValuesType());
          return ::org::apache::lucene::index::t_DocValuesType::wrap_Object(result);
        }

        static PyObject *t_FieldInfo_getIndexOptions(t_FieldInfo *self)
        {
          ::org::apache::lucene::index::IndexOptions result((jobject) NULL);
          OBJ_CALL(result = self->object.getIndexOptions());
          return ::org::apache::lucene::index::t_IndexOptions::wrap_Object(result);
        }

        static PyObject *t_FieldInfo_getPointDimensionCount(t_FieldInfo *self)
        {
          jint result;
          OBJ_CALL(result = self->object.getPointDimensionCount());
          return PyLong_FromLong((long) result);
        }

        static PyObject *t_FieldInfo_getPointIndexDimensionCount(t_FieldInfo *self)
        {
          jint result;
          OBJ_CALL(result = self->object.getPointIndexDimensionCount());
          return PyLong_FromLong((long) result);
        }

        static PyObject *t_FieldInfo_getPointNumBytes(t_FieldInfo *self)
        {
          jint result;
          OBJ_CALL(result = self->object.getPointNumBytes());
          return PyLong_FromLong((long) result);
        }

        static PyObject *t_FieldInfo_hasNorms(t_FieldInfo *self)
        {
          jboolean result;
          OBJ_CALL(result = self->object.hasNorms());
          Py_RETURN_BOOL(result);
        }

        static PyObject *t_FieldInfo_hasPayloads(t_FieldInfo *self)
        {
          jboolean result;
          OBJ_CALL(result = self->object.hasPayloads());
          Py_RETURN_BOOL(result);
        }

        static PyObject *t_FieldInfo_hasVectors(t_FieldInfo *self)
        {
          jboolean result;
          OBJ_CALL(result = self->object.hasVectors());
          Py_RETURN_BOOL(result);
        }

        static PyObject *t_FieldInfo_isSoftDeletesField(t_FieldInfo *self)
        {
          jboolean result;
          OBJ_CALL(result = self->object.isSoftDeletesField());
          Py_RETURN_BOOL(result);
        }

        static PyObject *t_FieldInfo_omitsNorms(t_FieldInfo *self)
        {
          jboolean result;
          OBJ_CALL(result = self->object.omitsNorms());
          Py_RETURN_BOOL(result);
        }

        static PyObject *t_FieldInfo_putAttribute(t_FieldInfo *self, PyObject *args)
        {
          ::java::lang::String a0((jobject) NULL);
          ::java::lang::String a1((jobject) NULL);
          ::java::lang::String result((jobject) NULL);

          if (!parseArgs(args, "ss", &a0, &a1))
          {
            OBJ_CALL(result = self->object.putAttribute(a0, a1));
            return j2p(result);
          }

          PyErr_SetArgsError((PyObject *) self, "putAttribute", args);
          return NULL;
        }

        static PyObject *t_FieldInfo_setDocValuesType(t_FieldInfo *self, PyObject *arg)
        {
          ::org::apache::lucene::index::DocValuesType a0((jobject) NULL);
          PyTypeObject **p0;

          if (!parseArg(arg, "K", ::org::apache::lucene::index::DocValuesType::initializeClass, &a0, &p0, ::org::apache::lucene::index::t_DocValuesType::parameters_))
          {
            OBJ_CALL(self->object.setDocValuesType(a0));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "setDocValuesType", arg);
          return NULL;
        }

        static PyObject *t_FieldInfo_setIndexOptions(t_FieldInfo *self, PyObject *arg)
        {
          ::org::apache::lucene::index::IndexOptions a0((jobject) NULL);
          PyTypeObject **p0;

          if (!parseArg(arg, "K", ::org::apache::lucene::index::IndexOptions::initializeClass, &a0, &p0, ::org::apache::lucene::index::t_IndexOptions::parameters_))
          {
            OBJ_CALL(self->object.setIndexOptions(a0));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "setIndexOptions", arg);
          return NULL;
        }

        static PyObject *t_FieldInfo_setOmitsNorms(t_FieldInfo *self)
        {
          OBJ_CALL(self->object.setOmitsNorms());
          Py_RETURN_NONE;
        }

        static PyObject *t_FieldInfo_setPointDimensions(t_FieldInfo *self, PyObject *args)
        {
          jint a0;
          jint a1;
          jint a2;

          if (!parseArgs(args, "III", &a0, &a1, &a2))
          {
            OBJ_CALL(self->object.setPointDimensions(a0, a1, a2));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "setPointDimensions", args);
          return NULL;
        }

        static PyObject *t_FieldInfo_get__name(t_FieldInfo *self, void *data)
        {
          ::java::lang::String value((jobject) NULL);
          OBJ_CALL(value = self->object._get_name());
          return j2p(value);
        }

        static PyObject *t_FieldInfo_get__number(t_FieldInfo *self, void *data)
        {
          jint value;
          OBJ_CALL(value = self->object._get_number());
          return PyLong_FromLong((long) value);
        }

        static PyObject *t_FieldInfo_get__docValuesGen(t_FieldInfo *self, void *data)
        {
          jlong value;
          OBJ_CALL(value = self->object.getDocValuesGen());
          return PyLong_FromLongLong((PY_LONG_LONG) value);
        }

        static PyObject *t_FieldInfo_get__docValuesType(t_FieldInfo *self, void *data)
        {
          ::org::apache::lucene::index::DocValuesType value((jobject) NULL);
          OBJ_CALL(value = self->object.getDocValuesType());
          return ::org::apache::lucene::index::t_DocValuesType::wrap_Object(value);
        }
        static int t_FieldInfo_set__docValuesType(t_FieldInfo *self, PyObject *arg, void *data)
        {
          {
            ::org::apache::lucene::index::DocValuesType value((jobject) NULL);
            if (!parseArg(arg, "k", ::org::apache::lucene::index::DocValuesType::initializeClass, &value))
            {
              INT_CALL(self->object.setDocValuesType(value));
              return 0;
            }
          }
          PyErr_SetArgsError((PyObject *) self, "docValuesType", arg);
          return -1;
        }

        static PyObject *t_FieldInfo_get__indexOptions(t_FieldInfo *self, void *data)
        {
          ::org::apache::lucene::index::IndexOptions value((jobject) NULL);
          OBJ_CALL(value = self->object.getIndexOptions());
          return ::org::apache::lucene::index::t_IndexOptions::wrap_Object(value);
        }
        static int t_FieldInfo_set__indexOptions(t_FieldInfo *self, PyObject *arg, void *data)
        {
          {
            ::org::apache::lucene::index::IndexOptions value((jobject) NULL);
            if (!parseArg(arg, "k", ::org::apache::lucene::index::IndexOptions::initializeClass, &value))
            {
              INT_CALL(self->object.setIndexOptions(value));
              return 0;
            }
          }
          PyErr_SetArgsError((PyObject *) self, "indexOptions", arg);
          return -1;
        }

        static PyObject *t_FieldInfo_get__pointDimensionCount(t_FieldInfo *self, void *data)
        {
          jint value;
          OBJ_CALL(value = self->object.getPointDimensionCount());
          return PyLong_FromLong((long) value);
        }

        static PyObject *t_FieldInfo_get__pointIndexDimensionCount(t_FieldInfo *self, void *data)
        {
          jint value;
          OBJ_CALL(value = self->object.getPointIndexDimensionCount());
          return PyLong_FromLong((long) value);
        }

        static PyObject *t_FieldInfo_get__pointNumBytes(t_FieldInfo *self, void *data)
        {
          jint value;
          OBJ_CALL(value = self->object.getPointNumBytes());
          return PyLong_FromLong((long) value);
        }

        static PyObject *t_FieldInfo_get__softDeletesField(t_FieldInfo *self, void *data)
        {
          jboolean value;
          OBJ_CALL(value = self->object.isSoftDeletesField());
          Py_RETURN_BOOL(value);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/miscellaneous/ScandinavianFoldingFilterFactory.h"
#include "java/util/Map.h"
#include "java/lang/String.h"
#include "org/apache/lucene/analysis/TokenStream.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace miscellaneous {

          ::java::lang::Class *ScandinavianFoldingFilterFactory::class$ = NULL;
          jmethodID *ScandinavianFoldingFilterFactory::mids$ = NULL;
          bool ScandinavianFoldingFilterFactory::live$ = false;
          ::java::lang::String *ScandinavianFoldingFilterFactory::NAME = NULL;

          jclass ScandinavianFoldingFilterFactory::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/miscellaneous/ScandinavianFoldingFilterFactory");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_408bd889ee3beae5] = env->getMethodID(cls, "<init>", "(Ljava/util/Map;)V");
              mids$[mid_create_6de1e28d9d10cd9e] = env->getMethodID(cls, "create", "(Lorg/apache/lucene/analysis/TokenStream;)Lorg/apache/lucene/analysis/TokenStream;");
              mids$[mid_normalize_6de1e28d9d10cd9e] = env->getMethodID(cls, "normalize", "(Lorg/apache/lucene/analysis/TokenStream;)Lorg/apache/lucene/analysis/TokenStream;");

              class$ = new ::java::lang::Class(cls);
              cls = (jclass) class$->this$;

              NAME = new ::java::lang::String(env->getStaticObjectField(cls, "NAME", "Ljava/lang/String;"));
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          ScandinavianFoldingFilterFactory::ScandinavianFoldingFilterFactory(const ::java::util::Map & a0) : ::org::apache::lucene::analysis::util::TokenFilterFactory(env->newObject(initializeClass, &mids$, mid_init$_408bd889ee3beae5, a0.this$)) {}

          ::org::apache::lucene::analysis::TokenStream ScandinavianFoldingFilterFactory::create(const ::org::apache::lucene::analysis::TokenStream & a0) const
          {
            return ::org::apache::lucene::analysis::TokenStream(env->callObjectMethod(this$, mids$[mid_create_6de1e28d9d10cd9e], a0.this$));
          }

          ::org::apache::lucene::analysis::TokenStream ScandinavianFoldingFilterFactory::normalize(const ::org::apache::lucene::analysis::TokenStream & a0) const
          {
            return ::org::apache::lucene::analysis::TokenStream(env->callObjectMethod(this$, mids$[mid_normalize_6de1e28d9d10cd9e], a0.this$));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace miscellaneous {
          static PyObject *t_ScandinavianFoldingFilterFactory_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_ScandinavianFoldingFilterFactory_instance_(PyTypeObject *type, PyObject *arg);
          static int t_ScandinavianFoldingFilterFactory_init_(t_ScandinavianFoldingFilterFactory *self, PyObject *args, PyObject *kwds);
          static PyObject *t_ScandinavianFoldingFilterFactory_create(t_ScandinavianFoldingFilterFactory *self, PyObject *args);
          static PyObject *t_ScandinavianFoldingFilterFactory_normalize(t_ScandinavianFoldingFilterFactory *self, PyObject *args);

          static PyMethodDef t_ScandinavianFoldingFilterFactory__methods_[] = {
            DECLARE_METHOD(t_ScandinavianFoldingFilterFactory, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_ScandinavianFoldingFilterFactory, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_ScandinavianFoldingFilterFactory, create, METH_VARARGS),
            DECLARE_METHOD(t_ScandinavianFoldingFilterFactory, normalize, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          static PyType_Slot PY_TYPE_SLOTS(ScandinavianFoldingFilterFactory)[] = {
            { Py_tp_methods, t_ScandinavianFoldingFilterFactory__methods_ },
            { Py_tp_init, (void *) t_ScandinavianFoldingFilterFactory_init_ },
            { 0, NULL }
          };

          static PyType_Def *PY_TYPE_BASES(ScandinavianFoldingFilterFactory)[] = {
            &PY_TYPE_DEF(::org::apache::lucene::analysis::util::TokenFilterFactory),
            NULL
          };

          DEFINE_TYPE(ScandinavianFoldingFilterFactory, t_ScandinavianFoldingFilterFactory, ScandinavianFoldingFilterFactory);

          void t_ScandinavianFoldingFilterFactory::install(PyObject *module)
          {
            installType(&PY_TYPE(ScandinavianFoldingFilterFactory), &PY_TYPE_DEF(ScandinavianFoldingFilterFactory), module, "ScandinavianFoldingFilterFactory", 0);
          }

          void t_ScandinavianFoldingFilterFactory::initialize(PyObject *module)
          {
            PyObject_SetAttrString((PyObject *) PY_TYPE(ScandinavianFoldingFilterFactory), "class_", make_descriptor(ScandinavianFoldingFilterFactory::initializeClass, 1));
            PyObject_SetAttrString((PyObject *) PY_TYPE(ScandinavianFoldingFilterFactory), "wrapfn_", make_descriptor(t_ScandinavianFoldingFilterFactory::wrap_jobject));
            PyObject_SetAttrString((PyObject *) PY_TYPE(ScandinavianFoldingFilterFactory), "boxfn_", make_descriptor(boxObject));
            env->getClass(ScandinavianFoldingFilterFactory::initializeClass);
            PyObject_SetAttrString((PyObject *) PY_TYPE(ScandinavianFoldingFilterFactory), "NAME", make_descriptor(j2p(*ScandinavianFoldingFilterFactory::NAME)));
          }

          static PyObject *t_ScandinavianFoldingFilterFactory_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, ScandinavianFoldingFilterFactory::initializeClass, 1)))
              return NULL;
            return t_ScandinavianFoldingFilterFactory::wrap_Object(ScandinavianFoldingFilterFactory(((t_ScandinavianFoldingFilterFactory *) arg)->object.this$));
          }
          static PyObject *t_ScandinavianFoldingFilterFactory_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, ScandinavianFoldingFilterFactory::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_ScandinavianFoldingFilterFactory_init_(t_ScandinavianFoldingFilterFactory *self, PyObject *args, PyObject *kwds)
          {
            ::java::util::Map a0((jobject) NULL);
            PyTypeObject **p0;
            ScandinavianFoldingFilterFactory object((jobject) NULL);

            if (!parseArgs(args, "K", ::java::util::Map::initializeClass, &a0, &p0, ::java::util::t_Map::parameters_))
            {
              INT_CALL(object = ScandinavianFoldingFilterFactory(a0));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_ScandinavianFoldingFilterFactory_create(t_ScandinavianFoldingFilterFactory *self, PyObject *args)
          {
            ::org::apache::lucene::analysis::TokenStream a0((jobject) NULL);
            ::org::apache::lucene::analysis::TokenStream result((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::analysis::TokenStream::initializeClass, &a0))
            {
              OBJ_CALL(result = self->object.create(a0));
              return ::org::apache::lucene::analysis::t_TokenStream::wrap_Object(result);
            }

            return callSuper(PY_TYPE(ScandinavianFoldingFilterFactory), (PyObject *) self, "create", args, 2);
          }

          static PyObject *t_ScandinavianFoldingFilterFactory_normalize(t_ScandinavianFoldingFilterFactory *self, PyObject *args)
          {
            ::org::apache::lucene::analysis::TokenStream a0((jobject) NULL);
            ::org::apache::lucene::analysis::TokenStream result((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::analysis::TokenStream::initializeClass, &a0))
            {
              OBJ_CALL(result = self->object.normalize(a0));
              return ::org::apache::lucene::analysis::t_TokenStream::wrap_Object(result);
            }

            return callSuper(PY_TYPE(ScandinavianFoldingFilterFactory), (PyObject *) self, "normalize", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queryparser/flexible/core/nodes/ModifierQueryNode$Modifier.h"
#include "java/lang/String.h"
#include "org/apache/lucene/queryparser/flexible/core/nodes/ModifierQueryNode$Modifier.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace core {
            namespace nodes {

              ::java::lang::Class *ModifierQueryNode$Modifier::class$ = NULL;
              jmethodID *ModifierQueryNode$Modifier::mids$ = NULL;
              bool ModifierQueryNode$Modifier::live$ = false;
              ModifierQueryNode$Modifier *ModifierQueryNode$Modifier::MOD_NONE = NULL;
              ModifierQueryNode$Modifier *ModifierQueryNode$Modifier::MOD_NOT = NULL;
              ModifierQueryNode$Modifier *ModifierQueryNode$Modifier::MOD_REQ = NULL;

              jclass ModifierQueryNode$Modifier::initializeClass(bool getOnly)
              {
                if (getOnly)
                  return (jclass) (live$ ? class$->this$ : NULL);
                if (class$ == NULL)
                {
                  jclass cls = (jclass) env->findClass("org/apache/lucene/queryparser/flexible/core/nodes/ModifierQueryNode$Modifier");

                  mids$ = new jmethodID[max_mid];
                  mids$[mid_toDigitString_db9b55ba01e03e4b] = env->getMethodID(cls, "toDigitString", "()Ljava/lang/String;");
                  mids$[mid_toLargeString_db9b55ba01e03e4b] = env->getMethodID(cls, "toLargeString", "()Ljava/lang/String;");
                  mids$[mid_toString_db9b55ba01e03e4b] = env->getMethodID(cls, "toString", "()Ljava/lang/String;");
                  mids$[mid_valueOf_d7d151a2d85280cd] = env->getStaticMethodID(cls, "valueOf", "(Ljava/lang/String;)Lorg/apache/lucene/queryparser/flexible/core/nodes/ModifierQueryNode$Modifier;");
                  mids$[mid_values_b1e4ed25bbe09e2e] = env->getStaticMethodID(cls, "values", "()[Lorg/apache/lucene/queryparser/flexible/core/nodes/ModifierQueryNode$Modifier;");

                  class$ = new ::java::lang::Class(cls);
                  cls = (jclass) class$->this$;

                  MOD_NONE = new ModifierQueryNode$Modifier(env->getStaticObjectField(cls, "MOD_NONE", "Lorg/apache/lucene/queryparser/flexible/core/nodes/ModifierQueryNode$Modifier;"));
                  MOD_NOT = new ModifierQueryNode$Modifier(env->getStaticObjectField(cls, "MOD_NOT", "Lorg/apache/lucene/queryparser/flexible/core/nodes/ModifierQueryNode$Modifier;"));
                  MOD_REQ = new ModifierQueryNode$Modifier(env->getStaticObjectField(cls, "MOD_REQ", "Lorg/apache/lucene/queryparser/flexible/core/nodes/ModifierQueryNode$Modifier;"));
                  live$ = true;
                }
                return (jclass) class$->this$;
              }

              ::java::lang::String ModifierQueryNode$Modifier::toDigitString() const
              {
                return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toDigitString_db9b55ba01e03e4b]));
              }

              ::java::lang::String ModifierQueryNode$Modifier::toLargeString() const
              {
                return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toLargeString_db9b55ba01e03e4b]));
              }

              ::java::lang::String ModifierQueryNode$Modifier::toString() const
              {
                return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_db9b55ba01e03e4b]));
              }

              ModifierQueryNode$Modifier ModifierQueryNode$Modifier::valueOf(const ::java::lang::String & a0)
              {
                jclass cls = env->getClass(initializeClass);
                return ModifierQueryNode$Modifier(env->callStaticObjectMethod(cls, mids$[mid_valueOf_d7d151a2d85280cd], a0.this$));
              }

              JArray< ModifierQueryNode$Modifier > ModifierQueryNode$Modifier::values()
              {
                jclass cls = env->getClass(initializeClass);
                return JArray< ModifierQueryNode$Modifier >(env->callStaticObjectMethod(cls, mids$[mid_values_b1e4ed25bbe09e2e]));
              }
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace core {
            namespace nodes {
              static PyObject *t_ModifierQueryNode$Modifier_cast_(PyTypeObject *type, PyObject *arg);
              static PyObject *t_ModifierQueryNode$Modifier_instance_(PyTypeObject *type, PyObject *arg);
              static PyObject *t_ModifierQueryNode$Modifier_of_(t_ModifierQueryNode$Modifier *self, PyObject *args);
              static PyObject *t_ModifierQueryNode$Modifier_toDigitString(t_ModifierQueryNode$Modifier *self);
              static PyObject *t_ModifierQueryNode$Modifier_toLargeString(t_ModifierQueryNode$Modifier *self);
              static PyObject *t_ModifierQueryNode$Modifier_toString(t_ModifierQueryNode$Modifier *self, PyObject *args);
              static PyObject *t_ModifierQueryNode$Modifier_valueOf(PyTypeObject *type, PyObject *args);
              static PyObject *t_ModifierQueryNode$Modifier_values(PyTypeObject *type);
              static PyObject *t_ModifierQueryNode$Modifier_get__parameters_(t_ModifierQueryNode$Modifier *self, void *data);
              static PyGetSetDef t_ModifierQueryNode$Modifier__fields_[] = {
                DECLARE_GET_FIELD(t_ModifierQueryNode$Modifier, parameters_),
                { NULL, NULL, NULL, NULL, NULL }
              };

              static PyMethodDef t_ModifierQueryNode$Modifier__methods_[] = {
                DECLARE_METHOD(t_ModifierQueryNode$Modifier, cast_, METH_O | METH_CLASS),
                DECLARE_METHOD(t_ModifierQueryNode$Modifier, instance_, METH_O | METH_CLASS),
                DECLARE_METHOD(t_ModifierQueryNode$Modifier, of_, METH_VARARGS),
                DECLARE_METHOD(t_ModifierQueryNode$Modifier, toDigitString, METH_NOARGS),
                DECLARE_METHOD(t_ModifierQueryNode$Modifier, toLargeString, METH_NOARGS),
                DECLARE_METHOD(t_ModifierQueryNode$Modifier, toString, METH_VARARGS),
                DECLARE_METHOD(t_ModifierQueryNode$Modifier, valueOf, METH_VARARGS | METH_CLASS),
                DECLARE_METHOD(t_ModifierQueryNode$Modifier, values, METH_NOARGS | METH_CLASS),
                { NULL, NULL, 0, NULL }
              };

              static PyType_Slot PY_TYPE_SLOTS(ModifierQueryNode$Modifier)[] = {
                { Py_tp_methods, t_ModifierQueryNode$Modifier__methods_ },
                { Py_tp_init, (void *) abstract_init },
                { Py_tp_getset, t_ModifierQueryNode$Modifier__fields_ },
                { 0, NULL }
              };

              static PyType_Def *PY_TYPE_BASES(ModifierQueryNode$Modifier)[] = {
                &PY_TYPE_DEF(::java::lang::Enum),
                NULL
              };

              DEFINE_TYPE(ModifierQueryNode$Modifier, t_ModifierQueryNode$Modifier, ModifierQueryNode$Modifier);
              PyObject *t_ModifierQueryNode$Modifier::wrap_Object(const ModifierQueryNode$Modifier& object, PyTypeObject *p0)
              {
                PyObject *obj = t_ModifierQueryNode$Modifier::wrap_Object(object);
                if (obj != NULL && obj != Py_None)
                {
                  t_ModifierQueryNode$Modifier *self = (t_ModifierQueryNode$Modifier *) obj;
                  self->parameters[0] = p0;
                }
                return obj;
              }

              PyObject *t_ModifierQueryNode$Modifier::wrap_jobject(const jobject& object, PyTypeObject *p0)
              {
                PyObject *obj = t_ModifierQueryNode$Modifier::wrap_jobject(object);
                if (obj != NULL && obj != Py_None)
                {
                  t_ModifierQueryNode$Modifier *self = (t_ModifierQueryNode$Modifier *) obj;
                  self->parameters[0] = p0;
                }
                return obj;
              }

              void t_ModifierQueryNode$Modifier::install(PyObject *module)
              {
                installType(&PY_TYPE(ModifierQueryNode$Modifier), &PY_TYPE_DEF(ModifierQueryNode$Modifier), module, "ModifierQueryNode$Modifier", 0);
              }

              void t_ModifierQueryNode$Modifier::initialize(PyObject *module)
              {
                PyObject_SetAttrString((PyObject *) PY_TYPE(ModifierQueryNode$Modifier), "class_", make_descriptor(ModifierQueryNode$Modifier::initializeClass, 1));
                PyObject_SetAttrString((PyObject *) PY_TYPE(ModifierQueryNode$Modifier), "wrapfn_", make_descriptor(t_ModifierQueryNode$Modifier::wrap_jobject));
                PyObject_SetAttrString((PyObject *) PY_TYPE(ModifierQueryNode$Modifier), "boxfn_", make_descriptor(boxObject));
                env->getClass(ModifierQueryNode$Modifier::initializeClass);
                PyObject_SetAttrString((PyObject *) PY_TYPE(ModifierQueryNode$Modifier), "MOD_NONE", make_descriptor(t_ModifierQueryNode$Modifier::wrap_Object(*ModifierQueryNode$Modifier::MOD_NONE)));
                PyObject_SetAttrString((PyObject *) PY_TYPE(ModifierQueryNode$Modifier), "MOD_NOT", make_descriptor(t_ModifierQueryNode$Modifier::wrap_Object(*ModifierQueryNode$Modifier::MOD_NOT)));
                PyObject_SetAttrString((PyObject *) PY_TYPE(ModifierQueryNode$Modifier), "MOD_REQ", make_descriptor(t_ModifierQueryNode$Modifier::wrap_Object(*ModifierQueryNode$Modifier::MOD_REQ)));
              }

              static PyObject *t_ModifierQueryNode$Modifier_cast_(PyTypeObject *type, PyObject *arg)
              {
                if (!(arg = castCheck(arg, ModifierQueryNode$Modifier::initializeClass, 1)))
                  return NULL;
                return t_ModifierQueryNode$Modifier::wrap_Object(ModifierQueryNode$Modifier(((t_ModifierQueryNode$Modifier *) arg)->object.this$));
              }
              static PyObject *t_ModifierQueryNode$Modifier_instance_(PyTypeObject *type, PyObject *arg)
              {
                if (!castCheck(arg, ModifierQueryNode$Modifier::initializeClass, 0))
                  Py_RETURN_FALSE;
                Py_RETURN_TRUE;
              }

              static PyObject *t_ModifierQueryNode$Modifier_of_(t_ModifierQueryNode$Modifier *self, PyObject *args)
              {
                if (!parseArg(args, "T", 1, &(self->parameters)))
                  Py_RETURN_SELF;
                return PyErr_SetArgsError((PyObject *) self, "of_", args);
              }

              static PyObject *t_ModifierQueryNode$Modifier_toDigitString(t_ModifierQueryNode$Modifier *self)
              {
                ::java::lang::String result((jobject) NULL);
                OBJ_CALL(result = self->object.toDigitString());
                return j2p(result);
              }

              static PyObject *t_ModifierQueryNode$Modifier_toLargeString(t_ModifierQueryNode$Modifier *self)
              {
                ::java::lang::String result((jobject) NULL);
                OBJ_CALL(result = self->object.toLargeString());
                return j2p(result);
              }

              static PyObject *t_ModifierQueryNode$Modifier_toString(t_ModifierQueryNode$Modifier *self, PyObject *args)
              {
                ::java::lang::String result((jobject) NULL);

                if (!parseArgs(args, ""))
                {
                  OBJ_CALL(result = self->object.toString());
                  return j2p(result);
                }

                return callSuper(PY_TYPE(ModifierQueryNode$Modifier), (PyObject *) self, "toString", args, 2);
              }

              static PyObject *t_ModifierQueryNode$Modifier_valueOf(PyTypeObject *type, PyObject *args)
              {
                ::java::lang::String a0((jobject) NULL);
                ModifierQueryNode$Modifier result((jobject) NULL);

                if (!parseArgs(args, "s", &a0))
                {
                  OBJ_CALL(result = ::org::apache::lucene::queryparser::flexible::core::nodes::ModifierQueryNode$Modifier::valueOf(a0));
                  return t_ModifierQueryNode$Modifier::wrap_Object(result);
                }

                return callSuper(type, "valueOf", args, 2);
              }

              static PyObject *t_ModifierQueryNode$Modifier_values(PyTypeObject *type)
              {
                JArray< ModifierQueryNode$Modifier > result((jobject) NULL);
                OBJ_CALL(result = ::org::apache::lucene::queryparser::flexible::core::nodes::ModifierQueryNode$Modifier::values());
                return JArray<jobject>(result.this$).wrap(t_ModifierQueryNode$Modifier::wrap_jobject);
              }
              static PyObject *t_ModifierQueryNode$Modifier_get__parameters_(t_ModifierQueryNode$Modifier *self, void *data)
              {
                return typeParameters(self->parameters, sizeof(self->parameters));
              }
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/util/fst/Util$TopResults.h"
#include "org/apache/lucene/util/fst/Util$Result.h"
#include "java/lang/Class.h"
#include "java/lang/Iterable.h"
#include "java/util/Iterator.h"
#include "java/util/List.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        namespace fst {

          ::java::lang::Class *Util$TopResults::class$ = NULL;
          jmethodID *Util$TopResults::mids$ = NULL;
          jfieldID *Util$TopResults::fids$ = NULL;
          bool Util$TopResults::live$ = false;

          jclass Util$TopResults::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/util/fst/Util$TopResults");

              mids$ = new jmethodID[max_mid];
              mids$[mid_iterator_233a192dadb0917d] = env->getMethodID(cls, "iterator", "()Ljava/util/Iterator;");

              fids$ = new jfieldID[max_fid];
              fids$[fid_isComplete] = env->getFieldID(cls, "isComplete", "Z");
              fids$[fid_topN] = env->getFieldID(cls, "topN", "Ljava/util/List;");

              class$ = new ::java::lang::Class(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          ::java::util::Iterator Util$TopResults::iterator() const
          {
            return ::java::util::Iterator(env->callObjectMethod(this$, mids$[mid_iterator_233a192dadb0917d]));
          }

          jboolean Util$TopResults::_get_isComplete() const
          {
            return env->getBooleanField(this$, fids$[fid_isComplete]);
          }

          ::java::util::List Util$TopResults::_get_topN() const
          {
            return ::java::util::List(env->getObjectField(this$, fids$[fid_topN]));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        namespace fst {
          static PyObject *t_Util$TopResults_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_Util$TopResults_instance_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_Util$TopResults_of_(t_Util$TopResults *self, PyObject *args);
          static PyObject *t_Util$TopResults_iterator(t_Util$TopResults *self);
          static PyObject *t_Util$TopResults_get__isComplete(t_Util$TopResults *self, void *data);
          static PyObject *t_Util$TopResults_get__topN(t_Util$TopResults *self, void *data);

          static PyObject *t_Util$TopResults_get__parameters_(t_Util$TopResults *self, void *data);
          static PyGetSetDef t_Util$TopResults__fields_[] = {
            DECLARE_GET_FIELD(t_Util$TopResults, isComplete),
            DECLARE_GET_FIELD(t_Util$TopResults, topN),
            DECLARE_GET_FIELD(t_Util$TopResults, parameters_),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_Util$TopResults__methods_[] = {
            DECLARE_METHOD(t_Util$TopResults, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_Util$TopResults, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_Util$TopResults, of_, METH_VARARGS),
            DECLARE_METHOD(t_Util$TopResults, iterator, METH_NOARGS),
            { NULL, NULL, 0, NULL }
          };

          static PyType_Slot PY_TYPE_SLOTS(Util$TopResults)[] = {
            { Py_tp_methods, t_Util$TopResults__methods_ },
            { Py_tp_init, (void *) abstract_init },
            { Py_tp_getset, t_Util$TopResults__fields_ },
            { Py_tp_iter, (void *) ((PyObject *(*)(t_Util$TopResults *)) get_generic_iterator< t_Util$TopResults >) },
            { Py_tp_iternext, (void *) 0 },
            { 0, NULL }
          };

          static PyType_Def *PY_TYPE_BASES(Util$TopResults)[] = {
            &PY_TYPE_DEF(::java::lang::Object),
            NULL
          };

          DEFINE_TYPE(Util$TopResults, t_Util$TopResults, Util$TopResults);
          PyObject *t_Util$TopResults::wrap_Object(const Util$TopResults& object, PyTypeObject *p0)
          {
            PyObject *obj = t_Util$TopResults::wrap_Object(object);
            if (obj != NULL && obj != Py_None)
            {
              t_Util$TopResults *self = (t_Util$TopResults *) obj;
              self->parameters[0] = p0;
            }
            return obj;
          }

          PyObject *t_Util$TopResults::wrap_jobject(const jobject& object, PyTypeObject *p0)
          {
            PyObject *obj = t_Util$TopResults::wrap_jobject(object);
            if (obj != NULL && obj != Py_None)
            {
              t_Util$TopResults *self = (t_Util$TopResults *) obj;
              self->parameters[0] = p0;
            }
            return obj;
          }

          void t_Util$TopResults::install(PyObject *module)
          {
            installType(&PY_TYPE(Util$TopResults), &PY_TYPE_DEF(Util$TopResults), module, "Util$TopResults", 0);
          }

          void t_Util$TopResults::initialize(PyObject *module)
          {
            PyObject_SetAttrString((PyObject *) PY_TYPE(Util$TopResults), "class_", make_descriptor(Util$TopResults::initializeClass, 1));
            PyObject_SetAttrString((PyObject *) PY_TYPE(Util$TopResults), "wrapfn_", make_descriptor(t_Util$TopResults::wrap_jobject));
            PyObject_SetAttrString((PyObject *) PY_TYPE(Util$TopResults), "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_Util$TopResults_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, Util$TopResults::initializeClass, 1)))
              return NULL;
            return t_Util$TopResults::wrap_Object(Util$TopResults(((t_Util$TopResults *) arg)->object.this$));
          }
          static PyObject *t_Util$TopResults_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, Util$TopResults::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static PyObject *t_Util$TopResults_of_(t_Util$TopResults *self, PyObject *args)
          {
            if (!parseArg(args, "T", 1, &(self->parameters)))
              Py_RETURN_SELF;
            return PyErr_SetArgsError((PyObject *) self, "of_", args);
          }

          static PyObject *t_Util$TopResults_iterator(t_Util$TopResults *self)
          {
            ::java::util::Iterator result((jobject) NULL);
            OBJ_CALL(result = self->object.iterator());
            return ::java::util::t_Iterator::wrap_Object(result);
          }
          static PyObject *t_Util$TopResults_get__parameters_(t_Util$TopResults *self, void *data)
          {
            return typeParameters(self->parameters, sizeof(self->parameters));
          }

          static PyObject *t_Util$TopResults_get__isComplete(t_Util$TopResults *self, void *data)
          {
            jboolean value;
            OBJ_CALL(value = self->object._get_isComplete());
            Py_RETURN_BOOL(value);
          }

          static PyObject *t_Util$TopResults_get__topN(t_Util$TopResults *self, void *data)
          {
            ::java::util::List value((jobject) NULL);
            OBJ_CALL(value = self->object._get_topN());
            return ::java::util::t_List::wrap_Object(value);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/codecs/lucene87/LZ4WithPresetDictCompressionMode.h"
#include "org/apache/lucene/codecs/compressing/Compressor.h"
#include "java/lang/String.h"
#include "org/apache/lucene/codecs/compressing/Decompressor.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace codecs {
        namespace lucene87 {

          ::java::lang::Class *LZ4WithPresetDictCompressionMode::class$ = NULL;
          jmethodID *LZ4WithPresetDictCompressionMode::mids$ = NULL;
          bool LZ4WithPresetDictCompressionMode::live$ = false;

          jclass LZ4WithPresetDictCompressionMode::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/codecs/lucene87/LZ4WithPresetDictCompressionMode");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_f2cc1bce94666404] = env->getMethodID(cls, "<init>", "()V");
              mids$[mid_newCompressor_d2c98bf6347b4a10] = env->getMethodID(cls, "newCompressor", "()Lorg/apache/lucene/codecs/compressing/Compressor;");
              mids$[mid_newDecompressor_1fbc4f71d5e2b599] = env->getMethodID(cls, "newDecompressor", "()Lorg/apache/lucene/codecs/compressing/Decompressor;");
              mids$[mid_toString_db9b55ba01e03e4b] = env->getMethodID(cls, "toString", "()Ljava/lang/String;");

              class$ = new ::java::lang::Class(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          LZ4WithPresetDictCompressionMode::LZ4WithPresetDictCompressionMode() : ::org::apache::lucene::codecs::compressing::CompressionMode(env->newObject(initializeClass, &mids$, mid_init$_f2cc1bce94666404)) {}

          ::org::apache::lucene::codecs::compressing::Compressor LZ4WithPresetDictCompressionMode::newCompressor() const
          {
            return ::org::apache::lucene::codecs::compressing::Compressor(env->callObjectMethod(this$, mids$[mid_newCompressor_d2c98bf6347b4a10]));
          }

          ::org::apache::lucene::codecs::compressing::Decompressor LZ4WithPresetDictCompressionMode::newDecompressor() const
          {
            return ::org::apache::lucene::codecs::compressing::Decompressor(env->callObjectMethod(this$, mids$[mid_newDecompressor_1fbc4f71d5e2b599]));
          }

          ::java::lang::String LZ4WithPresetDictCompressionMode::toString() const
          {
            return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_db9b55ba01e03e4b]));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace codecs {
        namespace lucene87 {
          static PyObject *t_LZ4WithPresetDictCompressionMode_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_LZ4WithPresetDictCompressionMode_instance_(PyTypeObject *type, PyObject *arg);
          static int t_LZ4WithPresetDictCompressionMode_init_(t_LZ4WithPresetDictCompressionMode *self, PyObject *args, PyObject *kwds);
          static PyObject *t_LZ4WithPresetDictCompressionMode_newCompressor(t_LZ4WithPresetDictCompressionMode *self, PyObject *args);
          static PyObject *t_LZ4WithPresetDictCompressionMode_newDecompressor(t_LZ4WithPresetDictCompressionMode *self, PyObject *args);
          static PyObject *t_LZ4WithPresetDictCompressionMode_toString(t_LZ4WithPresetDictCompressionMode *self, PyObject *args);

          static PyMethodDef t_LZ4WithPresetDictCompressionMode__methods_[] = {
            DECLARE_METHOD(t_LZ4WithPresetDictCompressionMode, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_LZ4WithPresetDictCompressionMode, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_LZ4WithPresetDictCompressionMode, newCompressor, METH_VARARGS),
            DECLARE_METHOD(t_LZ4WithPresetDictCompressionMode, newDecompressor, METH_VARARGS),
            DECLARE_METHOD(t_LZ4WithPresetDictCompressionMode, toString, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          static PyType_Slot PY_TYPE_SLOTS(LZ4WithPresetDictCompressionMode)[] = {
            { Py_tp_methods, t_LZ4WithPresetDictCompressionMode__methods_ },
            { Py_tp_init, (void *) t_LZ4WithPresetDictCompressionMode_init_ },
            { 0, NULL }
          };

          static PyType_Def *PY_TYPE_BASES(LZ4WithPresetDictCompressionMode)[] = {
            &PY_TYPE_DEF(::org::apache::lucene::codecs::compressing::CompressionMode),
            NULL
          };

          DEFINE_TYPE(LZ4WithPresetDictCompressionMode, t_LZ4WithPresetDictCompressionMode, LZ4WithPresetDictCompressionMode);

          void t_LZ4WithPresetDictCompressionMode::install(PyObject *module)
          {
            installType(&PY_TYPE(LZ4WithPresetDictCompressionMode), &PY_TYPE_DEF(LZ4WithPresetDictCompressionMode), module, "LZ4WithPresetDictCompressionMode", 0);
          }

          void t_LZ4WithPresetDictCompressionMode::initialize(PyObject *module)
          {
            PyObject_SetAttrString((PyObject *) PY_TYPE(LZ4WithPresetDictCompressionMode), "class_", make_descriptor(LZ4WithPresetDictCompressionMode::initializeClass, 1));
            PyObject_SetAttrString((PyObject *) PY_TYPE(LZ4WithPresetDictCompressionMode), "wrapfn_", make_descriptor(t_LZ4WithPresetDictCompressionMode::wrap_jobject));
            PyObject_SetAttrString((PyObject *) PY_TYPE(LZ4WithPresetDictCompressionMode), "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_LZ4WithPresetDictCompressionMode_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, LZ4WithPresetDictCompressionMode::initializeClass, 1)))
              return NULL;
            return t_LZ4WithPresetDictCompressionMode::wrap_Object(LZ4WithPresetDictCompressionMode(((t_LZ4WithPresetDictCompressionMode *) arg)->object.this$));
          }
          static PyObject *t_LZ4WithPresetDictCompressionMode_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, LZ4WithPresetDictCompressionMode::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_LZ4WithPresetDictCompressionMode_init_(t_LZ4WithPresetDictCompressionMode *self, PyObject *args, PyObject *kwds)
          {
            LZ4WithPresetDictCompressionMode object((jobject) NULL);

            INT_CALL(object = LZ4WithPresetDictCompressionMode());
            self->object = object;

            return 0;
          }

          static PyObject *t_LZ4WithPresetDictCompressionMode_newCompressor(t_LZ4WithPresetDictCompressionMode *self, PyObject *args)
          {
            ::org::apache::lucene::codecs::compressing::Compressor result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.newCompressor());
              return ::org::apache::lucene::codecs::compressing::t_Compressor::wrap_Object(result);
            }

            return callSuper(PY_TYPE(LZ4WithPresetDictCompressionMode), (PyObject *) self, "newCompressor", args, 2);
          }

          static PyObject *t_LZ4WithPresetDictCompressionMode_newDecompressor(t_LZ4WithPresetDictCompressionMode *self, PyObject *args)
          {
            ::org::apache::lucene::codecs::compressing::Decompressor result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.newDecompressor());
              return ::org::apache::lucene::codecs::compressing::t_Decompressor::wrap_Object(result);
            }

            return callSuper(PY_TYPE(LZ4WithPresetDictCompressionMode), (PyObject *) self, "newDecompressor", args, 2);
          }

          static PyObject *t_LZ4WithPresetDictCompressionMode_toString(t_LZ4WithPresetDictCompressionMode *self, PyObject *args)
          {
            ::java::lang::String result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.toString());
              return j2p(result);
            }

            return callSuper(PY_TYPE(LZ4WithPresetDictCompressionMode), (PyObject *) self, "toString", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/ja/dict/ConnectionCosts.h"
#include "java/lang/Class.h"
#include "java/lang/String.h"
#include "org/apache/lucene/analysis/ja/dict/ConnectionCosts.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/analysis/ja/dict/BinaryDictionary$ResourceScheme.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace ja {
          namespace dict {

            ::java::lang::Class *ConnectionCosts::class$ = NULL;
            jmethodID *ConnectionCosts::mids$ = NULL;
            bool ConnectionCosts::live$ = false;
            ::java::lang::String *ConnectionCosts::FILENAME_SUFFIX = NULL;
            ::java::lang::String *ConnectionCosts::HEADER = NULL;
            jint ConnectionCosts::VERSION = (jint) 0;

            jclass ConnectionCosts::initializeClass(bool getOnly)
            {
              if (getOnly)
                return (jclass) (live$ ? class$->this$ : NULL);
              if (class$ == NULL)
              {
                jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/ja/dict/ConnectionCosts");

                mids$ = new jmethodID[max_mid];
                mids$[mid_init$_1548dd30612cf831] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/analysis/ja/dict/BinaryDictionary$ResourceScheme;Ljava/lang/String;)V");
                mids$[mid_get_57a58545eba514db] = env->getMethodID(cls, "get", "(II)I");
                mids$[mid_getInstance_22ff407c8503cf78] = env->getStaticMethodID(cls, "getInstance", "()Lorg/apache/lucene/analysis/ja/dict/ConnectionCosts;");

                class$ = new ::java::lang::Class(cls);
                cls = (jclass) class$->this$;

                FILENAME_SUFFIX = new ::java::lang::String(env->getStaticObjectField(cls, "FILENAME_SUFFIX", "Ljava/lang/String;"));
                HEADER = new ::java::lang::String(env->getStaticObjectField(cls, "HEADER", "Ljava/lang/String;"));
                VERSION = env->getStaticIntField(cls, "VERSION");
                live$ = true;
              }
              return (jclass) class$->this$;
            }

            ConnectionCosts::ConnectionCosts(const ::org::apache::lucene::analysis::ja::dict::BinaryDictionary$ResourceScheme & a0, const ::java::lang::String & a1) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_1548dd30612cf831, a0.this$, a1.this$)) {}

            jint ConnectionCosts::get(jint a0, jint a1) const
            {
              return env->callIntMethod(this$, mids$[mid_get_57a58545eba514db], a0, a1);
            }

            ConnectionCosts ConnectionCosts::getInstance()
            {
              jclass cls = env->getClass(initializeClass);
              return ConnectionCosts(env->callStaticObjectMethod(cls, mids$[mid_getInstance_22ff407c8503cf78]));
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace ja {
          namespace dict {
            static PyObject *t_ConnectionCosts_cast_(PyTypeObject *type, PyObject *arg);
            static PyObject *t_ConnectionCosts_instance_(PyTypeObject *type, PyObject *arg);
            static int t_ConnectionCosts_init_(t_ConnectionCosts *self, PyObject *args, PyObject *kwds);
            static PyObject *t_ConnectionCosts_get(t_ConnectionCosts *self, PyObject *args);
            static PyObject *t_ConnectionCosts_getInstance(PyTypeObject *type);
            static PyObject *t_ConnectionCosts_get__instance(t_ConnectionCosts *self, void *data);
            static PyGetSetDef t_ConnectionCosts__fields_[] = {
              DECLARE_GET_FIELD(t_ConnectionCosts, instance),
              { NULL, NULL, NULL, NULL, NULL }
            };

            static PyMethodDef t_ConnectionCosts__methods_[] = {
              DECLARE_METHOD(t_ConnectionCosts, cast_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_ConnectionCosts, instance_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_ConnectionCosts, get, METH_VARARGS),
              DECLARE_METHOD(t_ConnectionCosts, getInstance, METH_NOARGS | METH_CLASS),
              { NULL, NULL, 0, NULL }
            };

            static PyType_Slot PY_TYPE_SLOTS(ConnectionCosts)[] = {
              { Py_tp_methods, t_ConnectionCosts__methods_ },
              { Py_tp_init, (void *) t_ConnectionCosts_init_ },
              { Py_tp_getset, t_ConnectionCosts__fields_ },
              { 0, NULL }
            };

            static PyType_Def *PY_TYPE_BASES(ConnectionCosts)[] = {
              &PY_TYPE_DEF(::java::lang::Object),
              NULL
            };

            DEFINE_TYPE(ConnectionCosts, t_ConnectionCosts, ConnectionCosts);

            void t_ConnectionCosts::install(PyObject *module)
            {
              installType(&PY_TYPE(ConnectionCosts), &PY_TYPE_DEF(ConnectionCosts), module, "ConnectionCosts", 0);
            }

            void t_ConnectionCosts::initialize(PyObject *module)
            {
              PyObject_SetAttrString((PyObject *) PY_TYPE(ConnectionCosts), "class_", make_descriptor(ConnectionCosts::initializeClass, 1));
              PyObject_SetAttrString((PyObject *) PY_TYPE(ConnectionCosts), "wrapfn_", make_descriptor(t_ConnectionCosts::wrap_jobject));
              PyObject_SetAttrString((PyObject *) PY_TYPE(ConnectionCosts), "boxfn_", make_descriptor(boxObject));
              env->getClass(ConnectionCosts::initializeClass);
              PyObject_SetAttrString((PyObject *) PY_TYPE(ConnectionCosts), "FILENAME_SUFFIX", make_descriptor(j2p(*ConnectionCosts::FILENAME_SUFFIX)));
              PyObject_SetAttrString((PyObject *) PY_TYPE(ConnectionCosts), "HEADER", make_descriptor(j2p(*ConnectionCosts::HEADER)));
              PyObject_SetAttrString((PyObject *) PY_TYPE(ConnectionCosts), "VERSION", make_descriptor(ConnectionCosts::VERSION));
            }

            static PyObject *t_ConnectionCosts_cast_(PyTypeObject *type, PyObject *arg)
            {
              if (!(arg = castCheck(arg, ConnectionCosts::initializeClass, 1)))
                return NULL;
              return t_ConnectionCosts::wrap_Object(ConnectionCosts(((t_ConnectionCosts *) arg)->object.this$));
            }
            static PyObject *t_ConnectionCosts_instance_(PyTypeObject *type, PyObject *arg)
            {
              if (!castCheck(arg, ConnectionCosts::initializeClass, 0))
                Py_RETURN_FALSE;
              Py_RETURN_TRUE;
            }

            static int t_ConnectionCosts_init_(t_ConnectionCosts *self, PyObject *args, PyObject *kwds)
            {
              ::org::apache::lucene::analysis::ja::dict::BinaryDictionary$ResourceScheme a0((jobject) NULL);
              PyTypeObject **p0;
              ::java::lang::String a1((jobject) NULL);
              ConnectionCosts object((jobject) NULL);

              if (!parseArgs(args, "Ks", ::org::apache::lucene::analysis::ja::dict::BinaryDictionary$ResourceScheme::initializeClass, &a0, &p0, ::org::apache::lucene::analysis::ja::dict::t_BinaryDictionary$ResourceScheme::parameters_, &a1))
              {
                INT_CALL(object = ConnectionCosts(a0, a1));
                self->object = object;
              }
              else
              {
                PyErr_SetArgsError((PyObject *) self, "__init__", args);
                return -1;
              }

              return 0;
            }

            static PyObject *t_ConnectionCosts_get(t_ConnectionCosts *self, PyObject *args)
            {
              jint a0;
              jint a1;
              jint result;

              if (!parseArgs(args, "II", &a0, &a1))
              {
                OBJ_CALL(result = self->object.get(a0, a1));
                return PyLong_FromLong((long) result);
              }

              PyErr_SetArgsError((PyObject *) self, "get", args);
              return NULL;
            }

            static PyObject *t_ConnectionCosts_getInstance(PyTypeObject *type)
            {
              ConnectionCosts result((jobject) NULL);
              OBJ_CALL(result = ::org::apache::lucene::analysis::ja::dict::ConnectionCosts::getInstance());
              return t_ConnectionCosts::wrap_Object(result);
            }

            static PyObject *t_ConnectionCosts_get__instance(t_ConnectionCosts *self, void *data)
            {
              ConnectionCosts value((jobject) NULL);
              OBJ_CALL(value = self->object.getInstance());
              return t_ConnectionCosts::wrap_Object(value);
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/vectorhighlight/FieldQuery$QueryPhraseMap.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/search/vectorhighlight/FieldQuery.h"
#include "org/apache/lucene/search/vectorhighlight/FieldTermStack$TermInfo.h"
#include "java/lang/String.h"
#include "java/util/List.h"
#include "org/apache/lucene/search/vectorhighlight/FieldQuery$QueryPhraseMap.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace vectorhighlight {

          ::java::lang::Class *FieldQuery$QueryPhraseMap::class$ = NULL;
          jmethodID *FieldQuery$QueryPhraseMap::mids$ = NULL;
          bool FieldQuery$QueryPhraseMap::live$ = false;

          jclass FieldQuery$QueryPhraseMap::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/search/vectorhighlight/FieldQuery$QueryPhraseMap");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_579f1866c90fb32a] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/search/vectorhighlight/FieldQuery;)V");
              mids$[mid_getBoost_58aec2b64dff50c8] = env->getMethodID(cls, "getBoost", "()F");
              mids$[mid_getSlop_9972fcc56b44e79d] = env->getMethodID(cls, "getSlop", "()I");
              mids$[mid_getTermMap_c95609a3317c4e48] = env->getMethodID(cls, "getTermMap", "(Ljava/lang/String;)Lorg/apache/lucene/search/vectorhighlight/FieldQuery$QueryPhraseMap;");
              mids$[mid_getTermOrPhraseNumber_9972fcc56b44e79d] = env->getMethodID(cls, "getTermOrPhraseNumber", "()I");
              mids$[mid_isTerminal_8454bd5aa23fd11e] = env->getMethodID(cls, "isTerminal", "()Z");
              mids$[mid_isValidTermOrPhrase_d6092cb398c1d339] = env->getMethodID(cls, "isValidTermOrPhrase", "(Ljava/util/List;)Z");
              mids$[mid_searchPhrase_c4084fa49ad9df1e] = env->getMethodID(cls, "searchPhrase", "(Ljava/util/List;)Lorg/apache/lucene/search/vectorhighlight/FieldQuery$QueryPhraseMap;");

              class$ = new ::java::lang::Class(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          FieldQuery$QueryPhraseMap::FieldQuery$QueryPhraseMap(const ::org::apache::lucene::search::vectorhighlight::FieldQuery & a0) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_579f1866c90fb32a, a0.this$)) {}

          jfloat FieldQuery$QueryPhraseMap::getBoost() const
          {
            return env->callFloatMethod(this$, mids$[mid_getBoost_58aec2b64dff50c8]);
          }

          jint FieldQuery$QueryPhraseMap::getSlop() const
          {
            return env->callIntMethod(this$, mids$[mid_getSlop_9972fcc56b44e79d]);
          }

          FieldQuery$QueryPhraseMap FieldQuery$QueryPhraseMap::getTermMap(const ::java::lang::String & a0) const
          {
            return FieldQuery$QueryPhraseMap(env->callObjectMethod(this$, mids$[mid_getTermMap_c95609a3317c4e48], a0.this$));
          }

          jint FieldQuery$QueryPhraseMap::getTermOrPhraseNumber() const
          {
            return env->callIntMethod(this$, mids$[mid_getTermOrPhraseNumber_9972fcc56b44e79d]);
          }

          jboolean FieldQuery$QueryPhraseMap::isTerminal() const
          {
            return env->callBooleanMethod(this$, mids$[mid_isTerminal_8454bd5aa23fd11e]);
          }

          jboolean FieldQuery$QueryPhraseMap::isValidTermOrPhrase(const ::java::util::List & a0) const
          {
            return env->callBooleanMethod(this$, mids$[mid_isValidTermOrPhrase_d6092cb398c1d339], a0.this$);
          }

          FieldQuery$QueryPhraseMap FieldQuery$QueryPhraseMap::searchPhrase(const ::java::util::List & a0) const
          {
            return FieldQuery$QueryPhraseMap(env->callObjectMethod(this$, mids$[mid_searchPhrase_c4084fa49ad9df1e], a0.this$));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace vectorhighlight {
          static PyObject *t_FieldQuery$QueryPhraseMap_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_FieldQuery$QueryPhraseMap_instance_(PyTypeObject *type, PyObject *arg);
          static int t_FieldQuery$QueryPhraseMap_init_(t_FieldQuery$QueryPhraseMap *self, PyObject *args, PyObject *kwds);
          static PyObject *t_FieldQuery$QueryPhraseMap_getBoost(t_FieldQuery$QueryPhraseMap *self);
          static PyObject *t_FieldQuery$QueryPhraseMap_getSlop(t_FieldQuery$QueryPhraseMap *self);
          static PyObject *t_FieldQuery$QueryPhraseMap_getTermMap(t_FieldQuery$QueryPhraseMap *self, PyObject *arg);
          static PyObject *t_FieldQuery$QueryPhraseMap_getTermOrPhraseNumber(t_FieldQuery$QueryPhraseMap *self);
          static PyObject *t_FieldQuery$QueryPhraseMap_isTerminal(t_FieldQuery$QueryPhraseMap *self);
          static PyObject *t_FieldQuery$QueryPhraseMap_isValidTermOrPhrase(t_FieldQuery$QueryPhraseMap *self, PyObject *arg);
          static PyObject *t_FieldQuery$QueryPhraseMap_searchPhrase(t_FieldQuery$QueryPhraseMap *self, PyObject *arg);
          static PyObject *t_FieldQuery$QueryPhraseMap_get__boost(t_FieldQuery$QueryPhraseMap *self, void *data);
          static PyObject *t_FieldQuery$QueryPhraseMap_get__slop(t_FieldQuery$QueryPhraseMap *self, void *data);
          static PyObject *t_FieldQuery$QueryPhraseMap_get__termOrPhraseNumber(t_FieldQuery$QueryPhraseMap *self, void *data);
          static PyObject *t_FieldQuery$QueryPhraseMap_get__terminal(t_FieldQuery$QueryPhraseMap *self, void *data);
          static PyGetSetDef t_FieldQuery$QueryPhraseMap__fields_[] = {
            DECLARE_GET_FIELD(t_FieldQuery$QueryPhraseMap, boost),
            DECLARE_GET_FIELD(t_FieldQuery$QueryPhraseMap, slop),
            DECLARE_GET_FIELD(t_FieldQuery$QueryPhraseMap, termOrPhraseNumber),
            DECLARE_GET_FIELD(t_FieldQuery$QueryPhraseMap, terminal),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_FieldQuery$QueryPhraseMap__methods_[] = {
            DECLARE_METHOD(t_FieldQuery$QueryPhraseMap, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_FieldQuery$QueryPhraseMap, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_FieldQuery$QueryPhraseMap, getBoost, METH_NOARGS),
            DECLARE_METHOD(t_FieldQuery$QueryPhraseMap, getSlop, METH_NOARGS),
            DECLARE_METHOD(t_FieldQuery$QueryPhraseMap, getTermMap, METH_O),
            DECLARE_METHOD(t_FieldQuery$QueryPhraseMap, getTermOrPhraseNumber, METH_NOARGS),
            DECLARE_METHOD(t_FieldQuery$QueryPhraseMap, isTerminal, METH_NOARGS),
            DECLARE_METHOD(t_FieldQuery$QueryPhraseMap, isValidTermOrPhrase, METH_O),
            DECLARE_METHOD(t_FieldQuery$QueryPhraseMap, searchPhrase, METH_O),
            { NULL, NULL, 0, NULL }
          };

          static PyType_Slot PY_TYPE_SLOTS(FieldQuery$QueryPhraseMap)[] = {
            { Py_tp_methods, t_FieldQuery$QueryPhraseMap__methods_ },
            { Py_tp_init, (void *) t_FieldQuery$QueryPhraseMap_init_ },
            { Py_tp_getset, t_FieldQuery$QueryPhraseMap__fields_ },
            { 0, NULL }
          };

          static PyType_Def *PY_TYPE_BASES(FieldQuery$QueryPhraseMap)[] = {
            &PY_TYPE_DEF(::java::lang::Object),
            NULL
          };

          DEFINE_TYPE(FieldQuery$QueryPhraseMap, t_FieldQuery$QueryPhraseMap, FieldQuery$QueryPhraseMap);

          void t_FieldQuery$QueryPhraseMap::install(PyObject *module)
          {
            installType(&PY_TYPE(FieldQuery$QueryPhraseMap), &PY_TYPE_DEF(FieldQuery$QueryPhraseMap), module, "FieldQuery$QueryPhraseMap", 0);
          }

          void t_FieldQuery$QueryPhraseMap::initialize(PyObject *module)
          {
            PyObject_SetAttrString((PyObject *) PY_TYPE(FieldQuery$QueryPhraseMap), "class_", make_descriptor(FieldQuery$QueryPhraseMap::initializeClass, 1));
            PyObject_SetAttrString((PyObject *) PY_TYPE(FieldQuery$QueryPhraseMap), "wrapfn_", make_descriptor(t_FieldQuery$QueryPhraseMap::wrap_jobject));
            PyObject_SetAttrString((PyObject *) PY_TYPE(FieldQuery$QueryPhraseMap), "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_FieldQuery$QueryPhraseMap_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, FieldQuery$QueryPhraseMap::initializeClass, 1)))
              return NULL;
            return t_FieldQuery$QueryPhraseMap::wrap_Object(FieldQuery$QueryPhraseMap(((t_FieldQuery$QueryPhraseMap *) arg)->object.this$));
          }
          static PyObject *t_FieldQuery$QueryPhraseMap_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, FieldQuery$QueryPhraseMap::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_FieldQuery$QueryPhraseMap_init_(t_FieldQuery$QueryPhraseMap *self, PyObject *args, PyObject *kwds)
          {
            ::org::apache::lucene::search::vectorhighlight::FieldQuery a0((jobject) NULL);
            FieldQuery$QueryPhraseMap object((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::search::vectorhighlight::FieldQuery::initializeClass, &a0))
            {
              INT_CALL(object = FieldQuery$QueryPhraseMap(a0));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_FieldQuery$QueryPhraseMap_getBoost(t_FieldQuery$QueryPhraseMap *self)
          {
            jfloat result;
            OBJ_CALL(result = self->object.getBoost());
            return PyFloat_FromDouble((double) result);
          }

          static PyObject *t_FieldQuery$QueryPhraseMap_getSlop(t_FieldQuery$QueryPhraseMap *self)
          {
            jint result;
            OBJ_CALL(result = self->object.getSlop());
            return PyLong_FromLong((long) result);
          }

          static PyObject *t_FieldQuery$QueryPhraseMap_getTermMap(t_FieldQuery$QueryPhraseMap *self, PyObject *arg)
          {
            ::java::lang::String a0((jobject) NULL);
            FieldQuery$QueryPhraseMap result((jobject) NULL);

            if (!parseArg(arg, "s", &a0))
            {
              OBJ_CALL(result = self->object.getTermMap(a0));
              return t_FieldQuery$QueryPhraseMap::wrap_Object(result);
            }

            PyErr_SetArgsError((PyObject *) self, "getTermMap", arg);
            return NULL;
          }

          static PyObject *t_FieldQuery$QueryPhraseMap_getTermOrPhraseNumber(t_FieldQuery$QueryPhraseMap *self)
          {
            jint result;
            OBJ_CALL(result = self->object.getTermOrPhraseNumber());
            return PyLong_FromLong((long) result);
          }

          static PyObject *t_FieldQuery$QueryPhraseMap_isTerminal(t_FieldQuery$QueryPhraseMap *self)
          {
            jboolean result;
            OBJ_CALL(result = self->object.isTerminal());
            Py_RETURN_BOOL(result);
          }

          static PyObject *t_FieldQuery$QueryPhraseMap_isValidTermOrPhrase(t_FieldQuery$QueryPhraseMap *self, PyObject *arg)
          {
            ::java::util::List a0((jobject) NULL);
            PyTypeObject **p0;
            jboolean result;

            if (!parseArg(arg, "K", ::java::util::List::initializeClass, &a0, &p0, ::java::util::t_List::parameters_))
            {
              OBJ_CALL(result = self->object.isValidTermOrPhrase(a0));
              Py_RETURN_BOOL(result);
            }

            PyErr_SetArgsError((PyObject *) self, "isValidTermOrPhrase", arg);
            return NULL;
          }

          static PyObject *t_FieldQuery$QueryPhraseMap_searchPhrase(t_FieldQuery$QueryPhraseMap *self, PyObject *arg)
          {
            ::java::util::List a0((jobject) NULL);
            PyTypeObject **p0;
            FieldQuery$QueryPhraseMap result((jobject) NULL);

            if (!parseArg(arg, "K", ::java::util::List::initializeClass, &a0, &p0, ::java::util::t_List::parameters_))
            {
              OBJ_CALL(result = self->object.searchPhrase(a0));
              return t_FieldQuery$QueryPhraseMap::wrap_Object(result);
            }

            PyErr_SetArgsError((PyObject *) self, "searchPhrase", arg);
            return NULL;
          }

          static PyObject *t_FieldQuery$QueryPhraseMap_get__boost(t_FieldQuery$QueryPhraseMap *self, void *data)
          {
            jfloat value;
            OBJ_CALL(value = self->object.getBoost());
            return PyFloat_FromDouble((double) value);
          }

          static PyObject *t_FieldQuery$QueryPhraseMap_get__slop(t_FieldQuery$QueryPhraseMap *self, void *data)
          {
            jint value;
            OBJ_CALL(value = self->object.getSlop());
            return PyLong_FromLong((long) value);
          }

          static PyObject *t_FieldQuery$QueryPhraseMap_get__termOrPhraseNumber(t_FieldQuery$QueryPhraseMap *self, void *data)
          {
            jint value;
            OBJ_CALL(value = self->object.getTermOrPhraseNumber());
            return PyLong_FromLong((long) value);
          }

          static PyObject *t_FieldQuery$QueryPhraseMap_get__terminal(t_FieldQuery$QueryPhraseMap *self, void *data)
          {
            jboolean value;
            OBJ_CALL(value = self->object.isTerminal());
            Py_RETURN_BOOL(value);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/facet/taxonomy/ParallelTaxonomyArrays.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace facet {
        namespace taxonomy {

          ::java::lang::Class *ParallelTaxonomyArrays::class$ = NULL;
          jmethodID *ParallelTaxonomyArrays::mids$ = NULL;
          bool ParallelTaxonomyArrays::live$ = false;

          jclass ParallelTaxonomyArrays::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/facet/taxonomy/ParallelTaxonomyArrays");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_f2cc1bce94666404] = env->getMethodID(cls, "<init>", "()V");
              mids$[mid_children_d2c45ef07a322466] = env->getMethodID(cls, "children", "()[I");
              mids$[mid_parents_d2c45ef07a322466] = env->getMethodID(cls, "parents", "()[I");
              mids$[mid_siblings_d2c45ef07a322466] = env->getMethodID(cls, "siblings", "()[I");

              class$ = new ::java::lang::Class(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          ParallelTaxonomyArrays::ParallelTaxonomyArrays() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_f2cc1bce94666404)) {}

          JArray< jint > ParallelTaxonomyArrays::children() const
          {
            return JArray< jint >(env->callObjectMethod(this$, mids$[mid_children_d2c45ef07a322466]));
          }

          JArray< jint > ParallelTaxonomyArrays::parents() const
          {
            return JArray< jint >(env->callObjectMethod(this$, mids$[mid_parents_d2c45ef07a322466]));
          }

          JArray< jint > ParallelTaxonomyArrays::siblings() const
          {
            return JArray< jint >(env->callObjectMethod(this$, mids$[mid_siblings_d2c45ef07a322466]));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace facet {
        namespace taxonomy {
          static PyObject *t_ParallelTaxonomyArrays_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_ParallelTaxonomyArrays_instance_(PyTypeObject *type, PyObject *arg);
          static int t_ParallelTaxonomyArrays_init_(t_ParallelTaxonomyArrays *self, PyObject *args, PyObject *kwds);
          static PyObject *t_ParallelTaxonomyArrays_children(t_ParallelTaxonomyArrays *self);
          static PyObject *t_ParallelTaxonomyArrays_parents(t_ParallelTaxonomyArrays *self);
          static PyObject *t_ParallelTaxonomyArrays_siblings(t_ParallelTaxonomyArrays *self);

          static PyMethodDef t_ParallelTaxonomyArrays__methods_[] = {
            DECLARE_METHOD(t_ParallelTaxonomyArrays, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_ParallelTaxonomyArrays, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_ParallelTaxonomyArrays, children, METH_NOARGS),
            DECLARE_METHOD(t_ParallelTaxonomyArrays, parents, METH_NOARGS),
            DECLARE_METHOD(t_ParallelTaxonomyArrays, siblings, METH_NOARGS),
            { NULL, NULL, 0, NULL }
          };

          static PyType_Slot PY_TYPE_SLOTS(ParallelTaxonomyArrays)[] = {
            { Py_tp_methods, t_ParallelTaxonomyArrays__methods_ },
            { Py_tp_init, (void *) t_ParallelTaxonomyArrays_init_ },
            { 0, NULL }
          };

          static PyType_Def *PY_TYPE_BASES(ParallelTaxonomyArrays)[] = {
            &PY_TYPE_DEF(::java::lang::Object),
            NULL
          };

          DEFINE_TYPE(ParallelTaxonomyArrays, t_ParallelTaxonomyArrays, ParallelTaxonomyArrays);

          void t_ParallelTaxonomyArrays::install(PyObject *module)
          {
            installType(&PY_TYPE(ParallelTaxonomyArrays), &PY_TYPE_DEF(ParallelTaxonomyArrays), module, "ParallelTaxonomyArrays", 0);
          }

          void t_ParallelTaxonomyArrays::initialize(PyObject *module)
          {
            PyObject_SetAttrString((PyObject *) PY_TYPE(ParallelTaxonomyArrays), "class_", make_descriptor(ParallelTaxonomyArrays::initializeClass, 1));
            PyObject_SetAttrString((PyObject *) PY_TYPE(ParallelTaxonomyArrays), "wrapfn_", make_descriptor(t_ParallelTaxonomyArrays::wrap_jobject));
            PyObject_SetAttrString((PyObject *) PY_TYPE(ParallelTaxonomyArrays), "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_ParallelTaxonomyArrays_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, ParallelTaxonomyArrays::initializeClass, 1)))
              return NULL;
            return t_ParallelTaxonomyArrays::wrap_Object(ParallelTaxonomyArrays(((t_ParallelTaxonomyArrays *) arg)->object.this$));
          }
          static PyObject *t_ParallelTaxonomyArrays_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, ParallelTaxonomyArrays::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_ParallelTaxonomyArrays_init_(t_ParallelTaxonomyArrays *self, PyObject *args, PyObject *kwds)
          {
            ParallelTaxonomyArrays object((jobject) NULL);

            INT_CALL(object = ParallelTaxonomyArrays());
            self->object = object;

            return 0;
          }

          static PyObject *t_ParallelTaxonomyArrays_children(t_ParallelTaxonomyArrays *self)
          {
            JArray< jint > result((jobject) NULL);
            OBJ_CALL(result = self->object.children());
            return result.wrap();
          }

          static PyObject *t_ParallelTaxonomyArrays_parents(t_ParallelTaxonomyArrays *self)
          {
            JArray< jint > result((jobject) NULL);
            OBJ_CALL(result = self->object.parents());
            return result.wrap();
          }

          static PyObject *t_ParallelTaxonomyArrays_siblings(t_ParallelTaxonomyArrays *self)
          {
            JArray< jint > result((jobject) NULL);
            OBJ_CALL(result = self->object.siblings());
            return result.wrap();
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/PrefixQuery.h"
#include "org/apache/lucene/index/Term.h"
#include "java/lang/Class.h"
#include "java/lang/Object.h"
#include "org/apache/lucene/util/BytesRef.h"
#include "java/lang/String.h"
#include "org/apache/lucene/util/automaton/Automaton.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {

        ::java::lang::Class *PrefixQuery::class$ = NULL;
        jmethodID *PrefixQuery::mids$ = NULL;
        bool PrefixQuery::live$ = false;

        jclass PrefixQuery::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/search/PrefixQuery");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_32784f9c0ee449e6] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/index/Term;)V");
            mids$[mid_equals_8b72f2dcdde6fd1d] = env->getMethodID(cls, "equals", "(Ljava/lang/Object;)Z");
            mids$[mid_getPrefix_5e734526802c58d9] = env->getMethodID(cls, "getPrefix", "()Lorg/apache/lucene/index/Term;");
            mids$[mid_hashCode_9972fcc56b44e79d] = env->getMethodID(cls, "hashCode", "()I");
            mids$[mid_toAutomaton_dc87bd8740894cf4] = env->getStaticMethodID(cls, "toAutomaton", "(Lorg/apache/lucene/util/BytesRef;)Lorg/apache/lucene/util/automaton/Automaton;");
            mids$[mid_toString_9bfa75c9f141b67f] = env->getMethodID(cls, "toString", "(Ljava/lang/String;)Ljava/lang/String;");

            class$ = new ::java::lang::Class(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        PrefixQuery::PrefixQuery(const ::org::apache::lucene::index::Term & a0) : ::org::apache::lucene::search::AutomatonQuery(env->newObject(initializeClass, &mids$, mid_init$_32784f9c0ee449e6, a0.this$)) {}

        jboolean PrefixQuery::equals(const ::java::lang::Object & a0) const
        {
          return env->callBooleanMethod(this$, mids$[mid_equals_8b72f2dcdde6fd1d], a0.this$);
        }

        ::org::apache::lucene::index::Term PrefixQuery::getPrefix() const
        {
          return ::org::apache::lucene::index::Term(env->callObjectMethod(this$, mids$[mid_getPrefix_5e734526802c58d9]));
        }

        jint PrefixQuery::hashCode() const
        {
          return env->callIntMethod(this$, mids$[mid_hashCode_9972fcc56b44e79d]);
        }

        ::org::apache::lucene::util::automaton::Automaton PrefixQuery::toAutomaton(const ::org::apache::lucene::util::BytesRef & a0)
        {
          jclass cls = env->getClass(initializeClass);
          return ::org::apache::lucene::util::automaton::Automaton(env->callStaticObjectMethod(cls, mids$[mid_toAutomaton_dc87bd8740894cf4], a0.this$));
        }

        ::java::lang::String PrefixQuery::toString(const ::java::lang::String & a0) const
        {
          return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_9bfa75c9f141b67f], a0.this$));
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        static PyObject *t_PrefixQuery_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_PrefixQuery_instance_(PyTypeObject *type, PyObject *arg);
        static int t_PrefixQuery_init_(t_PrefixQuery *self, PyObject *args, PyObject *kwds);
        static PyObject *t_PrefixQuery_equals(t_PrefixQuery *self, PyObject *args);
        static PyObject *t_PrefixQuery_getPrefix(t_PrefixQuery *self);
        static PyObject *t_PrefixQuery_hashCode(t_PrefixQuery *self, PyObject *args);
        static PyObject *t_PrefixQuery_toAutomaton(PyTypeObject *type, PyObject *arg);
        static PyObject *t_PrefixQuery_toString(t_PrefixQuery *self, PyObject *args);
        static PyObject *t_PrefixQuery_get__prefix(t_PrefixQuery *self, void *data);
        static PyGetSetDef t_PrefixQuery__fields_[] = {
          DECLARE_GET_FIELD(t_PrefixQuery, prefix),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_PrefixQuery__methods_[] = {
          DECLARE_METHOD(t_PrefixQuery, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_PrefixQuery, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_PrefixQuery, equals, METH_VARARGS),
          DECLARE_METHOD(t_PrefixQuery, getPrefix, METH_NOARGS),
          DECLARE_METHOD(t_PrefixQuery, hashCode, METH_VARARGS),
          DECLARE_METHOD(t_PrefixQuery, toAutomaton, METH_O | METH_CLASS),
          DECLARE_METHOD(t_PrefixQuery, toString, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        static PyType_Slot PY_TYPE_SLOTS(PrefixQuery)[] = {
          { Py_tp_methods, t_PrefixQuery__methods_ },
          { Py_tp_init, (void *) t_PrefixQuery_init_ },
          { Py_tp_getset, t_PrefixQuery__fields_ },
          { 0, NULL }
        };

        static PyType_Def *PY_TYPE_BASES(PrefixQuery)[] = {
          &PY_TYPE_DEF(::org::apache::lucene::search::AutomatonQuery),
          NULL
        };

        DEFINE_TYPE(PrefixQuery, t_PrefixQuery, PrefixQuery);

        void t_PrefixQuery::install(PyObject *module)
        {
          installType(&PY_TYPE(PrefixQuery), &PY_TYPE_DEF(PrefixQuery), module, "PrefixQuery", 0);
        }

        void t_PrefixQuery::initialize(PyObject *module)
        {
          PyObject_SetAttrString((PyObject *) PY_TYPE(PrefixQuery), "class_", make_descriptor(PrefixQuery::initializeClass, 1));
          PyObject_SetAttrString((PyObject *) PY_TYPE(PrefixQuery), "wrapfn_", make_descriptor(t_PrefixQuery::wrap_jobject));
          PyObject_SetAttrString((PyObject *) PY_TYPE(PrefixQuery), "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_PrefixQuery_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, PrefixQuery::initializeClass, 1)))
            return NULL;
          return t_PrefixQuery::wrap_Object(PrefixQuery(((t_PrefixQuery *) arg)->object.this$));
        }
        static PyObject *t_PrefixQuery_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, PrefixQuery::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_PrefixQuery_init_(t_PrefixQuery *self, PyObject *args, PyObject *kwds)
        {
          ::org::apache::lucene::index::Term a0((jobject) NULL);
          PrefixQuery object((jobject) NULL);

          if (!parseArgs(args, "k", ::org::apache::lucene::index::Term::initializeClass, &a0))
          {
            INT_CALL(object = PrefixQuery(a0));
            self->object = object;
          }
          else
          {
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }

        static PyObject *t_PrefixQuery_equals(t_PrefixQuery *self, PyObject *args)
        {
          ::java::lang::Object a0((jobject) NULL);
          jboolean result;

          if (!parseArgs(args, "o", &a0))
          {
            OBJ_CALL(result = self->object.equals(a0));
            Py_RETURN_BOOL(result);
          }

          return callSuper(PY_TYPE(PrefixQuery), (PyObject *) self, "equals", args, 2);
        }

        static PyObject *t_PrefixQuery_getPrefix(t_PrefixQuery *self)
        {
          ::org::apache::lucene::index::Term result((jobject) NULL);
          OBJ_CALL(result = self->object.getPrefix());
          return ::org::apache::lucene::index::t_Term::wrap_Object(result);
        }

        static PyObject *t_PrefixQuery_hashCode(t_PrefixQuery *self, PyObject *args)
        {
          jint result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.hashCode());
            return PyLong_FromLong((long) result);
          }

          return callSuper(PY_TYPE(PrefixQuery), (PyObject *) self, "hashCode", args, 2);
        }

        static PyObject *t_PrefixQuery_toAutomaton(PyTypeObject *type, PyObject *arg)
        {
          ::org::apache::lucene::util::BytesRef a0((jobject) NULL);
          ::org::apache::lucene::util::automaton::Automaton result((jobject) NULL);

          if (!parseArg(arg, "k", ::org::apache::lucene::util::BytesRef::initializeClass, &a0))
          {
            OBJ_CALL(result = ::org::apache::lucene::search::PrefixQuery::toAutomaton(a0));
            return ::org::apache::lucene::util::automaton::t_Automaton::wrap_Object(result);
          }

          PyErr_SetArgsError(type, "toAutomaton", arg);
          return NULL;
        }

        static PyObject *t_PrefixQuery_toString(t_PrefixQuery *self, PyObject *args)
        {
          ::java::lang::String a0((jobject) NULL);
          ::java::lang::String result((jobject) NULL);

          if (!parseArgs(args, "s", &a0))
          {
            OBJ_CALL(result = self->object.toString(a0));
            return j2p(result);
          }

          return callSuper(PY_TYPE(PrefixQuery), (PyObject *) self, "toString", args, 2);
        }

        static PyObject *t_PrefixQuery_get__prefix(t_PrefixQuery *self, void *data)
        {
          ::org::apache::lucene::index::Term value((jobject) NULL);
          OBJ_CALL(value = self->object.getPrefix());
          return ::org::apache::lucene::index::t_Term::wrap_Object(value);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/SortedNumericSortField.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/search/SortField$Type.h"
#include "java/lang/Object.h"
#include "org/apache/lucene/search/FieldComparator.h"
#include "org/apache/lucene/index/IndexSorter.h"
#include "java/lang/String.h"
#include "org/apache/lucene/search/SortedNumericSelector$Type.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {

        ::java::lang::Class *SortedNumericSortField::class$ = NULL;
        jmethodID *SortedNumericSortField::mids$ = NULL;
        bool SortedNumericSortField::live$ = false;

        jclass SortedNumericSortField::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/search/SortedNumericSortField");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_6811f13f8ecb0aa6] = env->getMethodID(cls, "<init>", "(Ljava/lang/String;Lorg/apache/lucene/search/SortField$Type;)V");
            mids$[mid_init$_d088f299e352f332] = env->getMethodID(cls, "<init>", "(Ljava/lang/String;Lorg/apache/lucene/search/SortField$Type;Z)V");
            mids$[mid_init$_83f927d94de8700f] = env->getMethodID(cls, "<init>", "(Ljava/lang/String;Lorg/apache/lucene/search/SortField$Type;ZLorg/apache/lucene/search/SortedNumericSelector$Type;)V");
            mids$[mid_equals_8b72f2dcdde6fd1d] = env->getMethodID(cls, "equals", "(Ljava/lang/Object;)Z");
            mids$[mid_getComparator_d36dcbe0af6d9ef2] = env->getMethodID(cls, "getComparator", "(II)Lorg/apache/lucene/search/FieldComparator;");
            mids$[mid_getIndexSorter_ee706dd57fd4883b] = env->getMethodID(cls, "getIndexSorter", "()Lorg/apache/lucene/index/IndexSorter;");
            mids$[mid_getNumericType_9e07327298655963] = env->getMethodID(cls, "getNumericType", "()Lorg/apache/lucene/search/SortField$Type;");
            mids$[mid_getSelector_74ae33aab3d05270] = env->getMethodID(cls, "getSelector", "()Lorg/apache/lucene/search/SortedNumericSelector$Type;");
            mids$[mid_hashCode_9972fcc56b44e79d] = env->getMethodID(cls, "hashCode", "()I");
            mids$[mid_setMissingValue_d20f626183f72f7d] = env->getMethodID(cls, "setMissingValue", "(Ljava/lang/Object;)V");
            mids$[mid_toString_db9b55ba01e03e4b] = env->getMethodID(cls, "toString", "()Ljava/lang/String;");

            class$ = new ::java::lang::Class(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        SortedNumericSortField::SortedNumericSortField(const ::java::lang::String & a0, const ::org::apache::lucene::search::SortField$Type & a1) : ::org::apache::lucene::search::SortField(env->newObject(initializeClass, &mids$, mid_init$_6811f13f8ecb0aa6, a0.this$, a1.this$)) {}

        SortedNumericSortField::SortedNumericSortField(const ::java::lang::String & a0, const ::org::apache::lucene::search::SortField$Type & a1, jboolean a2) : ::org::apache::lucene::search::SortField(env->newObject(initializeClass, &mids$, mid_init$_d088f299e352f332, a0.this$, a1.this$, a2)) {}

        SortedNumericSortField::SortedNumericSortField(const ::java::lang::String & a0, const ::org::apache::lucene::search::SortField$Type & a1, jboolean a2, const ::org::apache::lucene::search::SortedNumericSelector$Type & a3) : ::org::apache::lucene::search::SortField(env->newObject(initializeClass, &mids$, mid_init$_83f927d94de8700f, a0.this$, a1.this$, a2, a3.this$)) {}

        jboolean SortedNumericSortField::equals(const ::java::lang::Object & a0) const
        {
          return env->callBooleanMethod(this$, mids$[mid_equals_8b72f2dcdde6fd1d], a0.this$);
        }

        ::org::apache::lucene::search::FieldComparator SortedNumericSortField::getComparator(jint a0, jint a1) const
        {
          return ::org::apache::lucene::search::FieldComparator(env->callObjectMethod(this$, mids$[mid_getComparator_d36dcbe0af6d9ef2], a0, a1));
        }

        ::org::apache::lucene::index::IndexSorter SortedNumericSortField::getIndexSorter() const
        {
          return ::org::apache::lucene::index::IndexSorter(env->callObjectMethod(this$, mids$[mid_getIndexSorter_ee706dd57fd4883b]));
        }

        ::org::apache::lucene::search::SortField$Type SortedNumericSortField::getNumericType() const
        {
          return ::org::apache::lucene::search::SortField$Type(env->callObjectMethod(this$, mids$[mid_getNumericType_9e07327298655963]));
        }

        ::org::apache::lucene::search::SortedNumericSelector$Type SortedNumericSortField::getSelector() const
        {
          return ::org::apache::lucene::search::SortedNumericSelector$Type(env->callObjectMethod(this$, mids$[mid_getSelector_74ae33aab3d05270]));
        }

        jint SortedNumericSortField::hashCode() const
        {
          return env->callIntMethod(this$, mids$[mid_hashCode_9972fcc56b44e79d]);
        }

        void SortedNumericSortField::setMissingValue(const ::java::lang::Object & a0) const
        {
          env->callVoidMethod(this$, mids$[mid_setMissingValue_d20f626183f72f7d], a0.this$);
        }

        ::java::lang::String SortedNumericSortField::toString() const
        {
          return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_db9b55ba01e03e4b]));
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"
#include "org/apache/lucene/search/SortedNumericSortField$Provider.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        static PyObject *t_SortedNumericSortField_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_SortedNumericSortField_instance_(PyTypeObject *type, PyObject *arg);
        static int t_SortedNumericSortField_init_(t_SortedNumericSortField *self, PyObject *args, PyObject *kwds);
        static PyObject *t_SortedNumericSortField_equals(t_SortedNumericSortField *self, PyObject *args);
        static PyObject *t_SortedNumericSortField_getComparator(t_SortedNumericSortField *self, PyObject *args);
        static PyObject *t_SortedNumericSortField_getIndexSorter(t_SortedNumericSortField *self, PyObject *args);
        static PyObject *t_SortedNumericSortField_getNumericType(t_SortedNumericSortField *self);
        static PyObject *t_SortedNumericSortField_getSelector(t_SortedNumericSortField *self);
        static PyObject *t_SortedNumericSortField_hashCode(t_SortedNumericSortField *self, PyObject *args);
        static PyObject *t_SortedNumericSortField_setMissingValue(t_SortedNumericSortField *self, PyObject *args);
        static PyObject *t_SortedNumericSortField_toString(t_SortedNumericSortField *self, PyObject *args);
        static PyObject *t_SortedNumericSortField_get__indexSorter(t_SortedNumericSortField *self, void *data);
        static int t_SortedNumericSortField_set__missingValue(t_SortedNumericSortField *self, PyObject *arg, void *data);
        static PyObject *t_SortedNumericSortField_get__numericType(t_SortedNumericSortField *self, void *data);
        static PyObject *t_SortedNumericSortField_get__selector(t_SortedNumericSortField *self, void *data);
        static PyGetSetDef t_SortedNumericSortField__fields_[] = {
          DECLARE_GET_FIELD(t_SortedNumericSortField, indexSorter),
          DECLARE_SET_FIELD(t_SortedNumericSortField, missingValue),
          DECLARE_GET_FIELD(t_SortedNumericSortField, numericType),
          DECLARE_GET_FIELD(t_SortedNumericSortField, selector),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_SortedNumericSortField__methods_[] = {
          DECLARE_METHOD(t_SortedNumericSortField, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_SortedNumericSortField, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_SortedNumericSortField, equals, METH_VARARGS),
          DECLARE_METHOD(t_SortedNumericSortField, getComparator, METH_VARARGS),
          DECLARE_METHOD(t_SortedNumericSortField, getIndexSorter, METH_VARARGS),
          DECLARE_METHOD(t_SortedNumericSortField, getNumericType, METH_NOARGS),
          DECLARE_METHOD(t_SortedNumericSortField, getSelector, METH_NOARGS),
          DECLARE_METHOD(t_SortedNumericSortField, hashCode, METH_VARARGS),
          DECLARE_METHOD(t_SortedNumericSortField, setMissingValue, METH_VARARGS),
          DECLARE_METHOD(t_SortedNumericSortField, toString, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        static PyType_Slot PY_TYPE_SLOTS(SortedNumericSortField)[] = {
          { Py_tp_methods, t_SortedNumericSortField__methods_ },
          { Py_tp_init, (void *) t_SortedNumericSortField_init_ },
          { Py_tp_getset, t_SortedNumericSortField__fields_ },
          { 0, NULL }
        };

        static PyType_Def *PY_TYPE_BASES(SortedNumericSortField)[] = {
          &PY_TYPE_DEF(::org::apache::lucene::search::SortField),
          NULL
        };

        DEFINE_TYPE(SortedNumericSortField, t_SortedNumericSortField, SortedNumericSortField);

        void t_SortedNumericSortField::install(PyObject *module)
        {
          installType(&PY_TYPE(SortedNumericSortField), &PY_TYPE_DEF(SortedNumericSortField), module, "SortedNumericSortField", 0);
          PyObject_SetAttrString((PyObject *) PY_TYPE(SortedNumericSortField), "Provider", make_descriptor(&PY_TYPE_DEF(SortedNumericSortField$Provider)));
        }

        void t_SortedNumericSortField::initialize(PyObject *module)
        {
          PyObject_SetAttrString((PyObject *) PY_TYPE(SortedNumericSortField), "class_", make_descriptor(SortedNumericSortField::initializeClass, 1));
          PyObject_SetAttrString((PyObject *) PY_TYPE(SortedNumericSortField), "wrapfn_", make_descriptor(t_SortedNumericSortField::wrap_jobject));
          PyObject_SetAttrString((PyObject *) PY_TYPE(SortedNumericSortField), "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_SortedNumericSortField_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, SortedNumericSortField::initializeClass, 1)))
            return NULL;
          return t_SortedNumericSortField::wrap_Object(SortedNumericSortField(((t_SortedNumericSortField *) arg)->object.this$));
        }
        static PyObject *t_SortedNumericSortField_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, SortedNumericSortField::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_SortedNumericSortField_init_(t_SortedNumericSortField *self, PyObject *args, PyObject *kwds)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 2:
            {
              ::java::lang::String a0((jobject) NULL);
              ::org::apache::lucene::search::SortField$Type a1((jobject) NULL);
              PyTypeObject **p1;
              SortedNumericSortField object((jobject) NULL);

              if (!parseArgs(args, "sK", ::org::apache::lucene::search::SortField$Type::initializeClass, &a0, &a1, &p1, ::org::apache::lucene::search::t_SortField$Type::parameters_))
              {
                INT_CALL(object = SortedNumericSortField(a0, a1));
                self->object = object;
                break;
              }
            }
            goto err;
           case 3:
            {
              ::java::lang::String a0((jobject) NULL);
              ::org::apache::lucene::search::SortField$Type a1((jobject) NULL);
              PyTypeObject **p1;
              jboolean a2;
              SortedNumericSortField object((jobject) NULL);

              if (!parseArgs(args, "sKZ", ::org::apache::lucene::search::SortField$Type::initializeClass, &a0, &a1, &p1, ::org::apache::lucene::search::t_SortField$Type::parameters_, &a2))
              {
                INT_CALL(object = SortedNumericSortField(a0, a1, a2));
                self->object = object;
                break;
              }
            }
            goto err;
           case 4:
            {
              ::java::lang::String a0((jobject) NULL);
              ::org::apache::lucene::search::SortField$Type a1((jobject) NULL);
              PyTypeObject **p1;
              jboolean a2;
              ::org::apache::lucene::search::SortedNumericSelector$Type a3((jobject) NULL);
              PyTypeObject **p3;
              SortedNumericSortField object((jobject) NULL);

              if (!parseArgs(args, "sKZK", ::org::apache::lucene::search::SortField$Type::initializeClass, ::org::apache::lucene::search::SortedNumericSelector$Type::initializeClass, &a0, &a1, &p1, ::org::apache::lucene::search::t_SortField$Type::parameters_, &a2, &a3, &p3, ::org::apache::lucene::search::t_SortedNumericSelector$Type::parameters_))
              {
                INT_CALL(object = SortedNumericSortField(a0, a1, a2, a3));
                self->object = object;
                break;
              }
            }
           default:
           err:
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }

        static PyObject *t_SortedNumericSortField_equals(t_SortedNumericSortField *self, PyObject *args)
        {
          ::java::lang::Object a0((jobject) NULL);
          jboolean result;

          if (!parseArgs(args, "o", &a0))
          {
            OBJ_CALL(result = self->object.equals(a0));
            Py_RETURN_BOOL(result);
          }

          return callSuper(PY_TYPE(SortedNumericSortField), (PyObject *) self, "equals", args, 2);
        }

        static PyObject *t_SortedNumericSortField_getComparator(t_SortedNumericSortField *self, PyObject *args)
        {
          jint a0;
          jint a1;
          ::org::apache::lucene::search::FieldComparator result((jobject) NULL);

          if (!parseArgs(args, "II", &a0, &a1))
          {
            OBJ_CALL(result = self->object.getComparator(a0, a1));
            return ::org::apache::lucene::search::t_FieldComparator::wrap_Object(result);
          }

          return callSuper(PY_TYPE(SortedNumericSortField), (PyObject *) self, "getComparator", args, 2);
        }

        static PyObject *t_SortedNumericSortField_getIndexSorter(t_SortedNumericSortField *self, PyObject *args)
        {
          ::org::apache::lucene::index::IndexSorter result((jobject) NULL);

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.getIndexSorter());
            return ::org::apache::lucene::index::t_IndexSorter::wrap_Object(result);
          }

          return callSuper(PY_TYPE(SortedNumericSortField), (PyObject *) self, "getIndexSorter", args, 2);
        }

        static PyObject *t_SortedNumericSortField_getNumericType(t_SortedNumericSortField *self)
        {
          ::org::apache::lucene::search::SortField$Type result((jobject) NULL);
          OBJ_CALL(result = self->object.getNumericType());
          return ::org::apache::lucene::search::t_SortField$Type::wrap_Object(result);
        }

        static PyObject *t_SortedNumericSortField_getSelector(t_SortedNumericSortField *self)
        {
          ::org::apache::lucene::search::SortedNumericSelector$Type result((jobject) NULL);
          OBJ_CALL(result = self->object.getSelector());
          return ::org::apache::lucene::search::t_SortedNumericSelector$Type::wrap_Object(result);
        }

        static PyObject *t_SortedNumericSortField_hashCode(t_SortedNumericSortField *self, PyObject *args)
        {
          jint result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.hashCode());
            return PyLong_FromLong((long) result);
          }

          return callSuper(PY_TYPE(SortedNumericSortField), (PyObject *) self, "hashCode", args, 2);
        }

        static PyObject *t_SortedNumericSortField_setMissingValue(t_SortedNumericSortField *self, PyObject *args)
        {
          ::java::lang::Object a0((jobject) NULL);

          if (!parseArgs(args, "o", &a0))
          {
            OBJ_CALL(self->object.setMissingValue(a0));
            Py_RETURN_NONE;
          }

          return callSuper(PY_TYPE(SortedNumericSortField), (PyObject *) self, "setMissingValue", args, 2);
        }

        static PyObject *t_SortedNumericSortField_toString(t_SortedNumericSortField *self, PyObject *args)
        {
          ::java::lang::String result((jobject) NULL);

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.toString());
            return j2p(result);
          }

          return callSuper(PY_TYPE(SortedNumericSortField), (PyObject *) self, "toString", args, 2);
        }

        static PyObject *t_SortedNumericSortField_get__indexSorter(t_SortedNumericSortField *self, void *data)
        {
          ::org::apache::lucene::index::IndexSorter value((jobject) NULL);
          OBJ_CALL(value = self->object.getIndexSorter());
          return ::org::apache::lucene::index::t_IndexSorter::wrap_Object(value);
        }

        static int t_SortedNumericSortField_set__missingValue(t_SortedNumericSortField *self, PyObject *arg, void *data)
        {
          {
            ::java::lang::Object value((jobject) NULL);
            if (!parseArg(arg, "o", &value))
            {
              INT_CALL(self->object.setMissingValue(value));
              return 0;
            }
          }
          PyErr_SetArgsError((PyObject *) self, "missingValue", arg);
          return -1;
        }

        static PyObject *t_SortedNumericSortField_get__numericType(t_SortedNumericSortField *self, void *data)
        {
          ::org::apache::lucene::search::SortField$Type value((jobject) NULL);
          OBJ_CALL(value = self->object.getNumericType());
          return ::org::apache::lucene::search::t_SortField$Type::wrap_Object(value);
        }

        static PyObject *t_SortedNumericSortField_get__selector(t_SortedNumericSortField *self, void *data)
        {
          ::org::apache::lucene::search::SortedNumericSelector$Type value((jobject) NULL);
          OBJ_CALL(value = self->object.getSelector());
          return ::org::apache::lucene::search::t_SortedNumericSelector$Type::wrap_Object(value);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queries/function/valuesource/SimpleFloatFunction.h"
#include "java/util/Map.h"
#include "org/apache/lucene/index/LeafReaderContext.h"
#include "org/apache/lucene/queries/function/FunctionValues.h"
#include "java/lang/Class.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/queries/function/ValueSource.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queries {
        namespace function {
          namespace valuesource {

            ::java::lang::Class *SimpleFloatFunction::class$ = NULL;
            jmethodID *SimpleFloatFunction::mids$ = NULL;
            bool SimpleFloatFunction::live$ = false;

            jclass SimpleFloatFunction::initializeClass(bool getOnly)
            {
              if (getOnly)
                return (jclass) (live$ ? class$->this$ : NULL);
              if (class$ == NULL)
              {
                jclass cls = (jclass) env->findClass("org/apache/lucene/queries/function/valuesource/SimpleFloatFunction");

                mids$ = new jmethodID[max_mid];
                mids$[mid_init$_31c80a0040f07e19] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/queries/function/ValueSource;)V");
                mids$[mid_getValues_ede8eccd3e97f32c] = env->getMethodID(cls, "getValues", "(Ljava/util/Map;Lorg/apache/lucene/index/LeafReaderContext;)Lorg/apache/lucene/queries/function/FunctionValues;");
                mids$[mid_func_97dc69d56554f39e] = env->getMethodID(cls, "func", "(ILorg/apache/lucene/queries/function/FunctionValues;)F");

                class$ = new ::java::lang::Class(cls);
                live$ = true;
              }
              return (jclass) class$->this$;
            }

            SimpleFloatFunction::SimpleFloatFunction(const ::org::apache::lucene::queries::function::ValueSource & a0) : ::org::apache::lucene::queries::function::valuesource::SingleFunction(env->newObject(initializeClass, &mids$, mid_init$_31c80a0040f07e19, a0.this$)) {}

            ::org::apache::lucene::queries::function::FunctionValues SimpleFloatFunction::getValues(const ::java::util::Map & a0, const ::org::apache::lucene::index::LeafReaderContext & a1) const
            {
              return ::org::apache::lucene::queries::function::FunctionValues(env->callObjectMethod(this$, mids$[mid_getValues_ede8eccd3e97f32c], a0.this$, a1.this$));
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queries {
        namespace function {
          namespace valuesource {
            static PyObject *t_SimpleFloatFunction_cast_(PyTypeObject *type, PyObject *arg);
            static PyObject *t_SimpleFloatFunction_instance_(PyTypeObject *type, PyObject *arg);
            static int t_SimpleFloatFunction_init_(t_SimpleFloatFunction *self, PyObject *args, PyObject *kwds);
            static PyObject *t_SimpleFloatFunction_getValues(t_SimpleFloatFunction *self, PyObject *args);

            static PyMethodDef t_SimpleFloatFunction__methods_[] = {
              DECLARE_METHOD(t_SimpleFloatFunction, cast_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_SimpleFloatFunction, instance_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_SimpleFloatFunction, getValues, METH_VARARGS),
              { NULL, NULL, 0, NULL }
            };

            static PyType_Slot PY_TYPE_SLOTS(SimpleFloatFunction)[] = {
              { Py_tp_methods, t_SimpleFloatFunction__methods_ },
              { Py_tp_init, (void *) t_SimpleFloatFunction_init_ },
              { 0, NULL }
            };

            static PyType_Def *PY_TYPE_BASES(SimpleFloatFunction)[] = {
              &PY_TYPE_DEF(::org::apache::lucene::queries::function::valuesource::SingleFunction),
              NULL
            };

            DEFINE_TYPE(SimpleFloatFunction, t_SimpleFloatFunction, SimpleFloatFunction);

            void t_SimpleFloatFunction::install(PyObject *module)
            {
              installType(&PY_TYPE(SimpleFloatFunction), &PY_TYPE_DEF(SimpleFloatFunction), module, "SimpleFloatFunction", 0);
            }

            void t_SimpleFloatFunction::initialize(PyObject *module)
            {
              PyObject_SetAttrString((PyObject *) PY_TYPE(SimpleFloatFunction), "class_", make_descriptor(SimpleFloatFunction::initializeClass, 1));
              PyObject_SetAttrString((PyObject *) PY_TYPE(SimpleFloatFunction), "wrapfn_", make_descriptor(t_SimpleFloatFunction::wrap_jobject));
              PyObject_SetAttrString((PyObject *) PY_TYPE(SimpleFloatFunction), "boxfn_", make_descriptor(boxObject));
            }

            static PyObject *t_SimpleFloatFunction_cast_(PyTypeObject *type, PyObject *arg)
            {
              if (!(arg = castCheck(arg, SimpleFloatFunction::initializeClass, 1)))
                return NULL;
              return t_SimpleFloatFunction::wrap_Object(SimpleFloatFunction(((t_SimpleFloatFunction *) arg)->object.this$));
            }
            static PyObject *t_SimpleFloatFunction_instance_(PyTypeObject *type, PyObject *arg)
            {
              if (!castCheck(arg, SimpleFloatFunction::initializeClass, 0))
                Py_RETURN_FALSE;
              Py_RETURN_TRUE;
            }

            static int t_SimpleFloatFunction_init_(t_SimpleFloatFunction *self, PyObject *args, PyObject *kwds)
            {
              ::org::apache::lucene::queries::function::ValueSource a0((jobject) NULL);
              SimpleFloatFunction object((jobject) NULL);

              if (!parseArgs(args, "k", ::org::apache::lucene::queries::function::ValueSource::initializeClass, &a0))
              {
                INT_CALL(object = SimpleFloatFunction(a0));
                self->object = object;
              }
              else
              {
                PyErr_SetArgsError((PyObject *) self, "__init__", args);
                return -1;
              }

              return 0;
            }

            static PyObject *t_SimpleFloatFunction_getValues(t_SimpleFloatFunction *self, PyObject *args)
            {
              ::java::util::Map a0((jobject) NULL);
              PyTypeObject **p0;
              ::org::apache::lucene::index::LeafReaderContext a1((jobject) NULL);
              ::org::apache::lucene::queries::function::FunctionValues result((jobject) NULL);

              if (!parseArgs(args, "Kk", ::java::util::Map::initializeClass, ::org::apache::lucene::index::LeafReaderContext::initializeClass, &a0, &p0, ::java::util::t_Map::parameters_, &a1))
              {
                OBJ_CALL(result = self->object.getValues(a0, a1));
                return ::org::apache::lucene::queries::function::t_FunctionValues::wrap_Object(result);
              }

              return callSuper(PY_TYPE(SimpleFloatFunction), (PyObject *) self, "getValues", args, 2);
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/facet/taxonomy/directory/DirectoryTaxonomyWriter$OrdinalMap.h"
#include "java/io/IOException.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace facet {
        namespace taxonomy {
          namespace directory {

            ::java::lang::Class *DirectoryTaxonomyWriter$OrdinalMap::class$ = NULL;
            jmethodID *DirectoryTaxonomyWriter$OrdinalMap::mids$ = NULL;
            bool DirectoryTaxonomyWriter$OrdinalMap::live$ = false;

            jclass DirectoryTaxonomyWriter$OrdinalMap::initializeClass(bool getOnly)
            {
              if (getOnly)
                return (jclass) (live$ ? class$->this$ : NULL);
              if (class$ == NULL)
              {
                jclass cls = (jclass) env->findClass("org/apache/lucene/facet/taxonomy/directory/DirectoryTaxonomyWriter$OrdinalMap");

                mids$ = new jmethodID[max_mid];
                mids$[mid_addDone_f2cc1bce94666404] = env->getMethodID(cls, "addDone", "()V");
                mids$[mid_addMapping_438c62480c481c65] = env->getMethodID(cls, "addMapping", "(II)V");
                mids$[mid_getMap_d2c45ef07a322466] = env->getMethodID(cls, "getMap", "()[I");
                mids$[mid_setSize_040c4cd0390c5aff] = env->getMethodID(cls, "setSize", "(I)V");

                class$ = new ::java::lang::Class(cls);
                live$ = true;
              }
              return (jclass) class$->this$;
            }

            void DirectoryTaxonomyWriter$OrdinalMap::addDone() const
            {
              env->callVoidMethod(this$, mids$[mid_addDone_f2cc1bce94666404]);
            }

            void DirectoryTaxonomyWriter$OrdinalMap::addMapping(jint a0, jint a1) const
            {
              env->callVoidMethod(this$, mids$[mid_addMapping_438c62480c481c65], a0, a1);
            }

            JArray< jint > DirectoryTaxonomyWriter$OrdinalMap::getMap() const
            {
              return JArray< jint >(env->callObjectMethod(this$, mids$[mid_getMap_d2c45ef07a322466]));
            }

            void DirectoryTaxonomyWriter$OrdinalMap::setSize(jint a0) const
            {
              env->callVoidMethod(this$, mids$[mid_setSize_040c4cd0390c5aff], a0);
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace facet {
        namespace taxonomy {
          namespace directory {
            static PyObject *t_DirectoryTaxonomyWriter$OrdinalMap_cast_(PyTypeObject *type, PyObject *arg);
            static PyObject *t_DirectoryTaxonomyWriter$OrdinalMap_instance_(PyTypeObject *type, PyObject *arg);
            static PyObject *t_DirectoryTaxonomyWriter$OrdinalMap_addDone(t_DirectoryTaxonomyWriter$OrdinalMap *self);
            static PyObject *t_DirectoryTaxonomyWriter$OrdinalMap_addMapping(t_DirectoryTaxonomyWriter$OrdinalMap *self, PyObject *args);
            static PyObject *t_DirectoryTaxonomyWriter$OrdinalMap_getMap(t_DirectoryTaxonomyWriter$OrdinalMap *self);
            static PyObject *t_DirectoryTaxonomyWriter$OrdinalMap_setSize(t_DirectoryTaxonomyWriter$OrdinalMap *self, PyObject *arg);
            static PyObject *t_DirectoryTaxonomyWriter$OrdinalMap_get__map(t_DirectoryTaxonomyWriter$OrdinalMap *self, void *data);
            static int t_DirectoryTaxonomyWriter$OrdinalMap_set__size(t_DirectoryTaxonomyWriter$OrdinalMap *self, PyObject *arg, void *data);
            static PyGetSetDef t_DirectoryTaxonomyWriter$OrdinalMap__fields_[] = {
              DECLARE_GET_FIELD(t_DirectoryTaxonomyWriter$OrdinalMap, map),
              DECLARE_SET_FIELD(t_DirectoryTaxonomyWriter$OrdinalMap, size),
              { NULL, NULL, NULL, NULL, NULL }
            };

            static PyMethodDef t_DirectoryTaxonomyWriter$OrdinalMap__methods_[] = {
              DECLARE_METHOD(t_DirectoryTaxonomyWriter$OrdinalMap, cast_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_DirectoryTaxonomyWriter$OrdinalMap, instance_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_DirectoryTaxonomyWriter$OrdinalMap, addDone, METH_NOARGS),
              DECLARE_METHOD(t_DirectoryTaxonomyWriter$OrdinalMap, addMapping, METH_VARARGS),
              DECLARE_METHOD(t_DirectoryTaxonomyWriter$OrdinalMap, getMap, METH_NOARGS),
              DECLARE_METHOD(t_DirectoryTaxonomyWriter$OrdinalMap, setSize, METH_O),
              { NULL, NULL, 0, NULL }
            };

            static PyType_Slot PY_TYPE_SLOTS(DirectoryTaxonomyWriter$OrdinalMap)[] = {
              { Py_tp_methods, t_DirectoryTaxonomyWriter$OrdinalMap__methods_ },
              { Py_tp_init, (void *) abstract_init },
              { Py_tp_getset, t_DirectoryTaxonomyWriter$OrdinalMap__fields_ },
              { 0, NULL }
            };

            static PyType_Def *PY_TYPE_BASES(DirectoryTaxonomyWriter$OrdinalMap)[] = {
              &PY_TYPE_DEF(::java::lang::Object),
              NULL
            };

            DEFINE_TYPE(DirectoryTaxonomyWriter$OrdinalMap, t_DirectoryTaxonomyWriter$OrdinalMap, DirectoryTaxonomyWriter$OrdinalMap);

            void t_DirectoryTaxonomyWriter$OrdinalMap::install(PyObject *module)
            {
              installType(&PY_TYPE(DirectoryTaxonomyWriter$OrdinalMap), &PY_TYPE_DEF(DirectoryTaxonomyWriter$OrdinalMap), module, "DirectoryTaxonomyWriter$OrdinalMap", 0);
            }

            void t_DirectoryTaxonomyWriter$OrdinalMap::initialize(PyObject *module)
            {
              PyObject_SetAttrString((PyObject *) PY_TYPE(DirectoryTaxonomyWriter$OrdinalMap), "class_", make_descriptor(DirectoryTaxonomyWriter$OrdinalMap::initializeClass, 1));
              PyObject_SetAttrString((PyObject *) PY_TYPE(DirectoryTaxonomyWriter$OrdinalMap), "wrapfn_", make_descriptor(t_DirectoryTaxonomyWriter$OrdinalMap::wrap_jobject));
              PyObject_SetAttrString((PyObject *) PY_TYPE(DirectoryTaxonomyWriter$OrdinalMap), "boxfn_", make_descriptor(boxObject));
            }

            static PyObject *t_DirectoryTaxonomyWriter$OrdinalMap_cast_(PyTypeObject *type, PyObject *arg)
            {
              if (!(arg = castCheck(arg, DirectoryTaxonomyWriter$OrdinalMap::initializeClass, 1)))
                return NULL;
              return t_DirectoryTaxonomyWriter$OrdinalMap::wrap_Object(DirectoryTaxonomyWriter$OrdinalMap(((t_DirectoryTaxonomyWriter$OrdinalMap *) arg)->object.this$));
            }
            static PyObject *t_DirectoryTaxonomyWriter$OrdinalMap_instance_(PyTypeObject *type, PyObject *arg)
            {
              if (!castCheck(arg, DirectoryTaxonomyWriter$OrdinalMap::initializeClass, 0))
                Py_RETURN_FALSE;
              Py_RETURN_TRUE;
            }

            static PyObject *t_DirectoryTaxonomyWriter$OrdinalMap_addDone(t_DirectoryTaxonomyWriter$OrdinalMap *self)
            {
              OBJ_CALL(self->object.addDone());
              Py_RETURN_NONE;
            }

            static PyObject *t_DirectoryTaxonomyWriter$OrdinalMap_addMapping(t_DirectoryTaxonomyWriter$OrdinalMap *self, PyObject *args)
            {
              jint a0;
              jint a1;

              if (!parseArgs(args, "II", &a0, &a1))
              {
                OBJ_CALL(self->object.addMapping(a0, a1));
                Py_RETURN_NONE;
              }

              PyErr_SetArgsError((PyObject *) self, "addMapping", args);
              return NULL;
            }

            static PyObject *t_DirectoryTaxonomyWriter$OrdinalMap_getMap(t_DirectoryTaxonomyWriter$OrdinalMap *self)
            {
              JArray< jint > result((jobject) NULL);
              OBJ_CALL(result = self->object.getMap());
              return result.wrap();
            }

            static PyObject *t_DirectoryTaxonomyWriter$OrdinalMap_setSize(t_DirectoryTaxonomyWriter$OrdinalMap *self, PyObject *arg)
            {
              jint a0;

              if (!parseArg(arg, "I", &a0))
              {
                OBJ_CALL(self->object.setSize(a0));
                Py_RETURN_NONE;
              }

              PyErr_SetArgsError((PyObject *) self, "setSize", arg);
              return NULL;
            }

            static PyObject *t_DirectoryTaxonomyWriter$OrdinalMap_get__map(t_DirectoryTaxonomyWriter$OrdinalMap *self, void *data)
            {
              JArray< jint > value((jobject) NULL);
              OBJ_CALL(value = self->object.getMap());
              return value.wrap();
            }

            static int t_DirectoryTaxonomyWriter$OrdinalMap_set__size(t_DirectoryTaxonomyWriter$OrdinalMap *self, PyObject *arg, void *data)
            {
              {
                jint value;
                if (!parseArg(arg, "I", &value))
                {
                  INT_CALL(self->object.setSize(value));
                  return 0;
                }
              }
              PyErr_SetArgsError((PyObject *) self, "size", arg);
              return -1;
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/spatial3d/geom/GeoPathFactory.h"
#include "org/apache/lucene/spatial3d/geom/PlanetModel.h"
#include "org/apache/lucene/spatial3d/geom/GeoPath.h"
#include "org/apache/lucene/spatial3d/geom/GeoPoint.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace spatial3d {
        namespace geom {

          ::java::lang::Class *GeoPathFactory::class$ = NULL;
          jmethodID *GeoPathFactory::mids$ = NULL;
          bool GeoPathFactory::live$ = false;

          jclass GeoPathFactory::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/spatial3d/geom/GeoPathFactory");

              mids$ = new jmethodID[max_mid];
              mids$[mid_makeGeoPath_16ba42f4abef7e5b] = env->getStaticMethodID(cls, "makeGeoPath", "(Lorg/apache/lucene/spatial3d/geom/PlanetModel;D[Lorg/apache/lucene/spatial3d/geom/GeoPoint;)Lorg/apache/lucene/spatial3d/geom/GeoPath;");

              class$ = new ::java::lang::Class(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          ::org::apache::lucene::spatial3d::geom::GeoPath GeoPathFactory::makeGeoPath(const ::org::apache::lucene::spatial3d::geom::PlanetModel & a0, jdouble a1, const JArray< ::org::apache::lucene::spatial3d::geom::GeoPoint > & a2)
          {
            jclass cls = env->getClass(initializeClass);
            return ::org::apache::lucene::spatial3d::geom::GeoPath(env->callStaticObjectMethod(cls, mids$[mid_makeGeoPath_16ba42f4abef7e5b], a0.this$, a1, a2.this$));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace spatial3d {
        namespace geom {
          static PyObject *t_GeoPathFactory_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_GeoPathFactory_instance_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_GeoPathFactory_makeGeoPath(PyTypeObject *type, PyObject *args);

          static PyMethodDef t_GeoPathFactory__methods_[] = {
            DECLARE_METHOD(t_GeoPathFactory, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_GeoPathFactory, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_GeoPathFactory, makeGeoPath, METH_VARARGS | METH_CLASS),
            { NULL, NULL, 0, NULL }
          };

          static PyType_Slot PY_TYPE_SLOTS(GeoPathFactory)[] = {
            { Py_tp_methods, t_GeoPathFactory__methods_ },
            { Py_tp_init, (void *) abstract_init },
            { 0, NULL }
          };

          static PyType_Def *PY_TYPE_BASES(GeoPathFactory)[] = {
            &PY_TYPE_DEF(::java::lang::Object),
            NULL
          };

          DEFINE_TYPE(GeoPathFactory, t_GeoPathFactory, GeoPathFactory);

          void t_GeoPathFactory::install(PyObject *module)
          {
            installType(&PY_TYPE(GeoPathFactory), &PY_TYPE_DEF(GeoPathFactory), module, "GeoPathFactory", 0);
          }

          void t_GeoPathFactory::initialize(PyObject *module)
          {
            PyObject_SetAttrString((PyObject *) PY_TYPE(GeoPathFactory), "class_", make_descriptor(GeoPathFactory::initializeClass, 1));
            PyObject_SetAttrString((PyObject *) PY_TYPE(GeoPathFactory), "wrapfn_", make_descriptor(t_GeoPathFactory::wrap_jobject));
            PyObject_SetAttrString((PyObject *) PY_TYPE(GeoPathFactory), "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_GeoPathFactory_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, GeoPathFactory::initializeClass, 1)))
              return NULL;
            return t_GeoPathFactory::wrap_Object(GeoPathFactory(((t_GeoPathFactory *) arg)->object.this$));
          }
          static PyObject *t_GeoPathFactory_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, GeoPathFactory::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static PyObject *t_GeoPathFactory_makeGeoPath(PyTypeObject *type, PyObject *args)
          {
            ::org::apache::lucene::spatial3d::geom::PlanetModel a0((jobject) NULL);
            jdouble a1;
            JArray< ::org::apache::lucene::spatial3d::geom::GeoPoint > a2((jobject) NULL);
            ::org::apache::lucene::spatial3d::geom::GeoPath result((jobject) NULL);

            if (!parseArgs(args, "kD[k", ::org::apache::lucene::spatial3d::geom::PlanetModel::initializeClass, ::org::apache::lucene::spatial3d::geom::GeoPoint::initializeClass, &a0, &a1, &a2))
            {
              OBJ_CALL(result = ::org::apache::lucene::spatial3d::geom::GeoPathFactory::makeGeoPath(a0, a1, a2));
              return ::org::apache::lucene::spatial3d::geom::t_GeoPath::wrap_Object(result);
            }

            PyErr_SetArgsError(type, "makeGeoPath", args);
            return NULL;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queryparser/xml/DOMUtils.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace xml {

          ::java::lang::Class *DOMUtils::class$ = NULL;
          jmethodID *DOMUtils::mids$ = NULL;
          bool DOMUtils::live$ = false;

          jclass DOMUtils::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/queryparser/xml/DOMUtils");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_f2cc1bce94666404] = env->getMethodID(cls, "<init>", "()V");

              class$ = new ::java::lang::Class(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          DOMUtils::DOMUtils() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_f2cc1bce94666404)) {}
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace xml {
          static PyObject *t_DOMUtils_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_DOMUtils_instance_(PyTypeObject *type, PyObject *arg);
          static int t_DOMUtils_init_(t_DOMUtils *self, PyObject *args, PyObject *kwds);

          static PyMethodDef t_DOMUtils__methods_[] = {
            DECLARE_METHOD(t_DOMUtils, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_DOMUtils, instance_, METH_O | METH_CLASS),
            { NULL, NULL, 0, NULL }
          };

          static PyType_Slot PY_TYPE_SLOTS(DOMUtils)[] = {
            { Py_tp_methods, t_DOMUtils__methods_ },
            { Py_tp_init, (void *) t_DOMUtils_init_ },
            { 0, NULL }
          };

          static PyType_Def *PY_TYPE_BASES(DOMUtils)[] = {
            &PY_TYPE_DEF(::java::lang::Object),
            NULL
          };

          DEFINE_TYPE(DOMUtils, t_DOMUtils, DOMUtils);

          void t_DOMUtils::install(PyObject *module)
          {
            installType(&PY_TYPE(DOMUtils), &PY_TYPE_DEF(DOMUtils), module, "DOMUtils", 0);
          }

          void t_DOMUtils::initialize(PyObject *module)
          {
            PyObject_SetAttrString((PyObject *) PY_TYPE(DOMUtils), "class_", make_descriptor(DOMUtils::initializeClass, 1));
            PyObject_SetAttrString((PyObject *) PY_TYPE(DOMUtils), "wrapfn_", make_descriptor(t_DOMUtils::wrap_jobject));
            PyObject_SetAttrString((PyObject *) PY_TYPE(DOMUtils), "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_DOMUtils_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, DOMUtils::initializeClass, 1)))
              return NULL;
            return t_DOMUtils::wrap_Object(DOMUtils(((t_DOMUtils *) arg)->object.this$));
          }
          static PyObject *t_DOMUtils_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, DOMUtils::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_DOMUtils_init_(t_DOMUtils *self, PyObject *args, PyObject *kwds)
          {
            DOMUtils object((jobject) NULL);

            INT_CALL(object = DOMUtils());
            self->object = object;

            return 0;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/spell/SuggestWordScoreComparator.h"
#include "org/apache/lucene/search/spell/SuggestWord.h"
#include "java/util/Comparator.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace spell {

          ::java::lang::Class *SuggestWordScoreComparator::class$ = NULL;
          jmethodID *SuggestWordScoreComparator::mids$ = NULL;
          bool SuggestWordScoreComparator::live$ = false;

          jclass SuggestWordScoreComparator::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/search/spell/SuggestWordScoreComparator");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_f2cc1bce94666404] = env->getMethodID(cls, "<init>", "()V");
              mids$[mid_compare_b877b48a0c3b8cb1] = env->getMethodID(cls, "compare", "(Lorg/apache/lucene/search/spell/SuggestWord;Lorg/apache/lucene/search/spell/SuggestWord;)I");

              class$ = new ::java::lang::Class(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          SuggestWordScoreComparator::SuggestWordScoreComparator() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_f2cc1bce94666404)) {}

          jint SuggestWordScoreComparator::compare(const ::org::apache::lucene::search::spell::SuggestWord & a0, const ::org::apache::lucene::search::spell::SuggestWord & a1) const
          {
            return env->callIntMethod(this$, mids$[mid_compare_b877b48a0c3b8cb1], a0.this$, a1.this$);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace spell {
          static PyObject *t_SuggestWordScoreComparator_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_SuggestWordScoreComparator_instance_(PyTypeObject *type, PyObject *arg);
          static int t_SuggestWordScoreComparator_init_(t_SuggestWordScoreComparator *self, PyObject *args, PyObject *kwds);
          static PyObject *t_SuggestWordScoreComparator_compare(t_SuggestWordScoreComparator *self, PyObject *args);

          static PyMethodDef t_SuggestWordScoreComparator__methods_[] = {
            DECLARE_METHOD(t_SuggestWordScoreComparator, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_SuggestWordScoreComparator, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_SuggestWordScoreComparator, compare, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          static PyType_Slot PY_TYPE_SLOTS(SuggestWordScoreComparator)[] = {
            { Py_tp_methods, t_SuggestWordScoreComparator__methods_ },
            { Py_tp_init, (void *) t_SuggestWordScoreComparator_init_ },
            { 0, NULL }
          };

          static PyType_Def *PY_TYPE_BASES(SuggestWordScoreComparator)[] = {
            &PY_TYPE_DEF(::java::lang::Object),
            NULL
          };

          DEFINE_TYPE(SuggestWordScoreComparator, t_SuggestWordScoreComparator, SuggestWordScoreComparator);

          void t_SuggestWordScoreComparator::install(PyObject *module)
          {
            installType(&PY_TYPE(SuggestWordScoreComparator), &PY_TYPE_DEF(SuggestWordScoreComparator), module, "SuggestWordScoreComparator", 0);
          }

          void t_SuggestWordScoreComparator::initialize(PyObject *module)
          {
            PyObject_SetAttrString((PyObject *) PY_TYPE(SuggestWordScoreComparator), "class_", make_descriptor(SuggestWordScoreComparator::initializeClass, 1));
            PyObject_SetAttrString((PyObject *) PY_TYPE(SuggestWordScoreComparator), "wrapfn_", make_descriptor(t_SuggestWordScoreComparator::wrap_jobject));
            PyObject_SetAttrString((PyObject *) PY_TYPE(SuggestWordScoreComparator), "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_SuggestWordScoreComparator_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, SuggestWordScoreComparator::initializeClass, 1)))
              return NULL;
            return t_SuggestWordScoreComparator::wrap_Object(SuggestWordScoreComparator(((t_SuggestWordScoreComparator *) arg)->object.this$));
          }
          static PyObject *t_SuggestWordScoreComparator_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, SuggestWordScoreComparator::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_SuggestWordScoreComparator_init_(t_SuggestWordScoreComparator *self, PyObject *args, PyObject *kwds)
          {
            SuggestWordScoreComparator object((jobject) NULL);

            INT_CALL(object = SuggestWordScoreComparator());
            self->object = object;

            return 0;
          }

          static PyObject *t_SuggestWordScoreComparator_compare(t_SuggestWordScoreComparator *self, PyObject *args)
          {
            ::org::apache::lucene::search::spell::SuggestWord a0((jobject) NULL);
            ::org::apache::lucene::search::spell::SuggestWord a1((jobject) NULL);
            jint result;

            if (!parseArgs(args, "kk", ::org::apache::lucene::search::spell::SuggestWord::initializeClass, ::org::apache::lucene::search::spell::SuggestWord::initializeClass, &a0, &a1))
            {
              OBJ_CALL(result = self->object.compare(a0, a1));
              return PyLong_FromLong((long) result);
            }

            PyErr_SetArgsError((PyObject *) self, "compare", args);
            return NULL;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queryparser/flexible/standard/parser/Token.h"
#include "java/lang/Class.h"
#include "java/lang/String.h"
#include "java/io/Serializable.h"
#include "org/apache/lucene/queryparser/flexible/standard/parser/Token.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace standard {
            namespace parser {

              ::java::lang::Class *Token::class$ = NULL;
              jmethodID *Token::mids$ = NULL;
              jfieldID *Token::fids$ = NULL;
              bool Token::live$ = false;

              jclass Token::initializeClass(bool getOnly)
              {
                if (getOnly)
                  return (jclass) (live$ ? class$->this$ : NULL);
                if (class$ == NULL)
                {
                  jclass cls = (jclass) env->findClass("org/apache/lucene/queryparser/flexible/standard/parser/Token");

                  mids$ = new jmethodID[max_mid];
                  mids$[mid_init$_f2cc1bce94666404] = env->getMethodID(cls, "<init>", "()V");
                  mids$[mid_init$_040c4cd0390c5aff] = env->getMethodID(cls, "<init>", "(I)V");
                  mids$[mid_init$_836a82ec1a65a0bc] = env->getMethodID(cls, "<init>", "(ILjava/lang/String;)V");
                  mids$[mid_getValue_d6bcd06f3102c4d9] = env->getMethodID(cls, "getValue", "()Ljava/lang/Object;");
                  mids$[mid_newToken_7696c268eaf43e29] = env->getStaticMethodID(cls, "newToken", "(I)Lorg/apache/lucene/queryparser/flexible/standard/parser/Token;");
                  mids$[mid_newToken_a7c62e4da51bd13a] = env->getStaticMethodID(cls, "newToken", "(ILjava/lang/String;)Lorg/apache/lucene/queryparser/flexible/standard/parser/Token;");
                  mids$[mid_toString_db9b55ba01e03e4b] = env->getMethodID(cls, "toString", "()Ljava/lang/String;");

                  fids$ = new jfieldID[max_fid];
                  fids$[fid_beginColumn] = env->getFieldID(cls, "beginColumn", "I");
                  fids$[fid_beginLine] = env->getFieldID(cls, "beginLine", "I");
                  fids$[fid_endColumn] = env->getFieldID(cls, "endColumn", "I");
                  fids$[fid_endLine] = env->getFieldID(cls, "endLine", "I");
                  fids$[fid_image] = env->getFieldID(cls, "image", "Ljava/lang/String;");
                  fids$[fid_kind] = env->getFieldID(cls, "kind", "I");
                  fids$[fid_next] = env->getFieldID(cls, "next", "Lorg/apache/lucene/queryparser/flexible/standard/parser/Token;");
                  fids$[fid_specialToken] = env->getFieldID(cls, "specialToken", "Lorg/apache/lucene/queryparser/flexible/standard/parser/Token;");

                  class$ = new ::java::lang::Class(cls);
                  live$ = true;
                }
                return (jclass) class$->this$;
              }

              Token::Token() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_f2cc1bce94666404)) {}

              Token::Token(jint a0) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_040c4cd0390c5aff, a0)) {}

              Token::Token(jint a0, const ::java::lang::String & a1) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_836a82ec1a65a0bc, a0, a1.this$)) {}

              ::java::lang::Object Token::getValue() const
              {
                return ::java::lang::Object(env->callObjectMethod(this$, mids$[mid_getValue_d6bcd06f3102c4d9]));
              }

              Token Token::newToken(jint a0)
              {
                jclass cls = env->getClass(initializeClass);
                return Token(env->callStaticObjectMethod(cls, mids$[mid_newToken_7696c268eaf43e29], a0));
              }

              Token Token::newToken(jint a0, const ::java::lang::String & a1)
              {
                jclass cls = env->getClass(initializeClass);
                return Token(env->callStaticObjectMethod(cls, mids$[mid_newToken_a7c62e4da51bd13a], a0, a1.this$));
              }

              ::java::lang::String Token::toString() const
              {
                return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_db9b55ba01e03e4b]));
              }

              jint Token::_get_beginColumn() const
              {
                return env->getIntField(this$, fids$[fid_beginColumn]);
              }

              void Token::_set_beginColumn(jint a0) const
              {
                env->setIntField(this$, fids$[fid_beginColumn], a0);
              }

              jint Token::_get_beginLine() const
              {
                return env->getIntField(this$, fids$[fid_beginLine]);
              }

              void Token::_set_beginLine(jint a0) const
              {
                env->setIntField(this$, fids$[fid_beginLine], a0);
              }

              jint Token::_get_endColumn() const
              {
                return env->getIntField(this$, fids$[fid_endColumn]);
              }

              void Token::_set_endColumn(jint a0) const
              {
                env->setIntField(this$, fids$[fid_endColumn], a0);
              }

              jint Token::_get_endLine() const
              {
                return env->getIntField(this$, fids$[fid_endLine]);
              }

              void Token::_set_endLine(jint a0) const
              {
                env->setIntField(this$, fids$[fid_endLine], a0);
              }

              ::java::lang::String Token::_get_image() const
              {
                return ::java::lang::String(env->getObjectField(this$, fids$[fid_image]));
              }

              void Token::_set_image(const ::java::lang::String & a0) const
              {
                env->setObjectField(this$, fids$[fid_image], a0.this$);
              }

              jint Token::_get_kind() const
              {
                return env->getIntField(this$, fids$[fid_kind]);
              }

              void Token::_set_kind(jint a0) const
              {
                env->setIntField(this$, fids$[fid_kind], a0);
              }

              Token Token::_get_next() const
              {
                return Token(env->getObjectField(this$, fids$[fid_next]));
              }

              void Token::_set_next(const Token & a0) const
              {
                env->setObjectField(this$, fids$[fid_next], a0.this$);
              }

              Token Token::_get_specialToken() const
              {
                return Token(env->getObjectField(this$, fids$[fid_specialToken]));
              }

              void Token::_set_specialToken(const Token & a0) const
              {
                env->setObjectField(this$, fids$[fid_specialToken], a0.this$);
              }
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace standard {
            namespace parser {
              static PyObject *t_Token_cast_(PyTypeObject *type, PyObject *arg);
              static PyObject *t_Token_instance_(PyTypeObject *type, PyObject *arg);
              static int t_Token_init_(t_Token *self, PyObject *args, PyObject *kwds);
              static PyObject *t_Token_getValue(t_Token *self);
              static PyObject *t_Token_newToken(PyTypeObject *type, PyObject *args);
              static PyObject *t_Token_toString(t_Token *self, PyObject *args);
              static PyObject *t_Token_get__beginColumn(t_Token *self, void *data);
              static int t_Token_set__beginColumn(t_Token *self, PyObject *arg, void *data);
              static PyObject *t_Token_get__beginLine(t_Token *self, void *data);
              static int t_Token_set__beginLine(t_Token *self, PyObject *arg, void *data);
              static PyObject *t_Token_get__endColumn(t_Token *self, void *data);
              static int t_Token_set__endColumn(t_Token *self, PyObject *arg, void *data);
              static PyObject *t_Token_get__endLine(t_Token *self, void *data);
              static int t_Token_set__endLine(t_Token *self, PyObject *arg, void *data);
              static PyObject *t_Token_get__image(t_Token *self, void *data);
              static int t_Token_set__image(t_Token *self, PyObject *arg, void *data);
              static PyObject *t_Token_get__kind(t_Token *self, void *data);
              static int t_Token_set__kind(t_Token *self, PyObject *arg, void *data);
              static PyObject *t_Token_get__next(t_Token *self, void *data);
              static int t_Token_set__next(t_Token *self, PyObject *arg, void *data);
              static PyObject *t_Token_get__specialToken(t_Token *self, void *data);
              static int t_Token_set__specialToken(t_Token *self, PyObject *arg, void *data);

              static PyObject *t_Token_get__value(t_Token *self, void *data);
              static PyGetSetDef t_Token__fields_[] = {
                DECLARE_GETSET_FIELD(t_Token, beginColumn),
                DECLARE_GETSET_FIELD(t_Token, beginLine),
                DECLARE_GETSET_FIELD(t_Token, endColumn),
                DECLARE_GETSET_FIELD(t_Token, endLine),
                DECLARE_GETSET_FIELD(t_Token, image),
                DECLARE_GETSET_FIELD(t_Token, kind),
                DECLARE_GETSET_FIELD(t_Token, next),
                DECLARE_GETSET_FIELD(t_Token, specialToken),
                DECLARE_GET_FIELD(t_Token, value),
                { NULL, NULL, NULL, NULL, NULL }
              };

              static PyMethodDef t_Token__methods_[] = {
                DECLARE_METHOD(t_Token, cast_, METH_O | METH_CLASS),
                DECLARE_METHOD(t_Token, instance_, METH_O | METH_CLASS),
                DECLARE_METHOD(t_Token, getValue, METH_NOARGS),
                DECLARE_METHOD(t_Token, newToken, METH_VARARGS | METH_CLASS),
                DECLARE_METHOD(t_Token, toString, METH_VARARGS),
                { NULL, NULL, 0, NULL }
              };

              static PyType_Slot PY_TYPE_SLOTS(Token)[] = {
                { Py_tp_methods, t_Token__methods_ },
                { Py_tp_init, (void *) t_Token_init_ },
                { Py_tp_getset, t_Token__fields_ },
                { 0, NULL }
              };

              static PyType_Def *PY_TYPE_BASES(Token)[] = {
                &PY_TYPE_DEF(::java::lang::Object),
                NULL
              };

              DEFINE_TYPE(Token, t_Token, Token);

              void t_Token::install(PyObject *module)
              {
                installType(&PY_TYPE(Token), &PY_TYPE_DEF(Token), module, "Token", 0);
              }

              void t_Token::initialize(PyObject *module)
              {
                PyObject_SetAttrString((PyObject *) PY_TYPE(Token), "class_", make_descriptor(Token::initializeClass, 1));
                PyObject_SetAttrString((PyObject *) PY_TYPE(Token), "wrapfn_", make_descriptor(t_Token::wrap_jobject));
                PyObject_SetAttrString((PyObject *) PY_TYPE(Token), "boxfn_", make_descriptor(boxObject));
              }

              static PyObject *t_Token_cast_(PyTypeObject *type, PyObject *arg)
              {
                if (!(arg = castCheck(arg, Token::initializeClass, 1)))
                  return NULL;
                return t_Token::wrap_Object(Token(((t_Token *) arg)->object.this$));
              }
              static PyObject *t_Token_instance_(PyTypeObject *type, PyObject *arg)
              {
                if (!castCheck(arg, Token::initializeClass, 0))
                  Py_RETURN_FALSE;
                Py_RETURN_TRUE;
              }

              static int t_Token_init_(t_Token *self, PyObject *args, PyObject *kwds)
              {
                switch (PyTuple_GET_SIZE(args)) {
                 case 0:
                  {
                    Token object((jobject) NULL);

                    INT_CALL(object = Token());
                    self->object = object;
                    break;
                  }
                 case 1:
                  {
                    jint a0;
                    Token object((jobject) NULL);

                    if (!parseArgs(args, "I", &a0))
                    {
                      INT_CALL(object = Token(a0));
                      self->object = object;
                      break;
                    }
                  }
                  goto err;
                 case 2:
                  {
                    jint a0;
                    ::java::lang::String a1((jobject) NULL);
                    Token object((jobject) NULL);

                    if (!parseArgs(args, "Is", &a0, &a1))
                    {
                      INT_CALL(object = Token(a0, a1));
                      self->object = object;
                      break;
                    }
                  }
                 default:
                 err:
                  PyErr_SetArgsError((PyObject *) self, "__init__", args);
                  return -1;
                }

                return 0;
              }

              static PyObject *t_Token_getValue(t_Token *self)
              {
                ::java::lang::Object result((jobject) NULL);
                OBJ_CALL(result = self->object.getValue());
                return ::java::lang::t_Object::wrap_Object(result);
              }

              static PyObject *t_Token_newToken(PyTypeObject *type, PyObject *args)
              {
                switch (PyTuple_GET_SIZE(args)) {
                 case 1:
                  {
                    jint a0;
                    Token result((jobject) NULL);

                    if (!parseArgs(args, "I", &a0))
                    {
                      OBJ_CALL(result = ::org::apache::lucene::queryparser::flexible::standard::parser::Token::newToken(a0));
                      return t_Token::wrap_Object(result);
                    }
                  }
                  break;
                 case 2:
                  {
                    jint a0;
                    ::java::lang::String a1((jobject) NULL);
                    Token result((jobject) NULL);

                    if (!parseArgs(args, "Is", &a0, &a1))
                    {
                      OBJ_CALL(result = ::org::apache::lucene::queryparser::flexible::standard::parser::Token::newToken(a0, a1));
                      return t_Token::wrap_Object(result);
                    }
                  }
                }

                PyErr_SetArgsError(type, "newToken", args);
                return NULL;
              }

              static PyObject *t_Token_toString(t_Token *self, PyObject *args)
              {
                ::java::lang::String result((jobject) NULL);

                if (!parseArgs(args, ""))
                {
                  OBJ_CALL(result = self->object.toString());
                  return j2p(result);
                }

                return callSuper(PY_TYPE(Token), (PyObject *) self, "toString", args, 2);
              }

              static PyObject *t_Token_get__beginColumn(t_Token *self, void *data)
              {
                jint value;
                OBJ_CALL(value = self->object._get_beginColumn());
                return PyLong_FromLong((long) value);
              }
              static int t_Token_set__beginColumn(t_Token *self, PyObject *arg, void *data)
              {
                jint value;
                if (!parseArg(arg, "I", &value))
                {
                  INT_CALL(self->object._set_beginColumn(value));
                  return 0;
                }
                PyErr_SetArgsError((PyObject *) self, "beginColumn", arg);
                return -1;
              }

              static PyObject *t_Token_get__beginLine(t_Token *self, void *data)
              {
                jint value;
                OBJ_CALL(value = self->object._get_beginLine());
                return PyLong_FromLong((long) value);
              }
              static int t_Token_set__beginLine(t_Token *self, PyObject *arg, void *data)
              {
                jint value;
                if (!parseArg(arg, "I", &value))
                {
                  INT_CALL(self->object._set_beginLine(value));
                  return 0;
                }
                PyErr_SetArgsError((PyObject *) self, "beginLine", arg);
                return -1;
              }

              static PyObject *t_Token_get__endColumn(t_Token *self, void *data)
              {
                jint value;
                OBJ_CALL(value = self->object._get_endColumn());
                return PyLong_FromLong((long) value);
              }
              static int t_Token_set__endColumn(t_Token *self, PyObject *arg, void *data)
              {
                jint value;
                if (!parseArg(arg, "I", &value))
                {
                  INT_CALL(self->object._set_endColumn(value));
                  return 0;
                }
                PyErr_SetArgsError((PyObject *) self, "endColumn", arg);
                return -1;
              }

              static PyObject *t_Token_get__endLine(t_Token *self, void *data)
              {
                jint value;
                OBJ_CALL(value = self->object._get_endLine());
                return PyLong_FromLong((long) value);
              }
              static int t_Token_set__endLine(t_Token *self, PyObject *arg, void *data)
              {
                jint value;
                if (!parseArg(arg, "I", &value))
                {
                  INT_CALL(self->object._set_endLine(value));
                  return 0;
                }
                PyErr_SetArgsError((PyObject *) self, "endLine", arg);
                return -1;
              }

              static PyObject *t_Token_get__image(t_Token *self, void *data)
              {
                ::java::lang::String value((jobject) NULL);
                OBJ_CALL(value = self->object._get_image());
                return j2p(value);
              }
              static int t_Token_set__image(t_Token *self, PyObject *arg, void *data)
              {
                ::java::lang::String value((jobject) NULL);
                if (!parseArg(arg, "s", &value))
                {
                  INT_CALL(self->object._set_image(value));
                  return 0;
                }
                PyErr_SetArgsError((PyObject *) self, "image", arg);
                return -1;
              }

              static PyObject *t_Token_get__kind(t_Token *self, void *data)
              {
                jint value;
                OBJ_CALL(value = self->object._get_kind());
                return PyLong_FromLong((long) value);
              }
              static int t_Token_set__kind(t_Token *self, PyObject *arg, void *data)
              {
                jint value;
                if (!parseArg(arg, "I", &value))
                {
                  INT_CALL(self->object._set_kind(value));
                  return 0;
                }
                PyErr_SetArgsError((PyObject *) self, "kind", arg);
                return -1;
              }

              static PyObject *t_Token_get__next(t_Token *self, void *data)
              {
                Token value((jobject) NULL);
                OBJ_CALL(value = self->object._get_next());
                return t_Token::wrap_Object(value);
              }
              static int t_Token_set__next(t_Token *self, PyObject *arg, void *data)
              {
                Token value((jobject) NULL);
                if (!parseArg(arg, "k", Token::initializeClass, &value))
                {
                  INT_CALL(self->object._set_next(value));
                  return 0;
                }
                PyErr_SetArgsError((PyObject *) self, "next", arg);
                return -1;
              }

              static PyObject *t_Token_get__specialToken(t_Token *self, void *data)
              {
                Token value((jobject) NULL);
                OBJ_CALL(value = self->object._get_specialToken());
                return t_Token::wrap_Object(value);
              }
              static int t_Token_set__specialToken(t_Token *self, PyObject *arg, void *data)
              {
                Token value((jobject) NULL);
                if (!parseArg(arg, "k", Token::initializeClass, &value))
                {
                  INT_CALL(self->object._set_specialToken(value));
                  return 0;
                }
                PyErr_SetArgsError((PyObject *) self, "specialToken", arg);
                return -1;
              }

              static PyObject *t_Token_get__value(t_Token *self, void *data)
              {
                ::java::lang::Object value((jobject) NULL);
                OBJ_CALL(value = self->object.getValue());
                return ::java::lang::t_Object::wrap_Object(value);
              }
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/spell/SuggestMode.h"
#include "org/apache/lucene/search/spell/SuggestMode.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace spell {

          ::java::lang::Class *SuggestMode::class$ = NULL;
          jmethodID *SuggestMode::mids$ = NULL;
          bool SuggestMode::live$ = false;
          SuggestMode *SuggestMode::SUGGEST_ALWAYS = NULL;
          SuggestMode *SuggestMode::SUGGEST_MORE_POPULAR = NULL;
          SuggestMode *SuggestMode::SUGGEST_WHEN_NOT_IN_INDEX = NULL;

          jclass SuggestMode::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/search/spell/SuggestMode");

              mids$ = new jmethodID[max_mid];
              mids$[mid_valueOf_74fe85d4d33681d3] = env->getStaticMethodID(cls, "valueOf", "(Ljava/lang/String;)Lorg/apache/lucene/search/spell/SuggestMode;");
              mids$[mid_values_8de0133cf65a6173] = env->getStaticMethodID(cls, "values", "()[Lorg/apache/lucene/search/spell/SuggestMode;");

              class$ = new ::java::lang::Class(cls);
              cls = (jclass) class$->this$;

              SUGGEST_ALWAYS = new SuggestMode(env->getStaticObjectField(cls, "SUGGEST_ALWAYS", "Lorg/apache/lucene/search/spell/SuggestMode;"));
              SUGGEST_MORE_POPULAR = new SuggestMode(env->getStaticObjectField(cls, "SUGGEST_MORE_POPULAR", "Lorg/apache/lucene/search/spell/SuggestMode;"));
              SUGGEST_WHEN_NOT_IN_INDEX = new SuggestMode(env->getStaticObjectField(cls, "SUGGEST_WHEN_NOT_IN_INDEX", "Lorg/apache/lucene/search/spell/SuggestMode;"));
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          SuggestMode SuggestMode::valueOf(const ::java::lang::String & a0)
          {
            jclass cls = env->getClass(initializeClass);
            return SuggestMode(env->callStaticObjectMethod(cls, mids$[mid_valueOf_74fe85d4d33681d3], a0.this$));
          }

          JArray< SuggestMode > SuggestMode::values()
          {
            jclass cls = env->getClass(initializeClass);
            return JArray< SuggestMode >(env->callStaticObjectMethod(cls, mids$[mid_values_8de0133cf65a6173]));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace spell {
          static PyObject *t_SuggestMode_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_SuggestMode_instance_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_SuggestMode_of_(t_SuggestMode *self, PyObject *args);
          static PyObject *t_SuggestMode_valueOf(PyTypeObject *type, PyObject *args);
          static PyObject *t_SuggestMode_values(PyTypeObject *type);
          static PyObject *t_SuggestMode_get__parameters_(t_SuggestMode *self, void *data);
          static PyGetSetDef t_SuggestMode__fields_[] = {
            DECLARE_GET_FIELD(t_SuggestMode, parameters_),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_SuggestMode__methods_[] = {
            DECLARE_METHOD(t_SuggestMode, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_SuggestMode, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_SuggestMode, of_, METH_VARARGS),
            DECLARE_METHOD(t_SuggestMode, valueOf, METH_VARARGS | METH_CLASS),
            DECLARE_METHOD(t_SuggestMode, values, METH_NOARGS | METH_CLASS),
            { NULL, NULL, 0, NULL }
          };

          static PyType_Slot PY_TYPE_SLOTS(SuggestMode)[] = {
            { Py_tp_methods, t_SuggestMode__methods_ },
            { Py_tp_init, (void *) abstract_init },
            { Py_tp_getset, t_SuggestMode__fields_ },
            { 0, NULL }
          };

          static PyType_Def *PY_TYPE_BASES(SuggestMode)[] = {
            &PY_TYPE_DEF(::java::lang::Enum),
            NULL
          };

          DEFINE_TYPE(SuggestMode, t_SuggestMode, SuggestMode);
          PyObject *t_SuggestMode::wrap_Object(const SuggestMode& object, PyTypeObject *p0)
          {
            PyObject *obj = t_SuggestMode::wrap_Object(object);
            if (obj != NULL && obj != Py_None)
            {
              t_SuggestMode *self = (t_SuggestMode *) obj;
              self->parameters[0] = p0;
            }
            return obj;
          }

          PyObject *t_SuggestMode::wrap_jobject(const jobject& object, PyTypeObject *p0)
          {
            PyObject *obj = t_SuggestMode::wrap_jobject(object);
            if (obj != NULL && obj != Py_None)
            {
              t_SuggestMode *self = (t_SuggestMode *) obj;
              self->parameters[0] = p0;
            }
            return obj;
          }

          void t_SuggestMode::install(PyObject *module)
          {
            installType(&PY_TYPE(SuggestMode), &PY_TYPE_DEF(SuggestMode), module, "SuggestMode", 0);
          }

          void t_SuggestMode::initialize(PyObject *module)
          {
            PyObject_SetAttrString((PyObject *) PY_TYPE(SuggestMode), "class_", make_descriptor(SuggestMode::initializeClass, 1));
            PyObject_SetAttrString((PyObject *) PY_TYPE(SuggestMode), "wrapfn_", make_descriptor(t_SuggestMode::wrap_jobject));
            PyObject_SetAttrString((PyObject *) PY_TYPE(SuggestMode), "boxfn_", make_descriptor(boxObject));
            env->getClass(SuggestMode::initializeClass);
            PyObject_SetAttrString((PyObject *) PY_TYPE(SuggestMode), "SUGGEST_ALWAYS", make_descriptor(t_SuggestMode::wrap_Object(*SuggestMode::SUGGEST_ALWAYS)));
            PyObject_SetAttrString((PyObject *) PY_TYPE(SuggestMode), "SUGGEST_MORE_POPULAR", make_descriptor(t_SuggestMode::wrap_Object(*SuggestMode::SUGGEST_MORE_POPULAR)));
            PyObject_SetAttrString((PyObject *) PY_TYPE(SuggestMode), "SUGGEST_WHEN_NOT_IN_INDEX", make_descriptor(t_SuggestMode::wrap_Object(*SuggestMode::SUGGEST_WHEN_NOT_IN_INDEX)));
          }

          static PyObject *t_SuggestMode_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, SuggestMode::initializeClass, 1)))
              return NULL;
            return t_SuggestMode::wrap_Object(SuggestMode(((t_SuggestMode *) arg)->object.this$));
          }
          static PyObject *t_SuggestMode_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, SuggestMode::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static PyObject *t_SuggestMode_of_(t_SuggestMode *self, PyObject *args)
          {
            if (!parseArg(args, "T", 1, &(self->parameters)))
              Py_RETURN_SELF;
            return PyErr_SetArgsError((PyObject *) self, "of_", args);
          }

          static PyObject *t_SuggestMode_valueOf(PyTypeObject *type, PyObject *args)
          {
            ::java::lang::String a0((jobject) NULL);
            SuggestMode result((jobject) NULL);

            if (!parseArgs(args, "s", &a0))
            {
              OBJ_CALL(result = ::org::apache::lucene::search::spell::SuggestMode::valueOf(a0));
              return t_SuggestMode::wrap_Object(result);
            }

            return callSuper(type, "valueOf", args, 2);
          }

          static PyObject *t_SuggestMode_values(PyTypeObject *type)
          {
            JArray< SuggestMode > result((jobject) NULL);
            OBJ_CALL(result = ::org::apache::lucene::search::spell::SuggestMode::values());
            return JArray<jobject>(result.this$).wrap(t_SuggestMode::wrap_jobject);
          }
          static PyObject *t_SuggestMode_get__parameters_(t_SuggestMode *self, void *data)
          {
            return typeParameters(self->parameters, sizeof(self->parameters));
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/grouping/SearchGroup.h"
#include "java/util/Collection.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/search/grouping/SearchGroup.h"
#include "org/apache/lucene/search/Sort.h"
#include "java/lang/String.h"
#include "java/util/List.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace grouping {

          ::java::lang::Class *SearchGroup::class$ = NULL;
          jmethodID *SearchGroup::mids$ = NULL;
          jfieldID *SearchGroup::fids$ = NULL;
          bool SearchGroup::live$ = false;

          jclass SearchGroup::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/search/grouping/SearchGroup");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_f2cc1bce94666404] = env->getMethodID(cls, "<init>", "()V");
              mids$[mid_equals_8b72f2dcdde6fd1d] = env->getMethodID(cls, "equals", "(Ljava/lang/Object;)Z");
              mids$[mid_hashCode_9972fcc56b44e79d] = env->getMethodID(cls, "hashCode", "()I");
              mids$[mid_merge_502fac682f353eaa] = env->getStaticMethodID(cls, "merge", "(Ljava/util/List;IILorg/apache/lucene/search/Sort;)Ljava/util/Collection;");
              mids$[mid_toString_db9b55ba01e03e4b] = env->getMethodID(cls, "toString", "()Ljava/lang/String;");

              fids$ = new jfieldID[max_fid];
              fids$[fid_groupValue] = env->getFieldID(cls, "groupValue", "Ljava/lang/Object;");
              fids$[fid_sortValues] = env->getFieldID(cls, "sortValues", "[Ljava/lang/Object;");

              class$ = new ::java::lang::Class(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          SearchGroup::SearchGroup() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_f2cc1bce94666404)) {}

          jboolean SearchGroup::equals(const ::java::lang::Object & a0) const
          {
            return env->callBooleanMethod(this$, mids$[mid_equals_8b72f2dcdde6fd1d], a0.this$);
          }

          jint SearchGroup::hashCode() const
          {
            return env->callIntMethod(this$, mids$[mid_hashCode_9972fcc56b44e79d]);
          }

          ::java::util::Collection SearchGroup::merge(const ::java::util::List & a0, jint a1, jint a2, const ::org::apache::lucene::search::Sort & a3)
          {
            jclass cls = env->getClass(initializeClass);
            return ::java::util::Collection(env->callStaticObjectMethod(cls, mids$[mid_merge_502fac682f353eaa], a0.this$, a1, a2, a3.this$));
          }

          ::java::lang::String SearchGroup::toString() const
          {
            return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_db9b55ba01e03e4b]));
          }

          ::java::lang::Object SearchGroup::_get_groupValue() const
          {
            return ::java::lang::Object(env->getObjectField(this$, fids$[fid_groupValue]));
          }

          void SearchGroup::_set_groupValue(const ::java::lang::Object & a0) const
          {
            env->setObjectField(this$, fids$[fid_groupValue], a0.this$);
          }

          JArray< ::java::lang::Object > SearchGroup::_get_sortValues() const
          {
            return JArray< ::java::lang::Object >(env->getObjectField(this$, fids$[fid_sortValues]));
          }

          void SearchGroup::_set_sortValues(const JArray< ::java::lang::Object > & a0) const
          {
            env->setObjectField(this$, fids$[fid_sortValues], a0.this$);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace grouping {
          static PyObject *t_SearchGroup_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_SearchGroup_instance_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_SearchGroup_of_(t_SearchGroup *self, PyObject *args);
          static int t_SearchGroup_init_(t_SearchGroup *self, PyObject *args, PyObject *kwds);
          static PyObject *t_SearchGroup_equals(t_SearchGroup *self, PyObject *args);
          static PyObject *t_SearchGroup_hashCode(t_SearchGroup *self, PyObject *args);
          static PyObject *t_SearchGroup_merge(PyTypeObject *type, PyObject *args);
          static PyObject *t_SearchGroup_toString(t_SearchGroup *self, PyObject *args);
          static PyObject *t_SearchGroup_get__groupValue(t_SearchGroup *self, void *data);
          static int t_SearchGroup_set__groupValue(t_SearchGroup *self, PyObject *arg, void *data);
          static PyObject *t_SearchGroup_get__sortValues(t_SearchGroup *self, void *data);
          static int t_SearchGroup_set__sortValues(t_SearchGroup *self, PyObject *arg, void *data);

          static PyObject *t_SearchGroup_get__parameters_(t_SearchGroup *self, void *data);
          static PyGetSetDef t_SearchGroup__fields_[] = {
            DECLARE_GETSET_FIELD(t_SearchGroup, groupValue),
            DECLARE_GETSET_FIELD(t_SearchGroup, sortValues),
            DECLARE_GET_FIELD(t_SearchGroup, parameters_),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_SearchGroup__methods_[] = {
            DECLARE_METHOD(t_SearchGroup, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_SearchGroup, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_SearchGroup, of_, METH_VARARGS),
            DECLARE_METHOD(t_SearchGroup, equals, METH_VARARGS),
            DECLARE_METHOD(t_SearchGroup, hashCode, METH_VARARGS),
            DECLARE_METHOD(t_SearchGroup, merge, METH_VARARGS | METH_CLASS),
            DECLARE_METHOD(t_SearchGroup, toString, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          static PyType_Slot PY_TYPE_SLOTS(SearchGroup)[] = {
            { Py_tp_methods, t_SearchGroup__methods_ },
            { Py_tp_init, (void *) t_SearchGroup_init_ },
            { Py_tp_getset, t_SearchGroup__fields_ },
            { 0, NULL }
          };

          static PyType_Def *PY_TYPE_BASES(SearchGroup)[] = {
            &PY_TYPE_DEF(::java::lang::Object),
            NULL
          };

          DEFINE_TYPE(SearchGroup, t_SearchGroup, SearchGroup);
          PyObject *t_SearchGroup::wrap_Object(const SearchGroup& object, PyTypeObject *p0)
          {
            PyObject *obj = t_SearchGroup::wrap_Object(object);
            if (obj != NULL && obj != Py_None)
            {
              t_SearchGroup *self = (t_SearchGroup *) obj;
              self->parameters[0] = p0;
            }
            return obj;
          }

          PyObject *t_SearchGroup::wrap_jobject(const jobject& object, PyTypeObject *p0)
          {
            PyObject *obj = t_SearchGroup::wrap_jobject(object);
            if (obj != NULL && obj != Py_None)
            {
              t_SearchGroup *self = (t_SearchGroup *) obj;
              self->parameters[0] = p0;
            }
            return obj;
          }

          void t_SearchGroup::install(PyObject *module)
          {
            installType(&PY_TYPE(SearchGroup), &PY_TYPE_DEF(SearchGroup), module, "SearchGroup", 0);
          }

          void t_SearchGroup::initialize(PyObject *module)
          {
            PyObject_SetAttrString((PyObject *) PY_TYPE(SearchGroup), "class_", make_descriptor(SearchGroup::initializeClass, 1));
            PyObject_SetAttrString((PyObject *) PY_TYPE(SearchGroup), "wrapfn_", make_descriptor(t_SearchGroup::wrap_jobject));
            PyObject_SetAttrString((PyObject *) PY_TYPE(SearchGroup), "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_SearchGroup_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, SearchGroup::initializeClass, 1)))
              return NULL;
            return t_SearchGroup::wrap_Object(SearchGroup(((t_SearchGroup *) arg)->object.this$));
          }
          static PyObject *t_SearchGroup_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, SearchGroup::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static PyObject *t_SearchGroup_of_(t_SearchGroup *self, PyObject *args)
          {
            if (!parseArg(args, "T", 1, &(self->parameters)))
              Py_RETURN_SELF;
            return PyErr_SetArgsError((PyObject *) self, "of_", args);
          }

          static int t_SearchGroup_init_(t_SearchGroup *self, PyObject *args, PyObject *kwds)
          {
            SearchGroup object((jobject) NULL);

            INT_CALL(object = SearchGroup());
            self->object = object;

            return 0;
          }

          static PyObject *t_SearchGroup_equals(t_SearchGroup *self, PyObject *args)
          {
            ::java::lang::Object a0((jobject) NULL);
            jboolean result;

            if (!parseArgs(args, "o", &a0))
            {
              OBJ_CALL(result = self->object.equals(a0));
              Py_RETURN_BOOL(result);
            }

            return callSuper(PY_TYPE(SearchGroup), (PyObject *) self, "equals", args, 2);
          }

          static PyObject *t_SearchGroup_hashCode(t_SearchGroup *self, PyObject *args)
          {
            jint result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.hashCode());
              return PyLong_FromLong((long) result);
            }

            return callSuper(PY_TYPE(SearchGroup), (PyObject *) self, "hashCode", args, 2);
          }

          static PyObject *t_SearchGroup_merge(PyTypeObject *type, PyObject *args)
          {
            ::java::util::List a0((jobject) NULL);
            PyTypeObject **p0;
            jint a1;
            jint a2;
            ::org::apache::lucene::search::Sort a3((jobject) NULL);
            ::java::util::Collection result((jobject) NULL);

            if (!parseArgs(args, "KIIk", ::java::util::List::initializeClass, ::org::apache::lucene::search::Sort::initializeClass, &a0, &p0, ::java::util::t_List::parameters_, &a1, &a2, &a3))
            {
              OBJ_CALL(result = ::org::apache::lucene::search::grouping::SearchGroup::merge(a0, a1, a2, a3));
              return ::java::util::t_Collection::wrap_Object(result);
            }

            PyErr_SetArgsError(type, "merge", args);
            return NULL;
          }

          static PyObject *t_SearchGroup_toString(t_SearchGroup *self, PyObject *args)
          {
            ::java::lang::String result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.toString());
              return j2p(result);
            }

            return callSuper(PY_TYPE(SearchGroup), (PyObject *) self, "toString", args, 2);
          }
          static PyObject *t_SearchGroup_get__parameters_(t_SearchGroup *self, void *data)
          {
            return typeParameters(self->parameters, sizeof(self->parameters));
          }

          static PyObject *t_SearchGroup_get__groupValue(t_SearchGroup *self, void *data)
          {
            ::java::lang::Object value((jobject) NULL);
            OBJ_CALL(value = self->object._get_groupValue());
            return ::java::lang::t_Object::wrap_Object(value);
          }
          static int t_SearchGroup_set__groupValue(t_SearchGroup *self, PyObject *arg, void *data)
          {
            ::java::lang::Object value((jobject) NULL);
            if (!parseArg(arg, "o", &value))
            {
              INT_CALL(self->object._set_groupValue(value));
              return 0;
            }
            PyErr_SetArgsError((PyObject *) self, "groupValue", arg);
            return -1;
          }

          static PyObject *t_SearchGroup_get__sortValues(t_SearchGroup *self, void *data)
          {
            JArray< ::java::lang::Object > value((jobject) NULL);
            OBJ_CALL(value = self->object._get_sortValues());
            return JArray<jobject>(value.this$).wrap(::java::lang::t_Object::wrap_jobject);
          }
          static int t_SearchGroup_set__sortValues(t_SearchGroup *self, PyObject *arg, void *data)
          {
            JArray< ::java::lang::Object > value((jobject) NULL);
            if (!parseArg(arg, "[o", &value))
            {
              INT_CALL(self->object._set_sortValues(value));
              return 0;
            }
            PyErr_SetArgsError((PyObject *) self, "sortValues", arg);
            return -1;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queries/function/FunctionValues$ValueFiller.h"
#include "org/apache/lucene/util/mutable/MutableValue.h"
#include "java/io/IOException.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queries {
        namespace function {

          ::java::lang::Class *FunctionValues$ValueFiller::class$ = NULL;
          jmethodID *FunctionValues$ValueFiller::mids$ = NULL;
          bool FunctionValues$ValueFiller::live$ = false;

          jclass FunctionValues$ValueFiller::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/queries/function/FunctionValues$ValueFiller");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_f2cc1bce94666404] = env->getMethodID(cls, "<init>", "()V");
              mids$[mid_fillValue_040c4cd0390c5aff] = env->getMethodID(cls, "fillValue", "(I)V");
              mids$[mid_getValue_b6a1db04136f7d9b] = env->getMethodID(cls, "getValue", "()Lorg/apache/lucene/util/mutable/MutableValue;");

              class$ = new ::java::lang::Class(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          FunctionValues$ValueFiller::FunctionValues$ValueFiller() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_f2cc1bce94666404)) {}

          void FunctionValues$ValueFiller::fillValue(jint a0) const
          {
            env->callVoidMethod(this$, mids$[mid_fillValue_040c4cd0390c5aff], a0);
          }

          ::org::apache::lucene::util::mutable$::MutableValue FunctionValues$ValueFiller::getValue() const
          {
            return ::org::apache::lucene::util::mutable$::MutableValue(env->callObjectMethod(this$, mids$[mid_getValue_b6a1db04136f7d9b]));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queries {
        namespace function {
          static PyObject *t_FunctionValues$ValueFiller_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_FunctionValues$ValueFiller_instance_(PyTypeObject *type, PyObject *arg);
          static int t_FunctionValues$ValueFiller_init_(t_FunctionValues$ValueFiller *self, PyObject *args, PyObject *kwds);
          static PyObject *t_FunctionValues$ValueFiller_fillValue(t_FunctionValues$ValueFiller *self, PyObject *arg);
          static PyObject *t_FunctionValues$ValueFiller_getValue(t_FunctionValues$ValueFiller *self);
          static PyObject *t_FunctionValues$ValueFiller_get__value(t_FunctionValues$ValueFiller *self, void *data);
          static PyGetSetDef t_FunctionValues$ValueFiller__fields_[] = {
            DECLARE_GET_FIELD(t_FunctionValues$ValueFiller, value),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_FunctionValues$ValueFiller__methods_[] = {
            DECLARE_METHOD(t_FunctionValues$ValueFiller, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_FunctionValues$ValueFiller, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_FunctionValues$ValueFiller, fillValue, METH_O),
            DECLARE_METHOD(t_FunctionValues$ValueFiller, getValue, METH_NOARGS),
            { NULL, NULL, 0, NULL }
          };

          static PyType_Slot PY_TYPE_SLOTS(FunctionValues$ValueFiller)[] = {
            { Py_tp_methods, t_FunctionValues$ValueFiller__methods_ },
            { Py_tp_init, (void *) t_FunctionValues$ValueFiller_init_ },
            { Py_tp_getset, t_FunctionValues$ValueFiller__fields_ },
            { 0, NULL }
          };

          static PyType_Def *PY_TYPE_BASES(FunctionValues$ValueFiller)[] = {
            &PY_TYPE_DEF(::java::lang::Object),
            NULL
          };

          DEFINE_TYPE(FunctionValues$ValueFiller, t_FunctionValues$ValueFiller, FunctionValues$ValueFiller);

          void t_FunctionValues$ValueFiller::install(PyObject *module)
          {
            installType(&PY_TYPE(FunctionValues$ValueFiller), &PY_TYPE_DEF(FunctionValues$ValueFiller), module, "FunctionValues$ValueFiller", 0);
          }

          void t_FunctionValues$ValueFiller::initialize(PyObject *module)
          {
            PyObject_SetAttrString((PyObject *) PY_TYPE(FunctionValues$ValueFiller), "class_", make_descriptor(FunctionValues$ValueFiller::initializeClass, 1));
            PyObject_SetAttrString((PyObject *) PY_TYPE(FunctionValues$ValueFiller), "wrapfn_", make_descriptor(t_FunctionValues$ValueFiller::wrap_jobject));
            PyObject_SetAttrString((PyObject *) PY_TYPE(FunctionValues$ValueFiller), "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_FunctionValues$ValueFiller_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, FunctionValues$ValueFiller::initializeClass, 1)))
              return NULL;
            return t_FunctionValues$ValueFiller::wrap_Object(FunctionValues$ValueFiller(((t_FunctionValues$ValueFiller *) arg)->object.this$));
          }
          static PyObject *t_FunctionValues$ValueFiller_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, FunctionValues$ValueFiller::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_FunctionValues$ValueFiller_init_(t_FunctionValues$ValueFiller *self, PyObject *args, PyObject *kwds)
          {
            FunctionValues$ValueFiller object((jobject) NULL);

            INT_CALL(object = FunctionValues$ValueFiller());
            self->object = object;

            return 0;
          }

          static PyObject *t_FunctionValues$ValueFiller_fillValue(t_FunctionValues$ValueFiller *self, PyObject *arg)
          {
            jint a0;

            if (!parseArg(arg, "I", &a0))
            {
              OBJ_CALL(self->object.fillValue(a0));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError((PyObject *) self, "fillValue", arg);
            return NULL;
          }

          static PyObject *t_FunctionValues$ValueFiller_getValue(t_FunctionValues$ValueFiller *self)
          {
            ::org::apache::lucene::util::mutable$::MutableValue result((jobject) NULL);
            OBJ_CALL(result = self->object.getValue());
            return ::org::apache::lucene::util::mutable$::t_MutableValue::wrap_Object(result);
          }

          static PyObject *t_FunctionValues$ValueFiller_get__value(t_FunctionValues$ValueFiller *self, void *data)
          {
            ::org::apache::lucene::util::mutable$::MutableValue value((jobject) NULL);
            OBJ_CALL(value = self->object.getValue());
            return ::org::apache::lucene::util::mutable$::t_MutableValue::wrap_Object(value);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/ko/dict/TokenInfoDictionary.h"
#include "org/apache/lucene/analysis/ko/dict/TokenInfoFST.h"
#include "java/lang/Class.h"
#include "java/lang/String.h"
#include "org/apache/lucene/analysis/ko/dict/BinaryDictionary$ResourceScheme.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/analysis/ko/dict/TokenInfoDictionary.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace ko {
          namespace dict {

            ::java::lang::Class *TokenInfoDictionary::class$ = NULL;
            jmethodID *TokenInfoDictionary::mids$ = NULL;
            bool TokenInfoDictionary::live$ = false;
            ::java::lang::String *TokenInfoDictionary::FST_FILENAME_SUFFIX = NULL;

            jclass TokenInfoDictionary::initializeClass(bool getOnly)
            {
              if (getOnly)
                return (jclass) (live$ ? class$->this$ : NULL);
              if (class$ == NULL)
              {
                jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/ko/dict/TokenInfoDictionary");

                mids$ = new jmethodID[max_mid];
                mids$[mid_init$_6cf983c700d51b23] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/analysis/ko/dict/BinaryDictionary$ResourceScheme;Ljava/lang/String;)V");
                mids$[mid_getFST_40646bf76a22e5f0] = env->getMethodID(cls, "getFST", "()Lorg/apache/lucene/analysis/ko/dict/TokenInfoFST;");
                mids$[mid_getInstance_d4b59ead1a97ea14] = env->getStaticMethodID(cls, "getInstance", "()Lorg/apache/lucene/analysis/ko/dict/TokenInfoDictionary;");

                class$ = new ::java::lang::Class(cls);
                cls = (jclass) class$->this$;

                FST_FILENAME_SUFFIX = new ::java::lang::String(env->getStaticObjectField(cls, "FST_FILENAME_SUFFIX", "Ljava/lang/String;"));
                live$ = true;
              }
              return (jclass) class$->this$;
            }

            TokenInfoDictionary::TokenInfoDictionary(const ::org::apache::lucene::analysis::ko::dict::BinaryDictionary$ResourceScheme & a0, const ::java::lang::String & a1) : ::org::apache::lucene::analysis::ko::dict::BinaryDictionary(env->newObject(initializeClass, &mids$, mid_init$_6cf983c700d51b23, a0.this$, a1.this$)) {}

            ::org::apache::lucene::analysis::ko::dict::TokenInfoFST TokenInfoDictionary::getFST() const
            {
              return ::org::apache::lucene::analysis::ko::dict::TokenInfoFST(env->callObjectMethod(this$, mids$[mid_getFST_40646bf76a22e5f0]));
            }

            TokenInfoDictionary TokenInfoDictionary::getInstance()
            {
              jclass cls = env->getClass(initializeClass);
              return TokenInfoDictionary(env->callStaticObjectMethod(cls, mids$[mid_getInstance_d4b59ead1a97ea14]));
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace ko {
          namespace dict {
            static PyObject *t_TokenInfoDictionary_cast_(PyTypeObject *type, PyObject *arg);
            static PyObject *t_TokenInfoDictionary_instance_(PyTypeObject *type, PyObject *arg);
            static int t_TokenInfoDictionary_init_(t_TokenInfoDictionary *self, PyObject *args, PyObject *kwds);
            static PyObject *t_TokenInfoDictionary_getFST(t_TokenInfoDictionary *self);
            static PyObject *t_TokenInfoDictionary_getInstance(PyTypeObject *type);
            static PyObject *t_TokenInfoDictionary_get__fST(t_TokenInfoDictionary *self, void *data);
            static PyObject *t_TokenInfoDictionary_get__instance(t_TokenInfoDictionary *self, void *data);
            static PyGetSetDef t_TokenInfoDictionary__fields_[] = {
              DECLARE_GET_FIELD(t_TokenInfoDictionary, fST),
              DECLARE_GET_FIELD(t_TokenInfoDictionary, instance),
              { NULL, NULL, NULL, NULL, NULL }
            };

            static PyMethodDef t_TokenInfoDictionary__methods_[] = {
              DECLARE_METHOD(t_TokenInfoDictionary, cast_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_TokenInfoDictionary, instance_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_TokenInfoDictionary, getFST, METH_NOARGS),
              DECLARE_METHOD(t_TokenInfoDictionary, getInstance, METH_NOARGS | METH_CLASS),
              { NULL, NULL, 0, NULL }
            };

            static PyType_Slot PY_TYPE_SLOTS(TokenInfoDictionary)[] = {
              { Py_tp_methods, t_TokenInfoDictionary__methods_ },
              { Py_tp_init, (void *) t_TokenInfoDictionary_init_ },
              { Py_tp_getset, t_TokenInfoDictionary__fields_ },
              { 0, NULL }
            };

            static PyType_Def *PY_TYPE_BASES(TokenInfoDictionary)[] = {
              &PY_TYPE_DEF(::org::apache::lucene::analysis::ko::dict::BinaryDictionary),
              NULL
            };

            DEFINE_TYPE(TokenInfoDictionary, t_TokenInfoDictionary, TokenInfoDictionary);

            void t_TokenInfoDictionary::install(PyObject *module)
            {
              installType(&PY_TYPE(TokenInfoDictionary), &PY_TYPE_DEF(TokenInfoDictionary), module, "TokenInfoDictionary", 0);
            }

            void t_TokenInfoDictionary::initialize(PyObject *module)
            {
              PyObject_SetAttrString((PyObject *) PY_TYPE(TokenInfoDictionary), "class_", make_descriptor(TokenInfoDictionary::initializeClass, 1));
              PyObject_SetAttrString((PyObject *) PY_TYPE(TokenInfoDictionary), "wrapfn_", make_descriptor(t_TokenInfoDictionary::wrap_jobject));
              PyObject_SetAttrString((PyObject *) PY_TYPE(TokenInfoDictionary), "boxfn_", make_descriptor(boxObject));
              env->getClass(TokenInfoDictionary::initializeClass);
              PyObject_SetAttrString((PyObject *) PY_TYPE(TokenInfoDictionary), "FST_FILENAME_SUFFIX", make_descriptor(j2p(*TokenInfoDictionary::FST_FILENAME_SUFFIX)));
            }

            static PyObject *t_TokenInfoDictionary_cast_(PyTypeObject *type, PyObject *arg)
            {
              if (!(arg = castCheck(arg, TokenInfoDictionary::initializeClass, 1)))
                return NULL;
              return t_TokenInfoDictionary::wrap_Object(TokenInfoDictionary(((t_TokenInfoDictionary *) arg)->object.this$));
            }
            static PyObject *t_TokenInfoDictionary_instance_(PyTypeObject *type, PyObject *arg)
            {
              if (!castCheck(arg, TokenInfoDictionary::initializeClass, 0))
                Py_RETURN_FALSE;
              Py_RETURN_TRUE;
            }

            static int t_TokenInfoDictionary_init_(t_TokenInfoDictionary *self, PyObject *args, PyObject *kwds)
            {
              ::org::apache::lucene::analysis::ko::dict::BinaryDictionary$ResourceScheme a0((jobject) NULL);
              PyTypeObject **p0;
              ::java::lang::String a1((jobject) NULL);
              TokenInfoDictionary object((jobject) NULL);

              if (!parseArgs(args, "Ks", ::org::apache::lucene::analysis::ko::dict::BinaryDictionary$ResourceScheme::initializeClass, &a0, &p0, ::org::apache::lucene::analysis::ko::dict::t_BinaryDictionary$ResourceScheme::parameters_, &a1))
              {
                INT_CALL(object = TokenInfoDictionary(a0, a1));
                self->object = object;
              }
              else
              {
                PyErr_SetArgsError((PyObject *) self, "__init__", args);
                return -1;
              }

              return 0;
            }

            static PyObject *t_TokenInfoDictionary_getFST(t_TokenInfoDictionary *self)
            {
              ::org::apache::lucene::analysis::ko::dict::TokenInfoFST result((jobject) NULL);
              OBJ_CALL(result = self->object.getFST());
              return ::org::apache::lucene::analysis::ko::dict::t_TokenInfoFST::wrap_Object(result);
            }

            static PyObject *t_TokenInfoDictionary_getInstance(PyTypeObject *type)
            {
              TokenInfoDictionary result((jobject) NULL);
              OBJ_CALL(result = ::org::apache::lucene::analysis::ko::dict::TokenInfoDictionary::getInstance());
              return t_TokenInfoDictionary::wrap_Object(result);
            }

            static PyObject *t_TokenInfoDictionary_get__fST(t_TokenInfoDictionary *self, void *data)
            {
              ::org::apache::lucene::analysis::ko::dict::TokenInfoFST value((jobject) NULL);
              OBJ_CALL(value = self->object.getFST());
              return ::org::apache::lucene::analysis::ko::dict::t_TokenInfoFST::wrap_Object(value);
            }

            static PyObject *t_TokenInfoDictionary_get__instance(t_TokenInfoDictionary *self, void *data)
            {
              TokenInfoDictionary value((jobject) NULL);
              OBJ_CALL(value = self->object.getInstance());
              return t_TokenInfoDictionary::wrap_Object(value);
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queryparser/flexible/standard/builders/PhraseQueryNodeBuilder.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/queryparser/flexible/core/QueryNodeException.h"
#include "org/apache/lucene/queryparser/flexible/standard/builders/StandardQueryBuilder.h"
#include "org/apache/lucene/queryparser/flexible/core/nodes/QueryNode.h"
#include "org/apache/lucene/search/Query.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace standard {
            namespace builders {

              ::java::lang::Class *PhraseQueryNodeBuilder::class$ = NULL;
              jmethodID *PhraseQueryNodeBuilder::mids$ = NULL;
              bool PhraseQueryNodeBuilder::live$ = false;

              jclass PhraseQueryNodeBuilder::initializeClass(bool getOnly)
              {
                if (getOnly)
                  return (jclass) (live$ ? class$->this$ : NULL);
                if (class$ == NULL)
                {
                  jclass cls = (jclass) env->findClass("org/apache/lucene/queryparser/flexible/standard/builders/PhraseQueryNodeBuilder");

                  mids$ = new jmethodID[max_mid];
                  mids$[mid_init$_f2cc1bce94666404] = env->getMethodID(cls, "<init>", "()V");
                  mids$[mid_build_266d6dc3b958f456] = env->getMethodID(cls, "build", "(Lorg/apache/lucene/queryparser/flexible/core/nodes/QueryNode;)Lorg/apache/lucene/search/Query;");

                  class$ = new ::java::lang::Class(cls);
                  live$ = true;
                }
                return (jclass) class$->this$;
              }

              PhraseQueryNodeBuilder::PhraseQueryNodeBuilder() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_f2cc1bce94666404)) {}

              ::org::apache::lucene::search::Query PhraseQueryNodeBuilder::build(const ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode & a0) const
              {
                return ::org::apache::lucene::search::Query(env->callObjectMethod(this$, mids$[mid_build_266d6dc3b958f456], a0.this$));
              }
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace standard {
            namespace builders {
              static PyObject *t_PhraseQueryNodeBuilder_cast_(PyTypeObject *type, PyObject *arg);
              static PyObject *t_PhraseQueryNodeBuilder_instance_(PyTypeObject *type, PyObject *arg);
              static int t_PhraseQueryNodeBuilder_init_(t_PhraseQueryNodeBuilder *self, PyObject *args, PyObject *kwds);
              static PyObject *t_PhraseQueryNodeBuilder_build(t_PhraseQueryNodeBuilder *self, PyObject *arg);

              static PyMethodDef t_PhraseQueryNodeBuilder__methods_[] = {
                DECLARE_METHOD(t_PhraseQueryNodeBuilder, cast_, METH_O | METH_CLASS),
                DECLARE_METHOD(t_PhraseQueryNodeBuilder, instance_, METH_O | METH_CLASS),
                DECLARE_METHOD(t_PhraseQueryNodeBuilder, build, METH_O),
                { NULL, NULL, 0, NULL }
              };

              static PyType_Slot PY_TYPE_SLOTS(PhraseQueryNodeBuilder)[] = {
                { Py_tp_methods, t_PhraseQueryNodeBuilder__methods_ },
                { Py_tp_init, (void *) t_PhraseQueryNodeBuilder_init_ },
                { 0, NULL }
              };

              static PyType_Def *PY_TYPE_BASES(PhraseQueryNodeBuilder)[] = {
                &PY_TYPE_DEF(::java::lang::Object),
                NULL
              };

              DEFINE_TYPE(PhraseQueryNodeBuilder, t_PhraseQueryNodeBuilder, PhraseQueryNodeBuilder);

              void t_PhraseQueryNodeBuilder::install(PyObject *module)
              {
                installType(&PY_TYPE(PhraseQueryNodeBuilder), &PY_TYPE_DEF(PhraseQueryNodeBuilder), module, "PhraseQueryNodeBuilder", 0);
              }

              void t_PhraseQueryNodeBuilder::initialize(PyObject *module)
              {
                PyObject_SetAttrString((PyObject *) PY_TYPE(PhraseQueryNodeBuilder), "class_", make_descriptor(PhraseQueryNodeBuilder::initializeClass, 1));
                PyObject_SetAttrString((PyObject *) PY_TYPE(PhraseQueryNodeBuilder), "wrapfn_", make_descriptor(t_PhraseQueryNodeBuilder::wrap_jobject));
                PyObject_SetAttrString((PyObject *) PY_TYPE(PhraseQueryNodeBuilder), "boxfn_", make_descriptor(boxObject));
              }

              static PyObject *t_PhraseQueryNodeBuilder_cast_(PyTypeObject *type, PyObject *arg)
              {
                if (!(arg = castCheck(arg, PhraseQueryNodeBuilder::initializeClass, 1)))
                  return NULL;
                return t_PhraseQueryNodeBuilder::wrap_Object(PhraseQueryNodeBuilder(((t_PhraseQueryNodeBuilder *) arg)->object.this$));
              }
              static PyObject *t_PhraseQueryNodeBuilder_instance_(PyTypeObject *type, PyObject *arg)
              {
                if (!castCheck(arg, PhraseQueryNodeBuilder::initializeClass, 0))
                  Py_RETURN_FALSE;
                Py_RETURN_TRUE;
              }

              static int t_PhraseQueryNodeBuilder_init_(t_PhraseQueryNodeBuilder *self, PyObject *args, PyObject *kwds)
              {
                PhraseQueryNodeBuilder object((jobject) NULL);

                INT_CALL(object = PhraseQueryNodeBuilder());
                self->object = object;

                return 0;
              }

              static PyObject *t_PhraseQueryNodeBuilder_build(t_PhraseQueryNodeBuilder *self, PyObject *arg)
              {
                ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode a0((jobject) NULL);
                ::org::apache::lucene::search::Query result((jobject) NULL);

                if (!parseArg(arg, "k", ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode::initializeClass, &a0))
                {
                  OBJ_CALL(result = self->object.build(a0));
                  return ::org::apache::lucene::search::t_Query::wrap_Object(result);
                }

                PyErr_SetArgsError((PyObject *) self, "build", arg);
                return NULL;
              }
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/pt/PortugueseLightStemmer.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace pt {

          ::java::lang::Class *PortugueseLightStemmer::class$ = NULL;
          jmethodID *PortugueseLightStemmer::mids$ = NULL;
          bool PortugueseLightStemmer::live$ = false;

          jclass PortugueseLightStemmer::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/pt/PortugueseLightStemmer");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_f2cc1bce94666404] = env->getMethodID(cls, "<init>", "()V");
              mids$[mid_stem_d4655f2a19359017] = env->getMethodID(cls, "stem", "([CI)I");

              class$ = new ::java::lang::Class(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          PortugueseLightStemmer::PortugueseLightStemmer() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_f2cc1bce94666404)) {}

          jint PortugueseLightStemmer::stem(const JArray< jchar > & a0, jint a1) const
          {
            return env->callIntMethod(this$, mids$[mid_stem_d4655f2a19359017], a0.this$, a1);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace pt {
          static PyObject *t_PortugueseLightStemmer_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_PortugueseLightStemmer_instance_(PyTypeObject *type, PyObject *arg);
          static int t_PortugueseLightStemmer_init_(t_PortugueseLightStemmer *self, PyObject *args, PyObject *kwds);
          static PyObject *t_PortugueseLightStemmer_stem(t_PortugueseLightStemmer *self, PyObject *args);

          static PyMethodDef t_PortugueseLightStemmer__methods_[] = {
            DECLARE_METHOD(t_PortugueseLightStemmer, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_PortugueseLightStemmer, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_PortugueseLightStemmer, stem, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          static PyType_Slot PY_TYPE_SLOTS(PortugueseLightStemmer)[] = {
            { Py_tp_methods, t_PortugueseLightStemmer__methods_ },
            { Py_tp_init, (void *) t_PortugueseLightStemmer_init_ },
            { 0, NULL }
          };

          static PyType_Def *PY_TYPE_BASES(PortugueseLightStemmer)[] = {
            &PY_TYPE_DEF(::java::lang::Object),
            NULL
          };

          DEFINE_TYPE(PortugueseLightStemmer, t_PortugueseLightStemmer, PortugueseLightStemmer);

          void t_PortugueseLightStemmer::install(PyObject *module)
          {
            installType(&PY_TYPE(PortugueseLightStemmer), &PY_TYPE_DEF(PortugueseLightStemmer), module, "PortugueseLightStemmer", 0);
          }

          void t_PortugueseLightStemmer::initialize(PyObject *module)
          {
            PyObject_SetAttrString((PyObject *) PY_TYPE(PortugueseLightStemmer), "class_", make_descriptor(PortugueseLightStemmer::initializeClass, 1));
            PyObject_SetAttrString((PyObject *) PY_TYPE(PortugueseLightStemmer), "wrapfn_", make_descriptor(t_PortugueseLightStemmer::wrap_jobject));
            PyObject_SetAttrString((PyObject *) PY_TYPE(PortugueseLightStemmer), "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_PortugueseLightStemmer_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, PortugueseLightStemmer::initializeClass, 1)))
              return NULL;
            return t_PortugueseLightStemmer::wrap_Object(PortugueseLightStemmer(((t_PortugueseLightStemmer *) arg)->object.this$));
          }
          static PyObject *t_PortugueseLightStemmer_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, PortugueseLightStemmer::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_PortugueseLightStemmer_init_(t_PortugueseLightStemmer *self, PyObject *args, PyObject *kwds)
          {
            PortugueseLightStemmer object((jobject) NULL);

            INT_CALL(object = PortugueseLightStemmer());
            self->object = object;

            return 0;
          }

          static PyObject *t_PortugueseLightStemmer_stem(t_PortugueseLightStemmer *self, PyObject *args)
          {
            JArray< jchar > a0((jobject) NULL);
            jint a1;
            jint result;

            if (!parseArgs(args, "[CI", &a0, &a1))
            {
              OBJ_CALL(result = self->object.stem(a0, a1));
              return PyLong_FromLong((long) result);
            }

            PyErr_SetArgsError((PyObject *) self, "stem", args);
            return NULL;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/ja/JapaneseTokenizer$Type.h"
#include "java/lang/String.h"
#include "org/apache/lucene/analysis/ja/JapaneseTokenizer$Type.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace ja {

          ::java::lang::Class *JapaneseTokenizer$Type::class$ = NULL;
          jmethodID *JapaneseTokenizer$Type::mids$ = NULL;
          bool JapaneseTokenizer$Type::live$ = false;
          JapaneseTokenizer$Type *JapaneseTokenizer$Type::KNOWN = NULL;
          JapaneseTokenizer$Type *JapaneseTokenizer$Type::UNKNOWN = NULL;
          JapaneseTokenizer$Type *JapaneseTokenizer$Type::USER = NULL;

          jclass JapaneseTokenizer$Type::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/ja/JapaneseTokenizer$Type");

              mids$ = new jmethodID[max_mid];
              mids$[mid_valueOf_4fe1aca2b00f6d69] = env->getStaticMethodID(cls, "valueOf", "(Ljava/lang/String;)Lorg/apache/lucene/analysis/ja/JapaneseTokenizer$Type;");
              mids$[mid_values_9d9939789fda3555] = env->getStaticMethodID(cls, "values", "()[Lorg/apache/lucene/analysis/ja/JapaneseTokenizer$Type;");

              class$ = new ::java::lang::Class(cls);
              cls = (jclass) class$->this$;

              KNOWN = new JapaneseTokenizer$Type(env->getStaticObjectField(cls, "KNOWN", "Lorg/apache/lucene/analysis/ja/JapaneseTokenizer$Type;"));
              UNKNOWN = new JapaneseTokenizer$Type(env->getStaticObjectField(cls, "UNKNOWN", "Lorg/apache/lucene/analysis/ja/JapaneseTokenizer$Type;"));
              USER = new JapaneseTokenizer$Type(env->getStaticObjectField(cls, "USER", "Lorg/apache/lucene/analysis/ja/JapaneseTokenizer$Type;"));
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          JapaneseTokenizer$Type JapaneseTokenizer$Type::valueOf(const ::java::lang::String & a0)
          {
            jclass cls = env->getClass(initializeClass);
            return JapaneseTokenizer$Type(env->callStaticObjectMethod(cls, mids$[mid_valueOf_4fe1aca2b00f6d69], a0.this$));
          }

          JArray< JapaneseTokenizer$Type > JapaneseTokenizer$Type::values()
          {
            jclass cls = env->getClass(initializeClass);
            return JArray< JapaneseTokenizer$Type >(env->callStaticObjectMethod(cls, mids$[mid_values_9d9939789fda3555]));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace ja {
          static PyObject *t_JapaneseTokenizer$Type_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_JapaneseTokenizer$Type_instance_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_JapaneseTokenizer$Type_of_(t_JapaneseTokenizer$Type *self, PyObject *args);
          static PyObject *t_JapaneseTokenizer$Type_valueOf(PyTypeObject *type, PyObject *args);
          static PyObject *t_JapaneseTokenizer$Type_values(PyTypeObject *type);
          static PyObject *t_JapaneseTokenizer$Type_get__parameters_(t_JapaneseTokenizer$Type *self, void *data);
          static PyGetSetDef t_JapaneseTokenizer$Type__fields_[] = {
            DECLARE_GET_FIELD(t_JapaneseTokenizer$Type, parameters_),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_JapaneseTokenizer$Type__methods_[] = {
            DECLARE_METHOD(t_JapaneseTokenizer$Type, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_JapaneseTokenizer$Type, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_JapaneseTokenizer$Type, of_, METH_VARARGS),
            DECLARE_METHOD(t_JapaneseTokenizer$Type, valueOf, METH_VARARGS | METH_CLASS),
            DECLARE_METHOD(t_JapaneseTokenizer$Type, values, METH_NOARGS | METH_CLASS),
            { NULL, NULL, 0, NULL }
          };

          static PyType_Slot PY_TYPE_SLOTS(JapaneseTokenizer$Type)[] = {
            { Py_tp_methods, t_JapaneseTokenizer$Type__methods_ },
            { Py_tp_init, (void *) abstract_init },
            { Py_tp_getset, t_JapaneseTokenizer$Type__fields_ },
            { 0, NULL }
          };

          static PyType_Def *PY_TYPE_BASES(JapaneseTokenizer$Type)[] = {
            &PY_TYPE_DEF(::java::lang::Enum),
            NULL
          };

          DEFINE_TYPE(JapaneseTokenizer$Type, t_JapaneseTokenizer$Type, JapaneseTokenizer$Type);
          PyObject *t_JapaneseTokenizer$Type::wrap_Object(const JapaneseTokenizer$Type& object, PyTypeObject *p0)
          {
            PyObject *obj = t_JapaneseTokenizer$Type::wrap_Object(object);
            if (obj != NULL && obj != Py_None)
            {
              t_JapaneseTokenizer$Type *self = (t_JapaneseTokenizer$Type *) obj;
              self->parameters[0] = p0;
            }
            return obj;
          }

          PyObject *t_JapaneseTokenizer$Type::wrap_jobject(const jobject& object, PyTypeObject *p0)
          {
            PyObject *obj = t_JapaneseTokenizer$Type::wrap_jobject(object);
            if (obj != NULL && obj != Py_None)
            {
              t_JapaneseTokenizer$Type *self = (t_JapaneseTokenizer$Type *) obj;
              self->parameters[0] = p0;
            }
            return obj;
          }

          void t_JapaneseTokenizer$Type::install(PyObject *module)
          {
            installType(&PY_TYPE(JapaneseTokenizer$Type), &PY_TYPE_DEF(JapaneseTokenizer$Type), module, "JapaneseTokenizer$Type", 0);
          }

          void t_JapaneseTokenizer$Type::initialize(PyObject *module)
          {
            PyObject_SetAttrString((PyObject *) PY_TYPE(JapaneseTokenizer$Type), "class_", make_descriptor(JapaneseTokenizer$Type::initializeClass, 1));
            PyObject_SetAttrString((PyObject *) PY_TYPE(JapaneseTokenizer$Type), "wrapfn_", make_descriptor(t_JapaneseTokenizer$Type::wrap_jobject));
            PyObject_SetAttrString((PyObject *) PY_TYPE(JapaneseTokenizer$Type), "boxfn_", make_descriptor(boxObject));
            env->getClass(JapaneseTokenizer$Type::initializeClass);
            PyObject_SetAttrString((PyObject *) PY_TYPE(JapaneseTokenizer$Type), "KNOWN", make_descriptor(t_JapaneseTokenizer$Type::wrap_Object(*JapaneseTokenizer$Type::KNOWN)));
            PyObject_SetAttrString((PyObject *) PY_TYPE(JapaneseTokenizer$Type), "UNKNOWN", make_descriptor(t_JapaneseTokenizer$Type::wrap_Object(*JapaneseTokenizer$Type::UNKNOWN)));
            PyObject_SetAttrString((PyObject *) PY_TYPE(JapaneseTokenizer$Type), "USER", make_descriptor(t_JapaneseTokenizer$Type::wrap_Object(*JapaneseTokenizer$Type::USER)));
          }

          static PyObject *t_JapaneseTokenizer$Type_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, JapaneseTokenizer$Type::initializeClass, 1)))
              return NULL;
            return t_JapaneseTokenizer$Type::wrap_Object(JapaneseTokenizer$Type(((t_JapaneseTokenizer$Type *) arg)->object.this$));
          }
          static PyObject *t_JapaneseTokenizer$Type_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, JapaneseTokenizer$Type::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static PyObject *t_JapaneseTokenizer$Type_of_(t_JapaneseTokenizer$Type *self, PyObject *args)
          {
            if (!parseArg(args, "T", 1, &(self->parameters)))
              Py_RETURN_SELF;
            return PyErr_SetArgsError((PyObject *) self, "of_", args);
          }

          static PyObject *t_JapaneseTokenizer$Type_valueOf(PyTypeObject *type, PyObject *args)
          {
            ::java::lang::String a0((jobject) NULL);
            JapaneseTokenizer$Type result((jobject) NULL);

            if (!parseArgs(args, "s", &a0))
            {
              OBJ_CALL(result = ::org::apache::lucene::analysis::ja::JapaneseTokenizer$Type::valueOf(a0));
              return t_JapaneseTokenizer$Type::wrap_Object(result);
            }

            return callSuper(type, "valueOf", args, 2);
          }

          static PyObject *t_JapaneseTokenizer$Type_values(PyTypeObject *type)
          {
            JArray< JapaneseTokenizer$Type > result((jobject) NULL);
            OBJ_CALL(result = ::org::apache::lucene::analysis::ja::JapaneseTokenizer$Type::values());
            return JArray<jobject>(result.this$).wrap(t_JapaneseTokenizer$Type::wrap_jobject);
          }
          static PyObject *t_JapaneseTokenizer$Type_get__parameters_(t_JapaneseTokenizer$Type *self, void *data)
          {
            return typeParameters(self->parameters, sizeof(self->parameters));
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queryparser/flexible/standard/builders/TermRangeQueryNodeBuilder.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/queryparser/flexible/core/QueryNodeException.h"
#include "org/apache/lucene/queryparser/flexible/standard/builders/StandardQueryBuilder.h"
#include "org/apache/lucene/queryparser/flexible/core/nodes/QueryNode.h"
#include "org/apache/lucene/search/TermRangeQuery.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace standard {
            namespace builders {

              ::java::lang::Class *TermRangeQueryNodeBuilder::class$ = NULL;
              jmethodID *TermRangeQueryNodeBuilder::mids$ = NULL;
              bool TermRangeQueryNodeBuilder::live$ = false;

              jclass TermRangeQueryNodeBuilder::initializeClass(bool getOnly)
              {
                if (getOnly)
                  return (jclass) (live$ ? class$->this$ : NULL);
                if (class$ == NULL)
                {
                  jclass cls = (jclass) env->findClass("org/apache/lucene/queryparser/flexible/standard/builders/TermRangeQueryNodeBuilder");

                  mids$ = new jmethodID[max_mid];
                  mids$[mid_init$_f2cc1bce94666404] = env->getMethodID(cls, "<init>", "()V");
                  mids$[mid_build_824060876dd685eb] = env->getMethodID(cls, "build", "(Lorg/apache/lucene/queryparser/flexible/core/nodes/QueryNode;)Lorg/apache/lucene/search/TermRangeQuery;");

                  class$ = new ::java::lang::Class(cls);
                  live$ = true;
                }
                return (jclass) class$->this$;
              }

              TermRangeQueryNodeBuilder::TermRangeQueryNodeBuilder() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_f2cc1bce94666404)) {}

              ::org::apache::lucene::search::TermRangeQuery TermRangeQueryNodeBuilder::build(const ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode & a0) const
              {
                return ::org::apache::lucene::search::TermRangeQuery(env->callObjectMethod(this$, mids$[mid_build_824060876dd685eb], a0.this$));
              }
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace standard {
            namespace builders {
              static PyObject *t_TermRangeQueryNodeBuilder_cast_(PyTypeObject *type, PyObject *arg);
              static PyObject *t_TermRangeQueryNodeBuilder_instance_(PyTypeObject *type, PyObject *arg);
              static int t_TermRangeQueryNodeBuilder_init_(t_TermRangeQueryNodeBuilder *self, PyObject *args, PyObject *kwds);
              static PyObject *t_TermRangeQueryNodeBuilder_build(t_TermRangeQueryNodeBuilder *self, PyObject *arg);

              static PyMethodDef t_TermRangeQueryNodeBuilder__methods_[] = {
                DECLARE_METHOD(t_TermRangeQueryNodeBuilder, cast_, METH_O | METH_CLASS),
                DECLARE_METHOD(t_TermRangeQueryNodeBuilder, instance_, METH_O | METH_CLASS),
                DECLARE_METHOD(t_TermRangeQueryNodeBuilder, build, METH_O),
                { NULL, NULL, 0, NULL }
              };

              static PyType_Slot PY_TYPE_SLOTS(TermRangeQueryNodeBuilder)[] = {
                { Py_tp_methods, t_TermRangeQueryNodeBuilder__methods_ },
                { Py_tp_init, (void *) t_TermRangeQueryNodeBuilder_init_ },
                { 0, NULL }
              };

              static PyType_Def *PY_TYPE_BASES(TermRangeQueryNodeBuilder)[] = {
                &PY_TYPE_DEF(::java::lang::Object),
                NULL
              };

              DEFINE_TYPE(TermRangeQueryNodeBuilder, t_TermRangeQueryNodeBuilder, TermRangeQueryNodeBuilder);

              void t_TermRangeQueryNodeBuilder::install(PyObject *module)
              {
                installType(&PY_TYPE(TermRangeQueryNodeBuilder), &PY_TYPE_DEF(TermRangeQueryNodeBuilder), module, "TermRangeQueryNodeBuilder", 0);
              }

              void t_TermRangeQueryNodeBuilder::initialize(PyObject *module)
              {
                PyObject_SetAttrString((PyObject *) PY_TYPE(TermRangeQueryNodeBuilder), "class_", make_descriptor(TermRangeQueryNodeBuilder::initializeClass, 1));
                PyObject_SetAttrString((PyObject *) PY_TYPE(TermRangeQueryNodeBuilder), "wrapfn_", make_descriptor(t_TermRangeQueryNodeBuilder::wrap_jobject));
                PyObject_SetAttrString((PyObject *) PY_TYPE(TermRangeQueryNodeBuilder), "boxfn_", make_descriptor(boxObject));
              }

              static PyObject *t_TermRangeQueryNodeBuilder_cast_(PyTypeObject *type, PyObject *arg)
              {
                if (!(arg = castCheck(arg, TermRangeQueryNodeBuilder::initializeClass, 1)))
                  return NULL;
                return t_TermRangeQueryNodeBuilder::wrap_Object(TermRangeQueryNodeBuilder(((t_TermRangeQueryNodeBuilder *) arg)->object.this$));
              }
              static PyObject *t_TermRangeQueryNodeBuilder_instance_(PyTypeObject *type, PyObject *arg)
              {
                if (!castCheck(arg, TermRangeQueryNodeBuilder::initializeClass, 0))
                  Py_RETURN_FALSE;
                Py_RETURN_TRUE;
              }

              static int t_TermRangeQueryNodeBuilder_init_(t_TermRangeQueryNodeBuilder *self, PyObject *args, PyObject *kwds)
              {
                TermRangeQueryNodeBuilder object((jobject) NULL);

                INT_CALL(object = TermRangeQueryNodeBuilder());
                self->object = object;

                return 0;
              }

              static PyObject *t_TermRangeQueryNodeBuilder_build(t_TermRangeQueryNodeBuilder *self, PyObject *arg)
              {
                ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode a0((jobject) NULL);
                ::org::apache::lucene::search::TermRangeQuery result((jobject) NULL);

                if (!parseArg(arg, "k", ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode::initializeClass, &a0))
                {
                  OBJ_CALL(result = self->object.build(a0));
                  return ::org::apache::lucene::search::t_TermRangeQuery::wrap_Object(result);
                }

                PyErr_SetArgsError((PyObject *) self, "build", arg);
                return NULL;
              }
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/util/fst/Util$FSTPath.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/util/fst/FST$Arc.h"
#include "org/apache/lucene/util/IntsRefBuilder.h"
#include "java/lang/String.h"
#include "java/lang/CharSequence.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        namespace fst {

          ::java::lang::Class *Util$FSTPath::class$ = NULL;
          jmethodID *Util$FSTPath::mids$ = NULL;
          jfieldID *Util$FSTPath::fids$ = NULL;
          bool Util$FSTPath::live$ = false;

          jclass Util$FSTPath::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/util/fst/Util$FSTPath");

              mids$ = new jmethodID[max_mid];
              mids$[mid_toString_db9b55ba01e03e4b] = env->getMethodID(cls, "toString", "()Ljava/lang/String;");

              fids$ = new jfieldID[max_fid];
              fids$[fid_arc] = env->getFieldID(cls, "arc", "Lorg/apache/lucene/util/fst/FST$Arc;");
              fids$[fid_boost] = env->getFieldID(cls, "boost", "F");
              fids$[fid_context] = env->getFieldID(cls, "context", "Ljava/lang/CharSequence;");
              fids$[fid_input] = env->getFieldID(cls, "input", "Lorg/apache/lucene/util/IntsRefBuilder;");
              fids$[fid_output] = env->getFieldID(cls, "output", "Ljava/lang/Object;");
              fids$[fid_payload] = env->getFieldID(cls, "payload", "I");

              class$ = new ::java::lang::Class(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          ::java::lang::String Util$FSTPath::toString() const
          {
            return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_db9b55ba01e03e4b]));
          }

          ::org::apache::lucene::util::fst::FST$Arc Util$FSTPath::_get_arc() const
          {
            return ::org::apache::lucene::util::fst::FST$Arc(env->getObjectField(this$, fids$[fid_arc]));
          }

          void Util$FSTPath::_set_arc(const ::org::apache::lucene::util::fst::FST$Arc & a0) const
          {
            env->setObjectField(this$, fids$[fid_arc], a0.this$);
          }

          jfloat Util$FSTPath::_get_boost() const
          {
            return env->getFloatField(this$, fids$[fid_boost]);
          }

          ::java::lang::CharSequence Util$FSTPath::_get_context() const
          {
            return ::java::lang::CharSequence(env->getObjectField(this$, fids$[fid_context]));
          }

          ::org::apache::lucene::util::IntsRefBuilder Util$FSTPath::_get_input() const
          {
            return ::org::apache::lucene::util::IntsRefBuilder(env->getObjectField(this$, fids$[fid_input]));
          }

          ::java::lang::Object Util$FSTPath::_get_output() const
          {
            return ::java::lang::Object(env->getObjectField(this$, fids$[fid_output]));
          }

          void Util$FSTPath::_set_output(const ::java::lang::Object & a0) const
          {
            env->setObjectField(this$, fids$[fid_output], a0.this$);
          }

          jint Util$FSTPath::_get_payload() const
          {
            return env->getIntField(this$, fids$[fid_payload]);
          }

          void Util$FSTPath::_set_payload(jint a0) const
          {
            env->setIntField(this$, fids$[fid_payload], a0);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        namespace fst {
          static PyObject *t_Util$FSTPath_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_Util$FSTPath_instance_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_Util$FSTPath_of_(t_Util$FSTPath *self, PyObject *args);
          static PyObject *t_Util$FSTPath_toString(t_Util$FSTPath *self, PyObject *args);
          static PyObject *t_Util$FSTPath_get__arc(t_Util$FSTPath *self, void *data);
          static int t_Util$FSTPath_set__arc(t_Util$FSTPath *self, PyObject *arg, void *data);
          static PyObject *t_Util$FSTPath_get__boost(t_Util$FSTPath *self, void *data);
          static PyObject *t_Util$FSTPath_get__context(t_Util$FSTPath *self, void *data);
          static PyObject *t_Util$FSTPath_get__input(t_Util$FSTPath *self, void *data);
          static PyObject *t_Util$FSTPath_get__output(t_Util$FSTPath *self, void *data);
          static int t_Util$FSTPath_set__output(t_Util$FSTPath *self, PyObject *arg, void *data);
          static PyObject *t_Util$FSTPath_get__payload(t_Util$FSTPath *self, void *data);
          static int t_Util$FSTPath_set__payload(t_Util$FSTPath *self, PyObject *arg, void *data);

          static PyObject *t_Util$FSTPath_get__parameters_(t_Util$FSTPath *self, void *data);
          static PyGetSetDef t_Util$FSTPath__fields_[] = {
            DECLARE_GETSET_FIELD(t_Util$FSTPath, arc),
            DECLARE_GET_FIELD(t_Util$FSTPath, boost),
            DECLARE_GET_FIELD(t_Util$FSTPath, context),
            DECLARE_GET_FIELD(t_Util$FSTPath, input),
            DECLARE_GETSET_FIELD(t_Util$FSTPath, output),
            DECLARE_GETSET_FIELD(t_Util$FSTPath, payload),
            DECLARE_GET_FIELD(t_Util$FSTPath, parameters_),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_Util$FSTPath__methods_[] = {
            DECLARE_METHOD(t_Util$FSTPath, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_Util$FSTPath, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_Util$FSTPath, of_, METH_VARARGS),
            DECLARE_METHOD(t_Util$FSTPath, toString, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          static PyType_Slot PY_TYPE_SLOTS(Util$FSTPath)[] = {
            { Py_tp_methods, t_Util$FSTPath__methods_ },
            { Py_tp_init, (void *) abstract_init },
            { Py_tp_getset, t_Util$FSTPath__fields_ },
            { 0, NULL }
          };

          static PyType_Def *PY_TYPE_BASES(Util$FSTPath)[] = {
            &PY_TYPE_DEF(::java::lang::Object),
            NULL
          };

          DEFINE_TYPE(Util$FSTPath, t_Util$FSTPath, Util$FSTPath);
          PyObject *t_Util$FSTPath::wrap_Object(const Util$FSTPath& object, PyTypeObject *p0)
          {
            PyObject *obj = t_Util$FSTPath::wrap_Object(object);
            if (obj != NULL && obj != Py_None)
            {
              t_Util$FSTPath *self = (t_Util$FSTPath *) obj;
              self->parameters[0] = p0;
            }
            return obj;
          }

          PyObject *t_Util$FSTPath::wrap_jobject(const jobject& object, PyTypeObject *p0)
          {
            PyObject *obj = t_Util$FSTPath::wrap_jobject(object);
            if (obj != NULL && obj != Py_None)
            {
              t_Util$FSTPath *self = (t_Util$FSTPath *) obj;
              self->parameters[0] = p0;
            }
            return obj;
          }

          void t_Util$FSTPath::install(PyObject *module)
          {
            installType(&PY_TYPE(Util$FSTPath), &PY_TYPE_DEF(Util$FSTPath), module, "Util$FSTPath", 0);
          }

          void t_Util$FSTPath::initialize(PyObject *module)
          {
            PyObject_SetAttrString((PyObject *) PY_TYPE(Util$FSTPath), "class_", make_descriptor(Util$FSTPath::initializeClass, 1));
            PyObject_SetAttrString((PyObject *) PY_TYPE(Util$FSTPath), "wrapfn_", make_descriptor(t_Util$FSTPath::wrap_jobject));
            PyObject_SetAttrString((PyObject *) PY_TYPE(Util$FSTPath), "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_Util$FSTPath_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, Util$FSTPath::initializeClass, 1)))
              return NULL;
            return t_Util$FSTPath::wrap_Object(Util$FSTPath(((t_Util$FSTPath *) arg)->object.this$));
          }
          static PyObject *t_Util$FSTPath_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, Util$FSTPath::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static PyObject *t_Util$FSTPath_of_(t_Util$FSTPath *self, PyObject *args)
          {
            if (!parseArg(args, "T", 1, &(self->parameters)))
              Py_RETURN_SELF;
            return PyErr_SetArgsError((PyObject *) self, "of_", args);
          }

          static PyObject *t_Util$FSTPath_toString(t_Util$FSTPath *self, PyObject *args)
          {
            ::java::lang::String result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.toString());
              return j2p(result);
            }

            return callSuper(PY_TYPE(Util$FSTPath), (PyObject *) self, "toString", args, 2);
          }
          static PyObject *t_Util$FSTPath_get__parameters_(t_Util$FSTPath *self, void *data)
          {
            return typeParameters(self->parameters, sizeof(self->parameters));
          }

          static PyObject *t_Util$FSTPath_get__arc(t_Util$FSTPath *self, void *data)
          {
            ::org::apache::lucene::util::fst::FST$Arc value((jobject) NULL);
            OBJ_CALL(value = self->object._get_arc());
            return ::org::apache::lucene::util::fst::t_FST$Arc::wrap_Object(value);
          }
          static int t_Util$FSTPath_set__arc(t_Util$FSTPath *self, PyObject *arg, void *data)
          {
            ::org::apache::lucene::util::fst::FST$Arc value((jobject) NULL);
            if (!parseArg(arg, "k", ::org::apache::lucene::util::fst::FST$Arc::initializeClass, &value))
            {
              INT_CALL(self->object._set_arc(value));
              return 0;
            }
            PyErr_SetArgsError((PyObject *) self, "arc", arg);
            return -1;
          }

          static PyObject *t_Util$FSTPath_get__boost(t_Util$FSTPath *self, void *data)
          {
            jfloat value;
            OBJ_CALL(value = self->object._get_boost());
            return PyFloat_FromDouble((double) value);
          }

          static PyObject *t_Util$FSTPath_get__context(t_Util$FSTPath *self, void *data)
          {
            ::java::lang::CharSequence value((jobject) NULL);
            OBJ_CALL(value = self->object._get_context());
            return ::java::lang::t_CharSequence::wrap_Object(value);
          }

          static PyObject *t_Util$FSTPath_get__input(t_Util$FSTPath *self, void *data)
          {
            ::org::apache::lucene::util::IntsRefBuilder value((jobject) NULL);
            OBJ_CALL(value = self->object._get_input());
            return ::org::apache::lucene::util::t_IntsRefBuilder::wrap_Object(value);
          }

          static PyObject *t_Util$FSTPath_get__output(t_Util$FSTPath *self, void *data)
          {
            ::java::lang::Object value((jobject) NULL);
            OBJ_CALL(value = self->object._get_output());
            return ::java::lang::t_Object::wrap_Object(value);
          }
          static int t_Util$FSTPath_set__output(t_Util$FSTPath *self, PyObject *arg, void *data)
          {
            ::java::lang::Object value((jobject) NULL);
            if (!parseArg(arg, "o", &value))
            {
              INT_CALL(self->object._set_output(value));
              return 0;
            }
            PyErr_SetArgsError((PyObject *) self, "output", arg);
            return -1;
          }

          static PyObject *t_Util$FSTPath_get__payload(t_Util$FSTPath *self, void *data)
          {
            jint value;
            OBJ_CALL(value = self->object._get_payload());
            return PyLong_FromLong((long) value);
          }
          static int t_Util$FSTPath_set__payload(t_Util$FSTPath *self, PyObject *arg, void *data)
          {
            jint value;
            if (!parseArg(arg, "I", &value))
            {
              INT_CALL(self->object._set_payload(value));
              return 0;
            }
            PyErr_SetArgsError((PyObject *) self, "payload", arg);
            return -1;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/ckb/SoraniNormalizationFilter.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/analysis/TokenStream.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace ckb {

          ::java::lang::Class *SoraniNormalizationFilter::class$ = NULL;
          jmethodID *SoraniNormalizationFilter::mids$ = NULL;
          bool SoraniNormalizationFilter::live$ = false;

          jclass SoraniNormalizationFilter::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/ckb/SoraniNormalizationFilter");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_c26756868a754f4e] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/analysis/TokenStream;)V");
              mids$[mid_incrementToken_8454bd5aa23fd11e] = env->getMethodID(cls, "incrementToken", "()Z");

              class$ = new ::java::lang::Class(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          SoraniNormalizationFilter::SoraniNormalizationFilter(const ::org::apache::lucene::analysis::TokenStream & a0) : ::org::apache::lucene::analysis::TokenFilter(env->newObject(initializeClass, &mids$, mid_init$_c26756868a754f4e, a0.this$)) {}

          jboolean SoraniNormalizationFilter::incrementToken() const
          {
            return env->callBooleanMethod(this$, mids$[mid_incrementToken_8454bd5aa23fd11e]);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace ckb {
          static PyObject *t_SoraniNormalizationFilter_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_SoraniNormalizationFilter_instance_(PyTypeObject *type, PyObject *arg);
          static int t_SoraniNormalizationFilter_init_(t_SoraniNormalizationFilter *self, PyObject *args, PyObject *kwds);
          static PyObject *t_SoraniNormalizationFilter_incrementToken(t_SoraniNormalizationFilter *self, PyObject *args);

          static PyMethodDef t_SoraniNormalizationFilter__methods_[] = {
            DECLARE_METHOD(t_SoraniNormalizationFilter, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_SoraniNormalizationFilter, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_SoraniNormalizationFilter, incrementToken, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          static PyType_Slot PY_TYPE_SLOTS(SoraniNormalizationFilter)[] = {
            { Py_tp_methods, t_SoraniNormalizationFilter__methods_ },
            { Py_tp_init, (void *) t_SoraniNormalizationFilter_init_ },
            { 0, NULL }
          };

          static PyType_Def *PY_TYPE_BASES(SoraniNormalizationFilter)[] = {
            &PY_TYPE_DEF(::org::apache::lucene::analysis::TokenFilter),
            NULL
          };

          DEFINE_TYPE(SoraniNormalizationFilter, t_SoraniNormalizationFilter, SoraniNormalizationFilter);

          void t_SoraniNormalizationFilter::install(PyObject *module)
          {
            installType(&PY_TYPE(SoraniNormalizationFilter), &PY_TYPE_DEF(SoraniNormalizationFilter), module, "SoraniNormalizationFilter", 0);
          }

          void t_SoraniNormalizationFilter::initialize(PyObject *module)
          {
            PyObject_SetAttrString((PyObject *) PY_TYPE(SoraniNormalizationFilter), "class_", make_descriptor(SoraniNormalizationFilter::initializeClass, 1));
            PyObject_SetAttrString((PyObject *) PY_TYPE(SoraniNormalizationFilter), "wrapfn_", make_descriptor(t_SoraniNormalizationFilter::wrap_jobject));
            PyObject_SetAttrString((PyObject *) PY_TYPE(SoraniNormalizationFilter), "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_SoraniNormalizationFilter_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, SoraniNormalizationFilter::initializeClass, 1)))
              return NULL;
            return t_SoraniNormalizationFilter::wrap_Object(SoraniNormalizationFilter(((t_SoraniNormalizationFilter *) arg)->object.this$));
          }
          static PyObject *t_SoraniNormalizationFilter_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, SoraniNormalizationFilter::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_SoraniNormalizationFilter_init_(t_SoraniNormalizationFilter *self, PyObject *args, PyObject *kwds)
          {
            ::org::apache::lucene::analysis::TokenStream a0((jobject) NULL);
            SoraniNormalizationFilter object((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::analysis::TokenStream::initializeClass, &a0))
            {
              INT_CALL(object = SoraniNormalizationFilter(a0));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_SoraniNormalizationFilter_incrementToken(t_SoraniNormalizationFilter *self, PyObject *args)
          {
            jboolean result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.incrementToken());
              Py_RETURN_BOOL(result);
            }

            return callSuper(PY_TYPE(SoraniNormalizationFilter), (PyObject *) self, "incrementToken", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/vectorhighlight/FieldFragList.h"
#include "java/util/List.h"
#include "org/apache/lucene/search/vectorhighlight/FieldPhraseList$WeightedPhraseInfo.h"
#include "org/apache/lucene/search/vectorhighlight/FieldFragList$WeightedFragInfo.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace vectorhighlight {

          ::java::lang::Class *FieldFragList::class$ = NULL;
          jmethodID *FieldFragList::mids$ = NULL;
          bool FieldFragList::live$ = false;

          jclass FieldFragList::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/search/vectorhighlight/FieldFragList");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_040c4cd0390c5aff] = env->getMethodID(cls, "<init>", "(I)V");
              mids$[mid_add_0579db43a3783deb] = env->getMethodID(cls, "add", "(IILjava/util/List;)V");
              mids$[mid_getFragInfos_49ec78390f08338a] = env->getMethodID(cls, "getFragInfos", "()Ljava/util/List;");

              class$ = new ::java::lang::Class(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          FieldFragList::FieldFragList(jint a0) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_040c4cd0390c5aff, a0)) {}

          void FieldFragList::add(jint a0, jint a1, const ::java::util::List & a2) const
          {
            env->callVoidMethod(this$, mids$[mid_add_0579db43a3783deb], a0, a1, a2.this$);
          }

          ::java::util::List FieldFragList::getFragInfos() const
          {
            return ::java::util::List(env->callObjectMethod(this$, mids$[mid_getFragInfos_49ec78390f08338a]));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace vectorhighlight {
          static PyObject *t_FieldFragList_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_FieldFragList_instance_(PyTypeObject *type, PyObject *arg);
          static int t_FieldFragList_init_(t_FieldFragList *self, PyObject *args, PyObject *kwds);
          static PyObject *t_FieldFragList_add(t_FieldFragList *self, PyObject *args);
          static PyObject *t_FieldFragList_getFragInfos(t_FieldFragList *self);
          static PyObject *t_FieldFragList_get__fragInfos(t_FieldFragList *self, void *data);
          static PyGetSetDef t_FieldFragList__fields_[] = {
            DECLARE_GET_FIELD(t_FieldFragList, fragInfos),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_FieldFragList__methods_[] = {
            DECLARE_METHOD(t_FieldFragList, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_FieldFragList, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_FieldFragList, add, METH_VARARGS),
            DECLARE_METHOD(t_FieldFragList, getFragInfos, METH_NOARGS),
            { NULL, NULL, 0, NULL }
          };

          static PyType_Slot PY_TYPE_SLOTS(FieldFragList)[] = {
            { Py_tp_methods, t_FieldFragList__methods_ },
            { Py_tp_init, (void *) t_FieldFragList_init_ },
            { Py_tp_getset, t_FieldFragList__fields_ },
            { 0, NULL }
          };

          static PyType_Def *PY_TYPE_BASES(FieldFragList)[] = {
            &PY_TYPE_DEF(::java::lang::Object),
            NULL
          };

          DEFINE_TYPE(FieldFragList, t_FieldFragList, FieldFragList);

          void t_FieldFragList::install(PyObject *module)
          {
            installType(&PY_TYPE(FieldFragList), &PY_TYPE_DEF(FieldFragList), module, "FieldFragList", 0);
            PyObject_SetAttrString((PyObject *) PY_TYPE(FieldFragList), "WeightedFragInfo", make_descriptor(&PY_TYPE_DEF(FieldFragList$WeightedFragInfo)));
          }

          void t_FieldFragList::initialize(PyObject *module)
          {
            PyObject_SetAttrString((PyObject *) PY_TYPE(FieldFragList), "class_", make_descriptor(FieldFragList::initializeClass, 1));
            PyObject_SetAttrString((PyObject *) PY_TYPE(FieldFragList), "wrapfn_", make_descriptor(t_FieldFragList::wrap_jobject));
            PyObject_SetAttrString((PyObject *) PY_TYPE(FieldFragList), "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_FieldFragList_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, FieldFragList::initializeClass, 1)))
              return NULL;
            return t_FieldFragList::wrap_Object(FieldFragList(((t_FieldFragList *) arg)->object.this$));
          }
          static PyObject *t_FieldFragList_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, FieldFragList::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_FieldFragList_init_(t_FieldFragList *self, PyObject *args, PyObject *kwds)
          {
            jint a0;
            FieldFragList object((jobject) NULL);

            if (!parseArgs(args, "I", &a0))
            {
              INT_CALL(object = FieldFragList(a0));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_FieldFragList_add(t_FieldFragList *self, PyObject *args)
          {
            jint a0;
            jint a1;
            ::java::util::List a2((jobject) NULL);
            PyTypeObject **p2;

            if (!parseArgs(args, "IIK", ::java::util::List::initializeClass, &a0, &a1, &a2, &p2, ::java::util::t_List::parameters_))
            {
              OBJ_CALL(self->object.add(a0, a1, a2));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError((PyObject *) self, "add", args);
            return NULL;
          }

          static PyObject *t_FieldFragList_getFragInfos(t_FieldFragList *self)
          {
            ::java::util::List result((jobject) NULL);
            OBJ_CALL(result = self->object.getFragInfos());
            return ::java::util::t_List::wrap_Object(result, ::org::apache::lucene::search::vectorhighlight::PY_TYPE(FieldFragList$WeightedFragInfo));
          }

          static PyObject *t_FieldFragList_get__fragInfos(t_FieldFragList *self, void *data)
          {
            ::java::util::List value((jobject) NULL);
            OBJ_CALL(value = self->object.getFragInfos());
            return ::java::util::t_List::wrap_Object(value);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/cz/CzechAnalyzer.h"
#include "java/lang/String.h"
#include "org/apache/lucene/analysis/CharArraySet.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace cz {

          ::java::lang::Class *CzechAnalyzer::class$ = NULL;
          jmethodID *CzechAnalyzer::mids$ = NULL;
          bool CzechAnalyzer::live$ = false;
          ::java::lang::String *CzechAnalyzer::DEFAULT_STOPWORD_FILE = NULL;

          jclass CzechAnalyzer::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/cz/CzechAnalyzer");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_f2cc1bce94666404] = env->getMethodID(cls, "<init>", "()V");
              mids$[mid_init$_09c0eb6a436581d3] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/analysis/CharArraySet;)V");
              mids$[mid_init$_b66a15b6e54e4218] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/analysis/CharArraySet;Lorg/apache/lucene/analysis/CharArraySet;)V");
              mids$[mid_getDefaultStopSet_7aec8e69a9807ca1] = env->getStaticMethodID(cls, "getDefaultStopSet", "()Lorg/apache/lucene/analysis/CharArraySet;");
              mids$[mid_createComponents_c22fd244b0553c1e] = env->getMethodID(cls, "createComponents", "(Ljava/lang/String;)Lorg/apache/lucene/analysis/Analyzer$TokenStreamComponents;");
              mids$[mid_normalize_e597989422f66fcd] = env->getMethodID(cls, "normalize", "(Ljava/lang/String;Lorg/apache/lucene/analysis/TokenStream;)Lorg/apache/lucene/analysis/TokenStream;");

              class$ = new ::java::lang::Class(cls);
              cls = (jclass) class$->this$;

              DEFAULT_STOPWORD_FILE = new ::java::lang::String(env->getStaticObjectField(cls, "DEFAULT_STOPWORD_FILE", "Ljava/lang/String;"));
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          CzechAnalyzer::CzechAnalyzer() : ::org::apache::lucene::analysis::StopwordAnalyzerBase(env->newObject(initializeClass, &mids$, mid_init$_f2cc1bce94666404)) {}

          CzechAnalyzer::CzechAnalyzer(const ::org::apache::lucene::analysis::CharArraySet & a0) : ::org::apache::lucene::analysis::StopwordAnalyzerBase(env->newObject(initializeClass, &mids$, mid_init$_09c0eb6a436581d3, a0.this$)) {}

          CzechAnalyzer::CzechAnalyzer(const ::org::apache::lucene::analysis::CharArraySet & a0, const ::org::apache::lucene::analysis::CharArraySet & a1) : ::org::apache::lucene::analysis::StopwordAnalyzerBase(env->newObject(initializeClass, &mids$, mid_init$_b66a15b6e54e4218, a0.this$, a1.this$)) {}

          ::org::apache::lucene::analysis::CharArraySet CzechAnalyzer::getDefaultStopSet()
          {
            jclass cls = env->getClass(initializeClass);
            return ::org::apache::lucene::analysis::CharArraySet(env->callStaticObjectMethod(cls, mids$[mid_getDefaultStopSet_7aec8e69a9807ca1]));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace cz {
          static PyObject *t_CzechAnalyzer_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_CzechAnalyzer_instance_(PyTypeObject *type, PyObject *arg);
          static int t_CzechAnalyzer_init_(t_CzechAnalyzer *self, PyObject *args, PyObject *kwds);
          static PyObject *t_CzechAnalyzer_getDefaultStopSet(PyTypeObject *type);
          static PyObject *t_CzechAnalyzer_get__defaultStopSet(t_CzechAnalyzer *self, void *data);
          static PyGetSetDef t_CzechAnalyzer__fields_[] = {
            DECLARE_GET_FIELD(t_CzechAnalyzer, defaultStopSet),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_CzechAnalyzer__methods_[] = {
            DECLARE_METHOD(t_CzechAnalyzer, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_CzechAnalyzer, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_CzechAnalyzer, getDefaultStopSet, METH_NOARGS | METH_CLASS),
            { NULL, NULL, 0, NULL }
          };

          static PyType_Slot PY_TYPE_SLOTS(CzechAnalyzer)[] = {
            { Py_tp_methods, t_CzechAnalyzer__methods_ },
            { Py_tp_init, (void *) t_CzechAnalyzer_init_ },
            { Py_tp_getset, t_CzechAnalyzer__fields_ },
            { 0, NULL }
          };

          static PyType_Def *PY_TYPE_BASES(CzechAnalyzer)[] = {
            &PY_TYPE_DEF(::org::apache::lucene::analysis::StopwordAnalyzerBase),
            NULL
          };

          DEFINE_TYPE(CzechAnalyzer, t_CzechAnalyzer, CzechAnalyzer);

          void t_CzechAnalyzer::install(PyObject *module)
          {
            installType(&PY_TYPE(CzechAnalyzer), &PY_TYPE_DEF(CzechAnalyzer), module, "CzechAnalyzer", 0);
          }

          void t_CzechAnalyzer::initialize(PyObject *module)
          {
            PyObject_SetAttrString((PyObject *) PY_TYPE(CzechAnalyzer), "class_", make_descriptor(CzechAnalyzer::initializeClass, 1));
            PyObject_SetAttrString((PyObject *) PY_TYPE(CzechAnalyzer), "wrapfn_", make_descriptor(t_CzechAnalyzer::wrap_jobject));
            PyObject_SetAttrString((PyObject *) PY_TYPE(CzechAnalyzer), "boxfn_", make_descriptor(boxObject));
            env->getClass(CzechAnalyzer::initializeClass);
            PyObject_SetAttrString((PyObject *) PY_TYPE(CzechAnalyzer), "DEFAULT_STOPWORD_FILE", make_descriptor(j2p(*CzechAnalyzer::DEFAULT_STOPWORD_FILE)));
          }

          static PyObject *t_CzechAnalyzer_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, CzechAnalyzer::initializeClass, 1)))
              return NULL;
            return t_CzechAnalyzer::wrap_Object(CzechAnalyzer(((t_CzechAnalyzer *) arg)->object.this$));
          }
          static PyObject *t_CzechAnalyzer_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, CzechAnalyzer::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_CzechAnalyzer_init_(t_CzechAnalyzer *self, PyObject *args, PyObject *kwds)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 0:
              {
                CzechAnalyzer object((jobject) NULL);

                INT_CALL(object = CzechAnalyzer());
                self->object = object;
                break;
              }
             case 1:
              {
                ::org::apache::lucene::analysis::CharArraySet a0((jobject) NULL);
                PyTypeObject **p0;
                CzechAnalyzer object((jobject) NULL);

                if (!parseArgs(args, "K", ::org::apache::lucene::analysis::CharArraySet::initializeClass, &a0, &p0, ::org::apache::lucene::analysis::t_CharArraySet::parameters_))
                {
                  INT_CALL(object = CzechAnalyzer(a0));
                  self->object = object;
                  break;
                }
              }
              goto err;
             case 2:
              {
                ::org::apache::lucene::analysis::CharArraySet a0((jobject) NULL);
                PyTypeObject **p0;
                ::org::apache::lucene::analysis::CharArraySet a1((jobject) NULL);
                PyTypeObject **p1;
                CzechAnalyzer object((jobject) NULL);

                if (!parseArgs(args, "KK", ::org::apache::lucene::analysis::CharArraySet::initializeClass, ::org::apache::lucene::analysis::CharArraySet::initializeClass, &a0, &p0, ::org::apache::lucene::analysis::t_CharArraySet::parameters_, &a1, &p1, ::org::apache::lucene::analysis::t_CharArraySet::parameters_))
                {
                  INT_CALL(object = CzechAnalyzer(a0, a1));
                  self->object = object;
                  break;
                }
              }
             default:
             err:
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_CzechAnalyzer_getDefaultStopSet(PyTypeObject *type)
          {
            ::org::apache::lucene::analysis::CharArraySet result((jobject) NULL);
            OBJ_CALL(result = ::org::apache::lucene::analysis::cz::CzechAnalyzer::getDefaultStopSet());
            return ::org::apache::lucene::analysis::t_CharArraySet::wrap_Object(result);
          }

          static PyObject *t_CzechAnalyzer_get__defaultStopSet(t_CzechAnalyzer *self, void *data)
          {
            ::org::apache::lucene::analysis::CharArraySet value((jobject) NULL);
            OBJ_CALL(value = self->object.getDefaultStopSet());
            return ::org::apache::lucene::analysis::t_CharArraySet::wrap_Object(value);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/hunspell/DictEntries.h"
#include "java/util/List.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace hunspell {

          ::java::lang::Class *DictEntries::class$ = NULL;
          jmethodID *DictEntries::mids$ = NULL;
          bool DictEntries::live$ = false;

          jclass DictEntries::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/hunspell/DictEntries");

              mids$ = new jmethodID[max_mid];
              mids$[mid_getMorphologicalData_d7593acad64ef635] = env->getMethodID(cls, "getMorphologicalData", "(I)Ljava/lang/String;");
              mids$[mid_getMorphologicalValues_1663c0f03fbe6124] = env->getMethodID(cls, "getMorphologicalValues", "(ILjava/lang/String;)Ljava/util/List;");
              mids$[mid_size_9972fcc56b44e79d] = env->getMethodID(cls, "size", "()I");

              class$ = new ::java::lang::Class(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          ::java::lang::String DictEntries::getMorphologicalData(jint a0) const
          {
            return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_getMorphologicalData_d7593acad64ef635], a0));
          }

          ::java::util::List DictEntries::getMorphologicalValues(jint a0, const ::java::lang::String & a1) const
          {
            return ::java::util::List(env->callObjectMethod(this$, mids$[mid_getMorphologicalValues_1663c0f03fbe6124], a0, a1.this$));
          }

          jint DictEntries::size() const
          {
            return env->callIntMethod(this$, mids$[mid_size_9972fcc56b44e79d]);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace hunspell {
          static PyObject *t_DictEntries_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_DictEntries_instance_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_DictEntries_getMorphologicalData(t_DictEntries *self, PyObject *arg);
          static PyObject *t_DictEntries_getMorphologicalValues(t_DictEntries *self, PyObject *args);
          static PyObject *t_DictEntries_size(t_DictEntries *self);

          static PyMethodDef t_DictEntries__methods_[] = {
            DECLARE_METHOD(t_DictEntries, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_DictEntries, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_DictEntries, getMorphologicalData, METH_O),
            DECLARE_METHOD(t_DictEntries, getMorphologicalValues, METH_VARARGS),
            DECLARE_METHOD(t_DictEntries, size, METH_NOARGS),
            { NULL, NULL, 0, NULL }
          };

          static PyType_Slot PY_TYPE_SLOTS(DictEntries)[] = {
            { Py_tp_methods, t_DictEntries__methods_ },
            { Py_tp_init, (void *) abstract_init },
            { 0, NULL }
          };

          static PyType_Def *PY_TYPE_BASES(DictEntries)[] = {
            &PY_TYPE_DEF(::java::lang::Object),
            NULL
          };

          DEFINE_TYPE(DictEntries, t_DictEntries, DictEntries);

          void t_DictEntries::install(PyObject *module)
          {
            installType(&PY_TYPE(DictEntries), &PY_TYPE_DEF(DictEntries), module, "DictEntries", 0);
          }

          void t_DictEntries::initialize(PyObject *module)
          {
            PyObject_SetAttrString((PyObject *) PY_TYPE(DictEntries), "class_", make_descriptor(DictEntries::initializeClass, 1));
            PyObject_SetAttrString((PyObject *) PY_TYPE(DictEntries), "wrapfn_", make_descriptor(t_DictEntries::wrap_jobject));
            PyObject_SetAttrString((PyObject *) PY_TYPE(DictEntries), "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_DictEntries_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, DictEntries::initializeClass, 1)))
              return NULL;
            return t_DictEntries::wrap_Object(DictEntries(((t_DictEntries *) arg)->object.this$));
          }
          static PyObject *t_DictEntries_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, DictEntries::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static PyObject *t_DictEntries_getMorphologicalData(t_DictEntries *self, PyObject *arg)
          {
            jint a0;
            ::java::lang::String result((jobject) NULL);

            if (!parseArg(arg, "I", &a0))
            {
              OBJ_CALL(result = self->object.getMorphologicalData(a0));
              return j2p(result);
            }

            PyErr_SetArgsError((PyObject *) self, "getMorphologicalData", arg);
            return NULL;
          }

          static PyObject *t_DictEntries_getMorphologicalValues(t_DictEntries *self, PyObject *args)
          {
            jint a0;
            ::java::lang::String a1((jobject) NULL);
            ::java::util::List result((jobject) NULL);

            if (!parseArgs(args, "Is", &a0, &a1))
            {
              OBJ_CALL(result = self->object.getMorphologicalValues(a0, a1));
              return ::java::util::t_List::wrap_Object(result, ::java::lang::PY_TYPE(String));
            }

            PyErr_SetArgsError((PyObject *) self, "getMorphologicalValues", args);
            return NULL;
          }

          static PyObject *t_DictEntries_size(t_DictEntries *self)
          {
            jint result;
            OBJ_CALL(result = self->object.size());
            return PyLong_FromLong((long) result);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/index/TermState.h"
#include "java/lang/String.h"
#include "org/apache/lucene/index/TermState.h"
#include "java/lang/Cloneable.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {

        ::java::lang::Class *TermState::class$ = NULL;
        jmethodID *TermState::mids$ = NULL;
        bool TermState::live$ = false;

        jclass TermState::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/index/TermState");

            mids$ = new jmethodID[max_mid];
            mids$[mid_clone_774a8ebb2c222d2d] = env->getMethodID(cls, "clone", "()Lorg/apache/lucene/index/TermState;");
            mids$[mid_copyFrom_4291efa1cd29ac2a] = env->getMethodID(cls, "copyFrom", "(Lorg/apache/lucene/index/TermState;)V");
            mids$[mid_toString_db9b55ba01e03e4b] = env->getMethodID(cls, "toString", "()Ljava/lang/String;");

            class$ = new ::java::lang::Class(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        TermState TermState::clone() const
        {
          return TermState(env->callObjectMethod(this$, mids$[mid_clone_774a8ebb2c222d2d]));
        }

        void TermState::copyFrom(const TermState & a0) const
        {
          env->callVoidMethod(this$, mids$[mid_copyFrom_4291efa1cd29ac2a], a0.this$);
        }

        ::java::lang::String TermState::toString() const
        {
          return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_db9b55ba01e03e4b]));
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {
        static PyObject *t_TermState_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_TermState_instance_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_TermState_clone(t_TermState *self);
        static PyObject *t_TermState_copyFrom(t_TermState *self, PyObject *arg);
        static PyObject *t_TermState_toString(t_TermState *self, PyObject *args);

        static PyMethodDef t_TermState__methods_[] = {
          DECLARE_METHOD(t_TermState, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_TermState, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_TermState, clone, METH_NOARGS),
          DECLARE_METHOD(t_TermState, copyFrom, METH_O),
          DECLARE_METHOD(t_TermState, toString, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        static PyType_Slot PY_TYPE_SLOTS(TermState)[] = {
          { Py_tp_methods, t_TermState__methods_ },
          { Py_tp_init, (void *) abstract_init },
          { 0, NULL }
        };

        static PyType_Def *PY_TYPE_BASES(TermState)[] = {
          &PY_TYPE_DEF(::java::lang::Object),
          NULL
        };

        DEFINE_TYPE(TermState, t_TermState, TermState);

        void t_TermState::install(PyObject *module)
        {
          installType(&PY_TYPE(TermState), &PY_TYPE_DEF(TermState), module, "TermState", 0);
        }

        void t_TermState::initialize(PyObject *module)
        {
          PyObject_SetAttrString((PyObject *) PY_TYPE(TermState), "class_", make_descriptor(TermState::initializeClass, 1));
          PyObject_SetAttrString((PyObject *) PY_TYPE(TermState), "wrapfn_", make_descriptor(t_TermState::wrap_jobject));
          PyObject_SetAttrString((PyObject *) PY_TYPE(TermState), "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_TermState_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, TermState::initializeClass, 1)))
            return NULL;
          return t_TermState::wrap_Object(TermState(((t_TermState *) arg)->object.this$));
        }
        static PyObject *t_TermState_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, TermState::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static PyObject *t_TermState_clone(t_TermState *self)
        {
          TermState result((jobject) NULL);
          OBJ_CALL(result = self->object.clone());
          return t_TermState::wrap_Object(result);
        }

        static PyObject *t_TermState_copyFrom(t_TermState *self, PyObject *arg)
        {
          TermState a0((jobject) NULL);

          if (!parseArg(arg, "k", TermState::initializeClass, &a0))
          {
            OBJ_CALL(self->object.copyFrom(a0));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "copyFrom", arg);
          return NULL;
        }

        static PyObject *t_TermState_toString(t_TermState *self, PyObject *args)
        {
          ::java::lang::String result((jobject) NULL);

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.toString());
            return j2p(result);
          }

          return callSuper(PY_TYPE(TermState), (PyObject *) self, "toString", args, 2);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/index/SegmentCommitInfo.h"
#include "java/util/Map.h"
#include "java/util/Collection.h"
#include "java/lang/Class.h"
#include "java/lang/Integer.h"
#include "java/lang/String.h"
#include "org/apache/lucene/index/SegmentCommitInfo.h"
#include "java/util/Set.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/index/SegmentInfo.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {

        ::java::lang::Class *SegmentCommitInfo::class$ = NULL;
        jmethodID *SegmentCommitInfo::mids$ = NULL;
        jfieldID *SegmentCommitInfo::fids$ = NULL;
        bool SegmentCommitInfo::live$ = false;

        jclass SegmentCommitInfo::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/index/SegmentCommitInfo");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_869a0f81e4dced98] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/index/SegmentInfo;IIJJJ[B)V");
            mids$[mid_clone_88665de6b57af2eb] = env->getMethodID(cls, "clone", "()Lorg/apache/lucene/index/SegmentCommitInfo;");
            mids$[mid_files_d4dfbf7a26ff41df] = env->getMethodID(cls, "files", "()Ljava/util/Collection;");
            mids$[mid_getDelCount_9972fcc56b44e79d] = env->getMethodID(cls, "getDelCount", "()I");
            mids$[mid_getDelGen_2e5ae9edcb9b072f] = env->getMethodID(cls, "getDelGen", "()J");
            mids$[mid_getDocValuesGen_2e5ae9edcb9b072f] = env->getMethodID(cls, "getDocValuesGen", "()J");
            mids$[mid_getDocValuesUpdatesFiles_1c3426541413a55d] = env->getMethodID(cls, "getDocValuesUpdatesFiles", "()Ljava/util/Map;");
            mids$[mid_getFieldInfosFiles_7dcf4034c6d1a92a] = env->getMethodID(cls, "getFieldInfosFiles", "()Ljava/util/Set;");
            mids$[mid_getFieldInfosGen_2e5ae9edcb9b072f] = env->getMethodID(cls, "getFieldInfosGen", "()J");
            mids$[mid_getId_cf386cdb1bbd339f] = env->getMethodID(cls, "getId", "()[B");
            mids$[mid_getNextDelGen_2e5ae9edcb9b072f] = env->getMethodID(cls, "getNextDelGen", "()J");
            mids$[mid_getNextDocValuesGen_2e5ae9edcb9b072f] = env->getMethodID(cls, "getNextDocValuesGen", "()J");
            mids$[mid_getNextFieldInfosGen_2e5ae9edcb9b072f] = env->getMethodID(cls, "getNextFieldInfosGen", "()J");
            mids$[mid_getSoftDelCount_9972fcc56b44e79d] = env->getMethodID(cls, "getSoftDelCount", "()I");
            mids$[mid_hasDeletions_8454bd5aa23fd11e] = env->getMethodID(cls, "hasDeletions", "()Z");
            mids$[mid_hasFieldUpdates_8454bd5aa23fd11e] = env->getMethodID(cls, "hasFieldUpdates", "()Z");
            mids$[mid_setDocValuesUpdatesFiles_408bd889ee3beae5] = env->getMethodID(cls, "setDocValuesUpdatesFiles", "(Ljava/util/Map;)V");
            mids$[mid_setFieldInfosFiles_d5a4a8d4b806f0ba] = env->getMethodID(cls, "setFieldInfosFiles", "(Ljava/util/Set;)V");
            mids$[mid_sizeInBytes_2e5ae9edcb9b072f] = env->getMethodID(cls, "sizeInBytes", "()J");
            mids$[mid_toString_db9b55ba01e03e4b] = env->getMethodID(cls, "toString", "()Ljava/lang/String;");
            mids$[mid_toString_d7593acad64ef635] = env->getMethodID(cls, "toString", "(I)Ljava/lang/String;");

            fids$ = new jfieldID[max_fid];
            fids$[fid_info] = env->getFieldID(cls, "info", "Lorg/apache/lucene/index/SegmentInfo;");

            class$ = new ::java::lang::Class(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        SegmentCommitInfo::SegmentCommitInfo(const ::org::apache::lucene::index::SegmentInfo & a0, jint a1, jint a2, jlong a3, jlong a4, jlong a5, const JArray< jbyte > & a6) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_869a0f81e4dced98, a0.this$, a1, a2, a3, a4, a5, a6.this$)) {}

        SegmentCommitInfo SegmentCommitInfo::clone() const
        {
          return SegmentCommitInfo(env->callObjectMethod(this$, mids$[mid_clone_88665de6b57af2eb]));
        }

        ::java::util::Collection SegmentCommitInfo::files() const
        {
          return ::java::util::Collection(env->callObjectMethod(this$, mids$[mid_files_d4dfbf7a26ff41df]));
        }

        jint SegmentCommitInfo::getDelCount() const
        {
          return env->callIntMethod(this$, mids$[mid_getDelCount_9972fcc56b44e79d]);
        }

        jlong SegmentCommitInfo::getDelGen() const
        {
          return env->callLongMethod(this$, mids$[mid_getDelGen_2e5ae9edcb9b072f]);
        }

        jlong SegmentCommitInfo::getDocValuesGen() const
        {
          return env->callLongMethod(this$, mids$[mid_getDocValuesGen_2e5ae9edcb9b072f]);
        }

        ::java::util::Map SegmentCommitInfo::getDocValuesUpdatesFiles() const
        {
          return ::java::util::Map(env->callObjectMethod(this$, mids$[mid_getDocValuesUpdatesFiles_1c3426541413a55d]));
        }

        ::java::util::Set SegmentCommitInfo::getFieldInfosFiles() const
        {
          return ::java::util::Set(env->callObjectMethod(this$, mids$[mid_getFieldInfosFiles_7dcf4034c6d1a92a]));
        }

        jlong SegmentCommitInfo::getFieldInfosGen() const
        {
          return env->callLongMethod(this$, mids$[mid_getFieldInfosGen_2e5ae9edcb9b072f]);
        }

        JArray< jbyte > SegmentCommitInfo::getId() const
        {
          return JArray< jbyte >(env->callObjectMethod(this$, mids$[mid_getId_cf386cdb1bbd339f]));
        }

        jlong SegmentCommitInfo::getNextDelGen() const
        {
          return env->callLongMethod(this$, mids$[mid_getNextDelGen_2e5ae9edcb9b072f]);
        }

        jlong SegmentCommitInfo::getNextDocValuesGen() const
        {
          return env->callLongMethod(this$, mids$[mid_getNextDocValuesGen_2e5ae9edcb9b072f]);
        }

        jlong SegmentCommitInfo::getNextFieldInfosGen() const
        {
          return env->callLongMethod(this$, mids$[mid_getNextFieldInfosGen_2e5ae9edcb9b072f]);
        }

        jint SegmentCommitInfo::getSoftDelCount() const
        {
          return env->callIntMethod(this$, mids$[mid_getSoftDelCount_9972fcc56b44e79d]);
        }

        jboolean SegmentCommitInfo::hasDeletions() const
        {
          return env->callBooleanMethod(this$, mids$[mid_hasDeletions_8454bd5aa23fd11e]);
        }

        jboolean SegmentCommitInfo::hasFieldUpdates() const
        {
          return env->callBooleanMethod(this$, mids$[mid_hasFieldUpdates_8454bd5aa23fd11e]);
        }

        void SegmentCommitInfo::setDocValuesUpdatesFiles(const ::java::util::Map & a0) const
        {
          env->callVoidMethod(this$, mids$[mid_setDocValuesUpdatesFiles_408bd889ee3beae5], a0.this$);
        }

        void SegmentCommitInfo::setFieldInfosFiles(const ::java::util::Set & a0) const
        {
          env->callVoidMethod(this$, mids$[mid_setFieldInfosFiles_d5a4a8d4b806f0ba], a0.this$);
        }

        jlong SegmentCommitInfo::sizeInBytes() const
        {
          return env->callLongMethod(this$, mids$[mid_sizeInBytes_2e5ae9edcb9b072f]);
        }

        ::java::lang::String SegmentCommitInfo::toString() const
        {
          return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_db9b55ba01e03e4b]));
        }

        ::java::lang::String SegmentCommitInfo::toString(jint a0) const
        {
          return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_d7593acad64ef635], a0));
        }

        ::org::apache::lucene::index::SegmentInfo SegmentCommitInfo::_get_info() const
        {
          return ::org::apache::lucene::index::SegmentInfo(env->getObjectField(this$, fids$[fid_info]));
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {
        static PyObject *t_SegmentCommitInfo_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_SegmentCommitInfo_instance_(PyTypeObject *type, PyObject *arg);
        static int t_SegmentCommitInfo_init_(t_SegmentCommitInfo *self, PyObject *args, PyObject *kwds);
        static PyObject *t_SegmentCommitInfo_clone(t_SegmentCommitInfo *self);
        static PyObject *t_SegmentCommitInfo_files(t_SegmentCommitInfo *self);
        static PyObject *t_SegmentCommitInfo_getDelCount(t_SegmentCommitInfo *self);
        static PyObject *t_SegmentCommitInfo_getDelGen(t_SegmentCommitInfo *self);
        static PyObject *t_SegmentCommitInfo_getDocValuesGen(t_SegmentCommitInfo *self);
        static PyObject *t_SegmentCommitInfo_getDocValuesUpdatesFiles(t_SegmentCommitInfo *self);
        static PyObject *t_SegmentCommitInfo_getFieldInfosFiles(t_SegmentCommitInfo *self);
        static PyObject *t_SegmentCommitInfo_getFieldInfosGen(t_SegmentCommitInfo *self);
        static PyObject *t_SegmentCommitInfo_getId(t_SegmentCommitInfo *self);
        static PyObject *t_SegmentCommitInfo_getNextDelGen(t_SegmentCommitInfo *self);
        static PyObject *t_SegmentCommitInfo_getNextDocValuesGen(t_SegmentCommitInfo *self);
        static PyObject *t_SegmentCommitInfo_getNextFieldInfosGen(t_SegmentCommitInfo *self);
        static PyObject *t_SegmentCommitInfo_getSoftDelCount(t_SegmentCommitInfo *self);
        static PyObject *t_SegmentCommitInfo_hasDeletions(t_SegmentCommitInfo *self);
        static PyObject *t_SegmentCommitInfo_hasFieldUpdates(t_SegmentCommitInfo *self);
        static PyObject *t_SegmentCommitInfo_setDocValuesUpdatesFiles(t_SegmentCommitInfo *self, PyObject *arg);
        static PyObject *t_SegmentCommitInfo_setFieldInfosFiles(t_SegmentCommitInfo *self, PyObject *arg);
        static PyObject *t_SegmentCommitInfo_sizeInBytes(t_SegmentCommitInfo *self);
        static PyObject *t_SegmentCommitInfo_toString(t_SegmentCommitInfo *self, PyObject *args);
        static PyObject *t_SegmentCommitInfo_get__info(t_SegmentCommitInfo *self, void *data);

        static PyObject *t_SegmentCommitInfo_get__delCount(t_SegmentCommitInfo *self, void *data);
        static PyObject *t_SegmentCommitInfo_get__delGen(t_SegmentCommitInfo *self, void *data);
        static PyObject *t_SegmentCommitInfo_get__docValuesGen(t_SegmentCommitInfo *self, void *data);
        static PyObject *t_SegmentCommitInfo_get__docValuesUpdatesFiles(t_SegmentCommitInfo *self, void *data);
        static int t_SegmentCommitInfo_set__docValuesUpdatesFiles(t_SegmentCommitInfo *self, PyObject *arg, void *data);
        static PyObject *t_SegmentCommitInfo_get__fieldInfosFiles(t_SegmentCommitInfo *self, void *data);
        static int t_SegmentCommitInfo_set__fieldInfosFiles(t_SegmentCommitInfo *self, PyObject *arg, void *data);
        static PyObject *t_SegmentCommitInfo_get__fieldInfosGen(t_SegmentCommitInfo *self, void *data);
        static PyObject *t_SegmentCommitInfo_get__id(t_SegmentCommitInfo *self, void *data);
        static PyObject *t_SegmentCommitInfo_get__nextDelGen(t_SegmentCommitInfo *self, void *data);
        static PyObject *t_SegmentCommitInfo_get__nextDocValuesGen(t_SegmentCommitInfo *self, void *data);
        static PyObject *t_SegmentCommitInfo_get__nextFieldInfosGen(t_SegmentCommitInfo *self, void *data);
        static PyObject *t_SegmentCommitInfo_get__softDelCount(t_SegmentCommitInfo *self, void *data);
        static PyGetSetDef t_SegmentCommitInfo__fields_[] = {
          DECLARE_GET_FIELD(t_SegmentCommitInfo, info),
          DECLARE_GET_FIELD(t_SegmentCommitInfo, delCount),
          DECLARE_GET_FIELD(t_SegmentCommitInfo, delGen),
          DECLARE_GET_FIELD(t_SegmentCommitInfo, docValuesGen),
          DECLARE_GETSET_FIELD(t_SegmentCommitInfo, docValuesUpdatesFiles),
          DECLARE_GETSET_FIELD(t_SegmentCommitInfo, fieldInfosFiles),
          DECLARE_GET_FIELD(t_SegmentCommitInfo, fieldInfosGen),
          DECLARE_GET_FIELD(t_SegmentCommitInfo, id),
          DECLARE_GET_FIELD(t_SegmentCommitInfo, nextDelGen),
          DECLARE_GET_FIELD(t_SegmentCommitInfo, nextDocValuesGen),
          DECLARE_GET_FIELD(t_SegmentCommitInfo, nextFieldInfosGen),
          DECLARE_GET_FIELD(t_SegmentCommitInfo, softDelCount),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_SegmentCommitInfo__methods_[] = {
          DECLARE_METHOD(t_SegmentCommitInfo, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_SegmentCommitInfo, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_SegmentCommitInfo, clone, METH_NOARGS),
          DECLARE_METHOD(t_SegmentCommitInfo, files, METH_NOARGS),
          DECLARE_METHOD(t_SegmentCommitInfo, getDelCount, METH_NOARGS),
          DECLARE_METHOD(t_SegmentCommitInfo, getDelGen, METH_NOARGS),
          DECLARE_METHOD(t_SegmentCommitInfo, getDocValuesGen, METH_NOARGS),
          DECLARE_METHOD(t_SegmentCommitInfo, getDocValuesUpdatesFiles, METH_NOARGS),
          DECLARE_METHOD(t_SegmentCommitInfo, getFieldInfosFiles, METH_NOARGS),
          DECLARE_METHOD(t_SegmentCommitInfo, getFieldInfosGen, METH_NOARGS),
          DECLARE_METHOD(t_SegmentCommitInfo, getId, METH_NOARGS),
          DECLARE_METHOD(t_SegmentCommitInfo, getNextDelGen, METH_NOARGS),
          DECLARE_METHOD(t_SegmentCommitInfo, getNextDocValuesGen, METH_NOARGS),
          DECLARE_METHOD(t_SegmentCommitInfo, getNextFieldInfosGen, METH_NOARGS),
          DECLARE_METHOD(t_SegmentCommitInfo, getSoftDelCount, METH_NOARGS),
          DECLARE_METHOD(t_SegmentCommitInfo, hasDeletions, METH_NOARGS),
          DECLARE_METHOD(t_SegmentCommitInfo, hasFieldUpdates, METH_NOARGS),
          DECLARE_METHOD(t_SegmentCommitInfo, setDocValuesUpdatesFiles, METH_O),
          DECLARE_METHOD(t_SegmentCommitInfo, setFieldInfosFiles, METH_O),
          DECLARE_METHOD(t_SegmentCommitInfo, sizeInBytes, METH_NOARGS),
          DECLARE_METHOD(t_SegmentCommitInfo, toString, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        static PyType_Slot PY_TYPE_SLOTS(SegmentCommitInfo)[] = {
          { Py_tp_methods, t_SegmentCommitInfo__methods_ },
          { Py_tp_init, (void *) t_SegmentCommitInfo_init_ },
          { Py_tp_getset, t_SegmentCommitInfo__fields_ },
          { 0, NULL }
        };

        static PyType_Def *PY_TYPE_BASES(SegmentCommitInfo)[] = {
          &PY_TYPE_DEF(::java::lang::Object),
          NULL
        };

        DEFINE_TYPE(SegmentCommitInfo, t_SegmentCommitInfo, SegmentCommitInfo);

        void t_SegmentCommitInfo::install(PyObject *module)
        {
          installType(&PY_TYPE(SegmentCommitInfo), &PY_TYPE_DEF(SegmentCommitInfo), module, "SegmentCommitInfo", 0);
        }

        void t_SegmentCommitInfo::initialize(PyObject *module)
        {
          PyObject_SetAttrString((PyObject *) PY_TYPE(SegmentCommitInfo), "class_", make_descriptor(SegmentCommitInfo::initializeClass, 1));
          PyObject_SetAttrString((PyObject *) PY_TYPE(SegmentCommitInfo), "wrapfn_", make_descriptor(t_SegmentCommitInfo::wrap_jobject));
          PyObject_SetAttrString((PyObject *) PY_TYPE(SegmentCommitInfo), "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_SegmentCommitInfo_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, SegmentCommitInfo::initializeClass, 1)))
            return NULL;
          return t_SegmentCommitInfo::wrap_Object(SegmentCommitInfo(((t_SegmentCommitInfo *) arg)->object.this$));
        }
        static PyObject *t_SegmentCommitInfo_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, SegmentCommitInfo::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_SegmentCommitInfo_init_(t_SegmentCommitInfo *self, PyObject *args, PyObject *kwds)
        {
          ::org::apache::lucene::index::SegmentInfo a0((jobject) NULL);
          jint a1;
          jint a2;
          jlong a3;
          jlong a4;
          jlong a5;
          JArray< jbyte > a6((jobject) NULL);
          SegmentCommitInfo object((jobject) NULL);

          if (!parseArgs(args, "kIIJJJ[B", ::org::apache::lucene::index::SegmentInfo::initializeClass, &a0, &a1, &a2, &a3, &a4, &a5, &a6))
          {
            INT_CALL(object = SegmentCommitInfo(a0, a1, a2, a3, a4, a5, a6));
            self->object = object;
          }
          else
          {
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }

        static PyObject *t_SegmentCommitInfo_clone(t_SegmentCommitInfo *self)
        {
          SegmentCommitInfo result((jobject) NULL);
          OBJ_CALL(result = self->object.clone());
          return t_SegmentCommitInfo::wrap_Object(result);
        }

        static PyObject *t_SegmentCommitInfo_files(t_SegmentCommitInfo *self)
        {
          ::java::util::Collection result((jobject) NULL);
          OBJ_CALL(result = self->object.files());
          return ::java::util::t_Collection::wrap_Object(result, ::java::lang::PY_TYPE(String));
        }

        static PyObject *t_SegmentCommitInfo_getDelCount(t_SegmentCommitInfo *self)
        {
          jint result;
          OBJ_CALL(result = self->object.getDelCount());
          return PyLong_FromLong((long) result);
        }

        static PyObject *t_SegmentCommitInfo_getDelGen(t_SegmentCommitInfo *self)
        {
          jlong result;
          OBJ_CALL(result = self->object.getDelGen());
          return PyLong_FromLongLong((PY_LONG_LONG) result);
        }

        static PyObject *t_SegmentCommitInfo_getDocValuesGen(t_SegmentCommitInfo *self)
        {
          jlong result;
          OBJ_CALL(result = self->object.getDocValuesGen());
          return PyLong_FromLongLong((PY_LONG_LONG) result);
        }

        static PyObject *t_SegmentCommitInfo_getDocValuesUpdatesFiles(t_SegmentCommitInfo *self)
        {
          ::java::util::Map result((jobject) NULL);
          OBJ_CALL(result = self->object.getDocValuesUpdatesFiles());
          return ::java::util::t_Map::wrap_Object(result);
        }

        static PyObject *t_SegmentCommitInfo_getFieldInfosFiles(t_SegmentCommitInfo *self)
        {
          ::java::util::Set result((jobject) NULL);
          OBJ_CALL(result = self->object.getFieldInfosFiles());
          return ::java::util::t_Set::wrap_Object(result, ::java::lang::PY_TYPE(String));
        }

        static PyObject *t_SegmentCommitInfo_getFieldInfosGen(t_SegmentCommitInfo *self)
        {
          jlong result;
          OBJ_CALL(result = self->object.getFieldInfosGen());
          return PyLong_FromLongLong((PY_LONG_LONG) result);
        }

        static PyObject *t_SegmentCommitInfo_getId(t_SegmentCommitInfo *self)
        {
          JArray< jbyte > result((jobject) NULL);
          OBJ_CALL(result = self->object.getId());
          return result.wrap();
        }

        static PyObject *t_SegmentCommitInfo_getNextDelGen(t_SegmentCommitInfo *self)
        {
          jlong result;
          OBJ_CALL(result = self->object.getNextDelGen());
          return PyLong_FromLongLong((PY_LONG_LONG) result);
        }

        static PyObject *t_SegmentCommitInfo_getNextDocValuesGen(t_SegmentCommitInfo *self)
        {
          jlong result;
          OBJ_CALL(result = self->object.getNextDocValuesGen());
          return PyLong_FromLongLong((PY_LONG_LONG) result);
        }

        static PyObject *t_SegmentCommitInfo_getNextFieldInfosGen(t_SegmentCommitInfo *self)
        {
          jlong result;
          OBJ_CALL(result = self->object.getNextFieldInfosGen());
          return PyLong_FromLongLong((PY_LONG_LONG) result);
        }

        static PyObject *t_SegmentCommitInfo_getSoftDelCount(t_SegmentCommitInfo *self)
        {
          jint result;
          OBJ_CALL(result = self->object.getSoftDelCount());
          return PyLong_FromLong((long) result);
        }

        static PyObject *t_SegmentCommitInfo_hasDeletions(t_SegmentCommitInfo *self)
        {
          jboolean result;
          OBJ_CALL(result = self->object.hasDeletions());
          Py_RETURN_BOOL(result);
        }

        static PyObject *t_SegmentCommitInfo_hasFieldUpdates(t_SegmentCommitInfo *self)
        {
          jboolean result;
          OBJ_CALL(result = self->object.hasFieldUpdates());
          Py_RETURN_BOOL(result);
        }

        static PyObject *t_SegmentCommitInfo_setDocValuesUpdatesFiles(t_SegmentCommitInfo *self, PyObject *arg)
        {
          ::java::util::Map a0((jobject) NULL);
          PyTypeObject **p0;

          if (!parseArg(arg, "K", ::java::util::Map::initializeClass, &a0, &p0, ::java::util::t_Map::parameters_))
          {
            OBJ_CALL(self->object.setDocValuesUpdatesFiles(a0));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "setDocValuesUpdatesFiles", arg);
          return NULL;
        }

        static PyObject *t_SegmentCommitInfo_setFieldInfosFiles(t_SegmentCommitInfo *self, PyObject *arg)
        {
          ::java::util::Set a0((jobject) NULL);
          PyTypeObject **p0;

          if (!parseArg(arg, "K", ::java::util::Set::initializeClass, &a0, &p0, ::java::util::t_Set::parameters_))
          {
            OBJ_CALL(self->object.setFieldInfosFiles(a0));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "setFieldInfosFiles", arg);
          return NULL;
        }

        static PyObject *t_SegmentCommitInfo_sizeInBytes(t_SegmentCommitInfo *self)
        {
          jlong result;
          OBJ_CALL(result = self->object.sizeInBytes());
          return PyLong_FromLongLong((PY_LONG_LONG) result);
        }

        static PyObject *t_SegmentCommitInfo_toString(t_SegmentCommitInfo *self, PyObject *args)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 0:
            {
              ::java::lang::String result((jobject) NULL);
              OBJ_CALL(result = self->object.toString());
              return j2p(result);
            }
            break;
           case 1:
            {
              jint a0;
              ::java::lang::String result((jobject) NULL);

              if (!parseArgs(args, "I", &a0))
              {
                OBJ_CALL(result = self->object.toString(a0));
                return j2p(result);
              }
            }
          }

          return callSuper(PY_TYPE(SegmentCommitInfo), (PyObject *) self, "toString", args, 2);
        }

        static PyObject *t_SegmentCommitInfo_get__info(t_SegmentCommitInfo *self, void *data)
        {
          ::org::apache::lucene::index::SegmentInfo value((jobject) NULL);
          OBJ_CALL(value = self->object._get_info());
          return ::org::apache::lucene::index::t_SegmentInfo::wrap_Object(value);
        }

        static PyObject *t_SegmentCommitInfo_get__delCount(t_SegmentCommitInfo *self, void *data)
        {
          jint value;
          OBJ_CALL(value = self->object.getDelCount());
          return PyLong_FromLong((long) value);
        }

        static PyObject *t_SegmentCommitInfo_get__delGen(t_SegmentCommitInfo *self, void *data)
        {
          jlong value;
          OBJ_CALL(value = self->object.getDelGen());
          return PyLong_FromLongLong((PY_LONG_LONG) value);
        }

        static PyObject *t_SegmentCommitInfo_get__docValuesGen(t_SegmentCommitInfo *self, void *data)
        {
          jlong value;
          OBJ_CALL(value = self->object.getDocValuesGen());
          return PyLong_FromLongLong((PY_LONG_LONG) value);
        }

        static PyObject *t_SegmentCommitInfo_get__docValuesUpdatesFiles(t_SegmentCommitInfo *self, void *data)
        {
          ::java::util::Map value((jobject) NULL);
          OBJ_CALL(value = self->object.getDocValuesUpdatesFiles());
          return ::java::util::t_Map::wrap_Object(value);
        }
        static int t_SegmentCommitInfo_set__docValuesUpdatesFiles(t_SegmentCommitInfo *self, PyObject *arg, void *data)
        {
          {
            ::java::util::Map value((jobject) NULL);
            if (!parseArg(arg, "k", ::java::util::Map::initializeClass, &value))
            {
              INT_CALL(self->object.setDocValuesUpdatesFiles(value));
              return 0;
            }
          }
          PyErr_SetArgsError((PyObject *) self, "docValuesUpdatesFiles", arg);
          return -1;
        }

        static PyObject *t_SegmentCommitInfo_get__fieldInfosFiles(t_SegmentCommitInfo *self, void *data)
        {
          ::java::util::Set value((jobject) NULL);
          OBJ_CALL(value = self->object.getFieldInfosFiles());
          return ::java::util::t_Set::wrap_Object(value);
        }
        static int t_SegmentCommitInfo_set__fieldInfosFiles(t_SegmentCommitInfo *self, PyObject *arg, void *data)
        {
          {
            ::java::util::Set value((jobject) NULL);
            if (!parseArg(arg, "k", ::java::util::Set::initializeClass, &value))
            {
              INT_CALL(self->object.setFieldInfosFiles(value));
              return 0;
            }
          }
          PyErr_SetArgsError((PyObject *) self, "fieldInfosFiles", arg);
          return -1;
        }

        static PyObject *t_SegmentCommitInfo_get__fieldInfosGen(t_SegmentCommitInfo *self, void *data)
        {
          jlong value;
          OBJ_CALL(value = self->object.getFieldInfosGen());
          return PyLong_FromLongLong((PY_LONG_LONG) value);
        }

        static PyObject *t_SegmentCommitInfo_get__id(t_SegmentCommitInfo *self, void *data)
        {
          JArray< jbyte > value((jobject) NULL);
          OBJ_CALL(value = self->object.getId());
          return value.wrap();
        }

        static PyObject *t_SegmentCommitInfo_get__nextDelGen(t_SegmentCommitInfo *self, void *data)
        {
          jlong value;
          OBJ_CALL(value = self->object.getNextDelGen());
          return PyLong_FromLongLong((PY_LONG_LONG) value);
        }

        static PyObject *t_SegmentCommitInfo_get__nextDocValuesGen(t_SegmentCommitInfo *self, void *data)
        {
          jlong value;
          OBJ_CALL(value = self->object.getNextDocValuesGen());
          return PyLong_FromLongLong((PY_LONG_LONG) value);
        }

        static PyObject *t_SegmentCommitInfo_get__nextFieldInfosGen(t_SegmentCommitInfo *self, void *data)
        {
          jlong value;
          OBJ_CALL(value = self->object.getNextFieldInfosGen());
          return PyLong_FromLongLong((PY_LONG_LONG) value);
        }

        static PyObject *t_SegmentCommitInfo_get__softDelCount(t_SegmentCommitInfo *self, void *data)
        {
          jint value;
          OBJ_CALL(value = self->object.getSoftDelCount());
          return PyLong_FromLong((long) value);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/vectorhighlight/FieldFragList$WeightedFragInfo$SubInfo.h"
#include "java/util/List.h"
#include "java/lang/String.h"
#include "org/apache/lucene/search/vectorhighlight/FieldPhraseList$WeightedPhraseInfo$Toffs.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace vectorhighlight {

          ::java::lang::Class *FieldFragList$WeightedFragInfo$SubInfo::class$ = NULL;
          jmethodID *FieldFragList$WeightedFragInfo$SubInfo::mids$ = NULL;
          bool FieldFragList$WeightedFragInfo$SubInfo::live$ = false;

          jclass FieldFragList$WeightedFragInfo$SubInfo::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/search/vectorhighlight/FieldFragList$WeightedFragInfo$SubInfo");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_f39f835ff251d495] = env->getMethodID(cls, "<init>", "(Ljava/lang/String;Ljava/util/List;IF)V");
              mids$[mid_getBoost_58aec2b64dff50c8] = env->getMethodID(cls, "getBoost", "()F");
              mids$[mid_getSeqnum_9972fcc56b44e79d] = env->getMethodID(cls, "getSeqnum", "()I");
              mids$[mid_getTermsOffsets_49ec78390f08338a] = env->getMethodID(cls, "getTermsOffsets", "()Ljava/util/List;");
              mids$[mid_getText_db9b55ba01e03e4b] = env->getMethodID(cls, "getText", "()Ljava/lang/String;");
              mids$[mid_toString_db9b55ba01e03e4b] = env->getMethodID(cls, "toString", "()Ljava/lang/String;");

              class$ = new ::java::lang::Class(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          FieldFragList$WeightedFragInfo$SubInfo::FieldFragList$WeightedFragInfo$SubInfo(const ::java::lang::String & a0, const ::java::util::List & a1, jint a2, jfloat a3) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_f39f835ff251d495, a0.this$, a1.this$, a2, a3)) {}

          jfloat FieldFragList$WeightedFragInfo$SubInfo::getBoost() const
          {
            return env->callFloatMethod(this$, mids$[mid_getBoost_58aec2b64dff50c8]);
          }

          jint FieldFragList$WeightedFragInfo$SubInfo::getSeqnum() const
          {
            return env->callIntMethod(this$, mids$[mid_getSeqnum_9972fcc56b44e79d]);
          }

          ::java::util::List FieldFragList$WeightedFragInfo$SubInfo::getTermsOffsets() const
          {
            return ::java::util::List(env->callObjectMethod(this$, mids$[mid_getTermsOffsets_49ec78390f08338a]));
          }

          ::java::lang::String FieldFragList$WeightedFragInfo$SubInfo::getText() const
          {
            return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_getText_db9b55ba01e03e4b]));
          }

          ::java::lang::String FieldFragList$WeightedFragInfo$SubInfo::toString() const
          {
            return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_db9b55ba01e03e4b]));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace vectorhighlight {
          static PyObject *t_FieldFragList$WeightedFragInfo$SubInfo_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_FieldFragList$WeightedFragInfo$SubInfo_instance_(PyTypeObject *type, PyObject *arg);
          static int t_FieldFragList$WeightedFragInfo$SubInfo_init_(t_FieldFragList$WeightedFragInfo$SubInfo *self, PyObject *args, PyObject *kwds);
          static PyObject *t_FieldFragList$WeightedFragInfo$SubInfo_getBoost(t_FieldFragList$WeightedFragInfo$SubInfo *self);
          static PyObject *t_FieldFragList$WeightedFragInfo$SubInfo_getSeqnum(t_FieldFragList$WeightedFragInfo$SubInfo *self);
          static PyObject *t_FieldFragList$WeightedFragInfo$SubInfo_getTermsOffsets(t_FieldFragList$WeightedFragInfo$SubInfo *self);
          static PyObject *t_FieldFragList$WeightedFragInfo$SubInfo_getText(t_FieldFragList$WeightedFragInfo$SubInfo *self);
          static PyObject *t_FieldFragList$WeightedFragInfo$SubInfo_toString(t_FieldFragList$WeightedFragInfo$SubInfo *self, PyObject *args);
          static PyObject *t_FieldFragList$WeightedFragInfo$SubInfo_get__boost(t_FieldFragList$WeightedFragInfo$SubInfo *self, void *data);
          static PyObject *t_FieldFragList$WeightedFragInfo$SubInfo_get__seqnum(t_FieldFragList$WeightedFragInfo$SubInfo *self, void *data);
          static PyObject *t_FieldFragList$WeightedFragInfo$SubInfo_get__termsOffsets(t_FieldFragList$WeightedFragInfo$SubInfo *self, void *data);
          static PyObject *t_FieldFragList$WeightedFragInfo$SubInfo_get__text(t_FieldFragList$WeightedFragInfo$SubInfo *self, void *data);
          static PyGetSetDef t_FieldFragList$WeightedFragInfo$SubInfo__fields_[] = {
            DECLARE_GET_FIELD(t_FieldFragList$WeightedFragInfo$SubInfo, boost),
            DECLARE_GET_FIELD(t_FieldFragList$WeightedFragInfo$SubInfo, seqnum),
            DECLARE_GET_FIELD(t_FieldFragList$WeightedFragInfo$SubInfo, termsOffsets),
            DECLARE_GET_FIELD(t_FieldFragList$WeightedFragInfo$SubInfo, text),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_FieldFragList$WeightedFragInfo$SubInfo__methods_[] = {
            DECLARE_METHOD(t_FieldFragList$WeightedFragInfo$SubInfo, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_FieldFragList$WeightedFragInfo$SubInfo, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_FieldFragList$WeightedFragInfo$SubInfo, getBoost, METH_NOARGS),
            DECLARE_METHOD(t_FieldFragList$WeightedFragInfo$SubInfo, getSeqnum, METH_NOARGS),
            DECLARE_METHOD(t_FieldFragList$WeightedFragInfo$SubInfo, getTermsOffsets, METH_NOARGS),
            DECLARE_METHOD(t_FieldFragList$WeightedFragInfo$SubInfo, getText, METH_NOARGS),
            DECLARE_METHOD(t_FieldFragList$WeightedFragInfo$SubInfo, toString, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          static PyType_Slot PY_TYPE_SLOTS(FieldFragList$WeightedFragInfo$SubInfo)[] = {
            { Py_tp_methods, t_FieldFragList$WeightedFragInfo$SubInfo__methods_ },
            { Py_tp_init, (void *) t_FieldFragList$WeightedFragInfo$SubInfo_init_ },
            { Py_tp_getset, t_FieldFragList$WeightedFragInfo$SubInfo__fields_ },
            { 0, NULL }
          };

          static PyType_Def *PY_TYPE_BASES(FieldFragList$WeightedFragInfo$SubInfo)[] = {
            &PY_TYPE_DEF(::java::lang::Object),
            NULL
          };

          DEFINE_TYPE(FieldFragList$WeightedFragInfo$SubInfo, t_FieldFragList$WeightedFragInfo$SubInfo, FieldFragList$WeightedFragInfo$SubInfo);

          void t_FieldFragList$WeightedFragInfo$SubInfo::install(PyObject *module)
          {
            installType(&PY_TYPE(FieldFragList$WeightedFragInfo$SubInfo), &PY_TYPE_DEF(FieldFragList$WeightedFragInfo$SubInfo), module, "FieldFragList$WeightedFragInfo$SubInfo", 0);
          }

          void t_FieldFragList$WeightedFragInfo$SubInfo::initialize(PyObject *module)
          {
            PyObject_SetAttrString((PyObject *) PY_TYPE(FieldFragList$WeightedFragInfo$SubInfo), "class_", make_descriptor(FieldFragList$WeightedFragInfo$SubInfo::initializeClass, 1));
            PyObject_SetAttrString((PyObject *) PY_TYPE(FieldFragList$WeightedFragInfo$SubInfo), "wrapfn_", make_descriptor(t_FieldFragList$WeightedFragInfo$SubInfo::wrap_jobject));
            PyObject_SetAttrString((PyObject *) PY_TYPE(FieldFragList$WeightedFragInfo$SubInfo), "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_FieldFragList$WeightedFragInfo$SubInfo_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, FieldFragList$WeightedFragInfo$SubInfo::initializeClass, 1)))
              return NULL;
            return t_FieldFragList$WeightedFragInfo$SubInfo::wrap_Object(FieldFragList$WeightedFragInfo$SubInfo(((t_FieldFragList$WeightedFragInfo$SubInfo *) arg)->object.this$));
          }
          static PyObject *t_FieldFragList$WeightedFragInfo$SubInfo_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, FieldFragList$WeightedFragInfo$SubInfo::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_FieldFragList$WeightedFragInfo$SubInfo_init_(t_FieldFragList$WeightedFragInfo$SubInfo *self, PyObject *args, PyObject *kwds)
          {
            ::java::lang::String a0((jobject) NULL);
            ::java::util::List a1((jobject) NULL);
            PyTypeObject **p1;
            jint a2;
            jfloat a3;
            FieldFragList$WeightedFragInfo$SubInfo object((jobject) NULL);

            if (!parseArgs(args, "sKIF", ::java::util::List::initializeClass, &a0, &a1, &p1, ::java::util::t_List::parameters_, &a2, &a3))
            {
              INT_CALL(object = FieldFragList$WeightedFragInfo$SubInfo(a0, a1, a2, a3));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_FieldFragList$WeightedFragInfo$SubInfo_getBoost(t_FieldFragList$WeightedFragInfo$SubInfo *self)
          {
            jfloat result;
            OBJ_CALL(result = self->object.getBoost());
            return PyFloat_FromDouble((double) result);
          }

          static PyObject *t_FieldFragList$WeightedFragInfo$SubInfo_getSeqnum(t_FieldFragList$WeightedFragInfo$SubInfo *self)
          {
            jint result;
            OBJ_CALL(result = self->object.getSeqnum());
            return PyLong_FromLong((long) result);
          }

          static PyObject *t_FieldFragList$WeightedFragInfo$SubInfo_getTermsOffsets(t_FieldFragList$WeightedFragInfo$SubInfo *self)
          {
            ::java::util::List result((jobject) NULL);
            OBJ_CALL(result = self->object.getTermsOffsets());
            return ::java::util::t_List::wrap_Object(result, ::org::apache::lucene::search::vectorhighlight::PY_TYPE(FieldPhraseList$WeightedPhraseInfo$Toffs));
          }

          static PyObject *t_FieldFragList$WeightedFragInfo$SubInfo_getText(t_FieldFragList$WeightedFragInfo$SubInfo *self)
          {
            ::java::lang::String result((jobject) NULL);
            OBJ_CALL(result = self->object.getText());
            return j2p(result);
          }

          static PyObject *t_FieldFragList$WeightedFragInfo$SubInfo_toString(t_FieldFragList$WeightedFragInfo$SubInfo *self, PyObject *args)
          {
            ::java::lang::String result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.toString());
              return j2p(result);
            }

            return callSuper(PY_TYPE(FieldFragList$WeightedFragInfo$SubInfo), (PyObject *) self, "toString", args, 2);
          }

          static PyObject *t_FieldFragList$WeightedFragInfo$SubInfo_get__boost(t_FieldFragList$WeightedFragInfo$SubInfo *self, void *data)
          {
            jfloat value;
            OBJ_CALL(value = self->object.getBoost());
            return PyFloat_FromDouble((double) value);
          }

          static PyObject *t_FieldFragList$WeightedFragInfo$SubInfo_get__seqnum(t_FieldFragList$WeightedFragInfo$SubInfo *self, void *data)
          {
            jint value;
            OBJ_CALL(value = self->object.getSeqnum());
            return PyLong_FromLong((long) value);
          }

          static PyObject *t_FieldFragList$WeightedFragInfo$SubInfo_get__termsOffsets(t_FieldFragList$WeightedFragInfo$SubInfo *self, void *data)
          {
            ::java::util::List value((jobject) NULL);
            OBJ_CALL(value = self->object.getTermsOffsets());
            return ::java::util::t_List::wrap_Object(value);
          }

          static PyObject *t_FieldFragList$WeightedFragInfo$SubInfo_get__text(t_FieldFragList$WeightedFragInfo$SubInfo *self, void *data)
          {
            ::java::lang::String value((jobject) NULL);
            OBJ_CALL(value = self->object.getText());
            return j2p(value);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queries/payloads/PayloadDecoder.h"
#include "org/apache/lucene/queries/payloads/PayloadDecoder.h"
#include "org/apache/lucene/util/BytesRef.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queries {
        namespace payloads {

          ::java::lang::Class *PayloadDecoder::class$ = NULL;
          jmethodID *PayloadDecoder::mids$ = NULL;
          bool PayloadDecoder::live$ = false;
          PayloadDecoder *PayloadDecoder::FLOAT_DECODER = NULL;

          jclass PayloadDecoder::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/queries/payloads/PayloadDecoder");

              mids$ = new jmethodID[max_mid];
              mids$[mid_computePayloadFactor_4a3180a3fc317019] = env->getMethodID(cls, "computePayloadFactor", "(Lorg/apache/lucene/util/BytesRef;)F");

              class$ = new ::java::lang::Class(cls);
              cls = (jclass) class$->this$;

              FLOAT_DECODER = new PayloadDecoder(env->getStaticObjectField(cls, "FLOAT_DECODER", "Lorg/apache/lucene/queries/payloads/PayloadDecoder;"));
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          jfloat PayloadDecoder::computePayloadFactor(const ::org::apache::lucene::util::BytesRef & a0) const
          {
            return env->callFloatMethod(this$, mids$[mid_computePayloadFactor_4a3180a3fc317019], a0.this$);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queries {
        namespace payloads {
          static PyObject *t_PayloadDecoder_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_PayloadDecoder_instance_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_PayloadDecoder_computePayloadFactor(t_PayloadDecoder *self, PyObject *arg);

          static PyMethodDef t_PayloadDecoder__methods_[] = {
            DECLARE_METHOD(t_PayloadDecoder, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_PayloadDecoder, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_PayloadDecoder, computePayloadFactor, METH_O),
            { NULL, NULL, 0, NULL }
          };

          static PyType_Slot PY_TYPE_SLOTS(PayloadDecoder)[] = {
            { Py_tp_methods, t_PayloadDecoder__methods_ },
            { Py_tp_init, (void *) abstract_init },
            { 0, NULL }
          };

          static PyType_Def *PY_TYPE_BASES(PayloadDecoder)[] = {
            &PY_TYPE_DEF(::java::lang::Object),
            NULL
          };

          DEFINE_TYPE(PayloadDecoder, t_PayloadDecoder, PayloadDecoder);

          void t_PayloadDecoder::install(PyObject *module)
          {
            installType(&PY_TYPE(PayloadDecoder), &PY_TYPE_DEF(PayloadDecoder), module, "PayloadDecoder", 0);
          }

          void t_PayloadDecoder::initialize(PyObject *module)
          {
            PyObject_SetAttrString((PyObject *) PY_TYPE(PayloadDecoder), "class_", make_descriptor(PayloadDecoder::initializeClass, 1));
            PyObject_SetAttrString((PyObject *) PY_TYPE(PayloadDecoder), "wrapfn_", make_descriptor(t_PayloadDecoder::wrap_jobject));
            PyObject_SetAttrString((PyObject *) PY_TYPE(PayloadDecoder), "boxfn_", make_descriptor(boxObject));
            env->getClass(PayloadDecoder::initializeClass);
            PyObject_SetAttrString((PyObject *) PY_TYPE(PayloadDecoder), "FLOAT_DECODER", make_descriptor(t_PayloadDecoder::wrap_Object(*PayloadDecoder::FLOAT_DECODER)));
          }

          static PyObject *t_PayloadDecoder_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, PayloadDecoder::initializeClass, 1)))
              return NULL;
            return t_PayloadDecoder::wrap_Object(PayloadDecoder(((t_PayloadDecoder *) arg)->object.this$));
          }
          static PyObject *t_PayloadDecoder_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, PayloadDecoder::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static PyObject *t_PayloadDecoder_computePayloadFactor(t_PayloadDecoder *self, PyObject *arg)
          {
            ::org::apache::lucene::util::BytesRef a0((jobject) NULL);
            jfloat result;

            if (!parseArg(arg, "k", ::org::apache::lucene::util::BytesRef::initializeClass, &a0))
            {
              OBJ_CALL(result = self->object.computePayloadFactor(a0));
              return PyFloat_FromDouble((double) result);
            }

            PyErr_SetArgsError((PyObject *) self, "computePayloadFactor", arg);
            return NULL;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/Analyzer$ReuseStrategy.h"
#include "org/apache/lucene/analysis/Analyzer$TokenStreamComponents.h"
#include "java/lang/String.h"
#include "org/apache/lucene/analysis/Analyzer.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {

        ::java::lang::Class *Analyzer$ReuseStrategy::class$ = NULL;
        jmethodID *Analyzer$ReuseStrategy::mids$ = NULL;
        bool Analyzer$ReuseStrategy::live$ = false;

        jclass Analyzer$ReuseStrategy::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/Analyzer$ReuseStrategy");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_f2cc1bce94666404] = env->getMethodID(cls, "<init>", "()V");
            mids$[mid_getReusableComponents_cd755395f7742ce0] = env->getMethodID(cls, "getReusableComponents", "(Lorg/apache/lucene/analysis/Analyzer;Ljava/lang/String;)Lorg/apache/lucene/analysis/Analyzer$TokenStreamComponents;");
            mids$[mid_setReusableComponents_4cd32fb80dad47cd] = env->getMethodID(cls, "setReusableComponents", "(Lorg/apache/lucene/analysis/Analyzer;Ljava/lang/String;Lorg/apache/lucene/analysis/Analyzer$TokenStreamComponents;)V");
            mids$[mid_setStoredValue_e33f347bcd0fb9e7] = env->getMethodID(cls, "setStoredValue", "(Lorg/apache/lucene/analysis/Analyzer;Ljava/lang/Object;)V");
            mids$[mid_getStoredValue_e3130fb703592f2f] = env->getMethodID(cls, "getStoredValue", "(Lorg/apache/lucene/analysis/Analyzer;)Ljava/lang/Object;");

            class$ = new ::java::lang::Class(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        Analyzer$ReuseStrategy::Analyzer$ReuseStrategy() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_f2cc1bce94666404)) {}

        ::org::apache::lucene::analysis::Analyzer$TokenStreamComponents Analyzer$ReuseStrategy::getReusableComponents(const ::org::apache::lucene::analysis::Analyzer & a0, const ::java::lang::String & a1) const
        {
          return ::org::apache::lucene::analysis::Analyzer$TokenStreamComponents(env->callObjectMethod(this$, mids$[mid_getReusableComponents_cd755395f7742ce0], a0.this$, a1.this$));
        }

        void Analyzer$ReuseStrategy::setReusableComponents(const ::org::apache::lucene::analysis::Analyzer & a0, const ::java::lang::String & a1, const ::org::apache::lucene::analysis::Analyzer$TokenStreamComponents & a2) const
        {
          env->callVoidMethod(this$, mids$[mid_setReusableComponents_4cd32fb80dad47cd], a0.this$, a1.this$, a2.this$);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        static PyObject *t_Analyzer$ReuseStrategy_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_Analyzer$ReuseStrategy_instance_(PyTypeObject *type, PyObject *arg);
        static int t_Analyzer$ReuseStrategy_init_(t_Analyzer$ReuseStrategy *self, PyObject *args, PyObject *kwds);
        static PyObject *t_Analyzer$ReuseStrategy_getReusableComponents(t_Analyzer$ReuseStrategy *self, PyObject *args);
        static PyObject *t_Analyzer$ReuseStrategy_setReusableComponents(t_Analyzer$ReuseStrategy *self, PyObject *args);

        static PyMethodDef t_Analyzer$ReuseStrategy__methods_[] = {
          DECLARE_METHOD(t_Analyzer$ReuseStrategy, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_Analyzer$ReuseStrategy, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_Analyzer$ReuseStrategy, getReusableComponents, METH_VARARGS),
          DECLARE_METHOD(t_Analyzer$ReuseStrategy, setReusableComponents, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        static PyType_Slot PY_TYPE_SLOTS(Analyzer$ReuseStrategy)[] = {
          { Py_tp_methods, t_Analyzer$ReuseStrategy__methods_ },
          { Py_tp_init, (void *) t_Analyzer$ReuseStrategy_init_ },
          { 0, NULL }
        };

        static PyType_Def *PY_TYPE_BASES(Analyzer$ReuseStrategy)[] = {
          &PY_TYPE_DEF(::java::lang::Object),
          NULL
        };

        DEFINE_TYPE(Analyzer$ReuseStrategy, t_Analyzer$ReuseStrategy, Analyzer$ReuseStrategy);

        void t_Analyzer$ReuseStrategy::install(PyObject *module)
        {
          installType(&PY_TYPE(Analyzer$ReuseStrategy), &PY_TYPE_DEF(Analyzer$ReuseStrategy), module, "Analyzer$ReuseStrategy", 0);
        }

        void t_Analyzer$ReuseStrategy::initialize(PyObject *module)
        {
          PyObject_SetAttrString((PyObject *) PY_TYPE(Analyzer$ReuseStrategy), "class_", make_descriptor(Analyzer$ReuseStrategy::initializeClass, 1));
          PyObject_SetAttrString((PyObject *) PY_TYPE(Analyzer$ReuseStrategy), "wrapfn_", make_descriptor(t_Analyzer$ReuseStrategy::wrap_jobject));
          PyObject_SetAttrString((PyObject *) PY_TYPE(Analyzer$ReuseStrategy), "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_Analyzer$ReuseStrategy_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, Analyzer$ReuseStrategy::initializeClass, 1)))
            return NULL;
          return t_Analyzer$ReuseStrategy::wrap_Object(Analyzer$ReuseStrategy(((t_Analyzer$ReuseStrategy *) arg)->object.this$));
        }
        static PyObject *t_Analyzer$ReuseStrategy_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, Analyzer$ReuseStrategy::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_Analyzer$ReuseStrategy_init_(t_Analyzer$ReuseStrategy *self, PyObject *args, PyObject *kwds)
        {
          Analyzer$ReuseStrategy object((jobject) NULL);

          INT_CALL(object = Analyzer$ReuseStrategy());
          self->object = object;

          return 0;
        }

        static PyObject *t_Analyzer$ReuseStrategy_getReusableComponents(t_Analyzer$ReuseStrategy *self, PyObject *args)
        {
          ::org::apache::lucene::analysis::Analyzer a0((jobject) NULL);
          ::java::lang::String a1((jobject) NULL);
          ::org::apache::lucene::analysis::Analyzer$TokenStreamComponents result((jobject) NULL);

          if (!parseArgs(args, "ks", ::org::apache::lucene::analysis::Analyzer::initializeClass, &a0, &a1))
          {
            OBJ_CALL(result = self->object.getReusableComponents(a0, a1));
            return ::org::apache::lucene::analysis::t_Analyzer$TokenStreamComponents::wrap_Object(result);
          }

          PyErr_SetArgsError((PyObject *) self, "getReusableComponents", args);
          return NULL;
        }

        static PyObject *t_Analyzer$ReuseStrategy_setReusableComponents(t_Analyzer$ReuseStrategy *self, PyObject *args)
        {
          ::org::apache::lucene::analysis::Analyzer a0((jobject) NULL);
          ::java::lang::String a1((jobject) NULL);
          ::org::apache::lucene::analysis::Analyzer$TokenStreamComponents a2((jobject) NULL);

          if (!parseArgs(args, "ksk", ::org::apache::lucene::analysis::Analyzer::initializeClass, ::org::apache::lucene::analysis::Analyzer$TokenStreamComponents::initializeClass, &a0, &a1, &a2))
          {
            OBJ_CALL(self->object.setReusableComponents(a0, a1, a2));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "setReusableComponents", args);
          return NULL;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/FilterMatchesIterator.h"
#include "org/apache/lucene/search/Query.h"
#include "org/apache/lucene/search/MatchesIterator.h"
#include "java/io/IOException.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {

        ::java::lang::Class *FilterMatchesIterator::class$ = NULL;
        jmethodID *FilterMatchesIterator::mids$ = NULL;
        bool FilterMatchesIterator::live$ = false;

        jclass FilterMatchesIterator::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/search/FilterMatchesIterator");

            mids$ = new jmethodID[max_mid];
            mids$[mid_endOffset_9972fcc56b44e79d] = env->getMethodID(cls, "endOffset", "()I");
            mids$[mid_endPosition_9972fcc56b44e79d] = env->getMethodID(cls, "endPosition", "()I");
            mids$[mid_getQuery_cbf839a480265450] = env->getMethodID(cls, "getQuery", "()Lorg/apache/lucene/search/Query;");
            mids$[mid_getSubMatches_f62a1cfba0155bff] = env->getMethodID(cls, "getSubMatches", "()Lorg/apache/lucene/search/MatchesIterator;");
            mids$[mid_next_8454bd5aa23fd11e] = env->getMethodID(cls, "next", "()Z");
            mids$[mid_startOffset_9972fcc56b44e79d] = env->getMethodID(cls, "startOffset", "()I");
            mids$[mid_startPosition_9972fcc56b44e79d] = env->getMethodID(cls, "startPosition", "()I");

            class$ = new ::java::lang::Class(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        jint FilterMatchesIterator::endOffset() const
        {
          return env->callIntMethod(this$, mids$[mid_endOffset_9972fcc56b44e79d]);
        }

        jint FilterMatchesIterator::endPosition() const
        {
          return env->callIntMethod(this$, mids$[mid_endPosition_9972fcc56b44e79d]);
        }

        ::org::apache::lucene::search::Query FilterMatchesIterator::getQuery() const
        {
          return ::org::apache::lucene::search::Query(env->callObjectMethod(this$, mids$[mid_getQuery_cbf839a480265450]));
        }

        ::org::apache::lucene::search::MatchesIterator FilterMatchesIterator::getSubMatches() const
        {
          return ::org::apache::lucene::search::MatchesIterator(env->callObjectMethod(this$, mids$[mid_getSubMatches_f62a1cfba0155bff]));
        }

        jboolean FilterMatchesIterator::next() const
        {
          return env->callBooleanMethod(this$, mids$[mid_next_8454bd5aa23fd11e]);
        }

        jint FilterMatchesIterator::startOffset() const
        {
          return env->callIntMethod(this$, mids$[mid_startOffset_9972fcc56b44e79d]);
        }

        jint FilterMatchesIterator::startPosition() const
        {
          return env->callIntMethod(this$, mids$[mid_startPosition_9972fcc56b44e79d]);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        static PyObject *t_FilterMatchesIterator_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_FilterMatchesIterator_instance_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_FilterMatchesIterator_endOffset(t_FilterMatchesIterator *self);
        static PyObject *t_FilterMatchesIterator_endPosition(t_FilterMatchesIterator *self);
        static PyObject *t_FilterMatchesIterator_getQuery(t_FilterMatchesIterator *self);
        static PyObject *t_FilterMatchesIterator_getSubMatches(t_FilterMatchesIterator *self);
        static PyObject *t_FilterMatchesIterator_next(t_FilterMatchesIterator *self);
        static PyObject *t_FilterMatchesIterator_startOffset(t_FilterMatchesIterator *self);
        static PyObject *t_FilterMatchesIterator_startPosition(t_FilterMatchesIterator *self);
        static PyObject *t_FilterMatchesIterator_get__query(t_FilterMatchesIterator *self, void *data);
        static PyObject *t_FilterMatchesIterator_get__subMatches(t_FilterMatchesIterator *self, void *data);
        static PyGetSetDef t_FilterMatchesIterator__fields_[] = {
          DECLARE_GET_FIELD(t_FilterMatchesIterator, query),
          DECLARE_GET_FIELD(t_FilterMatchesIterator, subMatches),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_FilterMatchesIterator__methods_[] = {
          DECLARE_METHOD(t_FilterMatchesIterator, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_FilterMatchesIterator, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_FilterMatchesIterator, endOffset, METH_NOARGS),
          DECLARE_METHOD(t_FilterMatchesIterator, endPosition, METH_NOARGS),
          DECLARE_METHOD(t_FilterMatchesIterator, getQuery, METH_NOARGS),
          DECLARE_METHOD(t_FilterMatchesIterator, getSubMatches, METH_NOARGS),
          DECLARE_METHOD(t_FilterMatchesIterator, next, METH_NOARGS),
          DECLARE_METHOD(t_FilterMatchesIterator, startOffset, METH_NOARGS),
          DECLARE_METHOD(t_FilterMatchesIterator, startPosition, METH_NOARGS),
          { NULL, NULL, 0, NULL }
        };

        static PyType_Slot PY_TYPE_SLOTS(FilterMatchesIterator)[] = {
          { Py_tp_methods, t_FilterMatchesIterator__methods_ },
          { Py_tp_init, (void *) abstract_init },
          { Py_tp_getset, t_FilterMatchesIterator__fields_ },
          { 0, NULL }
        };

        static PyType_Def *PY_TYPE_BASES(FilterMatchesIterator)[] = {
          &PY_TYPE_DEF(::java::lang::Object),
          NULL
        };

        DEFINE_TYPE(FilterMatchesIterator, t_FilterMatchesIterator, FilterMatchesIterator);

        void t_FilterMatchesIterator::install(PyObject *module)
        {
          installType(&PY_TYPE(FilterMatchesIterator), &PY_TYPE_DEF(FilterMatchesIterator), module, "FilterMatchesIterator", 0);
        }

        void t_FilterMatchesIterator::initialize(PyObject *module)
        {
          PyObject_SetAttrString((PyObject *) PY_TYPE(FilterMatchesIterator), "class_", make_descriptor(FilterMatchesIterator::initializeClass, 1));
          PyObject_SetAttrString((PyObject *) PY_TYPE(FilterMatchesIterator), "wrapfn_", make_descriptor(t_FilterMatchesIterator::wrap_jobject));
          PyObject_SetAttrString((PyObject *) PY_TYPE(FilterMatchesIterator), "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_FilterMatchesIterator_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, FilterMatchesIterator::initializeClass, 1)))
            return NULL;
          return t_FilterMatchesIterator::wrap_Object(FilterMatchesIterator(((t_FilterMatchesIterator *) arg)->object.this$));
        }
        static PyObject *t_FilterMatchesIterator_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, FilterMatchesIterator::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static PyObject *t_FilterMatchesIterator_endOffset(t_FilterMatchesIterator *self)
        {
          jint result;
          OBJ_CALL(result = self->object.endOffset());
          return PyLong_FromLong((long) result);
        }

        static PyObject *t_FilterMatchesIterator_endPosition(t_FilterMatchesIterator *self)
        {
          jint result;
          OBJ_CALL(result = self->object.endPosition());
          return PyLong_FromLong((long) result);
        }

        static PyObject *t_FilterMatchesIterator_getQuery(t_FilterMatchesIterator *self)
        {
          ::org::apache::lucene::search::Query result((jobject) NULL);
          OBJ_CALL(result = self->object.getQuery());
          return ::org::apache::lucene::search::t_Query::wrap_Object(result);
        }

        static PyObject *t_FilterMatchesIterator_getSubMatches(t_FilterMatchesIterator *self)
        {
          ::org::apache::lucene::search::MatchesIterator result((jobject) NULL);
          OBJ_CALL(result = self->object.getSubMatches());
          return ::org::apache::lucene::search::t_MatchesIterator::wrap_Object(result);
        }

        static PyObject *t_FilterMatchesIterator_next(t_FilterMatchesIterator *self)
        {
          jboolean result;
          OBJ_CALL(result = self->object.next());
          Py_RETURN_BOOL(result);
        }

        static PyObject *t_FilterMatchesIterator_startOffset(t_FilterMatchesIterator *self)
        {
          jint result;
          OBJ_CALL(result = self->object.startOffset());
          return PyLong_FromLong((long) result);
        }

        static PyObject *t_FilterMatchesIterator_startPosition(t_FilterMatchesIterator *self)
        {
          jint result;
          OBJ_CALL(result = self->object.startPosition());
          return PyLong_FromLong((long) result);
        }

        static PyObject *t_FilterMatchesIterator_get__query(t_FilterMatchesIterator *self, void *data)
        {
          ::org::apache::lucene::search::Query value((jobject) NULL);
          OBJ_CALL(value = self->object.getQuery());
          return ::org::apache::lucene::search::t_Query::wrap_Object(value);
        }

        static PyObject *t_FilterMatchesIterator_get__subMatches(t_FilterMatchesIterator *self, void *data)
        {
          ::org::apache::lucene::search::MatchesIterator value((jobject) NULL);
          OBJ_CALL(value = self->object.getSubMatches());
          return ::org::apache::lucene::search::t_MatchesIterator::wrap_Object(value);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/highlight/DefaultEncoder.h"
#include "org/apache/lucene/search/highlight/Encoder.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace highlight {

          ::java::lang::Class *DefaultEncoder::class$ = NULL;
          jmethodID *DefaultEncoder::mids$ = NULL;
          bool DefaultEncoder::live$ = false;

          jclass DefaultEncoder::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/search/highlight/DefaultEncoder");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_f2cc1bce94666404] = env->getMethodID(cls, "<init>", "()V");
              mids$[mid_encodeText_9bfa75c9f141b67f] = env->getMethodID(cls, "encodeText", "(Ljava/lang/String;)Ljava/lang/String;");

              class$ = new ::java::lang::Class(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          DefaultEncoder::DefaultEncoder() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_f2cc1bce94666404)) {}

          ::java::lang::String DefaultEncoder::encodeText(const ::java::lang::String & a0) const
          {
            return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_encodeText_9bfa75c9f141b67f], a0.this$));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace highlight {
          static PyObject *t_DefaultEncoder_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_DefaultEncoder_instance_(PyTypeObject *type, PyObject *arg);
          static int t_DefaultEncoder_init_(t_DefaultEncoder *self, PyObject *args, PyObject *kwds);
          static PyObject *t_DefaultEncoder_encodeText(t_DefaultEncoder *self, PyObject *arg);

          static PyMethodDef t_DefaultEncoder__methods_[] = {
            DECLARE_METHOD(t_DefaultEncoder, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_DefaultEncoder, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_DefaultEncoder, encodeText, METH_O),
            { NULL, NULL, 0, NULL }
          };

          static PyType_Slot PY_TYPE_SLOTS(DefaultEncoder)[] = {
            { Py_tp_methods, t_DefaultEncoder__methods_ },
            { Py_tp_init, (void *) t_DefaultEncoder_init_ },
            { 0, NULL }
          };

          static PyType_Def *PY_TYPE_BASES(DefaultEncoder)[] = {
            &PY_TYPE_DEF(::java::lang::Object),
            NULL
          };

          DEFINE_TYPE(DefaultEncoder, t_DefaultEncoder, DefaultEncoder);

          void t_DefaultEncoder::install(PyObject *module)
          {
            installType(&PY_TYPE(DefaultEncoder), &PY_TYPE_DEF(DefaultEncoder), module, "DefaultEncoder", 0);
          }

          void t_DefaultEncoder::initialize(PyObject *module)
          {
            PyObject_SetAttrString((PyObject *) PY_TYPE(DefaultEncoder), "class_", make_descriptor(DefaultEncoder::initializeClass, 1));
            PyObject_SetAttrString((PyObject *) PY_TYPE(DefaultEncoder), "wrapfn_", make_descriptor(t_DefaultEncoder::wrap_jobject));
            PyObject_SetAttrString((PyObject *) PY_TYPE(DefaultEncoder), "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_DefaultEncoder_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, DefaultEncoder::initializeClass, 1)))
              return NULL;
            return t_DefaultEncoder::wrap_Object(DefaultEncoder(((t_DefaultEncoder *) arg)->object.this$));
          }
          static PyObject *t_DefaultEncoder_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, DefaultEncoder::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_DefaultEncoder_init_(t_DefaultEncoder *self, PyObject *args, PyObject *kwds)
          {
            DefaultEncoder object((jobject) NULL);

            INT_CALL(object = DefaultEncoder());
            self->object = object;

            return 0;
          }

          static PyObject *t_DefaultEncoder_encodeText(t_DefaultEncoder *self, PyObject *arg)
          {
            ::java::lang::String a0((jobject) NULL);
            ::java::lang::String result((jobject) NULL);

            if (!parseArg(arg, "s", &a0))
            {
              OBJ_CALL(result = self->object.encodeText(a0));
              return j2p(result);
            }

            PyErr_SetArgsError((PyObject *) self, "encodeText", arg);
            return NULL;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/uhighlight/LabelledCharArrayMatcher.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/search/uhighlight/LabelledCharArrayMatcher.h"
#include "java/lang/String.h"
#include "org/apache/lucene/util/automaton/ByteRunAutomaton.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace uhighlight {

          ::java::lang::Class *LabelledCharArrayMatcher::class$ = NULL;
          jmethodID *LabelledCharArrayMatcher::mids$ = NULL;
          bool LabelledCharArrayMatcher::live$ = false;

          jclass LabelledCharArrayMatcher::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/search/uhighlight/LabelledCharArrayMatcher");

              mids$ = new jmethodID[max_mid];
              mids$[mid_getLabel_db9b55ba01e03e4b] = env->getMethodID(cls, "getLabel", "()Ljava/lang/String;");
              mids$[mid_wrap_50fa0bc0c9e67518] = env->getStaticMethodID(cls, "wrap", "(Ljava/lang/String;Lorg/apache/lucene/util/automaton/ByteRunAutomaton;)Lorg/apache/lucene/search/uhighlight/LabelledCharArrayMatcher;");
              mids$[mid_wrap_892c604dc463538d] = env->getStaticMethodID(cls, "wrap", "(Ljava/lang/String;Lorg/apache/lucene/search/uhighlight/CharArrayMatcher;)Lorg/apache/lucene/search/uhighlight/LabelledCharArrayMatcher;");

              class$ = new ::java::lang::Class(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          ::java::lang::String LabelledCharArrayMatcher::getLabel() const
          {
            return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_getLabel_db9b55ba01e03e4b]));
          }

          LabelledCharArrayMatcher LabelledCharArrayMatcher::wrap(const ::java::lang::String & a0, const ::org::apache::lucene::util::automaton::ByteRunAutomaton & a1)
          {
            jclass cls = env->getClass(initializeClass);
            return LabelledCharArrayMatcher(env->callStaticObjectMethod(cls, mids$[mid_wrap_50fa0bc0c9e67518], a0.this$, a1.this$));
          }

          LabelledCharArrayMatcher LabelledCharArrayMatcher::wrap(const ::java::lang::String & a0, const ::org::apache::lucene::search::uhighlight::CharArrayMatcher & a1)
          {
            jclass cls = env->getClass(initializeClass);
            return LabelledCharArrayMatcher(env->callStaticObjectMethod(cls, mids$[mid_wrap_892c604dc463538d], a0.this$, a1.this$));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace uhighlight {
          static PyObject *t_LabelledCharArrayMatcher_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_LabelledCharArrayMatcher_instance_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_LabelledCharArrayMatcher_getLabel(t_LabelledCharArrayMatcher *self);
          static PyObject *t_LabelledCharArrayMatcher_wrap(PyTypeObject *type, PyObject *args);
          static PyObject *t_LabelledCharArrayMatcher_get__label(t_LabelledCharArrayMatcher *self, void *data);
          static PyGetSetDef t_LabelledCharArrayMatcher__fields_[] = {
            DECLARE_GET_FIELD(t_LabelledCharArrayMatcher, label),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_LabelledCharArrayMatcher__methods_[] = {
            DECLARE_METHOD(t_LabelledCharArrayMatcher, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_LabelledCharArrayMatcher, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_LabelledCharArrayMatcher, getLabel, METH_NOARGS),
            DECLARE_METHOD(t_LabelledCharArrayMatcher, wrap, METH_VARARGS | METH_CLASS),
            { NULL, NULL, 0, NULL }
          };

          static PyType_Slot PY_TYPE_SLOTS(LabelledCharArrayMatcher)[] = {
            { Py_tp_methods, t_LabelledCharArrayMatcher__methods_ },
            { Py_tp_init, (void *) abstract_init },
            { Py_tp_getset, t_LabelledCharArrayMatcher__fields_ },
            { 0, NULL }
          };

          static PyType_Def *PY_TYPE_BASES(LabelledCharArrayMatcher)[] = {
            &PY_TYPE_DEF(::org::apache::lucene::search::uhighlight::CharArrayMatcher),
            NULL
          };

          DEFINE_TYPE(LabelledCharArrayMatcher, t_LabelledCharArrayMatcher, LabelledCharArrayMatcher);

          void t_LabelledCharArrayMatcher::install(PyObject *module)
          {
            installType(&PY_TYPE(LabelledCharArrayMatcher), &PY_TYPE_DEF(LabelledCharArrayMatcher), module, "LabelledCharArrayMatcher", 0);
          }

          void t_LabelledCharArrayMatcher::initialize(PyObject *module)
          {
            PyObject_SetAttrString((PyObject *) PY_TYPE(LabelledCharArrayMatcher), "class_", make_descriptor(LabelledCharArrayMatcher::initializeClass, 1));
            PyObject_SetAttrString((PyObject *) PY_TYPE(LabelledCharArrayMatcher), "wrapfn_", make_descriptor(t_LabelledCharArrayMatcher::wrap_jobject));
            PyObject_SetAttrString((PyObject *) PY_TYPE(LabelledCharArrayMatcher), "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_LabelledCharArrayMatcher_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, LabelledCharArrayMatcher::initializeClass, 1)))
              return NULL;
            return t_LabelledCharArrayMatcher::wrap_Object(LabelledCharArrayMatcher(((t_LabelledCharArrayMatcher *) arg)->object.this$));
          }
          static PyObject *t_LabelledCharArrayMatcher_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, LabelledCharArrayMatcher::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static PyObject *t_LabelledCharArrayMatcher_getLabel(t_LabelledCharArrayMatcher *self)
          {
            ::java::lang::String result((jobject) NULL);
            OBJ_CALL(result = self->object.getLabel());
            return j2p(result);
          }

          static PyObject *t_LabelledCharArrayMatcher_wrap(PyTypeObject *type, PyObject *args)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 2:
              {
                ::java::lang::String a0((jobject) NULL);
                ::org::apache::lucene::util::automaton::ByteRunAutomaton a1((jobject) NULL);
                LabelledCharArrayMatcher result((jobject) NULL);

                if (!parseArgs(args, "sk", ::org::apache::lucene::util::automaton::ByteRunAutomaton::initializeClass, &a0, &a1))
                {
                  OBJ_CALL(result = ::org::apache::lucene::search::uhighlight::LabelledCharArrayMatcher::wrap(a0, a1));
                  return t_LabelledCharArrayMatcher::wrap_Object(result);
                }
              }
              {
                ::java::lang::String a0((jobject) NULL);
                ::org::apache::lucene::search::uhighlight::CharArrayMatcher a1((jobject) NULL);
                LabelledCharArrayMatcher result((jobject) NULL);

                if (!parseArgs(args, "sk", ::org::apache::lucene::search::uhighlight::CharArrayMatcher::initializeClass, &a0, &a1))
                {
                  OBJ_CALL(result = ::org::apache::lucene::search::uhighlight::LabelledCharArrayMatcher::wrap(a0, a1));
                  return t_LabelledCharArrayMatcher::wrap_Object(result);
                }
              }
            }

            PyErr_SetArgsError(type, "wrap", args);
            return NULL;
          }

          static PyObject *t_LabelledCharArrayMatcher_get__label(t_LabelledCharArrayMatcher *self, void *data)
          {
            ::java::lang::String value((jobject) NULL);
            OBJ_CALL(value = self->object.getLabel());
            return j2p(value);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/snowball/SnowballPorterFilterFactory.h"
#include "java/util/Map.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/analysis/TokenStream.h"
#include "org/apache/lucene/analysis/util/ResourceLoader.h"
#include "org/apache/lucene/analysis/TokenFilter.h"
#include "java/lang/String.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/analysis/util/ResourceLoaderAware.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace snowball {

          ::java::lang::Class *SnowballPorterFilterFactory::class$ = NULL;
          jmethodID *SnowballPorterFilterFactory::mids$ = NULL;
          bool SnowballPorterFilterFactory::live$ = false;
          ::java::lang::String *SnowballPorterFilterFactory::NAME = NULL;
          ::java::lang::String *SnowballPorterFilterFactory::PROTECTED_TOKENS = NULL;

          jclass SnowballPorterFilterFactory::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/snowball/SnowballPorterFilterFactory");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_408bd889ee3beae5] = env->getMethodID(cls, "<init>", "(Ljava/util/Map;)V");
              mids$[mid_create_4366615ad7077dae] = env->getMethodID(cls, "create", "(Lorg/apache/lucene/analysis/TokenStream;)Lorg/apache/lucene/analysis/TokenFilter;");
              mids$[mid_inform_b4ee53c41a5f629f] = env->getMethodID(cls, "inform", "(Lorg/apache/lucene/analysis/util/ResourceLoader;)V");

              class$ = new ::java::lang::Class(cls);
              cls = (jclass) class$->this$;

              NAME = new ::java::lang::String(env->getStaticObjectField(cls, "NAME", "Ljava/lang/String;"));
              PROTECTED_TOKENS = new ::java::lang::String(env->getStaticObjectField(cls, "PROTECTED_TOKENS", "Ljava/lang/String;"));
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          SnowballPorterFilterFactory::SnowballPorterFilterFactory(const ::java::util::Map & a0) : ::org::apache::lucene::analysis::util::TokenFilterFactory(env->newObject(initializeClass, &mids$, mid_init$_408bd889ee3beae5, a0.this$)) {}

          ::org::apache::lucene::analysis::TokenFilter SnowballPorterFilterFactory::create(const ::org::apache::lucene::analysis::TokenStream & a0) const
          {
            return ::org::apache::lucene::analysis::TokenFilter(env->callObjectMethod(this$, mids$[mid_create_4366615ad7077dae], a0.this$));
          }

          void SnowballPorterFilterFactory::inform(const ::org::apache::lucene::analysis::util::ResourceLoader & a0) const
          {
            env->callVoidMethod(this$, mids$[mid_inform_b4ee53c41a5f629f], a0.this$);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace snowball {
          static PyObject *t_SnowballPorterFilterFactory_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_SnowballPorterFilterFactory_instance_(PyTypeObject *type, PyObject *arg);
          static int t_SnowballPorterFilterFactory_init_(t_SnowballPorterFilterFactory *self, PyObject *args, PyObject *kwds);
          static PyObject *t_SnowballPorterFilterFactory_create(t_SnowballPorterFilterFactory *self, PyObject *args);
          static PyObject *t_SnowballPorterFilterFactory_inform(t_SnowballPorterFilterFactory *self, PyObject *arg);

          static PyMethodDef t_SnowballPorterFilterFactory__methods_[] = {
            DECLARE_METHOD(t_SnowballPorterFilterFactory, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_SnowballPorterFilterFactory, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_SnowballPorterFilterFactory, create, METH_VARARGS),
            DECLARE_METHOD(t_SnowballPorterFilterFactory, inform, METH_O),
            { NULL, NULL, 0, NULL }
          };

          static PyType_Slot PY_TYPE_SLOTS(SnowballPorterFilterFactory)[] = {
            { Py_tp_methods, t_SnowballPorterFilterFactory__methods_ },
            { Py_tp_init, (void *) t_SnowballPorterFilterFactory_init_ },
            { 0, NULL }
          };

          static PyType_Def *PY_TYPE_BASES(SnowballPorterFilterFactory)[] = {
            &PY_TYPE_DEF(::org::apache::lucene::analysis::util::TokenFilterFactory),
            NULL
          };

          DEFINE_TYPE(SnowballPorterFilterFactory, t_SnowballPorterFilterFactory, SnowballPorterFilterFactory);

          void t_SnowballPorterFilterFactory::install(PyObject *module)
          {
            installType(&PY_TYPE(SnowballPorterFilterFactory), &PY_TYPE_DEF(SnowballPorterFilterFactory), module, "SnowballPorterFilterFactory", 0);
          }

          void t_SnowballPorterFilterFactory::initialize(PyObject *module)
          {
            PyObject_SetAttrString((PyObject *) PY_TYPE(SnowballPorterFilterFactory), "class_", make_descriptor(SnowballPorterFilterFactory::initializeClass, 1));
            PyObject_SetAttrString((PyObject *) PY_TYPE(SnowballPorterFilterFactory), "wrapfn_", make_descriptor(t_SnowballPorterFilterFactory::wrap_jobject));
            PyObject_SetAttrString((PyObject *) PY_TYPE(SnowballPorterFilterFactory), "boxfn_", make_descriptor(boxObject));
            env->getClass(SnowballPorterFilterFactory::initializeClass);
            PyObject_SetAttrString((PyObject *) PY_TYPE(SnowballPorterFilterFactory), "NAME", make_descriptor(j2p(*SnowballPorterFilterFactory::NAME)));
            PyObject_SetAttrString((PyObject *) PY_TYPE(SnowballPorterFilterFactory), "PROTECTED_TOKENS", make_descriptor(j2p(*SnowballPorterFilterFactory::PROTECTED_TOKENS)));
          }

          static PyObject *t_SnowballPorterFilterFactory_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, SnowballPorterFilterFactory::initializeClass, 1)))
              return NULL;
            return t_SnowballPorterFilterFactory::wrap_Object(SnowballPorterFilterFactory(((t_SnowballPorterFilterFactory *) arg)->object.this$));
          }
          static PyObject *t_SnowballPorterFilterFactory_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, SnowballPorterFilterFactory::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_SnowballPorterFilterFactory_init_(t_SnowballPorterFilterFactory *self, PyObject *args, PyObject *kwds)
          {
            ::java::util::Map a0((jobject) NULL);
            PyTypeObject **p0;
            SnowballPorterFilterFactory object((jobject) NULL);

            if (!parseArgs(args, "K", ::java::util::Map::initializeClass, &a0, &p0, ::java::util::t_Map::parameters_))
            {
              INT_CALL(object = SnowballPorterFilterFactory(a0));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_SnowballPorterFilterFactory_create(t_SnowballPorterFilterFactory *self, PyObject *args)
          {
            ::org::apache::lucene::analysis::TokenStream a0((jobject) NULL);
            ::org::apache::lucene::analysis::TokenFilter result((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::analysis::TokenStream::initializeClass, &a0))
            {
              OBJ_CALL(result = self->object.create(a0));
              return ::org::apache::lucene::analysis::t_TokenFilter::wrap_Object(result);
            }

            return callSuper(PY_TYPE(SnowballPorterFilterFactory), (PyObject *) self, "create", args, 2);
          }

          static PyObject *t_SnowballPorterFilterFactory_inform(t_SnowballPorterFilterFactory *self, PyObject *arg)
          {
            ::org::apache::lucene::analysis::util::ResourceLoader a0((jobject) NULL);

            if (!parseArg(arg, "k", ::org::apache::lucene::analysis::util::ResourceLoader::initializeClass, &a0))
            {
              OBJ_CALL(self->object.inform(a0));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError((PyObject *) self, "inform", arg);
            return NULL;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/codecs/uniformsplit/sharedterms/FieldMetadataTermState.h"
#include "org/apache/lucene/codecs/BlockTermState.h"
#include "org/apache/lucene/codecs/uniformsplit/FieldMetadata.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace codecs {
        namespace uniformsplit {
          namespace sharedterms {

            ::java::lang::Class *FieldMetadataTermState::class$ = NULL;
            jmethodID *FieldMetadataTermState::mids$ = NULL;
            jfieldID *FieldMetadataTermState::fids$ = NULL;
            bool FieldMetadataTermState::live$ = false;

            jclass FieldMetadataTermState::initializeClass(bool getOnly)
            {
              if (getOnly)
                return (jclass) (live$ ? class$->this$ : NULL);
              if (class$ == NULL)
              {
                jclass cls = (jclass) env->findClass("org/apache/lucene/codecs/uniformsplit/sharedterms/FieldMetadataTermState");

                mids$ = new jmethodID[max_mid];
                mids$[mid_init$_531f204e0924020e] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/codecs/uniformsplit/FieldMetadata;Lorg/apache/lucene/codecs/BlockTermState;)V");

                fids$ = new jfieldID[max_fid];
                fids$[fid_fieldMetadata] = env->getFieldID(cls, "fieldMetadata", "Lorg/apache/lucene/codecs/uniformsplit/FieldMetadata;");
                fids$[fid_state] = env->getFieldID(cls, "state", "Lorg/apache/lucene/codecs/BlockTermState;");

                class$ = new ::java::lang::Class(cls);
                live$ = true;
              }
              return (jclass) class$->this$;
            }

            FieldMetadataTermState::FieldMetadataTermState(const ::org::apache::lucene::codecs::uniformsplit::FieldMetadata & a0, const ::org::apache::lucene::codecs::BlockTermState & a1) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_531f204e0924020e, a0.this$, a1.this$)) {}

            ::org::apache::lucene::codecs::uniformsplit::FieldMetadata FieldMetadataTermState::_get_fieldMetadata() const
            {
              return ::org::apache::lucene::codecs::uniformsplit::FieldMetadata(env->getObjectField(this$, fids$[fid_fieldMetadata]));
            }

            ::org::apache::lucene::codecs::BlockTermState FieldMetadataTermState::_get_state() const
            {
              return ::org::apache::lucene::codecs::BlockTermState(env->getObjectField(this$, fids$[fid_state]));
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace codecs {
        namespace uniformsplit {
          namespace sharedterms {
            static PyObject *t_FieldMetadataTermState_cast_(PyTypeObject *type, PyObject *arg);
            static PyObject *t_FieldMetadataTermState_instance_(PyTypeObject *type, PyObject *arg);
            static int t_FieldMetadataTermState_init_(t_FieldMetadataTermState *self, PyObject *args, PyObject *kwds);
            static PyObject *t_FieldMetadataTermState_get__fieldMetadata(t_FieldMetadataTermState *self, void *data);
            static PyObject *t_FieldMetadataTermState_get__state(t_FieldMetadataTermState *self, void *data);

            static PyGetSetDef t_FieldMetadataTermState__fields_[] = {
              DECLARE_GET_FIELD(t_FieldMetadataTermState, fieldMetadata),
              DECLARE_GET_FIELD(t_FieldMetadataTermState, state),
              { NULL, NULL, NULL, NULL, NULL }
            };

            static PyMethodDef t_FieldMetadataTermState__methods_[] = {
              DECLARE_METHOD(t_FieldMetadataTermState, cast_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_FieldMetadataTermState, instance_, METH_O | METH_CLASS),
              { NULL, NULL, 0, NULL }
            };

            static PyType_Slot PY_TYPE_SLOTS(FieldMetadataTermState)[] = {
              { Py_tp_methods, t_FieldMetadataTermState__methods_ },
              { Py_tp_init, (void *) t_FieldMetadataTermState_init_ },
              { Py_tp_getset, t_FieldMetadataTermState__fields_ },
              { 0, NULL }
            };

            static PyType_Def *PY_TYPE_BASES(FieldMetadataTermState)[] = {
              &PY_TYPE_DEF(::java::lang::Object),
              NULL
            };

            DEFINE_TYPE(FieldMetadataTermState, t_FieldMetadataTermState, FieldMetadataTermState);

            void t_FieldMetadataTermState::install(PyObject *module)
            {
              installType(&PY_TYPE(FieldMetadataTermState), &PY_TYPE_DEF(FieldMetadataTermState), module, "FieldMetadataTermState", 0);
            }

            void t_FieldMetadataTermState::initialize(PyObject *module)
            {
              PyObject_SetAttrString((PyObject *) PY_TYPE(FieldMetadataTermState), "class_", make_descriptor(FieldMetadataTermState::initializeClass, 1));
              PyObject_SetAttrString((PyObject *) PY_TYPE(FieldMetadataTermState), "wrapfn_", make_descriptor(t_FieldMetadataTermState::wrap_jobject));
              PyObject_SetAttrString((PyObject *) PY_TYPE(FieldMetadataTermState), "boxfn_", make_descriptor(boxObject));
            }

            static PyObject *t_FieldMetadataTermState_cast_(PyTypeObject *type, PyObject *arg)
            {
              if (!(arg = castCheck(arg, FieldMetadataTermState::initializeClass, 1)))
                return NULL;
              return t_FieldMetadataTermState::wrap_Object(FieldMetadataTermState(((t_FieldMetadataTermState *) arg)->object.this$));
            }
            static PyObject *t_FieldMetadataTermState_instance_(PyTypeObject *type, PyObject *arg)
            {
              if (!castCheck(arg, FieldMetadataTermState::initializeClass, 0))
                Py_RETURN_FALSE;
              Py_RETURN_TRUE;
            }

            static int t_FieldMetadataTermState_init_(t_FieldMetadataTermState *self, PyObject *args, PyObject *kwds)
            {
              ::org::apache::lucene::codecs::uniformsplit::FieldMetadata a0((jobject) NULL);
              ::org::apache::lucene::codecs::BlockTermState a1((jobject) NULL);
              FieldMetadataTermState object((jobject) NULL);

              if (!parseArgs(args, "kk", ::org::apache::lucene::codecs::uniformsplit::FieldMetadata::initializeClass, ::org::apache::lucene::codecs::BlockTermState::initializeClass, &a0, &a1))
              {
                INT_CALL(object = FieldMetadataTermState(a0, a1));
                self->object = object;
              }
              else
              {
                PyErr_SetArgsError((PyObject *) self, "__init__", args);
                return -1;
              }

              return 0;
            }

            static PyObject *t_FieldMetadataTermState_get__fieldMetadata(t_FieldMetadataTermState *self, void *data)
            {
              ::org::apache::lucene::codecs::uniformsplit::FieldMetadata value((jobject) NULL);
              OBJ_CALL(value = self->object._get_fieldMetadata());
              return ::org::apache::lucene::codecs::uniformsplit::t_FieldMetadata::wrap_Object(value);
            }

            static PyObject *t_FieldMetadataTermState_get__state(t_FieldMetadataTermState *self, void *data)
            {
              ::org::apache::lucene::codecs::BlockTermState value((jobject) NULL);
              OBJ_CALL(value = self->object._get_state());
              return ::org::apache::lucene::codecs::t_BlockTermState::wrap_Object(value);
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/en/PorterStemFilter.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/analysis/TokenStream.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace en {

          ::java::lang::Class *PorterStemFilter::class$ = NULL;
          jmethodID *PorterStemFilter::mids$ = NULL;
          bool PorterStemFilter::live$ = false;

          jclass PorterStemFilter::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/en/PorterStemFilter");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_c26756868a754f4e] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/analysis/TokenStream;)V");
              mids$[mid_incrementToken_8454bd5aa23fd11e] = env->getMethodID(cls, "incrementToken", "()Z");

              class$ = new ::java::lang::Class(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          PorterStemFilter::PorterStemFilter(const ::org::apache::lucene::analysis::TokenStream & a0) : ::org::apache::lucene::analysis::TokenFilter(env->newObject(initializeClass, &mids$, mid_init$_c26756868a754f4e, a0.this$)) {}

          jboolean PorterStemFilter::incrementToken() const
          {
            return env->callBooleanMethod(this$, mids$[mid_incrementToken_8454bd5aa23fd11e]);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace en {
          static PyObject *t_PorterStemFilter_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_PorterStemFilter_instance_(PyTypeObject *type, PyObject *arg);
          static int t_PorterStemFilter_init_(t_PorterStemFilter *self, PyObject *args, PyObject *kwds);
          static PyObject *t_PorterStemFilter_incrementToken(t_PorterStemFilter *self, PyObject *args);

          static PyMethodDef t_PorterStemFilter__methods_[] = {
            DECLARE_METHOD(t_PorterStemFilter, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_PorterStemFilter, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_PorterStemFilter, incrementToken, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          static PyType_Slot PY_TYPE_SLOTS(PorterStemFilter)[] = {
            { Py_tp_methods, t_PorterStemFilter__methods_ },
            { Py_tp_init, (void *) t_PorterStemFilter_init_ },
            { 0, NULL }
          };

          static PyType_Def *PY_TYPE_BASES(PorterStemFilter)[] = {
            &PY_TYPE_DEF(::org::apache::lucene::analysis::TokenFilter),
            NULL
          };

          DEFINE_TYPE(PorterStemFilter, t_PorterStemFilter, PorterStemFilter);

          void t_PorterStemFilter::install(PyObject *module)
          {
            installType(&PY_TYPE(PorterStemFilter), &PY_TYPE_DEF(PorterStemFilter), module, "PorterStemFilter", 0);
          }

          void t_PorterStemFilter::initialize(PyObject *module)
          {
            PyObject_SetAttrString((PyObject *) PY_TYPE(PorterStemFilter), "class_", make_descriptor(PorterStemFilter::initializeClass, 1));
            PyObject_SetAttrString((PyObject *) PY_TYPE(PorterStemFilter), "wrapfn_", make_descriptor(t_PorterStemFilter::wrap_jobject));
            PyObject_SetAttrString((PyObject *) PY_TYPE(PorterStemFilter), "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_PorterStemFilter_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, PorterStemFilter::initializeClass, 1)))
              return NULL;
            return t_PorterStemFilter::wrap_Object(PorterStemFilter(((t_PorterStemFilter *) arg)->object.this$));
          }
          static PyObject *t_PorterStemFilter_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, PorterStemFilter::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_PorterStemFilter_init_(t_PorterStemFilter *self, PyObject *args, PyObject *kwds)
          {
            ::org::apache::lucene::analysis::TokenStream a0((jobject) NULL);
            PorterStemFilter object((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::analysis::TokenStream::initializeClass, &a0))
            {
              INT_CALL(object = PorterStemFilter(a0));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_PorterStemFilter_incrementToken(t_PorterStemFilter *self, PyObject *args)
          {
            jboolean result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.incrementToken());
              Py_RETURN_BOOL(result);
            }

            return callSuper(PY_TYPE(PorterStemFilter), (PyObject *) self, "incrementToken", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/util/NamedSPILoader$NamedSPI.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {

        ::java::lang::Class *NamedSPILoader$NamedSPI::class$ = NULL;
        jmethodID *NamedSPILoader$NamedSPI::mids$ = NULL;
        bool NamedSPILoader$NamedSPI::live$ = false;

        jclass NamedSPILoader$NamedSPI::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/util/NamedSPILoader$NamedSPI");

            mids$ = new jmethodID[max_mid];
            mids$[mid_getName_db9b55ba01e03e4b] = env->getMethodID(cls, "getName", "()Ljava/lang/String;");

            class$ = new ::java::lang::Class(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        ::java::lang::String NamedSPILoader$NamedSPI::getName() const
        {
          return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_getName_db9b55ba01e03e4b]));
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        static PyObject *t_NamedSPILoader$NamedSPI_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_NamedSPILoader$NamedSPI_instance_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_NamedSPILoader$NamedSPI_of_(t_NamedSPILoader$NamedSPI *self, PyObject *args);
        static PyObject *t_NamedSPILoader$NamedSPI_getName(t_NamedSPILoader$NamedSPI *self);
        static PyObject *t_NamedSPILoader$NamedSPI_get__name(t_NamedSPILoader$NamedSPI *self, void *data);
        static PyObject *t_NamedSPILoader$NamedSPI_get__parameters_(t_NamedSPILoader$NamedSPI *self, void *data);
        static PyGetSetDef t_NamedSPILoader$NamedSPI__fields_[] = {
          DECLARE_GET_FIELD(t_NamedSPILoader$NamedSPI, name),
          DECLARE_GET_FIELD(t_NamedSPILoader$NamedSPI, parameters_),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_NamedSPILoader$NamedSPI__methods_[] = {
          DECLARE_METHOD(t_NamedSPILoader$NamedSPI, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_NamedSPILoader$NamedSPI, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_NamedSPILoader$NamedSPI, of_, METH_VARARGS),
          DECLARE_METHOD(t_NamedSPILoader$NamedSPI, getName, METH_NOARGS),
          { NULL, NULL, 0, NULL }
        };

        static PyType_Slot PY_TYPE_SLOTS(NamedSPILoader$NamedSPI)[] = {
          { Py_tp_methods, t_NamedSPILoader$NamedSPI__methods_ },
          { Py_tp_init, (void *) abstract_init },
          { Py_tp_getset, t_NamedSPILoader$NamedSPI__fields_ },
          { 0, NULL }
        };

        static PyType_Def *PY_TYPE_BASES(NamedSPILoader$NamedSPI)[] = {
          &PY_TYPE_DEF(::java::lang::Object),
          NULL
        };

        DEFINE_TYPE(NamedSPILoader$NamedSPI, t_NamedSPILoader$NamedSPI, NamedSPILoader$NamedSPI);
        PyObject *t_NamedSPILoader$NamedSPI::wrap_Object(const NamedSPILoader$NamedSPI& object, PyTypeObject *p0)
        {
          PyObject *obj = t_NamedSPILoader$NamedSPI::wrap_Object(object);
          if (obj != NULL && obj != Py_None)
          {
            t_NamedSPILoader$NamedSPI *self = (t_NamedSPILoader$NamedSPI *) obj;
            self->parameters[0] = p0;
          }
          return obj;
        }

        PyObject *t_NamedSPILoader$NamedSPI::wrap_jobject(const jobject& object, PyTypeObject *p0)
        {
          PyObject *obj = t_NamedSPILoader$NamedSPI::wrap_jobject(object);
          if (obj != NULL && obj != Py_None)
          {
            t_NamedSPILoader$NamedSPI *self = (t_NamedSPILoader$NamedSPI *) obj;
            self->parameters[0] = p0;
          }
          return obj;
        }

        void t_NamedSPILoader$NamedSPI::install(PyObject *module)
        {
          installType(&PY_TYPE(NamedSPILoader$NamedSPI), &PY_TYPE_DEF(NamedSPILoader$NamedSPI), module, "NamedSPILoader$NamedSPI", 0);
        }

        void t_NamedSPILoader$NamedSPI::initialize(PyObject *module)
        {
          PyObject_SetAttrString((PyObject *) PY_TYPE(NamedSPILoader$NamedSPI), "class_", make_descriptor(NamedSPILoader$NamedSPI::initializeClass, 1));
          PyObject_SetAttrString((PyObject *) PY_TYPE(NamedSPILoader$NamedSPI), "wrapfn_", make_descriptor(t_NamedSPILoader$NamedSPI::wrap_jobject));
          PyObject_SetAttrString((PyObject *) PY_TYPE(NamedSPILoader$NamedSPI), "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_NamedSPILoader$NamedSPI_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, NamedSPILoader$NamedSPI::initializeClass, 1)))
            return NULL;
          return t_NamedSPILoader$NamedSPI::wrap_Object(NamedSPILoader$NamedSPI(((t_NamedSPILoader$NamedSPI *) arg)->object.this$));
        }
        static PyObject *t_NamedSPILoader$NamedSPI_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, NamedSPILoader$NamedSPI::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static PyObject *t_NamedSPILoader$NamedSPI_of_(t_NamedSPILoader$NamedSPI *self, PyObject *args)
        {
          if (!parseArg(args, "T", 1, &(self->parameters)))
            Py_RETURN_SELF;
          return PyErr_SetArgsError((PyObject *) self, "of_", args);
        }

        static PyObject *t_NamedSPILoader$NamedSPI_getName(t_NamedSPILoader$NamedSPI *self)
        {
          ::java::lang::String result((jobject) NULL);
          OBJ_CALL(result = self->object.getName());
          return j2p(result);
        }
        static PyObject *t_NamedSPILoader$NamedSPI_get__parameters_(t_NamedSPILoader$NamedSPI *self, void *data)
        {
          return typeParameters(self->parameters, sizeof(self->parameters));
        }

        static PyObject *t_NamedSPILoader$NamedSPI_get__name(t_NamedSPILoader$NamedSPI *self, void *data)
        {
          ::java::lang::String value((jobject) NULL);
          OBJ_CALL(value = self->object.getName());
          return j2p(value);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queryparser/flexible/core/nodes/TextableQueryNode.h"
#include "java/lang/CharSequence.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace core {
            namespace nodes {

              ::java::lang::Class *TextableQueryNode::class$ = NULL;
              jmethodID *TextableQueryNode::mids$ = NULL;
              bool TextableQueryNode::live$ = false;

              jclass TextableQueryNode::initializeClass(bool getOnly)
              {
                if (getOnly)
                  return (jclass) (live$ ? class$->this$ : NULL);
                if (class$ == NULL)
                {
                  jclass cls = (jclass) env->findClass("org/apache/lucene/queryparser/flexible/core/nodes/TextableQueryNode");

                  mids$ = new jmethodID[max_mid];
                  mids$[mid_getText_ba44900ab7d793b9] = env->getMethodID(cls, "getText", "()Ljava/lang/CharSequence;");
                  mids$[mid_setText_4b7f5e38f806ae55] = env->getMethodID(cls, "setText", "(Ljava/lang/CharSequence;)V");

                  class$ = new ::java::lang::Class(cls);
                  live$ = true;
                }
                return (jclass) class$->this$;
              }

              ::java::lang::CharSequence TextableQueryNode::getText() const
              {
                return ::java::lang::CharSequence(env->callObjectMethod(this$, mids$[mid_getText_ba44900ab7d793b9]));
              }

              void TextableQueryNode::setText(const ::java::lang::CharSequence & a0) const
              {
                env->callVoidMethod(this$, mids$[mid_setText_4b7f5e38f806ae55], a0.this$);
              }
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace core {
            namespace nodes {
              static PyObject *t_TextableQueryNode_cast_(PyTypeObject *type, PyObject *arg);
              static PyObject *t_TextableQueryNode_instance_(PyTypeObject *type, PyObject *arg);
              static PyObject *t_TextableQueryNode_getText(t_TextableQueryNode *self);
              static PyObject *t_TextableQueryNode_setText(t_TextableQueryNode *self, PyObject *arg);
              static PyObject *t_TextableQueryNode_get__text(t_TextableQueryNode *self, void *data);
              static int t_TextableQueryNode_set__text(t_TextableQueryNode *self, PyObject *arg, void *data);
              static PyGetSetDef t_TextableQueryNode__fields_[] = {
                DECLARE_GETSET_FIELD(t_TextableQueryNode, text),
                { NULL, NULL, NULL, NULL, NULL }
              };

              static PyMethodDef t_TextableQueryNode__methods_[] = {
                DECLARE_METHOD(t_TextableQueryNode, cast_, METH_O | METH_CLASS),
                DECLARE_METHOD(t_TextableQueryNode, instance_, METH_O | METH_CLASS),
                DECLARE_METHOD(t_TextableQueryNode, getText, METH_NOARGS),
                DECLARE_METHOD(t_TextableQueryNode, setText, METH_O),
                { NULL, NULL, 0, NULL }
              };

              static PyType_Slot PY_TYPE_SLOTS(TextableQueryNode)[] = {
                { Py_tp_methods, t_TextableQueryNode__methods_ },
                { Py_tp_init, (void *) abstract_init },
                { Py_tp_getset, t_TextableQueryNode__fields_ },
                { 0, NULL }
              };

              static PyType_Def *PY_TYPE_BASES(TextableQueryNode)[] = {
                &PY_TYPE_DEF(::java::lang::Object),
                NULL
              };

              DEFINE_TYPE(TextableQueryNode, t_TextableQueryNode, TextableQueryNode);

              void t_TextableQueryNode::install(PyObject *module)
              {
                installType(&PY_TYPE(TextableQueryNode), &PY_TYPE_DEF(TextableQueryNode), module, "TextableQueryNode", 0);
              }

              void t_TextableQueryNode::initialize(PyObject *module)
              {
                PyObject_SetAttrString((PyObject *) PY_TYPE(TextableQueryNode), "class_", make_descriptor(TextableQueryNode::initializeClass, 1));
                PyObject_SetAttrString((PyObject *) PY_TYPE(TextableQueryNode), "wrapfn_", make_descriptor(t_TextableQueryNode::wrap_jobject));
                PyObject_SetAttrString((PyObject *) PY_TYPE(TextableQueryNode), "boxfn_", make_descriptor(boxObject));
              }

              static PyObject *t_TextableQueryNode_cast_(PyTypeObject *type, PyObject *arg)
              {
                if (!(arg = castCheck(arg, TextableQueryNode::initializeClass, 1)))
                  return NULL;
                return t_TextableQueryNode::wrap_Object(TextableQueryNode(((t_TextableQueryNode *) arg)->object.this$));
              }
              static PyObject *t_TextableQueryNode_instance_(PyTypeObject *type, PyObject *arg)
              {
                if (!castCheck(arg, TextableQueryNode::initializeClass, 0))
                  Py_RETURN_FALSE;
                Py_RETURN_TRUE;
              }

              static PyObject *t_TextableQueryNode_getText(t_TextableQueryNode *self)
              {
                ::java::lang::CharSequence result((jobject) NULL);
                OBJ_CALL(result = self->object.getText());
                return ::java::lang::t_CharSequence::wrap_Object(result);
              }

              static PyObject *t_TextableQueryNode_setText(t_TextableQueryNode *self, PyObject *arg)
              {
                ::java::lang::CharSequence a0((jobject) NULL);

                if (!parseArg(arg, "O", ::java::lang::PY_TYPE(CharSequence), &a0))
                {
                  OBJ_CALL(self->object.setText(a0));
                  Py_RETURN_NONE;
                }

                PyErr_SetArgsError((PyObject *) self, "setText", arg);
                return NULL;
              }

              static PyObject *t_TextableQueryNode_get__text(t_TextableQueryNode *self, void *data)
              {
                ::java::lang::CharSequence value((jobject) NULL);
                OBJ_CALL(value = self->object.getText());
                return ::java::lang::t_CharSequence::wrap_Object(value);
              }
              static int t_TextableQueryNode_set__text(t_TextableQueryNode *self, PyObject *arg, void *data)
              {
                {
                  ::java::lang::CharSequence value((jobject) NULL);
                  if (!parseArg(arg, "O", ::java::lang::PY_TYPE(CharSequence), &value))
                  {
                    INT_CALL(self->object.setText(value));
                    return 0;
                  }
                }
                PyErr_SetArgsError((PyObject *) self, "text", arg);
                return -1;
              }
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/util/bkd/BKDRadixSelector.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/store/Directory.h"
#include "org/apache/lucene/util/bkd/BKDConfig.h"
#include "org/apache/lucene/util/bkd/HeapPointWriter.h"
#include "java/lang/String.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/util/bkd/BKDRadixSelector$PathSlice.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        namespace bkd {

          ::java::lang::Class *BKDRadixSelector::class$ = NULL;
          jmethodID *BKDRadixSelector::mids$ = NULL;
          bool BKDRadixSelector::live$ = false;

          jclass BKDRadixSelector::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/util/bkd/BKDRadixSelector");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_439c4dbe2b0da88d] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/util/bkd/BKDConfig;ILorg/apache/lucene/store/Directory;Ljava/lang/String;)V");
              mids$[mid_heapRadixSort_c44072e7efb0b802] = env->getMethodID(cls, "heapRadixSort", "(Lorg/apache/lucene/util/bkd/HeapPointWriter;IIII)V");
              mids$[mid_select_b17b46e672a3854d] = env->getMethodID(cls, "select", "(Lorg/apache/lucene/util/bkd/BKDRadixSelector$PathSlice;[Lorg/apache/lucene/util/bkd/BKDRadixSelector$PathSlice;JJJII)[B");

              class$ = new ::java::lang::Class(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          BKDRadixSelector::BKDRadixSelector(const ::org::apache::lucene::util::bkd::BKDConfig & a0, jint a1, const ::org::apache::lucene::store::Directory & a2, const ::java::lang::String & a3) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_439c4dbe2b0da88d, a0.this$, a1, a2.this$, a3.this$)) {}

          void BKDRadixSelector::heapRadixSort(const ::org::apache::lucene::util::bkd::HeapPointWriter & a0, jint a1, jint a2, jint a3, jint a4) const
          {
            env->callVoidMethod(this$, mids$[mid_heapRadixSort_c44072e7efb0b802], a0.this$, a1, a2, a3, a4);
          }

          JArray< jbyte > BKDRadixSelector::select(const ::org::apache::lucene::util::bkd::BKDRadixSelector$PathSlice & a0, const JArray< ::org::apache::lucene::util::bkd::BKDRadixSelector$PathSlice > & a1, jlong a2, jlong a3, jlong a4, jint a5, jint a6) const
          {
            return JArray< jbyte >(env->callObjectMethod(this$, mids$[mid_select_b17b46e672a3854d], a0.this$, a1.this$, a2, a3, a4, a5, a6));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        namespace bkd {
          static PyObject *t_BKDRadixSelector_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_BKDRadixSelector_instance_(PyTypeObject *type, PyObject *arg);
          static int t_BKDRadixSelector_init_(t_BKDRadixSelector *self, PyObject *args, PyObject *kwds);
          static PyObject *t_BKDRadixSelector_heapRadixSort(t_BKDRadixSelector *self, PyObject *args);
          static PyObject *t_BKDRadixSelector_select(t_BKDRadixSelector *self, PyObject *args);

          static PyMethodDef t_BKDRadixSelector__methods_[] = {
            DECLARE_METHOD(t_BKDRadixSelector, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_BKDRadixSelector, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_BKDRadixSelector, heapRadixSort, METH_VARARGS),
            DECLARE_METHOD(t_BKDRadixSelector, select, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          static PyType_Slot PY_TYPE_SLOTS(BKDRadixSelector)[] = {
            { Py_tp_methods, t_BKDRadixSelector__methods_ },
            { Py_tp_init, (void *) t_BKDRadixSelector_init_ },
            { 0, NULL }
          };

          static PyType_Def *PY_TYPE_BASES(BKDRadixSelector)[] = {
            &PY_TYPE_DEF(::java::lang::Object),
            NULL
          };

          DEFINE_TYPE(BKDRadixSelector, t_BKDRadixSelector, BKDRadixSelector);

          void t_BKDRadixSelector::install(PyObject *module)
          {
            installType(&PY_TYPE(BKDRadixSelector), &PY_TYPE_DEF(BKDRadixSelector), module, "BKDRadixSelector", 0);
            PyObject_SetAttrString((PyObject *) PY_TYPE(BKDRadixSelector), "PathSlice", make_descriptor(&PY_TYPE_DEF(BKDRadixSelector$PathSlice)));
          }

          void t_BKDRadixSelector::initialize(PyObject *module)
          {
            PyObject_SetAttrString((PyObject *) PY_TYPE(BKDRadixSelector), "class_", make_descriptor(BKDRadixSelector::initializeClass, 1));
            PyObject_SetAttrString((PyObject *) PY_TYPE(BKDRadixSelector), "wrapfn_", make_descriptor(t_BKDRadixSelector::wrap_jobject));
            PyObject_SetAttrString((PyObject *) PY_TYPE(BKDRadixSelector), "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_BKDRadixSelector_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, BKDRadixSelector::initializeClass, 1)))
              return NULL;
            return t_BKDRadixSelector::wrap_Object(BKDRadixSelector(((t_BKDRadixSelector *) arg)->object.this$));
          }
          static PyObject *t_BKDRadixSelector_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, BKDRadixSelector::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_BKDRadixSelector_init_(t_BKDRadixSelector *self, PyObject *args, PyObject *kwds)
          {
            ::org::apache::lucene::util::bkd::BKDConfig a0((jobject) NULL);
            jint a1;
            ::org::apache::lucene::store::Directory a2((jobject) NULL);
            ::java::lang::String a3((jobject) NULL);
            BKDRadixSelector object((jobject) NULL);

            if (!parseArgs(args, "kIks", ::org::apache::lucene::util::bkd::BKDConfig::initializeClass, ::org::apache::lucene::store::Directory::initializeClass, &a0, &a1, &a2, &a3))
            {
              INT_CALL(object = BKDRadixSelector(a0, a1, a2, a3));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_BKDRadixSelector_heapRadixSort(t_BKDRadixSelector *self, PyObject *args)
          {
            ::org::apache::lucene::util::bkd::HeapPointWriter a0((jobject) NULL);
            jint a1;
            jint a2;
            jint a3;
            jint a4;

            if (!parseArgs(args, "kIIII", ::org::apache::lucene::util::bkd::HeapPointWriter::initializeClass, &a0, &a1, &a2, &a3, &a4))
            {
              OBJ_CALL(self->object.heapRadixSort(a0, a1, a2, a3, a4));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError((PyObject *) self, "heapRadixSort", args);
            return NULL;
          }

          static PyObject *t_BKDRadixSelector_select(t_BKDRadixSelector *self, PyObject *args)
          {
            ::org::apache::lucene::util::bkd::BKDRadixSelector$PathSlice a0((jobject) NULL);
            JArray< ::org::apache::lucene::util::bkd::BKDRadixSelector$PathSlice > a1((jobject) NULL);
            jlong a2;
            jlong a3;
            jlong a4;
            jint a5;
            jint a6;
            JArray< jbyte > result((jobject) NULL);

            if (!parseArgs(args, "k[kJJJII", ::org::apache::lucene::util::bkd::BKDRadixSelector$PathSlice::initializeClass, ::org::apache::lucene::util::bkd::BKDRadixSelector$PathSlice::initializeClass, &a0, &a1, &a2, &a3, &a4, &a5, &a6))
            {
              OBJ_CALL(result = self->object.select(a0, a1, a2, a3, a4, a5, a6));
              return result.wrap();
            }

            PyErr_SetArgsError((PyObject *) self, "select", args);
            return NULL;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/miscellaneous/HyphenatedWordsFilterFactory.h"
#include "java/util/Map.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/analysis/TokenStream.h"
#include "java/lang/String.h"
#include "org/apache/lucene/analysis/miscellaneous/HyphenatedWordsFilter.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace miscellaneous {

          ::java::lang::Class *HyphenatedWordsFilterFactory::class$ = NULL;
          jmethodID *HyphenatedWordsFilterFactory::mids$ = NULL;
          bool HyphenatedWordsFilterFactory::live$ = false;
          ::java::lang::String *HyphenatedWordsFilterFactory::NAME = NULL;

          jclass HyphenatedWordsFilterFactory::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/miscellaneous/HyphenatedWordsFilterFactory");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_408bd889ee3beae5] = env->getMethodID(cls, "<init>", "(Ljava/util/Map;)V");
              mids$[mid_create_d17c09ce58ffba11] = env->getMethodID(cls, "create", "(Lorg/apache/lucene/analysis/TokenStream;)Lorg/apache/lucene/analysis/miscellaneous/HyphenatedWordsFilter;");

              class$ = new ::java::lang::Class(cls);
              cls = (jclass) class$->this$;

              NAME = new ::java::lang::String(env->getStaticObjectField(cls, "NAME", "Ljava/lang/String;"));
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          HyphenatedWordsFilterFactory::HyphenatedWordsFilterFactory(const ::java::util::Map & a0) : ::org::apache::lucene::analysis::util::TokenFilterFactory(env->newObject(initializeClass, &mids$, mid_init$_408bd889ee3beae5, a0.this$)) {}

          ::org::apache::lucene::analysis::miscellaneous::HyphenatedWordsFilter HyphenatedWordsFilterFactory::create(const ::org::apache::lucene::analysis::TokenStream & a0) const
          {
            return ::org::apache::lucene::analysis::miscellaneous::HyphenatedWordsFilter(env->callObjectMethod(this$, mids$[mid_create_d17c09ce58ffba11], a0.this$));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace miscellaneous {
          static PyObject *t_HyphenatedWordsFilterFactory_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_HyphenatedWordsFilterFactory_instance_(PyTypeObject *type, PyObject *arg);
          static int t_HyphenatedWordsFilterFactory_init_(t_HyphenatedWordsFilterFactory *self, PyObject *args, PyObject *kwds);
          static PyObject *t_HyphenatedWordsFilterFactory_create(t_HyphenatedWordsFilterFactory *self, PyObject *args);

          static PyMethodDef t_HyphenatedWordsFilterFactory__methods_[] = {
            DECLARE_METHOD(t_HyphenatedWordsFilterFactory, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_HyphenatedWordsFilterFactory, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_HyphenatedWordsFilterFactory, create, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          static PyType_Slot PY_TYPE_SLOTS(HyphenatedWordsFilterFactory)[] = {
            { Py_tp_methods, t_HyphenatedWordsFilterFactory__methods_ },
            { Py_tp_init, (void *) t_HyphenatedWordsFilterFactory_init_ },
            { 0, NULL }
          };

          static PyType_Def *PY_TYPE_BASES(HyphenatedWordsFilterFactory)[] = {
            &PY_TYPE_DEF(::org::apache::lucene::analysis::util::TokenFilterFactory),
            NULL
          };

          DEFINE_TYPE(HyphenatedWordsFilterFactory, t_HyphenatedWordsFilterFactory, HyphenatedWordsFilterFactory);

          void t_HyphenatedWordsFilterFactory::install(PyObject *module)
          {
            installType(&PY_TYPE(HyphenatedWordsFilterFactory), &PY_TYPE_DEF(HyphenatedWordsFilterFactory), module, "HyphenatedWordsFilterFactory", 0);
          }

          void t_HyphenatedWordsFilterFactory::initialize(PyObject *module)
          {
            PyObject_SetAttrString((PyObject *) PY_TYPE(HyphenatedWordsFilterFactory), "class_", make_descriptor(HyphenatedWordsFilterFactory::initializeClass, 1));
            PyObject_SetAttrString((PyObject *) PY_TYPE(HyphenatedWordsFilterFactory), "wrapfn_", make_descriptor(t_HyphenatedWordsFilterFactory::wrap_jobject));
            PyObject_SetAttrString((PyObject *) PY_TYPE(HyphenatedWordsFilterFactory), "boxfn_", make_descriptor(boxObject));
            env->getClass(HyphenatedWordsFilterFactory::initializeClass);
            PyObject_SetAttrString((PyObject *) PY_TYPE(HyphenatedWordsFilterFactory), "NAME", make_descriptor(j2p(*HyphenatedWordsFilterFactory::NAME)));
          }

          static PyObject *t_HyphenatedWordsFilterFactory_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, HyphenatedWordsFilterFactory::initializeClass, 1)))
              return NULL;
            return t_HyphenatedWordsFilterFactory::wrap_Object(HyphenatedWordsFilterFactory(((t_HyphenatedWordsFilterFactory *) arg)->object.this$));
          }
          static PyObject *t_HyphenatedWordsFilterFactory_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, HyphenatedWordsFilterFactory::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_HyphenatedWordsFilterFactory_init_(t_HyphenatedWordsFilterFactory *self, PyObject *args, PyObject *kwds)
          {
            ::java::util::Map a0((jobject) NULL);
            PyTypeObject **p0;
            HyphenatedWordsFilterFactory object((jobject) NULL);

            if (!parseArgs(args, "K", ::java::util::Map::initializeClass, &a0, &p0, ::java::util::t_Map::parameters_))
            {
              INT_CALL(object = HyphenatedWordsFilterFactory(a0));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_HyphenatedWordsFilterFactory_create(t_HyphenatedWordsFilterFactory *self, PyObject *args)
          {
            ::org::apache::lucene::analysis::TokenStream a0((jobject) NULL);
            ::org::apache::lucene::analysis::miscellaneous::HyphenatedWordsFilter result((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::analysis::TokenStream::initializeClass, &a0))
            {
              OBJ_CALL(result = self->object.create(a0));
              return ::org::apache::lucene::analysis::miscellaneous::t_HyphenatedWordsFilter::wrap_Object(result);
            }

            return callSuper(PY_TYPE(HyphenatedWordsFilterFactory), (PyObject *) self, "create", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/spans/SpanQuery.h"
#include "java/util/Map.h"
#include "java/util/Collection.h"
#include "org/apache/lucene/search/IndexSearcher.h"
#include "org/apache/lucene/index/Term.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/index/TermStates.h"
#include "org/apache/lucene/search/spans/SpanWeight.h"
#include "java/lang/String.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/search/ScoreMode.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace spans {

          ::java::lang::Class *SpanQuery::class$ = NULL;
          jmethodID *SpanQuery::mids$ = NULL;
          bool SpanQuery::live$ = false;

          jclass SpanQuery::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/search/spans/SpanQuery");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_f2cc1bce94666404] = env->getMethodID(cls, "<init>", "()V");
              mids$[mid_createWeight_5baab4cc5ccc46b6] = env->getMethodID(cls, "createWeight", "(Lorg/apache/lucene/search/IndexSearcher;Lorg/apache/lucene/search/ScoreMode;F)Lorg/apache/lucene/search/spans/SpanWeight;");
              mids$[mid_getField_db9b55ba01e03e4b] = env->getMethodID(cls, "getField", "()Ljava/lang/String;");
              mids$[mid_getTermStates_55ed71d210968db1] = env->getStaticMethodID(cls, "getTermStates", "([Lorg/apache/lucene/search/spans/SpanWeight;)Ljava/util/Map;");
              mids$[mid_getTermStates_995d3364c77f1806] = env->getStaticMethodID(cls, "getTermStates", "(Ljava/util/Collection;)Ljava/util/Map;");

              class$ = new ::java::lang::Class(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          SpanQuery::SpanQuery() : ::org::apache::lucene::search::Query(env->newObject(initializeClass, &mids$, mid_init$_f2cc1bce94666404)) {}

          ::org::apache::lucene::search::spans::SpanWeight SpanQuery::createWeight(const ::org::apache::lucene::search::IndexSearcher & a0, const ::org::apache::lucene::search::ScoreMode & a1, jfloat a2) const
          {
            return ::org::apache::lucene::search::spans::SpanWeight(env->callObjectMethod(this$, mids$[mid_createWeight_5baab4cc5ccc46b6], a0.this$, a1.this$, a2));
          }

          ::java::lang::String SpanQuery::getField() const
          {
            return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_getField_db9b55ba01e03e4b]));
          }

          ::java::util::Map SpanQuery::getTermStates(const JArray< ::org::apache::lucene::search::spans::SpanWeight > & a0)
          {
            jclass cls = env->getClass(initializeClass);
            return ::java::util::Map(env->callStaticObjectMethod(cls, mids$[mid_getTermStates_55ed71d210968db1], a0.this$));
          }

          ::java::util::Map SpanQuery::getTermStates(const ::java::util::Collection & a0)
          {
            jclass cls = env->getClass(initializeClass);
            return ::java::util::Map(env->callStaticObjectMethod(cls, mids$[mid_getTermStates_995d3364c77f1806], a0.this$));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace spans {
          static PyObject *t_SpanQuery_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_SpanQuery_instance_(PyTypeObject *type, PyObject *arg);
          static int t_SpanQuery_init_(t_SpanQuery *self, PyObject *args, PyObject *kwds);
          static PyObject *t_SpanQuery_createWeight(t_SpanQuery *self, PyObject *args);
          static PyObject *t_SpanQuery_getField(t_SpanQuery *self);
          static PyObject *t_SpanQuery_getTermStates(PyTypeObject *type, PyObject *args);
          static PyObject *t_SpanQuery_get__field(t_SpanQuery *self, void *data);
          static PyGetSetDef t_SpanQuery__fields_[] = {
            DECLARE_GET_FIELD(t_SpanQuery, field),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_SpanQuery__methods_[] = {
            DECLARE_METHOD(t_SpanQuery, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_SpanQuery, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_SpanQuery, createWeight, METH_VARARGS),
            DECLARE_METHOD(t_SpanQuery, getField, METH_NOARGS),
            DECLARE_METHOD(t_SpanQuery, getTermStates, METH_VARARGS | METH_CLASS),
            { NULL, NULL, 0, NULL }
          };

          static PyType_Slot PY_TYPE_SLOTS(SpanQuery)[] = {
            { Py_tp_methods, t_SpanQuery__methods_ },
            { Py_tp_init, (void *) t_SpanQuery_init_ },
            { Py_tp_getset, t_SpanQuery__fields_ },
            { 0, NULL }
          };

          static PyType_Def *PY_TYPE_BASES(SpanQuery)[] = {
            &PY_TYPE_DEF(::org::apache::lucene::search::Query),
            NULL
          };

          DEFINE_TYPE(SpanQuery, t_SpanQuery, SpanQuery);

          void t_SpanQuery::install(PyObject *module)
          {
            installType(&PY_TYPE(SpanQuery), &PY_TYPE_DEF(SpanQuery), module, "SpanQuery", 0);
          }

          void t_SpanQuery::initialize(PyObject *module)
          {
            PyObject_SetAttrString((PyObject *) PY_TYPE(SpanQuery), "class_", make_descriptor(SpanQuery::initializeClass, 1));
            PyObject_SetAttrString((PyObject *) PY_TYPE(SpanQuery), "wrapfn_", make_descriptor(t_SpanQuery::wrap_jobject));
            PyObject_SetAttrString((PyObject *) PY_TYPE(SpanQuery), "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_SpanQuery_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, SpanQuery::initializeClass, 1)))
              return NULL;
            return t_SpanQuery::wrap_Object(SpanQuery(((t_SpanQuery *) arg)->object.this$));
          }
          static PyObject *t_SpanQuery_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, SpanQuery::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_SpanQuery_init_(t_SpanQuery *self, PyObject *args, PyObject *kwds)
          {
            SpanQuery object((jobject) NULL);

            INT_CALL(object = SpanQuery());
            self->object = object;

            return 0;
          }

          static PyObject *t_SpanQuery_createWeight(t_SpanQuery *self, PyObject *args)
          {
            ::org::apache::lucene::search::IndexSearcher a0((jobject) NULL);
            ::org::apache::lucene::search::ScoreMode a1((jobject) NULL);
            PyTypeObject **p1;
            jfloat a2;
            ::org::apache::lucene::search::spans::SpanWeight result((jobject) NULL);

            if (!parseArgs(args, "kKF", ::org::apache::lucene::search::IndexSearcher::initializeClass, ::org::apache::lucene::search::ScoreMode::initializeClass, &a0, &a1, &p1, ::org::apache::lucene::search::t_ScoreMode::parameters_, &a2))
            {
              OBJ_CALL(result = self->object.createWeight(a0, a1, a2));
              return ::org::apache::lucene::search::spans::t_SpanWeight::wrap_Object(result);
            }

            return callSuper(PY_TYPE(SpanQuery), (PyObject *) self, "createWeight", args, 2);
          }

          static PyObject *t_SpanQuery_getField(t_SpanQuery *self)
          {
            ::java::lang::String result((jobject) NULL);
            OBJ_CALL(result = self->object.getField());
            return j2p(result);
          }

          static PyObject *t_SpanQuery_getTermStates(PyTypeObject *type, PyObject *args)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 1:
              {
                JArray< ::org::apache::lucene::search::spans::SpanWeight > a0((jobject) NULL);
                ::java::util::Map result((jobject) NULL);

                if (!parseArgs(args, "[k", ::org::apache::lucene::search::spans::SpanWeight::initializeClass, &a0))
                {
                  OBJ_CALL(result = ::org::apache::lucene::search::spans::SpanQuery::getTermStates(a0));
                  return ::java::util::t_Map::wrap_Object(result, ::org::apache::lucene::index::PY_TYPE(Term), ::org::apache::lucene::index::PY_TYPE(TermStates));
                }
              }
              {
                ::java::util::Collection a0((jobject) NULL);
                PyTypeObject **p0;
                ::java::util::Map result((jobject) NULL);

                if (!parseArgs(args, "K", ::java::util::Collection::initializeClass, &a0, &p0, ::java::util::t_Collection::parameters_))
                {
                  OBJ_CALL(result = ::org::apache::lucene::search::spans::SpanQuery::getTermStates(a0));
                  return ::java::util::t_Map::wrap_Object(result, ::org::apache::lucene::index::PY_TYPE(Term), ::org::apache::lucene::index::PY_TYPE(TermStates));
                }
              }
            }

            PyErr_SetArgsError(type, "getTermStates", args);
            return NULL;
          }

          static PyObject *t_SpanQuery_get__field(t_SpanQuery *self, void *data)
          {
            ::java::lang::String value((jobject) NULL);
            OBJ_CALL(value = self->object.getField());
            return j2p(value);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/gl/GalicianStemFilterFactory.h"
#include "java/util/Map.h"
#include "java/lang/String.h"
#include "org/apache/lucene/analysis/TokenStream.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace gl {

          ::java::lang::Class *GalicianStemFilterFactory::class$ = NULL;
          jmethodID *GalicianStemFilterFactory::mids$ = NULL;
          bool GalicianStemFilterFactory::live$ = false;
          ::java::lang::String *GalicianStemFilterFactory::NAME = NULL;

          jclass GalicianStemFilterFactory::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/gl/GalicianStemFilterFactory");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_408bd889ee3beae5] = env->getMethodID(cls, "<init>", "(Ljava/util/Map;)V");
              mids$[mid_create_6de1e28d9d10cd9e] = env->getMethodID(cls, "create", "(Lorg/apache/lucene/analysis/TokenStream;)Lorg/apache/lucene/analysis/TokenStream;");

              class$ = new ::java::lang::Class(cls);
              cls = (jclass) class$->this$;

              NAME = new ::java::lang::String(env->getStaticObjectField(cls, "NAME", "Ljava/lang/String;"));
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          GalicianStemFilterFactory::GalicianStemFilterFactory(const ::java::util::Map & a0) : ::org::apache::lucene::analysis::util::TokenFilterFactory(env->newObject(initializeClass, &mids$, mid_init$_408bd889ee3beae5, a0.this$)) {}

          ::org::apache::lucene::analysis::TokenStream GalicianStemFilterFactory::create(const ::org::apache::lucene::analysis::TokenStream & a0) const
          {
            return ::org::apache::lucene::analysis::TokenStream(env->callObjectMethod(this$, mids$[mid_create_6de1e28d9d10cd9e], a0.this$));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace gl {
          static PyObject *t_GalicianStemFilterFactory_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_GalicianStemFilterFactory_instance_(PyTypeObject *type, PyObject *arg);
          static int t_GalicianStemFilterFactory_init_(t_GalicianStemFilterFactory *self, PyObject *args, PyObject *kwds);
          static PyObject *t_GalicianStemFilterFactory_create(t_GalicianStemFilterFactory *self, PyObject *args);

          static PyMethodDef t_GalicianStemFilterFactory__methods_[] = {
            DECLARE_METHOD(t_GalicianStemFilterFactory, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_GalicianStemFilterFactory, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_GalicianStemFilterFactory, create, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          static PyType_Slot PY_TYPE_SLOTS(GalicianStemFilterFactory)[] = {
            { Py_tp_methods, t_GalicianStemFilterFactory__methods_ },
            { Py_tp_init, (void *) t_GalicianStemFilterFactory_init_ },
            { 0, NULL }
          };

          static PyType_Def *PY_TYPE_BASES(GalicianStemFilterFactory)[] = {
            &PY_TYPE_DEF(::org::apache::lucene::analysis::util::TokenFilterFactory),
            NULL
          };

          DEFINE_TYPE(GalicianStemFilterFactory, t_GalicianStemFilterFactory, GalicianStemFilterFactory);

          void t_GalicianStemFilterFactory::install(PyObject *module)
          {
            installType(&PY_TYPE(GalicianStemFilterFactory), &PY_TYPE_DEF(GalicianStemFilterFactory), module, "GalicianStemFilterFactory", 0);
          }

          void t_GalicianStemFilterFactory::initialize(PyObject *module)
          {
            PyObject_SetAttrString((PyObject *) PY_TYPE(GalicianStemFilterFactory), "class_", make_descriptor(GalicianStemFilterFactory::initializeClass, 1));
            PyObject_SetAttrString((PyObject *) PY_TYPE(GalicianStemFilterFactory), "wrapfn_", make_descriptor(t_GalicianStemFilterFactory::wrap_jobject));
            PyObject_SetAttrString((PyObject *) PY_TYPE(GalicianStemFilterFactory), "boxfn_", make_descriptor(boxObject));
            env->getClass(GalicianStemFilterFactory::initializeClass);
            PyObject_SetAttrString((PyObject *) PY_TYPE(GalicianStemFilterFactory), "NAME", make_descriptor(j2p(*GalicianStemFilterFactory::NAME)));
          }

          static PyObject *t_GalicianStemFilterFactory_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, GalicianStemFilterFactory::initializeClass, 1)))
              return NULL;
            return t_GalicianStemFilterFactory::wrap_Object(GalicianStemFilterFactory(((t_GalicianStemFilterFactory *) arg)->object.this$));
          }
          static PyObject *t_GalicianStemFilterFactory_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, GalicianStemFilterFactory::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_GalicianStemFilterFactory_init_(t_GalicianStemFilterFactory *self, PyObject *args, PyObject *kwds)
          {
            ::java::util::Map a0((jobject) NULL);
            PyTypeObject **p0;
            GalicianStemFilterFactory object((jobject) NULL);

            if (!parseArgs(args, "K", ::java::util::Map::initializeClass, &a0, &p0, ::java::util::t_Map::parameters_))
            {
              INT_CALL(object = GalicianStemFilterFactory(a0));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_GalicianStemFilterFactory_create(t_GalicianStemFilterFactory *self, PyObject *args)
          {
            ::org::apache::lucene::analysis::TokenStream a0((jobject) NULL);
            ::org::apache::lucene::analysis::TokenStream result((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::analysis::TokenStream::initializeClass, &a0))
            {
              OBJ_CALL(result = self->object.create(a0));
              return ::org::apache::lucene::analysis::t_TokenStream::wrap_Object(result);
            }

            return callSuper(PY_TYPE(GalicianStemFilterFactory), (PyObject *) self, "create", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queries/payloads/SumPayloadFunction.h"
#include "java/lang/Object.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queries {
        namespace payloads {

          ::java::lang::Class *SumPayloadFunction::class$ = NULL;
          jmethodID *SumPayloadFunction::mids$ = NULL;
          bool SumPayloadFunction::live$ = false;

          jclass SumPayloadFunction::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/queries/payloads/SumPayloadFunction");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_f2cc1bce94666404] = env->getMethodID(cls, "<init>", "()V");
              mids$[mid_currentScore_0a14f13874ab46d9] = env->getMethodID(cls, "currentScore", "(ILjava/lang/String;IIIFF)F");
              mids$[mid_docScore_6294fc7b7308f6b0] = env->getMethodID(cls, "docScore", "(ILjava/lang/String;IF)F");
              mids$[mid_equals_8b72f2dcdde6fd1d] = env->getMethodID(cls, "equals", "(Ljava/lang/Object;)Z");
              mids$[mid_hashCode_9972fcc56b44e79d] = env->getMethodID(cls, "hashCode", "()I");

              class$ = new ::java::lang::Class(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          SumPayloadFunction::SumPayloadFunction() : ::org::apache::lucene::queries::payloads::PayloadFunction(env->newObject(initializeClass, &mids$, mid_init$_f2cc1bce94666404)) {}

          jfloat SumPayloadFunction::currentScore(jint a0, const ::java::lang::String & a1, jint a2, jint a3, jint a4, jfloat a5, jfloat a6) const
          {
            return env->callFloatMethod(this$, mids$[mid_currentScore_0a14f13874ab46d9], a0, a1.this$, a2, a3, a4, a5, a6);
          }

          jfloat SumPayloadFunction::docScore(jint a0, const ::java::lang::String & a1, jint a2, jfloat a3) const
          {
            return env->callFloatMethod(this$, mids$[mid_docScore_6294fc7b7308f6b0], a0, a1.this$, a2, a3);
          }

          jboolean SumPayloadFunction::equals(const ::java::lang::Object & a0) const
          {
            return env->callBooleanMethod(this$, mids$[mid_equals_8b72f2dcdde6fd1d], a0.this$);
          }

          jint SumPayloadFunction::hashCode() const
          {
            return env->callIntMethod(this$, mids$[mid_hashCode_9972fcc56b44e79d]);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queries {
        namespace payloads {
          static PyObject *t_SumPayloadFunction_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_SumPayloadFunction_instance_(PyTypeObject *type, PyObject *arg);
          static int t_SumPayloadFunction_init_(t_SumPayloadFunction *self, PyObject *args, PyObject *kwds);
          static PyObject *t_SumPayloadFunction_currentScore(t_SumPayloadFunction *self, PyObject *args);
          static PyObject *t_SumPayloadFunction_docScore(t_SumPayloadFunction *self, PyObject *args);
          static PyObject *t_SumPayloadFunction_equals(t_SumPayloadFunction *self, PyObject *args);
          static PyObject *t_SumPayloadFunction_hashCode(t_SumPayloadFunction *self, PyObject *args);

          static PyMethodDef t_SumPayloadFunction__methods_[] = {
            DECLARE_METHOD(t_SumPayloadFunction, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_SumPayloadFunction, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_SumPayloadFunction, currentScore, METH_VARARGS),
            DECLARE_METHOD(t_SumPayloadFunction, docScore, METH_VARARGS),
            DECLARE_METHOD(t_SumPayloadFunction, equals, METH_VARARGS),
            DECLARE_METHOD(t_SumPayloadFunction, hashCode, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          static PyType_Slot PY_TYPE_SLOTS(SumPayloadFunction)[] = {
            { Py_tp_methods, t_SumPayloadFunction__methods_ },
            { Py_tp_init, (void *) t_SumPayloadFunction_init_ },
            { 0, NULL }
          };

          static PyType_Def *PY_TYPE_BASES(SumPayloadFunction)[] = {
            &PY_TYPE_DEF(::org::apache::lucene::queries::payloads::PayloadFunction),
            NULL
          };

          DEFINE_TYPE(SumPayloadFunction, t_SumPayloadFunction, SumPayloadFunction);

          void t_SumPayloadFunction::install(PyObject *module)
          {
            installType(&PY_TYPE(SumPayloadFunction), &PY_TYPE_DEF(SumPayloadFunction), module, "SumPayloadFunction", 0);
          }

          void t_SumPayloadFunction::initialize(PyObject *module)
          {
            PyObject_SetAttrString((PyObject *) PY_TYPE(SumPayloadFunction), "class_", make_descriptor(SumPayloadFunction::initializeClass, 1));
            PyObject_SetAttrString((PyObject *) PY_TYPE(SumPayloadFunction), "wrapfn_", make_descriptor(t_SumPayloadFunction::wrap_jobject));
            PyObject_SetAttrString((PyObject *) PY_TYPE(SumPayloadFunction), "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_SumPayloadFunction_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, SumPayloadFunction::initializeClass, 1)))
              return NULL;
            return t_SumPayloadFunction::wrap_Object(SumPayloadFunction(((t_SumPayloadFunction *) arg)->object.this$));
          }
          static PyObject *t_SumPayloadFunction_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, SumPayloadFunction::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_SumPayloadFunction_init_(t_SumPayloadFunction *self, PyObject *args, PyObject *kwds)
          {
            SumPayloadFunction object((jobject) NULL);

            INT_CALL(object = SumPayloadFunction());
            self->object = object;

            return 0;
          }

          static PyObject *t_SumPayloadFunction_currentScore(t_SumPayloadFunction *self, PyObject *args)
          {
            jint a0;
            ::java::lang::String a1((jobject) NULL);
            jint a2;
            jint a3;
            jint a4;
            jfloat a5;
            jfloat a6;
            jfloat result;

            if (!parseArgs(args, "IsIIIFF", &a0, &a1, &a2, &a3, &a4, &a5, &a6))
            {
              OBJ_CALL(result = self->object.currentScore(a0, a1, a2, a3, a4, a5, a6));
              return PyFloat_FromDouble((double) result);
            }

            return callSuper(PY_TYPE(SumPayloadFunction), (PyObject *) self, "currentScore", args, 2);
          }

          static PyObject *t_SumPayloadFunction_docScore(t_SumPayloadFunction *self, PyObject *args)
          {
            jint a0;
            ::java::lang::String a1((jobject) NULL);
            jint a2;
            jfloat a3;
            jfloat result;

            if (!parseArgs(args, "IsIF", &a0, &a1, &a2, &a3))
            {
              OBJ_CALL(result = self->object.docScore(a0, a1, a2, a3));
              return PyFloat_FromDouble((double) result);
            }

            return callSuper(PY_TYPE(SumPayloadFunction), (PyObject *) self, "docScore", args, 2);
          }

          static PyObject *t_SumPayloadFunction_equals(t_SumPayloadFunction *self, PyObject *args)
          {
            ::java::lang::Object a0((jobject) NULL);
            jboolean result;

            if (!parseArgs(args, "o", &a0))
            {
              OBJ_CALL(result = self->object.equals(a0));
              Py_RETURN_BOOL(result);
            }

            return callSuper(PY_TYPE(SumPayloadFunction), (PyObject *) self, "equals", args, 2);
          }

          static PyObject *t_SumPayloadFunction_hashCode(t_SumPayloadFunction *self, PyObject *args)
          {
            jint result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.hashCode());
              return PyLong_FromLong((long) result);
            }

            return callSuper(PY_TYPE(SumPayloadFunction), (PyObject *) self, "hashCode", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/codecs/SegmentInfoFormat.h"
#include "org/apache/lucene/store/IOContext.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/store/Directory.h"
#include "java/lang/String.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/index/SegmentInfo.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace codecs {

        ::java::lang::Class *SegmentInfoFormat::class$ = NULL;
        jmethodID *SegmentInfoFormat::mids$ = NULL;
        bool SegmentInfoFormat::live$ = false;

        jclass SegmentInfoFormat::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/codecs/SegmentInfoFormat");

            mids$ = new jmethodID[max_mid];
            mids$[mid_read_ca83998f161c8fae] = env->getMethodID(cls, "read", "(Lorg/apache/lucene/store/Directory;Ljava/lang/String;[BLorg/apache/lucene/store/IOContext;)Lorg/apache/lucene/index/SegmentInfo;");
            mids$[mid_write_42bd8d9f441f9252] = env->getMethodID(cls, "write", "(Lorg/apache/lucene/store/Directory;Lorg/apache/lucene/index/SegmentInfo;Lorg/apache/lucene/store/IOContext;)V");

            class$ = new ::java::lang::Class(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        ::org::apache::lucene::index::SegmentInfo SegmentInfoFormat::read(const ::org::apache::lucene::store::Directory & a0, const ::java::lang::String & a1, const JArray< jbyte > & a2, const ::org::apache::lucene::store::IOContext & a3) const
        {
          return ::org::apache::lucene::index::SegmentInfo(env->callObjectMethod(this$, mids$[mid_read_ca83998f161c8fae], a0.this$, a1.this$, a2.this$, a3.this$));
        }

        void SegmentInfoFormat::write(const ::org::apache::lucene::store::Directory & a0, const ::org::apache::lucene::index::SegmentInfo & a1, const ::org::apache::lucene::store::IOContext & a2) const
        {
          env->callVoidMethod(this$, mids$[mid_write_42bd8d9f441f9252], a0.this$, a1.this$, a2.this$);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace codecs {
        static PyObject *t_SegmentInfoFormat_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_SegmentInfoFormat_instance_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_SegmentInfoFormat_read(t_SegmentInfoFormat *self, PyObject *args);
        static PyObject *t_SegmentInfoFormat_write(t_SegmentInfoFormat *self, PyObject *args);

        static PyMethodDef t_SegmentInfoFormat__methods_[] = {
          DECLARE_METHOD(t_SegmentInfoFormat, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_SegmentInfoFormat, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_SegmentInfoFormat, read, METH_VARARGS),
          DECLARE_METHOD(t_SegmentInfoFormat, write, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        static PyType_Slot PY_TYPE_SLOTS(SegmentInfoFormat)[] = {
          { Py_tp_methods, t_SegmentInfoFormat__methods_ },
          { Py_tp_init, (void *) abstract_init },
          { 0, NULL }
        };

        static PyType_Def *PY_TYPE_BASES(SegmentInfoFormat)[] = {
          &PY_TYPE_DEF(::java::lang::Object),
          NULL
        };

        DEFINE_TYPE(SegmentInfoFormat, t_SegmentInfoFormat, SegmentInfoFormat);

        void t_SegmentInfoFormat::install(PyObject *module)
        {
          installType(&PY_TYPE(SegmentInfoFormat), &PY_TYPE_DEF(SegmentInfoFormat), module, "SegmentInfoFormat", 0);
        }

        void t_SegmentInfoFormat::initialize(PyObject *module)
        {
          PyObject_SetAttrString((PyObject *) PY_TYPE(SegmentInfoFormat), "class_", make_descriptor(SegmentInfoFormat::initializeClass, 1));
          PyObject_SetAttrString((PyObject *) PY_TYPE(SegmentInfoFormat), "wrapfn_", make_descriptor(t_SegmentInfoFormat::wrap_jobject));
          PyObject_SetAttrString((PyObject *) PY_TYPE(SegmentInfoFormat), "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_SegmentInfoFormat_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, SegmentInfoFormat::initializeClass, 1)))
            return NULL;
          return t_SegmentInfoFormat::wrap_Object(SegmentInfoFormat(((t_SegmentInfoFormat *) arg)->object.this$));
        }
        static PyObject *t_SegmentInfoFormat_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, SegmentInfoFormat::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static PyObject *t_SegmentInfoFormat_read(t_SegmentInfoFormat *self, PyObject *args)
        {
          ::org::apache::lucene::store::Directory a0((jobject) NULL);
          ::java::lang::String a1((jobject) NULL);
          JArray< jbyte > a2((jobject) NULL);
          ::org::apache::lucene::store::IOContext a3((jobject) NULL);
          ::org::apache::lucene::index::SegmentInfo result((jobject) NULL);

          if (!parseArgs(args, "ks[Bk", ::org::apache::lucene::store::Directory::initializeClass, ::org::apache::lucene::store::IOContext::initializeClass, &a0, &a1, &a2, &a3))
          {
            OBJ_CALL(result = self->object.read(a0, a1, a2, a3));
            return ::org::apache::lucene::index::t_SegmentInfo::wrap_Object(result);
          }

          PyErr_SetArgsError((PyObject *) self, "read", args);
          return NULL;
        }

        static PyObject *t_SegmentInfoFormat_write(t_SegmentInfoFormat *self, PyObject *args)
        {
          ::org::apache::lucene::store::Directory a0((jobject) NULL);
          ::org::apache::lucene::index::SegmentInfo a1((jobject) NULL);
          ::org::apache::lucene::store::IOContext a2((jobject) NULL);

          if (!parseArgs(args, "kkk", ::org::apache::lucene::store::Directory::initializeClass, ::org::apache::lucene::index::SegmentInfo::initializeClass, ::org::apache::lucene::store::IOContext::initializeClass, &a0, &a1, &a2))
          {
            OBJ_CALL(self->object.write(a0, a1, a2));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "write", args);
          return NULL;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queries/function/docvalues/IntDocValues.h"
#include "org/apache/lucene/index/LeafReaderContext.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/queries/function/ValueSourceScorer.h"
#include "java/lang/Object.h"
#include "org/apache/lucene/queries/function/FunctionValues$ValueFiller.h"
#include "java/lang/String.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/queries/function/ValueSource.h"
#include "org/apache/lucene/search/Weight.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queries {
        namespace function {
          namespace docvalues {

            ::java::lang::Class *IntDocValues::class$ = NULL;
            jmethodID *IntDocValues::mids$ = NULL;
            bool IntDocValues::live$ = false;

            jclass IntDocValues::initializeClass(bool getOnly)
            {
              if (getOnly)
                return (jclass) (live$ ? class$->this$ : NULL);
              if (class$ == NULL)
              {
                jclass cls = (jclass) env->findClass("org/apache/lucene/queries/function/docvalues/IntDocValues");

                mids$ = new jmethodID[max_mid];
                mids$[mid_init$_31c80a0040f07e19] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/queries/function/ValueSource;)V");
                mids$[mid_byteVal_4d5233a30cda5878] = env->getMethodID(cls, "byteVal", "(I)B");
                mids$[mid_doubleVal_f3ddedc0b6f18620] = env->getMethodID(cls, "doubleVal", "(I)D");
                mids$[mid_floatVal_384f078ef4b8f931] = env->getMethodID(cls, "floatVal", "(I)F");
                mids$[mid_getRangeScorer_a2e4107cfe5ff421] = env->getMethodID(cls, "getRangeScorer", "(Lorg/apache/lucene/search/Weight;Lorg/apache/lucene/index/LeafReaderContext;Ljava/lang/String;Ljava/lang/String;ZZ)Lorg/apache/lucene/queries/function/ValueSourceScorer;");
                mids$[mid_getValueFiller_e87ccfe6e71ebd5e] = env->getMethodID(cls, "getValueFiller", "()Lorg/apache/lucene/queries/function/FunctionValues$ValueFiller;");
                mids$[mid_intVal_1e143afe1894d213] = env->getMethodID(cls, "intVal", "(I)I");
                mids$[mid_longVal_0f1d64a641e8af53] = env->getMethodID(cls, "longVal", "(I)J");
                mids$[mid_objectVal_b15c79acb15c2870] = env->getMethodID(cls, "objectVal", "(I)Ljava/lang/Object;");
                mids$[mid_shortVal_464e34d67b70dc89] = env->getMethodID(cls, "shortVal", "(I)S");
                mids$[mid_strVal_d7593acad64ef635] = env->getMethodID(cls, "strVal", "(I)Ljava/lang/String;");
                mids$[mid_toString_d7593acad64ef635] = env->getMethodID(cls, "toString", "(I)Ljava/lang/String;");

                class$ = new ::java::lang::Class(cls);
                live$ = true;
              }
              return (jclass) class$->this$;
            }

            IntDocValues::IntDocValues(const ::org::apache::lucene::queries::function::ValueSource & a0) : ::org::apache::lucene::queries::function::FunctionValues(env->newObject(initializeClass, &mids$, mid_init$_31c80a0040f07e19, a0.this$)) {}

            jbyte IntDocValues::byteVal(jint a0) const
            {
              return env->callByteMethod(this$, mids$[mid_byteVal_4d5233a30cda5878], a0);
            }

            jdouble IntDocValues::doubleVal(jint a0) const
            {
              return env->callDoubleMethod(this$, mids$[mid_doubleVal_f3ddedc0b6f18620], a0);
            }

            jfloat IntDocValues::floatVal(jint a0) const
            {
              return env->callFloatMethod(this$, mids$[mid_floatVal_384f078ef4b8f931], a0);
            }

            ::org::apache::lucene::queries::function::ValueSourceScorer IntDocValues::getRangeScorer(const ::org::apache::lucene::search::Weight & a0, const ::org::apache::lucene::index::LeafReaderContext & a1, const ::java::lang::String & a2, const ::java::lang::String & a3, jboolean a4, jboolean a5) const
            {
              return ::org::apache::lucene::queries::function::ValueSourceScorer(env->callObjectMethod(this$, mids$[mid_getRangeScorer_a2e4107cfe5ff421], a0.this$, a1.this$, a2.this$, a3.this$, a4, a5));
            }

            ::org::apache::lucene::queries::function::FunctionValues$ValueFiller IntDocValues::getValueFiller() const
            {
              return ::org::apache::lucene::queries::function::FunctionValues$ValueFiller(env->callObjectMethod(this$, mids$[mid_getValueFiller_e87ccfe6e71ebd5e]));
            }

            jint IntDocValues::intVal(jint a0) const
            {
              return env->callIntMethod(this$, mids$[mid_intVal_1e143afe1894d213], a0);
            }

            jlong IntDocValues::longVal(jint a0) const
            {
              return env->callLongMethod(this$, mids$[mid_longVal_0f1d64a641e8af53], a0);
            }

            ::java::lang::Object IntDocValues::objectVal(jint a0) const
            {
              return ::java::lang::Object(env->callObjectMethod(this$, mids$[mid_objectVal_b15c79acb15c2870], a0));
            }

            jshort IntDocValues::shortVal(jint a0) const
            {
              return env->callShortMethod(this$, mids$[mid_shortVal_464e34d67b70dc89], a0);
            }

            ::java::lang::String IntDocValues::strVal(jint a0) const
            {
              return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_strVal_d7593acad64ef635], a0));
            }

            ::java::lang::String IntDocValues::toString(jint a0) const
            {
              return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_d7593acad64ef635], a0));
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queries {
        namespace function {
          namespace docvalues {
            static PyObject *t_IntDocValues_cast_(PyTypeObject *type, PyObject *arg);
            static PyObject *t_IntDocValues_instance_(PyTypeObject *type, PyObject *arg);
            static int t_IntDocValues_init_(t_IntDocValues *self, PyObject *args, PyObject *kwds);
            static PyObject *t_IntDocValues_byteVal(t_IntDocValues *self, PyObject *args);
            static PyObject *t_IntDocValues_doubleVal(t_IntDocValues *self, PyObject *args);
            static PyObject *t_IntDocValues_floatVal(t_IntDocValues *self, PyObject *args);
            static PyObject *t_IntDocValues_getRangeScorer(t_IntDocValues *self, PyObject *args);
            static PyObject *t_IntDocValues_getValueFiller(t_IntDocValues *self, PyObject *args);
            static PyObject *t_IntDocValues_intVal(t_IntDocValues *self, PyObject *args);
            static PyObject *t_IntDocValues_longVal(t_IntDocValues *self, PyObject *args);
            static PyObject *t_IntDocValues_objectVal(t_IntDocValues *self, PyObject *args);
            static PyObject *t_IntDocValues_shortVal(t_IntDocValues *self, PyObject *args);
            static PyObject *t_IntDocValues_strVal(t_IntDocValues *self, PyObject *args);
            static PyObject *t_IntDocValues_toString(t_IntDocValues *self, PyObject *args);
            static PyObject *t_IntDocValues_get__valueFiller(t_IntDocValues *self, void *data);
            static PyGetSetDef t_IntDocValues__fields_[] = {
              DECLARE_GET_FIELD(t_IntDocValues, valueFiller),
              { NULL, NULL, NULL, NULL, NULL }
            };

            static PyMethodDef t_IntDocValues__methods_[] = {
              DECLARE_METHOD(t_IntDocValues, cast_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_IntDocValues, instance_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_IntDocValues, byteVal, METH_VARARGS),
              DECLARE_METHOD(t_IntDocValues, doubleVal, METH_VARARGS),
              DECLARE_METHOD(t_IntDocValues, floatVal, METH_VARARGS),
              DECLARE_METHOD(t_IntDocValues, getRangeScorer, METH_VARARGS),
              DECLARE_METHOD(t_IntDocValues, getValueFiller, METH_VARARGS),
              DECLARE_METHOD(t_IntDocValues, intVal, METH_VARARGS),
              DECLARE_METHOD(t_IntDocValues, longVal, METH_VARARGS),
              DECLARE_METHOD(t_IntDocValues, objectVal, METH_VARARGS),
              DECLARE_METHOD(t_IntDocValues, shortVal, METH_VARARGS),
              DECLARE_METHOD(t_IntDocValues, strVal, METH_VARARGS),
              DECLARE_METHOD(t_IntDocValues, toString, METH_VARARGS),
              { NULL, NULL, 0, NULL }
            };

            static PyType_Slot PY_TYPE_SLOTS(IntDocValues)[] = {
              { Py_tp_methods, t_IntDocValues__methods_ },
              { Py_tp_init, (void *) t_IntDocValues_init_ },
              { Py_tp_getset, t_IntDocValues__fields_ },
              { 0, NULL }
            };

            static PyType_Def *PY_TYPE_BASES(IntDocValues)[] = {
              &PY_TYPE_DEF(::org::apache::lucene::queries::function::FunctionValues),
              NULL
            };

            DEFINE_TYPE(IntDocValues, t_IntDocValues, IntDocValues);

            void t_IntDocValues::install(PyObject *module)
            {
              installType(&PY_TYPE(IntDocValues), &PY_TYPE_DEF(IntDocValues), module, "IntDocValues", 0);
            }

            void t_IntDocValues::initialize(PyObject *module)
            {
              PyObject_SetAttrString((PyObject *) PY_TYPE(IntDocValues), "class_", make_descriptor(IntDocValues::initializeClass, 1));
              PyObject_SetAttrString((PyObject *) PY_TYPE(IntDocValues), "wrapfn_", make_descriptor(t_IntDocValues::wrap_jobject));
              PyObject_SetAttrString((PyObject *) PY_TYPE(IntDocValues), "boxfn_", make_descriptor(boxObject));
            }

            static PyObject *t_IntDocValues_cast_(PyTypeObject *type, PyObject *arg)
            {
              if (!(arg = castCheck(arg, IntDocValues::initializeClass, 1)))
                return NULL;
              return t_IntDocValues::wrap_Object(IntDocValues(((t_IntDocValues *) arg)->object.this$));
            }
            static PyObject *t_IntDocValues_instance_(PyTypeObject *type, PyObject *arg)
            {
              if (!castCheck(arg, IntDocValues::initializeClass, 0))
                Py_RETURN_FALSE;
              Py_RETURN_TRUE;
            }

            static int t_IntDocValues_init_(t_IntDocValues *self, PyObject *args, PyObject *kwds)
            {
              ::org::apache::lucene::queries::function::ValueSource a0((jobject) NULL);
              IntDocValues object((jobject) NULL);

              if (!parseArgs(args, "k", ::org::apache::lucene::queries::function::ValueSource::initializeClass, &a0))
              {
                INT_CALL(object = IntDocValues(a0));
                self->object = object;
              }
              else
              {
                PyErr_SetArgsError((PyObject *) self, "__init__", args);
                return -1;
              }

              return 0;
            }

            static PyObject *t_IntDocValues_byteVal(t_IntDocValues *self, PyObject *args)
            {
              jint a0;
              jbyte result;

              if (!parseArgs(args, "I", &a0))
              {
                OBJ_CALL(result = self->object.byteVal(a0));
                return PyLong_FromLong((long) result);
              }

              return callSuper(PY_TYPE(IntDocValues), (PyObject *) self, "byteVal", args, 2);
            }

            static PyObject *t_IntDocValues_doubleVal(t_IntDocValues *self, PyObject *args)
            {
              jint a0;
              jdouble result;

              if (!parseArgs(args, "I", &a0))
              {
                OBJ_CALL(result = self->object.doubleVal(a0));
                return PyFloat_FromDouble((double) result);
              }

              return callSuper(PY_TYPE(IntDocValues), (PyObject *) self, "doubleVal", args, 2);
            }

            static PyObject *t_IntDocValues_floatVal(t_IntDocValues *self, PyObject *args)
            {
              jint a0;
              jfloat result;

              if (!parseArgs(args, "I", &a0))
              {
                OBJ_CALL(result = self->object.floatVal(a0));
                return PyFloat_FromDouble((double) result);
              }

              return callSuper(PY_TYPE(IntDocValues), (PyObject *) self, "floatVal", args, 2);
            }

            static PyObject *t_IntDocValues_getRangeScorer(t_IntDocValues *self, PyObject *args)
            {
              ::org::apache::lucene::search::Weight a0((jobject) NULL);
              ::org::apache::lucene::index::LeafReaderContext a1((jobject) NULL);
              ::java::lang::String a2((jobject) NULL);
              ::java::lang::String a3((jobject) NULL);
              jboolean a4;
              jboolean a5;
              ::org::apache::lucene::queries::function::ValueSourceScorer result((jobject) NULL);

              if (!parseArgs(args, "kkssZZ", ::org::apache::lucene::search::Weight::initializeClass, ::org::apache::lucene::index::LeafReaderContext::initializeClass, &a0, &a1, &a2, &a3, &a4, &a5))
              {
                OBJ_CALL(result = self->object.getRangeScorer(a0, a1, a2, a3, a4, a5));
                return ::org::apache::lucene::queries::function::t_ValueSourceScorer::wrap_Object(result);
              }

              return callSuper(PY_TYPE(IntDocValues), (PyObject *) self, "getRangeScorer", args, 2);
            }

            static PyObject *t_IntDocValues_getValueFiller(t_IntDocValues *self, PyObject *args)
            {
              ::org::apache::lucene::queries::function::FunctionValues$ValueFiller result((jobject) NULL);

              if (!parseArgs(args, ""))
              {
                OBJ_CALL(result = self->object.getValueFiller());
                return ::org::apache::lucene::queries::function::t_FunctionValues$ValueFiller::wrap_Object(result);
              }

              return callSuper(PY_TYPE(IntDocValues), (PyObject *) self, "getValueFiller", args, 2);
            }

            static PyObject *t_IntDocValues_intVal(t_IntDocValues *self, PyObject *args)
            {
              jint a0;
              jint result;

              if (!parseArgs(args, "I", &a0))
              {
                OBJ_CALL(result = self->object.intVal(a0));
                return PyLong_FromLong((long) result);
              }

              return callSuper(PY_TYPE(IntDocValues), (PyObject *) self, "intVal", args, 2);
            }

            static PyObject *t_IntDocValues_longVal(t_IntDocValues *self, PyObject *args)
            {
              jint a0;
              jlong result;

              if (!parseArgs(args, "I", &a0))
              {
                OBJ_CALL(result = self->object.longVal(a0));
                return PyLong_FromLongLong((PY_LONG_LONG) result);
              }

              return callSuper(PY_TYPE(IntDocValues), (PyObject *) self, "longVal", args, 2);
            }

            static PyObject *t_IntDocValues_objectVal(t_IntDocValues *self, PyObject *args)
            {
              jint a0;
              ::java::lang::Object result((jobject) NULL);

              if (!parseArgs(args, "I", &a0))
              {
                OBJ_CALL(result = self->object.objectVal(a0));
                return ::java::lang::t_Object::wrap_Object(result);
              }

              return callSuper(PY_TYPE(IntDocValues), (PyObject *) self, "objectVal", args, 2);
            }

            static PyObject *t_IntDocValues_shortVal(t_IntDocValues *self, PyObject *args)
            {
              jint a0;
              jshort result;

              if (!parseArgs(args, "I", &a0))
              {
                OBJ_CALL(result = self->object.shortVal(a0));
                return PyLong_FromLong((long) result);
              }

              return callSuper(PY_TYPE(IntDocValues), (PyObject *) self, "shortVal", args, 2);
            }

            static PyObject *t_IntDocValues_strVal(t_IntDocValues *self, PyObject *args)
            {
              jint a0;
              ::java::lang::String result((jobject) NULL);

              if (!parseArgs(args, "I", &a0))
              {
                OBJ_CALL(result = self->object.strVal(a0));
                return j2p(result);
              }

              return callSuper(PY_TYPE(IntDocValues), (PyObject *) self, "strVal", args, 2);
            }

            static PyObject *t_IntDocValues_toString(t_IntDocValues *self, PyObject *args)
            {
              jint a0;
              ::java::lang::String result((jobject) NULL);

              if (!parseArgs(args, "I", &a0))
              {
                OBJ_CALL(result = self->object.toString(a0));
                return j2p(result);
              }

              return callSuper(PY_TYPE(IntDocValues), (PyObject *) self, "toString", args, 2);
            }

            static PyObject *t_IntDocValues_get__valueFiller(t_IntDocValues *self, void *data)
            {
              ::org::apache::lucene::queries::function::FunctionValues$ValueFiller value((jobject) NULL);
              OBJ_CALL(value = self->object.getValueFiller());
              return ::org::apache::lucene::queries::function::t_FunctionValues$ValueFiller::wrap_Object(value);
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/uhighlight/CharArrayMatcher.h"
#include "org/apache/lucene/util/CharsRef.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/search/uhighlight/CharArrayMatcher.h"
#include "org/apache/lucene/util/BytesRef.h"
#include "java/util/List.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace uhighlight {

          ::java::lang::Class *CharArrayMatcher::class$ = NULL;
          jmethodID *CharArrayMatcher::mids$ = NULL;
          bool CharArrayMatcher::live$ = false;

          jclass CharArrayMatcher::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/search/uhighlight/CharArrayMatcher");

              mids$ = new jmethodID[max_mid];
              mids$[mid_fromTerms_11e4989e938044de] = env->getStaticMethodID(cls, "fromTerms", "(Ljava/util/List;)Lorg/apache/lucene/search/uhighlight/CharArrayMatcher;");
              mids$[mid_match_32b38c27586805a6] = env->getMethodID(cls, "match", "(Lorg/apache/lucene/util/CharsRef;)Z");
              mids$[mid_match_4c2a9c7f32a6ad26] = env->getMethodID(cls, "match", "([CII)Z");

              class$ = new ::java::lang::Class(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          CharArrayMatcher CharArrayMatcher::fromTerms(const ::java::util::List & a0)
          {
            jclass cls = env->getClass(initializeClass);
            return CharArrayMatcher(env->callStaticObjectMethod(cls, mids$[mid_fromTerms_11e4989e938044de], a0.this$));
          }

          jboolean CharArrayMatcher::match(const ::org::apache::lucene::util::CharsRef & a0) const
          {
            return env->callBooleanMethod(this$, mids$[mid_match_32b38c27586805a6], a0.this$);
          }

          jboolean CharArrayMatcher::match(const JArray< jchar > & a0, jint a1, jint a2) const
          {
            return env->callBooleanMethod(this$, mids$[mid_match_4c2a9c7f32a6ad26], a0.this$, a1, a2);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace uhighlight {
          static PyObject *t_CharArrayMatcher_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_CharArrayMatcher_instance_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_CharArrayMatcher_fromTerms(PyTypeObject *type, PyObject *arg);
          static PyObject *t_CharArrayMatcher_match(t_CharArrayMatcher *self, PyObject *args);

          static PyMethodDef t_CharArrayMatcher__methods_[] = {
            DECLARE_METHOD(t_CharArrayMatcher, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_CharArrayMatcher, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_CharArrayMatcher, fromTerms, METH_O | METH_CLASS),
            DECLARE_METHOD(t_CharArrayMatcher, match, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          static PyType_Slot PY_TYPE_SLOTS(CharArrayMatcher)[] = {
            { Py_tp_methods, t_CharArrayMatcher__methods_ },
            { Py_tp_init, (void *) abstract_init },
            { 0, NULL }
          };

          static PyType_Def *PY_TYPE_BASES(CharArrayMatcher)[] = {
            &PY_TYPE_DEF(::java::lang::Object),
            NULL
          };

          DEFINE_TYPE(CharArrayMatcher, t_CharArrayMatcher, CharArrayMatcher);

          void t_CharArrayMatcher::install(PyObject *module)
          {
            installType(&PY_TYPE(CharArrayMatcher), &PY_TYPE_DEF(CharArrayMatcher), module, "CharArrayMatcher", 0);
          }

          void t_CharArrayMatcher::initialize(PyObject *module)
          {
            PyObject_SetAttrString((PyObject *) PY_TYPE(CharArrayMatcher), "class_", make_descriptor(CharArrayMatcher::initializeClass, 1));
            PyObject_SetAttrString((PyObject *) PY_TYPE(CharArrayMatcher), "wrapfn_", make_descriptor(t_CharArrayMatcher::wrap_jobject));
            PyObject_SetAttrString((PyObject *) PY_TYPE(CharArrayMatcher), "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_CharArrayMatcher_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, CharArrayMatcher::initializeClass, 1)))
              return NULL;
            return t_CharArrayMatcher::wrap_Object(CharArrayMatcher(((t_CharArrayMatcher *) arg)->object.this$));
          }
          static PyObject *t_CharArrayMatcher_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, CharArrayMatcher::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static PyObject *t_CharArrayMatcher_fromTerms(PyTypeObject *type, PyObject *arg)
          {
            ::java::util::List a0((jobject) NULL);
            PyTypeObject **p0;
            CharArrayMatcher result((jobject) NULL);

            if (!parseArg(arg, "K", ::java::util::List::initializeClass, &a0, &p0, ::java::util::t_List::parameters_))
            {
              OBJ_CALL(result = ::org::apache::lucene::search::uhighlight::CharArrayMatcher::fromTerms(a0));
              return t_CharArrayMatcher::wrap_Object(result);
            }

            PyErr_SetArgsError(type, "fromTerms", arg);
            return NULL;
          }

          static PyObject *t_CharArrayMatcher_match(t_CharArrayMatcher *self, PyObject *args)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 1:
              {
                ::org::apache::lucene::util::CharsRef a0((jobject) NULL);
                jboolean result;

                if (!parseArgs(args, "k", ::org::apache::lucene::util::CharsRef::initializeClass, &a0))
                {
                  OBJ_CALL(result = self->object.match(a0));
                  Py_RETURN_BOOL(result);
                }
              }
              break;
             case 3:
              {
                JArray< jchar > a0((jobject) NULL);
                jint a1;
                jint a2;
                jboolean result;

                if (!parseArgs(args, "[CII", &a0, &a1, &a2))
                {
                  OBJ_CALL(result = self->object.match(a0, a1, a2));
                  Py_RETURN_BOOL(result);
                }
              }
            }

            PyErr_SetArgsError((PyObject *) self, "match", args);
            return NULL;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/codecs/memory/FSTTermsReader.h"
#include "org/apache/lucene/index/Terms.h"
#include "java/util/Collection.h"
#include "org/apache/lucene/util/Accountable.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/index/SegmentReadState.h"
#include "java/lang/String.h"
#include "java/util/Iterator.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/codecs/PostingsReaderBase.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace codecs {
        namespace memory {

          ::java::lang::Class *FSTTermsReader::class$ = NULL;
          jmethodID *FSTTermsReader::mids$ = NULL;
          bool FSTTermsReader::live$ = false;

          jclass FSTTermsReader::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/codecs/memory/FSTTermsReader");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_fa1d323f1cb4a96c] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/index/SegmentReadState;Lorg/apache/lucene/codecs/PostingsReaderBase;)V");
              mids$[mid_checkIntegrity_f2cc1bce94666404] = env->getMethodID(cls, "checkIntegrity", "()V");
              mids$[mid_close_f2cc1bce94666404] = env->getMethodID(cls, "close", "()V");
              mids$[mid_getChildResources_d4dfbf7a26ff41df] = env->getMethodID(cls, "getChildResources", "()Ljava/util/Collection;");
              mids$[mid_iterator_233a192dadb0917d] = env->getMethodID(cls, "iterator", "()Ljava/util/Iterator;");
              mids$[mid_ramBytesUsed_2e5ae9edcb9b072f] = env->getMethodID(cls, "ramBytesUsed", "()J");
              mids$[mid_size_9972fcc56b44e79d] = env->getMethodID(cls, "size", "()I");
              mids$[mid_terms_3976802ad88273cd] = env->getMethodID(cls, "terms", "(Ljava/lang/String;)Lorg/apache/lucene/index/Terms;");
              mids$[mid_toString_db9b55ba01e03e4b] = env->getMethodID(cls, "toString", "()Ljava/lang/String;");

              class$ = new ::java::lang::Class(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          FSTTermsReader::FSTTermsReader(const ::org::apache::lucene::index::SegmentReadState & a0, const ::org::apache::lucene::codecs::PostingsReaderBase & a1) : ::org::apache::lucene::codecs::FieldsProducer(env->newObject(initializeClass, &mids$, mid_init$_fa1d323f1cb4a96c, a0.this$, a1.this$)) {}

          void FSTTermsReader::checkIntegrity() const
          {
            env->callVoidMethod(this$, mids$[mid_checkIntegrity_f2cc1bce94666404]);
          }

          void FSTTermsReader::close() const
          {
            env->callVoidMethod(this$, mids$[mid_close_f2cc1bce94666404]);
          }

          ::java::util::Collection FSTTermsReader::getChildResources() const
          {
            return ::java::util::Collection(env->callObjectMethod(this$, mids$[mid_getChildResources_d4dfbf7a26ff41df]));
          }

          ::java::util::Iterator FSTTermsReader::iterator() const
          {
            return ::java::util::Iterator(env->callObjectMethod(this$, mids$[mid_iterator_233a192dadb0917d]));
          }

          jlong FSTTermsReader::ramBytesUsed() const
          {
            return env->callLongMethod(this$, mids$[mid_ramBytesUsed_2e5ae9edcb9b072f]);
          }

          jint FSTTermsReader::size() const
          {
            return env->callIntMethod(this$, mids$[mid_size_9972fcc56b44e79d]);
          }

          ::org::apache::lucene::index::Terms FSTTermsReader::terms(const ::java::lang::String & a0) const
          {
            return ::org::apache::lucene::index::Terms(env->callObjectMethod(this$, mids$[mid_terms_3976802ad88273cd], a0.this$));
          }

          ::java::lang::String FSTTermsReader::toString() const
          {
            return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_db9b55ba01e03e4b]));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace codecs {
        namespace memory {
          static PyObject *t_FSTTermsReader_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_FSTTermsReader_instance_(PyTypeObject *type, PyObject *arg);
          static int t_FSTTermsReader_init_(t_FSTTermsReader *self, PyObject *args, PyObject *kwds);
          static PyObject *t_FSTTermsReader_checkIntegrity(t_FSTTermsReader *self, PyObject *args);
          static PyObject *t_FSTTermsReader_close(t_FSTTermsReader *self, PyObject *args);
          static PyObject *t_FSTTermsReader_getChildResources(t_FSTTermsReader *self, PyObject *args);
          static PyObject *t_FSTTermsReader_iterator(t_FSTTermsReader *self, PyObject *args);
          static PyObject *t_FSTTermsReader_ramBytesUsed(t_FSTTermsReader *self, PyObject *args);
          static PyObject *t_FSTTermsReader_size(t_FSTTermsReader *self, PyObject *args);
          static PyObject *t_FSTTermsReader_terms(t_FSTTermsReader *self, PyObject *args);
          static PyObject *t_FSTTermsReader_toString(t_FSTTermsReader *self, PyObject *args);
          static PyObject *t_FSTTermsReader_get__childResources(t_FSTTermsReader *self, void *data);
          static PyGetSetDef t_FSTTermsReader__fields_[] = {
            DECLARE_GET_FIELD(t_FSTTermsReader, childResources),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_FSTTermsReader__methods_[] = {
            DECLARE_METHOD(t_FSTTermsReader, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_FSTTermsReader, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_FSTTermsReader, checkIntegrity, METH_VARARGS),
            DECLARE_METHOD(t_FSTTermsReader, close, METH_VARARGS),
            DECLARE_METHOD(t_FSTTermsReader, getChildResources, METH_VARARGS),
            DECLARE_METHOD(t_FSTTermsReader, iterator, METH_VARARGS),
            DECLARE_METHOD(t_FSTTermsReader, ramBytesUsed, METH_VARARGS),
            DECLARE_METHOD(t_FSTTermsReader, size, METH_VARARGS),
            DECLARE_METHOD(t_FSTTermsReader, terms, METH_VARARGS),
            DECLARE_METHOD(t_FSTTermsReader, toString, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          static PyType_Slot PY_TYPE_SLOTS(FSTTermsReader)[] = {
            { Py_tp_methods, t_FSTTermsReader__methods_ },
            { Py_tp_init, (void *) t_FSTTermsReader_init_ },
            { Py_tp_getset, t_FSTTermsReader__fields_ },
            { Py_tp_iter, (void *) ((PyObject *(*)(t_FSTTermsReader *)) get_iterator< t_FSTTermsReader >) },
            { Py_tp_iternext, (void *) 0 },
            { 0, NULL }
          };

          static PyType_Def *PY_TYPE_BASES(FSTTermsReader)[] = {
            &PY_TYPE_DEF(::org::apache::lucene::codecs::FieldsProducer),
            NULL
          };

          DEFINE_TYPE(FSTTermsReader, t_FSTTermsReader, FSTTermsReader);

          void t_FSTTermsReader::install(PyObject *module)
          {
            installType(&PY_TYPE(FSTTermsReader), &PY_TYPE_DEF(FSTTermsReader), module, "FSTTermsReader", 0);
          }

          void t_FSTTermsReader::initialize(PyObject *module)
          {
            PyObject_SetAttrString((PyObject *) PY_TYPE(FSTTermsReader), "class_", make_descriptor(FSTTermsReader::initializeClass, 1));
            PyObject_SetAttrString((PyObject *) PY_TYPE(FSTTermsReader), "wrapfn_", make_descriptor(t_FSTTermsReader::wrap_jobject));
            PyObject_SetAttrString((PyObject *) PY_TYPE(FSTTermsReader), "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_FSTTermsReader_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, FSTTermsReader::initializeClass, 1)))
              return NULL;
            return t_FSTTermsReader::wrap_Object(FSTTermsReader(((t_FSTTermsReader *) arg)->object.this$));
          }
          static PyObject *t_FSTTermsReader_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, FSTTermsReader::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_FSTTermsReader_init_(t_FSTTermsReader *self, PyObject *args, PyObject *kwds)
          {
            ::org::apache::lucene::index::SegmentReadState a0((jobject) NULL);
            ::org::apache::lucene::codecs::PostingsReaderBase a1((jobject) NULL);
            FSTTermsReader object((jobject) NULL);

            if (!parseArgs(args, "kk", ::org::apache::lucene::index::SegmentReadState::initializeClass, ::org::apache::lucene::codecs::PostingsReaderBase::initializeClass, &a0, &a1))
            {
              INT_CALL(object = FSTTermsReader(a0, a1));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_FSTTermsReader_checkIntegrity(t_FSTTermsReader *self, PyObject *args)
          {

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(self->object.checkIntegrity());
              Py_RETURN_NONE;
            }

            return callSuper(PY_TYPE(FSTTermsReader), (PyObject *) self, "checkIntegrity", args, 2);
          }

          static PyObject *t_FSTTermsReader_close(t_FSTTermsReader *self, PyObject *args)
          {

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(self->object.close());
              Py_RETURN_NONE;
            }

            return callSuper(PY_TYPE(FSTTermsReader), (PyObject *) self, "close", args, 2);
          }

          static PyObject *t_FSTTermsReader_getChildResources(t_FSTTermsReader *self, PyObject *args)
          {
            ::java::util::Collection result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.getChildResources());
              return ::java::util::t_Collection::wrap_Object(result, ::org::apache::lucene::util::PY_TYPE(Accountable));
            }

            return callSuper(PY_TYPE(FSTTermsReader), (PyObject *) self, "getChildResources", args, 2);
          }

          static PyObject *t_FSTTermsReader_iterator(t_FSTTermsReader *self, PyObject *args)
          {
            ::java::util::Iterator result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.iterator());
              return ::java::util::t_Iterator::wrap_Object(result, ::java::lang::PY_TYPE(String));
            }

            return callSuper(PY_TYPE(FSTTermsReader), (PyObject *) self, "iterator", args, 2);
          }

          static PyObject *t_FSTTermsReader_ramBytesUsed(t_FSTTermsReader *self, PyObject *args)
          {
            jlong result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.ramBytesUsed());
              return PyLong_FromLongLong((PY_LONG_LONG) result);
            }

            return callSuper(PY_TYPE(FSTTermsReader), (PyObject *) self, "ramBytesUsed", args, 2);
          }

          static PyObject *t_FSTTermsReader_size(t_FSTTermsReader *self, PyObject *args)
          {
            jint result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.size());
              return PyLong_FromLong((long) result);
            }

            return callSuper(PY_TYPE(FSTTermsReader), (PyObject *) self, "size", args, 2);
          }

          static PyObject *t_FSTTermsReader_terms(t_FSTTermsReader *self, PyObject *args)
          {
            ::java::lang::String a0((jobject) NULL);
            ::org::apache::lucene::index::Terms result((jobject) NULL);

            if (!parseArgs(args, "s", &a0))
            {
              OBJ_CALL(result = self->object.terms(a0));
              return ::org::apache::lucene::index::t_Terms::wrap_Object(result);
            }

            return callSuper(PY_TYPE(FSTTermsReader), (PyObject *) self, "terms", args, 2);
          }

          static PyObject *t_FSTTermsReader_toString(t_FSTTermsReader *self, PyObject *args)
          {
            ::java::lang::String result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.toString());
              return j2p(result);
            }

            return callSuper(PY_TYPE(FSTTermsReader), (PyObject *) self, "toString", args, 2);
          }

          static PyObject *t_FSTTermsReader_get__childResources(t_FSTTermsReader *self, void *data)
          {
            ::java::util::Collection value((jobject) NULL);
            OBJ_CALL(value = self->object.getChildResources());
            return ::java::util::t_Collection::wrap_Object(value);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/codecs/lucene70/Lucene70DocValuesFormat.h"
#include "org/apache/lucene/codecs/DocValuesConsumer.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/index/SegmentReadState.h"
#include "org/apache/lucene/codecs/DocValuesProducer.h"
#include "org/apache/lucene/index/SegmentWriteState.h"
#include "java/io/IOException.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace codecs {
        namespace lucene70 {

          ::java::lang::Class *Lucene70DocValuesFormat::class$ = NULL;
          jmethodID *Lucene70DocValuesFormat::mids$ = NULL;
          bool Lucene70DocValuesFormat::live$ = false;

          jclass Lucene70DocValuesFormat::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/codecs/lucene70/Lucene70DocValuesFormat");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_f2cc1bce94666404] = env->getMethodID(cls, "<init>", "()V");
              mids$[mid_fieldsConsumer_4d0d89459a33e411] = env->getMethodID(cls, "fieldsConsumer", "(Lorg/apache/lucene/index/SegmentWriteState;)Lorg/apache/lucene/codecs/DocValuesConsumer;");
              mids$[mid_fieldsProducer_4fca71c324f605dc] = env->getMethodID(cls, "fieldsProducer", "(Lorg/apache/lucene/index/SegmentReadState;)Lorg/apache/lucene/codecs/DocValuesProducer;");

              class$ = new ::java::lang::Class(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          Lucene70DocValuesFormat::Lucene70DocValuesFormat() : ::org::apache::lucene::codecs::DocValuesFormat(env->newObject(initializeClass, &mids$, mid_init$_f2cc1bce94666404)) {}

          ::org::apache::lucene::codecs::DocValuesConsumer Lucene70DocValuesFormat::fieldsConsumer(const ::org::apache::lucene::index::SegmentWriteState & a0) const
          {
            return ::org::apache::lucene::codecs::DocValuesConsumer(env->callObjectMethod(this$, mids$[mid_fieldsConsumer_4d0d89459a33e411], a0.this$));
          }

          ::org::apache::lucene::codecs::DocValuesProducer Lucene70DocValuesFormat::fieldsProducer(const ::org::apache::lucene::index::SegmentReadState & a0) const
          {
            return ::org::apache::lucene::codecs::DocValuesProducer(env->callObjectMethod(this$, mids$[mid_fieldsProducer_4fca71c324f605dc], a0.this$));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace codecs {
        namespace lucene70 {
          static PyObject *t_Lucene70DocValuesFormat_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_Lucene70DocValuesFormat_instance_(PyTypeObject *type, PyObject *arg);
          static int t_Lucene70DocValuesFormat_init_(t_Lucene70DocValuesFormat *self, PyObject *args, PyObject *kwds);
          static PyObject *t_Lucene70DocValuesFormat_fieldsConsumer(t_Lucene70DocValuesFormat *self, PyObject *args);
          static PyObject *t_Lucene70DocValuesFormat_fieldsProducer(t_Lucene70DocValuesFormat *self, PyObject *args);

          static PyMethodDef t_Lucene70DocValuesFormat__methods_[] = {
            DECLARE_METHOD(t_Lucene70DocValuesFormat, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_Lucene70DocValuesFormat, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_Lucene70DocValuesFormat, fieldsConsumer, METH_VARARGS),
            DECLARE_METHOD(t_Lucene70DocValuesFormat, fieldsProducer, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          static PyType_Slot PY_TYPE_SLOTS(Lucene70DocValuesFormat)[] = {
            { Py_tp_methods, t_Lucene70DocValuesFormat__methods_ },
            { Py_tp_init, (void *) t_Lucene70DocValuesFormat_init_ },
            { 0, NULL }
          };

          static PyType_Def *PY_TYPE_BASES(Lucene70DocValuesFormat)[] = {
            &PY_TYPE_DEF(::org::apache::lucene::codecs::DocValuesFormat),
            NULL
          };

          DEFINE_TYPE(Lucene70DocValuesFormat, t_Lucene70DocValuesFormat, Lucene70DocValuesFormat);

          void t_Lucene70DocValuesFormat::install(PyObject *module)
          {
            installType(&PY_TYPE(Lucene70DocValuesFormat), &PY_TYPE_DEF(Lucene70DocValuesFormat), module, "Lucene70DocValuesFormat", 0);
          }

          void t_Lucene70DocValuesFormat::initialize(PyObject *module)
          {
            PyObject_SetAttrString((PyObject *) PY_TYPE(Lucene70DocValuesFormat), "class_", make_descriptor(Lucene70DocValuesFormat::initializeClass, 1));
            PyObject_SetAttrString((PyObject *) PY_TYPE(Lucene70DocValuesFormat), "wrapfn_", make_descriptor(t_Lucene70DocValuesFormat::wrap_jobject));
            PyObject_SetAttrString((PyObject *) PY_TYPE(Lucene70DocValuesFormat), "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_Lucene70DocValuesFormat_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, Lucene70DocValuesFormat::initializeClass, 1)))
              return NULL;
            return t_Lucene70DocValuesFormat::wrap_Object(Lucene70DocValuesFormat(((t_Lucene70DocValuesFormat *) arg)->object.this$));
          }
          static PyObject *t_Lucene70DocValuesFormat_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, Lucene70DocValuesFormat::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_Lucene70DocValuesFormat_init_(t_Lucene70DocValuesFormat *self, PyObject *args, PyObject *kwds)
          {
            Lucene70DocValuesFormat object((jobject) NULL);

            INT_CALL(object = Lucene70DocValuesFormat());
            self->object = object;

            return 0;
          }

          static PyObject *t_Lucene70DocValuesFormat_fieldsConsumer(t_Lucene70DocValuesFormat *self, PyObject *args)
          {
            ::org::apache::lucene::index::SegmentWriteState a0((jobject) NULL);
            ::org::apache::lucene::codecs::DocValuesConsumer result((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::index::SegmentWriteState::initializeClass, &a0))
            {
              OBJ_CALL(result = self->object.fieldsConsumer(a0));
              return ::org::apache::lucene::codecs::t_DocValuesConsumer::wrap_Object(result);
            }

            return callSuper(PY_TYPE(Lucene70DocValuesFormat), (PyObject *) self, "fieldsConsumer", args, 2);
          }

          static PyObject *t_Lucene70DocValuesFormat_fieldsProducer(t_Lucene70DocValuesFormat *self, PyObject *args)
          {
            ::org::apache::lucene::index::SegmentReadState a0((jobject) NULL);
            ::org::apache::lucene::codecs::DocValuesProducer result((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::index::SegmentReadState::initializeClass, &a0))
            {
              OBJ_CALL(result = self->object.fieldsProducer(a0));
              return ::org::apache::lucene::codecs::t_DocValuesProducer::wrap_Object(result);
            }

            return callSuper(PY_TYPE(Lucene70DocValuesFormat), (PyObject *) self, "fieldsProducer", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/codecs/lucene60/Lucene60PointsReader.h"
#include "org/apache/lucene/index/PointValues.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/index/SegmentReadState.h"
#include "java/lang/String.h"
#include "java/io/IOException.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace codecs {
        namespace lucene60 {

          ::java::lang::Class *Lucene60PointsReader::class$ = NULL;
          jmethodID *Lucene60PointsReader::mids$ = NULL;
          bool Lucene60PointsReader::live$ = false;

          jclass Lucene60PointsReader::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/codecs/lucene60/Lucene60PointsReader");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_363fedc32cc1a1cf] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/index/SegmentReadState;)V");
              mids$[mid_checkIntegrity_f2cc1bce94666404] = env->getMethodID(cls, "checkIntegrity", "()V");
              mids$[mid_close_f2cc1bce94666404] = env->getMethodID(cls, "close", "()V");
              mids$[mid_getValues_72b990dbae0eea09] = env->getMethodID(cls, "getValues", "(Ljava/lang/String;)Lorg/apache/lucene/index/PointValues;");
              mids$[mid_ramBytesUsed_2e5ae9edcb9b072f] = env->getMethodID(cls, "ramBytesUsed", "()J");

              class$ = new ::java::lang::Class(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          Lucene60PointsReader::Lucene60PointsReader(const ::org::apache::lucene::index::SegmentReadState & a0) : ::org::apache::lucene::codecs::PointsReader(env->newObject(initializeClass, &mids$, mid_init$_363fedc32cc1a1cf, a0.this$)) {}

          void Lucene60PointsReader::checkIntegrity() const
          {
            env->callVoidMethod(this$, mids$[mid_checkIntegrity_f2cc1bce94666404]);
          }

          void Lucene60PointsReader::close() const
          {
            env->callVoidMethod(this$, mids$[mid_close_f2cc1bce94666404]);
          }

          ::org::apache::lucene::index::PointValues Lucene60PointsReader::getValues(const ::java::lang::String & a0) const
          {
            return ::org::apache::lucene::index::PointValues(env->callObjectMethod(this$, mids$[mid_getValues_72b990dbae0eea09], a0.this$));
          }

          jlong Lucene60PointsReader::ramBytesUsed() const
          {
            return env->callLongMethod(this$, mids$[mid_ramBytesUsed_2e5ae9edcb9b072f]);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace codecs {
        namespace lucene60 {
          static PyObject *t_Lucene60PointsReader_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_Lucene60PointsReader_instance_(PyTypeObject *type, PyObject *arg);
          static int t_Lucene60PointsReader_init_(t_Lucene60PointsReader *self, PyObject *args, PyObject *kwds);
          static PyObject *t_Lucene60PointsReader_checkIntegrity(t_Lucene60PointsReader *self, PyObject *args);
          static PyObject *t_Lucene60PointsReader_close(t_Lucene60PointsReader *self, PyObject *args);
          static PyObject *t_Lucene60PointsReader_getValues(t_Lucene60PointsReader *self, PyObject *args);
          static PyObject *t_Lucene60PointsReader_ramBytesUsed(t_Lucene60PointsReader *self, PyObject *args);

          static PyMethodDef t_Lucene60PointsReader__methods_[] = {
            DECLARE_METHOD(t_Lucene60PointsReader, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_Lucene60PointsReader, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_Lucene60PointsReader, checkIntegrity, METH_VARARGS),
            DECLARE_METHOD(t_Lucene60PointsReader, close, METH_VARARGS),
            DECLARE_METHOD(t_Lucene60PointsReader, getValues, METH_VARARGS),
            DECLARE_METHOD(t_Lucene60PointsReader, ramBytesUsed, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          static PyType_Slot PY_TYPE_SLOTS(Lucene60PointsReader)[] = {
            { Py_tp_methods, t_Lucene60PointsReader__methods_ },
            { Py_tp_init, (void *) t_Lucene60PointsReader_init_ },
            { 0, NULL }
          };

          static PyType_Def *PY_TYPE_BASES(Lucene60PointsReader)[] = {
            &PY_TYPE_DEF(::org::apache::lucene::codecs::PointsReader),
            NULL
          };

          DEFINE_TYPE(Lucene60PointsReader, t_Lucene60PointsReader, Lucene60PointsReader);

          void t_Lucene60PointsReader::install(PyObject *module)
          {
            installType(&PY_TYPE(Lucene60PointsReader), &PY_TYPE_DEF(Lucene60PointsReader), module, "Lucene60PointsReader", 0);
          }

          void t_Lucene60PointsReader::initialize(PyObject *module)
          {
            PyObject_SetAttrString((PyObject *) PY_TYPE(Lucene60PointsReader), "class_", make_descriptor(Lucene60PointsReader::initializeClass, 1));
            PyObject_SetAttrString((PyObject *) PY_TYPE(Lucene60PointsReader), "wrapfn_", make_descriptor(t_Lucene60PointsReader::wrap_jobject));
            PyObject_SetAttrString((PyObject *) PY_TYPE(Lucene60PointsReader), "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_Lucene60PointsReader_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, Lucene60PointsReader::initializeClass, 1)))
              return NULL;
            return t_Lucene60PointsReader::wrap_Object(Lucene60PointsReader(((t_Lucene60PointsReader *) arg)->object.this$));
          }
          static PyObject *t_Lucene60PointsReader_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, Lucene60PointsReader::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_Lucene60PointsReader_init_(t_Lucene60PointsReader *self, PyObject *args, PyObject *kwds)
          {
            ::org::apache::lucene::index::SegmentReadState a0((jobject) NULL);
            Lucene60PointsReader object((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::index::SegmentReadState::initializeClass, &a0))
            {
              INT_CALL(object = Lucene60PointsReader(a0));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_Lucene60PointsReader_checkIntegrity(t_Lucene60PointsReader *self, PyObject *args)
          {

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(self->object.checkIntegrity());
              Py_RETURN_NONE;
            }

            return callSuper(PY_TYPE(Lucene60PointsReader), (PyObject *) self, "checkIntegrity", args, 2);
          }

          static PyObject *t_Lucene60PointsReader_close(t_Lucene60PointsReader *self, PyObject *args)
          {

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(self->object.close());
              Py_RETURN_NONE;
            }

            return callSuper(PY_TYPE(Lucene60PointsReader), (PyObject *) self, "close", args, 2);
          }

          static PyObject *t_Lucene60PointsReader_getValues(t_Lucene60PointsReader *self, PyObject *args)
          {
            ::java::lang::String a0((jobject) NULL);
            ::org::apache::lucene::index::PointValues result((jobject) NULL);

            if (!parseArgs(args, "s", &a0))
            {
              OBJ_CALL(result = self->object.getValues(a0));
              return ::org::apache::lucene::index::t_PointValues::wrap_Object(result);
            }

            return callSuper(PY_TYPE(Lucene60PointsReader), (PyObject *) self, "getValues", args, 2);
          }

          static PyObject *t_Lucene60PointsReader_ramBytesUsed(t_Lucene60PointsReader *self, PyObject *args)
          {
            jlong result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.ramBytesUsed());
              return PyLong_FromLongLong((PY_LONG_LONG) result);
            }

            return callSuper(PY_TYPE(Lucene60PointsReader), (PyObject *) self, "ramBytesUsed", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/codecs/simpletext/SimpleTextCompoundFormat.h"
#include "org/apache/lucene/store/IOContext.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/store/Directory.h"
#include "org/apache/lucene/codecs/CompoundDirectory.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/index/SegmentInfo.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace codecs {
        namespace simpletext {

          ::java::lang::Class *SimpleTextCompoundFormat::class$ = NULL;
          jmethodID *SimpleTextCompoundFormat::mids$ = NULL;
          bool SimpleTextCompoundFormat::live$ = false;

          jclass SimpleTextCompoundFormat::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/codecs/simpletext/SimpleTextCompoundFormat");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_f2cc1bce94666404] = env->getMethodID(cls, "<init>", "()V");
              mids$[mid_getCompoundReader_8e5fdfa35a2f9c39] = env->getMethodID(cls, "getCompoundReader", "(Lorg/apache/lucene/store/Directory;Lorg/apache/lucene/index/SegmentInfo;Lorg/apache/lucene/store/IOContext;)Lorg/apache/lucene/codecs/CompoundDirectory;");
              mids$[mid_write_42bd8d9f441f9252] = env->getMethodID(cls, "write", "(Lorg/apache/lucene/store/Directory;Lorg/apache/lucene/index/SegmentInfo;Lorg/apache/lucene/store/IOContext;)V");

              class$ = new ::java::lang::Class(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          SimpleTextCompoundFormat::SimpleTextCompoundFormat() : ::org::apache::lucene::codecs::CompoundFormat(env->newObject(initializeClass, &mids$, mid_init$_f2cc1bce94666404)) {}

          ::org::apache::lucene::codecs::CompoundDirectory SimpleTextCompoundFormat::getCompoundReader(const ::org::apache::lucene::store::Directory & a0, const ::org::apache::lucene::index::SegmentInfo & a1, const ::org::apache::lucene::store::IOContext & a2) const
          {
            return ::org::apache::lucene::codecs::CompoundDirectory(env->callObjectMethod(this$, mids$[mid_getCompoundReader_8e5fdfa35a2f9c39], a0.this$, a1.this$, a2.this$));
          }

          void SimpleTextCompoundFormat::write(const ::org::apache::lucene::store::Directory & a0, const ::org::apache::lucene::index::SegmentInfo & a1, const ::org::apache::lucene::store::IOContext & a2) const
          {
            env->callVoidMethod(this$, mids$[mid_write_42bd8d9f441f9252], a0.this$, a1.this$, a2.this$);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace codecs {
        namespace simpletext {
          static PyObject *t_SimpleTextCompoundFormat_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_SimpleTextCompoundFormat_instance_(PyTypeObject *type, PyObject *arg);
          static int t_SimpleTextCompoundFormat_init_(t_SimpleTextCompoundFormat *self, PyObject *args, PyObject *kwds);
          static PyObject *t_SimpleTextCompoundFormat_getCompoundReader(t_SimpleTextCompoundFormat *self, PyObject *args);
          static PyObject *t_SimpleTextCompoundFormat_write(t_SimpleTextCompoundFormat *self, PyObject *args);

          static PyMethodDef t_SimpleTextCompoundFormat__methods_[] = {
            DECLARE_METHOD(t_SimpleTextCompoundFormat, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_SimpleTextCompoundFormat, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_SimpleTextCompoundFormat, getCompoundReader, METH_VARARGS),
            DECLARE_METHOD(t_SimpleTextCompoundFormat, write, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          static PyType_Slot PY_TYPE_SLOTS(SimpleTextCompoundFormat)[] = {
            { Py_tp_methods, t_SimpleTextCompoundFormat__methods_ },
            { Py_tp_init, (void *) t_SimpleTextCompoundFormat_init_ },
            { 0, NULL }
          };

          static PyType_Def *PY_TYPE_BASES(SimpleTextCompoundFormat)[] = {
            &PY_TYPE_DEF(::org::apache::lucene::codecs::CompoundFormat),
            NULL
          };

          DEFINE_TYPE(SimpleTextCompoundFormat, t_SimpleTextCompoundFormat, SimpleTextCompoundFormat);

          void t_SimpleTextCompoundFormat::install(PyObject *module)
          {
            installType(&PY_TYPE(SimpleTextCompoundFormat), &PY_TYPE_DEF(SimpleTextCompoundFormat), module, "SimpleTextCompoundFormat", 0);
          }

          void t_SimpleTextCompoundFormat::initialize(PyObject *module)
          {
            PyObject_SetAttrString((PyObject *) PY_TYPE(SimpleTextCompoundFormat), "class_", make_descriptor(SimpleTextCompoundFormat::initializeClass, 1));
            PyObject_SetAttrString((PyObject *) PY_TYPE(SimpleTextCompoundFormat), "wrapfn_", make_descriptor(t_SimpleTextCompoundFormat::wrap_jobject));
            PyObject_SetAttrString((PyObject *) PY_TYPE(SimpleTextCompoundFormat), "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_SimpleTextCompoundFormat_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, SimpleTextCompoundFormat::initializeClass, 1)))
              return NULL;
            return t_SimpleTextCompoundFormat::wrap_Object(SimpleTextCompoundFormat(((t_SimpleTextCompoundFormat *) arg)->object.this$));
          }
          static PyObject *t_SimpleTextCompoundFormat_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, SimpleTextCompoundFormat::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_SimpleTextCompoundFormat_init_(t_SimpleTextCompoundFormat *self, PyObject *args, PyObject *kwds)
          {
            SimpleTextCompoundFormat object((jobject) NULL);

            INT_CALL(object = SimpleTextCompoundFormat());
            self->object = object;

            return 0;
          }

          static PyObject *t_SimpleTextCompoundFormat_getCompoundReader(t_SimpleTextCompoundFormat *self, PyObject *args)
          {
            ::org::apache::lucene::store::Directory a0((jobject) NULL);
            ::org::apache::lucene::index::SegmentInfo a1((jobject) NULL);
            ::org::apache::lucene::store::IOContext a2((jobject) NULL);
            ::org::apache::lucene::codecs::CompoundDirectory result((jobject) NULL);

            if (!parseArgs(args, "kkk", ::org::apache::lucene::store::Directory::initializeClass, ::org::apache::lucene::index::SegmentInfo::initializeClass, ::org::apache::lucene::store::IOContext::initializeClass, &a0, &a1, &a2))
            {
              OBJ_CALL(result = self->object.getCompoundReader(a0, a1, a2));
              return ::org::apache::lucene::codecs::t_CompoundDirectory::wrap_Object(result);
            }

            return callSuper(PY_TYPE(SimpleTextCompoundFormat), (PyObject *) self, "getCompoundReader", args, 2);
          }

          static PyObject *t_SimpleTextCompoundFormat_write(t_SimpleTextCompoundFormat *self, PyObject *args)
          {
            ::org::apache::lucene::store::Directory a0((jobject) NULL);
            ::org::apache::lucene::index::SegmentInfo a1((jobject) NULL);
            ::org::apache::lucene::store::IOContext a2((jobject) NULL);

            if (!parseArgs(args, "kkk", ::org::apache::lucene::store::Directory::initializeClass, ::org::apache::lucene::index::SegmentInfo::initializeClass, ::org::apache::lucene::store::IOContext::initializeClass, &a0, &a1, &a2))
            {
              OBJ_CALL(self->object.write(a0, a1, a2));
              Py_RETURN_NONE;
            }

            return callSuper(PY_TYPE(SimpleTextCompoundFormat), (PyObject *) self, "write", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queryparser/flexible/standard/processors/BooleanQuery2ModifierNodeProcessor.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/queryparser/flexible/core/QueryNodeException.h"
#include "org/apache/lucene/queryparser/flexible/core/config/QueryConfigHandler.h"
#include "org/apache/lucene/queryparser/flexible/core/nodes/QueryNode.h"
#include "org/apache/lucene/queryparser/flexible/core/processors/QueryNodeProcessor.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace standard {
            namespace processors {

              ::java::lang::Class *BooleanQuery2ModifierNodeProcessor::class$ = NULL;
              jmethodID *BooleanQuery2ModifierNodeProcessor::mids$ = NULL;
              bool BooleanQuery2ModifierNodeProcessor::live$ = false;

              jclass BooleanQuery2ModifierNodeProcessor::initializeClass(bool getOnly)
              {
                if (getOnly)
                  return (jclass) (live$ ? class$->this$ : NULL);
                if (class$ == NULL)
                {
                  jclass cls = (jclass) env->findClass("org/apache/lucene/queryparser/flexible/standard/processors/BooleanQuery2ModifierNodeProcessor");

                  mids$ = new jmethodID[max_mid];
                  mids$[mid_init$_f2cc1bce94666404] = env->getMethodID(cls, "<init>", "()V");
                  mids$[mid_getQueryConfigHandler_04fdb47806be47b9] = env->getMethodID(cls, "getQueryConfigHandler", "()Lorg/apache/lucene/queryparser/flexible/core/config/QueryConfigHandler;");
                  mids$[mid_process_9b07be8595532de7] = env->getMethodID(cls, "process", "(Lorg/apache/lucene/queryparser/flexible/core/nodes/QueryNode;)Lorg/apache/lucene/queryparser/flexible/core/nodes/QueryNode;");
                  mids$[mid_setQueryConfigHandler_ae2484f2d8820041] = env->getMethodID(cls, "setQueryConfigHandler", "(Lorg/apache/lucene/queryparser/flexible/core/config/QueryConfigHandler;)V");
                  mids$[mid_processChildren_f80bf4f68564485e] = env->getMethodID(cls, "processChildren", "(Lorg/apache/lucene/queryparser/flexible/core/nodes/QueryNode;)V");
                  mids$[mid_preProcessNode_9b07be8595532de7] = env->getMethodID(cls, "preProcessNode", "(Lorg/apache/lucene/queryparser/flexible/core/nodes/QueryNode;)Lorg/apache/lucene/queryparser/flexible/core/nodes/QueryNode;");
                  mids$[mid_postProcessNode_9b07be8595532de7] = env->getMethodID(cls, "postProcessNode", "(Lorg/apache/lucene/queryparser/flexible/core/nodes/QueryNode;)Lorg/apache/lucene/queryparser/flexible/core/nodes/QueryNode;");
                  mids$[mid_fillChildrenBufferAndApplyModifiery_f80bf4f68564485e] = env->getMethodID(cls, "fillChildrenBufferAndApplyModifiery", "(Lorg/apache/lucene/queryparser/flexible/core/nodes/QueryNode;)V");
                  mids$[mid_isDefaultBooleanQueryNode_1b9aa8e4e92416d1] = env->getMethodID(cls, "isDefaultBooleanQueryNode", "(Lorg/apache/lucene/queryparser/flexible/core/nodes/QueryNode;)Z");
                  mids$[mid_tagModifierButDoNotOverride_3dc2b67c19b336d1] = env->getMethodID(cls, "tagModifierButDoNotOverride", "(Lorg/apache/lucene/queryparser/flexible/core/nodes/QueryNode;Lorg/apache/lucene/queryparser/flexible/core/nodes/ModifierQueryNode$Modifier;)V");

                  class$ = new ::java::lang::Class(cls);
                  live$ = true;
                }
                return (jclass) class$->this$;
              }

              BooleanQuery2ModifierNodeProcessor::BooleanQuery2ModifierNodeProcessor() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_f2cc1bce94666404)) {}

              ::org::apache::lucene::queryparser::flexible::core::config::QueryConfigHandler BooleanQuery2ModifierNodeProcessor::getQueryConfigHandler() const
              {
                return ::org::apache::lucene::queryparser::flexible::core::config::QueryConfigHandler(env->callObjectMethod(this$, mids$[mid_getQueryConfigHandler_04fdb47806be47b9]));
              }

              ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode BooleanQuery2ModifierNodeProcessor::process(const ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode & a0) const
              {
                return ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode(env->callObjectMethod(this$, mids$[mid_process_9b07be8595532de7], a0.this$));
              }

              void BooleanQuery2ModifierNodeProcessor::setQueryConfigHandler(const ::org::apache::lucene::queryparser::flexible::core::config::QueryConfigHandler & a0) const
              {
                env->callVoidMethod(this$, mids$[mid_setQueryConfigHandler_ae2484f2d8820041], a0.this$);
              }
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace standard {
            namespace processors {
              static PyObject *t_BooleanQuery2ModifierNodeProcessor_cast_(PyTypeObject *type, PyObject *arg);
              static PyObject *t_BooleanQuery2ModifierNodeProcessor_instance_(PyTypeObject *type, PyObject *arg);
              static int t_BooleanQuery2ModifierNodeProcessor_init_(t_BooleanQuery2ModifierNodeProcessor *self, PyObject *args, PyObject *kwds);
              static PyObject *t_BooleanQuery2ModifierNodeProcessor_getQueryConfigHandler(t_BooleanQuery2ModifierNodeProcessor *self);
              static PyObject *t_BooleanQuery2ModifierNodeProcessor_process(t_BooleanQuery2ModifierNodeProcessor *self, PyObject *arg);
              static PyObject *t_BooleanQuery2ModifierNodeProcessor_setQueryConfigHandler(t_BooleanQuery2ModifierNodeProcessor *self, PyObject *arg);
              static PyObject *t_BooleanQuery2ModifierNodeProcessor_get__queryConfigHandler(t_BooleanQuery2ModifierNodeProcessor *self, void *data);
              static int t_BooleanQuery2ModifierNodeProcessor_set__queryConfigHandler(t_BooleanQuery2ModifierNodeProcessor *self, PyObject *arg, void *data);
              static PyGetSetDef t_BooleanQuery2ModifierNodeProcessor__fields_[] = {
                DECLARE_GETSET_FIELD(t_BooleanQuery2ModifierNodeProcessor, queryConfigHandler),
                { NULL, NULL, NULL, NULL, NULL }
              };

              static PyMethodDef t_BooleanQuery2ModifierNodeProcessor__methods_[] = {
                DECLARE_METHOD(t_BooleanQuery2ModifierNodeProcessor, cast_, METH_O | METH_CLASS),
                DECLARE_METHOD(t_BooleanQuery2ModifierNodeProcessor, instance_, METH_O | METH_CLASS),
                DECLARE_METHOD(t_BooleanQuery2ModifierNodeProcessor, getQueryConfigHandler, METH_NOARGS),
                DECLARE_METHOD(t_BooleanQuery2ModifierNodeProcessor, process, METH_O),
                DECLARE_METHOD(t_BooleanQuery2ModifierNodeProcessor, setQueryConfigHandler, METH_O),
                { NULL, NULL, 0, NULL }
              };

              static PyType_Slot PY_TYPE_SLOTS(BooleanQuery2ModifierNodeProcessor)[] = {
                { Py_tp_methods, t_BooleanQuery2ModifierNodeProcessor__methods_ },
                { Py_tp_init, (void *) t_BooleanQuery2ModifierNodeProcessor_init_ },
                { Py_tp_getset, t_BooleanQuery2ModifierNodeProcessor__fields_ },
                { 0, NULL }
              };

              static PyType_Def *PY_TYPE_BASES(BooleanQuery2ModifierNodeProcessor)[] = {
                &PY_TYPE_DEF(::java::lang::Object),
                NULL
              };

              DEFINE_TYPE(BooleanQuery2ModifierNodeProcessor, t_BooleanQuery2ModifierNodeProcessor, BooleanQuery2ModifierNodeProcessor);

              void t_BooleanQuery2ModifierNodeProcessor::install(PyObject *module)
              {
                installType(&PY_TYPE(BooleanQuery2ModifierNodeProcessor), &PY_TYPE_DEF(BooleanQuery2ModifierNodeProcessor), module, "BooleanQuery2ModifierNodeProcessor", 0);
              }

              void t_BooleanQuery2ModifierNodeProcessor::initialize(PyObject *module)
              {
                PyObject_SetAttrString((PyObject *) PY_TYPE(BooleanQuery2ModifierNodeProcessor), "class_", make_descriptor(BooleanQuery2ModifierNodeProcessor::initializeClass, 1));
                PyObject_SetAttrString((PyObject *) PY_TYPE(BooleanQuery2ModifierNodeProcessor), "wrapfn_", make_descriptor(t_BooleanQuery2ModifierNodeProcessor::wrap_jobject));
                PyObject_SetAttrString((PyObject *) PY_TYPE(BooleanQuery2ModifierNodeProcessor), "boxfn_", make_descriptor(boxObject));
              }

              static PyObject *t_BooleanQuery2ModifierNodeProcessor_cast_(PyTypeObject *type, PyObject *arg)
              {
                if (!(arg = castCheck(arg, BooleanQuery2ModifierNodeProcessor::initializeClass, 1)))
                  return NULL;
                return t_BooleanQuery2ModifierNodeProcessor::wrap_Object(BooleanQuery2ModifierNodeProcessor(((t_BooleanQuery2ModifierNodeProcessor *) arg)->object.this$));
              }
              static PyObject *t_BooleanQuery2ModifierNodeProcessor_instance_(PyTypeObject *type, PyObject *arg)
              {
                if (!castCheck(arg, BooleanQuery2ModifierNodeProcessor::initializeClass, 0))
                  Py_RETURN_FALSE;
                Py_RETURN_TRUE;
              }

              static int t_BooleanQuery2ModifierNodeProcessor_init_(t_BooleanQuery2ModifierNodeProcessor *self, PyObject *args, PyObject *kwds)
              {
                BooleanQuery2ModifierNodeProcessor object((jobject) NULL);

                INT_CALL(object = BooleanQuery2ModifierNodeProcessor());
                self->object = object;

                return 0;
              }

              static PyObject *t_BooleanQuery2ModifierNodeProcessor_getQueryConfigHandler(t_BooleanQuery2ModifierNodeProcessor *self)
              {
                ::org::apache::lucene::queryparser::flexible::core::config::QueryConfigHandler result((jobject) NULL);
                OBJ_CALL(result = self->object.getQueryConfigHandler());
                return ::org::apache::lucene::queryparser::flexible::core::config::t_QueryConfigHandler::wrap_Object(result);
              }

              static PyObject *t_BooleanQuery2ModifierNodeProcessor_process(t_BooleanQuery2ModifierNodeProcessor *self, PyObject *arg)
              {
                ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode a0((jobject) NULL);
                ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode result((jobject) NULL);

                if (!parseArg(arg, "k", ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode::initializeClass, &a0))
                {
                  OBJ_CALL(result = self->object.process(a0));
                  return ::org::apache::lucene::queryparser::flexible::core::nodes::t_QueryNode::wrap_Object(result);
                }

                PyErr_SetArgsError((PyObject *) self, "process", arg);
                return NULL;
              }

              static PyObject *t_BooleanQuery2ModifierNodeProcessor_setQueryConfigHandler(t_BooleanQuery2ModifierNodeProcessor *self, PyObject *arg)
              {
                ::org::apache::lucene::queryparser::flexible::core::config::QueryConfigHandler a0((jobject) NULL);

                if (!parseArg(arg, "k", ::org::apache::lucene::queryparser::flexible::core::config::QueryConfigHandler::initializeClass, &a0))
                {
                  OBJ_CALL(self->object.setQueryConfigHandler(a0));
                  Py_RETURN_NONE;
                }

                PyErr_SetArgsError((PyObject *) self, "setQueryConfigHandler", arg);
                return NULL;
              }

              static PyObject *t_BooleanQuery2ModifierNodeProcessor_get__queryConfigHandler(t_BooleanQuery2ModifierNodeProcessor *self, void *data)
              {
                ::org::apache::lucene::queryparser::flexible::core::config::QueryConfigHandler value((jobject) NULL);
                OBJ_CALL(value = self->object.getQueryConfigHandler());
                return ::org::apache::lucene::queryparser::flexible::core::config::t_QueryConfigHandler::wrap_Object(value);
              }
              static int t_BooleanQuery2ModifierNodeProcessor_set__queryConfigHandler(t_BooleanQuery2ModifierNodeProcessor *self, PyObject *arg, void *data)
              {
                {
                  ::org::apache::lucene::queryparser::flexible::core::config::QueryConfigHandler value((jobject) NULL);
                  if (!parseArg(arg, "k", ::org::apache::lucene::queryparser::flexible::core::config::QueryConfigHandler::initializeClass, &value))
                  {
                    INT_CALL(self->object.setQueryConfigHandler(value));
                    return 0;
                  }
                }
                PyErr_SetArgsError((PyObject *) self, "queryConfigHandler", arg);
                return -1;
              }
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/util/fst/IntsRefFSTEnum.h"
#include "org/apache/lucene/util/IntsRef.h"
#include "java/lang/Class.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/util/fst/FST.h"
#include "org/apache/lucene/util/fst/IntsRefFSTEnum$InputOutput.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        namespace fst {

          ::java::lang::Class *IntsRefFSTEnum::class$ = NULL;
          jmethodID *IntsRefFSTEnum::mids$ = NULL;
          bool IntsRefFSTEnum::live$ = false;

          jclass IntsRefFSTEnum::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/util/fst/IntsRefFSTEnum");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_1ee434f3c8d3152a] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/util/fst/FST;)V");
              mids$[mid_current_cfd1aef7dd51ca16] = env->getMethodID(cls, "current", "()Lorg/apache/lucene/util/fst/IntsRefFSTEnum$InputOutput;");
              mids$[mid_next_cfd1aef7dd51ca16] = env->getMethodID(cls, "next", "()Lorg/apache/lucene/util/fst/IntsRefFSTEnum$InputOutput;");
              mids$[mid_seekCeil_c630939200781060] = env->getMethodID(cls, "seekCeil", "(Lorg/apache/lucene/util/IntsRef;)Lorg/apache/lucene/util/fst/IntsRefFSTEnum$InputOutput;");
              mids$[mid_seekExact_c630939200781060] = env->getMethodID(cls, "seekExact", "(Lorg/apache/lucene/util/IntsRef;)Lorg/apache/lucene/util/fst/IntsRefFSTEnum$InputOutput;");
              mids$[mid_seekFloor_c630939200781060] = env->getMethodID(cls, "seekFloor", "(Lorg/apache/lucene/util/IntsRef;)Lorg/apache/lucene/util/fst/IntsRefFSTEnum$InputOutput;");
              mids$[mid_setCurrentLabel_040c4cd0390c5aff] = env->getMethodID(cls, "setCurrentLabel", "(I)V");
              mids$[mid_getCurrentLabel_9972fcc56b44e79d] = env->getMethodID(cls, "getCurrentLabel", "()I");
              mids$[mid_getTargetLabel_9972fcc56b44e79d] = env->getMethodID(cls, "getTargetLabel", "()I");
              mids$[mid_grow_f2cc1bce94666404] = env->getMethodID(cls, "grow", "()V");

              class$ = new ::java::lang::Class(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          IntsRefFSTEnum::IntsRefFSTEnum(const ::org::apache::lucene::util::fst::FST & a0) : ::org::apache::lucene::util::fst::FSTEnum(env->newObject(initializeClass, &mids$, mid_init$_1ee434f3c8d3152a, a0.this$)) {}

          ::org::apache::lucene::util::fst::IntsRefFSTEnum$InputOutput IntsRefFSTEnum::current() const
          {
            return ::org::apache::lucene::util::fst::IntsRefFSTEnum$InputOutput(env->callObjectMethod(this$, mids$[mid_current_cfd1aef7dd51ca16]));
          }

          ::org::apache::lucene::util::fst::IntsRefFSTEnum$InputOutput IntsRefFSTEnum::next() const
          {
            return ::org::apache::lucene::util::fst::IntsRefFSTEnum$InputOutput(env->callObjectMethod(this$, mids$[mid_next_cfd1aef7dd51ca16]));
          }

          ::org::apache::lucene::util::fst::IntsRefFSTEnum$InputOutput IntsRefFSTEnum::seekCeil(const ::org::apache::lucene::util::IntsRef & a0) const
          {
            return ::org::apache::lucene::util::fst::IntsRefFSTEnum$InputOutput(env->callObjectMethod(this$, mids$[mid_seekCeil_c630939200781060], a0.this$));
          }

          ::org::apache::lucene::util::fst::IntsRefFSTEnum$InputOutput IntsRefFSTEnum::seekExact(const ::org::apache::lucene::util::IntsRef & a0) const
          {
            return ::org::apache::lucene::util::fst::IntsRefFSTEnum$InputOutput(env->callObjectMethod(this$, mids$[mid_seekExact_c630939200781060], a0.this$));
          }

          ::org::apache::lucene::util::fst::IntsRefFSTEnum$InputOutput IntsRefFSTEnum::seekFloor(const ::org::apache::lucene::util::IntsRef & a0) const
          {
            return ::org::apache::lucene::util::fst::IntsRefFSTEnum$InputOutput(env->callObjectMethod(this$, mids$[mid_seekFloor_c630939200781060], a0.this$));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        namespace fst {
          static PyObject *t_IntsRefFSTEnum_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_IntsRefFSTEnum_instance_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_IntsRefFSTEnum_of_(t_IntsRefFSTEnum *self, PyObject *args);
          static int t_IntsRefFSTEnum_init_(t_IntsRefFSTEnum *self, PyObject *args, PyObject *kwds);
          static PyObject *t_IntsRefFSTEnum_current(t_IntsRefFSTEnum *self);
          static PyObject *t_IntsRefFSTEnum_next(t_IntsRefFSTEnum *self);
          static PyObject *t_IntsRefFSTEnum_seekCeil(t_IntsRefFSTEnum *self, PyObject *arg);
          static PyObject *t_IntsRefFSTEnum_seekExact(t_IntsRefFSTEnum *self, PyObject *arg);
          static PyObject *t_IntsRefFSTEnum_seekFloor(t_IntsRefFSTEnum *self, PyObject *arg);
          static PyObject *t_IntsRefFSTEnum_get__parameters_(t_IntsRefFSTEnum *self, void *data);
          static PyGetSetDef t_IntsRefFSTEnum__fields_[] = {
            DECLARE_GET_FIELD(t_IntsRefFSTEnum, parameters_),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_IntsRefFSTEnum__methods_[] = {
            DECLARE_METHOD(t_IntsRefFSTEnum, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_IntsRefFSTEnum, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_IntsRefFSTEnum, of_, METH_VARARGS),
            DECLARE_METHOD(t_IntsRefFSTEnum, current, METH_NOARGS),
            DECLARE_METHOD(t_IntsRefFSTEnum, next, METH_NOARGS),
            DECLARE_METHOD(t_IntsRefFSTEnum, seekCeil, METH_O),
            DECLARE_METHOD(t_IntsRefFSTEnum, seekExact, METH_O),
            DECLARE_METHOD(t_IntsRefFSTEnum, seekFloor, METH_O),
            { NULL, NULL, 0, NULL }
          };

          static PyType_Slot PY_TYPE_SLOTS(IntsRefFSTEnum)[] = {
            { Py_tp_methods, t_IntsRefFSTEnum__methods_ },
            { Py_tp_init, (void *) t_IntsRefFSTEnum_init_ },
            { Py_tp_getset, t_IntsRefFSTEnum__fields_ },
            { Py_tp_iter, (void *) PyObject_SelfIter },
            { Py_tp_iternext, (void *) ((PyObject *(*)(t_IntsRefFSTEnum *)) get_generic_next< t_IntsRefFSTEnum,::org::apache::lucene::util::fst::t_IntsRefFSTEnum$InputOutput,::org::apache::lucene::util::fst::IntsRefFSTEnum$InputOutput >) },
            { 0, NULL }
          };

          static PyType_Def *PY_TYPE_BASES(IntsRefFSTEnum)[] = {
            &PY_TYPE_DEF(::org::apache::lucene::util::fst::FSTEnum),
            NULL
          };

          DEFINE_TYPE(IntsRefFSTEnum, t_IntsRefFSTEnum, IntsRefFSTEnum);
          PyObject *t_IntsRefFSTEnum::wrap_Object(const IntsRefFSTEnum& object, PyTypeObject *p0)
          {
            PyObject *obj = t_IntsRefFSTEnum::wrap_Object(object);
            if (obj != NULL && obj != Py_None)
            {
              t_IntsRefFSTEnum *self = (t_IntsRefFSTEnum *) obj;
              self->parameters[0] = p0;
            }
            return obj;
          }

          PyObject *t_IntsRefFSTEnum::wrap_jobject(const jobject& object, PyTypeObject *p0)
          {
            PyObject *obj = t_IntsRefFSTEnum::wrap_jobject(object);
            if (obj != NULL && obj != Py_None)
            {
              t_IntsRefFSTEnum *self = (t_IntsRefFSTEnum *) obj;
              self->parameters[0] = p0;
            }
            return obj;
          }

          void t_IntsRefFSTEnum::install(PyObject *module)
          {
            installType(&PY_TYPE(IntsRefFSTEnum), &PY_TYPE_DEF(IntsRefFSTEnum), module, "IntsRefFSTEnum", 0);
            PyObject_SetAttrString((PyObject *) PY_TYPE(IntsRefFSTEnum), "InputOutput", make_descriptor(&PY_TYPE_DEF(IntsRefFSTEnum$InputOutput)));
          }

          void t_IntsRefFSTEnum::initialize(PyObject *module)
          {
            PyObject_SetAttrString((PyObject *) PY_TYPE(IntsRefFSTEnum), "class_", make_descriptor(IntsRefFSTEnum::initializeClass, 1));
            PyObject_SetAttrString((PyObject *) PY_TYPE(IntsRefFSTEnum), "wrapfn_", make_descriptor(t_IntsRefFSTEnum::wrap_jobject));
            PyObject_SetAttrString((PyObject *) PY_TYPE(IntsRefFSTEnum), "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_IntsRefFSTEnum_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, IntsRefFSTEnum::initializeClass, 1)))
              return NULL;
            return t_IntsRefFSTEnum::wrap_Object(IntsRefFSTEnum(((t_IntsRefFSTEnum *) arg)->object.this$));
          }
          static PyObject *t_IntsRefFSTEnum_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, IntsRefFSTEnum::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static PyObject *t_IntsRefFSTEnum_of_(t_IntsRefFSTEnum *self, PyObject *args)
          {
            if (!parseArg(args, "T", 1, &(self->parameters)))
              Py_RETURN_SELF;
            return PyErr_SetArgsError((PyObject *) self, "of_", args);
          }

          static int t_IntsRefFSTEnum_init_(t_IntsRefFSTEnum *self, PyObject *args, PyObject *kwds)
          {
            ::org::apache::lucene::util::fst::FST a0((jobject) NULL);
            PyTypeObject **p0;
            IntsRefFSTEnum object((jobject) NULL);

            if (!parseArgs(args, "K", ::org::apache::lucene::util::fst::FST::initializeClass, &a0, &p0, ::org::apache::lucene::util::fst::t_FST::parameters_))
            {
              INT_CALL(object = IntsRefFSTEnum(a0));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_IntsRefFSTEnum_current(t_IntsRefFSTEnum *self)
          {
            ::org::apache::lucene::util::fst::IntsRefFSTEnum$InputOutput result((jobject) NULL);
            OBJ_CALL(result = self->object.current());
            return ::org::apache::lucene::util::fst::t_IntsRefFSTEnum$InputOutput::wrap_Object(result, self->parameters[0]);
          }

          static PyObject *t_IntsRefFSTEnum_next(t_IntsRefFSTEnum *self)
          {
            ::org::apache::lucene::util::fst::IntsRefFSTEnum$InputOutput result((jobject) NULL);
            OBJ_CALL(result = self->object.next());
            return ::org::apache::lucene::util::fst::t_IntsRefFSTEnum$InputOutput::wrap_Object(result, self->parameters[0]);
          }

          static PyObject *t_IntsRefFSTEnum_seekCeil(t_IntsRefFSTEnum *self, PyObject *arg)
          {
            ::org::apache::lucene::util::IntsRef a0((jobject) NULL);
            ::org::apache::lucene::util::fst::IntsRefFSTEnum$InputOutput result((jobject) NULL);

            if (!parseArg(arg, "k", ::org::apache::lucene::util::IntsRef::initializeClass, &a0))
            {
              OBJ_CALL(result = self->object.seekCeil(a0));
              return ::org::apache::lucene::util::fst::t_IntsRefFSTEnum$InputOutput::wrap_Object(result, self->parameters[0]);
            }

            PyErr_SetArgsError((PyObject *) self, "seekCeil", arg);
            return NULL;
          }

          static PyObject *t_IntsRefFSTEnum_seekExact(t_IntsRefFSTEnum *self, PyObject *arg)
          {
            ::org::apache::lucene::util::IntsRef a0((jobject) NULL);
            ::org::apache::lucene::util::fst::IntsRefFSTEnum$InputOutput result((jobject) NULL);

            if (!parseArg(arg, "k", ::org::apache::lucene::util::IntsRef::initializeClass, &a0))
            {
              OBJ_CALL(result = self->object.seekExact(a0));
              return ::org::apache::lucene::util::fst::t_IntsRefFSTEnum$InputOutput::wrap_Object(result, self->parameters[0]);
            }

            PyErr_SetArgsError((PyObject *) self, "seekExact", arg);
            return NULL;
          }

          static PyObject *t_IntsRefFSTEnum_seekFloor(t_IntsRefFSTEnum *self, PyObject *arg)
          {
            ::org::apache::lucene::util::IntsRef a0((jobject) NULL);
            ::org::apache::lucene::util::fst::IntsRefFSTEnum$InputOutput result((jobject) NULL);

            if (!parseArg(arg, "k", ::org::apache::lucene::util::IntsRef::initializeClass, &a0))
            {
              OBJ_CALL(result = self->object.seekFloor(a0));
              return ::org::apache::lucene::util::fst::t_IntsRefFSTEnum$InputOutput::wrap_Object(result, self->parameters[0]);
            }

            PyErr_SetArgsError((PyObject *) self, "seekFloor", arg);
            return NULL;
          }
          static PyObject *t_IntsRefFSTEnum_get__parameters_(t_IntsRefFSTEnum *self, void *data)
          {
            return typeParameters(self->parameters, sizeof(self->parameters));
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/codecs/PointsFormat.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/codecs/PointsWriter.h"
#include "org/apache/lucene/index/SegmentReadState.h"
#include "org/apache/lucene/codecs/PointsReader.h"
#include "org/apache/lucene/codecs/PointsFormat.h"
#include "org/apache/lucene/index/SegmentWriteState.h"
#include "java/io/IOException.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace codecs {

        ::java::lang::Class *PointsFormat::class$ = NULL;
        jmethodID *PointsFormat::mids$ = NULL;
        bool PointsFormat::live$ = false;
        PointsFormat *PointsFormat::EMPTY = NULL;

        jclass PointsFormat::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/codecs/PointsFormat");

            mids$ = new jmethodID[max_mid];
            mids$[mid_fieldsReader_8abb687068409d66] = env->getMethodID(cls, "fieldsReader", "(Lorg/apache/lucene/index/SegmentReadState;)Lorg/apache/lucene/codecs/PointsReader;");
            mids$[mid_fieldsWriter_e285a7edd004a5e4] = env->getMethodID(cls, "fieldsWriter", "(Lorg/apache/lucene/index/SegmentWriteState;)Lorg/apache/lucene/codecs/PointsWriter;");

            class$ = new ::java::lang::Class(cls);
            cls = (jclass) class$->this$;

            EMPTY = new PointsFormat(env->getStaticObjectField(cls, "EMPTY", "Lorg/apache/lucene/codecs/PointsFormat;"));
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        ::org::apache::lucene::codecs::PointsReader PointsFormat::fieldsReader(const ::org::apache::lucene::index::SegmentReadState & a0) const
        {
          return ::org::apache::lucene::codecs::PointsReader(env->callObjectMethod(this$, mids$[mid_fieldsReader_8abb687068409d66], a0.this$));
        }

        ::org::apache::lucene::codecs::PointsWriter PointsFormat::fieldsWriter(const ::org::apache::lucene::index::SegmentWriteState & a0) const
        {
          return ::org::apache::lucene::codecs::PointsWriter(env->callObjectMethod(this$, mids$[mid_fieldsWriter_e285a7edd004a5e4], a0.this$));
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace codecs {
        static PyObject *t_PointsFormat_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_PointsFormat_instance_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_PointsFormat_fieldsReader(t_PointsFormat *self, PyObject *arg);
        static PyObject *t_PointsFormat_fieldsWriter(t_PointsFormat *self, PyObject *arg);

        static PyMethodDef t_PointsFormat__methods_[] = {
          DECLARE_METHOD(t_PointsFormat, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_PointsFormat, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_PointsFormat, fieldsReader, METH_O),
          DECLARE_METHOD(t_PointsFormat, fieldsWriter, METH_O),
          { NULL, NULL, 0, NULL }
        };

        static PyType_Slot PY_TYPE_SLOTS(PointsFormat)[] = {
          { Py_tp_methods, t_PointsFormat__methods_ },
          { Py_tp_init, (void *) abstract_init },
          { 0, NULL }
        };

        static PyType_Def *PY_TYPE_BASES(PointsFormat)[] = {
          &PY_TYPE_DEF(::java::lang::Object),
          NULL
        };

        DEFINE_TYPE(PointsFormat, t_PointsFormat, PointsFormat);

        void t_PointsFormat::install(PyObject *module)
        {
          installType(&PY_TYPE(PointsFormat), &PY_TYPE_DEF(PointsFormat), module, "PointsFormat", 0);
        }

        void t_PointsFormat::initialize(PyObject *module)
        {
          PyObject_SetAttrString((PyObject *) PY_TYPE(PointsFormat), "class_", make_descriptor(PointsFormat::initializeClass, 1));
          PyObject_SetAttrString((PyObject *) PY_TYPE(PointsFormat), "wrapfn_", make_descriptor(t_PointsFormat::wrap_jobject));
          PyObject_SetAttrString((PyObject *) PY_TYPE(PointsFormat), "boxfn_", make_descriptor(boxObject));
          env->getClass(PointsFormat::initializeClass);
          PyObject_SetAttrString((PyObject *) PY_TYPE(PointsFormat), "EMPTY", make_descriptor(t_PointsFormat::wrap_Object(*PointsFormat::EMPTY)));
        }

        static PyObject *t_PointsFormat_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, PointsFormat::initializeClass, 1)))
            return NULL;
          return t_PointsFormat::wrap_Object(PointsFormat(((t_PointsFormat *) arg)->object.this$));
        }
        static PyObject *t_PointsFormat_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, PointsFormat::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static PyObject *t_PointsFormat_fieldsReader(t_PointsFormat *self, PyObject *arg)
        {
          ::org::apache::lucene::index::SegmentReadState a0((jobject) NULL);
          ::org::apache::lucene::codecs::PointsReader result((jobject) NULL);

          if (!parseArg(arg, "k", ::org::apache::lucene::index::SegmentReadState::initializeClass, &a0))
          {
            OBJ_CALL(result = self->object.fieldsReader(a0));
            return ::org::apache::lucene::codecs::t_PointsReader::wrap_Object(result);
          }

          PyErr_SetArgsError((PyObject *) self, "fieldsReader", arg);
          return NULL;
        }

        static PyObject *t_PointsFormat_fieldsWriter(t_PointsFormat *self, PyObject *arg)
        {
          ::org::apache::lucene::index::SegmentWriteState a0((jobject) NULL);
          ::org::apache::lucene::codecs::PointsWriter result((jobject) NULL);

          if (!parseArg(arg, "k", ::org::apache::lucene::index::SegmentWriteState::initializeClass, &a0))
          {
            OBJ_CALL(result = self->object.fieldsWriter(a0));
            return ::org::apache::lucene::codecs::t_PointsWriter::wrap_Object(result);
          }

          PyErr_SetArgsError((PyObject *) self, "fieldsWriter", arg);
          return NULL;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queryparser/flexible/standard/nodes/PointQueryNode.h"
#include "org/apache/lucene/queryparser/flexible/core/parser/EscapeQuerySyntax.h"
#include "java/lang/Number.h"
#include "java/lang/Class.h"
#include "java/lang/String.h"
#include "java/lang/CharSequence.h"
#include "java/text/NumberFormat.h"
#include "org/apache/lucene/queryparser/flexible/core/nodes/FieldValuePairQueryNode.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace standard {
            namespace nodes {

              ::java::lang::Class *PointQueryNode::class$ = NULL;
              jmethodID *PointQueryNode::mids$ = NULL;
              bool PointQueryNode::live$ = false;

              jclass PointQueryNode::initializeClass(bool getOnly)
              {
                if (getOnly)
                  return (jclass) (live$ ? class$->this$ : NULL);
                if (class$ == NULL)
                {
                  jclass cls = (jclass) env->findClass("org/apache/lucene/queryparser/flexible/standard/nodes/PointQueryNode");

                  mids$ = new jmethodID[max_mid];
                  mids$[mid_init$_6690bc572512e4a7] = env->getMethodID(cls, "<init>", "(Ljava/lang/CharSequence;Ljava/lang/Number;Ljava/text/NumberFormat;)V");
                  mids$[mid_getField_ba44900ab7d793b9] = env->getMethodID(cls, "getField", "()Ljava/lang/CharSequence;");
                  mids$[mid_getNumberFormat_a56386c4cfd9cbe9] = env->getMethodID(cls, "getNumberFormat", "()Ljava/text/NumberFormat;");
                  mids$[mid_getValue_f5813404cc5e3a1e] = env->getMethodID(cls, "getValue", "()Ljava/lang/Number;");
                  mids$[mid_setField_4b7f5e38f806ae55] = env->getMethodID(cls, "setField", "(Ljava/lang/CharSequence;)V");
                  mids$[mid_setNumberFormat_cd4a218c853203a8] = env->getMethodID(cls, "setNumberFormat", "(Ljava/text/NumberFormat;)V");
                  mids$[mid_setValue_f5ecd8f3b63e12f5] = env->getMethodID(cls, "setValue", "(Ljava/lang/Number;)V");
                  mids$[mid_toQueryString_6bb2daa53c506f10] = env->getMethodID(cls, "toQueryString", "(Lorg/apache/lucene/queryparser/flexible/core/parser/EscapeQuerySyntax;)Ljava/lang/CharSequence;");
                  mids$[mid_toString_db9b55ba01e03e4b] = env->getMethodID(cls, "toString", "()Ljava/lang/String;");
                  mids$[mid_getTermEscaped_6bb2daa53c506f10] = env->getMethodID(cls, "getTermEscaped", "(Lorg/apache/lucene/queryparser/flexible/core/parser/EscapeQuerySyntax;)Ljava/lang/CharSequence;");

                  class$ = new ::java::lang::Class(cls);
                  live$ = true;
                }
                return (jclass) class$->this$;
              }

              PointQueryNode::PointQueryNode(const ::java::lang::CharSequence & a0, const ::java::lang::Number & a1, const ::java::text::NumberFormat & a2) : ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNodeImpl(env->newObject(initializeClass, &mids$, mid_init$_6690bc572512e4a7, a0.this$, a1.this$, a2.this$)) {}

              ::java::lang::CharSequence PointQueryNode::getField() const
              {
                return ::java::lang::CharSequence(env->callObjectMethod(this$, mids$[mid_getField_ba44900ab7d793b9]));
              }

              ::java::text::NumberFormat PointQueryNode::getNumberFormat() const
              {
                return ::java::text::NumberFormat(env->callObjectMethod(this$, mids$[mid_getNumberFormat_a56386c4cfd9cbe9]));
              }

              ::java::lang::Number PointQueryNode::getValue() const
              {
                return ::java::lang::Number(env->callObjectMethod(this$, mids$[mid_getValue_f5813404cc5e3a1e]));
              }

              void PointQueryNode::setField(const ::java::lang::CharSequence & a0) const
              {
                env->callVoidMethod(this$, mids$[mid_setField_4b7f5e38f806ae55], a0.this$);
              }

              void PointQueryNode::setNumberFormat(const ::java::text::NumberFormat & a0) const
              {
                env->callVoidMethod(this$, mids$[mid_setNumberFormat_cd4a218c853203a8], a0.this$);
              }

              void PointQueryNode::setValue(const ::java::lang::Number & a0) const
              {
                env->callVoidMethod(this$, mids$[mid_setValue_f5ecd8f3b63e12f5], a0.this$);
              }

              ::java::lang::CharSequence PointQueryNode::toQueryString(const ::org::apache::lucene::queryparser::flexible::core::parser::EscapeQuerySyntax & a0) const
              {
                return ::java::lang::CharSequence(env->callObjectMethod(this$, mids$[mid_toQueryString_6bb2daa53c506f10], a0.this$));
              }

              ::java::lang::String PointQueryNode::toString() const
              {
                return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_db9b55ba01e03e4b]));
              }
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace standard {
            namespace nodes {
              static PyObject *t_PointQueryNode_cast_(PyTypeObject *type, PyObject *arg);
              static PyObject *t_PointQueryNode_instance_(PyTypeObject *type, PyObject *arg);
              static int t_PointQueryNode_init_(t_PointQueryNode *self, PyObject *args, PyObject *kwds);
              static PyObject *t_PointQueryNode_getField(t_PointQueryNode *self);
              static PyObject *t_PointQueryNode_getNumberFormat(t_PointQueryNode *self);
              static PyObject *t_PointQueryNode_getValue(t_PointQueryNode *self);
              static PyObject *t_PointQueryNode_setField(t_PointQueryNode *self, PyObject *arg);
              static PyObject *t_PointQueryNode_setNumberFormat(t_PointQueryNode *self, PyObject *arg);
              static PyObject *t_PointQueryNode_setValue(t_PointQueryNode *self, PyObject *arg);
              static PyObject *t_PointQueryNode_toQueryString(t_PointQueryNode *self, PyObject *args);
              static PyObject *t_PointQueryNode_toString(t_PointQueryNode *self, PyObject *args);
              static PyObject *t_PointQueryNode_get__field(t_PointQueryNode *self, void *data);
              static int t_PointQueryNode_set__field(t_PointQueryNode *self, PyObject *arg, void *data);
              static PyObject *t_PointQueryNode_get__numberFormat(t_PointQueryNode *self, void *data);
              static int t_PointQueryNode_set__numberFormat(t_PointQueryNode *self, PyObject *arg, void *data);
              static PyObject *t_PointQueryNode_get__value(t_PointQueryNode *self, void *data);
              static int t_PointQueryNode_set__value(t_PointQueryNode *self, PyObject *arg, void *data);
              static PyGetSetDef t_PointQueryNode__fields_[] = {
                DECLARE_GETSET_FIELD(t_PointQueryNode, field),
                DECLARE_GETSET_FIELD(t_PointQueryNode, numberFormat),
                DECLARE_GETSET_FIELD(t_PointQueryNode, value),
                { NULL, NULL, NULL, NULL, NULL }
              };

              static PyMethodDef t_PointQueryNode__methods_[] = {
                DECLARE_METHOD(t_PointQueryNode, cast_, METH_O | METH_CLASS),
                DECLARE_METHOD(t_PointQueryNode, instance_, METH_O | METH_CLASS),
                DECLARE_METHOD(t_PointQueryNode, getField, METH_NOARGS),
                DECLARE_METHOD(t_PointQueryNode, getNumberFormat, METH_NOARGS),
                DECLARE_METHOD(t_PointQueryNode, getValue, METH_NOARGS),
                DECLARE_METHOD(t_PointQueryNode, setField, METH_O),
                DECLARE_METHOD(t_PointQueryNode, setNumberFormat, METH_O),
                DECLARE_METHOD(t_PointQueryNode, setValue, METH_O),
                DECLARE_METHOD(t_PointQueryNode, toQueryString, METH_VARARGS),
                DECLARE_METHOD(t_PointQueryNode, toString, METH_VARARGS),
                { NULL, NULL, 0, NULL }
              };

              static PyType_Slot PY_TYPE_SLOTS(PointQueryNode)[] = {
                { Py_tp_methods, t_PointQueryNode__methods_ },
                { Py_tp_init, (void *) t_PointQueryNode_init_ },
                { Py_tp_getset, t_PointQueryNode__fields_ },
                { 0, NULL }
              };

              static PyType_Def *PY_TYPE_BASES(PointQueryNode)[] = {
                &PY_TYPE_DEF(::org::apache::lucene::queryparser::flexible::core::nodes::QueryNodeImpl),
                NULL
              };

              DEFINE_TYPE(PointQueryNode, t_PointQueryNode, PointQueryNode);

              void t_PointQueryNode::install(PyObject *module)
              {
                installType(&PY_TYPE(PointQueryNode), &PY_TYPE_DEF(PointQueryNode), module, "PointQueryNode", 0);
              }

              void t_PointQueryNode::initialize(PyObject *module)
              {
                PyObject_SetAttrString((PyObject *) PY_TYPE(PointQueryNode), "class_", make_descriptor(PointQueryNode::initializeClass, 1));
                PyObject_SetAttrString((PyObject *) PY_TYPE(PointQueryNode), "wrapfn_", make_descriptor(t_PointQueryNode::wrap_jobject));
                PyObject_SetAttrString((PyObject *) PY_TYPE(PointQueryNode), "boxfn_", make_descriptor(boxObject));
              }

              static PyObject *t_PointQueryNode_cast_(PyTypeObject *type, PyObject *arg)
              {
                if (!(arg = castCheck(arg, PointQueryNode::initializeClass, 1)))
                  return NULL;
                return t_PointQueryNode::wrap_Object(PointQueryNode(((t_PointQueryNode *) arg)->object.this$));
              }
              static PyObject *t_PointQueryNode_instance_(PyTypeObject *type, PyObject *arg)
              {
                if (!castCheck(arg, PointQueryNode::initializeClass, 0))
                  Py_RETURN_FALSE;
                Py_RETURN_TRUE;
              }

              static int t_PointQueryNode_init_(t_PointQueryNode *self, PyObject *args, PyObject *kwds)
              {
                ::java::lang::CharSequence a0((jobject) NULL);
                ::java::lang::Number a1((jobject) NULL);
                ::java::text::NumberFormat a2((jobject) NULL);
                PointQueryNode object((jobject) NULL);

                if (!parseArgs(args, "OOk", ::java::lang::PY_TYPE(CharSequence), ::java::lang::PY_TYPE(Number), ::java::text::NumberFormat::initializeClass, &a0, &a1, &a2))
                {
                  INT_CALL(object = PointQueryNode(a0, a1, a2));
                  self->object = object;
                }
                else
                {
                  PyErr_SetArgsError((PyObject *) self, "__init__", args);
                  return -1;
                }

                return 0;
              }

              static PyObject *t_PointQueryNode_getField(t_PointQueryNode *self)
              {
                ::java::lang::CharSequence result((jobject) NULL);
                OBJ_CALL(result = self->object.getField());
                return ::java::lang::t_CharSequence::wrap_Object(result);
              }

              static PyObject *t_PointQueryNode_getNumberFormat(t_PointQueryNode *self)
              {
                ::java::text::NumberFormat result((jobject) NULL);
                OBJ_CALL(result = self->object.getNumberFormat());
                return ::java::text::t_NumberFormat::wrap_Object(result);
              }

              static PyObject *t_PointQueryNode_getValue(t_PointQueryNode *self)
              {
                ::java::lang::Number result((jobject) NULL);
                OBJ_CALL(result = self->object.getValue());
                return ::java::lang::t_Number::wrap_Object(result);
              }

              static PyObject *t_PointQueryNode_setField(t_PointQueryNode *self, PyObject *arg)
              {
                ::java::lang::CharSequence a0((jobject) NULL);

                if (!parseArg(arg, "O", ::java::lang::PY_TYPE(CharSequence), &a0))
                {
                  OBJ_CALL(self->object.setField(a0));
                  Py_RETURN_NONE;
                }

                PyErr_SetArgsError((PyObject *) self, "setField", arg);
                return NULL;
              }

              static PyObject *t_PointQueryNode_setNumberFormat(t_PointQueryNode *self, PyObject *arg)
              {
                ::java::text::NumberFormat a0((jobject) NULL);

                if (!parseArg(arg, "k", ::java::text::NumberFormat::initializeClass, &a0))
                {
                  OBJ_CALL(self->object.setNumberFormat(a0));
                  Py_RETURN_NONE;
                }

                PyErr_SetArgsError((PyObject *) self, "setNumberFormat", arg);
                return NULL;
              }

              static PyObject *t_PointQueryNode_setValue(t_PointQueryNode *self, PyObject *arg)
              {
                ::java::lang::Number a0((jobject) NULL);

                if (!parseArg(arg, "O", ::java::lang::PY_TYPE(Number), &a0))
                {
                  OBJ_CALL(self->object.setValue(a0));
                  Py_RETURN_NONE;
                }

                PyErr_SetArgsError((PyObject *) self, "setValue", arg);
                return NULL;
              }

              static PyObject *t_PointQueryNode_toQueryString(t_PointQueryNode *self, PyObject *args)
              {
                ::org::apache::lucene::queryparser::flexible::core::parser::EscapeQuerySyntax a0((jobject) NULL);
                ::java::lang::CharSequence result((jobject) NULL);

                if (!parseArgs(args, "k", ::org::apache::lucene::queryparser::flexible::core::parser::EscapeQuerySyntax::initializeClass, &a0))
                {
                  OBJ_CALL(result = self->object.toQueryString(a0));
                  return ::java::lang::t_CharSequence::wrap_Object(result);
                }

                return callSuper(PY_TYPE(PointQueryNode), (PyObject *) self, "toQueryString", args, 2);
              }

              static PyObject *t_PointQueryNode_toString(t_PointQueryNode *self, PyObject *args)
              {
                ::java::lang::String result((jobject) NULL);

                if (!parseArgs(args, ""))
                {
                  OBJ_CALL(result = self->object.toString());
                  return j2p(result);
                }

                return callSuper(PY_TYPE(PointQueryNode), (PyObject *) self, "toString", args, 2);
              }

              static PyObject *t_PointQueryNode_get__field(t_PointQueryNode *self, void *data)
              {
                ::java::lang::CharSequence value((jobject) NULL);
                OBJ_CALL(value = self->object.getField());
                return ::java::lang::t_CharSequence::wrap_Object(value);
              }
              static int t_PointQueryNode_set__field(t_PointQueryNode *self, PyObject *arg, void *data)
              {
                {
                  ::java::lang::CharSequence value((jobject) NULL);
                  if (!parseArg(arg, "O", ::java::lang::PY_TYPE(CharSequence), &value))
                  {
                    INT_CALL(self->object.setField(value));
                    return 0;
                  }
                }
                PyErr_SetArgsError((PyObject *) self, "field", arg);
                return -1;
              }

              static PyObject *t_PointQueryNode_get__numberFormat(t_PointQueryNode *self, void *data)
              {
                ::java::text::NumberFormat value((jobject) NULL);
                OBJ_CALL(value = self->object.getNumberFormat());
                return ::java::text::t_NumberFormat::wrap_Object(value);
              }
              static int t_PointQueryNode_set__numberFormat(t_PointQueryNode *self, PyObject *arg, void *data)
              {
                {
                  ::java::text::NumberFormat value((jobject) NULL);
                  if (!parseArg(arg, "k", ::java::text::NumberFormat::initializeClass, &value))
                  {
                    INT_CALL(self->object.setNumberFormat(value));
                    return 0;
                  }
                }
                PyErr_SetArgsError((PyObject *) self, "numberFormat", arg);
                return -1;
              }

              static PyObject *t_PointQueryNode_get__value(t_PointQueryNode *self, void *data)
              {
                ::java::lang::Number value((jobject) NULL);
                OBJ_CALL(value = self->object.getValue());
                return ::java::lang::t_Number::wrap_Object(value);
              }
              static int t_PointQueryNode_set__value(t_PointQueryNode *self, PyObject *arg, void *data)
              {
                {
                  ::java::lang::Number value((jobject) NULL);
                  if (!parseArg(arg, "O", ::java::lang::PY_TYPE(Number), &value))
                  {
                    INT_CALL(self->object.setValue(value));
                    return 0;
                  }
                }
                PyErr_SetArgsError((PyObject *) self, "value", arg);
                return -1;
              }
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queryparser/flexible/standard/builders/PointRangeQueryNodeBuilder.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/queryparser/flexible/core/QueryNodeException.h"
#include "org/apache/lucene/queryparser/flexible/standard/builders/StandardQueryBuilder.h"
#include "org/apache/lucene/queryparser/flexible/core/nodes/QueryNode.h"
#include "org/apache/lucene/search/Query.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace standard {
            namespace builders {

              ::java::lang::Class *PointRangeQueryNodeBuilder::class$ = NULL;
              jmethodID *PointRangeQueryNodeBuilder::mids$ = NULL;
              bool PointRangeQueryNodeBuilder::live$ = false;

              jclass PointRangeQueryNodeBuilder::initializeClass(bool getOnly)
              {
                if (getOnly)
                  return (jclass) (live$ ? class$->this$ : NULL);
                if (class$ == NULL)
                {
                  jclass cls = (jclass) env->findClass("org/apache/lucene/queryparser/flexible/standard/builders/PointRangeQueryNodeBuilder");

                  mids$ = new jmethodID[max_mid];
                  mids$[mid_init$_f2cc1bce94666404] = env->getMethodID(cls, "<init>", "()V");
                  mids$[mid_build_266d6dc3b958f456] = env->getMethodID(cls, "build", "(Lorg/apache/lucene/queryparser/flexible/core/nodes/QueryNode;)Lorg/apache/lucene/search/Query;");

                  class$ = new ::java::lang::Class(cls);
                  live$ = true;
                }
                return (jclass) class$->this$;
              }

              PointRangeQueryNodeBuilder::PointRangeQueryNodeBuilder() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_f2cc1bce94666404)) {}

              ::org::apache::lucene::search::Query PointRangeQueryNodeBuilder::build(const ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode & a0) const
              {
                return ::org::apache::lucene::search::Query(env->callObjectMethod(this$, mids$[mid_build_266d6dc3b958f456], a0.this$));
              }
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace standard {
            namespace builders {
              static PyObject *t_PointRangeQueryNodeBuilder_cast_(PyTypeObject *type, PyObject *arg);
              static PyObject *t_PointRangeQueryNodeBuilder_instance_(PyTypeObject *type, PyObject *arg);
              static int t_PointRangeQueryNodeBuilder_init_(t_PointRangeQueryNodeBuilder *self, PyObject *args, PyObject *kwds);
              static PyObject *t_PointRangeQueryNodeBuilder_build(t_PointRangeQueryNodeBuilder *self, PyObject *arg);

              static PyMethodDef t_PointRangeQueryNodeBuilder__methods_[] = {
                DECLARE_METHOD(t_PointRangeQueryNodeBuilder, cast_, METH_O | METH_CLASS),
                DECLARE_METHOD(t_PointRangeQueryNodeBuilder, instance_, METH_O | METH_CLASS),
                DECLARE_METHOD(t_PointRangeQueryNodeBuilder, build, METH_O),
                { NULL, NULL, 0, NULL }
              };

              static PyType_Slot PY_TYPE_SLOTS(PointRangeQueryNodeBuilder)[] = {
                { Py_tp_methods, t_PointRangeQueryNodeBuilder__methods_ },
                { Py_tp_init, (void *) t_PointRangeQueryNodeBuilder_init_ },
                { 0, NULL }
              };

              static PyType_Def *PY_TYPE_BASES(PointRangeQueryNodeBuilder)[] = {
                &PY_TYPE_DEF(::java::lang::Object),
                NULL
              };

              DEFINE_TYPE(PointRangeQueryNodeBuilder, t_PointRangeQueryNodeBuilder, PointRangeQueryNodeBuilder);

              void t_PointRangeQueryNodeBuilder::install(PyObject *module)
              {
                installType(&PY_TYPE(PointRangeQueryNodeBuilder), &PY_TYPE_DEF(PointRangeQueryNodeBuilder), module, "PointRangeQueryNodeBuilder", 0);
              }

              void t_PointRangeQueryNodeBuilder::initialize(PyObject *module)
              {
                PyObject_SetAttrString((PyObject *) PY_TYPE(PointRangeQueryNodeBuilder), "class_", make_descriptor(PointRangeQueryNodeBuilder::initializeClass, 1));
                PyObject_SetAttrString((PyObject *) PY_TYPE(PointRangeQueryNodeBuilder), "wrapfn_", make_descriptor(t_PointRangeQueryNodeBuilder::wrap_jobject));
                PyObject_SetAttrString((PyObject *) PY_TYPE(PointRangeQueryNodeBuilder), "boxfn_", make_descriptor(boxObject));
              }

              static PyObject *t_PointRangeQueryNodeBuilder_cast_(PyTypeObject *type, PyObject *arg)
              {
                if (!(arg = castCheck(arg, PointRangeQueryNodeBuilder::initializeClass, 1)))
                  return NULL;
                return t_PointRangeQueryNodeBuilder::wrap_Object(PointRangeQueryNodeBuilder(((t_PointRangeQueryNodeBuilder *) arg)->object.this$));
              }
              static PyObject *t_PointRangeQueryNodeBuilder_instance_(PyTypeObject *type, PyObject *arg)
              {
                if (!castCheck(arg, PointRangeQueryNodeBuilder::initializeClass, 0))
                  Py_RETURN_FALSE;
                Py_RETURN_TRUE;
              }

              static int t_PointRangeQueryNodeBuilder_init_(t_PointRangeQueryNodeBuilder *self, PyObject *args, PyObject *kwds)
              {
                PointRangeQueryNodeBuilder object((jobject) NULL);

                INT_CALL(object = PointRangeQueryNodeBuilder());
                self->object = object;

                return 0;
              }

              static PyObject *t_PointRangeQueryNodeBuilder_build(t_PointRangeQueryNodeBuilder *self, PyObject *arg)
              {
                ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode a0((jobject) NULL);
                ::org::apache::lucene::search::Query result((jobject) NULL);

                if (!parseArg(arg, "k", ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode::initializeClass, &a0))
                {
                  OBJ_CALL(result = self->object.build(a0));
                  return ::org::apache::lucene::search::t_Query::wrap_Object(result);
                }

                PyErr_SetArgsError((PyObject *) self, "build", arg);
                return NULL;
              }
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/store/NativeFSLockFactory.h"
#include "org/apache/lucene/store/NativeFSLockFactory.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace store {

        ::java::lang::Class *NativeFSLockFactory::class$ = NULL;
        jmethodID *NativeFSLockFactory::mids$ = NULL;
        bool NativeFSLockFactory::live$ = false;
        NativeFSLockFactory *NativeFSLockFactory::INSTANCE = NULL;

        jclass NativeFSLockFactory::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/store/NativeFSLockFactory");

            mids$ = new jmethodID[max_mid];
            mids$[mid_obtainFSLock_6e0f096ad0a821f7] = env->getMethodID(cls, "obtainFSLock", "(Lorg/apache/lucene/store/FSDirectory;Ljava/lang/String;)Lorg/apache/lucene/store/Lock;");

            class$ = new ::java::lang::Class(cls);
            cls = (jclass) class$->this$;

            INSTANCE = new NativeFSLockFactory(env->getStaticObjectField(cls, "INSTANCE", "Lorg/apache/lucene/store/NativeFSLockFactory;"));
            live$ = true;
          }
          return (jclass) class$->this$;
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace store {
        static PyObject *t_NativeFSLockFactory_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_NativeFSLockFactory_instance_(PyTypeObject *type, PyObject *arg);

        static PyMethodDef t_NativeFSLockFactory__methods_[] = {
          DECLARE_METHOD(t_NativeFSLockFactory, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_NativeFSLockFactory, instance_, METH_O | METH_CLASS),
          { NULL, NULL, 0, NULL }
        };

        static PyType_Slot PY_TYPE_SLOTS(NativeFSLockFactory)[] = {
          { Py_tp_methods, t_NativeFSLockFactory__methods_ },
          { Py_tp_init, (void *) abstract_init },
          { 0, NULL }
        };

        static PyType_Def *PY_TYPE_BASES(NativeFSLockFactory)[] = {
          &PY_TYPE_DEF(::org::apache::lucene::store::FSLockFactory),
          NULL
        };

        DEFINE_TYPE(NativeFSLockFactory, t_NativeFSLockFactory, NativeFSLockFactory);

        void t_NativeFSLockFactory::install(PyObject *module)
        {
          installType(&PY_TYPE(NativeFSLockFactory), &PY_TYPE_DEF(NativeFSLockFactory), module, "NativeFSLockFactory", 0);
        }

        void t_NativeFSLockFactory::initialize(PyObject *module)
        {
          PyObject_SetAttrString((PyObject *) PY_TYPE(NativeFSLockFactory), "class_", make_descriptor(NativeFSLockFactory::initializeClass, 1));
          PyObject_SetAttrString((PyObject *) PY_TYPE(NativeFSLockFactory), "wrapfn_", make_descriptor(t_NativeFSLockFactory::wrap_jobject));
          PyObject_SetAttrString((PyObject *) PY_TYPE(NativeFSLockFactory), "boxfn_", make_descriptor(boxObject));
          env->getClass(NativeFSLockFactory::initializeClass);
          PyObject_SetAttrString((PyObject *) PY_TYPE(NativeFSLockFactory), "INSTANCE", make_descriptor(t_NativeFSLockFactory::wrap_Object(*NativeFSLockFactory::INSTANCE)));
        }

        static PyObject *t_NativeFSLockFactory_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, NativeFSLockFactory::initializeClass, 1)))
            return NULL;
          return t_NativeFSLockFactory::wrap_Object(NativeFSLockFactory(((t_NativeFSLockFactory *) arg)->object.this$));
        }
        static PyObject *t_NativeFSLockFactory_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, NativeFSLockFactory::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/index/ReaderManager.h"
#include "org/apache/lucene/index/IndexWriter.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/index/DirectoryReader.h"
#include "org/apache/lucene/store/Directory.h"
#include "java/io/IOException.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {

        ::java::lang::Class *ReaderManager::class$ = NULL;
        jmethodID *ReaderManager::mids$ = NULL;
        bool ReaderManager::live$ = false;

        jclass ReaderManager::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/index/ReaderManager");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_5f2cd3141a26022b] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/index/DirectoryReader;)V");
            mids$[mid_init$_d99967ba03f4dedc] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/index/IndexWriter;)V");
            mids$[mid_init$_c51fd9fb1cf0392d] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/store/Directory;)V");
            mids$[mid_init$_9e4fcd7c46f55ead] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/index/IndexWriter;ZZ)V");
            mids$[mid_refreshIfNeeded_bfd9949da06c4860] = env->getMethodID(cls, "refreshIfNeeded", "(Lorg/apache/lucene/index/DirectoryReader;)Lorg/apache/lucene/index/DirectoryReader;");
            mids$[mid_tryIncRef_8be4f1fba5bf94a7] = env->getMethodID(cls, "tryIncRef", "(Lorg/apache/lucene/index/DirectoryReader;)Z");
            mids$[mid_decRef_5f2cd3141a26022b] = env->getMethodID(cls, "decRef", "(Lorg/apache/lucene/index/DirectoryReader;)V");
            mids$[mid_getRefCount_f4a60bc474d89f6a] = env->getMethodID(cls, "getRefCount", "(Lorg/apache/lucene/index/DirectoryReader;)I");

            class$ = new ::java::lang::Class(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        ReaderManager::ReaderManager(const ::org::apache::lucene::index::DirectoryReader & a0) : ::org::apache::lucene::search::ReferenceManager(env->newObject(initializeClass, &mids$, mid_init$_5f2cd3141a26022b, a0.this$)) {}

        ReaderManager::ReaderManager(const ::org::apache::lucene::index::IndexWriter & a0) : ::org::apache::lucene::search::ReferenceManager(env->newObject(initializeClass, &mids$, mid_init$_d99967ba03f4dedc, a0.this$)) {}

        ReaderManager::ReaderManager(const ::org::apache::lucene::store::Directory & a0) : ::org::apache::lucene::search::ReferenceManager(env->newObject(initializeClass, &mids$, mid_init$_c51fd9fb1cf0392d, a0.this$)) {}

        ReaderManager::ReaderManager(const ::org::apache::lucene::index::IndexWriter & a0, jboolean a1, jboolean a2) : ::org::apache::lucene::search::ReferenceManager(env->newObject(initializeClass, &mids$, mid_init$_9e4fcd7c46f55ead, a0.this$, a1, a2)) {}
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {
        static PyObject *t_ReaderManager_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_ReaderManager_instance_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_ReaderManager_of_(t_ReaderManager *self, PyObject *args);
        static int t_ReaderManager_init_(t_ReaderManager *self, PyObject *args, PyObject *kwds);
        static PyObject *t_ReaderManager_get__parameters_(t_ReaderManager *self, void *data);
        static PyGetSetDef t_ReaderManager__fields_[] = {
          DECLARE_GET_FIELD(t_ReaderManager, parameters_),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_ReaderManager__methods_[] = {
          DECLARE_METHOD(t_ReaderManager, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_ReaderManager, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_ReaderManager, of_, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        static PyType_Slot PY_TYPE_SLOTS(ReaderManager)[] = {
          { Py_tp_methods, t_ReaderManager__methods_ },
          { Py_tp_init, (void *) t_ReaderManager_init_ },
          { Py_tp_getset, t_ReaderManager__fields_ },
          { 0, NULL }
        };

        static PyType_Def *PY_TYPE_BASES(ReaderManager)[] = {
          &PY_TYPE_DEF(::org::apache::lucene::search::ReferenceManager),
          NULL
        };

        DEFINE_TYPE(ReaderManager, t_ReaderManager, ReaderManager);
        PyObject *t_ReaderManager::wrap_Object(const ReaderManager& object, PyTypeObject *p0)
        {
          PyObject *obj = t_ReaderManager::wrap_Object(object);
          if (obj != NULL && obj != Py_None)
          {
            t_ReaderManager *self = (t_ReaderManager *) obj;
            self->parameters[0] = p0;
          }
          return obj;
        }

        PyObject *t_ReaderManager::wrap_jobject(const jobject& object, PyTypeObject *p0)
        {
          PyObject *obj = t_ReaderManager::wrap_jobject(object);
          if (obj != NULL && obj != Py_None)
          {
            t_ReaderManager *self = (t_ReaderManager *) obj;
            self->parameters[0] = p0;
          }
          return obj;
        }

        void t_ReaderManager::install(PyObject *module)
        {
          installType(&PY_TYPE(ReaderManager), &PY_TYPE_DEF(ReaderManager), module, "ReaderManager", 0);
        }

        void t_ReaderManager::initialize(PyObject *module)
        {
          PyObject_SetAttrString((PyObject *) PY_TYPE(ReaderManager), "class_", make_descriptor(ReaderManager::initializeClass, 1));
          PyObject_SetAttrString((PyObject *) PY_TYPE(ReaderManager), "wrapfn_", make_descriptor(t_ReaderManager::wrap_jobject));
          PyObject_SetAttrString((PyObject *) PY_TYPE(ReaderManager), "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_ReaderManager_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, ReaderManager::initializeClass, 1)))
            return NULL;
          return t_ReaderManager::wrap_Object(ReaderManager(((t_ReaderManager *) arg)->object.this$));
        }
        static PyObject *t_ReaderManager_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, ReaderManager::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static PyObject *t_ReaderManager_of_(t_ReaderManager *self, PyObject *args)
        {
          if (!parseArg(args, "T", 1, &(self->parameters)))
            Py_RETURN_SELF;
          return PyErr_SetArgsError((PyObject *) self, "of_", args);
        }

        static int t_ReaderManager_init_(t_ReaderManager *self, PyObject *args, PyObject *kwds)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 1:
            {
              ::org::apache::lucene::index::DirectoryReader a0((jobject) NULL);
              PyTypeObject **p0;
              ReaderManager object((jobject) NULL);

              if (!parseArgs(args, "K", ::org::apache::lucene::index::DirectoryReader::initializeClass, &a0, &p0, ::org::apache::lucene::index::t_DirectoryReader::parameters_))
              {
                INT_CALL(object = ReaderManager(a0));
                self->object = object;
                self->parameters[0] = ::org::apache::lucene::index::PY_TYPE(DirectoryReader);
                break;
              }
            }
            {
              ::org::apache::lucene::index::IndexWriter a0((jobject) NULL);
              ReaderManager object((jobject) NULL);

              if (!parseArgs(args, "k", ::org::apache::lucene::index::IndexWriter::initializeClass, &a0))
              {
                INT_CALL(object = ReaderManager(a0));
                self->object = object;
                self->parameters[0] = ::org::apache::lucene::index::PY_TYPE(DirectoryReader);
                break;
              }
            }
            {
              ::org::apache::lucene::store::Directory a0((jobject) NULL);
              ReaderManager object((jobject) NULL);

              if (!parseArgs(args, "k", ::org::apache::lucene::store::Directory::initializeClass, &a0))
              {
                INT_CALL(object = ReaderManager(a0));
                self->object = object;
                self->parameters[0] = ::org::apache::lucene::index::PY_TYPE(DirectoryReader);
                break;
              }
            }
            goto err;
           case 3:
            {
              ::org::apache::lucene::index::IndexWriter a0((jobject) NULL);
              jboolean a1;
              jboolean a2;
              ReaderManager object((jobject) NULL);

              if (!parseArgs(args, "kZZ", ::org::apache::lucene::index::IndexWriter::initializeClass, &a0, &a1, &a2))
              {
                INT_CALL(object = ReaderManager(a0, a1, a2));
                self->object = object;
                self->parameters[0] = ::org::apache::lucene::index::PY_TYPE(DirectoryReader);
                break;
              }
            }
           default:
           err:
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }
        static PyObject *t_ReaderManager_get__parameters_(t_ReaderManager *self, void *data)
        {
          return typeParameters(self->parameters, sizeof(self->parameters));
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/spans/TermSpans.h"
#include "org/apache/lucene/index/Term.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/index/PostingsEnum.h"
#include "java/lang/String.h"
#include "org/apache/lucene/search/spans/SpanCollector.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/search/LeafSimScorer.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace spans {

          ::java::lang::Class *TermSpans::class$ = NULL;
          jmethodID *TermSpans::mids$ = NULL;
          bool TermSpans::live$ = false;

          jclass TermSpans::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/search/spans/TermSpans");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_7c1f9da66d9024d7] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/search/LeafSimScorer;Lorg/apache/lucene/index/PostingsEnum;Lorg/apache/lucene/index/Term;F)V");
              mids$[mid_advance_1e143afe1894d213] = env->getMethodID(cls, "advance", "(I)I");
              mids$[mid_collect_810c6539c62abcf6] = env->getMethodID(cls, "collect", "(Lorg/apache/lucene/search/spans/SpanCollector;)V");
              mids$[mid_cost_2e5ae9edcb9b072f] = env->getMethodID(cls, "cost", "()J");
              mids$[mid_docID_9972fcc56b44e79d] = env->getMethodID(cls, "docID", "()I");
              mids$[mid_endPosition_9972fcc56b44e79d] = env->getMethodID(cls, "endPosition", "()I");
              mids$[mid_getPostings_f6f6440dd886c6cd] = env->getMethodID(cls, "getPostings", "()Lorg/apache/lucene/index/PostingsEnum;");
              mids$[mid_nextDoc_9972fcc56b44e79d] = env->getMethodID(cls, "nextDoc", "()I");
              mids$[mid_nextStartPosition_9972fcc56b44e79d] = env->getMethodID(cls, "nextStartPosition", "()I");
              mids$[mid_positionsCost_58aec2b64dff50c8] = env->getMethodID(cls, "positionsCost", "()F");
              mids$[mid_startPosition_9972fcc56b44e79d] = env->getMethodID(cls, "startPosition", "()I");
              mids$[mid_toString_db9b55ba01e03e4b] = env->getMethodID(cls, "toString", "()Ljava/lang/String;");
              mids$[mid_width_9972fcc56b44e79d] = env->getMethodID(cls, "width", "()I");

              class$ = new ::java::lang::Class(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          TermSpans::TermSpans(const ::org::apache::lucene::search::LeafSimScorer & a0, const ::org::apache::lucene::index::PostingsEnum & a1, const ::org::apache::lucene::index::Term & a2, jfloat a3) : ::org::apache::lucene::search::spans::Spans(env->newObject(initializeClass, &mids$, mid_init$_7c1f9da66d9024d7, a0.this$, a1.this$, a2.this$, a3)) {}

          jint TermSpans::advance(jint a0) const
          {
            return env->callIntMethod(this$, mids$[mid_advance_1e143afe1894d213], a0);
          }

          void TermSpans::collect(const ::org::apache::lucene::search::spans::SpanCollector & a0) const
          {
            env->callVoidMethod(this$, mids$[mid_collect_810c6539c62abcf6], a0.this$);
          }

          jlong TermSpans::cost() const
          {
            return env->callLongMethod(this$, mids$[mid_cost_2e5ae9edcb9b072f]);
          }

          jint TermSpans::docID() const
          {
            return env->callIntMethod(this$, mids$[mid_docID_9972fcc56b44e79d]);
          }

          jint TermSpans::endPosition() const
          {
            return env->callIntMethod(this$, mids$[mid_endPosition_9972fcc56b44e79d]);
          }

          ::org::apache::lucene::index::PostingsEnum TermSpans::getPostings() const
          {
            return ::org::apache::lucene::index::PostingsEnum(env->callObjectMethod(this$, mids$[mid_getPostings_f6f6440dd886c6cd]));
          }

          jint TermSpans::nextDoc() const
          {
            return env->callIntMethod(this$, mids$[mid_nextDoc_9972fcc56b44e79d]);
          }

          jint TermSpans::nextStartPosition() const
          {
            return env->callIntMethod(this$, mids$[mid_nextStartPosition_9972fcc56b44e79d]);
          }

          jfloat TermSpans::positionsCost() const
          {
            return env->callFloatMethod(this$, mids$[mid_positionsCost_58aec2b64dff50c8]);
          }

          jint TermSpans::startPosition() const
          {
            return env->callIntMethod(this$, mids$[mid_startPosition_9972fcc56b44e79d]);
          }

          ::java::lang::String TermSpans::toString() const
          {
            return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_db9b55ba01e03e4b]));
          }

          jint TermSpans::width() const
          {
            return env->callIntMethod(this$, mids$[mid_width_9972fcc56b44e79d]);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace spans {
          static PyObject *t_TermSpans_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_TermSpans_instance_(PyTypeObject *type, PyObject *arg);
          static int t_TermSpans_init_(t_TermSpans *self, PyObject *args, PyObject *kwds);
          static PyObject *t_TermSpans_advance(t_TermSpans *self, PyObject *args);
          static PyObject *t_TermSpans_collect(t_TermSpans *self, PyObject *args);
          static PyObject *t_TermSpans_cost(t_TermSpans *self, PyObject *args);
          static PyObject *t_TermSpans_docID(t_TermSpans *self, PyObject *args);
          static PyObject *t_TermSpans_endPosition(t_TermSpans *self, PyObject *args);
          static PyObject *t_TermSpans_getPostings(t_TermSpans *self);
          static PyObject *t_TermSpans_nextDoc(t_TermSpans *self, PyObject *args);
          static PyObject *t_TermSpans_nextStartPosition(t_TermSpans *self, PyObject *args);
          static PyObject *t_TermSpans_positionsCost(t_TermSpans *self, PyObject *args);
          static PyObject *t_TermSpans_startPosition(t_TermSpans *self, PyObject *args);
          static PyObject *t_TermSpans_toString(t_TermSpans *self, PyObject *args);
          static PyObject *t_TermSpans_width(t_TermSpans *self, PyObject *args);
          static PyObject *t_TermSpans_get__postings(t_TermSpans *self, void *data);
          static PyGetSetDef t_TermSpans__fields_[] = {
            DECLARE_GET_FIELD(t_TermSpans, postings),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_TermSpans__methods_[] = {
            DECLARE_METHOD(t_TermSpans, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_TermSpans, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_TermSpans, advance, METH_VARARGS),
            DECLARE_METHOD(t_TermSpans, collect, METH_VARARGS),
            DECLARE_METHOD(t_TermSpans, cost, METH_VARARGS),
            DECLARE_METHOD(t_TermSpans, docID, METH_VARARGS),
            DECLARE_METHOD(t_TermSpans, endPosition, METH_VARARGS),
            DECLARE_METHOD(t_TermSpans, getPostings, METH_NOARGS),
            DECLARE_METHOD(t_TermSpans, nextDoc, METH_VARARGS),
            DECLARE_METHOD(t_TermSpans, nextStartPosition, METH_VARARGS),
            DECLARE_METHOD(t_TermSpans, positionsCost, METH_VARARGS),
            DECLARE_METHOD(t_TermSpans, startPosition, METH_VARARGS),
            DECLARE_METHOD(t_TermSpans, toString, METH_VARARGS),
            DECLARE_METHOD(t_TermSpans, width, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          static PyType_Slot PY_TYPE_SLOTS(TermSpans)[] = {
            { Py_tp_methods, t_TermSpans__methods_ },
            { Py_tp_init, (void *) t_TermSpans_init_ },
            { Py_tp_getset, t_TermSpans__fields_ },
            { 0, NULL }
          };

          static PyType_Def *PY_TYPE_BASES(TermSpans)[] = {
            &PY_TYPE_DEF(::org::apache::lucene::search::spans::Spans),
            NULL
          };

          DEFINE_TYPE(TermSpans, t_TermSpans, TermSpans);

          void t_TermSpans::install(PyObject *module)
          {
            installType(&PY_TYPE(TermSpans), &PY_TYPE_DEF(TermSpans), module, "TermSpans", 0);
          }

          void t_TermSpans::initialize(PyObject *module)
          {
            PyObject_SetAttrString((PyObject *) PY_TYPE(TermSpans), "class_", make_descriptor(TermSpans::initializeClass, 1));
            PyObject_SetAttrString((PyObject *) PY_TYPE(TermSpans), "wrapfn_", make_descriptor(t_TermSpans::wrap_jobject));
            PyObject_SetAttrString((PyObject *) PY_TYPE(TermSpans), "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_TermSpans_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, TermSpans::initializeClass, 1)))
              return NULL;
            return t_TermSpans::wrap_Object(TermSpans(((t_TermSpans *) arg)->object.this$));
          }
          static PyObject *t_TermSpans_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, TermSpans::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_TermSpans_init_(t_TermSpans *self, PyObject *args, PyObject *kwds)
          {
            ::org::apache::lucene::search::LeafSimScorer a0((jobject) NULL);
            ::org::apache::lucene::index::PostingsEnum a1((jobject) NULL);
            ::org::apache::lucene::index::Term a2((jobject) NULL);
            jfloat a3;
            TermSpans object((jobject) NULL);

            if (!parseArgs(args, "kkkF", ::org::apache::lucene::search::LeafSimScorer::initializeClass, ::org::apache::lucene::index::PostingsEnum::initializeClass, ::org::apache::lucene::index::Term::initializeClass, &a0, &a1, &a2, &a3))
            {
              INT_CALL(object = TermSpans(a0, a1, a2, a3));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_TermSpans_advance(t_TermSpans *self, PyObject *args)
          {
            jint a0;
            jint result;

            if (!parseArgs(args, "I", &a0))
            {
              OBJ_CALL(result = self->object.advance(a0));
              return PyLong_FromLong((long) result);
            }

            return callSuper(PY_TYPE(TermSpans), (PyObject *) self, "advance", args, 2);
          }

          static PyObject *t_TermSpans_collect(t_TermSpans *self, PyObject *args)
          {
            ::org::apache::lucene::search::spans::SpanCollector a0((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::search::spans::SpanCollector::initializeClass, &a0))
            {
              OBJ_CALL(self->object.collect(a0));
              Py_RETURN_NONE;
            }

            return callSuper(PY_TYPE(TermSpans), (PyObject *) self, "collect", args, 2);
          }

          static PyObject *t_TermSpans_cost(t_TermSpans *self, PyObject *args)
          {
            jlong result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.cost());
              return PyLong_FromLongLong((PY_LONG_LONG) result);
            }

            return callSuper(PY_TYPE(TermSpans), (PyObject *) self, "cost", args, 2);
          }

          static PyObject *t_TermSpans_docID(t_TermSpans *self, PyObject *args)
          {
            jint result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.docID());
              return PyLong_FromLong((long) result);
            }

            return callSuper(PY_TYPE(TermSpans), (PyObject *) self, "docID", args, 2);
          }

          static PyObject *t_TermSpans_endPosition(t_TermSpans *self, PyObject *args)
          {
            jint result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.endPosition());
              return PyLong_FromLong((long) result);
            }

            return callSuper(PY_TYPE(TermSpans), (PyObject *) self, "endPosition", args, 2);
          }

          static PyObject *t_TermSpans_getPostings(t_TermSpans *self)
          {
            ::org::apache::lucene::index::PostingsEnum result((jobject) NULL);
            OBJ_CALL(result = self->object.getPostings());
            return ::org::apache::lucene::index::t_PostingsEnum::wrap_Object(result);
          }

          static PyObject *t_TermSpans_nextDoc(t_TermSpans *self, PyObject *args)
          {
            jint result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.nextDoc());
              return PyLong_FromLong((long) result);
            }

            return callSuper(PY_TYPE(TermSpans), (PyObject *) self, "nextDoc", args, 2);
          }

          static PyObject *t_TermSpans_nextStartPosition(t_TermSpans *self, PyObject *args)
          {
            jint result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.nextStartPosition());
              return PyLong_FromLong((long) result);
            }

            return callSuper(PY_TYPE(TermSpans), (PyObject *) self, "nextStartPosition", args, 2);
          }

          static PyObject *t_TermSpans_positionsCost(t_TermSpans *self, PyObject *args)
          {
            jfloat result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.positionsCost());
              return PyFloat_FromDouble((double) result);
            }

            return callSuper(PY_TYPE(TermSpans), (PyObject *) self, "positionsCost", args, 2);
          }

          static PyObject *t_TermSpans_startPosition(t_TermSpans *self, PyObject *args)
          {
            jint result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.startPosition());
              return PyLong_FromLong((long) result);
            }

            return callSuper(PY_TYPE(TermSpans), (PyObject *) self, "startPosition", args, 2);
          }

          static PyObject *t_TermSpans_toString(t_TermSpans *self, PyObject *args)
          {
            ::java::lang::String result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.toString());
              return j2p(result);
            }

            return callSuper(PY_TYPE(TermSpans), (PyObject *) self, "toString", args, 2);
          }

          static PyObject *t_TermSpans_width(t_TermSpans *self, PyObject *args)
          {
            jint result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.width());
              return PyLong_FromLong((long) result);
            }

            return callSuper(PY_TYPE(TermSpans), (PyObject *) self, "width", args, 2);
          }

          static PyObject *t_TermSpans_get__postings(t_TermSpans *self, void *data)
          {
            ::org::apache::lucene::index::PostingsEnum value((jobject) NULL);
            OBJ_CALL(value = self->object.getPostings());
            return ::org::apache::lucene::index::t_PostingsEnum::wrap_Object(value);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/fa/PersianNormalizer.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace fa {

          ::java::lang::Class *PersianNormalizer::class$ = NULL;
          jmethodID *PersianNormalizer::mids$ = NULL;
          bool PersianNormalizer::live$ = false;
          jchar PersianNormalizer::FARSI_YEH = (jchar) 0;
          jchar PersianNormalizer::HAMZA_ABOVE = (jchar) 0;
          jchar PersianNormalizer::HEH = (jchar) 0;
          jchar PersianNormalizer::HEH_GOAL = (jchar) 0;
          jchar PersianNormalizer::HEH_YEH = (jchar) 0;
          jchar PersianNormalizer::KAF = (jchar) 0;
          jchar PersianNormalizer::KEHEH = (jchar) 0;
          jchar PersianNormalizer::YEH = (jchar) 0;
          jchar PersianNormalizer::YEH_BARREE = (jchar) 0;

          jclass PersianNormalizer::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/fa/PersianNormalizer");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_f2cc1bce94666404] = env->getMethodID(cls, "<init>", "()V");
              mids$[mid_normalize_d4655f2a19359017] = env->getMethodID(cls, "normalize", "([CI)I");

              class$ = new ::java::lang::Class(cls);
              cls = (jclass) class$->this$;

              FARSI_YEH = env->getStaticCharField(cls, "FARSI_YEH");
              HAMZA_ABOVE = env->getStaticCharField(cls, "HAMZA_ABOVE");
              HEH = env->getStaticCharField(cls, "HEH");
              HEH_GOAL = env->getStaticCharField(cls, "HEH_GOAL");
              HEH_YEH = env->getStaticCharField(cls, "HEH_YEH");
              KAF = env->getStaticCharField(cls, "KAF");
              KEHEH = env->getStaticCharField(cls, "KEHEH");
              YEH = env->getStaticCharField(cls, "YEH");
              YEH_BARREE = env->getStaticCharField(cls, "YEH_BARREE");
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          PersianNormalizer::PersianNormalizer() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_f2cc1bce94666404)) {}

          jint PersianNormalizer::normalize(const JArray< jchar > & a0, jint a1) const
          {
            return env->callIntMethod(this$, mids$[mid_normalize_d4655f2a19359017], a0.this$, a1);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace fa {
          static PyObject *t_PersianNormalizer_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_PersianNormalizer_instance_(PyTypeObject *type, PyObject *arg);
          static int t_PersianNormalizer_init_(t_PersianNormalizer *self, PyObject *args, PyObject *kwds);
          static PyObject *t_PersianNormalizer_normalize(t_PersianNormalizer *self, PyObject *args);

          static PyMethodDef t_PersianNormalizer__methods_[] = {
            DECLARE_METHOD(t_PersianNormalizer, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_PersianNormalizer, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_PersianNormalizer, normalize, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          static PyType_Slot PY_TYPE_SLOTS(PersianNormalizer)[] = {
            { Py_tp_methods, t_PersianNormalizer__methods_ },
            { Py_tp_init, (void *) t_PersianNormalizer_init_ },
            { 0, NULL }
          };

          static PyType_Def *PY_TYPE_BASES(PersianNormalizer)[] = {
            &PY_TYPE_DEF(::java::lang::Object),
            NULL
          };

          DEFINE_TYPE(PersianNormalizer, t_PersianNormalizer, PersianNormalizer);

          void t_PersianNormalizer::install(PyObject *module)
          {
            installType(&PY_TYPE(PersianNormalizer), &PY_TYPE_DEF(PersianNormalizer), module, "PersianNormalizer", 0);
          }

          void t_PersianNormalizer::initialize(PyObject *module)
          {
            PyObject_SetAttrString((PyObject *) PY_TYPE(PersianNormalizer), "class_", make_descriptor(PersianNormalizer::initializeClass, 1));
            PyObject_SetAttrString((PyObject *) PY_TYPE(PersianNormalizer), "wrapfn_", make_descriptor(t_PersianNormalizer::wrap_jobject));
            PyObject_SetAttrString((PyObject *) PY_TYPE(PersianNormalizer), "boxfn_", make_descriptor(boxObject));
            env->getClass(PersianNormalizer::initializeClass);
            PyObject_SetAttrString((PyObject *) PY_TYPE(PersianNormalizer), "FARSI_YEH", make_descriptor(PersianNormalizer::FARSI_YEH));
            PyObject_SetAttrString((PyObject *) PY_TYPE(PersianNormalizer), "HAMZA_ABOVE", make_descriptor(PersianNormalizer::HAMZA_ABOVE));
            PyObject_SetAttrString((PyObject *) PY_TYPE(PersianNormalizer), "HEH", make_descriptor(PersianNormalizer::HEH));
            PyObject_SetAttrString((PyObject *) PY_TYPE(PersianNormalizer), "HEH_GOAL", make_descriptor(PersianNormalizer::HEH_GOAL));
            PyObject_SetAttrString((PyObject *) PY_TYPE(PersianNormalizer), "HEH_YEH", make_descriptor(PersianNormalizer::HEH_YEH));
            PyObject_SetAttrString((PyObject *) PY_TYPE(PersianNormalizer), "KAF", make_descriptor(PersianNormalizer::KAF));
            PyObject_SetAttrString((PyObject *) PY_TYPE(PersianNormalizer), "KEHEH", make_descriptor(PersianNormalizer::KEHEH));
            PyObject_SetAttrString((PyObject *) PY_TYPE(PersianNormalizer), "YEH", make_descriptor(PersianNormalizer::YEH));
            PyObject_SetAttrString((PyObject *) PY_TYPE(PersianNormalizer), "YEH_BARREE", make_descriptor(PersianNormalizer::YEH_BARREE));
          }

          static PyObject *t_PersianNormalizer_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, PersianNormalizer::initializeClass, 1)))
              return NULL;
            return t_PersianNormalizer::wrap_Object(PersianNormalizer(((t_PersianNormalizer *) arg)->object.this$));
          }
          static PyObject *t_PersianNormalizer_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, PersianNormalizer::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_PersianNormalizer_init_(t_PersianNormalizer *self, PyObject *args, PyObject *kwds)
          {
            PersianNormalizer object((jobject) NULL);

            INT_CALL(object = PersianNormalizer());
            self->object = object;

            return 0;
          }

          static PyObject *t_PersianNormalizer_normalize(t_PersianNormalizer *self, PyObject *args)
          {
            JArray< jchar > a0((jobject) NULL);
            jint a1;
            jint result;

            if (!parseArgs(args, "[CI", &a0, &a1))
            {
              OBJ_CALL(result = self->object.normalize(a0, a1));
              return PyLong_FromLong((long) result);
            }

            PyErr_SetArgsError((PyObject *) self, "normalize", args);
            return NULL;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/tr/TurkishLowerCaseFilterFactory.h"
#include "java/util/Map.h"
#include "java/lang/String.h"
#include "org/apache/lucene/analysis/TokenStream.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace tr {

          ::java::lang::Class *TurkishLowerCaseFilterFactory::class$ = NULL;
          jmethodID *TurkishLowerCaseFilterFactory::mids$ = NULL;
          bool TurkishLowerCaseFilterFactory::live$ = false;
          ::java::lang::String *TurkishLowerCaseFilterFactory::NAME = NULL;

          jclass TurkishLowerCaseFilterFactory::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/tr/TurkishLowerCaseFilterFactory");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_408bd889ee3beae5] = env->getMethodID(cls, "<init>", "(Ljava/util/Map;)V");
              mids$[mid_create_6de1e28d9d10cd9e] = env->getMethodID(cls, "create", "(Lorg/apache/lucene/analysis/TokenStream;)Lorg/apache/lucene/analysis/TokenStream;");
              mids$[mid_normalize_6de1e28d9d10cd9e] = env->getMethodID(cls, "normalize", "(Lorg/apache/lucene/analysis/TokenStream;)Lorg/apache/lucene/analysis/TokenStream;");

              class$ = new ::java::lang::Class(cls);
              cls = (jclass) class$->this$;

              NAME = new ::java::lang::String(env->getStaticObjectField(cls, "NAME", "Ljava/lang/String;"));
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          TurkishLowerCaseFilterFactory::TurkishLowerCaseFilterFactory(const ::java::util::Map & a0) : ::org::apache::lucene::analysis::util::TokenFilterFactory(env->newObject(initializeClass, &mids$, mid_init$_408bd889ee3beae5, a0.this$)) {}

          ::org::apache::lucene::analysis::TokenStream TurkishLowerCaseFilterFactory::create(const ::org::apache::lucene::analysis::TokenStream & a0) const
          {
            return ::org::apache::lucene::analysis::TokenStream(env->callObjectMethod(this$, mids$[mid_create_6de1e28d9d10cd9e], a0.this$));
          }

          ::org::apache::lucene::analysis::TokenStream TurkishLowerCaseFilterFactory::normalize(const ::org::apache::lucene::analysis::TokenStream & a0) const
          {
            return ::org::apache::lucene::analysis::TokenStream(env->callObjectMethod(this$, mids$[mid_normalize_6de1e28d9d10cd9e], a0.this$));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace tr {
          static PyObject *t_TurkishLowerCaseFilterFactory_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_TurkishLowerCaseFilterFactory_instance_(PyTypeObject *type, PyObject *arg);
          static int t_TurkishLowerCaseFilterFactory_init_(t_TurkishLowerCaseFilterFactory *self, PyObject *args, PyObject *kwds);
          static PyObject *t_TurkishLowerCaseFilterFactory_create(t_TurkishLowerCaseFilterFactory *self, PyObject *args);
          static PyObject *t_TurkishLowerCaseFilterFactory_normalize(t_TurkishLowerCaseFilterFactory *self, PyObject *args);

          static PyMethodDef t_TurkishLowerCaseFilterFactory__methods_[] = {
            DECLARE_METHOD(t_TurkishLowerCaseFilterFactory, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_TurkishLowerCaseFilterFactory, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_TurkishLowerCaseFilterFactory, create, METH_VARARGS),
            DECLARE_METHOD(t_TurkishLowerCaseFilterFactory, normalize, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          static PyType_Slot PY_TYPE_SLOTS(TurkishLowerCaseFilterFactory)[] = {
            { Py_tp_methods, t_TurkishLowerCaseFilterFactory__methods_ },
            { Py_tp_init, (void *) t_TurkishLowerCaseFilterFactory_init_ },
            { 0, NULL }
          };

          static PyType_Def *PY_TYPE_BASES(TurkishLowerCaseFilterFactory)[] = {
            &PY_TYPE_DEF(::org::apache::lucene::analysis::util::TokenFilterFactory),
            NULL
          };

          DEFINE_TYPE(TurkishLowerCaseFilterFactory, t_TurkishLowerCaseFilterFactory, TurkishLowerCaseFilterFactory);

          void t_TurkishLowerCaseFilterFactory::install(PyObject *module)
          {
            installType(&PY_TYPE(TurkishLowerCaseFilterFactory), &PY_TYPE_DEF(TurkishLowerCaseFilterFactory), module, "TurkishLowerCaseFilterFactory", 0);
          }

          void t_TurkishLowerCaseFilterFactory::initialize(PyObject *module)
          {
            PyObject_SetAttrString((PyObject *) PY_TYPE(TurkishLowerCaseFilterFactory), "class_", make_descriptor(TurkishLowerCaseFilterFactory::initializeClass, 1));
            PyObject_SetAttrString((PyObject *) PY_TYPE(TurkishLowerCaseFilterFactory), "wrapfn_", make_descriptor(t_TurkishLowerCaseFilterFactory::wrap_jobject));
            PyObject_SetAttrString((PyObject *) PY_TYPE(TurkishLowerCaseFilterFactory), "boxfn_", make_descriptor(boxObject));
            env->getClass(TurkishLowerCaseFilterFactory::initializeClass);
            PyObject_SetAttrString((PyObject *) PY_TYPE(TurkishLowerCaseFilterFactory), "NAME", make_descriptor(j2p(*TurkishLowerCaseFilterFactory::NAME)));
          }

          static PyObject *t_TurkishLowerCaseFilterFactory_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, TurkishLowerCaseFilterFactory::initializeClass, 1)))
              return NULL;
            return t_TurkishLowerCaseFilterFactory::wrap_Object(TurkishLowerCaseFilterFactory(((t_TurkishLowerCaseFilterFactory *) arg)->object.this$));
          }
          static PyObject *t_TurkishLowerCaseFilterFactory_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, TurkishLowerCaseFilterFactory::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_TurkishLowerCaseFilterFactory_init_(t_TurkishLowerCaseFilterFactory *self, PyObject *args, PyObject *kwds)
          {
            ::java::util::Map a0((jobject) NULL);
            PyTypeObject **p0;
            TurkishLowerCaseFilterFactory object((jobject) NULL);

            if (!parseArgs(args, "K", ::java::util::Map::initializeClass, &a0, &p0, ::java::util::t_Map::parameters_))
            {
              INT_CALL(object = TurkishLowerCaseFilterFactory(a0));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_TurkishLowerCaseFilterFactory_create(t_TurkishLowerCaseFilterFactory *self, PyObject *args)
          {
            ::org::apache::lucene::analysis::TokenStream a0((jobject) NULL);
            ::org::apache::lucene::analysis::TokenStream result((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::analysis::TokenStream::initializeClass, &a0))
            {
              OBJ_CALL(result = self->object.create(a0));
              return ::org::apache::lucene::analysis::t_TokenStream::wrap_Object(result);
            }

            return callSuper(PY_TYPE(TurkishLowerCaseFilterFactory), (PyObject *) self, "create", args, 2);
          }

          static PyObject *t_TurkishLowerCaseFilterFactory_normalize(t_TurkishLowerCaseFilterFactory *self, PyObject *args)
          {
            ::org::apache::lucene::analysis::TokenStream a0((jobject) NULL);
            ::org::apache::lucene::analysis::TokenStream result((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::analysis::TokenStream::initializeClass, &a0))
            {
              OBJ_CALL(result = self->object.normalize(a0));
              return ::org::apache::lucene::analysis::t_TokenStream::wrap_Object(result);
            }

            return callSuper(PY_TYPE(TurkishLowerCaseFilterFactory), (PyObject *) self, "normalize", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queryparser/flexible/core/nodes/QueryNode.h"
#include "org/apache/lucene/queryparser/flexible/core/parser/EscapeQuerySyntax.h"
#include "java/util/Map.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/queryparser/flexible/core/nodes/QueryNode.h"
#include "java/lang/String.h"
#include "java/lang/CharSequence.h"
#include "java/util/List.h"
#include "java/lang/CloneNotSupportedException.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace core {
            namespace nodes {

              ::java::lang::Class *QueryNode::class$ = NULL;
              jmethodID *QueryNode::mids$ = NULL;
              bool QueryNode::live$ = false;

              jclass QueryNode::initializeClass(bool getOnly)
              {
                if (getOnly)
                  return (jclass) (live$ ? class$->this$ : NULL);
                if (class$ == NULL)
                {
                  jclass cls = (jclass) env->findClass("org/apache/lucene/queryparser/flexible/core/nodes/QueryNode");

                  mids$ = new jmethodID[max_mid];
                  mids$[mid_add_d03990be0130160d] = env->getMethodID(cls, "add", "(Ljava/util/List;)V");
                  mids$[mid_add_f80bf4f68564485e] = env->getMethodID(cls, "add", "(Lorg/apache/lucene/queryparser/flexible/core/nodes/QueryNode;)V");
                  mids$[mid_cloneTree_7f4134ae4682ace0] = env->getMethodID(cls, "cloneTree", "()Lorg/apache/lucene/queryparser/flexible/core/nodes/QueryNode;");
                  mids$[mid_containsTag_145b2d0af0c06b93] = env->getMethodID(cls, "containsTag", "(Ljava/lang/String;)Z");
                  mids$[mid_getChildren_49ec78390f08338a] = env->getMethodID(cls, "getChildren", "()Ljava/util/List;");
                  mids$[mid_getParent_7f4134ae4682ace0] = env->getMethodID(cls, "getParent", "()Lorg/apache/lucene/queryparser/flexible/core/nodes/QueryNode;");
                  mids$[mid_getTag_c0a3c3394484d296] = env->getMethodID(cls, "getTag", "(Ljava/lang/String;)Ljava/lang/Object;");
                  mids$[mid_getTagMap_1c3426541413a55d] = env->getMethodID(cls, "getTagMap", "()Ljava/util/Map;");
                  mids$[mid_isLeaf_8454bd5aa23fd11e] = env->getMethodID(cls, "isLeaf", "()Z");
                  mids$[mid_removeChildren_f80bf4f68564485e] = env->getMethodID(cls, "removeChildren", "(Lorg/apache/lucene/queryparser/flexible/core/nodes/QueryNode;)V");
                  mids$[mid_removeFromParent_f2cc1bce94666404] = env->getMethodID(cls, "removeFromParent", "()V");
                  mids$[mid_set_d03990be0130160d] = env->getMethodID(cls, "set", "(Ljava/util/List;)V");
                  mids$[mid_setTag_a814174df0bbb9ee] = env->getMethodID(cls, "setTag", "(Ljava/lang/String;Ljava/lang/Object;)V");
                  mids$[mid_toQueryString_6bb2daa53c506f10] = env->getMethodID(cls, "toQueryString", "(Lorg/apache/lucene/queryparser/flexible/core/parser/EscapeQuerySyntax;)Ljava/lang/CharSequence;");
                  mids$[mid_toString_db9b55ba01e03e4b] = env->getMethodID(cls, "toString", "()Ljava/lang/String;");
                  mids$[mid_unsetTag_9fd2eb66a64e6f0f] = env->getMethodID(cls, "unsetTag", "(Ljava/lang/String;)V");

                  class$ = new ::java::lang::Class(cls);
                  live$ = true;
                }
                return (jclass) class$->this$;
              }

              void QueryNode::add(const ::java::util::List & a0) const
              {
                env->callVoidMethod(this$, mids$[mid_add_d03990be0130160d], a0.this$);
              }

              void QueryNode::add(const QueryNode & a0) const
              {
                env->callVoidMethod(this$, mids$[mid_add_f80bf4f68564485e], a0.this$);
              }

              QueryNode QueryNode::cloneTree() const
              {
                return QueryNode(env->callObjectMethod(this$, mids$[mid_cloneTree_7f4134ae4682ace0]));
              }

              jboolean QueryNode::containsTag(const ::java::lang::String & a0) const
              {
                return env->callBooleanMethod(this$, mids$[mid_containsTag_145b2d0af0c06b93], a0.this$);
              }

              ::java::util::List QueryNode::getChildren() const
              {
                return ::java::util::List(env->callObjectMethod(this$, mids$[mid_getChildren_49ec78390f08338a]));
              }

              QueryNode QueryNode::getParent() const
              {
                return QueryNode(env->callObjectMethod(this$, mids$[mid_getParent_7f4134ae4682ace0]));
              }

              ::java::lang::Object QueryNode::getTag(const ::java::lang::String & a0) const
              {
                return ::java::lang::Object(env->callObjectMethod(this$, mids$[mid_getTag_c0a3c3394484d296], a0.this$));
              }

              ::java::util::Map QueryNode::getTagMap() const
              {
                return ::java::util::Map(env->callObjectMethod(this$, mids$[mid_getTagMap_1c3426541413a55d]));
              }

              jboolean QueryNode::isLeaf() const
              {
                return env->callBooleanMethod(this$, mids$[mid_isLeaf_8454bd5aa23fd11e]);
              }

              void QueryNode::removeChildren(const QueryNode & a0) const
              {
                env->callVoidMethod(this$, mids$[mid_removeChildren_f80bf4f68564485e], a0.this$);
              }

              void QueryNode::removeFromParent() const
              {
                env->callVoidMethod(this$, mids$[mid_removeFromParent_f2cc1bce94666404]);
              }

              void QueryNode::set(const ::java::util::List & a0) const
              {
                env->callVoidMethod(this$, mids$[mid_set_d03990be0130160d], a0.this$);
              }

              void QueryNode::setTag(const ::java::lang::String & a0, const ::java::lang::Object & a1) const
              {
                env->callVoidMethod(this$, mids$[mid_setTag_a814174df0bbb9ee], a0.this$, a1.this$);
              }

              ::java::lang::CharSequence QueryNode::toQueryString(const ::org::apache::lucene::queryparser::flexible::core::parser::EscapeQuerySyntax & a0) const
              {
                return ::java::lang::CharSequence(env->callObjectMethod(this$, mids$[mid_toQueryString_6bb2daa53c506f10], a0.this$));
              }

              ::java::lang::String QueryNode::toString() const
              {
                return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_db9b55ba01e03e4b]));
              }

              void QueryNode::unsetTag(const ::java::lang::String & a0) const
              {
                env->callVoidMethod(this$, mids$[mid_unsetTag_9fd2eb66a64e6f0f], a0.this$);
              }
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace core {
            namespace nodes {
              static PyObject *t_QueryNode_cast_(PyTypeObject *type, PyObject *arg);
              static PyObject *t_QueryNode_instance_(PyTypeObject *type, PyObject *arg);
              static PyObject *t_QueryNode_add(t_QueryNode *self, PyObject *args);
              static PyObject *t_QueryNode_cloneTree(t_QueryNode *self);
              static PyObject *t_QueryNode_containsTag(t_QueryNode *self, PyObject *arg);
              static PyObject *t_QueryNode_getChildren(t_QueryNode *self);
              static PyObject *t_QueryNode_getParent(t_QueryNode *self);
              static PyObject *t_QueryNode_getTag(t_QueryNode *self, PyObject *arg);
              static PyObject *t_QueryNode_getTagMap(t_QueryNode *self);
              static PyObject *t_QueryNode_isLeaf(t_QueryNode *self);
              static PyObject *t_QueryNode_removeChildren(t_QueryNode *self, PyObject *arg);
              static PyObject *t_QueryNode_removeFromParent(t_QueryNode *self);
              static PyObject *t_QueryNode_set(t_QueryNode *self, PyObject *arg);
              static PyObject *t_QueryNode_setTag(t_QueryNode *self, PyObject *args);
              static PyObject *t_QueryNode_toQueryString(t_QueryNode *self, PyObject *arg);
              static PyObject *t_QueryNode_toString(t_QueryNode *self, PyObject *args);
              static PyObject *t_QueryNode_unsetTag(t_QueryNode *self, PyObject *arg);
              static PyObject *t_QueryNode_get__children(t_QueryNode *self, void *data);
              static PyObject *t_QueryNode_get__leaf(t_QueryNode *self, void *data);
              static PyObject *t_QueryNode_get__parent(t_QueryNode *self, void *data);
              static PyObject *t_QueryNode_get__tagMap(t_QueryNode *self, void *data);
              static PyGetSetDef t_QueryNode__fields_[] = {
                DECLARE_GET_FIELD(t_QueryNode, children),
                DECLARE_GET_FIELD(t_QueryNode, leaf),
                DECLARE_GET_FIELD(t_QueryNode, parent),
                DECLARE_GET_FIELD(t_QueryNode, tagMap),
                { NULL, NULL, NULL, NULL, NULL }
              };

              static PyMethodDef t_QueryNode__methods_[] = {
                DECLARE_METHOD(t_QueryNode, cast_, METH_O | METH_CLASS),
                DECLARE_METHOD(t_QueryNode, instance_, METH_O | METH_CLASS),
                DECLARE_METHOD(t_QueryNode, add, METH_VARARGS),
                DECLARE_METHOD(t_QueryNode, cloneTree, METH_NOARGS),
                DECLARE_METHOD(t_QueryNode, containsTag, METH_O),
                DECLARE_METHOD(t_QueryNode, getChildren, METH_NOARGS),
                DECLARE_METHOD(t_QueryNode, getParent, METH_NOARGS),
                DECLARE_METHOD(t_QueryNode, getTag, METH_O),
                DECLARE_METHOD(t_QueryNode, getTagMap, METH_NOARGS),
                DECLARE_METHOD(t_QueryNode, isLeaf, METH_NOARGS),
                DECLARE_METHOD(t_QueryNode, removeChildren, METH_O),
                DECLARE_METHOD(t_QueryNode, removeFromParent, METH_NOARGS),
                DECLARE_METHOD(t_QueryNode, set, METH_O),
                DECLARE_METHOD(t_QueryNode, setTag, METH_VARARGS),
                DECLARE_METHOD(t_QueryNode, toQueryString, METH_O),
                DECLARE_METHOD(t_QueryNode, toString, METH_VARARGS),
                DECLARE_METHOD(t_QueryNode, unsetTag, METH_O),
                { NULL, NULL, 0, NULL }
              };

              static PyType_Slot PY_TYPE_SLOTS(QueryNode)[] = {
                { Py_tp_methods, t_QueryNode__methods_ },
                { Py_tp_init, (void *) abstract_init },
                { Py_tp_getset, t_QueryNode__fields_ },
                { 0, NULL }
              };

              static PyType_Def *PY_TYPE_BASES(QueryNode)[] = {
                &PY_TYPE_DEF(::java::lang::Object),
                NULL
              };

              DEFINE_TYPE(QueryNode, t_QueryNode, QueryNode);

              void t_QueryNode::install(PyObject *module)
              {
                installType(&PY_TYPE(QueryNode), &PY_TYPE_DEF(QueryNode), module, "QueryNode", 0);
              }

              void t_QueryNode::initialize(PyObject *module)
              {
                PyObject_SetAttrString((PyObject *) PY_TYPE(QueryNode), "class_", make_descriptor(QueryNode::initializeClass, 1));
                PyObject_SetAttrString((PyObject *) PY_TYPE(QueryNode), "wrapfn_", make_descriptor(t_QueryNode::wrap_jobject));
                PyObject_SetAttrString((PyObject *) PY_TYPE(QueryNode), "boxfn_", make_descriptor(boxObject));
              }

              static PyObject *t_QueryNode_cast_(PyTypeObject *type, PyObject *arg)
              {
                if (!(arg = castCheck(arg, QueryNode::initializeClass, 1)))
                  return NULL;
                return t_QueryNode::wrap_Object(QueryNode(((t_QueryNode *) arg)->object.this$));
              }
              static PyObject *t_QueryNode_instance_(PyTypeObject *type, PyObject *arg)
              {
                if (!castCheck(arg, QueryNode::initializeClass, 0))
                  Py_RETURN_FALSE;
                Py_RETURN_TRUE;
              }

              static PyObject *t_QueryNode_add(t_QueryNode *self, PyObject *args)
              {
                switch (PyTuple_GET_SIZE(args)) {
                 case 1:
                  {
                    ::java::util::List a0((jobject) NULL);
                    PyTypeObject **p0;

                    if (!parseArgs(args, "K", ::java::util::List::initializeClass, &a0, &p0, ::java::util::t_List::parameters_))
                    {
                      OBJ_CALL(self->object.add(a0));
                      Py_RETURN_NONE;
                    }
                  }
                  {
                    QueryNode a0((jobject) NULL);

                    if (!parseArgs(args, "k", QueryNode::initializeClass, &a0))
                    {
                      OBJ_CALL(self->object.add(a0));
                      Py_RETURN_NONE;
                    }
                  }
                }

                PyErr_SetArgsError((PyObject *) self, "add", args);
                return NULL;
              }

              static PyObject *t_QueryNode_cloneTree(t_QueryNode *self)
              {
                QueryNode result((jobject) NULL);
                OBJ_CALL(result = self->object.cloneTree());
                return t_QueryNode::wrap_Object(result);
              }

              static PyObject *t_QueryNode_containsTag(t_QueryNode *self, PyObject *arg)
              {
                ::java::lang::String a0((jobject) NULL);
                jboolean result;

                if (!parseArg(arg, "s", &a0))
                {
                  OBJ_CALL(result = self->object.containsTag(a0));
                  Py_RETURN_BOOL(result);
                }

                PyErr_SetArgsError((PyObject *) self, "containsTag", arg);
                return NULL;
              }

              static PyObject *t_QueryNode_getChildren(t_QueryNode *self)
              {
                ::java::util::List result((jobject) NULL);
                OBJ_CALL(result = self->object.getChildren());
                return ::java::util::t_List::wrap_Object(result, ::org::apache::lucene::queryparser::flexible::core::nodes::PY_TYPE(QueryNode));
              }

              static PyObject *t_QueryNode_getParent(t_QueryNode *self)
              {
                QueryNode result((jobject) NULL);
                OBJ_CALL(result = self->object.getParent());
                return t_QueryNode::wrap_Object(result);
              }

              static PyObject *t_QueryNode_getTag(t_QueryNode *self, PyObject *arg)
              {
                ::java::lang::String a0((jobject) NULL);
                ::java::lang::Object result((jobject) NULL);

                if (!parseArg(arg, "s", &a0))
                {
                  OBJ_CALL(result = self->object.getTag(a0));
                  return ::java::lang::t_Object::wrap_Object(result);
                }

                PyErr_SetArgsError((PyObject *) self, "getTag", arg);
                return NULL;
              }

              static PyObject *t_QueryNode_getTagMap(t_QueryNode *self)
              {
                ::java::util::Map result((jobject) NULL);
                OBJ_CALL(result = self->object.getTagMap());
                return ::java::util::t_Map::wrap_Object(result, ::java::lang::PY_TYPE(String), ::java::lang::PY_TYPE(Object));
              }

              static PyObject *t_QueryNode_isLeaf(t_QueryNode *self)
              {
                jboolean result;
                OBJ_CALL(result = self->object.isLeaf());
                Py_RETURN_BOOL(result);
              }

              static PyObject *t_QueryNode_removeChildren(t_QueryNode *self, PyObject *arg)
              {
                QueryNode a0((jobject) NULL);

                if (!parseArg(arg, "k", QueryNode::initializeClass, &a0))
                {
                  OBJ_CALL(self->object.removeChildren(a0));
                  Py_RETURN_NONE;
                }

                PyErr_SetArgsError((PyObject *) self, "removeChildren", arg);
                return NULL;
              }

              static PyObject *t_QueryNode_removeFromParent(t_QueryNode *self)
              {
                OBJ_CALL(self->object.removeFromParent());
                Py_RETURN_NONE;
              }

              static PyObject *t_QueryNode_set(t_QueryNode *self, PyObject *arg)
              {
                ::java::util::List a0((jobject) NULL);
                PyTypeObject **p0;

                if (!parseArg(arg, "K", ::java::util::List::initializeClass, &a0, &p0, ::java::util::t_List::parameters_))
                {
                  OBJ_CALL(self->object.set(a0));
                  Py_RETURN_NONE;
                }

                PyErr_SetArgsError((PyObject *) self, "set", arg);
                return NULL;
              }

              static PyObject *t_QueryNode_setTag(t_QueryNode *self, PyObject *args)
              {
                ::java::lang::String a0((jobject) NULL);
                ::java::lang::Object a1((jobject) NULL);

                if (!parseArgs(args, "so", &a0, &a1))
                {
                  OBJ_CALL(self->object.setTag(a0, a1));
                  Py_RETURN_NONE;
                }

                PyErr_SetArgsError((PyObject *) self, "setTag", args);
                return NULL;
              }

              static PyObject *t_QueryNode_toQueryString(t_QueryNode *self, PyObject *arg)
              {
                ::org::apache::lucene::queryparser::flexible::core::parser::EscapeQuerySyntax a0((jobject) NULL);
                ::java::lang::CharSequence result((jobject) NULL);

                if (!parseArg(arg, "k", ::org::apache::lucene::queryparser::flexible::core::parser::EscapeQuerySyntax::initializeClass, &a0))
                {
                  OBJ_CALL(result = self->object.toQueryString(a0));
                  return ::java::lang::t_CharSequence::wrap_Object(result);
                }

                PyErr_SetArgsError((PyObject *) self, "toQueryString", arg);
                return NULL;
              }

              static PyObject *t_QueryNode_toString(t_QueryNode *self, PyObject *args)
              {
                ::java::lang::String result((jobject) NULL);

                if (!parseArgs(args, ""))
                {
                  OBJ_CALL(result = self->object.toString());
                  return j2p(result);
                }

                return callSuper(PY_TYPE(QueryNode), (PyObject *) self, "toString", args, 2);
              }

              static PyObject *t_QueryNode_unsetTag(t_QueryNode *self, PyObject *arg)
              {
                ::java::lang::String a0((jobject) NULL);

                if (!parseArg(arg, "s", &a0))
                {
                  OBJ_CALL(self->object.unsetTag(a0));
                  Py_RETURN_NONE;
                }

                PyErr_SetArgsError((PyObject *) self, "unsetTag", arg);
                return NULL;
              }

              static PyObject *t_QueryNode_get__children(t_QueryNode *self, void *data)
              {
                ::java::util::List value((jobject) NULL);
                OBJ_CALL(value = self->object.getChildren());
                return ::java::util::t_List::wrap_Object(value);
              }

              static PyObject *t_QueryNode_get__leaf(t_QueryNode *self, void *data)
              {
                jboolean value;
                OBJ_CALL(value = self->object.isLeaf());
                Py_RETURN_BOOL(value);
              }

              static PyObject *t_QueryNode_get__parent(t_QueryNode *self, void *data)
              {
                QueryNode value((jobject) NULL);
                OBJ_CALL(value = self->object.getParent());
                return t_QueryNode::wrap_Object(value);
              }

              static PyObject *t_QueryNode_get__tagMap(t_QueryNode *self, void *data)
              {
                ::java::util::Map value((jobject) NULL);
                OBJ_CALL(value = self->object.getTagMap());
                return ::java::util::t_Map::wrap_Object(value);
              }
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/classification/utils/DatasetSplitter.h"
#include "org/apache/lucene/index/IndexReader.h"
#include "org/apache/lucene/analysis/Analyzer.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/store/Directory.h"
#include "java/lang/String.h"
#include "java/io/IOException.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace classification {
        namespace utils {

          ::java::lang::Class *DatasetSplitter::class$ = NULL;
          jmethodID *DatasetSplitter::mids$ = NULL;
          bool DatasetSplitter::live$ = false;

          jclass DatasetSplitter::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/classification/utils/DatasetSplitter");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_75a41c58a4d52f7d] = env->getMethodID(cls, "<init>", "(DD)V");
              mids$[mid_split_8ee2c21bb080ca3e] = env->getMethodID(cls, "split", "(Lorg/apache/lucene/index/IndexReader;Lorg/apache/lucene/store/Directory;Lorg/apache/lucene/store/Directory;Lorg/apache/lucene/store/Directory;Lorg/apache/lucene/analysis/Analyzer;ZLjava/lang/String;[Ljava/lang/String;)V");

              class$ = new ::java::lang::Class(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          DatasetSplitter::DatasetSplitter(jdouble a0, jdouble a1) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_75a41c58a4d52f7d, a0, a1)) {}

          void DatasetSplitter::split(const ::org::apache::lucene::index::IndexReader & a0, const ::org::apache::lucene::store::Directory & a1, const ::org::apache::lucene::store::Directory & a2, const ::org::apache::lucene::store::Directory & a3, const ::org::apache::lucene::analysis::Analyzer & a4, jboolean a5, const ::java::lang::String & a6, const JArray< ::java::lang::String > & a7) const
          {
            env->callVoidMethod(this$, mids$[mid_split_8ee2c21bb080ca3e], a0.this$, a1.this$, a2.this$, a3.this$, a4.this$, a5, a6.this$, a7.this$);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace classification {
        namespace utils {
          static PyObject *t_DatasetSplitter_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_DatasetSplitter_instance_(PyTypeObject *type, PyObject *arg);
          static int t_DatasetSplitter_init_(t_DatasetSplitter *self, PyObject *args, PyObject *kwds);
          static PyObject *t_DatasetSplitter_split(t_DatasetSplitter *self, PyObject *args);

          static PyMethodDef t_DatasetSplitter__methods_[] = {
            DECLARE_METHOD(t_DatasetSplitter, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_DatasetSplitter, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_DatasetSplitter, split, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          static PyType_Slot PY_TYPE_SLOTS(DatasetSplitter)[] = {
            { Py_tp_methods, t_DatasetSplitter__methods_ },
            { Py_tp_init, (void *) t_DatasetSplitter_init_ },
            { 0, NULL }
          };

          static PyType_Def *PY_TYPE_BASES(DatasetSplitter)[] = {
            &PY_TYPE_DEF(::java::lang::Object),
            NULL
          };

          DEFINE_TYPE(DatasetSplitter, t_DatasetSplitter, DatasetSplitter);

          void t_DatasetSplitter::install(PyObject *module)
          {
            installType(&PY_TYPE(DatasetSplitter), &PY_TYPE_DEF(DatasetSplitter), module, "DatasetSplitter", 0);
          }

          void t_DatasetSplitter::initialize(PyObject *module)
          {
            PyObject_SetAttrString((PyObject *) PY_TYPE(DatasetSplitter), "class_", make_descriptor(DatasetSplitter::initializeClass, 1));
            PyObject_SetAttrString((PyObject *) PY_TYPE(DatasetSplitter), "wrapfn_", make_descriptor(t_DatasetSplitter::wrap_jobject));
            PyObject_SetAttrString((PyObject *) PY_TYPE(DatasetSplitter), "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_DatasetSplitter_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, DatasetSplitter::initializeClass, 1)))
              return NULL;
            return t_DatasetSplitter::wrap_Object(DatasetSplitter(((t_DatasetSplitter *) arg)->object.this$));
          }
          static PyObject *t_DatasetSplitter_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, DatasetSplitter::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_DatasetSplitter_init_(t_DatasetSplitter *self, PyObject *args, PyObject *kwds)
          {
            jdouble a0;
            jdouble a1;
            DatasetSplitter object((jobject) NULL);

            if (!parseArgs(args, "DD", &a0, &a1))
            {
              INT_CALL(object = DatasetSplitter(a0, a1));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_DatasetSplitter_split(t_DatasetSplitter *self, PyObject *args)
          {
            ::org::apache::lucene::index::IndexReader a0((jobject) NULL);
            ::org::apache::lucene::store::Directory a1((jobject) NULL);
            ::org::apache::lucene::store::Directory a2((jobject) NULL);
            ::org::apache::lucene::store::Directory a3((jobject) NULL);
            ::org::apache::lucene::analysis::Analyzer a4((jobject) NULL);
            jboolean a5;
            ::java::lang::String a6((jobject) NULL);
            JArray< ::java::lang::String > a7((jobject) NULL);

            if (!parseArgs(args, "kkkkkZs[s", ::org::apache::lucene::index::IndexReader::initializeClass, ::org::apache::lucene::store::Directory::initializeClass, ::org::apache::lucene::store::Directory::initializeClass, ::org::apache::lucene::store::Directory::initializeClass, ::org::apache::lucene::analysis::Analyzer::initializeClass, &a0, &a1, &a2, &a3, &a4, &a5, &a6, &a7))
            {
              OBJ_CALL(self->object.split(a0, a1, a2, a3, a4, a5, a6, a7));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError((PyObject *) self, "split", args);
            return NULL;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/codecs/memory/DirectPostingsFormat.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/index/SegmentReadState.h"
#include "org/apache/lucene/index/SegmentWriteState.h"
#include "org/apache/lucene/codecs/FieldsConsumer.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/codecs/FieldsProducer.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace codecs {
        namespace memory {

          ::java::lang::Class *DirectPostingsFormat::class$ = NULL;
          jmethodID *DirectPostingsFormat::mids$ = NULL;
          bool DirectPostingsFormat::live$ = false;

          jclass DirectPostingsFormat::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/codecs/memory/DirectPostingsFormat");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_f2cc1bce94666404] = env->getMethodID(cls, "<init>", "()V");
              mids$[mid_init$_438c62480c481c65] = env->getMethodID(cls, "<init>", "(II)V");
              mids$[mid_fieldsConsumer_876dc181a1f61814] = env->getMethodID(cls, "fieldsConsumer", "(Lorg/apache/lucene/index/SegmentWriteState;)Lorg/apache/lucene/codecs/FieldsConsumer;");
              mids$[mid_fieldsProducer_c39bdf540a53fab9] = env->getMethodID(cls, "fieldsProducer", "(Lorg/apache/lucene/index/SegmentReadState;)Lorg/apache/lucene/codecs/FieldsProducer;");

              class$ = new ::java::lang::Class(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          DirectPostingsFormat::DirectPostingsFormat() : ::org::apache::lucene::codecs::PostingsFormat(env->newObject(initializeClass, &mids$, mid_init$_f2cc1bce94666404)) {}

          DirectPostingsFormat::DirectPostingsFormat(jint a0, jint a1) : ::org::apache::lucene::codecs::PostingsFormat(env->newObject(initializeClass, &mids$, mid_init$_438c62480c481c65, a0, a1)) {}

          ::org::apache::lucene::codecs::FieldsConsumer DirectPostingsFormat::fieldsConsumer(const ::org::apache::lucene::index::SegmentWriteState & a0) const
          {
            return ::org::apache::lucene::codecs::FieldsConsumer(env->callObjectMethod(this$, mids$[mid_fieldsConsumer_876dc181a1f61814], a0.this$));
          }

          ::org::apache::lucene::codecs::FieldsProducer DirectPostingsFormat::fieldsProducer(const ::org::apache::lucene::index::SegmentReadState & a0) const
          {
            return ::org::apache::lucene::codecs::FieldsProducer(env->callObjectMethod(this$, mids$[mid_fieldsProducer_c39bdf540a53fab9], a0.this$));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace codecs {
        namespace memory {
          static PyObject *t_DirectPostingsFormat_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_DirectPostingsFormat_instance_(PyTypeObject *type, PyObject *arg);
          static int t_DirectPostingsFormat_init_(t_DirectPostingsFormat *self, PyObject *args, PyObject *kwds);
          static PyObject *t_DirectPostingsFormat_fieldsConsumer(t_DirectPostingsFormat *self, PyObject *args);
          static PyObject *t_DirectPostingsFormat_fieldsProducer(t_DirectPostingsFormat *self, PyObject *args);

          static PyMethodDef t_DirectPostingsFormat__methods_[] = {
            DECLARE_METHOD(t_DirectPostingsFormat, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_DirectPostingsFormat, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_DirectPostingsFormat, fieldsConsumer, METH_VARARGS),
            DECLARE_METHOD(t_DirectPostingsFormat, fieldsProducer, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          static PyType_Slot PY_TYPE_SLOTS(DirectPostingsFormat)[] = {
            { Py_tp_methods, t_DirectPostingsFormat__methods_ },
            { Py_tp_init, (void *) t_DirectPostingsFormat_init_ },
            { 0, NULL }
          };

          static PyType_Def *PY_TYPE_BASES(DirectPostingsFormat)[] = {
            &PY_TYPE_DEF(::org::apache::lucene::codecs::PostingsFormat),
            NULL
          };

          DEFINE_TYPE(DirectPostingsFormat, t_DirectPostingsFormat, DirectPostingsFormat);

          void t_DirectPostingsFormat::install(PyObject *module)
          {
            installType(&PY_TYPE(DirectPostingsFormat), &PY_TYPE_DEF(DirectPostingsFormat), module, "DirectPostingsFormat", 0);
          }

          void t_DirectPostingsFormat::initialize(PyObject *module)
          {
            PyObject_SetAttrString((PyObject *) PY_TYPE(DirectPostingsFormat), "class_", make_descriptor(DirectPostingsFormat::initializeClass, 1));
            PyObject_SetAttrString((PyObject *) PY_TYPE(DirectPostingsFormat), "wrapfn_", make_descriptor(t_DirectPostingsFormat::wrap_jobject));
            PyObject_SetAttrString((PyObject *) PY_TYPE(DirectPostingsFormat), "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_DirectPostingsFormat_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, DirectPostingsFormat::initializeClass, 1)))
              return NULL;
            return t_DirectPostingsFormat::wrap_Object(DirectPostingsFormat(((t_DirectPostingsFormat *) arg)->object.this$));
          }
          static PyObject *t_DirectPostingsFormat_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, DirectPostingsFormat::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_DirectPostingsFormat_init_(t_DirectPostingsFormat *self, PyObject *args, PyObject *kwds)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 0:
              {
                DirectPostingsFormat object((jobject) NULL);

                INT_CALL(object = DirectPostingsFormat());
                self->object = object;
                break;
              }
             case 2:
              {
                jint a0;
                jint a1;
                DirectPostingsFormat object((jobject) NULL);

                if (!parseArgs(args, "II", &a0, &a1))
                {
                  INT_CALL(object = DirectPostingsFormat(a0, a1));
                  self->object = object;
                  break;
                }
              }
             default:
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_DirectPostingsFormat_fieldsConsumer(t_DirectPostingsFormat *self, PyObject *args)
          {
            ::org::apache::lucene::index::SegmentWriteState a0((jobject) NULL);
            ::org::apache::lucene::codecs::FieldsConsumer result((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::index::SegmentWriteState::initializeClass, &a0))
            {
              OBJ_CALL(result = self->object.fieldsConsumer(a0));
              return ::org::apache::lucene::codecs::t_FieldsConsumer::wrap_Object(result);
            }

            return callSuper(PY_TYPE(DirectPostingsFormat), (PyObject *) self, "fieldsConsumer", args, 2);
          }

          static PyObject *t_DirectPostingsFormat_fieldsProducer(t_DirectPostingsFormat *self, PyObject *args)
          {
            ::org::apache::lucene::index::SegmentReadState a0((jobject) NULL);
            ::org::apache::lucene::codecs::FieldsProducer result((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::index::SegmentReadState::initializeClass, &a0))
            {
              OBJ_CALL(result = self->object.fieldsProducer(a0));
              return ::org::apache::lucene::codecs::t_FieldsProducer::wrap_Object(result);
            }

            return callSuper(PY_TYPE(DirectPostingsFormat), (PyObject *) self, "fieldsProducer", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queryparser/flexible/standard/builders/StandardQueryTreeBuilder.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/queryparser/flexible/core/QueryNodeException.h"
#include "org/apache/lucene/queryparser/flexible/standard/builders/StandardQueryBuilder.h"
#include "org/apache/lucene/queryparser/flexible/core/nodes/QueryNode.h"
#include "org/apache/lucene/search/Query.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace standard {
            namespace builders {

              ::java::lang::Class *StandardQueryTreeBuilder::class$ = NULL;
              jmethodID *StandardQueryTreeBuilder::mids$ = NULL;
              bool StandardQueryTreeBuilder::live$ = false;

              jclass StandardQueryTreeBuilder::initializeClass(bool getOnly)
              {
                if (getOnly)
                  return (jclass) (live$ ? class$->this$ : NULL);
                if (class$ == NULL)
                {
                  jclass cls = (jclass) env->findClass("org/apache/lucene/queryparser/flexible/standard/builders/StandardQueryTreeBuilder");

                  mids$ = new jmethodID[max_mid];
                  mids$[mid_init$_f2cc1bce94666404] = env->getMethodID(cls, "<init>", "()V");
                  mids$[mid_build_266d6dc3b958f456] = env->getMethodID(cls, "build", "(Lorg/apache/lucene/queryparser/flexible/core/nodes/QueryNode;)Lorg/apache/lucene/search/Query;");

                  class$ = new ::java::lang::Class(cls);
                  live$ = true;
                }
                return (jclass) class$->this$;
              }

              StandardQueryTreeBuilder::StandardQueryTreeBuilder() : ::org::apache::lucene::queryparser::flexible::core::builders::QueryTreeBuilder(env->newObject(initializeClass, &mids$, mid_init$_f2cc1bce94666404)) {}

              ::org::apache::lucene::search::Query StandardQueryTreeBuilder::build(const ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode & a0) const
              {
                return ::org::apache::lucene::search::Query(env->callObjectMethod(this$, mids$[mid_build_266d6dc3b958f456], a0.this$));
              }
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace standard {
            namespace builders {
              static PyObject *t_StandardQueryTreeBuilder_cast_(PyTypeObject *type, PyObject *arg);
              static PyObject *t_StandardQueryTreeBuilder_instance_(PyTypeObject *type, PyObject *arg);
              static int t_StandardQueryTreeBuilder_init_(t_StandardQueryTreeBuilder *self, PyObject *args, PyObject *kwds);
              static PyObject *t_StandardQueryTreeBuilder_build(t_StandardQueryTreeBuilder *self, PyObject *args);

              static PyMethodDef t_StandardQueryTreeBuilder__methods_[] = {
                DECLARE_METHOD(t_StandardQueryTreeBuilder, cast_, METH_O | METH_CLASS),
                DECLARE_METHOD(t_StandardQueryTreeBuilder, instance_, METH_O | METH_CLASS),
                DECLARE_METHOD(t_StandardQueryTreeBuilder, build, METH_VARARGS),
                { NULL, NULL, 0, NULL }
              };

              static PyType_Slot PY_TYPE_SLOTS(StandardQueryTreeBuilder)[] = {
                { Py_tp_methods, t_StandardQueryTreeBuilder__methods_ },
                { Py_tp_init, (void *) t_StandardQueryTreeBuilder_init_ },
                { 0, NULL }
              };

              static PyType_Def *PY_TYPE_BASES(StandardQueryTreeBuilder)[] = {
                &PY_TYPE_DEF(::org::apache::lucene::queryparser::flexible::core::builders::QueryTreeBuilder),
                NULL
              };

              DEFINE_TYPE(StandardQueryTreeBuilder, t_StandardQueryTreeBuilder, StandardQueryTreeBuilder);

              void t_StandardQueryTreeBuilder::install(PyObject *module)
              {
                installType(&PY_TYPE(StandardQueryTreeBuilder), &PY_TYPE_DEF(StandardQueryTreeBuilder), module, "StandardQueryTreeBuilder", 0);
              }

              void t_StandardQueryTreeBuilder::initialize(PyObject *module)
              {
                PyObject_SetAttrString((PyObject *) PY_TYPE(StandardQueryTreeBuilder), "class_", make_descriptor(StandardQueryTreeBuilder::initializeClass, 1));
                PyObject_SetAttrString((PyObject *) PY_TYPE(StandardQueryTreeBuilder), "wrapfn_", make_descriptor(t_StandardQueryTreeBuilder::wrap_jobject));
                PyObject_SetAttrString((PyObject *) PY_TYPE(StandardQueryTreeBuilder), "boxfn_", make_descriptor(boxObject));
              }

              static PyObject *t_StandardQueryTreeBuilder_cast_(PyTypeObject *type, PyObject *arg)
              {
                if (!(arg = castCheck(arg, StandardQueryTreeBuilder::initializeClass, 1)))
                  return NULL;
                return t_StandardQueryTreeBuilder::wrap_Object(StandardQueryTreeBuilder(((t_StandardQueryTreeBuilder *) arg)->object.this$));
              }
              static PyObject *t_StandardQueryTreeBuilder_instance_(PyTypeObject *type, PyObject *arg)
              {
                if (!castCheck(arg, StandardQueryTreeBuilder::initializeClass, 0))
                  Py_RETURN_FALSE;
                Py_RETURN_TRUE;
              }

              static int t_StandardQueryTreeBuilder_init_(t_StandardQueryTreeBuilder *self, PyObject *args, PyObject *kwds)
              {
                StandardQueryTreeBuilder object((jobject) NULL);

                INT_CALL(object = StandardQueryTreeBuilder());
                self->object = object;

                return 0;
              }

              static PyObject *t_StandardQueryTreeBuilder_build(t_StandardQueryTreeBuilder *self, PyObject *args)
              {
                ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode a0((jobject) NULL);
                ::org::apache::lucene::search::Query result((jobject) NULL);

                if (!parseArgs(args, "k", ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode::initializeClass, &a0))
                {
                  OBJ_CALL(result = self->object.build(a0));
                  return ::org::apache::lucene::search::t_Query::wrap_Object(result);
                }

                return callSuper(PY_TYPE(StandardQueryTreeBuilder), (PyObject *) self, "build", args, 2);
              }
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/spatial3d/geom/PlanetModel.h"
#include "java/io/InputStream.h"
#include "org/apache/lucene/spatial3d/geom/SerializableObject.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/spatial3d/geom/GeoPoint.h"
#include "org/apache/lucene/spatial3d/geom/PlanetModel$DocValueEncoder.h"
#include "java/lang/String.h"
#include "java/io/OutputStream.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/spatial3d/geom/PlanetModel.h"
#include "org/apache/lucene/spatial3d/geom/Vector.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace spatial3d {
        namespace geom {

          ::java::lang::Class *PlanetModel::class$ = NULL;
          jmethodID *PlanetModel::mids$ = NULL;
          jfieldID *PlanetModel::fids$ = NULL;
          bool PlanetModel::live$ = false;
          PlanetModel *PlanetModel::CLARKE_1866 = NULL;
          PlanetModel *PlanetModel::SPHERE = NULL;
          PlanetModel *PlanetModel::WGS84 = NULL;

          jclass PlanetModel::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/spatial3d/geom/PlanetModel");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_a227449bf251faf1] = env->getMethodID(cls, "<init>", "(Ljava/io/InputStream;)V");
              mids$[mid_init$_75a41c58a4d52f7d] = env->getMethodID(cls, "<init>", "(DD)V");
              mids$[mid_bisection_d7c033e06481e8d7] = env->getMethodID(cls, "bisection", "(Lorg/apache/lucene/spatial3d/geom/GeoPoint;Lorg/apache/lucene/spatial3d/geom/GeoPoint;)Lorg/apache/lucene/spatial3d/geom/GeoPoint;");
              mids$[mid_createSurfacePoint_da7d358ea82c26f9] = env->getMethodID(cls, "createSurfacePoint", "(Lorg/apache/lucene/spatial3d/geom/Vector;)Lorg/apache/lucene/spatial3d/geom/GeoPoint;");
              mids$[mid_createSurfacePoint_f1be7928ae62ab0d] = env->getMethodID(cls, "createSurfacePoint", "(DDD)Lorg/apache/lucene/spatial3d/geom/GeoPoint;");
              mids$[mid_decodeValue_f3ddedc0b6f18620] = env->getMethodID(cls, "decodeValue", "(I)D");
              mids$[mid_encodeValue_c1957bf1459ac23a] = env->getMethodID(cls, "encodeValue", "(D)I");
              mids$[mid_equals_8b72f2dcdde6fd1d] = env->getMethodID(cls, "equals", "(Ljava/lang/Object;)Z");
              mids$[mid_getDocValueEncoder_8111381cb46e94b0] = env->getMethodID(cls, "getDocValueEncoder", "()Lorg/apache/lucene/spatial3d/geom/PlanetModel$DocValueEncoder;");
              mids$[mid_getMaximumMagnitude_8c74b787998ce4bc] = env->getMethodID(cls, "getMaximumMagnitude", "()D");
              mids$[mid_getMaximumXValue_8c74b787998ce4bc] = env->getMethodID(cls, "getMaximumXValue", "()D");
              mids$[mid_getMaximumYValue_8c74b787998ce4bc] = env->getMethodID(cls, "getMaximumYValue", "()D");
              mids$[mid_getMaximumZValue_8c74b787998ce4bc] = env->getMethodID(cls, "getMaximumZValue", "()D");
              mids$[mid_getMeanRadius_8c74b787998ce4bc] = env->getMethodID(cls, "getMeanRadius", "()D");
              mids$[mid_getMinimumMagnitude_8c74b787998ce4bc] = env->getMethodID(cls, "getMinimumMagnitude", "()D");
              mids$[mid_getMinimumXValue_8c74b787998ce4bc] = env->getMethodID(cls, "getMinimumXValue", "()D");
              mids$[mid_getMinimumYValue_8c74b787998ce4bc] = env->getMethodID(cls, "getMinimumYValue", "()D");
              mids$[mid_getMinimumZValue_8c74b787998ce4bc] = env->getMethodID(cls, "getMinimumZValue", "()D");
              mids$[mid_hashCode_9972fcc56b44e79d] = env->getMethodID(cls, "hashCode", "()I");
              mids$[mid_isSphere_8454bd5aa23fd11e] = env->getMethodID(cls, "isSphere", "()Z");
              mids$[mid_pointOnSurface_ac70289ee56608c0] = env->getMethodID(cls, "pointOnSurface", "(Lorg/apache/lucene/spatial3d/geom/Vector;)Z");
              mids$[mid_pointOnSurface_5afbc0f2c6478de6] = env->getMethodID(cls, "pointOnSurface", "(DDD)Z");
              mids$[mid_pointOutside_ac70289ee56608c0] = env->getMethodID(cls, "pointOutside", "(Lorg/apache/lucene/spatial3d/geom/Vector;)Z");
              mids$[mid_pointOutside_5afbc0f2c6478de6] = env->getMethodID(cls, "pointOutside", "(DDD)Z");
              mids$[mid_surfaceDistance_5d9fe562983a5b40] = env->getMethodID(cls, "surfaceDistance", "(Lorg/apache/lucene/spatial3d/geom/GeoPoint;Lorg/apache/lucene/spatial3d/geom/GeoPoint;)D");
              mids$[mid_surfacePointOnBearing_77ef9fb3e0266e68] = env->getMethodID(cls, "surfacePointOnBearing", "(Lorg/apache/lucene/spatial3d/geom/GeoPoint;DD)Lorg/apache/lucene/spatial3d/geom/GeoPoint;");
              mids$[mid_toString_db9b55ba01e03e4b] = env->getMethodID(cls, "toString", "()Ljava/lang/String;");
              mids$[mid_write_02fcdace254a9894] = env->getMethodID(cls, "write", "(Ljava/io/OutputStream;)V");

              fids$ = new jfieldID[max_fid];
              fids$[fid_DECODE] = env->getFieldID(cls, "DECODE", "D");
              fids$[fid_MAX_ENCODED_VALUE] = env->getFieldID(cls, "MAX_ENCODED_VALUE", "I");
              fids$[fid_MAX_VALUE] = env->getFieldID(cls, "MAX_VALUE", "D");
              fids$[fid_MAX_X_POLE] = env->getFieldID(cls, "MAX_X_POLE", "Lorg/apache/lucene/spatial3d/geom/GeoPoint;");
              fids$[fid_MAX_Y_POLE] = env->getFieldID(cls, "MAX_Y_POLE", "Lorg/apache/lucene/spatial3d/geom/GeoPoint;");
              fids$[fid_MIN_ENCODED_VALUE] = env->getFieldID(cls, "MIN_ENCODED_VALUE", "I");
              fids$[fid_MIN_X_POLE] = env->getFieldID(cls, "MIN_X_POLE", "Lorg/apache/lucene/spatial3d/geom/GeoPoint;");
              fids$[fid_MIN_Y_POLE] = env->getFieldID(cls, "MIN_Y_POLE", "Lorg/apache/lucene/spatial3d/geom/GeoPoint;");
              fids$[fid_NORTH_POLE] = env->getFieldID(cls, "NORTH_POLE", "Lorg/apache/lucene/spatial3d/geom/GeoPoint;");
              fids$[fid_SOUTH_POLE] = env->getFieldID(cls, "SOUTH_POLE", "Lorg/apache/lucene/spatial3d/geom/GeoPoint;");
              fids$[fid_a] = env->getFieldID(cls, "a", "D");
              fids$[fid_b] = env->getFieldID(cls, "b", "D");
              fids$[fid_docValueEncoder] = env->getFieldID(cls, "docValueEncoder", "Lorg/apache/lucene/spatial3d/geom/PlanetModel$DocValueEncoder;");
              fids$[fid_inverseScale] = env->getFieldID(cls, "inverseScale", "D");
              fids$[fid_inverseXYScaling] = env->getFieldID(cls, "inverseXYScaling", "D");
              fids$[fid_inverseXYScalingSquared] = env->getFieldID(cls, "inverseXYScalingSquared", "D");
              fids$[fid_inverseZScaling] = env->getFieldID(cls, "inverseZScaling", "D");
              fids$[fid_inverseZScalingSquared] = env->getFieldID(cls, "inverseZScalingSquared", "D");
              fids$[fid_meanRadius] = env->getFieldID(cls, "meanRadius", "D");
              fids$[fid_minimumPoleDistance] = env->getFieldID(cls, "minimumPoleDistance", "D");
              fids$[fid_scale] = env->getFieldID(cls, "scale", "D");
              fids$[fid_scaledFlattening] = env->getFieldID(cls, "scaledFlattening", "D");
              fids$[fid_squareRatio] = env->getFieldID(cls, "squareRatio", "D");
              fids$[fid_xyScaling] = env->getFieldID(cls, "xyScaling", "D");
              fids$[fid_zScaling] = env->getFieldID(cls, "zScaling", "D");

              class$ = new ::java::lang::Class(cls);
              cls = (jclass) class$->this$;

              CLARKE_1866 = new PlanetModel(env->getStaticObjectField(cls, "CLARKE_1866", "Lorg/apache/lucene/spatial3d/geom/PlanetModel;"));
              SPHERE = new PlanetModel(env->getStaticObjectField(cls, "SPHERE", "Lorg/apache/lucene/spatial3d/geom/PlanetModel;"));
              WGS84 = new PlanetModel(env->getStaticObjectField(cls, "WGS84", "Lorg/apache/lucene/spatial3d/geom/PlanetModel;"));
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          PlanetModel::PlanetModel(const ::java::io::InputStream & a0) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_a227449bf251faf1, a0.this$)) {}

          PlanetModel::PlanetModel(jdouble a0, jdouble a1) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_75a41c58a4d52f7d, a0, a1)) {}

          ::org::apache::lucene::spatial3d::geom::GeoPoint PlanetModel::bisection(const ::org::apache::lucene::spatial3d::geom::GeoPoint & a0, const ::org::apache::lucene::spatial3d::geom::GeoPoint & a1) const
          {
            return ::org::apache::lucene::spatial3d::geom::GeoPoint(env->callObjectMethod(this$, mids$[mid_bisection_d7c033e06481e8d7], a0.this$, a1.this$));
          }

          ::org::apache::lucene::spatial3d::geom::GeoPoint PlanetModel::createSurfacePoint(const ::org::apache::lucene::spatial3d::geom::Vector & a0) const
          {
            return ::org::apache::lucene::spatial3d::geom::GeoPoint(env->callObjectMethod(this$, mids$[mid_createSurfacePoint_da7d358ea82c26f9], a0.this$));
          }

          ::org::apache::lucene::spatial3d::geom::GeoPoint PlanetModel::createSurfacePoint(jdouble a0, jdouble a1, jdouble a2) const
          {
            return ::org::apache::lucene::spatial3d::geom::GeoPoint(env->callObjectMethod(this$, mids$[mid_createSurfacePoint_f1be7928ae62ab0d], a0, a1, a2));
          }

          jdouble PlanetModel::decodeValue(jint a0) const
          {
            return env->callDoubleMethod(this$, mids$[mid_decodeValue_f3ddedc0b6f18620], a0);
          }

          jint PlanetModel::encodeValue(jdouble a0) const
          {
            return env->callIntMethod(this$, mids$[mid_encodeValue_c1957bf1459ac23a], a0);
          }

          jboolean PlanetModel::equals(const ::java::lang::Object & a0) const
          {
            return env->callBooleanMethod(this$, mids$[mid_equals_8b72f2dcdde6fd1d], a0.this$);
          }

          ::org::apache::lucene::spatial3d::geom::PlanetModel$DocValueEncoder PlanetModel::getDocValueEncoder() const
          {
            return ::org::apache::lucene::spatial3d::geom::PlanetModel$DocValueEncoder(env->callObjectMethod(this$, mids$[mid_getDocValueEncoder_8111381cb46e94b0]));
          }

          jdouble PlanetModel::getMaximumMagnitude() const
          {
            return env->callDoubleMethod(this$, mids$[mid_getMaximumMagnitude_8c74b787998ce4bc]);
          }

          jdouble PlanetModel::getMaximumXValue() const
          {
            return env->callDoubleMethod(this$, mids$[mid_getMaximumXValue_8c74b787998ce4bc]);
          }

          jdouble PlanetModel::getMaximumYValue() const
          {
            return env->callDoubleMethod(this$, mids$[mid_getMaximumYValue_8c74b787998ce4bc]);
          }

          jdouble PlanetModel::getMaximumZValue() const
          {
            return env->callDoubleMethod(this$, mids$[mid_getMaximumZValue_8c74b787998ce4bc]);
          }

          jdouble PlanetModel::getMeanRadius() const
          {
            return env->callDoubleMethod(this$, mids$[mid_getMeanRadius_8c74b787998ce4bc]);
          }

          jdouble PlanetModel::getMinimumMagnitude() const
          {
            return env->callDoubleMethod(this$, mids$[mid_getMinimumMagnitude_8c74b787998ce4bc]);
          }

          jdouble PlanetModel::getMinimumXValue() const
          {
            return env->callDoubleMethod(this$, mids$[mid_getMinimumXValue_8c74b787998ce4bc]);
          }

          jdouble PlanetModel::getMinimumYValue() const
          {
            return env->callDoubleMethod(this$, mids$[mid_getMinimumYValue_8c74b787998ce4bc]);
          }

          jdouble PlanetModel::getMinimumZValue() const
          {
            return env->callDoubleMethod(this$, mids$[mid_getMinimumZValue_8c74b787998ce4bc]);
          }

          jint PlanetModel::hashCode() const
          {
            return env->callIntMethod(this$, mids$[mid_hashCode_9972fcc56b44e79d]);
          }

          jboolean PlanetModel::isSphere() const
          {
            return env->callBooleanMethod(this$, mids$[mid_isSphere_8454bd5aa23fd11e]);
          }

          jboolean PlanetModel::pointOnSurface(const ::org::apache::lucene::spatial3d::geom::Vector & a0) const
          {
            return env->callBooleanMethod(this$, mids$[mid_pointOnSurface_ac70289ee56608c0], a0.this$);
          }

          jboolean PlanetModel::pointOnSurface(jdouble a0, jdouble a1, jdouble a2) const
          {
            return env->callBooleanMethod(this$, mids$[mid_pointOnSurface_5afbc0f2c6478de6], a0, a1, a2);
          }

          jboolean PlanetModel::pointOutside(const ::org::apache::lucene::spatial3d::geom::Vector & a0) const
          {
            return env->callBooleanMethod(this$, mids$[mid_pointOutside_ac70289ee56608c0], a0.this$);
          }

          jboolean PlanetModel::pointOutside(jdouble a0, jdouble a1, jdouble a2) const
          {
            return env->callBooleanMethod(this$, mids$[mid_pointOutside_5afbc0f2c6478de6], a0, a1, a2);
          }

          jdouble PlanetModel::surfaceDistance(const ::org::apache::lucene::spatial3d::geom::GeoPoint & a0, const ::org::apache::lucene::spatial3d::geom::GeoPoint & a1) const
          {
            return env->callDoubleMethod(this$, mids$[mid_surfaceDistance_5d9fe562983a5b40], a0.this$, a1.this$);
          }

          ::org::apache::lucene::spatial3d::geom::GeoPoint PlanetModel::surfacePointOnBearing(const ::org::apache::lucene::spatial3d::geom::GeoPoint & a0, jdouble a1, jdouble a2) const
          {
            return ::org::apache::lucene::spatial3d::geom::GeoPoint(env->callObjectMethod(this$, mids$[mid_surfacePointOnBearing_77ef9fb3e0266e68], a0.this$, a1, a2));
          }

          ::java::lang::String PlanetModel::toString() const
          {
            return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_db9b55ba01e03e4b]));
          }

          void PlanetModel::write(const ::java::io::OutputStream & a0) const
          {
            env->callVoidMethod(this$, mids$[mid_write_02fcdace254a9894], a0.this$);
          }

          jdouble PlanetModel::_get_DECODE() const
          {
            return env->getDoubleField(this$, fids$[fid_DECODE]);
          }

          jint PlanetModel::_get_MAX_ENCODED_VALUE() const
          {
            return env->getIntField(this$, fids$[fid_MAX_ENCODED_VALUE]);
          }

          jdouble PlanetModel::_get_MAX_VALUE() const
          {
            return env->getDoubleField(this$, fids$[fid_MAX_VALUE]);
          }

          ::org::apache::lucene::spatial3d::geom::GeoPoint PlanetModel::_get_MAX_X_POLE() const
          {
            return ::org::apache::lucene::spatial3d::geom::GeoPoint(env->getObjectField(this$, fids$[fid_MAX_X_POLE]));
          }

          ::org::apache::lucene::spatial3d::geom::GeoPoint PlanetModel::_get_MAX_Y_POLE() const
          {
            return ::org::apache::lucene::spatial3d::geom::GeoPoint(env->getObjectField(this$, fids$[fid_MAX_Y_POLE]));
          }

          jint PlanetModel::_get_MIN_ENCODED_VALUE() const
          {
            return env->getIntField(this$, fids$[fid_MIN_ENCODED_VALUE]);
          }

          ::org::apache::lucene::spatial3d::geom::GeoPoint PlanetModel::_get_MIN_X_POLE() const
          {
            return ::org::apache::lucene::spatial3d::geom::GeoPoint(env->getObjectField(this$, fids$[fid_MIN_X_POLE]));
          }

          ::org::apache::lucene::spatial3d::geom::GeoPoint PlanetModel::_get_MIN_Y_POLE() const
          {
            return ::org::apache::lucene::spatial3d::geom::GeoPoint(env->getObjectField(this$, fids$[fid_MIN_Y_POLE]));
          }

          ::org::apache::lucene::spatial3d::geom::GeoPoint PlanetModel::_get_NORTH_POLE() const
          {
            return ::org::apache::lucene::spatial3d::geom::GeoPoint(env->getObjectField(this$, fids$[fid_NORTH_POLE]));
          }

          ::org::apache::lucene::spatial3d::geom::GeoPoint PlanetModel::_get_SOUTH_POLE() const
          {
            return ::org::apache::lucene::spatial3d::geom::GeoPoint(env->getObjectField(this$, fids$[fid_SOUTH_POLE]));
          }

          jdouble PlanetModel::_get_a() const
          {
            return env->getDoubleField(this$, fids$[fid_a]);
          }

          jdouble PlanetModel::_get_b() const
          {
            return env->getDoubleField(this$, fids$[fid_b]);
          }

          ::org::apache::lucene::spatial3d::geom::PlanetModel$DocValueEncoder PlanetModel::_get_docValueEncoder() const
          {
            return ::org::apache::lucene::spatial3d::geom::PlanetModel$DocValueEncoder(env->getObjectField(this$, fids$[fid_docValueEncoder]));
          }

          jdouble PlanetModel::_get_inverseScale() const
          {
            return env->getDoubleField(this$, fids$[fid_inverseScale]);
          }

          jdouble PlanetModel::_get_inverseXYScaling() const
          {
            return env->getDoubleField(this$, fids$[fid_inverseXYScaling]);
          }

          jdouble PlanetModel::_get_inverseXYScalingSquared() const
          {
            return env->getDoubleField(this$, fids$[fid_inverseXYScalingSquared]);
          }

          jdouble PlanetModel::_get_inverseZScaling() const
          {
            return env->getDoubleField(this$, fids$[fid_inverseZScaling]);
          }

          jdouble PlanetModel::_get_inverseZScalingSquared() const
          {
            return env->getDoubleField(this$, fids$[fid_inverseZScalingSquared]);
          }

          jdouble PlanetModel::_get_meanRadius() const
          {
            return env->getDoubleField(this$, fids$[fid_meanRadius]);
          }

          jdouble PlanetModel::_get_minimumPoleDistance() const
          {
            return env->getDoubleField(this$, fids$[fid_minimumPoleDistance]);
          }

          jdouble PlanetModel::_get_scale() const
          {
            return env->getDoubleField(this$, fids$[fid_scale]);
          }

          jdouble PlanetModel::_get_scaledFlattening() const
          {
            return env->getDoubleField(this$, fids$[fid_scaledFlattening]);
          }

          jdouble PlanetModel::_get_squareRatio() const
          {
            return env->getDoubleField(this$, fids$[fid_squareRatio]);
          }

          jdouble PlanetModel::_get_xyScaling() const
          {
            return env->getDoubleField(this$, fids$[fid_xyScaling]);
          }

          jdouble PlanetModel::_get_zScaling() const
          {
            return env->getDoubleField(this$, fids$[fid_zScaling]);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace spatial3d {
        namespace geom {
          static PyObject *t_PlanetModel_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_PlanetModel_instance_(PyTypeObject *type, PyObject *arg);
          static int t_PlanetModel_init_(t_PlanetModel *self, PyObject *args, PyObject *kwds);
          static PyObject *t_PlanetModel_bisection(t_PlanetModel *self, PyObject *args);
          static PyObject *t_PlanetModel_createSurfacePoint(t_PlanetModel *self, PyObject *args);
          static PyObject *t_PlanetModel_decodeValue(t_PlanetModel *self, PyObject *arg);
          static PyObject *t_PlanetModel_encodeValue(t_PlanetModel *self, PyObject *arg);
          static PyObject *t_PlanetModel_equals(t_PlanetModel *self, PyObject *args);
          static PyObject *t_PlanetModel_getDocValueEncoder(t_PlanetModel *self);
          static PyObject *t_PlanetModel_getMaximumMagnitude(t_PlanetModel *self);
          static PyObject *t_PlanetModel_getMaximumXValue(t_PlanetModel *self);
          static PyObject *t_PlanetModel_getMaximumYValue(t_PlanetModel *self);
          static PyObject *t_PlanetModel_getMaximumZValue(t_PlanetModel *self);
          static PyObject *t_PlanetModel_getMeanRadius(t_PlanetModel *self);
          static PyObject *t_PlanetModel_getMinimumMagnitude(t_PlanetModel *self);
          static PyObject *t_PlanetModel_getMinimumXValue(t_PlanetModel *self);
          static PyObject *t_PlanetModel_getMinimumYValue(t_PlanetModel *self);
          static PyObject *t_PlanetModel_getMinimumZValue(t_PlanetModel *self);
          static PyObject *t_PlanetModel_hashCode(t_PlanetModel *self, PyObject *args);
          static PyObject *t_PlanetModel_isSphere(t_PlanetModel *self);
          static PyObject *t_PlanetModel_pointOnSurface(t_PlanetModel *self, PyObject *args);
          static PyObject *t_PlanetModel_pointOutside(t_PlanetModel *self, PyObject *args);
          static PyObject *t_PlanetModel_surfaceDistance(t_PlanetModel *self, PyObject *args);
          static PyObject *t_PlanetModel_surfacePointOnBearing(t_PlanetModel *self, PyObject *args);
          static PyObject *t_PlanetModel_toString(t_PlanetModel *self, PyObject *args);
          static PyObject *t_PlanetModel_write(t_PlanetModel *self, PyObject *arg);
          static PyObject *t_PlanetModel_get__DECODE(t_PlanetModel *self, void *data);
          static PyObject *t_PlanetModel_get__MAX_ENCODED_VALUE(t_PlanetModel *self, void *data);
          static PyObject *t_PlanetModel_get__MAX_VALUE(t_PlanetModel *self, void *data);
          static PyObject *t_PlanetModel_get__MAX_X_POLE(t_PlanetModel *self, void *data);
          static PyObject *t_PlanetModel_get__MAX_Y_POLE(t_PlanetModel *self, void *data);
          static PyObject *t_PlanetModel_get__MIN_ENCODED_VALUE(t_PlanetModel *self, void *data);
          static PyObject *t_PlanetModel_get__MIN_X_POLE(t_PlanetModel *self, void *data);
          static PyObject *t_PlanetModel_get__MIN_Y_POLE(t_PlanetModel *self, void *data);
          static PyObject *t_PlanetModel_get__NORTH_POLE(t_PlanetModel *self, void *data);
          static PyObject *t_PlanetModel_get__SOUTH_POLE(t_PlanetModel *self, void *data);
          static PyObject *t_PlanetModel_get__a(t_PlanetModel *self, void *data);
          static PyObject *t_PlanetModel_get__b(t_PlanetModel *self, void *data);
          static PyObject *t_PlanetModel_get__inverseScale(t_PlanetModel *self, void *data);
          static PyObject *t_PlanetModel_get__inverseXYScaling(t_PlanetModel *self, void *data);
          static PyObject *t_PlanetModel_get__inverseXYScalingSquared(t_PlanetModel *self, void *data);
          static PyObject *t_PlanetModel_get__inverseZScaling(t_PlanetModel *self, void *data);
          static PyObject *t_PlanetModel_get__inverseZScalingSquared(t_PlanetModel *self, void *data);
          static PyObject *t_PlanetModel_get__minimumPoleDistance(t_PlanetModel *self, void *data);
          static PyObject *t_PlanetModel_get__scale(t_PlanetModel *self, void *data);
          static PyObject *t_PlanetModel_get__scaledFlattening(t_PlanetModel *self, void *data);
          static PyObject *t_PlanetModel_get__squareRatio(t_PlanetModel *self, void *data);
          static PyObject *t_PlanetModel_get__xyScaling(t_PlanetModel *self, void *data);
          static PyObject *t_PlanetModel_get__zScaling(t_PlanetModel *self, void *data);

          static PyObject *t_PlanetModel_get__docValueEncoder(t_PlanetModel *self, void *data);
          static PyObject *t_PlanetModel_get__maximumMagnitude(t_PlanetModel *self, void *data);
          static PyObject *t_PlanetModel_get__maximumXValue(t_PlanetModel *self, void *data);
          static PyObject *t_PlanetModel_get__maximumYValue(t_PlanetModel *self, void *data);
          static PyObject *t_PlanetModel_get__maximumZValue(t_PlanetModel *self, void *data);
          static PyObject *t_PlanetModel_get__meanRadius(t_PlanetModel *self, void *data);
          static PyObject *t_PlanetModel_get__minimumMagnitude(t_PlanetModel *self, void *data);
          static PyObject *t_PlanetModel_get__minimumXValue(t_PlanetModel *self, void *data);
          static PyObject *t_PlanetModel_get__minimumYValue(t_PlanetModel *self, void *data);
          static PyObject *t_PlanetModel_get__minimumZValue(t_PlanetModel *self, void *data);
          static PyObject *t_PlanetModel_get__sphere(t_PlanetModel *self, void *data);
          static PyGetSetDef t_PlanetModel__fields_[] = {
            DECLARE_GET_FIELD(t_PlanetModel, DECODE),
            DECLARE_GET_FIELD(t_PlanetModel, MAX_ENCODED_VALUE),
            DECLARE_GET_FIELD(t_PlanetModel, MAX_VALUE),
            DECLARE_GET_FIELD(t_PlanetModel, MAX_X_POLE),
            DECLARE_GET_FIELD(t_PlanetModel, MAX_Y_POLE),
            DECLARE_GET_FIELD(t_PlanetModel, MIN_ENCODED_VALUE),
            DECLARE_GET_FIELD(t_PlanetModel, MIN_X_POLE),
            DECLARE_GET_FIELD(t_PlanetModel, MIN_Y_POLE),
            DECLARE_GET_FIELD(t_PlanetModel, NORTH_POLE),
            DECLARE_GET_FIELD(t_PlanetModel, SOUTH_POLE),
            DECLARE_GET_FIELD(t_PlanetModel, a),
            DECLARE_GET_FIELD(t_PlanetModel, b),
            DECLARE_GET_FIELD(t_PlanetModel, inverseScale),
            DECLARE_GET_FIELD(t_PlanetModel, inverseXYScaling),
            DECLARE_GET_FIELD(t_PlanetModel, inverseXYScalingSquared),
            DECLARE_GET_FIELD(t_PlanetModel, inverseZScaling),
            DECLARE_GET_FIELD(t_PlanetModel, inverseZScalingSquared),
            DECLARE_GET_FIELD(t_PlanetModel, minimumPoleDistance),
            DECLARE_GET_FIELD(t_PlanetModel, scale),
            DECLARE_GET_FIELD(t_PlanetModel, scaledFlattening),
            DECLARE_GET_FIELD(t_PlanetModel, squareRatio),
            DECLARE_GET_FIELD(t_PlanetModel, xyScaling),
            DECLARE_GET_FIELD(t_PlanetModel, zScaling),
            DECLARE_GET_FIELD(t_PlanetModel, docValueEncoder),
            DECLARE_GET_FIELD(t_PlanetModel, maximumMagnitude),
            DECLARE_GET_FIELD(t_PlanetModel, maximumXValue),
            DECLARE_GET_FIELD(t_PlanetModel, maximumYValue),
            DECLARE_GET_FIELD(t_PlanetModel, maximumZValue),
            DECLARE_GET_FIELD(t_PlanetModel, meanRadius),
            DECLARE_GET_FIELD(t_PlanetModel, minimumMagnitude),
            DECLARE_GET_FIELD(t_PlanetModel, minimumXValue),
            DECLARE_GET_FIELD(t_PlanetModel, minimumYValue),
            DECLARE_GET_FIELD(t_PlanetModel, minimumZValue),
            DECLARE_GET_FIELD(t_PlanetModel, sphere),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_PlanetModel__methods_[] = {
            DECLARE_METHOD(t_PlanetModel, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_PlanetModel, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_PlanetModel, bisection, METH_VARARGS),
            DECLARE_METHOD(t_PlanetModel, createSurfacePoint, METH_VARARGS),
            DECLARE_METHOD(t_PlanetModel, decodeValue, METH_O),
            DECLARE_METHOD(t_PlanetModel, encodeValue, METH_O),
            DECLARE_METHOD(t_PlanetModel, equals, METH_VARARGS),
            DECLARE_METHOD(t_PlanetModel, getDocValueEncoder, METH_NOARGS),
            DECLARE_METHOD(t_PlanetModel, getMaximumMagnitude, METH_NOARGS),
            DECLARE_METHOD(t_PlanetModel, getMaximumXValue, METH_NOARGS),
            DECLARE_METHOD(t_PlanetModel, getMaximumYValue, METH_NOARGS),
            DECLARE_METHOD(t_PlanetModel, getMaximumZValue, METH_NOARGS),
            DECLARE_METHOD(t_PlanetModel, getMeanRadius, METH_NOARGS),
            DECLARE_METHOD(t_PlanetModel, getMinimumMagnitude, METH_NOARGS),
            DECLARE_METHOD(t_PlanetModel, getMinimumXValue, METH_NOARGS),
            DECLARE_METHOD(t_PlanetModel, getMinimumYValue, METH_NOARGS),
            DECLARE_METHOD(t_PlanetModel, getMinimumZValue, METH_NOARGS),
            DECLARE_METHOD(t_PlanetModel, hashCode, METH_VARARGS),
            DECLARE_METHOD(t_PlanetModel, isSphere, METH_NOARGS),
            DECLARE_METHOD(t_PlanetModel, pointOnSurface, METH_VARARGS),
            DECLARE_METHOD(t_PlanetModel, pointOutside, METH_VARARGS),
            DECLARE_METHOD(t_PlanetModel, surfaceDistance, METH_VARARGS),
            DECLARE_METHOD(t_PlanetModel, surfacePointOnBearing, METH_VARARGS),
            DECLARE_METHOD(t_PlanetModel, toString, METH_VARARGS),
            DECLARE_METHOD(t_PlanetModel, write, METH_O),
            { NULL, NULL, 0, NULL }
          };

          static PyType_Slot PY_TYPE_SLOTS(PlanetModel)[] = {
            { Py_tp_methods, t_PlanetModel__methods_ },
            { Py_tp_init, (void *) t_PlanetModel_init_ },
            { Py_tp_getset, t_PlanetModel__fields_ },
            { 0, NULL }
          };

          static PyType_Def *PY_TYPE_BASES(PlanetModel)[] = {
            &PY_TYPE_DEF(::java::lang::Object),
            NULL
          };

          DEFINE_TYPE(PlanetModel, t_PlanetModel, PlanetModel);

          void t_PlanetModel::install(PyObject *module)
          {
            installType(&PY_TYPE(PlanetModel), &PY_TYPE_DEF(PlanetModel), module, "PlanetModel", 0);
            PyObject_SetAttrString((PyObject *) PY_TYPE(PlanetModel), "DocValueEncoder", make_descriptor(&PY_TYPE_DEF(PlanetModel$DocValueEncoder)));
          }

          void t_PlanetModel::initialize(PyObject *module)
          {
            PyObject_SetAttrString((PyObject *) PY_TYPE(PlanetModel), "class_", make_descriptor(PlanetModel::initializeClass, 1));
            PyObject_SetAttrString((PyObject *) PY_TYPE(PlanetModel), "wrapfn_", make_descriptor(t_PlanetModel::wrap_jobject));
            PyObject_SetAttrString((PyObject *) PY_TYPE(PlanetModel), "boxfn_", make_descriptor(boxObject));
            env->getClass(PlanetModel::initializeClass);
            PyObject_SetAttrString((PyObject *) PY_TYPE(PlanetModel), "CLARKE_1866", make_descriptor(t_PlanetModel::wrap_Object(*PlanetModel::CLARKE_1866)));
            PyObject_SetAttrString((PyObject *) PY_TYPE(PlanetModel), "SPHERE", make_descriptor(t_PlanetModel::wrap_Object(*PlanetModel::SPHERE)));
            PyObject_SetAttrString((PyObject *) PY_TYPE(PlanetModel), "WGS84", make_descriptor(t_PlanetModel::wrap_Object(*PlanetModel::WGS84)));
          }

          static PyObject *t_PlanetModel_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, PlanetModel::initializeClass, 1)))
              return NULL;
            return t_PlanetModel::wrap_Object(PlanetModel(((t_PlanetModel *) arg)->object.this$));
          }
          static PyObject *t_PlanetModel_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, PlanetModel::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_PlanetModel_init_(t_PlanetModel *self, PyObject *args, PyObject *kwds)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 1:
              {
                ::java::io::InputStream a0((jobject) NULL);
                PlanetModel object((jobject) NULL);

                if (!parseArgs(args, "k", ::java::io::InputStream::initializeClass, &a0))
                {
                  INT_CALL(object = PlanetModel(a0));
                  self->object = object;
                  break;
                }
              }
              goto err;
             case 2:
              {
                jdouble a0;
                jdouble a1;
                PlanetModel object((jobject) NULL);

                if (!parseArgs(args, "DD", &a0, &a1))
                {
                  INT_CALL(object = PlanetModel(a0, a1));
                  self->object = object;
                  break;
                }
              }
             default:
             err:
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_PlanetModel_bisection(t_PlanetModel *self, PyObject *args)
          {
            ::org::apache::lucene::spatial3d::geom::GeoPoint a0((jobject) NULL);
            ::org::apache::lucene::spatial3d::geom::GeoPoint a1((jobject) NULL);
            ::org::apache::lucene::spatial3d::geom::GeoPoint result((jobject) NULL);

            if (!parseArgs(args, "kk", ::org::apache::lucene::spatial3d::geom::GeoPoint::initializeClass, ::org::apache::lucene::spatial3d::geom::GeoPoint::initializeClass, &a0, &a1))
            {
              OBJ_CALL(result = self->object.bisection(a0, a1));
              return ::org::apache::lucene::spatial3d::geom::t_GeoPoint::wrap_Object(result);
            }

            PyErr_SetArgsError((PyObject *) self, "bisection", args);
            return NULL;
          }

          static PyObject *t_PlanetModel_createSurfacePoint(t_PlanetModel *self, PyObject *args)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 1:
              {
                ::org::apache::lucene::spatial3d::geom::Vector a0((jobject) NULL);
                ::org::apache::lucene::spatial3d::geom::GeoPoint result((jobject) NULL);

                if (!parseArgs(args, "k", ::org::apache::lucene::spatial3d::geom::Vector::initializeClass, &a0))
                {
                  OBJ_CALL(result = self->object.createSurfacePoint(a0));
                  return ::org::apache::lucene::spatial3d::geom::t_GeoPoint::wrap_Object(result);
                }
              }
              break;
             case 3:
              {
                jdouble a0;
                jdouble a1;
                jdouble a2;
                ::org::apache::lucene::spatial3d::geom::GeoPoint result((jobject) NULL);

                if (!parseArgs(args, "DDD", &a0, &a1, &a2))
                {
                  OBJ_CALL(result = self->object.createSurfacePoint(a0, a1, a2));
                  return ::org::apache::lucene::spatial3d::geom::t_GeoPoint::wrap_Object(result);
                }
              }
            }

            PyErr_SetArgsError((PyObject *) self, "createSurfacePoint", args);
            return NULL;
          }

          static PyObject *t_PlanetModel_decodeValue(t_PlanetModel *self, PyObject *arg)
          {
            jint a0;
            jdouble result;

            if (!parseArg(arg, "I", &a0))
            {
              OBJ_CALL(result = self->object.decodeValue(a0));
              return PyFloat_FromDouble((double) result);
            }

            PyErr_SetArgsError((PyObject *) self, "decodeValue", arg);
            return NULL;
          }

          static PyObject *t_PlanetModel_encodeValue(t_PlanetModel *self, PyObject *arg)
          {
            jdouble a0;
            jint result;

            if (!parseArg(arg, "D", &a0))
            {
              OBJ_CALL(result = self->object.encodeValue(a0));
              return PyLong_FromLong((long) result);
            }

            PyErr_SetArgsError((PyObject *) self, "encodeValue", arg);
            return NULL;
          }

          static PyObject *t_PlanetModel_equals(t_PlanetModel *self, PyObject *args)
          {
            ::java::lang::Object a0((jobject) NULL);
            jboolean result;

            if (!parseArgs(args, "o", &a0))
            {
              OBJ_CALL(result = self->object.equals(a0));
              Py_RETURN_BOOL(result);
            }

            return callSuper(PY_TYPE(PlanetModel), (PyObject *) self, "equals", args, 2);
          }

          static PyObject *t_PlanetModel_getDocValueEncoder(t_PlanetModel *self)
          {
            ::org::apache::lucene::spatial3d::geom::PlanetModel$DocValueEncoder result((jobject) NULL);
            OBJ_CALL(result = self->object.getDocValueEncoder());
            return ::org::apache::lucene::spatial3d::geom::t_PlanetModel$DocValueEncoder::wrap_Object(result);
          }

          static PyObject *t_PlanetModel_getMaximumMagnitude(t_PlanetModel *self)
          {
            jdouble result;
            OBJ_CALL(result = self->object.getMaximumMagnitude());
            return PyFloat_FromDouble((double) result);
          }

          static PyObject *t_PlanetModel_getMaximumXValue(t_PlanetModel *self)
          {
            jdouble result;
            OBJ_CALL(result = self->object.getMaximumXValue());
            return PyFloat_FromDouble((double) result);
          }

          static PyObject *t_PlanetModel_getMaximumYValue(t_PlanetModel *self)
          {
            jdouble result;
            OBJ_CALL(result = self->object.getMaximumYValue());
            return PyFloat_FromDouble((double) result);
          }

          static PyObject *t_PlanetModel_getMaximumZValue(t_PlanetModel *self)
          {
            jdouble result;
            OBJ_CALL(result = self->object.getMaximumZValue());
            return PyFloat_FromDouble((double) result);
          }

          static PyObject *t_PlanetModel_getMeanRadius(t_PlanetModel *self)
          {
            jdouble result;
            OBJ_CALL(result = self->object.getMeanRadius());
            return PyFloat_FromDouble((double) result);
          }

          static PyObject *t_PlanetModel_getMinimumMagnitude(t_PlanetModel *self)
          {
            jdouble result;
            OBJ_CALL(result = self->object.getMinimumMagnitude());
            return PyFloat_FromDouble((double) result);
          }

          static PyObject *t_PlanetModel_getMinimumXValue(t_PlanetModel *self)
          {
            jdouble result;
            OBJ_CALL(result = self->object.getMinimumXValue());
            return PyFloat_FromDouble((double) result);
          }

          static PyObject *t_PlanetModel_getMinimumYValue(t_PlanetModel *self)
          {
            jdouble result;
            OBJ_CALL(result = self->object.getMinimumYValue());
            return PyFloat_FromDouble((double) result);
          }

          static PyObject *t_PlanetModel_getMinimumZValue(t_PlanetModel *self)
          {
            jdouble result;
            OBJ_CALL(result = self->object.getMinimumZValue());
            return PyFloat_FromDouble((double) result);
          }

          static PyObject *t_PlanetModel_hashCode(t_PlanetModel *self, PyObject *args)
          {
            jint result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.hashCode());
              return PyLong_FromLong((long) result);
            }

            return callSuper(PY_TYPE(PlanetModel), (PyObject *) self, "hashCode", args, 2);
          }

          static PyObject *t_PlanetModel_isSphere(t_PlanetModel *self)
          {
            jboolean result;
            OBJ_CALL(result = self->object.isSphere());
            Py_RETURN_BOOL(result);
          }

          static PyObject *t_PlanetModel_pointOnSurface(t_PlanetModel *self, PyObject *args)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 1:
              {
                ::org::apache::lucene::spatial3d::geom::Vector a0((jobject) NULL);
                jboolean result;

                if (!parseArgs(args, "k", ::org::apache::lucene::spatial3d::geom::Vector::initializeClass, &a0))
                {
                  OBJ_CALL(result = self->object.pointOnSurface(a0));
                  Py_RETURN_BOOL(result);
                }
              }
              break;
             case 3:
              {
                jdouble a0;
                jdouble a1;
                jdouble a2;
                jboolean result;

                if (!parseArgs(args, "DDD", &a0, &a1, &a2))
                {
                  OBJ_CALL(result = self->object.pointOnSurface(a0, a1, a2));
                  Py_RETURN_BOOL(result);
                }
              }
            }

            PyErr_SetArgsError((PyObject *) self, "pointOnSurface", args);
            return NULL;
          }

          static PyObject *t_PlanetModel_pointOutside(t_PlanetModel *self, PyObject *args)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 1:
              {
                ::org::apache::lucene::spatial3d::geom::Vector a0((jobject) NULL);
                jboolean result;

                if (!parseArgs(args, "k", ::org::apache::lucene::spatial3d::geom::Vector::initializeClass, &a0))
                {
                  OBJ_CALL(result = self->object.pointOutside(a0));
                  Py_RETURN_BOOL(result);
                }
              }
              break;
             case 3:
              {
                jdouble a0;
                jdouble a1;
                jdouble a2;
                jboolean result;

                if (!parseArgs(args, "DDD", &a0, &a1, &a2))
                {
                  OBJ_CALL(result = self->object.pointOutside(a0, a1, a2));
                  Py_RETURN_BOOL(result);
                }
              }
            }

            PyErr_SetArgsError((PyObject *) self, "pointOutside", args);
            return NULL;
          }

          static PyObject *t_PlanetModel_surfaceDistance(t_PlanetModel *self, PyObject *args)
          {
            ::org::apache::lucene::spatial3d::geom::GeoPoint a0((jobject) NULL);
            ::org::apache::lucene::spatial3d::geom::GeoPoint a1((jobject) NULL);
            jdouble result;

            if (!parseArgs(args, "kk", ::org::apache::lucene::spatial3d::geom::GeoPoint::initializeClass, ::org::apache::lucene::spatial3d::geom::GeoPoint::initializeClass, &a0, &a1))
            {
              OBJ_CALL(result = self->object.surfaceDistance(a0, a1));
              return PyFloat_FromDouble((double) result);
            }

            PyErr_SetArgsError((PyObject *) self, "surfaceDistance", args);
            return NULL;
          }

          static PyObject *t_PlanetModel_surfacePointOnBearing(t_PlanetModel *self, PyObject *args)
          {
            ::org::apache::lucene::spatial3d::geom::GeoPoint a0((jobject) NULL);
            jdouble a1;
            jdouble a2;
            ::org::apache::lucene::spatial3d::geom::GeoPoint result((jobject) NULL);

            if (!parseArgs(args, "kDD", ::org::apache::lucene::spatial3d::geom::GeoPoint::initializeClass, &a0, &a1, &a2))
            {
              OBJ_CALL(result = self->object.surfacePointOnBearing(a0, a1, a2));
              return ::org::apache::lucene::spatial3d::geom::t_GeoPoint::wrap_Object(result);
            }

            PyErr_SetArgsError((PyObject *) self, "surfacePointOnBearing", args);
            return NULL;
          }

          static PyObject *t_PlanetModel_toString(t_PlanetModel *self, PyObject *args)
          {
            ::java::lang::String result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.toString());
              return j2p(result);
            }

            return callSuper(PY_TYPE(PlanetModel), (PyObject *) self, "toString", args, 2);
          }

          static PyObject *t_PlanetModel_write(t_PlanetModel *self, PyObject *arg)
          {
            ::java::io::OutputStream a0((jobject) NULL);

            if (!parseArg(arg, "k", ::java::io::OutputStream::initializeClass, &a0))
            {
              OBJ_CALL(self->object.write(a0));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError((PyObject *) self, "write", arg);
            return NULL;
          }

          static PyObject *t_PlanetModel_get__DECODE(t_PlanetModel *self, void *data)
          {
            jdouble value;
            OBJ_CALL(value = self->object._get_DECODE());
            return PyFloat_FromDouble((double) value);
          }

          static PyObject *t_PlanetModel_get__MAX_ENCODED_VALUE(t_PlanetModel *self, void *data)
          {
            jint value;
            OBJ_CALL(value = self->object._get_MAX_ENCODED_VALUE());
            return PyLong_FromLong((long) value);
          }

          static PyObject *t_PlanetModel_get__MAX_VALUE(t_PlanetModel *self, void *data)
          {
            jdouble value;
            OBJ_CALL(value = self->object._get_MAX_VALUE());
            return PyFloat_FromDouble((double) value);
          }

          static PyObject *t_PlanetModel_get__MAX_X_POLE(t_PlanetModel *self, void *data)
          {
            ::org::apache::lucene::spatial3d::geom::GeoPoint value((jobject) NULL);
            OBJ_CALL(value = self->object._get_MAX_X_POLE());
            return ::org::apache::lucene::spatial3d::geom::t_GeoPoint::wrap_Object(value);
          }

          static PyObject *t_PlanetModel_get__MAX_Y_POLE(t_PlanetModel *self, void *data)
          {
            ::org::apache::lucene::spatial3d::geom::GeoPoint value((jobject) NULL);
            OBJ_CALL(value = self->object._get_MAX_Y_POLE());
            return ::org::apache::lucene::spatial3d::geom::t_GeoPoint::wrap_Object(value);
          }

          static PyObject *t_PlanetModel_get__MIN_ENCODED_VALUE(t_PlanetModel *self, void *data)
          {
            jint value;
            OBJ_CALL(value = self->object._get_MIN_ENCODED_VALUE());
            return PyLong_FromLong((long) value);
          }

          static PyObject *t_PlanetModel_get__MIN_X_POLE(t_PlanetModel *self, void *data)
          {
            ::org::apache::lucene::spatial3d::geom::GeoPoint value((jobject) NULL);
            OBJ_CALL(value = self->object._get_MIN_X_POLE());
            return ::org::apache::lucene::spatial3d::geom::t_GeoPoint::wrap_Object(value);
          }

          static PyObject *t_PlanetModel_get__MIN_Y_POLE(t_PlanetModel *self, void *data)
          {
            ::org::apache::lucene::spatial3d::geom::GeoPoint value((jobject) NULL);
            OBJ_CALL(value = self->object._get_MIN_Y_POLE());
            return ::org::apache::lucene::spatial3d::geom::t_GeoPoint::wrap_Object(value);
          }

          static PyObject *t_PlanetModel_get__NORTH_POLE(t_PlanetModel *self, void *data)
          {
            ::org::apache::lucene::spatial3d::geom::GeoPoint value((jobject) NULL);
            OBJ_CALL(value = self->object._get_NORTH_POLE());
            return ::org::apache::lucene::spatial3d::geom::t_GeoPoint::wrap_Object(value);
          }

          static PyObject *t_PlanetModel_get__SOUTH_POLE(t_PlanetModel *self, void *data)
          {
            ::org::apache::lucene::spatial3d::geom::GeoPoint value((jobject) NULL);
            OBJ_CALL(value = self->object._get_SOUTH_POLE());
            return ::org::apache::lucene::spatial3d::geom::t_GeoPoint::wrap_Object(value);
          }

          static PyObject *t_PlanetModel_get__a(t_PlanetModel *self, void *data)
          {
            jdouble value;
            OBJ_CALL(value = self->object._get_a());
            return PyFloat_FromDouble((double) value);
          }

          static PyObject *t_PlanetModel_get__b(t_PlanetModel *self, void *data)
          {
            jdouble value;
            OBJ_CALL(value = self->object._get_b());
            return PyFloat_FromDouble((double) value);
          }

          static PyObject *t_PlanetModel_get__inverseScale(t_PlanetModel *self, void *data)
          {
            jdouble value;
            OBJ_CALL(value = self->object._get_inverseScale());
            return PyFloat_FromDouble((double) value);
          }

          static PyObject *t_PlanetModel_get__inverseXYScaling(t_PlanetModel *self, void *data)
          {
            jdouble value;
            OBJ_CALL(value = self->object._get_inverseXYScaling());
            return PyFloat_FromDouble((double) value);
          }

          static PyObject *t_PlanetModel_get__inverseXYScalingSquared(t_PlanetModel *self, void *data)
          {
            jdouble value;
            OBJ_CALL(value = self->object._get_inverseXYScalingSquared());
            return PyFloat_FromDouble((double) value);
          }

          static PyObject *t_PlanetModel_get__inverseZScaling(t_PlanetModel *self, void *data)
          {
            jdouble value;
            OBJ_CALL(value = self->object._get_inverseZScaling());
            return PyFloat_FromDouble((double) value);
          }

          static PyObject *t_PlanetModel_get__inverseZScalingSquared(t_PlanetModel *self, void *data)
          {
            jdouble value;
            OBJ_CALL(value = self->object._get_inverseZScalingSquared());
            return PyFloat_FromDouble((double) value);
          }

          static PyObject *t_PlanetModel_get__minimumPoleDistance(t_PlanetModel *self, void *data)
          {
            jdouble value;
            OBJ_CALL(value = self->object._get_minimumPoleDistance());
            return PyFloat_FromDouble((double) value);
          }

          static PyObject *t_PlanetModel_get__scale(t_PlanetModel *self, void *data)
          {
            jdouble value;
            OBJ_CALL(value = self->object._get_scale());
            return PyFloat_FromDouble((double) value);
          }

          static PyObject *t_PlanetModel_get__scaledFlattening(t_PlanetModel *self, void *data)
          {
            jdouble value;
            OBJ_CALL(value = self->object._get_scaledFlattening());
            return PyFloat_FromDouble((double) value);
          }

          static PyObject *t_PlanetModel_get__squareRatio(t_PlanetModel *self, void *data)
          {
            jdouble value;
            OBJ_CALL(value = self->object._get_squareRatio());
            return PyFloat_FromDouble((double) value);
          }

          static PyObject *t_PlanetModel_get__xyScaling(t_PlanetModel *self, void *data)
          {
            jdouble value;
            OBJ_CALL(value = self->object._get_xyScaling());
            return PyFloat_FromDouble((double) value);
          }

          static PyObject *t_PlanetModel_get__zScaling(t_PlanetModel *self, void *data)
          {
            jdouble value;
            OBJ_CALL(value = self->object._get_zScaling());
            return PyFloat_FromDouble((double) value);
          }

          static PyObject *t_PlanetModel_get__docValueEncoder(t_PlanetModel *self, void *data)
          {
            ::org::apache::lucene::spatial3d::geom::PlanetModel$DocValueEncoder value((jobject) NULL);
            OBJ_CALL(value = self->object.getDocValueEncoder());
            return ::org::apache::lucene::spatial3d::geom::t_PlanetModel$DocValueEncoder::wrap_Object(value);
          }

          static PyObject *t_PlanetModel_get__maximumMagnitude(t_PlanetModel *self, void *data)
          {
            jdouble value;
            OBJ_CALL(value = self->object.getMaximumMagnitude());
            return PyFloat_FromDouble((double) value);
          }

          static PyObject *t_PlanetModel_get__maximumXValue(t_PlanetModel *self, void *data)
          {
            jdouble value;
            OBJ_CALL(value = self->object.getMaximumXValue());
            return PyFloat_FromDouble((double) value);
          }

          static PyObject *t_PlanetModel_get__maximumYValue(t_PlanetModel *self, void *data)
          {
            jdouble value;
            OBJ_CALL(value = self->object.getMaximumYValue());
            return PyFloat_FromDouble((double) value);
          }

          static PyObject *t_PlanetModel_get__maximumZValue(t_PlanetModel *self, void *data)
          {
            jdouble value;
            OBJ_CALL(value = self->object.getMaximumZValue());
            return PyFloat_FromDouble((double) value);
          }

          static PyObject *t_PlanetModel_get__meanRadius(t_PlanetModel *self, void *data)
          {
            jdouble value;
            OBJ_CALL(value = self->object.getMeanRadius());
            return PyFloat_FromDouble((double) value);
          }

          static PyObject *t_PlanetModel_get__minimumMagnitude(t_PlanetModel *self, void *data)
          {
            jdouble value;
            OBJ_CALL(value = self->object.getMinimumMagnitude());
            return PyFloat_FromDouble((double) value);
          }

          static PyObject *t_PlanetModel_get__minimumXValue(t_PlanetModel *self, void *data)
          {
            jdouble value;
            OBJ_CALL(value = self->object.getMinimumXValue());
            return PyFloat_FromDouble((double) value);
          }

          static PyObject *t_PlanetModel_get__minimumYValue(t_PlanetModel *self, void *data)
          {
            jdouble value;
            OBJ_CALL(value = self->object.getMinimumYValue());
            return PyFloat_FromDouble((double) value);
          }

          static PyObject *t_PlanetModel_get__minimumZValue(t_PlanetModel *self, void *data)
          {
            jdouble value;
            OBJ_CALL(value = self->object.getMinimumZValue());
            return PyFloat_FromDouble((double) value);
          }

          static PyObject *t_PlanetModel_get__sphere(t_PlanetModel *self, void *data)
          {
            jboolean value;
            OBJ_CALL(value = self->object.isSphere());
            Py_RETURN_BOOL(value);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/TopFieldDocs.h"
#include "org/apache/lucene/search/ScoreDoc.h"
#include "org/apache/lucene/search/SortField.h"
#include "org/apache/lucene/search/TotalHits.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {

        ::java::lang::Class *TopFieldDocs::class$ = NULL;
        jmethodID *TopFieldDocs::mids$ = NULL;
        jfieldID *TopFieldDocs::fids$ = NULL;
        bool TopFieldDocs::live$ = false;

        jclass TopFieldDocs::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/search/TopFieldDocs");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_12700828c889b8d2] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/search/TotalHits;[Lorg/apache/lucene/search/ScoreDoc;[Lorg/apache/lucene/search/SortField;)V");

            fids$ = new jfieldID[max_fid];
            fids$[fid_fields] = env->getFieldID(cls, "fields", "[Lorg/apache/lucene/search/SortField;");

            class$ = new ::java::lang::Class(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        TopFieldDocs::TopFieldDocs(const ::org::apache::lucene::search::TotalHits & a0, const JArray< ::org::apache::lucene::search::ScoreDoc > & a1, const JArray< ::org::apache::lucene::search::SortField > & a2) : ::org::apache::lucene::search::TopDocs(env->newObject(initializeClass, &mids$, mid_init$_12700828c889b8d2, a0.this$, a1.this$, a2.this$)) {}

        JArray< ::org::apache::lucene::search::SortField > TopFieldDocs::_get_fields() const
        {
          return JArray< ::org::apache::lucene::search::SortField >(env->getObjectField(this$, fids$[fid_fields]));
        }

        void TopFieldDocs::_set_fields(const JArray< ::org::apache::lucene::search::SortField > & a0) const
        {
          env->setObjectField(this$, fids$[fid_fields], a0.this$);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        static PyObject *t_TopFieldDocs_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_TopFieldDocs_instance_(PyTypeObject *type, PyObject *arg);
        static int t_TopFieldDocs_init_(t_TopFieldDocs *self, PyObject *args, PyObject *kwds);
        static PyObject *t_TopFieldDocs_get__fields(t_TopFieldDocs *self, void *data);
        static int t_TopFieldDocs_set__fields(t_TopFieldDocs *self, PyObject *arg, void *data);

        static PyGetSetDef t_TopFieldDocs__fields_[] = {
          DECLARE_GETSET_FIELD(t_TopFieldDocs, fields),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_TopFieldDocs__methods_[] = {
          DECLARE_METHOD(t_TopFieldDocs, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_TopFieldDocs, instance_, METH_O | METH_CLASS),
          { NULL, NULL, 0, NULL }
        };

        static PyType_Slot PY_TYPE_SLOTS(TopFieldDocs)[] = {
          { Py_tp_methods, t_TopFieldDocs__methods_ },
          { Py_tp_init, (void *) t_TopFieldDocs_init_ },
          { Py_tp_getset, t_TopFieldDocs__fields_ },
          { 0, NULL }
        };

        static PyType_Def *PY_TYPE_BASES(TopFieldDocs)[] = {
          &PY_TYPE_DEF(::org::apache::lucene::search::TopDocs),
          NULL
        };

        DEFINE_TYPE(TopFieldDocs, t_TopFieldDocs, TopFieldDocs);

        void t_TopFieldDocs::install(PyObject *module)
        {
          installType(&PY_TYPE(TopFieldDocs), &PY_TYPE_DEF(TopFieldDocs), module, "TopFieldDocs", 0);
        }

        void t_TopFieldDocs::initialize(PyObject *module)
        {
          PyObject_SetAttrString((PyObject *) PY_TYPE(TopFieldDocs), "class_", make_descriptor(TopFieldDocs::initializeClass, 1));
          PyObject_SetAttrString((PyObject *) PY_TYPE(TopFieldDocs), "wrapfn_", make_descriptor(t_TopFieldDocs::wrap_jobject));
          PyObject_SetAttrString((PyObject *) PY_TYPE(TopFieldDocs), "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_TopFieldDocs_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, TopFieldDocs::initializeClass, 1)))
            return NULL;
          return t_TopFieldDocs::wrap_Object(TopFieldDocs(((t_TopFieldDocs *) arg)->object.this$));
        }
        static PyObject *t_TopFieldDocs_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, TopFieldDocs::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_TopFieldDocs_init_(t_TopFieldDocs *self, PyObject *args, PyObject *kwds)
        {
          ::org::apache::lucene::search::TotalHits a0((jobject) NULL);
          JArray< ::org::apache::lucene::search::ScoreDoc > a1((jobject) NULL);
          JArray< ::org::apache::lucene::search::SortField > a2((jobject) NULL);
          TopFieldDocs object((jobject) NULL);

          if (!parseArgs(args, "k[k[k", ::org::apache::lucene::search::TotalHits::initializeClass, ::org::apache::lucene::search::ScoreDoc::initializeClass, ::org::apache::lucene::search::SortField::initializeClass, &a0, &a1, &a2))
          {
            INT_CALL(object = TopFieldDocs(a0, a1, a2));
            self->object = object;
          }
          else
          {
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }

        static PyObject *t_TopFieldDocs_get__fields(t_TopFieldDocs *self, void *data)
        {
          JArray< ::org::apache::lucene::search::SortField > value((jobject) NULL);
          OBJ_CALL(value = self->object._get_fields());
          return JArray<jobject>(value.this$).wrap(::org::apache::lucene::search::t_SortField::wrap_jobject);
        }
        static int t_TopFieldDocs_set__fields(t_TopFieldDocs *self, PyObject *arg, void *data)
        {
          JArray< ::org::apache::lucene::search::SortField > value((jobject) NULL);
          if (!parseArg(arg, "[k", ::org::apache::lucene::search::SortField::initializeClass, &value))
          {
            INT_CALL(self->object._set_fields(value));
            return 0;
          }
          PyErr_SetArgsError((PyObject *) self, "fields", arg);
          return -1;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/util/IntroSorter.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {

        ::java::lang::Class *IntroSorter::class$ = NULL;
        jmethodID *IntroSorter::mids$ = NULL;
        bool IntroSorter::live$ = false;

        jclass IntroSorter::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/util/IntroSorter");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_f2cc1bce94666404] = env->getMethodID(cls, "<init>", "()V");
            mids$[mid_sort_438c62480c481c65] = env->getMethodID(cls, "sort", "(II)V");
            mids$[mid_comparePivot_1e143afe1894d213] = env->getMethodID(cls, "comparePivot", "(I)I");
            mids$[mid_setPivot_040c4cd0390c5aff] = env->getMethodID(cls, "setPivot", "(I)V");
            mids$[mid_compare_57a58545eba514db] = env->getMethodID(cls, "compare", "(II)I");

            class$ = new ::java::lang::Class(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        IntroSorter::IntroSorter() : ::org::apache::lucene::util::Sorter(env->newObject(initializeClass, &mids$, mid_init$_f2cc1bce94666404)) {}

        void IntroSorter::sort(jint a0, jint a1) const
        {
          env->callVoidMethod(this$, mids$[mid_sort_438c62480c481c65], a0, a1);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        static PyObject *t_IntroSorter_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_IntroSorter_instance_(PyTypeObject *type, PyObject *arg);
        static int t_IntroSorter_init_(t_IntroSorter *self, PyObject *args, PyObject *kwds);
        static PyObject *t_IntroSorter_sort(t_IntroSorter *self, PyObject *args);

        static PyMethodDef t_IntroSorter__methods_[] = {
          DECLARE_METHOD(t_IntroSorter, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_IntroSorter, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_IntroSorter, sort, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        static PyType_Slot PY_TYPE_SLOTS(IntroSorter)[] = {
          { Py_tp_methods, t_IntroSorter__methods_ },
          { Py_tp_init, (void *) t_IntroSorter_init_ },
          { 0, NULL }
        };

        static PyType_Def *PY_TYPE_BASES(IntroSorter)[] = {
          &PY_TYPE_DEF(::org::apache::lucene::util::Sorter),
          NULL
        };

        DEFINE_TYPE(IntroSorter, t_IntroSorter, IntroSorter);

        void t_IntroSorter::install(PyObject *module)
        {
          installType(&PY_TYPE(IntroSorter), &PY_TYPE_DEF(IntroSorter), module, "IntroSorter", 0);
        }

        void t_IntroSorter::initialize(PyObject *module)
        {
          PyObject_SetAttrString((PyObject *) PY_TYPE(IntroSorter), "class_", make_descriptor(IntroSorter::initializeClass, 1));
          PyObject_SetAttrString((PyObject *) PY_TYPE(IntroSorter), "wrapfn_", make_descriptor(t_IntroSorter::wrap_jobject));
          PyObject_SetAttrString((PyObject *) PY_TYPE(IntroSorter), "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_IntroSorter_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, IntroSorter::initializeClass, 1)))
            return NULL;
          return t_IntroSorter::wrap_Object(IntroSorter(((t_IntroSorter *) arg)->object.this$));
        }
        static PyObject *t_IntroSorter_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, IntroSorter::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_IntroSorter_init_(t_IntroSorter *self, PyObject *args, PyObject *kwds)
        {
          IntroSorter object((jobject) NULL);

          INT_CALL(object = IntroSorter());
          self->object = object;

          return 0;
        }

        static PyObject *t_IntroSorter_sort(t_IntroSorter *self, PyObject *args)
        {
          jint a0;
          jint a1;

          if (!parseArgs(args, "II", &a0, &a1))
          {
            OBJ_CALL(self->object.sort(a0, a1));
            Py_RETURN_NONE;
          }

          return callSuper(PY_TYPE(IntroSorter), (PyObject *) self, "sort", args, 2);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/spans/SpanNearQuery$SpanNearWeight.h"
#include "java/util/Map.h"
#include "org/apache/lucene/index/LeafReaderContext.h"
#include "org/apache/lucene/search/IndexSearcher.h"
#include "org/apache/lucene/index/Term.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/search/spans/SpanWeight$Postings.h"
#include "org/apache/lucene/search/spans/SpanNearQuery.h"
#include "org/apache/lucene/index/TermStates.h"
#include "org/apache/lucene/search/spans/Spans.h"
#include "java/util/Set.h"
#include "java/io/IOException.h"
#include "java/util/List.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace spans {

          ::java::lang::Class *SpanNearQuery$SpanNearWeight::class$ = NULL;
          jmethodID *SpanNearQuery$SpanNearWeight::mids$ = NULL;
          bool SpanNearQuery$SpanNearWeight::live$ = false;

          jclass SpanNearQuery$SpanNearWeight::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/search/spans/SpanNearQuery$SpanNearWeight");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_5d195f7f863db449] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/search/spans/SpanNearQuery;Ljava/util/List;Lorg/apache/lucene/search/IndexSearcher;Ljava/util/Map;F)V");
              mids$[mid_extractTermStates_408bd889ee3beae5] = env->getMethodID(cls, "extractTermStates", "(Ljava/util/Map;)V");
              mids$[mid_extractTerms_d5a4a8d4b806f0ba] = env->getMethodID(cls, "extractTerms", "(Ljava/util/Set;)V");
              mids$[mid_getSpans_219c078c64a446fd] = env->getMethodID(cls, "getSpans", "(Lorg/apache/lucene/index/LeafReaderContext;Lorg/apache/lucene/search/spans/SpanWeight$Postings;)Lorg/apache/lucene/search/spans/Spans;");
              mids$[mid_isCacheable_07cae694a8cf1c6d] = env->getMethodID(cls, "isCacheable", "(Lorg/apache/lucene/index/LeafReaderContext;)Z");

              class$ = new ::java::lang::Class(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          SpanNearQuery$SpanNearWeight::SpanNearQuery$SpanNearWeight(const ::org::apache::lucene::search::spans::SpanNearQuery & a0, const ::java::util::List & a1, const ::org::apache::lucene::search::IndexSearcher & a2, const ::java::util::Map & a3, jfloat a4) : ::org::apache::lucene::search::spans::SpanWeight(env->newObject(initializeClass, &mids$, mid_init$_5d195f7f863db449, a0.this$, a1.this$, a2.this$, a3.this$, a4)) {}

          void SpanNearQuery$SpanNearWeight::extractTermStates(const ::java::util::Map & a0) const
          {
            env->callVoidMethod(this$, mids$[mid_extractTermStates_408bd889ee3beae5], a0.this$);
          }

          void SpanNearQuery$SpanNearWeight::extractTerms(const ::java::util::Set & a0) const
          {
            env->callVoidMethod(this$, mids$[mid_extractTerms_d5a4a8d4b806f0ba], a0.this$);
          }

          ::org::apache::lucene::search::spans::Spans SpanNearQuery$SpanNearWeight::getSpans(const ::org::apache::lucene::index::LeafReaderContext & a0, const ::org::apache::lucene::search::spans::SpanWeight$Postings & a1) const
          {
            return ::org::apache::lucene::search::spans::Spans(env->callObjectMethod(this$, mids$[mid_getSpans_219c078c64a446fd], a0.this$, a1.this$));
          }

          jboolean SpanNearQuery$SpanNearWeight::isCacheable(const ::org::apache::lucene::index::LeafReaderContext & a0) const
          {
            return env->callBooleanMethod(this$, mids$[mid_isCacheable_07cae694a8cf1c6d], a0.this$);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace spans {
          static PyObject *t_SpanNearQuery$SpanNearWeight_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_SpanNearQuery$SpanNearWeight_instance_(PyTypeObject *type, PyObject *arg);
          static int t_SpanNearQuery$SpanNearWeight_init_(t_SpanNearQuery$SpanNearWeight *self, PyObject *args, PyObject *kwds);
          static PyObject *t_SpanNearQuery$SpanNearWeight_extractTermStates(t_SpanNearQuery$SpanNearWeight *self, PyObject *args);
          static PyObject *t_SpanNearQuery$SpanNearWeight_extractTerms(t_SpanNearQuery$SpanNearWeight *self, PyObject *args);
          static PyObject *t_SpanNearQuery$SpanNearWeight_getSpans(t_SpanNearQuery$SpanNearWeight *self, PyObject *args);
          static PyObject *t_SpanNearQuery$SpanNearWeight_isCacheable(t_SpanNearQuery$SpanNearWeight *self, PyObject *args);

          static PyMethodDef t_SpanNearQuery$SpanNearWeight__methods_[] = {
            DECLARE_METHOD(t_SpanNearQuery$SpanNearWeight, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_SpanNearQuery$SpanNearWeight, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_SpanNearQuery$SpanNearWeight, extractTermStates, METH_VARARGS),
            DECLARE_METHOD(t_SpanNearQuery$SpanNearWeight, extractTerms, METH_VARARGS),
            DECLARE_METHOD(t_SpanNearQuery$SpanNearWeight, getSpans, METH_VARARGS),
            DECLARE_METHOD(t_SpanNearQuery$SpanNearWeight, isCacheable, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          static PyType_Slot PY_TYPE_SLOTS(SpanNearQuery$SpanNearWeight)[] = {
            { Py_tp_methods, t_SpanNearQuery$SpanNearWeight__methods_ },
            { Py_tp_init, (void *) t_SpanNearQuery$SpanNearWeight_init_ },
            { 0, NULL }
          };

          static PyType_Def *PY_TYPE_BASES(SpanNearQuery$SpanNearWeight)[] = {
            &PY_TYPE_DEF(::org::apache::lucene::search::spans::SpanWeight),
            NULL
          };

          DEFINE_TYPE(SpanNearQuery$SpanNearWeight, t_SpanNearQuery$SpanNearWeight, SpanNearQuery$SpanNearWeight);

          void t_SpanNearQuery$SpanNearWeight::install(PyObject *module)
          {
            installType(&PY_TYPE(SpanNearQuery$SpanNearWeight), &PY_TYPE_DEF(SpanNearQuery$SpanNearWeight), module, "SpanNearQuery$SpanNearWeight", 0);
          }

          void t_SpanNearQuery$SpanNearWeight::initialize(PyObject *module)
          {
            PyObject_SetAttrString((PyObject *) PY_TYPE(SpanNearQuery$SpanNearWeight), "class_", make_descriptor(SpanNearQuery$SpanNearWeight::initializeClass, 1));
            PyObject_SetAttrString((PyObject *) PY_TYPE(SpanNearQuery$SpanNearWeight), "wrapfn_", make_descriptor(t_SpanNearQuery$SpanNearWeight::wrap_jobject));
            PyObject_SetAttrString((PyObject *) PY_TYPE(SpanNearQuery$SpanNearWeight), "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_SpanNearQuery$SpanNearWeight_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, SpanNearQuery$SpanNearWeight::initializeClass, 1)))
              return NULL;
            return t_SpanNearQuery$SpanNearWeight::wrap_Object(SpanNearQuery$SpanNearWeight(((t_SpanNearQuery$SpanNearWeight *) arg)->object.this$));
          }
          static PyObject *t_SpanNearQuery$SpanNearWeight_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, SpanNearQuery$SpanNearWeight::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_SpanNearQuery$SpanNearWeight_init_(t_SpanNearQuery$SpanNearWeight *self, PyObject *args, PyObject *kwds)
          {
            ::org::apache::lucene::search::spans::SpanNearQuery a0((jobject) NULL);
            ::java::util::List a1((jobject) NULL);
            PyTypeObject **p1;
            ::org::apache::lucene::search::IndexSearcher a2((jobject) NULL);
            ::java::util::Map a3((jobject) NULL);
            PyTypeObject **p3;
            jfloat a4;
            SpanNearQuery$SpanNearWeight object((jobject) NULL);

            if (!parseArgs(args, "kKkKF", ::org::apache::lucene::search::spans::SpanNearQuery::initializeClass, ::java::util::List::initializeClass, ::org::apache::lucene::search::IndexSearcher::initializeClass, ::java::util::Map::initializeClass, &a0, &a1, &p1, ::java::util::t_List::parameters_, &a2, &a3, &p3, ::java::util::t_Map::parameters_, &a4))
            {
              INT_CALL(object = SpanNearQuery$SpanNearWeight(a0, a1, a2, a3, a4));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_SpanNearQuery$SpanNearWeight_extractTermStates(t_SpanNearQuery$SpanNearWeight *self, PyObject *args)
          {
            ::java::util::Map a0((jobject) NULL);
            PyTypeObject **p0;

            if (!parseArgs(args, "K", ::java::util::Map::initializeClass, &a0, &p0, ::java::util::t_Map::parameters_))
            {
              OBJ_CALL(self->object.extractTermStates(a0));
              Py_RETURN_NONE;
            }

            return callSuper(PY_TYPE(SpanNearQuery$SpanNearWeight), (PyObject *) self, "extractTermStates", args, 2);
          }

          static PyObject *t_SpanNearQuery$SpanNearWeight_extractTerms(t_SpanNearQuery$SpanNearWeight *self, PyObject *args)
          {
            ::java::util::Set a0((jobject) NULL);
            PyTypeObject **p0;

            if (!parseArgs(args, "K", ::java::util::Set::initializeClass, &a0, &p0, ::java::util::t_Set::parameters_))
            {
              OBJ_CALL(self->object.extractTerms(a0));
              Py_RETURN_NONE;
            }

            return callSuper(PY_TYPE(SpanNearQuery$SpanNearWeight), (PyObject *) self, "extractTerms", args, 2);
          }

          static PyObject *t_SpanNearQuery$SpanNearWeight_getSpans(t_SpanNearQuery$SpanNearWeight *self, PyObject *args)
          {
            ::org::apache::lucene::index::LeafReaderContext a0((jobject) NULL);
            ::org::apache::lucene::search::spans::SpanWeight$Postings a1((jobject) NULL);
            PyTypeObject **p1;
            ::org::apache::lucene::search::spans::Spans result((jobject) NULL);

            if (!parseArgs(args, "kK", ::org::apache::lucene::index::LeafReaderContext::initializeClass, ::org::apache::lucene::search::spans::SpanWeight$Postings::initializeClass, &a0, &a1, &p1, ::org::apache::lucene::search::spans::t_SpanWeight$Postings::parameters_))
            {
              OBJ_CALL(result = self->object.getSpans(a0, a1));
              return ::org::apache::lucene::search::spans::t_Spans::wrap_Object(result);
            }

            return callSuper(PY_TYPE(SpanNearQuery$SpanNearWeight), (PyObject *) self, "getSpans", args, 2);
          }

          static PyObject *t_SpanNearQuery$SpanNearWeight_isCacheable(t_SpanNearQuery$SpanNearWeight *self, PyObject *args)
          {
            ::org::apache::lucene::index::LeafReaderContext a0((jobject) NULL);
            jboolean result;

            if (!parseArgs(args, "k", ::org::apache::lucene::index::LeafReaderContext::initializeClass, &a0))
            {
              OBJ_CALL(result = self->object.isCacheable(a0));
              Py_RETURN_BOOL(result);
            }

            return callSuper(PY_TYPE(SpanNearQuery$SpanNearWeight), (PyObject *) self, "isCacheable", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/egothor/stemmer/Row.h"
#include "java/lang/Class.h"
#include "java/io/PrintStream.h"
#include "java/io/DataOutput.h"
#include "java/lang/Character.h"
#include "java/io/IOException.h"
#include "java/io/DataInput.h"
#include "JArray.h"

namespace org {
  namespace egothor {
    namespace stemmer {

      ::java::lang::Class *Row::class$ = NULL;
      jmethodID *Row::mids$ = NULL;
      bool Row::live$ = false;

      jclass Row::initializeClass(bool getOnly)
      {
        if (getOnly)
          return (jclass) (live$ ? class$->this$ : NULL);
        if (class$ == NULL)
        {
          jclass cls = (jclass) env->findClass("org/egothor/stemmer/Row");

          mids$ = new jmethodID[max_mid];
          mids$[mid_init$_f2cc1bce94666404] = env->getMethodID(cls, "<init>", "()V");
          mids$[mid_init$_e764c090f1e602d9] = env->getMethodID(cls, "<init>", "(Ljava/io/DataInput;)V");
          mids$[mid_getCells_9972fcc56b44e79d] = env->getMethodID(cls, "getCells", "()I");
          mids$[mid_getCellsPnt_9972fcc56b44e79d] = env->getMethodID(cls, "getCellsPnt", "()I");
          mids$[mid_getCellsVal_9972fcc56b44e79d] = env->getMethodID(cls, "getCellsVal", "()I");
          mids$[mid_getCmd_1e2c3e1773615084] = env->getMethodID(cls, "getCmd", "(Ljava/lang/Character;)I");
          mids$[mid_getCnt_1e2c3e1773615084] = env->getMethodID(cls, "getCnt", "(Ljava/lang/Character;)I");
          mids$[mid_getRef_1e2c3e1773615084] = env->getMethodID(cls, "getRef", "(Ljava/lang/Character;)I");
          mids$[mid_print_51d7bcb97eea24e3] = env->getMethodID(cls, "print", "(Ljava/io/PrintStream;)V");
          mids$[mid_setCmd_91ddcfce6853346b] = env->getMethodID(cls, "setCmd", "(Ljava/lang/Character;I)V");
          mids$[mid_setRef_91ddcfce6853346b] = env->getMethodID(cls, "setRef", "(Ljava/lang/Character;I)V");
          mids$[mid_store_d7f8caf61d54d699] = env->getMethodID(cls, "store", "(Ljava/io/DataOutput;)V");
          mids$[mid_uniformCmd_07672f3f11b6ddc5] = env->getMethodID(cls, "uniformCmd", "(Z)I");

          class$ = new ::java::lang::Class(cls);
          live$ = true;
        }
        return (jclass) class$->this$;
      }

      Row::Row() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_f2cc1bce94666404)) {}

      Row::Row(const ::java::io::DataInput & a0) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_e764c090f1e602d9, a0.this$)) {}

      jint Row::getCells() const
      {
        return env->callIntMethod(this$, mids$[mid_getCells_9972fcc56b44e79d]);
      }

      jint Row::getCellsPnt() const
      {
        return env->callIntMethod(this$, mids$[mid_getCellsPnt_9972fcc56b44e79d]);
      }

      jint Row::getCellsVal() const
      {
        return env->callIntMethod(this$, mids$[mid_getCellsVal_9972fcc56b44e79d]);
      }

      jint Row::getCmd(const ::java::lang::Character & a0) const
      {
        return env->callIntMethod(this$, mids$[mid_getCmd_1e2c3e1773615084], a0.this$);
      }

      jint Row::getCnt(const ::java::lang::Character & a0) const
      {
        return env->callIntMethod(this$, mids$[mid_getCnt_1e2c3e1773615084], a0.this$);
      }

      jint Row::getRef(const ::java::lang::Character & a0) const
      {
        return env->callIntMethod(this$, mids$[mid_getRef_1e2c3e1773615084], a0.this$);
      }

      void Row::print(const ::java::io::PrintStream & a0) const
      {
        env->callVoidMethod(this$, mids$[mid_print_51d7bcb97eea24e3], a0.this$);
      }

      void Row::setCmd(const ::java::lang::Character & a0, jint a1) const
      {
        env->callVoidMethod(this$, mids$[mid_setCmd_91ddcfce6853346b], a0.this$, a1);
      }

      void Row::setRef(const ::java::lang::Character & a0, jint a1) const
      {
        env->callVoidMethod(this$, mids$[mid_setRef_91ddcfce6853346b], a0.this$, a1);
      }

      void Row::store(const ::java::io::DataOutput & a0) const
      {
        env->callVoidMethod(this$, mids$[mid_store_d7f8caf61d54d699], a0.this$);
      }

      jint Row::uniformCmd(jboolean a0) const
      {
        return env->callIntMethod(this$, mids$[mid_uniformCmd_07672f3f11b6ddc5], a0);
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace egothor {
    namespace stemmer {
      static PyObject *t_Row_cast_(PyTypeObject *type, PyObject *arg);
      static PyObject *t_Row_instance_(PyTypeObject *type, PyObject *arg);
      static int t_Row_init_(t_Row *self, PyObject *args, PyObject *kwds);
      static PyObject *t_Row_getCells(t_Row *self);
      static PyObject *t_Row_getCellsPnt(t_Row *self);
      static PyObject *t_Row_getCellsVal(t_Row *self);
      static PyObject *t_Row_getCmd(t_Row *self, PyObject *arg);
      static PyObject *t_Row_getCnt(t_Row *self, PyObject *arg);
      static PyObject *t_Row_getRef(t_Row *self, PyObject *arg);
      static PyObject *t_Row_print(t_Row *self, PyObject *arg);
      static PyObject *t_Row_setCmd(t_Row *self, PyObject *args);
      static PyObject *t_Row_setRef(t_Row *self, PyObject *args);
      static PyObject *t_Row_store(t_Row *self, PyObject *arg);
      static PyObject *t_Row_uniformCmd(t_Row *self, PyObject *arg);
      static PyObject *t_Row_get__cells(t_Row *self, void *data);
      static PyObject *t_Row_get__cellsPnt(t_Row *self, void *data);
      static PyObject *t_Row_get__cellsVal(t_Row *self, void *data);
      static PyGetSetDef t_Row__fields_[] = {
        DECLARE_GET_FIELD(t_Row, cells),
        DECLARE_GET_FIELD(t_Row, cellsPnt),
        DECLARE_GET_FIELD(t_Row, cellsVal),
        { NULL, NULL, NULL, NULL, NULL }
      };

      static PyMethodDef t_Row__methods_[] = {
        DECLARE_METHOD(t_Row, cast_, METH_O | METH_CLASS),
        DECLARE_METHOD(t_Row, instance_, METH_O | METH_CLASS),
        DECLARE_METHOD(t_Row, getCells, METH_NOARGS),
        DECLARE_METHOD(t_Row, getCellsPnt, METH_NOARGS),
        DECLARE_METHOD(t_Row, getCellsVal, METH_NOARGS),
        DECLARE_METHOD(t_Row, getCmd, METH_O),
        DECLARE_METHOD(t_Row, getCnt, METH_O),
        DECLARE_METHOD(t_Row, getRef, METH_O),
        DECLARE_METHOD(t_Row, print, METH_O),
        DECLARE_METHOD(t_Row, setCmd, METH_VARARGS),
        DECLARE_METHOD(t_Row, setRef, METH_VARARGS),
        DECLARE_METHOD(t_Row, store, METH_O),
        DECLARE_METHOD(t_Row, uniformCmd, METH_O),
        { NULL, NULL, 0, NULL }
      };

      static PyType_Slot PY_TYPE_SLOTS(Row)[] = {
        { Py_tp_methods, t_Row__methods_ },
        { Py_tp_init, (void *) t_Row_init_ },
        { Py_tp_getset, t_Row__fields_ },
        { 0, NULL }
      };

      static PyType_Def *PY_TYPE_BASES(Row)[] = {
        &PY_TYPE_DEF(::java::lang::Object),
        NULL
      };

      DEFINE_TYPE(Row, t_Row, Row);

      void t_Row::install(PyObject *module)
      {
        installType(&PY_TYPE(Row), &PY_TYPE_DEF(Row), module, "Row", 0);
      }

      void t_Row::initialize(PyObject *module)
      {
        PyObject_SetAttrString((PyObject *) PY_TYPE(Row), "class_", make_descriptor(Row::initializeClass, 1));
        PyObject_SetAttrString((PyObject *) PY_TYPE(Row), "wrapfn_", make_descriptor(t_Row::wrap_jobject));
        PyObject_SetAttrString((PyObject *) PY_TYPE(Row), "boxfn_", make_descriptor(boxObject));
      }

      static PyObject *t_Row_cast_(PyTypeObject *type, PyObject *arg)
      {
        if (!(arg = castCheck(arg, Row::initializeClass, 1)))
          return NULL;
        return t_Row::wrap_Object(Row(((t_Row *) arg)->object.this$));
      }
      static PyObject *t_Row_instance_(PyTypeObject *type, PyObject *arg)
      {
        if (!castCheck(arg, Row::initializeClass, 0))
          Py_RETURN_FALSE;
        Py_RETURN_TRUE;
      }

      static int t_Row_init_(t_Row *self, PyObject *args, PyObject *kwds)
      {
        switch (PyTuple_GET_SIZE(args)) {
         case 0:
          {
            Row object((jobject) NULL);

            INT_CALL(object = Row());
            self->object = object;
            break;
          }
         case 1:
          {
            ::java::io::DataInput a0((jobject) NULL);
            Row object((jobject) NULL);

            if (!parseArgs(args, "k", ::java::io::DataInput::initializeClass, &a0))
            {
              INT_CALL(object = Row(a0));
              self->object = object;
              break;
            }
          }
         default:
          PyErr_SetArgsError((PyObject *) self, "__init__", args);
          return -1;
        }

        return 0;
      }

      static PyObject *t_Row_getCells(t_Row *self)
      {
        jint result;
        OBJ_CALL(result = self->object.getCells());
        return PyLong_FromLong((long) result);
      }

      static PyObject *t_Row_getCellsPnt(t_Row *self)
      {
        jint result;
        OBJ_CALL(result = self->object.getCellsPnt());
        return PyLong_FromLong((long) result);
      }

      static PyObject *t_Row_getCellsVal(t_Row *self)
      {
        jint result;
        OBJ_CALL(result = self->object.getCellsVal());
        return PyLong_FromLong((long) result);
      }

      static PyObject *t_Row_getCmd(t_Row *self, PyObject *arg)
      {
        ::java::lang::Character a0((jobject) NULL);
        jint result;

        if (!parseArg(arg, "O", ::java::lang::PY_TYPE(Character), &a0))
        {
          OBJ_CALL(result = self->object.getCmd(a0));
          return PyLong_FromLong((long) result);
        }

        PyErr_SetArgsError((PyObject *) self, "getCmd", arg);
        return NULL;
      }

      static PyObject *t_Row_getCnt(t_Row *self, PyObject *arg)
      {
        ::java::lang::Character a0((jobject) NULL);
        jint result;

        if (!parseArg(arg, "O", ::java::lang::PY_TYPE(Character), &a0))
        {
          OBJ_CALL(result = self->object.getCnt(a0));
          return PyLong_FromLong((long) result);
        }

        PyErr_SetArgsError((PyObject *) self, "getCnt", arg);
        return NULL;
      }

      static PyObject *t_Row_getRef(t_Row *self, PyObject *arg)
      {
        ::java::lang::Character a0((jobject) NULL);
        jint result;

        if (!parseArg(arg, "O", ::java::lang::PY_TYPE(Character), &a0))
        {
          OBJ_CALL(result = self->object.getRef(a0));
          return PyLong_FromLong((long) result);
        }

        PyErr_SetArgsError((PyObject *) self, "getRef", arg);
        return NULL;
      }

      static PyObject *t_Row_print(t_Row *self, PyObject *arg)
      {
        ::java::io::PrintStream a0((jobject) NULL);

        if (!parseArg(arg, "k", ::java::io::PrintStream::initializeClass, &a0))
        {
          OBJ_CALL(self->object.print(a0));
          Py_RETURN_NONE;
        }

        PyErr_SetArgsError((PyObject *) self, "print", arg);
        return NULL;
      }

      static PyObject *t_Row_setCmd(t_Row *self, PyObject *args)
      {
        ::java::lang::Character a0((jobject) NULL);
        jint a1;

        if (!parseArgs(args, "OI", ::java::lang::PY_TYPE(Character), &a0, &a1))
        {
          OBJ_CALL(self->object.setCmd(a0, a1));
          Py_RETURN_NONE;
        }

        PyErr_SetArgsError((PyObject *) self, "setCmd", args);
        return NULL;
      }

      static PyObject *t_Row_setRef(t_Row *self, PyObject *args)
      {
        ::java::lang::Character a0((jobject) NULL);
        jint a1;

        if (!parseArgs(args, "OI", ::java::lang::PY_TYPE(Character), &a0, &a1))
        {
          OBJ_CALL(self->object.setRef(a0, a1));
          Py_RETURN_NONE;
        }

        PyErr_SetArgsError((PyObject *) self, "setRef", args);
        return NULL;
      }

      static PyObject *t_Row_store(t_Row *self, PyObject *arg)
      {
        ::java::io::DataOutput a0((jobject) NULL);

        if (!parseArg(arg, "k", ::java::io::DataOutput::initializeClass, &a0))
        {
          OBJ_CALL(self->object.store(a0));
          Py_RETURN_NONE;
        }

        PyErr_SetArgsError((PyObject *) self, "store", arg);
        return NULL;
      }

      static PyObject *t_Row_uniformCmd(t_Row *self, PyObject *arg)
      {
        jboolean a0;
        jint result;

        if (!parseArg(arg, "Z", &a0))
        {
          OBJ_CALL(result = self->object.uniformCmd(a0));
          return PyLong_FromLong((long) result);
        }

        PyErr_SetArgsError((PyObject *) self, "uniformCmd", arg);
        return NULL;
      }

      static PyObject *t_Row_get__cells(t_Row *self, void *data)
      {
        jint value;
        OBJ_CALL(value = self->object.getCells());
        return PyLong_FromLong((long) value);
      }

      static PyObject *t_Row_get__cellsPnt(t_Row *self, void *data)
      {
        jint value;
        OBJ_CALL(value = self->object.getCellsPnt());
        return PyLong_FromLong((long) value);
      }

      static PyObject *t_Row_get__cellsVal(t_Row *self, void *data)
      {
        jint value;
        OBJ_CALL(value = self->object.getCellsVal());
        return PyLong_FromLong((long) value);
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/util/BitSet.h"
#include "org/apache/lucene/util/Bits.h"
#include "org/apache/lucene/util/Accountable.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/search/DocIdSetIterator.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/util/BitSet.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {

        ::java::lang::Class *BitSet::class$ = NULL;
        jmethodID *BitSet::mids$ = NULL;
        bool BitSet::live$ = false;

        jclass BitSet::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/util/BitSet");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_f2cc1bce94666404] = env->getMethodID(cls, "<init>", "()V");
            mids$[mid_approximateCardinality_9972fcc56b44e79d] = env->getMethodID(cls, "approximateCardinality", "()I");
            mids$[mid_cardinality_9972fcc56b44e79d] = env->getMethodID(cls, "cardinality", "()I");
            mids$[mid_clear_040c4cd0390c5aff] = env->getMethodID(cls, "clear", "(I)V");
            mids$[mid_clear_438c62480c481c65] = env->getMethodID(cls, "clear", "(II)V");
            mids$[mid_nextSetBit_1e143afe1894d213] = env->getMethodID(cls, "nextSetBit", "(I)I");
            mids$[mid_of_5c55adea82bf1d76] = env->getStaticMethodID(cls, "of", "(Lorg/apache/lucene/search/DocIdSetIterator;I)Lorg/apache/lucene/util/BitSet;");
            mids$[mid_or_da04cf8efc6499af] = env->getMethodID(cls, "or", "(Lorg/apache/lucene/search/DocIdSetIterator;)V");
            mids$[mid_prevSetBit_1e143afe1894d213] = env->getMethodID(cls, "prevSetBit", "(I)I");
            mids$[mid_set_040c4cd0390c5aff] = env->getMethodID(cls, "set", "(I)V");
            mids$[mid_checkUnpositioned_da04cf8efc6499af] = env->getMethodID(cls, "checkUnpositioned", "(Lorg/apache/lucene/search/DocIdSetIterator;)V");

            class$ = new ::java::lang::Class(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        BitSet::BitSet() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_f2cc1bce94666404)) {}

        jint BitSet::approximateCardinality() const
        {
          return env->callIntMethod(this$, mids$[mid_approximateCardinality_9972fcc56b44e79d]);
        }

        jint BitSet::cardinality() const
        {
          return env->callIntMethod(this$, mids$[mid_cardinality_9972fcc56b44e79d]);
        }

        void BitSet::clear(jint a0) const
        {
          env->callVoidMethod(this$, mids$[mid_clear_040c4cd0390c5aff], a0);
        }

        void BitSet::clear(jint a0, jint a1) const
        {
          env->callVoidMethod(this$, mids$[mid_clear_438c62480c481c65], a0, a1);
        }

        jint BitSet::nextSetBit(jint a0) const
        {
          return env->callIntMethod(this$, mids$[mid_nextSetBit_1e143afe1894d213], a0);
        }

        BitSet BitSet::of(const ::org::apache::lucene::search::DocIdSetIterator & a0, jint a1)
        {
          jclass cls = env->getClass(initializeClass);
          return BitSet(env->callStaticObjectMethod(cls, mids$[mid_of_5c55adea82bf1d76], a0.this$, a1));
        }

        void BitSet::or$(const ::org::apache::lucene::search::DocIdSetIterator & a0) const
        {
          env->callVoidMethod(this$, mids$[mid_or_da04cf8efc6499af], a0.this$);
        }

        jint BitSet::prevSetBit(jint a0) const
        {
          return env->callIntMethod(this$, mids$[mid_prevSetBit_1e143afe1894d213], a0);
        }

        void BitSet::set(jint a0) const
        {
          env->callVoidMethod(this$, mids$[mid_set_040c4cd0390c5aff], a0);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        static PyObject *t_BitSet_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_BitSet_instance_(PyTypeObject *type, PyObject *arg);
        static int t_BitSet_init_(t_BitSet *self, PyObject *args, PyObject *kwds);
        static PyObject *t_BitSet_approximateCardinality(t_BitSet *self);
        static PyObject *t_BitSet_cardinality(t_BitSet *self);
        static PyObject *t_BitSet_clear(t_BitSet *self, PyObject *args);
        static PyObject *t_BitSet_nextSetBit(t_BitSet *self, PyObject *arg);
        static PyObject *t_BitSet_of(PyTypeObject *type, PyObject *args);
        static PyObject *t_BitSet_or(t_BitSet *self, PyObject *arg);
        static PyObject *t_BitSet_prevSetBit(t_BitSet *self, PyObject *arg);
        static PyObject *t_BitSet_set(t_BitSet *self, PyObject *arg);

        static PyMethodDef t_BitSet__methods_[] = {
          DECLARE_METHOD(t_BitSet, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_BitSet, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_BitSet, approximateCardinality, METH_NOARGS),
          DECLARE_METHOD(t_BitSet, cardinality, METH_NOARGS),
          DECLARE_METHOD(t_BitSet, clear, METH_VARARGS),
          DECLARE_METHOD(t_BitSet, nextSetBit, METH_O),
          DECLARE_METHOD(t_BitSet, of, METH_VARARGS | METH_CLASS),
          DECLARE_METHOD(t_BitSet, or, METH_O),
          DECLARE_METHOD(t_BitSet, prevSetBit, METH_O),
          DECLARE_METHOD(t_BitSet, set, METH_O),
          { NULL, NULL, 0, NULL }
        };

        static PyType_Slot PY_TYPE_SLOTS(BitSet)[] = {
          { Py_tp_methods, t_BitSet__methods_ },
          { Py_tp_init, (void *) t_BitSet_init_ },
          { 0, NULL }
        };

        static PyType_Def *PY_TYPE_BASES(BitSet)[] = {
          &PY_TYPE_DEF(::java::lang::Object),
          NULL
        };

        DEFINE_TYPE(BitSet, t_BitSet, BitSet);

        void t_BitSet::install(PyObject *module)
        {
          installType(&PY_TYPE(BitSet), &PY_TYPE_DEF(BitSet), module, "BitSet", 0);
        }

        void t_BitSet::initialize(PyObject *module)
        {
          PyObject_SetAttrString((PyObject *) PY_TYPE(BitSet), "class_", make_descriptor(BitSet::initializeClass, 1));
          PyObject_SetAttrString((PyObject *) PY_TYPE(BitSet), "wrapfn_", make_descriptor(t_BitSet::wrap_jobject));
          PyObject_SetAttrString((PyObject *) PY_TYPE(BitSet), "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_BitSet_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, BitSet::initializeClass, 1)))
            return NULL;
          return t_BitSet::wrap_Object(BitSet(((t_BitSet *) arg)->object.this$));
        }
        static PyObject *t_BitSet_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, BitSet::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_BitSet_init_(t_BitSet *self, PyObject *args, PyObject *kwds)
        {
          BitSet object((jobject) NULL);

          INT_CALL(object = BitSet());
          self->object = object;

          return 0;
        }

        static PyObject *t_BitSet_approximateCardinality(t_BitSet *self)
        {
          jint result;
          OBJ_CALL(result = self->object.approximateCardinality());
          return PyLong_FromLong((long) result);
        }

        static PyObject *t_BitSet_cardinality(t_BitSet *self)
        {
          jint result;
          OBJ_CALL(result = self->object.cardinality());
          return PyLong_FromLong((long) result);
        }

        static PyObject *t_BitSet_clear(t_BitSet *self, PyObject *args)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 1:
            {
              jint a0;

              if (!parseArgs(args, "I", &a0))
              {
                OBJ_CALL(self->object.clear(a0));
                Py_RETURN_NONE;
              }
            }
            break;
           case 2:
            {
              jint a0;
              jint a1;

              if (!parseArgs(args, "II", &a0, &a1))
              {
                OBJ_CALL(self->object.clear(a0, a1));
                Py_RETURN_NONE;
              }
            }
          }

          PyErr_SetArgsError((PyObject *) self, "clear", args);
          return NULL;
        }

        static PyObject *t_BitSet_nextSetBit(t_BitSet *self, PyObject *arg)
        {
          jint a0;
          jint result;

          if (!parseArg(arg, "I", &a0))
          {
            OBJ_CALL(result = self->object.nextSetBit(a0));
            return PyLong_FromLong((long) result);
          }

          PyErr_SetArgsError((PyObject *) self, "nextSetBit", arg);
          return NULL;
        }

        static PyObject *t_BitSet_of(PyTypeObject *type, PyObject *args)
        {
          ::org::apache::lucene::search::DocIdSetIterator a0((jobject) NULL);
          jint a1;
          BitSet result((jobject) NULL);

          if (!parseArgs(args, "kI", ::org::apache::lucene::search::DocIdSetIterator::initializeClass, &a0, &a1))
          {
            OBJ_CALL(result = ::org::apache::lucene::util::BitSet::of(a0, a1));
            return t_BitSet::wrap_Object(result);
          }

          PyErr_SetArgsError(type, "of", args);
          return NULL;
        }

        static PyObject *t_BitSet_or(t_BitSet *self, PyObject *arg)
        {
          ::org::apache::lucene::search::DocIdSetIterator a0((jobject) NULL);

          if (!parseArg(arg, "k", ::org::apache::lucene::search::DocIdSetIterator::initializeClass, &a0))
          {
            OBJ_CALL(self->object.or$(a0));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "or", arg);
          return NULL;
        }

        static PyObject *t_BitSet_prevSetBit(t_BitSet *self, PyObject *arg)
        {
          jint a0;
          jint result;

          if (!parseArg(arg, "I", &a0))
          {
            OBJ_CALL(result = self->object.prevSetBit(a0));
            return PyLong_FromLong((long) result);
          }

          PyErr_SetArgsError((PyObject *) self, "prevSetBit", arg);
          return NULL;
        }

        static PyObject *t_BitSet_set(t_BitSet *self, PyObject *arg)
        {
          jint a0;

          if (!parseArg(arg, "I", &a0))
          {
            OBJ_CALL(self->object.set(a0));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "set", arg);
          return NULL;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/grouping/ValueSourceGroupSelector.h"
#include "java/util/Map.h"
#include "java/util/Collection.h"
#include "org/apache/lucene/index/LeafReaderContext.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/search/Scorable.h"
#include "org/apache/lucene/util/mutable/MutableValue.h"
#include "java/lang/Object.h"
#include "org/apache/lucene/search/grouping/SearchGroup.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/queries/function/ValueSource.h"
#include "org/apache/lucene/search/grouping/GroupSelector$State.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace grouping {

          ::java::lang::Class *ValueSourceGroupSelector::class$ = NULL;
          jmethodID *ValueSourceGroupSelector::mids$ = NULL;
          bool ValueSourceGroupSelector::live$ = false;

          jclass ValueSourceGroupSelector::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/search/grouping/ValueSourceGroupSelector");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_993be4c0868840e8] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/queries/function/ValueSource;Ljava/util/Map;)V");
              mids$[mid_advanceTo_ddaa3f14f8aeda7d] = env->getMethodID(cls, "advanceTo", "(I)Lorg/apache/lucene/search/grouping/GroupSelector$State;");
              mids$[mid_copyValue_b6a1db04136f7d9b] = env->getMethodID(cls, "copyValue", "()Lorg/apache/lucene/util/mutable/MutableValue;");
              mids$[mid_currentValue_b6a1db04136f7d9b] = env->getMethodID(cls, "currentValue", "()Lorg/apache/lucene/util/mutable/MutableValue;");
              mids$[mid_setGroups_50bc3ddc62a19f2d] = env->getMethodID(cls, "setGroups", "(Ljava/util/Collection;)V");
              mids$[mid_setNextReader_8747e0e89febf88d] = env->getMethodID(cls, "setNextReader", "(Lorg/apache/lucene/index/LeafReaderContext;)V");
              mids$[mid_setScorer_57a565cc0113e133] = env->getMethodID(cls, "setScorer", "(Lorg/apache/lucene/search/Scorable;)V");

              class$ = new ::java::lang::Class(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          ValueSourceGroupSelector::ValueSourceGroupSelector(const ::org::apache::lucene::queries::function::ValueSource & a0, const ::java::util::Map & a1) : ::org::apache::lucene::search::grouping::GroupSelector(env->newObject(initializeClass, &mids$, mid_init$_993be4c0868840e8, a0.this$, a1.this$)) {}

          ::org::apache::lucene::search::grouping::GroupSelector$State ValueSourceGroupSelector::advanceTo(jint a0) const
          {
            return ::org::apache::lucene::search::grouping::GroupSelector$State(env->callObjectMethod(this$, mids$[mid_advanceTo_ddaa3f14f8aeda7d], a0));
          }

          ::org::apache::lucene::util::mutable$::MutableValue ValueSourceGroupSelector::copyValue() const
          {
            return ::org::apache::lucene::util::mutable$::MutableValue(env->callObjectMethod(this$, mids$[mid_copyValue_b6a1db04136f7d9b]));
          }

          ::org::apache::lucene::util::mutable$::MutableValue ValueSourceGroupSelector::currentValue() const
          {
            return ::org::apache::lucene::util::mutable$::MutableValue(env->callObjectMethod(this$, mids$[mid_currentValue_b6a1db04136f7d9b]));
          }

          void ValueSourceGroupSelector::setGroups(const ::java::util::Collection & a0) const
          {
            env->callVoidMethod(this$, mids$[mid_setGroups_50bc3ddc62a19f2d], a0.this$);
          }

          void ValueSourceGroupSelector::setNextReader(const ::org::apache::lucene::index::LeafReaderContext & a0) const
          {
            env->callVoidMethod(this$, mids$[mid_setNextReader_8747e0e89febf88d], a0.this$);
          }

          void ValueSourceGroupSelector::setScorer(const ::org::apache::lucene::search::Scorable & a0) const
          {
            env->callVoidMethod(this$, mids$[mid_setScorer_57a565cc0113e133], a0.this$);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace grouping {
          static PyObject *t_ValueSourceGroupSelector_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_ValueSourceGroupSelector_instance_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_ValueSourceGroupSelector_of_(t_ValueSourceGroupSelector *self, PyObject *args);
          static int t_ValueSourceGroupSelector_init_(t_ValueSourceGroupSelector *self, PyObject *args, PyObject *kwds);
          static PyObject *t_ValueSourceGroupSelector_advanceTo(t_ValueSourceGroupSelector *self, PyObject *args);
          static PyObject *t_ValueSourceGroupSelector_copyValue(t_ValueSourceGroupSelector *self, PyObject *args);
          static PyObject *t_ValueSourceGroupSelector_currentValue(t_ValueSourceGroupSelector *self, PyObject *args);
          static PyObject *t_ValueSourceGroupSelector_setGroups(t_ValueSourceGroupSelector *self, PyObject *args);
          static PyObject *t_ValueSourceGroupSelector_setNextReader(t_ValueSourceGroupSelector *self, PyObject *args);
          static PyObject *t_ValueSourceGroupSelector_setScorer(t_ValueSourceGroupSelector *self, PyObject *args);
          static int t_ValueSourceGroupSelector_set__groups(t_ValueSourceGroupSelector *self, PyObject *arg, void *data);
          static int t_ValueSourceGroupSelector_set__nextReader(t_ValueSourceGroupSelector *self, PyObject *arg, void *data);
          static int t_ValueSourceGroupSelector_set__scorer(t_ValueSourceGroupSelector *self, PyObject *arg, void *data);
          static PyObject *t_ValueSourceGroupSelector_get__parameters_(t_ValueSourceGroupSelector *self, void *data);
          static PyGetSetDef t_ValueSourceGroupSelector__fields_[] = {
            DECLARE_SET_FIELD(t_ValueSourceGroupSelector, groups),
            DECLARE_SET_FIELD(t_ValueSourceGroupSelector, nextReader),
            DECLARE_SET_FIELD(t_ValueSourceGroupSelector, scorer),
            DECLARE_GET_FIELD(t_ValueSourceGroupSelector, parameters_),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_ValueSourceGroupSelector__methods_[] = {
            DECLARE_METHOD(t_ValueSourceGroupSelector, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_ValueSourceGroupSelector, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_ValueSourceGroupSelector, of_, METH_VARARGS),
            DECLARE_METHOD(t_ValueSourceGroupSelector, advanceTo, METH_VARARGS),
            DECLARE_METHOD(t_ValueSourceGroupSelector, copyValue, METH_VARARGS),
            DECLARE_METHOD(t_ValueSourceGroupSelector, currentValue, METH_VARARGS),
            DECLARE_METHOD(t_ValueSourceGroupSelector, setGroups, METH_VARARGS),
            DECLARE_METHOD(t_ValueSourceGroupSelector, setNextReader, METH_VARARGS),
            DECLARE_METHOD(t_ValueSourceGroupSelector, setScorer, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          static PyType_Slot PY_TYPE_SLOTS(ValueSourceGroupSelector)[] = {
            { Py_tp_methods, t_ValueSourceGroupSelector__methods_ },
            { Py_tp_init, (void *) t_ValueSourceGroupSelector_init_ },
            { Py_tp_getset, t_ValueSourceGroupSelector__fields_ },
            { 0, NULL }
          };

          static PyType_Def *PY_TYPE_BASES(ValueSourceGroupSelector)[] = {
            &PY_TYPE_DEF(::org::apache::lucene::search::grouping::GroupSelector),
            NULL
          };

          DEFINE_TYPE(ValueSourceGroupSelector, t_ValueSourceGroupSelector, ValueSourceGroupSelector);
          PyObject *t_ValueSourceGroupSelector::wrap_Object(const ValueSourceGroupSelector& object, PyTypeObject *p0)
          {
            PyObject *obj = t_ValueSourceGroupSelector::wrap_Object(object);
            if (obj != NULL && obj != Py_None)
            {
              t_ValueSourceGroupSelector *self = (t_ValueSourceGroupSelector *) obj;
              self->parameters[0] = p0;
            }
            return obj;
          }

          PyObject *t_ValueSourceGroupSelector::wrap_jobject(const jobject& object, PyTypeObject *p0)
          {
            PyObject *obj = t_ValueSourceGroupSelector::wrap_jobject(object);
            if (obj != NULL && obj != Py_None)
            {
              t_ValueSourceGroupSelector *self = (t_ValueSourceGroupSelector *) obj;
              self->parameters[0] = p0;
            }
            return obj;
          }

          void t_ValueSourceGroupSelector::install(PyObject *module)
          {
            installType(&PY_TYPE(ValueSourceGroupSelector), &PY_TYPE_DEF(ValueSourceGroupSelector), module, "ValueSourceGroupSelector", 0);
          }

          void t_ValueSourceGroupSelector::initialize(PyObject *module)
          {
            PyObject_SetAttrString((PyObject *) PY_TYPE(ValueSourceGroupSelector), "class_", make_descriptor(ValueSourceGroupSelector::initializeClass, 1));
            PyObject_SetAttrString((PyObject *) PY_TYPE(ValueSourceGroupSelector), "wrapfn_", make_descriptor(t_ValueSourceGroupSelector::wrap_jobject));
            PyObject_SetAttrString((PyObject *) PY_TYPE(ValueSourceGroupSelector), "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_ValueSourceGroupSelector_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, ValueSourceGroupSelector::initializeClass, 1)))
              return NULL;
            return t_ValueSourceGroupSelector::wrap_Object(ValueSourceGroupSelector(((t_ValueSourceGroupSelector *) arg)->object.this$));
          }
          static PyObject *t_ValueSourceGroupSelector_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, ValueSourceGroupSelector::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static PyObject *t_ValueSourceGroupSelector_of_(t_ValueSourceGroupSelector *self, PyObject *args)
          {
            if (!parseArg(args, "T", 1, &(self->parameters)))
              Py_RETURN_SELF;
            return PyErr_SetArgsError((PyObject *) self, "of_", args);
          }

          static int t_ValueSourceGroupSelector_init_(t_ValueSourceGroupSelector *self, PyObject *args, PyObject *kwds)
          {
            ::org::apache::lucene::queries::function::ValueSource a0((jobject) NULL);
            ::java::util::Map a1((jobject) NULL);
            PyTypeObject **p1;
            ValueSourceGroupSelector object((jobject) NULL);

            if (!parseArgs(args, "kK", ::org::apache::lucene::queries::function::ValueSource::initializeClass, ::java::util::Map::initializeClass, &a0, &a1, &p1, ::java::util::t_Map::parameters_))
            {
              INT_CALL(object = ValueSourceGroupSelector(a0, a1));
              self->object = object;
              self->parameters[0] = ::org::apache::lucene::util::mutable$::PY_TYPE(MutableValue);
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_ValueSourceGroupSelector_advanceTo(t_ValueSourceGroupSelector *self, PyObject *args)
          {
            jint a0;
            ::org::apache::lucene::search::grouping::GroupSelector$State result((jobject) NULL);

            if (!parseArgs(args, "I", &a0))
            {
              OBJ_CALL(result = self->object.advanceTo(a0));
              return ::org::apache::lucene::search::grouping::t_GroupSelector$State::wrap_Object(result);
            }

            return callSuper(PY_TYPE(ValueSourceGroupSelector), (PyObject *) self, "advanceTo", args, 2);
          }

          static PyObject *t_ValueSourceGroupSelector_copyValue(t_ValueSourceGroupSelector *self, PyObject *args)
          {
            ::org::apache::lucene::util::mutable$::MutableValue result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.copyValue());
              return ::org::apache::lucene::util::mutable$::t_MutableValue::wrap_Object(result);
            }

            return callSuper(PY_TYPE(ValueSourceGroupSelector), (PyObject *) self, "copyValue", args, 2);
          }

          static PyObject *t_ValueSourceGroupSelector_currentValue(t_ValueSourceGroupSelector *self, PyObject *args)
          {
            ::org::apache::lucene::util::mutable$::MutableValue result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.currentValue());
              return ::org::apache::lucene::util::mutable$::t_MutableValue::wrap_Object(result);
            }

            return callSuper(PY_TYPE(ValueSourceGroupSelector), (PyObject *) self, "currentValue", args, 2);
          }

          static PyObject *t_ValueSourceGroupSelector_setGroups(t_ValueSourceGroupSelector *self, PyObject *args)
          {
            ::java::util::Collection a0((jobject) NULL);
            PyTypeObject **p0;

            if (!parseArgs(args, "K", ::java::util::Collection::initializeClass, &a0, &p0, ::java::util::t_Collection::parameters_))
            {
              OBJ_CALL(self->object.setGroups(a0));
              Py_RETURN_NONE;
            }

            return callSuper(PY_TYPE(ValueSourceGroupSelector), (PyObject *) self, "setGroups", args, 2);
          }

          static PyObject *t_ValueSourceGroupSelector_setNextReader(t_ValueSourceGroupSelector *self, PyObject *args)
          {
            ::org::apache::lucene::index::LeafReaderContext a0((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::index::LeafReaderContext::initializeClass, &a0))
            {
              OBJ_CALL(self->object.setNextReader(a0));
              Py_RETURN_NONE;
            }

            return callSuper(PY_TYPE(ValueSourceGroupSelector), (PyObject *) self, "setNextReader", args, 2);
          }

          static PyObject *t_ValueSourceGroupSelector_setScorer(t_ValueSourceGroupSelector *self, PyObject *args)
          {
            ::org::apache::lucene::search::Scorable a0((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::search::Scorable::initializeClass, &a0))
            {
              OBJ_CALL(self->object.setScorer(a0));
              Py_RETURN_NONE;
            }

            return callSuper(PY_TYPE(ValueSourceGroupSelector), (PyObject *) self, "setScorer", args, 2);
          }
          static PyObject *t_ValueSourceGroupSelector_get__parameters_(t_ValueSourceGroupSelector *self, void *data)
          {
            return typeParameters(self->parameters, sizeof(self->parameters));
          }

          static int t_ValueSourceGroupSelector_set__groups(t_ValueSourceGroupSelector *self, PyObject *arg, void *data)
          {
            {
              ::java::util::Collection value((jobject) NULL);
              if (!parseArg(arg, "k", ::java::util::Collection::initializeClass, &value))
              {
                INT_CALL(self->object.setGroups(value));
                return 0;
              }
            }
            PyErr_SetArgsError((PyObject *) self, "groups", arg);
            return -1;
          }

          static int t_ValueSourceGroupSelector_set__nextReader(t_ValueSourceGroupSelector *self, PyObject *arg, void *data)
          {
            {
              ::org::apache::lucene::index::LeafReaderContext value((jobject) NULL);
              if (!parseArg(arg, "k", ::org::apache::lucene::index::LeafReaderContext::initializeClass, &value))
              {
                INT_CALL(self->object.setNextReader(value));
                return 0;
              }
            }
            PyErr_SetArgsError((PyObject *) self, "nextReader", arg);
            return -1;
          }

          static int t_ValueSourceGroupSelector_set__scorer(t_ValueSourceGroupSelector *self, PyObject *arg, void *data)
          {
            {
              ::org::apache::lucene::search::Scorable value((jobject) NULL);
              if (!parseArg(arg, "k", ::org::apache::lucene::search::Scorable::initializeClass, &value))
              {
                INT_CALL(self->object.setScorer(value));
                return 0;
              }
            }
            PyErr_SetArgsError((PyObject *) self, "scorer", arg);
            return -1;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/spatial3d/geom/NormalSquaredDistance.h"
#include "org/apache/lucene/spatial3d/geom/NormalSquaredDistance.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/spatial3d/geom/DistanceStyle.h"
#include "org/apache/lucene/spatial3d/geom/GeoPoint.h"
#include "org/apache/lucene/spatial3d/geom/PlanetModel.h"
#include "org/apache/lucene/spatial3d/geom/Plane.h"
#include "org/apache/lucene/spatial3d/geom/Membership.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace spatial3d {
        namespace geom {

          ::java::lang::Class *NormalSquaredDistance::class$ = NULL;
          jmethodID *NormalSquaredDistance::mids$ = NULL;
          bool NormalSquaredDistance::live$ = false;
          NormalSquaredDistance *NormalSquaredDistance::INSTANCE = NULL;

          jclass NormalSquaredDistance::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/spatial3d/geom/NormalSquaredDistance");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_f2cc1bce94666404] = env->getMethodID(cls, "<init>", "()V");
              mids$[mid_computeDistance_5d9fe562983a5b40] = env->getMethodID(cls, "computeDistance", "(Lorg/apache/lucene/spatial3d/geom/GeoPoint;Lorg/apache/lucene/spatial3d/geom/GeoPoint;)D");
              mids$[mid_computeDistance_1ec77ef423ee02b8] = env->getMethodID(cls, "computeDistance", "(Lorg/apache/lucene/spatial3d/geom/PlanetModel;Lorg/apache/lucene/spatial3d/geom/Plane;Lorg/apache/lucene/spatial3d/geom/GeoPoint;[Lorg/apache/lucene/spatial3d/geom/Membership;)D");
              mids$[mid_computeDistance_9a12f42782ddf048] = env->getMethodID(cls, "computeDistance", "(Lorg/apache/lucene/spatial3d/geom/GeoPoint;DDD)D");
              mids$[mid_computeDistance_e314394bf9f24d4d] = env->getMethodID(cls, "computeDistance", "(Lorg/apache/lucene/spatial3d/geom/PlanetModel;Lorg/apache/lucene/spatial3d/geom/Plane;DDD[Lorg/apache/lucene/spatial3d/geom/Membership;)D");
              mids$[mid_findDistancePoints_90e364a30b4d8b55] = env->getMethodID(cls, "findDistancePoints", "(Lorg/apache/lucene/spatial3d/geom/PlanetModel;DLorg/apache/lucene/spatial3d/geom/GeoPoint;Lorg/apache/lucene/spatial3d/geom/Plane;[Lorg/apache/lucene/spatial3d/geom/Membership;)[Lorg/apache/lucene/spatial3d/geom/GeoPoint;");
              mids$[mid_findMaximumArcDistance_63963df67d49d40a] = env->getMethodID(cls, "findMaximumArcDistance", "(Lorg/apache/lucene/spatial3d/geom/PlanetModel;D)D");
              mids$[mid_findMinimumArcDistance_63963df67d49d40a] = env->getMethodID(cls, "findMinimumArcDistance", "(Lorg/apache/lucene/spatial3d/geom/PlanetModel;D)D");
              mids$[mid_fromAggregationForm_d089f34703408a66] = env->getMethodID(cls, "fromAggregationForm", "(D)D");
              mids$[mid_toAggregationForm_d089f34703408a66] = env->getMethodID(cls, "toAggregationForm", "(D)D");

              class$ = new ::java::lang::Class(cls);
              cls = (jclass) class$->this$;

              INSTANCE = new NormalSquaredDistance(env->getStaticObjectField(cls, "INSTANCE", "Lorg/apache/lucene/spatial3d/geom/NormalSquaredDistance;"));
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          NormalSquaredDistance::NormalSquaredDistance() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_f2cc1bce94666404)) {}

          jdouble NormalSquaredDistance::computeDistance(const ::org::apache::lucene::spatial3d::geom::GeoPoint & a0, const ::org::apache::lucene::spatial3d::geom::GeoPoint & a1) const
          {
            return env->callDoubleMethod(this$, mids$[mid_computeDistance_5d9fe562983a5b40], a0.this$, a1.this$);
          }

          jdouble NormalSquaredDistance::computeDistance(const ::org::apache::lucene::spatial3d::geom::PlanetModel & a0, const ::org::apache::lucene::spatial3d::geom::Plane & a1, const ::org::apache::lucene::spatial3d::geom::GeoPoint & a2, const JArray< ::org::apache::lucene::spatial3d::geom::Membership > & a3) const
          {
            return env->callDoubleMethod(this$, mids$[mid_computeDistance_1ec77ef423ee02b8], a0.this$, a1.this$, a2.this$, a3.this$);
          }

          jdouble NormalSquaredDistance::computeDistance(const ::org::apache::lucene::spatial3d::geom::GeoPoint & a0, jdouble a1, jdouble a2, jdouble a3) const
          {
            return env->callDoubleMethod(this$, mids$[mid_computeDistance_9a12f42782ddf048], a0.this$, a1, a2, a3);
          }

          jdouble NormalSquaredDistance::computeDistance(const ::org::apache::lucene::spatial3d::geom::PlanetModel & a0, const ::org::apache::lucene::spatial3d::geom::Plane & a1, jdouble a2, jdouble a3, jdouble a4, const JArray< ::org::apache::lucene::spatial3d::geom::Membership > & a5) const
          {
            return env->callDoubleMethod(this$, mids$[mid_computeDistance_e314394bf9f24d4d], a0.this$, a1.this$, a2, a3, a4, a5.this$);
          }

          JArray< ::org::apache::lucene::spatial3d::geom::GeoPoint > NormalSquaredDistance::findDistancePoints(const ::org::apache::lucene::spatial3d::geom::PlanetModel & a0, jdouble a1, const ::org::apache::lucene::spatial3d::geom::GeoPoint & a2, const ::org::apache::lucene::spatial3d::geom::Plane & a3, const JArray< ::org::apache::lucene::spatial3d::geom::Membership > & a4) const
          {
            return JArray< ::org::apache::lucene::spatial3d::geom::GeoPoint >(env->callObjectMethod(this$, mids$[mid_findDistancePoints_90e364a30b4d8b55], a0.this$, a1, a2.this$, a3.this$, a4.this$));
          }

          jdouble NormalSquaredDistance::findMaximumArcDistance(const ::org::apache::lucene::spatial3d::geom::PlanetModel & a0, jdouble a1) const
          {
            return env->callDoubleMethod(this$, mids$[mid_findMaximumArcDistance_63963df67d49d40a], a0.this$, a1);
          }

          jdouble NormalSquaredDistance::findMinimumArcDistance(const ::org::apache::lucene::spatial3d::geom::PlanetModel & a0, jdouble a1) const
          {
            return env->callDoubleMethod(this$, mids$[mid_findMinimumArcDistance_63963df67d49d40a], a0.this$, a1);
          }

          jdouble NormalSquaredDistance::fromAggregationForm(jdouble a0) const
          {
            return env->callDoubleMethod(this$, mids$[mid_fromAggregationForm_d089f34703408a66], a0);
          }

          jdouble NormalSquaredDistance::toAggregationForm(jdouble a0) const
          {
            return env->callDoubleMethod(this$, mids$[mid_toAggregationForm_d089f34703408a66], a0);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace spatial3d {
        namespace geom {
          static PyObject *t_NormalSquaredDistance_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_NormalSquaredDistance_instance_(PyTypeObject *type, PyObject *arg);
          static int t_NormalSquaredDistance_init_(t_NormalSquaredDistance *self, PyObject *args, PyObject *kwds);
          static PyObject *t_NormalSquaredDistance_computeDistance(t_NormalSquaredDistance *self, PyObject *args);
          static PyObject *t_NormalSquaredDistance_findDistancePoints(t_NormalSquaredDistance *self, PyObject *args);
          static PyObject *t_NormalSquaredDistance_findMaximumArcDistance(t_NormalSquaredDistance *self, PyObject *args);
          static PyObject *t_NormalSquaredDistance_findMinimumArcDistance(t_NormalSquaredDistance *self, PyObject *args);
          static PyObject *t_NormalSquaredDistance_fromAggregationForm(t_NormalSquaredDistance *self, PyObject *arg);
          static PyObject *t_NormalSquaredDistance_toAggregationForm(t_NormalSquaredDistance *self, PyObject *arg);

          static PyMethodDef t_NormalSquaredDistance__methods_[] = {
            DECLARE_METHOD(t_NormalSquaredDistance, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_NormalSquaredDistance, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_NormalSquaredDistance, computeDistance, METH_VARARGS),
            DECLARE_METHOD(t_NormalSquaredDistance, findDistancePoints, METH_VARARGS),
            DECLARE_METHOD(t_NormalSquaredDistance, findMaximumArcDistance, METH_VARARGS),
            DECLARE_METHOD(t_NormalSquaredDistance, findMinimumArcDistance, METH_VARARGS),
            DECLARE_METHOD(t_NormalSquaredDistance, fromAggregationForm, METH_O),
            DECLARE_METHOD(t_NormalSquaredDistance, toAggregationForm, METH_O),
            { NULL, NULL, 0, NULL }
          };

          static PyType_Slot PY_TYPE_SLOTS(NormalSquaredDistance)[] = {
            { Py_tp_methods, t_NormalSquaredDistance__methods_ },
            { Py_tp_init, (void *) t_NormalSquaredDistance_init_ },
            { 0, NULL }
          };

          static PyType_Def *PY_TYPE_BASES(NormalSquaredDistance)[] = {
            &PY_TYPE_DEF(::java::lang::Object),
            NULL
          };

          DEFINE_TYPE(NormalSquaredDistance, t_NormalSquaredDistance, NormalSquaredDistance);

          void t_NormalSquaredDistance::install(PyObject *module)
          {
            installType(&PY_TYPE(NormalSquaredDistance), &PY_TYPE_DEF(NormalSquaredDistance), module, "NormalSquaredDistance", 0);
          }

          void t_NormalSquaredDistance::initialize(PyObject *module)
          {
            PyObject_SetAttrString((PyObject *) PY_TYPE(NormalSquaredDistance), "class_", make_descriptor(NormalSquaredDistance::initializeClass, 1));
            PyObject_SetAttrString((PyObject *) PY_TYPE(NormalSquaredDistance), "wrapfn_", make_descriptor(t_NormalSquaredDistance::wrap_jobject));
            PyObject_SetAttrString((PyObject *) PY_TYPE(NormalSquaredDistance), "boxfn_", make_descriptor(boxObject));
            env->getClass(NormalSquaredDistance::initializeClass);
            PyObject_SetAttrString((PyObject *) PY_TYPE(NormalSquaredDistance), "INSTANCE", make_descriptor(t_NormalSquaredDistance::wrap_Object(*NormalSquaredDistance::INSTANCE)));
          }

          static PyObject *t_NormalSquaredDistance_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, NormalSquaredDistance::initializeClass, 1)))
              return NULL;
            return t_NormalSquaredDistance::wrap_Object(NormalSquaredDistance(((t_NormalSquaredDistance *) arg)->object.this$));
          }
          static PyObject *t_NormalSquaredDistance_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, NormalSquaredDistance::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_NormalSquaredDistance_init_(t_NormalSquaredDistance *self, PyObject *args, PyObject *kwds)
          {
            NormalSquaredDistance object((jobject) NULL);

            INT_CALL(object = NormalSquaredDistance());
            self->object = object;

            return 0;
          }

          static PyObject *t_NormalSquaredDistance_computeDistance(t_NormalSquaredDistance *self, PyObject *args)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 2:
              {
                ::org::apache::lucene::spatial3d::geom::GeoPoint a0((jobject) NULL);
                ::org::apache::lucene::spatial3d::geom::GeoPoint a1((jobject) NULL);
                jdouble result;

                if (!parseArgs(args, "kk", ::org::apache::lucene::spatial3d::geom::GeoPoint::initializeClass, ::org::apache::lucene::spatial3d::geom::GeoPoint::initializeClass, &a0, &a1))
                {
                  OBJ_CALL(result = self->object.computeDistance(a0, a1));
                  return PyFloat_FromDouble((double) result);
                }
              }
              break;
             case 4:
              {
                ::org::apache::lucene::spatial3d::geom::PlanetModel a0((jobject) NULL);
                ::org::apache::lucene::spatial3d::geom::Plane a1((jobject) NULL);
                ::org::apache::lucene::spatial3d::geom::GeoPoint a2((jobject) NULL);
                JArray< ::org::apache::lucene::spatial3d::geom::Membership > a3((jobject) NULL);
                jdouble result;

                if (!parseArgs(args, "kkk[k", ::org::apache::lucene::spatial3d::geom::PlanetModel::initializeClass, ::org::apache::lucene::spatial3d::geom::Plane::initializeClass, ::org::apache::lucene::spatial3d::geom::GeoPoint::initializeClass, ::org::apache::lucene::spatial3d::geom::Membership::initializeClass, &a0, &a1, &a2, &a3))
                {
                  OBJ_CALL(result = self->object.computeDistance(a0, a1, a2, a3));
                  return PyFloat_FromDouble((double) result);
                }
              }
              {
                ::org::apache::lucene::spatial3d::geom::GeoPoint a0((jobject) NULL);
                jdouble a1;
                jdouble a2;
                jdouble a3;
                jdouble result;

                if (!parseArgs(args, "kDDD", ::org::apache::lucene::spatial3d::geom::GeoPoint::initializeClass, &a0, &a1, &a2, &a3))
                {
                  OBJ_CALL(result = self->object.computeDistance(a0, a1, a2, a3));
                  return PyFloat_FromDouble((double) result);
                }
              }
              break;
             case 6:
              {
                ::org::apache::lucene::spatial3d::geom::PlanetModel a0((jobject) NULL);
                ::org::apache::lucene::spatial3d::geom::Plane a1((jobject) NULL);
                jdouble a2;
                jdouble a3;
                jdouble a4;
                JArray< ::org::apache::lucene::spatial3d::geom::Membership > a5((jobject) NULL);
                jdouble result;

                if (!parseArgs(args, "kkDDD[k", ::org::apache::lucene::spatial3d::geom::PlanetModel::initializeClass, ::org::apache::lucene::spatial3d::geom::Plane::initializeClass, ::org::apache::lucene::spatial3d::geom::Membership::initializeClass, &a0, &a1, &a2, &a3, &a4, &a5))
                {
                  OBJ_CALL(result = self->object.computeDistance(a0, a1, a2, a3, a4, a5));
                  return PyFloat_FromDouble((double) result);
                }
              }
            }

            PyErr_SetArgsError((PyObject *) self, "computeDistance", args);
            return NULL;
          }

          static PyObject *t_NormalSquaredDistance_findDistancePoints(t_NormalSquaredDistance *self, PyObject *args)
          {
            ::org::apache::lucene::spatial3d::geom::PlanetModel a0((jobject) NULL);
            jdouble a1;
            ::org::apache::lucene::spatial3d::geom::GeoPoint a2((jobject) NULL);
            ::org::apache::lucene::spatial3d::geom::Plane a3((jobject) NULL);
            JArray< ::org::apache::lucene::spatial3d::geom::Membership > a4((jobject) NULL);
            JArray< ::org::apache::lucene::spatial3d::geom::GeoPoint > result((jobject) NULL);

            if (!parseArgs(args, "kDkk[k", ::org::apache::lucene::spatial3d::geom::PlanetModel::initializeClass, ::org::apache::lucene::spatial3d::geom::GeoPoint::initializeClass, ::org::apache::lucene::spatial3d::geom::Plane::initializeClass, ::org::apache::lucene::spatial3d::geom::Membership::initializeClass, &a0, &a1, &a2, &a3, &a4))
            {
              OBJ_CALL(result = self->object.findDistancePoints(a0, a1, a2, a3, a4));
              return JArray<jobject>(result.this$).wrap(::org::apache::lucene::spatial3d::geom::t_GeoPoint::wrap_jobject);
            }

            PyErr_SetArgsError((PyObject *) self, "findDistancePoints", args);
            return NULL;
          }

          static PyObject *t_NormalSquaredDistance_findMaximumArcDistance(t_NormalSquaredDistance *self, PyObject *args)
          {
            ::org::apache::lucene::spatial3d::geom::PlanetModel a0((jobject) NULL);
            jdouble a1;
            jdouble result;

            if (!parseArgs(args, "kD", ::org::apache::lucene::spatial3d::geom::PlanetModel::initializeClass, &a0, &a1))
            {
              OBJ_CALL(result = self->object.findMaximumArcDistance(a0, a1));
              return PyFloat_FromDouble((double) result);
            }

            PyErr_SetArgsError((PyObject *) self, "findMaximumArcDistance", args);
            return NULL;
          }

          static PyObject *t_NormalSquaredDistance_findMinimumArcDistance(t_NormalSquaredDistance *self, PyObject *args)
          {
            ::org::apache::lucene::spatial3d::geom::PlanetModel a0((jobject) NULL);
            jdouble a1;
            jdouble result;

            if (!parseArgs(args, "kD", ::org::apache::lucene::spatial3d::geom::PlanetModel::initializeClass, &a0, &a1))
            {
              OBJ_CALL(result = self->object.findMinimumArcDistance(a0, a1));
              return PyFloat_FromDouble((double) result);
            }

            PyErr_SetArgsError((PyObject *) self, "findMinimumArcDistance", args);
            return NULL;
          }

          static PyObject *t_NormalSquaredDistance_fromAggregationForm(t_NormalSquaredDistance *self, PyObject *arg)
          {
            jdouble a0;
            jdouble result;

            if (!parseArg(arg, "D", &a0))
            {
              OBJ_CALL(result = self->object.fromAggregationForm(a0));
              return PyFloat_FromDouble((double) result);
            }

            PyErr_SetArgsError((PyObject *) self, "fromAggregationForm", arg);
            return NULL;
          }

          static PyObject *t_NormalSquaredDistance_toAggregationForm(t_NormalSquaredDistance *self, PyObject *arg)
          {
            jdouble a0;
            jdouble result;

            if (!parseArg(arg, "D", &a0))
            {
              OBJ_CALL(result = self->object.toAggregationForm(a0));
              return PyFloat_FromDouble((double) result);
            }

            PyErr_SetArgsError((PyObject *) self, "toAggregationForm", arg);
            return NULL;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/store/BufferedIndexInput.h"
#include "org/apache/lucene/store/IOContext.h"
#include "org/apache/lucene/store/BufferedIndexInput.h"
#include "java/lang/Class.h"
#include "java/lang/String.h"
#include "org/apache/lucene/store/RandomAccessInput.h"
#include "java/io/IOException.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace store {

        ::java::lang::Class *BufferedIndexInput::class$ = NULL;
        jmethodID *BufferedIndexInput::mids$ = NULL;
        bool BufferedIndexInput::live$ = false;
        jint BufferedIndexInput::BUFFER_SIZE = (jint) 0;
        jint BufferedIndexInput::MERGE_BUFFER_SIZE = (jint) 0;
        jint BufferedIndexInput::MIN_BUFFER_SIZE = (jint) 0;

        jclass BufferedIndexInput::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/store/BufferedIndexInput");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_9fd2eb66a64e6f0f] = env->getMethodID(cls, "<init>", "(Ljava/lang/String;)V");
            mids$[mid_init$_605be02e51b1fbf8] = env->getMethodID(cls, "<init>", "(Ljava/lang/String;Lorg/apache/lucene/store/IOContext;)V");
            mids$[mid_init$_3fb1dae8d4037984] = env->getMethodID(cls, "<init>", "(Ljava/lang/String;I)V");
            mids$[mid_bufferSize_9fcc23c496125d03] = env->getStaticMethodID(cls, "bufferSize", "(Lorg/apache/lucene/store/IOContext;)I");
            mids$[mid_clone_34606e0c8dd07fbf] = env->getMethodID(cls, "clone", "()Lorg/apache/lucene/store/BufferedIndexInput;");
            mids$[mid_getBufferSize_9972fcc56b44e79d] = env->getMethodID(cls, "getBufferSize", "()I");
            mids$[mid_getFilePointer_2e5ae9edcb9b072f] = env->getMethodID(cls, "getFilePointer", "()J");
            mids$[mid_readByte_871cd52a74f26213] = env->getMethodID(cls, "readByte", "()B");
            mids$[mid_readByte_70f46e25a8aca047] = env->getMethodID(cls, "readByte", "(J)B");
            mids$[mid_readBytes_43fdd39c09bb2fad] = env->getMethodID(cls, "readBytes", "([BII)V");
            mids$[mid_readBytes_2cb00acb3a58ec31] = env->getMethodID(cls, "readBytes", "([BIIZ)V");
            mids$[mid_readInt_9972fcc56b44e79d] = env->getMethodID(cls, "readInt", "()I");
            mids$[mid_readInt_694afffd0eb7dc3c] = env->getMethodID(cls, "readInt", "(J)I");
            mids$[mid_readLong_2e5ae9edcb9b072f] = env->getMethodID(cls, "readLong", "()J");
            mids$[mid_readLong_d711eecdc469624a] = env->getMethodID(cls, "readLong", "(J)J");
            mids$[mid_readShort_ec20af88366b851e] = env->getMethodID(cls, "readShort", "()S");
            mids$[mid_readShort_e963ff2cc414b347] = env->getMethodID(cls, "readShort", "(J)S");
            mids$[mid_readVInt_9972fcc56b44e79d] = env->getMethodID(cls, "readVInt", "()I");
            mids$[mid_readVLong_2e5ae9edcb9b072f] = env->getMethodID(cls, "readVLong", "()J");
            mids$[mid_seek_9c778c9bce6694df] = env->getMethodID(cls, "seek", "(J)V");
            mids$[mid_setBufferSize_040c4cd0390c5aff] = env->getMethodID(cls, "setBufferSize", "(I)V");
            mids$[mid_slice_552ef5e8b06b1e84] = env->getMethodID(cls, "slice", "(Ljava/lang/String;JJ)Lorg/apache/lucene/store/IndexInput;");
            mids$[mid_wrap_4ba4458b28897e10] = env->getStaticMethodID(cls, "wrap", "(Ljava/lang/String;Lorg/apache/lucene/store/IndexInput;JJ)Lorg/apache/lucene/store/BufferedIndexInput;");
            mids$[mid_seekInternal_9c778c9bce6694df] = env->getMethodID(cls, "seekInternal", "(J)V");
            mids$[mid_readInternal_d159d3a3e7127e81] = env->getMethodID(cls, "readInternal", "(Ljava/nio/ByteBuffer;)V");

            class$ = new ::java::lang::Class(cls);
            cls = (jclass) class$->this$;

            BUFFER_SIZE = env->getStaticIntField(cls, "BUFFER_SIZE");
            MERGE_BUFFER_SIZE = env->getStaticIntField(cls, "MERGE_BUFFER_SIZE");
            MIN_BUFFER_SIZE = env->getStaticIntField(cls, "MIN_BUFFER_SIZE");
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        BufferedIndexInput::BufferedIndexInput(const ::java::lang::String & a0) : ::org::apache::lucene::store::IndexInput(env->newObject(initializeClass, &mids$, mid_init$_9fd2eb66a64e6f0f, a0.this$)) {}

        BufferedIndexInput::BufferedIndexInput(const ::java::lang::String & a0, const ::org::apache::lucene::store::IOContext & a1) : ::org::apache::lucene::store::IndexInput(env->newObject(initializeClass, &mids$, mid_init$_605be02e51b1fbf8, a0.this$, a1.this$)) {}

        BufferedIndexInput::BufferedIndexInput(const ::java::lang::String & a0, jint a1) : ::org::apache::lucene::store::IndexInput(env->newObject(initializeClass, &mids$, mid_init$_3fb1dae8d4037984, a0.this$, a1)) {}

        jint BufferedIndexInput::bufferSize(const ::org::apache::lucene::store::IOContext & a0)
        {
          jclass cls = env->getClass(initializeClass);
          return env->callStaticIntMethod(cls, mids$[mid_bufferSize_9fcc23c496125d03], a0.this$);
        }

        BufferedIndexInput BufferedIndexInput::clone() const
        {
          return BufferedIndexInput(env->callObjectMethod(this$, mids$[mid_clone_34606e0c8dd07fbf]));
        }

        jint BufferedIndexInput::getBufferSize() const
        {
          return env->callIntMethod(this$, mids$[mid_getBufferSize_9972fcc56b44e79d]);
        }

        jlong BufferedIndexInput::getFilePointer() const
        {
          return env->callLongMethod(this$, mids$[mid_getFilePointer_2e5ae9edcb9b072f]);
        }

        jbyte BufferedIndexInput::readByte() const
        {
          return env->callByteMethod(this$, mids$[mid_readByte_871cd52a74f26213]);
        }

        jbyte BufferedIndexInput::readByte(jlong a0) const
        {
          return env->callByteMethod(this$, mids$[mid_readByte_70f46e25a8aca047], a0);
        }

        void BufferedIndexInput::readBytes(const JArray< jbyte > & a0, jint a1, jint a2) const
        {
          env->callVoidMethod(this$, mids$[mid_readBytes_43fdd39c09bb2fad], a0.this$, a1, a2);
        }

        void BufferedIndexInput::readBytes(const JArray< jbyte > & a0, jint a1, jint a2, jboolean a3) const
        {
          env->callVoidMethod(this$, mids$[mid_readBytes_2cb00acb3a58ec31], a0.this$, a1, a2, a3);
        }

        jint BufferedIndexInput::readInt() const
        {
          return env->callIntMethod(this$, mids$[mid_readInt_9972fcc56b44e79d]);
        }

        jint BufferedIndexInput::readInt(jlong a0) const
        {
          return env->callIntMethod(this$, mids$[mid_readInt_694afffd0eb7dc3c], a0);
        }

        jlong BufferedIndexInput::readLong() const
        {
          return env->callLongMethod(this$, mids$[mid_readLong_2e5ae9edcb9b072f]);
        }

        jlong BufferedIndexInput::readLong(jlong a0) const
        {
          return env->callLongMethod(this$, mids$[mid_readLong_d711eecdc469624a], a0);
        }

        jshort BufferedIndexInput::readShort() const
        {
          return env->callShortMethod(this$, mids$[mid_readShort_ec20af88366b851e]);
        }

        jshort BufferedIndexInput::readShort(jlong a0) const
        {
          return env->callShortMethod(this$, mids$[mid_readShort_e963ff2cc414b347], a0);
        }

        jint BufferedIndexInput::readVInt() const
        {
          return env->callIntMethod(this$, mids$[mid_readVInt_9972fcc56b44e79d]);
        }

        jlong BufferedIndexInput::readVLong() const
        {
          return env->callLongMethod(this$, mids$[mid_readVLong_2e5ae9edcb9b072f]);
        }

        void BufferedIndexInput::seek(jlong a0) const
        {
          env->callVoidMethod(this$, mids$[mid_seek_9c778c9bce6694df], a0);
        }

        void BufferedIndexInput::setBufferSize(jint a0) const
        {
          env->callVoidMethod(this$, mids$[mid_setBufferSize_040c4cd0390c5aff], a0);
        }

        ::org::apache::lucene::store::IndexInput BufferedIndexInput::slice(const ::java::lang::String & a0, jlong a1, jlong a2) const
        {
          return ::org::apache::lucene::store::IndexInput(env->callObjectMethod(this$, mids$[mid_slice_552ef5e8b06b1e84], a0.this$, a1, a2));
        }

        BufferedIndexInput BufferedIndexInput::wrap(const ::java::lang::String & a0, const ::org::apache::lucene::store::IndexInput & a1, jlong a2, jlong a3)
        {
          jclass cls = env->getClass(initializeClass);
          return BufferedIndexInput(env->callStaticObjectMethod(cls, mids$[mid_wrap_4ba4458b28897e10], a0.this$, a1.this$, a2, a3));
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace store {
        static PyObject *t_BufferedIndexInput_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_BufferedIndexInput_instance_(PyTypeObject *type, PyObject *arg);
        static int t_BufferedIndexInput_init_(t_BufferedIndexInput *self, PyObject *args, PyObject *kwds);
        static PyObject *t_BufferedIndexInput_bufferSize(PyTypeObject *type, PyObject *arg);
        static PyObject *t_BufferedIndexInput_clone(t_BufferedIndexInput *self, PyObject *args);
        static PyObject *t_BufferedIndexInput_getBufferSize(t_BufferedIndexInput *self);
        static PyObject *t_BufferedIndexInput_getFilePointer(t_BufferedIndexInput *self, PyObject *args);
        static PyObject *t_BufferedIndexInput_readByte(t_BufferedIndexInput *self, PyObject *args);
        static PyObject *t_BufferedIndexInput_readBytes(t_BufferedIndexInput *self, PyObject *args);
        static PyObject *t_BufferedIndexInput_readInt(t_BufferedIndexInput *self, PyObject *args);
        static PyObject *t_BufferedIndexInput_readLong(t_BufferedIndexInput *self, PyObject *args);
        static PyObject *t_BufferedIndexInput_readShort(t_BufferedIndexInput *self, PyObject *args);
        static PyObject *t_BufferedIndexInput_readVInt(t_BufferedIndexInput *self, PyObject *args);
        static PyObject *t_BufferedIndexInput_readVLong(t_BufferedIndexInput *self, PyObject *args);
        static PyObject *t_BufferedIndexInput_seek(t_BufferedIndexInput *self, PyObject *args);
        static PyObject *t_BufferedIndexInput_setBufferSize(t_BufferedIndexInput *self, PyObject *arg);
        static PyObject *t_BufferedIndexInput_slice(t_BufferedIndexInput *self, PyObject *args);
        static PyObject *t_BufferedIndexInput_wrap(PyTypeObject *type, PyObject *args);
        static PyObject *t_BufferedIndexInput_get__filePointer(t_BufferedIndexInput *self, void *data);
        static PyGetSetDef t_BufferedIndexInput__fields_[] = {
          DECLARE_GET_FIELD(t_BufferedIndexInput, filePointer),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_BufferedIndexInput__methods_[] = {
          DECLARE_METHOD(t_BufferedIndexInput, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_BufferedIndexInput, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_BufferedIndexInput, bufferSize, METH_O | METH_CLASS),
          DECLARE_METHOD(t_BufferedIndexInput, clone, METH_VARARGS),
          DECLARE_METHOD(t_BufferedIndexInput, getBufferSize, METH_NOARGS),
          DECLARE_METHOD(t_BufferedIndexInput, getFilePointer, METH_VARARGS),
          DECLARE_METHOD(t_BufferedIndexInput, readByte, METH_VARARGS),
          DECLARE_METHOD(t_BufferedIndexInput, readBytes, METH_VARARGS),
          DECLARE_METHOD(t_BufferedIndexInput, readInt, METH_VARARGS),
          DECLARE_METHOD(t_BufferedIndexInput, readLong, METH_VARARGS),
          DECLARE_METHOD(t_BufferedIndexInput, readShort, METH_VARARGS),
          DECLARE_METHOD(t_BufferedIndexInput, readVInt, METH_VARARGS),
          DECLARE_METHOD(t_BufferedIndexInput, readVLong, METH_VARARGS),
          DECLARE_METHOD(t_BufferedIndexInput, seek, METH_VARARGS),
          DECLARE_METHOD(t_BufferedIndexInput, setBufferSize, METH_O),
          DECLARE_METHOD(t_BufferedIndexInput, slice, METH_VARARGS),
          DECLARE_METHOD(t_BufferedIndexInput, wrap, METH_VARARGS | METH_CLASS),
          { NULL, NULL, 0, NULL }
        };

        static PyType_Slot PY_TYPE_SLOTS(BufferedIndexInput)[] = {
          { Py_tp_methods, t_BufferedIndexInput__methods_ },
          { Py_tp_init, (void *) t_BufferedIndexInput_init_ },
          { Py_tp_getset, t_BufferedIndexInput__fields_ },
          { 0, NULL }
        };

        static PyType_Def *PY_TYPE_BASES(BufferedIndexInput)[] = {
          &PY_TYPE_DEF(::org::apache::lucene::store::IndexInput),
          NULL
        };

        DEFINE_TYPE(BufferedIndexInput, t_BufferedIndexInput, BufferedIndexInput);

        void t_BufferedIndexInput::install(PyObject *module)
        {
          installType(&PY_TYPE(BufferedIndexInput), &PY_TYPE_DEF(BufferedIndexInput), module, "BufferedIndexInput", 0);
        }

        void t_BufferedIndexInput::initialize(PyObject *module)
        {
          PyObject_SetAttrString((PyObject *) PY_TYPE(BufferedIndexInput), "class_", make_descriptor(BufferedIndexInput::initializeClass, 1));
          PyObject_SetAttrString((PyObject *) PY_TYPE(BufferedIndexInput), "wrapfn_", make_descriptor(t_BufferedIndexInput::wrap_jobject));
          PyObject_SetAttrString((PyObject *) PY_TYPE(BufferedIndexInput), "boxfn_", make_descriptor(boxObject));
          env->getClass(BufferedIndexInput::initializeClass);
          PyObject_SetAttrString((PyObject *) PY_TYPE(BufferedIndexInput), "BUFFER_SIZE", make_descriptor(BufferedIndexInput::BUFFER_SIZE));
          PyObject_SetAttrString((PyObject *) PY_TYPE(BufferedIndexInput), "MERGE_BUFFER_SIZE", make_descriptor(BufferedIndexInput::MERGE_BUFFER_SIZE));
          PyObject_SetAttrString((PyObject *) PY_TYPE(BufferedIndexInput), "MIN_BUFFER_SIZE", make_descriptor(BufferedIndexInput::MIN_BUFFER_SIZE));
        }

        static PyObject *t_BufferedIndexInput_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, BufferedIndexInput::initializeClass, 1)))
            return NULL;
          return t_BufferedIndexInput::wrap_Object(BufferedIndexInput(((t_BufferedIndexInput *) arg)->object.this$));
        }
        static PyObject *t_BufferedIndexInput_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, BufferedIndexInput::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_BufferedIndexInput_init_(t_BufferedIndexInput *self, PyObject *args, PyObject *kwds)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 1:
            {
              ::java::lang::String a0((jobject) NULL);
              BufferedIndexInput object((jobject) NULL);

              if (!parseArgs(args, "s", &a0))
              {
                INT_CALL(object = BufferedIndexInput(a0));
                self->object = object;
                break;
              }
            }
            goto err;
           case 2:
            {
              ::java::lang::String a0((jobject) NULL);
              ::org::apache::lucene::store::IOContext a1((jobject) NULL);
              BufferedIndexInput object((jobject) NULL);

              if (!parseArgs(args, "sk", ::org::apache::lucene::store::IOContext::initializeClass, &a0, &a1))
              {
                INT_CALL(object = BufferedIndexInput(a0, a1));
                self->object = object;
                break;
              }
            }
            {
              ::java::lang::String a0((jobject) NULL);
              jint a1;
              BufferedIndexInput object((jobject) NULL);

              if (!parseArgs(args, "sI", &a0, &a1))
              {
                INT_CALL(object = BufferedIndexInput(a0, a1));
                self->object = object;
                break;
              }
            }
           default:
           err:
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }

        static PyObject *t_BufferedIndexInput_bufferSize(PyTypeObject *type, PyObject *arg)
        {
          ::org::apache::lucene::store::IOContext a0((jobject) NULL);
          jint result;

          if (!parseArg(arg, "k", ::org::apache::lucene::store::IOContext::initializeClass, &a0))
          {
            OBJ_CALL(result = ::org::apache::lucene::store::BufferedIndexInput::bufferSize(a0));
            return PyLong_FromLong((long) result);
          }

          PyErr_SetArgsError(type, "bufferSize", arg);
          return NULL;
        }

        static PyObject *t_BufferedIndexInput_clone(t_BufferedIndexInput *self, PyObject *args)
        {
          BufferedIndexInput result((jobject) NULL);

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.clone());
            return t_BufferedIndexInput::wrap_Object(result);
          }

          return callSuper(PY_TYPE(BufferedIndexInput), (PyObject *) self, "clone", args, 2);
        }

        static PyObject *t_BufferedIndexInput_getBufferSize(t_BufferedIndexInput *self)
        {
          jint result;
          OBJ_CALL(result = self->object.getBufferSize());
          return PyLong_FromLong((long) result);
        }

        static PyObject *t_BufferedIndexInput_getFilePointer(t_BufferedIndexInput *self, PyObject *args)
        {
          jlong result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.getFilePointer());
            return PyLong_FromLongLong((PY_LONG_LONG) result);
          }

          return callSuper(PY_TYPE(BufferedIndexInput), (PyObject *) self, "getFilePointer", args, 2);
        }

        static PyObject *t_BufferedIndexInput_readByte(t_BufferedIndexInput *self, PyObject *args)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 0:
            {
              jbyte result;
              OBJ_CALL(result = self->object.readByte());
              return PyLong_FromLong((long) result);
            }
            break;
           case 1:
            {
              jlong a0;
              jbyte result;

              if (!parseArgs(args, "J", &a0))
              {
                OBJ_CALL(result = self->object.readByte(a0));
                return PyLong_FromLong((long) result);
              }
            }
          }

          return callSuper(PY_TYPE(BufferedIndexInput), (PyObject *) self, "readByte", args, 2);
        }

        static PyObject *t_BufferedIndexInput_readBytes(t_BufferedIndexInput *self, PyObject *args)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 3:
            {
              JArray< jbyte > a0((jobject) NULL);
              jint a1;
              jint a2;

              if (!parseArgs(args, "[BII", &a0, &a1, &a2))
              {
                OBJ_CALL(self->object.readBytes(a0, a1, a2));
                Py_RETURN_NONE;
              }
            }
            break;
           case 4:
            {
              JArray< jbyte > a0((jobject) NULL);
              jint a1;
              jint a2;
              jboolean a3;

              if (!parseArgs(args, "[BIIZ", &a0, &a1, &a2, &a3))
              {
                OBJ_CALL(self->object.readBytes(a0, a1, a2, a3));
                Py_RETURN_NONE;
              }
            }
          }

          return callSuper(PY_TYPE(BufferedIndexInput), (PyObject *) self, "readBytes", args, 2);
        }

        static PyObject *t_BufferedIndexInput_readInt(t_BufferedIndexInput *self, PyObject *args)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 0:
            {
              jint result;
              OBJ_CALL(result = self->object.readInt());
              return PyLong_FromLong((long) result);
            }
            break;
           case 1:
            {
              jlong a0;
              jint result;

              if (!parseArgs(args, "J", &a0))
              {
                OBJ_CALL(result = self->object.readInt(a0));
                return PyLong_FromLong((long) result);
              }
            }
          }

          return callSuper(PY_TYPE(BufferedIndexInput), (PyObject *) self, "readInt", args, 2);
        }

        static PyObject *t_BufferedIndexInput_readLong(t_BufferedIndexInput *self, PyObject *args)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 0:
            {
              jlong result;
              OBJ_CALL(result = self->object.readLong());
              return PyLong_FromLongLong((PY_LONG_LONG) result);
            }
            break;
           case 1:
            {
              jlong a0;
              jlong result;

              if (!parseArgs(args, "J", &a0))
              {
                OBJ_CALL(result = self->object.readLong(a0));
                return PyLong_FromLongLong((PY_LONG_LONG) result);
              }
            }
          }

          return callSuper(PY_TYPE(BufferedIndexInput), (PyObject *) self, "readLong", args, 2);
        }

        static PyObject *t_BufferedIndexInput_readShort(t_BufferedIndexInput *self, PyObject *args)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 0:
            {
              jshort result;
              OBJ_CALL(result = self->object.readShort());
              return PyLong_FromLong((long) result);
            }
            break;
           case 1:
            {
              jlong a0;
              jshort result;

              if (!parseArgs(args, "J", &a0))
              {
                OBJ_CALL(result = self->object.readShort(a0));
                return PyLong_FromLong((long) result);
              }
            }
          }

          return callSuper(PY_TYPE(BufferedIndexInput), (PyObject *) self, "readShort", args, 2);
        }

        static PyObject *t_BufferedIndexInput_readVInt(t_BufferedIndexInput *self, PyObject *args)
        {
          jint result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.readVInt());
            return PyLong_FromLong((long) result);
          }

          return callSuper(PY_TYPE(BufferedIndexInput), (PyObject *) self, "readVInt", args, 2);
        }

        static PyObject *t_BufferedIndexInput_readVLong(t_BufferedIndexInput *self, PyObject *args)
        {
          jlong result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.readVLong());
            return PyLong_FromLongLong((PY_LONG_LONG) result);
          }

          return callSuper(PY_TYPE(BufferedIndexInput), (PyObject *) self, "readVLong", args, 2);
        }

        static PyObject *t_BufferedIndexInput_seek(t_BufferedIndexInput *self, PyObject *args)
        {
          jlong a0;

          if (!parseArgs(args, "J", &a0))
          {
            OBJ_CALL(self->object.seek(a0));
            Py_RETURN_NONE;
          }

          return callSuper(PY_TYPE(BufferedIndexInput), (PyObject *) self, "seek", args, 2);
        }

        static PyObject *t_BufferedIndexInput_setBufferSize(t_BufferedIndexInput *self, PyObject *arg)
        {
          jint a0;

          if (!parseArg(arg, "I", &a0))
          {
            OBJ_CALL(self->object.setBufferSize(a0));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "setBufferSize", arg);
          return NULL;
        }

        static PyObject *t_BufferedIndexInput_slice(t_BufferedIndexInput *self, PyObject *args)
        {
          ::java::lang::String a0((jobject) NULL);
          jlong a1;
          jlong a2;
          ::org::apache::lucene::store::IndexInput result((jobject) NULL);

          if (!parseArgs(args, "sJJ", &a0, &a1, &a2))
          {
            OBJ_CALL(result = self->object.slice(a0, a1, a2));
            return ::org::apache::lucene::store::t_IndexInput::wrap_Object(result);
          }

          return callSuper(PY_TYPE(BufferedIndexInput), (PyObject *) self, "slice", args, 2);
        }

        static PyObject *t_BufferedIndexInput_wrap(PyTypeObject *type, PyObject *args)
        {
          ::java::lang::String a0((jobject) NULL);
          ::org::apache::lucene::store::IndexInput a1((jobject) NULL);
          jlong a2;
          jlong a3;
          BufferedIndexInput result((jobject) NULL);

          if (!parseArgs(args, "skJJ", ::org::apache::lucene::store::IndexInput::initializeClass, &a0, &a1, &a2, &a3))
          {
            OBJ_CALL(result = ::org::apache::lucene::store::BufferedIndexInput::wrap(a0, a1, a2, a3));
            return t_BufferedIndexInput::wrap_Object(result);
          }

          PyErr_SetArgsError(type, "wrap", args);
          return NULL;
        }

        static PyObject *t_BufferedIndexInput_get__filePointer(t_BufferedIndexInput *self, void *data)
        {
          jlong value;
          OBJ_CALL(value = self->object.getFilePointer());
          return PyLong_FromLongLong((PY_LONG_LONG) value);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/FieldComparator$RelevanceComparator.h"
#include "org/apache/lucene/index/LeafReaderContext.h"
#include "org/apache/lucene/search/LeafFieldComparator.h"
#include "java/lang/Float.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/search/Scorable.h"
#include "java/io/IOException.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {

        ::java::lang::Class *FieldComparator$RelevanceComparator::class$ = NULL;
        jmethodID *FieldComparator$RelevanceComparator::mids$ = NULL;
        bool FieldComparator$RelevanceComparator::live$ = false;

        jclass FieldComparator$RelevanceComparator::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/search/FieldComparator$RelevanceComparator");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_040c4cd0390c5aff] = env->getMethodID(cls, "<init>", "(I)V");
            mids$[mid_compare_57a58545eba514db] = env->getMethodID(cls, "compare", "(II)I");
            mids$[mid_compareBottom_1e143afe1894d213] = env->getMethodID(cls, "compareBottom", "(I)I");
            mids$[mid_compareTop_1e143afe1894d213] = env->getMethodID(cls, "compareTop", "(I)I");
            mids$[mid_compareValues_4fc408d80c14bb24] = env->getMethodID(cls, "compareValues", "(Ljava/lang/Float;Ljava/lang/Float;)I");
            mids$[mid_copy_438c62480c481c65] = env->getMethodID(cls, "copy", "(II)V");
            mids$[mid_getLeafComparator_6183906b7058c4b5] = env->getMethodID(cls, "getLeafComparator", "(Lorg/apache/lucene/index/LeafReaderContext;)Lorg/apache/lucene/search/LeafFieldComparator;");
            mids$[mid_setBottom_040c4cd0390c5aff] = env->getMethodID(cls, "setBottom", "(I)V");
            mids$[mid_setScorer_57a565cc0113e133] = env->getMethodID(cls, "setScorer", "(Lorg/apache/lucene/search/Scorable;)V");
            mids$[mid_setTopValue_983cdbc3424b161f] = env->getMethodID(cls, "setTopValue", "(Ljava/lang/Float;)V");
            mids$[mid_value_36191ce480b45955] = env->getMethodID(cls, "value", "(I)Ljava/lang/Float;");

            class$ = new ::java::lang::Class(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        FieldComparator$RelevanceComparator::FieldComparator$RelevanceComparator(jint a0) : ::org::apache::lucene::search::FieldComparator(env->newObject(initializeClass, &mids$, mid_init$_040c4cd0390c5aff, a0)) {}

        jint FieldComparator$RelevanceComparator::compare(jint a0, jint a1) const
        {
          return env->callIntMethod(this$, mids$[mid_compare_57a58545eba514db], a0, a1);
        }

        jint FieldComparator$RelevanceComparator::compareBottom(jint a0) const
        {
          return env->callIntMethod(this$, mids$[mid_compareBottom_1e143afe1894d213], a0);
        }

        jint FieldComparator$RelevanceComparator::compareTop(jint a0) const
        {
          return env->callIntMethod(this$, mids$[mid_compareTop_1e143afe1894d213], a0);
        }

        jint FieldComparator$RelevanceComparator::compareValues(const ::java::lang::Float & a0, const ::java::lang::Float & a1) const
        {
          return env->callIntMethod(this$, mids$[mid_compareValues_4fc408d80c14bb24], a0.this$, a1.this$);
        }

        void FieldComparator$RelevanceComparator::copy(jint a0, jint a1) const
        {
          env->callVoidMethod(this$, mids$[mid_copy_438c62480c481c65], a0, a1);
        }

        ::org::apache::lucene::search::LeafFieldComparator FieldComparator$RelevanceComparator::getLeafComparator(const ::org::apache::lucene::index::LeafReaderContext & a0) const
        {
          return ::org::apache::lucene::search::LeafFieldComparator(env->callObjectMethod(this$, mids$[mid_getLeafComparator_6183906b7058c4b5], a0.this$));
        }

        void FieldComparator$RelevanceComparator::setBottom(jint a0) const
        {
          env->callVoidMethod(this$, mids$[mid_setBottom_040c4cd0390c5aff], a0);
        }

        void FieldComparator$RelevanceComparator::setScorer(const ::org::apache::lucene::search::Scorable & a0) const
        {
          env->callVoidMethod(this$, mids$[mid_setScorer_57a565cc0113e133], a0.this$);
        }

        void FieldComparator$RelevanceComparator::setTopValue(const ::java::lang::Float & a0) const
        {
          env->callVoidMethod(this$, mids$[mid_setTopValue_983cdbc3424b161f], a0.this$);
        }

        ::java::lang::Float FieldComparator$RelevanceComparator::value(jint a0) const
        {
          return ::java::lang::Float(env->callObjectMethod(this$, mids$[mid_value_36191ce480b45955], a0));
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        static PyObject *t_FieldComparator$RelevanceComparator_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_FieldComparator$RelevanceComparator_instance_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_FieldComparator$RelevanceComparator_of_(t_FieldComparator$RelevanceComparator *self, PyObject *args);
        static int t_FieldComparator$RelevanceComparator_init_(t_FieldComparator$RelevanceComparator *self, PyObject *args, PyObject *kwds);
        static PyObject *t_FieldComparator$RelevanceComparator_compare(t_FieldComparator$RelevanceComparator *self, PyObject *args);
        static PyObject *t_FieldComparator$RelevanceComparator_compareBottom(t_FieldComparator$RelevanceComparator *self, PyObject *arg);
        static PyObject *t_FieldComparator$RelevanceComparator_compareTop(t_FieldComparator$RelevanceComparator *self, PyObject *arg);
        static PyObject *t_FieldComparator$RelevanceComparator_compareValues(t_FieldComparator$RelevanceComparator *self, PyObject *args);
        static PyObject *t_FieldComparator$RelevanceComparator_copy(t_FieldComparator$RelevanceComparator *self, PyObject *args);
        static PyObject *t_FieldComparator$RelevanceComparator_getLeafComparator(t_FieldComparator$RelevanceComparator *self, PyObject *args);
        static PyObject *t_FieldComparator$RelevanceComparator_setBottom(t_FieldComparator$RelevanceComparator *self, PyObject *arg);
        static PyObject *t_FieldComparator$RelevanceComparator_setScorer(t_FieldComparator$RelevanceComparator *self, PyObject *arg);
        static PyObject *t_FieldComparator$RelevanceComparator_setTopValue(t_FieldComparator$RelevanceComparator *self, PyObject *args);
        static PyObject *t_FieldComparator$RelevanceComparator_value(t_FieldComparator$RelevanceComparator *self, PyObject *args);
        static int t_FieldComparator$RelevanceComparator_set__bottom(t_FieldComparator$RelevanceComparator *self, PyObject *arg, void *data);
        static int t_FieldComparator$RelevanceComparator_set__scorer(t_FieldComparator$RelevanceComparator *self, PyObject *arg, void *data);
        static int t_FieldComparator$RelevanceComparator_set__topValue(t_FieldComparator$RelevanceComparator *self, PyObject *arg, void *data);
        static PyObject *t_FieldComparator$RelevanceComparator_get__parameters_(t_FieldComparator$RelevanceComparator *self, void *data);
        static PyGetSetDef t_FieldComparator$RelevanceComparator__fields_[] = {
          DECLARE_SET_FIELD(t_FieldComparator$RelevanceComparator, bottom),
          DECLARE_SET_FIELD(t_FieldComparator$RelevanceComparator, scorer),
          DECLARE_SET_FIELD(t_FieldComparator$RelevanceComparator, topValue),
          DECLARE_GET_FIELD(t_FieldComparator$RelevanceComparator, parameters_),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_FieldComparator$RelevanceComparator__methods_[] = {
          DECLARE_METHOD(t_FieldComparator$RelevanceComparator, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_FieldComparator$RelevanceComparator, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_FieldComparator$RelevanceComparator, of_, METH_VARARGS),
          DECLARE_METHOD(t_FieldComparator$RelevanceComparator, compare, METH_VARARGS),
          DECLARE_METHOD(t_FieldComparator$RelevanceComparator, compareBottom, METH_O),
          DECLARE_METHOD(t_FieldComparator$RelevanceComparator, compareTop, METH_O),
          DECLARE_METHOD(t_FieldComparator$RelevanceComparator, compareValues, METH_VARARGS),
          DECLARE_METHOD(t_FieldComparator$RelevanceComparator, copy, METH_VARARGS),
          DECLARE_METHOD(t_FieldComparator$RelevanceComparator, getLeafComparator, METH_VARARGS),
          DECLARE_METHOD(t_FieldComparator$RelevanceComparator, setBottom, METH_O),
          DECLARE_METHOD(t_FieldComparator$RelevanceComparator, setScorer, METH_O),
          DECLARE_METHOD(t_FieldComparator$RelevanceComparator, setTopValue, METH_VARARGS),
          DECLARE_METHOD(t_FieldComparator$RelevanceComparator, value, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        static PyType_Slot PY_TYPE_SLOTS(FieldComparator$RelevanceComparator)[] = {
          { Py_tp_methods, t_FieldComparator$RelevanceComparator__methods_ },
          { Py_tp_init, (void *) t_FieldComparator$RelevanceComparator_init_ },
          { Py_tp_getset, t_FieldComparator$RelevanceComparator__fields_ },
          { 0, NULL }
        };

        static PyType_Def *PY_TYPE_BASES(FieldComparator$RelevanceComparator)[] = {
          &PY_TYPE_DEF(::org::apache::lucene::search::FieldComparator),
          NULL
        };

        DEFINE_TYPE(FieldComparator$RelevanceComparator, t_FieldComparator$RelevanceComparator, FieldComparator$RelevanceComparator);
        PyObject *t_FieldComparator$RelevanceComparator::wrap_Object(const FieldComparator$RelevanceComparator& object, PyTypeObject *p0)
        {
          PyObject *obj = t_FieldComparator$RelevanceComparator::wrap_Object(object);
          if (obj != NULL && obj != Py_None)
          {
            t_FieldComparator$RelevanceComparator *self = (t_FieldComparator$RelevanceComparator *) obj;
            self->parameters[0] = p0;
          }
          return obj;
        }

        PyObject *t_FieldComparator$RelevanceComparator::wrap_jobject(const jobject& object, PyTypeObject *p0)
        {
          PyObject *obj = t_FieldComparator$RelevanceComparator::wrap_jobject(object);
          if (obj != NULL && obj != Py_None)
          {
            t_FieldComparator$RelevanceComparator *self = (t_FieldComparator$RelevanceComparator *) obj;
            self->parameters[0] = p0;
          }
          return obj;
        }

        void t_FieldComparator$RelevanceComparator::install(PyObject *module)
        {
          installType(&PY_TYPE(FieldComparator$RelevanceComparator), &PY_TYPE_DEF(FieldComparator$RelevanceComparator), module, "FieldComparator$RelevanceComparator", 0);
        }

        void t_FieldComparator$RelevanceComparator::initialize(PyObject *module)
        {
          PyObject_SetAttrString((PyObject *) PY_TYPE(FieldComparator$RelevanceComparator), "class_", make_descriptor(FieldComparator$RelevanceComparator::initializeClass, 1));
          PyObject_SetAttrString((PyObject *) PY_TYPE(FieldComparator$RelevanceComparator), "wrapfn_", make_descriptor(t_FieldComparator$RelevanceComparator::wrap_jobject));
          PyObject_SetAttrString((PyObject *) PY_TYPE(FieldComparator$RelevanceComparator), "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_FieldComparator$RelevanceComparator_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, FieldComparator$RelevanceComparator::initializeClass, 1)))
            return NULL;
          return t_FieldComparator$RelevanceComparator::wrap_Object(FieldComparator$RelevanceComparator(((t_FieldComparator$RelevanceComparator *) arg)->object.this$));
        }
        static PyObject *t_FieldComparator$RelevanceComparator_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, FieldComparator$RelevanceComparator::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static PyObject *t_FieldComparator$RelevanceComparator_of_(t_FieldComparator$RelevanceComparator *self, PyObject *args)
        {
          if (!parseArg(args, "T", 1, &(self->parameters)))
            Py_RETURN_SELF;
          return PyErr_SetArgsError((PyObject *) self, "of_", args);
        }

        static int t_FieldComparator$RelevanceComparator_init_(t_FieldComparator$RelevanceComparator *self, PyObject *args, PyObject *kwds)
        {
          jint a0;
          FieldComparator$RelevanceComparator object((jobject) NULL);

          if (!parseArgs(args, "I", &a0))
          {
            INT_CALL(object = FieldComparator$RelevanceComparator(a0));
            self->object = object;
            self->parameters[0] = ::java::lang::PY_TYPE(Float);
          }
          else
          {
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }

        static PyObject *t_FieldComparator$RelevanceComparator_compare(t_FieldComparator$RelevanceComparator *self, PyObject *args)
        {
          jint a0;
          jint a1;
          jint result;

          if (!parseArgs(args, "II", &a0, &a1))
          {
            OBJ_CALL(result = self->object.compare(a0, a1));
            return PyLong_FromLong((long) result);
          }

          return callSuper(PY_TYPE(FieldComparator$RelevanceComparator), (PyObject *) self, "compare", args, 2);
        }

        static PyObject *t_FieldComparator$RelevanceComparator_compareBottom(t_FieldComparator$RelevanceComparator *self, PyObject *arg)
        {
          jint a0;
          jint result;

          if (!parseArg(arg, "I", &a0))
          {
            OBJ_CALL(result = self->object.compareBottom(a0));
            return PyLong_FromLong((long) result);
          }

          PyErr_SetArgsError((PyObject *) self, "compareBottom", arg);
          return NULL;
        }

        static PyObject *t_FieldComparator$RelevanceComparator_compareTop(t_FieldComparator$RelevanceComparator *self, PyObject *arg)
        {
          jint a0;
          jint result;

          if (!parseArg(arg, "I", &a0))
          {
            OBJ_CALL(result = self->object.compareTop(a0));
            return PyLong_FromLong((long) result);
          }

          PyErr_SetArgsError((PyObject *) self, "compareTop", arg);
          return NULL;
        }

        static PyObject *t_FieldComparator$RelevanceComparator_compareValues(t_FieldComparator$RelevanceComparator *self, PyObject *args)
        {
          ::java::lang::Float a0((jobject) NULL);
          ::java::lang::Float a1((jobject) NULL);
          jint result;

          if (!parseArgs(args, "OO", ::java::lang::PY_TYPE(Float), ::java::lang::PY_TYPE(Float), &a0, &a1))
          {
            OBJ_CALL(result = self->object.compareValues(a0, a1));
            return PyLong_FromLong((long) result);
          }

          return callSuper(PY_TYPE(FieldComparator$RelevanceComparator), (PyObject *) self, "compareValues", args, 2);
        }

        static PyObject *t_FieldComparator$RelevanceComparator_copy(t_FieldComparator$RelevanceComparator *self, PyObject *args)
        {
          jint a0;
          jint a1;

          if (!parseArgs(args, "II", &a0, &a1))
          {
            OBJ_CALL(self->object.copy(a0, a1));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "copy", args);
          return NULL;
        }

        static PyObject *t_FieldComparator$RelevanceComparator_getLeafComparator(t_FieldComparator$RelevanceComparator *self, PyObject *args)
        {
          ::org::apache::lucene::index::LeafReaderContext a0((jobject) NULL);
          ::org::apache::lucene::search::LeafFieldComparator result((jobject) NULL);

          if (!parseArgs(args, "k", ::org::apache::lucene::index::LeafReaderContext::initializeClass, &a0))
          {
            OBJ_CALL(result = self->object.getLeafComparator(a0));
            return ::org::apache::lucene::search::t_LeafFieldComparator::wrap_Object(result);
          }

          return callSuper(PY_TYPE(FieldComparator$RelevanceComparator), (PyObject *) self, "getLeafComparator", args, 2);
        }

        static PyObject *t_FieldComparator$RelevanceComparator_setBottom(t_FieldComparator$RelevanceComparator *self, PyObject *arg)
        {
          jint a0;

          if (!parseArg(arg, "I", &a0))
          {
            OBJ_CALL(self->object.setBottom(a0));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "setBottom", arg);
          return NULL;
        }

        static PyObject *t_FieldComparator$RelevanceComparator_setScorer(t_FieldComparator$RelevanceComparator *self, PyObject *arg)
        {
          ::org::apache::lucene::search::Scorable a0((jobject) NULL);

          if (!parseArg(arg, "k", ::org::apache::lucene::search::Scorable::initializeClass, &a0))
          {
            OBJ_CALL(self->object.setScorer(a0));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "setScorer", arg);
          return NULL;
        }

        static PyObject *t_FieldComparator$RelevanceComparator_setTopValue(t_FieldComparator$RelevanceComparator *self, PyObject *args)
        {
          ::java::lang::Float a0((jobject) NULL);

          if (!parseArgs(args, "O", ::java::lang::PY_TYPE(Float), &a0))
          {
            OBJ_CALL(self->object.setTopValue(a0));
            Py_RETURN_NONE;
          }

          return callSuper(PY_TYPE(FieldComparator$RelevanceComparator), (PyObject *) self, "setTopValue", args, 2);
        }

        static PyObject *t_FieldComparator$RelevanceComparator_value(t_FieldComparator$RelevanceComparator *self, PyObject *args)
        {
          jint a0;
          ::java::lang::Float result((jobject) NULL);

          if (!parseArgs(args, "I", &a0))
          {
            OBJ_CALL(result = self->object.value(a0));
            return ::java::lang::t_Float::wrap_Object(result);
          }

          return callSuper(PY_TYPE(FieldComparator$RelevanceComparator), (PyObject *) self, "value", args, 2);
        }
        static PyObject *t_FieldComparator$RelevanceComparator_get__parameters_(t_FieldComparator$RelevanceComparator *self, void *data)
        {
          return typeParameters(self->parameters, sizeof(self->parameters));
        }

        static int t_FieldComparator$RelevanceComparator_set__bottom(t_FieldComparator$RelevanceComparator *self, PyObject *arg, void *data)
        {
          {
            jint value;
            if (!parseArg(arg, "I", &value))
            {
              INT_CALL(self->object.setBottom(value));
              return 0;
            }
          }
          PyErr_SetArgsError((PyObject *) self, "bottom", arg);
          return -1;
        }

        static int t_FieldComparator$RelevanceComparator_set__scorer(t_FieldComparator$RelevanceComparator *self, PyObject *arg, void *data)
        {
          {
            ::org::apache::lucene::search::Scorable value((jobject) NULL);
            if (!parseArg(arg, "k", ::org::apache::lucene::search::Scorable::initializeClass, &value))
            {
              INT_CALL(self->object.setScorer(value));
              return 0;
            }
          }
          PyErr_SetArgsError((PyObject *) self, "scorer", arg);
          return -1;
        }

        static int t_FieldComparator$RelevanceComparator_set__topValue(t_FieldComparator$RelevanceComparator *self, PyObject *arg, void *data)
        {
          {
            ::java::lang::Float value((jobject) NULL);
            if (!parseArg(arg, "O", ::java::lang::PY_TYPE(Float), &value))
            {
              INT_CALL(self->object.setTopValue(value));
              return 0;
            }
          }
          PyErr_SetArgsError((PyObject *) self, "topValue", arg);
          return -1;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/codecs/uniformsplit/BlockLine.h"
#include "org/apache/lucene/codecs/uniformsplit/TermBytes.h"
#include "org/apache/lucene/util/Accountable.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace codecs {
        namespace uniformsplit {

          ::java::lang::Class *BlockLine::class$ = NULL;
          jmethodID *BlockLine::mids$ = NULL;
          bool BlockLine::live$ = false;

          jclass BlockLine::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/codecs/uniformsplit/BlockLine");

              mids$ = new jmethodID[max_mid];
              mids$[mid_getTermBytes_0ef16f3cab465a8d] = env->getMethodID(cls, "getTermBytes", "()Lorg/apache/lucene/codecs/uniformsplit/TermBytes;");
              mids$[mid_getTermStateRelativeOffset_9972fcc56b44e79d] = env->getMethodID(cls, "getTermStateRelativeOffset", "()I");
              mids$[mid_ramBytesUsed_2e5ae9edcb9b072f] = env->getMethodID(cls, "ramBytesUsed", "()J");
              mids$[mid_reset_30abf7043715373a] = env->getMethodID(cls, "reset", "(Lorg/apache/lucene/codecs/uniformsplit/TermBytes;I)Lorg/apache/lucene/codecs/uniformsplit/BlockLine;");

              class$ = new ::java::lang::Class(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          ::org::apache::lucene::codecs::uniformsplit::TermBytes BlockLine::getTermBytes() const
          {
            return ::org::apache::lucene::codecs::uniformsplit::TermBytes(env->callObjectMethod(this$, mids$[mid_getTermBytes_0ef16f3cab465a8d]));
          }

          jint BlockLine::getTermStateRelativeOffset() const
          {
            return env->callIntMethod(this$, mids$[mid_getTermStateRelativeOffset_9972fcc56b44e79d]);
          }

          jlong BlockLine::ramBytesUsed() const
          {
            return env->callLongMethod(this$, mids$[mid_ramBytesUsed_2e5ae9edcb9b072f]);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"
#include "org/apache/lucene/codecs/uniformsplit/BlockLine$Serializer.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace codecs {
        namespace uniformsplit {
          static PyObject *t_BlockLine_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_BlockLine_instance_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_BlockLine_getTermBytes(t_BlockLine *self);
          static PyObject *t_BlockLine_getTermStateRelativeOffset(t_BlockLine *self);
          static PyObject *t_BlockLine_ramBytesUsed(t_BlockLine *self);
          static PyObject *t_BlockLine_get__termBytes(t_BlockLine *self, void *data);
          static PyObject *t_BlockLine_get__termStateRelativeOffset(t_BlockLine *self, void *data);
          static PyGetSetDef t_BlockLine__fields_[] = {
            DECLARE_GET_FIELD(t_BlockLine, termBytes),
            DECLARE_GET_FIELD(t_BlockLine, termStateRelativeOffset),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_BlockLine__methods_[] = {
            DECLARE_METHOD(t_BlockLine, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_BlockLine, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_BlockLine, getTermBytes, METH_NOARGS),
            DECLARE_METHOD(t_BlockLine, getTermStateRelativeOffset, METH_NOARGS),
            DECLARE_METHOD(t_BlockLine, ramBytesUsed, METH_NOARGS),
            { NULL, NULL, 0, NULL }
          };

          static PyType_Slot PY_TYPE_SLOTS(BlockLine)[] = {
            { Py_tp_methods, t_BlockLine__methods_ },
            { Py_tp_init, (void *) abstract_init },
            { Py_tp_getset, t_BlockLine__fields_ },
            { 0, NULL }
          };

          static PyType_Def *PY_TYPE_BASES(BlockLine)[] = {
            &PY_TYPE_DEF(::java::lang::Object),
            NULL
          };

          DEFINE_TYPE(BlockLine, t_BlockLine, BlockLine);

          void t_BlockLine::install(PyObject *module)
          {
            installType(&PY_TYPE(BlockLine), &PY_TYPE_DEF(BlockLine), module, "BlockLine", 0);
            PyObject_SetAttrString((PyObject *) PY_TYPE(BlockLine), "Serializer", make_descriptor(&PY_TYPE_DEF(BlockLine$Serializer)));
          }

          void t_BlockLine::initialize(PyObject *module)
          {
            PyObject_SetAttrString((PyObject *) PY_TYPE(BlockLine), "class_", make_descriptor(BlockLine::initializeClass, 1));
            PyObject_SetAttrString((PyObject *) PY_TYPE(BlockLine), "wrapfn_", make_descriptor(t_BlockLine::wrap_jobject));
            PyObject_SetAttrString((PyObject *) PY_TYPE(BlockLine), "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_BlockLine_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, BlockLine::initializeClass, 1)))
              return NULL;
            return t_BlockLine::wrap_Object(BlockLine(((t_BlockLine *) arg)->object.this$));
          }
          static PyObject *t_BlockLine_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, BlockLine::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static PyObject *t_BlockLine_getTermBytes(t_BlockLine *self)
          {
            ::org::apache::lucene::codecs::uniformsplit::TermBytes result((jobject) NULL);
            OBJ_CALL(result = self->object.getTermBytes());
            return ::org::apache::lucene::codecs::uniformsplit::t_TermBytes::wrap_Object(result);
          }

          static PyObject *t_BlockLine_getTermStateRelativeOffset(t_BlockLine *self)
          {
            jint result;
            OBJ_CALL(result = self->object.getTermStateRelativeOffset());
            return PyLong_FromLong((long) result);
          }

          static PyObject *t_BlockLine_ramBytesUsed(t_BlockLine *self)
          {
            jlong result;
            OBJ_CALL(result = self->object.ramBytesUsed());
            return PyLong_FromLongLong((PY_LONG_LONG) result);
          }

          static PyObject *t_BlockLine_get__termBytes(t_BlockLine *self, void *data)
          {
            ::org::apache::lucene::codecs::uniformsplit::TermBytes value((jobject) NULL);
            OBJ_CALL(value = self->object.getTermBytes());
            return ::org::apache::lucene::codecs::uniformsplit::t_TermBytes::wrap_Object(value);
          }

          static PyObject *t_BlockLine_get__termStateRelativeOffset(t_BlockLine *self, void *data)
          {
            jint value;
            OBJ_CALL(value = self->object.getTermStateRelativeOffset());
            return PyLong_FromLong((long) value);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/miscellaneous/TypeAsSynonymFilterFactory.h"
#include "java/util/Map.h"
#include "java/lang/String.h"
#include "org/apache/lucene/analysis/TokenStream.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace miscellaneous {

          ::java::lang::Class *TypeAsSynonymFilterFactory::class$ = NULL;
          jmethodID *TypeAsSynonymFilterFactory::mids$ = NULL;
          bool TypeAsSynonymFilterFactory::live$ = false;
          ::java::lang::String *TypeAsSynonymFilterFactory::NAME = NULL;

          jclass TypeAsSynonymFilterFactory::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/miscellaneous/TypeAsSynonymFilterFactory");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_408bd889ee3beae5] = env->getMethodID(cls, "<init>", "(Ljava/util/Map;)V");
              mids$[mid_create_6de1e28d9d10cd9e] = env->getMethodID(cls, "create", "(Lorg/apache/lucene/analysis/TokenStream;)Lorg/apache/lucene/analysis/TokenStream;");

              class$ = new ::java::lang::Class(cls);
              cls = (jclass) class$->this$;

              NAME = new ::java::lang::String(env->getStaticObjectField(cls, "NAME", "Ljava/lang/String;"));
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          TypeAsSynonymFilterFactory::TypeAsSynonymFilterFactory(const ::java::util::Map & a0) : ::org::apache::lucene::analysis::util::TokenFilterFactory(env->newObject(initializeClass, &mids$, mid_init$_408bd889ee3beae5, a0.this$)) {}

          ::org::apache::lucene::analysis::TokenStream TypeAsSynonymFilterFactory::create(const ::org::apache::lucene::analysis::TokenStream & a0) const
          {
            return ::org::apache::lucene::analysis::TokenStream(env->callObjectMethod(this$, mids$[mid_create_6de1e28d9d10cd9e], a0.this$));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace miscellaneous {
          static PyObject *t_TypeAsSynonymFilterFactory_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_TypeAsSynonymFilterFactory_instance_(PyTypeObject *type, PyObject *arg);
          static int t_TypeAsSynonymFilterFactory_init_(t_TypeAsSynonymFilterFactory *self, PyObject *args, PyObject *kwds);
          static PyObject *t_TypeAsSynonymFilterFactory_create(t_TypeAsSynonymFilterFactory *self, PyObject *args);

          static PyMethodDef t_TypeAsSynonymFilterFactory__methods_[] = {
            DECLARE_METHOD(t_TypeAsSynonymFilterFactory, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_TypeAsSynonymFilterFactory, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_TypeAsSynonymFilterFactory, create, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          static PyType_Slot PY_TYPE_SLOTS(TypeAsSynonymFilterFactory)[] = {
            { Py_tp_methods, t_TypeAsSynonymFilterFactory__methods_ },
            { Py_tp_init, (void *) t_TypeAsSynonymFilterFactory_init_ },
            { 0, NULL }
          };

          static PyType_Def *PY_TYPE_BASES(TypeAsSynonymFilterFactory)[] = {
            &PY_TYPE_DEF(::org::apache::lucene::analysis::util::TokenFilterFactory),
            NULL
          };

          DEFINE_TYPE(TypeAsSynonymFilterFactory, t_TypeAsSynonymFilterFactory, TypeAsSynonymFilterFactory);

          void t_TypeAsSynonymFilterFactory::install(PyObject *module)
          {
            installType(&PY_TYPE(TypeAsSynonymFilterFactory), &PY_TYPE_DEF(TypeAsSynonymFilterFactory), module, "TypeAsSynonymFilterFactory", 0);
          }

          void t_TypeAsSynonymFilterFactory::initialize(PyObject *module)
          {
            PyObject_SetAttrString((PyObject *) PY_TYPE(TypeAsSynonymFilterFactory), "class_", make_descriptor(TypeAsSynonymFilterFactory::initializeClass, 1));
            PyObject_SetAttrString((PyObject *) PY_TYPE(TypeAsSynonymFilterFactory), "wrapfn_", make_descriptor(t_TypeAsSynonymFilterFactory::wrap_jobject));
            PyObject_SetAttrString((PyObject *) PY_TYPE(TypeAsSynonymFilterFactory), "boxfn_", make_descriptor(boxObject));
            env->getClass(TypeAsSynonymFilterFactory::initializeClass);
            PyObject_SetAttrString((PyObject *) PY_TYPE(TypeAsSynonymFilterFactory), "NAME", make_descriptor(j2p(*TypeAsSynonymFilterFactory::NAME)));
          }

          static PyObject *t_TypeAsSynonymFilterFactory_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, TypeAsSynonymFilterFactory::initializeClass, 1)))
              return NULL;
            return t_TypeAsSynonymFilterFactory::wrap_Object(TypeAsSynonymFilterFactory(((t_TypeAsSynonymFilterFactory *) arg)->object.this$));
          }
          static PyObject *t_TypeAsSynonymFilterFactory_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, TypeAsSynonymFilterFactory::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_TypeAsSynonymFilterFactory_init_(t_TypeAsSynonymFilterFactory *self, PyObject *args, PyObject *kwds)
          {
            ::java::util::Map a0((jobject) NULL);
            PyTypeObject **p0;
            TypeAsSynonymFilterFactory object((jobject) NULL);

            if (!parseArgs(args, "K", ::java::util::Map::initializeClass, &a0, &p0, ::java::util::t_Map::parameters_))
            {
              INT_CALL(object = TypeAsSynonymFilterFactory(a0));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_TypeAsSynonymFilterFactory_create(t_TypeAsSynonymFilterFactory *self, PyObject *args)
          {
            ::org::apache::lucene::analysis::TokenStream a0((jobject) NULL);
            ::org::apache::lucene::analysis::TokenStream result((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::analysis::TokenStream::initializeClass, &a0))
            {
              OBJ_CALL(result = self->object.create(a0));
              return ::org::apache::lucene::analysis::t_TokenStream::wrap_Object(result);
            }

            return callSuper(PY_TYPE(TypeAsSynonymFilterFactory), (PyObject *) self, "create", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/codecs/simpletext/SimpleTextNormsFormat.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/index/SegmentReadState.h"
#include "org/apache/lucene/codecs/NormsProducer.h"
#include "org/apache/lucene/codecs/NormsConsumer.h"
#include "org/apache/lucene/index/SegmentWriteState.h"
#include "java/io/IOException.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace codecs {
        namespace simpletext {

          ::java::lang::Class *SimpleTextNormsFormat::class$ = NULL;
          jmethodID *SimpleTextNormsFormat::mids$ = NULL;
          bool SimpleTextNormsFormat::live$ = false;

          jclass SimpleTextNormsFormat::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/codecs/simpletext/SimpleTextNormsFormat");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_f2cc1bce94666404] = env->getMethodID(cls, "<init>", "()V");
              mids$[mid_normsConsumer_129866fdd9f40fd4] = env->getMethodID(cls, "normsConsumer", "(Lorg/apache/lucene/index/SegmentWriteState;)Lorg/apache/lucene/codecs/NormsConsumer;");
              mids$[mid_normsProducer_c7aca038fcf2bba1] = env->getMethodID(cls, "normsProducer", "(Lorg/apache/lucene/index/SegmentReadState;)Lorg/apache/lucene/codecs/NormsProducer;");

              class$ = new ::java::lang::Class(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          SimpleTextNormsFormat::SimpleTextNormsFormat() : ::org::apache::lucene::codecs::NormsFormat(env->newObject(initializeClass, &mids$, mid_init$_f2cc1bce94666404)) {}

          ::org::apache::lucene::codecs::NormsConsumer SimpleTextNormsFormat::normsConsumer(const ::org::apache::lucene::index::SegmentWriteState & a0) const
          {
            return ::org::apache::lucene::codecs::NormsConsumer(env->callObjectMethod(this$, mids$[mid_normsConsumer_129866fdd9f40fd4], a0.this$));
          }

          ::org::apache::lucene::codecs::NormsProducer SimpleTextNormsFormat::normsProducer(const ::org::apache::lucene::index::SegmentReadState & a0) const
          {
            return ::org::apache::lucene::codecs::NormsProducer(env->callObjectMethod(this$, mids$[mid_normsProducer_c7aca038fcf2bba1], a0.this$));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"
#include "org/apache/lucene/codecs/simpletext/SimpleTextNormsFormat$SimpleTextNormsConsumer.h"
#include "org/apache/lucene/codecs/simpletext/SimpleTextNormsFormat$SimpleTextNormsProducer.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace codecs {
        namespace simpletext {
          static PyObject *t_SimpleTextNormsFormat_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_SimpleTextNormsFormat_instance_(PyTypeObject *type, PyObject *arg);
          static int t_SimpleTextNormsFormat_init_(t_SimpleTextNormsFormat *self, PyObject *args, PyObject *kwds);
          static PyObject *t_SimpleTextNormsFormat_normsConsumer(t_SimpleTextNormsFormat *self, PyObject *args);
          static PyObject *t_SimpleTextNormsFormat_normsProducer(t_SimpleTextNormsFormat *self, PyObject *args);

          static PyMethodDef t_SimpleTextNormsFormat__methods_[] = {
            DECLARE_METHOD(t_SimpleTextNormsFormat, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_SimpleTextNormsFormat, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_SimpleTextNormsFormat, normsConsumer, METH_VARARGS),
            DECLARE_METHOD(t_SimpleTextNormsFormat, normsProducer, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          static PyType_Slot PY_TYPE_SLOTS(SimpleTextNormsFormat)[] = {
            { Py_tp_methods, t_SimpleTextNormsFormat__methods_ },
            { Py_tp_init, (void *) t_SimpleTextNormsFormat_init_ },
            { 0, NULL }
          };

          static PyType_Def *PY_TYPE_BASES(SimpleTextNormsFormat)[] = {
            &PY_TYPE_DEF(::org::apache::lucene::codecs::NormsFormat),
            NULL
          };

          DEFINE_TYPE(SimpleTextNormsFormat, t_SimpleTextNormsFormat, SimpleTextNormsFormat);

          void t_SimpleTextNormsFormat::install(PyObject *module)
          {
            installType(&PY_TYPE(SimpleTextNormsFormat), &PY_TYPE_DEF(SimpleTextNormsFormat), module, "SimpleTextNormsFormat", 0);
            PyObject_SetAttrString((PyObject *) PY_TYPE(SimpleTextNormsFormat), "SimpleTextNormsConsumer", make_descriptor(&PY_TYPE_DEF(SimpleTextNormsFormat$SimpleTextNormsConsumer)));
            PyObject_SetAttrString((PyObject *) PY_TYPE(SimpleTextNormsFormat), "SimpleTextNormsProducer", make_descriptor(&PY_TYPE_DEF(SimpleTextNormsFormat$SimpleTextNormsProducer)));
          }

          void t_SimpleTextNormsFormat::initialize(PyObject *module)
          {
            PyObject_SetAttrString((PyObject *) PY_TYPE(SimpleTextNormsFormat), "class_", make_descriptor(SimpleTextNormsFormat::initializeClass, 1));
            PyObject_SetAttrString((PyObject *) PY_TYPE(SimpleTextNormsFormat), "wrapfn_", make_descriptor(t_SimpleTextNormsFormat::wrap_jobject));
            PyObject_SetAttrString((PyObject *) PY_TYPE(SimpleTextNormsFormat), "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_SimpleTextNormsFormat_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, SimpleTextNormsFormat::initializeClass, 1)))
              return NULL;
            return t_SimpleTextNormsFormat::wrap_Object(SimpleTextNormsFormat(((t_SimpleTextNormsFormat *) arg)->object.this$));
          }
          static PyObject *t_SimpleTextNormsFormat_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, SimpleTextNormsFormat::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_SimpleTextNormsFormat_init_(t_SimpleTextNormsFormat *self, PyObject *args, PyObject *kwds)
          {
            SimpleTextNormsFormat object((jobject) NULL);

            INT_CALL(object = SimpleTextNormsFormat());
            self->object = object;

            return 0;
          }

          static PyObject *t_SimpleTextNormsFormat_normsConsumer(t_SimpleTextNormsFormat *self, PyObject *args)
          {
            ::org::apache::lucene::index::SegmentWriteState a0((jobject) NULL);
            ::org::apache::lucene::codecs::NormsConsumer result((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::index::SegmentWriteState::initializeClass, &a0))
            {
              OBJ_CALL(result = self->object.normsConsumer(a0));
              return ::org::apache::lucene::codecs::t_NormsConsumer::wrap_Object(result);
            }

            return callSuper(PY_TYPE(SimpleTextNormsFormat), (PyObject *) self, "normsConsumer", args, 2);
          }

          static PyObject *t_SimpleTextNormsFormat_normsProducer(t_SimpleTextNormsFormat *self, PyObject *args)
          {
            ::org::apache::lucene::index::SegmentReadState a0((jobject) NULL);
            ::org::apache::lucene::codecs::NormsProducer result((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::index::SegmentReadState::initializeClass, &a0))
            {
              OBJ_CALL(result = self->object.normsProducer(a0));
              return ::org::apache::lucene::codecs::t_NormsProducer::wrap_Object(result);
            }

            return callSuper(PY_TYPE(SimpleTextNormsFormat), (PyObject *) self, "normsProducer", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/classification/utils/ConfusionMatrixGenerator.h"
#include "org/apache/lucene/index/IndexReader.h"
#include "org/apache/lucene/classification/Classifier.h"
#include "java/lang/Class.h"
#include "java/lang/String.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/classification/utils/ConfusionMatrixGenerator$ConfusionMatrix.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace classification {
        namespace utils {

          ::java::lang::Class *ConfusionMatrixGenerator::class$ = NULL;
          jmethodID *ConfusionMatrixGenerator::mids$ = NULL;
          bool ConfusionMatrixGenerator::live$ = false;

          jclass ConfusionMatrixGenerator::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/classification/utils/ConfusionMatrixGenerator");

              mids$ = new jmethodID[max_mid];
              mids$[mid_getConfusionMatrix_64efcc6f06efac1b] = env->getStaticMethodID(cls, "getConfusionMatrix", "(Lorg/apache/lucene/index/IndexReader;Lorg/apache/lucene/classification/Classifier;Ljava/lang/String;Ljava/lang/String;J)Lorg/apache/lucene/classification/utils/ConfusionMatrixGenerator$ConfusionMatrix;");

              class$ = new ::java::lang::Class(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          ::org::apache::lucene::classification::utils::ConfusionMatrixGenerator$ConfusionMatrix ConfusionMatrixGenerator::getConfusionMatrix(const ::org::apache::lucene::index::IndexReader & a0, const ::org::apache::lucene::classification::Classifier & a1, const ::java::lang::String & a2, const ::java::lang::String & a3, jlong a4)
          {
            jclass cls = env->getClass(initializeClass);
            return ::org::apache::lucene::classification::utils::ConfusionMatrixGenerator$ConfusionMatrix(env->callStaticObjectMethod(cls, mids$[mid_getConfusionMatrix_64efcc6f06efac1b], a0.this$, a1.this$, a2.this$, a3.this$, a4));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace classification {
        namespace utils {
          static PyObject *t_ConfusionMatrixGenerator_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_ConfusionMatrixGenerator_instance_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_ConfusionMatrixGenerator_getConfusionMatrix(PyTypeObject *type, PyObject *args);

          static PyMethodDef t_ConfusionMatrixGenerator__methods_[] = {
            DECLARE_METHOD(t_ConfusionMatrixGenerator, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_ConfusionMatrixGenerator, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_ConfusionMatrixGenerator, getConfusionMatrix, METH_VARARGS | METH_CLASS),
            { NULL, NULL, 0, NULL }
          };

          static PyType_Slot PY_TYPE_SLOTS(ConfusionMatrixGenerator)[] = {
            { Py_tp_methods, t_ConfusionMatrixGenerator__methods_ },
            { Py_tp_init, (void *) abstract_init },
            { 0, NULL }
          };

          static PyType_Def *PY_TYPE_BASES(ConfusionMatrixGenerator)[] = {
            &PY_TYPE_DEF(::java::lang::Object),
            NULL
          };

          DEFINE_TYPE(ConfusionMatrixGenerator, t_ConfusionMatrixGenerator, ConfusionMatrixGenerator);

          void t_ConfusionMatrixGenerator::install(PyObject *module)
          {
            installType(&PY_TYPE(ConfusionMatrixGenerator), &PY_TYPE_DEF(ConfusionMatrixGenerator), module, "ConfusionMatrixGenerator", 0);
            PyObject_SetAttrString((PyObject *) PY_TYPE(ConfusionMatrixGenerator), "ConfusionMatrix", make_descriptor(&PY_TYPE_DEF(ConfusionMatrixGenerator$ConfusionMatrix)));
          }

          void t_ConfusionMatrixGenerator::initialize(PyObject *module)
          {
            PyObject_SetAttrString((PyObject *) PY_TYPE(ConfusionMatrixGenerator), "class_", make_descriptor(ConfusionMatrixGenerator::initializeClass, 1));
            PyObject_SetAttrString((PyObject *) PY_TYPE(ConfusionMatrixGenerator), "wrapfn_", make_descriptor(t_ConfusionMatrixGenerator::wrap_jobject));
            PyObject_SetAttrString((PyObject *) PY_TYPE(ConfusionMatrixGenerator), "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_ConfusionMatrixGenerator_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, ConfusionMatrixGenerator::initializeClass, 1)))
              return NULL;
            return t_ConfusionMatrixGenerator::wrap_Object(ConfusionMatrixGenerator(((t_ConfusionMatrixGenerator *) arg)->object.this$));
          }
          static PyObject *t_ConfusionMatrixGenerator_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, ConfusionMatrixGenerator::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static PyObject *t_ConfusionMatrixGenerator_getConfusionMatrix(PyTypeObject *type, PyObject *args)
          {
            ::org::apache::lucene::index::IndexReader a0((jobject) NULL);
            ::org::apache::lucene::classification::Classifier a1((jobject) NULL);
            PyTypeObject **p1;
            ::java::lang::String a2((jobject) NULL);
            ::java::lang::String a3((jobject) NULL);
            jlong a4;
            ::org::apache::lucene::classification::utils::ConfusionMatrixGenerator$ConfusionMatrix result((jobject) NULL);

            if (!parseArgs(args, "kKssJ", ::org::apache::lucene::index::IndexReader::initializeClass, ::org::apache::lucene::classification::Classifier::initializeClass, &a0, &a1, &p1, ::org::apache::lucene::classification::t_Classifier::parameters_, &a2, &a3, &a4))
            {
              OBJ_CALL(result = ::org::apache::lucene::classification::utils::ConfusionMatrixGenerator::getConfusionMatrix(a0, a1, a2, a3, a4));
              return ::org::apache::lucene::classification::utils::t_ConfusionMatrixGenerator$ConfusionMatrix::wrap_Object(result);
            }

            PyErr_SetArgsError(type, "getConfusionMatrix", args);
            return NULL;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/lv/LatvianStemmer.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace lv {

          ::java::lang::Class *LatvianStemmer::class$ = NULL;
          jmethodID *LatvianStemmer::mids$ = NULL;
          bool LatvianStemmer::live$ = false;

          jclass LatvianStemmer::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/lv/LatvianStemmer");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_f2cc1bce94666404] = env->getMethodID(cls, "<init>", "()V");
              mids$[mid_stem_d4655f2a19359017] = env->getMethodID(cls, "stem", "([CI)I");

              class$ = new ::java::lang::Class(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          LatvianStemmer::LatvianStemmer() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_f2cc1bce94666404)) {}

          jint LatvianStemmer::stem(const JArray< jchar > & a0, jint a1) const
          {
            return env->callIntMethod(this$, mids$[mid_stem_d4655f2a19359017], a0.this$, a1);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace lv {
          static PyObject *t_LatvianStemmer_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_LatvianStemmer_instance_(PyTypeObject *type, PyObject *arg);
          static int t_LatvianStemmer_init_(t_LatvianStemmer *self, PyObject *args, PyObject *kwds);
          static PyObject *t_LatvianStemmer_stem(t_LatvianStemmer *self, PyObject *args);

          static PyMethodDef t_LatvianStemmer__methods_[] = {
            DECLARE_METHOD(t_LatvianStemmer, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_LatvianStemmer, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_LatvianStemmer, stem, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          static PyType_Slot PY_TYPE_SLOTS(LatvianStemmer)[] = {
            { Py_tp_methods, t_LatvianStemmer__methods_ },
            { Py_tp_init, (void *) t_LatvianStemmer_init_ },
            { 0, NULL }
          };

          static PyType_Def *PY_TYPE_BASES(LatvianStemmer)[] = {
            &PY_TYPE_DEF(::java::lang::Object),
            NULL
          };

          DEFINE_TYPE(LatvianStemmer, t_LatvianStemmer, LatvianStemmer);

          void t_LatvianStemmer::install(PyObject *module)
          {
            installType(&PY_TYPE(LatvianStemmer), &PY_TYPE_DEF(LatvianStemmer), module, "LatvianStemmer", 0);
          }

          void t_LatvianStemmer::initialize(PyObject *module)
          {
            PyObject_SetAttrString((PyObject *) PY_TYPE(LatvianStemmer), "class_", make_descriptor(LatvianStemmer::initializeClass, 1));
            PyObject_SetAttrString((PyObject *) PY_TYPE(LatvianStemmer), "wrapfn_", make_descriptor(t_LatvianStemmer::wrap_jobject));
            PyObject_SetAttrString((PyObject *) PY_TYPE(LatvianStemmer), "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_LatvianStemmer_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, LatvianStemmer::initializeClass, 1)))
              return NULL;
            return t_LatvianStemmer::wrap_Object(LatvianStemmer(((t_LatvianStemmer *) arg)->object.this$));
          }
          static PyObject *t_LatvianStemmer_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, LatvianStemmer::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_LatvianStemmer_init_(t_LatvianStemmer *self, PyObject *args, PyObject *kwds)
          {
            LatvianStemmer object((jobject) NULL);

            INT_CALL(object = LatvianStemmer());
            self->object = object;

            return 0;
          }

          static PyObject *t_LatvianStemmer_stem(t_LatvianStemmer *self, PyObject *args)
          {
            JArray< jchar > a0((jobject) NULL);
            jint a1;
            jint result;

            if (!parseArgs(args, "[CI", &a0, &a1))
            {
              OBJ_CALL(result = self->object.stem(a0, a1));
              return PyLong_FromLong((long) result);
            }

            PyErr_SetArgsError((PyObject *) self, "stem", args);
            return NULL;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queryparser/flexible/standard/QueryParserUtil.h"
#include "org/apache/lucene/analysis/Analyzer.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/queryparser/flexible/core/QueryNodeException.h"
#include "org/apache/lucene/search/BooleanClause$Occur.h"
#include "java/lang/String.h"
#include "org/apache/lucene/search/Query.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace standard {

            ::java::lang::Class *QueryParserUtil::class$ = NULL;
            jmethodID *QueryParserUtil::mids$ = NULL;
            bool QueryParserUtil::live$ = false;

            jclass QueryParserUtil::initializeClass(bool getOnly)
            {
              if (getOnly)
                return (jclass) (live$ ? class$->this$ : NULL);
              if (class$ == NULL)
              {
                jclass cls = (jclass) env->findClass("org/apache/lucene/queryparser/flexible/standard/QueryParserUtil");

                mids$ = new jmethodID[max_mid];
                mids$[mid_init$_f2cc1bce94666404] = env->getMethodID(cls, "<init>", "()V");
                mids$[mid_escape_9bfa75c9f141b67f] = env->getStaticMethodID(cls, "escape", "(Ljava/lang/String;)Ljava/lang/String;");
                mids$[mid_parse_624f5f0bd2ccc6fd] = env->getStaticMethodID(cls, "parse", "([Ljava/lang/String;[Ljava/lang/String;Lorg/apache/lucene/analysis/Analyzer;)Lorg/apache/lucene/search/Query;");
                mids$[mid_parse_9b8192354815ff88] = env->getStaticMethodID(cls, "parse", "([Ljava/lang/String;[Ljava/lang/String;[Lorg/apache/lucene/search/BooleanClause$Occur;Lorg/apache/lucene/analysis/Analyzer;)Lorg/apache/lucene/search/Query;");
                mids$[mid_parse_461e1cdcf28c0718] = env->getStaticMethodID(cls, "parse", "(Ljava/lang/String;[Ljava/lang/String;[Lorg/apache/lucene/search/BooleanClause$Occur;Lorg/apache/lucene/analysis/Analyzer;)Lorg/apache/lucene/search/Query;");

                class$ = new ::java::lang::Class(cls);
                live$ = true;
              }
              return (jclass) class$->this$;
            }

            QueryParserUtil::QueryParserUtil() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_f2cc1bce94666404)) {}

            ::java::lang::String QueryParserUtil::escape(const ::java::lang::String & a0)
            {
              jclass cls = env->getClass(initializeClass);
              return ::java::lang::String(env->callStaticObjectMethod(cls, mids$[mid_escape_9bfa75c9f141b67f], a0.this$));
            }

            ::org::apache::lucene::search::Query QueryParserUtil::parse(const JArray< ::java::lang::String > & a0, const JArray< ::java::lang::String > & a1, const ::org::apache::lucene::analysis::Analyzer & a2)
            {
              jclass cls = env->getClass(initializeClass);
              return ::org::apache::lucene::search::Query(env->callStaticObjectMethod(cls, mids$[mid_parse_624f5f0bd2ccc6fd], a0.this$, a1.this$, a2.this$));
            }

            ::org::apache::lucene::search::Query QueryParserUtil::parse(const JArray< ::java::lang::String > & a0, const JArray< ::java::lang::String > & a1, const JArray< ::org::apache::lucene::search::BooleanClause$Occur > & a2, const ::org::apache::lucene::analysis::Analyzer & a3)
            {
              jclass cls = env->getClass(initializeClass);
              return ::org::apache::lucene::search::Query(env->callStaticObjectMethod(cls, mids$[mid_parse_9b8192354815ff88], a0.this$, a1.this$, a2.this$, a3.this$));
            }

            ::org::apache::lucene::search::Query QueryParserUtil::parse(const ::java::lang::String & a0, const JArray< ::java::lang::String > & a1, const JArray< ::org::apache::lucene::search::BooleanClause$Occur > & a2, const ::org::apache::lucene::analysis::Analyzer & a3)
            {
              jclass cls = env->getClass(initializeClass);
              return ::org::apache::lucene::search::Query(env->callStaticObjectMethod(cls, mids$[mid_parse_461e1cdcf28c0718], a0.this$, a1.this$, a2.this$, a3.this$));
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace standard {
            static PyObject *t_QueryParserUtil_cast_(PyTypeObject *type, PyObject *arg);
            static PyObject *t_QueryParserUtil_instance_(PyTypeObject *type, PyObject *arg);
            static int t_QueryParserUtil_init_(t_QueryParserUtil *self, PyObject *args, PyObject *kwds);
            static PyObject *t_QueryParserUtil_escape(PyTypeObject *type, PyObject *arg);
            static PyObject *t_QueryParserUtil_parse(PyTypeObject *type, PyObject *args);

            static PyMethodDef t_QueryParserUtil__methods_[] = {
              DECLARE_METHOD(t_QueryParserUtil, cast_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_QueryParserUtil, instance_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_QueryParserUtil, escape, METH_O | METH_CLASS),
              DECLARE_METHOD(t_QueryParserUtil, parse, METH_VARARGS | METH_CLASS),
              { NULL, NULL, 0, NULL }
            };

            static PyType_Slot PY_TYPE_SLOTS(QueryParserUtil)[] = {
              { Py_tp_methods, t_QueryParserUtil__methods_ },
              { Py_tp_init, (void *) t_QueryParserUtil_init_ },
              { 0, NULL }
            };

            static PyType_Def *PY_TYPE_BASES(QueryParserUtil)[] = {
              &PY_TYPE_DEF(::java::lang::Object),
              NULL
            };

            DEFINE_TYPE(QueryParserUtil, t_QueryParserUtil, QueryParserUtil);

            void t_QueryParserUtil::install(PyObject *module)
            {
              installType(&PY_TYPE(QueryParserUtil), &PY_TYPE_DEF(QueryParserUtil), module, "QueryParserUtil", 0);
            }

            void t_QueryParserUtil::initialize(PyObject *module)
            {
              PyObject_SetAttrString((PyObject *) PY_TYPE(QueryParserUtil), "class_", make_descriptor(QueryParserUtil::initializeClass, 1));
              PyObject_SetAttrString((PyObject *) PY_TYPE(QueryParserUtil), "wrapfn_", make_descriptor(t_QueryParserUtil::wrap_jobject));
              PyObject_SetAttrString((PyObject *) PY_TYPE(QueryParserUtil), "boxfn_", make_descriptor(boxObject));
            }

            static PyObject *t_QueryParserUtil_cast_(PyTypeObject *type, PyObject *arg)
            {
              if (!(arg = castCheck(arg, QueryParserUtil::initializeClass, 1)))
                return NULL;
              return t_QueryParserUtil::wrap_Object(QueryParserUtil(((t_QueryParserUtil *) arg)->object.this$));
            }
            static PyObject *t_QueryParserUtil_instance_(PyTypeObject *type, PyObject *arg)
            {
              if (!castCheck(arg, QueryParserUtil::initializeClass, 0))
                Py_RETURN_FALSE;
              Py_RETURN_TRUE;
            }

            static int t_QueryParserUtil_init_(t_QueryParserUtil *self, PyObject *args, PyObject *kwds)
            {
              QueryParserUtil object((jobject) NULL);

              INT_CALL(object = QueryParserUtil());
              self->object = object;

              return 0;
            }

            static PyObject *t_QueryParserUtil_escape(PyTypeObject *type, PyObject *arg)
            {
              ::java::lang::String a0((jobject) NULL);
              ::java::lang::String result((jobject) NULL);

              if (!parseArg(arg, "s", &a0))
              {
                OBJ_CALL(result = ::org::apache::lucene::queryparser::flexible::standard::QueryParserUtil::escape(a0));
                return j2p(result);
              }

              PyErr_SetArgsError(type, "escape", arg);
              return NULL;
            }

            static PyObject *t_QueryParserUtil_parse(PyTypeObject *type, PyObject *args)
            {
              switch (PyTuple_GET_SIZE(args)) {
               case 3:
                {
                  JArray< ::java::lang::String > a0((jobject) NULL);
                  JArray< ::java::lang::String > a1((jobject) NULL);
                  ::org::apache::lucene::analysis::Analyzer a2((jobject) NULL);
                  ::org::apache::lucene::search::Query result((jobject) NULL);

                  if (!parseArgs(args, "[s[sk", ::org::apache::lucene::analysis::Analyzer::initializeClass, &a0, &a1, &a2))
                  {
                    OBJ_CALL(result = ::org::apache::lucene::queryparser::flexible::standard::QueryParserUtil::parse(a0, a1, a2));
                    return ::org::apache::lucene::search::t_Query::wrap_Object(result);
                  }
                }
                break;
               case 4:
                {
                  JArray< ::java::lang::String > a0((jobject) NULL);
                  JArray< ::java::lang::String > a1((jobject) NULL);
                  JArray< ::org::apache::lucene::search::BooleanClause$Occur > a2((jobject) NULL);
                  PyTypeObject **p2;
                  ::org::apache::lucene::analysis::Analyzer a3((jobject) NULL);
                  ::org::apache::lucene::search::Query result((jobject) NULL);

                  if (!parseArgs(args, "[s[s[Kk", ::org::apache::lucene::search::BooleanClause$Occur::initializeClass, ::org::apache::lucene::analysis::Analyzer::initializeClass, &a0, &a1, &a2, &p2, ::org::apache::lucene::search::t_BooleanClause$Occur::parameters_, &a3))
                  {
                    OBJ_CALL(result = ::org::apache::lucene::queryparser::flexible::standard::QueryParserUtil::parse(a0, a1, a2, a3));
                    return ::org::apache::lucene::search::t_Query::wrap_Object(result);
                  }
                }
                {
                  ::java::lang::String a0((jobject) NULL);
                  JArray< ::java::lang::String > a1((jobject) NULL);
                  JArray< ::org::apache::lucene::search::BooleanClause$Occur > a2((jobject) NULL);
                  PyTypeObject **p2;
                  ::org::apache::lucene::analysis::Analyzer a3((jobject) NULL);
                  ::org::apache::lucene::search::Query result((jobject) NULL);

                  if (!parseArgs(args, "s[s[Kk", ::org::apache::lucene::search::BooleanClause$Occur::initializeClass, ::org::apache::lucene::analysis::Analyzer::initializeClass, &a0, &a1, &a2, &p2, ::org::apache::lucene::search::t_BooleanClause$Occur::parameters_, &a3))
                  {
                    OBJ_CALL(result = ::org::apache::lucene::queryparser::flexible::standard::QueryParserUtil::parse(a0, a1, a2, a3));
                    return ::org::apache::lucene::search::t_Query::wrap_Object(result);
                  }
                }
              }

              PyErr_SetArgsError(type, "parse", args);
              return NULL;
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/facet/taxonomy/writercache/NameIntCacheLRU.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace facet {
        namespace taxonomy {
          namespace writercache {

            ::java::lang::Class *NameIntCacheLRU::class$ = NULL;
            jmethodID *NameIntCacheLRU::mids$ = NULL;
            bool NameIntCacheLRU::live$ = false;

            jclass NameIntCacheLRU::initializeClass(bool getOnly)
            {
              if (getOnly)
                return (jclass) (live$ ? class$->this$ : NULL);
              if (class$ == NULL)
              {
                jclass cls = (jclass) env->findClass("org/apache/lucene/facet/taxonomy/writercache/NameIntCacheLRU");

                mids$ = new jmethodID[max_mid];
                mids$[mid_getMaxSize_9972fcc56b44e79d] = env->getMethodID(cls, "getMaxSize", "()I");
                mids$[mid_getSize_9972fcc56b44e79d] = env->getMethodID(cls, "getSize", "()I");

                class$ = new ::java::lang::Class(cls);
                live$ = true;
              }
              return (jclass) class$->this$;
            }

            jint NameIntCacheLRU::getMaxSize() const
            {
              return env->callIntMethod(this$, mids$[mid_getMaxSize_9972fcc56b44e79d]);
            }

            jint NameIntCacheLRU::getSize() const
            {
              return env->callIntMethod(this$, mids$[mid_getSize_9972fcc56b44e79d]);
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace facet {
        namespace taxonomy {
          namespace writercache {
            static PyObject *t_NameIntCacheLRU_cast_(PyTypeObject *type, PyObject *arg);
            static PyObject *t_NameIntCacheLRU_instance_(PyTypeObject *type, PyObject *arg);
            static PyObject *t_NameIntCacheLRU_getMaxSize(t_NameIntCacheLRU *self);
            static PyObject *t_NameIntCacheLRU_getSize(t_NameIntCacheLRU *self);
            static PyObject *t_NameIntCacheLRU_get__maxSize(t_NameIntCacheLRU *self, void *data);
            static PyObject *t_NameIntCacheLRU_get__size(t_NameIntCacheLRU *self, void *data);
            static PyGetSetDef t_NameIntCacheLRU__fields_[] = {
              DECLARE_GET_FIELD(t_NameIntCacheLRU, maxSize),
              DECLARE_GET_FIELD(t_NameIntCacheLRU, size),
              { NULL, NULL, NULL, NULL, NULL }
            };

            static PyMethodDef t_NameIntCacheLRU__methods_[] = {
              DECLARE_METHOD(t_NameIntCacheLRU, cast_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_NameIntCacheLRU, instance_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_NameIntCacheLRU, getMaxSize, METH_NOARGS),
              DECLARE_METHOD(t_NameIntCacheLRU, getSize, METH_NOARGS),
              { NULL, NULL, 0, NULL }
            };

            static PyType_Slot PY_TYPE_SLOTS(NameIntCacheLRU)[] = {
              { Py_tp_methods, t_NameIntCacheLRU__methods_ },
              { Py_tp_init, (void *) abstract_init },
              { Py_tp_getset, t_NameIntCacheLRU__fields_ },
              { 0, NULL }
            };

            static PyType_Def *PY_TYPE_BASES(NameIntCacheLRU)[] = {
              &PY_TYPE_DEF(::java::lang::Object),
              NULL
            };

            DEFINE_TYPE(NameIntCacheLRU, t_NameIntCacheLRU, NameIntCacheLRU);

            void t_NameIntCacheLRU::install(PyObject *module)
            {
              installType(&PY_TYPE(NameIntCacheLRU), &PY_TYPE_DEF(NameIntCacheLRU), module, "NameIntCacheLRU", 0);
            }

            void t_NameIntCacheLRU::initialize(PyObject *module)
            {
              PyObject_SetAttrString((PyObject *) PY_TYPE(NameIntCacheLRU), "class_", make_descriptor(NameIntCacheLRU::initializeClass, 1));
              PyObject_SetAttrString((PyObject *) PY_TYPE(NameIntCacheLRU), "wrapfn_", make_descriptor(t_NameIntCacheLRU::wrap_jobject));
              PyObject_SetAttrString((PyObject *) PY_TYPE(NameIntCacheLRU), "boxfn_", make_descriptor(boxObject));
            }

            static PyObject *t_NameIntCacheLRU_cast_(PyTypeObject *type, PyObject *arg)
            {
              if (!(arg = castCheck(arg, NameIntCacheLRU::initializeClass, 1)))
                return NULL;
              return t_NameIntCacheLRU::wrap_Object(NameIntCacheLRU(((t_NameIntCacheLRU *) arg)->object.this$));
            }
            static PyObject *t_NameIntCacheLRU_instance_(PyTypeObject *type, PyObject *arg)
            {
              if (!castCheck(arg, NameIntCacheLRU::initializeClass, 0))
                Py_RETURN_FALSE;
              Py_RETURN_TRUE;
            }

            static PyObject *t_NameIntCacheLRU_getMaxSize(t_NameIntCacheLRU *self)
            {
              jint result;
              OBJ_CALL(result = self->object.getMaxSize());
              return PyLong_FromLong((long) result);
            }

            static PyObject *t_NameIntCacheLRU_getSize(t_NameIntCacheLRU *self)
            {
              jint result;
              OBJ_CALL(result = self->object.getSize());
              return PyLong_FromLong((long) result);
            }

            static PyObject *t_NameIntCacheLRU_get__maxSize(t_NameIntCacheLRU *self, void *data)
            {
              jint value;
              OBJ_CALL(value = self->object.getMaxSize());
              return PyLong_FromLong((long) value);
            }

            static PyObject *t_NameIntCacheLRU_get__size(t_NameIntCacheLRU *self, void *data)
            {
              jint value;
              OBJ_CALL(value = self->object.getSize());
              return PyLong_FromLong((long) value);
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/suggest/fst/BytesRefSorter.h"
#include "java/util/Comparator.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/util/BytesRefIterator.h"
#include "org/apache/lucene/util/BytesRef.h"
#include "java/io/IOException.h"
#include "java/lang/IllegalStateException.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace suggest {
          namespace fst {

            ::java::lang::Class *BytesRefSorter::class$ = NULL;
            jmethodID *BytesRefSorter::mids$ = NULL;
            bool BytesRefSorter::live$ = false;

            jclass BytesRefSorter::initializeClass(bool getOnly)
            {
              if (getOnly)
                return (jclass) (live$ ? class$->this$ : NULL);
              if (class$ == NULL)
              {
                jclass cls = (jclass) env->findClass("org/apache/lucene/search/suggest/fst/BytesRefSorter");

                mids$ = new jmethodID[max_mid];
                mids$[mid_add_0bdfd2603b7490a8] = env->getMethodID(cls, "add", "(Lorg/apache/lucene/util/BytesRef;)V");
                mids$[mid_getComparator_beb0414e0ec1de00] = env->getMethodID(cls, "getComparator", "()Ljava/util/Comparator;");
                mids$[mid_iterator_5416289139cf0b84] = env->getMethodID(cls, "iterator", "()Lorg/apache/lucene/util/BytesRefIterator;");

                class$ = new ::java::lang::Class(cls);
                live$ = true;
              }
              return (jclass) class$->this$;
            }

            void BytesRefSorter::add(const ::org::apache::lucene::util::BytesRef & a0) const
            {
              env->callVoidMethod(this$, mids$[mid_add_0bdfd2603b7490a8], a0.this$);
            }

            ::java::util::Comparator BytesRefSorter::getComparator() const
            {
              return ::java::util::Comparator(env->callObjectMethod(this$, mids$[mid_getComparator_beb0414e0ec1de00]));
            }

            ::org::apache::lucene::util::BytesRefIterator BytesRefSorter::iterator() const
            {
              return ::org::apache::lucene::util::BytesRefIterator(env->callObjectMethod(this$, mids$[mid_iterator_5416289139cf0b84]));
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace suggest {
          namespace fst {
            static PyObject *t_BytesRefSorter_cast_(PyTypeObject *type, PyObject *arg);
            static PyObject *t_BytesRefSorter_instance_(PyTypeObject *type, PyObject *arg);
            static PyObject *t_BytesRefSorter_add(t_BytesRefSorter *self, PyObject *arg);
            static PyObject *t_BytesRefSorter_getComparator(t_BytesRefSorter *self);
            static PyObject *t_BytesRefSorter_iterator(t_BytesRefSorter *self);
            static PyObject *t_BytesRefSorter_get__comparator(t_BytesRefSorter *self, void *data);
            static PyGetSetDef t_BytesRefSorter__fields_[] = {
              DECLARE_GET_FIELD(t_BytesRefSorter, comparator),
              { NULL, NULL, NULL, NULL, NULL }
            };

            static PyMethodDef t_BytesRefSorter__methods_[] = {
              DECLARE_METHOD(t_BytesRefSorter, cast_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_BytesRefSorter, instance_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_BytesRefSorter, add, METH_O),
              DECLARE_METHOD(t_BytesRefSorter, getComparator, METH_NOARGS),
              DECLARE_METHOD(t_BytesRefSorter, iterator, METH_NOARGS),
              { NULL, NULL, 0, NULL }
            };

            static PyType_Slot PY_TYPE_SLOTS(BytesRefSorter)[] = {
              { Py_tp_methods, t_BytesRefSorter__methods_ },
              { Py_tp_init, (void *) abstract_init },
              { Py_tp_getset, t_BytesRefSorter__fields_ },
              { 0, NULL }
            };

            static PyType_Def *PY_TYPE_BASES(BytesRefSorter)[] = {
              &PY_TYPE_DEF(::java::lang::Object),
              NULL
            };

            DEFINE_TYPE(BytesRefSorter, t_BytesRefSorter, BytesRefSorter);

            void t_BytesRefSorter::install(PyObject *module)
            {
              installType(&PY_TYPE(BytesRefSorter), &PY_TYPE_DEF(BytesRefSorter), module, "BytesRefSorter", 0);
            }

            void t_BytesRefSorter::initialize(PyObject *module)
            {
              PyObject_SetAttrString((PyObject *) PY_TYPE(BytesRefSorter), "class_", make_descriptor(BytesRefSorter::initializeClass, 1));
              PyObject_SetAttrString((PyObject *) PY_TYPE(BytesRefSorter), "wrapfn_", make_descriptor(t_BytesRefSorter::wrap_jobject));
              PyObject_SetAttrString((PyObject *) PY_TYPE(BytesRefSorter), "boxfn_", make_descriptor(boxObject));
            }

            static PyObject *t_BytesRefSorter_cast_(PyTypeObject *type, PyObject *arg)
            {
              if (!(arg = castCheck(arg, BytesRefSorter::initializeClass, 1)))
                return NULL;
              return t_BytesRefSorter::wrap_Object(BytesRefSorter(((t_BytesRefSorter *) arg)->object.this$));
            }
            static PyObject *t_BytesRefSorter_instance_(PyTypeObject *type, PyObject *arg)
            {
              if (!castCheck(arg, BytesRefSorter::initializeClass, 0))
                Py_RETURN_FALSE;
              Py_RETURN_TRUE;
            }

            static PyObject *t_BytesRefSorter_add(t_BytesRefSorter *self, PyObject *arg)
            {
              ::org::apache::lucene::util::BytesRef a0((jobject) NULL);

              if (!parseArg(arg, "k", ::org::apache::lucene::util::BytesRef::initializeClass, &a0))
              {
                OBJ_CALL(self->object.add(a0));
                Py_RETURN_NONE;
              }

              PyErr_SetArgsError((PyObject *) self, "add", arg);
              return NULL;
            }

            static PyObject *t_BytesRefSorter_getComparator(t_BytesRefSorter *self)
            {
              ::java::util::Comparator result((jobject) NULL);
              OBJ_CALL(result = self->object.getComparator());
              return ::java::util::t_Comparator::wrap_Object(result, ::org::apache::lucene::util::PY_TYPE(BytesRef));
            }

            static PyObject *t_BytesRefSorter_iterator(t_BytesRefSorter *self)
            {
              ::org::apache::lucene::util::BytesRefIterator result((jobject) NULL);
              OBJ_CALL(result = self->object.iterator());
              return ::org::apache::lucene::util::t_BytesRefIterator::wrap_Object(result);
            }

            static PyObject *t_BytesRefSorter_get__comparator(t_BytesRefSorter *self, void *data)
            {
              ::java::util::Comparator value((jobject) NULL);
              OBJ_CALL(value = self->object.getComparator());
              return ::java::util::t_Comparator::wrap_Object(value);
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/cjk/CJKBigramFilterFactory.h"
#include "java/util/Map.h"
#include "java/lang/String.h"
#include "org/apache/lucene/analysis/TokenStream.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace cjk {

          ::java::lang::Class *CJKBigramFilterFactory::class$ = NULL;
          jmethodID *CJKBigramFilterFactory::mids$ = NULL;
          bool CJKBigramFilterFactory::live$ = false;
          ::java::lang::String *CJKBigramFilterFactory::NAME = NULL;

          jclass CJKBigramFilterFactory::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/cjk/CJKBigramFilterFactory");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_408bd889ee3beae5] = env->getMethodID(cls, "<init>", "(Ljava/util/Map;)V");
              mids$[mid_create_6de1e28d9d10cd9e] = env->getMethodID(cls, "create", "(Lorg/apache/lucene/analysis/TokenStream;)Lorg/apache/lucene/analysis/TokenStream;");

              class$ = new ::java::lang::Class(cls);
              cls = (jclass) class$->this$;

              NAME = new ::java::lang::String(env->getStaticObjectField(cls, "NAME", "Ljava/lang/String;"));
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          CJKBigramFilterFactory::CJKBigramFilterFactory(const ::java::util::Map & a0) : ::org::apache::lucene::analysis::util::TokenFilterFactory(env->newObject(initializeClass, &mids$, mid_init$_408bd889ee3beae5, a0.this$)) {}

          ::org::apache::lucene::analysis::TokenStream CJKBigramFilterFactory::create(const ::org::apache::lucene::analysis::TokenStream & a0) const
          {
            return ::org::apache::lucene::analysis::TokenStream(env->callObjectMethod(this$, mids$[mid_create_6de1e28d9d10cd9e], a0.this$));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace cjk {
          static PyObject *t_CJKBigramFilterFactory_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_CJKBigramFilterFactory_instance_(PyTypeObject *type, PyObject *arg);
          static int t_CJKBigramFilterFactory_init_(t_CJKBigramFilterFactory *self, PyObject *args, PyObject *kwds);
          static PyObject *t_CJKBigramFilterFactory_create(t_CJKBigramFilterFactory *self, PyObject *args);

          static PyMethodDef t_CJKBigramFilterFactory__methods_[] = {
            DECLARE_METHOD(t_CJKBigramFilterFactory, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_CJKBigramFilterFactory, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_CJKBigramFilterFactory, create, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          static PyType_Slot PY_TYPE_SLOTS(CJKBigramFilterFactory)[] = {
            { Py_tp_methods, t_CJKBigramFilterFactory__methods_ },
            { Py_tp_init, (void *) t_CJKBigramFilterFactory_init_ },
            { 0, NULL }
          };

          static PyType_Def *PY_TYPE_BASES(CJKBigramFilterFactory)[] = {
            &PY_TYPE_DEF(::org::apache::lucene::analysis::util::TokenFilterFactory),
            NULL
          };

          DEFINE_TYPE(CJKBigramFilterFactory, t_CJKBigramFilterFactory, CJKBigramFilterFactory);

          void t_CJKBigramFilterFactory::install(PyObject *module)
          {
            installType(&PY_TYPE(CJKBigramFilterFactory), &PY_TYPE_DEF(CJKBigramFilterFactory), module, "CJKBigramFilterFactory", 0);
          }

          void t_CJKBigramFilterFactory::initialize(PyObject *module)
          {
            PyObject_SetAttrString((PyObject *) PY_TYPE(CJKBigramFilterFactory), "class_", make_descriptor(CJKBigramFilterFactory::initializeClass, 1));
            PyObject_SetAttrString((PyObject *) PY_TYPE(CJKBigramFilterFactory), "wrapfn_", make_descriptor(t_CJKBigramFilterFactory::wrap_jobject));
            PyObject_SetAttrString((PyObject *) PY_TYPE(CJKBigramFilterFactory), "boxfn_", make_descriptor(boxObject));
            env->getClass(CJKBigramFilterFactory::initializeClass);
            PyObject_SetAttrString((PyObject *) PY_TYPE(CJKBigramFilterFactory), "NAME", make_descriptor(j2p(*CJKBigramFilterFactory::NAME)));
          }

          static PyObject *t_CJKBigramFilterFactory_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, CJKBigramFilterFactory::initializeClass, 1)))
              return NULL;
            return t_CJKBigramFilterFactory::wrap_Object(CJKBigramFilterFactory(((t_CJKBigramFilterFactory *) arg)->object.this$));
          }
          static PyObject *t_CJKBigramFilterFactory_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, CJKBigramFilterFactory::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_CJKBigramFilterFactory_init_(t_CJKBigramFilterFactory *self, PyObject *args, PyObject *kwds)
          {
            ::java::util::Map a0((jobject) NULL);
            PyTypeObject **p0;
            CJKBigramFilterFactory object((jobject) NULL);

            if (!parseArgs(args, "K", ::java::util::Map::initializeClass, &a0, &p0, ::java::util::t_Map::parameters_))
            {
              INT_CALL(object = CJKBigramFilterFactory(a0));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_CJKBigramFilterFactory_create(t_CJKBigramFilterFactory *self, PyObject *args)
          {
            ::org::apache::lucene::analysis::TokenStream a0((jobject) NULL);
            ::org::apache::lucene::analysis::TokenStream result((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::analysis::TokenStream::initializeClass, &a0))
            {
              OBJ_CALL(result = self->object.create(a0));
              return ::org::apache::lucene::analysis::t_TokenStream::wrap_Object(result);
            }

            return callSuper(PY_TYPE(CJKBigramFilterFactory), (PyObject *) self, "create", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/miscellaneous/DropIfFlaggedFilterFactory.h"
#include "java/util/Map.h"
#include "java/lang/String.h"
#include "org/apache/lucene/analysis/TokenStream.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace miscellaneous {

          ::java::lang::Class *DropIfFlaggedFilterFactory::class$ = NULL;
          jmethodID *DropIfFlaggedFilterFactory::mids$ = NULL;
          bool DropIfFlaggedFilterFactory::live$ = false;
          ::java::lang::String *DropIfFlaggedFilterFactory::NAME = NULL;

          jclass DropIfFlaggedFilterFactory::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/miscellaneous/DropIfFlaggedFilterFactory");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_408bd889ee3beae5] = env->getMethodID(cls, "<init>", "(Ljava/util/Map;)V");
              mids$[mid_create_6de1e28d9d10cd9e] = env->getMethodID(cls, "create", "(Lorg/apache/lucene/analysis/TokenStream;)Lorg/apache/lucene/analysis/TokenStream;");

              class$ = new ::java::lang::Class(cls);
              cls = (jclass) class$->this$;

              NAME = new ::java::lang::String(env->getStaticObjectField(cls, "NAME", "Ljava/lang/String;"));
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          DropIfFlaggedFilterFactory::DropIfFlaggedFilterFactory(const ::java::util::Map & a0) : ::org::apache::lucene::analysis::util::TokenFilterFactory(env->newObject(initializeClass, &mids$, mid_init$_408bd889ee3beae5, a0.this$)) {}

          ::org::apache::lucene::analysis::TokenStream DropIfFlaggedFilterFactory::create(const ::org::apache::lucene::analysis::TokenStream & a0) const
          {
            return ::org::apache::lucene::analysis::TokenStream(env->callObjectMethod(this$, mids$[mid_create_6de1e28d9d10cd9e], a0.this$));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace miscellaneous {
          static PyObject *t_DropIfFlaggedFilterFactory_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_DropIfFlaggedFilterFactory_instance_(PyTypeObject *type, PyObject *arg);
          static int t_DropIfFlaggedFilterFactory_init_(t_DropIfFlaggedFilterFactory *self, PyObject *args, PyObject *kwds);
          static PyObject *t_DropIfFlaggedFilterFactory_create(t_DropIfFlaggedFilterFactory *self, PyObject *args);

          static PyMethodDef t_DropIfFlaggedFilterFactory__methods_[] = {
            DECLARE_METHOD(t_DropIfFlaggedFilterFactory, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_DropIfFlaggedFilterFactory, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_DropIfFlaggedFilterFactory, create, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          static PyType_Slot PY_TYPE_SLOTS(DropIfFlaggedFilterFactory)[] = {
            { Py_tp_methods, t_DropIfFlaggedFilterFactory__methods_ },
            { Py_tp_init, (void *) t_DropIfFlaggedFilterFactory_init_ },
            { 0, NULL }
          };

          static PyType_Def *PY_TYPE_BASES(DropIfFlaggedFilterFactory)[] = {
            &PY_TYPE_DEF(::org::apache::lucene::analysis::util::TokenFilterFactory),
            NULL
          };

          DEFINE_TYPE(DropIfFlaggedFilterFactory, t_DropIfFlaggedFilterFactory, DropIfFlaggedFilterFactory);

          void t_DropIfFlaggedFilterFactory::install(PyObject *module)
          {
            installType(&PY_TYPE(DropIfFlaggedFilterFactory), &PY_TYPE_DEF(DropIfFlaggedFilterFactory), module, "DropIfFlaggedFilterFactory", 0);
          }

          void t_DropIfFlaggedFilterFactory::initialize(PyObject *module)
          {
            PyObject_SetAttrString((PyObject *) PY_TYPE(DropIfFlaggedFilterFactory), "class_", make_descriptor(DropIfFlaggedFilterFactory::initializeClass, 1));
            PyObject_SetAttrString((PyObject *) PY_TYPE(DropIfFlaggedFilterFactory), "wrapfn_", make_descriptor(t_DropIfFlaggedFilterFactory::wrap_jobject));
            PyObject_SetAttrString((PyObject *) PY_TYPE(DropIfFlaggedFilterFactory), "boxfn_", make_descriptor(boxObject));
            env->getClass(DropIfFlaggedFilterFactory::initializeClass);
            PyObject_SetAttrString((PyObject *) PY_TYPE(DropIfFlaggedFilterFactory), "NAME", make_descriptor(j2p(*DropIfFlaggedFilterFactory::NAME)));
          }

          static PyObject *t_DropIfFlaggedFilterFactory_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, DropIfFlaggedFilterFactory::initializeClass, 1)))
              return NULL;
            return t_DropIfFlaggedFilterFactory::wrap_Object(DropIfFlaggedFilterFactory(((t_DropIfFlaggedFilterFactory *) arg)->object.this$));
          }
          static PyObject *t_DropIfFlaggedFilterFactory_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, DropIfFlaggedFilterFactory::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_DropIfFlaggedFilterFactory_init_(t_DropIfFlaggedFilterFactory *self, PyObject *args, PyObject *kwds)
          {
            ::java::util::Map a0((jobject) NULL);
            PyTypeObject **p0;
            DropIfFlaggedFilterFactory object((jobject) NULL);

            if (!parseArgs(args, "K", ::java::util::Map::initializeClass, &a0, &p0, ::java::util::t_Map::parameters_))
            {
              INT_CALL(object = DropIfFlaggedFilterFactory(a0));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_DropIfFlaggedFilterFactory_create(t_DropIfFlaggedFilterFactory *self, PyObject *args)
          {
            ::org::apache::lucene::analysis::TokenStream a0((jobject) NULL);
            ::org::apache::lucene::analysis::TokenStream result((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::analysis::TokenStream::initializeClass, &a0))
            {
              OBJ_CALL(result = self->object.create(a0));
              return ::org::apache::lucene::analysis::t_TokenStream::wrap_Object(result);
            }

            return callSuper(PY_TYPE(DropIfFlaggedFilterFactory), (PyObject *) self, "create", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/index/CheckIndex$Status$TermIndexStatus.h"
#include "java/util/Map.h"
#include "java/lang/Class.h"
#include "java/lang/String.h"
#include "java/lang/Throwable.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {

        ::java::lang::Class *CheckIndex$Status$TermIndexStatus::class$ = NULL;
        jmethodID *CheckIndex$Status$TermIndexStatus::mids$ = NULL;
        jfieldID *CheckIndex$Status$TermIndexStatus::fids$ = NULL;
        bool CheckIndex$Status$TermIndexStatus::live$ = false;

        jclass CheckIndex$Status$TermIndexStatus::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/index/CheckIndex$Status$TermIndexStatus");

            fids$ = new jfieldID[max_fid];
            fids$[fid_blockTreeStats] = env->getFieldID(cls, "blockTreeStats", "Ljava/util/Map;");
            fids$[fid_delTermCount] = env->getFieldID(cls, "delTermCount", "J");
            fids$[fid_error] = env->getFieldID(cls, "error", "Ljava/lang/Throwable;");
            fids$[fid_termCount] = env->getFieldID(cls, "termCount", "J");
            fids$[fid_totFreq] = env->getFieldID(cls, "totFreq", "J");
            fids$[fid_totPos] = env->getFieldID(cls, "totPos", "J");

            class$ = new ::java::lang::Class(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        ::java::util::Map CheckIndex$Status$TermIndexStatus::_get_blockTreeStats() const
        {
          return ::java::util::Map(env->getObjectField(this$, fids$[fid_blockTreeStats]));
        }

        void CheckIndex$Status$TermIndexStatus::_set_blockTreeStats(const ::java::util::Map & a0) const
        {
          env->setObjectField(this$, fids$[fid_blockTreeStats], a0.this$);
        }

        jlong CheckIndex$Status$TermIndexStatus::_get_delTermCount() const
        {
          return env->getLongField(this$, fids$[fid_delTermCount]);
        }

        void CheckIndex$Status$TermIndexStatus::_set_delTermCount(jlong a0) const
        {
          env->setLongField(this$, fids$[fid_delTermCount], a0);
        }

        ::java::lang::Throwable CheckIndex$Status$TermIndexStatus::_get_error() const
        {
          return ::java::lang::Throwable(env->getObjectField(this$, fids$[fid_error]));
        }

        void CheckIndex$Status$TermIndexStatus::_set_error(const ::java::lang::Throwable & a0) const
        {
          env->setObjectField(this$, fids$[fid_error], a0.this$);
        }

        jlong CheckIndex$Status$TermIndexStatus::_get_termCount() const
        {
          return env->getLongField(this$, fids$[fid_termCount]);
        }

        void CheckIndex$Status$TermIndexStatus::_set_termCount(jlong a0) const
        {
          env->setLongField(this$, fids$[fid_termCount], a0);
        }

        jlong CheckIndex$Status$TermIndexStatus::_get_totFreq() const
        {
          return env->getLongField(this$, fids$[fid_totFreq]);
        }

        void CheckIndex$Status$TermIndexStatus::_set_totFreq(jlong a0) const
        {
          env->setLongField(this$, fids$[fid_totFreq], a0);
        }

        jlong CheckIndex$Status$TermIndexStatus::_get_totPos() const
        {
          return env->getLongField(this$, fids$[fid_totPos]);
        }

        void CheckIndex$Status$TermIndexStatus::_set_totPos(jlong a0) const
        {
          env->setLongField(this$, fids$[fid_totPos], a0);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {
        static PyObject *t_CheckIndex$Status$TermIndexStatus_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_CheckIndex$Status$TermIndexStatus_instance_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_CheckIndex$Status$TermIndexStatus_get__blockTreeStats(t_CheckIndex$Status$TermIndexStatus *self, void *data);
        static int t_CheckIndex$Status$TermIndexStatus_set__blockTreeStats(t_CheckIndex$Status$TermIndexStatus *self, PyObject *arg, void *data);
        static PyObject *t_CheckIndex$Status$TermIndexStatus_get__delTermCount(t_CheckIndex$Status$TermIndexStatus *self, void *data);
        static int t_CheckIndex$Status$TermIndexStatus_set__delTermCount(t_CheckIndex$Status$TermIndexStatus *self, PyObject *arg, void *data);
        static PyObject *t_CheckIndex$Status$TermIndexStatus_get__error(t_CheckIndex$Status$TermIndexStatus *self, void *data);
        static int t_CheckIndex$Status$TermIndexStatus_set__error(t_CheckIndex$Status$TermIndexStatus *self, PyObject *arg, void *data);
        static PyObject *t_CheckIndex$Status$TermIndexStatus_get__termCount(t_CheckIndex$Status$TermIndexStatus *self, void *data);
        static int t_CheckIndex$Status$TermIndexStatus_set__termCount(t_CheckIndex$Status$TermIndexStatus *self, PyObject *arg, void *data);
        static PyObject *t_CheckIndex$Status$TermIndexStatus_get__totFreq(t_CheckIndex$Status$TermIndexStatus *self, void *data);
        static int t_CheckIndex$Status$TermIndexStatus_set__totFreq(t_CheckIndex$Status$TermIndexStatus *self, PyObject *arg, void *data);
        static PyObject *t_CheckIndex$Status$TermIndexStatus_get__totPos(t_CheckIndex$Status$TermIndexStatus *self, void *data);
        static int t_CheckIndex$Status$TermIndexStatus_set__totPos(t_CheckIndex$Status$TermIndexStatus *self, PyObject *arg, void *data);

        static PyGetSetDef t_CheckIndex$Status$TermIndexStatus__fields_[] = {
          DECLARE_GETSET_FIELD(t_CheckIndex$Status$TermIndexStatus, blockTreeStats),
          DECLARE_GETSET_FIELD(t_CheckIndex$Status$TermIndexStatus, delTermCount),
          DECLARE_GETSET_FIELD(t_CheckIndex$Status$TermIndexStatus, error),
          DECLARE_GETSET_FIELD(t_CheckIndex$Status$TermIndexStatus, termCount),
          DECLARE_GETSET_FIELD(t_CheckIndex$Status$TermIndexStatus, totFreq),
          DECLARE_GETSET_FIELD(t_CheckIndex$Status$TermIndexStatus, totPos),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_CheckIndex$Status$TermIndexStatus__methods_[] = {
          DECLARE_METHOD(t_CheckIndex$Status$TermIndexStatus, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_CheckIndex$Status$TermIndexStatus, instance_, METH_O | METH_CLASS),
          { NULL, NULL, 0, NULL }
        };

        static PyType_Slot PY_TYPE_SLOTS(CheckIndex$Status$TermIndexStatus)[] = {
          { Py_tp_methods, t_CheckIndex$Status$TermIndexStatus__methods_ },
          { Py_tp_init, (void *) abstract_init },
          { Py_tp_getset, t_CheckIndex$Status$TermIndexStatus__fields_ },
          { 0, NULL }
        };

        static PyType_Def *PY_TYPE_BASES(CheckIndex$Status$TermIndexStatus)[] = {
          &PY_TYPE_DEF(::java::lang::Object),
          NULL
        };

        DEFINE_TYPE(CheckIndex$Status$TermIndexStatus, t_CheckIndex$Status$TermIndexStatus, CheckIndex$Status$TermIndexStatus);

        void t_CheckIndex$Status$TermIndexStatus::install(PyObject *module)
        {
          installType(&PY_TYPE(CheckIndex$Status$TermIndexStatus), &PY_TYPE_DEF(CheckIndex$Status$TermIndexStatus), module, "CheckIndex$Status$TermIndexStatus", 0);
        }

        void t_CheckIndex$Status$TermIndexStatus::initialize(PyObject *module)
        {
          PyObject_SetAttrString((PyObject *) PY_TYPE(CheckIndex$Status$TermIndexStatus), "class_", make_descriptor(CheckIndex$Status$TermIndexStatus::initializeClass, 1));
          PyObject_SetAttrString((PyObject *) PY_TYPE(CheckIndex$Status$TermIndexStatus), "wrapfn_", make_descriptor(t_CheckIndex$Status$TermIndexStatus::wrap_jobject));
          PyObject_SetAttrString((PyObject *) PY_TYPE(CheckIndex$Status$TermIndexStatus), "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_CheckIndex$Status$TermIndexStatus_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, CheckIndex$Status$TermIndexStatus::initializeClass, 1)))
            return NULL;
          return t_CheckIndex$Status$TermIndexStatus::wrap_Object(CheckIndex$Status$TermIndexStatus(((t_CheckIndex$Status$TermIndexStatus *) arg)->object.this$));
        }
        static PyObject *t_CheckIndex$Status$TermIndexStatus_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, CheckIndex$Status$TermIndexStatus::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static PyObject *t_CheckIndex$Status$TermIndexStatus_get__blockTreeStats(t_CheckIndex$Status$TermIndexStatus *self, void *data)
        {
          ::java::util::Map value((jobject) NULL);
          OBJ_CALL(value = self->object._get_blockTreeStats());
          return ::java::util::t_Map::wrap_Object(value);
        }
        static int t_CheckIndex$Status$TermIndexStatus_set__blockTreeStats(t_CheckIndex$Status$TermIndexStatus *self, PyObject *arg, void *data)
        {
          ::java::util::Map value((jobject) NULL);
          if (!parseArg(arg, "k", ::java::util::Map::initializeClass, &value))
          {
            INT_CALL(self->object._set_blockTreeStats(value));
            return 0;
          }
          PyErr_SetArgsError((PyObject *) self, "blockTreeStats", arg);
          return -1;
        }

        static PyObject *t_CheckIndex$Status$TermIndexStatus_get__delTermCount(t_CheckIndex$Status$TermIndexStatus *self, void *data)
        {
          jlong value;
          OBJ_CALL(value = self->object._get_delTermCount());
          return PyLong_FromLongLong((PY_LONG_LONG) value);
        }
        static int t_CheckIndex$Status$TermIndexStatus_set__delTermCount(t_CheckIndex$Status$TermIndexStatus *self, PyObject *arg, void *data)
        {
          jlong value;
          if (!parseArg(arg, "J", &value))
          {
            INT_CALL(self->object._set_delTermCount(value));
            return 0;
          }
          PyErr_SetArgsError((PyObject *) self, "delTermCount", arg);
          return -1;
        }

        static PyObject *t_CheckIndex$Status$TermIndexStatus_get__error(t_CheckIndex$Status$TermIndexStatus *self, void *data)
        {
          ::java::lang::Throwable value((jobject) NULL);
          OBJ_CALL(value = self->object._get_error());
          return ::java::lang::t_Throwable::wrap_Object(value);
        }
        static int t_CheckIndex$Status$TermIndexStatus_set__error(t_CheckIndex$Status$TermIndexStatus *self, PyObject *arg, void *data)
        {
          ::java::lang::Throwable value((jobject) NULL);
          if (!parseArg(arg, "k", ::java::lang::Throwable::initializeClass, &value))
          {
            INT_CALL(self->object._set_error(value));
            return 0;
          }
          PyErr_SetArgsError((PyObject *) self, "error", arg);
          return -1;
        }

        static PyObject *t_CheckIndex$Status$TermIndexStatus_get__termCount(t_CheckIndex$Status$TermIndexStatus *self, void *data)
        {
          jlong value;
          OBJ_CALL(value = self->object._get_termCount());
          return PyLong_FromLongLong((PY_LONG_LONG) value);
        }
        static int t_CheckIndex$Status$TermIndexStatus_set__termCount(t_CheckIndex$Status$TermIndexStatus *self, PyObject *arg, void *data)
        {
          jlong value;
          if (!parseArg(arg, "J", &value))
          {
            INT_CALL(self->object._set_termCount(value));
            return 0;
          }
          PyErr_SetArgsError((PyObject *) self, "termCount", arg);
          return -1;
        }

        static PyObject *t_CheckIndex$Status$TermIndexStatus_get__totFreq(t_CheckIndex$Status$TermIndexStatus *self, void *data)
        {
          jlong value;
          OBJ_CALL(value = self->object._get_totFreq());
          return PyLong_FromLongLong((PY_LONG_LONG) value);
        }
        static int t_CheckIndex$Status$TermIndexStatus_set__totFreq(t_CheckIndex$Status$TermIndexStatus *self, PyObject *arg, void *data)
        {
          jlong value;
          if (!parseArg(arg, "J", &value))
          {
            INT_CALL(self->object._set_totFreq(value));
            return 0;
          }
          PyErr_SetArgsError((PyObject *) self, "totFreq", arg);
          return -1;
        }

        static PyObject *t_CheckIndex$Status$TermIndexStatus_get__totPos(t_CheckIndex$Status$TermIndexStatus *self, void *data)
        {
          jlong value;
          OBJ_CALL(value = self->object._get_totPos());
          return PyLong_FromLongLong((PY_LONG_LONG) value);
        }
        static int t_CheckIndex$Status$TermIndexStatus_set__totPos(t_CheckIndex$Status$TermIndexStatus *self, PyObject *arg, void *data)
        {
          jlong value;
          if (!parseArg(arg, "J", &value))
          {
            INT_CALL(self->object._set_totPos(value));
            return 0;
          }
          PyErr_SetArgsError((PyObject *) self, "totPos", arg);
          return -1;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/index/IndexSorter.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/index/LeafReader.h"
#include "org/apache/lucene/index/IndexSorter$ComparableProvider.h"
#include "java/lang/String.h"
#include "java/io/IOException.h"
#include "java/util/List.h"
#include "org/apache/lucene/index/IndexSorter$DocComparator.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {

        ::java::lang::Class *IndexSorter::class$ = NULL;
        jmethodID *IndexSorter::mids$ = NULL;
        bool IndexSorter::live$ = false;

        jclass IndexSorter::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/index/IndexSorter");

            mids$ = new jmethodID[max_mid];
            mids$[mid_getComparableProviders_739976833795f559] = env->getMethodID(cls, "getComparableProviders", "(Ljava/util/List;)[Lorg/apache/lucene/index/IndexSorter$ComparableProvider;");
            mids$[mid_getDocComparator_8d0e93a4e9ab83f9] = env->getMethodID(cls, "getDocComparator", "(Lorg/apache/lucene/index/LeafReader;I)Lorg/apache/lucene/index/IndexSorter$DocComparator;");
            mids$[mid_getProviderName_db9b55ba01e03e4b] = env->getMethodID(cls, "getProviderName", "()Ljava/lang/String;");

            class$ = new ::java::lang::Class(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        JArray< ::org::apache::lucene::index::IndexSorter$ComparableProvider > IndexSorter::getComparableProviders(const ::java::util::List & a0) const
        {
          return JArray< ::org::apache::lucene::index::IndexSorter$ComparableProvider >(env->callObjectMethod(this$, mids$[mid_getComparableProviders_739976833795f559], a0.this$));
        }

        ::org::apache::lucene::index::IndexSorter$DocComparator IndexSorter::getDocComparator(const ::org::apache::lucene::index::LeafReader & a0, jint a1) const
        {
          return ::org::apache::lucene::index::IndexSorter$DocComparator(env->callObjectMethod(this$, mids$[mid_getDocComparator_8d0e93a4e9ab83f9], a0.this$, a1));
        }

        ::java::lang::String IndexSorter::getProviderName() const
        {
          return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_getProviderName_db9b55ba01e03e4b]));
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"
#include "org/apache/lucene/index/IndexSorter$StringSorter.h"
#include "org/apache/lucene/index/IndexSorter$DoubleSorter.h"
#include "org/apache/lucene/index/IndexSorter$FloatSorter.h"
#include "org/apache/lucene/index/IndexSorter$LongSorter.h"
#include "org/apache/lucene/index/IndexSorter$IntSorter.h"
#include "org/apache/lucene/index/IndexSorter$SortedDocValuesProvider.h"
#include "org/apache/lucene/index/IndexSorter$NumericDocValuesProvider.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {
        static PyObject *t_IndexSorter_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_IndexSorter_instance_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_IndexSorter_getComparableProviders(t_IndexSorter *self, PyObject *arg);
        static PyObject *t_IndexSorter_getDocComparator(t_IndexSorter *self, PyObject *args);
        static PyObject *t_IndexSorter_getProviderName(t_IndexSorter *self);
        static PyObject *t_IndexSorter_get__providerName(t_IndexSorter *self, void *data);
        static PyGetSetDef t_IndexSorter__fields_[] = {
          DECLARE_GET_FIELD(t_IndexSorter, providerName),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_IndexSorter__methods_[] = {
          DECLARE_METHOD(t_IndexSorter, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_IndexSorter, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_IndexSorter, getComparableProviders, METH_O),
          DECLARE_METHOD(t_IndexSorter, getDocComparator, METH_VARARGS),
          DECLARE_METHOD(t_IndexSorter, getProviderName, METH_NOARGS),
          { NULL, NULL, 0, NULL }
        };

        static PyType_Slot PY_TYPE_SLOTS(IndexSorter)[] = {
          { Py_tp_methods, t_IndexSorter__methods_ },
          { Py_tp_init, (void *) abstract_init },
          { Py_tp_getset, t_IndexSorter__fields_ },
          { 0, NULL }
        };

        static PyType_Def *PY_TYPE_BASES(IndexSorter)[] = {
          &PY_TYPE_DEF(::java::lang::Object),
          NULL
        };

        DEFINE_TYPE(IndexSorter, t_IndexSorter, IndexSorter);

        void t_IndexSorter::install(PyObject *module)
        {
          installType(&PY_TYPE(IndexSorter), &PY_TYPE_DEF(IndexSorter), module, "IndexSorter", 0);
          PyObject_SetAttrString((PyObject *) PY_TYPE(IndexSorter), "StringSorter", make_descriptor(&PY_TYPE_DEF(IndexSorter$StringSorter)));
          PyObject_SetAttrString((PyObject *) PY_TYPE(IndexSorter), "DoubleSorter", make_descriptor(&PY_TYPE_DEF(IndexSorter$DoubleSorter)));
          PyObject_SetAttrString((PyObject *) PY_TYPE(IndexSorter), "FloatSorter", make_descriptor(&PY_TYPE_DEF(IndexSorter$FloatSorter)));
          PyObject_SetAttrString((PyObject *) PY_TYPE(IndexSorter), "LongSorter", make_descriptor(&PY_TYPE_DEF(IndexSorter$LongSorter)));
          PyObject_SetAttrString((PyObject *) PY_TYPE(IndexSorter), "IntSorter", make_descriptor(&PY_TYPE_DEF(IndexSorter$IntSorter)));
          PyObject_SetAttrString((PyObject *) PY_TYPE(IndexSorter), "SortedDocValuesProvider", make_descriptor(&PY_TYPE_DEF(IndexSorter$SortedDocValuesProvider)));
          PyObject_SetAttrString((PyObject *) PY_TYPE(IndexSorter), "NumericDocValuesProvider", make_descriptor(&PY_TYPE_DEF(IndexSorter$NumericDocValuesProvider)));
          PyObject_SetAttrString((PyObject *) PY_TYPE(IndexSorter), "DocComparator", make_descriptor(&PY_TYPE_DEF(IndexSorter$DocComparator)));
          PyObject_SetAttrString((PyObject *) PY_TYPE(IndexSorter), "ComparableProvider", make_descriptor(&PY_TYPE_DEF(IndexSorter$ComparableProvider)));
        }

        void t_IndexSorter::initialize(PyObject *module)
        {
          PyObject_SetAttrString((PyObject *) PY_TYPE(IndexSorter), "class_", make_descriptor(IndexSorter::initializeClass, 1));
          PyObject_SetAttrString((PyObject *) PY_TYPE(IndexSorter), "wrapfn_", make_descriptor(t_IndexSorter::wrap_jobject));
          PyObject_SetAttrString((PyObject *) PY_TYPE(IndexSorter), "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_IndexSorter_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, IndexSorter::initializeClass, 1)))
            return NULL;
          return t_IndexSorter::wrap_Object(IndexSorter(((t_IndexSorter *) arg)->object.this$));
        }
        static PyObject *t_IndexSorter_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, IndexSorter::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static PyObject *t_IndexSorter_getComparableProviders(t_IndexSorter *self, PyObject *arg)
        {
          ::java::util::List a0((jobject) NULL);
          PyTypeObject **p0;
          JArray< ::org::apache::lucene::index::IndexSorter$ComparableProvider > result((jobject) NULL);

          if (!parseArg(arg, "K", ::java::util::List::initializeClass, &a0, &p0, ::java::util::t_List::parameters_))
          {
            OBJ_CALL(result = self->object.getComparableProviders(a0));
            return JArray<jobject>(result.this$).wrap(::org::apache::lucene::index::t_IndexSorter$ComparableProvider::wrap_jobject);
          }

          PyErr_SetArgsError((PyObject *) self, "getComparableProviders", arg);
          return NULL;
        }

        static PyObject *t_IndexSorter_getDocComparator(t_IndexSorter *self, PyObject *args)
        {
          ::org::apache::lucene::index::LeafReader a0((jobject) NULL);
          jint a1;
          ::org::apache::lucene::index::IndexSorter$DocComparator result((jobject) NULL);

          if (!parseArgs(args, "kI", ::org::apache::lucene::index::LeafReader::initializeClass, &a0, &a1))
          {
            OBJ_CALL(result = self->object.getDocComparator(a0, a1));
            return ::org::apache::lucene::index::t_IndexSorter$DocComparator::wrap_Object(result);
          }

          PyErr_SetArgsError((PyObject *) self, "getDocComparator", args);
          return NULL;
        }

        static PyObject *t_IndexSorter_getProviderName(t_IndexSorter *self)
        {
          ::java::lang::String result((jobject) NULL);
          OBJ_CALL(result = self->object.getProviderName());
          return j2p(result);
        }

        static PyObject *t_IndexSorter_get__providerName(t_IndexSorter *self, void *data)
        {
          ::java::lang::String value((jobject) NULL);
          OBJ_CALL(value = self->object.getProviderName());
          return j2p(value);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/hunspell/HunspellStemFilterFactory.h"
#include "java/util/Map.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/analysis/TokenStream.h"
#include "org/apache/lucene/analysis/util/ResourceLoader.h"
#include "java/lang/String.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/analysis/util/ResourceLoaderAware.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace hunspell {

          ::java::lang::Class *HunspellStemFilterFactory::class$ = NULL;
          jmethodID *HunspellStemFilterFactory::mids$ = NULL;
          bool HunspellStemFilterFactory::live$ = false;
          ::java::lang::String *HunspellStemFilterFactory::NAME = NULL;

          jclass HunspellStemFilterFactory::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/hunspell/HunspellStemFilterFactory");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_408bd889ee3beae5] = env->getMethodID(cls, "<init>", "(Ljava/util/Map;)V");
              mids$[mid_create_6de1e28d9d10cd9e] = env->getMethodID(cls, "create", "(Lorg/apache/lucene/analysis/TokenStream;)Lorg/apache/lucene/analysis/TokenStream;");
              mids$[mid_inform_b4ee53c41a5f629f] = env->getMethodID(cls, "inform", "(Lorg/apache/lucene/analysis/util/ResourceLoader;)V");

              class$ = new ::java::lang::Class(cls);
              cls = (jclass) class$->this$;

              NAME = new ::java::lang::String(env->getStaticObjectField(cls, "NAME", "Ljava/lang/String;"));
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          HunspellStemFilterFactory::HunspellStemFilterFactory(const ::java::util::Map & a0) : ::org::apache::lucene::analysis::util::TokenFilterFactory(env->newObject(initializeClass, &mids$, mid_init$_408bd889ee3beae5, a0.this$)) {}

          ::org::apache::lucene::analysis::TokenStream HunspellStemFilterFactory::create(const ::org::apache::lucene::analysis::TokenStream & a0) const
          {
            return ::org::apache::lucene::analysis::TokenStream(env->callObjectMethod(this$, mids$[mid_create_6de1e28d9d10cd9e], a0.this$));
          }

          void HunspellStemFilterFactory::inform(const ::org::apache::lucene::analysis::util::ResourceLoader & a0) const
          {
            env->callVoidMethod(this$, mids$[mid_inform_b4ee53c41a5f629f], a0.this$);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace hunspell {
          static PyObject *t_HunspellStemFilterFactory_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_HunspellStemFilterFactory_instance_(PyTypeObject *type, PyObject *arg);
          static int t_HunspellStemFilterFactory_init_(t_HunspellStemFilterFactory *self, PyObject *args, PyObject *kwds);
          static PyObject *t_HunspellStemFilterFactory_create(t_HunspellStemFilterFactory *self, PyObject *args);
          static PyObject *t_HunspellStemFilterFactory_inform(t_HunspellStemFilterFactory *self, PyObject *arg);

          static PyMethodDef t_HunspellStemFilterFactory__methods_[] = {
            DECLARE_METHOD(t_HunspellStemFilterFactory, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_HunspellStemFilterFactory, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_HunspellStemFilterFactory, create, METH_VARARGS),
            DECLARE_METHOD(t_HunspellStemFilterFactory, inform, METH_O),
            { NULL, NULL, 0, NULL }
          };

          static PyType_Slot PY_TYPE_SLOTS(HunspellStemFilterFactory)[] = {
            { Py_tp_methods, t_HunspellStemFilterFactory__methods_ },
            { Py_tp_init, (void *) t_HunspellStemFilterFactory_init_ },
            { 0, NULL }
          };

          static PyType_Def *PY_TYPE_BASES(HunspellStemFilterFactory)[] = {
            &PY_TYPE_DEF(::org::apache::lucene::analysis::util::TokenFilterFactory),
            NULL
          };

          DEFINE_TYPE(HunspellStemFilterFactory, t_HunspellStemFilterFactory, HunspellStemFilterFactory);

          void t_HunspellStemFilterFactory::install(PyObject *module)
          {
            installType(&PY_TYPE(HunspellStemFilterFactory), &PY_TYPE_DEF(HunspellStemFilterFactory), module, "HunspellStemFilterFactory", 0);
          }

          void t_HunspellStemFilterFactory::initialize(PyObject *module)
          {
            PyObject_SetAttrString((PyObject *) PY_TYPE(HunspellStemFilterFactory), "class_", make_descriptor(HunspellStemFilterFactory::initializeClass, 1));
            PyObject_SetAttrString((PyObject *) PY_TYPE(HunspellStemFilterFactory), "wrapfn_", make_descriptor(t_HunspellStemFilterFactory::wrap_jobject));
            PyObject_SetAttrString((PyObject *) PY_TYPE(HunspellStemFilterFactory), "boxfn_", make_descriptor(boxObject));
            env->getClass(HunspellStemFilterFactory::initializeClass);
            PyObject_SetAttrString((PyObject *) PY_TYPE(HunspellStemFilterFactory), "NAME", make_descriptor(j2p(*HunspellStemFilterFactory::NAME)));
          }

          static PyObject *t_HunspellStemFilterFactory_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, HunspellStemFilterFactory::initializeClass, 1)))
              return NULL;
            return t_HunspellStemFilterFactory::wrap_Object(HunspellStemFilterFactory(((t_HunspellStemFilterFactory *) arg)->object.this$));
          }
          static PyObject *t_HunspellStemFilterFactory_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, HunspellStemFilterFactory::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_HunspellStemFilterFactory_init_(t_HunspellStemFilterFactory *self, PyObject *args, PyObject *kwds)
          {
            ::java::util::Map a0((jobject) NULL);
            PyTypeObject **p0;
            HunspellStemFilterFactory object((jobject) NULL);

            if (!parseArgs(args, "K", ::java::util::Map::initializeClass, &a0, &p0, ::java::util::t_Map::parameters_))
            {
              INT_CALL(object = HunspellStemFilterFactory(a0));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_HunspellStemFilterFactory_create(t_HunspellStemFilterFactory *self, PyObject *args)
          {
            ::org::apache::lucene::analysis::TokenStream a0((jobject) NULL);
            ::org::apache::lucene::analysis::TokenStream result((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::analysis::TokenStream::initializeClass, &a0))
            {
              OBJ_CALL(result = self->object.create(a0));
              return ::org::apache::lucene::analysis::t_TokenStream::wrap_Object(result);
            }

            return callSuper(PY_TYPE(HunspellStemFilterFactory), (PyObject *) self, "create", args, 2);
          }

          static PyObject *t_HunspellStemFilterFactory_inform(t_HunspellStemFilterFactory *self, PyObject *arg)
          {
            ::org::apache::lucene::analysis::util::ResourceLoader a0((jobject) NULL);

            if (!parseArg(arg, "k", ::org::apache::lucene::analysis::util::ResourceLoader::initializeClass, &a0))
            {
              OBJ_CALL(self->object.inform(a0));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError((PyObject *) self, "inform", arg);
            return NULL;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/grouping/GroupingSearch.h"
#include "org/apache/lucene/util/Bits.h"
#include "java/util/Map.h"
#include "java/util/Collection.h"
#include "org/apache/lucene/search/IndexSearcher.h"
#include "org/apache/lucene/search/grouping/GroupSelector.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/search/grouping/TopGroups.h"
#include "org/apache/lucene/search/Sort.h"
#include "java/lang/String.h"
#include "org/apache/lucene/search/Query.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/queries/function/ValueSource.h"
#include "org/apache/lucene/search/grouping/GroupingSearch.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace grouping {

          ::java::lang::Class *GroupingSearch::class$ = NULL;
          jmethodID *GroupingSearch::mids$ = NULL;
          bool GroupingSearch::live$ = false;

          jclass GroupingSearch::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/search/grouping/GroupingSearch");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_9fd2eb66a64e6f0f] = env->getMethodID(cls, "<init>", "(Ljava/lang/String;)V");
              mids$[mid_init$_ede25bb9d48237ac] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/search/Query;)V");
              mids$[mid_init$_acfcf289281f56c3] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/search/grouping/GroupSelector;)V");
              mids$[mid_init$_993be4c0868840e8] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/queries/function/ValueSource;Ljava/util/Map;)V");
              mids$[mid_disableCaching_86b7822021a982ed] = env->getMethodID(cls, "disableCaching", "()Lorg/apache/lucene/search/grouping/GroupingSearch;");
              mids$[mid_getAllGroupHeads_ad87da2b626b21cf] = env->getMethodID(cls, "getAllGroupHeads", "()Lorg/apache/lucene/util/Bits;");
              mids$[mid_getAllMatchingGroups_d4dfbf7a26ff41df] = env->getMethodID(cls, "getAllMatchingGroups", "()Ljava/util/Collection;");
              mids$[mid_search_ab60d5515b02cd88] = env->getMethodID(cls, "search", "(Lorg/apache/lucene/search/IndexSearcher;Lorg/apache/lucene/search/Query;II)Lorg/apache/lucene/search/grouping/TopGroups;");
              mids$[mid_setAllGroupHeads_e961b984ae24228a] = env->getMethodID(cls, "setAllGroupHeads", "(Z)Lorg/apache/lucene/search/grouping/GroupingSearch;");
              mids$[mid_setAllGroups_e961b984ae24228a] = env->getMethodID(cls, "setAllGroups", "(Z)Lorg/apache/lucene/search/grouping/GroupingSearch;");
              mids$[mid_setCaching_252e6ecca11ca205] = env->getMethodID(cls, "setCaching", "(IZ)Lorg/apache/lucene/search/grouping/GroupingSearch;");
              mids$[mid_setCachingInMB_006f3e02a3042494] = env->getMethodID(cls, "setCachingInMB", "(DZ)Lorg/apache/lucene/search/grouping/GroupingSearch;");
              mids$[mid_setGroupDocsLimit_340318fae5a9fea2] = env->getMethodID(cls, "setGroupDocsLimit", "(I)Lorg/apache/lucene/search/grouping/GroupingSearch;");
              mids$[mid_setGroupDocsOffset_340318fae5a9fea2] = env->getMethodID(cls, "setGroupDocsOffset", "(I)Lorg/apache/lucene/search/grouping/GroupingSearch;");
              mids$[mid_setGroupSort_ad399f645c86e223] = env->getMethodID(cls, "setGroupSort", "(Lorg/apache/lucene/search/Sort;)Lorg/apache/lucene/search/grouping/GroupingSearch;");
              mids$[mid_setIncludeMaxScore_e961b984ae24228a] = env->getMethodID(cls, "setIncludeMaxScore", "(Z)Lorg/apache/lucene/search/grouping/GroupingSearch;");
              mids$[mid_setSortWithinGroup_ad399f645c86e223] = env->getMethodID(cls, "setSortWithinGroup", "(Lorg/apache/lucene/search/Sort;)Lorg/apache/lucene/search/grouping/GroupingSearch;");
              mids$[mid_groupByFieldOrFunction_ab60d5515b02cd88] = env->getMethodID(cls, "groupByFieldOrFunction", "(Lorg/apache/lucene/search/IndexSearcher;Lorg/apache/lucene/search/Query;II)Lorg/apache/lucene/search/grouping/TopGroups;");
              mids$[mid_groupByDocBlock_ab60d5515b02cd88] = env->getMethodID(cls, "groupByDocBlock", "(Lorg/apache/lucene/search/IndexSearcher;Lorg/apache/lucene/search/Query;II)Lorg/apache/lucene/search/grouping/TopGroups;");

              class$ = new ::java::lang::Class(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          GroupingSearch::GroupingSearch(const ::java::lang::String & a0) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_9fd2eb66a64e6f0f, a0.this$)) {}

          GroupingSearch::GroupingSearch(const ::org::apache::lucene::search::Query & a0) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_ede25bb9d48237ac, a0.this$)) {}

          GroupingSearch::GroupingSearch(const ::org::apache::lucene::search::grouping::GroupSelector & a0) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_acfcf289281f56c3, a0.this$)) {}

          GroupingSearch::GroupingSearch(const ::org::apache::lucene::queries::function::ValueSource & a0, const ::java::util::Map & a1) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_993be4c0868840e8, a0.this$, a1.this$)) {}

          GroupingSearch GroupingSearch::disableCaching() const
          {
            return GroupingSearch(env->callObjectMethod(this$, mids$[mid_disableCaching_86b7822021a982ed]));
          }

          ::org::apache::lucene::util::Bits GroupingSearch::getAllGroupHeads() const
          {
            return ::org::apache::lucene::util::Bits(env->callObjectMethod(this$, mids$[mid_getAllGroupHeads_ad87da2b626b21cf]));
          }

          ::java::util::Collection GroupingSearch::getAllMatchingGroups() const
          {
            return ::java::util::Collection(env->callObjectMethod(this$, mids$[mid_getAllMatchingGroups_d4dfbf7a26ff41df]));
          }

          ::org::apache::lucene::search::grouping::TopGroups GroupingSearch::search(const ::org::apache::lucene::search::IndexSearcher & a0, const ::org::apache::lucene::search::Query & a1, jint a2, jint a3) const
          {
            return ::org::apache::lucene::search::grouping::TopGroups(env->callObjectMethod(this$, mids$[mid_search_ab60d5515b02cd88], a0.this$, a1.this$, a2, a3));
          }

          GroupingSearch GroupingSearch::setAllGroupHeads(jboolean a0) const
          {
            return GroupingSearch(env->callObjectMethod(this$, mids$[mid_setAllGroupHeads_e961b984ae24228a], a0));
          }

          GroupingSearch GroupingSearch::setAllGroups(jboolean a0) const
          {
            return GroupingSearch(env->callObjectMethod(this$, mids$[mid_setAllGroups_e961b984ae24228a], a0));
          }

          GroupingSearch GroupingSearch::setCaching(jint a0, jboolean a1) const
          {
            return GroupingSearch(env->callObjectMethod(this$, mids$[mid_setCaching_252e6ecca11ca205], a0, a1));
          }

          GroupingSearch GroupingSearch::setCachingInMB(jdouble a0, jboolean a1) const
          {
            return GroupingSearch(env->callObjectMethod(this$, mids$[mid_setCachingInMB_006f3e02a3042494], a0, a1));
          }

          GroupingSearch GroupingSearch::setGroupDocsLimit(jint a0) const
          {
            return GroupingSearch(env->callObjectMethod(this$, mids$[mid_setGroupDocsLimit_340318fae5a9fea2], a0));
          }

          GroupingSearch GroupingSearch::setGroupDocsOffset(jint a0) const
          {
            return GroupingSearch(env->callObjectMethod(this$, mids$[mid_setGroupDocsOffset_340318fae5a9fea2], a0));
          }

          GroupingSearch GroupingSearch::setGroupSort(const ::org::apache::lucene::search::Sort & a0) const
          {
            return GroupingSearch(env->callObjectMethod(this$, mids$[mid_setGroupSort_ad399f645c86e223], a0.this$));
          }

          GroupingSearch GroupingSearch::setIncludeMaxScore(jboolean a0) const
          {
            return GroupingSearch(env->callObjectMethod(this$, mids$[mid_setIncludeMaxScore_e961b984ae24228a], a0));
          }

          GroupingSearch GroupingSearch::setSortWithinGroup(const ::org::apache::lucene::search::Sort & a0) const
          {
            return GroupingSearch(env->callObjectMethod(this$, mids$[mid_setSortWithinGroup_ad399f645c86e223], a0.this$));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace grouping {
          static PyObject *t_GroupingSearch_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_GroupingSearch_instance_(PyTypeObject *type, PyObject *arg);
          static int t_GroupingSearch_init_(t_GroupingSearch *self, PyObject *args, PyObject *kwds);
          static PyObject *t_GroupingSearch_disableCaching(t_GroupingSearch *self);
          static PyObject *t_GroupingSearch_getAllGroupHeads(t_GroupingSearch *self);
          static PyObject *t_GroupingSearch_getAllMatchingGroups(t_GroupingSearch *self);
          static PyObject *t_GroupingSearch_search(t_GroupingSearch *self, PyObject *args);
          static PyObject *t_GroupingSearch_setAllGroupHeads(t_GroupingSearch *self, PyObject *arg);
          static PyObject *t_GroupingSearch_setAllGroups(t_GroupingSearch *self, PyObject *arg);
          static PyObject *t_GroupingSearch_setCaching(t_GroupingSearch *self, PyObject *args);
          static PyObject *t_GroupingSearch_setCachingInMB(t_GroupingSearch *self, PyObject *args);
          static PyObject *t_GroupingSearch_setGroupDocsLimit(t_GroupingSearch *self, PyObject *arg);
          static PyObject *t_GroupingSearch_setGroupDocsOffset(t_GroupingSearch *self, PyObject *arg);
          static PyObject *t_GroupingSearch_setGroupSort(t_GroupingSearch *self, PyObject *arg);
          static PyObject *t_GroupingSearch_setIncludeMaxScore(t_GroupingSearch *self, PyObject *arg);
          static PyObject *t_GroupingSearch_setSortWithinGroup(t_GroupingSearch *self, PyObject *arg);
          static PyObject *t_GroupingSearch_get__allGroupHeads(t_GroupingSearch *self, void *data);
          static int t_GroupingSearch_set__allGroupHeads(t_GroupingSearch *self, PyObject *arg, void *data);
          static int t_GroupingSearch_set__allGroups(t_GroupingSearch *self, PyObject *arg, void *data);
          static PyObject *t_GroupingSearch_get__allMatchingGroups(t_GroupingSearch *self, void *data);
          static int t_GroupingSearch_set__groupDocsLimit(t_GroupingSearch *self, PyObject *arg, void *data);
          static int t_GroupingSearch_set__groupDocsOffset(t_GroupingSearch *self, PyObject *arg, void *data);
          static int t_GroupingSearch_set__groupSort(t_GroupingSearch *self, PyObject *arg, void *data);
          static int t_GroupingSearch_set__includeMaxScore(t_GroupingSearch *self, PyObject *arg, void *data);
          static int t_GroupingSearch_set__sortWithinGroup(t_GroupingSearch *self, PyObject *arg, void *data);
          static PyGetSetDef t_GroupingSearch__fields_[] = {
            DECLARE_GETSET_FIELD(t_GroupingSearch, allGroupHeads),
            DECLARE_SET_FIELD(t_GroupingSearch, allGroups),
            DECLARE_GET_FIELD(t_GroupingSearch, allMatchingGroups),
            DECLARE_SET_FIELD(t_GroupingSearch, groupDocsLimit),
            DECLARE_SET_FIELD(t_GroupingSearch, groupDocsOffset),
            DECLARE_SET_FIELD(t_GroupingSearch, groupSort),
            DECLARE_SET_FIELD(t_GroupingSearch, includeMaxScore),
            DECLARE_SET_FIELD(t_GroupingSearch, sortWithinGroup),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_GroupingSearch__methods_[] = {
            DECLARE_METHOD(t_GroupingSearch, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_GroupingSearch, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_GroupingSearch, disableCaching, METH_NOARGS),
            DECLARE_METHOD(t_GroupingSearch, getAllGroupHeads, METH_NOARGS),
            DECLARE_METHOD(t_GroupingSearch, getAllMatchingGroups, METH_NOARGS),
            DECLARE_METHOD(t_GroupingSearch, search, METH_VARARGS),
            DECLARE_METHOD(t_GroupingSearch, setAllGroupHeads, METH_O),
            DECLARE_METHOD(t_GroupingSearch, setAllGroups, METH_O),
            DECLARE_METHOD(t_GroupingSearch, setCaching, METH_VARARGS),
            DECLARE_METHOD(t_GroupingSearch, setCachingInMB, METH_VARARGS),
            DECLARE_METHOD(t_GroupingSearch, setGroupDocsLimit, METH_O),
            DECLARE_METHOD(t_GroupingSearch, setGroupDocsOffset, METH_O),
            DECLARE_METHOD(t_GroupingSearch, setGroupSort, METH_O),
            DECLARE_METHOD(t_GroupingSearch, setIncludeMaxScore, METH_O),
            DECLARE_METHOD(t_GroupingSearch, setSortWithinGroup, METH_O),
            { NULL, NULL, 0, NULL }
          };

          static PyType_Slot PY_TYPE_SLOTS(GroupingSearch)[] = {
            { Py_tp_methods, t_GroupingSearch__methods_ },
            { Py_tp_init, (void *) t_GroupingSearch_init_ },
            { Py_tp_getset, t_GroupingSearch__fields_ },
            { 0, NULL }
          };

          static PyType_Def *PY_TYPE_BASES(GroupingSearch)[] = {
            &PY_TYPE_DEF(::java::lang::Object),
            NULL
          };

          DEFINE_TYPE(GroupingSearch, t_GroupingSearch, GroupingSearch);

          void t_GroupingSearch::install(PyObject *module)
          {
            installType(&PY_TYPE(GroupingSearch), &PY_TYPE_DEF(GroupingSearch), module, "GroupingSearch", 0);
          }

          void t_GroupingSearch::initialize(PyObject *module)
          {
            PyObject_SetAttrString((PyObject *) PY_TYPE(GroupingSearch), "class_", make_descriptor(GroupingSearch::initializeClass, 1));
            PyObject_SetAttrString((PyObject *) PY_TYPE(GroupingSearch), "wrapfn_", make_descriptor(t_GroupingSearch::wrap_jobject));
            PyObject_SetAttrString((PyObject *) PY_TYPE(GroupingSearch), "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_GroupingSearch_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, GroupingSearch::initializeClass, 1)))
              return NULL;
            return t_GroupingSearch::wrap_Object(GroupingSearch(((t_GroupingSearch *) arg)->object.this$));
          }
          static PyObject *t_GroupingSearch_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, GroupingSearch::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_GroupingSearch_init_(t_GroupingSearch *self, PyObject *args, PyObject *kwds)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 1:
              {
                ::java::lang::String a0((jobject) NULL);
                GroupingSearch object((jobject) NULL);

                if (!parseArgs(args, "s", &a0))
                {
                  INT_CALL(object = GroupingSearch(a0));
                  self->object = object;
                  break;
                }
              }
              {
                ::org::apache::lucene::search::Query a0((jobject) NULL);
                GroupingSearch object((jobject) NULL);

                if (!parseArgs(args, "k", ::org::apache::lucene::search::Query::initializeClass, &a0))
                {
                  INT_CALL(object = GroupingSearch(a0));
                  self->object = object;
                  break;
                }
              }
              {
                ::org::apache::lucene::search::grouping::GroupSelector a0((jobject) NULL);
                PyTypeObject **p0;
                GroupingSearch object((jobject) NULL);

                if (!parseArgs(args, "K", ::org::apache::lucene::search::grouping::GroupSelector::initializeClass, &a0, &p0, ::org::apache::lucene::search::grouping::t_GroupSelector::parameters_))
                {
                  INT_CALL(object = GroupingSearch(a0));
                  self->object = object;
                  break;
                }
              }
              goto err;
             case 2:
              {
                ::org::apache::lucene::queries::function::ValueSource a0((jobject) NULL);
                ::java::util::Map a1((jobject) NULL);
                PyTypeObject **p1;
                GroupingSearch object((jobject) NULL);

                if (!parseArgs(args, "kK", ::org::apache::lucene::queries::function::ValueSource::initializeClass, ::java::util::Map::initializeClass, &a0, &a1, &p1, ::java::util::t_Map::parameters_))
                {
                  INT_CALL(object = GroupingSearch(a0, a1));
                  self->object = object;
                  break;
                }
              }
             default:
             err:
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_GroupingSearch_disableCaching(t_GroupingSearch *self)
          {
            GroupingSearch result((jobject) NULL);
            OBJ_CALL(result = self->object.disableCaching());
            return t_GroupingSearch::wrap_Object(result);
          }

          static PyObject *t_GroupingSearch_getAllGroupHeads(t_GroupingSearch *self)
          {
            ::org::apache::lucene::util::Bits result((jobject) NULL);
            OBJ_CALL(result = self->object.getAllGroupHeads());
            return ::org::apache::lucene::util::t_Bits::wrap_Object(result);
          }

          static PyObject *t_GroupingSearch_getAllMatchingGroups(t_GroupingSearch *self)
          {
            ::java::util::Collection result((jobject) NULL);
            OBJ_CALL(result = self->object.getAllMatchingGroups());
            return ::java::util::t_Collection::wrap_Object(result);
          }

          static PyObject *t_GroupingSearch_search(t_GroupingSearch *self, PyObject *args)
          {
            ::org::apache::lucene::search::IndexSearcher a0((jobject) NULL);
            ::org::apache::lucene::search::Query a1((jobject) NULL);
            jint a2;
            jint a3;
            ::org::apache::lucene::search::grouping::TopGroups result((jobject) NULL);

            if (!parseArgs(args, "kkII", ::org::apache::lucene::search::IndexSearcher::initializeClass, ::org::apache::lucene::search::Query::initializeClass, &a0, &a1, &a2, &a3))
            {
              OBJ_CALL(result = self->object.search(a0, a1, a2, a3));
              return ::org::apache::lucene::search::grouping::t_TopGroups::wrap_Object(result);
            }

            PyErr_SetArgsError((PyObject *) self, "search", args);
            return NULL;
          }

          static PyObject *t_GroupingSearch_setAllGroupHeads(t_GroupingSearch *self, PyObject *arg)
          {
            jboolean a0;
            GroupingSearch result((jobject) NULL);

            if (!parseArg(arg, "Z", &a0))
            {
              OBJ_CALL(result = self->object.setAllGroupHeads(a0));
              return t_GroupingSearch::wrap_Object(result);
            }

            PyErr_SetArgsError((PyObject *) self, "setAllGroupHeads", arg);
            return NULL;
          }

          static PyObject *t_GroupingSearch_setAllGroups(t_GroupingSearch *self, PyObject *arg)
          {
            jboolean a0;
            GroupingSearch result((jobject) NULL);

            if (!parseArg(arg, "Z", &a0))
            {
              OBJ_CALL(result = self->object.setAllGroups(a0));
              return t_GroupingSearch::wrap_Object(result);
            }

            PyErr_SetArgsError((PyObject *) self, "setAllGroups", arg);
            return NULL;
          }

          static PyObject *t_GroupingSearch_setCaching(t_GroupingSearch *self, PyObject *args)
          {
            jint a0;
            jboolean a1;
            GroupingSearch result((jobject) NULL);

            if (!parseArgs(args, "IZ", &a0, &a1))
            {
              OBJ_CALL(result = self->object.setCaching(a0, a1));
              return t_GroupingSearch::wrap_Object(result);
            }

            PyErr_SetArgsError((PyObject *) self, "setCaching", args);
            return NULL;
          }

          static PyObject *t_GroupingSearch_setCachingInMB(t_GroupingSearch *self, PyObject *args)
          {
            jdouble a0;
            jboolean a1;
            GroupingSearch result((jobject) NULL);

            if (!parseArgs(args, "DZ", &a0, &a1))
            {
              OBJ_CALL(result = self->object.setCachingInMB(a0, a1));
              return t_GroupingSearch::wrap_Object(result);
            }

            PyErr_SetArgsError((PyObject *) self, "setCachingInMB", args);
            return NULL;
          }

          static PyObject *t_GroupingSearch_setGroupDocsLimit(t_GroupingSearch *self, PyObject *arg)
          {
            jint a0;
            GroupingSearch result((jobject) NULL);

            if (!parseArg(arg, "I", &a0))
            {
              OBJ_CALL(result = self->object.setGroupDocsLimit(a0));
              return t_GroupingSearch::wrap_Object(result);
            }

            PyErr_SetArgsError((PyObject *) self, "setGroupDocsLimit", arg);
            return NULL;
          }

          static PyObject *t_GroupingSearch_setGroupDocsOffset(t_GroupingSearch *self, PyObject *arg)
          {
            jint a0;
            GroupingSearch result((jobject) NULL);

            if (!parseArg(arg, "I", &a0))
            {
              OBJ_CALL(result = self->object.setGroupDocsOffset(a0));
              return t_GroupingSearch::wrap_Object(result);
            }

            PyErr_SetArgsError((PyObject *) self, "setGroupDocsOffset", arg);
            return NULL;
          }

          static PyObject *t_GroupingSearch_setGroupSort(t_GroupingSearch *self, PyObject *arg)
          {
            ::org::apache::lucene::search::Sort a0((jobject) NULL);
            GroupingSearch result((jobject) NULL);

            if (!parseArg(arg, "k", ::org::apache::lucene::search::Sort::initializeClass, &a0))
            {
              OBJ_CALL(result = self->object.setGroupSort(a0));
              return t_GroupingSearch::wrap_Object(result);
            }

            PyErr_SetArgsError((PyObject *) self, "setGroupSort", arg);
            return NULL;
          }

          static PyObject *t_GroupingSearch_setIncludeMaxScore(t_GroupingSearch *self, PyObject *arg)
          {
            jboolean a0;
            GroupingSearch result((jobject) NULL);

            if (!parseArg(arg, "Z", &a0))
            {
              OBJ_CALL(result = self->object.setIncludeMaxScore(a0));
              return t_GroupingSearch::wrap_Object(result);
            }

            PyErr_SetArgsError((PyObject *) self, "setIncludeMaxScore", arg);
            return NULL;
          }

          static PyObject *t_GroupingSearch_setSortWithinGroup(t_GroupingSearch *self, PyObject *arg)
          {
            ::org::apache::lucene::search::Sort a0((jobject) NULL);
            GroupingSearch result((jobject) NULL);

            if (!parseArg(arg, "k", ::org::apache::lucene::search::Sort::initializeClass, &a0))
            {
              OBJ_CALL(result = self->object.setSortWithinGroup(a0));
              return t_GroupingSearch::wrap_Object(result);
            }

            PyErr_SetArgsError((PyObject *) self, "setSortWithinGroup", arg);
            return NULL;
          }

          static PyObject *t_GroupingSearch_get__allGroupHeads(t_GroupingSearch *self, void *data)
          {
            ::org::apache::lucene::util::Bits value((jobject) NULL);
            OBJ_CALL(value = self->object.getAllGroupHeads());
            return ::org::apache::lucene::util::t_Bits::wrap_Object(value);
          }
          static int t_GroupingSearch_set__allGroupHeads(t_GroupingSearch *self, PyObject *arg, void *data)
          {
            {
              jboolean value;
              if (!parseArg(arg, "Z", &value))
              {
                INT_CALL(self->object.setAllGroupHeads(value));
                return 0;
              }
            }
            PyErr_SetArgsError((PyObject *) self, "allGroupHeads", arg);
            return -1;
          }

          static int t_GroupingSearch_set__allGroups(t_GroupingSearch *self, PyObject *arg, void *data)
          {
            {
              jboolean value;
              if (!parseArg(arg, "Z", &value))
              {
                INT_CALL(self->object.setAllGroups(value));
                return 0;
              }
            }
            PyErr_SetArgsError((PyObject *) self, "allGroups", arg);
            return -1;
          }

          static PyObject *t_GroupingSearch_get__allMatchingGroups(t_GroupingSearch *self, void *data)
          {
            ::java::util::Collection value((jobject) NULL);
            OBJ_CALL(value = self->object.getAllMatchingGroups());
            return ::java::util::t_Collection::wrap_Object(value);
          }

          static int t_GroupingSearch_set__groupDocsLimit(t_GroupingSearch *self, PyObject *arg, void *data)
          {
            {
              jint value;
              if (!parseArg(arg, "I", &value))
              {
                INT_CALL(self->object.setGroupDocsLimit(value));
                return 0;
              }
            }
            PyErr_SetArgsError((PyObject *) self, "groupDocsLimit", arg);
            return -1;
          }

          static int t_GroupingSearch_set__groupDocsOffset(t_GroupingSearch *self, PyObject *arg, void *data)
          {
            {
              jint value;
              if (!parseArg(arg, "I", &value))
              {
                INT_CALL(self->object.setGroupDocsOffset(value));
                return 0;
              }
            }
            PyErr_SetArgsError((PyObject *) self, "groupDocsOffset", arg);
            return -1;
          }

          static int t_GroupingSearch_set__groupSort(t_GroupingSearch *self, PyObject *arg, void *data)
          {
            {
              ::org::apache::lucene::search::Sort value((jobject) NULL);
              if (!parseArg(arg, "k", ::org::apache::lucene::search::Sort::initializeClass, &value))
              {
                INT_CALL(self->object.setGroupSort(value));
                return 0;
              }
            }
            PyErr_SetArgsError((PyObject *) self, "groupSort", arg);
            return -1;
          }

          static int t_GroupingSearch_set__includeMaxScore(t_GroupingSearch *self, PyObject *arg, void *data)
          {
            {
              jboolean value;
              if (!parseArg(arg, "Z", &value))
              {
                INT_CALL(self->object.setIncludeMaxScore(value));
                return 0;
              }
            }
            PyErr_SetArgsError((PyObject *) self, "includeMaxScore", arg);
            return -1;
          }

          static int t_GroupingSearch_set__sortWithinGroup(t_GroupingSearch *self, PyObject *arg, void *data)
          {
            {
              ::org::apache::lucene::search::Sort value((jobject) NULL);
              if (!parseArg(arg, "k", ::org::apache::lucene::search::Sort::initializeClass, &value))
              {
                INT_CALL(self->object.setSortWithinGroup(value));
                return 0;
              }
            }
            PyErr_SetArgsError((PyObject *) self, "sortWithinGroup", arg);
            return -1;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/ca/CatalanAnalyzer.h"
#include "java/lang/String.h"
#include "org/apache/lucene/analysis/CharArraySet.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace ca {

          ::java::lang::Class *CatalanAnalyzer::class$ = NULL;
          jmethodID *CatalanAnalyzer::mids$ = NULL;
          bool CatalanAnalyzer::live$ = false;
          ::java::lang::String *CatalanAnalyzer::DEFAULT_STOPWORD_FILE = NULL;

          jclass CatalanAnalyzer::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/ca/CatalanAnalyzer");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_f2cc1bce94666404] = env->getMethodID(cls, "<init>", "()V");
              mids$[mid_init$_09c0eb6a436581d3] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/analysis/CharArraySet;)V");
              mids$[mid_init$_b66a15b6e54e4218] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/analysis/CharArraySet;Lorg/apache/lucene/analysis/CharArraySet;)V");
              mids$[mid_getDefaultStopSet_7aec8e69a9807ca1] = env->getStaticMethodID(cls, "getDefaultStopSet", "()Lorg/apache/lucene/analysis/CharArraySet;");
              mids$[mid_createComponents_c22fd244b0553c1e] = env->getMethodID(cls, "createComponents", "(Ljava/lang/String;)Lorg/apache/lucene/analysis/Analyzer$TokenStreamComponents;");
              mids$[mid_normalize_e597989422f66fcd] = env->getMethodID(cls, "normalize", "(Ljava/lang/String;Lorg/apache/lucene/analysis/TokenStream;)Lorg/apache/lucene/analysis/TokenStream;");

              class$ = new ::java::lang::Class(cls);
              cls = (jclass) class$->this$;

              DEFAULT_STOPWORD_FILE = new ::java::lang::String(env->getStaticObjectField(cls, "DEFAULT_STOPWORD_FILE", "Ljava/lang/String;"));
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          CatalanAnalyzer::CatalanAnalyzer() : ::org::apache::lucene::analysis::StopwordAnalyzerBase(env->newObject(initializeClass, &mids$, mid_init$_f2cc1bce94666404)) {}

          CatalanAnalyzer::CatalanAnalyzer(const ::org::apache::lucene::analysis::CharArraySet & a0) : ::org::apache::lucene::analysis::StopwordAnalyzerBase(env->newObject(initializeClass, &mids$, mid_init$_09c0eb6a436581d3, a0.this$)) {}

          CatalanAnalyzer::CatalanAnalyzer(const ::org::apache::lucene::analysis::CharArraySet & a0, const ::org::apache::lucene::analysis::CharArraySet & a1) : ::org::apache::lucene::analysis::StopwordAnalyzerBase(env->newObject(initializeClass, &mids$, mid_init$_b66a15b6e54e4218, a0.this$, a1.this$)) {}

          ::org::apache::lucene::analysis::CharArraySet CatalanAnalyzer::getDefaultStopSet()
          {
            jclass cls = env->getClass(initializeClass);
            return ::org::apache::lucene::analysis::CharArraySet(env->callStaticObjectMethod(cls, mids$[mid_getDefaultStopSet_7aec8e69a9807ca1]));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace ca {
          static PyObject *t_CatalanAnalyzer_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_CatalanAnalyzer_instance_(PyTypeObject *type, PyObject *arg);
          static int t_CatalanAnalyzer_init_(t_CatalanAnalyzer *self, PyObject *args, PyObject *kwds);
          static PyObject *t_CatalanAnalyzer_getDefaultStopSet(PyTypeObject *type);
          static PyObject *t_CatalanAnalyzer_get__defaultStopSet(t_CatalanAnalyzer *self, void *data);
          static PyGetSetDef t_CatalanAnalyzer__fields_[] = {
            DECLARE_GET_FIELD(t_CatalanAnalyzer, defaultStopSet),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_CatalanAnalyzer__methods_[] = {
            DECLARE_METHOD(t_CatalanAnalyzer, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_CatalanAnalyzer, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_CatalanAnalyzer, getDefaultStopSet, METH_NOARGS | METH_CLASS),
            { NULL, NULL, 0, NULL }
          };

          static PyType_Slot PY_TYPE_SLOTS(CatalanAnalyzer)[] = {
            { Py_tp_methods, t_CatalanAnalyzer__methods_ },
            { Py_tp_init, (void *) t_CatalanAnalyzer_init_ },
            { Py_tp_getset, t_CatalanAnalyzer__fields_ },
            { 0, NULL }
          };

          static PyType_Def *PY_TYPE_BASES(CatalanAnalyzer)[] = {
            &PY_TYPE_DEF(::org::apache::lucene::analysis::StopwordAnalyzerBase),
            NULL
          };

          DEFINE_TYPE(CatalanAnalyzer, t_CatalanAnalyzer, CatalanAnalyzer);

          void t_CatalanAnalyzer::install(PyObject *module)
          {
            installType(&PY_TYPE(CatalanAnalyzer), &PY_TYPE_DEF(CatalanAnalyzer), module, "CatalanAnalyzer", 0);
          }

          void t_CatalanAnalyzer::initialize(PyObject *module)
          {
            PyObject_SetAttrString((PyObject *) PY_TYPE(CatalanAnalyzer), "class_", make_descriptor(CatalanAnalyzer::initializeClass, 1));
            PyObject_SetAttrString((PyObject *) PY_TYPE(CatalanAnalyzer), "wrapfn_", make_descriptor(t_CatalanAnalyzer::wrap_jobject));
            PyObject_SetAttrString((PyObject *) PY_TYPE(CatalanAnalyzer), "boxfn_", make_descriptor(boxObject));
            env->getClass(CatalanAnalyzer::initializeClass);
            PyObject_SetAttrString((PyObject *) PY_TYPE(CatalanAnalyzer), "DEFAULT_STOPWORD_FILE", make_descriptor(j2p(*CatalanAnalyzer::DEFAULT_STOPWORD_FILE)));
          }

          static PyObject *t_CatalanAnalyzer_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, CatalanAnalyzer::initializeClass, 1)))
              return NULL;
            return t_CatalanAnalyzer::wrap_Object(CatalanAnalyzer(((t_CatalanAnalyzer *) arg)->object.this$));
          }
          static PyObject *t_CatalanAnalyzer_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, CatalanAnalyzer::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_CatalanAnalyzer_init_(t_CatalanAnalyzer *self, PyObject *args, PyObject *kwds)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 0:
              {
                CatalanAnalyzer object((jobject) NULL);

                INT_CALL(object = CatalanAnalyzer());
                self->object = object;
                break;
              }
             case 1:
              {
                ::org::apache::lucene::analysis::CharArraySet a0((jobject) NULL);
                PyTypeObject **p0;
                CatalanAnalyzer object((jobject) NULL);

                if (!parseArgs(args, "K", ::org::apache::lucene::analysis::CharArraySet::initializeClass, &a0, &p0, ::org::apache::lucene::analysis::t_CharArraySet::parameters_))
                {
                  INT_CALL(object = CatalanAnalyzer(a0));
                  self->object = object;
                  break;
                }
              }
              goto err;
             case 2:
              {
                ::org::apache::lucene::analysis::CharArraySet a0((jobject) NULL);
                PyTypeObject **p0;
                ::org::apache::lucene::analysis::CharArraySet a1((jobject) NULL);
                PyTypeObject **p1;
                CatalanAnalyzer object((jobject) NULL);

                if (!parseArgs(args, "KK", ::org::apache::lucene::analysis::CharArraySet::initializeClass, ::org::apache::lucene::analysis::CharArraySet::initializeClass, &a0, &p0, ::org::apache::lucene::analysis::t_CharArraySet::parameters_, &a1, &p1, ::org::apache::lucene::analysis::t_CharArraySet::parameters_))
                {
                  INT_CALL(object = CatalanAnalyzer(a0, a1));
                  self->object = object;
                  break;
                }
              }
             default:
             err:
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_CatalanAnalyzer_getDefaultStopSet(PyTypeObject *type)
          {
            ::org::apache::lucene::analysis::CharArraySet result((jobject) NULL);
            OBJ_CALL(result = ::org::apache::lucene::analysis::ca::CatalanAnalyzer::getDefaultStopSet());
            return ::org::apache::lucene::analysis::t_CharArraySet::wrap_Object(result);
          }

          static PyObject *t_CatalanAnalyzer_get__defaultStopSet(t_CatalanAnalyzer *self, void *data)
          {
            ::org::apache::lucene::analysis::CharArraySet value((jobject) NULL);
            OBJ_CALL(value = self->object.getDefaultStopSet());
            return ::org::apache::lucene::analysis::t_CharArraySet::wrap_Object(value);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queryparser/complexPhrase/ComplexPhraseQueryParser.h"
#include "org/apache/lucene/analysis/Analyzer.h"
#include "org/apache/lucene/queryparser/classic/ParseException.h"
#include "java/lang/Class.h"
#include "java/lang/String.h"
#include "org/apache/lucene/search/Query.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace complexPhrase {

          ::java::lang::Class *ComplexPhraseQueryParser::class$ = NULL;
          jmethodID *ComplexPhraseQueryParser::mids$ = NULL;
          bool ComplexPhraseQueryParser::live$ = false;

          jclass ComplexPhraseQueryParser::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/queryparser/complexPhrase/ComplexPhraseQueryParser");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_32cb72731c50a536] = env->getMethodID(cls, "<init>", "(Ljava/lang/String;Lorg/apache/lucene/analysis/Analyzer;)V");
              mids$[mid_parse_1cf26fcf5e3c5839] = env->getMethodID(cls, "parse", "(Ljava/lang/String;)Lorg/apache/lucene/search/Query;");
              mids$[mid_setInOrder_9d72768e8fdce2b7] = env->getMethodID(cls, "setInOrder", "(Z)V");
              mids$[mid_newRangeQuery_ee01989124e5cf67] = env->getMethodID(cls, "newRangeQuery", "(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;ZZ)Lorg/apache/lucene/search/Query;");
              mids$[mid_getFieldQuery_3a5baa20d223c529] = env->getMethodID(cls, "getFieldQuery", "(Ljava/lang/String;Ljava/lang/String;I)Lorg/apache/lucene/search/Query;");
              mids$[mid_getRangeQuery_ee01989124e5cf67] = env->getMethodID(cls, "getRangeQuery", "(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;ZZ)Lorg/apache/lucene/search/Query;");
              mids$[mid_getWildcardQuery_e08cfaa30c1cfbe9] = env->getMethodID(cls, "getWildcardQuery", "(Ljava/lang/String;Ljava/lang/String;)Lorg/apache/lucene/search/Query;");
              mids$[mid_getFuzzyQuery_391b6230ae9c102d] = env->getMethodID(cls, "getFuzzyQuery", "(Ljava/lang/String;Ljava/lang/String;F)Lorg/apache/lucene/search/Query;");
              mids$[mid_newTermQuery_3904569060347954] = env->getMethodID(cls, "newTermQuery", "(Lorg/apache/lucene/index/Term;F)Lorg/apache/lucene/search/Query;");

              class$ = new ::java::lang::Class(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          ComplexPhraseQueryParser::ComplexPhraseQueryParser(const ::java::lang::String & a0, const ::org::apache::lucene::analysis::Analyzer & a1) : ::org::apache::lucene::queryparser::classic::QueryParser(env->newObject(initializeClass, &mids$, mid_init$_32cb72731c50a536, a0.this$, a1.this$)) {}

          ::org::apache::lucene::search::Query ComplexPhraseQueryParser::parse(const ::java::lang::String & a0) const
          {
            return ::org::apache::lucene::search::Query(env->callObjectMethod(this$, mids$[mid_parse_1cf26fcf5e3c5839], a0.this$));
          }

          void ComplexPhraseQueryParser::setInOrder(jboolean a0) const
          {
            env->callVoidMethod(this$, mids$[mid_setInOrder_9d72768e8fdce2b7], a0);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace complexPhrase {
          static PyObject *t_ComplexPhraseQueryParser_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_ComplexPhraseQueryParser_instance_(PyTypeObject *type, PyObject *arg);
          static int t_ComplexPhraseQueryParser_init_(t_ComplexPhraseQueryParser *self, PyObject *args, PyObject *kwds);
          static PyObject *t_ComplexPhraseQueryParser_parse(t_ComplexPhraseQueryParser *self, PyObject *args);
          static PyObject *t_ComplexPhraseQueryParser_setInOrder(t_ComplexPhraseQueryParser *self, PyObject *arg);
          static int t_ComplexPhraseQueryParser_set__inOrder(t_ComplexPhraseQueryParser *self, PyObject *arg, void *data);
          static PyGetSetDef t_ComplexPhraseQueryParser__fields_[] = {
            DECLARE_SET_FIELD(t_ComplexPhraseQueryParser, inOrder),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_ComplexPhraseQueryParser__methods_[] = {
            DECLARE_METHOD(t_ComplexPhraseQueryParser, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_ComplexPhraseQueryParser, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_ComplexPhraseQueryParser, parse, METH_VARARGS),
            DECLARE_METHOD(t_ComplexPhraseQueryParser, setInOrder, METH_O),
            { NULL, NULL, 0, NULL }
          };

          static PyType_Slot PY_TYPE_SLOTS(ComplexPhraseQueryParser)[] = {
            { Py_tp_methods, t_ComplexPhraseQueryParser__methods_ },
            { Py_tp_init, (void *) t_ComplexPhraseQueryParser_init_ },
            { Py_tp_getset, t_ComplexPhraseQueryParser__fields_ },
            { 0, NULL }
          };

          static PyType_Def *PY_TYPE_BASES(ComplexPhraseQueryParser)[] = {
            &PY_TYPE_DEF(::org::apache::lucene::queryparser::classic::QueryParser),
            NULL
          };

          DEFINE_TYPE(ComplexPhraseQueryParser, t_ComplexPhraseQueryParser, ComplexPhraseQueryParser);

          void t_ComplexPhraseQueryParser::install(PyObject *module)
          {
            installType(&PY_TYPE(ComplexPhraseQueryParser), &PY_TYPE_DEF(ComplexPhraseQueryParser), module, "ComplexPhraseQueryParser", 0);
          }

          void t_ComplexPhraseQueryParser::initialize(PyObject *module)
          {
            PyObject_SetAttrString((PyObject *) PY_TYPE(ComplexPhraseQueryParser), "class_", make_descriptor(ComplexPhraseQueryParser::initializeClass, 1));
            PyObject_SetAttrString((PyObject *) PY_TYPE(ComplexPhraseQueryParser), "wrapfn_", make_descriptor(t_ComplexPhraseQueryParser::wrap_jobject));
            PyObject_SetAttrString((PyObject *) PY_TYPE(ComplexPhraseQueryParser), "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_ComplexPhraseQueryParser_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, ComplexPhraseQueryParser::initializeClass, 1)))
              return NULL;
            return t_ComplexPhraseQueryParser::wrap_Object(ComplexPhraseQueryParser(((t_ComplexPhraseQueryParser *) arg)->object.this$));
          }
          static PyObject *t_ComplexPhraseQueryParser_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, ComplexPhraseQueryParser::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_ComplexPhraseQueryParser_init_(t_ComplexPhraseQueryParser *self, PyObject *args, PyObject *kwds)
          {
            ::java::lang::String a0((jobject) NULL);
            ::org::apache::lucene::analysis::Analyzer a1((jobject) NULL);
            ComplexPhraseQueryParser object((jobject) NULL);

            if (!parseArgs(args, "sk", ::org::apache::lucene::analysis::Analyzer::initializeClass, &a0, &a1))
            {
              INT_CALL(object = ComplexPhraseQueryParser(a0, a1));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_ComplexPhraseQueryParser_parse(t_ComplexPhraseQueryParser *self, PyObject *args)
          {
            ::java::lang::String a0((jobject) NULL);
            ::org::apache::lucene::search::Query result((jobject) NULL);

            if (!parseArgs(args, "s", &a0))
            {
              OBJ_CALL(result = self->object.parse(a0));
              return ::org::apache::lucene::search::t_Query::wrap_Object(result);
            }

            return callSuper(PY_TYPE(ComplexPhraseQueryParser), (PyObject *) self, "parse", args, 2);
          }

          static PyObject *t_ComplexPhraseQueryParser_setInOrder(t_ComplexPhraseQueryParser *self, PyObject *arg)
          {
            jboolean a0;

            if (!parseArg(arg, "Z", &a0))
            {
              OBJ_CALL(self->object.setInOrder(a0));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError((PyObject *) self, "setInOrder", arg);
            return NULL;
          }

          static int t_ComplexPhraseQueryParser_set__inOrder(t_ComplexPhraseQueryParser *self, PyObject *arg, void *data)
          {
            {
              jboolean value;
              if (!parseArg(arg, "Z", &value))
              {
                INT_CALL(self->object.setInOrder(value));
                return 0;
              }
            }
            PyErr_SetArgsError((PyObject *) self, "inOrder", arg);
            return -1;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/ja/dict/BinaryDictionary.h"
#include "org/apache/lucene/util/IntsRef.h"
#include "java/io/InputStream.h"
#include "java/lang/Class.h"
#include "java/lang/String.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/analysis/ja/dict/BinaryDictionary$ResourceScheme.h"
#include "org/apache/lucene/analysis/ja/dict/Dictionary.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace ja {
          namespace dict {

            ::java::lang::Class *BinaryDictionary::class$ = NULL;
            jmethodID *BinaryDictionary::mids$ = NULL;
            bool BinaryDictionary::live$ = false;
            ::java::lang::String *BinaryDictionary::DICT_FILENAME_SUFFIX = NULL;
            ::java::lang::String *BinaryDictionary::DICT_HEADER = NULL;
            jint BinaryDictionary::HAS_BASEFORM = (jint) 0;
            jint BinaryDictionary::HAS_PRONUNCIATION = (jint) 0;
            jint BinaryDictionary::HAS_READING = (jint) 0;
            ::java::lang::String *BinaryDictionary::POSDICT_FILENAME_SUFFIX = NULL;
            ::java::lang::String *BinaryDictionary::POSDICT_HEADER = NULL;
            ::java::lang::String *BinaryDictionary::TARGETMAP_FILENAME_SUFFIX = NULL;
            ::java::lang::String *BinaryDictionary::TARGETMAP_HEADER = NULL;
            jint BinaryDictionary::VERSION = (jint) 0;

            jclass BinaryDictionary::initializeClass(bool getOnly)
            {
              if (getOnly)
                return (jclass) (live$ ? class$->this$ : NULL);
              if (class$ == NULL)
              {
                jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/ja/dict/BinaryDictionary");

                mids$ = new jmethodID[max_mid];
                mids$[mid_getBaseForm_467f88cdc3f1f7b5] = env->getMethodID(cls, "getBaseForm", "(I[CII)Ljava/lang/String;");
                mids$[mid_getClassResource_df2b4677efc14b73] = env->getStaticMethodID(cls, "getClassResource", "(Ljava/lang/Class;Ljava/lang/String;)Ljava/io/InputStream;");
                mids$[mid_getInflectionForm_d7593acad64ef635] = env->getMethodID(cls, "getInflectionForm", "(I)Ljava/lang/String;");
                mids$[mid_getInflectionType_d7593acad64ef635] = env->getMethodID(cls, "getInflectionType", "(I)Ljava/lang/String;");
                mids$[mid_getLeftId_1e143afe1894d213] = env->getMethodID(cls, "getLeftId", "(I)I");
                mids$[mid_getPartOfSpeech_d7593acad64ef635] = env->getMethodID(cls, "getPartOfSpeech", "(I)Ljava/lang/String;");
                mids$[mid_getPronunciation_467f88cdc3f1f7b5] = env->getMethodID(cls, "getPronunciation", "(I[CII)Ljava/lang/String;");
                mids$[mid_getReading_467f88cdc3f1f7b5] = env->getMethodID(cls, "getReading", "(I[CII)Ljava/lang/String;");
                mids$[mid_getResource_914671baef08b4dd] = env->getStaticMethodID(cls, "getResource", "(Lorg/apache/lucene/analysis/ja/dict/BinaryDictionary$ResourceScheme;Ljava/lang/String;)Ljava/io/InputStream;");
                mids$[mid_getRightId_1e143afe1894d213] = env->getMethodID(cls, "getRightId", "(I)I");
                mids$[mid_getWordCost_1e143afe1894d213] = env->getMethodID(cls, "getWordCost", "(I)I");
                mids$[mid_lookupWordIds_c36a226219ff2c18] = env->getMethodID(cls, "lookupWordIds", "(ILorg/apache/lucene/util/IntsRef;)V");
                mids$[mid_getResource_f9a3577e7bead470] = env->getMethodID(cls, "getResource", "(Ljava/lang/String;)Ljava/io/InputStream;");

                class$ = new ::java::lang::Class(cls);
                cls = (jclass) class$->this$;

                DICT_FILENAME_SUFFIX = new ::java::lang::String(env->getStaticObjectField(cls, "DICT_FILENAME_SUFFIX", "Ljava/lang/String;"));
                DICT_HEADER = new ::java::lang::String(env->getStaticObjectField(cls, "DICT_HEADER", "Ljava/lang/String;"));
                HAS_BASEFORM = env->getStaticIntField(cls, "HAS_BASEFORM");
                HAS_PRONUNCIATION = env->getStaticIntField(cls, "HAS_PRONUNCIATION");
                HAS_READING = env->getStaticIntField(cls, "HAS_READING");
                POSDICT_FILENAME_SUFFIX = new ::java::lang::String(env->getStaticObjectField(cls, "POSDICT_FILENAME_SUFFIX", "Ljava/lang/String;"));
                POSDICT_HEADER = new ::java::lang::String(env->getStaticObjectField(cls, "POSDICT_HEADER", "Ljava/lang/String;"));
                TARGETMAP_FILENAME_SUFFIX = new ::java::lang::String(env->getStaticObjectField(cls, "TARGETMAP_FILENAME_SUFFIX", "Ljava/lang/String;"));
                TARGETMAP_HEADER = new ::java::lang::String(env->getStaticObjectField(cls, "TARGETMAP_HEADER", "Ljava/lang/String;"));
                VERSION = env->getStaticIntField(cls, "VERSION");
                live$ = true;
              }
              return (jclass) class$->this$;
            }

            ::java::lang::String BinaryDictionary::getBaseForm(jint a0, const JArray< jchar > & a1, jint a2, jint a3) const
            {
              return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_getBaseForm_467f88cdc3f1f7b5], a0, a1.this$, a2, a3));
            }

            ::java::io::InputStream BinaryDictionary::getClassResource(const ::java::lang::Class & a0, const ::java::lang::String & a1)
            {
              jclass cls = env->getClass(initializeClass);
              return ::java::io::InputStream(env->callStaticObjectMethod(cls, mids$[mid_getClassResource_df2b4677efc14b73], a0.this$, a1.this$));
            }

            ::java::lang::String BinaryDictionary::getInflectionForm(jint a0) const
            {
              return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_getInflectionForm_d7593acad64ef635], a0));
            }

            ::java::lang::String BinaryDictionary::getInflectionType(jint a0) const
            {
              return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_getInflectionType_d7593acad64ef635], a0));
            }

            jint BinaryDictionary::getLeftId(jint a0) const
            {
              return env->callIntMethod(this$, mids$[mid_getLeftId_1e143afe1894d213], a0);
            }

            ::java::lang::String BinaryDictionary::getPartOfSpeech(jint a0) const
            {
              return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_getPartOfSpeech_d7593acad64ef635], a0));
            }

            ::java::lang::String BinaryDictionary::getPronunciation(jint a0, const JArray< jchar > & a1, jint a2, jint a3) const
            {
              return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_getPronunciation_467f88cdc3f1f7b5], a0, a1.this$, a2, a3));
            }

            ::java::lang::String BinaryDictionary::getReading(jint a0, const JArray< jchar > & a1, jint a2, jint a3) const
            {
              return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_getReading_467f88cdc3f1f7b5], a0, a1.this$, a2, a3));
            }

            ::java::io::InputStream BinaryDictionary::getResource(const ::org::apache::lucene::analysis::ja::dict::BinaryDictionary$ResourceScheme & a0, const ::java::lang::String & a1)
            {
              jclass cls = env->getClass(initializeClass);
              return ::java::io::InputStream(env->callStaticObjectMethod(cls, mids$[mid_getResource_914671baef08b4dd], a0.this$, a1.this$));
            }

            jint BinaryDictionary::getRightId(jint a0) const
            {
              return env->callIntMethod(this$, mids$[mid_getRightId_1e143afe1894d213], a0);
            }

            jint BinaryDictionary::getWordCost(jint a0) const
            {
              return env->callIntMethod(this$, mids$[mid_getWordCost_1e143afe1894d213], a0);
            }

            void BinaryDictionary::lookupWordIds(jint a0, const ::org::apache::lucene::util::IntsRef & a1) const
            {
              env->callVoidMethod(this$, mids$[mid_lookupWordIds_c36a226219ff2c18], a0, a1.this$);
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace ja {
          namespace dict {
            static PyObject *t_BinaryDictionary_cast_(PyTypeObject *type, PyObject *arg);
            static PyObject *t_BinaryDictionary_instance_(PyTypeObject *type, PyObject *arg);
            static PyObject *t_BinaryDictionary_getBaseForm(t_BinaryDictionary *self, PyObject *args);
            static PyObject *t_BinaryDictionary_getClassResource(PyTypeObject *type, PyObject *args);
            static PyObject *t_BinaryDictionary_getInflectionForm(t_BinaryDictionary *self, PyObject *arg);
            static PyObject *t_BinaryDictionary_getInflectionType(t_BinaryDictionary *self, PyObject *arg);
            static PyObject *t_BinaryDictionary_getLeftId(t_BinaryDictionary *self, PyObject *arg);
            static PyObject *t_BinaryDictionary_getPartOfSpeech(t_BinaryDictionary *self, PyObject *arg);
            static PyObject *t_BinaryDictionary_getPronunciation(t_BinaryDictionary *self, PyObject *args);
            static PyObject *t_BinaryDictionary_getReading(t_BinaryDictionary *self, PyObject *args);
            static PyObject *t_BinaryDictionary_getResource(PyTypeObject *type, PyObject *args);
            static PyObject *t_BinaryDictionary_getRightId(t_BinaryDictionary *self, PyObject *arg);
            static PyObject *t_BinaryDictionary_getWordCost(t_BinaryDictionary *self, PyObject *arg);
            static PyObject *t_BinaryDictionary_lookupWordIds(t_BinaryDictionary *self, PyObject *args);

            static PyMethodDef t_BinaryDictionary__methods_[] = {
              DECLARE_METHOD(t_BinaryDictionary, cast_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_BinaryDictionary, instance_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_BinaryDictionary, getBaseForm, METH_VARARGS),
              DECLARE_METHOD(t_BinaryDictionary, getClassResource, METH_VARARGS | METH_CLASS),
              DECLARE_METHOD(t_BinaryDictionary, getInflectionForm, METH_O),
              DECLARE_METHOD(t_BinaryDictionary, getInflectionType, METH_O),
              DECLARE_METHOD(t_BinaryDictionary, getLeftId, METH_O),
              DECLARE_METHOD(t_BinaryDictionary, getPartOfSpeech, METH_O),
              DECLARE_METHOD(t_BinaryDictionary, getPronunciation, METH_VARARGS),
              DECLARE_METHOD(t_BinaryDictionary, getReading, METH_VARARGS),
              DECLARE_METHOD(t_BinaryDictionary, getResource, METH_VARARGS | METH_CLASS),
              DECLARE_METHOD(t_BinaryDictionary, getRightId, METH_O),
              DECLARE_METHOD(t_BinaryDictionary, getWordCost, METH_O),
              DECLARE_METHOD(t_BinaryDictionary, lookupWordIds, METH_VARARGS),
              { NULL, NULL, 0, NULL }
            };

            static PyType_Slot PY_TYPE_SLOTS(BinaryDictionary)[] = {
              { Py_tp_methods, t_BinaryDictionary__methods_ },
              { Py_tp_init, (void *) abstract_init },
              { 0, NULL }
            };

            static PyType_Def *PY_TYPE_BASES(BinaryDictionary)[] = {
              &PY_TYPE_DEF(::java::lang::Object),
              NULL
            };

            DEFINE_TYPE(BinaryDictionary, t_BinaryDictionary, BinaryDictionary);

            void t_BinaryDictionary::install(PyObject *module)
            {
              installType(&PY_TYPE(BinaryDictionary), &PY_TYPE_DEF(BinaryDictionary), module, "BinaryDictionary", 0);
              PyObject_SetAttrString((PyObject *) PY_TYPE(BinaryDictionary), "ResourceScheme", make_descriptor(&PY_TYPE_DEF(BinaryDictionary$ResourceScheme)));
            }

            void t_BinaryDictionary::initialize(PyObject *module)
            {
              PyObject_SetAttrString((PyObject *) PY_TYPE(BinaryDictionary), "class_", make_descriptor(BinaryDictionary::initializeClass, 1));
              PyObject_SetAttrString((PyObject *) PY_TYPE(BinaryDictionary), "wrapfn_", make_descriptor(t_BinaryDictionary::wrap_jobject));
              PyObject_SetAttrString((PyObject *) PY_TYPE(BinaryDictionary), "boxfn_", make_descriptor(boxObject));
              env->getClass(BinaryDictionary::initializeClass);
              PyObject_SetAttrString((PyObject *) PY_TYPE(BinaryDictionary), "DICT_FILENAME_SUFFIX", make_descriptor(j2p(*BinaryDictionary::DICT_FILENAME_SUFFIX)));
              PyObject_SetAttrString((PyObject *) PY_TYPE(BinaryDictionary), "DICT_HEADER", make_descriptor(j2p(*BinaryDictionary::DICT_HEADER)));
              PyObject_SetAttrString((PyObject *) PY_TYPE(BinaryDictionary), "HAS_BASEFORM", make_descriptor(BinaryDictionary::HAS_BASEFORM));
              PyObject_SetAttrString((PyObject *) PY_TYPE(BinaryDictionary), "HAS_PRONUNCIATION", make_descriptor(BinaryDictionary::HAS_PRONUNCIATION));
              PyObject_SetAttrString((PyObject *) PY_TYPE(BinaryDictionary), "HAS_READING", make_descriptor(BinaryDictionary::HAS_READING));
              PyObject_SetAttrString((PyObject *) PY_TYPE(BinaryDictionary), "POSDICT_FILENAME_SUFFIX", make_descriptor(j2p(*BinaryDictionary::POSDICT_FILENAME_SUFFIX)));
              PyObject_SetAttrString((PyObject *) PY_TYPE(BinaryDictionary), "POSDICT_HEADER", make_descriptor(j2p(*BinaryDictionary::POSDICT_HEADER)));
              PyObject_SetAttrString((PyObject *) PY_TYPE(BinaryDictionary), "TARGETMAP_FILENAME_SUFFIX", make_descriptor(j2p(*BinaryDictionary::TARGETMAP_FILENAME_SUFFIX)));
              PyObject_SetAttrString((PyObject *) PY_TYPE(BinaryDictionary), "TARGETMAP_HEADER", make_descriptor(j2p(*BinaryDictionary::TARGETMAP_HEADER)));
              PyObject_SetAttrString((PyObject *) PY_TYPE(BinaryDictionary), "VERSION", make_descriptor(BinaryDictionary::VERSION));
            }

            static PyObject *t_BinaryDictionary_cast_(PyTypeObject *type, PyObject *arg)
            {
              if (!(arg = castCheck(arg, BinaryDictionary::initializeClass, 1)))
                return NULL;
              return t_BinaryDictionary::wrap_Object(BinaryDictionary(((t_BinaryDictionary *) arg)->object.this$));
            }
            static PyObject *t_BinaryDictionary_instance_(PyTypeObject *type, PyObject *arg)
            {
              if (!castCheck(arg, BinaryDictionary::initializeClass, 0))
                Py_RETURN_FALSE;
              Py_RETURN_TRUE;
            }

            static PyObject *t_BinaryDictionary_getBaseForm(t_BinaryDictionary *self, PyObject *args)
            {
              jint a0;
              JArray< jchar > a1((jobject) NULL);
              jint a2;
              jint a3;
              ::java::lang::String result((jobject) NULL);

              if (!parseArgs(args, "I[CII", &a0, &a1, &a2, &a3))
              {
                OBJ_CALL(result = self->object.getBaseForm(a0, a1, a2, a3));
                return j2p(result);
              }

              PyErr_SetArgsError((PyObject *) self, "getBaseForm", args);
              return NULL;
            }

            static PyObject *t_BinaryDictionary_getClassResource(PyTypeObject *type, PyObject *args)
            {
              ::java::lang::Class a0((jobject) NULL);
              PyTypeObject **p0;
              ::java::lang::String a1((jobject) NULL);
              ::java::io::InputStream result((jobject) NULL);

              if (!parseArgs(args, "Ks", ::java::lang::Class::initializeClass, &a0, &p0, ::java::lang::t_Class::parameters_, &a1))
              {
                OBJ_CALL(result = ::org::apache::lucene::analysis::ja::dict::BinaryDictionary::getClassResource(a0, a1));
                return ::java::io::t_InputStream::wrap_Object(result);
              }

              PyErr_SetArgsError(type, "getClassResource", args);
              return NULL;
            }

            static PyObject *t_BinaryDictionary_getInflectionForm(t_BinaryDictionary *self, PyObject *arg)
            {
              jint a0;
              ::java::lang::String result((jobject) NULL);

              if (!parseArg(arg, "I", &a0))
              {
                OBJ_CALL(result = self->object.getInflectionForm(a0));
                return j2p(result);
              }

              PyErr_SetArgsError((PyObject *) self, "getInflectionForm", arg);
              return NULL;
            }

            static PyObject *t_BinaryDictionary_getInflectionType(t_BinaryDictionary *self, PyObject *arg)
            {
              jint a0;
              ::java::lang::String result((jobject) NULL);

              if (!parseArg(arg, "I", &a0))
              {
                OBJ_CALL(result = self->object.getInflectionType(a0));
                return j2p(result);
              }

              PyErr_SetArgsError((PyObject *) self, "getInflectionType", arg);
              return NULL;
            }

            static PyObject *t_BinaryDictionary_getLeftId(t_BinaryDictionary *self, PyObject *arg)
            {
              jint a0;
              jint result;

              if (!parseArg(arg, "I", &a0))
              {
                OBJ_CALL(result = self->object.getLeftId(a0));
                return PyLong_FromLong((long) result);
              }

              PyErr_SetArgsError((PyObject *) self, "getLeftId", arg);
              return NULL;
            }

            static PyObject *t_BinaryDictionary_getPartOfSpeech(t_BinaryDictionary *self, PyObject *arg)
            {
              jint a0;
              ::java::lang::String result((jobject) NULL);

              if (!parseArg(arg, "I", &a0))
              {
                OBJ_CALL(result = self->object.getPartOfSpeech(a0));
                return j2p(result);
              }

              PyErr_SetArgsError((PyObject *) self, "getPartOfSpeech", arg);
              return NULL;
            }

            static PyObject *t_BinaryDictionary_getPronunciation(t_BinaryDictionary *self, PyObject *args)
            {
              jint a0;
              JArray< jchar > a1((jobject) NULL);
              jint a2;
              jint a3;
              ::java::lang::String result((jobject) NULL);

              if (!parseArgs(args, "I[CII", &a0, &a1, &a2, &a3))
              {
                OBJ_CALL(result = self->object.getPronunciation(a0, a1, a2, a3));
                return j2p(result);
              }

              PyErr_SetArgsError((PyObject *) self, "getPronunciation", args);
              return NULL;
            }

            static PyObject *t_BinaryDictionary_getReading(t_BinaryDictionary *self, PyObject *args)
            {
              jint a0;
              JArray< jchar > a1((jobject) NULL);
              jint a2;
              jint a3;
              ::java::lang::String result((jobject) NULL);

              if (!parseArgs(args, "I[CII", &a0, &a1, &a2, &a3))
              {
                OBJ_CALL(result = self->object.getReading(a0, a1, a2, a3));
                return j2p(result);
              }

              PyErr_SetArgsError((PyObject *) self, "getReading", args);
              return NULL;
            }

            static PyObject *t_BinaryDictionary_getResource(PyTypeObject *type, PyObject *args)
            {
              ::org::apache::lucene::analysis::ja::dict::BinaryDictionary$ResourceScheme a0((jobject) NULL);
              PyTypeObject **p0;
              ::java::lang::String a1((jobject) NULL);
              ::java::io::InputStream result((jobject) NULL);

              if (!parseArgs(args, "Ks", ::org::apache::lucene::analysis::ja::dict::BinaryDictionary$ResourceScheme::initializeClass, &a0, &p0, ::org::apache::lucene::analysis::ja::dict::t_BinaryDictionary$ResourceScheme::parameters_, &a1))
              {
                OBJ_CALL(result = ::org::apache::lucene::analysis::ja::dict::BinaryDictionary::getResource(a0, a1));
                return ::java::io::t_InputStream::wrap_Object(result);
              }

              PyErr_SetArgsError(type, "getResource", args);
              return NULL;
            }

            static PyObject *t_BinaryDictionary_getRightId(t_BinaryDictionary *self, PyObject *arg)
            {
              jint a0;
              jint result;

              if (!parseArg(arg, "I", &a0))
              {
                OBJ_CALL(result = self->object.getRightId(a0));
                return PyLong_FromLong((long) result);
              }

              PyErr_SetArgsError((PyObject *) self, "getRightId", arg);
              return NULL;
            }

            static PyObject *t_BinaryDictionary_getWordCost(t_BinaryDictionary *self, PyObject *arg)
            {
              jint a0;
              jint result;

              if (!parseArg(arg, "I", &a0))
              {
                OBJ_CALL(result = self->object.getWordCost(a0));
                return PyLong_FromLong((long) result);
              }

              PyErr_SetArgsError((PyObject *) self, "getWordCost", arg);
              return NULL;
            }

            static PyObject *t_BinaryDictionary_lookupWordIds(t_BinaryDictionary *self, PyObject *args)
            {
              jint a0;
              ::org::apache::lucene::util::IntsRef a1((jobject) NULL);

              if (!parseArgs(args, "Ik", ::org::apache::lucene::util::IntsRef::initializeClass, &a0, &a1))
              {
                OBJ_CALL(self->object.lookupWordIds(a0, a1));
                Py_RETURN_NONE;
              }

              PyErr_SetArgsError((PyObject *) self, "lookupWordIds", args);
              return NULL;
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/util/automaton/RegExp$Kind.h"
#include "org/apache/lucene/util/automaton/RegExp$Kind.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        namespace automaton {

          ::java::lang::Class *RegExp$Kind::class$ = NULL;
          jmethodID *RegExp$Kind::mids$ = NULL;
          bool RegExp$Kind::live$ = false;
          RegExp$Kind *RegExp$Kind::REGEXP_ANYCHAR = NULL;
          RegExp$Kind *RegExp$Kind::REGEXP_ANYSTRING = NULL;
          RegExp$Kind *RegExp$Kind::REGEXP_AUTOMATON = NULL;
          RegExp$Kind *RegExp$Kind::REGEXP_CHAR = NULL;
          RegExp$Kind *RegExp$Kind::REGEXP_CHAR_RANGE = NULL;
          RegExp$Kind *RegExp$Kind::REGEXP_COMPLEMENT = NULL;
          RegExp$Kind *RegExp$Kind::REGEXP_CONCATENATION = NULL;
          RegExp$Kind *RegExp$Kind::REGEXP_EMPTY = NULL;
          RegExp$Kind *RegExp$Kind::REGEXP_INTERSECTION = NULL;
          RegExp$Kind *RegExp$Kind::REGEXP_INTERVAL = NULL;
          RegExp$Kind *RegExp$Kind::REGEXP_OPTIONAL = NULL;
          RegExp$Kind *RegExp$Kind::REGEXP_REPEAT = NULL;
          RegExp$Kind *RegExp$Kind::REGEXP_REPEAT_MIN = NULL;
          RegExp$Kind *RegExp$Kind::REGEXP_REPEAT_MINMAX = NULL;
          RegExp$Kind *RegExp$Kind::REGEXP_STRING = NULL;
          RegExp$Kind *RegExp$Kind::REGEXP_UNION = NULL;

          jclass RegExp$Kind::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/util/automaton/RegExp$Kind");

              mids$ = new jmethodID[max_mid];
              mids$[mid_valueOf_f21c5a2ceb760936] = env->getStaticMethodID(cls, "valueOf", "(Ljava/lang/String;)Lorg/apache/lucene/util/automaton/RegExp$Kind;");
              mids$[mid_values_7633b12b11232176] = env->getStaticMethodID(cls, "values", "()[Lorg/apache/lucene/util/automaton/RegExp$Kind;");

              class$ = new ::java::lang::Class(cls);
              cls = (jclass) class$->this$;

              REGEXP_ANYCHAR = new RegExp$Kind(env->getStaticObjectField(cls, "REGEXP_ANYCHAR", "Lorg/apache/lucene/util/automaton/RegExp$Kind;"));
              REGEXP_ANYSTRING = new RegExp$Kind(env->getStaticObjectField(cls, "REGEXP_ANYSTRING", "Lorg/apache/lucene/util/automaton/RegExp$Kind;"));
              REGEXP_AUTOMATON = new RegExp$Kind(env->getStaticObjectField(cls, "REGEXP_AUTOMATON", "Lorg/apache/lucene/util/automaton/RegExp$Kind;"));
              REGEXP_CHAR = new RegExp$Kind(env->getStaticObjectField(cls, "REGEXP_CHAR", "Lorg/apache/lucene/util/automaton/RegExp$Kind;"));
              REGEXP_CHAR_RANGE = new RegExp$Kind(env->getStaticObjectField(cls, "REGEXP_CHAR_RANGE", "Lorg/apache/lucene/util/automaton/RegExp$Kind;"));
              REGEXP_COMPLEMENT = new RegExp$Kind(env->getStaticObjectField(cls, "REGEXP_COMPLEMENT", "Lorg/apache/lucene/util/automaton/RegExp$Kind;"));
              REGEXP_CONCATENATION = new RegExp$Kind(env->getStaticObjectField(cls, "REGEXP_CONCATENATION", "Lorg/apache/lucene/util/automaton/RegExp$Kind;"));
              REGEXP_EMPTY = new RegExp$Kind(env->getStaticObjectField(cls, "REGEXP_EMPTY", "Lorg/apache/lucene/util/automaton/RegExp$Kind;"));
              REGEXP_INTERSECTION = new RegExp$Kind(env->getStaticObjectField(cls, "REGEXP_INTERSECTION", "Lorg/apache/lucene/util/automaton/RegExp$Kind;"));
              REGEXP_INTERVAL = new RegExp$Kind(env->getStaticObjectField(cls, "REGEXP_INTERVAL", "Lorg/apache/lucene/util/automaton/RegExp$Kind;"));
              REGEXP_OPTIONAL = new RegExp$Kind(env->getStaticObjectField(cls, "REGEXP_OPTIONAL", "Lorg/apache/lucene/util/automaton/RegExp$Kind;"));
              REGEXP_REPEAT = new RegExp$Kind(env->getStaticObjectField(cls, "REGEXP_REPEAT", "Lorg/apache/lucene/util/automaton/RegExp$Kind;"));
              REGEXP_REPEAT_MIN = new RegExp$Kind(env->getStaticObjectField(cls, "REGEXP_REPEAT_MIN", "Lorg/apache/lucene/util/automaton/RegExp$Kind;"));
              REGEXP_REPEAT_MINMAX = new RegExp$Kind(env->getStaticObjectField(cls, "REGEXP_REPEAT_MINMAX", "Lorg/apache/lucene/util/automaton/RegExp$Kind;"));
              REGEXP_STRING = new RegExp$Kind(env->getStaticObjectField(cls, "REGEXP_STRING", "Lorg/apache/lucene/util/automaton/RegExp$Kind;"));
              REGEXP_UNION = new RegExp$Kind(env->getStaticObjectField(cls, "REGEXP_UNION", "Lorg/apache/lucene/util/automaton/RegExp$Kind;"));
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          RegExp$Kind RegExp$Kind::valueOf(const ::java::lang::String & a0)
          {
            jclass cls = env->getClass(initializeClass);
            return RegExp$Kind(env->callStaticObjectMethod(cls, mids$[mid_valueOf_f21c5a2ceb760936], a0.this$));
          }

          JArray< RegExp$Kind > RegExp$Kind::values()
          {
            jclass cls = env->getClass(initializeClass);
            return JArray< RegExp$Kind >(env->callStaticObjectMethod(cls, mids$[mid_values_7633b12b11232176]));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        namespace automaton {
          static PyObject *t_RegExp$Kind_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_RegExp$Kind_instance_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_RegExp$Kind_of_(t_RegExp$Kind *self, PyObject *args);
          static PyObject *t_RegExp$Kind_valueOf(PyTypeObject *type, PyObject *args);
          static PyObject *t_RegExp$Kind_values(PyTypeObject *type);
          static PyObject *t_RegExp$Kind_get__parameters_(t_RegExp$Kind *self, void *data);
          static PyGetSetDef t_RegExp$Kind__fields_[] = {
            DECLARE_GET_FIELD(t_RegExp$Kind, parameters_),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_RegExp$Kind__methods_[] = {
            DECLARE_METHOD(t_RegExp$Kind, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_RegExp$Kind, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_RegExp$Kind, of_, METH_VARARGS),
            DECLARE_METHOD(t_RegExp$Kind, valueOf, METH_VARARGS | METH_CLASS),
            DECLARE_METHOD(t_RegExp$Kind, values, METH_NOARGS | METH_CLASS),
            { NULL, NULL, 0, NULL }
          };

          static PyType_Slot PY_TYPE_SLOTS(RegExp$Kind)[] = {
            { Py_tp_methods, t_RegExp$Kind__methods_ },
            { Py_tp_init, (void *) abstract_init },
            { Py_tp_getset, t_RegExp$Kind__fields_ },
            { 0, NULL }
          };

          static PyType_Def *PY_TYPE_BASES(RegExp$Kind)[] = {
            &PY_TYPE_DEF(::java::lang::Enum),
            NULL
          };

          DEFINE_TYPE(RegExp$Kind, t_RegExp$Kind, RegExp$Kind);
          PyObject *t_RegExp$Kind::wrap_Object(const RegExp$Kind& object, PyTypeObject *p0)
          {
            PyObject *obj = t_RegExp$Kind::wrap_Object(object);
            if (obj != NULL && obj != Py_None)
            {
              t_RegExp$Kind *self = (t_RegExp$Kind *) obj;
              self->parameters[0] = p0;
            }
            return obj;
          }

          PyObject *t_RegExp$Kind::wrap_jobject(const jobject& object, PyTypeObject *p0)
          {
            PyObject *obj = t_RegExp$Kind::wrap_jobject(object);
            if (obj != NULL && obj != Py_None)
            {
              t_RegExp$Kind *self = (t_RegExp$Kind *) obj;
              self->parameters[0] = p0;
            }
            return obj;
          }

          void t_RegExp$Kind::install(PyObject *module)
          {
            installType(&PY_TYPE(RegExp$Kind), &PY_TYPE_DEF(RegExp$Kind), module, "RegExp$Kind", 0);
          }

          void t_RegExp$Kind::initialize(PyObject *module)
          {
            PyObject_SetAttrString((PyObject *) PY_TYPE(RegExp$Kind), "class_", make_descriptor(RegExp$Kind::initializeClass, 1));
            PyObject_SetAttrString((PyObject *) PY_TYPE(RegExp$Kind), "wrapfn_", make_descriptor(t_RegExp$Kind::wrap_jobject));
            PyObject_SetAttrString((PyObject *) PY_TYPE(RegExp$Kind), "boxfn_", make_descriptor(boxObject));
            env->getClass(RegExp$Kind::initializeClass);
            PyObject_SetAttrString((PyObject *) PY_TYPE(RegExp$Kind), "REGEXP_ANYCHAR", make_descriptor(t_RegExp$Kind::wrap_Object(*RegExp$Kind::REGEXP_ANYCHAR)));
            PyObject_SetAttrString((PyObject *) PY_TYPE(RegExp$Kind), "REGEXP_ANYSTRING", make_descriptor(t_RegExp$Kind::wrap_Object(*RegExp$Kind::REGEXP_ANYSTRING)));
            PyObject_SetAttrString((PyObject *) PY_TYPE(RegExp$Kind), "REGEXP_AUTOMATON", make_descriptor(t_RegExp$Kind::wrap_Object(*RegExp$Kind::REGEXP_AUTOMATON)));
            PyObject_SetAttrString((PyObject *) PY_TYPE(RegExp$Kind), "REGEXP_CHAR", make_descriptor(t_RegExp$Kind::wrap_Object(*RegExp$Kind::REGEXP_CHAR)));
            PyObject_SetAttrString((PyObject *) PY_TYPE(RegExp$Kind), "REGEXP_CHAR_RANGE", make_descriptor(t_RegExp$Kind::wrap_Object(*RegExp$Kind::REGEXP_CHAR_RANGE)));
            PyObject_SetAttrString((PyObject *) PY_TYPE(RegExp$Kind), "REGEXP_COMPLEMENT", make_descriptor(t_RegExp$Kind::wrap_Object(*RegExp$Kind::REGEXP_COMPLEMENT)));
            PyObject_SetAttrString((PyObject *) PY_TYPE(RegExp$Kind), "REGEXP_CONCATENATION", make_descriptor(t_RegExp$Kind::wrap_Object(*RegExp$Kind::REGEXP_CONCATENATION)));
            PyObject_SetAttrString((PyObject *) PY_TYPE(RegExp$Kind), "REGEXP_EMPTY", make_descriptor(t_RegExp$Kind::wrap_Object(*RegExp$Kind::REGEXP_EMPTY)));
            PyObject_SetAttrString((PyObject *) PY_TYPE(RegExp$Kind), "REGEXP_INTERSECTION", make_descriptor(t_RegExp$Kind::wrap_Object(*RegExp$Kind::REGEXP_INTERSECTION)));
            PyObject_SetAttrString((PyObject *) PY_TYPE(RegExp$Kind), "REGEXP_INTERVAL", make_descriptor(t_RegExp$Kind::wrap_Object(*RegExp$Kind::REGEXP_INTERVAL)));
            PyObject_SetAttrString((PyObject *) PY_TYPE(RegExp$Kind), "REGEXP_OPTIONAL", make_descriptor(t_RegExp$Kind::wrap_Object(*RegExp$Kind::REGEXP_OPTIONAL)));
            PyObject_SetAttrString((PyObject *) PY_TYPE(RegExp$Kind), "REGEXP_REPEAT", make_descriptor(t_RegExp$Kind::wrap_Object(*RegExp$Kind::REGEXP_REPEAT)));
            PyObject_SetAttrString((PyObject *) PY_TYPE(RegExp$Kind), "REGEXP_REPEAT_MIN", make_descriptor(t_RegExp$Kind::wrap_Object(*RegExp$Kind::REGEXP_REPEAT_MIN)));
            PyObject_SetAttrString((PyObject *) PY_TYPE(RegExp$Kind), "REGEXP_REPEAT_MINMAX", make_descriptor(t_RegExp$Kind::wrap_Object(*RegExp$Kind::REGEXP_REPEAT_MINMAX)));
            PyObject_SetAttrString((PyObject *) PY_TYPE(RegExp$Kind), "REGEXP_STRING", make_descriptor(t_RegExp$Kind::wrap_Object(*RegExp$Kind::REGEXP_STRING)));
            PyObject_SetAttrString((PyObject *) PY_TYPE(RegExp$Kind), "REGEXP_UNION", make_descriptor(t_RegExp$Kind::wrap_Object(*RegExp$Kind::REGEXP_UNION)));
          }

          static PyObject *t_RegExp$Kind_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, RegExp$Kind::initializeClass, 1)))
              return NULL;
            return t_RegExp$Kind::wrap_Object(RegExp$Kind(((t_RegExp$Kind *) arg)->object.this$));
          }
          static PyObject *t_RegExp$Kind_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, RegExp$Kind::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static PyObject *t_RegExp$Kind_of_(t_RegExp$Kind *self, PyObject *args)
          {
            if (!parseArg(args, "T", 1, &(self->parameters)))
              Py_RETURN_SELF;
            return PyErr_SetArgsError((PyObject *) self, "of_", args);
          }

          static PyObject *t_RegExp$Kind_valueOf(PyTypeObject *type, PyObject *args)
          {
            ::java::lang::String a0((jobject) NULL);
            RegExp$Kind result((jobject) NULL);

            if (!parseArgs(args, "s", &a0))
            {
              OBJ_CALL(result = ::org::apache::lucene::util::automaton::RegExp$Kind::valueOf(a0));
              return t_RegExp$Kind::wrap_Object(result);
            }

            return callSuper(type, "valueOf", args, 2);
          }

          static PyObject *t_RegExp$Kind_values(PyTypeObject *type)
          {
            JArray< RegExp$Kind > result((jobject) NULL);
            OBJ_CALL(result = ::org::apache::lucene::util::automaton::RegExp$Kind::values());
            return JArray<jobject>(result.this$).wrap(t_RegExp$Kind::wrap_jobject);
          }
          static PyObject *t_RegExp$Kind_get__parameters_(t_RegExp$Kind *self, void *data)
          {
            return typeParameters(self->parameters, sizeof(self->parameters));
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/ja/util/DictionaryBuilder$DictionaryFormat.h"
#include "org/apache/lucene/analysis/ja/util/DictionaryBuilder$DictionaryFormat.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace ja {
          namespace util {

            ::java::lang::Class *DictionaryBuilder$DictionaryFormat::class$ = NULL;
            jmethodID *DictionaryBuilder$DictionaryFormat::mids$ = NULL;
            bool DictionaryBuilder$DictionaryFormat::live$ = false;
            DictionaryBuilder$DictionaryFormat *DictionaryBuilder$DictionaryFormat::IPADIC = NULL;
            DictionaryBuilder$DictionaryFormat *DictionaryBuilder$DictionaryFormat::UNIDIC = NULL;

            jclass DictionaryBuilder$DictionaryFormat::initializeClass(bool getOnly)
            {
              if (getOnly)
                return (jclass) (live$ ? class$->this$ : NULL);
              if (class$ == NULL)
              {
                jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/ja/util/DictionaryBuilder$DictionaryFormat");

                mids$ = new jmethodID[max_mid];
                mids$[mid_valueOf_d2bf296be5460391] = env->getStaticMethodID(cls, "valueOf", "(Ljava/lang/String;)Lorg/apache/lucene/analysis/ja/util/DictionaryBuilder$DictionaryFormat;");
                mids$[mid_values_f203fe476c1e25bc] = env->getStaticMethodID(cls, "values", "()[Lorg/apache/lucene/analysis/ja/util/DictionaryBuilder$DictionaryFormat;");

                class$ = new ::java::lang::Class(cls);
                cls = (jclass) class$->this$;

                IPADIC = new DictionaryBuilder$DictionaryFormat(env->getStaticObjectField(cls, "IPADIC", "Lorg/apache/lucene/analysis/ja/util/DictionaryBuilder$DictionaryFormat;"));
                UNIDIC = new DictionaryBuilder$DictionaryFormat(env->getStaticObjectField(cls, "UNIDIC", "Lorg/apache/lucene/analysis/ja/util/DictionaryBuilder$DictionaryFormat;"));
                live$ = true;
              }
              return (jclass) class$->this$;
            }

            DictionaryBuilder$DictionaryFormat DictionaryBuilder$DictionaryFormat::valueOf(const ::java::lang::String & a0)
            {
              jclass cls = env->getClass(initializeClass);
              return DictionaryBuilder$DictionaryFormat(env->callStaticObjectMethod(cls, mids$[mid_valueOf_d2bf296be5460391], a0.this$));
            }

            JArray< DictionaryBuilder$DictionaryFormat > DictionaryBuilder$DictionaryFormat::values()
            {
              jclass cls = env->getClass(initializeClass);
              return JArray< DictionaryBuilder$DictionaryFormat >(env->callStaticObjectMethod(cls, mids$[mid_values_f203fe476c1e25bc]));
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace ja {
          namespace util {
            static PyObject *t_DictionaryBuilder$DictionaryFormat_cast_(PyTypeObject *type, PyObject *arg);
            static PyObject *t_DictionaryBuilder$DictionaryFormat_instance_(PyTypeObject *type, PyObject *arg);
            static PyObject *t_DictionaryBuilder$DictionaryFormat_of_(t_DictionaryBuilder$DictionaryFormat *self, PyObject *args);
            static PyObject *t_DictionaryBuilder$DictionaryFormat_valueOf(PyTypeObject *type, PyObject *args);
            static PyObject *t_DictionaryBuilder$DictionaryFormat_values(PyTypeObject *type);
            static PyObject *t_DictionaryBuilder$DictionaryFormat_get__parameters_(t_DictionaryBuilder$DictionaryFormat *self, void *data);
            static PyGetSetDef t_DictionaryBuilder$DictionaryFormat__fields_[] = {
              DECLARE_GET_FIELD(t_DictionaryBuilder$DictionaryFormat, parameters_),
              { NULL, NULL, NULL, NULL, NULL }
            };

            static PyMethodDef t_DictionaryBuilder$DictionaryFormat__methods_[] = {
              DECLARE_METHOD(t_DictionaryBuilder$DictionaryFormat, cast_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_DictionaryBuilder$DictionaryFormat, instance_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_DictionaryBuilder$DictionaryFormat, of_, METH_VARARGS),
              DECLARE_METHOD(t_DictionaryBuilder$DictionaryFormat, valueOf, METH_VARARGS | METH_CLASS),
              DECLARE_METHOD(t_DictionaryBuilder$DictionaryFormat, values, METH_NOARGS | METH_CLASS),
              { NULL, NULL, 0, NULL }
            };

            static PyType_Slot PY_TYPE_SLOTS(DictionaryBuilder$DictionaryFormat)[] = {
              { Py_tp_methods, t_DictionaryBuilder$DictionaryFormat__methods_ },
              { Py_tp_init, (void *) abstract_init },
              { Py_tp_getset, t_DictionaryBuilder$DictionaryFormat__fields_ },
              { 0, NULL }
            };

            static PyType_Def *PY_TYPE_BASES(DictionaryBuilder$DictionaryFormat)[] = {
              &PY_TYPE_DEF(::java::lang::Enum),
              NULL
            };

            DEFINE_TYPE(DictionaryBuilder$DictionaryFormat, t_DictionaryBuilder$DictionaryFormat, DictionaryBuilder$DictionaryFormat);
            PyObject *t_DictionaryBuilder$DictionaryFormat::wrap_Object(const DictionaryBuilder$DictionaryFormat& object, PyTypeObject *p0)
            {
              PyObject *obj = t_DictionaryBuilder$DictionaryFormat::wrap_Object(object);
              if (obj != NULL && obj != Py_None)
              {
                t_DictionaryBuilder$DictionaryFormat *self = (t_DictionaryBuilder$DictionaryFormat *) obj;
                self->parameters[0] = p0;
              }
              return obj;
            }

            PyObject *t_DictionaryBuilder$DictionaryFormat::wrap_jobject(const jobject& object, PyTypeObject *p0)
            {
              PyObject *obj = t_DictionaryBuilder$DictionaryFormat::wrap_jobject(object);
              if (obj != NULL && obj != Py_None)
              {
                t_DictionaryBuilder$DictionaryFormat *self = (t_DictionaryBuilder$DictionaryFormat *) obj;
                self->parameters[0] = p0;
              }
              return obj;
            }

            void t_DictionaryBuilder$DictionaryFormat::install(PyObject *module)
            {
              installType(&PY_TYPE(DictionaryBuilder$DictionaryFormat), &PY_TYPE_DEF(DictionaryBuilder$DictionaryFormat), module, "DictionaryBuilder$DictionaryFormat", 0);
            }

            void t_DictionaryBuilder$DictionaryFormat::initialize(PyObject *module)
            {
              PyObject_SetAttrString((PyObject *) PY_TYPE(DictionaryBuilder$DictionaryFormat), "class_", make_descriptor(DictionaryBuilder$DictionaryFormat::initializeClass, 1));
              PyObject_SetAttrString((PyObject *) PY_TYPE(DictionaryBuilder$DictionaryFormat), "wrapfn_", make_descriptor(t_DictionaryBuilder$DictionaryFormat::wrap_jobject));
              PyObject_SetAttrString((PyObject *) PY_TYPE(DictionaryBuilder$DictionaryFormat), "boxfn_", make_descriptor(boxObject));
              env->getClass(DictionaryBuilder$DictionaryFormat::initializeClass);
              PyObject_SetAttrString((PyObject *) PY_TYPE(DictionaryBuilder$DictionaryFormat), "IPADIC", make_descriptor(t_DictionaryBuilder$DictionaryFormat::wrap_Object(*DictionaryBuilder$DictionaryFormat::IPADIC)));
              PyObject_SetAttrString((PyObject *) PY_TYPE(DictionaryBuilder$DictionaryFormat), "UNIDIC", make_descriptor(t_DictionaryBuilder$DictionaryFormat::wrap_Object(*DictionaryBuilder$DictionaryFormat::UNIDIC)));
            }

            static PyObject *t_DictionaryBuilder$DictionaryFormat_cast_(PyTypeObject *type, PyObject *arg)
            {
              if (!(arg = castCheck(arg, DictionaryBuilder$DictionaryFormat::initializeClass, 1)))
                return NULL;
              return t_DictionaryBuilder$DictionaryFormat::wrap_Object(DictionaryBuilder$DictionaryFormat(((t_DictionaryBuilder$DictionaryFormat *) arg)->object.this$));
            }
            static PyObject *t_DictionaryBuilder$DictionaryFormat_instance_(PyTypeObject *type, PyObject *arg)
            {
              if (!castCheck(arg, DictionaryBuilder$DictionaryFormat::initializeClass, 0))
                Py_RETURN_FALSE;
              Py_RETURN_TRUE;
            }

            static PyObject *t_DictionaryBuilder$DictionaryFormat_of_(t_DictionaryBuilder$DictionaryFormat *self, PyObject *args)
            {
              if (!parseArg(args, "T", 1, &(self->parameters)))
                Py_RETURN_SELF;
              return PyErr_SetArgsError((PyObject *) self, "of_", args);
            }

            static PyObject *t_DictionaryBuilder$DictionaryFormat_valueOf(PyTypeObject *type, PyObject *args)
            {
              ::java::lang::String a0((jobject) NULL);
              DictionaryBuilder$DictionaryFormat result((jobject) NULL);

              if (!parseArgs(args, "s", &a0))
              {
                OBJ_CALL(result = ::org::apache::lucene::analysis::ja::util::DictionaryBuilder$DictionaryFormat::valueOf(a0));
                return t_DictionaryBuilder$DictionaryFormat::wrap_Object(result);
              }

              return callSuper(type, "valueOf", args, 2);
            }

            static PyObject *t_DictionaryBuilder$DictionaryFormat_values(PyTypeObject *type)
            {
              JArray< DictionaryBuilder$DictionaryFormat > result((jobject) NULL);
              OBJ_CALL(result = ::org::apache::lucene::analysis::ja::util::DictionaryBuilder$DictionaryFormat::values());
              return JArray<jobject>(result.this$).wrap(t_DictionaryBuilder$DictionaryFormat::wrap_jobject);
            }
            static PyObject *t_DictionaryBuilder$DictionaryFormat_get__parameters_(t_DictionaryBuilder$DictionaryFormat *self, void *data)
            {
              return typeParameters(self->parameters, sizeof(self->parameters));
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/util/fst/Util$Result.h"
#include "org/apache/lucene/util/IntsRef.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        namespace fst {

          ::java::lang::Class *Util$Result::class$ = NULL;
          jmethodID *Util$Result::mids$ = NULL;
          jfieldID *Util$Result::fids$ = NULL;
          bool Util$Result::live$ = false;

          jclass Util$Result::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/util/fst/Util$Result");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_172a8deac16a5c3a] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/util/IntsRef;Ljava/lang/Object;)V");

              fids$ = new jfieldID[max_fid];
              fids$[fid_input] = env->getFieldID(cls, "input", "Lorg/apache/lucene/util/IntsRef;");
              fids$[fid_output] = env->getFieldID(cls, "output", "Ljava/lang/Object;");

              class$ = new ::java::lang::Class(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          Util$Result::Util$Result(const ::org::apache::lucene::util::IntsRef & a0, const ::java::lang::Object & a1) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_172a8deac16a5c3a, a0.this$, a1.this$)) {}

          ::org::apache::lucene::util::IntsRef Util$Result::_get_input() const
          {
            return ::org::apache::lucene::util::IntsRef(env->getObjectField(this$, fids$[fid_input]));
          }

          ::java::lang::Object Util$Result::_get_output() const
          {
            return ::java::lang::Object(env->getObjectField(this$, fids$[fid_output]));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        namespace fst {
          static PyObject *t_Util$Result_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_Util$Result_instance_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_Util$Result_of_(t_Util$Result *self, PyObject *args);
          static int t_Util$Result_init_(t_Util$Result *self, PyObject *args, PyObject *kwds);
          static PyObject *t_Util$Result_get__input(t_Util$Result *self, void *data);
          static PyObject *t_Util$Result_get__output(t_Util$Result *self, void *data);

          static PyObject *t_Util$Result_get__parameters_(t_Util$Result *self, void *data);
          static PyGetSetDef t_Util$Result__fields_[] = {
            DECLARE_GET_FIELD(t_Util$Result, input),
            DECLARE_GET_FIELD(t_Util$Result, output),
            DECLARE_GET_FIELD(t_Util$Result, parameters_),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_Util$Result__methods_[] = {
            DECLARE_METHOD(t_Util$Result, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_Util$Result, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_Util$Result, of_, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          static PyType_Slot PY_TYPE_SLOTS(Util$Result)[] = {
            { Py_tp_methods, t_Util$Result__methods_ },
            { Py_tp_init, (void *) t_Util$Result_init_ },
            { Py_tp_getset, t_Util$Result__fields_ },
            { 0, NULL }
          };

          static PyType_Def *PY_TYPE_BASES(Util$Result)[] = {
            &PY_TYPE_DEF(::java::lang::Object),
            NULL
          };

          DEFINE_TYPE(Util$Result, t_Util$Result, Util$Result);
          PyObject *t_Util$Result::wrap_Object(const Util$Result& object, PyTypeObject *p0)
          {
            PyObject *obj = t_Util$Result::wrap_Object(object);
            if (obj != NULL && obj != Py_None)
            {
              t_Util$Result *self = (t_Util$Result *) obj;
              self->parameters[0] = p0;
            }
            return obj;
          }

          PyObject *t_Util$Result::wrap_jobject(const jobject& object, PyTypeObject *p0)
          {
            PyObject *obj = t_Util$Result::wrap_jobject(object);
            if (obj != NULL && obj != Py_None)
            {
              t_Util$Result *self = (t_Util$Result *) obj;
              self->parameters[0] = p0;
            }
            return obj;
          }

          void t_Util$Result::install(PyObject *module)
          {
            installType(&PY_TYPE(Util$Result), &PY_TYPE_DEF(Util$Result), module, "Util$Result", 0);
          }

          void t_Util$Result::initialize(PyObject *module)
          {
            PyObject_SetAttrString((PyObject *) PY_TYPE(Util$Result), "class_", make_descriptor(Util$Result::initializeClass, 1));
            PyObject_SetAttrString((PyObject *) PY_TYPE(Util$Result), "wrapfn_", make_descriptor(t_Util$Result::wrap_jobject));
            PyObject_SetAttrString((PyObject *) PY_TYPE(Util$Result), "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_Util$Result_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, Util$Result::initializeClass, 1)))
              return NULL;
            return t_Util$Result::wrap_Object(Util$Result(((t_Util$Result *) arg)->object.this$));
          }
          static PyObject *t_Util$Result_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, Util$Result::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static PyObject *t_Util$Result_of_(t_Util$Result *self, PyObject *args)
          {
            if (!parseArg(args, "T", 1, &(self->parameters)))
              Py_RETURN_SELF;
            return PyErr_SetArgsError((PyObject *) self, "of_", args);
          }

          static int t_Util$Result_init_(t_Util$Result *self, PyObject *args, PyObject *kwds)
          {
            ::org::apache::lucene::util::IntsRef a0((jobject) NULL);
            ::java::lang::Object a1((jobject) NULL);
            Util$Result object((jobject) NULL);

            if (!parseArgs(args, "ko", ::org::apache::lucene::util::IntsRef::initializeClass, &a0, &a1))
            {
              INT_CALL(object = Util$Result(a0, a1));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }
          static PyObject *t_Util$Result_get__parameters_(t_Util$Result *self, void *data)
          {
            return typeParameters(self->parameters, sizeof(self->parameters));
          }

          static PyObject *t_Util$Result_get__input(t_Util$Result *self, void *data)
          {
            ::org::apache::lucene::util::IntsRef value((jobject) NULL);
            OBJ_CALL(value = self->object._get_input());
            return ::org::apache::lucene::util::t_IntsRef::wrap_Object(value);
          }

          static PyObject *t_Util$Result_get__output(t_Util$Result *self, void *data)
          {
            ::java::lang::Object value((jobject) NULL);
            OBJ_CALL(value = self->object._get_output());
            return ::java::lang::t_Object::wrap_Object(value);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queryparser/flexible/core/builders/QueryBuilder.h"
#include "org/apache/lucene/queryparser/flexible/core/QueryNodeException.h"
#include "org/apache/lucene/queryparser/flexible/core/nodes/QueryNode.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace core {
            namespace builders {

              ::java::lang::Class *QueryBuilder::class$ = NULL;
              jmethodID *QueryBuilder::mids$ = NULL;
              bool QueryBuilder::live$ = false;

              jclass QueryBuilder::initializeClass(bool getOnly)
              {
                if (getOnly)
                  return (jclass) (live$ ? class$->this$ : NULL);
                if (class$ == NULL)
                {
                  jclass cls = (jclass) env->findClass("org/apache/lucene/queryparser/flexible/core/builders/QueryBuilder");

                  mids$ = new jmethodID[max_mid];
                  mids$[mid_build_c3c85cfa8727a936] = env->getMethodID(cls, "build", "(Lorg/apache/lucene/queryparser/flexible/core/nodes/QueryNode;)Ljava/lang/Object;");

                  class$ = new ::java::lang::Class(cls);
                  live$ = true;
                }
                return (jclass) class$->this$;
              }

              ::java::lang::Object QueryBuilder::build(const ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode & a0) const
              {
                return ::java::lang::Object(env->callObjectMethod(this$, mids$[mid_build_c3c85cfa8727a936], a0.this$));
              }
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace core {
            namespace builders {
              static PyObject *t_QueryBuilder_cast_(PyTypeObject *type, PyObject *arg);
              static PyObject *t_QueryBuilder_instance_(PyTypeObject *type, PyObject *arg);
              static PyObject *t_QueryBuilder_build(t_QueryBuilder *self, PyObject *arg);

              static PyMethodDef t_QueryBuilder__methods_[] = {
                DECLARE_METHOD(t_QueryBuilder, cast_, METH_O | METH_CLASS),
                DECLARE_METHOD(t_QueryBuilder, instance_, METH_O | METH_CLASS),
                DECLARE_METHOD(t_QueryBuilder, build, METH_O),
                { NULL, NULL, 0, NULL }
              };

              static PyType_Slot PY_TYPE_SLOTS(QueryBuilder)[] = {
                { Py_tp_methods, t_QueryBuilder__methods_ },
                { Py_tp_init, (void *) abstract_init },
                { 0, NULL }
              };

              static PyType_Def *PY_TYPE_BASES(QueryBuilder)[] = {
                &PY_TYPE_DEF(::java::lang::Object),
                NULL
              };

              DEFINE_TYPE(QueryBuilder, t_QueryBuilder, QueryBuilder);

              void t_QueryBuilder::install(PyObject *module)
              {
                installType(&PY_TYPE(QueryBuilder), &PY_TYPE_DEF(QueryBuilder), module, "QueryBuilder", 0);
              }

              void t_QueryBuilder::initialize(PyObject *module)
              {
                PyObject_SetAttrString((PyObject *) PY_TYPE(QueryBuilder), "class_", make_descriptor(QueryBuilder::initializeClass, 1));
                PyObject_SetAttrString((PyObject *) PY_TYPE(QueryBuilder), "wrapfn_", make_descriptor(t_QueryBuilder::wrap_jobject));
                PyObject_SetAttrString((PyObject *) PY_TYPE(QueryBuilder), "boxfn_", make_descriptor(boxObject));
              }

              static PyObject *t_QueryBuilder_cast_(PyTypeObject *type, PyObject *arg)
              {
                if (!(arg = castCheck(arg, QueryBuilder::initializeClass, 1)))
                  return NULL;
                return t_QueryBuilder::wrap_Object(QueryBuilder(((t_QueryBuilder *) arg)->object.this$));
              }
              static PyObject *t_QueryBuilder_instance_(PyTypeObject *type, PyObject *arg)
              {
                if (!castCheck(arg, QueryBuilder::initializeClass, 0))
                  Py_RETURN_FALSE;
                Py_RETURN_TRUE;
              }

              static PyObject *t_QueryBuilder_build(t_QueryBuilder *self, PyObject *arg)
              {
                ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode a0((jobject) NULL);
                ::java::lang::Object result((jobject) NULL);

                if (!parseArg(arg, "k", ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode::initializeClass, &a0))
                {
                  OBJ_CALL(result = self->object.build(a0));
                  return ::java::lang::t_Object::wrap_Object(result);
                }

                PyErr_SetArgsError((PyObject *) self, "build", arg);
                return NULL;
              }
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/spatial3d/geom/GeoDistance.h"
#include "org/apache/lucene/spatial3d/geom/DistanceStyle.h"
#include "org/apache/lucene/spatial3d/geom/GeoPoint.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace spatial3d {
        namespace geom {

          ::java::lang::Class *GeoDistance::class$ = NULL;
          jmethodID *GeoDistance::mids$ = NULL;
          bool GeoDistance::live$ = false;

          jclass GeoDistance::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/spatial3d/geom/GeoDistance");

              mids$ = new jmethodID[max_mid];
              mids$[mid_computeDeltaDistance_d330d2576549fa67] = env->getMethodID(cls, "computeDeltaDistance", "(Lorg/apache/lucene/spatial3d/geom/DistanceStyle;Lorg/apache/lucene/spatial3d/geom/GeoPoint;)D");
              mids$[mid_computeDeltaDistance_2b407c8141eb9589] = env->getMethodID(cls, "computeDeltaDistance", "(Lorg/apache/lucene/spatial3d/geom/DistanceStyle;DDD)D");
              mids$[mid_computeDistance_d330d2576549fa67] = env->getMethodID(cls, "computeDistance", "(Lorg/apache/lucene/spatial3d/geom/DistanceStyle;Lorg/apache/lucene/spatial3d/geom/GeoPoint;)D");
              mids$[mid_computeDistance_2b407c8141eb9589] = env->getMethodID(cls, "computeDistance", "(Lorg/apache/lucene/spatial3d/geom/DistanceStyle;DDD)D");

              class$ = new ::java::lang::Class(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          jdouble GeoDistance::computeDeltaDistance(const ::org::apache::lucene::spatial3d::geom::DistanceStyle & a0, const ::org::apache::lucene::spatial3d::geom::GeoPoint & a1) const
          {
            return env->callDoubleMethod(this$, mids$[mid_computeDeltaDistance_d330d2576549fa67], a0.this$, a1.this$);
          }

          jdouble GeoDistance::computeDeltaDistance(const ::org::apache::lucene::spatial3d::geom::DistanceStyle & a0, jdouble a1, jdouble a2, jdouble a3) const
          {
            return env->callDoubleMethod(this$, mids$[mid_computeDeltaDistance_2b407c8141eb9589], a0.this$, a1, a2, a3);
          }

          jdouble GeoDistance::computeDistance(const ::org::apache::lucene::spatial3d::geom::DistanceStyle & a0, const ::org::apache::lucene::spatial3d::geom::GeoPoint & a1) const
          {
            return env->callDoubleMethod(this$, mids$[mid_computeDistance_d330d2576549fa67], a0.this$, a1.this$);
          }

          jdouble GeoDistance::computeDistance(const ::org::apache::lucene::spatial3d::geom::DistanceStyle & a0, jdouble a1, jdouble a2, jdouble a3) const
          {
            return env->callDoubleMethod(this$, mids$[mid_computeDistance_2b407c8141eb9589], a0.this$, a1, a2, a3);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace spatial3d {
        namespace geom {
          static PyObject *t_GeoDistance_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_GeoDistance_instance_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_GeoDistance_computeDeltaDistance(t_GeoDistance *self, PyObject *args);
          static PyObject *t_GeoDistance_computeDistance(t_GeoDistance *self, PyObject *args);

          static PyMethodDef t_GeoDistance__methods_[] = {
            DECLARE_METHOD(t_GeoDistance, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_GeoDistance, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_GeoDistance, computeDeltaDistance, METH_VARARGS),
            DECLARE_METHOD(t_GeoDistance, computeDistance, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          static PyType_Slot PY_TYPE_SLOTS(GeoDistance)[] = {
            { Py_tp_methods, t_GeoDistance__methods_ },
            { Py_tp_init, (void *) abstract_init },
            { 0, NULL }
          };

          static PyType_Def *PY_TYPE_BASES(GeoDistance)[] = {
            &PY_TYPE_DEF(::org::apache::lucene::spatial3d::geom::Membership),
            NULL
          };

          DEFINE_TYPE(GeoDistance, t_GeoDistance, GeoDistance);

          void t_GeoDistance::install(PyObject *module)
          {
            installType(&PY_TYPE(GeoDistance), &PY_TYPE_DEF(GeoDistance), module, "GeoDistance", 0);
          }

          void t_GeoDistance::initialize(PyObject *module)
          {
            PyObject_SetAttrString((PyObject *) PY_TYPE(GeoDistance), "class_", make_descriptor(GeoDistance::initializeClass, 1));
            PyObject_SetAttrString((PyObject *) PY_TYPE(GeoDistance), "wrapfn_", make_descriptor(t_GeoDistance::wrap_jobject));
            PyObject_SetAttrString((PyObject *) PY_TYPE(GeoDistance), "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_GeoDistance_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, GeoDistance::initializeClass, 1)))
              return NULL;
            return t_GeoDistance::wrap_Object(GeoDistance(((t_GeoDistance *) arg)->object.this$));
          }
          static PyObject *t_GeoDistance_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, GeoDistance::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static PyObject *t_GeoDistance_computeDeltaDistance(t_GeoDistance *self, PyObject *args)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 2:
              {
                ::org::apache::lucene::spatial3d::geom::DistanceStyle a0((jobject) NULL);
                ::org::apache::lucene::spatial3d::geom::GeoPoint a1((jobject) NULL);
                jdouble result;

                if (!parseArgs(args, "kk", ::org::apache::lucene::spatial3d::geom::DistanceStyle::initializeClass, ::org::apache::lucene::spatial3d::geom::GeoPoint::initializeClass, &a0, &a1))
                {
                  OBJ_CALL(result = self->object.computeDeltaDistance(a0, a1));
                  return PyFloat_FromDouble((double) result);
                }
              }
              break;
             case 4:
              {
                ::org::apache::lucene::spatial3d::geom::DistanceStyle a0((jobject) NULL);
                jdouble a1;
                jdouble a2;
                jdouble a3;
                jdouble result;

                if (!parseArgs(args, "kDDD", ::org::apache::lucene::spatial3d::geom::DistanceStyle::initializeClass, &a0, &a1, &a2, &a3))
                {
                  OBJ_CALL(result = self->object.computeDeltaDistance(a0, a1, a2, a3));
                  return PyFloat_FromDouble((double) result);
                }
              }
            }

            PyErr_SetArgsError((PyObject *) self, "computeDeltaDistance", args);
            return NULL;
          }

          static PyObject *t_GeoDistance_computeDistance(t_GeoDistance *self, PyObject *args)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 2:
              {
                ::org::apache::lucene::spatial3d::geom::DistanceStyle a0((jobject) NULL);
                ::org::apache::lucene::spatial3d::geom::GeoPoint a1((jobject) NULL);
                jdouble result;

                if (!parseArgs(args, "kk", ::org::apache::lucene::spatial3d::geom::DistanceStyle::initializeClass, ::org::apache::lucene::spatial3d::geom::GeoPoint::initializeClass, &a0, &a1))
                {
                  OBJ_CALL(result = self->object.computeDistance(a0, a1));
                  return PyFloat_FromDouble((double) result);
                }
              }
              break;
             case 4:
              {
                ::org::apache::lucene::spatial3d::geom::DistanceStyle a0((jobject) NULL);
                jdouble a1;
                jdouble a2;
                jdouble a3;
                jdouble result;

                if (!parseArgs(args, "kDDD", ::org::apache::lucene::spatial3d::geom::DistanceStyle::initializeClass, &a0, &a1, &a2, &a3))
                {
                  OBJ_CALL(result = self->object.computeDistance(a0, a1, a2, a3));
                  return PyFloat_FromDouble((double) result);
                }
              }
            }

            PyErr_SetArgsError((PyObject *) self, "computeDistance", args);
            return NULL;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/util/MergedIterator.h"
#include "java/util/Iterator.h"
#include "java/lang/Comparable.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {

        ::java::lang::Class *MergedIterator::class$ = NULL;
        jmethodID *MergedIterator::mids$ = NULL;
        bool MergedIterator::live$ = false;

        jclass MergedIterator::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/util/MergedIterator");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_b7a56345566eb1c8] = env->getMethodID(cls, "<init>", "([Ljava/util/Iterator;)V");
            mids$[mid_init$_6a0df666a0e4eb37] = env->getMethodID(cls, "<init>", "(Z[Ljava/util/Iterator;)V");
            mids$[mid_hasNext_8454bd5aa23fd11e] = env->getMethodID(cls, "hasNext", "()Z");
            mids$[mid_next_72aaaa2f14a129a1] = env->getMethodID(cls, "next", "()Ljava/lang/Comparable;");
            mids$[mid_remove_f2cc1bce94666404] = env->getMethodID(cls, "remove", "()V");

            class$ = new ::java::lang::Class(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        MergedIterator::MergedIterator(const JArray< ::java::util::Iterator > & a0) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_b7a56345566eb1c8, a0.this$)) {}

        MergedIterator::MergedIterator(jboolean a0, const JArray< ::java::util::Iterator > & a1) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_6a0df666a0e4eb37, a0, a1.this$)) {}

        jboolean MergedIterator::hasNext() const
        {
          return env->callBooleanMethod(this$, mids$[mid_hasNext_8454bd5aa23fd11e]);
        }

        ::java::lang::Comparable MergedIterator::next() const
        {
          return ::java::lang::Comparable(env->callObjectMethod(this$, mids$[mid_next_72aaaa2f14a129a1]));
        }

        void MergedIterator::remove() const
        {
          env->callVoidMethod(this$, mids$[mid_remove_f2cc1bce94666404]);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        static PyObject *t_MergedIterator_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_MergedIterator_instance_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_MergedIterator_of_(t_MergedIterator *self, PyObject *args);
        static int t_MergedIterator_init_(t_MergedIterator *self, PyObject *args, PyObject *kwds);
        static PyObject *t_MergedIterator_hasNext(t_MergedIterator *self);
        static PyObject *t_MergedIterator_next(t_MergedIterator *self);
        static PyObject *t_MergedIterator_remove(t_MergedIterator *self);
        static PyObject *t_MergedIterator_get__parameters_(t_MergedIterator *self, void *data);
        static PyGetSetDef t_MergedIterator__fields_[] = {
          DECLARE_GET_FIELD(t_MergedIterator, parameters_),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_MergedIterator__methods_[] = {
          DECLARE_METHOD(t_MergedIterator, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_MergedIterator, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_MergedIterator, of_, METH_VARARGS),
          DECLARE_METHOD(t_MergedIterator, hasNext, METH_NOARGS),
          DECLARE_METHOD(t_MergedIterator, next, METH_NOARGS),
          DECLARE_METHOD(t_MergedIterator, remove, METH_NOARGS),
          { NULL, NULL, 0, NULL }
        };

        static PyType_Slot PY_TYPE_SLOTS(MergedIterator)[] = {
          { Py_tp_methods, t_MergedIterator__methods_ },
          { Py_tp_init, (void *) t_MergedIterator_init_ },
          { Py_tp_getset, t_MergedIterator__fields_ },
          { Py_tp_iter, (void *) PyObject_SelfIter },
          { Py_tp_iternext, (void *) ((PyObject *(*)(::java::util::t_Iterator *)) get_generic_iterator_next< ::java::util::t_Iterator,::java::lang::t_Comparable >) },
          { 0, NULL }
        };

        static PyType_Def *PY_TYPE_BASES(MergedIterator)[] = {
          &PY_TYPE_DEF(::java::lang::Object),
          NULL
        };

        DEFINE_TYPE(MergedIterator, t_MergedIterator, MergedIterator);
        PyObject *t_MergedIterator::wrap_Object(const MergedIterator& object, PyTypeObject *p0)
        {
          PyObject *obj = t_MergedIterator::wrap_Object(object);
          if (obj != NULL && obj != Py_None)
          {
            t_MergedIterator *self = (t_MergedIterator *) obj;
            self->parameters[0] = p0;
          }
          return obj;
        }

        PyObject *t_MergedIterator::wrap_jobject(const jobject& object, PyTypeObject *p0)
        {
          PyObject *obj = t_MergedIterator::wrap_jobject(object);
          if (obj != NULL && obj != Py_None)
          {
            t_MergedIterator *self = (t_MergedIterator *) obj;
            self->parameters[0] = p0;
          }
          return obj;
        }

        void t_MergedIterator::install(PyObject *module)
        {
          installType(&PY_TYPE(MergedIterator), &PY_TYPE_DEF(MergedIterator), module, "MergedIterator", 0);
        }

        void t_MergedIterator::initialize(PyObject *module)
        {
          PyObject_SetAttrString((PyObject *) PY_TYPE(MergedIterator), "class_", make_descriptor(MergedIterator::initializeClass, 1));
          PyObject_SetAttrString((PyObject *) PY_TYPE(MergedIterator), "wrapfn_", make_descriptor(t_MergedIterator::wrap_jobject));
          PyObject_SetAttrString((PyObject *) PY_TYPE(MergedIterator), "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_MergedIterator_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, MergedIterator::initializeClass, 1)))
            return NULL;
          return t_MergedIterator::wrap_Object(MergedIterator(((t_MergedIterator *) arg)->object.this$));
        }
        static PyObject *t_MergedIterator_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, MergedIterator::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static PyObject *t_MergedIterator_of_(t_MergedIterator *self, PyObject *args)
        {
          if (!parseArg(args, "T", 1, &(self->parameters)))
            Py_RETURN_SELF;
          return PyErr_SetArgsError((PyObject *) self, "of_", args);
        }

        static int t_MergedIterator_init_(t_MergedIterator *self, PyObject *args, PyObject *kwds)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 1:
            {
              JArray< ::java::util::Iterator > a0((jobject) NULL);
              PyTypeObject **p0;
              MergedIterator object((jobject) NULL);

              if (!parseArgs(args, "[K", ::java::util::Iterator::initializeClass, &a0, &p0, ::java::util::t_Iterator::parameters_))
              {
                INT_CALL(object = MergedIterator(a0));
                self->object = object;
                break;
              }
            }
            goto err;
           case 2:
            {
              jboolean a0;
              JArray< ::java::util::Iterator > a1((jobject) NULL);
              PyTypeObject **p1;
              MergedIterator object((jobject) NULL);

              if (!parseArgs(args, "Z[K", ::java::util::Iterator::initializeClass, &a0, &a1, &p1, ::java::util::t_Iterator::parameters_))
              {
                INT_CALL(object = MergedIterator(a0, a1));
                self->object = object;
                break;
              }
            }
           default:
           err:
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }

        static PyObject *t_MergedIterator_hasNext(t_MergedIterator *self)
        {
          jboolean result;
          OBJ_CALL(result = self->object.hasNext());
          Py_RETURN_BOOL(result);
        }

        static PyObject *t_MergedIterator_next(t_MergedIterator *self)
        {
          ::java::lang::Comparable result((jobject) NULL);
          OBJ_CALL(result = self->object.next());
          return self->parameters[0] != NULL ? wrapType(self->parameters[0], result.this$) : ::java::lang::t_Comparable::wrap_Object(result);
        }

        static PyObject *t_MergedIterator_remove(t_MergedIterator *self)
        {
          OBJ_CALL(self->object.remove());
          Py_RETURN_NONE;
        }
        static PyObject *t_MergedIterator_get__parameters_(t_MergedIterator *self, void *data)
        {
          return typeParameters(self->parameters, sizeof(self->parameters));
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queries/function/valuesource/IntFieldSource.h"
#include "java/util/Map.h"
#include "org/apache/lucene/index/LeafReaderContext.h"
#include "org/apache/lucene/search/SortField.h"
#include "org/apache/lucene/queries/function/FunctionValues.h"
#include "java/lang/Class.h"
#include "java/lang/Object.h"
#include "java/lang/String.h"
#include "java/io/IOException.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queries {
        namespace function {
          namespace valuesource {

            ::java::lang::Class *IntFieldSource::class$ = NULL;
            jmethodID *IntFieldSource::mids$ = NULL;
            bool IntFieldSource::live$ = false;

            jclass IntFieldSource::initializeClass(bool getOnly)
            {
              if (getOnly)
                return (jclass) (live$ ? class$->this$ : NULL);
              if (class$ == NULL)
              {
                jclass cls = (jclass) env->findClass("org/apache/lucene/queries/function/valuesource/IntFieldSource");

                mids$ = new jmethodID[max_mid];
                mids$[mid_init$_9fd2eb66a64e6f0f] = env->getMethodID(cls, "<init>", "(Ljava/lang/String;)V");
                mids$[mid_description_db9b55ba01e03e4b] = env->getMethodID(cls, "description", "()Ljava/lang/String;");
                mids$[mid_equals_8b72f2dcdde6fd1d] = env->getMethodID(cls, "equals", "(Ljava/lang/Object;)Z");
                mids$[mid_getSortField_8a713675264264ba] = env->getMethodID(cls, "getSortField", "(Z)Lorg/apache/lucene/search/SortField;");
                mids$[mid_getValues_ede8eccd3e97f32c] = env->getMethodID(cls, "getValues", "(Ljava/util/Map;Lorg/apache/lucene/index/LeafReaderContext;)Lorg/apache/lucene/queries/function/FunctionValues;");
                mids$[mid_hashCode_9972fcc56b44e79d] = env->getMethodID(cls, "hashCode", "()I");
                mids$[mid_getNumericDocValues_991afb5c8a130516] = env->getMethodID(cls, "getNumericDocValues", "(Ljava/util/Map;Lorg/apache/lucene/index/LeafReaderContext;)Lorg/apache/lucene/index/NumericDocValues;");

                class$ = new ::java::lang::Class(cls);
                live$ = true;
              }
              return (jclass) class$->this$;
            }

            IntFieldSource::IntFieldSource(const ::java::lang::String & a0) : ::org::apache::lucene::queries::function::valuesource::FieldCacheSource(env->newObject(initializeClass, &mids$, mid_init$_9fd2eb66a64e6f0f, a0.this$)) {}

            ::java::lang::String IntFieldSource::description() const
            {
              return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_description_db9b55ba01e03e4b]));
            }

            jboolean IntFieldSource::equals(const ::java::lang::Object & a0) const
            {
              return env->callBooleanMethod(this$, mids$[mid_equals_8b72f2dcdde6fd1d], a0.this$);
            }

            ::org::apache::lucene::search::SortField IntFieldSource::getSortField(jboolean a0) const
            {
              return ::org::apache::lucene::search::SortField(env->callObjectMethod(this$, mids$[mid_getSortField_8a713675264264ba], a0));
            }

            ::org::apache::lucene::queries::function::FunctionValues IntFieldSource::getValues(const ::java::util::Map & a0, const ::org::apache::lucene::index::LeafReaderContext & a1) const
            {
              return ::org::apache::lucene::queries::function::FunctionValues(env->callObjectMethod(this$, mids$[mid_getValues_ede8eccd3e97f32c], a0.this$, a1.this$));
            }

            jint IntFieldSource::hashCode() const
            {
              return env->callIntMethod(this$, mids$[mid_hashCode_9972fcc56b44e79d]);
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queries {
        namespace function {
          namespace valuesource {
            static PyObject *t_IntFieldSource_cast_(PyTypeObject *type, PyObject *arg);
            static PyObject *t_IntFieldSource_instance_(PyTypeObject *type, PyObject *arg);
            static int t_IntFieldSource_init_(t_IntFieldSource *self, PyObject *args, PyObject *kwds);
            static PyObject *t_IntFieldSource_description(t_IntFieldSource *self, PyObject *args);
            static PyObject *t_IntFieldSource_equals(t_IntFieldSource *self, PyObject *args);
            static PyObject *t_IntFieldSource_getSortField(t_IntFieldSource *self, PyObject *args);
            static PyObject *t_IntFieldSource_getValues(t_IntFieldSource *self, PyObject *args);
            static PyObject *t_IntFieldSource_hashCode(t_IntFieldSource *self, PyObject *args);

            static PyMethodDef t_IntFieldSource__methods_[] = {
              DECLARE_METHOD(t_IntFieldSource, cast_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_IntFieldSource, instance_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_IntFieldSource, description, METH_VARARGS),
              DECLARE_METHOD(t_IntFieldSource, equals, METH_VARARGS),
              DECLARE_METHOD(t_IntFieldSource, getSortField, METH_VARARGS),
              DECLARE_METHOD(t_IntFieldSource, getValues, METH_VARARGS),
              DECLARE_METHOD(t_IntFieldSource, hashCode, METH_VARARGS),
              { NULL, NULL, 0, NULL }
            };

            static PyType_Slot PY_TYPE_SLOTS(IntFieldSource)[] = {
              { Py_tp_methods, t_IntFieldSource__methods_ },
              { Py_tp_init, (void *) t_IntFieldSource_init_ },
              { 0, NULL }
            };

            static PyType_Def *PY_TYPE_BASES(IntFieldSource)[] = {
              &PY_TYPE_DEF(::org::apache::lucene::queries::function::valuesource::FieldCacheSource),
              NULL
            };

            DEFINE_TYPE(IntFieldSource, t_IntFieldSource, IntFieldSource);

            void t_IntFieldSource::install(PyObject *module)
            {
              installType(&PY_TYPE(IntFieldSource), &PY_TYPE_DEF(IntFieldSource), module, "IntFieldSource", 0);
            }

            void t_IntFieldSource::initialize(PyObject *module)
            {
              PyObject_SetAttrString((PyObject *) PY_TYPE(IntFieldSource), "class_", make_descriptor(IntFieldSource::initializeClass, 1));
              PyObject_SetAttrString((PyObject *) PY_TYPE(IntFieldSource), "wrapfn_", make_descriptor(t_IntFieldSource::wrap_jobject));
              PyObject_SetAttrString((PyObject *) PY_TYPE(IntFieldSource), "boxfn_", make_descriptor(boxObject));
            }

            static PyObject *t_IntFieldSource_cast_(PyTypeObject *type, PyObject *arg)
            {
              if (!(arg = castCheck(arg, IntFieldSource::initializeClass, 1)))
                return NULL;
              return t_IntFieldSource::wrap_Object(IntFieldSource(((t_IntFieldSource *) arg)->object.this$));
            }
            static PyObject *t_IntFieldSource_instance_(PyTypeObject *type, PyObject *arg)
            {
              if (!castCheck(arg, IntFieldSource::initializeClass, 0))
                Py_RETURN_FALSE;
              Py_RETURN_TRUE;
            }

            static int t_IntFieldSource_init_(t_IntFieldSource *self, PyObject *args, PyObject *kwds)
            {
              ::java::lang::String a0((jobject) NULL);
              IntFieldSource object((jobject) NULL);

              if (!parseArgs(args, "s", &a0))
              {
                INT_CALL(object = IntFieldSource(a0));
                self->object = object;
              }
              else
              {
                PyErr_SetArgsError((PyObject *) self, "__init__", args);
                return -1;
              }

              return 0;
            }

            static PyObject *t_IntFieldSource_description(t_IntFieldSource *self, PyObject *args)
            {
              ::java::lang::String result((jobject) NULL);

              if (!parseArgs(args, ""))
              {
                OBJ_CALL(result = self->object.description());
                return j2p(result);
              }

              return callSuper(PY_TYPE(IntFieldSource), (PyObject *) self, "description", args, 2);
            }

            static PyObject *t_IntFieldSource_equals(t_IntFieldSource *self, PyObject *args)
            {
              ::java::lang::Object a0((jobject) NULL);
              jboolean result;

              if (!parseArgs(args, "o", &a0))
              {
                OBJ_CALL(result = self->object.equals(a0));
                Py_RETURN_BOOL(result);
              }

              return callSuper(PY_TYPE(IntFieldSource), (PyObject *) self, "equals", args, 2);
            }

            static PyObject *t_IntFieldSource_getSortField(t_IntFieldSource *self, PyObject *args)
            {
              jboolean a0;
              ::org::apache::lucene::search::SortField result((jobject) NULL);

              if (!parseArgs(args, "Z", &a0))
              {
                OBJ_CALL(result = self->object.getSortField(a0));
                return ::org::apache::lucene::search::t_SortField::wrap_Object(result);
              }

              return callSuper(PY_TYPE(IntFieldSource), (PyObject *) self, "getSortField", args, 2);
            }

            static PyObject *t_IntFieldSource_getValues(t_IntFieldSource *self, PyObject *args)
            {
              ::java::util::Map a0((jobject) NULL);
              PyTypeObject **p0;
              ::org::apache::lucene::index::LeafReaderContext a1((jobject) NULL);
              ::org::apache::lucene::queries::function::FunctionValues result((jobject) NULL);

              if (!parseArgs(args, "Kk", ::java::util::Map::initializeClass, ::org::apache::lucene::index::LeafReaderContext::initializeClass, &a0, &p0, ::java::util::t_Map::parameters_, &a1))
              {
                OBJ_CALL(result = self->object.getValues(a0, a1));
                return ::org::apache::lucene::queries::function::t_FunctionValues::wrap_Object(result);
              }

              return callSuper(PY_TYPE(IntFieldSource), (PyObject *) self, "getValues", args, 2);
            }

            static PyObject *t_IntFieldSource_hashCode(t_IntFieldSource *self, PyObject *args)
            {
              jint result;

              if (!parseArgs(args, ""))
              {
                OBJ_CALL(result = self->object.hashCode());
                return PyLong_FromLong((long) result);
              }

              return callSuper(PY_TYPE(IntFieldSource), (PyObject *) self, "hashCode", args, 2);
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/codecs/uniformsplit/BlockLine$Serializer.h"
#include "org/apache/lucene/util/Accountable.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/codecs/uniformsplit/BlockLine.h"
#include "org/apache/lucene/store/DataOutput.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/store/DataInput.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace codecs {
        namespace uniformsplit {

          ::java::lang::Class *BlockLine$Serializer::class$ = NULL;
          jmethodID *BlockLine$Serializer::mids$ = NULL;
          bool BlockLine$Serializer::live$ = false;

          jclass BlockLine$Serializer::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/codecs/uniformsplit/BlockLine$Serializer");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_f2cc1bce94666404] = env->getMethodID(cls, "<init>", "()V");
              mids$[mid_ramBytesUsed_2e5ae9edcb9b072f] = env->getMethodID(cls, "ramBytesUsed", "()J");
              mids$[mid_readLine_1c834a51f0e5e95d] = env->getMethodID(cls, "readLine", "(Lorg/apache/lucene/store/DataInput;ZLorg/apache/lucene/codecs/uniformsplit/BlockLine;)Lorg/apache/lucene/codecs/uniformsplit/BlockLine;");
              mids$[mid_writeLine_28b30e53a960cd0b] = env->getMethodID(cls, "writeLine", "(Lorg/apache/lucene/store/DataOutput;Lorg/apache/lucene/codecs/uniformsplit/BlockLine;Lorg/apache/lucene/codecs/uniformsplit/BlockLine;IZ)V");
              mids$[mid_numBitsToEncode_1e143afe1894d213] = env->getStaticMethodID(cls, "numBitsToEncode", "(I)I");
              mids$[mid_writeLineTermState_d6d12c23bed9c4f1] = env->getMethodID(cls, "writeLineTermState", "(Lorg/apache/lucene/store/DataOutput;Lorg/apache/lucene/codecs/uniformsplit/BlockLine;Lorg/apache/lucene/index/FieldInfo;Lorg/apache/lucene/codecs/uniformsplit/DeltaBaseTermStateSerializer;)V");
              mids$[mid_writeIncrementallyEncodedTerm_5a9617c0c64d8529] = env->getMethodID(cls, "writeIncrementallyEncodedTerm", "(Lorg/apache/lucene/codecs/uniformsplit/TermBytes;Lorg/apache/lucene/codecs/uniformsplit/TermBytes;ZLorg/apache/lucene/store/DataOutput;)V");
              mids$[mid_readIncrementallyEncodedTerm_c0993f829379ab75] = env->getMethodID(cls, "readIncrementallyEncodedTerm", "(Lorg/apache/lucene/store/DataInput;ZLorg/apache/lucene/codecs/uniformsplit/TermBytes;)Lorg/apache/lucene/codecs/uniformsplit/TermBytes;");
              mids$[mid_readBytes_b0d7740370e49a0c] = env->getMethodID(cls, "readBytes", "(Lorg/apache/lucene/store/DataInput;Lorg/apache/lucene/util/BytesRef;II)V");

              class$ = new ::java::lang::Class(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          BlockLine$Serializer::BlockLine$Serializer() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_f2cc1bce94666404)) {}

          jlong BlockLine$Serializer::ramBytesUsed() const
          {
            return env->callLongMethod(this$, mids$[mid_ramBytesUsed_2e5ae9edcb9b072f]);
          }

          ::org::apache::lucene::codecs::uniformsplit::BlockLine BlockLine$Serializer::readLine(const ::org::apache::lucene::store::DataInput & a0, jboolean a1, const ::org::apache::lucene::codecs::uniformsplit::BlockLine & a2) const
          {
            return ::org::apache::lucene::codecs::uniformsplit::BlockLine(env->callObjectMethod(this$, mids$[mid_readLine_1c834a51f0e5e95d], a0.this$, a1, a2.this$));
          }

          void BlockLine$Serializer::writeLine(const ::org::apache::lucene::store::DataOutput & a0, const ::org::apache::lucene::codecs::uniformsplit::BlockLine & a1, const ::org::apache::lucene::codecs::uniformsplit::BlockLine & a2, jint a3, jboolean a4) const
          {
            env->callVoidMethod(this$, mids$[mid_writeLine_28b30e53a960cd0b], a0.this$, a1.this$, a2.this$, a3, a4);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace codecs {
        namespace uniformsplit {
          static PyObject *t_BlockLine$Serializer_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_BlockLine$Serializer_instance_(PyTypeObject *type, PyObject *arg);
          static int t_BlockLine$Serializer_init_(t_BlockLine$Serializer *self, PyObject *args, PyObject *kwds);
          static PyObject *t_BlockLine$Serializer_ramBytesUsed(t_BlockLine$Serializer *self);
          static PyObject *t_BlockLine$Serializer_readLine(t_BlockLine$Serializer *self, PyObject *args);
          static PyObject *t_BlockLine$Serializer_writeLine(t_BlockLine$Serializer *self, PyObject *args);

          static PyMethodDef t_BlockLine$Serializer__methods_[] = {
            DECLARE_METHOD(t_BlockLine$Serializer, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_BlockLine$Serializer, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_BlockLine$Serializer, ramBytesUsed, METH_NOARGS),
            DECLARE_METHOD(t_BlockLine$Serializer, readLine, METH_VARARGS),
            DECLARE_METHOD(t_BlockLine$Serializer, writeLine, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          static PyType_Slot PY_TYPE_SLOTS(BlockLine$Serializer)[] = {
            { Py_tp_methods, t_BlockLine$Serializer__methods_ },
            { Py_tp_init, (void *) t_BlockLine$Serializer_init_ },
            { 0, NULL }
          };

          static PyType_Def *PY_TYPE_BASES(BlockLine$Serializer)[] = {
            &PY_TYPE_DEF(::java::lang::Object),
            NULL
          };

          DEFINE_TYPE(BlockLine$Serializer, t_BlockLine$Serializer, BlockLine$Serializer);

          void t_BlockLine$Serializer::install(PyObject *module)
          {
            installType(&PY_TYPE(BlockLine$Serializer), &PY_TYPE_DEF(BlockLine$Serializer), module, "BlockLine$Serializer", 0);
          }

          void t_BlockLine$Serializer::initialize(PyObject *module)
          {
            PyObject_SetAttrString((PyObject *) PY_TYPE(BlockLine$Serializer), "class_", make_descriptor(BlockLine$Serializer::initializeClass, 1));
            PyObject_SetAttrString((PyObject *) PY_TYPE(BlockLine$Serializer), "wrapfn_", make_descriptor(t_BlockLine$Serializer::wrap_jobject));
            PyObject_SetAttrString((PyObject *) PY_TYPE(BlockLine$Serializer), "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_BlockLine$Serializer_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, BlockLine$Serializer::initializeClass, 1)))
              return NULL;
            return t_BlockLine$Serializer::wrap_Object(BlockLine$Serializer(((t_BlockLine$Serializer *) arg)->object.this$));
          }
          static PyObject *t_BlockLine$Serializer_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, BlockLine$Serializer::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_BlockLine$Serializer_init_(t_BlockLine$Serializer *self, PyObject *args, PyObject *kwds)
          {
            BlockLine$Serializer object((jobject) NULL);

            INT_CALL(object = BlockLine$Serializer());
            self->object = object;

            return 0;
          }

          static PyObject *t_BlockLine$Serializer_ramBytesUsed(t_BlockLine$Serializer *self)
          {
            jlong result;
            OBJ_CALL(result = self->object.ramBytesUsed());
            return PyLong_FromLongLong((PY_LONG_LONG) result);
          }

          static PyObject *t_BlockLine$Serializer_readLine(t_BlockLine$Serializer *self, PyObject *args)
          {
            ::org::apache::lucene::store::DataInput a0((jobject) NULL);
            jboolean a1;
            ::org::apache::lucene::codecs::uniformsplit::BlockLine a2((jobject) NULL);
            ::org::apache::lucene::codecs::uniformsplit::BlockLine result((jobject) NULL);

            if (!parseArgs(args, "kZk", ::org::apache::lucene::store::DataInput::initializeClass, ::org::apache::lucene::codecs::uniformsplit::BlockLine::initializeClass, &a0, &a1, &a2))
            {
              OBJ_CALL(result = self->object.readLine(a0, a1, a2));
              return ::org::apache::lucene::codecs::uniformsplit::t_BlockLine::wrap_Object(result);
            }

            PyErr_SetArgsError((PyObject *) self, "readLine", args);
            return NULL;
          }

          static PyObject *t_BlockLine$Serializer_writeLine(t_BlockLine$Serializer *self, PyObject *args)
          {
            ::org::apache::lucene::store::DataOutput a0((jobject) NULL);
            ::org::apache::lucene::codecs::uniformsplit::BlockLine a1((jobject) NULL);
            ::org::apache::lucene::codecs::uniformsplit::BlockLine a2((jobject) NULL);
            jint a3;
            jboolean a4;

            if (!parseArgs(args, "kkkIZ", ::org::apache::lucene::store::DataOutput::initializeClass, ::org::apache::lucene::codecs::uniformsplit::BlockLine::initializeClass, ::org::apache::lucene::codecs::uniformsplit::BlockLine::initializeClass, &a0, &a1, &a2, &a3, &a4))
            {
              OBJ_CALL(self->object.writeLine(a0, a1, a2, a3, a4));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError((PyObject *) self, "writeLine", args);
            return NULL;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/index/TwoPhaseCommitTool$CommitFailException.h"
#include "org/apache/lucene/index/TwoPhaseCommit.h"
#include "java/lang/Throwable.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {

        ::java::lang::Class *TwoPhaseCommitTool$CommitFailException::class$ = NULL;
        jmethodID *TwoPhaseCommitTool$CommitFailException::mids$ = NULL;
        bool TwoPhaseCommitTool$CommitFailException::live$ = false;

        jclass TwoPhaseCommitTool$CommitFailException::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/index/TwoPhaseCommitTool$CommitFailException");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_0c0c7483f1e3dac6] = env->getMethodID(cls, "<init>", "(Ljava/lang/Throwable;Lorg/apache/lucene/index/TwoPhaseCommit;)V");

            class$ = new ::java::lang::Class(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        TwoPhaseCommitTool$CommitFailException::TwoPhaseCommitTool$CommitFailException(const ::java::lang::Throwable & a0, const ::org::apache::lucene::index::TwoPhaseCommit & a1) : ::java::io::IOException(env->newObject(initializeClass, &mids$, mid_init$_0c0c7483f1e3dac6, a0.this$, a1.this$)) {}
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {
        static PyObject *t_TwoPhaseCommitTool$CommitFailException_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_TwoPhaseCommitTool$CommitFailException_instance_(PyTypeObject *type, PyObject *arg);
        static int t_TwoPhaseCommitTool$CommitFailException_init_(t_TwoPhaseCommitTool$CommitFailException *self, PyObject *args, PyObject *kwds);

        static PyMethodDef t_TwoPhaseCommitTool$CommitFailException__methods_[] = {
          DECLARE_METHOD(t_TwoPhaseCommitTool$CommitFailException, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_TwoPhaseCommitTool$CommitFailException, instance_, METH_O | METH_CLASS),
          { NULL, NULL, 0, NULL }
        };

        static PyType_Slot PY_TYPE_SLOTS(TwoPhaseCommitTool$CommitFailException)[] = {
          { Py_tp_methods, t_TwoPhaseCommitTool$CommitFailException__methods_ },
          { Py_tp_init, (void *) t_TwoPhaseCommitTool$CommitFailException_init_ },
          { 0, NULL }
        };

        static PyType_Def *PY_TYPE_BASES(TwoPhaseCommitTool$CommitFailException)[] = {
          &PY_TYPE_DEF(::java::io::IOException),
          NULL
        };

        DEFINE_TYPE(TwoPhaseCommitTool$CommitFailException, t_TwoPhaseCommitTool$CommitFailException, TwoPhaseCommitTool$CommitFailException);

        void t_TwoPhaseCommitTool$CommitFailException::install(PyObject *module)
        {
          installType(&PY_TYPE(TwoPhaseCommitTool$CommitFailException), &PY_TYPE_DEF(TwoPhaseCommitTool$CommitFailException), module, "TwoPhaseCommitTool$CommitFailException", 0);
        }

        void t_TwoPhaseCommitTool$CommitFailException::initialize(PyObject *module)
        {
          PyObject_SetAttrString((PyObject *) PY_TYPE(TwoPhaseCommitTool$CommitFailException), "class_", make_descriptor(TwoPhaseCommitTool$CommitFailException::initializeClass, 1));
          PyObject_SetAttrString((PyObject *) PY_TYPE(TwoPhaseCommitTool$CommitFailException), "wrapfn_", make_descriptor(t_TwoPhaseCommitTool$CommitFailException::wrap_jobject));
          PyObject_SetAttrString((PyObject *) PY_TYPE(TwoPhaseCommitTool$CommitFailException), "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_TwoPhaseCommitTool$CommitFailException_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, TwoPhaseCommitTool$CommitFailException::initializeClass, 1)))
            return NULL;
          return t_TwoPhaseCommitTool$CommitFailException::wrap_Object(TwoPhaseCommitTool$CommitFailException(((t_TwoPhaseCommitTool$CommitFailException *) arg)->object.this$));
        }
        static PyObject *t_TwoPhaseCommitTool$CommitFailException_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, TwoPhaseCommitTool$CommitFailException::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_TwoPhaseCommitTool$CommitFailException_init_(t_TwoPhaseCommitTool$CommitFailException *self, PyObject *args, PyObject *kwds)
        {
          ::java::lang::Throwable a0((jobject) NULL);
          ::org::apache::lucene::index::TwoPhaseCommit a1((jobject) NULL);
          TwoPhaseCommitTool$CommitFailException object((jobject) NULL);

          if (!parseArgs(args, "kk", ::java::lang::Throwable::initializeClass, ::org::apache::lucene::index::TwoPhaseCommit::initializeClass, &a0, &a1))
          {
            INT_CALL(object = TwoPhaseCommitTool$CommitFailException(a0, a1));
            self->object = object;
          }
          else
          {
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/misc/index/IndexRearranger.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/store/Directory.h"
#include "org/apache/lucene/index/IndexWriterConfig.h"
#include "org/apache/lucene/misc/index/IndexRearranger$DocumentSelector.h"
#include "java/lang/Exception.h"
#include "java/util/List.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace misc {
        namespace index {

          ::java::lang::Class *IndexRearranger::class$ = NULL;
          jmethodID *IndexRearranger::mids$ = NULL;
          bool IndexRearranger::live$ = false;

          jclass IndexRearranger::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/misc/index/IndexRearranger");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_d36f42a0428d0d5f] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/store/Directory;Lorg/apache/lucene/store/Directory;Lorg/apache/lucene/index/IndexWriterConfig;Ljava/util/List;)V");
              mids$[mid_execute_f2cc1bce94666404] = env->getMethodID(cls, "execute", "()V");

              class$ = new ::java::lang::Class(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          IndexRearranger::IndexRearranger(const ::org::apache::lucene::store::Directory & a0, const ::org::apache::lucene::store::Directory & a1, const ::org::apache::lucene::index::IndexWriterConfig & a2, const ::java::util::List & a3) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_d36f42a0428d0d5f, a0.this$, a1.this$, a2.this$, a3.this$)) {}

          void IndexRearranger::execute() const
          {
            env->callVoidMethod(this$, mids$[mid_execute_f2cc1bce94666404]);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace misc {
        namespace index {
          static PyObject *t_IndexRearranger_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_IndexRearranger_instance_(PyTypeObject *type, PyObject *arg);
          static int t_IndexRearranger_init_(t_IndexRearranger *self, PyObject *args, PyObject *kwds);
          static PyObject *t_IndexRearranger_execute(t_IndexRearranger *self);

          static PyMethodDef t_IndexRearranger__methods_[] = {
            DECLARE_METHOD(t_IndexRearranger, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_IndexRearranger, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_IndexRearranger, execute, METH_NOARGS),
            { NULL, NULL, 0, NULL }
          };

          static PyType_Slot PY_TYPE_SLOTS(IndexRearranger)[] = {
            { Py_tp_methods, t_IndexRearranger__methods_ },
            { Py_tp_init, (void *) t_IndexRearranger_init_ },
            { 0, NULL }
          };

          static PyType_Def *PY_TYPE_BASES(IndexRearranger)[] = {
            &PY_TYPE_DEF(::java::lang::Object),
            NULL
          };

          DEFINE_TYPE(IndexRearranger, t_IndexRearranger, IndexRearranger);

          void t_IndexRearranger::install(PyObject *module)
          {
            installType(&PY_TYPE(IndexRearranger), &PY_TYPE_DEF(IndexRearranger), module, "IndexRearranger", 0);
            PyObject_SetAttrString((PyObject *) PY_TYPE(IndexRearranger), "DocumentSelector", make_descriptor(&PY_TYPE_DEF(IndexRearranger$DocumentSelector)));
          }

          void t_IndexRearranger::initialize(PyObject *module)
          {
            PyObject_SetAttrString((PyObject *) PY_TYPE(IndexRearranger), "class_", make_descriptor(IndexRearranger::initializeClass, 1));
            PyObject_SetAttrString((PyObject *) PY_TYPE(IndexRearranger), "wrapfn_", make_descriptor(t_IndexRearranger::wrap_jobject));
            PyObject_SetAttrString((PyObject *) PY_TYPE(IndexRearranger), "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_IndexRearranger_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, IndexRearranger::initializeClass, 1)))
              return NULL;
            return t_IndexRearranger::wrap_Object(IndexRearranger(((t_IndexRearranger *) arg)->object.this$));
          }
          static PyObject *t_IndexRearranger_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, IndexRearranger::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_IndexRearranger_init_(t_IndexRearranger *self, PyObject *args, PyObject *kwds)
          {
            ::org::apache::lucene::store::Directory a0((jobject) NULL);
            ::org::apache::lucene::store::Directory a1((jobject) NULL);
            ::org::apache::lucene::index::IndexWriterConfig a2((jobject) NULL);
            ::java::util::List a3((jobject) NULL);
            PyTypeObject **p3;
            IndexRearranger object((jobject) NULL);

            if (!parseArgs(args, "kkkK", ::org::apache::lucene::store::Directory::initializeClass, ::org::apache::lucene::store::Directory::initializeClass, ::org::apache::lucene::index::IndexWriterConfig::initializeClass, ::java::util::List::initializeClass, &a0, &a1, &a2, &a3, &p3, ::java::util::t_List::parameters_))
            {
              INT_CALL(object = IndexRearranger(a0, a1, a2, a3));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_IndexRearranger_execute(t_IndexRearranger *self)
          {
            OBJ_CALL(self->object.execute());
            Py_RETURN_NONE;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/highlight/WeightedTerm.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace highlight {

          ::java::lang::Class *WeightedTerm::class$ = NULL;
          jmethodID *WeightedTerm::mids$ = NULL;
          bool WeightedTerm::live$ = false;

          jclass WeightedTerm::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/search/highlight/WeightedTerm");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_92b8330cd0e4f2a3] = env->getMethodID(cls, "<init>", "(FLjava/lang/String;)V");
              mids$[mid_getTerm_db9b55ba01e03e4b] = env->getMethodID(cls, "getTerm", "()Ljava/lang/String;");
              mids$[mid_getWeight_58aec2b64dff50c8] = env->getMethodID(cls, "getWeight", "()F");
              mids$[mid_setTerm_9fd2eb66a64e6f0f] = env->getMethodID(cls, "setTerm", "(Ljava/lang/String;)V");
              mids$[mid_setWeight_8e1d952dd65cdc3a] = env->getMethodID(cls, "setWeight", "(F)V");

              class$ = new ::java::lang::Class(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          WeightedTerm::WeightedTerm(jfloat a0, const ::java::lang::String & a1) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_92b8330cd0e4f2a3, a0, a1.this$)) {}

          ::java::lang::String WeightedTerm::getTerm() const
          {
            return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_getTerm_db9b55ba01e03e4b]));
          }

          jfloat WeightedTerm::getWeight() const
          {
            return env->callFloatMethod(this$, mids$[mid_getWeight_58aec2b64dff50c8]);
          }

          void WeightedTerm::setTerm(const ::java::lang::String & a0) const
          {
            env->callVoidMethod(this$, mids$[mid_setTerm_9fd2eb66a64e6f0f], a0.this$);
          }

          void WeightedTerm::setWeight(jfloat a0) const
          {
            env->callVoidMethod(this$, mids$[mid_setWeight_8e1d952dd65cdc3a], a0);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace highlight {
          static PyObject *t_WeightedTerm_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_WeightedTerm_instance_(PyTypeObject *type, PyObject *arg);
          static int t_WeightedTerm_init_(t_WeightedTerm *self, PyObject *args, PyObject *kwds);
          static PyObject *t_WeightedTerm_getTerm(t_WeightedTerm *self);
          static PyObject *t_WeightedTerm_getWeight(t_WeightedTerm *self);
          static PyObject *t_WeightedTerm_setTerm(t_WeightedTerm *self, PyObject *arg);
          static PyObject *t_WeightedTerm_setWeight(t_WeightedTerm *self, PyObject *arg);
          static PyObject *t_WeightedTerm_get__term(t_WeightedTerm *self, void *data);
          static int t_WeightedTerm_set__term(t_WeightedTerm *self, PyObject *arg, void *data);
          static PyObject *t_WeightedTerm_get__weight(t_WeightedTerm *self, void *data);
          static int t_WeightedTerm_set__weight(t_WeightedTerm *self, PyObject *arg, void *data);
          static PyGetSetDef t_WeightedTerm__fields_[] = {
            DECLARE_GETSET_FIELD(t_WeightedTerm, term),
            DECLARE_GETSET_FIELD(t_WeightedTerm, weight),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_WeightedTerm__methods_[] = {
            DECLARE_METHOD(t_WeightedTerm, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_WeightedTerm, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_WeightedTerm, getTerm, METH_NOARGS),
            DECLARE_METHOD(t_WeightedTerm, getWeight, METH_NOARGS),
            DECLARE_METHOD(t_WeightedTerm, setTerm, METH_O),
            DECLARE_METHOD(t_WeightedTerm, setWeight, METH_O),
            { NULL, NULL, 0, NULL }
          };

          static PyType_Slot PY_TYPE_SLOTS(WeightedTerm)[] = {
            { Py_tp_methods, t_WeightedTerm__methods_ },
            { Py_tp_init, (void *) t_WeightedTerm_init_ },
            { Py_tp_getset, t_WeightedTerm__fields_ },
            { 0, NULL }
          };

          static PyType_Def *PY_TYPE_BASES(WeightedTerm)[] = {
            &PY_TYPE_DEF(::java::lang::Object),
            NULL
          };

          DEFINE_TYPE(WeightedTerm, t_WeightedTerm, WeightedTerm);

          void t_WeightedTerm::install(PyObject *module)
          {
            installType(&PY_TYPE(WeightedTerm), &PY_TYPE_DEF(WeightedTerm), module, "WeightedTerm", 0);
          }

          void t_WeightedTerm::initialize(PyObject *module)
          {
            PyObject_SetAttrString((PyObject *) PY_TYPE(WeightedTerm), "class_", make_descriptor(WeightedTerm::initializeClass, 1));
            PyObject_SetAttrString((PyObject *) PY_TYPE(WeightedTerm), "wrapfn_", make_descriptor(t_WeightedTerm::wrap_jobject));
            PyObject_SetAttrString((PyObject *) PY_TYPE(WeightedTerm), "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_WeightedTerm_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, WeightedTerm::initializeClass, 1)))
              return NULL;
            return t_WeightedTerm::wrap_Object(WeightedTerm(((t_WeightedTerm *) arg)->object.this$));
          }
          static PyObject *t_WeightedTerm_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, WeightedTerm::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_WeightedTerm_init_(t_WeightedTerm *self, PyObject *args, PyObject *kwds)
          {
            jfloat a0;
            ::java::lang::String a1((jobject) NULL);
            WeightedTerm object((jobject) NULL);

            if (!parseArgs(args, "Fs", &a0, &a1))
            {
              INT_CALL(object = WeightedTerm(a0, a1));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_WeightedTerm_getTerm(t_WeightedTerm *self)
          {
            ::java::lang::String result((jobject) NULL);
            OBJ_CALL(result = self->object.getTerm());
            return j2p(result);
          }

          static PyObject *t_WeightedTerm_getWeight(t_WeightedTerm *self)
          {
            jfloat result;
            OBJ_CALL(result = self->object.getWeight());
            return PyFloat_FromDouble((double) result);
          }

          static PyObject *t_WeightedTerm_setTerm(t_WeightedTerm *self, PyObject *arg)
          {
            ::java::lang::String a0((jobject) NULL);

            if (!parseArg(arg, "s", &a0))
            {
              OBJ_CALL(self->object.setTerm(a0));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError((PyObject *) self, "setTerm", arg);
            return NULL;
          }

          static PyObject *t_WeightedTerm_setWeight(t_WeightedTerm *self, PyObject *arg)
          {
            jfloat a0;

            if (!parseArg(arg, "F", &a0))
            {
              OBJ_CALL(self->object.setWeight(a0));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError((PyObject *) self, "setWeight", arg);
            return NULL;
          }

          static PyObject *t_WeightedTerm_get__term(t_WeightedTerm *self, void *data)
          {
            ::java::lang::String value((jobject) NULL);
            OBJ_CALL(value = self->object.getTerm());
            return j2p(value);
          }
          static int t_WeightedTerm_set__term(t_WeightedTerm *self, PyObject *arg, void *data)
          {
            {
              ::java::lang::String value((jobject) NULL);
              if (!parseArg(arg, "s", &value))
              {
                INT_CALL(self->object.setTerm(value));
                return 0;
              }
            }
            PyErr_SetArgsError((PyObject *) self, "term", arg);
            return -1;
          }

          static PyObject *t_WeightedTerm_get__weight(t_WeightedTerm *self, void *data)
          {
            jfloat value;
            OBJ_CALL(value = self->object.getWeight());
            return PyFloat_FromDouble((double) value);
          }
          static int t_WeightedTerm_set__weight(t_WeightedTerm *self, PyObject *arg, void *data)
          {
            {
              jfloat value;
              if (!parseArg(arg, "F", &value))
              {
                INT_CALL(self->object.setWeight(value));
                return 0;
              }
            }
            PyErr_SetArgsError((PyObject *) self, "weight", arg);
            return -1;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/store/MMapDirectory.h"
#include "org/apache/lucene/store/IOContext.h"
#include "org/apache/lucene/store/IndexInput.h"
#include "java/lang/Class.h"
#include "java/lang/String.h"
#include "java/io/IOException.h"
#include "java/nio/file/Path.h"
#include "org/apache/lucene/store/LockFactory.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace store {

        ::java::lang::Class *MMapDirectory::class$ = NULL;
        jmethodID *MMapDirectory::mids$ = NULL;
        bool MMapDirectory::live$ = false;
        jint MMapDirectory::DEFAULT_MAX_CHUNK_SIZE = (jint) 0;
        ::java::lang::String *MMapDirectory::UNMAP_NOT_SUPPORTED_REASON = NULL;
        jboolean MMapDirectory::UNMAP_SUPPORTED = (jboolean) 0;

        jclass MMapDirectory::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/store/MMapDirectory");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_636077fee54d306c] = env->getMethodID(cls, "<init>", "(Ljava/nio/file/Path;)V");
            mids$[mid_init$_71c9ab2266463084] = env->getMethodID(cls, "<init>", "(Ljava/nio/file/Path;Lorg/apache/lucene/store/LockFactory;)V");
            mids$[mid_init$_1307b7f570696af0] = env->getMethodID(cls, "<init>", "(Ljava/nio/file/Path;I)V");
            mids$[mid_init$_82ba2369f6784dd8] = env->getMethodID(cls, "<init>", "(Ljava/nio/file/Path;Lorg/apache/lucene/store/LockFactory;I)V");
            mids$[mid_getMaxChunkSize_9972fcc56b44e79d] = env->getMethodID(cls, "getMaxChunkSize", "()I");
            mids$[mid_getPreload_8454bd5aa23fd11e] = env->getMethodID(cls, "getPreload", "()Z");
            mids$[mid_getUseUnmap_8454bd5aa23fd11e] = env->getMethodID(cls, "getUseUnmap", "()Z");
            mids$[mid_openInput_cc9a9aabe8db93df] = env->getMethodID(cls, "openInput", "(Ljava/lang/String;Lorg/apache/lucene/store/IOContext;)Lorg/apache/lucene/store/IndexInput;");
            mids$[mid_setPreload_9d72768e8fdce2b7] = env->getMethodID(cls, "setPreload", "(Z)V");
            mids$[mid_setUseUnmap_9d72768e8fdce2b7] = env->getMethodID(cls, "setUseUnmap", "(Z)V");

            class$ = new ::java::lang::Class(cls);
            cls = (jclass) class$->this$;

            DEFAULT_MAX_CHUNK_SIZE = env->getStaticIntField(cls, "DEFAULT_MAX_CHUNK_SIZE");
            UNMAP_NOT_SUPPORTED_REASON = new ::java::lang::String(env->getStaticObjectField(cls, "UNMAP_NOT_SUPPORTED_REASON", "Ljava/lang/String;"));
            UNMAP_SUPPORTED = env->getStaticBooleanField(cls, "UNMAP_SUPPORTED");
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        MMapDirectory::MMapDirectory(const ::java::nio::file::Path & a0) : ::org::apache::lucene::store::FSDirectory(env->newObject(initializeClass, &mids$, mid_init$_636077fee54d306c, a0.this$)) {}

        MMapDirectory::MMapDirectory(const ::java::nio::file::Path & a0, const ::org::apache::lucene::store::LockFactory & a1) : ::org::apache::lucene::store::FSDirectory(env->newObject(initializeClass, &mids$, mid_init$_71c9ab2266463084, a0.this$, a1.this$)) {}

        MMapDirectory::MMapDirectory(const ::java::nio::file::Path & a0, jint a1) : ::org::apache::lucene::store::FSDirectory(env->newObject(initializeClass, &mids$, mid_init$_1307b7f570696af0, a0.this$, a1)) {}

        MMapDirectory::MMapDirectory(const ::java::nio::file::Path & a0, const ::org::apache::lucene::store::LockFactory & a1, jint a2) : ::org::apache::lucene::store::FSDirectory(env->newObject(initializeClass, &mids$, mid_init$_82ba2369f6784dd8, a0.this$, a1.this$, a2)) {}

        jint MMapDirectory::getMaxChunkSize() const
        {
          return env->callIntMethod(this$, mids$[mid_getMaxChunkSize_9972fcc56b44e79d]);
        }

        jboolean MMapDirectory::getPreload() const
        {
          return env->callBooleanMethod(this$, mids$[mid_getPreload_8454bd5aa23fd11e]);
        }

        jboolean MMapDirectory::getUseUnmap() const
        {
          return env->callBooleanMethod(this$, mids$[mid_getUseUnmap_8454bd5aa23fd11e]);
        }

        ::org::apache::lucene::store::IndexInput MMapDirectory::openInput(const ::java::lang::String & a0, const ::org::apache::lucene::store::IOContext & a1) const
        {
          return ::org::apache::lucene::store::IndexInput(env->callObjectMethod(this$, mids$[mid_openInput_cc9a9aabe8db93df], a0.this$, a1.this$));
        }

        void MMapDirectory::setPreload(jboolean a0) const
        {
          env->callVoidMethod(this$, mids$[mid_setPreload_9d72768e8fdce2b7], a0);
        }

        void MMapDirectory::setUseUnmap(jboolean a0) const
        {
          env->callVoidMethod(this$, mids$[mid_setUseUnmap_9d72768e8fdce2b7], a0);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace store {
        static PyObject *t_MMapDirectory_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_MMapDirectory_instance_(PyTypeObject *type, PyObject *arg);
        static int t_MMapDirectory_init_(t_MMapDirectory *self, PyObject *args, PyObject *kwds);
        static PyObject *t_MMapDirectory_getMaxChunkSize(t_MMapDirectory *self);
        static PyObject *t_MMapDirectory_getPreload(t_MMapDirectory *self);
        static PyObject *t_MMapDirectory_getUseUnmap(t_MMapDirectory *self);
        static PyObject *t_MMapDirectory_openInput(t_MMapDirectory *self, PyObject *args);
        static PyObject *t_MMapDirectory_setPreload(t_MMapDirectory *self, PyObject *arg);
        static PyObject *t_MMapDirectory_setUseUnmap(t_MMapDirectory *self, PyObject *arg);
        static PyObject *t_MMapDirectory_get__maxChunkSize(t_MMapDirectory *self, void *data);
        static PyObject *t_MMapDirectory_get__preload(t_MMapDirectory *self, void *data);
        static int t_MMapDirectory_set__preload(t_MMapDirectory *self, PyObject *arg, void *data);
        static PyObject *t_MMapDirectory_get__useUnmap(t_MMapDirectory *self, void *data);
        static int t_MMapDirectory_set__useUnmap(t_MMapDirectory *self, PyObject *arg, void *data);
        static PyGetSetDef t_MMapDirectory__fields_[] = {
          DECLARE_GET_FIELD(t_MMapDirectory, maxChunkSize),
          DECLARE_GETSET_FIELD(t_MMapDirectory, preload),
          DECLARE_GETSET_FIELD(t_MMapDirectory, useUnmap),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_MMapDirectory__methods_[] = {
          DECLARE_METHOD(t_MMapDirectory, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_MMapDirectory, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_MMapDirectory, getMaxChunkSize, METH_NOARGS),
          DECLARE_METHOD(t_MMapDirectory, getPreload, METH_NOARGS),
          DECLARE_METHOD(t_MMapDirectory, getUseUnmap, METH_NOARGS),
          DECLARE_METHOD(t_MMapDirectory, openInput, METH_VARARGS),
          DECLARE_METHOD(t_MMapDirectory, setPreload, METH_O),
          DECLARE_METHOD(t_MMapDirectory, setUseUnmap, METH_O),
          { NULL, NULL, 0, NULL }
        };

        static PyType_Slot PY_TYPE_SLOTS(MMapDirectory)[] = {
          { Py_tp_methods, t_MMapDirectory__methods_ },
          { Py_tp_init, (void *) t_MMapDirectory_init_ },
          { Py_tp_getset, t_MMapDirectory__fields_ },
          { 0, NULL }
        };

        static PyType_Def *PY_TYPE_BASES(MMapDirectory)[] = {
          &PY_TYPE_DEF(::org::apache::lucene::store::FSDirectory),
          NULL
        };

        DEFINE_TYPE(MMapDirectory, t_MMapDirectory, MMapDirectory);

        void t_MMapDirectory::install(PyObject *module)
        {
          installType(&PY_TYPE(MMapDirectory), &PY_TYPE_DEF(MMapDirectory), module, "MMapDirectory", 0);
        }

        void t_MMapDirectory::initialize(PyObject *module)
        {
          PyObject_SetAttrString((PyObject *) PY_TYPE(MMapDirectory), "class_", make_descriptor(MMapDirectory::initializeClass, 1));
          PyObject_SetAttrString((PyObject *) PY_TYPE(MMapDirectory), "wrapfn_", make_descriptor(t_MMapDirectory::wrap_jobject));
          PyObject_SetAttrString((PyObject *) PY_TYPE(MMapDirectory), "boxfn_", make_descriptor(boxObject));
          env->getClass(MMapDirectory::initializeClass);
          PyObject_SetAttrString((PyObject *) PY_TYPE(MMapDirectory), "DEFAULT_MAX_CHUNK_SIZE", make_descriptor(MMapDirectory::DEFAULT_MAX_CHUNK_SIZE));
          PyObject_SetAttrString((PyObject *) PY_TYPE(MMapDirectory), "UNMAP_NOT_SUPPORTED_REASON", make_descriptor(j2p(*MMapDirectory::UNMAP_NOT_SUPPORTED_REASON)));
          PyObject_SetAttrString((PyObject *) PY_TYPE(MMapDirectory), "UNMAP_SUPPORTED", make_descriptor(MMapDirectory::UNMAP_SUPPORTED));
        }

        static PyObject *t_MMapDirectory_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, MMapDirectory::initializeClass, 1)))
            return NULL;
          return t_MMapDirectory::wrap_Object(MMapDirectory(((t_MMapDirectory *) arg)->object.this$));
        }
        static PyObject *t_MMapDirectory_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, MMapDirectory::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_MMapDirectory_init_(t_MMapDirectory *self, PyObject *args, PyObject *kwds)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 1:
            {
              ::java::nio::file::Path a0((jobject) NULL);
              MMapDirectory object((jobject) NULL);

              if (!parseArgs(args, "k", ::java::nio::file::Path::initializeClass, &a0))
              {
                INT_CALL(object = MMapDirectory(a0));
                self->object = object;
                break;
              }
            }
            goto err;
           case 2:
            {
              ::java::nio::file::Path a0((jobject) NULL);
              ::org::apache::lucene::store::LockFactory a1((jobject) NULL);
              MMapDirectory object((jobject) NULL);

              if (!parseArgs(args, "kk", ::java::nio::file::Path::initializeClass, ::org::apache::lucene::store::LockFactory::initializeClass, &a0, &a1))
              {
                INT_CALL(object = MMapDirectory(a0, a1));
                self->object = object;
                break;
              }
            }
            {
              ::java::nio::file::Path a0((jobject) NULL);
              jint a1;
              MMapDirectory object((jobject) NULL);

              if (!parseArgs(args, "kI", ::java::nio::file::Path::initializeClass, &a0, &a1))
              {
                INT_CALL(object = MMapDirectory(a0, a1));
                self->object = object;
                break;
              }
            }
            goto err;
           case 3:
            {
              ::java::nio::file::Path a0((jobject) NULL);
              ::org::apache::lucene::store::LockFactory a1((jobject) NULL);
              jint a2;
              MMapDirectory object((jobject) NULL);

              if (!parseArgs(args, "kkI", ::java::nio::file::Path::initializeClass, ::org::apache::lucene::store::LockFactory::initializeClass, &a0, &a1, &a2))
              {
                INT_CALL(object = MMapDirectory(a0, a1, a2));
                self->object = object;
                break;
              }
            }
           default:
           err:
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }

        static PyObject *t_MMapDirectory_getMaxChunkSize(t_MMapDirectory *self)
        {
          jint result;
          OBJ_CALL(result = self->object.getMaxChunkSize());
          return PyLong_FromLong((long) result);
        }

        static PyObject *t_MMapDirectory_getPreload(t_MMapDirectory *self)
        {
          jboolean result;
          OBJ_CALL(result = self->object.getPreload());
          Py_RETURN_BOOL(result);
        }

        static PyObject *t_MMapDirectory_getUseUnmap(t_MMapDirectory *self)
        {
          jboolean result;
          OBJ_CALL(result = self->object.getUseUnmap());
          Py_RETURN_BOOL(result);
        }

        static PyObject *t_MMapDirectory_openInput(t_MMapDirectory *self, PyObject *args)
        {
          ::java::lang::String a0((jobject) NULL);
          ::org::apache::lucene::store::IOContext a1((jobject) NULL);
          ::org::apache::lucene::store::IndexInput result((jobject) NULL);

          if (!parseArgs(args, "sk", ::org::apache::lucene::store::IOContext::initializeClass, &a0, &a1))
          {
            OBJ_CALL(result = self->object.openInput(a0, a1));
            return ::org::apache::lucene::store::t_IndexInput::wrap_Object(result);
          }

          return callSuper(PY_TYPE(MMapDirectory), (PyObject *) self, "openInput", args, 2);
        }

        static PyObject *t_MMapDirectory_setPreload(t_MMapDirectory *self, PyObject *arg)
        {
          jboolean a0;

          if (!parseArg(arg, "Z", &a0))
          {
            OBJ_CALL(self->object.setPreload(a0));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "setPreload", arg);
          return NULL;
        }

        static PyObject *t_MMapDirectory_setUseUnmap(t_MMapDirectory *self, PyObject *arg)
        {
          jboolean a0;

          if (!parseArg(arg, "Z", &a0))
          {
            OBJ_CALL(self->object.setUseUnmap(a0));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "setUseUnmap", arg);
          return NULL;
        }

        static PyObject *t_MMapDirectory_get__maxChunkSize(t_MMapDirectory *self, void *data)
        {
          jint value;
          OBJ_CALL(value = self->object.getMaxChunkSize());
          return PyLong_FromLong((long) value);
        }

        static PyObject *t_MMapDirectory_get__preload(t_MMapDirectory *self, void *data)
        {
          jboolean value;
          OBJ_CALL(value = self->object.getPreload());
          Py_RETURN_BOOL(value);
        }
        static int t_MMapDirectory_set__preload(t_MMapDirectory *self, PyObject *arg, void *data)
        {
          {
            jboolean value;
            if (!parseArg(arg, "Z", &value))
            {
              INT_CALL(self->object.setPreload(value));
              return 0;
            }
          }
          PyErr_SetArgsError((PyObject *) self, "preload", arg);
          return -1;
        }

        static PyObject *t_MMapDirectory_get__useUnmap(t_MMapDirectory *self, void *data)
        {
          jboolean value;
          OBJ_CALL(value = self->object.getUseUnmap());
          Py_RETURN_BOOL(value);
        }
        static int t_MMapDirectory_set__useUnmap(t_MMapDirectory *self, PyObject *arg, void *data)
        {
          {
            jboolean value;
            if (!parseArg(arg, "Z", &value))
            {
              INT_CALL(self->object.setUseUnmap(value));
              return 0;
            }
          }
          PyErr_SetArgsError((PyObject *) self, "useUnmap", arg);
          return -1;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/util/IntsRef.h"
#include "org/apache/lucene/util/IntsRef.h"
#include "java/lang/Cloneable.h"
#include "java/lang/Comparable.h"
#include "java/lang/Class.h"
#include "java/lang/String.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {

        ::java::lang::Class *IntsRef::class$ = NULL;
        jmethodID *IntsRef::mids$ = NULL;
        jfieldID *IntsRef::fids$ = NULL;
        bool IntsRef::live$ = false;
        JArray< jint > *IntsRef::EMPTY_INTS = NULL;

        jclass IntsRef::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/util/IntsRef");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_f2cc1bce94666404] = env->getMethodID(cls, "<init>", "()V");
            mids$[mid_init$_040c4cd0390c5aff] = env->getMethodID(cls, "<init>", "(I)V");
            mids$[mid_init$_11b52125bd016996] = env->getMethodID(cls, "<init>", "([III)V");
            mids$[mid_clone_ce9cdfb58d7a482b] = env->getMethodID(cls, "clone", "()Lorg/apache/lucene/util/IntsRef;");
            mids$[mid_compareTo_6660dc6cf0456da4] = env->getMethodID(cls, "compareTo", "(Lorg/apache/lucene/util/IntsRef;)I");
            mids$[mid_deepCopyOf_1d6fd6a81b8a209a] = env->getStaticMethodID(cls, "deepCopyOf", "(Lorg/apache/lucene/util/IntsRef;)Lorg/apache/lucene/util/IntsRef;");
            mids$[mid_equals_8b72f2dcdde6fd1d] = env->getMethodID(cls, "equals", "(Ljava/lang/Object;)Z");
            mids$[mid_hashCode_9972fcc56b44e79d] = env->getMethodID(cls, "hashCode", "()I");
            mids$[mid_intsEquals_2d12a172822a1ea0] = env->getMethodID(cls, "intsEquals", "(Lorg/apache/lucene/util/IntsRef;)Z");
            mids$[mid_isValid_8454bd5aa23fd11e] = env->getMethodID(cls, "isValid", "()Z");
            mids$[mid_toString_db9b55ba01e03e4b] = env->getMethodID(cls, "toString", "()Ljava/lang/String;");

            fids$ = new jfieldID[max_fid];
            fids$[fid_ints] = env->getFieldID(cls, "ints", "[I");
            fids$[fid_length] = env->getFieldID(cls, "length", "I");
            fids$[fid_offset] = env->getFieldID(cls, "offset", "I");

            class$ = new ::java::lang::Class(cls);
            cls = (jclass) class$->this$;

            EMPTY_INTS = new JArray< jint >(env->getStaticObjectField(cls, "EMPTY_INTS", "[I"));
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        IntsRef::IntsRef() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_f2cc1bce94666404)) {}

        IntsRef::IntsRef(jint a0) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_040c4cd0390c5aff, a0)) {}

        IntsRef::IntsRef(const JArray< jint > & a0, jint a1, jint a2) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_11b52125bd016996, a0.this$, a1, a2)) {}

        IntsRef IntsRef::clone() const
        {
          return IntsRef(env->callObjectMethod(this$, mids$[mid_clone_ce9cdfb58d7a482b]));
        }

        jint IntsRef::compareTo(const IntsRef & a0) const
        {
          return env->callIntMethod(this$, mids$[mid_compareTo_6660dc6cf0456da4], a0.this$);
        }

        IntsRef IntsRef::deepCopyOf(const IntsRef & a0)
        {
          jclass cls = env->getClass(initializeClass);
          return IntsRef(env->callStaticObjectMethod(cls, mids$[mid_deepCopyOf_1d6fd6a81b8a209a], a0.this$));
        }

        jboolean IntsRef::equals(const ::java::lang::Object & a0) const
        {
          return env->callBooleanMethod(this$, mids$[mid_equals_8b72f2dcdde6fd1d], a0.this$);
        }

        jint IntsRef::hashCode() const
        {
          return env->callIntMethod(this$, mids$[mid_hashCode_9972fcc56b44e79d]);
        }

        jboolean IntsRef::intsEquals(const IntsRef & a0) const
        {
          return env->callBooleanMethod(this$, mids$[mid_intsEquals_2d12a172822a1ea0], a0.this$);
        }

        jboolean IntsRef::isValid() const
        {
          return env->callBooleanMethod(this$, mids$[mid_isValid_8454bd5aa23fd11e]);
        }

        ::java::lang::String IntsRef::toString() const
        {
          return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_db9b55ba01e03e4b]));
        }

        JArray< jint > IntsRef::_get_ints() const
        {
          return JArray< jint >(env->getObjectField(this$, fids$[fid_ints]));
        }

        void IntsRef::_set_ints(const JArray< jint > & a0) const
        {
          env->setObjectField(this$, fids$[fid_ints], a0.this$);
        }

        jint IntsRef::_get_length() const
        {
          return env->getIntField(this$, fids$[fid_length]);
        }

        void IntsRef::_set_length(jint a0) const
        {
          env->setIntField(this$, fids$[fid_length], a0);
        }

        jint IntsRef::_get_offset() const
        {
          return env->getIntField(this$, fids$[fid_offset]);
        }

        void IntsRef::_set_offset(jint a0) const
        {
          env->setIntField(this$, fids$[fid_offset], a0);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        static PyObject *t_IntsRef_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_IntsRef_instance_(PyTypeObject *type, PyObject *arg);
        static int t_IntsRef_init_(t_IntsRef *self, PyObject *args, PyObject *kwds);
        static PyObject *t_IntsRef_clone(t_IntsRef *self);
        static PyObject *t_IntsRef_compareTo(t_IntsRef *self, PyObject *arg);
        static PyObject *t_IntsRef_deepCopyOf(PyTypeObject *type, PyObject *arg);
        static PyObject *t_IntsRef_equals(t_IntsRef *self, PyObject *args);
        static PyObject *t_IntsRef_hashCode(t_IntsRef *self, PyObject *args);
        static PyObject *t_IntsRef_intsEquals(t_IntsRef *self, PyObject *arg);
        static PyObject *t_IntsRef_isValid(t_IntsRef *self);
        static PyObject *t_IntsRef_toString(t_IntsRef *self, PyObject *args);
        static PyObject *t_IntsRef_get__ints(t_IntsRef *self, void *data);
        static int t_IntsRef_set__ints(t_IntsRef *self, PyObject *arg, void *data);
        static PyObject *t_IntsRef_get__length(t_IntsRef *self, void *data);
        static int t_IntsRef_set__length(t_IntsRef *self, PyObject *arg, void *data);
        static PyObject *t_IntsRef_get__offset(t_IntsRef *self, void *data);
        static int t_IntsRef_set__offset(t_IntsRef *self, PyObject *arg, void *data);

        static PyObject *t_IntsRef_get__valid(t_IntsRef *self, void *data);
        static PyGetSetDef t_IntsRef__fields_[] = {
          DECLARE_GETSET_FIELD(t_IntsRef, ints),
          DECLARE_GETSET_FIELD(t_IntsRef, length),
          DECLARE_GETSET_FIELD(t_IntsRef, offset),
          DECLARE_GET_FIELD(t_IntsRef, valid),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_IntsRef__methods_[] = {
          DECLARE_METHOD(t_IntsRef, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_IntsRef, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_IntsRef, clone, METH_NOARGS),
          DECLARE_METHOD(t_IntsRef, compareTo, METH_O),
          DECLARE_METHOD(t_IntsRef, deepCopyOf, METH_O | METH_CLASS),
          DECLARE_METHOD(t_IntsRef, equals, METH_VARARGS),
          DECLARE_METHOD(t_IntsRef, hashCode, METH_VARARGS),
          DECLARE_METHOD(t_IntsRef, intsEquals, METH_O),
          DECLARE_METHOD(t_IntsRef, isValid, METH_NOARGS),
          DECLARE_METHOD(t_IntsRef, toString, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        static PyType_Slot PY_TYPE_SLOTS(IntsRef)[] = {
          { Py_tp_methods, t_IntsRef__methods_ },
          { Py_tp_init, (void *) t_IntsRef_init_ },
          { Py_tp_getset, t_IntsRef__fields_ },
          { 0, NULL }
        };

        static PyType_Def *PY_TYPE_BASES(IntsRef)[] = {
          &PY_TYPE_DEF(::java::lang::Object),
          NULL
        };

        DEFINE_TYPE(IntsRef, t_IntsRef, IntsRef);

        void t_IntsRef::install(PyObject *module)
        {
          installType(&PY_TYPE(IntsRef), &PY_TYPE_DEF(IntsRef), module, "IntsRef", 0);
        }

        void t_IntsRef::initialize(PyObject *module)
        {
          PyObject_SetAttrString((PyObject *) PY_TYPE(IntsRef), "class_", make_descriptor(IntsRef::initializeClass, 1));
          PyObject_SetAttrString((PyObject *) PY_TYPE(IntsRef), "wrapfn_", make_descriptor(t_IntsRef::wrap_jobject));
          PyObject_SetAttrString((PyObject *) PY_TYPE(IntsRef), "boxfn_", make_descriptor(boxObject));
          env->getClass(IntsRef::initializeClass);
          PyObject_SetAttrString((PyObject *) PY_TYPE(IntsRef), "EMPTY_INTS", make_descriptor(IntsRef::EMPTY_INTS->wrap()));
        }

        static PyObject *t_IntsRef_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, IntsRef::initializeClass, 1)))
            return NULL;
          return t_IntsRef::wrap_Object(IntsRef(((t_IntsRef *) arg)->object.this$));
        }
        static PyObject *t_IntsRef_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, IntsRef::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_IntsRef_init_(t_IntsRef *self, PyObject *args, PyObject *kwds)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 0:
            {
              IntsRef object((jobject) NULL);

              INT_CALL(object = IntsRef());
              self->object = object;
              break;
            }
           case 1:
            {
              jint a0;
              IntsRef object((jobject) NULL);

              if (!parseArgs(args, "I", &a0))
              {
                INT_CALL(object = IntsRef(a0));
                self->object = object;
                break;
              }
            }
            goto err;
           case 3:
            {
              JArray< jint > a0((jobject) NULL);
              jint a1;
              jint a2;
              IntsRef object((jobject) NULL);

              if (!parseArgs(args, "[III", &a0, &a1, &a2))
              {
                INT_CALL(object = IntsRef(a0, a1, a2));
                self->object = object;
                break;
              }
            }
           default:
           err:
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }

        static PyObject *t_IntsRef_clone(t_IntsRef *self)
        {
          IntsRef result((jobject) NULL);
          OBJ_CALL(result = self->object.clone());
          return t_IntsRef::wrap_Object(result);
        }

        static PyObject *t_IntsRef_compareTo(t_IntsRef *self, PyObject *arg)
        {
          IntsRef a0((jobject) NULL);
          jint result;

          if (!parseArg(arg, "k", IntsRef::initializeClass, &a0))
          {
            OBJ_CALL(result = self->object.compareTo(a0));
            return PyLong_FromLong((long) result);
          }

          PyErr_SetArgsError((PyObject *) self, "compareTo", arg);
          return NULL;
        }

        static PyObject *t_IntsRef_deepCopyOf(PyTypeObject *type, PyObject *arg)
        {
          IntsRef a0((jobject) NULL);
          IntsRef result((jobject) NULL);

          if (!parseArg(arg, "k", IntsRef::initializeClass, &a0))
          {
            OBJ_CALL(result = ::org::apache::lucene::util::IntsRef::deepCopyOf(a0));
            return t_IntsRef::wrap_Object(result);
          }

          PyErr_SetArgsError(type, "deepCopyOf", arg);
          return NULL;
        }

        static PyObject *t_IntsRef_equals(t_IntsRef *self, PyObject *args)
        {
          ::java::lang::Object a0((jobject) NULL);
          jboolean result;

          if (!parseArgs(args, "o", &a0))
          {
            OBJ_CALL(result = self->object.equals(a0));
            Py_RETURN_BOOL(result);
          }

          return callSuper(PY_TYPE(IntsRef), (PyObject *) self, "equals", args, 2);
        }

        static PyObject *t_IntsRef_hashCode(t_IntsRef *self, PyObject *args)
        {
          jint result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.hashCode());
            return PyLong_FromLong((long) result);
          }

          return callSuper(PY_TYPE(IntsRef), (PyObject *) self, "hashCode", args, 2);
        }

        static PyObject *t_IntsRef_intsEquals(t_IntsRef *self, PyObject *arg)
        {
          IntsRef a0((jobject) NULL);
          jboolean result;

          if (!parseArg(arg, "k", IntsRef::initializeClass, &a0))
          {
            OBJ_CALL(result = self->object.intsEquals(a0));
            Py_RETURN_BOOL(result);
          }

          PyErr_SetArgsError((PyObject *) self, "intsEquals", arg);
          return NULL;
        }

        static PyObject *t_IntsRef_isValid(t_IntsRef *self)
        {
          jboolean result;
          OBJ_CALL(result = self->object.isValid());
          Py_RETURN_BOOL(result);
        }

        static PyObject *t_IntsRef_toString(t_IntsRef *self, PyObject *args)
        {
          ::java::lang::String result((jobject) NULL);

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.toString());
            return j2p(result);
          }

          return callSuper(PY_TYPE(IntsRef), (PyObject *) self, "toString", args, 2);
        }

        static PyObject *t_IntsRef_get__ints(t_IntsRef *self, void *data)
        {
          JArray< jint > value((jobject) NULL);
          OBJ_CALL(value = self->object._get_ints());
          return value.wrap();
        }
        static int t_IntsRef_set__ints(t_IntsRef *self, PyObject *arg, void *data)
        {
          JArray< jint > value((jobject) NULL);
          if (!parseArg(arg, "[I", &value))
          {
            INT_CALL(self->object._set_ints(value));
            return 0;
          }
          PyErr_SetArgsError((PyObject *) self, "ints", arg);
          return -1;
        }

        static PyObject *t_IntsRef_get__length(t_IntsRef *self, void *data)
        {
          jint value;
          OBJ_CALL(value = self->object._get_length());
          return PyLong_FromLong((long) value);
        }
        static int t_IntsRef_set__length(t_IntsRef *self, PyObject *arg, void *data)
        {
          jint value;
          if (!parseArg(arg, "I", &value))
          {
            INT_CALL(self->object._set_length(value));
            return 0;
          }
          PyErr_SetArgsError((PyObject *) self, "length", arg);
          return -1;
        }

        static PyObject *t_IntsRef_get__offset(t_IntsRef *self, void *data)
        {
          jint value;
          OBJ_CALL(value = self->object._get_offset());
          return PyLong_FromLong((long) value);
        }
        static int t_IntsRef_set__offset(t_IntsRef *self, PyObject *arg, void *data)
        {
          jint value;
          if (!parseArg(arg, "I", &value))
          {
            INT_CALL(self->object._set_offset(value));
            return 0;
          }
          PyErr_SetArgsError((PyObject *) self, "offset", arg);
          return -1;
        }

        static PyObject *t_IntsRef_get__valid(t_IntsRef *self, void *data)
        {
          jboolean value;
          OBJ_CALL(value = self->object.isValid());
          Py_RETURN_BOOL(value);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/index/MultiBits.h"
#include "org/apache/lucene/util/Bits.h"
#include "org/apache/lucene/index/IndexReader.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {

        ::java::lang::Class *MultiBits::class$ = NULL;
        jmethodID *MultiBits::mids$ = NULL;
        bool MultiBits::live$ = false;

        jclass MultiBits::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/index/MultiBits");

            mids$ = new jmethodID[max_mid];
            mids$[mid_get_a1d30e1ee40c89a2] = env->getMethodID(cls, "get", "(I)Z");
            mids$[mid_getLiveDocs_9c861d8363e9bed5] = env->getStaticMethodID(cls, "getLiveDocs", "(Lorg/apache/lucene/index/IndexReader;)Lorg/apache/lucene/util/Bits;");
            mids$[mid_length_9972fcc56b44e79d] = env->getMethodID(cls, "length", "()I");
            mids$[mid_toString_db9b55ba01e03e4b] = env->getMethodID(cls, "toString", "()Ljava/lang/String;");

            class$ = new ::java::lang::Class(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        jboolean MultiBits::get(jint a0) const
        {
          return env->callBooleanMethod(this$, mids$[mid_get_a1d30e1ee40c89a2], a0);
        }

        ::org::apache::lucene::util::Bits MultiBits::getLiveDocs(const ::org::apache::lucene::index::IndexReader & a0)
        {
          jclass cls = env->getClass(initializeClass);
          return ::org::apache::lucene::util::Bits(env->callStaticObjectMethod(cls, mids$[mid_getLiveDocs_9c861d8363e9bed5], a0.this$));
        }

        jint MultiBits::length() const
        {
          return env->callIntMethod(this$, mids$[mid_length_9972fcc56b44e79d]);
        }

        ::java::lang::String MultiBits::toString() const
        {
          return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_db9b55ba01e03e4b]));
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {
        static PyObject *t_MultiBits_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_MultiBits_instance_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_MultiBits_get(t_MultiBits *self, PyObject *arg);
        static PyObject *t_MultiBits_getLiveDocs(PyTypeObject *type, PyObject *arg);
        static PyObject *t_MultiBits_length(t_MultiBits *self);
        static PyObject *t_MultiBits_toString(t_MultiBits *self, PyObject *args);

        static PyMethodDef t_MultiBits__methods_[] = {
          DECLARE_METHOD(t_MultiBits, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_MultiBits, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_MultiBits, get, METH_O),
          DECLARE_METHOD(t_MultiBits, getLiveDocs, METH_O | METH_CLASS),
          DECLARE_METHOD(t_MultiBits, length, METH_NOARGS),
          DECLARE_METHOD(t_MultiBits, toString, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        static PyType_Slot PY_TYPE_SLOTS(MultiBits)[] = {
          { Py_tp_methods, t_MultiBits__methods_ },
          { Py_tp_init, (void *) abstract_init },
          { 0, NULL }
        };

        static PyType_Def *PY_TYPE_BASES(MultiBits)[] = {
          &PY_TYPE_DEF(::java::lang::Object),
          NULL
        };

        DEFINE_TYPE(MultiBits, t_MultiBits, MultiBits);

        void t_MultiBits::install(PyObject *module)
        {
          installType(&PY_TYPE(MultiBits), &PY_TYPE_DEF(MultiBits), module, "MultiBits", 0);
        }

        void t_MultiBits::initialize(PyObject *module)
        {
          PyObject_SetAttrString((PyObject *) PY_TYPE(MultiBits), "class_", make_descriptor(MultiBits::initializeClass, 1));
          PyObject_SetAttrString((PyObject *) PY_TYPE(MultiBits), "wrapfn_", make_descriptor(t_MultiBits::wrap_jobject));
          PyObject_SetAttrString((PyObject *) PY_TYPE(MultiBits), "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_MultiBits_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, MultiBits::initializeClass, 1)))
            return NULL;
          return t_MultiBits::wrap_Object(MultiBits(((t_MultiBits *) arg)->object.this$));
        }
        static PyObject *t_MultiBits_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, MultiBits::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static PyObject *t_MultiBits_get(t_MultiBits *self, PyObject *arg)
        {
          jint a0;
          jboolean result;

          if (!parseArg(arg, "I", &a0))
          {
            OBJ_CALL(result = self->object.get(a0));
            Py_RETURN_BOOL(result);
          }

          PyErr_SetArgsError((PyObject *) self, "get", arg);
          return NULL;
        }

        static PyObject *t_MultiBits_getLiveDocs(PyTypeObject *type, PyObject *arg)
        {
          ::org::apache::lucene::index::IndexReader a0((jobject) NULL);
          ::org::apache::lucene::util::Bits result((jobject) NULL);

          if (!parseArg(arg, "k", ::org::apache::lucene::index::IndexReader::initializeClass, &a0))
          {
            OBJ_CALL(result = ::org::apache::lucene::index::MultiBits::getLiveDocs(a0));
            return ::org::apache::lucene::util::t_Bits::wrap_Object(result);
          }

          PyErr_SetArgsError(type, "getLiveDocs", arg);
          return NULL;
        }

        static PyObject *t_MultiBits_length(t_MultiBits *self)
        {
          jint result;
          OBJ_CALL(result = self->object.length());
          return PyLong_FromLong((long) result);
        }

        static PyObject *t_MultiBits_toString(t_MultiBits *self, PyObject *args)
        {
          ::java::lang::String result((jobject) NULL);

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.toString());
            return j2p(result);
          }

          return callSuper(PY_TYPE(MultiBits), (PyObject *) self, "toString", args, 2);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/util/NumericUtils.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {

        ::java::lang::Class *NumericUtils::class$ = NULL;
        jmethodID *NumericUtils::mids$ = NULL;
        bool NumericUtils::live$ = false;

        jclass NumericUtils::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/util/NumericUtils");

            mids$ = new jmethodID[max_mid];
            mids$[mid_add_682896eda722dd45] = env->getStaticMethodID(cls, "add", "(II[B[B[B)V");
            mids$[mid_doubleToSortableLong_2cd17afd1ccbefb5] = env->getStaticMethodID(cls, "doubleToSortableLong", "(D)J");
            mids$[mid_floatToSortableInt_7db35672babd0b26] = env->getStaticMethodID(cls, "floatToSortableInt", "(F)I");
            mids$[mid_intToSortableBytes_e2a2eb3c904536ac] = env->getStaticMethodID(cls, "intToSortableBytes", "(I[BI)V");
            mids$[mid_longToSortableBytes_d29578c9e7af98d1] = env->getStaticMethodID(cls, "longToSortableBytes", "(J[BI)V");
            mids$[mid_sortableBytesToInt_7cdc0fb0850d95a0] = env->getStaticMethodID(cls, "sortableBytesToInt", "([BI)I");
            mids$[mid_sortableBytesToLong_d4ee5c8094735e0d] = env->getStaticMethodID(cls, "sortableBytesToLong", "([BI)J");
            mids$[mid_sortableDoubleBits_d711eecdc469624a] = env->getStaticMethodID(cls, "sortableDoubleBits", "(J)J");
            mids$[mid_sortableFloatBits_1e143afe1894d213] = env->getStaticMethodID(cls, "sortableFloatBits", "(I)I");
            mids$[mid_sortableIntToFloat_384f078ef4b8f931] = env->getStaticMethodID(cls, "sortableIntToFloat", "(I)F");
            mids$[mid_sortableLongToDouble_d0db46799f607804] = env->getStaticMethodID(cls, "sortableLongToDouble", "(J)D");
            mids$[mid_subtract_682896eda722dd45] = env->getStaticMethodID(cls, "subtract", "(II[B[B[B)V");

            class$ = new ::java::lang::Class(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        void NumericUtils::add(jint a0, jint a1, const JArray< jbyte > & a2, const JArray< jbyte > & a3, const JArray< jbyte > & a4)
        {
          jclass cls = env->getClass(initializeClass);
          env->callStaticVoidMethod(cls, mids$[mid_add_682896eda722dd45], a0, a1, a2.this$, a3.this$, a4.this$);
        }

        jlong NumericUtils::doubleToSortableLong(jdouble a0)
        {
          jclass cls = env->getClass(initializeClass);
          return env->callStaticLongMethod(cls, mids$[mid_doubleToSortableLong_2cd17afd1ccbefb5], a0);
        }

        jint NumericUtils::floatToSortableInt(jfloat a0)
        {
          jclass cls = env->getClass(initializeClass);
          return env->callStaticIntMethod(cls, mids$[mid_floatToSortableInt_7db35672babd0b26], a0);
        }

        void NumericUtils::intToSortableBytes(jint a0, const JArray< jbyte > & a1, jint a2)
        {
          jclass cls = env->getClass(initializeClass);
          env->callStaticVoidMethod(cls, mids$[mid_intToSortableBytes_e2a2eb3c904536ac], a0, a1.this$, a2);
        }

        void NumericUtils::longToSortableBytes(jlong a0, const JArray< jbyte > & a1, jint a2)
        {
          jclass cls = env->getClass(initializeClass);
          env->callStaticVoidMethod(cls, mids$[mid_longToSortableBytes_d29578c9e7af98d1], a0, a1.this$, a2);
        }

        jint NumericUtils::sortableBytesToInt(const JArray< jbyte > & a0, jint a1)
        {
          jclass cls = env->getClass(initializeClass);
          return env->callStaticIntMethod(cls, mids$[mid_sortableBytesToInt_7cdc0fb0850d95a0], a0.this$, a1);
        }

        jlong NumericUtils::sortableBytesToLong(const JArray< jbyte > & a0, jint a1)
        {
          jclass cls = env->getClass(initializeClass);
          return env->callStaticLongMethod(cls, mids$[mid_sortableBytesToLong_d4ee5c8094735e0d], a0.this$, a1);
        }

        jlong NumericUtils::sortableDoubleBits(jlong a0)
        {
          jclass cls = env->getClass(initializeClass);
          return env->callStaticLongMethod(cls, mids$[mid_sortableDoubleBits_d711eecdc469624a], a0);
        }

        jint NumericUtils::sortableFloatBits(jint a0)
        {
          jclass cls = env->getClass(initializeClass);
          return env->callStaticIntMethod(cls, mids$[mid_sortableFloatBits_1e143afe1894d213], a0);
        }

        jfloat NumericUtils::sortableIntToFloat(jint a0)
        {
          jclass cls = env->getClass(initializeClass);
          return env->callStaticFloatMethod(cls, mids$[mid_sortableIntToFloat_384f078ef4b8f931], a0);
        }

        jdouble NumericUtils::sortableLongToDouble(jlong a0)
        {
          jclass cls = env->getClass(initializeClass);
          return env->callStaticDoubleMethod(cls, mids$[mid_sortableLongToDouble_d0db46799f607804], a0);
        }

        void NumericUtils::subtract(jint a0, jint a1, const JArray< jbyte > & a2, const JArray< jbyte > & a3, const JArray< jbyte > & a4)
        {
          jclass cls = env->getClass(initializeClass);
          env->callStaticVoidMethod(cls, mids$[mid_subtract_682896eda722dd45], a0, a1, a2.this$, a3.this$, a4.this$);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        static PyObject *t_NumericUtils_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_NumericUtils_instance_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_NumericUtils_add(PyTypeObject *type, PyObject *args);
        static PyObject *t_NumericUtils_doubleToSortableLong(PyTypeObject *type, PyObject *arg);
        static PyObject *t_NumericUtils_floatToSortableInt(PyTypeObject *type, PyObject *arg);
        static PyObject *t_NumericUtils_intToSortableBytes(PyTypeObject *type, PyObject *args);
        static PyObject *t_NumericUtils_longToSortableBytes(PyTypeObject *type, PyObject *args);
        static PyObject *t_NumericUtils_sortableBytesToInt(PyTypeObject *type, PyObject *args);
        static PyObject *t_NumericUtils_sortableBytesToLong(PyTypeObject *type, PyObject *args);
        static PyObject *t_NumericUtils_sortableDoubleBits(PyTypeObject *type, PyObject *arg);
        static PyObject *t_NumericUtils_sortableFloatBits(PyTypeObject *type, PyObject *arg);
        static PyObject *t_NumericUtils_sortableIntToFloat(PyTypeObject *type, PyObject *arg);
        static PyObject *t_NumericUtils_sortableLongToDouble(PyTypeObject *type, PyObject *arg);
        static PyObject *t_NumericUtils_subtract(PyTypeObject *type, PyObject *args);

        static PyMethodDef t_NumericUtils__methods_[] = {
          DECLARE_METHOD(t_NumericUtils, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_NumericUtils, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_NumericUtils, add, METH_VARARGS | METH_CLASS),
          DECLARE_METHOD(t_NumericUtils, doubleToSortableLong, METH_O | METH_CLASS),
          DECLARE_METHOD(t_NumericUtils, floatToSortableInt, METH_O | METH_CLASS),
          DECLARE_METHOD(t_NumericUtils, intToSortableBytes, METH_VARARGS | METH_CLASS),
          DECLARE_METHOD(t_NumericUtils, longToSortableBytes, METH_VARARGS | METH_CLASS),
          DECLARE_METHOD(t_NumericUtils, sortableBytesToInt, METH_VARARGS | METH_CLASS),
          DECLARE_METHOD(t_NumericUtils, sortableBytesToLong, METH_VARARGS | METH_CLASS),
          DECLARE_METHOD(t_NumericUtils, sortableDoubleBits, METH_O | METH_CLASS),
          DECLARE_METHOD(t_NumericUtils, sortableFloatBits, METH_O | METH_CLASS),
          DECLARE_METHOD(t_NumericUtils, sortableIntToFloat, METH_O | METH_CLASS),
          DECLARE_METHOD(t_NumericUtils, sortableLongToDouble, METH_O | METH_CLASS),
          DECLARE_METHOD(t_NumericUtils, subtract, METH_VARARGS | METH_CLASS),
          { NULL, NULL, 0, NULL }
        };

        static PyType_Slot PY_TYPE_SLOTS(NumericUtils)[] = {
          { Py_tp_methods, t_NumericUtils__methods_ },
          { Py_tp_init, (void *) abstract_init },
          { 0, NULL }
        };

        static PyType_Def *PY_TYPE_BASES(NumericUtils)[] = {
          &PY_TYPE_DEF(::java::lang::Object),
          NULL
        };

        DEFINE_TYPE(NumericUtils, t_NumericUtils, NumericUtils);

        void t_NumericUtils::install(PyObject *module)
        {
          installType(&PY_TYPE(NumericUtils), &PY_TYPE_DEF(NumericUtils), module, "NumericUtils", 0);
        }

        void t_NumericUtils::initialize(PyObject *module)
        {
          PyObject_SetAttrString((PyObject *) PY_TYPE(NumericUtils), "class_", make_descriptor(NumericUtils::initializeClass, 1));
          PyObject_SetAttrString((PyObject *) PY_TYPE(NumericUtils), "wrapfn_", make_descriptor(t_NumericUtils::wrap_jobject));
          PyObject_SetAttrString((PyObject *) PY_TYPE(NumericUtils), "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_NumericUtils_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, NumericUtils::initializeClass, 1)))
            return NULL;
          return t_NumericUtils::wrap_Object(NumericUtils(((t_NumericUtils *) arg)->object.this$));
        }
        static PyObject *t_NumericUtils_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, NumericUtils::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static PyObject *t_NumericUtils_add(PyTypeObject *type, PyObject *args)
        {
          jint a0;
          jint a1;
          JArray< jbyte > a2((jobject) NULL);
          JArray< jbyte > a3((jobject) NULL);
          JArray< jbyte > a4((jobject) NULL);

          if (!parseArgs(args, "II[B[B[B", &a0, &a1, &a2, &a3, &a4))
          {
            OBJ_CALL(::org::apache::lucene::util::NumericUtils::add(a0, a1, a2, a3, a4));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError(type, "add", args);
          return NULL;
        }

        static PyObject *t_NumericUtils_doubleToSortableLong(PyTypeObject *type, PyObject *arg)
        {
          jdouble a0;
          jlong result;

          if (!parseArg(arg, "D", &a0))
          {
            OBJ_CALL(result = ::org::apache::lucene::util::NumericUtils::doubleToSortableLong(a0));
            return PyLong_FromLongLong((PY_LONG_LONG) result);
          }

          PyErr_SetArgsError(type, "doubleToSortableLong", arg);
          return NULL;
        }

        static PyObject *t_NumericUtils_floatToSortableInt(PyTypeObject *type, PyObject *arg)
        {
          jfloat a0;
          jint result;

          if (!parseArg(arg, "F", &a0))
          {
            OBJ_CALL(result = ::org::apache::lucene::util::NumericUtils::floatToSortableInt(a0));
            return PyLong_FromLong((long) result);
          }

          PyErr_SetArgsError(type, "floatToSortableInt", arg);
          return NULL;
        }

        static PyObject *t_NumericUtils_intToSortableBytes(PyTypeObject *type, PyObject *args)
        {
          jint a0;
          JArray< jbyte > a1((jobject) NULL);
          jint a2;

          if (!parseArgs(args, "I[BI", &a0, &a1, &a2))
          {
            OBJ_CALL(::org::apache::lucene::util::NumericUtils::intToSortableBytes(a0, a1, a2));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError(type, "intToSortableBytes", args);
          return NULL;
        }

        static PyObject *t_NumericUtils_longToSortableBytes(PyTypeObject *type, PyObject *args)
        {
          jlong a0;
          JArray< jbyte > a1((jobject) NULL);
          jint a2;

          if (!parseArgs(args, "J[BI", &a0, &a1, &a2))
          {
            OBJ_CALL(::org::apache::lucene::util::NumericUtils::longToSortableBytes(a0, a1, a2));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError(type, "longToSortableBytes", args);
          return NULL;
        }

        static PyObject *t_NumericUtils_sortableBytesToInt(PyTypeObject *type, PyObject *args)
        {
          JArray< jbyte > a0((jobject) NULL);
          jint a1;
          jint result;

          if (!parseArgs(args, "[BI", &a0, &a1))
          {
            OBJ_CALL(result = ::org::apache::lucene::util::NumericUtils::sortableBytesToInt(a0, a1));
            return PyLong_FromLong((long) result);
          }

          PyErr_SetArgsError(type, "sortableBytesToInt", args);
          return NULL;
        }

        static PyObject *t_NumericUtils_sortableBytesToLong(PyTypeObject *type, PyObject *args)
        {
          JArray< jbyte > a0((jobject) NULL);
          jint a1;
          jlong result;

          if (!parseArgs(args, "[BI", &a0, &a1))
          {
            OBJ_CALL(result = ::org::apache::lucene::util::NumericUtils::sortableBytesToLong(a0, a1));
            return PyLong_FromLongLong((PY_LONG_LONG) result);
          }

          PyErr_SetArgsError(type, "sortableBytesToLong", args);
          return NULL;
        }

        static PyObject *t_NumericUtils_sortableDoubleBits(PyTypeObject *type, PyObject *arg)
        {
          jlong a0;
          jlong result;

          if (!parseArg(arg, "J", &a0))
          {
            OBJ_CALL(result = ::org::apache::lucene::util::NumericUtils::sortableDoubleBits(a0));
            return PyLong_FromLongLong((PY_LONG_LONG) result);
          }

          PyErr_SetArgsError(type, "sortableDoubleBits", arg);
          return NULL;
        }

        static PyObject *t_NumericUtils_sortableFloatBits(PyTypeObject *type, PyObject *arg)
        {
          jint a0;
          jint result;

          if (!parseArg(arg, "I", &a0))
          {
            OBJ_CALL(result = ::org::apache::lucene::util::NumericUtils::sortableFloatBits(a0));
            return PyLong_FromLong((long) result);
          }

          PyErr_SetArgsError(type, "sortableFloatBits", arg);
          return NULL;
        }

        static PyObject *t_NumericUtils_sortableIntToFloat(PyTypeObject *type, PyObject *arg)
        {
          jint a0;
          jfloat result;

          if (!parseArg(arg, "I", &a0))
          {
            OBJ_CALL(result = ::org::apache::lucene::util::NumericUtils::sortableIntToFloat(a0));
            return PyFloat_FromDouble((double) result);
          }

          PyErr_SetArgsError(type, "sortableIntToFloat", arg);
          return NULL;
        }

        static PyObject *t_NumericUtils_sortableLongToDouble(PyTypeObject *type, PyObject *arg)
        {
          jlong a0;
          jdouble result;

          if (!parseArg(arg, "J", &a0))
          {
            OBJ_CALL(result = ::org::apache::lucene::util::NumericUtils::sortableLongToDouble(a0));
            return PyFloat_FromDouble((double) result);
          }

          PyErr_SetArgsError(type, "sortableLongToDouble", arg);
          return NULL;
        }

        static PyObject *t_NumericUtils_subtract(PyTypeObject *type, PyObject *args)
        {
          jint a0;
          jint a1;
          JArray< jbyte > a2((jobject) NULL);
          JArray< jbyte > a3((jobject) NULL);
          JArray< jbyte > a4((jobject) NULL);

          if (!parseArgs(args, "II[B[B[B", &a0, &a1, &a2, &a3, &a4))
          {
            OBJ_CALL(::org::apache::lucene::util::NumericUtils::subtract(a0, a1, a2, a3, a4));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError(type, "subtract", args);
          return NULL;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/expressions/js/JavascriptParser$BoolorContext.h"
#include "java/lang/Class.h"
#include "java/lang/Object.h"
#include "java/util/List.h"
#include "org/antlr/v4/runtime/Token.h"
#include "org/antlr/v4/runtime/atn/ParserATNSimulator.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace expressions {
        namespace js {

          ::java::lang::Class *JavascriptParser$BoolorContext::class$ = NULL;
          jmethodID *JavascriptParser$BoolorContext::mids$ = NULL;
          bool JavascriptParser$BoolorContext::live$ = false;

          jclass JavascriptParser$BoolorContext::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/expressions/js/JavascriptParser$BoolorContext");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_5b630188893587b5] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/expressions/js/JavascriptParser$ExpressionContext;)V");
              mids$[mid_expression_49ec78390f08338a] = env->getMethodID(cls, "expression", "()Ljava/util/List;");
              mids$[mid_expression_a4fb3fdc55d1c64a] = env->getMethodID(cls, "expression", "(I)Lorg/apache/lucene/expressions/js/JavascriptParser$ExpressionContext;");

              class$ = new ::java::lang::Class(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          JavascriptParser$BoolorContext::JavascriptParser$BoolorContext(const ::org::apache::lucene::expressions::js::JavascriptParser$ExpressionContext & a0) : ::org::apache::lucene::expressions::js::JavascriptParser$ExpressionContext(env->newObject(initializeClass, &mids$, mid_init$_5b630188893587b5, a0.this$)) {}

          ::java::util::List JavascriptParser$BoolorContext::expression() const
          {
            return ::java::util::List(env->callObjectMethod(this$, mids$[mid_expression_49ec78390f08338a]));
          }

          ::org::apache::lucene::expressions::js::JavascriptParser$ExpressionContext JavascriptParser$BoolorContext::expression(jint a0) const
          {
            return ::org::apache::lucene::expressions::js::JavascriptParser$ExpressionContext(env->callObjectMethod(this$, mids$[mid_expression_a4fb3fdc55d1c64a], a0));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace expressions {
        namespace js {
          static PyObject *t_JavascriptParser$BoolorContext_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_JavascriptParser$BoolorContext_instance_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_JavascriptParser$BoolorContext_of_(t_JavascriptParser$BoolorContext *self, PyObject *args);
          static int t_JavascriptParser$BoolorContext_init_(t_JavascriptParser$BoolorContext *self, PyObject *args, PyObject *kwds);
          static PyObject *t_JavascriptParser$BoolorContext_expression(t_JavascriptParser$BoolorContext *self, PyObject *args);
          static PyObject *t_JavascriptParser$BoolorContext_get__parameters_(t_JavascriptParser$BoolorContext *self, void *data);
          static PyGetSetDef t_JavascriptParser$BoolorContext__fields_[] = {
            DECLARE_GET_FIELD(t_JavascriptParser$BoolorContext, parameters_),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_JavascriptParser$BoolorContext__methods_[] = {
            DECLARE_METHOD(t_JavascriptParser$BoolorContext, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_JavascriptParser$BoolorContext, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_JavascriptParser$BoolorContext, of_, METH_VARARGS),
            DECLARE_METHOD(t_JavascriptParser$BoolorContext, expression, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          static PyType_Slot PY_TYPE_SLOTS(JavascriptParser$BoolorContext)[] = {
            { Py_tp_methods, t_JavascriptParser$BoolorContext__methods_ },
            { Py_tp_init, (void *) t_JavascriptParser$BoolorContext_init_ },
            { Py_tp_getset, t_JavascriptParser$BoolorContext__fields_ },
            { 0, NULL }
          };

          static PyType_Def *PY_TYPE_BASES(JavascriptParser$BoolorContext)[] = {
            &PY_TYPE_DEF(::org::apache::lucene::expressions::js::JavascriptParser$ExpressionContext),
            NULL
          };

          DEFINE_TYPE(JavascriptParser$BoolorContext, t_JavascriptParser$BoolorContext, JavascriptParser$BoolorContext);
          PyObject *t_JavascriptParser$BoolorContext::wrap_Object(const JavascriptParser$BoolorContext& object, PyTypeObject *p0, PyTypeObject *p1)
          {
            PyObject *obj = t_JavascriptParser$BoolorContext::wrap_Object(object);
            if (obj != NULL && obj != Py_None)
            {
              t_JavascriptParser$BoolorContext *self = (t_JavascriptParser$BoolorContext *) obj;
              self->parameters[0] = p0;
              self->parameters[1] = p1;
            }
            return obj;
          }

          PyObject *t_JavascriptParser$BoolorContext::wrap_jobject(const jobject& object, PyTypeObject *p0, PyTypeObject *p1)
          {
            PyObject *obj = t_JavascriptParser$BoolorContext::wrap_jobject(object);
            if (obj != NULL && obj != Py_None)
            {
              t_JavascriptParser$BoolorContext *self = (t_JavascriptParser$BoolorContext *) obj;
              self->parameters[0] = p0;
              self->parameters[1] = p1;
            }
            return obj;
          }

          void t_JavascriptParser$BoolorContext::install(PyObject *module)
          {
            installType(&PY_TYPE(JavascriptParser$BoolorContext), &PY_TYPE_DEF(JavascriptParser$BoolorContext), module, "JavascriptParser$BoolorContext", 0);
          }

          void t_JavascriptParser$BoolorContext::initialize(PyObject *module)
          {
            PyObject_SetAttrString((PyObject *) PY_TYPE(JavascriptParser$BoolorContext), "class_", make_descriptor(JavascriptParser$BoolorContext::initializeClass, 1));
            PyObject_SetAttrString((PyObject *) PY_TYPE(JavascriptParser$BoolorContext), "wrapfn_", make_descriptor(t_JavascriptParser$BoolorContext::wrap_jobject));
            PyObject_SetAttrString((PyObject *) PY_TYPE(JavascriptParser$BoolorContext), "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_JavascriptParser$BoolorContext_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, JavascriptParser$BoolorContext::initializeClass, 1)))
              return NULL;
            return t_JavascriptParser$BoolorContext::wrap_Object(JavascriptParser$BoolorContext(((t_JavascriptParser$BoolorContext *) arg)->object.this$));
          }
          static PyObject *t_JavascriptParser$BoolorContext_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, JavascriptParser$BoolorContext::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static PyObject *t_JavascriptParser$BoolorContext_of_(t_JavascriptParser$BoolorContext *self, PyObject *args)
          {
            if (!parseArg(args, "T", 2, &(self->parameters)))
              Py_RETURN_SELF;
            return PyErr_SetArgsError((PyObject *) self, "of_", args);
          }

          static int t_JavascriptParser$BoolorContext_init_(t_JavascriptParser$BoolorContext *self, PyObject *args, PyObject *kwds)
          {
            ::org::apache::lucene::expressions::js::JavascriptParser$ExpressionContext a0((jobject) NULL);
            PyTypeObject **p0;
            JavascriptParser$BoolorContext object((jobject) NULL);

            if (!parseArgs(args, "K", ::org::apache::lucene::expressions::js::JavascriptParser$ExpressionContext::initializeClass, &a0, &p0, ::org::apache::lucene::expressions::js::t_JavascriptParser$ExpressionContext::parameters_))
            {
              INT_CALL(object = JavascriptParser$BoolorContext(a0));
              self->object = object;
              self->parameters[0] = ::org::antlr::v4::runtime::PY_TYPE(Token);
              self->parameters[1] = ::org::antlr::v4::runtime::atn::PY_TYPE(ParserATNSimulator);
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_JavascriptParser$BoolorContext_expression(t_JavascriptParser$BoolorContext *self, PyObject *args)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 0:
              {
                ::java::util::List result((jobject) NULL);
                OBJ_CALL(result = self->object.expression());
                return ::java::util::t_List::wrap_Object(result, ::org::apache::lucene::expressions::js::PY_TYPE(JavascriptParser$ExpressionContext));
              }
              break;
             case 1:
              {
                jint a0;
                ::org::apache::lucene::expressions::js::JavascriptParser$ExpressionContext result((jobject) NULL);

                if (!parseArgs(args, "I", &a0))
                {
                  OBJ_CALL(result = self->object.expression(a0));
                  return ::org::apache::lucene::expressions::js::t_JavascriptParser$ExpressionContext::wrap_Object(result);
                }
              }
            }

            PyErr_SetArgsError((PyObject *) self, "expression", args);
            return NULL;
          }
          static PyObject *t_JavascriptParser$BoolorContext_get__parameters_(t_JavascriptParser$BoolorContext *self, void *data)
          {
            return typeParameters(self->parameters, sizeof(self->parameters));
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/Scorer.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/search/TwoPhaseIterator.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/search/DocIdSetIterator.h"
#include "org/apache/lucene/search/Weight.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {

        ::java::lang::Class *Scorer::class$ = NULL;
        jmethodID *Scorer::mids$ = NULL;
        bool Scorer::live$ = false;

        jclass Scorer::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/search/Scorer");

            mids$ = new jmethodID[max_mid];
            mids$[mid_advanceShallow_1e143afe1894d213] = env->getMethodID(cls, "advanceShallow", "(I)I");
            mids$[mid_getMaxScore_384f078ef4b8f931] = env->getMethodID(cls, "getMaxScore", "(I)F");
            mids$[mid_getWeight_f9ac4832bc7a84ae] = env->getMethodID(cls, "getWeight", "()Lorg/apache/lucene/search/Weight;");
            mids$[mid_iterator_173d81d7b8f93882] = env->getMethodID(cls, "iterator", "()Lorg/apache/lucene/search/DocIdSetIterator;");
            mids$[mid_twoPhaseIterator_6458a12a224a1c8a] = env->getMethodID(cls, "twoPhaseIterator", "()Lorg/apache/lucene/search/TwoPhaseIterator;");

            class$ = new ::java::lang::Class(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        jint Scorer::advanceShallow(jint a0) const
        {
          return env->callIntMethod(this$, mids$[mid_advanceShallow_1e143afe1894d213], a0);
        }

        jfloat Scorer::getMaxScore(jint a0) const
        {
          return env->callFloatMethod(this$, mids$[mid_getMaxScore_384f078ef4b8f931], a0);
        }

        ::org::apache::lucene::search::Weight Scorer::getWeight() const
        {
          return ::org::apache::lucene::search::Weight(env->callObjectMethod(this$, mids$[mid_getWeight_f9ac4832bc7a84ae]));
        }

        ::org::apache::lucene::search::DocIdSetIterator Scorer::iterator() const
        {
          return ::org::apache::lucene::search::DocIdSetIterator(env->callObjectMethod(this$, mids$[mid_iterator_173d81d7b8f93882]));
        }

        ::org::apache::lucene::search::TwoPhaseIterator Scorer::twoPhaseIterator() const
        {
          return ::org::apache::lucene::search::TwoPhaseIterator(env->callObjectMethod(this$, mids$[mid_twoPhaseIterator_6458a12a224a1c8a]));
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        static PyObject *t_Scorer_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_Scorer_instance_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_Scorer_advanceShallow(t_Scorer *self, PyObject *arg);
        static PyObject *t_Scorer_getMaxScore(t_Scorer *self, PyObject *arg);
        static PyObject *t_Scorer_getWeight(t_Scorer *self);
        static PyObject *t_Scorer_iterator(t_Scorer *self);
        static PyObject *t_Scorer_twoPhaseIterator(t_Scorer *self);
        static PyObject *t_Scorer_get__weight(t_Scorer *self, void *data);
        static PyGetSetDef t_Scorer__fields_[] = {
          DECLARE_GET_FIELD(t_Scorer, weight),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_Scorer__methods_[] = {
          DECLARE_METHOD(t_Scorer, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_Scorer, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_Scorer, advanceShallow, METH_O),
          DECLARE_METHOD(t_Scorer, getMaxScore, METH_O),
          DECLARE_METHOD(t_Scorer, getWeight, METH_NOARGS),
          DECLARE_METHOD(t_Scorer, iterator, METH_NOARGS),
          DECLARE_METHOD(t_Scorer, twoPhaseIterator, METH_NOARGS),
          { NULL, NULL, 0, NULL }
        };

        static PyType_Slot PY_TYPE_SLOTS(Scorer)[] = {
          { Py_tp_methods, t_Scorer__methods_ },
          { Py_tp_init, (void *) abstract_init },
          { Py_tp_getset, t_Scorer__fields_ },
          { 0, NULL }
        };

        static PyType_Def *PY_TYPE_BASES(Scorer)[] = {
          &PY_TYPE_DEF(::org::apache::lucene::search::Scorable),
          NULL
        };

        DEFINE_TYPE(Scorer, t_Scorer, Scorer);

        void t_Scorer::install(PyObject *module)
        {
          installType(&PY_TYPE(Scorer), &PY_TYPE_DEF(Scorer), module, "Scorer", 0);
        }

        void t_Scorer::initialize(PyObject *module)
        {
          PyObject_SetAttrString((PyObject *) PY_TYPE(Scorer), "class_", make_descriptor(Scorer::initializeClass, 1));
          PyObject_SetAttrString((PyObject *) PY_TYPE(Scorer), "wrapfn_", make_descriptor(t_Scorer::wrap_jobject));
          PyObject_SetAttrString((PyObject *) PY_TYPE(Scorer), "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_Scorer_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, Scorer::initializeClass, 1)))
            return NULL;
          return t_Scorer::wrap_Object(Scorer(((t_Scorer *) arg)->object.this$));
        }
        static PyObject *t_Scorer_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, Scorer::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static PyObject *t_Scorer_advanceShallow(t_Scorer *self, PyObject *arg)
        {
          jint a0;
          jint result;

          if (!parseArg(arg, "I", &a0))
          {
            OBJ_CALL(result = self->object.advanceShallow(a0));
            return PyLong_FromLong((long) result);
          }

          PyErr_SetArgsError((PyObject *) self, "advanceShallow", arg);
          return NULL;
        }

        static PyObject *t_Scorer_getMaxScore(t_Scorer *self, PyObject *arg)
        {
          jint a0;
          jfloat result;

          if (!parseArg(arg, "I", &a0))
          {
            OBJ_CALL(result = self->object.getMaxScore(a0));
            return PyFloat_FromDouble((double) result);
          }

          PyErr_SetArgsError((PyObject *) self, "getMaxScore", arg);
          return NULL;
        }

        static PyObject *t_Scorer_getWeight(t_Scorer *self)
        {
          ::org::apache::lucene::search::Weight result((jobject) NULL);
          OBJ_CALL(result = self->object.getWeight());
          return ::org::apache::lucene::search::t_Weight::wrap_Object(result);
        }

        static PyObject *t_Scorer_iterator(t_Scorer *self)
        {
          ::org::apache::lucene::search::DocIdSetIterator result((jobject) NULL);
          OBJ_CALL(result = self->object.iterator());
          return ::org::apache::lucene::search::t_DocIdSetIterator::wrap_Object(result);
        }

        static PyObject *t_Scorer_twoPhaseIterator(t_Scorer *self)
        {
          ::org::apache::lucene::search::TwoPhaseIterator result((jobject) NULL);
          OBJ_CALL(result = self->object.twoPhaseIterator());
          return ::org::apache::lucene::search::t_TwoPhaseIterator::wrap_Object(result);
        }

        static PyObject *t_Scorer_get__weight(t_Scorer *self, void *data)
        {
          ::org::apache::lucene::search::Weight value((jobject) NULL);
          OBJ_CALL(value = self->object.getWeight());
          return ::org::apache::lucene::search::t_Weight::wrap_Object(value);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queryparser/flexible/standard/builders/SynonymQueryNodeBuilder.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/queryparser/flexible/core/QueryNodeException.h"
#include "org/apache/lucene/queryparser/flexible/standard/builders/StandardQueryBuilder.h"
#include "org/apache/lucene/queryparser/flexible/core/nodes/QueryNode.h"
#include "org/apache/lucene/search/Query.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace standard {
            namespace builders {

              ::java::lang::Class *SynonymQueryNodeBuilder::class$ = NULL;
              jmethodID *SynonymQueryNodeBuilder::mids$ = NULL;
              bool SynonymQueryNodeBuilder::live$ = false;

              jclass SynonymQueryNodeBuilder::initializeClass(bool getOnly)
              {
                if (getOnly)
                  return (jclass) (live$ ? class$->this$ : NULL);
                if (class$ == NULL)
                {
                  jclass cls = (jclass) env->findClass("org/apache/lucene/queryparser/flexible/standard/builders/SynonymQueryNodeBuilder");

                  mids$ = new jmethodID[max_mid];
                  mids$[mid_init$_f2cc1bce94666404] = env->getMethodID(cls, "<init>", "()V");
                  mids$[mid_build_266d6dc3b958f456] = env->getMethodID(cls, "build", "(Lorg/apache/lucene/queryparser/flexible/core/nodes/QueryNode;)Lorg/apache/lucene/search/Query;");

                  class$ = new ::java::lang::Class(cls);
                  live$ = true;
                }
                return (jclass) class$->this$;
              }

              SynonymQueryNodeBuilder::SynonymQueryNodeBuilder() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_f2cc1bce94666404)) {}

              ::org::apache::lucene::search::Query SynonymQueryNodeBuilder::build(const ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode & a0) const
              {
                return ::org::apache::lucene::search::Query(env->callObjectMethod(this$, mids$[mid_build_266d6dc3b958f456], a0.this$));
              }
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace standard {
            namespace builders {
              static PyObject *t_SynonymQueryNodeBuilder_cast_(PyTypeObject *type, PyObject *arg);
              static PyObject *t_SynonymQueryNodeBuilder_instance_(PyTypeObject *type, PyObject *arg);
              static int t_SynonymQueryNodeBuilder_init_(t_SynonymQueryNodeBuilder *self, PyObject *args, PyObject *kwds);
              static PyObject *t_SynonymQueryNodeBuilder_build(t_SynonymQueryNodeBuilder *self, PyObject *arg);

              static PyMethodDef t_SynonymQueryNodeBuilder__methods_[] = {
                DECLARE_METHOD(t_SynonymQueryNodeBuilder, cast_, METH_O | METH_CLASS),
                DECLARE_METHOD(t_SynonymQueryNodeBuilder, instance_, METH_O | METH_CLASS),
                DECLARE_METHOD(t_SynonymQueryNodeBuilder, build, METH_O),
                { NULL, NULL, 0, NULL }
              };

              static PyType_Slot PY_TYPE_SLOTS(SynonymQueryNodeBuilder)[] = {
                { Py_tp_methods, t_SynonymQueryNodeBuilder__methods_ },
                { Py_tp_init, (void *) t_SynonymQueryNodeBuilder_init_ },
                { 0, NULL }
              };

              static PyType_Def *PY_TYPE_BASES(SynonymQueryNodeBuilder)[] = {
                &PY_TYPE_DEF(::java::lang::Object),
                NULL
              };

              DEFINE_TYPE(SynonymQueryNodeBuilder, t_SynonymQueryNodeBuilder, SynonymQueryNodeBuilder);

              void t_SynonymQueryNodeBuilder::install(PyObject *module)
              {
                installType(&PY_TYPE(SynonymQueryNodeBuilder), &PY_TYPE_DEF(SynonymQueryNodeBuilder), module, "SynonymQueryNodeBuilder", 0);
              }

              void t_SynonymQueryNodeBuilder::initialize(PyObject *module)
              {
                PyObject_SetAttrString((PyObject *) PY_TYPE(SynonymQueryNodeBuilder), "class_", make_descriptor(SynonymQueryNodeBuilder::initializeClass, 1));
                PyObject_SetAttrString((PyObject *) PY_TYPE(SynonymQueryNodeBuilder), "wrapfn_", make_descriptor(t_SynonymQueryNodeBuilder::wrap_jobject));
                PyObject_SetAttrString((PyObject *) PY_TYPE(SynonymQueryNodeBuilder), "boxfn_", make_descriptor(boxObject));
              }

              static PyObject *t_SynonymQueryNodeBuilder_cast_(PyTypeObject *type, PyObject *arg)
              {
                if (!(arg = castCheck(arg, SynonymQueryNodeBuilder::initializeClass, 1)))
                  return NULL;
                return t_SynonymQueryNodeBuilder::wrap_Object(SynonymQueryNodeBuilder(((t_SynonymQueryNodeBuilder *) arg)->object.this$));
              }
              static PyObject *t_SynonymQueryNodeBuilder_instance_(PyTypeObject *type, PyObject *arg)
              {
                if (!castCheck(arg, SynonymQueryNodeBuilder::initializeClass, 0))
                  Py_RETURN_FALSE;
                Py_RETURN_TRUE;
              }

              static int t_SynonymQueryNodeBuilder_init_(t_SynonymQueryNodeBuilder *self, PyObject *args, PyObject *kwds)
              {
                SynonymQueryNodeBuilder object((jobject) NULL);

                INT_CALL(object = SynonymQueryNodeBuilder());
                self->object = object;

                return 0;
              }

              static PyObject *t_SynonymQueryNodeBuilder_build(t_SynonymQueryNodeBuilder *self, PyObject *arg)
              {
                ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode a0((jobject) NULL);
                ::org::apache::lucene::search::Query result((jobject) NULL);

                if (!parseArg(arg, "k", ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode::initializeClass, &a0))
                {
                  OBJ_CALL(result = self->object.build(a0));
                  return ::org::apache::lucene::search::t_Query::wrap_Object(result);
                }

                PyErr_SetArgsError((PyObject *) self, "build", arg);
                return NULL;
              }
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/facet/TopOrdAndFloatQueue.h"
#include "org/apache/lucene/facet/TopOrdAndFloatQueue$OrdAndValue.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace facet {

        ::java::lang::Class *TopOrdAndFloatQueue::class$ = NULL;
        jmethodID *TopOrdAndFloatQueue::mids$ = NULL;
        bool TopOrdAndFloatQueue::live$ = false;

        jclass TopOrdAndFloatQueue::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/facet/TopOrdAndFloatQueue");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_040c4cd0390c5aff] = env->getMethodID(cls, "<init>", "(I)V");
            mids$[mid_lessThan_b94b9dc4c475cb0a] = env->getMethodID(cls, "lessThan", "(Lorg/apache/lucene/facet/TopOrdAndFloatQueue$OrdAndValue;Lorg/apache/lucene/facet/TopOrdAndFloatQueue$OrdAndValue;)Z");

            class$ = new ::java::lang::Class(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        TopOrdAndFloatQueue::TopOrdAndFloatQueue(jint a0) : ::org::apache::lucene::util::PriorityQueue(env->newObject(initializeClass, &mids$, mid_init$_040c4cd0390c5aff, a0)) {}
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace facet {
        static PyObject *t_TopOrdAndFloatQueue_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_TopOrdAndFloatQueue_instance_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_TopOrdAndFloatQueue_of_(t_TopOrdAndFloatQueue *self, PyObject *args);
        static int t_TopOrdAndFloatQueue_init_(t_TopOrdAndFloatQueue *self, PyObject *args, PyObject *kwds);
        static PyObject *t_TopOrdAndFloatQueue_get__parameters_(t_TopOrdAndFloatQueue *self, void *data);
        static PyGetSetDef t_TopOrdAndFloatQueue__fields_[] = {
          DECLARE_GET_FIELD(t_TopOrdAndFloatQueue, parameters_),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_TopOrdAndFloatQueue__methods_[] = {
          DECLARE_METHOD(t_TopOrdAndFloatQueue, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_TopOrdAndFloatQueue, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_TopOrdAndFloatQueue, of_, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        static PyType_Slot PY_TYPE_SLOTS(TopOrdAndFloatQueue)[] = {
          { Py_tp_methods, t_TopOrdAndFloatQueue__methods_ },
          { Py_tp_init, (void *) t_TopOrdAndFloatQueue_init_ },
          { Py_tp_getset, t_TopOrdAndFloatQueue__fields_ },
          { 0, NULL }
        };

        static PyType_Def *PY_TYPE_BASES(TopOrdAndFloatQueue)[] = {
          &PY_TYPE_DEF(::org::apache::lucene::util::PriorityQueue),
          NULL
        };

        DEFINE_TYPE(TopOrdAndFloatQueue, t_TopOrdAndFloatQueue, TopOrdAndFloatQueue);
        PyObject *t_TopOrdAndFloatQueue::wrap_Object(const TopOrdAndFloatQueue& object, PyTypeObject *p0)
        {
          PyObject *obj = t_TopOrdAndFloatQueue::wrap_Object(object);
          if (obj != NULL && obj != Py_None)
          {
            t_TopOrdAndFloatQueue *self = (t_TopOrdAndFloatQueue *) obj;
            self->parameters[0] = p0;
          }
          return obj;
        }

        PyObject *t_TopOrdAndFloatQueue::wrap_jobject(const jobject& object, PyTypeObject *p0)
        {
          PyObject *obj = t_TopOrdAndFloatQueue::wrap_jobject(object);
          if (obj != NULL && obj != Py_None)
          {
            t_TopOrdAndFloatQueue *self = (t_TopOrdAndFloatQueue *) obj;
            self->parameters[0] = p0;
          }
          return obj;
        }

        void t_TopOrdAndFloatQueue::install(PyObject *module)
        {
          installType(&PY_TYPE(TopOrdAndFloatQueue), &PY_TYPE_DEF(TopOrdAndFloatQueue), module, "TopOrdAndFloatQueue", 0);
          PyObject_SetAttrString((PyObject *) PY_TYPE(TopOrdAndFloatQueue), "OrdAndValue", make_descriptor(&PY_TYPE_DEF(TopOrdAndFloatQueue$OrdAndValue)));
        }

        void t_TopOrdAndFloatQueue::initialize(PyObject *module)
        {
          PyObject_SetAttrString((PyObject *) PY_TYPE(TopOrdAndFloatQueue), "class_", make_descriptor(TopOrdAndFloatQueue::initializeClass, 1));
          PyObject_SetAttrString((PyObject *) PY_TYPE(TopOrdAndFloatQueue), "wrapfn_", make_descriptor(t_TopOrdAndFloatQueue::wrap_jobject));
          PyObject_SetAttrString((PyObject *) PY_TYPE(TopOrdAndFloatQueue), "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_TopOrdAndFloatQueue_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, TopOrdAndFloatQueue::initializeClass, 1)))
            return NULL;
          return t_TopOrdAndFloatQueue::wrap_Object(TopOrdAndFloatQueue(((t_TopOrdAndFloatQueue *) arg)->object.this$));
        }
        static PyObject *t_TopOrdAndFloatQueue_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, TopOrdAndFloatQueue::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static PyObject *t_TopOrdAndFloatQueue_of_(t_TopOrdAndFloatQueue *self, PyObject *args)
        {
          if (!parseArg(args, "T", 1, &(self->parameters)))
            Py_RETURN_SELF;
          return PyErr_SetArgsError((PyObject *) self, "of_", args);
        }

        static int t_TopOrdAndFloatQueue_init_(t_TopOrdAndFloatQueue *self, PyObject *args, PyObject *kwds)
        {
          jint a0;
          TopOrdAndFloatQueue object((jobject) NULL);

          if (!parseArgs(args, "I", &a0))
          {
            INT_CALL(object = TopOrdAndFloatQueue(a0));
            self->object = object;
            self->parameters[0] = ::org::apache::lucene::facet::PY_TYPE(TopOrdAndFloatQueue$OrdAndValue);
          }
          else
          {
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }
        static PyObject *t_TopOrdAndFloatQueue_get__parameters_(t_TopOrdAndFloatQueue *self, void *data)
        {
          return typeParameters(self->parameters, sizeof(self->parameters));
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/tokenattributes/PositionIncrementAttribute.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace tokenattributes {

          ::java::lang::Class *PositionIncrementAttribute::class$ = NULL;
          jmethodID *PositionIncrementAttribute::mids$ = NULL;
          bool PositionIncrementAttribute::live$ = false;

          jclass PositionIncrementAttribute::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/tokenattributes/PositionIncrementAttribute");

              mids$ = new jmethodID[max_mid];
              mids$[mid_getPositionIncrement_9972fcc56b44e79d] = env->getMethodID(cls, "getPositionIncrement", "()I");
              mids$[mid_setPositionIncrement_040c4cd0390c5aff] = env->getMethodID(cls, "setPositionIncrement", "(I)V");

              class$ = new ::java::lang::Class(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          jint PositionIncrementAttribute::getPositionIncrement() const
          {
            return env->callIntMethod(this$, mids$[mid_getPositionIncrement_9972fcc56b44e79d]);
          }

          void PositionIncrementAttribute::setPositionIncrement(jint a0) const
          {
            env->callVoidMethod(this$, mids$[mid_setPositionIncrement_040c4cd0390c5aff], a0);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace tokenattributes {
          static PyObject *t_PositionIncrementAttribute_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_PositionIncrementAttribute_instance_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_PositionIncrementAttribute_getPositionIncrement(t_PositionIncrementAttribute *self);
          static PyObject *t_PositionIncrementAttribute_setPositionIncrement(t_PositionIncrementAttribute *self, PyObject *arg);
          static PyObject *t_PositionIncrementAttribute_get__positionIncrement(t_PositionIncrementAttribute *self, void *data);
          static int t_PositionIncrementAttribute_set__positionIncrement(t_PositionIncrementAttribute *self, PyObject *arg, void *data);
          static PyGetSetDef t_PositionIncrementAttribute__fields_[] = {
            DECLARE_GETSET_FIELD(t_PositionIncrementAttribute, positionIncrement),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_PositionIncrementAttribute__methods_[] = {
            DECLARE_METHOD(t_PositionIncrementAttribute, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_PositionIncrementAttribute, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_PositionIncrementAttribute, getPositionIncrement, METH_NOARGS),
            DECLARE_METHOD(t_PositionIncrementAttribute, setPositionIncrement, METH_O),
            { NULL, NULL, 0, NULL }
          };

          static PyType_Slot PY_TYPE_SLOTS(PositionIncrementAttribute)[] = {
            { Py_tp_methods, t_PositionIncrementAttribute__methods_ },
            { Py_tp_init, (void *) abstract_init },
            { Py_tp_getset, t_PositionIncrementAttribute__fields_ },
            { 0, NULL }
          };

          static PyType_Def *PY_TYPE_BASES(PositionIncrementAttribute)[] = {
            &PY_TYPE_DEF(::org::apache::lucene::util::Attribute),
            NULL
          };

          DEFINE_TYPE(PositionIncrementAttribute, t_PositionIncrementAttribute, PositionIncrementAttribute);

          void t_PositionIncrementAttribute::install(PyObject *module)
          {
            installType(&PY_TYPE(PositionIncrementAttribute), &PY_TYPE_DEF(PositionIncrementAttribute), module, "PositionIncrementAttribute", 0);
          }

          void t_PositionIncrementAttribute::initialize(PyObject *module)
          {
            PyObject_SetAttrString((PyObject *) PY_TYPE(PositionIncrementAttribute), "class_", make_descriptor(PositionIncrementAttribute::initializeClass, 1));
            PyObject_SetAttrString((PyObject *) PY_TYPE(PositionIncrementAttribute), "wrapfn_", make_descriptor(t_PositionIncrementAttribute::wrap_jobject));
            PyObject_SetAttrString((PyObject *) PY_TYPE(PositionIncrementAttribute), "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_PositionIncrementAttribute_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, PositionIncrementAttribute::initializeClass, 1)))
              return NULL;
            return t_PositionIncrementAttribute::wrap_Object(PositionIncrementAttribute(((t_PositionIncrementAttribute *) arg)->object.this$));
          }
          static PyObject *t_PositionIncrementAttribute_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, PositionIncrementAttribute::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static PyObject *t_PositionIncrementAttribute_getPositionIncrement(t_PositionIncrementAttribute *self)
          {
            jint result;
            OBJ_CALL(result = self->object.getPositionIncrement());
            return PyLong_FromLong((long) result);
          }

          static PyObject *t_PositionIncrementAttribute_setPositionIncrement(t_PositionIncrementAttribute *self, PyObject *arg)
          {
            jint a0;

            if (!parseArg(arg, "I", &a0))
            {
              OBJ_CALL(self->object.setPositionIncrement(a0));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError((PyObject *) self, "setPositionIncrement", arg);
            return NULL;
          }

          static PyObject *t_PositionIncrementAttribute_get__positionIncrement(t_PositionIncrementAttribute *self, void *data)
          {
            jint value;
            OBJ_CALL(value = self->object.getPositionIncrement());
            return PyLong_FromLong((long) value);
          }
          static int t_PositionIncrementAttribute_set__positionIncrement(t_PositionIncrementAttribute *self, PyObject *arg, void *data)
          {
            {
              jint value;
              if (!parseArg(arg, "I", &value))
              {
                INT_CALL(self->object.setPositionIncrement(value));
                return 0;
              }
            }
            PyErr_SetArgsError((PyObject *) self, "positionIncrement", arg);
            return -1;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/tokenattributes/TermToBytesRefAttribute.h"
#include "org/apache/lucene/util/BytesRef.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace tokenattributes {

          ::java::lang::Class *TermToBytesRefAttribute::class$ = NULL;
          jmethodID *TermToBytesRefAttribute::mids$ = NULL;
          bool TermToBytesRefAttribute::live$ = false;

          jclass TermToBytesRefAttribute::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/tokenattributes/TermToBytesRefAttribute");

              mids$ = new jmethodID[max_mid];
              mids$[mid_getBytesRef_7af2ea2e37ce82b8] = env->getMethodID(cls, "getBytesRef", "()Lorg/apache/lucene/util/BytesRef;");

              class$ = new ::java::lang::Class(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          ::org::apache::lucene::util::BytesRef TermToBytesRefAttribute::getBytesRef() const
          {
            return ::org::apache::lucene::util::BytesRef(env->callObjectMethod(this$, mids$[mid_getBytesRef_7af2ea2e37ce82b8]));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace tokenattributes {
          static PyObject *t_TermToBytesRefAttribute_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_TermToBytesRefAttribute_instance_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_TermToBytesRefAttribute_getBytesRef(t_TermToBytesRefAttribute *self);
          static PyObject *t_TermToBytesRefAttribute_get__bytesRef(t_TermToBytesRefAttribute *self, void *data);
          static PyGetSetDef t_TermToBytesRefAttribute__fields_[] = {
            DECLARE_GET_FIELD(t_TermToBytesRefAttribute, bytesRef),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_TermToBytesRefAttribute__methods_[] = {
            DECLARE_METHOD(t_TermToBytesRefAttribute, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_TermToBytesRefAttribute, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_TermToBytesRefAttribute, getBytesRef, METH_NOARGS),
            { NULL, NULL, 0, NULL }
          };

          static PyType_Slot PY_TYPE_SLOTS(TermToBytesRefAttribute)[] = {
            { Py_tp_methods, t_TermToBytesRefAttribute__methods_ },
            { Py_tp_init, (void *) abstract_init },
            { Py_tp_getset, t_TermToBytesRefAttribute__fields_ },
            { 0, NULL }
          };

          static PyType_Def *PY_TYPE_BASES(TermToBytesRefAttribute)[] = {
            &PY_TYPE_DEF(::org::apache::lucene::util::Attribute),
            NULL
          };

          DEFINE_TYPE(TermToBytesRefAttribute, t_TermToBytesRefAttribute, TermToBytesRefAttribute);

          void t_TermToBytesRefAttribute::install(PyObject *module)
          {
            installType(&PY_TYPE(TermToBytesRefAttribute), &PY_TYPE_DEF(TermToBytesRefAttribute), module, "TermToBytesRefAttribute", 0);
          }

          void t_TermToBytesRefAttribute::initialize(PyObject *module)
          {
            PyObject_SetAttrString((PyObject *) PY_TYPE(TermToBytesRefAttribute), "class_", make_descriptor(TermToBytesRefAttribute::initializeClass, 1));
            PyObject_SetAttrString((PyObject *) PY_TYPE(TermToBytesRefAttribute), "wrapfn_", make_descriptor(t_TermToBytesRefAttribute::wrap_jobject));
            PyObject_SetAttrString((PyObject *) PY_TYPE(TermToBytesRefAttribute), "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_TermToBytesRefAttribute_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, TermToBytesRefAttribute::initializeClass, 1)))
              return NULL;
            return t_TermToBytesRefAttribute::wrap_Object(TermToBytesRefAttribute(((t_TermToBytesRefAttribute *) arg)->object.this$));
          }
          static PyObject *t_TermToBytesRefAttribute_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, TermToBytesRefAttribute::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static PyObject *t_TermToBytesRefAttribute_getBytesRef(t_TermToBytesRefAttribute *self)
          {
            ::org::apache::lucene::util::BytesRef result((jobject) NULL);
            OBJ_CALL(result = self->object.getBytesRef());
            return ::org::apache::lucene::util::t_BytesRef::wrap_Object(result);
          }

          static PyObject *t_TermToBytesRefAttribute_get__bytesRef(t_TermToBytesRefAttribute *self, void *data)
          {
            ::org::apache::lucene::util::BytesRef value((jobject) NULL);
            OBJ_CALL(value = self->object.getBytesRef());
            return ::org::apache::lucene::util::t_BytesRef::wrap_Object(value);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/it/ItalianLightStemFilter.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/analysis/TokenStream.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace it {

          ::java::lang::Class *ItalianLightStemFilter::class$ = NULL;
          jmethodID *ItalianLightStemFilter::mids$ = NULL;
          bool ItalianLightStemFilter::live$ = false;

          jclass ItalianLightStemFilter::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/it/ItalianLightStemFilter");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_c26756868a754f4e] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/analysis/TokenStream;)V");
              mids$[mid_incrementToken_8454bd5aa23fd11e] = env->getMethodID(cls, "incrementToken", "()Z");

              class$ = new ::java::lang::Class(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          ItalianLightStemFilter::ItalianLightStemFilter(const ::org::apache::lucene::analysis::TokenStream & a0) : ::org::apache::lucene::analysis::TokenFilter(env->newObject(initializeClass, &mids$, mid_init$_c26756868a754f4e, a0.this$)) {}

          jboolean ItalianLightStemFilter::incrementToken() const
          {
            return env->callBooleanMethod(this$, mids$[mid_incrementToken_8454bd5aa23fd11e]);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace it {
          static PyObject *t_ItalianLightStemFilter_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_ItalianLightStemFilter_instance_(PyTypeObject *type, PyObject *arg);
          static int t_ItalianLightStemFilter_init_(t_ItalianLightStemFilter *self, PyObject *args, PyObject *kwds);
          static PyObject *t_ItalianLightStemFilter_incrementToken(t_ItalianLightStemFilter *self, PyObject *args);

          static PyMethodDef t_ItalianLightStemFilter__methods_[] = {
            DECLARE_METHOD(t_ItalianLightStemFilter, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_ItalianLightStemFilter, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_ItalianLightStemFilter, incrementToken, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          static PyType_Slot PY_TYPE_SLOTS(ItalianLightStemFilter)[] = {
            { Py_tp_methods, t_ItalianLightStemFilter__methods_ },
            { Py_tp_init, (void *) t_ItalianLightStemFilter_init_ },
            { 0, NULL }
          };

          static PyType_Def *PY_TYPE_BASES(ItalianLightStemFilter)[] = {
            &PY_TYPE_DEF(::org::apache::lucene::analysis::TokenFilter),
            NULL
          };

          DEFINE_TYPE(ItalianLightStemFilter, t_ItalianLightStemFilter, ItalianLightStemFilter);

          void t_ItalianLightStemFilter::install(PyObject *module)
          {
            installType(&PY_TYPE(ItalianLightStemFilter), &PY_TYPE_DEF(ItalianLightStemFilter), module, "ItalianLightStemFilter", 0);
          }

          void t_ItalianLightStemFilter::initialize(PyObject *module)
          {
            PyObject_SetAttrString((PyObject *) PY_TYPE(ItalianLightStemFilter), "class_", make_descriptor(ItalianLightStemFilter::initializeClass, 1));
            PyObject_SetAttrString((PyObject *) PY_TYPE(ItalianLightStemFilter), "wrapfn_", make_descriptor(t_ItalianLightStemFilter::wrap_jobject));
            PyObject_SetAttrString((PyObject *) PY_TYPE(ItalianLightStemFilter), "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_ItalianLightStemFilter_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, ItalianLightStemFilter::initializeClass, 1)))
              return NULL;
            return t_ItalianLightStemFilter::wrap_Object(ItalianLightStemFilter(((t_ItalianLightStemFilter *) arg)->object.this$));
          }
          static PyObject *t_ItalianLightStemFilter_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, ItalianLightStemFilter::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_ItalianLightStemFilter_init_(t_ItalianLightStemFilter *self, PyObject *args, PyObject *kwds)
          {
            ::org::apache::lucene::analysis::TokenStream a0((jobject) NULL);
            ItalianLightStemFilter object((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::analysis::TokenStream::initializeClass, &a0))
            {
              INT_CALL(object = ItalianLightStemFilter(a0));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_ItalianLightStemFilter_incrementToken(t_ItalianLightStemFilter *self, PyObject *args)
          {
            jboolean result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.incrementToken());
              Py_RETURN_BOOL(result);
            }

            return callSuper(PY_TYPE(ItalianLightStemFilter), (PyObject *) self, "incrementToken", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/de/GermanNormalizationFilter.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/analysis/TokenStream.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace de {

          ::java::lang::Class *GermanNormalizationFilter::class$ = NULL;
          jmethodID *GermanNormalizationFilter::mids$ = NULL;
          bool GermanNormalizationFilter::live$ = false;

          jclass GermanNormalizationFilter::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/de/GermanNormalizationFilter");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_c26756868a754f4e] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/analysis/TokenStream;)V");
              mids$[mid_incrementToken_8454bd5aa23fd11e] = env->getMethodID(cls, "incrementToken", "()Z");

              class$ = new ::java::lang::Class(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          GermanNormalizationFilter::GermanNormalizationFilter(const ::org::apache::lucene::analysis::TokenStream & a0) : ::org::apache::lucene::analysis::TokenFilter(env->newObject(initializeClass, &mids$, mid_init$_c26756868a754f4e, a0.this$)) {}

          jboolean GermanNormalizationFilter::incrementToken() const
          {
            return env->callBooleanMethod(this$, mids$[mid_incrementToken_8454bd5aa23fd11e]);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace de {
          static PyObject *t_GermanNormalizationFilter_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_GermanNormalizationFilter_instance_(PyTypeObject *type, PyObject *arg);
          static int t_GermanNormalizationFilter_init_(t_GermanNormalizationFilter *self, PyObject *args, PyObject *kwds);
          static PyObject *t_GermanNormalizationFilter_incrementToken(t_GermanNormalizationFilter *self, PyObject *args);

          static PyMethodDef t_GermanNormalizationFilter__methods_[] = {
            DECLARE_METHOD(t_GermanNormalizationFilter, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_GermanNormalizationFilter, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_GermanNormalizationFilter, incrementToken, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          static PyType_Slot PY_TYPE_SLOTS(GermanNormalizationFilter)[] = {
            { Py_tp_methods, t_GermanNormalizationFilter__methods_ },
            { Py_tp_init, (void *) t_GermanNormalizationFilter_init_ },
            { 0, NULL }
          };

          static PyType_Def *PY_TYPE_BASES(GermanNormalizationFilter)[] = {
            &PY_TYPE_DEF(::org::apache::lucene::analysis::TokenFilter),
            NULL
          };

          DEFINE_TYPE(GermanNormalizationFilter, t_GermanNormalizationFilter, GermanNormalizationFilter);

          void t_GermanNormalizationFilter::install(PyObject *module)
          {
            installType(&PY_TYPE(GermanNormalizationFilter), &PY_TYPE_DEF(GermanNormalizationFilter), module, "GermanNormalizationFilter", 0);
          }

          void t_GermanNormalizationFilter::initialize(PyObject *module)
          {
            PyObject_SetAttrString((PyObject *) PY_TYPE(GermanNormalizationFilter), "class_", make_descriptor(GermanNormalizationFilter::initializeClass, 1));
            PyObject_SetAttrString((PyObject *) PY_TYPE(GermanNormalizationFilter), "wrapfn_", make_descriptor(t_GermanNormalizationFilter::wrap_jobject));
            PyObject_SetAttrString((PyObject *) PY_TYPE(GermanNormalizationFilter), "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_GermanNormalizationFilter_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, GermanNormalizationFilter::initializeClass, 1)))
              return NULL;
            return t_GermanNormalizationFilter::wrap_Object(GermanNormalizationFilter(((t_GermanNormalizationFilter *) arg)->object.this$));
          }
          static PyObject *t_GermanNormalizationFilter_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, GermanNormalizationFilter::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_GermanNormalizationFilter_init_(t_GermanNormalizationFilter *self, PyObject *args, PyObject *kwds)
          {
            ::org::apache::lucene::analysis::TokenStream a0((jobject) NULL);
            GermanNormalizationFilter object((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::analysis::TokenStream::initializeClass, &a0))
            {
              INT_CALL(object = GermanNormalizationFilter(a0));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_GermanNormalizationFilter_incrementToken(t_GermanNormalizationFilter *self, PyObject *args)
          {
            jboolean result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.incrementToken());
              Py_RETURN_BOOL(result);
            }

            return callSuper(PY_TYPE(GermanNormalizationFilter), (PyObject *) self, "incrementToken", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/store/OutputStreamIndexOutput.h"
#include "java/io/OutputStream.h"
#include "java/lang/String.h"
#include "java/io/IOException.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace store {

        ::java::lang::Class *OutputStreamIndexOutput::class$ = NULL;
        jmethodID *OutputStreamIndexOutput::mids$ = NULL;
        bool OutputStreamIndexOutput::live$ = false;

        jclass OutputStreamIndexOutput::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/store/OutputStreamIndexOutput");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_21a35b5e7d0be5d2] = env->getMethodID(cls, "<init>", "(Ljava/lang/String;Ljava/lang/String;Ljava/io/OutputStream;I)V");
            mids$[mid_close_f2cc1bce94666404] = env->getMethodID(cls, "close", "()V");
            mids$[mid_getChecksum_2e5ae9edcb9b072f] = env->getMethodID(cls, "getChecksum", "()J");
            mids$[mid_getFilePointer_2e5ae9edcb9b072f] = env->getMethodID(cls, "getFilePointer", "()J");
            mids$[mid_writeByte_9c36fec3bac1d0c7] = env->getMethodID(cls, "writeByte", "(B)V");
            mids$[mid_writeBytes_43fdd39c09bb2fad] = env->getMethodID(cls, "writeBytes", "([BII)V");

            class$ = new ::java::lang::Class(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        OutputStreamIndexOutput::OutputStreamIndexOutput(const ::java::lang::String & a0, const ::java::lang::String & a1, const ::java::io::OutputStream & a2, jint a3) : ::org::apache::lucene::store::IndexOutput(env->newObject(initializeClass, &mids$, mid_init$_21a35b5e7d0be5d2, a0.this$, a1.this$, a2.this$, a3)) {}

        void OutputStreamIndexOutput::close() const
        {
          env->callVoidMethod(this$, mids$[mid_close_f2cc1bce94666404]);
        }

        jlong OutputStreamIndexOutput::getChecksum() const
        {
          return env->callLongMethod(this$, mids$[mid_getChecksum_2e5ae9edcb9b072f]);
        }

        jlong OutputStreamIndexOutput::getFilePointer() const
        {
          return env->callLongMethod(this$, mids$[mid_getFilePointer_2e5ae9edcb9b072f]);
        }

        void OutputStreamIndexOutput::writeByte(jbyte a0) const
        {
          env->callVoidMethod(this$, mids$[mid_writeByte_9c36fec3bac1d0c7], a0);
        }

        void OutputStreamIndexOutput::writeBytes(const JArray< jbyte > & a0, jint a1, jint a2) const
        {
          env->callVoidMethod(this$, mids$[mid_writeBytes_43fdd39c09bb2fad], a0.this$, a1, a2);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace store {
        static PyObject *t_OutputStreamIndexOutput_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_OutputStreamIndexOutput_instance_(PyTypeObject *type, PyObject *arg);
        static int t_OutputStreamIndexOutput_init_(t_OutputStreamIndexOutput *self, PyObject *args, PyObject *kwds);
        static PyObject *t_OutputStreamIndexOutput_close(t_OutputStreamIndexOutput *self, PyObject *args);
        static PyObject *t_OutputStreamIndexOutput_getChecksum(t_OutputStreamIndexOutput *self, PyObject *args);
        static PyObject *t_OutputStreamIndexOutput_getFilePointer(t_OutputStreamIndexOutput *self, PyObject *args);
        static PyObject *t_OutputStreamIndexOutput_writeByte(t_OutputStreamIndexOutput *self, PyObject *args);
        static PyObject *t_OutputStreamIndexOutput_writeBytes(t_OutputStreamIndexOutput *self, PyObject *args);
        static PyObject *t_OutputStreamIndexOutput_get__checksum(t_OutputStreamIndexOutput *self, void *data);
        static PyObject *t_OutputStreamIndexOutput_get__filePointer(t_OutputStreamIndexOutput *self, void *data);
        static PyGetSetDef t_OutputStreamIndexOutput__fields_[] = {
          DECLARE_GET_FIELD(t_OutputStreamIndexOutput, checksum),
          DECLARE_GET_FIELD(t_OutputStreamIndexOutput, filePointer),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_OutputStreamIndexOutput__methods_[] = {
          DECLARE_METHOD(t_OutputStreamIndexOutput, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_OutputStreamIndexOutput, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_OutputStreamIndexOutput, close, METH_VARARGS),
          DECLARE_METHOD(t_OutputStreamIndexOutput, getChecksum, METH_VARARGS),
          DECLARE_METHOD(t_OutputStreamIndexOutput, getFilePointer, METH_VARARGS),
          DECLARE_METHOD(t_OutputStreamIndexOutput, writeByte, METH_VARARGS),
          DECLARE_METHOD(t_OutputStreamIndexOutput, writeBytes, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        static PyType_Slot PY_TYPE_SLOTS(OutputStreamIndexOutput)[] = {
          { Py_tp_methods, t_OutputStreamIndexOutput__methods_ },
          { Py_tp_init, (void *) t_OutputStreamIndexOutput_init_ },
          { Py_tp_getset, t_OutputStreamIndexOutput__fields_ },
          { 0, NULL }
        };

        static PyType_Def *PY_TYPE_BASES(OutputStreamIndexOutput)[] = {
          &PY_TYPE_DEF(::org::apache::lucene::store::IndexOutput),
          NULL
        };

        DEFINE_TYPE(OutputStreamIndexOutput, t_OutputStreamIndexOutput, OutputStreamIndexOutput);

        void t_OutputStreamIndexOutput::install(PyObject *module)
        {
          installType(&PY_TYPE(OutputStreamIndexOutput), &PY_TYPE_DEF(OutputStreamIndexOutput), module, "OutputStreamIndexOutput", 0);
        }

        void t_OutputStreamIndexOutput::initialize(PyObject *module)
        {
          PyObject_SetAttrString((PyObject *) PY_TYPE(OutputStreamIndexOutput), "class_", make_descriptor(OutputStreamIndexOutput::initializeClass, 1));
          PyObject_SetAttrString((PyObject *) PY_TYPE(OutputStreamIndexOutput), "wrapfn_", make_descriptor(t_OutputStreamIndexOutput::wrap_jobject));
          PyObject_SetAttrString((PyObject *) PY_TYPE(OutputStreamIndexOutput), "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_OutputStreamIndexOutput_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, OutputStreamIndexOutput::initializeClass, 1)))
            return NULL;
          return t_OutputStreamIndexOutput::wrap_Object(OutputStreamIndexOutput(((t_OutputStreamIndexOutput *) arg)->object.this$));
        }
        static PyObject *t_OutputStreamIndexOutput_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, OutputStreamIndexOutput::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_OutputStreamIndexOutput_init_(t_OutputStreamIndexOutput *self, PyObject *args, PyObject *kwds)
        {
          ::java::lang::String a0((jobject) NULL);
          ::java::lang::String a1((jobject) NULL);
          ::java::io::OutputStream a2((jobject) NULL);
          jint a3;
          OutputStreamIndexOutput object((jobject) NULL);

          if (!parseArgs(args, "sskI", ::java::io::OutputStream::initializeClass, &a0, &a1, &a2, &a3))
          {
            INT_CALL(object = OutputStreamIndexOutput(a0, a1, a2, a3));
            self->object = object;
          }
          else
          {
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }

        static PyObject *t_OutputStreamIndexOutput_close(t_OutputStreamIndexOutput *self, PyObject *args)
        {

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(self->object.close());
            Py_RETURN_NONE;
          }

          return callSuper(PY_TYPE(OutputStreamIndexOutput), (PyObject *) self, "close", args, 2);
        }

        static PyObject *t_OutputStreamIndexOutput_getChecksum(t_OutputStreamIndexOutput *self, PyObject *args)
        {
          jlong result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.getChecksum());
            return PyLong_FromLongLong((PY_LONG_LONG) result);
          }

          return callSuper(PY_TYPE(OutputStreamIndexOutput), (PyObject *) self, "getChecksum", args, 2);
        }

        static PyObject *t_OutputStreamIndexOutput_getFilePointer(t_OutputStreamIndexOutput *self, PyObject *args)
        {
          jlong result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.getFilePointer());
            return PyLong_FromLongLong((PY_LONG_LONG) result);
          }

          return callSuper(PY_TYPE(OutputStreamIndexOutput), (PyObject *) self, "getFilePointer", args, 2);
        }

        static PyObject *t_OutputStreamIndexOutput_writeByte(t_OutputStreamIndexOutput *self, PyObject *args)
        {
          jbyte a0;

          if (!parseArgs(args, "B", &a0))
          {
            OBJ_CALL(self->object.writeByte(a0));
            Py_RETURN_NONE;
          }

          return callSuper(PY_TYPE(OutputStreamIndexOutput), (PyObject *) self, "writeByte", args, 2);
        }

        static PyObject *t_OutputStreamIndexOutput_writeBytes(t_OutputStreamIndexOutput *self, PyObject *args)
        {
          JArray< jbyte > a0((jobject) NULL);
          jint a1;
          jint a2;

          if (!parseArgs(args, "[BII", &a0, &a1, &a2))
          {
            OBJ_CALL(self->object.writeBytes(a0, a1, a2));
            Py_RETURN_NONE;
          }

          return callSuper(PY_TYPE(OutputStreamIndexOutput), (PyObject *) self, "writeBytes", args, 2);
        }

        static PyObject *t_OutputStreamIndexOutput_get__checksum(t_OutputStreamIndexOutput *self, void *data)
        {
          jlong value;
          OBJ_CALL(value = self->object.getChecksum());
          return PyLong_FromLongLong((PY_LONG_LONG) value);
        }

        static PyObject *t_OutputStreamIndexOutput_get__filePointer(t_OutputStreamIndexOutput *self, void *data)
        {
          jlong value;
          OBJ_CALL(value = self->object.getFilePointer());
          return PyLong_FromLongLong((PY_LONG_LONG) value);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/codecs/blocktree/BlockTreeTermsWriter.h"
#include "org/apache/lucene/index/Fields.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/codecs/NormsProducer.h"
#include "org/apache/lucene/codecs/PostingsWriterBase.h"
#include "org/apache/lucene/index/SegmentWriteState.h"
#include "java/io/IOException.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace codecs {
        namespace blocktree {

          ::java::lang::Class *BlockTreeTermsWriter::class$ = NULL;
          jmethodID *BlockTreeTermsWriter::mids$ = NULL;
          bool BlockTreeTermsWriter::live$ = false;
          jint BlockTreeTermsWriter::DEFAULT_MAX_BLOCK_SIZE = (jint) 0;
          jint BlockTreeTermsWriter::DEFAULT_MIN_BLOCK_SIZE = (jint) 0;

          jclass BlockTreeTermsWriter::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/codecs/blocktree/BlockTreeTermsWriter");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_6610f1188867ac3d] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/index/SegmentWriteState;Lorg/apache/lucene/codecs/PostingsWriterBase;II)V");
              mids$[mid_close_f2cc1bce94666404] = env->getMethodID(cls, "close", "()V");
              mids$[mid_validateSettings_438c62480c481c65] = env->getStaticMethodID(cls, "validateSettings", "(II)V");
              mids$[mid_write_a02f5612a398fd43] = env->getMethodID(cls, "write", "(Lorg/apache/lucene/index/Fields;Lorg/apache/lucene/codecs/NormsProducer;)V");

              class$ = new ::java::lang::Class(cls);
              cls = (jclass) class$->this$;

              DEFAULT_MAX_BLOCK_SIZE = env->getStaticIntField(cls, "DEFAULT_MAX_BLOCK_SIZE");
              DEFAULT_MIN_BLOCK_SIZE = env->getStaticIntField(cls, "DEFAULT_MIN_BLOCK_SIZE");
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          BlockTreeTermsWriter::BlockTreeTermsWriter(const ::org::apache::lucene::index::SegmentWriteState & a0, const ::org::apache::lucene::codecs::PostingsWriterBase & a1, jint a2, jint a3) : ::org::apache::lucene::codecs::FieldsConsumer(env->newObject(initializeClass, &mids$, mid_init$_6610f1188867ac3d, a0.this$, a1.this$, a2, a3)) {}

          void BlockTreeTermsWriter::close() const
          {
            env->callVoidMethod(this$, mids$[mid_close_f2cc1bce94666404]);
          }

          void BlockTreeTermsWriter::validateSettings(jint a0, jint a1)
          {
            jclass cls = env->getClass(initializeClass);
            env->callStaticVoidMethod(cls, mids$[mid_validateSettings_438c62480c481c65], a0, a1);
          }

          void BlockTreeTermsWriter::write(const ::org::apache::lucene::index::Fields & a0, const ::org::apache::lucene::codecs::NormsProducer & a1) const
          {
            env->callVoidMethod(this$, mids$[mid_write_a02f5612a398fd43], a0.this$, a1.this$);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace codecs {
        namespace blocktree {
          static PyObject *t_BlockTreeTermsWriter_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_BlockTreeTermsWriter_instance_(PyTypeObject *type, PyObject *arg);
          static int t_BlockTreeTermsWriter_init_(t_BlockTreeTermsWriter *self, PyObject *args, PyObject *kwds);
          static PyObject *t_BlockTreeTermsWriter_close(t_BlockTreeTermsWriter *self, PyObject *args);
          static PyObject *t_BlockTreeTermsWriter_validateSettings(PyTypeObject *type, PyObject *args);
          static PyObject *t_BlockTreeTermsWriter_write(t_BlockTreeTermsWriter *self, PyObject *args);

          static PyMethodDef t_BlockTreeTermsWriter__methods_[] = {
            DECLARE_METHOD(t_BlockTreeTermsWriter, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_BlockTreeTermsWriter, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_BlockTreeTermsWriter, close, METH_VARARGS),
            DECLARE_METHOD(t_BlockTreeTermsWriter, validateSettings, METH_VARARGS | METH_CLASS),
            DECLARE_METHOD(t_BlockTreeTermsWriter, write, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          static PyType_Slot PY_TYPE_SLOTS(BlockTreeTermsWriter)[] = {
            { Py_tp_methods, t_BlockTreeTermsWriter__methods_ },
            { Py_tp_init, (void *) t_BlockTreeTermsWriter_init_ },
            { 0, NULL }
          };

          static PyType_Def *PY_TYPE_BASES(BlockTreeTermsWriter)[] = {
            &PY_TYPE_DEF(::org::apache::lucene::codecs::FieldsConsumer),
            NULL
          };

          DEFINE_TYPE(BlockTreeTermsWriter, t_BlockTreeTermsWriter, BlockTreeTermsWriter);

          void t_BlockTreeTermsWriter::install(PyObject *module)
          {
            installType(&PY_TYPE(BlockTreeTermsWriter), &PY_TYPE_DEF(BlockTreeTermsWriter), module, "BlockTreeTermsWriter", 0);
          }

          void t_BlockTreeTermsWriter::initialize(PyObject *module)
          {
            PyObject_SetAttrString((PyObject *) PY_TYPE(BlockTreeTermsWriter), "class_", make_descriptor(BlockTreeTermsWriter::initializeClass, 1));
            PyObject_SetAttrString((PyObject *) PY_TYPE(BlockTreeTermsWriter), "wrapfn_", make_descriptor(t_BlockTreeTermsWriter::wrap_jobject));
            PyObject_SetAttrString((PyObject *) PY_TYPE(BlockTreeTermsWriter), "boxfn_", make_descriptor(boxObject));
            env->getClass(BlockTreeTermsWriter::initializeClass);
            PyObject_SetAttrString((PyObject *) PY_TYPE(BlockTreeTermsWriter), "DEFAULT_MAX_BLOCK_SIZE", make_descriptor(BlockTreeTermsWriter::DEFAULT_MAX_BLOCK_SIZE));
            PyObject_SetAttrString((PyObject *) PY_TYPE(BlockTreeTermsWriter), "DEFAULT_MIN_BLOCK_SIZE", make_descriptor(BlockTreeTermsWriter::DEFAULT_MIN_BLOCK_SIZE));
          }

          static PyObject *t_BlockTreeTermsWriter_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, BlockTreeTermsWriter::initializeClass, 1)))
              return NULL;
            return t_BlockTreeTermsWriter::wrap_Object(BlockTreeTermsWriter(((t_BlockTreeTermsWriter *) arg)->object.this$));
          }
          static PyObject *t_BlockTreeTermsWriter_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, BlockTreeTermsWriter::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_BlockTreeTermsWriter_init_(t_BlockTreeTermsWriter *self, PyObject *args, PyObject *kwds)
          {
            ::org::apache::lucene::index::SegmentWriteState a0((jobject) NULL);
            ::org::apache::lucene::codecs::PostingsWriterBase a1((jobject) NULL);
            jint a2;
            jint a3;
            BlockTreeTermsWriter object((jobject) NULL);

            if (!parseArgs(args, "kkII", ::org::apache::lucene::index::SegmentWriteState::initializeClass, ::org::apache::lucene::codecs::PostingsWriterBase::initializeClass, &a0, &a1, &a2, &a3))
            {
              INT_CALL(object = BlockTreeTermsWriter(a0, a1, a2, a3));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_BlockTreeTermsWriter_close(t_BlockTreeTermsWriter *self, PyObject *args)
          {

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(self->object.close());
              Py_RETURN_NONE;
            }

            return callSuper(PY_TYPE(BlockTreeTermsWriter), (PyObject *) self, "close", args, 2);
          }

          static PyObject *t_BlockTreeTermsWriter_validateSettings(PyTypeObject *type, PyObject *args)
          {
            jint a0;
            jint a1;

            if (!parseArgs(args, "II", &a0, &a1))
            {
              OBJ_CALL(::org::apache::lucene::codecs::blocktree::BlockTreeTermsWriter::validateSettings(a0, a1));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError(type, "validateSettings", args);
            return NULL;
          }

          static PyObject *t_BlockTreeTermsWriter_write(t_BlockTreeTermsWriter *self, PyObject *args)
          {
            ::org::apache::lucene::index::Fields a0((jobject) NULL);
            ::org::apache::lucene::codecs::NormsProducer a1((jobject) NULL);

            if (!parseArgs(args, "kk", ::org::apache::lucene::index::Fields::initializeClass, ::org::apache::lucene::codecs::NormsProducer::initializeClass, &a0, &a1))
            {
              OBJ_CALL(self->object.write(a0, a1));
              Py_RETURN_NONE;
            }

            return callSuper(PY_TYPE(BlockTreeTermsWriter), (PyObject *) self, "write", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/core/StopFilterFactory.h"
#include "java/util/Map.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/analysis/TokenStream.h"
#include "org/apache/lucene/analysis/util/ResourceLoader.h"
#include "java/lang/String.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/analysis/util/ResourceLoaderAware.h"
#include "org/apache/lucene/analysis/CharArraySet.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace core {

          ::java::lang::Class *StopFilterFactory::class$ = NULL;
          jmethodID *StopFilterFactory::mids$ = NULL;
          bool StopFilterFactory::live$ = false;
          ::java::lang::String *StopFilterFactory::FORMAT_SNOWBALL = NULL;
          ::java::lang::String *StopFilterFactory::FORMAT_WORDSET = NULL;
          ::java::lang::String *StopFilterFactory::NAME = NULL;

          jclass StopFilterFactory::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/core/StopFilterFactory");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_408bd889ee3beae5] = env->getMethodID(cls, "<init>", "(Ljava/util/Map;)V");
              mids$[mid_create_6de1e28d9d10cd9e] = env->getMethodID(cls, "create", "(Lorg/apache/lucene/analysis/TokenStream;)Lorg/apache/lucene/analysis/TokenStream;");
              mids$[mid_getStopWords_7aec8e69a9807ca1] = env->getMethodID(cls, "getStopWords", "()Lorg/apache/lucene/analysis/CharArraySet;");
              mids$[mid_inform_b4ee53c41a5f629f] = env->getMethodID(cls, "inform", "(Lorg/apache/lucene/analysis/util/ResourceLoader;)V");
              mids$[mid_isIgnoreCase_8454bd5aa23fd11e] = env->getMethodID(cls, "isIgnoreCase", "()Z");

              class$ = new ::java::lang::Class(cls);
              cls = (jclass) class$->this$;

              FORMAT_SNOWBALL = new ::java::lang::String(env->getStaticObjectField(cls, "FORMAT_SNOWBALL", "Ljava/lang/String;"));
              FORMAT_WORDSET = new ::java::lang::String(env->getStaticObjectField(cls, "FORMAT_WORDSET", "Ljava/lang/String;"));
              NAME = new ::java::lang::String(env->getStaticObjectField(cls, "NAME", "Ljava/lang/String;"));
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          StopFilterFactory::StopFilterFactory(const ::java::util::Map & a0) : ::org::apache::lucene::analysis::util::TokenFilterFactory(env->newObject(initializeClass, &mids$, mid_init$_408bd889ee3beae5, a0.this$)) {}

          ::org::apache::lucene::analysis::TokenStream StopFilterFactory::create(const ::org::apache::lucene::analysis::TokenStream & a0) const
          {
            return ::org::apache::lucene::analysis::TokenStream(env->callObjectMethod(this$, mids$[mid_create_6de1e28d9d10cd9e], a0.this$));
          }

          ::org::apache::lucene::analysis::CharArraySet StopFilterFactory::getStopWords() const
          {
            return ::org::apache::lucene::analysis::CharArraySet(env->callObjectMethod(this$, mids$[mid_getStopWords_7aec8e69a9807ca1]));
          }

          void StopFilterFactory::inform(const ::org::apache::lucene::analysis::util::ResourceLoader & a0) const
          {
            env->callVoidMethod(this$, mids$[mid_inform_b4ee53c41a5f629f], a0.this$);
          }

          jboolean StopFilterFactory::isIgnoreCase() const
          {
            return env->callBooleanMethod(this$, mids$[mid_isIgnoreCase_8454bd5aa23fd11e]);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace core {
          static PyObject *t_StopFilterFactory_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_StopFilterFactory_instance_(PyTypeObject *type, PyObject *arg);
          static int t_StopFilterFactory_init_(t_StopFilterFactory *self, PyObject *args, PyObject *kwds);
          static PyObject *t_StopFilterFactory_create(t_StopFilterFactory *self, PyObject *args);
          static PyObject *t_StopFilterFactory_getStopWords(t_StopFilterFactory *self);
          static PyObject *t_StopFilterFactory_inform(t_StopFilterFactory *self, PyObject *arg);
          static PyObject *t_StopFilterFactory_isIgnoreCase(t_StopFilterFactory *self);
          static PyObject *t_StopFilterFactory_get__ignoreCase(t_StopFilterFactory *self, void *data);
          static PyObject *t_StopFilterFactory_get__stopWords(t_StopFilterFactory *self, void *data);
          static PyGetSetDef t_StopFilterFactory__fields_[] = {
            DECLARE_GET_FIELD(t_StopFilterFactory, ignoreCase),
            DECLARE_GET_FIELD(t_StopFilterFactory, stopWords),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_StopFilterFactory__methods_[] = {
            DECLARE_METHOD(t_StopFilterFactory, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_StopFilterFactory, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_StopFilterFactory, create, METH_VARARGS),
            DECLARE_METHOD(t_StopFilterFactory, getStopWords, METH_NOARGS),
            DECLARE_METHOD(t_StopFilterFactory, inform, METH_O),
            DECLARE_METHOD(t_StopFilterFactory, isIgnoreCase, METH_NOARGS),
            { NULL, NULL, 0, NULL }
          };

          static PyType_Slot PY_TYPE_SLOTS(StopFilterFactory)[] = {
            { Py_tp_methods, t_StopFilterFactory__methods_ },
            { Py_tp_init, (void *) t_StopFilterFactory_init_ },
            { Py_tp_getset, t_StopFilterFactory__fields_ },
            { 0, NULL }
          };

          static PyType_Def *PY_TYPE_BASES(StopFilterFactory)[] = {
            &PY_TYPE_DEF(::org::apache::lucene::analysis::util::TokenFilterFactory),
            NULL
          };

          DEFINE_TYPE(StopFilterFactory, t_StopFilterFactory, StopFilterFactory);

          void t_StopFilterFactory::install(PyObject *module)
          {
            installType(&PY_TYPE(StopFilterFactory), &PY_TYPE_DEF(StopFilterFactory), module, "StopFilterFactory", 0);
          }

          void t_StopFilterFactory::initialize(PyObject *module)
          {
            PyObject_SetAttrString((PyObject *) PY_TYPE(StopFilterFactory), "class_", make_descriptor(StopFilterFactory::initializeClass, 1));
            PyObject_SetAttrString((PyObject *) PY_TYPE(StopFilterFactory), "wrapfn_", make_descriptor(t_StopFilterFactory::wrap_jobject));
            PyObject_SetAttrString((PyObject *) PY_TYPE(StopFilterFactory), "boxfn_", make_descriptor(boxObject));
            env->getClass(StopFilterFactory::initializeClass);
            PyObject_SetAttrString((PyObject *) PY_TYPE(StopFilterFactory), "FORMAT_SNOWBALL", make_descriptor(j2p(*StopFilterFactory::FORMAT_SNOWBALL)));
            PyObject_SetAttrString((PyObject *) PY_TYPE(StopFilterFactory), "FORMAT_WORDSET", make_descriptor(j2p(*StopFilterFactory::FORMAT_WORDSET)));
            PyObject_SetAttrString((PyObject *) PY_TYPE(StopFilterFactory), "NAME", make_descriptor(j2p(*StopFilterFactory::NAME)));
          }

          static PyObject *t_StopFilterFactory_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, StopFilterFactory::initializeClass, 1)))
              return NULL;
            return t_StopFilterFactory::wrap_Object(StopFilterFactory(((t_StopFilterFactory *) arg)->object.this$));
          }
          static PyObject *t_StopFilterFactory_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, StopFilterFactory::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_StopFilterFactory_init_(t_StopFilterFactory *self, PyObject *args, PyObject *kwds)
          {
            ::java::util::Map a0((jobject) NULL);
            PyTypeObject **p0;
            StopFilterFactory object((jobject) NULL);

            if (!parseArgs(args, "K", ::java::util::Map::initializeClass, &a0, &p0, ::java::util::t_Map::parameters_))
            {
              INT_CALL(object = StopFilterFactory(a0));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_StopFilterFactory_create(t_StopFilterFactory *self, PyObject *args)
          {
            ::org::apache::lucene::analysis::TokenStream a0((jobject) NULL);
            ::org::apache::lucene::analysis::TokenStream result((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::analysis::TokenStream::initializeClass, &a0))
            {
              OBJ_CALL(result = self->object.create(a0));
              return ::org::apache::lucene::analysis::t_TokenStream::wrap_Object(result);
            }

            return callSuper(PY_TYPE(StopFilterFactory), (PyObject *) self, "create", args, 2);
          }

          static PyObject *t_StopFilterFactory_getStopWords(t_StopFilterFactory *self)
          {
            ::org::apache::lucene::analysis::CharArraySet result((jobject) NULL);
            OBJ_CALL(result = self->object.getStopWords());
            return ::org::apache::lucene::analysis::t_CharArraySet::wrap_Object(result);
          }

          static PyObject *t_StopFilterFactory_inform(t_StopFilterFactory *self, PyObject *arg)
          {
            ::org::apache::lucene::analysis::util::ResourceLoader a0((jobject) NULL);

            if (!parseArg(arg, "k", ::org::apache::lucene::analysis::util::ResourceLoader::initializeClass, &a0))
            {
              OBJ_CALL(self->object.inform(a0));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError((PyObject *) self, "inform", arg);
            return NULL;
          }

          static PyObject *t_StopFilterFactory_isIgnoreCase(t_StopFilterFactory *self)
          {
            jboolean result;
            OBJ_CALL(result = self->object.isIgnoreCase());
            Py_RETURN_BOOL(result);
          }

          static PyObject *t_StopFilterFactory_get__ignoreCase(t_StopFilterFactory *self, void *data)
          {
            jboolean value;
            OBJ_CALL(value = self->object.isIgnoreCase());
            Py_RETURN_BOOL(value);
          }

          static PyObject *t_StopFilterFactory_get__stopWords(t_StopFilterFactory *self, void *data)
          {
            ::org::apache::lucene::analysis::CharArraySet value((jobject) NULL);
            OBJ_CALL(value = self->object.getStopWords());
            return ::org::apache::lucene::analysis::t_CharArraySet::wrap_Object(value);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queryparser/classic/QueryParserConstants.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace classic {

          ::java::lang::Class *QueryParserConstants::class$ = NULL;
          jmethodID *QueryParserConstants::mids$ = NULL;
          bool QueryParserConstants::live$ = false;
          jint QueryParserConstants::AND = (jint) 0;
          jint QueryParserConstants::BAREOPER = (jint) 0;
          jint QueryParserConstants::Boost = (jint) 0;
          jint QueryParserConstants::CARAT = (jint) 0;
          jint QueryParserConstants::COLON = (jint) 0;
          jint QueryParserConstants::DEFAULT = (jint) 0;
          jint QueryParserConstants::EOF = (jint) 0;
          jint QueryParserConstants::FUZZY_SLOP = (jint) 0;
          jint QueryParserConstants::LPAREN = (jint) 0;
          jint QueryParserConstants::MINUS = (jint) 0;
          jint QueryParserConstants::NOT = (jint) 0;
          jint QueryParserConstants::NUMBER = (jint) 0;
          jint QueryParserConstants::OR = (jint) 0;
          jint QueryParserConstants::PLUS = (jint) 0;
          jint QueryParserConstants::PREFIXTERM = (jint) 0;
          jint QueryParserConstants::QUOTED = (jint) 0;
          jint QueryParserConstants::RANGEEX_END = (jint) 0;
          jint QueryParserConstants::RANGEEX_START = (jint) 0;
          jint QueryParserConstants::RANGEIN_END = (jint) 0;
          jint QueryParserConstants::RANGEIN_START = (jint) 0;
          jint QueryParserConstants::RANGE_GOOP = (jint) 0;
          jint QueryParserConstants::RANGE_QUOTED = (jint) 0;
          jint QueryParserConstants::RANGE_TO = (jint) 0;
          jint QueryParserConstants::REGEXPTERM = (jint) 0;
          jint QueryParserConstants::RPAREN = (jint) 0;
          jint QueryParserConstants::Range = (jint) 0;
          jint QueryParserConstants::STAR = (jint) 0;
          jint QueryParserConstants::TERM = (jint) 0;
          jint QueryParserConstants::WILDTERM = (jint) 0;
          jint QueryParserConstants::_ESCAPED_CHAR = (jint) 0;
          jint QueryParserConstants::_NUM_CHAR = (jint) 0;
          jint QueryParserConstants::_QUOTED_CHAR = (jint) 0;
          jint QueryParserConstants::_TERM_CHAR = (jint) 0;
          jint QueryParserConstants::_TERM_START_CHAR = (jint) 0;
          jint QueryParserConstants::_WHITESPACE = (jint) 0;
          JArray< ::java::lang::String > *QueryParserConstants::tokenImage = NULL;

          jclass QueryParserConstants::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/queryparser/classic/QueryParserConstants");

              class$ = new ::java::lang::Class(cls);
              cls = (jclass) class$->this$;

              AND = env->getStaticIntField(cls, "AND");
              BAREOPER = env->getStaticIntField(cls, "BAREOPER");
              Boost = env->getStaticIntField(cls, "Boost");
              CARAT = env->getStaticIntField(cls, "CARAT");
              COLON = env->getStaticIntField(cls, "COLON");
              DEFAULT = env->getStaticIntField(cls, "DEFAULT");
              EOF = env->getStaticIntField(cls, "EOF");
              FUZZY_SLOP = env->getStaticIntField(cls, "FUZZY_SLOP");
              LPAREN = env->getStaticIntField(cls, "LPAREN");
              MINUS = env->getStaticIntField(cls, "MINUS");
              NOT = env->getStaticIntField(cls, "NOT");
              NUMBER = env->getStaticIntField(cls, "NUMBER");
              OR = env->getStaticIntField(cls, "OR");
              PLUS = env->getStaticIntField(cls, "PLUS");
              PREFIXTERM = env->getStaticIntField(cls, "PREFIXTERM");
              QUOTED = env->getStaticIntField(cls, "QUOTED");
              RANGEEX_END = env->getStaticIntField(cls, "RANGEEX_END");
              RANGEEX_START = env->getStaticIntField(cls, "RANGEEX_START");
              RANGEIN_END = env->getStaticIntField(cls, "RANGEIN_END");
              RANGEIN_START = env->getStaticIntField(cls, "RANGEIN_START");
              RANGE_GOOP = env->getStaticIntField(cls, "RANGE_GOOP");
              RANGE_QUOTED = env->getStaticIntField(cls, "RANGE_QUOTED");
              RANGE_TO = env->getStaticIntField(cls, "RANGE_TO");
              REGEXPTERM = env->getStaticIntField(cls, "REGEXPTERM");
              RPAREN = env->getStaticIntField(cls, "RPAREN");
              Range = env->getStaticIntField(cls, "Range");
              STAR = env->getStaticIntField(cls, "STAR");
              TERM = env->getStaticIntField(cls, "TERM");
              WILDTERM = env->getStaticIntField(cls, "WILDTERM");
              _ESCAPED_CHAR = env->getStaticIntField(cls, "_ESCAPED_CHAR");
              _NUM_CHAR = env->getStaticIntField(cls, "_NUM_CHAR");
              _QUOTED_CHAR = env->getStaticIntField(cls, "_QUOTED_CHAR");
              _TERM_CHAR = env->getStaticIntField(cls, "_TERM_CHAR");
              _TERM_START_CHAR = env->getStaticIntField(cls, "_TERM_START_CHAR");
              _WHITESPACE = env->getStaticIntField(cls, "_WHITESPACE");
              tokenImage = new JArray< ::java::lang::String >(env->getStaticObjectField(cls, "tokenImage", "[Ljava/lang/String;"));
              live$ = true;
            }
            return (jclass) class$->this$;
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace classic {
          static PyObject *t_QueryParserConstants_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_QueryParserConstants_instance_(PyTypeObject *type, PyObject *arg);

          static PyMethodDef t_QueryParserConstants__methods_[] = {
            DECLARE_METHOD(t_QueryParserConstants, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_QueryParserConstants, instance_, METH_O | METH_CLASS),
            { NULL, NULL, 0, NULL }
          };

          static PyType_Slot PY_TYPE_SLOTS(QueryParserConstants)[] = {
            { Py_tp_methods, t_QueryParserConstants__methods_ },
            { Py_tp_init, (void *) abstract_init },
            { 0, NULL }
          };

          static PyType_Def *PY_TYPE_BASES(QueryParserConstants)[] = {
            &PY_TYPE_DEF(::java::lang::Object),
            NULL
          };

          DEFINE_TYPE(QueryParserConstants, t_QueryParserConstants, QueryParserConstants);

          void t_QueryParserConstants::install(PyObject *module)
          {
            installType(&PY_TYPE(QueryParserConstants), &PY_TYPE_DEF(QueryParserConstants), module, "QueryParserConstants", 0);
          }

          void t_QueryParserConstants::initialize(PyObject *module)
          {
            PyObject_SetAttrString((PyObject *) PY_TYPE(QueryParserConstants), "class_", make_descriptor(QueryParserConstants::initializeClass, 1));
            PyObject_SetAttrString((PyObject *) PY_TYPE(QueryParserConstants), "wrapfn_", make_descriptor(t_QueryParserConstants::wrap_jobject));
            PyObject_SetAttrString((PyObject *) PY_TYPE(QueryParserConstants), "boxfn_", make_descriptor(boxObject));
            env->getClass(QueryParserConstants::initializeClass);
            PyObject_SetAttrString((PyObject *) PY_TYPE(QueryParserConstants), "AND", make_descriptor(QueryParserConstants::AND));
            PyObject_SetAttrString((PyObject *) PY_TYPE(QueryParserConstants), "BAREOPER", make_descriptor(QueryParserConstants::BAREOPER));
            PyObject_SetAttrString((PyObject *) PY_TYPE(QueryParserConstants), "Boost", make_descriptor(QueryParserConstants::Boost));
            PyObject_SetAttrString((PyObject *) PY_TYPE(QueryParserConstants), "CARAT", make_descriptor(QueryParserConstants::CARAT));
            PyObject_SetAttrString((PyObject *) PY_TYPE(QueryParserConstants), "COLON", make_descriptor(QueryParserConstants::COLON));
            PyObject_SetAttrString((PyObject *) PY_TYPE(QueryParserConstants), "DEFAULT", make_descriptor(QueryParserConstants::DEFAULT));
            PyObject_SetAttrString((PyObject *) PY_TYPE(QueryParserConstants), "EOF", make_descriptor(QueryParserConstants::EOF));
            PyObject_SetAttrString((PyObject *) PY_TYPE(QueryParserConstants), "FUZZY_SLOP", make_descriptor(QueryParserConstants::FUZZY_SLOP));
            PyObject_SetAttrString((PyObject *) PY_TYPE(QueryParserConstants), "LPAREN", make_descriptor(QueryParserConstants::LPAREN));
            PyObject_SetAttrString((PyObject *) PY_TYPE(QueryParserConstants), "MINUS", make_descriptor(QueryParserConstants::MINUS));
            PyObject_SetAttrString((PyObject *) PY_TYPE(QueryParserConstants), "NOT", make_descriptor(QueryParserConstants::NOT));
            PyObject_SetAttrString((PyObject *) PY_TYPE(QueryParserConstants), "NUMBER", make_descriptor(QueryParserConstants::NUMBER));
            PyObject_SetAttrString((PyObject *) PY_TYPE(QueryParserConstants), "OR", make_descriptor(QueryParserConstants::OR));
            PyObject_SetAttrString((PyObject *) PY_TYPE(QueryParserConstants), "PLUS", make_descriptor(QueryParserConstants::PLUS));
            PyObject_SetAttrString((PyObject *) PY_TYPE(QueryParserConstants), "PREFIXTERM", make_descriptor(QueryParserConstants::PREFIXTERM));
            PyObject_SetAttrString((PyObject *) PY_TYPE(QueryParserConstants), "QUOTED", make_descriptor(QueryParserConstants::QUOTED));
            PyObject_SetAttrString((PyObject *) PY_TYPE(QueryParserConstants), "RANGEEX_END", make_descriptor(QueryParserConstants::RANGEEX_END));
            PyObject_SetAttrString((PyObject *) PY_TYPE(QueryParserConstants), "RANGEEX_START", make_descriptor(QueryParserConstants::RANGEEX_START));
            PyObject_SetAttrString((PyObject *) PY_TYPE(QueryParserConstants), "RANGEIN_END", make_descriptor(QueryParserConstants::RANGEIN_END));
            PyObject_SetAttrString((PyObject *) PY_TYPE(QueryParserConstants), "RANGEIN_START", make_descriptor(QueryParserConstants::RANGEIN_START));
            PyObject_SetAttrString((PyObject *) PY_TYPE(QueryParserConstants), "RANGE_GOOP", make_descriptor(QueryParserConstants::RANGE_GOOP));
            PyObject_SetAttrString((PyObject *) PY_TYPE(QueryParserConstants), "RANGE_QUOTED", make_descriptor(QueryParserConstants::RANGE_QUOTED));
            PyObject_SetAttrString((PyObject *) PY_TYPE(QueryParserConstants), "RANGE_TO", make_descriptor(QueryParserConstants::RANGE_TO));
            PyObject_SetAttrString((PyObject *) PY_TYPE(QueryParserConstants), "REGEXPTERM", make_descriptor(QueryParserConstants::REGEXPTERM));
            PyObject_SetAttrString((PyObject *) PY_TYPE(QueryParserConstants), "RPAREN", make_descriptor(QueryParserConstants::RPAREN));
            PyObject_SetAttrString((PyObject *) PY_TYPE(QueryParserConstants), "Range", make_descriptor(QueryParserConstants::Range));
            PyObject_SetAttrString((PyObject *) PY_TYPE(QueryParserConstants), "STAR", make_descriptor(QueryParserConstants::STAR));
            PyObject_SetAttrString((PyObject *) PY_TYPE(QueryParserConstants), "TERM", make_descriptor(QueryParserConstants::TERM));
            PyObject_SetAttrString((PyObject *) PY_TYPE(QueryParserConstants), "WILDTERM", make_descriptor(QueryParserConstants::WILDTERM));
            PyObject_SetAttrString((PyObject *) PY_TYPE(QueryParserConstants), "_ESCAPED_CHAR", make_descriptor(QueryParserConstants::_ESCAPED_CHAR));
            PyObject_SetAttrString((PyObject *) PY_TYPE(QueryParserConstants), "_NUM_CHAR", make_descriptor(QueryParserConstants::_NUM_CHAR));
            PyObject_SetAttrString((PyObject *) PY_TYPE(QueryParserConstants), "_QUOTED_CHAR", make_descriptor(QueryParserConstants::_QUOTED_CHAR));
            PyObject_SetAttrString((PyObject *) PY_TYPE(QueryParserConstants), "_TERM_CHAR", make_descriptor(QueryParserConstants::_TERM_CHAR));
            PyObject_SetAttrString((PyObject *) PY_TYPE(QueryParserConstants), "_TERM_START_CHAR", make_descriptor(QueryParserConstants::_TERM_START_CHAR));
            PyObject_SetAttrString((PyObject *) PY_TYPE(QueryParserConstants), "_WHITESPACE", make_descriptor(QueryParserConstants::_WHITESPACE));
            PyObject_SetAttrString((PyObject *) PY_TYPE(QueryParserConstants), "tokenImage", make_descriptor(JArray<jstring>(QueryParserConstants::tokenImage->this$).wrap()));
          }

          static PyObject *t_QueryParserConstants_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, QueryParserConstants::initializeClass, 1)))
              return NULL;
            return t_QueryParserConstants::wrap_Object(QueryParserConstants(((t_QueryParserConstants *) arg)->object.this$));
          }
          static PyObject *t_QueryParserConstants_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, QueryParserConstants::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/uhighlight/DefaultPassageFormatter.h"
#include "java/lang/String.h"
#include "org/apache/lucene/search/uhighlight/Passage.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace uhighlight {

          ::java::lang::Class *DefaultPassageFormatter::class$ = NULL;
          jmethodID *DefaultPassageFormatter::mids$ = NULL;
          bool DefaultPassageFormatter::live$ = false;

          jclass DefaultPassageFormatter::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/search/uhighlight/DefaultPassageFormatter");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_f2cc1bce94666404] = env->getMethodID(cls, "<init>", "()V");
              mids$[mid_init$_6607eb3ac86b07dd] = env->getMethodID(cls, "<init>", "(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Z)V");
              mids$[mid_format_44f2dac6ac374d38] = env->getMethodID(cls, "format", "([Lorg/apache/lucene/search/uhighlight/Passage;Ljava/lang/String;)Ljava/lang/String;");
              mids$[mid_append_c46ff263052534fb] = env->getMethodID(cls, "append", "(Ljava/lang/StringBuilder;Ljava/lang/String;II)V");

              class$ = new ::java::lang::Class(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          DefaultPassageFormatter::DefaultPassageFormatter() : ::org::apache::lucene::search::uhighlight::PassageFormatter(env->newObject(initializeClass, &mids$, mid_init$_f2cc1bce94666404)) {}

          DefaultPassageFormatter::DefaultPassageFormatter(const ::java::lang::String & a0, const ::java::lang::String & a1, const ::java::lang::String & a2, jboolean a3) : ::org::apache::lucene::search::uhighlight::PassageFormatter(env->newObject(initializeClass, &mids$, mid_init$_6607eb3ac86b07dd, a0.this$, a1.this$, a2.this$, a3)) {}

          ::java::lang::String DefaultPassageFormatter::format(const JArray< ::org::apache::lucene::search::uhighlight::Passage > & a0, const ::java::lang::String & a1) const
          {
            return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_format_44f2dac6ac374d38], a0.this$, a1.this$));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace uhighlight {
          static PyObject *t_DefaultPassageFormatter_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_DefaultPassageFormatter_instance_(PyTypeObject *type, PyObject *arg);
          static int t_DefaultPassageFormatter_init_(t_DefaultPassageFormatter *self, PyObject *args, PyObject *kwds);
          static PyObject *t_DefaultPassageFormatter_format(t_DefaultPassageFormatter *self, PyObject *args);

          static PyMethodDef t_DefaultPassageFormatter__methods_[] = {
            DECLARE_METHOD(t_DefaultPassageFormatter, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_DefaultPassageFormatter, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_DefaultPassageFormatter, format, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          static PyType_Slot PY_TYPE_SLOTS(DefaultPassageFormatter)[] = {
            { Py_tp_methods, t_DefaultPassageFormatter__methods_ },
            { Py_tp_init, (void *) t_DefaultPassageFormatter_init_ },
            { 0, NULL }
          };

          static PyType_Def *PY_TYPE_BASES(DefaultPassageFormatter)[] = {
            &PY_TYPE_DEF(::org::apache::lucene::search::uhighlight::PassageFormatter),
            NULL
          };

          DEFINE_TYPE(DefaultPassageFormatter, t_DefaultPassageFormatter, DefaultPassageFormatter);

          void t_DefaultPassageFormatter::install(PyObject *module)
          {
            installType(&PY_TYPE(DefaultPassageFormatter), &PY_TYPE_DEF(DefaultPassageFormatter), module, "DefaultPassageFormatter", 0);
          }

          void t_DefaultPassageFormatter::initialize(PyObject *module)
          {
            PyObject_SetAttrString((PyObject *) PY_TYPE(DefaultPassageFormatter), "class_", make_descriptor(DefaultPassageFormatter::initializeClass, 1));
            PyObject_SetAttrString((PyObject *) PY_TYPE(DefaultPassageFormatter), "wrapfn_", make_descriptor(t_DefaultPassageFormatter::wrap_jobject));
            PyObject_SetAttrString((PyObject *) PY_TYPE(DefaultPassageFormatter), "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_DefaultPassageFormatter_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, DefaultPassageFormatter::initializeClass, 1)))
              return NULL;
            return t_DefaultPassageFormatter::wrap_Object(DefaultPassageFormatter(((t_DefaultPassageFormatter *) arg)->object.this$));
          }
          static PyObject *t_DefaultPassageFormatter_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, DefaultPassageFormatter::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_DefaultPassageFormatter_init_(t_DefaultPassageFormatter *self, PyObject *args, PyObject *kwds)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 0:
              {
                DefaultPassageFormatter object((jobject) NULL);

                INT_CALL(object = DefaultPassageFormatter());
                self->object = object;
                break;
              }
             case 4:
              {
                ::java::lang::String a0((jobject) NULL);
                ::java::lang::String a1((jobject) NULL);
                ::java::lang::String a2((jobject) NULL);
                jboolean a3;
                DefaultPassageFormatter object((jobject) NULL);

                if (!parseArgs(args, "sssZ", &a0, &a1, &a2, &a3))
                {
                  INT_CALL(object = DefaultPassageFormatter(a0, a1, a2, a3));
                  self->object = object;
                  break;
                }
              }
             default:
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_DefaultPassageFormatter_format(t_DefaultPassageFormatter *self, PyObject *args)
          {
            JArray< ::org::apache::lucene::search::uhighlight::Passage > a0((jobject) NULL);
            ::java::lang::String a1((jobject) NULL);
            ::java::lang::String result((jobject) NULL);

            if (!parseArgs(args, "[ks", ::org::apache::lucene::search::uhighlight::Passage::initializeClass, &a0, &a1))
            {
              OBJ_CALL(result = self->object.format(a0, a1));
              return j2p(result);
            }

            return callSuper(PY_TYPE(DefaultPassageFormatter), (PyObject *) self, "format", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/ko/dict/TokenInfoFST.h"
#include "org/apache/lucene/util/fst/FST$BytesReader.h"
#include "java/lang/Long.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/util/fst/FST$Arc.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/util/fst/FST.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace ko {
          namespace dict {

            ::java::lang::Class *TokenInfoFST::class$ = NULL;
            jmethodID *TokenInfoFST::mids$ = NULL;
            jfieldID *TokenInfoFST::fids$ = NULL;
            bool TokenInfoFST::live$ = false;

            jclass TokenInfoFST::initializeClass(bool getOnly)
            {
              if (getOnly)
                return (jclass) (live$ ? class$->this$ : NULL);
              if (class$ == NULL)
              {
                jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/ko/dict/TokenInfoFST");

                mids$ = new jmethodID[max_mid];
                mids$[mid_init$_1ee434f3c8d3152a] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/util/fst/FST;)V");
                mids$[mid_findTargetArc_dbab044ed5b9d825] = env->getMethodID(cls, "findTargetArc", "(ILorg/apache/lucene/util/fst/FST$Arc;Lorg/apache/lucene/util/fst/FST$Arc;ZLorg/apache/lucene/util/fst/FST$BytesReader;)Lorg/apache/lucene/util/fst/FST$Arc;");
                mids$[mid_getBytesReader_79a0688c6e123a32] = env->getMethodID(cls, "getBytesReader", "()Lorg/apache/lucene/util/fst/FST$BytesReader;");
                mids$[mid_getFirstArc_bfd8ca0b4a5c83d7] = env->getMethodID(cls, "getFirstArc", "(Lorg/apache/lucene/util/fst/FST$Arc;)Lorg/apache/lucene/util/fst/FST$Arc;");

                fids$ = new jfieldID[max_fid];
                fids$[fid_NO_OUTPUT] = env->getFieldID(cls, "NO_OUTPUT", "Ljava/lang/Long;");

                class$ = new ::java::lang::Class(cls);
                live$ = true;
              }
              return (jclass) class$->this$;
            }

            TokenInfoFST::TokenInfoFST(const ::org::apache::lucene::util::fst::FST & a0) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_1ee434f3c8d3152a, a0.this$)) {}

            ::org::apache::lucene::util::fst::FST$Arc TokenInfoFST::findTargetArc(jint a0, const ::org::apache::lucene::util::fst::FST$Arc & a1, const ::org::apache::lucene::util::fst::FST$Arc & a2, jboolean a3, const ::org::apache::lucene::util::fst::FST$BytesReader & a4) const
            {
              return ::org::apache::lucene::util::fst::FST$Arc(env->callObjectMethod(this$, mids$[mid_findTargetArc_dbab044ed5b9d825], a0, a1.this$, a2.this$, a3, a4.this$));
            }

            ::org::apache::lucene::util::fst::FST$BytesReader TokenInfoFST::getBytesReader() const
            {
              return ::org::apache::lucene::util::fst::FST$BytesReader(env->callObjectMethod(this$, mids$[mid_getBytesReader_79a0688c6e123a32]));
            }

            ::org::apache::lucene::util::fst::FST$Arc TokenInfoFST::getFirstArc(const ::org::apache::lucene::util::fst::FST$Arc & a0) const
            {
              return ::org::apache::lucene::util::fst::FST$Arc(env->callObjectMethod(this$, mids$[mid_getFirstArc_bfd8ca0b4a5c83d7], a0.this$));
            }

            ::java::lang::Long TokenInfoFST::_get_NO_OUTPUT() const
            {
              return ::java::lang::Long(env->getObjectField(this$, fids$[fid_NO_OUTPUT]));
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace ko {
          namespace dict {
            static PyObject *t_TokenInfoFST_cast_(PyTypeObject *type, PyObject *arg);
            static PyObject *t_TokenInfoFST_instance_(PyTypeObject *type, PyObject *arg);
            static int t_TokenInfoFST_init_(t_TokenInfoFST *self, PyObject *args, PyObject *kwds);
            static PyObject *t_TokenInfoFST_findTargetArc(t_TokenInfoFST *self, PyObject *args);
            static PyObject *t_TokenInfoFST_getBytesReader(t_TokenInfoFST *self);
            static PyObject *t_TokenInfoFST_getFirstArc(t_TokenInfoFST *self, PyObject *arg);
            static PyObject *t_TokenInfoFST_get__NO_OUTPUT(t_TokenInfoFST *self, void *data);

            static PyObject *t_TokenInfoFST_get__bytesReader(t_TokenInfoFST *self, void *data);
            static PyGetSetDef t_TokenInfoFST__fields_[] = {
              DECLARE_GET_FIELD(t_TokenInfoFST, NO_OUTPUT),
              DECLARE_GET_FIELD(t_TokenInfoFST, bytesReader),
              { NULL, NULL, NULL, NULL, NULL }
            };

            static PyMethodDef t_TokenInfoFST__methods_[] = {
              DECLARE_METHOD(t_TokenInfoFST, cast_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_TokenInfoFST, instance_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_TokenInfoFST, findTargetArc, METH_VARARGS),
              DECLARE_METHOD(t_TokenInfoFST, getBytesReader, METH_NOARGS),
              DECLARE_METHOD(t_TokenInfoFST, getFirstArc, METH_O),
              { NULL, NULL, 0, NULL }
            };

            static PyType_Slot PY_TYPE_SLOTS(TokenInfoFST)[] = {
              { Py_tp_methods, t_TokenInfoFST__methods_ },
              { Py_tp_init, (void *) t_TokenInfoFST_init_ },
              { Py_tp_getset, t_TokenInfoFST__fields_ },
              { 0, NULL }
            };

            static PyType_Def *PY_TYPE_BASES(TokenInfoFST)[] = {
              &PY_TYPE_DEF(::java::lang::Object),
              NULL
            };

            DEFINE_TYPE(TokenInfoFST, t_TokenInfoFST, TokenInfoFST);

            void t_TokenInfoFST::install(PyObject *module)
            {
              installType(&PY_TYPE(TokenInfoFST), &PY_TYPE_DEF(TokenInfoFST), module, "TokenInfoFST", 0);
            }

            void t_TokenInfoFST::initialize(PyObject *module)
            {
              PyObject_SetAttrString((PyObject *) PY_TYPE(TokenInfoFST), "class_", make_descriptor(TokenInfoFST::initializeClass, 1));
              PyObject_SetAttrString((PyObject *) PY_TYPE(TokenInfoFST), "wrapfn_", make_descriptor(t_TokenInfoFST::wrap_jobject));
              PyObject_SetAttrString((PyObject *) PY_TYPE(TokenInfoFST), "boxfn_", make_descriptor(boxObject));
            }

            static PyObject *t_TokenInfoFST_cast_(PyTypeObject *type, PyObject *arg)
            {
              if (!(arg = castCheck(arg, TokenInfoFST::initializeClass, 1)))
                return NULL;
              return t_TokenInfoFST::wrap_Object(TokenInfoFST(((t_TokenInfoFST *) arg)->object.this$));
            }
            static PyObject *t_TokenInfoFST_instance_(PyTypeObject *type, PyObject *arg)
            {
              if (!castCheck(arg, TokenInfoFST::initializeClass, 0))
                Py_RETURN_FALSE;
              Py_RETURN_TRUE;
            }

            static int t_TokenInfoFST_init_(t_TokenInfoFST *self, PyObject *args, PyObject *kwds)
            {
              ::org::apache::lucene::util::fst::FST a0((jobject) NULL);
              PyTypeObject **p0;
              TokenInfoFST object((jobject) NULL);

              if (!parseArgs(args, "K", ::org::apache::lucene::util::fst::FST::initializeClass, &a0, &p0, ::org::apache::lucene::util::fst::t_FST::parameters_))
              {
                INT_CALL(object = TokenInfoFST(a0));
                self->object = object;
              }
              else
              {
                PyErr_SetArgsError((PyObject *) self, "__init__", args);
                return -1;
              }

              return 0;
            }

            static PyObject *t_TokenInfoFST_findTargetArc(t_TokenInfoFST *self, PyObject *args)
            {
              jint a0;
              ::org::apache::lucene::util::fst::FST$Arc a1((jobject) NULL);
              PyTypeObject **p1;
              ::org::apache::lucene::util::fst::FST$Arc a2((jobject) NULL);
              PyTypeObject **p2;
              jboolean a3;
              ::org::apache::lucene::util::fst::FST$BytesReader a4((jobject) NULL);
              PyTypeObject **p4;
              ::org::apache::lucene::util::fst::FST$Arc result((jobject) NULL);

              if (!parseArgs(args, "IKKZK", ::org::apache::lucene::util::fst::FST$Arc::initializeClass, ::org::apache::lucene::util::fst::FST$Arc::initializeClass, ::org::apache::lucene::util::fst::FST$BytesReader::initializeClass, &a0, &a1, &p1, ::org::apache::lucene::util::fst::t_FST$Arc::parameters_, &a2, &p2, ::org::apache::lucene::util::fst::t_FST$Arc::parameters_, &a3, &a4, &p4, ::org::apache::lucene::util::fst::t_FST$BytesReader::parameters_))
              {
                OBJ_CALL(result = self->object.findTargetArc(a0, a1, a2, a3, a4));
                return ::org::apache::lucene::util::fst::t_FST$Arc::wrap_Object(result, ::java::lang::PY_TYPE(Long));
              }

              PyErr_SetArgsError((PyObject *) self, "findTargetArc", args);
              return NULL;
            }

            static PyObject *t_TokenInfoFST_getBytesReader(t_TokenInfoFST *self)
            {
              ::org::apache::lucene::util::fst::FST$BytesReader result((jobject) NULL);
              OBJ_CALL(result = self->object.getBytesReader());
              return ::org::apache::lucene::util::fst::t_FST$BytesReader::wrap_Object(result);
            }

            static PyObject *t_TokenInfoFST_getFirstArc(t_TokenInfoFST *self, PyObject *arg)
            {
              ::org::apache::lucene::util::fst::FST$Arc a0((jobject) NULL);
              PyTypeObject **p0;
              ::org::apache::lucene::util::fst::FST$Arc result((jobject) NULL);

              if (!parseArg(arg, "K", ::org::apache::lucene::util::fst::FST$Arc::initializeClass, &a0, &p0, ::org::apache::lucene::util::fst::t_FST$Arc::parameters_))
              {
                OBJ_CALL(result = self->object.getFirstArc(a0));
                return ::org::apache::lucene::util::fst::t_FST$Arc::wrap_Object(result, ::java::lang::PY_TYPE(Long));
              }

              PyErr_SetArgsError((PyObject *) self, "getFirstArc", arg);
              return NULL;
            }

            static PyObject *t_TokenInfoFST_get__NO_OUTPUT(t_TokenInfoFST *self, void *data)
            {
              ::java::lang::Long value((jobject) NULL);
              OBJ_CALL(value = self->object._get_NO_OUTPUT());
              return ::java::lang::t_Long::wrap_Object(value);
            }

            static PyObject *t_TokenInfoFST_get__bytesReader(t_TokenInfoFST *self, void *data)
            {
              ::org::apache::lucene::util::fst::FST$BytesReader value((jobject) NULL);
              OBJ_CALL(value = self->object.getBytesReader());
              return ::org::apache::lucene::util::fst::t_FST$BytesReader::wrap_Object(value);
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/codecs/memory/FSTPostingsFormat.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/index/SegmentReadState.h"
#include "org/apache/lucene/index/SegmentWriteState.h"
#include "java/lang/String.h"
#include "org/apache/lucene/codecs/FieldsConsumer.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/codecs/FieldsProducer.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace codecs {
        namespace memory {

          ::java::lang::Class *FSTPostingsFormat::class$ = NULL;
          jmethodID *FSTPostingsFormat::mids$ = NULL;
          bool FSTPostingsFormat::live$ = false;

          jclass FSTPostingsFormat::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/codecs/memory/FSTPostingsFormat");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_f2cc1bce94666404] = env->getMethodID(cls, "<init>", "()V");
              mids$[mid_fieldsConsumer_876dc181a1f61814] = env->getMethodID(cls, "fieldsConsumer", "(Lorg/apache/lucene/index/SegmentWriteState;)Lorg/apache/lucene/codecs/FieldsConsumer;");
              mids$[mid_fieldsProducer_c39bdf540a53fab9] = env->getMethodID(cls, "fieldsProducer", "(Lorg/apache/lucene/index/SegmentReadState;)Lorg/apache/lucene/codecs/FieldsProducer;");
              mids$[mid_toString_db9b55ba01e03e4b] = env->getMethodID(cls, "toString", "()Ljava/lang/String;");

              class$ = new ::java::lang::Class(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          FSTPostingsFormat::FSTPostingsFormat() : ::org::apache::lucene::codecs::PostingsFormat(env->newObject(initializeClass, &mids$, mid_init$_f2cc1bce94666404)) {}

          ::org::apache::lucene::codecs::FieldsConsumer FSTPostingsFormat::fieldsConsumer(const ::org::apache::lucene::index::SegmentWriteState & a0) const
          {
            return ::org::apache::lucene::codecs::FieldsConsumer(env->callObjectMethod(this$, mids$[mid_fieldsConsumer_876dc181a1f61814], a0.this$));
          }

          ::org::apache::lucene::codecs::FieldsProducer FSTPostingsFormat::fieldsProducer(const ::org::apache::lucene::index::SegmentReadState & a0) const
          {
            return ::org::apache::lucene::codecs::FieldsProducer(env->callObjectMethod(this$, mids$[mid_fieldsProducer_c39bdf540a53fab9], a0.this$));
          }

          ::java::lang::String FSTPostingsFormat::toString() const
          {
            return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_db9b55ba01e03e4b]));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace codecs {
        namespace memory {
          static PyObject *t_FSTPostingsFormat_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_FSTPostingsFormat_instance_(PyTypeObject *type, PyObject *arg);
          static int t_FSTPostingsFormat_init_(t_FSTPostingsFormat *self, PyObject *args, PyObject *kwds);
          static PyObject *t_FSTPostingsFormat_fieldsConsumer(t_FSTPostingsFormat *self, PyObject *args);
          static PyObject *t_FSTPostingsFormat_fieldsProducer(t_FSTPostingsFormat *self, PyObject *args);
          static PyObject *t_FSTPostingsFormat_toString(t_FSTPostingsFormat *self, PyObject *args);

          static PyMethodDef t_FSTPostingsFormat__methods_[] = {
            DECLARE_METHOD(t_FSTPostingsFormat, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_FSTPostingsFormat, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_FSTPostingsFormat, fieldsConsumer, METH_VARARGS),
            DECLARE_METHOD(t_FSTPostingsFormat, fieldsProducer, METH_VARARGS),
            DECLARE_METHOD(t_FSTPostingsFormat, toString, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          static PyType_Slot PY_TYPE_SLOTS(FSTPostingsFormat)[] = {
            { Py_tp_methods, t_FSTPostingsFormat__methods_ },
            { Py_tp_init, (void *) t_FSTPostingsFormat_init_ },
            { 0, NULL }
          };

          static PyType_Def *PY_TYPE_BASES(FSTPostingsFormat)[] = {
            &PY_TYPE_DEF(::org::apache::lucene::codecs::PostingsFormat),
            NULL
          };

          DEFINE_TYPE(FSTPostingsFormat, t_FSTPostingsFormat, FSTPostingsFormat);

          void t_FSTPostingsFormat::install(PyObject *module)
          {
            installType(&PY_TYPE(FSTPostingsFormat), &PY_TYPE_DEF(FSTPostingsFormat), module, "FSTPostingsFormat", 0);
          }

          void t_FSTPostingsFormat::initialize(PyObject *module)
          {
            PyObject_SetAttrString((PyObject *) PY_TYPE(FSTPostingsFormat), "class_", make_descriptor(FSTPostingsFormat::initializeClass, 1));
            PyObject_SetAttrString((PyObject *) PY_TYPE(FSTPostingsFormat), "wrapfn_", make_descriptor(t_FSTPostingsFormat::wrap_jobject));
            PyObject_SetAttrString((PyObject *) PY_TYPE(FSTPostingsFormat), "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_FSTPostingsFormat_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, FSTPostingsFormat::initializeClass, 1)))
              return NULL;
            return t_FSTPostingsFormat::wrap_Object(FSTPostingsFormat(((t_FSTPostingsFormat *) arg)->object.this$));
          }
          static PyObject *t_FSTPostingsFormat_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, FSTPostingsFormat::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_FSTPostingsFormat_init_(t_FSTPostingsFormat *self, PyObject *args, PyObject *kwds)
          {
            FSTPostingsFormat object((jobject) NULL);

            INT_CALL(object = FSTPostingsFormat());
            self->object = object;

            return 0;
          }

          static PyObject *t_FSTPostingsFormat_fieldsConsumer(t_FSTPostingsFormat *self, PyObject *args)
          {
            ::org::apache::lucene::index::SegmentWriteState a0((jobject) NULL);
            ::org::apache::lucene::codecs::FieldsConsumer result((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::index::SegmentWriteState::initializeClass, &a0))
            {
              OBJ_CALL(result = self->object.fieldsConsumer(a0));
              return ::org::apache::lucene::codecs::t_FieldsConsumer::wrap_Object(result);
            }

            return callSuper(PY_TYPE(FSTPostingsFormat), (PyObject *) self, "fieldsConsumer", args, 2);
          }

          static PyObject *t_FSTPostingsFormat_fieldsProducer(t_FSTPostingsFormat *self, PyObject *args)
          {
            ::org::apache::lucene::index::SegmentReadState a0((jobject) NULL);
            ::org::apache::lucene::codecs::FieldsProducer result((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::index::SegmentReadState::initializeClass, &a0))
            {
              OBJ_CALL(result = self->object.fieldsProducer(a0));
              return ::org::apache::lucene::codecs::t_FieldsProducer::wrap_Object(result);
            }

            return callSuper(PY_TYPE(FSTPostingsFormat), (PyObject *) self, "fieldsProducer", args, 2);
          }

          static PyObject *t_FSTPostingsFormat_toString(t_FSTPostingsFormat *self, PyObject *args)
          {
            ::java::lang::String result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.toString());
              return j2p(result);
            }

            return callSuper(PY_TYPE(FSTPostingsFormat), (PyObject *) self, "toString", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/spatial3d/Geo3DDocValuesField.h"
#include "org/apache/lucene/search/SortField.h"
#include "org/apache/lucene/geo/Polygon.h"
#include "org/apache/lucene/document/FieldType.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/spatial3d/geom/GeoPoint.h"
#include "java/lang/String.h"
#include "org/apache/lucene/spatial3d/geom/PlanetModel.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace spatial3d {

        ::java::lang::Class *Geo3DDocValuesField::class$ = NULL;
        jmethodID *Geo3DDocValuesField::mids$ = NULL;
        bool Geo3DDocValuesField::live$ = false;
        ::org::apache::lucene::document::FieldType *Geo3DDocValuesField::TYPE = NULL;

        jclass Geo3DDocValuesField::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/spatial3d/Geo3DDocValuesField");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_df932b85bfbb9ed8] = env->getMethodID(cls, "<init>", "(Ljava/lang/String;Lorg/apache/lucene/spatial3d/geom/GeoPoint;Lorg/apache/lucene/spatial3d/geom/PlanetModel;)V");
            mids$[mid_init$_0d2c6b285dd24a8f] = env->getMethodID(cls, "<init>", "(Ljava/lang/String;DDDLorg/apache/lucene/spatial3d/geom/PlanetModel;)V");
            mids$[mid_newDistanceSort_d6cdf261af2cf821] = env->getStaticMethodID(cls, "newDistanceSort", "(Ljava/lang/String;DDDLorg/apache/lucene/spatial3d/geom/PlanetModel;)Lorg/apache/lucene/search/SortField;");
            mids$[mid_newOutsideBoxSort_f26d2875fb5bc384] = env->getStaticMethodID(cls, "newOutsideBoxSort", "(Ljava/lang/String;DDDDLorg/apache/lucene/spatial3d/geom/PlanetModel;)Lorg/apache/lucene/search/SortField;");
            mids$[mid_newOutsideDistanceSort_d6cdf261af2cf821] = env->getStaticMethodID(cls, "newOutsideDistanceSort", "(Ljava/lang/String;DDDLorg/apache/lucene/spatial3d/geom/PlanetModel;)Lorg/apache/lucene/search/SortField;");
            mids$[mid_newOutsideLargePolygonSort_36f9326a8d46c894] = env->getStaticMethodID(cls, "newOutsideLargePolygonSort", "(Ljava/lang/String;Lorg/apache/lucene/spatial3d/geom/PlanetModel;[Lorg/apache/lucene/geo/Polygon;)Lorg/apache/lucene/search/SortField;");
            mids$[mid_newOutsidePathSort_516bdfa7d6ecadda] = env->getStaticMethodID(cls, "newOutsidePathSort", "(Ljava/lang/String;[D[DDLorg/apache/lucene/spatial3d/geom/PlanetModel;)Lorg/apache/lucene/search/SortField;");
            mids$[mid_newOutsidePolygonSort_36f9326a8d46c894] = env->getStaticMethodID(cls, "newOutsidePolygonSort", "(Ljava/lang/String;Lorg/apache/lucene/spatial3d/geom/PlanetModel;[Lorg/apache/lucene/geo/Polygon;)Lorg/apache/lucene/search/SortField;");
            mids$[mid_newPathSort_516bdfa7d6ecadda] = env->getStaticMethodID(cls, "newPathSort", "(Ljava/lang/String;[D[DDLorg/apache/lucene/spatial3d/geom/PlanetModel;)Lorg/apache/lucene/search/SortField;");
            mids$[mid_setLocationValue_f70971cd727936b7] = env->getMethodID(cls, "setLocationValue", "(Lorg/apache/lucene/spatial3d/geom/GeoPoint;)V");
            mids$[mid_setLocationValue_2a4b7af5c9ed138c] = env->getMethodID(cls, "setLocationValue", "(DDD)V");
            mids$[mid_toString_db9b55ba01e03e4b] = env->getMethodID(cls, "toString", "()Ljava/lang/String;");

            class$ = new ::java::lang::Class(cls);
            cls = (jclass) class$->this$;

            TYPE = new ::org::apache::lucene::document::FieldType(env->getStaticObjectField(cls, "TYPE", "Lorg/apache/lucene/document/FieldType;"));
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        Geo3DDocValuesField::Geo3DDocValuesField(const ::java::lang::String & a0, const ::org::apache::lucene::spatial3d::geom::GeoPoint & a1, const ::org::apache::lucene::spatial3d::geom::PlanetModel & a2) : ::org::apache::lucene::document::Field(env->newObject(initializeClass, &mids$, mid_init$_df932b85bfbb9ed8, a0.this$, a1.this$, a2.this$)) {}

        Geo3DDocValuesField::Geo3DDocValuesField(const ::java::lang::String & a0, jdouble a1, jdouble a2, jdouble a3, const ::org::apache::lucene::spatial3d::geom::PlanetModel & a4) : ::org::apache::lucene::document::Field(env->newObject(initializeClass, &mids$, mid_init$_0d2c6b285dd24a8f, a0.this$, a1, a2, a3, a4.this$)) {}

        ::org::apache::lucene::search::SortField Geo3DDocValuesField::newDistanceSort(const ::java::lang::String & a0, jdouble a1, jdouble a2, jdouble a3, const ::org::apache::lucene::spatial3d::geom::PlanetModel & a4)
        {
          jclass cls = env->getClass(initializeClass);
          return ::org::apache::lucene::search::SortField(env->callStaticObjectMethod(cls, mids$[mid_newDistanceSort_d6cdf261af2cf821], a0.this$, a1, a2, a3, a4.this$));
        }

        ::org::apache::lucene::search::SortField Geo3DDocValuesField::newOutsideBoxSort(const ::java::lang::String & a0, jdouble a1, jdouble a2, jdouble a3, jdouble a4, const ::org::apache::lucene::spatial3d::geom::PlanetModel & a5)
        {
          jclass cls = env->getClass(initializeClass);
          return ::org::apache::lucene::search::SortField(env->callStaticObjectMethod(cls, mids$[mid_newOutsideBoxSort_f26d2875fb5bc384], a0.this$, a1, a2, a3, a4, a5.this$));
        }

        ::org::apache::lucene::search::SortField Geo3DDocValuesField::newOutsideDistanceSort(const ::java::lang::String & a0, jdouble a1, jdouble a2, jdouble a3, const ::org::apache::lucene::spatial3d::geom::PlanetModel & a4)
        {
          jclass cls = env->getClass(initializeClass);
          return ::org::apache::lucene::search::SortField(env->callStaticObjectMethod(cls, mids$[mid_newOutsideDistanceSort_d6cdf261af2cf821], a0.this$, a1, a2, a3, a4.this$));
        }

        ::org::apache::lucene::search::SortField Geo3DDocValuesField::newOutsideLargePolygonSort(const ::java::lang::String & a0, const ::org::apache::lucene::spatial3d::geom::PlanetModel & a1, const JArray< ::org::apache::lucene::geo::Polygon > & a2)
        {
          jclass cls = env->getClass(initializeClass);
          return ::org::apache::lucene::search::SortField(env->callStaticObjectMethod(cls, mids$[mid_newOutsideLargePolygonSort_36f9326a8d46c894], a0.this$, a1.this$, a2.this$));
        }

        ::org::apache::lucene::search::SortField Geo3DDocValuesField::newOutsidePathSort(const ::java::lang::String & a0, const JArray< jdouble > & a1, const JArray< jdouble > & a2, jdouble a3, const ::org::apache::lucene::spatial3d::geom::PlanetModel & a4)
        {
          jclass cls = env->getClass(initializeClass);
          return ::org::apache::lucene::search::SortField(env->callStaticObjectMethod(cls, mids$[mid_newOutsidePathSort_516bdfa7d6ecadda], a0.this$, a1.this$, a2.this$, a3, a4.this$));
        }

        ::org::apache::lucene::search::SortField Geo3DDocValuesField::newOutsidePolygonSort(const ::java::lang::String & a0, const ::org::apache::lucene::spatial3d::geom::PlanetModel & a1, const JArray< ::org::apache::lucene::geo::Polygon > & a2)
        {
          jclass cls = env->getClass(initializeClass);
          return ::org::apache::lucene::search::SortField(env->callStaticObjectMethod(cls, mids$[mid_newOutsidePolygonSort_36f9326a8d46c894], a0.this$, a1.this$, a2.this$));
        }

        ::org::apache::lucene::search::SortField Geo3DDocValuesField::newPathSort(const ::java::lang::String & a0, const JArray< jdouble > & a1, const JArray< jdouble > & a2, jdouble a3, const ::org::apache::lucene::spatial3d::geom::PlanetModel & a4)
        {
          jclass cls = env->getClass(initializeClass);
          return ::org::apache::lucene::search::SortField(env->callStaticObjectMethod(cls, mids$[mid_newPathSort_516bdfa7d6ecadda], a0.this$, a1.this$, a2.this$, a3, a4.this$));
        }

        void Geo3DDocValuesField::setLocationValue(const ::org::apache::lucene::spatial3d::geom::GeoPoint & a0) const
        {
          env->callVoidMethod(this$, mids$[mid_setLocationValue_f70971cd727936b7], a0.this$);
        }

        void Geo3DDocValuesField::setLocationValue(jdouble a0, jdouble a1, jdouble a2) const
        {
          env->callVoidMethod(this$, mids$[mid_setLocationValue_2a4b7af5c9ed138c], a0, a1, a2);
        }

        ::java::lang::String Geo3DDocValuesField::toString() const
        {
          return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_db9b55ba01e03e4b]));
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace spatial3d {
        static PyObject *t_Geo3DDocValuesField_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_Geo3DDocValuesField_instance_(PyTypeObject *type, PyObject *arg);
        static int t_Geo3DDocValuesField_init_(t_Geo3DDocValuesField *self, PyObject *args, PyObject *kwds);
        static PyObject *t_Geo3DDocValuesField_newDistanceSort(PyTypeObject *type, PyObject *args);
        static PyObject *t_Geo3DDocValuesField_newOutsideBoxSort(PyTypeObject *type, PyObject *args);
        static PyObject *t_Geo3DDocValuesField_newOutsideDistanceSort(PyTypeObject *type, PyObject *args);
        static PyObject *t_Geo3DDocValuesField_newOutsideLargePolygonSort(PyTypeObject *type, PyObject *args);
        static PyObject *t_Geo3DDocValuesField_newOutsidePathSort(PyTypeObject *type, PyObject *args);
        static PyObject *t_Geo3DDocValuesField_newOutsidePolygonSort(PyTypeObject *type, PyObject *args);
        static PyObject *t_Geo3DDocValuesField_newPathSort(PyTypeObject *type, PyObject *args);
        static PyObject *t_Geo3DDocValuesField_setLocationValue(t_Geo3DDocValuesField *self, PyObject *args);
        static PyObject *t_Geo3DDocValuesField_toString(t_Geo3DDocValuesField *self, PyObject *args);
        static int t_Geo3DDocValuesField_set__locationValue(t_Geo3DDocValuesField *self, PyObject *arg, void *data);
        static PyGetSetDef t_Geo3DDocValuesField__fields_[] = {
          DECLARE_SET_FIELD(t_Geo3DDocValuesField, locationValue),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_Geo3DDocValuesField__methods_[] = {
          DECLARE_METHOD(t_Geo3DDocValuesField, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_Geo3DDocValuesField, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_Geo3DDocValuesField, newDistanceSort, METH_VARARGS | METH_CLASS),
          DECLARE_METHOD(t_Geo3DDocValuesField, newOutsideBoxSort, METH_VARARGS | METH_CLASS),
          DECLARE_METHOD(t_Geo3DDocValuesField, newOutsideDistanceSort, METH_VARARGS | METH_CLASS),
          DECLARE_METHOD(t_Geo3DDocValuesField, newOutsideLargePolygonSort, METH_VARARGS | METH_CLASS),
          DECLARE_METHOD(t_Geo3DDocValuesField, newOutsidePathSort, METH_VARARGS | METH_CLASS),
          DECLARE_METHOD(t_Geo3DDocValuesField, newOutsidePolygonSort, METH_VARARGS | METH_CLASS),
          DECLARE_METHOD(t_Geo3DDocValuesField, newPathSort, METH_VARARGS | METH_CLASS),
          DECLARE_METHOD(t_Geo3DDocValuesField, setLocationValue, METH_VARARGS),
          DECLARE_METHOD(t_Geo3DDocValuesField, toString, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        static PyType_Slot PY_TYPE_SLOTS(Geo3DDocValuesField)[] = {
          { Py_tp_methods, t_Geo3DDocValuesField__methods_ },
          { Py_tp_init, (void *) t_Geo3DDocValuesField_init_ },
          { Py_tp_getset, t_Geo3DDocValuesField__fields_ },
          { 0, NULL }
        };

        static PyType_Def *PY_TYPE_BASES(Geo3DDocValuesField)[] = {
          &PY_TYPE_DEF(::org::apache::lucene::document::Field),
          NULL
        };

        DEFINE_TYPE(Geo3DDocValuesField, t_Geo3DDocValuesField, Geo3DDocValuesField);

        void t_Geo3DDocValuesField::install(PyObject *module)
        {
          installType(&PY_TYPE(Geo3DDocValuesField), &PY_TYPE_DEF(Geo3DDocValuesField), module, "Geo3DDocValuesField", 0);
        }

        void t_Geo3DDocValuesField::initialize(PyObject *module)
        {
          PyObject_SetAttrString((PyObject *) PY_TYPE(Geo3DDocValuesField), "class_", make_descriptor(Geo3DDocValuesField::initializeClass, 1));
          PyObject_SetAttrString((PyObject *) PY_TYPE(Geo3DDocValuesField), "wrapfn_", make_descriptor(t_Geo3DDocValuesField::wrap_jobject));
          PyObject_SetAttrString((PyObject *) PY_TYPE(Geo3DDocValuesField), "boxfn_", make_descriptor(boxObject));
          env->getClass(Geo3DDocValuesField::initializeClass);
          PyObject_SetAttrString((PyObject *) PY_TYPE(Geo3DDocValuesField), "TYPE", make_descriptor(::org::apache::lucene::document::t_FieldType::wrap_Object(*Geo3DDocValuesField::TYPE)));
        }

        static PyObject *t_Geo3DDocValuesField_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, Geo3DDocValuesField::initializeClass, 1)))
            return NULL;
          return t_Geo3DDocValuesField::wrap_Object(Geo3DDocValuesField(((t_Geo3DDocValuesField *) arg)->object.this$));
        }
        static PyObject *t_Geo3DDocValuesField_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, Geo3DDocValuesField::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_Geo3DDocValuesField_init_(t_Geo3DDocValuesField *self, PyObject *args, PyObject *kwds)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 3:
            {
              ::java::lang::String a0((jobject) NULL);
              ::org::apache::lucene::spatial3d::geom::GeoPoint a1((jobject) NULL);
              ::org::apache::lucene::spatial3d::geom::PlanetModel a2((jobject) NULL);
              Geo3DDocValuesField object((jobject) NULL);

              if (!parseArgs(args, "skk", ::org::apache::lucene::spatial3d::geom::GeoPoint::initializeClass, ::org::apache::lucene::spatial3d::geom::PlanetModel::initializeClass, &a0, &a1, &a2))
              {
                INT_CALL(object = Geo3DDocValuesField(a0, a1, a2));
                self->object = object;
                break;
              }
            }
            goto err;
           case 5:
            {
              ::java::lang::String a0((jobject) NULL);
              jdouble a1;
              jdouble a2;
              jdouble a3;
              ::org::apache::lucene::spatial3d::geom::PlanetModel a4((jobject) NULL);
              Geo3DDocValuesField object((jobject) NULL);

              if (!parseArgs(args, "sDDDk", ::org::apache::lucene::spatial3d::geom::PlanetModel::initializeClass, &a0, &a1, &a2, &a3, &a4))
              {
                INT_CALL(object = Geo3DDocValuesField(a0, a1, a2, a3, a4));
                self->object = object;
                break;
              }
            }
           default:
           err:
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }

        static PyObject *t_Geo3DDocValuesField_newDistanceSort(PyTypeObject *type, PyObject *args)
        {
          ::java::lang::String a0((jobject) NULL);
          jdouble a1;
          jdouble a2;
          jdouble a3;
          ::org::apache::lucene::spatial3d::geom::PlanetModel a4((jobject) NULL);
          ::org::apache::lucene::search::SortField result((jobject) NULL);

          if (!parseArgs(args, "sDDDk", ::org::apache::lucene::spatial3d::geom::PlanetModel::initializeClass, &a0, &a1, &a2, &a3, &a4))
          {
            OBJ_CALL(result = ::org::apache::lucene::spatial3d::Geo3DDocValuesField::newDistanceSort(a0, a1, a2, a3, a4));
            return ::org::apache::lucene::search::t_SortField::wrap_Object(result);
          }

          PyErr_SetArgsError(type, "newDistanceSort", args);
          return NULL;
        }

        static PyObject *t_Geo3DDocValuesField_newOutsideBoxSort(PyTypeObject *type, PyObject *args)
        {
          ::java::lang::String a0((jobject) NULL);
          jdouble a1;
          jdouble a2;
          jdouble a3;
          jdouble a4;
          ::org::apache::lucene::spatial3d::geom::PlanetModel a5((jobject) NULL);
          ::org::apache::lucene::search::SortField result((jobject) NULL);

          if (!parseArgs(args, "sDDDDk", ::org::apache::lucene::spatial3d::geom::PlanetModel::initializeClass, &a0, &a1, &a2, &a3, &a4, &a5))
          {
            OBJ_CALL(result = ::org::apache::lucene::spatial3d::Geo3DDocValuesField::newOutsideBoxSort(a0, a1, a2, a3, a4, a5));
            return ::org::apache::lucene::search::t_SortField::wrap_Object(result);
          }

          PyErr_SetArgsError(type, "newOutsideBoxSort", args);
          return NULL;
        }

        static PyObject *t_Geo3DDocValuesField_newOutsideDistanceSort(PyTypeObject *type, PyObject *args)
        {
          ::java::lang::String a0((jobject) NULL);
          jdouble a1;
          jdouble a2;
          jdouble a3;
          ::org::apache::lucene::spatial3d::geom::PlanetModel a4((jobject) NULL);
          ::org::apache::lucene::search::SortField result((jobject) NULL);

          if (!parseArgs(args, "sDDDk", ::org::apache::lucene::spatial3d::geom::PlanetModel::initializeClass, &a0, &a1, &a2, &a3, &a4))
          {
            OBJ_CALL(result = ::org::apache::lucene::spatial3d::Geo3DDocValuesField::newOutsideDistanceSort(a0, a1, a2, a3, a4));
            return ::org::apache::lucene::search::t_SortField::wrap_Object(result);
          }

          PyErr_SetArgsError(type, "newOutsideDistanceSort", args);
          return NULL;
        }

        static PyObject *t_Geo3DDocValuesField_newOutsideLargePolygonSort(PyTypeObject *type, PyObject *args)
        {
          ::java::lang::String a0((jobject) NULL);
          ::org::apache::lucene::spatial3d::geom::PlanetModel a1((jobject) NULL);
          JArray< ::org::apache::lucene::geo::Polygon > a2((jobject) NULL);
          ::org::apache::lucene::search::SortField result((jobject) NULL);

          if (!parseArgs(args, "sk[k", ::org::apache::lucene::spatial3d::geom::PlanetModel::initializeClass, ::org::apache::lucene::geo::Polygon::initializeClass, &a0, &a1, &a2))
          {
            OBJ_CALL(result = ::org::apache::lucene::spatial3d::Geo3DDocValuesField::newOutsideLargePolygonSort(a0, a1, a2));
            return ::org::apache::lucene::search::t_SortField::wrap_Object(result);
          }

          PyErr_SetArgsError(type, "newOutsideLargePolygonSort", args);
          return NULL;
        }

        static PyObject *t_Geo3DDocValuesField_newOutsidePathSort(PyTypeObject *type, PyObject *args)
        {
          ::java::lang::String a0((jobject) NULL);
          JArray< jdouble > a1((jobject) NULL);
          JArray< jdouble > a2((jobject) NULL);
          jdouble a3;
          ::org::apache::lucene::spatial3d::geom::PlanetModel a4((jobject) NULL);
          ::org::apache::lucene::search::SortField result((jobject) NULL);

          if (!parseArgs(args, "s[D[DDk", ::org::apache::lucene::spatial3d::geom::PlanetModel::initializeClass, &a0, &a1, &a2, &a3, &a4))
          {
            OBJ_CALL(result = ::org::apache::lucene::spatial3d::Geo3DDocValuesField::newOutsidePathSort(a0, a1, a2, a3, a4));
            return ::org::apache::lucene::search::t_SortField::wrap_Object(result);
          }

          PyErr_SetArgsError(type, "newOutsidePathSort", args);
          return NULL;
        }

        static PyObject *t_Geo3DDocValuesField_newOutsidePolygonSort(PyTypeObject *type, PyObject *args)
        {
          ::java::lang::String a0((jobject) NULL);
          ::org::apache::lucene::spatial3d::geom::PlanetModel a1((jobject) NULL);
          JArray< ::org::apache::lucene::geo::Polygon > a2((jobject) NULL);
          ::org::apache::lucene::search::SortField result((jobject) NULL);

          if (!parseArgs(args, "sk[k", ::org::apache::lucene::spatial3d::geom::PlanetModel::initializeClass, ::org::apache::lucene::geo::Polygon::initializeClass, &a0, &a1, &a2))
          {
            OBJ_CALL(result = ::org::apache::lucene::spatial3d::Geo3DDocValuesField::newOutsidePolygonSort(a0, a1, a2));
            return ::org::apache::lucene::search::t_SortField::wrap_Object(result);
          }

          PyErr_SetArgsError(type, "newOutsidePolygonSort", args);
          return NULL;
        }

        static PyObject *t_Geo3DDocValuesField_newPathSort(PyTypeObject *type, PyObject *args)
        {
          ::java::lang::String a0((jobject) NULL);
          JArray< jdouble > a1((jobject) NULL);
          JArray< jdouble > a2((jobject) NULL);
          jdouble a3;
          ::org::apache::lucene::spatial3d::geom::PlanetModel a4((jobject) NULL);
          ::org::apache::lucene::search::SortField result((jobject) NULL);

          if (!parseArgs(args, "s[D[DDk", ::org::apache::lucene::spatial3d::geom::PlanetModel::initializeClass, &a0, &a1, &a2, &a3, &a4))
          {
            OBJ_CALL(result = ::org::apache::lucene::spatial3d::Geo3DDocValuesField::newPathSort(a0, a1, a2, a3, a4));
            return ::org::apache::lucene::search::t_SortField::wrap_Object(result);
          }

          PyErr_SetArgsError(type, "newPathSort", args);
          return NULL;
        }

        static PyObject *t_Geo3DDocValuesField_setLocationValue(t_Geo3DDocValuesField *self, PyObject *args)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 1:
            {
              ::org::apache::lucene::spatial3d::geom::GeoPoint a0((jobject) NULL);

              if (!parseArgs(args, "k", ::org::apache::lucene::spatial3d::geom::GeoPoint::initializeClass, &a0))
              {
                OBJ_CALL(self->object.setLocationValue(a0));
                Py_RETURN_NONE;
              }
            }
            break;
           case 3:
            {
              jdouble a0;
              jdouble a1;
              jdouble a2;

              if (!parseArgs(args, "DDD", &a0, &a1, &a2))
              {
                OBJ_CALL(self->object.setLocationValue(a0, a1, a2));
                Py_RETURN_NONE;
              }
            }
          }

          PyErr_SetArgsError((PyObject *) self, "setLocationValue", args);
          return NULL;
        }

        static PyObject *t_Geo3DDocValuesField_toString(t_Geo3DDocValuesField *self, PyObject *args)
        {
          ::java::lang::String result((jobject) NULL);

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.toString());
            return j2p(result);
          }

          return callSuper(PY_TYPE(Geo3DDocValuesField), (PyObject *) self, "toString", args, 2);
        }

        static int t_Geo3DDocValuesField_set__locationValue(t_Geo3DDocValuesField *self, PyObject *arg, void *data)
        {
          {
            ::org::apache::lucene::spatial3d::geom::GeoPoint value((jobject) NULL);
            if (!parseArg(arg, "k", ::org::apache::lucene::spatial3d::geom::GeoPoint::initializeClass, &value))
            {
              INT_CALL(self->object.setLocationValue(value));
              return 0;
            }
          }
          PyErr_SetArgsError((PyObject *) self, "locationValue", arg);
          return -1;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/util/ElisionFilter.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/analysis/CharArraySet.h"
#include "org/apache/lucene/analysis/TokenStream.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace util {

          ::java::lang::Class *ElisionFilter::class$ = NULL;
          jmethodID *ElisionFilter::mids$ = NULL;
          bool ElisionFilter::live$ = false;

          jclass ElisionFilter::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/util/ElisionFilter");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_85e689f6ceab32ee] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/analysis/TokenStream;Lorg/apache/lucene/analysis/CharArraySet;)V");
              mids$[mid_incrementToken_8454bd5aa23fd11e] = env->getMethodID(cls, "incrementToken", "()Z");

              class$ = new ::java::lang::Class(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          ElisionFilter::ElisionFilter(const ::org::apache::lucene::analysis::TokenStream & a0, const ::org::apache::lucene::analysis::CharArraySet & a1) : ::org::apache::lucene::analysis::TokenFilter(env->newObject(initializeClass, &mids$, mid_init$_85e689f6ceab32ee, a0.this$, a1.this$)) {}

          jboolean ElisionFilter::incrementToken() const
          {
            return env->callBooleanMethod(this$, mids$[mid_incrementToken_8454bd5aa23fd11e]);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace util {
          static PyObject *t_ElisionFilter_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_ElisionFilter_instance_(PyTypeObject *type, PyObject *arg);
          static int t_ElisionFilter_init_(t_ElisionFilter *self, PyObject *args, PyObject *kwds);
          static PyObject *t_ElisionFilter_incrementToken(t_ElisionFilter *self, PyObject *args);

          static PyMethodDef t_ElisionFilter__methods_[] = {
            DECLARE_METHOD(t_ElisionFilter, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_ElisionFilter, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_ElisionFilter, incrementToken, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          static PyType_Slot PY_TYPE_SLOTS(ElisionFilter)[] = {
            { Py_tp_methods, t_ElisionFilter__methods_ },
            { Py_tp_init, (void *) t_ElisionFilter_init_ },
            { 0, NULL }
          };

          static PyType_Def *PY_TYPE_BASES(ElisionFilter)[] = {
            &PY_TYPE_DEF(::org::apache::lucene::analysis::TokenFilter),
            NULL
          };

          DEFINE_TYPE(ElisionFilter, t_ElisionFilter, ElisionFilter);

          void t_ElisionFilter::install(PyObject *module)
          {
            installType(&PY_TYPE(ElisionFilter), &PY_TYPE_DEF(ElisionFilter), module, "ElisionFilter", 0);
          }

          void t_ElisionFilter::initialize(PyObject *module)
          {
            PyObject_SetAttrString((PyObject *) PY_TYPE(ElisionFilter), "class_", make_descriptor(ElisionFilter::initializeClass, 1));
            PyObject_SetAttrString((PyObject *) PY_TYPE(ElisionFilter), "wrapfn_", make_descriptor(t_ElisionFilter::wrap_jobject));
            PyObject_SetAttrString((PyObject *) PY_TYPE(ElisionFilter), "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_ElisionFilter_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, ElisionFilter::initializeClass, 1)))
              return NULL;
            return t_ElisionFilter::wrap_Object(ElisionFilter(((t_ElisionFilter *) arg)->object.this$));
          }
          static PyObject *t_ElisionFilter_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, ElisionFilter::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_ElisionFilter_init_(t_ElisionFilter *self, PyObject *args, PyObject *kwds)
          {
            ::org::apache::lucene::analysis::TokenStream a0((jobject) NULL);
            ::org::apache::lucene::analysis::CharArraySet a1((jobject) NULL);
            PyTypeObject **p1;
            ElisionFilter object((jobject) NULL);

            if (!parseArgs(args, "kK", ::org::apache::lucene::analysis::TokenStream::initializeClass, ::org::apache::lucene::analysis::CharArraySet::initializeClass, &a0, &a1, &p1, ::org::apache::lucene::analysis::t_CharArraySet::parameters_))
            {
              INT_CALL(object = ElisionFilter(a0, a1));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_ElisionFilter_incrementToken(t_ElisionFilter *self, PyObject *args)
          {
            jboolean result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.incrementToken());
              Py_RETURN_BOOL(result);
            }

            return callSuper(PY_TYPE(ElisionFilter), (PyObject *) self, "incrementToken", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/join/JoinUtil.h"
#include "java/lang/Number.h"
#include "org/apache/lucene/search/IndexSearcher.h"
#include "java/lang/Class.h"
#include "java/lang/String.h"
#include "org/apache/lucene/search/Query.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/index/OrdinalMap.h"
#include "org/apache/lucene/search/join/ScoreMode.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace join {

          ::java::lang::Class *JoinUtil::class$ = NULL;
          jmethodID *JoinUtil::mids$ = NULL;
          bool JoinUtil::live$ = false;

          jclass JoinUtil::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/search/join/JoinUtil");

              mids$ = new jmethodID[max_mid];
              mids$[mid_createJoinQuery_248bc5a375479629] = env->getStaticMethodID(cls, "createJoinQuery", "(Ljava/lang/String;Lorg/apache/lucene/search/Query;Lorg/apache/lucene/search/Query;Lorg/apache/lucene/search/IndexSearcher;Lorg/apache/lucene/search/join/ScoreMode;Lorg/apache/lucene/index/OrdinalMap;)Lorg/apache/lucene/search/Query;");
              mids$[mid_createJoinQuery_cfba1fea12802379] = env->getStaticMethodID(cls, "createJoinQuery", "(Ljava/lang/String;ZLjava/lang/String;Lorg/apache/lucene/search/Query;Lorg/apache/lucene/search/IndexSearcher;Lorg/apache/lucene/search/join/ScoreMode;)Lorg/apache/lucene/search/Query;");
              mids$[mid_createJoinQuery_004045d11331a062] = env->getStaticMethodID(cls, "createJoinQuery", "(Ljava/lang/String;ZLjava/lang/String;Ljava/lang/Class;Lorg/apache/lucene/search/Query;Lorg/apache/lucene/search/IndexSearcher;Lorg/apache/lucene/search/join/ScoreMode;)Lorg/apache/lucene/search/Query;");
              mids$[mid_createJoinQuery_f64ba730371756f1] = env->getStaticMethodID(cls, "createJoinQuery", "(Ljava/lang/String;Lorg/apache/lucene/search/Query;Lorg/apache/lucene/search/Query;Lorg/apache/lucene/search/IndexSearcher;Lorg/apache/lucene/search/join/ScoreMode;Lorg/apache/lucene/index/OrdinalMap;II)Lorg/apache/lucene/search/Query;");

              class$ = new ::java::lang::Class(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          ::org::apache::lucene::search::Query JoinUtil::createJoinQuery(const ::java::lang::String & a0, const ::org::apache::lucene::search::Query & a1, const ::org::apache::lucene::search::Query & a2, const ::org::apache::lucene::search::IndexSearcher & a3, const ::org::apache::lucene::search::join::ScoreMode & a4, const ::org::apache::lucene::index::OrdinalMap & a5)
          {
            jclass cls = env->getClass(initializeClass);
            return ::org::apache::lucene::search::Query(env->callStaticObjectMethod(cls, mids$[mid_createJoinQuery_248bc5a375479629], a0.this$, a1.this$, a2.this$, a3.this$, a4.this$, a5.this$));
          }

          ::org::apache::lucene::search::Query JoinUtil::createJoinQuery(const ::java::lang::String & a0, jboolean a1, const ::java::lang::String & a2, const ::org::apache::lucene::search::Query & a3, const ::org::apache::lucene::search::IndexSearcher & a4, const ::org::apache::lucene::search::join::ScoreMode & a5)
          {
            jclass cls = env->getClass(initializeClass);
            return ::org::apache::lucene::search::Query(env->callStaticObjectMethod(cls, mids$[mid_createJoinQuery_cfba1fea12802379], a0.this$, a1, a2.this$, a3.this$, a4.this$, a5.this$));
          }

          ::org::apache::lucene::search::Query JoinUtil::createJoinQuery(const ::java::lang::String & a0, jboolean a1, const ::java::lang::String & a2, const ::java::lang::Class & a3, const ::org::apache::lucene::search::Query & a4, const ::org::apache::lucene::search::IndexSearcher & a5, const ::org::apache::lucene::search::join::ScoreMode & a6)
          {
            jclass cls = env->getClass(initializeClass);
            return ::org::apache::lucene::search::Query(env->callStaticObjectMethod(cls, mids$[mid_createJoinQuery_004045d11331a062], a0.this$, a1, a2.this$, a3.this$, a4.this$, a5.this$, a6.this$));
          }

          ::org::apache::lucene::search::Query JoinUtil::createJoinQuery(const ::java::lang::String & a0, const ::org::apache::lucene::search::Query & a1, const ::org::apache::lucene::search::Query & a2, const ::org::apache::lucene::search::IndexSearcher & a3, const ::org::apache::lucene::search::join::ScoreMode & a4, const ::org::apache::lucene::index::OrdinalMap & a5, jint a6, jint a7)
          {
            jclass cls = env->getClass(initializeClass);
            return ::org::apache::lucene::search::Query(env->callStaticObjectMethod(cls, mids$[mid_createJoinQuery_f64ba730371756f1], a0.this$, a1.this$, a2.this$, a3.this$, a4.this$, a5.this$, a6, a7));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace join {
          static PyObject *t_JoinUtil_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_JoinUtil_instance_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_JoinUtil_createJoinQuery(PyTypeObject *type, PyObject *args);

          static PyMethodDef t_JoinUtil__methods_[] = {
            DECLARE_METHOD(t_JoinUtil, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_JoinUtil, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_JoinUtil, createJoinQuery, METH_VARARGS | METH_CLASS),
            { NULL, NULL, 0, NULL }
          };

          static PyType_Slot PY_TYPE_SLOTS(JoinUtil)[] = {
            { Py_tp_methods, t_JoinUtil__methods_ },
            { Py_tp_init, (void *) abstract_init },
            { 0, NULL }
          };

          static PyType_Def *PY_TYPE_BASES(JoinUtil)[] = {
            &PY_TYPE_DEF(::java::lang::Object),
            NULL
          };

          DEFINE_TYPE(JoinUtil, t_JoinUtil, JoinUtil);

          void t_JoinUtil::install(PyObject *module)
          {
            installType(&PY_TYPE(JoinUtil), &PY_TYPE_DEF(JoinUtil), module, "JoinUtil", 0);
          }

          void t_JoinUtil::initialize(PyObject *module)
          {
            PyObject_SetAttrString((PyObject *) PY_TYPE(JoinUtil), "class_", make_descriptor(JoinUtil::initializeClass, 1));
            PyObject_SetAttrString((PyObject *) PY_TYPE(JoinUtil), "wrapfn_", make_descriptor(t_JoinUtil::wrap_jobject));
            PyObject_SetAttrString((PyObject *) PY_TYPE(JoinUtil), "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_JoinUtil_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, JoinUtil::initializeClass, 1)))
              return NULL;
            return t_JoinUtil::wrap_Object(JoinUtil(((t_JoinUtil *) arg)->object.this$));
          }
          static PyObject *t_JoinUtil_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, JoinUtil::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static PyObject *t_JoinUtil_createJoinQuery(PyTypeObject *type, PyObject *args)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 6:
              {
                ::java::lang::String a0((jobject) NULL);
                ::org::apache::lucene::search::Query a1((jobject) NULL);
                ::org::apache::lucene::search::Query a2((jobject) NULL);
                ::org::apache::lucene::search::IndexSearcher a3((jobject) NULL);
                ::org::apache::lucene::search::join::ScoreMode a4((jobject) NULL);
                PyTypeObject **p4;
                ::org::apache::lucene::index::OrdinalMap a5((jobject) NULL);
                ::org::apache::lucene::search::Query result((jobject) NULL);

                if (!parseArgs(args, "skkkKk", ::org::apache::lucene::search::Query::initializeClass, ::org::apache::lucene::search::Query::initializeClass, ::org::apache::lucene::search::IndexSearcher::initializeClass, ::org::apache::lucene::search::join::ScoreMode::initializeClass, ::org::apache::lucene::index::OrdinalMap::initializeClass, &a0, &a1, &a2, &a3, &a4, &p4, ::org::apache::lucene::search::join::t_ScoreMode::parameters_, &a5))
                {
                  OBJ_CALL(result = ::org::apache::lucene::search::join::JoinUtil::createJoinQuery(a0, a1, a2, a3, a4, a5));
                  return ::org::apache::lucene::search::t_Query::wrap_Object(result);
                }
              }
              {
                ::java::lang::String a0((jobject) NULL);
                jboolean a1;
                ::java::lang::String a2((jobject) NULL);
                ::org::apache::lucene::search::Query a3((jobject) NULL);
                ::org::apache::lucene::search::IndexSearcher a4((jobject) NULL);
                ::org::apache::lucene::search::join::ScoreMode a5((jobject) NULL);
                PyTypeObject **p5;
                ::org::apache::lucene::search::Query result((jobject) NULL);

                if (!parseArgs(args, "sZskkK", ::org::apache::lucene::search::Query::initializeClass, ::org::apache::lucene::search::IndexSearcher::initializeClass, ::org::apache::lucene::search::join::ScoreMode::initializeClass, &a0, &a1, &a2, &a3, &a4, &a5, &p5, ::org::apache::lucene::search::join::t_ScoreMode::parameters_))
                {
                  OBJ_CALL(result = ::org::apache::lucene::search::join::JoinUtil::createJoinQuery(a0, a1, a2, a3, a4, a5));
                  return ::org::apache::lucene::search::t_Query::wrap_Object(result);
                }
              }
              break;
             case 7:
              {
                ::java::lang::String a0((jobject) NULL);
                jboolean a1;
                ::java::lang::String a2((jobject) NULL);
                ::java::lang::Class a3((jobject) NULL);
                PyTypeObject **p3;
                ::org::apache::lucene::search::Query a4((jobject) NULL);
                ::org::apache::lucene::search::IndexSearcher a5((jobject) NULL);
                ::org::apache::lucene::search::join::ScoreMode a6((jobject) NULL);
                PyTypeObject **p6;
                ::org::apache::lucene::search::Query result((jobject) NULL);

                if (!parseArgs(args, "sZsKkkK", ::java::lang::Class::initializeClass, ::org::apache::lucene::search::Query::initializeClass, ::org::apache::lucene::search::IndexSearcher::initializeClass, ::org::apache::lucene::search::join::ScoreMode::initializeClass, &a0, &a1, &a2, &a3, &p3, ::java::lang::t_Class::parameters_, &a4, &a5, &a6, &p6, ::org::apache::lucene::search::join::t_ScoreMode::parameters_))
                {
                  OBJ_CALL(result = ::org::apache::lucene::search::join::JoinUtil::createJoinQuery(a0, a1, a2, a3, a4, a5, a6));
                  return ::org::apache::lucene::search::t_Query::wrap_Object(result);
                }
              }
              break;
             case 8:
              {
                ::java::lang::String a0((jobject) NULL);
                ::org::apache::lucene::search::Query a1((jobject) NULL);
                ::org::apache::lucene::search::Query a2((jobject) NULL);
                ::org::apache::lucene::search::IndexSearcher a3((jobject) NULL);
                ::org::apache::lucene::search::join::ScoreMode a4((jobject) NULL);
                PyTypeObject **p4;
                ::org::apache::lucene::index::OrdinalMap a5((jobject) NULL);
                jint a6;
                jint a7;
                ::org::apache::lucene::search::Query result((jobject) NULL);

                if (!parseArgs(args, "skkkKkII", ::org::apache::lucene::search::Query::initializeClass, ::org::apache::lucene::search::Query::initializeClass, ::org::apache::lucene::search::IndexSearcher::initializeClass, ::org::apache::lucene::search::join::ScoreMode::initializeClass, ::org::apache::lucene::index::OrdinalMap::initializeClass, &a0, &a1, &a2, &a3, &a4, &p4, ::org::apache::lucene::search::join::t_ScoreMode::parameters_, &a5, &a6, &a7))
                {
                  OBJ_CALL(result = ::org::apache::lucene::search::join::JoinUtil::createJoinQuery(a0, a1, a2, a3, a4, a5, a6, a7));
                  return ::org::apache::lucene::search::t_Query::wrap_Object(result);
                }
              }
            }

            PyErr_SetArgsError(type, "createJoinQuery", args);
            return NULL;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queryparser/flexible/standard/builders/BoostQueryNodeBuilder.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/queryparser/flexible/core/QueryNodeException.h"
#include "org/apache/lucene/queryparser/flexible/standard/builders/StandardQueryBuilder.h"
#include "org/apache/lucene/queryparser/flexible/core/nodes/QueryNode.h"
#include "org/apache/lucene/search/Query.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace standard {
            namespace builders {

              ::java::lang::Class *BoostQueryNodeBuilder::class$ = NULL;
              jmethodID *BoostQueryNodeBuilder::mids$ = NULL;
              bool BoostQueryNodeBuilder::live$ = false;

              jclass BoostQueryNodeBuilder::initializeClass(bool getOnly)
              {
                if (getOnly)
                  return (jclass) (live$ ? class$->this$ : NULL);
                if (class$ == NULL)
                {
                  jclass cls = (jclass) env->findClass("org/apache/lucene/queryparser/flexible/standard/builders/BoostQueryNodeBuilder");

                  mids$ = new jmethodID[max_mid];
                  mids$[mid_init$_f2cc1bce94666404] = env->getMethodID(cls, "<init>", "()V");
                  mids$[mid_build_266d6dc3b958f456] = env->getMethodID(cls, "build", "(Lorg/apache/lucene/queryparser/flexible/core/nodes/QueryNode;)Lorg/apache/lucene/search/Query;");

                  class$ = new ::java::lang::Class(cls);
                  live$ = true;
                }
                return (jclass) class$->this$;
              }

              BoostQueryNodeBuilder::BoostQueryNodeBuilder() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_f2cc1bce94666404)) {}

              ::org::apache::lucene::search::Query BoostQueryNodeBuilder::build(const ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode & a0) const
              {
                return ::org::apache::lucene::search::Query(env->callObjectMethod(this$, mids$[mid_build_266d6dc3b958f456], a0.this$));
              }
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace standard {
            namespace builders {
              static PyObject *t_BoostQueryNodeBuilder_cast_(PyTypeObject *type, PyObject *arg);
              static PyObject *t_BoostQueryNodeBuilder_instance_(PyTypeObject *type, PyObject *arg);
              static int t_BoostQueryNodeBuilder_init_(t_BoostQueryNodeBuilder *self, PyObject *args, PyObject *kwds);
              static PyObject *t_BoostQueryNodeBuilder_build(t_BoostQueryNodeBuilder *self, PyObject *arg);

              static PyMethodDef t_BoostQueryNodeBuilder__methods_[] = {
                DECLARE_METHOD(t_BoostQueryNodeBuilder, cast_, METH_O | METH_CLASS),
                DECLARE_METHOD(t_BoostQueryNodeBuilder, instance_, METH_O | METH_CLASS),
                DECLARE_METHOD(t_BoostQueryNodeBuilder, build, METH_O),
                { NULL, NULL, 0, NULL }
              };

              static PyType_Slot PY_TYPE_SLOTS(BoostQueryNodeBuilder)[] = {
                { Py_tp_methods, t_BoostQueryNodeBuilder__methods_ },
                { Py_tp_init, (void *) t_BoostQueryNodeBuilder_init_ },
                { 0, NULL }
              };

              static PyType_Def *PY_TYPE_BASES(BoostQueryNodeBuilder)[] = {
                &PY_TYPE_DEF(::java::lang::Object),
                NULL
              };

              DEFINE_TYPE(BoostQueryNodeBuilder, t_BoostQueryNodeBuilder, BoostQueryNodeBuilder);

              void t_BoostQueryNodeBuilder::install(PyObject *module)
              {
                installType(&PY_TYPE(BoostQueryNodeBuilder), &PY_TYPE_DEF(BoostQueryNodeBuilder), module, "BoostQueryNodeBuilder", 0);
              }

              void t_BoostQueryNodeBuilder::initialize(PyObject *module)
              {
                PyObject_SetAttrString((PyObject *) PY_TYPE(BoostQueryNodeBuilder), "class_", make_descriptor(BoostQueryNodeBuilder::initializeClass, 1));
                PyObject_SetAttrString((PyObject *) PY_TYPE(BoostQueryNodeBuilder), "wrapfn_", make_descriptor(t_BoostQueryNodeBuilder::wrap_jobject));
                PyObject_SetAttrString((PyObject *) PY_TYPE(BoostQueryNodeBuilder), "boxfn_", make_descriptor(boxObject));
              }

              static PyObject *t_BoostQueryNodeBuilder_cast_(PyTypeObject *type, PyObject *arg)
              {
                if (!(arg = castCheck(arg, BoostQueryNodeBuilder::initializeClass, 1)))
                  return NULL;
                return t_BoostQueryNodeBuilder::wrap_Object(BoostQueryNodeBuilder(((t_BoostQueryNodeBuilder *) arg)->object.this$));
              }
              static PyObject *t_BoostQueryNodeBuilder_instance_(PyTypeObject *type, PyObject *arg)
              {
                if (!castCheck(arg, BoostQueryNodeBuilder::initializeClass, 0))
                  Py_RETURN_FALSE;
                Py_RETURN_TRUE;
              }

              static int t_BoostQueryNodeBuilder_init_(t_BoostQueryNodeBuilder *self, PyObject *args, PyObject *kwds)
              {
                BoostQueryNodeBuilder object((jobject) NULL);

                INT_CALL(object = BoostQueryNodeBuilder());
                self->object = object;

                return 0;
              }

              static PyObject *t_BoostQueryNodeBuilder_build(t_BoostQueryNodeBuilder *self, PyObject *arg)
              {
                ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode a0((jobject) NULL);
                ::org::apache::lucene::search::Query result((jobject) NULL);

                if (!parseArg(arg, "k", ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode::initializeClass, &a0))
                {
                  OBJ_CALL(result = self->object.build(a0));
                  return ::org::apache::lucene::search::t_Query::wrap_Object(result);
                }

                PyErr_SetArgsError((PyObject *) self, "build", arg);
                return NULL;
              }
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/SortedNumericSelector$Type.h"
#include "java/lang/String.h"
#include "org/apache/lucene/search/SortedNumericSelector$Type.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {

        ::java::lang::Class *SortedNumericSelector$Type::class$ = NULL;
        jmethodID *SortedNumericSelector$Type::mids$ = NULL;
        bool SortedNumericSelector$Type::live$ = false;
        SortedNumericSelector$Type *SortedNumericSelector$Type::MAX = NULL;
        SortedNumericSelector$Type *SortedNumericSelector$Type::MIN = NULL;

        jclass SortedNumericSelector$Type::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/search/SortedNumericSelector$Type");

            mids$ = new jmethodID[max_mid];
            mids$[mid_valueOf_3233b2f111a987b8] = env->getStaticMethodID(cls, "valueOf", "(Ljava/lang/String;)Lorg/apache/lucene/search/SortedNumericSelector$Type;");
            mids$[mid_values_790cf028238241a3] = env->getStaticMethodID(cls, "values", "()[Lorg/apache/lucene/search/SortedNumericSelector$Type;");

            class$ = new ::java::lang::Class(cls);
            cls = (jclass) class$->this$;

            MAX = new SortedNumericSelector$Type(env->getStaticObjectField(cls, "MAX", "Lorg/apache/lucene/search/SortedNumericSelector$Type;"));
            MIN = new SortedNumericSelector$Type(env->getStaticObjectField(cls, "MIN", "Lorg/apache/lucene/search/SortedNumericSelector$Type;"));
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        SortedNumericSelector$Type SortedNumericSelector$Type::valueOf(const ::java::lang::String & a0)
        {
          jclass cls = env->getClass(initializeClass);
          return SortedNumericSelector$Type(env->callStaticObjectMethod(cls, mids$[mid_valueOf_3233b2f111a987b8], a0.this$));
        }

        JArray< SortedNumericSelector$Type > SortedNumericSelector$Type::values()
        {
          jclass cls = env->getClass(initializeClass);
          return JArray< SortedNumericSelector$Type >(env->callStaticObjectMethod(cls, mids$[mid_values_790cf028238241a3]));
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        static PyObject *t_SortedNumericSelector$Type_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_SortedNumericSelector$Type_instance_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_SortedNumericSelector$Type_of_(t_SortedNumericSelector$Type *self, PyObject *args);
        static PyObject *t_SortedNumericSelector$Type_valueOf(PyTypeObject *type, PyObject *args);
        static PyObject *t_SortedNumericSelector$Type_values(PyTypeObject *type);
        static PyObject *t_SortedNumericSelector$Type_get__parameters_(t_SortedNumericSelector$Type *self, void *data);
        static PyGetSetDef t_SortedNumericSelector$Type__fields_[] = {
          DECLARE_GET_FIELD(t_SortedNumericSelector$Type, parameters_),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_SortedNumericSelector$Type__methods_[] = {
          DECLARE_METHOD(t_SortedNumericSelector$Type, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_SortedNumericSelector$Type, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_SortedNumericSelector$Type, of_, METH_VARARGS),
          DECLARE_METHOD(t_SortedNumericSelector$Type, valueOf, METH_VARARGS | METH_CLASS),
          DECLARE_METHOD(t_SortedNumericSelector$Type, values, METH_NOARGS | METH_CLASS),
          { NULL, NULL, 0, NULL }
        };

        static PyType_Slot PY_TYPE_SLOTS(SortedNumericSelector$Type)[] = {
          { Py_tp_methods, t_SortedNumericSelector$Type__methods_ },
          { Py_tp_init, (void *) abstract_init },
          { Py_tp_getset, t_SortedNumericSelector$Type__fields_ },
          { 0, NULL }
        };

        static PyType_Def *PY_TYPE_BASES(SortedNumericSelector$Type)[] = {
          &PY_TYPE_DEF(::java::lang::Enum),
          NULL
        };

        DEFINE_TYPE(SortedNumericSelector$Type, t_SortedNumericSelector$Type, SortedNumericSelector$Type);
        PyObject *t_SortedNumericSelector$Type::wrap_Object(const SortedNumericSelector$Type& object, PyTypeObject *p0)
        {
          PyObject *obj = t_SortedNumericSelector$Type::wrap_Object(object);
          if (obj != NULL && obj != Py_None)
          {
            t_SortedNumericSelector$Type *self = (t_SortedNumericSelector$Type *) obj;
            self->parameters[0] = p0;
          }
          return obj;
        }

        PyObject *t_SortedNumericSelector$Type::wrap_jobject(const jobject& object, PyTypeObject *p0)
        {
          PyObject *obj = t_SortedNumericSelector$Type::wrap_jobject(object);
          if (obj != NULL && obj != Py_None)
          {
            t_SortedNumericSelector$Type *self = (t_SortedNumericSelector$Type *) obj;
            self->parameters[0] = p0;
          }
          return obj;
        }

        void t_SortedNumericSelector$Type::install(PyObject *module)
        {
          installType(&PY_TYPE(SortedNumericSelector$Type), &PY_TYPE_DEF(SortedNumericSelector$Type), module, "SortedNumericSelector$Type", 0);
        }

        void t_SortedNumericSelector$Type::initialize(PyObject *module)
        {
          PyObject_SetAttrString((PyObject *) PY_TYPE(SortedNumericSelector$Type), "class_", make_descriptor(SortedNumericSelector$Type::initializeClass, 1));
          PyObject_SetAttrString((PyObject *) PY_TYPE(SortedNumericSelector$Type), "wrapfn_", make_descriptor(t_SortedNumericSelector$Type::wrap_jobject));
          PyObject_SetAttrString((PyObject *) PY_TYPE(SortedNumericSelector$Type), "boxfn_", make_descriptor(boxObject));
          env->getClass(SortedNumericSelector$Type::initializeClass);
          PyObject_SetAttrString((PyObject *) PY_TYPE(SortedNumericSelector$Type), "MAX", make_descriptor(t_SortedNumericSelector$Type::wrap_Object(*SortedNumericSelector$Type::MAX)));
          PyObject_SetAttrString((PyObject *) PY_TYPE(SortedNumericSelector$Type), "MIN", make_descriptor(t_SortedNumericSelector$Type::wrap_Object(*SortedNumericSelector$Type::MIN)));
        }

        static PyObject *t_SortedNumericSelector$Type_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, SortedNumericSelector$Type::initializeClass, 1)))
            return NULL;
          return t_SortedNumericSelector$Type::wrap_Object(SortedNumericSelector$Type(((t_SortedNumericSelector$Type *) arg)->object.this$));
        }
        static PyObject *t_SortedNumericSelector$Type_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, SortedNumericSelector$Type::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static PyObject *t_SortedNumericSelector$Type_of_(t_SortedNumericSelector$Type *self, PyObject *args)
        {
          if (!parseArg(args, "T", 1, &(self->parameters)))
            Py_RETURN_SELF;
          return PyErr_SetArgsError((PyObject *) self, "of_", args);
        }

        static PyObject *t_SortedNumericSelector$Type_valueOf(PyTypeObject *type, PyObject *args)
        {
          ::java::lang::String a0((jobject) NULL);
          SortedNumericSelector$Type result((jobject) NULL);

          if (!parseArgs(args, "s", &a0))
          {
            OBJ_CALL(result = ::org::apache::lucene::search::SortedNumericSelector$Type::valueOf(a0));
            return t_SortedNumericSelector$Type::wrap_Object(result);
          }

          return callSuper(type, "valueOf", args, 2);
        }

        static PyObject *t_SortedNumericSelector$Type_values(PyTypeObject *type)
        {
          JArray< SortedNumericSelector$Type > result((jobject) NULL);
          OBJ_CALL(result = ::org::apache::lucene::search::SortedNumericSelector$Type::values());
          return JArray<jobject>(result.this$).wrap(t_SortedNumericSelector$Type::wrap_jobject);
        }
        static PyObject *t_SortedNumericSelector$Type_get__parameters_(t_SortedNumericSelector$Type *self, void *data)
        {
          return typeParameters(self->parameters, sizeof(self->parameters));
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/LeafFieldComparator.h"
#include "org/apache/lucene/search/Scorable.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/search/DocIdSetIterator.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {

        ::java::lang::Class *LeafFieldComparator::class$ = NULL;
        jmethodID *LeafFieldComparator::mids$ = NULL;
        bool LeafFieldComparator::live$ = false;

        jclass LeafFieldComparator::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/search/LeafFieldComparator");

            mids$ = new jmethodID[max_mid];
            mids$[mid_compareBottom_1e143afe1894d213] = env->getMethodID(cls, "compareBottom", "(I)I");
            mids$[mid_compareTop_1e143afe1894d213] = env->getMethodID(cls, "compareTop", "(I)I");
            mids$[mid_competitiveIterator_173d81d7b8f93882] = env->getMethodID(cls, "competitiveIterator", "()Lorg/apache/lucene/search/DocIdSetIterator;");
            mids$[mid_copy_438c62480c481c65] = env->getMethodID(cls, "copy", "(II)V");
            mids$[mid_setBottom_040c4cd0390c5aff] = env->getMethodID(cls, "setBottom", "(I)V");
            mids$[mid_setHitsThresholdReached_f2cc1bce94666404] = env->getMethodID(cls, "setHitsThresholdReached", "()V");
            mids$[mid_setScorer_57a565cc0113e133] = env->getMethodID(cls, "setScorer", "(Lorg/apache/lucene/search/Scorable;)V");

            class$ = new ::java::lang::Class(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        jint LeafFieldComparator::compareBottom(jint a0) const
        {
          return env->callIntMethod(this$, mids$[mid_compareBottom_1e143afe1894d213], a0);
        }

        jint LeafFieldComparator::compareTop(jint a0) const
        {
          return env->callIntMethod(this$, mids$[mid_compareTop_1e143afe1894d213], a0);
        }

        ::org::apache::lucene::search::DocIdSetIterator LeafFieldComparator::competitiveIterator() const
        {
          return ::org::apache::lucene::search::DocIdSetIterator(env->callObjectMethod(this$, mids$[mid_competitiveIterator_173d81d7b8f93882]));
        }

        void LeafFieldComparator::copy(jint a0, jint a1) const
        {
          env->callVoidMethod(this$, mids$[mid_copy_438c62480c481c65], a0, a1);
        }

        void LeafFieldComparator::setBottom(jint a0) const
        {
          env->callVoidMethod(this$, mids$[mid_setBottom_040c4cd0390c5aff], a0);
        }

        void LeafFieldComparator::setHitsThresholdReached() const
        {
          env->callVoidMethod(this$, mids$[mid_setHitsThresholdReached_f2cc1bce94666404]);
        }

        void LeafFieldComparator::setScorer(const ::org::apache::lucene::search::Scorable & a0) const
        {
          env->callVoidMethod(this$, mids$[mid_setScorer_57a565cc0113e133], a0.this$);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        static PyObject *t_LeafFieldComparator_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_LeafFieldComparator_instance_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_LeafFieldComparator_compareBottom(t_LeafFieldComparator *self, PyObject *arg);
        static PyObject *t_LeafFieldComparator_compareTop(t_LeafFieldComparator *self, PyObject *arg);
        static PyObject *t_LeafFieldComparator_competitiveIterator(t_LeafFieldComparator *self);
        static PyObject *t_LeafFieldComparator_copy(t_LeafFieldComparator *self, PyObject *args);
        static PyObject *t_LeafFieldComparator_setBottom(t_LeafFieldComparator *self, PyObject *arg);
        static PyObject *t_LeafFieldComparator_setHitsThresholdReached(t_LeafFieldComparator *self);
        static PyObject *t_LeafFieldComparator_setScorer(t_LeafFieldComparator *self, PyObject *arg);
        static int t_LeafFieldComparator_set__bottom(t_LeafFieldComparator *self, PyObject *arg, void *data);
        static int t_LeafFieldComparator_set__scorer(t_LeafFieldComparator *self, PyObject *arg, void *data);
        static PyGetSetDef t_LeafFieldComparator__fields_[] = {
          DECLARE_SET_FIELD(t_LeafFieldComparator, bottom),
          DECLARE_SET_FIELD(t_LeafFieldComparator, scorer),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_LeafFieldComparator__methods_[] = {
          DECLARE_METHOD(t_LeafFieldComparator, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_LeafFieldComparator, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_LeafFieldComparator, compareBottom, METH_O),
          DECLARE_METHOD(t_LeafFieldComparator, compareTop, METH_O),
          DECLARE_METHOD(t_LeafFieldComparator, competitiveIterator, METH_NOARGS),
          DECLARE_METHOD(t_LeafFieldComparator, copy, METH_VARARGS),
          DECLARE_METHOD(t_LeafFieldComparator, setBottom, METH_O),
          DECLARE_METHOD(t_LeafFieldComparator, setHitsThresholdReached, METH_NOARGS),
          DECLARE_METHOD(t_LeafFieldComparator, setScorer, METH_O),
          { NULL, NULL, 0, NULL }
        };

        static PyType_Slot PY_TYPE_SLOTS(LeafFieldComparator)[] = {
          { Py_tp_methods, t_LeafFieldComparator__methods_ },
          { Py_tp_init, (void *) abstract_init },
          { Py_tp_getset, t_LeafFieldComparator__fields_ },
          { 0, NULL }
        };

        static PyType_Def *PY_TYPE_BASES(LeafFieldComparator)[] = {
          &PY_TYPE_DEF(::java::lang::Object),
          NULL
        };

        DEFINE_TYPE(LeafFieldComparator, t_LeafFieldComparator, LeafFieldComparator);

        void t_LeafFieldComparator::install(PyObject *module)
        {
          installType(&PY_TYPE(LeafFieldComparator), &PY_TYPE_DEF(LeafFieldComparator), module, "LeafFieldComparator", 0);
        }

        void t_LeafFieldComparator::initialize(PyObject *module)
        {
          PyObject_SetAttrString((PyObject *) PY_TYPE(LeafFieldComparator), "class_", make_descriptor(LeafFieldComparator::initializeClass, 1));
          PyObject_SetAttrString((PyObject *) PY_TYPE(LeafFieldComparator), "wrapfn_", make_descriptor(t_LeafFieldComparator::wrap_jobject));
          PyObject_SetAttrString((PyObject *) PY_TYPE(LeafFieldComparator), "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_LeafFieldComparator_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, LeafFieldComparator::initializeClass, 1)))
            return NULL;
          return t_LeafFieldComparator::wrap_Object(LeafFieldComparator(((t_LeafFieldComparator *) arg)->object.this$));
        }
        static PyObject *t_LeafFieldComparator_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, LeafFieldComparator::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static PyObject *t_LeafFieldComparator_compareBottom(t_LeafFieldComparator *self, PyObject *arg)
        {
          jint a0;
          jint result;

          if (!parseArg(arg, "I", &a0))
          {
            OBJ_CALL(result = self->object.compareBottom(a0));
            return PyLong_FromLong((long) result);
          }

          PyErr_SetArgsError((PyObject *) self, "compareBottom", arg);
          return NULL;
        }

        static PyObject *t_LeafFieldComparator_compareTop(t_LeafFieldComparator *self, PyObject *arg)
        {
          jint a0;
          jint result;

          if (!parseArg(arg, "I", &a0))
          {
            OBJ_CALL(result = self->object.compareTop(a0));
            return PyLong_FromLong((long) result);
          }

          PyErr_SetArgsError((PyObject *) self, "compareTop", arg);
          return NULL;
        }

        static PyObject *t_LeafFieldComparator_competitiveIterator(t_LeafFieldComparator *self)
        {
          ::org::apache::lucene::search::DocIdSetIterator result((jobject) NULL);
          OBJ_CALL(result = self->object.competitiveIterator());
          return ::org::apache::lucene::search::t_DocIdSetIterator::wrap_Object(result);
        }

        static PyObject *t_LeafFieldComparator_copy(t_LeafFieldComparator *self, PyObject *args)
        {
          jint a0;
          jint a1;

          if (!parseArgs(args, "II", &a0, &a1))
          {
            OBJ_CALL(self->object.copy(a0, a1));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "copy", args);
          return NULL;
        }

        static PyObject *t_LeafFieldComparator_setBottom(t_LeafFieldComparator *self, PyObject *arg)
        {
          jint a0;

          if (!parseArg(arg, "I", &a0))
          {
            OBJ_CALL(self->object.setBottom(a0));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "setBottom", arg);
          return NULL;
        }

        static PyObject *t_LeafFieldComparator_setHitsThresholdReached(t_LeafFieldComparator *self)
        {
          OBJ_CALL(self->object.setHitsThresholdReached());
          Py_RETURN_NONE;
        }

        static PyObject *t_LeafFieldComparator_setScorer(t_LeafFieldComparator *self, PyObject *arg)
        {
          ::org::apache::lucene::search::Scorable a0((jobject) NULL);

          if (!parseArg(arg, "k", ::org::apache::lucene::search::Scorable::initializeClass, &a0))
          {
            OBJ_CALL(self->object.setScorer(a0));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "setScorer", arg);
          return NULL;
        }

        static int t_LeafFieldComparator_set__bottom(t_LeafFieldComparator *self, PyObject *arg, void *data)
        {
          {
            jint value;
            if (!parseArg(arg, "I", &value))
            {
              INT_CALL(self->object.setBottom(value));
              return 0;
            }
          }
          PyErr_SetArgsError((PyObject *) self, "bottom", arg);
          return -1;
        }

        static int t_LeafFieldComparator_set__scorer(t_LeafFieldComparator *self, PyObject *arg, void *data)
        {
          {
            ::org::apache::lucene::search::Scorable value((jobject) NULL);
            if (!parseArg(arg, "k", ::org::apache::lucene::search::Scorable::initializeClass, &value))
            {
              INT_CALL(self->object.setScorer(value));
              return 0;
            }
          }
          PyErr_SetArgsError((PyObject *) self, "scorer", arg);
          return -1;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/similarities/MultiSimilarity.h"
#include "org/apache/lucene/search/similarities/Similarity$SimScorer.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/search/TermStatistics.h"
#include "org/apache/lucene/index/FieldInvertState.h"
#include "org/apache/lucene/search/CollectionStatistics.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace similarities {

          ::java::lang::Class *MultiSimilarity::class$ = NULL;
          jmethodID *MultiSimilarity::mids$ = NULL;
          bool MultiSimilarity::live$ = false;

          jclass MultiSimilarity::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/search/similarities/MultiSimilarity");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_900c50e712ff6bd8] = env->getMethodID(cls, "<init>", "([Lorg/apache/lucene/search/similarities/Similarity;)V");
              mids$[mid_computeNorm_6ec3269102920d7a] = env->getMethodID(cls, "computeNorm", "(Lorg/apache/lucene/index/FieldInvertState;)J");
              mids$[mid_scorer_a010a2835e08a10c] = env->getMethodID(cls, "scorer", "(FLorg/apache/lucene/search/CollectionStatistics;[Lorg/apache/lucene/search/TermStatistics;)Lorg/apache/lucene/search/similarities/Similarity$SimScorer;");

              class$ = new ::java::lang::Class(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          MultiSimilarity::MultiSimilarity(const JArray< ::org::apache::lucene::search::similarities::Similarity > & a0) : ::org::apache::lucene::search::similarities::Similarity(env->newObject(initializeClass, &mids$, mid_init$_900c50e712ff6bd8, a0.this$)) {}

          jlong MultiSimilarity::computeNorm(const ::org::apache::lucene::index::FieldInvertState & a0) const
          {
            return env->callLongMethod(this$, mids$[mid_computeNorm_6ec3269102920d7a], a0.this$);
          }

          ::org::apache::lucene::search::similarities::Similarity$SimScorer MultiSimilarity::scorer(jfloat a0, const ::org::apache::lucene::search::CollectionStatistics & a1, const JArray< ::org::apache::lucene::search::TermStatistics > & a2) const
          {
            return ::org::apache::lucene::search::similarities::Similarity$SimScorer(env->callObjectMethod(this$, mids$[mid_scorer_a010a2835e08a10c], a0, a1.this$, a2.this$));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace similarities {
          static PyObject *t_MultiSimilarity_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_MultiSimilarity_instance_(PyTypeObject *type, PyObject *arg);
          static int t_MultiSimilarity_init_(t_MultiSimilarity *self, PyObject *args, PyObject *kwds);
          static PyObject *t_MultiSimilarity_computeNorm(t_MultiSimilarity *self, PyObject *args);
          static PyObject *t_MultiSimilarity_scorer(t_MultiSimilarity *self, PyObject *args);

          static PyMethodDef t_MultiSimilarity__methods_[] = {
            DECLARE_METHOD(t_MultiSimilarity, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_MultiSimilarity, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_MultiSimilarity, computeNorm, METH_VARARGS),
            DECLARE_METHOD(t_MultiSimilarity, scorer, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          static PyType_Slot PY_TYPE_SLOTS(MultiSimilarity)[] = {
            { Py_tp_methods, t_MultiSimilarity__methods_ },
            { Py_tp_init, (void *) t_MultiSimilarity_init_ },
            { 0, NULL }
          };

          static PyType_Def *PY_TYPE_BASES(MultiSimilarity)[] = {
            &PY_TYPE_DEF(::org::apache::lucene::search::similarities::Similarity),
            NULL
          };

          DEFINE_TYPE(MultiSimilarity, t_MultiSimilarity, MultiSimilarity);

          void t_MultiSimilarity::install(PyObject *module)
          {
            installType(&PY_TYPE(MultiSimilarity), &PY_TYPE_DEF(MultiSimilarity), module, "MultiSimilarity", 0);
          }

          void t_MultiSimilarity::initialize(PyObject *module)
          {
            PyObject_SetAttrString((PyObject *) PY_TYPE(MultiSimilarity), "class_", make_descriptor(MultiSimilarity::initializeClass, 1));
            PyObject_SetAttrString((PyObject *) PY_TYPE(MultiSimilarity), "wrapfn_", make_descriptor(t_MultiSimilarity::wrap_jobject));
            PyObject_SetAttrString((PyObject *) PY_TYPE(MultiSimilarity), "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_MultiSimilarity_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, MultiSimilarity::initializeClass, 1)))
              return NULL;
            return t_MultiSimilarity::wrap_Object(MultiSimilarity(((t_MultiSimilarity *) arg)->object.this$));
          }
          static PyObject *t_MultiSimilarity_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, MultiSimilarity::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_MultiSimilarity_init_(t_MultiSimilarity *self, PyObject *args, PyObject *kwds)
          {
            JArray< ::org::apache::lucene::search::similarities::Similarity > a0((jobject) NULL);
            MultiSimilarity object((jobject) NULL);

            if (!parseArgs(args, "[k", ::org::apache::lucene::search::similarities::Similarity::initializeClass, &a0))
            {
              INT_CALL(object = MultiSimilarity(a0));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_MultiSimilarity_computeNorm(t_MultiSimilarity *self, PyObject *args)
          {
            ::org::apache::lucene::index::FieldInvertState a0((jobject) NULL);
            jlong result;

            if (!parseArgs(args, "k", ::org::apache::lucene::index::FieldInvertState::initializeClass, &a0))
            {
              OBJ_CALL(result = self->object.computeNorm(a0));
              return PyLong_FromLongLong((PY_LONG_LONG) result);
            }

            return callSuper(PY_TYPE(MultiSimilarity), (PyObject *) self, "computeNorm", args, 2);
          }

          static PyObject *t_MultiSimilarity_scorer(t_MultiSimilarity *self, PyObject *args)
          {
            jfloat a0;
            ::org::apache::lucene::search::CollectionStatistics a1((jobject) NULL);
            JArray< ::org::apache::lucene::search::TermStatistics > a2((jobject) NULL);
            ::org::apache::lucene::search::similarities::Similarity$SimScorer result((jobject) NULL);

            if (!parseArgs(args, "Fk[k", ::org::apache::lucene::search::CollectionStatistics::initializeClass, ::org::apache::lucene::search::TermStatistics::initializeClass, &a0, &a1, &a2))
            {
              OBJ_CALL(result = self->object.scorer(a0, a1, a2));
              return ::org::apache::lucene::search::similarities::t_Similarity$SimScorer::wrap_Object(result);
            }

            return callSuper(PY_TYPE(MultiSimilarity), (PyObject *) self, "scorer", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queries/mlt/MoreLikeThisQuery.h"
#include "org/apache/lucene/index/IndexReader.h"
#include "org/apache/lucene/analysis/Analyzer.h"
#include "java/lang/Class.h"
#include "java/lang/Object.h"
#include "java/lang/String.h"
#include "java/util/Set.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/search/QueryVisitor.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queries {
        namespace mlt {

          ::java::lang::Class *MoreLikeThisQuery::class$ = NULL;
          jmethodID *MoreLikeThisQuery::mids$ = NULL;
          bool MoreLikeThisQuery::live$ = false;

          jclass MoreLikeThisQuery::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/queries/mlt/MoreLikeThisQuery");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_75b2fb924127447b] = env->getMethodID(cls, "<init>", "(Ljava/lang/String;[Ljava/lang/String;Lorg/apache/lucene/analysis/Analyzer;Ljava/lang/String;)V");
              mids$[mid_equals_8b72f2dcdde6fd1d] = env->getMethodID(cls, "equals", "(Ljava/lang/Object;)Z");
              mids$[mid_getAnalyzer_75a99b097bd64493] = env->getMethodID(cls, "getAnalyzer", "()Lorg/apache/lucene/analysis/Analyzer;");
              mids$[mid_getLikeText_db9b55ba01e03e4b] = env->getMethodID(cls, "getLikeText", "()Ljava/lang/String;");
              mids$[mid_getMaxQueryTerms_9972fcc56b44e79d] = env->getMethodID(cls, "getMaxQueryTerms", "()I");
              mids$[mid_getMinDocFreq_9972fcc56b44e79d] = env->getMethodID(cls, "getMinDocFreq", "()I");
              mids$[mid_getMinTermFrequency_9972fcc56b44e79d] = env->getMethodID(cls, "getMinTermFrequency", "()I");
              mids$[mid_getMoreLikeFields_9865da0b5ee490bc] = env->getMethodID(cls, "getMoreLikeFields", "()[Ljava/lang/String;");
              mids$[mid_getPercentTermsToMatch_58aec2b64dff50c8] = env->getMethodID(cls, "getPercentTermsToMatch", "()F");
              mids$[mid_getStopWords_7dcf4034c6d1a92a] = env->getMethodID(cls, "getStopWords", "()Ljava/util/Set;");
              mids$[mid_hashCode_9972fcc56b44e79d] = env->getMethodID(cls, "hashCode", "()I");
              mids$[mid_rewrite_bb52f19a8254555c] = env->getMethodID(cls, "rewrite", "(Lorg/apache/lucene/index/IndexReader;)Lorg/apache/lucene/search/Query;");
              mids$[mid_setAnalyzer_651b708fb3f85e6e] = env->getMethodID(cls, "setAnalyzer", "(Lorg/apache/lucene/analysis/Analyzer;)V");
              mids$[mid_setLikeText_9fd2eb66a64e6f0f] = env->getMethodID(cls, "setLikeText", "(Ljava/lang/String;)V");
              mids$[mid_setMaxQueryTerms_040c4cd0390c5aff] = env->getMethodID(cls, "setMaxQueryTerms", "(I)V");
              mids$[mid_setMinDocFreq_040c4cd0390c5aff] = env->getMethodID(cls, "setMinDocFreq", "(I)V");
              mids$[mid_setMinTermFrequency_040c4cd0390c5aff] = env->getMethodID(cls, "setMinTermFrequency", "(I)V");
              mids$[mid_setMoreLikeFields_2fc318b999a7aba3] = env->getMethodID(cls, "setMoreLikeFields", "([Ljava/lang/String;)V");
              mids$[mid_setPercentTermsToMatch_8e1d952dd65cdc3a] = env->getMethodID(cls, "setPercentTermsToMatch", "(F)V");
              mids$[mid_setStopWords_d5a4a8d4b806f0ba] = env->getMethodID(cls, "setStopWords", "(Ljava/util/Set;)V");
              mids$[mid_toString_9bfa75c9f141b67f] = env->getMethodID(cls, "toString", "(Ljava/lang/String;)Ljava/lang/String;");
              mids$[mid_visit_f9e6207006c5b6c1] = env->getMethodID(cls, "visit", "(Lorg/apache/lucene/search/QueryVisitor;)V");

              class$ = new ::java::lang::Class(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          MoreLikeThisQuery::MoreLikeThisQuery(const ::java::lang::String & a0, const JArray< ::java::lang::String > & a1, const ::org::apache::lucene::analysis::Analyzer & a2, const ::java::lang::String & a3) : ::org::apache::lucene::search::Query(env->newObject(initializeClass, &mids$, mid_init$_75b2fb924127447b, a0.this$, a1.this$, a2.this$, a3.this$)) {}

          jboolean MoreLikeThisQuery::equals(const ::java::lang::Object & a0) const
          {
            return env->callBooleanMethod(this$, mids$[mid_equals_8b72f2dcdde6fd1d], a0.this$);
          }

          ::org::apache::lucene::analysis::Analyzer MoreLikeThisQuery::getAnalyzer() const
          {
            return ::org::apache::lucene::analysis::Analyzer(env->callObjectMethod(this$, mids$[mid_getAnalyzer_75a99b097bd64493]));
          }

          ::java::lang::String MoreLikeThisQuery::getLikeText() const
          {
            return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_getLikeText_db9b55ba01e03e4b]));
          }

          jint MoreLikeThisQuery::getMaxQueryTerms() const
          {
            return env->callIntMethod(this$, mids$[mid_getMaxQueryTerms_9972fcc56b44e79d]);
          }

          jint MoreLikeThisQuery::getMinDocFreq() const
          {
            return env->callIntMethod(this$, mids$[mid_getMinDocFreq_9972fcc56b44e79d]);
          }

          jint MoreLikeThisQuery::getMinTermFrequency() const
          {
            return env->callIntMethod(this$, mids$[mid_getMinTermFrequency_9972fcc56b44e79d]);
          }

          JArray< ::java::lang::String > MoreLikeThisQuery::getMoreLikeFields() const
          {
            return JArray< ::java::lang::String >(env->callObjectMethod(this$, mids$[mid_getMoreLikeFields_9865da0b5ee490bc]));
          }

          jfloat MoreLikeThisQuery::getPercentTermsToMatch() const
          {
            return env->callFloatMethod(this$, mids$[mid_getPercentTermsToMatch_58aec2b64dff50c8]);
          }

          ::java::util::Set MoreLikeThisQuery::getStopWords() const
          {
            return ::java::util::Set(env->callObjectMethod(this$, mids$[mid_getStopWords_7dcf4034c6d1a92a]));
          }

          jint MoreLikeThisQuery::hashCode() const
          {
            return env->callIntMethod(this$, mids$[mid_hashCode_9972fcc56b44e79d]);
          }

          ::org::apache::lucene::search::Query MoreLikeThisQuery::rewrite(const ::org::apache::lucene::index::IndexReader & a0) const
          {
            return ::org::apache::lucene::search::Query(env->callObjectMethod(this$, mids$[mid_rewrite_bb52f19a8254555c], a0.this$));
          }

          void MoreLikeThisQuery::setAnalyzer(const ::org::apache::lucene::analysis::Analyzer & a0) const
          {
            env->callVoidMethod(this$, mids$[mid_setAnalyzer_651b708fb3f85e6e], a0.this$);
          }

          void MoreLikeThisQuery::setLikeText(const ::java::lang::String & a0) const
          {
            env->callVoidMethod(this$, mids$[mid_setLikeText_9fd2eb66a64e6f0f], a0.this$);
          }

          void MoreLikeThisQuery::setMaxQueryTerms(jint a0) const
          {
            env->callVoidMethod(this$, mids$[mid_setMaxQueryTerms_040c4cd0390c5aff], a0);
          }

          void MoreLikeThisQuery::setMinDocFreq(jint a0) const
          {
            env->callVoidMethod(this$, mids$[mid_setMinDocFreq_040c4cd0390c5aff], a0);
          }

          void MoreLikeThisQuery::setMinTermFrequency(jint a0) const
          {
            env->callVoidMethod(this$, mids$[mid_setMinTermFrequency_040c4cd0390c5aff], a0);
          }

          void MoreLikeThisQuery::setMoreLikeFields(const JArray< ::java::lang::String > & a0) const
          {
            env->callVoidMethod(this$, mids$[mid_setMoreLikeFields_2fc318b999a7aba3], a0.this$);
          }

          void MoreLikeThisQuery::setPercentTermsToMatch(jfloat a0) const
          {
            env->callVoidMethod(this$, mids$[mid_setPercentTermsToMatch_8e1d952dd65cdc3a], a0);
          }

          void MoreLikeThisQuery::setStopWords(const ::java::util::Set & a0) const
          {
            env->callVoidMethod(this$, mids$[mid_setStopWords_d5a4a8d4b806f0ba], a0.this$);
          }

          ::java::lang::String MoreLikeThisQuery::toString(const ::java::lang::String & a0) const
          {
            return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_9bfa75c9f141b67f], a0.this$));
          }

          void MoreLikeThisQuery::visit(const ::org::apache::lucene::search::QueryVisitor & a0) const
          {
            env->callVoidMethod(this$, mids$[mid_visit_f9e6207006c5b6c1], a0.this$);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queries {
        namespace mlt {
          static PyObject *t_MoreLikeThisQuery_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_MoreLikeThisQuery_instance_(PyTypeObject *type, PyObject *arg);
          static int t_MoreLikeThisQuery_init_(t_MoreLikeThisQuery *self, PyObject *args, PyObject *kwds);
          static PyObject *t_MoreLikeThisQuery_equals(t_MoreLikeThisQuery *self, PyObject *args);
          static PyObject *t_MoreLikeThisQuery_getAnalyzer(t_MoreLikeThisQuery *self);
          static PyObject *t_MoreLikeThisQuery_getLikeText(t_MoreLikeThisQuery *self);
          static PyObject *t_MoreLikeThisQuery_getMaxQueryTerms(t_MoreLikeThisQuery *self);
          static PyObject *t_MoreLikeThisQuery_getMinDocFreq(t_MoreLikeThisQuery *self);
          static PyObject *t_MoreLikeThisQuery_getMinTermFrequency(t_MoreLikeThisQuery *self);
          static PyObject *t_MoreLikeThisQuery_getMoreLikeFields(t_MoreLikeThisQuery *self);
          static PyObject *t_MoreLikeThisQuery_getPercentTermsToMatch(t_MoreLikeThisQuery *self);
          static PyObject *t_MoreLikeThisQuery_getStopWords(t_MoreLikeThisQuery *self);
          static PyObject *t_MoreLikeThisQuery_hashCode(t_MoreLikeThisQuery *self, PyObject *args);
          static PyObject *t_MoreLikeThisQuery_rewrite(t_MoreLikeThisQuery *self, PyObject *args);
          static PyObject *t_MoreLikeThisQuery_setAnalyzer(t_MoreLikeThisQuery *self, PyObject *arg);
          static PyObject *t_MoreLikeThisQuery_setLikeText(t_MoreLikeThisQuery *self, PyObject *arg);
          static PyObject *t_MoreLikeThisQuery_setMaxQueryTerms(t_MoreLikeThisQuery *self, PyObject *arg);
          static PyObject *t_MoreLikeThisQuery_setMinDocFreq(t_MoreLikeThisQuery *self, PyObject *arg);
          static PyObject *t_MoreLikeThisQuery_setMinTermFrequency(t_MoreLikeThisQuery *self, PyObject *arg);
          static PyObject *t_MoreLikeThisQuery_setMoreLikeFields(t_MoreLikeThisQuery *self, PyObject *arg);
          static PyObject *t_MoreLikeThisQuery_setPercentTermsToMatch(t_MoreLikeThisQuery *self, PyObject *arg);
          static PyObject *t_MoreLikeThisQuery_setStopWords(t_MoreLikeThisQuery *self, PyObject *arg);
          static PyObject *t_MoreLikeThisQuery_toString(t_MoreLikeThisQuery *self, PyObject *args);
          static PyObject *t_MoreLikeThisQuery_visit(t_MoreLikeThisQuery *self, PyObject *args);
          static PyObject *t_MoreLikeThisQuery_get__analyzer(t_MoreLikeThisQuery *self, void *data);
          static int t_MoreLikeThisQuery_set__analyzer(t_MoreLikeThisQuery *self, PyObject *arg, void *data);
          static PyObject *t_MoreLikeThisQuery_get__likeText(t_MoreLikeThisQuery *self, void *data);
          static int t_MoreLikeThisQuery_set__likeText(t_MoreLikeThisQuery *self, PyObject *arg, void *data);
          static PyObject *t_MoreLikeThisQuery_get__maxQueryTerms(t_MoreLikeThisQuery *self, void *data);
          static int t_MoreLikeThisQuery_set__maxQueryTerms(t_MoreLikeThisQuery *self, PyObject *arg, void *data);
          static PyObject *t_MoreLikeThisQuery_get__minDocFreq(t_MoreLikeThisQuery *self, void *data);
          static int t_MoreLikeThisQuery_set__minDocFreq(t_MoreLikeThisQuery *self, PyObject *arg, void *data);
          static PyObject *t_MoreLikeThisQuery_get__minTermFrequency(t_MoreLikeThisQuery *self, void *data);
          static int t_MoreLikeThisQuery_set__minTermFrequency(t_MoreLikeThisQuery *self, PyObject *arg, void *data);
          static PyObject *t_MoreLikeThisQuery_get__moreLikeFields(t_MoreLikeThisQuery *self, void *data);
          static int t_MoreLikeThisQuery_set__moreLikeFields(t_MoreLikeThisQuery *self, PyObject *arg, void *data);
          static PyObject *t_MoreLikeThisQuery_get__percentTermsToMatch(t_MoreLikeThisQuery *self, void *data);
          static int t_MoreLikeThisQuery_set__percentTermsToMatch(t_MoreLikeThisQuery *self, PyObject *arg, void *data);
          static PyObject *t_MoreLikeThisQuery_get__stopWords(t_MoreLikeThisQuery *self, void *data);
          static int t_MoreLikeThisQuery_set__stopWords(t_MoreLikeThisQuery *self, PyObject *arg, void *data);
          static PyGetSetDef t_MoreLikeThisQuery__fields_[] = {
            DECLARE_GETSET_FIELD(t_MoreLikeThisQuery, analyzer),
            DECLARE_GETSET_FIELD(t_MoreLikeThisQuery, likeText),
            DECLARE_GETSET_FIELD(t_MoreLikeThisQuery, maxQueryTerms),
            DECLARE_GETSET_FIELD(t_MoreLikeThisQuery, minDocFreq),
            DECLARE_GETSET_FIELD(t_MoreLikeThisQuery, minTermFrequency),
            DECLARE_GETSET_FIELD(t_MoreLikeThisQuery, moreLikeFields),
            DECLARE_GETSET_FIELD(t_MoreLikeThisQuery, percentTermsToMatch),
            DECLARE_GETSET_FIELD(t_MoreLikeThisQuery, stopWords),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_MoreLikeThisQuery__methods_[] = {
            DECLARE_METHOD(t_MoreLikeThisQuery, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_MoreLikeThisQuery, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_MoreLikeThisQuery, equals, METH_VARARGS),
            DECLARE_METHOD(t_MoreLikeThisQuery, getAnalyzer, METH_NOARGS),
            DECLARE_METHOD(t_MoreLikeThisQuery, getLikeText, METH_NOARGS),
            DECLARE_METHOD(t_MoreLikeThisQuery, getMaxQueryTerms, METH_NOARGS),
            DECLARE_METHOD(t_MoreLikeThisQuery, getMinDocFreq, METH_NOARGS),
            DECLARE_METHOD(t_MoreLikeThisQuery, getMinTermFrequency, METH_NOARGS),
            DECLARE_METHOD(t_MoreLikeThisQuery, getMoreLikeFields, METH_NOARGS),
            DECLARE_METHOD(t_MoreLikeThisQuery, getPercentTermsToMatch, METH_NOARGS),
            DECLARE_METHOD(t_MoreLikeThisQuery, getStopWords, METH_NOARGS),
            DECLARE_METHOD(t_MoreLikeThisQuery, hashCode, METH_VARARGS),
            DECLARE_METHOD(t_MoreLikeThisQuery, rewrite, METH_VARARGS),
            DECLARE_METHOD(t_MoreLikeThisQuery, setAnalyzer, METH_O),
            DECLARE_METHOD(t_MoreLikeThisQuery, setLikeText, METH_O),
            DECLARE_METHOD(t_MoreLikeThisQuery, setMaxQueryTerms, METH_O),
            DECLARE_METHOD(t_MoreLikeThisQuery, setMinDocFreq, METH_O),
            DECLARE_METHOD(t_MoreLikeThisQuery, setMinTermFrequency, METH_O),
            DECLARE_METHOD(t_MoreLikeThisQuery, setMoreLikeFields, METH_O),
            DECLARE_METHOD(t_MoreLikeThisQuery, setPercentTermsToMatch, METH_O),
            DECLARE_METHOD(t_MoreLikeThisQuery, setStopWords, METH_O),
            DECLARE_METHOD(t_MoreLikeThisQuery, toString, METH_VARARGS),
            DECLARE_METHOD(t_MoreLikeThisQuery, visit, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          static PyType_Slot PY_TYPE_SLOTS(MoreLikeThisQuery)[] = {
            { Py_tp_methods, t_MoreLikeThisQuery__methods_ },
            { Py_tp_init, (void *) t_MoreLikeThisQuery_init_ },
            { Py_tp_getset, t_MoreLikeThisQuery__fields_ },
            { 0, NULL }
          };

          static PyType_Def *PY_TYPE_BASES(MoreLikeThisQuery)[] = {
            &PY_TYPE_DEF(::org::apache::lucene::search::Query),
            NULL
          };

          DEFINE_TYPE(MoreLikeThisQuery, t_MoreLikeThisQuery, MoreLikeThisQuery);

          void t_MoreLikeThisQuery::install(PyObject *module)
          {
            installType(&PY_TYPE(MoreLikeThisQuery), &PY_TYPE_DEF(MoreLikeThisQuery), module, "MoreLikeThisQuery", 0);
          }

          void t_MoreLikeThisQuery::initialize(PyObject *module)
          {
            PyObject_SetAttrString((PyObject *) PY_TYPE(MoreLikeThisQuery), "class_", make_descriptor(MoreLikeThisQuery::initializeClass, 1));
            PyObject_SetAttrString((PyObject *) PY_TYPE(MoreLikeThisQuery), "wrapfn_", make_descriptor(t_MoreLikeThisQuery::wrap_jobject));
            PyObject_SetAttrString((PyObject *) PY_TYPE(MoreLikeThisQuery), "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_MoreLikeThisQuery_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, MoreLikeThisQuery::initializeClass, 1)))
              return NULL;
            return t_MoreLikeThisQuery::wrap_Object(MoreLikeThisQuery(((t_MoreLikeThisQuery *) arg)->object.this$));
          }
          static PyObject *t_MoreLikeThisQuery_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, MoreLikeThisQuery::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_MoreLikeThisQuery_init_(t_MoreLikeThisQuery *self, PyObject *args, PyObject *kwds)
          {
            ::java::lang::String a0((jobject) NULL);
            JArray< ::java::lang::String > a1((jobject) NULL);
            ::org::apache::lucene::analysis::Analyzer a2((jobject) NULL);
            ::java::lang::String a3((jobject) NULL);
            MoreLikeThisQuery object((jobject) NULL);

            if (!parseArgs(args, "s[sks", ::org::apache::lucene::analysis::Analyzer::initializeClass, &a0, &a1, &a2, &a3))
            {
              INT_CALL(object = MoreLikeThisQuery(a0, a1, a2, a3));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_MoreLikeThisQuery_equals(t_MoreLikeThisQuery *self, PyObject *args)
          {
            ::java::lang::Object a0((jobject) NULL);
            jboolean result;

            if (!parseArgs(args, "o", &a0))
            {
              OBJ_CALL(result = self->object.equals(a0));
              Py_RETURN_BOOL(result);
            }

            return callSuper(PY_TYPE(MoreLikeThisQuery), (PyObject *) self, "equals", args, 2);
          }

          static PyObject *t_MoreLikeThisQuery_getAnalyzer(t_MoreLikeThisQuery *self)
          {
            ::org::apache::lucene::analysis::Analyzer result((jobject) NULL);
            OBJ_CALL(result = self->object.getAnalyzer());
            return ::org::apache::lucene::analysis::t_Analyzer::wrap_Object(result);
          }

          static PyObject *t_MoreLikeThisQuery_getLikeText(t_MoreLikeThisQuery *self)
          {
            ::java::lang::String result((jobject) NULL);
            OBJ_CALL(result = self->object.getLikeText());
            return j2p(result);
          }

          static PyObject *t_MoreLikeThisQuery_getMaxQueryTerms(t_MoreLikeThisQuery *self)
          {
            jint result;
            OBJ_CALL(result = self->object.getMaxQueryTerms());
            return PyLong_FromLong((long) result);
          }

          static PyObject *t_MoreLikeThisQuery_getMinDocFreq(t_MoreLikeThisQuery *self)
          {
            jint result;
            OBJ_CALL(result = self->object.getMinDocFreq());
            return PyLong_FromLong((long) result);
          }

          static PyObject *t_MoreLikeThisQuery_getMinTermFrequency(t_MoreLikeThisQuery *self)
          {
            jint result;
            OBJ_CALL(result = self->object.getMinTermFrequency());
            return PyLong_FromLong((long) result);
          }

          static PyObject *t_MoreLikeThisQuery_getMoreLikeFields(t_MoreLikeThisQuery *self)
          {
            JArray< ::java::lang::String > result((jobject) NULL);
            OBJ_CALL(result = self->object.getMoreLikeFields());
            return JArray<jstring>(result.this$).wrap();
          }

          static PyObject *t_MoreLikeThisQuery_getPercentTermsToMatch(t_MoreLikeThisQuery *self)
          {
            jfloat result;
            OBJ_CALL(result = self->object.getPercentTermsToMatch());
            return PyFloat_FromDouble((double) result);
          }

          static PyObject *t_MoreLikeThisQuery_getStopWords(t_MoreLikeThisQuery *self)
          {
            ::java::util::Set result((jobject) NULL);
            OBJ_CALL(result = self->object.getStopWords());
            return ::java::util::t_Set::wrap_Object(result);
          }

          static PyObject *t_MoreLikeThisQuery_hashCode(t_MoreLikeThisQuery *self, PyObject *args)
          {
            jint result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.hashCode());
              return PyLong_FromLong((long) result);
            }

            return callSuper(PY_TYPE(MoreLikeThisQuery), (PyObject *) self, "hashCode", args, 2);
          }

          static PyObject *t_MoreLikeThisQuery_rewrite(t_MoreLikeThisQuery *self, PyObject *args)
          {
            ::org::apache::lucene::index::IndexReader a0((jobject) NULL);
            ::org::apache::lucene::search::Query result((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::index::IndexReader::initializeClass, &a0))
            {
              OBJ_CALL(result = self->object.rewrite(a0));
              return ::org::apache::lucene::search::t_Query::wrap_Object(result);
            }

            return callSuper(PY_TYPE(MoreLikeThisQuery), (PyObject *) self, "rewrite", args, 2);
          }

          static PyObject *t_MoreLikeThisQuery_setAnalyzer(t_MoreLikeThisQuery *self, PyObject *arg)
          {
            ::org::apache::lucene::analysis::Analyzer a0((jobject) NULL);

            if (!parseArg(arg, "k", ::org::apache::lucene::analysis::Analyzer::initializeClass, &a0))
            {
              OBJ_CALL(self->object.setAnalyzer(a0));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError((PyObject *) self, "setAnalyzer", arg);
            return NULL;
          }

          static PyObject *t_MoreLikeThisQuery_setLikeText(t_MoreLikeThisQuery *self, PyObject *arg)
          {
            ::java::lang::String a0((jobject) NULL);

            if (!parseArg(arg, "s", &a0))
            {
              OBJ_CALL(self->object.setLikeText(a0));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError((PyObject *) self, "setLikeText", arg);
            return NULL;
          }

          static PyObject *t_MoreLikeThisQuery_setMaxQueryTerms(t_MoreLikeThisQuery *self, PyObject *arg)
          {
            jint a0;

            if (!parseArg(arg, "I", &a0))
            {
              OBJ_CALL(self->object.setMaxQueryTerms(a0));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError((PyObject *) self, "setMaxQueryTerms", arg);
            return NULL;
          }

          static PyObject *t_MoreLikeThisQuery_setMinDocFreq(t_MoreLikeThisQuery *self, PyObject *arg)
          {
            jint a0;

            if (!parseArg(arg, "I", &a0))
            {
              OBJ_CALL(self->object.setMinDocFreq(a0));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError((PyObject *) self, "setMinDocFreq", arg);
            return NULL;
          }

          static PyObject *t_MoreLikeThisQuery_setMinTermFrequency(t_MoreLikeThisQuery *self, PyObject *arg)
          {
            jint a0;

            if (!parseArg(arg, "I", &a0))
            {
              OBJ_CALL(self->object.setMinTermFrequency(a0));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError((PyObject *) self, "setMinTermFrequency", arg);
            return NULL;
          }

          static PyObject *t_MoreLikeThisQuery_setMoreLikeFields(t_MoreLikeThisQuery *self, PyObject *arg)
          {
            JArray< ::java::lang::String > a0((jobject) NULL);

            if (!parseArg(arg, "[s", &a0))
            {
              OBJ_CALL(self->object.setMoreLikeFields(a0));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError((PyObject *) self, "setMoreLikeFields", arg);
            return NULL;
          }

          static PyObject *t_MoreLikeThisQuery_setPercentTermsToMatch(t_MoreLikeThisQuery *self, PyObject *arg)
          {
            jfloat a0;

            if (!parseArg(arg, "F", &a0))
            {
              OBJ_CALL(self->object.setPercentTermsToMatch(a0));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError((PyObject *) self, "setPercentTermsToMatch", arg);
            return NULL;
          }

          static PyObject *t_MoreLikeThisQuery_setStopWords(t_MoreLikeThisQuery *self, PyObject *arg)
          {
            ::java::util::Set a0((jobject) NULL);
            PyTypeObject **p0;

            if (!parseArg(arg, "K", ::java::util::Set::initializeClass, &a0, &p0, ::java::util::t_Set::parameters_))
            {
              OBJ_CALL(self->object.setStopWords(a0));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError((PyObject *) self, "setStopWords", arg);
            return NULL;
          }

          static PyObject *t_MoreLikeThisQuery_toString(t_MoreLikeThisQuery *self, PyObject *args)
          {
            ::java::lang::String a0((jobject) NULL);
            ::java::lang::String result((jobject) NULL);

            if (!parseArgs(args, "s", &a0))
            {
              OBJ_CALL(result = self->object.toString(a0));
              return j2p(result);
            }

            return callSuper(PY_TYPE(MoreLikeThisQuery), (PyObject *) self, "toString", args, 2);
          }

          static PyObject *t_MoreLikeThisQuery_visit(t_MoreLikeThisQuery *self, PyObject *args)
          {
            ::org::apache::lucene::search::QueryVisitor a0((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::search::QueryVisitor::initializeClass, &a0))
            {
              OBJ_CALL(self->object.visit(a0));
              Py_RETURN_NONE;
            }

            return callSuper(PY_TYPE(MoreLikeThisQuery), (PyObject *) self, "visit", args, 2);
          }

          static PyObject *t_MoreLikeThisQuery_get__analyzer(t_MoreLikeThisQuery *self, void *data)
          {
            ::org::apache::lucene::analysis::Analyzer value((jobject) NULL);
            OBJ_CALL(value = self->object.getAnalyzer());
            return ::org::apache::lucene::analysis::t_Analyzer::wrap_Object(value);
          }
          static int t_MoreLikeThisQuery_set__analyzer(t_MoreLikeThisQuery *self, PyObject *arg, void *data)
          {
            {
              ::org::apache::lucene::analysis::Analyzer value((jobject) NULL);
              if (!parseArg(arg, "k", ::org::apache::lucene::analysis::Analyzer::initializeClass, &value))
              {
                INT_CALL(self->object.setAnalyzer(value));
                return 0;
              }
            }
            PyErr_SetArgsError((PyObject *) self, "analyzer", arg);
            return -1;
          }

          static PyObject *t_MoreLikeThisQuery_get__likeText(t_MoreLikeThisQuery *self, void *data)
          {
            ::java::lang::String value((jobject) NULL);
            OBJ_CALL(value = self->object.getLikeText());
            return j2p(value);
          }
          static int t_MoreLikeThisQuery_set__likeText(t_MoreLikeThisQuery *self, PyObject *arg, void *data)
          {
            {
              ::java::lang::String value((jobject) NULL);
              if (!parseArg(arg, "s", &value))
              {
                INT_CALL(self->object.setLikeText(value));
                return 0;
              }
            }
            PyErr_SetArgsError((PyObject *) self, "likeText", arg);
            return -1;
          }

          static PyObject *t_MoreLikeThisQuery_get__maxQueryTerms(t_MoreLikeThisQuery *self, void *data)
          {
            jint value;
            OBJ_CALL(value = self->object.getMaxQueryTerms());
            return PyLong_FromLong((long) value);
          }
          static int t_MoreLikeThisQuery_set__maxQueryTerms(t_MoreLikeThisQuery *self, PyObject *arg, void *data)
          {
            {
              jint value;
              if (!parseArg(arg, "I", &value))
              {
                INT_CALL(self->object.setMaxQueryTerms(value));
                return 0;
              }
            }
            PyErr_SetArgsError((PyObject *) self, "maxQueryTerms", arg);
            return -1;
          }

          static PyObject *t_MoreLikeThisQuery_get__minDocFreq(t_MoreLikeThisQuery *self, void *data)
          {
            jint value;
            OBJ_CALL(value = self->object.getMinDocFreq());
            return PyLong_FromLong((long) value);
          }
          static int t_MoreLikeThisQuery_set__minDocFreq(t_MoreLikeThisQuery *self, PyObject *arg, void *data)
          {
            {
              jint value;
              if (!parseArg(arg, "I", &value))
              {
                INT_CALL(self->object.setMinDocFreq(value));
                return 0;
              }
            }
            PyErr_SetArgsError((PyObject *) self, "minDocFreq", arg);
            return -1;
          }

          static PyObject *t_MoreLikeThisQuery_get__minTermFrequency(t_MoreLikeThisQuery *self, void *data)
          {
            jint value;
            OBJ_CALL(value = self->object.getMinTermFrequency());
            return PyLong_FromLong((long) value);
          }
          static int t_MoreLikeThisQuery_set__minTermFrequency(t_MoreLikeThisQuery *self, PyObject *arg, void *data)
          {
            {
              jint value;
              if (!parseArg(arg, "I", &value))
              {
                INT_CALL(self->object.setMinTermFrequency(value));
                return 0;
              }
            }
            PyErr_SetArgsError((PyObject *) self, "minTermFrequency", arg);
            return -1;
          }

          static PyObject *t_MoreLikeThisQuery_get__moreLikeFields(t_MoreLikeThisQuery *self, void *data)
          {
            JArray< ::java::lang::String > value((jobject) NULL);
            OBJ_CALL(value = self->object.getMoreLikeFields());
            return JArray<jstring>(value.this$).wrap();
          }
          static int t_MoreLikeThisQuery_set__moreLikeFields(t_MoreLikeThisQuery *self, PyObject *arg, void *data)
          {
            {
              JArray< ::java::lang::String > value((jobject) NULL);
              if (!parseArg(arg, "[s", &value))
              {
                INT_CALL(self->object.setMoreLikeFields(value));
                return 0;
              }
            }
            PyErr_SetArgsError((PyObject *) self, "moreLikeFields", arg);
            return -1;
          }

          static PyObject *t_MoreLikeThisQuery_get__percentTermsToMatch(t_MoreLikeThisQuery *self, void *data)
          {
            jfloat value;
            OBJ_CALL(value = self->object.getPercentTermsToMatch());
            return PyFloat_FromDouble((double) value);
          }
          static int t_MoreLikeThisQuery_set__percentTermsToMatch(t_MoreLikeThisQuery *self, PyObject *arg, void *data)
          {
            {
              jfloat value;
              if (!parseArg(arg, "F", &value))
              {
                INT_CALL(self->object.setPercentTermsToMatch(value));
                return 0;
              }
            }
            PyErr_SetArgsError((PyObject *) self, "percentTermsToMatch", arg);
            return -1;
          }

          static PyObject *t_MoreLikeThisQuery_get__stopWords(t_MoreLikeThisQuery *self, void *data)
          {
            ::java::util::Set value((jobject) NULL);
            OBJ_CALL(value = self->object.getStopWords());
            return ::java::util::t_Set::wrap_Object(value);
          }
          static int t_MoreLikeThisQuery_set__stopWords(t_MoreLikeThisQuery *self, PyObject *arg, void *data)
          {
            {
              ::java::util::Set value((jobject) NULL);
              if (!parseArg(arg, "k", ::java::util::Set::initializeClass, &value))
              {
                INT_CALL(self->object.setStopWords(value));
                return 0;
              }
            }
            PyErr_SetArgsError((PyObject *) self, "stopWords", arg);
            return -1;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queryparser/classic/QueryParserTokenManager.h"
#include "org/apache/lucene/queryparser/classic/Token.h"
#include "java/lang/Class.h"
#include "java/lang/String.h"
#include "org/apache/lucene/queryparser/classic/QueryParserConstants.h"
#include "org/apache/lucene/queryparser/classic/CharStream.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace classic {

          ::java::lang::Class *QueryParserTokenManager::class$ = NULL;
          jmethodID *QueryParserTokenManager::mids$ = NULL;
          bool QueryParserTokenManager::live$ = false;
          JArray< jint > *QueryParserTokenManager::jjnewLexState = NULL;
          JArray< ::java::lang::String > *QueryParserTokenManager::jjstrLiteralImages = NULL;
          JArray< ::java::lang::String > *QueryParserTokenManager::lexStateNames = NULL;

          jclass QueryParserTokenManager::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/queryparser/classic/QueryParserTokenManager");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_94838218118d13bf] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/queryparser/classic/CharStream;)V");
              mids$[mid_init$_8181d5836f8e3a35] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/queryparser/classic/CharStream;I)V");
              mids$[mid_ReInit_94838218118d13bf] = env->getMethodID(cls, "ReInit", "(Lorg/apache/lucene/queryparser/classic/CharStream;)V");
              mids$[mid_ReInit_8181d5836f8e3a35] = env->getMethodID(cls, "ReInit", "(Lorg/apache/lucene/queryparser/classic/CharStream;I)V");
              mids$[mid_SwitchTo_040c4cd0390c5aff] = env->getMethodID(cls, "SwitchTo", "(I)V");
              mids$[mid_getNextToken_292e526b93f036e3] = env->getMethodID(cls, "getNextToken", "()Lorg/apache/lucene/queryparser/classic/Token;");
              mids$[mid_jjFillToken_292e526b93f036e3] = env->getMethodID(cls, "jjFillToken", "()Lorg/apache/lucene/queryparser/classic/Token;");

              class$ = new ::java::lang::Class(cls);
              cls = (jclass) class$->this$;

              jjnewLexState = new JArray< jint >(env->getStaticObjectField(cls, "jjnewLexState", "[I"));
              jjstrLiteralImages = new JArray< ::java::lang::String >(env->getStaticObjectField(cls, "jjstrLiteralImages", "[Ljava/lang/String;"));
              lexStateNames = new JArray< ::java::lang::String >(env->getStaticObjectField(cls, "lexStateNames", "[Ljava/lang/String;"));
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          QueryParserTokenManager::QueryParserTokenManager(const ::org::apache::lucene::queryparser::classic::CharStream & a0) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_94838218118d13bf, a0.this$)) {}

          QueryParserTokenManager::QueryParserTokenManager(const ::org::apache::lucene::queryparser::classic::CharStream & a0, jint a1) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_8181d5836f8e3a35, a0.this$, a1)) {}

          void QueryParserTokenManager::ReInit(const ::org::apache::lucene::queryparser::classic::CharStream & a0) const
          {
            env->callVoidMethod(this$, mids$[mid_ReInit_94838218118d13bf], a0.this$);
          }

          void QueryParserTokenManager::ReInit(const ::org::apache::lucene::queryparser::classic::CharStream & a0, jint a1) const
          {
            env->callVoidMethod(this$, mids$[mid_ReInit_8181d5836f8e3a35], a0.this$, a1);
          }

          void QueryParserTokenManager::SwitchTo(jint a0) const
          {
            env->callVoidMethod(this$, mids$[mid_SwitchTo_040c4cd0390c5aff], a0);
          }

          ::org::apache::lucene::queryparser::classic::Token QueryParserTokenManager::getNextToken() const
          {
            return ::org::apache::lucene::queryparser::classic::Token(env->callObjectMethod(this$, mids$[mid_getNextToken_292e526b93f036e3]));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace classic {
          static PyObject *t_QueryParserTokenManager_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_QueryParserTokenManager_instance_(PyTypeObject *type, PyObject *arg);
          static int t_QueryParserTokenManager_init_(t_QueryParserTokenManager *self, PyObject *args, PyObject *kwds);
          static PyObject *t_QueryParserTokenManager_ReInit(t_QueryParserTokenManager *self, PyObject *args);
          static PyObject *t_QueryParserTokenManager_SwitchTo(t_QueryParserTokenManager *self, PyObject *arg);
          static PyObject *t_QueryParserTokenManager_getNextToken(t_QueryParserTokenManager *self);
          static PyObject *t_QueryParserTokenManager_get__nextToken(t_QueryParserTokenManager *self, void *data);
          static PyGetSetDef t_QueryParserTokenManager__fields_[] = {
            DECLARE_GET_FIELD(t_QueryParserTokenManager, nextToken),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_QueryParserTokenManager__methods_[] = {
            DECLARE_METHOD(t_QueryParserTokenManager, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_QueryParserTokenManager, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_QueryParserTokenManager, ReInit, METH_VARARGS),
            DECLARE_METHOD(t_QueryParserTokenManager, SwitchTo, METH_O),
            DECLARE_METHOD(t_QueryParserTokenManager, getNextToken, METH_NOARGS),
            { NULL, NULL, 0, NULL }
          };

          static PyType_Slot PY_TYPE_SLOTS(QueryParserTokenManager)[] = {
            { Py_tp_methods, t_QueryParserTokenManager__methods_ },
            { Py_tp_init, (void *) t_QueryParserTokenManager_init_ },
            { Py_tp_getset, t_QueryParserTokenManager__fields_ },
            { 0, NULL }
          };

          static PyType_Def *PY_TYPE_BASES(QueryParserTokenManager)[] = {
            &PY_TYPE_DEF(::java::lang::Object),
            NULL
          };

          DEFINE_TYPE(QueryParserTokenManager, t_QueryParserTokenManager, QueryParserTokenManager);

          void t_QueryParserTokenManager::install(PyObject *module)
          {
            installType(&PY_TYPE(QueryParserTokenManager), &PY_TYPE_DEF(QueryParserTokenManager), module, "QueryParserTokenManager", 0);
          }

          void t_QueryParserTokenManager::initialize(PyObject *module)
          {
            PyObject_SetAttrString((PyObject *) PY_TYPE(QueryParserTokenManager), "class_", make_descriptor(QueryParserTokenManager::initializeClass, 1));
            PyObject_SetAttrString((PyObject *) PY_TYPE(QueryParserTokenManager), "wrapfn_", make_descriptor(t_QueryParserTokenManager::wrap_jobject));
            PyObject_SetAttrString((PyObject *) PY_TYPE(QueryParserTokenManager), "boxfn_", make_descriptor(boxObject));
            env->getClass(QueryParserTokenManager::initializeClass);
            PyObject_SetAttrString((PyObject *) PY_TYPE(QueryParserTokenManager), "jjnewLexState", make_descriptor(QueryParserTokenManager::jjnewLexState->wrap()));
            PyObject_SetAttrString((PyObject *) PY_TYPE(QueryParserTokenManager), "jjstrLiteralImages", make_descriptor(JArray<jstring>(QueryParserTokenManager::jjstrLiteralImages->this$).wrap()));
            PyObject_SetAttrString((PyObject *) PY_TYPE(QueryParserTokenManager), "lexStateNames", make_descriptor(JArray<jstring>(QueryParserTokenManager::lexStateNames->this$).wrap()));
          }

          static PyObject *t_QueryParserTokenManager_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, QueryParserTokenManager::initializeClass, 1)))
              return NULL;
            return t_QueryParserTokenManager::wrap_Object(QueryParserTokenManager(((t_QueryParserTokenManager *) arg)->object.this$));
          }
          static PyObject *t_QueryParserTokenManager_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, QueryParserTokenManager::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_QueryParserTokenManager_init_(t_QueryParserTokenManager *self, PyObject *args, PyObject *kwds)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 1:
              {
                ::org::apache::lucene::queryparser::classic::CharStream a0((jobject) NULL);
                QueryParserTokenManager object((jobject) NULL);

                if (!parseArgs(args, "k", ::org::apache::lucene::queryparser::classic::CharStream::initializeClass, &a0))
                {
                  INT_CALL(object = QueryParserTokenManager(a0));
                  self->object = object;
                  break;
                }
              }
              goto err;
             case 2:
              {
                ::org::apache::lucene::queryparser::classic::CharStream a0((jobject) NULL);
                jint a1;
                QueryParserTokenManager object((jobject) NULL);

                if (!parseArgs(args, "kI", ::org::apache::lucene::queryparser::classic::CharStream::initializeClass, &a0, &a1))
                {
                  INT_CALL(object = QueryParserTokenManager(a0, a1));
                  self->object = object;
                  break;
                }
              }
             default:
             err:
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_QueryParserTokenManager_ReInit(t_QueryParserTokenManager *self, PyObject *args)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 1:
              {
                ::org::apache::lucene::queryparser::classic::CharStream a0((jobject) NULL);

                if (!parseArgs(args, "k", ::org::apache::lucene::queryparser::classic::CharStream::initializeClass, &a0))
                {
                  OBJ_CALL(self->object.ReInit(a0));
                  Py_RETURN_NONE;
                }
              }
              break;
             case 2:
              {
                ::org::apache::lucene::queryparser::classic::CharStream a0((jobject) NULL);
                jint a1;

                if (!parseArgs(args, "kI", ::org::apache::lucene::queryparser::classic::CharStream::initializeClass, &a0, &a1))
                {
                  OBJ_CALL(self->object.ReInit(a0, a1));
                  Py_RETURN_NONE;
                }
              }
            }

            PyErr_SetArgsError((PyObject *) self, "ReInit", args);
            return NULL;
          }

          static PyObject *t_QueryParserTokenManager_SwitchTo(t_QueryParserTokenManager *self, PyObject *arg)
          {
            jint a0;

            if (!parseArg(arg, "I", &a0))
            {
              OBJ_CALL(self->object.SwitchTo(a0));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError((PyObject *) self, "SwitchTo", arg);
            return NULL;
          }

          static PyObject *t_QueryParserTokenManager_getNextToken(t_QueryParserTokenManager *self)
          {
            ::org::apache::lucene::queryparser::classic::Token result((jobject) NULL);
            OBJ_CALL(result = self->object.getNextToken());
            return ::org::apache::lucene::queryparser::classic::t_Token::wrap_Object(result);
          }

          static PyObject *t_QueryParserTokenManager_get__nextToken(t_QueryParserTokenManager *self, void *data)
          {
            ::org::apache::lucene::queryparser::classic::Token value((jobject) NULL);
            OBJ_CALL(value = self->object.getNextToken());
            return ::org::apache::lucene::queryparser::classic::t_Token::wrap_Object(value);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/util/packed/PagedGrowableWriter.h"
#include "org/apache/lucene/util/packed/PagedGrowableWriter.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        namespace packed {

          ::java::lang::Class *PagedGrowableWriter::class$ = NULL;
          jmethodID *PagedGrowableWriter::mids$ = NULL;
          bool PagedGrowableWriter::live$ = false;

          jclass PagedGrowableWriter::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/util/packed/PagedGrowableWriter");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_424abb77f7d49b95] = env->getMethodID(cls, "<init>", "(JIIF)V");
              mids$[mid_baseRamBytesUsed_2e5ae9edcb9b072f] = env->getMethodID(cls, "baseRamBytesUsed", "()J");
              mids$[mid_newMutable_15c7bed2e0f3a021] = env->getMethodID(cls, "newMutable", "(II)Lorg/apache/lucene/util/packed/PackedInts$Mutable;");
              mids$[mid_newUnfilledCopy_94a5fb7a24567d40] = env->getMethodID(cls, "newUnfilledCopy", "(J)Lorg/apache/lucene/util/packed/PagedGrowableWriter;");

              class$ = new ::java::lang::Class(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          PagedGrowableWriter::PagedGrowableWriter(jlong a0, jint a1, jint a2, jfloat a3) : ::org::apache::lucene::util::packed::AbstractPagedMutable(env->newObject(initializeClass, &mids$, mid_init$_424abb77f7d49b95, a0, a1, a2, a3)) {}
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        namespace packed {
          static PyObject *t_PagedGrowableWriter_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_PagedGrowableWriter_instance_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_PagedGrowableWriter_of_(t_PagedGrowableWriter *self, PyObject *args);
          static int t_PagedGrowableWriter_init_(t_PagedGrowableWriter *self, PyObject *args, PyObject *kwds);
          static PyObject *t_PagedGrowableWriter_get__parameters_(t_PagedGrowableWriter *self, void *data);
          static PyGetSetDef t_PagedGrowableWriter__fields_[] = {
            DECLARE_GET_FIELD(t_PagedGrowableWriter, parameters_),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_PagedGrowableWriter__methods_[] = {
            DECLARE_METHOD(t_PagedGrowableWriter, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_PagedGrowableWriter, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_PagedGrowableWriter, of_, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          static PyType_Slot PY_TYPE_SLOTS(PagedGrowableWriter)[] = {
            { Py_tp_methods, t_PagedGrowableWriter__methods_ },
            { Py_tp_init, (void *) t_PagedGrowableWriter_init_ },
            { Py_tp_getset, t_PagedGrowableWriter__fields_ },
            { 0, NULL }
          };

          static PyType_Def *PY_TYPE_BASES(PagedGrowableWriter)[] = {
            &PY_TYPE_DEF(::org::apache::lucene::util::packed::AbstractPagedMutable),
            NULL
          };

          DEFINE_TYPE(PagedGrowableWriter, t_PagedGrowableWriter, PagedGrowableWriter);
          PyObject *t_PagedGrowableWriter::wrap_Object(const PagedGrowableWriter& object, PyTypeObject *p0)
          {
            PyObject *obj = t_PagedGrowableWriter::wrap_Object(object);
            if (obj != NULL && obj != Py_None)
            {
              t_PagedGrowableWriter *self = (t_PagedGrowableWriter *) obj;
              self->parameters[0] = p0;
            }
            return obj;
          }

          PyObject *t_PagedGrowableWriter::wrap_jobject(const jobject& object, PyTypeObject *p0)
          {
            PyObject *obj = t_PagedGrowableWriter::wrap_jobject(object);
            if (obj != NULL && obj != Py_None)
            {
              t_PagedGrowableWriter *self = (t_PagedGrowableWriter *) obj;
              self->parameters[0] = p0;
            }
            return obj;
          }

          void t_PagedGrowableWriter::install(PyObject *module)
          {
            installType(&PY_TYPE(PagedGrowableWriter), &PY_TYPE_DEF(PagedGrowableWriter), module, "PagedGrowableWriter", 0);
          }

          void t_PagedGrowableWriter::initialize(PyObject *module)
          {
            PyObject_SetAttrString((PyObject *) PY_TYPE(PagedGrowableWriter), "class_", make_descriptor(PagedGrowableWriter::initializeClass, 1));
            PyObject_SetAttrString((PyObject *) PY_TYPE(PagedGrowableWriter), "wrapfn_", make_descriptor(t_PagedGrowableWriter::wrap_jobject));
            PyObject_SetAttrString((PyObject *) PY_TYPE(PagedGrowableWriter), "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_PagedGrowableWriter_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, PagedGrowableWriter::initializeClass, 1)))
              return NULL;
            return t_PagedGrowableWriter::wrap_Object(PagedGrowableWriter(((t_PagedGrowableWriter *) arg)->object.this$));
          }
          static PyObject *t_PagedGrowableWriter_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, PagedGrowableWriter::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static PyObject *t_PagedGrowableWriter_of_(t_PagedGrowableWriter *self, PyObject *args)
          {
            if (!parseArg(args, "T", 1, &(self->parameters)))
              Py_RETURN_SELF;
            return PyErr_SetArgsError((PyObject *) self, "of_", args);
          }

          static int t_PagedGrowableWriter_init_(t_PagedGrowableWriter *self, PyObject *args, PyObject *kwds)
          {
            jlong a0;
            jint a1;
            jint a2;
            jfloat a3;
            PagedGrowableWriter object((jobject) NULL);

            if (!parseArgs(args, "JIIF", &a0, &a1, &a2, &a3))
            {
              INT_CALL(object = PagedGrowableWriter(a0, a1, a2, a3));
              self->object = object;
              self->parameters[0] = ::org::apache::lucene::util::packed::PY_TYPE(PagedGrowableWriter);
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }
          static PyObject *t_PagedGrowableWriter_get__parameters_(t_PagedGrowableWriter *self, void *data)
          {
            return typeParameters(self->parameters, sizeof(self->parameters));
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/codecs/PostingsWriterBase.h"
#include "org/apache/lucene/store/IndexOutput.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/codecs/NormsProducer.h"
#include "java/io/Closeable.h"
#include "org/apache/lucene/store/DataOutput.h"
#include "org/apache/lucene/util/BytesRef.h"
#include "org/apache/lucene/util/FixedBitSet.h"
#include "org/apache/lucene/index/SegmentWriteState.h"
#include "org/apache/lucene/index/FieldInfo.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/codecs/BlockTermState.h"
#include "org/apache/lucene/index/TermsEnum.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace codecs {

        ::java::lang::Class *PostingsWriterBase::class$ = NULL;
        jmethodID *PostingsWriterBase::mids$ = NULL;
        bool PostingsWriterBase::live$ = false;

        jclass PostingsWriterBase::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/codecs/PostingsWriterBase");

            mids$ = new jmethodID[max_mid];
            mids$[mid_close_f2cc1bce94666404] = env->getMethodID(cls, "close", "()V");
            mids$[mid_encodeTerm_f62bffe9c51f545a] = env->getMethodID(cls, "encodeTerm", "(Lorg/apache/lucene/store/DataOutput;Lorg/apache/lucene/index/FieldInfo;Lorg/apache/lucene/codecs/BlockTermState;Z)V");
            mids$[mid_init_4c065b7dbc1107da] = env->getMethodID(cls, "init", "(Lorg/apache/lucene/store/IndexOutput;Lorg/apache/lucene/index/SegmentWriteState;)V");
            mids$[mid_setField_747195a1c5ce5890] = env->getMethodID(cls, "setField", "(Lorg/apache/lucene/index/FieldInfo;)V");
            mids$[mid_writeTerm_41dc9e7b1a45a8ed] = env->getMethodID(cls, "writeTerm", "(Lorg/apache/lucene/util/BytesRef;Lorg/apache/lucene/index/TermsEnum;Lorg/apache/lucene/util/FixedBitSet;Lorg/apache/lucene/codecs/NormsProducer;)Lorg/apache/lucene/codecs/BlockTermState;");

            class$ = new ::java::lang::Class(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        void PostingsWriterBase::close() const
        {
          env->callVoidMethod(this$, mids$[mid_close_f2cc1bce94666404]);
        }

        void PostingsWriterBase::encodeTerm(const ::org::apache::lucene::store::DataOutput & a0, const ::org::apache::lucene::index::FieldInfo & a1, const ::org::apache::lucene::codecs::BlockTermState & a2, jboolean a3) const
        {
          env->callVoidMethod(this$, mids$[mid_encodeTerm_f62bffe9c51f545a], a0.this$, a1.this$, a2.this$, a3);
        }

        void PostingsWriterBase::init(const ::org::apache::lucene::store::IndexOutput & a0, const ::org::apache::lucene::index::SegmentWriteState & a1) const
        {
          env->callVoidMethod(this$, mids$[mid_init_4c065b7dbc1107da], a0.this$, a1.this$);
        }

        void PostingsWriterBase::setField(const ::org::apache::lucene::index::FieldInfo & a0) const
        {
          env->callVoidMethod(this$, mids$[mid_setField_747195a1c5ce5890], a0.this$);
        }

        ::org::apache::lucene::codecs::BlockTermState PostingsWriterBase::writeTerm(const ::org::apache::lucene::util::BytesRef & a0, const ::org::apache::lucene::index::TermsEnum & a1, const ::org::apache::lucene::util::FixedBitSet & a2, const ::org::apache::lucene::codecs::NormsProducer & a3) const
        {
          return ::org::apache::lucene::codecs::BlockTermState(env->callObjectMethod(this$, mids$[mid_writeTerm_41dc9e7b1a45a8ed], a0.this$, a1.this$, a2.this$, a3.this$));
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace codecs {
        static PyObject *t_PostingsWriterBase_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_PostingsWriterBase_instance_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_PostingsWriterBase_close(t_PostingsWriterBase *self);
        static PyObject *t_PostingsWriterBase_encodeTerm(t_PostingsWriterBase *self, PyObject *args);
        static PyObject *t_PostingsWriterBase_init(t_PostingsWriterBase *self, PyObject *args);
        static PyObject *t_PostingsWriterBase_setField(t_PostingsWriterBase *self, PyObject *arg);
        static PyObject *t_PostingsWriterBase_writeTerm(t_PostingsWriterBase *self, PyObject *args);
        static int t_PostingsWriterBase_set__field(t_PostingsWriterBase *self, PyObject *arg, void *data);
        static PyGetSetDef t_PostingsWriterBase__fields_[] = {
          DECLARE_SET_FIELD(t_PostingsWriterBase, field),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_PostingsWriterBase__methods_[] = {
          DECLARE_METHOD(t_PostingsWriterBase, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_PostingsWriterBase, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_PostingsWriterBase, close, METH_NOARGS),
          DECLARE_METHOD(t_PostingsWriterBase, encodeTerm, METH_VARARGS),
          DECLARE_METHOD(t_PostingsWriterBase, init, METH_VARARGS),
          DECLARE_METHOD(t_PostingsWriterBase, setField, METH_O),
          DECLARE_METHOD(t_PostingsWriterBase, writeTerm, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        static PyType_Slot PY_TYPE_SLOTS(PostingsWriterBase)[] = {
          { Py_tp_methods, t_PostingsWriterBase__methods_ },
          { Py_tp_init, (void *) abstract_init },
          { Py_tp_getset, t_PostingsWriterBase__fields_ },
          { 0, NULL }
        };

        static PyType_Def *PY_TYPE_BASES(PostingsWriterBase)[] = {
          &PY_TYPE_DEF(::java::lang::Object),
          NULL
        };

        DEFINE_TYPE(PostingsWriterBase, t_PostingsWriterBase, PostingsWriterBase);

        void t_PostingsWriterBase::install(PyObject *module)
        {
          installType(&PY_TYPE(PostingsWriterBase), &PY_TYPE_DEF(PostingsWriterBase), module, "PostingsWriterBase", 0);
        }

        void t_PostingsWriterBase::initialize(PyObject *module)
        {
          PyObject_SetAttrString((PyObject *) PY_TYPE(PostingsWriterBase), "class_", make_descriptor(PostingsWriterBase::initializeClass, 1));
          PyObject_SetAttrString((PyObject *) PY_TYPE(PostingsWriterBase), "wrapfn_", make_descriptor(t_PostingsWriterBase::wrap_jobject));
          PyObject_SetAttrString((PyObject *) PY_TYPE(PostingsWriterBase), "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_PostingsWriterBase_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, PostingsWriterBase::initializeClass, 1)))
            return NULL;
          return t_PostingsWriterBase::wrap_Object(PostingsWriterBase(((t_PostingsWriterBase *) arg)->object.this$));
        }
        static PyObject *t_PostingsWriterBase_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, PostingsWriterBase::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static PyObject *t_PostingsWriterBase_close(t_PostingsWriterBase *self)
        {
          OBJ_CALL(self->object.close());
          Py_RETURN_NONE;
        }

        static PyObject *t_PostingsWriterBase_encodeTerm(t_PostingsWriterBase *self, PyObject *args)
        {
          ::org::apache::lucene::store::DataOutput a0((jobject) NULL);
          ::org::apache::lucene::index::FieldInfo a1((jobject) NULL);
          ::org::apache::lucene::codecs::BlockTermState a2((jobject) NULL);
          jboolean a3;

          if (!parseArgs(args, "kkkZ", ::org::apache::lucene::store::DataOutput::initializeClass, ::org::apache::lucene::index::FieldInfo::initializeClass, ::org::apache::lucene::codecs::BlockTermState::initializeClass, &a0, &a1, &a2, &a3))
          {
            OBJ_CALL(self->object.encodeTerm(a0, a1, a2, a3));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "encodeTerm", args);
          return NULL;
        }

        static PyObject *t_PostingsWriterBase_init(t_PostingsWriterBase *self, PyObject *args)
        {
          ::org::apache::lucene::store::IndexOutput a0((jobject) NULL);
          ::org::apache::lucene::index::SegmentWriteState a1((jobject) NULL);

          if (!parseArgs(args, "kk", ::org::apache::lucene::store::IndexOutput::initializeClass, ::org::apache::lucene::index::SegmentWriteState::initializeClass, &a0, &a1))
          {
            OBJ_CALL(self->object.init(a0, a1));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "init", args);
          return NULL;
        }

        static PyObject *t_PostingsWriterBase_setField(t_PostingsWriterBase *self, PyObject *arg)
        {
          ::org::apache::lucene::index::FieldInfo a0((jobject) NULL);

          if (!parseArg(arg, "k", ::org::apache::lucene::index::FieldInfo::initializeClass, &a0))
          {
            OBJ_CALL(self->object.setField(a0));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "setField", arg);
          return NULL;
        }

        static PyObject *t_PostingsWriterBase_writeTerm(t_PostingsWriterBase *self, PyObject *args)
        {
          ::org::apache::lucene::util::BytesRef a0((jobject) NULL);
          ::org::apache::lucene::index::TermsEnum a1((jobject) NULL);
          ::org::apache::lucene::util::FixedBitSet a2((jobject) NULL);
          ::org::apache::lucene::codecs::NormsProducer a3((jobject) NULL);
          ::org::apache::lucene::codecs::BlockTermState result((jobject) NULL);

          if (!parseArgs(args, "kkkk", ::org::apache::lucene::util::BytesRef::initializeClass, ::org::apache::lucene::index::TermsEnum::initializeClass, ::org::apache::lucene::util::FixedBitSet::initializeClass, ::org::apache::lucene::codecs::NormsProducer::initializeClass, &a0, &a1, &a2, &a3))
          {
            OBJ_CALL(result = self->object.writeTerm(a0, a1, a2, a3));
            return ::org::apache::lucene::codecs::t_BlockTermState::wrap_Object(result);
          }

          PyErr_SetArgsError((PyObject *) self, "writeTerm", args);
          return NULL;
        }

        static int t_PostingsWriterBase_set__field(t_PostingsWriterBase *self, PyObject *arg, void *data)
        {
          {
            ::org::apache::lucene::index::FieldInfo value((jobject) NULL);
            if (!parseArg(arg, "k", ::org::apache::lucene::index::FieldInfo::initializeClass, &value))
            {
              INT_CALL(self->object.setField(value));
              return 0;
            }
          }
          PyErr_SetArgsError((PyObject *) self, "field", arg);
          return -1;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/suggest/Lookup$LookupPriorityQueue.h"
#include "org/apache/lucene/search/suggest/Lookup$LookupResult.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace suggest {

          ::java::lang::Class *Lookup$LookupPriorityQueue::class$ = NULL;
          jmethodID *Lookup$LookupPriorityQueue::mids$ = NULL;
          bool Lookup$LookupPriorityQueue::live$ = false;

          jclass Lookup$LookupPriorityQueue::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/search/suggest/Lookup$LookupPriorityQueue");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_040c4cd0390c5aff] = env->getMethodID(cls, "<init>", "(I)V");
              mids$[mid_getResults_1a5a470cdd517b9c] = env->getMethodID(cls, "getResults", "()[Lorg/apache/lucene/search/suggest/Lookup$LookupResult;");
              mids$[mid_lessThan_6ee020b4330cb3c5] = env->getMethodID(cls, "lessThan", "(Lorg/apache/lucene/search/suggest/Lookup$LookupResult;Lorg/apache/lucene/search/suggest/Lookup$LookupResult;)Z");

              class$ = new ::java::lang::Class(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          Lookup$LookupPriorityQueue::Lookup$LookupPriorityQueue(jint a0) : ::org::apache::lucene::util::PriorityQueue(env->newObject(initializeClass, &mids$, mid_init$_040c4cd0390c5aff, a0)) {}

          JArray< ::org::apache::lucene::search::suggest::Lookup$LookupResult > Lookup$LookupPriorityQueue::getResults() const
          {
            return JArray< ::org::apache::lucene::search::suggest::Lookup$LookupResult >(env->callObjectMethod(this$, mids$[mid_getResults_1a5a470cdd517b9c]));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace suggest {
          static PyObject *t_Lookup$LookupPriorityQueue_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_Lookup$LookupPriorityQueue_instance_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_Lookup$LookupPriorityQueue_of_(t_Lookup$LookupPriorityQueue *self, PyObject *args);
          static int t_Lookup$LookupPriorityQueue_init_(t_Lookup$LookupPriorityQueue *self, PyObject *args, PyObject *kwds);
          static PyObject *t_Lookup$LookupPriorityQueue_getResults(t_Lookup$LookupPriorityQueue *self);
          static PyObject *t_Lookup$LookupPriorityQueue_get__results(t_Lookup$LookupPriorityQueue *self, void *data);
          static PyObject *t_Lookup$LookupPriorityQueue_get__parameters_(t_Lookup$LookupPriorityQueue *self, void *data);
          static PyGetSetDef t_Lookup$LookupPriorityQueue__fields_[] = {
            DECLARE_GET_FIELD(t_Lookup$LookupPriorityQueue, results),
            DECLARE_GET_FIELD(t_Lookup$LookupPriorityQueue, parameters_),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_Lookup$LookupPriorityQueue__methods_[] = {
            DECLARE_METHOD(t_Lookup$LookupPriorityQueue, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_Lookup$LookupPriorityQueue, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_Lookup$LookupPriorityQueue, of_, METH_VARARGS),
            DECLARE_METHOD(t_Lookup$LookupPriorityQueue, getResults, METH_NOARGS),
            { NULL, NULL, 0, NULL }
          };

          static PyType_Slot PY_TYPE_SLOTS(Lookup$LookupPriorityQueue)[] = {
            { Py_tp_methods, t_Lookup$LookupPriorityQueue__methods_ },
            { Py_tp_init, (void *) t_Lookup$LookupPriorityQueue_init_ },
            { Py_tp_getset, t_Lookup$LookupPriorityQueue__fields_ },
            { 0, NULL }
          };

          static PyType_Def *PY_TYPE_BASES(Lookup$LookupPriorityQueue)[] = {
            &PY_TYPE_DEF(::org::apache::lucene::util::PriorityQueue),
            NULL
          };

          DEFINE_TYPE(Lookup$LookupPriorityQueue, t_Lookup$LookupPriorityQueue, Lookup$LookupPriorityQueue);
          PyObject *t_Lookup$LookupPriorityQueue::wrap_Object(const Lookup$LookupPriorityQueue& object, PyTypeObject *p0)
          {
            PyObject *obj = t_Lookup$LookupPriorityQueue::wrap_Object(object);
            if (obj != NULL && obj != Py_None)
            {
              t_Lookup$LookupPriorityQueue *self = (t_Lookup$LookupPriorityQueue *) obj;
              self->parameters[0] = p0;
            }
            return obj;
          }

          PyObject *t_Lookup$LookupPriorityQueue::wrap_jobject(const jobject& object, PyTypeObject *p0)
          {
            PyObject *obj = t_Lookup$LookupPriorityQueue::wrap_jobject(object);
            if (obj != NULL && obj != Py_None)
            {
              t_Lookup$LookupPriorityQueue *self = (t_Lookup$LookupPriorityQueue *) obj;
              self->parameters[0] = p0;
            }
            return obj;
          }

          void t_Lookup$LookupPriorityQueue::install(PyObject *module)
          {
            installType(&PY_TYPE(Lookup$LookupPriorityQueue), &PY_TYPE_DEF(Lookup$LookupPriorityQueue), module, "Lookup$LookupPriorityQueue", 0);
          }

          void t_Lookup$LookupPriorityQueue::initialize(PyObject *module)
          {
            PyObject_SetAttrString((PyObject *) PY_TYPE(Lookup$LookupPriorityQueue), "class_", make_descriptor(Lookup$LookupPriorityQueue::initializeClass, 1));
            PyObject_SetAttrString((PyObject *) PY_TYPE(Lookup$LookupPriorityQueue), "wrapfn_", make_descriptor(t_Lookup$LookupPriorityQueue::wrap_jobject));
            PyObject_SetAttrString((PyObject *) PY_TYPE(Lookup$LookupPriorityQueue), "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_Lookup$LookupPriorityQueue_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, Lookup$LookupPriorityQueue::initializeClass, 1)))
              return NULL;
            return t_Lookup$LookupPriorityQueue::wrap_Object(Lookup$LookupPriorityQueue(((t_Lookup$LookupPriorityQueue *) arg)->object.this$));
          }
          static PyObject *t_Lookup$LookupPriorityQueue_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, Lookup$LookupPriorityQueue::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static PyObject *t_Lookup$LookupPriorityQueue_of_(t_Lookup$LookupPriorityQueue *self, PyObject *args)
          {
            if (!parseArg(args, "T", 1, &(self->parameters)))
              Py_RETURN_SELF;
            return PyErr_SetArgsError((PyObject *) self, "of_", args);
          }

          static int t_Lookup$LookupPriorityQueue_init_(t_Lookup$LookupPriorityQueue *self, PyObject *args, PyObject *kwds)
          {
            jint a0;
            Lookup$LookupPriorityQueue object((jobject) NULL);

            if (!parseArgs(args, "I", &a0))
            {
              INT_CALL(object = Lookup$LookupPriorityQueue(a0));
              self->object = object;
              self->parameters[0] = ::org::apache::lucene::search::suggest::PY_TYPE(Lookup$LookupResult);
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_Lookup$LookupPriorityQueue_getResults(t_Lookup$LookupPriorityQueue *self)
          {
            JArray< ::org::apache::lucene::search::suggest::Lookup$LookupResult > result((jobject) NULL);
            OBJ_CALL(result = self->object.getResults());
            return JArray<jobject>(result.this$).wrap(::org::apache::lucene::search::suggest::t_Lookup$LookupResult::wrap_jobject);
          }
          static PyObject *t_Lookup$LookupPriorityQueue_get__parameters_(t_Lookup$LookupPriorityQueue *self, void *data)
          {
            return typeParameters(self->parameters, sizeof(self->parameters));
          }

          static PyObject *t_Lookup$LookupPriorityQueue_get__results(t_Lookup$LookupPriorityQueue *self, void *data)
          {
            JArray< ::org::apache::lucene::search::suggest::Lookup$LookupResult > value((jobject) NULL);
            OBJ_CALL(value = self->object.getResults());
            return JArray<jobject>(value.this$).wrap(::org::apache::lucene::search::suggest::t_Lookup$LookupResult::wrap_jobject);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/util/Selector.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {

        ::java::lang::Class *Selector::class$ = NULL;
        jmethodID *Selector::mids$ = NULL;
        bool Selector::live$ = false;

        jclass Selector::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/util/Selector");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_f2cc1bce94666404] = env->getMethodID(cls, "<init>", "()V");
            mids$[mid_select_db3e97653d3683f3] = env->getMethodID(cls, "select", "(III)V");
            mids$[mid_swap_438c62480c481c65] = env->getMethodID(cls, "swap", "(II)V");

            class$ = new ::java::lang::Class(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        Selector::Selector() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_f2cc1bce94666404)) {}

        void Selector::select(jint a0, jint a1, jint a2) const
        {
          env->callVoidMethod(this$, mids$[mid_select_db3e97653d3683f3], a0, a1, a2);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        static PyObject *t_Selector_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_Selector_instance_(PyTypeObject *type, PyObject *arg);
        static int t_Selector_init_(t_Selector *self, PyObject *args, PyObject *kwds);
        static PyObject *t_Selector_select(t_Selector *self, PyObject *args);

        static PyMethodDef t_Selector__methods_[] = {
          DECLARE_METHOD(t_Selector, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_Selector, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_Selector, select, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        static PyType_Slot PY_TYPE_SLOTS(Selector)[] = {
          { Py_tp_methods, t_Selector__methods_ },
          { Py_tp_init, (void *) t_Selector_init_ },
          { 0, NULL }
        };

        static PyType_Def *PY_TYPE_BASES(Selector)[] = {
          &PY_TYPE_DEF(::java::lang::Object),
          NULL
        };

        DEFINE_TYPE(Selector, t_Selector, Selector);

        void t_Selector::install(PyObject *module)
        {
          installType(&PY_TYPE(Selector), &PY_TYPE_DEF(Selector), module, "Selector", 0);
        }

        void t_Selector::initialize(PyObject *module)
        {
          PyObject_SetAttrString((PyObject *) PY_TYPE(Selector), "class_", make_descriptor(Selector::initializeClass, 1));
          PyObject_SetAttrString((PyObject *) PY_TYPE(Selector), "wrapfn_", make_descriptor(t_Selector::wrap_jobject));
          PyObject_SetAttrString((PyObject *) PY_TYPE(Selector), "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_Selector_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, Selector::initializeClass, 1)))
            return NULL;
          return t_Selector::wrap_Object(Selector(((t_Selector *) arg)->object.this$));
        }
        static PyObject *t_Selector_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, Selector::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_Selector_init_(t_Selector *self, PyObject *args, PyObject *kwds)
        {
          Selector object((jobject) NULL);

          INT_CALL(object = Selector());
          self->object = object;

          return 0;
        }

        static PyObject *t_Selector_select(t_Selector *self, PyObject *args)
        {
          jint a0;
          jint a1;
          jint a2;

          if (!parseArgs(args, "III", &a0, &a1, &a2))
          {
            OBJ_CALL(self->object.select(a0, a1, a2));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "select", args);
          return NULL;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/es/SpanishLightStemFilter.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/analysis/TokenStream.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace es {

          ::java::lang::Class *SpanishLightStemFilter::class$ = NULL;
          jmethodID *SpanishLightStemFilter::mids$ = NULL;
          bool SpanishLightStemFilter::live$ = false;

          jclass SpanishLightStemFilter::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/es/SpanishLightStemFilter");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_c26756868a754f4e] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/analysis/TokenStream;)V");
              mids$[mid_incrementToken_8454bd5aa23fd11e] = env->getMethodID(cls, "incrementToken", "()Z");

              class$ = new ::java::lang::Class(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          SpanishLightStemFilter::SpanishLightStemFilter(const ::org::apache::lucene::analysis::TokenStream & a0) : ::org::apache::lucene::analysis::TokenFilter(env->newObject(initializeClass, &mids$, mid_init$_c26756868a754f4e, a0.this$)) {}

          jboolean SpanishLightStemFilter::incrementToken() const
          {
            return env->callBooleanMethod(this$, mids$[mid_incrementToken_8454bd5aa23fd11e]);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace es {
          static PyObject *t_SpanishLightStemFilter_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_SpanishLightStemFilter_instance_(PyTypeObject *type, PyObject *arg);
          static int t_SpanishLightStemFilter_init_(t_SpanishLightStemFilter *self, PyObject *args, PyObject *kwds);
          static PyObject *t_SpanishLightStemFilter_incrementToken(t_SpanishLightStemFilter *self, PyObject *args);

          static PyMethodDef t_SpanishLightStemFilter__methods_[] = {
            DECLARE_METHOD(t_SpanishLightStemFilter, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_SpanishLightStemFilter, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_SpanishLightStemFilter, incrementToken, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          static PyType_Slot PY_TYPE_SLOTS(SpanishLightStemFilter)[] = {
            { Py_tp_methods, t_SpanishLightStemFilter__methods_ },
            { Py_tp_init, (void *) t_SpanishLightStemFilter_init_ },
            { 0, NULL }
          };

          static PyType_Def *PY_TYPE_BASES(SpanishLightStemFilter)[] = {
            &PY_TYPE_DEF(::org::apache::lucene::analysis::TokenFilter),
            NULL
          };

          DEFINE_TYPE(SpanishLightStemFilter, t_SpanishLightStemFilter, SpanishLightStemFilter);

          void t_SpanishLightStemFilter::install(PyObject *module)
          {
            installType(&PY_TYPE(SpanishLightStemFilter), &PY_TYPE_DEF(SpanishLightStemFilter), module, "SpanishLightStemFilter", 0);
          }

          void t_SpanishLightStemFilter::initialize(PyObject *module)
          {
            PyObject_SetAttrString((PyObject *) PY_TYPE(SpanishLightStemFilter), "class_", make_descriptor(SpanishLightStemFilter::initializeClass, 1));
            PyObject_SetAttrString((PyObject *) PY_TYPE(SpanishLightStemFilter), "wrapfn_", make_descriptor(t_SpanishLightStemFilter::wrap_jobject));
            PyObject_SetAttrString((PyObject *) PY_TYPE(SpanishLightStemFilter), "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_SpanishLightStemFilter_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, SpanishLightStemFilter::initializeClass, 1)))
              return NULL;
            return t_SpanishLightStemFilter::wrap_Object(SpanishLightStemFilter(((t_SpanishLightStemFilter *) arg)->object.this$));
          }
          static PyObject *t_SpanishLightStemFilter_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, SpanishLightStemFilter::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_SpanishLightStemFilter_init_(t_SpanishLightStemFilter *self, PyObject *args, PyObject *kwds)
          {
            ::org::apache::lucene::analysis::TokenStream a0((jobject) NULL);
            SpanishLightStemFilter object((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::analysis::TokenStream::initializeClass, &a0))
            {
              INT_CALL(object = SpanishLightStemFilter(a0));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_SpanishLightStemFilter_incrementToken(t_SpanishLightStemFilter *self, PyObject *args)
          {
            jboolean result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.incrementToken());
              Py_RETURN_BOOL(result);
            }

            return callSuper(PY_TYPE(SpanishLightStemFilter), (PyObject *) self, "incrementToken", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queries/function/valuesource/ProductFloatFunction.h"
#include "org/apache/lucene/queries/function/ValueSource.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queries {
        namespace function {
          namespace valuesource {

            ::java::lang::Class *ProductFloatFunction::class$ = NULL;
            jmethodID *ProductFloatFunction::mids$ = NULL;
            bool ProductFloatFunction::live$ = false;

            jclass ProductFloatFunction::initializeClass(bool getOnly)
            {
              if (getOnly)
                return (jclass) (live$ ? class$->this$ : NULL);
              if (class$ == NULL)
              {
                jclass cls = (jclass) env->findClass("org/apache/lucene/queries/function/valuesource/ProductFloatFunction");

                mids$ = new jmethodID[max_mid];
                mids$[mid_init$_103f1bad010d62d9] = env->getMethodID(cls, "<init>", "([Lorg/apache/lucene/queries/function/ValueSource;)V");
                mids$[mid_func_e36b2f77f3be25c3] = env->getMethodID(cls, "func", "(I[Lorg/apache/lucene/queries/function/FunctionValues;)F");
                mids$[mid_name_db9b55ba01e03e4b] = env->getMethodID(cls, "name", "()Ljava/lang/String;");

                class$ = new ::java::lang::Class(cls);
                live$ = true;
              }
              return (jclass) class$->this$;
            }

            ProductFloatFunction::ProductFloatFunction(const JArray< ::org::apache::lucene::queries::function::ValueSource > & a0) : ::org::apache::lucene::queries::function::valuesource::MultiFloatFunction(env->newObject(initializeClass, &mids$, mid_init$_103f1bad010d62d9, a0.this$)) {}
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queries {
        namespace function {
          namespace valuesource {
            static PyObject *t_ProductFloatFunction_cast_(PyTypeObject *type, PyObject *arg);
            static PyObject *t_ProductFloatFunction_instance_(PyTypeObject *type, PyObject *arg);
            static int t_ProductFloatFunction_init_(t_ProductFloatFunction *self, PyObject *args, PyObject *kwds);

            static PyMethodDef t_ProductFloatFunction__methods_[] = {
              DECLARE_METHOD(t_ProductFloatFunction, cast_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_ProductFloatFunction, instance_, METH_O | METH_CLASS),
              { NULL, NULL, 0, NULL }
            };

            static PyType_Slot PY_TYPE_SLOTS(ProductFloatFunction)[] = {
              { Py_tp_methods, t_ProductFloatFunction__methods_ },
              { Py_tp_init, (void *) t_ProductFloatFunction_init_ },
              { 0, NULL }
            };

            static PyType_Def *PY_TYPE_BASES(ProductFloatFunction)[] = {
              &PY_TYPE_DEF(::org::apache::lucene::queries::function::valuesource::MultiFloatFunction),
              NULL
            };

            DEFINE_TYPE(ProductFloatFunction, t_ProductFloatFunction, ProductFloatFunction);

            void t_ProductFloatFunction::install(PyObject *module)
            {
              installType(&PY_TYPE(ProductFloatFunction), &PY_TYPE_DEF(ProductFloatFunction), module, "ProductFloatFunction", 0);
            }

            void t_ProductFloatFunction::initialize(PyObject *module)
            {
              PyObject_SetAttrString((PyObject *) PY_TYPE(ProductFloatFunction), "class_", make_descriptor(ProductFloatFunction::initializeClass, 1));
              PyObject_SetAttrString((PyObject *) PY_TYPE(ProductFloatFunction), "wrapfn_", make_descriptor(t_ProductFloatFunction::wrap_jobject));
              PyObject_SetAttrString((PyObject *) PY_TYPE(ProductFloatFunction), "boxfn_", make_descriptor(boxObject));
            }

            static PyObject *t_ProductFloatFunction_cast_(PyTypeObject *type, PyObject *arg)
            {
              if (!(arg = castCheck(arg, ProductFloatFunction::initializeClass, 1)))
                return NULL;
              return t_ProductFloatFunction::wrap_Object(ProductFloatFunction(((t_ProductFloatFunction *) arg)->object.this$));
            }
            static PyObject *t_ProductFloatFunction_instance_(PyTypeObject *type, PyObject *arg)
            {
              if (!castCheck(arg, ProductFloatFunction::initializeClass, 0))
                Py_RETURN_FALSE;
              Py_RETURN_TRUE;
            }

            static int t_ProductFloatFunction_init_(t_ProductFloatFunction *self, PyObject *args, PyObject *kwds)
            {
              JArray< ::org::apache::lucene::queries::function::ValueSource > a0((jobject) NULL);
              ProductFloatFunction object((jobject) NULL);

              if (!parseArgs(args, "[k", ::org::apache::lucene::queries::function::ValueSource::initializeClass, &a0))
              {
                INT_CALL(object = ProductFloatFunction(a0));
                self->object = object;
              }
              else
              {
                PyErr_SetArgsError((PyObject *) self, "__init__", args);
                return -1;
              }

              return 0;
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "java/util/Collections.h"
#include "java/util/Map.h"
#include "java/util/Collection.h"
#include "java/util/ArrayList.h"
#include "java/util/NavigableSet.h"
#include "java/util/Enumeration.h"
#include "java/util/Iterator.h"
#include "java/util/ListIterator.h"
#include "java/lang/Boolean.h"
#include "java/util/NavigableMap.h"
#include "java/lang/Class.h"
#include "java/util/List.h"
#include "java/util/Queue.h"
#include "java/lang/Comparable.h"
#include "java/util/SortedMap.h"
#include "java/util/Deque.h"
#include "java/util/Set.h"
#include "java/util/Random.h"
#include "java/util/SortedSet.h"
#include "java/util/Comparator.h"
#include "JArray.h"

namespace java {
  namespace util {

    ::java::lang::Class *Collections::class$ = NULL;
    jmethodID *Collections::mids$ = NULL;
    bool Collections::live$ = false;
    ::java::util::List *Collections::EMPTY_LIST = NULL;
    ::java::util::Map *Collections::EMPTY_MAP = NULL;
    ::java::util::Set *Collections::EMPTY_SET = NULL;

    jclass Collections::initializeClass(bool getOnly)
    {
      if (getOnly)
        return (jclass) (live$ ? class$->this$ : NULL);
      if (class$ == NULL)
      {
        jclass cls = (jclass) env->findClass("java/util/Collections");

        mids$ = new jmethodID[max_mid];
        mids$[mid_addAll_b633b5831963bba7] = env->getStaticMethodID(cls, "addAll", "(Ljava/util/Collection;[Ljava/lang/Object;)Z");
        mids$[mid_asLifoQueue_92007579fe249b3b] = env->getStaticMethodID(cls, "asLifoQueue", "(Ljava/util/Deque;)Ljava/util/Queue;");
        mids$[mid_binarySearch_f67918463bbb76f0] = env->getStaticMethodID(cls, "binarySearch", "(Ljava/util/List;Ljava/lang/Object;)I");
        mids$[mid_binarySearch_f65eba44a0ba07dc] = env->getStaticMethodID(cls, "binarySearch", "(Ljava/util/List;Ljava/lang/Object;Ljava/util/Comparator;)I");
        mids$[mid_checkedCollection_5daa7c9c1e614e1a] = env->getStaticMethodID(cls, "checkedCollection", "(Ljava/util/Collection;Ljava/lang/Class;)Ljava/util/Collection;");
        mids$[mid_checkedList_c2ef094a17878f20] = env->getStaticMethodID(cls, "checkedList", "(Ljava/util/List;Ljava/lang/Class;)Ljava/util/List;");
        mids$[mid_checkedMap_a2c847d1e81cf7b3] = env->getStaticMethodID(cls, "checkedMap", "(Ljava/util/Map;Ljava/lang/Class;Ljava/lang/Class;)Ljava/util/Map;");
        mids$[mid_checkedNavigableMap_6a7149dc196878d1] = env->getStaticMethodID(cls, "checkedNavigableMap", "(Ljava/util/NavigableMap;Ljava/lang/Class;Ljava/lang/Class;)Ljava/util/NavigableMap;");
        mids$[mid_checkedNavigableSet_f516efffaf805047] = env->getStaticMethodID(cls, "checkedNavigableSet", "(Ljava/util/NavigableSet;Ljava/lang/Class;)Ljava/util/NavigableSet;");
        mids$[mid_checkedQueue_41aec1c14e8f7f56] = env->getStaticMethodID(cls, "checkedQueue", "(Ljava/util/Queue;Ljava/lang/Class;)Ljava/util/Queue;");
        mids$[mid_checkedSet_e6675b276e8a7281] = env->getStaticMethodID(cls, "checkedSet", "(Ljava/util/Set;Ljava/lang/Class;)Ljava/util/Set;");
        mids$[mid_checkedSortedMap_94d32f2093ffa555] = env->getStaticMethodID(cls, "checkedSortedMap", "(Ljava/util/SortedMap;Ljava/lang/Class;Ljava/lang/Class;)Ljava/util/SortedMap;");
        mids$[mid_checkedSortedSet_ee02c92e5fb9000f] = env->getStaticMethodID(cls, "checkedSortedSet", "(Ljava/util/SortedSet;Ljava/lang/Class;)Ljava/util/SortedSet;");
        mids$[mid_copy_c734de9369b606d5] = env->getStaticMethodID(cls, "copy", "(Ljava/util/List;Ljava/util/List;)V");
        mids$[mid_disjoint_db84e57f676489cd] = env->getStaticMethodID(cls, "disjoint", "(Ljava/util/Collection;Ljava/util/Collection;)Z");
        mids$[mid_emptyEnumeration_f270cc1d2d4072a8] = env->getStaticMethodID(cls, "emptyEnumeration", "()Ljava/util/Enumeration;");
        mids$[mid_emptyIterator_233a192dadb0917d] = env->getStaticMethodID(cls, "emptyIterator", "()Ljava/util/Iterator;");
        mids$[mid_emptyList_49ec78390f08338a] = env->getStaticMethodID(cls, "emptyList", "()Ljava/util/List;");
        mids$[mid_emptyListIterator_78bda7a3d01214c3] = env->getStaticMethodID(cls, "emptyListIterator", "()Ljava/util/ListIterator;");
        mids$[mid_emptyMap_1c3426541413a55d] = env->getStaticMethodID(cls, "emptyMap", "()Ljava/util/Map;");
        mids$[mid_emptyNavigableMap_4e7fc959a77f584b] = env->getStaticMethodID(cls, "emptyNavigableMap", "()Ljava/util/NavigableMap;");
        mids$[mid_emptyNavigableSet_69a674c200eed505] = env->getStaticMethodID(cls, "emptyNavigableSet", "()Ljava/util/NavigableSet;");
        mids$[mid_emptySet_7dcf4034c6d1a92a] = env->getStaticMethodID(cls, "emptySet", "()Ljava/util/Set;");
        mids$[mid_emptySortedMap_6f76a11938f36d19] = env->getStaticMethodID(cls, "emptySortedMap", "()Ljava/util/SortedMap;");
        mids$[mid_emptySortedSet_bb1217b78e9e3e5c] = env->getStaticMethodID(cls, "emptySortedSet", "()Ljava/util/SortedSet;");
        mids$[mid_enumeration_4f73bc20ec05226d] = env->getStaticMethodID(cls, "enumeration", "(Ljava/util/Collection;)Ljava/util/Enumeration;");
        mids$[mid_fill_ce22b87b2936d259] = env->getStaticMethodID(cls, "fill", "(Ljava/util/List;Ljava/lang/Object;)V");
        mids$[mid_frequency_35ac1472e94be03d] = env->getStaticMethodID(cls, "frequency", "(Ljava/util/Collection;Ljava/lang/Object;)I");
        mids$[mid_indexOfSubList_8d58b8abacc3b86f] = env->getStaticMethodID(cls, "indexOfSubList", "(Ljava/util/List;Ljava/util/List;)I");
        mids$[mid_lastIndexOfSubList_8d58b8abacc3b86f] = env->getStaticMethodID(cls, "lastIndexOfSubList", "(Ljava/util/List;Ljava/util/List;)I");
        mids$[mid_list_736de96876b2a289] = env->getStaticMethodID(cls, "list", "(Ljava/util/Enumeration;)Ljava/util/ArrayList;");
        mids$[mid_max_f186668b4e43c778] = env->getStaticMethodID(cls, "max", "(Ljava/util/Collection;)Ljava/lang/Object;");
        mids$[mid_max_e812842d5eefd381] = env->getStaticMethodID(cls, "max", "(Ljava/util/Collection;Ljava/util/Comparator;)Ljava/lang/Object;");
        mids$[mid_min_f186668b4e43c778] = env->getStaticMethodID(cls, "min", "(Ljava/util/Collection;)Ljava/lang/Object;");
        mids$[mid_min_e812842d5eefd381] = env->getStaticMethodID(cls, "min", "(Ljava/util/Collection;Ljava/util/Comparator;)Ljava/lang/Object;");
        mids$[mid_nCopies_de0bd0ab49368464] = env->getStaticMethodID(cls, "nCopies", "(ILjava/lang/Object;)Ljava/util/List;");
        mids$[mid_newSetFromMap_48d1d2a8bdb96468] = env->getStaticMethodID(cls, "newSetFromMap", "(Ljava/util/Map;)Ljava/util/Set;");
        mids$[mid_replaceAll_900e5df6bfdb75ed] = env->getStaticMethodID(cls, "replaceAll", "(Ljava/util/List;Ljava/lang/Object;Ljava/lang/Object;)Z");
        mids$[mid_reverse_d03990be0130160d] = env->getStaticMethodID(cls, "reverse", "(Ljava/util/List;)V");
        mids$[mid_reverseOrder_beb0414e0ec1de00] = env->getStaticMethodID(cls, "reverseOrder", "()Ljava/util/Comparator;");
        mids$[mid_reverseOrder_5cea92c6ee384471] = env->getStaticMethodID(cls, "reverseOrder", "(Ljava/util/Comparator;)Ljava/util/Comparator;");
        mids$[mid_rotate_cb20ac649a48d6c8] = env->getStaticMethodID(cls, "rotate", "(Ljava/util/List;I)V");
        mids$[mid_shuffle_d03990be0130160d] = env->getStaticMethodID(cls, "shuffle", "(Ljava/util/List;)V");
        mids$[mid_shuffle_64fb82685bb435be] = env->getStaticMethodID(cls, "shuffle", "(Ljava/util/List;Ljava/util/Random;)V");
        mids$[mid_singleton_0c5a198306f28758] = env->getStaticMethodID(cls, "singleton", "(Ljava/lang/Object;)Ljava/util/Set;");
        mids$[mid_singletonList_879558f08e80c948] = env->getStaticMethodID(cls, "singletonList", "(Ljava/lang/Object;)Ljava/util/List;");
        mids$[mid_singletonMap_7302505887fe5ce8] = env->getStaticMethodID(cls, "singletonMap", "(Ljava/lang/Object;Ljava/lang/Object;)Ljava/util/Map;");
        mids$[mid_sort_d03990be0130160d] = env->getStaticMethodID(cls, "sort", "(Ljava/util/List;)V");
        mids$[mid_sort_268544ec58d67b6d] = env->getStaticMethodID(cls, "sort", "(Ljava/util/List;Ljava/util/Comparator;)V");
        mids$[mid_swap_f66f598992b61427] = env->getStaticMethodID(cls, "swap", "(Ljava/util/List;II)V");
        mids$[mid_synchronizedCollection_5a3c20858bae1d1c] = env->getStaticMethodID(cls, "synchronizedCollection", "(Ljava/util/Collection;)Ljava/util/Collection;");
        mids$[mid_synchronizedList_e420eeaadf0bcd20] = env->getStaticMethodID(cls, "synchronizedList", "(Ljava/util/List;)Ljava/util/List;");
        mids$[mid_synchronizedMap_b4d2b6b21eea71e8] = env->getStaticMethodID(cls, "synchronizedMap", "(Ljava/util/Map;)Ljava/util/Map;");
        mids$[mid_synchronizedNavigableMap_10fd75936e2c13e5] = env->getStaticMethodID(cls, "synchronizedNavigableMap", "(Ljava/util/NavigableMap;)Ljava/util/NavigableMap;");
        mids$[mid_synchronizedNavigableSet_2a8f8e58266516ed] = env->getStaticMethodID(cls, "synchronizedNavigableSet", "(Ljava/util/NavigableSet;)Ljava/util/NavigableSet;");
        mids$[mid_synchronizedSet_3abff4437b3c01c0] = env->getStaticMethodID(cls, "synchronizedSet", "(Ljava/util/Set;)Ljava/util/Set;");
        mids$[mid_synchronizedSortedMap_34b271f60d961331] = env->getStaticMethodID(cls, "synchronizedSortedMap", "(Ljava/util/SortedMap;)Ljava/util/SortedMap;");
        mids$[mid_synchronizedSortedSet_5ab2607b2067b822] = env->getStaticMethodID(cls, "synchronizedSortedSet", "(Ljava/util/SortedSet;)Ljava/util/SortedSet;");
        mids$[mid_unmodifiableCollection_5a3c20858bae1d1c] = env->getStaticMethodID(cls, "unmodifiableCollection", "(Ljava/util/Collection;)Ljava/util/Collection;");
        mids$[mid_unmodifiableList_e420eeaadf0bcd20] = env->getStaticMethodID(cls, "unmodifiableList", "(Ljava/util/List;)Ljava/util/List;");
        mids$[mid_unmodifiableMap_b4d2b6b21eea71e8] = env->getStaticMethodID(cls, "unmodifiableMap", "(Ljava/util/Map;)Ljava/util/Map;");
        mids$[mid_unmodifiableNavigableMap_10fd75936e2c13e5] = env->getStaticMethodID(cls, "unmodifiableNavigableMap", "(Ljava/util/NavigableMap;)Ljava/util/NavigableMap;");
        mids$[mid_unmodifiableNavigableSet_2a8f8e58266516ed] = env->getStaticMethodID(cls, "unmodifiableNavigableSet", "(Ljava/util/NavigableSet;)Ljava/util/NavigableSet;");
        mids$[mid_unmodifiableSet_3abff4437b3c01c0] = env->getStaticMethodID(cls, "unmodifiableSet", "(Ljava/util/Set;)Ljava/util/Set;");
        mids$[mid_unmodifiableSortedMap_34b271f60d961331] = env->getStaticMethodID(cls, "unmodifiableSortedMap", "(Ljava/util/SortedMap;)Ljava/util/SortedMap;");
        mids$[mid_unmodifiableSortedSet_5ab2607b2067b822] = env->getStaticMethodID(cls, "unmodifiableSortedSet", "(Ljava/util/SortedSet;)Ljava/util/SortedSet;");

        class$ = new ::java::lang::Class(cls);
        cls = (jclass) class$->this$;

        EMPTY_LIST = new ::java::util::List(env->getStaticObjectField(cls, "EMPTY_LIST", "Ljava/util/List;"));
        EMPTY_MAP = new ::java::util::Map(env->getStaticObjectField(cls, "EMPTY_MAP", "Ljava/util/Map;"));
        EMPTY_SET = new ::java::util::Set(env->getStaticObjectField(cls, "EMPTY_SET", "Ljava/util/Set;"));
        live$ = true;
      }
      return (jclass) class$->this$;
    }

    jboolean Collections::addAll(const ::java::util::Collection & a0, const JArray< ::java::lang::Object > & a1)
    {
      jclass cls = env->getClass(initializeClass);
      return env->callStaticBooleanMethod(cls, mids$[mid_addAll_b633b5831963bba7], a0.this$, a1.this$);
    }

    ::java::util::Queue Collections::asLifoQueue(const ::java::util::Deque & a0)
    {
      jclass cls = env->getClass(initializeClass);
      return ::java::util::Queue(env->callStaticObjectMethod(cls, mids$[mid_asLifoQueue_92007579fe249b3b], a0.this$));
    }

    jint Collections::binarySearch(const ::java::util::List & a0, const ::java::lang::Object & a1)
    {
      jclass cls = env->getClass(initializeClass);
      return env->callStaticIntMethod(cls, mids$[mid_binarySearch_f67918463bbb76f0], a0.this$, a1.this$);
    }

    jint Collections::binarySearch(const ::java::util::List & a0, const ::java::lang::Object & a1, const ::java::util::Comparator & a2)
    {
      jclass cls = env->getClass(initializeClass);
      return env->callStaticIntMethod(cls, mids$[mid_binarySearch_f65eba44a0ba07dc], a0.this$, a1.this$, a2.this$);
    }

    ::java::util::Collection Collections::checkedCollection(const ::java::util::Collection & a0, const ::java::lang::Class & a1)
    {
      jclass cls = env->getClass(initializeClass);
      return ::java::util::Collection(env->callStaticObjectMethod(cls, mids$[mid_checkedCollection_5daa7c9c1e614e1a], a0.this$, a1.this$));
    }

    ::java::util::List Collections::checkedList(const ::java::util::List & a0, const ::java::lang::Class & a1)
    {
      jclass cls = env->getClass(initializeClass);
      return ::java::util::List(env->callStaticObjectMethod(cls, mids$[mid_checkedList_c2ef094a17878f20], a0.this$, a1.this$));
    }

    ::java::util::Map Collections::checkedMap(const ::java::util::Map & a0, const ::java::lang::Class & a1, const ::java::lang::Class & a2)
    {
      jclass cls = env->getClass(initializeClass);
      return ::java::util::Map(env->callStaticObjectMethod(cls, mids$[mid_checkedMap_a2c847d1e81cf7b3], a0.this$, a1.this$, a2.this$));
    }

    ::java::util::NavigableMap Collections::checkedNavigableMap(const ::java::util::NavigableMap & a0, const ::java::lang::Class & a1, const ::java::lang::Class & a2)
    {
      jclass cls = env->getClass(initializeClass);
      return ::java::util::NavigableMap(env->callStaticObjectMethod(cls, mids$[mid_checkedNavigableMap_6a7149dc196878d1], a0.this$, a1.this$, a2.this$));
    }

    ::java::util::NavigableSet Collections::checkedNavigableSet(const ::java::util::NavigableSet & a0, const ::java::lang::Class & a1)
    {
      jclass cls = env->getClass(initializeClass);
      return ::java::util::NavigableSet(env->callStaticObjectMethod(cls, mids$[mid_checkedNavigableSet_f516efffaf805047], a0.this$, a1.this$));
    }

    ::java::util::Queue Collections::checkedQueue(const ::java::util::Queue & a0, const ::java::lang::Class & a1)
    {
      jclass cls = env->getClass(initializeClass);
      return ::java::util::Queue(env->callStaticObjectMethod(cls, mids$[mid_checkedQueue_41aec1c14e8f7f56], a0.this$, a1.this$));
    }

    ::java::util::Set Collections::checkedSet(const ::java::util::Set & a0, const ::java::lang::Class & a1)
    {
      jclass cls = env->getClass(initializeClass);
      return ::java::util::Set(env->callStaticObjectMethod(cls, mids$[mid_checkedSet_e6675b276e8a7281], a0.this$, a1.this$));
    }

    ::java::util::SortedMap Collections::checkedSortedMap(const ::java::util::SortedMap & a0, const ::java::lang::Class & a1, const ::java::lang::Class & a2)
    {
      jclass cls = env->getClass(initializeClass);
      return ::java::util::SortedMap(env->callStaticObjectMethod(cls, mids$[mid_checkedSortedMap_94d32f2093ffa555], a0.this$, a1.this$, a2.this$));
    }

    ::java::util::SortedSet Collections::checkedSortedSet(const ::java::util::SortedSet & a0, const ::java::lang::Class & a1)
    {
      jclass cls = env->getClass(initializeClass);
      return ::java::util::SortedSet(env->callStaticObjectMethod(cls, mids$[mid_checkedSortedSet_ee02c92e5fb9000f], a0.this$, a1.this$));
    }

    void Collections::copy(const ::java::util::List & a0, const ::java::util::List & a1)
    {
      jclass cls = env->getClass(initializeClass);
      env->callStaticVoidMethod(cls, mids$[mid_copy_c734de9369b606d5], a0.this$, a1.this$);
    }

    jboolean Collections::disjoint(const ::java::util::Collection & a0, const ::java::util::Collection & a1)
    {
      jclass cls = env->getClass(initializeClass);
      return env->callStaticBooleanMethod(cls, mids$[mid_disjoint_db84e57f676489cd], a0.this$, a1.this$);
    }

    ::java::util::Enumeration Collections::emptyEnumeration()
    {
      jclass cls = env->getClass(initializeClass);
      return ::java::util::Enumeration(env->callStaticObjectMethod(cls, mids$[mid_emptyEnumeration_f270cc1d2d4072a8]));
    }

    ::java::util::Iterator Collections::emptyIterator()
    {
      jclass cls = env->getClass(initializeClass);
      return ::java::util::Iterator(env->callStaticObjectMethod(cls, mids$[mid_emptyIterator_233a192dadb0917d]));
    }

    ::java::util::List Collections::emptyList()
    {
      jclass cls = env->getClass(initializeClass);
      return ::java::util::List(env->callStaticObjectMethod(cls, mids$[mid_emptyList_49ec78390f08338a]));
    }

    ::java::util::ListIterator Collections::emptyListIterator()
    {
      jclass cls = env->getClass(initializeClass);
      return ::java::util::ListIterator(env->callStaticObjectMethod(cls, mids$[mid_emptyListIterator_78bda7a3d01214c3]));
    }

    ::java::util::Map Collections::emptyMap()
    {
      jclass cls = env->getClass(initializeClass);
      return ::java::util::Map(env->callStaticObjectMethod(cls, mids$[mid_emptyMap_1c3426541413a55d]));
    }

    ::java::util::NavigableMap Collections::emptyNavigableMap()
    {
      jclass cls = env->getClass(initializeClass);
      return ::java::util::NavigableMap(env->callStaticObjectMethod(cls, mids$[mid_emptyNavigableMap_4e7fc959a77f584b]));
    }

    ::java::util::NavigableSet Collections::emptyNavigableSet()
    {
      jclass cls = env->getClass(initializeClass);
      return ::java::util::NavigableSet(env->callStaticObjectMethod(cls, mids$[mid_emptyNavigableSet_69a674c200eed505]));
    }

    ::java::util::Set Collections::emptySet()
    {
      jclass cls = env->getClass(initializeClass);
      return ::java::util::Set(env->callStaticObjectMethod(cls, mids$[mid_emptySet_7dcf4034c6d1a92a]));
    }

    ::java::util::SortedMap Collections::emptySortedMap()
    {
      jclass cls = env->getClass(initializeClass);
      return ::java::util::SortedMap(env->callStaticObjectMethod(cls, mids$[mid_emptySortedMap_6f76a11938f36d19]));
    }

    ::java::util::SortedSet Collections::emptySortedSet()
    {
      jclass cls = env->getClass(initializeClass);
      return ::java::util::SortedSet(env->callStaticObjectMethod(cls, mids$[mid_emptySortedSet_bb1217b78e9e3e5c]));
    }

    ::java::util::Enumeration Collections::enumeration(const ::java::util::Collection & a0)
    {
      jclass cls = env->getClass(initializeClass);
      return ::java::util::Enumeration(env->callStaticObjectMethod(cls, mids$[mid_enumeration_4f73bc20ec05226d], a0.this$));
    }

    void Collections::fill(const ::java::util::List & a0, const ::java::lang::Object & a1)
    {
      jclass cls = env->getClass(initializeClass);
      env->callStaticVoidMethod(cls, mids$[mid_fill_ce22b87b2936d259], a0.this$, a1.this$);
    }

    jint Collections::frequency(const ::java::util::Collection & a0, const ::java::lang::Object & a1)
    {
      jclass cls = env->getClass(initializeClass);
      return env->callStaticIntMethod(cls, mids$[mid_frequency_35ac1472e94be03d], a0.this$, a1.this$);
    }

    jint Collections::indexOfSubList(const ::java::util::List & a0, const ::java::util::List & a1)
    {
      jclass cls = env->getClass(initializeClass);
      return env->callStaticIntMethod(cls, mids$[mid_indexOfSubList_8d58b8abacc3b86f], a0.this$, a1.this$);
    }

    jint Collections::lastIndexOfSubList(const ::java::util::List & a0, const ::java::util::List & a1)
    {
      jclass cls = env->getClass(initializeClass);
      return env->callStaticIntMethod(cls, mids$[mid_lastIndexOfSubList_8d58b8abacc3b86f], a0.this$, a1.this$);
    }

    ::java::util::ArrayList Collections::list(const ::java::util::Enumeration & a0)
    {
      jclass cls = env->getClass(initializeClass);
      return ::java::util::ArrayList(env->callStaticObjectMethod(cls, mids$[mid_list_736de96876b2a289], a0.this$));
    }

    ::java::lang::Object Collections::max$(const ::java::util::Collection & a0)
    {
      jclass cls = env->getClass(initializeClass);
      return ::java::lang::Object(env->callStaticObjectMethod(cls, mids$[mid_max_f186668b4e43c778], a0.this$));
    }

    ::java::lang::Object Collections::max$(const ::java::util::Collection & a0, const ::java::util::Comparator & a1)
    {
      jclass cls = env->getClass(initializeClass);
      return ::java::lang::Object(env->callStaticObjectMethod(cls, mids$[mid_max_e812842d5eefd381], a0.this$, a1.this$));
    }

    ::java::lang::Object Collections::min$(const ::java::util::Collection & a0)
    {
      jclass cls = env->getClass(initializeClass);
      return ::java::lang::Object(env->callStaticObjectMethod(cls, mids$[mid_min_f186668b4e43c778], a0.this$));
    }

    ::java::lang::Object Collections::min$(const ::java::util::Collection & a0, const ::java::util::Comparator & a1)
    {
      jclass cls = env->getClass(initializeClass);
      return ::java::lang::Object(env->callStaticObjectMethod(cls, mids$[mid_min_e812842d5eefd381], a0.this$, a1.this$));
    }

    ::java::util::List Collections::nCopies(jint a0, const ::java::lang::Object & a1)
    {
      jclass cls = env->getClass(initializeClass);
      return ::java::util::List(env->callStaticObjectMethod(cls, mids$[mid_nCopies_de0bd0ab49368464], a0, a1.this$));
    }

    ::java::util::Set Collections::newSetFromMap(const ::java::util::Map & a0)
    {
      jclass cls = env->getClass(initializeClass);
      return ::java::util::Set(env->callStaticObjectMethod(cls, mids$[mid_newSetFromMap_48d1d2a8bdb96468], a0.this$));
    }

    jboolean Collections::replaceAll(const ::java::util::List & a0, const ::java::lang::Object & a1, const ::java::lang::Object & a2)
    {
      jclass cls = env->getClass(initializeClass);
      return env->callStaticBooleanMethod(cls, mids$[mid_replaceAll_900e5df6bfdb75ed], a0.this$, a1.this$, a2.this$);
    }

    void Collections::reverse(const ::java::util::List & a0)
    {
      jclass cls = env->getClass(initializeClass);
      env->callStaticVoidMethod(cls, mids$[mid_reverse_d03990be0130160d], a0.this$);
    }

    ::java::util::Comparator Collections::reverseOrder()
    {
      jclass cls = env->getClass(initializeClass);
      return ::java::util::Comparator(env->callStaticObjectMethod(cls, mids$[mid_reverseOrder_beb0414e0ec1de00]));
    }

    ::java::util::Comparator Collections::reverseOrder(const ::java::util::Comparator & a0)
    {
      jclass cls = env->getClass(initializeClass);
      return ::java::util::Comparator(env->callStaticObjectMethod(cls, mids$[mid_reverseOrder_5cea92c6ee384471], a0.this$));
    }

    void Collections::rotate(const ::java::util::List & a0, jint a1)
    {
      jclass cls = env->getClass(initializeClass);
      env->callStaticVoidMethod(cls, mids$[mid_rotate_cb20ac649a48d6c8], a0.this$, a1);
    }

    void Collections::shuffle(const ::java::util::List & a0)
    {
      jclass cls = env->getClass(initializeClass);
      env->callStaticVoidMethod(cls, mids$[mid_shuffle_d03990be0130160d], a0.this$);
    }

    void Collections::shuffle(const ::java::util::List & a0, const ::java::util::Random & a1)
    {
      jclass cls = env->getClass(initializeClass);
      env->callStaticVoidMethod(cls, mids$[mid_shuffle_64fb82685bb435be], a0.this$, a1.this$);
    }

    ::java::util::Set Collections::singleton(const ::java::lang::Object & a0)
    {
      jclass cls = env->getClass(initializeClass);
      return ::java::util::Set(env->callStaticObjectMethod(cls, mids$[mid_singleton_0c5a198306f28758], a0.this$));
    }

    ::java::util::List Collections::singletonList(const ::java::lang::Object & a0)
    {
      jclass cls = env->getClass(initializeClass);
      return ::java::util::List(env->callStaticObjectMethod(cls, mids$[mid_singletonList_879558f08e80c948], a0.this$));
    }

    ::java::util::Map Collections::singletonMap(const ::java::lang::Object & a0, const ::java::lang::Object & a1)
    {
      jclass cls = env->getClass(initializeClass);
      return ::java::util::Map(env->callStaticObjectMethod(cls, mids$[mid_singletonMap_7302505887fe5ce8], a0.this$, a1.this$));
    }

    void Collections::sort(const ::java::util::List & a0)
    {
      jclass cls = env->getClass(initializeClass);
      env->callStaticVoidMethod(cls, mids$[mid_sort_d03990be0130160d], a0.this$);
    }

    void Collections::sort(const ::java::util::List & a0, const ::java::util::Comparator & a1)
    {
      jclass cls = env->getClass(initializeClass);
      env->callStaticVoidMethod(cls, mids$[mid_sort_268544ec58d67b6d], a0.this$, a1.this$);
    }

    void Collections::swap(const ::java::util::List & a0, jint a1, jint a2)
    {
      jclass cls = env->getClass(initializeClass);
      env->callStaticVoidMethod(cls, mids$[mid_swap_f66f598992b61427], a0.this$, a1, a2);
    }

    ::java::util::Collection Collections::synchronizedCollection(const ::java::util::Collection & a0)
    {
      jclass cls = env->getClass(initializeClass);
      return ::java::util::Collection(env->callStaticObjectMethod(cls, mids$[mid_synchronizedCollection_5a3c20858bae1d1c], a0.this$));
    }

    ::java::util::List Collections::synchronizedList(const ::java::util::List & a0)
    {
      jclass cls = env->getClass(initializeClass);
      return ::java::util::List(env->callStaticObjectMethod(cls, mids$[mid_synchronizedList_e420eeaadf0bcd20], a0.this$));
    }

    ::java::util::Map Collections::synchronizedMap(const ::java::util::Map & a0)
    {
      jclass cls = env->getClass(initializeClass);
      return ::java::util::Map(env->callStaticObjectMethod(cls, mids$[mid_synchronizedMap_b4d2b6b21eea71e8], a0.this$));
    }

    ::java::util::NavigableMap Collections::synchronizedNavigableMap(const ::java::util::NavigableMap & a0)
    {
      jclass cls = env->getClass(initializeClass);
      return ::java::util::NavigableMap(env->callStaticObjectMethod(cls, mids$[mid_synchronizedNavigableMap_10fd75936e2c13e5], a0.this$));
    }

    ::java::util::NavigableSet Collections::synchronizedNavigableSet(const ::java::util::NavigableSet & a0)
    {
      jclass cls = env->getClass(initializeClass);
      return ::java::util::NavigableSet(env->callStaticObjectMethod(cls, mids$[mid_synchronizedNavigableSet_2a8f8e58266516ed], a0.this$));
    }

    ::java::util::Set Collections::synchronizedSet(const ::java::util::Set & a0)
    {
      jclass cls = env->getClass(initializeClass);
      return ::java::util::Set(env->callStaticObjectMethod(cls, mids$[mid_synchronizedSet_3abff4437b3c01c0], a0.this$));
    }

    ::java::util::SortedMap Collections::synchronizedSortedMap(const ::java::util::SortedMap & a0)
    {
      jclass cls = env->getClass(initializeClass);
      return ::java::util::SortedMap(env->callStaticObjectMethod(cls, mids$[mid_synchronizedSortedMap_34b271f60d961331], a0.this$));
    }

    ::java::util::SortedSet Collections::synchronizedSortedSet(const ::java::util::SortedSet & a0)
    {
      jclass cls = env->getClass(initializeClass);
      return ::java::util::SortedSet(env->callStaticObjectMethod(cls, mids$[mid_synchronizedSortedSet_5ab2607b2067b822], a0.this$));
    }

    ::java::util::Collection Collections::unmodifiableCollection(const ::java::util::Collection & a0)
    {
      jclass cls = env->getClass(initializeClass);
      return ::java::util::Collection(env->callStaticObjectMethod(cls, mids$[mid_unmodifiableCollection_5a3c20858bae1d1c], a0.this$));
    }

    ::java::util::List Collections::unmodifiableList(const ::java::util::List & a0)
    {
      jclass cls = env->getClass(initializeClass);
      return ::java::util::List(env->callStaticObjectMethod(cls, mids$[mid_unmodifiableList_e420eeaadf0bcd20], a0.this$));
    }

    ::java::util::Map Collections::unmodifiableMap(const ::java::util::Map & a0)
    {
      jclass cls = env->getClass(initializeClass);
      return ::java::util::Map(env->callStaticObjectMethod(cls, mids$[mid_unmodifiableMap_b4d2b6b21eea71e8], a0.this$));
    }

    ::java::util::NavigableMap Collections::unmodifiableNavigableMap(const ::java::util::NavigableMap & a0)
    {
      jclass cls = env->getClass(initializeClass);
      return ::java::util::NavigableMap(env->callStaticObjectMethod(cls, mids$[mid_unmodifiableNavigableMap_10fd75936e2c13e5], a0.this$));
    }

    ::java::util::NavigableSet Collections::unmodifiableNavigableSet(const ::java::util::NavigableSet & a0)
    {
      jclass cls = env->getClass(initializeClass);
      return ::java::util::NavigableSet(env->callStaticObjectMethod(cls, mids$[mid_unmodifiableNavigableSet_2a8f8e58266516ed], a0.this$));
    }

    ::java::util::Set Collections::unmodifiableSet(const ::java::util::Set & a0)
    {
      jclass cls = env->getClass(initializeClass);
      return ::java::util::Set(env->callStaticObjectMethod(cls, mids$[mid_unmodifiableSet_3abff4437b3c01c0], a0.this$));
    }

    ::java::util::SortedMap Collections::unmodifiableSortedMap(const ::java::util::SortedMap & a0)
    {
      jclass cls = env->getClass(initializeClass);
      return ::java::util::SortedMap(env->callStaticObjectMethod(cls, mids$[mid_unmodifiableSortedMap_34b271f60d961331], a0.this$));
    }

    ::java::util::SortedSet Collections::unmodifiableSortedSet(const ::java::util::SortedSet & a0)
    {
      jclass cls = env->getClass(initializeClass);
      return ::java::util::SortedSet(env->callStaticObjectMethod(cls, mids$[mid_unmodifiableSortedSet_5ab2607b2067b822], a0.this$));
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace java {
  namespace util {
    static PyObject *t_Collections_cast_(PyTypeObject *type, PyObject *arg);
    static PyObject *t_Collections_instance_(PyTypeObject *type, PyObject *arg);
    static PyObject *t_Collections_addAll(PyTypeObject *type, PyObject *args);
    static PyObject *t_Collections_asLifoQueue(PyTypeObject *type, PyObject *arg);
    static PyObject *t_Collections_binarySearch(PyTypeObject *type, PyObject *args);
    static PyObject *t_Collections_checkedCollection(PyTypeObject *type, PyObject *args);
    static PyObject *t_Collections_checkedList(PyTypeObject *type, PyObject *args);
    static PyObject *t_Collections_checkedMap(PyTypeObject *type, PyObject *args);
    static PyObject *t_Collections_checkedNavigableMap(PyTypeObject *type, PyObject *args);
    static PyObject *t_Collections_checkedNavigableSet(PyTypeObject *type, PyObject *args);
    static PyObject *t_Collections_checkedQueue(PyTypeObject *type, PyObject *args);
    static PyObject *t_Collections_checkedSet(PyTypeObject *type, PyObject *args);
    static PyObject *t_Collections_checkedSortedMap(PyTypeObject *type, PyObject *args);
    static PyObject *t_Collections_checkedSortedSet(PyTypeObject *type, PyObject *args);
    static PyObject *t_Collections_copy(PyTypeObject *type, PyObject *args);
    static PyObject *t_Collections_disjoint(PyTypeObject *type, PyObject *args);
    static PyObject *t_Collections_emptyEnumeration(PyTypeObject *type);
    static PyObject *t_Collections_emptyIterator(PyTypeObject *type);
    static PyObject *t_Collections_emptyList(PyTypeObject *type);
    static PyObject *t_Collections_emptyListIterator(PyTypeObject *type);
    static PyObject *t_Collections_emptyMap(PyTypeObject *type);
    static PyObject *t_Collections_emptyNavigableMap(PyTypeObject *type);
    static PyObject *t_Collections_emptyNavigableSet(PyTypeObject *type);
    static PyObject *t_Collections_emptySet(PyTypeObject *type);
    static PyObject *t_Collections_emptySortedMap(PyTypeObject *type);
    static PyObject *t_Collections_emptySortedSet(PyTypeObject *type);
    static PyObject *t_Collections_enumeration(PyTypeObject *type, PyObject *arg);
    static PyObject *t_Collections_fill(PyTypeObject *type, PyObject *args);
    static PyObject *t_Collections_frequency(PyTypeObject *type, PyObject *args);
    static PyObject *t_Collections_indexOfSubList(PyTypeObject *type, PyObject *args);
    static PyObject *t_Collections_lastIndexOfSubList(PyTypeObject *type, PyObject *args);
    static PyObject *t_Collections_list(PyTypeObject *type, PyObject *arg);
    static PyObject *t_Collections_max(PyTypeObject *type, PyObject *args);
    static PyObject *t_Collections_min(PyTypeObject *type, PyObject *args);
    static PyObject *t_Collections_nCopies(PyTypeObject *type, PyObject *args);
    static PyObject *t_Collections_newSetFromMap(PyTypeObject *type, PyObject *arg);
    static PyObject *t_Collections_replaceAll(PyTypeObject *type, PyObject *args);
    static PyObject *t_Collections_reverse(PyTypeObject *type, PyObject *arg);
    static PyObject *t_Collections_reverseOrder(PyTypeObject *type, PyObject *args);
    static PyObject *t_Collections_rotate(PyTypeObject *type, PyObject *args);
    static PyObject *t_Collections_shuffle(PyTypeObject *type, PyObject *args);
    static PyObject *t_Collections_singleton(PyTypeObject *type, PyObject *arg);
    static PyObject *t_Collections_singletonList(PyTypeObject *type, PyObject *arg);
    static PyObject *t_Collections_singletonMap(PyTypeObject *type, PyObject *args);
    static PyObject *t_Collections_sort(PyTypeObject *type, PyObject *args);
    static PyObject *t_Collections_swap(PyTypeObject *type, PyObject *args);
    static PyObject *t_Collections_synchronizedCollection(PyTypeObject *type, PyObject *arg);
    static PyObject *t_Collections_synchronizedList(PyTypeObject *type, PyObject *arg);
    static PyObject *t_Collections_synchronizedMap(PyTypeObject *type, PyObject *arg);
    static PyObject *t_Collections_synchronizedNavigableMap(PyTypeObject *type, PyObject *arg);
    static PyObject *t_Collections_synchronizedNavigableSet(PyTypeObject *type, PyObject *arg);
    static PyObject *t_Collections_synchronizedSet(PyTypeObject *type, PyObject *arg);
    static PyObject *t_Collections_synchronizedSortedMap(PyTypeObject *type, PyObject *arg);
    static PyObject *t_Collections_synchronizedSortedSet(PyTypeObject *type, PyObject *arg);
    static PyObject *t_Collections_unmodifiableCollection(PyTypeObject *type, PyObject *arg);
    static PyObject *t_Collections_unmodifiableList(PyTypeObject *type, PyObject *arg);
    static PyObject *t_Collections_unmodifiableMap(PyTypeObject *type, PyObject *arg);
    static PyObject *t_Collections_unmodifiableNavigableMap(PyTypeObject *type, PyObject *arg);
    static PyObject *t_Collections_unmodifiableNavigableSet(PyTypeObject *type, PyObject *arg);
    static PyObject *t_Collections_unmodifiableSet(PyTypeObject *type, PyObject *arg);
    static PyObject *t_Collections_unmodifiableSortedMap(PyTypeObject *type, PyObject *arg);
    static PyObject *t_Collections_unmodifiableSortedSet(PyTypeObject *type, PyObject *arg);

    static PyMethodDef t_Collections__methods_[] = {
      DECLARE_METHOD(t_Collections, cast_, METH_O | METH_CLASS),
      DECLARE_METHOD(t_Collections, instance_, METH_O | METH_CLASS),
      DECLARE_METHOD(t_Collections, addAll, METH_VARARGS | METH_CLASS),
      DECLARE_METHOD(t_Collections, asLifoQueue, METH_O | METH_CLASS),
      DECLARE_METHOD(t_Collections, binarySearch, METH_VARARGS | METH_CLASS),
      DECLARE_METHOD(t_Collections, checkedCollection, METH_VARARGS | METH_CLASS),
      DECLARE_METHOD(t_Collections, checkedList, METH_VARARGS | METH_CLASS),
      DECLARE_METHOD(t_Collections, checkedMap, METH_VARARGS | METH_CLASS),
      DECLARE_METHOD(t_Collections, checkedNavigableMap, METH_VARARGS | METH_CLASS),
      DECLARE_METHOD(t_Collections, checkedNavigableSet, METH_VARARGS | METH_CLASS),
      DECLARE_METHOD(t_Collections, checkedQueue, METH_VARARGS | METH_CLASS),
      DECLARE_METHOD(t_Collections, checkedSet, METH_VARARGS | METH_CLASS),
      DECLARE_METHOD(t_Collections, checkedSortedMap, METH_VARARGS | METH_CLASS),
      DECLARE_METHOD(t_Collections, checkedSortedSet, METH_VARARGS | METH_CLASS),
      DECLARE_METHOD(t_Collections, copy, METH_VARARGS | METH_CLASS),
      DECLARE_METHOD(t_Collections, disjoint, METH_VARARGS | METH_CLASS),
      DECLARE_METHOD(t_Collections, emptyEnumeration, METH_NOARGS | METH_CLASS),
      DECLARE_METHOD(t_Collections, emptyIterator, METH_NOARGS | METH_CLASS),
      DECLARE_METHOD(t_Collections, emptyList, METH_NOARGS | METH_CLASS),
      DECLARE_METHOD(t_Collections, emptyListIterator, METH_NOARGS | METH_CLASS),
      DECLARE_METHOD(t_Collections, emptyMap, METH_NOARGS | METH_CLASS),
      DECLARE_METHOD(t_Collections, emptyNavigableMap, METH_NOARGS | METH_CLASS),
      DECLARE_METHOD(t_Collections, emptyNavigableSet, METH_NOARGS | METH_CLASS),
      DECLARE_METHOD(t_Collections, emptySet, METH_NOARGS | METH_CLASS),
      DECLARE_METHOD(t_Collections, emptySortedMap, METH_NOARGS | METH_CLASS),
      DECLARE_METHOD(t_Collections, emptySortedSet, METH_NOARGS | METH_CLASS),
      DECLARE_METHOD(t_Collections, enumeration, METH_O | METH_CLASS),
      DECLARE_METHOD(t_Collections, fill, METH_VARARGS | METH_CLASS),
      DECLARE_METHOD(t_Collections, frequency, METH_VARARGS | METH_CLASS),
      DECLARE_METHOD(t_Collections, indexOfSubList, METH_VARARGS | METH_CLASS),
      DECLARE_METHOD(t_Collections, lastIndexOfSubList, METH_VARARGS | METH_CLASS),
      DECLARE_METHOD(t_Collections, list, METH_O | METH_CLASS),
      DECLARE_METHOD(t_Collections, max, METH_VARARGS | METH_CLASS),
      DECLARE_METHOD(t_Collections, min, METH_VARARGS | METH_CLASS),
      DECLARE_METHOD(t_Collections, nCopies, METH_VARARGS | METH_CLASS),
      DECLARE_METHOD(t_Collections, newSetFromMap, METH_O | METH_CLASS),
      DECLARE_METHOD(t_Collections, replaceAll, METH_VARARGS | METH_CLASS),
      DECLARE_METHOD(t_Collections, reverse, METH_O | METH_CLASS),
      DECLARE_METHOD(t_Collections, reverseOrder, METH_VARARGS | METH_CLASS),
      DECLARE_METHOD(t_Collections, rotate, METH_VARARGS | METH_CLASS),
      DECLARE_METHOD(t_Collections, shuffle, METH_VARARGS | METH_CLASS),
      DECLARE_METHOD(t_Collections, singleton, METH_O | METH_CLASS),
      DECLARE_METHOD(t_Collections, singletonList, METH_O | METH_CLASS),
      DECLARE_METHOD(t_Collections, singletonMap, METH_VARARGS | METH_CLASS),
      DECLARE_METHOD(t_Collections, sort, METH_VARARGS | METH_CLASS),
      DECLARE_METHOD(t_Collections, swap, METH_VARARGS | METH_CLASS),
      DECLARE_METHOD(t_Collections, synchronizedCollection, METH_O | METH_CLASS),
      DECLARE_METHOD(t_Collections, synchronizedList, METH_O | METH_CLASS),
      DECLARE_METHOD(t_Collections, synchronizedMap, METH_O | METH_CLASS),
      DECLARE_METHOD(t_Collections, synchronizedNavigableMap, METH_O | METH_CLASS),
      DECLARE_METHOD(t_Collections, synchronizedNavigableSet, METH_O | METH_CLASS),
      DECLARE_METHOD(t_Collections, synchronizedSet, METH_O | METH_CLASS),
      DECLARE_METHOD(t_Collections, synchronizedSortedMap, METH_O | METH_CLASS),
      DECLARE_METHOD(t_Collections, synchronizedSortedSet, METH_O | METH_CLASS),
      DECLARE_METHOD(t_Collections, unmodifiableCollection, METH_O | METH_CLASS),
      DECLARE_METHOD(t_Collections, unmodifiableList, METH_O | METH_CLASS),
      DECLARE_METHOD(t_Collections, unmodifiableMap, METH_O | METH_CLASS),
      DECLARE_METHOD(t_Collections, unmodifiableNavigableMap, METH_O | METH_CLASS),
      DECLARE_METHOD(t_Collections, unmodifiableNavigableSet, METH_O | METH_CLASS),
      DECLARE_METHOD(t_Collections, unmodifiableSet, METH_O | METH_CLASS),
      DECLARE_METHOD(t_Collections, unmodifiableSortedMap, METH_O | METH_CLASS),
      DECLARE_METHOD(t_Collections, unmodifiableSortedSet, METH_O | METH_CLASS),
      { NULL, NULL, 0, NULL }
    };

    static PyType_Slot PY_TYPE_SLOTS(Collections)[] = {
      { Py_tp_methods, t_Collections__methods_ },
      { Py_tp_init, (void *) abstract_init },
      { 0, NULL }
    };

    static PyType_Def *PY_TYPE_BASES(Collections)[] = {
      &PY_TYPE_DEF(::java::lang::Object),
      NULL
    };

    DEFINE_TYPE(Collections, t_Collections, Collections);

    void t_Collections::install(PyObject *module)
    {
      installType(&PY_TYPE(Collections), &PY_TYPE_DEF(Collections), module, "Collections", 0);
    }

    void t_Collections::initialize(PyObject *module)
    {
      PyObject_SetAttrString((PyObject *) PY_TYPE(Collections), "class_", make_descriptor(Collections::initializeClass, 1));
      PyObject_SetAttrString((PyObject *) PY_TYPE(Collections), "wrapfn_", make_descriptor(t_Collections::wrap_jobject));
      PyObject_SetAttrString((PyObject *) PY_TYPE(Collections), "boxfn_", make_descriptor(boxObject));
      env->getClass(Collections::initializeClass);
      PyObject_SetAttrString((PyObject *) PY_TYPE(Collections), "EMPTY_LIST", make_descriptor(::java::util::t_List::wrap_Object(*Collections::EMPTY_LIST)));
      PyObject_SetAttrString((PyObject *) PY_TYPE(Collections), "EMPTY_MAP", make_descriptor(::java::util::t_Map::wrap_Object(*Collections::EMPTY_MAP)));
      PyObject_SetAttrString((PyObject *) PY_TYPE(Collections), "EMPTY_SET", make_descriptor(::java::util::t_Set::wrap_Object(*Collections::EMPTY_SET)));
    }

    static PyObject *t_Collections_cast_(PyTypeObject *type, PyObject *arg)
    {
      if (!(arg = castCheck(arg, Collections::initializeClass, 1)))
        return NULL;
      return t_Collections::wrap_Object(Collections(((t_Collections *) arg)->object.this$));
    }
    static PyObject *t_Collections_instance_(PyTypeObject *type, PyObject *arg)
    {
      if (!castCheck(arg, Collections::initializeClass, 0))
        Py_RETURN_FALSE;
      Py_RETURN_TRUE;
    }

    static PyObject *t_Collections_addAll(PyTypeObject *type, PyObject *args)
    {
      ::java::util::Collection a0((jobject) NULL);
      PyTypeObject **p0;
      JArray< ::java::lang::Object > a1((jobject) NULL);
      jboolean result;

      if (!parseArgs(args, "K[o", ::java::util::Collection::initializeClass, &a0, &p0, ::java::util::t_Collection::parameters_, &a1))
      {
        OBJ_CALL(result = ::java::util::Collections::addAll(a0, a1));
        Py_RETURN_BOOL(result);
      }

      PyErr_SetArgsError(type, "addAll", args);
      return NULL;
    }

    static PyObject *t_Collections_asLifoQueue(PyTypeObject *type, PyObject *arg)
    {
      ::java::util::Deque a0((jobject) NULL);
      PyTypeObject **p0;
      ::java::util::Queue result((jobject) NULL);

      if (!parseArg(arg, "K", ::java::util::Deque::initializeClass, &a0, &p0, ::java::util::t_Deque::parameters_))
      {
        OBJ_CALL(result = ::java::util::Collections::asLifoQueue(a0));
        return ::java::util::t_Queue::wrap_Object(result);
      }

      PyErr_SetArgsError(type, "asLifoQueue", arg);
      return NULL;
    }

    static PyObject *t_Collections_binarySearch(PyTypeObject *type, PyObject *args)
    {
      switch (PyTuple_GET_SIZE(args)) {
       case 2:
        {
          ::java::util::List a0((jobject) NULL);
          PyTypeObject **p0;
          ::java::lang::Object a1((jobject) NULL);
          jint result;

          if (!parseArgs(args, "Ko", ::java::util::List::initializeClass, &a0, &p0, ::java::util::t_List::parameters_, &a1))
          {
            OBJ_CALL(result = ::java::util::Collections::binarySearch(a0, a1));
            return PyLong_FromLong((long) result);
          }
        }
        break;
       case 3:
        {
          ::java::util::List a0((jobject) NULL);
          PyTypeObject **p0;
          ::java::lang::Object a1((jobject) NULL);
          ::java::util::Comparator a2((jobject) NULL);
          PyTypeObject **p2;
          jint result;

          if (!parseArgs(args, "KoK", ::java::util::List::initializeClass, ::java::util::Comparator::initializeClass, &a0, &p0, ::java::util::t_List::parameters_, &a1, &a2, &p2, ::java::util::t_Comparator::parameters_))
          {
            OBJ_CALL(result = ::java::util::Collections::binarySearch(a0, a1, a2));
            return PyLong_FromLong((long) result);
          }
        }
      }

      PyErr_SetArgsError(type, "binarySearch", args);
      return NULL;
    }

    static PyObject *t_Collections_checkedCollection(PyTypeObject *type, PyObject *args)
    {
      ::java::util::Collection a0((jobject) NULL);
      PyTypeObject **p0;
      ::java::lang::Class a1((jobject) NULL);
      PyTypeObject **p1;
      ::java::util::Collection result((jobject) NULL);

      if (!parseArgs(args, "KK", ::java::util::Collection::initializeClass, ::java::lang::Class::initializeClass, &a0, &p0, ::java::util::t_Collection::parameters_, &a1, &p1, ::java::lang::t_Class::parameters_))
      {
        OBJ_CALL(result = ::java::util::Collections::checkedCollection(a0, a1));
        return ::java::util::t_Collection::wrap_Object(result);
      }

      PyErr_SetArgsError(type, "checkedCollection", args);
      return NULL;
    }

    static PyObject *t_Collections_checkedList(PyTypeObject *type, PyObject *args)
    {
      ::java::util::List a0((jobject) NULL);
      PyTypeObject **p0;
      ::java::lang::Class a1((jobject) NULL);
      PyTypeObject **p1;
      ::java::util::List result((jobject) NULL);

      if (!parseArgs(args, "KK", ::java::util::List::initializeClass, ::java::lang::Class::initializeClass, &a0, &p0, ::java::util::t_List::parameters_, &a1, &p1, ::java::lang::t_Class::parameters_))
      {
        OBJ_CALL(result = ::java::util::Collections::checkedList(a0, a1));
        return ::java::util::t_List::wrap_Object(result);
      }

      PyErr_SetArgsError(type, "checkedList", args);
      return NULL;
    }

    static PyObject *t_Collections_checkedMap(PyTypeObject *type, PyObject *args)
    {
      ::java::util::Map a0((jobject) NULL);
      PyTypeObject **p0;
      ::java::lang::Class a1((jobject) NULL);
      PyTypeObject **p1;
      ::java::lang::Class a2((jobject) NULL);
      PyTypeObject **p2;
      ::java::util::Map result((jobject) NULL);

      if (!parseArgs(args, "KKK", ::java::util::Map::initializeClass, ::java::lang::Class::initializeClass, ::java::lang::Class::initializeClass, &a0, &p0, ::java::util::t_Map::parameters_, &a1, &p1, ::java::lang::t_Class::parameters_, &a2, &p2, ::java::lang::t_Class::parameters_))
      {
        OBJ_CALL(result = ::java::util::Collections::checkedMap(a0, a1, a2));
        return ::java::util::t_Map::wrap_Object(result);
      }

      PyErr_SetArgsError(type, "checkedMap", args);
      return NULL;
    }

    static PyObject *t_Collections_checkedNavigableMap(PyTypeObject *type, PyObject *args)
    {
      ::java::util::NavigableMap a0((jobject) NULL);
      PyTypeObject **p0;
      ::java::lang::Class a1((jobject) NULL);
      PyTypeObject **p1;
      ::java::lang::Class a2((jobject) NULL);
      PyTypeObject **p2;
      ::java::util::NavigableMap result((jobject) NULL);

      if (!parseArgs(args, "KKK", ::java::util::NavigableMap::initializeClass, ::java::lang::Class::initializeClass, ::java::lang::Class::initializeClass, &a0, &p0, ::java::util::t_NavigableMap::parameters_, &a1, &p1, ::java::lang::t_Class::parameters_, &a2, &p2, ::java::lang::t_Class::parameters_))
      {
        OBJ_CALL(result = ::java::util::Collections::checkedNavigableMap(a0, a1, a2));
        return ::java::util::t_NavigableMap::wrap_Object(result);
      }

      PyErr_SetArgsError(type, "checkedNavigableMap", args);
      return NULL;
    }

    static PyObject *t_Collections_checkedNavigableSet(PyTypeObject *type, PyObject *args)
    {
      ::java::util::NavigableSet a0((jobject) NULL);
      PyTypeObject **p0;
      ::java::lang::Class a1((jobject) NULL);
      PyTypeObject **p1;
      ::java::util::NavigableSet result((jobject) NULL);

      if (!parseArgs(args, "KK", ::java::util::NavigableSet::initializeClass, ::java::lang::Class::initializeClass, &a0, &p0, ::java::util::t_NavigableSet::parameters_, &a1, &p1, ::java::lang::t_Class::parameters_))
      {
        OBJ_CALL(result = ::java::util::Collections::checkedNavigableSet(a0, a1));
        return ::java::util::t_NavigableSet::wrap_Object(result);
      }

      PyErr_SetArgsError(type, "checkedNavigableSet", args);
      return NULL;
    }

    static PyObject *t_Collections_checkedQueue(PyTypeObject *type, PyObject *args)
    {
      ::java::util::Queue a0((jobject) NULL);
      PyTypeObject **p0;
      ::java::lang::Class a1((jobject) NULL);
      PyTypeObject **p1;
      ::java::util::Queue result((jobject) NULL);

      if (!parseArgs(args, "KK", ::java::util::Queue::initializeClass, ::java::lang::Class::initializeClass, &a0, &p0, ::java::util::t_Queue::parameters_, &a1, &p1, ::java::lang::t_Class::parameters_))
      {
        OBJ_CALL(result = ::java::util::Collections::checkedQueue(a0, a1));
        return ::java::util::t_Queue::wrap_Object(result);
      }

      PyErr_SetArgsError(type, "checkedQueue", args);
      return NULL;
    }

    static PyObject *t_Collections_checkedSet(PyTypeObject *type, PyObject *args)
    {
      ::java::util::Set a0((jobject) NULL);
      PyTypeObject **p0;
      ::java::lang::Class a1((jobject) NULL);
      PyTypeObject **p1;
      ::java::util::Set result((jobject) NULL);

      if (!parseArgs(args, "KK", ::java::util::Set::initializeClass, ::java::lang::Class::initializeClass, &a0, &p0, ::java::util::t_Set::parameters_, &a1, &p1, ::java::lang::t_Class::parameters_))
      {
        OBJ_CALL(result = ::java::util::Collections::checkedSet(a0, a1));
        return ::java::util::t_Set::wrap_Object(result);
      }

      PyErr_SetArgsError(type, "checkedSet", args);
      return NULL;
    }

    static PyObject *t_Collections_checkedSortedMap(PyTypeObject *type, PyObject *args)
    {
      ::java::util::SortedMap a0((jobject) NULL);
      PyTypeObject **p0;
      ::java::lang::Class a1((jobject) NULL);
      PyTypeObject **p1;
      ::java::lang::Class a2((jobject) NULL);
      PyTypeObject **p2;
      ::java::util::SortedMap result((jobject) NULL);

      if (!parseArgs(args, "KKK", ::java::util::SortedMap::initializeClass, ::java::lang::Class::initializeClass, ::java::lang::Class::initializeClass, &a0, &p0, ::java::util::t_SortedMap::parameters_, &a1, &p1, ::java::lang::t_Class::parameters_, &a2, &p2, ::java::lang::t_Class::parameters_))
      {
        OBJ_CALL(result = ::java::util::Collections::checkedSortedMap(a0, a1, a2));
        return ::java::util::t_SortedMap::wrap_Object(result);
      }

      PyErr_SetArgsError(type, "checkedSortedMap", args);
      return NULL;
    }

    static PyObject *t_Collections_checkedSortedSet(PyTypeObject *type, PyObject *args)
    {
      ::java::util::SortedSet a0((jobject) NULL);
      PyTypeObject **p0;
      ::java::lang::Class a1((jobject) NULL);
      PyTypeObject **p1;
      ::java::util::SortedSet result((jobject) NULL);

      if (!parseArgs(args, "KK", ::java::util::SortedSet::initializeClass, ::java::lang::Class::initializeClass, &a0, &p0, ::java::util::t_SortedSet::parameters_, &a1, &p1, ::java::lang::t_Class::parameters_))
      {
        OBJ_CALL(result = ::java::util::Collections::checkedSortedSet(a0, a1));
        return ::java::util::t_SortedSet::wrap_Object(result);
      }

      PyErr_SetArgsError(type, "checkedSortedSet", args);
      return NULL;
    }

    static PyObject *t_Collections_copy(PyTypeObject *type, PyObject *args)
    {
      ::java::util::List a0((jobject) NULL);
      PyTypeObject **p0;
      ::java::util::List a1((jobject) NULL);
      PyTypeObject **p1;

      if (!parseArgs(args, "KK", ::java::util::List::initializeClass, ::java::util::List::initializeClass, &a0, &p0, ::java::util::t_List::parameters_, &a1, &p1, ::java::util::t_List::parameters_))
      {
        OBJ_CALL(::java::util::Collections::copy(a0, a1));
        Py_RETURN_NONE;
      }

      PyErr_SetArgsError(type, "copy", args);
      return NULL;
    }

    static PyObject *t_Collections_disjoint(PyTypeObject *type, PyObject *args)
    {
      ::java::util::Collection a0((jobject) NULL);
      PyTypeObject **p0;
      ::java::util::Collection a1((jobject) NULL);
      PyTypeObject **p1;
      jboolean result;

      if (!parseArgs(args, "KK", ::java::util::Collection::initializeClass, ::java::util::Collection::initializeClass, &a0, &p0, ::java::util::t_Collection::parameters_, &a1, &p1, ::java::util::t_Collection::parameters_))
      {
        OBJ_CALL(result = ::java::util::Collections::disjoint(a0, a1));
        Py_RETURN_BOOL(result);
      }

      PyErr_SetArgsError(type, "disjoint", args);
      return NULL;
    }

    static PyObject *t_Collections_emptyEnumeration(PyTypeObject *type)
    {
      ::java::util::Enumeration result((jobject) NULL);
      OBJ_CALL(result = ::java::util::Collections::emptyEnumeration());
      return ::java::util::t_Enumeration::wrap_Object(result);
    }

    static PyObject *t_Collections_emptyIterator(PyTypeObject *type)
    {
      ::java::util::Iterator result((jobject) NULL);
      OBJ_CALL(result = ::java::util::Collections::emptyIterator());
      return ::java::util::t_Iterator::wrap_Object(result);
    }

    static PyObject *t_Collections_emptyList(PyTypeObject *type)
    {
      ::java::util::List result((jobject) NULL);
      OBJ_CALL(result = ::java::util::Collections::emptyList());
      return ::java::util::t_List::wrap_Object(result);
    }

    static PyObject *t_Collections_emptyListIterator(PyTypeObject *type)
    {
      ::java::util::ListIterator result((jobject) NULL);
      OBJ_CALL(result = ::java::util::Collections::emptyListIterator());
      return ::java::util::t_ListIterator::wrap_Object(result);
    }

    static PyObject *t_Collections_emptyMap(PyTypeObject *type)
    {
      ::java::util::Map result((jobject) NULL);
      OBJ_CALL(result = ::java::util::Collections::emptyMap());
      return ::java::util::t_Map::wrap_Object(result);
    }

    static PyObject *t_Collections_emptyNavigableMap(PyTypeObject *type)
    {
      ::java::util::NavigableMap result((jobject) NULL);
      OBJ_CALL(result = ::java::util::Collections::emptyNavigableMap());
      return ::java::util::t_NavigableMap::wrap_Object(result);
    }

    static PyObject *t_Collections_emptyNavigableSet(PyTypeObject *type)
    {
      ::java::util::NavigableSet result((jobject) NULL);
      OBJ_CALL(result = ::java::util::Collections::emptyNavigableSet());
      return ::java::util::t_NavigableSet::wrap_Object(result);
    }

    static PyObject *t_Collections_emptySet(PyTypeObject *type)
    {
      ::java::util::Set result((jobject) NULL);
      OBJ_CALL(result = ::java::util::Collections::emptySet());
      return ::java::util::t_Set::wrap_Object(result);
    }

    static PyObject *t_Collections_emptySortedMap(PyTypeObject *type)
    {
      ::java::util::SortedMap result((jobject) NULL);
      OBJ_CALL(result = ::java::util::Collections::emptySortedMap());
      return ::java::util::t_SortedMap::wrap_Object(result);
    }

    static PyObject *t_Collections_emptySortedSet(PyTypeObject *type)
    {
      ::java::util::SortedSet result((jobject) NULL);
      OBJ_CALL(result = ::java::util::Collections::emptySortedSet());
      return ::java::util::t_SortedSet::wrap_Object(result);
    }

    static PyObject *t_Collections_enumeration(PyTypeObject *type, PyObject *arg)
    {
      ::java::util::Collection a0((jobject) NULL);
      PyTypeObject **p0;
      ::java::util::Enumeration result((jobject) NULL);

      if (!parseArg(arg, "K", ::java::util::Collection::initializeClass, &a0, &p0, ::java::util::t_Collection::parameters_))
      {
        OBJ_CALL(result = ::java::util::Collections::enumeration(a0));
        return ::java::util::t_Enumeration::wrap_Object(result);
      }

      PyErr_SetArgsError(type, "enumeration", arg);
      return NULL;
    }

    static PyObject *t_Collections_fill(PyTypeObject *type, PyObject *args)
    {
      ::java::util::List a0((jobject) NULL);
      PyTypeObject **p0;
      ::java::lang::Object a1((jobject) NULL);

      if (!parseArgs(args, "Ko", ::java::util::List::initializeClass, &a0, &p0, ::java::util::t_List::parameters_, &a1))
      {
        OBJ_CALL(::java::util::Collections::fill(a0, a1));
        Py_RETURN_NONE;
      }

      PyErr_SetArgsError(type, "fill", args);
      return NULL;
    }

    static PyObject *t_Collections_frequency(PyTypeObject *type, PyObject *args)
    {
      ::java::util::Collection a0((jobject) NULL);
      PyTypeObject **p0;
      ::java::lang::Object a1((jobject) NULL);
      jint result;

      if (!parseArgs(args, "Ko", ::java::util::Collection::initializeClass, &a0, &p0, ::java::util::t_Collection::parameters_, &a1))
      {
        OBJ_CALL(result = ::java::util::Collections::frequency(a0, a1));
        return PyLong_FromLong((long) result);
      }

      PyErr_SetArgsError(type, "frequency", args);
      return NULL;
    }

    static PyObject *t_Collections_indexOfSubList(PyTypeObject *type, PyObject *args)
    {
      ::java::util::List a0((jobject) NULL);
      PyTypeObject **p0;
      ::java::util::List a1((jobject) NULL);
      PyTypeObject **p1;
      jint result;

      if (!parseArgs(args, "KK", ::java::util::List::initializeClass, ::java::util::List::initializeClass, &a0, &p0, ::java::util::t_List::parameters_, &a1, &p1, ::java::util::t_List::parameters_))
      {
        OBJ_CALL(result = ::java::util::Collections::indexOfSubList(a0, a1));
        return PyLong_FromLong((long) result);
      }

      PyErr_SetArgsError(type, "indexOfSubList", args);
      return NULL;
    }

    static PyObject *t_Collections_lastIndexOfSubList(PyTypeObject *type, PyObject *args)
    {
      ::java::util::List a0((jobject) NULL);
      PyTypeObject **p0;
      ::java::util::List a1((jobject) NULL);
      PyTypeObject **p1;
      jint result;

      if (!parseArgs(args, "KK", ::java::util::List::initializeClass, ::java::util::List::initializeClass, &a0, &p0, ::java::util::t_List::parameters_, &a1, &p1, ::java::util::t_List::parameters_))
      {
        OBJ_CALL(result = ::java::util::Collections::lastIndexOfSubList(a0, a1));
        return PyLong_FromLong((long) result);
      }

      PyErr_SetArgsError(type, "lastIndexOfSubList", args);
      return NULL;
    }

    static PyObject *t_Collections_list(PyTypeObject *type, PyObject *arg)
    {
      ::java::util::Enumeration a0((jobject) NULL);
      PyTypeObject **p0;
      ::java::util::ArrayList result((jobject) NULL);

      if (!parseArg(arg, "K", ::java::util::Enumeration::initializeClass, &a0, &p0, ::java::util::t_Enumeration::parameters_))
      {
        OBJ_CALL(result = ::java::util::Collections::list(a0));
        return ::java::util::t_ArrayList::wrap_Object(result);
      }

      PyErr_SetArgsError(type, "list", arg);
      return NULL;
    }

    static PyObject *t_Collections_max(PyTypeObject *type, PyObject *args)
    {
      switch (PyTuple_GET_SIZE(args)) {
       case 1:
        {
          ::java::util::Collection a0((jobject) NULL);
          PyTypeObject **p0;
          ::java::lang::Object result((jobject) NULL);

          if (!parseArgs(args, "K", ::java::util::Collection::initializeClass, &a0, &p0, ::java::util::t_Collection::parameters_))
          {
            OBJ_CALL(result = ::java::util::Collections::max$(a0));
            return p0 != NULL && p0[0] != NULL ? wrapType(p0[0], result.this$) : ::java::lang::t_Object::wrap_Object(result);
          }
        }
        break;
       case 2:
        {
          ::java::util::Collection a0((jobject) NULL);
          PyTypeObject **p0;
          ::java::util::Comparator a1((jobject) NULL);
          PyTypeObject **p1;
          ::java::lang::Object result((jobject) NULL);

          if (!parseArgs(args, "KK", ::java::util::Collection::initializeClass, ::java::util::Comparator::initializeClass, &a0, &p0, ::java::util::t_Collection::parameters_, &a1, &p1, ::java::util::t_Comparator::parameters_))
          {
            OBJ_CALL(result = ::java::util::Collections::max$(a0, a1));
            return p0 != NULL && p0[0] != NULL ? wrapType(p0[0], result.this$) : ::java::lang::t_Object::wrap_Object(result);
          }
        }
      }

      PyErr_SetArgsError(type, "max", args);
      return NULL;
    }

    static PyObject *t_Collections_min(PyTypeObject *type, PyObject *args)
    {
      switch (PyTuple_GET_SIZE(args)) {
       case 1:
        {
          ::java::util::Collection a0((jobject) NULL);
          PyTypeObject **p0;
          ::java::lang::Object result((jobject) NULL);

          if (!parseArgs(args, "K", ::java::util::Collection::initializeClass, &a0, &p0, ::java::util::t_Collection::parameters_))
          {
            OBJ_CALL(result = ::java::util::Collections::min$(a0));
            return p0 != NULL && p0[0] != NULL ? wrapType(p0[0], result.this$) : ::java::lang::t_Object::wrap_Object(result);
          }
        }
        break;
       case 2:
        {
          ::java::util::Collection a0((jobject) NULL);
          PyTypeObject **p0;
          ::java::util::Comparator a1((jobject) NULL);
          PyTypeObject **p1;
          ::java::lang::Object result((jobject) NULL);

          if (!parseArgs(args, "KK", ::java::util::Collection::initializeClass, ::java::util::Comparator::initializeClass, &a0, &p0, ::java::util::t_Collection::parameters_, &a1, &p1, ::java::util::t_Comparator::parameters_))
          {
            OBJ_CALL(result = ::java::util::Collections::min$(a0, a1));
            return p0 != NULL && p0[0] != NULL ? wrapType(p0[0], result.this$) : ::java::lang::t_Object::wrap_Object(result);
          }
        }
      }

      PyErr_SetArgsError(type, "min", args);
      return NULL;
    }

    static PyObject *t_Collections_nCopies(PyTypeObject *type, PyObject *args)
    {
      jint a0;
      ::java::lang::Object a1((jobject) NULL);
      ::java::util::List result((jobject) NULL);

      if (!parseArgs(args, "Io", &a0, &a1))
      {
        OBJ_CALL(result = ::java::util::Collections::nCopies(a0, a1));
        return ::java::util::t_List::wrap_Object(result);
      }

      PyErr_SetArgsError(type, "nCopies", args);
      return NULL;
    }

    static PyObject *t_Collections_newSetFromMap(PyTypeObject *type, PyObject *arg)
    {
      ::java::util::Map a0((jobject) NULL);
      PyTypeObject **p0;
      ::java::util::Set result((jobject) NULL);

      if (!parseArg(arg, "K", ::java::util::Map::initializeClass, &a0, &p0, ::java::util::t_Map::parameters_))
      {
        OBJ_CALL(result = ::java::util::Collections::newSetFromMap(a0));
        return ::java::util::t_Set::wrap_Object(result);
      }

      PyErr_SetArgsError(type, "newSetFromMap", arg);
      return NULL;
    }

    static PyObject *t_Collections_replaceAll(PyTypeObject *type, PyObject *args)
    {
      ::java::util::List a0((jobject) NULL);
      PyTypeObject **p0;
      ::java::lang::Object a1((jobject) NULL);
      ::java::lang::Object a2((jobject) NULL);
      jboolean result;

      if (!parseArgs(args, "Koo", ::java::util::List::initializeClass, &a0, &p0, ::java::util::t_List::parameters_, &a1, &a2))
      {
        OBJ_CALL(result = ::java::util::Collections::replaceAll(a0, a1, a2));
        Py_RETURN_BOOL(result);
      }

      PyErr_SetArgsError(type, "replaceAll", args);
      return NULL;
    }

    static PyObject *t_Collections_reverse(PyTypeObject *type, PyObject *arg)
    {
      ::java::util::List a0((jobject) NULL);
      PyTypeObject **p0;

      if (!parseArg(arg, "K", ::java::util::List::initializeClass, &a0, &p0, ::java::util::t_List::parameters_))
      {
        OBJ_CALL(::java::util::Collections::reverse(a0));
        Py_RETURN_NONE;
      }

      PyErr_SetArgsError(type, "reverse", arg);
      return NULL;
    }

    static PyObject *t_Collections_reverseOrder(PyTypeObject *type, PyObject *args)
    {
      switch (PyTuple_GET_SIZE(args)) {
       case 0:
        {
          ::java::util::Comparator result((jobject) NULL);
          OBJ_CALL(result = ::java::util::Collections::reverseOrder());
          return ::java::util::t_Comparator::wrap_Object(result);
        }
        break;
       case 1:
        {
          ::java::util::Comparator a0((jobject) NULL);
          PyTypeObject **p0;
          ::java::util::Comparator result((jobject) NULL);

          if (!parseArgs(args, "K", ::java::util::Comparator::initializeClass, &a0, &p0, ::java::util::t_Comparator::parameters_))
          {
            OBJ_CALL(result = ::java::util::Collections::reverseOrder(a0));
            return ::java::util::t_Comparator::wrap_Object(result);
          }
        }
      }

      PyErr_SetArgsError(type, "reverseOrder", args);
      return NULL;
    }

    static PyObject *t_Collections_rotate(PyTypeObject *type, PyObject *args)
    {
      ::java::util::List a0((jobject) NULL);
      PyTypeObject **p0;
      jint a1;

      if (!parseArgs(args, "KI", ::java::util::List::initializeClass, &a0, &p0, ::java::util::t_List::parameters_, &a1))
      {
        OBJ_CALL(::java::util::Collections::rotate(a0, a1));
        Py_RETURN_NONE;
      }

      PyErr_SetArgsError(type, "rotate", args);
      return NULL;
    }

    static PyObject *t_Collections_shuffle(PyTypeObject *type, PyObject *args)
    {
      switch (PyTuple_GET_SIZE(args)) {
       case 1:
        {
          ::java::util::List a0((jobject) NULL);
          PyTypeObject **p0;

          if (!parseArgs(args, "K", ::java::util::List::initializeClass, &a0, &p0, ::java::util::t_List::parameters_))
          {
            OBJ_CALL(::java::util::Collections::shuffle(a0));
            Py_RETURN_NONE;
          }
        }
        break;
       case 2:
        {
          ::java::util::List a0((jobject) NULL);
          PyTypeObject **p0;
          ::java::util::Random a1((jobject) NULL);

          if (!parseArgs(args, "Kk", ::java::util::List::initializeClass, ::java::util::Random::initializeClass, &a0, &p0, ::java::util::t_List::parameters_, &a1))
          {
            OBJ_CALL(::java::util::Collections::shuffle(a0, a1));
            Py_RETURN_NONE;
          }
        }
      }

      PyErr_SetArgsError(type, "shuffle", args);
      return NULL;
    }

    static PyObject *t_Collections_singleton(PyTypeObject *type, PyObject *arg)
    {
      ::java::lang::Object a0((jobject) NULL);
      ::java::util::Set result((jobject) NULL);

      if (!parseArg(arg, "o", &a0))
      {
        OBJ_CALL(result = ::java::util::Collections::singleton(a0));
        return ::java::util::t_Set::wrap_Object(result);
      }

      PyErr_SetArgsError(type, "singleton", arg);
      return NULL;
    }

    static PyObject *t_Collections_singletonList(PyTypeObject *type, PyObject *arg)
    {
      ::java::lang::Object a0((jobject) NULL);
      ::java::util::List result((jobject) NULL);

      if (!parseArg(arg, "o", &a0))
      {
        OBJ_CALL(result = ::java::util::Collections::singletonList(a0));
        return ::java::util::t_List::wrap_Object(result);
      }

      PyErr_SetArgsError(type, "singletonList", arg);
      return NULL;
    }

    static PyObject *t_Collections_singletonMap(PyTypeObject *type, PyObject *args)
    {
      ::java::lang::Object a0((jobject) NULL);
      ::java::lang::Object a1((jobject) NULL);
      ::java::util::Map result((jobject) NULL);

      if (!parseArgs(args, "oo", &a0, &a1))
      {
        OBJ_CALL(result = ::java::util::Collections::singletonMap(a0, a1));
        return ::java::util::t_Map::wrap_Object(result);
      }

      PyErr_SetArgsError(type, "singletonMap", args);
      return NULL;
    }

    static PyObject *t_Collections_sort(PyTypeObject *type, PyObject *args)
    {
      switch (PyTuple_GET_SIZE(args)) {
       case 1:
        {
          ::java::util::List a0((jobject) NULL);
          PyTypeObject **p0;

          if (!parseArgs(args, "K", ::java::util::List::initializeClass, &a0, &p0, ::java::util::t_List::parameters_))
          {
            OBJ_CALL(::java::util::Collections::sort(a0));
            Py_RETURN_NONE;
          }
        }
        break;
       case 2:
        {
          ::java::util::List a0((jobject) NULL);
          PyTypeObject **p0;
          ::java::util::Comparator a1((jobject) NULL);
          PyTypeObject **p1;

          if (!parseArgs(args, "KK", ::java::util::List::initializeClass, ::java::util::Comparator::initializeClass, &a0, &p0, ::java::util::t_List::parameters_, &a1, &p1, ::java::util::t_Comparator::parameters_))
          {
            OBJ_CALL(::java::util::Collections::sort(a0, a1));
            Py_RETURN_NONE;
          }
        }
      }

      PyErr_SetArgsError(type, "sort", args);
      return NULL;
    }

    static PyObject *t_Collections_swap(PyTypeObject *type, PyObject *args)
    {
      ::java::util::List a0((jobject) NULL);
      PyTypeObject **p0;
      jint a1;
      jint a2;

      if (!parseArgs(args, "KII", ::java::util::List::initializeClass, &a0, &p0, ::java::util::t_List::parameters_, &a1, &a2))
      {
        OBJ_CALL(::java::util::Collections::swap(a0, a1, a2));
        Py_RETURN_NONE;
      }

      PyErr_SetArgsError(type, "swap", args);
      return NULL;
    }

    static PyObject *t_Collections_synchronizedCollection(PyTypeObject *type, PyObject *arg)
    {
      ::java::util::Collection a0((jobject) NULL);
      PyTypeObject **p0;
      ::java::util::Collection result((jobject) NULL);

      if (!parseArg(arg, "K", ::java::util::Collection::initializeClass, &a0, &p0, ::java::util::t_Collection::parameters_))
      {
        OBJ_CALL(result = ::java::util::Collections::synchronizedCollection(a0));
        return ::java::util::t_Collection::wrap_Object(result);
      }

      PyErr_SetArgsError(type, "synchronizedCollection", arg);
      return NULL;
    }

    static PyObject *t_Collections_synchronizedList(PyTypeObject *type, PyObject *arg)
    {
      ::java::util::List a0((jobject) NULL);
      PyTypeObject **p0;
      ::java::util::List result((jobject) NULL);

      if (!parseArg(arg, "K", ::java::util::List::initializeClass, &a0, &p0, ::java::util::t_List::parameters_))
      {
        OBJ_CALL(result = ::java::util::Collections::synchronizedList(a0));
        return ::java::util::t_List::wrap_Object(result);
      }

      PyErr_SetArgsError(type, "synchronizedList", arg);
      return NULL;
    }

    static PyObject *t_Collections_synchronizedMap(PyTypeObject *type, PyObject *arg)
    {
      ::java::util::Map a0((jobject) NULL);
      PyTypeObject **p0;
      ::java::util::Map result((jobject) NULL);

      if (!parseArg(arg, "K", ::java::util::Map::initializeClass, &a0, &p0, ::java::util::t_Map::parameters_))
      {
        OBJ_CALL(result = ::java::util::Collections::synchronizedMap(a0));
        return ::java::util::t_Map::wrap_Object(result);
      }

      PyErr_SetArgsError(type, "synchronizedMap", arg);
      return NULL;
    }

    static PyObject *t_Collections_synchronizedNavigableMap(PyTypeObject *type, PyObject *arg)
    {
      ::java::util::NavigableMap a0((jobject) NULL);
      PyTypeObject **p0;
      ::java::util::NavigableMap result((jobject) NULL);

      if (!parseArg(arg, "K", ::java::util::NavigableMap::initializeClass, &a0, &p0, ::java::util::t_NavigableMap::parameters_))
      {
        OBJ_CALL(result = ::java::util::Collections::synchronizedNavigableMap(a0));
        return ::java::util::t_NavigableMap::wrap_Object(result);
      }

      PyErr_SetArgsError(type, "synchronizedNavigableMap", arg);
      return NULL;
    }

    static PyObject *t_Collections_synchronizedNavigableSet(PyTypeObject *type, PyObject *arg)
    {
      ::java::util::NavigableSet a0((jobject) NULL);
      PyTypeObject **p0;
      ::java::util::NavigableSet result((jobject) NULL);

      if (!parseArg(arg, "K", ::java::util::NavigableSet::initializeClass, &a0, &p0, ::java::util::t_NavigableSet::parameters_))
      {
        OBJ_CALL(result = ::java::util::Collections::synchronizedNavigableSet(a0));
        return ::java::util::t_NavigableSet::wrap_Object(result);
      }

      PyErr_SetArgsError(type, "synchronizedNavigableSet", arg);
      return NULL;
    }

    static PyObject *t_Collections_synchronizedSet(PyTypeObject *type, PyObject *arg)
    {
      ::java::util::Set a0((jobject) NULL);
      PyTypeObject **p0;
      ::java::util::Set result((jobject) NULL);

      if (!parseArg(arg, "K", ::java::util::Set::initializeClass, &a0, &p0, ::java::util::t_Set::parameters_))
      {
        OBJ_CALL(result = ::java::util::Collections::synchronizedSet(a0));
        return ::java::util::t_Set::wrap_Object(result);
      }

      PyErr_SetArgsError(type, "synchronizedSet", arg);
      return NULL;
    }

    static PyObject *t_Collections_synchronizedSortedMap(PyTypeObject *type, PyObject *arg)
    {
      ::java::util::SortedMap a0((jobject) NULL);
      PyTypeObject **p0;
      ::java::util::SortedMap result((jobject) NULL);

      if (!parseArg(arg, "K", ::java::util::SortedMap::initializeClass, &a0, &p0, ::java::util::t_SortedMap::parameters_))
      {
        OBJ_CALL(result = ::java::util::Collections::synchronizedSortedMap(a0));
        return ::java::util::t_SortedMap::wrap_Object(result);
      }

      PyErr_SetArgsError(type, "synchronizedSortedMap", arg);
      return NULL;
    }

    static PyObject *t_Collections_synchronizedSortedSet(PyTypeObject *type, PyObject *arg)
    {
      ::java::util::SortedSet a0((jobject) NULL);
      PyTypeObject **p0;
      ::java::util::SortedSet result((jobject) NULL);

      if (!parseArg(arg, "K", ::java::util::SortedSet::initializeClass, &a0, &p0, ::java::util::t_SortedSet::parameters_))
      {
        OBJ_CALL(result = ::java::util::Collections::synchronizedSortedSet(a0));
        return ::java::util::t_SortedSet::wrap_Object(result);
      }

      PyErr_SetArgsError(type, "synchronizedSortedSet", arg);
      return NULL;
    }

    static PyObject *t_Collections_unmodifiableCollection(PyTypeObject *type, PyObject *arg)
    {
      ::java::util::Collection a0((jobject) NULL);
      PyTypeObject **p0;
      ::java::util::Collection result((jobject) NULL);

      if (!parseArg(arg, "K", ::java::util::Collection::initializeClass, &a0, &p0, ::java::util::t_Collection::parameters_))
      {
        OBJ_CALL(result = ::java::util::Collections::unmodifiableCollection(a0));
        return ::java::util::t_Collection::wrap_Object(result);
      }

      PyErr_SetArgsError(type, "unmodifiableCollection", arg);
      return NULL;
    }

    static PyObject *t_Collections_unmodifiableList(PyTypeObject *type, PyObject *arg)
    {
      ::java::util::List a0((jobject) NULL);
      PyTypeObject **p0;
      ::java::util::List result((jobject) NULL);

      if (!parseArg(arg, "K", ::java::util::List::initializeClass, &a0, &p0, ::java::util::t_List::parameters_))
      {
        OBJ_CALL(result = ::java::util::Collections::unmodifiableList(a0));
        return ::java::util::t_List::wrap_Object(result);
      }

      PyErr_SetArgsError(type, "unmodifiableList", arg);
      return NULL;
    }

    static PyObject *t_Collections_unmodifiableMap(PyTypeObject *type, PyObject *arg)
    {
      ::java::util::Map a0((jobject) NULL);
      PyTypeObject **p0;
      ::java::util::Map result((jobject) NULL);

      if (!parseArg(arg, "K", ::java::util::Map::initializeClass, &a0, &p0, ::java::util::t_Map::parameters_))
      {
        OBJ_CALL(result = ::java::util::Collections::unmodifiableMap(a0));
        return ::java::util::t_Map::wrap_Object(result);
      }

      PyErr_SetArgsError(type, "unmodifiableMap", arg);
      return NULL;
    }

    static PyObject *t_Collections_unmodifiableNavigableMap(PyTypeObject *type, PyObject *arg)
    {
      ::java::util::NavigableMap a0((jobject) NULL);
      PyTypeObject **p0;
      ::java::util::NavigableMap result((jobject) NULL);

      if (!parseArg(arg, "K", ::java::util::NavigableMap::initializeClass, &a0, &p0, ::java::util::t_NavigableMap::parameters_))
      {
        OBJ_CALL(result = ::java::util::Collections::unmodifiableNavigableMap(a0));
        return ::java::util::t_NavigableMap::wrap_Object(result);
      }

      PyErr_SetArgsError(type, "unmodifiableNavigableMap", arg);
      return NULL;
    }

    static PyObject *t_Collections_unmodifiableNavigableSet(PyTypeObject *type, PyObject *arg)
    {
      ::java::util::NavigableSet a0((jobject) NULL);
      PyTypeObject **p0;
      ::java::util::NavigableSet result((jobject) NULL);

      if (!parseArg(arg, "K", ::java::util::NavigableSet::initializeClass, &a0, &p0, ::java::util::t_NavigableSet::parameters_))
      {
        OBJ_CALL(result = ::java::util::Collections::unmodifiableNavigableSet(a0));
        return ::java::util::t_NavigableSet::wrap_Object(result);
      }

      PyErr_SetArgsError(type, "unmodifiableNavigableSet", arg);
      return NULL;
    }

    static PyObject *t_Collections_unmodifiableSet(PyTypeObject *type, PyObject *arg)
    {
      ::java::util::Set a0((jobject) NULL);
      PyTypeObject **p0;
      ::java::util::Set result((jobject) NULL);

      if (!parseArg(arg, "K", ::java::util::Set::initializeClass, &a0, &p0, ::java::util::t_Set::parameters_))
      {
        OBJ_CALL(result = ::java::util::Collections::unmodifiableSet(a0));
        return ::java::util::t_Set::wrap_Object(result);
      }

      PyErr_SetArgsError(type, "unmodifiableSet", arg);
      return NULL;
    }

    static PyObject *t_Collections_unmodifiableSortedMap(PyTypeObject *type, PyObject *arg)
    {
      ::java::util::SortedMap a0((jobject) NULL);
      PyTypeObject **p0;
      ::java::util::SortedMap result((jobject) NULL);

      if (!parseArg(arg, "K", ::java::util::SortedMap::initializeClass, &a0, &p0, ::java::util::t_SortedMap::parameters_))
      {
        OBJ_CALL(result = ::java::util::Collections::unmodifiableSortedMap(a0));
        return ::java::util::t_SortedMap::wrap_Object(result);
      }

      PyErr_SetArgsError(type, "unmodifiableSortedMap", arg);
      return NULL;
    }

    static PyObject *t_Collections_unmodifiableSortedSet(PyTypeObject *type, PyObject *arg)
    {
      ::java::util::SortedSet a0((jobject) NULL);
      PyTypeObject **p0;
      ::java::util::SortedSet result((jobject) NULL);

      if (!parseArg(arg, "K", ::java::util::SortedSet::initializeClass, &a0, &p0, ::java::util::t_SortedSet::parameters_))
      {
        OBJ_CALL(result = ::java::util::Collections::unmodifiableSortedSet(a0));
        return ::java::util::t_SortedSet::wrap_Object(result);
      }

      PyErr_SetArgsError(type, "unmodifiableSortedSet", arg);
      return NULL;
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/similarities/Similarity$SimScorer.h"
#include "org/apache/lucene/search/Explanation.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace similarities {

          ::java::lang::Class *Similarity$SimScorer::class$ = NULL;
          jmethodID *Similarity$SimScorer::mids$ = NULL;
          bool Similarity$SimScorer::live$ = false;

          jclass Similarity$SimScorer::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/search/similarities/Similarity$SimScorer");

              mids$ = new jmethodID[max_mid];
              mids$[mid_explain_d6feb15e9d006d75] = env->getMethodID(cls, "explain", "(Lorg/apache/lucene/search/Explanation;J)Lorg/apache/lucene/search/Explanation;");
              mids$[mid_score_701951821ffd5c0c] = env->getMethodID(cls, "score", "(FJ)F");

              class$ = new ::java::lang::Class(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          ::org::apache::lucene::search::Explanation Similarity$SimScorer::explain(const ::org::apache::lucene::search::Explanation & a0, jlong a1) const
          {
            return ::org::apache::lucene::search::Explanation(env->callObjectMethod(this$, mids$[mid_explain_d6feb15e9d006d75], a0.this$, a1));
          }

          jfloat Similarity$SimScorer::score(jfloat a0, jlong a1) const
          {
            return env->callFloatMethod(this$, mids$[mid_score_701951821ffd5c0c], a0, a1);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace similarities {
          static PyObject *t_Similarity$SimScorer_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_Similarity$SimScorer_instance_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_Similarity$SimScorer_explain(t_Similarity$SimScorer *self, PyObject *args);
          static PyObject *t_Similarity$SimScorer_score(t_Similarity$SimScorer *self, PyObject *args);

          static PyMethodDef t_Similarity$SimScorer__methods_[] = {
            DECLARE_METHOD(t_Similarity$SimScorer, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_Similarity$SimScorer, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_Similarity$SimScorer, explain, METH_VARARGS),
            DECLARE_METHOD(t_Similarity$SimScorer, score, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          static PyType_Slot PY_TYPE_SLOTS(Similarity$SimScorer)[] = {
            { Py_tp_methods, t_Similarity$SimScorer__methods_ },
            { Py_tp_init, (void *) abstract_init },
            { 0, NULL }
          };

          static PyType_Def *PY_TYPE_BASES(Similarity$SimScorer)[] = {
            &PY_TYPE_DEF(::java::lang::Object),
            NULL
          };

          DEFINE_TYPE(Similarity$SimScorer, t_Similarity$SimScorer, Similarity$SimScorer);

          void t_Similarity$SimScorer::install(PyObject *module)
          {
            installType(&PY_TYPE(Similarity$SimScorer), &PY_TYPE_DEF(Similarity$SimScorer), module, "Similarity$SimScorer", 0);
          }

          void t_Similarity$SimScorer::initialize(PyObject *module)
          {
            PyObject_SetAttrString((PyObject *) PY_TYPE(Similarity$SimScorer), "class_", make_descriptor(Similarity$SimScorer::initializeClass, 1));
            PyObject_SetAttrString((PyObject *) PY_TYPE(Similarity$SimScorer), "wrapfn_", make_descriptor(t_Similarity$SimScorer::wrap_jobject));
            PyObject_SetAttrString((PyObject *) PY_TYPE(Similarity$SimScorer), "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_Similarity$SimScorer_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, Similarity$SimScorer::initializeClass, 1)))
              return NULL;
            return t_Similarity$SimScorer::wrap_Object(Similarity$SimScorer(((t_Similarity$SimScorer *) arg)->object.this$));
          }
          static PyObject *t_Similarity$SimScorer_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, Similarity$SimScorer::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static PyObject *t_Similarity$SimScorer_explain(t_Similarity$SimScorer *self, PyObject *args)
          {
            ::org::apache::lucene::search::Explanation a0((jobject) NULL);
            jlong a1;
            ::org::apache::lucene::search::Explanation result((jobject) NULL);

            if (!parseArgs(args, "kJ", ::org::apache::lucene::search::Explanation::initializeClass, &a0, &a1))
            {
              OBJ_CALL(result = self->object.explain(a0, a1));
              return ::org::apache::lucene::search::t_Explanation::wrap_Object(result);
            }

            PyErr_SetArgsError((PyObject *) self, "explain", args);
            return NULL;
          }

          static PyObject *t_Similarity$SimScorer_score(t_Similarity$SimScorer *self, PyObject *args)
          {
            jfloat a0;
            jlong a1;
            jfloat result;

            if (!parseArgs(args, "FJ", &a0, &a1))
            {
              OBJ_CALL(result = self->object.score(a0, a1));
              return PyFloat_FromDouble((double) result);
            }

            PyErr_SetArgsError((PyObject *) self, "score", args);
            return NULL;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/index/TermStates.h"
#include "org/apache/lucene/index/LeafReaderContext.h"
#include "org/apache/lucene/index/Term.h"
#include "org/apache/lucene/index/IndexReaderContext.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/index/TermState.h"
#include "org/apache/lucene/index/TermStates.h"
#include "java/lang/String.h"
#include "java/io/IOException.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {

        ::java::lang::Class *TermStates::class$ = NULL;
        jmethodID *TermStates::mids$ = NULL;
        bool TermStates::live$ = false;

        jclass TermStates::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/index/TermStates");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_436a8b1eb9db2e88] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/index/IndexReaderContext;)V");
            mids$[mid_init$_0e305a3e42e79178] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/index/IndexReaderContext;Lorg/apache/lucene/index/TermState;IIJ)V");
            mids$[mid_accumulateStatistics_7b2f5b9ddfcb9416] = env->getMethodID(cls, "accumulateStatistics", "(IJ)V");
            mids$[mid_build_1c32b8602dc4905c] = env->getStaticMethodID(cls, "build", "(Lorg/apache/lucene/index/IndexReaderContext;Lorg/apache/lucene/index/Term;Z)Lorg/apache/lucene/index/TermStates;");
            mids$[mid_clear_f2cc1bce94666404] = env->getMethodID(cls, "clear", "()V");
            mids$[mid_docFreq_9972fcc56b44e79d] = env->getMethodID(cls, "docFreq", "()I");
            mids$[mid_get_50c2626fd6a9d679] = env->getMethodID(cls, "get", "(Lorg/apache/lucene/index/LeafReaderContext;)Lorg/apache/lucene/index/TermState;");
            mids$[mid_register_23adf82e9103f1f2] = env->getMethodID(cls, "register", "(Lorg/apache/lucene/index/TermState;I)V");
            mids$[mid_register_c05814ca04b61828] = env->getMethodID(cls, "register", "(Lorg/apache/lucene/index/TermState;IIJ)V");
            mids$[mid_toString_db9b55ba01e03e4b] = env->getMethodID(cls, "toString", "()Ljava/lang/String;");
            mids$[mid_totalTermFreq_2e5ae9edcb9b072f] = env->getMethodID(cls, "totalTermFreq", "()J");
            mids$[mid_wasBuiltFor_9a191fcb2f0f9f74] = env->getMethodID(cls, "wasBuiltFor", "(Lorg/apache/lucene/index/IndexReaderContext;)Z");

            class$ = new ::java::lang::Class(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        TermStates::TermStates(const ::org::apache::lucene::index::IndexReaderContext & a0) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_436a8b1eb9db2e88, a0.this$)) {}

        TermStates::TermStates(const ::org::apache::lucene::index::IndexReaderContext & a0, const ::org::apache::lucene::index::TermState & a1, jint a2, jint a3, jlong a4) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_0e305a3e42e79178, a0.this$, a1.this$, a2, a3, a4)) {}

        void TermStates::accumulateStatistics(jint a0, jlong a1) const
        {
          env->callVoidMethod(this$, mids$[mid_accumulateStatistics_7b2f5b9ddfcb9416], a0, a1);
        }

        TermStates TermStates::build(const ::org::apache::lucene::index::IndexReaderContext & a0, const ::org::apache::lucene::index::Term & a1, jboolean a2)
        {
          jclass cls = env->getClass(initializeClass);
          return TermStates(env->callStaticObjectMethod(cls, mids$[mid_build_1c32b8602dc4905c], a0.this$, a1.this$, a2));
        }

        void TermStates::clear() const
        {
          env->callVoidMethod(this$, mids$[mid_clear_f2cc1bce94666404]);
        }

        jint TermStates::docFreq() const
        {
          return env->callIntMethod(this$, mids$[mid_docFreq_9972fcc56b44e79d]);
        }

        ::org::apache::lucene::index::TermState TermStates::get(const ::org::apache::lucene::index::LeafReaderContext & a0) const
        {
          return ::org::apache::lucene::index::TermState(env->callObjectMethod(this$, mids$[mid_get_50c2626fd6a9d679], a0.this$));
        }

        void TermStates::register$(const ::org::apache::lucene::index::TermState & a0, jint a1) const
        {
          env->callVoidMethod(this$, mids$[mid_register_23adf82e9103f1f2], a0.this$, a1);
        }

        void TermStates::register$(const ::org::apache::lucene::index::TermState & a0, jint a1, jint a2, jlong a3) const
        {
          env->callVoidMethod(this$, mids$[mid_register_c05814ca04b61828], a0.this$, a1, a2, a3);
        }

        ::java::lang::String TermStates::toString() const
        {
          return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_db9b55ba01e03e4b]));
        }

        jlong TermStates::totalTermFreq() const
        {
          return env->callLongMethod(this$, mids$[mid_totalTermFreq_2e5ae9edcb9b072f]);
        }

        jboolean TermStates::wasBuiltFor(const ::org::apache::lucene::index::IndexReaderContext & a0) const
        {
          return env->callBooleanMethod(this$, mids$[mid_wasBuiltFor_9a191fcb2f0f9f74], a0.this$);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {
        static PyObject *t_TermStates_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_TermStates_instance_(PyTypeObject *type, PyObject *arg);
        static int t_TermStates_init_(t_TermStates *self, PyObject *args, PyObject *kwds);
        static PyObject *t_TermStates_accumulateStatistics(t_TermStates *self, PyObject *args);
        static PyObject *t_TermStates_build(PyTypeObject *type, PyObject *args);
        static PyObject *t_TermStates_clear(t_TermStates *self);
        static PyObject *t_TermStates_docFreq(t_TermStates *self);
        static PyObject *t_TermStates_get(t_TermStates *self, PyObject *arg);
        static PyObject *t_TermStates_register(t_TermStates *self, PyObject *args);
        static PyObject *t_TermStates_toString(t_TermStates *self, PyObject *args);
        static PyObject *t_TermStates_totalTermFreq(t_TermStates *self);
        static PyObject *t_TermStates_wasBuiltFor(t_TermStates *self, PyObject *arg);

        static PyMethodDef t_TermStates__methods_[] = {
          DECLARE_METHOD(t_TermStates, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_TermStates, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_TermStates, accumulateStatistics, METH_VARARGS),
          DECLARE_METHOD(t_TermStates, build, METH_VARARGS | METH_CLASS),
          DECLARE_METHOD(t_TermStates, clear, METH_NOARGS),
          DECLARE_METHOD(t_TermStates, docFreq, METH_NOARGS),
          DECLARE_METHOD(t_TermStates, get, METH_O),
          DECLARE_METHOD(t_TermStates, register, METH_VARARGS),
          DECLARE_METHOD(t_TermStates, toString, METH_VARARGS),
          DECLARE_METHOD(t_TermStates, totalTermFreq, METH_NOARGS),
          DECLARE_METHOD(t_TermStates, wasBuiltFor, METH_O),
          { NULL, NULL, 0, NULL }
        };

        static PyType_Slot PY_TYPE_SLOTS(TermStates)[] = {
          { Py_tp_methods, t_TermStates__methods_ },
          { Py_tp_init, (void *) t_TermStates_init_ },
          { 0, NULL }
        };

        static PyType_Def *PY_TYPE_BASES(TermStates)[] = {
          &PY_TYPE_DEF(::java::lang::Object),
          NULL
        };

        DEFINE_TYPE(TermStates, t_TermStates, TermStates);

        void t_TermStates::install(PyObject *module)
        {
          installType(&PY_TYPE(TermStates), &PY_TYPE_DEF(TermStates), module, "TermStates", 0);
        }

        void t_TermStates::initialize(PyObject *module)
        {
          PyObject_SetAttrString((PyObject *) PY_TYPE(TermStates), "class_", make_descriptor(TermStates::initializeClass, 1));
          PyObject_SetAttrString((PyObject *) PY_TYPE(TermStates), "wrapfn_", make_descriptor(t_TermStates::wrap_jobject));
          PyObject_SetAttrString((PyObject *) PY_TYPE(TermStates), "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_TermStates_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, TermStates::initializeClass, 1)))
            return NULL;
          return t_TermStates::wrap_Object(TermStates(((t_TermStates *) arg)->object.this$));
        }
        static PyObject *t_TermStates_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, TermStates::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_TermStates_init_(t_TermStates *self, PyObject *args, PyObject *kwds)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 1:
            {
              ::org::apache::lucene::index::IndexReaderContext a0((jobject) NULL);
              TermStates object((jobject) NULL);

              if (!parseArgs(args, "k", ::org::apache::lucene::index::IndexReaderContext::initializeClass, &a0))
              {
                INT_CALL(object = TermStates(a0));
                self->object = object;
                break;
              }
            }
            goto err;
           case 5:
            {
              ::org::apache::lucene::index::IndexReaderContext a0((jobject) NULL);
              ::org::apache::lucene::index::TermState a1((jobject) NULL);
              jint a2;
              jint a3;
              jlong a4;
              TermStates object((jobject) NULL);

              if (!parseArgs(args, "kkIIJ", ::org::apache::lucene::index::IndexReaderContext::initializeClass, ::org::apache::lucene::index::TermState::initializeClass, &a0, &a1, &a2, &a3, &a4))
              {
                INT_CALL(object = TermStates(a0, a1, a2, a3, a4));
                self->object = object;
                break;
              }
            }
           default:
           err:
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }

        static PyObject *t_TermStates_accumulateStatistics(t_TermStates *self, PyObject *args)
        {
          jint a0;
          jlong a1;

          if (!parseArgs(args, "IJ", &a0, &a1))
          {
            OBJ_CALL(self->object.accumulateStatistics(a0, a1));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "accumulateStatistics", args);
          return NULL;
        }

        static PyObject *t_TermStates_build(PyTypeObject *type, PyObject *args)
        {
          ::org::apache::lucene::index::IndexReaderContext a0((jobject) NULL);
          ::org::apache::lucene::index::Term a1((jobject) NULL);
          jboolean a2;
          TermStates result((jobject) NULL);

          if (!parseArgs(args, "kkZ", ::org::apache::lucene::index::IndexReaderContext::initializeClass, ::org::apache::lucene::index::Term::initializeClass, &a0, &a1, &a2))
          {
            OBJ_CALL(result = ::org::apache::lucene::index::TermStates::build(a0, a1, a2));
            return t_TermStates::wrap_Object(result);
          }

          PyErr_SetArgsError(type, "build", args);
          return NULL;
        }

        static PyObject *t_TermStates_clear(t_TermStates *self)
        {
          OBJ_CALL(self->object.clear());
          Py_RETURN_NONE;
        }

        static PyObject *t_TermStates_docFreq(t_TermStates *self)
        {
          jint result;
          OBJ_CALL(result = self->object.docFreq());
          return PyLong_FromLong((long) result);
        }

        static PyObject *t_TermStates_get(t_TermStates *self, PyObject *arg)
        {
          ::org::apache::lucene::index::LeafReaderContext a0((jobject) NULL);
          ::org::apache::lucene::index::TermState result((jobject) NULL);

          if (!parseArg(arg, "k", ::org::apache::lucene::index::LeafReaderContext::initializeClass, &a0))
          {
            OBJ_CALL(result = self->object.get(a0));
            return ::org::apache::lucene::index::t_TermState::wrap_Object(result);
          }

          PyErr_SetArgsError((PyObject *) self, "get", arg);
          return NULL;
        }

        static PyObject *t_TermStates_register(t_TermStates *self, PyObject *args)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 2:
            {
              ::org::apache::lucene::index::TermState a0((jobject) NULL);
              jint a1;

              if (!parseArgs(args, "kI", ::org::apache::lucene::index::TermState::initializeClass, &a0, &a1))
              {
                OBJ_CALL(self->object.register$(a0, a1));
                Py_RETURN_NONE;
              }
            }
            break;
           case 4:
            {
              ::org::apache::lucene::index::TermState a0((jobject) NULL);
              jint a1;
              jint a2;
              jlong a3;

              if (!parseArgs(args, "kIIJ", ::org::apache::lucene::index::TermState::initializeClass, &a0, &a1, &a2, &a3))
              {
                OBJ_CALL(self->object.register$(a0, a1, a2, a3));
                Py_RETURN_NONE;
              }
            }
          }

          PyErr_SetArgsError((PyObject *) self, "register", args);
          return NULL;
        }

        static PyObject *t_TermStates_toString(t_TermStates *self, PyObject *args)
        {
          ::java::lang::String result((jobject) NULL);

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.toString());
            return j2p(result);
          }

          return callSuper(PY_TYPE(TermStates), (PyObject *) self, "toString", args, 2);
        }

        static PyObject *t_TermStates_totalTermFreq(t_TermStates *self)
        {
          jlong result;
          OBJ_CALL(result = self->object.totalTermFreq());
          return PyLong_FromLongLong((PY_LONG_LONG) result);
        }

        static PyObject *t_TermStates_wasBuiltFor(t_TermStates *self, PyObject *arg)
        {
          ::org::apache::lucene::index::IndexReaderContext a0((jobject) NULL);
          jboolean result;

          if (!parseArg(arg, "k", ::org::apache::lucene::index::IndexReaderContext::initializeClass, &a0))
          {
            OBJ_CALL(result = self->object.wasBuiltFor(a0));
            Py_RETURN_BOOL(result);
          }

          PyErr_SetArgsError((PyObject *) self, "wasBuiltFor", arg);
          return NULL;
        }
      }
    }
  }
}
